- en: Chapter 6. Managing Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating users using the default login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating users using a custom login page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating users using a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a logout link
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using public folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authorizing only users with a specific role to view some pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying page elements only to authenticated users in views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTPS with Tomcat
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll cover the basics of managing the security of a Spring
    web application using **user authentication**, **user authorization**, and **HTTPS**.
  prefs: []
  type: TYPE_NORMAL
- en: 'User authentication is all about identifying a user: usually through a username
    and a password. User authorization is about assigning roles to users. These roles
    are then used at runtime to determine whether a user is allowed to perform a given
    action or view some specific contents. User authentication and authorization are
    handled by Spring.'
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS is all about encrypting the communication between our web server and the
    user's browser using **Secure Sockets Layer** (**SSL**). HTTPS needs to be enabled
    at the server level. We'll see how to do this with Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first recipe**,** *Enabling Spring Security*, is required for any of the
    other recipes to work.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To enable Spring Security, you need to add some Maven dependencies. You also
    need to create some configuration classes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to enable Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies for Spring Security in `pom.xml`. Note that the
    version number is different from Spring Core:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a class for the Spring Security configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the configuration class in the `ServletInitializer` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a class implementing `AbstractSecurityWebApplicationInitializer` to initialize
    Spring Security''s servlet filter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`SecurityWebApplicationInitializer` registers, behind the scenes, a servlet
    filter, which will handle access to any URL of the web application.'
  prefs: []
  type: TYPE_NORMAL
- en: The `SecurityConfig` class will be loaded at startup (because of its declaration
    in `ServletInitializer`). The Spring configuration code that we will write in
    the following recipes will go in the `SecurityConfig` class.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating users using the default login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring makes it easy to quickly add a login page to your web application; just
    define some user credentials (usernames and passwords) in the security configuration
    class. To access any page, the user will have to go through Spring's default login
    page first.
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating users using the default login page](img/5807OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In your security configuration class, add a `configureUsers()` method containing
    the hardcoded user credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `configureUsers()`, we told Spring to use the provided user credentials for
    user authentication. We assigned roles to each user. A role is an arbitrary `String`
    object. To use those roles for authorization, refer to the *Authorizing only users
    with a specific role to view some pages,* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the Spring''s default login page will be used to protect all the
    pages of the web application. This is defined in the default `configure()` method
    of Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will override this method in the following recipe in order to define a custom
    login page.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating users using a custom login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to build your own login form instead of using
    Spring's default login form.
  prefs: []
  type: TYPE_NORMAL
- en: '![Authenticating users using a custom login page](img/5807OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to define a custom login page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that the JSTL Maven dependency is declared in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that a JSP view resolver is declared in the `AppConfig` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a controller method for the login page in a controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a JSP for the login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SecurityConfig` class, override the Spring''s default `configure()`
    method. Declare the URL of your custom login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `SecurityConfig` class, the `configure()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Requires authentication for any URL: `anyRequest().authenticated()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allows user authentication through the custom login page: `formLogin().loginPage("/login")`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Allows anyone access to the login page: `loginPage("/login").permitAll();`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating users using a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to use user credentials (username and password)
    from a database for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to use user credentials in a database for authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Spring JDBC Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the database, create the `users` and `authorities` tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the database, add users and their roles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SecurityConfig` class, add a `DataSource` bean with the database connection
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SecurityConfig` class, add a `DataSourceTransactionManager` bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `SecurityConfig` class, override the Spring''s `configure()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `configure()` method overridden, Spring Security will:'
  prefs: []
  type: TYPE_NORMAL
- en: Use JDBC for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the provided `DataSource` bean to connect to the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perform these SQL queries to get users and their roles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a logout link
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to add a URL `/logout` to let the user log
    out.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `SecurityConfig` class, in the `configure()` method, call the `logout()`
    method and the `logoutRequestMatcher()` method to declare a logout URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use `org.springframework.security.web.util.` **matcher** `.AntPathRequestMatcher`,
    and not the deprecated `org.springframework.security.web.util.AntPathRequestMatcher`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While going to the URL `/logout`, the user will be logged out.
  prefs: []
  type: TYPE_NORMAL
- en: Using public folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some folders need their contents to be accessible without authentication, for
    example, the folder containing CSS files, the folder containing JavaScript files,
    and the folder containing static images. None of these usually contain confidential
    information and some of their files may be necessary to display the login page
    and the public pages of the website properly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the security configuration class, override the `configure(WebSecurity web)`
    method to define the public folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s also possible to define them in the standard `configure()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This enables public access to these folders, but requires authentication for
    any other request.
  prefs: []
  type: TYPE_NORMAL
- en: Authorizing only users with a specific role to view some pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are pages that only a few users should be allowed to access. For example,
    admin pages should be accessible only to admin users. This is done by matching
    the URLs of these pages to user roles, which were defined when the users were
    created; refer to the *Authenticating users using the default login page* and
    *Authenticating users using a database* recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `configure()` method, use the `hasRole()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This allows access to URLs starting with the `/admin` path only to users with
    the `ADMIN` role.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying page elements only to authenticated users in views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to display some elements of a page only to
    authenticated users. For example, a summary box with the information about the
    account of the currently logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `<sec:authorize>` tag in the JSP file to add conditions for some content
    to be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for the Spring Security JSP tags library in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, declare the tag library and use `<sec:authorize>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The text in the `sec:authorize` tag will be displayed only for authenticated
    users. We used the `sec:authentication` tag to display the username of the currently
    logged-in user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display contents only to the not-authenticated users, use the `isAnonymous()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: To display contents only to the users with the `ADMIN` role, use the `hasRole()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To display contents to the users with the `ADMIN` role or the `WARRIOR` role,
    use the hasAnyRole() function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'A full list of all the Spring expressions is available at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html](http://docs.spring.io/spring-security/site/docs/3.0.x/reference/el-access.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTPS with Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use HTTPS URLs, no Spring configuration is required, but you need to enable
    HTTPS on your server. In this recipe, we'll cover how to do this for Tomcat (on
    a Mac OS or Linux) using a self-generated SSL certificate. For production, remember
    to use a real commercial SSL certificate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to enable HTTPS for Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To generate an SSL certificate, open a Terminal and use the `keytool` command
    to create `certificate.bin`. In this example, the certificate user name is `admin`
    and the password is `adminpass`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Accept the default values, except for the last question whose answer should
    be `yes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Move `certificate.bin` to the root of Tomcat's folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `<tomcat_folder>/conf/server.xml`, uncomment the definition starting with
    `<Connector port="8443"` and add the `keystoreFile` and `keystorePass` attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart Tomcat and make sure that your web application is available via HTTPS
    on the `8443` port: `https://localhost:8443`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We configured Tomcat to accept incoming HTTPS requests on the `8443` port using
    a self-signed SSL certificate. Most web browsers will display a security warning
    before displaying the page because the SSL certificate is self-signed.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `certificate.bin` file can be anywhere on the machine, just use an absolute
    path in `server.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: It's possible to change the port number `8443` to anything else.
  prefs: []
  type: TYPE_NORMAL
- en: It's possible to use HTTPS exclusively by disabling access via plain HTTP; comment
    out the non-SSL connector in `server.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about Tomcat and HTTPS/SSL, go to [https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html](https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html).
  prefs: []
  type: TYPE_NORMAL
