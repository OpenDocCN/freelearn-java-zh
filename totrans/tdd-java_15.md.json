["```java\n    insert into word values (1, 'ARISE'), (2, 'SHINE'), (3, 'LIGHT'), (4, 'SLEEP'), (5, 'BEARS'), (6, 'GREET'), (7, 'GRATE');\n    ```", "```java\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\n    testImplementation 'org.assertj:assertj-core:3.22.0'\n    testImplementation 'org.mockito:mockito-core:4.8.0'\n    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'\n    testImplementation 'com.github.database-rider:rider-core:1.35.0'\n    testImplementation 'com.github.database-rider:rider-junit5:1.35.0'\n    implementation 'org.postgresql:postgresql:42.5.0'\n    implementation 'org.jdbi:jdbi3-core:3.34.0'\n    implementation 'org.apache.commons:commons-lang3:3.12.0'\nimplementation 'com.vtence.molecule:molecule:0.15.0'\n    implementation 'io.thorntail:undertow:2.7.0.Final'\n    implementation 'com.google.code.gson:gson:2.10'\n}\n```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    public class WordzEndpointTest {\n    ```", "```java\n    }\n    ```", "```java\n@Test\nvoid startGame() {\n}\n```", "```java\n    @Test\n    ```", "```java\n    void startGame() {\n    ```", "```java\n        HttpResponse res;\n    ```", "```java\n        assertThat(res)\n    ```", "```java\n           .hasStatusCode(HttpStatus.NO_CONTENT.code);\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void startGame() throws IOException,\n    ```", "```java\n                            InterruptedException {\n    ```", "```java\n        var httpClient = HttpClient.newHttpClient();\n    ```", "```java\n    HttpResponse res\n    ```", "```java\n    = httpClient.send(req,\n    ```", "```java\n                HttpResponse.BodyHandlers.discarding());\n    ```", "```java\n        assertThat(res)\n    ```", "```java\n           .hasStatusCode(HttpStatus.NO_CONTENT.code);\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    private static final Player PLAYER\n    ```", "```java\n           = new Player(\"alan2112\");\n    ```", "```java\n    void startGame() throws IOException,\n    ```", "```java\n                            InterruptedException {\n    ```", "```java\n        var req = HttpRequest.newBuilder()\n    ```", "```java\n           .uri(URI.create(\"htp://localhost:8080/start\"))\n    ```", "```java\n           .POST(HttpRequest.BodyPublishers\n    ```", "```java\n                .ofString(new Gson().toJson(PLAYER)))\n    ```", "```java\n                .build();\n    ```", "```java\n        var httpClient = HttpClient.newHttpClient();\n    ```", "```java\n        HttpResponse res\n    ```", "```java\n            = httpClient.send(req,\n    ```", "```java\n                HttpResponse.BodyHandlers.discarding());\n    ```", "```java\n        assertThat(res)\n    ```", "```java\n           .hasStatusCode(HttpStatus.NO_CONTENT.code);\n    ```", "```java\n    }\n    ```", "```java\n        @Test\n    ```", "```java\n        void startGame() throws IOException,\n    ```", "```java\n                                InterruptedException {\n    ```", "```java\n            var endpoint\n    ```", "```java\n               = new WordzEndpoint(\"localhost\", 8080);\n    ```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    public class WordzEndpoint {\n    ```", "```java\n        public WordzEndpoint(String host, int port) {\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    import com.vtence.molecule.WebServer;\n    ```", "```java\n    public class WordzEndpoint {\n    ```", "```java\n        private final WebServer server;\n    ```", "```java\n        public WordzEndpoint(String host, int port) {\n    ```", "```java\n            server = WebServer.create(host, port);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    public class WordzEndpoint {\n    ```", "```java\n        private final WebServer server;\n    ```", "```java\n        public WordzEndpoint(String host, int port) {\n    ```", "```java\n            server = WebServer.create(host, port);\n    ```", "```java\n            try {\n    ```", "```java\n                server.route(new Routes() {{\n    ```", "```java\n                    post(\"/start\")\n    ```", "```java\n                      .to(request -> startGame(request));\n    ```", "```java\n                }});\n    ```", "```java\n            } catch (IOException ioe) {\n    ```", "```java\n                throw new IllegaStateException(ioe);\n    ```", "```java\n            }\n    ```", "```java\n        }\n    ```", "```java\n        private Response startGame(Request request) {\n    ```", "```java\n            return Response\n    ```", "```java\n                     .of(HttpStatus.NOT_IMPLEMENTED)\n    ```", "```java\n                     .done();\n    ```", "```java\n      }\n    ```", "```java\n    }\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class WordzEndpointTest {\n    ```", "```java\n        @Mock\n    ```", "```java\n        private Wordz mockWordz;\n    ```", "```java\n        @Test\n    ```", "```java\n        void startGame() throws IOException,\n    ```", "```java\n                                InterruptedException {\n    ```", "```java\n            var endpoint\n    ```", "```java\n            = new WordzEndpoint(mockWordz,\n    ```", "```java\n                                \"localhost\", 8080);\n    ```", "```java\n    public class WordzEndpoint {\n    ```", "```java\n        private final WebServer server;\n    ```", "```java\n        private final Wordz wordz;\n    ```", "```java\n        public WordzEndpoint(Wordz wordz,\n    ```", "```java\n                             String host, int port) {\n    ```", "```java\n            this.wordz = wordz;\n    ```", "```java\n    private Response startGame(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            Player player\n    ```", "```java\n                    = new Gson().fromJson(request.body(),\n    ```", "```java\n                                          Player.class);\n    ```", "```java\n            boolean isSuccessful = wordz.newGame(player);\n    ```", "```java\n            if (isSuccessful) {\n    ```", "```java\n                return Response\n    ```", "```java\n                        .of(HttpStatus.NO_CONTENT)\n    ```", "```java\n                        .done();\n    ```", "```java\n            }\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n        throw new\n    ```", "```java\n           UnsupportedOperationException(\"Not\n    ```", "```java\n                                         implemented\");\n    ```", "```java\n    }\n    ```", "```java\n       @Test\n    ```", "```java\n    void startsGame() throws IOException,\n    ```", "```java\n                             InterruptedException {\n    ```", "```java\n        var endpoint\n    ```", "```java\n             = new WordzEndpoint(mockWordz,\n    ```", "```java\n                                 \"localhost\", 8080);\n    ```", "```java\n        when(mockWordz.newGame(eq(PLAYER)))\n    ```", "```java\n              .thenReturn(true);\n    ```", "```java\n@ExtendWith(MockitoExtension.class)\npublic class WordzEndpointTest {\n    @Mock\n    private Wordz mockWordz;\n    private WordzEndpoint endpoint;\n    private static final Player PLAYER\n                       = new Player(\"alan2112\");\n    private final HttpClient httpClient\n                       = HttpClient.newHttpClient();\n    @BeforeEach\n    void setUp() {\n        endpoint = new WordzEndpoint(mockWordz,\n                                  \"localhost\", 8080);\n    }\n    @Test\n    void startsGame() throws IOException,\n                             InterruptedException {\n        when(mockWordz.newGame(eq(player)))\n                              .thenReturn(true);\n        var req = requestBuilder(\"start\")\n                .POST(asJsonBody(PLAYER))\n                .build();\n        var res\n          = httpClient.send(req,\n                HttpResponse.BodyHandlers.discarding());\n        assertThat(res)\n             .hasStatusCode(HttpStatus.NO_CONTENT.code);\n    }\n    private HttpRequest.Builder requestBuilder(\n        String path) {\n        return HttpRequest.newBuilder()\n                .uri(URI.create(\"http://localhost:8080/\"\n                                  + path));\n    }\n    private HttpRequest.BodyPublisher asJsonBody(\n        Object source) {\n        return HttpRequest.BodyPublishers\n                 .ofString(new Gson().toJson(source));\n    }\n}\n```", "```java\n        @Test\n    ```", "```java\n        void rejectsRestart() throws Exception {\n    ```", "```java\n            when(mockWordz.newGame(eq(player)))\n    ```", "```java\n                             .thenReturn(false);\n    ```", "```java\n            var req = requestBuilder(\"start\")\n    ```", "```java\n                    .POST(asJsonBody(player))\n    ```", "```java\n                    .build();\n    ```", "```java\n            var res\n    ```", "```java\n               = httpClient.send(req,\n    ```", "```java\n                    HttpResponse.BodyHandlers.discarding());\n    ```", "```java\n            assertThat(res)\n    ```", "```java\n                   .hasStatusCode(HttpStatus.CONFLICT.code);\n    ```", "```java\n        }\n    ```", "```java\n    private Response startGame(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            Player player\n    ```", "```java\n                    = new Gson().fromJson(request.body(),\n    ```", "```java\n                                          Player.class);\n    ```", "```java\n            boolean isSuccessful = wordz.newGame(player);\n    ```", "```java\n            if (isSuccessful) {\n    ```", "```java\n                return Response\n    ```", "```java\n                        .of(HttpStatus.NO_CONTENT)\n    ```", "```java\n                        .done();\n    ```", "```java\n            }\n    ```", "```java\n            return Response\n    ```", "```java\n                    .of(HttpStatus.CONFLICT)\n    ```", "```java\n                    .done();\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    @BeforeAll\n    ```", "```java\n    void setUp() {\n    ```", "```java\n        mockWordz = mock(Wordz.class);\n    ```", "```java\n        endpoint = new WordzEndpoint(mockWordz,\n    ```", "```java\n                                     \"localhost\", 8080);\n    ```", "```java\n    }\n    ```", "```java\n@ExtendWith(MockitoExtension.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class WordzEndpointTest {\n```", "```java\n    private Response startGame(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            Player player = extractPlayer(request);\n    ```", "```java\n            boolean isSuccessful = wordz.newGame(player);\n    ```", "```java\n            HttpStatus status\n    ```", "```java\n                    = isSuccessful?\n    ```", "```java\n                        HttpStatus.NO_CONTENT :\n    ```", "```java\n                        HttpStatus.CONFLICT;\n    ```", "```java\n                return Response\n    ```", "```java\n                        .of(status)\n    ```", "```java\n                        .done();\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private Player extractPlayer(Request request)\n    ```", "```java\n                                     throws IOException {\n    ```", "```java\n        return new Gson().fromJson(request.body(),\n    ```", "```java\n                                   Player.class);\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void partiallyCorrectGuess() {\n    ```", "```java\n        var score = new Score(\"-U---\");\n    ```", "```java\n        score.assess(\"GUESS\");\n    ```", "```java\n        var result = new GuessResult(score, false, false);\n    ```", "```java\n        when(mockWordz.assess(eq(player), eq(\"GUESS\")))\n    ```", "```java\n                .thenReturn(result);\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void partiallyCorrectGuess() {\n    ```", "```java\n        var score = new Score(\"-U---\");\n    ```", "```java\n        score.assess(\"GUESS\");\n    ```", "```java\n        var result = new GuessResult(score, false, false);\n    ```", "```java\n        when(mockWordz.assess(eq(player), eq(\"GUESS\")))\n    ```", "```java\n                .thenReturn(result);\n    ```", "```java\n        var guessRequest = new GuessRequest(player, \"-U---\");\n    ```", "```java\n        var body = new Gson().toJson(guessRequest);\n    ```", "```java\n        var req = requestBuilder(\"guess\")\n    ```", "```java\n                .POST(ofString(body))\n    ```", "```java\n                .build();\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    import com.wordz.domain.Player;\n    ```", "```java\n    public record GuessRequest(Player player, String guess) {\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void partiallyCorrectGuess() throws Exception {\n    ```", "```java\n        var score = new Score(\"-U---\");\n    ```", "```java\n        score.assess(\"GUESS\");\n    ```", "```java\n        var result = new GuessResult(score, false, false);\n    ```", "```java\n        when(mockWordz.assess(eq(player), eq(\"GUESS\")))\n    ```", "```java\n                .thenReturn(result);\n    ```", "```java\n        var guessRequest = new GuessRequest(player, \"-U---\");\n    ```", "```java\n        var body = new Gson().toJson(guessRequest);\n    ```", "```java\n        var req = requestBuilder(\"guess\")\n    ```", "```java\n                .POST(ofString(body))\n    ```", "```java\n                .build();\n    ```", "```java\n        var res\n    ```", "```java\n           = httpClient.send(req,\n    ```", "```java\n                HttpResponse.BodyHandlers.ofString());\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void partiallyCorrectGuess() throws Exception {\n    ```", "```java\n        var score = new Score(\"-U--G\");\n    ```", "```java\n        score.assess(\"GUESS\");\n    ```", "```java\n        var result = new GuessResult(score, false, false);\n    ```", "```java\n        when(mockWordz.assess(eq(player), eq(\"GUESS\")))\n    ```", "```java\n                .thenReturn(result);\n    ```", "```java\n        var guessRequest = new GuessRequest(player,\n    ```", "```java\n                                            \"-U--G\");\n    ```", "```java\n        var body = new Gson().toJson(guessRequest);\n    ```", "```java\n        var req = requestBuilder(\"guess\")\n    ```", "```java\n                .POST(ofString(body))\n    ```", "```java\n                .build();\n    ```", "```java\n        var res\n    ```", "```java\n           = httpClient.send(req,\n    ```", "```java\n                HttpResponse.BodyHandlers.ofString());\n    ```", "```java\n        var response\n    ```", "```java\n           = new Gson().fromJson(res.body(),\n    ```", "```java\n                             GuessHttpResponse.class);\n    ```", "```java\n        // Key to letters in scores():\n    ```", "```java\n        // C correct, P part correct, X incorrect\n    ```", "```java\n        Assertions.assertThat(response.scores())\n    ```", "```java\n            .isEqualTo(\"PCXXX\");\n    ```", "```java\n        Assertions.assertThat(response.isGameOver())\n    ```", "```java\n    .isFalse();\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    public record GuessHttpResponse(String scores,\n    ```", "```java\n                                    boolean isGameOver) {\n    ```", "```java\n    }\n    ```", "```java\n    public WordzEndpoint(Wordz wordz, String host,\n    ```", "```java\n                         int port) {\n    ```", "```java\n        this.wordz = wordz;\n    ```", "```java\n        server = WebServer.create(host, port);\n    ```", "```java\n        try {\n    ```", "```java\n            server.route(new Routes() {{\n    ```", "```java\n                post(\"/start\")\n    ```", "```java\n                    .to(request -> startGame(request));\n    ```", "```java\n                post(\"/guess\")\n    ```", "```java\n                    .to(request -> guessWord(request));\n    ```", "```java\n            }});\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new IllegalStateException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private Response guessWord(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            GuessRequest gr =\n    ```", "```java\n                 extractGuessRequest(request);\n    ```", "```java\n            return null ;\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private GuessRequest extractGuessRequest(Request request) throws IOException {\n    ```", "```java\n        return new Gson().fromJson(request.body(),\n    ```", "```java\n                                   GuessRequest.class);\n    ```", "```java\n    }\n    ```", "```java\n    private Response guessWord(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            GuessRequest gr =\n    ```", "```java\n                 extractGuessRequest(request);\n    ```", "```java\n            GuessResult result\n    ```", "```java\n                    = wordz.assess(gr.player(),\n    ```", "```java\n                      gr.guess());\n    ```", "```java\n            return null;\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private Response guessWord(Request request) {\n    ```", "```java\n        try {\n    ```", "```java\n            GuessRequest gr =\n    ```", "```java\n                extractGuessRequest(request);\n    ```", "```java\n            GuessResult result = wordz.assess(gr.player(),\n    ```", "```java\n                                 gr.guess());\n    ```", "```java\n            return Response.ok()\n    ```", "```java\n                    .body(createGuessHttpResponse(result))\n    ```", "```java\n                    .done();\n    ```", "```java\n        } catch (IOException e) {\n    ```", "```java\n            throw new RuntimeException(e);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    private String createGuessHttpResponse(GuessResult result) {\n    ```", "```java\n    GuessHttpResponse httpResponse\n    ```", "```java\n              = new\n    ```", "```java\n                GuessHttpResponseMapper().from(result);\n    ```", "```java\n        return new Gson().toJson(httpResponse);\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.adapters.api;\n    ```", "```java\n    import com.wordz.domain.GuessResult;\n    ```", "```java\n    public class GuessHttpResponseMapper {\n    ```", "```java\n        public GuessHttpResponse from(GuessResult result) {\n    ```", "```java\n    return null;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npackage com.wordz;\nimport com.wordz.adapters.api.WordzEndpoint;\nimport com.wordz.adapters.db.GameRepositoryPostgres;\nimport com.wordz.adapters.db.WordRepositoryPostgres;\nimport com.wordz.domain.Wordz;\npublic class WordzApplication {\n    public static void main(String[] args) {\n        var config = new WordzConfiguration(args);\n        new WordzApplication().run(config);\n    }\n    private void run(WordzConfiguration config) {\n        var gameRepository\n         = new GameRepositoryPostgres(config.getDataSource());\n        var wordRepository\n         = new WordRepositoryPostgres(config.getDataSource());\n        var randomNumbers = new ProductionRandomNumbers();\n        var wordz = new Wordz(gameRepository,\n                              wordRepository,\n                              randomNumbers);\n        var api = new WordzEndpoint(wordz,\n                                    config.getEndpointHost(),\n                                    config.getEndpointPort());\n        waitUntilTerminated();\n    }\n    private void waitUntilTerminated() {\n        try {\n            while (true) {\n                Thread.sleep(10000);\n            }\n        } catch (InterruptedException e) {\n            return;\n        }\n    }\n}\n```", "```java\nwordzdb=# select * from game;\n player_name | word  | attempt_number | is_game_over\n-------------+-------+----------------+--------------\n testuser    | ARISE |              0 | f\n(1 row)\nwordzdb=#\n```"]