- en: Chapter 2. Creating a Dropwizard Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章。创建 Dropwizard 应用程序
- en: Let's go through the processes required to create a new RESTful Web Services
    application based on Dropwizard. Firstly, we will need to create the application's
    structure, files, and folders, and also obtain the necessary libraries. Luckily,
    Maven will handle these tasks for us.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过创建基于 Dropwizard 的新 RESTful Web 服务应用程序所需的过程。首先，我们需要创建应用程序的结构、文件和文件夹，并获取必要的库。幸运的是，Maven
    将为我们处理这些任务。
- en: As soon as our application's structure is ready, we will modify the appropriate
    files, defining the application's dependencies on Dropwizard's modules and also
    configuring how the runnable package of our application should be produced. After
    that, we may proceed to coding our application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的应用程序结构准备就绪，我们将修改适当的文件，定义应用程序对 Dropwizard 模块的依赖关系，并配置应用程序的可执行包应该如何生成。之后，我们可以继续编写应用程序的代码。
- en: Generating a Maven-based project
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成基于 Maven 的项目
- en: Before we start with coding, we need to perform some tasks in order to properly
    create our project's structure. We are going to use Maven in order to generate
    a default, empty project, which we will then turn into a Dropwizard application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编码之前，我们需要执行一些任务，以便正确创建项目结构。我们将使用 Maven 来生成一个默认的、空的项目，然后将其转换为 Dropwizard
    应用程序。
- en: Getting ready
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Our project will be based on the `maven-archetype-quickstart` archetype. Archetypes
    are Maven project templates, and by using the `quick-start` archetype, we will
    have our project's structure (folders and files) prepared in no time.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目将基于 `maven-archetype-quickstart` 架构。架构是 Maven 项目模板，通过使用 `quick-start` 架构，我们将在很短的时间内准备好项目结构（文件夹和文件）。
- en: How to do it…
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Open the terminal (the command line in Windows) and navigate to the directory
    where you want your application to be created.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（Windows 的命令行）并导航到您想要创建应用程序的目录。
- en: 'Create a new Maven project by executing the following command (without the
    line breaks):'
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行以下命令创建一个新的 Maven 项目（不带换行符）：
- en: '[PRE0]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will create an empty Maven project in the `dwbook-phonebook` directory.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `dwbook-phonebook` 目录中创建一个空白的 Maven 项目。
- en: Tip
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册，以便将文件直接通过电子邮件发送给您。
- en: How it works…
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: Dropwizard is based on Maven, so we created a new Maven project in which we
    included Dropwizard's core dependency.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard 是基于 Maven 的，因此我们在其中包含了 Dropwizard 的核心依赖项的新 Maven 项目中创建了一个新项目。
- en: 'The structure of the `dwbook-phonebook` directory at this point is illustrated
    in the following screenshot:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`dwbook-phonebook` 目录的结构如下所示：
- en: '![How it works…](img/9530OS_02_01.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/9530OS_02_01.jpg)'
- en: The `src/` folder will hold our application's main classes, whereas all the
    test classes will be placed under the `test/` directory.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`src/` 文件夹将包含我们的应用程序的主要类，而所有测试类都将放置在 `test/` 目录下。'
- en: Notice that Maven has placed `pom.xml` on the application's root folder. The
    **Project Object Model** (**POM**) is an XML file that holds important information
    regarding our project's configuration and dependencies. This is the file we need
    to edit in order to add Dropwizard support for our project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Maven 已经将 `pom.xml` 放在了应用程序的根目录下。**项目对象模型**（**POM**）是一个包含有关项目配置和依赖项重要信息的
    XML 文件。这是我们需要编辑的文件，以便为我们的项目添加 Dropwizard 支持。
- en: Configuring Dropwizard dependencies and building the configuration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Dropwizard 依赖项和构建配置
- en: We just created a sample application outline. The next thing we need to do is
    edit the project's configuration file, `pom.xml`, and define the Maven modules
    on which our application will depend on. We are building a Dropwizard application,
    and Dropwizard is based on Maven, so everything we need is available in the Maven
    Central Repository. This means that we just need to provide the modules' IDs,
    and Maven will take care of the download and inclusion of these modules in our
    project.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建了一个示例应用程序概要。接下来，我们需要编辑项目的配置文件`pom.xml`，并定义我们的应用程序所依赖的Maven模块。我们正在构建一个Dropwizard应用程序，而Dropwizard基于Maven，所以我们需要的一切都在Maven
    Central Repository中。这意味着我们只需要提供模块的ID，Maven就会负责下载并将这些模块包含到我们的项目中。
- en: Next, we need to add build and package support to our project. We will use the
    `maven-shade` plugin, which will allow us to package our project completely, along
    with its dependencies, into a single standalone JAR file (Fat JAR) that can be
    distributed and executed as is.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为我们的项目添加构建和打包支持。我们将使用`maven-shade`插件，这将允许我们将我们的项目及其依赖项完全打包成一个单一的独立JAR文件（胖JAR），它可以直接分发和执行。
- en: How to do it…
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to configure Dropwizard dependencies and build
    the configuration:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以配置Dropwizard依赖项并构建配置：
- en: 'We need to configure our POM by adding the Maven Repository where snapshots
    of all Dropwizard modules can be found. Maven will then be able to automatically
    fetch the required modules during the building of our project. Locate the `<dependencies>`
    section in `pom.xml` and add the following entries just before it:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要通过添加包含所有Dropwizard模块快照的Maven仓库来配置我们的POM。然后，Maven将能够在构建我们的项目时自动获取所需的模块。在`pom.xml`中的`<dependencies>`部分找到并添加以下条目：
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To define the dependencies, add the following code within the `<dependencies>`
    section:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要定义依赖项，在`<dependencies>`部分内添加以下代码：
- en: '[PRE2]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To configure the build and package procedures, locate the `<project>` section
    in `pom.xml` and insert the following entries within it:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要配置构建和打包过程，在`pom.xml`中的`<project>`部分找到并插入以下条目：
- en: '[PRE3]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We just told Maven everything it needs to know in order to build our application.
    Maven will fetch the Dropwizard core module from the Maven Central Repository
    and include it in the build path while packaging (as a result of the `mvn` package
    command) the application.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚告诉Maven构建我们的应用程序所需知道的一切。Maven将从Maven Central Repository获取Dropwizard核心模块，并在打包（由于`mvn
    package`命令）应用程序时将其包含在构建路径中。
- en: Moreover, we added build and package support with the `maven-shade` plugin and
    also specified our application's main class (the `<mainClass>` section in `pom.xml`),
    which facilitates the packaging of the Dropwizard application with its dependencies
    into a single JAR file. We also instructed the `maven-compiler-plugin` to build
    the application for Java Version 1.7 (check the target and source elements of
    the configuration section of `maven-compiler plugin`).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们使用`maven-shade`插件添加了构建和打包支持，并指定了我们的应用程序的主类（`pom.xml`中的`<mainClass>`部分），这有助于将Dropwizard应用程序及其依赖项打包成一个单一的JAR文件。我们还指示`maven-compiler-plugin`为Java
    1.7版本构建应用程序（检查`maven-compiler plugin`配置部分的target和source元素）。
- en: The exclusion of digital signatures
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 排除数字签名
- en: The `<excludes>` section in the `maven-shade` configuration instructs Maven
    to exclude the digital signatures of all the referenced signed JAR files. This
    is because Java would otherwise treat them as invalid during runtime, preventing
    the execution of our application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-shade`配置中的`<excludes>`部分指示Maven排除所有引用的已签名JAR文件的数字签名。这是因为Java否则会在运行时将它们视为无效，从而阻止我们的应用程序执行。'
- en: Hello World using Dropwizard
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Dropwizard的“Hello World”
- en: Our project's dependencies are now set in the `pom.xml` file and we may start
    building our application. Maven has already created our application's entry point
    class, the `App` class, in the `App.java` file. However, its default contents
    are more suitable to a plain Java application and not a Dropwizard-based one.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目依赖项现在已设置在`pom.xml`文件中，我们可以开始构建我们的应用程序。Maven已经在我们`App.java`文件中创建了应用程序的入口点类，即`App`类。然而，其默认内容更适合于一个普通的Java应用程序，而不是基于Dropwizard的。
- en: How to do it…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s have a look at the steps we need to follow to print a `Hello World`
    message using Dropwizard:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看打印`Hello World`消息使用Dropwizard所需的步骤：
- en: 'In the `App.java` file, add the following import clauses:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.java`文件中，添加以下导入语句：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Modify the definition of the `App` class as shown in the next step. This class
    needs to extend `Application <Configuration>`.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`App`类的定义，如下一步所示。这个类需要扩展`Application <Configuration>`。
- en: 'Add a logger to our application by declaring it as a static final member of
    the `App` class after its definition:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`App`类的定义之后将其声明为静态最终成员，为我们的应用程序添加一个日志记录器：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Implement the abstract methods of the `Service` class, `initialize()` and `run()`,
    by adding the following code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下代码实现`Service`类的抽象方法`initialize()`和`run()`：
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, modify the `main()` method, adding the necessary code to instantiate
    our Dropwizard service:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改`main()`方法，添加必要的代码来实例化我们的Dropwizard服务：
- en: '[PRE7]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Build the application by executing the following command in your terminal inside
    the `dwbook-phonebook` directory:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dwbook-phonebook`目录内，通过执行以下命令来构建应用程序：
- en: '[PRE8]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of this command will contain the `[INFO] BUILD SUCCESS` line, indicating
    that the project was successfully built, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令的输出将包含`[INFO] BUILD SUCCESS`行，表明项目已成功构建，如下面的截图所示：
- en: '![How to do it…](img/9530OS_02_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/9530OS_02_02.jpg)'
- en: 'Maven has produced (built) the executable Fat JAR using the shade plugin, and
    this can be located in the target/directory named `dwbook-phonebook-1.0-SNAPSHOT.jar`.
    Run it as you would with any executable JAR file using the `java -jar` command
    as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Maven使用shade插件生成了可执行的Fat JAR，它位于`target/directory`目录下，名为`dwbook-phonebook-1.0-SNAPSHOT.jar`。你可以像运行任何可执行JAR文件一样使用`java
    -jar`命令来运行它，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Normally, you should see a lot of entries in your terminal, including an error.
    The first line is the message in which we included the `#run()` method. This is
    followed by a warning message indicating that our application has no health checks
    configured, but this is something we will handle later on in this book.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会在终端看到很多条目，包括一个错误。第一行是我们包含的`#run()`方法的提示信息。随后是一个警告信息，指出我们的应用程序没有配置健康检查，但这是我们将在本书后面处理的事情。
- en: The next logged entries indicate that the Jetty server embedded in our Dropwizard
    application is starting and listening for incoming requests on port 8080\. Port
    8081 is also used for administration purposes. You will also see an error stating
    that no resource classes could be located (the `ResourceConfig` instance does
    not contain any root resource classes), which is reasonable and absolutely normal,
    as we haven't created and configured any REST resources yet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个记录的条目表明，嵌入在我们Dropwizard应用程序中的Jetty服务器正在启动并监听8080端口的传入请求。8081端口也用于管理目的。你还会看到一个错误，指出找不到任何资源类（`ResourceConfig`实例不包含任何根资源类），这是合理的，也是绝对正常的，因为我们还没有创建和配置任何REST资源。
- en: '![How to do it…](img/9530OS_02_03.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![如何做…](img/9530OS_02_03.jpg)'
- en: How it works…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: What we just did was we added the minimum amount of code required in a Dropwizard
    application. As you saw, our application's entry point class needs to extend the
    `io.dropwizard.Application` class and implement the `initialize(Bootstrap<Configuration>)`
    and `run(Configuration, Environment)` methods. The `initialize` method is tasked
    with bootstrapping, possibly loading additional components and generally preparing
    the runtime environment of the application.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才所做的只是添加了在Dropwizard应用程序中所需的最小代码量。正如你所看到的，我们的应用程序的入口点类需要扩展`io.dropwizard.Application`类，并实现`initialize(Bootstrap<Configuration>)`和`run(Configuration,
    Environment)`方法。`initialize`方法负责引导，可能加载额外的组件，并通常准备应用程序的运行环境。
- en: We were going to just print a `Hello` message in this phase, so we included
    only a `println()` statement in the `run()` method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，我们只是打印一个`Hello`消息，所以我们在`run()`方法中只包含了一个`println()`语句。
- en: The execution of the JAR file produced by the `mvn` package command resulted
    in the printing of the **Hello World!** greeting by Dropwizard, as `public static
    void main` triggered the execution of the relevant code in the `public void run`
    method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由`mvn`包命令生成的JAR文件的执行导致Dropwizard打印了**Hello World!**问候语，因为`public static void
    main`触发了`public void run`方法中的相关代码。
- en: There's more…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: For executing the JAR file, we add the `server` argument to the command. In
    `public static void main`, we called the `public void run` method, passing command-line
    arguments to it. Dropwizard has only one command preconfigured (although we're
    able to configure additional commands), the `server` command, which starts the
    embedded HTTP Server (Jetty) to run our service. In our case, following the execution
    of the code in the `run()` method, an error with an exception was displayed as
    Jetty couldn't locate any REST resources to serve.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行 JAR 文件，我们在命令中添加了 `server` 参数。在 `public static void main` 中，我们调用了 `public
    void run` 方法，并将命令行参数传递给它。Dropwizard 只有一个预配置的命令（尽管我们能够配置额外的命令），即 `server` 命令，它启动内嵌的
    HTTP 服务器（Jetty）以运行我们的服务。在我们的例子中，在 `run()` 方法中的代码执行之后，显示了一个带有异常的错误，因为 Jetty 找不到任何
    REST 资源来提供服务。
- en: Logging
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志记录
- en: Dropwizard is backed by Logback and provides an SLF4J implementation for our
    logging means. In the `App.java` file, we imported the necessary `Logger` and
    `LoggerFactory` classes in order to construct a `Logger` instance we could use
    for our logging needs.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard 由 Logback 支持，并为我们的日志记录提供了 SLF4J 实现。在 `App.java` 文件中，我们导入了必要的 `Logger`
    和 `LoggerFactory` 类，以便构建一个我们可以用于日志记录需求的 `Logger` 实例。
- en: Default HTTP Ports
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 默认 HTTP 端口
- en: Dropwizard's embedded Jetty server will try to bind to ports 8080 and 8081 by
    default. Port 8080 is used by the server in order to serve incoming HTTP requests
    to the application, while 8081 is used by Dropwizard's administration interface.
    In case there is another service running on your system that uses any of these
    ports, you will see a `java.net.BindException` when trying to run this example.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard 的内嵌 Jetty 服务器默认会尝试绑定到端口 8080 和 8081。端口 8080 由服务器用于处理应用程序的传入 HTTP
    请求，而 8081 由 Dropwizard 的管理界面使用。如果在您的系统上运行了其他使用这些端口中的任何一个的服务，当尝试运行此示例时，您将看到 `java.net.BindException`
    异常。
- en: Later on, we will see how you can configure your application to use another
    port for incoming requests, but for now, just make sure this port is available
    to use.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将看到如何配置您的应用程序以使用另一个端口来接收请求，但到目前为止，请确保这个端口可用。
