- en: Chapter 2. Creating a Dropwizard Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's go through the processes required to create a new RESTful Web Services
    application based on Dropwizard. Firstly, we will need to create the application's
    structure, files, and folders, and also obtain the necessary libraries. Luckily,
    Maven will handle these tasks for us.
  prefs: []
  type: TYPE_NORMAL
- en: As soon as our application's structure is ready, we will modify the appropriate
    files, defining the application's dependencies on Dropwizard's modules and also
    configuring how the runnable package of our application should be produced. After
    that, we may proceed to coding our application.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a Maven-based project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we start with coding, we need to perform some tasks in order to properly
    create our project's structure. We are going to use Maven in order to generate
    a default, empty project, which we will then turn into a Dropwizard application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our project will be based on the `maven-archetype-quickstart` archetype. Archetypes
    are Maven project templates, and by using the `quick-start` archetype, we will
    have our project's structure (folders and files) prepared in no time.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the terminal (the command line in Windows) and navigate to the directory
    where you want your application to be created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new Maven project by executing the following command (without the
    line breaks):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create an empty Maven project in the `dwbook-phonebook` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Dropwizard is based on Maven, so we created a new Maven project in which we
    included Dropwizard's core dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure of the `dwbook-phonebook` directory at this point is illustrated
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9530OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `src/` folder will hold our application's main classes, whereas all the
    test classes will be placed under the `test/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that Maven has placed `pom.xml` on the application's root folder. The
    **Project Object Model** (**POM**) is an XML file that holds important information
    regarding our project's configuration and dependencies. This is the file we need
    to edit in order to add Dropwizard support for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Dropwizard dependencies and building the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just created a sample application outline. The next thing we need to do is
    edit the project's configuration file, `pom.xml`, and define the Maven modules
    on which our application will depend on. We are building a Dropwizard application,
    and Dropwizard is based on Maven, so everything we need is available in the Maven
    Central Repository. This means that we just need to provide the modules' IDs,
    and Maven will take care of the download and inclusion of these modules in our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to add build and package support to our project. We will use the
    `maven-shade` plugin, which will allow us to package our project completely, along
    with its dependencies, into a single standalone JAR file (Fat JAR) that can be
    distributed and executed as is.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure Dropwizard dependencies and build
    the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to configure our POM by adding the Maven Repository where snapshots
    of all Dropwizard modules can be found. Maven will then be able to automatically
    fetch the required modules during the building of our project. Locate the `<dependencies>`
    section in `pom.xml` and add the following entries just before it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To define the dependencies, add the following code within the `<dependencies>`
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To configure the build and package procedures, locate the `<project>` section
    in `pom.xml` and insert the following entries within it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We just told Maven everything it needs to know in order to build our application.
    Maven will fetch the Dropwizard core module from the Maven Central Repository
    and include it in the build path while packaging (as a result of the `mvn` package
    command) the application.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we added build and package support with the `maven-shade` plugin and
    also specified our application's main class (the `<mainClass>` section in `pom.xml`),
    which facilitates the packaging of the Dropwizard application with its dependencies
    into a single JAR file. We also instructed the `maven-compiler-plugin` to build
    the application for Java Version 1.7 (check the target and source elements of
    the configuration section of `maven-compiler plugin`).
  prefs: []
  type: TYPE_NORMAL
- en: The exclusion of digital signatures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `<excludes>` section in the `maven-shade` configuration instructs Maven
    to exclude the digital signatures of all the referenced signed JAR files. This
    is because Java would otherwise treat them as invalid during runtime, preventing
    the execution of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Hello World using Dropwizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our project's dependencies are now set in the `pom.xml` file and we may start
    building our application. Maven has already created our application's entry point
    class, the `App` class, in the `App.java` file. However, its default contents
    are more suitable to a plain Java application and not a Dropwizard-based one.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have a look at the steps we need to follow to print a `Hello World`
    message using Dropwizard:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `App.java` file, add the following import clauses:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Modify the definition of the `App` class as shown in the next step. This class
    needs to extend `Application <Configuration>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a logger to our application by declaring it as a static final member of
    the `App` class after its definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the abstract methods of the `Service` class, `initialize()` and `run()`,
    by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, modify the `main()` method, adding the necessary code to instantiate
    our Dropwizard service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the application by executing the following command in your terminal inside
    the `dwbook-phonebook` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of this command will contain the `[INFO] BUILD SUCCESS` line, indicating
    that the project was successfully built, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Maven has produced (built) the executable Fat JAR using the shade plugin, and
    this can be located in the target/directory named `dwbook-phonebook-1.0-SNAPSHOT.jar`.
    Run it as you would with any executable JAR file using the `java -jar` command
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Normally, you should see a lot of entries in your terminal, including an error.
    The first line is the message in which we included the `#run()` method. This is
    followed by a warning message indicating that our application has no health checks
    configured, but this is something we will handle later on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: The next logged entries indicate that the Jetty server embedded in our Dropwizard
    application is starting and listening for incoming requests on port 8080\. Port
    8081 is also used for administration purposes. You will also see an error stating
    that no resource classes could be located (the `ResourceConfig` instance does
    not contain any root resource classes), which is reasonable and absolutely normal,
    as we haven't created and configured any REST resources yet.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What we just did was we added the minimum amount of code required in a Dropwizard
    application. As you saw, our application's entry point class needs to extend the
    `io.dropwizard.Application` class and implement the `initialize(Bootstrap<Configuration>)`
    and `run(Configuration, Environment)` methods. The `initialize` method is tasked
    with bootstrapping, possibly loading additional components and generally preparing
    the runtime environment of the application.
  prefs: []
  type: TYPE_NORMAL
- en: We were going to just print a `Hello` message in this phase, so we included
    only a `println()` statement in the `run()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The execution of the JAR file produced by the `mvn` package command resulted
    in the printing of the **Hello World!** greeting by Dropwizard, as `public static
    void main` triggered the execution of the relevant code in the `public void run`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For executing the JAR file, we add the `server` argument to the command. In
    `public static void main`, we called the `public void run` method, passing command-line
    arguments to it. Dropwizard has only one command preconfigured (although we're
    able to configure additional commands), the `server` command, which starts the
    embedded HTTP Server (Jetty) to run our service. In our case, following the execution
    of the code in the `run()` method, an error with an exception was displayed as
    Jetty couldn't locate any REST resources to serve.
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dropwizard is backed by Logback and provides an SLF4J implementation for our
    logging means. In the `App.java` file, we imported the necessary `Logger` and
    `LoggerFactory` classes in order to construct a `Logger` instance we could use
    for our logging needs.
  prefs: []
  type: TYPE_NORMAL
- en: Default HTTP Ports
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dropwizard's embedded Jetty server will try to bind to ports 8080 and 8081 by
    default. Port 8080 is used by the server in order to serve incoming HTTP requests
    to the application, while 8081 is used by Dropwizard's administration interface.
    In case there is another service running on your system that uses any of these
    ports, you will see a `java.net.BindException` when trying to run this example.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, we will see how you can configure your application to use another
    port for incoming requests, but for now, just make sure this port is available
    to use.
  prefs: []
  type: TYPE_NORMAL
