- en: Chapter 6. Integrating Spring Batch
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。集成Spring Batch
- en: In the previous chapter, we learned about controlling the flow of a batch job
    using exit code and decision logic, sharing the data between the steps in execution,
    and reusing the process by externalizing the flow and inherited job mechanisms.
    We also learned how to terminate the batch job in different states and their importance.
    An organization performs its operations with the help of a number of tools and
    maintains its data and applications across locations. It is important to integrate
    the data across these applications with a decent mechanism to synchronize the
    systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用退出代码和决策逻辑控制批处理作业的流程，在执行步骤之间共享数据，并通过外部化和继承作业机制来重用流程。我们还学习了如何在不同状态下终止批处理作业及其重要性。一个组织借助多种工具进行其操作，并在不同地点维护其数据和应用程序。使用一种合理的机制来集成这些应用程序中的数据，以同步系统是很重要的。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Enterprise Integration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 企业集成
- en: Spring Integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring集成
- en: RESTful job processing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful作业处理
- en: Enterprise Integration
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 企业集成
- en: So far we have seen batch jobs configured with different steps; reading data
    from different sources, performing operations, and writing data to different destinations.
    In real time, organizations use different applications to perform their operations.
    The application used to maintain the employee information and process their payroll
    might not be the same as the one that takes care of logistics and sales. In such
    scenarios, it is important to integrate these applications seamlessly to process
    the whole data together at any particular point and perform an operation on the
    system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了配置了不同步骤的批处理作业；从不同的来源读取数据，执行操作，并将数据写入不同的目的地。在实时操作中，组织使用不同的应用程序来执行其操作。用于维护员工信息和处理工资单的应用程序可能与负责物流和销售的应用程序不同。在这种情况下，无缝集成这些应用程序以在任何特定点一起处理整个数据并执行系统操作是很重要的。
- en: The following figure shows how an **Enterprise Resource Planning** (**ERP**)
    system integrates different modules, accesses the information from its systems,
    and maintains it as an entity.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了企业资源规划（ERP）系统如何集成不同的模块，从其系统中访问信息，并将其作为实体维护。
- en: '![Enterprise Integration](img/3372OS_06_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![企业集成](img/3372OS_06_01.jpg)'
- en: 'The following are the different ways to integrate enterprise applications:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是企业应用程序集成的方式：
- en: '**File-based data transfer**: Applications exchange data based on flat files;
    the source system writes data onto a flat file and exports the file to the destination
    system. The destination system reads data from a flat file and imports into its
    destination database.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于文件的数据传输**：应用程序基于平面文件交换数据；源系统将数据写入平面文件并将文件导出到目标系统。目标系统从平面文件中读取数据并将其导入其目标数据库。'
- en: '**Resource sharing**: Applications share common resources, such as a filesystem
    or a database, to perform their operations. Virtually, they act as individual
    systems; however, they populate/write data onto a common system.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源共享**：应用程序共享通用资源，例如文件系统或数据库，以执行其操作。实际上，它们作为独立系统运行；然而，它们在通用系统上填充/写入数据。'
- en: '**Service invocation**: Applications expose their operations as services (web
    services in recent days) to let other applications call them. One can transfer/receive
    data from such services, depending on the way they are designed.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务调用**：应用程序将其操作公开为服务（近年来是Web服务）以允许其他应用程序调用它们。可以根据它们的设计方式从这些服务中传输/接收数据。'
- en: '**Messaging services**: Applications use a common messaging server; one application
    can send a message and the other receives it.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息服务**：应用程序使用一个公共消息服务器；一个应用程序可以发送消息，另一个接收它。'
- en: Spring Integration
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring集成
- en: Spring project defines Spring Integration as an extension of the Spring programming
    model for Enterprise Integration. Spring Integration is developed to support lightweight
    messaging within Spring-based applications and supports system integration with
    external systems through declarative adapters. These adapters provide an abstraction
    of Spring's support for remoting, messaging, and scheduling.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Spring项目将Spring集成定义为Spring编程模型的企业集成扩展。Spring集成是为了在基于Spring的应用程序中支持轻量级消息而开发的，并通过声明式适配器支持与外部系统的系统集成。这些适配器提供了Spring对远程、消息和调度的支持抽象。
- en: '![Spring Integration](img/3372OS_06_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![Spring集成](img/3372OS_06_02.jpg)'
- en: 'While Spring Batch operates on a file- or database-based integration system,
    Spring Integration provides the application''s message-based integration. Adding
    this messaging feature to the Spring Batch application automates its operations
    and also separates the key operational concerns. Let''s understand how we can
    make Spring Integration configuration be a part of the integrated enterprise application.
    The following are some of the key operations that can be performed with message
    integration:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当Spring Batch在基于文件或数据库的集成系统上操作时，Spring Integration提供了基于消息的应用程序集成。将此消息功能添加到Spring
    Batch应用程序中可以自动化其操作，并分离关键操作关注点。让我们了解如何使Spring Integration配置成为集成企业应用程序的一部分。以下是一些可以通过消息集成执行的关键操作：
- en: Triggering a batch job to execute
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发批处理作业执行
- en: Triggering a message with the job completion/fail status
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发带有作业完成/失败状态的消息
- en: Asynchronous processor's operation
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步处理器的操作
- en: Externalization
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部化
- en: 'The following is the Spring XML application context file with Spring Batch
    integration enabled:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在Spring XML应用程序上下文中启用Spring Batch集成的文件：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Triggering a batch job to execute
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 触发批处理作业执行
- en: So far we have been triggering jobs through command line, programmatically from
    applications. However, certain applications have to transfer data using remote
    file transfer (FTP/SFTP) and launch jobs to import data into the application.
    Spring Integration provides different adapters to easily make launch configurations.
    `JobLaunchingMessageHandler` of Spring Integration is an easy-to-implement, event-driven
    execution on `JobLauncher`. Spring Integration provides `JobLaunchRequest` as
    the input for the `JobLaunchingMessageHandler`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直通过命令行、从应用程序中以编程方式触发作业。然而，某些应用程序必须使用远程文件传输（FTP/SFTP）传输数据，并启动将数据导入应用程序的作业。Spring
    Integration提供了不同的适配器，以便轻松进行启动配置。Spring Integration的`JobLaunchingMessageHandler`是一个易于实现的、基于事件的`JobLauncher`执行。Spring
    Integration提供`JobLaunchRequest`作为`JobLaunchingMessageHandler`的输入。
- en: '![Triggering a batch job to execute](img/3372OS_06_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![触发批处理作业执行](img/3372OS_06_03.jpg)'
- en: 'The following is the listing for `JobLaunchRequest` transformation from a file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将`JobLaunchRequest`从文件转换的列表：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The job execution status is returned with the instance of `JobExecution`. The
    `JobExecution` ID helps the user track the status of the job execution through
    `JobRepository`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 作业执行状态通过`JobExecution`实例返回。`JobExecution` ID帮助用户通过`JobRepository`跟踪作业执行状态。
- en: The following configuration is for taking the file input (CSV file) through
    an adapter, transforming it to `JobRequest` through the transformer `FileMessageToJobRequest`,
    launching the job through `JobLaunchingGateway`, and logging the output of `JobExecution`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置是通过适配器获取文件输入（CSV文件），通过转换器`FileMessageToJobRequest`将其转换为`JobRequest`，通过`JobLaunchingGateway`启动作业，并记录`JobExecution`的输出。
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The item reader can be configured to pick the input filename as job parameter
    from the following configuration:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 项目读取器可以被配置为从以下配置中选取输入文件名作为作业参数：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Spring Integration has message access from the Spring application context.
    Hence, the batch job can as well be triggered with the request accessed from the
    application context, as shown in the following code:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Integration从Spring应用程序上下文中获取消息访问。因此，批处理作业也可以通过从应用程序上下文中访问的请求来触发，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, `EmployeeJobLaunchRequest` is the user-defined `JobLaunchRequest`
    that is wrapped with the Spring Integration Message. The Spring Integration class
    to generate a message is `MessageBuilder`. With this request, we can pass the
    input request details, such as file repository, and launch the job. Spring Integration
    can be learned in detail from *Spring Integration Essentials*, *Chandan Pandey*,
    *Packt Publishing*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`EmployeeJobLaunchRequest`是用户定义的`JobLaunchRequest`，它被Spring Integration消息包装。生成消息的Spring
    Integration类是`MessageBuilder`。使用此请求，我们可以传递输入请求详情，例如文件存储库，并启动作业。Spring Integration的详细信息可以在*Spring
    Integration Essentials*，*Chandan Pandey*，*Packt Publishing*中学习。
- en: RESTful job processing
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful作业处理
- en: A web service is a method of communication between two electronic devices over
    a network. It is a software function provided at a network address over the Web,
    with the service always on as in the concept of utility computing.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 网络服务是在网络上两个电子设备之间通信的方法。它是在Web上通过网络地址提供的软件功能，服务始终处于开启状态，就像在计算效用概念中一样。
- en: REST is an architectural style consisting of a coordinated set of architectural
    constraints, applied to components, connectors, and data elements, within a distributed
    hypermedia system. The REST architectural style is also applied to the development
    of web services. With REST-compliant web services, the primary purpose of the
    service is to manipulate XML representations of web resources using a uniform
    set of stateless operations.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: REST是一种架构风格，它由一组协调的架构约束组成，应用于分布式超媒体系统中的组件、连接器和数据元素。REST架构风格也应用于Web服务的开发。与REST兼容的Web服务的主要目的是使用一组无状态操作来操作Web资源的XML表示。
- en: 'Spring Batch supports the job launching and processing using REST web services
    with the methods `Put`/`Post`. The following is a sample listing with Spring CXF
    (an open source services framework):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch支持使用REST Web服务通过`Put`/`Post`方法启动和批处理作业。以下是一个使用Spring CXF（一个开源服务框架）的示例列表：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Autowired `JobLauncher` and `Job` objects get injected into the application.
    The `startJob()` method creates `JobParameters` using `JobParametersBuilder`,
    and the job gets triggered by `jobLauncher.run()`. This invocation of batch job
    from the web service calls `JobLauncher.run()` to trigger a batch job in a synchronous
    thread. The `ExitStatus` can be accessed from the `JobExecution` object. Any exception
    during job launch can be caught with proper exception handling, as mentioned in
    the preceding list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 自动装配的`JobLauncher`和`Job`对象被注入到应用程序中。`startJob()`方法使用`JobParametersBuilder`创建`JobParameters`，并通过`jobLauncher.run()`触发作业。从Web服务调用批处理作业的此调用在同步线程中触发批处理作业。可以从`JobExecution`对象访问`ExitStatus`。任何在作业启动期间的异常都可以通过前面提到的适当异常处理来捕获。
- en: Summary
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this chapter, we learned about enterprise integration and different
    methods available for enterprise application integration. We also learned how
    the Spring Integration project can integrate Spring Batch applications with its
    message-driven approach. We also learned about launching the batch jobs by accessing
    the Spring Integration components from the application context. We finished this
    chapter with an understanding of the RESTful job processing technique.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们学习了企业集成以及可用于企业应用程序集成的不同方法。我们还了解了Spring Integration项目如何通过其消息驱动方法与企业批处理应用程序集成。我们还学习了如何通过访问应用程序上下文中的Spring
    Integration组件来启动批处理作业。我们以对RESTful作业处理技术的理解结束了本章。
- en: In the next chapter, we will learn about inspecting the Spring Batch jobs, including
    accessing execution data, listeners, and web monitoring.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何检查Spring Batch作业，包括访问执行数据、监听器和Web监控。
