- en: Chapter 6. Integrating Spring Batch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about controlling the flow of a batch job
    using exit code and decision logic, sharing the data between the steps in execution,
    and reusing the process by externalizing the flow and inherited job mechanisms.
    We also learned how to terminate the batch job in different states and their importance.
    An organization performs its operations with the help of a number of tools and
    maintains its data and applications across locations. It is important to integrate
    the data across these applications with a decent mechanism to synchronize the
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Enterprise Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RESTful job processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen batch jobs configured with different steps; reading data
    from different sources, performing operations, and writing data to different destinations.
    In real time, organizations use different applications to perform their operations.
    The application used to maintain the employee information and process their payroll
    might not be the same as the one that takes care of logistics and sales. In such
    scenarios, it is important to integrate these applications seamlessly to process
    the whole data together at any particular point and perform an operation on the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows how an **Enterprise Resource Planning** (**ERP**)
    system integrates different modules, accesses the information from its systems,
    and maintains it as an entity.
  prefs: []
  type: TYPE_NORMAL
- en: '![Enterprise Integration](img/3372OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the different ways to integrate enterprise applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**File-based data transfer**: Applications exchange data based on flat files;
    the source system writes data onto a flat file and exports the file to the destination
    system. The destination system reads data from a flat file and imports into its
    destination database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource sharing**: Applications share common resources, such as a filesystem
    or a database, to perform their operations. Virtually, they act as individual
    systems; however, they populate/write data onto a common system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Service invocation**: Applications expose their operations as services (web
    services in recent days) to let other applications call them. One can transfer/receive
    data from such services, depending on the way they are designed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Messaging services**: Applications use a common messaging server; one application
    can send a message and the other receives it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring project defines Spring Integration as an extension of the Spring programming
    model for Enterprise Integration. Spring Integration is developed to support lightweight
    messaging within Spring-based applications and supports system integration with
    external systems through declarative adapters. These adapters provide an abstraction
    of Spring's support for remoting, messaging, and scheduling.
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Integration](img/3372OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'While Spring Batch operates on a file- or database-based integration system,
    Spring Integration provides the application''s message-based integration. Adding
    this messaging feature to the Spring Batch application automates its operations
    and also separates the key operational concerns. Let''s understand how we can
    make Spring Integration configuration be a part of the integrated enterprise application.
    The following are some of the key operations that can be performed with message
    integration:'
  prefs: []
  type: TYPE_NORMAL
- en: Triggering a batch job to execute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Triggering a message with the job completion/fail status
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Asynchronous processor's operation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Externalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the Spring XML application context file with Spring Batch
    integration enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Triggering a batch job to execute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far we have been triggering jobs through command line, programmatically from
    applications. However, certain applications have to transfer data using remote
    file transfer (FTP/SFTP) and launch jobs to import data into the application.
    Spring Integration provides different adapters to easily make launch configurations.
    `JobLaunchingMessageHandler` of Spring Integration is an easy-to-implement, event-driven
    execution on `JobLauncher`. Spring Integration provides `JobLaunchRequest` as
    the input for the `JobLaunchingMessageHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Triggering a batch job to execute](img/3372OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the listing for `JobLaunchRequest` transformation from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The job execution status is returned with the instance of `JobExecution`. The
    `JobExecution` ID helps the user track the status of the job execution through
    `JobRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: The following configuration is for taking the file input (CSV file) through
    an adapter, transforming it to `JobRequest` through the transformer `FileMessageToJobRequest`,
    launching the job through `JobLaunchingGateway`, and logging the output of `JobExecution`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The item reader can be configured to pick the input filename as job parameter
    from the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Spring Integration has message access from the Spring application context.
    Hence, the batch job can as well be triggered with the request accessed from the
    application context, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `EmployeeJobLaunchRequest` is the user-defined `JobLaunchRequest`
    that is wrapped with the Spring Integration Message. The Spring Integration class
    to generate a message is `MessageBuilder`. With this request, we can pass the
    input request details, such as file repository, and launch the job. Spring Integration
    can be learned in detail from *Spring Integration Essentials*, *Chandan Pandey*,
    *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: RESTful job processing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web service is a method of communication between two electronic devices over
    a network. It is a software function provided at a network address over the Web,
    with the service always on as in the concept of utility computing.
  prefs: []
  type: TYPE_NORMAL
- en: REST is an architectural style consisting of a coordinated set of architectural
    constraints, applied to components, connectors, and data elements, within a distributed
    hypermedia system. The REST architectural style is also applied to the development
    of web services. With REST-compliant web services, the primary purpose of the
    service is to manipulate XML representations of web resources using a uniform
    set of stateless operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Batch supports the job launching and processing using REST web services
    with the methods `Put`/`Post`. The following is a sample listing with Spring CXF
    (an open source services framework):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Autowired `JobLauncher` and `Job` objects get injected into the application.
    The `startJob()` method creates `JobParameters` using `JobParametersBuilder`,
    and the job gets triggered by `jobLauncher.run()`. This invocation of batch job
    from the web service calls `JobLauncher.run()` to trigger a batch job in a synchronous
    thread. The `ExitStatus` can be accessed from the `JobExecution` object. Any exception
    during job launch can be caught with proper exception handling, as mentioned in
    the preceding list.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this chapter, we learned about enterprise integration and different
    methods available for enterprise application integration. We also learned how
    the Spring Integration project can integrate Spring Batch applications with its
    message-driven approach. We also learned about launching the batch jobs by accessing
    the Spring Integration components from the application context. We finished this
    chapter with an understanding of the RESTful job processing technique.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about inspecting the Spring Batch jobs, including
    accessing execution data, listeners, and web monitoring.
  prefs: []
  type: TYPE_NORMAL
