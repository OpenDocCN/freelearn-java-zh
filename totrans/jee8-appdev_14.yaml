- en: Configuring and Deploying to GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing, GlassFish 5 was the only released Java EE 8 compliant
    application server, as such, all the example code was tested against GlassFish,
    however, they should work on any Java EE 8 compliant application server.
  prefs: []
  type: TYPE_NORMAL
- en: Readers wanting to use GlassFish to run the example code can follow the instructions
    in this appendix to set it up.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GlassFish can be downloaded from [https://javaee.github.io/glassfish/download](https://javaee.github.io/glassfish/download)[.](https://glassfish.dev.java.net/)
  prefs: []
  type: TYPE_NORMAL
- en: '[![](img/7fa74480-eb9a-45da-a1cb-01989bc02efe.png)](https://glassfish.dev.java.net/)'
  prefs: []
  type: TYPE_NORMAL
- en: The Java EE specification has the concept of profiles, the Web Profile implements
    a subset of the full Java EE specification and is missing some features, such
    as JMS and some EJB features. To be able to successfully deploy all examples in
    the book, we should download the version of GlassFish implementing the full Java
    EE 8 specification by clicking the link labeled GlassFish 5.0 - Full Platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installing GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GlassFish 5.0 is distributed as a zip file; installing GlassFish is as simple
    as extracting the zip file to a directory of our choosing.
  prefs: []
  type: TYPE_NORMAL
- en: GlassFish assumes some dependencies are present in your system.
  prefs: []
  type: TYPE_NORMAL
- en: GlassFish dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to install GlassFish 5, a recent Java SE version must be installed
    on your workstation (Java SE 8 required), and the Java executable must be in your
    system PATH. Java SE 8 can be downloaded at [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
  prefs: []
  type: TYPE_NORMAL
- en: Performing the installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the JDK has been installed, the GlassFish installation can begin by simply
    extracting the downloaded compressed file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b628d16d-a2ca-4a9d-b1ed-8599153a3725.png)'
  prefs: []
  type: TYPE_IMG
- en: All modern operating systems, including Linux, Windows, and macOS, include out-of-the-box
    support for extracting compressed ZIP files, consult your operating system documentation
    for details.
  prefs: []
  type: TYPE_NORMAL
- en: After extracting the zip file, a new directory named glassfish5 will be created,
    this new directory contains our GlassFish installation.
  prefs: []
  type: TYPE_NORMAL
- en: Starting GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start GlassFish from the command line, change the directory to `[glassfish
    installation directory]/glassfish5/bin`, and execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command, and most commands shown in this chapter assume a Unix
    or Unix-like operating system, such as Linux or macOS. For Windows systems, the
    initial `./` is not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'A few short seconds after executing the preceding command, we should see a
    message similar to the following at the bottom of the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then open a browser window and type the following URL in the browser''s
    location text field: `http://localhost:8080`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If everything went well, we should see a page indicating that your GlassFish
    server is now running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/beb06925-bef7-468b-b5c2-ae2870bb7e44.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying our first Java EE application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further test that our GlassFish installation is running properly, we will
    deploy a WAR (Web ARchive) file and make sure it deploys and executes properly.
    Before moving on, please download the `simpleapp.war` file from this book's code
    bundle.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application through the web console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy `simpleapp.war`, open a browser and navigate to the following URL:
    `http://localhost:4848`. You should be greeted with the default GlassFish Server
    administration page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05ae681e-0b3b-4786-85fd-c6c25238a09b.png)'
  prefs: []
  type: TYPE_IMG
- en: By default, GlassFish is installed in development mode, in this mode, it is
    not necessary to enter a username and password to access the GlassFish web console.
    In production environments, it is highly advisable to configure the web console
    so that it is password protected.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we should click the Deploy an Application item under the Deployment
    section in the main screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy our application, we should select the Local Packaged File or Directory
    That Is Accessible from GlassFish Server radio button, and either type the path
    to our WAR file or select it by clicking the Browse Files... button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dea4e6ab-3ecc-4407-acef-ce8d5ae1f4e3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After we have selected our WAR file, a number of input fields allowing us to
    specify several options are shown. For our purposes, all defaults are fine, we
    can simply click the OK button at the top right of the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ac3a873-a1ad-4c22-9d11-7bbcec171326.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we deploy our application, the GlassFish web console displays the Applications
    window, with our application listed as one of the deployed applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6bb2420-560d-414d-92bf-ba9185319940.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To execute the `simpleapp` application, type the following URL in the browser
    ''s location text field: `http://localhost:8080/simpleapp-1.0/simpleServlet`.
    The resulting page should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30ee7363-b8cc-437a-b01b-06b8d2f721e4.png)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have successfully deployed our first Java EE application.
  prefs: []
  type: TYPE_NORMAL
- en: Undeploying an application through the GlassFish Admin Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To undeploy the application we just deployed, log in to the GlassFish Admin
    Console by typing the following URL in the browser: `http://localhost:4848`.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, either click the Applications menu item in the navigation pane on the
    left or click the List Deployed Applications item on the administration console's
    home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Either way, should take us to the application management page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cc6b8e8-103c-4fd9-b926-ad51ed26cbdc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The application can be undeployed simply by selecting it from the list of deployed
    applications and clicking the Undeploy button above the list of deployed applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69674e79-0231-4d59-afc4-265f7df74255.png)'
  prefs: []
  type: TYPE_IMG
- en: Deploying an application through the command line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways in which an application can be deployed through the command
    line: it can be done by copying the artifact we want to deploy to an `autodeploy`
    directory or by using GlassFish''s `asadmin` command-line utility.'
  prefs: []
  type: TYPE_NORMAL
- en: The Autodeploy directory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have undeployed the `simpleapp.war` file, we are ready to deploy
    it using the command line. To deploy the application in this manner, simply copy
    `simpleapp.war` to `[glassfish installation directory]/glassfish4/glassfish/domains/domain1/autodeploy`.
    The application will automatically be deployed just by copying it to this directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can verify that the application has successfully been deployed by looking
    at the server log. The server log can be found at `[glassfish installation directory]/glassfish4/glassfish/domains/domain1/logs/server.log`.
    The last few lines of this file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can, of course, also verify the deployment by navigating to the URL for the
    application, which will be the same one we used when deploying through the web
    console, `http://localhost:8080/simpleapp/simpleservlet`, the application should
    execute properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'An application deployed this way can be undeployed by simply deleting the artifact
    (the WAR file, in our case) from the `autodeploy` directory. After deleting the
    file, we should see a message similar to the following in the server log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The asadmin command-line utility
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An alternate way of deploying an application through the command line is to
    use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command must be run from the `[glassfish installation directory]/glassfish4/bin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We should see confirmation on the command-line terminal letting us know that
    the file was deployed successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The server log file should show a message similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `asadmin` executable can be used to undeploy an application as well by
    issuing a command like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following message should be shown at the bottom of the terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Please note that the file extension is not used to undeploy the application,
    the argument to `asadmin` undeploy should be the application name, which defaults
    to the WAR file name (minus the extension).
  prefs: []
  type: TYPE_NORMAL
- en: GlassFish domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alert readers might have noticed that the `autodeploy` directory is under a
    `domains/domain1` subdirectory. GlassFish has a concept of **domains**. Domains
    allow a collection of related applications to be deployed together. Several domains
    can be started concurrently. GlassFish domains behave like individual GlassFish
    instances, a default domain called `domain1` is created when installing GlassFish.
  prefs: []
  type: TYPE_NORMAL
- en: Creating domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Additional domains can be created from the command line by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command takes several parameters to specify ports where the domain
    will listen for several services (HTTP, Admin, JMS, IIOP, secure HTTP, and so
    on); type the following command in the command line to see its parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If we want several domains to execute concurrently on the same server, these
    ports must be chosen carefully since specifying the same ports for different services
    (or even the same service across domains) will prevent one of the domains from
    working properly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The default ports for the default `domain1` domain are listed in the following
    table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Port** |'
  prefs: []
  type: TYPE_TB
- en: '| Admin | 4848 |'
  prefs: []
  type: TYPE_TB
- en: '| HTTP | 8080 |'
  prefs: []
  type: TYPE_TB
- en: '| Java Messaging System (JMS) | 7676 |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Inter-ORB Protocol (IIOP) | 3700 |'
  prefs: []
  type: TYPE_TB
- en: '| Secure HTTP (HTTPS) | 8181 |'
  prefs: []
  type: TYPE_TB
- en: '| Secure IIOP | 3820 |'
  prefs: []
  type: TYPE_TB
- en: '| Mutual Authorization IIOP | 3920 |'
  prefs: []
  type: TYPE_TB
- en: '| Java Management Extensions (JMX) Administration | 8686 |'
  prefs: []
  type: TYPE_TB
- en: Please note that when creating a domain, the only port that needs to be specified
    is the admin port, if other ports are not specified, the default ports listed
    in the table will be used. Care must be taken when creating a domain, since, as
    explained above, two domains cannot run concurrently in the same server if any
    of their services listen for connections on the same port.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternate method of creating a domain without having to specify ports for
    every service is to issue the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The value of the `--portbase` parameter dictates the base port for the domain;
    ports for the different services will be offsets of the given port number. The
    following table lists the ports assigned to all the different services:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Port** |'
  prefs: []
  type: TYPE_TB
- en: '| Admin | portbase + 48 |'
  prefs: []
  type: TYPE_TB
- en: '| HTTP | portbase + 80 |'
  prefs: []
  type: TYPE_TB
- en: '| Java Messaging System (JMS) | portbase + 76 |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Inter-ORB Protocol (IIOP) | portbase + 37 |'
  prefs: []
  type: TYPE_TB
- en: '| Secure HTTP (HTTPS) | portbase + 81 |'
  prefs: []
  type: TYPE_TB
- en: '| Secure IIOP | portbase + 38 |'
  prefs: []
  type: TYPE_TB
- en: '| Mutual Authorization IIOP | portbase + 39 |'
  prefs: []
  type: TYPE_TB
- en: '| Java Management Extensions (JMX) Administration | portbase + 86 |'
  prefs: []
  type: TYPE_TB
- en: Of course, care must be taken when choosing the value for portbase, making sure
    that none of the assigned ports collide with any other domain.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, creating domains using a portbase number greater than 8000
    and divisible by 1000 should create domains that don't conflict with each other,
    for example, it should be safe to create a domain using a portbase of 9000, another
    one using a portbase of 10000, so on and so forth.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting domains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deleting a domain is very simple, it can be accomplished by issuing the following
    command in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We should see a message like the following on the terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Please use the preceding command with care; once a domain is deleted, it cannot
    be easily recreated (all deployed applications will be gone, as well as any connection
    pools, datasources, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Stopping a domain
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A domain that is running can be stopped by issuing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This command will stop the domain named `domainname`.
  prefs: []
  type: TYPE_NORMAL
- en: If only one domain is running, the `domainname` argument is optional.
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes the reader is working with the default domain called `domain1`
    and the default ports. If this is not the case, the instructions given need to
    be modified to match the appropriate domain and port.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up database connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any non-trivial Java EE application will connect to a Relational Database Management
    Server (RDBMS). Supported RDBMS systems include JavaDB, Oracle, Derby, Sybase,
    DB2, Pointbase, MySQL, PostgreSQL, Informix, Cloudscape, and SQL Server. In this
    section, we will demonstrate how to set up GlassFish to communicate with a MySQL
    database, the procedure is similar for other RDBMS systems.
  prefs: []
  type: TYPE_NORMAL
- en: GlassFish comes bundled with an RDBMS called JavaDB. This RDBMS is based on
    Apache Derby. To limit the downloads and configuration needed to follow this book's
    code, most examples needing an RDBMS use the bundled JavaDB RDBMS. The instructions
    in this section are for illustrating how to connect GlassFish to a third party
    RDBMS.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up connection pools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Opening and closing database connections is a relatively slow operation. For
    performance reasons, GlassFish and other Java EE application servers keep a pool
    of open database connections. When a deployed application requires a database
    connection, one is provided from the pool, when the application no longer needs
    the database connection, said connection is returned to the pool.
  prefs: []
  type: TYPE_NORMAL
- en: The first step to follow when setting up a connection pool is to copy the JAR
    file containing the JDBC driver for our RDBMS in the `lib` directory of the domain
    (consult your RDBMS documentation for information on where to obtain this JAR
    file). If the GlassFish domain where we want to add the connection pool is running
    when copying the JDBC driver, it must be restarted for the change to take effect.
    The domain can be restarted by executing `asadmin restart-domain`.
  prefs: []
  type: TYPE_NORMAL
- en: Once the JDBC driver has been copied to the appropriate location and the application
    server has been restarted, log in to the admin console by pointing the browser
    to `http://localhost:4848` .
  prefs: []
  type: TYPE_NORMAL
- en: 'Then click Resources|JDBC|JDBC Connection Pools, the browser should now look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0803e2a0-e32d-44d5-a3bd-1460f84af583.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the New... button; after entering the appropriate values for our RDBMS,
    the main area of the page should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5db315c0-d3f9-48d6-8141-677eabae7213.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the Next button, we should see a page like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e1b6ae96-fd60-4c92-a897-00c88bfee4f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Most of the default values on the top portion of this page are sensible. Scroll
    all the way down and enter the appropriate property values for our RDBMS (at a
    minimum, username, password, and URL), then click the Finish button at the top
    right of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Property names vary depending on the RDBMS we are using, but usually, there
    is a URL property where we should enter the JDBC URL for our database, plus username
    and password properties where we should enter authentication credentials for our
    database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our newly-created connection pool should now be visible in the list of connection
    pools:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1793281-a688-4e71-9327-b2aa07594c06.png)'
  prefs: []
  type: TYPE_IMG
- en: In some cases, the GlassFish domain may need to be restarted after setting up
    a new connection pool.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can verify that our connection pool was successfully set up by clicking
    its Pool Name, then clicking the Ping button on the resulting page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac013cf0-b60c-4abb-b33d-17ec205dd728.png)'
  prefs: []
  type: TYPE_IMG
- en: Our connection pool is now ready to be used by our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up data sources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java EE applications don't access connection pools directly, instead, they access
    a data source that points to a connection pool. To set up a new data source, click
    the JDBC Resources menu item on the left-hand side of the web console, then click
    the New... button.
  prefs: []
  type: TYPE_NORMAL
- en: 'After filling out the appropriate information for our new data source, the
    main area of the web console should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c1aa1ae4-f510-441f-9c13-4d1056883aa4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking the OK button, we can see our newly created data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/95fd10b8-6d0b-472a-a9b5-2e6aa84c51c4.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting JMS resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can start writing code to take advantage of the JMS API, we need to
    configure some GlassFish resources. Specifically, we need to set up a **JMS Connection
    Factory**, a **message queue**, and a **message topic**.
  prefs: []
  type: TYPE_NORMAL
- en: Java EE 7 and Java EE 8 require all compliant application servers to provide
    a default JMS connection factory. GlassFish, being a fully compliant Java EE 8
    application server (and the Java EE 8 reference implementation), complies with
    this requirement, so, strictly speaking, we don't really need to set up a connection
    factory. In many cases we may need to set one up, therefore in the following section,
    we illustrate how it can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a JMS connection factory
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The easiest way to set up a JMS connection factory is via GlassFish''s web
    console. As previously mentioned from, [Chapter 1](fe161634-abd6-4ffc-9b5a-1e1b82cb0fe1.xhtml),
    *Introduction to Java EE*, that the web console can be accessed by starting our
    domain by entering the following command on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can then point the browser to `http://localhost:4848` and log in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b33c9d3f-7df1-40f5-95a4-1cfcd04eb594.png)'
  prefs: []
  type: TYPE_IMG
- en: 'A connection factory can be added by expanding the Resources node in the tree
    at the left-hand side of the web console, expanding the JMS Resources node and
    clicking the Connection Factories node, then clicking the New... button in the
    main area of the web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/842e41f4-5ab2-4e97-b4fd-296d5c724dd0.png)'
  prefs: []
  type: TYPE_IMG
- en: For our purposes, we can take most of the defaults; the only thing we need to
    do is enter a Pool Name and pick a resource type for our connection factory.
  prefs: []
  type: TYPE_NORMAL
- en: It is always a good idea to use a pool name starting with `jms/` when picking
    a name for JMS resources. This way, JMS resources can be easily identified when
    browsing a JNDI tree.
  prefs: []
  type: TYPE_NORMAL
- en: In the text field labeled JNDI Name, enter `jms/GlassFishBookConnectionFactory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Resource Type drop-down has three options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`javax.jms.TopicConnectionFactory`: Used to create a connection factory that
    creates JMS topics for JMS clients using the pub/sub messaging domain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`javax.jms.QueueConnectionFactory`: Used to create a connection factory that
    creates JMS queues for JMS clients using the PTP messaging domain'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`javax.jms.ConnectionFactory`: Used to create a connection factory that creates
    either JMS topics or JMS queues'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For our example, we will select `javax.jms.ConnectionFactory`; this way we can
    use the same connection factory for all of our examples, those using the PTP messaging
    domain, and those using the pub/sub messaging domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'After entering the Pool Name for our connection factory, selecting a connection
    factory type and, optionally, entering a description for our connection factory,
    we must click the OK button for the changes to take effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f8e9df00-6f3d-49ef-8cab-ed6469c9b550.png)'
  prefs: []
  type: TYPE_IMG
- en: We should then see our newly-created connection factory listed in the main area
    of the GlassFish web console.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a JMS message queue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A JMS message queue can be added by expanding the Resources node in the tree
    at the left-hand side of the web console, expanding the JMS Resources node and
    clicking the Destination Resources node, then clicking the New... button in the
    main area of the web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/34c1a572-761b-4df6-9068-68805973053d.png)'
  prefs: []
  type: TYPE_IMG
- en: In our example, the JNDI name of the message queue is `jms/GlassFishBookQueue`.
    The resource type for message queues must be `javax.jms.Queue`. Additionally,
    a Physical Destination Name must be entered. In the preceding example, we use
    `GlassFishBookQueue` as the value for this field.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the New... button, entering the appropriate information for
    our message queue, and clicking OK, we should see the newly created queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0559c254-e894-42a6-b6ab-e490a9712660.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting up a JMS message topic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a JMS message topic in GlassFish is very similar to setting up a
    message queue.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the GlassFish web console, expand the Resources node in the tree at the
    left-hand side, then expand the JMS Resouces node, click the Destination node,
    then click the New... button in the main area of the web console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53c80bf0-f458-4b60-8818-d0c8925557fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Our examples will use a JNDI Name of `jms/GlassFishBookTopic`. Since this is
    a message topic, the Resource Type must be `javax.jms.Topic`. The Description
    field is optional. The Physical Destination Name property is required; for our
    example, we will use `GlassFishBookTopic` as the value for the Name property.
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the OK button, we can see our newly created message topic:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ef4f7d0-623b-4fdc-8e74-62ff6fd1f689.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have set up a connection factory, a message queue, and a message
    topic, we are ready to start writing code using the JMS API.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring durable subscribers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like we mentioned before, the easiest way to add a connection factory is through
    the GlassFish web console. Recall that, to add a JMS connection factory through
    the GlassFish web console, we need to expand the Resources node on the left-hand
    side, then expand the JMS Resources node, click the Connection Factories node,
    then click the New... button in the main area of the page. Our next example will
    use the settings displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2fb6ce47-b5f4-48a2-afc5-436e6af7422d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Before clicking the OK button, we need to scroll to the bottom of the page,
    click the Add Property button, and enter a new property named `ClientId`. Our
    example will use `ExampleId` as the value for this property:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d1f08e8b-23ed-4028-b6e8-720b2be7dd98.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this appendix, we discussed how to download and install GlassFish. We also
    discussed several methods of deploying the Java EE application through the GlassFish
    web console, through the `asadmin` command and by copying the file to the `autodeploy`
    directory. We also discussed basic GlassFish administration tasks, such as setting
    up domains and setting up database connectivity by adding connection pools and
    data sources.
  prefs: []
  type: TYPE_NORMAL
