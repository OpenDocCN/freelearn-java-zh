- en: Configuring and Deploying to GlassFish
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和部署到 GlassFish
- en: At the time of writing, GlassFish 5 was the only released Java EE 8 compliant
    application server, as such, all the example code was tested against GlassFish,
    however, they should work on any Java EE 8 compliant application server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，GlassFish 5 是唯一发布的符合 Java EE 8 规范的应用服务器，因此，所有示例代码都是针对 GlassFish 进行测试的，然而，它们应该可以在任何符合
    Java EE 8 规范的应用服务器上运行。
- en: Readers wanting to use GlassFish to run the example code can follow the instructions
    in this appendix to set it up.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 想要使用 GlassFish 运行示例代码的读者可以遵循本附录中的说明来设置它。
- en: Obtaining GlassFish
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取 GlassFish
- en: GlassFish can be downloaded from [https://javaee.github.io/glassfish/download](https://javaee.github.io/glassfish/download)[.](https://glassfish.dev.java.net/)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从 [https://javaee.github.io/glassfish/download](https://javaee.github.io/glassfish/download)[.](https://glassfish.dev.java.net/)
    下载 GlassFish。
- en: '[![](img/7fa74480-eb9a-45da-a1cb-01989bc02efe.png)](https://glassfish.dev.java.net/)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[![](img/7fa74480-eb9a-45da-a1cb-01989bc02efe.png)](https://glassfish.dev.java.net/)'
- en: The Java EE specification has the concept of profiles, the Web Profile implements
    a subset of the full Java EE specification and is missing some features, such
    as JMS and some EJB features. To be able to successfully deploy all examples in
    the book, we should download the version of GlassFish implementing the full Java
    EE 8 specification by clicking the link labeled GlassFish 5.0 - Full Platform.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 规范有配置文件的概念，Web Profile 实现了 Java EE 规范的子集，并缺少一些功能，例如 JMS 和一些 EJB 功能。为了能够成功部署本书中的所有示例，我们应该通过点击标有“GlassFish
    5.0 - Full Platform”的链接来下载实现完整 Java EE 8 规范的 GlassFish 版本。
- en: Installing GlassFish
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 GlassFish
- en: GlassFish 5.0 is distributed as a zip file; installing GlassFish is as simple
    as extracting the zip file to a directory of our choosing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish 5.0 以 zip 文件的形式分发；安装 GlassFish 与将 zip 文件解压缩到我们选择的目录一样简单。
- en: GlassFish assumes some dependencies are present in your system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish 假设系统中存在一些依赖项。
- en: GlassFish dependencies
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GlassFish 依赖项
- en: In order to install GlassFish 5, a recent Java SE version must be installed
    on your workstation (Java SE 8 required), and the Java executable must be in your
    system PATH. Java SE 8 can be downloaded at [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装 GlassFish 5，必须在您的工作站上安装一个较新的 Java SE 版本（需要 Java SE 8），并且 Java 可执行文件必须在您的系统
    PATH 中。Java SE 8 可在 [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)
    下载。
- en: Performing the installation
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行安装
- en: 'Once the JDK has been installed, the GlassFish installation can begin by simply
    extracting the downloaded compressed file:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 JDK 已经安装，可以通过简单地解压缩下载的压缩文件来开始 GlassFish 的安装：
- en: '![](img/b628d16d-a2ca-4a9d-b1ed-8599153a3725.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b628d16d-a2ca-4a9d-b1ed-8599153a3725.png)'
- en: All modern operating systems, including Linux, Windows, and macOS, include out-of-the-box
    support for extracting compressed ZIP files, consult your operating system documentation
    for details.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代操作系统，包括 Linux、Windows 和 macOS，都自带支持提取压缩 ZIP 文件的功能，有关详细信息，请参阅您的操作系统文档。
- en: After extracting the zip file, a new directory named glassfish5 will be created,
    this new directory contains our GlassFish installation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解压缩 zip 文件后，将创建一个名为 glassfish5 的新目录，这个新目录包含我们的 GlassFish 安装。
- en: Starting GlassFish
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动 GlassFish
- en: 'To start GlassFish from the command line, change the directory to `[glassfish
    installation directory]/glassfish5/bin`, and execute the following command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行启动 GlassFish，请将目录更改为 `[glassfish 安装目录]/glassfish5/bin`，并执行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding command, and most commands shown in this chapter assume a Unix
    or Unix-like operating system, such as Linux or macOS. For Windows systems, the
    initial `./` is not necessary.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 上一条命令以及本章中显示的大多数命令都假设使用的是 Unix 或类 Unix 操作系统，如 Linux 或 macOS。对于 Windows 系统，初始的
    `./` 是不必要的。
- en: 'A few short seconds after executing the preceding command, we should see a
    message similar to the following at the bottom of the terminal:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行前面的命令后不久，我们应该在终端底部看到类似以下的消息：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can then open a browser window and type the following URL in the browser''s
    location text field: `http://localhost:8080`.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以打开一个浏览器窗口，并在浏览器地址栏中输入以下 URL：`http://localhost:8080`。
- en: 'If everything went well, we should see a page indicating that your GlassFish
    server is now running:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到一个页面，表明您的 GlassFish 服务器现在正在运行：
- en: '![](img/beb06925-bef7-468b-b5c2-ae2870bb7e44.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/beb06925-bef7-468b-b5c2-ae2870bb7e44.png)'
- en: Deploying our first Java EE application
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To further test that our GlassFish installation is running properly, we will
    deploy a WAR (Web ARchive) file and make sure it deploys and executes properly.
    Before moving on, please download the `simpleapp.war` file from this book's code
    bundle.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application through the web console
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To deploy `simpleapp.war`, open a browser and navigate to the following URL:
    `http://localhost:4848`. You should be greeted with the default GlassFish Server
    administration page:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05ae681e-0b3b-4786-85fd-c6c25238a09b.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
- en: By default, GlassFish is installed in development mode, in this mode, it is
    not necessary to enter a username and password to access the GlassFish web console.
    In production environments, it is highly advisable to configure the web console
    so that it is password protected.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we should click the Deploy an Application item under the Deployment
    section in the main screen.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy our application, we should select the Local Packaged File or Directory
    That Is Accessible from GlassFish Server radio button, and either type the path
    to our WAR file or select it by clicking the Browse Files... button:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dea4e6ab-3ecc-4407-acef-ce8d5ae1f4e3.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
- en: 'After we have selected our WAR file, a number of input fields allowing us to
    specify several options are shown. For our purposes, all defaults are fine, we
    can simply click the OK button at the top right of the page:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8ac3a873-a1ad-4c22-9d11-7bbcec171326.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
- en: 'Once we deploy our application, the GlassFish web console displays the Applications
    window, with our application listed as one of the deployed applications:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e6bb2420-560d-414d-92bf-ba9185319940.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: 'To execute the `simpleapp` application, type the following URL in the browser
    ''s location text field: `http://localhost:8080/simpleapp-1.0/simpleServlet`.
    The resulting page should look like this:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/30ee7363-b8cc-437a-b01b-06b8d2f721e4.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
- en: That's it! We have successfully deployed our first Java EE application.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Undeploying an application through the GlassFish Admin Console
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To undeploy the application we just deployed, log in to the GlassFish Admin
    Console by typing the following URL in the browser: `http://localhost:4848`.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Then, either click the Applications menu item in the navigation pane on the
    left or click the List Deployed Applications item on the administration console's
    home page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'Either way, should take us to the application management page:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6cc6b8e8-103c-4fd9-b926-ad51ed26cbdc.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
- en: 'The application can be undeployed simply by selecting it from the list of deployed
    applications and clicking the Undeploy button above the list of deployed applications:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69674e79-0231-4d59-afc4-265f7df74255.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: Deploying an application through the command line
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two ways in which an application can be deployed through the command
    line: it can be done by copying the artifact we want to deploy to an `autodeploy`
    directory or by using GlassFish''s `asadmin` command-line utility.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以通过命令行部署应用程序：一种是将我们想要部署的工件复制到 `autodeploy` 目录，另一种是使用 GlassFish 的 `asadmin`
    命令行工具。
- en: The Autodeploy directory
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动部署目录
- en: Now that we have undeployed the `simpleapp.war` file, we are ready to deploy
    it using the command line. To deploy the application in this manner, simply copy
    `simpleapp.war` to `[glassfish installation directory]/glassfish4/glassfish/domains/domain1/autodeploy`.
    The application will automatically be deployed just by copying it to this directory.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经卸载了 `simpleapp.war` 文件，我们准备使用命令行来部署它。要以这种方式部署应用程序，只需将 `simpleapp.war`
    复制到 `[glassfish 安装目录]/glassfish4/glassfish/domains/domain1/autodeploy`。只需将应用程序复制到这个目录，它就会自动部署。
- en: 'We can verify that the application has successfully been deployed by looking
    at the server log. The server log can be found at `[glassfish installation directory]/glassfish4/glassfish/domains/domain1/logs/server.log`.
    The last few lines of this file should look something like this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看服务器日志来验证应用程序是否已成功部署。服务器日志位于 `[glassfish 安装目录]/glassfish4/glassfish/domains/domain1/logs/server.log`。该文件的最后几行应该看起来像这样：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can, of course, also verify the deployment by navigating to the URL for the
    application, which will be the same one we used when deploying through the web
    console, `http://localhost:8080/simpleapp/simpleservlet`, the application should
    execute properly.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然也可以通过访问应用程序的 URL 来验证部署，这个 URL 将与我们在通过 Web 控制台部署时使用的 URL 相同，即 `http://localhost:8080/simpleapp/simpleservlet`，应用程序应该能够正常运行。
- en: 'An application deployed this way can be undeployed by simply deleting the artifact
    (the WAR file, in our case) from the `autodeploy` directory. After deleting the
    file, we should see a message similar to the following in the server log:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式部署的应用程序可以通过简单地从 `autodeploy` 目录中删除工件（在我们的例子中是 WAR 文件）来卸载。删除文件后，我们应该在服务器日志中看到类似以下的消息：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The asadmin command-line utility
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: asadmin 命令行工具
- en: 'An alternate way of deploying an application through the command line is to
    use the following command:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行部署应用程序的另一种替代方法是使用以下命令：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding command must be run from the `[glassfish installation directory]/glassfish4/bin`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令必须在 `[glassfish 安装目录]/glassfish4/bin` 下运行。
- en: 'We should see confirmation on the command-line terminal letting us know that
    the file was deployed successfully:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在命令行终端上看到确认消息，告知我们文件已成功部署：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The server log file should show a message similar to the following:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器日志文件应该显示类似以下的消息：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `asadmin` executable can be used to undeploy an application as well by
    issuing a command like the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过发出如下命令来使用 `asadmin` 可执行文件卸载应用程序：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following message should be shown at the bottom of the terminal window:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 以下消息应该在终端窗口的底部显示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Please note that the file extension is not used to undeploy the application,
    the argument to `asadmin` undeploy should be the application name, which defaults
    to the WAR file name (minus the extension).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件扩展名不用于卸载应用程序，`asadmin` 卸载的参数应该是应用程序名称，默认为 WAR 文件名（减去扩展名）。
- en: GlassFish domains
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GlassFish 域
- en: Alert readers might have noticed that the `autodeploy` directory is under a
    `domains/domain1` subdirectory. GlassFish has a concept of **domains**. Domains
    allow a collection of related applications to be deployed together. Several domains
    can be started concurrently. GlassFish domains behave like individual GlassFish
    instances, a default domain called `domain1` is created when installing GlassFish.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕的读者可能会注意到 `autodeploy` 目录位于 `domains/domain1` 子目录下。GlassFish 有一个名为 **domains**
    的概念。域允许将相关应用程序一起部署。可以同时启动多个域。GlassFish 域的行为类似于单独的 GlassFish 实例，在安装 GlassFish 时会创建一个默认域
    `domain1`。
- en: Creating domains
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建域
- en: 'Additional domains can be created from the command line by issuing the following
    command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过发出以下命令从命令行创建额外的域：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command takes several parameters to specify ports where the domain
    will listen for several services (HTTP, Admin, JMS, IIOP, secure HTTP, and so
    on); type the following command in the command line to see its parameters:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令需要几个参数来指定域将监听的服务（HTTP、Admin、JMS、IIOP、安全 HTTP 等）的端口；在命令行中输入以下命令以查看其参数：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we want several domains to execute concurrently on the same server, these
    ports must be chosen carefully since specifying the same ports for different services
    (or even the same service across domains) will prevent one of the domains from
    working properly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'The default ports for the default `domain1` domain are listed in the following
    table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Port** |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
- en: '| Admin | 4848 |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
- en: '| HTTP | 8080 |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
- en: '| Java Messaging System (JMS) | 7676 |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
- en: '| Internet Inter-ORB Protocol (IIOP) | 3700 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
- en: '| Secure HTTP (HTTPS) | 8181 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| Secure IIOP | 3820 |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '| Mutual Authorization IIOP | 3920 |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
- en: '| Java Management Extensions (JMX) Administration | 8686 |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
- en: Please note that when creating a domain, the only port that needs to be specified
    is the admin port, if other ports are not specified, the default ports listed
    in the table will be used. Care must be taken when creating a domain, since, as
    explained above, two domains cannot run concurrently in the same server if any
    of their services listen for connections on the same port.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternate method of creating a domain without having to specify ports for
    every service is to issue the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The value of the `--portbase` parameter dictates the base port for the domain;
    ports for the different services will be offsets of the given port number. The
    following table lists the ports assigned to all the different services:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '| **Service** | **Port** |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
- en: '| Admin | portbase + 48 |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
- en: '| HTTP | portbase + 80 |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
- en: '| Java Messaging System (JMS) | portbase + 76 |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
- en: '| Internet Inter-ORB Protocol (IIOP) | portbase + 37 |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
- en: '| Secure HTTP (HTTPS) | portbase + 81 |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
- en: '| Secure IIOP | portbase + 38 |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| Mutual Authorization IIOP | portbase + 39 |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| Java Management Extensions (JMX) Administration | portbase + 86 |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: Of course, care must be taken when choosing the value for portbase, making sure
    that none of the assigned ports collide with any other domain.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, creating domains using a portbase number greater than 8000
    and divisible by 1000 should create domains that don't conflict with each other,
    for example, it should be safe to create a domain using a portbase of 9000, another
    one using a portbase of 10000, so on and so forth.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Deleting domains
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deleting a domain is very simple, it can be accomplished by issuing the following
    command in the command line:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We should see a message like the following on the terminal window:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Please use the preceding command with care; once a domain is deleted, it cannot
    be easily recreated (all deployed applications will be gone, as well as any connection
    pools, datasources, and so on).
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Stopping a domain
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A domain that is running can be stopped by issuing the following command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This command will stop the domain named `domainname`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: If only one domain is running, the `domainname` argument is optional.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: This book assumes the reader is working with the default domain called `domain1`
    and the default ports. If this is not the case, the instructions given need to
    be modified to match the appropriate domain and port.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设读者正在使用默认域 `domain1` 和默认端口进行工作。如果不是这种情况，给出的说明需要修改以匹配适当的域和端口。
- en: Setting up database connectivity
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库连接
- en: Any non-trivial Java EE application will connect to a Relational Database Management
    Server (RDBMS). Supported RDBMS systems include JavaDB, Oracle, Derby, Sybase,
    DB2, Pointbase, MySQL, PostgreSQL, Informix, Cloudscape, and SQL Server. In this
    section, we will demonstrate how to set up GlassFish to communicate with a MySQL
    database, the procedure is similar for other RDBMS systems.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非平凡的 Java EE 应用程序都将连接到关系型数据库管理系统（RDBMS）。支持的 RDBMS 系统包括 JavaDB、Oracle、Derby、Sybase、DB2、Pointbase、MySQL、PostgreSQL、Informix、Cloudscape
    和 SQL Server。在本节中，我们将演示如何设置 GlassFish 与 MySQL 数据库通信，对于其他 RDBMS 系统，该过程类似。
- en: GlassFish comes bundled with an RDBMS called JavaDB. This RDBMS is based on
    Apache Derby. To limit the downloads and configuration needed to follow this book's
    code, most examples needing an RDBMS use the bundled JavaDB RDBMS. The instructions
    in this section are for illustrating how to connect GlassFish to a third party
    RDBMS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish 随附一个名为 JavaDB 的 RDBMS。这个 RDBMS 基于 Apache Derby。为了限制遵循本书代码所需的下载和配置，大多数需要
    RDBMS 的示例都使用捆绑的 JavaDB RDBMS。本节中的说明是为了说明如何将 GlassFish 连接到第三方 RDBMS。
- en: Setting up connection pools
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置连接池
- en: Opening and closing database connections is a relatively slow operation. For
    performance reasons, GlassFish and other Java EE application servers keep a pool
    of open database connections. When a deployed application requires a database
    connection, one is provided from the pool, when the application no longer needs
    the database connection, said connection is returned to the pool.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 打开和关闭数据库连接是一个相对较慢的操作。出于性能考虑，GlassFish 和其他 Java EE 应用程序服务器会保持一个打开的数据库连接池。当部署的应用程序需要数据库连接时，会从池中提供一个，当应用程序不再需要数据库连接时，该连接将被返回到池中。
- en: The first step to follow when setting up a connection pool is to copy the JAR
    file containing the JDBC driver for our RDBMS in the `lib` directory of the domain
    (consult your RDBMS documentation for information on where to obtain this JAR
    file). If the GlassFish domain where we want to add the connection pool is running
    when copying the JDBC driver, it must be restarted for the change to take effect.
    The domain can be restarted by executing `asadmin restart-domain`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置连接池时，首先要做的是将包含我们 RDBMS JDBC 驱动程序的 JAR 文件复制到域的 `lib` 目录中（有关获取此 JAR 文件的信息，请参阅您的
    RDBMS 文档）。如果我们想要添加连接池的 GlassFish 域在复制 JDBC 驱动程序时正在运行，则必须重新启动该域以使更改生效。可以通过执行 `asadmin
    restart-domain` 来重新启动域。
- en: Once the JDBC driver has been copied to the appropriate location and the application
    server has been restarted, log in to the admin console by pointing the browser
    to `http://localhost:4848` .
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将 JDBC 驱动程序复制到适当的位置并且应用程序服务器已重新启动，请通过将浏览器指向 `http://localhost:4848` 来登录管理控制台。
- en: 'Then click Resources|JDBC|JDBC Connection Pools, the browser should now look
    something like this:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击资源 | JDBC | JDBC 连接池，浏览器现在应该看起来像这样：
- en: '![](img/0803e2a0-e32d-44d5-a3bd-1460f84af583.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0803e2a0-e32d-44d5-a3bd-1460f84af583.png)'
- en: 'Click the New... button; after entering the appropriate values for our RDBMS,
    the main area of the page should look something like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 点击新建...按钮；在输入我们 RDBMS 的适当值后，页面主区域应该看起来像这样：
- en: '![](img/5db315c0-d3f9-48d6-8141-677eabae7213.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5db315c0-d3f9-48d6-8141-677eabae7213.png)'
- en: 'After clicking the Next button, we should see a page like the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下一步按钮后，我们应该看到如下页面：
- en: '![](img/e1b6ae96-fd60-4c92-a897-00c88bfee4f7.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1b6ae96-fd60-4c92-a897-00c88bfee4f7.png)'
- en: Most of the default values on the top portion of this page are sensible. Scroll
    all the way down and enter the appropriate property values for our RDBMS (at a
    minimum, username, password, and URL), then click the Finish button at the top
    right of the screen.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面上方的默认值大部分都是合理的。滚动到页面底部，并输入我们 RDBMS 的适当属性值（至少包括用户名、密码和 URL），然后点击屏幕右上角的完成按钮。
- en: Property names vary depending on the RDBMS we are using, but usually, there
    is a URL property where we should enter the JDBC URL for our database, plus username
    and password properties where we should enter authentication credentials for our
    database.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 属性名称取决于我们使用的RDBMS，但通常，有一个URL属性，我们应该在其中输入我们数据库的JDBC URL，以及用户名和密码属性，我们应该在其中输入我们数据库的认证凭据。
- en: 'Our newly-created connection pool should now be visible in the list of connection
    pools:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新创建的连接池现在应该出现在连接池列表中：
- en: '![](img/d1793281-a688-4e71-9327-b2aa07594c06.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d1793281-a688-4e71-9327-b2aa07594c06.png)'
- en: In some cases, the GlassFish domain may need to be restarted after setting up
    a new connection pool.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，在设置新的连接池后，可能需要重新启动GlassFish域。
- en: 'We can verify that our connection pool was successfully set up by clicking
    its Pool Name, then clicking the Ping button on the resulting page:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击其“池名称”，然后在结果页面上点击“Ping”按钮来验证我们的连接池是否成功设置：
- en: '![](img/ac013cf0-b60c-4abb-b33d-17ec205dd728.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ac013cf0-b60c-4abb-b33d-17ec205dd728.png)'
- en: Our connection pool is now ready to be used by our applications.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的联系池现在已准备好供我们的应用程序使用。
- en: Setting up data sources
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据源
- en: Java EE applications don't access connection pools directly, instead, they access
    a data source that points to a connection pool. To set up a new data source, click
    the JDBC Resources menu item on the left-hand side of the web console, then click
    the New... button.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE应用程序不直接访问连接池，而是访问指向连接池的数据源。要设置新的数据源，请点击Web控制台左侧的“JDBC资源”菜单项，然后点击“新建...”按钮。
- en: 'After filling out the appropriate information for our new data source, the
    main area of the web console should look something like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写完我们新数据源的相关信息后，Web控制台的主要区域应该看起来像这样：
- en: '![](img/c1aa1ae4-f510-441f-9c13-4d1056883aa4.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1aa1ae4-f510-441f-9c13-4d1056883aa4.png)'
- en: 'After clicking the OK button, we can see our newly created data source:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮后，我们可以看到我们新创建的数据源：
- en: '![](img/95fd10b8-6d0b-472a-a9b5-2e6aa84c51c4.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95fd10b8-6d0b-472a-a9b5-2e6aa84c51c4.png)'
- en: Setting JMS resources
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置JMS资源
- en: Before we can start writing code to take advantage of the JMS API, we need to
    configure some GlassFish resources. Specifically, we need to set up a **JMS Connection
    Factory**, a **message queue**, and a **message topic**.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写代码以利用JMS API之前，我们需要配置一些GlassFish资源。具体来说，我们需要设置一个**JMS连接工厂**、一个**消息队列**和一个**消息主题**。
- en: Java EE 7 and Java EE 8 require all compliant application servers to provide
    a default JMS connection factory. GlassFish, being a fully compliant Java EE 8
    application server (and the Java EE 8 reference implementation), complies with
    this requirement, so, strictly speaking, we don't really need to set up a connection
    factory. In many cases we may need to set one up, therefore in the following section,
    we illustrate how it can be done.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 7和Java EE 8要求所有合规的应用服务器提供默认的JMS连接工厂。作为完全合规的Java EE 8应用服务器（以及Java EE
    8参考实现），GlassFish符合这一要求，因此，严格来说，我们实际上并不需要设置连接工厂。在许多情况下，我们可能需要设置一个，因此在下文中，我们将说明如何进行设置。
- en: Setting up a JMS connection factory
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置JMS连接工厂
- en: 'The easiest way to set up a JMS connection factory is via GlassFish''s web
    console. As previously mentioned from, [Chapter 1](fe161634-abd6-4ffc-9b5a-1e1b82cb0fe1.xhtml),
    *Introduction to Java EE*, that the web console can be accessed by starting our
    domain by entering the following command on the command line:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 设置JMS连接工厂的最简单方法是通过GlassFish的Web控制台。正如之前在[第1章](fe161634-abd6-4ffc-9b5a-1e1b82cb0fe1.xhtml)“Java
    EE简介”中提到的，我们可以通过在命令行中输入以下命令来启动我们的域，从而访问Web控制台：
- en: '[PRE15]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can then point the browser to `http://localhost:4848` and log in:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将浏览器指向`http://localhost:4848`并登录：
- en: '![](img/b33c9d3f-7df1-40f5-95a4-1cfcd04eb594.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b33c9d3f-7df1-40f5-95a4-1cfcd04eb594.png)'
- en: 'A connection factory can be added by expanding the Resources node in the tree
    at the left-hand side of the web console, expanding the JMS Resources node and
    clicking the Connection Factories node, then clicking the New... button in the
    main area of the web console:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过展开Web控制台左侧的树中的“资源”节点，展开“JMS资源”节点，然后点击“连接工厂”节点，再点击Web控制台主区域的“新建...”按钮来添加一个连接工厂。
- en: '![](img/842e41f4-5ab2-4e97-b4fd-296d5c724dd0.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/842e41f4-5ab2-4e97-b4fd-296d5c724dd0.png)'
- en: For our purposes, we can take most of the defaults; the only thing we need to
    do is enter a Pool Name and pick a resource type for our connection factory.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们可以使用大多数默认设置；我们唯一需要做的是输入一个池名称并为我们的连接工厂选择一个资源类型。
- en: It is always a good idea to use a pool name starting with `jms/` when picking
    a name for JMS resources. This way, JMS resources can be easily identified when
    browsing a JNDI tree.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择JMS资源名称时，始终使用以`jms/`开头的池名称是一个好主意。这样，在浏览JNDI树时可以轻松识别JMS资源。
- en: In the text field labeled JNDI Name, enter `jms/GlassFishBookConnectionFactory`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在标有“JNDI名称”的文本字段中，输入`jms/GlassFishBookConnectionFactory`。
- en: 'The Resource Type drop-down has three options:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 资源类型下拉菜单有三个选项：
- en: '`javax.jms.TopicConnectionFactory`: Used to create a connection factory that
    creates JMS topics for JMS clients using the pub/sub messaging domain'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javax.jms.TopicConnectionFactory`：用于创建一个连接工厂，该工厂为使用pub/sub消息域的JMS客户端创建JMS主题'
- en: '`javax.jms.QueueConnectionFactory`: Used to create a connection factory that
    creates JMS queues for JMS clients using the PTP messaging domain'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javax.jms.QueueConnectionFactory`：用于创建一个连接工厂，该工厂为使用PTP消息域的JMS客户端创建JMS队列'
- en: '`javax.jms.ConnectionFactory`: Used to create a connection factory that creates
    either JMS topics or JMS queues'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javax.jms.ConnectionFactory`：用于创建一个连接工厂，该工厂可以创建JMS主题或JMS队列'
- en: For our example, we will select `javax.jms.ConnectionFactory`; this way we can
    use the same connection factory for all of our examples, those using the PTP messaging
    domain, and those using the pub/sub messaging domain.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将选择`javax.jms.ConnectionFactory`；这样我们就可以为所有示例使用相同的连接工厂，无论是使用PTP消息域的示例，还是使用pub/sub消息域的示例。
- en: 'After entering the Pool Name for our connection factory, selecting a connection
    factory type and, optionally, entering a description for our connection factory,
    we must click the OK button for the changes to take effect:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入我们的连接工厂的池名称、选择连接工厂类型以及可选地输入我们的连接工厂的描述后，我们必须点击“确定”按钮以使更改生效：
- en: '![](img/f8e9df00-6f3d-49ef-8cab-ed6469c9b550.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f8e9df00-6f3d-49ef-8cab-ed6469c9b550.png)'
- en: We should then see our newly-created connection factory listed in the main area
    of the GlassFish web console.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够在GlassFish Web控制台的主区域看到我们新创建的连接工厂。
- en: Setting up a JMS message queue
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置JMS消息队列
- en: 'A JMS message queue can be added by expanding the Resources node in the tree
    at the left-hand side of the web console, expanding the JMS Resources node and
    clicking the Destination Resources node, then clicking the New... button in the
    main area of the web console:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过展开Web控制台左侧树中的“资源”节点，然后展开“JMS资源”节点，点击“目的地资源”节点，接着在Web控制台主区域点击“新建...”按钮来添加一个JMS消息队列：
- en: '![](img/34c1a572-761b-4df6-9068-68805973053d.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/34c1a572-761b-4df6-9068-68805973053d.png)'
- en: In our example, the JNDI name of the message queue is `jms/GlassFishBookQueue`.
    The resource type for message queues must be `javax.jms.Queue`. Additionally,
    a Physical Destination Name must be entered. In the preceding example, we use
    `GlassFishBookQueue` as the value for this field.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，消息队列的JNDI名称为`jms/GlassFishBookQueue`。消息队列的资源类型必须是`javax.jms.Queue`。此外，必须输入物理目的地名称。在先前的示例中，我们使用`GlassFishBookQueue`作为此字段的值。
- en: 'After clicking the New... button, entering the appropriate information for
    our message queue, and clicking OK, we should see the newly created queue:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击“新建...”按钮、输入我们的消息队列的适当信息并点击“确定”后，我们应该能看到新创建的队列：
- en: '![](img/0559c254-e894-42a6-b6ab-e490a9712660.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0559c254-e894-42a6-b6ab-e490a9712660.png)'
- en: Setting up a JMS message topic
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置JMS消息主题
- en: Setting up a JMS message topic in GlassFish is very similar to setting up a
    message queue.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在GlassFish中设置JMS消息主题与设置消息队列非常相似。
- en: 'In the GlassFish web console, expand the Resources node in the tree at the
    left-hand side, then expand the JMS Resouces node, click the Destination node,
    then click the New... button in the main area of the web console:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在GlassFish Web控制台中，展开左侧树中的“资源”节点，然后展开“JMS资源”节点，点击“目的地”节点，然后在Web控制台主区域点击“新建...”按钮：
- en: '![](img/53c80bf0-f458-4b60-8818-d0c8925557fd.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53c80bf0-f458-4b60-8818-d0c8925557fd.png)'
- en: Our examples will use a JNDI Name of `jms/GlassFishBookTopic`. Since this is
    a message topic, the Resource Type must be `javax.jms.Topic`. The Description
    field is optional. The Physical Destination Name property is required; for our
    example, we will use `GlassFishBookTopic` as the value for the Name property.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例将使用JNDI名称为`jms/GlassFishBookTopic`。由于这是一个消息主题，资源类型必须是`javax.jms.Topic`。描述字段是可选的。物理目的地名称属性是必需的；在我们的示例中，我们将使用`GlassFishBookTopic`作为名称属性的值。
- en: 'After clicking the OK button, we can see our newly created message topic:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“确定”按钮后，我们可以看到我们新创建的消息主题：
- en: '![](img/6ef4f7d0-623b-4fdc-8e74-62ff6fd1f689.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ef4f7d0-623b-4fdc-8e74-62ff6fd1f689.png)'
- en: Now that we have set up a connection factory, a message queue, and a message
    topic, we are ready to start writing code using the JMS API.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了一个连接工厂、一个消息队列和一个消息主题，我们就可以开始使用JMS API编写代码了。
- en: Configuring durable subscribers
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置持久订阅者
- en: 'Like we mentioned before, the easiest way to add a connection factory is through
    the GlassFish web console. Recall that, to add a JMS connection factory through
    the GlassFish web console, we need to expand the Resources node on the left-hand
    side, then expand the JMS Resources node, click the Connection Factories node,
    then click the New... button in the main area of the page. Our next example will
    use the settings displayed in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，通过GlassFish Web控制台添加连接工厂是最简单的方法。回想一下，要通过GlassFish Web控制台添加JMS连接工厂，我们需要展开左侧的“资源”节点，然后展开“JMS资源”节点，点击“连接工厂”节点，然后在页面主区域点击“新建...”按钮。我们的下一个示例将使用以下截图显示的设置：
- en: '![](img/2fb6ce47-b5f4-48a2-afc5-436e6af7422d.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2fb6ce47-b5f4-48a2-afc5-436e6af7422d.png)'
- en: 'Before clicking the OK button, we need to scroll to the bottom of the page,
    click the Add Property button, and enter a new property named `ClientId`. Our
    example will use `ExampleId` as the value for this property:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击“确定”按钮之前，我们需要滚动到页面底部，点击“添加属性”按钮，并输入一个名为`ClientId`的新属性。我们的示例将使用`ExampleId`作为此属性的值：
- en: '![](img/d1f08e8b-23ed-4028-b6e8-720b2be7dd98.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d1f08e8b-23ed-4028-b6e8-720b2be7dd98.png)'
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this appendix, we discussed how to download and install GlassFish. We also
    discussed several methods of deploying the Java EE application through the GlassFish
    web console, through the `asadmin` command and by copying the file to the `autodeploy`
    directory. We also discussed basic GlassFish administration tasks, such as setting
    up domains and setting up database connectivity by adding connection pools and
    data sources.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本附录中，我们讨论了如何下载和安装GlassFish。我们还讨论了通过GlassFish Web控制台、通过`asadmin`命令以及通过将文件复制到`autodeploy`目录来部署Java
    EE应用程序的几种方法。我们还讨论了基本的GlassFish管理任务，例如设置域和通过添加连接池和数据源来设置数据库连接。
