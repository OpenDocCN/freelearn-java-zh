- en: Processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this book, we have been covering the building blocks of Reactive Streams.
    The publisher, subscriber, and operators represent data manipulation components.
    Processors, on the other hand, represent the plumbing required to join these components
    into a single stream of data. In this chapter, we will discuss the types and requirements
    of processors in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to processors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding processor types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hot versus cold publishers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Standard Edition, JDK 8 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IntelliJ IDEA IDE, 2018.1 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub link for this chapter is [https://github.com/PacktPublishing/Hands-On-Reactive-Programming-with-Reactor/tree/master/Chapter04](https://github.com/PacktPublishing/Hands-On-Reactive-Programming-with-Reactor/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to processors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A processor represents a state of data processing. It is therefore presented
    as both a publisher and a subscriber. Since it is a publisher, we can create a
    processor and `Subscribe` to it. Most of the functions of a publisher can be performed
    using a processor; it can inject custom data, as well as generate errors and completion
    events. We can also interface all operators on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we did the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: We added an instance of `DirectProcessor`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the second line, we added the `take` operator, to select two elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We also subscribed and printed the data on the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the last three lines, we published three data elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the output, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c4a45beb-9327-456f-9a8a-0c7a1e31c393.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, it looks like we can replace the publisher with processors. But if this
    is the case, why did the Reactive Stream specification ask for two interfaces
    for the same function? Well, the publisher and processor are not actually the
    same. Processors are special class publishers that have limited capabilities.
    They represent a stage of data processing. We will familiarize ourselves with
    these limitations when we discuss the different types of available processors.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a general rule, we should try to refrain from using processors directly.
    Instead, we should try to look for the following alternatives:'
  prefs: []
  type: TYPE_NORMAL
- en: First, determine an existing operator that can provide the intended functions.
    Operators should be the first choice for carrying out data manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is no operator available, we should try to adapt the `Flux.generate`
    API and generate a custom stream of data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding processor types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are different types of processors available in Reactor. These processors
    differ in various features, such as backpressure capability, the number of clients
    they can handle, synchronous invocation, and so on. Let's look at the types of
    processor available in Reactor.
  prefs: []
  type: TYPE_NORMAL
- en: The DirectProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`DirectProcessor` is the simplest of the processors. This processor connects
    a processor to a subscriber, and then directly invokes the `Subscriber.onNext`
    method. The processor does not offer any backpressure handling.'
  prefs: []
  type: TYPE_NORMAL
- en: An instance of `DirectProcessor` can be created by invoking the `create()` method.
    Any number of subscribers can subscribe to the processor. It must be noted that
    once the processor has published the complete event, it will reject subsequent
    data events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an instance of `Directprocessor`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds a subscriber that can print all events (data/error/completion) to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishes a data event, followed by a completion event
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adds another subscriber, which can print all events (data/error/completion)
    to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishes a data event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we look at the following output screenshot, we can see that all subscribers
    get the completion event. The data event for the value of `12` then gets dropped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0b9103f1-f5ac-4baf-b064-3b5c0a89b8bd.png)'
  prefs: []
  type: TYPE_IMG
- en: With respect to the handling of backpressure, `DirectProcessor` has another
    important limitation. We mentioned previously that it does not have backpressure
    capability at all. This means that if we push events more than what is asked by
    the subscriber, it leads to an `Overflow` exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code does the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `Directprocessor`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added a subscriber that can print all events (data/error/completion) to the
    console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The subscriber also listened to the subscription event and raised a demand of
    `1` data event
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, a couple of data events were published
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding code failed, displaying the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61db4c2b-c7c7-4744-b697-796f90ccbabe.png)'
  prefs: []
  type: TYPE_IMG
- en: The UnicastProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `UnicastProcessor` type is like the `DirectProcessor`, in terms of invocations
    of the `Subscriber.onNext` method. It invokes the subscriber method directly.
    However, unlike the `DirectProcessor`, the `UnicastProcessor` is capable of backpressure.
    Internally, it creates a queue to hold undelivered events. We can also provide
    an optional external queue to buffer the events. After the buffer is full, the
    processor starts to reject elements. The processor also makes it possible to perform
    cleanup for every rejected element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `UnicastProcessor` provides `create` methods to build an instance of the
    processor. Let''s take a look at the following code to see how this is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code did the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `UnicastProcessor`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added a subscriber, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created a `sink` to push a couple of elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'While `UnicastProcessor` provides backpressure capability, a major limitation
    is that only a single subscriber can be worked with. If we add one more subscriber
    to the preceding code, it will fail with the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0876b593-dfd5-4634-93ed-7c9407e942c8.png)'
  prefs: []
  type: TYPE_IMG
- en: Each processor provides a `Sink` method. A `Sink` is the preferred way of publishing
    events to the subscriber. It provides methods to publish next, error, and complete
    events. `Sink` provides a thread-safe manner of handling these events, instead
    of directly publishing them by using the `Subsciber.OnNext` method calls.
  prefs: []
  type: TYPE_NORMAL
- en: The EmitterProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`EmitterProcessor` is a processor that can be used with several subscribers.
    Multiple subscribers can ask for the next value event, based on their individual
    rate of consumption. The processor provides the necessary backpressure support
    for each subscriber. This is depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/147b6011-88f2-4f61-ab83-6cdc54361133.png)'
  prefs: []
  type: TYPE_IMG
- en: The processor is also capable of publishing events from an external publisher.
    It consumes an event from the injected publisher and synchronously passes it to
    the subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code did the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `EmitterProcessor`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added a subscriber, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created a `sink` to push a couple of elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added another subscriber, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pushed more events by using the Sink API
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding code builds the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0f6e072-5d27-46a8-ad37-c4e14c598eda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding code also made the following clear:'
  prefs: []
  type: TYPE_NORMAL
- en: Both subscribers print items to the console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The processor delivers events to a subscriber after its subscription. This is
    different from Flux, which delivers all items to all subscribers, irrespective
    of the time of subscription.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ReplayProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ReplayProcessor` is a special-purpose processor, capable of caching and replaying
    events to its subscribers. The processor also has the capability of publishing
    events from an external publisher. It consumes an event from the injected publisher
    and synchronously passes it to the subscribers.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ReplayProcessor` can cache events for the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: All events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A limited count of events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events bounded by a specified time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events bounded by a count and a specified time period
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last event only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once cached, all events are replayed when a subscriber is added:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cac7358b-5570-4c04-8cc8-0fb7c370985b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code did the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `ReplayProcessor`, with a cache of three events
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added a subscriber, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created a `sink` to push a couple of elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added another subscriber, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding code builds the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: The processor caches the last three events, namely, `12`, `13`, and `14`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When the second subscriber connects, it prints the cached events on the console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A screenshot of the output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/79180414-aa8b-4ce8-935f-bc97aa3fc610.png)'
  prefs: []
  type: TYPE_IMG
- en: The TopicProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`TopicProcessor` is a processor capable of working with multiple subscribers,
    using an event loop architecture. The processor delivers events from a publisher
    to the attached subscribers in an asynchronous manner, and honors backpressure
    for each subscriber by using the `RingBuffer` data structure. The processor is
    also capable of listening to events from multiple publishers. This is illustrated
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ebb5070b-070d-4c61-a738-26f692eb3d4d.png)'
  prefs: []
  type: TYPE_IMG
- en: Unlike the processors that deliver events in an ordered manner, `TopicProcessor`
    is capable of delivering events to subscribers in a concurrent manner. This is
    governed by the number of threads created in the processor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code did the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `TopicProcessor` by using the provided builder
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provided a `ThreadPool` of size `2`, in order to connect two subscribers to
    it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added two subscriber instances, which can print data events to the console
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created a `sink` to push a couple of elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding code builds the following output, and the processor delivers
    events to both subscribers concurrently:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35a1aceb-d476-4f13-aff2-fab38fbe203a.png)'
  prefs: []
  type: TYPE_IMG
- en: The WorkQueueProcessor type
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `WorkQueueProcessor` type is similar to the `TopicProcessor`, in that it
    can connect to multiple subscribers. However, it does not deliver all events to
    each subscriber. The demand from every subscriber is added to a queue, and events
    from a publisher are sent to any of the subscribers. The model is more like having
    listeners on a JMS queue; each listener consumes a message when finished. The
    processor delivers messages to each of the subscribers in a round-robin manner.
    The processor is also capable of listening to events from multiple publishers.
    This is depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6c294fc3-4c0f-4507-9691-422d02ab49c6.png)'
  prefs: []
  type: TYPE_IMG
- en: The processor is better in terms of resource requirements, as it does not build
    a thread pool for its subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code did the following things:'
  prefs: []
  type: TYPE_NORMAL
- en: Created an instance of `WorkQueueProcessor` by using the provided builder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Added two subscriber instances, which can print data events to the console.
    Each subscriber prints its ID, as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Created a `sink` to push a couple of elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding code builds the following output. The processor delivers a few
    events to the first subscriber, with the rest being delivered to the second subscriber:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5d5b1025-d2e0-40e5-9e42-9e5e0f5444c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Hot versus Cold publishers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we built publishers that would start publishing data to
    each of the subscriber instances after subscription. The Fibonacci publisher that
    we created in [Chapter 2](2886252b-5c5e-4b42-ab25-dd1145fe9d60.xhtml), *The Publisher
    and Subscriber APIs in a Reactor*, would publish the complete Fibonacci series
    to each of its subscribers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following Fibonacci code as a cold publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Publishers that start publishing data to the subscriber after subscription are
    known as **cold publishers**. It is important to understand that the data should
    be generated post-subscription. If there is no subscriber, then the publisher
    will not generate any data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the output of the preceding cold publisher. Here, both
    subscribers print the complete set of Fibonacci numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3396009c-c160-435c-b4a4-73f5259deb3c.png)'
  prefs: []
  type: TYPE_IMG
- en: In the current chapter, we have used the processors as publishers, which do
    not depend on the subscriber. These publishers keep emitting data, and, when a
    new subscriber arrives, it receives only newly emitted data. This is different
    from cold publisher behavior, which also publishes old data for every new subscriber.
    These publishers are known as **hot publishers**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, we have converted a Fibonacci publisher into a hot publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code illustrates the following:'
  prefs: []
  type: TYPE_NORMAL
- en: We built a `UnicastProcessor` and converted it to a `Flux` by using the `publish`
    method
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We then added a subscriber to it
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we created a `Thread` and used the `UnicastProcessor` instance (created
    previously) to generate the Fibonacci series
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another subscriber is added when the series value is `144`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the output of the hot publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: The first subscriber prints the initial values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The second subscriber prints values that are greater than `143`. This is shown
    in the following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/45d41277-e172-46db-8d1e-929209f4bf9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explored the various kinds of processors that are available
    in Reactor. You learned that the `DirectProcessor` is the simplest processor,
    but it does not offer backpressure. We then discussed the functions and abilities
    of `UnicastProcessor`, `EmmiterProcessor`, `ReplayProcessor`, `TopicProcessor`,
    and `WorkQueueProcessor`. In the end, we familiarized ourselves with hot and cold
    publishers, ultimately using `UnicastProcessor` to convert a Fibonacci generator
    into a hot publisher.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the limitations of `DirectProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the limitations of `UnicastProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the capabilities of `EmitterProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the capabilities of `ReplayProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the capabilities of `TopicProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the capabilities of `WorkQueueProcessor`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a hot publisher and a cold publisher?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
