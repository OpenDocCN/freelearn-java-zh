["```java\n        def graphql(event, context):\n        http_method = event['httpMethod']\n\n        response = handle_graphql(http_method, event)\n        status_code = 200\n\n        response = {\n          'statusCode': status_code,\n          'body': json.dumps(response),\n          'headers': CORS_HEADERS,\n        }\n\n        return response\n```", "```java\nimport json\nimport graphene\n\nfrom graphene_sqlalchemy import SQLAlchemyObjectType\n\nfrom .decorators import decode_json\n\nfrom ..models import SessionModel\nfrom ..persistence.cupping import Cupping\nfrom ..persistence.session import Session\nfrom ..persistence.queries import (\n        get_cuppings,\n        get_sessions,\n)\n\nclass CuppingObject(SQLAlchemyObjectType):\n    class Meta:\n        model = Cupping\n\nclass SessionObject(SQLAlchemyObjectType):\n    class Meta:\n        model = Session\n\nclass Query(graphene.ObjectType):\n    sessions = graphene.List(SessionObject, id=graphene.Int(), \n    account_id=graphene.Int())\n    cuppings = graphene.List(CuppingObject, session_id=graphene.Int())\n\n    def resolve_cuppings(self, info, **filters):\n        return get_cuppings(**filters)\n\n    def resolve_sessions(self, info, **filters):\n        return get_sessions(**filters)\n\n# Global schema which will handle queries and mutations\nschema = graphene.Schema(\n        query=Query,\n        types=[CuppingObject, SessionObject],\n)\n\n@decode_json\ndef _handle_graphql(payload):\n    query = payload['query']\n    variables = payload.get('variables', {})\n    result = schema.execute(query, variable_values=variables)\n    success = True if not result.errors else False\n    return success, result\n\ndef handle_graphql(http_method, payload):\n    success, result = _handle_graphql(payload)\n    if not success:\n        errors = []\n        for e in result.errors:\n            try:\n                e = json.loads(e.message)\n            except:\n                e = str(e)\n            errors.append(e)\n        return {'errors': errors}\n    return result.data\n```", "```java\n    class Query(graphene.ObjectType):\n      sessions = graphene.List(SessionObject,\n         id=graphene.Int(), account_id=graphene.Int())\n      cuppings = graphene.List(CuppingObject, \n         session_id=graphene.Int())\n\n      def resolve_cuppings(self, info, **filters):\n          return get_cuppings(**filters)\n\n      def resolve_sessions(self, info, **filters):\n          return get_sessions(**filters)\n```", "```java\nclass CuppingInput(graphene.InputObjectType):\n    name = graphene.String(required=True)\n    scores = graphene.types.json.JSONString()\n    overall_score = graphene.Float(required=True)\n    notes = graphene.String()\n    descriptors = graphene.List(graphene.String)\n    defects = graphene.List(graphene.String)\n    is_sample = graphene.Boolean()\n\nclass CreateSessionMutation(graphene.Mutation):\n\n    class Arguments:\n        name = graphene.String()\n        form_name = graphene.String()\n        account_id = graphene.Int()\n        user_id = graphene.Int()\n        cuppings = graphene.List(CuppingInput)\n\n    ok = graphene.Boolean()\n    session = graphene.Field(SessionObject)\n\n    def mutate(self, info, *args, **kwargs):\n        session = create_session_from_kwargs(kwargs)\n        return CreateSessionMutation(session=session, ok=True)\n\nclass Mutation(graphene.ObjectType):\n    create_session = CreateSessionMutation.Field()\n\n# Global schema which will handle queries and mutations\nschema = graphene.Schema(\n        query=Query,\n        mutation=Mutation,\n        types=[CuppingObject, SessionObject],\n)\n```", "```java\n    functions:\n     GraphQL:\n       handler: handler.graphql\n       events:\n         - http:\n             path: graphql\n             method: get\n             cors: true\n         - http:\n             path: graphql\n             method: post\n             cors: true\n```", "```java\ngit+https://github.com/graphql-python/graphene-sqlalchemy.git@08a0072\n```", "```java\nbrianz@gold(graphql=)$ ENV=dev make shell\nroot@7466ff009753:/code#\nroot@7466ff009753:/code# make libs \npip install -t serverless/lib -r requirements.txt \nCollecting git+https://github.com/graphql-python/\n graphene-sqlalchemy.git@08a0072 (from -r requirements.txt\n (line 8)) \n Cloning https://github.com/graphql-python/\n graphene-sqlalchemy.git (to 08a0072) to /tmp/pip-3tnr1e2k-build \n Could not find a tag or branch '08a0072', assuming commit.\n```", "```java\nroot@a2484038a502:/code# make deploy\ncd serverless && sls deploy -s dev\nServerless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service .zip file to S3 (5.55 MB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n..........................\nServerless: Stack update finished... \nService Information \nservice: coffee-cupping \nstage: dev \nregion: us-west-2 \napi keys: \nNone \nendpoints: \nGET - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/graphql \nPOST - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/graphql GET - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/session \nPOST - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/session \nGET - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/session/{id} \nDELETE - https://4mvnd1tewe.execute-api.us-west-\n 2.amazonaws.com/dev/session/{id} \nfunctions: \nGraphQL: coffee-cupping-dev-GraphQL \nHandleSession: coffee-cupping-dev-HandleSession \nHandleSessionDetail: coffee-cupping-dev-HandleSessionDetail \n```", "```java\n    query allSessions { \n      sessions {\n        id\n        name\n      }\n    }\n```", "```java\n    class Query(graphene.ObjectType):\n      sessions = graphene.List(SessionObject, id=graphene.Int(),    \n         account_id=graphene.Int())\n```", "```java\n    query allSessions { \n      sessions {\n          id\n          name\n          formName\n            cuppings {\n                name\n                notes\n            }\n      }\n    }\n```", "```java\n    query Cuppings($sessionId: Int!) { \n      cuppings(sessionId: $sessionId) {\n         id\n         name\n         overallScore\n         scores\n      }\n    }\n```", "```java\n    cuppings = graphene.List(CuppingObject, \n       session_id=graphene.Int())\n```", "```java\n     select * from cuppings where session_id = 1\n```", "```java\n    mutation CreateSession { \n      createSession (\n        name: \"Noon Friday session\"\n        formName: \"Roastery custom\"\n        accountId: 234\n        cuppings: [\n        {\n          name: \"Ethiopia Cochere\"\n          overallScore: 91\n          scores: \"{\\\"Aroma\\\": 10, \\\"Flavor\\\": 9, \\\"Body\\\": 8, \n                \\\"Clean Cup\\\": 6}\"\n          descriptors: [\"port-wine\" \"chocolate\"]\n          notes: \"deep and dark\"\n        }\n        ]\n      ) \n       {\n         ok\n         session {\n           id\n           name\n           formName\n           cuppings {\n             sessionId\n             name\n             overallScore\n             scores\n             defects\n             descriptors\n             notes\n           }\n         }\n       }\n    }\n```", "```java\n    class Mutation(graphene.ObjectType):\n       create_session = CreateSessionMutation.Field()\n```", "```java\nroot@7466ff009753:/code# make deploy function=GraphQL \ncd serverless && sls deploy function -s dev -f GraphQL \nServerless: Packaging function: GraphQL... \nServerless: Excluding development dependencies... \nServerless: Uploading function: GraphQL (5.74 MB)... \nServerless: Successfully deployed function: GraphQL \nroot@7466ff009753:/code# make deploy\n```"]