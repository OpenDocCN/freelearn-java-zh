["```java\npublic class ServerAuthModuleImpl implements ServerAuthModule {\n\n    private MessagePolicy requestPolicy;\n    private CallbackHandler handler;\n    public void initialize(MessagePolicy requestPolicy, MessagePolicy responsePolicy, CallbackHandler handler, Map options) throws AuthException {\n        this.requestPolicy = requestPolicy;\n        this.handler = handler;\n    }\n\n    public Class[] getSupportedMessageTypes() {\n        return new Class[]{HttpServletRequest.class, HttpServletResponse.class};\n    }\n\n    public AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException {\n        try {\n\n            String username = validation(messageInfo, clientSubject);\n            if (username == null && requestPolicy.isMandatory()) {\n\n                HttpServletRequest request = (HttpServletRequest) messageInfo.getRequestMessage();\n\n                HttpServletResponse response = (HttpServletResponse) messageInfo.getResponseMessage();\n\n                String header = \"Basic\" + \" realm=\\\"\" + request.getServerName() + \"\\\"\";\n                response.setHeader(\"WWW-Authenticate\", header);\n\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                return AuthStatus.SEND_CONTINUE;\n            }\n\n            handler.handle(new Callback[]{\n                new CallerPrincipalCallback(clientSubject, username)});\n            if (username != null) {\n                messageInfo.getMap().put(\"javax.servlet.http.authType\", \"ServerAuthModuleImpl\");\n            }\n\n            return AuthStatus.SUCCESS;\n        } catch (Exception e) {\n            e.printStackTrace();\n            throw new AuthException(e.getMessage());\n        }\n    }\n\n    public String validation(MessageInfo mInfo, Subject cSubject) throws Exception {\n        HttpServletRequest request = (HttpServletRequest) mInfo.getRequestMessage();\n\n        String headerAutho = request.getHeader(\"authorization\");\n\n        if (headerAutho != null && headerAutho.startsWith(\"Basic\")) {\n\n            headerAutho = headerAutho.substring(6).trim();\n\n            String decodedAutho = new String(Base64.decode(headerAutho.getBytes()));\n\n            int colon = decodedAutho.indexOf(':');\n            if (colon <= 0 || colon == decodedAutho.length() - 1) {\n                return null;\n            }\n\n            String username = decodedAutho.substring(0, colon);\n            String password = decodedAutho.substring(colon + 1);\n\n            //Container password validation, you can put your\n            //own validation process instead of delegating it to the container\n            PasswordValidationCallback pwdValidCallback =\n                    new PasswordValidationCallback(cSubject, username, password.toCharArray());\n\n            handler.handle(new Callback[]{pwdValidCallback});\n            //Removes the stored password\n            pwdValidCallback.clearPassword();\n            password = null;\n\n            if (pwdValidCallback.getResult()) {//if the user is authenticated\n                return username;\n            }\n        }\n        return null;\n    }\n\n    public AuthStatus secureResponse(MessageInfo messageInfo, Subject serviceSubject) throws AuthException {\n        return AuthStatus.SEND_SUCCESS;\n    }\n\n    public void cleanSubject(MessageInfo messageInfo, Subject subject) throws AuthException {\n    }\n}\n```", "```java\n    <glassfish-web-app error-url=\"\"  httpservlet-security-provider=\"AuthModule1\">\n      <class-loader delegate=\"true\"/>  \n    </glassfish-web-app>\n    ```", "```java\nPasswordValidationCallback pwdValidCallback = new PasswordValidationCallback(cSubject, username, password.toCharArray());\n```", "```java\n    <security-role>\n       <role-name>admin</role-name>\n    </security-role>\n    ```", "```java\n    <security-constraint>\n            <display-name>Constraint1</display-name>\n            <web-resource-collection>\n                <web-resource-name>Administration</web-resource-name>\n                <url-pattern>/faces/administration/*</url-pattern>\n            </web-resource-collection>\n            <auth-constraint>\n                <role-name>admin</role-name>\n            </auth-constraint>\n    </security-constraint>\n    ```", "```java\n    <glassfish-web-app error-url=\"\" httpservlet-security-provider=\"AuthModule1\">\n      <security-role-mapping>\n        <role-name>admin</role-name>\n        <group-name>administrator</group-name>\n      </security-role-mapping>\n      <class-loader delegate=\"true\"/>\n    </glassfish-web-app>\n    ```", "```java\n    <login-config>\n        <auth-method>DIGEST</auth-method>\n        <realm-name>MyJDBCRealm</realm-name>\n    </login-config>\n    ```", "```java\nServletContext context = ...\n //...\nString appContextID = context.getVirtualServerName() + \" \" + context.getContextPath();\n```", "```java\npublic AuthStatus validateRequest(MessageInfo messageInfo, Subject clientSubject, Subject serviceSubject) throws AuthException {\n\n    HttpServletRequest request = (HttpServletRequest) messageInfo.getRequestMessage();\n    HttpServletResponse response = (HttpServletResponse) messageInfo.getResponseMessage();\n\n    try{\n      if(...)\n        request.getServletContext().getRequestDispatcher(\"specificErrorPage\")\n               .forward(request, response);\n    }catch(Exception ex){}\n\n    return SEND_CONTINUE;\n}\n```"]