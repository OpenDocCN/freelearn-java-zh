["```java\n    management.health.circuitbreakers.enabled: true \n    ```", "```java\n    Mono<ProductAggregate> getProduct(\n        @PathVariable int productId,\n        @RequestParam(value = \"delay\", required = false, defaultValue =\n        \"0\") int delay,\n        @RequestParam(value = \"faultPercent\", required = false, \n        defaultValue = \"0\") int faultPercent\n    ); \n    ```", "```java\n    Mono<Product> getProduct(\n         @PathVariable int productId,\n         @RequestParam(value = \"delay\", required = false, defaultValue\n         = \"0\") int delay,\n         @RequestParam(value = \"faultPercent\", required = false, \n         defaultValue = \"0\") int faultPercent\n    ); \n    ```", "```java\n    public Mono<ProductAggregate> getProduct(int productId,\n      int delay, int faultPercent) {\n        return Mono.zip(\n            ...\n            integration.getProduct(productId, delay, faultPercent),\n            .... \n    ```", "```java\n    public Mono<Product> getProduct(int productId, int delay, \n      int faultPercent) {\n\n        URI url = UriComponentsBuilder.fromUriString(\n          PRODUCT_SERVICE_URL + \"/product/{productId}?delay={delay}\" \n          + \"&faultPercent={faultPercent}\")\n          .build(productId, delay, faultPercent);\n      return webClient.get().uri(url).retrieve()... \n    ```", "```java\npublic Mono<Product> getProduct(int productId, int delay, \n  int faultPercent) {\n  ...\n  return repository.findByProductId(productId)\n    .map(e -> throwErrorIfBadLuck(e, faultPercent))\n    .delayElement(Duration.ofSeconds(delay))\n    ...\n} \n```", "```java\nprivate ProductEntity throwErrorIfBadLuck(\n  ProductEntity entity, int faultPercent) {\n  if (faultPercent == 0) {\n    return entity;\n  }\n  int randomThreshold = getRandomNumber(1, 100);\n  if (faultPercent < randomThreshold) {\n    LOG.debug(\"We got lucky, no error occurred, {} < {}\", \n      faultPercent, randomThreshold);\n\n  } else {\n    LOG.info(\"Bad luck, an error occurred, {} >= {}\",\n      faultPercent, randomThreshold);\n\n    throw new RuntimeException(\"Something went wrong...\");\n  }\n  return entity;\n}\nprivate final Random randomNumberGenerator = new Random();\nprivate int getRandomNumber(int min, int max) {\n  if (max < min) {\n    throw new IllegalArgumentException(\"Max must be greater than min\");\n  }\n  return randomNumberGenerator.nextInt((max - min) + 1) + min;\n} \n```", "```java\next {\n   resilience4jVersion = \"2.0.2\"\n}\ndependencies {\n    implementation \"io.github.resilience4j:resilience4j-spring-\nboot2:${resilience4jVersion}\"\n    implementation \"io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}\"\n    implementation 'org.springframework.boot:spring-boot-starter-aop'\n    ... \n```", "```java\ndependencyManagement {\n    imports {\n        mavenBom \"org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}\"\n        mavenBom \"io.github.resilience4j:resilience4j-bom:${resilience4jVersion}\"\n    }\n} \n```", "```java\n@TimeLimiter(name = \"product\")\n@CircuitBreaker(\n     name = \"product\", fallbackMethod = \"getProductFallbackValue\")\npublic Mono<Product> getProduct(\n  int productId, int delay, int faultPercent) {\n  ...\n} \n```", "```java\nprivate final ProductCompositeIntegration integration;\n@Autowired\npublic ProductCompositeServiceImpl(... ProductCompositeIntegration integration) {\n  this.integration = integration;\n}\npublic Mono<ProductAggregate> getProduct(int productId, int delay, int faultPercent) {\n  return Mono.zip(\n    ..., \n    integration.getProduct(productId, delay, faultPercent), \n    ... \n```", "```java\nprivate Mono<Product> getProductFallbackValue(int productId, \n  int delay, int faultPercent, CallNotPermittedException ex) { \n```", "```java\nprivate Mono<Product> getProductFallbackValue(int productId, \n  int delay, int faultPercent, CallNotPermittedException ex) {\n  if (productId == 13) {\n    String errMsg = \"Product Id: \" + productId \n      + \" not found in fallback cache!\";\n    throw new NotFoundException(errMsg);\n  }\n  return Mono.just(new Product(productId, \"Fallback product\" \n    + productId, productId, serviceUtil.getServiceAddress()));\n} \n```", "```java\nresilience4j.timelimiter:\n  instances:\n    product:\n      timeoutDuration: 2s\nmanagement.health.circuitbreakers.enabled: true\nresilience4j.circuitbreaker:\n  instances:\n    product:\n      allowHealthIndicatorToFail: false\n      registerHealthIndicator: true\n      slidingWindowType: COUNT_BASED\n      slidingWindowSize: 5\n      failureRateThreshold: 50\n      waitDurationInOpenState: 10000\n      permittedNumberOfCallsInHalfOpenState: 3\n      automaticTransitionFromOpenToHalfOpenEnabled: true\n      ignoreExceptions:\n        - se.magnus.api.exceptions.InvalidInputException\n        - se.magnus.api.exceptions.NotFoundException \n```", "```java\n @Retry(name = \"product\")\n  @TimeLimiter(name = \"product\")\n  @CircuitBreaker(name = \"product\", fallbackMethod =\n    \"getProductFallbackValue\")\n  public Mono<Product> getProduct(int productId, int delay, \n    int faultPercent) { \n```", "```java\nresilience4j.retry:\n  instances:\n    product:\n      maxAttempts: 3\n      waitDuration: 1000\n      retryExceptions:\n      - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError \n```", "```java\n...\nfunction testCircuitBreaker() {\n    echo \"Start Circuit Breaker tests!\"\n    ...\n}\n...\ntestCircuitBreaker\n...\necho \"End, all tests OK:\" `date` \n```", "```java\ndocker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health \n```", "```java\ndocker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state \n```", "```java\nassertEqual \"CLOSED\" \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state)\" \n```", "```java\nfor ((n=0; n<3; n++))\ndo\n    assertCurl 500 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS?delay=3 $AUTH -s\"\n    message=$(echo $RESPONSE | jq -r .message)\n    assertEqual \"Did not observe any item or terminal signal within 2000ms\" \"${message:0:57}\"\ndone \n```", "```java\nassertEqual \"OPEN\" \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state)\"\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS?delay=3 $AUTH -s\"\nassertEqual \"Fallback product$PROD_ID_REVS_RECS\" \"$(echo \"$RESPONSE\" | jq -r .name)\"\nassertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $AUTH -s\"\nassertEqual \"Fallback product$PROD_ID_REVS_RECS\" \"$(echo \"$RESPONSE\" | jq -r .name)\" \n```", "```java\nassertCurl 404 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_NOT_FOUND $AUTH -s\"\nassertEqual \"Product Id: $PROD_ID_NOT_FOUND not found in fallback cache!\" \"$(echo $RESPONSE | jq -r .message)\" \n```", "```java\necho \"Will sleep for 10 sec waiting for the CB to go Half Open...\"\nsleep 10 \n```", "```java\nassertEqual \"HALF_OPEN\" \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state)\"\nfor ((n=0; n<3; n++))\ndo\n    assertCurl 200 \"curl -k https://$HOST:$PORT/product-composite/$PROD_ID_REVS_RECS $AUTH -s\"\n    assertEqual \"product name C\" \"$(echo \"$RESPONSE\" | jq -r .name)\"\ndone\nassertEqual \"CLOSED\" \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state)\" \n```", "```java\nassertEqual \"CLOSED_TO_OPEN\"      \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION | jq -r\n.circuitBreakerEvents[-3].stateTransition)\"\nassertEqual \"OPEN_TO_HALF_OPEN\"   \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION | jq -r .circuitBreakerEvents[-2].stateTransition)\"\nassertEqual \"HALF_OPEN_TO_CLOSED\" \"$(docker-compose exec -T product-composite curl -s http://product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION | jq -r .circuitBreakerEvents[-1].stateTransition)\" \n```", "```java\n    cd $BOOK_HOME/Chapter13\n    ./gradlew build && docker-compose build \n    ```", "```java\n    ./test-em-all.bash start \n    ```", "```java\nunset ACCESS_TOKEN\nACCESS_TOKEN=$(curl -k https://writer:secret-writer@localhost:8443/oauth2/token -d grant_type=client_credentials -d scope=\"product:read product:write\" -s | jq -r .access_token)\necho $ACCESS_TOKEN \n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1 -w \"%{http_code}\\n\" -o /dev/null -s \n```", "```java\ndocker-compose exec product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state \n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1?delay=3 -s | jq . \n```", "```java\ndocker-compose exec product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state \n```", "```java\ncurl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1 -w \"%{http_code}\\n\" -o /dev/null -s \n```", "```java\ndocker-compose exec product-composite curl -s http://product-composite:8080/actuator/health | jq -r .components.circuitBreakers.details.product.details.state \n```", "```java\ndocker-compose exec product-composite curl -s http://product-composite:8080/actuator/circuitbreakerevents/product/STATE_TRANSITION | jq -r '.circuitBreakerEvents[-3].stateTransition, .circuitBreakerEvents[-2].stateTransition, .circuitBreakerEvents[-1].stateTransition' \n```", "```java\ntime curl -H \"Authorization: Bearer $ACCESS_TOKEN\" -k https://localhost:8443/product-composite/1?faultPercent=25 -w \"%{http_code}\\n\" -o /dev/null -s \n```", "```java\ndocker-compose exec product-composite curl -s http://product-composite:8080/actuator/retryevents | jq '.retryEvents[-2], .retryEvents[-1]' \n```", "```java\ndocker-compose down \n```"]