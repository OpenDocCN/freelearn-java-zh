["```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-resteasy</artifactId>\n</dependency>\n```", "```java\npackage dev.davivieira.bootstrap.samples;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n@Path(\"/app\")\npublic class RestExample {\n    @GET\n    @Path(\"/simple-rest\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String simpleRest() {\n        return \"This REST endpoint is provided by Quarkus\";\n    }\n}\n```", "```java\nBeanExample beanExample = new BeanExample();\n```", "```java\n@Inject\nBeanExample beanExample\n```", "```java\npackage dev.davivieira.bootstrap.samples;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.validation.Valid;\n@ApplicationScoped\npublic class BeanExample {\n    public String simpleBean() {\n        return \"This is a simple bean\";\n    }\n}\n```", "```java\npackage dev.davivieira.bootstrap.samples;\nimport javax.inject.Inject;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.Produces;\nimport javax.ws.rs.core.MediaType;\n@Path(\"/app\")\npublic class RestExample {\n    @Inject\n    BeanExample beanExample;\n    /** Code omitted **/\n    @GET\n    @Path(\"/simple-bean\")\n    @Produces(MediaType.TEXT_PLAIN)\n    public String simpleBean() {\n        return beanExample.simpleBean();\n    }\n}\n```", "```java\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-hibernate-validator</artifactId>\n</dependency>\n```", "```java\npackage dev.davivieira.bootstrap.samples;\nimport javax.validation.constraints.Min;\nimport javax.validation.constraints.NotBlank;\npublic class SampleObject {\n    @NotBlank(message = \"The field cannot be empty\")\n    public String field;\n    @Min(message = \"The minimum value is 10\", value = 10)\n    public int value;\n}\n```", "```java\n@POST\n@Path(\"/request-validation\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic Result validation(@Valid SampleObject sampleObject) {\n    try {\n        return new Result(\"The request data is valid!\");\n    } catch (ConstraintViolationException e) {\n        return new Result(e.getConstraintViolations());\n    }\n}\n```", "```java\n$ curl -H \"Content-Type: application/json\"  -d '{\"field\": \"\", \"value\": 10}' localhost:8080/app/request-validation | jq\n{\n  \"exception\": null,\n  \"propertyViolations\": [],\n  \"classViolations\": [],\n  \"parameterViolations\": [\n    {\n      \"constraintType\": \"PARAMETER\",\n      \"path\": \"validation.arg0.field\",\n      \"message\": \"The field cannot be empty\",\n      \"value\": \"\"\n    }\n  ],\n  \"returnValueViolations\": []\n}\n```", "```java\n$ curl -s -H \"Content-Type: application/json\"  -d '{\"field\": \"test\", \"value\": 9}' localhost:8080/app/request-validation | jq\n{\n  \"exception\": null,\n  \"propertyViolations\": [],\n  \"classViolations\": [],\n  \"parameterViolations\": [\n    {\n      \"constraintType\": \"PARAMETER\",\n      \"path\": \"validation.arg0.value\",\n      \"message\": \"The minimum value is 10\",\n      \"value\": \"9\"\n    }\n  ],\n  \"returnValueViolations\": []\n}\n```", "```java\n$ curl -s -H \"Content-Type: application/json\"  -d '{\"field\": \"test\", \"value\": 10}' localhost:8080/app/request-validation | jq\n{\n  \"message\": \"The request data is valid!\",\n  \"success\": true\n}\n```", "```java\n    <dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-agroal</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-jdbc-h2</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-hibernate-orm</artifactId>\n    </dependency>\n    ```", "```java\n    quarkus.datasource.db-kind=h2\n    quarkus.datasource.jdbc.url=jdbc:h2:mem:de\n      fault;DB_CLOSE_DELAY=-1\n    quarkus.hibernate-orm.dialect=org.hibernate.dia\n      lect.H2Dialect\n    quarkus.hibernate-orm.database.generation=drop-and-\n      create\n    ```", "```java\n@Entity\n@NamedQuery(name = \"SampleEntity.findAll\",\n        query = \"SELECT f FROM SampleEntity f ORDER BY\n          f.field\",\n        hints = @QueryHint(name =\n          \"org.hibernate.cacheable\",\n        value = \"true\") )\npublic class SampleEntity {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n    @Getter\n    @Setter\n    private String field;\n    @Getter\n    @Setter\n    private int value;\n}\n```", "```java\npackage dev.davivieira.bootstrap.samples;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Inject;\nimport javax.persistence.EntityManager;\nimport javax.transaction.Transactional;\nimport java.util.List;\n@ApplicationScoped\npublic class PersistenceExample {\n    @Inject\n    EntityManager em;\n    /** Code omitted **/\n}\n```", "```java\n@Transactional\npublic String createEntity(SampleObject sampleObject) {\n    SampleEntity sampleEntity = new SampleEntity();\n    sampleEntity.setField(sampleObject.field);\n    sampleEntity.setValue(sampleObject.value);\n    em.persist(sampleEntity);\n    return \"Entity with field \"+sampleObject.field+\"\n      created!\";\n}\n```", "```java\n@Transactional\npublic List<SampleEntity> getAllEntities(){\n    return em.createNamedQuery(\n    \"SampleEntity.findAll\", SampleEntity.class)\n            .getResultList();\n}\n```", "```java\n@Inject\nPersistenceExample persistenceExample;\n```", "```java\n@POST\n@Path(\"/create-entity\")\n@Produces(MediaType.TEXT_PLAIN)\n@Consumes(MediaType.APPLICATION_JSON)\npublic String persistData(@Valid SampleObject sampleObject) {\n    return persistenceExample.createEntity(sampleObject);\n}\n```", "```java\n@GET\n@Path(\"/get-all-entities\")\npublic List<SampleEntity> retrieveAllEntities() {\n    return persistenceExample.getAllEntities();\n}\n```", "```java\n$ curl -s -H \"Content-Type: application/json\"  -d '{\"field\": \"item-a\", \"value\": 10}' localhost:8080/app/create-entity\nEntity with field item-a created!\n$ curl -s -H \"Content-Type: application/json\"  -d '{\"field\": \"item-b\", \"value\": 20}' localhost:8080/app/create-entity\nEntity with field item-b created!\n```", "```java\n$ curl -s localhost:8080/app/get-all-entities | jq\n[\n  {\n    \"field\": \"item-a\",\n    \"value\": 10\n  },\n  {\n    \"field\": \"item-b\",\n    \"value\": 20\n  }\n]\n```", "```java\n    mvn archetype:generate \\\n    -DarchetypeGroupId=de.rieckpil.archetypes  \\\n    -DarchetypeArtifactId=testing-toolkit \\\n    -DarchetypeVersion=1.0.0 \\\n    -DgroupId=dev.davivieira \\\n    -DartifactId=bootstrap \\\n    -Dversion=1.0-SNAPSHOT \\\n    -Dpackage=dev.davivieira.topologyinventory.bootstrap \\\n    bootstrap module. We set artifactId to bootstrap and groupId to dev.davivieira, as this module is part of the same Maven project that holds the modules for other topology and inventory system hexagons. The final high-level structure should be similar to the one shown here:\n    ```", "```java\n    <dependencyManagement>\n      <dependencies>\n        <dependency>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-universe-bom</artifactId>\n          <version>${quarkus.platform.version}</version>\n          <type>pom</type>\n          <scope>import</scope>\n        </dependency>\n    </dependencyManagement>\n    ```", "```java\n    <plugin>\n      <groupId>org.jboss.jandex</groupId>\n      <artifactId>jandex-maven-plugin</artifactId>\n      <version>${jandex.version}</version>\n      <executions>\n        <execution>\n          <id>make-index</id>\n          <goals>\n            <goal>jandex</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n    ```", "```java\n    <build>\n      <plugins>\n        <plugin>\n          <groupId>io.quarkus</groupId>\n          <artifactId>quarkus-maven-plugin</artifactId>\n          <version>${quarkus-plugin.version}</version>\n          <extensions>true</extensions>\n          <executions>\n            <execution>\n              <goals>\n                <goal>build</goal>\n                <goal>generate-code</goal>\n                <goal>generate-code-tests</goal>\n              </goals>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </build>\n    ```", "```java\n    <dependency>\n      <groupId>dev.davivieira</groupId>\n      <artifactId>domain</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>dev.davivieira</groupId>\n      <artifactId>application</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>dev.davivieira</groupId>\n      <artifactId>framework</artifactId>\n    </dependency>\n    ```", "```java\n    module dev.davivieira.bootstrap {\n        requires quarkus.core;\n        requires domain;\n        requires application;\n        requires framework;\n    }\n    ```", "```java\n<quarkus.package.type>uber-jar</quarkus.package.type>\n```", "```java\nmvn clean package\n```", "```java\njava -jar bootstrap/target/bootstrap-1.0-SNAPSHOT-runner.jar\n```"]