["```java\npublic interface AuthenticationManager {\n    Authentication authenticate(Authentication authentication) \n        throws AuthenticationException;\n}\n```", "```java\npublic interface AuthenticationProvider {\n    Authentication authenticate(Authentication authentication)\n        throws AuthenticationException;\n    boolean supports(Class<?> authentication);\n}\n```", "```java\npublic interface UserDetailsService {\n    UserDetails loadUserByUsername(String username) throws           \n        UsernameNotFoundException;\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void confGlobalAuthManager(AuthenticationManagerBuilder auth) throws \n            Exception {\n        auth\n            .inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin@password\").roles(\"ROLE_ADMIN\");\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        auth\n            .inMemoryAuthentication()\n                .withUser(\"admin\").password(\"admin@password\").roles(\"ROLE_ADMIN\");\n    }\n}\n```", "```java\n@Override\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n}\n```", "```java\n@Component\npublic class CustomAuthenticationProvider implements AuthenticationProvider {\n    @Override\n    public Authentication authenticate(Authentication authentication) throws     \n            AuthenticationException {\n      String username = authentication.getName();\n      String password = authentication.getCredentials().toString();\n      if (\"user\".equals(username) && \"password\".equals(password)) {\n        return new UsernamePasswordAuthenticationToken\n          (username, password, Collections.emptyList());\n      } else {\n        throw new BadCredentialsException(\"Authentication failed\");\n      }\n    }\n    @Override\n    public boolean supports(Class<?> aClass) {\n      return aClass.equals(UsernamePasswordAuthenticationToken.class);\n    }\n}\n```", "```java\n@EnableWebSecurity\n@ComponentScan(basePackageClasses = CustomAuthenticationProvider.class)\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    CustomAuthenticationProvider customAuthenticationProvider;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.httpBasic()\n                .and()\n                .authorizeRequests()\n                .antMatchers(\"/**\")\n                .authenticated(); // Use Basic authentication\n    }\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n        // Custom authentication provider - Order 1\n        auth.authenticationProvider(customAuthenticationProvider);\n        // Built-in authentication provider - Order 2\n        auth.inMemoryAuthentication()\n                .withUser(\"admin\")\n                .password(\"{noop}admin@password\")\n                //{noop} makes sure that the password encoder doesn't do anything\n                .roles(\"ADMIN\") // Role of the user\n                .and()\n                .withUser(\"user\")\n                .password(\"{noop}user@password\")\n                .credentialsExpired(true)\n                .accountExpired(true)\n                .accountLocked(true)\n                .roles(\"USER\");\n    }\n}\n```", "```java\n<!-- Spring dependencies -->\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-web</artifactId>\n   <version>5.0.4.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-config</artifactId>\n   <version>5.0.4.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-crypto</artifactId>\n   <version>5.0.4.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-webmvc</artifactId>\n   <version>5.0.5.RELEASE</version>\n</dependency>\n<dependency>\n   <groupId>org.springframework</groupId>\n   <artifactId>spring-jdbc</artifactId>\n   <version>5.0.4.RELEASE</version>\n</dependency>\n<!-- Servlet and JSP related dependencies -->\n<dependency>\n   <groupId>javax.servlet</groupId>\n   <artifactId>javax.servlet-api</artifactId>\n   <version>3.1.0</version>\n   <scope>provided</scope>\n</dependency>\n<dependency>\n   <groupId>javax.servlet.jsp</groupId>\n   <artifactId>javax.servlet.jsp-api</artifactId>\n   <version>2.3.1</version>\n   <scope>provided</scope>\n</dependency>\n<dependency>\n   <groupId>javax.servlet.jsp.jstl</groupId>\n   <artifactId>javax.servlet.jsp.jstl-api</artifactId>\n   <version>1.2.1</version>\n</dependency>\n<dependency>\n   <groupId>taglibs</groupId>\n   <artifactId>standard</artifactId>\n   <version>1.1.2</version>\n</dependency>\n<!-- For datasource configuration -->\n<dependency>\n   <groupId>org.apache.commons</groupId>\n   <artifactId>commons-dbcp2</artifactId>\n   <version>2.1.1</version>\n</dependency>\n<!-- We will be using MySQL as our database server -->\n<dependency>\n   <groupId>mysql</groupId>\n   <artifactId>mysql-connector-java</artifactId>\n   <version>6.0.6</version>\n</dependency>\n```", "```java\n<build>\n   <plugins>\n       <!-- We will be using jetty plugin to test the war file -->\n       <plugin>\n           <groupId>org.eclipse.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>9.4.8.v20171121</version>\n       </plugin>\n   </plugins>\n</build>\n```", "```java\ncreate table users(\n    username varchar(75) not null primary key,\n    password varchar(150) not null,\n    enabled boolean not null\n);\ncreate table authorities (\n    username varchar(75) not null,\n    authority varchar(50) not null,\n    constraint fk_authorities_users foreign key(username) references users(username)\n);\n```", "```java\ninsert into users(username, password, enabled)\n    values('admin', '$2a$04$lcVPCpEk5DOCCAxOMleFcOJvIiYURH01P9rx1Y/pl.wJpkNTfWO6u', true);\ninsert into authorities(username, authority) \n    values('admin','ROLE_ADMIN');\ninsert into users(username, password, enabled)\n    values('user', '$2a$04$nbz5hF5uzq3qsjzY8ZLpnueDAvwj4x0U9SVtLPDROk4vpmuHdvG3a', true);\ninsert into authorities(username,authority) \n    values('user','ROLE_USER');\n```", "```java\nmysql.driver=com.mysql.cj.jdbc.Driver\nmysql.jdbcUrl=jdbc:mysql://localhost:3306/spring_security_schema?useSSL=false\nmysql.username=root\nmysql.password=<your-db-password>\n```", "```java\n@Configuration\n@PropertySource(\"classpath:mysqldb.properties\")\npublic class ApplicationConfig {\n\n   @Autowired\n   private Environment env;\n\n   @Bean\n   public DataSource getDataSource() {\n       BasicDataSource dataSource = new BasicDataSource();\n       dataSource.setDriverClassName(env.getProperty(\"mysql.driver\"));\n       dataSource.setUrl(env.getProperty(\"mysql.jdbcUrl\"));\n       dataSource.setUsername(env.getProperty(\"mysql.username\"));\n       dataSource.setPassword(env.getProperty(\"mysql.password\"));\n       return dataSource;\n   }\n}\n```", "```java\n@Configuration\n@EnableWebMvc\n@ComponentScan(basePackages= {\"com.packtpub.book.ch02.springsecurity.controller\"})\npublic class WebApplicationConfig implements WebMvcConfigurer {\n   @Override\n   public void configureViewResolvers(ViewResolverRegistry registry) {\n       registry.jsp().prefix(\"/WEB-INF/views/\").suffix(\".jsp\");\n   }\n}\n```", "```java\npublic class SpringMvcWebApplicationInitializer\n       extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n   @Override\n   protected Class<?>[] getRootConfigClasses() {\n       return new Class[] { ApplicationConfig.class, SpringSecurityConfig.class };\n   }\n\n   @Override\n   protected Class<?>[] getServletConfigClasses() {\n       return new Class[] { WebApplicationConfig.class };\n   }\n\n   @Override\n   protected String[] getServletMappings() {\n       return new String[] { \"/\" };\n   }\n\n}\n```", "```java\n@Controller\npublic class HomeController {\n\n   @GetMapping(\"/\")\n   public String home(Model model, Principal principal) {\n       if(principal != null)\n           model.addAttribute(\"msg\", \"Welcome \" + principal.getName());\n       return \"home\";\n   }\n}\n```", "```java\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n        pageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html>\n<html>\n<head>\n   <meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n   <title>Spring Security</title>\n</head>\n<body>\n<h1>Spring Security Sample</h1>\n<h2>${msg}</h2>\n</body>\n</html>\n```", "```java\n@EnableWebSecurity\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n   @Autowired\n   private DataSource dataSource;\n   @Override\n   protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n       auth.jdbcAuthentication().dataSource(dataSource)\n               .usersByUsernameQuery(\"select username, password, enabled\"\n                       + \" from users where username = ?\")\n               .authoritiesByUsernameQuery(\"select username, authority \"\n                       + \"from authorities where username = ?\")\n               .passwordEncoder(new BCryptPasswordEncoder());\n   }\n   @Override\n   protected void configure(HttpSecurity http) throws Exception {\n       http.authorizeRequests().anyRequest().hasAnyRole(\"ADMIN\", \"USER\")\n               .and()\n               .httpBasic(); // Use Basic authentication\n   }\n}\n```", "```java\npublic class SecurityWebApplicationInitializer\n       extends AbstractSecurityWebApplicationInitializer {\n\n}\n```", "```java\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n   auth\n.inMemoryAuthentication()\n           .withUser(\"admin\")\n           .password(\"{noop}admin@password\") \n//{noop} makes sure that the password encoder doesn't do anything\n           .roles(\"ADMIN\") // Role of the user\n           .and()\n           .withUser(\"user\")\n           .password(\"{noop}user@password\")\n           .credentialsExpired(true)\n           .accountExpired(true)\n           .accountLocked(true)\n           .roles(\"USER\");\n}\n```", "```java\n@SpringBootApplication\npublic class Run {\n   public static void main(String[] args) {\n       SpringApplication.run(Run.class, args);\n   }\n}\n```", "```java\nspring.mvc.view.prefix: /WEB-INF/views/\nspring.mvc.view.suffix: .jsp\n```", "```java\nmvn spring-boot:run\n```", "```java\nhttp\n    .antMatcher(\"/rest/**\")\n    .httpBasic()\n        .disable()\n    .authorizeRequests()\n        .antMatchers(\"/rest/movie/**\", \"/rest/ticket/**\", \"/index\")\n            .hasRole(\"ROLE_USER\");\n```", "```java\nhttp\n    .authorizeRequests()\n    .regexMatchers(\"^((?!(/rest|/advSearch)).)*$\").hasRole(\"ADMIN\")\n    .regexMatchers(\"^((?!(/rest|/basicSearch)).)*$\").access(\"hasRole(USER)\")\n        .anyRequest()\n    .authenticated()\n    .and()\n    .httpBasic();\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    // ...\n}\n```", "```java\n@RestController\n@RequestMapping(\"/movie\")\npublic class MovieController {\n\n    @GetMapping(\"public\")\n    @Secured(\"ROLE_PUBLIC\")\n    public String publiclyAvailable() {\n        return \"Hello All!\";\n    }\n\n    @GetMapping(\"admin\")\n    @Secured(\"ROLE_ADMIN\")\n    public String adminAccessible() {\n        return \"Hello Admin!\";\n    }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/movie\")\npublic class MovieController {\n\n    @GetMapping(\"public\")\n    @PermitAll\n    public String publiclyAvailable() {\n        return \"Hello All!\";\n    }\n\n    @GetMapping(\"admin\")\n    @RolesAllowed({\"ROLE_ADMIN\"})\n    public String adminAccessible() {\n        return \"Hello Admin!\";\n    }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/movie\")\npublic class MovieController {\n    @GetMapping(\"public\")\n    @PreAuthorize(\"permitAll()\")\n    public String publiclyAvailable() {\n        return \"Hello All!\";\n    }\n    @GetMapping(\"admin\")\n    @PreAuthorize(\"hasAnyAuthority('ROLE_ADMIN')\")\n    public String adminAccessible() {\n        return \"Hello Admin!\";\n    }\n}\n```", "```java\n@PostFilter(\"hasPermission(filterObject, 'READ')\")\nList<Record> findRecords();\n```", "```java\n@PostAuthorize(\"hasPermission(returnObject, 'READ')\")\n```", "```java\n@PreAuthorize(\"hasPermission(#movie, 'WRITE')\")\nMovie save(@Param(\"movie\")Movie movie);\n```"]