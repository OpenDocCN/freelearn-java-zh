- en: Chapter 7. Creating Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, we learned how to bootstrap our application using Activator, develop
    our web application using the Scala and Play framework, and a add reactive microservices
    call using RxScala for data flow computations. We also performed unit test and
    controller testing using the BDD and Play framework. Then, we persisted data into
    MySQL using Slick. Now we will move on with our application.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to write reports with JasperReports. JasperReports
    is a very solid reporting solution for Java, and it can be used in Scala very
    easily. We will create database reports using Jasper, and change our application
    to have such functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding JasperReports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding database reports to our application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing JasperReports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JasperReports ([http://community.jaspersoft.com/project/jasperreports-library](http://community.jaspersoft.com/project/jasperreports-library))
    is a very popular and solid reports solution that can generate reports in several
    formats, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Office format
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to get your reports, you have a visual tool called Jaspersoft Studio,
    in which you can drag and drop elements such as labels, images, data fields, and
    much more. Jasper will store this metadata (the report definition) in an XML file,
    also known as **JRXML**. If you want, you can edit and work with this XML without
    any editor; however, it is way better to use the Jaspersoft Studio tool to gain
    productivity.
  prefs: []
  type: TYPE_NORMAL
- en: Jasper can work with several data sources, such as databases, XML, or even objects
    in memory. For this book, we will use the database datasource to access our MySQL
    database.
  prefs: []
  type: TYPE_NORMAL
- en: JasperReports workflow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JasperReports has the same execution stages, including compiling your reports
    and rendering in a specific format, for example, HTML. The first stage is the
    report design. If you are not using the Jaspersoft Studio visual tool, we assume
    that you have your JRXML file. The next step is to compile JRXML into a Jasper
    file. This compilation phase doesn't need to happen every time; it's needed only
    if you change the JRXML. Otherwise, you can use the same Jasper file. There are
    some strategies to cache the Jasper file, so basically you can do it on the build
    time or you can cache on demand in the application. For our application, we will
    be using the second approach--caching on demand in the application.
  prefs: []
  type: TYPE_NORMAL
- en: The next phase is to render or export. You can export the report to the many
    formats Jasper supports, such as HTML, EXCEL, or PDF, for instance. It's possible
    to use the same report layout and export to as many formats as you like. For our
    application, we will be using the PDF format.
  prefs: []
  type: TYPE_NORMAL
- en: Jasper sessions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A JRXML has sections that are evaluated in different ways and at different
    times. The following diagram shows all the available sessions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Jasper sessions](img/image00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The different sections are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Title**: This is printed just one time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Header**: This is printed at the beginning of all printed pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Column Header**: This is printed at the beginning of each detail column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Detail**: This is where every record read from the data source is printed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Column Footer**: This is printed at the end of each detail column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Page Footer**: This is printed at the end of all printed pages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Summary**: This is printed at the end of the report, and is often used to
    show calculations, totals, and summarizations in general'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jasper is a very flexible report solution that also allows us to run groovy
    scripts inside a Jasper report to do dynamic calculations as well as dynamic layouts.
    This is useful if you do not want to print a page given some condition, or based
    on what you have in the database, or you do not want to show some data.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install Jaspersoft Studio and start creating reports for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Jaspersoft Studio 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this, you will need to have Java 8 installed. If you don't have it, go back
    to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Introduction to FP, Reactive,
    and Scala"), *Introduction to FP, Reactive, and Scala*, and follow the setup instructions.
    Jasper is really great because it works on multiple platforms; however, it works
    better on Windows. We are using Linux, so we will need to deal with fonts. JasperReports
    uses lots of Microsoft's core fonts, such as Arial and Times New Roman. There
    are some options to have the sources on Linux. You can look for a mscorefonts
    installer on Linux or just copy the fonts from Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have a dual boot Linux/Windows installation, you can go to your Windows
    drive at the location `WindowsDrive/Windows/Fonts`. You will need to copy all
    font files to `/usr/share/fonts` on Linux and run `$ sudo fc-cache -fv`. This
    might take some time--for my Windows installation, it was about ~300 MB of fonts.
    You can test whether you have Windows core fonts on Linux. Open the writer and
    check for the fonts. You should see something similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Jaspersoft Studio 6](img/image00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Why is this so important? Because Jasper won't work if you don't have the right
    font in place. It will just throw you random exceptions that will not make sense,
    but it is very likely to be related to missing fonts.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the fonts, we can go ahead and download Jaspersoft Studio 6\. For
    this book, we will be using the 6.2.2 version. You can download it from [http://community.jaspersoft.com/project/jasperreports-library/releases](http://community.jaspersoft.com/project/jasperreports-library/releases).
    If you are on Linux, it's highly recommended to use the `DEB` package; otherwise,
    you will need to install several other dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you download and install Jaspersoft Studio and open the program, you will
    see a UI similar to this one here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Jaspersoft Studio 6](img/image00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully installed Jaspersoft Studio. Now, we will need to configure
    our MySQL data source in order to start creating reports for our application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring MySQL Data Adapter in Jaspersoft Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Jaspersoft Studio 6 and click on **File** | **New** | **Data Adapter Wizard**.
    You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**File name** should be `MYSQL_DATAADAPTER.xml`, and then you can click **Next
    >**.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need to choose the type of database adapter. There are several
    options, such as Cassandra, MongoDB, HBase, JSON file, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We need to pick **Database JDBC Connection** and click **Next >**.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will need to configure the connection details.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The fields should be completed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name: **`MySQL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JDBC Driver: **`com.mysql.jdbc.Driver`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JDBC Url: **`jdbc:mysql://localhost/RWS_DB?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username: **`root`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password: **`This needs be blank, or put the password if you are using one.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also need to configure the driver into the Jaspersoft Studio classpath.
    As we are running the application in the same box, we already have the MySQL driver
    download with SBT on the `~/.ivy2/cache/mysql/mysql-connector-java/jars/mysql-connector-java-6.0.3.jar`
    folder. We will just need to point it out on the third tab, called `Driver Classpath`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now we can test the connection to see if it's all good.
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00303.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Great! Now we have our MySQL Database Adapter configured, and we are ready to
    start creating reports for your application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a product report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create a product report, click on **File** | **New** | **Jasper Report**.
    Then select the **Invoice** template.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a product report](img/image00304.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can click on **Next >** and we will set up the name of the report. The
    file name will be `Products.jrxml`. Click on **Next** **>**. Then, we will need
    to select the **Data Source: ** `MySQL`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a product report](img/image00305.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, you will need to run the `Select name, details, price from Product;` query.
  prefs: []
  type: TYPE_NORMAL
- en: After setting the SQL query, you can click on **Next >**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a product report](img/image00306.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will need to pick the fields that will be used in the report. Select
    all the fields from the left list and move them to the right list. Then click
    on **Next >**. We don't need group ordering for this report, so just skip the
    group and click on **Next >** again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Congratulations! We finished the setup. We can take a look (have a report preview)
    of the report using Jaspersoft Studio. Just click on the new report called **Products.jxml**.
    We will remove all the fields that we don''t need, as well as the logo. Then the
    report will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a product report](img/image00307.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We will change the title to `Products` and drop all other information but the
    **NAME**, **DETAILS**, and **PRICE** headers, which will be retained. We will
    also keep the **$F{NAME}**, **$F{DETAILS}**, and **$F{PRICE}** fields, which will
    come from the MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a product report](img/image00308.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can see the report preview. We will need to click on the bottom tab
    named **Preview**. There are several preview options. We will have to pick **MySQL**
    as a data source from the top of the screen and the exported format; here, we
    are using **Java** to see the UI. You can also pick other formats, such as **PDF,**
    for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will need to create reports for reviews and images.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a review report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create the review report. We will use a very similar process to
    the one that we used for the product report. Let''s get started on creating a
    review report:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **New** | **Jasper Report**. Select the **Invoice** template
    and click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file name will be `Reviews.jrxml`. Then click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **MySQL** from **Data Adapter** and click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Query(Text)** should contain the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then click **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select all the fields: **name**, **author**, and **comment** then click **Next**.>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's skip the **group by** section and click on **Next** and then **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will remove all template labels and fields and just keep the database fields,
    so we should have something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Creating a review report](img/image00309.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have the review report. If you like, you can click on the **Preview**
    tab at the bottom of the screen and select **MySQL** and **Java** to see the report.
    Keep in mind that you will need to have data; otherwise, it will be empty.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an image report
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will create the image report. We will follow a very similar process
    to the one we used for the product and review report. As we have an image URL,
    we will also display the image, so we will need to use a different component.
    Let''s get started on creating an image report:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on **File** | **New** | **Jasper Report**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Invoice** template and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The file name will be `Images.jrxml`. Then click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **MySQL** from **Data Adapter** and click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Query(Text)** should contain the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then click **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select all the fields: **name**, **url **, and then click **Next >**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's skip the group by section and click on **Next >** and then **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will need to remove all labels and fields, as we did for the other reports,
    and just keep the labels and fields from the data adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add an image component called **Image**. You can find it in the
    palette at the right-hand side called **Basic Elements**. Just drag and drop it
    into the detail band, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating an image report](img/image00310.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Select a custom expression and then type `$F{url}`.
  prefs: []
  type: TYPE_NORMAL
- en: That's it! Now that we have the image report with images, it's time to change
    the Play framework application in order to render this report in PDF format over
    there.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating JasperReports with Play framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to create a new folder under `ReactiveWebStore/app` called `reports`.
    Then, we will copy all three new `.jrxml` files from the Jaspersoft Studio to
    this folder and set up the build dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: build.sbt
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we will need to add new dependencies to the `build.sbt` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `build.sbt` file should look like this after adding the Jasper dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: So, basically, we added all JasperReports dependencies and resolvers, which are
    a bunch of remote repositories where SBT can look for the `jar` files. You can
    run the `$ activator compile` command on the console in order to reload the new
    dependencies. After running `compile`, it is important to generate eclipse files
    again, so you will need to run `$ activator eclipse`.
  prefs: []
  type: TYPE_NORMAL
- en: Generic report builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now is the time to code in Scala. We will create a generic report builder in
    Scala. Under `ReactiveWebStore/app/reports`, we will create a new Scala class
    called `ReportBuilder.scala`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `ReportBuilder.scala` file should have the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: First of all, we are setting a temporary directory to store the Jasper compiled
    files in the `generateCompileFileName` function. As you can see, we are storing
    the compiled reports at `/tmp/`. If you don't use Linux, you will need to change
    this path.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we have the compile function, which receives a JRXML report in parameter.
    There is a report cache `Map` object to perform an on-demand cache for the Jasper
    files. This map has the JRXML report, is the key as a Boolean file. This solution
    allows you to compile reports on demand.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have the `toPdf` function that will receive the `jrxml` function
    and compile the report that is needed. This function uses `DriverManager` to get
    the SQL connection in order to send the connection to the Jasper engine. Finally,
    there is the fill, process managed by `JasperFillManager`, which will receive
    the Jasper file and reports parameters (for us, an empty map) and the SQL connection.
  prefs: []
  type: TYPE_NORMAL
- en: After filling the report with data from database, we can export the report in
    PDF using the `JRPdfExporter` command. As this is a generic function, we will
    return a `ByteArrayInputStream`, which is an in-memory stream structure.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the next step is to change our controllers in order to be able to generate
    reports for products, reviews, and images.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report to the product controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to change the product controller in order to expose the new report
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `ProductController.scala` file, after adding the report function, should
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Right here, we have a new function called `report`. We will need to use our
    `ReportBuilder` method passing the `Products.jrxml` as parameter. We are using
    the `Ok.chunked` function in order to be able to stream the report to the browser.
    We are also setting some response headers, such as the content type and the name
    of the file, which will be reported to `products.pdf`.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will apply the same code to the review and image controllers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report to the review controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now is the time to create the report function for the review controller. Here
    we go.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `ReviewController.scala` file, after adding a report function, should
    look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have the same logic here as we have for the product controller. The main
    difference is the `jrxml` file and the filename response header. Now, we can move
    to the last controller--the image controller.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report to the image controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Finally, we will apply the same logic here as we did for the product and review
    controller, but now it is time to change the image controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `ImageController.scala` file, after adding report function, should look
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Alright, we have finished all the controllers. However, we will need to configure
    routes, otherwise, we won't be able to call the controllers--this is the next
    step.
  prefs: []
  type: TYPE_NORMAL
- en: Routes - adding new report routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will need to add the new routes for the reports. For that, we will
    edit the `conf/routes` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We are done with routes now, and we need to change the UI in order to expose
    the new report functionality. We will create a new view containing all reports,
    and, for the sake of ease, we will also add a button for each resource UI (product,
    review, and image).
  prefs: []
  type: TYPE_NORMAL
- en: New centralized reports UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will need to create a new view at `ReactiveWebStore/views/reports_index.scala.html`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `reports_index.scala.html` file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: So here, we will basically list all resources--product, review, and images and
    link the relative controllers, and when the user clicks on the respective link
    a PDF report will be downloaded. Now we need to edit each resource (product, image,
    and review) view in order to add a link for the reports there as well.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report button for each view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's edit the product view first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `product_index.scala.html` file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: As you can see here, we added a new button pointing to the new report function.
    We will need to do the same for the review and the image UI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `review_index.scala.html` file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now we can add the final button to the image view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `image_index.scala.html` file should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All set! Now we can run `$ activator run` and see the new UI and report buttons.
    Go to `http://localhost:9000/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the report button for each view](img/image00311.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go to `http://localhost:9000/reports`, or click on **Reports**, you
    will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the report button for each view](img/image00312.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: That's it! We have all the reports working on the Play framework application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to create custom reports using Jaspersoft Studio
    and JasperReports. Additionally, you also changed your application in order to
    integrate the Play framework and JasperReports.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use the Akka framework. We will continue
    building our application and embrace the actor model for a new killer feature
    for your application.
  prefs: []
  type: TYPE_NORMAL
