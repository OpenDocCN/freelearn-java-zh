- en: Chapter 7. Creating Reports
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 创建报告
- en: Up until now, we learned how to bootstrap our application using Activator, develop
    our web application using the Scala and Play framework, and a add reactive microservices
    call using RxScala for data flow computations. We also performed unit test and
    controller testing using the BDD and Play framework. Then, we persisted data into
    MySQL using Slick. Now we will move on with our application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们学习了如何使用Activator启动我们的应用程序，使用Scala和Play框架开发我们的Web应用程序，并使用RxScala添加反应式微服务调用进行数据流计算。我们还使用BDD和Play框架进行了单元测试和控制器测试。然后，我们使用Slick将数据持久化到MySQL中。现在我们将继续我们的应用程序。
- en: In this chapter, you will learn how to write reports with JasperReports. JasperReports
    is a very solid reporting solution for Java, and it can be used in Scala very
    easily. We will create database reports using Jasper, and change our application
    to have such functionality.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '在本章中，您将学习如何使用JasperReports编写报告。JasperReports是一个针对Java的非常稳定的报告解决方案，并且可以很容易地在Scala中使用。我们将使用Jasper创建数据库报告，并将我们的应用程序更改为具有这种功能。 '
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding JasperReports
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解JasperReports
- en: Adding database reports to our application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数据库报告添加到我们的应用程序中
- en: Introducing JasperReports
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍JasperReports
- en: 'JasperReports ([http://community.jaspersoft.com/project/jasperreports-library](http://community.jaspersoft.com/project/jasperreports-library))
    is a very popular and solid reports solution that can generate reports in several
    formats, such as:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: JasperReports ([http://community.jaspersoft.com/project/jasperreports-library](http://community.jaspersoft.com/project/jasperreports-library))
    是一个非常流行且稳定的报告解决方案，可以生成多种格式的报告，例如：
- en: HTML
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML
- en: Excel
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Excel
- en: Word
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Word
- en: Open Office format
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Open Office格式
- en: PDF
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PDF
- en: In order to get your reports, you have a visual tool called Jaspersoft Studio,
    in which you can drag and drop elements such as labels, images, data fields, and
    much more. Jasper will store this metadata (the report definition) in an XML file,
    also known as **JRXML**. If you want, you can edit and work with this XML without
    any editor; however, it is way better to use the Jaspersoft Studio tool to gain
    productivity.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取您的报告，您有一个名为Jaspersoft Studio的视觉工具，在其中您可以拖放标签、图像、数据字段等元素。Jasper会将这些元数据（报告定义）存储在一个XML文件中，也称为**JRXML**。如果您愿意，您可以在没有任何编辑器的情况下编辑和操作这个XML；然而，使用Jaspersoft
    Studio工具来提高生产力会更好。
- en: Jasper can work with several data sources, such as databases, XML, or even objects
    in memory. For this book, we will use the database datasource to access our MySQL
    database.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Jasper可以与多个数据源一起工作，例如数据库、XML，甚至是内存中的对象。对于这本书，我们将使用数据库数据源来访问我们的MySQL数据库。
- en: JasperReports workflow
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JasperReports工作流程
- en: JasperReports has the same execution stages, including compiling your reports
    and rendering in a specific format, for example, HTML. The first stage is the
    report design. If you are not using the Jaspersoft Studio visual tool, we assume
    that you have your JRXML file. The next step is to compile JRXML into a Jasper
    file. This compilation phase doesn't need to happen every time; it's needed only
    if you change the JRXML. Otherwise, you can use the same Jasper file. There are
    some strategies to cache the Jasper file, so basically you can do it on the build
    time or you can cache on demand in the application. For our application, we will
    be using the second approach--caching on demand in the application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: JasperReports具有相同的执行阶段，包括编译您的报告并在特定格式（例如HTML）中渲染。第一个阶段是报告设计。如果您没有使用Jaspersoft
    Studio视觉工具，我们假设您已经有了您的JRXML文件。下一步是将JRXML编译成Jasper文件。这个编译阶段不需要每次都发生；只有在您更改JRXML时才需要；否则，您可以使用相同的Jasper文件。有一些策略可以缓存Jasper文件，所以基本上您可以在构建时进行缓存，或者您可以在应用程序中按需缓存。对于我们的应用程序，我们将使用第二种方法--在应用程序中按需缓存。
- en: The next phase is to render or export. You can export the report to the many
    formats Jasper supports, such as HTML, EXCEL, or PDF, for instance. It's possible
    to use the same report layout and export to as many formats as you like. For our
    application, we will be using the PDF format.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个阶段是渲染或导出。您可以将报告导出为Jasper支持的多种格式，例如HTML、EXCEL或PDF等。您可以使用相同的报告布局并导出为任何您喜欢的格式。对于我们的应用程序，我们将使用PDF格式。
- en: Jasper sessions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jasper会话
- en: 'A JRXML has sections that are evaluated in different ways and at different
    times. The following diagram shows all the available sessions:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个JRXML有不同方式评估和在不同时间评估的部分。以下图表显示了所有可用的会话：
- en: '![Jasper sessions](img/image00296.jpeg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![Jasper会话](img/image00296.jpeg)'
- en: 'The different sections are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的部分如下：
- en: '**Title**: This is printed just one time'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标题**：这是打印一次'
- en: '**Page Header**: This is printed at the beginning of all printed pages'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面页眉**：这是打印在所有打印页的开头'
- en: '**Column Header**: This is printed at the beginning of each detail column'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列标题**：这是打印在每个详细列的开头'
- en: '**Detail**: This is where every record read from the data source is printed'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**详细**：这是从数据源读取的每个记录打印的地方'
- en: '**Column Footer**: This is printed at the end of each detail column'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列页脚**：这是打印在每个详细列的末尾'
- en: '**Page Footer**: This is printed at the end of all printed pages'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**页面页脚**：这是打印在所有打印页的末尾'
- en: '**Summary**: This is printed at the end of the report, and is often used to
    show calculations, totals, and summarizations in general'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**摘要**：这是打印在报告的末尾，通常用于显示计算、总计和一般总结'
- en: Jasper is a very flexible report solution that also allows us to run groovy
    scripts inside a Jasper report to do dynamic calculations as well as dynamic layouts.
    This is useful if you do not want to print a page given some condition, or based
    on what you have in the database, or you do not want to show some data.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Jasper 是一个非常灵活的报告解决方案，它还允许我们在 Jasper 报告内部运行 Groovy 脚本来进行动态计算以及动态布局。如果您不想根据某些条件打印页面，或者基于数据库中的内容，或者您不想显示某些数据，这将非常有用。
- en: Next, we will install Jaspersoft Studio and start creating reports for our application.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装 Jaspersoft Studio 并开始为我们应用程序创建报告。
- en: Installing Jaspersoft Studio 6
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Jaspersoft Studio 6
- en: For this, you will need to have Java 8 installed. If you don't have it, go back
    to [Chapter 1](part0015.xhtml#aid-E9OE1 "Chapter 1. Introduction to FP, Reactive,
    and Scala"), *Introduction to FP, Reactive, and Scala*, and follow the setup instructions.
    Jasper is really great because it works on multiple platforms; however, it works
    better on Windows. We are using Linux, so we will need to deal with fonts. JasperReports
    uses lots of Microsoft's core fonts, such as Arial and Times New Roman. There
    are some options to have the sources on Linux. You can look for a mscorefonts
    installer on Linux or just copy the fonts from Windows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，您需要安装 Java 8。如果您没有安装，请回到[第 1 章](part0015.xhtml#aid-E9OE1 "第 1 章。FP、响应式和
    Scala 简介")，*FP、响应式和 Scala 简介*，并遵循设置说明。Jasper 真的非常棒，因为它可以在多个平台上运行；然而，它在 Windows
    上运行得更好。我们使用 Linux，因此我们需要处理字体。JasperReports 使用许多微软的核心字体，例如 Arial 和 Times New Roman。Linux
    上有一些选项可以拥有源文件。您可以在 Linux 上查找 mscorefonts 安装程序，或者只需从 Windows 复制字体。
- en: 'If you have a dual boot Linux/Windows installation, you can go to your Windows
    drive at the location `WindowsDrive/Windows/Fonts`. You will need to copy all
    font files to `/usr/share/fonts` on Linux and run `$ sudo fc-cache -fv`. This
    might take some time--for my Windows installation, it was about ~300 MB of fonts.
    You can test whether you have Windows core fonts on Linux. Open the writer and
    check for the fonts. You should see something similar to this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有双启动 Linux/Windows 安装，您可以前往 Windows 驱动器上的位置 `WindowsDrive/Windows/Fonts`。您需要将所有字体文件复制到
    Linux 上的 `/usr/share/fonts` 并运行 `$ sudo fc-cache -fv`。这可能需要一些时间——对于我的 Windows
    安装，大约是 ~300 MB 的字体。您可以在 Linux 上测试是否拥有 Windows 核心字体。打开 writer 并检查字体。您应该看到类似以下的内容：
- en: '![Installing Jaspersoft Studio 6](img/image00297.jpeg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Jaspersoft Studio 6](img/image00297.jpeg)'
- en: Why is this so important? Because Jasper won't work if you don't have the right
    font in place. It will just throw you random exceptions that will not make sense,
    but it is very likely to be related to missing fonts.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这如此重要？因为如果您没有放置正确的字体，Jasper 将无法工作。它将抛出一些随机异常，这些异常没有意义，但很可能与缺少字体有关。
- en: Once we have the fonts, we can go ahead and download Jaspersoft Studio 6\. For
    this book, we will be using the 6.2.2 version. You can download it from [http://community.jaspersoft.com/project/jasperreports-library/releases](http://community.jaspersoft.com/project/jasperreports-library/releases).
    If you are on Linux, it's highly recommended to use the `DEB` package; otherwise,
    you will need to install several other dependencies.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了字体，我们就可以继续下载 Jaspersoft Studio 6。对于这本书，我们将使用 6.2.2 版本。您可以从 [http://community.jaspersoft.com/project/jasperreports-library/releases](http://community.jaspersoft.com/project/jasperreports-library/releases)
    下载它。如果您在 Linux 上，强烈建议使用 `DEB` 软件包；否则，您将需要安装几个其他依赖项。
- en: 'Once you download and install Jaspersoft Studio and open the program, you will
    see a UI similar to this one here:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您下载并安装了 Jaspersoft Studio 并打开程序，您将看到与此类似的用户界面：
- en: '![Installing Jaspersoft Studio 6](img/image00298.jpeg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Jaspersoft Studio 6](img/image00298.jpeg)'
- en: We have successfully installed Jaspersoft Studio. Now, we will need to configure
    our MySQL data source in order to start creating reports for our application.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经成功安装了 Jaspersoft Studio。现在，我们需要配置我们的 MySQL 数据源，以便开始为我们的应用程序创建报告。
- en: Configuring MySQL Data Adapter in Jaspersoft Studio
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Jaspersoft Studio 中配置 MySQL 数据适配器
- en: 'Open Jaspersoft Studio 6 and click on **File** | **New** | **Data Adapter Wizard**.
    You will see the following screen:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 Jaspersoft Studio 6 并点击**文件** | **新建** | **数据适配器向导**。您将看到以下屏幕：
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00299.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jaspersoft Studio 中配置 MySQL 数据适配器](img/image00299.jpeg)'
- en: '**File name** should be `MYSQL_DATAADAPTER.xml`, and then you can click **Next
    >**.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**文件名**应为 `MYSQL_DATAADAPTER.xml`，然后您可以点击**下一步 >**。'
- en: Next, we will need to choose the type of database adapter. There are several
    options, such as Cassandra, MongoDB, HBase, JSON file, and so on.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要选择数据库适配器的类型。有几个选项，例如 Cassandra、MongoDB、HBase、JSON 文件等。
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00300.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jaspersoft Studio 中配置 MySQL 数据适配器](img/image00300.jpeg)'
- en: We need to pick **Database JDBC Connection** and click **Next >**.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要选择**数据库 JDBC 连接**并点击**下一步 >**。
- en: Now, we will need to configure the connection details.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要配置连接详情。
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00301.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jaspersoft Studio 中配置 MySQL 数据适配器](img/image00301.jpeg)'
- en: 'The fields should be completed as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 字段应填写如下：
- en: '**Name: **`MySQL`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称：**`MySQL`'
- en: '**JDBC Driver: **`com.mysql.jdbc.Driver`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBC 驱动程序：**`com.mysql.jdbc.Driver`'
- en: '**JDBC Url: **`jdbc:mysql://localhost/RWS_DB?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JDBC URL：**`jdbc:mysql://localhost/RWS_DB?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC`'
- en: '**Username: **`root`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户名：**`root`'
- en: '**Password: **`This needs be blank, or put the password if you are using one.`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码：**`此字段需要为空，或者如果您正在使用密码，请输入密码。`'
- en: We will also need to configure the driver into the Jaspersoft Studio classpath.
    As we are running the application in the same box, we already have the MySQL driver
    download with SBT on the `~/.ivy2/cache/mysql/mysql-connector-java/jars/mysql-connector-java-6.0.3.jar`
    folder. We will just need to point it out on the third tab, called `Driver Classpath`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将驱动程序配置到 Jaspersoft Studio 的类路径中。由于我们在同一个盒子上运行应用程序，我们已经在 `~/.ivy2/cache/mysql/mysql-connector-java/jars/mysql-connector-java-6.0.3.jar`
    文件夹中下载了 MySQL 驱动程序，使用 SBT。我们只需要在第三个标签页上指出它，该标签页称为 `Driver Classpath`。
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00302.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jaspersoft Studio 中配置 MySQL 数据适配器](img/image00302.jpeg)'
- en: Now we can test the connection to see if it's all good.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以测试连接，看看是否一切正常。
- en: '![Configuring MySQL Data Adapter in Jaspersoft Studio](img/image00303.jpeg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![在 Jaspersoft Studio 中配置 MySQL 数据适配器](img/image00303.jpeg)'
- en: Great! Now we have our MySQL Database Adapter configured, and we are ready to
    start creating reports for your application.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！现在我们已经配置好了我们的 MySQL 数据库适配器，准备开始为您的应用程序创建报告。
- en: Creating a product report
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建产品报告
- en: To create a product report, click on **File** | **New** | **Jasper Report**.
    Then select the **Invoice** template.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建产品报告，请点击**文件** | **新建** | **Jasper 报告**。然后选择**发票**模板。
- en: '![Creating a product report](img/image00304.jpeg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![创建产品报告](img/image00304.jpeg)'
- en: Now you can click on **Next >** and we will set up the name of the report. The
    file name will be `Products.jrxml`. Click on **Next** **>**. Then, we will need
    to select the **Data Source: ** `MySQL`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以点击**下一步 >**，我们将设置报告的名称。文件名将是 `Products.jrxml`。点击**下一步** **>**。然后，我们需要选择**数据源：**
    `MySQL`。
- en: '![Creating a product report](img/image00305.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![创建产品报告](img/image00305.jpeg)'
- en: Now, you will need to run the `Select name, details, price from Product;` query.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要运行 `Select name, details, price from Product;` 查询。
- en: After setting the SQL query, you can click on **Next >**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置完 SQL 查询后，您可以点击**下一步 >**。
- en: '![Creating a product report](img/image00306.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![创建产品报告](img/image00306.jpeg)'
- en: Next, you will need to pick the fields that will be used in the report. Select
    all the fields from the left list and move them to the right list. Then click
    on **Next >**. We don't need group ordering for this report, so just skip the
    group and click on **Next >** again.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要选择将在报告中使用的字段。从左侧列表中选择所有字段并将它们移动到右侧列表。然后点击**下一步 >**。对于这个报告，我们不需要分组排序，所以只需跳过分组并再次点击**下一步
    >**。
- en: 'Congratulations! We finished the setup. We can take a look (have a report preview)
    of the report using Jaspersoft Studio. Just click on the new report called **Products.jxml**.
    We will remove all the fields that we don''t need, as well as the logo. Then the
    report will look like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经完成了设置。我们可以使用 Jaspersoft Studio 预览报告。只需点击名为 **Products.jxml** 的新报告。我们将移除所有不需要的字段以及标志。然后报告将看起来像这样：
- en: '![Creating a product report](img/image00307.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![创建产品报告](img/image00307.jpeg)'
- en: We will change the title to `Products` and drop all other information but the
    **NAME**, **DETAILS**, and **PRICE** headers, which will be retained. We will
    also keep the **$F{NAME}**, **$F{DETAILS}**, and **$F{PRICE}** fields, which will
    come from the MySQL database.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改标题为 `Products` 并删除所有其他信息，但保留 **名称**、**详情**和**价格**标题，这些将被保留。我们还将保留来自 MySQL
    数据库的 **$F{NAME}**、**$F{DETAILS}** 和 **$F{PRICE}** 字段。
- en: '![Creating a product report](img/image00308.jpeg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![创建产品报告](img/image00308.jpeg)'
- en: Now, we can see the report preview. We will need to click on the bottom tab
    named **Preview**. There are several preview options. We will have to pick **MySQL**
    as a data source from the top of the screen and the exported format; here, we
    are using **Java** to see the UI. You can also pick other formats, such as **PDF,**
    for instance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到报告预览。我们需要点击底部名为 **预览** 的选项卡。有几个预览选项。我们必须从屏幕顶部选择 **MySQL** 作为数据源以及导出格式；在这里，我们使用
    **Java** 来查看 UI。您也可以选择其他格式，例如 **PDF**。
- en: Next, we will need to create reports for reviews and images.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建审查和图像的报告。
- en: Creating a review report
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建审查报告
- en: 'Now, we will create the review report. We will use a very similar process to
    the one that we used for the product report. Let''s get started on creating a
    review report:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建审查报告。我们将使用与产品报告非常相似的过程。让我们开始创建审查报告：
- en: Click on **File** | **New** | **Jasper Report**. Select the **Invoice** template
    and click on **Next >**.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件** | **新建** | **Jasper 报告**。选择 **发票** 模板并点击 **下一步 >**。
- en: The file name will be `Reviews.jrxml`. Then click on **Next >**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件名将是 `Reviews.jrxml`。然后点击 **下一步 >**。
- en: Choose **MySQL** from **Data Adapter** and click on **Next >**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **数据适配器** 中选择 **MySQL** 并点击 **下一步 >**。
- en: '**Query(Text)** should contain the following code snippet:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查询（文本）** 应包含以下代码片段：'
- en: '[PRE0]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then click **Next >**.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击 **下一步 >**。
- en: 'Select all the fields: **name**, **author**, and **comment** then click **Next**.>'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有字段：**名称**、**作者**和**评论**，然后点击 **下一步**。>
- en: Let's skip the **group by** section and click on **Next** and then **Finish**.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们跳过 **分组** 部分，点击 **下一步** 然后点击 **完成**。
- en: 'We will remove all template labels and fields and just keep the database fields,
    so we should have something like this:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将移除所有模板标签和字段，只保留数据库字段，所以我们应该有类似这样的内容：
- en: '![Creating a review report](img/image00309.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![创建审查报告](img/image00309.jpeg)'
- en: That's it! We have the review report. If you like, you can click on the **Preview**
    tab at the bottom of the screen and select **MySQL** and **Java** to see the report.
    Keep in mind that you will need to have data; otherwise, it will be empty.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经有了审查报告。如果您愿意，可以点击屏幕底部的 **预览** 选项卡，并选择 **MySQL** 和 **Java** 来查看报告。请记住，您将需要数据；否则，它将是空的。
- en: Creating an image report
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图像报告
- en: 'Now we will create the image report. We will follow a very similar process
    to the one we used for the product and review report. As we have an image URL,
    we will also display the image, so we will need to use a different component.
    Let''s get started on creating an image report:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建图像报告。我们将遵循与产品报告和审查报告非常相似的过程。由于我们有图像 URL，我们还将显示图像，因此我们需要使用不同的组件。让我们开始创建图像报告：
- en: Click on **File** | **New** | **Jasper Report**.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **文件** | **新建** | **Jasper 报告**。
- en: Select the **Invoice** template and click on **Next**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **发票** 模板并点击 **下一步**。
- en: The file name will be `Images.jrxml`. Then click on **Next**.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 文件名将是 `Images.jrxml`。然后点击 **下一步**。
- en: Choose **MySQL** from **Data Adapter** and click on **Next >**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **数据适配器** 中选择 **MySQL** 并点击 **下一步 >**。
- en: '**Query(Text)** should contain the following code snippet:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**查询（文本）** 应包含以下代码片段：'
- en: '[PRE1]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then click **Next >**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后点击 **下一步 >**。
- en: 'Select all the fields: **name**, **url **, and then click **Next >**.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有字段：**名称**、**url**，然后点击 **下一步 >**。
- en: Let's skip the group by section and click on **Next >** and then **Finish**.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们跳过分组部分，点击 **下一步 >** 然后点击 **完成**。
- en: Now we will need to remove all labels and fields, as we did for the other reports,
    and just keep the labels and fields from the data adapter.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要移除所有标签和字段，就像我们对其他报告所做的那样，只保留数据适配器中的标签和字段。
- en: 'We need to add an image component called **Image**. You can find it in the
    palette at the right-hand side called **Basic Elements**. Just drag and drop it
    into the detail band, as shown in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个名为 **Image** 的图像组件。你可以在右侧的 **基本元素** 面板中找到它。只需将其拖放到详细带中，如图所示：
- en: '![Creating an image report](img/image00310.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![创建图像报告](img/image00310.jpeg)'
- en: Select a custom expression and then type `$F{url}`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个自定义表达式，然后输入 `$F{url}`。
- en: That's it! Now that we have the image report with images, it's time to change
    the Play framework application in order to render this report in PDF format over
    there.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！现在我们已经有了包含图像的图像报告，是时候更改 Play 框架应用程序，以便在那里以 PDF 格式渲染此报告了。
- en: Integrating JasperReports with Play framework
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 JasperReports 集成到 Play 框架中
- en: We will need to create a new folder under `ReactiveWebStore/app` called `reports`.
    Then, we will copy all three new `.jrxml` files from the Jaspersoft Studio to
    this folder and set up the build dependencies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `ReactiveWebStore/app` 下创建一个新的文件夹，名为 `reports`。然后，我们将从 Jaspersoft Studio
    复制所有三个新的 `.jrxml` 文件到这个文件夹，并设置构建依赖项。
- en: build.sbt
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: build.sbt
- en: First of all, we will need to add new dependencies to the `build.sbt` file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要在 `build.sbt` 文件中添加新的依赖项。
- en: 'Your `build.sbt` file should look like this after adding the Jasper dependencies:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加 Jasper 依赖项后，你的 `build.sbt` 文件应该看起来像这样：
- en: '[PRE2]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: So, basically, we added all JasperReports dependencies and resolvers, which are
    a bunch of remote repositories where SBT can look for the `jar` files. You can
    run the `$ activator compile` command on the console in order to reload the new
    dependencies. After running `compile`, it is important to generate eclipse files
    again, so you will need to run `$ activator eclipse`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，基本上，我们添加了所有的 JasperReports 依赖和解析器，这些解析器是一系列远程仓库，SBT 可以在其中查找 `jar` 文件。你可以在控制台运行
    `$ activator compile` 命令来重新加载新的依赖项。运行 `compile` 后，再次生成 eclipse 文件是很重要的，所以你需要运行
    `$ activator eclipse`。
- en: Generic report builder
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通用报告生成器
- en: Now is the time to code in Scala. We will create a generic report builder in
    Scala. Under `ReactiveWebStore/app/reports`, we will create a new Scala class
    called `ReportBuilder.scala`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候用 Scala 编码了。我们将在 Scala 中创建一个通用报告生成器。在 `ReactiveWebStore/app/reports` 下，我们将创建一个新的
    Scala 类，名为 `ReportBuilder.scala`。
- en: 'Your `ReportBuilder.scala` file should have the following code:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `ReportBuilder.scala` 文件应该包含以下代码：
- en: '[PRE3]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: First of all, we are setting a temporary directory to store the Jasper compiled
    files in the `generateCompileFileName` function. As you can see, we are storing
    the compiled reports at `/tmp/`. If you don't use Linux, you will need to change
    this path.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在 `generateCompileFileName` 函数中设置一个临时目录来存储 Jasper 编译文件。正如你所见，我们将编译后的报告存储在
    `/tmp/`。如果你不使用 Linux，你需要更改此路径。
- en: Next, we have the compile function, which receives a JRXML report in parameter.
    There is a report cache `Map` object to perform an on-demand cache for the Jasper
    files. This map has the JRXML report, is the key as a Boolean file. This solution
    allows you to compile reports on demand.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有编译函数，它接收一个作为参数的 JRXML 报告。有一个报告缓存 `Map` 对象，用于对 Jasper 文件进行按需缓存。这个映射以 JRXML
    报告作为键，布尔文件作为值。这个解决方案允许你按需编译报告。
- en: Finally, we have the `toPdf` function that will receive the `jrxml` function
    and compile the report that is needed. This function uses `DriverManager` to get
    the SQL connection in order to send the connection to the Jasper engine. Finally,
    there is the fill, process managed by `JasperFillManager`, which will receive
    the Jasper file and reports parameters (for us, an empty map) and the SQL connection.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有 `toPdf` 函数，它将接收 `jrxml` 函数并编译所需的报告。此函数使用 `DriverManager` 获取 SQL 连接，以便将连接发送到
    Jasper 引擎。最后，有由 `JasperFillManager` 管理的填充过程，它将接收 Jasper 文件和报告参数（对我们来说是一个空映射）以及
    SQL 连接。
- en: After filling the report with data from database, we can export the report in
    PDF using the `JRPdfExporter` command. As this is a generic function, we will
    return a `ByteArrayInputStream`, which is an in-memory stream structure.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在用数据库中的数据填充报告后，我们可以使用 `JRPdfExporter` 命令将报告导出为 PDF。由于这是一个通用函数，我们将返回一个 `ByteArrayInputStream`，这是一个内存中的流结构。
- en: Now, the next step is to change our controllers in order to be able to generate
    reports for products, reviews, and images.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，下一步是更改我们的控制器，以便能够为产品、评论和图像生成报告。
- en: Adding the report to the product controller
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将报告添加到产品控制器
- en: We will need to change the product controller in order to expose the new report
    function.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要更改产品控制器以公开新的报告功能。
- en: 'Your `ProductController.scala` file, after adding the report function, should
    look something like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加报告功能后，您的 `ProductController.scala` 文件应该看起来像这样：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Right here, we have a new function called `report`. We will need to use our
    `ReportBuilder` method passing the `Products.jrxml` as parameter. We are using
    the `Ok.chunked` function in order to be able to stream the report to the browser.
    We are also setting some response headers, such as the content type and the name
    of the file, which will be reported to `products.pdf`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里，我们有一个名为 `report` 的新函数。我们需要使用我们的 `ReportBuilder` 方法，并将 `Products.jrxml`
    作为参数传递。我们使用 `Ok.chunked` 函数以便能够将报告流式传输到浏览器。我们还设置了一些响应头，例如内容类型和文件名，这些将被报告为 `products.pdf`。
- en: Now, we will apply the same code to the review and image controllers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将将相同的代码应用到评论和图片控制器上。
- en: Adding the report to the review controller
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将报告添加到评论控制器
- en: Now is the time to create the report function for the review controller. Here
    we go.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为评论控制器创建报告函数了。让我们开始吧。
- en: 'Your `ReviewController.scala` file, after adding a report function, should
    look something like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加报告功能后，您的 `ReviewController.scala` 文件应该看起来像这样：
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We have the same logic here as we have for the product controller. The main
    difference is the `jrxml` file and the filename response header. Now, we can move
    to the last controller--the image controller.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里与产品控制器相同的逻辑。主要区别是 `jrxml` 文件和文件名响应头。现在，我们可以移动到最后一个控制器--图片控制器。
- en: Adding the report to the image controller
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将报告添加到图片控制器
- en: Finally, we will apply the same logic here as we did for the product and review
    controller, but now it is time to change the image controller.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将像对产品控制器和评论控制器所做的那样应用相同的逻辑，但现在是我们更改图片控制器的时候了。
- en: 'Your `ImageController.scala` file, after adding report function, should look
    something like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加报告功能后，您的 `ImageController.scala` 文件应该看起来像这样：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Alright, we have finished all the controllers. However, we will need to configure
    routes, otherwise, we won't be able to call the controllers--this is the next
    step.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经完成了所有的控制器。然而，我们还需要配置路由，否则我们无法调用控制器--这是下一步。
- en: Routes - adding new report routes
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 路由 - 添加新的报告路由
- en: 'Now, we will need to add the new routes for the reports. For that, we will
    edit the `conf/routes` file, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加报告的新路由。为此，我们将编辑 `conf/routes` 文件，如下所示：
- en: '[PRE7]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: We are done with routes now, and we need to change the UI in order to expose
    the new report functionality. We will create a new view containing all reports,
    and, for the sake of ease, we will also add a button for each resource UI (product,
    review, and image).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了路由，我们需要更改 UI 以便公开新的报告功能。我们将创建一个包含所有报告的新视图，并且为了方便起见，我们还将为每个资源 UI（产品、评论和图片）添加一个按钮。
- en: New centralized reports UI
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新的集中式报告 UI
- en: We will need to create a new view at `ReactiveWebStore/views/reports_index.scala.html`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `ReactiveWebStore/views/reports_index.scala.html` 创建一个新的视图。
- en: 'Your `reports_index.scala.html` file should look something like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `reports_index.scala.html` 文件应该看起来像这样：
- en: '[PRE8]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: So here, we will basically list all resources--product, review, and images and
    link the relative controllers, and when the user clicks on the respective link
    a PDF report will be downloaded. Now we need to edit each resource (product, image,
    and review) view in order to add a link for the reports there as well.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这里我们将基本上列出所有资源--产品、评论和图片，并将相关控制器链接起来，当用户点击相应的链接时，将下载 PDF 报告。现在我们需要编辑每个资源（产品、图片和评论）视图，以便在那里添加报告链接。
- en: Adding the report button for each view
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为每个视图添加报告按钮
- en: Let's edit the product view first.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先编辑产品视图。
- en: 'Your `product_index.scala.html` file should look something like this:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `product_index.scala.html` 文件应该看起来像这样：
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As you can see here, we added a new button pointing to the new report function.
    We will need to do the same for the review and the image UI.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们添加了一个指向新报告函数的新按钮。我们还需要为评论和图片 UI 执行相同的操作。
- en: 'Your `review_index.scala.html` file should look something like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `review_index.scala.html` 文件应该看起来像这样：
- en: '[PRE10]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now we can add the final button to the image view.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向图片视图添加最终的按钮。
- en: 'Your `image_index.scala.html` file should look something like this:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您的 `image_index.scala.html` 文件应该看起来像这样：
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All set! Now we can run `$ activator run` and see the new UI and report buttons.
    Go to `http://localhost:9000/`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪！现在我们可以运行 `$ activator run` 来查看新的用户界面和报告按钮。访问 `http://localhost:9000/`：
- en: '![Adding the report button for each view](img/image00311.jpeg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![为每个视图添加报告按钮](img/image00311.jpeg)'
- en: 'If you go to `http://localhost:9000/reports`, or click on **Reports**, you
    will see the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你访问 `http://localhost:9000/reports` 或点击 **报告**，你会看到以下内容：
- en: '![Adding the report button for each view](img/image00312.jpeg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![为每个视图添加报告按钮](img/image00312.jpeg)'
- en: That's it! We have all the reports working on the Play framework application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们在 Play 框架应用程序上已经使所有报告都正常工作。
- en: Summary
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create custom reports using Jaspersoft Studio
    and JasperReports. Additionally, you also changed your application in order to
    integrate the Play framework and JasperReports.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Jaspersoft Studio 和 JasperReports 创建自定义报告。此外，你还修改了应用程序以集成 Play
    框架和 JasperReports。
- en: In the next chapter, you will learn how to use the Akka framework. We will continue
    building our application and embrace the actor model for a new killer feature
    for your application.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 Akka 框架。我们将继续构建我们的应用程序，并采用演员模型为你的应用程序带来一个全新的杀手级特性。
