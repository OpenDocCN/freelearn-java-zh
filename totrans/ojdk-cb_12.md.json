["```java\n    sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/\n\n    ```", "```java\n    hg checkout http://hg.openjdk.java.net/jdk9/jdk9/\n    bash ./get_source.sh\n\n    ```", "```java\n    bash ./configure –-with-boot-jdk=path/to/jdk8\n\n    ```", "```java\n    make all 2>&1\n\n    ```", "```java\n    build/macosx-x86_64-normal-server-release/images/j2sdk-image\n\n    ```", "```java\n    name: dxsdk_sum2004.exe\n    size: 239008008 bytes\n    sha1sum: 73d875b97591f48707c38ec0dbc63982ff45c661\n\n    ```", "```java\n    hg clone http://hg.openjdk.java.net/jdk9/jdk9/\n\n    ```", "```java\n    mingw-get install --reinstall --recursive msys-core=1.0.17-1\n\n    ```", "```java\n    mingw-get install msys-zip\n    mingw-get install msys-unzip\n    mingw-get install msys-diffutils\n    mingw-get install msys-file\n    mingw-get install msys-mktemp\n    mingw-get install msys-tar\n    mingw-get install msys-xargs\n    mingw-get install msys-findutils\n    mingw-get install msys-make\n\n    ```", "```java\n    bash ./get_source.sh\n\n    ```", "```java\n    export PATH=/c/jdk8/bin:$PATH\n\n    ```", "```java\n    chmod -R 777 .\n\n    ```", "```java\n    ./configure --with-freetype=/c/freetype\n\n    ```", "```java\n    make | tee make.log\n\n    ```", "```java\n DatagramSocket socket = new DatagramSocket(4445);\n System.out.println(socket.supportedOptions());\n\n```", "```java\n[SO_SNDBUF, SO_RCVBUF, SO_REUSEADDR, IP_TOS]\n\n```", "```java\n    chmod 755 ./get_source.sh && ./get_source.sh\n    cd jigsaw\n\n    ```", "```java\n    chmod 755 ./configure.sh && ./configure.sh\n\n    ```", "```java\n    Make\n\n    ```", "```java\n    -------------------------\n    Finished building OpenJDK for target 'default'\n\n    ```", "```java\n    chmod 755 ./get_source.sh && ./get_source.sh\n    cd jigsaw\n\n    ```", "```java\n    chmod 755 ./configure && ./configure\n\n    ```", "```java\n    make all\n    -------------------------\n    Finished building OpenJDK for target 'default'\n\n    ```", "```java\n    package me.dsmd.jigsawsample\n    import me.dsmd.helloworldstrings.Strings\n    public class Main{\n      public void main(String [] args){\n        System.out.println(Strings.helloworld1());\n      }\n    }\n    ```", "```java\n    package me.dsmd.helloworldstrings\n    public class Strings{\n      public String helloworld1(){\n        return \"Hello World\";\n      }\n    }\n    ```", "```java\n    module  me.dsmd.jigsawsample @ 1.0{\n     requires me.dsmd.helloworldstrings\n     class me.dsmd.jigsawsample.Main\n    }\n    module  me.dsmd.helloworldstrings @ 0.1 {\n     class me.dsmd.helloworldstrings.Strings\n    }\n\n    ```", "```java\n    .\n    ├── modules\n    └── src\n     ├── me.dsmd.helloworldstrings\n     │   ├── me\n     │   │   └── dsmd\n     │   │       └── helloworldstrings\n     │   │           └── Strings.java\n     │   └── module-info.java\n     └── me.dsmd.jigsawsample\n     ├── me\n     │   └── dsmd\n     │       └── jigsawsample\n     │           └── Main.java\n     └── module-info.java\n\n    ```", "```java\n    javac -verbose -d modules -modulepath modules -sourcepath \\ `find src -name '*.java'`\n\n    ```", "```java\n    $ jmod -L lib1 create \n\n    ```", "```java\n    $ jmod -L lib1 install modules module1 module2\n\n    ```", "```java\nrm -rf lib1/module1\n\n```", "```java\njava -L lib1 -m module1\n\n```", "```java\njpkg -m modules/module1 jmod module1\n\n```", "```java\n    hg clone http://hg.openjdk.java.net/graal/graal\n    cd graal\n    export EXTRA_JAVA_HOMES=/usr/lib/jvm/java-1.7.0-openjdk\n    ./mx.sh build\n\n    ```", "```java\n    ./mx.sh build\n    [1] /usr/lib/jvm/java-1.7.0-openjdk\n    [2] /usr/lib/jvm/java-1.6.0-openjdk-amd64\n    [3] /usr/lib/jvm/java-6-oracle\n    [4] /usr/lib/jvm/jdk1.9.0\n    [5] /usr/lib/jvm/java-7-oracle\n    [6] /usr/lib/jvm/java-8-oracle\n    [7] /usr/lib/jvm/java-6-openjdk-amd64\n    [8] /usr/lib/jvm/java-7-openjdk-amd64\n    [9] /usr/lib/jvm/java-1.7.0-openjdk-amd64\n    [10] <other>\n\n    ```", "```java\n    Please select the VM to be executed from the following:\n    [1] server - Normal compilation is performed with a tiered system (C1\n     + C2), Truffle compilation is performed with Graal. Use this for\n     optimal Truffle performance.\n    [2] graal - Normal compilation is performed with a tiered system (C1 +\n     Graal), Truffle compilation is performed with Graal.\n\n    ```", "```java\nmake\nBuilding OpenJDK for target 'default' in configuration 'linux-x86_64-normal-server-release'\n\n## Starting langtools\n## Finished langtools (build time 00:00:03)\n\n## Starting hotspot\n## Finished hotspot (build time 00:00:01)\n\n## Starting corba\n## Finished corba (build time 00:00:00)\n\n## Starting jaxp\n## Finished jaxp (build time 00:00:01)\n\n## Starting jaxws\n## Finished jaxws (build time 00:00:02)\n\n## Starting jdk\n## Finished jdk (build time 00:00:21)\n\n----- Build times -------\nStart 2014-07-06 00:17:24\nEnd   2014-07-06 00:17:52\n00:00:00 corba\n00:00:01 hotspot\n00:00:01 jaxp\n00:00:02 jaxws\n00:00:21 jdk\n00:00:03 langtools\n00:00:28 TOTAL\n-------------------------\nFinished building OpenJDK for target 'default'\n\n```", "```java\n    chmod 755 configure && ./configure\n\n    ```", "```java\n    chmod 755 get_source.sh && ./get_source.sh\n\n    ```", "```java\n    make\n\n    ```", "```java\n    export JAVA_HOME=<path-to-sumatra-dev>/build/linux-<your-arch>-normal-server-release/images/j2sdk-image\n\n    ```", "```java\n    /mx.sh --vmbuild product --vm server build\n\n    ```", "```java\npackage simple;\n\nimport java.util.stream.IntStream;\n\npublic class Simple {\n\n    public static void main(String[] args) {\n        final int length = 8;\n        int[] ina = new int[length];\n        int[] inb = new int[length];\n        int[] out = new int[length];\n\n        // Initialize the input arrays - this is offloadable\n        IntStream.range(0, length).parallel().forEach(p -> {\n            ina[p] = 1;\n            inb[p] = 2;\n        });\n\n        // Sum each pair of elements into out[] - this is offloadable\n        IntStream.range(0, length).parallel().forEach(p -> {\n            out[p] = ina[p] + inb[p];\n        });\n\n        // Print results - this is not offloadable since it is\n        // calling native code etc.\n        IntStream.range(0, length).forEach(p -> {\n            System.out.println(out[p] + \", \" + ina[p] + \", \" + inb[p]);\n        });\n    }\n}\n```", "```java\n    export JAVA_HOME=/path/to/graal/jdk1.8.0-internal/product/\n\n    ```", "```java\n    git clone https://github.com/HSAFoundation/Okra-Interface-to-HSA-Device.git\n\n    ```", "```java\n    export PATH=$PATH:/path/to/okra/dist/bin\n    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/path/to/okra/dist/bin\n\n    ```", "```java\n    $JAVA_HOME/bin/java -server -esa -XX:+TraceGPUInteraction -Dcom.amd.sumatra.offload.immediate=true -G:Log=CodeGen  simple.Simple\n    ...\n    [HSAIL] library is libokra_x86_64.so\n    [GPU] registered initialization of Okra (total initialized: 2)\n    [CUDA] Ptx::get_execute_kernel_from_vm_address\n    [thread:1] scope:\n     [thread:1] scope: GraalCompiler\n     [thread:1] scope: GraalCompiler.CodeGen\n     Nothing to do here\n     Nothing to do here\n     Nothing to do here\n     version 0:95: $full : $large; \n    // static method HotSpotMethod<Simple.lambda$main$0(int[], int[], int)> \n    kernel &run ( \n     align 8 kernarg_u64 %_arg0,\n     align 8 kernarg_u64 %_arg1\n     ) {\n     ld_kernarg_u64  $d0, [%_arg0];\n     ld_kernarg_u64  $d1, [%_arg1];\n     workitemabsid_u32 $s0, 0;\n\n    @L0:\n     cmp_eq_b1_u64 $c0, $d1, 0; // null test\n     cbr $c0, @L1;\n    @L2:\n     ld_global_s32 $s1, [$d1 + 12];\n     cmp_ge_b1_u32 $c0, $s0, $s1;\n     cbr $c0, @L8;\n    @L3:\n     cmp_eq_b1_u64 $c0, $d0, 0; // null test\n     cbr $c0, @L4;\n    @L5:\n     ld_global_s32 $s1, [$d0 + 12];\n     cmp_ge_b1_u32 $c0, $s0, $s1;\n     cbr $c0, @L7;\n    @L6:\n     cvt_s64_s32 $d2, $s0;\n     mul_s64 $d2, $d2, 4;\n     add_u64 $d0, $d0, $d2;\n     st_global_s32 1, [$d0 + 16];\n     cvt_s64_s32 $d0, $s0;\n     mul_s64 $d0, $d0, 4;\n     add_u64 $d1, $d1, $d0;\n     st_global_s32 2, [$d1 + 16];\n     ret;\n    @L1:\n     mov_b32 $s0, -6155;\n    @L9:\n     ret;\n    @L4:\n     mov_b32 $s0, -4363;\n     brn @L9;\n    @L8:\n     mov_b32 $s0, -6683;\n     brn @L9;\n    @L7:\n     mov_b32 $s0, -4891;\n     brn @L9;\n    }; \n\n    [HSAIL] heap=0x00007f4c9801de38\n    [HSAIL] base=0x05a00000, capacity=209190912\n    External method:simple.Simple.lambda$main$0([I[II)V\n    installCode0: ExternalCompilationResult\n    [HSAIL] sig:([I[II)V  args length=2, _parameter_count=3\n    [HSAIL] static method\n    [HSAIL] HSAILKernelArguments::do_array, _index=0, 0x82b20888, is a [I\n    [HSAIL] HSAILKernelArguments::do_array, _index=1, 0x82b208b8, is a [I\n    [HSAIL] HSAILKernelArguments::not pushing trailing int\n     [thread:1] scope: GraalCompiler\n     [thread:1] scope: GraalCompiler.CodeGen\n     Nothing to do here\n     Nothing to do here\n     Nothing to do here\n     version 0:95: $full : $large; \n    // static method HotSpotMethod<Simple.lambda$main$1(int[], int[], int[], int)> \n    kernel &run ( \n     align 8 kernarg_u64 %_arg0,\n     align 8 kernarg_u64 %_arg1,\n     align 8 kernarg_u64 %_arg2\n     ) {\n     ld_kernarg_u64  $d0, [%_arg0];\n     ld_kernarg_u64  $d1, [%_arg1];\n     ld_kernarg_u64  $d2, [%_arg2];\n     workitemabsid_u32 $s0, 0;\n\n    @L0:\n     cmp_eq_b1_u64 $c0, $d0, 0; // null test\n     cbr $c0, @L1;\n    @L2:\n     ld_global_s32 $s1, [$d0 + 12];\n     cmp_ge_b1_u32 $c0, $s0, $s1;\n     cbr $c0, @L12;\n    @L3:\n     cmp_eq_b1_u64 $c0, $d2, 0; // null test\n     cbr $c0, @L4;\n    @L5:\n     ld_global_s32 $s1, [$d2 + 12];\n     cmp_ge_b1_u32 $c0, $s0, $s1;\n     cbr $c0, @L11;\n    @L6:\n     cmp_eq_b1_u64 $c0, $d1, 0; // null test\n     cbr $c0, @L7;\n    @L8:\n     ld_global_s32 $s1, [$d1 + 12];\n     cmp_ge_b1_u32 $c0, $s0, $s1;\n     cbr $c0, @L10;\n    @L9:\n     cvt_s64_s32 $d3, $s0;\n     mul_s64 $d3, $d3, 4;\n     add_u64 $d1, $d1, $d3;\n     ld_global_s32 $s1, [$d1 + 16];\n     cvt_s64_s32 $d1, $s0;\n     mul_s64 $d1, $d1, 4;\n     add_u64 $d2, $d2, $d1;\n     ld_global_s32 $s2, [$d2 + 16];\n     add_s32 $s2, $s2, $s1;\n     cvt_s64_s32 $d1, $s0;\n     mul_s64 $d1, $d1, 4;\n     add_u64 $d0, $d0, $d1;\n     st_global_s32 $s2, [$d0 + 16];\n     ret;\n    @L1:\n     mov_b32 $s0, -7691;\n    @L13:\n     ret;\n    @L4:\n     mov_b32 $s0, -6411;\n     brn @L13;\n    @L10:\n     mov_b32 $s0, -5403;\n     brn @L13;\n    @L7:\n     mov_b32 $s0, -4875;\n     brn @L13;\n    @L12:\n     mov_b32 $s0, -8219;\n     brn @L13;\n    @L11:\n     mov_b32 $s0, -6939;\n     brn @L13;\n    }; \n    [HSAIL] heap=0x00007f4c9801de38\n    [HSAIL] base=0x05a00000, capacity=209190912\n    External method:simple.Simple.lambda$main$1([I[I[II)V\n    installCode0: ExternalCompilationResult\n    [HSAIL] sig:([I[I[II)V  args length=3, _parameter_count=4\n    [HSAIL] static method\n    [HSAIL] HSAILKernelArguments::do_array, _index=0, 0x82b208f8, is a [I\n    [HSAIL] HSAILKernelArguments::do_array, _index=1, 0x82b20888, is a [I\n    [HSAIL] HSAILKernelArguments::do_array, _index=2, 0x82b208b8, is a [I\n    [HSAIL] HSAILKernelArguments::not pushing trailing int\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n    3, 1, 2\n\n    ```", "```java\n./mx.sh --vm server unittest -XX:+TraceGPUInteraction -XX:+GPUOffload -G:Log=CodeGen hsail.test.IntAddTest\n\n```", "```java\n [HSAIL] library is libokra_x86_64.so\n[HSAIL] using _OKRA_SIM_LIB_PATH_=/tmp/okraresource.dir_2488167353114811077/libokra_x86_64.so\n[GPU] registered initialization of Okra (total initialized: 2)\n[CUDA] Ptx::get_execute_kernel_from_vm_address\nJUnit version 4.8\n.[thread:1] scope:\n [thread:1] scope: GraalCompiler\n [thread:1] scope: GraalCompiler.CodeGen\n Nothing to do here\n Nothing to do here\n Nothing to do here\n version 0:95: $full : $large;\n// static method HotSpotMethod<IntAddTest.run(int[], int[], int[], int)>\nkernel &run (\n align 8 kernarg_u64 %_arg0,\n align 8 kernarg_u64 %_arg1,\n align 8 kernarg_u64 %_arg2\n ) {\n ld_kernarg_u64  $d0, [%_arg0];\n ld_kernarg_u64  $d1, [%_arg1];\n ld_kernarg_u64  $d2, [%_arg2];\n workitemabsid_u32 $s0, 0;\n@L0:\n cmp_eq_b1_u64 $c0, $d0, 0; // null test\n cbr $c0, @L1;\n@L2:\n ld_global_s32 $s1, [$d0 + 12];\n cmp_ge_b1_u32 $c0, $s0, $s1;\n cbr $c0, @L12;\n@L3:\n cmp_eq_b1_u64 $c0, $d2, 0; // null test\n cbr $c0, @L4;\n@L5:\n ld_global_s32 $s1, [$d2 + 12];\n cmp_ge_b1_u32 $c0, $s0, $s1;\n cbr $c0, @L11;\n@L6:\n cmp_eq_b1_u64 $c0, $d1, 0; // null test\n cbr $c0, @L7;\n@L8:\n ld_global_s32 $s1, [$d1 + 12];\n cmp_ge_b1_u32 $c0, $s0, $s1;\n cbr $c0, @L10;\n@L9:\n cvt_s64_s32 $d3, $s0;\n mul_s64 $d3, $d3, 4;\n add_u64 $d1, $d1, $d3;\n ld_global_s32 $s1, [$d1 + 16];\n cvt_s64_s32 $d1, $s0;\n mul_s64 $d1, $d1, 4;\n add_u64 $d2, $d2, $d1;\n ld_global_s32 $s2, [$d2 + 16];\n add_s32 $s2, $s2, $s1;\n cvt_s64_s32 $d1, $s0;\n mul_s64 $d1, $d1, 4;\n add_u64 $d0, $d0, $d1;\n st_global_s32 $s2, [$d0 + 16];\n ret;\n@L1:\n mov_b32 $s0, -7691;\n@L13:\n ret;\n@L4:\n mov_b32 $s0, -6411;\n brn @L13;\n@L10:\n mov_b32 $s0, -5403;\n brn @L13;\n@L7:\n mov_b32 $s0, -4875;\n brn @L13;\n@L12:\n mov_b32 $s0, -8219;\n brn @L13;\n@L11:\n mov_b32 $s0, -6939;\n brn @L13;\n};\n\n[HSAIL] heap=0x00007f95b8019cc0\n[HSAIL] base=0x05a00000, capacity=210763776\nExternal method:com.oracle.graal.compiler.hsail.test.IntAddTest.run([I[I[II)V\ninstallCode0: ExternalCompilationResult\n[HSAIL] sig:([I[I[II)V args length=3, _parameter_count=4\n[HSAIL] static method\n[HSAIL] HSAILKernelArguments::do_array, _index=0, 0x82b21970, is a [I\n[HSAIL] HSAILKernelArguments::do_array, _index=1, 0x82b477f0, is a [I\n[HSAIL] HSAILKernelArguments::do_array, _index=2, 0x82b479e0, is a [I\n[HSAIL] HSAILKernelArguments::not pushing trailing int\n\nTime: 0.153\n\nOK (1 test)\n\n```"]