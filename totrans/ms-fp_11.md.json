["```java\nName,Price\nTV Set,100\niPhone 8,300\nSamsung Galaxy S5,300\nMacBook Pro,2500\nMacBook Air,1500\n```", "```java\n{\"Name\":\"TV Set\",\"Price\":100}\n{\"Name\":\"iPhone 8\",\"Price\":300}\n{\"Name\":\"Samsung Galaxy S5\",\"Price\":300}\n{\"Name\":\"MacBook Pro\",\"Price\":2500}\n{\"Name\":\"MacBook Air\",\"Price\":1500}\n```", "```java\nWHoerllldo\n```", "```java\nval target = new File(\"sample.txt\")\n target.synchronized {\n   FileUtils.writeStringToFile(target, \"Hello World\", \"utf8\")\n}\n```", "```java\nimport scala.collection.JavaConverters._\n\nimport java.io.File\nimport java.nio.charset.Charset\n\nimport org.apache.commons.io.FileUtils\n```", "```java\nlibraryDependencies += \"commons-io\" % \"commons-io\" % \"2.6\"\n```", "```java\n// Files we will be working with\n   val input = new File(\"goods.csv\" )\n   val log = new File(\"log.txt\" )\n   val output = new File(\"goods.json\")\n\n// Encoding for the file I/O operations\n   val encoding = \"utf8\"\n\n// Convenience method to construct threads\n   def makeThread(f: => Unit): Thread =\n    new Thread(new Runnable {\n      override def run(): Unit = f\n    })\n\n// Convenience method to write log\n   def doLog(l: String): Unit = {\n     FileUtils.write(\n       log\n     , l + \"\\n\"\n     , encoding\n     , true // Append to the file rather than rewrite it\n     )\n     println(s\"Log: $l\") // Trace console output\n   }\n\n// Convenience method to read the input file\n   def readInput(): List[(String, Int)] =\n     FileUtils.readLines(input, encoding).asScala.toList.tail\n```", "```java\n       .map(_.split(',').toList match {\n         case name :: price :: Nil => (name, price.toInt)\n       })\n```", "```java\nval csv2json: Thread = makeThread {\n  val inputList: List[(String, Int)] =\n    input.synchronized {\n      val result = readInput()\n/*...*/\n```", "```java\nlog.synchronized {\n  doLog(s\"Read ${result.length} lines from input\")\n}\n```", "```java\nval inputList: List[(String, Int)] =\n  input.synchronized {\n    val result = readInput()\n    log.synchronized {\n      doLog(s\"Read ${result.length} lines from input\")\n    }\n    result\n  }\n```", "```java\nval json: List[String] =\n  inputList.map { case (name, price) =>\n    s\"\"\"{\"Name\": \"$name\", \"Price\": $price}\"\"\" }\n\nFileUtils.writeLines(output, json.asJava)\n```", "```java\nval csv2json: Thread = makeThread {\n  val inputList: List[(String, Int)] =\n    input.synchronized {\n      val result = readInput()\n      log.synchronized {\n        doLog(s\"Read ${result.length} lines from input\")\n      }\n      result\n    }\n\n  val json: List[String] =\n    inputList.map { case (name, price) =>\n      s\"\"\"{\"Name\": \"$name\", \"Price\": $price}\"\"\" }\n\n  FileUtils.writeLines(output, json.asJava)\n}\n```", "```java\ndef statistics(avg: Boolean = true, max: Boolean = false, min: Boolean = false): Thread\n```", "```java\nlog.synchronized {\n  doLog(s\"Computing the following stats: avg=$avg, max=$max, min=$min\")\n}\n```", "```java\nval inputList: List[(String, Int)] = log.synchronized {\n  doLog(s\"Computing the following stats: avg=$avg, max=$max, min=$min\")\n  val res = input.synchronized { readInput() }\n  doLog(s\"Read the input file to compute statistics on it\")\n  res\n}\n```", "```java\nval prices: List[Int] = inputList.map(_._2)\ndef reportMetrics(name: String, value: => Double): Unit = {\n  val result = value\n  log.synchronized { doLog(s\"$name: $result\") }\n}\n\nif (avg) reportMetrics(\"Average Price\", prices.sum /\n  prices.length.toDouble)\nif (max) reportMetrics(\"Maximal Price\", prices.max)\nif (min) reportMetrics(\"Minimal Price\", prices.min)\n```", "```java\ndef statistics(avg: Boolean = true, max: Boolean = false, min: Boolean = false): Thread = makeThread {\n  val inputList: List[(String, Int)] = log.synchronized {\n    doLog(s\"Computing the following stats: avg=$avg, max=$max, min=$min\")\n    val res = input.synchronized { readInput() }\n    doLog(s\"Read the input file to compute statistics on it\")\n    res\n  }\n\n  val prices: List[Int] = inputList.map(_._2)\n  def reportMetrics(name: String, value: => Double): Unit = {\n    val result = value\n    log.synchronized { doLog(s\"$name: $result\") }\n  }\n\n  if (avg) reportMetrics(\"Average Price\", prices.sum / prices.length.toDouble)\n  if (max) reportMetrics(\"Maximal Price\", prices.max)\n  if (min) reportMetrics(\"Minimal Price\", prices.min)\n}\n```", "```java\ncsv2json.start()\nstatistics(true, true, true).start()\n```", "```java\ndef statisticsSafe(avg: Boolean = true, max: Boolean = false, min: Boolean = false): Thread = makeThread {\n val inputList: List[(String, Int)] = input.synchronized {\n log.synchronized {\n doLog(s\"Computing the following stats: avg=$avg, max=$max, min=$min\")\n val res = readInput()\n doLog(s\"Read the input file to compute statistics on it\")\n res\n }\n }\n\n  val prices: List[Int] = inputList.map(_._2)\n  def reportMetrics(name: String, value: => Double): Unit = {\n    val result = value\n    log.synchronized { doLog(s\"$name: $result\") }\n  }\n\n  if (avg) reportMetrics(\"Average Price\", prices.sum / prices.length.toDouble)\n  if (max) reportMetrics(\"Maximal Price\", prices.max)\n  if (min) reportMetrics(\"Minimal Price\", prices.min)\n}\n```"]