["```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n          \"io.iron.ironmq\" % \"ironmq\" % \"0.0.19\"\n        )\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir plugins</strong></span>\n    ```", "```java\n    package plugins;\n         import io.iron.ironmq.Client;\n        import io.iron.ironmq.Message;\n        import io.iron.ironmq.Messages;\n        import io.iron.ironmq.Queue;\n        import play.Application;\n        import play.Logger;\n        import play.Plugin;\n        import java.util.UUID;\n         public class MQPlugin extends Plugin {\n            final private Integer messageSize = 10;\n            private Client client;\n            private Queue queue;\n             public MQPlugin(Application app) {\n                super();\n                client = new Client(\n                    app.configuration().getString(\"mq.projectId\"),\n                    app.configuration().getString(\"mq.token\")\n                );\n            }\n             public void onStart() {\n                queue = client.queue(UUID.randomUUID().toString());\n            }\n             public void onStop() {\n                try {\n                    queue.clear();\n                    queue.destroy();\n                    client = null;\n                } catch(Exception e) {\n                    Logger.error(e.toString());\n                }\n            }\n             public void send(String msg) throws Exception {\n                queue.push(msg);\n            }\n             public Message[] retrieve() throws Exception {\n                Messages messages = queue.get(messageSize);\n                if (messages.getSize() &gt; 0) {\n                    Message[] msgArray = messages.getMessages();\n                     for(Message m : msgArray) {\n                        queue.deleteMessage(m);\n                    }\n                     return msgArray;\n                }\n                 return new Message[] {};\n            }\n             public boolean enabled() {\n                return true;\n            }\n        }\n    ```", "```java\n    mq.projectId=\"YOUR PROJECT ID\"\n        mq.token=\"YOUR TOKEN\"\n    ```", "```java\n    599:plugins.MQPlugin\n    ```", "```java\n    package controllers;\n         import play.Logger;\n        import play.Play;\n        import play.data.Form;\n        import play.mvc.BodyParser;\n        import play.mvc.Controller;\n        import play.mvc.Result;\n        import plugins.MQPlugin;\n        import java.util.HashMap;\n        import java.util.Map;\n         import static play.libs.Json.toJson;\n         public class Messenger extends Controller {\n            private static MQPlugin mqPlugin = Play.application().plugin(MQPlugin.class);\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result sendMessage() {\n                try {\n                    Form&lt;Message&gt; form = Form.form(Message.class).bindFromRequest();\n                    Message m = form.get();\n                    mqPlugin.send(m.getBody());\n                     Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n                    map.put(\"status\", \"Message sent.\");\n                    return created(toJson(map));\n                 } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n             public static Result getMessages() {\n                try {\n                    return ok(toJson(mqPlugin.retrieve()));\n                } catch (Exception e) {\n                    Logger.error(e.toString());\n                    return internalServerError();\n                }\n            }\n        }\n    ```", "```java\n    POST    /messages/send       controllers.Messenger.sendMessage\n        GET     /messages            controllers.Messenger.getMessages\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/messages/send --header \"Content-type: application/json\" -d '{\"body\":\"Her mouth the mischief he doth seek\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /messages/send HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 46</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 46 out of 46 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 26</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"status\":\"Message sent.\"}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/messages</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /messages HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 95</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"messages\":[\"Her mouth the mischief he doth seek\",\"Her heart the captive of which he speaks\"]}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n          \"io.iron.ironmq\" % \"ironmq\" % \"0.0.19\"\n        )\n    ```", "```java\n    <span class=\"strong\"><strong>    mkdir plugins</strong></span>\n    ```", "```java\n    package plugins\n         import java.util.UUID\n        import io.iron.ironmq.{Client, Queue}\n        import play.api.Play.current\n        import play.api.{Application, Play, Plugin}\n        import play.api.libs.concurrent.Execution.Implicits._\n        import scala.concurrent.Future\n         class MQPlugin(app: Application) extends Plugin {\n          private val messageSize = 10\n          private var client: Client = null\n          private var queue: Queue = null\n           override def onStart() = {\n            client = new Client(\n              Play.configuration.getString(\"mq.projectId\").get,\n              Play.configuration.getString(\"mq.token\").get\n            )\n            queue = client.queue(UUID.randomUUID().toString)\n          }\n           override def onStop() = {\n            queue.clear()\n            queue.destroy()\n            client = null\n          }\n           def send(msg: String) = queue.push(msg)\n           def retrieve = {\n            val list = queue.get(messageSize)\n            Future {\n              list.getMessages.map(queue.deleteMessage(_))\n            }\n            list.getMessages.map(_.getBody)\n          }\n        override def enabled = true\n        }\n    ```", "```java\n    mq.projectId=\"YOUR PROJECT ID\"\n        mq.token=\"YOUR TOKEN\"\n    ```", "```java\n    599:plugins.MQPlugin\n    ```", "```java\n    package controllers\n         import play.api.Play.current\n        import play.api.Play\n        import play.api.libs.json.{JsError, Json}\n        import play.api.mvc.{BodyParsers, Action, Controller}\n        import plugins.MQPlugin\n         case class Message(body: String)\n         object Messenger extends Controller {\n          implicit private val writes = Json.writes[Message]\n          implicit private val reads = Json.reads[Message]\n          private val mqPlugin = Play.application.plugin[MQPlugin].get\n           def sendMessage = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val post = request.body.validate[Message]\n             post.fold(\n              errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n              p =&gt; {\n                mqPlugin.send(p.body)\n                Created(Json.obj(\"status\" -&gt; \"Message sent.\"))\n              }\n            )\n          }\n           def getMessages = Action {\n            Ok(Json.obj(\"messages\" -&gt; mqPlugin.retrieve))\n          }\n        }\n    ```", "```java\n    POST    /messages/send       controllers.Messenger.sendMessage\n        GET     /messages            controllers.Messenger.getMessages\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v -X POST http://localhost:9000/messages/send --header \"Content-type: application/json\" -d '{\"body\":\"Her mouth the mischief he doth seek\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /messages/send HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 46</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 46 out of 46 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 26</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"status\":\"Message sent.\"}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/messages</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /messages HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 95</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>    {\"messages\":[\"Her mouth the mischief he doth seek\",\"Her heart the captive of which he speaks\"]}%</strong></span>\n    ```", "```java\nmq.projectId=\"YOUR PROJECT ID\"\n    mq.token=\"YOUR TOKEN\"\n```", "```java\n// Java \n    public MQPlugin(Application app) {\n        super();\n        client = new Client(\n            app.configuration().getString(\"mq.projectId\"),\n            app.configuration().getString(\"mq.token\")\n        );\n    }\n     // Scala\n    override def onStart() = {\n      client = new Client(\n        Play.configuration.getString(\"mq.projectId\").get,\n        Play.configuration.getString(\"mq.token\").get\n      )\n    }\n```", "```java\n// Java \n    public void onStart() {\n        queue = client.queue(UUID.randomUUID().toString());\n    }\n     // Scala\n    queue = client.queue(UUID.randomUUID().toString)\n```", "```java\n// Java\n    public void send(String msg) throws Exception {\n        queue.push(msg);\n    }\n     public Message[] retrieve() throws Exception {\n        Messages messages = queue.get(messageSize);\n        if (messages.getSize() &gt; 0) {\n            Message[] msgArray = messages.getMessages();\n             for(Message m : msgArray) {\n                queue.deleteMessage(m);\n            }\n             return msgArray;\n        }\n         return new Message[] {};\n    }    \n     // Scala\n    def send(msg: String) = queue.push(msg)\n     def retrieve = {\n      val list = queue.get(messageSize)\n      Future {\n        list.getMessages.map(queue.deleteMessage(_))\n      }\n      list.getMessages.map(_.getBody)\n    }\n```", "```java\n// Scala\n    import play.api.libs.concurrent.Execution.Implicits._\n    import scala.concurrent.Future\n     Future {\n      list.getMessages.map(queue.deleteMessage(_))\n    }\n```", "```java\nfor(Message m : msgArray) {\n      queue.deleteMessage(m);\n    }\n```", "```java\n// Java \n    private static MQPlugin mqPlugin = Play.application().plugin(MQPlugin.class);\n     @BodyParser.Of(BodyParser.Json.class)\n    public static Result sendMessage() {\n        try {\n            Form&lt;Message&gt; form = Form.form(Message.class).bindFromRequest();\n            Message m = form.get();\n            mqPlugin.send(m.getBody());\n             Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n            map.put(\"status\", \"Message sent.\");\n            return created(toJson(map));\n         } catch (Exception e) {\n            return internalServerError(e.getMessage());\n        }\n    }\n     public static Result getMessages() {\n        try {\n            return ok(toJson(mqPlugin.retrieve()));\n        } catch (Exception e) {\n            Logger.error(e.toString());\n            return internalServerError();\n        }\n    }    \n    // Scala\n    implicit private val writes = Json.writes[Message]\n    implicit private val reads = Json.reads[Message]\n    private val mqPlugin = Play.application.plugin[MQPlugin].get\n     def sendMessage = Action(BodyParsers.parse.json) { implicit request =&gt;\n      val post = request.body.validate[Message]\n       post.fold(\n        errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n        p =&gt; {\n          mqPlugin.send(p.body)\n          Created(Json.obj(\"status\" -&gt; \"Message sent.\"))\n        }\n      )\n    }\n     def getMessages = Action {\n      Ok(Json.obj(\"messages\" -&gt; mqPlugin.retrieve))\n    }\n```", "```java\nPOST    /messages/send       controllers.Messenger.sendMessage\n    GET     /messages            controllers.Messenger.getMessages\n```", "```java\n<span class=\"strong\"><strong>    $ docker -v</strong></span>\n<span class=\"strong\"><strong>    Docker version 1.3.3, build d344625</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    $ docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    resolvers += \"Sonatype OSS Snapshots\" at \"https://oss.sonatype.org/content/repositories/snapshots\"\n         libraryDependencies ++= Seq(\n          (\"com.clever-age\" % \"play2-elasticsearch\" % \"1.4-SNAPSHOT\")\n            .exclude(\"com.typesafe.play\", \"play-functional_2.10\")\n            .exclude(\"com.typesafe.akka\", \"akka-actor_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-json_2.10\")\n            .exclude(\"com.typesafe.play\", \"play_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-iteratees_2.10\")\n            .exclude(\"com.typesafe.akka\", \"akka-slf4j_2.10\")\n            .exclude(\"org.scala-stm\", \"scala-stm_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-datacommons_2.10\")\n         .exclude(\"com.typesafe.play\", \"play-java_2.10\")\n        )\n    ```", "```java\n    9000:com.github.cleverage.elasticsearch.plugin.IndexPlugin\n    ```", "```java\n    elasticsearch.local=false\n        elasticsearch.client=\"&lt;YOUR ELASTIC SEARCH HOST HERE&gt;:9300\"\n        elasticsearch.sniff=false\n        elasticsearch.index.name=\"test\"\n        elasticsearch.index.settings=\"{ analysis: { analyzer: { my_analyzer: { type: \\\"custom\\\", tokenizer: \\\"standard\\\" } } } }\"\n        elasticsearch.index.clazzs=\"models.*\"\n        elasticsearch.index.show_request=true\n        elasticsearch.cluster.name=elasticsearch\n    ```", "```java\n    package models;\n         import com.github.cleverage.elasticsearch.Index;\n        import com.github.cleverage.elasticsearch.IndexQuery;\n        import com.github.cleverage.elasticsearch.IndexResults;\n        import com.github.cleverage.elasticsearch.Indexable;\n        import com.github.cleverage.elasticsearch.annotations.IndexType;\n        import org.elasticsearch.index.query.QueryBuilders;\n        import java.util.HashMap;\n        import java.util.Map;\n         @IndexType(name = \"product\")\n        public class Product extends Index {\n            private String id;\n            private String title;\n            private String shortDesc;\n             public Product() {}\n             public Product(String id, String title, String shortDesc) {\n                this.id = id;\n                this.title = title;\n                this.shortDesc = shortDesc;\n            }\n             public String getId() {\n                return id;\n            }\n             public void setId(String id) {\n                this.id = id;\n            }\n             public String getTitle() {\n                return title;\n            }\n             public void setTitle(String title) {\n                this.title = title;\n            }\n             public String getShortDesc() {\n                return shortDesc;\n            }\n             public void setShortDesc(String shortDesc) {\n                this.shortDesc = shortDesc;\n            }\n             public static Finder&lt;Product&gt; find = new Finder&lt;&gt;(Product.class);\n             @Override\n            public Map toIndex() {\n                Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                map.put(\"id\", this.id);\n                map.put(\"title\", this.title);\n                map.put(\"description\", this.getShortDesc());\n                return map;\n            }\n             @Override\n            public Indexable fromIndex(Map map) {\n                Product p = new Product();\n                p.setId((String) map.get(\"id\"));\n                p.setTitle((String) map.get(\"title\"));\n                p.setShortDesc((String) map.get(\"description\"));\n                return p;\n            }\n             public static IndexResults&lt;Product&gt; doSearch(String keyword) {\n                IndexQuery&lt;Product&gt; indexQuery = Product.find.query();\n                indexQuery.setBuilder(QueryBuilders.multiMatchQuery(keyword, \"title\", \"description\"));\n                return Product.find.search(indexQuery);\n            }\n        }\n    ```", "```java\n    package controllers;\n         import com.github.cleverage.elasticsearch.IndexResults;\n        import models.Product;\n        import play.data.Form;\n        import play.mvc.BodyParser;\n        import play.mvc.Controller;\n        import play.mvc.Result;\n        import java.util.HashMap;\n        import java.util.Map;\n         import static play.libs.Json.toJson;\n         public class Products extends Controller {\n            @BodyParser.Of(BodyParser.Json.class)\n            public static Result create() {\n                try {\n                    Form&lt;Product&gt; form = Form.form(Product.class).bindFromRequest();\n                    Product product = form.get();\n                    product.index();\n                     return created(toJson(product));\n                 } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result search() {\n                try {\n                    Form&lt;Search&gt; form = Form.form(Search.class).bindFromRequest();\n                    Search search = form.get();\n                     IndexResults&lt;Product&gt; results = Product.doSearch(search.getKeyword());\n                    Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();\n                    map.put(\"total\", results.getTotalCount());\n                    map.put(\"products\", results.getResults());\n                     return ok(toJson(map));\n                 } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n        }\n    ```", "```java\n    package controllers;\n         public class Search {\n            private String keyword;\n             public String getKeyword() {\n                return keyword;\n            }\n            public void setKeyword(String keyword) {\n                this.keyword = keyword;\n            }\n        }\n    ```", "```java\n    POST    /products            controllers.Products.create\n        GET     /products/search     controllers.Products.search\n    ```", "```java\n    <span class=\"strong\"><strong>    # Let's insert 2 products:</strong></span>\n     <span class=\"strong\"><strong>    curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" -d '{\"id\":\"1001\", \"title\":\"Intel Core i7-4790K Processor\", \"shortDesc\": \"New Unlocked 4th Gen Intel Core Processors deliver 4 cores of up to 4 GHz base frequency providing blazing-fast computing performance for the most demanding users\"}'</strong></span>\n     <span class=\"strong\"><strong>    curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" -d '{\"id\":\"1002\", \"title\": \"AMD FD6300WMHKBOX FX-6300 6-Core Processor\", \"shortDesc\": \"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}'</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -X GET http://localhost:9000/products/search --header \"Content-type: application/json\" -d '{\"keyword\":\"processor\"}'</strong></span>\n    <span class=\"strong\"><strong>{\"total\":2,\"products\":[{\"id\":\"1001\",\"title\":\"Intel Core i7-4790K Processor\",\"shortDesc\":\"New Unlocked 4th Gen Intel Core Processors deliver 4 cores of up to 4 GHz base frequency providing blazing-fast computing performance for the most demanding users\"},{\"id\":\"1002\",\"title\":\"AMD FD6300WMHKBOX FX-6300 6-Core Processor\",\"shortDesc\":\"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}]}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -X GET http://localhost:9000/products/search --header \"Content-type: application/json\" -d '{\"keyword\":\"amd\"}'</strong></span>\n    <span class=\"strong\"><strong>{\"total\":1,\"products\":[{\"id\":\"1002\",\"title\":\"AMD FD6300WMHKBOX FX-6300 6-Core Processor\",\"shortDesc\":\"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}]}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    resolvers += \"Sonatype OSS Snapshots\" at \"https://oss.sonatype.org/content/repositories/snapshots\"\n         libraryDependencies ++= Seq(\n          (\"com.clever-age\" % \"play2-elasticsearch\" % \"1.4-SNAPSHOT\")\n            .exclude(\"com.typesafe.play\", \"play-functional_2.10\")\n            .exclude(\"com.typesafe.akka\", \"akka-actor_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-json_2.10\")\n            .exclude(\"com.typesafe.play\", \"play_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-iteratees_2.10\")\n            .exclude(\"com.typesafe.akka\", \"akka-slf4j_2.10\")\n            .exclude(\"org.scala-stm\", \"scala-stm_2.10\")\n            .exclude(\"com.typesafe.play\", \"play-datacommons_2.10\")\n        )\n    ```", "```java\n    9000:com.github.cleverage.elasticsearch.plugin.IndexPlugin\n    ```", "```java\n    elasticsearch.local=false\n        elasticsearch.client=\"&lt;YOUR_ELASTICSEARCH_HOST_HERE&gt;:9300\"\n        elasticsearch.sniff=false\n        elasticsearch.index.name=\"test\"\n        elasticsearch.index.settings=\"{ analysis: { analyzer: { my_analyzer: { type: \\\"custom\\\", tokenizer: \\\"standard\\\" } } } }\"\n        elasticsearch.index.clazzs=\"models.*\"\n        elasticsearch.index.show_request=true\n        elasticsearch.cluster.name=elasticsearch\n    ```", "```java\n    package models\n         import com.github.cleverage.elasticsearch.ScalaHelpers.{IndexQuery,     IndexableManager, Indexable}\n        import org.elasticsearch.index.query.QueryBuilders\n        import play.api.libs.json.{Writes, Json, Reads}\n         case class Product(id: String, title: String, shortDesc: String) extends Indexable\n         object ProductManager extends IndexableManager[Product] {\n          override val indexType: String = \"string\"\n          override val reads: Reads[Product] = Json.reads[Product]\n          override val writes: Writes[Product] = Json.writes[Product]\n           def doSearch(keyword: String) = {\n            val indexQuery = new IndexQuery[Product]()\n              .withBuilder(QueryBuilders.multiMatchQuery(keyword, \"title\", \"description\"))\n             search(indexQuery)\n          }\n        }\n    ```", "```java\n    package controllers\n         import models.{Product, ProductManager}\n        import play.api.libs.json.{JsError, Json}\n        import play.api.mvc.{BodyParsers, Action, Controller}\n         case class Search(keyword: String)\n         object Products extends Controller {\n          implicit private val productWrites = Json.writes[Product]\n          implicit private val productReads = Json.reads[Product]\n          implicit private val searchWrites = Json.writes[Search]\n          implicit private val searchReads = Json.reads[Search]\n           def create = Action(BodyParsers.parse.json) { implicit request =&gt;\n            val post = request.body.validate[Product]\n             post.fold(\n              errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n              p =&gt; {\n                ProductManager.index(p)\n                Created(Json.toJson(p))\n              }\n            )\n          }\n           def search = Action(BodyParsers.parse.json) { implicit request =&gt;\n            request.body.validate[Search].fold(\n              errors =&gt; BadRequest(JsError.toFlatJson(errors)),\n              search =&gt; {\n                val results = ProductManager.doSearch(search.keyword)\n                Ok(Json.obj(\n                  \"total\" -&gt; results.totalCount,\n                  \"products\" -&gt; results.results\n                ))\n              }\n            )\n          }\n        }\n    ```", "```java\n    POST    /products            controllers.Products.create\n        GET     /products/search     controllers.Products.search\n    ```", "```java\n    <span class=\"strong\"><strong>    # Let's insert 2 products:</strong></span>\n     <span class=\"strong\"><strong>    curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" -d '{\"id\":\"1001\", \"title\":\"Intel Core i7-4790K Processor\", \"shortDesc\": \"New Unlocked 4th Gen Intel Core Processors deliver 4 cores of up to 4 GHz base frequency providing blazing-fast computing performance for the most demanding users\"}'</strong></span>\n     <span class=\"strong\"><strong>    curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" -d '{\"id\":\"1002\", \"title\": \"AMD FD6300WMHKBOX FX-6300 6-Core Processor\", \"shortDesc\": \"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}'</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -X GET http://localhost:9000/products/search --header \"Content-type: application/json\" -d '{\"keyword\":\"processor\"}'</strong></span>\n    <span class=\"strong\"><strong>{\"total\":2,\"products\":[{\"id\":\"1001\",\"title\":\"Intel Core i7-4790K Processor\",\"shortDesc\":\"New Unlocked 4th Gen Intel Core Processors deliver 4 cores of up to 4 GHz base frequency providing blazing-fast computing performance for the most demanding users\"},{\"id\":\"1002\",\"title\":\"AMD FD6300WMHKBOX FX-6300 6-Core Processor\",\"shortDesc\":\"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}]}%</strong></span>\n     <span class=\"strong\"><strong>    $ curl -X GET http://localhost:9000/products/search --header \"Content-type: application/json\" -d '{\"keyword\":\"amd\"}'</strong></span>\n    <span class=\"strong\"><strong>{\"total\":1,\"products\":[{\"id\":\"1002\",\"title\":\"AMD FD6300WMHKBOX FX-6300 6-Core Processor\",\"shortDesc\":\"AMD FX 6-Core Processor Unlocked Black Edition. AMDs next-generation architecture takes 8-core processing to a new level. Get up to 24% better frame rates in some of the most demanding games at stunning resolutions. Get faster audio encoding so you can enjoy your music sooner. Go up to 5.0 GHz with aggressive cooling solutions from AMD.\"}]}%</strong></span>\n    ```", "```java\n<span class=\"strong\"><strong>    $ docker -v</strong></span>\n<span class=\"strong\"><strong>    Docker version 1.3.3, build d344625</strong></span>\n```", "```java\n<span class=\"strong\"><strong>    docker run -d -p 9200:9200 -p 9300:9300 dockerfile/elasticsearch</strong></span>\n```", "```java\nresolvers +=   \"Sonatype OSS Snapshots\" at \"https://oss.sonatype.org/content/repositories/snapshots\"\n     libraryDependencies ++= Seq(\n      \"io.iron.ironmq\" % \"ironmq\" % \"0.0.19\",\n      (\"com.clever-age\" % \"play2-elasticsearch\" % \"1.4-SNAPSHOT\")\n        .exclude(\"com.typesafe.play\", \"play-functional_2.10\")\n        .exclude(\"com.typesafe.akka\", \"akka-actor_2.10\")\n        .exclude(\"com.typesafe.play\", \"play-json_2.10\")\n        .exclude(\"com.typesafe.play\", \"play_2.10\")\n        .exclude(\"com.typesafe.play\", \"play-iteratees_2.10\")\n        .exclude(\"com.typesafe.akka\", \"akka-slf4j_2.10\")\n        .exclude(\"org.scala-stm\", \"scala-stm_2.10\")\n        .exclude(\"com.typesafe.play\", \"play-datacommons_2.10\")\n    )\n```", "```java\n// conf/play.plugins\n    9000:com.github.cleverage.elasticsearch.plugin.IndexPlugin\n    // conf/application.conf\n    elasticsearch.local=false\n    elasticsearch.client=\"192.168.59.103:9300\"\n    elasticsearch.sniff=false\n    elasticsearch.index.name=\"test\"\n    elasticsearch.index.settings=\"{ analysis: { analyzer: { my_analyzer: { type: \\\"custom\\\", tokenizer: \\\"standard\\\" } } } }\"\n    elasticsearch.index.clazzs=\"models.*\"\n    elasticsearch.index.show_request=true\n    elasticsearch.cluster.name=elasticsearch\n```", "```java\n// Java \n    IndexQuery&lt;Product&gt; indexQuery = Product.find.query();\n    indexQuery.setBuilder(QueryBuilders.multiMatchQuery(keyword, \"title\", \"description\"));    \n     // Scala\n    val indexQuery = new IndexQuery[Product]()\n      .withBuilder(QueryBuilders.multiMatchQuery(keyword, \"title\", \"description\"))\n```", "```java\n// Java\n    @BodyParser.Of(BodyParser.Json.class)\n    public static Result create() {\n     ..\n     product.index();\n     ..\n    }\n     @BodyParser.Of(BodyParser.Json.class)\n    public static Result search() {\n        .. \n        Product.doSearch(search.getKeyword());\n        ..\n    }    \n     // Scala\n    def create = Action(BodyParsers.parse.json) { implicit request =&gt;\n   ..\n      ProductManager.index(p)\n      ..\n    }\n     def search = Action(BodyParsers.parse.json) { implicit request =&gt;\n      ..\n      val results = ProductManager.doSearch(search.keyword)\n      ..\n    }\n```", "```java\n<span class=\"strong\"><strong>[info] application - Elasticsearch : Settings  {client.transport.sniff=false, cluster.name=elasticsearch}</strong></span>\n<span class=\"strong\"><strong>[info] application - ElasticSearch : Starting in Client Mode</strong></span>\n<span class=\"strong\"><strong>[info] application - ElasticSearch : Client - Host: 192.168.59.103 Port: 9300</strong></span>\n<span class=\"strong\"><strong>[info] application - ElasticSearch : Started in Client Mode</strong></span>\n<span class=\"strong\"><strong>[info] application - ElasticSearch : Plugin has started</strong></span>\n<span class=\"strong\"><strong>[info] play - Application started (Dev)</strong></span>\n```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n          \"com.nimbusds\" % \"nimbus-jose-jwt\" % \"3.8.2\"\n        )\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator play-generate-secret</strong></span>\n    <span class=\"strong\"><strong>    [info] Loading project definition from /Users/ginduc/Developer/workspace/bitbucket/Play2.0CookbookRecipes/Ch06/foo_java/project</strong></span>\n    <span class=\"strong\"><strong>    [info] Set current project to foo_java (in build file:/Users/ginduc/Developer/workspace/bitbucket/Play2.0CookbookRecipes/Ch06/foo_java/)</strong></span>\n    <span class=\"strong\"><strong>    [info] Generated new secret: DDqEUkPssmdHOL=U`XMANZAPYG4fUYA5QwGtK49[PmUh2kAH/IpHuHuLIuNgv_o_</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 0 s, completed 02 24, 15 11:44:42 AM</strong></span>\n    ```", "```java\n    jwt.sharedSecret = \"DDqEUkPssmdHOL=U`XMANZAPYG4fUYA5QwGtK49[PmUh2kAH/IpHuHuLIuNgv_o_\"\n        jwt.issuer=&lt;YOUR_ISSUER&gt;\n        jwt.expiryInSecs=600\n        jwt.audience=&lt;YOUR_AUDIENCE&gt;\n    ```", "```java\n    package plugins;\n         import com.nimbusds.jose.JWSAlgorithm;\n        import com.nimbusds.jose.JWSHeader;\n        import com.nimbusds.jose.crypto.MACSigner;\n        import com.nimbusds.jose.crypto.MACVerifier;\n        import com.nimbusds.jwt.JWTClaimsSet;\n        import com.nimbusds.jwt.SignedJWT;\n        import play.Application;\n        import play.Logger;\n        import play.Plugin;\n        import java.util.Date;\n         public class JWTPlugin extends Plugin {\n            final private String tokenPrefix = \"Bearer \";\n             private String issuer;\n            private String sharedSecret;\n            private Integer expiryTime;\n            private String audience;\n            private JWSHeader algorithm;\n            private MACSigner signer;\n            private MACVerifier verifier;\n             public JWTPlugin(Application app) {\n                super();\n                 issuer = app.configuration().getString(\"jwt.issuer\");\n                sharedSecret = app.configuration().getString(\"jwt.sharedSecret\");\n                expiryTime = app.configuration().getInt(\"jwt.expiryInSecs\");\n                audience = app.configuration().getString(\"jwt.audience\");\n            }\n             public void onStart() {\n                algorithm = new JWSHeader(JWSAlgorithm.HS256);\n                signer = new MACSigner(sharedSecret);\n                verifier = new MACVerifier(sharedSecret);\n            }\n             public void onStop() {\n                algorithm = null;\n                signer = null;\n                verifier = null;\n            }\n             public boolean verify(String token) {\n                try {\n                    final JWTClaimsSet payload = decode(token);\n                     // Check expiration date\n                    if (!new Date().before(payload.getExpirationTime())) {\n                        Logger.error(\"Token expired: \" + payload.getExpirationTime());\n                        return false;\n                    }\n                     // Match Issuer\n                    if (!payload.getIssuer().equals(issuer)) {\n                        Logger.error(\"Issuer mismatch: \" + payload.getIssuer());\n                        return false;\n                    }\n                     // Match Audience\n                    if (payload.getAudience() != null &amp;&amp; payload.getAudience().size() &gt; 0) {\n                        if (!payload.getAudience().get(0).equals(audience)) {\n                            Logger.error(\"Audience mismatch: \" + payload.getAudience().get(0));\n                            return false;\n                        }\n                    } else {\n                        Logger.error(\"Audience is required\");\n                        return false;\n                    }\n                     return true;\n                } catch(Exception e) {\n                    return false;\n                }\n            }\n             public JWTClaimsSet decode(String token) throws Exception {\n                Logger.debug(\"Verifying: \" + token.substring(tokenPrefix.length()));\n                SignedJWT signedJWT = SignedJWT.parse(token.substring(tokenPrefix.length()));\n                 if (!signedJWT.verify(verifier)) {\n                    throw new IllegalArgumentException(\"Json Web Token cannot be verified!\");\n                }\n                 return (JWTClaimsSet) signedJWT.getJWTClaimsSet();\n            }\n             public String sign(String userInfo) throws Exception {\n                final JWTClaimsSet claimsSet = new JWTClaimsSet();\n                claimsSet.setSubject(userInfo);\n                claimsSet.setIssueTime(new Date());\n                claimsSet.setIssuer(issuer);\n                claimsSet.setAudience(audience);\n                claimsSet.setExpirationTime(\n                    new Date(claimsSet.getIssueTime().getTime() + (expiryTime * 1000))\n                );\n                 SignedJWT signedJWT = new SignedJWT(algorithm, claimsSet);\n                signedJWT.sign(signer);\n                return signedJWT.serialize();\n            }\n             public boolean enabled() {\n                return true;\n            }\n        }\n    ```", "```java\n    10099:plugins.JWTPlugin\n    ```", "```java\n    package controllers;\n         import play.*;\n        import play.mvc.*;\n        import play.libs.*;\n        import play.libs.F.*;\n        import plugins.JWTPlugin;\n         public class JWTSigned extends play.mvc.Action.Simple {\n            private static final String AUTHORIZATION = \"Authorization\";\n            private static final String WWW_AUTHENTICATE = \"WWW-Authenticate\";\n            private static final String APP_REALM = \"Protected Realm\";\n            private static final String AUTH_HEADER_PREFIX = \"Bearer \";\n            private static JWTPlugin jwt = Play.application().plugin(JWTPlugin.class);\n             public F.Promise&lt;Result&gt; call(Http.Context ctx) throws Throwable {\n                try {\n                    final String authHeader = ctx.request().getHeader(AUTHORIZATION);\n                     if (authHeader != null &amp;&amp; authHeader.startsWith(AUTH_HEADER_PREFIX)) {\n                        if (jwt.verify(authHeader)) {\n                            return delegate.call(ctx);\n                        }\n                    } else {\n                        return Promise.pure((Result) unauthorized());\n                    }\n                } catch (Exception e) {\n                    Logger.error(\"Error during session authentication: \" + e);\n                }\n                 ctx.response().setHeader(WWW_AUTHENTICATE, APP_REALM);\n                return Promise.pure((Result) forbidden());\n            }\n        }\n    ```", "```java\n    package controllers;\n         import play.*;\n        import play.data.Form;\n        import play.mvc.*;\n         import plugins.JWTPlugin;\n        import views.html.*;\n         import java.util.HashMap;\n        import java.util.Map;\n         import static play.libs.Json.toJson;\n         public class Application extends Controller {\n            private static JWTPlugin jwt = Play.application().plugin(JWTPlugin.class);\n             public static Result index() {\n                return ok(index.render(\"Your new application is ready.\"));\n            }\n             @With(JWTSigned.class)\n            public static Result adminOnly() {\n                return ok(\"\");\n            }\n             @BodyParser.Of(BodyParser.Json.class)\n            public static Result auth() {\n                try {\n                    Form&lt;Login&gt; form = Form.form(Login.class).bindFromRequest();\n                    Login login = form.get();\n                    if (login.getUsername().equals(\"ned\") &amp;&amp; login.getPassword().equals(\"flanders\")) {\n                        final String token = jwt.sign(login.getUsername());\n                        final Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\n                        map.put(\"token\", token);\n                        return ok(toJson(map));\n                    } else {\n                        return forbidden();\n                    }\n                 } catch (Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            }\n        }\n    ```", "```java\n    package controllers;\n         public class Login {\n            private String username;\n            private String password;\n             public Login() {}\n            public Login(String username, String password) {\n                this.username = username;\n                this.password = password;\n            }\n             public String getUsername() {\n                return username;\n            }\n             public void setUsername(String username) {\n                this.username = username;\n            }\n             public String getPassword() {\n                return password;\n            }\n             public void setPassword(String password) {\n                this.password = password;\n            }\n        }\n    ```", "```java\n    POST    /user/auth           controllers.Application.auth\n        GET     /admin               controllers.Application.adminOnly\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n    <span class=\"strong\"><strong>    &lt; WWW-Authenticate: Basic realm=\"Protected Realm\"</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/user/auth --header \"Content-type: application/json\" -d '{\"username\":\"ned\", \"password\":\"flanders\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /user/auth HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 41</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 41 out of 41 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 181</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>{\"token\":\"eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin --header \"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin --header \"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 403 Forbidden</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    activator \"~run\"</strong></span>\n    ```", "```java\n    libraryDependencies ++= Seq(\n          \"com.nimbusds\" % \"nimbus-jose-jwt\" % \"3.8.2\"\n         )\n    ```", "```java\n    <span class=\"strong\"><strong>    $ activator play-generate-secret</strong></span>\n    <span class=\"strong\"><strong>    [info] Loading project definition from /Users/ginduc/Developer/workspace/bitbucket/Play2.0CookbookRecipes/Ch06/foo_scala/project</strong></span>\n    <span class=\"strong\"><strong>    [info] Set current project to foo_scala (in build file:/Users/ginduc/Developer/workspace/bitbucket/Play2.0CookbookRecipes/Ch06/foo_scala/)</strong></span>\n    <span class=\"strong\"><strong>    [info] Generated new secret: LKQhArck[KCAFcEplWDeBSV^e@a1o6X&gt;2SI_D3Q^X0h`eigla5ywm^k6E9z7Nx=p</strong></span>\n    <span class=\"strong\"><strong>    [success] Total time: 0 s, completed 02 23, 15 10:32:56 PM</strong></span>\n    ```", "```java\n    jwt.sharedSecret = \"LKQhArck[KCAFcEplWDeBSV^e@a1o6X&gt;2SI_D3Q^X0h`eigla5ywm^k6E9z7Nx=p\"\n        jwt.issuer=&lt;YOUR_ISSUER&gt;\n        jwt.expiryInSecs=600\n        jwt.audience=&lt;YOUR_AUDIENCE&gt;\n    ```", "```java\n    package plugins\n         import java.util.Date\n        import com.nimbusds.jose.crypto.{MACVerifier, MACSigner}\n        import com.nimbusds.jose.{JWSAlgorithm, JWSHeader}\n        import com.nimbusds.jwt.{JWTClaimsSet, SignedJWT}\n        import play.api.{Logger, Play, Application, Plugin}\n        import play.api.Play.current\n         class JWTPlugin(app: Application) extends Plugin {\n          val tokenPrefix = \"Bearer \"\n           private val issuer = Play.application.configuration.getString(\"jwt.issuer\").getOrElse(\"jwt\")\n          private val sharedSecret = Play.application.configuration.getString(\"jwt.sharedSecret\")\n        .getOrElse(throw new IllegalStateException(\"JWT Shared Secret is required!\"))\n          private val expiryTime = Play.application.configuration.getInt(\"jwt.expiryInSecs\").getOrElse(60 * 60 * 24)\n          private val audience = Play.application.configuration.getString(\"jwt.audience\").getOrElse(\"jwt\")\n          private val algorithm = new JWSHeader(JWSAlgorithm.HS256)\n\n          private lazy val signer: MACSigner = new MACSigner(sharedSecret)\n          private lazy val verifier: MACVerifier = new MACVerifier(sharedSecret)\n           override def onStart() = {\n\n           signer\n            verifier\n          }\n           override def onStop() = {\n            Logger.info(\"Shutting down plugin\")\n          }\n           def verify(token: String): Boolean = {\n            val payload = decode(token)\n             // Check expiration date\n            if (!new Date().before(payload.getExpirationTime)) {\n              Logger.error(\"Token expired: \" + payload.getExpirationTime)\n              return false\n            }\n             // Match Issuer\n            if (!payload.getIssuer.equals(issuer)) {\n              Logger.error(\"Issuer mismatch: \" + payload.getIssuer)\n              return false\n            }\n             // Match Audience\n            if (payload.getAudience != null &amp;&amp; payload.getAudience.size() &gt; 0) {\n              if (!payload.getAudience.get(0).equals(audience)) {\n                Logger.error(\"Audience mismatch: \" + payload.getAudience.get(0))\n                return false\n              }\n            } else {\n              Logger.error(\"Audience is required\")\n              return false\n            }\n            return true\n          }\n           def decode(token: String) = {\n            val signedJWT = SignedJWT.parse(token.substring(tokenPrefix.length))\n             if (!signedJWT.verify(verifier)) {\n              throw new IllegalArgumentException(\"Json Web Token cannot be verified!\")\n            }\n             signedJWT.getJWTClaimsSet\n          }\n           def sign(userInfo: String): String = {\n            val claimsSet = new JWTClaimsSet()\n            claimsSet.setSubject(userInfo)\n            claimsSet.setIssueTime(new Date)\n            claimsSet.setIssuer(issuer)\n            claimsSet.setAudience(audience)\n            claimsSet.setExpirationTime(\n              new Date(claimsSet.getIssueTime.getTime + (expiryTime * 1000))\n            )\n             val signedJWT = new SignedJWT(algorithm, claimsSet)\n            signedJWT.sign(signer)\n            signedJWT.serialize()\n          }\n        override def enabled = true\n        }\n    ```", "```java\n    10099:plugins.JWTPlugin\n    ```", "```java\n    package controllers\n         import play.api.Play\n        import play.api.mvc.{Result, WrappedRequest, Request, ActionBuilder}\n        import play.api.http.HeaderNames._\n        import play.api.mvc.Results._\n        import play.api.Play.current\n        import plugins.JWTPlugin\n        import scala.concurrent.Future\n         class JWTSignedRequest[A](val jwt: String, request: Request[A]) extends WrappedRequest[A](request)\n         object JWTSigned extends ActionBuilder[JWTSignedRequest] {\n          private val jwt = Play.application.plugin[JWTPlugin].get\n           def invokeBlock[A](req: Request[A], block: (JWTSignedRequest[A]) =&gt; Future[Result]) = {\n            req.headers.get(AUTHORIZATION) map { token =&gt;\n              if (jwt.verify(token)) {\n                block(new JWTSignedRequest(token, req))\n              } else {\n                Future.successful(Forbidden)\n              }\n            } getOrElse {\n              Future.successful(Unauthorized.withHeaders(WWW_AUTHENTICATE -&gt; \"\"\"Basic realm=\"Protected Realm\"\"\"\"))\n            }\n          }\n        }\n    ```", "```java\n    case class Login(username: String, password: String)\n\n        private val jwt = Play.application.plugin[JWTPlugin].get\n        implicit private val productWrites = Json.writes[Login]\n        implicit private val productReads = Json.reads[Login]\n         def adminOnly = JWTSigned {\n          Ok(\"\")\n        }\n         def auth = Action(BodyParsers.parse.json) { implicit request =&gt;\n          val post = request.body.validate[Login]\n           post.fold(\n            errors =&gt; Unauthorized,\n            u =&gt; {\n              if (u.username.equals(\"ned\") &amp;&amp; u.password.equals(\"flanders\")) {\n                 Ok(Json.obj(\"token\" -&gt; jwt.sign(u.username)))\n              } else {\n                Forbidden\n              }\n            }\n          )\n        }\n    ```", "```java\n    POST    /user/auth           controllers.Application.auth\n        GET     /admin               controllers.Application.adminOnly\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n    <span class=\"strong\"><strong>    &lt; WWW-Authenticate: Basic realm=\"Protected Realm\"</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/user/auth --header \"Content-type: application/json\" -d '{\"username\":\"ned\", \"password\":\"flanders\"}'</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; POST /user/auth HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>    &gt; Content-Length: 41</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    * upload completely sent off: 41 out of 41 bytes</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 181</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>{\"token\":\"eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"}%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin --header \"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin --header \"Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc\"</strong></span>\n    <span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>    &gt; Authorization: Bearer eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDM0NjAsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDM0MDB9.No2skaVfGeERDY6yEMJV8KiRddZsZEcW5BAH2vw99Xc</strong></span>\n    <span class=\"strong\"><strong>    &gt;</strong></span>\n    <span class=\"strong\"><strong>    &lt; HTTP/1.1 403 Forbidden</strong></span>\n    <span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n    <span class=\"strong\"><strong>    &lt;</strong></span>\n    <span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n    ```", "```java\n// Java \n    public JWTPlugin(Application app) {\n        super();\n        issuer = app.configuration().getString(\"jwt.issuer\");\n        sharedSecret = app.configuration().getString(\"jwt.sharedSecret\");\n        expiryTime = app.configuration().getInt(\"jwt.expiryInSecs\");\n        audience = app.configuration().getString(\"jwt.audience\");\n    }\n     public void onStart() {\n        algorithm = new JWSHeader(JWSAlgorithm.HS256);\n        signer = new MACSigner(sharedSecret);\n        verifier = new MACVerifier(sharedSecret);\n    }    \n     // Scala\n    private val issuer = Play.application.configuration.getString(\"jwt.issuer\").getOrElse(\"jwt\")\n    private val sharedSecret = Play.application.configuration.getString(\"jwt.sharedSecret\")\n    .getOrElse(throw new IllegalStateException(\"JWT Shared Secret is required!\"))\n    private val expiryTime = Play.application.configuration.getInt(\"jwt.expiryInSecs\").getOrElse(60 * 60 * 24)\n    private val audience = Play.application.configuration.getString(\"jwt.audience\").getOrElse(\"jwt\")\n    private val algorithm = new JWSHeader(JWSAlgorithm.HS256)\n    private var signer: MACSigner = null\n    private var verifier: MACVerifier = null\n     override def onStart() = {\n      signer = new MACSigner(sharedSecret)\n      verifier = new MACVerifier(sharedSecret)\n    }\n```", "```java\n// Java\n    algorithm = new JWSHeader(JWSAlgorithm.HS256);\n```", "```java\n// Scala\n    private val algorithm = new JWSHeader(JWSAlgorithm.HS256)\n```", "```java\n// Java \n    public String sign(String userInfo) throws Exception {\n        final JWTClaimsSet claimsSet = new JWTClaimsSet();\n        claimsSet.setSubject(userInfo);\n        claimsSet.setIssueTime(new Date());\n        claimsSet.setIssuer(issuer);\n        claimsSet.setAudience(audience);\n        claimsSet.setExpirationTime(\n            new Date(claimsSet.getIssueTime().getTime() + (expiryTime * 1000))\n        );\n         SignedJWT signedJWT = new SignedJWT(algorithm, claimsSet);\n        signedJWT.sign(signer);\n        return signedJWT.serialize();\n    }    \n     // Scala\n    def sign(userInfo: String): String = {\n      val claimsSet = new JWTClaimsSet()\n      claimsSet.setSubject(userInfo)\n      claimsSet.setIssueTime(new Date)\n      claimsSet.setIssuer(issuer)\n      claimsSet.setAudience(audience)\n      claimsSet.setExpirationTime(\n        new Date(claimsSet.getIssueTime.getTime + (expiryTime * 1000))\n      )\n       val signedJWT = new SignedJWT(algorithm, claimsSet)\n      signedJWT.sign(signer)\n      signedJWT.serialize()\n    }\n```", "```java\n// Java\n    public boolean verify(String token) {\n        try {\n            final JWTClaimsSet payload = decode(token);\n             // Check expiration date\n            if (!new Date().before(payload.getExpirationTime())) {\n                Logger.error(\"Token expired: \" + payload.getExpirationTime());\n                return false;\n            }\n             // Match Issuer\n            if (!payload.getIssuer().equals(issuer)) {\n                Logger.error(\"Issuer mismatch: \" + payload.getIssuer());\n                return false;\n            }\n             // Match Audience\n            if (payload.getAudience() != null &amp;&amp; payload.getAudience().size() &gt; 0) {\n                if (!payload.getAudience().get(0).equals(audience)) {\n                    Logger.error(\"Audience mismatch: \" + payload.getAudience().get(0));\n                    return false;\n                }\n            } else {\n                Logger.error(\"Audience is required\");\n                return false;\n            }\n             return true;\n        } catch(Exception e) {\n            return false;\n        }\n    }\n     // Scala\n    def verify(token: String): Boolean = {\n      val payload = decode(token)\n       // Check expiration date\n      if (!new Date().before(payload.getExpirationTime)) {\n        Logger.error(\"Token expired: \" + payload.getExpirationTime)\n        return false\n      }\n       // Match Issuer\n      if (!payload.getIssuer.equals(issuer)) {\n        Logger.error(\"Issuer mismatch: \" + payload.getIssuer)\n        return false\n      }\n       // Match Audience\n      if (payload.getAudience != null &amp;&amp; payload.getAudience.size() &gt; 0) {\n        if (!payload.getAudience.get(0).equals(audience)) {\n          Logger.error(\"Audience mismatch: \" + payload.getAudience.get(0))\n          return false\n        }\n      } else {\n        Logger.error(\"Audience is required\")\n        return false\n      }\n       return true\n    }\n```", "```java\n// Java \n    public F.Promise&lt;Result&gt; call(Http.Context ctx) throws Throwable {\n        try {\n            final String authHeader = ctx.request().getHeader(AUTHORIZATION);\n             if (authHeader != null &amp;&amp; authHeader.startsWith(AUTH_HEADER_PREFIX)) {\n                if (jwt.verify(authHeader)) {\n                    return delegate.call(ctx);\n                }\n            }\n        } catch (Exception e) {\n            Logger.error(\"Error during session authentication: \" + e);\n        }\n         ctx.response().setHeader(WWW_AUTHENTICATE, APP_REALM);\n        return Promise.pure((Result) forbidden());\n    }\n     // Scala\n    def invokeBlock[A](req: Request[A], block: (JWTSignedRequest[A]) =&gt; Future[Result]) = {\n      req.headers.get(AUTHORIZATION) map { token =&gt;\n        if (jwt.verify(token)) {\n          block(new JWTSignedRequest(token, req))\n        } else {\n          Future.successful(Forbidden)\n        }\n      } getOrElse {\n        Future.successful(Unauthorized.withHeaders(WWW_AUTHENTICATE -&gt; \"\"\"Basic realm=\"Protected Realm\"\"\"\"))\n      }\n    }\n```", "```java\n// Java \n    @With(JWTSigned.class)\n    public static Result adminOnly() {\n        return ok(\"\");\n    }\n     // Scala\n    def adminOnly = JWTSigned {\n      Ok(\"\")\n    }\n```", "```java\n<span class=\"strong\"><strong>    # Signing    </strong></span>\n <span class=\"strong\"><strong>    $ curl http://localhost:9000/user/auth --header \"Content-type: application/json\" -d '{\"username\":\"ned\", \"password\":\"flanders\"}'</strong></span>\n<span class=\"strong\"><strong>{\"token\":\"eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE0MjQ3MDUzOTgsInN1YiI6Im5lZCIsImF1ZCI6ImFwaWNsaWVudHMiLCJpc3MiOiJwMmMiLCJpYXQiOjE0MjQ3MDUzMzh9.uE5GNQv2uXQh29sHhy_Jbg9omDhQMrnW1tjqFBrUwSs\"}%</strong></span>\n <span class=\"strong\"><strong>    # Verifying</strong></span>\n<span class=\"strong\"><strong>    $ curl -v http://localhost:9000/admin</strong></span>\n<span class=\"strong\"><strong>    * Hostname was NOT found in DNS cache</strong></span>\n<span class=\"strong\"><strong>    *   Trying ::1...</strong></span>\n<span class=\"strong\"><strong>    * Connected to localhost (::1) port 9000 (#0)</strong></span>\n<span class=\"strong\"><strong>    &gt; GET /admin HTTP/1.1</strong></span>\n<span class=\"strong\"><strong>    &gt; User-Agent: curl/7.37.1</strong></span>\n<span class=\"strong\"><strong>    &gt; Host: localhost:9000</strong></span>\n<span class=\"strong\"><strong>    &gt; Accept: */*</strong></span>\n<span class=\"strong\"><strong>    &gt;</strong></span>\n<span class=\"strong\"><strong>    &lt; HTTP/1.1 401 Unauthorized</strong></span>\n<span class=\"strong\"><strong>    &lt; WWW-Authenticate: Basic realm=\"Protected Realm\"</strong></span>\n<span class=\"strong\"><strong>    &lt; Content-Length: 0</strong></span>\n<span class=\"strong\"><strong>    &lt;</strong></span>\n<span class=\"strong\"><strong>    * Connection #0 to host localhost left intact</strong></span>\n```"]