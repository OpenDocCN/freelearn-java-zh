- en: Chapter 7. Working with WebStart and the Browser Plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building the IcedTea browser plugin on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the IcedTea Java WebStart implementation on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the IcedTea Java WebStart implementation for Mac OS X
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the IcedTea Java WebStart implementation for Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For a long time, for end users, the Java applets technology was the face of
    the whole Java world. For a lot of non-developers, the word Java itself is a synonym
    for the Java browser plugin that allows running Java applets inside web browsers.
    The **Java WebStart** technology is similar to the Java browser plugin but runs
    remotely on loaded Java applications as separate applications outside of web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenJDK open source project does not contain the implementations for the
    browser plugin nor for the WebStart technologies. The Oracle Java distribution,
    otherwise matching closely to OpenJDK codebases, provided its own closed source
    implementation for these technologies.
  prefs: []
  type: TYPE_NORMAL
- en: The IcedTea-Web project contains free and open source implementations of the
    browser plugin and WebStart technologies. The IcedTea-Web browser plugin supports
    only GNU/Linux operating systems and the WebStart implementation is cross-platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'While the IcedTea implementation of WebStart is well-tested and production-ready,
    it has numerous incompatibilities with the Oracle WebStart implementation. These
    differences can be seen as corner cases; some of them are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Different behavior when** **parsing not well-formed JNLP descriptor files**:
    The Oracle implementation is generally more lenient for malformed descriptors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Differences in JAR (re)downloading and caching behavior**: The Oracle implementation
    uses caching more aggressively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Differences in sound support**: This is due to differences in sound support
    between Oracle Java and IcedTea on Linux. Linux historically has multiple different
    sound providers (ALSA, PulseAudio, and so on) and IcedTea has more wide support
    for different providers, which can lead to sound misconfiguration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IcedTea-Web browser plugin (as it is built on WebStart) has these incompatibilities
    too. On top of them, it can have more incompatibilities in relation to browser
    integration. User interface forms and general browser-related operations such
    as access from/to JavaScript code should work fine with both implementations.
    But historically, the browser plugin was widely used for security-critical applications
    like online bank clients. Such applications usually require security facilities
    from browsers, such as access to certificate stores or hardware crypto-devices
    that can differ from browser to browser, depending on the OS (for example, supports
    only Windows), browser version, Java version, and so on. Because of that, many
    real-world applications can have problems running the IcedTea-Web browser plugin
    on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: Both WebStart and the browser plugin are built on the idea of downloading (possibly
    untrusted) code from remote locations, and proper privilege checking and sandboxed
    execution of that code is a notoriously complex task. Usually reported security
    issues in the Oracle browser plugin (most widely known are issues during the year
    2012) are also fixed separately in IcedTea-Web.
  prefs: []
  type: TYPE_NORMAL
- en: Building the IcedTea browser plugin on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The IcedTea-Web project is not inherently cross-platform; it is developed on
    Linux and for Linux, and so it can be built quite easily on popular Linux distributions.
    The two main parts of it (stored in corresponding directories in the source code
    repository) are `netx` and `plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: NetX is a pure Java implementation of the WebStart technology. We will look
    at it more thoroughly in the following recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin is an implementation of the browser plugin using the `NPAPI` plugin architecture
    that is supported by multiple browsers. Plugin is written partly in Java and partly
    in native code (C++), and it officially supports only Linux-based operating systems.
    There exists an opinion about `NPAPI` that this architecture is dated, overcomplicated,
    and insecure, and that modern web browsers have enough built-in capabilities to
    not require external plugins. And browsers have gradually reduced support for
    `NPAPI`. Despite that, at the time of writing this book, the IcedTea-Web browser
    plugin worked on all major Linux browsers (Firefox and derivatives, Chromium and
    derivatives, and Konqueror).
  prefs: []
  type: TYPE_NORMAL
- en: We will build the IcedTea-Web browser plugin from sources using Ubuntu 12.04
    LTS amd64.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a clean Ubuntu 12.04 running with the Firefox
    web browser installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you to build the IcedTea-Web browser plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install prepackaged binaries of OpenJDK 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the GCC toolchain and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the specific dependency for the browser plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress the IcedTea-Web source code tarball:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `configure` script to set up the build environment:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the build process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the newly built plugin into the `/usr/local` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Configure the Firefox web browser to use the newly built plugin library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check whether the IcedTea-Web plugin has appeared under **Tools** | **Add-ons**
    | **Plugins**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the [http://java.com/en/download/installed.jsp](http://java.com/en/download/installed.jsp)
    web page to verify that the browser plugin works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The IcedTea browser plugin requires the IcedTea Java implementation to be compiled
    successfully. The prepackaged OpenJDK 7 binaries in Ubuntu 12.04 are based on
    IcedTea, so we installed them first. The plugin uses the GNU Autconf build system
    that is common between free software tools. The `xulrunner-dev` package is required
    to access the `NPAPI` headers.
  prefs: []
  type: TYPE_NORMAL
- en: The built plugin may be installed into Firefox for the current user only without
    requiring administrator privileges. For that, we created a symbolic link to our
    plugin in the place where Firefox expects to find the `libjavaplugin.so` plugin
    library.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The plugin can also be installed into other browsers with `NPAPI` support, but
    installation instructions can be different for different browsers and different
    Linux distributions.
  prefs: []
  type: TYPE_NORMAL
- en: As the `NPAPI` architecture does not depend on the operating system, in theory,
    a plugin can be built for non-Linux operating systems. But currently, no such
    ports are planned.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the IcedTea Java WebStart implementation on Linux* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing the IcedTea Java WebStart implementation for Mac OS X* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing the IcedTea Java WebStart implementation for Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Building IcedTea"), *Building IcedTea*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with GNU Autoconf* recipe from [Chapter 4](ch04.html "Chapter 4. Building
    OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IcedTea-Web project website at [http://icedtea.classpath.org/wiki/IcedTea-Web](http://icedtea.classpath.org/wiki/IcedTea-Web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NetX project website at [http://jnlp.sourceforge.net/netx/](http://jnlp.sourceforge.net/netx/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java WebStart developers guide at [http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/](http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NPAPI project site at [https://wiki.mozilla.org/NPAPI](https://wiki.mozilla.org/NPAPI)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details on NPAPI support in different browsers at [http://www.firebreath.org/display/documentation/Browser+Plugins+in+a+post-NPAPI+world](http://www.firebreath.org/display/documentation/Browser+Plugins+in+a+post-NPAPI+world)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the IcedTea Java WebStart implementation on Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On the Java platform, the JVM needs to perform the class load process for each
    class it wants to use. This process is opaque for the JVM and actual bytecode
    for loaded classes may come from one of many sources. For example, this method
    allows the Java Applet classes to be loaded from a remote server to the Java process
    inside the web browser. Remote class loading also may be used to run remotely
    loaded Java applications in standalone mode without integration with the web browser.
    This technique is called Java WebStart and was developed under **Java Specification
    Request** (**JSR**) number 56.
  prefs: []
  type: TYPE_NORMAL
- en: To run the Java application remotely, WebStart requires an application descriptor
    file that should be written using the **Java Network Launching Protocol** (**JNLP**)
    syntax. This file is used to define the remote server to load the application
    form along with some metainformation. The WebStart application may be launched
    from the web page by clicking on the JNLP link, or without the web browser using
    the JNLP file obtained beforehand. In either case, running the application is
    completely separate from the web browser, but uses a sandboxed security model
    similar to Java Applets.
  prefs: []
  type: TYPE_NORMAL
- en: The OpenJDK project does not contain the WebStart implementation; the Oracle
    Java distribution provides its own closed-source WebStart implementation. The
    open source WebStart implementation exists as part of the IcedTea-Web project.
    It was initially based on the **NETwork eXecute** (**NetX**) project. Contrary
    to the Applet technology, WebStart does not require any web browser integration.
    This allowed developers to implement the NetX module using pure Java without native
    code. For integration with Linux-based operating systems, IcedTea-Web implements
    the `javaws` command as shell script that launches the `netx.jar` file with proper
    arguments.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will build the NetX module from the official IcedTea-Web
    source tarball.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a clean Ubuntu 12.04 running with the Firefox
    web browser installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you to build a NetX module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install prepackaged binaries of OpenJDK 7:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the GCC toolchain and build dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and decompress the IcedTea-Web source code tarball:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the `configure` script to set up a build environment excluding the browser
    plugin from the build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the build process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the newly-built plugin into the `/usr/local` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the WebStart application example from the Java tutorial:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `javaws` shell script is installed into the `/usr/local/*` directory. When
    launched with a path or a link to the JNLP file, `javaws` launches the `netx.jar`
    file, adding it to the boot classpath (for security reasons) and providing the
    JNLP link as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing the IcedTea Java WebStart implementation for Mac OS X* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Preparing the IcedTea Java WebStart implementation for Windows* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building the IcedTea browser plugin on Linux* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with GNU Autoconf* recipe from [Chapter 4](ch04.html "Chapter 4. Building
    OpenJDK 8"), *Building OpenJDK 8*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IcedTea-Web project website at [http://icedtea.classpath.org/wiki/IcedTea-Web](http://icedtea.classpath.org/wiki/IcedTea-Web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NetX project website at [http://jnlp.sourceforge.net/netx/](http://jnlp.sourceforge.net/netx/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java WebStart developers guide at [http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/](http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the IcedTea Java WebStart implementation for Mac OS X
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NetX WebStart implementation from the IcedTea-Web project is written in
    pure Java, so it can also be used on Mac OS X. IcedTea-Web provides the `javaws`
    launcher implementation only for Linux-based operating systems. In this recipe,
    we will create a simple implementation of the WebStart launcher script for Mac
    OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need Mac OS X Lion with Java 7 (the prebuilt OpenJDK
    or Oracle one) installed. We will also need the `netx.jar` module from the IcedTea-Web
    project, which can be built using instructions from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you to run WebStart applications on Mac OS
    X:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the JNLP descriptor example from the Java tutorials at [http://docs.oracle.com/javase/tutorialJWS/samples/deployment/dynamictree_webstartJWSProject/dynamictree_webstart.jnlp](http://docs.oracle.com/javase/tutorialJWS/samples/deployment/dynamictree_webstartJWSProject/dynamictree_webstart.jnlp).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Test that this application can be run from the terminal using `netx.jar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `wslauncher.sh` bash script with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Mark the launcher script as executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the launcher script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `next.jar` file contains a Java application that can read JNLP files and
    download and run classes described in JNLP. But for security reasons, `next.jar`
    cannot be launched directly as an application (using the `java -jar netx.jar`
    syntax). Instead, `netx.jar` is added to the privileged boot classpath and is
    run specifying the main class directly. This allows us to download applications
    in sandbox mode.
  prefs: []
  type: TYPE_NORMAL
- en: The `wslauncher.sh` script tries to find the Java executable file using the
    `PATH` and `JAVA_HOME` environment variables and then launches specified JNLP
    through `netx.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `wslauncher.sh` script provides a basic solution to run WebStart applications
    from the terminal. To integrate `netx.jar` into your operating system environment
    properly (to be able to launch WebStart apps using JNLP links from the web browser),
    a native launcher or custom platform scripting solution may be used. Such solutions
    lay down the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the IcedTea Java WebStart implementation on Linux* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building OpenJDK 7 on Mac OS X* recipe from [Chapter 3](ch03.html "Chapter 3. Building
    OpenJDK 7"), *Building OpenJDK 7*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IcedTea-Web project website at [http://icedtea.classpath.org/wiki/IcedTea-Web](http://icedtea.classpath.org/wiki/IcedTea-Web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NetX project website at [http://jnlp.sourceforge.net/netx/](http://jnlp.sourceforge.net/netx/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java WebStart developers guide at [http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/](http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple Inc. support article about enabling WebStart on Apple Java at [http://support.apple.com/kb/HT5559](http://support.apple.com/kb/HT5559)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the IcedTea Java WebStart implementation for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The NetX WebStart implementation from the IcedTea-Web project is written in
    pure Java, so it can also be used on Windows; we also used it on Linux and Mac
    OS X in previous recipes in this chapter. In this recipe, we will create a simple
    implementation of the WebStart launcher script for Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will need a version of Windows running with Java 7 (the
    prebuilt OpenJDK or Oracle one) installed. We will also need the `netx.jar` module
    from the IcedTea-Web project, which can be built using instructions from the previous
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following procedure will help you to run WebStart applications on Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the JNLP descriptor example from the Java tutorials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test that this application can be run from the Command Prompt using `netx.jar`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a batch file, `wslauncher.bat`, with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the application using the launcher script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `netx.jar` module must be added to the boot classpath as it cannot be run
    directly because of security reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The `wslauncher.bat` script tries to find the Java executable using the `JAVA_HOME`
    environment variable and then launches specified JNLP through `netx.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `wslauncher.bat` script may be registered as a default application to run
    the JNLP files. This will allow you to run WebStart applications from the web
    browser. But the current script will show the batch window for a short period
    of time before launching the application. It also does not support looking for
    Java executables in the Windows Registry. A more advanced script without those
    problems may be written using Visual Basic script (or any other native scripting
    solution) or as a native executable launcher. Such solutions lay down the scope
    of this book.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Preparing the IcedTea Java WebStart implementation for Mac OS X* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Building 64-bit OpenJDK 7 on Windows 7 x64 SP1* recipe from [Chapter 3](ch03.html
    "Chapter 3. Building OpenJDK 7"), *Building OpenJDK 7*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IcedTea-Web project website at [http://icedtea.classpath.org/wiki/IcedTea-Web](http://icedtea.classpath.org/wiki/IcedTea-Web)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The NetX project website at [http://jnlp.sourceforge.net/netx/](http://jnlp.sourceforge.net/netx/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Java WebStart developers guide at [http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/](http://docs.oracle.com/javase/6/docs/technotes/guides/javaws/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Articles on ActiveX technology from Microsoft that is similar to NPAPI at [http://msdn.microsoft.com/en-us/library/aa751968%28v=vs.85%29.aspx](http://msdn.microsoft.com/en-us/library/aa751968%28v=vs.85%29.aspx)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
