["```java\n        netbeans_default_options=\"-J-client -J-Xss2m -J-Xms32m -J-XX:PermSize=32m -J-Dapple.laf.useScreenMenuBar=true -J-Dapple.awt.graphics.UseQuartz=true -J-Dsun.java2d.noddraw=true -J-Dsun.java2d.dpiaware=true -J-Dsun.zip.disableMemoryMapping=true\"\n\n        ```", "```java\n    #!/bin/sh\n    export LANG=C\n    export ALT_BOOTDIR=/usr/lib/jvm/java\n    ./jdk/make/jdk_generic_profile.sh\n    make $*\n\n    ```", "```java\nsudo apt-get install mercurial\n\n```", "```java\n    mkdir repo-one\n    cd repo-one\n    hg init\n    echo \"hello\" > hello.txt\n    hg ci -m\"init one\"\n    cd ..\n\n    mkdir repo-two\n    cd repo-two\n    hg init\n    echo \"hello\" > hello.txt\n    hg ci -m\"init two\"\n    cd ..\n\n    ```", "```java\n    locate hgrc\n\n    ```", "```java\n    [extensions]\n    forest = patch/to/forest.py\n\n    ```", "```java\n    hg clone repo-one repo-two/one\n\n    ```", "```java\n    hg fclone repo-two wc-two\n\n    ```", "```java\n    echo some >> repo-two/hello.txt  &&  echo some1 >> repo-two/hello.txt\n\n    ```", "```java\n    cd wc-two/ && ls\n    hg ci -m\"edited hello.txt\"\n    cd one/\n    hg ci -m\"edited hello.txt\"\n    cd ..\n\n    ```", "```java\n     hg fpush\n\n    ```", "```java\n    cd ../repo-two\n    hg fpush\n\n    ```", "```java\n    make all\n\n    ```", "```java\n    make all\n\n    ```", "```java\n    make all | grep -i .cpp\n\n    ```", "```java\n    make clean && make all\n\n    ```", "```java\n    bash ./configure --enable-debug\n    make all CONF=linux-x86_64-normal-server-fastdebug\n\n    ```", "```java\n    ./build/linux-x86_64-normal-server-fastdebug/jdk/bin/java -version\n    openjdk version \"1.8.0-internal-fastdebug\"\n    OpenJDK Runtime Environment (build 1.8.0-internal-fastdebug-dsmd_2014_03_27_05_34-b00)\n    OpenJDK 64-Bit Server VM (build 25.0-b70-fastdebug, mixed mode)\n\n    ```", "```java\n    netbeans_jdkhome=\"<path_to_jdkhome>\"\n\n    ```", "```java\n    Not able to submit breakpoint LineBreakpoint String.java : 138, reason: No source root found for URL 'file:/home/dsmd/00experimental/java_build/jdk8intr/jdk8/jdk/src/share/classes/java/lang/String.java'. Verify the setup of project sources.\n    Invalid LineBreakpoint String.java : 138\n\n    ```", "```java\n    build/linux-x86_64-normal-server-fastdebug/jdk/bin/java -Xdebug -Xrunjdwp:transport=dt_socket,address=8998,server=y -jar /path/to/jar.jar\n\n    ```", "```java\nbuild.sh hotspot-build DEBUG_NAME=debug\n\n```", "```java\njava - -XX:<optionName>\n\n```", "```java\nprivate static int doUpdateBytes(int crc, byte[] b, int off, int len) {\n    return updateBytes(crc, b, off, len);\n}\n```", "```java\n#include \"smmintrin.h\"\n```", "```java\nCFLAGS += -fno-rtti # locate that line\nCFLAGS += -msse4.2  # add this new line here\n```", "```java\n#ifndef CRC32CALC_HPP\n#define  CRC32CALC_HPP\n\nclass CRC32Calc {\npublic:\n    CRC32Calc() {};\n    virtual ~CRC32Calc() {};\n\n    static int static_calcCrc32(int crc, const char* data, int dataOffset, int dataLen);\n};\n#endif  /* CRC32CALC_HPP */\n```", "```java\n#include \"CRC32Calc.hpp\"\n#include \"precompiled.hpp\"\nint CRC32Calc::static_calcCrc32(int crc, const char* data, int dataOffset, int dataLen) {\n    const int dataSize = dataLen - dataOffset;\n    int result = crc;\n    int uints32 = (int)(dataSize / sizeof(int));\n    int units8 = dataSize % sizeof(int);\n\n    const int* pUint32 = (const int*)data;\n    while (uints32--) {\n        result = ::_mm_crc32_u32(result, *pUint32);\n        pUint32++;\n    }\n\n    const char* pUnit8 = (const char*)pUint32;\n    while (units8--) {\n        result = ::_mm_crc32_u8(result, *pUnit8);\n        pUnit8++;\n    }\n\n    return result;\n}\n```", "```java\ndo_class(java_util_zip_crc32,      \"java/util/zip/CRC32\")                                                        \\\ndo_intrinsic(_crc32_doUpdateBytes, java_util_zip_crc32, doUpdateBytes_name, int_byteArray_int_int_signature, F_R)  \\\ndo_name(     doUpdateBytes_name,                                 \"doUpdateBytes\")                                  \\\ndo_signature(int_byteArray_int_int_signature,             \"(I[BII)I\")                                              \\\n```", "```java\n#include \"CRC32Calc.hpp\"\n```", "```java\n  // Arguments:\n  //\n  // Inputs:\n  //   c_rarg0   - input crc\n  //   c_rarg1   - byte array with data for calculation\n  //   c_rarg2   - offset in the input array\n  //   c_rarg3   - number of data bytes after offset\n  //\n  // Output:\n  //    eax - result crc\n  address generate_crc32_doUpdateBytes() {\n    __ align(CodeEntryAlignment);\n    StubCodeMark mark(this, \"StubRoutines\", \"crc32_doUpdateBytes\");\n    address start = __ pc();\n\n    __ enter(); // required for proper stackwalking of RuntimeStub frame\n    __ pusha();\n    // no need to put params in regr - they are already there\n    // after this call rax should already have required return value\n    __ call_VM_leaf(CAST_FROM_FN_PTR(address, CRC32Calc::static_calcCrc32), 4);\n    __ popa();\n\n    __ leave(); // required for proper stackwalking of RuntimeStub frame\n    return start;\n  }\n```", "```java\nstatic address _crc32_doUpdateBytes;\n```", "```java\nstatic address crc32_doUpdateBytes() { return _crc32_doUpdateBytes; }\n```", "```java\naddress StubRoutines::_crc32_doUpdateBytes = NULL;\n```", "```java\nStubRoutines::_crc32_doUpdateBytes = generate_crc32_doUpdateBytes();\n```", "```java\nstatic const TypeFunc* crc32_Type();\n```", "```java\nconst TypeFunc* OptoRuntime::crc32_Type() {\n  // create input type (domain): int, pointer, int, int\n  int num_args      = 4;\n  int argcnt = num_args;\n  const Type** fields = TypeTuple::fields(argcnt);\n  int argp = TypeFunc::Parms;\n  fields[argp++] = TypeInt::INT;      // crc\n  fields[argp++] = TypePtr::NOTNULL;  // data\n  fields[argp++] = TypeInt::INT;      // offset\n  fields[argp++] = TypeInt::INT;      // len\n  const TypeTuple* domain = TypeTuple::make(TypeFunc::Parms+argcnt, fields);\n\n  // create return value\n  fields = TypeTuple::fields(1);\n  fields[TypeFunc::Parms+0] = TypeInt::INT;\n\n  const TypeTuple* range = TypeTuple::make(TypeFunc::Parms+1, fields);\n\n  return TypeFunc::make(domain, range);\n}\n```", "```java\nbool inline_crc32();\n```", "```java\nbool LibraryCallKit::inline_crc32() {\n  address stubAddr = StubRoutines::crc32_doUpdateBytes();\n  const char *stubName = \"crc32_doUpdateBytes\";\n  Node* inputCrc = argument(0);\n  Node* in_data  = argument(1);\n  Node* offset   = argument(2);\n  Node* len      = argument(3);\n\n  // Call the stub.\n  make_runtime_call(RC_LEAF|RC_NO_FP, OptoRuntime::crc32_Type(),\n                    stubAddr, stubName, TypePtr::BOTTOM,\n                    inputCrc, in_data, offset, len);\n\n  return true;\n}\n```", "```java\n  case vmIntrinsics::_crc32_doUpdateBytes:\n    break;\n```", "```java\ncase vmIntrinsics:: _crc32_doUpdateBytes: return inline_crc32();\nnew line.\n```", "```java\n// This is Linux version\n#include <cpuid.h>T\n#include <stdio.h>\nvoid main () {\n    unsigned int eax, ebx, ecx, edx;\n    __get_cpuid(1, &eax, &ebx, &ecx, &edx);\n    if (ecx & bit_SSE4_2)\n        printf (\"SSE4.2 is supported\\n\");\n    return;\n}\n\n// And this is the version for windows\n#include <intrin.h>\nint _tmain(int argc, _TCHAR* argv[])\n{\n  int cpuInfo[4] = { -1 };\n  __cpuid(cpuInfo, 1);\n  bool bSSE42Extensions = (cpuInfo[2] & 0x100000) || false;\n  if (bSSE42Extensions) {\n    printf(\"SSE4.2 is supported\\n\");\n  }\n  return 0;\n}\n```", "```java\n    svn checkout https://svn.java.net/svn/visualvm~svn/trunk\n\n    ```", "```java\n    ant build-zip\n\n    ```", "```java\n    BUILD SUCCESSFUL\n    Total time: 34 seconds\n\n    ```", "```java\n    ant run\n\n    ```", "```java\npackage org.openjdk.cookbook;\n\nimport javax.management.MBeanServer;\nimport javax.management.ObjectName;\nimport java.lang.management.ManagementFactory;\n\npublic class SleepProbe implements SleepProbeMBean {\n    private volatile long lastSleepSampleMs = 100;\n\n    public static void main(String[] args) throws Exception {\n        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n        ObjectName name = new ObjectName(\"org.openjdk.cookbook:type=SleepProbe\");\n        SleepProbe mbean = new SleepProbe();\n        mbean.start();\n        mbs.registerMBean(mbean, name);\n        System.out.println(\"Started MBean\");\n        Thread.sleep(Long.MAX_VALUE);\n    }\n\n    @Override\n    public long getActualSleepTime() {\n        return lastSleepSample;\n    }\n\n    public void start() {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while ( !Thread.currentThread().isInterrupted() ) {\n                    try {\n                        final long start = System.nanoTime();\n                        Thread.sleep(100);\n                        final long end = System.nanoTime();\n                        lastSleepSampleMs = (long)((double)(end-start))/1000000;\n                    } catch (InterruptedException e) {\n                        Thread.currentThread().interrupt();\n                        break;\n                    }\n                }\n            }\n        }).start();\n    }\n}\n```", "```java\npackage org.openjdk.cookbook;\npublic interface SleepProbeMBean {\n    public long getActualSleepTime();\n}\n```", "```java\n    package net.cookbook.openjdk;\n\n    import com.sun.tools.visualvm.application.Application;\n    import com.sun.tools.visualvm.tools.jmx.*;\n    import java.awt.*;\n    import java.util.LinkedList;\n    import javax.management.*;\n    import javax.swing.JPanel;\n    import org.openide.util.Exceptions;\n\n    public class SamplingGraphPanel extends JPanel implements Runnable {\n        private static final int MAX_DATA_POINTS = 20;\n        private static final int MAX_VALUE = 110;\n        private static final int GAP = 30;\n\n        private final LinkedList<Long> samples = new LinkedList<Long>();\n        private final Application application;\n        private Thread refreshThread;\n\n        public SamplingGraphPanel(Application application) {\n            this.application = application;\n            this.setBackground(Color.black);\n        }\n\n        @Override\n        public void paintComponent(Graphics gr) {\n            super.paintComponent(gr);\n\n            Graphics2D g2 = (Graphics2D)gr;\n            g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n\n            final double xScale = ((double) getWidth()-2*GAP)/(samples.size()-1);\n            final double yScale = ((double) getHeight()-2*GAP)/(MAX_VALUE-1);\n\n            Stroke oldStroke = g2.getStroke();\n            g2.setColor(Color.green);\n            g2.setStroke(new BasicStroke(3f));\n            for (int i = 0; i < samples.size()-1; ++i) {\n                final int x1 = (int) (i * xScale + GAP);\n                final int y1 = (int) ((MAX_VALUE-samples.get(i))*yScale+GAP);\n                final int x2 = (int) ((i+1) * xScale + GAP);\n                final int y2 = (int) ((MAX_VALUE - samples.get(i+1)) * yScale + GAP);\n                g2.drawLine(x1, y1, x2, y2);         \n            }\n        }\n\n    public void start() {\n           refreshThread = new Thread(this);\n           refreshThread.start();\n        }\n\n        public void stop() {\n            if ( refreshThread != null ) {\n                refreshThread.interrupt();\n                refreshThread = null;\n            }\n        }\n\n        @Override\n        public void run() {\n            JmxModel jmx = JmxModelFactory.getJmxModelFor(application);\n            MBeanServerConnection mbsc = null;\n            if (jmx != null && jmx.getConnectionState() == JmxModel.ConnectionState.CONNECTED) {\n                mbsc = jmx.getMBeanServerConnection();\n            }\n\n            try {\n                while ( mbsc != null && !Thread.currentThread().isInterrupted() ) {\n                    if ( samples.size() == MAX_DATA_POINTS ) {\n                        samples.remove();\n                    }\n                    Long val = (Long)mbsc.getAttribute(new ObjectName(\"org.openjdk.cookbook:type=SleepProbe\"), \"ActualSleepTime\");\n                    samples.add(val);\n                    repaint();\n                    try {\n                        Thread.sleep(500);\n                    } catch (InterruptedException e) { break; }\n                }\n            } catch (Exception e) {\n                Exceptions.printStackTrace(e);\n            }\n        }\n    }\n    ```", "```java\n    package net.cookbook.openjdk;\n\n    import com.sun.tools.visualvm.application.Application;\n    import com.sun.tools.visualvm.core.ui.DataSourceView;\n    import com.sun.tools.visualvm.core.ui.components.DataViewComponent;\n    import javax.swing.*;\n    import org.openide.util.Utilities;\n\n    public class SamplingView extends DataSourceView {\n        private DataViewComponent dvc;\n        private SamplingGraphPanel panel;\n        public static final String IMAGE_PATH = \"net/cookbook/openjdk/icon.png\";\n\n        public SamplingView(Application application) {\n            super(application,\"Sampling Application\", new ImageIcon(Utilities.loadImage(IMAGE_PATH, true)).getImage(), 60, false);\n        }\n\n        protected DataViewComponent createComponent() {\n            //Data area for master view:\n            JEditorPane generalDataArea = new JEditorPane();\n            generalDataArea.setBorder(BorderFactory.createEmptyBorder(14, 8, 14, 8));\n\n            panel = new SamplingGraphPanel(SamplingProvider.getSleepProbeInstance((Application)getDataSource()));        DataViewComponent.MasterView masterView = new DataViewComponent.MasterView(\"Sampling Overview\", null, generalDataArea);\n            DataViewComponent.MasterViewConfiguration masterConfiguration = new DataViewComponent.MasterViewConfiguration(false);\n            dvc = new DataViewComponent(masterView, masterConfiguration);\n            //Add detail views to the component:\n            dvc.addDetailsView(new DataViewComponent.DetailsView(\"Sampling Graph\", null, 10, panel, null), DataViewComponent.TOP_LEFT);\n\n            return dvc;\n        }\n\n        @Override\n        protected void removed() {\n            super.removed();\n            panel.stop();\n        }\n    }\n    ```", "```java\n    package net.cookbook.openjdk;\n\n    import com.sun.tools.visualvm.application.Application;\n    import com.sun.tools.visualvm.core.ui.*;\n    import com.sun.tools.visualvm.tools.jmx.*;\n    import javax.management.*;\n    import org.openide.util.Exceptions;\n\n    public class SamplingProvider extends DataSourceViewProvider<Application> {\n        private static DataSourceViewProvider instance = new SamplingProvider();\n        @Override\n        public boolean supportsViewFor(Application application) {\n            boolean result = false;\n            JmxModel jmx = JmxModelFactory.getJmxModelFor(application);\n            if (jmx != null && jmx.getConnectionState() == JmxModel.ConnectionState.CONNECTED) {\n                MBeanServerConnection mbsc = jmx.getMBeanServerConnection();\n                if (mbsc != null) {\n                    try {\n                        mbsc.getObjectInstance(new ObjectName(\"org.openjdk.cookbook:type=SleepProbe\"));\n                        result = true; // no exception - bean found\n                    }catch (InstanceNotFoundException e) {\n                        // bean not found, ignore\n                    } catch (Exception e1) {\n                        Exceptions.printStackTrace(e1);\n                    }\n                }\n            }\n            return result;\n        }\n\n        @Override\n        protected DataSourceView createView(Application application) {\n            return new SamplingView(application);\n        }\n\n        static void initialize() {\n            DataSourceViewsManager.sharedInstance().addViewProvider(instance, Application.class);\n        }\n\n        static void unregister() {\n            DataSourceViewsManager.sharedInstance()\n                         .removeViewProvider(instance);\n        }\n\n        public static Object getSleepProbeInstance(Application application) {\n            ObjectInstance instance = null;\n            JmxModel jmx = JmxModelFactory.getJmxModelFor(application);\n            if (jmx != null && jmx.getConnectionState() == JmxModel.ConnectionState.CONNECTED) {\n                MBeanServerConnection mbsc = jmx.getMBeanServerConnection();\n                if (mbsc != null) {\n                    try {\n                        instance = mbsc.getObjectInstance(new ObjectName(\"org.openjdk.cookbook:type=SleepProbe\"));\n                    } catch (InstanceNotFoundException e) {\n                        // bean not found, ignore\n                    } catch (Exception e) {\n                        Exceptions.printStackTrace(e);\n                    }\n                }\n            }\n            return instance;\n        }\n    }\n    ```", "```java\n    -XX:+UnlockDiagnosticVMOptions -XX:+TraceClassLoading -XX:+LogCompilation -XX:+PrintAssembly\n    ```", "```java\n     java -jar ./jitwatch.jar\n\n    ```", "```java\n    git clone https://github.com/AdoptOpenJDK/JavadocUpdaterTool.git && cd JavadocUpdaterTool\n\n    ```", "```java\n    mvn clean install\n\n    ```", "```java\n    java -jar JavadocPatchTool.jar -R -C <directory>\n\n    ```", "```java\n    java -jar JavadocPatchTool.jar -R <path_to_tree>\n\n    ```"]