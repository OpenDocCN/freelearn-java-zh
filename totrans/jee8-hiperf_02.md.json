["```java\npublic interface TimeService {\n    LocalDateTime now();\n}\n```", "```java\npublic class TimeServiceImpl implements TimeService {\n    @Override\n    public LocalDateTime now() {\n        return LocalDateTime.now();\n    }\n}\n```", "```java\npublic class MockTimeService implements TimeService {\n    @Override\n    public LocalDateTime now() {\n        return LocalDateTime.of(2017, Month.SEPTEMBER, 4, 19, 0);\n    }\n}\n```", "```java\npublic static class TimeServiceFactory {\n    public TimeService create() {\n        if (useDefault()) {\n            return new TimeServiceImpl();\n        }\n        return new MockTimeService();\n    }\n}\n```", "```java\npublic class Container {\n    private final Map<Class<?>, Class<?>> instances = new HashMap<>();\n\n    public <A, I extends A> Container register(final Class<A> api,\n    final Class<I> implementation) {\n        instances.put(api, implementation);\n        return this;\n    }\n\n    public <T> T get(final Class<T> api) {\n        try {\n            return api.cast(\n                    ofNullable(instances.get(api))\n                            .orElseThrow(() -> new\n                            IllegalArgumentException(\"No bean for api\n                            <\" + api.getName() + \">\"))\n                            .getConstructor()\n                            .newInstance());\n        } catch (final Exception e) {\n            throw new IllegalArgumentException(e);\n        }\n    }\n}\n```", "```java\npublic class Main {\n    public static void main(final String[] args) {\n        final Container container = new Container()\n                .register(TimeService.class, TimeServiceImpl.class)\n                /*other registers if needed*/;\n\n        final TimeService timeService =\n        container.get(TimeService.class);\n        System.out.println(timeService.now());\n    }\n}\n```", "```java\npublic <T> T get(final Class<T> api) {\n    try {\n        final Object serviceInstance = ofNullable(instances.get(api))\n                .orElseThrow(() -> new IllegalArgumentException(\"No\n                bean registered for api <\" + api.getName() + \">\"))\n                .getConstructor()\n                .newInstance();\n\n        return api.cast(Proxy.newProxyInstance(api.getClassLoader(),\n        new Class<?>[]{api}, new LoggingHandler(serviceInstance,\n        api)));\n    } catch (final Exception e) {\n        throw new IllegalArgumentException(e);\n    }\n}\n```", "```java\npublic class LoggingHandler implements InvocationHandler {\n    private final Object delegate;\n    private final Logger logger;\n\n    public LoggingHandler(final Object delegate, final Class<?> api) {\n        this.delegate = delegate;\n        this.logger = Logger.getLogger(api.getName());\n    }\n\n    @Override\n    public Object invoke(final Object proxy, final Method method, final\n    Object[] args) throws Throwable {\n        logger.info(() -> \"Calling \" + method.getName());\n        try {\n            return method.invoke(delegate, args);\n        } catch (final InvocationTargetException ite) {\n            throw ite.getTargetException();\n        } finally {\n            logger.info(() -> \"Called \" + method.getName());\n        }\n    }\n}\n```", "```java\nsept. 03, 2017 4:29:27 PM com.github.rmannibucau.container.LoggingHandler invoke\nINFOS: Calling now\nsept. 03, 2017 4:29:27 PM com.github.rmannibucau.container.LoggingHandler invoke\nINFOS: Called now\n```", "```java\nObject createInstance() {\n    Object[] constructorArguments = createConstructorArguments(); <1>\n    Object instance = createNewInstance(constructorArguments); <2>\n    for each injected field of (instance) { <3>\n        field.inject(instance);\n    }\n    return prepare(instance); <4>\n}\n```", "```java\n@Log\n@Interceptor\n@Priority(Interceptor.Priority.APPLICATION)\npublic class LoggingInterceptor implements Serializable {\n    @AroundInvoke\n    public Object invoke(final InvocationContext context) throws Exception {\n        final Logger logger = Logger.getLogger(context.getTarget().getClass().getName());\n        logger.info(() -> \"Calling \" + context.getMethod().getName());\n        try {\n            return context.proceed();\n        } finally {\n            logger.info(() -> \"Called \" + context.getMethod().getName());\n        }\n    }\n}\n```", "```java\nbusiness_code_execution_time + interceptors_code_execution_time < method_execution_time\n```", "```java\n@InterceptorBinding\n@Retention(RUNTIME)\n@Target({TYPE, METHOD})\npublic @interface Log {\n    /**\n     * @return the logger name to use to trace the method invocations.\n     */\n    @Nonbinding\n    String value();\n}\n```", "```java\n@Log(\"\")\n@Interceptor\n@Priority(Interceptor.Priority.APPLICATION)\npublic class LoggingInterceptor implements Serializable {\n    @AroundInvoke\n    public Object invoke(final InvocationContext context) throws Exception {\n        final String loggerName = getLoggerName();\n        final Logger logger = Logger.getLogger(loggerName);\n        logger.info(() -> \"Calling \" + context.getMethod().getName());\n        try {\n            return context.proceed();\n        } finally {\n            logger.info(() -> \"Called \" + context.getMethod().getName());\n        }\n    }\n}\n```", "```java\nprivate String getLoggerName(InvocationContext context) {\n    return ofNullable(context.getMethod().getAnnotation(Log.class))\n            .orElseGet(() -> context.getTarget().getClass().getAnnotation(Log.class))\n            .value();\n}\n```", "```java\nprivate final ConcurrentMap<Method, String> loggerNamePerMethod = new ConcurrentHashMap<>();\n\nprivate String getLoggerName(InvocationContext context) {\n    return loggerNamePerMethod.computeIfAbsent(context.getMethod(), m -> ofNullable(m.getAnnotation(Log.class))\n            .orElseGet(() -> context.getTarget().getClass().getAnnotation(Log.class))\n            .value());\n}\n```", "```java\n@ApplicationScoped\nclass Cache {\n    @Inject\n    private BeanManager beanManager;\n\n    private final ConcurrentMap<Method, String> loggerNamePerMethod = new ConcurrentHashMap<>();\n\n    String getLoggerName(final InvocationContext context) {\n        return loggerNamePerMethod.computeIfAbsent(context.getMethod(), mtd -> {\n            // as before\n        });\n    }\n}\n\n@Log(\"\")\n@Interceptor\n@Priority(Interceptor.Priority.APPLICATION)\npublic class LoggingInterceptor implements Serializable {\n    @Inject\n    private Cache cache;\n\n    @AroundInvoke\n    public Object invoke(final InvocationContext context) throws Exception {\n        final String loggerName = cache.getLoggerName(context);\n        final Logger logger = Logger.getLogger(loggerName);\n        logger.info(() -> \"Calling \" + context.getMethod().getName());\n        try {\n            return context.proceed();\n        } finally {\n            logger.info(() -> \"Called \" + context.getMethod().getName());\n        }\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class LifecycleManager {\n    @Inject\n    private Event<Starting> startingEvent;\n\n    public void starting() {\n        final Starting event = new Starting();\n\n        startingEvent.fire(event);\n        startingEvent.fireAsync(event);\n    }\n}\n```", "```java\nevent.fire(new MyEvent());\n```", "```java\nevent.fire(new MyEvent<String>());\n```", "```java\n@ApplicationScoped\npublic class DynamicInstance {\n    @Inject\n    private Provider<MyService> myServiceProvider;\n\n    @Inject\n    private Instance<MyService> myServices;\n\n    public MyService currentService() {\n        return myServiceProvider.get(); <1>\n    }\n\n    public MyService newService(final Annotation qualifier) {\n        return myServices.select(qualifier).get(); <2>\n    }\n}\n```", "```java\n@Path(\"quote\")\n@RequestScoped\npublic class QuoteResource {\n    @Inject\n    private QuoteService quoteService;\n\n    @Resource\n    private ManagedExecutorService managedExecutorService;\n\n    @GET\n    public void findAll(@Suspended final AsyncResponse response, <1>\n                        @QueryParam(\"from\") @DefaultValue(\"0\") final int from,\n                        @QueryParam(\"to\") @DefaultValue(\"10\") final int to) {\n        managedExecutorService.execute(() -> { <2>\n            try {\n              final long total = quoteService.countAll();\n              final List<JsonQuote> items = quoteService.findAll(from, to)\n                        .map(quote -> {\n                            final JsonQuote json = new JsonQuote();\n                            json.setId(quote.getId());\n                            json.setName(quote.getName());\n                            json.setValue(quote.getValue());\n                           json.setCustomerCount(ofNullable(quote.getCustomers())\n                            .map(Collection::size).orElse(0));\n                            return json;\n                        })\n                        .collect(toList());\n\n                final JsonQuotePage page = new JsonQuotePage();\n                page.setItems(items);\n                page.setTotal(total);\n                response.resume(page); <3>\n            } catch (final RuntimeException re) {\n                response.resume(re); <3>\n            }\n        });\n    }\n\n    // ...\n}\n```", "```java\nfinal Quote quote = entityManager.find(Quote.class, id);\n....\nentityManager.persist(quote);\n```", "```java\nfinal Number count = entityManager.createQuery(\"select count(q) from Quote q\", Number.class);\n```", "```java\n<property name=\"eclipselink.logging.level\" value=\"FINEST\"/>\n<property name=\"eclipselink.logging.logger\" value=\"JavaLogger\"/>\n```", "```java\norg.eclipse.persistence.level = FINEST\n```", "```java\n# output configuration - console here\njava.util.logging.ConsoleHandler.level = FINEST\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# global configuration (default)\n.level = INFO\n.handlers = java.util.logging.ConsoleHandler\n\n# eclipselink specific logging level\norg.eclipse.persistence.level = FINEST\n\n```", "```java\nMAVEN_OPTS=\"-Djava.util.logging.config.file=src/main/glassfish/conf/logging.properties\" mvn package embedded-glassfish:run\n```", "```java\norg.eclipse.persistence.session./file:<path to the webapp>/WEB-INF/classes/_<entity simple name in lowercase>.[sql|query]\n```", "```java\n...\nSep 09, 2017 5:21:51 PM org.eclipse.persistence.session./file:/home/rmannibucau/dev/quote-manager/target/quote-manager-1.0-SNAPSHOT/WEB-INF/classes/_quote.sql\nFINE: SELECT ID, NAME, VALUE FROM QUOTE WHERE (NAME = ?)\n  bind => [1 parameter bound]\n...\nSep 09, 2017 5:41:53 PM org.eclipse.persistence.session./file:/home/rmannibucau/dev/quote-manager/target/quote-manager-1.0-SNAPSHOT/WEB-INF/classes/_quote.sql\nFINE: INSERT INTO QUOTE (ID, NAME, VALUE) VALUES (?, ?, ?)\n  bind => [3 parameters bound]\n....\nSep 09, 2017 5:44:26 PM org.eclipse.persistence.session./file:/home/rmannibucau/dev/quote-manager/target/quote-manager-1.0-SNAPSHOT/WEB-INF/classes/_quote.sql\nFINE: SELECT t1.ID, t1.NAME FROM QUOTE_CUSTOMER t0, CUSTOMER t1 WHERE ((t0.quotes_ID = ?) AND (t1.ID = t0.customers_ID))\n  bind => [1 parameter bound]\n```", "```java\nINSERT INTO QUOTE (ID, NAME, VALUE) VALUES (?, ?, ?)\n```", "```java\nSELECT ID, NAME, VALUE FROM QUOTE WHERE (ID = ?)\n```", "```java\nSELECT t1.ID, t1.NAME FROM QUOTE_CUSTOMER t0, CUSTOMER t1 WHERE ((t0.quotes_ID = ?) AND (t1.ID = t0.customers_ID))\n```", "```java\njson.setCustomerCount(ofNullable(quote.getCustomers()).map(Collection::size).orElse(0));\n```", "```java\nquote.getCustomers().size();\n```", "```java\n<property name=\"eclipselink.cache.shared.default\" value=\"false\"/>\n```", "```java\nquote.getCustomers()\ncustomer.getQuotes() \n```", "```java\nSELECT t1.ID, t1.NAME FROM QUOTE_CUSTOMER t0, CUSTOMER t1 WHERE ((t0.quotes_ID = ?) AND (t1.ID = t0.customers_ID))\n```", "```java\nSELECT t1.ID, t1.NAME, t1.VALUE FROM QUOTE_CUSTOMER t0, QUOTE t1 WHERE ((t0.customers_ID = ?) AND (t1.ID = t0.quotes_ID)) \n```", "```java\n<jta-data-source>java:app/jdbc/quote_manager</jta-data-source>\n```", "```java\n@Resource(lookup = \"java:app/jdbc/quote_manager\")\nprivate DataSource datasource;\n```", "```java\n@Resource\nprivate ManagedExecutorService mes;\n```", "```java\n@Resource\nprivate ManagedScheduledExecutorService mses;\n```", "```java\n@Resource\nprivate DataSource ds;\n```", "```java\n@Resource\nprivate XADataSource ds;\n```", "```java\n@Resource\nprivate Queue queue;\n```", "```java\n@Resource\nprivate Topic topic;\n```", "```java\n@Resource\nprivate ConnectionFactory cf;\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE resources PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 Resource Definitions//EN\"\n    \"http://glassfish.org/dtds/glassfish-resources_1_5.dtd\">\n<resources>\n\n  <1>\n  <jdbc-connection-pool allow-non-component-callers=\"false\"\n                        associate-with-thread=\"false\"\n                        connection-creation-retry-attempts=\"0\"\n                        connection-creation-retry-interval-in-seconds=\"10\"\n                        connection-leak-reclaim=\"false\"\n                        connection-leak-timeout-in-seconds=\"0\"\n                        connection-validation-method=\"auto-commit\"\n                        datasource-classname=\"com.mysql.jdbc.jdbc2.optional.MysqlDataSource\"\n                        fail-all-connections=\"false\"\n                        idle-timeout-in-seconds=\"300\"\n                        is-connection-validation-required=\"false\"\n                        is-isolation-level-guaranteed=\"true\"\n                        lazy-connection-association=\"false\"\n                        lazy-connection-enlistment=\"false\"\n                        match-connections=\"false\"\n                        max-connection-usage-count=\"0\"\n                        max-pool-size=\"10\"\n                        max-wait-time-in-millis=\"120000\"\n                        name=\"MySQLConnectinoPool\"\n                        non-transactional-connections=\"false\"\n                        pool-resize-quantity=\"2\"\n                        res-type=\"javax.sql.DataSource\"\n                        statement-timeout-in-seconds=\"-1\"\n                        steady-pool-size=\"8\"\n                        validate-atmost-once-period-in-seconds=\"0\"\n                        validation-table-name=\"DUAL\" wrap-jdbc-objects=\"false\">\n    <property name=\"URL\" value=\"jdbc:mysql://localhost:3306/quote_manager\"/>\n    <property name=\"User\" value=\"root\"/>\n    <property name=\"Password\" value=\"password\"/>\n  </jdbc-connection-pool>\n\n  <2>\n  <jdbc-resource jndi-name=\"java:app/jdbc/quote_manager\" pool-name=\"MySQLConnectinoPool\" enabled=\"true\"/>\n</resources>\n```", "```java\n<datasources>\n  <xa-datasource jndi-name=\"java:jboss/quote_manager\" pool-name=\"QuoteManagerPool\">\n    <driver>mysql</driver>\n    <xa-datasource-property name=\"ServerName\">localhost</xa-datasource-property>\n    <xa-datasource-property name=\"DatabaseName\">quote_manager</xa-datasource-property>\n    <pool>\n      <min-pool-size>10</min-pool-size>\n      <max-pool-size>50</max-pool-size>\n    </pool>\n    <security>\n      <user-name>root</user-name>\n      <password>secret</password>\n    </security>\n    <validation>\n      <valid-connection-checker class-\n      name=\"org.jboss.jca.adapters.jdbc.extensions.mysql\n      .MySQLValidConnectionChecker\"></valid-connection-checker>\n      <exception-sorter class-\n      name=\"org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter\"></exception-sorter>\n    </validation>\n  </xa-datasource>\n  <drivers>\n    <driver name=\"mysql\" module=\"com.mysql\">\n      <xa-datasource-class>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</xa-datasource-class>\n    </driver>\n  </drivers>\n</datasources>\n```", "```java\n<Resource id=\"quote_manager\" type=\"DataSource\">\n  JdbcDriver = com.mysql.jdbc.Driver\n  JdbcUrl = jdbc:mysql://localhost:3306/quote_manager?tcpKeepAlive=true\n  UserName = root\n  Password = secret\n  ValidationQuery = SELECT 1\n  ValidationInterval = 30000\n  NumTestsPerEvictionRun = 5\n  TimeBetweenEvictionRuns = 30 seconds\n  TestWhileIdle = true\n  MaxActive = 50\n</Resource>\n```", "```java\n<validation-mode>NONE</validation-mode>\n```", "```java\n@DataSourceDefinition(\n        name = \"java:app/jdbc/quote_manager\",\n        className = \"com.mysql.jdbc.Driver\",\n        url = \"jdbc:mysql://localhost:3306/quote_manager\",\n        user = \"root\",\n        password = \"password\"\n)\npublic class DataSourceConfiguration {\n}\n```"]