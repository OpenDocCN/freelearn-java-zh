["```java\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\nimport java.util.Date;\n\n@WebFilter(filterName = \"LogAccess\", urlPatterns = \"/*\")\npublic class LogAccessFilter implements javax.servlet.Filter {\n\n    private static Logger logger = LogManager.getLogger(LogAccess.class);\n\n    public void destroy() {\n    }\n\n    public void doFilter(javax.servlet.ServletRequest req, \n    javax.servlet.ServletResponse resp, javax.servlet.FilterChain \n    chain) throws javax.servlet.ServletException, IOException {\n\n        //Gets the initial date of request.\n        Date dateInitRequest = new Date();\n\n        //Get IP of Client that sent a resquest.\n        String ip = ((HttpServletRequest)req).getRemoteAddr();\n\n        //Following to next filter. If none next filter exist, follows   \n        //for main logic.\n        chain.doFilter(req, resp);\n\n        //Gets the end date of request.\n        Date dateEndRequest = new Date();\n\n        //Logging the informations of IP and access time.\n        logger.info(\"IP: \"+ip +\" Access time : \"\n                              + Long.toString(dateEndRequest.getTime() \n                              - dateInitRequest.getTime())\n                              + \" ms\");\n\n    }\n\n    public void init(javax.servlet.FilterConfig config) throws \n    javax.servlet.ServletException {\n\n    }\n\n}\n```", "```java\n@WebFilter(filterName = \"LogAccess\", urlPatterns = \"/*\")\npublic class LogAccessFilter implements javax.servlet.Filter{\n    ...\n}\n```", "```java\nchain.doFilter(req, resp);\n```", "```java\n//Servlet1 and Servlet2 are the servlets to filter.\n@WebFilter(filterName = \"LogAccess\", servletNames = {\"servlet1\",\"servlet2\"})\n```", "```java\n//Following to next filter or servlet.\nchain.doFilter(req, resp);\n```", "```java\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.servlet.*;\nimport javax.servlet.annotation.WebFilter;\nimport javax.servlet.http.HttpServletRequest;\nimport java.io.IOException;\n\n@WebFilter(filterName = \"LogBrowser\",urlPatterns = \"/*\")\npublic class LogBrowserFilter implements Filter {\n\n    private static Logger logger = LogManager.getLogger(LogBrowser.class);\n\n    public void destroy() {\n    }\n\n    public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {\n\n        //Get userAgent that contain browse informations.\n        String userAgent = ((HttpServletRequest)req).getHeader(\"User-Agent\");\n\n        //Get IP of Client that sent a resquest.\n        String ip = ((HttpServletRequest)req).getRemoteAddr();\n\n        //Logging the informations of IP and Browser.\n        logger.info(\"IP: \"+ip +\" Browser info: \"+userAgent);\n\n        //Following to the next filter. If none next filter exist, follow to main logic.\n        chain.doFilter(req, resp);\n\n    }\n\n    public void init(FilterConfig config) throws ServletException {\n\n    }\n\n}\n```", "```java\n<web-app version=\"3.1\"\n         xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd\">\n    <filter>\n        <filter-name>LogBrowser</filter-name>\n        <filter-class>com.rhuan.filter.LogBrowserFilter</filter-class>\n    </filter>\n    <filter>\n        <filter-name>LogAccess</filter-name>\n        <filter-class>com.rhuan.filter.LogAccessFilter</filter-class>\n    </filter>\n</web-app>\n```", "```java\nimport com.rhuan.action.Command.AbstractCommand;\nimport com.rhuan.action.Command.HomeCommand;\nimport com.rhuan.action.Command.LoginCommand;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@WebServlet(name = \"MyAppController\", urlPatterns = \"/myapp/*\")\npublic class MyAppController extends HttpServlet {\n\n    private static Logger logger = \n    LogManager.getLogger(MyAppController.class);\n\n    private final String PAGE_ERROR = \"/pageError.jsp\";\n\n    protected void doPost(HttpServletRequest request, \n   HttpServletResponse response) throws ServletException, IOException {\n        processRequest(request,response);\n    }\n\n    protected void doGet(HttpServletRequest request, \n   HttpServletResponse response) throws ServletException, IOException {\n        processRequest(request,response);\n    }\n\n    protected void processRequest(HttpServletRequest\n                                 request, HttpServletResponse response)\n            throws ServletException, java.io.IOException {\n        String resultPage;\n        AbstractCommand command = null;\n        try {\n\n            //Create a correspondent Command.\n            if(request.getSession().getAttribute(\"USER\") == null)\n                command = new LoginCommand();\n\n            else command = new HomeCommand();\n\n            //Execute the Command that return a page.\n            resultPage = command.execute();\n        } catch (Exception e) {\n            logger.error(e.getMessage());\n            resultPage = PAGE_ERROR;\n        }\n\n        //Dispatch to correspondent page.\n        getServletContext().getRequestDispatcher(resultPage)\n                           .forward(request, response);\n\n    }\n}\nurlPattern is used to define which requests a context will send to our controller. Here's how we do this:\n```", "```java\n//Defining the urlPattern to Front Controller\n@WebServlet(name = \"MyAppController\", urlPatterns = \"/myapp/*\")\npublic class MyAppController extends HttpServlet {\n    ...\n}\n\"/myapp/*\") establishes that all requests to the myapp URI are sent to our controller. For example, http://ip:port/context/myapp/myfuncionality is sent to our controller.\n```", "```java\n//Execute a Command\nresultPage = command.execute();\n```", "```java\n//Dispatch to correspondent page.\ngetServletContext().getRequestDispatcher(resultPage)\n                           .forward(request, response);\n```", "```java\npublic abstract class AbstractCommand {\n\n    public abstract String execute();\n}\nHomeCommand, which is the implementation of AbstractCommand. The method execute() returns the path to the home page (/home.jsp):\n```", "```java\n\npublic class HomeCommand extends AbstractCommand {\n    @Override\n    public String execute() {\n        return \"/home.jsp\";\n    }\n}\n```", "```java\n\npublic class LoginCommand extends AbstractCommand {\n    @Override\n    public String execute() {\n        return \"/login.jsp\";\n    }\n}\n```", "```java\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@WebServlet(name = \"DownloadFrontController\", urlPatterns = \"/download/*\")\npublic class DownloadFrontController extends HttpServlet {\n\n    protected void doPost(HttpServletRequest request,  \n   HttpServletResponse response) throws ServletException, IOException {\n        processRequest(request,response);\n    }\n\n    protected void doGet(HttpServletRequest request, \n   HttpServletResponse response) throws ServletException, IOException {\n        processRequest(request,response);\n    }\n\n    protected void processRequest(HttpServletRequest\n                                  request, HttpServletResponse \n                                  response)\n            throws ServletException, java.io.IOException {\n\n        //If user is logged the request is sent to \n        ApplicationController,\n        // then one error 401 is sent to client.\n       if(Objects.nonNull(request.getSession().getAttribute(\"USER\"))) {\n\n            //Send the request to ApplicationController\n            new DownloadApplicationController(request, \n            response).process();\n\n        }\n\n        else {\n            response.sendError(401);\n        }\n    }\n}\n```", "```java\n@WebServlet(name = \"DownloadFrontController\", urlPatterns = \"/download/*\")\n```", "```java\n//Send the request to ApplicationController\nnew DownloadApplicationController(request, response).process();\n```", "```java\nimport com.rhuan.action.Command.AbstractCommand;\nimport com.rhuan.action.Command.PdfCommand;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DownloadApplicationController {\n\n    private static Logger logger = LogManager.getLogger(DownloadApplicationController.class);\n\n    private final String PAGE_ERROR = \"/pageError.jsp\";\n\n    private HttpServletRequest request;\n\n    private HttpServletResponse response;\n\n    private Map<String, Class> map;\n\n    private String key;\n\n    public DownloadApplicationController(HttpServletRequest\n                                         request, HttpServletResponse \n                                         response){\n\n        //On our example, only PDF and JPG is acepted to download.\n        this.map = new HashMap<String, Class>();\n        this.map.put(\"PDF\", PdfCommand.class);\n        this.map.put(\"JPG\", PdfCommand.class);\n\n        this.request = request;\n        this.response = response;\n\n    }\n\n    public void process(){\n\n       //Processes the URI and creates the key using URI.\n       this.processUri();\n\n        //Validates if the request is valid.\n        if (!validate()) {\n            try {\n                response.sendError(400);\n            } catch (IOException e1) {\n                logger.error(e1.getMessage());\n            }\n\n            return;\n        }\n\n       //Get the correspondent command.\n       Class commandClass = map.get(key);\n\n       boolean error = false;\n\n       try {\n\n            AbstractCommand command = (AbstractCommand) \n            commandClass.newInstance();\n\n            //Executes the command.\n            command.execute(request,response);\n\n        } catch (InstantiationException e) {\n            logger.error(e.getMessage());\n            error = true;\n\n        } catch (IllegalAccessException e) {\n            logger.error(e.getMessage());\n            error = true;\n\n        } catch (ServletException e) {\n            logger.error(e.getMessage());\n            error = true;\n        } catch (IOException e) {\n            logger.error(e.getMessage());\n            error = true;\n        }\n\n        //If an error ocorred, response 500.\n        if(error){\n             try {\n                 response.sendError(500);\n\n             } catch (IOException e1) {\n                 logger.error(e1.getMessage());\n                 return;\n             }\n        }\n\n    }\n\n    private void processUri(){\n\n        String uri = request.getRequestURI();\n        if(uri.startsWith(\"/\")) uri = uri.replaceFirst(\"/\", \"\");\n        String[] uriSplitted = uri.split(\"/\");\n\n        if(uriSplitted.length > 2)\n            key = uriSplitted[2].toUpperCase();\n    }\n\n    private boolean validate(){\n\n        String uri = request.getRequestURI();\n        if(uri.startsWith(\"/\")) uri = uri.replaceFirst(\"/\", \"\");\n        String[] uriSplitted = uri.split(\"/\");\n\n        return uriSplitted.length == 3 && map.containsKey(key);\n    }\n\n}\n```", "```java\nkey, creates a new instance of the command, and executes the following command:\n```", "```java\n//Get the correspondent command.\nClass commandClass = map.get(key);\n```", "```java\n//Instantiate the command    \nAbstractCommand command = (AbstractCommand) commandClass.newInstance();\n```", "```java\n//Executes the command.\ncommand.execute(request,response);\n```", "```java\npackage com.rhuan.action.Command;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\npublic abstract class AbstractCommand {\n\n    public abstract void execute(HttpServletRequest\n                                 request, HttpServletResponse response)\n            throws ServletException, java.io.IOException ;\n}\n```", "```java\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class PdfCommand extends AbstractCommand {\n\n    @Override\n    public void execute(HttpServletRequest request, HttpServletResponse \n    response) throws ServletException, IOException {\n\n        String fileName = request.getParameter(\"fileName\");\n\n        // for example application/pdf, text/plain, text/html, \n        image/jpg\n        response.setContentType(\"application/pdf\");\n\n        // Make sure to show the download dialog\n        response.setHeader(\"Content-disposition\",\"attachment; \n        filename=myapp_download.pdf\");\n\n        // Assume file name is retrieved from database\n        // For example D:\\\\file\\\\test.pdf\n\n        File file = new File(fileName);\n\n        // This should send the file to browser\n        OutputStream out = response.getOutputStream();\n        FileInputStream in = new FileInputStream(file);\n\n        byte[] buffer = new byte[4096];\n        int length;\n        while ((length = in.read(buffer)) > 0){\n            out.write(buffer, 0, length);\n        }\n        in.close();\n        out.flush();\n\n    }\n}\n```", "```java\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\n\npublic class JpgCommand extends AbstractCommand  {\n\n    @Override\n    public void execute(HttpServletRequest request, HttpServletResponse \n    response) throws ServletException, IOException {\n\n        //Gets the file name sent by paramenter.\n        String fileName = request.getParameter(\"fileName\");\n\n        //Configures the content type.\n        response.setContentType(\"image/jpg\");\n\n        // Configure the dialog to download.\n        response.setHeader(\"Content-disposition\",\"attachment; \n        filename=myapp_download.pdf\");\n\n        //Read file and send to client.\n        File file = new File(fileName);\n        OutputStream out = response.getOutputStream();\n        FileInputStream in = new FileInputStream(file);\n\n        byte[] buffer = new byte[4096];\n        int length;\n        while ((length = in.read(buffer)) > 0){\n            out.write(buffer, 0, length);\n        }\n        in.close();\n        out.flush();\n\n    }\n}\n```"]