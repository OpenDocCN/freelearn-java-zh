- en: Chapter 2. Mastering the MVC Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the MVC architecture principles and see how
    Spring MVC implements those.
  prefs: []
  type: TYPE_NORMAL
- en: We will continue to use the application from the previous chapter and build
    something more interesting. Our goal is to design a simple page where users can
    search for tweets corresponding to certain criteria and display them to our users.
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, we will use the Spring Social Twitter project, which is available
    at [http://projects.spring.io/spring-social-twitter/](http://projects.spring.io/spring-social-twitter/).
  prefs: []
  type: TYPE_NORMAL
- en: We will see how to make Spring MVC work with a modern template engine, Thymeleaf,
    and try to understand the inner mechanics of the framework. We will route our
    users through different views, and finally, we will give a stellar look to our
    application using WebJars and Materialize ([http://materializecss.com](http://materializecss.com)).
  prefs: []
  type: TYPE_NORMAL
- en: The MVC architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I expect the meaning of the MVC acronym to be familiar to most. It stands for
    Model View Controller, and it is considered to be a very popular way to build
    a user interface by decoupling the data and the presentation layers.
  prefs: []
  type: TYPE_NORMAL
- en: '![The MVC architecture](img/2117_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The MVC pattern became wildly popular after emerging from the world of Smalltalk
    and landing in the Ruby on Rails framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The architectural pattern features three layers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Model**: This consists of various representations of the data your application
    knows about.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The View**: This is made up of several representations of the data that will
    be displayed to your users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Controller**: This is the part of the application that will handle user
    interactions. It''s a bridge between the model and the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea behind MVC is to decouple the View from the Model. The model must be
    self-contained and ignorant of the UI. This basically allows the same data to
    be reused across multiple views. These views are different way to look at the
    data. Drill down or using different renderers (HTML, PDF) are good illustrations
    of this principle.
  prefs: []
  type: TYPE_NORMAL
- en: The Controller acts as a mediator between the user and the data. Its role is
    to control actions available to the end user, as well as routing through the different
    views of the application.
  prefs: []
  type: TYPE_NORMAL
- en: MVC critics and best practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While MVC remains the go-to approach for designing a UI, many criticisms arose
    with its prevalence. Most critics are actually pointing a finger at the incorrect
    use of the pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Anemic Domain Model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eric Evans' influential book *Domain Driven Design*, also abbreviated as **DDD**,
    defines a set of architecture rules leading to a better integration of the business
    domain inside the code.
  prefs: []
  type: TYPE_NORMAL
- en: One of the core ideas is to take advantage of the object-oriented paradigms
    inside the domain objects. Going against this principle is sometimes referred
    to as **Anemic Domain Model**. A good definition of this problem can be found
    on Martin Fowler's blog ([http://www.martinfowler.com/bliki/AnemicDomainModel.html](http://www.martinfowler.com/bliki/AnemicDomainModel.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'An Anemic Model typically exhibits the following symptoms:'
  prefs: []
  type: TYPE_NORMAL
- en: The model is constituted from very simple **plain old Java objects** (**POJO**s)
    with only getters and setters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All the business logic is handled inside a service layer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validation of the model is found outside this model, for instance, in controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can be a bad practice depending on the complexity of your business domain.
    Generally speaking, DDD practices require additional efforts to isolate the domain
    from the application logic.
  prefs: []
  type: TYPE_NORMAL
- en: Architecture is always a tradeoff. It is good to note that typical ways of designing
    a Spring application can lead to complicated maintenance somewhere along the road.
  prefs: []
  type: TYPE_NORMAL
- en: 'How to avoid domain anemia is explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: The Service layer is good for application-level abstraction like transaction
    handling, not business logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your domain should always be in a valid state. Leave validation inside the form
    objects using validators or JSR-303's validation annotations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: translate the inputs into meaningful domain objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of your data layer in term of repositories with domain queries (refer
    to Spring Data Specification, for example)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decouple your domain logic from the underlying persistence framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use real objects as much as possible. For instance, manipulate the `FirstName`
    class rather than a string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is much more to DDD than these simple rules: Entities, value types, Ubiquitous
    Language, Bounded Context, Onion Architecture, and anti corruption layers. I strongly
    encourage you to study these principles on your own. As far as we are concerned,
    with this book we will try to keep in mind the guidelines listed earlier as we
    craft our web application. These concerns will become more familiar to you as
    we advance through this book.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning from the sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you're familiar with Spring, you have probably already landed on Spring's
    website, [http://spring.io](http://spring.io). It is entirely made with Spring
    and the good news is that it is open source.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code name of the project is sagan. It has numerous interesting features:'
  prefs: []
  type: TYPE_NORMAL
- en: A gradle multimodule project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Github integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elasticsearch integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript frontend application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The GitHub wiki associated with the project is really detailed and will help
    you get started easily with the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Visit the following URL if you''re interested in the Spring''s architecture
    of a real world application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/spring-io/sagan](https://github.com/spring-io/sagan)'
  prefs: []
  type: TYPE_NORMAL
- en: Spring MVC 1-0-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In spring MVC, the model is a simple map encapsulated in the `Model` or `ModelAndView`
    classes of Spring MVC. It can come from a database, files, external services,
    and so on. It is up to you to define how to fetch the data and put it into the
    model. The recommended way of interacting with the data layer is through Spring
    Data libraries: Spring Data JPA, Spring Data MongoDB, and so on. There are a dozen
    projects related to Spring Data and I encourage you to take a look at [http://projects.spring.io/spring-data](http://projects.spring.io/spring-data).'
  prefs: []
  type: TYPE_NORMAL
- en: The controller side of Spring MVC is handled through the use of the `@Controller`
    annotation. In a web application, the controller's role is to respond to HTTP
    requests. Classes annotated with the `@Controller` annotation will be picked up
    by Spring and given a chance to handle upcoming requests.
  prefs: []
  type: TYPE_NORMAL
- en: Via the `@RequestMapping` annotation, Controllers declare handling specific
    requests based on their HTTP method (`GET` or `POST` methods, for instance) and
    their URLs. The Controller then decides to either write content directly in the
    web response or route the application to a view and inject properties into that
    view.
  prefs: []
  type: TYPE_NORMAL
- en: A pure RESTful application would choose the first approach and expose a JSON
    or XML representation of the model directly in the HTTP response with the `@ResponseBody`
    annotation. In the case of a web application, this type of architecture is often
    associated with a frontend JavaScript framework such as Backbone.js, AngularJS,
    or React. In this case, the Spring application would then only handle the Model
    layer of the MVC model. We will study this kind of architecture in [Chapter 4](ch04.html
    "Chapter 4. File Upload and Error Handling"), *File Upload and Error Handling*.
  prefs: []
  type: TYPE_NORMAL
- en: With the second approach, the Model is passed to the View, which is rendered
    by a templating engine and then written to the response.
  prefs: []
  type: TYPE_NORMAL
- en: The view is often associated with a templating dialect, which will allow navigation
    inside the model. Popular dialects for templating are JSPs, FreeMarker, or Thymeleaf.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid approaches may take advantage of the templating engine to interact with
    some aspects of the application and then delegate the view layer to a frontend
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Using Thymeleaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thymeleaf is a templating engine that gets particular attention from the Spring
    community.
  prefs: []
  type: TYPE_NORMAL
- en: Its success is due mostly to its friendly syntax (it almost looks like HTML)
    and the ease with which it can be extended.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various extensions are available and integrated with Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Support | Dependency |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Layouts | `nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect` |'
  prefs: []
  type: TYPE_TB
- en: '| HTML5 data-* attributes | `com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Internet Explorer conditional comments | `org.thymeleaf.extras:thymeleaf-extras-conditionalcomments`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Support for spring security | `org.thymeleaf.extras:thymeleaf-extras-springsecurity3`
    |'
  prefs: []
  type: TYPE_TB
- en: A very good tutorial on Thymeleaf's integration with Spring can be found at
    [http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html](http://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Without further ado, let''s add the `spring-boot-starter-thymeleaf` dependency
    to bootstrap the thymeleaf templating engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our first page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will now add the first page to our application. It will be located in `src/main/resources/templates`.
    Let''s call the file `resultPage.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can see from the very start that Thymeleaf integrates perfectly with html
    and its syntax almost feels natural.
  prefs: []
  type: TYPE_NORMAL
- en: The `th:text` value is put between pipes. It means that all the values inside
    the text will be concatenated.
  prefs: []
  type: TYPE_NORMAL
- en: It might seem a bit awkward at first, but in practice, text will rarely be hardcoded
    in our pages; so, Thymeleaf makes an opinionated design decision here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thymeleaf has a big advantage for web designers: everything that is dynamic
    inside the templates can fall back to a default value in the case where they are
    opened without the server running. Resource URLs can be specified relatively and
    every markup can contain placeholders. In our previous example, the text "Hello
    html" would not be displayed when the view is rendered in the context of our application,
    but it will if the file is opened directly with a web browser.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To speed up development, add this property to your `application.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This will disable the view cache and cause templates to reload every time they
    are accessed.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this setting will need to be disabled when we go into production.
    We will see that in [Chapter 8](ch08.html "Chapter 8. Optimizing Your Requests"),
    *Optimizing Your Requests*.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Reloading the views**'
  prefs: []
  type: TYPE_NORMAL
- en: With the cache disabled, simply save your view with eclipse or use the `Build
    > Make Project` action in IntelliJ to refresh the views after a change.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will need to modify our `HelloController` class. Instead of displaying
    plain text, it must now route to our freshly created view. To accomplish this,
    we will remove the `@ResponseBody` annotation. Doing so and still returning a
    string will tell Spring MVC to map this string to a view name instead of displaying
    a particular model directly in the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what our controller now looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the controller will redirect the user to the view name `resultPage`.
    The `ViewResolver` interface will then associate this name with our page.
  prefs: []
  type: TYPE_NORMAL
- en: Let's launch our application again and go to `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Our first page](img/2117_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Spring MVC architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a step back from this spectacular new "Hello World" and try to understand
    what happened inside our web application. To do this, we will retrace the journey
    of the HTTP request our browser sent and the response it got from the server.
  prefs: []
  type: TYPE_NORMAL
- en: DispatcherServlet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The entry point of every Spring web application is the `DispatcherServlet`.
    The following figure illustrates the Dispatcher Servlet architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![DispatcherServlet](img/2117_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a classical `HttpServlet` class that dispatches HTTP requests to HandlerMapping.
    A **HandlerMapping** is an association of resources (URLs) and Controllers.
  prefs: []
  type: TYPE_NORMAL
- en: The appropriate methods—those annotated with `@RequestMapping` annotation—are
    then called on the Controller. In this method, the controller sets the model data
    and returns the view name to the dispatcher.
  prefs: []
  type: TYPE_NORMAL
- en: The `DispatcherServlet` will then interrogate the `ViewResolver` interface to
    find the corresponding implementation of the view.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, the `ThymeleafAutoConfiguration` class has set up the view resolver
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: You can see in the `ThymeleafProperties` class that the default prefix for our
    views is `classpath:/templates/` the default suffix is `.html`.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, given the view name `resultPage`, the view resolver will look
    in the templates directory of our classpath, looking for a file called `resultPage.html`.
  prefs: []
  type: TYPE_NORMAL
- en: In our application our `ViewResolver` interface is static, but more advanced
    implementation can return different results given the request headers or the user's
    locale.
  prefs: []
  type: TYPE_NORMAL
- en: The view will finally be rendered and the result written to the response.
  prefs: []
  type: TYPE_NORMAL
- en: Passing data to the view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our first page is completely static; it does not really take advantage of the
    power of Spring MVC. Let's spice things up a little bit. What if the "Hello World"
    string, instead of being hardcoded, came from the server?
  prefs: []
  type: TYPE_NORMAL
- en: 'It would still be a lame "hello world" you say? Yes, but it will open up many
    more possibilities. Let''s change our `resultPage.html` file to display a message
    coming from the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s modify our controller so it puts this message inside this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: I know, the suspense is killing you! Let's see what `http://localhost:8080`
    looks like.
  prefs: []
  type: TYPE_NORMAL
- en: '![Passing data to the view](img/2117_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing to note is that we passed a new argument to the controller's
    method and that the `DispatcherServlet` provided the correct object for us. There
    are, in fact, many objects that can be injected into the controller's methods
    such as `HttpRequest` or `HttpResponse`, the `Locale`, the `TimeZone`, and the
    `Principal`, which represent an authenticated user. The full list of such objects
    is available in the documentation, which can be found at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Expression Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using the `${}` syntax, you are in fact using **Spring Expression Language**
    (**SpEL**). There are several variants of EL available in the wild; SpEl is one
    of the most powerful variants.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an overview of its main features:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Feature | Syntax | Explanation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Accessing a list element | `list[0]` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Accessing a map entry | `map[key]` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Ternary operator | `condition ? ''yes'' : ''no''` |   |'
  prefs: []
  type: TYPE_TB
- en: '| Elvis operator | `person ?: default` | Returns `default` if person''s value
    is null |'
  prefs: []
  type: TYPE_TB
- en: '| Safe navigation | `person?.name` | Returns `null` if person or her name is
    null |'
  prefs: []
  type: TYPE_TB
- en: '| Templating | `''Your name is #{person.name}''` | Injects values into a string
    |'
  prefs: []
  type: TYPE_TB
- en: '| Projections | `${persons.![name]}` | Extracts the names of all the persons
    and puts them into a list |'
  prefs: []
  type: TYPE_TB
- en: '| Selection | `persons.?[name == ''Bob'']''` | Retrieves the person whose name
    is Bob inside a list |'
  prefs: []
  type: TYPE_TB
- en: '| Function call | `person.sayHello()` |   |'
  prefs: []
  type: TYPE_TB
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For complete reference, check the manual at [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html).
  prefs: []
  type: TYPE_NORMAL
- en: The SpEl usage is not limited to views. You can also use it in various places
    inside the Spring framework, for instance, when injecting properties inside beans
    with the `@Value` annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting data with a request parameter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are able to display data coming from the server inside the view. However,
    what if we wanted to get input from the user? With the HTTP protocol, there are
    multiple ways to do this. The simplest way is to pass a query parameter to our
    URL.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Query parameters**'
  prefs: []
  type: TYPE_NORMAL
- en: You certainly know query parameters. They are found after the `?` character
    in a URL. They consist of a list of name and values separated by the & symbol
    (Ampersand), for example, `page?var1=value1&var2=value2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can leverage this technique to ask our user for their name. Let''s modify
    our `HelloController` class again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If we navigate to `localhost:8080/?name=Geoffroy`, we can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting data with a request parameter](img/2117_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, the request parameter is mandatory. This means that if we were to
    navigate to `localhost:8080`, we would see an error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the `@RequestParam` code, we can see that in addition to the value
    parameter, there are two other attributes possible: `required` and `defaultValue`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, we can change our code and specify a default value for our parameter
    or indicate that it is not required:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Java 8, it is possible not to specify the value parameter. In that case,
    the name of the annotated method parameter will be used.
  prefs: []
  type: TYPE_NORMAL
- en: Enough Hello Worlds, let's fetch tweets!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All right, the name of the book isn't "Mastering Hello Worlds", after all. With
    Spring, interrogating Twitter's API is really easy.
  prefs: []
  type: TYPE_NORMAL
- en: Registering your application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you start, you have to register your application in the Twitter developer
    console.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://apps.twitter.com](https://apps.twitter.com) and create a new
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Give it the name you please. Under the website and Callback URL sections, just
    enter `http://127.0.0.1:8080`. This will allow you to test your application in
    development on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your application](img/2117_2_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, navigate to the keys, access the token, and copy the **Consumer Key**
    and the **Consumer Secret**. We will use this in a moment. Take a look at the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Registering your application](img/2117_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, our application has read only permissions. This will be enough for
    our application, but you can tweak it if you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Spring Social Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the following dependency to our `build.gradle` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Spring Social** is a set of projects providing access to the public APIs
    of various social networks. Out of the box, Spring Boot provides integration with
    Twitter, Facebook, and LinkedIn. Spring Social includes about 30 projects overall,
    which can be found at [http://projects.spring.io/spring-social/](http://projects.spring.io/spring-social/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following two lines to the `application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: These are the keys associated with the application we just created.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn more about OAuth in [Chapter 6](ch06.html "Chapter 6. Securing
    Your Application"), *Securing Your Application*. For now, we will just use those
    credentials to issue requests to Twitter's API on behalf of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing Twitter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can now use Twitter in our controller. Let''s change its name to `TweetController`
    as a variable to reflect its new responsibility in a better manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the code searches for tweets matching the request parameter.
    If it all goes well, you will see the text of the first one being displayed on
    your screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing Twitter](img/2117_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, if the search doesn't yield any result, our clumsy code will fail
    with an `ArrayOutOfBoundException`. So, do not hesitate to tweet to solve the
    problem!
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we wanted to display a list of tweets? Let''s modify the `resultPage.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `th:each` is a tag defined in Thymeleaf that allows it to iterate over a
    collection and assign each value to a variable inside a loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to change our controller as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we are using Java 8 streams to collect only the messages from the
    tweets. The `Tweet` class contains many other attributes such as the sender, the
    retweet count, and so on. However, we will keep it simple for now, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing Twitter](img/2117_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Java 8 streams and lambdas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might not be familiar with lambdas yet. In Java 8, every collection gets
    a default method `stream()`, which gives access to functional-style operations.
  prefs: []
  type: TYPE_NORMAL
- en: These operations can be either intermediate operations returning a stream, and
    thus allowing chaining, or a terminal operation that returns a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most famous intermediate operations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`map`: This applies a method to every element of a list and returns the list
    of results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter`: This returns a list of every element matching a predicate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reduce`: This projects a list into a single value using an operation and an
    accumulator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lambdas are shorthand syntax for function expressions. They can be coerced into
    a Single Abstract Method, an interface with only one function.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can implement the `Comparator` interface as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Within lambdas, the return keyword is implicitly its last expression.
  prefs: []
  type: TYPE_NORMAL
- en: The double colon operator we used earlier is a shortcut to get a reference to
    a function on a class,
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `collect` method allows us to call a terminal operation. The `Collectors`
    class is a set of terminal operations that will put results into lists, sets,
    or maps, allowing grouping, joining, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Calling the `collect(Collectors.toList())` method will produce a list with every
    element within the stream; in our case, the tweet names.
  prefs: []
  type: TYPE_NORMAL
- en: Material design with WebJars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application is already great but it seriously leaves something to be desired
    in terms of aesthetics. You may have heard of material design. It is Google's
    take on flat design.
  prefs: []
  type: TYPE_NORMAL
- en: We will use Materialize ([http://materializecss.com](http://materializecss.com)),
    a great looking responsive CSS and JavaScript library, just like Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design with WebJars](img/2117_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We talked a bit about WebJars in [Chapter 1](ch01.html "Chapter 1. Setting
    Up a Spring Web Application in No Time"), *Setting Up a Spring Web Application
    in No Time*; we will now get to use them. Add jQuery and Materialize CSS to our
    dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The way a WebJar is organized is completely standardized. You will find the
    JS and CSS files of any library in `/webjars/{lib}/{version}/*.js`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, to add jQuery to our page, the following to a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s modify our controller so that it gives us a list of all tweet objects
    instead of simple text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s include materialize CSS in our view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The result already looks way better!
  prefs: []
  type: TYPE_NORMAL
- en: '![Material design with WebJars](img/2117_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last thing we want to do is to put the reusable chunks of our UI into templates.
    To do this, we will use the `thymeleaf-layout-dialect` dependency, which is included
    in the `spring-boot-starter-thymeleaf` dependency of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a new file called `default.html` in `src/main/resources/templates/layout`.
    It will contain the code we will repeat from page to page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will now modify the `resultPage.html` file so it uses the layout, which
    will simplify its contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `layout:decorator="layout/default"` will indicate where our layout can be
    found. We can then inject content into the different `layout:fragment` sections
    of the layout. Note that each template are valid HTML files. You can also override
    the title very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have a nice little tweet display application, but how are our users supposed
    to figure out that they need to supply a "search" request parameter?
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice if we added a little form to our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/2117_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'First, we need to modify our `TweetController` to add a second view to our
    application. The search page will be available directly at the root of our application
    and the result page when hit enter in the `search` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add another page to the `templates` folder called the `searchPage.html`
    file. It will contain a simple form, which will pass the search term to the result
    page via the `get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This is very simple HTML and it works perfectly. You can try it now.
  prefs: []
  type: TYPE_NORMAL
- en: What if we wanted to disallow some search result? Let's say we want to display
    an error message if the user types in `struts`.
  prefs: []
  type: TYPE_NORMAL
- en: The best way to achieve this would be to modify the form to post the data. In
    the controller, we can then intercept what is posted and implement this business
    rule accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to change the form in the `searchPage`, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we change the form to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to handle this post on the server. Add this method to the `TweetController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'There are several novelties here:'
  prefs: []
  type: TYPE_NORMAL
- en: In the request mapping annotation, we specify the HTTP method we want to handle,
    that is, `POST`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We inject two attributes directly as method parameters. They are the request
    and `RedirectAttributes`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We retrieve the value posted on the request and pass it on to the next view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Instead of returning the name of the view, we make a redirection to a URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RedirectAttributes` is a Spring model that will be specifically used to
    propagate values in a redirect scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Redirect/Forward** are classical options in the context of a Java web application.
    They both change the view that is displayed on the user''s browser. The difference
    is that `Redirect` will send a 302 header that will trigger navigation inside
    the browser, whereas `Forward` will not cause the URL to change. In Spring MVC,
    you can use either option simply by prefixing your method return strings with
    `redirect:` or `forward:`. In both cases, the string you return will not be resolved
    to a view like we saw earlier, but will instead trigger navigation to a specific
    URL.'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding example is a bit contrived, and we will see smarter form handling
    in the next chapter. If you put a breakpoint in the `postSearch` method, you will
    see that it will be called right after a post in our form.
  prefs: []
  type: TYPE_NORMAL
- en: So what about the error message?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the `postSearch` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: If the user's search terms contain "struts", we redirect them to the `searchPage`
    and add a little error message using flash attributes.
  prefs: []
  type: TYPE_NORMAL
- en: These special kinds of attributes live only for the time of a request and will
    disappear when the page is refreshed. This is very useful when we use the `POST-REDIRECT-GET`
    pattern, as we just did.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need to display this message in the `searchPage` result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if users try to search for "struts2" tweets, they will get a useful and
    appropriate answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Navigation](img/2117_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The check point
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the end of this chapter, you should have one controller, the `TweetController`,
    handling the search and the untouched generated configuration class, `MasterSpringMvcApplication`,
    in the `src/main/java` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/2117_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the `src/main/resources` directory, you should have one default layout and
    two pages using it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `application.properties` file, we added the Twitter application credentials
    as well as a property telling Spring not to cache the templates to ease development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The check point](img/2117_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned what it takes to make a good MVC architecture.
    We saw some of the inner workings of Spring MVC and used Spring Social Twitter
    with very little configuration. We can now design a beautiful web application,
    thanks to WebJars.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will ask the user to fill in their profile, so that
    we can fetch tweets they might like automatically. This will give you the opportunity
    to learn more about forms, formatting, validation, and internationalization.
  prefs: []
  type: TYPE_NORMAL
