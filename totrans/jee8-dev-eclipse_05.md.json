["```java\n-Xdebug -Xrunjdwp:transport=dt_socket,address=9001,server=y,suspend=n\n\n```", "```java\n -agentlib:jdwp=transport= dt_socket,address=9001,server=y,suspend=n\n```", "```java\n>catalina.bat jpda start \n```", "```java\n$./catalina.sh jpda start  \n```", "```java\n>set JPDA_ADDRESS=9001  \n```", "```java\n$export JPDA_ADDRESS=9001  \n```", "```java\npublic List<Course> getCourses () throws SQLException { \n  //get connection from connection pool \n  Connection con = \n DatabaseConnectionFactory.getConnectionFactory().getConnection(); \n\n  try { \n    Thread.sleep(5000); \n  } catch (InterruptedException e) {} \n\n  List<Course> courses = new ArrayList<Course>(); \n  Statement stmt = null; \n  ResultSet rs = null; \n  try { \n    stmt = con.createStatement(); \n\n    StringBuilder sb = new StringBuilder(\"select course.id as \n     courseId, course.name as courseName,\")      .append(\"course.credits as credits, Teacher.id as teacherId, \n       Teacher.first_name as firstName, \")      .append(\"Teacher.last_name as lastName, Teacher.designation \n       designation \") \n      .append(\"from Course left outer join Teacher on \") \n      .append(\"course.Teacher_id = Teacher.id \") \n      .append(\"order by course.name\"); \n\n    rs = stmt.executeQuery(sb.toString()); \n\n    while (rs.next()) { \n      Course course = new Course(); \n      course.setId(rs.getInt(\"courseId\")); \n      course.setName(rs.getString(\"courseName\")); \n      course.setCredits(rs.getInt(\"credits\")); \n      courses.add(course); \n\n      int teacherId = rs.getInt(\"teacherId\"); \n      if (rs.wasNull()) //no teacher set for this course. \n        continue; \n      Teacher teacher = new Teacher(); \n      teacher.setId(teacherId); \n      teacher.setFirstName(rs.getString(\"firstName\")); \n      teacher.setLastName(rs.getString(\"lastName\")); \n      teacher.setDesignation(rs.getString(\"designation\")); \n      course.setTeacher(teacher); \n    } \n\n    try { \n      Thread.sleep(5000); \n    } catch (InterruptedException e) {} \n\n    return courses; \n  } finally { \n    try {if (rs != null) rs.close();} catch (SQLException e) {} \n    try {if (stmt != null) stmt.close();} catch (SQLException e) \n {} \n    try {con.close();} catch (SQLException e) {} \n  } \n} \n```"]