- en: Chapter 8. Handling Typical Build Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Including and excluding additional resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including and excluding source files and folders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Maven to search for plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working in offline mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the verbosity of the Maven output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven Help plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Maven SCM plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating changelogs for a site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we have seen how to set up Apache Maven to build software
    projects. We have also seen how to configure it to analyze code quality and code
    coverage. We have seen how to generate and publish project documentation.
  prefs: []
  type: TYPE_NORMAL
- en: As we use Apache Maven, we will encounter requirements that are not generic,
    but at the same time, not rare. In many projects, there would be a need to include
    additional source or resource folders. We will see how Maven allows us to do this.
    We would also want to get more verbose output from Maven to help troubleshoot
    when things go wrong. We will also see to what extent we can get the Maven build
    working without the Internet. We will also see how Maven works with **software
    configuration management** (**SCM**) systems and allows SCM changes to be part
    of project documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Including and excluding additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many situations where you will need to include additional resource
    files or folders for compilation or testing. You might also have to exclude specific
    files or folders. Let us see how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified for work. To do this, refer to
    the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open one of the Maven projects for which we need to include or exclude files
    or folders; for instance, `project-with-include-exclude`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the `build` section of your `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the contents of the `resources` folder:![How to do it...](img/6124OS_08_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the contents of the build output directory:![How to do it...](img/6124OS_08_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `resources` goal of the Maven Resources plugin copies all the resources
    required by the source to build the output directory. This goal is bound to the
    `process-resources` phase, which is part of the `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the goal copies over the contents of `src/main/resources`. When
    the `resources` tag is specified in the `pom` file, it copies the contents of
    the directories specified there, based on the `include` and `exclude` filters
    specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our specific example, we did three things:'
  prefs: []
  type: TYPE_NORMAL
- en: Included all the XML files in the `src/resources/xml` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Included a specific file in the `src/resources/json` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Excluded a specific file in the `src/resouces/json` folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if we need to copy test resources selectively? For this, we would need
    to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following in the `build` section of your `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the contents of the `test-classes` folder:![There's more...](img/6124OS_08_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will now copy over the specified test resources to the test output directory
    (`target/test-classes`).
  prefs: []
  type: TYPE_NORMAL
- en: We saw that the `resources` and `testResources` goals copied resources to `classes`
    and `test-classes` respectively. What if we need to copy these to specific folders,
    For instance, `xml` files to the `xml` folder and `json` files to the `json` folder?
    The `add-resource` and `add-test-resource` goals of the Build Helper Maven plugin
    come to our assistance here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the `pom` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Examine the `target/classes` folder now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the `xml` and `json` subfolders with their respective content.
  prefs: []
  type: TYPE_NORMAL
- en: Including and excluding source files and folders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As per Maven conventions, all project sources should be in the `src` folder.
    However, there may be legacy projects that are organized differently and may have
    more than one source folder. Also, in some projects, we might generate sources
    dynamically from tools such as `wsdl2java`. In such cases, Maven needs to be told
    about these additional source folders. Note that such projects may not work well
    in IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to include and exclude source files and folders in
    your Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project named `project-with-additional-source`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following section in the `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'See the output generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: View the `target/classes` folder:![How to do it...](img/6124OS_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We had an additional source folder called `src/main/source`. We specified this
    in the `configuration` section of the Build Helper Maven plugin. We also bound
    the `add-source` goal of the plugin to the `generate-sources` phase of the `default`
    lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: As part of the `default` lifecycle, the `generate-sources` phase is run by Maven
    prior to the `compile` goal. This invokes the `add-source` goal of the plugin,
    which adds the additional folder and its contents for compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a similar way, additional test folders can be added to the build. The configuration
    would be identical to the earlier case, except for the `execution` section, which
    would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We specify the `add-test-source` goal instead of `add-source` and bind it to
    the `generate-test-sources` phase.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Build Helper Maven plugin provides a number of other goals that meet specific
    project requirements. Here are some of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`attach-artifact`: This is used to attach additional artifacts to be installed
    and/or deployed, besides the project artifact. This would be done by configuring
    the plugin as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`maven-version`: This is used to set a property containing the current version
    of Maven, which can be used as required. To use the Maven version number in the
    manifest of the project JAR, we will configure the plugin as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Configuring Maven to search for plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will recall that in the section on using the Maven JaCoCo plugin, to generate
    code coverage we had to explicitly specify the `projectId` and `artifactId` values
    of the plugin to it from the command line. However, for most other plugins, we
    specified the plugin name without additional information.
  prefs: []
  type: TYPE_NORMAL
- en: We will see why we had to do this and how to avoid it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the `settings` file (specifically the `settings.xml` file in your home
    directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command on the same project for which you ran JaCoCo earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two types of Maven plugins, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Plugins maintained by the Maven team itself (let us call them official plugins).
    These are in the default plugin groups `org.apache.maven.plugins` and `org.codehaus.mojo`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All other plugins (let's say third-party plugins).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All official plugins have the same `groupId`, namely `org.apache.maven.plugins`.
    They also have a convention for `artifactId`: `maven-${prefix}-plugin`, where
    `prefix` stands for the plugin prefix, the short name to refer to the plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: The prefix used to reference the plugin can be customized as well. The prefix
    can be specified directly through the `goalPrefix` configuration parameter on
    the `Maven-plugin-plugin` of the plugin's `pom` file.
  prefs: []
  type: TYPE_NORMAL
- en: So, when we run `mvn clean`, Maven looks for the `maven-clean-plugin` in the
    `org.apache.maven.plugins` group.
  prefs: []
  type: TYPE_NORMAL
- en: What about third-party plugins? `pluginGroups` lets Maven know the `groupId`
    where it should search for additional plugins. So in the earlier case, Maven searched
    for plugins in the `org.jacoco` group.
  prefs: []
  type: TYPE_NORMAL
- en: Third-party plugins should be named differently from official plugins. The conventional
    way to define the `artifactId` for third-party plugins is `${prefix}-maven-plugin`.
    When specified in this way, Maven automatically identifies the shortcut name for
    the plugin. In the earlier case, as the `artifactId` is `jacoco-maven-plugin`,
    the shortcut is `jacoco`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven will always search specified `pluginGroups` before it searches the following
    default groups:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.apache.maven.plugins`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.codehaus.mojo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven takes the first match for the shortcut that it finds. For instance, if
    there is a `clean` shortcut in a user-specified plugin in `pluginGroups`, it will
    take precedence over a Maven Clean plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Working in offline mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be situations where a Maven project needs to be built without access
    to the Internet. Let us see how Maven supports this, as well as the caveats.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project that you want to build offline.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe that the build is completed successfully without any network connection.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `go-offline` goal of the Maven Dependency plugin downloads all the required
    dependencies and plugins for the project, based on the pom file. The `–o` option
    tells Maven to work offline and not check the Internet for anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, it is not without its issues. On a brand new local repository, the
    `offline` option will not work with the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a known problem or limitation with the Maven Dependency plugin. The
    required project has to be built online once to download anything that is missed
    out by the plugin. Subsequently, the project can be built offline. This is typically
    not required, as most organizations use a repository manager, such as Nexus or
    Artifactory, if they do not allow direct Internet access.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your project uses `SNAPSHOT` dependencies, then Maven will need the Internet
    to look for updates to the dependencies. To avoid this, you can set the `updatePolicy`
    to `never`, but this would be counterproductive as you will not get the latest
    version of the dependency.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to run Maven in offline mode is to specify the `offline` parameter
    as `true` in the `settings` file. Once this is done, no attempt is made by Maven
    to connect to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following in the settings file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run a Maven build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe that the build is completed successfully without connecting to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the verbosity of the Maven output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, the output from Maven might be too verbose and we may want to only
    see the errors. At other times, the information displayed by Maven may be insufficient
    and we want to see more details. Let us see how we can control this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_08_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_08_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven provides different levels of logging. The typical levels are `DEBUG` (detailed
    messages), `INFO` (information messages), and `ERROR` (error messages). Specifying
    a level displays all messages at and above that level. For instance, specifying
    the `INFO` level displays messages at the `INFO` and `ERROR` levels.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Maven logs all `INFO` level messages to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: The `-q` parameter tells Maven to be quiet and not display anything other than
    `ERROR` level messages on the screen. So the only display is the output from tests.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the `-X` parameter tells Maven to display all messages at
    the `DEBUG` level and above. This gives a lot of information, which is useful
    for troubleshooting issues.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Instead of viewing the Maven output on the screen, you could redirect it to
    a file to be viewed later. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The command will be completed with no output on the screen. The `simple-project-log.txt`
    file will contain all the log messages. You can use a combination of `–l` along
    with `–q` or `–X` to redirect the appropriate level of logging to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternately, the output can be redirected to a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Using the Maven Help plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven provides a `–h` command-line flag to display various command-line parameters
    that it supports. However, there is a Help plugin that helps you get other information.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the simple Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_08_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command on a project with a profile (for instance, `project-with-profile`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Maven Help plugin provides different goals. These are also supported by
    IDEs, and are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`effective-pom`: This displays the pom file that will be used by Maven after
    applying inheritance, interpolation, and profiles. This is useful to know the
    final pom file when it is needed for troubleshooting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all-profiles`: This goal displays all the profiles that are available for
    the project. It indicates whether the profiles are active or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`active-profiles`: This goal displays the list of active profiles. We explicitly
    enabled the `dev` profile (which was not active by default), so it showed up in
    the list of active profiles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Help plugin provides a few other goals as well. A notable one is the
    `describe` goal, which is used to get details of any plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'To understand this, let''s use an instance and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the results:![There's more...](img/6124OS_08_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `describe` goal does not need you to have a Maven project. You are just
    getting some help information for a particular plugin!
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven SCM plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven provides a mechanism to interact with SCM systems in a vendor-independent
    way. Typically, a Maven project is checked in an SCM. Using the Maven SCM plugin,
    you can perform a number of SCM-related activities.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven project that we want to use the plugin with should be in an SCM. Maven
    supports a number of SCM providers. We will use Git to illustrate this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following code to your pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output in Windows:![How to do it...](img/6124OS_08_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Linux, the output will be as follows:![How to do it...](img/6124OS_08_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `status` goal of the Maven SCM plugin is run, it uses the information
    in the `scm` tag of the `pom` file to get the SCM details. It uses this information
    and invokes the corresponding `scm` command to get the status information. In
    the preceding example, it is the `git status`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The command-line version of the relevant SCM client must be installed and available
    in the Maven path for this to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three entries in the `scm` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '`connection`: This is the connection information to access the repository.
    This is typically in the following form:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`service name`: This would be an SCM'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scm implementation`: This would be one of the supported SCMs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`repository url`: This would be a URL for the repository'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`developerConnection`: This is similar to any connection, except that this
    may need authentication or have additional privileges. Typically, the `connection`
    access would be read-only, while the `developerConnection` access would be read-write.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: This is the repository URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will also notice that the appropriate shell command is used based on the
    operating system, which is `cmd.exe` in the case of Windows and `sh` in the case
    of Linux.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven SCM plugin provides a number of other commands for various SCM operations,
    such as `add`, `remove`, `checkin`, `checkout`, `update`, `diff`, `branch`, and
    `tag`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Bootstrap is an interesting option to checkout and build a project with:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Maven project (or open the `bootstrap-project` file).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a valid Maven project in the `scm` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following entries in the `build` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the results:![There's more...](img/6124OS_08_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our Maven project has checked another Maven project, using the information in
    the `scm` section, and run the specified goal on this. We specify a `goalsDirectory`
    element because the SCM contains a number of projects and we want to execute the
    goals for a specific project, in this case `test-properties`.
  prefs: []
  type: TYPE_NORMAL
- en: Generating changelogs for a site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen the Maven SCM plugin in action, we can see how we can
    use this feature to generate a log of project changes as part of the site report.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the Maven project `project-with-documentation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following entry in the `reporting` section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the generated reports:![How to do it...](img/6124OS_08_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `site` command is run, Maven uses the information in the `reporting`
    section of the `pom` file to generate various reports. It finds an entry for the
    Maven Changelog plugin and generates the corresponding changelog report.
  prefs: []
  type: TYPE_NORMAL
- en: This is essentially the SCM log for the project, with details such as timestamp,
    author, and details of change.
  prefs: []
  type: TYPE_NORMAL
