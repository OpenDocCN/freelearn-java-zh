- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation and Logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at two aspects of software development that do
    not directly influence the operation of the code. The first is documentation,
    more commonly called comments. The second is logging, a tool used to record events
    during the run of a program for the purpose of monitoring what the program is
    doing. We will begin with documenting code inline. You likely noticed that none
    of the code shown so far in this book has any comments. This has been done on
    purpose, as each chapter describes what the code is doing. If you look at the
    book’s code in the GitHub repository, you will find comments in every file.
  prefs: []
  type: TYPE_NORMAL
- en: You have probably seen a message telling you to look at the log file when something
    goes wrong in a program. Where do these log files come from? We will examine how
    we can either display messages on the console or write to a file that certain
    events occurred or exceptions were thrown.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the rundown for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand the various ways in which comments
    are added to source code. You will also learn to use logging to record events
    in your code.
  prefs: []
  type: TYPE_NORMAL
- en: We will begin with documentation, but before that, let’s have a quick look at
    the prerequisites for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the tools required to run the examples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven 3.8.6 or a newer version installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample code for this chapter is available at [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Creating documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having been a computer science instructor for 31 years, I can tell you that
    the one task most students put off for as long as possible is documenting their
    code. I have learned of companies that forbid their developers to comment in their
    code. These companies believe that code should be self-documenting. If you cannot
    understand the purpose of the code from how it is written, then it has been written
    poorly. This is a big mistake. Students doing internships at such companies report
    spending an inordinate amount of time trying to understand the company’s code
    base.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting or commenting in code is not about explaining or apologizing for
    writing bad code. Code carries out tasks and the task should be obvious from the
    code itself. What is never obvious is why the code has been constructed in a certain
    way and how it may fit in with the rest of the program. One question to ask yourself
    is whether the programmer who takes over this code base when you get promoted
    or you move to another company understands what you coded and why.
  prefs: []
  type: TYPE_NORMAL
- en: Now let us look at how we add comments to our code and the unique commenting
    technique available in Java, called Javadocs.
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Java, there are three ways to indicate a comment in your code. The first
    is the original C style comment designation, which uses an opening forward slash,
    then an asterisk, a closing asterisk, then a closing forward slash as a set of
    characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, there is the inline comment form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, you can use the `/*` . . . `*/` characters to comment out a section of
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'One important proviso is that you cannot nest these comments inside each other
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Java compiler will see the first `/*` notation as ending at the first `*/`
    notation; leaving the end of the comment will likely be a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second set of characters you can use for comments is the double forward
    slash. These are single-line comments that end when the line ends. They can be
    placed anywhere and everything that follows becomes a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: These are also useful for commenting lines of code. Whenever I am making a change
    to an existing line of code, I first comment out the line I am replacing before
    I write the new line. I rarely delete code until I am certain that the new code
    is working.
  prefs: []
  type: TYPE_NORMAL
- en: There is one more way we can add comments to code and that is by creating Javadocs.
  prefs: []
  type: TYPE_NORMAL
- en: Javadocs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Javadocs are HTML pages created by the `Javadoc` tool, which is included in
    the Java installation. It examines every Java file and constructs an HTML page
    for each public class. These pages include all public fields and methods. While
    we will only look at this default behavior, you can adjust it. Although private
    elements are ignored by Javadocs, it is considered best practice to comment everything
    as if it were public.
  prefs: []
  type: TYPE_NORMAL
- en: Here is a sample program to which we will apply the Javadocs tool. The comments
    continue the discussion on Javadocs, so please do not skim over this but rather
    read it like every page in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To run the `javadoc` tool, use the following command line with switches:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-d` switch is the location to which the HTML files will be written. In
    this case, it is assumed that there is a folder named `docs` in whatever folder
    you are currently in. The folder must exist, as `javadoc` will not create it.
    If the folder does not exist, then the HTML files will be written into the current
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `-sourcepath` switch is the path to the folder that contains either Java
    files or packages. As this is a Maven-based project, the packages and source files
    are always found in `\src\main\java` in whatever folder the Maven project is in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The last switch, `-subpackages`, is a colon-separated list of packages in the
    project. `javadoc` will recursively go through every folder and subfolder, starting
    with the names in the list, to find Java files to be processed. I created a second
    package that began with `org`. `-subpackages` are searched recursively and all
    public or package classes found in any folder starting with the listed names will
    be documented.
  prefs: []
  type: TYPE_NORMAL
- en: When the `javadoc` tool is run on the project, it will create HTML web pages.
    What follows is the Javadocs web page created for the `JavaDocsExample` class.
    It can be quite long. Take note that only public methods appear. Private methods,
    though commented like a public method, do not appear in the HTML output. Here
    is what the Javadocs will look like.
  prefs: []
  type: TYPE_NORMAL
- en: "![Figu\uFEFFre 11.1 – The first half of the generated Javadocs](img/B19088_11_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – The first half of the generated Javadocs
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The second half of the generated Javadocs](img/B19088_11_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The second half of the generated Javadocs
  prefs: []
  type: TYPE_NORMAL
- en: The entire Java library is described in Javadocs and is searchable in your browser.
    See *Further reading* for the URL to these docs. The best practice for the code
    that you write is to write Javadocs comments. This also means that you must describe
    what every part of your program does and, more importantly, why it does what it
    should. Use the `/* . . . */` and `//` notations to include additional comments
    in methods or temporarily remove code.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let us look at how we can record specific events that occur in our code
    using logging.
  prefs: []
  type: TYPE_NORMAL
- en: Using logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your own code, you may want to display messages in the console while the
    program runs. These messages may be to inform you that an exception has been caught
    or record any other event that happens during the program’s execution. While you
    can write to the console using `System.out.print`, `println`, or my favorite,
    `printf`, do not. If the application is console-based, then these statements will
    appear with the console user interface. For GUI or web applications, the console
    may or may not be visible. Once the program goes into production, the end user
    may be confused or overwhelmed by the messages you display in the console.
  prefs: []
  type: TYPE_NORMAL
- en: The solution is logging. This allows you to write log messages to the console,
    a file, or a database, or even send them to yourself in an email. We will only
    look at the console or a file. Java has a logging framework, found in `java.util.logging`.
    We will also look at one of the external logging frameworks from the Apache Foundation,
    called **Log4j2**.
  prefs: []
  type: TYPE_NORMAL
- en: java.util.logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two parts to a logging framework. There is the framework of Java classes
    and the configuration file. For JUL, the common name for `java.util.logging`,
    there is a configuration file named `logging.properties` in the `conf` folder
    of the Java installation. We will see how to use a custom config file rather than
    use the config shared by all applications. The default location for the JUL config
    is in the Java `conf` folder. We can place our JUL custom properties file anywhere
    on our system, as we must provide the path to the file when we instantiate the
    logger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a simple program that uses the logger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We instantiate `Logger` using the Factory Software pattern as implemented in
    the `Logger` class. We pass the name of this class so that it can appear in the
    logger output and we can support different `Logger` items for different classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Log messages must be associated with a level, which is the first parameter when
    we use the `log` method. There are six levels, and all have an optional third
    parameter of an `Exception` object. Typically, the `Level.INFO` parameter is used
    for recording information that you wish to record about what the program is doing
    or who is doing it. `Level.SEVERE` is used for recording exceptions. The `FINEST`,
    `FINER`, and `FINE` parameters are used while debugging an application. You can
    decide the minimum level in the config file. During development, you will use
    `ALL`, while once put into production you will, raise the level to `INFO`. This
    means that you do not need to delete or comment out log messages below `INFO`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this method, we just create log messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For the `SEVERE` level, I have forced an exception in the `try` block and when
    it is caught, I log it by including the `Exception` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You can add a custom message to an exception by passing a `String` object to
    the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If you have a custom config file, you must explicitly load the file; otherwise,
    the default config, `logging.properties`, in the Java `conf` folder will be used.
    It is not a good idea to change the default configuration, as it will affect every
    program that you run that uses JUL.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load a custom config file, you need to find this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'When your code is packaged into a JAR file, the location of resource files
    that existed in `src/main/resources` is the root of the project. The `retrieveURLOfJarResource`
    method knows this, so it can load the config file placed in this folder. This
    is in a `static` initialization block, which will ensure that this `Logger` class
    will only be instantiated once should there be more than one instance of this
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The default `logging.properties` file is very well commented. Here are the contents
    of the file with the comments removed. I encourage you to examine the version
    of this file on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s the display output to the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Unless it''s overridden, this will only show logs of this level or greater:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are writing logs to a file, then the `pattern` property is the folder
    and filename. In this case, `%h` means to write the file to your home directory.
    This is the best practice for JUL. If you prefer to store the log files in a specific
    folder name, then it must already exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Every time the program runs, it overwrites the previous log file, as only one
    log file is permitted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Logging is thread-safe. This tells us that up to 100 concurrent log file locks
    can be used. If you get `IOException` errors when writing to a log, you may solve
    this issue by increasing the number of locks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Write to the log file in the XML format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Overriding a handler’s level supersedes the global level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the format of the log when displayed on the screen. You can configure
    `SimpleFormatter`, and this is explained in the comments for the default config
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The custom properties file has the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `FileHandler` class has been added so that logs will be written to a file
    and the console:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Both handlers will now display log messages of every level:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We use `%h` to indicate that we want the logs written to our home directory.
    If you wish to write them to a specific folder, then the folder must already exist.
    If the folder does not exist, then the file will not be created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'There can be three log files, one for each run of the program. After writing
    to the third log file, should there need to be another log file, then it wraps
    around and overwrites the existing files in the order they were created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The Java logger is always available and does not have any dependencies that
    you must add to the Maven POM file. Logging can have an impact on the performance
    of your code. For this reason, there are alternatives to JUL that execute in less
    time or provide features not present in JUL. Let's look at one of the most widely
    used external loggers, Log4j2.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Log4j2 works very much like JUL. Before we can use it, we need to add new dependencies
    to our POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In any file in which you plan to use Log4j2, you begin with this `class` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now to be able to log, you just need the following. Take note that the levels
    are now methods of the `LOG` object. An optional second parameter can take an
    `Exception` reference for all levels, as shown in `Level 5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: When using Log4j2, you should create a config file, as its default behavior
    is limited. In the absence of this file, the logger will do nothing. Like JUL’s
    config, the `log4j2.xml` config file is expected to be found in `src/main/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: Rather than review this file, I ask you to clone the repo from GitHub for this
    chapter and look at the `log4j2.xml` file in the `LoggingExample` project. Its
    comments explain what can be configured. One improvement over JUL is that should
    you wish to store the logs in an arbitrary folder, Log4j2’s file handler will
    create the folder.
  prefs: []
  type: TYPE_NORMAL
- en: I add a logger to almost every file I write. This allows me to write logs as
    needed. Declaring a `Logger` object that you do not use will have no effect on
    the performance of your program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered two important tasks that every programmer should
    include in their code, regardless of the language used. The first was documentation.
    Comments and Javadocs can be critical in the maintenance of existing code or in
    adding new features. You may think you will never forget why you coded in a certain
    way, but 6 months from now, that memory may not be as accurate as it needs to
    be.
  prefs: []
  type: TYPE_NORMAL
- en: During the development of software, and once it goes into production, having
    the program write what it is doing to the console, or more commonly, to a file,
    can go a long way in tracking down bugs. Auditing software that is subject to
    regulations is another task logging can carry out. Never use `System.out.print`
    or its cousins to display information about the operation of a program – use a
    logger. Either the Java logger or an external logger such as Log4j2 should be,
    must be deployed in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Documenting your code is mandatory. Using logging to record events in a program
    is mandatory. Remember that programming is an engineering discipline and not an
    art form. Engineering requires the type of documentation described here and requires
    the use of logging to monitor a program’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: Coming up, we will look at how to work with floating-point numbers when absolute
    accuracy is required. Testing our code to ensure it performs as designed is also
    covered in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*How to Write Doc Comments for the Javadoc* *Tool*: [https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide](https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Java 17 Javadocs: [https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Java Logging Tools and* *Frameworks*: [http://www.java-logging.com/](http://www.java-logging.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
