["```java\n            SPRING_CONFIG_LOCATION: file:/config-repo/application.yml,file:/config-repo/product.yml \n            ```", "```java\n            configmap:\n              enabled: true\n              volumeMounts:\n                mountPath: /config-repo \n            ```", "```java\n         rabbitmq-zipkin-credentials:\n            RABBIT_USER: rabbit-user-dev\n            RABBIT_PASSWORD: rabbit-pwd-dev\n          mongodb-credentials:\n            SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin\n            SPRING_DATA_MONGODB_USERNAME: mongodb-user-dev\n            SPRING_DATA_MONGODB_PASSWORD: mongodb-pwd-dev \n        ```", "```java\n    product:\n      envFromSecretRefs:\n        - rabbitmq-credentials\n        - mongodb-credentials \n    ```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: product\nspec:\n  template:\n    spec:\n      containers:\n        - name: product\n          env:\n          - name: SPRING_CONFIG_LOCATION\n            value: file:/config-repo/application.yml,file:/config-repo/product.yml\n          - name: SPRING_PROFILES_ACTIVE\n            value: docker\n          envFrom:\n          - secretRef:\n              name: rabbitmq-credentials\n          - secretRef:\n              name: mongodb-credentials\n          volumeMounts:\n          - name: product\n            mountPath: /config-repo\n      volumes:\n        - name: product\n          configMap:\n            name: product \n```", "```java\nproduct:\n  envFromSecretRefs:\n    - rabbitmq-credentials\n    - mongodb-credentials \n```", "```java\n envFromSecretRefs:\n    - rabbitmq-credentials\n    - mongodb-credentials \n```", "```java\nhelm template kubernetes/helm/components/product \\\n  --set envFromSecretRefs= \\\n    \"{rabbitmq-credentials, mongodb-credentials}\" \n```", "```java\n    {{- define \"common.ingress\" -}}\n    {{- $common := dict \"Values\" .Values.common -}}\n    {{- $noCommon := omit .Values \"common\" -}} \n    {{- $overrides := dict \"Values\" $noCommon -}} \n    {{- $noValues := omit . \"Values\" -}} \n    {{- with merge $noValues $overrides $common -}}\n    apiVersion: networking.k8s.io/v1\n    kind: Ingress\n    metadata:\n      name: {{ include \"common.fullname\" . }}\n      labels:\n        app.kubernetes.io/name: {{ include \"common.name\" . }}\n        helm.sh/chart: {{ include \"common.chart\" . }}\n        app.kubernetes.io/managed-by: {{ .Release.Service }}\n    {{- with .Values.ingress.annotations }}\n      annotations:\n    {{ toYaml . | indent 4 }}\n    {{- end }} \n    ```", "```java\n    spec:\n      tls:\n        - hosts:\n            - {{ .Values.ingress.host | quote }}\n          secretName: {{ .Values.ingress.tls.secretName }}\n      rules:\n        - host: {{ .Values.ingress.host | quote }}\n          http:\n            paths:\n            {{- range .Values.ingress.paths }}\n              - path: {{ .path }}\n                pathType: Prefix\n                backend:\n                  service:\n                    name: {{ .service }}\n                    port:\n                      name: http\n            {{- end }}\n    {{- end }}\n    {{- end -}} \n    ```", "```java\n    ingress:\n      annotations:\n        cert-manager.io/issuer: selfsigned\n      tls:\n        secretName: tls-certificate \n    ```", "```java\n    {{- template \"common.ingress\" . -}} \n    ```", "```java\n    ingress:\n      host: minikube.me\n      paths:\n        - path: /oauth2\n          service: auth-server\n        - path: /login\n          service: auth-server\n        - path: /error\n          service: auth-server\n        - path: /product-composite\n          service: product-composite\n        - path: /actuator/health\n          service: product-composite\n        - path: /openapi\n          service: product-composite\n        - path: /webjars\n          service: product-composite \n    ```", "```java\nhelm template kubernetes/helm/environments/dev-env \n```", "```java\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: RELEASE-NAME-dev-env\n  labels:\n    app.kubernetes.io/name: dev-env\n    helm.sh/chart: dev-env-1.0.0\n    app.kubernetes.io/managed-by: Helm\n  annotations:\n    cert-manager.io/issuer: selfsigned\nspec:\n  tls:\n    - hosts:\n        - \"minikube.me\"\n      secretName: tls-certificate\n  rules:\n    - host: \"minikube.me\"\n      http:\n        paths:\n          - path: /oauth2\n            pathType: Prefix\n            backend:\n              service:\n                name: auth-server\n                port:\n                  name: http\n          - path: /product-composite\n            pathType: Prefix\n            backend:\n              service:\n                name: product-composite\n                port:\n                  name: http\n          - path: /actuator/health\n            pathType: Prefix\n            backend:\n              service:\n                name: product-composite\n                port:\n                  name: http \n```", "```java\n{{- define \"common.issuer\" -}}\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned\nspec:\n  selfSigned: {}\n{{- end -}} \n```", "```java\ningress:\n  annotations:\n    cert-manager.io/issuer: selfsigned\n  tls:\n    secretName: tls-certificate \n```", "```java\n{{- template \"common.issuer\" . -}} \n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: ingress-nginx-controller\nspec:\n  template:\n    spec:\n      containers:\n        image: registry.k8s.io/ingress-nginx/controller:v1.5.1\n        ports:\n        - containerPort: 443\n          hostPort: 443 \n```", "```java\n    helm repo add jetstack https://charts.jetstack.io\n    helm repo update\n    helm install cert-manager jetstack/cert-manager \\\n      --create-namespace \\\n      --namespace cert-manager \\\n      --version v1.11.0 \\\n      --set installCRDs=true \\\n      --wait \n    ```", "```java\n    kubectl get pods --namespace cert-manager \n    ```", "```java\n    sudo bash -c \"echo 127.0.0.1 minikube.me | tee -a /etc/hosts\" \n    ```", "```java\n    cd $BOOK_HOME/Chapter17\n    eval $(minikube docker-env -u)\n    ./gradlew build\n    eval $(minikube docker-env)\n    docker-compose build \n    ```", "```java\n        for f in kubernetes/helm/components/*; do helm dep up $f; done \n        ```", "```java\n        for f in kubernetes/helm/environments/*; do helm dep up $f; done \n        ```", "```java\n    kubectl config set-context $(kubectl config current-context) --namespace=hands-on \n    ```", "```java\n    kubectl get certificates -w --output-watch-events \n    ```", "```java\n    helm install hands-on-dev-env \\\n      kubernetes/helm/environments/dev-env \\\n      -n hands-on \\\n      --create-namespace \\\n      --wait \n    ```", "```java\n    HOST=minikube.me PORT=8443 USE_K8S=true ./test-em-all.bash \n    ```", "```java\nkubectl describe cert tls-certificate \n```", "```java\nkubectl patch certificate tls-certificate --type=json \\\n-p='[{\"op\": \"add\", \"path\": \"/spec/renewBefore\", \"value\": \"2159h59m\"}]' \n```", "```java\nkubectl get cert tls-certificate -o json | jq .status.renewalTime \n```", "```java\nkubectl patch certificate tls-certificate --type=json \\\n  -p='[{\"op\": \"remove\", \"path\": \"/spec/renewBefore\"}]' \n```", "```java\nkubectl delete namespace hands-on \n```", "```java\n    eval $(minikube docker-env)\n    docker-compose up -d mongodb mysql rabbitmq \n    ```", "```java\n    docker tag hands-on/auth-server hands-on/auth-server:v1\n    docker tag hands-on/product-composite-service hands-on/product-composite-service:v1 \n    docker tag hands-on/product-service hands-on/product-service:v1\n    docker tag hands-on/recommendation-service hands-on/recommendation-service:v1\n    docker tag hands-on/review-service hands-on/review-service:v1 \n    ```", "```java\n    helm install hands-on-prod-env \\\n      kubernetes/helm/environments/prod-env \\\n      -n hands-on --create-namespace \\\n      --wait \n    ```", "```java\n    HOST=minikube.me PORT=8443 USE_K8S=true ./test-em-all.bash \n    ```", "```java\n    kubectl delete namespace hands-on \n    ```", "```java\n    eval $(minikube docker-env)\n    docker-compose down \n    ```", "```java\nproduct:\n  build: microservices/product-service\n  image: hands-on/product-service\n  environment:\n    - SPRING_PROFILES_ACTIVE=docker\n    - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/product.yml\n    - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USR}\n    - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PWD}\n    - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=admin\n    - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USR}\n    - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PWD}\n  volumes:\n    - $PWD/config-repo:/config-repo \n```", "```java\nRABBITMQ_USR=rabbit-user-prod\nRABBITMQ_PWD=rabbit-pwd-prod\nMONGODB_USR=mongodb-user-prod\nMONGODB_PWD=mongodb-pwd-prod \n```", "```java\n    eval $(minikube docker-env --unset) \n    ```", "```java\n    minikube stop \n    ```", "```java\n    docker-compose build \n    ```", "```java\n    COMPOSE_FILE=docker-compose.yml ./test-em-all.bash start stop \n    ```", "```java\n    COMPOSE_FILE=docker-compose-partitions.yml ./test-em-all.bash start stop \n    ```", "```java\n    COMPOSE_FILE=docker-compose-kafka.yml ./test-em-all.bash start stop \n    ```", "```java\nCOMPOSE_FILE=docker-compose-kafka.yml ./test-em-all.bash stop \n```", "```java\n    minikube start\n    kubectl config set-context $(kubectl config current-context) --namespace=hands-on \n    ```"]