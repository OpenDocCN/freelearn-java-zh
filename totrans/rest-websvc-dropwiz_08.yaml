- en: Chapter 8. The Web Service Client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have our service ready and functional, but we need an interface to actually
    use it. Of course, by using a web browser, we are able to perform HTTP GET requests,
    but not more complex requests such as POST. We need to create an HTTP Client for
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Also, in many cases, you may need to have your web services call other web services
    and then perform additional processing before returning information to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: Building a client for our application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropwizard includes both Jersey and Apache HTTP clients. We will use the Jersey
    client to create a client for our web service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the `dropwizard-client` module to the dependencies section of your `pom.xml`
    in order to add web service client support to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a new resource class that will listen for and accept HTTP GET
    requests from our web browser and then call the appropriate method of the `Contact`
    resource and render the response in a human-friendly format. Let''s have a look
    at the steps required in order to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `ClientResource` class in the `com.dwbook.phonebook.resources` package.
    Similar to the `ContactResource` class, we should first import the required `javax.ws.rs`
    annotations, the representation classes we are going to use, as well as the required
    Jersey client classes as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the context path of the client resource class to `/client/` to logically
    separate the URIs of client and service by adding the appropriate annotation to
    the newly created class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since our client is going to be used by humans, we need a human-friendly response
    type such as `text/plain`, so we will use `MediaType.TEXT_PLAIN`. Define it by
    adding the `@Produces` annotation to our class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In order to perform calls to other web services (in this case, our service,
    the `ContactResource` class), we need to have a `Client` instance as a member
    of our resource class. This will be provided during initialization, so we need
    to have an appropriate constructor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Instantiate the client in our application's entry class, and also add the new
    resource to the environment by adding a couple of lines of code to the `App#run()`
    method. Of course, we first need to import `com.sun.jersey.api.client.Client`,
    `io.dropwizard.client.JerseyClientBuilder`, and the `com.dwbook.phonebook.resources.ClientResource`
    class we've just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now have the client resource ready. This resource has a Jersey `Client` object
    as a member, which we can use to perform HTTP requests on specific URLs by building
    `WebResource` objects (using the `Client#resource()` method) and interacting with
    them.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the time, and generally in large-scale applications, the client is decoupled
    from the backend services, forming a separate application. Backend services usually
    perform more intensive and complex tasks, and it is generally a good practice
    to treat and scale them independently from the client.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with our services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will proceed by adding the necessary methods to the `ClientResource` class,
    bound to the GET requests so they can be easily triggered with a browser. We need
    to add methods for creating, updating, deleting, and retrieving contacts, which
    we will trigger by performing appropriate HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `#showContact()` method to the `ClientResource` class, binding the query
    `String` parameter `id` as the input using the `@QueryParam` annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the `#newContact()` method. This method is going to accept the properties
    of a `Contact` object as parameters and will create a new contact by performing
    the appropriate HTTP request to the `ContactResource` service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `#updateContact()` method for updating contacts will be quite similar to
    the previous one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a similar way, let's add the method for deleting contacts, `#deleteContact()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you may build and run the application in order to see what we've done up
    to this point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Point your browser at `http://localhost:8080/client/showContact?id=1`. The client
    will perform an HTTP GET request to `http://localhost:8080/contact/1`, parse the
    JSON representation of the contact, and produce a plain text summary of it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9530OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to perform an HTTP request, we must first create a `WebResource` instance
    (since RESTful Web Services are all about resources and HTTP verbs) using the
    `#resource(String)` method of our client. Think of `WebResource` as a proxy for
    a specific web service endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The `#get()` method of the `WebResource` class takes the class that we will
    use to parse and map the response as a parameter, which will also be its return
    type.
  prefs: []
  type: TYPE_NORMAL
- en: For the HTTP POST request though, we use the generic HTTP response class, `ClientResponse`,
    which we can use to extract the status code of the response using the `#getStatus()`
    method. Also, we can extract its headers using the `#getHeaders()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Note that for POST and PUT requests, we are also setting up the media type of
    the request data (`WebResource#type()`).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you point your web browser at `http://localhost:8080/client/newContact?firstName=Jane&lastName=Doe&phone=98765432`,
    our client will post that data to `ClientResource`, which will create a new contact
    and return its location back to the client. The client will then show us the new
    contact''s URL as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9530OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, we can update a contact using the client by requesting the appropriate
    URL. The URL `http://localhost:8080/client/updateContact?id=1&firstName=Alex&lastName=Updated&phone=3210465`
    will trigger a PUT request to the contact service, which will eventually update
    the contact with `id` equal to 1.
  prefs: []
  type: TYPE_NORMAL
- en: As you may already be guessing, the URL `http://localhost:8080/client/deleteContact?id=1`
    will send the relevant HTTP DELETE request to contact service, deleting the contact
    identified by the given `id`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that in the case of validation errors during the creation of a new contact,
    these errors are communicated to the client. Our client checks the status code
    of the POST request, and if it is not equal to `201` (which indicates that the
    entity has been created), then it parses the response as a string and presents
    it to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, navigate to `http://localhost:8080/client/newContact?firstName=J&lastName=D&phone=9`.
    Since we have set constraints indicating that the length of `firstName`, `lastName`,
    and `phone` shall be greater than 2, we will get validation errors as you can
    see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/9530OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
