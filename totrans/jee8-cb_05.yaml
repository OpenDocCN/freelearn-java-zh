- en: Security of Enterprise Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter covers the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Domain protection with authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Granting rights through authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting data confidentiality and integrity with SSL/TLS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using declarative security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using programmatic security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Security** is surely one of the hottest topics of all time in the software
    industry, and there''s no reason for that to change any time soon. Actually, it
    will probably become even hotter as time goes on.'
  prefs: []
  type: TYPE_NORMAL
- en: With all your data being streamed through the cloud, passing through uncountable
    servers, links, databases, sessions, devices, and so on, what you would expect,
    at least, is that it is well-protected, secured, and that its integrity is kept.
  prefs: []
  type: TYPE_NORMAL
- en: Now, finally, Java EE has its own Security API, with Soteria being its reference
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Security is a subject worthy of dozens of books; that's a fact. But this chapter
    will cover some common use cases that you may come across in your daily projects.
  prefs: []
  type: TYPE_NORMAL
- en: Domain protection with authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is whatever process, task, and/or policy is used to define who
    can access your domain. It's like, for example, a badge that you use to access
    your office.
  prefs: []
  type: TYPE_NORMAL
- en: In applications, the most common use of authentication is to allow access to
    your domain to users who are already registered.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use a simple code and configuration to control
    who can and who cannot access some of the resources of your application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We begin by adding our dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we do some configuration in the `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create a servlet to deal with our user access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we create the class that will define our authentication policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you run this project in a Java EE 8-compatible server, you should use this
    URL (assuming that you are running locally. If not, make the appropriate changes):'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-authentication/UserAuthenticationServlet?name=user`'
  prefs: []
  type: TYPE_NORMAL
- en: 'This should result in a page with these messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Try making any change to the `name` parameter, such as this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-authentication/UserAuthenticationServlet?name=anotheruser`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's split up the code shown earlier, so that we can better understand what's
    happening.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `web.xml` file, we are creating a security constraint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We''re defining a resource inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'And we''re defining an authorization policy. In this case, it''s a role:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we have `UserAuthenticationServlet`. We should pay attention to this annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: It defines which roles are part of the context of this particular servlet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important actor in this scene is this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are asking the server to give us a security context so that we can
    use it for our purpose. It will make sense in a minute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if the `name` parameter is filled, we reach this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This will ask the Java EE server to process an authentication. But...based on
    what? That's where our `HttpAuthenticationMechanism` implementation comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the preceding code created `CallerOnlyCredential`, our authentication mechanism
    will be based on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'And once we have a `credential` instance, we can check if the user "exists":'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As an example, we have just compared the names, but in a real case you could
    search your database, an LDAP server, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the user exists, we proceed with the authentication based on some rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have said that the user has access to `"role1"` and `"role2"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the authentication is done, it comes back to the servlet and uses the
    result to finish the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: So, this code will print `true` for `"role1"` and `"role2"`, and `false` for
    `"role3"`. Because `"/authServlet"` is allowed for `"role1"`, the user will have
    access to it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The full source code of this recipe is available at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-authentication](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-authentication).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Granting rights through authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If authentication is the way to define who can access a particular resource,
    authorization is the way to define what a user can and cannot do once they have
    access to the domain.
  prefs: []
  type: TYPE_NORMAL
- en: It's like allowing someone to get into your house, but denying them access to
    the remote control for your TV (very important access, by the way). Or, allowing
    access to the remote control, but denying access to adult channels.
  prefs: []
  type: TYPE_NORMAL
- en: One way to do it is through profiles, and that's what we are going to do in
    this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by adding the dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we define some roles in a separate class so that we can reuse it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we define some things that the application''s users can do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create an interface for executable tasks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'And let''s create another for the roles that will execute them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'For each role, we create an executor. It will be like an environment that owns
    the rights of that role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we implement `HttpAuthenticationMechanism`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we create the servlet that will manage all these resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'To try this code out, you can run these URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-authorization/UserAuthorizationServlet?name=user1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-authorization/UserAuthorizationServlet?name=user2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-authorization/UserAuthorizationServlet?name=user3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The result for `user1`, for example, will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you try with a user that doesn''t exist, the result will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well, we have a lot of things happening here! Let's begin with our `UserActivity`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We used the `@RolesAllowed` annotation to define the role that can access each
    method of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: You can add more than one role inside the annotation (it's an array).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also had two others interesting annotations, `@PermitAll` and `@DenyAll`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `@PermitAll` annotation allows anyone to access the method, even without
    any authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `@DenyAll` annotation denies everyone access to the method, even authenticated
    users with the highest privileges.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we have what we called executors:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We used the `@RunAs` annotation at the class level, which means that this class
    inherits all the privileges of the defined role (in this case, `"role1"`). It
    means that every single method of this class will have the `"role1"` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, looking at `UserAuthorizationServlet`, right at the beginning we have
    an important object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are asking the server to give us a security context instance so that
    we can use it for authentication purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if the `name` parameter is filled, we reach this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This will ask the Java EE server to process an authentication. That's where
    our `HttpAuthenticationMechanism` implementation comes in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the preceding code created `CallerOnlyCredential`, our authentication mechanism
    will be based on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'And once we have a credential instance, we can check if the user exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: So we are saying that `"user1"` has access to `"role1"`, `"user2"` to `"role2"`,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user role is defined, we are back to the servlet and can choose which
    environment (executor) will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: And then we try all the methods of the `UserActivity` class. Only the methods
    allowed for that specific role will be executed; the others will fall into an
    exception, except for the `@PermitAll` method, which will run anyway, and `@DenyAll`,
    which will not run anyway.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check the full source code of this recipe at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-authorization](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-authorization).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Protecting data confidentiality and integrity with SSL/TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security also means protecting the transportation of your data, and for this
    purpose we have the most popular method, which is called the **Secure Sockets
    Layer** (**SSL**).
  prefs: []
  type: TYPE_NORMAL
- en: '**Transport Layer Security**, or **TLS**, is the newest version of SSL. So,
    we have SSL 3.0 and TLS 1.0 as the protocols supported by GlassFish 5.0.'
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to enable GlassFish 5.0 to work properly with
    SSL. All Java EE servers have their own way of doing this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To enable SSL in GlassFish, you need to configure an HTTP listener for SSL.
    All you need to do is this:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure GlassFish is up and running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `create-ssl` command to create your HTTP listener for SSL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the GlassFish server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To do this task, you need to access the GlassFish remote **command-line interface**
    (**CLI**). You can do it by going to this path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`$GLASSFISH_HOME/bin`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are there, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'When the prompt is ready, you can execute this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Then you can restart the server and your `http-listener-1` will work with SSL.
    If you want to drop SSL from the listener, just go back to the prompt and execute
    this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With SSL, both the client and the server encrypt data before sending it, and
    decrypt data upon receiving it. When a browser opens a secured website (using
    HTTPS), something happens that is called a **handshake**.
  prefs: []
  type: TYPE_NORMAL
- en: In the handshake, the browser asks the server  for a session; the server answers
    by sending a certificate and the public key. The browser validates the certificate
    and, if it is valid, generates an unique session key, encrypts it with the server
    public key, and sends it back to the server. Once the server receives the session
    key, it decrypts it with its private key.
  prefs: []
  type: TYPE_NORMAL
- en: Now, both client and server, and only them, have a copy of the session key and
    can ensure that the communication is secure.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's strongly recommended that you use a certificate from a **Certification
    Authority** (**CA**) instead of a self-created certificate like we did in this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: You can check out [https://letsencrypt.org](https://letsencrypt.org), where
    you can get your free certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The process of using it is the same; you will just change the value in the `--certname` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For detailed information about all the security aspects and configuration for
    GlassFish 5, check out [https://javaee.github.io/glassfish/doc/5.0/security-guide.pdf](https://javaee.github.io/glassfish/doc/5.0/security-guide.pdf).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using declarative security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When building your application''s security features, you can basically use
    two approaches: **programmatic security** and **declarative security**:'
  prefs: []
  type: TYPE_NORMAL
- en: The programmatic approach is when you define the security policy of your application
    using code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The declarative approach is when you do it by declaring the policies and then
    applying them accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This recipe will show you the declarative approach.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by adding the dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a list of roles for our application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create a list of tasks that could be performed by only one of the roles, one
    task that everyone can do, and another task that no one can do:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we create an environment for both the `USER` and `ADMIN` roles to do their
    stuff:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we implement `HttpAuthenticationMechanism`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we create one servlet for each role (`USER` and `ADMIN`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Looking at `UserServlet` (which applies to the `USER` role), we first see the
    authentication step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, we''ve used the role name as a username because if we look at
    the `AuthenticationMechanism` class (implementing `HttpAuthenticationMechanism`),
    we see it doing all the hard work of authenticating and assigning the right role
    to the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'And back to our `UserServlet`, now that the user has the proper role assigned,
    it is just a matter of what they can and cannot do:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'And also, we try the tasks that everyone and no one can perform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The `AdminServlet` class goes through exactly the same steps using an `AdminExecutor`
    environment, so we will omit it for the sake of space.
  prefs: []
  type: TYPE_NORMAL
- en: 'To try out this code, just run it on a Java EE 8-compatible server using these
    URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-declarative/AdminServlet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-declarative/UserServlet`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The result example for `AdminServlet` will be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Check the full source code of this recipe at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-declarative](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-declarative).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using programmatic security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've already seen the declarative approach, so now let's see the programmatic
    approach.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by adding the dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s first define our roles list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s define a list of tasks to be done based on the role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s implement the `IndentityStore` interface. Here, we define our policy
    for validating the user''s identity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we implement the `HttpAuthenticationMethod` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, we create the servlet where the user will both authenticate and
    do their stuff:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'To try out this code, run it in a Java EE 8-compatible server using these URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-programmatic/OperationServlet?name=user&password=1234`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch05-programmatic/OperationServlet?name=admin&password=1234`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of an `ADMIN` role''s result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'And if you use a wrong name/password pair, you get this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Contrary to the declarative approach (see the previous recipe in this chapter),
    here we are using code to validate the user. We've done it by implementing the
    `IdentityStore` interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, even though we''ve hardcoded the password, you can use the same
    piece of code to validate the password against a database, LDAP, an external endpoint,
    and many more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Authenticating using `IdentityStore` means just delegating using `HttpAuthenticationMethod`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, `OperationServlet` will just try an authentication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Based on this, we will define the flow of what will happen next:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Pay attention! That is your code defining what each role will do.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: See the full source code for this recipe at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-programmatic](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter05/ch05-programmatic).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
