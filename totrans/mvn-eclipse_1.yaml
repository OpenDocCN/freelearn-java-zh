- en: Chapter 1. Apache Maven – Introduction and Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"A journey of a thousand miles starts with a single step", Lao Tzu. Rightly
    so, if you are reading this sentence here, you have taken a step towards a journey
    of Maven with Eclipse. As part of this journey, in the very first chapter, we
    will introduce you to Maven and its basic architecture and then guide you through
    the installation process through the following subtopics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven's origin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven's principles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven's component architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven versus Ant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Linux and Mac OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying the installation of Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Apache Maven''s official site states that **Apache Maven**, which is also known
    as **Maven**, is a software project management and comprehension tool. Generally,
    software project management comprises planning, organizing, managing resource
    pools, and developing resource estimates; hence, it is a meaningless abstraction
    to justify Maven offerings. To put it in simple words, Maven is a comprehensive
    approach towards the process of applying patterns to a build infrastructure with
    primary goals as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Easing the build process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a uniform build system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing quality project information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing guidelines for best practice development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowing transparent migration to new features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In order to achieve the preceding goals, Maven provides a set of build standards,
    an artifact repository model, an engine that describes projects, and a standard
    lifecycle to build, test, and deploy project artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Maven's origin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven, a Yiddish word that means *accumulator of knowledge*, was initially started
    as an attempt to simplify the build processes in the Jakarta Turbine project.
    Prior to Maven, Ant was the build tool used across projects, and there were different
    Ant build files across different projects. Also, there were no standard or consistent
    Ant build files for projects, and JARs were also required to be checked in subversion.
    Hence, there was a growing necessity to standardize the project's build process
    and its structure, publish project information, and reuse JARs across projects,
    which resulted in the formation of a new tool, Maven. Maven has made the day-to-day
    work of developers easy, and it provides comprehension of any Java project.
  prefs: []
  type: TYPE_NORMAL
- en: Maven's principles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven''s principles can be stated in the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convention over configuration**: Maven defines the default project structure
    and builds a life cycle that eases the burden during development. By specifying
    a publicly defined model, it makes the project more understandable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Declarative execution**: Maven defines a build life cycle that comprises
    phases, which in turn are made up of plugin goals. Plugins and goals can be included
    declaratively in the `pom` file to customize the execution of a project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability**: Maven was built with reusability in mind. The build and execution
    declaration in one project can be used across different projects. Maven also makes
    it easier to create a component and integrate it into a multiproject build system.
    Also, with Maven Best Practices, development across the industry is encouraged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Coherent organization of dependency**: Maven takes care of dependency management,
    thus reducing the burden on the part of developers. Different conflicts across
    dependencies are also handled beautifully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Focus on writing applications**: With a standard project layout and build
    lifecycle, there is no need to develop the build; the focus should primarily be
    on building the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven's component architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven is built around different components as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Maven''s component architecture](img/00002.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '**Maven component architecture (Reference Apache Team Presentation)**'
  prefs: []
  type: TYPE_NORMAL
- en: The Plexus container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Plexus is an IOC container that provides component-oriented programming to
    build modular, reusable components that can be easily assembled and reused. Some
    of the features supported are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Component lifecycles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component instantiation strategies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nested containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-wiring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Component dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various dependency injection techniques, including constructor injection, setter
    injection, and private field injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on this can be found at [http://plexus.codehaus.org/](http://plexus.codehaus.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Wagon
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Maven Wagon is a transport abstraction used in the Maven artifact and repository-handling
    code. Wagon defines a unified API, and it currently has the following providers:'
  prefs: []
  type: TYPE_NORMAL
- en: File
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTP lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FTP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SSH/SCP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebDAV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on this can be found at [https://maven.apache.org/wagon/](https://maven.apache.org/wagon/).
  prefs: []
  type: TYPE_NORMAL
- en: Maven Doxia
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Doxia is a content generation framework that provides users with powerful techniques
    to generate static and dynamic content. Doxia is also used in a web-based publishing
    context to generate static sites, in addition to being incorporated into dynamic
    content generation systems such as blogs, wikis, and content management systems.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on Maven Doxia, refer to [https://maven.apache.org/doxia/](https://maven.apache.org/doxia/).
  prefs: []
  type: TYPE_NORMAL
- en: Modello
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Modello component in Maven can be used to generate the following types
    of artifacts at build time with reference to the data model:'
  prefs: []
  type: TYPE_NORMAL
- en: Java POJOs of the data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java POJOs to XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML to Java POJOs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Xdoc documentation of the data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XML schema to validate that XML content matches the data model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information, refer to [http://maven.apache.org/maven-1.x/plugins/modello/](http://maven.apache.org/maven-1.x/plugins/modello/).
  prefs: []
  type: TYPE_NORMAL
- en: Maven SCM
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This component provides a common API to perform **Source Code Management**
    (**SCM**) operations. The following type of SCMs are supported:'
  prefs: []
  type: TYPE_NORMAL
- en: Bazaar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CVS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jazz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mercurial
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Perforce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: StarTeam
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subversion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CM energy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information is available at [http://maven.apache.org/scm/](http://maven.apache.org/scm/).
  prefs: []
  type: TYPE_NORMAL
- en: Maven versus Ant
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before the emergence of Maven, Ant was the most widely used build tool across
    Java projects. Ant emerged from the concept of creating files in C/C++ programming
    to a platform-independent build tool. Ant used XML files to define the build process
    and its corresponding dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: '**Another Neat Tool** (**Ant**) was conceived by James Duncan Davidson while
    preparing Sun''s reference JSP/Servlet engine, Apache Tomcat. The following is
    a simple sample of an Ant build file ([http://ant.apache.org/manual/using.html](http://ant.apache.org/manual/using.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the sample code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the sample code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: This example shows how to build a simple JAR file. Note how all the details
    corresponding to source files, class files, and JAR files have to be specified.
    Even the sequence of steps must be specified. This results in a complex build
    file and often a lot of duplicated XML.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the simplest Maven build file, the `pom` file, which will be discussed
    in more detail in [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating
    and Importing Projects"), *Creating and Importing Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: 'A simple `pom` file will look as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all we need to build and package as a JAR from a Java project. Some
    of the differences between Ant and Maven in the preceding examples are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Convention over configuration**: Ant requires a developer to configure everything
    right from the source code''s location to the storage of a JAR file. Maven, on
    the other hand, follows conventions, has a well-defined project structure, and
    knows where to reference source, resource files, and place the output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifecycle**: Ant does not have a lifecycle and requires defining goals and
    their dependencies. Also, in Ant, the sequence of tasks needs to be specified.
    Maven has defined a lifecycle that consists of build phases and goals; hence,
    no configuration is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apart from the preceding differences that can be cited from the preceding simple
    example, Maven is superior to Ant in the following aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Higher level of reusability**: The build logic can be reused with Maven across
    different projects in Maven.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Less maintenance**: With a standardized structure and the reusability option,
    it requires less effort towards maintenance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dependency management**: One of the most superior aspects of Maven over Ant
    is its ability to manage the corresponding dependencies. Though, lately, Ant in
    combination with Apache Ivy does ease dependency management; however, Maven has
    other aspects that outdo this combo offering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic downloads**: Maven downloads the dependencies automatically; however,
    Ant lacks this. While Ant can use Ivy to replicate this behavior, it requires
    additional behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Repository management**: Maven repositories are arbitrary and accessible
    locations that are designed to store the artifacts that Maven builds. They manage
    repositories as local versus remote (will be discussed in detail in the *Repository*
    section of [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating and Importing
    Projects"), *Creating and Importing Projects*). Ant does not have this aspect
    built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To download Maven, please visit [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Click on the latest version, `apache-maven-x.x.x-bin.zip`; at the time of writing
    this, the current version is `apache-maven-3.2.1-bin.zip`. Download the latest
    version as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Maven](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the ZIP file is downloaded, extract the files to, let''s say, `maven3`.
    After extraction, the contents of the `maven3` folder will have another folder
    named `apache-maven-3.2.1` and the contents of that folder will be as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Downloading Maven](img/00004.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we install Maven, we need to have JDK installed. Check out the Java
    installation with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For Windows, open the command prompt, and for Linux/Mac OS, open the terminal
    and use the preceding command to see the version of the JDK that is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If JDK is not installed, please refer to following link and install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.oracle.com/technetwork/java/javase/index-137561.html](http://www.oracle.com/technetwork/java/javase/index-137561.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Once Java is in place, let's move towards Maven's installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven''s installation is a simple two-step process:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Maven home, that is, the `M2_HOME` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Maven home to the `PATH` variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Maven on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The installation of Maven is just setting up Maven home in the extracted Maven
    folder. For ease, let''s assume the `maven3` folder resides in `C:\Program Files`.
    Now, set Maven home with the following command in the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `PATH` variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, the variables can be set permanently by navigating to **Desktop**
    | **My Computer** | **Properties**. Visit [http://www.computerhope.com/issues/ch000549.htm](http://www.computerhope.com/issues/ch000549.htm)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven on Linux and Mac OS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s assume the `maven3` folder resides in the `/opt` folder. As Mac OS does
    not have the `/opt` folder, let''s create a folder `opt` in root, that is, `/opt`.
    Now, let''s assume we have `maven3`, the extracted folder in it. Then, set the
    Maven home by issuing the following command via the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Add Maven to the `PATH` variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To add it permanently, add it to the `bash` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the preceding variable, that is, two lines to the file, save it, and execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Verifying the installation of Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After performing the previous steps, its time to verify the installation of
    Maven. To verify the installation, perform the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, open the command prompt and type the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Linux and Mac OS, open the terminal and type the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It should show the corresponding version of Maven installed, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying the installation of Maven](img/00005.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! By the end of this chapter, you have got yourselves acquainted
    with Maven and have installed Maven in your system. Now you are ready to take
    a sprint towards the journey. In the next chapter, you will learn about installing
    and setting up the m2eclipse plugin for Eclipse.
  prefs: []
  type: TYPE_NORMAL
