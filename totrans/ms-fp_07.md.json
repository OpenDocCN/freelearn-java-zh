["```java\ncase class FullUser(name: String, id: Int, passwordHash: String)\n```", "```java\ncase class ShortUser(name: String, id: Int)\n```", "```java\ndef full2short(u: FullUser): ShortUser =\n  ShortUser(u.name, u.id)\n```", "```java\ndef respondWith(user: ShortUser): Unit = ???\n```", "```java\nval rootUser = FullUser(\"root\", 0, \"acbd18db4cc2f85cedef654fccc4a4d8\")\n```", "```java\nval handlerExplicit: PartialFunction[String, Unit] = {\n  case \"/root_user\" => respondWith(full2short(rootUser))\n}\n```", "```java\nimplicit def full2short(u: FullUser): ShortUser =\n ShortUser(u.name, u.id)\n```", "```java\nval handlerImplicit: PartialFunction[String, Unit] = {\n  case \"/root_user\" => respondWith(rootUser)\n}\n```", "```java\nprintln(\"Foo\".filter(_ != 'o'))  // \"F\"\n```", "```java\nimplicit def augmentString(x: String): StringOps\n```", "```java\ncase class SimpleWriter[A](log: List[String], value: A) {\n  def flatMap[B](f: A => SimpleWriter[B]): SimpleWriter[B] = {\n    val wb: SimpleWriter[B] = f(value)\n    SimpleWriter(log ++ wb.log, wb.value)\n  }\n  def map[B](f: A => B): SimpleWriter[B] =\n   SimpleWriter(log, f(value)\n}\n```", "```java\nobject SimpleWriter {\n  // Wraps a value into SimpleWriter\n  def pure[A](value: A): SimpleWriter[A] =\n    SimpleWriter(Nil, value)\n  // Wraps a log message into SimpleWriter\n  def log(message: String): SimpleWriter[Unit] =\n    SimpleWriter(List(message), ())\n}\n```", "```java\nimport SimpleWriter.log\ndef add(a: Double, b: Double): SimpleWriter[Double] =\nfor {\n  _ <- log(s\"Adding $a to $b\")\n  res = a + b\n  _ <- log(s\"The result of the operation is $res\")\n} yield res\nprintln(add(1, 2))  // SimpleWriter(List(Adding 1.0 to 2.0, The result\nof the operation is 3.0),3.0\n```", "```java\ncase class IO[A](operation: () => A) {\n  def flatMap[B](f: A => IO[B]): IO[B] =\n   IO.suspend { f(operation()).operation() }\n  def map[B](f: A => B): IO[B] =\n   IO.suspend { f(operation()) }\n}\nobject IO {\n  def suspend[A](op: => A): IO[A] = IO(() => op)\n  def log(str: String): IO[Unit] =\n   IO.suspend { println(s\"Writing message to log file: $str\") }\n}\n```", "```java\nimport IO.log\ndef addIO(a: Double, b: Double): IO[Double] =\nfor {\n  _ <- log(s\"Adding $a to $b\")\n  res = a + b\n  _ <- log(s\"The result of the operation is $res\")\n} yield res\naddIO(1, 2).operation()\n// Outputs:\n// Writing message to log file: Adding 1.0 to 2.0\n// Writing message to log file: The result of the operation is 3.0\n```", "```java\n// Does not compile\n// def add[F[_]](a: Double, b: Double): F[Double] =\n//   for {\n//     _ <- log(s\"Adding $a to $b\")\n//     res = a + b\n//     _ <- log(s\"The result of the operation is $res\")\n//   } yield res\n```", "```java\nimport Monad.Ops\ndef add[F[_]](a: Double, b: Double)(implicit M: Monad[F], L: Logging[F]): F[Double] =\nfor {\n  _ <- L.log(s\"Adding $a to $b\")\n  res = a + b\n  _ <- L.log(s\"The result of the operation is $res\")\n} yield res\nprintln(add[SimpleWriter](1, 2))  // SimpleWriter(List(Adding 1.0 to 2.0, The result of the operation is 3.0),3.0)\nprintln(add[IO](1, 2).operation())\n// Outputs:\n// Writing message to log file: Adding 1.0 to 2.0\n// Writing message to log file: The result of the operation is 3.0\n// 3.0\n```", "```java\ntrait Monad[F[_]] {\n  def pure[A](a: A): F[A]\n  def map[A, B](fa: F[A])(f: A => B): F[B]\n  def flatMap[A, B](fa: F[A])(f: A => F[B]): F[B]\n}\nobject Monad {\n  implicit class Ops[F[_], A](fa: F[A])(implicit m: Monad[F]) {\n    def map[B](f: A => B): F[B] = m.map(fa)(f)\n    def flatMap[B](f: A => F[B]): F[B] = m.flatMap(fa)(f)\n  }\n  implicit val writerMonad: Monad[SimpleWriter] = \n   new Monad[SimpleWriter] {\n     def pure[A](a: A): SimpleWriter[A] =\n      SimpleWriter.pure(a)\n    def map[A, B](fa: SimpleWriter[A])(f: A => B): SimpleWriter[B] =\n      fa.map(f)\n    def flatMap[A, B](fa: SimpleWriter[A])(f: A => SimpleWriter[B]):\n      SimpleWriter[B] = fa.flatMap(f)\n  }\n  implicit val ioMonad: Monad[IO] = new Monad[IO] {\n    def pure[A](a: A): IO[A] =\n     IO.suspend(a)\n    def map[A, B](fa: IO[A])(f: A => B): IO[B] =\n     fa.map(f)\n    def flatMap[A, B](fa: IO[A])(f: A => IO[B]): IO[B] =\n     fa.flatMap(f)\n  }\n}\n```", "```java\ntrait Monad[F[_]] {\n  def pure[A](a: A): F[A]\n  def map[A, B](fa: F[A])(f: A => B): F[B]\n  def flatMap[A, B](fa: F[A])(f: A => F[B]): F[B]\n}\n```", "```java\nimplicit class Ops[F[_], A](fa: F[A])(implicit m: Monad[F]) {\n  def map[B](f: A => B): F[B] = m.map(fa)(f)\n  def flatMap[B](f: A => F[B]): F[B] = m.flatMap(fa)(f)\n}\n```", "```java\nimplicit m: Monad[F]\n```", "```java\nimplicit val writerMonad: Monad[SimpleWriter] = new Monad[SimpleWriter] {\n  def pure[A](a: A): SimpleWriter[A] =\n   SimpleWriter.pure(a)\n  def map[A, B](fa: SimpleWriter[A])(f: A => B): SimpleWriter[B] =\n   fa.map(f)\n  def flatMap[A, B](fa: SimpleWriter[A])(f: A => SimpleWriter[B]):\n   SimpleWriter[B] = fa.flatMap(f)\n}\nimplicit val ioMonad: Monad[IO] = new Monad[IO] {\n  def pure[A](a: A): IO[A] =\n   IO.suspend(a)\n  def map[A, B](fa: IO[A])(f: A => B): IO[B] =\n   fa.map(f)\n  def flatMap[A, B](fa: IO[A])(f: A => IO[B]): IO[B] =\n   fa.flatMap(f)\n}\n```", "```java\ntrait Logging[F[_]] {\n  def log(msg: String): F[Unit]\n}\nobject Logging {\n  implicit val writerLogging: Logging[SimpleWriter] =\n  new Logging[SimpleWriter] {\n    def log(msg: String) = SimpleWriter.log(msg)\n  }\n  implicit val ioLogging: Logging[IO] = new Logging[IO] {\n    def log(msg: String) = IO.log(msg)\n  }\n}\n```"]