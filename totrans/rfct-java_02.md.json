["```java\npublic String getUniqueIdentifier();\n```", "```java\nprivate List<Integer> passengers;\n```", "```java\nprivate Integer adultCount;\nprivate Integer childrenCount;\nprivate Integer infantCount;\n```", "```java\npublic class Passengers {\n   private final Integer adultCount;\n   private final Integer childrenCount;\n   private final Integer infantCount;\n   //constructor(s) and getters...\n}\n```", "```java\nprivate Passenger passengers;\n```", "```java\nprivate Integer movieDuration = 150; //movie duration in\n                                       minutes\n```", "```java\nprivate Duration movieDuration = Duration.of(150,\n    ChronoUnit.MINUTES);\n```", "```java\nclass FlightSearcher {\n    private final EuroFlightPricer euroFlightPricer;\n    FlightSearcher() {\n        this.euroFlightPricer = new EuroFlightPricer();\n    }\n    Collection<Flight> searchFlights(FlightSearchRequest flightSearchRequest) {\n        ...\n    }\n}\n```", "```java\nclass FlightSearcher{\n    private final FlightPricer flightPricer;\n\n    FlightSearcher(FlightPricer flightPricer){\n        this.flightPricer = flightPricer;\n    }\n    Collection<Flight> searchFlights(FlightSearchRequest flightSearchRequest){ \n        …\n    }\n}\n```", "```java\nclass EuroFlightPricer implements FlightPricer{\n    ...\n  @Override\n  Collection<Price> getPrices() { ... }\n  @Override\n  Collection<Discount> getDiscounts() { ... }\n}\n```", "```java\n    // Non-compliant\n    String result = object1.getObject2()\n        .getObject3().getObject4().getValue();\n    ```", "```java\n    // Compliant\n    Object2 object2 = object1.getObject2();\n    Object3 object3 = object2.getObject3();\n    Object4 object4 = object3.getObject4();\n    String result = object4.getValue();\n    ```", "```java\n    // Non-compliant\n    public List<Item> getItems() {\n        return warehouse.getItems();\n    }\n    ```", "```java\n    // Compliant\n    public List<Item> getItems(String itemCategory) {\n        return warehouse.getItemsByCategory(itemCategory);\n    }\n    ```", "```java\n    // Non-compliant\n    public void processOrder(Order order) {\n        shippingService.shipOrder(order);\n    }\n    ```", "```java\n    // Compliant\n    public void processOrder(Order order) {\n        shippingService.shipOrder(order.getItems());\n    }\n    ```", "```java\nclass PayloadStorageService{\n    public SkyVaultClientResponse upload(Payload payload){\n    … }\n}\n```", "```java\nclass PayloadStorageService{\n    public UploadResponse upload(Payload payload){ … }\n}\n```", "```java\nclass PayloadStorageService{\n    public boolean exists(Payload payload) { … }\n    public UploadResponse overWrite(Payload payload) { … }\n    public UploadResponse upload(Payload payload) { … }\n    …\n}\n```", "```java\npublic class WETExample {\n    public static void main(String[] args) {\n        String name = \"John\";\n        System.out.println(\"Hello, \" + name + \"!\");\n        // Some other code...\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```", "```java\npublic class DRYExample {\n    public static void main(String[] args) {\n        String name = \"John\";\n        greetUser(name);\n        // Some other code...\n        greetUser(name);\n    }\n    public static void greetUser(String name) {\n        System.out.println(\"Hello, \" + name + \"!\");\n    }\n}\n```", "```java\nint x;\n```", "```java\nint elapsed;\n```", "```java\nint elapsedTimeInMillis;\n```", "```java\npublic class User {\n    private String username;\n    private String password;\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\npublic class UserManager {\n    public void saveUserToDatabase() {\n        // Code to save the user to the database\n        // This method is responsible for persistence\n    }\n    public void sendEmailToUser(String message) {\n        // Code to send an email to the user\n        // This method is responsible for email sending\n    }\n}\n```", "```java\npublic class User {\n    private String username;\n    private String password;\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n}\npublic class UserRepository {\n    public void saveUserToDatabase(User user) {\n        // Code to save the user to the database\n    }\n}\npublic class EmailService {\n    public void sendEmailToUser(User user, String message){\n        // Code to send an email to the user\n    }\n}\n```", "```java\npublic interface Co2Calculator{\n    Integer calculateCo2Tons();\n}\npublic class AirplaneCo2Calculator implements\n    Co2Calculator{\n    @Override\n    public Integer calculateCo2Tons(){\n       //...calculates...\n    }\n}\npublic class TrainCo2Calculator implements Co2Calculator{\n    @Override\n    public Integer calculateCo2Tons(){\n        //...calculates...\n    }\n}\n```", "```java\npublic class EmissionCalculator {\n    public Integer calculateEmissions(Co2Calculator\n        calculator) {\n               return calculator.calculateCo2Tons();\n    }\n}\n```", "```java\npublic class BusCo2Calculator implements Co2Calculator{\n    @Override\n    public Integer calculateCo2Tons(){\n        //...calculates...\n    }\n}\n```", "```java\npublic class Vehicle {\n    public void startEngine();\n}\npublic class Airplane extends Vehicle {\n    private AirplaneEngine engine;\n    @Override\n    public void startEngine(){\n        engine.start();\n    }\n}\npublic class Train extends Vehicle {\n    private TrainEngine engine;\n    @Override\n    public void startEngine(){\n        engine.start();\n    }\n}\n```", "```java\npublic class Bicycle extends Vehicle {\n    @Override\n    public void startEngine(){\n        throw new UnsupportedOperationException(\n            \"Bicycles do not have engines!\");\n    }\n}\n```", "```java\npublic interface FlightManager {\n    Long calculateDistance();\n    Long calculateEmissions();\n    Double calculatePrice();\n}\n```", "```java\npublic interface FlightDistanceCalculator {\n    Long calculateDistance();\n}\npublic interface FlightEmissionCalculator {\n    Long calculateEmissions();\n}\npublic interface FlightPriceCalculator {\n    Double calculatePrice();\n}\n```", "```java\npublic class FlightStatisticsManager implements\n    FlightDistanceCalculator, FlightEmissionsCalculator {\n    public Long calculateDistance() {\n        //implementation here\n    }\n    public Long calculateEmissions () {\n        //implementation here\n    }\n}\npublic class FlightPricer implements FlightPriceCalculator{\n    public Double calculatePrice() {\n        //implementation here\n    }\n}\n```", "```java\npublic class LocationCatalog {\n    private final LocationDatabaseRepository\n        locationRepository;\n    public LocationCatalog() {\n        this.locationRepository = new\n            LocationDatabaseRepository();\n    }\n}\n```", "```java\npublic interface LocationRepository{ }\npublic class LocationCatalog{\n    private final LocationRepository locationRepository;\n    public LocationCatalog (LocationRepository\n        locationRepository) {\n        this. locationRepository = locationRepository;\n    }\n}\n```", "```java\npublic class Student {\n    private final String name;\n    private final String surname;\n    public Student(String name, String surname) {\n        this.name = name;\n        this.surname = surname;\n    }\n    public String getName() {\n        return name;\n    }\n    public String getSurname() {\n        return surname;\n    }\n    //... toString(), hashCode(), equals(), etc...\n}\n```", "```java\nString s = \"a\"; // Creates a String object with the value\n    \"a\"\ns = s.concat(\"b\"); // Creates a new String object with the\n    value \"ab\"\n// The below two operations also result in the creation of\n    new String objects:\n// s += \"b\";\n// s = s + \"b\";\n```", "```java\npublic class StudentBuilder {\n    private String name;\n    private String surname;\n    public StudentBuilder() {\n        // Default constructor\n    }\n    public StudentBuilder withName(String name) {\n        this.name = name;\n        return this;\n    }\n    public StudentBuilder withSurname(String surname) {\n        this.surname = surname;\n        return this;\n    }\n    public Student build() {\n        return new Student(name, surname);\n    }\n}\n```", "```java\nStudent student = new StudentBuilder()\n    .withName(\"John\")\n    .withSurname(\"Doe\")\n    .build();\n```"]