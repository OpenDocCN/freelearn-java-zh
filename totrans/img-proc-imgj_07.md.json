["```java\nimport java.awt.event.KeyListener;\n```", "```java\nthis.interpreter.source(\"some_script.bsh\");\n```", "```java\nprotected ImageJ ij;\nij = IJ.getInstance();\nLabel status = ij.statusLine;\nstatus.setText(\"Now we modified the status line text!\");\n```", "```java\nimport ij.IJ;\nIJ.run(\"In [+]\", \"\");\nimp = IJ.openImage(\"http://imagej.nih.gov/ij/images/blobs.gif\");\n```", "```java\nimp = IJ.getImage();\n```", "```java\nimport ij.IJ;\nimport ij.process.ImageProcessor;\n\nimp = IJ.openImage(\"http://imagej.nih.gov/ij/images/blobs.gif\");\nip = imp.getProcessor();\nip.invertLut();\nimp.setProcessor(ip);\nip.putPixel(64,128, 255);\n```", "```java\nbGray = ip.isGrayscale();\nbitDepth = ip.getBitDepth();\n```", "```java\nimport ij.IJ;\nimport ij.plugin.frame.RoiManager;\n\nimp = IJ.getImage();\nRoiManager rm = RoiManager.getInstance();\nint numRois = rm.getCount();\n\nfor(i=0;i<numRois;i++) {\n  rm.select(i);\n  IJ.run(imp, \"Enlarge...\", \"enlarge=2\");\n  rm.addRoi(imp.getRoi());\n}\n```", "```java\nimp = IJ.getImage();\n```", "```java\nimport ij.IJ;\nimport ij.ImagePlus;\n\nImagePlus imp = IJ.createHyperStack(\"New Stack\",512,512,2,1,10,16);\n```", "```java\nIJ.log(\"We finished processing \"+nFiles+\" file(s)!\");\n```", "```java\nString[] imageList = WindowManager.getImageTitles();\n\nJComboBox jcbImages = new JComboBox(imageList);\n```", "```java\nImagePlus imp;\nimp = WindowManager.getImage(imageList[idx]);\n```", "```java\nImageProcessor ip = imp.getProcessor();\nint[] pxVal = imp.getPixel(256,256);\nimp.setRoi(256,256,32,32);\n```", "```java\nRoiManager rm = RoiManager.getInstance();\nif (rm == null) {rm = new RoiManager();}\n\nRoi[] regions;\nregions = rm.getRoisAsArray();\n\nfor (int r=0; r<regions.length; r++) {\n  Roi region;\n  region = regions[r];\n  //do something...\n}\n```", "```java\n<!-- <exclude name=\"plugins/**\"/> -->\n```", "```java\nimport ij.ImagePlus;\nimport ij.plugin.filter.PlugInFilter;\nimport ij.process.ImageProcessor;\n\npublic class Plugin_Frame implements PlugInFilter {\n  protected ImagePlus imp;\n\n  public int setup(String arg, ImagePlus imp) {\n    this.imp = imp;\n    return DOES_8G | DOES_16 | DOES_32;\n  }\n\n  public void run(ImageProcessor ip) {\n    ip.invert();\n  }\n}\n```", "```java\n<javac destdir=\"plugins\" includes=\"${files}\" source=\"1.7\" srcdir=\"plugins\">\n```", "```java\n<!-- <mkdirdir=\"${build.classes.dir}\"/> -->\n```", "```java\nprivate double[] measureParticles(Roi[] r, ImagePlus imp) {}\n```", "```java\n/**\n * Take regions within an image and measure the fractal \n * dimension of the provided regions.\n * \n * @param r Roi array containing the particles\n * @param imp reference to image containing the particles\n * @return array with the same dimensions as r containing \n * the values for the fractal dimension.\n */\n```", "```java\n<target name=\"javadocs\" description=\"Build the JavaDocs.\">\n<delete dir=\"../plugins_api\" />\n<mkdir dir=\"../plugins_api\" />\n<javadoc\ndestdir=\"../plugins_api\"\n           author=\"true\"\n           version=\"true\"\n           use=\"true\"\nwindowtitle=\"ImageJ plugins API\">\n<fileset dir=\".\" includes=\"**/*.java\" />\n</javadoc>\n</target>\n```", "```java\n<project>\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>some.packaged.app</groupId>\n  <artifactId>my-app-name</artifactId>\n  <version>1.0.0</version>\n</project>\n```", "```java\n<project>\n<modelVersion>4.0.0</modelVersion>\n<parent>\n  <groupId>net.imagej</groupId>\n  <artifactId>pom-imagej</artifactId>\n  <version>13.2.0</version>\n  <relativePath />\n</parent>\n\n<groupId>sc.fiji</groupId>\n<artifactId>Plugin_Name</artifactId>\n<version>1.0.0</version>\n\n<name>plugins/Plugin_Name.jar</name>\n<description>A Maven project implementing an ImageJ1.x plugin</description>\n\n<properties>\n  <main-class>Plugin_Name</main-class>\n</properties>\n\n<dependencies>\n  <dependency>\n    <groupId>net.imagej</groupId>\n    <artifactId>ij</artifactId>\n  </dependency>\n</dependencies>\n\n<build>\n  <plugins>\n    <plugin>\n      <artifactId>maven-jar-plugin</artifactId>\n      <configuration>\n        <archive>\n          <manifest>\n            <mainClass>${main-class}</mainClass>\n          </manifest>\n        </archive>\n      </configuration>\n    </plugin>\n  </plugins>\n</build>\n\n</project>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n\n<groupId>tools</groupId>\n<artifactId>Awesome_Plugin</artifactId>\n<version>0.1.0-SNAPSHOT</version>\n\n<packaging>pom</packaging>\n\n<properties>\n<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n</properties>\n\n<name>Awesome_Plugin</name>\n</project>\n```", "```java\n<main-class>Awesome_Plugin</main-class>\n```", "```java\n<mainClass>${main-class}</mainClass>\n```", "```java\npublic static void main(String[] args) {\n  //set the plugins.dir property to make the plugin appear in the Plugins menu\n  Class<?>clazz = Awesome_Plugin.class;\n  String url = clazz.getResource(\"/\" + clazz.getName().replace('.', '/') + \".class\").toString();\n  int lastIdx = url.lastIndexOf('/');\n  String pluginsDir = url.substring(5, lastIdx);\n  System.setProperty(\"plugins.dir\", pluginsDir);\n\n  // start ImageJ\n  new ImageJ();\n}\n```", "```java\n// run the plugin\nIJ.runPlugIn(clazz.getName(), \"\");\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>net.imagej</groupId>\n    <artifactId>imagej</artifactId>\n  </dependency>\n</dependencies>\n```", "```java\n<repositories>\n  <repository>\n    <id>imagej.public</id>\n    <url>http://maven.imagej.net/content/groups/public</url>\n  </repository>\n</repositories>\n```", "```java\nimport net.imagej.ImageJ;\n[...]\npublic static void main(String[] args) {\n  [...]\n  // start ImageJ\n  final ImageJ ij = net.imagej.Main.launch(args);\n}\n```"]