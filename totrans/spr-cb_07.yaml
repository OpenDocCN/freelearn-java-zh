- en: Chapter 7. Unit Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with JUnit 4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with TestNG 6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating dependencies with mocks using Mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with JUnit 4 using Spring's application context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with TestNG 6 using Spring's application context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing with transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing controller methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We often skip unit testing because we don't know how to do it or we believe
    that testing web applications is difficult. In fact, unit testing is easy and
    Spring makes web application testing effortless.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will first learn how to write unit tests using JUnit, TestNG,
    and Mockito. Then, we will use Spring context, dependency injection, and transactions
    in our tests. Finally, we will test Spring controller methods using only a few
    lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with JUnit 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JUnit**, first released in 2000, is the most widely used Java unit testing
    framework. Eclipse supports it out of the box.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will write and execute a JUnit 4 test.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll test this simple method (located in the `NumberUtil`
    class), which adds two integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to test a method with JUnit 4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `junit` Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a Java package for your test classes. The standard practice is to keep
    the test classes in a separate folder with the same package structure. For example,
    the class we test, `NumberUtil`, is in the `src/main/java` folder, in the `com.spring_cookbook.util`
    package. Our corresponding test class will be in the `src/test/java` folder, which
    is also in a `com.spring_cookbook.util` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the test class; in Eclipse, in the **File** menu, select **New** | **JUnit
    Test Case**. We will use `NumberUtilTest` as class name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the unit test method by replacing the default `test()` method with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test in Eclipse; right-click somewhere in the class and choose **Run
    As** | **JUnit Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also run the test with Maven if you used the folder and package structure
    described in step 2:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A JUnit class is a normal Java class with some methods annotated with `@Test`.
  prefs: []
  type: TYPE_NORMAL
- en: '`assertEquals(x, y)` is a JUnit method that makes a test method fail if `x`
    is not equal to `y`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `testAdd()`method, we check whether the method works for different sets
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some other useful JUnit method annotations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Test(expected=Exception.class)`: This method is expected to throw this exception.
    For example, to make sure that some code throws this exception in a given situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Before`: This method is executed before each test method of the test class
    is executed. For example, to reinitialize some class attributes used by the methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@After`: This method is executed after each test method of the test class
    is executed. For example, to roll back database modifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@BeforeClass`: This method is executed once before all test methods of the
    class are executed. For example, this method could contain some initialization
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@AfterClass`: This method is executed once after all test methods of the class
    are executed. For example, this method could contain some cleanup code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Test(timeout=1000)`: The test fails if this method takes longer than 1 second.
    For example, to make sure that the execution time of some code stays under a certain
    duration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having a naming convention for test methods helps the code to be more maintainable
    and readable. To get some ideas about different naming conventions, you can visit
  prefs: []
  type: TYPE_NORMAL
- en: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming).'
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with TestNG 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**TestNG**, first released in 2004, is the second most popular Java unit testing
    framework. With most of JUnit features, it also offers parameterized testing (executing
    a test method with different sets of data) and convenient features for integration
    testing.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will write a parameterized test to test the same method as
    in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll test this simple method (located in the `NumberUtil`
    class), which adds two integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to test a method with TestNG 6:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `testng` Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Eclipse, install the TestNG plugin. In the **Help** menu, select **Install
    New Software...**. In the **Work with:** field, enter `http://beust.com/eclipse`
    and press the *Enter* key. Select **TestNG** below the **Work with:** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Java package for your test classes. The standard practice is to have
    test classes in a separate folder with the same package structure. For example,
    the class we test, `NumberUtil`, is in the `src/main/java` folder, in the `com.spring_cookbook.util`
    package. Our corresponding test class will be in the `src/test/java` folder, also
    in a `com.spring_cookbook.util` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create the `NumberUtilTest` TestNG test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `@DataProvider` method with multiple datasets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the unit test method, which takes three integers and checks whether the
    addition of the first two gives the third:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the test in Eclipse; right-click somewhere in the class and choose **Run
    As** | **TestNG Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also run the test with Maven if you used the folder and package structure
    described in step3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `dataProvider` attribute of the `@Test` method will be used to test the
    method with the arrays from the `@DataProvider` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console, verify that the test method has been executed for each dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some other useful TestNG method annotations are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Test(expectedExceptions=Exception.class)`: This method is expected to throw
    this exception. For example, to make sure some code throws this exception in a
    given situation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@BeforeMethod`: This method is executed before each test method of the test
    class is executed. For example, to reinitialize some class attributes used by
    the methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@AfterMethod`: This method is executed after each test method of the test
    class is executed. For example, to roll back database modifications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@BeforeClass`: This method is executed once before the test methods of the
    class are executed. For example, this method could contain some initialization
    code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@AfterClass`: This method is executed once after all test methods of the class
    are executed. For example, this method could contain some cleanup code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Test(invocationTimeOut=1000)`: The test fails if this method takes longer
    than 1 second. For example, to make sure that the execution time of some code
    stays under a certain duration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It''s possible to execute a test only if another test was successful (useful
    for integration testing):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Other advanced features are well explained in TestNG's documentation at [http://testng.org/doc/documentation-main.html#parameters-dataproviders](http://testng.org/doc/documentation-main.html#parameters-dataproviders).
  prefs: []
  type: TYPE_NORMAL
- en: For more reasons to choose TestNG over JUnit, refer to [http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html](http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Having a naming convention for test methods helps the code to be more maintainable
    and readable. You can find some ideas about different naming conventions at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming).'
  prefs: []
  type: TYPE_NORMAL
- en: Simulating dependencies with mocks using Mockito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With unit testing, as opposed to integration testing, we aim to test each class
    independently. However, many classes have dependencies that we don't want to rely
    on. So we use mocks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Mocks** are smart objects whose output can vary depending on the input. **Mockito**
    is the most popular mocking framework with a concise, yet easy to grasp, syntax.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll mock the `StringUtil` class with its `concat()`method concatenating
    two `String` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that there's no good reason to mock this class, as it's just a convenient
    example, to show you how to use Mockito.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps for simulating dependencies with mocks using Mockito:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `mockito-core` Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a test method, use Mockito to create a `mock` instance of `StringUtil`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Program the mock:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Let''s check how the mock actually works now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the mock, we don't need the actual `StringUtil` class to execute our test
    method. Mockito creates and uses, behind the scenes, a proxy class.
  prefs: []
  type: TYPE_NORMAL
- en: Again, in the real world, creating a mock for this class would be overkill.
    Mocks are useful to simulate complicated dependencies, such as an SMTP method,
    the SMTP server behind it, or a REST service.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s easy to test whether the method was called exactly twice with `String`
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Mockito offers many other similar methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s also possible, at a given point, to reset the mock object''s programmed
    behavior:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: For a more extensive list of Mockito's features, refer to [http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html](http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html).
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with JUnit 4 using Spring's application context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JUnit tests are run outside Spring; Spring is not initialized before the tests
    are run. To be able to use the beans defined in the configuration files and dependency
    injection, some bootstrapping code needs to be added to the test class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to test a method using the Spring''s application context
    with JUnit 4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `spring-test` Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add these annotations to the test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use Spring beans as usual, for example, as `@Autowired` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@RunWith(SpringJUnit4ClassRunner.class)` executes the test with the Spring
    runner instead of the default JUnit runner. A runner is a class that runs a JUnit
    test.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@ContextConfiguration(classes = {AppConfig.class})` loads the Spring configuration
    class and makes the class''s beans available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@WebAppConfiguration` prevents exceptions from being raised. Without it, `@EnableWebMvc`
    (in the Spring configuration) would raise the "**A ServletContext is required
    to configure default servlet handling**" exception.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can choose to use a separate Spring configuration class to run your tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the Spring main configuration class in combination with a
    test-specific configuration class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The order in which the classes are declared matters. In this example, beans
    from `AppConfig` can be overridden in `AppTestConfig`. For example, you could
    choose to override a MySQL datasource by an in-memory database datasource for
    your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with TestNG 6 using Spring's application context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TestNG tests are run outside Spring; Spring is not initialized before the tests
    are run. To be able to use the beans defined in the configuration files and dependency
    injection, some bootstrapping code needs to be added to the test class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to test a method using the Spring application context with
    TestNG 6:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `spring-test` Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the test class extend `AbstractTestNGSpringContextTests` and add these
    annotations to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use Spring beans as usual, for example, as `@Autowired` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Extending `AbstractTestNGSpringContextTests` initializes Spring's context and
    makes it available to the test class.
  prefs: []
  type: TYPE_NORMAL
- en: '`@ContextConfiguration(classes = {AppConfig.class})` loads the Spring configuration
    file in Spring''s context.'
  prefs: []
  type: TYPE_NORMAL
- en: '`@WebAppConfiguration` prevents exceptions from being raised. Without it, `@EnableWebMvc`
    (in the Spring configuration) would raise the "**A ServletContext is required
    to configure default servlet handling**" exception.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can choose to use a separate Spring configuration class to run your tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use Spring''s main configuration in combination with a test-specific
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The order in which the classes are declared matters. In this example, beans
    from `AppConfig` can be overridden in `AppTestConfig`. For example, you could
    choose to override a MySQL datasource by an in-memory database datasource for
    your tests.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing with transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To test a DAO class, for example, you will need to perform database queries
    that won't be persisted. For example, to test the DAO method to add a user, you
    want to make sure that the user is actually created in the database, but you don't
    want that test user to remain in the database. Transactions help you to do this
    with minimum effort.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to automatically revert the database modifications performed
    by a test method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With TestNG, make the test class extend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'With JUnit, add the `@Transactional` annotation to the test class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each test method of the class will automatically:'
  prefs: []
  type: TYPE_NORMAL
- en: Start a new transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute as normal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rollback the transaction (so any modifications to a database will be reverted)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unit testing controller methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unit testing the logic of controller methods is usually difficult, but Spring
    makes it easy by providing methods to simulate a request and test the response
    generated by Spring.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We''ll test this controller method which concatenates two parameters and passes
    the result to the `concat.jsp` JSP file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test a controller method, build and execute an HTTP request and then perform
    tests on the response returned by the controller method. We will test that for
    a given set of parameters, the correct attribute is passed to the JSP and the
    user is redirected to the proper URL. Here are the steps to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `spring-test` and `hamcrest-all` Maven dependencies in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `@WebAppConfiguration` and `@ContextConfiguration` (with the Spring
    configuration class as a parameter) annotations to the test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the test class, add a `WebApplicationContext` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the test class, add a `MockMvc` attribute and initialize it in a `setup()`
    method using the `WebApplicationContext` attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are using JUnit, use the `@Before` annotation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add these `static` imports to the test class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the test method, we will build a POST request with the parameters `a` and
    `b`, execute that request, and test whether the web application responds to that
    URL, if the proper `String` is set in the model, and whether the right JSP is
    used:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `setup()` method is executed before each test method is executed.
  prefs: []
  type: TYPE_NORMAL
- en: In the `setup()` method, `MockMvcBuilders.webAppContextSetup` performs a full
    initialization of the controllers and their dependencies, allowing `this.mockMvc.perform()`
    to retrieve the right controller for a given URL.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For debugging, use `andDo(MockMvcResultHandlers.print())` to print the detailed
    information about the request and the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this recipe looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Explore the `MockMvcRequestBuilders` class to find more elements that can be
    tested at [http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html).
  prefs: []
  type: TYPE_NORMAL
- en: For example, you can test that a GET request gets some JSON content as response,
    and check the value of a specific element of the response.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
