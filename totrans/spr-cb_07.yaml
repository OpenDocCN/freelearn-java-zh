- en: Chapter 7. Unit Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。单元测试
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Unit testing with JUnit 4
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JUnit 4进行单元测试
- en: Unit testing with TestNG 6
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用TestNG 6进行单元测试
- en: Simulating dependencies with mocks using Mockito
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mockito模拟依赖关系
- en: Unit testing with JUnit 4 using Spring's application context
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring应用程序上下文进行JUnit 4的单元测试
- en: Unit testing with TestNG 6 using Spring's application context
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring应用程序上下文进行TestNG 6的单元测试
- en: Unit testing with transactions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用事务进行单元测试
- en: Unit testing controller methods
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试控制器方法
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: We often skip unit testing because we don't know how to do it or we believe
    that testing web applications is difficult. In fact, unit testing is easy and
    Spring makes web application testing effortless.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常跳过单元测试，因为我们不知道如何进行测试，或者我们相信测试Web应用程序是困难的。实际上，单元测试很容易，Spring使得Web应用程序测试变得轻松。
- en: In this chapter, you will first learn how to write unit tests using JUnit, TestNG,
    and Mockito. Then, we will use Spring context, dependency injection, and transactions
    in our tests. Finally, we will test Spring controller methods using only a few
    lines of code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将首先学习如何使用JUnit、TestNG和Mockito编写单元测试。然后，我们将在测试中使用Spring上下文、依赖注入和事务。最后，我们将使用几行代码来测试Spring控制器方法。
- en: Unit testing with JUnit 4
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JUnit 4进行单元测试
- en: '**JUnit**, first released in 2000, is the most widely used Java unit testing
    framework. Eclipse supports it out of the box.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**JUnit**，首次发布于2000年，是最广泛使用的Java单元测试框架。Eclipse默认支持它。'
- en: In this recipe, we will write and execute a JUnit 4 test.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将编写和执行一个JUnit 4测试。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In this recipe, we''ll test this simple method (located in the `NumberUtil`
    class), which adds two integers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将测试这个简单的方法（位于`NumberUtil`类中），该方法用于添加两个整数：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Follow these steps to test a method with JUnit 4:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用JUnit 4测试一个方法：
- en: 'Add the `junit` Maven dependency in `pom.xml`:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加`junit` Maven依赖项：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Create a Java package for your test classes. The standard practice is to keep
    the test classes in a separate folder with the same package structure. For example,
    the class we test, `NumberUtil`, is in the `src/main/java` folder, in the `com.spring_cookbook.util`
    package. Our corresponding test class will be in the `src/test/java` folder, which
    is also in a `com.spring_cookbook.util` package.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的测试类创建一个Java包。标准做法是将测试类放在一个单独的文件夹中，保持与包结构相同。例如，我们要测试的类`NumberUtil`位于`src/main/java`文件夹中，`com.spring_cookbook.util`包下。我们的对应测试类将位于`src/test/java`文件夹中，同样在`com.spring_cookbook.util`包下。
- en: Create the test class; in Eclipse, in the **File** menu, select **New** | **JUnit
    Test Case**. We will use `NumberUtilTest` as class name.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建测试类；在Eclipse中，在**文件**菜单中选择**新建** | **JUnit测试用例**。我们将使用`NumberUtilTest`作为类名。
- en: 'Create the unit test method by replacing the default `test()` method with:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过替换默认的`test()`方法来创建单元测试方法：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the test in Eclipse; right-click somewhere in the class and choose **Run
    As** | **JUnit Test**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中运行测试；在类中右键单击某处，选择**运行方式** | **JUnit测试**。
- en: 'You can also run the test with Maven if you used the folder and package structure
    described in step 2:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用了步骤2中描述的文件夹和包结构，你也可以使用Maven运行测试：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: A JUnit class is a normal Java class with some methods annotated with `@Test`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit类是一个带有一些用`@Test`注解的方法的正常Java类。
- en: '`assertEquals(x, y)` is a JUnit method that makes a test method fail if `x`
    is not equal to `y`.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`assertEquals(x, y)`是JUnit方法，如果`x`不等于`y`，则使测试方法失败。'
- en: In the `testAdd()`method, we check whether the method works for different sets
    of data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在`testAdd()`方法中，我们检查该方法是否适用于不同的数据集。
- en: There's more…
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Some other useful JUnit method annotations are:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他有用的JUnit方法注解包括：
- en: '`@Test(expected=Exception.class)`: This method is expected to throw this exception.
    For example, to make sure that some code throws this exception in a given situation.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Test(expected=Exception.class)`：此方法预期会抛出此异常。例如，确保在给定情况下某些代码会抛出此异常。'
- en: '`@Before`: This method is executed before each test method of the test class
    is executed. For example, to reinitialize some class attributes used by the methods.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Before`：此方法在每个测试方法执行前执行。例如，用于重新初始化方法使用的一些类属性。'
- en: '`@After`: This method is executed after each test method of the test class
    is executed. For example, to roll back database modifications.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@After`：此方法在每个测试方法执行后执行。例如，用于回滚数据库修改。'
- en: '`@BeforeClass`: This method is executed once before all test methods of the
    class are executed. For example, this method could contain some initialization
    code.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@BeforeClass`：此方法在执行完类的所有测试方法前执行一次。例如，此方法可以包含一些初始化代码。'
- en: '`@AfterClass`: This method is executed once after all test methods of the class
    are executed. For example, this method could contain some cleanup code.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@AfterClass`：此方法在执行完类的所有测试方法后执行一次。例如，此方法可以包含一些清理代码。'
- en: '`@Test(timeout=1000)`: The test fails if this method takes longer than 1 second.
    For example, to make sure that the execution time of some code stays under a certain
    duration.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Test(timeout=1000)`：如果此方法执行时间超过 1 秒，则测试失败。例如，确保某些代码的执行时间保持在一定时长以下。'
- en: Having a naming convention for test methods helps the code to be more maintainable
    and readable. To get some ideas about different naming conventions, you can visit
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试方法命名一个命名约定有助于使代码更易于维护和阅读。要获取有关不同命名约定的想法，你可以访问
- en: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming)。'
- en: Unit testing with TestNG 6
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 TestNG 6 进行单元测试
- en: '**TestNG**, first released in 2004, is the second most popular Java unit testing
    framework. With most of JUnit features, it also offers parameterized testing (executing
    a test method with different sets of data) and convenient features for integration
    testing.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**TestNG**，首次发布于 2004 年，是第二受欢迎的 Java 单元测试框架。它拥有大多数 JUnit 功能，还提供了参数化测试（使用不同数据集执行测试方法）和方便的集成测试功能。'
- en: In this recipe, we will write a parameterized test to test the same method as
    in the previous recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将编写一个参数化测试来测试与上一个菜谱中相同的方法。
- en: Getting ready
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: 'In this recipe, we''ll test this simple method (located in the `NumberUtil`
    class), which adds two integers:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将测试这个简单的方法（位于 `NumberUtil` 类中），它将两个整数相加：
- en: '[PRE4]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it…
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to test a method with TestNG 6:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 TestNG 6 测试一个方法：
- en: 'Add the `testng` Maven dependency in `pom.xml`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 `testng` Maven 依赖项：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In Eclipse, install the TestNG plugin. In the **Help** menu, select **Install
    New Software...**. In the **Work with:** field, enter `http://beust.com/eclipse`
    and press the *Enter* key. Select **TestNG** below the **Work with:** field.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中，安装 TestNG 插件。在 **帮助** 菜单中，选择 **安装新软件...**。在 **工作与** 字段中，输入 `http://beust.com/eclipse`
    并按 *Enter* 键。在 **工作与** 字段下方选择 **TestNG**。
- en: Create a Java package for your test classes. The standard practice is to have
    test classes in a separate folder with the same package structure. For example,
    the class we test, `NumberUtil`, is in the `src/main/java` folder, in the `com.spring_cookbook.util`
    package. Our corresponding test class will be in the `src/test/java` folder, also
    in a `com.spring_cookbook.util` package.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的测试类创建一个 Java 包。标准做法是将测试类放在一个单独的文件夹中，具有相同的包结构。例如，我们要测试的类 `NumberUtil` 在 `src/main/java`
    文件夹中，位于 `com.spring_cookbook.util` 包中。我们的对应测试类将在 `src/test/java` 文件夹中，同样位于 `com.spring_cookbook.util`
    包中。
- en: 'Create the `NumberUtilTest` TestNG test class:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `NumberUtilTest` TestNG 测试类：
- en: '[PRE6]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a `@DataProvider` method with multiple datasets:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个具有多个数据集的 `@DataProvider` 方法：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add the unit test method, which takes three integers and checks whether the
    addition of the first two gives the third:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加单元测试方法，该方法接受三个整数并检查前两个整数的和是否等于第三个：
- en: '[PRE8]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the test in Eclipse; right-click somewhere in the class and choose **Run
    As** | **TestNG Test**.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中运行测试；在类中某处右键点击，选择 **运行方式** | **TestNG 测试**。
- en: 'You can also run the test with Maven if you used the folder and package structure
    described in step3:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用了步骤3中描述的文件夹和包结构，你也可以使用 Maven 运行测试：
- en: '[PRE9]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `dataProvider` attribute of the `@Test` method will be used to test the
    method with the arrays from the `@DataProvider` method.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Test` 方法的 `dataProvider` 属性将用于使用 `@DataProvider` 方法中的数组测试该方法。'
- en: 'In the console, verify that the test method has been executed for each dataset:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中，验证每个数据集是否已执行测试方法：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There's more…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Some other useful TestNG method annotations are:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些其他有用的 TestNG 方法注解包括：
- en: '`@Test(expectedExceptions=Exception.class)`: This method is expected to throw
    this exception. For example, to make sure some code throws this exception in a
    given situation.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Test(expectedExceptions=Exception.class)`：此方法预期会抛出此异常。例如，确保在某种情况下某些代码会抛出此异常。'
- en: '`@BeforeMethod`: This method is executed before each test method of the test
    class is executed. For example, to reinitialize some class attributes used by
    the methods.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@BeforeMethod`: 这个方法在每个测试方法执行之前执行。例如，重新初始化方法使用的一些类属性。'
- en: '`@AfterMethod`: This method is executed after each test method of the test
    class is executed. For example, to roll back database modifications.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@AfterMethod`: 这个方法在每个测试方法执行之后执行。例如，用于回滚数据库修改。'
- en: '`@BeforeClass`: This method is executed once before the test methods of the
    class are executed. For example, this method could contain some initialization
    code.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@BeforeClass`: 这个方法在类中测试方法执行之前执行一次。例如，这个方法可能包含一些初始化代码。'
- en: '`@AfterClass`: This method is executed once after all test methods of the class
    are executed. For example, this method could contain some cleanup code.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@AfterClass`: 这个方法在类中所有测试方法执行之后执行一次。例如，这个方法可能包含一些清理代码。'
- en: '`@Test(invocationTimeOut=1000)`: The test fails if this method takes longer
    than 1 second. For example, to make sure that the execution time of some code
    stays under a certain duration.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Test(invocationTimeOut=1000)`: 如果这个方法运行时间超过1秒，则测试失败。例如，确保某些代码的执行时间保持在一定时长内。'
- en: 'It''s possible to execute a test only if another test was successful (useful
    for integration testing):'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在另一个测试成功的情况下才能执行测试（对于集成测试很有用）：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Other advanced features are well explained in TestNG's documentation at [http://testng.org/doc/documentation-main.html#parameters-dataproviders](http://testng.org/doc/documentation-main.html#parameters-dataproviders).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 其他高级特性在TestNG的文档中有详细解释，请参阅[http://testng.org/doc/documentation-main.html#parameters-dataproviders](http://testng.org/doc/documentation-main.html#parameters-dataproviders)。
- en: For more reasons to choose TestNG over JUnit, refer to [http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html](http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 关于选择TestNG而不是JUnit的更多原因，请参阅[http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html](http://kaczanowscy.pl/tomek/sites/default/files/testng_vs_junit.txt.slidy_.html)。
- en: 'Having a naming convention for test methods helps the code to be more maintainable
    and readable. You can find some ideas about different naming conventions at:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试方法命名约定有助于代码更易于维护和阅读。你可以在以下位置找到关于不同命名约定的一些想法：
- en: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming).'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://java.dzone.com/articles/7-popular-unit-test-naming](http://java.dzone.com/articles/7-popular-unit-test-naming).'
- en: Simulating dependencies with mocks using Mockito
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mockito通过模拟来模拟依赖关系
- en: With unit testing, as opposed to integration testing, we aim to test each class
    independently. However, many classes have dependencies that we don't want to rely
    on. So we use mocks.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 与集成测试相比，单元测试的目的是独立测试每个类。然而，许多类都有我们不希望依赖的依赖关系。因此，我们使用模拟。
- en: '**Mocks** are smart objects whose output can vary depending on the input. **Mockito**
    is the most popular mocking framework with a concise, yet easy to grasp, syntax.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟**是智能对象，其输出可以取决于输入。**Mockito**是最受欢迎的模拟框架，语法简洁，易于理解。'
- en: Getting ready
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll mock the `StringUtil` class with its `concat()`method concatenating
    two `String` objects:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`concat()`方法将两个`String`对象连接起来的`StringUtil`类进行模拟：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there's no good reason to mock this class, as it's just a convenient
    example, to show you how to use Mockito.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，没有很好的理由去模拟这个类，因为它只是一个方便的例子，用来展示如何使用Mockito。
- en: How to do it…
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps for simulating dependencies with mocks using Mockito:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Mockito通过模拟来模拟依赖关系的步骤如下：
- en: 'Add the `mockito-core` Maven dependency in `pom.xml`:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加`mockito-core` Maven依赖项：
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In a test method, use Mockito to create a `mock` instance of `StringUtil`:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试方法中，使用Mockito创建`StringUtil`的`mock`实例：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Program the mock:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编程模拟：
- en: '[PRE15]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'That''s it. Let''s check how the mock actually works now:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。现在让我们检查模拟实际上是如何工作的：
- en: '[PRE16]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: With the mock, we don't need the actual `StringUtil` class to execute our test
    method. Mockito creates and uses, behind the scenes, a proxy class.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模拟，我们不需要实际的`StringUtil`类来执行我们的测试方法。Mockito在幕后创建并使用代理类。
- en: Again, in the real world, creating a mock for this class would be overkill.
    Mocks are useful to simulate complicated dependencies, such as an SMTP method,
    the SMTP server behind it, or a REST service.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，在现实世界中，为这个类创建模拟可能是过度行为。模拟对于模拟复杂的依赖关系很有用，例如SMTP方法、其后的SMTP服务器或REST服务。
- en: There's more…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It''s easy to test whether the method was called exactly twice with `String`
    parameters:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `String` 参数测试方法是否恰好被调用两次很容易：
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Mockito offers many other similar methods:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito 提供了许多其他类似的方法：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'It''s also possible, at a given point, to reset the mock object''s programmed
    behavior:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个点上，也可以重置模拟对象的编程行为：
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: For a more extensive list of Mockito's features, refer to [http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html](http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取 Mockito 功能的更详细列表，请参阅 [http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html](http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html)。
- en: Unit testing with JUnit 4 using Spring's application context
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring 应用程序上下文进行 JUnit 4 单元测试
- en: JUnit tests are run outside Spring; Spring is not initialized before the tests
    are run. To be able to use the beans defined in the configuration files and dependency
    injection, some bootstrapping code needs to be added to the test class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: JUnit 测试在 Spring 外部运行；在运行测试之前不会初始化 Spring。为了能够使用配置文件中定义的 bean 和依赖注入，需要在测试类中添加一些引导代码。
- en: How to do it…
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to test a method using the Spring''s application context
    with JUnit 4:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 Spring 的应用程序上下文和 JUnit 4 测试方法：
- en: 'Add the `spring-test` Maven dependency in `pom.xml`:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 `spring-test` Maven 依赖项：
- en: '[PRE20]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add these annotations to the test class:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向测试类添加以下注解：
- en: '[PRE21]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Use Spring beans as usual, for example, as `@Autowired` fields:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照常规使用 Spring bean，例如，作为 `@Autowired` 字段：
- en: '[PRE22]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '`@RunWith(SpringJUnit4ClassRunner.class)` executes the test with the Spring
    runner instead of the default JUnit runner. A runner is a class that runs a JUnit
    test.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`@RunWith(SpringJUnit4ClassRunner.class)` 使用 Spring 运行器而不是默认的 JUnit 运行器来执行测试。运行器是一个运行
    JUnit 测试的类。'
- en: '`@ContextConfiguration(classes = {AppConfig.class})` loads the Spring configuration
    class and makes the class''s beans available.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration(classes = {AppConfig.class})` 加载 Spring 配置类，并使类的 bean
    可用。'
- en: '`@WebAppConfiguration` prevents exceptions from being raised. Without it, `@EnableWebMvc`
    (in the Spring configuration) would raise the "**A ServletContext is required
    to configure default servlet handling**" exception.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`@WebAppConfiguration` 防止抛出异常。如果没有它，`@EnableWebMvc`（在 Spring 配置中）将抛出“**需要 ServletContext
    来配置默认的 Servlet 处理**”异常。'
- en: There's more…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'You can choose to use a separate Spring configuration class to run your tests:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择使用单独的 Spring 配置类来运行你的测试：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You can also use the Spring main configuration class in combination with a
    test-specific configuration class:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将 Spring 主配置类与特定的测试配置类结合使用：
- en: '[PRE24]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The order in which the classes are declared matters. In this example, beans
    from `AppConfig` can be overridden in `AppTestConfig`. For example, you could
    choose to override a MySQL datasource by an in-memory database datasource for
    your tests.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 声明类的顺序很重要。在这个例子中，`AppConfig` 中的 bean 可以在 `AppTestConfig` 中被覆盖。例如，你可以选择在测试中使用内存数据库数据源来覆盖
    MySQL 数据源。
- en: Unit testing with TestNG 6 using Spring's application context
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Spring 应用程序上下文进行 TestNG 6 单元测试
- en: TestNG tests are run outside Spring; Spring is not initialized before the tests
    are run. To be able to use the beans defined in the configuration files and dependency
    injection, some bootstrapping code needs to be added to the test class.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: TestNG 测试在 Spring 外部运行；在运行测试之前不会初始化 Spring。为了能够使用配置文件中定义的 bean 和依赖注入，需要在测试类中添加一些引导代码。
- en: How to do it…
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to test a method using the Spring application context with
    TestNG 6:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 TestNG 6 测试方法，并使用 Spring 应用程序上下文：
- en: 'Add the `spring-test` Maven dependency in `pom.xml`:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 `spring-test` Maven 依赖项：
- en: '[PRE25]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Make the test class extend `AbstractTestNGSpringContextTests` and add these
    annotations to it:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使测试类继承 `AbstractTestNGSpringContextTests` 并向其添加以下注解：
- en: '[PRE26]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Use Spring beans as usual, for example, as `@Autowired` fields:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照常规使用 Spring bean，例如，作为 `@Autowired` 字段：
- en: '[PRE27]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Extending `AbstractTestNGSpringContextTests` initializes Spring's context and
    makes it available to the test class.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展 `AbstractTestNGSpringContextTests` 将初始化 Spring 的上下文，并使其对测试类可用。
- en: '`@ContextConfiguration(classes = {AppConfig.class})` loads the Spring configuration
    file in Spring''s context.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ContextConfiguration(classes = {AppConfig.class})` 在 Spring 的上下文中加载 Spring
    配置文件。'
- en: '`@WebAppConfiguration` prevents exceptions from being raised. Without it, `@EnableWebMvc`
    (in the Spring configuration) would raise the "**A ServletContext is required
    to configure default servlet handling**" exception.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`@WebAppConfiguration`防止抛出异常。没有它，`@EnableWebMvc`（在Spring配置中）会抛出“**需要ServletContext来配置默认servlet处理**”的异常。'
- en: There's more…
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You can choose to use a separate Spring configuration class to run your tests:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择使用单独的Spring配置类来运行你的测试：
- en: '[PRE28]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'You can also use Spring''s main configuration in combination with a test-specific
    configuration:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将Spring的主配置与特定的测试配置结合使用：
- en: '[PRE29]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The order in which the classes are declared matters. In this example, beans
    from `AppConfig` can be overridden in `AppTestConfig`. For example, you could
    choose to override a MySQL datasource by an in-memory database datasource for
    your tests.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 声明类的顺序很重要。在这个例子中，`AppConfig`中的bean可以被`AppTestConfig`中的bean覆盖。例如，你可以选择在测试中用内存数据库数据源覆盖MySQL数据源。
- en: Unit testing with transactions
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于事务的单元测试
- en: To test a DAO class, for example, you will need to perform database queries
    that won't be persisted. For example, to test the DAO method to add a user, you
    want to make sure that the user is actually created in the database, but you don't
    want that test user to remain in the database. Transactions help you to do this
    with minimum effort.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要测试DAO类，你需要执行不会持久化的数据库查询。例如，要测试添加用户的DAO方法，你需要确保用户实际上在数据库中创建，但你不想让这个测试用户留在数据库中。事务可以帮助你以最小的努力做到这一点。
- en: How to do it…
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to automatically revert the database modifications performed
    by a test method:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤自动撤销测试方法执行的数据库修改：
- en: 'With TestNG, make the test class extend:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 使用TestNG，使测试类继承：
- en: '[PRE30]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'With JUnit, add the `@Transactional` annotation to the test class:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用JUnit，在测试类中添加`@Transactional`注解：
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How it works…
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Each test method of the class will automatically:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 类中的每个测试方法将自动：
- en: Start a new transaction
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始一个新的事务
- en: Execute as normal
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正常执行
- en: Rollback the transaction (so any modifications to a database will be reverted)
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回滚事务（这样任何对数据库的修改都将被撤销）
- en: Unit testing controller methods
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试控制器方法
- en: Unit testing the logic of controller methods is usually difficult, but Spring
    makes it easy by providing methods to simulate a request and test the response
    generated by Spring.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试控制器方法的逻辑通常很困难，但Spring通过提供模拟请求并测试Spring生成的响应的方法，使它变得简单。
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll test this controller method which concatenates two parameters and passes
    the result to the `concat.jsp` JSP file:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将测试这个将两个参数连接并传递结果到`concat.jsp` JSP文件的控制器方法：
- en: '[PRE32]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How to do it…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To test a controller method, build and execute an HTTP request and then perform
    tests on the response returned by the controller method. We will test that for
    a given set of parameters, the correct attribute is passed to the JSP and the
    user is redirected to the proper URL. Here are the steps to do this:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试控制器方法，构建并执行一个HTTP请求，然后对控制器方法返回的响应进行测试。我们将测试对于给定的一组参数，是否将正确的属性传递给JSP，并且用户被重定向到正确的URL。以下是执行此操作的步骤：
- en: 'Add the `spring-test` and `hamcrest-all` Maven dependencies in `pom.xml`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加`spring-test`和`hamcrest-all` Maven依赖项：
- en: '[PRE33]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the `@WebAppConfiguration` and `@ContextConfiguration` (with the Spring
    configuration class as a parameter) annotations to the test class:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`@WebAppConfiguration`和`@ContextConfiguration`（以Spring配置类作为参数）注解添加到测试类中：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In the test class, add a `WebApplicationContext` attribute:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试类中添加一个`WebApplicationContext`属性：
- en: '[PRE35]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'In the test class, add a `MockMvc` attribute and initialize it in a `setup()`
    method using the `WebApplicationContext` attribute:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试类中添加一个`MockMvc`属性，并在`setup()`方法中使用`WebApplicationContext`属性初始化它：
- en: '[PRE36]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Tip
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you are using JUnit, use the `@Before` annotation.
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你使用JUnit，使用`@Before`注解。
- en: 'Add these `static` imports to the test class:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`static`导入添加到测试类中：
- en: '[PRE37]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In the test method, we will build a POST request with the parameters `a` and
    `b`, execute that request, and test whether the web application responds to that
    URL, if the proper `String` is set in the model, and whether the right JSP is
    used:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试方法中，我们将构建一个带有参数`a`和`b`的POST请求，执行该请求，并测试Web应用程序是否响应该URL，如果模型中设置了正确的`String`，以及是否使用了正确的JSP：
- en: '[PRE38]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `setup()` method is executed before each test method is executed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup()`方法在每个测试方法执行之前执行。'
- en: In the `setup()` method, `MockMvcBuilders.webAppContextSetup` performs a full
    initialization of the controllers and their dependencies, allowing `this.mockMvc.perform()`
    to retrieve the right controller for a given URL.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `setup()` 方法中，`MockMvcBuilders.webAppContextSetup` 对控制器及其依赖项进行完全初始化，允许 `this.mockMvc.perform()`
    根据给定的URL检索正确的控制器。
- en: There's more…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多……
- en: 'For debugging, use `andDo(MockMvcResultHandlers.print())` to print the detailed
    information about the request and the response:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于调试，使用 `andDo(MockMvcResultHandlers.print())` 来打印请求和响应的详细信息：
- en: '[PRE39]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output for this recipe looks like:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱的输出看起来像：
- en: '[PRE40]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Explore the `MockMvcRequestBuilders` class to find more elements that can be
    tested at [http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 探索 `MockMvcRequestBuilders` 类以找到更多可以测试的元素，请参阅 [http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html](http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/web/servlet/request/MockMvcRequestBuilders.html)。
- en: For example, you can test that a GET request gets some JSON content as response,
    and check the value of a specific element of the response.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以测试一个GET请求是否得到一些JSON内容作为响应，并检查响应中特定元素的价值。
- en: '[PRE41]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
