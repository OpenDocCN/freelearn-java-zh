["```java\n    <plugin>\n      <groupId>org.codehaus.mojo</groupId>\n      <artifactId>exec-maven-plugin</artifactId>\n      <version>1.5.0</version>\n      <dependencies>\n        <dependency>\n          <groupId>fish.payara.extras</groupId>\n          <artifactId>payara-microprofile</artifactId>\n          <version>1.0</version>\n        </dependency>\n      </dependencies>\n```", "```java\n    <executions>\n      <execution>\n        <id>payara-uber-jar</id>\n        <phase>package</phase>\n        <goals>\n          <goal>java</goal>\n        </goals>\n```", "```java\n    <configuration>\n      <mainClass>\n        fish.payara.micro.PayaraMicro\n      </mainClass>\n      <arguments>\n        <argument>--deploy</argument>\n        <argument>\n          ${basedir}/target/${warfile.name}.war\n        </argument>\n        <argument>--outputUberJar</argument>\n        <argument>\n          ${basedir}/target/${project.artifactId}.jar\n        </argument>\n      </arguments>\n    </configuration>\n```", "```java\n    <argument>--deploy</argument> \n    <argument> \n      ${basedir}/target/${project.artifactId}-${project.version} \n    </argument> \n```", "```java\n    <profiles> \n      <profile> \n        <id>exploded-war</id> \n        <!-- ... --> \n      </profile> \n      <profile> \n        <id>uber</id> \n        <!-- ... --> \n      </profile> \n    </profiles> \n```", "```java\n$ mvn -Puber install \n```", "```java\nApr 05, 2017 1:18:59 AM fish.payara.micro.PayaraMicro bootStrap \nINFO: Payara MicroProfile  4.1.1.164-SNAPSHOT (build ${build.number}) ready in 9496 (ms) \n```", "```java\n    @ApplicationPath(\"/api\") \n      public class Monumentum extends javax.ws.rs.core.Application { \n      @Override \n      public Set<Class<?>> getClasses() { \n        Set<Class<?>> s = new HashSet<>(); \n        return s; \n      } \n    } \n```", "```java\n    @Path(\"/notes\") \n    @RequestScoped \n    @Produces(MediaType.APPLICATION_JSON)  \n    public class NoteResource { \n    } \n```", "```java\n    @GET \n    public Response getAll() { \n      List<Note> notes = new ArrayList<>(); \n      return Response.ok( \n        new GenericEntity<List<Note>>(notes) {}).build(); \n    } \n```", "```java\n    new GenericEntity<List<Note>>(notes) {} \n```", "```java\n$ curl http://localhost:8080/monumentum-1.0-SNAPSHOT/api/notes/\n[] \n```", "```java\n    @POST \n    public Response createNote(Note note) { \n      Document doc = note.toDocument(); \n      collection.insertOne(doc); \n      final String id = doc.get(\"_id\",  \n        ObjectId.class).toHexString(); \n\n      return Response.created(uriInfo.getRequestUriBuilder() \n        .path(id).build()) \n      .build(); \n    } \n```", "```java\n    <dependency> \n      <groupId>org.mongodb</groupId> \n      <artifactId>mongodb-driver</artifactId> \n      <version>3.4.2</version> \n    </dependency> \n```", "```java\n    public class Note { \n      private String id; \n      private String userId; \n      private String title; \n      private String body; \n      private LocalDateTime created = LocalDateTime.now(); \n      private LocalDateTime modified = null; \n\n      // Getters, setters and some constructors not shown \n\n      public Note(final Document doc) { \n        final LocalDateTimeAdapter adapter =  \n          new LocalDateTimeAdapter(); \n        userId = doc.getString(\"user_id\"); \n        id = doc.get(\"_id\", ObjectId.class).toHexString(); \n        title = doc.getString(\"title\"); \n        body = doc.getString(\"body\"); \n        created = adapter.unmarshal(doc.getString(\"created\")); \n        modified = adapter.unmarshal(doc.getString(\"modified\")); \n      } \n\n      public Document toDocument() { \n        final LocalDateTimeAdapter adapter =  \n           new LocalDateTimeAdapter(); \n        Document doc = new Document(); \n        if (id != null) { \n           doc.append(\"_id\", new ObjectId(getId())); \n        } \n        doc.append(\"user_id\", getUserId()) \n         .append(\"title\", getTitle()) \n         .append(\"body\", getBody()) \n         .append(\"created\",  \n           adapter.marshal(getCreated() != null \n           ? getCreated() : LocalDateTime.now())) \n         .append(\"modified\",  \n           adapter.marshal(getModified())); \n         return doc; \n      } \n    } \n```", "```java\n    public class LocalDateTimeAdapter  \n      extends XmlAdapter<String, LocalDateTime> { \n      private static final Pattern JS_DATE = Pattern.compile \n        (\"\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+Z\"); \n      private static final DateTimeFormatter DEFAULT_FORMAT =  \n        DateTimeFormatter.ISO_LOCAL_DATE_TIME; \n      private static final DateTimeFormatter JS_FORMAT =  \n        DateTimeFormatter.ofPattern \n        (\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"); \n\n      @Override \n      public LocalDateTime unmarshal(String date) { \n        if (date == null) { \n          return null; \n        } \n        return LocalDateTime.parse(date,  \n          (JS_DATE.matcher(date).matches()) \n          ? JS_FORMAT : DEFAULT_FORMAT); \n      } \n\n      @Override \n      public String marshal(LocalDateTime date) { \n        return date != null ? DEFAULT_FORMAT.format(date) : null; \n      } \n    } \n```", "```java\n    @XmlJavaTypeAdapter(value = LocalDateTimeAdapter.class) \n    private LocalDateTime created = LocalDateTime.now(); \n```", "```java\n    @XmlJavaTypeAdapters({ \n      @XmlJavaTypeAdapter(type = LocalDateTime.class,  \n        value = LocalDateTimeAdapter.class) \n    }) \n    package com.steeplesoft.monumentum.model; \n```", "```java\n    private MongoCollection<Document> collection; \n    private MongoClient mongoClient; \n    private MongoDatabase database; \n\n    @PostConstruct \n    public void postConstruct() { \n      String host = System.getProperty(\"mongo.host\", \"localhost\"); \n      String port = System.getProperty(\"mongo.port\", \"27017\"); \n      mongoClient = new MongoClient(host, Integer.parseInt(port)); \n      database = mongoClient.getDatabase(\"monumentum\"); \n      collection = database.getCollection(\"note\"); \n    } \n```", "```java\n    @GET \n    public Response getAll() { \n      List<Note> notes = new ArrayList<>(); \n      try (MongoCursor<Document> cursor = collection.find() \n      .iterator()) { \n        while (cursor.hasNext()) { \n          notes.add(new Note(cursor.next())); \n        } \n      } \n\n      return Response.ok( \n        new GenericEntity<List<Note>>(notes) {}) \n      .build(); \n    } \n```", "```java\n$ curl -v -H \"Content-Type: application/json\" -X POST -d '{\"title\":\"Command line note\", \"body\":\"A note from the command line\"}' http://localhost:8080/monumentum-1.0-SNAPSHOT/api/notes/ \n*   Trying ::1... \n* TCP_NODELAY set \n* Connected to localhost (::1) port 8080 (#0) \n> POST /monumentum-1.0-SNAPSHOT/api/notes/ HTTP/1.1 \n... \n< HTTP/1.1 201 Created \n... \n$ curl http://localhost:8080/monumentum-1.0-SNAPSHOT/api/notes/ | jq . \n[ \n  { \n    \"id\": \"58e5d0d79ccd032344f66c37\", \n    \"userId\": null, \n    \"title\": \"Command line note\", \n    \"body\": \"A note from the command line\", \n    \"created\": \"2017-04-06T00:23:34.87\", \n    \"modified\": null \n  } \n] \n```", "```java\n    @Inject \n    @Collection(\"notes\") \n    private MongoCollection<Document> collection; \n```", "```java\n    @Qualifier  \n    @Retention(RetentionPolicy.RUNTIME)  \n    @Target({ElementType.METHOD, ElementType.FIELD,  \n      ElementType.PARAMETER, ElementType.TYPE})   \n    public @interface Collection { \n      @Nonbinding String value() default \"unknown\";   \n    } \n```", "```java\n    @RequestScoped \n    public class Producers { \n      @Produces \n      @Collection \n      public MongoCollection<Document>  \n        getCollection(InjectionPoint injectionPoint) { \n          Collection mc = injectionPoint.getAnnotated() \n          .getAnnotation(Collection.class); \n        return getDatabase().getCollection(mc.value()); \n      } \n    } \n```", "```java\n    @GET \n    @Path(\"{id}\") \n    public Response getNote(@PathParam(\"id\") String id) { \n      Document doc = collection.find(buildQueryById(id)).first(); \n      if (doc == null) { \n        return Response.status(Response.Status.NOT_FOUND).build(); \n      } else { \n        return Response.ok(new Note(doc)).build(); \n      } \n    } \n```", "```java\n    Document doc = collection.find(buildQueryById(id)).first(); \n```", "```java\n    private BasicDBObject buildQueryById(String id) { \n      BasicDBObject query =  \n        new BasicDBObject(\"_id\", new ObjectId(id)); \n      return query; \n    } \n```", "```java\n    @PUT \n    @Path(\"{id}\") \n    public Response updateNote(Note note) { \n      note.setModified(LocalDateTime.now()); \n      UpdateResult result =  \n        collection.updateOne(buildQueryById(note.getId()), \n        new Document(\"$set\", note.toDocument())); \n      if (result.getModifiedCount() == 0) { \n        return Response.status(Response.Status.NOT_FOUND).build(); \n      } else { \n        return Response.ok().build(); \n      } \n    } \n```", "```java\n    @DELETE \n    @Path(\"{id}\") \n    public Response deleteNote(@PathParam(\"id\") String id) { \n      collection.deleteOne(buildQueryById(id)); \n      return Response.ok().build(); \n    } \n```", "```java\n    @Path(\"auth\") \n    public class AuthenticationResource { \n```", "```java\n    @ApplicationPath(\"/api\") \n    public class Monumentum extends javax.ws.rs.core.Application { \n      @Override \n      public Set<Class<?>> getClasses() { \n        Set<Class<?>> s = new HashSet<>(); \n        s.add(NoteResource.class); \n        s.add(AuthenticationResource.class); \n        return s; \n      } \n    } \n```", "```java\n    private final String clientId; \n    private final String clientSecret; \n    private final GoogleAuthorizationCodeFlow flow; \n    private final HttpTransport HTTP_TRANSPORT =  \n      new NetHttpTransport(); \n    private static final String USER_INFO_URL =  \n      \"https://www.googleapis.com/oauth2/v1/userinfo\"; \n    private static final List<String> SCOPES = Arrays.asList( \n      \"https://www.googleapis.com/auth/userinfo.profile\", \n      \"https://www.googleapis.com/auth/userinfo.email\"); \n```", "```java\n    public AuthenticationResource() { \n      clientId = System.getProperty(\"client_id\"); \n      clientSecret = System.getProperty(\"client_secret\"); \n      flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT, \n        new JacksonFactory(), clientId, clientSecret, \n        SCOPES).build(); \n    } \n```", "```java\n    @Context \n    private UriInfo uriInfo; \n    @GET \n    @Path(\"url\") \n    public String getAuthorizationUrl() { \n      return flow.newAuthorizationUrl() \n      .setRedirectUri(getCallbackUri()).build(); \n    } \n    private String getCallbackUri()  \n      throws UriBuilderException, IllegalArgumentException { \n      return uriInfo.getBaseUriBuilder().path(\"auth\") \n        .path(\"callback\").build() \n        .toASCIIString(); \n    } \n```", "```java\n    @GET \n    @Path(\"callback\") \n    public Response handleCallback(@QueryParam(\"code\")  \n    @NotNull String code) throws IOException { \n      User user = getUserInfoJson(code); \n      saveUserInformation(user); \n      final String jwt = createToken(user.getEmail()); \n      return Response.seeOther( \n        uriInfo.getBaseUriBuilder() \n        .path(\"../loginsuccess.html\") \n        .queryParam(\"Bearer\", jwt) \n        .build()) \n      .build(); \n    } \n```", "```java\n    private User getUserInfoJson(final String authCode)  \n    throws IOException { \n      try { \n        final GoogleTokenResponse response =  \n          flow.newTokenRequest(authCode) \n          .setRedirectUri(getCallbackUri()) \n          .execute(); \n        final Credential credential =  \n          flow.createAndStoreCredential(response, null); \n        final HttpRequest request =  \n          HTTP_TRANSPORT.createRequestFactory(credential) \n          .buildGetRequest(new GenericUrl(USER_INFO_URL)); \n        request.getHeaders().setContentType(\"application/json\"); \n        final JSONObject identity =  \n          new JSONObject(request.execute().parseAsString()); \n        return new User( \n          identity.getString(\"id\"), \n          identity.getString(\"email\"), \n          identity.getString(\"name\"), \n          identity.getString(\"picture\")); \n      } catch (JSONException ex) { \n        Logger.getLogger(AuthenticationResource.class.getName()) \n        .log(Level.SEVERE, null, ex); \n        return null; \n      } \n    } \n```", "```java\n    private void saveUserInformation(User user) { \n      Document doc = collection.find( \n        new BasicDBObject(\"email\", user.getEmail())).first(); \n      if (doc == null) { \n        collection.insertOne(user.toDocument()); \n      } \n    } \n```", "```java\n    <dependency> \n      <groupId>io.jsonwebtoken</groupId> \n      <artifactId>jjwt</artifactId> \n      <version>0.7.0</version> \n    </dependency> \n```", "```java\n    @Inject \n    private KeyGenerator keyGenerator; \n    private String createToken(String login) { \n      String jwtToken = Jwts.builder() \n      .setSubject(login) \n      .setIssuer(uriInfo.getAbsolutePath().toString()) \n      .setIssuedAt(new Date()) \n      .setExpiration(Date.from( \n        LocalDateTime.now().plusHours(12L) \n      .atZone(ZoneId.systemDefault()).toInstant())) \n      .signWith(SignatureAlgorithm.HS512,  \n        keyGenerator.getKey()) \n      .compact(); \n      return jwtToken; \n    } \n```", "```java\n    @Singleton \n    public class KeyGenerator { \n      private Key key; \n\n      public Key getKey() { \n        if (key == null) { \n          String keyString = System.getProperty(\"signing.key\",  \n            \"replace for production\"); \n          key = new SecretKeySpec(keyString.getBytes(), 0,  \n            keyString.getBytes().length, \"DES\"); \n        } \n\n        return key; \n      } \n    } \n```", "```java\n    @NameBinding \n    @Retention(RetentionPolicy.RUNTIME) \n    @Target({ElementType.TYPE, ElementType.METHOD}) \n    public @interface Secure { \n    } \n```", "```java\n    @Provider \n    @Secure \n    @Priority(Priorities.AUTHENTICATION) \n    public class SecureFilter implements ContainerRequestFilter { \n      @Inject \n      private KeyGenerator keyGenerator; \n\n      @Override \n      public void filter(ContainerRequestContext requestContext)  \n       throws IOException { \n        try { \n          String authorizationHeader = requestContext \n          .getHeaderString(HttpHeaders.AUTHORIZATION); \n          String token = authorizationHeader \n          .substring(\"Bearer\".length()).trim(); \n          Jwts.parser() \n          .setSigningKey(keyGenerator.getKey()) \n          .parseClaimsJws(token); \n        } catch (Exception e) { \n          requestContext.abortWith(Response.status \n          (Response.Status.UNAUTHORIZED).build()); \n        } \n      } \n    } \n```", "```java\n    @ApplicationPath(\"/api\") \n    public class Monumentum extends javax.ws.rs.core.Application { \n      @Override \n      public Set<Class<?>> getClasses() { \n        Set<Class<?>> s = new HashSet<>(); \n        s.add(NoteResource.class); \n        s.add(AuthenticationResource.class); \n        s.add(SecureFilter.class); \n        return s; \n      } \n    } \n```", "```java\n    @Path(\"/notes\") \n    @RequestScoped \n    @Produces(MediaType.APPLICATION_JSON) \n    @Secure \n    public class NoteResource { \n```", "```java\n    @Inject \n    private User user; \n```", "```java\n    @RequestScoped \n    public class UserProducer { \n      @Inject \n      private KeyGenerator keyGenerator; \n      @Inject \n      HttpServletRequest req; \n      @Inject \n      @Collection(\"users\") \n      private MongoCollection<Document> users; \n```", "```java\n    @Produces \n    public User getUser() { \n      String authHeader = req.getHeader(HttpHeaders.AUTHORIZATION); \n      if (authHeader != null && authHeader.contains(\"Bearer\")) { \n        String token = authHeader \n        .substring(\"Bearer\".length()).trim(); \n        Jws<Claims> parseClaimsJws = Jwts.parser() \n        .setSigningKey(keyGenerator.getKey()) \n        .parseClaimsJws(token); \n        return getUser(parseClaimsJws.getBody().getSubject()); \n      } else { \n        return null; \n      }  \n    } \n```", "```java\n    private User getUser(String email) { \n      Document doc = users.find( \n        new BasicDBObject(\"email\", email)).first(); \n      if (doc != null) { \n        return new User(doc); \n      } else { \n        return null; \n      } \n    } \n```", "```java\n    public Response getAll() { \n      List<Note> notes = new ArrayList<>(); \n      try (MongoCursor<Document> cursor =  \n        collection.find(new BasicDBObject(\"user_id\",  \n        user.getId())).iterator()) { \n      // ... \n      @POST \n      public Response createNote(Note note) { \n        Document doc = note.toDocument(); \n        doc.append(\"user_id\", user.getId()); \n        // ... \n      @PUT \n      @Path(\"{id}\") \n      public Response updateNote(Note note) { \n        note.setModified(LocalDateTime.now()); \n        note.setUser(user.getId()); \n        // ... \n      private BasicDBObject buildQueryById(String id) { \n        BasicDBObject query =  \n        new BasicDBObject(\"_id\", new ObjectId(id)) \n         .append(\"user_id\", user.getId()); \n        return query; \n    } \n```", "```java\n    <!DOCTYPE html> \n      <html> \n        <head> \n          <title>Monumentum</title> \n          <meta charset=\"UTF-8\"> \n          <link rel=\"stylesheet\" href=\"monumentum.css\"> \n          <script src=\"img/vue\"></script> \n        </head> \n        <body> \n          <div id=\"app\"> \n            {{ message }} \n          </div> \n          <script type=\"text/javascript\" src=\"img/index.js\"></script> \n        </body> \n      </html> \n```", "```java\n    var vm = new Vue({ \n      el: '#app', \n      data: { \n        message : 'Hello, World!' \n      } \n    }); \n```", "```java\n    var vm = new Vue({ \n      el: '#app', \n      store, \n      computed: { \n        isLoggedIn() { \n          return this.$store.state.loggedIn; \n        } \n      }, \n      created: function () { \n        NotesActions.fetchNotes(); \n      } \n    }); \n```", "```java\n    <script src=\"img/vuex\"></script>\n```", "```java\n    var NotesActions = { \n      buildAuthHeader: function () { \n        return new Headers({ \n          'Content-Type': 'application/json', \n          'Authorization': 'Bearer ' +    \n          NotesActions.getCookie('Bearer') \n        }); \n      }, \n      fetchNotes: function () { \n        fetch('api/notes', { \n          headers: this.buildAuthHeader() \n        }) \n        .then(function (response) { \n          store.state.loggedIn = response.status === 200; \n          if (response.ok) { \n            return response.json(); \n          } \n        }) \n        .then(function (notes) { \n          store.commit('setNotes', notes); \n        }); \n      } \n    } \n```", "```java\n    const store = new Vuex.Store({ \n      state: { \n        notes: [], \n        loggedIn: false, \n        currentIndex: -1, \n        currentNote: NotesActions.newNote() \n      } \n    }; \n```", "```java\n     store.commit('setNotes', notes); \n```", "```java\n    mutations: { \n      setNotes(state, notes) { \n        state.notes = []; \n        if (notes) { \n          notes.forEach(i => { \n            state.notes.push({ \n              id: i.id, \n              title: i.title, \n              body: i.body, \n              created: new Date(i.created), \n              modified: new Date(i.modified) \n            }); \n        }); \n      } \n    } \n```", "```java\n    <div id=\"app\"> \n      <note-list v-bind:notes=\"notes\" v-if=\"isLoggedIn\"></note-list> \n    </div> \n```", "```java\n    Vue.component('note-list', { \n      template: '#note-list-template', \n      store, \n      computed: { \n        notes() { \n          return this.$store.state.notes; \n        }, \n        isLoggedIn() { \n          return this.$store.state.loggedIn; \n        } \n      }, \n      methods: { \n        loadNote: function (index) { \n          this.$store.commit('noteClicked', index); \n        }, \n        deleteNote: function (index) { \n          if (confirm \n            (\"Are you sure want to delete this note?\")) { \n              NotesActions.deleteNote(index); \n            } \n        } \n      } \n    }); \n```", "```java\n    <script type=\"text/x-template\" id=\"note-list-template\"> \n      <div class=\"note-list\"> \n        <h2>Notes:</h2> \n        <ul> \n          <div class=\"note-list\"  \n            v-for=\"(note,index) in notes\" :key=\"note.id\"> \n          <span : \n             v-on:click=\"loadNote(index,note);\"> \n          {{ note.title }} \n          </span> \n            <a v-on:click=\"deleteNote(index, note);\"> \n              <img src=\"img/x-225x225.png\" height=\"20\"  \n                 width=\"20\" alt=\"delete\"> \n            </a> \n          </div> \n        </ul> \n        <hr> \n      </div>  \n    </script> \n```", "```java\n    noteClicked(state, index) { \n      state.currentIndex = index; \n      state.currentNote = state.notes[index]; \n      bus.$emit('note-clicked', state.currentNote); \n    } \n```", "```java\n    var bus = new Vue(); \n```", "```java\n    <div id=\"app\"> \n      <note-list v-bind:notes=\"notes\" v-if=\"isLoggedIn\"></note-list> \n      <note-form v-if=\"isLoggedIn\"></note-form> \n    </div> \n```", "```java\n    Vue.component('note-form', { \n      template: '#note-form-template', \n      store, \n      data: function () { \n        return { \n          note: NotesActions.newNote() \n        }; \n      }, \n      mounted: function () { \n        var self = this; \n        bus.$on('add-clicked', function () { \n          self.$store.currentNote = NotesActions.newNote(); \n          self.clearForm(); \n        }); \n        bus.$on('note-clicked', function (note) { \n          self.updateForm(note); \n        }); \n        CKEDITOR.replace('notebody'); \n      } \n    }); \n```", "```java\n    <script type=\"text/x-template\" id=\"note-form-template\"> \n      <div class=\"note-form\"> \n        <h2>{{ note.title }}</h2> \n        <form> \n          <input id=\"noteid\" type=\"hidden\"  \n            v-model=\"note.id\"></input> \n          <input id=\"notedate\" type=\"hidden\"  \n            v-model=\"note.created\"></input> \n          <input id=\"notetitle\" type=\"text\" size=\"50\"  \n            v-model=\"note.title\"></input> \n          <br/> \n          <textarea id=\"notebody\"  \n            style=\"width: 100%; height: 100%\"  \n            v-model=\"note.body\"></textarea> \n          <br> \n          <button type=\"button\" v-on:click=\"save\">Save</button> \n        </form> \n      </div> \n    </script> \n```", "```java\n    <dependency> \n      <groupId>org.webjars</groupId> \n      <artifactId>ckeditor</artifactId> \n      <version>4.6.2</version> \n    </dependency> \n```", "```java\n    <script type=\"text/javascript\"\n      src=\"img/ckeditor.js\"></script>\n```", "```java\n    <div id=\"app\"> \n      <navbar></navbar> \n      <note-list v-bind:notes=\"notes\" v-if=\"isLoggedIn\"></note-list> \n      <note-form v-if=\"isLoggedIn\"></note-form> \n    </div> \n```", "```java\n    Vue.component('navbar', { \n      template: '#navbar-template', \n      store, \n      data: function () { \n        return { \n          authUrl: \"#\" \n        }; \n      }, \n      methods: { \n        getAuthUrl: function () { \n          var self = this; \n          fetch('api/auth/url') \n          .then(function (response) { \n            return response.text(); \n          }) \n          .then(function (url) { \n            self.authUrl = url; \n          }); \n        } \n      }, \n      mounted: function () { \n        this.getAuthUrl(); \n      } \n    }); \n```", "```java\n    <script type=\"text/x-template\" id=\"navbar-template\"> \n      <div id=\"nav\" style=\"grid-column: 1/span 2; grid-row: 1 / 1;\"> \n        <a v-on:click=\"add\" style=\"padding-right: 10px;\"> \n          <img src=\"img/plus-225x225.png\" height=\"20\"  \n            width=\"20\" alt=\"add\"> \n        </a> \n        <a v-on:click=\"logout\" v-if=\"isLoggedIn\">Logout</a> \n        <a v-if=\"!isLoggedIn\" :href=\"authUrl\"  \n         style=\"text-decoration: none\">Login</a> \n      </div> \n    </script> \n```"]