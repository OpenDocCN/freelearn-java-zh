["```java\nint addInt(int a, int b)\n{\n    return a + b;\n}\n```", "```java\ndefine dso_local i32 @addInt(i32 %0, i32 %1) #0 !dbg !7 {\n  %3 = alloca i32, align 4\n  %4 = alloca i32, align 4\n  store i32 %0, i32* %3, align 4\n  call void @llvm.dbg.declare(metadata i32* %3, \n  metadata !12, metadata!DIExpression()), !dbg !13\n  store i32 %1, i32* %4, align 4\n  call void @llvm.dbg.declare(metadata i32* %4, \n  metadata !14, metadata !DIExpression()), !dbg !15\n  %5 = load i32, i32* %3, align 4, !dbg !16\n  %6 = load i32, i32* %4, align 4, !dbg !17\n  %7 = add nsw i32 %5, %6, !dbg !18\n  ret i32 %7, !dbg !19\n}\n```", "```java\ngu install llvm-toolchain\n```", "```java\n$GRAALVM_HOME/bin/lli --print-toolchain-path \n```", "```java\nlli [LLI options] [GraalVM options] [polyglot options] <bitcode file> [program args]\n```", "```java\n#include <stdio.h>\nint main() {\n    printf(\"Welcome to LLVM Graal \\n\");\n    return 0;\n}\n```", "```java\nclang HelloGraal.c -o hellograal\n```", "```java\nlli hellograal\n```", "```java\nlli hellograal\nHello from GraalVM!\n```", "```java\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/time.h>\nlong fib(int i) {\n    int fib1 = 0;\n    int fib2 = 1;\n    int currentFib, index;\n    long total = 0;\n    for (index = 2; index < i; ++index)\n    {\n        currentFib = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = currentFib;\n        total += currentFib;\n    }\n    printf(\"%ld \\n\", total);\n    return total;\n}\nint main(int argc, char const *argv[])\n{\n    for (int i = 1000000000; i < 1000000010; i++)\n    {\n        struct timeval tv_start;\n        struct timeval tv_end;\n        long time;\n        gettimeofday(andtv_start, NULL);\n        fib(i);\n        gettimeofday(andtv_end, NULL);\n        time = (tv_end.tv_sec*1000000 +             tv_end.tv_usec) - (tv_start.tv_sec*1000000 +                 tv_start.tv_usec);\n        printf(\"i=%d time: %10ld\\n\", i, time);\n    }\n    return 0;\n}\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/languages/llvm/native/bin/clang FibonacciCalculator.c -o fibonacci\n```", "```java\noplevel executable /fibonacci does not contain bitcode\n        at <llvm> null(Unknown)\n```", "```java\n  llvm git:(main) lli fibonacci\n-24641037439717 \ni=1000000000 time:    5616852\n-24639504571562 \ni=1000000001 time:    5592305\n-24640314634125 \ni=1000000002 time:    5598246\n-24639591828533 \ni=1000000003 time:    1116430\n-24639679085504 \ni=1000000004 time:    1092585\n-24639043536883 \ni=1000000005 time:    1140553\n-24638495245233 \ni=1000000006 time:    1117817\n-24637311404962 \ni=1000000007 time:    1121831\n-24635579273041 \ni=1000000008 time:    1103494\n-24636958268145 \ni=1000000009 time:    1109705\n```", "```java\nimport java.io.File;\nimport org.graalvm.polyglot.Context;\nimport org.graalvm.polyglot.Source;\nimport org.graalvm.polyglot.Value;\npublic class FibonacciCalculatorLLVMEmbed {\n    public static void main(String[] args) {\n        try {\n            Context polyglot = Context.newBuilder()                .allowAllAccess(true).build();\n            File file = new File(\"fibpoly\");\n            Source source = Source.newBuilder(\"llvm\",                file).build();\n            Value fibpoly = polyglot.eval(source);\n            fibpoly.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\njava FibonacciCalculatorLLVMEmbed\nInside C code: 10944 \nReturned value to Java 10944\n```", "```java\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/time.h>\nlong fib(int i) {\n    int fib1 = 0;\n    int fib2 = 1;\n    int currentFib, index;\n    long total = 0;\n    for (index = 2; index < i; ++index) {\n        currentFib = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = currentFib;\n        total += currentFib;\n    }\n    printf(\"Inside C code: %ld \\n\", total);\n    return total;\n}\n```", "```java\nvar fibpoly = Polyglot.evalFile(\"llvm\" , \"fibpoly\");\nvar fib = fibpoly.fib(20);\nprint(\"Returned value to JS: \"+ fib);\n```", "```java\njs --polyglot FibonacciCaller.js \nInside C code: 10944 \nReturned value to JS: 10944\n```", "```java\n#include <stdlib.h>\n#include <stdio.h>\nint main() {\n  char *string;\n  char valueStr[10] = \"Hello Graaaaaaal\";\n  strcpy(string, valueStr);\n  printf(\"%s\", string);\n  free(string);\n  return 0;\n}\n```", "```java\n/Library/Java/JavaVirtualMachines/graalvm-ee-java11-21.0.0.2/Contents/Home/languages/llvm/native/bin/clang ManagedLLVM.c -o managedllvm\nManagedLLVM.c:5:23: warning: initializer-string for char array is too long\n  char valueStr[10] = \"Hello Graaaaaaal\";\n                      ^~~~~~~~~~~~~~~~~~\nManagedLLVM.c:6:3: warning: implicitly declaring library function 'strcpy' with type\n      'char *(char *, const char *)' [-Wimplicit-function-      declaration]\n  strcpy(string, valueStr);\n  ^\nManagedLLVM.c:6:3: note: include the header <string.h> or explicitly provide a declaration for 'strcpy'\n2 warnings generated.\nManagedLLVM.c:5:23: warning: initializer-string for char array is too long\n  char valueStr[10] = \"Hello Graaaaaaal\";\n                      ^~~~~~~~~~~~~~~~~~\nManagedLLVM.c:6:3: warning: implicitly declaring library function 'strcpy' with type\n      'char *(char *, const char *)' [-Wimplicit-function-      declaration]\n  strcpy(string, valueStr);\n  ^\nManagedLLVM.c:6:3: note: include the header <string.h> or explicitly provide a declaration for 'strcpy'\n2 warnings generated.\n```", "```java\n ./managedllvm\n[1]    30556 segmentation fault  ./managedllvm\n```", "```java\nllvm git:(main) lli --llvm.managed managedllvm\nIllegal null pointer access in 'store i64'.\n        at <llvm> main(ManagedLLVM.c:6:112)\n```", "```java\nimport java.io.File;\nimport org.graalvm.polyglot.Context;\nimport org.graalvm.polyglot.Source;\nimport org.graalvm.polyglot.Value;\npublic class ManagedLLVM {\n    public static void main(String[] args) {\n        try {\n            Context polyglot = Context.newBuilder()                .allowAllAccess(true)                .option(\"llvm.managed\", \"true\")                .build();\n            File file = new File(\"managedLLVM\");\n            Source source =                 Source.newBuilder(\"llvm\", file).build();\n            Value mllvm = polyglot.eval(source);\n            mllvm.execute();\n        } catch (Exception e) {\n            System.out.println(\"Exception occured....\");\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\njavac ManagedLLVM.java \njava ManagedLLVM \nException occured....\nIllegal null pointer access in 'store i64'.\n        at <llvm> main(ManagedLLVM.c:6:112)\n        at org.graalvm.sdk/org.graalvm.polyglot.Value.        execute(Value.java:455)\n        at ManagedLLVM.main(ManagedLLVM.java:13)\n```", "```java\ngu install ruby\n```", "```java\nprint \"enter a \"\na = gets.to_i\nprint \"Enter b \"\nb = gets.to_i\nc = a + b\nputs \"Result \" + c.to_s\n```", "```java\ntruffleruby helloruby.rb \nenter a 10\nEnter b 20\nResult 30\n```", "```java\nvar helloMathMessage = \" Hello Math.js\";\nfunction add(a, b) {\n    print(\"message from js: add() called\");\n    return a+b;\n}\nfunction subtract(a, b) {\n    print(\"message from js: subtract() called\");\n    return a-b;\n}\nfunction multiply(a, b) {\n    print(\"message from js: multiply() called\");\n    return a*b;\n}\nPolyglot.export('add', add);\nPolyglot.export('subtract', subtract);\nPolyglot.export('multiply', multiply);\nPolyglot.export('message', helloMathMessage);\n```", "```java\narrayPy  = Polyglot.eval(\"python\", \"[10, 10.23456,     'Array String element']\")\nputs arrayPy.to_s\nlengthOfArray = arrayPy.size\nputs \"Iterating through the Python Array object of size \"     + lengthOfArray.to_s\nfor i in 0..lengthOfArray - 1\n    puts \"Element at \" + i.to_s + \" is \" + arrayPy[i].to_s\nend\n```", "```java\nPolyglot.eval_file(\"./math.js\") \nmessage = Polyglot.import(\"message\")\naddFunction = Polyglot.import_method(\"add\")\nsubtractFunction = Polyglot.import_method(\"subtract\")\nmultiplyFunction = Polyglot.import_method(\"multiply\")\nputs \"Message from JS \" + message\nputs \"Result of add(10,20) \" + add(10,20).to_s\nputs \"Result of subtract(10,20) \" + subtract(40,20).to_s\nputs \"Result of multiply(10,20) \" + multiply(10,20).to_s\n```", "```java\ntruffleruby --polyglot mathJsCaller.rb\n#<Python [10, 10.23456, 'Array String element']>\nIterating throught the Python Array object of size 3\nElement at 0 is 10\nElement at 1 is 10.23456\nElement at 2 is Array String element\nMessage from JS  Hello Math.js\nmessage from js: add() called\nResult of add(10,20) 30\nmessage from js: subtract() called\nResult of subtract(10,20) 20\nmessage from js: multiply() called\nResult of multiply(10,20) 200\n```", "```java\npublic class FibonacciCalculator{  \n    public int[] findFibonacci(int count) {\n        int fib1 = 0;\n        int fib2 = 1;\n        int currentFib, index;\n        int [] fibNumbersArray = new int[count];\n        for(index=2; index < count+1; ++index ) {    \n            currentFib = fib1 + fib2;    \n            fib1 = fib2;    \n            fib2 = currentFib;    \n            fibNumbersArray[index - 1] = currentFib;\n        }\n        return fibNumbersArray;\n    }\n    public void iterateFibonacci() {\n        long startTime = System.currentTimeMillis();\n        long now = 0;\n        long last = startTime;\n        for (int i = 1000000000; i < 1000000010; i++) {\n            int[] fibs = findFibonacci(i);\n            long total = 0;\n            for (int j=0; j<fibs.length; j++) {\n                total += fibs[j];\n            }\n            now = System.currentTimeMillis();\n            System.out.printf(\"%d (%d ms)%n\", i , now - last);\n            last = now;\n        }\n        long endTime = System.currentTimeMillis();\n        System.out.printf(\"total: (%d ms)%n\",             System.currentTimeMillis() - startTime);  \n    }\n    public static void main(String args[]) {    \n        FibonacciCalculator fibCal =             new FibonacciCalculator();\n        fibCal.iterateFibonacci();\n    }\n}\n```", "```java\nfibclass = Java.type('FibonacciCalculator')\nfibObject = fibclass.new\nfibonacciArray = fibObject.findFibonacci(10)\nfor i in 0..fibonacciArray.size - 1\n    puts \"Element at \" + i.to_s + \" is \" + fibonacciArray[i]    .to_s\nend\nputs \"Calling iterateFibonacci()\"\nfibObject.iterateFibonacci()\n```", "```java\ntruffleruby --jvm --vm.cp=. fibonacciJavaCaller.rb\nElement at 0 is 0\nElement at 1 is 1\nElement at 2 is 2\nElement at 3 is 3\nElement at 4 is 5\nElement at 5 is 8\nElement at 6 is 13\nElement at 7 is 21\nElement at 8 is 34\nElement at 9 is 55\nCalling iterateFibonacci()\n1000000000 (2946 ms)\n1000000001 (1011 ms)\n1000000002 (1293 ms)\n1000000003 (1016 ms)\n1000000004 (1083 ms)\n1000000005 (1142 ms)\n1000000006 (1072 ms)\n1000000007 (994 ms)\n1000000008 (982 ms)\n1000000009 (999 ms)\ntotal: (12538 ms)\n```", "```java\njava FibonacciCalculator \n1000000000 (2790 ms)\n1000000001 (592 ms)\n1000000002 (1120 ms)\n1000000003 (927 ms)\n1000000004 (955 ms)\n1000000005 (952 ms)\n1000000006 (974 ms)\n1000000007 (929 ms)\n1000000008 (923 ms)\n1000000009 (924 ms)\ntotal: (11086 ms)\n```", "```java\ngem install bundler\nFetching bundler-2.2.17.gem\nSuccessfully installed bundler-2.2.17\n1 gem installed\n```", "```java\nsource 'https://rubygems.org'\ngem 'math_engine'\n```", "```java\nrequire 'rubygems'\nrequire 'math_engine'\ndef eval(exp)\n    engine = MathEngine.new\n    ret = engine.evaluate(exp)\n    puts(ret)\n    return ret.truncate(4).to_f()\nend\nPolyglot.export_method('eval')\n```", "```java\npublic class MathEngineExample {\n    public void evaluateExpression(String exp) {\n        Context ctx = Context.newBuilder()            .allowAllAccess(true).build();\n        try {\n            File fibCal =                 new File(\"./math_engine_expression.rb\");\n            ctx.eval(Source.newBuilder(\"ruby\",                fibCal).build());\n            Value evaluateFunction =                 ctx.getBindings(\"ruby\").getMember(\"eval\");\n            Double evaluatedValue =                 evaluateFunction.execute(exp).asDouble();\n            System.out.printf(\"Evaluated Expression : \"                 + evaluatedValue.toString());  \n        }   catch (Exception e) {\n            System.out.println(\"Exception : \" );\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        MathEngineExample obj = new MathEngineExample();\n        obj.evaluateExpression(\"20 * (3/2) + (5 * 5)             / (100.5 * 3)\");\n    }\n}\n```", "```java\njava MathEngineExample\n0.30082918739635157545605306799e2\nEvaluated Expression : 30.0829      \n```", "```java\ngu install wasm\n```", "```java\ngit clone https://github.com/emscripten-core/emsdk.git\n```", "```java\n./emsdk install latest\n```", "```java\n./emsdk activate latest\n./emsdk_env.sh\n```", "```java\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/time.h>\nstatic long fib(int i) {\n    int fib1 = 0;\n    int fib2 = 1;\n    int currentFib, index;\n    long total = 0;\n    for (index = 2; index < i; ++index) {\n        currentFib = fib1 + fib2;\n        fib1 = fib2;\n        fib2 = currentFib;\n        total += currentFib;\n    }\n    return total;\n}\n```", "```java\nint main(int argc, char const *argv[])\n{\n    for (int i = 10000; i < 10010; i++) {\n        struct timeval tv_start;\n        struct timeval tv_end;\n        long time;\n        gettimeofday(&tv_start, NULL);\n        fib(i);\n        gettimeofday(&tv_end, NULL);\n        time = (tv_end.tv_sec*1000000 + tv_end.tv_usec) –            (tv_start.tv_sec*1000000 + tv_start.tv_usec);\n        printf(\"i=%d time: %10ld\\n\", i, time);\n    }\n    return 0;\n}\n```", "```java\nemcc -o fibonacci.wasm fibonacci.c\n```", "```java\nwasm --Builtins=wasi_snapshot_preview1 fibonacci.wasm\n```", "```java\nwasm --Builtins=wasi_snapshot_preview1 fibonacci.wasm\ni=10000 time:       6563\ni=10001 time:       6519\ni=10002 time:       6841\ni=10003 time:       8455\ni=10004 time:       6838\ni=10005 time:       7156\ni=10006 time:       7214\ni=10007 time:        237\ni=10008 time:        265\ni=10009 time:        247 \n```"]