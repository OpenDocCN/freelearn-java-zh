["```java\n    public final class AllowedCountrySpec extends Ab\n      stractSpecification<Location> {\n        private List<String> allowedCountries =\n        List.of(\n        \"Germany\", \"France\", \"Italy\", \"United States\");\n        @Override\n        public boolean isSatisfiedBy(Location location) {\n            return allowedCountries\n                    .stream()\n                    .anyMatch(\n                     allowedCountry -> allowedCountry\n                     .equals(location.country()));\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    public final class AllowedCitySpec extends Ab\n      stractSpecification<Location> {\n        private List<String> allowedCities =\n        List.of(\n        \"Berlin\", \"Paris\", \"Rome\", \"New York\");\n        @Override\n        public oolean isSatisfiedBy(Location location) {\n            return allowedCities\n                    .stream()\n                    .anyMatch(\n                     allowedCountry -> allowedCountry\n                    .equals(location.city()));\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    public abstract sealed class Router extends Equipment\n      permits CoreRouter, EdgeRouter {\n       /** Code omitted **/\n       public abstract void changeLocation(\n       Location location);\n       /** Code omitted **/\n    }\n    ```", "```java\n    @Override\n    public void changeLocation(Location location) {\n        var allowedCountrySpec = new AllowedCountrySpec();\n        allowedCountrySpec.check(location);\n        this.location = location;\n    }\n    ```", "```java\n    @Override\n    public void changeLocation(Location location) {\n        var allowedCountrySpec = new AllowedCountrySpec();\n        var allowedCitySpec = new AllowedCitySpec();\n        allowedCountrySpec.check(location);\n        allowedCitySpec.check(location);\n        this.location = location;\n    }\n    ```", "```java\n    public interface RouterManagementUseCase {\n        /** Code omitted **/\n        Router changeLocation(\n        Router router, Location location);\n        /** Code omitted **/\n    }\n    ```", "```java\n    public class RouterManagementInputPort implements\n      RouterManagementUseCase {\n        /** Code omitted **/\n        @Override\n        public Router changeLocation(Router router,\n        Location location) {\n            router.changeLocation(location);\n            return persistRouter(router);\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    public Router changeLocation(Router router,\n      Location location) {\n        router.changeLocation(location);\n        return persistRouter(router);\n    }\n    ```", "```java\n    @Transactional\n    @POST\n    @Path(\"/changeLocation/{routerId}\")\n    @Operation(operationId = \"changeLocation\", description\n      = \"Change a router location\")\n    public Uni<Response> changeLocation(@PathParam\n      (\"routerId\") String routerId, LocationChange loca\n        tionChange) {\n        Router router = routerManagementUseCase\n           .retrieveRouter(Id.withId(routerId));\n        Location location =\n            locationChange.mapToDomain();\n            return Uni.createFrom()\n           .item(routerManagementUseCase.changeLocation(ro\n            uter, location))\n           .onItem()\n           .transform(f -> f != null ? Response.ok(f) :\n                  Response.ok(null))\n                 .onItem()\n                 .transform(\n                    Response.ResponseBuilder::build);\n    }\n    ```", "```java\n    @Test\n    public void changeLocation() throws IOException {\n        var routerId =\n            \"b832ef4f-f894-4194-8feb-a99c2cd4be0c\";\n        var expectedCountry = \"Germany\";\n        var location = createLocation(\"Germany\",\n            \"Berlin\");\n        var updatedRouterStr = given()\n              .contentType(\"application/json\")\n              .pathParam(\"routerId\", routerId)\n              .body(location)\n              .when()\n              .post(\"/router/changeLocation/{routerId}\")\n              .then()\n              .statusCode(200)\n              .extract()\n              .asString();\n        var changedCountry =\n        getRouterDeserialized(\n        updatedRouterStr).getLocation().country();\n        assertEquals(expectedCountry, changedCountry);\n    }\n    ```", "```java\npublic class RouterManagementAdapter {\n    @Inject\n    RouterManagementUseCase routerManagementUseCase;\n    /** Code omitted **/\n}\n```", "```java\npublic class RouterNetworkH2Adapter implements RouterNet\n  workOutputPort {\n    private static RouterNetworkH2Adapter instance;\n    @PersistenceContext\n    private EntityManager em;\n    private RouterNetworkH2Adapter(){\n        setUpH2Database();\n    }\n    private void setUpH2Database() {\n        EntityManagerFactory entityManagerFactory =\n        Persistence.createEntityManagerFactory\n          (\"inventory\");\n        EntityManager em =\n        entityManagerFactory.createEntityManager();\n        this.em = em;\n    }\n    public static RouterNetworkH2Adapter getInstance() {\n        if (instance == null) {\n            instance = new RouterNetworkH2Adapter();\n        }\n        return instance;\n    }\n}\n```", "```java\nvar router = new CoreRouter(\n                  id,\n                  parentRouterId,\n                  vendor,\n                  model,\n                  ip,\n                  location,\n                  routerType,\n                  routers);\n```", "```java\nvar router = CoreRouter.builder()\n              .id(id == null ? Id.withoutId() : id)\n              .vendor(vendor)\n              .model(model)\n              .ip(ip)\n              .location(location)\n              .routerType(routerType)\n              .build();\n```", "```java\n@Builder\npublic CoreRouter(Id id, Id parentRouterId, Vendor vendor,\n  Model model, IP ip, Location location, RouterType router\n    Type, Map<Id, Router> routers) {\n/** Code omitted **/\n}\n```", "```java\npublic class RouterFactory {\n    public static Router getRouter(Id id,\n                                   Vendor vendor,\n                                   Model model,\n                                   IP ip,\n                                   Location location,\n                                   RouterType routerType){\n        switch (routerType) {\n            case CORE -> {\n                 return CoreRouter.builder().\n                     Id(id == null ? Id.withoutId() : id).\n                     Vendor(vendor).\n                     Model(model).\n                     Ip(ip).\n                     Location(location).\n                     routerType(routerType).\n                     Build();\n            }\n            case EDGE -> {\n                 return EdgeRouter.builder().\n                     Id(id==null ? Id.withoutId():id).\n                     Vendor(vendor).\n                     Model(model).\n                     Ip(ip).\n                     Location(location).\n                     routerType(routerType).\n                     Build();\n            }\n            default -> throw new\n            UnsupportedOperationException(\n            \"No valid router type informed\");\n        }\n    }\n}\n```"]