- en: Chapter 3. Running WildFly in Domain Mode
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Running domain mode
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the host controller to the domain controller
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting server groups via the Web Console
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting your server groups via the CLI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting your servers via the CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via Web
    Console
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via the
    CLI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking server status via the CLI
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to manage WildFly running in the domain
    mode. You will also learn how to configure and manage it, via both CLI and Web
    Console. We will also recap some topics covered in the standalone chapter adapted
    for the domain mode. If you want to know about the following topics, you can refer
    to the *Appendix* section of this book:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Domain mode and the server groups
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the structure of `domain.xml`
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the structure of `host.xml`
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, all examples and recipes use the WildFly installation described
    in [Chapter 1](ch01.html "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*,
    which is linked to the `$WILDFLY_HOME` variable.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Running domain mode
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to run WildFly in the domain mode. There are
    a few concepts that you need to be aware of—domain controller, host controller
    and server group. However, those concepts are all explained in the *Appendix*
    section of this book.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly comes with pre-configured `domain.xml` and `host.xml` files. There
    are two defined server groups: one named `main-server-group` referencing the `full`
    profile; the other one named `other-server-group` referencing the `full-ha` profile.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_03_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
- en: Server groups in domain.xml
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Each server group is then referenced into the `host.xml` file by a list of servers
    or hosts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_03_02.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: Servers declared in host.xml
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding XML code snippet, each server definition references
    the server-group membership using the attribute `group`. Also, the `auto-start`
    attribute defines whether the server will start automatically, or whether it needs
    a manual startup from the Admin Console or via CLI.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just open your command line and launch WildFly in the domain mode as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Accessing the Admin Console you can see **server-one** and **server-two** up
    and running, while **server-three** is still stopped, as depicted in the following
    image:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_03_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: How it works…
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start WildFly in the domain mode, the script starts WildFly which looks
    for its default configuration files. By default, it looks for the `domain.xml`
    and the `host.xml` files. When WildFly finds those two files, it parses them,
    and it starts taking up all the services needed and declared by the configuration
    files.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: At the OS level, when you start WildFly in the domain mode, you are actually
    starting a process called `Process Controller`, which has to start another process
    called `Host Controller`. The `Host Controller` is responsible for managing the
    server configuration and for starting the WildFly instances, the servers, declared
    in the `host.xml` file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统层面，当你以域模式启动WildFly时，实际上是在启动一个名为`Process Controller`的进程，它必须启动另一个名为`Host
    Controller`的进程。`Host Controller`负责管理服务器配置以及启动在`host.xml`文件中声明的WildFly实例，即服务器。
- en: As per [https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27](https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27),
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据[https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27](https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27)，
- en: '*One Host Controller instance is configured to act as the Domain Controller.
    The Host Controller on each host, meant as remote server (either physical or virtual),
    interacts with the Domain Controller to control the lifecycle of the application
    server instances running on its host and to assist the Domain Controller in managing
    them.*'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*一个主机控制器实例被配置为充当域控制器。每个主机上的主机控制器，作为远程服务器（无论是物理的还是虚拟的），与域控制器交互，以控制其主机上运行的应用服务器实例的生命周期，并协助域控制器管理它们。*'
- en: 'If you check the processes running at the OS level, you can see the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查操作系统层面正在运行的进程，你可以看到以下内容：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the previous console output, I emphasized the process IDs and their JVM
    names, summarizing the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的控制台输出中，我强调了进程ID及其JVM名称，总结如下：
- en: '| Process ID | Parent PID | JVM name | Description |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 进程ID | 父进程ID | JVM名称 | 描述 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `1525` | `1429` | `Process Controller` | This is the main process responsible
    for creating the host controller and launching the servers. It is also responsible
    for recreating the host controller, in case it crashes.Its parent PID is the `domain.sh`
    bash script process, that originated it. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `1525` | `1429` | `Process Controller` | 这是负责创建主机控制器和启动服务器的主要进程。它还负责在主机控制器崩溃的情况下重新创建主机控制器。其父进程ID是启动它的`domain.sh`bash脚本进程。|'
- en: '| `1542` | `1525` | `Host Controller` | This is the process that manages all
    the hosts defined within the `host.xml` file. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `1542` | `1525` | `Host Controller` | 这是管理在`host.xml`文件中定义的所有主机的进程。|'
- en: '| `1611` | `1525` | `Server:server-one` | This is the JVM for the host named
    `server-one`. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `1611` | `1525` | `Server:server-one` | 这是名为`server-one`的主机的JVM。|'
- en: '| `1657` | `1525` | `Server:server-two` | This is the JVM for the host named
    `server-two`. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `1657` | `1525` | `Server:server-two` | 这是名为`server-two`的主机的JVM。|'
- en: There's more...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As described in the description of the JVM named `Process Controller`, this
    is the main process that generates the host controller and the WildFly instances,
    named `server-one` and `server-two`. At the OS level, this means that if the PC
    crashes, all its child processes will also go down.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如`Process Controller` JVM的描述中所述，这是生成主机控制器和名为`server-one`和`server-two`的WildFly实例的主要进程。在操作系统层面，这意味着如果PC崩溃，所有其子进程也会随之关闭。
- en: Instead, if the `Host Controller` crashes, nothing happens to the real WildFly
    instances, they just keep on running and serving your clients. Furthermore, when
    the `Host Controller` crashes, the `Process Controller` is responsible to start
    it up again. Let me show you.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，如果`Host Controller`崩溃，真实的WildFly实例不会受到影响，它们将继续运行并服务于你的客户端。此外，当`Host Controller`崩溃时，`Process
    Controller`负责重新启动它。让我给你演示一下。
- en: 'Within a different terminal, kill the process with the ID that matches the
    `Host Controller`, which in this case is `1542`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在不同的终端中，终止与`Host Controller` ID匹配的进程，在这个例子中是`1542`：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the terminal where you launched WildFly in the domain mode, you should
    see log entries as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在你以域模式启动WildFly的终端中，你应该看到以下日志条目：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: So, the `Process Controller` noticed that the `Host Controller` crashed, and
    it started a new `Host Controller`. The running WildFly instances reconnected
    successfully to their `Host Controller`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`Process Controller`注意到`Host Controller`崩溃，并启动了一个新的`Host Controller`。正在运行的WildFly实例成功重新连接到它们的`Host
    Controller`。
- en: 'Executing the command `ps -efa | grep java` again, you will get a list of processes
    like the previous ones, except for the `Host Controller` process, which will be
    new, as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 再次执行命令`ps -efa | grep java`，你将得到与之前类似的过程列表，但`Host Controller`进程将是新的，如下所示：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Connecting the host controller to the domain controller
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接主机控制器到域控制器
- en: In this recipe, you will learn how to connect the host controller to the domain
    controller. We will refer to the domain controller as `master`, while we will
    refer to the host controllers as `slave`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何将主机控制器连接到域控制器。我们将把域控制器称为`master`，而将主机控制器称为`slave`。
- en: Getting ready
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: The purpose of this recipe is to show how to run a domain controller, and a
    series of other host controllers (we will use two host controllers) that connect
    to it. Whether the domain controller is on the same machine or on a different
    one, the connection type is meant to be "remote".
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱的目的是展示如何运行一个域控制器，以及一系列连接到它的其他主机控制器（我们将使用两个主机控制器）。无论域控制器是在同一台机器上还是不同的机器上，连接类型都意味着是“远程”。
- en: For the recipe, we will simulate two machines defining different configuration
    folders for each server that we are going to use. This is also a good practice
    for the development environment, as you can test a pseudo production scenario.
    Nevertheless, as we will have a `Host Controller` process running along with a
    `Domain Controller` process, and because both are responsible for remote management,
    with the management interfaces settled by default to listen on `localhost:9990`,
    we will have to bind them differently for each host controller.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于菜谱，我们将模拟两台机器，为每个将要使用的服务器定义不同的配置文件夹。这对于开发环境来说也是一个好的实践，因为你可以测试一个伪生产场景。然而，由于我们将有一个`Host
    Controller`进程和一个`Domain Controller`进程同时运行，并且因为它们都负责远程管理，默认的管理接口设置为监听`localhost:9990`，所以我们必须为每个主机控制器分别绑定它们。
- en: In [Chapter 2](ch02.html "Chapter 2. Running WildFly in Standalone Mode"), *Running
    WildFly in Standalone Mode*, we saw how to run multiple WildFly instances on the
    same machine but with different IPs or port numbers. Here we have to do the same
    thing. For brevity, we will see just how to bind the host controllers on different
    ports.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。以独立模式运行WildFly")，*以独立模式运行WildFly*中，我们看到了如何在同一台机器上运行多个WildFly实例，但具有不同的IP或端口号。这里我们也要做同样的事情。为了简洁，我们将看到如何在不同端口上绑定主机控制器。
- en: 'Lastly, the host controller that connects to the domain controller needs to
    be authenticated. For this reason, we will need to create a new user by running
    the `add-user.sh` script, providing the information as depicted in the following
    screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，连接到域控制器的主机控制器需要进行身份验证。因此，我们需要通过运行`add-user.sh`脚本来创建一个新用户，提供以下截图中的信息：
- en: '![Getting ready](img/3744_03_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/3744_03_04.jpg)'
- en: This user belongs to the **ManagementRealm**, the same that was used in [Chapter
    1](ch01.html "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!* to create
    the `wildfly` user in order to access the Web Console.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 此用户属于**ManagementRealm**，与[第1章](ch01.html "第1章。欢迎来到WildFly！")中使用的相同，*欢迎来到WildFly!*创建`wildfly`用户以访问Web控制台。
- en: Keep note of the last line, the characters in red, that we will use later in
    the recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 记住最后一行，红色字符，我们稍后将在菜谱中使用。
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First we need to create the `Domain Controller` and two `Host Controller` configuration
    folders. Let''s create the structure of our directories:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要创建`Domain Controller`和两个`Host Controller`配置文件夹。让我们创建我们的目录结构：
- en: 'Open your terminal and type as follows:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端，并按照以下方式输入：
- en: '[PRE5]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now open the `domain.xml` file of the master directory and replace the `server-groups`
    declaration with the following XML code snippet:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开`master`目录下的`domain.xml`文件，并将`server-groups`声明替换为以下XML代码片段：
- en: '[PRE6]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here we are simulating a server group dedicated to host applications targeting
    the RESTful technology, and another server group dedicated to host applications
    targeting the SOAP technology. This is just an example. A server group might match
    with a particular application, or a technology (thus more applications); the choice
    is up to you. My suggestion is to be as consistent as possible when making such
    decisions.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，我们正在模拟一个专门针对RESTful技术的服务器组，以及一个专门针对SOAP技术的服务器组。这只是一个例子。服务器组可能与特定的应用程序或技术（因此有更多应用程序）相匹配；选择取决于你。我的建议是在做出此类决定时尽可能保持一致。
- en: 'Edit the `host.xml` file of the `master` directory and remove the entire `servers`
    declaration. Once done, run the master as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`master`目录下的`host.xml`文件，并删除整个`servers`声明。完成后，按照以下方式运行主服务器：
- en: '[PRE7]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The log should look as follows:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 日志应该看起来如下：
- en: '[PRE8]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are no running servers at all.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 完全没有运行的服务器。
- en: Now it's time to configure our first slave, `slave-1`.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `slave-1/configuration/host.xml` file and do the following:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the host as `slave-1`: `<host name="slave-1" >`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the `hostcontroller` user''s secret values inside the `ManagementRealm`
    definition:'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change the port number for the management-interfaces:'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Use a remote `domain-controller`:'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define the hosts:'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should end up with a file that looks like the following XML code snippet:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now we are ready to run our `slave-1` host:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you check the log output from master, you will notice that `slave-1` registered
    itself to the `Domain Controller`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Repeat the same changes for the second slave. Set the host name to `slave-2`
    and add the following servers definition:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Also, set the `jboss.management.native.port` and `jboss.management.http.port`
    property default values, to `29999` and `29990` respectively. You should end up
    with a file that looks like the following XML code snippet:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we are ready to run our `slave-2` host:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'If you check the log output from `master`, you will notice that `slave-2` registered
    itself to the `Domain Controller`:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first talk about the master and then about the two slaves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Master
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within the master, you define the entire configuration needed to run your WildFly
    instances. You choose a profile depending on your requirements, set IPs, ports,
    server, and groups. Everything is persisted into the `domain.xml`, or whatever
    file you choose to persist to.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: As you launch the `domain.sh` script, the process by default looks for a `domain.xml`
    file and `host.xml` file to read the configuration, starting from the `jboss.home.dir`
    (whatever `$WILDFLY_HOME` is) appending `domain` and `configuration`, unless you
    specify differently.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: We specify differently by adding the `jboss.domain.base.dir` property valued
    to `master`. So WildFly, starting from `jboss.home.dir` appends `master` and the
    `configuration`. As per the standalone mode, WildFly in the domain mode lets you
    override different paths if necessary.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes all the properties:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Usage | Default value |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
- en: '| `jboss.home.dir` | The root directory of the WildFly installation. | Set
    by `domain.sh` to `$JBOSS_HOME` |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.base.dir` | The base directory for domain content. | `jboss.home.dir/domain`
    |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.config.dir` | The base configuration directory. | `jboss.domain.base.dir/configuration`
    |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.data.dir` | The directory used for persistent data file storage.
    | `jboss.domain.base.dir/data` |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.log.dir` | The directory containing the `host-controller.log`
    and `process-controller.log` files | `jboss.domain.base.dir/log` |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.temp.dir` | The directory used for temporary file storage.
    | `jboss.domain.base.dir/tmp` |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.deployment.dir` | The directory used to store deployed content.
    | `jboss.domain.data.dir/content` |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.servers.dir` | The directory containing the output for the
    managed server instances. | `jboss.domain.data.dir/servers` |'
  id: totrans-119
  prefs: []
  type: TYPE_TB
- en: Tip
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The master should run alone, without any servers.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Slaves
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As stated in the previous paragraph, when you launch WildFly in the domain mode,
    it looks, by default, for the `domain.xml` and `host.xml` files. As we are running
    the slaves, we do not want to load the `domain.xml`, that's why we moved it away
    (actually we renamed it as `domain.xml.unused`). So the start up process only
    picks up the `host.xml` file where we defined our servers and the server groups
    they belong to.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: So basically, within the `host.xml` file we just defined our servers and the
    domain controller that they should connect to.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in the host `slave-2` we needed to specify a `port-offset`, because
    we already have a running instance on our local machine. Both `SOAP-server-one`
    and `SOAP-server-two` will increment their port bindings to 150 and 250, hence
    `8230` for the first http-connector and `8330` for the second http-connector.
    Also, we had to change the port number for the management-interfaces.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we had to specify the domain controller which the slave will connect
    to, by passing the `-Djboss.domain.master.address=127.0.0.1` parameter.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'The domain overview from the Admin Console looks like the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '![Slaves](img/3744_03_05.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
- en: Admin Console—domain overview
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting server groups via the Web Console
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start an entire server group using
    the Web Console. Since a server can belong to more than one server group, you
    might want to stop or start all servers at once, and thus stop or start the server
    group.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to follow this recipe, we need to have completed the previous one.
    Thus, before we can begin, we need to start the master server and the slaves `slave-1`
    and `slave-2`. In three different terminals, navigate to the `$WILDFLY_HOME`,
    and run the following commands:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ./bin/domain.sh -Djboss.domain.base.dir=master`.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./bin/domain.sh -Djboss.domain.base.dir=slave-1 -Djboss.domain.master.address=127.0.0.1`.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./bin/domain.sh -Djboss.domain.base.dir=slave-2 -Djboss.domain.master.address=127.0.0.1`.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that everything is up and running, let's move ahead.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your browser and point it to the Admin Console: `http://localhost:9990`.'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password (`wildfly` and `cookbook.2015` respectively)
    and go to the **Domain** tab. You should see a page similar to the following screenshot:![How
    to do it…](img/3744_03_05.jpg)
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Admin Console—domain overview
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, on hovering the mouse over the **Groups** box, the command links will appear
    as follows:![How to do it…](img/3744_03_06.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Server Group: Start, Stop and Restart'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, hovering on a server-box, the command links will appear as follows:![How
    to do it…](img/3744_03_07.jpg)
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start server group
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now try hitting the **Stop Group** command link and confirm the operation!
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tadaaaa… pretty easy huh! The page updates the server instance icon and displays
    **Operation successful** in the message board:![How to do it…](img/3744_03_08.jpg)
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stopping Server Group
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the log, you should see entries similar to the following:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Let's restart the server group, by hitting the **Start Group** command link,
    as follows:![How to do it…](img/3744_03_09.jpg)
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once restarted, WildFly confirms the successful operation by providing you with
    a message feedback and by updating the status icon associated to the servers belonging
    to the server group, as follows:![How to do it…](img/3744_03_10.jpg)
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Sever Group
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The entries in the log of `slave-1` are as follows:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more...
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same operations apply while stopping and starting a single server instance.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: In the `host.xml` file you can define the `auto-start` attribute, the default
    value of which is `true`. Setting it to `false` will not start the server, and
    you will have to start it manually via the Admin Console or via CLI.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this regard, let's try the CLI which is more fascinating!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting your server groups via the CLI
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start an entire server group using
    the CLI. Since a server can belong to more than one server group, you might want
    to stop or start all the servers at once, and thus stop or start the server group.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, refer to the recipe *Connecting the host
    controller to the domain controller* in this chapter.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your terminal and do as follows:![How to do it…](img/3744_03_11.jpg)
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the command `ls`, you can list the entire context that you walk through.
    What we want to do is to "stop" the entire server group named `server-group-REST-app`:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now let''s start the server-group again, by invoking the `start-servers` method:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the CLI, you have basically remapped the entire configuration, hence, if
    you look at the `domain.xml` or `host.xml` files, you find pretty much the same
    hierarchy.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: In our recipe we wanted to stop a server group, so if you look at the `domain.xml`
    you can determine the contexts and commands – you can see the available commands
    by hitting the *Tab* key next to `:` or `/`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting your servers via the CLI
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start a single server that belongs
    to a server group using the CLI. Because servers that belong to a server group
    might be spread over a series of different machines, with different resources
    available, you might need to stop a single server, without stopping the entire
    server group to add more resources and start it up back again. Fortunately, WildFly
    provides such granularity with regards to stop servers.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, refer to the recipe *Connecting the host
    controller to the domain controller* in this chapter.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，域控制器和主机控制器都应该处于开启和运行状态。对于它们的配置，请参考本章中的菜谱*将主机控制器连接到域控制器*。
- en: How to do it…
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Open your terminal and do as follows:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的终端并按照以下步骤操作：
- en: '[PRE25]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'What we want to do is to "stop" the server named `REST-server-one`, which belongs
    to the `Host Controller` named `slave-1`. This is done as follows:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要做的是“停止”名为`REST-server-one`的服务器，它属于名为`slave-1`的主机控制器。这是通过以下方式完成的：
- en: '[PRE26]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, the server is in the `STOPPING` state; this means it may take
    a while depending on how many resources you have bound and/or deployed.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，服务器处于`STOPPING`状态；这意味着它可能需要一段时间，具体取决于你绑定了多少资源以及/或者部署了多少。
- en: 'To check if it is done, try the following command:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查是否完成，尝试以下命令：
- en: '[PRE27]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now let''s start the server again by invoking the `start` method:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过调用`start`方法再次启动服务器：
- en: '[PRE28]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: How it works…
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `stop` command itself is pretty easy, and does not need much explanation.
    What is worth mentioning is that to be able to stop a server, you first need to
    know which host/slave it belongs to. What you can do is navigate through WildFly''s
    structure, as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`stop`命令本身很简单，不需要太多解释。值得提到的是，要能够停止服务器，你首先需要知道它属于哪个主机/从机。你可以这样做，通过导航WildFly的结构，如下所示：'
- en: '![How it works…](img/3744_03_12.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/3744_03_12.jpg)'
- en: Once you have located the server you want/need to stop, you can issue the `stop`
    command.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到了你想要/需要停止的服务器，你可以发出`stop`命令。
- en: There's more…
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'When dealing with the `stop` and `start` commands, on both `server-group` and
    `server`, you can add the `blocking=true` option which basically hangs the commands
    until it''s done. The command would be as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理`stop`和`start`命令时，在`server-group`和`server`上，你可以添加`blocking=true`选项，这基本上会使命令挂起，直到完成。命令如下所示：
- en: '[PRE29]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In this way we know when the server completes the operation. Imagine a case
    where you are executing multiple CLI commands in sequence, and a command needs
    the previous operations to be carried out. Without the blocking flag enabled,
    the command will not work.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就能知道服务器何时完成操作。想象一下你正在按顺序执行多个CLI命令，而某个命令需要先前的操作完成。如果没有启用阻塞标志，该命令将无法工作。
- en: Deploying and undeploying an application to a specific server group via Web
    Console
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Web控制台将应用程序部署和取消部署到特定的服务器组
- en: In this recipe, we will learn how to deploy and undeploy an application via
    the Web Console, and assign it to a server group.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何通过Web控制台部署和取消部署应用程序，并将其分配给服务器组。
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, both the domain controller and the host controllers should
    be up and running. For their configuration, refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，域控制器和主机控制器都应该处于开启和运行状态。对于它们的配置，请参考本章中的菜谱*将主机控制器连接到域控制器*。
- en: In this and the following recipe, we will need an application to test our configuration.
    For this recipe, we will need the application named `example` which you can find
    in my GitHub repository. If you skipped the "*Managing applications using the
    deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个和接下来的菜谱中，我们需要一个应用程序来测试我们的配置。对于这个菜谱，我们需要名为`example`的应用程序，你可以在我的GitHub仓库中找到它。如果你跳过了[第2章](ch02.html
    "第2章。以独立模式运行WildFly")中的"*使用部署文件夹管理应用程序*菜谱"，*以独立模式运行WildFly*，请参考它以下载你将需要的所有源代码和项目。
- en: 'To build the application, type as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建应用程序，请输入以下内容：
- en: '[PRE30]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it…
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Open your browser and point it to the Admin Console: `http://localhost:9990`.'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的浏览器并将其指向管理控制台：`http://localhost:9990`。
- en: Enter the username and password (`wildfly` and `cookbook.2015` respectively)
    and go to **Deployments**. You should get a page similar to the following screenshot:![How
    to do it…](img/3744_03_13.jpg)
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入用户名和密码（分别是`wildfly`和`cookbook.2015`）并转到**部署**。你应该会看到一个类似于以下截图的页面：![如何做…](img/3744_03_13.jpg)
- en: The manage deployments window
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 管理部署窗口
- en: Now to deploy an application, we first need to add it by clicking the **Add**
    button and choosing your artifact, as shown in the following image:![How to do
    it…](img/3744_03_14.jpg)
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying the example.war application
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now just follow the wizard instructions. You should end up with your artifact
    deployed, but not assigned to a **SERVER GROUPS**, as shown in the following screenshot:![How
    to do it…](img/3744_03_15.jpg)
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application deployed but not assigned to any server-group
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the domain controller''s log you should see a log like the following:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: But you don't see any logs at the `Host Controller` log side. This is because
    we haven't assigned the application to any server group yet. To assign the application
    to a server group, just hit the **Assign** button and choose the server group,
    as shown in the following screenshot:![How to do it…](img/3744_03_16.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assigning a deployment to a server-group
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save it and the domain controller should spread the deployment to the servers
    that belong to the selected server group, as shown in the following screenshot:![How
    to do it…](img/3744_03_17.jpg)
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment assigned to a server-group
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can check it from the host controller''s log, by looking for entries similar
    to the following:'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: No more entries will be found on the domain controller side.
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you need to check which deployments belong to what server group, go to the
    **Deployments** tab, select the **Server Groups** tab and click the appropriate
    **View** command link, as shown in the next screenshot:![How to do it…](img/3744_03_18.jpg)
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting a server-group
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should see all the successful deployments, as shown in the following screenshot:![How
    to do it…](img/3744_03_19.jpg)
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployments for a specific server-group
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Okay, now it's time to undeploy our application. As the Web Console suggests,
    from the **Deployments** overview you can remove it ( undeploy it in GUI terms)
    by selecting the artifact and clicking the **Remove** button, as shown in the
    next screenshot:![How to do it…](img/3744_03_20.jpg)
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Undeploying the artifact
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm your operation as follows:![How to do it…](img/3744_03_21.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Artifact undeployed
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now looking at the logs, you should find the following entries (first the `Domain
    Controller` log followed by the `Host Controller` log):'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Now let's recap all these things and more in the next recipe using the CLI.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via the
    CLI
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy and undeploy an application using
    the CLI, and assign it to a specific server group. This recipe follows pretty
    much the same operation as executed in the previous recipe, but is specific to
    the CLI.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, please refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: In this and the following recipe, we will need an application to test our configuration.
    For this recipe, we require the application named `example` which you can find
    in my GitHub repository. If you skipped the *Managing applications using the deployments
    folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly in Standalone
    Mode"), *Running WildFly in Standalone Mode*, please refer to it in order download
    all the source code and projects that you will need.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, type as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Once you build the application, copy it into the `$WILDFLY_HOME` folder for
    convenience.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and connect to the DC as usual:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now just hit *Tab* to see the available commands:![How to do it…](img/3744_03_22.jpg)
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a `deploy` command available, and it is the one we need. Let's deploy
    our artifact to both server groups, `server-group-REST-app` and `server-group-SOAP-app`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the application's path is relative to the path used to access
    the CLI. So in case you are in your user home, the path to specify to the `deploy`
    command would have been `WFC/github/wildfly-cookbook/example/target/example.war`.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s check what happened to each server group singularly:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you don''t trust the CLI, check what happened to the various logs:'
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `master` log is as follows:'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The `Slave-1` log is as follows:'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-253
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The `Slave-2` log is as follows:'
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: As you can see from the logs, our artifact has been deployed to all the declared
    server groups. `Slave-2` has two running instances, each one with its own copy
    of the artifact.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now to undeploy the artifact; it''s as easy as pie:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Let''s check via CLI if we have effectively undeployed our artifact:'
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Again, check the logs to see what happened:'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `master` log is as follows:'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The `Slave-1` log is as follows:'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `Slave-2` log is as follows:'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: There's more...
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Actually, you can deploy the artifact to all the server groups with the following
    directive:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'There is a shortcut for undeploying too:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: It basically undeploys the artifact from all the server groups that it is assigned
    to.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Checking server status via the CLI
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to check the status of the server using the
    CLI. Using the standalone, there is no need for such a check, because you wouldn't
    be able to connect to the CLI at all. Thus, in the domain mode, you might need
    to know if a certain server is up or not before doing some operations.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, please refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and connect to the domain controller as usual:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
