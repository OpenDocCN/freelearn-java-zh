- en: Chapter 3. Running WildFly in Domain Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running domain mode
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting the host controller to the domain controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting server groups via the Web Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting your server groups via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stopping and starting your servers via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via Web
    Console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via the
    CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking server status via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to manage WildFly running in the domain
    mode. You will also learn how to configure and manage it, via both CLI and Web
    Console. We will also recap some topics covered in the standalone chapter adapted
    for the domain mode. If you want to know about the following topics, you can refer
    to the *Appendix* section of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Domain mode and the server groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the structure of `domain.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the structure of `host.xml`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, all examples and recipes use the WildFly installation described
    in [Chapter 1](ch01.html "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*,
    which is linked to the `$WILDFLY_HOME` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Running domain mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to run WildFly in the domain mode. There are
    a few concepts that you need to be aware of—domain controller, host controller
    and server group. However, those concepts are all explained in the *Appendix*
    section of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly comes with pre-configured `domain.xml` and `host.xml` files. There
    are two defined server groups: one named `main-server-group` referencing the `full`
    profile; the other one named `other-server-group` referencing the `full-ha` profile.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Server groups in domain.xml
  prefs: []
  type: TYPE_NORMAL
- en: Each server group is then referenced into the `host.xml` file by a list of servers
    or hosts.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Servers declared in host.xml
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding XML code snippet, each server definition references
    the server-group membership using the attribute `group`. Also, the `auto-start`
    attribute defines whether the server will start automatically, or whether it needs
    a manual startup from the Admin Console or via CLI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just open your command line and launch WildFly in the domain mode as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Accessing the Admin Console you can see **server-one** and **server-two** up
    and running, while **server-three** is still stopped, as depicted in the following
    image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start WildFly in the domain mode, the script starts WildFly which looks
    for its default configuration files. By default, it looks for the `domain.xml`
    and the `host.xml` files. When WildFly finds those two files, it parses them,
    and it starts taking up all the services needed and declared by the configuration
    files.
  prefs: []
  type: TYPE_NORMAL
- en: At the OS level, when you start WildFly in the domain mode, you are actually
    starting a process called `Process Controller`, which has to start another process
    called `Host Controller`. The `Host Controller` is responsible for managing the
    server configuration and for starting the WildFly instances, the servers, declared
    in the `host.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: As per [https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27](https://weblogs.java.net/blog/arungupta/archive/2014/05/30/wildfly-managed-domain-raspberry-pi-tech-tip-27),
  prefs: []
  type: TYPE_NORMAL
- en: '*One Host Controller instance is configured to act as the Domain Controller.
    The Host Controller on each host, meant as remote server (either physical or virtual),
    interacts with the Domain Controller to control the lifecycle of the application
    server instances running on its host and to assist the Domain Controller in managing
    them.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'If you check the processes running at the OS level, you can see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous console output, I emphasized the process IDs and their JVM
    names, summarizing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Process ID | Parent PID | JVM name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `1525` | `1429` | `Process Controller` | This is the main process responsible
    for creating the host controller and launching the servers. It is also responsible
    for recreating the host controller, in case it crashes.Its parent PID is the `domain.sh`
    bash script process, that originated it. |'
  prefs: []
  type: TYPE_TB
- en: '| `1542` | `1525` | `Host Controller` | This is the process that manages all
    the hosts defined within the `host.xml` file. |'
  prefs: []
  type: TYPE_TB
- en: '| `1611` | `1525` | `Server:server-one` | This is the JVM for the host named
    `server-one`. |'
  prefs: []
  type: TYPE_TB
- en: '| `1657` | `1525` | `Server:server-two` | This is the JVM for the host named
    `server-two`. |'
  prefs: []
  type: TYPE_TB
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As described in the description of the JVM named `Process Controller`, this
    is the main process that generates the host controller and the WildFly instances,
    named `server-one` and `server-two`. At the OS level, this means that if the PC
    crashes, all its child processes will also go down.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, if the `Host Controller` crashes, nothing happens to the real WildFly
    instances, they just keep on running and serving your clients. Furthermore, when
    the `Host Controller` crashes, the `Process Controller` is responsible to start
    it up again. Let me show you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within a different terminal, kill the process with the ID that matches the
    `Host Controller`, which in this case is `1542`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the terminal where you launched WildFly in the domain mode, you should
    see log entries as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: So, the `Process Controller` noticed that the `Host Controller` crashed, and
    it started a new `Host Controller`. The running WildFly instances reconnected
    successfully to their `Host Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Executing the command `ps -efa | grep java` again, you will get a list of processes
    like the previous ones, except for the `Host Controller` process, which will be
    new, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Connecting the host controller to the domain controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to connect the host controller to the domain
    controller. We will refer to the domain controller as `master`, while we will
    refer to the host controllers as `slave`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The purpose of this recipe is to show how to run a domain controller, and a
    series of other host controllers (we will use two host controllers) that connect
    to it. Whether the domain controller is on the same machine or on a different
    one, the connection type is meant to be "remote".
  prefs: []
  type: TYPE_NORMAL
- en: For the recipe, we will simulate two machines defining different configuration
    folders for each server that we are going to use. This is also a good practice
    for the development environment, as you can test a pseudo production scenario.
    Nevertheless, as we will have a `Host Controller` process running along with a
    `Domain Controller` process, and because both are responsible for remote management,
    with the management interfaces settled by default to listen on `localhost:9990`,
    we will have to bind them differently for each host controller.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. Running WildFly in Standalone Mode"), *Running
    WildFly in Standalone Mode*, we saw how to run multiple WildFly instances on the
    same machine but with different IPs or port numbers. Here we have to do the same
    thing. For brevity, we will see just how to bind the host controllers on different
    ports.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, the host controller that connects to the domain controller needs to
    be authenticated. For this reason, we will need to create a new user by running
    the `add-user.sh` script, providing the information as depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This user belongs to the **ManagementRealm**, the same that was used in [Chapter
    1](ch01.html "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!* to create
    the `wildfly` user in order to access the Web Console.
  prefs: []
  type: TYPE_NORMAL
- en: Keep note of the last line, the characters in red, that we will use later in
    the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First we need to create the `Domain Controller` and two `Host Controller` configuration
    folders. Let''s create the structure of our directories:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your terminal and type as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open the `domain.xml` file of the master directory and replace the `server-groups`
    declaration with the following XML code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here we are simulating a server group dedicated to host applications targeting
    the RESTful technology, and another server group dedicated to host applications
    targeting the SOAP technology. This is just an example. A server group might match
    with a particular application, or a technology (thus more applications); the choice
    is up to you. My suggestion is to be as consistent as possible when making such
    decisions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `host.xml` file of the `master` directory and remove the entire `servers`
    declaration. Once done, run the master as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The log should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are no running servers at all.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now it's time to configure our first slave, `slave-1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Edit the `slave-1/configuration/host.xml` file and do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the host as `slave-1`: `<host name="slave-1" >`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the `hostcontroller` user''s secret values inside the `ManagementRealm`
    definition:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the port number for the management-interfaces:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Use a remote `domain-controller`:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Define the hosts:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'You should end up with a file that looks like the following XML code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are ready to run our `slave-1` host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you check the log output from master, you will notice that `slave-1` registered
    itself to the `Domain Controller`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Repeat the same changes for the second slave. Set the host name to `slave-2`
    and add the following servers definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, set the `jboss.management.native.port` and `jboss.management.http.port`
    property default values, to `29999` and `29990` respectively. You should end up
    with a file that looks like the following XML code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we are ready to run our `slave-2` host:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you check the log output from `master`, you will notice that `slave-2` registered
    itself to the `Domain Controller`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's first talk about the master and then about the two slaves.
  prefs: []
  type: TYPE_NORMAL
- en: Master
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Within the master, you define the entire configuration needed to run your WildFly
    instances. You choose a profile depending on your requirements, set IPs, ports,
    server, and groups. Everything is persisted into the `domain.xml`, or whatever
    file you choose to persist to.
  prefs: []
  type: TYPE_NORMAL
- en: As you launch the `domain.sh` script, the process by default looks for a `domain.xml`
    file and `host.xml` file to read the configuration, starting from the `jboss.home.dir`
    (whatever `$WILDFLY_HOME` is) appending `domain` and `configuration`, unless you
    specify differently.
  prefs: []
  type: TYPE_NORMAL
- en: We specify differently by adding the `jboss.domain.base.dir` property valued
    to `master`. So WildFly, starting from `jboss.home.dir` appends `master` and the
    `configuration`. As per the standalone mode, WildFly in the domain mode lets you
    override different paths if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table summarizes all the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Usage | Default value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.home.dir` | The root directory of the WildFly installation. | Set
    by `domain.sh` to `$JBOSS_HOME` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.base.dir` | The base directory for domain content. | `jboss.home.dir/domain`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.config.dir` | The base configuration directory. | `jboss.domain.base.dir/configuration`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.data.dir` | The directory used for persistent data file storage.
    | `jboss.domain.base.dir/data` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.log.dir` | The directory containing the `host-controller.log`
    and `process-controller.log` files | `jboss.domain.base.dir/log` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.temp.dir` | The directory used for temporary file storage.
    | `jboss.domain.base.dir/tmp` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.deployment.dir` | The directory used to store deployed content.
    | `jboss.domain.data.dir/content` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.domain.servers.dir` | The directory containing the output for the
    managed server instances. | `jboss.domain.data.dir/servers` |'
  prefs: []
  type: TYPE_TB
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The master should run alone, without any servers.
  prefs: []
  type: TYPE_NORMAL
- en: Slaves
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As stated in the previous paragraph, when you launch WildFly in the domain mode,
    it looks, by default, for the `domain.xml` and `host.xml` files. As we are running
    the slaves, we do not want to load the `domain.xml`, that's why we moved it away
    (actually we renamed it as `domain.xml.unused`). So the start up process only
    picks up the `host.xml` file where we defined our servers and the server groups
    they belong to.
  prefs: []
  type: TYPE_NORMAL
- en: So basically, within the `host.xml` file we just defined our servers and the
    domain controller that they should connect to.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, in the host `slave-2` we needed to specify a `port-offset`, because
    we already have a running instance on our local machine. Both `SOAP-server-one`
    and `SOAP-server-two` will increment their port bindings to 150 and 250, hence
    `8230` for the first http-connector and `8330` for the second http-connector.
    Also, we had to change the port number for the management-interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we had to specify the domain controller which the slave will connect
    to, by passing the `-Djboss.domain.master.address=127.0.0.1` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The domain overview from the Admin Console looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Slaves](img/3744_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Admin Console—domain overview
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting server groups via the Web Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start an entire server group using
    the Web Console. Since a server can belong to more than one server group, you
    might want to stop or start all servers at once, and thus stop or start the server
    group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To be able to follow this recipe, we need to have completed the previous one.
    Thus, before we can begin, we need to start the master server and the slaves `slave-1`
    and `slave-2`. In three different terminals, navigate to the `$WILDFLY_HOME`,
    and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ ./bin/domain.sh -Djboss.domain.base.dir=master`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./bin/domain.sh -Djboss.domain.base.dir=slave-1 -Djboss.domain.master.address=127.0.0.1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`./bin/domain.sh -Djboss.domain.base.dir=slave-2 -Djboss.domain.master.address=127.0.0.1`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that everything is up and running, let's move ahead.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your browser and point it to the Admin Console: `http://localhost:9990`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password (`wildfly` and `cookbook.2015` respectively)
    and go to the **Domain** tab. You should see a page similar to the following screenshot:![How
    to do it…](img/3744_03_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Admin Console—domain overview
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, on hovering the mouse over the **Groups** box, the command links will appear
    as follows:![How to do it…](img/3744_03_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Server Group: Start, Stop and Restart'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, hovering on a server-box, the command links will appear as follows:![How
    to do it…](img/3744_03_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start server group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now try hitting the **Stop Group** command link and confirm the operation!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tadaaaa… pretty easy huh! The page updates the server instance icon and displays
    **Operation successful** in the message board:![How to do it…](img/3744_03_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stopping Server Group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the log, you should see entries similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let's restart the server group, by hitting the **Start Group** command link,
    as follows:![How to do it…](img/3744_03_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once restarted, WildFly confirms the successful operation by providing you with
    a message feedback and by updating the status icon associated to the servers belonging
    to the server group, as follows:![How to do it…](img/3744_03_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Sever Group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The entries in the log of `slave-1` are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The same operations apply while stopping and starting a single server instance.
  prefs: []
  type: TYPE_NORMAL
- en: In the `host.xml` file you can define the `auto-start` attribute, the default
    value of which is `true`. Setting it to `false` will not start the server, and
    you will have to start it manually via the Admin Console or via CLI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this regard, let's try the CLI which is more fascinating!
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting your server groups via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start an entire server group using
    the CLI. Since a server can belong to more than one server group, you might want
    to stop or start all the servers at once, and thus stop or start the server group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, refer to the recipe *Connecting the host
    controller to the domain controller* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open your terminal and do as follows:![How to do it…](img/3744_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the command `ls`, you can list the entire context that you walk through.
    What we want to do is to "stop" the entire server group named `server-group-REST-app`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s start the server-group again, by invoking the `start-servers` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the CLI, you have basically remapped the entire configuration, hence, if
    you look at the `domain.xml` or `host.xml` files, you find pretty much the same
    hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: In our recipe we wanted to stop a server group, so if you look at the `domain.xml`
    you can determine the contexts and commands – you can see the available commands
    by hitting the *Tab* key next to `:` or `/`.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping and starting your servers via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop and start a single server that belongs
    to a server group using the CLI. Because servers that belong to a server group
    might be spread over a series of different machines, with different resources
    available, you might need to stop a single server, without stopping the entire
    server group to add more resources and start it up back again. Fortunately, WildFly
    provides such granularity with regards to stop servers.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, refer to the recipe *Connecting the host
    controller to the domain controller* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What we want to do is to "stop" the server named `REST-server-one`, which belongs
    to the `Host Controller` named `slave-1`. This is done as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the server is in the `STOPPING` state; this means it may take
    a while depending on how many resources you have bound and/or deployed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To check if it is done, try the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now let''s start the server again by invoking the `start` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `stop` command itself is pretty easy, and does not need much explanation.
    What is worth mentioning is that to be able to stop a server, you first need to
    know which host/slave it belongs to. What you can do is navigate through WildFly''s
    structure, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you have located the server you want/need to stop, you can issue the `stop`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When dealing with the `stop` and `start` commands, on both `server-group` and
    `server`, you can add the `blocking=true` option which basically hangs the commands
    until it''s done. The command would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In this way we know when the server completes the operation. Imagine a case
    where you are executing multiple CLI commands in sequence, and a command needs
    the previous operations to be carried out. Without the blocking flag enabled,
    the command will not work.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via Web
    Console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy and undeploy an application via
    the Web Console, and assign it to a server group.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and the host controllers should
    be up and running. For their configuration, refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this and the following recipe, we will need an application to test our configuration.
    For this recipe, we will need the application named `example` which you can find
    in my GitHub repository. If you skipped the "*Managing applications using the
    deployments folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your browser and point it to the Admin Console: `http://localhost:9990`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the username and password (`wildfly` and `cookbook.2015` respectively)
    and go to **Deployments**. You should get a page similar to the following screenshot:![How
    to do it…](img/3744_03_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The manage deployments window
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now to deploy an application, we first need to add it by clicking the **Add**
    button and choosing your artifact, as shown in the following image:![How to do
    it…](img/3744_03_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploying the example.war application
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now just follow the wizard instructions. You should end up with your artifact
    deployed, but not assigned to a **SERVER GROUPS**, as shown in the following screenshot:![How
    to do it…](img/3744_03_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Application deployed but not assigned to any server-group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the domain controller''s log you should see a log like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: But you don't see any logs at the `Host Controller` log side. This is because
    we haven't assigned the application to any server group yet. To assign the application
    to a server group, just hit the **Assign** button and choose the server group,
    as shown in the following screenshot:![How to do it…](img/3744_03_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assigning a deployment to a server-group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Save it and the domain controller should spread the deployment to the servers
    that belong to the selected server group, as shown in the following screenshot:![How
    to do it…](img/3744_03_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployment assigned to a server-group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can check it from the host controller''s log, by looking for entries similar
    to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: No more entries will be found on the domain controller side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you need to check which deployments belong to what server group, go to the
    **Deployments** tab, select the **Server Groups** tab and click the appropriate
    **View** command link, as shown in the next screenshot:![How to do it…](img/3744_03_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting a server-group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should see all the successful deployments, as shown in the following screenshot:![How
    to do it…](img/3744_03_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deployments for a specific server-group
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Okay, now it's time to undeploy our application. As the Web Console suggests,
    from the **Deployments** overview you can remove it ( undeploy it in GUI terms)
    by selecting the artifact and clicking the **Remove** button, as shown in the
    next screenshot:![How to do it…](img/3744_03_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Undeploying the artifact
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Confirm your operation as follows:![How to do it…](img/3744_03_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Artifact undeployed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now looking at the logs, you should find the following entries (first the `Domain
    Controller` log followed by the `Host Controller` log):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now let's recap all these things and more in the next recipe using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying and undeploying an application to a specific server group via the
    CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy and undeploy an application using
    the CLI, and assign it to a specific server group. This recipe follows pretty
    much the same operation as executed in the previous recipe, but is specific to
    the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, please refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this and the following recipe, we will need an application to test our configuration.
    For this recipe, we require the application named `example` which you can find
    in my GitHub repository. If you skipped the *Managing applications using the deployments
    folder* recipe in [Chapter 2](ch02.html "Chapter 2. Running WildFly in Standalone
    Mode"), *Running WildFly in Standalone Mode*, please refer to it in order download
    all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Once you build the application, copy it into the `$WILDFLY_HOME` folder for
    convenience.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and connect to the DC as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now just hit *Tab* to see the available commands:![How to do it…](img/3744_03_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is a `deploy` command available, and it is the one we need. Let's deploy
    our artifact to both server groups, `server-group-REST-app` and `server-group-SOAP-app`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the application's path is relative to the path used to access
    the CLI. So in case you are in your user home, the path to specify to the `deploy`
    command would have been `WFC/github/wildfly-cookbook/example/target/example.war`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s check what happened to each server group singularly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you don''t trust the CLI, check what happened to the various logs:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `master` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Slave-1` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Slave-2` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from the logs, our artifact has been deployed to all the declared
    server groups. `Slave-2` has two running instances, each one with its own copy
    of the artifact.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now to undeploy the artifact; it''s as easy as pie:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s check via CLI if we have effectively undeployed our artifact:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Again, check the logs to see what happened:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `master` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Slave-1` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `Slave-2` log is as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Actually, you can deploy the artifact to all the server groups with the following
    directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'There is a shortcut for undeploying too:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: It basically undeploys the artifact from all the server groups that it is assigned
    to.
  prefs: []
  type: TYPE_NORMAL
- en: Checking server status via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to check the status of the server using the
    CLI. Using the standalone, there is no need for such a check, because you wouldn't
    be able to connect to the CLI at all. Thus, in the domain mode, you might need
    to know if a certain server is up or not before doing some operations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, both the domain controller and host controllers should be up
    and running. For their configuration, please refer to the recipe *Connecting the
    host controller to the domain controller* in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open your terminal and connect to the domain controller as usual:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
