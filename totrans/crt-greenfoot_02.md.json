["```java\npublic void setImage(java.lang.String filename)\nthrows java.lang.IllegalArgumentException\n\nSet an image for this actor from an image file. The file may be in jpeg, gif or png format. The file should be located in the project directory.\n\nParameters:\nfilename - The name of the image file.\n```", "```java\n/Applications/Greenfoot 2.3.0/Greenfoot.app/Contents /Resources/Java/greenfoot/imagelib/symbols\n```", "```java\nC:/Program Files/Greenfoot/lib/greenfoot/imagelib/symbols\n```", "```java\npublic void act() {\n  setLocation(getX(), getY() + speed);\n  changeDisposition();\n  checkRemove();\n}\n```", "```java\nprivate int timeToChange = 1;\n```", "```java\nprivate void changeDisposition() {\n  int ypos = getY();\n  int worldHeight = getWorld().getHeight();\n  int marker1 = (int) (worldHeight * 0.5);\n  int marker2 = (int) (worldHeight * 0.75);\n  int marker3 = (int) (worldHeight * 0.90);\n  if( timeToChange == 1 && ypos > marker1) {\n    setImage(\"smiley4.png\");\n    timeToChange++;\n  }\n  else if( timeToChange == 2 && ypos > marker2) {\n    setImage(\"smiley3.png\");\n    timeToChange++;\n  }\n  else if( timeToChange == 3 && ypos > marker3) {\n    setImage(\"smiley5.png\");\n    timeToChange++;\n  }\n}\n```", "```java\nint marker1 = (int) (worldHeight * 0.5)\n```", "```java\npublic Star() {\n  GreenfootImage img = new GreenfootImage(10,10);\n  img.setColor(Color.white);\n  img.fillOval(0,0,10,10);\n  setImage(img);\n}\n```", "```java\nimport java.awt.Color;\n```", "```java\npublic void act() {\n  setLocation(getX(), getY()+1);\n  checkRemove();\n}\n\nprivate void checkRemove() {\n  World w = getWorld();\n  if( getY() > w.getHeight() + 30 ) {\n    w.removeObject(this);\n  }\n}\n```", "```java\npublic void setSpeed( int s) {\n  speed = s;\n}\n```", "```java\nint speed = 1;\n```", "```java\nsetLocation(getX(), getY() + speed);\n```", "```java\npublic void act() {\n  generateEnemies();\n  generateStars();\n  increaseLevel();\n}\n```", "```java\nprivate void generateStars() {\n  if( Greenfoot.getRandomNumber(1000) < 350) {\n    Star s = new Star();\n    addObject( s, Greenfoot.getRandomNumber(getWidth()-20)+10, -1);\n  }\n}\n```", "```java\nprivate void generateStars() {\n  if( Greenfoot.getRandomNumber(1000) < 350) {\n    Star s = new Star();\n    GreenfootImage image = s.getImage();\n    if( Greenfoot.getRandomNumber(1000) < 300) {\n      // this is a close bright star\n      s.setSpeed(3);\n      image.setTransparency(\n      Greenfoot.getRandomNumber(25) + 225);\n      image.scale(4,4);\n    } else {\n      // this is a further dim star\n      s.setSpeed(2);\n      image.setTransparency(\n      Greenfoot.getRandomNumber(50) + 100);\n      image.scale(2,2);\n    }\n    s.setImage(image);\n    addObject( s, Greenfoot.getRandomNumber(\n    getWidth()-20)+10, -1);\n  }\n}\n```", "```java\nsetPaintOrder(Avatar.class, Enemy.class, Counter.class);\n```", "```java\naddObject( s, Greenfoot.getRandomNumber(getWidth()-20)+10, -1);\n```", "```java\nprivate void generateStars() {\n```", "```java\nprivate void generateStars(int yLoc) {\n```", "```java\naddObject( s, Greenfoot.getRandomNumber(getWidth()-20)+10, -1);\n```", "```java\naddObject( s, Greenfoot.getRandomNumber(getWidth()-20)+10, yLoc);\n```", "```java\ngenerateStars(-1);\n```", "```java\nprivate void generateInitialStarField() {\n  for( int i=0; i<getHeight(); i++ ) {\n    generateStars(i);\n  }\n}\n```", "```java\ngenerateInitialStarField();\n```", "```java\nimport greenfoot.*;\n\npublic class AvoiderWorld extends World {\n  private GreenfootSound bkgMusic;\n  private Counter scoreBoard;\n  private int enemySpawnRate = 20;\n  private int enemySpeed = 1;\n  private int nextLevel = 100;\n\n  public AvoiderWorld() {\n    super(600, 400, 1, false);\n    bkgMusic = new GreenfootSound(\"sounds/UFO_T-Balt.mp3\")\n    // Music Credit:\n    //\thttp://www.newgrounds.com/audio/listen/504436 by T-balt\n    bkgMusic.playLoop();\n    setPaintOrder(Avatar.class, Enemy.class, Counter.class);\n    prepare();\n    generateInitialStarField();\n  }\n\n  public void act() {\n    generateEnemies();\n    generateStars(-1);\n    increaseLevel();\n  }\n\n  private void generateEnemies() {\n    if( Greenfoot.getRandomNumber(1000) < enemySpawnRate) {\n      Enemy e = new Enemy();\n      e.setSpeed(enemySpeed);\n      addObject( e, Greenfoot.getRandomNumber(\n      getWidth()-20)+10, -30);\n      scoreBoard.setValue(scoreBoard.getValue() + 1);\n    }\n  }\n\n  private void generateStars(int yLoc) {\n    if( Greenfoot.getRandomNumber(1000) < 350) {\n      Star s = new Star();\n      GreenfootImage image = s.getImage();\n      if( Greenfoot.getRandomNumber(1000) < 300) {\n        // this is a close bright star\n        s.setSpeed(3);\n        image.setTransparency(\n        Greenfoot.getRandomNumber(25) + 225);\n        image.scale(4,4);\n      } else {\n        // this is a further dim star\n        s.setSpeed(2);\n        image.setTransparency(\n        Greenfoot.getRandomNumber(50) + 100);\n        image.scale(2,2);\n      }\n      s.setImage(image);\n      addObject( s, Greenfoot.getRandomNumber(\n      getWidth()-20)+10, yLoc);\n    }\n  }\n\n  private void increaseLevel() {\n    int score = scoreBoard.getValue();\n    if( score > nextLevel ) {\n      enemySpawnRate += 2;\n      enemySpeed++;\n      nextLevel += 100;\n    }\n  }\n\n  public void endGame() {\n    bkgMusic.stop();\n    AvoiderGameOverWorld go = new AvoiderGameOverWorld();\n    Greenfoot.setWorld(go);\n  }\n\n  private void prepare() {\n    Avatar avatar = new Avatar();\n    addObject(avatar, 287, 232);\n    scoreBoard = new Counter(\"Score: \");\n    addObject(scoreBoard, 70, 20);\n  }\n\n  private void generateInitialStarField() {\n    int i = 0;\n    for( i=0; i<getHeight(); i++ ) {\n      generateStars(i);\n    }\n  }\n}\n```", "```java\nprivate int health = 3;\n```", "```java\npublic void act() {\n  followMouse();\n  checkForCollisions();\n}\n```", "```java\nprivate void checkForCollisions() {\n  Actor enemy = getOneIntersectingObject(Enemy.class);\n  if( enemy != null ) {\n    getWorld().removeObject(this);\n    Greenfoot.stop();\n  }\n}\n```", "```java\nprivate void checkForCollisions() {\n  Actor enemy = getOneIntersectingObject(Enemy.class);\n  if( hitDelay == 0 && enemy != null ) {\n    if( health == 0 ) {\n      AvoiderWorld world = (AvoiderWorld) getWorld();\n      world.endGame();\n    }\n    else {\n      health--;\n      setImage(\"skull\" + ++nextImage + \".png\"););\n      hitDelay = 50;\n    }\n  }\n  if( hitDelay > 0 ) hitDelay--;\n}\n```", "```java\nint x = 0, y=0, z=0;\ny = ++x;\nz = x++;\n```", "```java\nprivate int hitDelay = 0;\nprivate int nextImage = 0;\n```", "```java\npublic void act() {\n  setLocation(getX(), getY()+speed);\n  checkRemove();\n  checkTwinkle();\n}\n```", "```java\nint twinkleTime = 0;\nint currentTransparency = 0;\n```", "```java\nprivate void checkTwinkle() {\n  GreenfootImage img = getImage();\n  if( twinkleTime > 0 ) {\n    if( twinkleTime == 1) {\n      img.setTransparency(currentTransparency);\n    }\n    twinkleTime--;\n  } else {\n    if( Greenfoot.getRandomNumber(10000) < 10) {\n      twinkleTime = 10;\n      currentTransparency = img.getTransparency();\n      img.setTransparency(0);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*; \nimport java.awt.Color;\nimport java.util.List;\n\npublic class Eye extends Actor {\n\n  public Eye() {\n    drawEye(2,2);\n  }\n\n  public void act() {\n    lookAtEnemies();\n  }\n\n  public void lookAtEnemies() {\n    List<Enemy> eList = getObjectsInRange(120, Enemy.class);\n    if( !eList.isEmpty() ) {\n      Enemy e = eList.get(0);\n      if( e.getX() < getX() ) {\n        if( e.getY() < getY() ) {\n          drawEye(1,1);\n        } else {\n          drawEye(1,3);\n        }\n      } else {\n        if( e.getY() < getY() ) {\n          drawEye(3,1);\n        } else {\n          drawEye(3,3);\n        }\n      }\n    }\n  }\n\n  private void drawEye(int dx, int dy) {\n    GreenfootImage img = new GreenfootImage(10,10);\n    img.setColor(Color.white);\n    img.fillOval(0,0,10,10);\n    img.setColor(Color.black);\n    img.fillOval(dx,dy,6,6);\n    setImage(img);\n  }\n}\n```", "```java\nprotected java.util.List getObjectsInRange(int radius, java.lang.Class cls)\n```", "```java\nprivate Eye leftEye;\nprivate Eye rightEye;\n```", "```java\nprotected void addedToWorld(World w) {\n  leftEye = new Eye();\n  rightEye = new Eye();\n  w.addObject(leftEye, getX()-10, getY()-8);\n  w.addObject(rightEye, getX()+10, getY()-8);\n}\n```", "```java\nAvatar avatar = new Avatar();\naddObject(avatar, 287, 232);\n```", "```java\nleftEye.setLocation(getX()-10, getY()-8);\nrightEye.setLocation(getX()+10, getY()-8);\n```", "```java\nsetLocation(mi.getX(), mi.getY());\n```", "```java\npublic abstract class SmoothMover extends greenfoot.Actor\n\nA variation of an actor that maintains a precise location (using doubles for the co-ordinates instead of ints). This allows small precise movements (e.g. movements of 1 pixel or less) that do not lose precision.\n```", "```java\nimport greenfoot.*;\n\npublic abstract class PowerItems extends SmoothMover\n{\n  protected double targetX, targetY, expireTime;\n  protected double origX, origY;\n  protected double duration;\n  protected int counter;\n\n  public PowerItems( int tX, int tY, int eT ) {\n    targetX = tX;\n    targetY = tY;\n    expireTime = eT;\n    counter = 0;\n    duration = expireTime;\n  }\n\n  protected void addedToWorld(World w) {\n    origX = getX();\n    origY = getY();\n  }\n\n  public void act() {\n    easing();\n    checkHitAvatar();\n    checkExpire();\n  }\n\n  protected abstract double curveX(double f);\n\n  protected abstract double curveY(double f);\n\n  protected abstract void checkHitAvatar();\n\n  protected void easing() {\n    double fX = ++counter/duration;\n    double fY = counter/duration;\n    fX = curveX(fX);\n    fY = curveY(fY);\n    setLocation((targetX * fX) + (origX * (1-fX)),\n    (targetY * fY) + (origY * (1-fY)));\n  }\n\n  private void checkExpire() {\n    if( expireTime-- < 0 ) {\n      World w = getWorld();\n      if( w != null ) w.removeObject(this);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Cupcake extends PowerItems\n{  \n  public Cupcake( int tX, int tY, int eT) {\n    super(tX, tY, eT);\n  }\n\n  protected double curveX(double f) {\n    return f;\n  }\n\n  protected double curveY(double f) {\n    return f;\n  }\n\n  protected void checkHitAvatar() {\n    Avatar a = (Avatar) getOneIntersectingObject(Avatar.class);\n    if( a != null ) {\n      a.stun();\n      getWorld().removeObject(this);\n    }\n  }\n}\n```", "```java\ndouble fX = ++counter/duration; // counter is incremented to 1 \ndouble fy= counter/duration;  // counter remains 1\n```", "```java\nimport greenfoot.*;\n\npublic class Rock extends PowerItems\n{\n\n  public Rock( int tX, int tY, int eT ) {\n    super(tX, tY, eT);\n  }\n\n  protected double curveX(double f) {\n    return f; \n}\n\n  protected double curveY(double f) {\n    return f * f * f; \n}\n\n  protected void checkHitAvatar() {\n    Avatar a = (Avatar) getOneIntersectingObject(Avatar.class);\n    if( a != null ) {\n      a.addHealth();\n      getWorld().removeObject(this);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.lang.Math;\n\npublic class Clover extends PowerItems\n{\n  public Clover(int tX, int tY, int eT) {\n    super(tX, tY, eT);\n  }\n\n  protected double curveX(double f) {\n    return f;\n  }\n\n  protected double curveY(double f) {\n    return Math.sin(4*f);\n  }\n\n  protected void checkHitAvatar() {\n    Avatar a = (Avatar)\n    getOneIntersectingObject(Avatar.class);\n    if( a != null ) {\n      a.lagControls();\n      getWorld().removeObject(this);\n    }\n  }\n}\n```", "```java\nprivate void followMouse() {\n  MouseInfo mi = Greenfoot.getMouseInfo();\n  if( stunDelay < 0 ) {\n    if( mi != null ) {\n      setLocation(mi.getX(), mi.getY());\n      leftEye.setLocation(getX()-10, getY()-8);\n      rightEye.setLocation(getX()+10, getY()-8);\n    }\n  } else {\n    stunDelay--;\n  }\n}\n```", "```java\nprivate int stunDelay = -1;\n```", "```java\npublic void stun() {\n  stunDelay = 50;\n}\n```", "```java\nprivate void followMouse() {\n  MouseInfo mi = Greenfoot.getMouseInfo();\n  if( stunDelay < 0 ) {\n    if( mi != null ) {\n      if( lagDelay > 0 ) {\n        int stepX = (mi.getX() - getX())/40;\n        int stepY = (mi.getY() - getY())/40;\n        setLocation(stepX + getX(), stepY + getY());\n        --lagDelay;\n      } else {\n        setLocation(mi.getX(), mi.getY());\n      }\n      leftEye.setLocation(getX()-10, getY()-8);\n      rightEye.setLocation(getX()+10, getY()-8);\n    }\n  } else {\n    stunDelay--;\n  }\n}\n```", "```java\nprivate int lagDelay = -1;\n```", "```java\npublic void lagControls() {\n  lagDelay = 150;\n}\n```", "```java\npublic void addHealth() {\n  if( health < 3 ) {\n    health++;\n    if( --nextImage == 0 ) {\n      setImage(\"skull.png\");\n    } else {\n      setImage(\"skull\" + nextImage + \".png\");\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\npublic class Avatar extends Actor {\n  private int health = 3;\n  private int hitDelay = 0;\n  private int stunDelay = -1;\n  private int lagDelay = -1;\n  private int nextImage = 0;\n  private Eye leftEye;\n  private Eye rightEye;\n\n  protected void addedToWorld(World w) {\n    leftEye = new Eye();\n    rightEye = new Eye();\n    w.addObject(leftEye, getX()-10, getY()-8);\n    w.addObject(rightEye, getX()+10, getY()-8);\n  }\n\n  public void act() {\n    followMouse();\n    checkForCollisions();\n  }\n\n  public void addHealth() {\n    if( health < 3 ) {\n      health++;\n      if( --nextImage == 0 ) {\n        setImage(\"skull.png\");\n      } else {\n        setImage(\"skull\" + nextImage + \".png\");\n      }\n    }\n  }\n\n  public void lagControls() {\n    lagDelay = 150;\n  }\n\n  public void stun() {\n    stunDelay = 50;\n  }\n\n  private void checkForCollisions() {\n    Actor enemy = getOneIntersectingObject(Enemy.class);\n    if( hitDelay == 0 && enemy != null ) {\n      if( health == 0 ) {\n        AvoiderWorld world = (AvoiderWorld) getWorld();\n        world.endGame();\n      }\n      else {\n        health--;\n        setImage(\"skull\" + ++nextImage + \".png\");\n        hitDelay = 50;\n      }\n    }\n    if( hitDelay > 0 ) hitDelay--;\n  }\n\n  private void followMouse() {\n    MouseInfo mi = Greenfoot.getMouseInfo();\n    if( stunDelay < 0 ) {\n      if( mi != null ) {\n        if( lagDelay > 0 ) {\n          int stepX = (mi.getX() - getX())/40;\n          int stepY = (mi.getY() - getY())/40;\n          setLocation(stepX + getX(), stepY + getY());\n          --lagDelay;\n        } else {\n          setLocation(mi.getX(), mi.getY());\n        }\n        leftEye.setLocation(getX()-10, getY()-8);\n        rightEye.setLocation(getX()+10, getY()-8);\n      }\n    } else {\n      stunDelay--;\n    }\n  }\n}\n```", "```java\nprivate int cupcakeFrequency = 10;\nprivate int cloverFrequency = 10;\nprivate int rockFrequency = 1;\n```", "```java\nprivate void increaseLevel() {\n  int score = scoreBoard.getValue();\n\n  if( score > nextLevel ) {\n    enemySpawnRate += 3;\n    enemySpeed++;\n    cupcakeFrequency += 3;\n    cloverFrequency += 3;\n    rockFrequency += 2;\n    nextLevel += 50;\n  }\n}\n```", "```java\ngeneratePowerItems();\n```", "```java\nprivate void generatePowerItems() {\n  generatePowerItem(0, cupcakeFrequency); // new Cupcake\n  generatePowerItem(1, cloverFrequency); // new Clover\n  generatePowerItem(2, rockFrequency); // new Health\n}\n```", "```java\nprivate void generatePowerItem(int type, int freq) {\n  if( Greenfoot.getRandomNumber(1000) < freq ) {\n    int targetX = Greenfoot.getRandomNumber(\n    getWidth() -80) + 40;\n    int targetY = Greenfoot.getRandomNumber(\n    getHeight()/2) + 20;\n    Actor a = createPowerItem(type, targetX, targetY, 100);\n    if( Greenfoot.getRandomNumber(100) < 50) {\n      addObject(a, getWidth() + 20,\n      Greenfoot.getRandomNumber(getHeight()/2) + 30);\n    } else {\n      addObject(a, -20,\n      Greenfoot.getRandomNumber(getHeight()/2) + 30);\n    }\n  }\n}\n```", "```java\nprivate Actor createPowerItem(int type, int targetX, int targetY, int expireTime) {\n  switch(type) {\n    case 0: return new Cupcake(targetX, targetY,\n    expireTime);\n    case 1: return new Clover(targetX, targetY,\n    expireTime);\n    case 2: return new Rock(targetX, targetY,\n    expireTime);\n  }\n  return null;\n}\n```"]