["```java\ngit clone git@github.com:AdoptOpenJDK/jitwatch.git\ncd jitwatch\nmvn clean install -DskipTests=true\n./launchUI.sh\n```", "```java\npublic class OSRTest {\n    public static void main(String[] args) {\n        int total = 0;\n        //long running loop\n        for(int i=0; i < 10000000; i++) {\n\n            //Perform some function\n            total++;\n        }\n        System.out.println(\"Total number of times is \"+ total);\n    }\n}\n```", "```java\n<Timestamp> <CompilationID> <Flag> <Tier> <ClassName::MethodName> <MethodSize> <DeOptimization Performed if any>\n```", "```java\n    -XX:PrintCompilation logs the compilation process to the console. This helps in understanding how the compiler is working.\n    ```", "```java\npublic class Sample {\n    public static void main(String[] args) {\n        Sample samp = new Sample();\n        while (true) {\n        for(int i=0; i<1000000; i++) {\n            samp.performOperation();\n        }\n    }\n}\n    public void performOperation() {\n        int sum = 0;\n        int x = 100;\n        performAnotherOperation();\n    }\n    public void performAnotherOperation() {\n        int a = 100;\n        int b = 200;\n        for(int i=0; i<1000000; i++) {\n            int x = a + b;\n            int y = (24*25) + x;\n            int z = (24*25) + x;\n        }\n    }\n}\n```", "```java\nJITWatch Tiered Compiliation for Sample::main() method\n```", "```java\njava -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+PrintInlining Sample\n```", "```java\npublic static void main(String[] args) {\n        Sample samp = new Sample();\n        while (true) {\n        for(int i=0; i<1000000; i++) {\n            samp.performOperation();\n        }\n    }\n```", "```java\npublic interface Shape {\n    String whichShapeAreYou();\n}\npublic class Circle implements Shape {\n    public String whichShapeAreYou() { return \"I am Circle\";} \n}\npublic class Square implements Shape {\n    public String whichShapeAreYou() { return \"I am Square\";} \n}\npublic class Triangle implements Shape {\n    public String whichShapeAreYou() { return \"I am Triangle\";} \n}\npublic static void main(String[] args) {\n    //Some code and logic here\n    switch (circleType) {\n        case 0:\n            shape = new Circle();\n            break;\n        case 1:\n            shape = new Square();\n            break;\n        case 2:\n            shape = new Triangle();\n            break;\n        default:\n            System.out.println(\"Invalid shape\");\n            break;\n    }\n}\n```", "```java\n/**\n * DeadCodeElimination\n */\npublic class DeadCodeElimination {\n    public void calculateSomething() {\n        int[] arrayOfValues = new int[1000000];\n\n        int finalTotalValue = 0;\n\n        for (int i=0; i< arrayOfValues.length; i++) {\n            finalTotalValue = calculateValue(arrayOfValues[i]);\n        }\n  //\"Do some more activity here, but never use final Total            count\");\n    }\n\n    public int calculateValue(int value) {\n        //use some formula to calucalte the value\n        return value * value;\n    }\n    public static void main(String[] args) {\n        DeadCodeElimination obj = new DeadCodeElimination();\n        for (int i=0; i< 10000; i++) {\n            obj.calculateSomething();\n        }\n    }\n\n}\n```", "```java\nfor (int i=0; i< arrayOfValues.size; i++) {\n    somefunction(arrayOfValues[i]);\n}\n```", "```java\nfor (int i=0; i< arrayOfValues.size; i+=4) {\n    somefunction (arrayOfValues[i]);\n    somefunction (arrayOfValues[i+1]);\n    somefunction (arrayOfValues[i+2]);\n    somefunction (arrayOfValues[i+3]);\n}\n```", "```java\npublic class LockCoarsening {\n    public static void main(String[] args) {\n        synchronized (Class1.class) {\n            ....\n        }\n        synchronized (Class1.class) {\n            ....\n        }\n        synchronized (Class2.class) {\n            ....\n        }\n    }\n}\n```", "```java\n class StateStoring {\n    final int state_variable_1;\n    final int state_variable_2;\n    public StateStoring(int val1, int val2) {\n        this.state_variable_1 = val1;\n        this.state_variable_2 = val2;\n    }\n }\n```", "```java\npublic class EscapeAnalysis2 {\n    public void createNumberofObjects     (int numberOfArraysToCreate, int numberOfCellsInArray) {\n        for (int i=0; i< numberOfArraysToCreate; i++) {\n            allocateObjects(numberOfCellsInArray);\n        }\n    }\n    private void allocateObjects(int numberOfCellsInArray) {\n\n        int[] arrayObj = new int[numberOfCellsInArray];\n        for (int i=0; i< numberOfCellsInArray; i++) {\n        //Heap allocation, which could have been easily a local               stack allocation\n            Integer dummyInt = new Integer(i);\n            arrayObj[i] = dummyInt.intValue();\n        }\n        return;\n    }\n    public static void main(String[] args) {\n        EscapeAnalysis2 obj = new EscapeAnalysis2();\n        obj.createNumberofObjects(100000, 10);\n    }\n\n}\n```", "```java\n-XX:+UnlockExperimentalVMOptions \n-XX:+EnableJVMCI \n-XX:+UseJVMCICompiler \n-Djvmci.Compiler=<name of compiler>\n```"]