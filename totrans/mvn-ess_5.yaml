- en: Chapter 5. Build Lifecycles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Maven build lifecycle consists of a set of well-defined phases. Each phase
    groups a set of goals defined by Maven plugins, and the lifecycle defines the
    order of execution. A Maven plugin is a collection of goals where each goal is
    responsible for performing a specific action. We discussed Maven plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, the following topics will be covered:'
  prefs: []
  type: TYPE_NORMAL
- en: Standard lifecycles in Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lifecycle bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building custom lifecycle extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure shows the relationship between Maven plugin goals and
    lifecycle phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Build Lifecycles](img/B02157_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take the simplest Maven build command that every Java developer is familiar
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What will this do? As a developer, how many times have you executed the previous
    command? Have you ever thought of what happens inside? If not, it's time to explore
    it now.
  prefs: []
  type: TYPE_NORMAL
- en: Standard lifecycles in Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Maven comes with three standard lifecycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each lifecycle defines its own set of phases.
  prefs: []
  type: TYPE_NORMAL
- en: The clean lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `clean` lifecycle defines three phases: `pre-clean`, `clean`, and `post-clean`.
    A phase in a lifecycle is just an ordered placeholder in the build execution path.
    For example, the `clean` phase in the `clean` lifecycle cannot do anything on
    its own. In the Maven architecture, it has two key elements: nouns and verbs.
    Both nouns and verbs, which are related to a given project, are defined in the
    POM file. The name of the project, the name of the parent project, the dependencies,
    and the type of packaging are nouns. Plugins bring verbs into the Maven build
    system, and they define what needs to be done during the build execution via its
    goals. A plugin is a group of goals. Each goal of a plugin can be executed on
    its own or can be registered as part of a phase in a Maven build lifecycle.'
  prefs: []
  type: TYPE_NORMAL
- en: When you type `mvn clean`, it executes all the phases defined in the `clean`
    lifecycle up to and including the `clean` phase. Don't be confused; in this command,
    `clean` is not the name of the lifecycle it's the name of a phase. It's only a
    coincidence that the name of the phase happens to be the name of the lifecycle.
    In Maven, you cannot simply execute a lifecycle by its name—it has to be the name
    of a phase. Maven will find the corresponding lifecycle and will execute all phases
    in it up to the given phase (including that phase).
  prefs: []
  type: TYPE_NORMAL
- en: 'When you type `mvn clean`, it cleans out project''s working directory (by default,
    it''s the `target` directory). This is done via the Maven `clean` plugin. To find
    more details about the Maven `clean` plugin, type the following command. It describes
    all the goals defined inside the `clean` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Everything in Maven is a plugin. Even the command we executed previously to
    get goal details of the `clean` plugin executes another plugin—the `help` plugin.
    The following command will describe the `help` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`describe` is a goal defined inside the `help` plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clean` plugin has two goals defined in it: `clean` and `help`. As mentioned
    previously, each goal of a plugin can be executed on its own or can be registered
    as part of a phase in a Maven build lifecycle. The `clean` goal of the `clean`
    plugin can be executed on its own with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the relationship between the Maven `clean` plugin
    goals and the `clean` lifecycle phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The clean lifecycle](img/B02157_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first instance of the `clean` word in the previous command is the prefix
    of the `clean` plugin, while the second one is the name of the goal. When you
    type `mvn clean`, it's the same `clean` goal that gets executed. However, this
    time, it gets executed through the `clean` phase of the `clean` lifecycle, and
    it also executes all the phases in the corresponding lifecycle up to, and including,
    the `clean` phase—not just the `clean` phase. The `clean` goal of the `clean`
    plugin is configured by default to get executed during the `clean` phase of the
    `clean` lifecycle. The plugin goal to lifecycle phase mapping can be provided
    through the application POM file; if not, it will be inherited from the super
    POM file. The super POM file, which defines the `clean` plugin by default, adds
    the plugin to the `clean` phase of the `clean` lifecycle. You cannot define a
    phase with the same name in two different lifecycles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet shows how the `clean` goal of the Maven `clean`
    plugin is associated with the `clean` phase of the `clean` lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `pre-clean` and `post-clean` phases of the `clean` lifecycle do not have
    any plugin bindings. The objective of the `pre-clean` phase is to perform any
    operations prior to the cleaning task and the objective of the `post-clean` phase
    is to perform any operations after the cleaning task. If you need to associate
    any plugins with these two phases, you simply need to add them to the corresponding
    plugin configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The default lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `default` lifecycle in Maven defines 23 phases. When you run the `mvn clean
    install` command, it will execute all the phases from the `default` lifecycle
    up to, and including, the `install` phase. To be precise, Maven will first execute
    all the phases in the `clean` lifecycle up to, and including, the `clean` phase,
    and it will then execute the `default` lifecycle up to, and including, the `install`
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The phases in the `default` lifecycle do not have any associated plugin goals.
    The plugin bindings for each phase are defined by the corresponding packaging
    (that is, `jar` or `war`). If the type of packaging of your Maven project is `jar`,
    then it will define its own set of plugins for each phase. If the packaging type
    is `war`, then it will have its own set of plugins. The following points summarize
    all the phases defined under the `default` lifecycle in their order of execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '`validate`: This phase validates the project POM file and ensures that all
    the necessary information related to carrying out the build is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`initialize`: This phase initializes the build by setting up the right directory
    structure and initializing properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-sources`: This phase generates any required source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-sources`: This phase processes the generated source code; for example,
    there can be a plugin running in this phase to filter the source code based on
    some defined criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-resources`: This phase generates any resources that need to be packaged
    with the final artifact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-resources`: This phase processes the generated resources. It copies
    the resources to their destination directories and makes them ready for packaging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile`: This phase compiles the source code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-classes`: This phase can be used to carry out any bytecode enhancements
    after the `compile` phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-test-sources`: This phase generates the required source code for
    tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-test-sources`: This phase processes the generated test source code;
    for example, there can be a plugin running in this phase to filter the source
    code based on some defined criteria.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generate-test-resources`: This phase generates all the resources required
    to run tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-test-resources`: This phase processes the generated test resources.
    It copies the resources to their destination directories and makes them ready
    for testing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test-compile`: This phase compiles the source code for tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-test-classes`: This phase can be used to carry out any bytecode enhancements
    after the `test-compile` phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This phase executes tests using the appropriate unit test framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prepare-package`: This phase is useful in organizing the artifacts to be packaged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: This phase packs the artifacts into a distributable format, for
    example, JAR or WAR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pre-integration-test`: This phase performs the actions required (if any) before
    running integration tests. This may be used to start any external application
    servers and deploy the artifacts into different test environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integration-test`: This phase runs integration tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post-integration-test`: This phase can be used to perform any cleanup tasks
    after running the integration tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verify`: This phase verifies the validity of the package. The criteria to
    check the validity needs to be defined by the respective plugins.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: This phase installs the final artifact in the local repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploy`: This phase deploys the final artifact to a remote repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The packaging type of a given Maven project is defined under the `<packaging>`
    element in the `pom.xml` file. If the element is omitted, then Maven assumes it
    as a `jar` packaging.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows all the phases defined under the Maven `default`
    lifecycle and their order of execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The default lifecycle](img/B02157_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about Maven lifecycles can be found at [http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html](http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at a concrete example. Run the following command against
    a Maven project having the `jar` packaging:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not have such a project, you can download a sample Maven project from
    [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are using the Maven `help` plugin to find more details about the `deploy`
    phase corresponding to the `jar` packaging, and it will produce the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output lists out all the Maven plugins registered against different phases
    of the `default` lifecycle for the `jar` packaging. The `jar` goal of `maven-jar-plugin`
    is registered against the `package` phase, while the `install` goal of `maven-install-plugin`
    is registered in the `install` phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the previous command against a POM file having the `war` packaging.
    It produces the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you look at the `package` phase, you will notice that we have a different
    plugin goal: the `war` goal of `maven-war-plugin`.'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the `jar` and `war` packaging, each of the other packaging type defines
    its own binding for the `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: The site lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `site` lifecycle is defined with four phases: `pre-site`, `site`, `post-site`,
    and `site-deploy`. The `site` lifecycle has no value without the Maven `site`
    plugin. The `site` plugin is used to generate static HTML content for a project.
    The generated HTML content will also include appropriate reports corresponding
    to the project. The `site` plugin defines eight goals, and two of them are directly
    associated with the phases in the `site` lifecycle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the following command against a POM file to describe the site goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the following output, the `site` goal of the `site` plugin is associated
    with the `site` phase, while the `deploy` goal of the `site` plugin is associated
    with the `site-deploy` phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The following figure shows the relationship between the Maven `site` plugin
    goals and the `site` lifecycle phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The site lifecycle](img/B02157_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Lifecycle bindings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Under the discussion of the `default` lifecycle, we briefly touched upon the
    concept of lifecycle bindings. The `default` lifecycle is defined without any
    associated lifecycle bindings, while both the `clean` and `site` lifecycles are
    defined with bindings. The standard Maven lifecycles and their associated bindings
    are defined under the file `META-INF/plex/components.xml` of `MAVEN_HOME/lib/maven-core-3.3.3.jar`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the configuration for the `default` lifecycle without any associated
    plugin bindings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `components.xml` file, which is also known as the **component descriptor**,
    describes the properties required by Maven to manage the lifecycle of a Maven
    project. The `role` element specifies the Java interface exposed by this lifecycle
    component and defines the type of the component. All the lifecycle components
    must have `org.apache.maven.lifecycle.Lifecycle` as the role. The `implementation`
    tag specifies the concrete implementation of the interface. The identity of a
    component is defined by the combination of the role and the `role-hint` elements.
    The `role-hint` element is not a mandatory element; however, if we have multiple
    elements of the same type, then we must define a `role-hint` element. Corresponding
    to Maven lifecycles, the name of the lifecycle is set as the value of the `role-hint`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maven uses `components.xml` to define more other components than Maven lifecycles.
    Based on the type of the component, the value of the `role` element is set.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clean` lifecycle is defined with an associated plugin binding to the `clean`
    goal of `maven-clean-plugin`. The plugin binding is defined under the element
    `default-phases`. The configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `site` lifecycle is defined with associated plugin bindings to the `site`
    and `site-deploy` goals of `maven-site-plugin`. The plugin bindings are defined
    under the `default-phases` element, with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s take a look at how the `jar` plugin binding for the `default`
    lifecycle is defined. The following `component` element defines a plugin binding
    to an existing lifecycle. The associated lifecycle is defined under the `configuration/lifecycles/lifecycle/id`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Lifecycle extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The lifecycle extensions in Maven allow you to customize the standard build
    behavior. Let''s take a look at the `org.apache.maven.AbstractMavenLifecycleParticipant`
    class. A custom lifecycle extension should extend from the `AbstractMavenLifecycleParticipant`
    class, which provides the following three methods that you can override:'
  prefs: []
  type: TYPE_NORMAL
- en: '`afterProjectsRead(MavenSession session)`: This method is invoked after all
    the Maven project instances have been created. There will be one project instance
    for each POM file. In a large-scale build system, you have one parent POM and
    it points to multiple child POM files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`afterSessionEnd(MavenSession session)`: This method is invoked after all Maven
    projects are built.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`afterSessionStart(MavenSession session)`: This method is invoked after the
    `MavenSession` instance is created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s try out the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous code can be built with the following application POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, in the POM file, we use the `plexus-component-metadata` plugin to generate
    the Plexus descriptor from the source tags and class annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the extension project is built successfully with `mvn clean install`,
    we need to incorporate the extension to other Maven builds. You can do it in two
    ways; one is by adding it to the project POM as an extension, as shown in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can build the sample project with `mvn clean install`. It will produce
    the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you want to execute this extension for all your Maven projects without changing
    each and every POM file, then you need to add the lifecycle extension JAR file
    to `MAVEN_HOME/lib/ext`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The complete source code corresponding to the lifecycle extension project can
    be downloaded from [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on Maven lifecycles and explained how the three
    standard lifecycles work and how we can customize them. Later in the chapter,
    we discussed how to develop our own lifecycle extensions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss how to build Maven assemblies.
  prefs: []
  type: TYPE_NORMAL
