- en: Chapter 5. Build Lifecycles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。构建生命周期
- en: A Maven build lifecycle consists of a set of well-defined phases. Each phase
    groups a set of goals defined by Maven plugins, and the lifecycle defines the
    order of execution. A Maven plugin is a collection of goals where each goal is
    responsible for performing a specific action. We discussed Maven plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 构建生命周期由一系列定义良好的阶段组成。每个阶段由 Maven 插件定义的一组目标组成，生命周期定义了执行顺序。Maven 插件是一组目标，其中每个目标都负责执行特定的操作。我们在第
    4 章“Maven 插件”中详细讨论了 Maven 插件。[第 4 章](ch04.html "第 4 章。Maven 插件")。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，将涵盖以下主题：
- en: Standard lifecycles in Maven
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 中的标准生命周期
- en: Lifecycle bindings
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生命周期绑定
- en: Building custom lifecycle extensions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义生命周期扩展
- en: 'The following figure shows the relationship between Maven plugin goals and
    lifecycle phases:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 Maven 插件目标和生命周期阶段之间的关系：
- en: '![Build Lifecycles](img/B02157_05_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![构建生命周期](img/B02157_05_01.jpg)'
- en: 'Let''s take the simplest Maven build command that every Java developer is familiar
    with:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下每个 Java 开发者都熟悉的简单 Maven 构建命令：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: What will this do? As a developer, how many times have you executed the previous
    command? Have you ever thought of what happens inside? If not, it's time to explore
    it now.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这会做什么？作为一个开发者，你执行过这个命令多少次？你是否想过它内部发生了什么？如果没有，现在是时候探索它了。
- en: Standard lifecycles in Maven
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 中的标准生命周期
- en: 'Maven comes with three standard lifecycles:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 随带三个标准生命周期：
- en: '`clean`'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`'
- en: '`default`'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default`'
- en: '`site`'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site`'
- en: Each lifecycle defines its own set of phases.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 每个生命周期定义了自己的阶段集。
- en: The clean lifecycle
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清洁生命周期
- en: 'The `clean` lifecycle defines three phases: `pre-clean`, `clean`, and `post-clean`.
    A phase in a lifecycle is just an ordered placeholder in the build execution path.
    For example, the `clean` phase in the `clean` lifecycle cannot do anything on
    its own. In the Maven architecture, it has two key elements: nouns and verbs.
    Both nouns and verbs, which are related to a given project, are defined in the
    POM file. The name of the project, the name of the parent project, the dependencies,
    and the type of packaging are nouns. Plugins bring verbs into the Maven build
    system, and they define what needs to be done during the build execution via its
    goals. A plugin is a group of goals. Each goal of a plugin can be executed on
    its own or can be registered as part of a phase in a Maven build lifecycle.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean` 生命周期定义了三个阶段：`pre-clean`、`clean` 和 `post-clean`。生命周期中的一个阶段只是构建执行路径中的一个有序占位符。例如，`clean`
    生命周期中的 `clean` 阶段本身不能做任何事情。在 Maven 架构中，它有两个关键元素：名词和动词。与特定项目相关的名词和动词都在 POM 文件中定义。项目的名称、父项目的名称、依赖项和打包类型都是名词。插件将动词引入
    Maven 构建系统，并通过其目标定义在构建执行期间需要执行的操作。一个插件是一组目标。插件中的每个目标都可以单独执行，也可以注册为 Maven 构建生命周期中某个阶段的一部分。'
- en: When you type `mvn clean`, it executes all the phases defined in the `clean`
    lifecycle up to and including the `clean` phase. Don't be confused; in this command,
    `clean` is not the name of the lifecycle it's the name of a phase. It's only a
    coincidence that the name of the phase happens to be the name of the lifecycle.
    In Maven, you cannot simply execute a lifecycle by its name—it has to be the name
    of a phase. Maven will find the corresponding lifecycle and will execute all phases
    in it up to the given phase (including that phase).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入 `mvn clean` 时，它会执行 `clean` 生命周期中定义的所有阶段，包括 `clean` 阶段。不要混淆；在这个命令中，`clean`
    不是生命周期的名称，而是阶段的名称。它只是一个巧合，阶段的名字恰好与生命周期的名字相同。在 Maven 中，你不能简单地通过名称执行生命周期——它必须是阶段的名称。Maven
    将找到相应的生命周期，并将执行其中直到给定阶段的所有阶段（包括该阶段）。
- en: 'When you type `mvn clean`, it cleans out project''s working directory (by default,
    it''s the `target` directory). This is done via the Maven `clean` plugin. To find
    more details about the Maven `clean` plugin, type the following command. It describes
    all the goals defined inside the `clean` plugin:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入 `mvn clean` 时，它会清理项目的工作目录（默认情况下，它是 `target` 目录）。这是通过 Maven 的 `clean` 插件完成的。要了解更多关于
    Maven `clean` 插件的信息，请输入以下命令。它描述了 `clean` 插件内部定义的所有目标：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Everything in Maven is a plugin. Even the command we executed previously to
    get goal details of the `clean` plugin executes another plugin—the `help` plugin.
    The following command will describe the `help` plugin:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 中的每件事都是一个插件。甚至我们之前执行以获取 `clean` 插件目标详情的命令也执行了另一个插件——`help` 插件。以下命令将描述
    `help` 插件：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`describe` is a goal defined inside the `help` plugin.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe` 是在 `help` 插件内部定义的目标。'
- en: 'The `clean` plugin has two goals defined in it: `clean` and `help`. As mentioned
    previously, each goal of a plugin can be executed on its own or can be registered
    as part of a phase in a Maven build lifecycle. The `clean` goal of the `clean`
    plugin can be executed on its own with the following command:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean` 插件中定义了两个目标：`clean` 和 `help`。如前所述，插件中的每个目标都可以单独执行，也可以注册为 Maven 构建生命周期中某个阶段的组成部分。`clean`
    插件的 `clean` 目标可以单独使用以下命令执行：'
- en: '[PRE3]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following figure shows the relationship between the Maven `clean` plugin
    goals and the `clean` lifecycle phases:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 Maven `clean` 插件目标与 `clean` 生命周期阶段之间的关系：
- en: '![The clean lifecycle](img/B02157_05_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![clean 生命周期](img/B02157_05_02.jpg)'
- en: The first instance of the `clean` word in the previous command is the prefix
    of the `clean` plugin, while the second one is the name of the goal. When you
    type `mvn clean`, it's the same `clean` goal that gets executed. However, this
    time, it gets executed through the `clean` phase of the `clean` lifecycle, and
    it also executes all the phases in the corresponding lifecycle up to, and including,
    the `clean` phase—not just the `clean` phase. The `clean` goal of the `clean`
    plugin is configured by default to get executed during the `clean` phase of the
    `clean` lifecycle. The plugin goal to lifecycle phase mapping can be provided
    through the application POM file; if not, it will be inherited from the super
    POM file. The super POM file, which defines the `clean` plugin by default, adds
    the plugin to the `clean` phase of the `clean` lifecycle. You cannot define a
    phase with the same name in two different lifecycles.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中 `clean` 这个词的第一个实例是 `clean` 插件的限定符，而第二个实例是目标名称。当您输入 `mvn clean` 时，执行的是相同的
    `clean` 目标。然而，这次它是通过 `clean` 生命周期的 `clean` 阶段执行的，并且它还会执行相应生命周期中直到并包括 `clean` 阶段的所有阶段——不仅仅是
    `clean` 阶段。`clean` 插件的 `clean` 目标默认配置为在 `clean` 生命周期的 `clean` 阶段执行。可以通过应用程序 POM
    文件提供插件目标到生命周期阶段的映射；如果没有提供，它将继承自父 POM 文件。默认定义 `clean` 插件的父 POM 文件将该插件添加到 `clean`
    生命周期的 `clean` 阶段。您不能在不同的生命周期中定义具有相同名称的阶段。
- en: 'The following code snippet shows how the `clean` goal of the Maven `clean`
    plugin is associated with the `clean` phase of the `clean` lifecycle:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了 Maven `clean` 插件的 `clean` 目标是如何与 `clean` 生命周期阶段的 `clean` 阶段关联的：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `pre-clean` and `post-clean` phases of the `clean` lifecycle do not have
    any plugin bindings. The objective of the `pre-clean` phase is to perform any
    operations prior to the cleaning task and the objective of the `post-clean` phase
    is to perform any operations after the cleaning task. If you need to associate
    any plugins with these two phases, you simply need to add them to the corresponding
    plugin configuration.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean` 生命周期的 `pre-clean` 和 `post-clean` 阶段没有任何插件绑定。`pre-clean` 阶段的目标是在清理任务之前执行任何操作，而
    `post-clean` 阶段的目标是在清理任务之后执行任何操作。如果您需要将任何插件与这两个阶段关联，只需将它们添加到相应的插件配置中。'
- en: The default lifecycle
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认生命周期
- en: The `default` lifecycle in Maven defines 23 phases. When you run the `mvn clean
    install` command, it will execute all the phases from the `default` lifecycle
    up to, and including, the `install` phase. To be precise, Maven will first execute
    all the phases in the `clean` lifecycle up to, and including, the `clean` phase,
    and it will then execute the `default` lifecycle up to, and including, the `install`
    phase.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的 `default` 生命周期定义了 23 个阶段。当您运行 `mvn clean install` 命令时，它将执行 `default`
    生命周期中直到并包括 `install` 阶段的所有阶段。更准确地说，Maven 首先执行 `clean` 生命周期中直到并包括 `clean` 阶段的所有阶段，然后执行
    `default` 生命周期中直到并包括 `install` 阶段。
- en: 'The phases in the `default` lifecycle do not have any associated plugin goals.
    The plugin bindings for each phase are defined by the corresponding packaging
    (that is, `jar` or `war`). If the type of packaging of your Maven project is `jar`,
    then it will define its own set of plugins for each phase. If the packaging type
    is `war`, then it will have its own set of plugins. The following points summarize
    all the phases defined under the `default` lifecycle in their order of execution:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`default` 生命周期中的阶段没有关联的插件目标。每个阶段的插件绑定由相应的打包类型（即 `jar` 或 `war`）定义。如果您的 Maven
    项目的打包类型是 `jar`，那么它将为每个阶段定义自己的插件集。如果打包类型是 `war`，那么它将有自己的插件集。以下要点总结了在 `default`
    生命周期下按执行顺序定义的所有阶段：'
- en: '`validate`: This phase validates the project POM file and ensures that all
    the necessary information related to carrying out the build is available.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate`：此阶段验证项目 POM 文件，并确保执行构建所需的所有相关信息都可用。'
- en: '`initialize`: This phase initializes the build by setting up the right directory
    structure and initializing properties.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`initialize`：此阶段通过设置正确的目录结构和初始化属性来初始化构建。'
- en: '`generate-sources`: This phase generates any required source code.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-sources`：此阶段生成所需的任何源代码。'
- en: '`process-sources`: This phase processes the generated source code; for example,
    there can be a plugin running in this phase to filter the source code based on
    some defined criteria.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-sources`：此阶段处理生成的源代码；例如，在这个阶段可以运行一个插件，根据一些定义的准则过滤源代码。'
- en: '`generate-resources`: This phase generates any resources that need to be packaged
    with the final artifact.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-resources`：此阶段生成需要与最终工件一起打包的任何资源。'
- en: '`process-resources`: This phase processes the generated resources. It copies
    the resources to their destination directories and makes them ready for packaging.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-resources`：此阶段处理生成的资源。它将资源复制到目标目录，并使它们准备好进行打包。'
- en: '`compile`: This phase compiles the source code.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`：此阶段编译源代码。'
- en: '`process-classes`: This phase can be used to carry out any bytecode enhancements
    after the `compile` phase.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-classes`：此阶段可以在`compile`阶段之后执行任何字节码增强。'
- en: '`generate-test-sources`: This phase generates the required source code for
    tests.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-test-sources`：此阶段生成测试所需的源代码。'
- en: '`process-test-sources`: This phase processes the generated test source code;
    for example, there can be a plugin running in this phase to filter the source
    code based on some defined criteria.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-test-sources`：此阶段处理生成的测试源代码；例如，在这个阶段可以运行一个插件，根据一些定义的准则过滤源代码。'
- en: '`generate-test-resources`: This phase generates all the resources required
    to run tests.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`generate-test-resources`：此阶段生成运行测试所需的所有资源。'
- en: '`process-test-resources`: This phase processes the generated test resources.
    It copies the resources to their destination directories and makes them ready
    for testing.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-test-resources`：此阶段处理生成的测试资源。它将资源复制到目标目录，并使它们准备好进行测试。'
- en: '`test-compile`: This phase compiles the source code for tests.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test-compile`：此阶段编译测试源代码。'
- en: '`process-test-classes`: This phase can be used to carry out any bytecode enhancements
    after the `test-compile` phase.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`process-test-classes`：此阶段可以在`test-compile`阶段之后执行任何字节码增强。'
- en: '`test`: This phase executes tests using the appropriate unit test framework.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：此阶段使用适当的单元测试框架执行测试。'
- en: '`prepare-package`: This phase is useful in organizing the artifacts to be packaged.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prepare-package`：此阶段在组织要打包的工件时很有用。'
- en: '`package`: This phase packs the artifacts into a distributable format, for
    example, JAR or WAR.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`：此阶段将工件打包成可分发格式，例如，JAR 或 WAR。'
- en: '`pre-integration-test`: This phase performs the actions required (if any) before
    running integration tests. This may be used to start any external application
    servers and deploy the artifacts into different test environments.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pre-integration-test`：此阶段执行在运行集成测试之前所需的操作（如果有）。这可能用于启动任何外部应用程序服务器并将工件部署到不同的测试环境中。'
- en: '`integration-test`: This phase runs integration tests.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`integration-test`：此阶段运行集成测试。'
- en: '`post-integration-test`: This phase can be used to perform any cleanup tasks
    after running the integration tests.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post-integration-test`：此阶段可以在运行集成测试后执行任何清理任务。'
- en: '`verify`: This phase verifies the validity of the package. The criteria to
    check the validity needs to be defined by the respective plugins.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`verify`：此阶段验证包的有效性。检查有效性的标准需要由相应的插件定义。'
- en: '`install`: This phase installs the final artifact in the local repository.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`：此阶段将最终工件安装到本地仓库。'
- en: '`deploy`: This phase deploys the final artifact to a remote repository.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`deploy`：此阶段将最终工件部署到远程仓库。'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The packaging type of a given Maven project is defined under the `<packaging>`
    element in the `pom.xml` file. If the element is omitted, then Maven assumes it
    as a `jar` packaging.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 给定 Maven 项目的打包类型在 `pom.xml` 文件的 `<packaging>` 元素下定义。如果省略此元素，则 Maven 假设它为 `jar`
    打包。
- en: 'The following figure shows all the phases defined under the Maven `default`
    lifecycle and their order of execution:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了在 Maven `default` 生命周期下定义的所有阶段及其执行顺序：
- en: '![The default lifecycle](img/B02157_05_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![默认生命周期](img/B02157_05_03.jpg)'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about Maven lifecycles can be found at [http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html](http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html).
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于 Maven 生命周期的详细信息可以在[http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html](http://maven.apache.org/ref/3.3.3/maven-core/lifecycles.html)找到。
- en: 'Let''s take a look at a concrete example. Run the following command against
    a Maven project having the `jar` packaging:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个具体的例子。运行以下命令针对一个具有 `jar` 打包方式的 Maven 项目：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you do not have such a project, you can download a sample Maven project from
    [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有这样的项目，您可以从[https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/jose/)下载一个示例
    Maven 项目。
- en: 'Here, we are using the Maven `help` plugin to find more details about the `deploy`
    phase corresponding to the `jar` packaging, and it will produce the following
    output:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 Maven `help` 插件来查找与 `jar` 打包方式对应的 `deploy` 阶段的更多详细信息，它将产生以下输出：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output lists out all the Maven plugins registered against different phases
    of the `default` lifecycle for the `jar` packaging. The `jar` goal of `maven-jar-plugin`
    is registered against the `package` phase, while the `install` goal of `maven-install-plugin`
    is registered in the `install` phase.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 输出列出了针对 `default` 生命周期不同阶段的 `jar` 打包方式注册的所有 Maven 插件。`maven-jar-plugin` 的 `jar`
    目标注册在 `package` 阶段，而 `maven-install-plugin` 的 `install` 目标注册在 `install` 阶段。
- en: 'Let''s run the previous command against a POM file having the `war` packaging.
    It produces the following output:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行之前的命令针对一个具有 `war` 打包方式的 POM 文件。它产生了以下输出：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if you look at the `package` phase, you will notice that we have a different
    plugin goal: the `war` goal of `maven-war-plugin`.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您查看 `package` 阶段，您会注意到我们有一个不同的插件目标：`maven-war-plugin` 的 `war` 目标。
- en: Similar to the `jar` and `war` packaging, each of the other packaging type defines
    its own binding for the `default` lifecycle.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `jar` 和 `war` 打包方式类似，其他打包类型为 `default` 生命周期定义了自己的绑定。
- en: The site lifecycle
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点生命周期
- en: 'The `site` lifecycle is defined with four phases: `pre-site`, `site`, `post-site`,
    and `site-deploy`. The `site` lifecycle has no value without the Maven `site`
    plugin. The `site` plugin is used to generate static HTML content for a project.
    The generated HTML content will also include appropriate reports corresponding
    to the project. The `site` plugin defines eight goals, and two of them are directly
    associated with the phases in the `site` lifecycle.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`site` 生命周期定义了四个阶段：`pre-site`、`site`、`post-site` 和 `site-deploy`。没有 Maven `site`
    插件，`site` 生命周期就没有价值。`site` 插件用于为项目生成静态 HTML 内容。生成的 HTML 内容还将包括与项目相对应的适当报告。`site`
    插件定义了八个目标，其中两个直接与 `site` 生命周期中的阶段相关联。'
- en: 'Let''s run the following command against a POM file to describe the site goal:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行以下命令针对一个 POM 文件来描述站点目标：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As shown in the following output, the `site` goal of the `site` plugin is associated
    with the `site` phase, while the `deploy` goal of the `site` plugin is associated
    with the `site-deploy` phase:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下输出所示，`site` 插件的 `site` 目标与 `site` 阶段相关联，而 `site` 插件的 `deploy` 目标与 `site-deploy`
    阶段相关联：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following figure shows the relationship between the Maven `site` plugin
    goals and the `site` lifecycle phases:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了 Maven `site` 插件目标和 `site` 生命周期阶段之间的关系：
- en: '![The site lifecycle](img/B02157_05_04.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![站点生命周期](img/B02157_05_04.jpg)'
- en: Lifecycle bindings
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期绑定
- en: Under the discussion of the `default` lifecycle, we briefly touched upon the
    concept of lifecycle bindings. The `default` lifecycle is defined without any
    associated lifecycle bindings, while both the `clean` and `site` lifecycles are
    defined with bindings. The standard Maven lifecycles and their associated bindings
    are defined under the file `META-INF/plex/components.xml` of `MAVEN_HOME/lib/maven-core-3.3.3.jar`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在讨论 `default` 生命周期时，我们简要提到了生命周期绑定的概念。`default` 生命周期定义时没有关联的生命周期绑定，而 `clean`
    和 `site` 生命周期则定义了绑定。标准的 Maven 生命周期及其关联的绑定定义在 `MAVEN_HOME/lib/maven-core-3.3.3.jar`
    文件夹下的 `META-INF/plex/components.xml` 文件中。
- en: 'Here is the configuration for the `default` lifecycle without any associated
    plugin bindings:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `default` 生命周期没有关联插件绑定的配置：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `components.xml` file, which is also known as the **component descriptor**,
    describes the properties required by Maven to manage the lifecycle of a Maven
    project. The `role` element specifies the Java interface exposed by this lifecycle
    component and defines the type of the component. All the lifecycle components
    must have `org.apache.maven.lifecycle.Lifecycle` as the role. The `implementation`
    tag specifies the concrete implementation of the interface. The identity of a
    component is defined by the combination of the role and the `role-hint` elements.
    The `role-hint` element is not a mandatory element; however, if we have multiple
    elements of the same type, then we must define a `role-hint` element. Corresponding
    to Maven lifecycles, the name of the lifecycle is set as the value of the `role-hint`
    element.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`components.xml`文件，也称为**组件描述符**，描述了Maven管理Maven项目生命周期所需的所有属性。`role`元素指定了由此生命周期组件公开的Java接口并定义了组件的类型。所有生命周期组件都必须以`org.apache.maven.lifecycle.Lifecycle`作为角色。`implementation`标签指定了接口的具体实现。组件的身份由角色和`role-hint`元素的组合定义。`role-hint`元素不是必需的元素；然而，如果我们有多个相同类型的元素，那么我们必须定义一个`role-hint`元素。对应于Maven生命周期，生命周期的名称被设置为`role-hint`元素的值。'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maven uses `components.xml` to define more other components than Maven lifecycles.
    Based on the type of the component, the value of the `role` element is set.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Maven使用`components.xml`来定义比Maven生命周期更多的其他组件。根据组件的类型，设置`role`元素的值。
- en: 'The `clean` lifecycle is defined with an associated plugin binding to the `clean`
    goal of `maven-clean-plugin`. The plugin binding is defined under the element
    `default-phases`. The configuration is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`clean`生命周期是通过与`maven-clean-plugin`的`clean`目标关联的插件绑定来定义的。插件绑定定义在`default-phases`元素下。配置如下：'
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `site` lifecycle is defined with associated plugin bindings to the `site`
    and `site-deploy` goals of `maven-site-plugin`. The plugin bindings are defined
    under the `default-phases` element, with the following configuration:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的`site`生命周期是通过与`maven-site-plugin`的`site`和`site-deploy`目标关联的插件绑定来定义的。插件绑定定义在`default-phases`元素下，配置如下：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, let''s take a look at how the `jar` plugin binding for the `default`
    lifecycle is defined. The following `component` element defines a plugin binding
    to an existing lifecycle. The associated lifecycle is defined under the `configuration/lifecycles/lifecycle/id`
    element:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们看看如何定义`default`生命周期的`jar`插件绑定。以下`component`元素定义了一个插件绑定到现有的生命周期。相关生命周期定义在`configuration/lifecycles/lifecycle/id`元素下：
- en: '[PRE13]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Lifecycle extensions
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生命周期扩展
- en: 'The lifecycle extensions in Maven allow you to customize the standard build
    behavior. Let''s take a look at the `org.apache.maven.AbstractMavenLifecycleParticipant`
    class. A custom lifecycle extension should extend from the `AbstractMavenLifecycleParticipant`
    class, which provides the following three methods that you can override:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Maven的生命周期扩展允许你自定义标准的构建行为。让我们看看`org.apache.maven.AbstractMavenLifecycleParticipant`类。一个自定义的生命周期扩展应该从`AbstractMavenLifecycleParticipant`类扩展，该类提供了以下三个你可以重写的方法：
- en: '`afterProjectsRead(MavenSession session)`: This method is invoked after all
    the Maven project instances have been created. There will be one project instance
    for each POM file. In a large-scale build system, you have one parent POM and
    it points to multiple child POM files.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`afterProjectsRead(MavenSession session)`: 此方法在所有Maven项目实例创建后调用。对于每个POM文件，将有一个项目实例。在一个大规模的构建系统中，你有一个父POM，它指向多个子POM文件。'
- en: '`afterSessionEnd(MavenSession session)`: This method is invoked after all Maven
    projects are built.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`afterSessionEnd(MavenSession session)`: 此方法在所有Maven项目构建完成后被调用。'
- en: '`afterSessionStart(MavenSession session)`: This method is invoked after the
    `MavenSession` instance is created.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`afterSessionStart(MavenSession session)`: 此方法在创建`MavenSession`实例后调用。'
- en: 'Let''s try out the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试以下示例：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The previous code can be built with the following application POM file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下应用POM文件可以构建前面的代码：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, in the POM file, we use the `plexus-component-metadata` plugin to generate
    the Plexus descriptor from the source tags and class annotations.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在此POM文件中，我们使用`plexus-component-metadata`插件从源标签和类注解生成Plexus描述符。
- en: 'Once the extension project is built successfully with `mvn clean install`,
    we need to incorporate the extension to other Maven builds. You can do it in two
    ways; one is by adding it to the project POM as an extension, as shown in the
    following code:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦使用 `mvn clean install` 成功构建了扩展项目，我们就需要将这个扩展集成到其他 Maven 构建中。你可以通过两种方式来完成；一种是将它作为扩展添加到项目的
    POM 文件中，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, you can build the sample project with `mvn clean install`. It will produce
    the following output:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用 `mvn clean install` 构建示例项目。它将产生以下输出：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you want to execute this extension for all your Maven projects without changing
    each and every POM file, then you need to add the lifecycle extension JAR file
    to `MAVEN_HOME/lib/ext`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要在不更改每个 POM 文件的情况下，为所有 Maven 项目执行这个扩展，那么你需要将生命周期扩展 JAR 文件添加到 `MAVEN_HOME/lib/ext`。
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The complete source code corresponding to the lifecycle extension project can
    be downloaded from [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 与生命周期扩展项目对应的完整源代码可以从 [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter05/)
    下载。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on Maven lifecycles and explained how the three
    standard lifecycles work and how we can customize them. Later in the chapter,
    we discussed how to develop our own lifecycle extensions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于 Maven 生命周期，并解释了三个标准生命周期是如何工作的，以及我们如何自定义它们。在章节的后面部分，我们讨论了如何开发我们自己的生命周期扩展。
- en: In the next chapter, we will discuss how to build Maven assemblies.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何构建 Maven 集成。
