["```java\n    {\n      \"timestamp\": 1484027734491,\n      \"status\": 404,\n      \"error\": \"Not Found\",\n      \"message\": \"No message available\",\n      \"path\": \"/non-existing-resource\"\n    }\n```", "```java\n    @GetMapping(path = \"/users/dummy-service\")\n    public Todo errorService() {\n      throw new RuntimeException(\"Some Exception Occured\");\n    }\n```", "```java\n    {\n      \"timestamp\": 1484028119553,\n      \"status\": 500,\n      \"error\": \"Internal Server Error\",\n      \"exception\": \"java.lang.RuntimeException\",\n      \"message\": \"Some Exception Occured\",\n      \"path\": \"/users/dummy-service\"\n   }\n```", "```java\n    public class TodoNotFoundException extends RuntimeException {\n      public TodoNotFoundException(String msg) {\n        super(msg);\n      }\n    }\n```", "```java\n    @GetMapping(path = \"/users/{name}/todos/{id}\")\n    public Todo retrieveTodo(@PathVariable String name, \n    @PathVariable int id) {\n      Todo todo = todoService.retrieveTodo(id);\n      if (todo == null) {\n        throw new TodoNotFoundException(\"Todo Not Found\");\n       }\n\n     return todo;\n    }\n```", "```java\n    {\n      \"timestamp\": 1484029048788,\n      \"status\": 500,\n      \"error\": \"Internal Server Error\",\n      \"exception\":    \n      \"com.mastering.spring.springboot.bean.TodoNotFoundException\",\n      \"message\": \"Todo Not Found\",\n      \"path\": \"/users/Jack/todos/222\"\n    }\n```", "```java\n    public class ExceptionResponse {\n      private Date timestamp = new Date();\n      private String message;\n      private String details;\n\n      public ExceptionResponse(String message, String details) {\n        super();\n        this.message = message;\n        this.details = details;\n       }\n\n      public Date getTimestamp() {\n        return timestamp;\n      }\n\n      public String getMessage() {\n        return message;\n      }\n\n      public String getDetails() {\n        return details;\n      }\n     }\n```", "```java\n    @ControllerAdvice\n    @RestController\n    public class RestResponseEntityExceptionHandler \n      extends  ResponseEntityExceptionHandler \n      {\n        @ExceptionHandler(TodoNotFoundException.class)\n        public final ResponseEntity<ExceptionResponse> \n        todoNotFound(TodoNotFoundException ex) {\n           ExceptionResponse exceptionResponse = \n           new ExceptionResponse(  ex.getMessage(), \n           \"Any details you would want to add\");\n           return new ResponseEntity<ExceptionResponse>\n           (exceptionResponse, new HttpHeaders(), \n           HttpStatus.NOT_FOUND);\n         }\n     }\n```", "```java\n    {\n      \"timestamp\": 1484030343311,\n      \"message\": \"Todo Not Found\",\n      \"details\": \"Any details you would want to add\"\n    }\n```", "```java\n    @ExceptionHandler(Exception.class)\n    public final ResponseEntity<ExceptionResponse> todoNotFound(\n    Exception ex) {\n       //Customize and return the response\n    }\n```", "```java\n    {\n      \"_embedded\" : {\n        \"todos\" : [ {\n          \"user\" : \"Jill\",\n          \"desc\" : \"Learn Hibernate\",\n          \"done\" : false,\n         \"_links\" : {\n          \"self\" : {\n                 \"href\" : \"http://localhost:8080/todos/1\"\n                 },\n          \"todo\" : {\n                 \"href\" : \"http://localhost:8080/todos/1\"\n                  }\n            }\n     } ]\n    },\n     \"_links\" : {\n     \"self\" : {\n              \"href\" : \"http://localhost:8080/todos\"\n              },\n     \"profile\" : {\n              \"href\" : \"http://localhost:8080/profile/todos\"\n              },\n     \"search\" : {\n              \"href\" : \"http://localhost:8080/todos/search\"\n              }\n       },\n     }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-hateoas</artifactId>\n    </dependency>\n```", "```java\n    <dependency>\n      <groupId>org.springframework.hateoas</groupId>\n      <artifactId>spring-hateoas</artifactId>\n    </dependency>\n```", "```java\n    @GetMapping(path = \"/users/{name}/todos/{id}\")\n    public Resource<Todo> retrieveTodo(\n    @PathVariable String name, @PathVariable int id) {\n    Todo todo = todoService.retrieveTodo(id);\n      if (todo == null) {\n           throw new TodoNotFoundException(\"Todo Not Found\");\n        }\n\n     Resource<Todo> todoResource = new Resource<Todo>(todo);\n     ControllerLinkBuilder linkTo = \n     linkTo(methodOn(this.getClass()).retrieveTodos(name));\n     todoResource.add(linkTo.withRel(\"parent\"));\n\n     return todoResource;\n    }\n```", "```java\n   {\n     \"id\": 1,\n     \"user\": \"Jack\",\n     \"desc\": \"Learn Spring MVC\",\n     \"targetDate\": 1484038262110,\n     \"done\": false,\n     \"_links\": {\n               \"parent\": {\n               \"href\": \"http://localhost:8080/users/Jack/todos\"\n               }\n        }\n   }\n```", "```java\n    @RequestMapping(method = RequestMethod.POST, \n    path = \"/users/{name}/todos\")     ResponseEntity<?> add(@PathVariable String name\n    @Valid @RequestBody Todo todo) {\n```", "```java\n   public class Todo {\n     private int id; \n\n     @NotNull\n     private String user;\n\n     @Size(min = 9, message = \"Enter atleast 10 Characters.\")\n     private String desc;\n```", "```java\n     @Test\n     public void createTodo_withValidationError() throws Exception {\n       Todo mockTodo = new Todo(CREATED_TODO_ID, \"Jack\", \n       \"Learn Spring MVC\", new Date(), false);\n\n       String todo = \"{\"user\":\"Jack\",\"desc\":\"Learn\",\"done\":false}\";\n\n       when( service.addTodo(\n         anyString(), anyString(), isNull(), anyBoolean()))\n        .thenReturn(mockTodo);\n\n         MvcResult result = mvc.perform(\n         MockMvcRequestBuilders.post(\"/users/Jack/todos\")\n        .content(todo)\n        .contentType(MediaType.APPLICATION_JSON))\n        .andExpect(\n           status().is4xxClientError()).andReturn();\n     }\n```", "```java\n    <dependency>\n     <groupId>io.springfox</groupId>\n     <artifactId>springfox-swagger2</artifactId>\n     <version>2.4.0</version>\n    </dependency>\n\n    <dependency>\n     <groupId>io.springfox</groupId>\n     <artifactId>springfox-swagger-ui</artifactId>\n     <version>2.4.0</version>\n    </dependency>\n```", "```java\n    @Configuration\n    @EnableSwagger2\n    public class SwaggerConfig {\n      @Bean\n      public Docket api() {\n        return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .apis(RequestHandlerSelectors.any())\n        .paths(PathSelectors.any()).build();\n      }\n    }\n```", "```java\n    \"/users/{name}/todos\": {\n      \"get\": {\n      \"tags\": [\n             \"todo-controller\"\n             ],\n      \"summary\": \"retrieveTodos\",\n      \"operationId\": \"retrieveTodosUsingGET\",\n      \"consumes\": [\n               \"application/json\"\n               ],\n      \"produces\": [\n               \"*/*\"\n               ],\n      \"parameters\": [\n              {\n                \"name\": \"name\",\n                \"in\": \"path\",\n                \"description\": \"name\",\n                \"required\": true,\n                \"type\": \"string\"\n              }\n             ],\n       \"responses\": {\n       \"200\": {\n              \"description\": \"OK\",\n              \"schema\": {\n                      \"type\": \"array\",\n                      items\": {\n                          \"$ref\": \"#/definitions/Todo\"\n                        }\n                       }\n               },\n       \"401\": {\n                \"description\": \"Unauthorized\"\n               },\n       \"403\": {\n                \"description\": \"Forbidden\"\n              },\n       \"404\": {\n                \"description\": \"Not Found\"\n              } \n        }\n     }\n```", "```java\n    \"Resource«Todo»\": {\n      \"type\": \"object\",\n      \"properties\": {\n      \"desc\": {\n               \"type\": \"string\"\n             },\n     \"done\": {\n               \"type\": \"boolean\"\n             },\n     \"id\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n           },\n     \"links\": {\n              \"type\": \"array\",\n              \"items\": {\n                         \"$ref\": \"#/definitions/Link\"\n                       }\n              },\n     \"targetDate\": {\n                    \"type\": \"string\",\n                    \"format\": \"date-time\"\n                },\n     \"user\": {\n              \"type\": \"string\"\n            }\n        }\n      }\n```", "```java\n    \"/users/{name}/todos\": {\n      \"get\": {\n      \"tags\": [\n             \"todo-controller\"\n             ],\n      \"summary\": \"retrieveTodos\",\n      \"operationId\": \"retrieveTodosUsingGET\",\n      \"consumes\": [\n               \"application/json\"\n               ],\n      \"produces\": [\n                \"*/*\"\n               ],\n```", "```java\n    @ApiOperation(\n      value = \"Retrieve all todos for a user by passing in his name\", \n      notes = \"A list of matching todos is returned. Current pagination   \n      is not supported.\",\n      response = Todo.class, \n      responseContainer = \"List\", \n      produces = \"application/json\")\n      @GetMapping(\"/users/{name}/todos\")\n      public List<Todo> retrieveTodos(@PathVariable String name) {\n        return todoService.retrieveTodos(name);\n     }\n```", "```java\n    get\": {\n         \"tags\": [\n                   \"todo-controller\"\n                 ],\n         \"summary\": \"Retrieve all todos for a user by passing in his \n          name\",\n         \"description\": \"A list of matching todos is returned. Current \n          pagination is not supported.\",\n         \"operationId\": \"retrieveTodosUsingGET\",\n         \"consumes\": [\n                     \"application/json\"\n                   ],\n         \"produces\": [\n                     \"application/json\",\n                     \"*/*\"\n                   ],\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-security</artifactId>\n    </dependency>\n```", "```java\n    {\n      \"timestamp\": 1484120815039,\n      \"status\": 401,\n      \"error\": \"Unauthorized\",\n      \"message\": \"Full authentication is required to access this \n       resource\",\n       \"path\": \"/users/Jack/todos\"\n    }\n```", "```java\n2017-01-11 13:11:58.696 INFO 3888 --- [restartedMain] b.a.s.AuthenticationManagerConfiguration :\n\nUsing default security password: 3fb5564a-ce53-4138-9911-8ade17b2f478\n\n2017-01-11 13:11:58.771 INFO 3888 --- [restartedMain] o.s.s.web.DefaultSecurityFilterChain : Creating filter chain: Ant [pattern='/css/**'], []\n```", "```java\n   security.user.name=user-name\n   security.user.password=user-password\n```", "```java\n    private TestRestTemplate template = new TestRestTemplate();\n    HttpHeaders headers = createHeaders(\"user-name\", \"user-password\");\n\n    HttpHeaders createHeaders(String username, String password) {\n      return new HttpHeaders() {\n       {\n         String auth = username + \":\" + password;\n         byte[] encodedAuth = Base64.getEncoder().encode\n         (auth.getBytes(Charset.forName(\"US-ASCII\")));\n         String authHeader = \"Basic \" + new String(encodedAuth);\n         set(\"Authorization\", authHeader);\n        }\n      };\n     }\n\n    @Test\n    public void retrieveTodos() throws Exception {\n      String expected = \"[\"\n      + \"{id:1,user:Jack,desc:\\\"Learn Spring MVC\\\",done:false}\" + \",\"\n      + \"{id:2,user:Jack,desc:\\\"Learn Struts\\\",done:false}\" + \"]\";\n      ResponseEntity<String> response = template.exchange(\n      createUrl(\"/users/Jack/todos\"), HttpMethod.GET,\n      new HttpEntity<String>(null, headers),\n      String.class);\n      JSONAssert.assertEquals(expected, response.getBody(), false);\n    }\n```", "```java\n   @RunWith(SpringRunner.class)\n   @WebMvcTest(value = TodoController.class, secure = false)\n   public class TodoControllerTest {\n```", "```java\n    <dependency>\n      <groupId>org.springframework.security.oauth</groupId>\n      <artifactId>spring-security-oauth2</artifactId>\n    </dependency>\n```", "```java\n   @EnableResourceServer\n   @EnableAuthorizationServer\n   @SpringBootApplication\n   public class Application {\n```", "```java\n    security.user.name=user-name\n    security.user.password=user-password\n    security.oauth2.client.clientId: clientId\n    security.oauth2.client.clientSecret: clientSecret\n    security.oauth2.client.authorized-grant-types:     \n    authorization_code,refresh_token,password\n    security.oauth2.client.scope: openid\n```", "```java\n    {\n      \"access_token\": \"a633dd55-102f-4f53-bcbd-a857df54b821\",\n      \"token_type\": \"bearer\",\n      \"refresh_token\": \"d68d89ec-0a13-4224-a29b-e9056768c7f0\",\n      \"expires_in\": 43199,\n      \"scope\": \"openid\"\n    }\n```", "```java\n    @Test\n    public void retrieveTodos() throws Exception {\n      String expected = \"[\"\n      + \"{id:1,user:Jack,desc:\\\"Learn Spring MVC\\\",done:false}\" + \",\"\n      +\"{id:2,user:Jack,desc:\\\"Learn Struts\\\",done:false}\" + \"]\";\n      String uri = \"/users/Jack/todos\";\n      ResourceOwnerPasswordResourceDetails resource = \n      new ResourceOwnerPasswordResourceDetails();\n      resource.setUsername(\"user-name\");\n      resource.setPassword(\"user-password\");\n      resource.setAccessTokenUri(createUrl(\"/oauth/token\"));\n      resource.setClientId(\"clientId\");\n      resource.setClientSecret(\"clientSecret\");\n      resource.setGrantType(\"password\");\n      OAuth2RestTemplate oauthTemplate = new \n      OAuth2RestTemplate(resource,new \n      DefaultOAuth2ClientContext());\n      ResponseEntity<String> response = \n      oauthTemplate.getForEntity(createUrl(uri), String.class);\n     JSONAssert.assertEquals(expected, response.getBody(), false);\n    }\n```", "```java\n    @Bean\n    public LocaleResolver localeResolver() {\n      SessionLocaleResolver sessionLocaleResolver = \n      new SessionLocaleResolver();\n      sessionLocaleResolver.setDefaultLocale(Locale.US);\n      return sessionLocaleResolver;\n    }\n\n   @Bean\n   public ResourceBundleMessageSource messageSource() {\n     ResourceBundleMessageSource messageSource = \n     new ResourceBundleMessageSource();\n     messageSource.setBasenames(\"messages\");\n     messageSource.setUseCodeAsDefaultMessage(true);\n    return messageSource;\n   }\n```", "```java\n    welcome.message=Welcome in English\n```", "```java\n   welcome.message=Welcome in French\n```", "```java\n    @GetMapping(\"/welcome-internationalized\")\n    public String msg(@RequestHeader(value = \"Accept-Language\", \n    required = false) Locale locale) {\n      return messageSource.getMessage(\"welcome.message\", null, \n      locale);\n    }\n```", "```java\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-cache</artifactId>\n    </dependency>\n```", "```java\n    @EnableCaching\n    @SpringBootApplication\n    public class Application {\n```", "```java\n    @Cacheable(\"todos\")\n    public List<Todo> retrieveTodos(String user) {\n```", "```java\n    @Cacheable(cacheNames=\"todos\", condition=\"#user.length < 10\")\n    public List<Todo> retrieveTodos(String user) {\n```"]