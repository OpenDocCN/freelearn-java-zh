["```java\n    <project \n\n     xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n     http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.mastering.spring</groupId> \n    <artifactId>springboot-example</artifactId> \n    <version>0.0.1-SNAPSHOT</version> \n    <name>First Spring Boot Example</name> \n    <packaging>war</packaging>\n    <parent> \n      <groupId>org.springframework.boot</groupId> \n      <artifactId>spring-boot-starter-parent</artifactId>  \n      <version>2.0.0.M1</version>\n    </parent>\n    <properties> \n      <java.version>1.8</java.version> \n    </properties>\n\n   <repositories>\n    <repository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n    </repository>\n   </repositories>\n\n   <pluginRepositories>\n    <pluginRepository>\n      <id>spring-milestones</id>\n      <name>Spring Milestones</name>\n      <url>https://repo.spring.io/milestone</url>\n        <snapshots>\n          <enabled>false</enabled>\n        </snapshots>\n     </pluginRepository>\n    </pluginRepositories>\n\n</project>\n```", "```java\n    <parent>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-dependencies</artifactId>\n      <version>2.0.0.M1</version>\n      <relativePath>../../spring-boot-dependencies</relativePath>\n   </parent>\n```", "```java\n<activemq.version>5.13.4</activemq.version>\n<aspectj.version>1.8.9</aspectj.version>\n<ehcache.version>2.10.2.2.21</ehcache.version>\n<elasticsearch.version>2.3.4</elasticsearch.version>\n<gson.version>2.7</gson.version>\n<h2.version>1.4.192</h2.version>\n<hazelcast.version>3.6.4</hazelcast.version>\n<hibernate.version>5.0.9.Final</hibernate.version>\n<hibernate-validator.version>5.2.4.Final</hibernate\n  validator.version>\n<hsqldb.version>2.3.3</hsqldb.version>\n<htmlunit.version>2.21</htmlunit.version>\n<jackson.version>2.8.1</jackson.version>\n<jersey.version>2.23.1</jersey.version>\n<jetty.version>9.3.11.v20160721</jetty.version>\n<junit.version>4.12</junit.version>\n<mockito.version>1.10.19</mockito.version>\n<selenium.version>2.53.1</selenium.version>\n<servlet-api.version>3.1.0</servlet-api.version>\n<spring.version>4.3.2.RELEASE</spring.version>\n<spring-amqp.version>1.6.1.RELEASE</spring-amqp.version>\n<spring-batch.version>3.0.7.RELEASE</spring-batch.version>\n<spring-data-releasetrain.version>Hopper-SR2</spring-\n  data-releasetrain.version>\n<spring-hateoas.version>0.20.0.RELEASE</spring-hateoas.version>\n<spring-restdocs.version>1.1.1.RELEASE</spring-restdocs.version>\n<spring-security.version>4.1.1.RELEASE</spring-security.version>\n<spring-session.version>1.2.1.RELEASE</spring-session.version>\n<spring-ws.version>2.3.0.RELEASE</spring-ws.version>\n<thymeleaf.version>2.1.5.RELEASE</thymeleaf.version>\n<tomcat.version>8.5.4</tomcat.version>\n<xml-apis.version>1.4.01</xml-apis.version>\n```", "```java\n    <properties>\n     <mockito.version>1.10.20</mockito.version>\n    </properties>\n```", "```java\n    <dependencies>\n        <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-starter-tomcat</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>org.hibernate</groupId>\n          <artifactId>hibernate-validator</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>com.fasterxml.jackson.core</groupId>\n          <artifactId>jackson-databind</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-web</artifactId>\n        </dependency>\n        <dependency>\n          <groupId>org.springframework</groupId>\n          <artifactId>spring-webmvc</artifactId>\n       </dependency>\n    </dependencies>\n```", "```java\n    <dependencies>\n      <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n     </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-test</artifactId>\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-tomcat</artifactId>\n       <scope>provided</scope>\n     </dependency>\n    </dependencies>\n```", "```java\n    <build>\n     <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n     </plugins>\n    </build>\n```", "```java\n    package com.mastering.spring.springboot;\n    import org.springframework.boot.SpringApplication;\n    import org.springframework.boot\n    autoconfigure.SpringBootApplication;\n    import org.springframework.context.ApplicationContext;\n    @SpringBootApplication public class Application {\n       public static void main(String[] args)\n        { \n         ApplicationContext ctx = SpringApplication.run\n         (Application.class,args);\n        }\n     }\n```", "```java\n    ApplicationContext ctx = SpringApplication.run(Application.class,\n     args);\n    String[] beanNames = ctx.getBeanDefinitionNames();\n    Arrays.sort(beanNames);\n\n   for (String beanName : beanNames) {\n     System.out.println(beanName);\n    }\n```", "```java\napplication\nbasicErrorController\nbeanNameHandlerMapping\nbeanNameViewResolver\ncharacterEncodingFilter\nconventionErrorViewResolver\ndefaultServletHandlerMapping\ndefaultViewResolver\ndispatcherServlet\ndispatcherServletRegistration\nduplicateServerPropertiesDetector\nembeddedServletContainerCustomizerBeanPostProcessor\nerror\nerrorAttributes\nerrorPageCustomizer\nerrorPageRegistrarBeanPostProcessor\nfaviconHandlerMapping\nfaviconRequestHandler\nhandlerExceptionResolver\nhiddenHttpMethodFilter\nhttpPutFormContentFilter\nhttpRequestHandlerAdapter\njacksonObjectMapper\njacksonObjectMapperBuilder\njsonComponentModule\nlocaleCharsetMappingsCustomizer\nmappingJackson2HttpMessageConverter\nmbeanExporter\nmbeanServer\nmessageConverters\nmultipartConfigElement\nmultipartResolver\nmvcContentNegotiationManager\nmvcConversionService\nmvcPathMatcher\nmvcResourceUrlProvider\nmvcUriComponentsContributor\nmvcUrlPathHelper\nmvcValidator\nmvcViewResolver\nobjectNamingStrategy\nautoconfigure.AutoConfigurationPackages\nautoconfigure.PropertyPlaceholderAutoConfiguration\nautoconfigure.condition.BeanTypeRegistry\nautoconfigure.context.ConfigurationPropertiesAutoConfiguration\nautoconfigure.info.ProjectInfoAutoConfiguration\nautoconfigure.internalCachingMetadataReaderFactory\nautoconfigure.jackson.JacksonAutoConfiguration\nautoconfigure.jackson.JacksonAutoConfiguration$Jackson2ObjectMapperBuilderCustomizerConfiguration\nautoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperBuilderConfiguration\nautoconfigure.jackson.JacksonAutoConfiguration$JacksonObjectMapperConfiguration\nautoconfigure.jmx.JmxAutoConfiguration\nautoconfigure.web.DispatcherServletAutoConfiguration\nautoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration\nautoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration\nautoconfigure.web.EmbeddedServletContainerAutoConfiguration\nautoconfigure.web.EmbeddedServletContainerAutoConfiguration$EmbeddedTomcat\nautoconfigure.web.ErrorMvcAutoConfiguration\nautoconfigure.web.ErrorMvcAutoConfiguration$WhitelabelErrorViewConfiguration\nautoconfigure.web.HttpEncodingAutoConfiguration\nautoconfigure.web.HttpMessageConvertersAutoConfiguration\nautoconfigure.web.HttpMessageConvertersAutoConfiguration$StringHttpMessageConverterConfiguration\nautoconfigure.web.JacksonHttpMessageConvertersConfiguration\nautoconfigure.web.JacksonHttpMessageConvertersConfiguration$MappingJackson2HttpMessageConverterConfiguration\nautoconfigure.web.MultipartAutoConfiguration\nautoconfigure.web.ServerPropertiesAutoConfiguration\nautoconfigure.web.WebClientAutoConfiguration\nautoconfigure.web.WebClientAutoConfiguration$RestTemplateConfiguration\nautoconfigure.web.WebMvcAutoConfiguration\nautoconfigure.web.WebMvcAutoConfiguration$EnableWebMvcConfiguration\nautoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter\nautoconfigure.web.WebMvcAutoConfiguration$WebMvcAutoConfigurationAdapter$FaviconConfiguration\nautoconfigure.websocket.WebSocketAutoConfiguration\nautoconfigure.websocket.WebSocketAutoConfiguration$TomcatWebSocketConfiguration\ncontext.properties.ConfigurationPropertiesBindingPostProcessor\ncontext.properties.ConfigurationPropertiesBindingPostProcessor.store\nannotation.ConfigurationClassPostProcessor.enhancedConfigurationProcessor\nannotation.ConfigurationClassPostProcessor.importAwareProcessor\nannotation.internalAutowiredAnnotationProcessor\nannotation.internalCommonAnnotationProcessor\nannotation.internalConfigurationAnnotationProcessor\nannotation.internalRequiredAnnotationProcessor\nevent.internalEventListenerFactory\nevent.internalEventListenerProcessor\npreserveErrorControllerTargetClassPostProcessor\npropertySourcesPlaceholderConfigurer\nrequestContextFilter\nrequestMappingHandlerAdapter\nrequestMappingHandlerMapping\nresourceHandlerMapping\nrestTemplateBuilder\nserverProperties\nsimpleControllerHandlerAdapter\nspring.http.encoding-autoconfigure.web.HttpEncodingProperties\nspring.http.multipart-autoconfigure.web.MultipartProperties\nspring.info-autoconfigure.info.ProjectInfoProperties\nspring.jackson-autoconfigure.jackson.JacksonProperties\nspring.mvc-autoconfigure.web.WebMvcProperties\nspring.resources-autoconfigure.web.ResourceProperties\nstandardJacksonObjectMapperBuilderCustomizer\nstringHttpMessageConverter\ntomcatEmbeddedServletContainerFactory\nviewControllerHandlerMapping\nviewResolver\nwebsocketContainerCustomizer\n```", "```java\n    {  \n\"_embedded\":{ \n\"todos\":[ \n{ \n\"user\":\"Jill\",\n\"desc\":\"Learn Hibernate\",\n\"done\":false,\n\"_links\":{ \n\"self\":{ \n\"href\":\"http://localhost:8080/todos/1\"\n                  },\n\"todo\":{ \n\"href\":\"http://localhost:8080/todos/1\"\n}\n}\n}\n]\n},\n\"_links\":{ \n\"self\":{ \n\"href\":\"http://localhost:8080/todos\"\n},\n\"profile\":{ \n\"href\":\"http://localhost:8080/profile/todos\"\n},\n\"search\":{ \n\"href\":\"http://localhost:8080/todos/search\"\n}\n}\n    }\n```", "```java\n    package com.mastering.spring.springboot.bean;\n\n    public class WelcomeBean {\n      private String message;\n\n       public WelcomeBean(String message) {\n         super();\n         this.message = message;\n       }\n\n      public String getMessage() {\n        return message;\n      }\n    }\n```", "```java\n    @RestController\n    public class BasicController {\n      @GetMapping(\"/welcome\")\n      public String welcome() {\n        return \"Hello World\";\n      }\n    }\n```", "```java\n    @RunWith(SpringRunner.class)\n    @WebMvcTest(BasicController.class)\n    public class BasicControllerTest {\n\n      @Autowired\n      private MockMvc mvc;\n\n      @Test\n      public void welcome() throws Exception {\n        mvc.perform(\n        MockMvcRequestBuilders.get(\"/welcome\")\n       .accept(MediaType.APPLICATION_JSON))\n       .andExpect(status().isOk())\n       .andExpect(content().string(\n       equalTo(\"Hello World\")));\n      }\n    }\n```", "```java\n    @RunWith(SpringRunner.class)\n    @SpringBootTest(classes = Application.class, \n    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n    public class BasicControllerIT {\n\n      private static final String LOCAL_HOST = \n      \"http://localhost:\";\n\n      @LocalServerPort\n      private int port;\n\n      private TestRestTemplate template = new TestRestTemplate();\n\n      @Test\n      public void welcome() throws Exception {\n        ResponseEntity<String> response = template\n       .getForEntity(createURL(\"/welcome\"), String.class);\n        assertThat(response.getBody(), equalTo(\"Hello World\"));\n       }\n\n      private String createURL(String uri) {\n        return LOCAL_HOST + port + uri;\n      }\n    }\n```", "```java\n    @GetMapping(\"/welcome-with-object\")\n    public WelcomeBean welcomeWithObject() {\n      return new WelcomeBean(\"Hello World\");\n    }\n```", "```java\n    {\"message\":\"Hello World\"}\n```", "```java\n    @Test\n    public void welcomeWithObject() throws Exception {\n      mvc.perform(\n       MockMvcRequestBuilders.get(\"/welcome-with-object\")\n      .accept(MediaType.APPLICATION_JSON))\n      .andExpect(status().isOk())\n      .andExpect(content().string(containsString(\"Hello World\")));\n    }\n```", "```java\n    @Test\n    public void welcomeWithObject() throws Exception {\n      ResponseEntity<String> response = \n      template.getForEntity(createURL(\"/welcome-with-object\"), \n      String.class);\n      assertThat(response.getBody(), \n      containsString(\"Hello World\"));\n    }\n```", "```java\n    private static final String helloWorldTemplate = \"Hello World, \n    %s!\";\n\n   @GetMapping(\"/welcome-with-parameter/name/{name}\")\n   public WelcomeBean welcomeWithParameter(@PathVariable String name) \n    {\n       return new WelcomeBean(String.format(helloWorldTemplate, name));\n    }\n```", "```java\n    {\"message\":\"Hello World, Buddy!\"}\n```", "```java\n    @Test\n    public void welcomeWithParameter() throws Exception {\n      mvc.perform(\n      MockMvcRequestBuilders.get(\"/welcome-with-parameter/name/Buddy\")\n     .accept(MediaType.APPLICATION_JSON))\n     .andExpect(status().isOk())\n     .andExpect(\n     content().string(containsString(\"Hello World, Buddy\")));\n    }\n```", "```java\n    @Test\n    public void welcomeWithParameter() throws Exception {\n      ResponseEntity<String> response = \n      template.getForEntity(\n      createURL(\"/welcome-with-parameter/name/Buddy\"), String.class);\n      assertThat(response.getBody(), \n      containsString(\"Hello World, Buddy\"));\n    }\n```", "```java\n    public class Todo {\n      private int id;\n      private String user;\n\n      private String desc;\n\n      private Date targetDate;\n      private boolean isDone;\n\n      public Todo() {}\n\n      public Todo(int id, String user, String desc, \n      Date targetDate, boolean isDone) { \n        super();\n        this.id = id;\n        this.user = user;\n        this.desc = desc;\n        this.targetDate = targetDate;\n        this.isDone = isDone;\n      }\n\n       //ALL Getters\n    }\n```", "```java\n   @Service\n   public class TodoService {\n     private static List<Todo> todos = new ArrayList<Todo>();\n     private static int todoCount = 3;\n\n     static {\n       todos.add(new Todo(1, \"Jack\", \"Learn Spring MVC\", \n       new Date(), false));\n       todos.add(new Todo(2, \"Jack\", \"Learn Struts\", new Date(), \n       false));\n       todos.add(new Todo(3, \"Jill\", \"Learn Hibernate\", new Date(), \n       false));\n      }\n\n     public List<Todo> retrieveTodos(String user) {\n       List<Todo> filteredTodos = new ArrayList<Todo>();\n       for (Todo todo : todos) {\n         if (todo.getUser().equals(user))\n         filteredTodos.add(todo);\n        }\n      return filteredTodos;\n     }\n\n    public Todo addTodo(String name, String desc, \n    Date targetDate, boolean isDone) {\n      Todo todo = new Todo(++todoCount, name, desc, targetDate, \n      isDone);\n      todos.add(todo);\n      return todo;\n    }\n\n    public Todo retrieveTodo(int id) {\n      for (Todo todo : todos) {\n      if (todo.getId() == id)\n        return todo;\n      }\n      return null;\n     }\n   }\n```", "```java\n    @RestController\n    public class TodoController {\n     @Autowired\n     private TodoService todoService;\n\n     @GetMapping(\"/users/{name}/todos\")\n     public List<Todo> retrieveTodos(@PathVariable String name) {\n       return todoService.retrieveTodos(name);\n     }\n    }\n```", "```java\n   [\n    {\"id\":1,\"user\":\"Jack\",\"desc\":\"Learn Spring    \n     MVC\",\"targetDate\":1481607268779,\"done\":false},  \n    {\"id\":2,\"user\":\"Jack\",\"desc\":\"Learn \n    Struts\",\"targetDate\":1481607268779, \"done\":false}\n   ]\n```", "```java\n   @RunWith(SpringRunner.class)\n   @WebMvcTest(TodoController.class)\n   public class TodoControllerTest {\n\n    @Autowired\n    private MockMvc mvc;\n\n    @MockBean\n    private TodoService service;\n\n    @Test\n    public void retrieveTodos() throws Exception {\n     List<Todo> mockList = Arrays.asList(new Todo(1, \"Jack\",\n     \"Learn Spring MVC\", new Date(), false), new Todo(2, \"Jack\",\n     \"Learn Struts\", new Date(), false));\n\n     when(service.retrieveTodos(anyString())).thenReturn(mockList);\n\n     MvcResult result = mvc\n    .perform(MockMvcRequestBuilders.get(\"/users\n    /Jack/todos\").accept(MediaType.APPLICATION_JSON))\n    .andExpect(status().isOk()).andReturn();\n\n    String expected = \"[\"\n     + \"{id:1,user:Jack,desc:\\\"Learn Spring MVC\\\",done:false}\" +\",\"\n     + \"{id:2,user:Jack,desc:\\\"Learn Struts\\\",done:false}\" + \"]\";\n\n     JSONAssert.assertEquals(expected, result.getResponse()\n      .getContentAsString(), false);\n     }\n    }\n```", "```java\n   @RunWith(SpringJUnit4ClassRunner.class)\n   @SpringBootTest(classes = Application.class, webEnvironment =     \n   SpringBootTest.WebEnvironment.RANDOM_PORT)\n   public class TodoControllerIT {\n\n    @LocalServerPort\n    private int port;\n\n    private TestRestTemplate template = new TestRestTemplate();\n\n    @Test\n    public void retrieveTodos() throws Exception {\n     String expected = \"[\"\n     + \"{id:1,user:Jack,desc:\\\"Learn Spring MVC\\\",done:false}\" + \",\"\n     + \"{id:2,user:Jack,desc:\\\"Learn Struts\\\",done:false}\" + \"]\";\n\n     String uri = \"/users/Jack/todos\";\n\n     ResponseEntity<String> response =\n     template.getForEntity(createUrl(uri), String.class);\n\n     JSONAssert.assertEquals(expected, response.getBody(), false);\n    }\n\n     private String createUrl(String uri) {\n     return \"http://localhost:\" + port + uri;\n    }\n  }\n```", "```java\n    @GetMapping(path = \"/users/{name}/todos/{id}\")\n    public Todo retrieveTodo(@PathVariable String name, @PathVariable \n    int id) {\n      return todoService.retrieveTodo(id);\n    }\n```", "```java\n    {\"id\":1,\"user\":\"Jack\",\"desc\":\"Learn Spring MVC\", \n    \"targetDate\":1481607268779,\"done\":false}\n```", "```java\n     @Test\n     public void retrieveTodo() throws Exception {\n       Todo mockTodo = new Todo(1, \"Jack\", \"Learn Spring MVC\", \n       new Date(), false);\n\n       when(service.retrieveTodo(anyInt())).thenReturn(mockTodo);\n\n       MvcResult result = mvc.perform(\n       MockMvcRequestBuilders.get(\"/users/Jack/todos/1\")\n       .accept(MediaType.APPLICATION_JSON))\n       .andExpect(status().isOk()).andReturn();\n\n       String expected = \"{id:1,user:Jack,desc:\\\"Learn Spring\n       MVC\\\",done:false}\";\n\n      JSONAssert.assertEquals(expected, \n       result.getResponse().getContentAsString(), false);\n\n     }\n```", "```java\n     @Test\n     public void retrieveTodo() throws Exception {\n       String expected = \"{id:1,user:Jack,desc:\\\"Learn Spring   \n       MVC\\\",done:false}\";\n       ResponseEntity<String> response = template.getForEntity(\n       createUrl(\"/users/Jack/todos/1\"), String.class);\n       JSONAssert.assertEquals(expected, response.getBody(), false);\n     }\n```", "```java\n    @PostMapping(\"/users/{name}/todos\")\n    ResponseEntity<?> add(@PathVariable String name,\n    @RequestBody Todo todo) { \n      Todo createdTodo = todoService.addTodo(name, todo.getDesc(),\n      todo.getTargetDate(), todo.isDone());\n      if (createdTodo == null) {\n         return ResponseEntity.noContent().build();\n      }\n\n     URI location = ServletUriComponentsBuilder.fromCurrentRequest()\n\n    .path(\"/{id}\").buildAndExpand(createdTodo.getId()).toUri();\n    return ResponseEntity.created(location).build();\n   }\n```", "```java\n    Header\n    Content-Type:application/json\n\n   Body\n    {\n      \"user\": \"Jack\",\n      \"desc\": \"Learn Spring Boot\",\n       \"done\": false\n     }\n```", "```java\n    @Test\n    public void createTodo() throws Exception {\n     Todo mockTodo = new Todo(CREATED_TODO_ID, \"Jack\", \n     \"Learn Spring MVC\", new Date(), false);\n     String todo = \"{\"user\":\"Jack\",\"desc\":\"Learn Spring MVC\",     \n     \"done\":false}\";\n\n    when(service.addTodo(anyString(), anyString(),   \n    isNull(),anyBoolean()))\n    .thenReturn(mockTodo);\n\n   mvc\n    .perform(MockMvcRequestBuilders.post(\"/users/Jack/todos\")\n    .content(todo)\n    .contentType(MediaType.APPLICATION_JSON)\n    )\n    .andExpect(status().isCreated())\n    .andExpect(\n      header().string(\"location\",containsString(\"/users/Jack/todos/\"\n     + CREATED_TODO_ID)));\n   }\n```", "```java\n    @Test\n    public void addTodo() throws Exception {\n      Todo todo = new Todo(-1, \"Jill\", \"Learn Hibernate\", new Date(),  \n      false);\n      URI location = template\n     .postForLocation(createUrl(\"/users/Jill/todos\"),todo);\n      assertThat(location.getPath(), \n      containsString(\"/users/Jill/todos/4\"));\n    }\n```", "```java\n<dependencies> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-actuator</artifactId> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <scope>runtime</scope> </dependency> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> </dependencies>\n```", "```java\n    package com.mastering.spring;\n    import org.springframework.boot.SpringApplication;\n    import org.springframework.boot.autoconfigure\n    .SpringBootApplication;\n\n    @SpringBootApplication\n    public class FirstSpringInitializrApplication {\n       public static void main(String[] args) {\n        SpringApplication.run(FirstSpringInitializrApplication.class,   \n        args);\n      }\n    }\n```", "```java\n    package com.mastering.spring;\n    import org.junit.Test;\n    import org.junit.runner.RunWith;\n    import org.springframework.boot.test.context.SpringBootTest;\n    import org.springframework.test.context.junit4.SpringRunner;\n\n    @RunWith(SpringRunner.class)\n    @SpringBootTest\n    public class FirstSpringInitializrApplicationTests {\n\n      @Test\n      public void contextLoads() {\n      }\n   }\n```", "```java\n@Configuration\n@ConditionalOnWebApplication\n@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\nWebMvcConfigurerAdapter.class })\n@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)\n@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)\n@AutoConfigureAfter(DispatcherServletAutoConfiguration.class)\npublic class WebMvcAutoConfiguration {\n```", "```java\n    @Bean\n    @ConditionalOnBean(ViewResolver.class)\n    @ConditionalOnMissingBean(name = \"viewResolver\", \n    value = ContentNegotiatingViewResolver.class)\n    public ContentNegotiatingViewResolver \n    viewResolver(BeanFactory beanFactory) {\n      ContentNegotiatingViewResolver resolver = new \n      ContentNegotiatingViewResolver();\n      resolver.setContentNegotiationManager\n      (beanFactory.getBean(ContentNegotiationManager.class));\n      resolver.setOrder(Ordered.HIGHEST_PRECEDENCE);\n      return resolver;\n     }\n```"]