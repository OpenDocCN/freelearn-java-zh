["```java\npackage examples;\nimport java.util.random.RandomGenerator;\npublic class DiceRoll {\n    private final int NUMBER_OF_SIDES = 6;\n    private final RandomGenerator rnd =\n                       RandomGenerator.getDefault();\n    public String asText() {\n        int rolled = rnd.nextInt(NUMBER_OF_SIDES) + 1;\n        return String.format(\"You rolled a %d\", rolled);\n    }\n}\n```", "```java\npublic class BatteryMonitor {\n    public void warnWhenBatteryPowerLow() {\n        if (DeviceApi.getBatteryPercentage() < 10) {\n            System.out.println(\"Warning - Battery low\");\n        }\n    }\n}\n```", "```java\n    interface RandomNumbers {\n    ```", "```java\n        int nextInt(int upperBoundExclusive);\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import java.util.random.RandomGenerator;\n    ```", "```java\n    public class DiceRoll {\n    ```", "```java\n        private final int NUMBER_OF_SIDES = 6;\n    ```", "```java\n        private final RandomNumbers rnd ;\n    ```", "```java\n        public DiceRoll( RandomNumbers r ) {\n    ```", "```java\n            this.rnd = r;\n    ```", "```java\n        }\n    ```", "```java\n        public String asText() {\n    ```", "```java\n            int rolled = rnd.nextInt(NUMBER_OF_SIDES) + 1;\n    ```", "```java\n            return String.format(\"You rolled a %d\",\n    ```", "```java\n                                 rolled);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    class DiceRollTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        void producesMessage() {\n    ```", "```java\n            var stub = new StubRandomNumbers();\n    ```", "```java\n            var roll = new DiceRoll(stub);\n    ```", "```java\n            var actual = roll.asText();\n    ```", "```java\n            assertThat(actual).isEqualTo(\"You rolled a\n    ```", "```java\n                                         5\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npackage examples;\npublic class StubRandomNumbers implements RandomNumbers {\n    @Override\n    public int nextInt(int upperBoundExclusive) {\n        return 4;  // @see https://xkcd.com/221\n    }\n}\n```", "```java\npublic class RandomlyGeneratedNumbers implements RandomNumbers {\n    private final RandomGenerator rnd =\n                       RandomGenerator.getDefault();\n    @Override\n    public int nextInt(int upperBoundExclusive) {\n        return rnd.nextInt(upperBoundExclusive);\n    }\n}\n```", "```java\npublic class DiceRollApp {\n    public static void main(String[] args) {\n        new DiceRollApp().run();\n    }\n    private void run() {\n        var rnd = new RandomlyGeneratedNumbers();\n        var roll = new DiceRoll(rnd);\n        System.out.println(roll.asText());\n    }\n}\n```", "```java\npublic interface MailServer {\n    void sendEmail(String recipient, String subject,\n                   String text);\n}\n```", "```java\npublic class MockMailServer implements MailServer {\n    boolean wasCalled;\n    String actualRecipient;\n    String actualSubject;\n    String actualText;\n    @Override\n    public void sendEmail(String recipient, String subject,\n                          String text) {\n        wasCalled = true;\n        actualRecipient = recipient;\n        actualSubject = subject;\n        actualText = text;\n    }\n}\n```", "```java\n@Test\npublic void sendsWelcomeEmail() {\n    var mailServer = new MockMailServer();\n    var notifications = new UserNotifications(mailServer);\n    notifications.welcomeNewUser();\n    assertThat(mailServer.wasCalled).isTrue();\n    assertThat(mailServer.actualRecipient)\n         .isEqualTo(\"test@example.com\");\n    assertThat(mailServer.actualSubject)\n         .isEqualTo(\"Welcome!\");\n    assertThat(mailServer.actualText)\n         .contains(\"Welcome to your account\");\n}\n```", "```java\npackage examples;\npublic class UserGreeting {\n    private final UserProfiles profiles\n        = new UserProfilesPostgres();\n    public String formatGreeting(UserId id) {\n        return String.format(\"Hello and welcome, %s\",\n                profiles.fetchNicknameFor(id));\n    }\n}\n```", "```java\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\n    testImplementation 'org.assertj:assertj-core:3.22.0'\n    testImplementation 'org.mockito:mockito-core:4.8.0'\n    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'\n}\n```", "```java\n    package examples\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        void formatsGreetingWithName() {\n    ```", "```java\n            String actual = «»;\n    ```", "```java\n            assertThat(actual)\n    ```", "```java\n               .isEqualTo(\"Hello and welcome, Alan\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n        private static final UserId USER_ID\n    ```", "```java\n            = new UserId(\"1234\");\n    ```", "```java\n        @Test\n    ```", "```java\n        void formatsGreetingWithName() {\n    ```", "```java\n            var greeting = new UserGreeting();\n    ```", "```java\n            String actual =\n    ```", "```java\n                greeting.formatGreeting(USER_ID);\n    ```", "```java\n            assertThat(actual)\n    ```", "```java\n                .isEqualTo(\"Hello and welcome, Alan\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    public class UserGreeting {\n    ```", "```java\n        public String formatGreeting(UserId id) {\n    ```", "```java\n            throw new UnsupportedOperationException();\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    public class UserId {\n    ```", "```java\n        public UserId(String id) {\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n        private static final UserId USER_ID\n    ```", "```java\n            = new UserId(\"1234\");\n    ```", "```java\n        private UserProfiles profiles;\n    ```", "```java\n        @Test\n    ```", "```java\n        void formatsGreetingWithName() {\n    ```", "```java\n            var greeting\n    ```", "```java\n                = new UserGreeting(profiles);\n    ```", "```java\n            String actual =\n    ```", "```java\n                greeting.formatGreeting(USER_ID);\n    ```", "```java\n            assertThat(actual)\n    ```", "```java\n                .isEqualTo(\"Hello and welcome, Alan\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    public class UserGreeting {\n    ```", "```java\n        private final UserProfiles profiles;\n    ```", "```java\n        public UserGreeting(UserProfiles profiles) {\n    ```", "```java\n            this.profiles = profiles;\n    ```", "```java\n        }\n    ```", "```java\n        public String formatGreeting(UserId id) {\n    ```", "```java\n            return String.format(\"Hello and Welcome, %s\",\n    ```", "```java\n                    profiles.fetchNicknameFor(id));\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    public interface UserProfiles {\n    ```", "```java\n        String fetchNicknameFor(UserId id);\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.Mock;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n        private static final UserId USER_ID = new     UserId(\"1234\");\n    ```", "```java\n    @Mock\n    ```", "```java\n        private UserProfiles profiles;\n    ```", "```java\n        @Test\n    ```", "```java\n        void formatsGreetingWithName() {\n    ```", "```java\n            var greeting = new UserGreeting(profiles);\n    ```", "```java\n            String actual =\n    ```", "```java\n                   greeting.formatGreeting(USER_ID);\n    ```", "```java\n            assertThat(actual)\n    ```", "```java\n                    .isEqualTo(\"Hello and welcome, Alan\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package examples;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.Mock;\n    ```", "```java\n    import org.mockito.Mockito;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    import static org.assertj.core.api.Assertions.assertThat;\n    ```", "```java\n    import static org.mockito.Mockito.*;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class UserGreetingTest {\n    ```", "```java\n        private static final UserId USER_ID = new     UserId(\"1234\");\n    ```", "```java\n        @Mock\n    ```", "```java\n        private UserProfiles profiles;\n    ```", "```java\n        @Test\n    ```", "```java\n        void formatsGreetingWithName() {\n    ```", "```java\n            when(profiles.fetchNicknameFor(USER_ID))\n    ```", "```java\n               .thenReturn(\"Alan\");\n    ```", "```java\n            var greeting = new UserGreeting(profiles);\n    ```", "```java\n            String actual =\n    ```", "```java\n                   greeting.formatGreeting(USER_ID);\n    ```", "```java\n            assertThat(actual)\n    ```", "```java\n                    .isEqualTo(\"Hello and welcome, Alan\");\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n@ExtendWith(MockitoExtension.class)\nclass WelcomeEmailTest {\n    @Mock\n    private MailServer mailServer;\n    @Test\n    public void sendsWelcomeEmail() {\n        var notifications\n                 = new UserNotifications( mailServer );\n        notifications.welcomeNewUser(\"test@example.com\");\n        verify(mailServer).sendEmail(\"test@example.com\",\n                \"Welcome!\",\n                \"Welcome to your account\");\n    }\n}\n```", "```java\npackage examples2;\nimport examples.UserGreeting;\nimport examples.UserId;\nimport examples.UserProfiles;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.jupiter.MockitoExtension;\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockito.ArgumentMatchers.any;\nimport static org.mockito.Mockito.when;\n@ExtendWith(MockitoExtension.class)\npublic class UserGreetingTest {\n    @Mock\n    private UserProfiles profiles;\n    @Test\n    void formatsGreetingWithName() {\n      when(profiles.fetchNicknameFor(any()))\n          .thenReturn(\"Alan\");\n        var greeting = new UserGreeting(profiles);\n        String actual =\n          greeting.formatGreeting(new UserId(\"\"));\n        assertThat(actual)\n          .isEqualTo(\"Hello and welcome, Alan\");\n    }\n}\n```", "```java\n    @Test\n    public void rejectsInvalidEmailRecipient() {\n        doThrow(new IllegalArgumentException())\n            .when(mailServer).sendEmail(any(),any(),any());\n        var notifications\n            = new UserNotifications( mailServer );\n        assertThatExceptionOfType(NotificationFailureException.class)\n                .isThrownBy(()->notifications\n                    .welcomeNewUser(\"not-an-email-address\"));\n    }\n```", "```java\n@ExtendWith(MockitoExtension.class)\npublic class WordSelectionTest {\n    @Mock\n    private WordRepository repository;\n    @Mock\n    private RandomNumbers random;\n    @Test\n    public void reportsWordNotFound() {\n        doThrow(new WordRepositoryException())\n                .when(repository)\n                  .fetchWordByNumber(anyInt());\n        var selection = new WordSelection(repository,\n                                          random);\n        assertThatExceptionOfType(WordSelectionException.class)\n                .isThrownBy(\n                        ()->selection.getRandomWord());\n    }\n}\n```"]