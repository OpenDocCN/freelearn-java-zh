["```java\npublic class UdpReceiver {\n```", "```java\n  public static void main(String[] args){\n```", "```java\n    try(DatagramSocket ds = new DatagramSocket(3333)){\n```", "```java\n       DatagramPacket dp = \n```", "```java\n                          new DatagramPacket(new byte[16], 16);\n```", "```java\n       ds.receive(dp);\n```", "```java\n       for(byte b: dp.getData()){\n```", "```java\n           System.out.print(Character.toString(b));\n```", "```java\n       }\n```", "```java\n    } catch (Exception ex){\n```", "```java\n            ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\npublic class UdpSender {\n```", "```java\n  public static void main(String[] args) {\n```", "```java\n    try(DatagramSocket ds = new DatagramSocket()){\n```", "```java\n       String msg = \"Hi, there! How are you?\";\n```", "```java\n       InetAddress address = \n```", "```java\n                            InetAddress.getByName(\"127.0.0.1\");\n```", "```java\n       DatagramPacket dp = new DatagramPacket(msg.getBytes(), \n```", "```java\n                                  msg.length(), address, 3333);\n```", "```java\n       ds.send(dp);\n```", "```java\n    } catch (Exception ex){\n```", "```java\n        ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\npublic class UdpReceiver2 {\n```", "```java\n public static void main(String[] args){\n```", "```java\n    try(DatagramSocket ds = new DatagramSocket(3333)){\n```", "```java\n       DatagramPacket dp = \n```", "```java\n                          new DatagramPacket(new byte[30], 30);\n```", "```java\n       while(true){\n```", "```java\n          ds.receive(dp);\n```", "```java\n          for(byte b: dp.getData()){\n```", "```java\n              System.out.print(Character.toString(b));\n```", "```java\n          }\n```", "```java\n          System.out.println(); //added here to have end-of-\n```", "```java\n             // line after receiving (and printing) the message\n```", "```java\n       }\n```", "```java\n    } catch (Exception ex){\n```", "```java\n            ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\npublic class TcpServer {\n```", "```java\n  public static void main(String[] args){\n```", "```java\n    try(Socket s = new ServerSocket(3333).accept();\n```", "```java\n      DataInputStream dis = \n```", "```java\n                      new DataInputStream(s.getInputStream());\n```", "```java\n      DataOutputStream dout = \n```", "```java\n                     new DataOutputStream(s.getOutputStream());\n```", "```java\n      BufferedReader console = \n```", "```java\n        new BufferedReader(new InputStreamReader(System.in))){\n```", "```java\n        while(true){\n```", "```java\n           String msg = dis.readUTF();\n```", "```java\n           System.out.println(\"Client said: \" + msg);\n```", "```java\n           if(\"end\".equalsIgnoreCase(msg)){\n```", "```java\n               break;\n```", "```java\n           }\n```", "```java\n           System.out.print(\"Say something: \");\n```", "```java\n           msg = console.readLine();\n```", "```java\n           dout.writeUTF(msg);\n```", "```java\n           dout.flush();\n```", "```java\n           if(\"end\".equalsIgnoreCase(msg)){\n```", "```java\n               break;\n```", "```java\n           }\n```", "```java\n        }\n```", "```java\n    } catch(Exception ex) {\n```", "```java\n      ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\npublic class TcpClient {\n```", "```java\n  public static void main(String[] args) {\n```", "```java\n    try(Socket s = new Socket(\"localhost\",3333);\n```", "```java\n      DataInputStream dis = \n```", "```java\n                       new DataInputStream(s.getInputStream());\n```", "```java\n      DataOutputStream dout = \n```", "```java\n                     new DataOutputStream(s.getOutputStream());\n```", "```java\n      BufferedReader console = \n```", "```java\n         new BufferedReader(new InputStreamReader(System.in))){\n```", "```java\n         String prompt = \"Say something: \";\n```", "```java\n         System.out.print(prompt);\n```", "```java\n         String msg;\n```", "```java\n         while ((msg = console.readLine()) != null) {\n```", "```java\n             dout.writeUTF( msg);\n```", "```java\n             dout.flush();\n```", "```java\n             if (msg.equalsIgnoreCase(\"end\")) {\n```", "```java\n                 break;\n```", "```java\n             }\n```", "```java\n             msg = dis.readUTF();\n```", "```java\n             System.out.println(\"Server said: \" +msg);\n```", "```java\n             if (msg.equalsIgnoreCase(\"end\")) {\n```", "```java\n                 break;\n```", "```java\n             }\n```", "```java\n             System.out.print(prompt);\n```", "```java\n         }\n```", "```java\n    } catch(Exception ex){\n```", "```java\n          ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nscheme:[//authority]path[?query][#fragment]\n```", "```java\nfile:src/main/resources/hello.txt\n```", "```java\n[userinfo@]host[:port]\n```", "```java\nkey1=value1&key2=value2\n```", "```java\ntry {\n```", "```java\n  ClassLoader classLoader = \n```", "```java\n              Thread.currentThread().getContextClassLoader(); \n```", "```java\n  String file = classLoader.getResource(\"hello.txt\").getFile(); \n```", "```java\n  URL url = new URL(file);\n```", "```java\n     try(InputStream is = url.openStream()){\n```", "```java\n        int data = is.read();\n```", "```java\n        while(data != -1){\n```", "```java\n            System.out.print((char) data); //prints: Hello!\n```", "```java\n            data = is.read();\n```", "```java\n        }            \n```", "```java\n     }\n```", "```java\n} catch (Exception e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\ntry {\n```", "```java\n   URL url = \n```", "```java\n       new URL(\"https://www.google.com/search?q=Java&num=10\");\n```", "```java\n   System.out.println(url.getPath()); //prints: /search\n```", "```java\n   System.out.println(url.getFile()); \n```", "```java\n                               //prints: /search?q=Java&num=10\n```", "```java\n   URLConnection conn = url.openConnection();\n```", "```java\n   conn.setRequestProperty(\"Accept\", \"text/html\");\n```", "```java\n   conn.setRequestProperty(\"Connection\", \"close\");\n```", "```java\n   conn.setRequestProperty(\"Accept-Language\", \"en-US\");\n```", "```java\n   conn.setRequestProperty(\"User-Agent\", \"Mozilla/5.0\");\n```", "```java\n   try(InputStream is = conn.getInputStream();\n```", "```java\n    BufferedReader br = \n```", "```java\n            new BufferedReader(new InputStreamReader(is))){\n```", "```java\n      String line;\n```", "```java\n      while ((line = br.readLine()) != null){\n```", "```java\n         System.out.println(line);\n```", "```java\n      }\n```", "```java\n   }\n```", "```java\n} catch (Exception e) {\n```", "```java\n  e.printStackTrace();\n```", "```java\n}\n```", "```java\ntry {\n```", "```java\n    URL url = new URL(\"http://localhost:3333/something\");\n```", "```java\n    URLConnection conn = url.openConnection();\n```", "```java\n    conn.setRequestProperty(\"Method\", \"POST\");\n```", "```java\n    conn.setRequestProperty(\"User-Agent\", \"Java client\");\n```", "```java\n    conn.setDoOutput(true);\n```", "```java\n    OutputStream os = conn.getOutputStream()\n```", "```java\n    OutputStreamWriter osw = new OutputStreamWriter(os);\n```", "```java\n    osw.write(\"parameter1=value1&parameter2=value2\");\n```", "```java\n    osw.flush();\n```", "```java\n    osw.close();\n```", "```java\n    InputStream is = conn.getInputStream();\n```", "```java\n    BufferedReader br = \n```", "```java\n               new BufferedReader(new InputStreamReader(is));\n```", "```java\n    String line;\n```", "```java\n    while ((line = br.readLine()) != null) {\n```", "```java\n        System.out.println(line);\n```", "```java\n    }\n```", "```java\n    br.close();\n```", "```java\n} catch (Exception e) {\n```", "```java\n    e.printStackTrace();\n```", "```java\n}\n```", "```java\ntry {\n```", "```java\n    URL url = new URL(\"http://localhost:3333/something\");\n```", "```java\n    URLConnection conn = url.openConnection();\n```", "```java\n    conn.setRequestProperty(\"Method\", \"POST\");\n```", "```java\n    conn.setRequestProperty(\"User-Agent\", \"Java client\");\n```", "```java\n    conn.setDoOutput(true);\n```", "```java\n    try (OutputStream os = conn.getOutputStream();\n```", "```java\n         OutputStreamWriter osw = new OutputStreamWriter(os)) {\n```", "```java\n       osw.write(\"parameter1=value1&parameter2=value2\");\n```", "```java\n       osw.flush();\n```", "```java\n    }\n```", "```java\n    try (InputStream is = conn.getInputStream();\n```", "```java\n         BufferedReader br = \n```", "```java\n                new BufferedReader(new InputStreamReader(is))) {\n```", "```java\n       String line;\n```", "```java\n       while ((line = br.readLine()) != null) {\n```", "```java\n           System.out.println(line);  //prints server response \n```", "```java\n       }\n```", "```java\n    }\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nprivate static Properties properties;\n```", "```java\npublic static void main(String[] args){\n```", "```java\n   ClassLoader classLoader =  \n```", "```java\n                Thread.currentThread().getContextClassLoader();\n```", "```java\n   properties = Prop.getProperties(classLoader, \n```", "```java\n                                             \"app.properties\");\n```", "```java\n   int port = Prop.getInt(properties, \"port\");\n```", "```java\n   try {\n```", "```java\n      HttpServer server = \n```", "```java\n             HttpServer.create(new InetSocketAddress(port), 0);\n```", "```java\n      server.createContext(\"/something\", new PostHandler());\n```", "```java\n      server.setExecutor(null);\n```", "```java\n      server.start();\n```", "```java\n   } catch (IOException e) {\n```", "```java\n        e.printStackTrace();\n```", "```java\n   }\n```", "```java\n} \n```", "```java\nprivate static class PostHandler implements HttpHandler {\n```", "```java\n    public void handle(HttpExchange exch) {\n```", "```java\n       System.out.println(exch.getRequestURI());   \n```", "```java\n                                        //prints: /something  \n```", "```java\n       System.out.println(exch.getHttpContext().getPath());\n```", "```java\n                                        //prints: /something\n```", "```java\n       try (InputStream is = exch.getRequestBody();\n```", "```java\n            BufferedReader in = \n```", "```java\n               new BufferedReader(new InputStreamReader(is));\n```", "```java\n            OutputStream os = exch.getResponseBody()){\n```", "```java\n          System.out.println(\"Received as body:\");\n```", "```java\n          in.lines().forEach(l -> System.out.println(\n```", "```java\n                                                    \"  \" + l));\n```", "```java\n          String confirm = \"Got it! Thanks.\";\n```", "```java\n          exch.sendResponseHeaders(200, confirm.length());\n```", "```java\n          os.write(confirm.getBytes());\n```", "```java\n       } catch (Exception ex){\n```", "```java\n            ex.printStackTrace();\n```", "```java\n       }\n```", "```java\n    }\n```", "```java\n}\n```", "```java\n        <dependency> \n```", "```java\n            <groupId>com.packt.learnjava</groupId> \n```", "```java\n            <artifactId>common</artifactId> \n```", "```java\n            <version>1.0-SNAPSHOT</version> \n```", "```java\n        </dependency> \n```", "```java\npublic static Properties getProperties(ClassLoader classLoader,\n```", "```java\n                                               String fileName){\n```", "```java\n    String file = classLoader.getResource(fileName).getFile();\n```", "```java\n    Properties properties = new Properties();\n```", "```java\n    try(FileInputStream fis = new FileInputStream(file)){\n```", "```java\n         properties.load(fis);\n```", "```java\n    } catch (Exception ex) {\n```", "```java\n         ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n    return properties;\n```", "```java\n}\n```", "```java\npublic static int getInt(Properties properties, String name){\n```", "```java\n    return Integer.parseInt(properties.getProperty(name));\n```", "```java\n}\n```", "```java\n    mvn clean package\n    ```", "```java\njava -cp target/server-1.0-SNAPSHOT.jar:          \\\n         ../common/target/common-1.0-SNAPSHOT.jar \\\n         com.packt.learnjava.network.http.Server\n```", "```java\n    mvn clean package\n    ```", "```java\njava -cp target/examples-1.0-SNAPSHOT.jar:       \\\n         com.packt.learnjava.ch11_network.UrlPost\n```", "```java\nHttpClient httpClient = HttpClient.newBuilder()\n```", "```java\n     .version(HttpClient.Version.HTTP_2) // default\n```", "```java\n     .build();\n```", "```java\nHttpRequest req = HttpRequest.newBuilder()\n```", "```java\n     .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n     .GET()        // default\n```", "```java\n     .build();\n```", "```java\ntry {\n```", "```java\n HttpResponse<String> resp = \n```", "```java\n          httpClient.send(req, BodyHandlers.ofString());\n```", "```java\n System.out.println(\"Response: \" + \n```", "```java\n               resp.statusCode() + \" : \" + resp.body());\n```", "```java\n} catch (Exception ex) {\n```", "```java\n   ex.printStackTrace();\n```", "```java\n}\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\ntry (InputStream is = exch.getRequestBody();\n```", "```java\n     BufferedReader in = \n```", "```java\n            new BufferedReader(new InputStreamReader(is));\n```", "```java\n     OutputStream os = exch.getResponseBody()){\n```", "```java\n   System.out.println(\"Received as body:\");\n```", "```java\n   in.lines().forEach(l -> System.out.println(\"  \" + l));\n```", "```java\n   String confirm = \"Got it! Thanks.\";\n```", "```java\n   exch.sendResponseHeaders(200, confirm.length());\n```", "```java\n   os.write(confirm.getBytes());\n```", "```java\n   System.out.println();\n```", "```java\n} catch (Exception ex){\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nHttpClient httpClient = HttpClient.newBuilder()\n```", "```java\n        .version(Version.HTTP_2)  // default\n```", "```java\n        .build();\n```", "```java\nHttpRequest req = HttpRequest.newBuilder()\n```", "```java\n        .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n        .POST(BodyPublishers.ofString(\"Hi there!\"))\n```", "```java\n        .build();\n```", "```java\ntry {\n```", "```java\n    HttpResponse<String> resp = \n```", "```java\n                 httpClient.send(req, BodyHandlers.ofString());\n```", "```java\n    System.out.println(\"Response: \" + \n```", "```java\n                      resp.statusCode() + \" : \" + resp.body());\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\nHttpRequest req = HttpRequest.newBuilder()\n```", "```java\n        .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n        .GET()   // default\n```", "```java\n        .build();\n```", "```java\nCompletableFuture<Void> cf = httpClient\n```", "```java\n        .sendAsync(req, BodyHandlers.ofString())\n```", "```java\n        .thenAccept(resp -> System.out.println(\"Response: \" +\n```", "```java\n                   resp.statusCode() + \" : \" + resp.body()));\n```", "```java\nSystem.out.println(\"The request was sent asynchronously...\");\n```", "```java\ntry {\n```", "```java\n    System.out.println(\"CompletableFuture get: \" +\n```", "```java\n                                cf.get(5, TimeUnit.SECONDS));\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Exit the client...\");\n```", "```java\nvoid method(HttpResponse resp){\n```", "```java\n    System.out.println(\"Response: \" + \n```", "```java\n                      resp.statusCode() + \" : \" + resp.body());\n```", "```java\n}\n```", "```java\nCompletableFuture<String> cf = httpClient\n```", "```java\n                .sendAsync(req, BodyHandlers.ofString())\n```", "```java\n                .thenApply(resp -> \"Server responded: \" + \n```", "```java\n                 resp.body());\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\nHttpRequest req = HttpRequest.newBuilder()\n```", "```java\n        .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n        .POST(BodyPublishers.ofString(\"Hi there!\"))\n```", "```java\n        .build();\n```", "```java\nCompletableFuture<String> cf = httpClient\n```", "```java\n        .sendAsync(req, BodyHandlers.ofString())\n```", "```java\n        .thenApply(resp -> \"Server responded: \" + resp.body());\n```", "```java\nSystem.out.println(\"The request was sent asynchronously...\");\n```", "```java\ntry {\n```", "```java\n    System.out.println(\"CompletableFuture get: \" +\n```", "```java\n                                cf.get(5, TimeUnit.SECONDS));\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Exit the client...\");\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\nList<CompletableFuture<String>> cfs = new ArrayList<>();\n```", "```java\nList<String> nums = List.of(\"1\", \"2\", \"3\");\n```", "```java\nfor(String num: nums){\n```", "```java\n    HttpRequest req = HttpRequest.newBuilder()\n```", "```java\n           .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n           .POST(BodyPublishers.ofString(\"Hi! My name is \" \n```", "```java\n                                               + num + \".\"))\n```", "```java\n           .build();\n```", "```java\n    CompletableFuture<String> cf = httpClient\n```", "```java\n           .sendAsync(req, BodyHandlers.ofString())\n```", "```java\n           .thenApply(rsp -> \"Server responded to msg \" + num + \n```", "```java\n                 \": \" + rsp.statusCode() + \" : \" + rsp.body());\n```", "```java\n    cfs.add(cf);\n```", "```java\n}\n```", "```java\nSystem.out.println(\"The requests were sent asynchronously...\");\n```", "```java\ntry {\n```", "```java\n    for(CompletableFuture<String> cf: cfs){\n```", "```java\n        System.out.println(\"CompletableFuture get: \" + \n```", "```java\n                                  cf.get(5, TimeUnit.SECONDS));\n```", "```java\n    }\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Exit the client...\");\n```", "```java\nExecutorService pool = Executors.newFixedThreadPool(2);\n```", "```java\nHttpClient httpClient = HttpClient.newBuilder().executor(pool).build();\n```", "```java\nList<CompletableFuture<String>> cfs = new ArrayList<>();\n```", "```java\nList<String> nums = List.of(\"1\", \"2\", \"3\");\n```", "```java\nfor(String num: nums){\n```", "```java\n    HttpRequest req = HttpRequest.newBuilder()\n```", "```java\n          .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n          .POST(BodyPublishers.ofString(\"Hi! My name is \" \n```", "```java\n                                                + num + \".\"))\n```", "```java\n          .build();\n```", "```java\n    CompletableFuture<String> cf = httpClient\n```", "```java\n          .sendAsync(req, BodyHandlers.ofString())\n```", "```java\n          .thenApply(rsp -> \"Server responded to msg \" + num + \n```", "```java\n                 \": \" + rsp.statusCode() + \" : \" + rsp.body());\n```", "```java\n    cfs.add(cf);\n```", "```java\n}\n```", "```java\nSystem.out.println(\"The requests were sent asynchronously...\");\n```", "```java\ntry {\n```", "```java\n    for(CompletableFuture<String> cf: cfs){\n```", "```java\n        System.out.println(\"CompletableFuture get: \" + \n```", "```java\n                                  cf.get(5, TimeUnit.SECONDS));\n```", "```java\n    }\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Exit the client...\");\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\nHttpRequest req = HttpRequest.newBuilder()\n```", "```java\n   .uri(URI.create(\"http://localhost:3333/something\"))\n```", "```java\n    .GET()\n```", "```java\n    .build();\n```", "```java\nCompletableFuture cf = httpClient\n```", "```java\n    .sendAsync(req, BodyHandlers.ofString(), \n```", "```java\n       (PushPromiseHandler) HttpClientDemo::applyPushPromise);\n```", "```java\nSystem.out.println(\"The request was sent asynchronously...\");\n```", "```java\ntry {\n```", "```java\n    System.out.println(\"CompletableFuture get: \" + \n```", "```java\n                                cf.get(5, TimeUnit.SECONDS));\n```", "```java\n} catch (Exception ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(\"Exit the client...\");\n```", "```java\nvoid applyPushPromise(HttpRequest initReq, HttpRequest pushReq,\n```", "```java\n Function<BodyHandler, CompletableFuture<HttpResponse>> \n```", "```java\n acceptor){\n```", "```java\n  CompletableFuture<Void> cf = \n```", "```java\n   acceptor.apply(BodyHandlers.ofString())\n```", "```java\n  .thenAccept(resp -> System.out.println(\"Got pushed response \" \n```", "```java\n                                                + resp.uri()));\n```", "```java\n  try {\n```", "```java\n        System.out.println(\"Pushed completableFuture get: \" + \n```", "```java\n                                  cf.get(1, TimeUnit.SECONDS));\n```", "```java\n  } catch (Exception ex) {\n```", "```java\n        ex.printStackTrace();\n```", "```java\n  }\n```", "```java\n  System.out.println(\"Exit the applyPushPromise function...\");\n```", "```java\n}\n```", "```java\nclass WsClient implements WebSocket.Listener {\n```", "```java\n    @Override\n```", "```java\n    public void onOpen(WebSocket webSocket) {\n```", "```java\n        System.out.println(\"Connection established.\");\n```", "```java\n        webSocket.sendText(\"Some message\", true);\n```", "```java\n        Listener.super.onOpen(webSocket);\n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public CompletionStage onText(WebSocket webSocket, \n```", "```java\n                             CharSequence data, boolean last) {\n```", "```java\n        System.out.println(\"Method onText() got data: \" + \n```", "```java\n                                                         data);\n```", "```java\n        if(!webSocket.isOutputClosed()) {\n```", "```java\n            webSocket.sendText(\"Another message\", true);\n```", "```java\n        }\n```", "```java\n        return Listener.super.onText(webSocket, data, last);\n```", "```java\n    }\n```", "```java\n    @Override\n```", "```java\n    public CompletionStage onClose(WebSocket webSocket, \n```", "```java\n                               int statusCode, String reason) {\n```", "```java\n        System.out.println(\"Closed with status \" + \n```", "```java\n                           statusCode + \", reason: \" + reason);\n```", "```java\n        return Listener.super.onClose(webSocket, \n```", "```java\n                                           statusCode, reason);\n```", "```java\n    }\n```", "```java\n}\n```", "```java\nHttpClient httpClient = HttpClient.newHttpClient();\n```", "```java\nWebSocket webSocket = httpClient.newWebSocketBuilder()\n```", "```java\n    .buildAsync(URI.create(\"ws://echo.websocket.events\"), \n```", "```java\n                           new WsClient()).join();\n```", "```java\nSystem.out.println(\"The WebSocket was created and ran asynchronously.\");\n```", "```java\ntry {\n```", "```java\n    TimeUnit.MILLISECONDS.sleep(200);\n```", "```java\n} catch (InterruptedException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nwebSocket.sendClose(WebSocket.NORMAL_CLOSURE, \"Normal closure\")\n```", "```java\n         .thenRun(() -> System.out.println(\"Close is sent.\"));\n```", "```java\n      URL url = new URL(\"http://www.java.com/something?par=42\");\n      System.out.print(url.getPath());  \n      System.out.println(url.getFile());   \n    ```"]