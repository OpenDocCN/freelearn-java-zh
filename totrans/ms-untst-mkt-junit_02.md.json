["```java\n    task firstTask << {\n      println 'Hello world.'\n    }\n    ```", "```java\n    :firstTask\n    Hello world.\n    BUILD SUCCESSFUL\n\n    ```", "```java\nmethod style task definition and subtask ordering:\n```", "```java\ntask aTask(){\n  doLast{\n   println 'Executing last.'\n  }\n\n  doFirst {\n        println 'Running 1st'\n  }\n}\n```", "```java\n:aTask\nRunning 1st\nExecuting last.\n\nBUILD SUCCESSFUL\n\n```", "```java\nsecondTask.dependsOn 'firstTask'\n```", "```java\ntask secondTask (dependsOn: 'firstTask') {\n\n  doLast {\n        println 'Running last'\n    }\n\n   doFirst {\n        println 'Running first'\n    }\n\n}\n```", "```java\n:firstTask\nHello world.\n:secondTask\nRunning first\nRunning last\n\n```", "```java\n    apply plugin: 'eclipse'\n    ```", "```java\n    :eclipseProject\n    :eclipse\n    BUILD SUCCESSFUL\n\n    ```", "```java\n    :eclipseClasspath\n    :eclipseJdt\n    :eclipseProject\n    :eclipse\n\n    ```", "```java\n        repositories {\n            mavenCentral()\n        }\n        ```", "```java\n        repositories {\n            mavenLocal()\n        }\n        ```", "```java\n        repositories {\n            maven {\n                name = 'Our Maven repository name'\n                url = '<intranet URL>'\n            }\n        }\n        ```", "```java\n        repositories {\n            mavenRepo(name: '<name of the repository>', url: '<URL>')\n        }\n        ```", "```java\n        repositories {\n            maven(name: repository name') {\n                credentials {\n                    username = 'username'\n                    password = 'password'\n                }\n                url = '<URL>'\n            }\n        }\n        ```", "```java\n    repositories {\n        ivy(url: '<URL>', name: '<Name>')\n        ivy {     \n        credentials\n         { \n            username = 'user name'\n                password = 'password'\n          }\n            url = '<URL>'\n        }\n    }\n    ```", "```java\n    repositories {\n        flatDir(dir: '../thirdPartyFolder', name: '3rd party library')\n        flatDir {\n            dirs '../springLib', '../lib/apacheLib', '../lib/junit' \n            name = ' Configured libraries for spring, apache and JUnit'\n        }\n    }\n    ```", "```java\n    apply plugin: 'eclipse'\n    apply plugin: 'java'\n    ```", "```java\n    repositories {\n        flatDir(dir: '../lib', name: 'JUnit Library')\n    }\n    ```", "```java\n    dependencies {\n        testCompile group: 'junit', name: 'junit', version: '4.11'\n        testCompile group: '', name: 'hamcrest-core', version: '1.3'\n    }\n    ```", "```java\n    dependencies {\n        testCompile 'junit:junit:4.11', ':hamcrest-core:1.3'\n    }\n    ```", "```java\n        public enum EnvironmentType {\n          DEV, PROD, TEST\n        }\n        ```", "```java\n        package com.packt.gradle;\n\n        import java.util.ResourceBundle;\n\n        public class Environment {\n          public String getName() {\n            ResourceBundle resourceBundle = ResourceBundle.getBundle(\"environment\");\n            return resourceBundle.getString(\"env\");\n          }\n        }\n        ```", "```java\n        package com.packt.gradle;\n        public class EnvironmentService {\n\n          public EnvironmentType getEnvironmentType() {\n            return getEnvironmentType(new Environment().getName());\n          }\n          public EnvironmentType getEnvironmentType(String name) {\n            if(\"dev\".equals(name)) {\n              return EnvironmentType.DEV;\n            }else if(\"prod\".equals(name)) {\n              return EnvironmentType.PROD;\n            }\n            return null;\n          }\n        }\n        ```", "```java\n        package com.packt.gradle;\n        import static org.junit.Assert.*;\n        import static org.hamcrest.CoreMatchers.*;\n        import org.junit.Test;\n\n        public class EnvironmentServiceTest {\n        EnvironmentService service = new EnvironmentService();\n        @Test\n        public void returns_NULL_when_environment_not_configured(){\n            assertNull(service.getEnvironmentType(\"xyz\"));\t}\n\n        @Test\n        public void production_environment_configured(){\n            EnvironmentType environmentType = service.getEnvironmentType(\"prod\");\n            assertThat(environmentType, is(EnvironmentType.PROD));\n          }\n        }\n        ```", "```java\n    export M2_HOME=/home/<location of Maven installation>\n    export PATH=${PATH}:${M2_HOME}/bin\n    ```", "```java\n    export M2_HOME=/usr/local/<maven folder>\n    export PATH=${PATH}:${M2_HOME}/bin\n    ```", "```java\n     <groupId>org.packt</groupId>\n     <artifactId>Demo</artifactId>\n     <version>1.0-SNAPSHOT</version>\n     <packaging>jar</packaging>\n    ```", "```java\n     <name>Demo</name>\n\n    <url>http://maven.apache.org</url>\n    ```", "```java\n<dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.11</version>\n      <scope>test</scope>\n    </dependency>\n  </dependencies\n```", "```java\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n</dependency>\n```", "```java\n    <?xml version=\"1.0\"?>\n    <project name=\"Demo\"  basedir=\".\">\n      <property name=\"src.dir\" location=\"src/main/java\" />\n      <property name=\"build.dir\" location=\"bin\" />\n      <property name=\"dist.dir\" location=\"ant_output\" />\n    </project>\n    ```", "```java\n      <target name=\"clean\">\n        <delete dir=\"${build.dir}\" />\n        <delete dir=\"${dist.dir}\" />\n      </target>\n      <target name=\"makedir\">\n        <mkdir dir=\"${build.dir}\" />\n        <mkdir dir=\"${dist.dir}\" />\n      </target>\n    ```", "```java\n      <target name=\"compile\" depends=\"clean, makedir\">\n        <javac srcdir=\"${src.dir}\" destdir=\"${build.dir}\">\n        </javac>\n      </target>\n    ```", "```java\n    <target name=\"jar\" depends=\"compile\">\n        <jar destfile=\"${dist.dir}\\${ant.project.name}.jar\" basedir=\"${build.dir}\">\n        </jar>\n      </target>\n    ```", "```java\n      <property name=\"test.dir\" location=\"src/test/java\" />\n      <property name=\"lib.dir\" location=\"../../lib\" />\n      <property name=\"report.dir\" location=\"${dist.dir}/report\" />\n    ```", "```java\n      <path id=\"jclass.path\">\n        <fileset dir=\"${lib.dir}/\">\n          <include name=\"**/*\" />\n        </fileset>\n        <pathelement location=\"${build.dir}\" />\n      </path>\n    ```", "```java\n     <target name=\"testcompile\" depends=\"compile\">\n        <javac srcdir=\"${test.dir}\" destdir=\"${build.dir}\">\n          <classpath refid=\"jclass.path\" />\n        </javac>\n      </target>\n    ```", "```java\n      <target name=\"test\" depends=\"testcompile\">\n        <junit printsummary=\"on\" fork=\"true\" haltonfailure=\"yes\">\n          <classpath refid=\"jclass.path\" />\n          <formatter type=\"xml\" />\n          <batchtest todir=\"${report.dir}\">\n            <fileset dir=\"${test.dir}\">\n              <include name=\"**/*Test*.java\" />\n            </fileset>\n          </batchtest>\n        </junit>\n      </target>\n    ```", "```java\n    Executing Maven:  -B -f D:\\Packt\\chapter02\\maven\\Demo\\pom.xml install\n    [INFO] Scanning for projects...\n\n    [INFO] Building Demo 1.0-SNAPSHOT\n     [INFO] Downloading: http://repo.maven.apache.org/maven2/org/apache/maven/plugin\n    (226 KB at 33.4 KB/sec)\n    [INFO] BUILD SUCCESS\n     [INFO] Total time: 2:28.150s\n    [\n     [JENKINS] Archiving D:\\Packt\\chapter02\\maven\\Demo\\pom.xml to org.packt/Demo/1.0-SNAPSHOT/Demo-1.0-SNAPSHOT.pom\n    [JENKINS] Archiving D:\\Packt\\chapter02\\maven\\Demo\\target\\Demo-1.0-SNAPSHOT.jar to org.packt/Demo/1.0-SNAPSHOT/Demo-1.0-SNAPSHOT.jar\n    channel stopped\n    Finished: SUCCESS\n\n    ```"]