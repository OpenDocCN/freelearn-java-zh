["```java\n    <dependency> \n      <groupId>org.springframework</groupId> \n      <artifactId>spring-context</artifactId> \n      <version>5.0.5.RELEASE</version> \n    </dependency> \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<beans xmlns=\"http://www.springframework.org/schema/beans\" \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n    xmlns:context=\"http://www.springframework.org/schema/context\" \n   xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\"> \n        <context:component-scan base-package=\"packt.jee.eclipse.spring\"/> \n</beans> \n```", "```java\npackage packt.jee.eclipse.spring; \n\nimport org.springframework.stereotype.Component; \n\n@Component \npublic class CourseDAO { \n\n} \n```", "```java\npackage packt.jee.eclipse.spring; \n\nimport org.springframework.beans.factory.annotation.Autowired; \nimport org.springframework.stereotype.Component; \n\n@Component \npublic class CourseService { \n\n  @Autowired \n  private CourseDAO courseDAO; \n\n  public CourseDAO getCourseDAO() { \n    return courseDAO; \n  } \n} \n```", "```java\npackage packt.jee.eclipse.spring; \n\nimport org.springframework.context.ApplicationContext; \nimport org.springframework.context.support.ClassPathXmlApplicationContext; \n\npublic class SpringMain { \n\n  public static void main (String[] args) { \n    //create ApplicationContext \n    ApplicationContext ctx = new \n     ClassPathXmlApplicationContext(\"context.xml\"); \n    //Get bean \n    CourseService courseService = (CourseService) \n     ctx.getBean(\"courseService\"); \n    //Get and print CourseDAO. It should not be null \n    System.out.println(\"CourseDAO = \" + \n     courseService.getCourseDAO()); \n  } \n} \n```", "```java\n@Component \npublic class CourseService { \n\n  private CourseDAO courseDAO; \n\n  @Autowired \n  public CourseService (CourseDAO courseDAO) { \n    this.courseDAO = coueseDAO; \n  } \n\n  public CourseDAO getCourseDAO() { \n    return courseDAO; \n  } \n} \n```", "```java\n@Component \npublic class CourseService { \n\n  private CourseDAO courseDAO; \n\n  @Autowired \n  public void setCourseDAO (CourseDAO courseDAO) { \n    this.courseDAO = courseDAO; \n  } \n\n  public CourseDAO getCourseDAO() { \n    return courseDAO; \n  } \n} \n```", "```java\n  public static void main (String[] args) { \n    //create ApplicationContext \n    ApplicationContext ctx = new \n     ClassPathXmlApplicationContext(\"context.xml\"); \n    //call and print ctx.getBean first time \n    System.out.println(\"Course Service 1 - \" + \n     ctx.getBean(\"courseService\"));    System.out.println(\"Course Service 2 - \" + \n     ctx.getBean(\"courseService\")); \n  } \n```", "```java\n@Component \n@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) \npublic class CourseService { \n  //content remains the same \n} \n```", "```java\npublic interface ICourseDAO { \n} \n```", "```java\n@Component \n@Qualifier(\"courseDAO\") \npublic class CourseDAO implements ICourseDAO { \n} \n```", "```java\n@Component \n@Qualifier(\"courseDAO1\") \npublic class CourseDAO1 implements ICourseDAO { \n} \n```", "```java\n@Component \npublic class CourseService { \n\n  @Autowired \n  private @Qualifier(\"courseDAO1\") ICourseDAO courseDAO; \n\n  public ICourseDAO getCourseDAO() { \n    return courseDAO; \n  } \n} \n```", "```java\n@Autowired \npublic void setCourseDAO (@Qualifier(\"courseDAO1\") ICourseDAO \n courseDAO) { \n  this.courseDAO = courseDAO; \n} \n```", "```java\n<!-- Processes application requests --> \n<servlet> \n  <servlet-name>appServlet</servlet-name> \n  <servlet- \n class>org.springframework.web.servlet.DispatcherServlet</servlet-class> \n  <init-param> \n    <param-name>contextConfigLocation</param-name> \n    <param-value>/WEB-INF/spring/appServlet/servlet- \n     context.xml</param-value> \n  </init-param> \n  <load-on-startup>1</load-on-startup> \n</servlet> \n```", "```java\n<annotation-driven /> \n```", "```java\n<resources mapping=\"/resources/**\" location=\"/resources/\" /> \n```", "```java\n<beans:bean \n class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"> \n  <beans:property name=\"prefix\" value=\"/WEB-INF/views/\" /> \n  <beans:property name=\"suffix\" value=\".jsp\" /> \n</beans:bean> \n```", "```java\n<context:component-scan base-package=\"packt.jee.course_management\" /> \n```", "```java\n@Controller \npublic class HomeController { \n\n  private static final Logger logger = \n   LoggerFactory.getLogger(HomeController.class); \n\n  /** \n   * Simply selects the home view to render by returning its name. \n   */ \n  @RequestMapping(value = \"/\", method = RequestMethod.GET) \n  public String home(Locale locale, Model model) { \n    logger.info(\"Welcome home! The client locale is {}.\", locale); \n\n    Date date = new Date(); \n    DateFormat dateFormat = \n DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.LONG, locale); \n\n    String formattedDate = dateFormat.format(date); \n\n    model.addAttribute(\"serverTime\", formattedDate ); \n\n    return \"home\"; \n  } \n} \n```", "```java\n<P>  The time on the server is ${serverTime}. </P> \n```", "```java\n<!-- Spring JDBC --> \n<dependency> \n  <groupId>org.springframework</groupId> \n  <artifactId>spring-jdbc</artifactId> \n  <version>${org.springframework-version}</version> \n</dependency> \n\n<!-- Apache DBCP --> \n<dependency> \n  <groupId>commons-dbcp</groupId> \n  <artifactId>commons-dbcp</artifactId> \n  <version>1.4</version> \n</dependency> \n\n<!-- MySQL --> \n<dependency> \n  <groupId>mysql</groupId> \n  <artifactId>mysql-connector-java</artifactId> \n  <version>8.0.9-rc</version> \n</dependency> \n```", "```java\nDriverManagerDataSource dataSource = new \n DriverManagerDataSource(); \ndataSource.setDriverClassName(\"com.mysql.jdbc.Driver\"); \ndataSource.setUrl(\"jdbc:mysql://localhost:3306/course_management\"); \ndataSource.setUsername(\"your_user_name\"); \ndataSource.setPassword(\"your_password\"); \n```", "```java\n<beans:bean id=\"dataSource\" \n  class=\"org.apache.commons.dbcp.BasicDataSource\" destroy- method=\"close\"> \n    <beans:property name=\"driverClassName\" \n value=\"com.mysql.jdbc.Driver\"/>  <beans:property name=\"url\" \n value=\"jdbc:mysql://localhost:3306/course_management\" /> \n  <beans:property name=\"username\" value=\"your_user_name\"/> \n  <beans:property name=\"password\" value=\"your_password\"/> \n</beans:bean> \n```", "```java\njdbc.driverClassName=com.mysql.jdbc.Driver \njdbc.url=jdbc:mysql://localhost:3306/course_management \njdbc.username=your_user_name \njdbc.password=your_password \n```", "```java\n<context:property-placeholder location=\"classpath:jdbc.properties\"/> \n```", "```java\n<beans:bean id=\"dataSource\" \n  class=\"org.apache.commons.dbcp.BasicDataSource\" destroy- method=\"close\"> \n    <beans:property name=\"driverClassName\" \n value=\"${jdbc.driverClassName}\"/> \n  <beans:property name=\"url\" value=\"${jdbc.url}\" /> \n  <beans:property name=\"username\" value=\"${jdbc.username}\"/> \n  <beans:property name=\"password\" value=\"${jdbc.password}\"/> \n</beans:bean> \n```", "```java\npublic class CourseDTO { \n  private int id; \n  private int credits; \n  private String name; \n\n  //skipped setters and getters to save space \n} \n```", "```java\n@Repository \npublic class CourseDAO { \n\n  private JdbcTemplate jdbcTemplate; \n\n  @Autowired \n  public void setDatasource (DataSource dataSource) { \n    jdbcTemplate = new JdbcTemplate(dataSource); \n  } \n} \n```", "```java\npublic List<CourseDTO> getCourses() { \n  List<CourseDTO> courses = jdbcTemplate.query(\"select * from \n  course\", \n    new CourseRowMapper()); \n\n  return courses; \n} \n\npublic static final class CourseRowMapper implements \n RowMapper<CourseDTO> { \n  @Override \n  public CourseDTO mapRow(ResultSet rs, int rowNum) throws \n   SQLException { \n    CourseDTO course = new CourseDTO(); \n    course.setId(rs.getInt(\"id\")); \n    course.setName(rs.getString(\"name\")); \n    course.setCredits(rs.getInt(\"credits\")); \n    return course; \n  } \n} \n```", "```java\npublic void addCourse (final CourseDTO course) { \n  KeyHolder keyHolder = new GeneratedKeyHolder(); \n  jdbcTemplate.update(new PreparedStatementCreator() { \n\n    @Override \n    public PreparedStatement createPreparedStatement(Connection \n     con) \n        throws SQLException { \n      String sql = \"insert into Course (name, credits) values \n       (?,?)\";      PreparedStatement stmt = con.prepareStatement(sql, new \n       String[] {\"id\"}); \n      stmt.setString(1, course.getName()); \n      stmt.setInt(2, course.getCredits()); \n      return stmt; \n    } \n  }, keyHolder); \n\n  course.setId(keyHolder.getKey().intValue()); \n} \n```", "```java\npublic void updateCourse (final CourseDTO course) { \n  jdbcTemplate.update(new PreparedStatementCreator() { \n    @Override \n    public PreparedStatement createPreparedStatement(Connection \n     con) \n        throws SQLException { \n      String sql = \"update Course set name = ?, credits = ? where \n       id = ?\"; \n      PreparedStatement stmt = con.prepareStatement(sql); \n      stmt.setString(1, course.getName()); \n      stmt.setInt(2, course.getCredits()); \n      stmt.setInt(3, course.getId()); \n      return stmt; \n    } \n  }); \n} \n\npublic void deleteCourse(final int id) { \n  jdbcTemplate.update(new PreparedStatementCreator() { \n    @Override \n    public PreparedStatement createPreparedStatement(Connection \n     con) \n        throws SQLException { \n      String sql = \"delete from Course where id = ?\"; \n      PreparedStatement stmt = con.prepareStatement(sql); \n      stmt.setInt(1, id); \n      return stmt; \n    } \n  }); \n} \n```", "```java\npublic CourseDTO getCourse (int id) { \n  String sql = \"select * from course where id = ?\"; \n  CourseDTO course = jdbcTemplate.queryForObject(sql, new \n   CourseRowMapper(), id); \n  return course; \n}\n```", "```java\n@Controller \npublic class CourseController { \n  @Autowired \n  CourseDAO courseDAO; \n\n  @RequestMapping(\"/courses\") \n  public String getCourses (Model model) { \n    model.addAttribute(\"courses\", courseDAO.getCourses()); \n    return \"courses\"; \n  } \n} \n```", "```java\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %> \n```", "```java\n<table> \n  <tr> \n    <th>Id</th> \n    <th>Name</th> \n    <th>Credits</th> \n    <th></th> \n  </tr> \n  <c:forEach items=\"${courses}\" var=\"course\"> \n    <tr> \n      <td>${course.id}</td> \n      <td>${course.name}</td> \n      <td>${course.credits}</td> \n    </tr> \n  </c:forEach> \n</table> \n```", "```java\n  <h2>Add Course</h2> \n  <c:if test=\"${not empty error}\"> \n    <span style=\"color:red;\"> \n      ${error}<br> \n    </span> \n  </c:if> \n\n  <c:set var=\"actionPath\" \n   value=\"${pageContext.request.contextPath}/doAddCourse\"/> \n  <form method=\"post\" action=\"${actionPath}\"> \n    <table> \n      <tr> \n        <td>Course Name:</td> \n        <td><input type=\"text\" name=\"name\" value=\"${course.name}\"> \n         </td> \n      </tr> \n      <tr> \n        <td>Credits:</td> \n        <td><input type=\"text\" name=\"credits\" \n         value=\"${course.credits}\"> </td> \n      </tr> \n      <tr> \n        <td colspan=\"2\"> \n        <button type=\"submit\">Submit</button> \n        </td> \n      </tr> \n    </table> \n    <input type=\"hidden\" name=\"id\" value=\"${course.id}\"> \n  </form> \n```", "```java\n  @RequestMapping(\"/addCourse\") \n  public String addCourse (@ModelAttribute(\"course\") CourseDTO \n   course, Model model) { \n    if (course == null) \n      course = new CourseDTO(); \n    model.addAttribute(\"course\", course); \n    return \"addCourse\"; \n} \n```", "```java\n  @RequestMapping(\"/doAddCourse\")  \n  public String doAddCourse (@ModelAttribute(\"course\") CourseDTO \n   course,  Model model) { \n    try { \n      coursesDAO.addCourse(course); \n    } catch (Throwable th) { \n      model.addAttribute(\"error\", th.getLocalizedMessage()); \n      return \"addCourse\"; \n    } \n    return \"redirect:courses\"; \n  } \n```", "```java\n  @RequestMapping(\"/course/update/{id}\") \n  public String updateCourse (@PathVariable int id, Model model) { \n    //TODO: Error handling \n    CourseDTO course = coursesDAO.getCourse(id); \n    model.addAttribute(\"course\", course); \n    model.addAttribute(\"title\", \"Update Course\"); \n    return \"updateCourse\"; \n  } \n```", "```java\npublic class UserDTO { \n  private String userName; \n  private String password; \n  private String message; \n\n  public boolean messageExists() { \n    return message != null && message.trim().length() > 0; \n  } \n\n  //skipped setters and getters follow \n} \n```", "```java\n@Controller \npublic class UserController { \n} \n```", "```java\n  @RequestMapping (value=\"/login\", method=RequestMethod.GET) \n  public String login (Model model) {\n    UserDTO  user = new UserDTO(); \n    model.addAttribute(\"user\", user); \n    return \"login\"; \n  } \n```", "```java\n  @RequestMapping (value=\"/login\", method=RequestMethod.POST) \n  public String doLogin (@ModelAttribute (\"user\") UserDTO user, \n  Model model) { \n\n    //Hard-coded validation of user name and \n//password to keep this example simple \n    //But validation could be done against database or \n//any other means here. \n    if (user.getUserName().equals(\"admin\") && \n         user.getPassword().equals(\"admin\")) \n      return \"redirect:courses\"; \n\n    user.setMessage(\"Invalid user name or password. Please try \n     again\"); \n    return \"login\"; \n  } \n```", "```java\n@Controller \n@SessionAttributes(\"user\") \n\npublic class UserController { \n} \n```", "```java\n<c:if test=\"${user.messageExists()}\"> \n  <span style=\"color:red;\"> \n    ${user.message}<br> \n  </span> \n</c:if> \n\n<form id=\"loginForm\" method=\"POST\"> \n  User Id : <input type=\"text\" name=\"userName\" required=\"required\" \n   value=\"${user.userName}\"><br> \n  Password : <input type=\"password\" name=\"password\"><br> \n  <button type=\"submit\">Submit</button> \n</form> \n```", "```java\n<interceptors> \n  <interceptor> \n    <mapping path=\"/**\"/> \n      <beans:bean \n class=\"packt.jee.course_management.interceptor.LoginInterceptor\"/> \n  </interceptor> \n</interceptors> \n```", "```java\n@Component \npublic class LoginInterceptor extends HandlerInterceptorAdapter { \n\n  public boolean preHandle(HttpServletRequest request, \n   HttpServletResponse response, Object handler) \n        throws Exception { \n\n    //get session from request \n    HttpSession session = request.getSession(); \n    UserDTO user = (UserDTO) session.getAttribute(\"user\"); \n\n    //Check if the current request is for /login. In that case \n    //do nothing, else we will execute the request in loop \n    //Intercept only if request is not /login \n    String context = request.getContextPath(); \n    if (!request.getRequestURI().equals(context + \"/login\") && \n      (user == null || user.getUserName() == null)) { \n      //User is not logged in. Redirect to /login \n      response.sendRedirect(request.getContextPath() + \"/login\"); \n      //do not process this request further \n      return false; \n    } \n\n    return true; \n  } \n\n} \n```", "```java\n  <!-- JPA --> \n  <dependency> \n        <groupId>org.eclipse.persistence</groupId> \n        <artifactId>eclipselink</artifactId> \n        <version>2.7.1</version> \n      </dependency> \n      <dependency> \n        <groupId>mysql</groupId> \n        <artifactId>mysql-connector-java</artifactId> \n        <version>8.0.9-rc</version> \n  </dependency> \n```", "```java\n//skipped imports \n@Entity \n@Table(name=\"COURSE\") \n@NamedQuery(name=\"Course.findAll\", query=\"SELECT c FROM Course c\") \npublic class Course implements Serializable { \n  private static final long serialVersionUID = 1L; \n\n  @Id \n  @GeneratedValue(strategy=GenerationType.IDENTITY) \n  private int id; \n\n  private int credits; \n\n  private String name; \n\n  @Column(name=\"teacher_id\") \n  private int teacherId; \n\n  //skipped setter and getters \n} \n```", "```java\n//skipped imports \n\n@Component \npublic class JPAEntityFactoryBean { \n\n  EntityManagerFactory entityManagerFactory; \n\n  @PostConstruct \n  public void init() { \n    entityManagerFactory = \nPersistence.createEntityManagerFactory(\"CourseManagementSpringMVCJPA\"); \n  } \n\n  public EntityManagerFactory getEntityManagerFactory() { \n    return entityManagerFactory; \n  } \n} \n```", "```java\n@Component \npublic class CourseDAO { \n\n  @Autowired \n  JPAEntityFactoryBean entityFactoryBean; \n\n  public List<Course> getCourses() { \n    //Get entity manager \n    EntityManagerFactory emf = \n     entityFactoryBean.getEntityManagerFactory(); \n    EntityManager em = emf.createEntityManager(); \n\n    //Execute Query \n    TypedQuery<Course> courseQuery = \n     em.createNamedQuery(\"Course.findAll\", Course.class); \n      List<Course> courses = courseQuery.getResultList(); \n      em.close(); \n\n      return courses; \n  } \n} \n```", "```java\n//skipped imports \n@Controller \npublic class CourseController { \n  @Autowired \n  CourseDAO courseDAO; \n\n  @RequestMapping(\"/courses\") \n  public String getCourses(Model model) { \n    model.addAttribute(\"courses\", courseDAO.getCourses()); \n    return \"courses\"; \n  } \n} \n```", "```java\n<h2>Courses:</h2> \n\n<table> \n  <tr> \n    <th>Id</th> \n    <th>Name</th> \n    <th>Credits</th> \n    <th></th> \n  </tr> \n  <c:forEach items=\"${courses}\" var=\"course\"> \n    <tr> \n      <td>${course.id}</td> \n      <td>${course.name}</td> \n      <td>${course.credits}</td> \n    </tr> \n  </c:forEach> \n</table> \n```"]