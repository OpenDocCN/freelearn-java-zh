["```java\nimport javax.inject.Inject;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.Response;\nimport java.util.Date;\nimport java.util.Optional;\n\n@Path(\"auth\")\npublic class AuthenticationResource {\n\n    @Inject\n    private AuthSession authSession;\n\n    @POST\n    @Consumes(\"application/x-www-form-urlencoded\")\n    public Response login(@FormParam(\"login\") String login, @FormParam(\"password\") String password ) {\n\n        //If user already logged, then get it token\n        Optional<String> key = authSession.getToken(login, password);\n        if ( key.isPresent() ){\n\n           return Response.ok(key.get()).build();\n\n        }\n\n        //Validade login and password on data source\n        if( !authSession.getDataSource().containsKey(login)\n                || !authSession.getDataSource()\n                .get(login)\n                .getPassword()\n                .equals( password) )\n            return Response.status(Response.Status.UNAUTHORIZED).build();\n\n        String token = TokenUtils.generateToken();\n        //Persiste the information of authentication on AuthSession\n        authSession.putAuthenticated( token, new Auth(login, password, new Date()));\n\n        return Response.ok(token).build();\n\n    }\n\n    @HEAD\n    @Path(\"/{token}\")\n    public Response checkAuthentication(@PathParam(\"token\")String token)  {\n\n        if( authSession.getAuthenticated().containsKey( token )){\n\n            return Response.ok().build();\n\n        }\n\n        return Response.status(Response.Status.UNAUTHORIZED).build();\n\n    }\n\n}\n```", "```java\n    @POST\n    @Consumes(\"application/x-www-form-urlencoded\")\n    public Response login(@FormParam(\"login\") String login, @FormParam(\"password\") String password ) {\n\n        //If user already logged, then get it token \n        Optional<String> key = authSession.getToken(login, password);\n        if ( key.isPresent() ){\n\n           return Response.ok(key.get()).build();\n\n        }\n\n        //Validate the login and password on data source    \n        if( !authSession.getDataSource().containsKey(login)\n                || !authSession.getDataSource()\n                .get(login)\n                .getPassword()\n                .equals( password) )\n            return Response.status(Response.Status.UNAUTHORIZED).build();\n\n        String token = TokenUtils.generateToken();\n        //Persiste the information of authentication on the AuthSession.\n        authSession.putAuthenticated( token, new Auth(login, password, new Date()));\n\n        return Response.ok(token).status(Response.Status.CREATED).build();\n\n    }\n```", "```java\n    @HEAD\n    @Path(\"/{token}\")\n    public Response checkAuthentication(@PathParam(\"token\")String token)  {\n\n        if( authSession.getAuthenticated().containsKey( token )){\n\n            return Response.ok().build();\n\n        }\n\n        return Response.status(Response.Status.UNAUTHORIZED).build();\n\n    }\n```", "```java\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.ApplicationScoped;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Optional;\n\n@ApplicationScoped\npublic class AuthSession {\n\n    private Map<String,Auth> authenticated;\n\n    private Map<String,Auth> dataSource;\n\n    @PostConstruct\n    public void init(){\n\n        authenticated = new HashMap<>();\n        dataSource = new HashMap<>();\n\n        for(int i = 1; i <= 50; i++){\n            dataSource.put(\"login\"+i, new Auth(\"login\"+i, \"123456\") );\n        }\n\n    }\n\n    public AuthSession putAuthenticated(String key, Auth auth){\n\n        authenticated.put(key, auth);\n        return this;\n\n    }\n\n    public AuthSession removeAuthenticated(String key, Auth auth){\n\n        authenticated.remove(key, auth);\n        return this;\n\n    }\n\n    public Map<String, Auth> getAuthenticated() {\n        return authenticated;\n    }\n\n    public Map<String, Auth> getDataSource() {\n        return dataSource;\n    }\n\n    public Optional<String> getToken(String login, String password){\n\n        for( String key :  authenticated.keySet() ){\n\n            Auth auth = authenticated.get( key );\n            if( auth.getLogin().equals(login)\n                    &&  auth.getPassword().equals( password )){\n                return Optional.of(key);\n            }\n\n        }\n\n        return Optional.empty();\n\n    }\n}\n```", "```java\nimport java.util.Date;\n\npublic class Auth {\n\n    private String login;\n\n    private String password;\n\n    private Date loginDate;\n\n    public Auth(){}\n\n    public Auth(String login, String password){\n\n        this.login = login;\n        this.password = password;\n\n    }\n\n    public Auth(String login, String password, Date loginDate){\n\n        this.login = login;\n        this.password = password;\n        this.loginDate = loginDate;\n\n    }\n\n    public String getLogin() {\n        return login;\n    }\n\n    public void setLogin(String login) {\n        this.login = login;\n    }\n\n    public String getPassword() {\n        return password;\n    }\n\n    public void setPassword(String password) {\n        this.password = password;\n    }\n\n    public Date getLoginDate() {\n        return loginDate;\n    }\n\n    public void setLoginDate(Date loginDate) {\n        this.loginDate = loginDate;\n    }\n\n}\n```", "```java\nimport java.security.SecureRandom;\nimport java.util.Date;\n\npublic class TokenUtils {\n\n    public static String generateToken(){\n\n        SecureRandom random = new SecureRandom();\n        long longToken = Math.abs( random.nextLong() );\n        return Long.toString(new Date().getTime()) + Long.toString( longToken, 16 );\n\n    }\n}\n```", "```java\nimport javax.inject.Inject;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.Response;\nimport java.util.Objects;\n\n@Path(\"app1\")\npublic class App1 {\n\n    @Inject\n    private Auth auth;\n\n    @GET\n    public Response helloWorld( String token ){\n\n        if( !auth.isLogged( token ) ){\n            throw new WebApplicationException(Response.Status.UNAUTHORIZED);\n        }\n\n        return Response.ok(\"Hello World. Welcome to App1!\").build();\n\n    }\n\n    @POST\n    @Consumes(\"application/x-www-form-urlencoded\")\n    public Response helloWorld(@FormParam(\"login\") String login, @FormParam(\"password\") String password ) {\n\n        if( Objects.isNull(login) || Objects.isNull(password) ){\n            throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);\n        }\n\n        String token = auth.login(login,password);\n\n        return Response\n                .ok(\"Hello World. Welcome to App1!\")\n                .header(\"token\",token)\n                .build();\n    }\n\n}\n```", "```java\nimport javax.inject.Inject;\nimport javax.ws.rs.*;\nimport javax.ws.rs.core.Response;\nimport java.util.Objects;\n\n@Path(\"app2\")\npublic class App2 {\n\n    @Inject\n    private Auth auth;\n\n    @GET\n    public Response helloWorld( String token ){\n\n        if( !auth.isLogged( token ) ){\n            throw new WebApplicationException(Response.Status.UNAUTHORIZED);\n        }\n\n        return Response.ok(\"Hello World. Welcome to App2!\").build();\n\n    }\n\n    @POST\n    @Consumes(\"application/x-www-form-urlencoded\")\n    public Response helloWorld(@FormParam(\"login\") String login, @FormParam(\"password\") String password ) {\n\n        if( Objects.isNull(login) || Objects.isNull(password) ){\n            throw new WebApplicationException(Response.Status.INTERNAL_SERVER_ERROR);\n        }\n\n        String token = auth.login(login,password);\n\n        return Response\n                .ok(\"Hello World. Welcome to App2!\")\n                .header(\"token\",token)\n                .build();\n    }\n\n}\n```", "```java\npublic interface Auth {\n\n    public boolean isLogged(String token);\n\n    public String login(String login, String password);\n\n    String logout(String token);\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport javax.ws.rs.client.ClientBuilder;\nimport javax.ws.rs.client.Entity;\nimport javax.ws.rs.client.WebTarget;\nimport javax.ws.rs.core.Form;\n\n@Stateless\npublic class AuthImpl implements Auth {\n\n    private String URL = \"http://localhost:8080/javaEE8ExampleSSOAppService/resources/auth\";\n\n    @Override\n    public boolean isLogged(String token) {\n\n        return prepareWebTarget().path(\"/\"+ token)\n                .request()\n                .head().getStatus() == 200;\n    }\n\n    @Override\n    public String login(String login, String password) {\n\n        return prepareWebTarget()\n                .request()\n                .post(Entity.form(new Form(\"login\", login )\n                                .param(\"password\", password)),\n                      String.class);\n\n    }\n\n    @Override\n    public String logout(String token) {\n\n        return prepareWebTarget().path(\"/\"+ token)\n                .request()\n                .delete(String.class);\n\n    }\n\n    protected WebTarget prepareWebTarget() {\n\n```", "```java\n        return ClientBuilder.newClient().target(URL);\n\n    }\n\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<web-app >\n    <security-constraint>\n        <web-resource-collection>\n            <web-resource-name>helloworld</web-resource-name>\n            <url-pattern>/resources/helloworld/*</url-pattern>\n        </web-resource-collection>\n        <auth-constraint>\n            <role-name>user</role-name>\n        </auth-constraint>\n        <user-data-constraint>\n            <transport-guarantee>CONFIDENTIAL</transport-guarantee>\n        </user-data-constraint>\n    </security-constraint>\n\n    <login-config>\n        <auth-method>BASIC</auth-method>\n    </login-config>\n</web-app>\n\nweb.xmlÂ that defines a URL pattern:\n```", "```java\n <web-resource-collection>\n     <web-resource-name>helloworld</web-resource-name>\n     <url-pattern>/resources/helloworld/*</url-pattern>\n </web-resource-collection>\n```", "```java\nweb.xmlÂ that defines securityÂ roles:\n```", "```java\n<auth-constraint>\n    <role-name>user</role-name>\n</auth-constraint>\nweb.xmlÂ that defines the authentication mechanism:\n```", "```java\n<login-config>\n    <auth-method>BASIC</auth-method>\n</login-config>\n```", "```java\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.Response;\nimport javax.ws.rs.core.SecurityContext;\n\n@Path(\"helloworld\")\npublic class HelloWorld {\n\n    @Context\n    private SecurityContext securityContext;\n\n    @GET\n    @Path(\"/deploymentdescriptor\")\n    public Response helloWorldWithDeploymentDescriptor(){\n\n        return Response\n                .ok(\"Hello World. Welcome to App with validation by deployment descriptor!\")\n                .build();\n\n    }\n\n    @GET\n    @Path(\"/programmatically\")\n    public Response helloWorldWithProgrammatically() {\n\n        if (!securityContext.isUserInRole(\"user\")) {\n            return Response.status(401).header(\"WWW-Authenticate\", \"Basic\").build();\n        }\n\n        return Response\n                .ok(\"Hello World. Welcome to App with validation by programmatically.\")\n                .build();\n    }\n\n}\nHelloWorld class that includes theÂ helloWorldWithDeploymentDescriptor()Â method:\n```", "```java\n    @GET\n    @Path(\"/deploymentdescriptor\")\n    public Response helloWorldWithDeploymentDescriptor(){\n\n        return Response\n                .ok(\"Hello World. Welcome to App with validation by deployment descriptor!\")\n                .build();\n\n    }\nHelloWorldÂ class that includes a helloWorldWithProgrammatically()Â methodÂ that uses a code to validate the role associated with each user that sent a request:\n```", "```java\n@GET\n    @Path(\"/programmatically\")\n    public Response helloWorldWithProgrammatically() {\n\n        if (!securityContext.isUserInRole(\"user\")) {\n            return Response.status(401).header(\"WWW-Authenticate\", \"Basic\").build();\n        }\n\n        return Response\n                .ok(\"Hello World. Welcome to App with validation by programmatically.\")\n                .build();\n    }\n```", "```java\n if (!securityContext.isUserInRole(\"user\")) {\n      return Response.status(401).header(\"WWW-Authenticate\", \n      \"Basic\").build();\n }\n```", "```java\nimport javax.annotation.security.DeclareRoles;\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.HttpConstraint;\nimport javax.servlet.annotation.ServletSecurity;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\n\n@WebServlet(name = \"HelloWorldServlet\", urlPatterns = \"/helloworld/annotation\")\n@DeclareRoles(\"user\")\n@ServletSecurity(@HttpConstraint(transportGuarantee = ServletSecurity.TransportGuarantee.NONE,\n        rolesAllowed = {\"user\"}))\npublic class HelloWorldServlet extends HttpServlet {\n\n    protected void doGet(HttpServletRequest request, \n   HttpServletResponse response) throws ServletException, IOException {\n\n        response.getWriter().write(\"Hello World. Welcome to App with \n        validation by annotation!\");\n\n    }\n}\n```", "```java\nimport javax.enterprise.util.Nonbinding;\nimport javax.interceptor.InterceptorBinding;\nimport java.lang.annotation.*;\n\n@Inherited\n@InterceptorBinding\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE})\npublic @interface Authentication {\n    @Nonbinding String[] roles() default {};\n}\n```", "```java\nimport javax.inject.Inject;\nimport javax.interceptor.AroundInvoke;\nimport javax.interceptor.Interceptor;\nimport javax.interceptor.InvocationContext;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.Serializable;\nimport java.util.Arrays;\n\n@Authentication\n@Interceptor\npublic class AuthenticationInterceptor implements Serializable{\n\n    @Inject\n    private Auth auth;\n\n    @AroundInvoke\n    public Object authentication(InvocationContext context) throws \n    IOException {\n\n      HttpServletRequest request = getHttpServletRequest( context );\n      HttpServletResponse response = getHttpServletResponse( context );\n\n      String[] credentials = AuthUtils.readBasicAuthHeader( request );\n\n        if(credentials.length < 2){\n            prepareDialogBox( response );\n            return null;\n        }\n\n        String login = credentials[AuthUtils.INDEX_LOGIN];\n        String password = credentials[AuthUtils.INDEX_PASSWORD];\n\n        Authentication authentication = \n       context.getMethod().getAnnotation( Authentication.class );\n\n        if( !auth.isAuthenticated( login, password ) ){\n            prepareDialogBox( response );\n            return null;\n\n        }\n\n        if ( Arrays.stream(authentication.roles()).noneMatch( role -> \n        auth.isAuthorized( login, role )) ){\n\n            response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n            return null;\n        }\n\n        try {\n            return context.proceed();\n        } catch (Exception e) {\n            e.printStackTrace();\n\n      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        }\n\n        return null;\n\n    }\n\n    public void prepareDialogBox( HttpServletResponse response ) throws \n    IOException {\n        response.addHeader(\"WWW-Authenticate\", \"Basic\");\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n    }\n\n    private HttpServletRequest getHttpServletRequest(InvocationContext \n    ic) {\n\n        return (HttpServletRequest) Arrays\n                .stream(ic.getParameters()).filter(p ->  p instanceof \n                 HttpServletRequest )\n                .findFirst()\n                .get();\n\n    }\n\n    private HttpServletResponse \n    getHttpServletResponse(InvocationContext ic) {\n\n        return (HttpServletResponse) Arrays\n                .stream(ic.getParameters()).filter(p ->  p instanceof \n                 HttpServletResponse )\n                .findFirst()\n                .get();\n\n    }\n\n}\n@Authentication:\n```", "```java\n@Authentication\n@Interceptor\npublic class AuthenticationInterceptor implements Serializable{\n...\n}\n```", "```java\n    @AroundInvoke\n    public Object authentication(InvocationContext context) throws IOException {\n        ...\n    }\n```", "```java\npublic interface Auth {\n\n    public Boolean isAuthorized(String login, String role);\n\n    public Boolean isAuthenticated(String login, String password);\n\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport javax.inject.Inject;\n\n@Stateless\npublic class AuthImpl implements Auth {\n\n    @Inject\n    private DataSource dataSource;\n\n    @Override\n    public Boolean isAuthorized(String login,String role) {\n        return dataSource.readUserRoles( login ).contains( role );\n    }\n\n    @Override\n    public Boolean isAuthenticated(String login, String password) {\n        return dataSource.readUserPassword( login ).contains( password );\n    }\n}\n```", "```java\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.ApplicationScoped;\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@ApplicationScoped\npublic class DataSource {\n\n    private Map<String, List<String>> roles;\n    private Map<String, String> passwords;\n\n    @PostConstruct\n    public void init(){\n        roles = new HashMap<>();\n        roles.put(\"rhuan\", Arrays.asList(\"user\",\"admin\"));\n        roles.put(\"joao\", Arrays.asList(\"user\",\"admin\"));\n\n        passwords = new HashMap<>();\n        passwords.put(\"rhuan\", \"123456\");\n        passwords.put(\"joao\", \"123456\");\n    }\n\n    public List<String> readUserRoles(String login){\n        return roles.get( login );\n    }\n\n    public String readUserPassword(String login){\n        return passwords.get( login );\n    }\n}\n```", "```java\nimport javax.servlet.http.HttpServletRequest;\nimport java.nio.charset.Charset;\nimport java.util.Base64;\n\npublic class AuthUtils {\n\n    public static final int INDEX_LOGIN = 0;\n    public static final int INDEX_PASSWORD = 1;\n\n    public static String[] readBasicAuthHeader( HttpServletRequest request ){\n\n        final String authorization = request.getHeader(\"Authorization\");\n\n        if (authorization != null && authorization.startsWith(\"Basic\")) {\n\n            String base64Credentials = authorization.substring(\"Basic\".length()).trim();\n            String credentials =\n                    new String(\n                            Base64.getDecoder().decode(\n                                    base64Credentials),\n                            Charset.forName(\"UTF-8\"));\n\n            return credentials.split(\":\", 2);\n        }\n\n        return new String[0];\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n       bean-discovery-mode=\"all\">\n\n    <interceptors>\n        <class>com.packt.rhuan.interceptors.AuthenticationInterceptor</class>\n    </interceptors>\n\n</beans>\n\n```", "```java\nHelloWorld. This class receives a request and returns a message to the client.Â Before the execution of the resource logic,Â AuthenticationInterceptor intercepts a call to a method and processes the authentication logic:\n```", "```java\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.ws.rs.GET;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Context;\nimport javax.ws.rs.core.Response;\n\n@Path(\"helloworld\")\npublic class HelloWorld {\n\n    @GET\n    @Authentication(roles = {\"user\"})\n    public Response helloWorld(@Context HttpServletRequest request, \n    @Context HttpServletResponse response)  {\n\n        return Response\n       .ok(\"Hello World. Welcome to App with validation by \n       authentication interceptor!\")\n                .build();\n\n    }\n\n}\n```", "```java\n    @GET\n    @Authentication(roles = {\"user\"})\n```", "```java\n    public Response helloWorld(@Context HttpServletRequest request, @Context HttpServletResponse response)  {\n        ...\n   }\n```"]