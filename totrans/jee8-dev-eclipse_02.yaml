- en: Source Control Management in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to create simple web applications using
    JSP, JSF, and servlets. We also learned how to use Maven for build and project
    management.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to integrate Eclipse with SVN and Git. The
    chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Eclipse plugins for SVN and Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing source control tasks such as checking out files, committing changes,
    and so on from Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synchronizing projects with remote repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source Control Management** (**SCM**) is an essential part of software development.
    By using SCM tools, you make sure that you have access to versions of your code
    at important milestones. SCM also helps to manage the source code when you are
    working in a team, by providing you with tools to make sure you do not overwrite
    the work done by others. Whether your project is small or large, whether you are
    working alone or in a large team, using SCM would benefit you.'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse has had support for integrating various SCM tools for a long time—this
    includes support for CVS, Microsoft SourceSafe, Perforce, and **Subversion** (**SVN**).
    The recent versions of Eclipse have built-in support for Git too.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by learning how to use SVN from Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: The Eclipse subversion plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will learn how to install and use the SVN Eclipse plugin.
    We will create a small project and see how to check in a project to SVN from within
    Eclipse. We will also see how to sync with the existing SVN repository.
  prefs: []
  type: TYPE_NORMAL
- en: You will need access to an SVN repository to follow the steps in this chapter.
    If you do not have access to an SVN repository, you can choose from some of the
    free SVN offerings online. This book does not promote or suggest using any particular
    online SVN hosting, but for the purpose of explaining SVN Eclipse plugin features,
    the author has used [https://riouxsvn.com](https://riouxsvn.com). However, the
    plugin would work the same way with any SVN server.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Eclipse Subversion plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the Eclipse Marketplace by selecting the Help | Eclipse Marketplace menu.
    Search for `subversion`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Installing the Subversion plugin'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the plugin. Before we configure an SVN repository in Eclipse, we need
    to select/install an SVN Connector. Go to Eclipse Preferences and type `svn` in
    the filter box. Then, go to the SVN Connector tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: SVN Connector preferences'
  prefs: []
  type: TYPE_NORMAL
- en: If no connectors are installed, then you will see a Get Connectors... button.
    Click the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse displays a number of available connectors. We will choose the SVN Kit connector
    and install it (click the Finish button):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00059.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: The SVN Connector Discovery wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now configure an existing SVN repository in Eclipse. Select the Window
    | Open Perspective | Other menu and then select the SVN Repository Exploring perspective:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00060.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Open SVN perspective'
  prefs: []
  type: TYPE_NORMAL
- en: Adding projects to an SVN repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perform the following steps to add projects to an SVN repository:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click in the SVN Repositories view and select New | Repository Location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the URL of your SVN repository, your username, and password. If you need
    to set SSH or SSL information to connect to your SVN repository, then click on
    the appropriate tab and enter the information. Click Finish to add the repository
    to Eclipse:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00061.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Configuring an SVN repository'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now create a simple Java project that we would check into the SVN repository.
    In this chapter, it is not important what code you write in the project; we are
    going to use the project only to understand how to check in project files to SVN
    and then see how to sync the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple Java project as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00062.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: A sample project for SVN testing'
  prefs: []
  type: TYPE_NORMAL
- en: The project has one source file. We will now check in this project in SVN. Right-click
    on the project and select Team | Share Project....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select SVN and click the Next button. The wizard gives you options to either
    create a new SVN repository or select an already configured SVN repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00063.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Share Project with SVN repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to use the already configured repository. So, select the repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00064.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Selecting an SVN repository or creating a new one'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can click Next and configure the advanced option, but we will keep the configuration
    simple and click Finish. You will be prompted to check in existing files in the
    project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00065.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Share Project with SVN repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the files you want to check in and enter the check-in comments. Then
    click OK. To see the checked in files in the SVN repository, switch to the SVN
    Repository Exploring perspective and then to the SVN Repositories view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00066.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Checked in files in the SVN Repositories view'
  prefs: []
  type: TYPE_NORMAL
- en: Committing changes to an SVN repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now modify a file and check in the changes. Switch back to the Java perspective
    and open `SVNTestApplication.java` from Package Explorer or Navigator. Modify
    the file and save the changes. To compare the files or the folders in your working
    directory with those in the repository, right-click on `file/folder/project` in
    Navigator and select Compare With | Latest from Repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have modified `SVNTestApplication.java`, let''s see how it differs
    from the one in the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00067.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: Comparing SVN files'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a new file now, say `readme.txt`, in the root of the project. To
    add the file to the repository, right-click on the file and select Team | Add
    to Version Control...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00068.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Adding files to an SVN repository'
  prefs: []
  type: TYPE_NORMAL
- en: Synchronizing with an SVN repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To synchronize your local project with the remote repository, right-click on
    the project and select Team | Synchronize with Repository. This will update the
    project with files in the remote repository, show files that are new in the local
    folder, and also show the changed files:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: The Synchronize view'
  prefs: []
  type: TYPE_NORMAL
- en: You can filter the list as incoming mode (changes from the remote repository),
    outgoing mode (changes in your working directory), or both. As you can see in
    *Figure 3.13*, we have two files that are changed in the working directory; one
    modified and one new. To commit the changes, right-click on the project and select
    Commit.... If you want to commit from Navigator or Package Explorer, then right-click
    on the project and select Team | Commit.... Enter the check-in comment and click
    OK. To update the project (receive all the changes from the remote repository),
    right-click on the project and select Team | Update.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the revision history of the file or folder, right-click Navigator or
    Package Explorer and select Team | Show History:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: SVN file revision history'
  prefs: []
  type: TYPE_NORMAL
- en: Checking out a project from SVN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is easy to check out projects from an SVN repository into a new workspace.
    In the SVN Repositories view, click on the project you want to check out and select
    the Check Out option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00071.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: SVN file revision history'
  prefs: []
  type: TYPE_NORMAL
- en: This option checks out the project in the current workspace. You can also use
    the Import project option to check out the project from SVN. Select the File |
    Import menu option and then select the SVN | Project from SVN option.
  prefs: []
  type: TYPE_NORMAL
- en: There are many other features of SVN that you can use from Eclipse. Refer to [http://www.eclipse.org/subversive/documentation.php](http://www.eclipse.org/subversive/documentation.php).
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Git plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Recent versions of Eclipse are pre-installed with Eclipse **Git plugin** (**EGit**).
    If not, you can install the plugin from Eclipse Marketplace. Select the Help |
    Eclipse Marketplace... option and type `egit` in the Find textbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00072.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Searching the EGit plugin in Eclipse Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: If the plugin is already installed, it will be marked as Installed.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a project to Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is a distributed repository. Unlike some of the other source management
    systems, Git maintains the complete local repository too. So you can perform activities
    such as check-out and check-in in the local repository without connecting to any
    remote repository. When you are ready to move your code to a remote repository,
    you can connect to it and push your files to the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are new to Git, take a look at the following documentation and tutorial:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://git-scm.com/doc](https://git-scm.com/doc) and [https://www.atlassian.com/git/tutorials/](https://www.atlassian.com/git/tutorials/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn how to add a project to Git, let''s create a simple Java project in
    the workspace. Again as in the previous section, what code you write in this project
    is not important for now:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Java class in the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To add this project to Git, right-click on the project in Package Explorer
    or Navigator and select Team | Share Project...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00073.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Sharing an Eclipse project with Git'
  prefs: []
  type: TYPE_NORMAL
- en: Select Git and click Next. Check the box Use or create repository in parent
    folder of project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the project (check the box for the project) and click the Create Repository button.
    Then click Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00074.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: Creating a Git repository for a project'
  prefs: []
  type: TYPE_NORMAL
- en: 'This creates a new Git repository in the project folder. Switch to the Git
    perspective (or open the Git Repositories view from the Window | Show View | Other
    option) and you should see the project listed in the Git Repositories view (see
    the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Git Repositories view'
  prefs: []
  type: TYPE_NORMAL
- en: Committing files in the Git repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Git, new or modified files are staged for commit. To see the staged files,
    click on the Git Staging tab in the Git perspective:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00076.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: The Git Staging view'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not want to add a file to the Git repository, then right-click on
    that file (or multiple files selection) and select the Ignore option. Before you
    commit files to Git, you need to move Unstaged Changes to Staged Changes. We are
    going to add all the files to Git. So select all the files in the Unstaged Changes
    view and drag and drop them in the Staged Changes view. It is also recommended
    to set Author name and Committer. It is usually in `Name <email>` format. To set
    this option at global level in Eclipse (so that you do not have to set these fields
    at every commit), go to Eclipse Preferences and search for `Git`. Then go to the Team
    | Git | Configuration page and click the Add Entry... button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00077.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: Adding a Git configuration entry'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, add the `user.email` entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00078.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: Git configurations in Preferences'
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to the Git Staging view, enter Author, Committer, and Commit Message.
    Then click the Commit button.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing file differences after modifications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's modify the single Java class created in the previous project. If you go
    to the Git Staging view after making changes to the file, you will see that the
    file appears in the Unstaged Changes list. To see what changes have been made
    to the file since the last commit, double-click on the file in the Git Staging
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To commit these changes, move it to Staged Changes view, enter Commit Message,
    and click the Commit button. You can also view the file differences by clicking
    on the file in Package Explorer and selecting Compare With | Head Revision:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00079.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: Viewing a file difference'
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the history of changes to the project or file(s)/folder(s), right-click
    and select Team | Shown in History:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: Git History view'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new branch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is typical when you are using source control management to create separate
    branches for features or even for bug fixes. The idea is that the main or the
    master branch should always have the working code and you do development on the
    branches that may not be stable. When you finish a feature or fix a bug and know
    that the branch is stable, then you merge the code from that branch to the master
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new branch, go to the Git Repositories view and right-click on
    the repository you want to branch. Then select the Switch To | New Branch... option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.25: Creating a new branch'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the Checkout new branch box should be checked. Because of this option,
    the new branch becomes the active branch once it is created. Any changes you commit
    are going to be in this branch and the master branch remains unaffected. Click
    Finish to create the branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make some changes to the code, say in the `main` method of the `GitTestApp`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Commit the preceding changes to the new branch.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's check out the master branch. Right-click on the repository in the Git
    Repositories view and select Switch To | master. Open the file you modified in
    the new branch. You will observe that the changes you made to the file are not
    present. As mentioned previously, any changes you do to branches are not committed
    to the master branch. You have to explicitly merge the changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To merge the changes from branch bug#1234 to the master branch, right-click
    on the repository in the Git Repositories view and select Merge...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: Merge Git braches'
  prefs: []
  type: TYPE_NORMAL
- en: Select branch bug#1234\. This branch will be merged in the master branch. Click
    Merge. Git will display a summary of the merge. Click OK to complete the merge
    operation. Now the file in the master branch will contain the changes done in
    branch bug#1234.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have merged all the changes from branch bug#1234 to the master and we no
    longer need it. So, let''s delete branch bug#1234\. Expand the Branches node in
    the Git Repositories view and right-click on the branch to be deleted (the selected
    branch should not be the active branch when deleting). Then select the Delete
    Branch menu option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.27: Deleting Git branch'
  prefs: []
  type: TYPE_NORMAL
- en: Committing a project to a remote repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have been working in the local Git repository. But you may want to
    push your project to a remote repository if you want to share your code and/or
    make sure that you do not lose your local changes. So in this section, we will
    learn how to push a local project to a remote Git repository. If you do not have
    access to a Git repository, you could create one at [http://www.github.com](http://www.github.com).
  prefs: []
  type: TYPE_NORMAL
- en: Create a new repository in the remote Git server, named `GitPluginTest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Git Repositories view, right-click on the Remotes node and select the Create
    Remote... option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.28: Adding a remote Git repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'By convention, name of the remote repository is `origin`. Click OK. In the
    next page, set up the configuration for push. Click on the Change button next
    to the URI textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.29: Setting up a remote Git URI'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the URI of the remote Git repository. The wizard extracts host, repository
    path, and protocol from the URI. Enter your user ID and password and click Finish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.30: Configuring a Git push'
  prefs: []
  type: TYPE_NORMAL
- en: Click Save and Push. This sends files in the local master branch to the remote
    Git repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pulling changes from a remote repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you work in a team, your team members will also be making changes to the
    remote repository. When you want to get the changes done in the remote repository
    to your local repository, you use the Pull option. But before you perform the
    Pull operation, you need to configure it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Package Explorer, right-click on the project and select Team | Remote |
    Configure Fetch from Upstream...:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.31: Configuring Git Fetch'
  prefs: []
  type: TYPE_NORMAL
- en: In Git, both Pull and Fetch can get the changes from a remote repository. However,
    the Fetch operation does not merge the changes in the local repository. The Pull operation
    first fetches the changes and then merges in the local repository. If you want
    to inspect the files before you merge, then select the Fetch option.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to map the local master branch with a branch in the remote repository.
    This tells the Pull operation to fetch the changes from the branch in the remote
    repository and merge it in the given (in this case, master) local repository.
    Click the Add... button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00088.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.32: Configuring Git Fetch'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start typing the name of the branch in the source textbox and the wizard will
    get the branch information from the remote repository and auto complete it. Click
    Next and then Finish. This takes you back to the Configure Fetch page with mapping
    of the branches added to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00089.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.33: Configuring Git Fetch with mapping added'
  prefs: []
  type: TYPE_NORMAL
- en: Click Save and Fetch to pull the changes from the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning a remote repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have learned how to start development using a local Git repository and then
    push changes to a remote repository. Let's now learn how we can get an existing
    remote Git repository and create a local copy; in other words, we will learn how
    to clone a remote Git repository. The easiest option is to import the remote Git
    project. Select File | Import... from the main menu and then Git | Projects from
    Git | Clone URI.
  prefs: []
  type: TYPE_NORMAL
- en: 'The wizard will display a page similar to *Figure 3.29*. Enter the URI of the
    remote repository, username, and password, and then click Next. Select a remote
    branch and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00090.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.34: Selecting a remote branch to clone'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the Next button in the branch selection page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00091.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.35: Selecting the location of the cloned project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the location where the project is to be saved and click Next:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00092.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.36: Options to import the cloned project'
  prefs: []
  type: TYPE_NORMAL
- en: There are three options to import the cloned project. If the remote repository
    contains the entire Eclipse project, then select Import existing Eclipse projects,
    or else select either of the remaining two options. Since we have checked in the
    Eclipse project in the remote repository, we will select the first option. Click
    Next and then Finish.
  prefs: []
  type: TYPE_NORMAL
- en: For more information about the Eclipse Git plugin, refer to [https://wiki.eclipse.org/EGit/User_Guide](https://wiki.eclipse.org/EGit/User_Guide).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are Eclipse plugins available for a wide variety of SCM systems. In this
    chapter, we learned how to use Eclipse plugins for SVN and Git. Using these plugins
    you can perform many of the typical SCM operations, such as checking out source,
    comparing versions, and committing changes, right within the Eclipse IDE. This
    provides great convenience and can improve your productivity.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to create JEE Database applications using
    JDBC and JDO.
  prefs: []
  type: TYPE_NORMAL
