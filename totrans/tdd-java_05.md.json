["```java\nimport org.junit.jupiter.api.Test;\nimport static org.assertj.core.api.Assertions.*;\npublic class UsernameTest {\n    @Test\n    public void convertsToLowerCase() {\n        var username = new Username(\"SirJakington35179\");\n        String actual = username.asLowerCase();\n        assertThat(actual).isEqualTo(\"sirjakington35179\");\n    }\n}\n```", "```java\npublic class Username {\n    private final String name;\n    public Username(String username) {\n        name = username;\n    }\n    public String asLowerCase() {\n        var result = new StringBuilder();\n        for (int i=1; i < name.length(); i++) {\n            char current = name.charAt(i);\n            if (current > 'A' && current < 'Z') {\n                result.append(current + 'a' - 'A');\n            } else {\n                result.append( current );\n            }\n        }\n        return result.toString() ;\n    }\n}\n```", "```java\n@Test\npublic void rejectsShortName() {\n    assertThatExceptionOfType(InvalidNameException.class)\n            .isThrownBy(()->new Username(\"Abc\"));\n}\n```", "```java\n@Test\npublic void acceptsMinimumLengthName() {\n    assertThatNoException()\n            .isThrownBy(()->new Username(\"Abcd\"));\n}\n```", "```java\n@Override\npublic boolean equals(Object other) {\n    return EqualsBuilder.reflectionEquals(this, other);\n}\n@Override\npublic int hashCode() {\n    return HashCodeBuilder.reflectionHashCode(this);\n}\n```", "```java\n    public class WordTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        public void oneIncorrectLetter() {\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    public void oneIncorrectLetter () {\n    ```", "```java\n        new Word(\"A\");\n    ```", "```java\n    }\n    ```", "```java\n    public class Word {\n    ```", "```java\n        public Word(String correctWord) {\n    ```", "```java\n      // No Action\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    public void oneIncorrectLetter () {\n    ```", "```java\n        var word = new Word(\"A\");\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    public void oneIncorrectLetter () {\n    ```", "```java\n        var word = new Word(\"A\");\n    ```", "```java\n        word.guess(\"Z\");\n    ```", "```java\n    }\n    ```", "```java\n    public void guess(String attempt) {\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    public void oneIncorrectLetter () {\n    ```", "```java\n        var word = new Word(\"A\");\n    ```", "```java\n        var score = word.guess(\"Z\");\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    public void oneIncorrectLetter() {\n    ```", "```java\n        var word = new Word(\"A\");\n    ```", "```java\n        var score = word.guess(\"Z\");\n    ```", "```java\n        var result = score.letter(0);\n    ```", "```java\n        assertThat(result).isEqualTo(Letter.INCORRECT);\n    ```", "```java\n    }\n    ```", "```java\n    public class Word {\n    ```", "```java\n        public Word(String correctWord) {\n    ```", "```java\n            // Not Implemented\n    ```", "```java\n        }\n    ```", "```java\n        public Score guess(String attempt) {\n    ```", "```java\n            var score = new Score();\n    ```", "```java\n            return score;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    public class Score {\n    ```", "```java\n        public Letter letter(int position) {\n    ```", "```java\n            return Letter.INCORRECT;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```"]