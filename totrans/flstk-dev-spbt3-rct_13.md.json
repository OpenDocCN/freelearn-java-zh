["```java\n    npm install component_name \n    ```", "```java\n    yarn add component_name \n    ```", "```java\n    npm install react-date-picker \n    ```", "```java\n    \"dependencies\": {\n      \"react\": \"^18.2.0\",\n      \"react-dom\": \"^18.2.0\"\n      **\"react-date-picker\"****:****\"^10.0.3\"****,**\n    }, \n    ```", "```java\n    npm install component_name@version \n    ```", "```java\n    npm uninstall component_name \n    ```", "```java\n    yarn remove component_name \n    ```", "```java\n    npm outdated \n    ```", "```java\n    npm update \n    ```", "```java\n    npm list \n    ```", "```java\n    # Logs\n    logs\n    *.log\n    npm-debug.log*\n    yarn-debug.log*\n    yarn-error.log*\n    pnpm-debug.log*\n    lerna-debug.log*\n    node_modules\n    dist\n    dist-ssr\n    *.local \n    ```", "```java\n    import DatePicker from 'react-date-picker'; \n    ```", "```java\n    npm install ag-grid-community ag-grid-react \n    ```", "```java\n    import { useState } from 'react';\n    import axios from 'axios';\n    import './App.css';\n    type Repository = {\n      id: number;\n      full_name: string;\n      html_url: string;\n    };\n    function App() {\n      const [keyword, setKeyword] = useState('');\n      const [repodata, setRepodata] = useState<Repository[]>([]);\n      const handleClick = () => {\n        axios.get<{ items: Repository[]\n          }>(`https ://api.github .com/search/repositories?q=${keyword}`)\n        .then(response => setRepodata(response.data.items))\n        .catch(err => console.error(err));\n      }\n\n      return (\n        <>\n          <input\n            value={keyword}\n            onChange={e => setKeyword(e.target.value)} />\n          <button onClick={handleClick}>Fetch</button>\n        </>\n      );\n    export default App; \n    ```", "```java\n    import { AgGridReact } from 'ag-grid-react';\n    import 'ag-grid-community/styles/ag-grid.css';\n    import 'ag-grid-community/styles/ag-theme-material.css'; \n    ```", "```java\n    return (\n        <div className=\"App\">\n          <input value={keyword}\n            onChange={e => setKeyword(e.target.value)} />\n          <button onClick={fetchData}>Fetch</button>\n          **<****div****className****=****\"ag-theme-material\"**\n            **style****=****{{height:****500****,** **width:****850****}}>**\n            **<****AgGridReact**\n              **rowData****=****{repodata}**\n            **/>**\n          **</****div****>**\n        </div>\n      ); \n    ```", "```java\n    // Import ColDef type\n    import { ColDef } from 'ag-grid-community';\n    // Define columns\n    const [columnDefs] = useState<ColDef[]>([\n        {field: 'id'},\n        {field: 'full_name'},\n        {field: 'html_url'},\n    ]); \n    ```", "```java\n    <AgGridReact\n      rowData={data}\n      **columnDefs****=****{columnDefs}**\n    /> \n    ```", "```java\n    const [columnDefs] = useState<ColDef[]>([\n      {field: 'id'**,** **sortable****:** **true****,** **filter****:** **true**},\n      {field: 'full_name'**,** **sortable****:** **true****,** **filter****:** **true**},\n      {field: 'html_url'**,** **sortable****:** **true****,** **filter****:** **true**}\n    ]); \n    ```", "```java\n    <AgGridReact\n      rowData={data}\n      columnDefs={columnDefs}\n      **pagination****=****{true}**\n      **paginationPageSize****=****{****8}**\n    /> \n    ```", "```java\n    // Import ICellRendererParams\n    import { ICellRendererParams } from 'ag-grid-community';\n    // Modify columnDefs\n    const columnDefs = useState<ColDef[]>([\n      {field: 'id', sortable: true, filter: true},\n      {field: 'full_name', sortable: true, filter: true},\n      {field: 'html_url', sortable: true, filter: true},\n      **{**\n        **field****:** **'full_name'****,**\n        **cellRenderer****:** **(****params: ICellRendererParams****) =>** **(**\n          **<****button**\n            **onClick****=****{()** **=>** **alert(params.value)}>**\n            **Press me**\n          **</****button****>**\n        **),**\n      **},**\n    ]); \n    ```", "```java\n    const columnDefs: ColDef[] = [\n      { field: 'id', sortable: true, filter: true },\n      { field: 'full_name', sortable: true, filter: true },\n      { field: 'html_url', sortable: true, filter: true },\n      {\n        **headerName****:** **'Actions'**,\n        field: 'full_name',\n        cellRenderer: (params: ICellRendererParams) => (\n          <button\n            onClick={() => alert(params.value)}>\n            Press me\n          </button>\n        ),\n      },\n    ]; \n    ```", "```java\n    npm create vite@latest\n    cd shoppinglist\n    npm install \n    ```", "```java\n    npm install @mui/material @emotion/react @emotion/styled \n    ```", "```java\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=\\\n            Roboto:300,400,500,700&display=swap\"\n    /> \n    ```", "```java\n    // App.tsx\n    import './App.css';\n    function App() {\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    **import****Container****from****'@mui/material/Container'****;**\n    import './App.css';\n    function App() {\n      return (\n        **<****Container****>**\n        **</****Container****>**\n      );\n    }\n    export default App; \n    ```", "```java\n    // main.tsx\n    import React from 'react'\n    import ReactDOM from 'react-dom/client'\n    import App from './App.jsx'\n    **import****'./index.css'****// REMOVE THIS LINE**\n    ReactDOM.createRoot(document.getElementById('root')).render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n    ) \n    ```", "```java\n    **import** **{ useState }** **from****'react'****;**\n    import Container from '@mui/material/Container';\n    **import****AppBar****from****'@mui/material/AppBar'****;**\n    **import****Toolbar****from****'@mui/material/Toolbar'****;**\n    **import****Typography****from****'@mui/material/Typography'****;**\n    import './App.css' \n    ```", "```java\n    function App() {\n      return (\n        <Container>\n          **<****AppBar****position****=****\"static\"****>**\n            **<****Toolbar****>**\n              **<****Typography****variant****=****\"h6\"****>**\n                **Shopping List**\n              **</****Typography****>**\n            **</****Toolbar****>**\n          **</****AppBar****>**\n        </Container>\n      );\n    } \n    ```", "```java\n    // App.tsx\n    export type Item = {\n      product: string;\n      amount: string;\n    } \n    ```", "```java\n    const [items, setItems] = useState<Item[]>([]); \n    ```", "```java\n    const addItem = (item: Item) => {\n      setItems([item, ...items]);\n    } \n    ```", "```java\n    function AddItem(props) {\n      return(\n        <></>\n      );\n    }\n    export default AddItem; \n    ```", "```java\n    import Button from '@mui/material/Button';\n    import TextField from '@mui/material/TextField';\n    import Dialog from '@mui/material/Dialog';\n    import DialogActions from '@mui/material/DialogActions';\n    import DialogContent from '@mui/material/DialogContent';\n    import DialogTitle from '@mui/material/DialogTitle'; \n    ```", "```java\n    // AddItem.tsx\n    // Import useState\n    import { useState } from 'react';\n    // Add state, handleOpen and handleClose functions\n    const [open, setOpen] = useState(false);\n    const handleOpen = () => {\n      setOpen(true);\n    }\n\n    const handleClose = () => {\n      setOpen(false);\n    } \n    ```", "```java\n    return(\n        <>\n          <Button onClick={handleOpen}>\n            Add Item\n          </Button>\n          <Dialog open={open} onClose={handleClose}>\n            <DialogTitle>New Item</DialogTitle>\n            <DialogContent>\n            </DialogContent>\n            <DialogActions>\n              <Button onClick={handleClose}>\n                Cancel\n              </Button>\n              <Button onClick={addItem}>\n                Add\n              </Button>\n            </DialogActions>\n          </Dialog>\n        </>\n    ); \n    ```", "```java\n    // Add the following import to AddItem.tsx\n    import { Item } from './App'; \n    ```", "```java\n    // item state\n    const [item, setItem] = useState<Item>({\n      product: '',\n      amount: '',\n    }); \n    ```", "```java\n    <DialogContent>\n      <TextField value={item.product} margin=\"dense\"\n        onChange={ e => setItem({...item,\n          product: e.target.value}) } \n        label=\"Product\" fullWidth />\n      <TextField value={item.amount} margin=\"dense\"\n        onChange={ e => setItem({...item,\n          amount: e.target.value}) }\n        label=\"Amount\" fullWidth />\n    </DialogContent> \n    ```", "```java\n    // AddItem.tsx\n    type AddItemProps = {\n      addItem: (item: Item) => void;\n    }\n    function AddItem(props: AddItemProps) {\n      const [open, setOpen] = useState(false);\n      // Continues... \n    ```", "```java\n    // Calls addItem function and passes item state into it\n    const addItem = () => {\n      props.addItem(item);\n      // Clear text fields and close modal dialog\n      setItem({ product: '', amount: '' }); \n      handleClose();\n    } \n    ```", "```java\n    import AddItem from './AddItem'; \n    ```", "```java\n    // App.tsx\n    return (\n      <Container>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\">\n              Shopping List\n            </Typography>\n          </Toolbar>\n        </AppBar>\n        **<****AddItem****addItem****=****{addItem}/****>**\n      </Container>\n    ); \n    ```", "```java\n    // App.tsx\n    import List from '@mui/material/List';\n    import ListItem from '@mui/material/ListItem';\n    import ListItemText from '@mui/material/ListItemText'; \n    ```", "```java\n    // App.tsx\n    return (\n        <Container>\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Shopping List\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <AddItem addItem={addItem} />\n          **<****List****>**\n            **{**\n              **items.map((item, index) =>**\n                **<****ListItem****key****=****{index}****divider****>**\n                  **<****ListItemText**\n                    **primary****=****{item.product}**\n                    **secondary****=****{item.amount}/****>**\n                **</****ListItem****>**\n              **)**\n            **}**\n          **</****List****>**\n        </Container>\n      ); \n    ```", "```java\n<Button **variant=****\"outlined\"** onClick={handleOpen}>\n    Add Item\n</Button> \n```", "```java\nnpm install react-router-dom@6 \n```", "```java\n provides an example of the Route component. The element prop defines a rendered component when the user navigates to the contact endpoint that is defined in the path prop. The path is relative to the current location:\n```", "```java\n<Route path=\"contact\" element={<Contact />} /> \n```", "```java\n<Route path=\"/contact/*\" element={<Contact />} /> \n```", "```java\n<Link to=\"/contact\">Contact</Link> \n```", "```java\n    npm create vite@latest\n    cd routerapp\n    npm install\n    npm install react-router-dom@6 \n    ```", "```java\n    import { BrowserRouter, Routes, Route, Link } from 'react-\n      router-dom';\n    import './App.css';\n    function App() {\n      return (\n        <>\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    // Home.tsx\n    function Home() {\n      return <h3>Home component</h3>;\n    }\n    export default Home;\n    // Contact.tsx\n    function Contact() {\n      return <h3>Contact component</h3>;\n    }\n    export default Contact; \n    ```", "```java\n    import { BrowserRouter, Routes, Route, Link } from 'react-\n      router-dom’;\n    **import****Home****from****'./Home'****;**\n    **import****Contact****from****'./Contact'****;**\n    import './App.css';\n    function App() {\n      return (\n        <>\n          **<****BrowserRouter****>**\n            **<****nav****>**\n              **<****Link****to****=****\"/\"****>****Home****</****Link****>****{' | '}**\n              **<****Link****to****=****\"/contact\"****>****Contact****</****Link****>**\n            **</****nav****>**\n            **<****Routes****>**\n              **<****Route****path****=****\"/\"****element****=****{****<****Home** **/>****} />**\n              **<****Route****path****=****\"contact\"****element****=****{****<****Contact** **/>****} />**\n           **</****Routes****>**\n          **</****BrowserRouter****>**\n        </>\n      );\n    }\n    export default App; \n    ```", "```java\n    // Create PageNotFound component\n    function PageNotFound() {\n      return <h1>Page not found</h1>;\n    }\n    export default PageNotFound; \n    ```", "```java\n    // Import PageNotFound component into App.tsx\n    import PageNotFound from './PageNotFound';\n    // Add new page not found route \n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"contact\" element={<Contact />} />\n      **<****Route****path****=****\"*\"****element****=****{****<****PageNotFound** **/>****} />**\n    </Routes> \n    ```", "```java\n    <Routes>\n      <Route path=\"contact\" element={<Contact />}>\n          <Route path=\"london\" element={<ContactLondon />} />\n          <Route path=\"paris\" element={<ContactParis />} />\n      </Route>\n    </Routes> \n    ```"]