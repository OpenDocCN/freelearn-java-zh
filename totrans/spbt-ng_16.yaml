- en: '16'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '16'
- en: Packaging Backend and Frontend with Maven
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven 打包后端和前端
- en: In the previous chapter, we learned what Cypress is and its benefits. We also
    learned how to write Cypress end-to-end tests and how to run them. Finally, we
    learned how to intercept HTTP requests to mock responses.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了 Cypress 是什么以及它的好处。我们还学习了如何编写 Cypress 端到端测试以及如何运行它们。最后，我们学习了如何拦截
    HTTP 请求来模拟响应。
- en: This chapter will teach you how to combine your Angular and Spring Boot applications
    and then run them on your local machine.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教会您如何结合您的 Angular 和 Spring Boot 应用程序，然后在您的本地机器上运行它们。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: What is frontend-maven-plugin?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端-maven-plugin 是什么？
- en: Adding configurations to Spring Boot and Angular’s integration
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Spring Boot 和 Angular 集成添加配置
- en: Packaging Spring Boot
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打包 Spring Boot
- en: Running the JAR file
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 JAR 文件
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following link will take you to the finished version of code for this chapter:
    [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将带您到本章代码的完成版本：[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes)。
- en: What is frontend-maven-plugin?
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前端-maven-plugin 是什么？
- en: Okay – before I answer the question of what `frontend-maven-plugin` is, let’s
    see how we can package our application. We can build Spring Boot to generate a
    JAR file and create a production build of Angular as well.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好的——在我回答 `frontend-maven-plugin` 是什么的问题之前，让我们看看我们如何打包我们的应用程序。我们可以构建 Spring Boot
    以生成 JAR 文件，并创建 Angular 的生产构建。
- en: But what if we can create a JAR file for Spring Boot that will also contain
    the production build of Angular inside it? The approach of putting the frontend
    and the backend in a single JAR file will provide us with an easier way to deploy
    the application to test and production environments.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们能创建一个包含 Angular 生产构建的 Spring Boot JAR 文件会怎样？将前端和后端放入单个 JAR 文件的方法将为我们提供一种更简单的方式来部署应用程序到测试和生产环境。
- en: It will allow us to manage a single path for the API and the frontend application.
    To do this, we will require a Maven plugin called `frontend-maven-plugin` ([https://github.com/eirslett/frontend-maven-plugin](https://github.com/eirslett/frontend-maven-plugin)),
    which will help us create a JAR file that contains both our backend and frontend.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们管理 API 和前端应用程序的单一路径。为此，我们需要一个名为 `frontend-maven-plugin` 的 Maven 插件（[https://github.com/eirslett/frontend-maven-plugin](https://github.com/eirslett/frontend-maven-plugin)），它将帮助我们创建一个包含我们的后端和前端的
    JAR 文件。
- en: Some requirements ensure that our backend and frontend will work together. In
    the next section, we’ll find out what configurations we need in our backend and
    frontend.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一些要求确保我们的后端和前端可以协同工作。在下一节中，我们将了解我们后端和前端需要哪些配置。
- en: Adding configurations to Spring Boot and Angular’s integration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Spring Boot 和 Angular 集成添加配置
- en: In this section, we will write some configurations in the Spring Boot application
    and the Angular application to ensure that Spring Boot will run in production
    and that Angular will render the web application’s user interface.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向 Spring Boot 应用程序和 Angular 应用程序中编写一些配置，以确保 Spring Boot 可以在生产环境中运行，并且
    Angular 可以渲染 Web 应用程序的用户界面。
- en: First, let’s move the Angular app to the directory of our Spring Boot application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们把 Angular 应用程序移动到我们的 Spring Boot 应用程序的目录中。
- en: Adding the Angular app to the Spring Boot project
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将 Angular 应用程序添加到 Spring Boot 项目中
- en: In this section, we will move the Angular app to the Spring Boot project. By
    doing this, there will be an Angular project inside the Spring Boot project.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把 Angular 应用程序移动到 Spring Boot 项目中。通过这样做，Spring Boot 项目内部将包含一个 Angular
    项目。
- en: 'To start, create a new folder named `frontend` inside the Spring Boot project.
    Move all the files and folders of the Angular application inside the `frontend`
    folder, like so:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在 Spring Boot 项目中创建一个名为 `frontend` 的新文件夹。将 Angular 应用程序的文件和文件夹移动到 `frontend`
    文件夹中，如下所示：
- en: '![Figure 16.1 – The frontend folder inside the Spring Boot project](img/B18159_16_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.1 – Spring Boot 项目中的前端文件夹](img/B18159_16_01.jpg)'
- en: Figure 16.1 – The frontend folder inside the Spring Boot project
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.1 – Spring Boot 项目中的前端文件夹
- en: '*Figure 16**.1* shows all the Angular files and folders inside the `frontend`
    folder, which is inside the Spring Boot project.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 16.1* 展示了 Spring Boot 项目内部 `frontend` 文件夹中的所有 Angular 文件和文件夹。'
- en: You can name the `frontend` folder whatever you want, so long as you map the
    path of the `frontend` folder to the `workingDirectory` property of `fileset`
    property of **Apache Maven AntRun Plugin**, which allows you to run Ant tasks
    from within Maven.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以随意命名 `frontend` 文件夹，只要将 `frontend` 文件夹的路径映射到 `fileset` 属性的 `workingDirectory`
    属性，这是 Apache Maven AntRun 插件的功能，它允许你在 Maven 中运行 Ant 任务。
- en: Let’s use the two Maven plugins, `frontend-maven-plugin` and `maven-antrun-plugin`,
    which we need in the next section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用两个 Maven 插件，`frontend-maven-plugin` 和 `maven-antrun-plugin`，我们将在下一节中需要它们。
- en: Using frontend-maven-plugin
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 frontend-maven-plugin
- en: In this section, we will use `frontend-maven-plugin`, which will install npm
    and Node.js locally. It will also run the `npm build` command in the `frontend`
    folder and copy the build files that `npm build` has generated.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 `frontend-maven-plugin`，它将本地安装 npm 和 Node.js。它还将在 `frontend` 文件夹中运行
    `npm build` 命令，并复制 `npm build` 生成的构建文件。
- en: 'So, let’s start:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧：
- en: 'Go to your `pom.xml` file and insert the following code as one of the build
    plugins in your Maven `pom` file:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的 `pom.xml` 文件，并在你的 Maven `pom` 文件中的构建插件之一插入以下代码：
- en: '[PRE0]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding markup shows that, while building the Spring Boot application,
    the plugin will install `Node.js v16.17.0` and `npm CLI 8.19.1` in the `frontend`
    working directory. It will also execute the `npm install` command to download
    all dependency packages of the Angular application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的标记显示，在构建 Spring Boot 应用程序时，插件将在 `frontend` 工作目录中安装 `Node.js v16.17.0` 和 `npm
    CLI 8.19.1`。它还将执行 `npm install` 命令以下载 Angular 应用程序的所有依赖包。
- en: After performing all the necessary installations, the next thing that the plugin
    will execute is the `npm run build` command, which will create a production build
    of the Angular application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行所有必要的安装后，插件将执行下一个操作是 `npm run build` 命令，这将创建 Angular 应用程序的生产构建。
- en: 'Next, we must edit the `npm build` script in the `package.json` file of the
    Angular application using the following code:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须使用以下代码编辑 Angular 应用程序的 `package.json` 文件中的 `npm build` 脚本：
- en: '[PRE11]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code tells Angular that `npm run build` is for a production build.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码告诉 Angular，`npm run build` 是用于生产构建。
- en: 'We also have to edit the `environment.prod.ts` file inside the environment
    folder of Angular. Change the code to this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还必须在 Angular 的环境文件夹中的 `environment.prod.ts` 文件中进行编辑。将代码更改为以下内容：
- en: '[PRE12]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`apiURL` and `authURL` are just temporary. We will change them and use the
    real API URL and Auth URL properties in the real deployment of the application.
    We need to add the preceding code because we are using `apiURL` and `authURL`
    in our app for development, but we are missing the values for the production environment.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`apiURL` 和 `authURL` 只是临时的。我们将更改它们，并在应用程序的实际部署中使用真实的 API URL 和认证 URL 属性。我们需要添加前面的代码，因为我们正在我们的应用程序中使用
    `apiURL` 和 `authURL` 进行开发，但我们缺少生产环境的值。'
- en: When the app builds for the production environment, the Angular app will collect
    the values from `environment.prod.ts` instead of using the `environment.ts` file.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序为生产环境构建时，Angular 应用程序将收集 `environment.prod.ts` 中的值，而不是使用 `environment.ts`
    文件。
- en: Now, let’s learn about `maven-antrun-plugin` and configure our `.pom` file again.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解 `maven-antrun-plugin` 并再次配置我们的 `.pom` 文件。
- en: Using maven-antrun-plugin
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 maven-antrun-plugin
- en: 'This section will use `maven-antrun-plugin` in the Spring Boot application.
    Open up your `pom.xml` file and insert the following code into one of the plugins
    in the `build` block of the markup. Put it below the markup of `frontend-maven-plugin`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将在 Spring Boot 应用程序中使用 `maven-antrun-plugin`。打开你的 `pom.xml` 文件，并在标记的 `build`
    块中的一个插件中插入以下代码。将其放在 `frontend-maven-plugin` 标记下方：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, `maven-antrum-plugin` is a configuration that copies the files and folders
    of the `"${project.basedir}/frontend/dist/superheroes"` path and pastes them into
    the `todir="${project.build.directory}/classes/public"` path before running the
    task. This will copy the frontend app and put it in the root folder of the JAR
    file of Spring Boot.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`maven-antrun-plugin` 是一个配置，它将 `"${project.basedir}/frontend/dist/superheroes"`
    路径下的文件和文件夹复制并粘贴到在运行任务之前的 `todir="${project.build.directory}/classes/public"` 路径。这将复制前端应用程序并将其放在
    Spring Boot JAR 文件的根目录中。
- en: Now, let’s configure the Spring MVC configuration of our app.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们配置我们的应用程序的 Spring MVC 配置。
- en: Implementing WebMvcConfigurer
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现 WebMvcConfigurer
- en: In this section, we will make the Spring Boot application a host for the Angular
    application by adding a configuration file. To do this, we must add a configuration
    class to the config directory of our Spring Boot application and name it `MvcConfig`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过添加配置文件将 Spring Boot 应用程序作为 Angular 应用程序的宿主。为此，我们必须将配置类添加到我们的 Spring
    Boot 应用程序的配置目录中，并将其命名为 `MvcConfig`。
- en: 'After creating the `MvcConfig` class, add the `WebMvcConfigurer` interface
    to the file, like so:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `MvcConfig` 类之后，将 `WebMvcConfigurer` 接口添加到文件中，如下所示：
- en: '[PRE18]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code can also be found in the GitHub repository for this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码也可以在本书的 GitHub 仓库中找到。
- en: The `MvcConfig` class implements `WebMvcConfigurer` and overrides the `addResourceHandlers`
    method.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`MvcConfig` 类实现了 `WebMvcConfigurer` 并重写了 `addResourceHandlers` 方法。'
- en: 'Pass the `"/**"` argument into `addResourceHandler`, like so:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `"/**"` 参数传递给 `addResourceHandler`，如下所示：
- en: '[PRE19]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will make the configuration affect all project routes. This part belongs
    to the external-facing URI of the application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使配置影响所有项目路由。这部分属于应用程序的外部 URI。
- en: 'Then, map the external-facing URI path to the directory where the resources
    are located, like so:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将外部 URI 路径映射到资源所在的目录，如下所示：
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Finally, add `new ClassPathResource("/public/index.html")`. This redirects requests
    that are not handled by the Spring Boot application that are going to the Angular
    application or the frontend application.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，添加 `new ClassPathResource("/public/index.html")`。这将重定向那些未由 Spring Boot 应用程序处理的请求，这些请求原本要发送到
    Angular 应用程序或前端应用程序。
- en: We are close to packaging both applications into one. We’ll learn how to do
    this in the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将将两个应用程序打包成一个。我们将在下一节中学习如何做到这一点。
- en: Packaging Spring Boot
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包 Spring Boot
- en: In this section, we will package the Spring Boot application and the Angular
    application. The idea is to combine the two applications, giving you one single
    JAR file to deploy. Let’s learn how to do this.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将打包 Spring Boot 应用程序和 Angular 应用程序。想法是将这两个应用程序结合起来，给您提供一个单一的 JAR 文件进行部署。让我们学习如何做到这一点。
- en: 'After all the configurations we did, now, it’s a matter of running the following
    Maven commands in the same order:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们完成所有配置之后，现在只需按照相同的顺序运行以下 Maven 命令：
- en: '[PRE21]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `mvn clean` command cleans the Maven project by deleting the target directory,
    whereas the `mvn package` command builds the Maven project and creates an executable
    JAR file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`mvn clean` 命令通过删除目标目录来清理 Maven 项目，而 `mvn package` 命令则构建 Maven 项目并创建一个可执行的
    JAR 文件。'
- en: 'These two Maven commands are enough to create an executable JAR file with the
    Spring Boot and Angular packages inside it; see *Figure 16**.2*:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个 Maven 命令就足以创建一个包含 Spring Boot 和 Angular 打包的执行 JAR 文件；请参阅 *图 16.2*：
- en: '![Figure 16.2 – Target folder with the JAR file inside](img/B18159_16_02.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.2 – 包含 JAR 文件的目标文件夹](img/B18159_16_02.jpg)'
- en: Figure 16.2 – Target folder with the JAR file inside
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.2 – 包含 JAR 文件的目标文件夹
- en: Packaging the applications is simple since we already did all the hard work
    configuring the Angular and Spring Boot applications.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经完成了配置 Angular 和 Spring Boot 应用程序的所有艰苦工作，因此打包应用程序很简单。
- en: Now, we have the JAR file. In the next section, we will run the JAR file using
    a Java command to see if everything is fine.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有了 JAR 文件。在下一节中，我们将使用 Java 命令运行 JAR 文件，以查看一切是否正常。
- en: Running the JAR file
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行 JAR 文件
- en: 'In this section, we will run the JAR file we have packaged and see that the
    Angular application communicates with the Spring Boot application. Follow these
    steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将运行我们打包的 JAR 文件，并查看 Angular 应用程序是否与 Spring Boot 应用程序通信。请按照以下步骤操作：
- en: 'To run the application, you can either use the `java` command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行应用程序，您可以使用 `java` 命令：
- en: '[PRE22]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding Java CLI command will run an executable JAR file. In the CLI,
    you will see that the Tomcat web server has started on port `8080`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 Java CLI 命令将运行一个可执行的 JAR 文件。在 CLI 中，您将看到 Tomcat 服务器已在端口 `8080` 上启动。
- en: 'Go to `http://localhost:8080`; you will be redirected to `http://localhost:8080/login`,
    which consists of a login form. *Figure 16**.3* shows this login form:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 `http://localhost:8080`；您将被重定向到 `http://localhost:8080/login`，其中包含一个登录表单。*图
    16.3* 展示了这个登录表单：
- en: '![Figure 16.3 – Login form](img/B18159_16_03.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.3 – 登录表单](img/B18159_16_03.jpg)'
- en: Figure 16.3 – Login form
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.3 – 登录表单
- en: 'Try to log in and navigate to the anti-heroes page, where you can create new
    heroes or villains using the form:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试登录并导航到反派角色页面，在那里您可以使用表单创建新的英雄或反派：
- en: '![Figure 16.4 – Anti-heroes form](img/B18159_16_04.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 16.4 – 反派角色表单](img/B18159_16_04.jpg)'
- en: Figure 16.4 – Anti-heroes form
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16.4 – 反派角色表单
- en: '*Figure 16**.4* shows that everything is working on the anti-heroes form, from
    signing in to using CRUD operations.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '*图16**.4* 显示，从登录到使用CRUD操作，反英雄表型上的所有功能都在正常工作。'
- en: With that, we have finished packaging the Spring Boot and Angular applications.
    Now, let’s summarize what we have learned.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经完成了Spring Boot和Angular应用程序的打包。现在，让我们总结一下我们学到了什么。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that the `frontend-maven-plugin` and `antrun-maven-plugin`
    plugins can help you package your web client and Spring Boot application as one
    executable JAR file to make the deployment easy. You also learned how to run a
    JAR file on your local machine that helps you prepare your application for deployment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到`frontend-maven-plugin`和`antrun-maven-plugin`插件可以帮助你将你的Web客户端和Spring
    Boot应用程序打包成一个可执行的JAR文件，从而使部署变得简单。你还学习了如何在本地机器上运行JAR文件，这有助于你为部署准备应用程序。
- en: In the next chapter, you will learn how to use GitHub Actions to prepare the
    applications for deployment. You will also learn how to use Heroku to create an
    instance of the database for the application and then deploy the application to
    Heroku.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用GitHub Actions为部署准备应用程序。你还将学习如何使用Heroku为应用程序创建数据库实例，然后将应用程序部署到Heroku。
