- en: '16'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Packaging Backend and Frontend with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what Cypress is and its benefits. We also
    learned how to write Cypress end-to-end tests and how to run them. Finally, we
    learned how to intercept HTTP requests to mock responses.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you how to combine your Angular and Spring Boot applications
    and then run them on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is frontend-maven-plugin?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding configurations to Spring Boot and Angular’s integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packaging Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the JAR file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link will take you to the finished version of code for this chapter:
    [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-16/superheroes).'
  prefs: []
  type: TYPE_NORMAL
- en: What is frontend-maven-plugin?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Okay – before I answer the question of what `frontend-maven-plugin` is, let’s
    see how we can package our application. We can build Spring Boot to generate a
    JAR file and create a production build of Angular as well.
  prefs: []
  type: TYPE_NORMAL
- en: But what if we can create a JAR file for Spring Boot that will also contain
    the production build of Angular inside it? The approach of putting the frontend
    and the backend in a single JAR file will provide us with an easier way to deploy
    the application to test and production environments.
  prefs: []
  type: TYPE_NORMAL
- en: It will allow us to manage a single path for the API and the frontend application.
    To do this, we will require a Maven plugin called `frontend-maven-plugin` ([https://github.com/eirslett/frontend-maven-plugin](https://github.com/eirslett/frontend-maven-plugin)),
    which will help us create a JAR file that contains both our backend and frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Some requirements ensure that our backend and frontend will work together. In
    the next section, we’ll find out what configurations we need in our backend and
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Adding configurations to Spring Boot and Angular’s integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will write some configurations in the Spring Boot application
    and the Angular application to ensure that Spring Boot will run in production
    and that Angular will render the web application’s user interface.
  prefs: []
  type: TYPE_NORMAL
- en: First, let’s move the Angular app to the directory of our Spring Boot application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Angular app to the Spring Boot project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will move the Angular app to the Spring Boot project. By
    doing this, there will be an Angular project inside the Spring Boot project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, create a new folder named `frontend` inside the Spring Boot project.
    Move all the files and folders of the Angular application inside the `frontend`
    folder, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1 – The frontend folder inside the Spring Boot project](img/B18159_16_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.1 – The frontend folder inside the Spring Boot project
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16**.1* shows all the Angular files and folders inside the `frontend`
    folder, which is inside the Spring Boot project.'
  prefs: []
  type: TYPE_NORMAL
- en: You can name the `frontend` folder whatever you want, so long as you map the
    path of the `frontend` folder to the `workingDirectory` property of `fileset`
    property of **Apache Maven AntRun Plugin**, which allows you to run Ant tasks
    from within Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s use the two Maven plugins, `frontend-maven-plugin` and `maven-antrun-plugin`,
    which we need in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using frontend-maven-plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use `frontend-maven-plugin`, which will install npm
    and Node.js locally. It will also run the `npm build` command in the `frontend`
    folder and copy the build files that `npm build` has generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, let’s start:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to your `pom.xml` file and insert the following code as one of the build
    plugins in your Maven `pom` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup shows that, while building the Spring Boot application,
    the plugin will install `Node.js v16.17.0` and `npm CLI 8.19.1` in the `frontend`
    working directory. It will also execute the `npm install` command to download
    all dependency packages of the Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: After performing all the necessary installations, the next thing that the plugin
    will execute is the `npm run build` command, which will create a production build
    of the Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must edit the `npm build` script in the `package.json` file of the
    Angular application using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code tells Angular that `npm run build` is for a production build.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also have to edit the `environment.prod.ts` file inside the environment
    folder of Angular. Change the code to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`apiURL` and `authURL` are just temporary. We will change them and use the
    real API URL and Auth URL properties in the real deployment of the application.
    We need to add the preceding code because we are using `apiURL` and `authURL`
    in our app for development, but we are missing the values for the production environment.'
  prefs: []
  type: TYPE_NORMAL
- en: When the app builds for the production environment, the Angular app will collect
    the values from `environment.prod.ts` instead of using the `environment.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s learn about `maven-antrun-plugin` and configure our `.pom` file again.
  prefs: []
  type: TYPE_NORMAL
- en: Using maven-antrun-plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section will use `maven-antrun-plugin` in the Spring Boot application.
    Open up your `pom.xml` file and insert the following code into one of the plugins
    in the `build` block of the markup. Put it below the markup of `frontend-maven-plugin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here, `maven-antrum-plugin` is a configuration that copies the files and folders
    of the `"${project.basedir}/frontend/dist/superheroes"` path and pastes them into
    the `todir="${project.build.directory}/classes/public"` path before running the
    task. This will copy the frontend app and put it in the root folder of the JAR
    file of Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s configure the Spring MVC configuration of our app.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing WebMvcConfigurer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will make the Spring Boot application a host for the Angular
    application by adding a configuration file. To do this, we must add a configuration
    class to the config directory of our Spring Boot application and name it `MvcConfig`.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `MvcConfig` class, add the `WebMvcConfigurer` interface
    to the file, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code can also be found in the GitHub repository for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `MvcConfig` class implements `WebMvcConfigurer` and overrides the `addResourceHandlers`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Pass the `"/**"` argument into `addResourceHandler`, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This will make the configuration affect all project routes. This part belongs
    to the external-facing URI of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, map the external-facing URI path to the directory where the resources
    are located, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Finally, add `new ClassPathResource("/public/index.html")`. This redirects requests
    that are not handled by the Spring Boot application that are going to the Angular
    application or the frontend application.
  prefs: []
  type: TYPE_NORMAL
- en: We are close to packaging both applications into one. We’ll learn how to do
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Packaging Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will package the Spring Boot application and the Angular
    application. The idea is to combine the two applications, giving you one single
    JAR file to deploy. Let’s learn how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'After all the configurations we did, now, it’s a matter of running the following
    Maven commands in the same order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `mvn clean` command cleans the Maven project by deleting the target directory,
    whereas the `mvn package` command builds the Maven project and creates an executable
    JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: 'These two Maven commands are enough to create an executable JAR file with the
    Spring Boot and Angular packages inside it; see *Figure 16**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2 – Target folder with the JAR file inside](img/B18159_16_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.2 – Target folder with the JAR file inside
  prefs: []
  type: TYPE_NORMAL
- en: Packaging the applications is simple since we already did all the hard work
    configuring the Angular and Spring Boot applications.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have the JAR file. In the next section, we will run the JAR file using
    a Java command to see if everything is fine.
  prefs: []
  type: TYPE_NORMAL
- en: Running the JAR file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will run the JAR file we have packaged and see that the
    Angular application communicates with the Spring Boot application. Follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the application, you can either use the `java` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding Java CLI command will run an executable JAR file. In the CLI,
    you will see that the Tomcat web server has started on port `8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `http://localhost:8080`; you will be redirected to `http://localhost:8080/login`,
    which consists of a login form. *Figure 16**.3* shows this login form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.3 – Login form](img/B18159_16_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.3 – Login form
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to log in and navigate to the anti-heroes page, where you can create new
    heroes or villains using the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 16.4 – Anti-heroes form](img/B18159_16_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 16.4 – Anti-heroes form
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16**.4* shows that everything is working on the anti-heroes form, from
    signing in to using CRUD operations.'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have finished packaging the Spring Boot and Angular applications.
    Now, let’s summarize what we have learned.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned that the `frontend-maven-plugin` and `antrun-maven-plugin`
    plugins can help you package your web client and Spring Boot application as one
    executable JAR file to make the deployment easy. You also learned how to run a
    JAR file on your local machine that helps you prepare your application for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to use GitHub Actions to prepare the
    applications for deployment. You will also learn how to use Heroku to create an
    instance of the database for the application and then deploy the application to
    Heroku.
  prefs: []
  type: TYPE_NORMAL
