- en: Setting up Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know what RemoteWebDriver is and how it works, we are ready to
    learn about Selenium Grid. In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Why we need Selenium Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What Selenium Grid is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can use Selenium Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test cases using Selenium Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Selenium Grid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s try to understand why we need Selenium Grid by analyzing a scenario.
    You have a web application that needs to be tested on the following browser-machine
    combinations:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Chrome on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome on macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internet Explorer 11 on Windows 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox on Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can simply alter the test script we created in the previous chapter and point
    to the Selenium Standalone Server running on each of these combinations (that
    is, Windows 10, macOS, or Linux), as shown in the following code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, your test scripts are tightly coupled to the machines
    that host the target platform and the target browsers. If the Windows 10 host
    changes, you should refactor your test script to handle that. This is not an ideal
    way to design your tests. The focus of your test scripts should be on the functionality
    of your web application and not on the infrastructure that is used to execute
    these test scripts. There should be a central point to manage all the different
    environments. To solve this, we make use of **Selenium Grid**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Selenium Grid** offers a cross-browser testing environment with several
    different platforms (such as Windows, Mac, and Linux) to execute tests. The Selenium
    Grid is managed from a central point, called the **hub.** The hub has the information
    of all the different testing platforms, known as **nodes** (the machines that
    have the desired operating systems and browser versions and connected to the hub).
    The hubassigns these nodes to execute tests whenever the test scripts request
    them, based on the capabilities requested by the test. The following diagram shows
    what a Selenium Grid looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fbc7b253-0888-47d2-a7e7-4279585bd71d.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram, there is one hub, four *nodes* of different platforms,
    and the machine where the test scripts are located. The test script will communicate
    with the hub and request a target platform to be executed. The hub assigns a node
    with the target platform to the test script. The node executes the test script
    and sends the result back to the hub, which in turn forwards the results to the
    test script. This is what Selenium Grid looks like and how it works at a high
    level.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have seen how Selenium Grid works theoretically, let''s see what
    works as hubs and nodes in it. Fortunately, as we are dealing with Selenium Grid,
    we can use the same Remote WebDriver server that we used in the previous chapter
    to work as Selenium Grid as well. If you remember, we used `seleniumserver-standalone-3.12.0.jar`
    to start as a Selenium Standalone Server. We can use the same JAR file to be started
    in the hub mode on the hub machine, and a copy of the JAR file can be started
    in the node mode on the node machine. Try executing the following command on your
    JAR file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following output shows how to use the server in a grid environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8247e16b-eaa5-4054-979b-90ffc3ad7c72.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see two options: to use it as a Standalone Server, which acts as a
    Remote WebDriver, and to use it in a grid environment, which describes Selenium
    Grid. In this chapter, we will use this JAR file as a Selenium Grid.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the hub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hub is the central point of a Selenium Grid. It has a registry of all the
    available nodes that are connected and part of a particular grid. The hub is a
    Selenium Standalone server running in the hub mode, listening on port `4444` of
    a machine by default. The test scripts will try to connect to the hub on this
    port, just as any Remote WebDriver. The hub will take care of rerouting the test-script
    traffic to the appropriate test-platform node. Let''s see how we can start a hub
    node. Navigate to the location where you have your Selenium server JAR file and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Doing this will start your server in the hub mode. By default, the server starts
    listening on port `4444`; however, you can start your server on the port of your
    choice. Suppose you want to start the server on port `1111`; it can be done as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the console output of the Grid Hub being started
    on port `1111`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6459fe27-fa58-4c64-b753-8cccc6bc503b.png)'
  prefs: []
  type: TYPE_IMG
- en: All the test scripts should connect to the hub on this port. Now launch your
    browser and connect to the machine that is hosting your hub on port `1111`. Here,
    the machine that is hosting my hub has the IP address 192.168.0.101.
  prefs: []
  type: TYPE_NORMAL
- en: 'What you should see on your browser is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f77746ed-d5f5-4e91-9b25-a59b4462e838.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It shows the version of the server that is being used as the Grid Hub. Now
    click the Console link to navigate to the Grid Console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1af75304-9500-4607-a906-510654f2310b.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the page talks about many configuration parameters. We will
    discuss these configuration parameters in the *Configuring Selenium Grid* section.
    So, you've now learned how to start a grid on a port and listen for connections.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As our hub is up and running, it''s now time to start a node and connect it
    to the hub. In this example, we will configure a macOS machine that has Chrome
    installed on it. So, if any test script requests the hub for a macOS platform
    and Chrome browser, the hub will choose this node. Let''s see how we can start
    the node. The command to start the node and register with the hub is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the Selenium server in the node mode and register this node
    with the already-started hub:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91992fe4-f543-45ad-abe3-006e42cbc925.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you go back to the Grid Console on the browser, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/77dc8da7-4873-4de6-9730-50f8447e3f8e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot shows the http://192.168.0.101:16784 node URL, which,
    in this case, is running on the Mac platform. By default, the number of browsers
    listed for every node is 11: 5 for Firefox, five for Chrome, and one for IE. This
    can be overridden by specifying the `browser` option, which we will see in the
    *Configuring Selenium Grid* section.'
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, start another node on Windows and register to the hub using the same
    command used to start the node on macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the existing test script to use Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen test scripts that run on our local machines or on Selenium
    Standalone servers. Executing test scripts on Selenium Grid is very similar to
    executing tests on Remote WebDriver, except that you will also mention the platform
    details for Grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a test script that uses the Remote WebDriver server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now try executing the preceding test script and observe the log output of the
    hub and the node. The output log of the hub is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f1aa8480-8f1b-499d-bf4f-f24a999d0261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The sequence of steps that happens at the hub end is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The hub gets a request to create a new session for `platform=MAC, browserName=chrome`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It verifies the available nodes that match the `capabilities` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If available, it creates a new session with the node host; if not, it rejects
    the request from the test script, saying that the desired capabilities don't match
    any of the registered nodes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If a session is created with the node host in the preceding step, create a
    new test-slot session and hand over the test script to the node. Similarly, the
    output you should see in the console log of the hub is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c9ca183-59a5-45a3-a5f0-b81d29f053cd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The sequence of steps performed on the node is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The node host creates a new session with the requested desired capabilities.
    This will launch the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It executes the test script's steps on the launched browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It ends the session and forwards the result to the hub, which in turn sends
    it to the test script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Requesting for non-registered capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The hub will reject the request from the test script when the test script asks
    for a capability that is not registered with the hub. Let''s modify the preceding
    test script to request the Opera browser instead of Chrome. The test script should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The hub checks whether there is any node that matches the desired capabilities.
    If it doesn''t find one (as in this case), it will reject the request from the
    test script by throwing a `CapabilityNotPresentOnTheGridException` exception,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c0e6b5a2-26eb-47c3-b637-65aa72d3d77e.png)'
  prefs: []
  type: TYPE_IMG
- en: Queuing up the request if the node is busy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, you can send five test-script requests to any node. Although it
    is possible to change that configuration, let's see what happens when a node is
    already serving five requests, and you fire up another request for that node via
    the hub. The hub will keep polling the node until it gets a free test slot from
    the node. The test scripts are made to wait during this time. The hub says there
    are no free slots for the sixth session to be established with the same node.
    Meanwhile, on the node host, the node tries to create sessions for the five requests
    and starts executing the test scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Upon creating the sessions, five Chrome windows are launched and the test scripts
    are executed on them. After serving the first five test-script requests, the hub
    will establish the waiting sixth session with the node, and the sixth request
    will be served.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with two nodes with matching capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many configuration options that Selenium Grid provides to control
    the behavior of a node and a hub while you execute your test scripts. We will
    discuss them here.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many configuration options that Selenium Grid provides to control
    the behavior of a node and a hub while you execute your test scripts. We will
    discuss them here.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying node-configuration parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will go through the configuration parameters for a node.
  prefs: []
  type: TYPE_NORMAL
- en: Setting supported browsers by a node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw earlier, when we register a node with a hub, by default, the node
    is shown as supporting five instances of the Firefox browser, five instances of
    the Chrome browser, and one instance of Internet Explorer, irrespective of whether
    the node actually supports them. But to register your node with the browsers of
    your choice, Selenium Grid provides a browser option, using which we can achieve
    this. Let''s say we want our node to be registered to support Firefox, Chrome,
    and Safari; we can do that using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The Grid Console looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bf5f2d66-9ec1-4d46-9a7b-83d57842e2b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Setting node timeouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This parameter is set when registering a node with a hub. The value provided
    to these parameters is the time in seconds that a hub can actually wait before
    it terminates a test script execution on a node if the test script doesn't perform
    any kind of activity on the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to configure your node with a node timeout is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have registered a node with a node timeout value of 300 seconds. So,
    the hub will terminate the test script if it doesn't perform any activity on the
    node for more than 300 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the limit on browser instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have seen that, by default, there are 11 instances of browsers getting registered
    to a node. We have seen how to register our own browser. In this section, we will
    see how many instances of those browsers we can allow in our node. For this to
    be controlled, Selenium Grid comes out with a configuration parameter, called
    `maxInstances`, using which we can specify how many instances of a particular
    browser we want our node to provide. The command to do that is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are registering a node that provides three instances of Firefox, three
    instances of Chrome, and one instance of Safari.
  prefs: []
  type: TYPE_NORMAL
- en: Reregistering the node automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If the hub crashes or restarts after a node registers to it, all the information
    of the nodes that are already registered is lost. Going back to each of the nodes
    and reregistering them manually would prove to be tedious. The impact will be
    even worse if we haven't realized that the hub has restarted, because all the
    test scripts would fail as a result. So, to handle this kind of situation, Selenium
    Grid provides a configuration parameter to a node, through which we can specify
    the node to reregister itself automatically to the hub after a specified amount
    of time. If not specified, the default time of reregistration is five seconds.
    This way, we really don't have to worry; even if the hub crashes or restarts,
    our node will try to reregister every five seconds.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to modify this time interval, the configuration parameter to deal
    with is `registerCycle`. The command to specify is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The output you will see on the node log console during startup is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The node will try to register to the hub every 1,000 milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Setting node health-check times
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Using this configuration parameter, we can specify how frequently the hub can
    poll a node for its availability. The parameter that is used to achieve this is
    `nodePolling`. By specifying this to the hub at the node level, each node can
    specify its own frequency at which it can be health-checked. The command to configure
    your node is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Now the hub will poll this node every 10 seconds, to check its availability.
  prefs: []
  type: TYPE_NORMAL
- en: Unregistering an unavailable node
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although the `nodePolling` configuration will make the hub poll the node often,
    the `unregisterIfStillDownAfter` configuration will let the hub unregister the
    node if the poll doesn't produce an expected result. Let's say a node is down,
    and the hub tries to poll the node and is unable to connect to it. At this point,
    how long the hub is going to poll for the availability of the node is determined
    by the `unregisterIfStillDownAfter` parameter. Beyond this time, the hub will
    unregister the node.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to do that is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, the hub will poll the node every five seconds; if the node is down, the
    polling will continue for 20 seconds, that is, the hub will poll four times and
    then unregister the node from the grid.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the browser timeout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This configuration is to let the node know how long it should wait before it
    ends a test script session when the browser seems to hang. After this time, the
    node will abort the browser session and start with the next waiting test script.
    The configuration parameter for this is `browserTimeout`. The command to specify
    that is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: So, these are the some of the configuration parameters that you can specify
    at the node's end to have better control over the Selenium Grid environment.
  prefs: []
  type: TYPE_NORMAL
- en: Hub-configuration parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section talks about some of the configuration parameters on the hub side.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for a match of the desired capability
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw earlier, when the test script asks for a test platform with a desired
    capability, the hub will reject the request if it doesn't find a suitable node
    with the desired capability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Altering the value for the `throwOnCapabilityNotPresent` parameter can alter
    this behavior. By default, it is set to `true`, which means the hub will reject
    the request if it doesn''t find a suitable node with that capability. But setting
    this parameter to `false` will queue the request, and the hub will wait until
    a node with that capability is added to the grid. The command that has to be invoked
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now the hub will not reject the request, but will place the request in a queue
    and wait until the requested platform is available.
  prefs: []
  type: TYPE_NORMAL
- en: Customized CapabilityMatcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, the hub will use the `org.openqa.grid.internal.utils. DefaultCapabilityMatcher`
    class to match the requested node. If you do not like the implementation logic
    of the `DefaultCapabilityMatcher` class, you can extend the class, implement your
    own `CapabilityMatcher` class, and provide your own logic in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once developed, you can ask the hub to use that class to match the capabilities
    with the nodes, using a configuration parameter named `capabilityMatcher`. The
    command to achieve this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The hub will use the logic defined in your `CustomCapabilityMatcher` class to
    identify the nodes to be assigned to the test-script requests.
  prefs: []
  type: TYPE_NORMAL
- en: WaitTimeout for a new session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When a capability-matched node is busy executing other test scripts, the latest
    test script will wait for the node to be available. By default, there is no wait
    timeout; that is, the test script will wait for the node to be available indefinitely.
    To alter that behavior and to let the test script throw an exception if it doesn''t
    get the node within a limited time, Selenium Grid opens a configuration that enables
    the test script to do so. The configuration parameter controlling that behavior
    is `newSessionWaitTimeout`. The command for that is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Here, the test script will wait for two minutes before it throws an exception
    saying it couldn't obtain a node to execute itself.
  prefs: []
  type: TYPE_NORMAL
- en: Different ways to specify the configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to specify the configuration parameter to the Selenium Grid's
    hub and node. The first one is what we have seen all this time; that is, specifying
    the configuration parameters over the command line. The second way of doing it
    is by providing a JSON file that contains all these configuration parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'A node configuration file (say, `nodeConfig.json`) — a typical JSON file having
    all the configuration parameters — looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once these files are configured, they can be provided to the node and the hub,
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This way, you can specify the configuration of your hub and node using JSON
    files.
  prefs: []
  type: TYPE_NORMAL
- en: Using cloud-based grids for cross-browser testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To set up a Selenium Grid for cross-browser testing, you need to set up physical
    or virtual machines with different browsers and operating systems. This requires
    an investment in the required hardware, software, and support to run the test
    lab. You also need to put in effort to keep this infrastructure updated with the
    latest versions and patches. Not everybody can afford these costs and the effort.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of investing and setting up a cross-browser test lab, you can easily
    outsource a virtual test lab to a third-party cloud provider for cross-browser
    testing. The Sauce Labs and BrowserStack are leading cloud-based cross-browser
    testing cloud providers. Both of these have support for over 400 different browser
    and operating system configurations, including mobile and tablet devices, and
    support running Selenium WebDriver tests in their cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will set up and run a test in the Sauce Labs cloud. The steps are similar
    if you want to run tests with BrowserStack.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s set up and run a test with Sauce Labs. You need a free Sauce Labs account,
    to begin with. Register for a free account on Sauce Labs at [https://saucelabs.com/,](https://saucelabs.com/)
    and get the username and access key. Sauce Labs provides all the needed hardware
    and software infrastructure to run your tests in the cloud. You can get the access
    key from the Sauce Labs dashboard after you log in from the My Account page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d93aacf3-b822-4864-80df-e010bfede7a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s create a new test to execute on the Sauce Labs cloud. We need to add
    the Sauce username and access key to the test, and change the Grid address to
    the Sauce Labs Grid address instead of the local Selenium Grid, as shown in the
    following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When you execute the test, it will connect to Sauce Lab''s hub and request
    the desired operating system and browser configuration. The sauce Labs cloud-management
    software automatically assigns a virtual machine for our test to run on a given
    configuration. We can monitor this run on a dashboard, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dc6ef1a3-3007-4769-8682-456574cbfa93.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can further drill down into the session and see exactly what happened during
    the run. It provides details of the Selenium commands, screenshots, logs, and
    a video of the execution on multiple tabs, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fae2e51c-21b7-4d7b-9b47-2f29c7a10bd8.png)'
  prefs: []
  type: TYPE_IMG
- en: Selenium details window
  prefs: []
  type: TYPE_NORMAL
- en: You can also test applications that are securely hosted on internal servers,
    by using the Sauce Connect utility. sauce connect creates a secure tunnel between
    your machine and the Sauce cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Selenium Grid, how a hub and node will work,
    and, more importantly, how to configure your Selenium Grid to have better control
    over the environment and infrastructure. The Selenium Grid will enable cross-browser
    testing for the application by covering combinations of operating systems and
    browsers. We also saw how to use cloud services, such as Sauce Labs, to execute
    tests in a remote cloud environment.
  prefs: []
  type: TYPE_NORMAL
- en: In the next [chapter](608e2a19-b767-45e2-97e9-446eb16b35b6.xhtml), we will learn
    how to create reusable and modular tests using the Page Object pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which argument can be used to specify how many browser instances can be supported
    by the node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain how Selenium Grid can be used to support Cross Browser Testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the URL you need to specify with RemoteWebDriver to run tests on Selenium
    Grid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium Grid Hub acts as a load balancer— true or false?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Selenium Grid at [https://www.seleniumhq.org/docs/07_selenium_grid.jsp](https://www.seleniumhq.org/docs/07_selenium_grid.jsp)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
