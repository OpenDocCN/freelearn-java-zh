- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing Tests in Angular
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to secure an Angular application by
    adding user authentication, retrieving user information, and protecting routes.
  prefs: []
  type: TYPE_NORMAL
- en: What if I told you that writing tests in the frontend could be fun and exciting?
    This chapter will show you how good the developer experience of Cypress E2E, short
    for end-to-end testing, is. Why do frontend developers love the Cypress framework?
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you how to write basic Cypress tests and mock HTTP requests
    for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Cypress
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a simple Cypress test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mocking HTTP responses and intercepting HTTP requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Cypress
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn what Cypress is and how to get started with
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Cypress is an end-to-end agnostic framework for testing web applications. You
    can write test IDs in HTML tags and assert whether the HTML tags are rendered
    in the way you would expect them to be.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s define what **end-to-end** means. End-to-end means how a user will use
    your application after they land on your web application and finish tasks such
    as logging in, signing up, checking out, viewing a profile, logging out, filling
    out a form, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, you can test or check the UI of your web application in different
    example cases or scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: The sentence of the landing page’s value proposition contains the word *sale*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The widget count of a section of your website is what you expected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The items in the basket on the checkout page are cleared out after hitting the
    **Clear** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A login form is present when the web application’s URL is `domain.com/login`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These scenarios are examples of what to test for in a web application. Cypress
    is a test framework where you can write and run tests that don’t take much time
    to set up and configure.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see how Cypress can be installed.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start using Cypress, we must install it from the npm repository by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `npm` command will install Cypress and the `cypress` testing library
    in the `dev` dependency packages. `@testing-library` is a group of common testing
    utilities in web development that makes the life of a developer easier
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn what we must add to the `npm` script of our
    `package.json` file so that we can run the test later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: npm script
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make it easier for us to run the Cypress test later, it’s a good idea to
    add a new npm script to our `package.json` file to help us easily run a command.
    Insert the following key/value pair inside the `scripts` block of the `package.json`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The preceding key/value pair helps you run the test by running the `npm run
    test` command in your Terminal. Run the full stack application as well as the
    `npm run test` command in your Terminal to start Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: 'An interactive browser app will open where you can run your test. *Figure 15**.1*
    shows the Cypress dashboard with a welcome message after running the `npm run
    test` command. Here, we are going to use **E2E Testing**, so click that box to
    continue:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1 – The Cypress dashboard](img/B18159_15_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – The Cypress dashboard
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.2* shows the folders and files that will be automatically added
    to your Angular application directory. These are required for any web application
    that uses Cypress. We will add more to this because we are using TypeScript, but
    we will do that later. For now, just hit the **Continue** button; you will be
    taken to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Configuration Files](img/B18159_15_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Configuration Files
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.3* shows that you can choose different browsers to run your E2E
    tests. You can choose from Chrome, Microsoft Edge, and Firefox. We will stop here
    because we haven’t written any tests yet, and we still need to help Cypress learn
    TypeScript. Stop Cypress from running by pressing *Ctrl* + *C* in your Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.3 – Choose a Browser](img/B18159_15_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Choose a Browser
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.4* shows the generated `cypress` folders, which contain additional
    folders inside them, and the `cypress.config.ts` file for editing some of Cypress’s
    default behaviors. We will discuss the `cypress.config.ts` file later:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.4 – Cypress folders and files](img/B18159_15_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Cypress folders and files
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript for Cypress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To help Cypress understand TypeScript, we must add the `tsconfig.json` file
    to the root directory of the `cypress` folder. Create a new file and name it `tsconfig.json`;
    then, write the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code inherits the `tsconfig.json` file at the root of our Angular
    application. Then, we added `cypress` and `@testing-library/cypress` to the `tsconfig.json`
    file, which will help Cypress understand any TypeScript files in the Cypress directory.
    The array shows that we are including these TypeScript files in any level of the
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set up Cypress for TypeScript, let’s update the `cypress.config.ts`
    file in our Angular application.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the Cypress config file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is a Cypress config file? The `cypress.config.ts` file is used to store
    any configurations for things such as environments, timeouts, folders/files, screenshots,
    videos, downloads, browsers, viewports, and more that are specific to Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are modifying the default behavior of Cypress by supplying any optional
    configurations you want to add. So, update the `cypress.config.ts` file with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code configures the base URL for Cypress where Angular runs. There
    is also a configuration for the video that disables the end-to-end testing recording.
    We are only using `baseUrl` and the video properties of the Cypress configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will start writing some simple Cypress tests to help
    you gain confidence in writing tests and see how easy it is to write tests in
    Cypress.
  prefs: []
  type: TYPE_NORMAL
- en: Writing Cypress tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will start writing simple Cypress tests to see how fun
    and easy it is to write tests using Cypress. We will start the tests by adding
    a test attribute in an HTML tag in the authentication form. We are going to edit
    the `auth-form.component.html` file to write the `test-id` attribute. Here is
    what was changed in the `auth-form.component.html` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can see the attribute we added in the preceding code. `data-cy` is an attribute
    for the test ID that Cypress will use to target the HTML element we want to test.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we’ve added our first test ID, let’s go to the `e2e` folder inside
    the `cypress` directory and create a new file. The filename needs to contain *.cy*.
    Name the new file `anti-heroes.cy.ts` and then add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code provides the first description of our test. First, we are
    adding a reference to the Cypress types to get extra tooling using TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we have the `describe` function, which is used for group tests. The `describe`
    function has two arguments. The first argument is a string, and it passes the
    name that the `describe` function will use. The second argument is a callback
    function that will contain all tests under the `describe` function.
  prefs: []
  type: TYPE_NORMAL
- en: The `it` function also accepts a string for the name of the test and a callback
    function for the details of the tests. The first `it` function tests whether an
    authenticated user can see the login page if the user visits the root domain of
    the Angular app’s URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`cy` is an object where you can chain different types of commands. We are using
    the `visit` command, which allows us to write the URL we will use to navigate
    to `localhost:4200` once we run the test. `cy.url` asserts that the URL can be
    found on the login subpage. We are also testing `mat-card-title` through the `data-cy=
    "auth-title"` attribute, which has the word *Login* in this test.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the first test is easy to write. The setup for writing the
    test is also easy. But before we run our first test, let’s create a user for our
    test:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.5 – A user for E2E testing (Angular app login page)](img/B18159_15_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – A user for E2E testing (Angular app login page)
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 15**.5*, we are creating a user for our E2E testing. The `user@cypress.com`
    username is just a made-up email address you are not required to use. You can
    use whatever email address you want. We will use the `user@cypress.com` user to
    log into our app and use the web app like a real user would use our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to your Terminal and run the `npm run test` command to run Angular’s
    E2E tests. Go to the **Specs** section of the Cypress dashboard to find the list
    of **E2E specs**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – E2E specs](img/B18159_15_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – E2E specs
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.6* shows the list of **E2E specs** files for testing. Here, there
    is a single spec file; this is the one we created earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **anti-heroes** spec to run the test we created and see whether
    it is passing or failing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7 – Passing test](img/B18159_15_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Passing test
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.7* shows that the two asserts we wrote in our test are passing.
    This means that the login subpage is where the unauthenticated user was directed
    after landing on the root domain page. The passing test also tells us that the
    title of the form the user saw was *Login* and not *Register*.'
  prefs: []
  type: TYPE_NORMAL
- en: If you change `should("contain", "Login");` to `should("contain", "Register");`,
    the test will fail, which is an indicator that the test is accurate and that it
    is not just passing anything we write in the test.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have finished writing a simple E2E test using Cypress and saw
    that our tests are passing. In the next section, we will mock HTTP responses and
    intercept HTTP requests that our Angular application sends so that we no longer
    need the backend application to run these tests.
  prefs: []
  type: TYPE_NORMAL
- en: Mocking HTTP responses and intercepting HTTP requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Mocking tests** can help us isolate and focus on tests and not on the state
    of external dependencies or behavior. In this section, we will mock the HTTP responses
    of our server and intercept the HTTP requests of our Angular application for testing.
    We are going to intercept the HTTP requests so that we can send fake responses
    to Angular and not pollute our dev database.'
  prefs: []
  type: TYPE_NORMAL
- en: We will start by adding a new file to the root of the `cypress` directory. Name
    the file `global.d.ts`. The `global.d.ts` file, also known as **global libraries**,
    provides a way to make interfaces and types globally available in our TypeScript
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the `global.d.ts` file, write the following code inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code allows us to use custom chainable commands, which will give
    us IntelliSense whenever we hit the dot after writing *cy*.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve added `global.d.ts`, let’s install a library that can generate
    a unique universal ID, also known as a **UUID**, and use it as a temporary ID
    for a fake object we will create to respond to Angular’s HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `npm` command will install an `npm` library called `uuid` to
    help us generate the UUID we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need the types for the `uuid` library we installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `npm` command will install the `uuid` TypeScript types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need a file for the fixtures in our Cypress test. A **fixture** is
    the fixed state of an object or array that’s used as a baseline for running tests:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `fixtures` folder inside the `cypress` directory in your application.
    Create two JSON files and name them `anti-heroes.json` and `user.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the content of the file from [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json)
    and paste it into the `anti-heroes.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, copy the content of the file from [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json)
    and paste it into the `user.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding JSON objects are objects that we are going to use in our fixtures.
    We will use these as response bodies to send mock responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s update the `commands.ts` file in the `support` folder inside the
    `cypress` directory. Use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code implements the custom chainable commands we wrote inside
    the `global.d.ts` file. `getCommand`, `deleteCommand`, and `postCommand` require
    URLs as strings to intercept any HTTP requests. The custom chainable commands
    require a state, which will be a fixture.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s write more tests in `anti-heroes.cy.ts`. But first, we must add more
    test IDs for the tests we write.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to `auth-form.component.html` and update the code with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code contains four `data-cy` attributes that will be used as targeted
    selectors. You can find the `data-cy` selectors in the `mat-card-title`, inputs,
    and `button` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next file to update will be `navbar.component.html`. Use the following
    code to update the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code contains one `data-cy` attribute, which you can find in the
    `span` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update the `anti-hero-list-component.html` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code contains three `data-cy` attributes, which you can find in
    the `td` element, and two `button` elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we must edit the `anti-hero-command-bar.component.html` file using the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code contains three selectors, which you can find in the `button`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last file to update is `anti-hero-form.component.html`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code contains five inputs, which you can find in the `input` elements
    and the `button` element.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have added the necessary test ID attributes to the HTML elements
    we are going to test later. We will need the mentioned `data-cy` test IDs when
    we start writing tests in the `anti-heroes.cy.ts` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s start writing tests in `anti-heroes.cy.ts`. Here is the new code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code shows a `describe` function that has two other functions
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: The first function inside the `describe` function is called `beforeEach`, which
    runs each time a test starts running. The `beforeEach` function keeps its state
    and uses it in the test. This function fits scenarios where the test has to do
    precisely the same thing that other tests will also have to do – for instance,
    going to a particular URL, logging in, and intercepting HTTP calls using custom
    chainable commands such as `getCommand` and `deleteCommand`.
  prefs: []
  type: TYPE_NORMAL
- en: The second function inside the `describe` function is called `afterEach`. The
    `afterEach` function runs every time a test ends. This function is suitable for
    cleaning up or logging out the user in the test. The `beforeEach` and `afterEach`
    functions save us a lot of repeatable code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add some tests to the `anti-heroes.cy.ts` file. Copy the following
    code and put it under the first test we wrote:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code shows the tests we are going to use for Cypress. You can
    see that `fixture` needs a string, which is the name of the JSON file. The data
    from `fixture` is the parameter of the anonymous function.
  prefs: []
  type: TYPE_NORMAL
- en: We are asserting `24` because there are four elements for every object we use
    in `data-cy=" row"`, which is how we built the HTML elements on the user interface.
    There are also six objects inside the array of the `anti-heroes.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: The newly added tests show how we can pick a particular object from a list or
    array of rendered UIs using the `eq` keyword and an `index` number.
  prefs: []
  type: TYPE_NORMAL
- en: The newly added tests also show how to write text into an input field by calling
    the `click` and `type` functions. Then, you can use the `postCommand` custom chainable
    command to intercept HTTP POST requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, before running the test, make Cypress skip the simple test we wrote
    earlier by calling `skip`, like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code changed the simple test from *run* to *don’t run*.
  prefs: []
  type: TYPE_NORMAL
- en: The entire code for the `anti-heroes.cy.ts` spec file can be found at [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can run the `anti-heroes.cs.ts` spec file to see whether everything
    will pass, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – Passing tests](img/B18159_15_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – Passing tests
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.8* shows that the **should display login page** test was skipped,
    while the rest of the tests passed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see what is happening inside the `beforeEach` function, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.9 – BEFORE EACH DOM snapshot](img/B18159_15_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – BEFORE EACH DOM snapshot
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.9* shows the steps that were taken by the `beforeEach` function.
    The steps are DOM snapshots of the web application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also check the test body of the `anti-heroes.cy.ts` spec file. You should
    see the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.10 – TEST BODY DOM snapshot\uFEFF](img/B18159_15_10.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – TEST BODY DOM snapshot
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.10* shows the steps that were taken in the test body. These are
    the actions that you wrote in the `anti-heroes.cy.ts` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also see what happened inside the `afterEach` function. You should be
    able to see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – AFTER EACH DOM snapshot](img/B18159_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – AFTER EACH DOM snapshot
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15**.11* shows the steps inside the `afterEach` function. Here, you
    can see that the `afterEach` function logged out and redirected the user to the
    application’s login page.'
  prefs: []
  type: TYPE_NORMAL
- en: And that’s how you write Cypress tests. Now, let’s summarize what was covered
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With this, you have arrived at the end of this chapter. First, you learned what
    Cypress is and how easy it is to set up and write an end-to-end test. You also
    learned how to intercept HTTP requests and mock HTTP responses.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to package both frontend and backend
    applications into a single executable JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This part demonstrates the modern way of shipping backend and frontend applications.
    The following chapters are covered in this part:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B18159_16.xhtml#_idTextAnchor303), *Packaging Backend and Frontend
    with Maven*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B18159_17.xhtml#_idTextAnchor315), *Deploying Spring Boot and
    the Angular App*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
