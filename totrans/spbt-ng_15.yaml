- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Writing Tests in Angular
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Angular 中编写测试
- en: In the previous chapter, we learned how to secure an Angular application by
    adding user authentication, retrieving user information, and protecting routes.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何通过添加用户身份验证、检索用户信息和保护路由来保护 Angular 应用程序。
- en: What if I told you that writing tests in the frontend could be fun and exciting?
    This chapter will show you how good the developer experience of Cypress E2E, short
    for end-to-end testing, is. Why do frontend developers love the Cypress framework?
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我告诉你，在前端编写测试可以很有趣和令人兴奋，你会怎么想？本章将向你展示 Cypress E2E（端到端测试）的开发者体验有多好。为什么前端开发者喜欢
    Cypress 框架？
- en: This chapter will teach you how to write basic Cypress tests and mock HTTP requests
    for testing.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何编写基本的 Cypress 测试和模拟 HTTP 请求进行测试。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started with Cypress
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Cypress
- en: Writing a simple Cypress test
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写简单的 Cypress 测试
- en: Mocking HTTP responses and intercepting HTTP requests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟 HTTP 响应和拦截 HTTP 请求
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接将带你去本章的完成版本：[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-15/superheroes)。
- en: Getting started with Cypress
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Cypress
- en: In this section, you will learn what Cypress is and how to get started with
    it.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将了解 Cypress 是什么以及如何开始使用它。
- en: Cypress is an end-to-end agnostic framework for testing web applications. You
    can write test IDs in HTML tags and assert whether the HTML tags are rendered
    in the way you would expect them to be.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Cypress 是一个用于测试 Web 应用的端到端无框架。你可以在 HTML 标签中编写测试 ID，并断言这些 HTML 标签是否以你预期的方式渲染。
- en: Let’s define what **end-to-end** means. End-to-end means how a user will use
    your application after they land on your web application and finish tasks such
    as logging in, signing up, checking out, viewing a profile, logging out, filling
    out a form, and so on.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一下 **端到端** 的含义。端到端意味着用户在登录你的 Web 应用程序并完成登录、注册、结账、查看个人资料、登出、填写表格等任务后如何使用你的应用程序。
- en: 'For instance, you can test or check the UI of your web application in different
    example cases or scenarios:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以在不同的示例案例或场景中测试或检查你的 Web 应用程序的 UI：
- en: The sentence of the landing page’s value proposition contains the word *sale*
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登陆页面的价值主张句子中包含单词 *sale*
- en: The widget count of a section of your website is what you expected
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你网站某个部分的部件计数是你预期的
- en: The items in the basket on the checkout page are cleared out after hitting the
    **Clear** button
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在点击 **清除** 按钮后，结账页面上的购物车中的项目将被清除
- en: A login form is present when the web application’s URL is `domain.com/login`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当 Web 应用程序的 URL 是 `domain.com/login` 时，会出现登录表单
- en: These scenarios are examples of what to test for in a web application. Cypress
    is a test framework where you can write and run tests that don’t take much time
    to set up and configure.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些场景是关于在 Web 应用程序中要测试的内容的示例。Cypress 是一个测试框架，你可以编写和运行测试，这些测试的设置和配置不需要花费太多时间。
- en: Now, let’s see how Cypress can be installed.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何安装 Cypress。
- en: Installation
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: 'To start using Cypress, we must install it from the npm repository by running
    the following command:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用 Cypress，我们必须通过运行以下命令从 npm 仓库安装它：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding `npm` command will install Cypress and the `cypress` testing library
    in the `dev` dependency packages. `@testing-library` is a group of common testing
    utilities in web development that makes the life of a developer easier
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `npm` 命令将在 `dev` 依赖包中安装 Cypress 和 `cypress` 测试库。`@testing-library` 是一组在
    Web 开发中常用的测试工具，它使得开发者的生活更加轻松。
- en: In the next section, we will learn what we must add to the `npm` script of our
    `package.json` file so that we can run the test later in this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习我们必须添加到 `package.json` 文件的 `npm` 脚本中，以便我们可以在本章后面运行测试。
- en: npm script
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: npm 脚本
- en: 'To make it easier for us to run the Cypress test later, it’s a good idea to
    add a new npm script to our `package.json` file to help us easily run a command.
    Insert the following key/value pair inside the `scripts` block of the `package.json`
    file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们以后更容易运行 Cypress 测试，给我们的 `package.json` 文件添加一个新的 npm 脚本是一个好主意，以帮助我们轻松运行命令。在
    `package.json` 文件的 `scripts` 块中插入以下键值对：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding key/value pair helps you run the test by running the `npm run
    test` command in your Terminal. Run the full stack application as well as the
    `npm run test` command in your Terminal to start Cypress.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 上述键值对帮助你通过在终端中运行`npm run test`命令来运行测试。在终端中运行完整的堆栈应用程序以及`npm run test`命令以启动Cypress。
- en: 'An interactive browser app will open where you can run your test. *Figure 15**.1*
    shows the Cypress dashboard with a welcome message after running the `npm run
    test` command. Here, we are going to use **E2E Testing**, so click that box to
    continue:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 将会打开一个交互式浏览器应用程序，你可以在其中运行你的测试。*图15.1* 展示了在运行`npm run test`命令后，Cypress仪表板上的欢迎信息。在这里，我们将使用**端到端测试**，所以点击该框继续：
- en: '![Figure 15.1 – The Cypress dashboard](img/B18159_15_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1 – Cypress仪表板](img/B18159_15_01.jpg)'
- en: Figure 15.1 – The Cypress dashboard
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1 – Cypress仪表板
- en: '*Figure 15**.2* shows the folders and files that will be automatically added
    to your Angular application directory. These are required for any web application
    that uses Cypress. We will add more to this because we are using TypeScript, but
    we will do that later. For now, just hit the **Continue** button; you will be
    taken to the following screen:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.2* 展示了将自动添加到你的Angular应用程序目录中的文件夹和文件。这些对于任何使用Cypress的Web应用程序都是必需的。由于我们正在使用TypeScript，我们将添加更多内容，但我们将在稍后进行。现在，只需点击**继续**按钮；你将被带到以下屏幕：'
- en: '![Figure 15.2 – Configuration Files](img/B18159_15_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – 配置文件](img/B18159_15_02.jpg)'
- en: Figure 15.2 – Configuration Files
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – 配置文件
- en: '*Figure 15**.3* shows that you can choose different browsers to run your E2E
    tests. You can choose from Chrome, Microsoft Edge, and Firefox. We will stop here
    because we haven’t written any tests yet, and we still need to help Cypress learn
    TypeScript. Stop Cypress from running by pressing *Ctrl* + *C* in your Terminal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.3* 展示了你可以选择不同的浏览器来运行你的端到端测试。你可以选择Chrome、Microsoft Edge和Firefox。我们在这里停止，因为我们还没有编写任何测试，我们还需要帮助Cypress学习TypeScript。在终端中按*Ctrl*
    + *C*停止Cypress运行：'
- en: '![Figure 15.3 – Choose a Browser](img/B18159_15_03.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 选择浏览器](img/B18159_15_03.jpg)'
- en: Figure 15.3 – Choose a Browser
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 选择浏览器
- en: '*Figure 15**.4* shows the generated `cypress` folders, which contain additional
    folders inside them, and the `cypress.config.ts` file for editing some of Cypress’s
    default behaviors. We will discuss the `cypress.config.ts` file later:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.4* 展示了生成的`cypress`文件夹，其中包含它们内部的额外文件夹，以及用于编辑Cypress一些默认行为的`cypress.config.ts`文件。我们稍后会讨论`cypress.config.ts`文件：'
- en: '![Figure 15.4 – Cypress folders and files](img/B18159_15_04.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – Cypress文件夹和文件](img/B18159_15_04.jpg)'
- en: Figure 15.4 – Cypress folders and files
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – Cypress文件夹和文件
- en: TypeScript for Cypress
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Cypress的TypeScript
- en: 'To help Cypress understand TypeScript, we must add the `tsconfig.json` file
    to the root directory of the `cypress` folder. Create a new file and name it `tsconfig.json`;
    then, write the following configuration:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助Cypress理解TypeScript，我们必须将`tsconfig.json`文件添加到`cypress`文件夹的根目录。创建一个新文件并命名为`tsconfig.json`；然后，写入以下配置：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code inherits the `tsconfig.json` file at the root of our Angular
    application. Then, we added `cypress` and `@testing-library/cypress` to the `tsconfig.json`
    file, which will help Cypress understand any TypeScript files in the Cypress directory.
    The array shows that we are including these TypeScript files in any level of the
    directory.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码继承了我们Angular应用程序根目录下的`tsconfig.json`文件。然后，我们将`cypress`和`@testing-library/cypress`添加到`tsconfig.json`文件中，这将帮助Cypress理解Cypress目录中的任何TypeScript文件。数组显示我们正在将这些TypeScript文件包含在目录的任何级别。
- en: Now that we have set up Cypress for TypeScript, let’s update the `cypress.config.ts`
    file in our Angular application.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为TypeScript设置了Cypress，让我们更新Angular应用程序中的`cypress.config.ts`文件。
- en: Updating the Cypress config file
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Cypress配置文件
- en: What is a Cypress config file? The `cypress.config.ts` file is used to store
    any configurations for things such as environments, timeouts, folders/files, screenshots,
    videos, downloads, browsers, viewports, and more that are specific to Cypress.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是Cypress配置文件？`cypress.config.ts`文件用于存储任何特定于Cypress的配置，例如环境、超时、文件夹/文件、屏幕截图、视频、下载、浏览器、视口等。
- en: 'You are modifying the default behavior of Cypress by supplying any optional
    configurations you want to add. So, update the `cypress.config.ts` file with the
    following code:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过提供任何你想要添加的可选配置来修改Cypress的默认行为。因此，使用以下代码更新`cypress.config.ts`文件：
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code configures the base URL for Cypress where Angular runs. There
    is also a configuration for the video that disables the end-to-end testing recording.
    We are only using `baseUrl` and the video properties of the Cypress configuration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码配置了 Cypress 的基本 URL，其中 Angular 运行。还有一个配置用于禁用端到端测试录制视频。我们只使用 `baseUrl` 和
    Cypress 配置的视频属性。
- en: In the next section, we will start writing some simple Cypress tests to help
    you gain confidence in writing tests and see how easy it is to write tests in
    Cypress.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将开始编写一些简单的 Cypress 测试，以帮助您在编写测试时建立信心，并了解在 Cypress 中编写测试有多容易。
- en: Writing Cypress tests
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Cypress 测试
- en: 'In this section, we will start writing simple Cypress tests to see how fun
    and easy it is to write tests using Cypress. We will start the tests by adding
    a test attribute in an HTML tag in the authentication form. We are going to edit
    the `auth-form.component.html` file to write the `test-id` attribute. Here is
    what was changed in the `auth-form.component.html` line:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始编写简单的 Cypress 测试，以了解使用 Cypress 编写测试有多有趣且容易。我们将通过在身份验证表单中的 HTML 标签中添加一个测试属性来开始测试。我们将编辑
    `auth-form.component.html` 文件来编写 `test-id` 属性。以下是 `auth-form.component.html` 行中发生的变化：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see the attribute we added in the preceding code. `data-cy` is an attribute
    for the test ID that Cypress will use to target the HTML element we want to test.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到我们在前面的代码中添加的属性。`data-cy` 是一个测试 ID 属性，Cypress 将使用它来定位我们想要测试的 HTML 元素。
- en: 'Now that we’ve added our first test ID, let’s go to the `e2e` folder inside
    the `cypress` directory and create a new file. The filename needs to contain *.cy*.
    Name the new file `anti-heroes.cy.ts` and then add the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了第一个测试 ID，让我们转到 `cypress` 目录内的 `e2e` 文件夹并创建一个新文件。文件名需要包含 *.cy*。将新文件命名为
    `anti-heroes.cy.ts`，然后添加以下代码：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding code provides the first description of our test. First, we are
    adding a reference to the Cypress types to get extra tooling using TypeScript.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码提供了我们测试的第一份描述。首先，我们添加了对 Cypress 类型的引用，以便使用 TypeScript 获取额外的工具。
- en: Then, we have the `describe` function, which is used for group tests. The `describe`
    function has two arguments. The first argument is a string, and it passes the
    name that the `describe` function will use. The second argument is a callback
    function that will contain all tests under the `describe` function.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有 `describe` 函数，它用于分组测试。`describe` 函数有两个参数。第一个参数是一个字符串，它传递给 `describe`
    函数将使用的名称。第二个参数是一个回调函数，它将包含 `describe` 函数下的所有测试。
- en: The `it` function also accepts a string for the name of the test and a callback
    function for the details of the tests. The first `it` function tests whether an
    authenticated user can see the login page if the user visits the root domain of
    the Angular app’s URL.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`it` 函数也接受一个字符串作为测试的名称和一个回调函数，用于测试的详细信息。第一个 `it` 函数测试如果用户访问 Angular 应用 URL
    的根域名，认证用户是否可以看到登录页面。'
- en: '`cy` is an object where you can chain different types of commands. We are using
    the `visit` command, which allows us to write the URL we will use to navigate
    to `localhost:4200` once we run the test. `cy.url` asserts that the URL can be
    found on the login subpage. We are also testing `mat-card-title` through the `data-cy=
    "auth-title"` attribute, which has the word *Login* in this test.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`cy` 是一个对象，您可以在其中链接不同类型的命令。我们使用 `visit` 命令，它允许我们编写在运行测试时将用于导航到 `localhost:4200`
    的 URL。`cy.url` 断言可以在登录子页面上找到 URL。我们还通过 `data-cy= "auth-title"` 属性测试 `mat-card-title`，在这个测试中包含单词
    *登录*。'
- en: 'As you can see, the first test is easy to write. The setup for writing the
    test is also easy. But before we run our first test, let’s create a user for our
    test:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，第一个测试很容易编写。编写测试的设置也很简单。但在我们运行第一个测试之前，让我们为我们的测试创建一个用户：
- en: '![Figure 15.5 – A user for E2E testing (Angular app login page)](img/B18159_15_05.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 用于端到端测试的用户（Angular 应用登录页面）](img/B18159_15_05.jpg)'
- en: Figure 15.5 – A user for E2E testing (Angular app login page)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 用于端到端测试的用户（Angular 应用登录页面）
- en: In *Figure 15**.5*, we are creating a user for our E2E testing. The `user@cypress.com`
    username is just a made-up email address you are not required to use. You can
    use whatever email address you want. We will use the `user@cypress.com` user to
    log into our app and use the web app like a real user would use our application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **图 15.5** 中，我们正在为我们的端到端测试创建一个用户。`user@cypress.com` 用户名只是一个虚构的电子邮件地址，您不需要使用它。您可以使用任何您想要的电子邮件地址。我们将使用
    `user@cypress.com` 用户登录我们的应用，并像真实用户一样使用我们的应用程序。
- en: 'Now, go to your Terminal and run the `npm run test` command to run Angular’s
    E2E tests. Go to the **Specs** section of the Cypress dashboard to find the list
    of **E2E specs**:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到你的终端并运行 `npm run test` 命令来运行 Angular 的 E2E 测试。转到 Cypress 控板中的 **Specs**
    部分，以找到 **E2E specs** 列表：
- en: '![Figure 15.6 – E2E specs](img/B18159_15_06.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – E2E specs](img/B18159_15_06.jpg)'
- en: Figure 15.6 – E2E specs
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – E2E specs
- en: '*Figure 15**.6* shows the list of **E2E specs** files for testing. Here, there
    is a single spec file; this is the one we created earlier.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15**.6* 展示了用于测试的 **E2E specs** 文件列表。这里只有一个spec文件；这是我们之前创建的那个。'
- en: 'Click on the **anti-heroes** spec to run the test we created and see whether
    it is passing or failing:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **anti-heroes** spec 运行我们创建的测试，查看它是否通过或失败：
- en: '![Figure 15.7 – Passing test](img/B18159_15_07.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7 – 通过的测试](img/B18159_15_07.jpg)'
- en: Figure 15.7 – Passing test
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7 – 通过的测试
- en: '*Figure 15**.7* shows that the two asserts we wrote in our test are passing.
    This means that the login subpage is where the unauthenticated user was directed
    after landing on the root domain page. The passing test also tells us that the
    title of the form the user saw was *Login* and not *Register*.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15**.7* 显示了我们测试中编写的两个断言都通过了。这意味着登录子页面是在用户在根域名页面上着陆后未认证用户被重定向到的位置。通过的测试还告诉我们，用户看到的表单标题是
    *登录* 而不是 *注册*。'
- en: If you change `should("contain", "Login");` to `should("contain", "Register");`,
    the test will fail, which is an indicator that the test is accurate and that it
    is not just passing anything we write in the test.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 `should("contain", "Login");` 改为 `should("contain", "Register");`，测试将失败，这表明测试是准确的，并且它不仅仅是通过我们写在测试中的任何内容。
- en: With that, we have finished writing a simple E2E test using Cypress and saw
    that our tests are passing. In the next section, we will mock HTTP responses and
    intercept HTTP requests that our Angular application sends so that we no longer
    need the backend application to run these tests.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们就完成了使用 Cypress 编写的简单 E2E 测试，并看到我们的测试通过了。在下一节中，我们将模拟 Angular 应用程序发送的 HTTP
    响应和拦截 HTTP 请求，这样我们就不需要后端应用程序来运行这些测试了。
- en: Mocking HTTP responses and intercepting HTTP requests
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟 HTTP 响应和拦截 HTTP 请求
- en: '**Mocking tests** can help us isolate and focus on tests and not on the state
    of external dependencies or behavior. In this section, we will mock the HTTP responses
    of our server and intercept the HTTP requests of our Angular application for testing.
    We are going to intercept the HTTP requests so that we can send fake responses
    to Angular and not pollute our dev database.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**模拟测试**可以帮助我们隔离并专注于测试，而不是外部依赖或行为的状态。在本节中，我们将模拟服务器的 HTTP 响应并拦截 Angular 应用程序的
    HTTP 请求进行测试。我们将拦截 HTTP 请求，以便向 Angular 发送模拟响应，而不污染我们的开发数据库。'
- en: We will start by adding a new file to the root of the `cypress` directory. Name
    the file `global.d.ts`. The `global.d.ts` file, also known as **global libraries**,
    provides a way to make interfaces and types globally available in our TypeScript
    code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先向 `cypress` 目录的根目录添加一个新文件。将文件命名为 `global.d.ts`。`global.d.ts` 文件，也称为 **全局库**，提供了一种方法，使接口和类型在我们的
    TypeScript 代码中全局可用。
- en: 'After creating the `global.d.ts` file, write the following code inside it:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 `global.d.ts` 文件后，在其内部写入以下代码：
- en: '[PRE6]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code allows us to use custom chainable commands, which will give
    us IntelliSense whenever we hit the dot after writing *cy*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码允许我们使用自定义链式命令，这样我们每次在写入 *cy* 后都会获得 IntelliSense。
- en: Now that we’ve added `global.d.ts`, let’s install a library that can generate
    a unique universal ID, also known as a **UUID**, and use it as a temporary ID
    for a fake object we will create to respond to Angular’s HTTP request.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了 `global.d.ts`，让我们安装一个可以生成唯一通用 ID（也称为 **UUID**）的库，并将其用作我们创建的模拟对象的临时
    ID，以响应 Angular 的 HTTP 请求。
- en: 'The following `npm` command will install an `npm` library called `uuid` to
    help us generate the UUID we need:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 `npm` 命令将安装一个名为 `uuid` 的 `npm` 库，帮助我们生成所需的 UUID：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We also need the types for the `uuid` library we installed:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装的 `uuid` 库的类型：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding `npm` command will install the `uuid` TypeScript types.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 `npm` 命令将安装 `uuid` TypeScript 类型。
- en: 'Now, we need a file for the fixtures in our Cypress test. A **fixture** is
    the fixed state of an object or array that’s used as a baseline for running tests:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要一个文件来存放我们的 Cypress 测试中的 fixtures。**fixture** 是一个对象或数组固定状态，用作运行测试的基线：
- en: Go to the `fixtures` folder inside the `cypress` directory in your application.
    Create two JSON files and name them `anti-heroes.json` and `user.json`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的应用程序中`cypress`目录下的`fixtures`文件夹。创建两个JSON文件，并将它们命名为`anti-heroes.json`和`user.json`。
- en: Copy the content of the file from [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json)
    and paste it into the `anti-heroes.json` file.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件内容从[https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/anti-heroes.json)复制并粘贴到`anti-heroes.json`文件中。
- en: Next, copy the content of the file from [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json)
    and paste it into the `user.json` file.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将文件内容从[https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/fixtures/user.json)复制并粘贴到`user.json`文件中。
- en: The preceding JSON objects are objects that we are going to use in our fixtures.
    We will use these as response bodies to send mock responses.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 上述JSON对象是我们将要使用的对象。我们将使用这些作为响应体发送模拟响应。
- en: 'Now, let’s update the `commands.ts` file in the `support` folder inside the
    `cypress` directory. Use the following code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们更新`cypress`目录下`support`文件夹中的`commands.ts`文件。使用以下代码：
- en: '[PRE9]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding code implements the custom chainable commands we wrote inside
    the `global.d.ts` file. `getCommand`, `deleteCommand`, and `postCommand` require
    URLs as strings to intercept any HTTP requests. The custom chainable commands
    require a state, which will be a fixture.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码实现了我们在`global.d.ts`文件中编写的自定义链式命令。`getCommand`、`deleteCommand`和`postCommand`需要作为字符串的URL来拦截任何HTTP请求。自定义链式命令需要一个状态，这将是一个固定值。
- en: Now, let’s write more tests in `anti-heroes.cy.ts`. But first, we must add more
    test IDs for the tests we write.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们在`anti-heroes.cy.ts`中编写更多的测试。但首先，我们必须为我们将要编写的测试添加更多的测试ID。
- en: 'Go to `auth-form.component.html` and update the code with the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 前往`auth-form.component.html`并使用以下代码更新代码：
- en: '[PRE31]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code contains four `data-cy` attributes that will be used as targeted
    selectors. You can find the `data-cy` selectors in the `mat-card-title`, inputs,
    and `button` elements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含四个`data-cy`属性，这些属性将用作目标选择器。您可以在`mat-card-title`、输入和`button`元素中找到`data-cy`选择器。
- en: 'The next file to update will be `navbar.component.html`. Use the following
    code to update the file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个要更新的文件将是`navbar.component.html`。使用以下代码更新文件：
- en: '[PRE32]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding code contains one `data-cy` attribute, which you can find in the
    `span` element.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含一个`data-cy`属性，您可以在`span`元素中找到它。
- en: 'Next, we need to update the `anti-hero-list-component.html` file:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新`anti-hero-list-component.html`文件：
- en: '[PRE37]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The preceding code contains three `data-cy` attributes, which you can find in
    the `td` element, and two `button` elements.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含三个`data-cy`属性，您可以在`td`元素和两个`button`元素中找到它们。
- en: 'Next, we must edit the `anti-hero-command-bar.component.html` file using the
    following code:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须使用以下代码编辑`anti-hero-command-bar.component.html`文件：
- en: '[PRE70]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The preceding code contains three selectors, which you can find in the `button`
    elements.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含三个选择器，您可以在`button`元素中找到它们。
- en: 'The last file to update is `anti-hero-form.component.html`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个要更新的文件是`anti-hero-form.component.html`：
- en: '[PRE87]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: The preceding code contains five inputs, which you can find in the `input` elements
    and the `button` element.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含五个输入，您可以在`input`元素和`button`元素中找到它们。
- en: With that, we have added the necessary test ID attributes to the HTML elements
    we are going to test later. We will need the mentioned `data-cy` test IDs when
    we start writing tests in the `anti-heroes.cy.ts` file.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经为稍后将要测试的HTML元素添加了必要的测试ID属性。当我们开始在`anti-heroes.cy.ts`文件中编写测试时，我们需要提到的`data-cy`测试ID。
- en: 'Now, let’s start writing tests in `anti-heroes.cy.ts`. Here is the new code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开始在`anti-heroes.cy.ts`中编写测试。以下是新代码：
- en: '[PRE121]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: The preceding code shows a `describe` function that has two other functions
    inside it.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了一个包含两个其他函数的`describe`函数。
- en: The first function inside the `describe` function is called `beforeEach`, which
    runs each time a test starts running. The `beforeEach` function keeps its state
    and uses it in the test. This function fits scenarios where the test has to do
    precisely the same thing that other tests will also have to do – for instance,
    going to a particular URL, logging in, and intercepting HTTP calls using custom
    chainable commands such as `getCommand` and `deleteCommand`.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`函数内部的第一个函数被称为`beforeEach`，它在每次测试开始运行时都会运行。`beforeEach`函数保持其状态并在测试中使用它。这个函数适用于测试必须执行与其他测试相同精确操作的场景——例如，访问特定的URL、登录以及使用自定义链式命令（如`getCommand`和`deleteCommand`）拦截HTTP调用。'
- en: The second function inside the `describe` function is called `afterEach`. The
    `afterEach` function runs every time a test ends. This function is suitable for
    cleaning up or logging out the user in the test. The `beforeEach` and `afterEach`
    functions save us a lot of repeatable code.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`describe`函数内部的第二个函数被称为`afterEach`。每次测试结束时都会运行`afterEach`函数。这个函数适合在测试中进行清理或注销用户。`beforeEach`和`afterEach`函数节省了我们大量的重复代码。'
- en: 'Now, let’s add some tests to the `anti-heroes.cy.ts` file. Copy the following
    code and put it under the first test we wrote:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们向`anti-heroes.cy.ts`文件添加一些测试。复制以下代码并将其放在我们编写的第一个测试下面：
- en: '[PRE148]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: The preceding code shows the tests we are going to use for Cypress. You can
    see that `fixture` needs a string, which is the name of the JSON file. The data
    from `fixture` is the parameter of the anonymous function.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码显示了我们将要用于Cypress的测试。你可以看到`fixture`需要一个字符串，即JSON文件的名称。`fixture`中的数据是匿名函数的参数。
- en: We are asserting `24` because there are four elements for every object we use
    in `data-cy=" row"`, which is how we built the HTML elements on the user interface.
    There are also six objects inside the array of the `anti-heroes.json` file.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们断言`24`是因为我们为每个使用`data-cy="row"`的对象有四个元素，这是我们构建用户界面上的HTML元素的方式。`anti-heroes.json`文件中也有六个对象。
- en: The newly added tests show how we can pick a particular object from a list or
    array of rendered UIs using the `eq` keyword and an `index` number.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的测试展示了我们如何使用`eq`关键字和索引号从渲染的UI列表或数组中选择特定的对象。
- en: The newly added tests also show how to write text into an input field by calling
    the `click` and `type` functions. Then, you can use the `postCommand` custom chainable
    command to intercept HTTP POST requests.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 新增的测试还展示了如何通过调用`click`和`type`函数将文本写入输入字段。然后，你可以使用`postCommand`自定义链式命令来拦截HTTP
    POST请求。
- en: 'Lastly, before running the test, make Cypress skip the simple test we wrote
    earlier by calling `skip`, like so:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在运行测试之前，通过调用`skip`来让Cypress跳过我们之前编写的简单测试，如下所示：
- en: '[PRE175]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: The preceding code changed the simple test from *run* to *don’t run*.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将简单的测试从**运行**改为**不运行**。
- en: The entire code for the `anti-heroes.cy.ts` spec file can be found at [https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`anti-heroes.cy.ts`规范文件的完整代码可以在[https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts](https://github.com/PacktPublishing/Spring-Boot-and-Angular/blob/main/Chapter-15/superheroes/cypress/e2e/anti-heroes.cy.ts)找到。'
- en: 'Now, we can run the `anti-heroes.cs.ts` spec file to see whether everything
    will pass, as shown in the following figure:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以运行`anti-heroes.cs.ts`规范文件，看看是否一切都会通过，如下面的图所示：
- en: '![Figure 15.8 – Passing tests](img/B18159_15_08.jpg)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8 – 通过的测试](img/B18159_15_08.jpg)'
- en: Figure 15.8 – Passing tests
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8 – 通过的测试
- en: '*Figure 15**.8* shows that the **should display login page** test was skipped,
    while the rest of the tests passed.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15**.8* 显示了跳过了**显示登录页面**的测试，而其他测试都通过了。'
- en: 'You can see what is happening inside the `beforeEach` function, like so:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像这样看到`beforeEach`函数内部的操作：
- en: '![Figure 15.9 – BEFORE EACH DOM snapshot](img/B18159_15_09.jpg)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9 – BEFORE EACH DOM快照](img/B18159_15_09.jpg)'
- en: Figure 15.9 – BEFORE EACH DOM snapshot
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9 – BEFORE EACH DOM快照
- en: '*Figure 15**.9* shows the steps that were taken by the `beforeEach` function.
    The steps are DOM snapshots of the web application.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15**.9* 显示了`beforeEach`函数所采取的步骤。这些步骤是Web应用的DOM快照。'
- en: 'Let’s also check the test body of the `anti-heroes.cy.ts` spec file. You should
    see the following information:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也检查`anti-heroes.cy.ts`规范文件的测试主体。你应该看到以下信息：
- en: "![Figure 15.10 – TEST BODY DOM snapshot\uFEFF](img/B18159_15_10.jpg)"
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – 测试主体DOM快照](img/B18159_15_10.jpg)'
- en: Figure 15.10 – TEST BODY DOM snapshot
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – 测试主体DOM快照
- en: '*Figure 15**.10* shows the steps that were taken in the test body. These are
    the actions that you wrote in the `anti-heroes.cy.ts` file.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.10* 展示了在测试主体中采取的步骤。这些是你写在`anti-heroes.cy.ts`文件中的操作。'
- en: 'We can also see what happened inside the `afterEach` function. You should be
    able to see the following output:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到`afterEach`函数内部发生了什么。你应该能看到以下输出：
- en: '![Figure 15.11 – AFTER EACH DOM snapshot](img/B18159_15_11.jpg)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![图15.11 – 每次DOM快照之后](img/B18159_15_11.jpg)'
- en: Figure 15.11 – AFTER EACH DOM snapshot
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11 – 每次DOM快照之后
- en: '*Figure 15**.11* shows the steps inside the `afterEach` function. Here, you
    can see that the `afterEach` function logged out and redirected the user to the
    application’s login page.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.11* 展示了`afterEach`函数内部的步骤。在这里，你可以看到`afterEach`函数进行了注销并将用户重定向到应用程序的登录页面。'
- en: And that’s how you write Cypress tests. Now, let’s summarize what was covered
    in this chapter.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是编写Cypress测试的方法。现在，让我们总结一下本章所涵盖的内容。
- en: Summary
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: With this, you have arrived at the end of this chapter. First, you learned what
    Cypress is and how easy it is to set up and write an end-to-end test. You also
    learned how to intercept HTTP requests and mock HTTP responses.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，你已经到达了本章的结尾。首先，你学习了Cypress是什么，以及如何轻松地设置和编写端到端测试。你还学习了如何拦截HTTP请求和模拟HTTP响应。
- en: In the next chapter, you will learn how to package both frontend and backend
    applications into a single executable JAR file.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何将前端和后端应用程序打包成一个单一的可执行JAR文件。
- en: 'Part 4: Deployment'
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四部分：部署
- en: 'This part demonstrates the modern way of shipping backend and frontend applications.
    The following chapters are covered in this part:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分演示了将后端和前端应用程序以现代方式交付的方法。本部分涵盖了以下章节：
- en: '[*Chapter 16*](B18159_16.xhtml#_idTextAnchor303), *Packaging Backend and Frontend
    with Maven*'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第16章*](B18159_16.xhtml#_idTextAnchor303)，*使用Maven打包后端和前端*'
- en: '[*Chapter 17*](B18159_17.xhtml#_idTextAnchor315), *Deploying Spring Boot and
    the Angular App*'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第17章*](B18159_17.xhtml#_idTextAnchor315)，*部署Spring Boot和Angular应用程序*'
