- en: Chapter 4. Querying a Database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a DAO class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling a DAO method from a controller class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a list of objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a list of objects with their dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Updating an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding the number of results for an SQL query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving a list of objects at once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reverting incomplete database modifications using transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Hibernate for powerful object persistence and querying
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JDBC** (**Java Database Connectivity**) and **Hibernate** are the two most
    commonly used technologies to query a database from a Spring application.'
  prefs: []
  type: TYPE_NORMAL
- en: For small projects and simple data models, JDBC is straightforward; you write
    your SQL queries yourself and Spring provides helpers to convert the query results
    into objects.
  prefs: []
  type: TYPE_NORMAL
- en: For complex data models, with several relationships between classes, Hibernate
    is easier; you deal with a standard Java framework (still using JDBC behind the
    scenes) that will generate the SQL queries for you.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter focuses on JDBC because Spring doesn't change the normal way of
    using Hibernate. The integration of Hibernate with Spring, however, is covered
    in the *Using Hibernate for powerful object persistence and querying* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to a database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will connect to a MySQL or PostgreSQL database from a Spring
    application. To connect to another database system, go to [http://www.oxygenxml.com/database_drivers.html](http://www.oxygenxml.com/database_drivers.html)
    to find the relevant dependencies, driver class, and URL type.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need a MySQL or PostgreSQL database up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to connect from a Spring application to an existing database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for Spring JDBC in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you''re using MySQL, add its Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you''re using PostgreSQL, add its Maven dependency in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Spring configuration, add a `DataSource` bean with the database connection
    details.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you''re using MySQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you''re using PostgreSQL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration, add a `JdbcTemplate` bean, taking `DataSource`
    as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A connection (a `Datasource` object) to a database named `db1` on the `3306`
    port (MySQL) or the `5432` port (PostgreSQL) using the `user1` user is created.
  prefs: []
  type: TYPE_NORMAL
- en: The `JdbcTemplate` bean is a Spring object that provides convenient methods
    to query a database using JDBC. It uses the previously defined `DataSource` bean.
    We will use the `JdbcTemplate` bean from our DAO classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a DAO class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a **DAO** (**data access object**) class. A
    DAO class provides methods to save and retrieve objects from the database. It
    can be used from a controller, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a DAO class](img/5807OS_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The controller calls the `findUsers()` method from `UserDAO`, which takes care
    of getting the results from the database (using the `JdbcTemplate` bean defined
    in the previous recipe).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to create a DAO class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class annotated with `@Repository`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an autowired `JdbcTemplate` field to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@Repository` allows the `UserDAO` class to be automatically discovered and
    instantiated as a bean.'
  prefs: []
  type: TYPE_NORMAL
- en: The `JdbcTemplate` field will be initialized automatically by Spring via dependency
    injection with the `JdbcTemplate` bean defined in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Calling a DAO method from a controller class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll see how to call a DAO method from a controller class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the DAO class defined in the previous recipe and pretend that it
    has an `add(User)` method. In the following recipes, we will write actual DAO
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to use a DAO method from a controller class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your controller class, add the DAO as an `@Autowired` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the DAO in any controller method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because of `@Autowired`, the `userDAO` field will be automatically initialized
    by Spring using dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: Saving an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will create a DAO method to save an object in the database;
    a row will be added to the corresponding database table, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving an object](img/5807OS_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to have a model class, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to have a matching database table, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You need to have a DAO class with a `JdbcTemplate` attribute (Refer to the *Creating
    a DAO class* recipe)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define an SQL insert query with question marks as placeholders for the actual
    row values. Use the `update()` method to execute the query using the actual values
    from the object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jdbcTemplate` object takes care of the JDBC boilerplate code; opening and
    closing a connection to the database and handling the exceptions. The `update()`
    method takes the SQL query and the actual values that will replace the question
    marks in the SQL query.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we create a DAO method to retrieve a database row, which we
    will use to create an object.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an SQL select query and create an object from the result using `RowMapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the DAO class, add an inline class implementing `RowMapper`. This class
    defines how to generate a `User` object from a database row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a DAO method which will perform an SQL `select` query and use a `UserMapper`
    object to generate a `User` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `queryForObject()` method uses `the` `UserMapper` object to generate a `User`
    object from the resulting database row.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we retrieve a user from its ID, which is the second argument
    of `queryForObject()`, as an element of an array.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If the database column names match the names of the object attributes, there''s
    no need to define a custom `RowMapper` interface, just use a `ParameterizedBeanPropertyRowMapper`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Retrieving a list of objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to retrieve database rows and create
    a list of objects from them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform an SQL `select` query and generate a list of objects from the result
    using `RowMapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `query()` method uses `RowMapper` to generate objects from the returned
    database rows.
  prefs: []
  type: TYPE_NORMAL
- en: We used a `ParameterizedBeanPropertyRowMapper` class assuming that the database
    table columns match the object attributes; however, as in the previous recipe,
    a custom `RowMapper` interface can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a list of objects with their dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to generate, from an SQL query joining
    several tables, a list of objects with their dependencies. We will retrieve a
    list of `User` objects along with their `Post` objects (blog posts written by
    these users).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You need to have model classes related to each other. In this example, a user
    has many posts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to have corresponding database tables, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an SQL `select` query and generate a list of objects from the result using
    a class implementing `ResultSetExtractor`, which goes through the whole list of
    rows before returning the list of objects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a DAO method performing an SQL `select` statement with `left join` and
    using `ResultSetExtractor` to generate a list of objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an inline class implementing `ResultSetExtractor`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because of `left join`, we obtain a list of rows from the database with sometimes
    the same user, but representing different posts. Each row cannot be processed
    independently or we would end up creating the same user multiple times. So, we
    use `ResultSetExtractor`, which allows us to go through the list of rows.
  prefs: []
  type: TYPE_NORMAL
- en: We use a map of `User` objects to track whether the `User` for the current row
    has already been created.
  prefs: []
  type: TYPE_NORMAL
- en: In the SQL query, we explicitly listed the column names to ensure that they
    will have different names in the resulting rows. Otherwise, `Post id` could be
    confused with `User id`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Updating an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to update an existing row in the database
    with an object's fields.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an SQL `update` query and execute it using the `update()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s convenient to also have a `save()` method that will create the database
    row if it doesn''t exist:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Deleting an object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to delete an existing row from the
    database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an SQL `delete` query and execute it using the `update()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Finding the number of results for an SQL query
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to quickly get the number of results
    for an SQL query without actually loading the rows in the memory.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use an SQL `count(*)` function and get the value directly using the `queryForObject()`
    method with a second argument specifying `Long` as the returned type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Saving a list of objects at once
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will add a DAO method to save a list of objects to the database
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the `batchUpdate()` method that takes an SQL `insert` query and a list
    of values as parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A list of SQL `insert` queries will be generated from the SQL `insert` query
    string and the list of values. They will be sent to the database and committed
    all at once.
  prefs: []
  type: TYPE_NORMAL
- en: Reverting incomplete database modifications using transactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some database modifications involve several SQL queries, for example, inserting
    an object with attributes spread across several tables. If one of the queries
    fails, we would want to undo any previous ones that were successful.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to make DAO methods transactional:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `@EnableTransactionManagement` to the Spring configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `DataSourceTransactionManager` bean to the Spring configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Annotate the DAO class with `@Transactional`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@Transactional` will enclose each DAO method in a `BEGIN…COMMIT` SQL block.
    So if there''s an error (a runtime exception), any modification made by the DAO
    method to the database will be rolled back.'
  prefs: []
  type: TYPE_NORMAL
- en: Using Hibernate for powerful object persistence and querying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use Hibernate with Spring. We'll use a
    MySQL database.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll use a MySQL database with the `user` table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll use this corresponding JPA-annotated domain class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'For more information about the **Java Persistence API** (**JPA**), go to: [http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html](http://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to integrate Hibernate with Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies for Spring ORM, Hibernate, and the JDBC driver for
    MySQL in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `@EnableTransactionManagement` to the Spring configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration, add a `dataSource` bean with the database connection
    details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration class, add a `sessionFactory` bean method taking
    a `Datasource` object as an argument. In this bean method, we tell Hibernate to
    generate SQL code specific to MySQL and declare our `User` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration class, add a `HibernateTransactionManager` bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `SessionFactory` bean to your DAO classes using dependency injection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use this `SessionFactory` bean to control Hibernate as usual, for example,
    this is a DAO method which will add a `User` object into the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
