["```java\nMySQL 8.x                          : select 1 as `one`\n```", "```java\nPostgreSQL (no dummy-table concept): select 1 as \"one\"\n```", "```java\nctx.selectOne().fetch();\n```", "```java\nctx.select(val(1).as(\"one\")).fetch();\n```", "```java\nctx.fetchValue((val(1).as(\"one\")));\n```", "```java\nOracle: select 1 \"A\", 'John' \"B\", 4333 \"C\", 0 \"D\" from dual\n```", "```java\nctx.select(val(1).as(\"A\"), val(\"John\").as(\"B\"), \n```", "```java\n           val(4333).as(\"C\"), val(false).as(\"D\")).fetch();\n```", "```java\nMySQL: \n```", "```java\nselect `t`.`A`, ..., `t`.`D`        \n```", "```java\n  from (select null as `A`, ..., null as `D`            \n```", "```java\n          where false \n```", "```java\n          union all\n```", "```java\n            select * from \n```", "```java\n              (values row ('A', 'John', 4333, false)) as `t`\n```", "```java\n       ) as `t`\n```", "```java\nctx.select().from(values(row(\"A\", \"John\", 4333, false))\n```", "```java\n   .as(\"t\", \"A\", \"B\", \"C\", \"D\")).fetch();\n```", "```java\nPostgreSQL (no dummy-table concept): \n```", "```java\nselect \"t\".\"one\" from (values (1)) as \"t\" (\"one\")\n```", "```java\nctx.select().from(values(row(1)).as(\"t\", \"one\")).fetch();\n```", "```java\nSQL Server: \n```", "```java\nselect 1 [one] from [classicmodels].[dbo].[customer], \n```", "```java\n                    [classicmodels].[dbo].[customerdetail]\n```", "```java\nctx.selectOne().from(CUSTOMER, CUSTOMERDETAIL).fetch();\n```", "```java\nctx.deleteFrom(SALE)\n```", "```java\n   .where(exists(selectOne().from(EMPLOYEE) \n```", "```java\n// .whereExists(selectOne().from(EMPLOYEE)\n```", "```java\n      .where(SALE.EMPLOYEE_NUMBER.eq(EMPLOYEE.EMPLOYEE_NUMBER)\n```", "```java\n        .and(EMPLOYEE.JOB_TITLE.ne(\"Sales Rep\")))))\n```", "```java\n   .execute();\n```", "```java\nctx.select().from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(10101L)).fetch();\n```", "```java\nctx.selectFrom(ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(10101L)).fetch();\n```", "```java\nctx.select(ORDER.fields()).from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(10101L)).fetch();\n```", "```java\nctx.select(asterisk()).from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(10101L))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(asterisk().except(ORDER.COMMENTS, ORDER.STATUS))\n```", "```java\n   .from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(10101L)).fetch();\n```", "```java\nctx.select(nvl(OFFICE.CITY, \"N/A\"),\n```", "```java\n               OFFICE.asterisk().except(OFFICE.CITY))\n```", "```java\n   .from(OFFICE).fetch();\n```", "```java\nctx.select(field(SALE.SALE_.gt(5000.0)).as(\"saleGt5000\"),\n```", "```java\n                 SALE.asterisk().except(SALE.SALE_))\n```", "```java\n   .from(SALE).fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, EMPLOYEE.SALARY)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .orderBy(EMPLOYEE.SALARY)\n```", "```java\n   .limit(10)\n```", "```java\n   .offset(5)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME,EMPLOYEE.SALARY)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .orderBy(EMPLOYEE.SALARY)\n```", "```java\n   .limit(5, 10)\n```", "```java\n   .fetch();\n```", "```java\nMySQL and PostgreSQL (jOOQ 3.14):\n```", "```java\nselect ... from ...limit 10 offset 5\n```", "```java\nPostgreSQL (jOOQ 3.15+):\n```", "```java\nselect ... from ...offset 5 rows fetch first 10 rows only\n```", "```java\nSQL Server:\n```", "```java\nselect ... from ...offset 5 rows fetch next 10 rows only\n```", "```java\nOracle:\n```", "```java\nselect ... from ...offset 5 rows fetch next 10 rows only\n```", "```java\nctx.select(ORDERDETAIL.ORDER_ID, ORDERDETAIL.PRODUCT_ID,            ORDERDETAIL.QUANTITY_ORDERED)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .orderBy(ORDERDETAIL.QUANTITY_ORDERED)                        \n```", "```java\n   .limit(field(select(min(ORDERDETAIL.QUANTITY_ORDERED)).       from(ORDERDETAIL)))                        \n```", "```java\n   .fetch();\n```", "```java\nSQL Server:\n```", "```java\nselect ... from ...\n```", "```java\n   order by (select 0)\n```", "```java\n   offset n rows fetch next m rows only\n```", "```java\nSELECT first_name, last_name FROM employee\n```", "```java\nWHERE office_code IN\n```", "```java\n    (SELECT office_code FROM office WHERE city LIKE \"S%\")\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.OFFICE_CODE.in(\n```", "```java\n       select(OFFICE.OFFICE_CODE).from(OFFICE)\n```", "```java\n          .where(OFFICE.CITY.like(\"S%\")))).fetch()\n```", "```java\nSELECT sale_id, sale\n```", "```java\nFROM sale,\n```", "```java\n  (SELECT avg(sale) AS avgs,employee_number AS sen\n```", "```java\n     FROM sale\n```", "```java\n     GROUP BY employee_number) AS saleTable\n```", "```java\nWHERE (employee_number = saleTable.sen\n```", "```java\n  AND sale < saleTable.avgs);\n```", "```java\n// Table<Record2<BigDecimal, Long>>\n```", "```java\nvar saleTable = select(avg(SALE.SALE_).as(\"avgs\"),  \n```", "```java\n                       SALE.EMPLOYEE_NUMBER.as(\"sen\"))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .asTable(\"saleTable\"); // derived table\n```", "```java\nvar saleTable = table(select(...)).as(\"saleTable\");\n```", "```java\nctx.select(SALE.SALE_ID, SALE.SALE_)\n```", "```java\n   .from(SALE, saleTable)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER\n```", "```java\n     .eq(saleTable.field(\"sen\", Long.class))\n```", "```java\n       .and(SALE.SALE_\n```", "```java\n         .lt(saleTable.field(\"avgs\", Double.class))))\n```", "```java\n   .fetch();\n```", "```java\nField<Double> avgs = avg(SALE.SALE_)\n```", "```java\n  .coerce(Double.class).as(\"avgs\");\n```", "```java\nField<Long> sen = SALE.EMPLOYEE_NUMBER.as(\"sen\");\n```", "```java\nvar saleTable = select(avgs, sen)\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .asTable(\"saleTable\"); // derived table\n```", "```java\nctx.select(SALE.SALE_ID, SALE.SALE_)\n```", "```java\n   .from(SALE, saleTable)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.eq(sen)\n```", "```java\n      .and(SALE.SALE_.lt(avgs)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(SALE.SALE_ID, SALE.SALE_)\n```", "```java\n   .from(SALE, select(avgs, sen)\n```", "```java\n               .from(SALE)\n```", "```java\n               .groupBy(SALE.EMPLOYEE_NUMBER))\n```", "```java\n  .where(SALE.EMPLOYEE_NUMBER.eq(sen)\n```", "```java\n    .and(SALE.SALE_.lt(avgs)))\n```", "```java\n  .fetch();\n```", "```java\nSELECT first_name, last_name FROM employee\n```", "```java\nWHERE salary >= (SELECT (AVG(salary) + 25000) FROM employee);\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.coerce(BigDecimal.class)\n```", "```java\n      .ge(select(avg(EMPLOYEE.SALARY).plus(25000))\n```", "```java\n   .from(EMPLOYEE))).fetch();\n```", "```java\nctx.insertInto(PRODUCT, \n```", "```java\n               PRODUCT.PRODUCT_ID, ..., PRODUCT.MSRP)\n```", "```java\n   .values(...,\n```", "```java\n     field(select(avg(PRODUCT.MSRP)).from(PRODUCT)))\n```", "```java\n   .execute();\n```", "```java\n...select(avg(PRODUCT.MSRP)).from(PRODUCT).asField())\n```", "```java\n...select(array(PRODUCT.MSRP)).from(PRODUCT).asField())\n```", "```java\n... field(select(array(PRODUCT.MSRP)).from(PRODUCT)))\n```", "```java\nSELECT s1.sale, s1.fiscal_year, s1.employee_number\n```", "```java\nFROM sale AS s1\n```", "```java\nWHERE s1.sale =\n```", "```java\n    (SELECT max(s2.sale)\n```", "```java\n     FROM sale AS s2\n```", "```java\n     WHERE (s2.employee_number = s1.employee_number\n```", "```java\n            AND s2.fiscal_year = s1.fiscal_year))\n```", "```java\nORDER BY s1.fiscal_year\n```", "```java\nSale s1 = SALE.as(\"s1\");\n```", "```java\nSale s2 = SALE.as(\"s2\");\n```", "```java\nctx.select(s1.SALE_, s1.FISCAL_YEAR, s1.EMPLOYEE_NUMBER)\n```", "```java\n   .from(s1)\n```", "```java\n   .where(s1.SALE_.eq(select(max(s2.SALE_))\n```", "```java\n      .from(s2)\n```", "```java\n      .where(s2.EMPLOYEE_NUMBER.eq(s1.EMPLOYEE_NUMBER)\n```", "```java\n         .and(s2.FISCAL_YEAR.eq(s1.FISCAL_YEAR)))))\n```", "```java\n   .orderBy(s1.FISCAL_YEAR)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(SALE.FISCAL_YEAR, \n```", "```java\n           SALE.EMPLOYEE_NUMBER, max(SALE.SALE_))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.FISCAL_YEAR, SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .orderBy(SALE.FISCAL_YEAR)\n```", "```java\n   .fetch();\n```", "```java\nSELECT product_id, product_name, buy_price\n```", "```java\nFROM product\n```", "```java\nWHERE\n```", "```java\n  (SELECT avg(buy_price)\n```", "```java\n   FROM product) > ANY\n```", "```java\n     (SELECT price_each\n```", "```java\n      FROM orderdetail\n```", "```java\n      WHERE product.product_id = orderdetail.product_id);\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, \n```", "```java\n           PRODUCT.PRODUCT_NAME, PRODUCT.BUY_PRICE)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .where(select(avg(PRODUCT.BUY_PRICE))\n```", "```java\n   .from(PRODUCT).gt(any(\n```", "```java\n        select(ORDERDETAIL.PRICE_EACH)\n```", "```java\n           .from(ORDERDETAIL)\n```", "```java\n              .where(PRODUCT.PRODUCT_ID\n```", "```java\n                 .eq(ORDERDETAIL.PRODUCT_ID)))))\n```", "```java\n   .fetch();\n```", "```java\nSELECT customer_number, address_line_first,   \n```", "```java\n       address_line_second, city, state, postal_code, country\n```", "```java\nFROM customerdetail\n```", "```java\nWHERE (city, country) IN(SELECT city, country FROM office)\n```", "```java\nctx.selectFrom(CUSTOMERDETAIL)\n```", "```java\n   .where(row(CUSTOMERDETAIL.CITY, CUSTOMERDETAIL.COUNTRY)\n```", "```java\n         .in(select(OFFICE.CITY, OFFICE.COUNTRY).from(OFFICE)))\n```", "```java\n.fetch();\n```", "```java\nSELECT concat(first_name, ' ', last_name) AS full_name,\n```", "```java\n  'Employee' AS contactType\n```", "```java\nFROM employee\n```", "```java\nUNION\n```", "```java\nSELECT concat(contact_first_name, ' ', contact_last_name),\n```", "```java\n  'Customer' AS contactType\n```", "```java\nFROM customer;\n```", "```java\nctx.select(\n```", "```java\n      concat(EMPLOYEE.FIRST_NAME, inline(\" \"),\n```", "```java\n      EMPLOYEE.LAST_NAME).as(\"full_name\"),\n```", "```java\n      inline(\"Employee\").as(\"contactType\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .union(select(\n```", "```java\n          concat(CUSTOMER.CONTACT_FIRST_NAME, inline(\" \"),\n```", "```java\n          CUSTOMER.CONTACT_LAST_NAME),\n```", "```java\n         inline(\"Customer\").as(\"contactType\"))\n```", "```java\n   .from(CUSTOMER))\n```", "```java\n   .fetch();\n```", "```java\nSELECT buy_price FROM product\n```", "```java\nINTERSECT\n```", "```java\nSELECT price_each FROM orderdetail\n```", "```java\nctx.select(PRODUCT.BUY_PRICE)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .intersect(select(ORDERDETAIL.PRICE_EACH)\n```", "```java\n      .from(ORDERDETAIL))\n```", "```java\n   .fetch();\n```", "```java\nSELECT buy_price FROM product\n```", "```java\nEXCEPT\n```", "```java\nSELECT price_each FROM orderdetail\n```", "```java\nORDER BY buy_price\n```", "```java\nctx.select(PRODUCT.BUY_PRICE)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .except(select(ORDERDETAIL.PRICE_EACH).from(ORDERDETAIL))\n```", "```java\n   .orderBy(PRODUCT.BUY_PRICE)\n```", "```java\n   .fetch();\n```", "```java\nSELECT office.office_code, ...\n```", "```java\nFROM office\n```", "```java\nJOIN customerdetail\n```", "```java\n  ON office.postal_code = customerdetail.postal_code\n```", "```java\nWHERE (not((office.city, office.country) <=>\n```", "```java\n      (customerdetail.city, customerdetail.country)))\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .innerJoin(CUSTOMERDETAIL)\n```", "```java\n     .on(OFFICE.POSTAL_CODE.eq(CUSTOMERDETAIL.POSTAL_CODE))\n```", "```java\n   .where(row(OFFICE.CITY, OFFICE.COUNTRY).isDistinctFrom(\n```", "```java\n          row(CUSTOMERDETAIL.CITY, CUSTOMERDETAIL.COUNTRY)))\n```", "```java\n   .fetch();\n```", "```java\nSELECT DISTINCT ON (product_vendor, product_scale) \n```", "```java\n    product_id, product_name, ...\n```", "```java\nFROM product\n```", "```java\nORDER BY product_vendor, product_scale\n```", "```java\nctx.selectDistinct()\n```", "```java\n   .on(PRODUCT.PRODUCT_VENDOR, PRODUCT.PRODUCT_SCALE)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .orderBy(PRODUCT.PRODUCT_VENDOR, PRODUCT.PRODUCT_SCALE)\n```", "```java\n   .fetch();\n```", "```java\nctx.selectDistinct(SALE.EMPLOYEE_NUMBER, \n```", "```java\n                   SALE.FISCAL_YEAR, SALE.SALE_)\n```", "```java\n   .from(SALE)\n```", "```java\n   .qualify(rowNumber().over(\n```", "```java\n      partitionBy(SALE.FISCAL_YEAR)\n```", "```java\n         .orderBy(SALE.FISCAL_YEAR, SALE.SALE_.desc())).eq(1))\n```", "```java\n   .orderBy(SALE.FISCAL_YEAR)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t\", \"employee_number\")))\n```", "```java\n   .from(select(SALE.EMPLOYEE_NUMBER, SALE.SALE_)\n```", "```java\n      .distinctOn(SALE.EMPLOYEE_NUMBER)\n```", "```java\n      .from(SALE)\n```", "```java\n      .orderBy(SALE.EMPLOYEE_NUMBER, SALE.SALE_).asTable(\"t\"))\n```", "```java\n   .orderBy(field(name(\"t\", \"sale\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t\", \"employee_number\")))\n```", "```java\n   .from(select(SALE.EMPLOYEE_NUMBER,\n```", "```java\n       min(SALE.SALE_).as(\"sale\"))\n```", "```java\n     .from(SALE)\n```", "```java\n     .groupBy(SALE.EMPLOYEE_NUMBER).asTable(\"t\"))\n```", "```java\n   .orderBy(field(name(\"t\", \"sale\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.insertInto(ORDER,\n```", "```java\n      ORDER.COMMENTS, ORDER.ORDER_DATE, ORDER.REQUIRED_DATE,\n```", "```java\n      ORDER.SHIPPED_DATE, ORDER.STATUS, ORDER.CUSTOMER_NUMBER,\n```", "```java\n      ORDER.AMOUNT)\n```", "```java\n   .values(\"New order inserted...\", LocalDate.of(2003, 2, 12),\n```", "```java\n          LocalDate.of(2003, 3, 1), LocalDate.of(2003, 2, 27),\n```", "```java\n          \"Shipped\", 363L, BigDecimal.valueOf(314.44))\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(ORDER)\n```", "```java\n   .columns(ORDER.COMMENTS, ORDER.ORDER_DATE,\n```", "```java\n           ORDER.REQUIRED_DATE, ORDER.SHIPPED_DATE,\n```", "```java\n           ORDER.STATUS, ORDER.CUSTOMER_NUMBER, ORDER.AMOUNT)\n```", "```java\n   .values(\"New order inserted...\", LocalDate.of(2003, 2, 12),\n```", "```java\n          LocalDate.of(2003, 3, 1), LocalDate.of(2003, 2, 27),\n```", "```java\n          \"Shipped\", 363L, BigDecimal.valueOf(314.44))\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(ORDER)\n```", "```java\n   .values(default_(), // Oracle, MySQL, PostgreSQL\n```", "```java\n           LocalDate.of(2003, 2, 12), LocalDate.of(2003, 3, 1),\n```", "```java\n           LocalDate.of(2003, 2, 27), \"Shipped\",\n```", "```java\n           \"New order inserted ...\", 363L, 314.44)\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(ORDER)\n```", "```java\n   .values(ORDER_SEQ.nextval(), \n```", "```java\n           LocalDate.of(2003, 2, 12), LocalDate.of(2003, 3, 1),\n```", "```java\n           LocalDate.of(2003, 2, 27), \"Shipped\",\n```", "```java\n           \"New order inserted ...\", 363L, 314.44)\n```", "```java\n    .execute();\n```", "```java\nList<SaleRecord> listOfRecord = List.of( ... );\n```", "```java\nctx.insertInto(SALE, SALE.fields())\n```", "```java\n   .valuesOfRecords(listOfRecord)\n```", "```java\n   .execute();\n```", "```java\nvar listOfRows\n```", "```java\n  = List.of(row(2003, 3443.22, 1370L,\n```", "```java\n            SaleRate.SILVER, SaleVat.MAX, 3, 14.55), \n```", "```java\n            row(...), ...);\n```", "```java\nctx.insertInto(SALE,\n```", "```java\n               SALE.FISCAL_YEAR, SALE.SALE_,\n```", "```java\n               SALE.EMPLOYEE_NUMBER, SALE.RATE, SALE.VAT,\n```", "```java\n               SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n   .valuesOfRows(listOfRows)\n```", "```java\n   .execute();\n```", "```java\nSaleRecord sr = new SaleRecord();\n```", "```java\nsr.setFiscalYear(2003); // or, sr.set(SALE.FISCAL_YEAR, 2003);\n```", "```java\nsr.setSale(3443.22);    // or, sr.set(SALE.SALE_, 3443.22); \n```", "```java\nsr.setEmployeeNumber(1370L); \n```", "```java\nsr.setFiscalMonth(3);\n```", "```java\nsr.setRevenueGrowth(14.55);\n```", "```java\nctx.insertInto(SALE)\n```", "```java\n   .values(sr.getSaleId(), sr.getFiscalYear(), sr.getSale(), \n```", "```java\n       sr.getEmployeeNumber(), default_(), SaleRate.SILVER,  \n```", "```java\n       SaleVat.MAX, sr.getFiscalMonth(), sr.getFiscalYear(), \n```", "```java\n       default_())\n```", "```java\n   .execute()\n```", "```java\nctx.insertInto(SALE)\n```", "```java\n   .values(sr.valuesRow().fields())\n```", "```java\n   .execute();\n```", "```java\nctx.executeInsert(sr);\n```", "```java\nsr.attach(ctx.configuration());\n```", "```java\nsr.insert();\n```", "```java\n// jOOQ Sale POJO\n```", "```java\nSale sale = new Sale(null, 2005, 343.22, 1504L,\n```", "```java\n     null, SaleRate.SILVER, SaleVat.MAX, 4, 15.55, null);\n```", "```java\nctx.newRecord(SALE, sale).insert();\n```", "```java\nSaleRecord sr = new SaleRecord();\n```", "```java\nsr.from(sale); // sale is the previous POJO instance\n```", "```java\nctx.executeInsert(sr);\n```", "```java\nSale sale = new Sale(1L, 2005, 343.22, 1504L, null,    \n```", "```java\n                SaleRate.SILVER, SaleVat.MAX, 6, 23.99, null);\n```", "```java\nSaleRecord sr = new SaleRecord();\n```", "```java\nsr.from(sale);\n```", "```java\n// reset the current ID and allow DB to generate one\n```", "```java\nsr.reset(SALE.SALE_ID);       \n```", "```java\nctx.executeInsert(sr);\n```", "```java\nrecord.changed(SALE.SALE_ID, false);\n```", "```java\nctx.insertInto(SALE)\n```", "```java\n   .set(SALE.FISCAL_YEAR, 2005)      // first row\n```", "```java\n   .set(SALE.SALE_, 4523.33)\n```", "```java\n   .set(SALE.EMPLOYEE_NUMBER, 1504L)\n```", "```java\n   .set(SALE.FISCAL_MONTH, 3)\n```", "```java\n   .set(SALE.REVENUE_GROWTH, 12.22)\n```", "```java\n   .newRecord()\n```", "```java\n   .set(SALE.FISCAL_YEAR, 2005)      // second row\n```", "```java\n   .set(SALE.SALE_, 4523.33)\n```", "```java\n   .set(SALE.EMPLOYEE_NUMBER, 1504L)\n```", "```java\n   .set(SALE.FISCAL_MONTH, 4)\n```", "```java\n   .set(SALE.REVENUE_GROWTH, 22.12)\n```", "```java\n   .execute();\n```", "```java\nSaleRecord sr = new SaleRecord(...);\n```", "```java\nctx.insertInto(SALE).set(sr).execute();\n```", "```java\n// Record1<Long>\n```", "```java\nvar insertedId = ctx.insertInto(SALE, \n```", "```java\n      SALE.FISCAL_YEAR, SALE.SALE_, SALE.EMPLOYEE_NUMBER, \n```", "```java\n      SALE.REVENUE_GROWTH, SALE.FISCAL_MONTH)\n```", "```java\n   .values(2004, 2311.42, 1370L, 10.12, 1)\n```", "```java\n   .returningResult(SALE.SALE_ID)\n```", "```java\n   .fetchOne();\n```", "```java\n// Result<Record1<Long>>\n```", "```java\nvar insertedIds = ctx.insertInto(SALE, \n```", "```java\n      SALE.FISCAL_YEAR,SALE.SALE_, SALE.EMPLOYEE_NUMBER, \n```", "```java\n      SALE.REVENUE_GROWTH, SALE.FISCAL_MONTH)\n```", "```java\n   .values(2004, 2311.42, 1370L, 12.50, 1)\n```", "```java\n   .values(2003, 900.21, 1504L, 23.99, 2)\n```", "```java\n   .values(2005, 1232.2, 1166L, 14.65, 3)\n```", "```java\n   .returningResult(SALE.SALE_ID)\n```", "```java\n   .fetch();\n```", "```java\n// Result<Record2<String, LocalDate>>\n```", "```java\nvar inserted = ctx.insertInto(PRODUCTLINE,  \n```", "```java\n      PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.TEXT_DESCRIPTION, \n```", "```java\n      PRODUCTLINE.CODE)\n```", "```java\n    .values(..., \"This new line of electric vans ...\", 983423L)\n```", "```java\n    .values(..., \"This new line of turbo N cars ...\", 193384L)\n```", "```java\n    .returningResult(PRODUCTLINE.PRODUCT_LINE, \n```", "```java\n                     PRODUCTLINE.CREATED_ON)\n```", "```java\n   .fetch();\n```", "```java\nctx.insertInto(CUSTOMERDETAIL)\n```", "```java\n   .values(ctx.insertInto(CUSTOMER)\n```", "```java\n      .values(default_(), ..., \"Kyle\", \"Doyle\", \n```", "```java\n              \"+ 44 321 321\", default_(), default_(), default_())\n```", "```java\n      .returningResult(CUSTOMER.CUSTOMER_NUMBER).fetchOne()\n```", "```java\n         .value1(), ..., default_(), \"Los Angeles\", \n```", "```java\n           default_(), default_(), \"USA\")\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(PRODUCT)\n```", "```java\n   .columns(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_LINE,   \n```", "```java\n            PRODUCT.CODE, PRODUCT.PRODUCT_SCALE,\n```", "```java\n            PRODUCT.PRODUCT_VENDOR, PRODUCT.BUY_PRICE, \n```", "```java\n            PRODUCT.MSRP)\n```", "```java\n   .values(\"Ultra Jet X1\", \"Planes\", 433823L, \"1:18\", \n```", "```java\n           \"Motor City Art Classics\",\n```", "```java\n            BigDecimal.valueOf(45.9), BigDecimal.valueOf(67.9))\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(MANAGER).defaultValues().execute();\n```", "```java\nctx.insertInto(PRODUCT)\n```", "```java\n   .columns(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_LINE,\n```", "```java\n     PRODUCT.CODE, PRODUCT.PRODUCT_SCALE,   \n```", "```java\n     PRODUCT.PRODUCT_VENDOR, PRODUCT.PRODUCT_DESCRIPTION,  \n```", "```java\n     PRODUCT.QUANTITY_IN_STOCK, PRODUCT.BUY_PRICE, \n```", "```java\n     PRODUCT.MSRP, PRODUCT.SPECS, PRODUCT.PRODUCT_UID)\n```", "```java\n   .values(val(\"Ultra Jet X1\"), val(\"Planes\"), \n```", "```java\n           val(433823L),val(\"1:18\"), \n```", "```java\n           val(\"Motor City Art Classics\"),\n```", "```java\n           defaultValue(PRODUCT.PRODUCT_DESCRIPTION),\n```", "```java\n           defaultValue(PRODUCT.QUANTITY_IN_STOCK),\n```", "```java\n           val(BigDecimal.valueOf(45.99)),  \n```", "```java\n           val(BigDecimal.valueOf(67.99)),\n```", "```java\n           defaultValue(PRODUCT.SPECS),  \n```", "```java\n           defaultValue(PRODUCT.PRODUCT_UID))\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(PRODUCT)\n```", "```java\n   .values(defaultValue(), \"Ultra Jet X1\", \"Planes\", 433823L,\n```", "```java\n     defaultValue(), \"Motor City Art Classics\",\n```", "```java\n     defaultValue(), defaultValue(), 45.99, 67.99,  \n```", "```java\n     defaultValue(), defaultValue())\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(PRODUCT)\n```", "```java\n   .values(defaultValue(PRODUCT.PRODUCT_ID), \n```", "```java\n           \"Ultra JetX1\", \"Planes\", 433823L, \n```", "```java\n           defaultValue(PRODUCT.PRODUCT_SCALE),\n```", "```java\n           \"Motor City Art Classics\",\n```", "```java\n           defaultValue(PRODUCT.PRODUCT_DESCRIPTION),\n```", "```java\n           defaultValue(PRODUCT.QUANTITY_IN_STOCK),\n```", "```java\n           45.99, 67.99, defaultValue(PRODUCT.SPECS),\n```", "```java\n           defaultValue(PRODUCT.PRODUCT_UID))\n```", "```java\n   .execute()\n```", "```java\ndefaultValue(INTEGER) // or, defaultValue(Integer.class)\n```", "```java\nctx.newRecord(MANAGER).insert();\n```", "```java\nManagerRecord mr = new ManagerRecord();\n```", "```java\nctx.newRecord(MANAGER, mr).insert();\n```", "```java\nctx.update(OFFICE)\n```", "```java\n   .set(OFFICE.CITY, \"Banesti\")\n```", "```java\n   .set(OFFICE.COUNTRY, \"Romania\")\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(\"1\"))\n```", "```java\n   .execute();\n```", "```java\nUPDATE `classicmodels`.`office`\n```", "```java\nSET `classicmodels`.`office'.`city` = ?,\n```", "```java\n    `classicmodels`.`office`.`country` = ?\n```", "```java\nWHERE `classicmodels`.`office`.`office_code` = ?\n```", "```java\nctx.update(EMPLOYEE)\n```", "```java\n   .set(EMPLOYEE.SALARY, EMPLOYEE.SALARY.plus(\n```", "```java\n      field(select(count(SALE.SALE_).multiply(5.75)).from(SALE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n      .eq(SALE.EMPLOYEE_NUMBER)))))\n```", "```java\n   .execute();\n```", "```java\nUPDATE [classicmodels].[dbo].[employee]\n```", "```java\nSET [classicmodels].[dbo].[employee].[salary] = \n```", "```java\n  ([classicmodels].[dbo].[employee].[salary] +\n```", "```java\n   (SELECT (count([classicmodels].[dbo].[sale].[sale]) * ?)\n```", "```java\n    FROM [classicmodels].[dbo].[sale]\n```", "```java\n    WHERE [classicmodels].[dbo].[employee].[employee_number] \n```", "```java\n        = [classicmodels].[dbo].[sale].[employee_number]))\n```", "```java\nctx.configuration().derive(new Settings()\n```", "```java\n   .withExecuteUpdateWithoutWhere(ExecuteWithoutWhere.THROW))\n```", "```java\n   .dsl()\n```", "```java\n   .update(OFFICE)\n```", "```java\n   .set(OFFICE.CITY, \"Banesti\")\n```", "```java\n   .set(OFFICE.COUNTRY, \"Romania\")                  \n```", "```java\n   .execute();\n```", "```java\nOfficeRecord or = new OfficeRecord();\n```", "```java\nor.setCity(\"Constanta\");\n```", "```java\nor.setCountry(\"Romania\");\n```", "```java\nctx.update(OFFICE)\n```", "```java\n   .set(or)\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(\"1\")).execute();\n```", "```java\n// or, like this\n```", "```java\nctx.executeUpdate(or, OFFICE.OFFICE_CODE.eq(\"1\"));\n```", "```java\nctx.update(OFFICE)\n```", "```java\n    .set(row(OFFICE.ADDRESS_LINE_FIRST, \n```", "```java\n             OFFICE.ADDRESS_LINE_SECOND, OFFICE.PHONE),\n```", "```java\n         select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n             val(\"+40 0721 456 322\"))\n```", "```java\n           .from(EMPLOYEE)\n```", "```java\n           .where(EMPLOYEE.JOB_TITLE.eq(\"President\")))\n```", "```java\n   .execute();\n```", "```java\nUPDATE \"public\".\"office\"\n```", "```java\nSET (\"address_line_first\", \"address_line_second\", \"phone\") =\n```", "```java\n  (SELECT \"public\".\"employee\".\"first_name\",\n```", "```java\n          \"public\".\"employee\".\"last_name\", ?\n```", "```java\n   FROM \"public\".\"employee\"\n```", "```java\n   WHERE \"public\".\"employee\".\"job_title\" = ?)\n```", "```java\nctx.update(OFFICE)\n```", "```java\n   .set(row(OFFICE.CITY, OFFICE.COUNTRY),\n```", "```java\n        row(\"Hamburg\", \"Germany\"))\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(\"1\"))\n```", "```java\n   .execute();\n```", "```java\nRow2<String, String> r1 = row(OFFICE.CITY, OFFICE.COUNTRY);\n```", "```java\nRow2<String, String> r2 = row(\"Hamburg\", \"Germany\");\n```", "```java\nctx.update(OFFICE).set(r1, r2).where(r1.isNull())\n```", "```java\n   .execute();\n```", "```java\nctx.update(PRODUCT)\n```", "```java\n   .set(PRODUCT.BUY_PRICE, ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(PRODUCT.PRODUCT_ID.eq(ORDERDETAIL.PRODUCT_ID))\n```", "```java\n   .execute();\n```", "```java\nUPDATE \"public\".\"product\"\n```", "```java\nSET \"buy_price\" = \"public\".\"orderdetail\".\"price_each\"\n```", "```java\nFROM \"public\".\"orderdetail\"\n```", "```java\nWHERE \"public\".\"product\".\"product_id\" \n```", "```java\n    = \"public\".\"orderdetail\".\"product_id\"\n```", "```java\nctx.update(OFFICE)\n```", "```java\n   .set(OFFICE.CITY, \"Paris\")\n```", "```java\n   .set(OFFICE.COUNTRY, \"France\")\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(\"1\"))\n```", "```java\n   .returningResult(OFFICE.CITY, OFFICE.COUNTRY)\n```", "```java\n   .fetchOne();\n```", "```java\nUPDATE \"public\".\"office\"\n```", "```java\nSET \"city\" = ?,\n```", "```java\n    \"country\" = ?\n```", "```java\nWHERE \"public\".\"office\".\"office_code\" = ? \n```", "```java\nRETURNING \"public\".\"office\".\"city\",\n```", "```java\n          \"public\".\"office\".\"country\"\n```", "```java\nctx.update(CUSTOMER)\n```", "```java\n   .set(CUSTOMER.CREDIT_LIMIT, CUSTOMER.CREDIT_LIMIT.plus(\n```", "```java\n      ctx.update(EMPLOYEE)\n```", "```java\n         .set(EMPLOYEE.SALARY, EMPLOYEE.SALARY.plus(\n```", "```java\n            field(select(avg(SALE.SALE_)).from(SALE)\n```", "```java\n                  .where(SALE.EMPLOYEE_NUMBER\n```", "```java\n                     .eq(EMPLOYEE.EMPLOYEE_NUMBER)))))\n```", "```java\n         .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1504L))\n```", "```java\n         .returningResult(EMPLOYEE.SALARY\n```", "```java\n            .coerce(BigDecimal.class))\n```", "```java\n         .fetchOne().value1()\n```", "```java\n            .multiply(BigDecimal.valueOf(2))))\n```", "```java\n   .where(CUSTOMER.SALES_REP_EMPLOYEE_NUMBER.eq(1504L))\n```", "```java\n   .execute();\n```", "```java\nctx.delete(SALE)\n```", "```java\n   .where(SALE.FISCAL_YEAR.eq(2003))\n```", "```java\n   .execute();\n```", "```java\nctx.deleteFrom(SALE)\n```", "```java\n   .where(SALE.FISCAL_YEAR.eq(2003))\n```", "```java\n   .execute();\n```", "```java\nDELETE FROM `classicmodels`.`sale`\n```", "```java\nWHERE `classicmodels`.`sale`.`fiscal_year` = ?\n```", "```java\nctx.deleteFrom(CUSTOMERDETAIL)\n```", "```java\n   .where(row(CUSTOMERDETAIL.POSTAL_CODE,\n```", "```java\n              CUSTOMERDETAIL.STATE).in(\n```", "```java\n                 select(OFFICE.POSTAL_CODE, OFFICE.STATE)\n```", "```java\n                   .from(OFFICE)\n```", "```java\n                   .where(OFFICE.COUNTRY.eq(\"USA\"))))\n```", "```java\n   .execute();\n```", "```java\nctx.delete(PRODUCTLINE)\n```", "```java\n .where(PRODUCTLINE.PRODUCT_LINE.in(\n```", "```java\n   ctx.delete(PRODUCTLINEDETAIL)\n```", "```java\n    .where(PRODUCTLINEDETAIL.PRODUCT_LINE.in(\n```", "```java\n      ctx.delete(PRODUCT)\n```", "```java\n       .where(PRODUCT.PRODUCT_ID.in(\n```", "```java\n         ctx.delete(ORDERDETAIL)\n```", "```java\n          .where(ORDERDETAIL.PRODUCT_ID.in(\n```", "```java\n            select(PRODUCT.PRODUCT_ID).from(PRODUCT)\n```", "```java\n             .where(PRODUCT.PRODUCT_LINE.eq(\"Motorcycles\")\n```", "```java\n               .or(PRODUCT.PRODUCT_LINE\n```", "```java\n                 .eq(\"Trucks and Buses\")))))\n```", "```java\n         .returningResult(ORDERDETAIL.PRODUCT_ID).fetch()))\n```", "```java\n       .returningResult(PRODUCT.PRODUCT_LINE).fetch()))\n```", "```java\n     .returningResult(PRODUCTLINEDETAIL.PRODUCT_LINE).fetch()))\n```", "```java\n .execute();\n```", "```java\nPaymentRecord pr = new PaymentRecord();\n```", "```java\npr.setCustomerNumber(114L);    \n```", "```java\npr.setCheckNumber(\"GG31455\");\n```", "```java\n...\n```", "```java\n// jOOQ render a WHERE clause based on the record PK\n```", "```java\nctx.executeDelete(pr);\n```", "```java\n// jOOQ render our explicit Condition\n```", "```java\nctx.executeDelete(pr, \n```", "```java\n   PAYMENT.INVOICE_AMOUNT.eq(BigDecimal.ZERO));\n```", "```java\nctx.mergeInto(PRODUCT)\n```", "```java\n   .usingDual() // or, (ctx.selectOne())\n```", "```java\n   .on(PRODUCT.PRODUCT_NAME.eq(\"1952 Alpine Renault 1300\"))\n```", "```java\n   .whenMatchedThenUpdate()\n```", "```java\n   .set(PRODUCT.PRODUCT_NAME, \"1952 Alpine Renault 1600\")\n```", "```java\n   .whenNotMatchedThenInsert(\n```", "```java\n     PRODUCT.PRODUCT_NAME, PRODUCT.CODE)\n```", "```java\n   .values(\"1952 Alpine Renault 1600\", 599302L)\n```", "```java\n   .execute();\n```", "```java\nMERGE INTO [classicmodels].[dbo].[product] USING\n```", "```java\n  (SELECT 1 [one]) t ON  \n```", "```java\n    [classicmodels].[dbo].[product].[product_name] = ? \n```", "```java\nWHEN MATCHED THEN\n```", "```java\n  UPDATE\n```", "```java\n  SET [classicmodels].[dbo].[product].[product_name] = ? \n```", "```java\nWHEN NOT MATCHED THEN\n```", "```java\n  INSERT ([product_name], [code])\n```", "```java\n  VALUES (?, ?);\n```", "```java\nctx.mergeInto(SALE)\n```", "```java\n   .using(EMPLOYEE)   \n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .whenMatchedThenDelete()\n```", "```java\n   .whenNotMatchedThenInsert(SALE.EMPLOYEE_NUMBER,   \n```", "```java\n      SALE.FISCAL_YEAR, SALE.SALE_,\n```", "```java\n      SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n   .values(EMPLOYEE.EMPLOYEE_NUMBER, val(2015),\n```", "```java\n      coalesce(val(-1.0).mul(EMPLOYEE.COMMISSION), val(0.0)), \n```", "```java\n      val(1), val(0.0))\n```", "```java\n   .execute();\n```", "```java\nctx.mergeInto(SALE)\n```", "```java\n   .using(EMPLOYEE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n// .whenMatchedThenDelete() - not supported by Oracle\n```", "```java\n   .whenMatchedAnd(selectOne().asField().eq(1))\n```", "```java\n   .thenDelete()\n```", "```java\n   .whenNotMatchedThenInsert(SALE.EMPLOYEE_NUMBER,  \n```", "```java\n      SALE.FISCAL_YEAR, SALE.SALE_,\n```", "```java\n      SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n   .values(EMPLOYEE.EMPLOYEE_NUMBER, val(2015),\n```", "```java\n      coalesce(val(-1.0).mul(EMPLOYEE.COMMISSION), val(0.0)),  \n```", "```java\n      val(1), val(0.0))\n```", "```java\n   .execute();\n```", "```java\nctx.mergeInto(SALE)\n```", "```java\n   .using(EMPLOYEE)\n```", "```java\n   .on(SALE.EMPLOYEE_NUMBER.eq(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .whenMatchedThenUpdate()\n```", "```java\n   .set(SALE.SALE_, coalesce(SALE.SALE_\n```", "```java\n        .minus(EMPLOYEE.COMMISSION), SALE.SALE_))\n```", "```java\n   .deleteWhere(SALE.SALE_.lt(1000.0))\n```", "```java\n   .execute();\n```", "```java\nctx.mergeInto(SALE)\n```", "```java\n   .using(EMPLOYEE)\n```", "```java\n   .on(SALE.EMPLOYEE_NUMBER.eq(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .whenMatchedThenUpdate()\n```", "```java\n   .set(SALE.SALE_, coalesce(SALE.SALE_\n```", "```java\n       .minus(EMPLOYEE.COMMISSION), SALE.SALE_))\n```", "```java\n   .deleteWhere(EMPLOYEE.COMMISSION.lt(1000))\n```", "```java\n   .execute();\n```"]