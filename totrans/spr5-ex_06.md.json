["```java\n<dependency>\n  <groupId>com.fasterxml.jackson.module</groupId>\n  <artifactId>jackson-module-kotlin</artifactId>\n  <version>${jackson.version}</version>\n</dependency>\n\n<dependency>\n  <groupId>io.projectreactor</groupId>\n  <artifactId>reactor-test</artifactId>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>io.projectreactor.rabbitmq</groupId>\n  <artifactId>reactor-rabbitmq</artifactId>\n  <version>1.0.0.M1</version>\n</dependency>\n```", "```java\nConnection: keep-alive\n```", "```java\npackage springfive.twitterdispatcher.infra.rabbitmq\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\nimport com.rabbitmq.client.ConnectionFactory\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport reactor.rabbitmq.ReactorRabbitMq\nimport reactor.rabbitmq.Receiver\nimport reactor.rabbitmq.ReceiverOptions\n\n@Configuration\nclass RabbitMQConfiguration(private @Value(\"\\${spring.rabbitmq.host}\")  val host:String,\n                            private @Value(\"\\${spring.rabbitmq.port}\")  val port:Int,\n                            private @Value(\"\\${spring.rabbitmq.username}\")  val username:String,\n                            private @Value(\"\\${spring.rabbitmq.password}\")  val password:String){\n\n  @Bean\n  fun mapper(): ObjectMapper = ObjectMapper().registerModule(KotlinModule())\n\n  @Bean\n  fun connectionFactory():ConnectionFactory{\n    val connectionFactory = ConnectionFactory()\n    connectionFactory.username = this.username\n    connectionFactory.password = this.password\n    connectionFactory.host = this.host\n    connectionFactory.port = this.port\n    connectionFactory.useNio()\n    return connectionFactory\n  }\n\n  @Bean\n  fun receiver(connectionFactory: ConnectionFactory):Receiver{\n      val options = ReceiverOptions()\n      options.connectionFactory(connectionFactory)\n      return ReactorRabbitMq.createReceiver(options)\n  }\n\n}\n```", "```java\npackage springfive.twitterdispatcher.domain.service\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties\nimport com.fasterxml.jackson.annotation.JsonProperty\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.fasterxml.jackson.module.kotlin.readValue\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.stereotype.Service\nimport reactor.core.publisher.Flux\nimport reactor.core.publisher.Mono\nimport reactor.rabbitmq.Receiver\n\n@Service\nclass TwitterDispatcher(private @Value(\"\\${queue.twitter}\") val queue: String,\n       private val receiver: Receiver,\n       private val mapper: ObjectMapper) {\n\n    fun dispatch(): Flux<Tweet> {\n        return this.receiver.consumeAutoAck(this.queue).flatMap { message ->\n            Mono.just(mapper.readValue<Tweet>(String(message.body)))\n        }\n    }\n\n}\n\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class Tweet(val id: String = \"\", \n   val text: String = \"\", @JsonProperty(\"created_at\") \n   val createdAt: String = \"\", val user: TwitterUser = TwitterUser(\"\", \"\"))\n\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class TwitterUser(val id: String, val name: String)\n```", "```java\npackage springfive.twitterdispatcher.domain.controller\n\nimport org.springframework.http.MediaType\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RequestParam\nimport org.springframework.web.bind.annotation.RestController\nimport reactor.core.publisher.Flux\nimport springfive.twitterdispatcher.domain.service.Tweet\nimport springfive.twitterdispatcher.domain.service.TwitterDispatcher\n\n@RestController\n@RequestMapping(\"/tweets\")\nclass TweetResource(private val dispatcher: TwitterDispatcher) {\n\n  @GetMapping(produces = [MediaType.TEXT_EVENT_STREAM_VALUE])\n  fun tweets(@RequestParam(\"q\")query:String):Flux<Tweet>{\n    return dispatcher.dispatch()\n       .filter({ tweet: Tweet? -> tweet!!.text.contains(query,ignoreCase = true) })\n    }\n}\n```", "```java\n<plugin>\n  <groupId>io.fabric8</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <version>0.21.0</version>\n  <configuration>\n    <images>\n      <image>\n        <name>springfivebyexample/${project.build.finalName}</name>\n        <build>\n          <from>openjdk:latest</from>\n          <entryPoint>java -Dspring.profiles.active=container -jar \n             /application/${project.build.finalName}.jar</entryPoint>\n          <assembly>\n            <basedir>/application</basedir>\n            <descriptorRef>artifact</descriptorRef>\n            <inline>\n              <id>assembly</id>\n              <files>\n                <file>\n        <source>target/${project.build.finalName}.jar</source>\n                </file>\n              </files>\n            </inline>\n          </assembly>\n          <tags>\n            <tag>latest</tag>\n          </tags>\n          <ports>\n <port>8081</port>\n          </ports>\n        </build>\n        <run>\n          <namingStrategy>alias</namingStrategy>\n        </run>\n        <alias>${project.build.finalName}</alias>\n      </image>\n    </images>\n  </configuration>\n</plugin>\n```", "```java\nmvn clean install docker:build\n```", "```java\n<plugin>\n  <groupId>io.fabric8</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <version>0.21.0</version>\n  <configuration>\n    <images>\n      <image>\n        <name>springfivebyexample/${project.build.finalName}</name>\n        <build>\n          <from>openjdk:latest</from>\n          <entryPoint>java -Dspring.profiles.active=container -jar \n          /application/${project.build.finalName}.jar</entryPoint>\n          <assembly>\n            <basedir>/application</basedir>\n            <descriptorRef>artifact</descriptorRef>\n            <inline>\n              <id>assembly</id>\n              <files>\n                <file>\n          <source>target/${project.build.finalName}.jar</source>\n                </file>\n              </files>\n            </inline>\n          </assembly>\n          <tags>\n            <tag>latest</tag>\n          </tags>\n <ports>\n            <port>9099</port> </ports>\n        </build>\n        <run>\n          <namingStrategy>alias</namingStrategy>\n        </run>\n        <alias>${project.build.finalName}</alias>\n      </image>\n    </images>\n  </configuration>\n</plugin>\n```", "```java\nmvn clean install docker:build\n```", "```java\ndocker run -d --name tracked --net twitter -p 9090:9090 springfivebyexample/tracked_hashtag\n```", "```java\ndocker logs tracked -f\n```", "```java\nINFO 7 --- [           main] s.t.TrackedHashTagApplication$Companion  : The following profiles are active: docker\n```", "```java\n<entryPoint>java -Dspring.profiles.active=docker -jar /application/${project.build.finalName}.jar</entryPoint>\n```", "```java\ndocker run -d --name gathering --net twitter -e CONSUMER_KEY=gupfxwn43NBTdxCD3Tsf1JgMu \\\n-e CONSUMER_SECRET=pH4uM5LlYxKzfJ7huYRwFbaFXn7ooK01LmqCP69QV9a9kZrHw5 \\\n-e ACCESS_TOKEN=940015005860290560-m0WwSyxGvp5ufff9KW2zm5LGXLaFLov \\\n-e ACCESS_TOKEN_SECRET=KSofGB8aIwDmewceKXLbN8d5chvZkZyB31VZa09pNBhLo \\\n-p 8081:8081 springfivebyexample/tweet_gathering\n```", "```java\ndocker run -d --name dispatcher --net twitter -p 9099:9099 springfivebyexample/tweet_dispatcher\n```", "```java\ndocker container ls\n```", "```java\ndocker ps\n```", "```java\ndocker stop gathering\n```", "```java\ndocker start gathering\n```", "```java\nversion: '3'\nservices:\n  rabbitmq:\n    image: rabbitmq:3.7.0-management-alpine\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n  redis:\n    image: \"redis:alpine\"\n    ports:\n      - \"6379:6379\"\n```", "```java\nsudo curl -L https://github.com/docker/compose/releases/download/1.18.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n```", "```java\nsudo chmod +x /usr/local/bin/docker-compose\n```", "```java\ndocker-compose --version\n```", "```java\nversion: '3'\nservices:\n  rabbitmq:\n    image: rabbitmq:3.7.0-management-alpine\n    hostname: rabbitmq\n    ports:\n      - \"5672:5672\"\n      - \"15672:15672\"\n    networks:\n      - solution \n  redis:\n    image: \"redis:4.0.6-alpine\"\n    hostname: redis\n    ports:\n      - \"6379:6379\"\n    networks:\n      - solution \n  tracked:\n    image: springfivebyexample/tracked_hashtag\n    ports:\n      - \"9090:9090\"\n    networks:\n      - solution \n  gathering:\n    image: springfivebyexample/tweet_gathering\n    ports:\n      - \"8081:8081\"\n    networks:\n      - solution\n    environment:\n      - CONSUMER_KEY=gupfxwn43NBTdxCD3Tsf1JgMu\n      - CONSUMER_SECRET=pH4uM5LlYxKzfJ7huYRwFbaFXn7ooK01LmqCP69QV9a9kZrHw5\n      - ACCESS_TOKEN=940015005860290560-m0WwSyxGvp5ufff9KW2zm5LGXLaFLov\n      - ACCESS_TOKEN_SECRET=KSofGB8aIwDmewceKXLbN8d5chvZkZyB31VZa09pNBhLo\n  dispatcher:\n    image: springfivebyexample/tweet_dispatcher\n    ports:\n      - \"9099:9099\"\n    networks:\n      - solution\nnetworks:\n  solution:\n    driver: bridge\n```", "```java\ndocker-compose up -d\n```", "```java\ndocker exec -it compose_gathering_1  /bin/bash\n```", "```java\ndocker exec -it <container name or container id> <program or instruction>\n```", "```java\nping redis\n```"]