["```java\nimport javax.ejb.LocalBean; \nimport javax.ejb.Singleton; \n\n@Singleton \n@LocalBean \npublic class Student { \n... \n} \n```", "```java\nimport javax.ejb.EJB; \nimport javax.faces.bean.ManagedBean; \n\n@ManagedBean \npublic class StudentJSFBean { \n  @EJB \n  private Student studentEJB; \n} \n```", "```java\nimport java.util.List; \nimport javax.ejb.Local; \n\n@Local \npublic interface StudentLocal { \n  public List<Course> getCourses(); \n} \n```", "```java\nimport java.util.List; \nimport javax.ejb.Local; \nimport javax.ejb.Stateful; \n\n@Stateful \n@Local \npublic class Student implements StudentLocal { \n  @Override \n  public List<CourseDTO> getCourses() { \n    //get courses are return \n... \n  } \n} \n```", "```java\nimport javax.ejb.EJB; \nimport javax.faces.bean.ManagedBean; \n\n@ManagedBean \npublic class StudentJSFBean { \n  @EJB \n  private StudentLocal student; \n} \n```", "```java\n\"java:global/<application_name>/<module_name>/<bean_name>![<bean_interface>]\" \n```", "```java\nInitialContext initCtx  = new InitialContext(); \nObject obj = initCtx.lookup(\"jndi_url\"); \n```", "```java\nInitialContext ctx = new InitialContext(); \nStudentLocal student = (StudentLocal) ctx.loopup \n (\"java:app/CourseManagementEJBs/Student\"); \nreturn student.getCourses(id) ; //get courses from Student EJB \n```", "```java\nimport java.util.List; \nimport javax.ejb.Remote; \n\n@Remote \npublic interface StudentRemote { \n  public List<CourseDTO> getCourses(); \n} \n```", "```java\n@Stateful \n@Remote \npublic class Student implements StudentRemote { \n  @Override \n  public List<CourseDTO> getCourses() { \n    //get courses are return \n... \n  } \n} \n```", "```java\nimport javax.ejb.EJB; \nimport javax.faces.bean.ManagedBean; \n\n@ManagedBean \npublic class StudentJSFBean { \n  @EJB \n  private StudentRemote student; \n} \n```", "```java\nProperties jndiProperties = new Properties(); \njndiProperties.setProperty(\"org.omg.CORBA.ORBInitialHost\", \n \"<remote_host>\"); \n//target ORB port. default is 3700 in GlassFish \njndiProperties.setProperty(\"org.omg.CORBA.ORBInitialPort\", \n \"3700\"); \n\nInitialContext ctx = new InitialContext(jndiProperties); \nStudentRemote student = \n (StudentRemote)ctx.lookup(\"java:app/CourseManagementEJBs/Student\"); \nreturn student.getCourses(); \n```", "```java\n@Entity \n@NamedQuery(name=\"Course.findAll\", query=\"SELECT c FROM \n Course c\") \npublic class Course implements Serializable { ...} \n```", "```java\n@Stateless \n@LocalBean \npublic class CourseBean implements CourseBeanRemote { \n    public CourseBean() { \n    } \n} \n```", "```java\n@Remote \npublic interface CourseBeanRemote { \n\n} \n```", "```java\npackage packt.book.jee.eclipse.ch7.dto; \n\npublic class CourseDTO { \n  private int id; \n  private int credits; \n  private String name; \n  public int getId() { \n    return id; \n  } \n  public void setId(int id) { \n    this.id = id; \n  } \n  public int getCredits() { \n    return credits; \n  } \n  public void setCredits(int credits) { \n    this.credits = credits; \n  } \n  public String getName() { \n    return name; \n  } \n  public void setName(String name) { \n    this.name = name; \n  } \n} \n```", "```java\npublic List<CourseDTO> getCourses(); \n```", "```java\n@PersistenceContext \nEntityManager entityManager; \n```", "```java\npublic List<Course> getCourseEntities() { \n//Use named query created in Course entity using @NameQuery \n annotation.      TypedQuery<Course> courseQuery = \n entityManager.createNamedQuery(\"Course.findAll\", Course.class); \n      return courseQuery.getResultList(); \n} \n```", "```java\n@Stateless \n@LocalBean \npublic class CourseBean implements CourseBeanRemote { \n  @PersistenceContext \n  EntityManager entityManager; \n\n    public CourseBean() { \n    } \n\n    public List<Course> getCourseEntities() { \n      //Use named query created in Course entity using @NameQuery \n       annotation.      TypedQuery<Course> courseQuery = \n entityManager.createNamedQuery(\"Course.findAll\", Course.class); \n      return courseQuery.getResultList(); \n    } \n\n  @Override \n  public List<CourseDTO> getCourses() { \n    //get course entities first \n    List<Course> courseEntities = getCourseEntities(); \n\n    //create list of course DTOs. This is the result we will \n     return \n    List<CourseDTO> courses = new ArrayList<CourseDTO>(); \n\n    for (Course courseEntity : courseEntities) { \n      //Create CourseDTO from Course entity \n      CourseDTO course = new CourseDTO(); \n      course.setId(courseEntity.getId()); \n      course.setName(courseEntity.getName()); \n      course.setCredits(course.getCredits()); \n      courses.add(course); \n    } \n    return courses; \n  } \n} \n```", "```java\n<servlet> \n  <servlet-name>JSFServlet</servlet-name> \n  <servlet-class>javax.faces.webapp.FacesServlet</servlet-class> \n  <load-on-startup>1</load-on-startup> \n</servlet> \n\n<servlet-mapping> \n  <servlet-name>JSFServlet</servlet-name> \n  <url-pattern>*.xhtml</url-pattern> \n</servlet-mapping> \n```", "```java\nimport java.util.List; \nimport javax.ejb.EJB; \nimport javax.faces.bean.ManagedBean; \nimport packt.book.jee.eclipse.ch7.dto.CourseDTO; \nimport packt.book.jee.eclipse.ch7.ejb.CourseBeanRemote; \n\n@ManagedBean(name=\"Course\") \npublic class CourseJSFBean { \n  @EJB \n  CourseBeanRemote courseBean; \n\n  public List<CourseDTO> getCourses() { \n    return courseBean.getCourses(); \n  } \n} \n```", "```java\n<html  \n\n > \n\n<head> \n  <title>Courses</title> \n</head> \n<body> \n  <h2>Courses</h2> \n  <h:dataTable value=\"#{Course.courses}\" var=\"course\"> \n      <h:column> \n      <f:facet name=\"header\">Name</f:facet> \n      #{course.name} \n    </h:column> \n      <h:column> \n      <f:facet name=\"header\">Credits</f:facet> \n      #{course.credits} \n    </h:column> \n  </h:dataTable> \n</body> \n</html> \n```", "```java\n  //@EJB \n  //CourseBeanRemote courseBean; \n\n  @EJB \n  CourseBean courseBean; \n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>javax</groupId> \n      <artifactId>javaee-api</artifactId> \n      <version>8.0</version> \n      <scope>provided</scope> \n    </dependency> \n  </dependencies> \n```", "```java\n@Stateless \n@Remote \npublic class CourseBean implements CourseBeanRemote { \n... \n} \n```", "```java\n@ManagedBean(name=\"Course\") \npublic class CourseJSFBean { \n  @EJB \n  CourseBeanRemote courseBean; \n\n  public List<CourseDTO> getCourses() { \n    return courseBean.getCourses(); \n  } \n} \n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenEJBClient</artifactId> \n      <version>1</version> \n    <type>jar</type> \n    </dependency> \n    <dependency> \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenEJBs</artifactId> \n      <version>1</version> \n      <type>ejb</type> \n    </dependency> \n    <dependency> \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenWebApp</artifactId> \n      <version>1</version> \n      <type>war</type> \n    </dependency> \n  </dependencies> \n```", "```java\n<build> \n  <plugins> \n    <plugin> \n       <groupId>org.apache.maven.plugins</groupId> \n       <artifactId>maven-acr-plugin</artifactId> \n       <version>1.0</version> \n       <extensions>true</extensions> \n    </plugin> \n\n    <plugin> \n      <groupId>org.apache.maven.plugins</groupId> \n      <artifactId>maven-ear-plugin</artifactId> \n      <version>2.10</version> \n      <configuration> \n         <version>6</version> \n      <defaultLibBundleDir>lib</defaultLibBundleDir> \n      <modules> \n      <webModule> \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenWebApp</artifactId> \n      </webModule> \n      <ejbModule> \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenEJBs</artifactId> \n      </ejbModule> \n      < jarModule > \n      <groupId>packt.book.jee.eclipse.ch7.maven</groupId> \n      <artifactId>CourseManagementMavenEJBClient</artifactId> \n      </ jarModule > \n      </modules> \n      </configuration> \n    </plugin> \n    </plugins> \n  </build> \n```", "```java\nProject configuration is not up-to-date with pom.xml. Run Maven->Update Project or use Quick Fix... \n```", "```java\n  <modules> \n    <module>../CourseManagementMavenEAR</module> \n    <module>../CourseManagementMavenEJBClient</module> \n    <module>../CourseManagementMavenEJBs</module> \n    <module>../CourseManagementMavenWebApp</module> \n  </modules> \n```"]