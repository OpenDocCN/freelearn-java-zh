- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Environment and Tools – Frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter describes the development environment and tools that are needed
    for React so that you can start frontend development. In this chapter, we will
    create a simple starter React app by using the Vite frontend tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Visual Studio Code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and running a React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging a React app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following GitHub link will be required: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter07).'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Node.js** is an open-source, JavaScript-based, server-side environment. It
    is available for multiple operating systems, such as Windows, macOS, and Linux,
    and is required to develop React apps.'
  prefs: []
  type: TYPE_NORMAL
- en: The Node.js installation package can be found at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    Download the latest **Long-Term Support** (**LTS**) version for your operating
    system. In this book, we are using the Windows 10 operating system, and you can
    get the Node.js MSI installer for it, which makes installation really straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the installer, you will go through the installation wizard,
    and you can do so using the default settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Node.js installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the installation is complete, we can check that everything proceeded correctly.
    Open PowerShell, or whatever terminal you are using, and type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands should show you the installed versions of Node.js and `npm`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Node.js and npm versions'
  prefs: []
  type: TYPE_NORMAL
- en: '`npm` comes with the Node.js installation and is a package manager for JavaScript.
    We will use this a lot in the following chapters when we install different Node.js
    modules in our React app.'
  prefs: []
  type: TYPE_NORMAL
- en: There is another package manager called **Yarn** that you can use as well, but
    we will use `npm` because it comes with the Node.js installation. Yarn has some
    advantages, such as better overall performance due to its caching mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will install a code editor.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Visual Studio Code** (**VS Code**) is an open-source code editor for multiple
    programming languages. It was developed by Microsoft. There are many different
    code editors available, such as Atom and Sublime, and you can use something other
    than VS Code if you are familiar with it.'
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse, which we used for backend development, is optimized for Java development.
    VS Code can also be used for Java and Spring Boot development, so it is possible
    to use only one editor for both backend and frontend development if you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code is available for Windows, macOS, and Linux, and you can download it
    from [https://code.visualstudio.com/](https://code.visualstudio.com/). Installation
    for Windows is done with the MSI installer, and you can execute the installation
    with default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the workbench for VS Code. On the left-hand
    side is the activity bar, which you can use to navigate between different views.
    Next to the activity bar is a sidebar that contains different views, such as the
    project file explorer. The editor takes up the rest of the workbench:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – VS Code workbench ](img/B19818_07_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: VS Code workbench'
  prefs: []
  type: TYPE_NORMAL
- en: VS Code provides an integrated terminal that you can use to create and run React
    apps. The terminal can be found in the **View | Terminal** menu. You can use this
    in later chapters when we create more React apps.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a lot of extensions available for different programming languages
    and frameworks. If you open **Extensions** from the activity bar, you can search
    for different ones.
  prefs: []
  type: TYPE_NORMAL
- en: One really useful extension for React development is **Reactjs code snippets**,
    which we recommend installing. It has multiple code snippets available for React.js
    apps, which makes the development process faster. VS Code code snippet extensions
    can significantly enhance your workflow by saving time, promoting consistency,
    and reducing errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the Reactjs code snippets installation page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: React js code snippets'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **ESLint** extension helps you find typos and syntax errors quickly and
    makes formatting source code easier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: ESLint extension'
  prefs: []
  type: TYPE_NORMAL
- en: ESLint ([https://eslint.org/](https://eslint.org/)) is an open-source linter
    for JavaScript, and it helps you to find and fix problems in your source code.
    ESLint can highlight errors and warnings directly within the VS Code editor to
    help you identify and fix issues as you write code. Errors and warnings are shown
    in red or yellow underlines, and if you hover over these lines, you can see information
    about the specific error or warning. VS Code also provides a **Problems** panel
    that shows all ESLint errors and warnings. ESLint is flexible, and it can be configured
    using the `.eslintrc` file. You can define which rules are enabled and at what
    error level.
  prefs: []
  type: TYPE_NORMAL
- en: '**Prettier** is a code formatter. With the Prettier extension, you can get
    automatic code formatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: Prettier extension'
  prefs: []
  type: TYPE_NORMAL
- en: You can set it in VS Code so that code is formatted automatically after you
    save it, by going to **Settings** from the **File | Preferences** menu and then
    searching for **Format On Save**.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few examples of the great extensions you can get for VS Code.
    We recommend you install all of them and test them out yourself.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create our first React app and learn how to run
    and modify it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and running a React app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have Node.js and our code editor installed, we are ready to create
    our first React.js app. We will use the **Vite** frontend tool ([https://vitejs.dev/](https://vitejs.dev/))
    for this. There are excellent React frameworks available, like Next.js or Remix,
    that can be used as well, but Vite is a good option to learn React basics. Vite
    provides a really fast development server, and you don’t have to do any complex
    configuration to start coding.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, **Create React App** (**CRA**) was the most popular tool for creating
    React projects, but its usage has decreased, and it is no longer recommended by
    official documentation. Vite offers many advantages over CRA (such as its faster
    development server).
  prefs: []
  type: TYPE_NORMAL
- en: We are using Vite version 4.3 in this book. You should verify the commands against
    the Vite documentation if you are using some other version. Also, check the Node.js
    version requirements, and upgrade your Node.js installation if your package manager
    warns you about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps you need to follow to make your first React project using
    Vite:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PowerShell, or another terminal that you are using, and move to a folder
    where you want to create your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following `npm` command, which uses the latest version of Vite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the same Vite major version that we are using in this book, you can
    also specify the Vite version in the command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The command starts the project creation wizard. If this is the first time you
    are creating a Vite project, you will get a message prompting you to install the
    `create-vite` package. Press *y* to proceed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the first phase, type your project name – in this case, `myapp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_07_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: Project name'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you will select a **framework**. In this phase, select the **React**
    framework. Note that Vite isn’t tied to React and can be used to bootstrap projects
    in lots of different frontend frameworks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_07_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.8: Framework selection'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final step, you will select a **variant**. We’ll first learn the basics
    of React with JavaScript and later move on to TypeScript. So, in this phase, we
    will select **JavaScript**:![](img/B19818_07_09.png)Figure 7.9: Project variant'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SWC** (**Speedy Web Compiler**) is a fast JavaScript and TypeScript compiler
    written in Rust. It is a faster alternative to Babel, which is normally used.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once the app has been created, move into your app folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, install dependencies using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, run your app using the following command, which starts the app in
    development mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you should see the following message in your terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19818_07_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 7.10: Run your project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open your browser and navigate to the URL that is shown in your terminal after
    the **Local:** text (in the example, it is `http://localhost:5173/`, but it might
    be different in your case):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_07_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.11: React app'
  prefs: []
  type: TYPE_NORMAL
- en: You can stop the development server by pressing *q* in your terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To build a minified version of your app for production, you can use the `npm
    run build` command, which builds your app in the build folder. We will look more
    closely at deployment in *Chapter 17*, *Deploying Your Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying a React app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will learn how to modify the React app that we created using Vite.
    We will use VS Code, which we installed earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your React project folder with VS Code by selecting **File | Open folder**.
    You should see the app’s structure in the file explorer. The most important folder
    in this phase is the `src` folder, which contains the JavaScript source code:![](img/B19818_07_12.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 7.12: Project structure'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also open VS Code by typing the `code .` command into the terminal.
    This command opens VS Code and the folder where you are located.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `App.jsx` file from the `src` folder in the code editor. Modify the
    text inside the `<h1>` element to `Hello React` and save the file. You don’t need
    to know anything else about this file at the moment. We will go deeper into this
    topic in *Chapter 8*, *Getting Started with React*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_07_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.13: App.js code'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you look at the browser, you should immediately see that the header
    text has changed. Vite provides the **Hot Module Replacement** (**HMR**) feature,
    which updates a React component automatically when you modify its source code
    or styles in your React project, without the need for manual page refreshing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_07_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.14: Modified React app'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a React app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To debug React apps, we should also install **React Developer Tools**, which
    is available for Chrome, Firefox, and Edge browsers. Chrome plugins can be installed
    from the Chrome Web Store ([https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions)),
    while Firefox add-ons can be installed from the Firefox add-ons site ([https://addons.mozilla.org](https://addons.mozilla.org)).
    After you have installed React Developer Tools, you should see a new **Components**
    tab in your browser’s developer tools once you navigate to your React app.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can open the developer tools by pressing *Ctrl* + *Shift* + *I* (or *F12*)
    in the Chrome browser. The following screenshot shows the developer tools in the
    browser. The **Components** tab shows a visual representation of the React component
    tree, and you can use the search bar to find components. If you select a component
    in the component tree, you will see more specific information about it in the
    right-hand panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_07_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.15: React Developer Tools'
  prefs: []
  type: TYPE_NORMAL
- en: We will see that the browser’s developer tools are really important, and it
    is useful to open them during development so that you can see errors and warnings
    immediately. The **Console** in developer tools is where you can log messages,
    warnings, and errors from your JavaScript or TypeScript code. The **Network**
    tab shows all the requests made by a web page, including their status codes, response
    times, and content. This is good for optimizing the performance of your web app
    and diagnosing network-related issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed everything that is needed to start our frontend
    development with React. First, we installed Node.js and the VS Code editor. Then,
    we used Vite to create our first React app. Finally, we ran the app, demonstrated
    how to modify it, and introduced debugging tools. We will continue to use Vite
    in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will familiarize ourselves with the basics of React
    programming.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are Node.js and `npm`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install Node.js?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you create a React app with Vite?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you run a React app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you make basic modifications to your app?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some useful resources that will extend the knowledge we have learned
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '*React 18 Design Patterns and Best Practices*, by Carlos Santana Roldán ([https://www.packtpub.com/product/react-18-design-patterns-and-best-practices-fourth-edition/9781803233109](https://www.packtpub.com/product/react-18-design-patterns-and-best-practices-fourth-edition/9781803233109))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*JavaScript in Visual Studio Code*, by Microsoft ([https://code.visualstudio.com/docs/languages/javascript](https://code.visualstudio.com/docs/languages/javascript))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*TypeScript in Visual Studio Code*, by Microsoft ([https://code.visualstudio.com/docs/languages/typescript](https://code.visualstudio.com/docs/languages/typescript))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
