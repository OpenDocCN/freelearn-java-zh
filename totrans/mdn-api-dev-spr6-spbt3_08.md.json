["```java\ntestImplementation('org.springframework.boot:spring-boot-starter-test')\n```", "```java\n@ExtendWith(MockitoExtension.class)public class ShipmentControllerTest {\n  private static final String id =\n      \"a1b9b31d-e73c-4112-af7c-b68530f38222\";\n  private MockMvc mockMvc;\n  @Mock\n  private ShipmentService service;\n  @Mock\n  private ShipmentRepresentationModelAssembler assembler;\n  @Mock\n  private MessageSource msgSource;\n  @InjectMocks\n  private ShipmentController controller;\n  private ShipmentEntity entity;\n  private Shipment model = new Shipment();\n  private JacksonTester<List<Shipment>> shipmentTester;\n  // continue …\n```", "```java\ncontroller = new ShipmentController(service, assembler);\n```", "```java\n// continue ShipmentControllerTest.java@BeforeEach\npublic void setup() {\n  ObjectMapper mapper = new AppConfig().objectMapper();\n  JacksonTester.initFields(this, mapper);\n  MappingJackson2HttpMessageConverter mappingConverter =\n    new MappingJackson2HttpMessageConverter();\n  mappingConverter.setObjectMapper(mapper);\n  mockMvc = MockMvcBuilders.standaloneSetup(controller)\n      .setControllerAdvice(new RestApiErrorHandler\n        (msgSource))\n      .setMessageConverters(mappingConverter).build();\n  final Instant now = Instant.now();\n  entity = // entity initialization code\n  BeanUtils.copyProperties(entity, model);\n  // extra model property initialization\n}\n```", "```java\n@Test@DisplayName(\"returns shipments by given order ID\")\npublic void testGetShipmentByOrderId() throws Exception {\n  // given\n  given(service.getShipmentByOrderId(id))\n      .willReturn(List.of(entity));\n  given(assembler.toListModel(List.of(entity)))\n      .willReturn(List.of(model));\n  // when\n  MockHttpServletResponse response = mockMvc.perform(\n      get(\"/api/v1/shipping/\" + id)\n          .contentType(MediaType.APPLICATION_JSON)\n          .accept(MediaType.APPLICATION_JSON))\n      .andDo(print())\n      .andReturn().getResponse();\n  // then\n  assertThat(response.getStatus())\n       .isEqualTo(HttpStatus.OK.value());\n  assertThat(response.getContentAsString())\n      .isEqualTo(shipmentTester.write(\n          List.of(model)).getJson());\n}\n```", "```java\nmockMvc = MockMvcBuilders.standaloneSetup(controller)    .setControllerAdvice(new RestApiErrorHandler\n      (msgSource))\n    .setMessageConverters(mappingJackson2HttpMessageConverter)\n    .alwaysDo(print())\n    .build();\n```", "```java\n@Test@DisplayName(\"returns address by given existing ID\")\npublic void getAddressByOrderIdWhenExists() throws Exception {\n  given(service.getAddressesById(id))\n     .willReturn(Optional.of(entity));\n  // when\n  ResultActions result = mockMvc.perform(\n      get(\"/api/v1/addresses/a1b9b31d-e73c-4112-af7c-\n            b68530f38222\")\n          .contentType(MediaType.APPLICATION_JSON)\n          .accept(MediaType.APPLICATION_JSON));\n  // then\n  result.andExpect(status().isOk());\n  verifyJson(result);\n}\n```", "```java\n// AddressControllerTest.javaprivate void verifyJson(final ResultActions result)\n    throws Exception {\n  final String BASE_PATH = \"http://localhost\";\n  result\n      .andExpect(jsonPath(\"id\",\n          is(entity.getId().toString())))\n      .andExpect(jsonPath(\"number\", is\n          (entity.getNumber())))\n      .andExpect(jsonPath(\"residency\",\n          is(entity.getResidency())))\n      .andExpect(jsonPath(\"street\", is\n          (entity.getStreet())))\n      .andExpect(jsonPath(\"city\", is(entity.getCity())))\n      .andExpect(jsonPath(\"state\", is(entity.getState())))\n      .andExpect(jsonPath(\"country\", is\n          (entity.getCountry())))\n      .andExpect(jsonPath(\"pincode\", is\n           (entity.getPincode())))\n      .andExpect(jsonPath(\"links[0].rel\", is(\"self\")))\n      .andExpect(jsonPath(\"links[0].href\",\n          is(BASE_PATH + \"/\" + entity.getId())))\n      .andExpect(jsonPath(\"links[1].rel\", is(\"self\")))\n      .andExpect(jsonPath(\"links[1].href\",\n          is(BASE_PATH + URI + \"/\" + entity.getId())));\n}\n```", "```java\n@Test@DisplayName(\"returns an AddressEntity when private method\n    toEntity() is called with Address model\")\npublic void convertModelToEntity() {\n // given\n AddressServiceImpl srvc = new AddressServiceImpl\n    (repository);\n // when\n AddressEntity e = ReflectionTestUtils.invokeMethod(\n    srvc, \"toEntity\", addAddressReq);\n // then\n then(e).as(\"Check address entity is returned & not null\")\n     .isNotNull();\n then(e.getNumber()).as(\"Check house/flat number is set\")\n     .isEqualTo(entity.getNumber());\n then(e.getResidency()).as(\"Check residency is set\")\n     .isEqualTo(entity.getResidency());\n then(e.getStreet()).as(\"Check street is set\")\n     .isEqualTo(entity.getStreet());\n then(e.getCity()).as(\"Check city is set\")\n     .isEqualTo(entity.getCity());\n then(e.getState()).as(\"Check state is set\")\n     .isEqualTo(entity.getState());\n then(e.getCountry()).as(\"Check country is set\")\n     .isEqualTo(entity.getCountry());\n then(e.getPincode()).as(\"Check pincode is set\")\n     .isEqualTo(entity.getPincode());\n}\n```", "```java\nList linkedList = new LinkedList();List spyLinkedList = spy(linkedList);\ndoNothing().when(spyLinkedList).clear();\n```", "```java\n// AddressServiceTest.java@Test\n@DisplayName(\"delete address by given existing id\")\npublic void deleteAddressesByIdWhenExists() {\n  given(repository.findById(UUID.fromString(nonExistId)))\n     .willReturn(Optional.of(entity));\n  willDoNothing().given(repository)\n     .deleteById(UUID.fromString(nonExistId));\n  // when\n  service.deleteAddressesById(nonExistId);\n  // then\n  verify(repository, times(1))\n     .findById(UUID.fromString(nonExistId));\n  verify(repository, times(1))\n     .deleteById(UUID.fromString(nonExistId));\n}\n```", "```java\n// AddressServiceTest.java@Test\n@DisplayName(\"delete address by given non-existing id,\n    should throw ResourceNotFoundException\")\npublic void deleteAddressesByNonExistId() throws Exception {\n  given(repository.findById(UUID.fromString(nonExistId)))\n      .willReturn(Optional.empty())\n      .willThrow(new ResourceNotFoundException(String.format(\n  \"No Address found with id %s.\", nonExistId)));\n  // when\n  try { service.deleteAddressesById(nonExistId);\n  } catch (Exception ex) {\n  // then\n    assertThat(ex)\n      .isInstanceOf(ResourceNotFoundException.class);\n    assertThat(ex.getMessage())\n      .contains(\"No Address found with id \" + nonExistId);\n  }\n  // then\n  verify(repository, times(1))\n      .findById(UUID.fromString(nonExistId));\n  verify(repository, times(0))\n      .deleteById(UUID.fromString(nonExistId));\n}\n```", "```java\n$ ./gradlew clean test\n```", "```java\nplugins {    id 'org.springframework.boot' version '3.0.4'\n    id 'io.spring.dependency-management' version '1.1.0'\n    id 'java'\n    id 'org.hidetake.swagger.generator' version '2.19.2'\n    id 'jacoco'\n}\n```", "```java\n// build.gradlejacoco {\n    toolVersion = \"0.8.8\"\n    reportsDirectory = layout.buildDirectory.dir(\n        \"$buildDir/jacoco\")\n}\n```", "```java\n// build.gradlejacocoTestReport {\n    dependsOn test\n    afterEvaluate {\n        classDirectories.setFrom(\n          files(classDirectories.files.collect {\n            fileTree(\n                dir: it,\n                exclude: [\n                    'com/packt/modern/api/model/*',\n                    'com/packt/modern/api/*Api.*',\n                    'com/packt/modern/api/security\n                        /UNUSED/*',\n                ])\n        }))\n    }\n}\n```", "```java\n// build.gradlejacocoTestCoverageVerification {\n    violationRules {\n        rule {\n            limit { minimum = 0.9 }\n        }\n    }\n}\n```", "```java\ntest {    useJUnitPlatform()\n    finalizedBy(jacocoTestReport)\n}\n```", "```java\n$ ./gradlew clean build\n```", "```java\nsourceSets {    integrationTest {\n        java {\n            compileClasspath += main.output + test.output\n            runtimeClasspath += main.output + test.output\n            srcDir file('src/integration/java')\n        }\n        resources.srcDir file('src/integration/resources')\n    }\n}\n```", "```java\nconfigurations {    integrationTestImplementation.extendsFrom\n         testImplementation\n    integrationTestRuntime.extendsFrom testRuntime\n}\n```", "```java\ntasks.register('integrationTest', Test) {    useJUnitPlatform()\n    description = 'Runs the integration tests.'\n    group = 'verification'\n    testClassesDirs = sourceSets.integrationTest\n         .output.classesDirs\n    classpath = sourceSets.integrationTest.runtimeClasspath\n}\ncheck.dependsOn integrationTest\nintegrationTest.mustRunAfter test\n```", "```java\npublic class TestUtils {  private static ObjectMapper objectMapper;\n  public static boolean isTokenExpired(String jwt)\n      throws JsonProcessingException {\n    var encodedPayload = jwt.split(\"\\\\.\")[1];\n    var payload = new String(Base64.getDecoder()\n        .decode(encodedPayload));\n    JsonNode parent = new ObjectMapper().readTree(payload);\n    String expiration = parent.path(\"exp\").asText();\n    Instant expTime = Instant.ofEpochMilli(\n        Long.valueOf(expiration) * 1000);\n    return Instant.now().compareTo(expTime) < 0;\n  }\n  public static ObjectMapper objectMapper() {\n    if (Objects.isNull(objectMapper)) {\n      objectMapper = new AppConfig().objectMapper();\n      objectMapper.configure(DeserializationFeature\n          .ACCEPT_SINGLE_VALUE_AS_ARRAY, true);\n    }\n    return objectMapper;\n  }\n}\n```", "```java\npublic class AuthClient { private final TestRestTemplate restTemplate;\n private final ObjectMapper objectMapper;\n public AuthClient(TestRestTemplate restTemplate,\n     ObjectMapper objectMapper) {\n   this.restTemplate = restTemplate;\n   this.objectMapper = objectMapper;\n }\n public SignedInUser login(String username,\n     String password) {\n   SignInReq signInReq = new SignInReq()\n                     .username(username).password(password);\n   return restTemplate\n      .execute(\"/api/v1/auth/token\",HttpMethod.POST,\n        req -> {\n          objectMapper.writeValue(req.getBody(),\n              signInReq);\n          req.getHeaders().add(HttpHeaders.CONTENT_TYPE,\n                 MediaType.APPLICATION_JSON_VALUE);\n          req.getHeaders().add(HttpHeaders.ACCEPT,\n                 MediaType.APPLICATION_JSON_VALUE);\n        },\n        res -> objectMapper.readValue(res.getBody(),\n            SignedInUser.class)\n      );\n   }\n}\n```", "```java\n@ExtendWith(SpringExtension.class)@SpringBootTest( webEnvironment = WebEnvironment.RANDOM_PORT,\n    properties = \"spring.flyway.clean-disabled=false\")\n@TestPropertySource(locations =\n    \"classpath:application-it.properties\")\n@TestMethodOrder(OrderAnnotation.class)\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class AddressControllerIT {\n  private static ObjectMapper objectMapper;\n  private static AuthClient authClient;\n  private static SignedInUser signedInUser;\n  private static Address address;\n  private static String idOfAddressToBeRemoved;\n  @Autowired\n  private AddressRepository repository;\n  @Autowired\n  private TestRestTemplate restTemplate;\n  @BeforeAll\n  public static void init(@Autowired Flyway flyway) {\n    objectMapper = TestUtils.objectMapper();\n    address = new Address().id(\n     \"a731fda1-aaad-42ea-bdbc-a27eeebe2cc0\").\n       number(\"9I-999\")\n     .residency(\"Fraser Suites Le Claridge\")\n     .street(\"Champs-Elysees\").city(\"Paris\").state(\n       \"Île-de-France\").country(\"France\").pincode(\"75008\");\n    flyway.clean();\n    flyway.migrate();\n  }\n  @BeforeEach\n  public void setup(TestInfo info)\n      throws JsonProcessingException {\n    if (Objects.isNull(signedInUser) ||\n        Strings.isNullOrEmpty(signedInUser.getAccessToken())\n        || isTokenExpired(signedInUser.getAccessToken())) {\n      authClient = new AuthClient\n        (restTemplate, objectMapper);\n      if (if (info.getTags().contains(\"NonAdminUser\")) {\n        signedInUser = authClient.login(\"scott\", \"tiger\");\n      } else {\n        signedInUser = authClient.login(\"scott2\", \"tiger\");\n      }\n    }\n  }\n```", "```java\n@Test@DisplayName(\"returns all addresses\")\n@Order(6)\npublic void getAllAddress() throws IOException {\n  // given\n  MultiValueMap<String, String> headers =\n       new LinkedMultiValueMap<>();\n  headers.add(HttpHeaders.CONTENT_TYPE,\n                           MediaType.APPLICATION_JSON_VALUE);\n  headers.add(HttpHeaders.ACCEPT,\n                           MediaType.APPLICATION_JSON_VALUE);\n  headers.add(\"Authorization\", \"Bearer \" +\n      signedInUser.getAccessToken());\n  // when\n  ResponseEntity<JsonNode> addressResponseEntity =\n    restTemplate.exchange(\"/api/v1/addresses\",\n       HttpMethod.GET,\n          new HttpEntity<>(headers), JsonNode.class);\n  // then\n  assertThat(addressResponseEntity.getStatusCode())\n    .isEqualTo(HttpStatus.OK);\n  JsonNode n = addressResponseEntity.getBody();\n  List<Address> addressFromResponse = objectMapper\n   .convertValue(n,new TypeReference\n      <ArrayList<Address>>(){});\n  assertThat(addressFromResponse).hasSizeGreaterThan(0);\n  assertThat(addressFromResponse.get(0))\n    .hasFieldOrProperty(\"links\");\n  assertThat(addressFromResponse.get(0))\n    .isInstanceOf(Address.class);\n}\n```", "```java\n $ gradlew clean integrationTest # or\n $ gradlew clean build\n```"]