["```java\n    $ tar -xzf kafka_2.12-2.8.1.tgz\n    $ cd kafka_2.12-2.8.1\n    ```", "```java\n    $ bin/zookeeper-server-start.sh config/zookeeper.properties\n    ```", "```java\n    $ bin/kafka-server-start.sh config/server.properties\n    ```", "```java\n    $ bin/kafka-topics.sh --create --topic landingTopic1 --bootstrap-server localhost:9092\n    $ bin/kafka-topics.sh --create --topic enrichedTopic1 --bootstrap-server localhost:9092\n    ```", "```java\n    $ bin/kafka-topics.sh --describe --bootstrap-server localhost:9092\n    ```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-jdbc -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```", "```java\n<!-- Kafka dependencies -->\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka</artifactId>\n    <version>2.6.2</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.kafka</groupId>\n    <artifactId>spring-kafka-test</artifactId>\n    <version>2.6.2</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams</artifactId>\n    <version>3.0.0</version>\n</dependency>\n```", "```java\n@SpringBootApplication(exclude = KafkaAutoConfiguration.class)\n@Configuration\npublic class CreditRiskCalculatorApp {\n    public static void main(String[] args) {\n        SpringApplication.run(CreditRiskCalculatorApp.class);\n    }\n. . .\n}\n```", "```java\n@Configuration\n@EnableKafka\n@EnableKafkaStreams\npublic class KStreamConfiguration {\n...\n```", "```java\n@Bean(name = KafkaStreamsDefaultConfiguration.DEFAULT_STREAMS_CONFIG_BEAN_NAME)\npublic KafkaStreamsConfiguration kStreamsConfig(){\n    Map<String,Object> props = new HashMap<>();\n    props.put(StreamsConfig.APPLICATION_ID_CONFIG,appId);\n    props.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,bootstrapServer);\n    props.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass());\n    props.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass());\n    props.put(StreamsConfig.DEFAULT_DESERIALIZATION_EXCEPTION_HANDLER_CLASS_CONFIG, LogAndContinueExceptionHandler.class);\n    return new KafkaStreamsConfiguration(props);\n}\n```", "```java\n@Bean\npublic KStream<String,String> kStream(StreamsBuilder builder){\n    KStream<String,String> kStream = builder.stream(inputTopic);\n    kStream.transform(()->new RiskCalculateTransformer (jdbcTemplate,restTemplate,mlRequestUrl)).to(outTopic);\n    return kStream;\n}\n```", "```java\npublic interface Transformer<K, V, R> {\n    void init(ProcessorContext var1);\n    R transform(K var1, V var2);\n    void close();\n}\n```", "```java\npublic class RiskCalculateTransformer implements Transformer<String,String, KeyValue<String,String>> {\n\n    @Override\n    public void init(ProcessorContext processorContext) {\n     ...\n    }\n    @Override\n    public KeyValue<String, String> transform(String key, String value) {\n        ...\n    }\n\n    @Override\n    public void close() {\n     ...\n    }\n}\n```", "```java\n@Override\npublic KeyValue<String, String> transform(String key, String value) {\n    try {\n        ApplicationEvent event = mapper.readValue(value,ApplicationEvent.class);\n        List<CreditRecord> creditRecord = jdbcTemplate.query(String.format(\"select months_balance,status from chapter6.creditrecord where id='%s'\",event.getId()),new BeanPropertyRowMapper<CreditRecord>(CreditRecord.class));\n        MLRequest mlRequest = new MLRequest();\n        mlRequest.setAmtIncomeTotal(event.getAmtIncomeTotal());\n        ...\n        HttpEntity<MLRequest> request = new HttpEntity<>(mlRequest);\n        ResponseEntity<RiskScoreResponse> response = restTemplate.exchange(mlRequestUrl, HttpMethod.POST, request, RiskScoreResponse.class);\n        if(response.getStatusCode()== HttpStatus.OK){\n            EnrichedApplication enrichedApplicationEvent = new EnrichedApplication();\n            enrichedApplicationEvent.setApplicationforEnrichedApplication(event);\n            enrichedApplicationEvent.setRiskScore(response.getBody().getScore());\n            return KeyValue.pair(key,mapper.writeValueAsString(enrichedApplicationEvent));\n        }else{\n            throw new Exception(\"Unable to generate risk score.Risk REST response - \"+ response.getStatusCode());\n        }\n    } catch (Exception e) {\n        ...\n    }\n    return null;\n}\n```", "```java\n    public class RiskScoreResponse {\n        private int score;\n        public int getScore() {\n            return score;\n        }\n        public void setScore(int score) {\n            this.score = score;\n        }\n    }\n    ```", "```java\n<!-- test dependencies -->\n<dependency>\n    <groupId>org.apache.kafka</groupId>\n    <artifactId>kafka-streams-test-utils</artifactId>\n    <version>3.0.0</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <version>4.12</version>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>org.hamcrest</groupId>\n    <artifactId>hamcrest-core</artifactId>\n    <version>1.3</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@Bean\npublic KStream<String,String> kStream(StreamsBuilder builder){\n    KStream<String, String> kStream = StreamBuilder.INSTANCE.getkStream(builder,inputTopic,outTopic,mlRequestUrl,jdbcTemplate,restTemplate);\n    return kStream;\n}\n...\npublic enum StreamBuilder {\n    INSTANCE;\n    public KStream<String, String> getkStream(StreamsBuilder builder, String inputTopic,String outTopic, String mlRequestUrl, JdbcTemplate jdbcTemplate, RestTemplate restTemplate) {\n        KStream<String,String> kStream = builder.stream(inputTopic);\n        kStream.transform(()->new RiskCalculateTransformer (jdbcTemplate,restTemplate,mlRequestUrl)).to(outTopic);\n        return kStream;\n    }\n}\n```", "```java\n@Mock\nJdbcTemplate jdbcTemplate;\n...\npublic void creditRiskStreams(){\n   ...\n    List<CreditRecord> creditRecords = new ArrayList<>();\n    CreditRecord creditRecord = new CreditRecord();\n    . . .\n    creditRecords.add(creditRecord);\n    Mockito. lenient().when(jdbcTemplate.query(\"select months_balance,status from chapter6.creditrecord where id='5008804'\",new BeanPropertyRowMapper<CreditRecord>(CreditRecord.class)))\n            .thenReturn(creditRecords);\n      ...\n```", "```java\n@Mock\nprivate RestTemplate restTemplate;\npublic void creditRiskStreams(){\n    ...\n    RiskScoreResponse riskScoreResponse = new RiskScoreResponse();\n    ...\n    Mockito\n            .when(restTemplate.exchange(Mockito.anyString(), HttpMethod.POST, Mockito.any(), RiskScoreResponse.class))\n      .thenReturn(new ResponseEntity(riskScoreResponse, HttpStatus.OK));\n```", "```java\n@Test\npublic void creditRiskStreamsTest() throws JsonProcessingException {\n    //test input and outputTopic\n    String inputTopicName = \"testInputTopic\";\n    String outputTopicName = \"testOutputTopic\";\n    ...\n   StreamsBuilder builder = new StreamsBuilder();\nStreamBuilder.INSTANCE.getkStream(builder,inputTopicName,outputTopicName,\"any url\",jdbcTemplate,restTemplate);\nTopology testTopology = builder.build();\n  ...\n```", "```java\npublic class CreditRiskCalculatorTests {\n    private final Properties config;\npublic CreditRiskCalculatorTests() {\n    config = new Properties();\n    config.setProperty(StreamsConfig.APPLICATION_ID_CONFIG, \"testApp\");\n    config.setProperty(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, \"test:1234\");\n    config.setProperty(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n    config.setProperty(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass().getName());\n}\n. . .\n@Test\npublic void creditRiskStreamsTest() throws JsonProcessingException {\n. . .\nTopologyTestDriver testDriver = new TopologyTestDriver(testTopology,config);\nTestInputTopic<String,String> inputTopic = testDriver.createInputTopic(inputTopicName, Serdes.String().serializer(), Serdes.String().serializer());\nTestOutputTopic<String,String> outputTopic = testDriver.createOutputTopic(outputTopicName, Serdes.String().deserializer(), Serdes.String().deserializer());\n. . .\n```", "```java\ninputTopic.pipeInput(inputPayload);\n```", "```java\nassertEquals(mapper.readTree(outputTopic.readValue()), mapper.readTree(\"{ \\\"id\\\": \\\"5008804\\\", \\\"genderCode\\\": \\\"M\\\", \\\"flagOwnCar\\\": \\\"Y\\\", \\\"flagOwnRealty\\\": \\\"Y\\\", \\\"cntChildren\\\": 0, \\\"amtIncomeTotal\\\": 427500.0, \\\"nameIncomeType\\\": \\\"Working\\\", \\\"nameEducationType\\\": \\\"Higher education\\\", \\\"nameFamilyStatus\\\": \\\"Civil marriage\\\", \\\"nameHousingType\\\": \\\"Rented apartment\\\", \\\"daysBirth\\\": -12005, \\\"daysEmployed\\\": -4542, \\\"flagMobil\\\": 1, \\\"flagWorkPhone\\\": 1, \\\"flagPhone\\\": 0, \\\"flagEmail\\\": 0, \\\"occupationType\\\": \\\"\\\", \\\"cntFamMembers\\\": 2 , \\\"riskScore\\\": 3.0}\"));\n```", "```java\nspring:\n  datasource:\n    url: jdbc:postgresql://localhost:5432/database\n    username: postgres\n    driverClassName: org.postgresql.Driver\nriskcalc:\n  bootstrap-servers: localhost:9092\n  appId: groupId1\n  inputTopic: landingTopic1\n  outTopic: enrichedTopic1\n  mlRequestUrl: \"http://localhost:8081/riskgenerate/score\"\n```", "```java\n    .. .\n    plugin.path=/<full path of Kafka installation root>/plugins\n    ```", "```java\nname=mongo-sink\ntopics=enrichedTopic1\nconnector.class=com.mongodb.kafka.connect.MongoSinkConnector\ntasks.max=1\n# converter configs\nkey.converter=org.apache.kafka.connect.storage.StringConverter\nvalue.converter=org.apache.kafka.connect.json.JsonConverter\nkey.converter.schemas.enable=false\nvalue.converter.schemas.enable=false\n...\n```", "```java\n# Specific global MongoDB Sink Connector configuration\nconnection.uri=mongodb+srv://username:password@cluster0.ipguv.mongodb.net/CRRD?retryWrites=true&w=majority\ndatabase=CRRD\ncollection=newloanrequest\nmax.num.retries=1\nretries.defer.timeout=5000\n```", "```java\ndocument.id.strategy=com.mongodb.kafka.connect.sink.processor.id.strategy.PartialValueStrategy\ndocument.id.strategy.partial.value.projection.list=id\ndocument.id.strategy.partial.value.projection.type=AllowList\nwritemodel.strategy=com.mongodb.kafka.connect.sink.writemodel.strategy.ReplaceOneBusinessKeyStrategy\n```", "```java\nbin/connect-standalone.sh config/connect-standalone.properties connect-riskcalc-mongodb-sink.properties\n```", "```java\n    org.apache.kafka.connect.errors.DataException: JsonConverter with schemas.enable requires \"schema\" and \"payload\" fields and may not contain additional fields.\n    ```", "```java\n    errors.tolerance=all\n    errors.deadletterqueue.topic.name=<name of topic to use as dead letter queue>\n    errors.deadletterqueue.context.headers.enable=true\n    ```", "```java\nbin/kafka-console-producer.sh --topic landingTopic1 --bootstrap-server localhost:9092\n```"]