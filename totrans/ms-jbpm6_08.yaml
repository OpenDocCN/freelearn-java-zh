- en: Chapter 8. Integrating jBPM with Enterprise Architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have an enterprise infrastructure in place, now we want to separate and centralize
    the process management to a single component, and of course, our choice is jBPM.
    So, the million dollar question would be "How do we integrate jBPM to the enterprise
    application in place?"
  prefs: []
  type: TYPE_NORMAL
- en: The answer to this question varies according to requirements and how the enterprise
    application is built. The architecture describes how the application is built,
    and from a broader perspective, a set of architecture patterns are used (either
    alone or in combination) as guidelines to model the architecture. This chapter
    focuses on provisions available in jBPM for integrating it with applications that
    follow these architecture patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter starts by discussing the context of enterprise application integration
    and continues to discuss the following in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating jBPM into a JEE-based application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating jBPM into a service-oriented architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating jBPM into an event-driven architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting the context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'System integration of a software component to an existing software architecture
    indicates that we should provide two windows (interfaces), listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: To access services provided by the new component. In case of jBPM, it is represented
    by various services provided by jBPM, for example, the process runtime provision
    for managing the life cycle of a business process. JBPM exposes these services
    as APIs of its core engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To enable jBPM to access the services provided by other components in the application
    architecture. The extension points that JBPM provides for integration with external
    components are the workitem handlers. We can create handlers and write the logic
    for accessing the external components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following figure depicts this context:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the context](img/9578OS_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Services provided by jBPM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in the previous section, one of the critical part of system
    integration with jBPM is the ability to access the features of jBPM. JBPM provides
    an application programming interface to access these features. This API can be
    directly invoked within the same JVM, and if needed to be accessed from outside
    the system boundary, it has to be wrapped and provided as a remotely accessible
    service. For this, we have an array of options, right from an **Enterprise JavaBeans**
    (**EJB**) remote interface to REST-based web services. Each of these will be detailed
    in the subsequent sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the services provided by jBPM:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Definition service**: This helps to define a process and analyze its content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployment service**: This helps to deploy a business process and the associated
    artifacts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process service**: This helps to start a process instance from the process
    definitions, manage the life cycle of the instance, and interact with them using
    signals'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User task service**: This helps to manage the human task life cycle'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime data service**: This helps to get the details of the data during
    jBPM runtime regarding process, process instance, tasks, and audit trails'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each service is detailed in the following section with (important) operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.jbpm.services.api.DefinitionService`: This service helps to define a process
    from the BPMN text and provides operations to analyze a business process definition:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation | Operation signature | Description |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `buildProcessDefinition` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Builds the process definition from the given process definition content (`bpmn2Content`)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `getReusableSubProcesses` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Gets the process identifiers of the reusable subprocesses inside a process
    definition |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `getProcess Variables` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Retrieves the name and type of all process variables in a business process
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `getServiceTasks` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Gets the identifiers of all service tasks associated in a business process
    definition |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `getTasks Definitions` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Retrieves all the tasks defined in the business process |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '`org.jbpm.services.api.DeploymentService`: This service helps to deploy and
    manage an application deployment unit:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation | Operation signature |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `deploy` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `undeploy` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `activate` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `deactivate` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `IsDeployed` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`org.jbpm.services.api.ProcessService`: This process service is used to manage
    the life cycle and to interact with a started process instance:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation | Operation signature |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `startProcess` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `startProcess` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `abortProcessInstance` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `abortProcessInstances` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `signalProcessInstance` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `signalProcessInstances` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `completeWorkItem` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `abortWorkItem` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`org.jbpm.services.api.UserTaskService`: This service helps to perform life
    cycle management operations of a user task:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation | Operation signature |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `activate` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `claim` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Complete` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Delegate` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `exit` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `fail` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `Forward` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `release` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `resume` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `skip` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `start` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `stop` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`org.jbpm.services.api.RuntimeDataService`: This API is used to retrieve information
    about the jBPM runtime including the data of process instances, tasks, and audit
    logs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| Operation | Operation signature |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| `getProcesses` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `getProcessInstances` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `getProcessInstance FullHistory` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `getVariableHistory` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `getTaskEvents` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| `getTasksOwned` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '|'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creating custom workitem handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order for jBPM to access services of other components in the application,
    we can use the workitem handler extension point provided by jBPM. Workitem handlers
    are used to specify domain-specific services to a BPMN activity. There are several
    inbuilt generic workitem handlers prebuilt in jBPM.
  prefs: []
  type: TYPE_NORMAL
- en: 'For creating a workitem handler, we have to implement the `org.kie.runtime.instance.WorkItemHandler`
    interface. This interface holds two methods to be implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WorkItemManager.completeWorkItem(long workItemId, Map<String, Object> results)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WorkItemManager.abortWorkItem(long workItemId)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A custom workitem has to be registered to the engine by using the workitem
    manager. For example, for registering a customer task, we can use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In conclusion, we have discussed the provisions available in jBPM for integrating
    it with generic software architecture. In the following sections, we will discuss
    how to integrate jBPM into widely used enterprise architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with JEE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java Enterprise Edition provides an API and a runtime environment for developing
    and deploying enterprise applications. Further, EJB defines a set of lightweight
    APIs that can be used to build applications and leverage capabilities such as
    transactions, remote procedure calls, concurrency control, and access control.
  prefs: []
  type: TYPE_NORMAL
- en: 'EJB can be accessed in two modes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Remote interface**: This is where the component that wants to access the
    EJB is not packed together with jBPM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local interface**: This is where the component that wants to access the EJB
    is packed together with a jBPM service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JBPM provides out-of-the-box support for JEE integrations. It provides EJB remote
    and local interfaces for accessing the above-listed services.
  prefs: []
  type: TYPE_NORMAL
- en: EJB remote interfaces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The EJB remote interfaces are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Service name | EJB remote service class |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Definition service |'
  prefs: []
  type: TYPE_TB
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Deployment service |'
  prefs: []
  type: TYPE_TB
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Process service |'
  prefs: []
  type: TYPE_TB
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| Runtime data service |'
  prefs: []
  type: TYPE_TB
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| User task service |'
  prefs: []
  type: TYPE_TB
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: These remote services can be accessed from other Java applications. First, we
    need to access the `ejb` remote interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example (specific to the `jboss` application server), the following code
    shows the lookup of the `ProcessService`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: After looking up the service, the service can be accessed seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: The EJB local interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The EJB local interface can be accessed in two ways. One is by using the `javax.ejb.EJB`
    annotation and specifying the enterprise bean''s local business interface name:'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The container will inject the EJB access for the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The other syntactical way to access a local EJB service is by using the JNDI
    lookup and the `javax.naming.InitialContext` interface''s `lookup` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Integrating in SOA and EDA environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first part of this section covers how to integrate jBPM acting as a client
    into external services; [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN
    Constructs*, and [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*, introduced jBPM elements specifically designed to call external
    web services from a process definition: the service task and the WS or the REST
    workitem handlers. The latter are jBPM ready-to-use, configurable components,
    but keep in mind that jBPM gives the user all the tools to develop custom handlers
    so as to perform interactions with generic external services (see [Chapter 7](ch07.html
    "Chapter 7. Customizing and Extending jBPM"), *Customizing and Extending jBPM*).
    The second part of the section will examine how to integrate the jBPM API as a
    server using REST, SOAP, and JMS. We will provide you with two example projects
    (`jbpm-remote-client` and `jbpm-remote-server`) in order to put into action these
    jBPM features.'
  prefs: []
  type: TYPE_NORMAL
- en: We are going to see how to connect to both REST and SOAP services.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating with REST services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before starting a commented step-by-step tour of a jBPM application integrated
    with a REST service, let us review the basics of the support jBPM offers when
    coming to REST integration. The jBPM REST workitem handler (class `org.jbpm.process.workitem.rest.RESTWorkItemHandler`)
    is designed to interact with REST services (both secured and not secured); it
    supports the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Url`: Target resource endpoint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Method`: HTTP method (defaults to `GET`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentType`: Datatype when sending data (required with `POST` and `PUT`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Content`: Data to send (required with `POST` and `PUT`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConnectTimeout`: Connection timeout (defaults to 60 seconds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReadTimeout`: Read timeout (defaults to 60 seconds)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Username`: Authentication username'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Password`: Authentication password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The handler returns an output result that defines the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Result`: The REST service text body response'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Status`: The integer HTTP response code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StatusMsg`: A string description for the operation outcome'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our example application sets up a REST server and starts a process that has
    a REST service task node: the REST node performs an HTTP POST operation passing
    an `Order` instance (as a XML string) to the REST server; the server modifies
    the order''s note and returns the order.'
  prefs: []
  type: TYPE_NORMAL
- en: The REST service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our REST server is started inside the test class (the `RestTest.initializeRestServer`
    method) by using the JAX-RS Apache CXF implementation (the CXF version is 2.7.14,
    check the project `pom.xml` file for dependencies); the initialization code sets
    a JAXB provider in order to support data binding for beans.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please check the Apache CXF documentation for JAX-RS at [http://cxf.apache.org/docs/jax-rs.html](http://cxf.apache.org/docs/jax-rs.html).
  prefs: []
  type: TYPE_NORMAL
- en: The server is set up around a REST resource (the `RestResource` class), which
    defines the available operations through the JAX-RS `jax.ws.rs` package annotations.
  prefs: []
  type: TYPE_NORMAL
- en: The client – REST handler configuration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The example test class method `RestTest.testRestProcess` starts a process instance
    (see the `rest.bpmn2` process definition); the process has a REST task node configured
    with the following mandatory parameters:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Url`: `http://localhost:9998/pizzarestservice/order`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ContentType`: `application/xml`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Content`: `<order><note>my note</note></order>`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Method`: `POST`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The node handler performs the REST call to the `postOrder(Order order)` method
    of the `RestResource` class; the method is annotated with `@Path("/order")`, and
    the XML bean serialization is taken care of, as we said, by JAXB. The REST task
    output variable is mapped back to the process instance and printed by the script
    task.
  prefs: []
  type: TYPE_NORMAL
- en: With the jUnit test class (`TestRest`), you can exercise the REST handler and
    the REST service outside the process definition (the `testPOSTOperation` method).
  prefs: []
  type: TYPE_NORMAL
- en: 'In case the default jBPM REST handler cannot meet your requirements (because
    of serialization constraints, frameworks lock-ins, and so on), it''s important
    to point out that the developer can provide a brand new handler implementation:
    follow the [Chapter 7](ch07.html "Chapter 7. Customizing and Extending jBPM"),
    *Customizing and Extending jBPM*, guidelines describing the workitem handler development
    process. Let us now see how to set up and call a SOAP web service from a process
    definition.'
  prefs: []
  type: TYPE_NORMAL
- en: The SOAP WebService
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'jBPM ships with a specialized `ServiceTaskHandler` (see [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN Constructs*), which features web service
    interactions based on WSDL. The service task is marked as having an implementation
    of the `WebService` type (the task also supports plain Java implementation execution
    through the `Reflection` class). Please check the *Service task* section of [Chapter
    5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*, for additional
    details and a working example description. Our jUnit class (`WsTest`) sets up
    a web service (the `startWebService` method) and then, starts a process that has
    two service task nodes, one calling the web service `addSmallOrder` operation,
    and the other calling the `addLargeOrder` operation: both the operations take
    an `Order` instance as the input and return a Boolean result, which is printed
    by the script task. The service tasks are on different process branches, which
    are taken by the exclusive gateway by evaluating the submitted order''s total
    amount.'
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-WS service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `TestWebService` service is an annotated JAX-WS service; it is started
    from the `WsTest.startWebService` method class, and its endpoint is set to `http://127.0.0.1:9931/testwebservice/order`
    (you can easily configure this in the unit test class). The `http://127.0.0.1:9931/testwebservice/order?WSDL`
    link returns the service WSDL interface. The service exposes the two aforementioned
    methods: `addSmallOrder` and `addLargeOrder`. Let us see how to call our web service
    operation from our process definition.'
  prefs: []
  type: TYPE_NORMAL
- en: The client – process and service task handler configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In order to call the web service operation, we must perform the following steps,
    by editing the process definition and its service task node element:'
  prefs: []
  type: TYPE_NORMAL
- en: Process definition
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Things to be aware of are that we need to import the service WSDL definition.
    In the process definition import section, add the service WSDL location and namespace.
    The WSDL is passed to Apache CXF `JaxWsDynamicClientFactory`, which parses it
    when creating a dynamic web service client.
  prefs: []
  type: TYPE_NORMAL
- en: '![Process definition](img/9578OS_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Service task handler
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The service task handler invokes the web service automatically by setting its
    parameters appropriately; this speeds up the integration process but may fall
    short when developing against service interfaces with complex types since, as
    we have already pointed out, the handler leverages the Apache CXF Dynamic Clients
    pattern. In this case, you are strongly suggested to develop a custom handler
    integrating your web service framework of choice. We set the handler parameters
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementation**: `WSDL`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serviceInterface**: `TestWebService`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**serviceOperation**: `addSmallOrder (addLargeOrder)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `mode` parameter value is left to `SYNC` (default), which translates in
    a blocking operation; when the `ASYNC` mode is set, the handler is forced to perform
    the web service call on a thread, returning the control to the process engine,
    and the workitem is completed as soon as the remote call returns.
  prefs: []
  type: TYPE_NORMAL
- en: The WebServiceWorkItemHandler class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: jBPM offers a web service-oriented alternative to the service task handler with
    the `WebServiceWorkItemHandler` class. This handler improves over the service
    task handler in terms of parameter array handling, web service endpoint setting
    (it accepts the `Endpoint` parameter), and shortcut WSDL location loading (the
    `Url` and `Namespace` parameters instead of having to define the WSDL URL at the
    process definition level). The `serviceInterface` and `serviceOperation` parameters
    are renamed `Interface` and `Operation`, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: jBPM as a remote service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The jBPM platform is offering a number of ready-to-use remote APIs in an effort
    to provide developers with an improved level of flexibility when designing solutions
    that require out-of-the-box jBPM integration. This remote service layer opens
    up a number of possibilities for providing the stakeholders with a flexible, open
    architecture, in order to satisfy and to quickly react to changing application
    requirements, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: A number of external application systems may require to occasionally connect
    to the jBPM runtime in order to check some task or retrieve some process information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The jBPM operations manager may be constrained to perform administration tasks
    by submitting a batch of commands via HTTP only
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'jBPM ships with the following remote service interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '**REST API**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JMS API**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java Remote API**: This API provides the developer with local stubs of the
    `KieSession`, `TaskService`, and `AuditService` core engine services. These service
    stubs of the API methods are wrappers for lower-level REST or JMS API calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SOAP API**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All of these services are exposed by the jBPM KIE workbench, and as such, they
    are available only when the jbpm-console web application is deployed in a container.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The source code for the remote services project is hosted at [https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote](https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote).
  prefs: []
  type: TYPE_NORMAL
- en: 'The required Maven dependency for the remote service client is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Let us now review the main remote service functionalities and how you can access
    them.
  prefs: []
  type: TYPE_NORMAL
- en: The REST API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This API provides functionalities in the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Runtime**: (`/runtime/` path) provides the user with process instance creation,
    process instance querying, and workitem operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**History**: (`/history/` path) provides with auditing data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Task**: (`/task/` path) provides task operation and task query methods'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Deployments**: (`/deployments/` and `/deployment/` path) provides deployments
    management operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For additional details, please check the jBPM user manual reference (*Chapter
    17*, *jBPM Process Definition Language (JPDL)*).
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Upon invocation, the REST service operations check for the basic authentication
    user ID of your current HTTP session. For example, assume that you are performing
    REST operations in an unauthorized session by executing the following code from
    your command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get an HTTP `401 Unauthorized` error (output edited for clarity; it
    may vary):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Kie workbench default security mechanism leverages JAAS; the default configuration,
    for both jBoss WildFly and EAP, is stored in the application server XML configuration
    file (standalone and the like). See [Chapter 4](ch04.html "Chapter 4. Operation
    Management"), *Operation Management*, for user and role configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, set the user ID and password (Workbench Realm) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'This will return the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete jBPM REST reference, please see the jBPM official documentation
    (*Chapter 17*, *Remote API*).
  prefs: []
  type: TYPE_NORMAL
- en: The remote Java API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The remote Java API is a high-level API that uses REST or JMS to interact with
    the remote engine services in order to provide the user with familiar service
    API classes (`TaskService`, `KieSession`, and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Dependencies
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The API depends on the jBoss RESTEasy REST implementation and the HornetQ JMS
    client library. The Maven dependency required to interact with the Remote API
    is, as we have pointed out earlier, the `kie-remote-client` module and the additional
    `kie-remote-common` artifact. Be sure not to have dependencies to the Apache CXF
    framework, which may cause issues with the jBoss RESTEasy framework.
  prefs: []
  type: TYPE_NORMAL
- en: The REST client
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The initialization is done with a builder **fluent** API obtained from `RemoteRuntimeEngineFactory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please see the `jbpm-remote-server` Maven project and its `RestTest` jUnit class
    for a full working example.
  prefs: []
  type: TYPE_NORMAL
- en: Client for jBPM JMS service
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using the JMS Remote API client, we need to add a number of library dependencies,
    notably HornetQ and the jBoss remote client. We are going to see how to configure
    and run a remote client application, which creates a jBPM process instance.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please see the `jbpm-remote-server` Maven project and its `JmsTest` jUnit class
    for a full working example (WildFly 8.1 is required to be up-and-running).
  prefs: []
  type: TYPE_NORMAL
- en: Server JMS configuration
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'WildFly comes with HornetQ as JMS MQ middleware; in order to have JMS to properly
    work, we need to check the jBPM JMS queues are registered with the JNDI service
    and that the user security settings are set. By default, HornetQ will use the
    "other" JAAS security domain, which is the one used by KIE Workbench Realm for
    authentication (recall the `user.properties` and `roles.properties` files). In
    addition, HornetQ defines authorization settings in the following element of the
    WildFly `standalone-full.xml` configuration file (under the messaging subsystem):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Here, we just add the KIE console `admin` role (along the default `guest` role);
    the `admin` role is already configured for JAAS.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to check whether our JMS user is properly configured, open the jBoss management
    console (`http://localhost:9990/console`) and select **Configuration/Subsystems/Messaging/Destinations**
    and select **Default Provider** and **Security Settings** on the top navigation
    bar; you shall view the defined users.
  prefs: []
  type: TYPE_NORMAL
- en: '![Server JMS configuration](img/9578OS_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The WildFly jBPM JMS queue configuration is defined in the `jbpm-console.war\WEB-INF\bpms-jms.xml`
    file; the remotely accessible queues are registered in the `java:jboss/exported`
    JNDI namespace.
  prefs: []
  type: TYPE_NORMAL
- en: To check whether the jBPM JMS queues are correctly bound to JNDI, open the jBoss
    management console (`http://localhost:9990/console`) and select **Runtime/Status/Subsystems/JNDI
    View**; here, you shall view the **KIE.AUDIT**, **KIE.SESSION**, **KIE.RESPONSE**,
    and **KIE.TASK** queues. Here, you should also have `RemoteConnectionFactory`
    listed; this factory allows for remote connection to the jBoss JNDI namespaces
    (we are going to see this in a moment).
  prefs: []
  type: TYPE_NORMAL
- en: '![Server JMS configuration](img/9578OS_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the WildFly messaging security configuration, please refer to [https://docs.jboss.org/author/display/WFLY8/Messaging+configuration](https://docs.jboss.org/author/display/WFLY8/Messaging+configuration).
    For the official HornetQ reference, please see the latest documentation at [http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html](http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html).
  prefs: []
  type: TYPE_NORMAL
- en: JMS client implementation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To set up a remote JMS client connection, we use the same approach that we used
    for the REST client; we configure a specialized builder, provided by the good
    old `RemoteRuntimeEngineFactory`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Please see the `jbpm-remote-server` Maven project and its `JmsTest` jUnit class
    for the full working example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'We get the factory from the builder and the engine from the factory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we get the service classes from the engine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to make the jBPM remote client resolve the remote jBPM queues, we
    need to configure the jBoss JNDI provider URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: WildFly utilizes an HTTP upgrade and features port multiplexing for nearly all
    of its protocols. The jBoss remote JNDI historically listened on port 4447, but
    is now, on port 8080.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a complete WildFly reference, please see [https://docs.jboss.org/author/display/WFLY8/Documentation](https://docs.jboss.org/author/display/WFLY8/Documentation).
  prefs: []
  type: TYPE_NORMAL
- en: The SOAP API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The jBPM workbench features additional interoperability by exposing a SOAP service
    as described by the `/jbpm-console/CommandService?WSDL` endpoint; the service
    implements a single `execute` operation. At the time of writing this book, the
    WSDL available for the jBPM 6.2.0 release could not be used to generate the client
    classes because of some typos in WSDL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The client Maven dependency is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: For the sake of completeness, we will now describe how to call into jBPM by
    using its SOAP API. Our `jbpm-remote-server` test project, the `SOAPTest` jUnit
    test class, creates a web service client and then, starts a new process instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we get the WSDL resource from the endpoint URL as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The `execute` command operation accepts the `JaxbCommandsRequest` command, which
    is a DTO (serializable) wrapper for plain jBPM command classes (see [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*). All jBPM command classes
    are also JAXB-annotated classes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '`JaxbCommandsRequest` can also accept a batch of commands unlike REST or the
    JMS remote API.'
  prefs: []
  type: TYPE_NORMAL
- en: Transactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When calling into jBPM by using REST, SOAP, or the remote Java API, you are
    in control of your transaction management. If the jBPM call is supposed to be
    part of a transaction and this call fails or throws an exception, you must handle
    it and perform rollback operations or compensate the business logic on your side.
  prefs: []
  type: TYPE_NORMAL
- en: All the remote API methods throw a `RemoteApiException` exception to indicate
    that the remote call (either REST or JMS) has failed.
  prefs: []
  type: TYPE_NORMAL
- en: The SOAP API `execute` operations throws `CommandWebServiceException`. If you
    need a tight integration and transaction propagation mechanism, you should consider
    moving to an EJB layer wrapping the full-fledged jBPM services (see the *Integrating
    with JEE* section at the start of this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we expanded on the jBPM features targeted at enterprise architecture
    integration. We discussed the core services exposed by jBPM and how they can be
    accessed by using different technologies such as JEE, SOAP, REST, and JMS.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on details that have to be taken care of
    while deploying jBPM to production.
  prefs: []
  type: TYPE_NORMAL
