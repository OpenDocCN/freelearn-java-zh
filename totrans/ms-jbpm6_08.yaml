- en: Chapter 8. Integrating jBPM with Enterprise Architecture
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章：将 jBPM 与企业架构集成
- en: We have an enterprise infrastructure in place, now we want to separate and centralize
    the process management to a single component, and of course, our choice is jBPM.
    So, the million dollar question would be "How do we integrate jBPM to the enterprise
    application in place?"
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经建立了企业基础设施，现在我们希望将流程管理分离并集中到单个组件中，当然，我们的选择是 jBPM。所以，那个价值百万的问题将是“我们如何将 jBPM
    集成到现有的企业应用程序中？”
- en: The answer to this question varies according to requirements and how the enterprise
    application is built. The architecture describes how the application is built,
    and from a broader perspective, a set of architecture patterns are used (either
    alone or in combination) as guidelines to model the architecture. This chapter
    focuses on provisions available in jBPM for integrating it with applications that
    follow these architecture patterns.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的答案因需求和企业应用程序的构建方式而异。架构描述了应用程序是如何构建的，从更广泛的角度来看，使用一系列架构模式（单独或组合使用）作为指导原则来建模架构。本章重点介绍
    jBPM 为与遵循这些架构模式的应用程序集成提供的功能。
- en: 'The chapter starts by discussing the context of enterprise application integration
    and continues to discuss the following in detail:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章首先讨论企业应用程序集成的背景，然后详细讨论以下内容：
- en: Integrating jBPM into a JEE-based application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 jBPM 集成到基于 JEE 的应用程序中
- en: Integrating jBPM into a service-oriented architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 jBPM 集成到面向服务的架构中
- en: Integrating jBPM into an event-driven architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 jBPM 集成到事件驱动架构中
- en: Setting the context
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置上下文
- en: 'System integration of a software component to an existing software architecture
    indicates that we should provide two windows (interfaces), listed as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 软件组件与现有软件架构的系统集成表示我们应该提供两个窗口（接口），如下所示：
- en: To access services provided by the new component. In case of jBPM, it is represented
    by various services provided by jBPM, for example, the process runtime provision
    for managing the life cycle of a business process. JBPM exposes these services
    as APIs of its core engine.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了访问新组件提供的服务。在 jBPM 的情况下，它由 jBPM 提供的各种服务表示，例如，用于管理业务流程生命周期的流程运行时提供。JBPM 将这些服务作为其核心引擎的
    API 公开。
- en: To enable jBPM to access the services provided by other components in the application
    architecture. The extension points that JBPM provides for integration with external
    components are the workitem handlers. We can create handlers and write the logic
    for accessing the external components.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了使 jBPM 能够访问应用程序架构中其他组件提供的服务。JBPM 为与外部组件集成提供的扩展点是工作项处理器。我们可以创建处理器并编写访问外部组件的逻辑。
- en: 'The following figure depicts this context:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了此背景：
- en: '![Setting the context](img/9578OS_08_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![设置上下文](img/9578OS_08_01.jpg)'
- en: Services provided by jBPM
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jBPM 提供的服务
- en: As we discussed in the previous section, one of the critical part of system
    integration with jBPM is the ability to access the features of jBPM. JBPM provides
    an application programming interface to access these features. This API can be
    directly invoked within the same JVM, and if needed to be accessed from outside
    the system boundary, it has to be wrapped and provided as a remotely accessible
    service. For this, we have an array of options, right from an **Enterprise JavaBeans**
    (**EJB**) remote interface to REST-based web services. Each of these will be detailed
    in the subsequent sections of this chapter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中讨论的，与 jBPM 系统集成的一个关键部分是访问 jBPM 特性的能力。JBPM 提供了一个应用程序编程接口来访问这些特性。此 API
    可以在同一个 JVM 中直接调用，如果需要从系统边界之外访问，则必须将其包装并提供为远程可访问的服务。为此，我们有各种选择，从 **企业 JavaBeans**
    （**EJB**）远程接口到基于 REST 的 Web 服务。这些将在本章后续部分中详细介绍。
- en: 'The following are the services provided by jBPM:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由 jBPM 提供的服务：
- en: '**Definition service**: This helps to define a process and analyze its content'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定义服务**：这有助于定义流程并分析其内容'
- en: '**Deployment service**: This helps to deploy a business process and the associated
    artifacts'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署服务**：这有助于部署业务流程及其相关工件'
- en: '**Process service**: This helps to start a process instance from the process
    definitions, manage the life cycle of the instance, and interact with them using
    signals'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流程服务**：这有助于从流程定义中启动流程实例，管理实例的生命周期，并使用信号与它们交互'
- en: '**User task service**: This helps to manage the human task life cycle'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户任务服务**：这有助于管理人工任务的生命周期'
- en: '**Runtime data service**: This helps to get the details of the data during
    jBPM runtime regarding process, process instance, tasks, and audit trails'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时数据服务**：这有助于在 jBPM 运行时获取有关流程、流程实例、任务和审计跟踪的数据细节'
- en: 'Each service is detailed in the following section with (important) operations:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务在以下部分中详细说明，包括（重要）操作：
- en: '`org.jbpm.services.api.DefinitionService`: This service helps to define a process
    from the BPMN text and provides operations to analyze a business process definition:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.api.DefinitionService`：此服务有助于从 BPMN 文本定义流程并提供分析业务流程定义的操作：'
- en: '| Operation | Operation signature | Description |'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 操作 | 操作签名 | 描述 |'
- en: '| --- | --- | --- |'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `buildProcessDefinition` |'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `buildProcessDefinition` |'
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '| Builds the process definition from the given process definition content (`bpmn2Content`)
    |'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 从给定的流程定义内容（`bpmn2Content`）构建流程定义 |'
- en: '| `getReusableSubProcesses` |'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getReusableSubProcesses` |'
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '| Gets the process identifiers of the reusable subprocesses inside a process
    definition |'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 获取流程定义内部可重用子流程的流程标识符 |'
- en: '| `getProcess Variables` |'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getProcess Variables` |'
- en: '[PRE2]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '| Retrieves the name and type of all process variables in a business process
    |'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 获取业务流程中所有流程变量的名称和类型 |'
- en: '| `getServiceTasks` |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getServiceTasks` |'
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| Gets the identifiers of all service tasks associated in a business process
    definition |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 获取与业务流程定义中关联的所有服务任务标识符 |'
- en: '| `getTasks Definitions` |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getTasks Definitions` |'
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| Retrieves all the tasks defined in the business process |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 获取业务流程中定义的所有任务 |'
- en: '`org.jbpm.services.api.DeploymentService`: This service helps to deploy and
    manage an application deployment unit:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.api.DeploymentService`：此服务有助于部署和管理应用程序部署单元：'
- en: '| Operation | Operation signature |'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 操作 | 操作签名 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `deploy` |'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `deploy` |'
- en: '[PRE5]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '|'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `undeploy` |'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `undeploy` |'
- en: '[PRE6]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '|'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `activate` |'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `activate` |'
- en: '[PRE7]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '|'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `deactivate` |'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `deactivate` |'
- en: '[PRE8]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '|'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `IsDeployed` |'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `IsDeployed` |'
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '|'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.jbpm.services.api.ProcessService`: This process service is used to manage
    the life cycle and to interact with a started process instance:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.api.ProcessService`：此流程服务用于管理生命周期并与已启动的流程实例交互：'
- en: '| Operation | Operation signature |'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 操作 | 操作签名 |'
- en: '| --- | --- |'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `startProcess` |'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `startProcess` |'
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '|'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `startProcess` |'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `startProcess` |'
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '|'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `abortProcessInstance` |'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `abortProcessInstance` |'
- en: '[PRE12]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '|'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `abortProcessInstances` |'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `abortProcessInstances` |'
- en: '[PRE13]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '|'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `signalProcessInstance` |'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `signalProcessInstance` |'
- en: '[PRE14]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '|'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `signalProcessInstances` |'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `signalProcessInstances` |'
- en: '[PRE15]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '|'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `completeWorkItem` |'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `completeWorkItem` |'
- en: '[PRE16]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '|'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `abortWorkItem` |'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `abortWorkItem` |'
- en: '[PRE17]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '|'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.jbpm.services.api.UserTaskService`: This service helps to perform life
    cycle management operations of a user task:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.api.UserTaskService`：此服务有助于执行用户任务的生命周期管理操作：'
- en: '| Operation | Operation signature |'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 操作 | 操作签名 |'
- en: '| --- | --- |'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `activate` |'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `activate` |'
- en: '[PRE18]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '|'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `claim` |'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `claim` |'
- en: '[PRE19]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '|'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Complete` |'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Complete` |'
- en: '[PRE20]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '|'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Delegate` |'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Delegate` |'
- en: '[PRE21]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '|'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `exit` |'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `exit` |'
- en: '[PRE22]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '|'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `fail` |'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `fail` |'
- en: '[PRE23]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '|'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `Forward` |'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `Forward` |'
- en: '[PRE24]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `release` |'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `release` |'
- en: '[PRE25]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '|'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `resume` |'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `resume` |'
- en: '[PRE26]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `skip` |'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `skip` |'
- en: '[PRE27]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '|'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `start` |'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `start` |'
- en: '[PRE28]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `stop` |'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `stop` |'
- en: '[PRE29]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '|'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '`org.jbpm.services.api.RuntimeDataService`: This API is used to retrieve information
    about the jBPM runtime including the data of process instances, tasks, and audit
    logs:'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.jbpm.services.api.RuntimeDataService`：此 API 用于检索有关 jBPM 运行时的信息，包括流程实例、任务和审计日志的数据：'
- en: '| Operation | Operation signature |'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 操作 | 操作签名 |'
- en: '| --- | --- |'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `getProcesses` |'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getProcesses` |'
- en: '[PRE30]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getProcessInstances` |'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getProcessInstances` |'
- en: '[PRE31]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getProcessInstance FullHistory` |'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getProcessInstance FullHistory` |'
- en: '[PRE32]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getVariableHistory` |'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getVariableHistory` |'
- en: '[PRE33]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '|'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getTaskEvents` |'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getTaskEvents` |'
- en: '[PRE34]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '| `getTasksOwned` |'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| `getTasksOwned` |'
- en: '[PRE35]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '|'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: Creating custom workitem handlers
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义工作项处理器
- en: In order for jBPM to access services of other components in the application,
    we can use the workitem handler extension point provided by jBPM. Workitem handlers
    are used to specify domain-specific services to a BPMN activity. There are several
    inbuilt generic workitem handlers prebuilt in jBPM.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 jBPM 访问应用程序中其他组件的服务，我们可以使用 jBPM 提供的工作项处理器扩展点。工作项处理器用于指定特定领域的服务到 BPMN 活动。jBPM
    中预建了几个内置的通用工作项处理器。
- en: 'For creating a workitem handler, we have to implement the `org.kie.runtime.instance.WorkItemHandler`
    interface. This interface holds two methods to be implemented:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 创建工作项处理器时，我们必须实现 `org.kie.runtime.instance.WorkItemHandler` 接口。此接口包含两个需要实现的方法：
- en: '`WorkItemManager.completeWorkItem(long workItemId, Map<String, Object> results)`'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WorkItemManager.completeWorkItem(long workItemId, Map<String, Object> results)`'
- en: '`WorkItemManager.abortWorkItem(long workItemId)`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WorkItemManager.abortWorkItem(long workItemId)`'
- en: 'A custom workitem has to be registered to the engine by using the workitem
    manager. For example, for registering a customer task, we can use the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 必须使用工作项管理器将自定义工作项注册到引擎中。例如，为了注册一个客户任务，我们可以使用以下方法：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In conclusion, we have discussed the provisions available in jBPM for integrating
    it with generic software architecture. In the following sections, we will discuss
    how to integrate jBPM into widely used enterprise architectures.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们已经讨论了jBPM中可用于将其与通用软件架构集成的配置。在接下来的章节中，我们将讨论如何将jBPM集成到广泛使用的企业架构中。
- en: Integrating with JEE
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与JEE集成
- en: The Java Enterprise Edition provides an API and a runtime environment for developing
    and deploying enterprise applications. Further, EJB defines a set of lightweight
    APIs that can be used to build applications and leverage capabilities such as
    transactions, remote procedure calls, concurrency control, and access control.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Java企业版为企业应用程序的开发和部署提供了一个API和运行时环境。此外，EJB定义了一组轻量级API，可用于构建应用程序并利用事务、远程过程调用、并发控制和访问控制等能力。
- en: 'EJB can be accessed in two modes:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: EJB可以通过两种模式访问：
- en: '**Remote interface**: This is where the component that wants to access the
    EJB is not packed together with jBPM'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**远程接口**：这是想要访问EJB的组件没有与jBPM打包在一起的地方'
- en: '**Local interface**: This is where the component that wants to access the EJB
    is packed together with a jBPM service'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地接口**：这是想要访问EJB的组件与jBPM服务打包在一起的地方'
- en: JBPM provides out-of-the-box support for JEE integrations. It provides EJB remote
    and local interfaces for accessing the above-listed services.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: JBPM为JEE集成提供了开箱即用的支持。它提供了访问上述列出的服务的EJB远程和本地接口。
- en: EJB remote interfaces
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EJB远程接口
- en: 'The EJB remote interfaces are as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: EJB远程接口如下：
- en: '| Service name | EJB remote service class |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 服务名称 | EJB远程服务类 |'
- en: '| --- | --- |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Definition service |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 定义服务 |'
- en: '[PRE37]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '|'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Deployment service |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 部署服务 |'
- en: '[PRE38]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '|'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Process service |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 流程服务 |'
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '|'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Runtime data service |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 运行时数据服务 |'
- en: '[PRE40]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '|'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| User task service |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 用户任务服务 |'
- en: '[PRE41]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '|'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: These remote services can be accessed from other Java applications. First, we
    need to access the `ejb` remote interface.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这些远程服务可以从其他Java应用程序中访问。首先，我们需要访问`ejb`远程接口。
- en: 'For example (specific to the `jboss` application server), the following code
    shows the lookup of the `ProcessService`:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如（特定于`jboss`应用程序服务器），以下代码显示了`ProcessService`的查找：
- en: '[PRE42]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: After looking up the service, the service can be accessed seamlessly.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 查找服务后，可以无缝地访问该服务。
- en: The EJB local interface
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: EJB本地接口
- en: 'The EJB local interface can be accessed in two ways. One is by using the `javax.ejb.EJB`
    annotation and specifying the enterprise bean''s local business interface name:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: EJB本地接口可以通过两种方式访问。一种是通过使用`javax.ejb.EJB`注解并指定企业Bean的本地业务接口名称：
- en: 'For example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE43]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The container will inject the EJB access for the API.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 容器将为API注入EJB访问。
- en: 'The other syntactical way to access a local EJB service is by using the JNDI
    lookup and the `javax.naming.InitialContext` interface''s `lookup` method:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 访问本地EJB服务的另一种语法方式是使用JNDI查找和`javax.naming.InitialContext`接口的`lookup`方法：
- en: '[PRE44]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Integrating in SOA and EDA environments
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在SOA和EDA环境中集成
- en: 'The first part of this section covers how to integrate jBPM acting as a client
    into external services; [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN
    Constructs*, and [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*, introduced jBPM elements specifically designed to call external
    web services from a process definition: the service task and the WS or the REST
    workitem handlers. The latter are jBPM ready-to-use, configurable components,
    but keep in mind that jBPM gives the user all the tools to develop custom handlers
    so as to perform interactions with generic external services (see [Chapter 7](ch07.html
    "Chapter 7. Customizing and Extending jBPM"), *Customizing and Extending jBPM*).
    The second part of the section will examine how to integrate the jBPM API as a
    server using REST, SOAP, and JMS. We will provide you with two example projects
    (`jbpm-remote-client` and `jbpm-remote-server`) in order to put into action these
    jBPM features.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的第一部分介绍了如何将作为客户端的jBPM集成到外部服务中；[第5章](ch05.html "第5章。BPMN 构造")，*BPMN 构造*，和[第6章](ch06.html
    "第6章。核心架构")，*核心架构*，介绍了专门设计用于从流程定义中调用外部Web服务的jBPM元素：服务任务和WS或REST工作项处理器。后者是jBPM的现成、可配置组件，但请注意，jBPM为用户提供所有工具来开发自定义处理器，以便与通用外部服务进行交互（参见[第7章](ch07.html
    "第7章。自定义和扩展jBPM")，*自定义和扩展jBPM*）。本节第二部分将探讨如何使用REST、SOAP和JMS将jBPM API作为服务器进行集成。我们将为您提供两个示例项目（`jbpm-remote-client`和`jbpm-remote-server`），以便将这些jBPM功能付诸实践。
- en: We are going to see how to connect to both REST and SOAP services.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何连接到REST和SOAP服务。
- en: Integrating with REST services
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成REST服务
- en: 'Before starting a commented step-by-step tour of a jBPM application integrated
    with a REST service, let us review the basics of the support jBPM offers when
    coming to REST integration. The jBPM REST workitem handler (class `org.jbpm.process.workitem.rest.RESTWorkItemHandler`)
    is designed to interact with REST services (both secured and not secured); it
    supports the following parameters:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始对集成REST服务的jBPM应用程序进行注释的逐步游览之前，让我们回顾一下jBPM在REST集成方面提供的基本支持。jBPM REST工作项处理器（类`org.jbpm.process.workitem.rest.RESTWorkItemHandler`）旨在与REST服务（既安全又非安全）进行交互；它支持以下参数：
- en: '`Url`: Target resource endpoint'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Url`：目标资源端点'
- en: '`Method`: HTTP method (defaults to `GET`)'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Method`：HTTP方法（默认为`GET`）'
- en: '`ContentType`: Datatype when sending data (required with `POST` and `PUT`)'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentType`：发送数据时的数据类型（与`POST`和`PUT`一起使用时必需）'
- en: '`Content`: Data to send (required with `POST` and `PUT`)'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Content`：要发送的数据（与`POST`和`PUT`一起使用时必需）'
- en: '`ConnectTimeout`: Connection timeout (defaults to 60 seconds)'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConnectTimeout`：连接超时（默认为60秒）'
- en: '`ReadTimeout`: Read timeout (defaults to 60 seconds)'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReadTimeout`：读取超时（默认为60秒）'
- en: '`Username`: Authentication username'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Username`：认证用户名'
- en: '`Password`: Authentication password'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Password`：认证密码'
- en: 'The handler returns an output result that defines the following attributes:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 处理器返回一个输出结果，该结果定义了以下属性：
- en: '`Result`: The REST service text body response'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Result`：REST服务文本响应体'
- en: '`Status`: The integer HTTP response code'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Status`：整数HTTP响应代码'
- en: '`StatusMsg`: A string description for the operation outcome'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StatusMsg`：操作结果的字符串描述'
- en: 'Our example application sets up a REST server and starts a process that has
    a REST service task node: the REST node performs an HTTP POST operation passing
    an `Order` instance (as a XML string) to the REST server; the server modifies
    the order''s note and returns the order.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的示例应用程序设置了一个REST服务器并启动了一个具有REST服务任务节点的流程：REST节点执行一个HTTP POST操作，将`Order`实例（作为XML字符串）传递给REST服务器；服务器修改订单的备注并返回订单。
- en: The REST service
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REST服务
- en: Our REST server is started inside the test class (the `RestTest.initializeRestServer`
    method) by using the JAX-RS Apache CXF implementation (the CXF version is 2.7.14,
    check the project `pom.xml` file for dependencies); the initialization code sets
    a JAXB provider in order to support data binding for beans.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的REST服务器是在测试类（`RestTest.initializeRestServer`方法）内部启动的，使用的是JAX-RS Apache CXF实现（CXF版本为2.7.14，请检查项目`pom.xml`文件以获取依赖项）；初始化代码设置了一个JAXB提供程序，以便支持bean的数据绑定。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please check the Apache CXF documentation for JAX-RS at [http://cxf.apache.org/docs/jax-rs.html](http://cxf.apache.org/docs/jax-rs.html).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅Apache CXF的JAX-RS文档，网址为[http://cxf.apache.org/docs/jax-rs.html](http://cxf.apache.org/docs/jax-rs.html)。
- en: The server is set up around a REST resource (the `RestResource` class), which
    defines the available operations through the JAX-RS `jax.ws.rs` package annotations.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器是围绕一个REST资源（`RestResource`类）设置的，该资源通过JAX-RS `jax.ws.rs`包注解定义了可用的操作。
- en: The client – REST handler configuration
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 客户端 – REST 处理器配置
- en: 'The example test class method `RestTest.testRestProcess` starts a process instance
    (see the `rest.bpmn2` process definition); the process has a REST task node configured
    with the following mandatory parameters:'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例测试类方法 `RestTest.testRestProcess` 启动一个流程实例（参见 `rest.bpmn2` 流程定义）；流程中配置了一个 REST
    任务节点，以下为必需的参数：
- en: '`Url`: `http://localhost:9998/pizzarestservice/order`'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Url`: `http://localhost:9998/pizzarestservice/order`'
- en: '`ContentType`: `application/xml`'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentType`: `application/xml`'
- en: '`Content`: `<order><note>my note</note></order>`'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Content`: `<order><note>my note</note></order>`'
- en: '`Method`: `POST`'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Method`: `POST`'
- en: The node handler performs the REST call to the `postOrder(Order order)` method
    of the `RestResource` class; the method is annotated with `@Path("/order")`, and
    the XML bean serialization is taken care of, as we said, by JAXB. The REST task
    output variable is mapped back to the process instance and printed by the script
    task.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 节点处理器执行对 `RestResource` 类的 `postOrder(Order order)` 方法的 REST 调用；该方法注解为 `@Path("/order")`，XML
    实体序列化由 JAXB 负责处理，正如我们之前所说的。REST 任务输出变量映射回流程实例，并由脚本任务打印出来。
- en: With the jUnit test class (`TestRest`), you can exercise the REST handler and
    the REST service outside the process definition (the `testPOSTOperation` method).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 jUnit 测试类 (`TestRest`)，你可以在流程定义之外练习 REST 处理器和 REST 服务（`testPOSTOperation`
    方法）。
- en: 'In case the default jBPM REST handler cannot meet your requirements (because
    of serialization constraints, frameworks lock-ins, and so on), it''s important
    to point out that the developer can provide a brand new handler implementation:
    follow the [Chapter 7](ch07.html "Chapter 7. Customizing and Extending jBPM"),
    *Customizing and Extending jBPM*, guidelines describing the workitem handler development
    process. Let us now see how to set up and call a SOAP web service from a process
    definition.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认的 jBPM REST 处理器无法满足你的要求（因为序列化约束、框架锁定等问题），重要的是指出，开发者可以提供一个全新的处理器实现：遵循 [第
    7 章](ch07.html "第 7 章。定制和扩展 jBPM")，*定制和扩展 jBPM* 指南描述的工作项处理器开发过程。现在让我们看看如何从流程定义中设置和调用
    SOAP Web 服务。
- en: The SOAP WebService
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOAP WebService
- en: 'jBPM ships with a specialized `ServiceTaskHandler` (see [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN Constructs*), which features web service
    interactions based on WSDL. The service task is marked as having an implementation
    of the `WebService` type (the task also supports plain Java implementation execution
    through the `Reflection` class). Please check the *Service task* section of [Chapter
    5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*, for additional
    details and a working example description. Our jUnit class (`WsTest`) sets up
    a web service (the `startWebService` method) and then, starts a process that has
    two service task nodes, one calling the web service `addSmallOrder` operation,
    and the other calling the `addLargeOrder` operation: both the operations take
    an `Order` instance as the input and return a Boolean result, which is printed
    by the script task. The service tasks are on different process branches, which
    are taken by the exclusive gateway by evaluating the submitted order''s total
    amount.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 随带一个专门的 `ServiceTaskHandler`（参见 [第 5 章](ch05.html "第 5 章。BPMN 构造")，*BPMN
    构造*），它基于 WSDL 特征 Web 服务交互。服务任务被标记为具有 `WebService` 类型的实现（任务还支持通过 `Reflection` 类执行纯
    Java 实现执行）。请查看 [第 5 章](ch05.html "第 5 章。BPMN 构造")，*BPMN 构造* 中 *服务任务* 部分，以获取更多详细信息和工作示例描述。我们的
    jUnit 类 (`WsTest`) 设置一个 Web 服务（`startWebService` 方法），然后启动一个包含两个服务任务节点的流程：一个调用
    Web 服务 `addSmallOrder` 操作，另一个调用 `addLargeOrder` 操作：这两个操作都接受一个 `Order` 实例作为输入，并返回一个布尔结果，该结果由脚本任务打印出来。服务任务位于不同的流程分支上，由评估提交订单的总金额的排他网关执行。
- en: The JAX-WS service
  id: totrans-223
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JAX-WS 服务
- en: 'The `TestWebService` service is an annotated JAX-WS service; it is started
    from the `WsTest.startWebService` method class, and its endpoint is set to `http://127.0.0.1:9931/testwebservice/order`
    (you can easily configure this in the unit test class). The `http://127.0.0.1:9931/testwebservice/order?WSDL`
    link returns the service WSDL interface. The service exposes the two aforementioned
    methods: `addSmallOrder` and `addLargeOrder`. Let us see how to call our web service
    operation from our process definition.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`TestWebService` 服务是一个注解的 JAX-WS 服务；它从 `WsTest.startWebService` 方法类启动，其端点设置为
    `http://127.0.0.1:9931/testwebservice/order`（你可以在单元测试类中轻松配置此设置）。链接 `http://127.0.0.1:9931/testwebservice/order?WSDL`
    返回服务 WSDL 接口。该服务公开了上述两个方法：`addSmallOrder` 和 `addLargeOrder`。让我们看看如何从我们的流程定义中调用我们的
    Web 服务操作。'
- en: The client – process and service task handler configuration
  id: totrans-225
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 客户端 – 流程和服务任务处理器配置
- en: 'In order to call the web service operation, we must perform the following steps,
    by editing the process definition and its service task node element:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 为了调用 Web 服务操作，我们必须执行以下步骤，通过编辑流程定义及其服务任务节点元素：
- en: Process definition
  id: totrans-227
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 流程定义
- en: Things to be aware of are that we need to import the service WSDL definition.
    In the process definition import section, add the service WSDL location and namespace.
    The WSDL is passed to Apache CXF `JaxWsDynamicClientFactory`, which parses it
    when creating a dynamic web service client.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们需要导入服务 WSDL 定义。在流程定义导入部分，添加服务 WSDL 位置和命名空间。WSDL 传递给 Apache CXF `JaxWsDynamicClientFactory`，它在创建动态
    Web 服务客户端时对其进行解析。
- en: '![Process definition](img/9578OS_08_03.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![流程定义](img/9578OS_08_03.jpg)'
- en: Service task handler
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务任务处理器
- en: 'The service task handler invokes the web service automatically by setting its
    parameters appropriately; this speeds up the integration process but may fall
    short when developing against service interfaces with complex types since, as
    we have already pointed out, the handler leverages the Apache CXF Dynamic Clients
    pattern. In this case, you are strongly suggested to develop a custom handler
    integrating your web service framework of choice. We set the handler parameters
    as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 服务任务处理器通过适当地设置其参数自动调用 Web 服务；这加快了集成过程，但在针对具有复杂类型的服务接口进行开发时可能不足，因为我们已经指出，处理器利用了
    Apache CXF 动态客户端模式。在这种情况下，强烈建议您开发一个自定义处理器，以集成您选择的 Web 服务框架。我们按以下方式设置处理器参数：
- en: '**Implementation**: `WSDL`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**：`WSDL`'
- en: '**serviceInterface**: `TestWebService`'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**serviceInterface**：`TestWebService`'
- en: '**serviceOperation**: `addSmallOrder (addLargeOrder)`'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**serviceOperation**：`addSmallOrder (addLargeOrder)`'
- en: The `mode` parameter value is left to `SYNC` (default), which translates in
    a blocking operation; when the `ASYNC` mode is set, the handler is forced to perform
    the web service call on a thread, returning the control to the process engine,
    and the workitem is completed as soon as the remote call returns.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`mode` 参数值保留为 `SYNC`（默认），这表示阻塞操作；当设置为 `ASYNC` 模式时，处理器被迫在线程上执行 Web 服务调用，并将控制权交还给流程引擎，工作项在远程调用返回后立即完成。'
- en: The WebServiceWorkItemHandler class
  id: totrans-236
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: WebServiceWorkItemHandler 类
- en: jBPM offers a web service-oriented alternative to the service task handler with
    the `WebServiceWorkItemHandler` class. This handler improves over the service
    task handler in terms of parameter array handling, web service endpoint setting
    (it accepts the `Endpoint` parameter), and shortcut WSDL location loading (the
    `Url` and `Namespace` parameters instead of having to define the WSDL URL at the
    process definition level). The `serviceInterface` and `serviceOperation` parameters
    are renamed `Interface` and `Operation`, respectively.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 通过 `WebServiceWorkItemHandler` 类提供了一个以 Web 服务为导向的服务任务处理器替代方案。此处理器在参数数组处理、Web
    服务端点设置（它接受 `Endpoint` 参数）和快捷 WSDL 位置加载（使用 `Url` 和 `Namespace` 参数而不是在流程定义级别定义 WSDL
    URL）方面优于服务任务处理器。`serviceInterface` 和 `serviceOperation` 参数分别重命名为 `Interface` 和
    `Operation`。
- en: jBPM as a remote service
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jBPM 作为远程服务
- en: 'The jBPM platform is offering a number of ready-to-use remote APIs in an effort
    to provide developers with an improved level of flexibility when designing solutions
    that require out-of-the-box jBPM integration. This remote service layer opens
    up a number of possibilities for providing the stakeholders with a flexible, open
    architecture, in order to satisfy and to quickly react to changing application
    requirements, for instance:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 平台提供了一系列现成的远程 API，旨在为开发者在设计需要即插即用 jBPM 集成的解决方案时提供更高的灵活性。此远程服务层为提供灵活、开放的架构开辟了许多可能性，以满足并快速响应不断变化的应用程序需求，例如：
- en: A number of external application systems may require to occasionally connect
    to the jBPM runtime in order to check some task or retrieve some process information
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多外部应用程序系统可能需要偶尔连接到 jBPM 运行时，以检查某些任务或检索某些流程信息
- en: The jBPM operations manager may be constrained to perform administration tasks
    by submitting a batch of commands via HTTP only
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jBPM 操作管理器可能仅通过提交通过 HTTP 的命令批处理来执行管理任务
- en: 'jBPM ships with the following remote service interfaces:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 随带以下远程服务接口：
- en: '**REST API**.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST API**。'
- en: '**JMS API**.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMS API**。'
- en: '**Java Remote API**: This API provides the developer with local stubs of the
    `KieSession`, `TaskService`, and `AuditService` core engine services. These service
    stubs of the API methods are wrappers for lower-level REST or JMS API calls.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 远程 API**：此 API 为开发者提供 `KieSession`、`TaskService` 和 `AuditService` 核心引擎服务的本地存根。这些
    API 方法的服务存根是针对较低级别的 REST 或 JMS API 调用的包装。'
- en: '**SOAP API**.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SOAP API**。'
- en: All of these services are exposed by the jBPM KIE workbench, and as such, they
    are available only when the jbpm-console web application is deployed in a container.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些服务都由 jBPM KIE 工作台公开，因此它们仅在 jbpm-console 网络应用程序在容器中部署时才可用。
- en: Note
  id: totrans-248
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The source code for the remote services project is hosted at [https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote](https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 远程服务项目的源代码托管在 [https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote](https://github.com/droolsjbpm/droolsjbpm-integration/tree/master/kie-remote)。
- en: 'The required Maven dependency for the remote service client is as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 远程服务客户端所需的 Maven 依赖项如下：
- en: '[PRE45]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Let us now review the main remote service functionalities and how you can access
    them.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来回顾主要的远程服务功能以及如何访问它们。
- en: The REST API
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: REST API
- en: 'This API provides functionalities in the following areas:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 此 API 在以下领域提供功能：
- en: '**Runtime**: (`/runtime/` path) provides the user with process instance creation,
    process instance querying, and workitem operations'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时**：（`/runtime/` 路径）为用户提供流程实例创建、流程实例查询和工作项操作'
- en: '**History**: (`/history/` path) provides with auditing data'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**历史记录**：（`/history/` 路径）提供审计数据'
- en: '**Task**: (`/task/` path) provides task operation and task query methods'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：（`/task/` 路径）提供任务操作和任务查询方法'
- en: '**Deployments**: (`/deployments/` and `/deployment/` path) provides deployments
    management operations'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**：（`/deployments/` 和 `/deployment/` 路径）提供部署管理操作'
- en: For additional details, please check the jBPM user manual reference (*Chapter
    17*, *jBPM Process Definition Language (JPDL)*).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如需更多详细信息，请参阅 jBPM 用户手册参考（*第 17 章*，*jBPM 流程定义语言 (JPDL)*）。
- en: Authentication
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 认证
- en: 'Upon invocation, the REST service operations check for the basic authentication
    user ID of your current HTTP session. For example, assume that you are performing
    REST operations in an unauthorized session by executing the following code from
    your command line:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用时，REST 服务操作会检查当前 HTTP 会话的基本认证用户 ID。例如，假设您正在执行以下命令行代码以在未经授权的会话中执行 REST 操作：
- en: '[PRE46]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'You will get an HTTP `401 Unauthorized` error (output edited for clarity; it
    may vary):'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您将获得以下 HTTP `401 未授权` 错误（输出已编辑以清晰；可能有所不同）：
- en: '[PRE47]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Note
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The Kie workbench default security mechanism leverages JAAS; the default configuration,
    for both jBoss WildFly and EAP, is stored in the application server XML configuration
    file (standalone and the like). See [Chapter 4](ch04.html "Chapter 4. Operation
    Management"), *Operation Management*, for user and role configurations.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Kie 工作台默认的安全机制利用 JAAS；对于 jBoss WildFly 和 EAP，默认配置存储在应用程序服务器的 XML 配置文件中（standalone
    等）。有关用户和角色配置，请参阅 [第 4 章](ch04.html "第 4 章。操作管理")，*操作管理*。
- en: 'Otherwise, set the user ID and password (Workbench Realm) as follows:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，设置用户 ID 和密码（工作台领域）如下：
- en: '[PRE48]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'This will return the following response:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回以下响应：
- en: '[PRE49]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Note
  id: totrans-271
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: For a complete jBPM REST reference, please see the jBPM official documentation
    (*Chapter 17*, *Remote API*).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取完整的 jBPM REST 参考，请参阅 jBPM 官方文档（*第 17 章*，*远程 API*）。
- en: The remote Java API
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程 Java API
- en: The remote Java API is a high-level API that uses REST or JMS to interact with
    the remote engine services in order to provide the user with familiar service
    API classes (`TaskService`, `KieSession`, and so on).
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 远程 Java API 是一个高级 API，它使用 REST 或 JMS 与远程引擎服务交互，以便为用户提供熟悉的服务 API 类（`TaskService`、`KieSession`
    等）。
- en: Dependencies
  id: totrans-275
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 依赖项
- en: The API depends on the jBoss RESTEasy REST implementation and the HornetQ JMS
    client library. The Maven dependency required to interact with the Remote API
    is, as we have pointed out earlier, the `kie-remote-client` module and the additional
    `kie-remote-common` artifact. Be sure not to have dependencies to the Apache CXF
    framework, which may cause issues with the jBoss RESTEasy framework.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: API 依赖于 jBoss RESTEasy REST 实现和 HornetQ JMS 客户端库。与远程 API 交互所需的 Maven 依赖项是我们之前提到的
    `kie-remote-client` 模块和额外的 `kie-remote-common` 艺术品。请确保不要有对 Apache CXF 框架的依赖，这可能会与
    jBoss RESTEasy 框架引起问题。
- en: The REST client
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: REST 客户端
- en: 'The initialization is done with a builder **fluent** API obtained from `RemoteRuntimeEngineFactory`:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化是通过从`RemoteRuntimeEngineFactory`获得的**流畅**API完成的：
- en: '[PRE50]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Note
  id: totrans-280
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please see the `jbpm-remote-server` Maven project and its `RestTest` jUnit class
    for a full working example.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`jbpm-remote-server` Maven项目及其`RestTest` jUnit类以获取完整的工作示例。
- en: Client for jBPM JMS service
  id: totrans-282
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: jBPM JMS服务客户端
- en: When using the JMS Remote API client, we need to add a number of library dependencies,
    notably HornetQ and the jBoss remote client. We are going to see how to configure
    and run a remote client application, which creates a jBPM process instance.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用JMS远程API客户端时，我们需要添加一系列库依赖项，特别是HornetQ和jBoss远程客户端。我们将看到如何配置和运行远程客户端应用程序，该应用程序创建一个jBPM流程实例。
- en: Note
  id: totrans-284
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please see the `jbpm-remote-server` Maven project and its `JmsTest` jUnit class
    for a full working example (WildFly 8.1 is required to be up-and-running).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`jbpm-remote-server` Maven项目及其`JmsTest` jUnit类以获取完整的工作示例（需要WildFly 8.1运行）。
- en: Server JMS configuration
  id: totrans-286
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 服务器JMS配置
- en: 'WildFly comes with HornetQ as JMS MQ middleware; in order to have JMS to properly
    work, we need to check the jBPM JMS queues are registered with the JNDI service
    and that the user security settings are set. By default, HornetQ will use the
    "other" JAAS security domain, which is the one used by KIE Workbench Realm for
    authentication (recall the `user.properties` and `roles.properties` files). In
    addition, HornetQ defines authorization settings in the following element of the
    WildFly `standalone-full.xml` configuration file (under the messaging subsystem):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly自带HornetQ作为JMS消息队列中间件；为了使JMS正常工作，我们需要检查jBPM JMS队列是否已注册到JNDI服务，并且用户安全设置已设置。默认情况下，HornetQ将使用“其他”JAAS安全域，这是KIE
    Workbench Realm用于认证的域（回想一下`user.properties`和`roles.properties`文件）。此外，HornetQ在WildFly的`standalone-full.xml`配置文件中的以下元素中定义了授权设置（位于消息子系统下）：
- en: '[PRE51]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Here, we just add the KIE console `admin` role (along the default `guest` role);
    the `admin` role is already configured for JAAS.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是添加了KIE控制台`admin`角色（以及默认的`guest`角色）；`admin`角色已经配置了JAAS。
- en: Now, to check whether our JMS user is properly configured, open the jBoss management
    console (`http://localhost:9990/console`) and select **Configuration/Subsystems/Messaging/Destinations**
    and select **Default Provider** and **Security Settings** on the top navigation
    bar; you shall view the defined users.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了检查我们的JMS用户是否配置正确，请打开jBoss管理控制台（`http://localhost:9990/console`）并选择**配置/子系统/消息/目的地**，然后在顶部导航栏上选择**默认提供者**和**安全设置**；您应查看定义的用户。
- en: '![Server JMS configuration](img/9578OS_08_05.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![服务器JMS配置](img/9578OS_08_05.jpg)'
- en: The WildFly jBPM JMS queue configuration is defined in the `jbpm-console.war\WEB-INF\bpms-jms.xml`
    file; the remotely accessible queues are registered in the `java:jboss/exported`
    JNDI namespace.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly jBPM JMS队列配置定义在`jbpm-console.war\WEB-INF\bpms-jms.xml`文件中；远程可访问的队列注册在`java:jboss/exported`
    JNDI命名空间中。
- en: To check whether the jBPM JMS queues are correctly bound to JNDI, open the jBoss
    management console (`http://localhost:9990/console`) and select **Runtime/Status/Subsystems/JNDI
    View**; here, you shall view the **KIE.AUDIT**, **KIE.SESSION**, **KIE.RESPONSE**,
    and **KIE.TASK** queues. Here, you should also have `RemoteConnectionFactory`
    listed; this factory allows for remote connection to the jBoss JNDI namespaces
    (we are going to see this in a moment).
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 检查jBPM JMS队列是否正确绑定到JNDI，请打开jBoss管理控制台（`http://localhost:9990/console`）并选择**运行/状态/子系统/JNDI视图**；在这里，您应查看**KIE.AUDIT**、**KIE.SESSION**、**KIE.RESPONSE**和**KIE.TASK**队列。在这里，您还应看到列出的`RemoteConnectionFactory`；此工厂允许远程连接到jBoss
    JNDI命名空间（我们将在稍后看到这一点）。
- en: '![Server JMS configuration](img/9578OS_08_02.jpg)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![服务器JMS配置](img/9578OS_08_02.jpg)'
- en: Note
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For the WildFly messaging security configuration, please refer to [https://docs.jboss.org/author/display/WFLY8/Messaging+configuration](https://docs.jboss.org/author/display/WFLY8/Messaging+configuration).
    For the official HornetQ reference, please see the latest documentation at [http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html](http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 对于WildFly消息安全配置，请参阅[https://docs.jboss.org/author/display/WFLY8/Messaging+configuration](https://docs.jboss.org/author/display/WFLY8/Messaging+configuration)。有关官方HornetQ参考，请参阅最新文档[http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html](http://docs.jboss.org/hornetq/2.4.0.Final/docs/user-manual/html)。
- en: JMS client implementation
  id: totrans-297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: JMS客户端实现
- en: To set up a remote JMS client connection, we use the same approach that we used
    for the REST client; we configure a specialized builder, provided by the good
    old `RemoteRuntimeEngineFactory`.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置远程JMS客户端连接，我们使用与REST客户端相同的方法；我们配置了一个由老牌的`RemoteRuntimeEngineFactory`提供的专用构建器。
- en: Note
  id: totrans-299
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please see the `jbpm-remote-server` Maven project and its `JmsTest` jUnit class
    for the full working example.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅`jbpm-remote-server` Maven项目和它的`JmsTest` jUnit类，以获取完整的示例。
- en: '[PRE52]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We get the factory from the builder and the engine from the factory:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从构建器中获取工厂，从工厂中获取引擎：
- en: '[PRE53]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, we get the service classes from the engine:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从引擎中获取服务类：
- en: '[PRE54]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In order to make the jBPM remote client resolve the remote jBPM queues, we
    need to configure the jBoss JNDI provider URL as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使jBPM远程客户端解析远程jBPM队列，我们需要将jBoss JNDI提供者URL配置如下：
- en: '[PRE55]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: WildFly utilizes an HTTP upgrade and features port multiplexing for nearly all
    of its protocols. The jBoss remote JNDI historically listened on port 4447, but
    is now, on port 8080.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly使用HTTP升级和端口复用功能来支持其几乎所有协议。历史上jBoss远程JNDI监听在4447端口，但现在在8080端口。
- en: Note
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For a complete WildFly reference, please see [https://docs.jboss.org/author/display/WFLY8/Documentation](https://docs.jboss.org/author/display/WFLY8/Documentation).
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 对于完整的WildFly参考，请参阅[https://docs.jboss.org/author/display/WFLY8/Documentation](https://docs.jboss.org/author/display/WFLY8/Documentation)。
- en: The SOAP API
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SOAP API
- en: The jBPM workbench features additional interoperability by exposing a SOAP service
    as described by the `/jbpm-console/CommandService?WSDL` endpoint; the service
    implements a single `execute` operation. At the time of writing this book, the
    WSDL available for the jBPM 6.2.0 release could not be used to generate the client
    classes because of some typos in WSDL.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM工作台通过暴露一个SOAP服务增加了额外的互操作性，该服务由`/jbpm-console/CommandService?WSDL`端点描述；该服务实现了一个单一的`execute`操作。在撰写本书时，由于WSDL中存在一些错误，因此jBPM
    6.2.0版本的WSDL无法用于生成客户端类。
- en: 'The client Maven dependency is as follows:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端Maven依赖如下：
- en: '[PRE56]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: For the sake of completeness, we will now describe how to call into jBPM by
    using its SOAP API. Our `jbpm-remote-server` test project, the `SOAPTest` jUnit
    test class, creates a web service client and then, starts a new process instance.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整性，我们现在将描述如何使用其SOAP API调用jBPM。我们的`jbpm-remote-server`测试项目，`SOAPTest` jUnit测试类，创建了一个Web服务客户端，然后启动一个新的流程实例。
- en: 'First, we get the WSDL resource from the endpoint URL as follows:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们按照以下方式从端点URL获取WSDL资源：
- en: '[PRE57]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The `execute` command operation accepts the `JaxbCommandsRequest` command, which
    is a DTO (serializable) wrapper for plain jBPM command classes (see [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*). All jBPM command classes
    are also JAXB-annotated classes.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute`命令操作接受`JaxbCommandsRequest`命令，这是一个用于普通jBPM命令类的DTO（可序列化）包装器（参见[第6章](ch06.html
    "第6章。核心架构")，*核心架构*）。所有jBPM命令类也是JAXB注解类。'
- en: '[PRE58]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '`JaxbCommandsRequest` can also accept a batch of commands unlike REST or the
    JMS remote API.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`JaxbCommandsRequest`也可以接受一批命令，与REST或JMS远程API不同。'
- en: Transactions
  id: totrans-321
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事务
- en: When calling into jBPM by using REST, SOAP, or the remote Java API, you are
    in control of your transaction management. If the jBPM call is supposed to be
    part of a transaction and this call fails or throws an exception, you must handle
    it and perform rollback operations or compensate the business logic on your side.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当通过REST、SOAP或远程Java API调用jBPM时，你控制着事务管理。如果jBPM调用应该作为事务的一部分，并且这个调用失败或抛出异常，你必须处理它并执行回滚操作或补偿你那边的业务逻辑。
- en: All the remote API methods throw a `RemoteApiException` exception to indicate
    that the remote call (either REST or JMS) has failed.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的远程API方法都会抛出`RemoteApiException`异常，以指示远程调用（无论是REST还是JMS）已失败。
- en: The SOAP API `execute` operations throws `CommandWebServiceException`. If you
    need a tight integration and transaction propagation mechanism, you should consider
    moving to an EJB layer wrapping the full-fledged jBPM services (see the *Integrating
    with JEE* section at the start of this chapter).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP API的`execute`操作会抛出`CommandWebServiceException`异常。如果你需要一个紧密集成的和事务传播机制，你应该考虑迁移到一个包装了完整jBPM服务的EJB层（参见本章开头的*与JEE集成*部分）。
- en: Summary
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we expanded on the jBPM features targeted at enterprise architecture
    integration. We discussed the core services exposed by jBPM and how they can be
    accessed by using different technologies such as JEE, SOAP, REST, and JMS.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们扩展了针对企业架构集成的jBPM特性。我们讨论了jBPM暴露的核心服务以及如何使用不同的技术，如JEE、SOAP、REST和JMS来访问这些服务。
- en: In the next chapter, we will focus on details that have to be taken care of
    while deploying jBPM to production.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将关注在将jBPM部署到生产环境中需要特别注意的细节。
