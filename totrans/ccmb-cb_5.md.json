["```java\n    <properties>\n        <junit.version>4.11</junit.version>\n        <cucumber.version>1.2.2</cucumber.version>\n        <selenium.version>2.45.0</selenium.version>\n        <maven.compiler.version>2.3.2</maven.compiler.version>\n    </properties>\n    ```", "```java\n    <!—- Cucumber-java-->\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-java</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n    ```", "```java\n    <!-— Cucumber-JUnit -->\n      <dependency>\n        <groupId>info.cukes</groupId>\n        <artifactId>cucumber-junit</artifactId>\n        <version>${cucumber.version}</version>\n        <scope>test</scope>\n      </dependency>\n    ```", "```java\n    mvn test\n\n    ```", "```java\n    mvn test –DCucumber.options=\"<<OPTIONS>>\"\n\n    ```", "```java\n    mvn test -Dcucumber.options=\"--help\"\n\n    ```", "```java\n    mvn test -Dcucumber.options=\"src/test/java/com/features/sample.feature:5\"\n\n    ```", "```java\n    mvn test -Dcucumber.options=\"--tags @sanity\"\n\n    ```", "```java\n    mvn test -Dcucumber.options=\"--plugin junit:target/cucumber-junit-report.xml\"\n\n    ```", "```java\n    Feature: sample\n\n      @sanity\n      Scenario: Home Page Default content\n        Given user is on Application home page\n        Then user gets a GitHub bootcamp section\n\n      @regression\n      Scenario: GitHub Bootcamp Section\n        Given user is on Application home page\n        When user focuses on GitHub Bootcamp Section\n        Then user gets an option to setup git\n    ```", "```java\n    @Given(\"^user is on Application home page$\")\n      public void user_is_on_Application_home_page()  {\n\n        System.out.println(\"application home\");\n      }\n\n    @Then(\"^user gets a GitHub bootcamp section$\")\n      public void user_gets_a_ GitHub_bootcamp_section()  {\n\n        System.out.println(\"bootcamp section\");\n      }\n\n    @When(\"^user focuses on GitHub Bootcamp Section$\")\n      public void user_focuses_on_GitHub_Bootcamp_Section()  {\n\n        System.out.println(\"focus on GitHub\");\n\n      }\n\n    @Then(\"^user gets an option to setup git$\")\n      public void user_gets_an_option_to_setup_git()  {\n\n        System.out.println(\"git section\");\n      }\n    ```", "```java\n    package com.CucumberOptions;\n\n    import org.junit.runner.RunWith;\n\n    import cucumber.api.CucumberOptions;\n    import cucumber.api.junit.Cucumber;\n\n    @RunWith(Cucumber.class)\n    @CucumberOptions(\n        features = \"src/test/java/com/features\",\n        glue = \"com.StepDefinitions\",\n        tags = { \"@sanity\" },\n        dryRun = false,\n        strict = true,\n        monochrome = true,\n        plugin = { \"pretty\",\n          \"html:target/cucumber_sanity.html\"\n          }\n        )\n    public class RunCukeTest {\n    }\n    ```", "```java\n    package com.CucumberOptions;\n\n    import org.junit.runner.RunWith;\n\n    import cucumber.api.CucumberOptions;\n    import cucumber.api.junit.Cucumber;\n\n    @RunWith(Cucumber.class)\n    @CucumberOptions(\n        features = \"src/test/java/com/features\",\n        glue = \"com.StepDefinitions\",\n        tags = { \"@regression\" },\n        dryRun = false,\n        strict = true,\n        monochrome=true,\n        plugin = { \"pretty\",\n          \"html:target/cucumber_regression.html\"\n        }\n        )\n    public class RunCukeParallelTest {\n    }\n    ```", "```java\n    <build>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-compiler-plugin</artifactId>\n          <version>2.5.1</version>\n          <configuration>\n            <encoding>UTF-8</encoding>\n            <source>1.7</source>\n            <target>1.7</target>\n          </configuration>\n        </plugin>\n        <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <version>2.14</version>\n        <configuration>\n          <skip>true</skip>\n        </configuration>\n          <executions>\n            <execution>\n            <id>acceptance-test</id>\n            <phase>integration-test</phase>\n            <goals>\n              <goal>test</goal>\n            </goals>\n            <configuration>\n              <skip>false</skip>\n              <forkCount>2</forkCount>\n              <reuseForks>false</reuseForks>\n              <argLine>-Duser.language=en</argLine>\n              <argLine>-Xmx1024m</argLine>\n              <argLine>-XX:MaxPermSize=256m</argLine>\n              <argLine>-Dfile.encoding=UTF-8</argLine>\n              <useFile>false</useFile>\n              <includes>\n                <include>**/*Test.class</include>\n              </includes>\n              <testFailureIgnore>true</testFailureIgnore>\n            </configuration>\n            </execution>\n          </executions>\n        </plugin>\n      </plugins>\n    </build>\n    ```", "```java\n    <!-- Selenium -->\n    <dependency>\n      <groupId>org.seleniumhq.selenium</groupId>\n      <artifactId>selenium-firefox-driver</artifactId>\n      <version>${selenium.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.seleniumhq.selenium</groupId>\n      <artifactId>selenium-support</artifactId>\n      <version>${selenium.version}</version>     \n    </dependency>\n    ```", "```java\n    package com.cucumber.automation.utils;\n\n    import java.net.MalformedURLException;\n    import java.util.concurrent.TimeUnit;\n\n    import org.openqa.selenium.WebDriver;\n    import org.openqa.selenium.firefox.FirefoxDriver;\n    import org.openqa.selenium.support.ui.WebDriverWait;\n\n    public class DriverFactory {\n\n      public static WebDriver driver = null;\n      public static WebDriverWait waitVar = null;\n\n      public static String baseURL = \"https://github.com/\";\n\n      /**\n      *  This function is to invoke Selenium Webdriver\n      * \n      * @throws MalformedURLException\n      * @throws InterruptedException\n      */\n      public void createDriver() throws MalformedURLException, InterruptedException {\n\n        driver = new FirefoxDriver();\n\n        driver.manage().window().maximize();\n        driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);\n\n        driver.get(baseURL);\n\n        waitVar = new WebDriverWait(driver, 15);\n      }\n\n      /**\n      * This function is to close driver instance\n      */\n      public void teardown() {\n        driver.quit();\n      }\n    }\n    ```", "```java\n    @Before\n    public void taggedHookMethod1() throws InterruptedException \n    {\n      System.out.println(\"inside hook\");\n      DriverFactory.createDriver();\n    }\n    ```", "```java\n    mvn integration-test\n\n    ```"]