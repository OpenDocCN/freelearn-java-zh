["```java\n    S: 220 foo.com Simple Mail Transfer Service Ready\n    C: EHLO bar.com\n    S: 250-foo.com greets bar.com\n    S: 250-8BITMIME\n    S: 250-SIZE\n    S: 250-DSN\n    S: 250 HELP\n    C: MAIL FROM:<Smith@bar.com>\n    S: 250 OK\n    C: RCPT TO:<Jones@foo.com>\n    S: 250 OK\n    C: RCPT TO:<Green@foo.com>\n    S: 550 No such user here\n    C: RCPT TO:<Brown@foo.com>\n    S: 250 OK\n    C: DATA\n    S: 354 Start mail input; end with <CRLF>.<CRLF>\n    C: Blah blah blah...\n    C: ...etc. etc. etc.\n    C: .\n    S: 250 OK\n    C: QUIT\n    S: 221 foo.com Service closing transmission channel\n```", "```java\n    S: <wait for connection on TCP port 110>\n    C: <open connection>\n    S:    +OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>\n    C:    APOP mrose c4c9334bac560ecc979e58001b3e22fb\n    S:    +OK mrose's maildrop has 2 messages (320 octets)\n    C:    STAT\n    S:    +OK 2 320\n    C:    LIST\n    S:    +OK 2 messages (320 octets)\n    S:    1 120\n    S:    2 200\n    S:    .\n    C:    RETR 1\n    S:    +OK 120 octets\n    S:    <the POP3 server sends message 1>\n    S:    .\n    C:    DELE 1\n    S:    +OK message 1 deleted\n    C:    RETR 2\n    S:    +OK 200 octets\n    S:    <the POP3 server sends message 2>\n    S:    .\n    C:    DELE 2\n    S:    +OK message 2 deleted\n    C:    QUIT\n    S:    +OK dewey POP3 server signing off (maildrop empty)\n    C:  <close connection>\n    S:  <wait for next connection>\n```", "```java\n    S:   * OK IMAP4rev1 Service Ready \n    C:   a001 login mrc secret \n    S:   a001 OK LOGIN completed \n    C:   a002 select inbox \n    S:   * 18 EXISTS \n    S:   * FLAGS (Answered Flagged Deleted Seen Draft) \n    S:   * 2 RECENT \n    S:   * OK [UNSEEN 17] Message 17 is the first unseen message \n    S:   * OK [UIDVALIDITY 3857529045] UIDs valid \n    S:   a002 OK [READ-WRITE] SELECT completed \n    C:   a003 fetch 12 full \n    S:   * 12 FETCH (FLAGS (Seen) INTERNALDATE \n         \"17-Jul-1996 02:44:25 -0700\" \n      RFC822.SIZE 4286 ENVELOPE (\"Wed,\n         17 Jul 1996 02:23:25 -0700 (PDT)\" \n      \"IMAP4rev1 WG mtg summary and minutes\" \n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\")) \n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\")) \n      ((\"Terry Gray\" NIL \"gray\" \"cac.washington.edu\")) \n      ((NIL NIL \"imap\" \"cac.washington.edu\")) \n      ((NIL NIL \"minutes\" \"CNRI.Reston.VA.US\") \n      (\"John Klensin\" NIL \"KLENSIN\" \"MIT.EDU\")) NIL NIL \n      \"<B27397-0100000@cac.washington.edu>\") \n       BODY (\"TEXT\" \"PLAIN\" (\"CHARSET\" \"US-ASCII\") NIL NIL \"7BIT\" 3028 \n       92)) \n    S:    a003 OK FETCH completed \n    C:    a004 fetch 12 body[header] \n    S:    * 12 FETCH (BODY[HEADER] {342} \n    S:    Date: Wed, 17 Jul 1996 02:23:25 -0700 (PDT) \n    S:    From: Terry Gray <gray@cac.washington.edu> \n    S:    Subject: IMAP4rev1 WG mtg summary and minutes \n    S:    To: imap@cac.washington.edu \n    S:    cc: minutes@CNRI.Reston.VA.US, John Klensin <KLENSIN@MIT.EDU> \n    S:    Message-Id: <B27397-0100000@cac.washington.edu> \n    S:    MIME-Version: 1.0 \n    S:    Content-Type: TEXT/PLAIN; CHARSET=US-ASCII \n    S: \n    S:    ) \n    S:    a004 OK FETCH completed \n    C:    a005 store 12 +flags deleted \n    S:    * 12 FETCH (FLAGS (Seen Deleted)) \n    S:    a005 OK +FLAGS completed \n    C:    a006 logout \n    S:    * BYE IMAP4rev1 server terminating connection \n    S:    a006 OK LOGOUT completed \n```", "```java\n    Properties props = new Properties(); \n    props.put(\"mail.smtps.host\", \"smtp.gmail.com\"); \n    props.put(\"mail.smtps.auth\", \"true\"); \n    props.put(\"mail.smtps.port\", \"465\"); \n    props.put(\"mail.smtps.ssl.trust\", \"*\"); \n```", "```java\n    Session session = Session.getInstance(props,  \n      new javax.mail.Authenticator() { \n      @Override \n      protected PasswordAuthentication getPasswordAuthentication() { \n        return new PasswordAuthentication(userName, password); \n      } \n    }); \n```", "```java\n    transport = session.getTransport(\"smtps\"); \n      transport.connect(); \n```", "```java\n    MimeMessage message = new MimeMessage(session); \n    message.setFrom(\"jason@steeplesoft.com\"); \n    message.setRecipients(Message.RecipientType.TO, \n      \"jason@steeplesoft.com\"); \n    message.setSubject(\"JavaMail Example\"); \n```", "```java\n    MimeBodyPart text = new MimeBodyPart(); \n    text.setText(\"This is some sample text\"); \n\n    MimeBodyPart attachment = new MimeBodyPart(); \n    attachment.attachFile(\"src/test/resources/rules.json\"); \n\n    Multipart multipart = new MimeMultipart(); \n    multipart.addBodyPart(text); \n    multipart.addBodyPart(attachment); \n    message.setContent(multipart); \n```", "```java\n    transport.sendMessage(message, new Address[] { \n      new InternetAddress(\"jason@steeplesoft.com\")}); \n      if (transport != null) { \n        transport.close();   \n      }  \n```", "```java\n    MimeBodyPart text = new MimeBodyPart(); \n    text.setContent(\"This is some sample text\", \"text/plain\");  \n    MimeBodyPart html = new MimeBodyPart(); \n    html.setContent(\"<strong>This</strong> is some <em>sample</em>\n      <span style=\"color: red\">text</span>\", \"text/html\"); \n    Multipart multipart = new MimeMultipart(\"alternative\"); \n    multipart.addBodyPart(text); \n    multipart.addBodyPart(html); \n    message.setContent(multipart); \n    transport.sendMessage(message, new Address[]{ \n      new InternetAddress(\"jason@example.com\")});\n```", "```java\n    $ mvn archetype:generate  -DarchetypeGroupId=\n      org.codehaus.mojo.archetypes  -DarchetypeArtifactId=pom-root -\n      DarchetypeVersion=RELEASE \n      ... \n    Define value for property 'groupId': com.steeplesoft.mailfilter \n    Define value for property 'artifactId': mailfilter-master \n    Define value for property 'version':  1.0-SNAPSHOT \n    Define value for property 'package':  com.steeplesoft.mailfilter \n```", "```java\n    $ mvn archetype:generate  -DarchetypeGroupId=\n      org.apache.maven.archetypes  -DarchetypeArtifactId=\n      maven-archetype-quickstart  -DarchetypeVersion=RELEASE \n    Define value for property 'groupId': com.steeplesoft.mailfilter \n    Define value for property 'artifactId': mailfilter-cli \n    Define value for property 'version':  1.0-SNAPSHOT \n    Define value for property 'package':  com.steeplesoft.mailfilter \n```", "```java\n    public class Account { \n      @NotBlank(message=\"A value must be specified for serverName\") \n      private String serverName; \n      @NotNull(message = \"A value must be specified for serverPort\") \n      @Min(value = 0L, message = \"The value must be positive\") \n      private Integer serverPort = 0; \n      private boolean useSsl = true; \n      @NotBlank(message = \"A value must be specified for userName\") \n      private String userName; \n      @NotBlank(message = \"A value must be specified for password\") \n      private String password; \n      private List<Rule> rules; \n```", "```java\n    <dependency> \n      <groupId>org.hibernate</groupId> \n      <artifactId>hibernate-validator</artifactId> \n      <version>5.3.4.Final</version> \n    </dependency> \n    <dependency> \n      <groupId>javax.el</groupId> \n      <artifactId>javax.el-api</artifactId> \n      <version>2.2.4</version> \n    </dependency> \n    <dependency> \n      <groupId>org.glassfish.web</groupId> \n      <artifactId>javax.el</artifactId> \n      <version>2.2.4</version> \n    </dependency> \n```", "```java\n    public boolean equals(Object obj) { \n      if (this == obj) { \n        return true; \n      } \n      if (obj == null) { \n        return false; \n      } \n      if (getClass() != obj.getClass()) { \n        return false; \n      } \n      final Account other = (Account) obj; \n      if (this.useSsl != other.useSsl) { \n        return false; \n      } \n      if (!Objects.equals(this.serverName, other.serverName)) { \n        return false; \n      } \n      if (!Objects.equals(this.userName, other.userName)) { \n        return false; \n      } \n      if (!Objects.equals(this.password, other.password)) { \n        return false; \n      } \n      if (!Objects.equals(this.serverPort, other.serverPort)) { \n        return false; \n      } \n      if (!Objects.equals(this.rules, other.rules)) { \n         return false; \n      } \n      return true; \n    } \n```", "```java\n    public int hashCode() { \n      int hash = 5; \n      hash = 59 * hash + Objects.hashCode(this.serverName); \n      hash = 59 * hash + Objects.hashCode(this.serverPort); \n      hash = 59 * hash + (this.useSsl ? 1 : 0); \n      hash = 59 * hash + Objects.hashCode(this.userName); \n      hash = 59 * hash + Objects.hashCode(this.password); \n      hash = 59 * hash + Objects.hashCode(this.rules); \n      return hash; \n    } \n```", "```java\n    @ValidRule \n    public class Rule { \n      @NotNull \n      private RuleType type = RuleType.MOVE; \n      @NotBlank(message = \"Rules must specify a source folder.\") \n      private String sourceFolder = \"INBOX\"; \n      private String destFolder; \n      private Set<String> fields = new HashSet<>(); \n      private String matchingText; \n      @Min(value = 1L, message = \"The age must be greater than 0.\") \n      private Integer olderThan; \n```", "```java\n    @Target({ElementType.TYPE, ElementType.ANNOTATION_TYPE}) \n    @Retention(RetentionPolicy.RUNTIME) \n    @Constraint(validatedBy = ValidRuleValidator.class) \n    @Documented \n    public @interface ValidRule { \n      String message() default \"Validation errors\"; \n      Class<?>[] groups() default {}; \n      Class<? extends Payload>[] payload() default {}; \n    } \n```", "```java\n    public class ValidRuleValidator implements  \n      ConstraintValidator<ValidRule, Object> { \n```", "```java\n    @Override \n    public void initialize(ValidRule constraintAnnotation) { \n    } \n```", "```java\n    public boolean isValid(Object value,  \n      ConstraintValidatorContext ctx) { \n        if (value == null) { \n          return true; \n        } \n```", "```java\n    ctx.disableDefaultConstraintViolation(); \n    ctx.buildConstraintViolationWithTemplate( \n      \"Null values are not considered valid Rules\") \n      .addConstraintViolation(); \n    return false; \n```", "```java\n    if (!(value instanceof Rule)) { \n      ctx.disableDefaultConstraintViolation(); \n      ctx.buildConstraintViolationWithTemplate( \n        \"Constraint valid only on instances of Rule.\") \n      .addConstraintViolation(); \n      return false; \n    } \n```", "```java\n    boolean valid = true; \n    Rule rule = (Rule) value; \n    if (rule.getType() == RuleType.MOVE) { \n      valid &= validateNotBlank(ctx, rule, rule.getDestFolder(),  \n      \"A destination folder must be specified.\"); \n    } \n```", "```java\n    private boolean validateNotBlank(ConstraintValidatorContext ctx,  \n      String value, String message) { \n      if (isBlank(value)) { \n        ctx.disableDefaultConstraintViolation(); \n        ctx.buildConstraintViolationWithTemplate(message) \n        .addConstraintViolation(); \n        return false; \n      } \n      return true; \n   } \n```", "```java\n    private boolean isBlank(String value) { \n      return (value == null || (value.trim().isEmpty())); \n    } \n```", "```java\n     if (!isBlank(rule.getMatchingText())) { \n       valid &= validateFields(ctx, rule); \n     } else if (rule.getOlderThan() == null) { \n       ctx.disableDefaultConstraintViolation(); \n       ctx.buildConstraintViolationWithTemplate( \n         \"Either matchingText or olderThan must be specified.\") \n       .addConstraintViolation(); \n       valid = false; \n     } \n```", "```java\n    private boolean validateFields(ConstraintValidatorContext ctx, Rule rule) { \n      if (rule.getFields() == null || rule.getFields().isEmpty()) { \n        ctx.disableDefaultConstraintViolation(); \n        ctx.buildConstraintViolationWithTemplate( \n          \"Rules which specify a matching text must specify the field(s)\n            to match on.\") \n          .addConstraintViolation(); \n        return false; \n      } \n      return true; \n    } \n```", "```java\n    public enum RuleType { \n      DELETE, MOVE; \n      public static RuleType getRuleType(String type) { \n        switch(type.toLowerCase()) { \n          case \"delete\" : return DELETE; \n          case \"move\" : return MOVE; \n          default : throw new IllegalArgumentException( \n            \"Invalid rule type specified: \" + type); \n        } \n      } \n    } \n```", "```java\n    <dependency> \n      <groupId>com.sun.mail</groupId> \n      <artifactId>javax.mail</artifactId> \n      <version>1.5.6</version> \n    </dependency> \n```", "```java\n    public static void main(String... args) { \n      try { \n        final MailFilter mailFilter =  \n          new MailFilter(args.length > 0 ? args[1] : null); \n        mailFilter.run(); \n        System.out.println(\"tDeleted count: \"  \n          + mailFilter.getDeleted()); \n        System.out.println(\"tMove count:    \"  \n          + mailFilter.getMoved()); \n      } catch (Exception e) { \n        System.err.println(e.getLocalizedMessage()); \n      } \n    } \n```", "```java\n    public void run() { \n      try { \n        AccountService service = new AccountService(fileName); \n\n        for (Account account : service.getAccounts()) { \n          AccountProcessor processor =  \n            new AccountProcessor(account); \n          processor.process(); \n          deleted += processor.getDeleteCount(); \n          moved += processor.getMoveCount(); \n        } \n      } catch (MessagingException ex) { \n        Logger.getLogger(MailFilter.class.getName()) \n        .log(Level.SEVERE, null, ex); \n      } \n    } \n```", "```java\n    <dependency> \n      <groupId>com.fasterxml.jackson.core</groupId> \n      <artifactId>jackson-databind</artifactId> \n      <version>2.8.5</version> \n    </dependency> \n```", "```java\n    private File getRulesFile(final String fileName) { \n      final File file = new File(fileName != null ? fileName \n        : System.getProperty(\"user.home\") + File.separatorChar \n        + \".mailfilter\" + File.separatorChar + \"rules.json\"); \n      if (!file.exists()) { \n        throw new IllegalArgumentException( \n          \"The rules file does not exist: \" + rulesFile); \n      } \n      return file; \n    } \n```", "```java\n    public List<Account> getAccounts() { \n      final Validator validator = Validation \n        .buildDefaultValidatorFactory().getValidator(); \n      final ObjectMapper mapper = new ObjectMapper() \n        .configure(DeserializationFeature. \n        ACCEPT_SINGLE_VALUE_AS_ARRAY, true); \n      List<Account> accounts = null; \n```", "```java\n    accounts = mapper.readValue(rulesFile,  \n      new TypeReference<List<Account>>() {}); \n```", "```java\n    accounts.forEach((account) -> { \n      final Set<ConstraintViolation<Account>> violations =  \n        validator.validate(account); \n      if (violations.size() > 0) { \n        System.out.println( \n          \"The rule file has validation errors:\"); \n        violations.forEach(a -> System.out.println(\"  \"\" + a)); \n        throw new RuntimeException(\"Rule validation errors\"); \n      } \n      account.getRules().sort((o1, o2) ->  \n        o1.getType().compareTo(o2.getType())); \n    }); \n```", "```java\n    public void saveAccounts(List<Account> accounts) { \n      try { \n        final ObjectMapper mapper =  \n          new ObjectMapper().configure(DeserializationFeature. \n          ACCEPT_SINGLE_VALUE_AS_ARRAY, true); \n        mapper.writeValue(rulesFile, accounts); \n      } catch (IOException ex) { \n        // ... \n      } \n    } \n```", "```java\n    public void process() throws MessagingException { \n      try { \n        getImapSession(); \n\n        for (Map.Entry<String, List<Rule>> entry :  \n          getRulesByFolder(account.getRules()).entrySet()) { \n          processFolder(entry.getKey(), entry.getValue()); \n        } \n      } catch (Exception e) { \n        throw new RuntimeException(e); \n      } finally { \n        closeFolders(); \n        if (store != null) { \n          store.close(); \n        } \n      } \n    } \n```", "```java\n    private void getImapSession()  \n      throws MessagingException, NoSuchProviderException { \n      Properties props = new Properties(); \n      props.put(\"mail.imap.ssl.trust\", \"*\"); \n      props.put(\"mail.imaps.ssl.trust\", \"*\"); \n      props.setProperty(\"mail.imap.starttls.enable\",  \n        Boolean.toString(account.isUseSsl())); \n      Session session = Session.getInstance(props, null); \n      store = session.getStore(account.isUseSsl() ?  \n        \"imaps\" : \"imap\"); \n      store.connect(account.getServerName(), account.getUserName(),  \n        account.getPassword()); \n    } \n```", "```java\n    private Map<String, List<Rule>> getRulesByFolder(List<Rule> rules) { \n      return rules.stream().collect( \n        Collectors.groupingBy(r -> r.getSourceFolder(), \n        Collectors.toList())); \n    } \n```", "```java\n    private void processFolder(String folder, List<Rule> rules)  \n      throws MessagingException { \n      Arrays.stream(getFolder(folder, Folder.READ_WRITE) \n        .getMessages()).forEach(message -> \n        rules.stream().filter(rule ->  \n        rule.getSearchTerm().match(message)) \n        .forEach(rule -> { \n          switch (rule.getType()) { \n            case MOVE: \n              moveMessage(message, getFolder( \n                rule.getDestFolder(),  \n                Folder.READ_WRITE)); \n            break; \n            case DELETE: \n              deleteMessage(message); \n            break; \n          } \n      })); \n    } \n```", "```java\n    private SearchTerm term; \n    @JsonIgnore \n    public SearchTerm getSearchTerm() { \n      if (term == null) { \n        if (matchingText != null) { \n          List<SearchTerm> terms = fields.stream() \n          .map(f -> createFieldSearchTerm(f)) \n          .collect(Collectors.toList()); \n          term = new OrTerm(terms.toArray(new SearchTerm[0])); \n        } else if (olderThan != null) { \n          LocalDateTime day = LocalDateTime.now() \n          .minusDays(olderThan); \n          term = new SentDateTerm(ComparisonTerm.LE, \n            Date.from(day.toLocalDate().atStartOfDay() \n            .atZone(ZoneId.systemDefault()).toInstant())); \n        } \n      } \n      return term; \n    } \n```", "```java\n    private SearchTerm createFieldSearchTerm(String f) { \n      switch (f.toLowerCase()) { \n        case \"from\": \n          return new FromStringTerm(matchingText); \n        case \"cc\": \n          return new RecipientStringTerm( \n            Message.RecipientType.CC, matchingText); \n        case \"to\": \n          return new RecipientStringTerm( \n            Message.RecipientType.TO, matchingText); \n        case \"body\": \n          return new BodyTerm(matchingText); \n        case \"subject\": \n          return new SubjectTerm(matchingText); \n        default: \n            return null; \n      } \n    } \n```", "```java\n    private static final Flags FLAGS_DELETED =  \n      new Flags(Flags.Flag.DELETED); \n    private void deleteMessage(Message toDelete) { \n      if (toDelete != null) { \n        try { \n          final Folder source = toDelete.getFolder(); \n          source.setFlags(new Message[]{toDelete},  \n            FLAGS_DELETED, true); \n          deleteCount++; \n        } catch (MessagingException ex) { \n          throw new RuntimeException(ex); \n        } \n      } \n    } \n```", "```java\n    private void moveMessage(Message toMove, Folder dest) { \n      if (toMove != null) { \n        try { \n          final Folder source = toMove.getFolder(); \n          final Message[] messages = new Message[]{toMove}; \n          source.setFlags(messages, FLAGS_DELETED, true); \n          source.copyMessages(messages, dest); \n          moveCount++; \n        } catch (MessagingException ex) { \n          throw new RuntimeException(ex); \n        } \n      } \n    } \n```", "```java\n    final private Map<String, Folder> folders = new HashMap<>(); \n    private Folder getFolder(String folderName, int mode) { \n      Folder source = null; \n      try { \n        if (folders.containsKey(folderName)) { \n          source = folders.get(folderName); \n        } else { \n          source = store.getFolder(folderName); \n          if (source == null || !source.exists()) { \n            throw new IllegalArgumentException( \n             \"Invalid folder: \" + folderName); \n          } \n          folders.put(folderName, source); \n        } \n        if (!source.isOpen()) { \n          source.open(mode); \n        } \n      } catch (MessagingException ex) { \n        //... \n      } \n      return source; \n    } \n```", "```java\n    private void closeFolders() { \n      folders.values().stream() \n      .filter(f -> f.isOpen()) \n      .forEachOrdered(f -> { \n        try { \n          f.close(true); \n        } catch (MessagingException e) { \n        } \n      }); \n    } \n```", "```java\n$ mvn archetype:generate  -DarchetypeGroupId=org.apache.maven.archetypes  -DarchetypeArtifactId=maven-archetype-quickstart  -DarchetypeVersion=RELEASE \nDefine value for property 'groupId': com.steeplesoft.mailfilter \nDefine value for property 'artifactId': mailfilter-gui \nDefine value for property 'version':  1.0-SNAPSHOT \nDefine value for property 'package':  com.steeplesoft.mailfilter.gui \n```", "```java\n    <parent> \n      <groupId>com.steeplesoft.j9bp.mailfilter</groupId> \n      <artifactId>mailfilter-master</artifactId> \n      <version>1.0-SNAPSHOT</version> \n    </parent> \n```", "```java\n    <dependencies> \n      <dependency> \n        <groupId>${project.groupId}</groupId> \n        <artifactId>mailfilter-cli</artifactId> \n        <version>${project.version}</version> \n      </dependency> \n    </dependencies> \n```", "```java\n    public class MailFilter extends Application { \n      @Override \n      public void start(Stage stage) throws Exception { \n        Parent root = FXMLLoader.load(getClass() \n        .getResource(\"/fxml/mailfilter.fxml\")); \n        Scene scene = new Scene(root); \n        stage.setTitle(\"MailFilter\"); \n        stage.setScene(scene); \n        stage.show(); \n      } \n\n      public static void main(String[] args) { \n        launch(args); \n      } \n    } \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <?import java.lang.*?> \n    <?import java.util.*?> \n    <?import javafx.scene.*?> \n    <?import javafx.scene.control.*?> \n    <?import javafx.scene.layout.*?> \n\n    <AnchorPane id=\"AnchorPane\" prefHeight=\"200\" prefWidth=\"320\"  \n\n      fx:controller= \n        \"com.steeplesoft.mailfilter.gui.Controller\"> \n      <children> \n        <Button layoutX=\"126\" layoutY=\"90\" text=\"Click Me!\"  \n          fx:id=\"button\" /> \n        <Label layoutX=\"126\" layoutY=\"120\" minHeight=\"16\"  \n          minWidth=\"69\" fx:id=\"label\" /> \n      </children> \n    </AnchorPane> \n```", "```java\n    public class Controller implements Initializable { \n      @Override \n      public void initialize(URL url, ResourceBundle rb) { \n      } \n    } \n```", "```java\n    private final ObservableList<Account> accounts =  \n      FXCollections.observableArrayList(); \n```", "```java\n    private void configureAccountsListView() { \n      accountService = new AccountService(); \n      accounts.addAll(accountService.getAccounts()); \n```", "```java\n    accountsListView.setItems(accounts); \nListView clicks:\n```", "```java\n    accountProperty = new AccountProperty(); \n    accountsListView.setOnMouseClicked(e -> { \n      final Account account = accountsListView.getSelectionModel() \n      .getSelectedItem(); \n      if (account != null) { \n        accountProperty.set(account); \n      } \n    }); \n```", "```java\n    final ChangeListener<String> accountChangeListener =  \n      (observable, oldValue, newValue) ->  \n      accountsListView.refresh(); \n    serverName.textProperty().addListener(accountChangeListener); \n    userName.textProperty().addListener(accountChangeListener); \n```", "```java\n    private class AccountProperty extends ObjectPropertyBase<Account> { \n```", "```java\n    private final BeanPathAdapter<Account> pathAdapter; \n```", "```java\n    public AccountProperty() { \n        pathAdapter = new BeanPathAdapter<>(new Account()); \n        pathAdapter.bindBidirectional(\"serverName\",  \n            serverName.textProperty()); \n        pathAdapter.bindBidirectional(\"serverPort\",  \n            serverPort.textProperty()); \n        pathAdapter.bindBidirectional(\"useSsl\",  \n            useSsl.selectedProperty(), Boolean.class); \n        pathAdapter.bindBidirectional(\"userName\",  \n            userName.textProperty()); \n        pathAdapter.bindBidirectional(\"password\",  \n            password.textProperty()); \n        addListener((observable, oldValue, newValue) -> { \n            rules.setAll(newValue.getRules()); \n        }); \n    } \n```", "```java\n    @Override \n    public void set(Account newValue) { \n      pathAdapter.setBean(newValue); \n      super.set(newValue); \n    } \n```", "```java\n    private void configureRuleFields() { \n        ruleProperty = new RuleProperty(); \n        fields.getCheckModel().getCheckedItems().addListener( \n          new RuleFieldChangeListener()); \n        final ChangeListener<Object> ruleChangeListener =  \n            (observable, oldValue, newValue) ->  \n                rulesTableView.refresh(); \n        sourceFolder.textProperty() \n           .addListener(ruleChangeListener); \n        destFolder.textProperty().addListener(ruleChangeListener); \n        matchingText.textProperty() \n            .addListener(ruleChangeListener); \n        age.textProperty().addListener(ruleChangeListener); \n        type.getSelectionModel().selectedIndexProperty() \n            .addListener(ruleChangeListener); \n    } \n```", "```java\n    private class RuleProperty extends ObjectPropertyBase<Rule> { \n      private final BeanPathAdapter<Rule> pathAdapter; \n\n      public RuleProperty() { \n        pathAdapter = new BeanPathAdapter<>(new Rule()); \n        pathAdapter.bindBidirectional(\"sourceFolder\",  \n          sourceFolder.textProperty()); \n        pathAdapter.bindBidirectional(\"destFolder\",  \n          destFolder.textProperty()); \n        pathAdapter.bindBidirectional(\"olderThan\",  \n          age.textProperty()); \n        pathAdapter.bindBidirectional(\"matchingText\",  \n          matchingText.textProperty()); \n        pathAdapter.bindBidirectional(\"type\",  \n          type.valueProperty(), String.class); \n        addListener((observable, oldValue, newValue) -> { \n          isSelectingNewRule = true; \n          type.getSelectionModel().select(type.getItems() \n          .indexOf(newValue.getType().name())); \n\n          IndexedCheckModel checkModel = fields.getCheckModel(); \n          checkModel.clearChecks(); \n          newValue.getFields().forEach((field) -> { \n            checkModel.check(checkModel.getItemIndex(field)); \n          }); \n          isSelectingNewRule = false; \n      }); \n    } \n```", "```java\n    private class RuleFieldChangeListener implements ListChangeListener { \n      @Override \n      public void onChanged(ListChangeListener.Change c) { \n        if (!isSelectingNewRule && c.next()) { \n          final Rule bean = ruleProperty.getBean(); \n          bean.getFields().removeAll(c.getRemoved()); \n          bean.getFields().addAll(c.getAddedSubList()); \n        } \n      } \n    } \n```", "```java\n    <dependency> \n      <groupId>org.quartz-scheduler</groupId> \n      <artifactId>quartz</artifactId> \n      <version>2.2.3</version> \n    </dependency> \n```", "```java\n    public class MailFilterJob implements Job { \n      @Override \n      public void execute(JobExecutionContext jec)  \n        throws JobExecutionException { \n        MailFilter filter = new MailFilter(); \n        filter.run(); \n      } \n    } \n```", "```java\n    public class MailFilterService { \n      public static void main(String[] args) { \n        try { \n          final Scheduler scheduler =  \n            StdSchedulerFactory.getDefaultScheduler(); \n          scheduler.start(); \n\n          final JobDetail job =  \n            JobBuilder.newJob(MailFilterJob.class).build(); \n          final Trigger trigger = TriggerBuilder.newTrigger() \n          .startNow() \n          .withSchedule( \n             SimpleScheduleBuilder.simpleSchedule() \n             .withIntervalInMinutes(15) \n             .repeatForever()) \n          .build(); \n          scheduler.scheduleJob(job, trigger); \n        } catch (SchedulerException ex) { \n          Logger.getLogger(MailFilterService.class.getName()) \n          .log(Level.SEVERE, null, ex); \n        } \n      } \n    } \n```", "```java\n    <build> \n      <plugins> \n        <plugin> \n          <groupId>org.codehaus.mojo</groupId> \n          <artifactId>appassembler-maven-plugin</artifactId> \n          <version>2.0.0</version> \n```", "```java\n    <executions> \n      <execution> \n        <id>generate-jsw-scripts</id> \n        <phase>package</phase> \n        <goals> \n          <goal>generate-daemons</goal> \n        </goals> \n```", "```java\n    <configuration> \n      <repositoryLayout>flat</repositoryLayout> \n```", "```java\n    <daemons> \n      <daemon> \n        <id>mailfilter-service</id> \n        <wrapperMainClass> \n          org.tanukisoftware.wrapper.WrapperSimpleApp \n        </wrapperMainClass> \n        <mainClass> \n         com.steeplesoft.mailfilter.service.MailFilterService \n        </mainClass> \n        <commandLineArguments> \n          <commandLineArgument>start</commandLineArgument> \n        </commandLineArguments> \n```", "```java\n        <platforms> \n          <platform>jsw</platform> \n        </platforms> \n```", "```java\n        <generatorConfigurations> \n          <generatorConfiguration> \n            <generator>jsw</generator> \n            <includes> \n              <include>linux-x86-64</include> \n              <include>macosx-universal-64</include> \n              <include>windows-x86-64</include> \n            </includes> \n          </generatorConfiguration> \n        </generatorConfigurations> \n      </daemon> \n    </daemons> \n```"]