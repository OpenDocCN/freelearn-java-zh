["```java\n@Entity\n@Table(name = \"owners\", schema = \"petowner\")\npublic class Owner implements Serializable {\n    private static final long serialVersionUID = 1L;\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @Column(name = \"first_name\")\n    private String firstName;\n    @Column(name = \"last_name\")\n    private String lastName;\n    @Column(name = \"address\")\n    private String address;\n    @Column(name = \"city\")\n    private String city;\n    @Column(name = \"telephone\")\n    private String telephone;\n}\n```", "```java\n@Entity\n@Table(name = \"owners\", schema = \"petowner\")\npublic class Owner implements Serializable {\n     .// ...\n@OneToOne(cascade = CascadeType.ALL)\n     @JoinColumn(name = \"address_id\", referencedColumnName = \"id\")\n     private Address address;\n// ... getters and setters\n}\n```", "```java\n@Entity\n@Table(name = \"address\")\npublic class Address {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name = \"id\")\n    private Long id;\n    //...\n\n    @OneToOne(mappedBy = \"address\")\n    private User user;\n\n    //... getters and setters\n}\n```", "```java\n@Entity\n@Table(name = \"owners\", schema = \"petowner\")\npublic class Owner implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    //...\n\n    @OneToMany(mappedBy = \"owner\", cascade = \n      CascadeType.ALL)\n    private Set<Pet> pets = new HashSet<>();\n    //...\n```", "```java\n@Entity\n@Table(name = \"pets\", schema = \"petowner\")\npublic class Pet implements Serializable {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    //...\n    @ManyToOne\n    @JoinColumn(name = \"owner_id\")\n    private Owner owner;\n    //...\n}\n```", "```java\n@Entity\n@Table(name = \"foos\")\npublic class Foo { \n\n   // ...\n\n    @ManyToMany(cascade = { CascadeType.ALL })\n    @JoinTable(\n        name = \"foo_bars\", \n        joinColumns = { @JoinColumn(name = \"foo_id\") }, \n        inverseJoinColumns = { @JoinColumn(name = \"bar_id\") }\n    )\n    Set<Bar> bars = new HashSet<>();\n\n    // getters and setters\n}\n```", "```java\n@Entity\n@Table(name = \"bars\")\npublic class Bar {    \n\n    // ...  \n\n    @ManyToMany(mappedBy = \"bars\")\n    private Set<Foo> foos = new HashSet<>();\n\n    // getters and setters   \n}\n```", "```java\n@Repository\npublic abstract class OwnerRepository implements JpaRepository<Owner, Long> {\n    @PersistenceContext\n    private final EntityManager entityManager;\n    public OwnerRepository(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n    @Transactional\n    public Owner mergeAndSave(Owner owner) {\n        owner = entityManager.merge(owner);\n        return save(owner);\n    }\n}\n```", "```java\npublic interface OwnerService {\n    Owner save(Owner owner);\n    Page<Owner> findAll(Pageable pageable);\n    Optional<Owner> findOne(Long id);\n    void delete(Long id);\n}\n```", "```java\n@Singleton\n@Transactional\npublic class OwnerServiceImpl implements OwnerService {\n    private final Logger log = \n     LoggerFactory.getLogger(OwnerServiceImpl.class);\n    private final OwnerRepository ownerRepository;\n    public OwnerServiceImpl(OwnerRepository \n     ownerRepository) {\n        this.ownerRepository = ownerRepository;\n    }\n    @Override\n    public Owner save(Owner owner) {\n        log.debug(\"Request to save Owner : {}\", owner);\n        return ownerRepository.mergeAndSave(owner);\n    }\n    @Override\n    @ReadOnly\n    @Transactional\n    public Page<Owner> findAll(Pageable pageable) {\n        log.debug(\"Request to get all Owners\");\n        return ownerRepository.findAll(pageable);\n    }\n    @Override\n    @ReadOnly\n    @Transactional\n    public Optional<Owner> findOne(Long id) {\n        log.debug(\"Request to get Owner : {}\", id);\n        return ownerRepository.findById(id);\n    }\n    @Override\n    public void delete(Long id) {\n        log.debug(\"Request to delete Owner : {}\", id);\n        ownerRepository.deleteById(id);\n    }\n}\n```", "```java\n@Singleton\npublic class PetOwnerCliClient {\n    private final OwnerService ownerService;\n    private final PetService petService;\n    private final VisitService visitService;\n    private final PetTypeService petTypeService;\n    public PetOwnerCliClient(OwnerService ownerService, \n                             PetService petService, \n                             VisitService visitService, \n                             PetTypeService petTypeService) {\n        this.ownerService = ownerService;\n        this.petService = petService;\n        this.visitService = visitService;\n        this.petTypeService = petTypeService;\n    }\n    // methods for performing CRUD operations...\n}\n```", "```java\nprotected void performFindAll() {\n    Page<Owner> pOwners = \n     ownerService.findAll(Pageable.unpaged());\n    … iterate through paged content\n}\n```", "```java\nprotected Owner performSave() {\n    Owner owner = initOwner();\n    return ownerService.save(owner);\n}\nprivate Owner initOwner() {Owner owner = new Owner();\n    owner.setFirstName(\"Foo\");\n    owner.setLastName(\"Bar\");\n    owner.setCity(\"Toronto\");\n    owner.setAddress(\"404 Adelaide St W\");\n    owner.setTelephone(\"647000999\");\n    Pet pet = new Pet();\n    pet.setType(petTypeService.findAll(Pageable.unpaged()).getContent().get(1));\n    pet.setName(\"Baz\");\n    pet.setBirthDate(LocalDate.of(2010, 12, 12));\n    pet.setOwner(owner);\n    Visit visit = new Visit();\n    visit.setVisitDate(LocalDate.now());\n    visit.setDescription(\"Breathing issues\");\n    visit.setPet(pet);\n    return owner;\n}\n```", "```java\nprotected void performDelete(Owner owner) {\n    /** delete owner pets and their visits */\n    Set<Pet> pets = owner.getPets();\n    if (CollectionUtils.isNotEmpty(pets)) {\n        for (Pet pet : pets) {\n            Set<Visit> visits = pet.getVisits();\n            if (CollectionUtils.isNotEmpty(visits)) {\n                for (Visit visit : visits) {\n                    visitService.delete(visit.getId());\n                }\n            }\n            petService.delete(pet.getId());\n        }\n    }\n    ownerService.delete(owner.getId());\n}\n```", "```java\n@Singleton\npublic class Application {\n    private final PetOwnerCliClient petOwnerCliClient;\n    public Application(PetOwnerCliClient petOwnerCliClient) {\n        this.petOwnerCliClient = petOwnerCliClient;\n    }\n    public static void main(String[] args) {\n        Micronaut.run(Application.class, args);\n    }\n    @EventListener\n    void init(StartupEvent event) {\n        petOwnerCliClient.performDatabaseOperations();\n    }\n}\n```", "```java\n<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->\n<dependency>\n     <groupId>org.mybatis</groupId>\n     <artifactId>mybatis</artifactId>\n     <version>3.5.5</version>\n</dependency>\n```", "```java\n@Factory\npublic class MybatisFactory {\n    private final DataSource dataSource;\n    public MybatisFactory(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n    @Context\n    public SqlSessionFactory sqlSessionFactory() {\n        TransactionFactory transactionFactory = new \n         JdbcTransactionFactory();\n        Environment environment = new Environment(\n         \"pet-clinic\", transactionFactory, dataSource);\n        Configuration configuration = new \n         Configuration(environment);\n        configuration.addMappers(\"com.packtpub.micronaut.repository\");\n        return new \n         SqlSessionFactoryBuilder().build(configuration);\n    }\n}\n```", "```java\n@Introspected\npublic class Specialty implements Serializable {\n    private static final long serialVersionUID = 1L;\n    @NotNull\n    private Long id;\n    private String name;\n    // ... getters and setters\n}\n```", "```java\n@Introspected\npublic class Vet implements Serializable {\n    private static final long serialVersionUID = 1L;\n    @NotNull\n    private Long id;\n    private String firstName;\n    private String lastName;\n    private Set<Specialty> specialties = new HashSet<>();\n    // ... getters and setters\n}\n```", "```java\n/**\n * Mybatis mapper for {@link Specialty}.\n */\npublic interface SpecialtyRepository {\n    @Select(\"SELECT * FROM petclinic.specialties\")\n    Collection<Specialty> findAll() throws Exception;\n    @Select(\"SELECT * FROM petclinic.specialties WHERE id =\n       #{id}\")\n    Specialty findById(@Param(\"id\") Long id) throws \n     Exception;\n    @Select(\"SELECT * FROM petclinic.specialties WHERE \n      UPPER(name) = #{name}\")\n    Specialty findByName(@Param(\"name\") String name) throws \n     Exception;\n    @Select(\n        {\n            \"INSERT INTO petclinic.specialties(id, name)\\n\" +\n                \"VALUES (COALESCE(#{id}, (select \n                 nextval('petclinic.specialties_id_seq'))),\n                 #{name})\\n\" +\n                \"ON CONFLICT (id)\\n\" +\n                \"DO UPDATE SET name = #{name}  \\n\" +\n                \"WHERE petclinic.specialties.id = #{id}\\n\" +\n                \"RETURNING id\"\n        }\n    )\n    @Options(flushCache = Options.FlushCachePolicy.TRUE)\n    Long save(Specialty specialty) throws Exception;\n    @Delete(\"DELETE FROM petclinic.specialties WHERE id = \n     #{id}\")\n    void deleteById(@Param(\"id\") Long id) throws Exception;\n    @Select({\n        \"SELECT DISTINCT id, name FROM \n          petclinic.specialties WHERE id IN(\",\n        \"SELECT specialty_id FROM petclinic.vet_specialties \n          WHERE vet_id = #{vetId}\",\n        \")\"\n    })\n    Set<Specialty> findByVetId(@Param(\"vetId\") Long vetId) \n     throws Exception;\n}\n```", "```java\n@Singleton\npublic class SpecialtyRepositoryImpl implements SpecialtyRepository {\n    ... SqlSessionFactory injection …\n    private SpecialtyRepository \n     getSpecialtyRepository(SqlSession sqlSession) {\n        return \n         sqlSession.getMapper(SpecialtyRepository.class);\n    }\n    @Override\n    public Collection<Specialty> findAll() throws Exception {\n        try (SqlSession sqlSession = \n         sqlSessionFactory.openSession()) {\n            return \n             getSpecialtyRepository(sqlSession).findAll();\n        }\n    }\n    @Override\n    public Specialty findById(Long id) throws Exception {\n        try (SqlSession sqlSession = \n          sqlSessionFactory.openSession()) {\n            return getSpecialtyRepository\n             (sqlSession).findById(id);\n        }\n    }\n    @Override\n    public Specialty findByName(String name) throws \n      Exception {\n        try (SqlSession sqlSession = \n         sqlSessionFactory.openSession()) {\n            return getSpecialtyRepository\n            (sqlSession).findByName(name);\n        }\n    }\n    @Override\n    public Long save(Specialty specialty) throws Exception {\n        Long specialtyId;\n        try (SqlSession sqlSession = \n         sqlSessionFactory.openSession()) {\n            specialtyId = getSpecialtyRepository\n             (sqlSession).save(specialty);\n            sqlSession.commit();\n        }\n        return specialtyId;\n    }\n    @Override\n    public void deleteById(Long id) throws Exception {\n        try (SqlSession sqlSession = \n         sqlSessionFactory.openSession()) {\n            getSpecialtyRepository(sqlSession).deleteById\n              (id);\n            sqlSession.commit();\n        }\n    }\n    @Override\n    public Set<Specialty> findByVetId(Long vetId) throws \n     Exception {\n        try (SqlSession sqlSession = \n         sqlSessionFactory.openSession()) {\n            return getSpecialtyRepository\n             (sqlSession).findByVetId(vetId);\n        }\n    }\n}\n```", "```java\npublic interface SpecialtyService {\n    Specialty save(Specialty specialty) throws Exception;\n    Collection<Specialty> findAll() throws Exception;\n    Optional<Specialty> findOne(Long id) throws Exception;\n    void delete(Long id) throws Exception;\n}\n```", "```java\n@Singleton\npublic class SpecialtyServiceImpl implements SpecialtyService {\n    private final Logger log = \n     LoggerFactory.getLogger(SpecialtyServiceImpl.class);\n    private final SpecialtyRepository specialtyRepository;\n    public SpecialtyServiceImpl(SpecialtyRepository \n      specialtyRepository) {\n        this.specialtyRepository = specialtyRepository;\n    }\n    @Override\n    public Specialty save(Specialty specialty) throws \n       Exception {\n        log.debug(\"Request to save Specialty : {}\", \n         specialty);\n        Long specialtyId = \n         specialtyRepository.save(specialty);\n        return specialtyRepository.findById(specialtyId);\n    }\n    @Override\n    public Collection<Specialty> findAll() throws Exception {\n        log.debug(\"Request to get all Specialties\");\n        return specialtyRepository.findAll();\n    }\n    @Override\n    public Optional<Specialty> findOne(Long id) throws \n      Exception {\n        log.debug(\"Request to get Specialty : {}\", id);\n        return Optional.ofNullable\n         (specialtyRepository.findById(id));\n    }\n    @Override\n    public void delete(Long id) throws Exception {\n        log.debug(\"Request to delete Specialty : {}\", id);\n        specialtyRepository.deleteById(id);\n    }\n}\n```", "```java\n@Singleton\npublic class PetClinicCliClient {\n    private final VetService vetService;\n    private final SpecialtyService specialtyService;\n    public PetClinicCliClient(VetService vetService, \n                              SpecialtyService \n                              specialtyService) {\n        this.vetService = vetService;\n        this.specialtyService = specialtyService;\n    }\n    // …\n}\n```", "```java\nprotected void performFindAll() {\n    List<Vet> vets;\n    try {\n        vets = (List<Vet>) vetService.findAll();\n        … iterate on vets\n    } catch (Exception e) {\n        log.error(\"Exception: {}\", e.toString());\n    }\n}\n```", "```java\nprotected Vet performSave() {\n    Vet vet = initVet();\n    Vet savedVet = null;\n    try {\n        savedVet = vetService.save(vet);\n    } catch (Exception e) {\n        log.error(\"Exception: {}\", e.toString());\n    }\n    return savedVet;\n}\nprivate Vet initVet() {\n    Vet vet = new Vet();\n    vet.setFirstName(\"Foo\");\n    vet.setLastName(\"Bar\");\n    Specialty specialty = new Specialty();\n    specialty.setName(\"Baz\");\n    vet.getSpecialties().add(specialty);\n    return vet;\n}\n```", "```java\nprotected void performDelete(Vet vet) {\n    try {\n        vetService.delete(vet.getId());\n    } catch (Exception e) {\n        log.error(\"Exception: {}\", e.toString());\n    }\n}\n```", "```java\n@Singleton\npublic class Application {\n    private final PetClinicCliClient petClinicCliClient;\n    public Application(PetClinicCliClient \n     petClinicCliClient) {\n        this.petClinicCliClient = petClinicCliClient;\n    }\n    public static void main(String[] args) {\n        Micronaut.run(Application.class, args);\n    }\n    @EventListener\n    void init(StartupEvent event) {\n        petClinicCliClient.performDatabaseOperations();\n    }\n}\n```", "```java\n{ \n    \"_id\" : ObjectId(\"5f485523d0cfa84e00963fe4\"), \n    \"reviewId\" : \"0ee19b1c-ec8e-11ea-adc1-0242ac120002\", \n    \"rating\" : 4.0, \n    \"comment\" : \"Good vet in the area\", \n    \"vetId\" : 1.0, \n    \"dateAdded\" : ISODate(\"2020-08-28T00:51:47.922+0000\")\n}\n```", "```java\nmicronaut:\n  application:\n    name: Pet Clinic Reviews\nmongodb:\n  uri: mongodb://mongodb:mongodb@localhost:27017/pet-clinic-reviews\n  databaseName: pet-clinic-reviews\n  collectionName: vet-reviews\n```", "```java\npublic class MongoConfiguration {\n    @Value(\"${mongodb.databaseName}\")\n    private String databaseName;\n    @Value(\"${mongodb.collectionName}\")\n    private String collectionName;\n    public String getDatabaseName() {\n        return databaseName;\n    }\n    public String getCollectionName() {\n        return collectionName;\n    }\n}\n```", "```java\npublic class VetReview {\n    private String reviewId;\n    private Long vetId;\n    private Double rating;\n    private String comment;\n    private LocalDate dateAdded;\n    @BsonCreator\n    @JsonCreator\n    public VetReview(\n            @JsonProperty(\"reviewId\")\n            @BsonProperty(\"reviewId\") String reviewId,\n            @JsonProperty(\"vetId\")\n            @BsonProperty(\"vetId\") Long vetId,\n            @JsonProperty(\"rating\")\n            @BsonProperty(\"rating\") Double rating,\n            @JsonProperty(\"comment\")\n            @BsonProperty(\"comment\") String comment,\n            @JsonProperty(\"dateAdded\")\n            @BsonProperty(\"dateAdded\") LocalDate dateAdded) {\n        this.reviewId = reviewId;\n        this.vetId = vetId;\n        this.rating = rating;\n        this.comment = comment;\n        this.dateAdded = dateAdded;\n    }\n    // ... getters and setters\n}\n```", "```java\npublic interface VetReviewRepository {\n    List<VetReview> findAll();\n    VetReview findByReviewId(String reviewId);\n    VetReview save(VetReview vetReview);\n    void delete(String reviewId);\n}\n```", "```java\n@Singleton\npublic class VetReviewRepositoryImpl implements VetReviewRepository {\n    private final MongoClient mongoClient;\n    private final MongoConfiguration mongoConfiguration;\n    public VetReviewRepositoryImpl(MongoClient mongoClient,\n     MongoConfiguration mongoConfiguration) {\n        this.mongoClient = mongoClient;\n        this.mongoConfiguration = mongoConfiguration;\n    }\n    @Override\n    public List<VetReview> findAll() {\n        List<VetReview> vetReviews = new ArrayList<>();\n        getCollection().find().forEach(vetReview -> {\n            vetReviews.add(vetReview);\n        });\n        return vetReviews;\n    }\n    @Override\n    public VetReview findByReviewId(String reviewId) {\n        return getCollection().find(eq(\"reviewId\", \n         reviewId)).first();\n    }\n    @Override\n    public VetReview save(VetReview vetReview) {\n        getCollection().insertOne(vetReview).\n         getInsertedId();\n        return findByReviewId(vetReview.getReviewId());\n    }\n    @Override\n    public void delete(String reviewId) {\n        getCollection().deleteOne(eq(\"reviewId\", \n         reviewId));\n    }\n    private MongoCollection<VetReview> getCollection() {\n        return mongoClient\n                .getDatabase(mongoConfiguration.getDatabaseName())\n                .getCollection(mongoConfiguration.getCollectionName(), VetReview.class);\n    }\n}\n```", "```java\npublic interface VetReviewService {\n    List<VetReview> findAll();\n    VetReview findByReviewId(String reviewId);\n    VetReview save(VetReview vetReview);\n    void delete(String reviewId);\n}\n```", "```java\n@Singleton\npublic class VetReviewServiceImpl implements VetReviewService {\n    private final VetReviewRepository vetReviewRepository;\n    public VetReviewServiceImpl(VetReviewRepository \n      vetReviewRepository) {\n        this.vetReviewRepository = vetReviewRepository;\n    }\n    @Override\n    public List<VetReview> findAll() {\n        return vetReviewRepository.findAll();\n    }\n    @Override\n    public VetReview findByReviewId(String reviewId) {\n        return \n         vetReviewRepository.findByReviewId(reviewId);\n    }\n    @Override\n    public VetReview save(VetReview vetReview) {\n        return vetReviewRepository.save(vetReview);\n    }\n    @Override\n    public void delete(String reviewId) {\n        vetReviewRepository.delete(reviewId);\n    }\n}\n```", "```java\n@Singleton\n@Requires(beans = MongoClient.class)\npublic class PetClinicReviewCliClient {\n    private final Logger log = LoggerFactory.getLogger\n     (PetClinicReviewCliClient.class);\n    private final VetReviewService vetReviewService;\n    public PetClinicReviewCliClient(VetReviewService \n      vetReviewService) {\n        this.vetReviewService = vetReviewService;\n    }\n}\n```", "```java\nprotected void performFindAll() {\n    List<VetReview> vetReviews = \n     this.vetReviewService.findAll();\n    … iterate over vetReviews\n}\nprotected void performFindByReviewId(String reviewId) {\n    VetReview vetReview = \n     vetReviewService.findByReviewId(reviewId);\n    log.info(\"Review: {}\", vetReview);\n}\n```", "```java\nprotected VetReview performSave() {\n    VetReview vetReview = new VetReview(\n            UUID.randomUUID().toString(),\n            1L,\n            3.5,\n            \"Good experience\",\n            LocalDate.now());\n    return vetReviewService.save(vetReview);\n}\n```", "```java\nprotected void performDelete(VetReview vetReview) {\n    vetReviewService.delete(vetReview.getReviewId());\n}\n```", "```java\n@Singleton\npublic class Application {\n    private final PetClinicReviewCliClient \n     petClinicReviewCliClient;\n    public Application(PetClinicReviewCliClient \n     petClinicReviewCliClient) {\n        this.petClinicReviewCliClient = \n         petClinicReviewCliClient;\n    }\n    public static void main(String[] args) {\n        Micronaut.run(Application.class, args);\n    }\n    @EventListener\n    void init(StartupEvent event) {\n        petClinicReviewCliClient.\n         performDatabaseOperations();\n    }\n}\n```"]