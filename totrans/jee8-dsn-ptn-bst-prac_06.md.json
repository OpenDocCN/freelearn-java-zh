["```java\nimport java.io.File;\n\npublic class FileEvent {\n\n    private File file;\n\n    private String mimeType;\n\n    public FileEvent(){}\n\n    public FileEvent(File file, String mimeType){\n\n        this.file = file;\n        this.mimeType = mimeType;\n\n    }\n\n    public File getFile() {\n        return file;\n    }\n\n    public void setFile(File file) {\n        this.file = file;\n    }\n\n    public String getMimeType() {\n        return mimeType;\n    }\n\n    public void setMimeType(String mimeType) {\n        this.mimeType = mimeType;\n    }\n}\n```", "```java\nimport javax.inject.Qualifier;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Qualifier\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER, ElementType.FIELD})\npublic @interface Jpg {\n}\n```", "```java\nimport javax.inject.Qualifier;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Qualifier\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER, ElementType.FIELD})\npublic @interface Pdf {\n```", "```java\nimport javax.inject.Qualifier;\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\n@Qualifier\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.PARAMETER, ElementType.FIELD})\npublic @interface Zip {\n}\n```", "```java\nimport javax.enterprise.event.Event;\nimport javax.enterprise.util.AnnotationLiteral;\nimport javax.inject.Inject;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\nimport java.io.File;\nimport java.util.Objects;\n\n@Path(\"upload\")\npublic class FileUploadResource {\n\n    @Inject\n    Event<FileEvent> fileEvent;\n\n    @Consumes(\"application/pdf\")\n    @POST\n    public Response uploadPdf(File file){\n\n        FileEvent fileEvent = new FileEvent(file, \"pdf\");\n\n        Event<FileEvent> pdfEvent = this.fileEvent.select(new \n        AnnotationLiteral<Pdf>() {});\n\n        pdfEvent.fireAsync(fileEvent)\n                .whenCompleteAsync((event, err)->{\n\n                    if( Objects.isNull( err ) )\n                        System.out.println(\"PDF saved\");\n                    else\n                        err.printStackTrace();\n\n                });\n\n        return Response.ok().build();\n\n    }\n\n    @Consumes(\"image/jpeg\")\n    @POST\n    public Response uploadJpg(File file){\n\n        FileEvent fileEvent = new FileEvent(file, \"jpg\");\n\n        Event<FileEvent> jpgEvent = this.fileEvent.select( new \n        AnnotationLiteral<Jpg>() {} );\n\n        jpgEvent.fireAsync(fileEvent)\n                .whenCompleteAsync((event, err)->{\n\n                    if( Objects.isNull( err ) )\n                        System.out.println( \"JPG saved\" );\n                    else\n                        err.printStackTrace();\n\n                });\n\n        return Response.ok().build();\n\n    }\n\n    @Consumes(\"application/zip\")\n    @POST\n    public Response uploadZip( File file){\n\n        FileEvent fileEvent = new FileEvent( file, \"zip\" );\n\n        Event<FileEvent> zipEvent = this.fileEvent.select(new \n        AnnotationLiteral<Zip>() {});\n\n        zipEvent.fireAsync(fileEvent)\n                .whenCompleteAsync( (event, err)->{\n\n                    if( Objects.isNull( err ) )\n                        System.out.println( \"PDF saved\" );\n                    else\n                        err.printStackTrace();\n\n                });\n\n        return Response.ok().build();\n\n    }\n}\n```", "```java\nEvent, using an annotation as a qualifier:\n```", "```java\nEvent<FileEvent> zipEvent = this.fileEvent.select(new AnnotationLiteral<Zip>() {});\n\n```", "```java\n@Inject\n@Pdf //Qualifier \nEvent<FileEvent> pdfEvent;\n\n```", "```java\n zipEvent.fireAsync(fileEvent)\n                .whenCompleteAsync( (event, err)->{\n\n                    if( Objects.isNull( err ) )\n                        System.out.println( \"PDF saved\" );\n                    else\n                        err.printStackTrace();\n\n                });\n```", "```java\nimport java.io.IOException;\n\npublic interface FileHandler {\n\n    public void handle( FileEvent file ) throws IOException;\n}\n```", "```java\nimport javax.enterprise.event.ObservesAsync;\nimport java.io.IOException;\nimport java.util.Date;\n\npublic class JpgHandler implements FileHandler {\n\n    @Override\n    public void handle(@ObservesAsync @Jpg FileEvent file) throws  \n    IOException {\n\n       FileSystemUtils.save( file.getFile(),\"jpg\",\"jpg_\"+ new \n       Date().getTime() + \".jpg\" );\n\n    }\n}\n```", "```java\nimport javax.enterprise.event.ObservesAsync;\nimport java.io.IOException;\nimport java.util.Date;\n\npublic class PdfHandler implements FileHandler {\n\n    @Override\n    public void handle(@ObservesAsync @Pdf FileEvent file) throws \n    IOException {\n\n         FileSystemUtils.save( file.getFile(),\"pdf\",\"pdf_\"+ new \n         Date().getTime() + \".pdf\" );\n\n    }\n}\n```", "```java\nimport javax.enterprise.event.ObservesAsync;\nimport java.io.IOException;\nimport java.util.Date;\n\npublic class ZipHandler implements FileHandler {\n\n    @Override\n    public void handle(@ObservesAsync @Zip FileEvent file) throws \n    IOException {\n\n        FileSystemUtils.save( file.getFile(),\"zip\",\"zip_\"+ new \n        Date().getTime() + \".zip\" );\n\n    }\n}\n```", "```java\nimport javax.ejb.AsyncResult;\nimport javax.ejb.Asynchronous;\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.concurrent.Future;\n\n@Stateless\npublic class PdfHandler {\n\n    @Asynchronous\n    public Future<String> handler (FileBean file) throws IOException {\n\n        return new AsyncResult(\n                FileSystemUtils.save(\n                        file.getFile(),\n                        \"pdf\",\n                        \"pdf_\"+ new Date().getTime() + \".pdf\" ));\n\n    }\n}\n```", "```java\n @Asynchronous\n public Future<String> handler (FileBean file) throws IOException {\n        //Business logic\n }\n```", "```java\nreturn new AsyncResult(\n                FileSystemUtils.save(\n                        file.getFile(),\n                        \"pdf\",\n                        \"pdf_\"+ new Date().getTime() + \".pdf\" ));\n```", "```java\nimport javax.ejb.AsyncResult;\nimport javax.ejb.Asynchronous;\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.concurrent.Future;\n\n@Stateless\npublic class JpgHandler {\n\n    @Asynchronous\n    public Future<String> handler (FileBean file) throws IOException {\n\n        return new AsyncResult(\n                FileSystemUtils.save(\n                        file.getFile(),\n                        \"jpg\",\n                        \"jpg_\"+ new Date().getTime() + \".jpg\" ));\n\n    }\n}\n```", "```java\nimport javax.ejb.AsyncResult;\nimport javax.ejb.Asynchronous;\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\nimport java.util.concurrent.Future;\n\n@Stateless\npublic class ZipHandler {\n\n    @Asynchronous\n    public Future<String> handler (FileBean file) throws IOException {\n\n        return new AsyncResult(\n                FileSystemUtils.save(\n                        file.getFile(),\n                        \"zip\",\n                        \"zip_\"+ new Date().getTime() + \".zip\" ));\n\n    }\n}\n```", "```java\nimport javax.inject.Inject;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport javax.ws.rs.core.Response;\nimport java.io.File;\nimport java.io.IOException;\n\n@Path(\"upload\")\npublic class FileUploadResource {\n\n    @Inject\n    private PdfHandler pdfHandler;\n\n    @Inject\n    private JpgHandler jpgHandler;\n\n    @Inject\n    private ZipHandler zipHandler;\n\n    @Consumes(\"application/pdf\")\n    @POST\n    public Response uploadPdf(File file) throws IOException {\n\n        FileBean fileBean = new FileBean(file, \"pdf\");\n\n        pdfHandler.handler( fileBean );\n\n        return Response.ok().build();\n\n    }\n\n    @Consumes(\"image/jpeg\")\n    @POST\n    public Response uploadJpg(File file) throws IOException {\n\n        FileBean fileBean = new FileBean(file, \"jpg\");\n\n        jpgHandler.handler( fileBean );\n\n        return Response.ok().build();\n    }\n\n    @Consumes(\"application/zip\")\n    @POST\n    public Response uploadZip( File file) throws IOException {\n\n        FileBean fileBean = new FileBean( file, \"zip\" );\n\n        zipHandler.handler( fileBean );\n\n        return Response.ok().build();\n\n    }\n}\n```", "```java\n    @Inject\n    private PdfHandler pdfHandler;\n\n    @Inject\n    private JpgHandler jpgHandler;\n\n    @Inject\n    private ZipHandler zipHandler;\n\n```", "```java\n    FileBean fileBean = new FileBean(file, \"pdf\");\n    pdfHandler.handler( fileBean );\n```", "```java\n    FileBean fileBean = new FileBean(file, \"jpg\");\n    jpgHandler.handler( fileBean );\n```", "```java\n    FileBean fileBean = new FileBean( file, \"zip\" );\n    zipHandler.handler( fileBean );\n\n```", "```java\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\n\n@Stateless\npublic class PdfHandler {\n\n    public String handler (FileBean file) throws IOException {\n\n        return FileSystemUtils.save(\n                file.getFile(),\n                \"pdf\",\n                \"pdf_\"+ new Date().getTime() + \".pdf\" );\n\n    }\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\n\n@Stateless\npublic class JpgHandler {\n\n    public String handler (FileBean file) throws IOException {\n\n        return FileSystemUtils.save(\n                        file.getFile(),\n                        \"jpg\",\n                        \"jpg_\"+ new Date().getTime() + \".jpg\" );\n\n    }\n}\n```", "```java\nimport javax.ejb.Stateless;\nimport java.io.IOException;\nimport java.util.Date;\n\n@Stateless\npublic class ZipHandler {\n\n    public String handler (FileBean file) throws IOException {\n\n        return FileSystemUtils.save(\n                file.getFile(),\n                \"zip\",\n                \"zip_\"+ new Date().getTime() + \".zip\" );\n\n    }\n}\n```", "```java\nimport javax.annotation.Resource;\nimport javax.enterprise.concurrent.ManagedExecutorService;\nimport javax.enterprise.context.spi.CreationalContext;\nimport javax.enterprise.inject.spi.Bean;\nimport javax.enterprise.inject.spi.BeanManager;\nimport javax.naming.InitialContext;\nimport javax.naming.NamingException;\nimport javax.ws.rs.Consumes;\nimport javax.ws.rs.POST;\nimport javax.ws.rs.Path;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.concurrent.CompletableFuture;\nimport java.util.concurrent.CompletionStage;\n\n@Path(\"upload\")\npublic class FileUploadResource {\n\n    @Resource\n    private ManagedExecutorService executor;\n\n    @Consumes(\"application/pdf\")\n    @POST\n    public CompletionStage<String> uploadPdf(File file) {\n\n        BeanManager beanManager = getBeanManager();\n\n        CompletableFuture<String> completionStage = new \n        CompletableFuture<>();\n        executor.execute(() -> {\n            FileBean fileBean = new FileBean(file, \"pdf\");\n\n            Bean<PdfHandler> bean = (Bean) \n            beanManager.getBeans(PdfHandler.class).iterator().next();\n            CreationalContext cCtx = \n            beanManager.createCreationalContext(bean);\n            PdfHandler pdfHandler = (PdfHandler) \n            beanManager.getReference(bean, PdfHandler.class, cCtx);\n\n            try {\n\n              completionStage.complete(pdfHandler.handler( fileBean ));\n            } catch (IOException e) {\n                e.printStackTrace();\n                completionStage.completeExceptionally(e);\n            }\n\n        });\n\n        return completionStage;\n    }\n\n    private BeanManager getBeanManager(){\n        try {\n            // manual JNDI lookupCDI for the CDI bean manager (JSR 299)\n           return (BeanManager) new InitialContext().lookup(\n                    \"java:comp/BeanManager\");\n\n        } catch (NamingException ex) {\n            throw new IllegalStateException(\n                    \"cannot perform JNDI lookup for CDI BeanManager\");\n        }\n    }\n\n    @Consumes(\"image/jpeg\")\n    @POST\n    public CompletionStage<String> uploadJpg(File file) throws \n    IOException {\n\n        BeanManager beanManager = getBeanManager();\n\n        CompletableFuture<String> completionStage = new \n        CompletableFuture<>();\n        executor.execute(() -> {\n            FileBean fileBean = new FileBean(file, \"jpg\");\n\n            Bean<JpgHandler> bean = (Bean) \n            beanManager.getBeans(JpgHandler.class).iterator().next();\n            CreationalContext cCtx = \n            beanManager.createCreationalContext(bean);\n            JpgHandler jpgHandler = (JpgHandler) \n            beanManager.getReference(bean, JpgHandler.class, cCtx);\n\n            try {\n\n            completionStage.complete(jpgHandler.handler( fileBean ));\n            } catch (IOException e) {\n                e.printStackTrace();\n                completionStage.completeExceptionally(e);\n            }\n\n        });\n\n        return completionStage;\n    }\n\n    @Consumes(\"application/zip\")\n    @POST\n    public CompletionStage<String> uploadZip( File file) throws \n    IOException {\n\n        BeanManager beanManager = getBeanManager();\n\n        CompletableFuture<String> completionStage = new \n        CompletableFuture<>();\n        executor.execute(() -> {\n            FileBean fileBean = new FileBean(file, \"zip\");\n\n            Bean<ZipHandler> bean = (Bean) \n            beanManager.getBeans(ZipHandler.class).iterator().next();\n            CreationalContext cCtx = \n            beanManager.createCreationalContext(bean);\n            ZipHandler zipHandler = (ZipHandler) \n            beanManager.getReference(bean, ZipHandler.class, cCtx);\n\n            try {\n\n             completionStage.complete(zipHandler.handler( fileBean ));\n            } catch (IOException e) {\n                e.printStackTrace();\n                completionStage.completeExceptionally(e);\n            }\n\n        });\n\n        return completionStage;\n\n    }\n}\n```", "```java\nFileUploadResource, which has an executor attribute injection:\n```", "```java\n @Resource\n private ManagedExecutorService executor;\n\n```", "```java\n    @Consumes(\"application/pdf\")\n    @POST\n    public CompletionStage<String> uploadPdf(File file) {\n\n        BeanManager beanManager = getBeanManager();\n\n        CompletableFuture<String> completionStage = new \n        CompletableFuture<>();\n        executor.execute(() -> {\n            FileBean fileBean = new FileBean(file, \"pdf\");\n\n            //get the EJB by CDI    \n            Bean<PdfHandler> bean = (Bean)                                                    \n            beanManager.getBeans(PdfHandler.class).iterator().next();\n            CreationalContext cCtx =    \n             beanManager.createCreationalContext(bean);\n            PdfHandler pdfHandler = (PdfHandler) \n            beanManager.getReference(bean, PdfHandler.class, cCtx);\n\n            try {\n\n              completionStage.complete(pdfHandler.handler( fileBean ));\n            } catch (IOException e) {\n                e.printStackTrace();\n                completionStage.completeExceptionally(e);\n            }\n\n        });\n\n        return completionStage;\n\n    }\nAsyncResponse (@Suspended final AsyncResponse ar) as a parameter of the service method, or this method would need to return a CompletionState<T> to the client. In our example, we returned CompletionState to the client. Further, we need to create a separate thread in order to execute a nonblocking task. In the following code block, we have a code snippet of the uploadPdf method, which creates a separate task to call the task that saves the PDF file:\n```", "```java\nexecutor.execute(() -> {\n            FileBean fileBean = new FileBean(file, \"pdf\");\n\n            Bean<PdfHandler> bean = (Bean)     \n            beanManager.getBeans(PdfHandler.class).iterator().next();\n            CreationalContext cCtx = \n            beanManager.createCreationalContext(bean);\n            PdfHandler pdfHandler = (PdfHandler)  \n            beanManager.getReference(bean, PdfHandler.class, cCtx);\n\n            try {\n\n            completionStage.complete(pdfHandler.handler( fileBean ));\n            } catch (IOException e) {\n                e.printStackTrace();\n                completionStage.completeExceptionally(e);\n            }\n\n  });\n\n```", "```java\npublic class ClientAPI\n{\n    private static final String URL = \"http://localhost:8080/asyncRestService/resources/upload\";\n    private static final String FILE_PATH = \"test.pdf\";\n\n    public static void main( String[] args ) {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(URL);\n        try {\n            CompletionStage<String> csf = target.request()\n                    .rx()\n                    .post(Entity.entity(new FileInputStream(new \n                    File(FILE_PATH)),\"application/pdf\"),String.class);\n\n            csf.whenCompleteAsync((path, err)->{\n\n                if( Objects.isNull( err ) )\n                    System.out.println(\"File saved on: \" + path);\n                else\n                    err.printStackTrace();\n\n            });\n\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\nClientAPI, which defines a callback method to be executed after the asynchronous processing finishes:\n```", "```java\n csf.whenCompleteAsync((path, err)->{\n\n                if( Objects.isNull( err ) )\n                    System.out.println(\"File saved on: \" + path);\n                else\n                    err.printStackTrace();\n\n            });\n```"]