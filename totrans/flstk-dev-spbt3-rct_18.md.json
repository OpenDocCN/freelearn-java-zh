["```java\n// multi.ts\nexport const calcMulti = (x: number, y: number): number => {\n  return x * y;\n} \n```", "```java\n// multi.test.ts\nimport { calcMulti } from './multi';\ntest(\"2 * 3 equals 6\", ()  =>  {\n  expect(calcMulti(2, 3)).toBe(6);\n}); \n```", "```java\ndescribe(\"App component\", () => {\n  test(\"App component renders\", () => {\n    // 1st test case\n  })\n  test(\"Header text\", () => {\n    // 2nd test case\n  })\n}); \n```", "```java\nimport { render } from '@testing-library/react'\nrender(<MyComponent />); \n```", "```java\nimport { render, screen } from '@testing-library/react'\nrender(<MyComponent />);\n// Find text Hello World (case-insensitive)\nscreen.getByText(/Hello World/i); \n```", "```java\nscreen.getByText(\"Hello World\"); \n```", "```java\nimport { render, screen } from '@testing-library/react'\nimport matchers from '@testing-library/jest-dom/matchers ';\nrender(<MyComponent />);\nexpect(screen.getByText(/Hello World/i)).toBeInTheDocument(); \n```", "```java\n    npm install -D vitest @testing-library/react @testing-library/jest-\n      dom jsdom \n    ```", "```java\n    import { defineConfig } from 'vite/config'\n    import react from '@vitejs/plugin-react'\n    // https://vitejs.dev/config/\n    export default defineConfig({\n      plugins: [react()],\n      **test****: {**\n        **globals****:** **true****,**\n        **environment****:** **'jsdom'****,**\n      **},**\n    }) \n    ```", "```java\n    // Modify defineConfig import\n    import { defineConfig } from **'****vitest/config'** \n    ```", "```java\n    \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"tsc && vite build\",\n        \"lint\": \"eslint src --ext ts,tsx --report-unused-disable-             directives --max-warnings 0\",\n        \"preview\": \"vite preview\",\n        **\"test\"****:****\"vitest\"**\n      }, \n    ```", "```java\n    npm run test \n    ```", "```java\n['**/*.{test,spec}.?(c|m)[jt]s?(x)'] \n```", "```java\n    import { describe, test } from 'vitest';\n    describe(\"App tests\", () => {\n      test(\"component renders\", () => {\n      // Test case code\n      })\n    }); \n    ```", "```java\n    import { describe, test } from 'vitest';\n    **import** **{ render }** **from****'@testing-library/react'****;**\n    **import****App****from****'./App'****;**\n    describe(\"App tests\", () => {\n      test(\"component renders\", () => {\n        **render****(****<****App** **/>****);**\n      })\n    }); \n    ```", "```java\n    import { describe, test, **expect** } from 'vitest';\n    import { render, **screen** } from '@testing-library/react';\n    import App from './App';\n    describe(\"App tests\", () => {\n      test(\"component renders\", () => {\n        render(<App />);\n        **expect****(screen.****getByText****(****/Car Shop/i****)).****toBeDefined****();**\n      })\n    }); \n    ```", "```java\n    import { describe, test, expect } from 'vitest';\n    import { render, screen } from '@testing-library/react';\n    import App from './App';\n    **import****'@testing-library/jest-dom/vitest'****;**\n    describe(\"App tests\", () => {\n      test(\"component renders\", () => {\n        render(<App />);\n        expect(screen.getByText(/Car Shop/i\n            ))**.toBeInTheDocument****();**\n      })\n    }); \n    ```", "```java\n    npm run test \n    ```", "```java\n// vite.config.ts\ntest: {\n  **setupFiles****: [****'./src/testSetup.ts'****],**\n  globals: true,\n  environment: 'jsdom',\n}, \n```", "```java\n    import { describe, expect, test } from 'vitest';\n    import { render, screen } from '@testing-library/react';\n    import '@testing-library/jest-dom/vitest';\n    import Carlist from './components/Carlist';\n    describe(\"Carlist tests\", () => {\n      test(\"component renders\", () => {\n        render(<Carlist />);\n        expect(screen.getByText(/Loading/i)).toBeInTheDocument();\n      })\n    }); \n    ```", "```java\n    **import** **{** **QueryClient****,** **QueryClientProvider** **}** **from**\n      **'@tanstack/react-query'****;**\n    import { describe, test } from 'vitest';\n    import { render, screen } from '@testing-library/react';\n    import '@testing-library/jest-dom/vitest';\n    import Carlist from './components/Carlist';\n    **const** **queryClient =** **new****QueryClient****({**\n      **defaultOptions****: {**\n        **queries****: {**\n          **retry****:** **false****,**\n        **},**\n      **},**\n    **});**\n    **const****wrapper** **= (****{**\n      **children } : { children: React.ReactNode }****) => (**\n        **<****QueryClientProvider****client****=** **{**\n          **queryClient}****>****{children}**\n        **</****QueryClientProvider****>****);**\n    describe(\"Carlist tests\", () => {\n      test(\"component renders\", () => {\n        render(<Carlist />, **{ wrapper }**);\n      expect(screen.getByText(/Loading/i)).toBeInTheDocument();\n      })\n    }); \n    ```", "```java\n    import { render, screen, waitFor } from '@testing-library/\n      react'; \n    ```", "```java\n    describe(\"Carlist tests\", () => {\n      test(\"component renders\", () => {\n        render(<Carlist />, { wrapper });\n        expect(screen.getByText(/Loading/i)\n          ).toBeInTheDocument();\n      })\n      **test****(****\"Cars are fetched\"****,** **async** **() => {**\n        **render****(****<****Carlist** **/>****, { wrapper });**\n        **await****waitFor****(****() =>** **screen.****getByText****(****/New Car/i****));**\n        **expect****(screen.****getByText****(****/Ford/i****)).****toBeInTheDocument****();**\n      **})**\n    }); \n    ```", "```java\nimport { render, screen, fireEvent } from '@testing-library/react'; \n```", "```java\n// Find input element by placeholder text\nconst input = screen.getByPlaceholderText('Name');\n// Set input element's value\nfireEvent.change(input, {target: {value: 'John'}});\n// Find button element by text\nconst btn = screen.getByText('Submit');\n// Click button\nfireEvent.click(btn); \n```", "```java\nnpm install -D @testing-library/user-event \n```", "```java\nimport userEvent from '@testing-library/user-event'; \n```", "```java\n// Click a button\nawait userEvent.click(element);\n// Type a value into an input element\nawait userEvent.type(element, value); \n```", "```java\n    import userEvent from '@testing-library/user-event'; \n    ```", "```java\n    test(\"Open new car modal\", async () => {\n      render(<Carlist />, { wrapper });\n      await waitFor(() => screen.getByText(/New Car/i));\n    }) \n    ```", "```java\n    test(\"Open new car modal\", async () => {\n      render(<Carlist />, { wrapper });\n      await waitFor(() => screen.getByText(/New Car/i));\n      **await** **userEvent.****click****(screen.****getByText****(****/New Car/i****));**\n      **expect****(screen.****getByText****(****/Save/i****)).****toBeInTheDocument****();**\n    }) \n    ```", "```java\n    screen.getByRole('button', { name: 'Save' }); \n    ```", "```java\n    expect(screen.getByText(/Saving/i)).toBeInTheDocument(); \n    ```"]