["```java\nAssuming the role of a Senior Software Engineer in charge of implementing a set of APIs to support the Products resource\nGenerate a JUnit 5 test case for the \"Create or Update Product\" API endpoint in a Spring Boot application.\nThe endpoint uses the HTTP PUT method at the path /api/products/{productId}, where {productId} is a path variable validated with the format AA99999.\nThe request body is a ProductInput object, and the response is a ProductOutput object.\nThe test should cover two scenarios:\n1 - Creating a New Product: When a new productId is provided, the API should create a new product and return HTTP status 201 Created. Verify that the response body contains the expected ProductOutput.\n2 - Updating an Existing Product: When an existing productId is provided, the API should update the product and return HTTP status 200 OK. Verify that the response body contains the updated ProductOutput.\nAssume a running instance of this API running on http:8080\nInclude at least assertions for:\n- HTTP status codes (201 Created and 200 OK)\n- Response headers (if applicable)\n- Response body content\n- Validation that the productId follows the format AA99999\nStructure the test methods clearly, using descriptive names for each scenario.\nProduct is defined by the following classes - assume the expected Get and Set methods are present.\npublic class Product {\n  private String name;\n  private String sku;\n  private String description;\n  private BigDecimal price;\n  public Product() {\n    super();\n  }\n  public Product(String name, String sku, String description,\n                 BigDecimal price) {\n    this.name = name;\n    this.sku = sku;\n    this.description = description;\n    this.price = price;\n  }\n}\npublic record ProductDescriptionInput(@NotBlank\n                                      @Size(min = 10, max = 255)\n                                      String description) {\n}\npublic record ProductInput(\n        @NotBlank\n        @Size(min = 3, max = 255)\n        @JsonProperty(\"name\")\n        String name,\n        @NotBlank\n        @Size(min = 10, max = 255)\n        @JsonProperty(\"description\")\n        String description,\n        @NotNull\n        @Positive\n        @JsonProperty(\"price\")\n        BigDecimal price) {\n    public Product toProduct(String productId) {\n        return new Product(name(),\n                productId,\n                description(),\n                price());\n    }\n}\npublic record ProductOutput(String name, String sku, String description, \n                            BigDecimal price) {\n} \n```", "```java\n\"Assuming the role of a Senior Software Engineer in charge of implementing a set of APIs to support the Products resource\" \n```", "```java\n\"Generate a JUnit 5 test case for the \"Create or Update Product\" API endpoint in a Spring Boot application.\"\n\"The test should cover two scenarios:… \" \n```", "```java\n\"The endpoint uses the HTTP PUT method at the path /api/products/{productId}, ….\" \n```", "```java\n\"Include at least assertions for:\n- HTTP status codes (201 Created and 200 OK)\n- Response headers (if applicable) …\" \n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n<dependency>\n    <groupId>io.projectreactor</groupId>\n    <artifactId>reactor-test</artifactId>\n    <scope>test</scope>\n</dependency>\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.test.web.reactive.server.WebTestClient;\nimport java.math.BigDecimal;\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\npublic class ProductsApiControllerTest {\n    @Autowired\n    private WebTestClient webTestClient;\n    @Test\n    void shouldCreateNewProduct_whenValidInputProvided() {\n        // Arrange\n        String productId = \"AA12345\";\n        ProductInput productInput = new ProductInput(\n                \"Test Product\",\n                \"A detailed description for the product\",\n                BigDecimal.valueOf(99.99)\n        );\n        // Act & Assert\n        webTestClient.put()\n                .uri(\"/api/products/{productId}\", productId)\n                .bodyValue(productInput)\n                .exchange()\n                .expectStatus().isCreated()\n                .expectHeader().exists(\"Location\") // Optional: Check if Location header exists\n                .expectBody(ProductOutput.class)\n                .value(response -> {\n                    // Assert response body content\n                    assert response.name().equals(productInput.name());\n                    assert response.sku().equals(productId);\n                    assert response.description().equals(\n                      productInput.description());\n                    assert response.price().compareTo(\n                      productInput.price()) == 0;\n                });\n    }\n    @Test\n    void shouldUpdateExistingProduct_whenValidInputProvided() {\n        // Arrange\n        String productId = \"AA67890\"; // Assume this product already exists in the system\n        ProductInput productInput = new ProductInput(\n                \"Updated Product\",\n                \"An updated description for the product\",\n                BigDecimal.valueOf(149.99)\n        );\n        // Act & Assert\n        webTestClient.put()\n                .uri(\"/api/products/{productId}\", productId)\n                .bodyValue(productInput)\n                .exchange()\n                .expectStatus().isOk()\n                .expectBody(ProductOutput.class)\n                .value(response -> {\n                    // Assert response body content\n                    assert response.name().equals(productInput.name());\n                    assert response.sku().equals(productId);\n                    assert response.description().equals(\n                      productInput.description());\n                    assert response.price().compareTo(\n                      productInput.price()) == 0;\n                });\n    }\n    @Test\n    void shouldRejectInvalidProductIdFormat() {\n        // Arrange\n        String invalidProductId = \"INVALID123\";\n        ProductInput productInput = new ProductInput(\n                \"Invalid Product\",\n                \"An invalid description\",\n                BigDecimal.valueOf(49.99)\n        );\n        // Act & Assert\n        webTestClient.put()\n                .uri(\"/api/products/{productId}\", invalidProductId)\n                .bodyValue(productInput)\n                .exchange()\n                .expectStatus().isBadRequest(); // Assuming the API enforces validation on productId\n    }\n} \n```", "```java\n\"Generate a Go test case for the \"Create or Update Product\" API endpoint in a Spring Boot application.\" \n```", "```java\nhttps://hapi.fhir.org/baseR4/Patient?_format=json&_count=1 \n```", "```java\n{  \"resourceType\": \"Bundle\",\n  \"id\": \"241fc9a1-3d08-4c1c-95a9-6ac315d178a8\",\n  \"meta\": {\n    \"lastUpdated\": \"2024-11-18T13:05:22.536+00:00\"\n  },\n  \"type\": \"searchset\",\n  \"link\": [\n    {\n      \"relation\": \"self\",\n      \"url\": \"https://hapi.fhir.org/baseR4/Patient?_count=1&_format=json\"\n    },\n    {\n      \"relation\": \"next\",\n      \"url\": \"https://hapi.fhir.org/baseR4?_getpages=241fc9a1-3d08-4c1c-95a9-6ac315d178a8&_getpagesoffset=1&_count=1&_format=json&_pretty=true&_bundletype=searchset\"\n    }\n  ],\n  \"entry\": [\n    {\n      \"fullUrl\": \"https://hapi.fhir.org/baseR4/Patient/596484\",\n      \"resource\": {\n        \"resourceType\": \"Patient\",\n        \"id\": \"596484\",\n        \"meta\": {\n          \"versionId\": \"1\",\n          \"lastUpdated\": \"2020-02-01T17:42:02.000+00:00\",\n          \"source\": \"#McyYCIRVGrcmfKSf\"\n        },\n        \"text\": {\n          \"status\": \"generated\",\n          \"div\": \"<div xmlns…div>\"\n        },\n        \"name\": [\n          {\n            \"family\": \"DelGrosso\",\n            \"given\": [\n              \"Joe\"\n            ]\n          }\n        ],\n        \"telecom\": [\n          {\n            \"system\": \"phone\",\n            \"value\": \"1(555)123-4567\",\n            \"use\": \"home\"\n          }\n        ],\n        \"gender\": \"male\",\n        \"birthDate\": \"1985-09-11\",\n        \"address\": [\n          {\n            \"use\": \"home\",\n            \"line\": [\n              \"155 Quick Rd\"\n            ],\n            \"city\": \"Fun City\",\n            \"state\": \"NY\",\n            \"postalCode\": \"10101\",\n            \"country\": \"US\"\n          }\n        ]\n      },\n      \"search\": {\n        \"mode\": \"match\"\n      }\n    }\n  ]\n} \n```", "```java\nAssuming the role of a Senior Software Engineer working on a HAPI FHIR customization project.\nPrepare a test case that will make a call to the following URL: https://hapi.fhir.org/baseR4/Patient?_format=json&_count=1\nMake sure to validate that the response is in a JSON format and contains:\n- a single 'resourceType' of 'Bundle'\n- a single 'type' of 'searchset'\n- a single 'id' in the format of an UUID\nUse JAVA Junit 5\nHere is a sample result set. The actual values of each element will vary from each call.\n{\n  \"resourceType\": \"Bundle\",\n  \"id\": \"241fc9a1-3d08-4c1c-95a9-6ac315d178a8\",\n  \"meta\": {\n    \"lastUpdated\": \"2024-11-18T13:05:22.536+00:00\"\n…. \n```", "```java\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.client.RestTemplate;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.util.UUID;\nclass HapiFhirTest {\n    private static final String HAPI_FHIR_URL =\n      \"https://hapi.fhir.org/baseR4/Patient?_format=json&_count=1\";\n    @Test\n    void testHapiFhirResponse() {\n        // Set up RestTemplate for HTTP call\n        RestTemplate restTemplate = new RestTemplate();\n        // Make the HTTP GET call\n        ResponseEntity<String> response = restTemplate.getForEntity(\n          HAPI_FHIR_URL, String.class);\n        // Assert the response is not null and has a 200 status code\n        assertNotNull(response);\n        assertEquals(200, response.getStatusCodeValue());\n        // Assert the response body is not null\n        String responseBody = response.getBody();\n        assertNotNull(responseBody);\n        try {\n            // Parse the response body as JSON\n            ObjectMapper objectMapper = new ObjectMapper();\n            JsonNode jsonNode = objectMapper.readTree(responseBody);\n            // Assert 'resourceType' is present and equals 'Bundle'\n            assertTrue(jsonNode.has(\"resourceType\"));\n            assertEquals(\"Bundle\", jsonNode.get(\"resourceType\").asText());\n            // Assert 'type' is present and equals 'searchset'\n            assertTrue(jsonNode.has(\"type\"));\n            assertEquals(\"searchset\", jsonNode.get(\"type\").asText());\n            // Assert 'id' is present and is a valid UUID\n            assertTrue(jsonNode.has(\"id\"));\n            String id = jsonNode.get(\"id\").asText();\n            assertTrue(isValidUUID(id));\n        } catch (Exception e) {\n            fail(\"Exception occurred while processing the response: \" +\n                  e.getMessage());\n        }\n    }\n    /**\n     * Utility method to validate if a string is a valid UUID.\n     *\n     * @param uuid the string to validate\n     * @return true if valid UUID, false otherwise\n     */\n    private boolean isValidUUID(String uuid) {\n        try {\n            UUID.fromString(uuid);\n            return true;\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    }\n}\nWith the accompanying dependencies in pom.xml\n<dependency>\n    <groupId>org.springframework</groupId>\n    <artifactId>spring-web</artifactId>\n    <version>5.3.30</version>\n</dependency>\n<dependency>\n    <groupId>com.fasterxml.jackson.core</groupId>\n    <artifactId>jackson-databind</artifactId>\n    <version>2.15.2</version>\n</dependency>\n<dependency>\n    <groupId>org.junit.jupiter</groupId>\n    <artifactId>junit-jupiter</artifactId>\n    <version>5.10.0</version>\n</dependency> \n```", "```java\n \"link\": [\n    {\n      \"relation\": \"self\",\n      \"url\": \"https://hapi.fhir.org/baseR4/Patient?_count=1&_format=json\"\n    },\n    {\n      \"relation\": \"next\",\n      \"url\": \"https://hapi.fhir.org/...\"\n    }\n  ], \n```", "```java\nAssuming the role of a Senior Software Engineer working on a HAPI FHIR customization project.\nPrepare a test case that will make a call to the following URL: https://hapi.fhir.org/baseR4/Patient?_format=json&_count=1\nMake sure to validate that the response is in a JSON format and contains:\n- a single 'resourceType' of 'Bundle'\n- a single 'type' of 'searchset'\n- a single 'id' in the format of an UUID\nValidate that array \"link\" is present and that there is one element with \"relation = self\"\nUse JAVA Junit 5\n… \n```", "```java\n// Validate link array\nassertTrue(jsonNode.has(\"link\"), \"Response does not contain 'link'\");\nJsonNode links = jsonNode.get(\"link\");\nassertTrue(links.isArray(), \"link is not an array\");\nboolean hasSelfLink = false;\nfor (JsonNode link : links) {\n    if (link.has(\"relation\") && \"self\".equals(\n        link.get(\"relation\").asText())) {\n        hasSelfLink = true;\n        break;\n    }\n}\nassertTrue(hasSelfLink, \"No link with 'relation' = 'self'\"); \n```", "```java\nAssuming the role of a Senior Software Engineer working on a HAPI FHIR customization project.\nPrepare a test case that will make a call to the following URL: https://hapi.fhir.org/baseR4/Patient?_format=json&_count=1\nMake sure to validate that the response is in a JSON format and contains:\n- a single 'resourceType' of 'Bundle'\n- a single 'type' of 'searchset'\n- an single 'id' in the format of an UUID\nValidate that array \"link\" is present and that there is one element with \"relation = self\"\nNow, follow the \"next\" link for at most 5 pages or until the last page. Validate each page.\nIn each \"entry\" there is a \"fullUrl\" attribute. Threat it as a key and validate that it is present in every \"entry\".\nAlso, make sure that the entries are unique and there is no repetition.\nUse JAVA Junit 5 \n```", "```java\npublic class HapiFhirPaginationTest {\n    @Test\n    void testHapiFhirPatientPagination() throws Exception {\n        String baseUrl =\n          \"https://hapi.fhir.org/baseR4/Patient?_format=json&_count=1\";\n        ObjectMapper mapper = new ObjectMapper();\n        String nextUrl = baseUrl;\n        int pageCount = 0;\n        Set<String> uniqueFullUrls = new HashSet<>();\n        while (nextUrl != null && pageCount < 5) {\n            HttpURLConnection connection = createConnection(nextUrl);\n            int responseCode = connection.getResponseCode();\n            assertEquals(200, responseCode,\n                         \"Expected HTTP status code 200\");\n            InputStream responseStream = connection.getInputStream();\n            JsonNode response = mapper.readTree(responseStream);\n            validatePage(response, uniqueFullUrls);\n            nextUrl = getNextLink(response);\n            pageCount++;\n            connection.disconnect();\n        }\n    }\n    private HttpURLConnection createConnection(String urlString) throws Exception {\n        URL url = new URL(urlString);\n        HttpURLConnection connection = (HttpURLConnection)\n                                         url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        return connection;\n    }\n    private void validatePage(JsonNode response,\n                              Set<String> uniqueFullUrls) {\n        // Validate resourceType\n        assertTrue(response.has(\"resourceType\"),\n                   \"Response does not contain 'resourceType'\");\n        assertEquals(\"Bundle\", response.get(\"resourceType\").asText(), \n                     \"resourceType is not 'Bundle'\");\n        // Validate id is in UUID format\n        assertTrue(response.has(\"id\"), \"Response does not contain 'id'\");\n        String id = response.get(\"id\").asText();\n        assertTrue(isValidUUID(id), \"id is not a valid UUID\");\n        // Validate type\n        assertTrue(response.has(\"type\"),\n                   \"Response does not contain 'type'\");\n        assertEquals(\"searchset\", response.get(\"type\").asText(),\n                     \"type is not 'searchset'\");\n        // Validate link array\n        assertTrue(response.has(\"link\"),\n                   \"Response does not contain 'link'\");\n        JsonNode links = response.get(\"link\");\n        assertTrue(links.isArray(), \"link is not an array\");\n        boolean hasSelfLink = false;\n        for (JsonNode link : links) {\n            if (link.has(\"relation\") && \"self\".equals(link.get(\n                                        \"relation\").asText())) {\n                hasSelfLink = true;\n                break;\n            }\n        }\n        assertTrue(hasSelfLink, \"No link with 'relation' = 'self'\");\n        // Validate entries\n        if (response.has(\"entry\")) {\n            JsonNode entries = response.get(\"entry\");\n            for (JsonNode entry : entries) {\n                assertTrue(entry.has(\"fullUrl\"),\n                           \"Entry does not contain 'fullUrl'\");\n                String fullUrl = entry.get(\"fullUrl\").asText();\n                // Ensure fullUrl is unique\n                assertTrue(uniqueFullUrls.add(fullUrl),\n                           \"Duplicate fullUrl detected: \" + fullUrl);\n            }\n        }\n    }\n    private String getNextLink(JsonNode response) {\n        JsonNode links = response.get(\"link\");\n        for (JsonNode link : links) {\n            if (link.has(\"relation\") && \"next\".equals(link.get(\n                                        \"relation\").asText())) {\n                return link.get(\"url\").asText();\n            }\n        }\n        return null;\n    }\n    private boolean isValidUUID(String id) {\n        try {\n            UUID.fromString(id);\n            return true;\n        } catch (IllegalArgumentException e) {\n            return false;\n        }\n    }\n} \n```"]