["```java\npublic final class HealthCheck {\n private String event;\n private String factory;\n private String serialNumber;\n private String type;\n private String status;\n private Date lastStartedAt;\n private float temperature;\n private String ipAddress;\n}\n```", "```java\n{\n \"name\": \"HealthCheck\",\n \"namespace\": \"kioto.avro\",\n \"type\": \"record\",\n \"fields\": [\n { \"name\": \"event\", \"type\": \"string\" },\n { \"name\": \"factory\", \"type\": \"string\" },\n { \"name\": \"serialNumber\", \"type\": \"string\" },\n { \"name\": \"type\", \"type\": \"string\" },\n { \"name\": \"status\", \"type\": \"string\"},\n { \"name\": \"lastStartedAt\", \"type\": \"long\", \"logicalType\": \"timestamp-\n    millis\"},\n { \"name\": \"temperature\", \"type\": \"float\" },\n { \"name\": \"ipAddress\", \"type\": \"string\" }\n ]\n}\n```", "```java\n$./bin/confluent start\nStarting zookeeper\nzookeeper is [UP]\nStarting kafka\nkafka is [UP]\nStarting schema-registry\nschema-registry is [UP]\nStarting kafka-rest\nkafka-rest is [UP]\nStarting connect\nconnect is [UP]\nStarting ksql-server\nksql-server is [UP]\nStarting control-center\ncontrol-center is [UP]\n```", "```java\n$./bin/schema-registry-start etc/schema-registry/schema-registry.properties\n```", "```java\n...\n[2017-03-02 10:01:45,320] INFO Started NetworkTrafficServerConnector@2ee67803{HTTP/1.1,[http/1.1]}{0.0.0.0:8081}\n```", "```java\n$ curl -X POST -H \"Content-Type: application/vnd.schemaregistry.v1+json\" \\\n--data '{ \"schema\": \"{ \\\"name\\\": \\\"HealthCheck\\\", \\\"namespace\\\": \\\"kioto.avro\\\", \\\"type\\\": \\\"record\\\", \\\"fields\\\": [ { \\\"name\\\": \\\"event\\\", \\\"type\\\": \\\"string\\\" }, { \\\"name\\\": \\\"factory\\\", \\\"type\\\": \\\"string\\\" }, { \\\"name\\\": \\\"serialNumber\\\", \\\"type\\\": \\\"string\\\" }, { \\\"name\\\": \\\"type\\\", \\\"type\\\": \\\"string\\\" }, { \\\"name\\\": \\\"status\\\", \\\"type\\\": \\\"string\\\"}, { \\\"name\\\": \\\"lastStartedAt\\\", \\\"type\\\": \\\"long\\\", \\\"logicalType\\\": \\\"timestamp-millis\\\"}, { \\\"name\\\": \\\"temperature\\\", \\\"type\\\": \\\"float\\\" }, { \\\"name\\\": \\\"ipAddress\\\", \\\"type\\\": \\\"string\\\" } ]} \" }' \\\nhttp://localhost:8081/subjects/healthchecks-avro-value/versions\n```", "```java\n{\"id\":1}\n```", "```java\n$ curl http://localhost:8081/subjects/healthchecks-avro-value/versions/\n```", "```java\n[1]\n```", "```java\n$ curl http://localhost:8081/subjects/healthchecks-avro-value/versions/1\n```", "```java\n{\"subject\":\"healthchecks-avro-value\",\"version\":1,\"id\":1,\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"HealthCheck\\\",\\\"namespace\\\":\\\"kioto.avro\\\",\\\"fields\\\":[{\\\"name\\\":\\\"event\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"factory\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"serialNumber\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"type\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"lastStartedAt\\\",\\\"type\\\":\\\"long\\\",\\\"logicalType\\\":\\\"timestamp-millis\\\"},{\\\"name\\\":\\\"temperature\\\",\\\"type\\\":\\\"float\\\"},{\\\"name\\\":\\\"ipAddress\\\",\\\"type\\\":\\\"string\\\"}]}\"}\n```", "```java\ncurl -X POST -H \"Content-Type: application/vnd.schemaregistry.v1+json\"\\\n--data 'our escaped avro data' \\\nhttp://localhost:8081/subjects/healthchecks-avro-key/versions\n```", "```java\n{\"id\":1}\n```", "```java\ncurl -X POST -H \"Content-Type: application/vnd.schemaregistry.v1+json\"\\\n--data \"{\\\"schema\\\": $(curl -s http://localhost:8081/subjects/healthchecks-value1/versions/latest | jq '.schema')}\" \\\nhttp://localhost:8081/subjects/healthchecks-value2/versions\n```", "```java\n{\"id\":1}\n```", "```java\ncurl -X GET http://localhost:8081/subjects\n```", "```java\n[\"healthcheck-avro-value\",\"healthchecks-avro-key\"]\n```", "```java\ncurl -X GET http://localhost:8081/schemas/ids/1\n```", "```java\n{\"schema\":\"{\\\"type\\\":\\\"record\\\",\\\"name\\\":\\\"HealthCheck\\\",\\\"namespace\\\":\\\"kioto.avro\\\",\\\"fields\\\":[{\\\"name\\\":\\\"event\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"factory\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"serialNumber\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"type\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"string\\\"},{\\\"name\\\":\\\"lastStartedAt\\\",\\\"type\\\":\\\"long\\\",\\\"logicalType\\\":\\\"timestamp-millis\\\"},{\\\"name\\\":\\\"temperature\\\",\\\"type\\\":\\\"float\\\"},{\\\"name\\\":\\\"ipAddress\\\",\\\"type\\\":\\\"string\\\"}]}\"}\n```", "```java\ncurl -X GET http://localhost:8081/subjects/healthchecks-value/versions\n```", "```java\n[1]\n```", "```java\ncurl -X GET http://localhost:8081/subjects/ healthchecks-value/versions/1\n```", "```java\n{\"subject\":\" healthchecks-value\",\"version\":1,\"id\":1}\n```", "```java\ncurl -X DELETE http://localhost:8081/subjects/healthchecks-value/versions/1\n```", "```java\n1\n```", "```java\ncurl -X DELETE http://localhost:8081/subjects/healthchecks-value/versions/latest\n```", "```java\n2\n```", "```java\ncurl -X DELETE http://localhost:8081/subjects/healthchecks-value\n```", "```java\n[3]\n```", "```java\ncurl -X POST -H \"Content-Type: application/vnd.schemaregistry.v1+json\"\\\n--data 'our escaped avro data' \\\nhttp://localhost:8081/subjects/healthchecks-key\n```", "```java\n{\"subject\":\"healthchecks-key\",\"version\":3,\"id\":1}\n```", "```java\ncurl -X POST -H \"Content-Type: application/vnd.schemaregistry.v1+json\"\\\n--data 'our escaped avro data' \\\nhttp://localhost:8081/compatibility/subjects/healthchecks-value/versions/latest\n```", "```java\n{\"is_compatible\":true}\n```", "```java\ncurl -X GET http://localhost:8081/config\n```", "```java\n{\"compatibilityLevel\":\"BACKWARD\"}\n```", "```java\ncurl -X PUT -H \"Content-Type: application/vnd.schemaregistry.v1+json\" \\\n--data '{\"compatibility\": \"NONE\"}' \\\nhttp://localhost:8081/config\n```", "```java\n{\"compatibility\":\"NONE\"}\n```", "```java\ncurl -X PUT -H \"Content-Type: application/vnd.schemaregistry.v1+json\" \\\n--data '{\"compatibility\": \"BACKWARD\"}' \\\nhttp://localhost:8081/config/healthchecks-value\n```", "```java\n{\"compatibility\":\"BACKWARD\"}\n```", "```java\nrepositories {\n ...\n maven { url 'https://packages.confluent.io/maven/' }\n }\n```", "```java\ndependencies {\n ...\n compile 'io.confluent:kafka-avro-serializer:5.0.0'\n }\n```", "```java\nimport io.confluent.kafka.serializers.KafkaAvroSerializer; \nimport org.apache.avro.Schema;\nimport org.apache.avro.Schema.Parser;\nimport org.apache.avro.generic.GenericRecord;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\npublic final class AvroProducer {\n  private final Producer<String, GenericRecord> producer; //1\n  private Schema schema;\n\n  public AvroProducer(String brokers, String schemaRegistryUrl) { //2\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", brokers);\n    props.put(\"key.serializer\", StringSerializer.class); //3\n    props.put(\"value.serializer\", KafkaAvroSerializer.class); //4\n    props.put(\"schema.registry.url\", schemaRegistryUrl) //5\n    producer = new KafkaProducer<>(props);\n\n    try {\n      schema = (new Parser()).parse( new \n      File(\"src/main/resources/healthcheck.avsc\")); //6\n    } catch (IOException e) {\n      // deal with the Exception\n    }\n  }\n  ...\n}\n```", "```java\npackage kioto.avro;\nimport ...\npublic final class AvroProducer {\n /* here the Constructor code in Listing 5.3 */\n\n public final class AvroProducer {\n\n  private final Producer<String, GenericRecord> producer;\n  private Schema schema;\n\n  public AvroProducer(String brokers, String schemaRegistryUrl) {\n    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", brokers);\n    props.put(\"key.serializer\", StringSerializer.class);\n    props.put(\"value.serializer\", KafkaAvroSerializer.class);\n    props.put(\"schema.registry.url\", schemaRegistryUrl);\n    producer = new KafkaProducer<>(props);\n    try {\n      schema = (new Parser()).parse(new                   \n      File(\"src/main/resources/healthcheck.avsc\"));\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n\n  public final void produce(int ratePerSecond) {\n    long waitTimeBetweenIterationsMs = 1000L / (long)ratePerSecond;\n    Faker faker = new Faker();\n\n    while(true) {\n      HealthCheck fakeHealthCheck =\n          new HealthCheck(\n              \"HEALTH_CHECK\",\n              faker.address().city(),\n              faker.bothify(\"??##-??##\", true),\n              Constants.machineType.values()                                                                                                                 \n              [faker.number().numberBetween(0,4)].toString(),\n              Constants.machineStatus.values()                                        \n              [faker.number().numberBetween(0,3)].toString(),\n              faker.date().past(100, TimeUnit.DAYS),\n              faker.number().numberBetween(100L, 0L),\n              faker.internet().ipV4Address());\n              GenericRecordBuilder recordBuilder = new                                       \n              GenericRecordBuilder(schema);\n              recordBuilder.set(\"event\", fakeHealthCheck.getEvent());\n              recordBuilder.set(\"factory\", \n              fakeHealthCheck.getFactory());\n              recordBuilder.set(\"serialNumber\",                                          \n              fakeHealthCheck.getSerialNumber());\n              recordBuilder.set(\"type\", fakeHealthCheck.getType());\n              recordBuilder.set(\"status\", fakeHealthCheck.getStatus());\n              recordBuilder.set(\"lastStartedAt\",                                      \n              fakeHealthCheck.getLastStartedAt().getTime());\n              recordBuilder.set(\"temperature\",                                          \n              fakeHealthCheck.getTemperature());\n              recordBuilder.set(\"ipAddress\",   \n              fakeHealthCheck.getIpAddress());\n              Record avroHealthCheck = recordBuilder.build();\n              Future futureResult = producer.send(new ProducerRecord<>               \n              (Constants.getHealthChecksAvroTopic(), avroHealthCheck));\n      try {\n        Thread.sleep(waitTimeBetweenIterationsMs);\n        futureResult.get();\n      } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n      }\n    }\n  }\n\n  public static void main( String[] args) {\n    new AvroProducer(\"localhost:9092\",                                       \n    \"http://localhost:8081\").produce(2);\n  }\n}\n```", "```java\n$ gradle jar\n```", "```java\nBUILD SUCCESSFUL in 3s\n 1 actionable task: 1 executed\n```", "```java\n$ ./bin/confluent start\n```", "```java\n$ ./bin/kafka-topics --zookeeper localhost:2181 --create --topic healthchecks-avro --replication-factor 1 --partitions 4\n```", "```java\n$ ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic healthchecks-avro\n```", "```java\nHEALTH_CHECKLake JeromyGE50-GF78HYDROELECTRICRUNNING�����Y,B227.30.250.185\nHEALTH_CHECKLockmanlandMW69-LS32GEOTHERMALRUNNING֗���YB72.194.121.48\nHEALTH_CHECKEast IsidrofortIH27-WB64NUCLEARSHUTTING_DOWN�̤��YB88.136.134.241\nHEALTH_CHECKSipesshireDH05-YR95HYDROELECTRICRUNNING����Y�B254.125.63.235\nHEALTH_CHECKPort EmeliaportDJ83-UO93GEOTHERMALRUNNING���Y�A190.160.48.125\n```", "```java\n$ ./bin/kafka-avro-console-consumer --bootstrap-server localhost:9092 --topic healthchecks-avro\n```", "```java\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"Lake Jeromy\",\"serialNumber\":\" GE50-GF78\",\"type\":\"HYDROELECTRIC\",\"status\":\"RUNNING\",\"lastStartedAt\":1537320719954,\"temperature\":35.0,\"ipAddress\":\"227.30.250.185\"}\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"Lockmanland\",\"serialNumber\":\" MW69-LS32\",\"type\":\"GEOTHERMAL\",\"status\":\"RUNNING\",\"lastStartedAt\":1534188452893,\"temperature\":61.0,\"ipAddress\":\"72.194.121.48\"}\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"East Isidrofort\",\"serialNumber\":\" IH27-WB64\",\"type\":\"NUCLEAR\",\"status\":\"SHUTTING_DOWN\",\"lastStartedAt\":1539296403179,\"temperature\":62.0,\"ipAddress\":\"88.136.134.241\"}\n...\n```", "```java\nimport io.confluent.kafka.serializers.KafkaAvroDeserializer;\nimport org.apache.avro.generic.GenericRecord;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport org.apache.kafka.clients.consumer.Consumer;\nimport org.apache.kafka.common.serialization.StringSerializer;\n\npublic final class AvroConsumer {\n  private Consumer<String, GenericRecord> consumer; //1\n  public AvroConsumer(String brokers, String schemaRegistryUrl) { //2\n     Properties props = new Properties();\n     props.put(\"group.id\", \"healthcheck-processor\");\n     props.put(\"bootstrap.servers\", brokers);\n     props.put(\"key.deserializer\", StringDeserializer.class); //3\n     props.put(\"value.deserializer\", KafkaAvroDeserializer.class); //4\n     props.put(\"schema.registry.url\", schemaRegistryUrl); //5\n     consumer = new KafkaConsumer<>(props); //6\n  }\n ...\n}\n```", "```java\npackage kioto.plain;\nimport ...\npublic final class AvroProcessor {\n  private Consumer<String, GenericRecord> consumer;\n  private Producer<String, String> producer;\n\n  public AvroProcessor(String brokers , String schemaRegistryUrl) {\n    Properties consumerProps = new Properties();\n    consumerProps.put(\"bootstrap.servers\", brokers);\n    consumerProps.put(\"group.id\", \"healthcheck-processor\");\n    consumerProps.put(\"key.deserializer\", StringDeserializer.class);\n    consumerProps.put(\"value.deserializer\", KafkaAvroDeserializer.class);\n    consumerProps.put(\"schema.registry.url\", schemaRegistryUrl);\n    consumer = new KafkaConsumer<>(consumerProps);\n\n    Properties producerProps = new Properties();\n    producerProps.put(\"bootstrap.servers\", brokers);\n    producerProps.put(\"key.serializer\", StringSerializer.class);\n    producerProps.put(\"value.serializer\", StringSerializer.class);\n    producer = new KafkaProducer<>(producerProps);\n }\n```", "```java\npublic final void process() {\n  consumer.subscribe(Collections.singletonList(\n    Constants.getHealthChecksAvroTopic())); //1\n    while(true) {\n      ConsumerRecords records = consumer.poll(Duration.ofSeconds(1L));\n      for(Object record : records) {\n        ConsumerRecord it = (ConsumerRecord) record;\n        GenericRecord healthCheckAvro = (GenericRecord) it.value(); //2\n        HealthCheck healthCheck = new HealthCheck ( //3\n          healthCheckAvro.get(\"event\").toString(),\n          healthCheckAvro.get(\"factory\").toString(),\n          healthCheckAvro.get(\"serialNumber\").toString(),\n          healthCheckAvro.get(\"type\").toString(),\n          healthCheckAvro.get(\"status\").toString(),\n          new Date((Long)healthCheckAvro.get(\"lastStartedAt\")),\n          Float.parseFloat(healthCheckAvro.get(\"temperature\").toString()),\n          healthCheckAvro.get(\"ipAddress\").toString());\n          LocalDate startDateLocal= \n          healthCheck.getLastStartedAt().toInstant()\n                      .atZone(ZoneId.systemDefault()).toLocalDate(); //4\n          int uptime = Period.between(startDateLocal,     \n          LocalDate.now()).getDays(); //5\n          Future future =\n               producer.send(new ProducerRecord<>(\n                             Constants.getUptimesTopic(),\n                             healthCheck.getSerialNumber(),\n                             String.valueOf(uptime))); //6\n          try {\n            future.get();\n          } catch (InterruptedException | ExecutionException e) {\n            // deal with the exception\n          }\n        }\n      }\n    }\n\n    public static void main(String[] args) {\n       new      \n  AvroProcessor(\"localhost:9092\",\"http://localhost:8081\").process();//7\n    }\n}\n```", "```java\n$ gradle jar\n```", "```java\nBUILD SUCCESSFUL in 3s\n 1 actionable task: 1 executed\n```", "```java\n$ ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic uptimes --property print.key=true\n```", "```java\nEW05-HV36 33\nBO58-SB28 20\nDV03-ZT93 46\n...\n```"]