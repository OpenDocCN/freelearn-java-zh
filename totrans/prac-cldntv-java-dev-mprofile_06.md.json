["```java\n mvn clean package liberty:run\n```", "```java\n@ApplicationPath(\"/rest\")\npublic class HelloWorldApp extends Application {}\n@Path(\"/hello\")\npublic class HelloWorldResource {\n    @GET\n    public String helloWorld() {\n        return \"Hello World!\";\n    }\n}\n```", "```java\n@Provider\npublic class NoSuchWordExceptionMapper implements \n  ExceptionMapper<NoSuchWordException> {\n    @Override\n    public Response toResponse(NoSuchWordException ex) {\n        return Response.status(404)                   .entity(ex.getMessage()).build();\n    }\n}\n```", "```java\n@Path(\"/thesaurus/{word}\")\n@Consumes(MediaType.TEXT_PLAIN)\n@Produces(MediaType.TEXT_PLAIN)\npublic class ThesaurusResource { // ... \n```", "```java\npublic class ParamBean {\n    private int id;\n    @QueryParam(\"id\")\n    public void setId(int id) {\n        this.id = id;\n    }\n    @HeaderParam(\"X-SomeHeader\")\n    public String someHeaderValue;\n    @PathParam(\"path\")\n    public String pathParamValue;\n    @Override\n    public String toString() {\n        return \"ID: \" + id + \" X-SomeHeader: \"            + someHeaderValue + \" path: \" + pathParamValue;\n    }\n} \n```", "```java\n@GET\n@Path(\"/beanparam/{path}\")\npublic Response get(@BeanParam ParamBean params) {\n    return Response.ok(params.toString()).build();\n}\n```", "```java\n$ curl \"http://localhost:9080/rest/beanparam/  myPath?id=1234\" -H \"X-SomeHeader: MyHeaderValue\"\nID: 1234 X-SomeHeader: MyHeaderValue path: myPath\n```", "```java\n@GET public String get(@QueryParam(\"startPage\") \n@DefaultValue(\"1\") Integer startPage) { // ...\n```", "```java\npublic class Person {\n    public enum Color {\n        RED, BLUE, YELLOW, GREEN, ORANGE, PURPLE\n    }\n    private String firstName;\n    private String lastName;\n    private int age;\n    private Color favoriteColor;\n    //public getters/setters\n}\n```", "```java\n@Path(\"/person\")\n@Produces(MediaType.APPLICATION_JSON)\n@Consumes(MediaType.APPLICATION_JSON)\npublic class PersonService {\n    static List<Person> people = new ArrayList<>();\n    @GET\n    @Path(\"/{id}\")\n    public Person getPerson(@PathParam(\"id\") int id) {\n        try {\n            return people.get(id);\n        } catch (IndexOutOfBoundsException ex) {\n            throw new WebApplicationException               (Response.status(404).entity(\"ID \" + id + \"                 not found.\").build());\n        }\n    }\n    @POST\n    public int postPerson(Person person) {\n        people.add(person);\n        return people.lastIndexOf(person);\n    }\n}\n```", "```java\n{\n \"firstName\": \"John\",\n \"lastName\": \"Doe\",\n \"age\": 33,\n \"favoriteColor\":\"RED\"\n}\n```", "```java\n@Provider\n@Consumes(MediaType.APPLICATION_JSON)\npublic class MyJsonReader implements MessageBodyReader<Person> {\n    @Override\n    public boolean isReadable(Class<?> type, Type         genericType, Annotation[] annotations, MediaType             mediaType) {\n        return type.equals(Person.class) &&            mediaType.isCompatible(MediaType                 .APPLICATION_JSON_TYPE);\n    }\n    @Override\n    public Person readFrom(Class<Person> type,         Type genericType, Annotation[] annotations,             MediaType mediaType,\n        MultivaluedMap<String, String> httpHeaders,           InputStream entityStream)\n                 throws IOException, WebApplicationException {\n        String s = new BufferedReader(new InputStreamReader             (entityStream)).lines().collect                 (Collectors.joining(\" \")).trim();\n        if (!s.startsWith(\"{\") || !s.endsWith(\"}\")) {\n            throw new WebApplicationException(Response                 .status(400).build());\n        }\n        Person p = new Person();\n        // ... parse string into Peron object ...\n        return p;\n    }\n}\n```", "```java\n@Provider\n@Produces(MediaType.APPLICATION_JSON)\npublic class MyJsonWriter implements \n  MessageBodyWriter<Person> {\n    @Override\n    public boolean isWriteable(Class<?> type, Type         genericType, Annotation[] annotations, MediaType             mediaType) {\n        return type.equals(Person.class) && mediaType             .isCompatible(MediaType.APPLICATION_JSON_TYPE);\n    }\n    @Override\n    public void writeTo(Person p, Class<?> type, Type         genericType, Annotation[] annotations, MediaType             mediaType, MultivaluedMap<String, Object>              httpHeaders, OutputStream entityStream)\n        throws IOException, WebApplicationException {\n            PrintStream ps = new PrintStream(entityStream);\n            // print Person object to entity stream\n    }\n}\n```", "```java\n    @PATCH\n    @Path(\"/{id}\")\n    public Person updateFavoriteColor(@PathParam(\"id\") int         id, @QueryParam(\"color\") Color color) { // ...\n```", "```java\n$ curl http://localhost:9080/rest/person/0?color=BLUE -X PATCH\n{\n \"firstName\": \"John\",\n \"lastName\": \"Doe\",\n \"age\": 33,\n \"favoriteColor\":\"BLUE\"\n}\n```", "```java\n$ curl http://localhost:9080/rest/person/0?color=blue -X PATCH -v\n...\n< HTTP/1.1 404 Not Found\n...\n<\n```", "```java\n@Provider\npublic class ColorParamConverterProvider implements   ParamConverterProvider {\n  @Override\n  public <T> ParamConverter<T> getConverter(Class<T>     rawType, Type genericType, Annotation[] annotations) {\n    if (rawType.equals(Color.class)) {\n        return (ParamConverter<T>) new ColorParamConverter();\n    }\n    return null;\n  }\n}\n```", "```java\npublic class ColorParamConverter implements   ParamConverter<Color> {\n  @Override\n  public Color fromString(String value) {\n    return Color.valueOf(value.toUpperCase());\n  }\n  @Override\n  public String toString(Color value) {\n    return value.name();\n  }\n}\n```", "```java\n@Provider\npublic class WhiteSpaceRemovingReaderInterceptor implements   ReaderInterceptor {\n    @Override\n    public Object aroundReadFrom(ReaderInterceptorContext       context) throws IOException, WebApplicationException {\n        InputStream originalStream = context.getInputStream();\n        String entity = // convert stream to string\n        entity = entity.replaceAll(\"\\\\s\",\"\");\n        context.setInputStream(new ByteArrayInputStream           (entity.getBytes()));\n        return context.proceed();\n    }\n}\n```", "```java\nPRE: {\n \"firstName\": \"John\",\n \"lastName\": \"Doe\",\n \"age\": 33,\n \"favoriteColor\":\"RED\"\n}\nPOST: {\"firstName\":\"John\",\"lastName\":\"Doe\",\"age\":33,  \"favoriteColor\":\"RED\"}\n```", "```java\n@PreMatching\n@Provider\npublic class ApiKeyCheckFilter implements \n    ContainerRequestFilter {\n    private final Map<String, Integer> apiInvocations = new \n      ConcurrentHashMap<>();\n    @Override\n    public void filter(ContainerRequestContext       requestContext) throws IOException {\n        String apiKey = requestContext.getHeaderString            (API_KEY_HEADER);\n        if (apiKey == null) {\n            requestContext.abortWith(Response.status(              Status.UNAUTHORIZED).build());\n            return;\n        }\n        // get count of recent invocations for this API key \n        int currentInvocations = // ...\n        if (currentInvocations == -1) {\n            requestContext.abortWith(                Response.status(Status.FORBIDDEN).build());\n            return;\n        }\n        if (currentInvocations > MAX_REQUESTS_PER_INTERVAL) {\n            requestContext.abortWith(                Response.status(Status.TOO_MANY_REQUESTS)                        .header(HttpHeaders.RETRY_AFTER, 5)                        .build());\n            return;\n        }\n    }\n}\n```", "```java\n@NameBinding\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE})\npublic @interface Logged {}\n```", "```java\n@Logged\n@Provider\npublic class LoggingFilter implements \n  ContainerRequestFilter, ContainerResponseFilter {\n    @Override\n    public void filter(ContainerRequestContext       requestContext) throws IOException {\n        int requestID = idCounter.incrementAndGet();\n        requestContext.setProperty(\"request.id\", requestID);\n        System.out.println(\">>> \" + requestID + \" \"            + requestContext.getRequest().getMethod() + \" \"             + requestContext.getUriInfo().getRequestUri()            + \" \" + getAndReplaceEntity(requestContext));\n    }\n    @Override\n    public void filter(ContainerRequestContext         requestContext, ContainerResponseContext             responseContext)\n            throws IOException {\n        int requestID = (int) requestContext.getProperty             (\"request.id\");\n        System.out.println(\"<<< \" + requestID + \" \"            + requestContext.getUriInfo().getRequestUri()            + \" \" + responseContext.getEntity());\n    }\n    //...\n}\n```", "```java\n@Path(\"/dynamic\")\npublic class DynamicResource {\n    @GET\n    public String getMessage() { // ...\n    @POST\n    @Logged\n    public String postMessage(String message) { // ...\n}\n```", "```java\n@Provider\npublic class MyDynamicFeature implements DynamicFeature {\n    @Override\n    public void configure(ResourceInfo resourceInfo,       FeatureContext context) {\n        Method m = resourceInfo.getResourceMethod();\n        if (m.getName().startsWith(\"get\")) {\n            context.register(LoggingFilter.class);\n        }\n    }\n}\n```", "```java\n@Path(\"/person\")\npublic class AsyncPersonService {\n    static ExecutorService executor =         Executors.newFixedThreadPool(5);\n    @GET\n    @Path(\"sync/{id}\")\n    public Person getPersonSync(@PathParam(\"id\") int id)       throws InterruptedException, ExecutionException {\n        Future<Person> someData = executor.submit(() ->            getPerson(id));\n        return someData.get();\n    }\n\n    private Person getPerson(int id) {//...\n}\n```", "```java\n    @GET\n    @Path(\"async/{id}\")\n    public void getPersonAsync(@PathParam(\"id\") int id,\n      @Suspended AsyncResponse ar) {\n        executor.submit(() -> {\n            ar.resume(getPerson(id));\n        });\n    }\n```", "```java\nexecutor.submit(() -> {\n    Optional<Person> p = Optional.ofNullable(getPerson(id));\n    if (p.isPresent())\n        ar.resume(p.get());\n    else ar.resume(new NoSuchPersonException());\n});\n```", "```java\n@Path(\"/sse\")\n@Produces(MediaType.SERVER_SENT_EVENTS)\npublic class SseService {\n    @GET\n    public void stream3Events(@Context SseEventSink sink,                               @Context Sse sse) {\n        Executors.newSingleThreadExecutor().submit(() -> {\n            try (SseEventSink sinkToClose = sink) {\n                sink.send(sse.newEventBuilder()\n                             .mediaType(TEXT_PLAIN_TYPE)\n                             .data(\"foo\")\n                             .name(\"fooEvent\")\n                             .id(\"1\")\n                             .build());\n                Thread.sleep(500);\n                // repeat for 2/bar\n                Thread.sleep(500);\n                // repeat for 3/baz\n            } catch (InterruptedException ex) {}\n        });\n    }\n}\n```", "```java\n$ curl http://localhost:9080/rest/sse\nevent: fooEvent\nid: 1\ndata: foo\nevent: barEvent\nid: 2\ndata: bar\nevent: bazEvent\nid: 3\ndata: baz\n```", "```java\n    static SseBroadcaster broadcaster;\n    static ScheduledExecutorService executor =         Executors.newSingleThreadScheduledExecutor();\n    private void startBroadcasting(Sse sse) {\n        if (broadcaster == null) {\n            broadcaster = sse.newBroadcaster(); //...\n        }\n    }\n    @GET\n    @Path(\"/broadcast\")\n    public void broadcast(@Context SseEventSink sink,                          @Context Sse sse) {\n        startBroadcasting(sse);\n        broadcaster.register(sink);\n        broadcaster.broadcast(sse.newEventBuilder()\n            .mediaType(TEXT_PLAIN_TYPE)\n            .data(\"new registrant\")\n            .build());\n    }\n```", "```java\n$ curl http://localhost:9080/rest/sse/broadcast\n    UnnamedEvent\ndata: new registrant\n    UnnamedEvent\ndata: ping\n    UnnamedEvent\ndata: ping \n```", "```java\n@Context\nSecurityContext secCtx;\n@GET\npublic Response getSomeData() {\n    if (secCtx.isUserInRole(\"special\")) {\n        return getSpecialResponse();\n    }\n    return getNormalResponse();\n} \n```", "```java\n@Provider\n@Produces(MediaType.APPLICATION_JSON)\npublic class MySpecialJsonWriter implements   MessageBodyWriter<Person> {\n    @Context\n    ResourceInfo resInfo;\n    @Override\n    public boolean isWriteable(Class<?> type, Type       genericType, Annotation[] annotations, MediaType        mediaType) {\n        Class<?> resourceClass = resInfo.getResourceClass();\n        return resourceClass.equals(SpecialResource.class)           && type.equals(Person.class) && mediaType             .isCompatible (APPLICATION_JSON_TYPE);\n    }\n```", "```java\npublic class Starship {\n    private String name;\n    private boolean hasHyperdrive;\n    private List<Weapon> weapons;\n    private int speedRating;\n    //with public getters and setters\n}\npublic class Weapon {\n    private String name;\n    private String type;\n    private int damageRating;\n    //with public getters and setters\n}\n```", "```java\n{\n  \"name\": \"Coreillian Freighter\",\n  \"hasHyperdrive\": true,\n  \"speedRating\": 22,\n  \"weapons\": [\n    {\n      \"name\":\"Quad Blaster Turret\",\n      \"type\":\"Laser\",\n      \"damageRating\":24\n    }\n  ]\n}\n```", "```java\nJsonReader reader = Json.createReader(new StringReader(json));\nJsonObject shipObject = reader.readObject();\n```", "```java\nStarship ship = new Starship();\nship.setName(shipObject.getString(\"name\"));\nship.setHasHyperdrive(shipObject.getBoolean\n  (\"hasHyperdrive\"));\n//...\n```", "```java\nStringWriter sw = new StringWriter();\nJsonGenerator generator = Json.createGenerator(sw);\ngenerator.writeStartObject()\n         .write(\"name\", ship.getName())\n         .write(\"hasHyperdrive\", ship.isHasHyperdrive())\n         .write(\"speedRating\", ship.getSpeedRating())\n         .writeStartArray(\"weapons\");\nfor (Weapon w : ship.getWeapons()) {\n    generator.writeStartObject()\n             .write(\"name\", w.getName())\n             .write(\"type\", w.getType())\n             .write(\"damageRating\", w.getDamageRating())\n             .writeEnd();\n}\ngenerator.writeEnd()\n         .writeEnd();\ngenerator.close();\n```", "```java\nStarship ship = new Starship();\nJsonParser parser = Json.createParser(new StringReader(json));\nwhile (parser.hasNext()) {\n    Event event = parser.next();\n    if (event == Event.KEY_NAME) {\n    String keyName = parser.getString();\n    parser.next();\n    switch(keyName) {\n    case \"name\": ship.setName(parser.getString()); break;\n    //...\n    case \"weapons\": ship.setWeapons(parseWeapons(parser)); \n    }\n}\n```", "```java\nprivate List<Weapon> parseWeapons (JsonParser parser) {\n   List<Weapon> weapons = new ArrayList<>();\n   Event event = null;\n   while ((event = parser.next()) != Event.END_ARRAY) {\n      Weapon w = new Weapon();\n      while (event != Event.END_OBJECT) {\n         if (event == Event.KEY_NAME) {\n             String keyName = parser.getString();\n             parser.next();\n             switch(keyName) {\n             case \"name\": w.setName(parser.getString()); //...\n             }\n         }\n         event = parser.next();\n      }\n      weapons.add(w);\n   }\n   return weapons;\n}\n```", "```java\nStringWriter sw = new StringWriter();\nJsonb jsonb = JsonbBuilder.create();\njsonb.toJson(ship, sw);\nString json = sw.getBuffer().toString();\n```", "```java\n{\"hasHyperdrive\":true,\"name\":\"Coreillian Freighter\",\"speedRating\":22,\"weapons\":[{\"damageRating\":24,\"name\":\"Quad Blaster Turret\",\"type\":\"Laser\"}]}\n```", "```java\nJsonb jsonb = JsonbBuilder.create(\n    new JsonbConfig().withFormatting(true));\n```", "```java\n{\n    \"hasHyperdrive\": true,\n    \"name\": \"Coreillian Freighter\",\n    \"speedRating\": 22,\n    \"weapons\": [\n        {\n            \"damageRating\": 24,\n            \"name\": \"Quad Blaster Turret\",\n            \"type\": \"Laser\"\n        }\n    ]\n}\n```", "```java\nStarship shipFromJson = jsonb.fromJson(json,Starship.class);\n```", "```java\npublic class Person {\n    private String firstName;\n    @JsonbTransient\n    private String middleName;\n    @JsonbProperty(\"familyName\")\n    private String lastName;\n    private String favoriteColor;\n    private int age;\n    //...all other public unannotated getters/setters\n    @JsonbProperty(\"favouriteColour\")\n    public String getFavoriteColor() {\n        return favoriteColor;\n    }\n    @JsonbProperty(\"yearsOld\")\n    public void setAge(int age) {\n        this.age = age;\n    }\n}\n```", "```java\nPerson p = new Person();\np.setFirstName(\"John\");\np.setMiddleName(\"Tiberius\");\np.setLastName(\"Doe\");\np.setFavoriteColor(\"Green\");\np.setAge(25);\nString jsonPerson = jsonb.toJson(p);\nSystem.out.println(jsonPerson);\n```", "```java\n{\n    \"age\": 25,\n    \"familyName\": \"Doe\",\n    \"favouriteColour\": \"Green\",\n    \"firstName\": \"John\"\n}\n```", "```java\nPerson p2 = jsonb.fromJson(jsonPerson, Person.class);\nSystem.out.println(p2.getFirstName());\nSystem.out.println(p2.getMiddleName());\nSystem.out.println(p2.getLastName());\nSystem.out.println(p2.getFavoriteColor());\nSystem.out.println(p2.getAge());\n```", "```java\nJohn\nnull\nDoe\nnull\n0\n```", "```java\nString uri = \"http://localhost:9080/rest/thesaurus\";\nClient client = ClientBuilder.newBuilder().build();\nWebTarget target = client.target(uri).path(word);\nBuilder builder = target.request(MediaType.TEXT_PLAIN);\ntry (Response response = builder.get()) {\n    int status = response.getStatus();\n    assert status == 200;\n} finally {\n    client.close();\n}\n```", "```java\nWebTarget target = client.target(uri).path(word);\n```", "```java\nWebTarget target = client.target(uri).resolveTemplate   (\"word\", word);\n```", "```java\n@Path(\"/thesaurus/{word}\")\n@Consumes(MediaType.TEXT_PLAIN)\n@Produces(MediaType.TEXT_PLAIN)\npublic interface ThesaurusClient {\n    @GET\n    String getSynonymsFor(@PathParam(\"word\") String word)        throws NoSuchWordException;\n    @POST\n    String setSynonymsFor(@PathParam(\"word\") String word,         String synonyms) throws WordAlreadyExistsException;\n    // other methods matching ThesaurusResource ...\n}\n```", "```java\nThesaurusClient thesaurus = RestClientBuilder.newBuilder()  .baseUri(URI.create(\"http://localhost:9080/rest\"))\n            .build(ThesaurusClient.class);\n```", "```java\nthesaurus.getSynonymsFor(word);\n```", "```java\npublic class NoSuchWordResponseMapper implements     ResponseExceptionMapper<NoSuchWordException> {\n    @Override\n    public boolean handles(int status,MultivaluedMap<String,       Object> headers) {\n        return status == 404;\n    }\n    @Override\n    public NoSuchWordException toThrowable(Response resp) {\n        return new NoSuchWordException();\n    }\n}\n```", "```java\nThesaurusClient thesaurus = RestClientBuilder.newBuilder()  .baseUri(URI.create(\"http://localhost:9080/rest\"))\n            .register(NoSuchWordResponseMapper.class)\n            .build(ThesaurusClient.class);\n```", "```java\n@RegisterProvider(NoSuchWordResponseMapper.class)\npublic interface ThesaurusClient { //...\n```", "```java\nAsyncInvoker invoker = builder.async();\nFuture<Response> future = invoker.get();\n// do something else while waiting for the response...\ntry (Response response = future.get()) {\n    // handle response...\n} finally {\n    client.close();\n}\n```", "```java\nString uri = \"http://localhost:9080/rest/thesaurus\";\nClient client = ClientBuilder.newBuilder().build();\nfor (String word : words) {\n    WebTarget target = client.target(uri).path(word);\n    Builder builder = target.request(MediaType.TEXT_PLAIN);\n    AsyncInvoker invoker = builder.async();\n    invoker.get(new InvocationCallback<String>() {\n        @Override\n        public void completed(String response) {\n            sb.append(response + \"\\n\");\n        }\n        @Override\n        public void failed(Throwable th) {\n            th.printStackTrace();\n        }\n    });\n}\n```", "```java\n@Path(\"/thesaurus/{word}\")\n@RegisterProvider(NoSuchWordResponseMapper.class)\n@Consumes(MediaType.TEXT_PLAIN)\n@Produces(MediaType.TEXT_PLAIN)\npublic interface ThesaurusAsyncClient {\n    @GET\n    CompletionStage<String> getSynonymsFor(@PathParam       (\"word\") String word);\n    @POST\n    CompletionStage<String>setSynonymsFor       (@PathParam(\"word\") String word, String synonyms);\n    //...similar methods for PUT, DELETE, and PATCH\n}\n```", "```java\nStringBuffer sb = new StringBuffer();\nCountDownLatch latch = new CountDownLatch(wordsArr.length);\nThesaurusAsyncClient client = RestClientBuilder.newBuilder()\n    .baseUri(URI.create(\"http://localhost:9080/rest\"))\n    .register(NoSuchWordResponseMapper.class)\n    .build(ThesaurusAsyncClient.class);\nArrays.stream(wordsArr).parallel()\n                       .map(client::getSynonymsFor)\n                       .forEach(cs -> {\n    cs.exceptionally(t -> {\n        t.printStackTrace();\n        return \"unable to complete request\";\n    }).thenAccept(s -> {\n        sb.append(s + \"\\n\");\n        latch.countDown();\n    });\n});\nlatch.await(5, TimeUnit.SECONDS);\n```", "```java\n@Path(\"/sse\")\n@Produces(MediaType.SERVER_SENT_EVENTS)\npublic interface SseClient {\n    @GET\n    Publisher<String> receiveSSEs();\n```", "```java\nclient.receiveSSEs().subscribe(new Subscriber<String>() {\n    @Override\n    public void onSubscribe(Subscription s) {\n        s.request(3);\n    }\n    @Override\n    public void onNext(String s) {\n        // handle event\n    }\n    @Override\n    public void onError(Throwable t) {\n        // exception while processing event\n    }\n    @Override\n    public void onComplete() {\n        // done receiving events\n    }\n});\n```", "```java\norg.eclipse.microprofile.rest.client.propagateHeaders=Authorization,X-RequestID\n```", "```java\n@RegisterRestClient\n@ClientHeaderParam(name=\"AgentID\", value=\"Bob's Travel Co.\")\npublic interface AirlineReservationClient {\n    @GET\n    Reservation getReservation(String reservationID);\n    @POST\n    @ClientHeaderParam(name = \"RequestID\", value = \"{newId}\")\n    String makeReservation(Reservation r);\n    default String newId() {\n        return UUID.randomUUID().toString();\n    }\n}\n```", "```java\npublic interface MyDependency {\n    int getInstanceId();\n}\n@RequestScoped\npublic class MyDependencyImpl implements MyDependency {\n    static AtomicInteger COUNTER = new AtomicInteger();\n    private final int instanceId = COUNTER.getAndIncrement();\n    @Override\n    public int getInstanceId() {\n        return instanceId;\n    }\n}\n```", "```java\n@ApplicationScoped\n@Path(\"/cdi\")\npublic class MyCdiResource {\n    @Inject\n    MyDependency dependency;\n    //...\n}\n```", "```java\n$ curl http://localhost:9080/rest/cdi\n1\n$ curl http://localhost:9080/rest/cdi\n2\n$ curl http://localhost:9080/rest/cdi\n3\n```", "```java\n@ApplicationScoped\npublic class SomeOtherBean {\n    @Produces\n    public MyProducedDependency produceDependency() {\n        return new MyProducedDependency(Math.random() * 10);\n    }\n}\n@ApplicationScoped\n@Path(\"/cdi\")\npublic class MyCdiResource {\n    //...\n    @Inject\n    MyProducedDependency producedDependency;\n    //...\n}\n```", "```java\n@ApplicationScoped\n@Named(\"max\")\npublic class MyOtherDependencyImpl implements MyDependency {\n    //...\n}\n@ApplicationScoped\n@Path(\"/cdi\")\npublic class MyCdiResource {\n    @Inject\n    @Named(\"max\")\n    MyDependency dependency;\n}\n```", "```java\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Minimal { }\n```", "```java\n@ApplicationScoped\n@Minimal\npublic class MyThirdDependencyImpl implements MyDependency {\n    //...\n}\n@ApplicationScoped\n@Path(\"/cdi\")\npublic class MyCdiResource {\n    @Inject\n    @Minimal\n    MyDependency dependency;\n}\n```", "```java\n@Path(\"/thesaurus/{word}\")\n@RegisterProvider(NoSuchWordResponseMapper.class)\n@RegisterRestClient(baseUri = \"http://localhost:9080/rest\")\npublic interface ThesaurusClient {\n    @GET\n    String getSynonymsFor(@PathParam(\"word\") String word)        throws NoSuchWordException;\n    //...\n}\n```", "```java\n@ApplicationScoped\n@Path(\"/cdi\")\npublic class MyCdiResource {\n    @Inject\n    @RestClient\n    ThesaurusClient thesaurusClient;\n    @GET\n    @Path(\"/thesaurus/{word}\")\n    public String lookup(@PathParam(\"word\") String word) {\n        try {\n            return thesaurusClient.getSynonymsFor(word);\n        } catch (NoSuchWordException ex) {\n            return \"Sorry, that word is not found.\";\n        }\n    }\n```"]