["```java\n<!-- Database access -->\n<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-jdbc</artifactId>\n</dependency>\n<dependency>\n<groupId>com.h2database</groupId>\n<artifactId>h2</artifactId>\n<scope>runtime</scope>\n</dependency>\n```", "```java\n@Override\npublic void configure(WebSecurity web) {\n   web\n        .ignoring()\n        .requestMatchers(PathRequest.toH2Console());\n}\n```", "```java\nCREATE TABLE test(id INT PRIMARY KEY, name VARCHAR(255));\n```", "```java\nINSERT INTO test VALUES(1, 'Hello');\nINSERT INTO test VALUES(2, 'World');\nSELECT * FROM test ORDER BY id;\nUPDATE test SET name = 'Hi' WHERE id = 1;\nDELETE FROM test WHERE id = 2;\n```", "```java\nConnection connection = null;\ntry {\n  connection = dataSource.getConnection();\n  Statement statement = null;\n\n  try {\n    // […] }\n} catch (SQLException e) {\n  log.error(\"Some SQL problem while getting connection\", e);\n} finally {\n  if (connection != null) {\n      // close connection and handle exception while closing\n  }\n}\n```", "```java\ntry (Connection connection = dataSource.getConnection();\n    Statement statement = connection.createStatement();\n    ResultSet resultSet = statement.executeQuery(SQL_QUERY)) {\n   resultSet.next();\n   int result = resultSet.getInt(1);\n   log.info(\"plainJdbcTryWithResources success {}\", result);\n} catch (SQLException e) {\n   log.error(\"Some SQL problem, somewhere\", e);\n}\n```", "```java\nint result = jdbcTemplate.queryForObject(SQL_QUERY, Integer.\nclass);\nlog.info(\"jdbcTemplateExample success {}\", result);\n```", "```java\n@Slf4j\n@Repository\n@RequiredArgsConstructor\npublic class JdbcDemonstratingRepository {\n\n  private static final String SQL_QUERY = \"select 42 from dual\";\n  private final DataSource dataSource;\n\n  public void jdbcTemplateExample() {\n    JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n    Integer result = jdbcTemplate.queryForObject(\n            SQL_QUERY, Integer.class);\n    log.info(\"jdbcTemplateExample success {}\", result);\n  }\n}\n```", "```java\nSELECT 42 + ? FROM dual\n```", "```java\nInteger result = jdbcTemplate.queryForObject(\n       \"SELECT 42 + ? FROM dual\", Integer.class, 23);\n```", "```java\nlog.info(\"{}\", jdbcTemplate.queryForObject(\n       \"SELECT now() FROM dual\", Timestamp.class));\nlog.info(\"{}\", jdbcTemplate.queryForObject(\n       \"SELECT now() FROM dual\", LocalDateTime.class));\n```", "```java\nlog.info(\"{}\", jdbcTemplate.queryForList(\n       \"SELECT fullname FROM author\", String.class));\n```", "```java\nlog.info(\"{}\", jdbcTemplate.queryForMap(\n\n      \"SELECT username, fullname FROM author WHERE id = 1\"));\n```", "```java\nlog.info(\"{}\", jdbcTemplate.queryForList(\n       \"SELECT username, fullname FROM author\"));\n```", "```java\nRowMapper<Author> authorRowMapper = new RowMapper<Author>() {\n  @Override\n  public Author mapRow(ResultSet rs, int rowNum) throws\nSQLException {\n  return Author.builder()\n          .username(rs.getString(\"username\"))\n          .fullName(rs.getString(\"fullname\"))\n          .build();\n  }\n};\nlog.info(\"{}\", jdbcTemplate.query(\n       \"SELECT username, fullname FROM author\", authorRowMapper));\n```", "```java\nlog.info(\"{}\", jdbcTemplate.query(\n       \"SELECT username, fullname FROM author\",\n       (rs, rowNum) -> Author.builder()\n               .username(rs.getString(\"username\"))\n               .fullName(rs.getString(\"fullname\"))\n               .build()));\n```", "```java\nRowMapper<Author> authorRowMapper =\n    (rs, rowNum) -> Author.builder()\n        .username(rs.getString(\"username\"))\n        .fullName(rs.getString(\"fullname\"))\n        .build();\nlog.info(\"{}\", jdbcTemplate.query(\n        \"SELECT username, fullname FROM author\",\n\n        authorRowMapper));\n```", "```java\nint updateCount = jdbcTemplate.update(\n\"INSERT INTO role(author_id, role) VALUES(4, 'ADMIN')\");\nlog.info(\"{} rows updated\", updateCount);\n```", "```java\n<dependency>\n    <groupId>org.flywaydb</groupId>\n    <artifactId>flyway-core</artifactId>\n</dependency>\n```", "```java\nSuccessfully validated 2 migrations (execution time 00:00.027s)\nCreating Schema History table: \"PUBLIC\".\"flyway_schema_history\"\nCurrent version of schema \"PUBLIC\": << Empty Schema >>\nMigrating schema \"PUBLIC\" to version 01 - initial\nMigrating schema \"PUBLIC\" to version 02 - data\nSuccessfully applied 2 migrations to schema \"PUBLIC\" (…)\n```", "```java\nSELECT * FROM \"flyway_schema_history\"\n```", "```java\nSELECT \"installed_rank\", \"version\", \"description\",\n\"type\", \"script\", \"checksum\", \"success\"\n\nFROM \"flyway_schema_history\"\n```", "```java\nspring.datasource.url=jdbc:mysql://localhost/test\nspring.datasource.username=dbuser\nspring.datasource.password=dbpass\n```", "```java\npublic interface CityRepository extends Repository<City, Long> {\n  List<City> findAll();\n  City findByNameAndCountryAllIgnoringCase(\n        String name, String country);\n}\n```", "```java\nList<LocalDate> = dslContext.selectFrom(AUTHOR)\n        .where(AUTHOR.DATE_OF_BIRTH.greaterThan(\n                LocalDate.of(1980, Month.JANUARY, 1)))\n        .fetch(AUTHOR.DATE_OF_BIRTH);\n```"]