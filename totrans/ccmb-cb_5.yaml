- en: Chapter 5. Running Cucumber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Cucumber with Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Cucumber from the Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding options from the Terminal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Cucumber with Jenkins and GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Cucumber test cases in parallel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For successful implementation of any testing framework, it is mandatory that
    test cases can be run in multiple ways so that people with different competency
    levels can use it how they need to. So, now we will focus on running Cucumber
    test cases. There are multiple ways of running Cucumber, such as integrating it
    with Maven and running it from the Terminal; we can run Cucumber remotely as well
    by integrating Cucumber with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will also cover advanced topics of running Cucumber test
    cases in parallel by a combination of Cucumber, Maven, and JUnit.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Cucumber with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven has a lot of advantages over other build tools, such as dependency management,
    lots of plugins and the convenience of running integration tests. So let's also
    integrate our framework with Maven. Maven will allow our test cases to be run
    in different flavors, such as from the Terminal, integrating with Jenkins, and
    parallel execution.
  prefs: []
  type: TYPE_NORMAL
- en: So how do we integrate with Maven? Let's find out in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I am assuming that we know the basics of Maven (the basics of Maven are out
    of the scope of this book). Follow the upcoming instructions to install Maven
    on your system and to create a sample Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to install Maven on our system first. So, follow instructions mentioned
    on the following blogs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Windows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.mkyong.com/maven/how-to-install-maven-in-windows/](http://www.mkyong.com/maven/how-to-install-maven-in-windows/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For Mac:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.mkyong.com/maven/install-maven-on-mac-osx/](http://www.mkyong.com/maven/install-maven-on-mac-osx/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also install the Maven Eclipse plugin by following the instructions
    mentioned on this blog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/](http://theopentutorials.com/tutorials/eclipse/installing-m2eclipse-maven-plugin-for-eclipse/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To import a Maven project into Eclipse, follow the instructions on this blog:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm](http://www.tutorialspoint.com/maven/maven_eclispe_ide.htm).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since it is a Maven project, we are going to change the `pom.xml` file to add
    the Cucumber dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we are going to declare some custom properties which will be used by
    us in managing the dependency version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are going to add the dependency for Cucumber-JVM with scope as test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now we need to add the dependency for Cucumber-JUnit with scope as test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it! We have integrated Cucumber and Maven.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By following these Steps, we have created a Maven project and added the Cucumber-Java
    dependency. At the moment, this project only has a `pom.xml` file, but this project
    can be used for adding different modules such as Feature files and Step Definitions.
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of using properties is that we are making sure that the dependency
    version is declared at one place in the `pom.xml` file. Otherwise, we declare
    a dependency at multiple places and may end up with a discrepancy in the dependency
    version.
  prefs: []
  type: TYPE_NORMAL
- en: The Cucumber-Java dependency is the main dependency necessary for the different
    building blocks of Cucumber. The **Cucumber-JUnit** dependency is for Cucumber
    JUnit Runner, which we use in running Cucumber test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Running Cucumber from the Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have integrated Cucumber with Maven, running Cucumber from the Terminal
    will not be a problem. Running any test framework from the Terminal has its own
    advantages, such as overriding the run configurations mentioned in the code.
  prefs: []
  type: TYPE_NORMAL
- en: So how do we run Cucumber test cases from the Terminal? Let's find out in our
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the command prompt and `cd` until the project root directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, let''s run all the Cucumber Scenarios from the command prompt. Since
    it''s a Maven project and we have added Cucumber in test scope dependency and
    all features are also added in test packages, run the following command in the
    command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00159.jpeg)![How to do it…](img/image00160.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The previous command runs everything as mentioned in the JUnit Runner class.
    However, if we want to override the configurations mentioned in the Runner, then
    we need to use following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you need help on these Cucumber options, then enter the following command
    in the command prompt and look at the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00161.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`mvn test` runs Cucumber Features using Cucumber''s JUnit Runner. The `@RunWith`
    (`Cucumber.class`) annotation on the `RunCukesTest` class tells JUnit to kick
    off Cucumber. The Cucumber runtime parses the command-line options to know what
    Feature to run, where the Glue Code lives, what plugins to use, and so on. When
    you use the JUnit Runner, these options are generated from the `@CucumberOptions`
    annotation on your test.'
  prefs: []
  type: TYPE_NORMAL
- en: Overriding Options from the Terminal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When it is necessary to override the options mentioned in the JUnit Runner,
    then we need `Dcucumber.options` from the Terminal. Let's look at some of the
    practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we want to run a Scenario by specifying the filesystem path, run the following
    command and look at the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/image00162.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In the preceding code, "`5`" is the Feature file line number where a Scenario
    starts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If we want to run the test cases using Tags, then we run the following command
    and notice the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the output of the preceding command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00163.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'If we want to generate a different report, then we can use the following command
    and see the JUnit report generate at the location mentioned:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it…](img/image00164.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you override the options with `-Dcucumber.options`, you will completely
    override whatever options are hardcoded in your `@CucumberOptions`. There is one
    exception to this rule, and that is the `--plugin` option. This will not override,
    but instead, it will add a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Cucumber with Jenkins and GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To schedule test case executions remotely, we integrate our testing frameworks
    with Jenkins. Jenkins has a lot of advantages as it is open source, free, easy
    to use, can schedule a run on scheduled time or trigger builds after an event,
    and so on. So it becomes very important that our Cucumber test cases are also
    run from Jenkins. We will look at this in detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Installing and running Jenkins on a local machine is out of the scope of this
    book. I am assuming that you have either local or remote Jenkins setup ready and
    can access Jenkins via the URL. If you need any help regarding the setup, follow
    the Step mentioned in the blog at [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will also need to upload our project on GitHub. Again, committing the project
    on GitHub is out of the scope of this book, but if you need any help, you can
    follow the instructions mentioned at [https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The GitHub project URL is [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git),
    which can be used to download the project we have been using until now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Jenkins in any browser with the URL `http://localhost:8080/jenkins/` (replace
    localhost with the machine's IP address, if you don't have Jenkins running locally).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Jenkins dashboard and click on **New Item**:![How to do it…](img/image00165.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the name of the Job that we want to create and also select the **Build
    a maven** **project** option. Click on **OK**.![How to do it…](img/image00166.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, enter the **Description** of the project:![How to do it…](img/image00167.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, enter the Git details by selecting the **Git** option in **Source Code
    Management** and enter **Repository URL** as [https://github.com/ShankarGarg/CucumberBook.git](https://github.com/ShankarGarg/CucumberBook.git)
    and **Credentials**. Keep the other options in this section as default.![How to
    do it…](img/image00168.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we come to the **Build** section. Since we have selected a Maven project,
    the `Root POM` is automatically mentioned. We need to mention the goal that we
    want to run, which, in our case, is `test`:![How to do it…](img/image00169.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Keep all other options as default and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on **Build Now** to run the project.![How to do it…](img/image00170.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click on **Build Now**, a build is triggered immediately. You can see
    the build number and the timestamp.![How to do it…](img/image00171.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the timestamp on the build. And then click on **Console Output**. Just
    verifying the output to make sure whether the test cases were run or not:![How
    to do it…](img/image00172.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we have integrated Maven with Cucumber, the integration with Jenkins was
    basically running a Maven project with Jenkins. Jenkins comes with a Maven plugin
    by default (when we selected the item type to **Build a maven project** most of
    the settings were taken care of at that time) The Build section was prepopulated
    with `pom.xml` and we just had to mention the goal as test.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins is also prepopulated with the GitHub plugin and we just had to mention
    the GitHub URL and credentials. So now every time the project is built, Jenkins
    takes the latest code from GitHub and then runs the test cases.
  prefs: []
  type: TYPE_NORMAL
- en: Running Cucumber test cases in parallel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running test cases in parallel is a very common and required practice for a
    good automation framework. Cucumber, by default, does not have any such option
    or setting. However, since Cucumber can be integrated with Maven and JUnit, using
    these two tools, we can run Cucumber Scenarios in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will run two Scenarios in parallel and, for web automation
    that will mean opening two browsers at the same time. So how do we make this possible?
    Let's understand in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We create a Feature file that has two Scenarios. We will aim to run these two
    Scenarios in parallel. This is just for the purpose of a demo, you can implement
    the same approach for *n* number of Scenarios.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Both the Scenarios will be associated with two different Tags so that they
    can be run using these tags. Focus on the highlighted tags in the following code;
    our Feature file should look something like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we should also have Step Definitions ready for this feature file. To focus
    on the main objective of this recipe, I have kept the code inside Step Definitions
    as a dummy. Here is what our Step Definition will look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The next Step is to write the Runners, which will make sure that test cases
    run in parallel. The first Step in that direction is to have one `RunCukeTest.java`
    class, which will specifically run Scenarios associated with the `@sanity` Tag.
    The code for `RunCukeTest` will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to write one more Runner, which will run Scenarios tagged with
    `@regression`. Focus on the highlighted code; the code for `RunCukeParallelTest.java`
    will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The last Step is to make sure that these two Runner classes are run in parallel.
    We will achieve this by making some changes to the `pom.xml` file. We will add
    the configuration for the Maven Surefire plugin, which will run the Runner classes
    in parallel. Here is what we will add to the existing `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also add the dependencies for Selenium, so that we can write the code
    for invoking the Selenium Webdriver instance. The code for this is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will create one more class `DriverFactory.java` for adding Selenium Code,
    which will have a function to invoke the Firefox browser. The class will look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will update the `hooks.java` file to add the `createDriver()` function so
    that Firefox will be invoked before each Scenario. This is how the code will look:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open Terminal and `cd` until the project root directory. To invoke the Maven
    configuration that we put in `pom.xml` file, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the output of the preceding command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00173.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven surefire plugin will run the classes mentioned in the `include` Tag
    in the configuration Tag as per the `forkcount` Tag value. So all the Java classes
    that end in `Test` (which are our `RunCukeTest` and `RunCukeParallelTest` JUnit
    Runner classes) will be executed in parallel in different threads. And since these
    two classes are JUnit Runner classes, they invoke the execution of Scenarios that
    are tagged with `@sanity` and on the different thread execution of Scenarios tagged
    with `@regression`.
  prefs: []
  type: TYPE_NORMAL
