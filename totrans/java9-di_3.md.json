["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- All your bean and its configuration metadata goes here -->\n    <bean id=\"...\" class=\"...\">\n    </bean>\n</beans>\n```", "```java\npackage com.packet.spring.contaner.check;\npublic class Car{\n    public void showType(){\n        System.out.println(\"This is patrol car..\");\n    }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- All your bean and its configuration metadata goes here -->\n    <bean id=\"myCar\" class=\"com.packet.spring.contaner.check.Car\">\n    </bean>\n</beans>\n```", "```java\nApplicationContext context = new ClassPathXmlApplicationContext(\"application-context.xml\");\nFileSystemXmlApplicationContext container).\n```", "```java\n// create and configure beans\nApplicationContext context = new ClassPathXmlApplicationContext(\"application-context.xml\");\n\n// retrieve configured instance\nCar carObj = context.getBean(\"myCar\");\n\n// use configured instance\ncarObj.showType(); \n```", "```java\npublic class EmployeeService {\n     private Logger log;\n     //Constructor\n      public EmployeeService(Logger log) {\n          this.log = log;\n      }\n\n      //Service method.\n      public void showEmployeeName() {\n        log.info(\"showEmployeeName method is called ....\");\n        log.debug(\"This is Debuggin point\");\n        log.error(\"Some Exception occured here ...\");\n      }\n\n}\n\npublic class Logger {\n  public void info(String msg){\n       System.out.println(\"Logger INFO: \"+msg);\n    }\n  public void debug(String msg){\n      System.out.println(\"Logger DEBUG: \"+msg);\n    }\n  public void error(String msg){\n      System.out.println(\"Logger ERROR: \"+msg);\n    }\n}\n\npublic class DIWithConstructorCheck {\n\n  public static void main(String[] args) {\n\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    EmployeeService employeeService = (EmployeeService) springContext.getBean(\"employeeService\");\n    employeeService.showEmployeeName();\n\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <!-- All your bean and its configuration metadata goes here -->\n    <bean id=\"employeeService\" class=\"com.packet.spring.constructor.di.EmployeeService\">\n        <constructor-arg ref=\"logger\"/> \n    </bean>\n\n    <bean id=\"logger\" class=\"com.packet.spring.constructor.di.Logger\">\n    </bean>\n\n</beans>\n```", "```java\npublic class Camera {\n  private int resolution;\n  private String mode;\n  private boolean smileShot;\n\n  //Constructor.\n  public Camera(int resolution, String mode, boolean smileShot) {\n    this.resolution = resolution;\n    this.mode = mode;\n    this.smileShot = smileShot;\n  }\n\n  //Public method\n  public void showSettings() {\n    System.out.println(\"Resolution:\"+resolution+\"px mode:\"+mode+\" smileShot:\"+smileShot);\n  }\n}\n```", "```java\n<bean id=\"camera\" class=\"com.packet.spring.constructor.di.Camera\">\n      <constructor-arg type=\"int\" value=\"12\" />\n      <constructor-arg type=\"java.lang.String\" value=\"normal\" />\n      <constructor-arg type=\"boolean\" value=\"false\" />\n</bean>\n```", "```java\n//Constructor.\n  public Camera(int resolution, String mode, boolean smileShot, boolean flash) {\n    this.resolution = resolution;\n    this.mode = mode;\n    this.smileShot = smileShot;\n    this.flash = flash;\n  }\n```", "```java\n      <constructor-arg type=\"java.lang.String\" value=\"normal\"/>\n      <constructor-arg type=\"boolean\" value=\"true\" />\n      <constructor-arg type=\"int\" value=\"12\" />\n      <constructor-arg type=\"boolean\" value=\"false\" /> \n```", "```java\n      <constructor-arg type=\"java.lang.String\" value=\"normal\"\n      index=\"1\"/>\n      <constructor-arg type=\"boolean\" value=\"true\" index=\"3\"/>\n      <constructor-arg type=\"int\" value=\"12\" index=\"0\"/>\n      <constructor-arg type=\"boolean\" value=\"false\" index=\"2\"/>\n```", "```java\npublic class DocumentBase {\n  private DocFinder docFinder;\n //Setter method to inject dependency. \n public void setDocFinder(DocFinder docFinder) {\n    this.docFinder = docFinder;\n  }\n  public void performSearch() {\n    this.docFinder.doFind();\n  }\n\n}\n\npublic class DocFinder {\n  public void doFind() {\n    System.out.println(\" Finding in Document Base \");\n  }\n}\n\npublic class DIWithSetterCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    DocumentBase docBase = (DocumentBase) springContext.getBean(\"docBase\");\n    docBase.performSearch();\n  }\n}\n```", "```java\n    <bean id=\"docBase\" class=\"com.packet.spring.setter.di.DocumentBase\">\n        <property name=\"docFinder\" ref=\"docFinder\" /> \n    </bean>\n\n    <bean id=\"docFinder\" class=\"com.packet.spring.setter.di.DocFinder\">\n    </bean>\n```", "```java\n<bean id=\"docBase\" class=\"com.packet.spring.setter.di.DocumentBase\">\n        <property name=\"buildNo\" value=\"1.2.6\" />\n</bean>\n```", "```java\npublic class SearchableFactory {\n  private static SearchableFactory searchableFactory;\n\n  //Static factory method to get instance of Searchable Factory.\n  public static SearchableFactory getSearchableFactory() {\n    if(searchableFactory == null) {\n      searchableFactory = new SearchableFactory();\n    }\n    System.out.println(\"Factory method is used: getSearchableFactory() \");\n    return searchableFactory;\n  }\n}\n\npublic class DIWithFactoryCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    SearchableFactory searchableFactory = (SearchableFactory)springContext.getBean(\"searchableFactory\");\n  }\n}\nSearchableFactory class has one static method, getSearchableFactory, which returns the object of the same class. This behaves as a factory method. The preceding code can be configured in Spring, as per the following snippet:\n```", "```java\n<bean id=\"searchableFactory\"    class=\"com.packet.spring.factory.di.SearchableFactory\" factory-method=\"getSearchableFactory\">\n</bean>\n```", "```java\npublic class Employee {\n  private String type;\n  public Employee(String type) {\n    this.type = type;\n  }\n  public void showType() {\n    System.out.println(\"Type is :\"+type);\n  }\n}\n\npublic class Developer extends Employee {\n  public Developer(String type) {\n    super(type);\n  }\n}\n\npublic class Manager extends Employee {\n  public Manager(String type) {\n    super(type);\n  }\n}\n\n//Factory Bean who has Factory method.\npublic class EmployeeService {\n\n  //Instance Factory method\n  public Employee getEmployee(String type) {\n    Employee employee = null;\n    if(\"developer\".equalsIgnoreCase(type)) {\n      employee = new Developer(\"developer\");\n    }else if(\"manager\".equalsIgnoreCase(type)) {\n      employee = new Manager(\"manager\");\n    }\n    return employee;\n  }\n}\n\npublic class SalaryService {\n  private Employee employee;\n  public void setEmployee(Employee employee) {\n    this.employee = employee;\n  }\n  public void showEmployeeType() {\n    if(this.employee !=null) {\n      this.employee.showType();\n    }\n  }\n}\n\npublic class DIWithInstanceFactoryCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    SalaryService salaryService = (SalaryService)springContext.getBean(\"salaryService\");\n    salaryService.showEmployeeType();\n  }\n}\n```", "```java\n<bean id=\"employeeService\"               class=\"com.packet.spring.factory.di.EmployeeService\">\n</bean>\n\n<bean id=\"developerBean\" factory-method=\"getEmployee\" factory-bean=\"employeeService\">\n      <constructor-arg value=\"developer\"></constructor-arg> \n</bean>\n\n<bean id=\"salaryService\" class=\"com.packet.spring.factory.di.SalaryService\">\n      <property name=\"employee\" ref=\"developerBean\"/>\n</bean>\n```", "```java\npublic class UserService {\n  public void getUserDetail() {\n    System.out.println(\" This is user detail \");\n  }\n}\n\npublic class AccountService {\n  private UserService userService=null;\n\n  public void setUserService(UserService userService) {\n    this.userService = userService;\n  }\n\n  //Setter DI method.\n  public void processUserAccount() {\n    if(userService !=null) {\n      userService.getUserDetail();\n    }\n  }\n}\n\npublic class DIAutoWireCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    AccountService accountService = (AccountService)springContext.getBean(\"accountService\");\n    accountService.processUserAccount();\n  }\n}\n```", "```java\n<bean id=\"userService\" class=\"com.packet.spring.autowire.di.UserService\">\n</bean>\n\n<bean id=\"accountService\" class=\"com.packet.spring.autowire.di.AccountService\" autowire=\"byName\">\n</bean>\n```", "```java\npublic class EmailService {\n  public void sendEmail() {\n    System.out.println(\" Sending Email ..!! \");\n  }\n}\n\npublic class HRService {\n  private EmailService emailService = null;\n  //Setter DI method.\n  public void setEmailService(EmailService emailService) {\n    this.emailService = emailService;\n  }\n\npublic void initiateSeparation() {\n    //Business logic for sepration process\n\n    if(emailService !=null) {\n      emailService.sendEmail();\n    }\n  }\n}\n```", "```java\n<!-- Example of autowire byType -->\n<bean id=\"emailService\" class=\"com.packet.spring.autowire.di.EmailService\">\n</bean>\n<bean id=\"hrService\" class=\"com.packet.spring.autowire.di.HRService\" autowire=\"byType\">\n</bean>\n```", "```java\npublic class StudentService {\n  public void getStudentDetail() {\n    System.out.println(\" This is Student details.. \");\n  }\n}\n\npublic class ExamService {\n  private StudentService studentService;\n  private String examServiceType;\n\n  public ExamService(StudentService studentService, String examServiceType) {\n    this.studentService=studentService;\n    this.examServiceType = examServiceType;\n  }\n\n  public void getExamDetails() {\n    if(studentService !=null) {\n      //Business logic to get exam details.\n\n      studentService.getStudentDetail();\n    }\n  }\n}\n```", "```java\n <!-- Example of autowire by Constructor -->\n<bean id=\"studentService\" class=\"com.packet.spring.autowire.di.StudentService\">\n </bean>\n<bean id=\"examService\" class=\"com.packet.spring.autowire.di.ExamService\" autowire=\"constructor\">\n     <constructor-arg value=\"Science Exam\"/>\n</bean>\n```", "```java\npublic class Professor {\n  private String name;\n  //Constructor\n  public Professor() {\n    System.out.println(\"Object of Professor is created\");\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n\npublic class Subject {\n  private Professor professor;\n  public Subject() {\n    System.out.println(\"Object of Subject is created\");\n  }\n  //Setter injection method\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n  public void taughtBy() {\n    if(professor !=null) {\n      System.out.println(\"This subject is taught by \"+professor.getName());\n    }\n  }\n}\npublic class DIAutoWireCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    Subject subject = (Subject)springContext.getBean(\"subject\");\n    subject.taughtBy();\n  }\n}\nSubject class depends on Professor. The object of the Professor class is injected into Subject through the setter injection. The XML-based configuration can be done with Spring as follows:\n```", "```java\n<bean id=\"professor\" class=\"com.packet.spring.annotation.di.Professor\">\n      <property name=\"name\" value=\"Nilang\" />\n</bean>\n<bean id=\"subject\" class=\"com.packet.spring.annotation.di.Subject\">\n      <property name=\"professor\" ref=\"professor\" />\n</bean>\n```", "```java\n...\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\nObject of Professor is created\nObject of Subject is created\nsetting the professor through setter method injection \nThis subject is taught by Nilang\n```", "```java\n//Updated setter injection method\n  @Autowired\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n\n//Updated XML configuration\n<bean id=\"professor\" class=\"com.packet.spring.annotation.di.Professor\">\n      <property name=\"name\" value=\"Nilang\" />\n</bean>\n\n<bean id=\"subject\" class=\"com.packet.spring.annotation.di.Subject\">\n</bean>\n```", "```java\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\nObject of Professor is created\nObject of Subject is created\n```", "```java\n// Updated Configuration\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config />\n    <bean id=\"professor\" class=\"com.packet.spring.annotation.di.Professor\">\n      <property name=\"name\" value=\"Nilang\" />\n    </bean>\n\n    <bean id=\"subject\" class=\"com.packet.spring.annotation.di.Subject\">\n    </bean>\n</beans>\n\n//Output\n...\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\nObject of Professor is created\nObject of Subject is created\nsetting the professor through setter method injection \nThis subject is taught by Nilang\n```", "```java\n//Updated Spring application context (XML) file\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config />\n    <context:component-scan base-package=\"com.packet.spring.annotation.di\"/>\n</beans>\n\n//Updated Professor class\n@Component\npublic class Professor {\n  @Value(value=\"Nilang\")\n  private String name;\n  //Constructor\n  public Professor() {\n    System.out.println(\"Object of Professor is created\");\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n\n//Updated Subject class\n@Component\npublic class Subject {\n  private Professor professor;\n  public Subject() {\n    System.out.println(\"Object of Subject is created\");\n  }\n  //Setter injection method\n  @Autowired\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n  public void taughtBy() {\n    if(professor !=null) {\n      System.out.println(\"This subject is taught by \"+professor.getName());\n    }\n  }\n}\n```", "```java\n  @Autowired \n  public void setName(@Value(\"Komal\") String name) {\n    this.name = name;\n  }\n```", "```java\npublic class Professor {\n  private String name;\n  //Constructor\n  public Professor() {\n    System.out.println(\"Object of Professor is created\");\n  }\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n}\n\n@Component\npublic class Subject {\n  private Professor professor;\n  public Subject() {\n    System.out.println(\"Object of Subject is created\");\n  }\n  //Setter injection method\n  @Autowired\n  @Qualifier(\"professor1\")\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n  public void taughtBy() {\n    if(professor !=null) {\n      System.out.println(\"This subject is taught by \"+professor.getName());\n    }\n  }\n}\n\n//Updated Application context (XML) file.\n\n<context:component-scan base-package=\"com.packet.spring.annotation.di\"/>\n<bean id=\"professor1\" class=\"com.packet.spring.annotation.di.Professor\">\n      <property name=\"name\" value=\"Ramesh\" />\n</bean>\n<bean id=\"professor2\" class=\"com.packet.spring.annotation.di.Professor\">\n      <property name=\"name\" value=\"Nilang\" />\n</bean>\n\n```", "```java\n...\norg.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions\nINFO: Loading XML bean definitions from class path resource [application-context.xml]\nObject of Professor is created\nObject of Subject is created\nObject of Professor is created\nsetting the professor through setter method injection \nObject of Professor is created\nThis subject is taught by Ramesh\n```", "```java\npublic class Employee {\n  private String type;\n  public Employee(String type) {\n    this.type = type;\n  }\n  public void showType() {\n    System.out.println(\"Type is :\"+type);\n  }\n}\n\npublic class Developer extends Employee {\n  public Developer(String type) {\n    super(type);\n  }\n}\n\npublic class Manager extends Employee {\n  public Manager(String type) {\n    super(type);\n  }\n}\n\n@Component\npublic class EmployeeService {\n  //Instance Factory method with annotation\n  @Bean(\"developerBean\")\n  public Employee getEmployee(@Value(\"developer\")String type) {\n    Employee employee = null;\n    if(\"developer\".equalsIgnoreCase(type)) {\n      employee = new Developer(\"developer\");\n    }else if(\"manager\".equalsIgnoreCase(type)) {\n      employee = new Manager(\"manager\");\n    }\n    System.out.println(\"Employee of type \"+type+\" is created\");\n    return employee;\n  }\n}\n\n@Component\npublic class SalaryService {\n  private Employee employee;\n  @Autowired\n  public void setEmployee(@Qualifier(\"developerBean\")Employee employee) {\n    this.employee = employee;\n  }\n  public void showEmployeeType() {\n    if(this.employee !=null) {\n      this.employee.showType();\n    }\n  }\n}\n\npublic class DIWithAnnotationFactoryCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new ClassPathXmlApplicationContext(\"application-context.xml\");\n    SalaryService salaryService = (SalaryService)springContext.getBean(\"salaryService\");\n    salaryService.showEmployeeType();\n  }\n}\n```", "```java\n<bean id=\"employeeService\" class=\"com.packet.spring.annotation.factory.di.EmployeeService\">\n</bean>\n<bean id=\"developerBean\" factory-method=\"getEmployee\" factory-bean=\"employeeService\">\n      <constructor-arg value=\"developer\"></constructor-arg> \n</bean>\n```", "```java\n<bean id=\"employeeService\" class=\"com.packet.spring.annotation.factory.di.EmployeeService\">\n</bean>\n<bean id=\"developerBean\" factory-method=\"getEmployee\" factory-bean=\"employeeService\">\n      <constructor-arg value=\"developer\"></constructor-arg> \n</bean>\n\n<bean id=\"salaryService\" \nclass=\"com.packet.spring.annotation.factory.di.SalaryService\">\n      <property name=\"employee\" ref=\"developerBean\"/>\n</bean>\n```", "```java\n@Configuration\npublic class JavaBaseSpringConfig {\n  @Bean(name=\"professor\")\n  public Professor getProfessor() {\n    return new Professor();\n  }\n  @Bean(name=\"subjectBean\")\n  public Subject getSubject() {\n    return new Subject();\n  }\n}\n```", "```java\n<beans>\n    <bean id=\"professor\" class=\"com.packet.spring.javaconfig.di.Professor\"/>\n    <bean id=\"subjectBean\" class=\"com.packet.spring.javaconfig.di.Subject\"/>\n</beans>\n```", "```java\npublic class DIWithJavaConfigCheck {\n  public static void main(String[] args) {\n    ApplicationContext springContext = new AnnotationConfigApplicationContext(JavaBaseSpringConfig.class);\n    Professor professor = (Professor)springContext.getBean(\"professor\");\n    Subject subject = (Subject)springContext.getBean(\"subjectBean\");\n  }\n}\n```", "```java\npublic class Professor {\n  private String name;\n  //Constructor\n  public Professor() {\n    System.out.println(\"Object of Professor is created\");\n  }\n  public String getName() {\n    return this.name;\n  }\n  @Autowired \n  public void setName(@Value(\"Komal\") String name) {\n    this.name = name;\n  }\n}\n\npublic class Subject {\n  private Professor professor;\n  public Subject() {\n    System.out.println(\"Object of Subject is created\");\n  }\n  //Setter injection method\n  @Autowired\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n  public void taughtBy() {\n    if(professor !=null) {\n      System.out.println(\"This subject is taught by \"+professor.getName());\n    }\n  }\n}\n```", "```java\n@Configuration\n@ComponentScan(basePackages=\"com.packet.spring.javaconfig.di\")\npublic class JavaBaseSpringConfig {\n}\n\n@Component(\"professor\")\npublic class Professor {\n  private String name;\n  //Constructor\n  public Professor() {\n    System.out.println(\"Object of Professor is created\");\n  }\n  public String getName() {\n    return this.name;\n  }\n  @Autowired \n  public void setName(@Value(\"Komal\") String name) {\n    this.name = name;\n  }\n}\n\n@Component(\"subjectBean\")\npublic class Subject {\n  private Professor professor;\n  public Subject() {\n    System.out.println(\"Object of Subject is created\");\n  }\n  //Setter injection method\n  @Autowired\n  public void setProfessor(Professor professor) {\n    System.out.println(\"setting the professor through setter method injection \");\n    this.professor = professor;\n  }\n  public void taughtBy() {\n    if(professor !=null) {\n      System.out.println(\"This subject is taught by \"+professor.getName());\n    }\n  }\n}\nProfessor and Subject classes as components by declaring the @Component annotation. We also instructed the configuration class—JavaBaseSpringConfig, to scan the specific Java package with annotation @ComponentScan, and pass the Java package value in the basePackage attribute. In both of the previous cases, you will get identical output. This is equivalent to the following XML configuration:\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans   \n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n       http://www.springframework.org/schema/beans/spring-beans.xsd\n       http://www.springframework.org/schema/context\n       http://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <bean id=\"professor\" class=\"com.packet.spring.javaconfig.di.Professor\">\n        <property name=\"name\" value=\"komal\" />\n    </bean>\n    <bean id=\"subjectBean\" class=\"com.packet.spring.javaconfig.di.Subject\" autowire=\"byType\">\n    </bean>\n</beans>\n```"]