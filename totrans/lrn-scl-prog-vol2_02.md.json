["```java\nfor, while, and do while loops. We'll see how these loops work in Scala. From there, we'll have a quick look at for expressions. We'll also go through the FP (functional programming) way of doing loops through recursion. Then, we'll start taking a look at Scala's conditional statements ifÂ and end, with learning how we can shape up program flow using pattern matching. Here's a quick card for what's in there for us in this chapter:\n```", "```java\nobject PagePrinter extends App {\n\n   /*\n    * Prints pages page 1 to lastIndex for doc\n    */\n   def printPages(doc: Document, lastIndex: Int) = ??? //Yet to be defined\n\n   /*\n    * Prints pages page startIndex to lastIndex for doc\n    */\n   def printPages(doc: Document, startIndex: Int, lastIndex: Int) = ???\n\n   /*\n    * Prints pages with given Indexes for doc\n    */\n   def printPages(doc: Document, indexes: Int*) = ??? \n\n   /*\n    * Prints pages \n    */ \n  private def print(index: Int) = println(s\"Printing Page $index.\")\n\n }\n\n  /*\n   * Declares a Document type with two arguments numOfPages, typeOfDoc\n   */\n case class Document(numOfPages: Int, typeOfDoc: String) \n```", "```java\nscala> val stocks = List(\"APL\", \"GOOG\", \"JLR\", \"TESLA\") \nstocks: List[String] = List(APL, GOOG, JLR, TESLA) \n\nscala> stocks.foreach(x => println(x))\nAPL \nGOOG \nJLR \nTESLA \n```", "```java\nobject PagePrinter extends App{\n\n   /*\n    * Prints pages page 1 to lastIndex for doc\n    */\n   def printPages(doc: Document, lastIndex: Int) = if(lastIndex <= doc.numOfPages) for(i <- 1 to lastIndex) print(i)\n\n   /*\n    * Prints pages page startIndex to lastIndex for doc\n    */\n   def printPages(doc: Document, startIndex: Int, lastIndex: Int) = if(lastIndex <= doc.numOfPages && startIndex > 0 && startIndex < lastIndex) for(i <- startIndex to lastIndex) print(i)\n\n   /*\n    * Prints pages with given Indexes for doc\n    */\n def printPages(doc: Document, indexes: Int*) = for(index <- indexes if index <= doc.numOfPages && index > -1) print(index)\n\n  /*\n   *  Prints pages\n   */\n   private def print(index: Int) = println(s\"Printing Page $index.\")\n\n   println(\"---------Method V1-----------\")\n   printPages(Document(15, \"DOCX\"), 5)\n\n   println(\"---------Method V2-----------\")\n   printPages(Document(15, \"DOCX\"), 2, 5)\n\n   println(\"---------Method V3-----------\")\n   printPages(Document(15, \"DOCX\"), 2, 5, 7, 15)\n\n }\n\n/*\n  * Declares a Document type with two arguments numOfPages, typeOfDoc\n  */\n case class Document(numOfPages: Int, typeOfDoc: String) \n```", "```java\n---------Method V1----------- \nPrinting Page 1\\. \nPrinting Page 2\\. \nPrinting Page 3\\. \nPrinting Page 4\\. \nPrinting Page 5\\. \n---------Method V2----------- \nPrinting Page 2\\. \nPrinting Page 3\\. \nPrinting Page 4\\. \nPrinting Page 5\\. \n---------Method V3----------- \nPrinting Page 2\\. \nPrinting Page 5\\. \nPrinting Page 7\\. \nPrinting Page 15\\. \n```", "```java\nwhile (condition check (if it's true))  \n        ... // Block of Code to be executed \n```", "```java\nscala> val stocks = List(\"APL\", \"GOOG\", \"JLR\", \"TESLA\") \nstocks: List[String] = List(APL, GOOG, JLR, TESLA) \n\nscala> val iteraatorForStocks = stocks.iterator \niteraatorForStocks: Iterator[String] = non-empty iterator \n\nscala> while(iteraatorForStocks.hasNext) println(iteraatorForStocks.next()) \nAPL \nGOOG \nJLR \nTESLA \n```", "```java\ndo\n        ... // Block of Code to be executed \n        while(condition check (if it's true)) \n```", "```java\nscala> do println(\"I'll stop by myself after 1 time!\") while(false) \n```", "```java\nI'll stop by myself after 1 time! \n```", "```java\nobject ForExpressions extends App {\n\n   val person1 = Person(\"Albert\", 21, 'm')\n   val person2 = Person(\"Bob\", 25, 'm')\n   val person3 = Person(\"Cyril\", 19, 'f')\n\n   val persons = List(person1, person2, person3)\n\n   for {\n     person <- persons\n     age = person.age\n     name = person.name\n     if age > 20 && name.startsWith(\"A\")\n   } {\n     println(s\"Hey ${name} You've won a free Gift Hamper.\")\n   }\n\n case class Person(name: String, age: Int, gender: Char)\n }\n\n```", "```java\nHey Albert You've won a free Gift Hamper. \n```", "```java\nobject ForYieldExpressions extends App {\n\n   val person1 = Person(\"Albert\", 21, 'm')\n   val person2 = Person(\"Bob\", 25, 'm')\n   val person3 = Person(\"Cyril\", 19, 'f')\n\n   val persons = List(person1, person2, person3)\n\n   val winners = for {\n     person <- persons\n     age = person.age\n     name = person.name\n     if age > 20\n   } yield name\n\n   winners.foreach(println)\n\n  case class Person(name: String, age: Int, gender: Char)\n }\n\n```", "```java\nAlbert\nBob\n```", "```java\nobject RecursionEx extends App {\n\n   /*\n   * 2 to the power n\n   * only works for positive integers!\n   */\n def power2toN(n: Int): Int = if(n == 0) 1 else 2 * power2toN(n - 1)\n\n   println(power2toN(2))\n   println(power2toN(4))\n   println(power2toN(6))\n } \n```", "```java\n4 \n16 \n64 \n```", "```java\ndef power2toN(n: Int) = if(n == 0) 1 else (2 * power2toN(n - 1)) \n```", "```java\ndef power2toN(n: Int): Int = if(n == 0) 1 else 2 * power2toN(n - 1) \n```", "```java\nif(n == 0) 1 else 2 * power2toN(n - 1) \n```", "```java\npackage chapter3\n\nimport scala.annotation.tailrec\n\n object TailRecursionEx extends App {\n\n   /*\n    * 2 to the power n\n    * @tailrec optimization\n    */\n   def power2toNTail(n: Int): Int = {\n     @tailrec\n     def helper(n: Int, currentVal: Int): Int = {\n       if(n == 0) currentVal else helper(n - 1, currentVal * 2)\n     }\n     helper(n, 1)\n   }\n\n   println(power2toNTail(2))\n   println(power2toNTail(4))\n   println(power2toNTail(6))\n } \n\n```", "```java\n4 \n16 \n64 \n```", "```java\nif (condition (is true)) \n          ... //Block of code to be executed \nelse \n          ... //Block of code to be executed \n\nscala> val age = 17 \nage: Int = 17 \n\nscala> if(age > 18) println(\"You're now responsible adult.\") else println(\"You should grow up.\") \nYou should grow up. \n```", "```java\nscala> val marks = 89 \nmarks: Int = 89 \n\nscala> val performance = if(marks >= 90) \"Excellent\" else if(marks > 60 && marks < 90) \"Average\" else \"Poor\" \nperformance: String = Average \n```", "```java\nobject PatternMatching extends App {\n\n   def matchAgainst(i: Int) = i match {\n     case 1 => println(\"One\")\n     case 2 => println(\"Two\")\n     case 3 => println(\"Three\")\n     case 4 => println(\"Four\")\n   }\n\n   matchAgainst(5)\n } \n```", "```java\nException in thread \"main\" scala.MatchError: 5 (of class java.lang.Integer) \n            at PatternMatching$.matchAgainst(PatternMatching.scala:6) \n            at PatternMatching$.delayedEndpoint$PatternMatching$1(PatternMatching.scala:13) \n            at PatternMatching$delayedInit$body.apply(PatternMatching.scala:4) \n            at scala.Function0.apply$mcV$sp(Function0.scala:34) \n            at scala.Function0.apply$mcV$sp$(Function0.scala:34) \n            at scala.runtime.AbstractFunction0.apply$mcV$sp(AbstractFunction0.scala:12) \n```", "```java\nobject PatternMatching extends App {\n\n   def matchAgainst(i: Int) = i match {\n     case 1 => println(\"One\")\n     case 2 => println(\"Two\")\n     case 3 => println(\"Three\")\n     case 4 => println(\"Four\")\n     case _ => println(\"Not in Range 1 to 4\")\n   }\n\n   matchAgainst(1)\n   matchAgainst(5)\n } \n```", "```java\nOne \nNot in Range 1 to 4 \n```"]