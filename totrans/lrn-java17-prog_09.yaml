- en: '*Chapter 7*: Java Standard and External Libraries'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is not possible to write a Java program without using the standard libraries,
    also called the **Java Class Library** (**JCL**). That is why a solid familiarity
    with such libraries is as vital for successful programming as knowing the language
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: There are also the non-standard libraries, which are called external libraries
    or third-party libraries because they are not included in the **Java Development
    Kit** (**JDK**) distribution. Some of them have long become a permanent fixture
    of any programmer’s toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Keeping track of all the functionality that’s available in these libraries is
    not easy. This is because an `java.lang`.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of this chapter is to provide you with an overview of the functionality
    of the most popular packages of JCL, as well as external libraries.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java Class Library** (**JCL**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to execute the code examples in this chapter, you will need the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: A computer with Microsoft Windows, Apple macOS, or the Linux operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java SE version 17 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IDE or code editor of your choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instructions on how to set up a Java SE and IntelliJ IDEA editor were provided
    in [*Chapter 1*](B18388_01_ePub.xhtml#_idTextAnchor015), *Getting Started with
    Java 17*. The files that contain the code examples for this chapter are available
    on GitHub in the [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    repository, in the `examples/src/main/java/com/packt/learnjava/ch07_libraries`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Java Class Library (JCL)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JCL is a collection of packages that implement the language. In simpler terms,
    it is a collection of the `.class` files that are included in the JDK and ready
    to be used. Once you have installed Java, you get them as part of the installation
    and can start building your application code up using the JCL classes as building
    blocks, which take care of a lot of the low-level plumbing. The richness and ease
    of use of JCL have substantially contributed to Java’s popularity.
  prefs: []
  type: TYPE_NORMAL
- en: To use a JCL package, you can import it without adding a new dependency to the
    `pom.xml` file. Maven adds JCL to the classpath automatically. And that is what
    separates the standard library and external libraries; if you need to add a library
    (typically, a `.jar` file) as a dependency in the Maven `pom.xml` configuration
    file, this library is an external one. Otherwise, it is a standard library or
    JCL.
  prefs: []
  type: TYPE_NORMAL
- en: Some JCL package names start with `java`. Traditionally, they are called *core
    Java packages*, while those that start with `javax` used to be called *extensions*.
    This was done because the extensions were thought to be optional and maybe even
    released independently of JDK. There was also an attempt to promote the former
    extension library to become a core package. But that would require changing the
    package name from `java` to `javax`, which would break the already existing applications
    that used the `javax` package. Therefore, the idea was abandoned, so the distinction
    between the core package and extensions gradually disappeared.
  prefs: []
  type: TYPE_NORMAL
- en: That is why, if you look at the official Java API on the Oracle website, you
    will see listed as standard not only the `java` and `javax` packages, but also
    `jdk`, `com.sun`, `org.xml`, and some other packages too. These extra packages
    are primarily used by the tools of other specialized applications. In this book,
    we will concentrate mostly on mainstream Java programming and talk only about
    the `java` and `javax` packages.
  prefs: []
  type: TYPE_NORMAL
- en: java.lang
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This package is so fundamental that it doesn’t need to be imported for you
    to use it. The JVM authors decided to import it automatically. It contains the
    most often used classes of JCL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Object`: The base class of any other Java class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Class`: Carries metadata of every loaded class at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`String`, `StringBuffer`, and `StringBuilder`: Supports operations of the `String`
    type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The wrapper classes of all primitive types: `Byte`, `Boolean`, `Short`, `Character`,
    `Integer`, `Long`, `Float`, and `Double`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Number`: The base class for the wrapper classes of the numeric primitive types
    – all the previously listed classes, except `Boolean`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`System`: Provides access to important system operations and the standard input
    and output (we have used the `System.out` object in every code example in this
    book).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Runtime`: Provides access to the execution environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Thread` and `Runnable` interfaces: Fundamental for creating Java threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Iterable` interface: Used by the iteration statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Math`: Provides methods for basic numeric operations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Throwable`: The base class for all exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Error`: This is an `exception` class since all its children are used to communicate
    system errors that can’t be caught by an application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Exception`: This class and its direct children represent checked exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RuntimeException`: This class and its children represent unchecked exceptions,
    also called runtime exceptions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ClassLoader`: This class reads the `.class` files and puts (loads) them into
    memory; it also can be used to build a customized class loader.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Process` and `ProcessBuilder`: These classes allow you to create other JVM
    processes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other useful classes and interfaces are available as well.
  prefs: []
  type: TYPE_NORMAL
- en: java.util
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the content of the `java.util` package is dedicated to supporting Java
    collections:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Collection` interface: The base interface of many other interfaces of
    collections, it declares all the basic methods that are necessary to manage collection
    elements; for example, `size()`, `add()`, `remove()`, `contains()`, `stream()`,
    and others. It also extends the `java.lang.Iterable` interface and inherits its
    methods, including `iterator()` and `forEach()`, which means that any implementation
    of the `Collection` interface or any of its children – `List`, `Set`, `Queue`,
    `Deque`, and others – can be used in iteration statements too, such as `ArrayList`,
    `LinkedList`, `HashSet`, `AbstractQueue`, `ArrayDeque`, and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Map` interface and the classes that implement it: `HashMap`, `TreeMap`,
    and others.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Collections` class: This class provides many static methods that are used
    to analyze, manipulate, and convert collections.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other collection interfaces, classes, and related utilities are also available.
  prefs: []
  type: TYPE_NORMAL
- en: We talked about Java collections and saw examples of their usage in [*Chapter
    6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures, Generics, and Popular
    Utilities*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `java.util` package also includes several other useful classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Objects`: Provides various object-related utility methods, some of which we
    looked at in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures,
    Generics, and Popular Utilities*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Arrays`: Contains 160 static methods to manipulate arrays, some of which we
    looked at in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures,
    Generics, and Popular Utilities*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Formatter`: This allows you to format any primitive type, including `String`,
    `Date`, and other types; we learned how to use it in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Optional`, `OptionalInt`, `OptionalLong`, and `OptionalDouble`: These classes
    help avoid `NullPointerException` by wrapping the actual value that can be null
    or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Properties`: Helps read and create key-value pairs that are used for application
    configuration and similar purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Random`: Complements the `java.lang.Math.random()` method by generating streams
    of pseudo-random numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StringTokeneizer`: Breaks the `String` object into tokens that are separated
    by the specified delimiter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StringJoiner`: Constructs a sequence of characters that are separated by the
    specified delimiter. Optionally, it is surrounded by the specified prefix and
    suffix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many other useful utility classes are available, including the classes that
    support internationalization and Base64-encoding and decoding.
  prefs: []
  type: TYPE_NORMAL
- en: java.time
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `java.time` package contains classes for managing dates, times, periods,
    and durations. The package includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Month` enum.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `DayOfWeek` enum.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Clock` class, which returns the current instant, date, and time using a
    time zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Duration` and `Period` classes represent and compare amounts of time in
    different time units.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `LocalDate`, `LocalTime`, and `LocalDateTime` classes represent dates and
    times without a time zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ZonedDateTime` class represents the date and time with a time zone.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ZoneId` class identifies a time zone such as America/Chicago.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `java.time.format.DateTimeFormatter` class allows you to present the date
    and time as per the **International Standards Organization** (**ISO**) formats,
    such as the *YYYY-MM-DD* pattern.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some other classes that support date and time manipulation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed most of these classes in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.
  prefs: []
  type: TYPE_NORMAL
- en: java.io and java.nio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `java.io` and `java.nio` packages contain classes and interfaces that support
    reading and writing data using streams, serialization, and filesystems. The difference
    between these two packages is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `java.io` package classes allow you to read/write data as it comes without
    caching it (as we discussed in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *Strings, Input/Output, and Files*), while classes of the `java.nio` package create
    buffers that allow you to move back and forth along the populated buffer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `java.io` package classes block the stream until all the data is read or
    written, while classes of the `java.nio` package are implemented in a non-blocking
    style (we will talk about the non-blocking style in [*Chapter 15*](B18388_15_ePub.xhtml#_idTextAnchor315),
    *Reactive Programming*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: java.sql and javax.sql
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These two packages compose the `javax.sql` package complements the `java.sql`
    package by providing support for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `DataSource` interface as an alternative to the `DriverManager` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connections and statements pooling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Distributed transactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rowsets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will talk about these packages and see code examples in [*Chapter 10*](B18388_10_ePub.xhtml#_idTextAnchor230),
    *Managing Data in a Database*.
  prefs: []
  type: TYPE_NORMAL
- en: java.net
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `java.net` package contains classes that support application networking
    at the following two levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Low-level networking**, based on the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IP addresses
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Sockets, which are basic bidirectional data communication mechanisms
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various network interfaces
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High-level networking**, based on the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Resource Identifier** (**URI**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Universal Resource Locator** (**URL**)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connections to the resource being pointed to by URLs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will talk about this package and see code examples of it in [*Chapter 12*](B18388_12_ePub.xhtml#_idTextAnchor266),
    *Network Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: java.lang.math and java.math
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `java.lang.math` package contains methods for performing basic numeric operations,
    such as calculating the minimum and maximum of two numeric values, the absolute
    value, the elementary exponential, logarithms, square roots, trigonometric functions,
    and many other mathematical operations.
  prefs: []
  type: TYPE_NORMAL
- en: The `java.math` package complements Java primitive types and wrapper classes
    of the `java.lang` package as you can work with much bigger numbers using the
    `BigDecimal` and `BigInteger` classes.
  prefs: []
  type: TYPE_NORMAL
- en: java.awt, javax.swing, and javafx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first Java library that supported building a `java.awt` package. It provided
    an interface to the native system of the executing platform that allowed you to
    create and manage windows, layouts, and events. It also had the basic GUI widgets
    (such as text fields, buttons, and menus), provided access to the system tray,
    and allowed you to launch a web browser and email a client from the Java code.
    Its heavy dependence on the native code made the AWT-based GUI look different
    on different platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In 1997, Sun Microsystems and Netscape Communications Corporation introduced
    Java Foundation Classes, later called Swing, and placed them in the `javax.swing`
    package. The GUI components that were built with Swing were able to emulate the
    look and feel of some native platforms but also allowed you to plug in a look
    and feel that did not depend on the platform it was running on. It expanded the
    list of widgets the GUI could have by adding tabbed panels, scroll panes, tables,
    and lists. Swing components are lightweight because they do not depend on the
    native code and are fully implemented in Java.
  prefs: []
  type: TYPE_NORMAL
- en: In 2007, Sun Microsystems announced the creation of JavaFX, which eventually
    became a software platform for creating and delivering desktop applications across
    many different devices. It was intended to replace Swing as the standard GUI library
    for Java SE. The JavaFX framework is located in the packages that start with `javafx`
    and supports all major desktop **operating systems** (**OSs**) and multiple mobile
    OSs, including Symbian OS, Windows Mobile, and some proprietary real-time OSs.
  prefs: []
  type: TYPE_NORMAL
- en: JavaFX has added support for smooth animation, web views, audio and video playback,
    and styles to the arsenal of a GUI developer, based on **Cascading Style Sheets**
    (**CSS**). However, Swing has more components and third-party libraries, so using
    JavaFX may require creating custom components and plumbing that was implemented
    in Swing a long time ago. That’s why, although JavaFX is recommended as the first
    choice for desktop GUI implementation, Swing will remain part of Java for the
    foreseeable future, according to the official response on the Oracle website ([http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)).
    So, it is possible to continue using Swing, but, if possible, it’s better to switch
    to JavaFX.
  prefs: []
  type: TYPE_NORMAL
- en: We will talk about JavaFX and see code examples of it in [*Chapter 12*](B18388_12_ePub.xhtml#_idTextAnchor266),
    *Java GUI Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: External libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Different lists of the most used third-party non-JCL libraries include between
    20 and 100 libraries. In this section, we are going to discuss those libraries
    that are included in the majority of such lists. All of them are open source projects.
  prefs: []
  type: TYPE_NORMAL
- en: org.junit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `org.junit` package is the root package of an open source testing framework’s
    JUnit. It can be added to the project as the following `pom.xml` dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `scope` value in the preceding dependency tag tells Maven to include the
    library `.jar` file, but only when the test code is going to be run, not in the
    production `.jar` file of the application. With the dependency in place, you can
    create a test. You can write the code yourself or let the IDE do it for you by
    doing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Right-click* on the class name you would like to test.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Go To**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create New Test**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the checkbox for the methods of the class you would like to test.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write code for the generated test methods with the `@Test` annotation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add methods with the `@Before` and `@After` annotations if necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s assume we have the following class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you follow the preceding steps, the following test class will be created
    under the test source tree:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you can implement the `void` `multiplyByTwo()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: A unit is a minimal piece of code that can be tested, thus the name. The best
    testing practices consider a method as a minimal testable unit. That’s why a unit
    test usually tests a method.
  prefs: []
  type: TYPE_NORMAL
- en: org.mockito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the problems a unit test often faces is the need to test a method that
    uses a third-party library, a data source, or a method of another class. While
    testing, you want to control all the inputs so that you can predict the expected
    result of the tested code. That is where the technique of simulating or mocking
    the behavior of the objects the tested code interacts with comes in handy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The open source Mockito framework (the `org.mockito` root package name) allows
    you to do just that – create mock objects. Using it is quite easy. Here is one
    simple case. Let’s assume we need to test another `Class1` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'To test this method, we need to make sure that the `getValue()` method returns
    a certain value, so we are going to mock this method. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a dependency to the Maven `pom.xml` configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `Mockito.mock()` method for the class you need to simulate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the value you need to be returned from a method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can pass the mocked object as a parameter into the method you are
    testing that calls the mocked method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The mocked method returns the result you have predefined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `@Test` method should look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Mockito has certain limitations. For example, you cannot mock static methods
    and private methods. Otherwise, it is a great way to isolate the code you are
    testing by reliably predicting the results of the used third-party classes.
  prefs: []
  type: TYPE_NORMAL
- en: org.apache.log4j and org.slf4j
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Throughout this book, we have used `System.out` to display the results. In
    a real-life application, you can do this and redirect the output to a file, for
    example, for later analysis. Once you’ve been doing this a while, you will notice
    that you need more details about each output: the date and time of each statement,
    and the class name where the logging statement was generated, for example. As
    the code base grows, you will find that it would be nice to send output from different
    subsystems or packages to different files or turn off some messages, when everything
    works as expected, and turn them back on when an issue has been detected and more
    detailed information about code behavior is needed. And you don’t want the size
    of the log file to grow uncontrollably.'
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to write code that accomplishes all this. But several frameworks
    do this based on the settings in a configuration file, which you can change every
    time you need to change the logging behavior. The two most popular frameworks
    that are used for this are called log4j (pronounced as LOG-FOUR-JAY) and slf4j
    (pronounced as S-L-F-FOUR-JAY).
  prefs: []
  type: TYPE_NORMAL
- en: These two frameworks are not rivals. The slf4j framework is a facade that provides
    unified access to an underlying actual logging framework; one of them can be log4j
    too. Such a facade is especially helpful during library development when programmers
    do not know what kind of logging framework will be used by the application that
    uses the library in advance. By writing code using slf4j, the programmers allow
    you to configure it later so that you can use any logging system.
  prefs: []
  type: TYPE_NORMAL
- en: So, if your code is going to be used only by the application your team develops,
    using just log4j is enough. Otherwise, consider using slf4j.
  prefs: []
  type: TYPE_NORMAL
- en: 'As in the case of any third-party library, before you can use the log4j framework,
    you must add a corresponding dependency to the Maven `pom.xml` configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, here’s how the framework can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the preceding `main()` method, we will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, if no log4j-specific configuration file is added to the project,
    log4j will provide a default configuration in the `DefaultConfiguration` class.
    The default configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The log message will go to a console.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pattern of the message is going to be `%d{HH:mm:ss.SSS} [%t] %-5level %logger{36}
    - %msg%n`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The level of logging will be `Level.ERROR` (other levels include `OFF`, `FATAL`,
    `WARN`, `INFO`, `DEBUG`, `TRACE`, and `ALL`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The same result can be achieved by adding the `log4j2.xml` file to the `resources`
    folder (which Maven places on the classpath) with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'If that is not good enough for you, it is possible to change the configuration
    so that it logs messages of different levels, to different files, and so on. Read
    the log4j documentation to learn more: [https://logging.apache.org](https://logging.apache.org).'
  prefs: []
  type: TYPE_NORMAL
- en: org.apache.commons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `org.apache.commons` package is another popular library that’s been developed
    as a project called **Apache Commons**. It is maintained by an open source community
    of programmers called **Apache Software Foundation**. This organization was formed
    by the Apache Group in 1999\. The Apache Group has grown around the development
    of the Apache HTTP Server since 1993\. The Apache HTTP Server is an open source
    cross-platform web server that has remained the most popular web server since
    April 1996.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Apache Commons project has the following three components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Commons Sandbox**: A workspace for Java component development; you can contribute
    to the open source work there.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Commons Dormant**: A repository of components that are currently inactive;
    you can use the code there, but you must build the components yourself since these
    components will probably not be released soon.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons` library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We discussed the `org.apache.commons.io` package in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *String, Input/Output, and Files*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following subsections, we will discuss three of Commons Proper’s most
    popular packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`org.apache.commons.lang3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons.collections4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`org.apache.commons.codec.binary`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: However, there are many more packages under `org.apache.commons` that contain
    thousands of classes that can easily be used to make your code more elegant and
    efficient.
  prefs: []
  type: TYPE_NORMAL
- en: lang and lang3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.apache.commons.lang3` package is version 3 of the `org.apache.commons.lang`
    package. The decision to create a new package was forced by the fact that changes
    that were introduced in version 3 were backward-incompatible, which means that
    the existing applications that use the previous version of the `org.apache.commons.lang`
    package may stop working after the upgrade to version 3\. But in the majority
    of mainstream programming, adding `3` to an `import` statement (as a way to migrate
    to the new version) typically does not break anything.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the documentation, the `org.apache.commons.lang3` package provides
    highly reusable static utility methods that are chiefly concerned with adding
    value to the `java.lang` classes. Here are a few notable examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ArrayUtils` class: Allows you to search and manipulate arrays; we discussed
    and demonstrated this in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ClassUtils` class: Provides some metadata about a class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ObjectUtils` class: Checks an array of objects for null, compares objects,
    and calculates the median and minimum/maximum of an array of objects in a null-safe
    manner; we discussed and demonstrated this in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `SystemUtils` class: Provides information about the execution environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `ThreadUtils` class: Finds information about currently running threads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Validate` class: Validates individual values and collections, compares
    them, checks for nulls and matches, and performs many other validations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `RandomStringUtils` class: Generates `String` objects from the characters
    of various character sets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `StringUtils` class: We discussed this class in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *String, Input/Output, and Files*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: collections4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the content of the `org.apache.commons.collections4` package looks
    quite similar to the content of the `org.apache.commons.collections` package on
    the surface (which is version 3 of the package), the migration to version 4 may
    not be as smooth as just adding `4` to the `import` statement. Version 4 removed
    deprecated classes and added generics and other features that are incompatible
    with the previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'You must be hard-pressed to come up with a collection type or a collection
    utility that is not present in this package or one of its sub-packages. The following
    is just a high-level list of features and utilities that are included:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Bag` interface for collections that have several copies of each object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A dozen classes that implement the `Bag` interface. For example, here is how
    the `HashBag` class can be used:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `BagUtils` class, which transforms `Bag`-based collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `BidiMap` interface for bidirectional maps, which allow you to retrieve
    not only a value by its key but also a key by its value. It has several implementations,
    an example of which is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `MapIterator` interface to provide simple and quick iteration over maps,
    like so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ordered maps and sets that keep the elements in a certain order, like `List`
    does; for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reference maps, their keys, and/or values can be removed by the garbage collector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various implementations of the `Comparator` interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Various implementations of the `Iterator` interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes that convert arrays and enumerations into collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilities that allow you to test or create a union, intersection, or closure
    of collections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `CollectionUtils`, `ListUtils`, `MapUtils`, and `MultiMapUtils` classes,
    as well as many other interface-specific utility classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read the package’s documentation ([https://commons.apache.org/proper/commons-collections](https://commons.apache.org/proper/commons-collections))
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: codec.binary
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.apache.commons.codec.binary` package provides support for Base64, Base32,
    binary, and hexadecimal string encoding and decoding. This encoding is necessary
    to make sure that the data you sent across different systems will not be changed
    on the way because of the restrictions on the range of characters in different
    protocols. Besides, some systems interpret the sent data as control characters
    (a modem, for example).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet demonstrates the basic encoding and decoding capabilities
    of the `Base64` class of this package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about this package on the Apache Commons project site at [https://commons.apache.org/proper/commons-codec](https://commons.apache.org/proper/commons-codec).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided an overview of the functionality of the most popular
    packages of JCL – that is, `java.lang`, `java.util`, `java.time`, `java.io`, `java.nio`,
    `java.sql`, `javax.sql`, `java.net`, `java.lang.math`, `java.math`, `java.awt`,
    `javax.swing`, and `javafx`.
  prefs: []
  type: TYPE_NORMAL
- en: The most popular external libraries were represented by the `org.junit`, `org.mockito`,
    `org.apache.log4j`, `org.slf4j`, and `org.apache.commons` packages. These help
    you avoid writing custom code in cases when such functionality already exists
    and can just be imported and used out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about Java threads and demonstrate their usage.
    We will also explain the difference between parallel and concurrent processing.
    Then, we will show you how to create a thread and how to execute, monitor, and
    stop it. This will be useful not only for those who are going to write code for
    multi-threaded processing but also for those who would like to improve their understanding
    of how JVM works, which will be the topic of the following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is the Java Class Library? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A collection of compiled classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Packages that come with the Java installation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A `.jar` file that Maven adds to the classpath automatically
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Any library that’s written in Java
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the Java external library? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `.jar` file that is not included with the Java installation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A `.jar` file that must be added as a dependency in `pom.xml` before it can
    be used
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes not written by the authors of JVM
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes that do not belong to JCL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.lang` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the only package that contains Java language implementation.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It contains the most often used classes of JCL.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It contains the `Object` class, which is the base class for any Java class.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It contains all the types listed in the Java Language Specification.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.util` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the implementations of Java collection interfaces
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the interfaces of the Java collections framework
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the utilities of JCL
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes, arrays, objects, and properties
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.time` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes that manage dates.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the only package that manages time.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Classes that represent date and time.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: It is the only package that manages dates.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.io` package? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing streams of binary data
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing streams of characters
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing streams of bytes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Processing streams of numbers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.sql` package? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports database connection pooling
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports database statement execution
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides the capability to read/write data from/to a database
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports database transactions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.net` package? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports .NET programming
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports sockets communication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports URL-based communication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports RMI-based communication
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `java.math` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports minimum and maximum calculations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports big numbers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports logarithms
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports square root calculations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `javafx` package? Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports fax-message sending
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports fax-message receiving
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports GUI programming
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports animation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.junit` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports testing Java classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports Java units of measure
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports unit testing
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports organizational unity
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.mockito` package? Select all that
    apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports the Mockito protocol
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows you to simulate a method’s behavior
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports static method simulation
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Generates objects that behave like third-party classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.apache.log4j` package? Select all
    that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports writing messages to a file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports reading messages from a file
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports the log4j protocol for Java
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports controlling the number and size of log files
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.apache.commons.lang3` package? Select
    all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports Java language version 3
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Complements the `java.lang` classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Contains the `ArrayUtils`, `ObjectUtils`, and `StringUtils` classes
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Contains the `SystemUtils` class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.apache.commons.collections4` package?
    Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Various implementations of Java collections framework interfaces
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Various utilities for Java collections framework implementations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vault interface and its implementations
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Contains the `CollectionUtils` class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What functionality is included in the `org.apache.commons.codec.binary` package?
    Select all that apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports sending binary data across the network
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows you to encode and decode data
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Supports data encryption
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Contains the `StringUtils` class
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
