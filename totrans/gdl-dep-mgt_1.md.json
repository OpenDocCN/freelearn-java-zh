["```java\n// Define new configurations for build.\nconfigurations {\n\n  // Define configuration vehicles.\n  vehicles {\n    description = 'Contains vehicle dependencies'\n  }\n\n  traffic {\n    extendsFrom vehicles\n    description = 'Contains traffic dependencies'\n  }\n\n}\n```", "```java\n$ gradle -q dependencies\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\ntraffic - Contains traffic dependencies\nNo dependencies\n\nvehicles - Contains vehicle dependencies\nNo dependencies\n\n```", "```java\napply plugin: 'java'\n```", "```java\n$ gradle -q dependencies\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\narchives - Configuration for archive artifacts.\nNo dependencies\n\ncompile - Compile classpath for source set 'main'.\nNo dependencies\n\ndefault - Configuration for default artifacts.\nNo dependencies\n\nruntime - Runtime classpath for source set 'main'.\nNo dependencies\n\ntestCompile - Compile classpath for source set 'test'.\nNo dependencies\n\ntestRuntime - Runtime classpath for source set 'test'.\nNo dependencies\n\n```", "```java\n// Dependencies configuration block.\ndependencies {\n    // Here we define our dependencies.\n}\n```", "```java\n// Define dependencies.\ndependencies {\n  // Defining two dependencies.\n  vehicles 'com.vehicles:car:1.0', 'com.vehicles:truck:2.0'\n\n  // Single dependency.\n  traffic 'com.traffic:pedestrian:1.0'\n}\n```", "```java\n// Compact definition of configurations.\nconfigurations {\n  vehicles\n  traffic.extendsFrom vehicles\n}\n\n// Define dependencies.\ndependencies {\n  // Defining two dependencies.\n  vehicles(\n    [group: 'com.vehicles', name: 'car', version: '1.0'],\n    [group: 'com.vehicles', name: 'truck', version: '2.0'],\n  )\n\n  // Single dependency.\n  traffic group: 'com.traffic', name: 'pedestrian', version: '1.0'\n}\n```", "```java\ndependencies {\n  // Use transitive attribute in map notation.\n  vehicles group: 'com.vehicles', name: 'car',\n      version: '1.0', transitive: false\n\n  // Combine map notation with configuration closure.\n  vehicles(group: 'com.vehicles', name: 'car', version: '1.0') {\n    transitive = true\n  }\n\n  // Combine string notation with configuration closure.\n  traffic('com.traffic:pedestrian:1.0') {\n    transitive = false\n  }\n}\n```", "```java\n// Define project property with\n// dependency group name 'com.vehicles'\next {\n  groupNameVehicles = 'com.vehicles'\n}\n\ndependencies {\n  // Using Groovy string support with\n  // variable substition.\n  vehicles \"$groupNameVehicles:car:1.0\"\n\n  // Using map notation and reference\n  // property groupNameVehicles.\n  vehicles group: groupNameVehicles, name: 'truck', version: '2.0'\n}\n```", "```java\ndependencies {\n  // Use the 'jar' configuration defined in the\n  // module descriptor for this dependency.\n  traffic group: 'com.traffic', \n      name: 'pedestrian', \n      version: '1.0',\n      configuration: 'jar'\n\n}\n```", "```java\ndependencies {\n  // Using the @ext notation to specify\n  // we only want the artifact for this\n  // dependency.\n  vehicles 'com.vehicles:car:2.0@jar'\n\n  // Use map notation with ext attribute\n  // to specify artifact only dependency.\n  traffic group: 'com.traffic', name: 'pedestrian',\n      version: '1.0', ext: 'jar'\n\n  // Alternatively we can use the configuration closure.\n  // We need to specify an artifact configuration closure\n  // as well to define the ext attribute.\n  vehicles('com.vehicles:car:2.0') {\n    artifact {\n      name = 'car-docs'\n      type = 'tar'\n      extension = 'tar'\n    }\n  }\n}\n```", "```java\ndependencies {\n  // Using string notation we can\n  // append the classifier after\n  // the version attribute, prefixed\n  // with a colon.\n  vehicles 'com.vehicles:car:2.0:jdk15'\n\n  // With the map notation we simply use the\n  // classifier attribute name and the value.\n  traffic group: 'com.traffic', name: 'pedestrian',\n      version: '1.0', classifier: 'jdk16'\n\n  // Alternatively we can use the configuration closure.\n  // We need to specify an artifact configuration closure\n  // as well to define the classifier attribute.\n  vehicles('com.vehicles:truck:2.0') {\n    artifact {\n      name = 'truck'\n      type = 'jar'\n      classifier = 'jdk15'\n    }\n  }\n}\n```", "```java\ndependencies {\n  // We use the module method to instruct\n  // Gradle to not look for the module descriptor\n  // in a repository, but use the one we have\n  // defined in the build file.\n  vehicles module('com.vehicles:car:2.0') {\n    // Car depends on driver.\n    dependency('com.traffic:driver:1.0')\n  }\n}\n```", "```java\ndependencies {\n  // Use project method to define project\n  // dependency on car project.\n  vehicles project(':car')\n\n  // Define project dependency on truck\n  // and use dependency configuration api\n  // from that project.\n  vehicles project(':truck') {\n    configuration = 'api'\n  }\n\n  // We can use alternative syntax\n  // to specify a configuration.\n  traffic project(path: ':pedestrian',\n          configuration: 'lib')\n}\n```", "```java\ndependencies {\n  // Define a dependency on explicit file(s).\n  vehicles files(\n    'lib/vehicles/car-2.0.jar',\n    'lib/vehicles/truck-1.0.jar'\n  )\n\n  // We can use the fileTree method to include\n  // multiples from a directory and it's subdirectories.\n  traffic fileTree(dir: 'deps', include: '*.jar')\n}\n```", "```java\napply plugin: 'groovy'\n\ndependencies {\n  // Define dependency on Groovy\n  // version shipped with Gradle.\n  compile localGroovy()\n}\n```", "```java\napply plugin: 'groovy'\n\ndependencies {\n  // Define dependency on Gradle classes.\n  compile gradleApi()\n}\n```", "```java\ndependencies {\n  compile 'org.springframework:spring-context:4.0.+'\n}\n```", "```java\ndependencies {\n  // The dependency will resolve to version 4.0.3.RELEASE as\n  // the latest version if available. Otherwise 4.0.2.RELEASE\n  // or 4.0.1.RELEASE.\n  compile 'org.springframework:spring-context:[4.0.1.RELEASE,4.0.4.RELEASE['\n}\n```", "```java\napply plugin: 'java'\n\nrepositories {\n  // Repository definition for JCenter Bintray.\n  // Needed to download artifacts. Repository\n  // definitions are covered later.\n  jcenter()\n}\n\ndependencies {\n  // Define dependency on spring-beans library.\n  compile 'org.springframework:spring-beans:4.0.+'\n}\n```", "```java\n$ gradle -q dependencies\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\narchives - Configuration for archive artifacts.\nNo dependencies\n\ncompile - Compile classpath for source set 'main'.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\ndefault - Configuration for default artifacts.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\nruntime - Runtime classpath for source set 'main'.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\ntestCompile - Compile classpath for source set 'test'.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\ntestRuntime - Runtime classpath for source set 'test'.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\n```", "```java\n$ gradle -q dependencies --configuration compile\n\n------------------------------------------------------------\nRoot project\n------------------------------------------------------------\n\ncompile - Compile classpath for source set 'main'.\n\\--- org.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n \\--- org.springframework:spring-core:4.0.6.RELEASE\n \\--- commons-logging:commons-logging:1.1.3\n\n```", "```java\n$ gradle -q dependencyInsight --dependency spring --configuration runtime\norg.springframework:spring-beans:4.0.6.RELEASE\n\norg.springframework:spring-beans:4.0.+ -> 4.0.6.RELEASE\n\\--- runtime\n\norg.springframework:spring-core:4.0.6.RELEASE\n\\--- org.springframework:spring-beans:4.0.6.RELEASE\n \\--- runtime\n\n```", "```java\nconfigurations {\n  vehicles\n  traffic.extendsFrom vehicles\n}\n\ntask dependencyFiles << {\n  // Loop through all files for the dependencies\n  // for the traffic configuration, including\n  // transitive dependencies.\n  configurations.traffic.files.each { file ->\n    println file.name\n  }\n\n  // We can also filter the files using\n  // a closure. For example to only find the files\n  // for dependencies with driver in the name.\n  configurations.vehicles.files { dep ->\n    if (dep.name.contains('driver')) {\n      println dep.name\n    }\n  }\n\n  // Get information about dependencies only belonging\n  // to the vehicles configuration.\n  configurations.vehicles.dependencies.each { dep ->\n    println \"${dep.group} / ${dep.name} / ${dep.version}\"\n  }\n\n  // Get information about dependencies belonging\n  // to the traffice configuration and\n  // configurations it extends from.\n  configurations.traffic.allDependencies.each {  dep ->\n    println \"${dep.group} / ${dep.name} / ${dep.version}\"\n  }\n}\n\ntask copyDependencies(type: Copy) {\n  description = 'Copy dependencies from configuration traffic to lib directory'\n\n  // Configuration can be the source for a CopySpec.\n  from configurations.traffic\n\n  into \"$buildDir/lib\"\n}\n```", "```java\nbuildscript {\n  repositories {\n    // Bintray JCenter repository to download\n    // dependency commons-lang3.\n    jcenter()\n  }\n\n  dependencies {\n    // Extend classpath of build script with\n    // the classpath configuration.\n    classpath 'org.apache.commons:commons-lang3:3.3.2'\n  }\n}\n\n// We have add the commons-lang3 dependency\n// as a build script dependency so we can\n// reference classes for Apache Commons Lang.\nimport org.apache.commons.lang3.RandomStringUtils\n\ntask randomString << {\n  // Use RandomStringUtils from Apache Commons Lang.\n  String value = RandomStringUtils.randomAlphabetic(10)\n  println value\n}\n```", "```java\nbuildscript {\n  repositories {\n    // We need the repository definition, from\n    // where the dependency can be downloaded.\n    jcenter()\n  }\n\n  dependencies {\n    // Define external module dependency for the Gradle\n    // Asciidoctor plugin.\n    classpath 'org.asciidoctor:asciidoctor-gradle-plugin:0.7.3'\n  }\n}\n\n// We defined the dependency on this external\n// Gradle plugin in the buildscript {...}\n// configuration block\napply plugin: 'org.asciidoctor.gradle.asciidoctor'\n```", "```java\nconfigurations {\n  // We define a new dependency configuration.\n  // This configuration is used to assign\n  // dependencies to, that are needed by the\n  // optional Ant task scp.\n  sshAntTask\n}\n\nrepositories {\n  // Repository definition to download dependencies.\n  jcenter()\n}\n\ndependencies {\n  // Define external module dependencies\n  // for the scp Ant task.\n  sshAntTask(group: 'org.apache.ant', \n        name: 'ant-jsch', \n        version: '1.9.4')\n}\n\n// New task that used Ant scp task.\ntask copyRemote(\n  description: 'Secure copy files to remote server') << {\n\n  // Define optional Ant task scp.\n  ant.taskdef(\n    name: 'scp',\n    classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',\n\n    // Set classpath based on dependencies assigned\n    // to sshAntTask configuration. The asPath property\n    // returns a platform-specific string value\n    // with the dependency JAR files.\n    classpath: configurations.sshAntTask.asPath)\n\n  // Invoke scp task we just defined.\n  ant.scp(\n    todir: 'user@server:/home/user/upload',\n    keyFile: '${user.home}/.ssh/id_rsa',\n    passphrase: '***',\n    verbose: true) {\n    fileset(dir: 'html/files') {\n      include name: '**/**'\n    }\n  }\n}\n```", "```java\next {\n  // Group is used multiple times, so\n  // we extra the variable for re-use.\n  def vehiclesGroup = 'com.vehicles'\n\n  // libs will be available from within\n  // the Gradle script code, like dependencies {...}.\n  libs = [\n    vehicles: [\n      [group: vehiclesGroup, name: 'car', version: '2.0'],\n      [group: vehiclesGroup, name: 'truck', version: '1.0']\n    ],\n    traffic: [\n      [group: 'com.traffic', name: 'pedestrian', version: '1.0']\n    ]\n  ]\n}\n\nconfigurations {\n  vehicles\n}\n\ndependencies {\n  // Reference ext.libs.vehicles defined earlier\n  // in the build script.\n  vehicles libs.vehicles\n}\n```", "```java\nbuildscript {\n  repositories {\n    // Specific repository to find and download\n    // dependency-management-plugin.\n    maven {\n      url 'http://repo.spring.io/plugins-snapshot'\n    }\n  }\n  dependencies {\n    // Define external module dependency with plugin.\n    classpath 'io.spring.gradle:dependency-management-plugin:0.1.0.RELEASE'\n  }\n}\n\n// Apply the external plugin dependency-management.\napply plugin: 'io.spring.dependency-management'\napply plugin: 'java'\n\nrepositories {\n  // Repository for downloading dependencies.\n  jcenter()\n}\n\n// This block is added by the dependency-management\n// plugin to define dependency metadata.\ndependencyManagement {\n  dependencies {\n    // Specify group:name followed by required version.\n    'org.springframework.boot:spring-boot-starter-web' '1.1.5.RELEASE'\n\n    // If we have multiple module names for the same group\n    // and version we can use dependencySet.\n    dependencySet(group: 'org.springframework.boot',\n          version: '1.1.5.RELEASE') {\n      entry 'spring-boot-starter-web'\n      entry 'spring-boot-starter-actuator'\n    }\n  }\n}\n\ndependencies {\n  // Version is resolved via dependencies metadata\n  // defined in dependencyManagement.\n  compile 'org.springframework.boot:spring-boot-starter-web'\n}\n```", "```java\nbuildscript {\n  repositories {\n    // Specific repository to find and download\n    // dependency-management-plugin.\n    maven {\n      url 'http://repo.spring.io/plugins-snapshot'\n    }\n  }\n  dependencies {\n    // Define external module dependency with plugin.\n    classpath 'io.spring.gradle:dependency-management-plugin:0.1.0.RELEASE'\n  }\n}\n\n// Apply the external plugin dependency-management.\napply plugin: 'io.spring.dependency-management'\napply plugin: 'java'\n\nrepositories {\n  // Repository for downloading BOM and dependencies.\n  jcenter()\n}\n\n// This block is added by the dependency-management\n// plugin to define dependency metadata.\ndependencyManagement {\n  imports {\n    // Use Maven BOM provided by Spring IO platform.\n    mavenBom 'io.spring.platform:platform-bom:1.0.1.RELEASE'\n  }\n}\n\ndependencies {\n  // Version is resolved via Maven BOM.\n  compile 'org.springframework.boot:spring-boot-starter-web'\n}\n```"]