["```java\n    int num1=3;\n    int num2=5;\n    int num3 = num1 + num2;\n\n    System.out.println(\"Sum is -->\"+num3);\n    num1=6;\n    num2=8;\n    System.out.println(\"Sum is -->\"+num3);\n```", "```java\n  public static interface Publisher<T> { \n       public void subscribe(Subscriber<? super T> subscriber); \n  }\n```", "```java\npublic interface Subscriber<T> {\n    public void onSubscribe(Subscription s);\n    public void onNext(T t);\n    public void onError(Throwable t);\n    public void onComplete();\n}\n```", "```java\npublic interface Subscription {\n    public void request(long n);\n    public void cancel();\n}\n```", "```java\npublic interface Processor<T, R> extends Subscriber<T>, Publisher<R> {\n}\n```", "```java\n<project   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>rx-java</groupId>\n  <artifactId>simple-rx-java-demo</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>Simple RxJava demo</name>\n  <dependencies>\n    <dependency>\n <groupId>io.reactivex.rxjava2</groupId>\n <artifactId>rxjava</artifactId>\n <version>2.2.6</version>\n </dependency>\n  </dependencies>\n</project>\n```", "```java\npublic class RxJavaBasics {\n  public static void main(String[] args) {\n    /* Observable */\n    Observable<String> adminUsers = \n        Observable.just(\"Dave\", \n                \"John\", \n                \"Nilang\", \n                \"Komal\",\n                \"David\");\n\n    /* Observer in form of lambda expression */\n    adminUsers.subscribe(s -> System.out.println(s));\n  }\n}\n```", "```java\nadminUsers.map(s->s.startsWith(\"D\") ? s:\"*******\")\n                .subscribe(s -> System.out.println(s));\n```", "```java\npublic class RxJavaCreateDemo {\n\n  public static void main(String[] args) {\n    Observable<String> daysOfWeek = Observable.create(\n        sourceEmitter -> {\n        try {\n          sourceEmitter.onNext(\"Sunday\");\n          sourceEmitter.onNext(\"Monday\");\n          sourceEmitter.onNext(\"Tuesday\");\n          sourceEmitter.onNext(\"Wednesday\");\n          sourceEmitter.onNext(\"Thursday\");\n          sourceEmitter.onNext(\"Friday\");\n          sourceEmitter.onNext(\"Saturday\");\n          sourceEmitter.onComplete();\n         }catch(Exception e) {\n            sourceEmitter.onError(e);\n         }\n      });\n    Observable<String> daysInUpperCase= daysOfWeek.map(day->day.toUpperCase())\n                                             .filter(day->day.startsWith(\"S\"));\n    daysInUpperCase.subscribe(day->System.out.println(\"Day is -->\"+day));\n  }\n}\n```", "```java\npublic class RxJavaIterableDemo {\n  public static void main(String[] args) {\n    List<EmployeeRating> employeeList = new ArrayList<EmployeeRating>();\n    EmployeeRating employeeRating1 = new EmployeeRating();\n    employeeRating1.setName(\"Lilly\");\n    employeeRating1.setRating(6);\n    employeeList.add(employeeRating1);\n\n    employeeRating1 = new EmployeeRating();\n    employeeRating1.setName(\"Peter\");\n    employeeRating1.setRating(5);\n    employeeList.add(employeeRating1);\n\n    employeeRating1 = new EmployeeRating();\n    employeeRating1.setName(\"Bhakti\");\n    employeeRating1.setRating(9);\n    employeeList.add(employeeRating1);\n\n    employeeRating1 = new EmployeeRating();\n    employeeRating1.setName(\"Harmi\");\n    employeeRating1.setRating(9);\n    employeeList.add(employeeRating1);\n\n    Observable<EmployeeRating> employeeRatingSource = \n                                Observable.fromIterable(employeeList);\n\n    employeeRatingSource.filter(employeeRating -> \n                employeeRating.getRating() >=7).subscribe(empRating -> \n                System.out.println(\"Star Employee: \" + empRating.getName() \n                + \" Rating : \"+empRating.getRating()));\n  }\n}\n```", "```java\nclass EmployeeRating{\n  private String name;\n  private int rating;\n  public String getName() {\n    return name;\n  }\n  public void setName(String name) {\n    this.name = name;\n  }\n  public int getRating() {\n    return rating;\n  }\n  public void setRating(int rating) {\n    this.rating = rating;\n  }\n}\n```", "```java\npublic class RxJavaCustomObserverDemo {\n\n  public static void main(String[] args) {\n\n    Observable<String> months =\n        Observable.just(\"January\", \"February\", \"March\", \"April\", \n            \"May\",\"June\",\"July\",\"August\");\n\n    Observer<String> customObserver = new Observer<String>() {\n      @Override\n      public void onSubscribe(Disposable d) {\n        System.out.println(\" Subscription initiated ...\");\n      }\n      @Override\n      public void onNext(String value) {\n        System.out.println(\"The value \" + value +\" is received from Observable\");\n      }\n      @Override\n      public void onError(Throwable e) {\n        e.printStackTrace();\n      }\n      @Override\n      public void onComplete() {\n        System.out.println(\"Done!\");\n      }\n    };\n\n    months.filter(month -> month.endsWith(\"y\"))\n            .subscribe(customObserver);\n  }\n}\n```", "```java\npublic class RxJavaColdObservable {\n  public static void main(String[] args) {\n    Observable<String> source =\n        Observable.just(\"One\",\"Two\",\"Three\",\"Four\",\"Five\");\n    //first observer\n    source.filter(data->data.contains(\"o\"))\n       .subscribe(data -> System.out.println(\"Observer 1 Received:\" + data));\n    //second observer\n    source.subscribe(data -> System.out.println(\"Observer 2 Received:\" + data));\n  }\n}\n```", "```java\npublic class RxJavaHotObservable1 {\n  public static void main(String args[]) {\n    Observable<Long> observableInterval = Observable.interval(2, TimeUnit.SECONDS);\n    PublishSubject<Long> publishSubject = PublishSubject.create();\n    observableInterval.subscribe(publishSubject);\n    publishSubject.subscribe(i -> System.out.println(\"Observable #1 : \"+i));\n    addDelay(4000);\n    publishSubject.subscribe(i -> System.out.println(\"Observable #2 : \"+i));\n    addDelay(10000); \n  }\n  private static void addDelay(int miliseconds) {\n    try {\n            Thread.sleep(miliseconds);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n  }\n}\n```", "```java\npublic class RxJavaHotObservable2 {\n  public static void main(String args[]) {\n    Observable<Long> observableInt = Observable.interval(2, TimeUnit.SECONDS);\n    ConnectableObservable<Long> connectableIntObservable = observableInt.publish();\n    connectableIntObservable.subscribe(i -> System.out.println(\"Observable #1 : \"+i));\n    connectableIntObservable.connect();\n    addDelay(7000);\n    connectableIntObservable.\n       subscribe(i -> System.out.println(\"Observable #2 : \"+i));\n    addDelay(10000);\n  }\n\n  private static void addDelay(int miliseconds) {\n    try {\n            Thread.sleep(miliseconds);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n  }\n}\n```", "```java\n<project \n\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n             http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>reactor-demo</groupId>\n  <artifactId>simple-reactor-demo</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>Smiple Reactor Dmo</name>\n  <dependencies>\n    <dependency>\n <groupId>io.projectreactor</groupId>\n <artifactId>reactor-core</artifactId>\n <version>3.2.6.RELEASE</version>\n </dependency>\n  </dependencies>\n</project>\n```", "```java\npublic class ReactorBasic {\n  private static List<String> carModels = Arrays.asList(\n              \"Era\",\"Magna\",\"Sportz\",\"Astha\",\"Astha(O)\");\n  public static void main(String args[]) {\n       Flux<String> fewWords = Flux.just(\"Hello\", \"World\");\n       Flux<String> manyWords = Flux.fromIterable(carModels);\n       Mono<String> singleWord = Mono.just(\"Single value\");\n       fewWords.subscribe(t->System.out.println(t));\n       System.out.println(\"-----------------------------\");\n       manyWords.subscribe(System.out::println);\n       System.out.println(\"-----------------------------\");\n       singleWord.subscribe(System.out::println);\n  }\n}\n```", "```java\npublic class ReactorFromOtherPublisher {\n  public static void main(String[] args) {\n    Flux<String> fewWords = Flux.just(\"One\",\"Two\");\n    /* from array */\n    Flux<Integer> intFlux = Flux.fromArray(new Integer[]{1,2,3,4,5,6,7});\n    /* from Java 8 stream */\n    Flux<String> strFlux = Flux.fromStream(Stream.of(\n      \"Ten\", \"Hundred\", \"Thousand\", \"Ten Thousands\", \"Lac\",\"Ten Lac\", \"Crore\"));\n    /* from other Publisher */\n    Flux<String> fromOtherPublisherFlux = Flux.from(fewWords);\n    intFlux.subscribe(System.out::println);\n    strFlux.subscribe(System.out::println);\n    fromOtherPublisherFlux.subscribe(System.out::println);\n  }\n}\n```", "```java\npublic class ReactorWithSubscriberWays {\n\n  public static void main(String[] args) {\n    List<String> monthList = Arrays.asList(\n            \"January\",\"February\",\"March\",\"April\",\"May\");\n\n    Flux<String> months = Flux.fromIterable(monthList);\n/* 1) No events is consumed. */\n    months.subscribe();\n/* 2) Only value event is consumed */\n    months.subscribe(month->System.out.println(\"->\"+month));\n\n/* 3) Value and Error (total 2) events are handled */\n    months.subscribe(month->System.out.println(\"-->\"+month),\n              e->e.printStackTrace());\n\n/* 4) Value, Error and Completion (total 3) events are subscribed */\n    months.subscribe(month->System.out.println(\"--->\"+month),\n                    e->e.printStackTrace(),\n            ()->System.out.println(\"Finished at THIRD PLACE.. !!\"));\n\n/* 5) Value, Error, Completion and Subscription (total 4) events are subscribed */\n    months.subscribe(month->System.out.println(\"---->\"+month),\n                                       e->e.printStackTrace(),\n      ()->System.out.println(\"Finished at FOURTH PLACE ..!!\"),\n             s -> {System.out.println(\"Subscribed :\");\n                   s.request(5L);});\n  }\n}\n```", "```java\nstatic class CustomSubscriber extends BaseSubscriber<String>{\n  @Override\n  protected void hookOnSubscribe(Subscription subscription) {\n  System.out.println(\"Fetching the values ...!!\");\n  subscription.request(10);\n }\n  @Override\n  protected void hookOnNext(String value) {\n  System.out.println(\"Fetchig next value in hookOnNext()-->\"+value);\n }\n  @Override\n  protected void hookOnComplete() { \n  System.out.println(\"Congratulation, Everything is completed successfully ..!!\");\n }\n  @Override\n  protected void hookOnError(Throwable throwable) {\n  System.out.println(\"Opps, Something went wrong ..!! \"+throwable.getMessage());\n }\n  @Override\n  protected void hookOnCancel() {\n  System.out.println(\"Oh !!, Operation has been cancelled ..!! \");\n }\n  @Override\n  protected void hookFinally(SignalType type) {\n  System.out.println(\"Shutting down the operation, Bye ..!! \"+type.name());\n }\n}\n```", "```java\n @Override\n     protected void hookOnSubscribe(Subscription subscription) {\n       System.out.println(\"Fetching the values ...!!\");\n       for(int index=0; index<6;index++) {\n         try {\n          Thread.sleep(1000);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n         subscription.request(1);\n       }\n     }\n```", "```java\npublic class ReactorLifecycleMethods {\n\n  public static void main(String[] args) {\n    List<String> designationList = Arrays.asList(\n        \"Jr Consultant\",\"Associate Consultant\",\"Consultant\",\n        \"Sr Consultant\",\"Principal Consultant\");\n    Flux<String> designationFlux = Flux.fromIterable(designationList);\n\n    designationFlux.doOnComplete(\n        () -> System.out.println(\"Operation Completed ..!!\"))\n    .doOnNext(\n        value -> System.out.println(\"value in onNext() ->\"+value))\n    .doOnSubscribe(subscription -> {\n      System.out.println(\"Fetching the values ...!!\");\n      for(int index=0; index<6;index++) {\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException e) {\n          e.printStackTrace();\n          }\n          subscription.request(1);\n        }\n      })\n    .doOnError(\n        throwable-> {\n          System.out.println(\"Opps, Something went wrong ..!! \"\n              +throwable.getMessage());\n        })\n    .doFinally(\n        (signalType->\n          System.out.println(\"Shutting down the operation, Bye ..!! \"\n          +signalType.name())))\n    .subscribe();\n  }\n```", "```java\n@Document(collection=\"Student\")\npublic class Student {\n  @Id\n  @JsonIgnore\n  private String id;\n\n  @NotNull(message=\"Roll no can not be empty\")\n  private Integer rollNo;\n\n  @NotNull(message=\"Name can not be empty\")\n  private String name;\n\n  @NotNull(message=\"Standard can not be empty\")\n  private Integer standard;\n\n //.. getter and setter\n}\n```", "```java\n@Repository\npublic interface StudentMongoRepository extends ReactiveMongoRepository<Student, String>{\n  public Mono<Student> findByRollNo(Integer rollNo);\n  public Mono<Student> findByName(String name);\n}\n```", "```java\nspring.data.mongodb.host=localhost\nspring.data.mongodb.port=27017\nspring.data.mongodb.database=StudentData\n```", "```java\n@RestController\n@RequestMapping(\"api\")\npublic class StudentWebFluxController {\n\n  @Autowired\n  private StudentMongoRepository studentMongoRepository;\n\n  @GetMapping(\"/getStudent/{rollNo}\")\n  public Mono<ResponseEntity<Student>> getStudent(@PathVariable(\"rollNo\") Integer rollNo) {\n    Mono<Student> studentMonoObj = studentMongoRepository.findByRollNo(rollNo);\n    return studentMonoObj.map(student -> ResponseEntity.ok(student))\n        .defaultIfEmpty(ResponseEntity.notFound().build());\n  }\n}\n```", "```java\n  @GetMapping(\"/getAllStudent\")\n  public Flux<Student> getAllStudent() {\n    Flux<Student> allStudents = studentMongoRepository.findAll();\n    return allStudents;\n  }\n```", "```java\n@FunctionalInterface\npublic interface HandlerFunction<T extends ServerResponse> {\n  Mono<T> handle(ServerRequest request);\n}\n```", "```java\n@FunctionalInterface\npublic interface RouterFunction<T extends ServerResponse> {\n  Mono<HandlerFunction<T>> route(ServerRequest request);\n  //.. other methods.\n}\n```", "```java\n@FunctionalInterface\npublic interface RequestPredicate {\n  boolean test(ServerRequest request);\n//Other functions\n}\n```", "```java\n@SpringBootApplication\n@EnableWebFlux\npublic class SpringWebFluxDemoApplication {\n // other code ..\n}\n```", "```java\nspring.main.web-application-type=reactive\n```", "```java\n@Configuration\npublic class StudentRouter {\n    @Autowired\n    private StudentHandler studentHandler;\n     @Bean\n      RouterFunction<ServerResponse> returnStudent() {\n          return RouterFunctions.route(RequestPredicates.GET(\"/api/f/getStudent/{rollNo}\"),\n              studentHandler::getStudent);\n      }\n     @Bean\n      RouterFunction<ServerResponse> returnAllStudent() {\n          return RouterFunctions.route(RequestPredicates.GET(\"/api/f/getAllStudent\"),\n              studentHandler::getAllStudent);\n      }\n}\n```", "```java\n@Component\npublic class StudentHandler {\n  @Autowired\n  private StudentMongoRepository studentMongoRepository;\n\n  public Mono<ServerResponse> getStudent(ServerRequest serverRequest) {\n    int rollNo = getInt(serverRequest.pathVariable(\"rollNo\"));\n    Mono<Student> studentMonoObj = studentMongoRepository.findByRollNo(rollNo);\n    return ServerResponse.ok().body(studentMonoObj, Student.class);\n  }\n  public Mono<ServerResponse> getAllStudent(ServerRequest serverRequest) {\n    Flux<Student> allStudents = studentMongoRepository.findAll();\n    return ServerResponse.ok().body(allStudents, Student.class);\n  }\n  private int getInt(String intStr) {\n    int returnVal=0;\n    if(intStr !=null !intStr.isEmpty()) {\n      try {\n        returnVal = Integer.parseInt(intStr);\n      }catch(Exception e) {\n        e.printStackTrace();\n      }\n    }\n    return returnVal;\n  }\n}\n```", "```java\n@Configuration\npublic class StudentRouterHandlerCombined {\n\n  @Autowired\n  private StudentMongoRepository studentMongoRepository;\n\n  @Bean\n  RouterFunction<ServerResponse> returnStudentWithCombineFun(){\n\n        HandlerFunction<ServerResponse> studentHandler = \n                serverRequest -> {\n                 int rollNo = getInt(serverRequest.pathVariable(\"rollNo\"));\n                 return ServerResponse.ok().\n                    body(studentMongoRepository.findByRollNo(rollNo)\n                    , Student.class);\n             };\n\n    RouterFunction<ServerResponse> studentResponse =\n        RouterFunctions.route(\n             RequestPredicates.GET(\"/api/f/combine/getStudent/{rollNo}\"),\n             studentHandler);\n\n    return studentResponse;\n    }\n\n  @Bean\n  RouterFunction<ServerResponse> returnAllStudentWithCombineFun(){\n        HandlerFunction<ServerResponse> studentHandler = \n                serverRequest -> \n                 ServerResponse.ok().\n                 body(studentMongoRepository.findAll(), Student.class);\n\n    RouterFunction<ServerResponse> studentResponse =\n        RouterFunctions.route(\n            RequestPredicates.GET(\"/api/f/combine/getAllStudent\"),\n            studentHandler);\n\n    return studentResponse;\n    }\n\n  private int getInt(String intStr) {\n    int returnVal=0;\n    if(intStr !=null !intStr.isEmpty()) {\n      try {\n        returnVal = Integer.parseInt(intStr);\n      }catch(Exception e) {\n        e.printStackTrace();\n      }\n    }\n    return returnVal;\n  }\n}\n```", "```java\n@Configuration\npublic class StudentCompositeRoutes {\n\n  @Autowired\n  private StudentMongoRepository studentMongoRepository;\n\n  @Bean\n  RouterFunction<ServerResponse> compositeRoutes(){\n\n    RouterFunction<ServerResponse> studentResponse =\n        RouterFunctions.route(RequestPredicates.\n            GET(\"/api/f/composite/getStudent/{rollNo}\"),\n            serverRequest -> {\n              int rollNo = getInt(serverRequest.pathVariable(\"rollNo\"));\n              return ServerResponse.ok().\n                  body(studentMongoRepository.\n                      findByRollNo(rollNo), Student.class);\n            })\n        .and(\n            RouterFunctions.route(RequestPredicates.\n                GET(\"/api/f/composite/getAllStudent\"),\n                serverRequest -> \n            ServerResponse.ok().\n            body(studentMongoRepository.findAll(), Student.class))\n            );\n\n    return studentResponse;\n  }\n  private int getInt(String intStr) {\n    int returnVal=0;\n    if(intStr !=null  !intStr.isEmpty()) {\n      try {\n        returnVal = Integer.parseInt(intStr);\n      }catch(Exception e) {\n        e.printStackTrace();\n      }\n    }\n    return returnVal;\n  }\n}\n```", "```java\n @Autowired\n SampleWebSocketHandler studentWebSocketHandler;\n\n @Bean\n public HandlerMapping webSockertHandlerMapping() {\n   Map<String, WebSocketHandler> map = new HashMap<>();\n   map.put(\"/student\", studentWebSocketHandler);\n\n   SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\n   mapping.setUrlMap(map);\n   return mapping;\n }\n @Bean\n public WebSocketHandlerAdapter handlerAdapter() {\n   return new WebSocketHandlerAdapter();\n }\n```", "```java\n@Component\npublic class SampleWebSocketHandler implements WebSocketHandler{\n\n  private ObjectMapper objMapper = new ObjectMapper();\n\n  @Autowired\n  StudentMongoRepository studentMongoRepository;\n\n  @Override\n  public Mono<Void> handle(WebSocketSession webSocketSession) {\n    Flux<Student> allStudentSource = studentMongoRepository.findAll();\n    System.out.println(\" ****** Incoming messages ****** \");\n    webSocketSession.receive().subscribe(System.out::println);\n\n    System.out.println(\" ****** Sending Student data ****** \");\n    return webSocketSession.send(allStudentSource.map(student->{\n      return writeValueAsSTring(student);\n     }).map(webSocketSession::textMessage)\n     );\n  }\n\n  private String writeValueAsSTring(Object obj) {\n    try {\n      return objMapper.writeValueAsString(obj);\n    } catch (JsonProcessingException e) {\n      e.printStackTrace();\n    }\n    return \"No data\";\n  }\n}\n```", "```java\n<html>\n  <body>\n    Hello\n  </body>\n  <script>\n      var socket = new WebSocket('ws://localhost:8080/student');\n      socket.addEventListener('message', function (event) {\n      window.alert('message from server: ' + event.data);\n      });\n  </script>\n</html>\n```"]