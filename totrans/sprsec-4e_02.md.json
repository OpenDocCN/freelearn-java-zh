["```java\n// build.gradle\ndependencies {\n    implementation 'org.springframework.security:spring-security-config'\n    implementation 'org.springframework.security:spring-security-web'\n    ...\n}\n```", "```java\n// build.gradle\ndependencyManagement {\n    imports {\n       mavenBom 'org.springframework:spring-framework-bom:6.1.4'\n       mavenBom 'org.springframework.security:spring-security-bom:6.2.2'\n    }\n}\ndependencies {\n    ...\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public InMemoryUserDetailsManager userDetailsService() {\n        UserDetails user = User.withDefaultPasswordEncoder()\n                .username(\"user1@example.com\")\n                .password(\"user1\")\n                .roles(\"USER\")\n                .build();\n        return new InMemoryUserDetailsManager(user);\n    }\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n        http\n                .authorizeHttpRequests( authz -> authz\n                    .requestMatchers(\"/**\").hasRole(\"USER\")\n                    .anyRequest().authenticated()\n                )\n                .formLogin(withDefaults())\n                .csrf(AbstractHttpConfigurer::disable);\n        // For H2 Console\n        http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n        return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/JavaConfig.java\n@Configuration\n@Import({ SecurityConfig.class, DataSourceConfig.class })\n@ComponentScan(basePackages =\n        {\n                «com.packtpub.springsecurity.configuration»,\n                «com.packtpub.springsecurity.dataaccess»,\n                «com.packtpub.springsecurity.domain»,\n                «com.packtpub.springsecurity.service»\n        }\n)\npublic class JavaConfig {}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/configuration/WebAppInitializer\npublic class WebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return null;\n    }\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class[] { JavaConfig.class, WebMvcConfig.class };\n    }\n...\n```", "```java\n//src/main/java/com/packtpub/springsecurity/web/configuration/SecurityWebAppInitializer\n@Order(1)\npublic class SecurityWebAppInitializer\n        extends AbstractSecurityWebApplicationInitializer {\n    public SecurityWebAppInitializer() {\n        super();\n    }\n}\n```", "```java\n// DelegatingFilterProxy Pseudo Code\npublic void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    Filter delegate = getFilterBean(someBeanName);\n    delegate.doFilter(request, response);\n}\n```", "```java\npublic class FilterChainProxy implements Filter { void doFilter(request, response, filterChain) {\n// lookup all the Filters for this request\n    List<Filter> delegates =   lookupDelegates(request,response)\n// invoke each filter unless the delegate decided to stop\n    for delegate in delegates { if continue processing\n        delegate.doFilter(request,response,filterChain)\n    }\n// if all the filters decide it is ok allow the\n// rest of the application to run if continue processing\n    filterChain.doFilter(request,response) }\n}\n```", "```java\nUser.withDefaultPasswordEncoder()\n        .username(\"user1@example.com\")\n        .password(\"user1\")\n        .roles(\"USER\")\n        .build();\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n    ...\n    http\n            .authorizeHttpRequests( authz -> authz\n                    .requestMatchers(\"/**\")\n                    .hasRole(\"USER\")\n            )\n            .formLogin(form -> form\n                    .loginPage(\"/login/form\")\n                    .loginProcessingUrl(\"/login\")\n                    .failureUrl(\"/login/form?error\")\n                    .usernameParameter(\"username\")\n                    .passwordParameter(\"password\")\n    ....\n    ```", "```java\n    //src/main/webapp/WEB-INF/tempates/login.xhtml\n    <div class=\"alert alert-danger\" th:if=\"${param.error != null}\">\n        <strong>Failed to login.</strong>\n        <span th:if=\"${session[SPRING_SECURITY_LAST_EXCEPTION] != null}\">\n            <span th:text=\"${session[SPRING_SECURITY_LAST_EXCEPTION].message}\">Invalid credentials</span>\n        </span>\n    </div>\n    <div class=\"alert alert-success\" th:if=\"${param.logout != null}\">\n        You have been logged out.\n    </div>\n    <fieldset>\n        <legend>Login Form</legend>\n        <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"username\">Username</label>\n            <input autofocus=\"autofocus\" class=\"form-control\" id=\"username\"\n                   name=\"username\"\n                   type=\"text\"/>\n        </div>\n        <div class=\"mb-3\">\n            <label class=\"form-label\" for=\"password\">Password</label>\n            <input class=\"form-control\" id=\"password\" name=\"password\"\n                   type=\"password\"/>\n        </div>\n        <div class=\"mb-3\">\n            <input class=\"btn btn-primary\" id=\"submit\" name=\"submit\" type=\"submit\"\n                   value=\"Login\"/>\n        </div>\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/web/configuration/WebMvcConfig.java\n@Configuration\n@EnableWebMvc\npublic class WebMvcConfig implements WebMvcConfigurer {\n...\n    @Override\n    public void addViewControllers(final ViewControllerRegistry registry) {\n        registry.addViewController(\"/login/form\")\n              .setViewName(\"login\");\n    }\n...\n}\n```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    http\n            .authorizeHttpRequests( authz -> authz\n                  .requestMatchers(\"/**\")\n                  .hasRole(\"USER\")\n            )\n    ...\n            ).logout(form -> form\n                  .logoutUrl(\"/logout\")\n                  .logoutSuccessUrl(\"/login?logout\")\n            )\n    ....\n    ```", "```java\n    //src/main/webapp/WEB-INF/templates/fragments/header.xhtml\n    <div id=\"navbar\" ...>\n           ...\n        <ul class=\"nav navbar-nav pull-right\">\n            <li><a id=\"navLogoutLink\" th:href=\"@{/logout}\"> Logout</a></li>\n        </ul>\n           ...\n    </div>\n    ```", "```java\n    //src/main/webapp/WEB-INF/templates/login.xhtml\n    <div th:if=\"${param.logout != null}\" class=\"alert alert-success\"> You have been logged out.</div>\n    <label for=\"username\">Username</label>\n           ...\n    ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n...\nhttp\n        .authorizeHttpRequests( authz -> authz\n              .requestMatchers(\"/resources/**\").permitAll()\n              .requestMatchers(\"/webjars/**\").permitAll()\n              .requestMatchers(\"/\").hasAnyRole(\"ANONYMOUS\", \"USER\")\n              .requestMatchers(\"/login/*\").hasAnyRole(\"ANONYMOUS\", \"USER\")\n              .requestMatchers(\"/logout/*\").hasAnyRole(\"ANONYMOUS\", \"USER\")\n              .requestMatchers(\"/admin/*\").hasRole(\"ADMIN\")\n              .requestMatchers(\"/events/\").hasRole(\"ADMIN\")\n              .requestMatchers(\"/**\").hasRole(\"USER\")\n...\n@Bean\npublic InMemoryUserDetailsManager userDetailsService() {\n    UserDetails user = User.withDefaultPasswordEncoder()\n          .username(\"user\")\n          .password(\"user\")\n          .roles(\"USER\")\n          .build();\n    UserDetails admin = User.withDefaultPasswordEncoder()\n          .username(\"admin\")\n          .password(\"admin\")\n          .roles(\"ADMIN\")\n          .build();\n    UserDetails user1 = User.withDefaultPasswordEncoder()\n          .username(\"user1@example.com\")\n          .password(\"user1\")\n          .roles(\"USER\")\n          .build();\n    UserDetails admin1 = User.withDefaultPasswordEncoder()\n          .username(\"admin1@example.com\")\n          .password(\"admin1\")\n          .roles(\"USER\", \"ADMIN\")\n          .build();\n    return new InMemoryUserDetailsManager(user,admin, user1, admin1);\n}\n```", "```java\n    http.authorizeHttpRequests((authz) -> authz\n            .requestMatchers(\"/**\").hasRole(\"USER\")\n            .requestMatchers((\"/admin/*\").hasRole(\"ADMIN\"))\n    ```", "```java\n    .requestMatchers(\"/login/*\").hasAnyRole(\"ANONYMOUS\", \"USER\")\n    ```", "```java\n        http.authorizeHttpRequests()\n        …\n                // matches every request, so it will not continue\n                .requestMatchers(\"/**\").hasRole(\"USER\")\n                // below will never match\n                .requestMatchers(\"/login/form\").hasAnyRole(\"ANONYMOUS\", \"USER\")\n        ```", "```java\n        http.authorizeHttpRequests((authz) -> authz.anyRequest().permitAll())\n        // This matcher will never be executed\n        // and not produce an error.\n               .requestMatchers(\"/admin/*\").hasRole(\"ADMIN\"))\n        ```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\nhttp\n        .authorizeHttpRequests( authz -> authz\n              .requestMatchers(\"/\").access(new WebExpressionAuthorizationManager(\"hasAnyRole('ANONYMOUS', 'USER')\"))\n              .requestMatchers(\"/resources/**\").permitAll()\n              .requestMatchers(\"/webjars/**\").permitAll()\n              .requestMatchers(\"/login/*\").access(new WebExpressionAuthorizationManager(\"hasAnyRole('ANONYMOUS', 'USER')\"))\n              .requestMatchers(\"/logout/*\").access(new WebExpressionAuthorizationManager(\"hasAnyRole('ANONYMOUS', 'USER')\"))\n              .requestMatchers(\"/errors/**\").permitAll()\n              .requestMatchers(\"/admin/*\").access(new WebExpressionAuthorizationManager(\"hasRole('ADMIN')\"))\n              .requestMatchers(\"/events/\").access(new WebExpressionAuthorizationManager(\"hasRole('ADMIN')\"))\n              .requestMatchers(\"/**\").access(new WebExpressionAuthorizationManager(\"hasRole('USER')\"))\n        )\n```", "```java\n    //build.gradle\n    dependencies{\n    ...\n        implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.2.RELEASE'\n    }\n    ```", "```java\n    //src/com/packtpub/springsecurity/web/configuration/ ThymeleafConfig.java\n    @Bean\n    public SpringTemplateEngine templateEngine(final ITemplateResolver templateResolver) {\n        SpringTemplateEngine engine = new SpringTemplateEngine();\n        engine.setTemplateResolver(templateResolver);\n        engine.setAdditionalDialects(new HashSet<>() {{\n            add(new LayoutDialect());\n            add(new SpringSecurityDialect());\n        }});\n        return engine;\n    }\n    ```", "```java\n    //src/main/webapp/WEB-INF/templates/fragments/header.xhtml\n    <html  >\n    <body>\n    …\n                    <div id=\"navbar\" class=\"collapse navbar-collapse\">\n    …\n                        <ul class=\"nav navbar-nav pull-right\" **sec:authorize=\"isAuthenticated()\"**>\n                            <li>\n                                <p class=\"navbar-text\">Welcome <div class=\"navbar-text\" th:text=\"**${#authentication.name}\"**>User</div></p>\n                            </li>\n                            <li>\n                                **<a id=\"navLogoutLink\" class=\"btn btn-default\" role=\"button\"  th:href=\"@{/logout}\">Logout</a>**\n                            </li>\n                            <li>&nbsp;|&nbsp;</li>\n                        </ul>\n                        <ul class=\"nav navbar-nav pull-right\" **sec:authorize=\" ! isAuthenticated()\"**>\n                            <li><a id=\"navLoginLink\" class=\"btn btn-default\" role=\"button\" th:href=\"@{/login/form}\">Login</a></li>\n                            <li>&nbsp;|&nbsp;</li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n       </div>\n    ...\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/configuration/ SecurityConfig.java\n    .formLogin(form -> form\n           .loginPage(\"/login/form\")\n           .loginProcessingUrl(\"/login\")\n           .failureUrl(\"/login/form?error\")\n           .usernameParameter(\"username\")\n           .passwordParameter(\"password\")\n           .defaultSuccessUrl(\"/default\")\n           .permitAll()\n    ```", "```java\n    //src/main/java/com/packtpub/springsecurity/web/controllers/DefaultController.java\n    @Controller\n    public class DefaultController {\n        @RequestMapping(\"/default\")\n        public String defaultAfterLogin(HttpServletRequest request) {\n           if (request.isUserInRole(\"ADMIN\")) {\n              return \"redirect:/events/\";\n           }\n           return \"redirect:/\";\n        }\n    }\n    ```", "```java\n    .defaultSuccessUrl(\"/default\", true)\n    ```"]