["```java\npublic abstract class RouterNetworkAdapter {\n    protected Router router;\n    protected RouterNetworkUseCase;\n    public Router addNetworkToRouter(\n    Map<String, String> params){\n        var routerId = RouterId.\n               withId(params.get(\"routerId\"));\n        var network = new Network(IP.fromAddress(\n               params.get(\"address\")),\n               params.get(\"name\"),\n               Integer.valueOf(params.get(\"cidr\")));\n        return routerNetworkUseCase.\n               addNetworkToRouter(routerId, network);\n    }\n    public abstract Router processRequest(\n                           Object requestParams);\n}\n```", "```java\npublic RouterNetworkRestAdapter(RouterNetworkUseCase rout\n  erNetworkUseCase){\n    this.routerNetworkUseCase = routerNetworkUseCase;\n}\n```", "```java\nRouterNetworkOutputPort outputPort = RouterNet\n  workH2Adapter.getInstance();\nRouterNetworkUseCase usecase = new RouterNetworkInput\n  Port(outputPort);\nRouterManageNetworkAdapter inputAdapter = new RouterNet\n  workRestAdapter(usecase);\n```", "```java\n/**\n* When implementing a REST adapter, the processRequest\n  method receives an Object type parameter\n* that is always cast to an HttpServer type.\n*/\n@Override\npublic Router (Object requestParams){\n/** code omitted **/\n    httpserver.createContext(\"/network/add\", (exchange -> {\n      if (\"GET\".equals(exchange.getRequestMethod())) {\n       var query = exchange.getRequestURI().getRawQuery();\n       httpParams(query, params);\n       router = this.addNetworkToRouter(params);\n       ObjectMapper mapper = new ObjectMapper();\n       var routerJson = mapper.writeValueAsString(\n       RouterJsonFileMapper.toJson(router));\n       exchange.getResponseHeaders().\n       set(\"Content-Type\",\"application/json\");\n       exchange.sendResponseHeaders(\n       200,routerJson.getBytes().length);\n       OutputStream output = exchange.getResponseBody();\n       output.write(routerJson.getBytes());\n       output.flush();\n      } else {\n        exchange.sendResponseHeaders(405, -1);\n      }\n/** code omitted **/\n}\n```", "```java\nvar httpserver = HttpServer.create(new InetSocket\n  Address(8080), 0);\nrouterNetworkAdapter.processRequest(httpserver);\n```", "```java\nrouter = this.addNetworkToRouter(params);\n```", "```java\nrouterNetworkUseCase.addNetworkToRouter(routerId, network);\n```", "```java\npublic class RouterNetworkCLIAdapter extends RouterNetwork\n  Adapter {\n    public RouterNetworkCLIAdapter(\n    RouterNetworkUseCase routerNetworkUseCase){\n        this.routerNetworkUseCase = routerNetworkUseCase;\n    }\n/** code omitted **/\n}\n```", "```java\nRouterNetworkOutputPort outputPort = RouterNetworkFileA\n  dapter.getInstance();\nRouterNetworkUseCase usecase = new RouterNetworkInput\n  Port(outputPort);\nRouterManageNetworkAdapter inputAdapter = new RouterNet\n  workCLIAdapter(routerNetworkUseCase);\n```", "```java\n@Override\npublic Router processRequest(Object requestParams){\n    var params = stdinParams(requestParams);\n    router = this.addNetworkToRouter(params);\n    ObjectMapper mapper = new ObjectMapper();\n    try {\n        var routerJson = mapper.writeValueAsString\n                     (RouterJsonFileMapper.toJson(router));\n        System.out.println(routerJson);\n    } catch (JsonProcessingException e) {\n        e.printStackTrace();\n    }\n    return router;\n}\n```", "```java\nrouter = this.addNetworkToRouter(params);\n```", "```java\npublic class App {\n/** code omitted **/\n    void setAdapter(String adapter) {\n        switch (adapter){\n            case \"rest\" -> {\n                outputPort =\n                RouterNetworkH2Adapter.getInstance();\n                usecase =\n                new RouterNetworkInputPort(outputPort);\n                inputAdapter =\n                new RouterNetworkRestAdapter(usecase);\n                rest();\n            }\n            default -> {\n                outputPort =\n                RouterNetworkFileAdapter.getInstance();\n                usecase =\n                new RouterNetworkInputPort(outputPort);\n                inputAdapter =\n                new RouterNetworkCLIAdapter(usecase);\n                cli();\n            }\n        }\n    }\n}\n```", "```java\nprivate void rest() {\n    try {\n        System.out.println(\"REST endpoint listening on\n                           port 8080...\");\n        var httpserver = HttpServer.create(\n        new netSocketAddress(8080), 0);\n        routerNetworkAdapter.processRequest(httpserver);\n    } catch (IOException e){\n        e.printStackTrace();\n    }\n}\n```", "```java\nprivate void cli() {\n    Scanner = new Scanner(System.in);\n    routerNetworkAdapter.processRequest(scanner);\n}\n```", "```java\n    .jar file with the rest parameter:\n\n    ```", "```java\n    .jar file with no parameters:\n\n    ```", "```java\n\n    ```", "```java\n\n    ```", "```java\nCREATE TABLE routers(\n    router_id UUID PRIMARY KEY NOT NULL,\n    router_type VARCHAR(255)\n);\nCREATE TABLE switches (\n    switch_id UUID PRIMARY KEY NOT NULL,\n    router_id UUID,\n    switch_type VARCHAR(255),\n    switch_ip_protocol VARCHAR(255),\n    switch_ip_address VARCHAR(255),\n    PRIMARY KEY (switch_id),\n    FOREIGN KEY (router_id) REFERENCES routers(router_id)\n);\nCREATE TABLE networks (\n    network_id int NOT NULL PRIMARY KEY AUTO_INCREMENT,\n    switch_id UUID,\n    network_protocol VARCHAR(255),\n    network_address VARCHAR(255),\n    network_name VARCHAR(255),\n    network_cidr VARCHAR(255),\n    PRIMARY KEY (network_id),\n    FOREIGN KEY (switch_id) REFERENCES switches(switch_id)\n);\nINSERT INTO routers(router_id, router_type) VALUES('ca23800e-9b5a-11eb-a8b3-0242ac130003', 'EDGE');\nINSERT INTO switches(switch_id, router_id, switch_type, switch_ip_protocol, switch_ip_address)\nVALUES('922dbcd5-d071-41bd-920b-00f83eb4bb46', 'ca23800e-9b5a-11eb-a8b3-0242ac130003', 'LAYER3', 'IPV4', '9.0.0.9');\nINSERT INTO networks(switch_id, network_protocol, network_address, network_name, network_cidr)\nVALUES('922dbcd5-d071-41bd-920b-00f83eb4bb46', 'IPV4', '10.0.0.0', 'HR', '8');\nINSERT INTO networks(switch_id, network_protocol, network_address, network_name, network_cidr)\nVALUES('922dbcd5-d071-41bd-920b-00f83eb4bb46', 'IPV4', '20.0.0.0', 'Marketing', '8');\nINSERT INTO networks(switch_id, network_protocol, network_address, network_name, network_cidr)\nVALUES('922dbcd5-d071-41bd-920b-00f83eb4bb46', 'IPV4', '30.0.0.0', 'Engineering', '8');\n```", "```java\npublic class RouterNetworkH2Adapter implements RouterNet\n  workOutputPort {\n     private static RouterNetworkH2Adapter instance;\n     @PersistenceContext\n     private EntityManager em;\n     private RouterNetworkH2Adapter(){\n          setUpH2Database();\n     }\n     @Override\n     public Router fetchRouterById(RouterId routerId) {\n          var routerData = em.\n              getReference(RouterData.class,\n              routerId.getUUID());\n          return RouterH2Mapper.toDomain(routerData);\n     }\n     @Override\n     public boolean persistRouter(Router router) {\n          var routerData = RouterH2Mapper.toH2(router);\n          em.persist(routerData);\n          return true;\n     }\n     private void setUpH2Database() {\n          var entityManagerFactory = Persistence.\n          createEntityManagerFactory(\"inventory\");\n          var em = entityManagerFactory.\n          createEntityManager();\n          this.em = em;\n     }\n/** code omitted **/\n}\n```", "```java\npublic static RouterNetworkH2Adapter getInstance() {\n    if (instance == null) {\n        instance = new RouterNetworkH2Adapter();\n    }\n    return instance;\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!-- code omitted -->\n<property\n     name=\"jakarta.persistence.jdbc.url\"\n          value=\"jdbc:h2:mem:inventory;\n          MODE=MYSQL;\n          DB_CLOSE_DELAY=-1;\n          DB_CLOSE_ON_EXIT=FALSE;\n          IGNORECASE=TRUE;\n          INIT=CREATE SCHEMA IF NOT EXISTS inventory\\;\n          RUNSCRIPT FROM 'classpath:inventory.sql'\" />\n<!-- code omitted -->\n```", "```java\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"routers\")\n@SecondaryTable(name = \"switches\")\n@MappedSuperclass\n@Converter(name=\"uuidConverter\", converterClass=\n  UUIDTypeConverter.class)\npublic class RouterData implements Serializable {\n    @Id\n    @Column(name=\"router_id\",\n            columnDefinition = \"uuid\",\n            updatable = false )\n    @Convert(\"uuidConverter\")\n    private UUID routerId;\n    @Embedded\n    @Enumerated(EnumType.STRING)\n    @Column(name=\"router_type\")\n    private RouterTypeData routerType;\n    @OneToOne(cascade = CascadeType.ALL)\n    @JoinColumn(table = \"switches\",\n            name = \"router_id\",\n            referencedColumnName = \"router_id\")\n    private SwitchData networkSwitch;\n}\n```", "```java\npublic class UUIDTypeConverter implements Converter {\n     @Override\n     public UUID convertObjectValueToDataValue(Object\n                    objectValue, Session session) {\n          return (UUID) objectValue;\n     }\n     @Override\n     public UUID convertDataValueToObjectValue(Object\n                    dataValue, Session session) {\n          return (UUID) dataValue;\n     }\n     @Override\n     public boolean isMutable() {\n          return true;\n     }\n     @Override\n     public void initialize(\n     DatabaseMapping mapping, Session session){\n          DatabaseField field = mapping.getField();\n          field.setSqlType(Types.OTHER);\n          field.setTypeName(\"java.util.UUID\");\n          field.setColumnDefinition(\"UUID\");\n     }\n}\n```", "```java\n@Embeddable\npublic enum RouterTypeData {\n     EDGE,\n     CORE;\n}\n```", "```java\n@Embedded\n@Enumerated(EnumType.STRING)\n@Column(name=\"router_type\")\nprivate RouterTypeData routerType;\n```", "```java\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"switches\")\n@SecondaryTable(name = \"networks\")\n@MappedSuperclass\n@Converter(name=\"uuidConverter\", converterClass=\n  UUIDTypeConverter.class)\npublic class SwitchData implements Serializable {\n    @Id\n    @Column(name=\"switch_id\",\n            columnDefinition = \"uuid\",\n            updatable = false )\n    @Convert(\"uuidConverter\")\n    private UUID switchId;\n    @Column(name=\"router_id\")\n    @Convert(\"uuidConverter\")\n    private UUID routerId;\n    @Enumerated(EnumType.STRING)\n    @Embedded\n    @Column(name = \"switch_type\")\n    private SwitchTypeData switchType;\n    @OneToMany\n    @JoinColumn(table = \"networks\",\n            name = \"switch_id\",\n            referencedColumnName = \"switch_id\")\n    private List<NetworkData> networks;\n    @Embedded\n    @AttributeOverrides({\n            @AttributeOverride(\n                    name = \"address\",\n                    column = @Column(\n                            name = \"switch_ip_address\")),\n            @AttributeOverride(\n                    name = \"protocol\",\n                    column = @Column(\n                            name = \"switch_ip_protocol\")),\n    })\n    private IPData ip;\n}\n```", "```java\n@Embeddable\npublic enum SwitchTypeData {\n     LAYER2,\n     LAYER3;\n}\n```", "```java\n@Getter\n@AllArgsConstructor\n@NoArgsConstructor\n@Entity\n@Table(name = \"networks\")\n@MappedSuperclass\n@Converter(name=\"uuidConverter\", converterClass=\n  UUIDTypeConverter.class)\npublic class NetworkData implements Serializable {\n    @Id\n    @Column(name=\"network_id\")\n    private int id;\n    @Column(name=\"switch_id\")\n    @Convert(\"uuidConverter\")\n    private UUID switchId;\n    @Embedded\n    @AttributeOverrides({\n            @AttributeOverride(\n                    name = \"address\",\n                    column = @Column(\n                            name = \"network_address\")),\n            @AttributeOverride(\n                    name = \"protocol\",\n                    column = @Column(\n                            name = \"network_protocol\")),\n    })\n    IPData ip;\n    @Column(name=\"network_name\")\n    String name;\n    @Column(name=\"network_cidr\")\n    Integer cidr;\n/** code omitted **/\n}\n```", "```java\n@Embeddable\n@Getter\npublic class IPData {\n    private String address;\n    @Enumerated(EnumType.STRING)\n    @Embedded\n    private ProtocolData protocol;\n    private IPData(String address){\n        if(address == null)\n            throw new IllegalArgumentException(\"Null IP\n                          address\");\n        this.address = address;\n        if(address.length()<=15) {\n            this.protocol = ProtocolData.IPV4;\n        } else {\n            this.protocol = ProtocolData.IPV6;\n        }\n    }\n    public IPData() {}\n    public static IPData fromAddress(String address){\n        return new IPData(address);\n    }\n}\n```", "```java\n@Embeddable\npublic enum ProtocolData {\n     IPV4,\n     IPV6;\n}\n```", "```java\npublic static Router toDomain(RouterData routerData){\n/** code omitted **/\n    return new Router(routerType, routerId, networkSwitch);\n}\n```", "```java\nprivate static List<Network> getNetworksFromData(List<Net\n  workData> networkData){\n    return networkData\n            .stream()\n            .map(network -> new Network(\n                      IP.fromAddress(\n                      network.getIp().getAddress()),\n                      network.getName(),\n                      network.getCidr()))\n            .collect(Collectors.toList());\n}\n```", "```java\npublic static RouterData toH2(Router router){\n/** code omitted **/\nreturn new RouterData(routerId, routerTypeData,\n  switchData);\n}\n```", "```java\nprivate static List<NetworkData> getNetworksFromDo\n  main(List<Network> networks, UUID switchId){\n    return  networks\n             .stream()\n             .map(network -> new NetworkData(\n                    switchId,\n                    IPData.fromAddress(\n                    network.getAddress().getIPAddress()),\n                    network.getName(),\n                    network.getCidr()))\n             .collect(Collectors.toList());\n}\n```", "```java\n@Override\npublic Router fetchRouterById(RouterId routerId) {\n     var routerData = em.getReference(\n     RouterData.class, routerId.getUUID());\n     return RouterH2Mapper.toDomain(routerData);\n}\n```", "```java\n@Override\npublic boolean persistRouter(Router router) {\n     var routerData = RouterH2Mapper.toH2(router);\n     em.persist(routerData);\n     return true;\n}\n```", "```java\nprivate Router fetchRouter(RouterId routerId) {\n     return routerNetworkOutputPort.\n     fetchRouterById(routerId);\n}\n/** code omitted **/\nprivate boolean persistNetwork(Router router) {\n     return routerNetworkOutputPort.\n     persistRouter(router);\n}\n```", "```java\n[{\n    \"routerId\": \"ca23800e-9b5a-11eb-a8b3-0242ac130003\",\n    \"routerType\": \"EDGE\",\n    \"switch\":{\n      \"switchId\": \"922dbcd5-d071-41bd-920b-00f83eb4bb46\",\n      \"ip\": {\n        \"protocol\": \"IPV4\", \"address\": \"9.0.0.9\"\n      },\n      \"switchType\": \"LAYER3\",\n      \"networks\":[\n        {\n          \"ip\": {\n            \"protocol\": \"IPV4\", \"address\": \"10.0.0.0\"\n          },\n          \"networkName\": \"HR\", \"networkCidr\": \"8\"\n        },\n        {\n          \"ip\": {\n            \"protocol\": \"IPV4\", \"address\": \"20.0.0.0\"\n          },\n          \"networkName\": \"Marketing\", \"networkCidr\": \"8\"\n        },\n        {\n          \"ip\": {\n            \"protocol\": \"IPV4\", \"address\": \"30.0.0.0\"\n          },\n          \"networkName\": \"Engineering\", \"networkCidr\": \"8\"\n        }\n      ]\n    }\n}]\n```", "```java\npublic class RouterNetworkFileAdapter implements RouterNet\n  workOutputPort {\n/** code omitted **/\n    @Override\n    public Router fetchRouterById(RouterId routerId) {\nvar router = new Router();\n        for(RouterJson: routers){\n              if(routerJson.getRouterId().\n              equals(routerId.getUUID())){\n                    router =  RouterJsonFileMapper.\n                    toDomain(routerJson);\n              break;\n           }\n        }\n        return router;\n    }\n    @Override\n    public boolean persistRouter(Router router) {\n        var routerJson = RouterJsonFileMapper.\n                         toJson(router);\n        try {\n            var localDir = Paths.get(\"\").\n                              toAbsolutePath().toString();\n            var file = new File(localDir+\n                        \"/inventory.json\");\n            file.delete();\n            objectMapper.writeValue(file, routerJson);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return true;\n    }\n/** code omitted **/\n}\n```", "```java\nprivate void readJsonFile(){\n    try {\n        this.routers = objectMapper.readValue(\n             resource,\n             new TypeReference<List<RouterJson>>(){});\n        } catch (Exception e) {\n           e.printStackTrace();\n        }\n}\nprivate RouterNetworkFileAdapter() {\n    this.objectMapper = new ObjectMapper();\n    this.resource = getClass().getClassLoader().\n    getResourceAsStream(\"inventory.json\");\n    readJsonFile();\n}\n```", "```java\n/** Code omitted **/\n@JsonInclude(value = JsonInclude.Include.NON_NULL)\npublic class RouterJson {\n     @JsonProperty(\"routerId\")\n     private UUID routerId;\n     @JsonProperty(\"routerType\")\n     private RouterTypeJson routerType;\n     @JsonProperty(\"switch\")\n     private SwitchJson networkSwitch;\n}\n```", "```java\nRouterJsonFileMapper.toDomain(routerJson);\n```", "```java\nRouterJsonFileMapper.toJson(router);\n```", "```java\npublic static Router toDomain(RouterJson routerJson){\n    /** code omitted **/\n    return new Router(routerType, routerId, networkSwitch);\n}\n```", "```java\nprivate static List<Network> getNetworksFromJson(List<Net\n  workJson> networkJson){\n    return networkJson\n            .stream()\n            .map(json ->  new Network(\n                    IP.fromAddress(\n                    json.getIp().getAddress()),\n                    json.getNetworkName(),\n                    Integer.valueOf(json.getCidr())))\n            .collect(Collectors.toList());\n}\n```", "```java\npublic static RouterJson toJson(Router router){\n    /** code omitted **/\n    return new RouterJson(\n               routerId,\n               routerTypeJson,\n               switchJson);\n}\n```", "```java\nprivate static List<NetworkJson>  getNetworksFromDo\n  main(List<Network> networks){\n     return networks\n             .stream()\n             .map(network -> new NetworkJson(\n                    IPJson.fromAddress(\n                    network.getAddress().getIPAddress()),\n                    network.getName(),\n                    String.valueOf(network.getCidr())))\n              .collect(Collectors.toList());\n}\n```", "```java\nmvn clean package\n```", "```java\n$ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.jar rest\n$ curl -vv \"http://localhost:8080/network/add?routerId=ca23800e-9b5a-11eb-a8b3-0242ac130003&address=40.0.0.0&name=Finance&cidr=8\" | jq\n```", "```java\n$ java -jar target/chapter04-1.0-SNAPSHOT-jar-with-dependencies.jar\nPlease inform the Router ID:\nca23800e-9b5a-11eb-a8b3-0242ac130003\nPlease inform the IP address:\n40.0.0.0\nPlease inform the Network Name:\nFinance\nPlease inform the CIDR:\n8\n```", "```java\n{\n  \"routerId\": \"ca23800e-9b5a-11eb-a8b3-0242ac130003\",\n  \"routerType\": \"EDGE\",\n  \"switch\": {\n    \"switchId\": \"922dbcd5-d071-41bd-920b-00f83eb4bb46\",\n    \"ip\": {\n      \"address\": \"9.0.0.9\", \"protocol\": \"IPV4\"\n    },\n    \"switchType\": \"LAYER3\",\n    \"networks\": [\n      {\n        \"ip\": {\n          \"address\": \"10.0.0.0\", \"protocol\": \"IPV4\"\n        },\n        \"networkName\": \"HR\",\n        \"networkCidr\": \"8\"\n      },\n      {\n        \"ip\": {\n          \"address\": \"20.0.0.0\", \"protocol\": \"IPV4\"\n        },\n        \"networkName\": \"Marketing\",\n        \"networkCidr\": \"8\"\n      },\n      {\n        \"ip\": {\n          \"address\": \"30.0.0.0\", \"protocol\": \"IPV4\"\n        },\n        \"networkName\": \"Engineering\",\n        \"networkCidr\": \"8\"\n      },\n      {\n        \"ip\": {\n          \"address\": \"40.0.0.0\", \"protocol\": \"IPV4\"\n        },\n        \"networkName\": \"Finance\",\n        \"networkCidr\": \"8\"\n      }\n    ]\n  }\n}\n```"]