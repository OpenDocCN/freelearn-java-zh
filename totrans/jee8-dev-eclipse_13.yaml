- en: Securing JEE Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to deploy JEE applications in the cloud.
    In this chapter, we will learn how to secure JEE applications—specifically, how
    to perform authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Securing JEE web applications using deployment descriptors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing JEE web applications using annotations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security enhancements in JEE 8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication and authorization in JEE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is the process of verifying that the user is who he or she is
    claiming to be. This is typically done by asking the user to provide a username
    and password. Another way to verify the client identity is by asking for client
    certificates. In this chapter, we will look at password authentication only.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization is the process of determining whether a user is allowed to perform
    certain actions in the application. The JEE specification allows role-based authorization.
    In the application, you specify roles that can perform an action, or access a
    resource, and then add users to these roles.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, securing JEE applications, as per JEE specifications, is not
    completely server-independent. There are parts of the configuration that are common
    across servers, and there are parts that are specific to server vendors. Common
    configurations are mostly done in `web.xml` or by using annotations. But, server-specific
    configurations vary from vendor to vendor. In this chapter, we will learn how
    to secure JEE applications in GlassFish and Tomcat servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'But, before we learn details about securing applications, we need to understand
    certain terms commonly used in configurations, in the context of security:'
  prefs: []
  type: TYPE_NORMAL
- en: '**User**: A client requesting access to a protected resource in an application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: A set of users with similar characteristics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Role**: Determines what resources can be accessed in an application, by a
    user or group, with that particular role'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Realm**: Can be considered a security domain, with its own users, groups,
    and storage method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying a database to save authentication information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use a database to authenticate users. Other methods
    used to store security information include files and LDAP. We will need to update
    our `course_management` database with tables to store information about users
    and groups. Let''s create three tables—`User`, `Groups`, and `User_Group`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00268.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.1: New tables for authentication'
  prefs: []
  type: TYPE_NORMAL
- en: The `User` table stores the username and password. The `Groups` table stores
    the group names. We will group names directly into roles later. The `User_Group` table
    is a joint table, joining the `User` and `Groups` tables. One user can be in many
    groups, and one group can have many users.
  prefs: []
  type: TYPE_NORMAL
- en: 'To simplify mapping information from the preceding tables when configuring
    realms in JEE servers, we will create a view, named `user_group_view`, that makes
    information from all the preceding tables available in one view. The DDL script
    for the view is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you already have the `course_management` schema from earlier chapters, then
    run the script in the `add_auth_tables.sql` file (the file is in the source code
    folder for this chapter). If you are using `MySQLWorkbench`, you can run the script
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Make sure `course_management` is the default schema; right-click on the schema
    and select the Set as Default Schema option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the File | Open SQL Script menu, and then select the `add_auth_tables.sql`
    file. The file will open in a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Execute icon in the toolbar to execute this script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the course_management schema and select the Refresh All option.
    Make sure the new tables and the view are created in the schema.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For testing purpose, let's insert the following data in the `user` table**:**
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **user_name** | **password** |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `user1` | `user1_pass` |'
  prefs: []
  type: TYPE_TB
- en: '| `2` | `user2` | `user2_pass` |'
  prefs: []
  type: TYPE_TB
- en: '`Groups`**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **ID** | **group_name** |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `admin` |'
  prefs: []
  type: TYPE_TB
- en: '`User_Group`**:**'
  prefs: []
  type: TYPE_NORMAL
- en: '| **user_ID** | **group_ID** |'
  prefs: []
  type: TYPE_TB
- en: '| `1` | `1` |'
  prefs: []
  type: TYPE_TB
- en: As per the preceding data, `user1` is in the admin group, and `user2` is not
    in any group.
  prefs: []
  type: TYPE_NORMAL
- en: Securing applications in GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will use the *Course Management* application that we developed in [Chapter
    7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating JEE Applications
    with EJB*, to add security features. Follow these steps to import projects:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Eclipse workspace for this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy all the projects in the source code folder for [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* inside the `with-maven` folder, to the current workspace.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import all the projects into the new workspace (open the File | Import menu and
    then select Maven | Existing Maven Projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now have the following projects in your Eclipse workspace: `CourseManagementMavenEAR`,
    `CourseManagementMavenEJBClient`, `CourseManagementMavenEJBs`, and `CourseManagementMavenWebApp`.
    Let's now learn how to protect access to JSPs in a folder.
  prefs: []
  type: TYPE_NORMAL
- en: Protecting access to folders in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To protect any resources in a web folder, you need to declare security constraints
    in `web.xml`. In the security constraints, you can declare URLs that are to be
    protected, and which roles can access the protected URLs. Open `web.xml` in the `CourseManagementMavenWebApp` project and
    add the following declarations within the `<web-app>` tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are declaring all the resources accessed with the `/admin/*`URL to
    be protected, and also that only users in the `admin` role can access these resources.
    We are also declaring the `admin` role using the `<security-role>` tag. If you
    want the URL resources to be accessed only over SSL (using HTTPS), then set `<transport-guarantee>`
    to `CONFIDENTIAL`. However, you will need to obtain (buy) an SSL certificate from
    certificate authorities, such as Verisign, and install it on the server.
  prefs: []
  type: TYPE_NORMAL
- en: See [https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml](https://www.verisign.com/en_US/website-presence/website-optimization/ssl-certificates/index.xhtml)
    for details about SSL certificates.
  prefs: []
  type: TYPE_NORMAL
- en: Each server has a different process for installing the certificates. However,
    we will not discuss how to install an SSL certificate in this book. Therefore,
    the `<user-data-constraint>` configuration is described in the preceding code.
  prefs: []
  type: TYPE_NORMAL
- en: See [https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints](https://javaee.github.io/tutorial/security-webtier002.html#specifying-security-constraints)
    for more details on security constraints.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, let’s see how the application works. Before deploying the application
    in GlassFish, let''s create a protected resource. Since we have protected all
    the accessed resources using the `/admin/*` URL, create a folder named `admin`
    in the `src/main/webapp` folder. Inside this folder, create `admin.jsp` using
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Refer to the <q class="calibre258">Configuring GlassFish server in Eclipse</q>
    section in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*, for information on adding the GlassFish
    5 Server to your Eclipse workspace.
  prefs: []
  type: TYPE_NORMAL
- en: We need to build two applications: `CourseManagementMavenWebApp` and `CourseManagementMavenEAR`.
    The EAR project is just a container project; the real content is served from `CourseManagementMavenWebApp`.
    So, we need to build both projects. Right-click on `CourseManagementMavenWebApp`
    in Eclipse Project Explorer, and select Run As | Maven Install. Do the same for
    the `CourseManagementMavenEAR`project. Then, deploy `CourseManagementMavenEAR-1.ear`
    from the target folder in GlassFish 5.
  prefs: []
  type: TYPE_NORMAL
- en: To deploy the application in GlassFish 5, browse to `http://localhost:4848`
    and configure the datasource, as described in the <q class="calibre258">Configuring
    Datasource in GlassFish</q> section in [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*. Then, click on the Application node and
    deploy `CourseManagementMavenEAR-1.ear`<q class="calibre258">.</q>
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the application is deployed, browse to `http://localhost:8080/CourseManagementMavenWebApp/course.xhtml` and
    make sure the page can be accessed without any authentication required, because
    this is an unprotected resource/page. Now, try to browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    Since we have marked the `/admin/*` URL pattern as a protected resource, the browser
    pops up this authentication dialog box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00269.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.2: Browser authentication dialog box'
  prefs: []
  type: TYPE_NORMAL
- en: We have not configured our application to authenticate the user. So, authentication
    will fail in the preceding dialog box, no matter what you enter as the username
    and password. Let’s fix this by configuring the database to authenticate users
    in GlassFish.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a JDBC realm in GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GlassFish supports different realms for JEE authentication; for example, file,
    LDAP, and JDBC realms. We are going to create a JDBC realm, which will use the
    information stored in the `User`, `Groups`, and `User_Groups` tables (exposed
    by `user_group_view`).
  prefs: []
  type: TYPE_NORMAL
- en: To create a new JDBC realm in GlassFish, browse to the GlassFish admin page
    (`http://localhost:4848`), and in the navigation menu on the left-hand side, go
    to Configurations | server-config | Security | Realms. On the Realms page, click
    on the New button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00270.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.3: Creating a JDBC realm on the GlassFish admin page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following information into the form:'
  prefs: []
  type: TYPE_NORMAL
- en: Class name
  prefs: []
  type: TYPE_NORMAL
- en: '| **Field name** | **Value** | **Notes** |'
  prefs: []
  type: TYPE_TB
- en: '| Name | `courseManagementJDBCRealm` |  |'
  prefs: []
  type: TYPE_TB
- en: '|  | `com.sun.enterprise.security.auth.realm.jdbc.JDBCRealm` | Select from
    the drop-down menu. |'
  prefs: []
  type: TYPE_TB
- en: '| JAAS Context | `jdbcRealm` |  |'
  prefs: []
  type: TYPE_TB
- en: '| JNDI | `jdbc/CourseManagement` | The JDBC data source we have created. See
    [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* for more details. |'
  prefs: []
  type: TYPE_TB
- en: '| User Table | `user_group_view` | The table containing the user information.
    We specify the view that we created earlier. |'
  prefs: []
  type: TYPE_TB
- en: '| Username Column | `user_name` | The username column in our `user_group_view`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Password Column | `password` | The password column in our `user_group_view`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Group Table | `user_group_view` | The group data is also exposed through
    our `user_group_view`. |'
  prefs: []
  type: TYPE_TB
- en: '| Group Table Username Column | `user_name` | In `user_group_view`. |'
  prefs: []
  type: TYPE_TB
- en: '| Group Name Column | `group_name` | In `user_group_view`. |'
  prefs: []
  type: TYPE_TB
- en: '| Password Encryption Algorithm | `AES` | The algorithm to encrypt passwords
    in the database. We are pre-populated passwords outside the application. So, this
    does not have much impact on our example. |'
  prefs: []
  type: TYPE_TB
- en: '| Digest Algorithm | `none` | The passwords we entered in the table are not
    hashed, so enter `none` here. |'
  prefs: []
  type: TYPE_TB
- en: Click on the OK button to create the realm.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to tell our application to use the JDBC realm created earlier. This
    is configured in the `web.xml` of the application, in the `<login-config>` tag.
    Two authentication methods are supported in `<long-config>`: basic and form-based.'
  prefs: []
  type: TYPE_NORMAL
- en: In basic authentication, the browser displays the login form, just as in *Figure
    14.2*. In fact, this is the default authentication method, so in the absence of
    the `<login-config>` tag in our `web.xml` previously, the server defaults to basic
    authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In form-based authentication, you can specify the login page. This gives you
    a chance to customize the login experience.
  prefs: []
  type: TYPE_NORMAL
- en: Let's first configure the realm using basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Basic authentication with the JDBC realm in GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will make some changes to the tags we added to configure security in the
    *Protecting access to folders in web applications*section. Here are the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename `role-name` from `admin` to `admin-role`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `<security-role>` tag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `<login-config>` tag
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is what the changed declaration should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that we specified the name of the realm we configured (on the GlassFish
    admin page) in the `<login-config>` tag. We removed `<security-role>` because
    roles are now saved in the database, in the Groups table. However, we need to
    map the roles declared in `web.xml` to groups in the database.  This mapping is
    done in `glassfish-web.xml`. Create `glassfish-web.xml` in the same folder as
    that of `web.xml`, that is, `src/main/webapp/WEB-INF`, in the `CourseManagementMavenWebApp`project. Add
    the following content to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are mapping admin-role, which we declared in `web.xml`, with the admin
    group in the Groups table in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Now, build the `CourseManagementMavenWebApp` and `CourseManagementMavenEAR` projects (in
    the same order) by right-clicking on the projects and selecting Run As | Maven
    Install, and then deploy the application in GlassFish as described in the *Protecting
    access to folders in web applications*section.
  prefs: []
  type: TYPE_NORMAL
- en: Browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    This time, the browser should display the contents of `admin.jsp`, once you enter
    the valid admin credentials; that is, the username as `user1`, and the password
    as `user1_pass`.
  prefs: []
  type: TYPE_NORMAL
- en: Form-based authentication with a JDBC realm in GlassFish
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s change basic authentication to form-based authentication, so that we
    can customize the login page. We need to update `<login-config>` in `web.xml`.
    Replace the previous `<login-config>` block with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have replaced `<auth-method>` from BASIC to FORM. For form-based authentication,
    we need to specify form-login-page, which we have specified as `login.jsp`. form-error-page
    is optional, but we have set that to `login-error.jsp`.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create `login.jsp` and `login-error.jsp`. Create both the
    files in the `src/main/webapp` folder with the following contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the source code of `login.jsp`. We have configured it as the login
    page in `<form-login-page>`, as shown in the preceding code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For form-based authentication to work, there are certain requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: The form action must be set to `j_security_check`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The username input field must be named `j_username`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The password input field must be named `j_password`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the source code of `login-error.jsp`. We have configured it as the
    error page in `<form-error-page>`, as shown in the previous code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The error page shows the error message and displays the link to try again. Even
    though the link Try Again points to `admin.jsp`, because it is a protected resource,
    the user will be redirected to `login.jsp`. If the login is successful, then redirection
    to `admin.jsp` will happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'It would be nice to provide an option to log out after the user has successfully
    logged in. This option can be added to `admin.jsp`. Add a link to log out in `admin.jsp`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Create `logout.jsp` in the same folder as `login.jsp` with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The logout page simply calls `session.invalidate()` to log the user out.
  prefs: []
  type: TYPE_NORMAL
- en: To see form-based authentication in action, build the `CourseManagementMavenWebApp`
    and `CourseManagementMavenEAR` projects (in the same order) by right-clicking
    on the projects and selecting Run As | Maven Install, and then deploy the application
    in GlassFish, as described in the *Protecting access to folders in web applications*section.
  prefs: []
  type: TYPE_NORMAL
- en: Browse to `http://localhost:8080/CourseManagementMavenWebApp/admin/admin.jsp`.
    This time, the browser should display `login.jsp`, with the login form, instead
    of its own pop-up window for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Securing applications in Tomcat
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to protect resources in the Tomcat server.
    To keep the example consistent with the one we learned in the previous section
    for GlassFish, we will protect all pages in the `admin` folder. We will use the `CourseManagementJDBC`
    project we created in [Chapter 4](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Database Applications*, to get started. Recall that in [Chapter
    4](https://cdp.packtpub.com/java_ee_development_with_eclipse___third_edition/wp-admin/post.php?post=378&action=edit#post_216), *Creating
    JEE Database Applications*, we deployed this project in the Tomcat server. Perform
    the following steps to import a project into the new workspace for this chapter
    and configure Tomcat:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the `CourseManagementJDBC` project from the [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating
    JEE Applications with EJB,* project folder to the current workspace. Import the
    project into the new workspace (open the File | Import menu and then select Maven
    | Existing Maven Projects).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure Tomcat, as described in the *Configuring Tomcat in Eclipse*section
    in [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Introducing
    JEE and Eclipse*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the application is added to the server and runs as expected. See the
    *Running JSP in Tomcat* section in [Chapter 2](part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating a Simple JEE Web Application*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `admin` folder from `CourseManagementMavenWebApp` (see the previous
    section in this chapter) to `src/main/webapp` in the `CourseManagementJDBC` project.
    So, the code to protect the admin folder is the same for projects in GlassFish
    and Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, now you should have the `CourseManagementJDBC` project and Tomcat configured
    in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now modify `web.xml` to add security constraints, as we did in the
    previous section for GlassFish:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'There are two differences in the preceding configuration compared with the
    same for GlassFish:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no need to map `role-name` to group names as we did in GlassFish. Therefore,
    the role name is changed from `admin-role` to just `admin` in `<auth-constaint>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no need for the `<realm-name>` tag in `<login-config>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s now configure the JDBC realm in Tomcat by adding the `<realm>` tag in
    `server.xml`. If you are using Tomcat configured in Eclipse to run the application,
    then you can access `server.xml` by expanding the Servers node in Project Explorer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00271.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: Access of server.xml in the Tomcat server configured in Eclipse'
  prefs: []
  type: TYPE_NORMAL
- en: If you are running Tomcat outside Eclipse, then you will find `server.xml` at
    `$CATALINA_BASE/conf/server.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following realm tag in `server.xml`, inside the `<Engine defaultHost="localhost"
    name="Catalina">` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The Tomcat admin module needs to access our MySQL database, so we need to make
    the MySQL JDBC driver available to the admin module. Copy the MySQL JDBC driver
    in `<tomcat-install-dir>/lib`. You can download the driver from [https://dev.mysql.com/downloads/connector/j/](https://dev.mysql.com/downloads/connector/j/),
    if you haven't already done so.
  prefs: []
  type: TYPE_NORMAL
- en: That is all that is required to protect folders in Tomcat. Restart the server
    and browse to `http://localhost:8080/CourseManagementJDBC/admin/admin.jsp`. You
    should see the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Securing servlets using annotations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So far, we have seen declarative syntax for specifying security constraints;
    that is, by specifying `<security-constraint>` in `web.xml`. However, security
    constraints can also be specified using Java annotations, specifically for servlets.
    In this section, we will create `AdminServlet` and secure it with annotations.
    Follow the steps in the previous section to import the `CourseManagementJDBC`
    project from `Chapter09`, but rename it `CourseManagementJDBC-SecureAnnotations`,
    and import it into the workspace. Then, add only `<login-config>` in `web.xml`,
    but do not specify `<security-constraint>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have copied `login.jsp` and `login-error.jsp`, as described in
    the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now create a servlet named `AdminServlet` in the `packt.book.jee.eclipse.ch4.servlet`
    package, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`@ServletSecurity(@HttpConstraint(rolesAllowed = "admin"))` specifies the security
    constraint for the servlet. With this annotation, we are allowing only users in
    the admin role to access the servlet. If you browse to `http://localhost:8080/CourseManagementJDBC-SecurityAnnotations/AdminServlet`,
    you should see the login page.'
  prefs: []
  type: TYPE_NORMAL
- en: Securing web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The process of securing web services is similar to that of protecting a web
    URL, and we have seen two examples of that in previous sections. We specify `<security-constraint>`
    and `<login-config>` in `web.xml`. Let’s see how to protect the REST web service
    we developed in [Chapter 9](part0176.html#57R300-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating Web Services:*
  prefs: []
  type: TYPE_NORMAL
- en: Copy and import the `CourseManagementREST` and `CourseManagementRESTClient`
    projects from `Chapter09` into the workspace for this chapter. As the names suggests,
    the first project is the REST service, and the second project is a standalone
    client application that calls the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy the `CourseManagementREST` project in Tomcat (see the previous section
    for details on how to do this).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure the `testGetCoursesJSON` method is called from the `main` method in `CourseManagementClient.java`
    from the *CourseManagementRESTClient* project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application (right-click on the file in Project Explorer and select
    Run As | Java Application), and verify that the service is working fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To secure the web service using basic authentication, add the following configuration
    in `web.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: With the above configuration, we are protecting any URL containing `/services/`.
    We have also specified that only the admin role can access this URL and the method
    of authentication is BASIC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the `<Realm>` configuration in `server.xml` of Tomcat, as described
    in the previous section. If you run `CourseManagementClient.java` at this point,
    you will get an Unauthorized error. This is because the client application is
    not sending the authentication information—that is, the username and password—along
    with the `GET` request. For the basic authentication method, this information
    should be passed in the `authorization` header. The value of this header parameter
    should be set as `Basic`, followed by the base64-encoded `username:password` string;
    for example, `authorization: Basic dXNlcjE6dXNlcjFfcGFzcw==`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding header, `dXNlcjE6dXNlcjFfcGFzcw==` is the base64-encoded format
    of the `user1:user1_pass` string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now modify the `testGetCoursesJSON` method in `CourseManagementClient.java`
    to pass the preceding header information. Here is the code you need to add just
    before checking the response status:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `java.util.Base64` is available in JDK 1.8 onward. If you are using
    a version lower than 1.8, you can use `org.apache.commons.codec.binary.Base64`
    from Apache `commons-codec`. Add the following dependency in `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the project and select Run As | Maven Install. Then, encode
    `String` by calling:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: When you run the application now, the web service should execute without any
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: Security enhancements in JEE 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JEE 8 has incorporated Java EE Security API 1.0 (JSR 375, [https://javaee.github.io/security-spec/](https://javaee.github.io/security-spec/)).
    Enhancements in these APIs are broadly classed into four categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for the Servlet 4.0 authentication mechanism. You can specify the type
    of authentication in servlets using annotations. For example, `@BasicAuthenticationMechanismDefinition`
    for basic authentication, `@FormAuthenticationMechanismDefinition` for form-based
    authentication, and `@CustomFormAuthenticationMechanismDefinition` for custom
    authentication. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism](https://javaee.github.io/security-spec/spec/jsr375-spec.html#authentication-mechanism).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity Store APIs. By implementing the Identity Store interface, you can specify
    how user, password, and group information is made available to JEE authentication
    and authorization APIs. You can make your security-related code portable across
    JEE 8 containers by implementing this interface. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_introduction_2).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New `SecurityContext` APIs provide consistent APIs for acquiring information
    about users and roles. For more information, refer to [https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context](https://javaee.github.io/security-spec/spec/jsr375-spec.html#security-context).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new `HttpAuthenticationMechanism` API gives you complete control over how
    you want to implement security in your application programmatically. For more
    information, refer to [https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html](https://javaee.github.io/security-api/apidocs/javax/security/enterprise/authentication/mechanism/http/HttpAuthenticationMechanism.html).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will not cover all the preceding enhancements in this chapter, but we will
    take a look at the first three APIs in some detail.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen, in the previous sections of this chapter, how configuration of
    security is not uniform across containers. Specifically, the mapping of roles
    to groups is not uniform. This problem can be addressed by using new JEE 8 security
    APIs. Let's see how this can be done by developing an application. Refer to the `CourseManagementMavenWebApp-jee8` project in
    the source code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing portable security in JEE 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will modify `CourseManagementMavenWebApp` from [Chapter 7](part0129.html#3R0OI0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Applications with EJB*, in this section. This project was part of
    the EJB `CourseManagementMavenEAR`project, but in this section, we will work with `CourseManagementMavenWebApp`
    independently. Copy the `CourseManagementMavenWebApp` project from `Chapter07`,
    as `CourseManagementMavenWebApp-jee8` in the Eclipse workspace for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will modify this project to provide the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AdminServlet` is a protected servlet requiring login. We will implement the
    basic authentication'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are three possible user roles: admin, manager, and user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only users in the admin role can see the admin page, served by `AdminServlet`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only users in the manager role can see the management page, served by `ManagementServlet`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JEE 8 security APIs require **Contexts and Dependency Injection** (**CDI**)
    to be enabled in the application. We just need to create an empty `beans.xml`
    file in the `src/main/webapp/WEB-INF` folder to enable CDI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to add the following Maven dependency in `pom.xml` to make the
    JEE 8 APIs available in the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create a class called `ApplicationConfig` (in the `packt.book.jee.eclipse.ch7.web.servlet`
    package) to declare all user roles allowed in the application. Here is the source
    code for the `ApplicationConfig` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create two servlets, `AdminServlet` and `ManagementServlet`, in
    the `packt.book.jee.eclipse.ch7.web.servlet` package. If you create these classes
    using the Eclipse wizard, then it adds the servlet declarations and mappings in
    `web.xml`. If you are not using the Eclipse wizard, then either add the declarations
    and mappings manually, or add the `@WebServlet` annotation in the servlet classes. Here
    is the source code for `AdminServlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The servlet allows access to only the admin and manager roles, using the `@ServletSecurity`
    annotation. The servlet also specifies the basic authentication type using `@BasicAuthenticationMechanismDefinition`.
    We also ask the JEE container to inject an instance of `SecurityContext`, which
    is used in the `doGet` method to check the user's role. If the user is in the manager
    role, then the request is forwarded to `ManagementServlet`, otherwise, access
    is granted to the current servlet. Note the call to `securityContext.isCallerInRole`
    to check the user's role.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the source code for `ManagementServlet`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The preceding servlet also uses basic authentication, and allows access only to
    users in the manager role.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the preceding annotations, no declarative configuration is required for `web.xml`
    or any custom container-specific file. But, how do we tell security APIs who are
    valid users and roles? We do that by implementing the `IdentityStore` interface.
    Create the `SimpleMapIdentityStore` class in the `packt.book.jee.eclipse.ch7.web.servlet`
    package. This class should implement the `IdentityStore` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: It is important that the preceding class is annotated with `@ApplicationScoped`,
    so that it is available throughout the application, and CDI can inject it. We
    have hardcoded users and roles in a `HashMap` in the preceding class, but you
    can write the code to get users and roles from any source, such as a database,
    LDAP, or a file. In the application, there can be more than one `IdentityStore`.
    The container would call the  `validate` method of each one. In the `validate`
    method, we are first verifying that the username and password are valid, and then
    returning an instance of `CredentialValidationResult`, with the roles of the user
    attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: Build the application (right-click on the project and select Run As | Maven
    Install), and deploy it in the GlassFish 5 Server, as described in previous sections.
    Make sure the context of the application is set to `/CourseManagementMavenWebApp-jee8`.
    You can verify this on the GlassFish admin page by editing the deployed application
    and verifying the value of the Context Root field.  Then browse to `http://localhost:8080/CourseManagementMavenWebApp-jee8/AdminServlet`.
    If you log in with user1 credentials, then the admin page will be displayed. If
    you log in as user3, then the management page will be displayed. Access to all
    other users is blocked. You would need to close the browser window to try to log
    in with different users, because once logged in, the user credentials are remembered
    till the session is invalidated. The application can be easily extended to add
    a logout option, as we did in previous sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, we have created a custom identity store. You can implement
    any code in this to acquire user information, from either a database or LDAP.
    But, JEE security APIs provide built-in annotations for accessing a database and
    LDAP as identity stores; that is, `@DatabaseIdentityStoreDefinition` and `@LdapIdentityStoreDefinition`.
    For example, we could modify the `ApplicationConfig` class to declare a database
    identity store as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We need to pass the JNDI lookup name for the JDBC resource, which is `jdbc/CourseManagement`,
    and SQL queries to validate the username and password and to get groups. These
    are similar to the SQL queries we configured when creating a Realm on the GlassFish
    admin page, but with the new security APIs, making the configuration more portable.
    See [https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans](https://javaee.github.io/security-spec/spec/jsr375-spec.html#_annotations_and_built_in_identitystore_beans)
    for more details on `IdentityStore` annotations.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, we have used the basic authentication type. But,
    you can use form-based authentication using the `@FormAuthenticationMechanismDefinition`
    annotation. For example, we could replace `@BasicAuthenticationMechanismDefinition`
    with  `@FormAuthenticationMechanismDefinition`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This configuration is similar to `<form-login-config>`, which we configured
    in `web.xml` in earlier examples.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the new security APIs work mostly on Java classes, such as servlets,
    EJBs, and beans, but if you want to protect JSP pages, then you need to use the
    declarative configuration we learned in previous sections.
  prefs: []
  type: TYPE_NORMAL
- en: Security in JEE is a very large topic, which can't be covered in a book of generic
    nature. The scope of this chapter is limited to securing JEE resources with a
    username and password. For detailed information on security in JEE, refer to [https://javaee.github.io/tutorial/security-intro.html](https://javaee.github.io/tutorial/security-intro.html).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to secure resources represented by URLs in JEE
    applications. The process to secure resources declaratively is not completely
    generic in JEE; part of it is common across all servers, specifically configurations
    in `web.xml`. Configuration of declarative security realms differs across servers.
    However, JEE 8 has added new Java EE Security APIs that make annotation-based
    configuration portable for Java classes.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to secure folders in GlassFish and Tomcat servers. We also learned
    how to secure RESTful web services and invoke them with security credentials in
    a client application.
  prefs: []
  type: TYPE_NORMAL
