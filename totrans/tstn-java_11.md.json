["```java\n/* This is a single line comment */\n/* This is a multiple line\n    Java comment */\n```", "```java\n System.out.println(\"Moose \"/* + x */);\n```", "```java\n/* Comment 1 /* Comment 2 */ end of comment 1 */\n```", "```java\n// Meaningless example\nint x = 4;\nint z = 6;\nint y = x * z; // Initializing y with x times z\n```", "```java\npackage com.kenfogel.javadocsexample;\n/**\n * This is an example of using Javadocs in your source\n * code. It is only used for commenting a class, a method,\n * or a public field. It cannot be used inline. It begins\n * with a forward slash followed by two asterisks.\n *\n * You can inline certain HTML designations as follows:\n * <p>\n * <b>bold</b></p>\n * <p>\n * paragraph</p>\n * <p>\n * <i>italic</i></p>\n *\n * You can even create a list:\n * <ul>\n * <li>First item in the list\n * <li>Second item in the list\n * </ul>\n *\n * There is a lot of discussion on whether the\n * {@literal @version} tag should be used or whether the\n    version should come from a repo such as Git.\n *\n * @version 1.0\n * @author Ken Fogel\n */\npublic class JavaDocsExample {\n    /**\n     * This is a private field so this comment will\n     * not appear in the HTML file.\n     */\n    private final String name;\n    /**\n     * This is a public field, so this comment, written\n     * above the field, will appear using /** to start\n     * the comment.\n     */\n    public final int number;\n    /**\n     * In the method's Javadocs, list all the method\n     * parameters with the {@literal @param} tag. That this\n     * is also a constructor and is recognized as the\n     * method has the same name as the class and does not\n     * have a return type.\n     *\n     * @param name: The user's name\n     * @param number: The answer to the ultimate question\n     */\n    public JavaDocsExample(String name, int number) {\n        this.name = name;\n        this.number = number;\n    }\n    /**\n     * While you can and should comment private methods as\n     * Javadocs, they will not appear on the HTML page.\n     * Only public methods appear in the Javadocs.\n     *\n     * @param day The day of the week that will be\n     * displayed\n     * @return The string to display\n     */\n    private String constructMessage(String day) {\n        return name + \" \" + number + \" \" + day;\n    }\n    /**\n     * Here is a public method whose Javadoc block will\n     * appear in the HTML.\n     *\n     * @param day The day of the week\n     */\n    public void displayTheMessage(String day) {\n        System.out.printf(\"%s%n\", constructMessage(day));\n    }\n    /**\n     * Here is the method where the program will begin:\n     *\n     * @param args values passed at the command line\n     */\n    public static void main(String[] args) {\n        new JavaDocsExample(\n                \"Ken\", 42).displayTheMessage(\"Wednesday\");\n    }\n}\n```", "```java\njavadoc -d docs\n```", "```java\njavadoc -d docs -sourcepath C:\\dev\\PacktJava\\Transitioning-to-java\\JavadocsExample\\src\\main\\java\n```", "```java\njavadoc -d docs -sourcepath C:\\dev\\PacktJava\\Transitioning-to-Java\\JavaDocsExample\\src\\main\\java -subpackages com:org\n```", "```java\npublic class JULDemoDefaultConfig {\n```", "```java\n    private static final Logger LOG =\n    Logger.getLogger(JULDemoDefaultConfig.class.getName());\n```", "```java\n    public void perform() {\n        LOG.log(Level.FINEST,\n            \"JUL default-Using LOG.log at Level.FINEST\");\n        LOG.log(Level.FINER,\n            \"JUL default-Using LOG.log at Level.FINER\");\n        LOG.log(Level.FINE,\n            \"JUL default-Using LOG.log at Level.FINE\");\n        LOG.log(Level.INFO,\n            \"JUL default-Using LOG.log at Level.INFO\");\n        LOG.log(Level.WARNING,\n            \"JUL default-Using LOG.log at Level.WARNING\");\n```", "```java\n        try {\n```", "```java\n            throw new Exception(\n                   \"JUL default config exception\");\n        } catch (Exception ex) {\n            LOG.log(Level.SEVERE,\n          \"JUL default-Using LOG.log at Level.SEVERE\", ex);\n        }\n    }\n    public static void main(String[] args) {\n        new JULDemoDefaultConfig().perform();\n    }\n}\n```", "```java\nprivate static final Logger LOG =\n    Logger.getLogger(JULDemoDefaultConfig.class.getName());\n```", "```java\nprivate static final Logger LOG;\nstatic {\n```", "```java\n    try (InputStream is =\n            retrieveURLOfJarResource(\"logging.properties\").\n            openStream()) {\n        LogManager.getLogManager().readConfiguration(is);\n    } catch (Exception e) {\n        Logger.getAnonymousLogger().severe(\n              \"Unable to load config\\nProgram is exiting\");\n        System.exit(1);\n     }\n     LOG = Logger.getLogger(\n         JULDemoCustomConfig.class.getName());\n    }\n```", "```java\nhandlers= java.util.logging.ConsoleHandler\n```", "```java\n.level= INFO\n```", "```java\njava.util.logging.FileHandler.pattern = %h/java%u.log\njava.util.logging.FileHandler.limit = 50000\n```", "```java\njava.util.logging.FileHandler.count = 1\n```", "```java\njava.util.logging.FileHandler.maxLocks = 100\n```", "```java\njava.util.logging.FileHandler.formatter =\n                java.util.logging.XMLFormatter\n```", "```java\njava.util.logging.ConsoleHandler.level = INFO\n```", "```java\njava.util.logging.ConsoleHandler.formatter =\n                java.util.logging.SimpleFormatter\n```", "```java\n    handlers= java.util.logging.FileHandler,\n              java.util.logging.ConsoleHandler\n    ```", "```java\n    java.util.logging.ConsoleHandler.level = ALL\n    java.util.logging.FileHandler.level = ALL\n    ```", "```java\njava.util.logging.FileHandler.pattern =\n                          %h/loggingdemo-JUL_%g.log\n```", "```java\njava.util.logging.FileHandler.count = 3\n```", "```java\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-api</artifactId>\n            <version>2.19.0</version>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.logging.log4j</groupId>\n            <artifactId>log4j-core</artifactId>\n            <version>2.19.0</version>\n        </dependency>\n```", "```java\nprivate static final Logger LOG =\n                LogManager.getLogger(Log4jDemo.class);\n```", "```java\n    public void perform() {\n        LOG.trace(\"log4j2-Level 1: I am a trace\");\n        LOG.debug(\"log4j2-Level 2: I am a debug\");\n        LOG.info(\"log4j2-Level 3: I am an info\");\n        LOG.warn(\"log4j2-Level 4: I am a warning\");\n        try {\n            throw new Exception(\"log4j2 exception\");\n        } catch (Exception ex) {\n            LOG.error(\"log4j2-Level 5: I am an error\", ex);\n        }\n```"]