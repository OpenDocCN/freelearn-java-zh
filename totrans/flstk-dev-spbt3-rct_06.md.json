["```java\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-data-rest'\n    **implementation** **'org.springframework.boot:spring-boot-starter-security'**\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\n    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    **testImplementation** **'org.springframework.security:spring-security-test'**\n} \n```", "```java\npackage com.packt.cardatabase;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.\n  EnableWebSecurity;\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n} \n```", "```java\n// SecurityConfig.java\npackage com.packt.cardatabase;\n**import** **org.springframework.context.annotation.Bean;**\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.\n  EnableWebSecurity;\n**import** **org.springframework.security.core.userdetails.User;**\n**import** **org.springframework.security.core.userdetails.UserDetails;**\n**import** **org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;**\n**import** **org.springframework.security.crypto.password.PasswordEncoder;**\n**import** **org.springframework.security.provisioning.****InMemoryUserDetailsManager;**\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    **@Bean**\n    **public** **InMemoryUserDetailsManager** **userDetailsService****()** **{**\n        **UserDetails****user****=** **User.builder().username(****\"user\"****).**\n            **password(passwordEncoder().encode(****\"password\"****))**\n            **.roles(****\"USER\"****).build();**\n        **return****new****InMemoryUserDetailsManager****(user);**\n    **}**\n    **@Bean**\n    **public** **PasswordEncoder** **passwordEncoder****()** **{**\n        **return****new****BCryptPasswordEncoder****();**\n    **}**\n} \n```", "```java\n    package com.packt.cardatabase.domain;\n    import jakarta.persistence.Column;\n    import jakarta.persistence.Entity;\n    import jakarta.persistence.GeneratedValue;\n    import jakarta.persistence.GenerationType;\n    import jakarta.persistence.Id;\n    @Entity\n    public class AppUser {\n        @Id\n        @GeneratedValue(strategy=GenerationType.AUTO)\n        @Column(nullable=false, updatable=false)\n        private Long id;\n\n        @Column(nullable=false, unique=true)\n        private String username;\n\n        @Column(nullable=false)\n        private String password;\n\n        @Column(nullable=false)\n        private String role;\n\n    // Constructors, getters and setters    \n    } \n    ```", "```java\n     public AppUser() {}\n        public AppUser(String username, String password, String role) {\n            super();\n            this.username = username;\n            this.password = password;\n            this.role = role;\n        } \n    ```", "```java\n     public Long getId() {\n            return id;\n        }\n        public void setId(Long id) {\n            this.id = id;\n        }\n        public String getUsername() {\n            return username;\n        }\n        public void setUsername(String username) {\n            this.username = username;\n        }\n        public String getPassword() {\n            return password;\n        }\n        public void setPassword(String password) {\n            this.password = password;\n        }\n        public String getRole() {\n            return role;\n        }\n        public void setRole(String role) {\n            this.role = role;\n        } \n    ```", "```java\n    package com.packt.cardatabase.domain;\n    import java.util.Optional;\n    import org.springframework.data.repository.CrudRepository;\n    public interface AppUserRepository extends CrudRepository\n       <AppUser, Long> {\n        Optional<AppUser> findByUsername(String username);\n      } \n    ```", "```java\n    package com.packt.cardatabase.service;\n    import java.util.Optional;\n    import org.springframework.security.core.userdetails.User.\n      UserBuilder;\n    import org.springframework.security.core.userdetails.UserDetails;\n    import org.springframework.security.core.userdetails.\n      UserDetailsService;\n    import org.springframework.security.core.userdetails.\n      UsernameNotFoundException;\n    import org.springframework.stereotype.Service;\n    import com.packt.cardatabase.domain.AppUser;\n    import com.packt.cardatabase.domain.AppUserRepository;\n    @Service\n    public class UserDetailsServiceImpl implements UserDetailsService {\n      private final AppUserRepository repository;\n    public UserDetailsServiceImpl(AppUserRepository repository) {\n        this.repository = repository;\n    }\n        @Override\n        public UserDetails loadUserByUsername(String username) throws\n        UsernameNotFoundException {\n            Optional<AppUser> user = repository.findByUsername(username);\n            UserBuilder builder = null;\n            if (user.isPresent()) {\n                AppUser currentUser = user.get();\n                builder = org.springframework.security.core.userdetails.\n                          User.withUsername(username);\n                builder.password(currentUser.getPassword());\n                builder.roles(currentUser.getRole());\n            } else {\n                throw new UsernameNotFoundException(\"User not found.\");\n            }\n            return builder.build();\n        }\n    } \n    ```", "```java\n    package com.packt.cardatabase;\n    import org.springframework.context.annotation.Configuration;\n    import org.springframework.context.annotation.Bean;\n    import org.springframework.security.config.annotation.\n      authentication.builders.AuthenticationManagerBuilder;\n    import org.springframework.security.config.annotation.\n      web.configuration.EnableWebSecurity;\n    import org.springframework.security.crypto.bcrypt.\n      BCryptPasswordEncoder;\n    import com.packt.cardatabase.service.UserDetailsServiceImpl;\n    import org.springframework.security.crypto.password.PasswordEncoder;\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n        private final UserDetailsServiceImpl userDetailsService;\n        public SecurityConfig(UserDetailsServiceImpl userDetailsService) {\n            this.userDetailsService = userDetailsService;\n        }\n      public void configureGlobal (AuthenticationManagerBuilder auth)\n        throws Exception {\n          auth.userDetailsService(userDetailsService)\n          .passwordEncoder(new BCryptPasswordEncoder());\n        }\n        @Bean\n        public PasswordEncoder passwordEncoder() {\n            return new BCryptPasswordEncoder();\n        }\n    } \n    ```", "```java\n    private final CarRepository repository;\n    private final OwnerRepository orepository;\n    **private****final** **AppUserRepository urepository;**\n    public CardatabaseApplication(CarRepository repository, OwnerRepository orepository**, AppUserRepository urepository**) {\n        this.repository = repository;\n        this.orepository = orepository;\n        **this****.urepository = urepository;**\n    } \n    ```", "```java\n     @Override\n        public void run(String... args) throws Exception {\n            // Add owner objects and save these to db\n            Owner owner1 = new Owner(\"John\", \"Johnson\");\n            Owner owner2 = new Owner(\"Mary\", \"Robinson\");\n            orepository.saveAll(Arrays.asList(owner1, owner2));\n            repository.save(new Car(\n                                \"Ford\", \"Mustang\", \"Red\", \"ADF-1121\",\n                                 2023, 59000, owner1));\n            repository.save(new Car(\n                                \"Nissan\", \"Leaf\", \"White\", \"SSJ-3002\",\n                                2020, 29000, owner2));\n            repository.save(new Car(\n                                \"Toyota\", \"Prius\", \"Silver\", \"KKO-0212\",\n                                2022, 39000, owner2));\n            // Fetch all cars and log to console\n            for (Car car : repository.findAll()) {\n                logger.info(car.getBrand() + \" \" + car.getModel());\n            }\n            **// Username: user, password: user**\n            **urepository.save(****new****AppUser****(****\"user\"****,**\n                **\"$2a$10$NVM0n8ElaRgg7zWO1CxUdei7vWoPg91Lz2aYavh9.**\n                **f9q0e4bRadue\"****,****\"****USER\"****));**\n            **// Username: admin, password: admin**\n            **urepository.save(****new****AppUser****(****\"admin\"****,**\n                **\"$2a$10$8cjz47bjbR4Mn8GMg9IZx.vyjhLXR/SKKMSZ9.**\n                **mP9vpMu0ssKi8GW\"****,** **\"ADMIN\"****));**\n        } \n    ```", "```java\n    package com.packt.cardatabase.domain;\n    import java.util.Optional;\n    import org.springframework.data.repository.CrudRepository;\n    **import** **org.springframework.data.rest.core.annotation.**\n     **RepositoryRestResource;**\n    **@RepositoryRestResource(exported = false)**\n    public interface AppUserRepository extends CrudRepository\n       <AppUser, Long> {\n        Optional<AppUser> findByUsername(String username);\n      } \n    ```", "```java\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c \n```", "```java\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-data-rest'\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n    **implementation** **'io.jsonwebtoken:jjwt-api:0.11.5'**\n    **runtimeOnly** **'io.jsonwebtoken:jjwt-impl:0.11.5'****,** **'io.jsonwebtoken:jjwt-**\n      **jackson:0.11.5'**\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\n    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n    testImplementation 'org.springframework.security:spring-security-test'\n} \n```", "```java\n    Authorization: Bearer <token> \n    ```", "```java\n    package com.packt.cardatabase.service;\n    import org.springframework.stereotype.Component;\n    @Component\n    public class JwtService {\n      static final long EXPIRATIONTIME = 86400000;   // 1 day in ms. Should be shorter in production.\n      static final String PREFIX = \"Bearer\";\n    } \n    ```", "```java\n    package com.packt.cardatabase.service;\n    **import** **io.jsonwebtoken.Jwts;**\n    **import** **io.jsonwebtoken.SignatureAlgorithm;**\n    **import** **io.jsonwebtoken.security.Keys;**\n    **import** **java.security.Key;**\n    **import** **org.springframework.http.HttpHeaders;**\n    **import** **org.springframework.stereotype.Component;**\n    **import** **jakarta.servlet.http.HttpServletRequest;**\n    **import** **java.util.Date;**\n    @Component\n    public class JwtService {\n      static final long EXPIRATIONTIME = 86400000;   // 1 day in ms. Should be shorter in production.\n      static final String PREFIX = \"Bearer\";\n      **// Generate secret key. Only for demonstration purposes.**\n      **// In production, you should read it from the application **  **// configuration.**\n      **static****final****Key****key****=** **Keys.secretKeyFor (SignatureAlgorithm.**    **HS256);**\n      **// Generate signed JWT token**\n      **public** **String** **getToken****(String username)** **{**\n        **String****token****=** **Jwts.builder()**\n        **.setSubject(username)**\n        **.setExpiration(****new****Date****(System.currentTimeMillis() +**                            **EXPIRATIONTIME))**\n        **.signWith(key)**\n        **.compact();** \n        **return** **token;**\n      **}**\n      **// Get a token from request Authorization header,**\n      **// verify the token, and get username**\n      **public** **String** **getAuthUser****(HttpServletRequest request)** **{**\n        **String****token****=** **request.getHeader**\n            **(HttpHeaders.AUTHORIZATION);**\n        **if** **(token !=** **null****) {**\n          **String****user****=** **Jwts.parserBuilder()**\n          **.setSigningKey(key)**\n          **.build()**\n          **.parseClaimsJws(token.replace(PREFIX,** **\"\"****))**\n          **.getBody()**\n          **.getSubject();**\n          **if** **(user !=** **null****)**\n            **return** **user;**\n        **}**\n        **return****null****;**\n      **}**\n    } \n    ```", "```java\n    package com.packt.cardatabase.domain;\n    public record AccountCredentials(String username, String password) {} \n    ```", "```java\n    package com.packt.cardatabase.web;\n    import org.springframework.http.HttpHeaders;\n    import org.springframework.http.ResponseEntity;\n    import org.springframework.security.authentication.AuthenticationManager;\n    import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n    import org.springframework.security.core.Authentication;\n    import org.springframework.web.bind.annotation.RequestBody;\n    import org.springframework.web.bind.annotation.PostMapping;\n    import org.springframework.web.bind.annotation.RestController;\n    import com.packt.cardatabase.domain.AccountCredentials;\n    import com.packt.cardatabase.service.JwtService;\n    @RestController\n    public class LoginController {\n        private final JwtService jwtService;\n        private final AuthenticationManager authenticationManager;\n        public LoginController(JwtService jwtService,\n          AuthenticationManager authenticationManager) {\n            this.jwtService = jwtService;\n            this.authenticationManager = authenticationManager;\n        }\n        @PostMapping(\"/login\")\n        public ResponseEntity<?> getToken(@RequestBody\n          AccountCredentials credentials) {\n        // Generate token and send it in the response Authorization\n        // header\n        }\n    } \n    ```", "```java\n    // LoginController.java\n    @PostMapping(\"/login\")\n    public ResponseEntity<?> getToken(@RequestBody AccountCredentials\n       credentials) {\n        UsernamePasswordAuthenticationToken creds = new\n          UsernamePasswordAuthenticationToken(credentials.username(),                                          credentials.password());\n        Authentication auth = authenticationManager.authenticate(creds);\n        // Generate token\n        String jwts = jwtService.getToken(auth.getName());\n        // Build response with the generated token\n        return ResponseEntity.ok().header(HttpHeaders.AUTHORIZATION,\n                       \"Bearer\" + jwts).header(HttpHeaders.\n                       ACCESS_CONTROL_EXPOSE_HEADERS,\n                       \"Authorization\").build();\n    } \n    ```", "```java\n    package com.packt.cardatabase;\n    **import** **org.springframework.context.annotation.Bean;**\n    import org.springframework.context.annotation.Configuration;\n    **import** **org.springframework.security.authentication.****AuthenticationManager;**\n    **import** **org.springframework.security.config.annotation.**  **authentication.configuration.AuthenticationConfiguration;**\n    import org.springframework.security.config.annotation.  authentication.builders.AuthenticationManagerBuilder;\n    import org.springframework.security.config.annotation.  authentication.configuration.AuthenticationConfiguration;\n    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\n    import com.packt.cardatabase.service.UserDetailsServiceImpl;\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n        private final UserDetailsServiceImpl userDetailsService;\n        public SecurityConfig(UserDetailsServiceImpl userDetailsService){\n            this.userDetailsService = userDetailsService;\n        }\n        public void configureGlobal(AuthenticationManagerBuilder auth)\n          throws Exception {\n            auth.userDetailsService(userDetailsService)\n              .passwordEncoder(new BCryptPasswordEncoder());\n        }\n        @Bean\n        public PasswordEncoder passwordEncoder() {\n            return new BCryptPasswordEncoder();\n        }\n\n        **@Bean**\n        **public** **AuthenticationManager** **uthenticationManager****(**\n          **AuthenticationConfiguration authConfig)****throws** **Exception {**\n            **return** **authConfig.getAuthenticationManager();**\n        **}**\n    } \n    ```", "```java\n    // SecurityConfig.java\n    // Add the following import\n    import org.springframework.security.web.SecurityFilterChain;\n    // Add filterChain method\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws\n      Exception {\n        http.csrf((csrf) -> csrf.disable())\n            .sessionManagement((sessionManagement) -> sessionManagement.            sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests((authorizeHttpRequests) ->            authorizeHttpRequests.requestMatchers(HttpMethod.POST,            \"/login\").permitAll().anyRequest().authenticated());\n        return http.build();\n    } \n    ```", "```java\n    package com.packt.cardatabase;\n    import org.springframework.http.HttpHeaders;\n    import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n    import org.springframework.security.core.Authentication;\n    import org.springframework.security.core.context.SecurityContextHolder;\n    import org.springframework.stereotype.Component;\n    import org.springframework.web.filter.OncePerRequestFilter;\n    import com.packt.cardatabase.service.JwtService;\n    import jakarta.servlet.FilterChain;\n    import jakarta.servlet.ServletException;\n    import jakarta.servlet.http.HttpServletRequest;\n    import jakarta.servlet.http.HttpServletResponse;\n    @Component\n    public class AuthenticationFilter extends OncePerRequestFilter {\n        private final JwtService jwtService;\n        public AuthenticationFilter(JwtService jwtService) {\n            this.jwtService = jwtService;\n       }\n        @Override\n        protected void doFilterInternal(HttpServletRequest request,               HttpServletResponse response, FilterChain filterChain)\n                throws ServletException, java.io.IOException {\n            // Get token from the Authorization header\n            String jws = request.getHeader(HttpHeaders.AUTHORIZATION);\n            if (jws != null) {\n                // Verify token and get user\n                String user = jwtService.getAuthUser(request);\n                // Authenticate\n                Authentication authentication =\n                new UsernamePasswordAuthenticationToken(user, null,\n                    java.util.Collections.emptyList());\n                SecurityContextHolder.getContext()\n                    .setAuthentication(authentication);\n            }\n            filterChain.doFilter(request, response);\n        }\n    } \n    ```", "```java\n    private final UserDetailsServiceImpl userDetailsService;\n    **private****final** **AuthenticationFilter authenticationFilter;**\n    public SecurityConfig(UserDetailsServiceImpl userDetailsService**,****AuthenticationFilter authenticationFilter**) {\n        this.userDetailsService = userDetailsService;\n    **this****.authenticationFilter = authenticationFilter;**\n    } \n    ```", "```java\n    //Add the following import\n    import org.springframework.security.web.authentication.  UsernamePasswordAuthenticationFilter;\n    // Modify the filterChain method\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws   Exception {\n        http.csrf((csrf) -> csrf.disable())\n            .sessionManagement((sessionManagement) -> sessionManagement.            sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests((authorizeHttpRequests) ->            authorizeHttpRequests.requestMatchers(HttpMethod.POST,            \"/login\").permitAll().anyRequest().authenticated())\n            **.addFilterBefore(authenticationFilter,**            **UsernamePasswordAuthenticationFilter.class);**\n        return http.build();\n    } \n    ```", "```java\n    package com.packt.cardatabase;\n    import java.io.IOException;\n    import java.io.PrintWriter;\n    import jakarta.servlet.ServletException;\n    import jakarta.servlet.http.HttpServletRequest;\n    import jakarta.servlet.http.HttpServletResponse;\n    import org.springframework.http.MediaType;\n    import org.springframework.security.core.\n      AuthenticationException;\n    import org.springframework.security.web.\n      AuthenticationEntryPoint;\n    import org.springframework.stereotype.Component;\n    @Component\n    public class AuthEntryPoint implements AuthenticationEntryPoint {\n      @Override\n      public void commence(\n        HttpServletRequest request, HttpServletResponse response,\n        AuthenticationException authException) throws IOException,\n        ServletException {\n            response.setStatus (HttpServletResponse.SC_UNAUTHORIZED);\n            response.setContentType (MediaType.APPLICATION_JSON_VALUE);\n            PrintWriter writer = response.getWriter();\n            writer.println(\"Error: \" + authException.getMessage());\n      }\n    } \n    ```", "```java\n    // SecurityConfig.java\n    private final UserDetailsServiceImpl userDetailsService;\n    private final AuthenticationFilter authenticationFilter;\n    **private****final** **AuthEntryPoint exceptionHandler;**\n    public SecurityConfig(UserDetailsServiceImpl userDetailsService,   AuthenticationFilter authenticationFilter, **AuthEntryPoint **  **exceptionHandler**) {\n        this.userDetailsService = userDetailsService;\n        this.authenticationFilter = authenticationFilter;\n        **this****.exceptionHandler = exceptionHandler;**\n    } \n    ```", "```java\n    // SecurityConfig.java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws\n      Exception {\n        http.csrf((csrf) -> csrf.disable())\n            .sessionManagement((sessionManagement) ->\n                sessionManagement.sessionCreationPolicy(\n                SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests((authorizeHttpRequests) ->             authorizeHttpRequests.requestMatchers(HttpMethod.POST,            \"/login\").permitAll().anyRequest().authenticated())\n            .addFilterBefore(authenticationFilter,            UsernamePasswordAuthenticationFilter.class)\n            **.exceptionHandling((exceptionHandling) -> exceptionHandling.**            **authenticationEntryPoint(exceptionHandler));**\n        return http.build();\n    } \n    ```", "```java\n    // SecurityConfig.java\n    // Add the following imports\n    import java.util.Arrays;\n    import org.springframework.web.cors.CorsConfiguration;\n    import org.springframework.web.cors.CorsConfigurationSource;\n    import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n    // Add Global CORS filter inside the class\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        UrlBasedCorsConfigurationSource source =\n           new UrlBasedCorsConfigurationSource();\n        CorsConfiguration config = new CorsConfiguration();\n        config.setAllowedOrigins(Arrays.asList(\"*\"));\n        config.setAllowedMethods(Arrays.asList(\"*\"));\n        config.setAllowedHeaders(Arrays.asList(\"*\"));\n        config.setAllowCredentials(false);\n        config.applyPermitDefaultValues();\n        source.registerCorsConfiguration(\"/**\", config);\n        return source;\n    } \n    ```", "```java\n    // localhost:3000 is allowed\n    config.setAllowedOrigins(Arrays.asList (\"http://localhost:3000\")); \n    ```", "```java\n    // SecurityConfig.java\n    // Add the following static import\n    import static org.springframework.security.config.Customizer.withDefaults;\n    // Modify filterChain method\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws\n      Exception {\n        http.csrf((csrf) -> csrf.disable())\n            **.cors(withDefaults())**\n            .sessionManagement((sessionManagement) -> sessionManagement.            sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n            .authorizeHttpRequests((authorizeHttpRequests) -> \n                authorizeHttpRequests.requestMatchers(HttpMethod.POST,            \"/login\").permitAll().anyRequest().authenticated())\n            .addFilterBefore(authenticationFilter,            UsernamePasswordAuthenticationFilter.class)\n            .exceptionHandling((exceptionHandling) -> exceptionHandling.            authenticationEntryPoint(exceptionHandler));\n        return http.build();\n    } \n    ```", "```java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws\n   Exception {\n    http.csrf((csrf) -> csrf.disable()).cors(withDefaults())\n        .sessionManagement((sessionManagement) -> sessionManagement.            sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n        .authorizeHttpRequests((authorizeHttpRequests) -> \n            authorizeHttpRequests.requestMatchers(\"/admin/**\").hasRole             (\"ADMIN\").requestMatchers(\"/user/**\").hasRole(\"USER\")\n            .anyRequest().authenticated())\n    return http.build();\n} \n```", "```java\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n**import** **org.springframework.security.config.annotation.method.****configuration.EnableMethodSecurity;**\n@SpringBootApplication\n**@EnableMethodSecurity**\npublic class CardatabaseApplication implements CommandLineRunner {\n} \n```", "```java\n@Service\npublic class CarService {\n    @PreAuthorize(\"hasRole('USER')\")\n    public void updateCar(Car car) {\n        // This method can be invoked by user with USER role.\n    }\n    @PreAuthorize(\"hasRole('ADMIN')\")\n    public void deleteOwner(Car car) {\n        // This method can be invoked by user with ADMIN role.\n    }\n} \n```"]