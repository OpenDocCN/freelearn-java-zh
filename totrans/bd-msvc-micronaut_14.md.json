["```java\ninput {\n    tcp {\n        port => 5000\n        type => syslog\n        codec => json_lines\n    }\n}\nfilter {\n    grok {\n        match => [ \"message\", \"%{GREEDYDATA}\" ]\n    }\n    mutate {\n        add_field => { \"instance_name\" => \"%{app_name}-\n         %{host}:%{app_port}\" }\n    }\n}\noutput {\n    stdout { # This will log all messages so that we can \n     confirm that Logstash is receiving them\n        codec => rubydebug\n    }\n    elasticsearch {\n        hosts => [\n         \"${XPACK_MONITORING_ELASTICSEARCH_HOSTS}\" ]\n        user => \n         \"${XPACK_MONITORING_ELASTICSEARCH_USERNAME}\"\n        password => \n          \"${XPACK_MONITORING_ELASTICSEARCH_PASSWORD}\"\n        index => \"logstash-%{+YYYY.MM.dd}\"\n    }\n}\n```", "```java\n<dependency>\n  <groupId>net.logstash.logback</groupId>\n  <artifactId>logstash-logback-encoder</artifactId>\n  <version>6.3</version>\n</dependency>\n```", "```java\n<appender name=\"logstash\" class=\"net.logstash.logback.appender.LogstashTcpSocketAppender\">\n    <param name=\"Encoding\" value=\"UTF-8\"/>\n    <remoteHost>host.docker.internal</remoteHost>\n    <port>5000</port>\n    <encoder \n     class=»net.logstash.logback.encoder.LogstashEncoder»/>\n</appender>\n…\n<root level=\"debug\">\n    <appender-ref ref=\"logstash\"/>\n    <appender-ref ref=\"stdout\"/>\n</root>\n```", "```java\n<property scope=\"context\" name=\"app_name\" value=\"pet-owner \"/>\n<property scope=\"context\" name=\"app_port\" value=\"32581\"/>\n```", "```java\n    <!-- Distributed tracing -->\n    <dependency>\n      <groupId>io.micronaut</groupId>\n      <artifactId>micronaut-tracing</artifactId>\n      <version>${micronaut.version}</version>\n      <scope>compile</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.zipkin.brave</groupId>\n      <artifactId>brave-instrumentation-http</artifactId>\n      <version>5.12.3</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.zipkin.reporter2</groupId>\n      <artifactId>zipkin-reporter</artifactId>\n      <version>2.15.0</version>\n      <scope>runtime</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.opentracing.brave</groupId>\n      <artifactId>brave-opentracing</artifactId>\n      <version>0.37.2</version>\n      <scope>compile</scope>\n    </dependency>\n    ```", "```java\n    tracing:\n      zipkin:\n        http:\n          url: http://host.docker.internal:9411\n        enabled: true\n        sampler:\n          probability: 1\n    ```", "```java\n@Controller(\"/api\")\npublic class OwnerResourceClientController {\n    @Inject\n    OwnerResourceClient;\n    @NewSpan\n    @Post(\"/owners\")\n    public HttpResponse<OwnerDTO> \n     createOwner(@SpanTag(\"owner.dto\") OwnerDTO ownerDTO) {\n        return ownerResourceClient.createOwner(ownerDTO);\n    }\n    @NewSpan\n    @Put(\"/owners\")\n    HttpResponse<OwnerDTO> updateOwner\n     (@SpanTag(\"owner.dto\") @Body OwnerDTO ownerDTO) {\n        return ownerResourceClient.updateOwner(ownerDTO);\n    }\n    ...\n}\n```", "```java\n@Post(\"/owners\")\n@ExecuteOn(TaskExecutors.IO)\n@ContinueSpan\npublic HttpResponse<OwnerDTO> createOwner(@Body OwnerDTO ownerDTO) throws URISyntaxException {\n    ...\n}\n```", "```java\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n  external_labels:\n      monitor: 'pet-clinic-monitor'\nscrape_configs:\n  - job_name: 'prometheus'\n    scrape_interval: 10s\n    static_configs:\n         - targets: ['host.docker.internal:9090','node-\n            exporter:9110']\n  - job_name: 'micronaut'\n    metrics_path: '/metrics'\n    scrape_interval: 10s\n    static_configs:\n         - targets: ['host.docker.internal:32581', 'host.docker.internal:32582', 'host.docker.internal:32583', 'host.docker.internal:32584']\n```", "```java\n<!-- Micrometer -->\n<dependency>\n  <groupId>io.micronaut.micrometer</groupId>\n  <artifactId>micronaut-micrometer-core</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.micronaut.micrometer</groupId>\n  <artifactId>micronaut-micrometer-registry-\n   prometheus</artifactId>\n</dependency>\n<dependency>\n  <groupId>io.micronaut</groupId>\n  <artifactId>micronaut-management</artifactId>\n</dependency>\n```", "```java\n@RequiresMetrics\n@Controller(\"/metrics\")\npublic class PrometheusController {\n    private final PrometheusMeterRegistry;\n    @Inject\n    public PrometheusController(PrometheusMeterRegistry \n     prometheusMeterRegistry) {\n        this.prometheusMeterRegistry = \n         prometheusMeterRegistry;\n    }\n    @Get\n    @Produces(\"text/plain\")\n    public String metrics() {\n        return prometheusMeterRegistry.scrape();\n    }\n}\n```", "```java\nmicronaut:\n  ...\n  metrics:\n    enabled: true\n    export:\n      prometheus:\n        enabled: true\n        step: PT1M\n        descriptions: true\nendpoints:\n  metrics:\n    enabled: false\n  prometheus:\n    enabled: false\n```"]