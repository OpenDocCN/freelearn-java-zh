["```java\npublic class CH17Calculator {\n  public int add(int a, int b) {\n    return a + b;\n  }\n  public int subtract(int a, int b) {\n    return a - b;\n  }\n  public int multiply(int a, int b) {\n    return a * b;\n  }\n  public int divide(int a, int b) {\n    if (b == 0) {\n      throw new IllegalArgumentException(\"Division by zero\");\n    }\n    return a / b;\n  }\n}\n```", "```java\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\npublic class CH17CalculatorTest {\n  private CH17Calculator calculator;\n  @BeforeEach\n  public void setUp() {\n    calculator = new CH17Calculator();\n  }\n  @Test\n  public void testAdd() {\n    int result = calculator.add(3, 4);\n    Assertions.assertEquals(7, result);\n  }\n  @Test\n  public void testSubtract() {\n    int result = calculator.subtract(10, 5);\n    Assertions.assertEquals(5, result);\n  }\n  @Test\n  public void testMultiply() {\n    int result = calculator.multiply(2, 3);\n    Assertions.assertEquals(6, result);\n  }\n  @Test\n  public void testDivide() {\n    int result = calculator.divide(8, 2);\n    Assertions.assertEquals(4, result);\n  }\n  @Test\n  public void testDivideByZero() {\n    Assertions.assertThrows(IllegalArgumentException.class, () -> {\n      calculator.divide(1, 0);\n    });\n  }\n}\n```", "```java\n%TESTC  1 v2\n%TSTTREE2,CH17CalculatorTest,true,1,false,1,CH17CalculatorTest,,[engine:junit-jupiter]/[class:CH17CalculatorTest]\n%TSTTREE3,testMultiply(CH17CalculatorTest),false,1,false,2,testMultiply(),,[engine:junit-jupiter]/[class:CH17CalculatorTest]/[method:testMultiply()]\n%TESTS  3,testMultiply(CH17CalculatorTest)\n%TESTE  3,testMultiply(CH17CalculatorTest)\n%RUNTIME84\n```", "```java\nint result = calculator.add(3, 6);\nAssertions.assertEquals(9, result, \"3 + 6 should equal 9\");\n```", "```java\nint result = calculator.subtract(24, 8);\nAssertions.assertNotEquals(10, result, \"24 - 8 should not equal 10\");\n```", "```java\nboolean result = someCondition();\nAssertions.assertTrue(result, \"The condition should be true\");\n```", "```java\nboolean result = someCondition();\nAssertions.assertFalse(result, \"The condition should be false\");\n```", "```java\npublic void testAdd() {\n  int result = calculator.add(3, 4);\n  Assertions.assertEquals(7, result);\n}\n```"]