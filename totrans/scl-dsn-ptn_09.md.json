["```java\ncase class Student(name: String, age: Int)\n```", "```java\nclass StudentIterator(students: Array[Student]) extends Iterator[Student] {\n  var currentPos = 0\n\n  override def hasNext: Boolean = currentPos < students.size\n\n  override def next(): Student = {\n    val result = students(currentPos)\n    currentPos = currentPos + 1\n    result\n  }\n}\n```", "```java\nimport scala.collection.mutable.ListBuffer\n\nclass ClassRoom extends Iterable[Student] {\n  val students: ListBuffer[Student] = ListBuffer[Student]()\n\n  def add(student: Student): Unit = {\n    student +=: students\n  }\n\n  override def iterator: Iterator[Student] = new StudentIterator(students.toArray)\n}\n```", "```java\nobject ClassRoomExample {\n  def main(args: Array[String]): Unit = {\n    val classRoom = new ClassRoom\n    classRoom.add(Student(\"Ivan\", 26))\n    classRoom.add(Student(\"Maria\", 26))\n    classRoom.add(Student(\"John\", 25))\n    classRoom.foreach(println)\n  }\n}\n```", "```java\ntrait Notifiable {\n  def notify(message: String)\n}\n\ncase class Student(name: String, age: Int) extends Notifiable {\n  override def notify(message: String): Unit = {\n    System.out.println(s\"Student $name was notified with message:\n    '$message'.\")\n  }\n}\n\ncase class Group(name: String)\n```", "```java\ntrait Mediator {\n  def addStudentToGroup(student: Student, group: Group)\n\n  def isStudentInGroup(student: Student, group: Group): Boolean\n\n  def removeStudentFromGroup(student: Student, group: Group)\n\n  def getStudentsInGroup(group: Group): List[Student]\n\n  def getGroupsForStudent(student: Student): List[Group]\n\n  def notifyStudentsInGroup(group: Group, message: String)\n}\n```", "```java\nimport scala.collection.mutable.Map\nimport scala.collection.mutable.Set\n\nclass School extends Mediator {\n  val studentsToGroups: Map[Student, Set[Group]] = Map()\n  val groupsToStudents: Map[Group, Set[Student]] = Map()\n\n  override def addStudentToGroup(student: Student, group: Group): Unit = {\n    studentsToGroups.getOrElseUpdate(student, Set()) += group\n    groupsToStudents.getOrElseUpdate(group, Set()) += student\n  }\n\n  override def isStudentInGroup(student: Student, group: Group): Boolean =\n    groupsToStudents.getOrElse(group, Set()).contains(student) &&\n      studentsToGroups.getOrElse(student, Set()).contains(group)\n\n  override def getStudentsInGroup(group: Group): List[Student] =\n    groupsToStudents.getOrElse(group, Set()).toList\n\n  override def getGroupsForStudent(student: Student): List[Group] = studentsToGroups.getOrElse(student, Set()).toList\n\n  override def notifyStudentsInGroup(group: Group, message: String): Unit = {\n    groupsToStudents.getOrElse(group, Set()).foreach(_.notify(message))\n  }\n\n  override def removeStudentFromGroup(student: Student, group: Group): Unit = {\n    studentsToGroups.getOrElse(student, Set()) -= group\n    groupsToStudents.getOrElse(group, Set()) -= student\n  }\n}\n```", "```java\nobject SchoolExample {\n  def main(args: Array[String]): Unit = {\n    val school = new School\n    // create students\n    val student1 = Student(\"Ivan\", 26)\n    val student2 = Student(\"Maria\", 26)\n    val student3 = Student(\"John\", 25)\n    // create groups\n    val group1 = Group(\"Scala design patterns\")\n    val group2 = Group(\"Databases\")\n    val group3 = Group(\"Cloud computing\")\n    school.addStudentToGroup(student1, group1)\n    school.addStudentToGroup(student1, group2)\n    school.addStudentToGroup(student1, group3)\n    school.addStudentToGroup(student2, group1)\n    school.addStudentToGroup(student2, group3)\n    school.addStudentToGroup(student3, group1)\n    school.addStudentToGroup(student3, group2)\n    // notify\n    school.notifyStudentsInGroup(group1, \"Design patterns in Scala\n    are amazing!\")\n    // see groups\n    System.out.println(s\"$student3 is in groups:\n     ${school.getGroupsForStudent(student3)}\")\n    // remove from group\n    school.removeStudentFromGroup(student3, group2)\n    System.out.println(s\"$student3 is in groups:\n     ${school.getGroupsForStudent(student3)}\")\n    // see students in group\n    System.out.println(s\"Students in $group1 are \n     ${school.getStudentsInGroup(group1)}\")\n  }\n}\n```", "```java\ntrait Memento[T] {\n  protected val state: T\n\n  def getState(): T = state\n}\n\ntrait Caretaker[T] {\n  val states: mutable.Stack[Memento[T]] = mutable.Stack[Memento[T]]()\n}\n\ntrait Originator[T] {\n  def createMemento: Memento[T]\n\n  def restore(memento: Memento[T])\n}\n```", "```java\nclass TextEditor extends Originator[String] {\n  private var builder: StringBuilder = new StringBuilder\n\n  def append(text: String): Unit = {\n    builder.append(text)\n  }\n\n  def delete(): Unit = {\n    if (builder.nonEmpty) {\n      builder.deleteCharAt(builder.length - 1)\n    }\n  }\n\n  override def createMemento: Memento[String] = new TextEditorMemento(builder.toString)\n\n  override def restore(memento: Memento[String]): Unit = {\n    this.builder = new StringBuilder(memento.getState())\n  }\n\n  def text(): String = builder.toString\n\n  private class TextEditorMemento(val state: String) extends Memento[String]\n}\n```", "```java\nclass TextEditorManipulator extends Caretaker[String] {\n  private val textEditor = new TextEditor\n\n  def save(): Unit = {\n    states.push(textEditor.createMemento)\n  }\n\n  def undo(): Unit = {\n    if (states.nonEmpty) {\n      textEditor.restore(states.pop())\n    }\n  }\n\n  def append(text: String): Unit = {\n    save()\n    textEditor.append(text)\n  }\n\n  def delete(): Unit = {\n    save()\n    textEditor.delete()\n  }\n\n  def readText(): String = textEditor.text()\n}\n```", "```java\nobject TextEditorExample {\n  def main(args: Array[String]): Unit = {\n    val textEditorManipulator = new TextEditorManipulator\n    textEditorManipulator.append(\"This is a chapter about memento.\")\n    System.out.println(s\"The text is:\n    '${textEditorManipulator.readText()}'\")\n    // delete 2 characters\n    System.out.println(\"Deleting 2 characters...\")\n    textEditorManipulator.delete()\n    textEditorManipulator.delete()\n    // see the text\n    System.out.println(s\"The text is:\n     '${textEditorManipulator.readText()}'\")\n    // undo\n    System.out.println(\"Undoing...\")\n    textEditorManipulator.undo()\n    System.out.println(s\"The text is:\n     '${textEditorManipulator.readText()}'\")\n    // undo again\n    System.out.println(\"Undoing...\")\n    textEditorManipulator.undo()\n    System.out.println(s\"The text is: \n     '${textEditorManipulator.readText()}'\")\n  }\n}\n```", "```java\ntrait Observer[T] {\n  def handleUpdate(subject: T)\n}\n```", "```java\ntrait Observable[T] {\n  this: T =>\n  private val observers = ListBuffer[Observer[T]]()\n\n  def addObserver(observer: Observer[T]): Unit = {\n    observers.+=:(observer)\n  }\n\n  def notifyObservers(): Unit = {\n    observers.foreach(_.handleUpdate(this))\n  }\n}\n```", "```java\ncase class User(name: String) extends Observer[Post] {\n  override def handleUpdate(subject: Post): Unit = {\n    System.out.println(s\"Hey, I'm ${name}. The post got some new comments: ${subject.comments}\")\n  }\n}\n```", "```java\ncase class Comment(user: User, text: String)\n```", "```java\ncase class Post(user: User, text: String) extends Observable[Post] {\n  val comments = ListBuffer[Comment]()\n\n  def addComment(comment: Comment): Unit = {\n    comments.+=:(comment)\n    notifyObservers()\n  }\n}\n```", "```java\nobject PostExample extends LazyLogging {\n  def main(args: Array[String]): Unit = {\n    val userIvan = User(\"Ivan\")\n    val userMaria = User(\"Maria\")\n    val userJohn = User(\"John\")\n    logger.info(\"Create a post\")\n    val post = Post(userIvan, \"This is a post about the observer\n     design pattern\")\n    logger.info(\"Add a comment\")\n    post.addComment(Comment(userIvan, \"I hope you like the post!\"))\n    logger.info(\"John and Maria subscribe to the comments.\")\n    post.addObserver(userJohn)\n    post.addObserver(userMaria)\n    logger.info(\"Add a comment\")\n    post.addComment(Comment(userIvan, \"Why are you so quiet? Do you\n     like it?\"))\n    logger.info(\"Add a comment\")\n    post.addComment(Comment(userMaria, \"It is amazing! Thanks!\"))\n  }\n}\n```", "```java\ntrait State[T] {\n  def press(context: T)\n}\n```", "```java\nclass Playing extends State[MediaPlayer] {\n  override def press(context: MediaPlayer): Unit = {\n    System.out.println(\"Pressing pause.\")\n    context.setState(new Paused)\n  }\n}\n\nclass Paused extends State[MediaPlayer] {\n  override def press(context: MediaPlayer): Unit = {\n    System.out.println(\"Pressing play.\")\n    context.setState(new Playing)\n  }\n}\n```", "```java\ncase class MediaPlayer() {\n  private var state: State[MediaPlayer] = new Paused\n\n  def pressPlayOrPauseButton(): Unit = {\n    state.press(this)\n  }\n\n  def setState(state: State[MediaPlayer]): Unit = {\n    this.state = state\n  }\n}\n```", "```java\nobject MediaPlayerExample {\n  def main(args: Array[String]): Unit = {\n    val player = MediaPlayer()\n    player.pressPlayOrPauseButton()\n    player.pressPlayOrPauseButton()\n    player.pressPlayOrPauseButton()\n    player.pressPlayOrPauseButton()\n  }\n}\n```", "```java\ncase class Person(name: String, age: Int, address: String)\n```", "```java\nabstract class DataFinder[T, Y] {\n  def find(f: T => Option[Y]): Option[Y] =\n    try {\n      val data = readData()\n      val parsed = parse(data)\n      f(parsed)\n    } finally {\n      cleanup()\n    }\n\n  def readData(): Array[Byte]\n\n  def parse(data: Array[Byte]): T\n\n  def cleanup()\n}\n```", "```java\nimport org.json4s.{StringInput, DefaultFormats}\nimport org.json4s.jackson.JsonMethods\n\nclass JsonDataFinder extends DataFinder[List[Person], Person] {\n  implicit val formats = DefaultFormats\n\n  override def readData(): Array[Byte] = {\n    val stream = this.getClass.getResourceAsStream(\"people.json\")\n    Stream.continually(stream.read).takeWhile(_ != -1).map(_.toByte).toArray\n  }\n\n  override def cleanup(): Unit = {\n    System.out.println(\"Reading json: nothing to do.\")\n  }\n\n  override def parse(data: Array[Byte]): List[Person] =\n    JsonMethods.parse(StringInput(new String(data, \"UTF-8\"))).extract[List[Person]]\n}\n```", "```java\nimport com.github.tototoshi.csv.CSVReader\n\nclass CSVDataFinder extends DataFinder[List[Person], Person] {\n  override def readData(): Array[Byte] = {\n    val stream = this.getClass.getResourceAsStream(\"people.csv\")\n    Stream.continually(stream.read).takeWhile(_ != -1).map(_.toByte).toArray\n  }\n\n  override def cleanup(): Unit = {\n    System.out.println(\"Reading csv: nothing to do.\")\n  }\n\n  override def parse(data: Array[Byte]): List[Person] =\n    CSVReader.open(new InputStreamReader(new ByteArrayInputStream(data))).all().map {\n      case List(name, age, address) => Person(name, age.toInt, address)\n    }\n}\n```", "```java\nobject DataFinderExample {\n  def main(args: Array[String]): Unit = {\n    val jsonDataFinder: DataFinder[List[Person], Person] = new JsonDataFinder\n    val csvDataFinder: DataFinder[List[Person], Person] = new CSVDataFinder\n    System.out.println(s\"Find a person with name Ivan in the json:\n     ${jsonDataFinder.find(_.find(_.name == \"Ivan\"))}\")\n    System.out.println(s\"Find a person with name James in the json:\n     ${jsonDataFinder.find(_.find(_.name == \"James\"))}\")\n    System.out.println(s\"Find a person with name Maria in the csv:\n     ${csvDataFinder.find(_.find(_.name == \"Maria\"))}\")\n    System.out.println(s\"Find a person with name Alice in the csv:\n     ${csvDataFinder.find(_.find(_.name == \"Alice\"))}\")\n  }\n}\n```", "```java\nIvan,26,London\nMaria,23,Edinburgh\nJohn,36,New York\nAnna,24,Moscow\n```", "```java\n[\n  {\n    \"name\": \"Ivan\",\n    \"age\": 26,\n    \"address\": \"London\"\n  },\n  {\n    \"name\": \"Maria\",\n    \"age\": 23,\n    \"address\": \"Edinburgh\"\n  },\n  {\n    \"name\": \"John\",\n    \"age\": 36,\n    \"address\": \"New York\"\n  },\n  {\n    \"name\": \"Anna\",\n    \"age\": 24,\n    \"address\": \"Moscow\"\n  }\n]\n```", "```java\nabstract class Element(val text: String) {\n  def accept(visitor: Visitor)\n}\n\nclass Title(text: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\nclass Text(text: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\nclass Hyperlink(text: String, val url: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\nclass Document(parts: List[Element]) {\n  def accept(visitor: Visitor): Unit = {\n    parts.foreach(p => p.accept(visitor))\n  }\n}\n```", "```java\ntrait Visitor {\n  def visit(title: Title)\n  def visit(text: Text)\n  def visit(hyperlink: Hyperlink)\n}\n```", "```java\nclass HtmlExporterVisitor extends Visitor {\n  val line = System.getProperty(\"line.separator\")\n  val builder = new StringBuilder\n\n  def getHtml(): String = builder.toString\n\n  override def visit(title: Title): Unit = {\n    builder.append(s\"<h1>${title.text}</h1>\").append(line)\n  }\n\n  override def visit(text: Text): Unit = {\n    builder.append(s\"<p>${text.text}</p>\").append(line)\n  }\n\n  override def visit(hyperlink: Hyperlink): Unit = {\n    builder.append(s\"\"\"<a href=\\\"${hyperlink.url}\\\">${hyperlink.text}</a>\"\"\").append(line)\n  }\n}\n```", "```java\nclass PlainTextExporterVisitor extends Visitor {\n  val line = System.getProperty(\"line.separator\")\n  val builder = new StringBuilder\n\n  def getText(): String = builder.toString\n\n  override def visit(title: Title): Unit = {\n    builder.append(title.text).append(line)\n  }\n\n  override def visit(text: Text): Unit = {\n    builder.append(text.text).append(line)\n  }\n\n  override def visit(hyperlink: Hyperlink): Unit = {\n    builder.append(s\"${hyperlink.text} (${hyperlink.url})\").append(line)\n  }\n}\n```", "```java\nobject VisitorExample {\n  def main(args: Array[String]): Unit = {\n    val document = new Document(\n      List(\n        new Title(\"The Visitor Pattern Example\"),\n        new Text(\"The visitor pattern helps us add extra functionality\n         without changing the classes.\"),\n        new Hyperlink(\"Go check it online!\", \"https://www.google.com/\"),\n        new Text(\"Thanks!\")\n      )\n    )\n    val htmlExporter = new HtmlExporterVisitor\n    val plainTextExporter = new PlainTextExporterVisitor\n    System.out.println(s\"Export to html:\")\n    document.accept(htmlExporter)\n    System.out.println(htmlExporter.getHtml())\n    System.out.println(s\"Export to plain:\")\n    document.accept(plainTextExporter)\n    System.out.println(plainTextExporter.getText())\n  }\n}\n```", "```java\nabstract class Element(text: String) {\n  def accept(visitor: Visitor)\n}\n\ncase class Title(text: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\ncase class Text(text: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\ncase class Hyperlink(text: String, val url: String) extends Element(text) {\n  override def accept(visitor: Visitor): Unit = {\n    visitor.visit(this)\n  }\n}\n\nclass Document(parts: List[Element]) {\n  def accept(visitor: Visitor): Unit = {\n    parts.foreach(p => p.accept(visitor))\n  }\n}\n```", "```java\ntrait Visitor {\n  def visit(element: Element)\n}\n```", "```java\nclass HtmlExporterVisitor extends Visitor {\n  val line = System.getProperty(\"line.separator\")\n  val builder = new StringBuilder\n\n  def getHtml(): String = builder.toString\n\n  override def visit(element: Element): Unit = {\n    element match {\n      case Title(text) =>\n        builder.append(s\"<h1>${text}</h1>\").append(line)\n      case Text(text) =>\n        builder.append(s\"<p>${text}</p>\").append(line)\n      case Hyperlink(text, url) =>\n        builder.append(s\"\"\"<a href=\\\"${url}\\\">${text}</a>\"\"\").append(line)\n    }\n  }\n}\n\nclass PlainTextExporterVisitor extends Visitor {\n  val line = System.getProperty(\"line.separator\")\n  val builder = new StringBuilder\n\n  def getText(): String = builder.toString\n\n  override def visit(element: Element): Unit = {\n    element match {\n      case Title(text) =>\n        builder.append(text).append(line)\n      case Text(text) =>\n        builder.append(text).append(line)\n      case Hyperlink(text, url) =>\n        builder.append(s\"${text} (${url})\").append(line)\n    }\n  }\n}\n```", "```java\nabstract class Element(text: String) {\n  def accept(visitor: Element => Unit): Unit = {\n    visitor(this)\n  }\n}\n\ncase class Title(text: String) extends Element(text)\n\ncase class Text(text: String) extends Element(text)\n\ncase class Hyperlink(text: String, val url: String) extends Element(text)\n\nclass Document(parts: List[Element]) {\n  def accept(visitor: Element => Unit): Unit = {\n    parts.foreach(p => p.accept(visitor))\n  }\n}\n```", "```java\nobject VisitorExample {\n  val line = System.getProperty(\"line.separator\")\n\n  def htmlExporterVisitor(builder: StringBuilder): Element => Unit = {\n      case Title(text) =>\n        builder.append(s\"<h1>${text}</h1>\").append(line)\n      case Text(text) =>\n        builder.append(s\"<p>${text}</p>\").append(line)\n      case Hyperlink(text, url) => builder.append(s\"\"\"<a href=\\\"${url}\\\">${text}</a>\"\"\").append(line)\n    }\n\n  def plainTextExporterVisitor(builder: StringBuilder): Element => Unit = {\n      case Title(text) => builder.append(text).append(line)\n      case Text(text) => builder.append(text).append(line)\n      case Hyperlink(text, url) => builder.append(s\"${text} (${url})\").append(line)\n    }\n\n  def main(args: Array[String]): Unit = {\n    val document = new Document(\n      List(\n        Title(\"The Visitor Pattern Example\"),\n        Text(\"The visitor pattern helps us add extra functionality\n         without changing the classes.\"),\n        Hyperlink(\"Go check it online!\", \"https://www.google.com/\"),\n        Text(\"Thanks!\")\n      )\n    )\n    val html = new StringBuilder\n    System.out.println(s\"Export to html:\")\n    document.accept(htmlExporterVisitor(html))\n    System.out.println(html.toString())\n    val plain = new StringBuilder\n    System.out.println(s\"Export to plain:\")\n    document.accept(plainTextExporterVisitor(plain))\n    System.out.println(plain.toString())\n  }\n}\n```"]