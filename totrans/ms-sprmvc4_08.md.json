["```java\nspring.thymeleaf.cache=true\nspring.messages.cache-seconds=-1\n```", "```java\nserver.tomcat.compression=on\nserver.tomcat.compressableMimeTypes=text/html,text/xml,text/css,text/plain,\\\n  application/json,application/xml,application/javascript\n```", "```java\nsecurity.headers.cache=false\n\n# Cache resources for 3 days\nspring.resources.cache-period=259200\n```", "```java\n@Override\npublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n    // This is just an example\n    registry.addResourceHandler(\"/img/**\")\n            .addResourceLocations(\"classpath:/static/images/\")\n            .setCachePeriod(12);\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .antMatcher(\"/api/**\")\n// This is just an example â€“ not required in our case\n        .headers().cacheControl().disable()\n        .httpBasic().and()\n        .csrf().disable()\n        .authorizeRequests()\n        .antMatchers(HttpMethod.GET).hasRole(\"USER\")\n        .antMatchers(HttpMethod.POST).hasRole(\"ADMIN\")\n        .antMatchers(HttpMethod.PUT).hasRole(\"ADMIN\")\n        .antMatchers(HttpMethod.DELETE).hasRole(\"ADMIN\")\n        .anyRequest().authenticated();\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.concurrent.ConcurrentMapCache;\nimport org.springframework.cache.support.SimpleCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.Arrays;\n\n@Configuration\n@EnableCaching\npublic class CacheConfiguration {\n\n    @Bean\n    public CacheManager cacheManager() {\n        SimpleCacheManager simpleCacheManager = new SimpleCacheManager();\n        simpleCacheManager.setCaches(Arrays.asList(\n                new ConcurrentMapCache(\"searches\")\n        ));\n        return simpleCacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.social.twitter.api.SearchParameters;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class SearchParamsBuilder {\n\n    public static SearchParameters createSearchParam(String searchType, String taste) {\n        SearchParameters.ResultType resultType = getResultType(searchType);\n        SearchParameters searchParameters = new SearchParameters(taste);\n        searchParameters.resultType(resultType);\n        searchParameters.count(3);\n        return searchParameters;\n    }\n\n    private static SearchParameters.ResultType getResultType(String searchType) {\n        for (SearchParameters.ResultType knownType : SearchParameters.ResultType.values()) {\n            if (knownType.name().equalsIgnoreCase(searchType)) {\n                return knownType;\n            }\n        }\n        return SearchParameters.ResultType.RECENT;\n    }\n}\n```", "```java\npublic class LightTweet implements Serializable {\n    // the rest of the code remains unchanged\n}\n```", "```java\npackage masterSpringMvc.search.cache;\n\nimport masterSpringMvc.search.LightTweet;\nimport masterSpringMvc.search.SearchParamsBuilder;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.autoconfigure.social.TwitterProperties;\nimport org.springframework.cache.annotation.Cacheable;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.social.twitter.api.Twitter;\nimport org.springframework.social.twitter.api.impl.TwitterTemplate;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\npublic class SearchCache {\n    protected final Log logger = LogFactory.getLog(getClass());\n    private Twitter twitter;\n\n    @Autowired\n    public SearchCache(TwitterProperties twitterProperties) {\n        this.twitter = new TwitterTemplate(twitterProperties.getAppId(), twitterProperties.getAppSecret());\n    }\n\n    @Cacheable(\"searches\")\n    public List<LightTweet> fetch(String searchType, String keyword) {\n        logger.info(\"Cache miss for \" + keyword);\n        SearchParameters searchParam = SearchParamsBuilder.createSearchParam(searchType, keyword);\n        return twitter.searchOperations()\n                .search(searchParam)\n                .getTweets().stream()\n                .map(LightTweet::ofTweet)\n                .collect(Collectors.toList());\n    }\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.search.cache.SearchCache;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@Profile(\"!async\")\npublic class SearchService implements TwitterSearch {\n    private SearchCache searchCache;\n\n    @Autowired\n    public SearchService(SearchCache searchCache) {\n        this.searchCache = searchCache;\n    }\n\n    @Override\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        return keywords.stream()\n                .flatMap(keyword -> searchCache.fetch(searchType, keyword).stream())\n                .collect(Collectors.toList());\n    }\n}\n```", "```java\n2015-08-03 16:04:01.958  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for docker\n2015-08-03 16:04:02.437  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring\n2015-08-03 16:04:02.728  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring boot\n2015-08-03 16:04:03.098  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for spring mvc\n2015-08-03 16:04:03.383  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for groovy\n2015-08-03 16:04:03.967  INFO 38259 --- [nio-8080-exec-8] m.search.cache.SearchCache               : Cache miss for grails\n\n```", "```java\npackage masterSpringMvc.config;\n\nimport com.google.common.cache.CacheBuilder;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.cache.annotation.EnableCaching;\nimport org.springframework.cache.guava.GuavaCacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport java.util.concurrent.TimeUnit;\n\n@Configuration\n@EnableCaching\npublic class CacheConfiguration {\n\n    @Bean\n    public CacheManager cacheManager() {\n        GuavaCacheManager cacheManager = new GuavaCacheManager(\"searches\");\n        cacheManager\n                .setCacheBuilder(\n                        CacheBuilder.newBuilder()\n                                .softValues()\n                                .expireAfterWrite(10, TimeUnit.MINUTES)\n                );\n        return cacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.beans.factory.annotation.Qualifier;\nimport org.springframework.cache.CacheManager;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Primary;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.data.redis.cache.RedisCacheManager;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\nimport java.util.Arrays;\n\n@Configuration\n@Profile(\"redis\")\n@EnableRedisHttpSession\npublic class RedisConfig {\n\n    @Bean(name = \"objectRedisTemplate\")\n    public RedisTemplate objectRedisTemplate(RedisConnectionFactory redisConnectionFactory) {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(redisConnectionFactory);\n        return template;\n    }\n\n    @Primary @Bean\n    public CacheManager cacheManager(@Qualifier(\"objectRedisTemplate\") RedisTemplate template) {\n        RedisCacheManager cacheManager = new RedisCacheManager(template);\n        cacheManager.setCacheNames(Arrays.asList(\"searches\"));\n        cacheManager.setDefaultExpiration(36_000);\n        return cacheManager;\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.scheduling.annotation.AsyncConfigurer;\nimport org.springframework.scheduling.annotation.EnableAsync;\n\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\n@Configuration\n@EnableAsync\npublic class AsyncConfiguration implements AsyncConfigurer {\n\n    protected final Log logger = LogFactory.getLog(getClass());\n\n    @Override\n    public Executor getAsyncExecutor() {\n        return Executors.newFixedThreadPool(10);\n    }\n\n    @Override\n    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {\n        return (ex, method, params) -> logger.error(\"Uncaught async error\", ex);\n    }\n}\n```", "```java\n@Component\nprivate static class AsyncSearch {\n    protected final Log logger = LogFactory.getLog(getClass());\n    private SearchCache searchCache;\n\n    @Autowired\n    public AsyncSearch(SearchCache searchCache) {\n        this.searchCache = searchCache;\n    }\n\n    @Async\n    public ListenableFuture<List<LightTweet>> asyncFetch(String searchType, String keyword) {\n        logger.info(Thread.currentThread().getName() + \" - Searching for \" + keyword);\n        return new AsyncResult<>(searchCache.fetch(searchType, keyword));\n    }\n}\n```", "```java\n@Override\npublic List<LightTweet> search(String searchType, List<String> keywords) {\n    CountDownLatch latch = new CountDownLatch(keywords.size());\n    List<LightTweet> allTweets = Collections.synchronizedList(new ArrayList<>());\n    keywords\n            .stream()\n            .forEach(keyword -> asyncFetch(latch, allTweets, searchType, keyword));\n\n    await(latch);\n    return allTweets;\n}\n```", "```java\npackage masterSpringMvc.search;\n\nimport masterSpringMvc.search.cache.SearchCache;\nimport org.apache.commons.logging.Log;\nimport org.apache.commons.logging.LogFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.scheduling.annotation.Async;\nimport org.springframework.scheduling.annotation.AsyncResult;\nimport org.springframework.social.twitter.api.SearchParameters;\nimport org.springframework.stereotype.Component;\nimport org.springframework.stereotype.Service;\nimport org.springframework.util.concurrent.ListenableFuture;\n\nimport java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.List;\nimport java.util.concurrent.CountDownLatch;\n\n@Service\n@Profile(\"async\")\npublic class ParallelSearchService implements TwitterSearch {\n    private final AsyncSearch asyncSearch;\n\n    @Autowired\n    public ParallelSearchService(AsyncSearch asyncSearch) {\n        this.asyncSearch = asyncSearch;\n    }\n\n    @Override\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        CountDownLatch latch = new CountDownLatch(keywords.size());\n        List<LightTweet> allTweets = Collections.synchronizedList(new ArrayList<>());\n\n        keywords\n                .stream()\n                .forEach(keyword -> asyncFetch(latch, allTweets, searchType, keyword));\n\n        await(latch);\n        return allTweets;\n    }\n\n    private void asyncFetch(CountDownLatch latch, List<LightTweet> allTweets, String searchType, String keyword) {\n        asyncSearch.asyncFetch(searchType, keyword)\n                .addCallback(\n                        tweets -> onSuccess(allTweets, latch, tweets),\n                        ex -> onError(latch, ex));\n    }\n\n    private void await(CountDownLatch latch) {\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            throw new IllegalStateException(e);\n        }\n    }\n\n    private static void onSuccess(List<LightTweet> results, CountDownLatch latch, List<LightTweet> tweets) {\n        results.addAll(tweets);\n        latch.countDown();\n    }\n\n    private static void onError(CountDownLatch latch, Throwable ex) {\n        ex.printStackTrace();\n        latch.countDown();\n    }\n\n    @Component\n    private static class AsyncSearch {\n        protected final Log logger = LogFactory.getLog(getClass());\n        private SearchCache searchCache;\n\n        @Autowired\n        public AsyncSearch(SearchCache searchCache) {\n            this.searchCache = searchCache;\n        }\n\n        @Async\n        public ListenableFuture<List<LightTweet>> asyncFetch(String searchType, String keyword) {\n            logger.info(Thread.currentThread().getName() + \" - Searching for \" + keyword);\n            return new AsyncResult<>(searchCache.fetch(searchType, keyword));\n        }\n    }\n}\n```", "```java\npool-1-thread-3 - Searching groovy\npool-1-thread-1 - Searching spring\npool-1-thread-2 - Searching java\n```", "```java\n@Bean\npublic Filter etagFilter() {\n    return new ShallowEtagHeaderFilter();\n}\n```", "```java\n> http GET 'http://localhost:8080/api/search/mixed;keywords=spring' -a admin:admin\nHTTP/1.1 200 OK\nContent-Length: 1276\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 01 Jun 2015 11:29:51 GMT\nETag: \"00a66d6dd835b6c7c60638eab976c4dd7\"\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=662848E4F927EE9A1BA2006686ECFE4C; Path=/; HttpOnly\n\n```", "```java\n> http GET 'http://localhost:8080/api/search/mixed;keywords=spring' If-None-Match:'\"00a66d6dd835b6c7c60638eab976c4dd7\"' -a admin:admin\nHTTP/1.1 304 Not Modified\nDate: Mon, 01 Jun 2015 11:34:21 GMT\nETag: \"00a66d6dd835b6c7c60638eab976c4dd7\"\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=CA956010CF268056C241B0674C6C5AB2; Path=/; HttpOnly\n\n```", "```java\ncompile 'org.webjars.bower:lodash:3.9.3'\n```", "```java\n<script src=\"img/lodash.js\"></script>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      layout:decorator=\"layout/default\">\n<head lang=\"en\">\n    <title>Hello twitter</title>\n</head>\n<body>\n<div class=\"row\" layout:fragment=\"content\">\n\n    <h2 class=\"indigo-text center\" th:text=\"|Tweet results for ${search}|\">Tweets</h2>\n\n    <ul id=\"tweets\" class=\"collection\">\n </ul>\n</div>\n</body>\n</html>\n```", "```java\n<script layout:fragment=\"script\" th:inline=\"javascript\">\n    /*<![CDATA[*/\n    var baseUrl = /*[[@{/api/search}]]*/ \"/\";\n    var currentLocation = window.location.href;\n    var search = currentLocation.substr(currentLocation.lastIndexOf('/'));\n    var url = baseUrl + search;\n    /*]]>*/\n</script>\n```", "```java\n$.ajax({\n    url: url,\n    type: \"GET\",\n    beforeSend: setEtag,\n    success: onResponse\n});\n```", "```java\nfunction getLastQuery() {\n    return JSON.parse(localStorage.getItem('lastQuery')) || {};\n}\n\nfunction storeQuery(query) {\n    localStorage.setItem('lastQuery', JSON.stringify(query));\n}\n\nfunction setEtag(xhr) {\n    xhr.setRequestHeader('If-None-Match', getLastQuery().etag)\n}\n```", "```java\nfunction onResponse(tweets, status, xhr) {\n  if (xhr.status == 304) {\n      console.log('Response has not changed');\n      tweets = getLastQuery().tweets\n  }\n\n  var etag = xhr.getResponseHeader('Etag');\n  storeQuery({tweets: tweets, etag: etag});\n\n  displayTweets(tweets);\n}\n\nfunction displayTweets(tweets) {\n  $('#tweets').empty();\n  $.each(tweets, function (index, tweet) {\n      addTweet(tweet);\n  })\n}\n```", "```java\nfunction addTweet(tweet) {\n    var template = _.template('<li class=\"collection-item avatar\">' +\n        '<img class=\"circle\" src=\"img/${tweet.profileImageUrl}\" />' +\n        '<span class=\"title\">${tweet.user}</span>' +\n        '<p>${tweet.text}</p>' +\n        '</li>');\n\n    $('#tweets').append(template({tweet: tweet}));\n}\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-websocket'\ncompile 'org.springframework:spring-messaging'\n\ncompile 'org.webjars:sockjs-client:1.0.0'\ncompile 'org.webjars:stomp-websocket:2.3.3'\n```", "```java\n<script src=\"img/sockjs.js\"></script>\n<script src=\"img/stomp.js\"></script>\n```", "```java\n@Configuration\n@EnableWebSocketMessageBroker\npublic class WebSocketConfiguration extends AbstractWebSocketMessageBrokerConfigurer {\n\n    @Override\n    public void configureMessageBroker(MessageBrokerRegistry config) {\n        config.enableSimpleBroker(\"/topic\");\n        config.setApplicationDestinationPrefixes(\"/ws\");\n    }\n\n    @Override\n    public void registerStompEndpoints(StompEndpointRegistry registry) {\n        registry.addEndpoint(\"/twitterSearch\").withSockJS();\n    }\n\n}\n```", "```java\n@Controller\npublic class SearchSocketController {\n    private CachedSearchService searchService;\n    private SimpMessagingTemplate webSocket;\n\n    @Autowired\n    public SearchSocketController(CachedSearchService searchService, SimpMessagingTemplate webSocket) {\n        this.searchService = searchService;\n        this.webSocket = webSocket;\n    }\n\n    @MessageMapping(\"/search\")\n    public void search(@RequestParam List<String> keywords) throws Exception {\n        Consumer<List<LightTweet>> callback = tweet -> webSocket.convertAndSend(\"/topic/searchResults\", tweet);\n        twitterSearch(SearchParameters.ResultType.POPULAR, keywords, callback);\n    }\n\n    public void twitterSearch(SearchParameters.ResultType resultType, List<String> keywords, Consumer<List<LightTweet>> callback) {\n        keywords.stream()\n            .forEach(keyword -> {\n                searchService.search(resultType, keyword)\n                    .addCallback(callback::accept, Throwable::printStackTrace);\n            });\n    }\n}\n```", "```java\nvar currentLocation = window.location.href;\nvar search = currentLocation.substr(currentLocation.lastIndexOf('=') + 1);\n\nfunction connect() {\n  var socket = new SockJS('/hello');\n  stompClient = Stomp.over(socket);\n  // stompClient.debug = null;\n  stompClient.connect({}, function (frame) {\n      console.log('Connected: ' + frame);\n\n      stompClient.subscribe('/topic/searchResults', function (result) {\n          displayTweets(JSON.parse(result.body));\n      });\n\n      stompClient.send(\"/app/search\", {}, JSON.stringify(search.split(',')));\n  });\n}\n```", "```java\nfunction displayTweets(tweets) {\n    $.each(tweets, function (index, tweet) {\n        addTweet(tweet);\n    })\n}\n\nfunction addTweet(tweet) {\n    var template = _.template('<li class=\"collection-item avatar\">' +\n        '<img class=\"circle\" src=\"img/${tweet.profileImageUrl}\" />' +\n        '<span class=\"title\">${tweet.userName}</span>' +\n        '<p>${tweet.text}</p>' +\n        '</li>');\n\n    $('#tweets').append(template({tweet: tweet}));\n}\n```"]