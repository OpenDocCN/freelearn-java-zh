["```java\npublic class DBConnect {\n  static int dbConnectionCount = 0;\n  private int dbConnectID;\n  public DBConnect() {\n    this.dbConnectID = ++dbConnectionCount;\n    System.out.println(\"Database connection created: DBConnect\" + \n    dbConnectID + \".\");\n  }\n  public void dbMethod() {\n    // placeholder\n  }\n  public void dbConnectionClose() {\n    System.out.println(\"Database connection closed: DBConnect\" + \n    dbConnectID + \".\");\n  }\n}\n```", "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\npublic class DBConnectObjectPool {\n  private final Queue<DBConnect> pool;\n  private final int maxSize;\n  public DBConnectObjectPool(int size) {\n    this.maxSize = size;\n    this.pool = new LinkedList<>();\n  }\n  public synchronized DBConnect getConnection() {\n    if (pool.isEmpty()) {\n      if (DBConnect.dbConnectionCount < maxSize) {\n        return new DBConnect();\n      }\n      throw new RuntimeException(\"Error: Maximum object pool size \n      reached. There are no DB connections available.\");\n    }\n    return pool.poll();\n  }\n  public synchronized void releaseConnection(DBConnect dbConnection) {\n    if (pool.size() < maxSize) {\n      pool.offer(dbConnection);\n      System.out.println(\"Splash: Connection object returned to the \n      pool.\");\n    } else {\n      dbConnection.dbConnectionClose();\n    }\n  }\n}\n```", "```java\npublic class ObjectPoolDemoApp {\n  public static void main(String[] args) {\n    DBConnectObjectPool objectPool = new DBConnectObjectPool(8);\n    for (int i = 0; i < 10; i++) {\n      DBConnect conn = objectPool.getConnection();\n      conn.dbMethod();\n      objectPool.releaseConnection(conn);\n    }\n  }\n}\n```", "```java\npublic class DBConnectionPerformanceTest {\n  private static final int NUMBER_OF_TESTS = 3000;\n  private static DBConnectObjectPool dbPool = new \n  DBConnectObjectPool(24);\n```", "```java\npublic static void main(String[] args) {\n  long startTime_withPooling = System.nanoTime();\n  for (int i = 0; i < NUMBER_OF_TESTS; i++) {\n    DBConnect conn = dbPool.getConnection();\n    conn.dbMethod();\n    dbPool.releaseConnection(conn);\n  }\n  long endTime_withPooling = System.nanoTime();\n```", "```java\nlong startTime_withoutPooling = System.nanoTime();\n  for (int i = 0; i < NUMBER_OF_TESTS; i++) {\n    DBConnect conn = new DBConnect();\n    conn.dbMethod();\n    conn.dbConnectionClose();\n  }\nlong endTime_withoutPooling = System.nanoTime();\n```", "```java\nlong totalTime_withPooling = (endTime_withPooling - startTime_withPooling) / 1_000_000;\nlong totalTime_withoutPooling = (endTime_withoutPooling - startTime_withoutPooling) / 1_000_000;\nSystem.out.println(\"Total time with object pooling: \" + totalTime_withPooling + \" ms\");\nSystem.out.println(\"Total time without object pooling: \" + totalTime_withoutPooling + \" ms\");\n```", "```java\nif (totalTime_withPooling < totalTime_withoutPooling) {\n  System.out.println(\"Results with object pooling: \" + totalTime_\n  withPooling);\n  System.out.println(\"Results without object pooling: \" + totalTime_\n  withoutPooling);\n  System.out.println(\"Analysis: Object pooling is faster by \" + \n  (totalTime_withoutPooling - totalTime_withPooling) + \" ms\");\n}\n```", "```java\n} else if (totalTime_withPooling > totalTime_withoutPooling) {\n  System.out.println(\"Results with object pooling: \" + totalTime_\n  withPooling);\n  System.out.println(\"Results without object pooling: \" + totalTime_\n  withoutPooling);\n  System.out.println(\"Analysis: Object pooling is slower by \" + \n  (totalTime_withPooling - totalTime_withoutPooling) + \" ms\");\n}\n```", "```java\n} else {\n  System.out.println(\"Results with object pooling: \" + totalTime_\n  withPooling);\n  System.out.println(\"Results without object pooling: \" + totalTime_\n  withoutPooling);\n  System.out.println(\"Analysis: No significant time difference between \n  object pooling and non-pooling.\");\n}\n```"]