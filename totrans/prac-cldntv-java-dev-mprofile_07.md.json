["```java\n    public interface ConfigSource {\n        String CONFIG_ORDINAL = \"config_ordinal\";\n        int DEFAULT_ORDINAL = 100;\n        default Map<String, String> getProperties() {\n            Map<String, String> props = new HashMap<>();\n            getPropertyNames().forEach((prop) ->             props.put(prop, getValue(prop)));\n            return props;\n        }\n        Set<String> getPropertyNames();\n        default int getOrdinal() {\n            String configOrdinal =             getValue(CONFIG_ORDINAL);\n            if (configOrdinal != null) {\n                try {\n                    return Integer.parseInt(configOrdinal);\n                } catch (NumberFormatException ignored) {\n              }\n            }\n            return DEFAULT_ORDINAL;\n        }\n        String getValue(String propertyName);\n        String getName();\n    }\n    ```", "```java\n    ConfigBuider.withSources(ConfigSource… configSource)\n    ```", "```java\n    app-port, in your cluster, and that ConfigMap contains a key called port with a value of 9081. The –-from-literal is used to store individual name-value pairs in this ConfigMap.\n    ```", "```java\n    kubectl create secret generic app-credentials --from-literal username=Bob --from-literal password=TheBuilder\n    ```", "```java\nenv:\n        - name: PORT\n          valueFrom:\n            configMapKeyRef:\n              name: app-port\n              key: port\n              optional: true\n        - name: APP_USERNAME\n          valueFrom:\n            secretKeyRef:\n              name: app-credentials\n              key: username\n        - name: APP_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: app-credentials\n              key: password\n```", "```java\n@Inject @ConfigProperty(name=\"port\", defaultValue=\"9080\")   int port;\n@Inject @ConfigProperty(name=\"app.username\") String user;\n@Inject @ConfigProperty(name=\"app.password\") String pwd;\n```", "```java\n    public static T of(String value) \n    public static T valueOf(String value)\n    public static T parse(CharSequence value )\n    public T(String value)\n    ```", "```java\n    ConfigBuider.withConverters(converter) \n    ConfigBuilder.withConverter (Class<T> type,  int priority, Converter<T> converter\n    ```", "```java\n    Config = ConfigProvider.getConfig();\n    int age = config.getValue(\"customer.age\", int.class);\n    ```", "```java\n    @Inject @ConfigProperty(name=\"customer.age\") int age;\n    ```", "```java\n%dev.discount=0.1\n%testing.discount=0.6\n%live.discount=0.2\ndiscount=0.15\n```", "```java\nMETA-INF\\microprofile-config.properties\nMETA-INF\\microrpofile-config-dev.properties\nMETA-INF\\microprofile-config-testing.properties\nMETA-INF\\microprofile-config-live.properties\n```", "```java\ncustomer.name=${forename}-${surname}\nforename = Bob\nsurname = Johnson\n```", "```java\nConfigValue configValueHost=ConfigProvider.getConfig()\n.getConfigValue(\"host\");\n```", "```java\n@Inject @ConfigProperty(name=\"host\") ConfigValue   configValueHost;\n```", "```java\nString configSourceForHost = configValueHost.getSourceName();\nString valueOfHost = configValueHost.getValue();\n```", "```java\nconfig_ordinal=220\ncustomer.forename=Bob\ncustomer.surname=Builder\n```", "```java\n@ApplicationScoped\n@ConfigProperties(prefix = \"customer\")\npublic class ConfigProps {\n    private String forename;\n    private String surname;\n    public String getForename() {\n        return forename;\n    }\n    public String getSurname() {\n        return surname;\n    }\n}\n```", "```java\n    ConfigProviderResolver resolver =   ConfigProviderResolver.instance();\n    ConfigBuilder builder = resolver.getBuilder();\n    ```", "```java\n    Config = builder.addDefaultSources().withSources(aSource)\n      .withConverters(aConverter).build();\n    ```", "```java\n    //register the config with the specified classloader\n    resolver.registerConfig(config, classloader);\n    ```", "```java\n    //release this config when no longer needed. \n    resolver.releaseConfig(config);\n    ```", "```java\n<dependency>\n  <groupId>org.eclipse.microprofile.config</groupId>\n  <artifactId>microprofile-config-api</artifactId>\n  <version>2.0</version>\n</dependency>\n```", "```java\ndependencies {\nprovidedCompile org.eclipse.microprofile.config     :microprofile-config-api:2.0\n}\n```", "```java\n@Asynchronous\npublic CompletionStage<String> serviceA() {\n  return CompletableFuture.completedFuture(\"service a\");\n}\n```", "```java\n@Retry(maxRestries=5, delay=400, maxDuaration=4000,   jitter=200, retryOn=Exception.class, abortOn=\n    IllegalArgumentException.class)\npublic void callService(){\n    //do something     doSomething();\n}\n```", "```java\n@Timeout(700)\npublic String getServiceName() {\n   //retrieve the backend service name\n}\n```", "```java\n@CircuitBreaker(requestVolumeThreshold = 10,   failureRatio=0.5, successThreshold = 3, delay = 2,     delayUnit=ChronoUnit.SECONDS, failOn={ExceptionA.class,         ExceptionB.class}, skipOn=ExceptionC.class)\n```", "```java\n@Asynchronous\n@Bulkhead(value=5, waitingTaskQueue=6)\npublic CompletionStage<String> serviceA() {\n}\n```", "```java\n@Fallback(fallbackMethod=\"myFallback\", \n  applyOn={ExceptionA.class, ExceptionB.class},    skipOn={ExceptionAsub.class})\npublic String callService() {\n...\n}\npublic String myFallback() {\n...\n}\n```", "```java\n@GET\n@Path(\"/{parameter}\")\n@Asynchronous\n@CircuitBreaker\n@Retry\n@Bulkhead\n@Timeout(200)\n@Fallback(fallbackMethod = \"myFallback\")\npublic CompletionStage<String> doSomething(@PathParam\n  (\"parameter\") String parameter) {\n//do something\n}\n```", "```java\npackage cloudnative.sample.fault.tolerance;\npublic class FaultToleranceDemo {\n    @Timeout(500)\n    @Retry(maxRetries = 6)\n    @GET\n    public String invokeService() {\n        //do something\n    }\n}\n```", "```java\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/invokeService/Timeout/value=300\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/invokeService/Retry/maxRetries=10\n```", "```java\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/Timeout/value=300\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/Retry/maxRetries=10\n```", "```java\nTimeout/value=300\nRetry/maxRetries=10\n```", "```java\nMP_Fault_Tolerance_NonFallback_Enabled=false\n```", "```java\n<fully.qualified.class.name>/<method.name>/<annotation>/enabled=false\n```", "```java\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/invokeService/Timeout/enabled=false\n```", "```java\ncloudnative.sample.fault.tolerance.FaultToleranceDemo/Timeout/enabled=false\n```", "```java\nTimeout/enabled=false\n```", "```java\n<dependency>\n  <groupId>\n    org.eclipse.microprofile.fault.tolerance\n  </groupId>\n  <artifactId>microprofile-fault-tolerance-api</artifactId>\n  <version>3.0</version>\n</dependency>\n```", "```java\ndependencies {\nprovidedCompile org.eclipse.microprofile.fault.tolerance:  microprofile-fault-tolerance-api:3.0\n}\n```", "```java\n@APIResponses(value = {\n        @APIResponse(\n            responseCode = \"404\",\n            description = \"The Mongo database cannot be               found. \", content = @Content(                        mediaType = \"text/plain\")),\n        @APIResponse(\n            responseCode = \"200\",\n            description = \"The latest trade has been               retrieved successfully.\",\n            content = @Content(mediaType = \"application/json\",                        schema = @Schema(implementation =                           Quote.class)))})\n    @Operation(\n        summary = \"Shows the latest trade.\",\n        description = \"Retrieve the latest record from the           mongo database.\"\n    )\npublic String latestBuy() {\n. . .\n}\n```", "```java\n---\nopenapi: 3.0.3\ninfo:\n  title: Generated API\n  version: \"1.0\"\nservers:\n- url: http://localhost:9080\n- url: https://localhost:9443\npaths:\n  /data/latestBuy:\n    get:\n      summary: Shows the latest trade.\n      description: Retrieve the latest record from the         mongo database.\n      responses:\n        \"404\":\n          description: 'The Mongo database cannot be found'\n          content:\n            text/plain: {}\n        \"200\":\n          description: The latest trade has been retrieved             successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Quote'\ncomponents:\n  schemas:\n    Quote:\n      type: object\n      properties:\n        date:\n          type: string\n        price:\n          format: double\n          type: number\n        symbol:\n          type: string\n        time:\n          format: int64\n          type: integer\n```", "```java\n---\nopenapi: 3.0.3\ninfo:\n  title: Generated API\n  version: \"1.0\"\nservers:\n- url: http://localhost:9080\n- url: https://localhost:9443\npaths:\n  /data/latestBuy:\n    get:\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: string\n```", "```java\npublic class MyOASFilter implements OASFilter {\n  @Override\n  public void filterOpenAPI(OpenAPI openAPI) {\n    openAPI.setInfo(OASFactory.createObject(Info.class)      .title(\"Stock App\").version(\"1.0\").description         (\"App for displaying stocks.\").license           (OASFactory.createObject(License.class)            .name(\"Apache License 2.0\").url               (\"https://www.apache.org/licenses/                LICENSE-2.0\"))); //1\n    openAPI.addServer(OASFactory.createServer()      .url(\"http://localhost:{port}\").description         (\"Open Liberty Server.\").variables(Collections           .singletonMap(\"port\",OASFactory             .createServerVariable().defaultValue(\"9080\")              .description(\"HTTP port.\")))); //2   \n  }\n}\n```", "```java\n<dependency>\n  <groupId>org.eclipse.microprofile.openapi</groupId>\n  <artifactId>microprofile-openapi-api</artifactId>\n  <version>2.0</version>\n</dependency>\n```", "```java\ndependencies {\nprovidedCompile org.eclipse.microprofile.openapi:\n  microprofile-openapi-api:2.0\n}\n```", "```java\n@RolesAllowed({ \"StockViewer\", \"StockTrader\" })\n@GET\npublic String checkAccount() {\n    return \"CheckAccount\";\n}\n```", "```java\n<security-role>\n        <description>Group with read-only access to stock \n          portfolios</description>\n        <role-name>StockViewer</role-name>\n    </security-role>\n    <security-role>\n        <description>Group with full access to stock \n          portfolios</description>\n        <role-name>StockTrader</role-name>\n    </security-role>\n<security-constraint>\n        <display-name>Account read-only security</display-name>\n        <web-resource-collection>\n            <web-resource-name>Account read-only               methods</web-resource-name>\n            <description>Applies to all paths under the               context root (this service specifies the                 account as a path param)</description>\n            <url-pattern>/*</url-pattern>\n            <http-method>GET</http-method>\n        </web-resource-collection>\n        <auth-constraint>\n            <description>Roles allowed to access read-only               operations on accounts</description>\n            <role-name>StockViewer</role-name>\n            <role-name>StockTrader</role-name>\n        </auth-constraint>\n    </security-constraint>\n```", "```java\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJodHRwczovL3NlcnZlci5leGFtcGxlLmNvbSIsImF1ZCI6ImNsb3V kLW5hdGl2ZS1hcHAiLCJqdGkiOiIwZmQwODljYi0xYzQ1LTRjMzAtOWIyMy02YW E0ZmQ1ZTcwYjUiLCJleHAiOjE2MTk2OTk5MDYsImlhdCI6MTYxOTY5OTg3Niwic 3ViIjoiRW1pbHkiLCJ1cG4iOiJFbWlseSIsInByZWZlcnJlZF91c2VybmFtZSI6 bnVsbCwiYm9vayI6IlByYWN0aWNpYWwgTWljcm9Qcm9maWxlIiwiZ3JvdXBzIjp bInVzZXIiLCJwcm90ZWN0ZWQiXX0.d0BF1qTrjlQPnb5tppM4LP1T2QWvs9sh6Q lsXcKbFUsHvdzXGDSXkkZTqZl67EkJcUBPy9-I4i5913r9LTBbLIR_bataTVSL9 AcMsSY6tk_B4IU69IjV1GRohGf_LXHyFu_iWGfSWO7TV3-tX43E5Yszvik5sial OrqgVF9uYUy_UaOOY7TEQynpHv4oCTwNKg48-Nlw15Yfz__i7CaOmiRNROp6_cD Zhn1t_aFndplxv4Q-A-p_j2gPpsEldl5mbnBi73-cQvuImawBxA1srRYQSj6aAK JDCBcCj4wh338Nb93l61_PxET8_blXZywJszmLQllJfi2SeR3WucxJ3w\n```", "```java\n    {\n      \"typ\": \"JWT\",\n      \"alg\": \"RS256\"\n    }\n    ```", "```java\n    {\n      \"iss\": \"https://server.example.com\",\n      \"aud\": \"cloud-native-app\",\n      \"jti\": \"0fd089cb-1c45-4c30-9b23-6aa4fd5e70b5\",\n      \"exp\": 1619699906,\n      \"iat\": 1619699876,\n      \"sub\": \"Emily\",\n      \"upn\": \"Emily\",\n      \"preferred_username\": null,\n      \"book\": \"Practicial MicroProfile\",\n      \"groups\": [\n        \"user\",\n        \"protected\"\n      ]\n    }\n    ```", "```java\n    RSASHA256(\n      base64UrlEncode(header) + \".\" +\n      base64UrlEncode(payload), <paste-public-key>\n      , <paste-private-key>\n    )\n    ```", "```java\nimport com.ibm.websphere.security.jwt.JwtBuilder;\nimport com.ibm.websphere.security.jwt.Claims;\nprivate String buildJwt(String userName, Set<String> roles)   throws Exception {\n        return JwtBuilder.create(\"jwtBuilder\")\n                         .claim(Claims.SUBJECT, userName)\n                         .claim(\"upn\", userName)\n                         .claim(\"groups\", roles.toArray(new \n                           String[roles.size()]))\n                         .buildJwt()\n                         .compact();\n    }\n```", "```java\n    mp.jwt.token.header=Bearer as14efgscd31qrewtadg\n    ```", "```java\n    mp.jwt.token.cookie=Bearer= as14efgscd31qrewtadg\n    ```", "```java\n<mpJwt id=\"stockTraderJWT\" audiences=\"${JWT_AUDIENCE}\" issuer=\"${JWT_ISSUER}\" keyName=\"jwtSigner\" ignoreApplicationAuthMethod=\"false\" />\n```", "```java\n        @GET\n        @Path(\"/getAud\")\n        public Set<String> getAudience(@Context       SecurityContext sec) \n            Set<String> auds = null;\n            Principal user = sec.getUserPrincipal();\n            if (user instanceof JsonWebToken) {\n                JsonWebToken jwt = (JsonWebToken) user;\n                auds = jwt.getAudience();\n            }\n            return auds;\n        }\n    ```", "```java\n    @Inject private JsonWebToken jwt;\n    ```", "```java\n    @Inject @Claim(standard= Claims.raw_token) private String rawToken; \n    ```", "```java\n    @Inject @Claim(\"iat\") private Long dupIssuedAt;\n    ```", "```java\n    @Inject @Claim(\"sub\") private ClaimValue<Optional<String>> optSubject;\n    ```", "```java\n@Inject @Claim(\"a_claim\") <Claim_Type> private myClaim;\n```", "```java\norg.eclipse.microprofile.rest.client.propagateHeaders=  Authorization/Cookie\n```", "```java\n<dependency>\n    <groupId>org.eclipse.microprofile.jwt</groupId>\n    <artifactId>microprofile-jwt-auth-api</artifactId>\n    <version>1.2</version>\n</dependency>\n```", "```java\ndependencies {\nprovidedCompile org.eclipse.microprofile.jwt:   microprofile-jwt-auth-api:1.2\n}\n```"]