["```java\n<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"> \n<property name=\"driverClassName\" value=\"${batch.jdbc.driver}\"/> \n<property name=\"url\" value=\"${batch.jdbc.url}\"/> \n<property name=\"username\" value=\"${batch.jdbc.user}\"/> \n<property name=\"password\" value=\"${batch.jdbc.password}\"/> \n</bean>\n<bean id=\"transactionManager\" \nclass=\"org.springframework.jdbc.datasource.DataSourceTransactionManager\" lazy-init=\"true\"> \n<property name=\"dataSource\" ref=\"dataSource\"/> \n</bean>\n```", "```java\n<job-repository id=\"jobRepository\" \ndata-source=\"dataSource\" transaction-manager=\"transactionManager\" />\n```", "```java\n<job-repository id=\"jobRepository\" \ndata-source=\"dataSource\" transaction-manager=\"transactionManager\" />\n<bean id=\"taskExecutor\" \nclass=\"org.springframework.core.task.SimpleAsyncTaskExecutor\"/>\n<bean id=\"jobLauncher\" \nclass=\"org.springframework.batch.core.launch.support.SimpleJobLauncher\"> \n<property name=\"jobRepository\" ref=\"jobRepository\"/> \n< property name=\"taskExecutor\" ref=\"taskExecutor\"/> \n</bean>\n```", "```java\n<bean id=\"jobOperator\" \nclass=\"org.springframework.batch.core.launch.support.SimpleJobOperator\" \nprop:jobLauncher-ref=\"jobLauncher\" prop:jobExplorer-ref=\"jobExplorer\" \nprop:jobRepository-ref=\"jobRepository\" prop:jobRegistry-ref=\"jobRegistry\" />\n```", "```java\n<bean id=\"jobExplorer\" \nclass=\"org.springframework.batch.core.explore.support.JobExplorerFactoryBean\" \nprop:dataSource-ref=\"dataSource\" />\n```", "```java\npublic class JobMonitoringListener {\n  @BeforeJob\n  public void executeBeforeJob(JobExecution jobExecution) {\n    //pre-run executions\n  }\n  @AfterJob\n  public void executeAfterJob(JobExecution jobExecution) {\n  if(jobExecution.getStatus() == BatchStatus.FAILED) { \n  /* Report the departments for a failed job execution status.\n     The reporter can be a preconfigured mail-sender or an SMS\n     sender or any other channel of communication.*/\n      reporter.report(jobExecution);\n    }\n  }\n}\n```", "```java\n<batch:job id=\"firstBatchJob\">\n  <batch:step id=\"importEmployees\">\n  ..\n  </batch:step>\n  <batch:listeners>\n    <batch:listener ref=\"jobMonitoringListener\"/> \n  </batch:listeners>\n</batch:job>\n<bean id=\" jobMonitoringListener\" class=\"org.java.JobMonitoringListener\"/>\n```"]