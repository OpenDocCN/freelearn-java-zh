["```java\n//Router entity class\npublic class Router {\n    private final Type type;\n    private final RouterId id;\n    public Router(Type type, RouterId id) {\n        this.type = type;\n        this.id = id;\n    }\n    public static List<Router> checkRouter(\n    Type type, List<Router> routers) {\n    var routersList = new ArrayList<Router>();\n        routers.forEach(router -> {\n        if(router.type == type ){\n            routersList.add(router);\n        }\n    });\n    return routersList;\n    }\n}\n```", "```java\npublic enum Type {\n       EDGE,\n    CORE;\n}\n```", "```java\npublic interface RouterViewUseCase {\n    List<Router> getRouters(Predicate<Router> filter);\n}\n```", "```java\npublic class RouterViewInputPort implements RouterViewUse\n  Case {\n    private RouterViewOutputPort routerListOutputPort;\n    public RouterViewInput\n      Port(RouterViewOutputPort  routerViewOutputPort) {\n        this.routerListOutputPort = routerViewOutputPort;\n    }\n    @Override\n    public List<Router> getRouters(Predicate<Router> fil\n       ter) {\n        var routers = routerListOutput\n             Port.fetchRouters();\n        return Router.retrieveRouter(routers, filter);\n    }\n}\n```", "```java\npublic interface RouterViewOutputPort {\n    List<Router> fetchRouters();\n}\n```", "```java\npublic class RouterViewCLIAdapter {\n    private RouterViewUseCase routerViewUseCase;\n    public RouterViewCLIAdapter(){\n        setAdapters();\n    }\n    public List<Router> obtainRelatedRouters(String type) {\n        RelatedRoutersCommand relatedRoutersCommand =\n           new RelatedRoutersCommand(type);\n        return routerViewUseCase.getRelatedRouters\n             (relatedRoutersCommand);\n    }\n    private void setAdapters(){\n        this.routerViewUseCase = new  RouterViewInputPort\n          (RouterViewFileAdapter.getInstance());\n    }\n}\n```", "```java\npublic class RouterViewFileAdapter implements Router\n  ViewOutputPort {\n    @Override\n    public List<Router> fetchRouters() {\n        return readFileAsString();\n    }\n    private static List<Router> readFileAsString() {\n        List<Router> routers = new ArrayList<>();\n        try (Stream<String> stream = new BufferedReader(\n                new InputStreamReader(\n                  Objects.requireNonNull(\n                  RouterViewFileAdapter.class\n                    .getClassLoader().\n                  getResourceAsStream\n                    (\"routers.txt\")))).lines()) {\n            stream.forEach(line ->{\n            String[] routerEntry = line.split(\";\");\n            var id = routerEntry[0];\n            var type = routerEntry[1];\n            Router router = new Router\n                   (RouterType.valueOf(type)\n                      ,RouterId.of(id));\n                routers.add(router);\n            });\n        } catch (Exception e){\n           e.printStackTrace();\n        }\n        return routers;\n    }\n}\n```"]