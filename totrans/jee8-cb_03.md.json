["```java\n    <dependencies>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n```", "```java\n@ApplicationPath(\"webresources\")\npublic class ApplicationConfig extends Application {\n\n}\n```", "```java\n@Path(\"serverSentService\")\n@RequestScoped\npublic class ServerSentService {\n\n    private static final Map<Long, UserEvent> POOL = \n    new ConcurrentHashMap<>();\n\n    @Resource(name = \"LocalManagedExecutorService\")\n    private ManagedExecutorService executor;\n\n    @Path(\"start\")\n    @POST\n    public Response start(@Context Sse sse) {\n\n        final UserEvent process = new UserEvent(sse);\n\n        POOL.put(process.getId(), process);\n        executor.submit(process);\n\n        final URI uri = UriBuilder.fromResource(ServerSentService.class).path\n        (\"register/{id}\").build(process.getId());\n        return Response.created(uri).build();\n    }\n\n    @Path(\"register/{id}\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    @GET\n    public void register(@PathParam(\"id\") Long id,\n            @Context SseEventSink sseEventSink) {\n        final UserEvent process = POOL.get(id);\n\n        if (process != null) {\n            process.getSseBroadcaster().register(sseEventSink);\n        } else {\n            throw new NotFoundException();\n        }\n    }\n\n    static class UserEvent implements Runnable {\n\n        private final Long id;\n        private final SseBroadcaster sseBroadcaster;\n        private final Sse sse;\n\n        UserEvent(Sse sse) {\n            this.sse = sse;\n            this.sseBroadcaster = sse.newBroadcaster();\n            id = System.currentTimeMillis();\n        }\n\n        Long getId() {\n            return id;\n        }\n\n        SseBroadcaster getSseBroadcaster() {\n            return sseBroadcaster;\n        }\n\n        @Override\n        public void run() {\n            try {\n                TimeUnit.SECONDS.sleep(5);\n                sseBroadcaster.broadcast(sse.newEventBuilder().\n                name(\"register\").data(String.class, \"Text from event \" \n                                      + id).build());\n                sseBroadcaster.close();\n            } catch (InterruptedException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n}\n```", "```java\n@ViewScoped\n@Named\npublic class SseBean implements Serializable {\n\n    @NotNull\n    @Positive\n    private Integer countClient;\n\n    private Client client;\n\n    @PostConstruct\n    public void init(){\n        client = ClientBuilder.newClient();\n    }\n\n    @PreDestroy\n    public void destroy(){\n        client.close();\n    }\n\n    public void sendEvent() throws URISyntaxException, InterruptedException {\n        WebTarget target = client.target(URI.create(\"http://localhost:8080/\n                                                    ch03-sse/\"));\n        Response response = \n        target.path(\"webresources/serverSentService/start\")\n                .request()\n                .post(Entity.json(\"\"), Response.class);\n\n        FacesContext.getCurrentInstance().addMessage(null,\n                new FacesMessage(\"Sse Endpoint: \" + \n                response.getLocation()));\n\n        final Map<Integer, String> messageMap = new ConcurrentHashMap<>\n        (countClient);\n        final SseEventSource[] sources = new \n        SseEventSource[countClient];\n\n        final String processUriString = \n        target.getUri().relativize(response.getLocation()).\n        toString();\n        final WebTarget sseTarget = target.path(processUriString);\n\n        for (int i = 0; i < countClient; i++) {\n            final int id = i;\n            sources[id] = SseEventSource.target(sseTarget).build();\n            sources[id].register((event) -> {\n                final String message = event.readData(String.class);\n\n                if (message.contains(\"Text\")) {\n                    messageMap.put(id, message);\n                }\n            });\n            sources[i].open();\n        }\n\n        TimeUnit.SECONDS.sleep(10);\n\n        for (SseEventSource source : sources) {\n            source.close();\n        }\n\n        for (int i = 0; i < countClient; i++) {\n            final String message = messageMap.get(i);\n\n            FacesContext.getCurrentInstance().addMessage(null,\n                    new FacesMessage(\"Message sent to client \" + \n                                     (i + 1) + \": \" + message));\n        }\n    }\n\n    public Integer getCountClient() {\n        return countClient;\n    }\n\n    public void setCountClient(Integer countClient) {\n        this.countClient = countClient;\n    }\n\n}\n```", "```java\n<h:body>\n    <h:form>\n        <h:outputLabel for=\"countClient\" value=\"Number of Clients\" />\n        <h:inputText id=\"countClient\" value=\"#{sseBean.countClient}\" />\n\n        <br />\n        <h:commandButton type=\"submit\" action=\"#{sseBean.sendEvent()}\" \n         value=\"Send Events\" />\n    </h:form>\n</h:body>\n```", "```java\n    @Path(\"start\")\n    @POST\n    public Response start(@Context Sse sse) {\n\n        final UserEvent process = new UserEvent(sse);\n\n        POOL.put(process.getId(), process);\n        executor.submit(process);\n\n        final URI uri = UriBuilder.fromResource(ServerSentService.class).\n        path(\"register/{id}\").build(process.getId());\n        return Response.created(uri).build();\n    }\n```", "```java\n@Context Sse sse\n```", "```java\n    @Path(\"register/{id}\")\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    @GET\n    public void register(@PathParam(\"id\") Long id,\n            @Context SseEventSink sseEventSink) {\n        final UserEvent event = POOL.get(id);\n\n        if (event != null) {\n            event.getSseBroadcaster().register(sseEventSink);\n        } else {\n            throw new NotFoundException();\n        }\n    }\n```", "```java\n@Context SseEventSink sseEventSink\n\n...\n\nevent.getSseBroadcaster().register(sseEventSink);\n```", "```java\n    static class UserEvent implements Runnable {\n\n        ...\n\n        UserEvent(Sse sse) {\n            this.sse = sse;\n            this.sseBroadcaster = sse.newBroadcaster();\n            id = System.currentTimeMillis();\n        }\n\n        ...\n\n        @Override\n        public void run() {\n            try {\n                TimeUnit.SECONDS.sleep(5);\n                sseBroadcaster.broadcast(sse.newEventBuilder().\n                name(\"register\").data(String.class, \"Text from event \" \n                + id).build());\n                sseBroadcaster.close();\n            } catch (InterruptedException e) {\n                System.out.println(e.getMessage());\n            }\n        }\n    }\n```", "```java\nthis.sseBroadcaster = sse.newBroadcaster();\n```", "```java\nsseBroadcaster.broadcast(sse.newEventBuilder().name(\"register\").\ndata(String.class, \"Text from event \" + id).build());\n```", "```java\n        WebTarget target = client.target(URI.create\n        (\"http://localhost:8080/ch03-sse/\"));\n        Response response = target.path(\"webresources/serverSentService\n                                        /start\")\n                .request()\n                .post(Entity.json(\"\"), Response.class);\n```", "```java\n        for (int i = 0; i < countClient; i++) {\n            final int id = i;\n            sources[id] = SseEventSource.target(sseTarget).build();\n            sources[id].register((event) -> {\n                final String message = event.readData(String.class);\n\n                if (message.contains(\"Text\")) {\n                    messageMap.put(id, message);\n                }\n            });\n            sources[i].open();\n        }\n```", "```java\nfinal String message = messageMap.get(i);\n```", "```java\n<h:inputText id=\"countClient\" value=\"#{sseBean.countClient}\" />\n...\n<h:commandButton type=\"submit\" action=\"#{sseBean.sendEvent()}\" \nvalue=\"Send Events\" />\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n```", "```java\npublic class User implements Serializable{\n\n    private String name;\n    private String email;\n\n    public User(){\n\n    }\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    public User getUser(){\n        long ts = System.currentTimeMillis();\n        return new User(\"Bean\" + ts, \"user\" + ts + \n                        \"@eldermoraes.com\"); \n    }\n}\n```", "```java\n@Path(\"userservice\")\npublic class UserService implements Serializable{\n\n    @Inject\n    private UserBean userBean;\n\n    private User userLocal;\n\n    @Inject\n    private void setUserLocal(){\n        long ts = System.currentTimeMillis();\n        userLocal = new User(\"Local\" + ts, \"user\" + ts + \n                             \"@eldermoraes.com\"); \n    }\n\n    @GET\n    @Path(\"getUserFromBean\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserFromBean(){\n        return Response.ok(userBean.getUser()).build();\n    }\n\n    @GET\n    @Path(\"getUserFromLocal\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserFromLocal(){\n        return Response.ok(userLocal).build();\n    } \n\n}\n```", "```java\n@ViewScoped\n@Named\npublic class UserView implements Serializable {\n\n    public void loadUsers() {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(URI.create\n        (\"http://localhost:8080/ch03-rscdi/\"));\n        User response = target.path(\"webresources/userservice/\n                                     getUserFromBean\")\n                .request()\n                .accept(MediaType.APPLICATION_JSON)\n                .get(User.class);\n\n        FacesContext.getCurrentInstance()\n                .addMessage(null,\n                        new FacesMessage(\"userFromBean: \" + \n                                         response));\n\n        response = target.path(\"webresources/userservice\n                               /getUserFromLocal\")\n                .request()\n                .accept(MediaType.APPLICATION_JSON)\n                .get(User.class);\n\n        FacesContext.getCurrentInstance()\n                .addMessage(null,\n                        new FacesMessage(\"userFromLocal: \n                                         \" + response));\n```", "```java\n        client.close();\n    }\n\n}\n```", "```java\n <h:body>\n <h:form>\n <h:commandButton type=\"submit\" \n action=\"#{userView.loadUsers()}\" \n value=\"Load Users\" />\n </h:form>\n </h:body>\n```", "```java\n    @Inject\n    private UserBean userBean;\n```", "```java\n    @Inject\n    private void setUserLocal(){\n        long ts = System.currentTimeMillis();\n        userLocal = new User(\"Local\" + ts, \"user\" + ts + \n                             \"@eldermoraes.com\"); \n    }\n```", "```java\nresponse = target.path(\"webresources/userservice/getUserFromBean\")\n                .request()\n                .accept(MediaType.APPLICATION_JSON)\n                .get(User.class);\n\n...\n\nresponse = target.path(\"webresources/userservice/getUserFromLocal\")\n                .request()\n                .accept(MediaType.APPLICATION_JSON)\n                .get(User.class);\n```", "```java\n    @GET\n    @Path(\"getUserFromBean\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserFromBean(){\n        userFromBean = userBean.getUser();\n        return Response.ok(userFromBean).build();\n    }\n\n    @GET\n    @Path(\"getUserFromLocal\")\n    @Produces(MediaType.APPLICATION_JSON)\n    public Response getUserFromLocal(){\n        return Response.ok(userLocal).build();\n    }\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n```", "```java\npublic class User {\n\n    private Long id;\n\n    @JsonbProperty(\"fullName\")\n    private String name;\n\n    private String email;\n\n    @JsonbTransient\n    private Double privateNumber;\n\n    @JsonbDateFormat(JsonbDateFormat.DEFAULT_LOCALE)\n    private Date dateCreated;\n\n    public User(Long id, String name, String email, \n                Double privateNumber, Date dateCreated) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.privateNumber = privateNumber;\n        this.dateCreated = dateCreated;\n    }\n\n    private User(){\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n@ViewScoped\n@Named\npublic class UserView implements Serializable{\n\n    private String json;\n\n    public void loadUser(){\n        long now = System.currentTimeMillis();\n        User user = new User(now, \n                \"User\" + now, \n                \"user\" + now + \"@eldermoraes.com\",\n                Math.random(),\n                new Date());\n\n        Jsonb jb = JsonbBuilder.create();\n        json = jb.toJson(user);\n        try {\n            jb.close();\n        } catch (Exception ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n\n    public String getJson() {\n        return json;\n    }\n\n    public void setJson(String json) {\n        this.json = json;\n    }\n}\n```", "```java\n <h:body>\n <h:form>\n <h:commandButton type=\"submit\" action=\"#{userView.loadUser()}\" \n  value=\"Load User\" />\n\n <br />\n\n <h:outputLabel for=\"json\" value=\"User JSON\" />\n <br />\n <h:inputTextarea id=\"json\" value=\"#{userView.json}\" \n  style=\"width: 300px; height: 300px;\" />\n </h:form>\n </h:body>\n```", "```java\n    @JsonbProperty(\"fullName\")\n    private String name;\n```", "```java\n    @JsonbTransient\n    private Double privateNumber;\n```", "```java\n    @JsonbDateFormat(JsonbDateFormat.DEFAULT_LOCALE)\n    private Date dateCreated;\n```", "```java\n    public void loadUser(){\n        long now = System.currentTimeMillis();\n        User user = new User(now, \n                \"User\" + now, \n                \"user\" + now + \"@eldermoraes.com\",\n                Math.random(),\n                new Date());\n\n        Jsonb jb = JsonbBuilder.create();\n        json = jb.toJson(user);\n    }\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n```", "```java\npublic class User {\n\n    private String name;\n    private String email;\n    private Integer[] profiles;\n\n    public User(String name, String email, Integer[] profiles) {\n        this.name = name;\n        this.email = email;\n        this.profiles = profiles;\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n@ViewScoped\n@Named\npublic class UserView implements Serializable{\n\n    private static final JsonBuilderFactory BUILDERFACTORY = \n    Json.createBuilderFactory(null);\n    private final Jsonb jsonbBuilder = JsonbBuilder.create();\n\n    private String fromArray;\n    private String fromStructure;\n    private String fromUser;\n    private String fromJpointer;\n\n    public void loadUserJson(){\n        loadFromArray();\n        loadFromStructure();\n        loadFromUser();\n    }\n\n    private void loadFromArray(){\n        JsonArray array = BUILDERFACTORY.createArrayBuilder()\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User1\")\n                        .add(\"email\", \"user1@eldermoraes.com\"))\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User2\")\n                        .add(\"email\", \"user2@eldermoraes.com\"))\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User3\")\n                        .add(\"email\", \"user3@eldermoraes.com\")) \n                .build(); \n        fromArray = jsonbBuilder.toJson(array);\n    }\n\n    private void loadFromStructure(){\n        JsonStructure structure = \n        BUILDERFACTORY.createObjectBuilder()\n                .add(\"name\", \"User1\")\n                .add(\"email\", \"user1@eldermoraes.com\")\n                .add(\"profiles\", BUILDERFACTORY.createArrayBuilder()\n                        .add(BUILDERFACTORY.createObjectBuilder()\n                                .add(\"id\", \"1\")\n                                .add(\"name\", \"Profile1\"))\n                        .add(BUILDERFACTORY.createObjectBuilder()\n                                .add(\"id\", \"2\")\n                                .add(\"name\", \"Profile2\")))\n                .build();\n        fromStructure = jsonbBuilder.toJson(structure);\n\n        JsonPointer pointer = Json.createPointer(\"/profiles\");\n        JsonValue value = pointer.getValue(structure);\n        fromJpointer = value.toString();\n    }\n\n    private void loadFromUser(){\n        User user = new User(\"Elder Moraes\", \n        \"elder@eldermoraes.com\", \n        new Integer[]{1,2,3});\n        fromUser = jsonbBuilder.toJson(user);\n    }\n\n    //DO NOT FORGET TO IMPLEMENT THE GETTERS AND SETTERS\n}\n```", "```java\n <h:body>\n <h:form>\n <h:commandButton type=\"submit\" action=\"#{userView.loadUserJson()}\" \n value=\"Load JSONs\" />\n\n <br />\n\n <h:outputLabel for=\"fromArray\" value=\"From Array\" />\n <br />\n <h:inputTextarea id=\"fromArray\" value=\"#{userView.fromArray}\" \n style=\"width: 300px; height: 150px\" />\n <br />\n\n <h:outputLabel for=\"fromStructure\" value=\"From Structure\" />\n <br />\n <h:inputTextarea id=\"fromStructure\" value=\"#{userView.fromStructure}\" \n style=\"width: 300px; height: 150px\" />\n <br />\n\n <h:outputLabel for=\"fromUser\" value=\"From User\" />\n <br />\n <h:inputTextarea id=\"fromUser\" value=\"#{userView.fromUser}\" \n style=\"width: 300px; height: 150px\" />\n\n  <br />\n  <h:outputLabel for=\"fromJPointer\" value=\"Query with JSON Pointer \n  (from JsonStructure Above)\" />\n  <br />\n  <h:inputTextarea id=\"fromJPointer\" \n   value=\"#{userView.fromJpointer}\"  \n  style=\"width: 300px; height: 100px\" />\n </h:form>\n </h:body>\n```", "```java\n    private void loadFromArray(){\n        JsonArray array = BUILDERFACTORY.createArrayBuilder()\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User1\")\n                        .add(\"email\", \"user1@eldermoraes.com\"))\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User2\")\n                        .add(\"email\", \"user2@eldermoraes.com\"))\n                .add(BUILDERFACTORY.createObjectBuilder()\n                        .add(\"name\", \"User3\")\n                        .add(\"email\", \"user3@eldermoraes.com\")) \n                .build(); \n        fromArray = jsonbBuilder.toJson(array);\n    }\n```", "```java\n    private void loadFromStructure(){\n        JsonStructure structure = BUILDERFACTORY.createObjectBuilder()\n                .add(\"name\", \"User1\")\n                .add(\"email\", \"user1@eldermoraes.com\")\n                .add(\"profiles\", BUILDERFACTORY.createArrayBuilder()\n                        .add(BUILDERFACTORY.createObjectBuilder()\n                                .add(\"id\", \"1\")\n                                .add(\"name\", \"Profile1\"))\n                        .add(BUILDERFACTORY.createObjectBuilder()\n                                .add(\"id\", \"2\")\n                                .add(\"name\", \"Profile2\")))\n                .build();\n        fromStructure = jsonbBuilder.toJson(structure);\n\n        JsonPointer pointer = new JsonPointerImpl(\"/profiles\");\n        JsonValue value = pointer.getValue(structure);\n        fromJpointer = value.toString();\n    }\n```", "```java\nprivate void loadFromUser(){\n        User user = new User(\"Elder Moraes\", \"elder@eldermoraes.com\",\n                    new Integer[]{1,2,3});\n        fromUser = jsonbBuilder.toJson(user);\n    }\n```"]