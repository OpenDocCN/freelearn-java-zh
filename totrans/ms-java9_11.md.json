["```java\n    /*\n    import statements\n    */\n\n    public class HttpUrlConnectionExample\n    {  \n      public static void main(String[] args) \n      {\n        new HttpUrlConnectionExample();\n      }\n\n      public HttpUrlConnectionExample()\n      {\n        URL theUrl = null;\n        BufferedReader theReader = null;\n        StringBuilder theStringBuilder;\n\n        // put the URL into a String\n        String theUrl = \"https://www.packtpub.com/\";\n\n        // here we are creating the connection\n        theUrl = new URL(theUrl);\n        HttpURLConnection theConnection = (HttpURLConnection) \n         theUrl.openConnection();\n\n        theConnection.setRequestedMethod(\"GET\");\n\n        // add a delay \n        theConnection.setReadTimeout(30000); // 30 seconds\n        theConnection.connect();\n\n        // next, we can read the output\n        theReader = new BufferedReader(\n          new InputStreamReader(theConnection.getInputStream()));\n        theStringBuilder =  new StringBuilder();\n\n        // read the output one line at a time\n        String theLine = null;\n        while ((theLine = theReader.readLine() != null)\n        {\n          theStringBUilder.append(line + \"\\n\");\n        }\n\n        // echo the output to the screen console\n        System.out.println(theStringBuilder.toString());\n\n        // close the reader\n        theReader.close();\n      }\n    }\n    . . . \n```", "```java\n    // Mandatory import statement.\n    import com.sun.javadoc.*;\n\n    // We will be looking for all the @throws documentation tags.\n    public class AllThrowsTags extends Doclet \n    {\n      // This is used to invoke the Doclet.\n      public static boolean start(Rootdoc myRoot) \n      {\n        // \"ClassDoc[]\" here referes to classes and interfaces.\n        ClassDoc[] classesAndInterfaces = \n         myRoot.classesAndInterfaces();\n        for (int i = 0; i < classesAndInterfaces.length; ++i)\n        {\n          ClassDoc tempCD = classesAndInterfaces[i];\n          printThrows(tempCD.contructors());\n          printThrows(tempCD.methods());\n        }\n        return true;\n      }\n\n      static void printThrows(ExecutableMemberDoc[] theThrows)\n      {\n        for (int i = 0; i < theThrows.length; ++i)\n        {\n          ThrowsTag[] throws = theThrows[i].throwsTags();\n\n          // Print the \"qualified name\" which will be a the\n             class or \n          // interface name.\n          System.out.println(theThrows[i].qualifiedName());\n\n          // A loop to print all comments with the Throws Tag that \n          // belongs to the previously printed class or\n             interface name\n          for (int j = 0; j < throws.length; ++j)\n          {\n            // A println statement that calls three methods\n               from the \n            // ThrowsTag Interface: exceptionType(),\n               exceptionName(),\n            // and exceptionComment().\n            System.out.println(\"--> TYPE: \" +\n              throws[j].exceptionType() + \n              \" | NAME: \" + throws[j].exceptionName() + \n              \" | COMMENT: \" + throws[j].exceptionComment());\n          }\n        }\n      }\n    }\n```", "```java\njavadoc -doclet AllThrowsTags -sourcepath <source-location> java.util\n```", "```java\n<class or interface name>\n TYPE: <exception type> | NAME: <exception name> | COMMENT: <exception comment>\n TYPE: <exception type> | NAME: <exception name> | COMMENT: <exception comment>\n TYPE: <exception type> | NAME: <exception name> | COMMENT: <exception comment>\n<class or interface name>\n TYPE: <exception type> | NAME: <exception name> | COMMENT: <exception comment>\n TYPE: <exception type> | NAME: <exception name> | COMMENT: <exception comment>\n```", "```java\n    protected UnknownEntityException(String message)\n```", "```java\n    /import javax.swing.JFrame;\n    import javax.swing.WindowConstants;\n\n    public class JavadocExample \n    {\n\n      public static void main(String[] args) \n      {\n        drawJFrame();\n      }\n\n      public static void drawJFrame()\n      {\n        JFrame myFrame = new JFrame(\"Javadoc Example\");\n        myFrame.setSize(319,319);\n        myFrame.setDefaultCloseOperation(\n          WindowConstants.EXIT_ON_CLOSE);\n        myFrame.setVisible(true);\n      }\n    }\n```", "```java\n\"C:\\Program Files\\Java\\jdk-9\\bin\\javadoc.exe\" -public -splitindex -use -author -version -nodeprecated -html5 @C:\\Users\\elavi\\AppData\\Local\\Temp\\javadoc1304args.txt -d C:\\Chapter11\\JD-Output\nLoading source file C:\\Chapter11\\src\\JavadocExample.java...\nConstructing Javadoc information...\nStandard Doclet version 9\nBuilding tree for all the packages and classes...\nGenerating C:\\Chapter11\\JD-Output\\JavadocExample.html...\nGenerating C:\\Chapter11\\JD-Output\\package-frame.html...\nGenerating C:\\Chapter11\\JD-Output\\package-summary.html...\nGenerating C:\\Chapter11\\JD-Output\\package-tree.html...\nGenerating C:\\Chapter11\\JD-Output\\constant-values.html...\nGenerating C:\\Chapter11\\JD-Output\\class-use\\JavadocExample.html...\nGenerating C:\\Chapter11\\JD-Output\\package-use.html...\nBuilding index for all the packages and classes...\nGenerating C:\\Chapter11\\JD-Output\\overview-tree.html...\nGenerating C:\\Chapter11\\JD-Output\\index-files\\index-1.html...\nGenerating C:\\Chapter11\\JD-Output\\index-files\\index-2.html...\nGenerating C:\\Chapter11\\JD-Output\\index-files\\index-3.html...\nBuilding index for all classes...\nGenerating C:\\Chapter11\\JD-Output\\allclasses-frame.html...\nGenerating C:\\Chapter11\\JD-Output\\allclasses-frame.html...\nGenerating C:\\Chapter11\\JD-Output\\allclasses-noframe.html...\nGenerating C:\\Chapter11\\JD-Output\\allclasses-noframe.html...\nGenerating C:\\Chapter11\\JD-Output\\index.html...\nGenerating C:\\Chapter11\\JD-Output\\help-doc.html...\n\njavadoc exited with exit code 0\n```", "```java\n    var addtest = function()\n    {\n      print(\"Simple Test\");\n      print(\"This JavaScript program adds the numbers 300\n       and 19.\");\n      print(\"Addition results = \" + (300 + 19));\n    }\n    addtest();\n```", "```java\n    // required imports\n    import javax.script.ScriptEngine;\n    import javax.script.ScriptEngineManager;\n\n    public class EmbeddedAddTest \n    {\n      public static void main(String[] args) throws Throwable\n      {\n        // instantiate a new ScriptEngineManager\n        ScriptEngineManager myEngineManager =\n          new ScriptEngineManager();\n\n        // instantiate a new Nashorn ScriptEngine\n        ScriptEngine myEngine = myEngineManager.getEngineByName(\n         \"nashorn\");\n\n        // create the JavaScript function\n        myEngine.eval(\"function addTest(x, y) { return x + y; }\");\n\n        // generate output including a call to the addTest function\n           via the engine\n        System.out.println(\"The addition results are:\n         \" + myEngine.eval(\"addTest(300, 19);\"));\n      }\n    }\n```", "```java\n-XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -XX:+UseJVMCICompiler - Djvmci.Compiler=<name of compiler>\n```", "```java\n    public class MyBean implements java.io.Serializable \n    {\n      // instance variables  \n      private int studentId;\n      private String studentName;\n\n      // no-argument constructor\n      public MyBean() \n      {\n\n      }\n\n      // mutator/setter \n      public void setStudentId(int theID)\n      {\n        this.studentId = theID;\n      }\n\n      // accessor/getter\n      public int getStudentId()\n      {\n        return studentId;\n      }\n\n      // mutator/setter \n      public void setStudentName(String theName)\n      {\n        this.studentName = theName;\n      }\n\n      // accessor/getter\n      public String getStudentName()\n      {\n        return studentName;\n      }\n\n    }\n```", "```java\n    package javax.swing;\n\n    public @interface SwingContainer\n    {\n      boolean value() default false;\n      String delegate() default \"\";\n    }\n```", "```java\n    <public publicId=\"-//Packt Publishing Limited//Mastering Java 9//EN\"\n     uri=\"https://www.packtpub.com/application-development/mastering-java-9\"/>\n```", "```java\n    public class PlanetCollection \n    {\n      // Instance Variable\n      private String planetName;\n\n      // constructor\n      public PlanetCollection(String name)\n      {\n        setPlanetName(name);\n      }\n\n      // mutator\n      public void setPlanetName(String name)\n      {\n        this.planetName = name;\n      }\n\n      // accessor\n      public String getPlanetName()\n      {\n        return this.planetName;\n      }\n\n      public void print()\n      {\n        System.out.println(getPlanetName());\n      }\n    }\n```", "```java\n    import java.util.ArrayList;\n\n    public class OldSchool \n    {\n      private static ArrayList<PlanetCollection> myPlanets =\n        new ArrayList<>();\n\n      public static void main(String[] args) \n      {\n        add(\"Earth\");\n        add(\"Jupiter\");\n        add(\"Mars\");\n        add(\"Venus\");\n        add(\"Saturn\");\n        add(\"Mercury\");\n        add(\"Neptune\");\n        add(\"Uranus\");\n        add(\"Dagobah\");\n        add(\"Kobol\");\n\n        for (PlanetCollection orb : myPlanets)\n        {\n          orb.print();\n        }\n\n      }\n\n      public static void add(String name)\n      {\n        PlanetCollection newPlanet = new PlanetCollection(name);\n        myPlanets.add(newPlanet);\n      }\n    }\n```", "```java\n    PlanetCollection<String> myPlanets = Set.of(\n      \"Earth\",\n      \"Jupiter\",\n      \"Mars\",\n      \"Venus\",\n      \"Saturn\",\n      \"Mercury\",\n      \"Neptune\",\n      \"Uranus\",\n      \"Dagobah\",\n      \"Kobol\");\n```"]