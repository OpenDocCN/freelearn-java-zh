["```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.Stateless;\n\n@Stateless\npublic class SimpleSessionBean implements SimpleSession\n{  \n  private String message = \n      \"If you don't see this, it didn't work!\";\n\n  public String getMessage()\n  {\n    return message;\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.Remote;\n\n@Remote\npublic interface SimpleSession\n{\n  public String getMessage();\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.EJB;\n\npublic class SessionBeanClient\n{\n @EJB\n  private static SimpleSession simpleSession;\n\n  private void invokeSessionBeanMethods()\n  {\n    System.out.println(simpleSession.getMessage());\n\n    System.out.println(\"\\nSimpleSession is of type: \"\n        + simpleSession.getClass().getName());\n  }\n\n  public static void main(String[] args)\n  {\n    new SessionBeanClient().invokeSessionBeanMethods();\n  }\n\n}\n```", "```java\nappclient -client simplesessionbeanclient.jar\n\n```", "```java\nIf you don't see this, it didn't work!\n\nSimpleSession is of type: net.ensode.glassfishbook._SimpleSession_Wrapper\n\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.Remote;\n\n@Remote\npublic interface CustomerDao\n{\n  public void saveCustomer(Customer customer);\n\n  public Customer getCustomer(Long customerId);\n\n  public void deleteCustomer(Customer customer);\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.Stateful;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\n\n@Stateful\npublic class CustomerDaoBean implements CustomerDao {\n\n    @PersistenceContext\n    private EntityManager entityManager;    \n\n    public void saveCustomer(Customer customer) {\n        if (customer.getCustomerId() == null) {\n            saveNewCustomer(customer);\n        } else {\n            updateCustomer(customer);\n        }\n    }\n\n    private void saveNewCustomer(Customer customer) {\n        entityManager.persist(customer);\n    }\n\n    private void updateCustomer(Customer customer) {\n        entityManager.merge(customer);\n    }\n\n    public Customer getCustomer(Long customerId) {\n        Customer customer;\n\n        customer = entityManager.find(Customer.class, customerId);\n\n        return customer;\n    }\n\n    public void deleteCustomer(Customer customer) {\n        entityManager.remove(customer);\n    }\n}\n```", "```java\npackage net.ensode.glassfishbook.jsfjpa;\n\n//imports omitted for brevity\n\n@Named\n@RequestScoped\npublic class CustomerController implements Serializable {\n\n @EJB\n private CustomerDaoBean customerDaoBean;\n\n    private Customer customer;\n\n    private String firstName;\n    private String lastName;\n    private String email;\n\n    public CustomerController() {\n        customer = new Customer();\n    }\n\n    public String saveCustomer() {\n        String returnValue = \"customer_saved\";\n\n        try {\n            populateCustomer();\n            customerDaoBean.saveCustomer(customer);\n        } catch (Exception e) {\n            e.printStackTrace();\n            returnValue = \"error_saving_customer\";\n        }\n\n        return returnValue;\n    }\n\n    private void populateCustomer() {\n        if (customer == null) {\n            customer = new Customer();\n        }\n        customer.setFirstName(getFirstName());\n        customer.setLastName(getLastName());\n        customer.setEmail(getEmail());\n    }\n\n//setters and getters omitted for brevity\n\n}\n```", "```java\npackage net.ensode.glassfishbook.singletonsession;\n\nimport java.util.List;\nimport javax.annotation.PostConstruct;\nimport javax.ejb.Singleton;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport javax.persistence.Query;\nimport net.ensode.glassfishbook.entity.UsStates;\n\n@Singleton\npublic class SingletonSessionBean implements\n    SingletonSessionBeanRemote {\n\n  @PersistenceContext\n  private EntityManager entityManager;\n  private List<UsStates> stateList;\n\n  @PostConstruct\n  public void init() {\n    Query query = entityManager.createQuery(\n        \"Select us from UsStates us\");\n    stateList = query.getResultList();\n  }\n\n  @Override\n  public List<UsStates> getStateList() {\n    return stateList;\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook.asynchronousmethods;\n\nimport java.util.concurrent.Future;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.ejb.AsyncResult;\nimport javax.ejb.Asynchronous;\nimport javax.ejb.Stateless;\n\n@Stateless\npublic class AsynchronousSessionBean implements\n    AsynchronousSessionBeanRemote {\n\n  private static Logger logger = Logger.getLogger(\n      AsynchronousSessionBean.class.getName());\n\n @Asynchronous\n  @Override\n public void slowMethod() {\n    long startTime = System.currentTimeMillis();\n    logger.info(\"entering \" + this.getClass().getCanonicalName()\n        + \".slowMethod()\");\n    try {\n      Thread.sleep(10000); //simulate processing for 10 seconds\n    } catch (InterruptedException ex) {\n      Logger.getLogger(AsynchronousSessionBean.class.getName()).\n          log(Level.SEVERE, null, ex);\n    }\n    logger.info(\"leaving \" + this.getClass().getCanonicalName()\n        + \".slowMethod()\");\n    long endTime = System.currentTimeMillis();\n    logger.info(\"execution took \" + (endTime - startTime)\n        + \" milliseconds\");\n  }\n\n @Asynchronous\n  @Override\n public Future<Long> slowMethodWithReturnValue() {\n    try {\n      Thread.sleep(15000); //simulate processing for 15 seconds\n    } catch (InterruptedException ex) {\n      Logger.getLogger(AsynchronousSessionBean.class.getName()).\n          log(Level.SEVERE, null, ex);\n    }\n\n    return new AsyncResult<Long>(42L);\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.MessageDriven;\nimport javax.jms.JMSException;\nimport javax.jms.Message;\nimport javax.jms.MessageListener;\nimport javax.jms.TextMessage;\n\n@MessageDriven(mappedName = \"jms/GlassFishBookQueue\")\npublic class ExampleMessageDrivenBean implements MessageListener\n{\n  public void onMessage(Message message)\n  {\n    TextMessage textMessage = (TextMessage) message;\n    try\n    {\n      System.out.print(\"Received the following message: \");\n      System.out.println(textMessage.getText());\n      System.out.println();\n    }\n    catch (JMSException e)\n    {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\n@TransactionAttribute(value=TransactionAttributeType.NEVER)\npublic void doitAsFastAsPossible()\n{\n  //performance critical code goes here.\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\n//imports omitted\n\n@Stateless\npublic class CustomerDaoRollbackBean implements CustomerDaoRollback\n{\n @Resource\n private EJBContext ejbContext;\n\n  @PersistenceContext\n  private EntityManager entityManager;\n\n  @Resource(name = \"jdbc/__CustomerDBPool\")\n  private DataSource dataSource;\n\n  public void saveNewCustomer(Customer customer)\n  {\n if (customer == null || customer.getCustomerId() != null)\n {\n ejbContext.setRollbackOnly();\n }\n    else\n    {\n      customer.setCustomerId(getNewCustomerId());\n      entityManager.persist(customer);\n    }\n  }\n\n  public void updateCustomer(Customer customer)\n  {\n if (customer == null || customer.getCustomerId() == null)\n {\n ejbContext.setRollbackOnly();\n }\n    else\n    {\n      entityManager.merge(customer);\n    }\n  }\n//Additional methods omitted for brevity.\n\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.List;\n\nimport javax.annotation.Resource;\nimport javax.ejb.Stateless;\nimport javax.ejb.TransactionManagement;\nimport javax.ejb.TransactionManagementType;\nimport javax.persistence.EntityManager;\n\n//imports omitted \n\n@Stateless\n@TransactionManagement(value = TransactionManagementType.BEAN)\npublic class CustomerDaoBmtBean implements CustomerDaoBmt\n{\n @Resource\n private UserTransaction userTransaction;\n\n  @PersistenceContext\n  private EntityManager entityManager;\n\n  @Resource(name = \"jdbc/__CustomerDBPool\")\n  private DataSource dataSource;\n\n  public void saveMultipleNewCustomers(\n      List<Customer> customerList)\n  {\n    for (Customer customer : customerList)\n    {\n      try\n      {\n userTransaction.begin();\n        customer.setCustomerId(getNewCustomerId());\n        entityManager.persist(customer);\n userTransaction.commit();\n      }\n      catch (Exception e)\n      {\n        e.printStackTrace();\n      }\n    }\n  }\n\n  private Long getNewCustomerId()\n  {\n    Connection connection;\n    Long newCustomerId = null;\n    try\n    {\n      connection = dataSource.getConnection();\n      PreparedStatement preparedStatement = \n          connection.prepareStatement(\"select \" +\n          \"max(customer_id)+1 as new_customer_id \" + \n          \"from customers\");\n\n      ResultSet resultSet = preparedStatement.executeQuery();\n\n      if (resultSet != null && resultSet.next())\n      {\n        newCustomerId = resultSet.getLong(\"new_customer_id\");\n      }\n\n      connection.close();\n    }\n    catch (SQLException e)\n    {\n      e.printStackTrace();\n    }\n\n    return newCustomerId;\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE glassfish-ejb-jar PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 EJB 3.1//EN\" \"http://glassfish.org/dtds/glassfish-ejb-jar_3_1-1.dtd\">\n<glassfish-ejb-jar>\n  <enterprise-beans>\n    <ejb>\n <ejb-name>MyStatefulSessionBean</ejb-name>\n      <bean-cache>\n <removal-timeout-in-seconds>\n 600\n </removal-timeout-in-seconds>\n      </bean-cache>\n    </ejb>\n  </enterprise-beans>\n</glassfish-ejb-jar>\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE glassfish-ejb-jar PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 EJB 3.1//EN\" \"http://glassfish.org/dtds/glassfish-ejb-jar_3_1-1.dtd\">\n<glassfish-ejb-jar>\n    <enterprise-beans>\n        <ejb>\n            <ejb-name>MyStatelessSessionBean</ejb-name>\n            <bean-pool>\n                <steady-pool-size>10</steady-pool-size>\n                <max-pool-size>60</max-pool-size>\n                <resize-quantity>5</resize-quantity>\n                <pool-idle-timeout-in-seconds>\n                    900\n                </pool-idle-timeout-in-seconds>\n            </bean-pool>\n        </ejb>\n    </enterprise-beans>\n</glassfish-ejb-jar>\n```", "```java\npackage net.ensode.glassfishbook;\n\n//imports omitted\n\n@Stateless\npublic class EjbTimerExampleBean implements EjbTimerExample\n{\n  private static Logger logger = Logger.getLogger(EjbTimerExampleBean.class\n      .getName());\n  @Resource\n  TimerService timerService;\n\n  public void startTimer(Serializable info)\n  {\n    Timer timer = timerService.createTimer\n      (new Date(), 5000, info);\n  }\n\n  public void stopTimer(Serializable info)\n  {\n    Timer timer;\n    Collection timers = timerService.getTimers();\n\n    for (Object object : timers)\n    {\n      timer = ((Timer) object);\n\n      if (timer.getInfo().equals(info))\n      {\n        timer.cancel();\n        break;\n      }\n    }\n  }\n\n  @Timeout\n  public void logMessage(Timer timer)\n  {\n    logger.info(\"This message was triggered by :\" +\n        timer.getInfo() + \" at \"\n        + System.currentTimeMillis());\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.EJB;\n\npublic class Client\n{\n  @EJB\n  private static EjbTimerExample ejbTimerExample;\n\n  public static void main(String[] args)\n  {\n    try\n    {\n      System.out.println(\"Starting timer 1...\");\n ejbTimerExample.startTimer(\"Timer 1\");\n      System.out.println(\"Sleeping for 2 seconds...\");\n      Thread.sleep(2000);\n      System.out.println(\"Starting timer 2...\");\n ejbTimerExample.startTimer(\"Timer 2\");\n      System.out.println(\"Sleeping for 30 seconds...\");\n      Thread.sleep(30000);\n      System.out.println(\"Stopping timer 1...\");\n ejbTimerExample.stopTimer(\"Timer 1\");\n      System.out.println(\"Stopping timer 2...\");\n ejbTimerExample.stopTimer(\"Timer 2\");\n      System.out.println(\"Done.\");\n    }\n    catch (InterruptedException e)\n    {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\n[2013-08-26T20:44:55.180-0400] [glassfish 4.0] [INFO] [] [net.ensode.glassfishbook.EjbTimerExampleBean] [tid: _ThreadID=147 _ThreadName=__ejb-thread-pool1] [timeMillis: 1377564295180] [levelValue: 800] [[\n\n  This message was triggered by :Timer 1 at 1377564295180]]\n\n[2013-08-26T20:44:57.203-0400] [glassfish 4.0] [INFO] [] [net.ensode.glassfishbook.EjbTimerExampleBean] [tid: _ThreadID=148 _ThreadName=__ejb-thread-pool2] [timeMillis: 1377564297203] [levelValue: 800] [[\n\n  This message was triggered by :Timer 2 at 1377564297203]]\n\n[2013-08-26T20:44:58.888-0400] [glassfish 4.0] [INFO] [] [net.ensode.glassfishbook.EjbTimerExampleBean] [tid: _ThreadID=149 _ThreadName=__ejb-thread-pool3] [timeMillis: 1377564298888] [levelValue: 800] [[\n\n  This message was triggered by :Timer 1 at 1377564298888]]\n\n[2013-08-26T20:45:01.156-0400] [glassfish 4.0] [INFO] [] [net.ensode.glassfishbook.EjbTimerExampleBean] [tid: _ThreadID=150 _ThreadName=__ejb-thread-pool4] [timeMillis: 1377564301156] [levelValue: 800] [[\n\n  This message was triggered by :Timer 2 at 1377564301156]]\n```", "```java\npackage com.ensode.glassfishbook.calendarbasedtimer;\n\nimport java.util.logging.Logger;\nimport javax.ejb.Stateless;\nimport javax.ejb.LocalBean;\nimport javax.ejb.Schedule;\n\n@Stateless\n@LocalBean\npublic class CalendarBasedTimerEjbExampleBean {\n\n  private static Logger logger = Logger.getLogger(\n      CalendarBasedTimerEjbExampleBean.class.getName());\n\n @Schedule(hour = \"20\", minute = \"10\")\n  public void logMessage() {\n    logger.info(\"This message was triggered at:\"\n        + System.currentTimeMillis());\n  }\n}\n```", "```java\npackage net.ensode.glassfishbook;\n\n// imports omitted\n\n@Stateless\n@RolesAllowed(\"appadmin\")\npublic class CustomerDaoBean implements CustomerDao\n{\n  @PersistenceContext\n  private EntityManager entityManager;\n\n  @Resource(name = \"jdbc/__CustomerDBPool\")\n  private DataSource dataSource;\n\n  public void saveCustomer(Customer customer)\n  {\n    if (customer.getCustomerId() == null)\n    {\n      saveNewCustomer(customer);\n    }\n    else\n    {\n      updateCustomer(customer);\n    }\n  }\n\n  public Long saveNewCustomer(Customer customer)\n  {    \n    entityManager.persist(customer);\n\n    return customer.getCustomerId();\n  }\n\n  public void updateCustomer(Customer customer)\n  {\n    entityManager.merge(customer);\n  }\n\n @RolesAllowed(\n { \"appuser\", \"appadmin\" })\n  public Customer getCustomer(Long customerId)\n  {\n    Customer customer;\n\n    customer = entityManager.find(Customer.class, customerId);\n\n    return customer;\n  }\n\n  public void deleteCustomer(Customer customer)\n  {\n    entityManager.remove(customer);\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE glassfish-ejb-jar PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 EJB 3.1//EN\" \"http://glassfish.org/dtds/glassfish-ejb-jar_3_1-1.dtd\">\n<glassfish-ejb-jar>\n <security-role-mapping>\n <role-name>appuser</role-name>\n <group-name>appuser</group-name>\n </security-role-mapping>\n <security-role-mapping>\n <role-name>appadmin</role-name>\n <group-name>appadmin</group-name>\n </security-role-mapping>\n    <enterprise-beans>\n        <ejb>\n            <ejb-name>CustomerDaoBean</ejb-name>\n            <ior-security-config>\n <as-context>\n <auth-method>username_password</auth-method>\n <realm>file</realm>\n <required>true</required>\n </as-context>\n            </ior-security-config>\n        </ejb>\n    </enterprise-beans>\n</glassfish-ejb-jar>\n```", "```java\npackage net.ensode.glassfishbook;\n\nimport javax.ejb.EJB;\n\npublic class Client\n{\n  @EJB\n  private static CustomerDao customerDao;\n\n  public static void main(String[] args)\n  {\n    Long newCustomerId;\n\n    Customer customer = new Customer();\n    customer.setFirstName(\"Mark\");\n    customer.setLastName(\"Butcher\");\n    customer.setEmail(\"butcher@phony.org\");\n\n    System.out.println(\"Saving New Customer...\");\n    newCustomerId = customerDao.saveNewCustomer(customer);\n\n    System.out.println(\"Retrieving customer...\");\n    customer = customerDao.getCustomer(newCustomerId);\n    System.out.println(customer);\n  }\n}\n```", "```java\nappclient -client ejbsecurityclient.jar\n```", "```java\nSaving New Customer...\nRetrieving customer...\ncustomerId = 29\nfirstName = Mark\nlastName = Butcher\nemail = butcher@phony.org\n\n```"]