["```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n      Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n      .filter(s -> s.length() != 5)\n      subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n    }\n} \n```", "```java\nRECEIVED: Beta\nRECEIVED: Epsilon\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n      Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n      .take(3)\n      .subscribe(s -> System.out.println(\"RECEIVED: \" + s));\n    }\n}\n```", "```java\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.interval(300, TimeUnit.MILLISECONDS)\n          .take(2, TimeUnit.SECONDS)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n\n       sleep(5000);\n      }\n\n      public static void sleep(long millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n}\n\n```", "```java\nRECEIVED: 0\nRECEIVED: 1\nRECEIVED: 2\nRECEIVED: 3\nRECEIVED: 4\nRECEIVED: 5\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.range(1,100)\n          .skip(90)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\nRECEIVED: 91\nRECEIVED: 92\nRECEIVED: 93\nRECEIVED: 94\nRECEIVED: 95\nRECEIVED: 96\nRECEIVED: 97\nRECEIVED: 98\nRECEIVED: 99\nRECEIVED: 100\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.range(1,100)\n          .takeWhile(i -> i < 5)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\nRECEIVED: 1\nRECEIVED: 2\nRECEIVED: 3\nRECEIVED: 4\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.range(1,100)\n          .skipWhile(i -> i <= 95)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n\n```", "```java\nRECEIVED: 96\nRECEIVED: 97\nRECEIVED: 98\nRECEIVED: 99\nRECEIVED: 100\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .map(String::length)\n          .distinct()\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n\n```", "```java\nRECEIVED: 5\nRECEIVED: 4\nRECEIVED: 7\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .distinct(String::length)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n\n```", "```java\nRECEIVED: Alpha\nRECEIVED: Beta\nRECEIVED: Epsilon\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(1, 1, 1, 2, 2, 3, 3, 2, 1, 1)\n          .distinctUntilChanged()\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n\n```", "```java\nRECEIVED: 1\nRECEIVED: 2\nRECEIVED: 3\nRECEIVED: 2\nRECEIVED: 1\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Zeta\", \"Eta\", \"Gamma\", \n\"Delta\")\n          .distinctUntilChanged(String::length)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\nRECEIVED: Alpha\nRECEIVED: Beta\nRECEIVED: Eta\nRECEIVED: Gamma\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Zeta\", \"Eta\", \"Gamma\", \n\"Delta\")\n            .elementAt(3)\n            .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\nRECEIVED: Eta\n```", "```java\nimport io.reactivex.Observable;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"M/d\n          /yyyy\");\n\n        Observable.just(\"1/3/2016\", \"5/9/2016\", \"10/12/2016\")\n          .map(s -> LocalDate.parse(s, dtf))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\nRECEIVED: 2016-01-03\nRECEIVED: 2016-05-09\nRECEIVED: 2016-10-12\n```", "```java\nObservable<Object> items = \n  Observable.just(\"Alpha\", \"Beta\", \"Gamma\").map(s -> (Object) s);\n```", "```java\nObservable<Object> items = \n  Observable.just(\"Alpha\", \"Beta\", \"Gamma\").cast(Object.class);\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> menu =\n          Observable.just(\"Coffee\", \"Tea\", \"Espresso\", \"Latte\");\n\n        //print menu\n        menu.startWith(\"COFFEE SHOP MENU\")\n          .subscribe(System.out::println);\n\n      }\n}\n```", "```java\nCOFFEE SHOP MENU\nCoffee\nTea\nEspresso\nLatte\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> menu =\n          Observable.just(\"Coffee\", \"Tea\", \"Espresso\", \"Latte\");\n\n        //print menu\n        menu.startWithArray(\"COFFEE SHOP MENU\",\"----------------\")\n          .subscribe(System.out::println);\n\n     }\n}\n```", "```java\nCOFFEE SHOP MENU\n----------------\nCoffee\nTea\nEspresso\nLatte\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable<String> items =\n          Observable.just(\"Alpha\",\"Beta\",\"Gamma\",\"Delta\",\"Epsilon\");\n\n        items.filter(s -> s.startsWith(\"Z\"))\n          .defaultIfEmpty(\"None\")\n          .subscribe(System.out::println);\n     }\n}\n```", "```java\nNone\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .filter(s -> s.startsWith(\"Z\"))\n          .switchIfEmpty(Observable.just(\"Zeta\", \"Eta\", \"Theta\"))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n     }\n}\n\n```", "```java\nRECEIVED: Zeta\nRECEIVED: Eta\nRECEIVED: Theta\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(6, 2, 5, 7, 1, 4, 9, 8, 3)\n          .sorted()\n          .subscribe(System.out::println);\n      }\n}\n\n```", "```java\n1\n2\n3\n4\n5\n6\n7\n8\n9\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.Comparator;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(6, 2, 5, 7, 1, 4, 9, 8, 3)\n          .sorted(Comparator.reverseOrder())\n          .subscribe(System.out::println);\n      }\n}\n```", "```java\n9\n8\n7\n6\n5\n4\n3\n2\n1\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\" ,\"Delta\", \"Epsilon\")\n          .sorted((x,y) -> Integer.compare(x.length(), y.length()))\n          .subscribe(System.out::println);\n     }\n}\n\n```", "```java\n    Beta\n    Alpha\n    Gamma\n    Delta\n    Epsilon\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\" ,\"Delta\", \"Epsilon\")\n          .delay(3, TimeUnit.SECONDS)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n\n          sleep(5000);\n     }\n     public static void sleep(long millis) {\n       try {\n         Thread.sleep(millis);\n       } catch (InterruptedException e) {\n         e.printStackTrace();\n       }\n     }\n}\n```", "```java\n    Received: Alpha\n    Received: Beta\n    Received: Gamma\n    Received: Delta\n    Received: Epsilon\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\" ,\"Delta\", \"Epsilon\")\n          .repeat(2)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: Alpha\n    Received: Beta\n    Received: Gamma\n    Received: Delta\n    Received: Epsilon\n    Received: Alpha\n    Received: Beta\n    Received: Gamma\n    Received: Delta\n    Received: Epsilon\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 3, 7, 10, 2, 14)\n          .scan((accumulator, next) -> accumulator + next)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n\n      }\n    }\n\n```", "```java\nReceived: 5\nReceived: 8\nReceived: 15\nReceived: 25\nReceived: 27\nReceived: 41\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .scan(0, (total, next) -> total + 1)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n\n      }\n}\n\n```", "```java\n    Received: 0\n    Received: 1\n    Received: 2\n    Received: 3\n    Received: 4\n    Received: 5\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .count()\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n\n      }\n}\n```", "```java\n    Received: 5\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 3, 7, 10, 2, 14)\n          .reduce((total, next) -> total + next)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\n    Received: 41\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 3, 7, 10, 2, 14)\n          .reduce(\"\", (total, next) -> total + (total.equals(\"\") ? \"\" :\n            \",\") +  next)\n              .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\n    Received: 5,3,7,10,2,14\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 3, 7, 11, 2, 14)\n          .all(i -> i < 10)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n     }\n}\n```", "```java\n    Received: false\n```", "```java\nimport io.reactivex.Observable;\nimport java.time.LocalDate;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"2016-01-01\", \"2016-05-02\", \"2016-09-12\", \n\"2016-04-03\")\n        .map(LocalDate::parse)\n        .any(dt -> dt.getMonthValue() >= 6)\n        .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: true\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.range(1,10000)\n          .contains(9563)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\n    Received: true\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toList()\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: [Alpha, Beta, Gamma, Delta, Epsilon]\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.range(1,1000)\n          .toList(1000)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toList(CopyOnWriteArrayList::new)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(6, 2, 5, 7, 1, 4, 9, 8, 3)\n          .toSortedList()\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n     }\n}\n```", "```java\nReceived: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toMap(s -> s.charAt(0))\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: {A=Alpha, B=Beta, D=Delta, E=Epsilon, G=Gamma}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toMap(s -> s.charAt(0), String::length)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\n    Received: {A=5, B=4, D=5, E=7, G=5}\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.ConcurrentHashMap;\n\npublic class Launcher {\n      public static void main(String[] args) {\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toMap(s -> s.charAt(0), String::length,   \nConcurrentHashMap::new)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toMap(String::length)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: {4=Beta, 5=Delta, 7=Epsilon}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .toMultimap(String::length)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: {4=[Beta], 5=[Alpha, Gamma, Delta], 7=[Epsilon]}\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.HashSet;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .collect(HashSet::new, HashSet::add)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: [Gamma, Delta, Alpha, Epsilon, Beta]\n```", "```java\nimport com.google.common.collect.ImmutableList;\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .collect(ImmutableList::builder, ImmutableList.Builder::add)\n          .map(ImmutableList.Builder::build)\n          .subscribe(s -> System.out.println(\"Received: \" + s));\n      }\n}\n```", "```java\n    Received: [Alpha, Beta, Gamma, Delta, Epsilon]\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n      }\n}\n\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED ERROR: java.lang.ArithmeticException: / by zero\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .onErrorReturnItem(-1)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n      }\n}\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: -1\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .onErrorReturn(e -> - 1)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n      }\n}\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> {\n            try {\n                  return 10 / i;\n                } catch (ArithmeticException e) {\n                  return -1;\n                }\n                })\n                .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n                e -> System.out.println(\"RECEIVED ERROR: \" + e)\n              );\n       }\n}\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: -1\n    RECEIVED: 3\n    RECEIVED: 5\n    RECEIVED: 1\n```", "```java\n    import io.reactivex.Observable;\n\n    public class Launcher {\n    public static void main(String[] args) {\n\n      Observable.just(5, 2, 4, 0, 3, 2, 8)\n        .map(i -> 10 / i)\n        .onErrorResumeNext(Observable.just(-1).repeat(3))\n        .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n        e -> System.out.println(\"RECEIVED ERROR: \" + e)\n        );\n      }\n    }\n\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: -1\n    RECEIVED: -1\n    RECEIVED: -1\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .onErrorResumeNext(Observable.empty())\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n      }\n}\n```", "```java\nRECEIVED: 2\nRECEIVED: 5\nRECEIVED: 2\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .onErrorResumeNext((Throwable e) ->   \nObservable.just(-1).repeat(3))\n              .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n            e -> System.out.println(\"RECEIVED ERROR: \" + e)\n            );\n       }\n}\n```", "```java\nRECEIVED: 2\nRECEIVED: 5\nRECEIVED: 2\nRECEIVED: -1\nRECEIVED: -1\nRECEIVED: -1\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n        .map(i -> 10 / i)\n        .retry()\n        .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n        e -> System.out.println(\"RECEIVED ERROR: \" + e)\n        );\n      }\n}\n```", "```java\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    ...\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .map(i -> 10 / i)\n          .retry(2)\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n      }\n}\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    RECEIVED ERROR: java.lang.ArithmeticException: / by zero\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .doOnNext(s -> System.out.println(\"Processing: \" + s))\n          .map(String::length)\n          .subscribe(i -> System.out.println(\"Received: \" + i));\n      }\n}\n```", "```java\n    Processing: Alpha\n    Received: 5\n    Processing: Beta\n    Received: 4\n    Processing: Gamma\n    Received: 5\n    Processing: Delta\n    Received: 5\n    Processing: Epsilon\n    Received: 7\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .doOnComplete(() -> System.out.println(\"Source is done   \n            emitting!\"))\n          .map(String::length)\n          .subscribe(i -> System.out.println(\"Received: \" + i));\n     }\n}\n\n```", "```java\n    Received: 5\n    Received: 4\n    Received: 5\n    Received: 5\n    Received: 7\n    Source is done emitting!\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(5, 2, 4, 0, 3, 2, 8)\n          .doOnError(e -> System.out.println(\"Source failed!\"))\n          .map(i -> 10 / i)\n          .doOnError(e -> System.out.println(\"Division failed!\"))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i),\n          e -> System.out.println(\"RECEIVED ERROR: \" + e)\n          );\n     }\n}\n```", "```java\n    RECEIVED: 2\n    RECEIVED: 5\n    RECEIVED: 2\n    Division failed!\n    RECEIVED ERROR: java.lang.ArithmeticException: / by zero\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n          .doOnSubscribe(d -> System.out.println(\"Subscribing!\"))\n          .doOnDispose(() -> System.out.println(\"Disposing!\"))\n          .subscribe(i -> System.out.println(\"RECEIVED: \" + i));\n      }\n}\n```", "```java\n    Subscribing!\n    RECEIVED: Alpha\n    RECEIVED: Beta\n    RECEIVED: Gamma\n    RECEIVED: Delta\n    RECEIVED: Epsilon\n    Disposing!\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n      public static void main(String[] args) {\n        Observable.just(5, 3, 7, 10, 2, 14)\n          .reduce((total, next) -> total + next)\n          .doOnSuccess(i -> System.out.println(\"Emitting: \" + i))\n          .subscribe(i -> System.out.println(\"Received: \" + i));\n      }\n}\n```", "```java\n    Emitting: 41\n    Received: 41\n```"]