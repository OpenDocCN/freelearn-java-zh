- en: The Java 9 Landscape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9的景象
- en: Java is already a fully-grown adult in its own right more than two decades since
    its first release. With a stunning community of developers and wide adoption in
    a number of industries, the platform continues to evolve and keep up with the
    rest of the world in terms of performance, security, and scalability. We will
    begin our journey by exploring the most significant features introduced in Java
    9, what are the biggest drivers behind them, and what more we can expect in subsequent
    developments of the platform, along with some of the things that did not make
    it in this release.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Java自从第一个版本发布以来，已经是一个成熟的成年人了。拥有令人惊叹的开发者社区，并在多个行业中得到广泛应用，该平台继续发展和与世界其他地区保持一致，无论是在性能、安全性还是可扩展性方面。我们将从探索Java
    9引入的最显著特性开始，探讨它们背后的最大推动力，以及我们可以在平台后续发展中期待什么，以及一些没有包含在本版本中的内容。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Java 9 at 20,000 feet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 9从20,000英尺的高度看
- en: Breaking the monolith
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破单体架构
- en: Playing around with the Java Shell
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java Shell中玩耍
- en: Taking control of external processes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 掌控外部进程
- en: Boosting performance with G1
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用G1提升性能
- en: Measuring performance with JMH
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JMH测量性能
- en: Getting ready for HTTP 2.0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备迎接HTTP 2.0
- en: Encompassing reactive programming
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含响应式编程
- en: Expanding the wish list
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展愿望清单
- en: Java 9 at 20,000 feet
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9从20,000英尺的高度看
- en: You might be asking yourself--isn't Java 9 just a maintenance release with a
    set of features that did not make it into Java 8? There is plenty of new stuff
    in Java 9 that makes it a distinct version in its own right.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己——Java 9不就是一个包含了一些没有进入Java 8的特性的维护版本吗？Java 9中有很多新特性，使其成为一个独特的版本。
- en: Inarguably, the modularization of the Java platform (developed as part of project
    Jigsaw) is the biggest piece of work that makes it successfully in Java 9\. Initially
    planned for Java 8, but postponed, project Jigsaw is also one of the main reasons
    why the final release of Java 9 was further postponed. Jigsaw also introduces
    a few notable changes to the Java platform and is one of the reasons Java 9 is
    considered a major release. We will explore these features in detail in the subsequent
    chapters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Java平台（作为Jigsaw项目的一部分开发）的模块化是使其在Java 9中成功的关键部分。最初计划在Java 8中实施，但被推迟，Jigsaw项目也是Java
    9最终发布进一步推迟的主要原因之一。Jigsaw还引入了Java平台的一些显著变化，这也是Java 9被认为是重大版本的原因之一。我们将在后续章节中详细探讨这些特性。
- en: 'The **JCP** (**Java Community Process**) provides the mechanisms to turn a
    set of feature proposals (also known as **Java Enhancement Proposals** or **JEPs**)
    into formal specifications that provide the basis to extend the platform with
    new functionality. Java 9 is no different in that regard. Apart from the Jigsaw-related
    Java enhancement proposals, there is a long list of other enhancements that made
    it in Java 9\. Throughout this book, we will discuss the various features in terms
    of logical groups based on the corresponding enhancement proposals, including
    the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**JCP**（**Java社区进程**）提供了将一组特性提案（也称为**Java增强提案**或**JEPs**）转化为正式规范的手段，这些规范为通过新功能扩展平台提供了基础。在这方面，Java
    9并无不同。除了与Jigsaw相关的Java增强提案外，还有许多其他增强功能被纳入Java 9。在本书中，我们将根据相应的增强提案，以逻辑组的形式讨论各种特性，包括以下内容：'
- en: The **Java Shell** (also called **JShell**)--an interactive shell for the Java
    platform
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java Shell**（也称为**JShell**）——Java平台的交互式Shell'
- en: New APIs to work with operating system processes in a portable manner
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的API，用于以可移植的方式与操作系统进程一起工作
- en: The **Garbage-first** (**G1**) garbage collector introduced in Java 7 is made
    the default garbage collector in Java 9
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Java 7中引入的**垃圾收集器**（**G1**）在Java 9中被设置为默认的垃圾收集器
- en: Adding the **Java Microbenchmark Harness** (**JMH**) tool that can be used to
    run performance benchmarks against Java applications is included as part of the
    Java distribution
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加**Java微基准工具**（**JMH**），该工具可以用于对Java应用程序进行性能基准测试，作为Java发行版的一部分
- en: Support for the HTTP 2.0 and WebSocket standards by means of a new client API
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过新的客户端API支持HTTP 2.0和WebSocket标准
- en: Concurrency enhancements among which is the definition of the `Flow` class,
    which describes an interface for the reactive streams specification in the Java
    platform
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发增强，其中定义了`Flow`类，该类描述了Java平台中响应式流规范的接口
- en: Some of the initial proposals that were accepted for release 9 did not make
    it there and were postponed for a later release, along with other interesting
    things that developers may expect in the future.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最初被接受用于发布 9 的提案没有成功实现，并推迟到了以后的版本，以及其他开发者可能期待的未来有趣事物。
- en: You can download the JDK 9 distribution for your system from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html),
    if you are eager to get your hands dirty before trying to move through the other
    chapters and experimenting with the newly introduced samples and concepts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您渴望在尝试浏览其他章节和尝试新引入的示例和概念之前动手实践，可以从 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    下载适用于您系统的 JDK 9 分发版。
- en: Breaking the monolith
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打破单体
- en: Over the years, the utilities of the Java platform have continued to evolve
    and increase, making it one big monolith. In order to make the platform more suitable
    for embedded and mobile devices, the publication of stripped down editions such
    as Java CDC and Java ME was necessary. These, however, did not prove to be flexible
    enough for modern applications with varying requirements in terms of functionality
    provided by the JDK. In that regard, the need for a modular system came in as
    a viral requirement, not only to address modularization of the Java utilities
    (overall, more than 5000 Java classes and 1500 C++ source files with more than
    25,0000 lines of code for the Hotspot runtime), but also to provide a mechanism
    for developers to create and manage modular applications using the same module
    system used in the JDK. Java 8 provided an intermediate mechanism to enable applications
    to use only a subset of the APIs provided by the entire JDK, and that mechanism
    was named compact profiles. In fact, compact profiles also provided the basis
    for further work that had to be done in order to break dependencies between the
    various distinct components of the JDK required to enable implementation of a
    module system in Java.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 几年来，Java 平台的实用性持续发展和增加，使其成为了一个庞大的单体。为了使平台更适合嵌入式和移动设备，有必要发布简化版，如 Java CDC 和 Java
    ME。然而，这些版本在满足 JDK 提供的功能性方面变化多端的应用需求时，证明还不够灵活。在这方面，模块化系统的需求变得迫切，不仅是为了解决 Java 工具的模块化（总体而言，超过
    5000 个 Java 类和 1500 个 C++ 源文件，Hotspot 运行时拥有超过 25,0000 行代码），而且还为了提供一个机制，让开发者可以使用与
    JDK 中相同的模块系统来创建和管理模块化应用程序。Java 8 提供了一种中间机制，允许应用程序仅使用整个 JDK 提供的 API 子集，这种机制被命名为紧凑配置文件。实际上，紧凑配置文件还为后续工作奠定了基础，这些工作是为了打破
    JDK 各个不同组件之间的依赖关系，从而实现 Java 中的模块化。
- en: The module system itself has been developed under the name of project Jigsaw
    on the basis of which several Java enhancement proposals and a target JSR (376)
    were formed. Much was put in place to address the requirements of project Jigsaw--there
    was evidence of concept implementation with more features proposed than the ones
    that successfully made it into Java 9\. Apart from that, a complete restructuring
    of the JDK code base has been made along with a complete reorganization of the
    JDK distributable images.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化系统本身是在名为 Jigsaw 项目的名称下开发的，基于此，形成了几个 Java 增强提案和一个目标 JSR（376）。为了满足 Jigsaw 项目的需求，已经做了很多工作——有概念实现的经验，提出的特性比成功进入
    Java 9 的特性要多。除此之外，还对 JDK 代码库进行了完全重构，并对 JDK 可分发镜像进行了完全重组。
- en: There was considerable controversy in the community as to whether an existing
    and mature Java module system such as OSGi should be adopted as part of the JDK
    instead of providing a completely new module system. However, OSGI targets runtime
    behavior such as the resolution of module dependencies, installation, uninstallation,
    starting and stopping of modules (also named bundles in terms of OSGI), custom
    module classloaders, and so on. Project Jigsaw however targets a compile-time
    module system where resolution of dependencies happen when the application is
    compiled. Moreover, installing and uninstalling a module as part of the JDK eliminates
    the need to include it as a dependency explicitly during compilation. Furthermore,
    loading of module classes is made possible through the existing hierarchy of classloaders
    (the bootstrap and the extension and system classloaders), although, there was
    a possibility of using custom module classloaders pretty much similar to the module
    classloaders of OSGI. The latter was, however, abandoned; we will discuss Java
    module classloading in more detail when we talk about the details of the module
    system in Java.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在社区中，关于是否应该采用现有的成熟 Java 模块系统（如 OSGi）作为 JDK 的一部分，而不是提供一个全新的模块系统，存在相当大的争议。然而，OSGi
    针对运行时行为，如模块依赖的解析、安装、卸载、模块（在 OSGi 中也称为捆绑包）的启动和停止、自定义模块类加载器等。然而，Project Jigsaw 针对的是编译时模块系统，其中依赖关系的解析发生在应用程序编译时。此外，将模块作为
    JDK 的一部分进行安装和卸载，消除了在编译时显式将其作为依赖项包含的需要。此外，通过现有的类加载器层次结构（引导、扩展和系统类加载器），可以实现模块类的加载，尽管，使用与
    OSGi 模块类加载器相当的自定义模块类加载器是可能的。然而，后者已被放弃；当我们讨论 Java 模块系统细节时，我们将更详细地讨论 Java 模块类加载。
- en: Additional benefits from the Java module system include enhanced security and
    performance. By modularizing the JDK and applications into Jigsaw modules, we
    are able to create well-defined boundaries between components and their corresponding
    domains. This separation of concerns aligns with the security architecture of
    the platform and is an enabler of better resource utilization. We have dedicated
    two detailed chapters to all of the preceding points, and to the topic of adopting
    Java 9 as well, which also requires a degree of understanding on the possible
    approaches to migrating existing projects to Java 9.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Java 模块系统带来的额外好处包括增强的安全性和性能。通过将 JDK 和应用程序模块化成 Jigsaw 模块，我们能够在组件及其对应的领域之间创建明确的边界。这种关注点的分离与平台的安全架构相一致，并且是提高资源利用率的推动力。我们专门用两章详细介绍了所有上述要点，以及采用
    Java 9 的主题，这也需要对将现有项目迁移到 Java 9 的可能方法有一定的了解。
- en: Playing around with the Java Shell
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Java Shell 中玩耍
- en: For a long time, there has been no standard shell shipped with the Java programming
    language to experiment with new language features or libraries or for rapid prototyping.
    If you wanted to do this, you could write a test application with a main method,
    compile it with `javac`, and run it. This could be done either at the command
    line or using a Java IDE; however, in both cases, this is not as convenient as
    having an interactive shell for the purpose.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 很长一段时间以来，Java 编程语言没有提供标准 shell 以供实验新的语言特性或库，或者用于快速原型设计。如果您想这样做，可以编写一个带有 main
    方法的测试应用程序，使用 `javac` 编译它，然后运行。这可以在命令行或使用 Java IDE 中完成；然而，在这两种情况下，这都不如拥有一个交互式 shell
    来得方便。
- en: 'Starting an interactive shell in JDK 9 is as simple as running the following
    command (assuming the `bin` directory of your JDK 9 installation is in the current
    path):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JDK 9 中启动交互式 shell 与运行以下命令一样简单（假设 JDK 9 安装中的 `bin` 目录位于当前路径）：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You may find it somewhat puzzling that an interactive shell has not been introduced
    earlier in the Java platform as many programming languages, such as Python, Ruby,
    and a number of others, already come with an interactive shell in their earliest
    versions; However, this had still not made it on the priority features list for
    the earlier Java releases, until now, and it is out there and ready for use. The
    Java shell makes use of a JShell API that provides capabilities to enable autocompletion
    or evaluation of expressions and code snippets, among other features. A full chapter
    is dedicated to discussing the details of the Java shell so that developers can
    make the best use out of it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得有些困惑，因为在 Java 平台上，交互式外壳之前没有被引入，就像许多编程语言（如 Python、Ruby 以及其他一些语言）在它们的早期版本中已经包含了交互式外壳一样；然而，这仍然没有成为早期
    Java 版本的优先功能列表，直到现在，它已经出现并准备好使用。Java 外壳利用了 JShell API，该 API 提供了启用自动完成或评估表达式和代码片段等功能。有一整章专门讨论
    Java 外壳的细节，以便开发者能够最大限度地利用它。
- en: Taking control of external processes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 JDK 9 之前，如果你想要创建一个 Java 进程并处理进程的输入/输出，你必须使用 `Runtime.getRuntime.exec()` 方法，它允许我们在单独的
    OS 进程中执行一个命令，并获取一个 `java.lang.Process` 实例，通过它提供某些操作来管理外部进程，或者使用新的 `java.lang.ProcessBuilder`
    类，它在与外部进程交互方面提供了一些增强，并创建了一个 `java.lang.Process` 实例来表示外部进程。这两种机制都不灵活，也不便携，因为外部进程执行的命令集高度依赖于操作系统（需要付出额外的努力才能使特定的进程操作在多个操作系统之间便携）。有一章专门介绍新的进程
    API，为开发者提供创建和管理外部进程的更简单方式的知识。
- en: Up to JDK 9, if you wanted to create a Java process and handle process input/output,
    you had to use either the `Runtime.getRuntime.exec()` method, which allows us
    to execute a command in a separate OS process and get a `java.lang.Process` instance
    over which to provide certain operations in order to manage the external process,
    or use the new `java.lang.ProcessBuilder` class with some more enhancements in
    regard to interacting with the external process and also create a `java.lang.Process`
    instance to represent the external process. Both mechanisms were inflexible and
    also non-portable as the set of commands executed by the external processes were
    highly dependent on the operating system (additional effort had to be exerted
    in order to make the particular process operations portable across multiple operating
    systems). A chapter is dedicated to the new process API, providing developers
    with the knowledge of creating and managing external processes in a much easier
    way.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 控制外部进程
- en: Boosting performance with G1
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 G1 提升性能
- en: The G1 garbage collector was already introduced in JDK 7 and is now enabled
    by default in JDK 9\. It is targeted for systems with multiple processing cores
    and a lot of available memory. What are the benefits of the G1 compared to previous
    types of garbage collectors? How does it achieve these improvements? Is there
    a need to manually tune it, and in what scenarios? These, and several more questions
    regarding G1, will be discussed in a separate chapter.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: G1 垃圾收集器在 JDK 7 中已经被引入，现在在 JDK 9 中默认启用。它针对的是具有多个处理核心和大量可用内存的系统。与之前的垃圾收集器类型相比，G1
    的优势是什么？它是如何实现这些改进的？是否需要手动调整它，以及在什么场景下？这些问题以及更多关于 G1 的问题将在单独的章节中讨论。
- en: Measuring performance with JMH
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JMH 测量性能
- en: On many occasions, Java applications may suffer from performance degradation.
    Exacerbating the issue is a lack of performance tests that can provide at least
    a minimal set of guarantees that performance requirements are met and, moreover,
    the performance of certain features will not degrade over time. Measuring performance
    of Java applications is not trivial, especially due to the fact that there is
    a number of compiler and runtime optimizations that may affect performance statistics.
    For that reason, additional measures such as warm-up phases and other tricks must
    be used in order to provide more accurate performance measurements. The Java Microbenchmark
    Harness is a framework that incorporates a number of techniques along with a convenient
    API that can be used for this purpose. It is not a new tool, but is included with
    the distribution of Java 9\. If you have not added JMH to your toolbox yet, read
    the detailed chapter on the usage of JMH in the context of Java 9 application
    development.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，Java应用程序可能会遭受性能下降。加剧这个问题的是缺乏性能测试，这些测试至少可以提供一组保证，即满足性能要求，而且某些功能的性能不会随时间下降。测量Java应用程序的性能并不简单，特别是由于存在许多可能影响性能统计信息的编译器和运行时优化。因此，必须使用额外的措施，如预热阶段和其他技巧，以提供更准确的性能测量。Java
    Microbenchmark Harness是一个框架，它结合了多种技术，并提供了方便的API，可用于此目的。它不是一个新工具，但包含在Java 9的发行版中。如果您还没有将JMH添加到您的工具箱中，请阅读关于在Java
    9应用程序开发中使用JMH的详细章节。
- en: Getting started with HTTP 2.0
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用HTTP 2.0
- en: HTTP 2.0 is the successor of the HTTP 1.1 protocol, and this new version of
    the protocol addresses some limitations and drawbacks of the previous one. HTTP
    2.0 improves performance in several ways and provides capabilities such as request/response
    multiplexing in a single TCP connection, sending of responses in a server-push,
    flow control, and request prioritization, among others.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 2.0是HTTP 1.1协议的继任者，这个新版本的协议解决了前一个版本的一些局限性和缺点。HTTP 2.0在多个方面提高了性能，并提供了如请求/响应多路复用、服务器推送响应、流量控制和请求优先级等功能。
- en: Java provides the `java.net.HttpURLConnection` utility that can be used to establish
    a non-secure HTTP 1.1 connection. However, the API was considered difficult to
    maintain and further extended with the support for HTTP 2.0 and, so, an entirely
    new client API was introduced in order to establish a connection via the HTTP
    2.0 or the web socket protocols. The new HTTP 2.0 client, along with the capabilities
    it provides, will be covered in a dedicated chapter.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Java提供了`java.net.HttpURLConnection`实用工具，可用于建立非安全的HTTP 1.1连接。然而，该API被认为难以维护，并且随着对HTTP
    2.0的支持而进一步扩展，因此引入了一个全新的客户端API，用于通过HTTP 2.0或WebSocket协议建立连接。新的HTTP 2.0客户端及其提供的能力将在专门的章节中介绍。
- en: Encompassing reactive programming
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含响应式编程
- en: Reactive programming is a paradigm used to describe a certain pattern for propagation
    of changes in a system. Reactiveness is not built in Java itself, but reactive
    data flows can be established using third-party libraries such as RxJava or project
    Reactor (part of the Spring Framework). JDK 9 also addresses the need for an API
    that aids the development of highly-responsive applications built around the idea
    of reactive streams by providing the `java.util.concurrent.Flow` class for the
    purpose. The `Flow` class, along with other related changes introduced in JDK
    9, will be covered in a separate chapter.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式编程是一种用于描述系统变化传播特定模式的范式。响应性并非Java本身所固有的，但可以使用RxJava或项目Reactor（Spring框架的一部分）等第三方库建立响应式数据流。JDK
    9也通过提供`java.util.concurrent.Flow`类来满足开发基于响应式流理念的高度响应性应用程序的API需求。`Flow`类以及JDK 9中引入的其他相关更改将在单独的章节中介绍。
- en: Expanding the wish list
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展愿望清单
- en: 'Apart from all of the new stuff in JDK 9, a whole new set of features is expected
    in future releases of the platform. Among these are the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 除了JDK 9中的所有新功能外，平台未来版本预计还将引入一系列全新的功能。其中以下是一些：
- en: '**Generics over primitive types**: This is one of the features planned for
    JDK 10 as part of project Valhalla. Other language enhancements, such as value
    handles, are already part of Java 9 and will be introduced later in this book.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始类型上的泛型**：这是JDK 10计划中的功能之一，作为Valhalla项目的一部分。其他语言增强功能，如值处理，已经包含在Java 9中，并将在此书的后续章节中介绍。'
- en: '**Reified generics**: This is another featured part of project Valhalla that
    aims to provide the ability to preserve generic types at runtime. The related
    goals are listed as follows:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具现泛型**：这是Valhalla项目另一个特色部分，旨在提供在运行时保留泛型类型的能力。相关目标如下：'
- en: The foreign functional interface aims to introduce a new API to call and manage
    native functions. The API addresses some of the drawbacks of JNI and especially
    a lack of simplicity for use by application developers. The foreign functional
    interface is developed as part of project Panama in the JDK ecosystem.
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部功能接口旨在引入一个新的API来调用和管理本地函数。该API解决了JNI的一些缺点，特别是为应用程序开发者使用时的缺乏简便性。外部功能接口是作为JDK生态系统中的Panama项目的一部分开发的。
- en: New money and currency API (developed under JSR 354) was initially planned for
    Java 9, but was postponed.
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的货币和货币API（在JSR 354下开发）最初计划在Java 9中推出，但被推迟。
- en: New lightweight JSON API (developed under JSR 353) was also planned for Java
    9, but postponed to Java 10.
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的轻量级JSON API（在JSR 353下开发）也计划在Java 9中推出，但推迟到Java 10。
- en: These are just some of the new things one may expect in subsequent releases
    of the JDK. Project Penrose aims to bridge the gap between the module system in
    Java and the OSGi module system, and to provide different methodologies for interoperability
    between the two systems.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是JDK后续版本中可能期待的一些新功能。Penrose项目旨在弥合Java模块系统与OSGi模块系统之间的差距，并为两个系统之间的互操作性提供不同的方法。
- en: The Graal VM is another interesting research project that is a potential candidate
    for subsequent releases of the Java platform. It aims to bring the runtime performance
    of Java to dynamic languages such as JavaScript or Ruby.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Graal VM是另一个有趣的研究项目，是Java平台后续版本的一个潜在候选者。它旨在将Java的运行时性能提升到动态语言如JavaScript或Ruby的水平。
- en: A chapter dedicated to the future of JDK discusses all of these points in detail.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一章专门讨论JDK的未来，详细讨论了所有这些观点。
- en: Summary
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this brief introductory chapter, we revealed the small universe of capabilities
    provided by JDK 9\. The module system introduced in this release of the platform
    is indisputably a cornerstone in the development of Java applications. We also
    discovered that a number of other major features and changes are introduced in
    JDK 9 that deserve special attention and will be discussed in great detail in
    subsequent chapters.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一简短的介绍性章节中，我们揭示了JDK 9提供的功能小宇宙。在这个平台版本中引入的模块系统无疑是Java应用程序开发的一个基石。我们还发现，JDK
    9中引入了许多其他重要功能和变更，值得特别关注，将在后续章节中详细讨论。
- en: In the next chapter, we will take a look at 26 internal changes to the Java
    platform.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Java平台26项内部变更。
