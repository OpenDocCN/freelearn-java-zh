["```java\n@Stateless\npublic class MySessionBean {\n\n  @Deprecated\n  public void oldMethod(){}\n\n    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)\n  public void save(){}\n}\n```", "```java\n@Stateless\npublic class MySessionBean {\n\n  @javax.annotation.Resource\n  private SessionContext sctx;\n\n  //...\t\n}\n@ManagedBean\npublic class MyJsfManagedBean {\n  @javax.annotation.Resource\n  private SessionContext sctx;\n  //...\n}\n```", "```java\npublic @interface Unfinished {\n  String message() default \"Nothing has been done\";\n}\n```", "```java\n@Target({ElementType.METHOD, ElementType.TYPE, ElementType.FIELD})\n@Retention(RetentionPolicy.SOURCE)\npublic @interface Unfinished {\n  String message() default \"Nothing has been done\";\n}\n```", "```java\npublic class App {\n    @Unfinished(message = \"Make sure that this element is not null\")\n    String size;\n\n    @Unfinished\n    public static void main(String[] args) {\n        System.out.println(\"Hello World annotation!\");\n    }\n}\n```", "```java\n@SupportedAnnotationTypes(\"com.packt.ch07.annotations.Unfinished\")\npublic class UnfinishedProcessor extends AbstractProcessor {\n\n  /**\n  * For the ServiceLoader\n  */\n  public UnfinishedProcessor() {\n  }\n\n  @Override\n  public boolean process(Set<? extends TypeElement>annotations, RoundEnvironment roundEnv) {\n    try {\n      //For each annotated element do ...\n      for (Element e :roundEnv.getElementsAnnotatedWith(Unfinished.class)) {        \n        Unfinished unf = e.getAnnotation(Unfinished.class);\n        System.out.println(\"***** Class :\"+e.getEnclosingElement()+\", \"+ \"Annotated element : \" + e.getSimpleName()+\", \"+ \" Kind : \"+e.getKind()+\", Message :\"+unf.message()+\"**** \");                \n      }\n    } catch (Exception ex) {\n      ex.printStackTrace();\n    }\n    return true;\n  }\n}\n```", "```java\n***** Class :com.packt.ch07.App, Annotated element : size,  Kind : FIELD, Message : Make sure that this element is not null****\n***** Class :com.packt.ch07.App, Annotated element : main,  Kind : METHOD, Message : Nothing has been done****\n```", "```java\n@ManagedBean\npublic class MyManagedBean {\n\n  IHelloWorld hw = new HelloWorld();\n\n  public String getMyHelloWorld(){\n    return hw.getHelloWorld();\n  }\n}\npublic class HelloWorld implements IHelloWorld{\n\n  @Override\n  public String getHelloWorld() {\n    return \"Hello World\";\n  }    \n}\n```", "```java\n@ManagedBean\npublic class MyManagedBean {\n\n    @Inject\n    IHelloWorld hw;\n\n    public String getMyHelloWorld(){\n        return hw.getHelloWorld();\n    }\n}\n```", "```java\n@RequestScoped\npublic class HelloWorld implements IHelloWorld{\n\n  //...    \n}\n```", "```java\n@Stateless\npublic class MyEJB implements IMyEJB{\n\n  public String getHelloWorld(){\n    return \"Hello world By EJB\";\n  }\n}\n```", "```java\n@ManagedBean\npublic class MyManagedBean {\n\n  @EJB\n  IMyEJB ejb;\n\n  public String getMyEjbHelloWorld(){\n    return ejb.getHelloWorld();\n  }\n}\n```", "```java\nHello EJB\n <br/>\n The message : #{myManagedBean.myEjbHelloWorld}\n```", "```java\n@Named\n@Stateless\npublic class MyEJB implements IMyEJB {\n  //...\n}\n```", "```java\nCDI Hello EJB\n\n<br/>\nThe message : #{myEJB.helloWorld}\n```", "```java\n@ApplicationScoped\npublic class MySingletonBean {\n    //...\n}\n```", "```java\n@Stateless\npublic class SendMessageBean {\n\n  @Resource(name = \" java:global/jms/javaee7ConnectionFactory\")\n  private ConnectionFactory connectionFactory;\n  @Resource(name = \" java:global/jms/javaee7Queue\")\n  private Queue queue;\n\n  public void sendMessage(String message) {\n    try {\n      Connection connection =connectionFactory.createConnection();\n      Session session = connection.createSession(false,Session.AUTO_ACKNOWLEDGE);\n      MessageProducer messageProducer =session.createProducer(queue);\n      TextMessage textMessage =session.createTextMessage(message);\n      messageProducer.send(textMessage);\n      connection.close();\n    } catch (JMSException ex) {\n      // handle exception (details omitted)\n    }\n  }\n}\n```", "```java\n@Stateless\npublic class SendMessageBean2 {\n\n  @Inject\n  JMSContext context;\n  @Resource(lookup = \"java:global/jms/javaee7Queue\")\n  Queue queue;\n\n  public void sendMessage(String message) {\n    context.createProducer().send(queue, message);\n  }\n}\n```", "```java\n@Entity\n@Vetoed\npublic class Student implements Serializable {\n  @Id\n  private String id;\n  private String firstname;\n\n  //...\n}\n```", "```java\nUnmanaged<Student> unmanagedBean = newUnmanaged<Student>(Student.class);\nUnmanagedInstance<Student> beanInstance =unmanagedBean.newInstance();\nStudent foo =beanInstance.produce().inject().postConstruct().get();\n// Usage of the injected bean\nbeanInstance.preDestroy().dispose();\n```", "```java\nCDI container = CDI.current();\ncontainer.destroy(destroableManagedInstance);\n```"]