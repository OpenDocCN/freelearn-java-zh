["```java\nfunction editContact(contactId) {\n  contactService.get(contactId, function(data) {\n    contactForm.setName(data.name);\n    contactForm.setPhone(data.phone);\n    contactForm.setEmail(data.email);\n  })\n}\n```", "```java\n$(\"save-button\").click(function(){\n  contactService.update(contactForm.serialize(), function(){\n    flashMessage.set(\"Contact Updated.\")\n  })\n```", "```java\n// JS\n// in the Controller\n$scope.contact = {\n  name: 'Leonardo Borges',\n  phone '+61 xxx xxx xxx',\n  email: 'leonardoborges.rj@gmail.com'\n}\n\n<!-- HTML -->\n<!-- in the View -->\n<form>\n  <input type=\"text\" name=\"contactName\"  ng-model=\"contact.name\"/>\n  <input type=\"text\" name=\"contactPhone\" ng-model=\"contact.phone\"/>\n  <input type=\"text\" name=\"contactEmail\" ng-model=\"contact.email\"/>\n</form>\n```", "```java\ndocument.getElementsByName(\"sum\")[0].value = 1 + 2  \n// Operations per second: 2,090,202\n\n1 + 2  \n// Operations per second: 780,538,120\n```", "```java\n(conj [1 2 3] 4) ;; [1 2 3 4]\n```", "```java\n(def app-state\n  (atom {:contacts {1 {:id    1\n                       :name  \"James Hetfield\"\n                       :email \"james@metallica.com\"\n                       :phone \"+1 XXX XXX XXX\"}\n                    2 {:id    2\n                       :name  \"Adam Darski\"\n                       :email \"the.nergal@behemoth.pl\"\n                       :phone \"+48 XXX XXX XXX\"}}\n         :selected-contact-id []\n         :editing [false]}))\n```", "```java\nlein new om-start contacts\ncd contacts\n\n```", "```java\n...\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.clojure/clojurescript \"0.0-2277\"]\n                 [org.clojure/core.async \"0.1.338.0-5c5012-alpha\"]\n                 [om \"0.7.1\"]\n                 [com.facebook/react \"0.11.1\"]]\n...\n```", "```java\nlein cljsbuild auto\nCompiling ClojureScript.\nCompiling \"dev-resources/public/js/contacts.js\" from (\"src/cljs\" \"dev-resources/tools/repl\")...\nSuccessfully compiled \"dev-resources/public/js/contacts.js\" in 9.563 seconds.\n\n```", "```java\n(ns contacts.core\n  (:require [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true]))\n\n(enable-console-print!)\n\n(def app-state\n  (atom {:contacts {1 {:id    1\n                       :name  \"James Hetfield\"\n                       :email \"james@metallica.com\"\n                       :phone \"+1 XXX XXX XXX\"}\n                    2 {:id    2\n                       :name  \"Adam Darski\"\n                       :email \"the.nergal@behemoth.pl\"\n                       :phone \"+48 XXX XXX XXX\"}}\n         :selected-contact-id []\n         :editing [false]}))\n\n(om/root\n  contacts-app\n  app-state\n  {:target (. js/document (getElementById \"app\"))})\n```", "```java\n(defn contacts-app [data owner]\n  (reify\n    om/IRender\n    (render [this]\n      (let [[selected-id :as selected-id-cursor] \n            (:selected-contact-id data)]\n        (dom/div nil\n                 (om/build contacts-view\n                           {:contacts            (:contacts data)\n                            :selected-id-cursor selected-id-cursor})\n                 (om/build details-panel-view\n                           {:contact        (get-in data [:contacts selected-id])\n                            :editing-cursor (:editing data)}))))))\n```", "```java\nWhen describing om/root, we saw that its first argument must be an Om component. The contact-app function creates one by reifying the om/IRender protocol. This protocol contains a single function—render—which gets called when the application state changes.\n```", "```java\n(let [[selected-id :as selected-id-cursor] \n      (:selected-contact-id data)]\n  ...)\n```", "```java\n(dom/div nil\n                 (om/build contacts-view\n                           {:contacts            (:contacts data)\n                            :selected-id-cursor selected-id-cursor})\n                 (om/build details-panel-view\n                           {:contact        (get-in data [:contacts selected-id])\n                            :editing-cursor (:editing data)}))\n```", "```java\n(defn contacts-view [{:keys [contacts selected-id-cursor]} owner]\n  (reify\n    om/IRender\n    (render [_]\n      (dom/div #js {:style #js {:float \"left\"\n                                            :width \"50%\"}}\n               (apply dom/ul nil\n                      (om/build-all contact-summary-view (vals contacts)\n                                    {:shared {:selected-id-cursor selected-id-cursor}}))))))\n```", "```java\n(apply dom/ul nil\n                      (om/build-all contact-summary-view (vals contacts)\n                                    {:shared {:selected-id-cursor selected-id-cursor}}))\n```", "```java\n  (defn contact-summary-view [{:keys [name phone] :as contact} owner]\n  (reify\n    om/IRender\n    (render [_]\n      (dom/li #js {:onClick #(select-contact! @contact\n                                              (om/get-shared owner :selected-id-cursor))}\n              (dom/span nil name)\n              (dom/span nil phone)))))\n```", "```java\n@contact\n```", "```java\n(defn select-contact! [contact selected-id-cursor]\n  (om/update! selected-id-cursor 0 (:id contact)))\n```", "```java\n(defn details-panel-view [data owner]\n  (reify\n    om/IRender\n    (render [_]\n      (dom/div #js {:style #js {:float \"right\"\n                                :width \"50%\"}}\n               (om/build contact-details-view data)\n               (om/build contact-details-form-view data)))))\n```", "```java\n(defn contact-details-view [{{:keys [name phone email id] :as contact} :contact\n                             editing :editing-cursor}\n                            owner]\n  (reify\n    om/IRender\n    (render [_]\n      (dom/div #js {:style #js {:display (if (get editing 0) \"none\" \"\")}}\n             (dom/h2 nil \"Contact details\")\n             (if contact\n               (dom/div nil\n                        (dom/h3 #js {:style #js {:margin-bottom \"0px\"}} (:name contact))\n                        (dom/span nil (:phone contact)) (dom/br nil)\n                        (dom/span nil (:email contact)) (dom/br nil)\n                        (dom/button #js {:onClick #(om/update! editing 0 true)}\n                                    \"Edit\"))\n               (dom/span nil \"No contact selected\"))))))\n```", "```java\n(defn contact-details-form-view [{{:keys [name phone email id] :as contact} :contact\n                                  editing :editing-cursor}\n                                 owner]\n  (reify\n    om/IRender\n    (render [_]\n      (dom/div #js {:style #js {:display (if (get editing 0) \"\" \"none\")}}\n               (dom/h2 nil \"Contact details\")\n               (if contact\n                 (dom/div nil\n                          (dom/input #js {:type \"text\"\n                                                   :value name\n                                                   :onChange #(update-contact! % contact :name)})\n                          (dom/input #js {:type \"text\"\n                                                   :value phone\n                                                   :onChange #(update-contact! % contact :phone)})\n                          (dom/input #js {:type \"text\"\n                                                   :value email\n                                                   :onChange #(update-contact! % contact :email)})\n                          (dom/button #js {:onClick #(om/update! editing 0 false)}\n                                                    \"Save\"))\n               (dom/div nil \"No contact selected\"))))))\n```", "```java\n(defn update-contact! [e contact key]\n  (om/update! contact key (.. e -target -value)))\n```", "```java\n(. (. e -target) -value)\n```", "```java\nlein cljsbuild auto\n\n```", "```java\nlein new om-start om-pm\ncd om-pm\n\n```", "```java\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.clojure/clojurescript \"0.0-2511\"]\n                 [org.om/om \"0.8.1\"]\n                 [org.clojure/core.async \"0.1.346.0-17112a-alpha\"]\n                 [com.facebook/react \"0.12.2\"]]\n```", "```java\nlein cljsbuild auto\nCompiling ClojureScript.\nCompiling \"dev-resources/public/js/om_pm.js\" from (\"src/cljs\" \"dev-resources/tools/repl\")...\nSuccessfully compiled \"dev-resources/public/js/om_pm.js\" in 13.101 seconds.\n\n```", "```java\n(ns om-pm.core\n  (:require [om.core :as om :include-macros true]\n            [om.dom :as dom :include-macros true]\n            [cljs.core.async :refer [put! chan <!]]\n            [om-pm.util :refer [set-transfer-data! get-transfer-data! move-card!]])\n  (:require-macros [cljs.core.async.macros :refer [go go-loop]]))\n```", "```java\n(def cards [{:id 1\n             :title \"Groceries shopping\"\n             :description \"Almond milk, mixed nuts, eggs...\"}\n            {:id 2\n             :title \"Expenses\"\n             :description \"Submit last client's expense report\"}])\n```", "```java\n(def app-state\n  (atom {:cards cards\n         :columns [{:title \"Backlog\"\n                    :cards (mapv :id cards)}\n                   {:title \"In Progress\"\n                    :cards []}\n                   {:title \"Done\"\n                    :cards []}]}))\n```", "```java\n(defn card-by-id [id]\n  (first (filterv #(= id (:id %)) cards)))\n```", "```java\n(om/root project-view app-state\n         {:target (. js/document (getElementById \"app\"))})\n```", "```java\n(defn project-view [app owner]\n  (reify\n    om/IInitState\n    (init-state [_]\n      {:transfer-chan (chan)})\n\n    om/IWillMount\n    (will-mount [_]\n      (let [transfer-chan (om/get-state owner :transfer-chan)]\n        (go-loop []\n          (let [transfer-data (<! transfer-chan)]\n            (om/transact! app :columns \n                          #(move-card! % transfer-data))\n            (recur)))))\n\n    om/IRenderState\n    (render-state [this state]\n      (dom/div nil\n               (apply dom/ul nil\n                      (om/build-all column-view (:columns app)\n                                    {:shared     {:cards (:cards app)}\n                                     :init-state state}))))))\n```", "```java\n    om/IInitState\n    (init-state [_]\n      {:transfer-chan (chan)})\n```", "```java\n    om/IWillMount\n    (will-mount [_]\n      (let [transfer-chan (om/get-state owner :transfer-chan)]\n        (go-loop []\n          (let [transfer-data (<! transfer-chan)]\n            (om/transact! app :columns #(move-card! % transfer-data))\n            (recur)))))\n```", "```java\n...\nom/IRenderState\n    (render-state [this state]\n      (dom/div nil\n               (apply dom/ul nil\n                      (om/build-all column-view (:columns app)\n                                    {:shared     {:cards (:cards app)}\n                                     :init-state state}))))\n...\n```", "```java\n(defn column-view [{:keys [title cards]} owner]\n  (reify\n    om/IRenderState\n    (render-state [this {:keys [transfer-chan]}]\n      (dom/div #js {:style      #js {:border  \"1px solid black\"\n                                     :float   \"left\"\n                                     :height  \"100%\"\n                                     :width   \"320px\"\n                                     :padding \"10px\"}\n                    :onDragOver #(.preventDefault %)\n                    :onDrop     #(handle-drop % transfer-chan title)}\n               (dom/h2 nil title)\n               (apply dom/ul #js {:style #js {:list-style-type \"none\"\n                                              :padding         \"0px\"}}\n                      (om/build-all (partial card-view title)\n                                    (mapv card-by-id cards)))))))\n```", "```java\n(defn handle-drop [e transfer-chan column-title]\n  (.preventDefault e)\n  (let [data {:card-id            \n              (js/parseInt (get-transfer-data! e \"cardId\"))\n              :source-column      \n              (get-transfer-data! e \"sourceColumn\")\n              :destination-column \n              column-title}]\n    (put! transfer-chan data)))\n```", "```java\n(defn card-view [column {:keys [id title description] :as card} owner]\n  (reify\n    om/IRender\n    (render [this]\n      (dom/li #js {:style #js {:border \"1px solid black\"}\n                   :draggable true\n                   :onDragStart (fn [e]\n                                  (set-transfer-data! e \"cardId\" id)\n                                  (set-transfer-data! e \"sourceColumn\" column))}\n              (dom/span nil title)\n              (dom/p nil description)))))\n```", "```java\n(ns om-pm.util)\n```", "```java\n(defn column-idx [title columns]\n  (first (keep-indexed (fn [idx column]\n                         (when  (= title (:title column))\n                           idx))\n                       columns)))\n\n(defn move-card! [columns {:keys [card-id source-column destination-column]}]\n  (let [from (column-idx source-column      columns)\n        to   (column-idx destination-column columns)]\n    (-> columns\n        (update-in [from :cards] (fn [cards]\n                                   (remove #{card-id} cards)))\n        (update-in [to   :cards] (fn [cards]\n                                   (conj cards card-id))))))\n```", "```java\n(defn set-transfer-data! [e key value]\n  (.setData (-> e .-nativeEvent .-dataTransfer)\n            key value))\n\n(defn get-transfer-data! [e key]\n  (-> (-> e .-nativeEvent .-dataTransfer)\n      (.getData key)))\n```", "```java\n(:require [goog.events :as events])\n```", "```java\n (defn listen [el type]\n  (let [c (chan)]\n    (events/listen el type #(put! c %))\n    c))\n```"]