["```java\n    @Test\n    public void testReactorThread() throws Exception{\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n               sink.complete();\n            else\n                sink.next(state.getT1());\n            print(\"Generating next of \"+ state.getT2());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                })\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n                .subscribe(x -> print(\"Sub received : \"+x));\n    }\n\n    static void print(String text){\n        System.out.println(\"[\"+Thread.currentThread().getName()+\"] \"+text);\n    }\n```", "```java\n @Test\n    public void testReactorDelayThread() throws Exception{\n        // Removed for brevity\n\n        fibonacciGenerator\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                }).delayElements(Duration.ZERO)\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n                .subscribe(x -> print(\"Sub received : \"+x));\n        Thread.sleep(500);\n    }\n```", "```java\n@Test\n  public void testImmediateSchedular() throws Exception{\n\n       // Removed for Brevity\n\n        fibonacciGenerator\n                .delayElements(Duration.ofNanos(10),Schedulers.immediate())\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n            .subscribe(x -> print(\"Sub received : \"+x));\n      Thread.sleep(500);\n }\n```", "```java\n@Test\n  public void testSingleScheduler() throws Exception{\n\n       // Removed for Brevity\n\n        fibonacciGenerator\n                .delayElements(Duration.ofNanos(10),Schedulers.single())\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n           .subscribe(x -> print(\"Sub received : \"+x));\n      Thread.sleep(500);\n }\n```", "```java\n @Test\n    public void testSingleSchedulerBlockingOps() throws Exception{\n       // Removed for Brevity\n        fibonacciGenerator\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                }).delayElements(Duration.ZERO,Schedulers.single())\n                .window(10)\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"+x))\n                .subscribe(x -> print(\"Sub received : \"+x.blockFirst()));\n        Thread.sleep(500);\n    }\n```", "```java\n@Test\n    public void testParalleScheduler() throws Exception{\n\n       // Removed for Brevity\n\n        fibonacciGenerator\n                .delayElements(Duration.ofNanos(10),Schedulers.parallel())\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n           .subscribe(x -> print(\"Sub received : \"+x));\n      Thread.sleep(500);\n }\n```", "```java\nCaused by: java.lang.IllegalStateException: block()/blockFirst()/blockLast() are blocking, which is not supported in thread parallel-1\n    at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:77)\n    at reactor.core.publisher.Flux.blockFirst(Flux.java:2013)\n    at SchedulerTest.lambda$testSingleSchedulerBlockingOps$27(SchedulerTest.java:116)\n```", "```java\n@Test\n    public void testElasticSchedular() throws Exception{\n\n       // Removed for Brevity\n\n        fibonacciGenerator\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                }).delayElements(Duration.ZERO,Schedulers.elastic())\n                .window(10)\n                .doOnNext(x -> print(\"Next value is  \"+ x))\n                .doFinally(x -> print(\"Closing \"+x))\n                .subscribe(x -> print(\"Sub received : \"+x.blockFirst()));\n      Thread.sleep(500);\n }\n```", "```java\n @Test\n    public void testExecutorScheduler() throws Exception{\n        // Removed for Brevity\n\n        ExecutorService executor = Executors.newSingleThreadExecutor();\n        fibonacciGenerator\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                }).delayElements(Duration.ZERO,Schedulers.fromExecutor(executor))\n                 .doOnNext(x -> print(\"Next value is  \"+ x))\n                .doFinally(x -> print(\"Closing \"+executor.isShutdown()))\n                .subscribe(x -> print(\"Sub received : \"+x));\n        Thread.sleep(5000);\n        print(\"Is shutdown ? \"+executor.isShutdown());\n    }\n```", "```java\n    @Test\n    public void testReactorPublishOn() throws Exception{\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            print(\"Generating next of \"+ state.getT2());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator\n                .publishOn(Schedulers.single())\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                })\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n                .subscribe(x -> print(\"Sub received : \"+x));\n        Thread.sleep(500);\n    }\n```", "```java\n@Test\n    public void testReactorSubscribeOn() throws Exception{\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            print(\"Generating next of \"+ state.getT2());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator                \n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                })\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n                .subscribeOn(Schedulers.single())\n                .subscribe(x -> print(\"Sub received : \"+x));\n      Thread.sleep(500);\n }\n```", "```java\n @Test\n    public void testReactorComposite() throws Exception{\n      // Removed for Brevity\n        fibonacciGenerator\n                .publishOn(Schedulers.parallel())\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                })\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .doFinally(x -> print(\"Closing \"))\n                .subscribeOn(Schedulers.single())\n                .subscribe(x -> print(\"Sub received : \"+x));\n        Thread.sleep(500);\n    }\n```", "```java\n@Test\n    public void testParalleFlux() throws Exception{\n      // Removed for Brevity\n\n        fibonacciGenerator\n                .parallel()\n                .runOn(Schedulers.parallel())\n                .filter(x -> {\n                    print(\"Executing Filter\");\n                    return x < 100;\n                })\n                .doOnNext(x -> print(\"Next value is  \"+x))\n                .sequential()\n                .doFinally(x -> print(\"Closing \"))\n                .subscribeOn(Schedulers.single())\n                .subscribe(x -> print(\"Sub received : \"+x));\n        Thread.sleep(500);\n    }\n```", "```java\n   @Test\n    public void testReplayBroadcast() throws Exception{\n        // Removed for Brevity\n        Flux<Long> broadcastGenerator=fibonacciGenerator.doFinally(x -> {\n            System.out.println(\"Closing \");\n        }).replay().autoConnect(2);\n\n        fibonacciGenerator.subscribe(x -> System.out.println(\"[Fib] 1st : \"+x));\n        fibonacciGenerator.subscribe(x -> System.out.println(\"[Fib] 2nd : \"+x));\n\n        broadcastGenerator.subscribe(x -> System.out.println(\"1st : \"+x));\n        broadcastGenerator.subscribe(x -> System.out.println(\"2nd : \"+x));\n      }\n```", "```java\n@Test\n    public void testBroadcastWithCancel() throws Exception{\n        // removed for brevity\n\n       fibonacciGenerator=fibonacciGenerator.doFinally(x ->  System.out.println(\"Closing \"))\n       .replay().autoConnect(2);\n\n        fibonacciGenerator.subscribe(new BaseSubscriber<Long>() {\n            @Override\n            protected void hookOnSubscribe(Subscription subscription) {\n                request(1);\n            }\n\n            @Override\n            protected void hookOnNext(Long value) {\n                System.out.println(\"1st: \"+value);\n                cancel();\n            }\n        });\n\n        fibonacciGenerator.subscribe(new BaseSubscriber<Long>() {\n            @Override\n            protected void hookOnNext(Long value) {\n                System.out.println(\"2nd : \"+value);\n                cancel();\n            }\n        });\n        Thread.sleep(500);\n\n    }\n```", "```java\n @Test\n    public void testPublishBroadcast() throws Exception{\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            System.out.println(\"generating next of \"+ state.getT2());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        fibonacciGenerator=fibonacciGenerator.doFinally(x -> {\n            System.out.println(\"Closing \");\n        }).publish().autoConnect(2);\n\n        fibonacciGenerator.subscribe(new BaseSubscriber<Long>() {\n            @Override\n            protected void hookOnSubscribe(Subscription subscription) {\n                request(1);\n            }\n\n            @Override\n            protected void hookOnNext(Long value) {\n                System.out.println(\"1st: \"+value);\n            }\n        });\n\n        fibonacciGenerator.subscribe(x -> System.out.println(\"2nd : \"+x));\n        Thread.sleep(500);\n\n    }\n```"]