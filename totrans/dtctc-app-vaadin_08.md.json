["```java\n@Entity\n@Data\npublic class Call {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String client;\n\n    private String phoneNumber;\n\n    @Enumerated(EnumType.STRING)\n    private City city;\n\n    private LocalDateTime startTime;\n\n    private Integer duration;\n\n    @Enumerated(EnumType.STRING)\n    private Status status;\n}\n```", "```java\npublic enum Status {\n    RECEIVED, MISSED\n}\n\npublic enum City {\n    BOGOTA, TURKU, LONDON, BERLIN, HELSINKI, TOKYO, SAN_FRANCISCO, SIDNEY, LAGOS, VANCOUVER, SANTIAGO, BEIJING\n}\n```", "```java\n@Title(\"Report Viewer\")\npublic class VaadinUI extends UI {\n\n    private HorizontalLayout header = new HorizontalLayout();\n    private Panel panel = new Panel();\n    private MenuBar.MenuItem annualLegalReportItem;\n\n    @Override\n    protected void init(VaadinRequest vaadinRequest) {\n        MenuBar menuBar = new MenuBar();\n        menuBar.addStyleName(ValoTheme.MENUBAR_BORDERLESS);\n        MenuBar.MenuItem reportsMenuItem = menuBar.addItem(\"Reports\", VaadinIcons.FILE_TABLE, null);\n        reportsMenuItem.addItem(\"Worldwide Calls in the Last Hour\", VaadinIcons.PHONE_LANDLINE,\n                i -> showLastHourCallReport());\n        reportsMenuItem.addItem(\"Monthly Capacity Report\", VaadinIcons.BAR_CHART_H,\n                i -> showMonthlyCapacityReport());\n        annualLegalReportItem = reportsMenuItem.addItem(\"Annual Legal Report\", VaadinIcons.FILE_TEXT_O,\n                i -> generateAnnualLegalReport());\n\n        header.addComponents(menuBar);\n\n        panel.addStyleName(ValoTheme.PANEL_WELL);\n\n        VerticalLayout mainLayout = new VerticalLayout(header);\n        mainLayout.addComponentsAndExpand(panel);\n        setContent(mainLayout);\n    }\n    ...\n}\n```", "```java\n<dependency>\n    <groupId>ar.com.fdvs</groupId>\n    <artifactId>DynamicJasper</artifactId>\n    <version>5.1.0</version>\n</dependency>\n\n```", "```java\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>3.10-FINAL</version>\n</dependency>\n```", "```java\n<configuration>\n    ...\n    <mappers>\n        <mapper resource=\"mappers/ReportsMapper.xml\"/>\n    </mappers>\n</configuration>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n\n<mapper namespace=\"packt.vaadin.datacentric.chapter08.reports.ReportsMapper\">\n    ...\n</mapper>\n\n```", "```java\npublic interface ReportsMapper {\n\n    List<CallDto> findCallsBefore(LocalDateTime time);\n}\n```", "```java\n@Data\npublic class CallDto {\n    private String client;\n    private String phoneNumber;\n    private City city;\n    private LocalDateTime startTime;\n    private Integer duration;\n    private Status status;\n}\n```", "```java\n<mapper namespace=\"packt.vaadin.datacentric.chapter08.reports.ReportsMapper\">\n\n    <select id=\"findCallsBefore\" resultType=\"packt.vaadin.datacentric.chapter08.reports.CallDto\">\n        SELECT\n          city,\n          client,\n          phoneNumber,\n          startTime,\n          duration,\n          status\n        FROM Call\n        WHERE startTime >= #{time}\n        ORDER BY startTime DESC\n    </select>\n\n</mapper>\n\n```", "```java\npublic class ReportsService {\n\n    public static List<CallDto> lastHourCalls() {\n        try (SqlSession session = MyBatisService.getSqlSessionFactory().openSession()) {\n            LocalDateTime startOfHour = LocalDateTime.now().minusHours(1);\n            ReportsMapper mapper = session.getMapper(ReportsMapper.class);\n            return mapper.findCallsBefore(startOfHour);\n        }\n    }\n}\n```", "```java\nDynamicReport report = new FastReportBuilder()\n        .setTitle(\"Worldwide Calls in the Last Hour\")\n        .addAutoText(\"CONFIDENTIAL\", AutoText.POSITION_HEADER, AutoText.ALIGMENT_LEFT, 200, new Style())\n        .addAutoText(LocalDateTime.now().toString(), AutoText.POSITION_HEADER, AutoText.ALIGNMENT_RIGHT, 200, new Style())\n        .setUseFullPageWidth(true)\n        .setWhenNoData(\"(no calls)\", new Style())\n        .setPrintBackgroundOnOddRows(true)\n        .build();\n```", "```java\nDynamicReport report = new FastReportBuilder()\n        ...\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"city\", City.class)\n                .setTitle(\"City\")\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"client\", String.class)\n                .setTitle(\"Client\")\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"phoneNumber\", String.class)\n                .setTitle(\"Phone number\")\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"startTime\", LocalDateTime.class)\n                .setTitle(\"Date\")\n                .setTextFormatter(DateTimeFormatter.ISO_DATE.toFormat())\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"startTime\", LocalDateTime.class)\n                .setTextFormatter(DateTimeFormatter.ISO_LOCAL_TIME.toFormat())\n                .setTitle(\"Start time\")\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"duration\", Integer.class)\n                .setTitle(\"Minutes\")\n                .build())\n        .addColumn(ColumnBuilder.getNew()\n                .setColumnProperty(\"status\", Status.class)\n                .setTitle(\"Status\").build())\n        .build();\n\n```", "```java\nList<CallDto> calls = ReportsService.lastHourCalls();\nJasperPrint print = DynamicJasperHelper.generateJasperPrint(report, new ClassicLayoutManager(), calls);\n\n```", "```java\nByteArrayOutputStream outputStream = new ByteArrayOutputStream()\nHtmlExporter exporter = new HtmlExporter();\nexporter.setExporterOutput(new SimpleHtmlExporterOutput(outputStream));\nexporter.setExporterInput(new SimpleExporterInput(print));\nexporter.exportReport();\n\noutputStream.flush();\nLabel htmlLabel = new Label(\"\", ContentMode.HTML);\nhtmlLabel.setValue(outputStream.toString(\"UTF-8\"));\n\n```", "```java\npublic class LastHourCallReport extends Composite {\n\n    public LastHourCallReport() {\n        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n            DynamicReport report = new FastReportBuilder()\n                    ...\n                    .build();\n            ...\n\n            Label htmlLabel = new Label(\"\", ContentMode.HTML);\n            htmlLabel.setValue(outputStream.toString(\"UTF-8\"));\n            setCompositionRoot(htmlLabel);\n\n        } catch (JRException | IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```", "```java\nDynamicReportBuilder reportBuilder = new FastReportBuilder()\n        .setUseFullPageWidth(true)\n        .setTitle(\"Monthly Capacity Report\")\n        .setWhenNoData(\"(no data)\", new Style())\n        .addAutoText(\"CONFIDENTIAL\", AutoText.POSITION_HEADER, AutoText.ALIGMENT_LEFT, 200, new Style())\n        .addAutoText(LocalDateTime.now().toString(), AutoText.POSITION_HEADER, AutoText.ALIGNMENT_RIGHT, 200, new Style())\n        .addColumn(monthColumn = ColumnBuilder.getNew()\n                .setColumnProperty(\"monthName\", String.class)\n                .setTitle(\"Month\")\n                .build())\n        .addColumn(callsColumn = ColumnBuilder.getNew()\n                .setColumnProperty(\"calls\", Integer.class)\n                .setTitle(\"Calls\")\n                .build())\n        .addChart(new DJBar3DChartBuilder()\n                .setCategory((PropertyColumn) monthColumn)\n                .addSerie(callsColumn)\n                .build());\n\n```", "```java\n@WebServlet(\"/image\")\npublic static class ReportsImageServlet extends ImageServlet {\n}\n```", "```java\n...\nJasperPrint print = ...\nVaadinSession.getCurrent().getSession().setAttribute(ImageServlet.DEFAULT_JASPER_PRINT_SESSION_ATTRIBUTE, print);\n\nSimpleHtmlExporterOutput exporterOutput = ...\nexporterOutput.setImageHandler(new WebHtmlResourceHandler(\"image?image={0}\"));\n\nHtmlExporter exporter = new HtmlExporter();\nexporter.setExporterOutput(exporterOutput); ...\n```", "```java\nSELECT AVG(column_name) FROM table_name\n```", "```java\npublic class AnnualLegalReport {\n\n    public static ByteArrayOutputStream getOutputStream() {\n        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n            DynamicReport report = new FastReportBuilder()\n                    ... configure report ...\n                    .build();\n\n            List<ClientCountDto> clients = ReportsService.countYearCallsByClient();\n            JasperPrint print = DynamicJasperHelper.generateJasperPrint(report, new ClassicLayoutManager(), clients);\n\n            JRPdfExporter exporter = new JRPdfExporter();\n            exporter.setExporterOutput(new SimpleOutputStreamExporterOutput(outputStream));\n            exporter.setExporterInput(new SimpleExporterInput(print));\n            exporter.exportReport();\n\n            outputStream.flush();\n return outputStream;\n\n        } catch (JRException | IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```", "```java\n@Title(\"Report Viewer\")\npublic class VaadinUI extends UI {\n\n    private HorizontalLayout header = new HorizontalLayout();\n    private MenuBar.MenuItem annualLegalReportItem;\n    ...\n\n    private void generateAnnualLegalReport() {\n        Notification.show(\"Report generation started\",\n                \"You'll be notified once the report is ready.\", Notification.Type.TRAY_NOTIFICATION);\n        annualLegalReportItem.setEnabled(false);\n\n new Thread(() -> {\n            ByteArrayOutputStream outputStream = AnnualLegalReport.getOutputStream();\n            ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n            Button button = new Button(\"Download Annual Legal Report\", VaadinIcons.DOWNLOAD_ALT);\n            header.addComponent(button);\n\n            FileDownloader downloader = new FileDownloader(new StreamResource(() -> {\n                header.removeComponent(button);\n                annualLegalReportItem.setEnabled(true);\n                return inputStream;\n            }, \"annual-legal-report.pdf\"));\n            downloader.extend(button);\n\n            Notification.show(\"Report ready for download\", Notification.Type.TRAY_NOTIFICATION);\n        }).start();\n    }\n}\n```", "```java\nnew Thread(() -> {\n    ByteArrayOutputStream outputStream = AnnualLegalReport.getOutputStream();\n    ByteArrayInputStream inputStream = new ByteArrayInputStream(outputStream.toByteArray());\n access(() -> {\n        Button button = new Button(\"Download Annual Legal Report\", VaadinIcons.DOWNLOAD_ALT);\n        header.addComponent(button);\n\n        FileDownloader downloader = new FileDownloader(new StreamResource(() -> {\n            header.removeComponent(button);\n            annualLegalReportItem.setEnabled(true);\n            return inputStream;\n        }, \"annual-legal-report.pdf\"));\n        downloader.extend(button);\n\n        Notification.show(\"Report ready for download\", Notification.Type.TRAY_NOTIFICATION);\n });\n}).start(); \n```", "```java\n<dependency>\n    <groupId>com.vaadin</groupId>\n    <artifactId>vaadin-push</artifactId>\n</dependency>\n```", "```java\n@Push\n@Title(\"Report Viewer\")\npublic class VaadinUI extends UI { ... }\n```", "```java\n@WebServlet(value = \"/*\", asyncSupported = true)\n@VaadinServletConfiguration(ui = VaadinUI.class, productionMode = false)\npublic static class chapter08VaadinServlet extends VaadinServlet {\n}\n```"]