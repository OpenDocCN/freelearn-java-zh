["```java\n        public class Engine { \n          private int horsePower; \n          public void setHorsePower(int horsePower) { \n            this.horsePower = horsePower; \n          } \n          public double getSpeedMph(double timeSec, \n                                    int weightPounds) { \n            double v = 2.0*this.horsePower*746; \n            v = v*timeSec*32.17/weightPounds; \n            return Math.round(Math.sqrt(v)*0.68); \n          } \n        }\n```", "```java\n        public class Vehicle { \n          private int weightPounds; \n          private Engine engine; \n          public Vehicle(int weightPounds, Engine engine) { \n            this.weightPounds = weightPounds; \n            this.engine = engine; \n          } \n          public double getSpeedMph(double timeSec){ \n            return this.engine.getSpeedMph(timeSec, weightPounds); \n         } \n       } \n```", "```java\n        public static void main(String... arg) { \n          double timeSec = 10.0; \n          int horsePower = 246; \n          int vehicleWeight = 4000;  \n          Engine engine = new Engine(); \n          engine.setHorsePower(horsePower); \n          Vehicle vehicle = new Vehicle(vehicleWeight, engine); \n          System.out.println(\"Vehicle speed (\" + timeSec + \" sec)=\" +\n                             vehicle.getSpeedMph(timeSec) + \" mph\"); \n        } \n```", "```java\nif(engine == null){ \n   throw new RuntimeException(\"Engine\" + \" is required parameter.\"); \n}   \n```", "```java\nif(getEngine() == null){ \n  throw new RuntimeException(\"Engine value is required.\"); \n} \n```", "```java\npublic double getSpeedMph(double timeSec){\n  double v = 2.0 * this.engine.getHorsePower() * 746;\n  v = v * timeSec * 32.174 / this.weightPounds;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount;\n  public Car(int passengersCount, int weightPounds, \n             Engine engine){\n    super(weightPounds, engine);\n    this.passengersCount = passengersCount;\n  }\n  public int getPassengersCount() {\n    return this.passengersCount;\n  }\n}\n```", "```java\npublic static void main(String... arg) { \n  double timeSec = 10.0; \n  int horsePower = 246; \n  int vehicleWeight = 4000; \n  Engine engine = new Engine(); \n  engine.setHorsePower(horsePower); \n  Vehicle vehicle = new Car(4, vehicleWeight, engine); \n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\"); \n} \n```", "```java\n        public class Vehicle {\n          private int weightPounds;\n          private Engine engine;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.engine = new Engine(horsePower);\n          }\n          public double getSpeedMph(double timeSec){\n            return this.engine.getSpeedMph(timeSec);\n          }\n          private int getWeightPounds(){ return weightPounds; }\n          private class Engine {\n            private int horsePower;\n            private Engine(int horsePower) {\n              this.horsePower = horsePower;\n            }\n            private double getSpeedMph(double timeSec){\n              double v = 2.0 * this.horsePower * 746;\n              v = v * timeSec * 32.174 / getWeightPounds();\n              return Math.round(Math.sqrt(v) * 0.68);\n            }\n          }\n        }\n```", "```java\n        public class Vehicle {\n          private int weightPounds;\n          private int horsePower;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.horsePower = horsePower;\n          }\n          private int getWeightPounds() { return weightPounds; }\n          public double getSpeedMph(double timeSec){\n            class Engine {\n              private int horsePower;\n              private Engine(int horsePower) {\n                this.horsePower = horsePower;\n              }\n              private double getSpeedMph(double timeSec){\n                double v = 2.0 * this.horsePower * 746;\n                v = v * timeSec * 32.174 / getWeightPounds();\n                return Math.round(Math.sqrt(v) * 0.68);\n              }\n            }\n            Engine engine = new Engine(this.horsePower);\n            return engine.getSpeedMph(timeSec);\n          }\n        }\n```", "```java\npublic static void main(String arg[]) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = new Vehicle(vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic double getSpeedMph(double timeSec){ return -1.0d; }\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = new Vehicle(vehicleWeightPounds, engineHorsePower) {\n    public double getSpeedMph(double timeSec){ \n      return -1.0d;\n    }\n  };\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = new Vehicle(vehicleWeightPounds, engineHorsePower){\n    public double getSpeedMph(double timeSec){\n      double v = 2.0 * engineHorsePower * 746;\n      v = v * timeSec * 32.174 / vehicleWeightPounds;\n      return Math.round(Math.sqrt(v) * 0.68);\n    }\n  };\n  System.out.println(\"Vehicle speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic class Vehicle {\n  private Engine engine;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.engine = new Engine(horsePower, weightPounds);\n  }\n  public double getSpeedMph(double timeSec){\n    return this.engine.getSpeedMph(timeSec);\n  }\n  private static class Engine {\n    private int horsePower;\n    private int weightPounds;\n    private Engine(int horsePower, int weightPounds) {\n      this.horsePower = horsePower;\n    }\n    private double getSpeedMph(double timeSec){\n      double v = 2.0 * this.horsePower * 746;\n      v = v * timeSec * 32.174 / this.weightPounds;\n      return Math.round(Math.sqrt(v) * 0.68);\n    }\n  }\n}\n```", "```java\n        public class Vehicle {\n          private int weightPounds, horsePower;\n          public Vehicle(int weightPounds, int horsePower) {\n            this.weightPounds = weightPounds;\n            this.horsePower = horsePower;\n          }\n          public double getSpeedMph(double timeSec){\n            double v = 2.0 * this.horsePower * 746;\n            v = v * timeSec * 32.174 / this.weightPounds;\n            return Math.round(Math.sqrt(v) * 0.68);\n          }\n        }\n```", "```java\n        public class Car extends Vehicle {\n          private int passengersCount;\n          public Car(int passengersCount, int weightPounds, \n                     int horsepower){\n            super(weightPounds, horsePower);\n            this.passengersCount = passengersCount;\n          }\n          public int getPassengersCount() { \n            return this.passengersCount; \n          }\n        }\n```", "```java\n         public class Truck extends Vehicle {\n           private int payload;\n           public Truck(int payloadPounds, int weightPounds, \n                        int horsePower){\n             super(weightPounds, horsePower);\n             this.payload = payloadPounds;\n           }\n           public int getPayload() { \n             return this.payload; \n           }\n         }\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Vehicle vehicle = new Car(4, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Passengers count=\" + \n                     ((Car)vehicle).getPassengersCount());\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n  vehicle = new Truck(3300, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Payload=\" + \n                     ((Truck)vehicle).getPayload() + \" pounds\");\n  System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weight = this.weightPounds + this.passengersCount * 250;\n  double v = 2.0 * this.horsePower * 746;\n  v = v * timeSec * 32.174 / weight;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weight = this.weightPounds + this.payload;\n  double v = 2.0 * this.horsePower * 746;\n  v = v * timeSec * 32.174 / weight;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\nVehicle vehicle =  new Car(4, vehicleWeightPounds, engineHorsePower);\nSystem.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                   vehicle.getSpeedMph(timeSec) + \" mph\");\n```", "```java\nprotected double getSpeedMph(double timeSec, int weightPounds) {\n  double v = 2.0 * this.horsePower * 746;\n  v = v * timeSec * 32.174 / weightPounds;\n  return Math.round(Math.sqrt(v) * 0.68);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weightPounds = this.weightPounds + this.passengersCount * 250;\n  return getSpeedMph(timeSec, weightPounds);\n}\n```", "```java\npublic double getSpeedMph(double timeSec) {\n  int weightPounds = this.weightPounds + this.payload;\n  return getSpeedMph(timeSec, weightPounds);\n}\n```", "```java\npublic static void main(String... arg) {\n    double timeSec = 10.0;\n    int engineHorsePower = 246;\n    int vehicleWeightPounds = 4000;\n    Vehicle vehicle = new Car(4, vehicleWeightPounds, engineHorsePower);\n    System.out.println(\"Passengers count=\" + \n                       ((Car)vehicle).getPassengersCount());\n    System.out.println(\"Car speed (\" + timeSec + \" sec) = \" +\n                       ((Car)vehicle).getSpeedMph(timeSec) + \" mph\");\n    vehicle = new Truck(3300, vehicleWeightPounds, engineHorsePower);\n    System.out.println(\"Payload=\" + \n                       ((Truck)vehicle).getPayload() + \" pounds\");\n    System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                       ((Truck)vehicle).getSpeedMph(timeSec) + \" mph\");\n  }\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  Car car = new Car(4, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Passengers count=\" + car.getPassengersCount());\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                     car.getSpeedMph(timeSec) + \" mph\");\n  Truck truck = new Truck(3300, vehicleWeightPounds, engineHorsePower);\n  System.out.println(\"Payload=\" + truck.getPayload() + \" pounds\");\n  System.out.println(\"Truck speed (\" + timeSec + \" sec) = \" + \n                     truck.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount, weightPounds;\n  public Car(int passengersCount, int weightPounds, int horsePower){\n    super(weightPounds, horsePower);\n    this.passengersCount = passengersCount;\n    this.weightPounds = weightPounds;\n  }\n  public int getPassengersCount() { \n    return this.passengersCount;\n  }\n  public int getMaxWeightPounds() {\n    return this.weightPounds + this.passengersCount * 250;\n  }\n}\n```", "```java\npublic class Truck extends Vehicle {\n  private int payload, weightPounds;\n  public Truck(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds, horsePower);\n    this.payload = payloadPounds;\n    this.weightPounds = weightPounds;\n  }\n  public int getPayload() { return this.payload; }\n  public int getMaxWeightPounds() {\n    return this.weightPounds + this.payload;\n  }\n}\n```", "```java\npublic abstract class Vehicle {\n  private int weightPounds, horsePower;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  public abstract int getMaxWeightPounds();\n  public double getSpeedMph(double timeSec){\n    double v = 2.0 * this.horsePower * 746;\n    v = v * timeSec * 32.174 / getMaxWeightPounds();\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\npublic class Car extends Vehicle {\n  private int passengersCount;\n  public Car(int passengersCount, int weightPounds, int horsepower){\n    super(weightPounds + passengersCount * 250, horsePower);\n    this.passengersCount = passengersCount;\n  }\n  public int getPassengersCount() { \n    return this.passengersCount; }\n}\n```", "```java\npublic class Truck extends Vehicle {\n  private int payload;\n  public Truck(int payloadPounds, int weightPounds, int horsePower) {\n    super(weightPounds + payloadPounds, horsePower);\n    this.payload = payloadPounds;\n  }\n  public int getPayload() { return this.payload; }\n}\n```", "```java\npublic class Vehicle {\n  private int weightPounds, horsePower;\n  public Vehicle(int weightPounds, int horsePower) {\n    this.weightPounds = weightPounds;\n    this.horsePower = horsePower;\n  }\n  public double getSpeedMph(double timeSec){\n    double v = 2.0 * this.horsePower * 746;\n    v = v * timeSec * 32.174 / this.weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68);\n  }\n}\n```", "```java\nprivate Properties conditions;\n  public SpeedModel(Properties drivingConditions){\n    this.drivingConditions = drivingConditions;\n  }\n  public double getSpeedMph(double timeSec, int weightPounds,\n                            int horsePower){\n    String road = drivingConditions.getProperty(\"roadCondition\",\"Dry\");\n    String tire = drivingConditions.getProperty(\"tireCondition\",\"New\");\n    double v = 2.0 * horsePower * 746;\n    v = v * timeSec * 32.174 / weightPounds;\n    return Math.round(Math.sqrt(v) * 0.68) \n                      - (road.equals(\"Dry\") ? 2 : 5) \n                      - (tire.equals(\"New\") ? 0 : 5);\n   }\n}\n```", "```java\npublic class Vehicle {\n   private SpeedModel speedModel;\n   private int weightPounds, horsePower;\n   public Vehicle(int weightPounds, int horsePower) {\n      this.weightPounds = weightPounds;\n      this.horsePower = horsePower;\n   }\n   public void setSpeedModel(SpeedModel speedModel){\n      this.speedModel = speedModel;\n   }\n   public double getSpeedMph(double timeSec){\n      return this.speedModel.getSpeedMph(timeSec,\n                       this.weightPounds, this.horsePower);\n   }\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int horsePower = 246;\n  int vehicleWeight = 4000;\n  Properties drivingConditions = new Properties();\n  drivingConditions.put(\"roadCondition\", \"Wet\");\n  drivingConditions.put(\"tireCondition\", \"New\");\n  SpeedModel speedModel = new SpeedModel(drivingConditions);\n  Car car = new Car(4, vehicleWeight, horsePower);\n  car.setSpeedModel(speedModel);\n  System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                     car.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\n        public interface SpeedModel {\n          double getSpeedMph(double timeSec, int weightPounds,\n                             int horsePower);\n        }\n        public interface Vehicle {\n          void setSpeedModel(SpeedModel speedModel);\n          double getSpeedMph(double timeSec);\n        }\n        public interface Car extends Vehicle {\n          int getPassengersCount();\n        }\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n        }\n```", "```java\n        public static void main(String... arg) {\n          double timeSec = 10.0;\n          int horsePower = 246;\n          int vehicleWeight = 4000;\n          Properties drivingConditions = new Properties();\n          drivingConditions.put(\"roadCondition\", \"Wet\");\n          drivingConditions.put(\"tireCondition\", \"New\");\n           SpeedModel speedModel =  FactorySpeedModel\n                .generateSpeedModel(drivingConditions);\n           Car car = FactoryVehicle.buildCar(4, vehicleWeight, \n                                             horsePower);\n           car.setSpeedModel(speedModel);\n           System.out.println(\"Car speed (\" + timeSec + \" sec) = \" + \n                              car.getSpeedMph(timeSec) + \" mph\");\n        }\n```", "```java\npublic class FactorySpeedModel {\n  public static SpeedModel generateSpeedModel(\n  Properties drivingConditions){\n    //if drivingConditions includes \"roadCondition\"=\"Wet\"\n    return new SpeedModelWet(...);\n    //if drivingConditions includes \"roadCondition\"=\"Dry\"\n    return new SpeedModelDry(...);\n  }\n  private class SpeedModelWet implements SpeedModel{\n    public double getSpeedMph(double timeSec, int weightPounds, \n                              int horsePower){...}\n  }\n  private class SpeedModelDry implements SpeedModel{\n    public double getSpeedMph(double timeSec, int weightPounds, \n                              int horsePower){...}\n   }\n}\n```", "```java\npublic class FactoryVehicle {\n  public static Car buildCar(int passengersCount, int weightPounds,\n                             int horsePower){\n    return new CarImpl(passengersCount, weightPounds, horsePower);\n  }\n  public static Truck buildTruck(int payloadPounds, int weightPounds,\n                                 int horsePower){\n    return new TruckImpl(payloadPounds, weightPounds, horsePower);\n  }\n  class CarImpl extends VehicleImpl implements Car {\n    private int passengersCount;\n    private CarImpl(int passengersCount, int weightPounds,\n                    int horsePower){\n      super(weightPounds + passengersCount * 250, horsePower);\n      this.passengersCount = passengersCount;\n    }\n    public int getPassengersCount() { \n      return this.passengersCount;\n    }\n  }\n  class TruckImpl extends VehicleImpl implements Truck {\n    private int payloadPounds;\n    private TruckImpl(int payloadPounds, int weightPounds, \n                      int horsePower){\n      super(weightPounds+payloadPounds, horsePower);\n      this.payloadPounds = payloadPounds;\n    }\n    public int getPayloadPounds(){ return payloadPounds; }\n  }\n  abstract class VehicleImpl implements Vehicle {\n    private SpeedModel speedModel;\n    private int weightPounds, horsePower;\n    private VehicleImpl(int weightPounds, int horsePower){\n      this.weightPounds = weightPounds;\n      this.horsePower = horsePower;\n    }\n    public void setSpeedModel(SpeedModel speedModel){ \n      this.speedModel = speedModel; \n    }\n    public double getSpeedMph(double timeSec){\n      return this.speedModel.getSpeedMph(timeSec, weightPounds, \n                                         horsePower);\n    }\n  }\n}\n```", "```java\nclass CrewCab extends VehicleImpl implements Car, Truck {\n  private int payloadPounds;\n  private int passengersCount;\n  private CrewCabImpl(int passengersCount, int payloadPounds,\n                      int weightPounds, int horsePower) {\n    super(weightPounds + payloadPounds\n          + passengersCount * 250, horsePower);\n    this.payloadPounds = payloadPounds;\n    this. passengersCount = passengersCount;\n  }\n  public int getPayloadPounds(){ return payloadPounds; }\n  public int getPassengersCount() { \n    return this.passengersCount;\n  }\n}\n```", "```java\npublic static Vehicle buildCrewCab(int passengersCount, \n           int payload, int weightPounds, int horsePower){\n  return new CrewCabImpl(passengersCount, payload, \n                         weightPounds, horsePower);\n}\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  int horsePower = 246;\n  int vehicleWeight = 4000;\n  Properties drivingConditions = new Properties();\n  drivingConditions.put(\"roadCondition\", \"Wet\");\n  drivingConditions.put(\"tireCondition\", \"New\");\n  SpeedModel speedModel = FactorySpeedModel\n                    .generateSpeedModel(drivingConditions);\n  Vehicle vehicle = FactoryVehicle\n         .buildCrewCab(4, 3300, vehicleWeight, horsePower);\n  vehicle.setSpeedModel(speedModel);\n  System.out.println(\"Payload = \" +\n                     ((Truck)vehicle).getPayloadPounds()) + \" pounds\");\n  System.out.println(\"Passengers count = \" + \n                     ((Car)vehicle).getPassengersCount());\n  System.out.println(\"Crew cab speed (\" + timeSec + \" sec) = \"  + \n                     vehicle.getSpeedMph(timeSec) + \" mph\");\n}\n```", "```java\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n          }\n        }\n```", "```java\n        public static void main(String... arg) {\n          Truck truck = FactoryVehicle.buildTruck(3300, 4000, 246);\n          System.out.println(\"Payload in pounds: \" + \n                             truck.getPayloadPounds());\n          System.out.println(\"Payload in kg: \" + truck.getPayloadKg());\n        }\n```", "```java\n        class TruckImpl extends VehicleImpl implements Truck {\n          private int payloadPounds;\n          private TruckImpl(int payloadPounds, int weightPounds,\n                            int horsePower) {\n            super(weightPounds + payloadPounds, horsePower);\n            this.payloadPounds = payloadPounds;\n          }\n          public int getPayloadPounds(){ return payloadPounds; }\n          public int getPayloadKg(){ return -2; }\n        }\n```", "```java\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n          }\n          static int convertKgToPounds(int kgs){\n            return (int) Math.round(2.205 * kgs);\n          }\n        }\n```", "```java\npublic static void main(String... arg) {\n  int horsePower = 246;\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  Truck truck = FactoryVehicle \n           .buildTruck(payload, vehicleWeight, horsePower);\n  System.out.println(\"Payload in pounds: \" + truck.getPayloadPounds());\n  int kg = truck.getPayloadKg();\n  System.out.println(\"Payload converted to kg: \" + kg);\n  System.out.println(\"Payload converted back to pounds: \" + \n                     Truck.convertKgToPounds(kg));\n}\n```", "```java\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(){\n            return (int) Math.round(0.454 * getPayloadPounds());\n          }\n          static int convertKgToPounds(int kilograms){\n            return (int) Math.round(2.205 * kilograms);\n          }\n          default int getWeightKg(int pounds){\n            return (int) Math.round(0.454 * pounds);\n          }\n        }\n```", "```java\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n          default int getPayloadKg(int pounds){\n            return convertPoundsToKg(pounds);\n          }\n          static int convertKgToPounds(int kilograms){\n            return (int) Math.round(2.205 * kilograms);\n          }\n          default int getWeightKg(int pounds){\n            return convertPoundsToKg(pounds);\n          }\n          private int convertPoundsToKg(int pounds){\n            return (int) Math.round(0.454 * pounds);\n          }\n        }\n```", "```java\npublic static void main(String... arg) {\n  int horsePower = 246;\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  Truck truck = FactoryVehicle\n            .buildTruck(payload, vehicleWeight, horsePower);\n  System.out.println(\"Weight in pounds: \" + vehicleWeight);\n  int kg = truck.getWeightKg(vehicleWeight);\n  System.out.println(\"Weight converted to kg: \" + kg);\n  System.out.println(\"Weight converted back to pounds: \" + \n                     Truck.convertKgToPounds(kg));\n}\n```", "```java\npublic interface Truck extends Vehicle {\n  int getPayloadPounds();\n  default int getPayloadKg(int pounds){\n    return convertPoundsToKg(pounds);\n  }\n  static int convertKgToPounds(int kilograms){\n    return (int) Math.round(2.205 * kilograms);\n  }\n  static int convertPoundsToKg(int pounds){\n    return (int) Math.round(0.454 * pounds);\n  }\n}\n```", "```java\npublic static void main(String... arg) {\n  int payload = Truck.convertKgToPounds(1500);\n  int vehicleWeight = Truck.convertKgToPounds(1800);\n  System.out.println(\"Weight in pounds: \" + vehicleWeight);\n  int kg = Truck.convertPoundsToKg(vehicleWeight);\n  System.out.println(\"Weight converted to kg: \" + kg);\n  System.out.println(\"Weight converted back to pounds: \" + \n                     Truck.convertKgToPounds(kg));\n}\n```", "```java\npublic enum RoadCondition {\n  DRY, WET, SNOW\n}\n```", "```java\nfor(RoadCondition v: RoadCondition.values()){\n  System.out.println(v);\n}\n```", "```java\nfor(RoadCondition v: RoadCondition.values()){\n  System.out.println(v.ordinal());\n  System.out.println(v.name());\n  System.out.println(RoadCondition.SNOW.equals(v));\n}\n```", "```java\n        public interface SpeedModel {\n          double getSpeedMph(double timeSec, int weightPounds,\n                             int horsePower);\n\n          enum RoadCondition {\n            DRY(1.0), WET(0.2), SNOW(0.04);\n            private double traction;\n            RoadCondition(double traction){ this.traction = traction;}\n            public double getTraction(){ return this.traction; }\n          }\n        }\n```", "```java\n        for(RoadCondition v: RoadCondition.values()){\n          System.out.println(v + \" => \" + v.getTraction());\n        }\n```", "```java\n        enum TireCondition {\n          NEW(1.0), WORN(0.2);\n          private double traction;\n          TireCondition(double traction){ this.traction = traction; }\n          public double getTraction(){return this.traction;}\n        }\n```", "```java\n        enum DrivingCondition {\n          ROAD_CONDITION, TIRE_CONDITION\n        }\n```", "```java\npublic static void main(String... arg) {\n  double timeSec = 10.0;\n  String[] roadConditions = { RoadCondition.WET.toString(), \n                              RoadCondition.SNOW.toString() };\n  String[] tireConditions = { TireCondition.NEW.toString(), \n                              TireCondition.WORN.toString() };\n  for(String rc: roadConditions){\n    for(String tc: tireConditions){\n      Properties drivingCond = new Properties();\n      drivingCond.put(DrivingCondition\n                      .ROAD_CONDITION.toString(), rc);\n      drivingCond.put(DrivingCondition\n                      .TIRE_CONDITION.toString(), tc);\n      SpeedModel speedModel = FactorySpeedModel\n                      .generateSpeedModel(drivingCond);\n      Car car = FactoryVehicle.buildCar(4, 4000, 246);\n      car.setSpeedModel(speedModel);\n      System.out.println(\"Car speed (\" + timeSec + \" sec) = \" +\n                          car.getSpeedMph(timeSec) + \" mph\");\n      }\n   }\n}\n```", "```java\nenum RoadCondition {\n  public int temperature;\n  DRY(1.0),\n  WET(0.2) {\n    public double getTraction(){ \n      RoadCondition return temperature > 60 ? 0.4 : 0.2 \n    } \n  },\n  SNOW(0.04);\n  private double traction;\n  RoadCondition(double traction){this.traction = traction; }\n  public double getTraction(){ return this.traction; }\n}\n```", "```java\nRoadCondition.temperature = 63;\n```", "```java\n@SuppressWarnings(\"deprecation\")\n```", "```java\n@Deprecated(since = \"2.1\", forRemoval = true)\n```", "```java\n@SuppressWarnings(\"removal\")\n```", "```java\n        public interface Truck extends Vehicle {\n          int getPayloadPounds();\n        }\n```", "```java\n        int getPayload(WeigthUnit weightUnit);\n        enum WeigthUnit { Pound, Kilogram }\n```", "```java\n        /**\n        * Returns the payload of the truck.\n        *\n        * @return the payload of the truck in the specified units\n        * of weight measurements\n        * @deprecated As of API 2.1, to avoid adding methods\n        * for each possible weight unit,\n        * use {@link #getPayload(WeigthUnit weightUnit)} instead.\n        */\n        @Deprecated(since = \"2.1\", forRemoval = true)\n        int getPayloadPounds();\n```", "```java\n/**\n<h2>Returns the weight of the car.</h2>\n<article>\n  <h3>If life would be often that easy</h3>\n  <p>\n    Do you include unit of measurement into the method name or not?\n  </p>\n  <p>\n    The new signature demonstrates extensible design of an interface.\n  </p>\n</article>\n<aside>\n  <p> A few other examples could be found\n    <a href=\"http://www.nicksamoylov.com/cat/programming/\">here</a>.\n  </p>\n</aside>\n* @param weightUnit - an element of the enum Car.WeightUnit\n* @return the weight of the car in the specified units of weight\n*/\nint getMaxWeight(WeigthUnit weightUnit);\n```", "```java\njavadoc [options] [packagenames] [sourcefiles] [@files]\n```"]