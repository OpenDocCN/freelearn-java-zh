["```java\npublic class Melon implements Serializable {\n  private final String type;\n  private final float weight;\n  // constructor, getters\n} \n```", "```java\nMelon melon = new Melon(\"Gac\", 2500); \n```", "```java\npublic static byte[] objectToBytes(Serializable obj) \n       throws IOException { \n\n  try (ByteArrayOutputStream baos \n           = new ByteArrayOutputStream();\n        ObjectOutputStream ois \n           = new ObjectOutputStream(baos)) {\n    ois.writeObject(obj);\n\n    return baos.toByteArray();\n  } \n} \n```", "```java\nbyte[] melonSer = Converters.objectToBytes(melon); \n```", "```java\npublic static Object bytesToObject(byte[] bytes)\n       throws IOException, ClassNotFoundException {\n  try ( InputStream is = new ByteArrayInputStream(bytes);\n        ObjectInputStream ois = new ObjectInputStream(is)) {\n     return ois.readObject();\n  }\n} \n```", "```java\nMelon melonDeser = (Melon) Converters.bytesToObject(melonSer); \n```", "```java\npublic static String objectToString(Serializable obj) throws IOException {       \n\n    try ( ByteArrayOutputStream baos = new ByteArrayOutputStream();\n          ObjectOutputStream ois = new ObjectOutputStream(baos)) {\n        ois.writeObject(obj);\n\n        return Base64.getEncoder().encodeToString(baos.toByteArray());\n    }                \n} \n```", "```java\nrO0ABXNyABZtb2Rlcm4uY2hhbGxlbmdlLk1lbG9u2WrnGA2MxZ4CAAJGAAZ3ZWlnaHRMAAR0eXBldAAST GphdmEvbGFuZy9TdHJpbmc7eHBFHEAAdAADR2Fj \n```", "```java\nString melonSer = Converters.objectToString(melon); \n```", "```java\npublic static Object stringToObject(String obj) \n              throws IOException, ClassNotFoundException {\n byte[] data = Base64.getDecoder().decode(obj);\n try ( ObjectInputStream ois = new ObjectInputStream(\n       new ByteArrayInputStream(data))) {\n  return ois.readObject();\n }\n} \n```", "```java\nMelon melonDeser = (Melon)  \n      Converters.stringToObject(melonSer); \n```", "```java\npublic static String objectToXML(Object obj) \n              throws IOException {\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n try ( XMLEncoder encoder = new XMLEncoder(\n                  new BufferedOutputStream(baos))) {\n  encoder.writeObject(obj);\n }\n baos.close();\n return new String(baos.toByteArray());\n} \n```", "```java\npublic static Object XMLToObject(String xml) \n              throws IOException {\n try ( InputStream is \n    = new ByteArrayInputStream(xml.getBytes());  \n  XMLDecoder decoder = new XMLDecoder(is)) {\n  return decoder.readObject();\n }\n} \n```", "```java\n<dependency>\n  <groupId>com.fasterxml.jackson.dataformat</groupId>\n  <artifactId>jackson-dataformat-xml</artifactId>\n  <version>2.x</version>\n</dependency> \n```", "```java\nXmlMapper xmlMapper = new XmlMapper(); \n```", "```java\npublic static String objectToXMLJackson(Object obj) \n              throws JsonProcessingException {\n XmlMapper xmlMapper = new XmlMapper();\n if (xmlMapper.canSerialize(obj.getClass())) {\n  return xmlMapper.writeValueAsString(obj);\n }\n return \"\";\n} \n```", "```java\nString melonSer = Converters.objectToXMLJackson(melon); \n```", "```java\npublic static <T> T XMLToObjectJackson(\n       String xml, Class<T> clazz)\n              throws JsonProcessingException {\n XmlMapper xmlMapper = new XmlMapper();\n return xmlMapper.readValue(xml, clazz);\n} \n```", "```java\nMelon melonDeser = Converters\n  .XMLToObjectJackson(melonSer, Melon.class); \n```", "```java\nfoo.*;!buzz.* \n```", "```java\n!modern.challenge.Melon \n```", "```java\n!modern.challenge.Melon;modern.challenge.*;!* \n```", "```java\nfoo.** \n```", "```java\nHash* \n```", "```java\nmaxdepth=5;maxarray=1000;maxrefs=50 foo.buzz.App \n```", "```java\njava -Djdk.serialFilter=foo.**;Hash* foo.buzz.App \n```", "```java\nObjectInputFilter melonFilter = ObjectInputFilter.Config\n  .createFilter(\"!modern.challenge.Melon;\"); \n```", "```java\nObjectInputFilter.Config.setSerialFilter(melonFilter); \n```", "```java\nObjectInputFilter serialFilter = \n  ObjectInputFilter.Config.getSerialFilter(); \n```", "```java\npublic static Object bytesToObject(byte[] bytes, \n              ObjectInputFilter filter)\n                throws IOException, ClassNotFoundException {\n try ( InputStream is = new ByteArrayInputStream(bytes);\n       ObjectInputStream ois = new ObjectInputStream(is)) {\n  // set the filter            \n  ois.setObjectInputFilter(filter);\n  return ois.readObject();\n  }\n} \n```", "```java\nMelon melon = new Melon(\"Gac\", 2500);\n// serialization works as usual\nbyte[] melonSer = Converters.objectToBytes(melon);\n// here, we pass the melonFilter, which rejects the instances \n// of modern.challenge.Melon, so deserialization is rejected\nMelon melonDeser = (Melon) Converters.bytesToObject(\n      melonSer, melonFilter); \n```", "```java\nException in thread \"main\" java.io.InvalidClassException: filter status: REJECTED\n… \n```", "```java\npublic final class MelonFilter implements ObjectInputFilter {\n @Override\n public Status checkInput(FilterInfo filterInfo) {\n Class<?> clazz = filterInfo.serialClass();\n if (clazz != null) {\n  // or, clazz.getName().equals(\"modern.challenge.Melon\")\n  return \n   !(clazz.getPackage().getName().equals(\"modern.challenge\")\n     && clazz.getSimpleName().equals(\"Melon\"))\n     ? Status.ALLOWED : Status.REJECTED;\n }\n return Status.UNDECIDED;\n }\n} \n```", "```java\nObjectInputFilter.Config.setSerialFilter(new MelonFilter()); \n```", "```java\nMelon melonDeser = (Melon) Converters.bytesToObject(\n  melonSer, new MelonFilter()); \n```", "```java\nois.setObjectInputFilter(filter); \n```", "```java\nException in thread \"main\" java.io.InvalidClassException: filter status: REJECTED\n… \n```", "```java\npublic final class Filters {\n private Filters() {\n  throw new AssertionError(\"Cannot be instantiated\");\n }\n public static ObjectInputFilter.Status melonFilter(\n               FilterInfo info) {\n  Class<?> clazz = info.serialClass();\n  if (clazz != null) {\n   // or, clazz.getName().equals(\"modern.challenge.Melon\")\n   return \n    !(clazz.getPackage().getName().equals(\"modern.challenge\")\n      && clazz.getSimpleName().equals(\"Melon\"))\n      ? Status.ALLOWED :Status.REJECTED;\n  }\n  return Status.UNDECIDED;\n }\n} \n```", "```java\nObjectInputFilter.Config\n                 .setSerialFilter(Filters::melonFilter); \n```", "```java\nMelon melonDeser = (Melon) Converters.bytesToObject(\n  melonSer, Filters::melonFilter); \n```", "```java\nois.setObjectInputFilter(filter); \n```", "```java\nException in thread \"main\" java.io.InvalidClassException: filter status: REJECTED\n… \n```", "```java\nObjectInputFilter.Config\n  .setSerialFilter(f -> ((f.serialClass() != null)\n  // or, filter.serialClass().getName().equals(\n  //     \"modern.challenge.Melon\")\n  && f.serialClass().getPackage()\n                   .getName().equals(\"modern.challenge\")\n  && f.serialClass().getSimpleName().equals(\"Melon\"))\n  ? Status.REJECTED : Status.UNDECIDED); \n```", "```java\nMelon melonDeser = (Melon) Converters.bytesToObject(melonSer, \n  f -> ((f.serialClass() != null)\n   // or, filter.serialClass().getName().equals(\n   //       \"modern.challenge.Melon\")\n  && f.serialClass().getPackage()\n                   .getName().equals(\"modern.challenge\")\n  && f.serialClass().getSimpleName().equals(\"Melon\"))\n  ? Status.REJECTED : Status.UNDECIDED); \n```", "```java\n of code:\n```", "```java\n// 'mapOfSets' is the object to serialize/deserialize\nHashMap<Set, Integer> mapOfSets = new HashMap<>();\nSet<Set> set = new HashSet<>();\nmapOfSets.put(set, 1);\nset.add(set); \n```", "```java\nbyte[] mapSer = Converters.objectToBytes(mapOfSets); \n```", "```java\nException in thread \"main\" java.lang.StackOverflowError\n  at java.base/java.util.HashMap$KeyIterator\n    .<init>(HashMap.java:1626)\n  at java.base/java.util.HashMap$KeySet\n    .iterator(HashMap.java:991)\n  at java.base/java.util.HashSet\n    .iterator(HashSet.java:182)\n  at java.base/java.util.AbstractSet\n    .hashCode(AbstractSet.java:120)\n  at java.base/java.util.AbstractSet\n    .hashCode(AbstractSet.java:124)\n  ... \n```", "```java\nObjectInputFilter filter = ObjectInputFilter.Config\n  .createFilter(\"maxdepth=2;java.base/*;!*\"); \n```", "```java\nHashMap mapDeser = (HashMap) Converters\n  .bytesToObject(mapSer, filter); \n```", "```java\nArrayList<Object> startList = new ArrayList<>();\nList<Object> list1 = startList;\nList<Object> list2 = new ArrayList<>();\nfor (int i = 0; i < 101; i++) {\n  List<Object> sublist1 = new ArrayList<>();\n  List<Object> sublist2 = new ArrayList<>();\n  sublist1.add(\"value: \" + i);\n  list1.add(sublist1);\n  list1.add(sublist2);\n  list2.add(sublist1);\n  list2.add(sublist2);\n  list1 = sublist1;\n  list2 = sublist2;\n} \n```", "```java\nbyte[] startListSer = Converters.objectToBytes(startList); \n```", "```java\nObjectInputFilter filter = ObjectInputFilter.Config\n  .createFilter(\"maxdepth=10;java.base/*;!*\"); \n```", "```java\nArrayList startListDeser = (ArrayList) \n  Converters.bytesToObject(startListSer, filter); \n```", "```java\npublic final class Filters {\n private Filters() {\n  throw new AssertionError(\"Cannot be instantiated\");\n }\n public static ObjectInputFilter allowMelonFilter() {\n  ObjectInputFilter filter = ObjectInputFilter.allowFilter( \n   clazz -> Melon.class.isAssignableFrom(clazz),\n           ObjectInputFilter.Status.REJECTED);\n   return filter;\n }\n public static ObjectInputFilter rejectMuskmelonFilter() {\n  ObjectInputFilter filter = ObjectInputFilter.rejectFilter( \n   clazz -> Muskmelon.class.isAssignableFrom(clazz),\n           ObjectInputFilter.Status.UNDECIDED);\n   return filter;\n  }\n} \n```", "```java\nois.setObjectInputFilter(Filters.allowMelonFilter());\nois.setObjectInputFilter(Filters.rejectMuskmelonFilter()); \n```", "```java\npublic static Object bytesToObject(byte[] bytes, \n       ObjectInputFilter allowFilter, \n       ObjectInputFilter rejectFilter)\n       throws IOException, ClassNotFoundException {\n try ( InputStream is = new ByteArrayInputStream(bytes);  \n       ObjectInputStream ois = new ObjectInputStream(is)) {\n  // set the filters\n  ObjectInputFilter filters = ObjectInputFilter.merge(\n    allowFilter, rejectFilter);\n  ois.setObjectInputFilter(filters);\n  return ois.readObject();\n }\n} \n```", "```java\njava -Djdk.serialFilterFactory=FilterFactoryName YourApp \n```", "```java\nObjectInputFilter.Config\n  .setSerialFilterFactory(FilterFactoryInstance); \n```", "```java\npublic final class Filters {\n private Filters() {\n  throw new AssertionError(\"Cannot be instantiated\");\n }\n public static ObjectInputFilter allowMelonFilter() {\n  ObjectInputFilter filter = ObjectInputFilter.allowFilter( \n   clazz -> Melon.class.isAssignableFrom(clazz),\n           ObjectInputFilter.Status.REJECTED);\n   return filter;\n  }\n  public static ObjectInputFilter rejectMuskmelonFilter() {\n   ObjectInputFilter filter = ObjectInputFilter.rejectFilter( \n   clazz -> Muskmelon.class.isAssignableFrom(clazz),\n           ObjectInputFilter.Status.UNDECIDED);\n   return filter;\n  }\n  public static ObjectInputFilter packageFilter() {\n   return ObjectInputFilter.Config.createFilter(\n          \"modern.challenge.*;!*\");\n  }\n} \n```", "```java\nObjectInputFilter.Config.setSerialFilter(\n  Filters.allowMelonFilter()); \n```", "```java\nMelon melon = new Melon(\"Melon\", 2400);\n// serialization\nbyte[] melonSer = Converters.objectToBytes(melon);\n// deserialization\nMelon melonDeser = (Melon) Converters.bytesToObject(\n  melonSer, Filters.rejectMuskmelonFilter()); \n```", "```java\npublic class MelonFilterFactory implements\n       BinaryOperator<ObjectInputFilter> {\n @Override\n public ObjectInputFilter apply(\n        ObjectInputFilter current, ObjectInputFilter next) {\n  System.out.println();\n  System.out.println(\"Current filter: \" + current);\n  System.out.println(\"Requested filter: \" + next);\n  if (current == null && next != null) { \n   return ObjectInputFilter.merge(\n          next, Filters.packageFilter());\n  }\n  return ObjectInputFilter.merge(next, current);\n }\n} \n```", "```java\nMelonFilterFactory filterFactory = new MelonFilterFactory();\nObjectInputFilter.Config\n                 .setSerialFilterFactory(filterFactory); \n```", "```java\nCurrent filter: null\nRequested filter: \npredicate(modern.challenge.Filters$$Lambda$4/0x000000080\n1001800@ba8a1dc, ifTrue: ALLOWED,ifFalse: REJECTED) \n```", "```java\nCurrent filter: merge(predicate(modern.challenge.Filters$$Lambda$4/0x0000000801001800@ba8a1dc, ifTrue: ALLOWED, ifFalse:REJECTED), modern.challenge.*;!*)\nRequested filter: predicate(modern.challenge.Filters$$Lambda$10/0x0000000801002a10@484b61fc, ifTrue: REJECTED, ifFalse:UNDECIDED) \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration version=\"2.0\" description=\"test\">\n  <event name=\"jdk.Deserialization\">\n    <setting name=\"enabled\">true</setting>\n    <setting name=\"stackTrace\">false</setting>\n  </event>\n</configuration> \n```"]