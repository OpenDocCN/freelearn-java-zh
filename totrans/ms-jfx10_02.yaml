- en: Different Available WebDrivers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous chapter introduced the Selenium WebDriver architecture and WebDriver
    interface. We used Google Chrome with ChromeDriver to create a simple test. In
    this chapter, we will explore the WebDriver implementation for Mozilla Firefox,
    Microsoft Internet Explorer, Microsoft Edge, and Safari. With WebDriver becoming
    a W3C specification, all of the major browser vendors now support WebDriver natively.
    In this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using driver-specific implementations for Mozilla Firefox, Google Chrome, Microsoft
    Internet Explorer and Edge, and Apple Safari
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the browser options class to execute tests in headless mode and use custom
    profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using mobile emulation with Google Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Firefox Driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implementation of Firefox Driver has been changed in Selenium 3.0\. Starting
    with Firefox version 47.0+, we need to use separate a driver that will interact
    with the Firefox browser similarly to ChromeDriver. The new driver for Firefox
    is called Geckodriver.
  prefs: []
  type: TYPE_NORMAL
- en: The Geckodriver provides the HTTP API described by the W3C WebDriver Protocol
    to communicate with Gecko browsers, such as Firefox. It translates calls into
    the Firefox Remote Protocol (Marionette) by acting as a proxy between the local
    and remote ends.
  prefs: []
  type: TYPE_NORMAL
- en: Using GeckoDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how to configure and use **Geckodriver** for Firefox
    in our tests. First of all, we need to download the **Geckodriver** executable
    from [https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)
  prefs: []
  type: TYPE_NORMAL
- en: Download the appropriate version of **Geckodriver** based on the Firefox version
    installed on your computer as well as the operating system. Copy the executable
    file into the `/src/test/resources/drivers` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the Search Test we created in Chapter 1 and modify the test to
    use the **Geckodriver**. For this, we need to modify the `setup()` method, provide
    the path of the **Geckodriver** binary in the `webdriver.gecko.driver` property,
    and instantiate the `FirefoxDriver` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now execute the test, and you will see **Geckodriver** running in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: It will launch a new Firefox window and execute the test. The Firefox window
    will be closed at the end of the execution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Headless Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Headless mode is a very useful way to run Firefox for automated testing with
    Selenium WebDriver. In headless mode, Firefox runs as normal only you don't see
    the UI components. This makes Firefox faster and tests run more efficiently, especially
    in the CI (Continuous Integration) environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run Selenium tests in headless mode by configuring the `FirefoxOptions`
    class, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we first created an instance of the `FirefoxOptions`
    class, called the `setHeadless()` method, that passes the value as `true` to launch
    the Firefox browser in headless mode. You will see a long message indicating the
    browser instance has been launched in headless mode, as shown in the following
    console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: During the execution, you will not see the Firefox window on the screen but
    the test will be executed in headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Firefox profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Firefox profile is a folder that the Firefox browser uses to store all your
    passwords, bookmarks, settings, and other user data. A Firefox user can create
    any number of profiles with different custom settings and use it accordingly.
    According to Mozilla, the following are the different attributes that can be stored
    in the profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: Bookmarks and browsing history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site-specific preferences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Search engines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A personal dictionary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocomplete history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM Storage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security certificate settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security device settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Download actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin MIME types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stored sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toolbar customizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create, rename, or delete a profile, you have to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Firefox profile manager. To do that, in the command prompt terminal,
    navigate to the install directory of Firefox; typically, it is in **Program Files**
    if you are on Windows. Navigate to the location where you can find the `firefox`
    binary file, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'It will open the profile manager, which will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/815a8608-1f1e-44f5-af70-4bd26616b2a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that before executing the preceding command, you need to make sure you
    close all your currently-running Firefox instances.
  prefs: []
  type: TYPE_NORMAL
- en: Use the Create Profile... button to create another profile, the Rename Profile...
    button to rename an existing profile, and the Delete Profile... button to delete
    one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, coming back to our WebDriver, whenever we create an instance of `FirefoxDriver`,
    a temporary profile is created and used by the WebDriver. To see the profile that
    is currently being used by a Firefox instance, navigate to Help | Troubleshooting
    Information.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will launch all the details of the particular Firefox instance of which
    the profile is a part. It will look similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fb35369-ad22-460e-a2dc-03d7a43c4555.png)'
  prefs: []
  type: TYPE_IMG
- en: The highlighted oval in the preceding screenshot shows the profile folder. Click
    on the Show Folder button; it should open the location of the profile corresponding
    to that of your current Firefox instance. Now, let's launch a Firefox browser
    instance using our FirefoxDriver, and verify its profile location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s launch a Firefox browser using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will launch a browser instance. Now, navigate to Help | Troubleshooting
    Information, and once the info is launched, click the Show Folder button. This
    will open the current WebDriver''s profile directory. Every time you launch a
    Firefox instance using Firefox Driver, it will create a new profile for you. If
    you go one level above this directory, you will see the profiles created by your
    FirefoxDriver, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3db28be6-cd39-48b5-9436-2acde675b3d3.png)'
  prefs: []
  type: TYPE_IMG
- en: All the preceding folders correspond to each of the Firefox instances launched
    by the FirefoxDriver.
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have seen what Firefox profiles are and how WebDriver creates one
    every time it launches the browser. Now, let''s see how we can create our own
    custom profiles using WebDriver APIs. The following is the code example to create
    your own Firefox profile using the WebDriver library and set the options you want
    your browser to have, overriding what FirefoxDriver gives you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `FirefoxProfile` is the class that has been instantiated
    to create a custom profile for the Firefox browser launched from the test. Now,
    having an instance of that class, we can set various options and preferences in
    it, which we will discuss shortly. First, there are two overloaded versions of
    constructors for `FirefoxProfile`. One creates an empty profile and moulds it
    according to requirements. This is seen in the preceding code. The second version
    creates a profile instance from an existing profile directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `profileDir` input parameter is the directory location of an existing
    profile. The profile directory is the one we saw in the preceding screenshot.
    Let's discuss some interesting customizations that we can do to our Firefox browser
    using Firefox profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the extension to Firefox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will see how we can extend our Firefox browser with some
    additional capabilities using Profiles. Whenever WebDriver launches a new Firefox
    browser, it creates a new profile on the disk, and this profile doesn't contain
    any of the installed Firefox extensions in it. We will add an extension using
    the Profiles every time WebDriver creates an instance of the Firefox browser.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's change the profile using the `addExtension()` method provided by
    `FirefoxProfile`. This method is used to add extensions to the Firefox browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the API syntax for the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The input parameter is the XPI file that has to be installed on the Firefox
    browser. If WebDriver doesn''t find the file in the specified location, it will
    raise `IOException`. The following is the code to override the default profile
    and extend the Firefox browser to have an extension named Xpath Finder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you see the Firefox browser that is launched by the FirefoxDriver,
    you will find the Xpath Finder extension installed on it. In the console log,
    you will see a message indicating the extension has been added to the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1532196699704 addons.xpi-utils DEBUG New add-on xPathFinder@0.9.3 installed
    in app-profile**'
  prefs: []
  type: TYPE_NORMAL
- en: Storing and retrieving a profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can also write the profile information of the browser to the JSON file and
    later instantiate new browsers with the same profile. The `FirefoxProfile` class
    provides a method to export the profile information as JSON. The following is
    its API syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The output or return type is a String, which contains the JSON information in
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to create a browser with the same profile, the `FirefoxProfile` class
    provides a static method that takes the JSON string as the input. The following
    is the API syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a static method in the `FirefoxProfile` class that takes the JSON string
    to create a profile from. The following is the code example for that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have exported the profile as a JSON string. In your
    test case, you can write that JSON information to a file and store it. Later,
    you can read the JSON file using `FirefoxOptions` and create `FirefoxDriver` from
    that.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Firefox preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned about Firefox profiles, and how we can create our own
    customized profiles for Firefox Driver. Now, let's see how we can set our preferences
    in the profiles we create and where FirefoxDriver stores them.
  prefs: []
  type: TYPE_NORMAL
- en: 'According to Mozilla, a Firefox Preference is any value or defined behavior
    that can be set by a user. These values are saved to the preference files. If
    you open the profile directory by navigating to Help | Troubleshooting Information
    and clicking on the Show Folder button, you will see two preference files: `prefs.js`
    and `user.js`. All the user preferences are written to the `prefs.js` file by
    the Firefox application during the launch. A user can override those values for
    their chosen values, and they are stored in the `user.js` file. The value in `user.js`
    for a preference takes precedence over all the other values set for that particular
    preference. So, your FirefoxDriver overwrites all the default preferences of Firefox
    in the `user.js` file for you. When you add a new preference, FirefoxDriver writes
    that to the `user.js` preference file, and the Firefox browser behaves accordingly.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `user.js` file in the profile directory. The following are the list
    of all the preferences that FirefoxDriver sets for you by default:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This Firefox Driver treats them as `Frozen Preferences` and doesn't allow the
    test-script developer to change them. However, there are a few preferences in
    the preceding list that FirefoxDriver allows you to change, which we will see
    shortly.
  prefs: []
  type: TYPE_NORMAL
- en: Setting preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will learn how to set our own preferences. As an example, we will see
    how to change the user agent of your browser. These days, many web applications
    have a main site as well as a mobile site/m. site. The application will validate
    the user agent of the incoming request and decide whether to act as a server for
    a normal site or mobile site. So, in order to test your mobile site from your
    laptop or desktop browser, you just have to change your user agent. Let''s see
    a code example where we can change the user-agent preference of our Firefox browser
    using FirefoxDriver, and send a request to the Facebook homepage. But before that,
    let''s see the `setPreference()` method provided by the FirefoxProfile class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The input parameters are `key`, which is a string and represents your preference,
    and `value`, which has to be set to the preference.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two other overloaded versions of the preceding method shown; one
    of which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the other overloaded version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, using the preceding `setPreference()` method, we will try to change the
    user agent of our browser using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code for the `setPreference()` method, `general.useragent.override`
    is set as the name of the preference, and the second parameter is the value for
    that preference, which represents the iPhone user agent. Now open the `user.js`
    file for this particular Firefox instance, and you will see the entry for this
    preference. You should use the following preference in your `user.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Apart from this, you will observe that the mobile version of the Facebook homepage
    has been served to you.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding frozen preferences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s go back to the big list of frozen preferences that `user.js` contains,
    which we saw earlier. The Firefox Driver thinks that a test-script developer doesn''t
    have to deal with them and doesn''t allow those values to be changed. Let''s pick
    one frozen preference and try to change its values in our code. Let''s consider
    the `browser.shell.checkDefaultBrowser` preference, whose value FirefoxDriver
    implementers thought should be set to `false` so that the Firefox browser does
    not ask you whether to make Firefox your default browser, if it is not already,
    when you are busy executing your test cases. Ultimately, you don''t have to deal
    with the pop-up itself in your test scripts. Apart from setting the preference
    value to `false`, the implementers of FirefoxDriver also thought of freezing this
    value so that users don''t alter these values. That is the reason these preferences
    are called frozen preferences. Now, what happens if you try to modify these values
    in your test scripts? Let''s see a code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now when you execute your code, you will immediately see an exception saying
    you''re not allowed to override these values. The following is the exception stack
    trace you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This is how FirefoxDriver mandates a few preferences that are not to be touched.
    However, there are a few preferences of the frozen list that FirefoxDriver allows
    to alter through code. For that, it explicitly exposes methods in the FirefoxProfile
    class. Those exempted preferences are for dealing with SSL certificates and native
    events. Here, we will see how we can override the SSL certificates' preferences.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s use a code example that tries to override the default Firefox behavior
    to handle SSL certificates. The `FirefoxProfile` class has two methods to handle
    the SSL certificates; the first one is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'This lets Firefox know whether to accept SSL certificates that are untrusted.
    By default, it is set to true, that is, Firefox accepts SSL certificates that
    are untrusted. The second method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This lets Firefox assume that the untrusted certificates are issued by untrusted
    or self-signed certification agents. Firefox, by default, assumes the issuer to
    be untrusted. That assumption is particularly useful when you test an application
    in the test environment while using the certificate from the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preferences, `webdriver_accept_untrusted_certs` and `webdriver_assume_
    untrusted_issuer`, are the ones related to the SSL certificates. Now, let''s create
    a Java code to modify the values for these two values. By default, the values
    are set to true, as seen in the `user.js` file. Let''s mark them as false with
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have set the values to false, and now if we open the `user.js` file
    in the profile directory of this instance of Firefox, you will see the values
    set to false, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Chrome Driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ChromeDriver works similar to the Geckodriver and implements the W3C WebDriver
    protocol. We saw how to set up and use ChromeDriver in Chapter 1\. In this section,
    we will focus on the ChromeDriver options to run tests in headless mode, use mobile
    emulation, and use custom profiles.
  prefs: []
  type: TYPE_NORMAL
- en: Using Headless Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to Firefox, we can run tests in headless mode with ChromeDriver. This
    makes Chrome tests run faster and tests run more efficiently, especially in the
    CI (Continuous Integration) environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can run Selenium tests in headless mode by configuring the `ChromeOptions`
    class as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we first created an instance of the `ChromeOptions` class,
    called the `setHeadless()` method, that passes the value as `true` to launch the
    Chrome browser in headless mode. During the execution, you will not see the Chrome
    window on the screen but the test will be executed in headless mode.
  prefs: []
  type: TYPE_NORMAL
- en: Using Mobile Emulation for testing mobile web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Chrome browser allows users to emulate Chrome on mobile devices, such as
    Pixel 2, Nexus 7, iPhone, or iPad, from the desktop version of Chrome via DevTools.
    The following screenshot shows how our sample application will be seen in Chrome
    for iPhone. We can start the mobile emulation in Chrome browser with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the sample web application in the Chrome Browser:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/27c36572-adde-4ab4-b430-176504f1d470.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Developer Tools. Select the blue Mobile device icon and then select
    the device. In this example, we selected iPhone X. The Chrome browser will reload
    according to the selected device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc360086-3bc6-4f3b-a555-3f5af073d5cb.png)'
  prefs: []
  type: TYPE_IMG
- en: The mobile-emulation feature allows developers and testers to quickly test how
    a website will be displayed on a mobile device, without requiring a real device
    and speed up the development process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also use mobile emulation with our Selenium WebDriver tests by configuring
    ChromeOptions. Let''s modify the search test to test on Google Pixel 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will enable the Mobile emulation in Chrome during the execution,
    and will load the mobile version of the Website. This is done by first configuring
    the Device metrics, such as width and height, using a Java HashMap. In this example,
    we configured the `deviceMetrics` hashmap as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to create another Hashmap, named `mobileEmulation`, that will
    hold the `deviceMetrics` and `userAgent` Strings. The `userAgent` string specifies
    which Mobile device should be used, such as Pixel 2 XL, and the rendering engine
    versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we need to pass the `mobileEmulation` hashmap to the ChromeOptions
    class, and call the `setExperimentalOption()` method that passes the `mobileEmulation`
    hashmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will load the mobile version of the application and Selenium will run the
    test as usual.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can get the `userAgent` string after configuring the mobile device. Go to
    the Network tab in the Chrome Developer tools. Reload the page, select the first
    request from the list, and copy the value of the User-Agent key from the Headers
    tab, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/89c2b814-e359-4cd3-9cd7-f45e210724af.png)'
  prefs: []
  type: TYPE_IMG
- en: We can set a number of Chrome preferences using the `setExperimentalOptions()`
    method and the `ChromeOptions` class.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ChromeExtensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Similar to Firefox, we can add extensions to the Chrome browser by specifying
    the location of the extension. We can add **Packed** (.crx file) or **Unpacked**
    (folder) extensions using the ChromeOptions class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a **Packed** extension, we need to call the `addExtension()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'To add an Unpacked extension, we need to use the `addArguments()` method, which
    will load the extension reading the specified folder while launching the Chrome
    binary. This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, you can use Chrome options to add more extensions, arguments, and
    Binaries to your Chrome browser.
  prefs: []
  type: TYPE_NORMAL
- en: InternetExplorerDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to execute your test scripts on the Internet Explorer browser, you
    need WebDriver's InternetExplorerDriver. Similar to Google Chrome and Firefox,
    we need to download the **IEDriver Server** executable from [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)
    for Internet Explorer.
  prefs: []
  type: TYPE_NORMAL
- en: The IEDriver server then uses its IEThreadExplorer class, which is written in
    C++, to drive the IE browser using the Component Object Model framework.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first test script for the IE browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now you are all set to write test scripts that run on the Internet Explorer
    browser. The following is the code that instantiates InternetExplorerDriver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Understanding IEDriver capabilities
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will discuss some of the important capabilities of InternetExplorerDriver.
    This is where we have set the IEDriver capability to ignore the security domains.
    The code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to `INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS`, IEDriver has
    many other capabilities. The following is a list with an explanation on why it
    is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Capability** | **Value to be Set** | **Purpose** |'
  prefs: []
  type: TYPE_TB
- en: '| INITIAL_BROWSER_URL | URL, for example, [https://www.google.com](https://www.google.com)
    | This capability is set with the URL value that the driver should navigate the
    browser to as soon as it opens up. |'
  prefs: []
  type: TYPE_TB
- en: '| INTRODUCE_ FLAKINESS_BY_ IGNORING_SECURITY_ DOMAINS | True or False | This
    defines whether the IEDriverServer should ignore the browser security domain settings.
    |'
  prefs: []
  type: TYPE_TB
- en: '| NATIVE_EVENTS | True or False | This tells the IEDriver server whether to
    use native events or JavaScript events for executing mouse or keyboard actions.
    |'
  prefs: []
  type: TYPE_TB
- en: '| REQUIRE_WINDOW_ FOCUS | True or False | If the value is set to True, the
    IE browser window will get the focus. This is especially useful when executing
    native events. |'
  prefs: []
  type: TYPE_TB
- en: '| ENABLE_PERSISTENT_ HOVERING | True or False | If set to True, IEDriver will
    persistently fire a mouse-hovering event. This is especially important in overcoming
    issues with how IE handles mouse-over events. |'
  prefs: []
  type: TYPE_TB
- en: '| IE_ENSURE_CLEAN_ SESSION | True or False | If True, it clears all the cookies,
    cache, history, and saved form data of all the instances of IE. |'
  prefs: []
  type: TYPE_TB
- en: '| IE_SET_PROXY_BY_ SERVER | True or False | If True, the proxy server settings
    for the IEDriver server is used. If False, WindowsProxyManager is used to determine
    the proxy server. |'
  prefs: []
  type: TYPE_TB
- en: Edge Driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft Edge is the latest web browser launched with Microsoft Windows 10\.
    Microsoft Edge was one of the first browsers to implement the W3C WebDriver standard
    and provides built-in support for Selenium WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Internet Explorer, in order to execute test scripts on the Microsoft
    Edge browser, we need to use the EdgeDriver class and a standalone Microsoft WebDriver
    Server executable. The Microsoft WebDriver Server is maintained by the Microsoft
    Edge development team. You can find more information at [https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first test script for the Edge browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s set up the Microsoft WebDriver Server and create a test for testing
    the search feature on Microsoft Edge. We need to download and install Microsoft
    WebDriver Server on Windows 10 ([https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The Microsoft WebDriver Server is a standalone server executable that implements
    WebDriver's JSON-wire protocol, which works as a glue between the test script
    and the Microsoft Edge browser. In the preceding code, we need to specify the
    path of the executable using the `webdriver.edge.driver` property similarly to
    other browser configurations we saw earlier in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We also set the Page Load Strategy to eager, using the `EdgeOptions` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: When navigating to a new page URL, Selenium WebDriver, by default, waits until
    the page has fully loaded before passing the control to the next command. This
    works well in most cases but can cause long wait times on pages that have to load
    a large number of third-party resources. Using the `eager` page-load strategy
    can make test execution faster. The eager page-load strategy will wait until the
    `DOMContentLoaded` event is complete, that is, the HTML content is downloaded
    and parsed only, but other resources, such as images, may still be loading. However,
    this may introduce flakiness where elements are dynamically loaded.
  prefs: []
  type: TYPE_NORMAL
- en: Safari Driver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With Selenium 3.0 and WebDriver becoming the W3C standard, Apple now provides
    SafariDriver built into the browser. We do not have to download it separately.
    However, in order to work it with Selenium WebDriver, we have to set a Develop
    | Allow Remote Automation option from Safari''s main menu, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50c0aef4-03f9-4a5b-b0a7-2089e82270db.png)'
  prefs: []
  type: TYPE_IMG
- en: Allowing remote automation
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first test script for the Safari browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is as straight forward. The following is the test script using the Safari
    Driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we created an instance of the `SafariDriver` class to
    launch and execute tests on the Safari browser.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have seen some of the major implementations of WebDriver
    that are widely used in the industry. We looked at some of the key configuration
    options for each browser and how to use them for custom profiles and mobile emulation.
    The underlying technology for every driver is JSONWire Protocol, which is fundamental
    for all the implementations. In the next chapter, we will learn how to use the
    Java 8 Stream API and Lambda functions with the Selenium WebDriver API.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the significance of WebDriver becoming W3C Specification?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True or False: WebDriver is an interface?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which browsers support Headless testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we test mobile websites with Chrome?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the WebDriver Specification at [https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find more details about GeckoDriver and its capabilities at [https://github.com/mozilla/geckodriver](https://github.com/mozilla/geckodriver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about the ChromeDriver capabilities at [http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)
    and mobile emulation at [http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read more about EdgeDriver capabilities at [https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
