- en: Chapter 5. Hosting Web Services with Apache CXF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache CXF modules in Apache Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the CXF list endpoints command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the CXF stop/start endpoints command
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a RESTful service in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a Camel CXF web service in Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 3](ch03.html "Chapter 3. Deploying a Message Broker with Apache
    ActiveMQ"), *Deploying a Message Broker with Apache ActiveMQ*, we discussed how
    and when to set up JMS systems. Another way to communicate between systems or
    applications is to provide web service or RESTful endpoints. Apache CXF provides
    a way to easily set up and publish web service endpoints. Publishing web services
    in Apache Karaf provides commands to control the endpoint lifecycle and monitor
    what is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache CXF modules in Apache Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can deploy any web service or RESTful services, we need to get CXF
    installed in the Karaf container. Just like other frameworks, we need to get the
    features that support the required services installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install the CXF framework, just install the CXF feature from the default
    Karaf instance. If no version is specified, it will use the latest version. For
    this example, we are using `version 3.0.0-milestone2`. We can do this using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the feature URL is added, we can see all the CXF features that are provided.
    This can be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The list of CXF features is extensive, but for all of our recipes, we can simply
    install the CXF feature using the following command. This will install all the
    required features that will be used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that a large number of the required features have been installed
    at this point. The following list is a subset from a `feature:list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If we look at the `features.xml` file from the CXF code base, we can see that
    the `cxf` feature is just a feature that installs all the required features for
    CXF deployment in Karaf. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `cxf` feature adds a compatibility bundle for the required bundle, as stated
    in the `features.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the CXF list-endpoints command* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using the CXF stop and start commands* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the CXF list-endpoints command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to view what is deployed into an instance of CXF, we can use the `list-endpoints`
    command. This will list out all the buses currently deployed in the Karaf runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe is only to demonstrate the use of the commands; we will cover how
    to create different CXF bundles in later recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After completing the *Installing Apache CXF modules in Apache Karaf* recipe,
    we now need to build and deploy a sample CXF application into Karaf.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the code bundle of this chapter and run the Maven build using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will build and install the sample applications for this chapter in the
    Maven repository so we can easily install them in the Karaf instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command line in the Karaf instance, install this recipe''s CXF module
    using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can run the following command to list CXF endpoints published in this instance
    of Karaf:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will provide us with a list of CXF buses that have been started from our
    sample bundle. This is shown in the following command-line output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: We can see from the result that our endpoint is published and available. The
    name of the implementation class name is `StringRestServiceImpl`. Also note that
    it is in the `Started` state and the address where we can locate the REST service.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the `–f` parameter on the `list-endpoints` command to get the full address
    to the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: So let's give this a try. When you go to `http://localhost:8181/cxf/chapter5/recipeTwo`,
    it will display the message returned from the recipe code.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The type of browser might impact what you see; we are using Chrome in this example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays what will be seen in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, we are able to hit the endpoint and see our message from the
    implementation class.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like the `list-busses` command, this command uses the CXF controller to
    get the information needed for display in the console. The code for this is in
    the `ListEndpointsCommand` class. This will get the buses using the CXF controller,
    and then loop through the list and pull the ServiceRegistry in order to get a
    list of servers. From the server, we can get the rest of the details of the list,
    including the name, state, and address.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the CXF stop and start commands* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the CXF stop and start commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some instances, there might be a need to control the state of the endpoint
    manually. Using the `stop-endpoint` or `start-endpoint` commands, we can shut
    down and start up a published endpoint from the command line. This is useful when
    testing client code to make sure that you are handling unavailable endpoints correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Follow the steps from the *Using the CXF list-endpoints command* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s look at how to use the `stop-endpoint` and `start-endpoint` commands.
    Both commands require parameters for the bus and endpoint in order to know what
    to start or stop. The syntax for these commands looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'To stop an endpoint, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `list-endpoints` command to get the bus ID and the name of our published
    endpoint. The following will be the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The information in the output of the preceding step can now be used to start
    and stop endpoints published in this instance of Karaf. Consider the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding command will stop the endpoint we published in the *Getting ready*
    section. Rerun the `list-endpoints` command in order to see the state change as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that the state has been changed to `Stopped`. This indicates that our
    REST service endpoint is no longer available from our browser. Use a browser to
    hit this endpoint address: `http://localhost:8181/cxf/chapter5/recipeTwo`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The browser cannot find the address specified, which is exactly what we expect
    to happen. The following screenshot is what you should see:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, perform the following steps to start the endpoint again:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the endpoint listed in the `list-endpoints` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will start the endpoint we published in the *Getting ready* section. Rerun
    the `list-endpoints` command in order to see the state change as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command is made available from the `cxf` feature implemented by the `StopEndpointCommand`
    class (the `start-endpoint` command is very similar). This is shown in the following
    code line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The command annotation shows you that the CXF defines the subshell and the
    command name is `stop-endpoint`. This command also has several required parameters
    defined by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: There are two parameters that are required (as noted by the `required=true`
    parameter in the `Argument` annotation).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using the CXF list-endpoints command* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a RESTful service in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, let's look at how the code is assembled in order to publish a CXF endpoint
    in Karaf using just CXF.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will work with the `chapter5-recipe3` example from the code
    bundle. Uninstall the `recipe2` code before going ahead with this recipe
  prefs: []
  type: TYPE_NORMAL
- en: First, install CXF as shown in the *Installing Apache CXF modules in Apache
    Karaf* recipe, and then build and deploy a sample CXF application as `recipe3`
    in Karaf.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `chapter5-recipe3` example from the code bundle and run the Maven
    build using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This will build and install the sample applications for the `chapter5-recipe3`
    example into the Maven repository, so we can easily install them in the Karaf
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the bundle is deployed, we can look at deploying and starting the CXF endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the command line in the Karaf instance, install the `chapter5-recipe3`
    example''s CXF module, start the bundle, and publish the endpoint with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `list-endpoints` command will show us that our endpoint has been started
    and is available, as shown in the following command-line snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have verified that our endpoint is published, let''s test it by
    hitting this endpoint address: `http://localhost:8181/cxf/chapter5/recipeThree`.
    The output is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's examine the different pieces of this puzzle to find out how we got the
    endpoint published.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define the endpoint using an interface. In the sample code,
    look at the `StringRestService` interface class shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The `@Path("/")` annotation is set to null. This means that there is no address
    location that has been defined to access this RESTful endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: This interface only defines the `@GET` value (not the `@POST` value) of the
    RESTful endpoint. In order to access this endpoint, we only need to use the `/recipeThree`
    location after the default in order to access the `getRecipeThree()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The `@Produces` annotation defines the type of data that will be returned to
    the caller. In this case, we are defining XML via `application/xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we have to implement the interface in order to process the request to
    the endpoint. In our simple example, we are just returning a string value with
    XML. The implementation class looks like the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The implementation class is simple—we are creating the `getRecipeThree` method
    and returning an XML string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have the interface and implementation class defined, we need to
    configure the endpoint. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When working in the OSGi environment, it is suggested that you use Blueprint.
    The preceding XML code is from a Blueprint XML file.
  prefs: []
  type: TYPE_NORMAL
- en: In this configuration, we are defining the `cxf` bus and adding the `logging`
    feature. There is no reason to specify the implementation class for the bus since
    all of the logging information is embedded in the underlying schema definition.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to instantiate the implementation class as a bean. Here, we give
    this an ID of `stringRestServiceBean`.
  prefs: []
  type: TYPE_NORMAL
- en: This bean ID is used in the server configuration to define ServiceBean. This
    will use the interface class implemented by the implementation class to publish
    the endpoint at the `/chapter5` location. Since we did not define a class with
    a base location, the address will look like `http://localhost:8181/cxf/chapter5/recipeThree`
    once it is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that in the previous URL, the `/chapter5` location comes first, which
    is the address for the JAX-RS server, followed by the path defined in the interface
    class.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building and deploying a Camel CXF web service in Karaf* recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a Camel CXF web service in Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how easy it can be to deploy a RESTful service
    using CXF and Karaf. Now, we will explore how to deploy a WSDL first CXF endpoint
    using Camel. This is a good way to implement integration routes that expose web
    services. Uninstall the `recipe2` code before going ahead with this recipe
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The example code for this recipe is in the `chapter5-recipe4` example of the
    code bundle. More than likely, you have already built the code, but just in case,
    go ahead and run the `mvn clean install` command against the `chapter5` folder.
    This will build and move the bundle to the Maven repository for deployment in
    Karaf.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that there is the following line in the console for the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line indicates that the codegen plugin for CXF has been run and
    has generated the code from the WSDL defined in the `pom.xml` file. The following
    is the plugin definition that instructs Maven to build code from the WSDL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The WSDL is identified by the `<wsdl>` tags, so we can see that the `report_domain.wsdl`
    file is found in the `${basedir}/src/main/resources/META-INF/wsdl/` directory.
  prefs: []
  type: TYPE_NORMAL
- en: The `wsdl2java` goal indicates that we want the plugin to generate the necessary
    files from the WSDL.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to get the environment set up to run our Camel CXF endpoint.
    This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to get Apache Camel installed using the following Camel feature command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will add the feature definitions for Camel into the Karaf instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to actually install the `camel` and `camel-cxf` features using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once the `camel` and `camel-cxf` features are installed, we can install the
    bundle for this recipe using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can list the bundles in order to make sure that the bundle was successfully
    installed using the `bundle:list` command. The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We can see that the last bundle is our recipe bundle. It has been started and
    is active, which indicates that the endpoint has been published.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify this, we can use CXF commands. When we use the `karaf@root()> cxf:list-busses`
    command, the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'When we use the `karaf@root()> cxf:list-endpoints -f` command, the output will
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This indicates that our Camel CXF web service is deployed and available at `http://localhost:9080/webservices/domain`.
  prefs: []
  type: TYPE_NORMAL
- en: You can also look at the WSDL code available from the endpoint at `http://localhost:9080/webservices/domain?wsdl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the preceding address in your favorite web browser and we will see the
    WSDL code. This should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see that the endpoint is published and available through several avenues.
    Let''s go ahead and test it using SoapUI, which is a free web service testing
    tool that is available at [http://www.soapui.org/](http://www.soapui.org/). The
    steps are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Load the WSDL code as a project in SoapUI, and it will automatically set up
    a request for us based on the WSDL definition. The following screenshot shows
    us what the request should look like:![How to do it…](img/5081OS_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will also autoload the address for the request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can hit the play button to submit the request to the endpoint. It will respond
    with a simple `OK`, as shown in the following screenshot:![How to do it…](img/5081OS_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This shows that we were able to submit a request to the endpoint and retrieve
    the response. The response is a simple hardcoded `OK` but demonstrates the availability
    of the endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s look at the endpoint configuration for the Camel component. In
    the Blueprint file, we define the service endpoint as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the CXF endpoint configuration; notice that we are specifying
    the address and port for our published web service as well as the location of
    the WSDL file.
  prefs: []
  type: TYPE_NORMAL
- en: The route is instantiated via a Blueprint with a `domainRoutes` bean ID. This
    will allow us to reference it from the CamelContext configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The CamelContext defines all the Camel routes to be used in this bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look at the actual code for the route:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `from("cxf:bean:reportDomain")`code line is the start of the route. We need
    to be able to configure it so that it can handle any calls to our web service.
    The `reportDomain` part in the URI is a reference to the `cxfEndpoint` object
    configured in the `blueprint.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that no implementation code is needed when using the Camel CXF endpoint,
    as all requests are intercepted and processed by the route.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the route is just for show. We convert the body to the defined data
    type in the WSDL. In this case, it is converted to `InputReportDomain.class`.
    Then, we log it to the `karaf.log` file using `.to("log:dummy")`. Finally, we
    return `OutputReportDomain.class` with an `OK` code.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Building and deploying a RESTful service in Karaf* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
