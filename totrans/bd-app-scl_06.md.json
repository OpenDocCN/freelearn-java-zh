["```java\n$ sudo apt-get install mysql-server -y\n$ mysql --version\n$ service mysql status\n\n```", "```java\n$ mysql -u root -p\n\n```", "```java\n$ CREATE DATABASE RWS_DB; \n\n```", "```java\n    name := \"\"\"ReactiveWebStore\"\"\" \n    version := \"1.0-SNAPSHOT\" \n    lazy val root = (project in file(\".\")).enablePlugins(PlayScala) \n    scalaVersion := \"2.11.7\" \n    libraryDependencies ++= Seq(   //jdbc, \n      cache, \n      ws, \n      \"org.scalatestplus.play\" %% \"scalatestplus-play\" % \"1.5.1\" %  \n      Test, \n      \"com.netflix.rxjava\" % \"rxjava-scala\" % \"0.20.7\", \n      \"com.typesafe.play\" %% \"play-slick\" % \"2.0.0\", \n      \"com.typesafe.play\" %% \"play-slick-evolutions\" % \"2.0.0\", \n      \"mysql\" % \"mysql-connector-java\" % \"6.0.3\" \n    ) \n    resolvers += \"scalaz-bintray\" at \"http://dl.bintray.com/scalaz/releases\" \n    resolvers += DefaultMavenRepository \n\n```", "```java\n    \"com.typesafe.play\" %% \"play-slick\" % \"2.0.0\", \n    \"com.typesafe.play\" %% \"play-slick-evolutions\" % \"2.0.0\", \n    \"mysql\" % \"mysql-connector-java\" % \"6.0.3\" \n\n```", "```java\n    # Default database configuration \n    slick.dbs.default.driver=\"slick.driver.MySQLDriver$\" \n    slick.dbs.default.db.driver=\"com.mysql.cj.jdbc.Driver\" \n    slick.dbs.default.db.url=\"jdbc:mysql://127.0.0.1:3306/RWS_DB?\n    useUnicode=true&useJDBCCompliantTimezoneShift=\n    true&useLegacyDatetimeCode=false&serverTimezone=UTC\" \n    slick.dbs.default.db.user=\"root\" \n    slick.dbs.default.db.password=\"\" \n\n```", "```java\n    package dao \n    import slick.lifted.TableQuery \n    import scala.concurrent.Future \n    /** \n    * Defines base dao structure every dao should have. \n    */ \n    trait BaseDao[T] { \n      def toTable():TableQuery[_]   \n      def findAll():Future[Seq[T]] \n      def remove(id:Long):Future[Int] \n      def insert(o:T):Future[Unit] \n      def update(o:T):Future[Unit] \n      def findById(id:Long):Future[Option[T]] \n    } \n\n```", "```java\n    package dao \n    trait IProductDao extends BaseDao[Product]{ \n      def findAll(): Future[Seq[Product]] \n      def findById(id:Long): Future[Option[Product]] \n      def remove(id:Long): Future[Int] \n      def insert(p:Product): Future[Unit] \n      def update(p2:Product): Future[Unit] \n    } \n    class ProductDao @Inject() (protected val dbConfigProvider: DatabaseConfigProvider)  \n    extends  \n    HasDatabaseConfigProvider[JdbcProfile] with IProductDao { \n      import driver.api._   \n      class ProductTable(tag: Tag) extends Table[Product](tag,  \n      models.ProductDef.toTable) { \n        def id = column[Option[Long]](\"ID\", O.PrimaryKey) \n        def name = column[String](\"NAME\") \n        def details = column[String](\"DETAILS\") \n        def price = column[BigDecimal](\"PRICE\") \n        def * = (id, name, details, price) <> (Product.tupled,  \n        Product.unapply _) \n      } \n      override def toTable = TableQuery[ProductTable] \n      private val Products = toTable() \n      override def findAll(): Future[Seq[Product]] =  \n      db.run(Products.result)  \n      override def findById(id:Long): Future[Option[Product]] =  \n      db.run(Products.filter( _.id === id).result.headOption) \n      override def remove(id:Long): Future[Int] =  \n      db.run(Products.filter( _.id === id).delete)  \n      override def insert(p:Product): Future[Unit] = db.run(Products    \n      += p).map { _ => () } \n      override def update(p2:Product) = Future[Unit] { \n        db.run( \n          Products.filter(_.id === p2.id) \n          .map(p => (p.name,p.details, p.price)) \n          .update((p2.name,p2.details,p2.price)) \n        ) \n      } \n    } \n\n```", "```java\nImport driver.api._\n\n```", "```java\ndb.run(Products.result)\n\n```", "```java\ndb.run(Products.filter( _.id === id).result.headOption)\n\n```", "```java\ndb.run(Products.filter( _.id === id).delete)\n\n```", "```java\ndb.run(Products += p).map { _ => () }\n\n```", "```java\n    db.run( \n      Products.filter(_.id === p2.id) \n      .map(p => (p.name,p.details, p.price)) \n      .update((p2.name,p2.details,p2.price)) \n    ) \n\n```", "```java\n    object ProductDef{ \n      def toTable:String = \"Product\" \n    } \n\n```", "```java\n    package dao \n    trait IReviewDao extends BaseDao[Review]{ \n      def findAll(): Future[Seq[Review]] \n      def findById(id:Long): Future[Option[Review]] \n      def remove(id:Long): Future[Int] \n      def insert(p:Review): Future[Unit] \n      def update(p2:Review): Future[Unit] \n    } \n    class ReviewDao @Inject() (protected val dbConfigProvider: DatabaseConfigProvider)  \n    extends HasDatabaseConfigProvider[JdbcProfile] with IReviewDao { \n      import driver.api._ \n      class ReviewTable(tag: Tag) extends Table[Review](tag,  \n      models.ReviewDef.toTable) { \n        def id = column[Option[Long]](\"ID\", O.PrimaryKey)   \n        def productId = column[Option[Long]](\"PRODUCT_ID\") \n        def author = column[String](\"AUTHOR\") \n        def comment = column[String](\"COMMENT\") \n        def * = (id, productId, author,comment) <> (Review.tupled,  \n        Review.unapply _) \n      } \n      override def toTable = TableQuery[ReviewTable] \n      private val Reviews = toTable() \n      override def findAll(): Future[Seq[Review]] =  \n      db.run(Reviews.result)  \n      override def findById(id:Long): Future[Option[Review]] =  \n      db.run(Reviews.filter( _.id === id).result.headOption) \n      override def remove(id:Long): Future[Int] =  \n      db.run(Reviews.filter( _.id === id).delete) \n      override def insert(r:Review): Future[Unit] =  \n      db.run(Reviews += r).map { _ => () } \n      override def update(r2:Review) = Future[Unit] { \n        db.run( \n          Reviews.filter(_.id === r2.id) \n          .map(i => (i.productId,i.author, i.comment)) \n          .update((r2.productId,r2.author,r2.comment)) \n        ) \n      } \n    } \n\n```", "```java\n    object ReviewDef{ \n      def toTable:String = \"Review\" \n    } \n\n```", "```java\n    package dao \n    trait IImageDao extends BaseDao[Image]{ \n      def findAll(): Future[Seq[Image]] \n      def findById(id:Long): Future[Option[Image]] \n      def remove(id:Long): Future[Int] \n      def insert(p:Image): Future[Unit] \n      def update(p2:Image): Future[Unit] \n    } \n    class ImageDao @Inject() (protected val dbConfigProvider: DatabaseConfigProvider)  \n    extends    \n    HasDatabaseConfigProvider[JdbcProfile]  \n    with IImageDao { \n      import driver.api._ \n      class ImageTable(tag: Tag) extends Table[Image](tag,  \n      models.ImageDef.toTable) {  \n        def id = column[Option[Long]](\"ID\", O.PrimaryKey) \n        def productId = column[Option[Long]](\"PRODUCT_ID\")  \n        def url = column[String](\"URL\") \n        def * = (id, productId, url) <> (Image.tupled, Image.unapply  \n        _) \n      } \n      override def toTable = TableQuery[ImageTable] \n      private val Images = toTable() \n      override def findAll(): Future[Seq[Image]] =  \n      db.run(Images.result) \n      override def findById(id:Long): Future[Option[Image]] =  \n      db.run(Images.filter( _.id === id).result.headOption) \n      override def remove(id:Long): Future[Int] =  \n      db.run(Images.filter( _.id === id).delete) \n      override def insert(i:Image): Future[Unit] =  \n      db.run(Images += i).map { _ => () } \n      override def update(i2:Image) = Future[Unit]  \n      {db.run( \n        Images.filter(_.id === i2.id)   \n        .map(i => (i.productId,i.url))   \n        .update((i2.productId,i2.url)) \n      )} \n    } \n\n```", "```java\n    object ImageDef{ \n      def toTable:String = \"Image\" \n    } \n\n```", "```java\n# --- !Ups\nCREATE TABLE Product (ID INT NOT NULL AUTO_INCREMENT,NAME VARCHAR(100) NOT NULL,DETAILS VARCHAR(250),PRICE DOUBLE NOT NULL,PRIMARY KEY ( ID ));\n# --- !Downs\n# drop table \"Product\";\n\n```", "```java\n# --- !Ups\nCREATE TABLE Image (ID INT NOT NULL AUTO_INCREMENT,PRODUCT_ID INT NOT NULL,URL VARCHAR(250),PRIMARY KEY ( ID ));\n# --- !Downs\n# drop table \"Product\";\n\n```", "```java\n# --- !Ups\nCREATE TABLE Review (ID INT NOT NULL AUTO_INCREMENT,PRODUCT_ID INT NOT NULL,AUTHOR VARCHAR(250),COMMENT VARCHAR(250),PRIMARY KEY ( ID ));\n# --- !Downs\n# drop table \"Review\";\n\n```", "```java\n    package services \n    import scala.concurrent.Future \n    trait BaseService[A] { \n      def insert(a:A):Future[Unit] \n      def update(id:Long,a:A):Future[Unit] \n      def remove(id:Long):Future[Int] \n      def findById(id:Long):Future[Option[A]] \n      def findAll():Future[Option[Seq[A]]] \n    } \n\n```", "```java\n    package services \n    trait IProductService extends BaseService[Product]{ \n      def insert(product:Product):Future[Unit] \n      def update(id:Long,product:Product):Future[Unit] \n      def remove(id:Long):Future[Int] \n      def findById(id:Long):Future[Option[Product]] \n      def findAll():Future[Option[Seq[Product]]] \n      def findAllProducts():Seq[(String,String)] \n    } \n    @Singleton \n    class ProductService  \n    @Inject() (dao:IProductDao)  \n    extends IProductService{ \n      import play.api.libs.concurrent.Execution.Implicits. \n      defaultContext \n      def insert(product:Product):Future[Unit] = { \n        dao.insert(product); \n      } \n      def update(id:Long,product:Product):Future[Unit] = { \n        product.id = Option(id.toInt) \n        dao.update(product) \n      } \n      def remove(id:Long):Future[Int] = { \n        dao.remove(id) \n      } \n      def findById(id:Long):Future[Option[Product]] = { \n        dao.findById(id) \n      } \n      def findAll():Future[Option[Seq[Product]]] = { \n        dao.findAll().map { x => Option(x) } \n      } \n      private def validateId(id:Long):Unit = { \n        val future = findById(id) \n        val entry = Awaits.get(5, future)   \n        if (entry==null || entry.equals(None)) throw new  \n        RuntimeException(\"Could not find Product: \" + id) \n      } \n      def findAllProducts():Seq[(String,String)] = { \n        val future = this.findAll() \n        val result = Awaits.get(5, future)   \n        val products:Seq[(String,String)] = result \n        .getOrElse(Seq(Product(Some(0),\"\",\"\",0))) \n        .toSeq \n        .map { product => (product.id.get.toString,product.name) } \n        return products \n      } \n    } \n\n```", "```java\n    package services \n    trait IReviewService extends BaseService[Review]{ \n      def insert(review:Review):Future[Unit] \n      def update(id:Long,review:Review):Future[Unit] \n      def remove(id:Long):Future[Int] \n      def findById(id:Long):Future[Option[Review]] \n      def findAll():Future[Option[Seq[Review]]] \n    } \n    @Singleton \n    class ReviewService @Inject() (dao:IReviewDao)  \n    extends IReviewService{ \n      import play.api.libs.concurrent.Execution. \n      Implicits.defaultContext \n      def insert(review:Review):Future[Unit] = { \n      dao.insert(review);} \n      def update(id:Long,review:Review):Future[Unit] = { \n        review.id = Option(id.toInt) \n        dao.update(review)   \n      } \n      def remove(id:Long):Future[Int] = { \n        dao.remove(id) \n      } \n      def findById(id:Long):Future[Option[Review]] = { \n        dao.findById(id) \n      } \n      def findAll():Future[Option[Seq[Review]]] = { \n        dao.findAll().map { x => Option(x) } \n      } \n      private def validateId(id:Long):Unit = { \n        val future = findById(id) \n        val entry = Awaits.get(5, future) \n        if (entry==null || entry.equals(None)) throw new  \n        RuntimeException(\"Could not find Review: \" + id) \n      }  \n    }     \n\n```", "```java\n    package services \n    trait IImageService extends BaseService[Image]{ \n      def insert(image:Image):Future[Unit] \n      def update(id:Long,image:Image):Future[Unit] \n      def remove(id:Long):Future[Int] \n      def findById(id:Long):Future[Option[Image]] \n      def findAll():Future[Option[Seq[Image]]] \n    } \n    @Singleton \n    class ImageService @Inject() (dao:IImageDao)  \n    extends IImageService { \n      import play.api.libs.concurrent.Execution. \n      Implicits.defaultContext \n      def insert(image:Image):Future[Unit] = { \n        dao.insert(image) \n      } \n      def update(id:Long,image:Image):Future[Unit] = { \n        image.id = Option(id.toInt) \n        dao.update(image)  \n      } \n      def remove(id:Long):Future[Int] = { \n        dao.remove(id) \n      } \n      def findById(id:Long):Future[Option[Image]] = { \n        dao.findById(id) \n      } \n      def findAll():Future[Option[Seq[Image]]] = { \n        dao.findAll().map { x => Option(x) } \n      } \n      private def validateId(id:Long):Unit = { \n        val future = findById(id) \n        val entry = Awaits.get(5, future) \n        if (entry==null ||entry.equals(None) ) throw new  \n        RuntimeException(\"Could not find Image: \" + id)  \n      } \n    } \n\n```", "```java\n    package controllers \n    @Singleton \n    class ProductController @Inject() (val messagesApi:MessagesApi,val service:IProductService)  \n    extends Controller with I18nSupport { \n      val productForm: Form[Product] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"name\" -> nonEmptyText, \n          \"details\" -> text, \n          \"price\" -> bigDecimal \n        )(models.Product.apply)(models.Product.unapply) \n      ) \n      def index = Action { implicit request => \n        val products = Awaits.get(5,service.findAll()) \n        .getOrElse(Seq())   \n        Logger.info(\"index called. Products: \" + products) \n        Ok(views.html.product_index(products)) \n      } \n      def blank = Action { implicit request => \n        Logger.info(\"blank called. \") \n        Ok(views.html.product_details(None, productForm)) \n      } \n      def details(id: Long) = Action { implicit request => \n        Logger.info(\"details called. id: \" + id) \n        val product = Awaits.get(5,service.findById(id)).get \n        Ok(views.html.product_details(Some(id),  \n        productForm.fill(product))) \n      } \n      def insert()= Action { implicit request => \n        Logger.info(\"insert called.\") \n        productForm.bindFromRequest.fold( \n          form => {  \n            BadRequest(views.html.product_details(None, form)) \n          }, \n          product => {  \n            service.insert(product) \n            Redirect(routes.ProductController.index). \n            flashing(\"success\" -> Messages(\"success.insert\",  \n            \"new product created\")) \n          } \n        ) \n      } \n      def update(id: Long) = Action { implicit request => \n        Logger.info(\"updated called. id: \" + id) \n        productForm.bindFromRequest.fold( \n          form => { \n            Ok(views.html.product_details(Some(id),  \n            form)).flashing(\"error\" -> \"Fix the errors!\") \n          }, \n          product => { \n            service.update(id,product)  \n            Redirect(routes.ProductController.index).flashing  \n            (\"success\" -> Messages(\"success.update\", product.name)) \n          } \n        ) \n      } \n      def remove(id: Long)= Action { \n        import play.api.libs.concurrent.Execution. \n        Implicits.defaultContext \n        val result = Awaits.get(5,service.findById(id)) \n        result.map { product => \n          service.remove(id) \n          Redirect(routes.ProductController.index).flashing(\"success\"  \n          -> Messages(\"success.delete\", product.name)) \n        }.getOrElse(NotFound) \n      } \n    } \n\n```", "```java\n    package utils \n    object Awaits { \n      def get[T](sec:Int,f:Future[T]):T = { \n        Await.result[T](f, sec seconds) \n      } \n    } \n\n```", "```java\n    package controllers \n    @Singleton \n    class ReviewController @Inject() \n    (val messagesApi:MessagesApi,val productService:IProductService, \n    val service:IReviewService) \n    extends Controller with I18nSupport { \n      val reviewForm:Form[Review] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"productId\" -> optional(longNumber), \n          \"author\" -> nonEmptyText, \n          \"comment\" -> nonEmptyText \n        )(models.Review.apply)(models.Review.unapply)  \n      ) \n      def index = Action { implicit request => \n        val reviews = Awaits.get(5,service.findAll()).getOrElse(Seq()) \n        Logger.info(\"index called. Reviews: \" + reviews) \n        Ok(views.html.review_index(reviews)) \n      } \n      def blank = Action { implicit request => \n        Logger.info(\"blank called. \") \n        Ok(views.html.review_details(None,  \n        reviewForm,productService.findAllProducts)) \n      } \n      def details(id: Long) = Action { implicit request => \n        Logger.info(\"details called. id: \" + id) \n        val review = Awaits.get(5,service.findById(id)).get \n        Ok(views.html.review_details(Some(id),  \n        reviewForm.fill(review),productService.findAllProducts)) \n      } \n      def insert()= Action { implicit request => \n        Logger.info(\"insert called.\") \n        reviewForm.bindFromRequest.fold( \n          form => { \n            BadRequest(views.html.review_details(None,  \n            form,productService.findAllProducts)) \n          }, \n          review => { \n            if (review.productId==null || review.productId.isEmpty) { \n              Redirect(routes.ReviewController.blank).flashing(\"error\"  \n              -> \"Product ID Cannot be Null!\") \n            }else { \n              Logger.info(\"Review: \" + review) \n              if (review.productId==null ||  \n              review.productId.getOrElse(0)==0) throw new  \n              IllegalArgumentException(\"Product Id Cannot Be Null\") \n              service.insert(review)   \n              Redirect(routes.ReviewController.index). \n              flashing(\"success\" -> Messages(\"success.insert\",  \n              \"new Review\")) \n            } \n          } \n        ) \n      } \n      def update(id: Long) = Action { implicit request => \n        Logger.info(\"updated called. id: \" + id)  \n        reviewForm.bindFromRequest.fold( \n          form => { \n            Ok(views.html.review_details(Some(id),  \n            form,productService.findAllProducts)). \n            flashing(\"error\" -> \"Fix the errors!\") \n          }, \n          review => { \n            service.update(id,review)  \n            Redirect(routes.ReviewController.index). \n            flashing(\"success\" -> Messages(\"success.update\",  \n            review.productId)) \n          } \n        ) \n      } \n      def remove(id: Long)= Action {  \n        import play.api.libs.concurrent.Execution. \n        Implicits.defaultContext \n        val result = Awaits.get(5,service.findById(id)) \n        result.map { review => \n          service.remove(id) \n          Redirect(routes.ReviewController.index).flashing(\"success\" - \n          > Messages(\"success.delete\", review.productId)) \n        }.getOrElse(NotFound) \n      } \n    } \n\n```", "```java\n    package controllers \n    @Singleton \n    class ImageController @Inject() \n    (val messagesApi:MessagesApi, \n    val productService:IProductService, \n    val service:IImageService) \n    extends Controller with I18nSupport { \n      val imageForm:Form[Image] = Form( \n        mapping( \n          \"id\" -> optional(longNumber), \n          \"productId\" -> optional(longNumber), \n          \"url\" -> text \n        )(models.Image.apply)(models.Image.unapply) \n      ) \n      def index = Action { implicit request => \n        val images = Awaits.get(5,service.findAll()).getOrElse(Seq()) \n        Logger.info(\"index called. Images: \" + images) \n        Ok(views.html.image_index(images)) \n      } \n      def blank = Action { implicit request => \n        Logger.info(\"blank called. \") \n        Ok(views.html.image_details(None,  \n        imageForm,productService.findAllProducts)) \n      } \n      def details(id: Long) = Action { implicit request => \n        Logger.info(\"details called. id: \" + id) \n        val image = Awaits.get(5,service.findById(id)).get \n        Ok(views.html.image_details(Some(id),  \n        imageForm.fill(image),productService.findAllProducts)) \n      } \n      def insert()= Action { implicit request => \n        Logger.info(\"insert called.\") \n        imageForm.bindFromRequest.fold( \n          form => { \n            BadRequest(views.html.image_details(None, form,  \n            productService.findAllProducts)) \n          }, \n          image => { \n            if (image.productId==null ||  \n            image.productId.getOrElse(0)==0) { \n              Redirect(routes.ImageController.blank).flashing \n              (\"error\" -> \"Product ID Cannot be Null!\") \n            }else { \n              if (image.url==null || \"\".equals(image.url))  \n              image.url = \"/assets/images/default_product.png\" \n              service.insert(image) \n              Redirect(routes.ImageController.index). \n              flashing(\"success\" -> Messages(\"success.insert\",  \n              \"new image\")) \n            } \n          } \n        ) \n      } \n      def update(id: Long) = Action { implicit request => \n        Logger.info(\"updated called. id: \" + id) \n        imageForm.bindFromRequest.fold( \n          form => { \n            Ok(views.html.image_details(Some(id), form,  \n            null)).flashing(\"error\" -> \"Fix the errors!\") \n          }, \n          image => { \n            service.update(id,image) \n            Redirect(routes.ImageController.index).flashing \n            (\"success\" -> Messages(\"success.update\", image.id)) \n          } \n        ) \n      } \n      def remove(id: Long)= Action { \n        import play.api.libs.concurrent.Execution. \n        Implicits.defaultContext \n        val result = Awaits.get(5,service.findById(id)) \n        result.map { image => \n          service.remove(id) \n          Redirect(routes.ImageController.index).flashing(\"success\"  \n          -> Messages(\"success.delete\", image.id)) \n        }.getOrElse(NotFound) \n      } \n    } \n\n```", "```java\n    bind(classOf[IProductDao]).to(classOf[ProductDao]).asEagerSingleton() \n    bind(classOf[IImageDao]).to(classOf[ImageDao]).asEagerSingleton() \n    bind(classOf[IReviewDao]).to(classOf[ReviewDao]).asEagerSingleton \n\n```", "```java\n    /** \n    * This class is a Guice module that tells Guice how to bind several \n    * different types. This Guice module is created when the Play \n    * application starts. \n    * Play will automatically use any class called `Module` that is in \n    * the root package. You can create modules in other locations by \n    * adding `play.modules.enabled` settings to the `application.conf` \n    * configuration file. \n    */ \n    class Module extends AbstractModule { \n      override def configure() = { \n        // Use the system clock as the default implementation of Clock \n        bind(classOf[Clock]).toInstance(Clock.systemDefaultZone) \n        // Ask Guice to create an instance of ApplicationTimer when  \n        //the application starts. \n        bind(classOf[ApplicationTimer]).asEagerSingleton() \n        bind(classOf[IProductService]). \n        to(classOf[ProductService]).asEagerSingleton() \n        bind(classOf[IReviewService]). \n        to(classOf[ReviewService]).asEagerSingleton() \n        bind(classOf[IImageService]). \n        to(classOf[ImageService]).asEagerSingleton() \n        bind(classOf[IPriceSerice]). \n        to(classOf[PriceService]).asEagerSingleton() \n        bind(classOf[IRndService]). \n        to(classOf[RndService]).asEagerSingleton() \n        bind(classOf[IProductDao]). \n        to(classOf[ProductDao]).asEagerSingleton() \n        bind(classOf[IImageDao]). \n        to(classOf[ImageDao]).asEagerSingleton() \n        bind(classOf[IReviewDao]). \n        to(classOf[ReviewDao]).asEagerSingleton() \n      } \n    } \n\n```", "```java\n    package models \n    trait BaseModel { \n      def getId:Option[Long] \n      def setId(id:Option[Long]):Unit \n    } \n\n```", "```java\n    package models \n    case class Product \n    ( var id:Option[Long], \n      var name:String, \n      var details:String, \n    var price:BigDecimal ) \n    extends BaseModel{ \n      override def toString:String = { \n        \"Product { id: \" + id.getOrElse(0) + \",name: \" + name + \",  \n        details: \"+ details + \", price: \" + price + \"}\" \n      } \n      override def getId:Option[Long] = id \n      override def setId(id:Option[Long]):Unit = this.id = id \n    } \n    object ProductDef{ \n      def toTable:String = \"Product\" \n    } \n\n```", "```java\n    package models \n    case class Review \n    (var id:Option[Long], \n      var productId:Option[Long], \n      var author:String, \n    var comment:String) \n    extends BaseModel{ \n      override def toString:String = { \n        \"Review { id: \" + id + \" ,productId: \" +  \n          productId.getOrElse(0) + \",author: \" + author + \",comment: \"  \n        + comment + \" }\" \n      } \n      override def getId:Option[Long] = id  \n      override def setId(id:Option[Long]):Unit = this.id = id \n    } \n    object ReviewDef{ \n      def toTable:String = \"Review\" \n    } \n\n```", "```java\npackage models \ncase class Image \n(var id:Option[Long],  \n  var productId:Option[Long], \nvar url:String) \nextends BaseModel { \n  override def toString:String = { \n    \"Image { productId: \" + productId.getOrElse(0) + \",url: \" +  \n    url + \"}\" \n  } \n  override def getId:Option[Long] = id \n  override def setId(id:Option[Long]):Unit = this.id = id \n} \nobject ImageDef{ \n  def toTable:String = \"Image\" \n} \n\n```", "```java\npackage mocks \nimport models.BaseModel \nclass GenericMockedDao[T <: BaseModel] { \n  import java.util.concurrent.atomic.AtomicLong \n  import scala.collection.mutable.HashMap \n  import scala.concurrent._ \n  import play.api.libs.concurrent.Execution. \n  Implicits.defaultContext \n  var inMemoryDB = new HashMap[Long,T] \n  var idCounter = new AtomicLong(0) \n  def findAll(): Future[Seq[T]] = { \n    Future { \n      if (inMemoryDB.isEmpty) Seq() \n      inMemoryDB.values.toSeq \n    } \n  } \n  def findById(id:Long): Future[Option[T]] = { \n    Future { \n      inMemoryDB.get(id) \n    } \n  } \n  def remove(id:Long): Future[Int] = { \n    Future { \n      validateId(id) \n      inMemoryDB.remove(id) \n      1 \n    } \n  } \n  def insert(t:T): Future[Unit] = { \n    Future { \n      val id = idCounter.incrementAndGet(); \n      t.setId(Some(id)) \n      inMemoryDB.put(id, t) \n      Unit \n    } \n  } \n  def update(t:T): Future[Unit] = { \n    Future { \n      validateId(t.getId.get) \n      inMemoryDB.put(t.getId.get, t) \n      Unit \n    } \n  } \n  private def validateId(id:Long):Unit = { \n    val entry = inMemoryDB.get(id) \n    if (entry==null || entry.equals(None)) throw new  \n    RuntimeException(\"Could not find Product: \" + id) \n  } \n} \n\n```", "```java\npackage mocks \nclass ProductMockedDao extends IProductDao { \n  val dao:GenericMockedDao[Product] = new  \n  GenericMockedDao[Product]() \n  override def findAll(): Future[Seq[Product]] = { \n    dao.findAll() \n  } \n  override def findById(id:Long): Future[Option[Product]] = { \n    dao.findById(id) \n  } \n  override def remove(id:Long): Future[Int] = { \n    dao.remove(id) \n  } \n  override def insert(p:Product): Future[Unit] = { \n    dao.insert(p) \n  } \n  override def update(p2:Product): Future[Unit] = { \n    dao.update(p2) \n  } \n  override def toTable:TableQuery[_] = { \n    null \n  } \n} \n\n```", "```java\npackage mocks \nclass ReviewMockedDao extends IReviewDao { \n  val dao:GenericMockedDao[Review] = new  \n  GenericMockedDao[Review]() \n  override def findAll(): Future[Seq[Review]] = { \n    dao.findAll() \n  } \n  override def findById(id:Long): Future[Option[Review]] = { \n    dao.findById(id) \n  } \n  override def remove(id:Long): Future[Int] = { \n    dao.remove(id) \n  } \n  override def insert(p:Review): Future[Unit] = { \n    dao.insert(p) \n  } \n  override def update(p2:Review): Future[Unit] = { \n    dao.update(p2) \n  } \n  override def toTable:TableQuery[_] = { \n    null \n  } \n} \n\n```", "```java\npackage mocks \nclass ImageMockedDao extends IImageDao { \n  val dao:GenericMockedDao[Image] = new GenericMockedDao[Image]() \n  override def findAll(): Future[Seq[Image]] = { \n    dao.findAll() \n  } \n  override def findById(id:Long): Future[Option[Image]] = { \n    dao.findById(id) \n  } \n  override def remove(id:Long): Future[Int] = { \n    dao.remove(id) \n  } \n  override def insert(p:Image): Future[Unit] = { \n    dao.insert(p) \n  } \n  override def update(p2:Image): Future[Unit] = { \n    dao.update(p2) \n  } \n  override def toTable:TableQuery[_] = { \n    null \n  } \n} \n\n```", "```java\n    package utils \n    object DBCleaner { \n      val pool = Executors.newCachedThreadPool() \n      implicit val ec = ExecutionContext.fromExecutorService(pool) \n      def cleanUp():Unit = { \n        Class.forName(\"com.mysql.cj.jdbc.Driver\") \n        val db =   Database.forURL \n        (\"jdbc:mysql://127.0.0.1:3306/RWS_DB?useUnicode= \n        true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=     \n        false&serverTimezone=UTC\", \n        \"root\", \"\") \n        try{ \n          Await.result( \n            db.run( \n              DBIO.seq( \n                sqlu\"\"\" DELETE FROM Product; \"\"\", \n                sqlu\"\"\" DELETE FROM Image; \"\"\", \n                sqlu\"\"\" DELETE FROM Review; \"\"\", \n                sqlu\"\"\" ALTER TABLE Product AUTO_INCREMENT = 1 \"\"\", \n                sqlu\"\"\" ALTER TABLE Image AUTO_INCREMENT = 1 \"\"\", \n                sqlu\"\"\" ALTER TABLE Review AUTO_INCREMENT = 1 \"\"\" \n              ) \n            ) \n          ,20 seconds) \n        }catch{ \n          case e:Exception => Unit \n        } \n      } \n    } \n\n```", "```java\n    class ProductServiceTestSpec extends PlaySpec { \n      \"ProductService\" must { \n        val service:IProductService = new ProductService(new  \n        ProductMockedDao) \n        \"insert a product properly\" in { \n          val product = new models.Product(Some(1),\"Ball\",\"Awesome  \n          Basketball\",19.75) \n          service.insert(product) \n        } \n        \"update a product\" in { \n          val product = new models.Product(Some(1),\"Blue  \n          Ball\",\"Awesome Blue Basketball\",19.99) \n          service.update(1, product) \n        } \n        \"not update because does not exit\" in { \n          intercept[RuntimeException]{ \n            service.update(333,null) \n          } \n        } \n        \"find the product 1\" in { \n          val product = Awaits.get(5, service.findById(1)) \n          product.get.id mustBe Some(1) \n          product.get.name mustBe \"Blue Ball\" \n          product.get.details mustBe \"Awesome Blue Basketball\" \n          product.get.price mustBe 19.99 \n        } \n        \"find all\" in { \n          val products = Awaits.get(5, service.findAll()) \n          products.get.length mustBe 1 \n          products.get(0).id mustBe Some(1) \n          products.get(0).name mustBe \"Blue Ball\" \n          products.get(0).details mustBe \"Awesome Blue Basketball\" \n          products.get(0).price mustBe 19.99 \n        } \n        \"find all products\" in { \n          val products = service.findAllProducts() \n          products.length mustBe 1 \n          products(0)._1 mustBe \"1\" \n          products(0)._2 mustBe \"Blue Ball\" \n        } \n        \"remove 1 product\" in { \n          val product = Awaits.get(5, service.remove(1)) \n          product mustBe 1 \n          val oldProduct = Awaits.get(5,service.findById(1)) \n          oldProduct mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            Awaits.get(5,service.remove(-1)) \n          } \n        } \n      } \n    } \n\n```", "```java\nval service:IProductService = new ProductService(new ProductMockedDao) \n\n```", "```java\n    class ReviewServiceTestSpec extends PlaySpec { \n      \"ReviewService\" must { \n        val service:IReviewService = new ReviewService(new  \n        ReviewMockedDao) \n        \"insert a review properly\" in { \n          val review = new models.Review \n          (Some(1),Some(1),\"diegopacheco\",\"Testing is Cool\") \n          service.insert(review) \n        } \n        \"update a reviewt\" in { \n          val review = new models.Review \n          (Some(1),Some(1),\"diegopacheco\",\"Testing so so Cool\") \n          service.update(1, review) \n        } \n        \"not update because does not exist\" in { \n          intercept[RuntimeException]{ \n            Awaits.get(5, service.update(333,null)) \n          } \n        } \n        \"find the review 1\" in { \n          val review = Awaits.get(5,service.findById(1)) \n          review.get.id mustBe Some(1) \n          review.get.author mustBe \"diegopacheco\" \n          review.get.comment mustBe \"Testing so so Cool\" \n          review.get.productId mustBe Some(1) \n        } \n        \"find all\" in { \n          val reviews = Awaits.get(5,service.findAll()) \n          reviews.get.length mustBe 1 \n          reviews.get(0).id mustBe Some(1) \n          reviews.get(0).author mustBe \"diegopacheco\" \n          reviews.get(0).comment mustBe \"Testing so so Cool\" \n          reviews.get(0).productId mustBe Some(1) \n        } \n        \"remove 1 review\" in { \n          val review = Awaits.get(5, service.remove(1)) \n          review mustBe 1 \n          val oldReview= Awaits.get(5, service.findById(1)) \n          oldReview mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            Awaits.get(5, service.remove(-1)) \n          } \n        } \n      } \n    } \n\n```", "```java\n    class ImageServiceTestSpec extends PlaySpec { \n      \"ImageService\" must { \n        val service:IImageService = new ImageService(new  \n        ImageMockedDao) \n        \"insert a image properly\" in { \n          val image = new models.Image \n          (Some(1),Some(1),\"http://www.google.com.br/myimage\") \n          service.insert(image) \n        } \n        \"update a image\" in { \n          val image = new models.Image \n          (Some(2),Some(1),\"http://www.google.com.br/myimage\") \n          service.update(1, image) \n        } \n        \"not update because does not exist\" in { \n          intercept[RuntimeException]{ \n            Awaits.get(5, service.update(333,null)) \n          } \n        } \n        \"find the image\" in { \n          val image = Awaits.get(5,service.findById(1)) \n          image.get.id mustBe Some(1) \n          image.get.productId mustBe Some(1) \n          image.get.url mustBe \"http://www.google.com.br/myimage\" \n        } \n        \"find all\" in { \n          val reviews = Awaits.get(5,service.findAll()) \n          reviews.get.length mustBe 1 \n          reviews.get(0).id mustBe Some(1) \n          reviews.get(0).productId mustBe Some(1) \n          reviews.get(0).url mustBe \"http://www.google.com.br/myimage\" \n        } \n        \"remove 1 image\" in { \n          val image = Awaits.get(5,service.remove(1)) \n          image mustBe 1 \n          val oldImage = Awaits.get(5,service.findById(1)) \n          oldImage mustBe None \n        } \n        \"not remove because does not exist\" in { \n          intercept[RuntimeException]{ \n            Awaits.get(5,service.remove(-1)) \n          } \n        } \n      } \n    } \n\n```", "```java\n    class ProductControllerTestSpec \n    extends  \n    PlaySpec  \n    with OneServerPerSuite with OneBrowserPerSuite with HtmlUnitFactory { \n      \"ProductController\" should { \n        DBCleaner.cleanUp() \n        \"insert a new product should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n        } \n        \"details from the product 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value mustBe \"Blue Ball\" \n          textField(\"details\").value mustBe \"Blue Ball is a Awesome  \n          and simple product\" \n          textField(\"price\").value mustBe \"17.55\" \n        } \n        \"update product 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value = \"Blue Ball 2\" \n          textField(\"details\").value = \"Blue Ball is a Awesome and  \n          simple product 2 \" \n          textField(\"price\").value = \"17.66\" \n          submit() \n          goTo(s\"http://localhost:${port}/product/details/1\") \n          textField(\"name\").value mustBe \"Blue Ball 2\" \n          textField(\"details\").value mustBe \"Blue Ball is a Awesome  \n          and simple product 2 \" \n          textField(\"price\").value mustBe \"17.66\" \n        } \n        \"delete a product should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/product\") \n          click on id(\"btnDelete\") \n        } \n        \"Cleanup db in the end\" in { \n          DBCleaner.cleanUp() \n        } \n      } \n    } \n\n```", "```java\n    class ReviewControllerTestSpec  \n    extends PlaySpec  \n    with OneServerPerSuite with OneBrowserPerSuite with HtmlUnitFactory { \n      DBCleaner.cleanUp() \n      \"ReviewController\" should { \n        \"insert a new review should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/review/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"author\") \n          enter(\"diegopacheco\") \n          click on id(\"comment\") \n          enter(\"Tests are amazing!\") \n          submit() \n        } \n        \"details from the review 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value mustBe \"diegopacheco\" \n          textField(\"comment\").value mustBe \"Tests are amazing!\" \n        } \n        \"update review 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value = \"diegopacheco2\" \n          textField(\"comment\").value = \"Tests are amazing 2!\" \n          submit() \n          goTo(s\"http://localhost:${port}/review/details/1\") \n          textField(\"author\").value mustBe \"diegopacheco2\" \n          textField(\"comment\").value mustBe \"Tests are amazing 2!\" \n        } \n        \"delete a review should be ok\" in { \n          goTo(s\"http://localhost:${port}/review/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"author\") \n          enter(\"diegopacheco\") \n          click on id(\"comment\") \n          enter(\"Tests are amazing!\") \n          submit() \n          goTo(s\"http://localhost:${port}/review\") \n        click on id(\"btnDelete\")} \n        \"Cleanup db in the end\" in { \n          DBCleaner.cleanUp() \n        } \n      } \n    } \n\n```", "```java\n    class ImageControllerTestSpec  \n    extends PlaySpec  \n    with OneServerPerSuite with OneBrowserPerSuite with HtmlUnitFactory { \n      DBCleaner.cleanUp() \n      \"ImageController\" should { \n        \"insert a new image should be ok\" in { \n          goTo(s\"http://localhost:${port}/product/add\") \n          click on id(\"name\") \n          enter(\"Blue Ball\") \n          click on id(\"details\") \n          enter(\"Blue Ball is a Awesome and simple product\") \n          click on id(\"price\") \n          enter(\"17.55\") \n          submit() \n          goTo(s\"http://localhost:${port}/image/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"url\") \n          enter(\"https://thegoalisthering.files.wordpress.com/2012/01/       \n          bluetennisball_display_image.jpg\") \n          submit() \n        } \n        \"details from the image 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value mustBe             \n          \"https://thegoalisthering.files.wordpress.com/2012/01/       \n          bluetennisball_display_image.jpg\" \n        } \n        \"update image 1 should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value =        \n          \"https://thegoalisthering.files.wordpress.com/2012/01/       \n          bluetennisball_display_image2.jpg\" \n          submit() \n          goTo(s\"http://localhost:${port}/image/details/1\") \n          textField(\"url\").value mustBe        \n          \"https://thegoalisthering.files.wordpress.com/2012/01/      \n          bluetennisball_display_image2.jpg\" \n        } \n        \"delete a image should be ok\" in { \n          goTo(s\"http://localhost:${port}/image/add\") \n          singleSel(\"productId\").value = \"1\" \n          click on id(\"url\") \n          enter(\"https://thegoalisthering.files.wordpress.com/2012/01/       \n          bluetennisball_display_image.jpg\") \n          submit() \n          goTo(s\"http://localhost:${port}/image\") \n          click on id(\"btnDelete\") \n        } \n        \"Cleanup db in the end\" in { \n          DBCleaner.cleanUp() \n        } \n      } \n    } \n\n```", "```java\n$ activator test\n\n```"]