["```java\npublic interface ElectricComponent {} \n```", "```java\npublic abstract class ElectricCircuit \n    implements ElectricComponent {\n  public abstract void on();\n  public abstract void off();\n} \n```", "```java\npublic class ShortCircuit extends ElectricCircuit {\n  public ShortCircuit(ElectricComponent... comp) {}\n  @Override\n  public void on() {}\n  @Override\n  public void off() {}\n} \n```", "```java\npublic abstract class Capacitor \n  implements ElectricComponent {} \n```", "```java\npublic class CeramicCapacitor extends Capacitor {} \n```", "```java\npublic interface ElectricBreaker extends ElectricComponent {\n  void switchOn();\n  void switchOff();\n} \n```", "```java\npublic class ElectricPanel implements ElectricBreaker {\n  private final ElectricCircuit centralCircuit;\n  private final ElectricCircuit peripheralCircuit;\n  private final ElectricCircuit auxiliaryCircuit;\n  public ElectricPanel() {\n    peripheralCircuit = new SeriesCircuit(\n      new ElectrolyticCapacitor(),new ElectrolyticCapacitor(), \n      new MetalFilmResistor(), new CarbonResistor());\n    auxiliaryCircuit = new ShortCircuit(\n      new CeramicCapacitor(), new ElectrolyticCapacitor(), \n      new MetalResistor(), new FieldEffectTransistor(), \n      new FieldEffectTransistor());\n    centralCircuit = new ParallelCircuit(\n      peripheralCircuit, auxiliaryCircuit,\n      new CeramicCapacitor(), new BipolarTransistor(), \n      new MetalOxideResistor()); \n  }\n  @Override\n  public void switchOn() {\n    auxiliaryCircuit.off();\n    peripheralCircuit.on();\n    centralCircuit.on();\n  }\n  @Override\n   public void switchOff() {\n    auxiliaryCircuit.on();\n    peripheralCircuit.off();\n    centralCircuit.off(); \n  }\n} \n```", "```java\nElectricPanel panel = new ElectricPanel();\npanel.switchOn(); \n```", "```java\npublic **final** class ParallelCircuit extends ElectricCircuit {}\npublic **final** class SeriesCircuit extends ElectricCircuit {}\npublic **final** class ShortCircuit extends ElectricCircuit {} \n```", "```java\npublic **final** class CeramicCapacitor extends Capacitor {}\npublic **final** class ElectrolyticCapacitor extends Capacitor {}\npublic **final** class FieldEffectTransistor extends Transistor {}\npublic **final** class BipolarTransistor extends Transistor {}\npublic **final** class CarbonResistor extends Resistor {}\npublic **final** class MetalFilmResistor extends MetalResistor {}\npublic **final** class MetalOxideResistor extends MetalResistor {} \n```", "```java\npublic **final** class ElectricPanel implements ElectricBreaker {} \n```", "```java\npublic abstract class ElectricCircuit \n    implements ElectricComponent {\n  **ElectricCircuit() {}**\n  ...\n} \n```", "```java\ninterface ElectricBreaker extends ElectricComponent {} \n```", "```java\nabstract class Capacitor implements ElectricComponent {}\nabstract class Resistor implements ElectricComponent {}\nabstract class Transistor implements ElectricComponent {} \n```", "```java\npublic class Truck {} \n```", "```java\npublic **sealed** class Truck {} \n```", "```java\nfinal class SemiTrailer extends Truck {}\nfinal class Tautliner extends Truck {}\nfinal class Refrigerated extends Truck {} \n```", "```java\npublic sealed interface Melon {} \n```", "```java\nnon-sealed interface Pumpkin extends Melon {}\nfinal class Gac implements Melon {}\nfinal class Cantaloupe implements Melon {}\nfinal class Hami implements Melon {} \n```", "```java\npublic sealed interface Fuel {}\nsealed interface SolidFuel extends Fuel {}\nsealed interface LiquidFuel extends Fuel {}\nsealed interface GaseousFuel extends Fuel {}\nfinal class Coke implements SolidFuel {}\nfinal class Charcoal implements SolidFuel {}\nsealed class Petroleum implements LiquidFuel {}\nfinal class Diesel extends Petroleum {}\nfinal class Gasoline extends Petroleum {}\nfinal class Ethanol extends Petroleum {}\nfinal class Propane implements GaseousFuel {}\nsealed interface NaturalGas extends GaseousFuel {}\nfinal class Hydrogen implements NaturalGas {}\nsealed class Methane implements NaturalGas {}\nfinal class Chloromethane extends Methane {}\nsealed class Dichloromethane extends Methane {}\nfinal class Trichloromethane extends Dichloromethane {} \n```", "```java\npublic sealed interface Fuel {}   // Fuel.java \n```", "```java\npublic sealed interface SolidFuel {} // SolidFuel.java \n```", "```java\npublic sealed interface Fuel \n  permits SolidFuel, LiquidFuel, GaseousFuel {} \n```", "```java\npublic sealed interface SolidFuel extends Fuel\n  permits Coke, Charcoal {} \n```", "```java\n// LiquidFuel.java\npublic sealed interface LiquidFuel extends Fuel\n  permits Petroleum {}\n// GaseousFuel.java\npublic sealed interface GaseousFuel extends Fuel\n  permits NaturalGas, Propane {} \n```", "```java\npublic final class Coke implements SolidFuel {}\npublic final class Charcoal implements SolidFuel {} \n```", "```java\npublic sealed class Petroleum implements LiquidFuel\n  permits Diesel, Gasoline, Ethanol {} \n```", "```java\npublic final class Diesel extends Petroleum {}\npublic final class Gasoline extends Petroleum {}\npublic final class Ethanol extends Petroleum {} \n```", "```java\npublic sealed interface NaturalGas extends GaseousFuel\n  permits Hydrogen, Methane {}\npublic final class Propane implements GaseousFuel {} \n```", "```java\npublic final class Hydrogen implements NaturalGas {}\npublic sealed class Methane implements NaturalGas\n  permits Chloromethane, Dichloromethane {} \n```", "```java\npublic final class Chloromethane extends Methane {}\npublic sealed class Dichloromethane extends Methane\n  permits Trichloromethane {} \n```", "```java\npublic final class Trichloromethane extends Dichloromethane {} \n```", "```java\nmodule P175_SealedHierarchySeparatePackages {} \n```", "```java\npublic interface ElectricComponent {} \n```", "```java\npublic sealed interface ElectricComponent\n  permits ElectricCircuit, ElectricBreaker, \n          Capacitor, Resistor, Transistor {} \n```", "```java\npublic sealed abstract class ElectricCircuit \n  implements ElectricComponent\n  permits ParallelCircuit, SeriesCircuit, ShortCircuit {} \n```", "```java\npublic sealed abstract class Capacitor \n  implements ElectricComponent\n  permits CeramicCapacitor, ElectrolyticCapacitor {}\npublic sealed abstract class Transistor \n  implements ElectricComponent\n  permits FieldEffectTransistor, BipolarTransistor {}\npublic sealed abstract class Resistor \n  implements ElectricComponent\n  permits MetalResistor, CarbonResistor {} \n```", "```java\npublic class MetalResistor extends Resistor {} \n```", "```java\npublic sealed class MetalResistor extends Resistor\n  permits MetalFilmResistor, MetalOxideResistor {} \n```", "```java\npublic final class MetalFilmResistor extends MetalResistor {}\npublic final class MetalOxideResistor extends MetalResistor {} \n```", "```java\ninterface ElectricBreaker extends ElectricComponent {} \n```", "```java\npublic sealed interface ElectricBreaker\n  extends ElectricComponent permits ElectricPanel {} \n```", "```java\npublic final class ElectricPanel implements ElectricBreaker {} \n```", "```java\npublic record Coke() implements SolidFuel {}\npublic record Charcoal() implements SolidFuel {}\npublic record Hydrogen() implements NaturalGas {}\npublic record Propane() implements GaseousFuel {} \n```", "```java\npublic sealed interface A {\n  record A1() implements A {}\n  record A2() implements A {}\n  final class B1 implements A {}\n  non-sealed class B2 implements A {}\n}\nrecord A3() implements A {}\nrecord A4() implements A {} \n```", "```java\npublic sealed interface A \n  permits A.A1, A.A2, A.B1, A.B2, A3, A4 {â€¦} \n```", "```java\npublic interface Quadrilateral {}\npublic class Triangle {} \n```", "```java\npublic static void drawTriangle(Triangle t) {\n  if (**t** **instanceof** **Quadrilateral**) {\n    System.out.println(\"This is not a triangle\");\n  } else {\n    System.out.println(\"Drawing a triangle\");\n  }\n} \n```", "```java\npublic class Rectangle extends Triangle\n  implements Quadrilateral {} \n```", "```java\npublic final class Triangle {} \n```", "```java\npublic class Rectangle implements Quadrilateral {} \n```", "```java\npublic class Triangle {} \n```", "```java\npublic sealed interface Quadrilateral permits Rectangle {} \n```", "```java\npublic final class Rectangle implements Quadrilateral {} \n```", "```java\npublic final class Rectangle extends Triangle\n  implements Quadrilateral {} \n```", "```java\npublic abstract class TextConverter {} \n```", "```java\nfinal public class Utf8 extends TextConverter {}\nfinal public class Utf16 extends TextConverter {}\nfinal public class Utf32 extends TextConverter {} \n```", "```java\npublic static String convert(\n  TextConverter converter, String text) { \n  return switch (converter) {\n    case Utf8 c8 -> \"Converting text to UTF-8: \" + c8;\n    case Utf16 c16 -> \"Converting text to UTF-16: \" + c16;\n    case Utf32 c32 -> \"Converting text to UTF-32: \" + c32;\n**case** **TextConverter tc ->** **\"Converting text: \"** **+ tc;**\n**default** **->** **\"Unrecognized converter type\"****;**\n  };\n} \n```", "```java\npublic sealed abstract class TextConverter\n  permits Utf8, Utf16, Utf32 {} \n```", "```java\nreturn switch (converter) {\n  case Utf8 c8 -> \"Converting text to UTF-8: \" + c8;\n  case Utf16 c16 -> \"Converting text to UTF-16: \" + c16;\n  case Utf32 c32 -> \"Converting text to UTF-32: \" + c32;\n}; \n```", "```java\nnon-sealed public class Utf16 extends TextConverter {} \n```", "```java\npublic final class Utf16be extends Utf16 {}\npublic final class Utf16le extends Utf16 {} \n```", "```java\nreturn switch (converter) {\n  case Utf8 c8 -> \"Converting text to UTF-8: \" + c8;\n  case Utf16be c16 -> \"Converting text to UTF-16BE: \" + c16;\n  case Utf16le c16 -> \"Converting text to UTF-16LE: \" + c16;\n  case Utf16 c16 -> \"Converting text to UTF-16: \" + c16;\n  case Utf32 c32 -> \"Converting text to UTF-32: \" + c32;\n}; \n```", "```java\nsealed interface BinaryTree {\n  record Leaf() implements BinaryTree {}\n  record Node(int value, BinaryTree left, BinaryTree right) \n    implements BinaryTree {} \n}\nstatic int sumNode(BinaryTree t) {\n  return switch (t) {\n    case Leaf nl -> 0;\n    case Node nv -> nv.value() + sumNode(nv.left()) \n                                + sumNode(nv.right());\n  };\n} \n```", "```java\nBinaryTree leaf = new Leaf();\nBinaryTree s1 = new Node(5, leaf, leaf);\nBinaryTree s2 = new Node(10, leaf, leaf);\nBinaryTree s = new Node(4, s1, s2);\nint sum = sumNode(s); \n```", "```java\npublic sealed interface ElectricComponent\n  permits Capacitor, Transistor, Resistor, ElectricCircuit {} \n```", "```java\nprivate static void export(ElectricComponent circuit) {\n  StringBuilder sb = new StringBuilder();\n  sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n\");\n  export(sb, circuit);\n  System.out.println(sb);\n} \n```", "```java\nprivate static String export(StringBuilder sb, \n    ElectricComponent... comps) {\n for (ElectricComponent comp : comps) {\n  switch (comp) {\n   case Capacitor c ->\n    sb.append(\"\"\"\n        <capacitor>\n          <maxImpedance>%s</maxImpedance>\n          <dielectricResistance>%s</dielectricResistance>\n          <coreTemperature>%s</coreTemperature>\n        </capacitor>\n     \"\"\".formatted(c.getMaxImpedance(), \n                   c.getDielectricResistance(), \n                   c.getCoreTemperature())).toString();\n   case Transistor t ->\n    sb.append(\"\"\"\n        <transistor>\n          <length>%s</length>\n          <width>%s</width>\n          <threshholdVoltage>%s</threshholdVoltage>\n        </transistor>\n     \"\"\".formatted(t.getLength(), t.getWidth(), \n                   t.getThreshholdVoltage())).toString();\n   case Resistor r ->\n    sb.append(\"\"\"\n        <resistor>\n          <resistance>%s</resistance>\n          <clazz>%s</clazz>\n          <voltage>%s</voltage>\n          <current>%s</current>\n          <power>%s</power>\n        </resistor>\n     \"\"\".formatted(r.getResistance(), r.getClazz(),\n                   r.getVoltage(), r.getCurrent(), \n                   r.getPower())).toString();\n   case ElectricCircuit ec ->\n    sb.append(\"\"\"\n        <electric_circuit_%s>\n        %s\\\n        </electric_circuit_%s>\n     \"\"\".formatted(ec.getId(),\n          export(new StringBuilder(), \n            ec.getComps().toArray(ElectricComponent[]::new)),\n            ec.getId()).indent(3)).toString();\n  }\n }\n return sb.toString();\n} \n```", "```java\npublic static List<Class> permittedClasses(Class clazz) {\n  if (clazz != null && clazz.isSealed()) {\n    return Arrays.asList(clazz.getPermittedSubclasses());\n  }\n  return Collections.emptyList();\n} \n```", "```java\nCoke coke = new Coke();\nMethane methane = new Methane();\n// [interface com.refinery.fuel.SolidFuel, \n//  interface com.refinery.fuel.LiquidFuel, \n//  interface com.refinery.fuel.GaseousFuel]           \nSystem.out.println(\"Fuel subclasses: \" \n  + Inspector.permittedClasses(Fuel.class));\n// [class com.refinery.fuel.Coke, \n//  class com.refinery.fuel.Charcoal]\nSystem.out.println(\"SolidFuel subclasses: \" \n  + Inspector.permittedClasses(SolidFuel.class));\n// []\nSystem.out.println(\"Coke subclasses: \" \n  + Inspector.permittedClasses(coke.getClass()));\n// [class com.refinery.fuel.Chloromethane, \n//  class com.refinery.fuel.Dichloromethane]\nSystem.out.println(\"Methane subclasses: \" \n  + Inspector.permittedClasses(methane.getClass())); \n```", "```java\npublic class InternalMath {\n  public long sum(int[] nr) {\n    return IntStream.of(nr).sum();\n  }\n} \n```", "```java\nMethodHandles.Lookup lookup = MethodHandles.lookup(); \n```", "```java\nClass<?> clazz = InternalMath.class;\nString clazzPath = clazz.getName()\n    .replace('.', '/') + \".class\";\nInputStream stream = clazz.getClassLoader()\n    .getResourceAsStream(clazzPath);        \nbyte[] clazzBytes = stream.readAllBytes(); \n```", "```java\nClass<?> hiddenClass = lookup.defineHiddenClass(clazzBytes,\n  true, ClassOption.NESTMATE).lookupClass(); \n```", "```java\nObject obj = hiddenClass.getConstructor().newInstance();\nMethod method = obj.getClass()\n    .getDeclaredMethod(\"sum\", int[].class);\nSystem.out.println(method.invoke(\n    obj, new int[] {4, 1, 6, 7})); // 18 \n```", "```java\nInternalMath obj = (InternalMath) hiddenClass\n    .getConstructor().newInstance(); \n```", "```java\npublic interface Math {}\npublic class InternalMath implements Math {â€¦} \n```", "```java\nMath obj = (Math) hiddenClass.getConstructor().newInstance(); \n```"]