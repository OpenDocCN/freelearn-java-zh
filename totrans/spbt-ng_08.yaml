- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Logging Events in Spring Boot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot中的日志事件
- en: In the previous chapter, we discussed the ideas, features, and implementation
    of **Cross-Origin Resource Sharing** (**CORS**) in securing our application. We
    also learned about **JSON Web Tokens** (**JWTs**) and how to generate one by creating
    authentication endpoints.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了在确保我们的应用程序安全方面**跨源资源共享**（**CORS**）的想法、功能和实现。我们还学习了**JSON Web Tokens**（**JWTs**）以及如何通过创建认证端点来生成一个。
- en: This chapter will focus on logging events in our Spring Boot application. We
    will discuss the popular packages for logging in to and configuring Spring Boot,
    where to save them, and what to do with logs as we develop our application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将重点介绍在Spring Boot应用程序中记录事件。我们将讨论用于记录和配置Spring Boot的流行包，它们在哪里保存，以及我们在开发应用程序时如何处理日志。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started with SLF4J and Log4j2
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用SLF4J和Log4j2
- en: Setting up SLF4J and Log4j2
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置SLF4J和Log4j2
- en: Using logs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The finished version of this chapter’s code may be seen at the following link:
    [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章代码的最终版本可以在以下链接中查看：[https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes)。
- en: Getting started with SLF4J and Log4j2
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用SLF4J和Log4j2
- en: '**Logging** is considered one of the most important aspects of developing an
    application. Its importance tends to be underrated and, worse, we forget to apply
    it to our applications.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志记录**被认为是开发应用程序最重要的方面之一。其重要性往往被低估，更糟糕的是，我们忘记将其应用于我们的应用程序。'
- en: Event logging is used in most tech industries, especially those providing enterprise
    applications. It is applied with a given standard to prevent complex debugging
    and allow for an easier understanding of the code we are reading. A well-written
    and structured log can benefit developers, especially when maintaining or debugging
    code from another developer. Instead of searching exhaustively for an error, records
    will expedite the debugging process, providing information on where and why the
    error occurred, and what has happened in our application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 事件日志在大多数技术行业中都有应用，尤其是在提供企业应用程序的行业中。它按照既定标准应用，以防止复杂的调试，并使我们更容易理解所阅读的代码。一个编写良好且结构化的日志可以造福开发者，尤其是在维护或调试其他开发者的代码时。而不是全面搜索错误，记录将加速调试过程，提供有关错误发生的位置和原因以及我们的应用程序中发生的情况的信息。
- en: Logging has also evolved with improvements in languages and frameworks; in backend
    development, several logging frameworks have been developed to provide more flexible
    logging capabilities. Some of the example frameworks that we will discuss are
    SLF4J and Log4j2 for Java Spring Boot. Before proceeding, let’s discuss the features
    of a logging framework.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 随着语言和框架的改进，日志记录也得到了发展；在后端开发中，已经开发了几种日志框架，以提供更灵活的日志功能。我们将讨论的一些示例框架是Java Spring
    Boot的SLF4J和Log4j2。在继续之前，让我们讨论日志框架的功能。
- en: Features of a logging framework
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日志框架的功能
- en: 'A logging framework contains the following three features for us to display
    and capture events in our application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 日志框架为我们提供了以下三个功能，以便在我们的应用程序中显示和捕获事件：
- en: '**Logger**: Gets the messages and the metadata'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录器**：获取消息和元数据'
- en: '**Formatter**: Formats messages retrieved from the logger'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化器**：格式化从日志记录器检索到的消息'
- en: '**Handler**: Responsible for printing the messages in the debug console or
    inserting them in the database for the developer'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理器**：负责在调试控制台打印消息或将它们插入数据库供开发者使用'
- en: 'A logging framework also displays messages with different severity levels,
    allowing the developer to quickly identify which event has occurred. The severity
    levels in a logging framework are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 日志框架还会以不同的严重程度显示消息，使开发者能够快速识别发生了哪个事件。日志框架中的严重程度如下：
- en: '**FATAL**: Level 1; considered a critical issue that can cause an application
    to pause or terminate'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FATAL**：级别1；被认为是一个可能导致应用程序暂停或终止的关键问题'
- en: '**ERROR**: Runtime errors in the application'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ERROR**：应用程序中的运行时错误'
- en: '**WARNING**: Logs that usually display deprecated APIs'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**WARNING**：通常显示已弃用API的日志'
- en: '**INFO**: Logs that display events on the runtime of the application'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**INFO**：显示应用程序运行时事件的日志'
- en: '**DEBUG**: Logs that display information on the flow of the application'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DEBUG**：显示应用程序流程信息的日志'
- en: '**TRACE**: Logs that display more detailed information on the flow of the application'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TRACE**：显示应用程序流程的更详细信息'
- en: Logging using SLF4J
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SLF4J进行日志记录
- en: One of the popular logging frameworks being used with Java is `java.util.logging`
    package, or Java’s own logging engine, JUL, using only a single dependency. This
    means that we can switch from one logging framework to another depending on what
    is needed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，与Java一起使用的流行日志框架之一是`java.util.logging`包，或Java自己的日志引擎JUL，仅使用单个依赖项。这意味着我们可以根据需要从一种日志框架切换到另一种日志框架。
- en: 'There are several advantages to using SLF4J:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 使用SLF4J有以下几个优点：
- en: SLF4J enables us to switch from one framework to another at runtime or deployment.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J使我们能够在运行时或部署时从一种框架切换到另一种框架。
- en: SLF4J has a migrator tool that allows us to migrate existing projects using
    the Java Class Library from Log4j to SLF4J.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J有一个迁移工具，允许我们将使用Java类库的现有项目从Log4j迁移到SLF4J。
- en: SLF4J supports parameterized logging messages to bind dynamic values for our
    logs.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J支持参数化日志记录消息，以绑定日志的动态值。
- en: SLF4J decouples the application from the logging framework. We do not need to
    worry about which logging framework is being used when developing our application.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SLF4J将应用程序与日志框架解耦。在开发我们的应用程序时，我们不需要担心使用的是哪种日志框架。
- en: Methods and classes of SLF4J
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLF4J的方法和类
- en: SLF4J provides several classes and methods for displaying messages with severity
    levels, profiling the time of execution, or simply returning the instance of the
    logger. Let’s discuss the provided methods and classes.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4J提供了几个类和方法来显示具有严重级别的消息、分析执行时间，或者简单地返回日志记录器的实例。让我们讨论提供的方法和类。
- en: Logger interface
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 日志记录器接口
- en: The logger interface is mainly used to display the messages or logs provided
    with the severity level. This is also the entry point of the SLF4J API.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录器接口主要用于显示带有严重级别的消息或日志。这也是SLF4J API的入口点。
- en: '`void debug(String message)`: Logs the message at the **DEBUG** level'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void debug(String message)`: 在**DEBUG**级别记录消息'
- en: '`void error(String message)`: Logs the message at the **ERROR** level'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void error(String message)`: 在**ERROR**级别记录消息'
- en: '`void info(String message)`: Logs the message at the **INFO** level'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void info(String message)`: 在**INFO**级别记录消息'
- en: '`void trace(String message)`: Logs the message at the **TRACE** level'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void trace(String message)`: 在**TRACE**级别记录消息'
- en: '`void warn(String message)`: Logs the message at the **WARN** level'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void warn(String message)`: 在**WARN**级别记录消息'
- en: The LoggerFactory class
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LoggerFactory类
- en: The `LoggerFactory` class is the SLF4J utility class, commonly used to create
    loggers using frameworks such as JUL and Log4j.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoggerFactory`类是SLF4J的实用类，通常用于使用JUL和Log4j等框架创建日志记录器。'
- en: '`Logger getLogger(String name)` generates the logger object with a specified
    name. The following example uses the `getLogger()` method:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`Logger getLogger(String name)` 生成具有指定名称的日志记录器对象。以下示例使用了`getLogger()`方法：'
- en: '[PRE0]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Profiler class
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Profiler类
- en: The `Profiler` class is mainly used to identify the execution time of a specific
    task in our application, also known as the **poor** **man’s profiler**.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`Profiler`类主要用于识别我们应用程序中特定任务的执行时间，也称为**穷人的剖析器**。'
- en: 'Various methods may be used:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用多种方法：
- en: '`void start(string name)` creates a new child stopwatch with a specific name
    and stops the previously created stopwatches.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void start(string name)` 创建一个新的具有特定名称的子级计时器，并停止之前创建的计时器。'
- en: '`TimeInstrument stop()` stops the recent child and global stopwatches and will
    return the current time execution.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimeInstrument stop()` 停止最近的子级和全局计时器，并将返回当前执行时间。'
- en: '`void log()` logs the details of the current time instruments with the logger.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void log()` 使用日志记录器记录当前时间仪器的详细信息。'
- en: '`void print()` prints the details of the current time instrument.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void print()` 打印当前时间仪器的详细信息。'
- en: Features of SLF4J
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SLF4J的功能
- en: SLF4J has several features that make logs more helpful in debugging. It provides
    support for parameterized logging, which allows us to display dynamic values in
    our messages. Another feature is profiling, which is commonly used to measure
    different attributes such as the memory and execution time of specific tasks in
    an application.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4J具有几个使日志在调试中更有用的功能。它提供了对参数化日志记录的支持，允许我们在消息中显示动态值。另一个功能是分析，它通常用于测量不同属性，如应用程序中特定任务的内存和执行时间。
- en: Let’s discuss the concept and implementation of each feature.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论每个功能的理念和实现。
- en: Parameterized logging
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参数化日志记录
- en: To use parameterized logging in SLF4J, we will include placeholders `{}` in
    the message where we want to pass the value.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 SLF4J 中实现参数化日志记录，我们将在消息中包含占位符 `{}`，其中我们想要传递值。
- en: 'Let’s have a look at the following example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: '[PRE1]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the preceding example, we have created a parameter in our message to display
    the value of the `name` variable. Once we execute the application, the output
    will be as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在消息中创建了一个参数来显示 `name` 变量的值。一旦我们执行应用程序，输出将如下所示：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Parameterized logging also supports multiple parameters in messages, as in
    the following example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 参数化日志记录还支持消息中的多个参数，如下例所示：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding example, we can display the `x` and `y` variables in a single
    log. We can also execute operations directly in our messages. The output would
    be as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以在单个日志中显示 `x` 和 `y` 变量。我们还可以在我们的消息中直接执行操作。输出将如下所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Profiling
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 性能分析
- en: SLF4J also provides profiling, which is used to measure the memory, usage, and
    execution time of specific tasks in an application. The profiling feature can
    be used by a class named `Profiler`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: SLF4J 还提供了性能分析功能，用于测量应用程序中特定任务的内存使用、使用情况和执行时间。性能分析功能可以通过名为 `Profiler` 的类使用。
- en: 'To implement a profiler in our code, we have to execute the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的代码中实现性能分析器，我们必须执行以下步骤：
- en: '`Profiler` with a specific name. Once we have done so, remember that we have
    started a global stopwatch. The following example shows how to create a new `Profiler`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用特定名称的 `Profiler`。一旦我们这样做，请记住我们已经启动了一个全局计时器。以下示例展示了如何创建一个新的 `Profiler`：
- en: '[PRE5]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`start()` method. Remember that starting a child stopwatch terminates other
    running stopwatches. This example shows how to start a stopwatch:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`start()` 方法。请记住，启动子计时器将终止其他正在运行的计时器。以下示例展示了如何启动计时器：'
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`stop()` method to stop the running stopwatch and global stopwatch. This will
    also return the Time instrument:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stop()` 方法用于停止运行中的计时器和全局计时器。这将同时返回时间仪器：'
- en: '[PRE8]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`print()` method to display the contents and information of the Time instrument.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`print()` 方法用于显示时间仪器的内容和信息。'
- en: Now we have learned the concepts, features, and advantages of SLF4J, we will
    discuss a framework called Log4j2.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 SLF4J 的概念、功能和优势，我们将讨论一个名为 Log4j2 的框架。
- en: Logging using Log4j2
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Log4j2 进行日志记录
- en: '**Log4j2** is one of the most common logging frameworks used with Java. Since
    SLF4J is an abstraction of logging frameworks, Log4j2 can be used with SLF4J.
    Log4j2 is very flexible and offers different ways to store log information for
    debugging; it also supports asynchronous logging and displays logs with a severity
    level to quickly identify the importance of messages.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**Log4j2** 是与 Java 一起使用的最常用的日志框架之一。由于 SLF4J 是日志框架的抽象，因此 Log4j2 可以与 SLF4J 一起使用。Log4j2
    非常灵活，提供了不同的方式来存储日志信息以进行调试；它还支持异步日志记录，并以严重级别显示日志，以便快速识别消息的重要性。'
- en: 'Let’s discuss the following features of Log4j2:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论 Log4j2 的以下功能：
- en: The Log4j2 Logger
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2 日志记录器
- en: Log4j2 Appenders
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2 Appenders
- en: Log4j2 Layouts
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2 布局
- en: Log4j2 Markers
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2 标记
- en: Log4j2 Filters
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Log4j2 过滤器
- en: The Log4j2 Logger
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2 日志记录器
- en: 'The `LogRecord` instances. This means the logger is responsible for dispatching
    the messages. To create a Log4j2 Logger, we only need the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`LogRecord` 实例。这意味着记录器负责分发消息。要创建 Log4j2 日志记录器，我们只需要以下代码：'
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: After creating a new Logger, we can now use it to call several methods, such
    as `info()`, to dispatch messages.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建新的 Logger 之后，我们现在可以使用它来调用几个方法，例如 `info()` 来分发消息。
- en: Log4j2 Appenders
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2 Appenders
- en: '**Appenders** are responsible for placing the logs dispatched by the Logger.
    In Log4j2, there are a wide range of Appenders that help us decide where to store
    our logs.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Appenders** 负责放置由 Logger 分发的日志。在 Log4j2 中，有多种 Appenders 帮助我们决定将日志存储在哪里。'
- en: 'Here are some of the Appenders that are available from Log4j2:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Log4j2 可用的某些 Appenders：
- en: '`ConsoleAppender`: Writes logs to the console (`System.out` or `System.err`).
    This is the default Appender.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConsoleAppender`：将日志写入控制台（`System.out` 或 `System.err`）。这是默认的 Appender。'
- en: '`FileAppender`: Writes logs to a file using `FileManager`.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileAppender`：使用 `FileManager` 将日志写入文件。'
- en: '`JDBCAppender`: Writes logs to a database using a JDBC driver.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JDBCAppender`：使用 JDBC 驱动程序将日志写入数据库。'
- en: '`HTTPAppender`: Writes logs to a specific HTTP endpoint.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTPAppender`：将日志写入特定的 HTTP 端点。'
- en: '`KafkaAppender`: Writes logs to Apache Kafka.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KafkaAppender`：将日志写入 Apache Kafka。'
- en: '`AsyncAppender`: Encapsulates another Appender and uses another thread to write
    logs, making it asynchronous logging.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AsyncAppender`: 封装另一个Appender并使用另一个线程来写入日志，使其异步日志记录。'
- en: '`SyslogAppender`: Writes logs to a syslog destination.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SyslogAppender`: 将日志写入syslog目的地。'
- en: 'You can visit the Log4j2 documentation for other available Appenders at the
    following link: https://logging.apache.org/log4j/2.x/manual/appenders.html.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以访问以下链接中的Log4j2文档，了解其他可用的Appenders：https://logging.apache.org/log4j/2.x/manual/appenders.html。
- en: Log4j2 Layouts
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2布局
- en: 'Appenders use **Layouts** to format the output of a LogEvent. Log4j2 has different
    Layouts we can choose from to format our logs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Appender使用**Layouts**来格式化LogEvent的输出。Log4j2有多个布局可供选择来格式化我们的日志：
- en: '`%d{HH:mm: ss} %msg%n;` pattern would give the following result:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`%d{HH:mm: ss} %msg%n;` 模式将给出以下结果：'
- en: '[PRE10]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**CSV**: The Layout for generating logs using CSV format.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CSV**: 使用CSV格式生成日志的布局。'
- en: '**HTML**: The Layout for generating logs in HTML format.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTML**: 用于生成HTML格式日志的布局。'
- en: '**JSON**: The Layout for generating logs in JSON format.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JSON**: 用于生成JSON格式日志的布局。'
- en: '**XML**: The Layout for generating logs in XML format.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML**: 用于生成XML格式日志的布局。'
- en: '**YAML**: The Layout for generating logs in YML format.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**YAML**: 用于生成YML格式日志的布局。'
- en: '**Syslog**: The Layout for generating logs into a syslog-compatible format.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Syslog**: 用于生成与syslog兼容格式的日志的布局。'
- en: '**Serialized**: Serializes the logs into a byte array using Java serialization.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Serialized**: 使用Java序列化将日志序列化为字节数组。'
- en: Log4j2 Markers
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2标记
- en: '`IMPORTANT` Marker, which can indicate to the Appender that it needs to store
    the log in a different destination.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMPORTANT`标记，可以指示Appender需要将日志存储在不同的目的地。'
- en: 'Let’s have a look at an example of how to create and use Markers:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建和使用标记的示例：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding example, we can create a new Marker using the `MarkerFactory.getLogger()`
    method. To use the new Marker, we can apply it to a specific logger that indicates
    a particular action needed for significant events.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们可以使用`MarkerFactory.getLogger()`方法创建一个新的标记。要使用新的标记，我们可以将其应用于特定的记录器，以指示对重要事件的特定操作。
- en: Log4j2 Filters
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2过滤器
- en: 'Log4j2 Filters are another valuable feature for use in displaying loggers.
    This gives us the capability to control log events that we want to say or publish
    based on the given criteria. In executing a Filter, we can set it with the `ACCEPT`,
    `DENY`, or `NEUTRAL` values. Here are some of the Filters we can use to display
    loggers:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j2过滤器是用于显示记录器的另一个非常有价值的功能。这使我们能够根据给定的标准控制我们想要说或发布的日志事件。在执行过滤器时，我们可以将其设置为`ACCEPT`、`DENY`或`NEUTRAL`值。以下是我们可以使用来显示记录器的过滤器：
- en: '**Threshold**: Applies filtering to log events using the severity level'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Threshold**: 使用严重级别对日志事件应用过滤'
- en: '**Time**: Applies filtering to log events with a given time range'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Time**: 对给定时间范围内的日志事件应用过滤'
- en: '**Regex**: Filters the log events based on a given regex pattern'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Regex**: 根据给定的正则表达式模式过滤日志事件'
- en: '**Marker**: Filters the log events based on the given Marker'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Marker**: 根据给定的标记过滤日志事件'
- en: '**Composite**: Provides a mechanism to combine multiple filters'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Composite**: 提供了一种机制来组合多个过滤器'
- en: '**Dynamic Threshold**: Applies filtering to log events using the severity level
    and includes additional attributes'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dynamic Threshold**: 使用严重级别和包括附加属性对日志事件应用过滤'
- en: In the following section, we will configure the logging frameworks in our project.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将配置我们项目中的日志框架。
- en: Setting up SLF4J and Log4j2
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SLF4J和Log4j2
- en: We will now implement several logging frameworks, including **Logback** and
    **Log4j2**, in our Spring Boot application. Remember that SLF4J is already included.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在我们的Spring Boot应用程序中实现几个日志框架，包括**Logback**和**Log4j2**，请记住SLF4J已经包含在内。
- en: Configuring Logback
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Logback
- en: '`spring-boot-starter-logging` dependency is already included once we create
    our Spring Boot application. The first step we need to take is to make our Logback
    configuration file.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 创建我们的Spring Boot应用程序后，`spring-boot-starter-logging`依赖项已经包含在内。我们需要采取的第一步是创建我们的Logback配置文件。
- en: 'In our project, under the `resources` folder, we will add the `logback-spring.xml`
    file. This is where we will place our Logback configuration. The following is
    an example configuration:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，在`resources`文件夹下，我们将添加`logback-spring.xml`文件。这是我们放置Logback配置的地方。以下是一个示例配置：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding XML, several configurations were defined to format our log
    events. We have created two Appenders – `Console` and `RollingFile`. Configuring
    the two appender tags will create logs in System.out and File Output.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的XML中，定义了几个配置来格式化我们的日志事件。我们创建了两个Appender – `Console`和`RollingFile`。配置这两个Appender标签将在System.out和文件输出中创建日志。
- en: 'We have also used a pattern that modifies the look and format of the log display.
    In this example, we have used the `%black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)]
    %yellow(%C{1.}): %msg%n%throwable` pattern to display the logs in `System.Out`.
    It shows the date in black, the severity level in highlight, the thread name in
    blue, the class name in yellow, and the message assigned to the logs.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '我们还使用了一种修改日志显示外观和格式的模式。在这个例子中，我们使用了`%black(%d{ISO8601}) %highlight(%-5level)
    [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable`模式来在`System.Out`中显示日志。它以黑色显示日期，以高亮显示严重级别，以蓝色显示线程名称，以黄色显示类名称，并将消息分配给日志。'
- en: 'After successfully configuring Logback, we can run the application and see
    the logs in our console:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功配置Logback之后，我们可以运行应用程序并看到控制台中的日志：
- en: '![Figure 8.1 – Log events using Logback](img/B18159_08_01.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 使用Logback的日志事件](img/B18159_08_01.jpg)'
- en: Figure 8.1 – Log events using Logback
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 使用Logback的日志事件
- en: We will now use the Log4j2 framework for our logs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用Log4j2框架来处理我们的日志。
- en: Configuring Log4j2
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Log4j2
- en: 'We can also use a different framework for logging events in our application.
    In this example, we will use Log4j2 to handle our logs:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在我们的应用程序中使用不同的框架来处理日志事件。在这个例子中，我们将使用Log4j2来处理我们的日志：
- en: 'The first step is to add the `Log4j2` dependency to our `pom.xml` file. To
    do this, we will add the following code:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是将`Log4j2`依赖项添加到我们的`pom.xml`文件中。为此，我们将添加以下代码：
- en: '[PRE13]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: After successfully adding the dependency, we must exclude the `spring-boot-starter-logging`
    dependency in our Spring Boot application, allowing us to override Logback and
    use the Log4j2 framework in logging events.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在成功添加依赖项后，我们必须在我们的Spring Boot应用程序中排除`spring-boot-starter-logging`依赖项，这样我们就可以覆盖Logback并使用Log4j2框架来处理日志事件。
- en: 'To do so, we must add the following XML code to the dependencies under the
    `org.springframework.boot` group:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，我们必须向`org.springframework.boot`组下的依赖项中添加以下XML代码：
- en: '[PRE17]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'After including the `Log4j2` dependency, we will add a file named `log4j2-spring.xml`
    to the `resources` folder and add the following XML configuration:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`Log4j2`依赖项后，我们将向`resources`文件夹中添加一个名为`log4j2-spring.xml`的文件，并添加以下XML配置：
- en: '[PRE18]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The preceding configuration is almost the same as the one we have implemented
    using Logback. We have also created two Appenders – `Console` and `RollingFile`;
    the only significant difference is the pattern for the log events. We have now
    successfully configured Log4j2\. When we run our application, we will see the
    following log output:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置几乎与使用Logback实现的配置相同。我们还创建了两个Appender – `Console`和`RollingFile`；唯一的显著区别是日志事件的模式。我们现在已成功配置Log4j2。当我们运行应用程序时，我们将看到以下日志输出：
- en: '![Figure 8.2 – Log events using Log4j2](img/B18159_08_02.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 使用Log4j2的日志事件](img/B18159_08_02.jpg)'
- en: Figure 8.2 – Log events using Log4j2
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 使用Log4j2的日志事件
- en: Having configured and modified the configuration of our logs using the Log4j2
    framework, we will now use it to add logs to our code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Log4j2框架配置和修改我们的日志配置后，我们现在将使用它来将日志添加到我们的代码中。
- en: Using logs
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志
- en: We can now use the log frameworks we have configured in our Spring Boot application
    to define logs on the different parts of our code. To do so, we must first create
    a new logger instance.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用我们在Spring Boot应用程序中配置的日志框架来定义代码不同部分的日志。为此，我们必须首先创建一个新的日志记录器实例。
- en: 'An example would be creating a log when a user attempts to get a list of all
    anti-heroes. In `AntiHeroeController`, we will add the following code to create
    a new logger instance:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当用户尝试获取所有反英雄的列表时创建一个日志。在`AntiHeroeController`中，我们将添加以下代码来创建一个新的日志记录器实例：
- en: '[PRE31]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We must also be aware that `LoggerFactory` and `Logger` should be under the
    SLF4J dependency. It is always recommended to use **SLF4J** as this is an abstraction
    of logging frameworks and makes it easier to switch between them.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须意识到`LoggerFactory`和`Logger`应该在SLF4J依赖项下。始终建议使用**SLF4J**，因为这是对日志框架的抽象，使得在它们之间切换更加容易。
- en: 'In this case, our import should be as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们的导入应该是这样的：
- en: '[PRE32]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Once we have created a new logger instance, we can now use it in our methods,
    for example, if we want to display a log when the user attempts to get a list
    of anti-heroes.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个新的日志记录器实例，现在我们就可以在我们的方法中使用它了，例如，如果我们想在用户尝试获取反英雄列表时显示日志。
- en: 'To accomplish this, under the `getAntiHeroes()` method, we will add the following
    code:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这一点，在 `getAntiHeroes()` 方法下，我们将添加以下代码：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'In the preceding example, we have invoked `info(String message)`. Every time
    the user calls the get anti-heroes endpoint, the log will be displayed. We can
    also invoke the following methods:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们已经调用了 `info(String message)`。每次用户调用获取反英雄端点时，都会显示日志。我们还可以调用以下方法：
- en: '`trace()`: Displays the log events on the **TRACE** level'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`trace()`：在 **TRACE** 级别显示日志事件'
- en: '`debug()`: Displays the log events on the **DEBUG** level'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug()`: 在 **DEBUG** 级别显示日志事件'
- en: '`warn()`: Displays the log events on the **WARN** level'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warn()`: 在 **WARN** 级别显示日志事件'
- en: '`error()`: Displays the log events on the **ERROR** level'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error()`: 在 **ERROR** 级别显示日志事件'
- en: '`getName()`: Retrieves the name of the logger'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getName()`: 获取日志记录器的名称'
- en: '`isInfoEnabled()`: Checks whether the logger is enabled on the **INFO** level'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isInfoEnabled()`: 检查日志记录器是否在 **INFO** 级别启用'
- en: '`isDebugEnabled()`: Checks whether the logger is enabled on the **DEBUG** level'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isDebugEnabled()`: 检查日志记录器是否在 **DEBUG** 级别启用'
- en: '`isWarnEnabled()`: Checks whether the logger is enabled on the **WARN** level'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isWarnEnabled()`: 检查日志记录器是否在 **WARN** 级别启用'
- en: '`isErrorEnabled()`: Checks whether the logger is enabled on the **ERROR** level'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isErrorEnabled()`: 检查日志记录器是否在 **ERROR** 级别启用'
- en: Annotations in Lombok
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lombok 中的注解
- en: 'Now let’s see how Lombok, a library in our Spring Boot application, can help
    us. Lombok can simplify our code by using annotations, but it also offers annotations
    for SLF4J and Log4j2 as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 Lombok，我们 Spring Boot 应用程序中的一个库，如何帮助我们。Lombok 可以通过使用注解简化我们的代码，但它还提供了
    SLF4J 和 Log4j2 的注解，如下所示：
- en: '`@log4j2`: This annotation will generate a new Log4j2 instance in our class.
    The following example code will be generated:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@log4j2`：这个注解将在我们的类中生成一个新的 Log4j2 实例。以下示例代码将被生成：'
- en: '[PRE34]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`@slf4j`: This annotation will generate a new SLF4J instance in our class.
    The following example code will be generated:'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@slf4j`：这个注解将在我们的类中生成一个新的 SLF4J 实例。以下示例代码将被生成：'
- en: '[PRE39]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `slf4j` annotation is recommended as it allows the switching of logging
    frameworks.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议使用 `slf4j` 注解，因为它允许切换日志框架。
- en: 'Once we have used the annotations in our class, we don’t need to create a new
    instance and we can use the log directly in our methods:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们在类中使用了注解，我们就不需要创建新的实例，我们可以在方法中直接使用日志：
- en: '[PRE44]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Summary
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has explained the concept and importance of loggers and how they
    can help developers in debugging and maintaining applications. It has introduced
    Log4j2, a third-party framework for Spring Boot that offers several features,
    such as **Appenders**, **Filters**, and **Markers**, which can assist in categorizing
    and formatting log events for developers. It has also introduced the concept of
    SLF4J, which is an abstraction of logging frameworks that allows us to switch
    between different frameworks at runtime or deployment.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已解释了日志记录器的概念和重要性，以及它们如何帮助开发者进行调试和维护应用程序。它介绍了 Log4j2，这是一个为 Spring Boot 提供多个功能的第三方框架，例如
    **Appenders**、**Filters** 和 **Markers**，这些可以帮助开发者对日志事件进行分类和格式化。它还介绍了 SLF4J 的概念，SLF4J
    是日志框架的抽象，允许我们在运行时或部署期间在不同的框架之间切换。
- en: In the following chapter, we will learn about the concepts and integration of
    unit testing in our Spring Boot application.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何在我们的 Spring Boot 应用程序中实现单元测试的概念和集成。
