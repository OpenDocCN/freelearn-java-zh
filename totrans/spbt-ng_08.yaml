- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging Events in Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we discussed the ideas, features, and implementation
    of **Cross-Origin Resource Sharing** (**CORS**) in securing our application. We
    also learned about **JSON Web Tokens** (**JWTs**) and how to generate one by creating
    authentication endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will focus on logging events in our Spring Boot application. We
    will discuss the popular packages for logging in to and configuring Spring Boot,
    where to save them, and what to do with logs as we develop our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with SLF4J and Log4j2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up SLF4J and Log4j2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using logs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The finished version of this chapter’s code may be seen at the following link:
    [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-08/superheroes).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with SLF4J and Log4j2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Logging** is considered one of the most important aspects of developing an
    application. Its importance tends to be underrated and, worse, we forget to apply
    it to our applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Event logging is used in most tech industries, especially those providing enterprise
    applications. It is applied with a given standard to prevent complex debugging
    and allow for an easier understanding of the code we are reading. A well-written
    and structured log can benefit developers, especially when maintaining or debugging
    code from another developer. Instead of searching exhaustively for an error, records
    will expedite the debugging process, providing information on where and why the
    error occurred, and what has happened in our application.
  prefs: []
  type: TYPE_NORMAL
- en: Logging has also evolved with improvements in languages and frameworks; in backend
    development, several logging frameworks have been developed to provide more flexible
    logging capabilities. Some of the example frameworks that we will discuss are
    SLF4J and Log4j2 for Java Spring Boot. Before proceeding, let’s discuss the features
    of a logging framework.
  prefs: []
  type: TYPE_NORMAL
- en: Features of a logging framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A logging framework contains the following three features for us to display
    and capture events in our application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logger**: Gets the messages and the metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formatter**: Formats messages retrieved from the logger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Handler**: Responsible for printing the messages in the debug console or
    inserting them in the database for the developer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A logging framework also displays messages with different severity levels,
    allowing the developer to quickly identify which event has occurred. The severity
    levels in a logging framework are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**FATAL**: Level 1; considered a critical issue that can cause an application
    to pause or terminate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ERROR**: Runtime errors in the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WARNING**: Logs that usually display deprecated APIs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**INFO**: Logs that display events on the runtime of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DEBUG**: Logs that display information on the flow of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TRACE**: Logs that display more detailed information on the flow of the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging using SLF4J
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the popular logging frameworks being used with Java is `java.util.logging`
    package, or Java’s own logging engine, JUL, using only a single dependency. This
    means that we can switch from one logging framework to another depending on what
    is needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several advantages to using SLF4J:'
  prefs: []
  type: TYPE_NORMAL
- en: SLF4J enables us to switch from one framework to another at runtime or deployment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J has a migrator tool that allows us to migrate existing projects using
    the Java Class Library from Log4j to SLF4J.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J supports parameterized logging messages to bind dynamic values for our
    logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SLF4J decouples the application from the logging framework. We do not need to
    worry about which logging framework is being used when developing our application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Methods and classes of SLF4J
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SLF4J provides several classes and methods for displaying messages with severity
    levels, profiling the time of execution, or simply returning the instance of the
    logger. Let’s discuss the provided methods and classes.
  prefs: []
  type: TYPE_NORMAL
- en: Logger interface
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The logger interface is mainly used to display the messages or logs provided
    with the severity level. This is also the entry point of the SLF4J API.
  prefs: []
  type: TYPE_NORMAL
- en: '`void debug(String message)`: Logs the message at the **DEBUG** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void error(String message)`: Logs the message at the **ERROR** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void info(String message)`: Logs the message at the **INFO** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void trace(String message)`: Logs the message at the **TRACE** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void warn(String message)`: Logs the message at the **WARN** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LoggerFactory class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `LoggerFactory` class is the SLF4J utility class, commonly used to create
    loggers using frameworks such as JUL and Log4j.
  prefs: []
  type: TYPE_NORMAL
- en: '`Logger getLogger(String name)` generates the logger object with a specified
    name. The following example uses the `getLogger()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Profiler class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Profiler` class is mainly used to identify the execution time of a specific
    task in our application, also known as the **poor** **man’s profiler**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Various methods may be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`void start(string name)` creates a new child stopwatch with a specific name
    and stops the previously created stopwatches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimeInstrument stop()` stops the recent child and global stopwatches and will
    return the current time execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void log()` logs the details of the current time instruments with the logger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void print()` prints the details of the current time instrument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of SLF4J
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SLF4J has several features that make logs more helpful in debugging. It provides
    support for parameterized logging, which allows us to display dynamic values in
    our messages. Another feature is profiling, which is commonly used to measure
    different attributes such as the memory and execution time of specific tasks in
    an application.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s discuss the concept and implementation of each feature.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterized logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use parameterized logging in SLF4J, we will include placeholders `{}` in
    the message where we want to pass the value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we have created a parameter in our message to display
    the value of the `name` variable. Once we execute the application, the output
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Parameterized logging also supports multiple parameters in messages, as in
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we can display the `x` and `y` variables in a single
    log. We can also execute operations directly in our messages. The output would
    be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Profiling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: SLF4J also provides profiling, which is used to measure the memory, usage, and
    execution time of specific tasks in an application. The profiling feature can
    be used by a class named `Profiler`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement a profiler in our code, we have to execute the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Profiler` with a specific name. Once we have done so, remember that we have
    started a global stopwatch. The following example shows how to create a new `Profiler`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`start()` method. Remember that starting a child stopwatch terminates other
    running stopwatches. This example shows how to start a stopwatch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`stop()` method to stop the running stopwatch and global stopwatch. This will
    also return the Time instrument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`print()` method to display the contents and information of the Time instrument.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have learned the concepts, features, and advantages of SLF4J, we will
    discuss a framework called Log4j2.
  prefs: []
  type: TYPE_NORMAL
- en: Logging using Log4j2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Log4j2** is one of the most common logging frameworks used with Java. Since
    SLF4J is an abstraction of logging frameworks, Log4j2 can be used with SLF4J.
    Log4j2 is very flexible and offers different ways to store log information for
    debugging; it also supports asynchronous logging and displays logs with a severity
    level to quickly identify the importance of messages.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s discuss the following features of Log4j2:'
  prefs: []
  type: TYPE_NORMAL
- en: The Log4j2 Logger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2 Appenders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2 Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2 Markers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2 Filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Log4j2 Logger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `LogRecord` instances. This means the logger is responsible for dispatching
    the messages. To create a Log4j2 Logger, we only need the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: After creating a new Logger, we can now use it to call several methods, such
    as `info()`, to dispatch messages.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j2 Appenders
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Appenders** are responsible for placing the logs dispatched by the Logger.
    In Log4j2, there are a wide range of Appenders that help us decide where to store
    our logs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the Appenders that are available from Log4j2:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConsoleAppender`: Writes logs to the console (`System.out` or `System.err`).
    This is the default Appender.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FileAppender`: Writes logs to a file using `FileManager`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JDBCAppender`: Writes logs to a database using a JDBC driver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTPAppender`: Writes logs to a specific HTTP endpoint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KafkaAppender`: Writes logs to Apache Kafka.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AsyncAppender`: Encapsulates another Appender and uses another thread to write
    logs, making it asynchronous logging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SyslogAppender`: Writes logs to a syslog destination.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can visit the Log4j2 documentation for other available Appenders at the
    following link: https://logging.apache.org/log4j/2.x/manual/appenders.html.'
  prefs: []
  type: TYPE_NORMAL
- en: Log4j2 Layouts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Appenders use **Layouts** to format the output of a LogEvent. Log4j2 has different
    Layouts we can choose from to format our logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`%d{HH:mm: ss} %msg%n;` pattern would give the following result:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**CSV**: The Layout for generating logs using CSV format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HTML**: The Layout for generating logs in HTML format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON**: The Layout for generating logs in JSON format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**XML**: The Layout for generating logs in XML format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**YAML**: The Layout for generating logs in YML format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Syslog**: The Layout for generating logs into a syslog-compatible format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serialized**: Serializes the logs into a byte array using Java serialization.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Log4j2 Markers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`IMPORTANT` Marker, which can indicate to the Appender that it needs to store
    the log in a different destination.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s have a look at an example of how to create and use Markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we can create a new Marker using the `MarkerFactory.getLogger()`
    method. To use the new Marker, we can apply it to a specific logger that indicates
    a particular action needed for significant events.
  prefs: []
  type: TYPE_NORMAL
- en: Log4j2 Filters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Log4j2 Filters are another valuable feature for use in displaying loggers.
    This gives us the capability to control log events that we want to say or publish
    based on the given criteria. In executing a Filter, we can set it with the `ACCEPT`,
    `DENY`, or `NEUTRAL` values. Here are some of the Filters we can use to display
    loggers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Threshold**: Applies filtering to log events using the severity level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time**: Applies filtering to log events with a given time range'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regex**: Filters the log events based on a given regex pattern'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marker**: Filters the log events based on the given Marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Composite**: Provides a mechanism to combine multiple filters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic Threshold**: Applies filtering to log events using the severity level
    and includes additional attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the following section, we will configure the logging frameworks in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up SLF4J and Log4j2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now implement several logging frameworks, including **Logback** and
    **Log4j2**, in our Spring Boot application. Remember that SLF4J is already included.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Logback
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`spring-boot-starter-logging` dependency is already included once we create
    our Spring Boot application. The first step we need to take is to make our Logback
    configuration file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our project, under the `resources` folder, we will add the `logback-spring.xml`
    file. This is where we will place our Logback configuration. The following is
    an example configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding XML, several configurations were defined to format our log
    events. We have created two Appenders – `Console` and `RollingFile`. Configuring
    the two appender tags will create logs in System.out and File Output.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have also used a pattern that modifies the look and format of the log display.
    In this example, we have used the `%black(%d{ISO8601}) %highlight(%-5level) [%blue(%t)]
    %yellow(%C{1.}): %msg%n%throwable` pattern to display the logs in `System.Out`.
    It shows the date in black, the severity level in highlight, the thread name in
    blue, the class name in yellow, and the message assigned to the logs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After successfully configuring Logback, we can run the application and see
    the logs in our console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Log events using Logback](img/B18159_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Log events using Logback
  prefs: []
  type: TYPE_NORMAL
- en: We will now use the Log4j2 framework for our logs.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Log4j2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also use a different framework for logging events in our application.
    In this example, we will use Log4j2 to handle our logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to add the `Log4j2` dependency to our `pom.xml` file. To
    do this, we will add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After successfully adding the dependency, we must exclude the `spring-boot-starter-logging`
    dependency in our Spring Boot application, allowing us to override Logback and
    use the Log4j2 framework in logging events.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do so, we must add the following XML code to the dependencies under the
    `org.springframework.boot` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'After including the `Log4j2` dependency, we will add a file named `log4j2-spring.xml`
    to the `resources` folder and add the following XML configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding configuration is almost the same as the one we have implemented
    using Logback. We have also created two Appenders – `Console` and `RollingFile`;
    the only significant difference is the pattern for the log events. We have now
    successfully configured Log4j2\. When we run our application, we will see the
    following log output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Log events using Log4j2](img/B18159_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – Log events using Log4j2
  prefs: []
  type: TYPE_NORMAL
- en: Having configured and modified the configuration of our logs using the Log4j2
    framework, we will now use it to add logs to our code.
  prefs: []
  type: TYPE_NORMAL
- en: Using logs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can now use the log frameworks we have configured in our Spring Boot application
    to define logs on the different parts of our code. To do so, we must first create
    a new logger instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example would be creating a log when a user attempts to get a list of all
    anti-heroes. In `AntiHeroeController`, we will add the following code to create
    a new logger instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: We must also be aware that `LoggerFactory` and `Logger` should be under the
    SLF4J dependency. It is always recommended to use **SLF4J** as this is an abstraction
    of logging frameworks and makes it easier to switch between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, our import should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Once we have created a new logger instance, we can now use it in our methods,
    for example, if we want to display a log when the user attempts to get a list
    of anti-heroes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To accomplish this, under the `getAntiHeroes()` method, we will add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, we have invoked `info(String message)`. Every time
    the user calls the get anti-heroes endpoint, the log will be displayed. We can
    also invoke the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`trace()`: Displays the log events on the **TRACE** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug()`: Displays the log events on the **DEBUG** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warn()`: Displays the log events on the **WARN** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error()`: Displays the log events on the **ERROR** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getName()`: Retrieves the name of the logger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isInfoEnabled()`: Checks whether the logger is enabled on the **INFO** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isDebugEnabled()`: Checks whether the logger is enabled on the **DEBUG** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isWarnEnabled()`: Checks whether the logger is enabled on the **WARN** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`isErrorEnabled()`: Checks whether the logger is enabled on the **ERROR** level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations in Lombok
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let’s see how Lombok, a library in our Spring Boot application, can help
    us. Lombok can simplify our code by using annotations, but it also offers annotations
    for SLF4J and Log4j2 as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@log4j2`: This annotation will generate a new Log4j2 instance in our class.
    The following example code will be generated:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`@slf4j`: This annotation will generate a new SLF4J instance in our class.
    The following example code will be generated:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `slf4j` annotation is recommended as it allows the switching of logging
    frameworks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once we have used the annotations in our class, we don’t need to create a new
    instance and we can use the log directly in our methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has explained the concept and importance of loggers and how they
    can help developers in debugging and maintaining applications. It has introduced
    Log4j2, a third-party framework for Spring Boot that offers several features,
    such as **Appenders**, **Filters**, and **Markers**, which can assist in categorizing
    and formatting log events for developers. It has also introduced the concept of
    SLF4J, which is an abstraction of logging frameworks that allows us to switch
    between different frameworks at runtime or deployment.
  prefs: []
  type: TYPE_NORMAL
- en: In the following chapter, we will learn about the concepts and integration of
    unit testing in our Spring Boot application.
  prefs: []
  type: TYPE_NORMAL
