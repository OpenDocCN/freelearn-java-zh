["```java\n/** \n* Test for {@link Course} \n*/ \nClass CourseTest { \n  @Test \n  public void testValidate() { \n    Course course = new Course(); \n    Assert.assertFalse(course.validate()); \n    course.setName(\"course1\") \n    Assert.assetFalse(course.validate()); \n    Course.setCredits(-5); \n    Assert.assetFalse(course.validate()); \n    course.setCredits(5); \n    Assert.assertTrue(course.validate()); \n  } \n} \n```", "```java\npackage packt.book.jee.eclipse.ch5.bean; \n\nimport java.sql.SQLException; \nimport java.util.List; \n\nimport packt.book.jee.eclipse.ch5.dao.CourseDAO; \n\npublic class Course { \n  private int id; \n  private String name; \n  private int credits; \n  private Teacher teacher; \n  private int teacherId; \n  private CourseDAO courseDAO = new CourseDAO(); \n\n  public int getId() { \n    return id; \n  } \n  public void setId(int id) { \n    this.id = id; \n  } \n  public String getName() { \n    return name; \n  } \n  public void setName(String name) { \n    this.name = name; \n  } \n  public int getCredits() { \n    return credits; \n  } \n  public void setCredits(int credits) { \n    this.credits = credits; \n  } \n  public boolean isValidCourse() { \n    return name != null && credits != 0; \n  } \n  public Teacher getTeacher() { \n    return teacher; \n  } \n  public void setTeacher(Teacher teacher) { \n    this.teacher = teacher; \n  } \n  public void addCourse() throws SQLException { \n    courseDAO.addCourse(this); \n  } \n  public List<Course> getCourses() throws SQLException { \n    return courseDAO.getCourses(); \n  } \n  public int getTeacherId() { \n    return teacherId; \n  } \n  public void setTeacherId(int teacherId) { \n    this.teacherId = teacherId; \n  } \n} \n```", "```java\n        package packt.book.jee.eclipse.ch5.bean; \n        import org.junit.Assert; \n        import org.junit.Test; \n        public class CourseTest { \n\n          @Test \n          public void testIsValidCourse() { \n            Course course = new Course(); \n            //First validate without any values set \n            Assert.assertFalse(course.isValidCourse()); \n            //set  name \n            course.setName(\"course1\"); \n            Assert.assertFalse(course.isValidCourse()); \n            //set zero credits \n            course.setCredits(0); \n            Assert.assertFalse(course.isValidCourse()); \n            //now set valid credits \n            course.setCredits(4); \n            Assert.assertTrue(course.isValidCourse()); \n          } \n\n        } \n        ```", "```java\n          @Test \n          public void testIsValidCourse() { \n            ... \n            //set empty course name \n            course.setName(\"\"); \n            Assert.assertFalse(course.isValidCourse()); \n          } \n        ```", "```java\n        public boolean isValidCourse() { \n          return name != null && credits != 0 && name.trim().length() > 0; \n        } \n        ```", "```java\n        java.lang.NoClassDefFoundError: org/junit/Assert \n          at packt.book.jee.eclipse.ch5.bean.CourseTest.testIsValidCourse \n        (CourseTest.java:10) \n        Caused by: java.lang.ClassNotFoundException: org.junit.Assert \n          at java.net.URLClassLoader$1.run(URLClassLoader.java:366) \n          at java.net.URLClassLoader$1.run(URLClassLoader.java:355) \n          at java.security.AccessController.doPrivileged(Native Method) \n        ```", "```java\n            <dependency> \n              <groupId>junit</groupId> \n              <artifactId>junit</artifactId> \n              <version>4.12</version> \n            </dependency> \n        ```", "```java\n        public void addStudent (Student student) \n            throws EnrolmentFullException, SQLException { \n          //get current enrolement first \n          int currentEnrolment = courseDAO.getNumStudentsInCourse(id); \n          if (currentEnrolment >= getMaxStudents()) \n            throw new EnrolmentFullException(\"Course if full. Enrolment closed\"); \n          courseDAO.enrolStudentInCourse(id, student.getId()); \n        } \n        ```", "```java\n        @Test \n        public void testAddStudent() { \n          //create course \n          Course course = new Course(); \n          course.setId(1); \n          course.setName(\"course1\"); \n          course.setMaxStudents(2); \n          //create student \n          Student student = new Student(); \n          student.setFirstName(\"Student1\"); \n          student.setId(1); \n          //now add student \n          try { \n            course.addStudent(student); \n          } catch (Exception e) { \n            Assert.fail(e.getMessage()); \n          } \n        } \n        ```", "```java\n        Mockito.when(object_name.method_name(params)).thenReturn(return_value); \n        ```", "```java\n        Mockito.verify(object_name, Mockito.atLeastOnce()).method_name(params);\n        ```", "```java\n            <dependency> \n              <groupId>org.mockito</groupId> \n              <artifactId>mockito-core</artifactId> \n              <version>2.17.0</version> \n            </dependency> \n        ```", "```java\n        public void setCourseDAO(CourseDAO courseDAO) { \n          this.courseDAO = courseDAO; \n        } \n        ```", "```java\n        CourseDAO courseDAO = Mockito.mock(CourseDAO.class); \n        ```", "```java\n        try { \n        Mockito.when(courseDAO.getNumStudentsInCourse(1)).thenReturn(60); \n        Mockito.doNothing().when(courseDAO).enrollStudentInCourse(1, 1); \n        } catch (SQLException e) { \n          Assert.fail(e.getMessage()); \n        } \n        ```", "```java\n        Course course = new Course(); \n        course.setCourseDAO(courseDAO); \n\n        course.setId(1); \n        course.setName(\"course1\"); \n        course.setMaxStudents(60); \n        //create student \n        Student student = new Student(); \n        student.setFirstName(\"Student1\"); \n        student.setId(1); \n        //now add student \n        course.addStudent(student); \n        ```", "```java\n        try { \n          Mockito.verify(courseDAO, Mockito.atLeastOnce()).getNumStudentsInCourse(1); \n        } catch (SQLException e) { \n          Assert.fail(e.getMessage()); \n        } \n        ```", "```java\n          @Test (expected = EnrollmentFullException.class) \n          public void testAddStudentWithEnrollmentFull() throws Exception \n           { \n            CourseDAO courseDAO = Mockito.mock(CourseDAO.class); \n            try { \n        Mockito.when(courseDAO.getNumStudentsInCourse(1)).thenReturn(60); \n        Mockito.doNothing().when(courseDAO).enrollStudentInCourse(1, 1); \n            } catch (SQLException e) { \n              Assert.fail(e.getMessage()); \n            } \n            Course course = new Course(); \n            course.setCourseDAO(courseDAO); \n\n            course.setId(1); \n            course.setName(\"course1\"); \n            course.setMaxStudents(60); \n            //create student \n            Student student = new Student(); \n            student.setFirstName(\"Student1\"); \n            student.setId(1); \n            //now add student \n            course.addStudent(student); \n\n            try { \n              Mockito.verify(courseDAO, \n               Mockito.atLeastOnce()).getNumStudentsInCourse(1); \n            } catch (SQLException e) { \n              Assert.fail(e.getMessage()); \n            } \n\n            //If no exception was thrown then the test case was successful \n            //No need of Assert here \n          } \n        ```", "```java\n          @Test \n          public void testAddStudentWithEnrollmentOpen() throws Exception \n           { \n            CourseDAO courseDAO = Mockito.mock(CourseDAO.class); \n            try { \n        Mockito.when(courseDAO.getNumStudentsInCourse(1)).thenReturn(59); \n        Mockito.doNothing().when(courseDAO).enrollStudentInCourse(1, 1); \n            } catch (SQLException e) { \n              Assert.fail(e.getMessage()); \n            } \n            Course course = new Course(); \n            course.setCourseDAO(courseDAO); \n\n            course.setId(1); \n            course.setName(\"course1\"); \n            course.setMaxStudents(60); \n            //create student \n            Student student = new Student(); \n            student.setFirstName(\"Student1\"); \n            student.setId(1); \n            //now add student \n            course.addStudent(student); \n\n            try { \n              Mockito.verify(courseDAO, \n               Mockito.atLeastOnce()).getNumStudentsInCourse(1);      Mockito.verify(courseDAO, \n               Mockito.atLeastOnce()).enrollStudentInCourse(1,1); \n            } catch (SQLException e) { \n              Assert.fail(e.getMessage()); \n            } \n\n            //If no exception was thrown then the test case was successful \n            //No need of Assert here \n          } \n        ```"]