["```java\npublic interface Conversation {\n  void begin();\n  void begin(String id);\n  void end();\n  String getId();\n  long getTimeout();\n  void setTimeout(long milliseconds);\n  boolean isTransient();\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.control;\nimport uk.co.xenonique.digital.instant.boundary.ApplicantService;\nimport uk.co.xenonique.digital.instant.entity.Address;\nimport uk.co.xenonique.digital.instant.entity.Applicant;\nimport uk.co.xenonique.digital.instant.entity.ContactDetail;\nimport uk.co.xenonique.digital.instant.util.Utility;\n// imports elided\n\n@Named(\"lendingController\")\n@ConversationScoped\npublic class LendingController implements Serializable {\n  @EJB ApplicantService applicantService;\n  @Inject Conversation conversation;\n  @Inject Utility utility;\n\n  public final static int DEFAULT_LOAN_TERM = 24;\n  public final static BigDecimal DEFAULT_LOAN_AMOUNT = new BigDecimal(\"7000\");\n  public final static BigDecimal DEFAULT_LOAN_RATE = new BigDecimal(\"5.50\");\n\n  private int dobDay;\n  private int dobMonth;\n  private String dobYear;\n  private BigDecimal minimumLoanAmount = new BigDecimal(\"3000\");\n  private BigDecimal maximumLoanAmount = new BigDecimal(\"25000\");\n  private BigDecimal minimumLoanRate   = new BigDecimal(\"3.0\");\n  private BigDecimal maximumLoanRate   = new BigDecimal(\"12.0\");\n\n  private String currencySymbol = \"Â£\";\n\n  private BigDecimal paymentMonthlyAmount = BigDecimal.ZERO;\n  private BigDecimal totalPayable = BigDecimal.ZERO;\n  private Applicant applicant;\n\n  public LendingController() {\n    applicant = new Applicant();\n    applicant.setLoanAmount( DEFAULT_LOAN_AMOUNT);\n    applicant.setLoanRate( DEFAULT_LOAN_RATE );\n    applicant.setLoanTermMonths( DEFAULT_LOAN_TERM );\n    applicant.setAddress(new Address());\n    applicant.setContactDetail(new ContactDetail());\n  }\n\n  public void checkAndStart() {\n    if ( conversation.isTransient()) {\n        conversation.begin();\n    }\n    recalculatePMT();\n  }\n\n  public void checkAndEnd() {\n    if (!conversation.isTransient()) {\n        conversation.end();\n    }\n  }\n  /* ... */\n}\n```", "```java\n@Named(\"lendingController\")\n@ConversationScoped\npublic class LendingController implements Serializable {\n  /* ... */\n\n  public String cancel() {\n      checkAndEnd();\n      return \"index?faces-redirect=true\";\n  }\n\n  public String jumpGettingStarted() {\n      return \"getting-started?faces-redirect=true\";\n  }\n\n  public String doGettingStarted() {\n      checkAndStart();\n      return \"your-details?faces-redirect=true\";\n  }\n\n  public String doYourDetails() {\n      checkAndStart();\n      Calendar cal = Calendar.getInstance();\n      cal.set(Calendar.DAY_OF_MONTH, dobDay);\n      cal.set(Calendar.MONTH, dobMonth-1);\n      int year = Integer.parseInt(dobYear);\n      cal.set(Calendar.YEAR, year);\n      applicant.getContactDetail().setDob(cal.getTime());\n      return \"your-rate?faces-redirect=true\";\n  }\n\n  public String doYourRate() {\n      checkAndStart();\n      return \"your-address?faces-redirect=true\";\n  }\n\n  public String doYourAddress() {\n      checkAndStart();\n      return \"confirm?faces-redirect=true\";\n  }\n\n  public String doConfirm() {\n      /* ... */\n      return \"completion?faces-redirect=true\";\n  }\n\n  public String doCompletion() {\n      /* ... */\n      return \"index?faces-redirect=true\";\n  }\n\n  /* ... */\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.entity;\nimport javax.persistence.*;\nimport java.math.BigDecimal;\nimport java.util.Date;\n\n@Entity\n@Table(name=\"APPLICANT\")\n@NamedQueries({\n  @NamedQuery(name=\"Applicant.findAll\",\n          query = \"select a from Applicant a \" +\n                  \"order by a.submitDate\"),\n  @NamedQuery(name=\"Applicant.findById\",\n          query = \"select a from Applicant a where a.id = :id\"),\n})\npublic class Applicant {\n  @Id\n  @GeneratedValue(strategy = GenerationType.AUTO)\n  private long id;\n\n  @OneToOne(cascade = CascadeType.ALL)\n  private ContactDetail  contactDetail;\n  @OneToOne(cascade = CascadeType.ALL)\n  private Address  address;\n\n  private String workPhone;\n  private String homePhone;\n  private String mobileNumber;\n\n  private BigDecimal loanAmount;\n  private BigDecimal loanRate;\n  private int loanTermMonths;\n  private boolean termsAgreed;\n\n  @Temporal(TemporalType.TIMESTAMP)\n  private Date submitDate;\n\n  public Applicant() { }\n\n  // Getters and setters omitted ...\n  // hashCode(), equals(), toString() elided\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.entity;\nimport javax.persistence.*;\n\n@Entity\n@Table(name=\"ADDRESS\")\n@NamedQueries({\n  @NamedQuery(name=\"Address.findAll\",\n    query = \"select a from Address a \"),\n  @NamedQuery(name=\"Address.findById\",\n    query = \"select a from Address a where a.id = :id\"),\n})\npublic class Address {\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    @Column(name=\"ADDRESS\", nullable = false,\n            insertable = true, updatable = true,\n            table = \"ADDRESS\")\n    private long id;\n\n    String houseOrFlatNumber;\n    String street1;\n    String street2;\n    String townOrCity;\n    String region;\n    String areaCode;\n    String country;\n\n    // toString(), hashCode(), equalsTo() elided\n    /* ... */\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.boundary;\nimport uk.co.xenonique.digital.instant.entity.Applicant;\nimport javax.ejb.Stateful;\nimport javax.persistence.*;\nimport java.util.List;\n\n@Stateful\npublic class ApplicantService {\n  @PersistenceContext(unitName = \"instantLendingDB\",\n    type = PersistenceContextType.EXTENDED)\n  private EntityManager entityManager;\n\n  public void add(Applicant applicant) {\n    entityManager.persist(applicant);\n  }\n\n  /* ... */\n\n  public List<Applicant> findAll() {\n    Query query = entityManager.createNamedQuery(\n        \"Applicant.findAll\");\n    return query.getResultList();\n  }\n\n  public List<Applicant> findById(Integer id) {\n    Query query = entityManager.createNamedQuery(\n        \"Applicant.findById\").setParameter(\"id\", id);\n    return query.getResultList();\n  }\n}\n```", "```java\n<!DOCTYPE html>\n<html ...>\n    <ui:composition template=\"/basic_layout.xhtml\">\n      ...\n      <ui:define name=\"mainContent\">\n        <h1> JSF Instant Secure Lending</h1>\n        <p>\n            Welcome to Duke Penny Loan where developers,\n            designers and architect can secure\n            an instant loan. <em>You move. We move.</em>\n        </p>\n\n        <div class=\"content-wrapper   center-block\">\n          <div id=\"carousel-example-generic\" class=\"carousel slide\"\n                data-ride=\"carousel\"  data-interval=\"10000\">\n            <!-- Indicators -->\n            <ol class=\"carousel-indicators\">\n                <li data-target=\"#carousel-example-generic\" data-slide-to=\"0\" class=\"active\"></li>\n                <li data-target=\"#carousel-example-generic\" data-slide-to=\"1\"></li>\n                <li data-target=\"#carousel-example-generic\" data-slide-to=\"2\"></li>\n                <li data-target=\"#carousel-example-generic\" data-slide-to=\"3\"></li>\n            </ol>\n            ...\n          </div>\n        </div><!-- content-wrapper  -->\n\n        <div class=\"content-wrapper\">\n          <h:link styleClass=\"btn btn-primary btn-lg\"\n                  outcome=\"#{lendingController.jumpGettingStarted()}\">\n              Apply Now!\n          </h:link>\n        </div>\n\n...\n    </ui:define> <!--name=\"mainContent\" -->\n  </ui:composition>\n</html>\n```", "```java\n  <div class=\"content-wrapper\">\n    <p>\n      Apply for a Dukes Dollar loan. You borrow from\n      <b>\n        <h:outputText value=\"#{lendingController.minimumLoanAmount}\" >\n          <f:convertNumber currencyCode=\"GBP\" type=\"currency\" />\n        </h:outputText>\n      </b>\n        to\n      <b>\n        <h:outputText value=\"#{lendingController.maximumLoanAmount}\" >\n          <f:convertNumber currencyCode=\"GBP\" type=\"currency\" />\n        </h:outputText>\n      </b>\n        on a rate from\n      <b>\n        <h:outputText value=\"#{lendingController.minimumLoanRate}\" >\n          <f:convertNumber pattern=\"0.00\" />\n        </h:outputText>&#37;\n      </b>\n        to\n      <b>\n        <h:outputText value=\"#{lendingController.maximumLoanRate}\" >\n          <f:convertNumber pattern=\"0.00\" />\n        </h:outputText>&#37;\n      </b>.\n    </p>\n  </div>\n```", "```java\n<h:link styleClass=\"btn btn-primary btn-lg\" outcome=\"#{lendingController.doGettingStarted()}\">\n  Next</h:link>\n```", "```java\n<h:inputText class=\"form-control\" label=\"First name\"\n   value=\"#{lendingController.applicant.contactDetail.firstName}\"\n   id=\"firstName\" placeholder=\"First name\">\n    <f:validateRequired/>\n    <f:validateLength maximum=\"64\" />\n    <f:ajax event=\"blur\" render=\"firstNameError\"/>\n</h:inputText>\n```", "```java\n<h:commandButton styleClass=\"btn btn-primary\"\n                 action=\"#{lendingController.doYourDetails()}\"\n                 value=\"Submit\" />\n&#160;\n&#160;\n<h:commandButton styleClass=\"btn btn-default\"\n                 action=\"#{lendingController.cancel()}\"\n                 immediate=\"true\" value=\"Cancel\"/>\n```", "```java\n<h:form id=\"yourRateForm\"\n  styleClass=\"form-horizontal\"\n    p:role=\"form\">\n  <div class=\"form-group\">\n    <h:outputLabel for=\"loanAmount\"\n      class=\"col-sm-3 control-label\">\n        Loan Amount</h:outputLabel>\n    <div class=\"col-sm-9\">\n      <input class=\"form-control\" jsf:label=\"Loan Amount\"\n        jsf:value=\"#{lendingController.applicant.loanAmount}\"\n          type=\"range\"\n        min=\"#{lendingController.minimumLoanAmount}\"\n        max=\"#{lendingController.maximumLoanAmount}\"\n        step=\"250\"\n        id=\"loanAmount\" >\n      <f:validateRequired/>\n        <f:ajax event=\"blur\" render=\"loanAmountError\"/>\n        <f:ajax event=\"valueChange\"\n                listener=\"#{lendingController.recalculatePMT()}\"\n                render=\"paymentMonthlyOutput loanRateOutput  totalPayableOutput\" />\n      </input>\n      <h:message id=\"loanAmountError\"\n                 for=\"loanAmount\" styleClass=\"alert validation-error\"/>\n    </div>\n  </div>\n```", "```java\n<!DOCTYPE html>\n<html \n\n      >\n```", "```java\n<f:ajax event=\"valueChange\"\n   listener=\"#{lendingController.recalculatePMT()}\"\n   render=\"paymentMonthlyOutput  loanRateOutput   \n           totalPayableOutput\" />\n```", "```java\n<c:set var=\"loanAmountWidth\" value=\"#{100.0 * (lendingController.applicant.loanAmount - lendingController.minimumLoanAmount) / (lendingController.maximumLoanAmount - lendingController.minimumLoanAmount)}\" />\n\n  <div class=\"progress\">\n      <div id=\"loanAmountProgress\" class=\"progress-bar  progress-bar-success  progress-bar-striped\"\n           role=\"progressbar\" aria-valuenow=\"#{lendingController.applicant.loanAmount}\"\n           aria-valuemin=\"#{lendingController.minimumLoanAmount}\"\n           aria-valuemax=\"#{lendingController.maximumLoanAmount}\"\n           style=\"width: ${loanAmountWidth}%;\">\n          #{lendingController.applicant.loanAmount}\n      </div>\n  </div>\n\n  <div class=\"content-wrapper\">\n    <p id=\"loanAmountText\" class=\"monetary-text\">\n        You would like to borrow\n        <b> #{lendingController.currencySymbol}\n        <h:outputText value=\"#{lendingController.applicant.loanAmount}\" >\n            <f:convertNumber pattern=\"#0,000\" />\n        </h:outputText> </b>\n    </p>\n  </div>\n```", "```java\n<c:set var=\"loanAmountWidth\" value=\"#{100.0 *  (lendingController.applicant.loanAmount - lendingController.minimumLoanAmount) / (lendingController.maximumLoanAmount - lendingController.minimumLoanAmount)}\" />\n```", "```java\nvar instantLending = instantLending || {};\n\ninstantLending.Main = function()\n{\n  var init = function()\n  {\n    $(document).ready( function() {\n      associateRangeToText(\n        '#loanAmount', '#loanAmountProgress', '#loanAmountText',\n        3000.0, 25000.0,\n        function(value) {\n            var valueNumber = parseFloat(value);\n            return \"You would like to borrow <b>Â£\" +\n                valueNumber.formatMoney(2, '.', ',') + \"</b>\";\n        });\n    });\n  };\n\n  var associateRangeToText = function( rangeElementId,\n    rangeProgressId, rangeTextId, minimumValue,\n    maximumValue, convertor) {\n    var valueElem = $(rangeElementId);\n    var progressElem = $(rangeProgressId);\n    var textElem = $(rangeTextId);\n    valueElem.change( function() {\n      var value = valueElem.val();\n      progressElem.html(value);\n      progressElem.attr(\"aria-valuenow\", value);\n\n      var percentage = 100.0 * ( value - minimumValue) /\n        ( maximumValue - minimumValue );\n      progressElem.css(\"width\", percentage+\"%\");\n\n      var monetaryText = convertor( value )\n      textElem.html( monetaryText );\n    });\n  }\n\n  var oPublic =\n  {\n    init: init,\n    associateRangeToText: associateRangeToText\n  };\n\n  return oPublic;\n}(jQuery);\n\ninstantLending.Main.init();\n```", "```java\n// See http://stackoverflow.com/questions/149055/how-can-i-format-numbers-as-money-in-javascript\nNumber.prototype.formatMoney = function(c, d, t){\n  var n = this,\n      c = isNaN(c = Math.abs(c)) ? 2 : c,\n      d = d == undefined ? \".\" : d,\n      t = t == undefined ? \",\" : t,\n      s = n < 0 ? \"-\" : \"\",\n      i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + \"\",\n      j = (j = i.length) > 3 ? j % 3 : 0;\n  return s + (j ? i.substr(0, j) + t : \"\") +\n      i.substr(j).replace(/(\\d{3})(?=\\d)/g, \"$1\" + t) +\n      (c ? d + Math.abs(n - i).toFixed(c).slice(2) : \"\");\n};\n```", "```java\nvar p = 128500.99\nconsole.log(p.formatMoney(2, '.', ',') ) // 128,500.99\n```", "```java\n<c:set var=\"loanRateWidth\" value=\"#{100.0 * (lendingController.applicant.loanRate - lendingController.minimumLoanRate) / (lendingController.maximumLoanRate - lendingController.minimumLoanRate)}\" />\n\n<h:panelGroup layout=\"block\" id=\"loanRateOutput\">\n  <div class=\"progress\">\n    <div id=\"loanRateProgress\" class=\"progress-bar  progress-bar-info progress-bar-striped\"\n      role=\"progressbar\" aria-valuenow=\"#{lendingController.recalculateLoanRate()}\"\n         aria-valuemin=\"#{lendingController.minimumLoanRate}\"\n         aria-valuemax=\"#{lendingController.maximumLoanRate}\"\n         style=\"width: ${loanRateWidth}%;\">\n      #{lendingController.applicant.loanRate}\n    </div>\n  </div>\n  <div class=\"content-wrapper\">\n    <p id=\"loanRateText\" class=\"monetary-text\">\n      The tax rate will be\n      <b> <h:outputText value=\"#{lendingController.applicant.loanRate}\" >\n        <f:convertNumber pattern=\"0.000\" />\n      </h:outputText>&#37;</b>\n    </p>\n  </div>\n</h:panelGroup>\n```", "```java\npublic BigDecimal recalculatePMT() {\n  recalculateLoanRate();\n  paymentMonthlyAmount = new BigDecimal(utility.calculateMonthlyPayment(\n      applicant.getLoanAmount().doubleValue(),\n      applicant.getLoanRate().doubleValue(),\n      applicant.getLoanTermMonths()));\n\n  totalPayable = paymentMonthlyAmount.multiply(\n    new BigDecimal( applicant.getLoanTermMonths()));\n  return paymentMonthlyAmount;\n}\n\npublic BigDecimal recalculateLoanRate() {\n  applicant.setLoanRate(\n    utility.getTaxRate(applicant.getLoanAmount()));\n  return applicant.getLoanRate();\n}\n```", "```java\n<div class=\"form-group\">\n  <h:outputLabel for=\"loanTerm\" class=\"col-sm-3 control-label\">\n    Loan Term (Months)</h:outputLabel>\n  <div class=\"col-sm-9\">\n    <h:selectOneMenu class=\"form-control\"\n      label=\"Title\" id=\"loanTerm\"\n         value=\"#{lendingController.applicant.loanTermMonths}\">\n      <f:selectItem itemLabel=\"12 months\" itemValue=\"12\" />\n      <f:selectItem itemLabel=\"24 months\" itemValue=\"24\" />\n      <f:selectItem itemLabel=\"36 months\" itemValue=\"36\" />\n      <f:selectItem itemLabel=\"48 months\" itemValue=\"48\" />\n      <f:selectItem itemLabel=\"60 months\" itemValue=\"60\" />\n      <f:validateRequired/>\n      <f:ajax event=\"blur\" render=\"loanTermError\"/>\n      <f:ajax event=\"valueChange\"\n        listener=\"#{lendingController.recalculatePMT()}\"\n        render=\"paymentMonthlyOutput loanRateOutput \n          monthTermsOutput  totalPayableOutput\" />\n    </h:selectOneMenu>\n    <h:message id=\"loanTermError\"\n      for=\"loanTerm\" styleClass=\"alert validation-error\"/>\n  </div>\n</div>\n```", "```java\n<div class=\"content-wrapper\" >\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <p class=\"monetary-text-large\">\n        Your monthly payment is <b>\n        #{lendingController.currencySymbol}<h:outputText\n          id=\"paymentMonthlyOutput\"\n          value=\"#{lendingController.recalculatePMT()}\">\n          <f:convertNumber pattern=\"#0.00\" />\n        </h:outputText></b>\n      </p>\n    </div>\n  </div>\n  <div class=\"row\">\n    <div class=\"col-md-6\">\n      <p class=\"monetary-text\">\n        Loan term\n        <h:outputText id=\"monthTermsOutput\"\n        value=\"#{lendingController.applicant.loanTermMonths}\"/>\n         months\n      </p>\n    </div>\n    <div class=\"col-md-6\">\n      <p class=\"monetary-text\">\n        Total payable\n        #{lendingController.currencySymbol}<h:outputText\n          id=\"totalPayableOutput\"\n          value=\"#{lendingController.totalPayable}\">\n            <f:convertNumber pattern=\"#0,000\" />\n        </h:outputText>\n      </p>\n    </div>\n  </div>\n</div>\n```", "```java\n<h:form id=\"yourAddressForm\"\n        styleClass=\"form-horizontal\"\n        p:role=\"form\">\n  <div class=\"form-group\">\n    <h:outputLabel for=\"houseOrFlatNumber\"\n      class=\"col-sm-3 control-label\">\n        House number</h:outputLabel>\n    <div class=\"col-sm-9\">\n      <h:inputText class=\"form-control\"\n        label=\"House or Flat Number\"\n          value=\"#{lendingController.applicant.address.houseOrFlatNumber}\"\n         id=\"houseOrFlatNumber\" placeholder=\"First name\">\n        <f:validateLength maximum=\"16\" />\n        <f:ajax event=\"blur\" render=\"houseOrFlatNumberError\"/>\n      </h:inputText>\n      <h:message id=\"houseOrFlatNumberError\"\n         for=\"houseOrFlatNumber\"\n         styleClass=\"alert validation-error\"/>\n    </div>\n  </div>\n  ...\n</h:form>\n```", "```java\n<h:form id=\"yourConfirmForm\"\n  styleClass=\"form-horizontal\" p:role=\"form\"> ...\n  <div class=\"form-group\">\n    <h:outputLabel for=\"tocAgreed\" class=\"col-sm-6 control-label\">\n      Do you agree with the <em>Terms of Conditions</em>?\n    </h:outputLabel>\n    <div class=\"col-sm-6\">\n      <h:selectBooleanCheckbox class=\"form-control\"\n         label=\"TOC Agreement\" id=\"tocAgreed\"\n         value=\"#{lendingController.applicant.termsAgreed}\"\n      validator=\"#{lendingController.validateTermsOrConditions}\" >\n          <f:ajax event=\"blur\" render=\"tocAgreedError\"/>\n      </h:selectBooleanCheckbox>\n      <h:message id=\"tocAgreedError\"\n         for=\"tocAgreed\" styleClass=\"alert validation-error\"/>\n    </div>\n  </div>\n  ...\n</h:form>\n```", "```java\n public String doConfirm() {\n    if ( applicant.isTermsAgreed()) {\n      throw new IllegalStateException(\n        \"terms of agreements not set to true\");\n    }\n    recalculatePMT();\n    applicant.setSubmitDate(new Date());\n    applicantService.add(applicant);\n    return \"completion?faces-redirect=true\";\n  }\n```", "```java\n public String doCompletion() {\n    checkAndEnd();\n    return \"index?faces-redirect=true\";\n  }\n```", "```java\npackage uk.co.xenonique.digital.instant.control;\nimport javax.annotation.PostConstruct;\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.inject.Named;\nimport java.io.Serializable;\nimport java.text.DateFormatSymbols;\nimport java.util.*;\n\n@Named(\"dateHelperController\")\n@ApplicationScoped\npublic class DateHelperController implements Serializable {\n  private List<Integer> daysOfTheMonth = new ArrayList<>();\n  private Map<String,Integer> monthsOfTheYear\n    = new LinkedHashMap<>();\n\n  @PostConstruct\n  public void init() {\n    for (int d=1; d<=31; ++d) { daysOfTheMonth.add(d); }\n    DateFormatSymbols symbols = new DateFormatSymbols(Locale.getDefault());\n    for (int m=1; m<=12; ++m) {\n        monthsOfTheYear.put(symbols.getMonths()[m-1], m );\n    }\n  }\n\n  public List<Integer> getDaysOfTheMonth() {\n    return daysOfTheMonth;\n  }\n  public Map<String,Integer> getMonthsOfTheYear() {\n    return monthsOfTheYear;\n  }\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.util;\nimport javax.enterprise.context.ApplicationScoped;\nimport java.io.Serializable;\nimport java.math.BigDecimal;\nimport java.util.*;\n\n@ApplicationScoped\npublic class Utility implements Serializable {\n  protected List<LoanRateBounds> bounds = Arrays.asList(\n      new LoanRateBounds(\"0.0\",       \"4500.0\",   \"22.50\"),\n      new LoanRateBounds(\"4500.0\",    \"6000.0\",   \"9.79\"),\n      new LoanRateBounds(\"6000.0\",    \"9000.0\",   \"7.49\"),\n      new LoanRateBounds(\"9000.0\",    \"11500.0\",  \"4.49\"),\n      new LoanRateBounds(\"11500.0\",   \"15000.0\",  \"4.29\"),\n      new LoanRateBounds(\"15000.0\",   \"20000.0\",  \"5.79\"),\n      new LoanRateBounds(\"20000.0\",   \"25000.0\",  \"6.29\"),\n      new LoanRateBounds(\"30000.0\",   \"50000.0\",  \"6.99\")\n      );\n\n  public BigDecimal getTaxRate( BigDecimal amount ) {\n    for ( LoanRateBounds bound : bounds ) {\n      if ( bound.getLower().compareTo(amount) <= 0 &&\n            bound.getUpper().compareTo(amount) > 0 ) {\n        return  bound.getRate();\n      }\n    }\n    throw new IllegalArgumentException(\"no tax rate found in bounds\");\n  }\n\n  public double calculateMonthlyPayment( double pv, double apr, int np ) {\n    double ir = apr / 100 / 12;\n    return (pv * ir) / (1 - Math.pow(1+ir, -np));\n  }\n}\n```", "```java\npackage uk.co.xenonique.digital.instant.util;\nimport java.math.BigDecimal;\n\npublic class LoanRateBounds {\n  private final BigDecimal lower;\n  private final BigDecimal upper;\n  private final BigDecimal rate;\n\n  public LoanRateBounds(String lower, String upper, String rate) {\n    this(new BigDecimal(lower), new BigDecimal(upper),\n        new BigDecimal(rate));\n  }\n\n  public LoanRateBounds(final BigDecimal lower,\n    final BigDecimal upper, final BigDecimal rate) {\n      this.lower = lower;\n      this.upper = upper;\n      this.rate = rate;\n  }\n\n  // toString(), hashCode(), equals() and getters omitted\n}\n```", "```java`# Composite custom components    JSF also features custom components that you, the developer, can write. In fact, the instant secure lending example uses one: the top header of each page view in the conversation. It is a hint that informs the customer where he or she is in the flow. I've called it the `WorkerBannerComponent`.    In JSF, a custom component describes a reusable piece of page content that may insert into a Facelet view many times over. A custom component may or may not have a backing bean, and it may or may not group together a set of properties into a form. As mentioned in [Chapter 2](part0025.xhtml#aid-NQU22 \"ChapterÂ 2.Â JavaServer Faces Lifecycle\"), *JavaServer Faces Lifecycle*, we can use custom components to build repeated page content that takes advantage of the latest HTML frameworks such as Bootstrap and that abstracts away the deeper details. Businesses can use custom components to establish a common structure for the page content and markup.    ## Components with XHTML    The `WorkerBannerComponent` is a backing bean for the logic of the display header, which identifies the section of the flow that the customer is active in. The code for the custom component is as follows:    ```", "```java    We apply the annotation `@javax.faces.component.FacesComponent` to the POJO `WorkerBannerComponent`. This annotation declares to the JSF that we have a custom component with the name `workerBannerComponent`. The `@FacesComponent` is expanded in JSF 2.2, so that we can write all the code for generating the output HTML in Java. Fortunately, we do not require the ability to create a custom component that also registers its own custom tag, because it is quite handy to control the markup in a lightweight editor like Sublime or VIM.    Our `WorkerBannerComponent` extends `javax.faces.component.UINamingContainer`, which is a custom component supplied by JSF with the ability to add a unique identifier. In the JSF parlance, a naming container is a bucket for a component that has a unique name and which can also store the child components with the same characteristics.    The overridden method `encodeAll()` is usually the place to render the output of a custom tag that provides its own markup. Here, we second the intent with the logic that decides which worker tab is active and which is not. Similar to the custom event handling in the previous chapter ([Chapter 4](part0043.xhtml#aid-190861 \"ChapterÂ 4.Â JSF Validation and AJAX\"), *JSF Validation and AJAX*, *Invoking an action event listener* section), we can interrogate the attributes in order to retrieve the parameters that are passed to our component from the page content.    Let's examine the page content for this component. The name of the file is `worker-banner.xhtml`, and the extracted page content looks like the following:    ```", "```java    In JSF, the custom composite component content must be placed into the special directory, `/resources`. The full path for this content is `/resources/components/workflow-banner.xhtml`. The composite components are registered under an XML namespace, namely [http://xmlns.jcp.org/jsf/composite](http://xmlns.jcp.org/jsf/composite). A custom component requires an interface and an implementation. Facelets define two tags `<cc:interfaces>` and `<cc:implementation>`.    The library tag `<cc:interface>` declares a composite component, and the attribute `componentType` references the name with the Java component. Here, it refers to the `WorkerBannerComponent`. The outer tag also encompasses a set of `<cc:attribute>` tags that declare the attributes that a component accepts. In our component, we only accept a `sectionName` attribute, which allows the page author to state where the customer is in their journey.    The tag `<cc:implementation>` declares the actual implementation, which is the rendered output. The tag also places a specially named variable called `cc`, which stands for composite component, into the JSF page scope. We can use it to access the properties in the custom composite component, and this special variable is only accessible inside the body content of the `<cc:implementation>` tag. Therefore, the value expression `#{cc.gettingStartedActive}` accesses the property called `gettingStartedActive` in `WorkerBannerComponent`. The logic ensures that only the named section will be highlighted as active through CSS. The logic is placed in a bean, because we need it to execute in the Render-Response phase of the JSF lifecycle rather than in the build time. JSF also adds another special variable into the page scope called component. This variable refers to the actual component being processed during the rendering phase.    ### Tip    **Why does JSTL not work?**    You might have thought that we could have dispensed with the server-side component and solved our banner problem with the good old **JavaServer Pages Tag Library** (**JSTL**). Unfortunately, this will fail to work, because JSF operates with lifecycles and therefore, the later binding of the frameworks makes working with the core JSTL tags such as `<c:if>`, `<c:choose>`, and `<c:set>` unworkable. Besides, good software engineers know that best practice means separating the presentation mark-up from business logic.    Although not shown in this section, it is possible to access the supplied attributes on the custom component inside the `<cc:implementation>` body content. The value expression `cc.attrs` provides such access. So if we wanted to write a component to access the input attributes, then we could have retrieved the section name in the markup using `#{cc.attrs.sectionName}`.    That is all there is to writing a composite component. In order to use it, we need to add an XML namespace, which is associated with the tag to the page that uses it. Let's see how to use it from the page content for `your-rate.xhtml` from our instant secure loan application, as shown in the following code:    ```", "```java    The namespace is [http://xmlns.jcp.org/jsf/composite/components](http://xmlns.jcp.org/jsf/composite/components), and it is identified by the name **xen**. The special directory `/resources/components` is significant, because JSF searches for the custom components at this location by default.    Now we can directly use the component by the element name `<xen:workflow-banner>`. Under the counter, JSF knows that it has to look up a custom component definition called `workflow-banner.xhtml`; it then associates the component type, `WorkerBannerComponent`.    To recap, a composite component allows the JSF developers to create reusable dynamic content. A custom component uses an XHTML Facelet view and, usually, a backing bean or another action controller. A composite component may include other template views. There are no restrictions on the sort of markup as long as it is well formed and valid XHTML Facelets. The page author can use this composite component in many pages. Best of all, these composite components have the full support of the JSF action listeners, validators, and convertors.    ## Composite components and custom components    As mentioned in the preceding section, the JSF custom components make a distinction between the composite parent and the component in the render phase. Inside `<cc:implementation>`, one can access the composite parent with the variable `cc` and the actual processed component with the variable component.    An example of the distinction will make it abundantly clear. Let's create a custom composite component with just an XHTML markup. The path of the file, under the web root, is `/resources/components/component-report.xhtml`.    ```", "```java    By default, JSF references the XHTML with the basename, component-report. This component just dumps the component and the composite ids to the page . The component is one of the three `<h:outputText>` tags. The parent of these is the composite component itself. In fact, the component can be derived programmatically by invoking the static helper method, `getCompositeComponentParent()`, on the abstract class, `javax.faces.component.UIComponent`.    Let's inspect the page view that uses the composite component, `/composite-demo.xhtml`:    ```", "```java    The XHTML element `<xen:component-report>` represents the custom component. It is defined with the namespace [http://xmlns.jcp.org/jsf/composite/components](http://xmlns.jcp.org/jsf/composite/components), the same one as before.    The following is a screenshot of the page view illustrating the identifiers for the composite and component tags:  ![Composite components and custom components](img/image00405.jpeg)  You can see the component ID changes per processing.    ## Composite component with self-generating tag    In JSF 2.2, `@FacesComponent` has the ability to generate the custom tag without specifying any XML declaration. This feature is in contrast to the previous versions of the specification, where it was a lot harder to write maintainable and reusable custom components. JSF 2.2 adds three additional attributes, including the attribute `createTag`.    The following table outlines the attributes for the `@FacesComponent` annotation:     | Attribute | Type | Description | | --- | --- | --- | | `value` | `String` | The value of this expression is the name of the custom component. By default, it is the camel case of the POJO class with the first character in lowercase, like any Java identifier. | | `createTag` | `Boolean` | If true, then JSF creates a custom tag for this component. | | `tagName` | `String` | Specifies the tag name for the custom component. | | `namespace` | `String` | Specifies the namespace for the custom component. If none is given, the default is [http://xmlns.jcp.org/jsf/component](http://xmlns.jcp.org/jsf/component). |    By way of example, we will write a basic security information custom tag, which is a custom component.    The following is the complete code for a custom component called **InfoSecurityComponent**:    ```", "```java    Once again, our `InfoSecurityComponent` component extends the class `UINamingContainer`, because this handles many useful JSF interfaces such as `NamingContainer`, `UniqueIdVendor`, `StateHolder`, and `FacesListener`. We annotate with `@FacesComponent`, and this time, we supply the namespace, `createTag`, and value tag.    The `getFamily()` method specifies the collection that this component belongs to. It is helpful if you are creating a reusable library of components for distribution, and effectively aids the third-party programming tools.    The `saveState()` and `restoreState()` methods demonstrate how we persist the state of a component over multiple HTTP requests. The reason for the existence of `StateHelpert` is the impedance between the JSF lifecycle and the stateless nature of HTTP. As you already know by now, JSF builds a dynamic graph of the component tree for a page. The state of this tree changes during the transition between the JSF phases. Saving the states allows JSF to preserve the information from the web form, when the user submitted the page. If there is a failure during conversion or validation, JSF can restore the state of the view.    In the `saveState()` method, we create an `Object[]` array of the necessary size and fill it with values. The first element of the array must be the saved context.    On the other hand, JSF invokes the `loadState()` method with the object state, which is also an `Object[]` array. We ignore the first element, because this is an irrelevant and, probably, a stale context from the previous request. We reassign the properties from the remaining elements of the array.    The methods `encodeBegin()` and `encodeEnd()` are where the real fun happens. These methods are designed for rendering the markup of the custom component, the tag's output. Because the custom component may embed other components, it is a good idea to split the rendered output. Here, we are using `javax.faces.context.ResponseWriter` to build up the HTML output. The abstract class has methods called `startElement()` and `endElement()` to render the content at the beginning and at the end of the markup element respectively. The method `writeAttribute()` handles the markup attributes of the element.    So `InfoSecurityComponent` renders a div layer element with the Bootstrap CSS alert classes. It attempts to retrieve the name of the current Java EE security principal, if one has been defined, and displays that information to the customer.    When given the XHTML page view:    ```", "```java    The output HTML should look like this:    ```", "```java    Note that the namespace in the XHTML matches the custom tag's annotation.    Take a look at the following screenshot of the view of `your-rate.xhtml` running on an iOS Simulator. It demonstrates the responsive web design features of the application:  ![Composite component with self-generating tag](img/image00406.jpeg)  # Summary    We made tremendous strides in this chapter towards a working application by examining a popular and contemporary business model. We looked at how conversational scope could help drive an instant secure lending application. Conversation scope allows us to easily write the customer journey and the wizard form that takes the user gradually through a process. Conversation scope ensures that data is stored over a lifecycle between the request and the session scopes.    We talked very briefly about a useful design pattern called Entity-Control-Boundary. It was revealed how this pattern is similar to the MVC pattern.    Along the way, we saw a JavaScript module that linked an HTML5 range component together with a Bootstrap CSS Progress element. We studied how JSF provides AJAX with partial updates of a view. We also learnt that we could replace static singleton classes with the CDI application-scoped POJOs.    Finally, we took a deep dive into custom composite components. We now know how to write a section banner component and even provide information about the Java EE security principal to a page view. JSF 2.2 is definitely a fun standard to play with. I think by now you agree that it fits the modern web architecture very well.    In the next chapter, we will look at Faces Flow.    # Exercises    1.  Describe, in simple steps, the digital customer journey for change of address for your local bank. You might start with the identification step first. Don't be tempted to drill down deep into banking security; instead remain at the altitude of 30,000 features, and list or tabulate steps on what you might expect to see. 2.  At this stage of the study, you need to know how to persist data to a backing store. If you haven't done so already, revise your favorite persistence layer, be it JPA, Hibernate, Mongo DB, or something else. Do you know how to retrieve, save, amend, and remove entities from your persistence store? 3.  Copy and rename the blank application, and write a simple conversational scope bean that captures web comments like a guest book. 4.  Ensure that your backing bean uses `@ConversationScoped`. What happens to the guest book before a conversation starts? Is the information retained? (A guest book in the early digital stage was a very simple web application that allowed an Internet user to write a comment on a web page. The list of comments would grow and grow until the machine restarted or crashed. Nowadays nobody would write such a professional application and deploy it on a website.) 5.  Open another browser and point it to the same guest book application. Do you see the same guest entries as before or afterwards? 6.  Let's return to the Hobby Book Club application that you have been building through the previous chapters. We will add to it now by allowing books to be reviewed as a conversation. We'll keep it simple with user stories:          *   As a reviewer, I want to be able to add my book reviews to the club's website     *   As a reviewer, I want to see other people's reviews of the books including my own     *   As a reviewer, I want to edit any reviews     *   As a reviewer, I want to delete any reviews           7.  Write a `@ConversationScoped` backing bean that handles the customer journey of adding a book review, amending, and removing it. To break this task down to easier milestones, you might prefer to first store the data records using the basic Java collection, without persistence into memory. After building the functionality, you can use a real database. 8.  The Conversation scope is ideal for data-capture applications, especially where the user is entering information across several complex sections. Consider a business website that captures rÃ©sumÃ©s (curriculum vitaes): CV Entry Application. Write the output of the customer journey, given the following sections:          *   Personal information (full name, qualification)     *   Address (home address, e-mail, and phone numbers)     *   Skills matrix (professional industry skills)     *   Work experience (places of employment)     *   Achievements (awards)     *   Education (education)           9.  Map out the customer journey for the CV Entry Application. Build a website project using `@ConversationScoped` that captures this information. Apply the KISS (Keep It Simple Stupid) principle. You only need to demonstrate the conversation state across multiple pages and not build a complete professional application. 10.  In the CV Entry Application, have you taken care of tracking the user journey in the page views? How does the user know where he or she is in the process? Write a custom component that enables this UX feature. 11.  What is the difference between a custom component and a composite component? Do any of these component types require backing beans? 12.  In the CV Entry Application, there are probably other areas where content reuse can be applied. Write a composite component that captures the skill set entry. You probably require a collection: `Collection<SkillSet>`, where the SkillSet entity has the properties: `title (String)`, `description (String)`, and `years or months of experience (Integer)`. How did you organize the data structure so that the order of the skills presented remain exactly the same as the user entered them? Is this an embellishment for an advanced skill-set a CRUD by itself?```"]