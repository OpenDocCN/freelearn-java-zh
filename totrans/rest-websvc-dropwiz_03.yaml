- en: Chapter 3. Configuring the Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。配置应用程序
- en: Up until this point, we have created a simple template for a Dropwizard application.
    What our application does is print a message to the terminal during startup.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为 Dropwizard 应用程序创建了一个简单的模板。我们的应用程序在启动时会向终端打印一条消息。
- en: Generally, every modern application depends on a number of configuration settings
    that define the way it runs. For instance, once our application grows and needs
    to interact with a database, we should somehow use (at least) a username and password
    to establish a database connection. Of course, we can hardcode these settings
    inside the application, but that's not efficient, as even a small change would
    require rebuilding it. The appropriate way of storing such or similar information
    is by using an external configuration file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，每个现代应用程序都依赖于一系列配置设置，这些设置定义了它的运行方式。例如，一旦我们的应用程序增长并需要与数据库交互，我们就应该以某种方式使用（至少）用户名和密码来建立数据库连接。当然，我们可以在应用程序内部硬编码这些设置，但这并不高效，因为即使是微小的更改也要求重新构建它。存储此类或类似信息的适当方式是使用外部配置文件。
- en: Externalizing the application's configuration
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序的配置外部化
- en: Using a configuration file requires the appropriate application logic to load
    and parse it. Luckily, Dropwizard has built-in functionality that we will use
    in order to externalize our application's configuration.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置文件需要适当的应用程序逻辑来加载和解析它。幸运的是，Dropwizard 内置了我们将要使用的功能，以便外部化我们的应用程序配置。
- en: How to do it…
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做…
- en: 'Create a new YAML file named `config.yaml` in the same directory as the `pom.xml`
    file. This will be the configuration file of our application. We will add two
    configuration parameters: the message to be printed on startup and how many times
    to print it. In order to do so, add the following code to `config.yaml`:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`pom.xml`文件相同的目录下创建一个名为`config.yaml`的新 YAML 文件。这将是我们的应用程序的配置文件。我们将添加两个配置参数：启动时打印的消息以及打印的次数。为了做到这一点，请将以下代码添加到`config.yaml`中：
- en: '[PRE0]'
  id: totrans-7
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now we have a configuration file, but we need to parse it. Let''s create a
    new class in the `com.dwbook.phonebook` package named `PhonebookConfiguration`
    by adding the following code:'
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了配置文件，但我们需要解析它。让我们在`com.dwbook.phonebook`包中创建一个新的类`PhonebookConfiguration`，通过添加以下代码：
- en: '[PRE1]'
  id: totrans-9
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As you can see, it is a simple class, with two member properties named after
    our configuration settings along with their getter methods.
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，它是一个简单的类，包含两个成员属性，分别以我们的配置设置命名，以及它们的getter方法。
- en: 'To use this class as our configuration proxy, modify the declaration of our
    main `App` class to extend the `Application<PhonebookConfiguration>` class instead
    of `Application<Configuration>`:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用此类作为我们的配置代理，修改我们的主`App`类的声明，使其扩展`Application<PhonebookConfiguration>`类而不是`Application<Configuration>`：
- en: '[PRE2]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Similarly, update `configuration` to `PhonebookConfiguration` in the declaration
    of the `App#initialize()` method:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，更新`configuration`到`PhonebookConfiguration`在`App#initialize()`方法的声明中：
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The `App#run()` method will require the same modification in its definition,
    but we''ll also modify this method further so it retrieves the message to print
    from the configuration class:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`App#run()`方法在其定义中也需要相同的修改，但我们还将进一步修改此方法，以便从配置类中检索要打印的消息：'
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Package (`mvn package`) and run the application and specify the configuration
    file as well:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打包（`mvn package`）并运行应用程序，并指定配置文件：
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You will see the message printed three times in your terminal during the application''s
    startup, as shown in the following screenshot:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在应用程序启动期间，你将在终端中看到消息打印了三次，如下截图所示：
- en: '![How to do it…](img/9530OS_03_01.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何做…](img/9530OS_03_01.jpg)'
- en: Apart from this, and as in the previous example, you will also see an exception
    stating that no resource classes could be located (the `ResourceConfig` instance
    does not contain any root resource classes). This is because we do not have any
    REST resources registered in our application yet. We will deal with this in the
    following chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，就像前面的例子一样，你还会看到一个异常，指出找不到资源类（`ResourceConfig`实例不包含任何根资源类）。这是因为我们在应用程序中还没有注册任何
    REST 资源。我们将在下一章中处理这个问题。
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: You should see that our configuration file is automatically parsed. In fact,
    the `PhonebookConfiguration` class is instantiated with the values specified in
    the configuration file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到我们的配置文件被自动解析。实际上，`PhonebookConfiguration` 类是用配置文件中指定的值实例化的。
- en: When a configuration file is passed as a command-line argument, Dropwizard parses
    it and creates an instance of your service's configuration class. We added the
    required configuration parameters as private members of the `PhonebookConfiguration`
    class and annotated them with `@JsonProperty` so Dropwizard can parse them. In
    order to make these properties accessible to our application's service class,
    we also need to add public getters for these parameters.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置文件作为命令行参数传递时，Dropwizard会解析它并创建你的服务配置类的实例。我们将所需的配置参数作为`PhonebookConfiguration`类的私有成员添加，并使用`@JsonProperty`注解它们，以便Dropwizard可以解析它们。为了使这些属性对我们应用程序的服务类可访问，我们还需要为这些参数添加公共getter方法。
- en: There's more…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Externalizing your application's configuration has many advantages. With Dropwizard,
    you can easily store and read any kind of properties (configuration settings)
    you wish to have for your application with minimum effort, just by mapping YAML
    properties to the properties of your configuration class.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序的配置外部化有许多优点。使用Dropwizard，你可以轻松地存储和读取你希望为应用程序使用的任何类型的属性（配置设置），只需将YAML属性映射到配置类的属性即可，无需花费太多精力。
- en: Dropwizard's configuration parameters
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Dropwizard的配置参数
- en: Dropwizard has plenty of configuration parameters available, such as the port
    that the embedded Jetty listens to and the logging level. The list is quite large
    and cannot be covered here extensively, though it is available on the official
    Dropwizard website at [http://www.dropwizard.io/manual/core/#configuration-defaults](http://www.dropwizard.io/manual/core/#configuration-defaults).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard提供了大量的配置参数，例如嵌入式Jetty监听的端口和日志级别。虽然这个列表相当长，无法在此详尽介绍，但它可以在官方Dropwizard网站上找到，链接为[http://www.dropwizard.io/manual/core/#configuration-defaults](http://www.dropwizard.io/manual/core/#configuration-defaults)。
- en: YAML
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: YAML
- en: The description of YAML according to its official website ([http://www.yaml.org](http://www.yaml.org))
    is human-friendly data serialization standard. Its syntax is pretty straightforward,
    which is also the reason why YAML is widely accepted. YAML files are identified
    by the extensions `.yaml` and `.yml`; both are valid, although `.yml` seems to
    be more popular lately.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据其官方网站的描述([http://www.yaml.org](http://www.yaml.org))，YAML是一种人性化的数据序列化标准。它的语法相当简单，这也是YAML被广泛接受的原因。YAML文件由扩展名`.yaml`和`.yml`标识；两者都是有效的，尽管`.yml`似乎最近更受欢迎。
- en: Validating configuration settings
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证配置设置
- en: Although it is good to have the application's configuration externalized, we
    should not always rely on it as is. Dropwizard has got us covered, and we have
    the right tools in order to validate the configuration properties up on the application's
    startup. This is because we can use constraint annotations for our configuration
    properties, such as those included in the `javax.validation.constraints` or `org.hibernate.validator.constraints`
    packages.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将应用程序的配置外部化是好事，但我们不应总是完全依赖它。Dropwizard已经为我们提供了保障，并且我们有适当的工具来在应用程序启动时验证配置属性。这是因为我们可以为配置属性使用约束注解，例如包含在`javax.validation.constraints`或`org.hibernate.validator.constraints`包中的那些注解。
- en: We are going to limit the number of repetitions of the message to 10; if the
    number provided is larger than 10, then the input is considered invalid.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将限制消息重复的次数为10；如果提供的数字大于10，则输入被视为无效。
- en: How to do it…
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s go through the following steps required for validating the configuration
    settings:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤来验证配置设置：
- en: 'Update the definition of the `messageRepetitions` property in `PhonebookConfiguration`,
    annotating the property with the `@Max` annotation (you will also need to import
    `javax.validation.constraints.Max`):'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`PhonebookConfiguration`中`messageRepetitions`属性的定义，使用`@Max`注解标注该属性（你还需要导入`javax.validation.constraints.Max`）：
- en: '[PRE6]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In a similar way, define that the `message` property should not be empty, annotating
    the property with the `@NotEmpty (org.hibernate.validator.constraints.NotEmpty)`
    annotation:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式，定义`message`属性不应为空，使用`@NotEmpty (org.hibernate.validator.constraints.NotEmpty)`注解标注该属性：
- en: '[PRE7]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Edit the `Config.yaml` file and specify a value greater than 10 for the `messageRepetitions`
    property.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`Config.yaml`文件，并为`messageRepetitions`属性指定一个大于10的值。
- en: Repackage and run the application again. The application will refuse to start,
    and you will see an error printed on your terminal as seen in the following screenshot:![How
    to do it…](img/9530OS_03_02.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打包并再次运行应用程序。应用程序将拒绝启动，你将在终端上看到以下截图所示的错误信息：![如何操作…](img/9530OS_03_02.jpg)
- en: How it works…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The validation-related annotations force Dropwizard to validate the values of
    each of the properties declared in our configuration file. If the validation constraints
    are not satisfied, the relevant error message will be printed on the terminal,
    and the application will not start.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 验证相关的注解强制Dropwizard验证我们配置文件中声明的每个属性的值。如果验证约束不满足，相关的错误信息将打印在终端上，并且应用程序将不会启动。
- en: There's more…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Now you have a working configuration file that is mapped on the configuration
    object during the startup of the application. Also, as well as checking the validity
    of the configuration parameters, you can also provide a default value for each
    one of them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有一个在应用程序启动时映射到配置对象上的工作配置文件。此外，除了检查配置参数的有效性之外，你还可以为每个参数提供一个默认值。
- en: Specifying default parameters
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 指定默认参数
- en: You can specify the default values for configuration parameters as easily as
    initializing the variables on their declaration. This way, optional parameters
    can be omitted and can have a default value during runtime, even if they're not
    included in the application's configuration file.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以像在声明时初始化变量一样轻松地指定配置参数的默认值。这样，可选参数可以省略，并且在运行时可以具有默认值，即使它们没有包含在应用程序的配置文件中。
- en: 'Let''s add an additional parameter, which we''ll also initialize, named `additionalMessage,`
    along with its getter method:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个额外的参数，我们将初始化它，命名为`additionalMessage`，以及它的getter方法：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: If you run the application specifying a configuration file that does not contain
    the `additionalMessage` property, then the default value of this property will
    be returned when you try to access it from another part of the code, for instance,
    if you use `c.getAdditionalMessage()` from inside the `App#run()` method. This
    way, you can have optional parameters for your application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行应用程序并指定了一个不包含`additionalMessage`属性的配置文件，那么当你尝试从代码的其他部分访问该属性时，将返回此属性的默认值，例如，如果你在`App#run()`方法内部使用`c.getAdditionalMessage()`。这样，你可以为你的应用程序提供可选参数。
