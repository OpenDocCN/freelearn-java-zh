- en: Chapter 3. Configuring the Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until this point, we have created a simple template for a Dropwizard application.
    What our application does is print a message to the terminal during startup.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, every modern application depends on a number of configuration settings
    that define the way it runs. For instance, once our application grows and needs
    to interact with a database, we should somehow use (at least) a username and password
    to establish a database connection. Of course, we can hardcode these settings
    inside the application, but that's not efficient, as even a small change would
    require rebuilding it. The appropriate way of storing such or similar information
    is by using an external configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: Externalizing the application's configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a configuration file requires the appropriate application logic to load
    and parse it. Luckily, Dropwizard has built-in functionality that we will use
    in order to externalize our application's configuration.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new YAML file named `config.yaml` in the same directory as the `pom.xml`
    file. This will be the configuration file of our application. We will add two
    configuration parameters: the message to be printed on startup and how many times
    to print it. In order to do so, add the following code to `config.yaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we have a configuration file, but we need to parse it. Let''s create a
    new class in the `com.dwbook.phonebook` package named `PhonebookConfiguration`
    by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: As you can see, it is a simple class, with two member properties named after
    our configuration settings along with their getter methods.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To use this class as our configuration proxy, modify the declaration of our
    main `App` class to extend the `Application<PhonebookConfiguration>` class instead
    of `Application<Configuration>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Similarly, update `configuration` to `PhonebookConfiguration` in the declaration
    of the `App#initialize()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `App#run()` method will require the same modification in its definition,
    but we''ll also modify this method further so it retrieves the message to print
    from the configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Package (`mvn package`) and run the application and specify the configuration
    file as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the message printed three times in your terminal during the application''s
    startup, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_03_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apart from this, and as in the previous example, you will also see an exception
    stating that no resource classes could be located (the `ResourceConfig` instance
    does not contain any root resource classes). This is because we do not have any
    REST resources registered in our application yet. We will deal with this in the
    following chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You should see that our configuration file is automatically parsed. In fact,
    the `PhonebookConfiguration` class is instantiated with the values specified in
    the configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: When a configuration file is passed as a command-line argument, Dropwizard parses
    it and creates an instance of your service's configuration class. We added the
    required configuration parameters as private members of the `PhonebookConfiguration`
    class and annotated them with `@JsonProperty` so Dropwizard can parse them. In
    order to make these properties accessible to our application's service class,
    we also need to add public getters for these parameters.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Externalizing your application's configuration has many advantages. With Dropwizard,
    you can easily store and read any kind of properties (configuration settings)
    you wish to have for your application with minimum effort, just by mapping YAML
    properties to the properties of your configuration class.
  prefs: []
  type: TYPE_NORMAL
- en: Dropwizard's configuration parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Dropwizard has plenty of configuration parameters available, such as the port
    that the embedded Jetty listens to and the logging level. The list is quite large
    and cannot be covered here extensively, though it is available on the official
    Dropwizard website at [http://www.dropwizard.io/manual/core/#configuration-defaults](http://www.dropwizard.io/manual/core/#configuration-defaults).
  prefs: []
  type: TYPE_NORMAL
- en: YAML
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The description of YAML according to its official website ([http://www.yaml.org](http://www.yaml.org))
    is human-friendly data serialization standard. Its syntax is pretty straightforward,
    which is also the reason why YAML is widely accepted. YAML files are identified
    by the extensions `.yaml` and `.yml`; both are valid, although `.yml` seems to
    be more popular lately.
  prefs: []
  type: TYPE_NORMAL
- en: Validating configuration settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although it is good to have the application's configuration externalized, we
    should not always rely on it as is. Dropwizard has got us covered, and we have
    the right tools in order to validate the configuration properties up on the application's
    startup. This is because we can use constraint annotations for our configuration
    properties, such as those included in the `javax.validation.constraints` or `org.hibernate.validator.constraints`
    packages.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to limit the number of repetitions of the message to 10; if the
    number provided is larger than 10, then the input is considered invalid.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s go through the following steps required for validating the configuration
    settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Update the definition of the `messageRepetitions` property in `PhonebookConfiguration`,
    annotating the property with the `@Max` annotation (you will also need to import
    `javax.validation.constraints.Max`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a similar way, define that the `message` property should not be empty, annotating
    the property with the `@NotEmpty (org.hibernate.validator.constraints.NotEmpty)`
    annotation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Edit the `Config.yaml` file and specify a value greater than 10 for the `messageRepetitions`
    property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repackage and run the application again. The application will refuse to start,
    and you will see an error printed on your terminal as seen in the following screenshot:![How
    to do it…](img/9530OS_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The validation-related annotations force Dropwizard to validate the values of
    each of the properties declared in our configuration file. If the validation constraints
    are not satisfied, the relevant error message will be printed on the terminal,
    and the application will not start.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you have a working configuration file that is mapped on the configuration
    object during the startup of the application. Also, as well as checking the validity
    of the configuration parameters, you can also provide a default value for each
    one of them.
  prefs: []
  type: TYPE_NORMAL
- en: Specifying default parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can specify the default values for configuration parameters as easily as
    initializing the variables on their declaration. This way, optional parameters
    can be omitted and can have a default value during runtime, even if they're not
    included in the application's configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add an additional parameter, which we''ll also initialize, named `additionalMessage,`
    along with its getter method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you run the application specifying a configuration file that does not contain
    the `additionalMessage` property, then the default value of this property will
    be returned when you try to access it from another part of the code, for instance,
    if you use `c.getAdditionalMessage()` from inside the `App#run()` method. This
    way, you can have optional parameters for your application.
  prefs: []
  type: TYPE_NORMAL
