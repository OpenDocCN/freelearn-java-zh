- en: Chapter 11. Web Services and Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The internet is vast and constantly expanding. A lot of day-to-day tasks can
    be dealt with in a simpler manner—bill payments, checking reviews of a product,
    booking movie tickets, and so on. In addition to this, most electronic devices
    can now be connected to the Internet, such as mobile phones, watches, surveillance
    systems, and security systems. These can communicate with each other and they
    need not all be of the same brand. Applications can utilize user-specific information
    and provide features with better customization. Most importantly, we can decide
    if we wish to share our information with the application by authenticating it
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover Play Framework''s support for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenID and OAuth authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling web services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Suppose we need to book a flight ticket online. We can do this by using either
    the website of the flight's brand (such as Lufthansa, Emirates, and so on), or
    a travel booking website (such as ClearTrip, MakeMyTrip, and so on). How is it
    that we can do the same task from two or more different websites?
  prefs: []
  type: TYPE_NORMAL
- en: The website of the flight's brand provides some APIs with which the travel booking
    websites work. These API can be freely available or charged by a contract, which
    is for the provider and the other third-party involved to decide. These APIs are
    also called web services.
  prefs: []
  type: TYPE_NORMAL
- en: A web service is more or less a method that is called over the Internet. Only
    the provider is fully aware of the internal working of these sites. Those who
    use the web service are only aware of the purpose and its possible outcome.
  prefs: []
  type: TYPE_NORMAL
- en: Many applications require/prefer to use third-party APIs to complete common
    tasks for various reasons, such as common norms in the business domain, easier
    means to provide secure authorization, or to avoid the overhead of maintenance,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Play Framework has a web service API specifically to meet such requirements.
    The web service API can be used by including it as a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: A common use case is to send an e-mail with the link for account verification
    and/or resetting the password using a transactional e-mail API service, such as
    Mailgun, SendGrid, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s assume that our application has such a requirement, and we have an `Email`
    object that handles all these kind of transactions. We need one method to send
    e-mails that makes actual calls to the e-mailing API service, and then other methods
    that internally call send. Using the Play web service API, we could define `Email`
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The web service API is exposed through the `WS` object, which provides methods
    to query web services as an HTTP client. In the preceding code snippet, we have
    used the web service API to make a post request. Other available methods to trigger
    a request and fetch a response or response stream are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get` or `getStream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`put` or `putAndRetrieveStream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post` or `postAndRetrieveStream`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`head`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The result of any of these calls is of the `Future[WSResponse]` type, so we
    can safely say that the web service API is asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is not restricted to REST services. For example, let''s say we use a SOAP
    service to fetch the currencies of all countries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'An HTTP request can be built using `WS.url()`, which returns an instance of
    `WSRequestHolder`. The `WSRequestHolder` trait has methods to add headers, authentication,
    request parameters, data, and so on. Here is another example of commonly used
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Although in this example we have used Basic authentication, the web service
    API supports most of the commonly used authentication schemes, which you can find
    at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic**: [http://en.wikipedia.org/wiki/Basic_access_authentication](http://en.wikipedia.org/wiki/Basic_access_authentication)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Digest**: [http://en.wikipedia.org/wiki/Digest_access_authentication](http://en.wikipedia.org/wiki/Digest_access_authentication)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simple and** **Protected GSSAPI Negotiation Mechanism (SPNEGO)**: [http://en.wikipedia.org/wiki/SPNEGO](http://en.wikipedia.org/wiki/SPNEGO)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NT LAN** **Manager (NTLM)**: [http://en.wikipedia.org/wiki/NT_LAN_Manager](http://en.wikipedia.org/wiki/NT_LAN_Manager)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Kerberos**: [http://en.wikipedia.org/wiki/Kerberos_(protocol)](http://en.wikipedia.org/wiki/Kerberos_(protocol))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the methods available through the `WS` object simply call the relevant
    methods of the available `WSAPI` trait''s implementation. The web service API
    provided by default utilizes Ning''s AysncHttpClient (refer to [https://github.com/AsyncHttpClient/async-http-client](https://github.com/AsyncHttpClient/async-http-client)).
    If we wish to use any other HTTP client, we need to implement the `WSAPI` trait
    and bind it through a plugin. When we add the `ws` Play library, it adds `play.api.libs.ws.ning.NingWSPlugin`
    to our application, which is defined as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a Play app, using SSL with WS requires a few changes in the configuration,
    and it is documented at [https://www.playframework.com/documentation/2.3.x/WsSSL](https://www.playframework.com/documentation/2.3.x/WsSSL).
  prefs: []
  type: TYPE_NORMAL
- en: Since a huge number of applications rely on a user's data from various sources,
    Play provides an API for OpenID and OAuth. We will discuss these in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: OpenID
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OpenID is an authentication protocol, wherein OpenID Providers validate the
    identity of a user for third-party applications. An OpenID Provider is any service/application
    that provides an OpenID to users. Yahoo, AOL, and others are a few examples of
    these. Applications that require a user's OpenID to complete transactions are
    known as OpenID Consumers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The flow of control in an OpenID Consumer is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The user is directed to the login page of the supported/selected OpenID Provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the user completes logging in, the OpenID Provider informs the user about
    user-related data requested by the OpenID Consumer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user agrees to share the information, he or she is redirected to the
    page requested by him or her on the consumer application. The information is added
    to the request URL. The information is termed as attribute properties and this
    is documented at [http://openid.net/specs/openid-attribute-properties-list-1_0-01.html](http://openid.net/specs/openid-attribute-properties-list-1_0-01.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play provides an API to simplify OpenID transactions, which is documented at
    [https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.openid.OpenID$](https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.openid.OpenID$).
  prefs: []
  type: TYPE_NORMAL
- en: 'Two critical methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`redirectURL`: This is used for verifying the user, requesting specific user
    information and redirecting it to the callback page'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verifiedId`: This is used to extract user information from a verified OpenID
    callback request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s build an application that uses OpenID from the provider, Yahoo. We can
    define the controller as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, the `login` method redirects the user to the
    Yahoo login page (refer to [https://me.yahoo.com](https://me.yahoo.com)). Once
    the user logs in, he or she is asked if the user's profile can be shared by the
    application. If the user agrees, it redirects to `routes.Application.index.absoluteURL()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `index` method expects data shared by the OpenID Provider (Yahoo, in our
    case) on a successful login. If it is not available, the user is redirected to
    the `login` method.
  prefs: []
  type: TYPE_NORMAL
- en: The third parameter for `OpenID.redirectURL` is a sequence of tuples which indicates
    the information required by the application (required attributes). The second
    element in each tuple label of the attribute property is requested using OpenID
    Attribute Exchange—it enables the transport of personal identity information.
    The first element in each tuple is the label with which the value for the attribute
    property should be mapped by the OpenID Provider in the callback request's `queryString`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `http://openid.net/schema/namePerson/first` property represents
    the attribute property by its first name. On successful login, the value of this
    property and the label provided by the consumer are added to the `queryString`
    in the callback. So, `openid.ext1.value.name=firstName` is added to the login
    callback.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'According to [http://oauth.net/core/1.0/](http://oauth.net/core/1.0/), the
    definition of OAuth is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"OAuth authentication is the process in which Users grant access to their
    Protected Resources without sharing their credentials with the Consumer. OAuth
    uses Tokens generated by the Service Provider instead of the User''s credentials
    in Protected Resources requests. The process uses two Token types:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Request Token: Used by the Consumer to ask the User to authorize access to
    the Protected Resources. The User-authorized Request Token is exchanged for an
    Access Token, MUST only be used once, and MUST NOT be used for any other purpose.
    It is RECOMMENDED that Request Tokens have a limited lifetime.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Access Token: Used by the Consumer to access the Protected Resources on behalf
    of the User. Access Tokens MAY limit access to certain Protected Resources, and
    MAY have a limited lifetime. Service Providers SHOULD allow Users to revoke Access
    Tokens. Only the Access Token SHALL be used to access the Protect Resources.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*OAuth Authentication is done in three steps:*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The Consumer obtains an unauthorized Request Token.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The User authorizes the Request Token.*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The Consumer exchanges the Request Token for an Access Token."*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exactly what and how much of it is accessible is decided solely by the service
    provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three versions of OAuth: 1.0, 1.0a, and 2.0\. The first one (1.0)
    has some security issues and is not used anymore by service providers.'
  prefs: []
  type: TYPE_NORMAL
- en: Play provides an API for using 1.0 and 1.0a and not for 2.0, since using this
    is a lot simpler. The API is documented at [https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.oauth.package](https://www.playframework.com/documentation/2.3.x/api/scala/index.html#play.api.libs.oauth.package).
  prefs: []
  type: TYPE_NORMAL
- en: Let's build an app to that utilizes a Twitter account to log in using Play's
    OAuth API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we''ll need to register the app at [https://apps.twitter.com/](https://apps.twitter.com/)
    using a Twitter account so that we have a valid consumer key and secret combination.
    After this, we can define the action as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'OAuth is a Play helper class and has this signature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The parameter determines the version of OpenID. If it's set to `true`, it uses
    OpenID 1.0 or else, 1.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'It provides these three methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`redirectURL`: This fetches the URL string where a user should be redirected
    to authorize the application through the provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retrieveRequestToken`: This fetches the request token from the provider'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retrieveAccessToken`: This exchanges the request token for an access token'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the preceding action definition, we only use the provider to login; we cannot
    get any user details unless we do not exchange the authorized request token for
    an access token. To get the access token, we need the request token and `oauth_verifier`,
    which is provided by the service provider when granting the request token.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Play OAuth API, redirecting after obtaining a request token adds
    `oauth_verifier` to the request query string. So, we should redirect to an action
    that attempts to obtain the access token and then store it, so that it is easily
    accessible for future requests. In this example, it''s stored in the Session:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: On successful login and authorization by the user, we fetch the status on a
    user's timeline and display it as JSON using the welcome action.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is no built-in support in Play for authentication using OAuth 2.0, CAS,
    SAML, or any other protocol. However, developers can choose to use a third-party
    plugin or library that suits their requirements. Some of them are Silhouette ([http://silhouette.mohiva.com/v2.0](http://silhouette.mohiva.com/v2.0)),
    deadbolt-2 ([https://github.com/schaloner/deadbolt-2](https://github.com/schaloner/deadbolt-2)),
    play-pac4j ([https://github.com/pac4j/play-pac4j](https://github.com/pac4j/play-pac4j)),
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the WS (web service) plugin and the API exposed
    through it. We have also seen how to access a user's data from service providers
    using OpenID and OAuth 1.0a (since most service providers use either 1.0a or 2.0),
    with the help of the OpenID and OAuth APIs in Play.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how some of the modules provided by Play work
    and how we can build a custom module using them.
  prefs: []
  type: TYPE_NORMAL
