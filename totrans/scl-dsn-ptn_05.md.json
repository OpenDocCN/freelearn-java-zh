["```java\n[\n  {\n    \"firstName\": \"Ivan\",\n    \"lastName\": \"Nikolov\",\n    \"age\": 26\n  },\n  {\n    \"firstName\": \"John\",\n    \"lastName\": \"Smith\",\n    \"age\": 55\n  },\n  {\n    \"firstName\": \"Maria\",\n    \"lastName\": \"Cooper\",\n    \"age\": 19\n  }\n]\n```", "```java\ncase class Person(firstName: String, lastName: String, age: Int)\n```", "```java\n<dependency>\n    <groupId>org.json4s</groupId>\n    <artifactId>json4s-jackson_2.12</artifactId>\n    <version>3.6.0-M2</version>\n</dependency>\n```", "```java\n\"org.json4s\" %% \"json4s-jackson\" % \"3.6.0-M2\"\n```", "```java\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods._\n\ntrait DataReader {\n  def readData(): List[Person]\n  def readDataInefficiently(): List[Person]\n}\n\nclass DataReaderImpl extends DataReader {\n  implicit val formats = DefaultFormats\n\n  private def readUntimed(): List[Person] =\n    parse(StreamInput(getClass.getResourceAsStream(\"/users.json\"))).extract[List[Person]]\n\n  override def readData(): List[Person] = readUntimed()\n\n  override def readDataInefficiently(): List[Person] = {\n    (1 to 10000).foreach {\n      case num =>\n        readUntimed()\n    }\n    readUntimed()\n  }\n}\n```", "```java\nobject DataReaderExample {\n  def main(args: Array[String]): Unit = {\n    val dataReader = new DataReaderImpl\n    System.out.println(s\"I just read the following data efficiently:\n     ${dataReader.readData()}\")\n    System.out.println(s\"I just read the following data inefficiently:\n     ${dataReader.readDataInefficiently()}\")\n  }\n}\n```", "```java\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods._\n\nclass DataReaderImpl extends DataReader {\n implicit val formats = DefaultFormats\n\n private def readUntimed(): List[Person] =\n  parse(StreamInput(getClass.getResourceAsStream(\"/users.json\")))\n  .extract[List[Person]]\n\n override def readData(): List[Person] = {\n   val startMillis = System.currentTimeMillis()\n   val result = readUntimed()\n   val time = System.currentTimeMillis() - startMillis\n   System.err.println(s\"readData took ${time} milliseconds.\")\n    result\n }\n\n override def readDataInefficiently(): List[Person] = {\n   val startMillis = System.currentTimeMillis()\n   (1 to 10000).foreach {\n     case num =>\n      readUntimed()\n   }\n   val result = readUntimed()\n   val time = System.currentTimeMillis() - startMillis\n   System.err.println(s\"readDataInefficiently took ${time} milliseconds.\")\n   result\n }\n}\n```", "```java\ntrait LoggingDataReader extends DataReader {\n\n  abstract override def readData(): List[Person] = {\n    val startMillis = System.currentTimeMillis()\n    val result = super.readData()\n    val time = System.currentTimeMillis() - startMillis\n    System.err.println(s\"readData took ${time} milliseconds.\")\n    result\n  }\n\n  abstract override def readDataInefficiently(): List[Person] = {\n    val startMillis = System.currentTimeMillis()\n    val result = super.readDataInefficiently()\n    val time = System.currentTimeMillis() - startMillis\n    System.err.println(s\"readDataInefficiently took ${time} milliseconds.\")\n    result\n  }\n}\n```", "```java\nError:(9, 24) method readData in trait DataReader is accessed from super. It may not be abstract unless it is overridden by a member declared `abstract' and `override'\n    val result = super.readData()\n                       ^\nError:(17, 24) method readDataInefficiently in trait DataReader is accessed from super. It may not be abstract unless it is overridden by a member declared `abstract' and `override'\n    val result = super.readDataInefficiently()\n                       ^\n```", "```java\nobject DataReaderAOPExample {\n  def main(args: Array[String]): Unit = {\n    val dataReader = new DataReaderImpl with LoggingDataReader\n    System.out.println(s\"I just read the following data efficiently:\n     ${dataReader.readData()}\")\n    System.out.println(s\"I just read the following data inefficiently:\n     ${dataReader.readDataInefficiently()}\")\n  }\n}\n```", "```java\ntrait Time {\n  def getTime(): String\n}\n\ntrait RecipeFinder {\n  def findRecipe(dish: String): String\n}\n\ntrait Cooker {\n  def cook(what: String): Food\n}\n```", "```java\ncase class Food(name: String)\n```", "```java\ntrait TimeComponent {\n  val time: Time\n\n  class TimeImpl extends Time {\n    val formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\")\n    override def getTime(): String = s\"The time is:\n     ${LocalDateTime.now().format(formatter)}\"\n  }\n}\n```", "```java\ntrait RecipeComponent {\n  val recipe: RecipeFinder\n\n  class RecipeFinderImpl extends RecipeFinder {\n    override def findRecipe(dish: String): String = dish match {\n      case \"chips\" => \"Fry the potatoes for 10 minutes.\"\n      case \"fish\" => \"Clean the fish and put in the oven for 30 minutes.\"\n      case \"sandwich\" => \"Put butter, ham and cheese on the bread,\n       toast and add tomatoes.\"\n      case _ => throw new RuntimeException(s\"${dish} is unknown recipe.\")\n    }\n  }\n}\n```", "```java\ntrait CookingComponent {\n  this: RecipeComponent =>\n\n  val cooker: Cooker\n\n  class CookerImpl extends Cooker {\n    override def cook(what: String): Food = {\n      val recipeText = recipe.findRecipe(what)\n      Food(s\"We just cooked $what using the following recipe:\n       '$recipeText'.\")\n    }\n  }\n}\n```", "```java\nclass RobotRegistry extends TimeComponent with RecipeComponent with CookingComponent {\n  override val time: Time = new TimeImpl\n  override val recipe: RecipeFinder = new RecipeFinderImpl\n  override val cooker: Cooker = new CookerImpl\n}\n```", "```java\nclass Robot extends RobotRegistry {\n  def cook(what: String) = cooker.cook(what)\n  def getTime() = time.getTime()\n}\n```", "```java\nobject RobotExample {\n  def main(args: Array[String]): Unit = {\n    val robot = new Robot\n    System.out.println(robot.getTime())\n    System.out.println(robot.cook(\"chips\"))\n    System.out.println(robot.cook(\"sandwich\"))\n  }\n}\n```"]