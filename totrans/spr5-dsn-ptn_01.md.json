["```java\n    package com.packt.chapter1.spring; \n    public class HelloWorld { \n      public String hello() { \n        return \"Hello World\"; \n      } \n    } \n```", "```java\n    package com.packt.chapter1.bankapp.transfer; \n    public class TransferService { \n      private AccountRepository accountRepository; \n      public TransferService () { \n        this.accountRepository = new AccountRepository(); \n      } \n      public void transferMoney(Account a, Account b) { \n        accountRepository.transfer(a, b); \n      } \n    } \n```", "```java\n    package com.packt.chapter1.bankapp.transfer; \n    public class TransferService { \n      private AccountRepository accountRepository; \n      public TransferService() { \n        this.accountRepository = \n          AccountRepositoryFactory.getInstance(\"jdbc\"); \n      } \n      public void transferMoney(Account a, Account b) { \n        accountRepository.transfer(a, b); \n      } \n    } \n```", "```java\n    public interface AccountRepository{ \n      void transfer(); \n      //other methods \n    } \n```", "```java\n    public class JdbcAccountRepositry implements AccountRepositry{ \n      //...implementation of methods defined in AccountRepositry \n      // ...implementation of other methods \n    } \n```", "```java\n    package com.packt.chapter1.bankapp; \n    public class TransferServiceImpl implements TransferService { \n      private TransferRepository transferRepository; \n      private AccountRepository  accountRepository; \n      public TransferServiceImpl(TransferRepository transferRepository,\n       AccountRepository  accountRepository) { \n         this.transferRepository =\n          transferRepository;//TransferRepository is injected \n         this.accountRepository  = accountRepository; \n         //AccountRepository is injected \n       } \n       public void transferMoney(Long a, Long b, Amount amount) { \n         Account accountA = accountRepository.findByAccountId(a); \n         Account accountB = accountRepository.findByAccountId(b); \n         transferRepository.transfer(accountA, accountB, amount); \n       } \n    } \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans \n    http://www.springframework.org/schema/beans/spring-beans.xsd\"> \n    <bean id=\"transferService\"  \n     class=\"com.packt.chapter1.bankapp.service.TransferServiceImpl\"> \n         <constructor-arg ref=\"accountRepository\"/> \n         <constructor-arg ref=\"transferRepository\"/> \n    </bean> \n    <bean id=\"accountRepository\" class=\"com.\n     packt.chapter1.bankapp.repository.JdbcAccountRepository\"/> \n    <bean id=\"transferRepository\" class=\"com.  \n     packt.chapter1.bankapp.repository.JdbcTransferRepository\"/>     \n\n    </beans> \n```", "```java\n    package com.packt.chapter1.bankapp.config; \n\n    import org.springframework.context.annotation.Bean; \n    import org.springframework.context.annotation.Configuration; \n\n    import com.packt.chapter1.bankapp.repository.AccountRepository; \n    import com.packt.chapter1.bankapp.repository.TransferRepository; \n    import \n     com.packt.chapter1.bankapp.repository.jdbc.JdbcAccountRepository; \n    import \n     com.packt.chapter1.bankapp.repository.jdbc.JdbcTransferRepository; \n    import com.packt.chapter1.bankapp.service.TransferService; \n    import com.packt.chapter1.bankapp.service.TransferServiceImpl; \n\n    @Configuration \n    public class AppConfig { \n\n     @Bean \n     public TransferService transferService(){ \n       return new TransferServiceImpl(accountRepository(),\n       transferRepository()); \n     } \n     @Bean \n     public AccountRepository accountRepository() { \n       return new JdbcAccountRepository(); \n     } \n     @Bean \n     public TransferRepository transferRepository() { \n       return new JdbcTransferRepository(); \n     } \n    } \n```", "```java\n    package com.packt.chapter1.bankapp; \n\n    import org.springframework.context.ConfigurableApplicationContext; \n    import \n     org.springframework.context.annotation\n     .AnnotationConfigApplicationContext; \n\n    import com.packt.chapter1.bankapp.config.AppConfig; \n    import com.packt.chapter1.bankapp.model.Amount; \n    import com.packt.chapter1.bankapp.service.TransferService; \n\n    public class TransferMain { \n\n      public static void main(String[] args) { \n        //Load Spring context \n        ConfigurableApplicationContext applicationContext = \n          new AnnotationConfigApplicationContext(AppConfig.class); \n         //Get TransferService bean \n         TransferService transferService = \n          applicationContext.getBean(TransferService.class); \n           //Use transfer method \n         transferService.transferAmmount(100l, 200l,\n          new Amount(2000.0)); \n         applicationContext.close(); \n      } \n\n    }    \n```", "```java\n    package com.packt.chapter1.bankapp.aspect; \n\n    import org.aspectj.lang.annotation.After; \n    import org.aspectj.lang.annotation.Aspect; \n    import org.aspectj.lang.annotation.Before; \n\n    @Aspect \n    public class LoggingAspect { \n\n     @Before(\"execution(* *.transferAmount(..))\") \n     public void logBeforeTransfer(){ \n       System.out.println(\"####LoggingAspect.logBeforeTransfer() \n       method called before transfer amount####\"); \n     } \n\n     @After(\"execution(* *.transferAmount(..))\") \n     public void logAfterTransfer(){ \n       System.out.println(\"####LoggingAspect.logAfterTransfer() method\n       called after transfer amount####\"); \n     } \n    } \n```", "```java\n    package com.packt.chapter1.bankapp.config; \n\n    import org.springframework.context.annotation.Bean; \n    import org.springframework.context.annotation.Configuration; \n    import\n     org.springframework.context.annotation.EnableAspectJAutoProxy; \n\n    import com.packt.chapter1.bankapp.aspect.LoggingAspect; \n    import com.packt.chapter1.bankapp.repository.AccountRepository; \n    import com.packt.chapter1.bankapp.repository.TransferRepository; \n    import\n     com.packt.chapter1.bankapp.repository.jdbc.JdbcAccountRepository; \n    import\n     com.packt.chapter1.bankapp.repository.jdbc.JdbcTransferRepository; \n    import com.packt.chapter1.bankapp.service.TransferService; \n    import com.packt.chapter1.bankapp.service.TransferServiceImpl; \n\n    @Configuration \n    @EnableAspectJAutoProxy \n    public class AppConfig { \n\n      @Bean \n      public TransferService transferService(){ \n        return new TransferServiceImpl(accountRepository(),\n        transferRepository()); \n      } \n      @Bean \n      public AccountRepository accountRepository() { \n        return new JdbcAccountRepository(); \n      } \n      @Bean \n      public TransferRepository transferRepository() { \n        return new JdbcTransferRepository(); \n      } \n      @Bean \n      public LoggingAspect loggingAspect() { \n        return new LoggingAspect(); \n      } \n    } \n```", "```java\n    public Account getAccountById(long id) { \n      Connection conn = null; \n      PreparedStatement stmt = null; \n      ResultSet rs = null; \n      try { \n        conn = dataSource.getConnection(); \n        stmt = conn.prepareStatement( \n          \"select id, name, amount from \" + \n          \"account where id=?\"); \n        stmt.setLong(1, id); \n        rs = stmt.executeQuery(); \n        Account account = null; \n        if (rs.next()) { \n          account = new Account(); \n          account.setId(rs.getLong(\"id\")); \n          account.setName(rs.getString(\"name\")); \n          account.setAmount(rs.getString(\"amount\")); \n        } \n        return account; \n      } catch (SQLException e) { \n      } finally { \n          if(rs != null) { \n            try { \n              rs.close(); \n            } catch(SQLException e) {} \n          } \n          if(stmt != null) { \n            try { \n              stmt.close(); \n            } catch(SQLException e) {} \n          } \n          if(conn != null) { \n            try { \n              conn.close(); \n            } catch(SQLException e) {} \n          } \n        } \n      return null; \n    } \n```", "```java\n    public Account getAccountById(long id) { \n      return jdbcTemplate.queryForObject( \n        \"select id, name, amoount\" + \n        \"from account where id=?\", \n         new RowMapper<Account>() { \n           public Account mapRow(ResultSet rs, \n            int rowNum) throws SQLException { \n              account = new Account(); \n              account.setId(rs.getLong(\"id\")); \n              account.setName(rs.getString(\"name\")); \n              account.setAmount(rs.getString(\"amount\")); \n              return account; \n            } \n         }, \n      id); \n    } \n```", "```java\n    ApplicationContext context = new\n     FileSystemXmlApplicationContext(\"d:/spring.xml\"); \n```", "```java\n    ApplicationContext context = new \n     ClassPathXmlApplicationContext(\"spring.xml\"); \n```", "```java\n    ApplicationContext context = new \n     AnnotationConfigApplicationContext(AppConfig.class); \n```", "```java\n    TransferService transferService = \n     context.getBean(TransferService.class); \n```"]