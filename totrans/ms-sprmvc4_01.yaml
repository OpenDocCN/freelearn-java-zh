- en: Chapter 1. Setting Up a Spring Web Application in No Time
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will get straight to the code and set up a web application,
    which we will be working on for the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: We will leverage Spring Boot's autoconfiguration capabilities to build an application
    with zero boilerplate or configuration files.
  prefs: []
  type: TYPE_NORMAL
- en: 'I will lay out the big picture regarding how Spring Boot works and how to configure
    it. There are four ways to get started with Spring:'
  prefs: []
  type: TYPE_NORMAL
- en: Using Spring Tool Suite to generate the starter code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using IntelliJ IDEA 14.1, which now has good support for Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Spring's website, [http://start.Spring.io](http://start.Spring.io), to
    download a configurable zip file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the curl command line to [http://start.Spring.io](http://start.Spring.io)
    and achieving the same result
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use Gradle and Java 8 throughout this book, but don't be scared. Even
    if you are still working with Maven and a previous version of Java, I bet you
    will find these technologies easy to work with.
  prefs: []
  type: TYPE_NORMAL
- en: Many official Spring tutorials have both a Gradle build and a Maven build, so
    you will find examples easily if you decide to stick with Maven. Spring 4 is fully
    compatible with Java 8, so it would be a shame not to take advantage of lambdas
    to simplify our code base.
  prefs: []
  type: TYPE_NORMAL
- en: I will also show you some Git commands. I think it's a good idea to keep track
    of your progress and commit when you are in a stable state. It will also make
    it easier to compare your work with the source code provided with this book.
  prefs: []
  type: TYPE_NORMAL
- en: As we will deploy our application with Heroku in [Chapter 9](ch09.html "Chapter 9. Deploying
    Your Web Application to the Cloud"), *Deploying Your Web Application to the Cloud*,
    I recommend that you start versioning your code with Git from the very beginning.
    I will give you some advice on how to get started with Git later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with Spring Tool Suite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the best ways to get started with Spring and discover the numerous tutorials
    and starter projects that the Spring community offers is to download **Spring
    Tool Suite** (**STS**). STS is a custom version of eclipse designed to work with
    various Spring projects, as well as Groovy and Gradle. Even if, like me, you have
    another IDE that you would rather work with, I strongly recommend that you give
    STS a shot because it gives you the opportunity to explore Spring's vast ecosystem
    in a matter of minutes with the "Getting Started" projects.
  prefs: []
  type: TYPE_NORMAL
- en: So, let's visit [https://Spring.io/tools/sts/all](https://Spring.io/tools/sts/all)
    and download the latest release of STS. Before we generate our first Spring Boot
    project we will need to install the Gradle support for STS. You can find a **Manage
    IDE Extensions** button on the dashboard. You will then need to download the **Gradle
    Support** software in the **Language and framework tooling** section.
  prefs: []
  type: TYPE_NORMAL
- en: 'I also recommend installing the **Groovy Eclipse** plugin along with the **Groovy
    2.4 compiler**, as shown in the following screenshot. These will be needed later
    in this book when we set up acceptance tests with geb:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Spring Tool Suite](img/2117_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We now have two main options to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: You can also download the example code for this book at [https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4](https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4).
  prefs: []
  type: TYPE_NORMAL
- en: 'The first option is to navigate to **File** | **New** | **Spring Starter Project**,
    as shown in the following screenshot. This will give you the same options as [http://start.Spring.io](http://start.Spring.io),
    embedded in your IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Spring Tool Suite](img/2117_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You also have access to all the tutorials available on [http://spring.io](http://spring.io),
    selecting in **File** | **New** | **Import Getting Started Content** in the top
    bar. You will have the choice of working with either Gradle or Maven, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also check out the starter code to follow along with the tutorial, or
    get the complete code directly.
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Spring Tool Suite](img/2117_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is a lot of very interesting content available in the **Getting Started
    Content** and I encourage you to explore it on your own. It will demonstrate the
    integration of Spring with various technologies that you might be interested in.
  prefs: []
  type: TYPE_NORMAL
- en: For the moment, we will generate a web project as shown in the preceding image.
    It will be a Gradle application, producing a JAR file and using Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the configuration we want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property | Value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Name | masterSpringMvc |'
  prefs: []
  type: TYPE_TB
- en: '| Type | Gradle project |'
  prefs: []
  type: TYPE_TB
- en: '| Packaging | Jar |'
  prefs: []
  type: TYPE_TB
- en: '| Java version | 1.8 |'
  prefs: []
  type: TYPE_TB
- en: '| Language | Java |'
  prefs: []
  type: TYPE_TB
- en: '| Group | masterSpringMvc |'
  prefs: []
  type: TYPE_TB
- en: '| Artifact | masterSpringMvc |'
  prefs: []
  type: TYPE_TB
- en: '| Version | 0.0.1-SNAPSHOT |'
  prefs: []
  type: TYPE_TB
- en: '| Description | Be creative! |'
  prefs: []
  type: TYPE_TB
- en: '| Package | masterSpringMvc |'
  prefs: []
  type: TYPE_TB
- en: On the second screen you will be asked for the Spring Boot version you want
    to use and the the dependencies that should be added to the project.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this, the latest version of Spring boot was 1.2.5\. Ensure
    that you always check out the latest release.
  prefs: []
  type: TYPE_NORMAL
- en: The latest snapshot version of Spring boot will also be available by the time
    you read this. If Spring boot 1.3 isn't released by then, you can probably give
    it a shot. One of its big features is the awesome devs tools. Refer to [https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3](https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom the configuration window you will see a number of checkboxes representing
    the various boot starter libraries. These are dependencies that can be appended
    to your build file. They provide autoconfigurations for various Spring projects.
  prefs: []
  type: TYPE_NORMAL
- en: We are only interested in Spring MVC for the moment, so we will check only the
    Web checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A JAR for a web application? Some of you might find it odd to package your web
    application as a JAR file. While it is still possible to use WAR files for packaging,
    it is not always the recommended practice. By default, Spring boot will create
    a fat JAR, which will include all the application's dependencies and provide a
    convenient way to start a web server using Java -jar.
  prefs: []
  type: TYPE_NORMAL
- en: Our application will be packaged as a JAR file. If you want to create a war
    file, refer to [http://spring.io/guides/gs/convert-jar-to-war/](http://spring.io/guides/gs/convert-jar-to-war/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Have you clicked on **Finish** yet? If you have, you should get the following
    project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with Spring Tool Suite](img/2117_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see our main class **MasterSpringMvcApplication** and its test suite
    **MasterSpringMvcApplicationTests**. There are also two empty folders, **static**
    and **templates**, where we will put our static web assets (images, styles, and
    so on) and obviously our templates (jsp, freemarker, Thymeleaf). The last file
    is an empty **application.properties** file, which is the default Spring boot
    configuration file. It's a very handy file and we'll see how Spring boot uses
    it throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The `build.gradle` file, the build file that we will detail in a moment.
  prefs: []
  type: TYPE_NORMAL
- en: If you feel ready to go, run the main method of the application. This will launch
    a web server for us.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, go to the main method of the application and navigate to **Run as**
    | **Spring Application** in the toolbar either by right-clicking on the class
    or clicking on the green play button in the toolbar.
  prefs: []
  type: TYPE_NORMAL
- en: Doing so and navigating to `http://localhost:8080` will produce an error. Don't
    worry, and read on.
  prefs: []
  type: TYPE_NORMAL
- en: I will show you how to generate the same project without STS, and we will come
    back to all these files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with IntelliJ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IntelliJ IDEA is a very popular tool among Java developers. For the past few
    years I've been very pleased to pay Jetbrains a yearly fee for this awesome editor.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ also has a way of creating Spring boot projects very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the new project menu and select the **Spring Initializr** project type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with IntelliJ](img/2117_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will give us exactly the same options as STS, so refer to the previous
    chapter for the detailed configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to import the Gradle project into IntelliJ. I recommend generating
    the Gradle wrapper first (refer to the following **Gradle build** section).
  prefs: []
  type: TYPE_NORMAL
- en: If needed, you can reimport the project by opening its `build.gradle` file again.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with start.Spring.io
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Go to [http://start.Spring.io](http://start.Spring.io) to get started with
    start.Spring.io. The system behind this remarkable Bootstrap-like website should
    be familiar to you! You will see the following screenshot when you go to the previously
    mentioned link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started with start.Spring.io](img/2117_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Indeed, the same options available with STS can be found here. Clicking on **Generate
    Project** will download a ZIP file containing our starter project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For those of you who are addicted to the console, it is possible to curl [http://start.Spring.io](http://start.Spring.io).
    Doing so will display instructions on how to structure your curl request.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, to generate the same project as earlier, you can issue the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: And viola! You are now ready to get started with Spring without leaving the
    console, a dream come true.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might consider creating an alias with the previous command, it will help
    you prototype the Spring application very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that our web application is ready, let's take a look at how it is written.
    Before going further, we can save our work with Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t know anything about Git, I recommend the two following tutorials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://try.github.io](https://try.github.io), which is a good step-by-step
    interactive tutorial to learn the basic Git commands'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://pcottle.github.io/learnGitBranching](http://pcottle.github.io/learnGitBranching),
    which is an excellent interactive visualization of the Git tree-like structure
    that will show you basic, as well as very advanced, Git capabilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Installing Git**'
  prefs: []
  type: TYPE_NORMAL
- en: On windows, install Git bash, which can be found at [https://msysgit.github.io](https://msysgit.github.io).
    On Mac, if you use homebrew you should already have Git. Otherwise, use the command
    `brew install git`. When in doubt, check out the documentation at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  prefs: []
  type: TYPE_NORMAL
- en: 'To version our work with Git, type the following commands in a console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With IntelliJ, ignore the generated files: `.idea` and `*.iml`. With eclipse
    you should commit the `.classpath` and `.settings` folder. In any case you should
    ignore the `.gradle` folder and the `build` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `.gitignore` file containing the following text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can add all the other files to Git:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The Gradle build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are unfamiliar with Gradle, think of it as Maven's successor, a modern
    build tool. Like Maven, it uses conventions such as how to structure a Java application.
    Our sources will still be found in `src/main/java`, our webapp in `src/main/webapp`,
    and so on. Not unlike Maven, you can use Gradle plugins to deal with various build
    tasks. However, Gradle really shines because it allows you to write your own build
    tasks using the Groovy DSL. The default library makes it easy to manipulate files,
    declare dependencies between tasks, and execute jobs incrementally.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Installing Gradle**'
  prefs: []
  type: TYPE_NORMAL
- en: If you're on OS X, you can install Gradle with brew by using `brew install gradle`
    command. On any *NIX system (Mac included), you can install it with gvm ([http://gvmtool.net/](http://gvmtool.net/)).
    Alternatively, you can grab the binary distribution at [https://Gradle.org/downloads](https://Gradle.org/downloads).
  prefs: []
  type: TYPE_NORMAL
- en: The first good practice when creating an application with Gradle is to generate
    a Gradle wrapper. The Gradle wrapper is a small script that you will share along
    with your code to ensure that the build will use the same version of Gradle that
    you used to build the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The command to generate the wrapper is `Gradle wrapper`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If we look at the new files created, we can see two scripts and two directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `.gradle` directory contains the Gradle binaries; you wouldn't want to commit
    those to your version control.
  prefs: []
  type: TYPE_NORMAL
- en: 'We previously ignored this file along with the build directory so that you
    could safely `git add` everything else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Gradle` directory contains information on how to get the binaries. The
    two other files are scripts: a batch script for windows (`Gradlew.bat`) and a
    shell script for other systems.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also run our application with Gradle instead of executing the application
    from the IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Issuing this command will run an embedded tomcat server with our application
    in it!
  prefs: []
  type: TYPE_NORMAL
- en: 'The log tells us that the server is running on port 8080\. Let''s check it
    out:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Gradle build](img/2117_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: I can imagine your disappointment. Our application is not ready for the grand
    public just yet.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, the work accomplished by the two files our project is made
    of is rather impressive. Let's review them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one is the Gradle build file, `build.Gradle`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: What do we see here?
  prefs: []
  type: TYPE_NORMAL
- en: A dependency on the Spring Boot plugin distributed on Maven central.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our project is a Java project. IDE project files can be generated by Gradle
    for IntelliJ or Eclipse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application will generate a JAR file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our project dependencies are hosted on maven central.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our classpath includes `spring-boot-starter-web` in production and `spring-boot-starter-test`
    for testing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some additional configuration for eclipse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the Gradle wrapper is 2.3.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Spring Boot Plugin will generate a fat jar that contains all the dependencies
    of the project. To build it, type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: You will find the JAR in the directory `build/libs`. This directory will contain
    two files, the fat jar called `masterSpringMvc-0.0.1-SNAPSHOT.jar` and the classic
    JAR file that does not include any dependencies, `masterSpringMvc-0.0.1-SNAPSHOT.jar.original`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Runnable jar**'
  prefs: []
  type: TYPE_NORMAL
- en: One of the main advantages of Spring Boot is embedding everything the application
    needs in one easily redistributable JAR file, including the web server. If you
    run `java jar masterSpringMvc-0.0.1-SNAPSHOT.jar`, tomcat will start on port 8080,
    just like it did when you developed it. This is extremely handy for deploying
    in production or in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Our main dependency here is `spring-boot-starter-web`. Spring Boot provides
    a good number of starters that will automatically configure some aspects of the
    application for us by providing typical dependencies and Spring configuration.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, `spring-starter-web` will include dependencies of `tomcat-embedded`
    and Spring MVC. It will also run the most commonly used Spring MVC configuration
    and provide a dispatcher listening on the "`/`" root path, error handling such
    as the 404 page we saw earlier, and a classical view resolver configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We'll see more on this later. First, let's take a look at the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Let me see the code!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is all the code that is needed to run the application. Everything is in
    a classic main function, which is a huge advantage because you can run your application
    in your IDE like you would for any other program. You can debug it and also benefit
    from some class reloading out of the box without a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This reloading will be available in the debug mode when saving your file in
    eclipse, or clicking on **Make Project** in IntelliJ. This will be possible only
    if the JVM is able to switch the new compile version of the class file with the
    new one; modifying the static variable or touching configuration files will force
    you to reload the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our main class looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the `@SpringBootApplication` annotation. If you look at the code of this
    annotation you will see that it actually combines three other annotations: `@Configuration`,
    `@EnableAutoConfiguration`, and `@ComponentScan`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@Configuration` class should be familiar to you if you''ve already configured
    a Spring application with Java code earlier. It indicates that our class will
    handle classical aspects of a Spring configuration: declaring beans, for instance.'
  prefs: []
  type: TYPE_NORMAL
- en: The `@ComponentScan` class is also a classic. It will tell Spring where to look
    to find our Spring components (services, controllers, and so on). By default,
    this annotation will scan every current package and everything under it.
  prefs: []
  type: TYPE_NORMAL
- en: The novelty here is `@EnableAutoConfiguration`, which will instruct Spring Boot
    to do its magic. If you remove it, you will no longer benefit from Spring Boot's
    autoconfiguration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step when writing an MVC application with Spring Boot is usually
    to add a controller to our code. Add the controller in the controller subpackage
    so that it is picked up by the `@ComponentScan` annotation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, if you open your browser and visit `http://localhost:8080` you will
    see this lovely **Hello, world!** output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Let me see the code!](img/2117_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Spring Boot behind the curtains
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you already set up a Spring MVC application earlier, you may be used to writing
    at least a small portion of XML or a handful of Java annotation configuration
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initialization steps are typically as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the DispatcherServlet of Spring MVC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up an encoding filter to ensure that client requests are encoded correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up a view resolver to tell Spring where to find our views and in which
    dialect they are written (jsp, Thymeleaf templates, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring static resources locations (css, js).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring supported locales and resource bundles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring a multipart resolver for file uploads to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Including tomcat or jetty to run our application on a web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up the error pages (For example 404).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, Spring Boot handles all that work for us. Because this configuration
    is typically up to your application, you can come up with an unlimited amount
    of combinations.
  prefs: []
  type: TYPE_NORMAL
- en: Spring boot, in a way, is an opinionated Spring project configurator. It is
    based on conventions and will enforce them on your project by default.
  prefs: []
  type: TYPE_NORMAL
- en: The dispatcher and multipart configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's see what happens behind the curtains.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the default Spring Boot configuration file that was created for
    us and put it in the debug mode. Add the following line to `src/main/resources/application.properties`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we launch our application again we''ll see Spring Boot''s autoconfiguration
    report. It is divided into two parts: **positive matches,** which list all autoconfigurations
    that are used by our application; and **negative matches**, which are Spring Boot
    autoconfigurations whose requirements weren''t met when the application started:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a closer look at `DispatcherServletAutoConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a typical Spring Boot configuration class:'
  prefs: []
  type: TYPE_NORMAL
- en: It is annotated with `@Configuration` like any other Spring configuration class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It typically declares its priority level with the `@Order` annotation. You can
    see that `DispatcherServletAutoConfiguration` needs to be configured first.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can also contain hints such as `@AutoConfigureAfter` or `@AutoConfigureBefore`
    to further refine the order in which configurations are processed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is enabled under certain conditions. With `@ConditionalOnClass(DispatcherServlet.class)`,
    this particular configuration ensures that our classpath contains `DispatcherServlet`,
    which is a good indication that Spring MVC is in the classpath and the user certainly
    wants to bootstrap it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This file also contains classic bean declarations for the Spring MVC dispatcher
    servlet and a multipart resolver. The whole Spring MVC configuration is broken
    into multiple files.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth noting that these beans obey certain rules to check whether
    are active. The `ServletRegistrationBean` function will be enabled under the `@Conditional(DefaultDispatcherServletCondition.class)`
    condition, which is a bit complex but checks whether you already have a dispatcher
    servlet registered in your own configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The `MultipartResolver` function will become active only if the condition `@ConditionalOnMissingBean(name
    = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)` is met, for example, if we
    didn't declare it ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: This means Spring boot only gives you a hand in configuring your application
    according to common use cases. However, at any point, you can override these defaults
    and declare your own configuration.
  prefs: []
  type: TYPE_NORMAL
- en: So, the `DispatcherServletAutoConfiguration` class explains why we have a dispatcher
    servlet and a multipart resolver.
  prefs: []
  type: TYPE_NORMAL
- en: The view resolver, static resources, and locale configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another very relevant piece of configuration is `WebMvcAutoConfiguration`.
    It declares the view resolver, the locale resolver, and the location of our static
    resources. The view resolver is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The view resolver configuration is really typical. What's really interesting
    here is the use of configuration properties to allow users to customize it.
  prefs: []
  type: TYPE_NORMAL
- en: What it says is "I will look for two variables in the user's `application.properties`
    called `spring.view.prefix` and `spring.view.suffix`". This is a very handy way
    to set up the view resolver with only two lines in our configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Keep this in mind for the next chapter. For now, we will just stroll through
    Spring Boot's code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding static resources, this configuration includes the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The declaration of resource locations is a bit convoluted but we can still
    understand two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Any resource accessed with the "webjar" prefix will be resolved inside the classpath
    inside the classpath. This will allow us to use prepackaged JavaScript dependencies
    from Maven central.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our static resources can reside in any of the locations after our classpath
    `/META-INF/resources/`, `/resources/`, `/static/`, or `/public/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: WebJars are JAR packages of client JavaScript libraries available on Maven central.
    They include a Maven project file, which allows for transitive dependencies and
    works in all JVM-based applications. WebJars are an alternative to JavaScript
    package managers such as bower or npm. They are great for applications that require
    just a few JavaScript libraries. Find the list of available WebJars on [www.webjars.org](http://www.webjars.org).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is also a part of this file that is dedicated to locale management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: This default locale resolver handles only one locale and allows us to define
    it via the `spring.mvc.locale` configuration property.
  prefs: []
  type: TYPE_NORMAL
- en: Error and encoding configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember when we first launched our application without adding a controller?
    We got a funny **Whitelabel Error Page** output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Error handling is a lot trickier than it looks, especially when you don''t
    have a `web.xml` configuration file and want your application to be portable across
    web servers. The good news is that Spring Boot takes care of that for us! Let''s
    look at `ErrorMvcAutoConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: What does this piece of configuration do?
  prefs: []
  type: TYPE_NORMAL
- en: It defines a bean, `DefaultErrorAttributes`, which exposes helpful error information
    via special attributes such as the status, error code, and associated stack trace.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It defines a `BasicErrorController` bean, which is an MVC controller in charge
    of displaying the error page we've seen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It allows us to deactivate Spring Boot whitelabel error page by setting `error.whitelable.enabled`
    to false in our configuration file, `application.properties`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also leverage our templating engine to provide our own error page. It
    will be named `error.html`, for example. This is what the condition `ErrorTemplateMissingCondition`
    checks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We'll see how to properly handle errors later in this book.
  prefs: []
  type: TYPE_NORMAL
- en: As far as encoding is concerned, the very simple `HttpEncodingAutoConfiguration`
    function will handle it by providing Spring's `CharacterEncodingFilter` class.
    It is possible to override the default encoding ("UTF-8") with `spring.http.encoding.charset`
    and disable this configuration with `spring.http.encoding.enabled`.
  prefs: []
  type: TYPE_NORMAL
- en: Embedded Servlet container (Tomcat) configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Spring Boot runs and packages our application using the Tomcat embedded
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at `EmbeddedServletContainerAutoConfiguration`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is pretty straight forward. This code includes three different
    configurations, which will be activated depending on what's available on your
    classpath.
  prefs: []
  type: TYPE_NORMAL
- en: You can use Tomcat, tc-server, Jetty, or Undertow with Spring Boot. Your server
    can be easily replaced by excluding the `spring-boot-starter-tomcat` JAR dependency
    and replacing it with its Jetty or Undertow equivalent. Please refer to the documentation
    if you wish to do so.
  prefs: []
  type: TYPE_NORMAL
- en: All the configuration of our Servlet container (Tomcat) will happen in `TomcatEmbeddedServletContainerFactory`.
    While you should definitely read it because it provides a very advanced configuration
    of tomcat embedded (for which finding documentation can be hard), we will not
    look at this class directly.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, I will walk you through the different options available to configure
    your Servlet Container.
  prefs: []
  type: TYPE_NORMAL
- en: The HTTP port
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can change the default HTTP port by defining a `server.port` property in
    your `application.properties` file or by defining an environment variable called
    `SERVER_PORT`.
  prefs: []
  type: TYPE_NORMAL
- en: You can disable HTTP by setting this variable to `-1` or launch it on a random
    port by setting it to `0`. This is very handy for testing.
  prefs: []
  type: TYPE_NORMAL
- en: The SSL configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring SSL is such a chore, but spring boot has a simple solution. You
    need only a handful of properties to secure your server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You will have to generate a keystore file for the above example to work, thought.
  prefs: []
  type: TYPE_NORMAL
- en: We'll have a deeper look at our security options in [Chapter 6](ch06.html "Chapter 6. Securing
    Your Application"), *Securing Your Application*. Of course, you can customize
    the `TomcatEmbeddedServletContainerFactory` function further by adding your own
    `EmbeddedServletContainerFactory`. This can come in handy if you wish to add multiple
    connectors, for instance. Refer to the documentation at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Other configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can add classic Java web elements such as `Servlet`, `Filter`, and `ServletContextListener`
    by simply declaring them as the `@Bean` elements in your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Out of the box, spring boot also added three other things for us:'
  prefs: []
  type: TYPE_NORMAL
- en: JSON serialization with Jackson in `JacksonAutoConfiguration`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default `HttpMessageConverters` in `` `HttpMessageConvertersAutoConfiguration
    ``
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMX capabilities in `JmxAutoConfiguration`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We will see a bit more about the jackson configuration in [Chapter 5](ch05.html
    "Chapter 5. Crafting a RESTful Application"), *Crafting a RESTful Application*.
    About JMX configuration, you can try it out by connecting to your application
    with `jconsole` locally:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other configurations](img/2117_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can add more interesting MBeans by adding `org.springframework.boot:spring-boot-starter-actuator`
    to your classpath. You can even define your own MBeans and expose them on HTTP
    using Jolokia. On the other hand, you can also disable those endpoints by adding
    `spring.jmx.enabled=false` to your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html](http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a very humble spring web application with a RESTful JSON "Hello
    world" despite having configured nothing ourselves. We have seen what spring boot
    does for us, how it does it, and hopefully we've got a good idea of how to override
    the default autoconfiguration.
  prefs: []
  type: TYPE_NORMAL
- en: Detailing how spring boot works is the topic of a book all by itself. If you
    want to dig deeper, I recommend that you read the excellent book *Learning Spring
    Boot* by Greg Turnquist in the same collection.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready for the next chapter where our application will reach a new
    stage by actually serving web pages, and you will learn more about spring MVC's
    philosophy.
  prefs: []
  type: TYPE_NORMAL
