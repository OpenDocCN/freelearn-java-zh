["```java\n        CREATE USER cook SUPERUSER;\n        CREATE DATABASE cookbook OWNER cook;\n```", "```java\nString URL = \"jdbc:postgresql://localhost/cookbook\";\nProperties prop = new Properties( );\n//prop.put( \"user\", \"cook\" );\n//prop.put( \"password\", \"secretPass123\" );\nConnection conn = DriverManager.getConnection(URL, prop);\n```", "```java\nprivate static Connection getDbConnection(){\n  String url = \"jdbc:postgresql://localhost/cookbook\";\n  try {\n    return DriverManager.getConnection(url);\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\nprivate static Connection getDbConnection(){\n  PGSimpleDataSource source = new PGSimpleDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  source.setLoginTimeout(10);\n  try {\n    return source.getConnection();\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n\n```", "```java\nprivate static Connection getDbConnection(){\n  PGPoolingDataSource source = new PGPoolingDataSource();\n  source.setServerName(\"localhost\");\n  source.setDatabaseName(\"cookbook\");\n  source.setInitialConnections(3);\n  source.setMaxConnections(10);\n  source.setLoginTimeout(10);\n  try {\n    return source.getConnection();\n  }\n  catch(Exception ex) {\n    ex.printStackTrace();\n    return null;\n  }\n}\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  // code that uses the connection to access the DB\n} \ncatch(Exception ex) { \n  ex.printStackTrace();\n}\n```", "```java\nCREATE TABLE table_name (\n  column1_name data_type(size),\n  column2_name data_type(size),\n  column3_name data_type(size),\n  ....\n);\n```", "```java\nCREATE TABLE traffic_unit (\n  id SERIAL PRIMARY KEY,\n  vehicle_type VARCHAR NOT NULL,\n  horse_power integer NOT NULL,\n  weight_pounds integer NOT NULL,\n  payload_pounds integer NOT NULL,\n  passengers_count integer NOT NULL,\n  speed_limit_mph double precision NOT NULL,\n  traction double precision NOT NULL,\n  road_condition VARCHAR NOT NULL,\n  tire_condition VARCHAR NOT NULL,\n  temperature integer NOT NULL\n);\n```", "```java\nCREATE TABLE person (\n  name VARCHAR NOT NULL,\n  address VARCHAR NOT NULL,\n  dob date NOT NULL,\n  order integer DEFAULT 1 NOT NULL,\n  PRIMARY KEY (name,address,dob,order)\n);\n```", "```java\nCREATE SEQUENCE traffic_unit_id_seq \nSTART WITH 1000 INCREMENT BY 1 \nNO MINVALUE NO MAXVALUE CACHE 10; \nALTER TABLE ONLY traffic_unit ALTER COLUMN id SET DEFAULT nextval('traffic_unit_id_seq'::regclass);\n```", "```java\nCREATE TABLE enums (\n  id integer PRIMARY KEY,\n  type VARCHAR NOT NULL,\n  value VARCHAR NOT NULL\n);\n\ninsert into enums (id, type, value) values \n(1, 'vehicle', 'car'),\n(2, 'vehicle', 'truck'),\n(3, 'vehicle', 'crewcab'),\n(4, 'road_condition', 'dry'),\n(5, 'road_condition', 'wet'),\n(6, 'road_condition', 'snow'),\n(7, 'tire_condition', 'new'),\n(8, 'tire_condition', 'worn');\n```", "```java\ndrop table traffic_unit;\n```", "```java\nCREATE TABLE traffic_unit (\n  id SERIAL PRIMARY KEY,\n  vehicle_type integer REFERENCES enums (id),\n  horse_power integer NOT NULL,\n  weight_pounds integer NOT NULL,\n  payload_pounds integer NOT NULL,\n  passengers_count integer NOT NULL,\n  speed_limit_mph double precision NOT NULL,\n  traction double precision NOT NULL,\n  road_condition integer REFERENCES enums (id),\n  tire_condition integer REFERENCES enums (id),\n  temperature integer NOT NULL\n);\n```", "```java\nALTER TABLE enums ADD CONSTRAINT enums_unique_type_value \nUNIQUE (type, value);\n```", "```java\n Indexes: \"traffic_unit_pkey\" PRIMARY KEY, btree (id)\n```", "```java\nCREATE INDEX idx_traffic_unit_vehicle_type_passengers_count \nON traffic_unit USING btree (vehicle_type,passengers_count);\n```", "```java\ndrop index idx_traffic_unit_vehicle_type_passengers_count;\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\nVALUES (value1,value2,value3,...);\n```", "```java\nINSERT INTO table_name (column1,column2,column3,...)\nVALUES (value1,value2,value3, ... ), \n       (value21,value22,value23, ...), \n       ( ...                       );\n```", "```java\nSELECT column_name,column_name\nFROM table_name WHERE some_column=some_value;\n```", "```java\nSELECT * FROM table_name WHERE some_column=some_value;\n```", "```java\nWHERE column_name operator value\nOperator:\n  = Equal\n  <> Not equal. In some versions of SQL, !=\n  > Greater than\n  < Less than\n  >= Greater than or equal\n  <= Less than or equal\n  BETWEEN Between an inclusive range\n  LIKE Search for a pattern\n  IN To specify multiple possible values for a column\n```", "```java\nUPDATE table_name SET column1=value1,column2=value2,... \nWHERE-clause;\n```", "```java\nDELETE FROM table_name WHERE-clause;\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  try (Statement st = conn.createStatement()) {\n    boolean res = st.execute(\"select id, type, value from enums\");\n    if (res) {\n      ResultSet rs = st.getResultSet();\n      while (rs.next()) {\n        int id = rs.getInt(1); \n        String type = rs.getString(2);\n        String value = rs.getString(3);\n        System.out.println(\"id = \" + id + \", type = \" \n                           + type + \", value = \" + value);\n      }\n    } else {\n      int count = st.getUpdateCount();\n      System.out.println(\"Update count = \" + count);\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\n\"select id, type, value from enums\"\n\"insert into enums (id, type, value)\" + \" values(1,'vehicle','car')\"\n\"select id, type, value from enums\"\n\"update enums set value = 'bus' where value = 'car'\"\n\"select id, type, value from enums\"\n\"delete from enums where value = 'bus'\"\n\"select id, type, value from enums\"\n```", "```java\nprivate static void executeUpdate(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      int count = st.executeUpdate(sql);\n      System.out.println(\"Update count = \" + count);\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\nprivate static void traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        int cCount = 0;\n        Map<Integer, String> cName = new HashMap<>();\n        while (rs.next()) {\n          if (cCount == 0) {\n            ResultSetMetaData rsmd = rs.getMetaData();\n            cCount = rsmd.getColumnCount();\n            for (int i = 1; i <= cCount; i++) {\n              cName.put(i, rsmd.getColumnLabel(i));\n            }\n          }\n          List<String> l = new ArrayList<>();\n          for (int i = 1; i <= cCount; i++) {\n            l.add(cName.get(i) + \" = \" + rs.getString(i));\n          }\n          System.out.println(l.stream()\n                              .collect(Collectors.joining(\", \")));\n        }\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\ntry (Statement st = conn.createStatement()) {\n  boolean res = st.execute(\"select * from enums\");\n\n```", "```java\ntry (PreparedStatement st = \n           conn.prepareStatement(\"select * from enums\")) {\n  boolean res = st.execute();\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String[][] values = {{\"1\", \"vehicle\", \"car\"},\n                       {\"2\", \"vehicle\", \"truck\"}};\n  String sql = \"insert into enums (id, type, value) values(?, ?, ?)\");\n  try (PreparedStatement st = conn.prepareStatement(sql) {\n    for(String[] v: values){\n      st.setInt(1, Integer.parseInt(v[0]));\n      st.setString(2, v[1]);\n      st.setString(3, v[2]);\n      int count = st.executeUpdate();\n      System.out.println(\"Update count = \" + count);\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\nprivate static void traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    ...\n  }\n}\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String sql = \"insert into enums (id, type, value) \"\n                       + \" values(1,'vehicle','car')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  //conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String sql = \"insert into enums (id, type, value) \"\n                       + \" values(1,'vehicle','car')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  conn.commit();\n  sql = \"insert into enums (id, type, value) \" \n                     + \" values(2,'vehicle','truck')\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    System.out.println(sql);\n    System.out.println(\"Update count = \" + st.executeUpdate());\n  }\n  conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n```", "```java\norg.postgresql.util.PSQLException: ERROR: syntax error at or near \"inst\"\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String[][] values = { {\"1\", \"vehicle\", \"car\"},\n                        {\"b\", \"vehicle\", \"truck\"},\n                        {\"3\", \"vehicle\", \"crewcab\"} };\n  String sql = \"insert into enums (id, type, value) \" \n                            + \" values(?, ?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    for (String[] v: values){\n      try {\n        System.out.print(\"id=\" + v[0] + \": \");\n        st.setInt(1, Integer.parseInt(v[0]));\n        st.setString(2, v[1]);\n        st.setString(3, v[2]);\n        int count = st.executeUpdate();\n        conn.commit();\n        System.out.println(\"Update count = \"+count);\n      } catch(Exception ex){\n        //conn.rollback();\n        System.out.println(ex.getMessage());\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\n\n```", "```java\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  String[][] values = { {\"1\", \"vehicle\", \"car\"},\n                        {\"b\", \"vehicle\", \"truck\"},\n                        {\"3\", \"vehicle\", \"crewcab\"} };\n  String sql = \"insert into enums (id, type, value) \" +\n                                        \" values(?, ?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    for (String[] v: values){\n      try(Statement stm = conn.createStatement()) {\n        System.out.print(\"id=\" + v[0] + \": \");\n        stm.execute(\"insert into test values('\"+ v[2] + \"')\");\n        st.setInt(1, Integer.parseInt(v[0]));\n        st.setString(2, v[1]);\n        st.setString(3, v[2]);\n        int count = st.executeUpdate();\n        conn.commit();\n        System.out.println(\"Update count = \" + count);\n      } catch(Exception ex){\n         //conn.rollback();\n         System.out.println(ex.getMessage());\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from enums\");\nSystem.out.println();\ntraverseRS(\"select * from test\");\n\n```", "```java\nprivate static void execute(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.execute();\n    }\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n}\n```", "```java\nexecute(\"create table images (id integer, image bytea)\");\nexecute(\"create table lobs (id integer, lob oid)\");\nexecute(\"create table texts (id integer, text text)\");\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    Blob blob = conn.createBlob();   \n    OutputStream out = blob.setBinaryStream(1);\n    int i = -1;\n    while ((i = fis.read()) != -1) {\n      out.write(i);\n    }\n    st.setBlob(2, blob);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/\"\n                         + \"Chapter06Database.java\");\n    Reader reader = new FileReader(file);\n    st.setClob(2, reader);  \n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\nString sql = \"select image from images\";\ntry (PreparedStatement st = conn.prepareStatement(sql)) {\n  st.setInt(1, 100);\n  try(ResultSet rs = st.executeQuery()){\n    while (rs.next()){\n      Blob blob = rs.getBlob(1); \n      System.out.println(\"blob length = \" + blob.length());\n    }\n  }\n}\n```", "```java\ntraverseRS(\"select * from images\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    st.setBinaryStream(2, fis);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select image from images where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        try(InputStream is = rs.getBinaryStream(1)){\n          int i;\n          System.out.print(\"ints = \");\n          while ((i = is.read()) != -1) {\n            System.out.print(i);\n          }\n        }\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from images\");\n\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  String sql =  \"insert into images (id, image) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/image1.png\");\n    FileInputStream fis = new FileInputStream(file);\n    byte[] bytes = fis.readAllBytes();\n    st.setBytes(2, bytes);\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select image from images where id = ?\";\n  System.out.println();\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        byte[] bytes = rs.getBytes(1);\n        System.out.println(\"bytes = \" + bytes);\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n\n```", "```java\ntraverseRS(\"select * from lobs\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  LargeObjectManager lobm = \n        conn.unwrap(org.postgresql.PGConnection.class)\n            .getLargeObjectAPI();\n  long lob = lobm.createLO(LargeObjectManager.READ \n                           | LargeObjectManager.WRITE);\n  LargeObject obj = lobm.open(lob, LargeObjectManager.WRITE);\n  File file = new File(\"src/com/packt/cookbook/ch06_db/image1.png\");\n  try (FileInputStream fis = new FileInputStream(file)){\n    int size = 2048;\n    byte[] bytes = new byte[size];\n    int len = 0;\n    while ((len = fis.read(bytes, 0, size)) > 0) {\n      obj.write(bytes, 0, len);\n    }\n    obj.close();\n    String sql = \"insert into lobs (id, lob) values(?, ?)\";\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.setInt(1, 100);\n      st.setLong(2, lob);\n      st.executeUpdate();\n    }\n  }\n    conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from lobs\");\n\n```", "```java\nexecute(\"delete from lobs where id = 100\"); \n\n```", "```java\nexecute(\"select lo_unlink((select lob from lobs \" + \" where id=100))\");\n\n```", "```java\nSELECT lo_unlink(pgl.oid) FROM pg_largeobject_metadata pgl\nWHERE (NOT EXISTS (SELECT 1 FROM lobs ls\" + \"WHERE ls.lob = pgl.oid));\n```", "```java\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  LargeObjectManager lobm =      \n          conn.unwrap(org.postgresql.PGConnection.class)\n              .getLargeObjectAPI();\n  String sql = \"select lob from lobs where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()){\n        long lob = rs.getLong(1);\n        LargeObject obj = lobm.open(lob, LargeObjectManager.READ);\n        byte[] bytes = new byte[obj.size()];\n        obj.read(bytes, 0, obj.size());\n        System.out.println(\"bytes = \" + bytes);\n        obj.close();\n      }\n    }\n  }\n  conn.commit();\n} catch (Exception ex) { ex.printStackTrace(); }\n\n```", "```java\nwhile (rs.next()){\n  Blob blob = rs.getBlob(1);\n  byte[] bytes = blob.getBytes(1, (int)blob.length());\n  System.out.println(\"bytes = \" + bytes);\n}\n```", "```java\nString str = new String(bytes, Charset.forName(\"UTF-8\"));\nSystem.out.println(\"bytes = \" + str);\n\n```", "```java\ntraverseRS(\"select * from texts\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/\"\n                         + \"Chapter06Database.java\");\n    try (FileInputStream fis = new FileInputStream(file)) {\n      byte[] bytes = fis.readAllBytes();\n      st.setString(2, new String(bytes, Charset.forName(\"UTF-8\")));\n    }\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n  sql = \"select text from texts where id = ?\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    try(ResultSet rs = st.executeQuery()){\n      while (rs.next()) {\n        String str = rs.getString(1);\n        System.out.println(str);\n      }\n    }\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\n```", "```java\ntraverseRS(\"select * from texts\");\nSystem.out.println();\ntry (Connection conn = getDbConnection()) {\n  String sql = \"insert into texts (id, text) values(?, ?)\";\n  try (PreparedStatement st = conn.prepareStatement(sql)) {\n    st.setInt(1, 100);\n    File file = new File(\"src/com/packt/cookbook/ch06_db/\"\n                         + \"Chapter06Database.java\");\n    //This is not implemented:\n    //st.setCharacterStream(2, reader, file.length()); \n    st.setCharacterStream(2, reader, (int)file.length());\n\n    int count = st.executeUpdate();\n    System.out.println(\"Update count = \" + count);\n  }\n} catch (Exception ex) { ex.printStackTrace(); }\nSystem.out.println();\ntraverseRS(\"select * from texts\");\n```", "```java\nString sql = \"select text from texts where id = ?\";\ntry (PreparedStatement st = conn.prepareStatement(sql)) {\n  st.setInt(1, 100);\n  try(ResultSet rs = st.executeQuery()){\n    while (rs.next()) {\n      try(Reader reader = rs.getCharacterStream(1)) {\n        char[] chars = new char[160];\n        reader.read(chars);\n        System.out.println(chars);\n      }\n    }\n  }\n}\n```", "```java\nString sql = \"{ ? = call replace(?, ?, ? ) }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.registerOutParameter(1, Types.VARCHAR);\n  st.setString(2, \"Hello, World! Hello!\");\n  st.setString(3, \"llo\");\n  st.setString(4, \"y\");\n  st.execute();\n  String res = st.getString(1);\n  System.out.println(res);\n}\n```", "```java\nexecute(\"create or replace function createTableTexts() \" \n        + \" returns void as \" \n        + \"$$ drop table if exists texts; \"\n        + \"  create table texts (id integer, text text); \"\n        + \"$$ language sql\");\n\n```", "```java\nprivate static void execute(String sql){\n  try (Connection conn = getDbConnection()) {\n    try (PreparedStatement st = conn.prepareStatement(sql)) {\n      st.execute();\n    }\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n}\n```", "```java\nString sql = \"{ call createTableTexts() }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.execute();\n}\n```", "```java\nprivate static void traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        int cCount = 0;\n        Map<Integer, String> cName = new HashMap<>();\n        while (rs.next()) {\n          if (cCount == 0) {\n            ResultSetMetaData rsmd = rs.getMetaData();\n            cCount = rsmd.getColumnCount();\n            for (int i = 1; i <= cCount; i++) {\n              cName.put(i, rsmd.getColumnLabel(i));\n            }\n          }\n          List<String> l = new ArrayList<>();\n          for (int i = 1; i <= cCount; i++) {\n            l.add(cName.get(i) + \" = \" + rs.getString(i));\n          }\n          System.out.println(l.stream()\n                      .collect(Collectors.joining(\", \")));\n        }\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```", "```java\nexecute(\"create or replace function createTableTexts() \" \n        + \"returns void as \"\n        + \"$$ drop table if exists texts; \"\n        + \"  create table texts (id integer, text text); \"\n        + \"$$ language sql\");\nString sql = \"{ call createTableTexts() }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.execute();\n  }\n}\ntraverseRS(\"select createTableTexts()\");\ntraverseRS(\"select * from createTableTexts()\");\nexecute(\"drop function if exists createTableTexts()\");\n\n```", "```java\nexecute(\"create or replace function insertText(int,varchar)\" \n        + \" returns void \"\n        + \" as $$ insert into texts (id, text) \"\n        + \"   values($1, replace($2,'XX','ext'));\" \n        + \" $$ language sql\");\nString sql = \"{ call insertText(?, ?) }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.setInt(1, 1);\n    st.setString(2, \"TXX 1\");\n    st.execute();\n  }\n}\nexecute(\"select insertText(2, 'TXX 2')\");\ntraverseRS(\"select * from texts\");\nexecute(\"drop function if exists insertText()\");\n\n```", "```java\nexecute(\"insert into texts (id, text) \" \n         + \"values(3,'Text 3'),(4,'Text 4')\");\ntraverseRS(\"select * from texts\");\nexecute(\"create or replace function countTexts() \" \n        + \"returns bigint as \" \n        + \"$$ select count(*) from texts; \" \n        + \"$$ language sql\");\nString sql = \"{ ? = call countTexts() }\";\ntry (Connection conn = getDbConnection()) {\n  try (CallableStatement st = conn.prepareCall(sql)) {\n    st.registerOutParameter(1, Types.BIGINT);\n    st.execute();\n    System.out.println(\"Result of countTexts() = \" + st.getLong(1));\n  }\n}\ntraverseRS(\"select countTexts()\");\ntraverseRS(\"select * from countTexts()\");\nexecute(\"drop function if exists countTexts()\");\n\n```", "```java\nexecute(\"create or replace function selectText(int) \" \n        + \"returns setof texts as \n        + \"$$ select * from texts where id=$1; \" \n        + \"$$ language sql\");\ntraverseRS(\"select selectText(1)\");\ntraverseRS(\"select * from selectText(1)\");\nexecute(\"drop function if exists selectText(int)\");\n```", "```java\nString sql = \"{ ? = call selectText(?) }\";\ntry (CallableStatement st = conn.prepareCall(sql)) {\n  st.registerOutParameter(1, Types.OTHER);\n  st.setInt(2, 1);\n  st.execute();\n  traverseRS((ResultSet)st.getObject(1));\n}\n\n```", "```java\nexecute(\"create or replace function selectText(int) \" \n        + \"returns refcursor \" +\n        + \"as $$ declare curs refcursor; \" \n        + \" begin \" \n        + \"   open curs for select * from texts where id=$1;\" \n        + \"     return curs; \" \n        + \" end; \" \n        + \"$$ language plpgsql\");\nString sql = \"{ ? = call selectText(?) }\";\ntry (Connection conn = getDbConnection()) {\n  conn.setAutoCommit(false);\n  try(CallableStatement st = conn.prepareCall(sql)){\n    st.registerOutParameter(1, Types.OTHER);\n    st.setInt(2, 2);\n    st.execute();\n    try(ResultSet rs = (ResultSet) st.getObject(1)){\n      System.out.println(\"traverseRS(refcursor()=>rs):\");\n      traverseRS(rs);\n    }\n  }\n}\ntraverseRS(\"select selectText(2)\");\ntraverseRS(\"select * from selectText(2)\");\nexecute(\"drop function if exists selectText(int)\");\n\n```", "```java\n        private void traverseRS(ResultSet rs) throws Exception {\n          int cCount = 0;\n          Map<Integer, String> cName = new HashMap<>();\n          while (rs.next()) {\n            if (cCount == 0) {\n              ResultSetMetaData rsmd = rs.getMetaData();\n              cCount = rsmd.getColumnCount();\n              for (int i = 1; i <= cCount; i++) {\n                cName.put(i, rsmd.getColumnLabel(i));\n              }\n            }\n            List<String> l = new ArrayList<>();\n            for (int i = 1; i <= cCount; i++) {\n              l.add(cName.get(i) + \" = \" + rs.getString(i));\n            }\n            System.out.println(l.stream()\n                      .collect(Collectors.joining(\", \")));\n          }\n        }\n```", "```java\nprivate static void traverseRS(String sql){\n  System.out.println(\"traverseRS(\" + sql + \"):\");\n  try (Connection conn = getDbConnection()) {\n    try (Statement st = conn.createStatement()) {\n      try(ResultSet rs = st.executeQuery(sql)){\n        traverseRS(rs);\n      }\n    }\n  } catch (Exception ex) { ex.printStackTrace(); }\n}\n```"]