["```java\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n      http.csrf((csrf) -> csrf.disable()) .cors(withDefaults())\n        .sessionManagement((sessionManagement) ->\n          sessionManagement.sessionCreationPolicy(\n          SessionCreationPolicy.STATELESS))\n        .authorizeHttpRequests( (authorizeHttpRequests) ->\n          authorizeHttpRequests.requestMatchers(HttpMethod.POST, \"/\n          login\").permitAll().anyRequest().authenticated())\n        .addFilterBefore(authenticationFilter,\n          UsernamePasswordAuthenticationFilter.class)\n        .exceptionHandling((exceptionHandling) ->\n          exceptionHandling.authenticationEntryPoint(exceptionHandler));\n      return http.build();\n    } \n    ```", "```java\n    import { useState } from 'react';\n    import axios from 'axios';\n    function Login() {\n      return(\n        <></>\n      );\n    }\n    export default Login; \n    ```", "```java\n    import { useState } from 'react';\n    import axios from 'axios';\n    **type** **User** **= {**\n      **username****: string;**\n      **password****: string;**\n    **}**\n    function Login() {\n      **const** **[user, setUser] = useState<****User****>({**\n        **username****:** **''****,**\n        **password****:** **''**\n      **});**\n      **const** **[isAuthenticated, setAuth] =** **useState****(****false****);**\n\n      return(\n        <></>\n      );\n    }\n    export default Login; \n    ```", "```java\n    import Button from '@mui/material/Button';\n    import TextField from '@mui/material/TextField';\n    import Stack from '@mui/material/Stack'; \n    ```", "```java\n    return(\n        <Stack spacing={2} alignItems=\"center\" mt={2}>\n          <TextField\n            name=\"username\"\n            label=\"Username\"\n            onChange={handleChange} />\n          <TextField\n            type=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            onChange={handleChange}/>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handleLogin}>\n              Login\n          </Button>\n        </Stack>\n    ); \n    ```", "```java\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) =>\n      {\n      setUser({...user,\n         [event.target.name] : event.target.value\n      });\n    } \n    ```", "```java\n    const handleLogin = () => {\n      axios.post(import.meta.env.VITE_API_URL + \"/login\", user, {\n        headers: { 'Content-Type': 'application/json' }\n      })\n      .then(res => {\n        const jwtToken = res.headers.authorization;\n        if (jwtToken !== null) {\n          sessionStorage.setItem(\"jwt\", jwtToken);\n          setAuth(true);\n        }\n      })\n      .catch(err => console.error(err));\n    } \n    ```", "```java\n    import Carlist from './Carlist'; \n    ```", "```java\n    **if** **(isAuthenticated) {**\n      **return****<****Carlist** **/>****;**\n    **}**\n    **else** **{**\n      return(\n        <Stack spacing={2} alignItems=\"center\" mt={2} >\n          <TextField\n            name=\"username\"\n            label=\"Username\"\n            onChange={handleChange} />\n          <TextField\n            type=\"password\"\n            name=\"password\"\n            label=\"Password\"\n            onChange={handleChange}/>\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            onClick={handleLogin}>\n              Login\n          </Button>\n        </Stack>\n      );\n    **}** \n    ```", "```java\n    // App.tsx\n    import AppBar from '@mui/material/AppBar';\n    import Toolbar from '@mui/material/Toolbar';\n    import Typography from '@mui/material/Typography';\n    import Container from '@mui/material/Container';\n    import CssBaseline from '@mui/material/CssBaseline';\n    **import****Login****from****'./components/Login'****;**\n    import { QueryClient, QueryClientProvider } from '@tanstack/react-\n      query';\n    const queryClient = new QueryClient();\n    function App() {\n      return (\n        <Container maxWidth=\"xl\">\n          <CssBaseline />\n          <AppBar position=\"static\">\n            <Toolbar>\n              <Typography variant=\"h6\">\n                Carshop\n              </Typography>\n            </Toolbar>\n          </AppBar>\n          <QueryClientProvider client={queryClient}>\n            **<****Login** **/>**\n          </QueryClientProvider>\n        </Container>\n      )\n    }\n    export default App; \n    ```", "```java\n    // carapi.ts\n    export const getCars = async (): Promise<CarResponse[]> => {\n      **const** **token =** **sessionStorage****.****getItem****(****\"jwt\"****);**\n      const response = await axios.get(`${import.meta.env.VITE_API_URL}/\n                       api/cars`, **{**\n        **headers****: {** **'Authorization'** **: token }**\n      **}**);\n      return response.data._embedded.cars;\n    } \n    ```", "```java\n    // carapi.ts\n    export const deleteCar = async (link: string): Promise<CarResponse> =>\n    {\n      **const** **token =** **sessionStorage****.****getItem****(****\"jwt\"****);**\n      const response = await axios.delete(link, **{**\n        **headers****: {** **'****Authorization'****: token }**\n      **}**)\n      return response.data\n    } \n    ```", "```java\n// carapi.ts\nexport const addCar = async (car: Car): Promise<CarResponse> => {\n  **const** **token =** **sessionStorage****.****getItem****(****\"jwt\"****);**\n  const response = await axios.post(`${import.meta.env.VITE_API_\n                   URL}/api/cars`, car, {\n    headers: {\n      'Content-Type': 'application/json',\n      **'Authorization'****: token**\n    },\n  });\n  return response.data;\n}\nexport const updateCar = async (carEntry: CarEntry): Promise<CarResponse> => {\n  **const** **token =** **sessionStorage****.****getItem****(****\"jwt\"****);**\n  const response = await axios.put(carEntry.url, carEntry.car, {\n    headers: {\n      'Content-Type': 'application/json',\n      **'Authorization'****: token**\n    },\n  });\n\n  return response.data;\n} \n```", "```java\n    // carapi.ts\n    import axios, { **AxiosRequestConfig** } from 'axios';\n    import { CarResponse, Car, CarEntry } from '../types';\n    **const** **getAxiosConfig = ():** **AxiosRequestConfig** **=>** **{**\n      **const** **token =** **sessionStorage****.****getItem****(****\"jwt\"****);**\n      **return** **{**\n        **headers****: {**\n          **'Authorization'****: token,**\n          **'Content-Type'****:** **'application/json'****,**\n        **},**\n      **};**\n    **};** \n    ```", "```java\n    // carapi.ts\n    export const getCars = async (): Promise<CarResponse[]> => {\n      const response = await axios.get(`${import.meta.env.VITE_API_URL}/\n                       api/cars`, **getAxiosConfig****()**);\n      return response.data._embedded.cars;\n    }\n    export const deleteCar = async (link: string): Promise<CarResponse> =>\n    {\n      const response = await axios.delete(link, **getAxiosConfig****()**)\n      return response.data\n    }\n    export const addCar = async (car: Car): Promise<CarResponse> => {\n      const response = await axios.post(`${import.meta.env.VITE_API_\n                       URL}/api/cars`, car, **getAxiosConfig****()**);\n      return response.data;\n    }\n    export const updateCar = async (carEntry: CarEntry):\n      Promise<CarResponse> => {\n      const response = await axios.put(carEntry.url, carEntry.car,\n                                       **getAxiosConfig****()**);\n    return response.data;\n    } \n    ```", "```java\n    import Snackbar from '@mui/material/Snackbar'; \n    ```", "```java\n    const [open, setOpen] = useState(false); \n    ```", "```java\n    <Snackbar\n      open={open}\n      autoHideDuration={3000}\n      onClose={() => setOpen(false)}\n      message=\"Login failed: Check your username and password\"\n    /> \n    ```", "```java\n    const login = () => {\n      axios.post(import.meta.env.VITE_API_URL + \"/login\", user, {\n        headers: { 'Content-Type': 'application/json' }\n      })\n      .then(res => {\n        const jwtToken = res.headers.authorization;\n        if (jwtToken !== null) {\n          sessionStorage.setItem(\"jwt\", jwtToken);\n          setAuth(true);\n        }\n      })\n      .catch(**() =>****setOpen****(****true****)**);\n    } \n    ```", "```java\n    // Login.tsx\n    const handleLogout = () => {\n      setAuth(false);\n      sessionStorage.setItem(\"jwt\", \"\");\n    } \n    ```", "```java\n    // Login.tsx\n    if (isAuthenticated) {\n      return <Carlist **logOut****=****{handleLogout}**/>;\n    }\n    else {  \n      return(\n      ... \n    ```", "```java\n    //Carlist.tsx\n    **type** **CarlistProps** **= {**\n      **logOut?****:** **() =>****void****;**\n    **}**\n    function Carlist(**{ logOut }: CarlistProps**) {\n      const [open, setOpen] = useState(false);\n      ... \n    ```", "```java\n    // Carlist.tsx\n    // Add the following imports\n    import Button from '@mui/material/Button';\n    import Stack from '@mui/material/Stack';\n    // Render the Stack and Button  \n    if (!isSuccess) {\n        return <span>Loading...</span>\n    }\n    else if (error) {\n      return <span>Error when fetching cars...</span>\n    }\n    else {\n      return ( \n        <>\n          **<****Stack****direction****=****\"row\"****alignItems****=****\"center\"**\n           **justifyContent****=****\"space-between\"****>**\n            **<****AddCar** **/>**\n            **<****Button****onClick****=****{logOut}****>****Log out****</****Button****>**\n          **</****Stack****>**\n          <DataGrid\n            rows={data}\n            columns={columns}\n            disableRowSelectionOnClick={true}\n            slots={{ toolbar: GridToolbar }}\n            getRowId={row => row._links.self.href} /> \n          <Snackbar\n            open={open}\n            autoHideDuration={2000}\n            onClose={() => setOpen(false)}\n            message=\"Car deleted\" />\n        </>\n      );\n    } \n    ```"]