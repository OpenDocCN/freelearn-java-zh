["```java\n    gradle nativeTest \n    ```", "```java\n    ENTRYPOINT [\"java\", \"-Dspring.aot.enabled=false\", \"org.springframework.boot.loader.JarLauncher\"] \n    ```", "```java\n    plugins {\n        ...\n        id 'org.graalvm.buildtools.native' version '0.9.18'\n    } \n    ```", "```java\n    tasks.named('bootBuildImage') {\n        imageName = \"hands-on/native-product-service\"\n        builder = \"dashaun/builder:tiny\"\n    } \n    ```", "```java\n@RegisterReflectionForBinding({ Event.class, ZonedDateTimeSerializer.class, Product.class})public class ProductServiceApplication { \n```", "```java\n@Configuration\n@ImportRuntimeHints(NativeHintsConfiguration.class)\npublic class NativeHintsConfiguration implements RuntimeHintsRegistrar {\n  @Override\n  public void registerHints(RuntimeHints hints, ClassLoader classLoader) {\n    hints.reflection().registerType(CircuitBreakerAspect.class,\n      builder -> builder.withMembers(INVOKE_DECLARED_METHODS));\n    hints.reflection().registerType(RetryAspect.class,\n      builder -> builder.withMembers(INVOKE_DECLARED_METHODS));\n    hints.reflection().registerType(TimeLimiterAspect.class,\n      builder -> builder.withMembers(INVOKE_DECLARED_METHODS));\n  }\n} \n```", "```java\nresilience4j.retry:\n  instances:\n    product:\n      maxAttempts: 3\n      waitDuration: 1000\n      retryExceptions:\n      - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError \n```", "```java\n# Required to make the Spring AOT engine generate the appropriate infrastructure for a separate management port at build time\nmanagement.server.port: 9009 \n```", "```java\n# Required to make Springdoc handling forward headers correctly when natively compiled\nserver.forward-headers-strategy: framework\n# Required to make the Spring AOT engine generate the appropriate infrastructure for a separate management port, Prometheus, and K8S probes at build time\nmanagement.server.port: 9009\nmanagement.endpoint.health.probes.enabled: true\nmanagement.endpoints.web.exposure.include: health,info,circuitbreakerevents,prometheus\n# Required to make the Spring AOT engine generate a ReactiveJwtDecoder for the OIDC issuer\nspring.security.oauth2.resourceserver.jwt.issuer-uri: http://someissuer\n# See https://github.com/springdoc/springdoc-openapi/issues/1284#issuecomment-1279854219\nspringdoc.enable-native-support: true\n# Native Compile: Point out that RabbitMQ is to be used when performing the native compilation\nspring.cloud.stream.defaultBinder: rabbit\n# Native Compile: Required to disable the health check of RabbitMQ when using Kafka\n# management.health.rabbit.enabled: false\n# Native Compile: Required to disable the health check of Kafka when using RabbitMQ\nmanagement.health.kafka.enabled: false\n# Native Compile: Required to get the circuit breaker's health check to work properly\nmanagement.health.circuitbreakers.enabled: true \n```", "```java\nspring.datasource.url: jdbc:mysql://localhost/review-db?useUnicode=true&connectionCollation=utf8_general_ci&characterSetResults=utf8&characterEncoding=utf-8 \n```", "```java\ntasks.named('test') {\n    useJUnitPlatform()\n    jvmArgs \"-agentlib:Native Image-agent=access-filter-file=src/test/resources/access-filter.json,config-output-dir=src/main/resources/META-INF/Native Image\"\n} \n```", "```java\n{ \"rules\":\n  [\n    {\"excludeClasses\": \"org.apache.maven.surefire.**\"},\n    {\"excludeClasses\": \"net.bytebuddy.**\"},\n    {\"excludeClasses\": \"org.apiguardian.**\"},\n    {\"excludeClasses\": \"org.junit.**\"},\n    {\"excludeClasses\": \"org.gradle.**\"},\n    {\"excludeClasses\": \"org.mockito.**\"},\n    {\"excludeClasses\": \"org.springframework.test.**\"},\n    {\"excludeClasses\": \"org.springframework.boot.test.**\"},\n    {\"excludeClasses\": \"org.testcontainers.**\"},\n    {\"excludeClasses\": \"se.magnus.microservices.core.product.MapperTests\"},\n    {\"excludeClasses\": \"se.magnus.microservices.core.product.MongoDbTestBase\"},\n    {\"excludeClasses\": \"se.magnus.microservices.core.product.PersistenceTests\"},\n    {\"excludeClasses\": \"se.magnus.microservices.core.product.ProductServiceApplicationTests\"}\n  ]\n} \n```", "```java\n    curl -s \"https://get.sdkman.io\" | bash\n    source \"$HOME/.sdkman/bin/sdkman-init.sh\" \n    ```", "```java\n    sdk version \n    ```", "```java\n    SDKMAN 5.18.1 \n    ```", "```java\n    sudo apt install -y build-essential libz-dev zlib1g-dev \n    ```", "```java\n    sdk install java 22.3.1.r17-grl \n    sdk default java 22.3.1.r17-grl \n    ```", "```java\n    gu install Native Image \n    ```", "```java\n    java -version\n    gu list \n    ```", "```java\n    openjdk version \"17.0.6\" 2023-01-17\n    OpenJDK Runtime Environment GraalVM CE 22.3.1 (build 17.0.6+10-jvmci-22.3-b13)\n    OpenJDK 64-Bit Server VM GraalVM CE 22.3.1 (build 17.0.6+10-jvmci-22.3-b13, mixed mode, sharing) \n    ```", "```java\n    ComponentId              Version             Component name\n    -----------------------------------------------------------\n    graalvm                  22.3.1              GraalVM Core  \n    Native Image             22.3.1              Native Image \n    ```", "```java\n    cd $BOOK_HOME/Chapter23\n    ./gradlew :microservices:product-service:test --no-daemon \n    ```", "```java\n    jni-config.json\n    predefined-classes-config.json\n    proxy-config.json\n    reflect-config.json\n    resource-config.json\n    serialization-config.json \n    ```", "```java\n./gradlew nativeTest \n```", "```java\n./gradlew :microservices:product-service:nativeTest \n```", "```java\nJUnit Platform on Native Image - report\n...\n[        13 tests found           ]\n[        13 tests skipped         ]\n[         0 tests started         ]\n[         0 tests aborted         ]\n[         0 tests successful      ]\n[         0 tests failed          ] \n```", "```java\n    ./gradlew microservices:product-composite-service:nativeCompile \n    ```", "```java\n    file microservices/product-composite-service/build/native/nativeCompile/product-composite-service \n    ```", "```java\n    …product-composite-service: Mach-O 64-bit executable arm64 \n    ```", "```java\n    docker-compose up -d rabbitmq \n    ```", "```java\n    SPRING_RABBITMQ_USERNAME=rabbit-user-prod \\\n    SPRING_RABBITMQ_PASSWORD=rabbit-pwd-prod \\\n    SPRING_CONFIG_LOCATION=file:config-repo/application.yml,file:config-repo/product-composite.yml \\\n    microservices/product-composite-service/build/native/nativeCompile/product-composite-service \n    ```", "```java\n    Started ProductCompositeServiceApplication in 0.543 seconds \n    ```", "```java\n    curl localhost:4004/actuator/health/liveness \n    ```", "```java\n    {\"status\":\"UP\"} \n    ```", "```java\n    docker-compose down \n    ```", "```java\n    minikube stop \n    ```", "```java\n    eval $(minikube docker-env -u) \n    ```", "```java\n    ./gradlew :microservices:product-service:bootBuildImage --no-daemon \n    ```", "```java\n    Successfully built image 'docker.io/hands-on/native-product-service:latest' \n    ```", "```java\n    ./gradlew :microservices:product-composite-service:bootBuildImage --no-daemon\n    ./gradlew :microservices:recommendation-service:bootBuildImage --no-daemon\n    ./gradlew :microservices:review-service:bootBuildImage --no-daemon \n    ```", "```java\n    docker images | grep \"hands-on/native\" \n    ```", "```java\nminikube stop \n```", "```java\n    cd $BOOK_HOME/Chapter23\n    eval $(minikube docker-env -u)\n    ./gradlew build\n    docker-compose build \n    ```", "```java\n    unset COMPOSE_FILE \n    ```", "```java\n    docker-compose up -d mysql mongodb rabbitmq auth-server gateway \n    ```", "```java\n    docker-compose up -d \n    ```", "```java\n    docker-compose logs product-composite product review recommendation | grep \": Started\" \n    ```", "```java\n    USE_K8S=false HOST=localhost PORT=8443 HEALTH_URL=https://localhost:8443 ./test-em-all.bash \n    ```", "```java\n    docker stats --no-stream \n    ```", "```java\n    docker compose down \n    ```", "```java\n    docker-compose up -d mysql mongodb rabbitmq auth-server gateway \n    ```", "```java\n    ENTRYPOINT [\"java\", \"-Dspring.aot.enabled=true\", \"org.springframework.boot.loader.JarLauncher\"] \n    ```", "```java\n    docker-compose build \n    ```", "```java\n    docker-compose up -d \n    ```", "```java\n    docker-compose logs product-composite product review recommendation | grep \"Starting AOT-processed\" \n    ```", "```java\n    docker-compose logs product-composite product review recommendation | grep \": Started\" \n    ```", "```java\n    USE_K8S=false HOST=localhost PORT=8443 HEALTH_URL=https://localhost:8443 ./test-em-all.bash \n    ```", "```java\n    docker compose down \n    ```", "```java\n    export COMPOSE_FILE=docker-compose-native.yml \n    ```", "```java\n    docker-compose up -d mysql mongodb rabbitmq auth-server gateway \n    ```", "```java\n    docker-compose up -d \n    ```", "```java\n    docker-compose logs product-composite product review recommendation | grep \": Started\" \n    ```", "```java\n    USE_K8S=false HOST=localhost PORT=8443 HEALTH_URL=https://localhost:8443 ./test-em-all.bash \n    ```", "```java\n    docker stats --no-stream \n    ```", "```java\n    docker compose down \n    ```", "```java\nkubernetes/helm/\n└── environments\n    └── dev-env-native \n```", "```java\n    eval $(minikube docker-env -u)\n    docker save hands-on/native-product-composite-service:latest -o native-product-composite.tar\n    docker save hands-on/native-product-service:latest -o native-product.tar\n    docker save hands-on/native-recommendation-service:latest -o native-recommendation.tar\n    docker save hands-on/native-review-service:latest -o native-review.tar \n    ```", "```java\n    minikube start \n    ```", "```java\n    minikube tunnel \n    ```", "```java\n    eval $(minikube docker-env)\n    docker load -i native-product-composite.tar\n    docker load -i native-product.tar\n    docker load -i native-recommendation.tar\n    docker load -i native-review.tar \n    ```", "```java\n    rm native-product-composite.tar native-product.tar native-recommendation.tar native-review.tar \n    ```", "```java\n    docker-compose build auth-server \n    ```", "```java\n    kubectl delete namespace hands-on\n    kubectl apply -f kubernetes/hands-on-namespace.yml\n    kubectl config set-context $(kubectl config current-context) --namespace=hands-on \n    ```", "```java\n    for f in kubernetes/helm/components/*; do helm dep up $f; done \n    ```", "```java\n    for f in kubernetes/helm/environments/*; do helm dep up $f; done \n    ```", "```java\n    helm upgrade -install hands-on-dev-env-native \\\n      kubernetes/helm/environments/dev-env-native \\\n      -n hands-on --wait \n    ```", "```java\n    ./test-em-all.bash \n    ```", "```java\n    Kubectl delete pod -l app=product-composite\n    kubectl logs -l app=product-composite --tail=-1 | grep \": Started\" \n    ```", "```java\n    kubectl get pods -o jsonpath=\"{.items[*].spec.containers[*].image}\" | xargs -n1 | grep hands-on \n    ```"]