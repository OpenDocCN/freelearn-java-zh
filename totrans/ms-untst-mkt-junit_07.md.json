["```java\n    protected void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n      String urlContext = req.getServletPath();\n      if(urlContext.equals(\"/\")) {\n        req.getRequestDispatcher(\"login.jsp\").forward(req, res);  \n      }else if(urlContext.equals(\"/home.do\")) {\n        req.getRequestDispatcher(\"home.jsp\").forward(req, res);  \n      }else {\n        req.setAttribute(\"error\", \"Invalid request path '\"+urlContext+\"'\");\n        req.getRequestDispatcher(\"error.jsp\").forward(req, res);  \n      }\n    }\n    ```", "```java\n    <body>\n      <font color=\"RED\"><%=request.getAttribute(\"error\") %></font>\n    </body>\n    ```", "```java\n    <web-app    xsi:schemaLocation=\"http://java.sun.com/xml/ ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\" id=\"WebApp_ID\" version=\"3.0\">\n     <display-name>DemoServletTest</display-name>\n      <servlet>\n        <servlet-name>demo</servlet-name>\n        <servlet-class>com.packt.servlet.DemoController\n       </servlet-class>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>demo</servlet-name>\n        <url-pattern>/</url-pattern>\n      </servlet-mapping>\n    </web-app>\n    ```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class DemoControllerTest {\n  @Mock   HttpServletRequest req;\n  @Mock   HttpServletResponse res;\n  @Mock   RequestDispatcher dispatcher;\n  DemoController controllerServlet;\n\n  @Before\n  public void setup() {\n    controllerServlet = new DemoController();\n    when(req.getRequestDispatcher(anyString())).      thenReturn(dispatcher);\n  }\n\n  @Test\n  public void when_servlet_path_is_empty_then_opens_login_page(){\n    when(req.getServletPath()).thenReturn(\"/\");\n    controllerServlet.doGet(req, res);\n    ArgumentCaptor<String> dispatcherArgument =        ArgumentCaptor.forClass(String.class);\n    verify(req).getRequestDispatcher(      dispatcherArgument.capture());\n    assertEquals(\"login.jsp\", dispatcherArgument.getValue());\n  }\n\n  @Test\n  public void when_home_page_request_then_opens_home_page(){\n    when(req.getServletPath()).thenReturn(\"/home.do\");\n    controllerServlet.doGet(req, res);\n\n    ArgumentCaptor<String> dispatcherArgument =       ArgumentCaptor.forClass(String.class);\n    verify(req).getRequestDispatcher(      dispatcherArgument.capture());\n    assertEquals(\"home.jsp\", dispatcherArgument.getValue());\n  }\n\n  @Test\n  public void when_invalid_request_then_opens_error_page(){\n    when(req.getServletPath()).thenReturn(\"/xyz.do\");\n    controllerServlet.doGet(req, res);\n    ArgumentCaptor<String> dispatcherArgument =       ArgumentCaptor.forClass(String.class);\n    verify(req).getRequestDispatcher(      dispatcherArgument.capture());\n    assertEquals(\"error.jsp\", dispatcherArgument.getValue());\n  }\n}\n```", "```java\n    <display-name>SpringMVCTest</display-name>\n    <servlet>\n      <servlet-name>dispatcher</servlet-name>\n      <servlet-class>\n        org.springframework.web.servlet.DispatcherServlet\n      </servlet-class>\n      <load-on-startup>1</load-on-startup>\n      </servlet>\n      <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/</url-pattern>\n      </servlet-mapping>\n      <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>\n          /WEB-INF/dispatcher-servlet.xml\n        </param-value>\n      </context-param>\n    </web-app>\n    ```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <beans \n\n      xsi:schemaLocation=\"\n      http://www.springframework.org/schema/beans     \n      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n      http://www.springframework.org/schema/context \n      http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n     <context:component-scan base-package=\"com.packt\" />\n     <bean class= \"org.springframework.web.servlet.view.\n        InternalResourceViewResolver\">\n      <property name=\"prefix\">\n        <value>/WEB-INF/pages/</value>\n      </property>\n      <property name=\"suffix\">\n          <value>.jsp</value>\n        </property>\n      </bean>\n    </beans>\n    ```", "```java\n    <%@ taglib prefix=\"sf\" uri=\"http://www.springframework.org/tags/form\"%>\n    <sf:form method=\"POST\" modelAttribute=\"loginInfo\" action=\"/onLogin\">\n\n    </sf:form>\n    ```", "```java\n    @Controller\n    @Scope(\"session\")\n    public class LoginController implements Serializable {\n      @RequestMapping({ \"/\", \"/login\" })\n      public String onStartUp(ModelMap model) {\n        model.addAttribute(\"loginInfo\", new LoginInfo());\n        return \"login\";\n      }\n    }\n    ```", "```java\n    @RequestMapping({ \"/onLogin\" })\n    public String onLogin(@ModelAttribute(\"loginInfo\") LoginInfo loginInfo, ModelMap model) {\n      if(!\"junit\".equals(loginInfo.getUserId())) {\n        model.addAttribute(\"error\", \"invalid login name\");\n        return \"login\";\n      }\n      if(!\"password\".equals(loginInfo.getPassword())) {\n        model.addAttribute(\"error\", \"invalid password\");\n        return \"login\";\n      }\n      model.addAttribute(\"name\", \"junit reader!\");\n      return \"greetings\";\n    }\n    ```", "```java\n    <sf:form method=\"POST\" modelAttribute=\"loginInfo\" action=\"/SpringMvcTest/onLogin\">\n    ```", "```java\n    <h1>Hello :${name}</h1>\n    ```", "```java\n    public class LoginControllerTest {\n      LoginController controller = new LoginController();\n      @Test\n      public void when_no_name_entered_shows_error_message(){\n        ModelMap model = new ModelMap();\n        String viewName = controller.onLogin(new LoginInfo(), model);\n        assertEquals(\"login\", viewName);\n        assertEquals(\"invalid login name\", model.get(\"error\"));\n      }\n    }\n    ```", "```java\n    @Test\n    public void when_invalid_password_entered_shows_error_message()   {\n      ModelMap model = new ModelMap();\n      LoginInfo loginInfo = new LoginInfo();\n      loginInfo.setUserId(\"junit\");\n      String viewName =controller.onLogin(loginInfo, model);\n      assertEquals(\"login\", viewName);\n      assertEquals(\"invalid password\", model.get(\"error\"));\n    }\n    ```", "```java\n    @Test   public void happyPath(){\n      loginInfo.setUserId(\"junit\");\n      loginInfo.setPassword(\"password\");\n      String viewName =controller.onLogin(loginInfo, model);\n      assertEquals(\"greetings\", viewName);\n    }\n    ```"]