- en: Chapter 6. Distributing a Clustered Container with Apache Karaf Cellar
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Karaf Cellar modules in Apache Karaf
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Apache Karaf Cellar commands
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a distributed architecture with Cellar
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter shows how to install and use Apache Karaf Cellar with Apache Karaf.
    Apache Karaf Cellar's main aim is to enable a cluster-wide provisioning for Apache
    Karaf. This provisioning can be controlled with white and black lists for bundles,
    features, and configurations. Besides these core features, it is also possible
    to use Cellar to cluster in or with a cloud and send events through the cluster.
    It is also possible to have distributed OSGi services with Cellar.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are looking for more insight on how Apache Karaf Cellar works, take a
    look at *Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Karaf Cellar modules in Apache Karaf
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we will need to add the ability to cluster multiple Karaf instances.
    For this, Cellar needs to be installed on Apache Karaf first. For this, the required
    feature repository URL needs to be added, which can be done using the following
    convenient method:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After this, all the possible Cellar features of the latest version are available
    for installation. In our case, this is Cellar 3.0.0\. Besides installing Cellar,
    it is required to have multiple Karaf instances running for verification of the
    recipes.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Cellar and create multiple Karaf instances on
    the same machine:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the required `cellar` feature with the following command:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will install all the required Cellar bundles so that we have the basic
    setup to run a Karaf cluster.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, it''s important to have another node for clustering. For this, we will
    set up a second Karaf instance on the same machine. For this, you''ll find the
    following commands useful. So, create another Karaf instance using the following
    command:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create a new Karaf instance that looks like a freshly extracted Apache
    Karaf ZIP archive.
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second instance is created; now, we need to start this second instance.
    There is a command in Karaf to do so, which is as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This just started the second instance, which can now be connected to, by either
    an external SSH client or through Karaf. This can be done using the following
    command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With this, you are connected to the second instance of Karaf. We need to add
    the `cellar` repository to this instance too. This can be done using the following
    command:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After the `cellar` feature repository becomes available to the second instance,
    the `cellar` feature is ready to be installed.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This installs the required bundles; therefore, we have two nodes ready to be
    clustered. As the Cellar cluster works with auto discovery through multicast,
    both nodes should be able to find each other.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Cellar uses Hazelcast as its underlying cluster technology, the multicast
    is handled by Hazelcast. More information about Hazelcast is available at [http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html](http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Cellar使用Hazelcast作为其底层集群技术，多播由Hazelcast处理。有关Hazelcast的更多信息，请参阅[http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html](http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html)。
- en: 'These nodes can be checked by listing the available groups using the following
    command:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令列出可用的群组来检查这些节点：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will list the available groups together with the nodes contained in each
    group. As there has been no configuration for any group yet, the default group
    contains both nodes—the root Karaf instance and the second instance. The following
    screenshot shows the execution of the `group-list` command, which is an alias
    of the `cluster:group-list` command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出可用的群组以及每个群组中包含的节点。由于尚未对任何群组进行配置，默认群组包含两个节点——根Karaf实例和第二个实例。以下屏幕截图显示了`group-list`命令的执行，该命令是`cluster:group-list`命令的别名：
- en: '![How to do it…](img/5081OS_06_01.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/5081OS_06_01.jpg)'
- en: How it works…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: After the installation of Cellar on both nodes, Cellar created a default group
    on both the nodes, and therefore, both these nodes are automatically added to
    this default group. The basis of Cellar is a Hazelcast-based memory cluster configuration,
    which replicates itself to all known nodes in the cluster. Hazelcast itself scans
    the network via multicast for other instances of itself. Hazelcast can be configured
    to use other means of network connection technologies. Apache Karaf Cellar uses
    this behavior to synchronize the cluster configuration over the running nodes.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个节点上安装Cellar后，Cellar在两个节点上都创建了一个默认群组，因此这两个节点自动添加到这个默认群组中。Cellar的基础是Hazelcast内存集群配置，它会将自己复制到集群中所有已知的节点。Hazelcast本身通过多播扫描网络以查找其他实例。Hazelcast可以被配置为使用其他网络连接技术。Apache
    Karaf Cellar使用这种行为来在运行中的节点上同步集群配置。
- en: A Cellar cluster is defined by a group, where each group consists of a list
    of nodes. For each cluster group, there is a Hazelcast topic, which is the communication
    backend. With this topic, all nodes within the same group communicate changes
    in bundles, features, or configuration. Additionally, services and events are
    also communicated through this topic.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Cellar集群由一个群组定义，其中每个群组包含一个节点列表。对于每个集群群组，都有一个Hazelcast主题，它是通信后端。通过这个主题，同一群组内的所有节点都会在包、功能或配置中通信更改。此外，服务和事件也是通过这个主题进行通信的。
- en: 'Due to this topic, the configuration of all nodes is combined to a shared cluster
    configuration, as shown in the following screenshot:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个主题，所有节点的配置被组合成一个共享的集群配置，如下面的屏幕截图所示：
- en: '![How it works…](img/5081OS_06_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/5081OS_06_02.jpg)'
- en: Using Apache Karaf Cellar commands
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apache Karaf Cellar命令
- en: As with a lot of other features of Apache Karaf, Cellar provides a couple of
    commands to administer an Apache Karaf Cellar cluster.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与Apache Karaf的许多其他功能一样，Cellar提供了一些命令来管理Apache Karaf Cellar集群。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you follow the basic setup of the *Installing Apache Karaf Cellar
    modules in Apache Karaf* recipe to run a simple Apache Karaf cluster.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您遵循了*在Apache Karaf中安装Apache Karaf Cellar模块*的基本设置说明来运行一个简单的Apache Karaf集群。
- en: How to do it…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We have two different kinds of commands to work with the Apache Karaf Cellar
    cluster: basic commands to manage and configure the cluster and some more enhanced
    commands for extra management.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种不同类型的命令来处理Apache Karaf Cellar集群：用于管理和配置集群的基本命令以及一些增强的命令用于额外管理。
- en: Group commands
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 群组命令
- en: 'After installing Cellar, there is already a default group available that contains
    all the future available nodes per default. Different tasks can be performed using
    the following commands:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Cellar后，已经有一个默认群组可用，该群组默认包含所有未来可用的节点。可以使用以下命令执行不同的任务：
- en: 'Now, let''s create a new group and add both nodes to it using the following
    command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用以下命令创建一个新的群组并将两个节点添加到其中：
- en: '[PRE8]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The previous command creates a new cluster group called `main-cluster`. This
    group contains no nodes in it. Check using the `group-list` command to see how
    the cluster looks right now. The result of this command can be seen in the following
    screenshot:'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令创建了一个名为`main-cluster`的新集群群组。这个群组中没有节点。使用`group-list`命令检查集群现在的样子。该命令的结果可以在以下屏幕截图中看到：
- en: '![Group commands](img/5081OS_06_03.jpg)'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![群组命令](img/5081OS_06_03.jpg)'
- en: 'The newly created group is still empty. Therefore, we need to add some nodes.
    Adding nodes to a cluster can be done in different ways. The following command
    is an example:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的组仍然是空的。因此，我们需要添加一些节点。向集群中添加节点可以通过不同的方式完成。以下命令是一个示例：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is the complete syntax for the preceding command:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下命令的完整语法如下：
- en: '[PRE10]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It picks a number of nodes from the given source group and transfers these
    nodes to the target group. If no number is given, one is picked from the source
    group. The execution and what it looks like is shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它从给定的源组中选择一些节点并将这些节点转移到目标组。如果没有指定数量，则从源组中选择一个。执行和外观如下面的截图所示：
- en: '![Group commands](img/5081OS_06_04.jpg)'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![组命令](img/5081OS_06_04.jpg)'
- en: Another way of adding a node to a cluster group is to use the `join` command.
    With this command, you also have the possibility to add a node to more than one
    group.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向集群组添加节点的另一种方法是使用`join`命令。使用此命令，您还可以将节点添加到多个组中。
- en: '[PRE11]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The syntax of the preceding command is as follows:'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令的语法如下：
- en: '[PRE12]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The command, including its output, is shown in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令及其输出如下面的截图所示：
- en: '![Group commands](img/5081OS_06_05.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![组命令](img/5081OS_06_05.jpg)'
- en: 'As you can tell, the second node is now contained in both cluster groups, though
    we don''t want to have this node in the default group anymore. For this, we need
    to remove it from this group by using the following command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如您所见，第二个节点现在包含在两个集群组中，尽管我们不再希望这个节点保留在默认组中。为此，我们需要使用以下命令将其从该组中移除：
- en: '[PRE13]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The syntax for the preceding command is as follows:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令的语法如下：
- en: '[PRE14]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The command returns a list of the current state of the groups, as shown in
    the following screenshot:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 命令返回当前组的状态列表，如下面的截图所示：
- en: '![Group commands](img/5081OS_06_06.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![组命令](img/5081OS_06_06.jpg)'
- en: 'This empty group can be deleted using the following command:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下命令删除此空组：
- en: '[PRE15]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: When checking with the `cluster:group-list` command, you'll see that the default
    group can't be deleted. This is because of its default character. So, if you create
    a new test group and delete it right away, you will see that the test group has
    been created and deleted with the commands.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`cluster:group-list`命令检查时，您会看到默认组无法删除。这是因为其默认特性。因此，如果您创建一个新的测试组并立即删除它，您将看到测试组已通过命令创建和删除。
- en: The node commands
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 节点命令
- en: The following is a brief introduction of the node commands.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对节点命令的简要介绍。
- en: 'Similar to the `group-list` command, the `node-list` command will list all
    available nodes:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于`group-list`命令，`node-list`命令将列出所有可用的节点：
- en: '[PRE16]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述命令的输出如下面的截图所示：
- en: '![The node commands](img/5081OS_06_07.jpg)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![节点命令](img/5081OS_06_07.jpg)'
- en: 'Similar to a network ping, it is possible to ping a cluster node to test the
    network accessibility of this node. This can be done using the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似于网络ping，可以ping一个集群节点来测试该节点的网络可达性。这可以通过以下命令完成：
- en: '[PRE17]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The output will be as shown in the following screenshot:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将如下面的截图所示：
- en: '![The node commands](img/5081OS_06_08.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![节点命令](img/5081OS_06_08.jpg)'
- en: Cluster configuration commands
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 集群配置命令
- en: So far, the previous commands have been used for administration of the cluster
    itself, by either adding or removing cluster groups and configuring the nodes
    of one cluster group.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，之前的命令已用于集群本身的管理，通过添加或删除集群组以及配置一个集群组的节点。
- en: 'The last administrational command is the `cluster:sync` command:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个管理命令是`cluster:sync`命令：
- en: '[PRE18]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This will force a synchronization of all nodes in the cluster, as shown in
    the following screenshot:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将强制同步集群中的所有节点，如下面的截图所示：
- en: '![Cluster configuration commands](img/5081OS_06_09.jpg)'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![集群配置命令](img/5081OS_06_09.jpg)'
- en: 'Now, the following commands are used to configure the content of the cluster.
    For example, it is possible to install features and bundles across the cluster.
    To list the currently available features for one cluster group, just issue the
    following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，以下命令用于配置集群的内容。例如，可以在集群中安装功能和包。要列出一个集群组的当前可用功能，只需发出以下命令：
- en: '[PRE19]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Cluster configuration commands](img/5081OS_06_10.jpg)'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![集群配置命令](img/5081OS_06_10.jpg)'
- en: 'The preceding command also works for listing the bundles installed across the
    cluster:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述命令同样适用于列出集群中安装的包：
- en: '[PRE20]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This results in a list of bundles available to the cluster group. The output
    will be as follows:'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将生成集群组可用的包列表。输出将如下所示：
- en: '[PRE21]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'For further bundle interaction in the cluster, use the following special bundle
    commands for clusters:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在集群中进行进一步的包交互，请使用以下特殊的集群包命令：
- en: '[PRE22]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: These bundle commands are similar to the standard Apache Karaf bundle commands.
    The scope of these commands is to distribute the command within the cluster.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些包命令与标准的Apache Karaf包命令类似。这些命令的范围是在集群内分发命令。
- en: 'For features, the commands are similar to the `cluster:bundle` commands. Commands
    that are possible for features are also available to be run in the cluster scope:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于功能，命令与`cluster:bundle`命令类似。适用于功能的命令也可以在集群范围内运行：
- en: '[PRE23]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `cluster:feature` commands will work on the cluster as for a standalone
    Karaf instance.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`cluster:feature`命令将在集群中像独立Karaf实例一样工作。'
- en: 'Similar to the bundle and feature commands, the configuration commands can
    also alter, set, or unset configurations which are valid throughout the cluster.
    Consider the following command:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与包和功能命令类似，配置命令也可以更改、设置或取消设置在整个集群中有效的配置。考虑以下命令：
- en: '[PRE24]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The output of the preceding command is the same as that of the `config:list`
    command, restricted only to the configurations that are valid for the cluster
    group, as can be seen in the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面命令的输出与`config:list`命令的输出相同，但仅限于对集群组有效的配置，如下面的截图所示：
- en: '![Cluster configuration commands](img/5081OS_06_12.jpg)'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![集群配置命令](img/5081OS_06_12.jpg)'
- en: 'In general, the cluster configuration commands have the following pattern:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通常，集群配置命令具有以下模式：
- en: '[PRE25]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding commands give the possibility to edit, delete, or add a configuration,
    which is then automatically shared throughout the cluster.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令提供了编辑、删除或添加配置的可能性，然后这些配置会自动在整个集群中共享。
- en: How it works…
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: As seen, Apache Karaf Cellar provides a couple of specialized cluster commands.
    This functionality is based on the fact that all of the configurations, installed
    bundles, and installed features are shared throughout the cluster. To have a dedicated
    control over this information, it is possible to whitelist or blacklist certain
    information. This information is defined in two configuration files, `org.apache.karaf.cellar.node.cfg`
    for node configurations and `org.apache.karaf.cellar.groups.cfg` containing the
    group configuration information.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如所见，Apache Karaf Cellar提供了一些专门的集群命令。这种功能基于这样一个事实：所有配置、安装的包和安装的功能在整个集群中都是共享的。为了对这部分信息进行专门的控制，可以白名单或黑名单某些信息。这些信息定义在两个配置文件中，`org.apache.karaf.cellar.node.cfg`用于节点配置，`org.apache.karaf.cellar.groups.cfg`包含组配置信息。
- en: In general, it is better to work with features instead of bundles when deploying
    applications throughout the cluster. This makes it easier to filter whitelisted
    and blacklisted bundles or features for certain cluster nodes.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在集群中部署应用程序时，使用功能而不是包会更好。这使得过滤白名单和黑名单中的包或功能以适应特定的集群节点变得更容易。
- en: See also
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '*Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*, covers
    the insights of Cellar in greater detail compared to what can be done with this
    Cookbook.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*学习Karaf Cellar*》，*Jean-Baptiste Onofré*，*Packt Publishing*，比本食谱中可以做到的更详细地介绍了Cellar的见解。
- en: Building and deploying a distributed architecture with Cellar
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Cellar构建和部署分布式架构
- en: This recipe describes how to build a clustered application and the transparent
    usage of services throughout the cluster. We will show you how to create a Cellar-based
    **Distributed OSGi** (**DOSGi**) application and how you can profit from Apache
    Karaf Cellar.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱描述了如何构建集群应用程序以及在整个集群中透明使用服务的方法。我们将向您展示如何创建基于Cellar的**分布式OSGi**（**DOSGi**）应用程序，以及您如何从Apache
    Karaf Cellar中获益。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: It is essential that you finish at least the *Installing Apache Karaf Cellar
    modules in Apache Karaf* recipe to have a clustered environment for testing. You
    should also be familiar with the cluster commands presented to you in the *Using
    Apache Karaf Cellar commands* recipe. The sources used in this recipe can be found
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 至关重要的是，您至少完成*在Apache Karaf中安装Apache Karaf Cellar模块*配方，以便在测试环境中有一个集群环境。您还应该熟悉*使用Apache
    Karaf Cellar命令*配方中向您展示的集群命令。本配方中使用的源代码可以在[https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3)找到。
- en: How to do it…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First of all, we will need an additional cluster group with an extra node.
    For this, we will create an additional instance first, using the following command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个额外的集群组，其中包含一个额外的节点。为此，我们首先创建一个额外的实例，使用以下命令：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Start this instance and install the `cellar` feature in it as described in
    the *Installing Apache Karaf Cellar modules in Apache Karaf* recipe. This instance
    will be added to a new group. First, create a new cluster group using the following
    command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 启动此实例，并按照*在Apache Karaf中安装Apache Karaf Cellar模块*配方中的说明安装`cellar`功能。此实例将被添加到一个新组中。首先，使用以下命令创建一个新的集群组：
- en: '[PRE27]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, add the new instance to the newly created cluster group using the following
    command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令将新实例添加到新创建的集群组：
- en: '[PRE28]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: After this setup is done, we need to take care of the distributed OSGi service.
    For this, you will create three different bundles, where the first will contain
    the service interface, the second will contain the service implementation that
    is located on one node, and the third will contain the consuming bundle.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此设置后，我们需要注意分布式OSGi服务。为此，您将创建三个不同的包，其中第一个将包含服务接口，第二个将包含位于一个节点上的服务实现，第三个将包含消费包。
- en: 'The following diagram shows this setup:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了此设置：
- en: '![How to do it…](img/5081OS_06_13.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/5081OS_06_13.jpg)'
- en: First, we need to install the required feature. For this, we will install the
    `cellar-dosgi` feature on each node using the following command. By default, all
    Cellar features are blacklisted.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要安装所需的功能。为此，我们将使用以下命令在每个节点上安装`cellar-dosgi`功能。默认情况下，所有Cellar功能都被列入黑名单。
- en: '[PRE29]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'After this feature is installed in the cluster, you will have a new command
    to use. The `cluster:service-list` command will list all services that are distributed
    throughout the cluster. The command when called right after installing the feature
    will give you the following output:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在集群中安装此功能后，您将有一个新的命令可以使用。`cluster:service-list`命令将列出集群中分布的所有服务。在安装功能后立即调用的命令将给出以下输出：
- en: '![How to do it…](img/5081OS_06_14.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作…](img/5081OS_06_14.jpg)'
- en: Producing a service bundle
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生成服务包
- en: 'After this setup, we will need a bundle that provides a service that is available
    to remote clients. For this, we create a simple service that returns a random
    message. This can be done as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此设置完成后，我们需要一个提供远程客户端可用服务的包。为此，我们创建一个简单的服务，该服务返回一个随机消息。可以按照以下方式完成：
- en: 'To register this service, we will use the following `blueprint.xml` file:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注册此服务，我们将使用以下`blueprint.xml`文件：
- en: '[PRE30]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Install the `chapter6-recipe3-interface` bundle from the code bundle on both
    cluster groups using the following commands:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从代码包中安装`chapter6-recipe3-interface`包到两个集群组：
- en: '[PRE31]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'After this, install the `chapter6-recipe3-producer` bundle from the code bundle
    on the second group, `second-cluster`, using the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令从代码包中在第二个组`second-cluster`上安装`chapter6-recipe3-producer`包：
- en: '[PRE32]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The freshly-installed bundles need to be started. For easy finding of these
    installed bundles, issue a `bundle-list` command with the `grep` command, as shown
    in the following command:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新安装的包需要启动。为了方便找到这些已安装的包，使用带有`grep`命令的`bundle-list`命令，如下所示：
- en: '[PRE33]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This results in the following output:'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE34]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now that you have found the corresponding bundle ID, just issue a start command
    for it:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经找到了相应的包ID，只需为它发出一个启动命令：
- en: '[PRE35]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'A quick use of the `list` command will give you the bundle listing of the node,
    showing the freshly-installed and running bundle `chapter6-recipe3-interface`.
    This is shown in the following screenshot:'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`list`命令的快速使用将为您提供节点捆绑包列表，显示新安装并运行的捆绑包`chapter6-recipe3-interface`。如下截图所示：
- en: '![Producing a service bundle](img/5081OS_06_16.jpg)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![生成服务捆绑包](img/5081OS_06_16.jpg)'
- en: 'Now that we have checked the consuming side, we need to make sure the sending
    side is running. We need to look for the bundle that we just installed. This can
    be done using the following command:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了消费端，我们需要确保发送端正在运行。我们需要查找我们刚刚安装的捆绑包。这可以通过以下命令完成：
- en: '[PRE36]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This results in the following output:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE37]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can start the bundle with the following command:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令启动捆绑包：
- en: '[PRE38]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'After this bundle is started, we can check with the `cluster:service-list`
    command, called from the root bundle, for services available to the cluster. The
    result of this is as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动此捆绑包之后，我们可以通过从根捆绑包调用的`cluster:service-list`命令来检查集群中可用的服务。此操作的结果如下所示：
- en: '![Producing a service bundle](img/5081OS_06_17.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![生成服务捆绑包](img/5081OS_06_17.jpg)'
- en: Service consuming bundle
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务消费捆绑包
- en: 'As the service is now available throughout the cluster, the consuming bundle
    can be installed on the main cluster and will consume this service. Consider the
    following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 由于服务现在在整个集群中可用，消费捆绑包可以安装到主集群并消费此服务。考虑以下代码：
- en: '[PRE39]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The consuming bundle retrieves the service reference from the registry and uses
    it. The consuming class is started with the `init-method` call.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 消费捆绑包从注册表中检索服务引用并使用它。消费类通过`init-method`调用启动。
- en: 'The interface bundle is already installed because we have already issued the
    `cluster:bundle-install` command for it. Now, just install the `consumer` bundle
    on the root node, using the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接口捆绑包已经安装，因为我们已经为它发出了`cluster:bundle-install`命令。现在，只需使用以下命令在根节点上安装`consumer`捆绑包：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, start the `consumer` bundle by issuing the following command; you might
    be required to change the bundle ID:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过以下命令启动`consumer`捆绑包；您可能需要更改捆绑包ID：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You can start the bundle using the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令启动捆绑包：
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if you started the second node in a separate terminal, you will gain
    the most from this, as you'll see both nodes receiving the messages from the sender.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果您在单独的终端中启动了第二个节点，这将使您从中获得最大收益，因为您将看到两个节点都从发送者那里接收消息。
- en: How it works…
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的……
- en: By default, Cellar DOSGi doesn't share any service throughout the cluster. A
    service meant to be used in a cluster environment and to be bound to a dedicated
    cluster node will require special handling on the service. You might have noticed
    the extra service property on the `MessageService` registration. The property
    entry, `service.exported.interfaces`, marks this service to be exported throughout
    the cluster. Cellar will create a proxy for the remote service on the nodes not
    containing the actual service.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Cellar DOSGi不会在整个集群中共享任何服务。一个打算在集群环境中使用并绑定到专用集群节点的服务需要在服务上进行特殊处理。您可能已经注意到了`MessageService`注册上的额外服务属性。属性条目`service.exported.interfaces`标记此服务将在整个集群中导出。Cellar将在不包含实际服务的节点上为远程服务创建代理。
- en: Why did we need the extra node and group? As Apache Karaf Cellar is for provisioning
    bundles across a cluster group, this will result in spreading all bundles across
    the same group. While running services across a cluster actually needs the separation
    of bundles across the cluster, this results in actually separating nodes with
    explicit groups again.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们需要额外的节点和组？因为Apache Karaf Cellar是为了在集群组中提供捆绑包，这将导致所有捆绑包都在同一组中分散。而实际上，在集群中运行服务需要将捆绑包在集群中分离，这又导致节点通过显式组再次分离。
- en: Take a look at the following screenshot; it sums up the communication ways within
    one cluster group. Installation of one bundle throughout the cluster is either
    achieved through the commands mentioned previously or by just installing this
    bundle on **node 1**. This *state* of a new bundle will be synchronized throughout
    the cluster group unless this explicit bundle is blacklisted. Another way of disabling
    this automatic synchronization throughout the cluster is by using a management
    node. A management node requires one *master* node within the cluster group that
    manages the installation of the features across the cluster. This works contrary
    to the default setup and idea behind the *all-knowing* cluster *brain*. For more
    details, check out *Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下截图，它总结了集群组内的通信方式。在整个集群中安装一个包，可以通过之前提到的命令实现，或者只需在**节点1**上安装此包。新包的此**状态**将在整个集群组中同步，除非此包被明确列入黑名单。另一种在整个集群中禁用此自动同步的方法是使用管理节点。管理节点需要在集群组内有一个**主节点**来管理整个集群的功能安装。这与默认设置和“无所不知”的集群**大脑**背后的理念相反。更多详情，请参阅《学习Karaf
    Cellar》，作者**让-巴蒂斯特·奥诺弗雷**，**Packt出版社**。
- en: '![How it works…](img/5081OS_06_19.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/5081OS_06_19.jpg)'
