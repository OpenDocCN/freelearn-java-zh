- en: Chapter 6. Distributing a Clustered Container with Apache Karaf Cellar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Karaf Cellar modules in Apache Karaf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Apache Karaf Cellar commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a distributed architecture with Cellar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter shows how to install and use Apache Karaf Cellar with Apache Karaf.
    Apache Karaf Cellar's main aim is to enable a cluster-wide provisioning for Apache
    Karaf. This provisioning can be controlled with white and black lists for bundles,
    features, and configurations. Besides these core features, it is also possible
    to use Cellar to cluster in or with a cloud and send events through the cluster.
    It is also possible to have distributed OSGi services with Cellar.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are looking for more insight on how Apache Karaf Cellar works, take a
    look at *Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Karaf Cellar modules in Apache Karaf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, we will need to add the ability to cluster multiple Karaf instances.
    For this, Cellar needs to be installed on Apache Karaf first. For this, the required
    feature repository URL needs to be added, which can be done using the following
    convenient method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: After this, all the possible Cellar features of the latest version are available
    for installation. In our case, this is Cellar 3.0.0\. Besides installing Cellar,
    it is required to have multiple Karaf instances running for verification of the
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to set up Cellar and create multiple Karaf instances on
    the same machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the required `cellar` feature with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will install all the required Cellar bundles so that we have the basic
    setup to run a Karaf cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, it''s important to have another node for clustering. For this, we will
    set up a second Karaf instance on the same machine. For this, you''ll find the
    following commands useful. So, create another Karaf instance using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new Karaf instance that looks like a freshly extracted Apache
    Karaf ZIP archive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second instance is created; now, we need to start this second instance.
    There is a command in Karaf to do so, which is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This just started the second instance, which can now be connected to, by either
    an external SSH client or through Karaf. This can be done using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'With this, you are connected to the second instance of Karaf. We need to add
    the `cellar` repository to this instance too. This can be done using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the `cellar` feature repository becomes available to the second instance,
    the `cellar` feature is ready to be installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This installs the required bundles; therefore, we have two nodes ready to be
    clustered. As the Cellar cluster works with auto discovery through multicast,
    both nodes should be able to find each other.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As Cellar uses Hazelcast as its underlying cluster technology, the multicast
    is handled by Hazelcast. More information about Hazelcast is available at [http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html](http://www.hazelcast.org/docs/3.0/manual/html/ch12s02.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'These nodes can be checked by listing the available groups using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This will list the available groups together with the nodes contained in each
    group. As there has been no configuration for any group yet, the default group
    contains both nodes—the root Karaf instance and the second instance. The following
    screenshot shows the execution of the `group-list` command, which is an alias
    of the `cluster:group-list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After the installation of Cellar on both nodes, Cellar created a default group
    on both the nodes, and therefore, both these nodes are automatically added to
    this default group. The basis of Cellar is a Hazelcast-based memory cluster configuration,
    which replicates itself to all known nodes in the cluster. Hazelcast itself scans
    the network via multicast for other instances of itself. Hazelcast can be configured
    to use other means of network connection technologies. Apache Karaf Cellar uses
    this behavior to synchronize the cluster configuration over the running nodes.
  prefs: []
  type: TYPE_NORMAL
- en: A Cellar cluster is defined by a group, where each group consists of a list
    of nodes. For each cluster group, there is a Hazelcast topic, which is the communication
    backend. With this topic, all nodes within the same group communicate changes
    in bundles, features, or configuration. Additionally, services and events are
    also communicated through this topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to this topic, the configuration of all nodes is combined to a shared cluster
    configuration, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Apache Karaf Cellar commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As with a lot of other features of Apache Karaf, Cellar provides a couple of
    commands to administer an Apache Karaf Cellar cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you follow the basic setup of the *Installing Apache Karaf Cellar
    modules in Apache Karaf* recipe to run a simple Apache Karaf cluster.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have two different kinds of commands to work with the Apache Karaf Cellar
    cluster: basic commands to manage and configure the cluster and some more enhanced
    commands for extra management.'
  prefs: []
  type: TYPE_NORMAL
- en: Group commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After installing Cellar, there is already a default group available that contains
    all the future available nodes per default. Different tasks can be performed using
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create a new group and add both nodes to it using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous command creates a new cluster group called `main-cluster`. This
    group contains no nodes in it. Check using the `group-list` command to see how
    the cluster looks right now. The result of this command can be seen in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Group commands](img/5081OS_06_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The newly created group is still empty. Therefore, we need to add some nodes.
    Adding nodes to a cluster can be done in different ways. The following command
    is an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the complete syntax for the preceding command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'It picks a number of nodes from the given source group and transfers these
    nodes to the target group. If no number is given, one is picked from the source
    group. The execution and what it looks like is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Group commands](img/5081OS_06_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Another way of adding a node to a cluster group is to use the `join` command.
    With this command, you also have the possibility to add a node to more than one
    group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax of the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command, including its output, is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Group commands](img/5081OS_06_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'As you can tell, the second node is now contained in both cluster groups, though
    we don''t want to have this node in the default group anymore. For this, we need
    to remove it from this group by using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The syntax for the preceding command is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The command returns a list of the current state of the groups, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Group commands](img/5081OS_06_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'This empty group can be deleted using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When checking with the `cluster:group-list` command, you'll see that the default
    group can't be deleted. This is because of its default character. So, if you create
    a new test group and delete it right away, you will see that the test group has
    been created and deleted with the commands.
  prefs: []
  type: TYPE_NORMAL
- en: The node commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is a brief introduction of the node commands.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to the `group-list` command, the `node-list` command will list all
    available nodes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The node commands](img/5081OS_06_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Similar to a network ping, it is possible to ping a cluster node to test the
    network accessibility of this node. This can be done using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The node commands](img/5081OS_06_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Cluster configuration commands
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, the previous commands have been used for administration of the cluster
    itself, by either adding or removing cluster groups and configuring the nodes
    of one cluster group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last administrational command is the `cluster:sync` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will force a synchronization of all nodes in the cluster, as shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Cluster configuration commands](img/5081OS_06_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now, the following commands are used to configure the content of the cluster.
    For example, it is possible to install features and bundles across the cluster.
    To list the currently available features for one cluster group, just issue the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Cluster configuration commands](img/5081OS_06_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The preceding command also works for listing the bundles installed across the
    cluster:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This results in a list of bundles available to the cluster group. The output
    will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For further bundle interaction in the cluster, use the following special bundle
    commands for clusters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These bundle commands are similar to the standard Apache Karaf bundle commands.
    The scope of these commands is to distribute the command within the cluster.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For features, the commands are similar to the `cluster:bundle` commands. Commands
    that are possible for features are also available to be run in the cluster scope:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `cluster:feature` commands will work on the cluster as for a standalone
    Karaf instance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Similar to the bundle and feature commands, the configuration commands can
    also alter, set, or unset configurations which are valid throughout the cluster.
    Consider the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output of the preceding command is the same as that of the `config:list`
    command, restricted only to the configurations that are valid for the cluster
    group, as can be seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Cluster configuration commands](img/5081OS_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'In general, the cluster configuration commands have the following pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding commands give the possibility to edit, delete, or add a configuration,
    which is then automatically shared throughout the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As seen, Apache Karaf Cellar provides a couple of specialized cluster commands.
    This functionality is based on the fact that all of the configurations, installed
    bundles, and installed features are shared throughout the cluster. To have a dedicated
    control over this information, it is possible to whitelist or blacklist certain
    information. This information is defined in two configuration files, `org.apache.karaf.cellar.node.cfg`
    for node configurations and `org.apache.karaf.cellar.groups.cfg` containing the
    group configuration information.
  prefs: []
  type: TYPE_NORMAL
- en: In general, it is better to work with features instead of bundles when deploying
    applications throughout the cluster. This makes it easier to filter whitelisted
    and blacklisted bundles or features for certain cluster nodes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*, covers
    the insights of Cellar in greater detail compared to what can be done with this
    Cookbook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and deploying a distributed architecture with Cellar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe describes how to build a clustered application and the transparent
    usage of services throughout the cluster. We will show you how to create a Cellar-based
    **Distributed OSGi** (**DOSGi**) application and how you can profit from Apache
    Karaf Cellar.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is essential that you finish at least the *Installing Apache Karaf Cellar
    modules in Apache Karaf* recipe to have a clustered environment for testing. You
    should also be familiar with the cluster commands presented to you in the *Using
    Apache Karaf Cellar commands* recipe. The sources used in this recipe can be found
    at [https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3](https://github.com/jgoodyear/ApacheKarafCookbook/tree/master/chapter6/chapter6-recipe3).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we will need an additional cluster group with an extra node.
    For this, we will create an additional instance first, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Start this instance and install the `cellar` feature in it as described in
    the *Installing Apache Karaf Cellar modules in Apache Karaf* recipe. This instance
    will be added to a new group. First, create a new cluster group using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the new instance to the newly created cluster group using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: After this setup is done, we need to take care of the distributed OSGi service.
    For this, you will create three different bundles, where the first will contain
    the service interface, the second will contain the service implementation that
    is located on one node, and the third will contain the consuming bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows this setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, we need to install the required feature. For this, we will install the
    `cellar-dosgi` feature on each node using the following command. By default, all
    Cellar features are blacklisted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'After this feature is installed in the cluster, you will have a new command
    to use. The `cluster:service-list` command will list all services that are distributed
    throughout the cluster. The command when called right after installing the feature
    will give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/5081OS_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Producing a service bundle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After this setup, we will need a bundle that provides a service that is available
    to remote clients. For this, we create a simple service that returns a random
    message. This can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To register this service, we will use the following `blueprint.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `chapter6-recipe3-interface` bundle from the code bundle on both
    cluster groups using the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this, install the `chapter6-recipe3-producer` bundle from the code bundle
    on the second group, `second-cluster`, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The freshly-installed bundles need to be started. For easy finding of these
    installed bundles, issue a `bundle-list` command with the `grep` command, as shown
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now that you have found the corresponding bundle ID, just issue a start command
    for it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A quick use of the `list` command will give you the bundle listing of the node,
    showing the freshly-installed and running bundle `chapter6-recipe3-interface`.
    This is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Producing a service bundle](img/5081OS_06_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now that we have checked the consuming side, we need to make sure the sending
    side is running. We need to look for the bundle that we just installed. This can
    be done using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'This results in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'We can start the bundle with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'After this bundle is started, we can check with the `cluster:service-list`
    command, called from the root bundle, for services available to the cluster. The
    result of this is as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Producing a service bundle](img/5081OS_06_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Service consuming bundle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the service is now available throughout the cluster, the consuming bundle
    can be installed on the main cluster and will consume this service. Consider the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The consuming bundle retrieves the service reference from the registry and uses
    it. The consuming class is started with the `init-method` call.
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface bundle is already installed because we have already issued the
    `cluster:bundle-install` command for it. Now, just install the `consumer` bundle
    on the root node, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, start the `consumer` bundle by issuing the following command; you might
    be required to change the bundle ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You can start the bundle using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if you started the second node in a separate terminal, you will gain
    the most from this, as you'll see both nodes receiving the messages from the sender.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, Cellar DOSGi doesn't share any service throughout the cluster. A
    service meant to be used in a cluster environment and to be bound to a dedicated
    cluster node will require special handling on the service. You might have noticed
    the extra service property on the `MessageService` registration. The property
    entry, `service.exported.interfaces`, marks this service to be exported throughout
    the cluster. Cellar will create a proxy for the remote service on the nodes not
    containing the actual service.
  prefs: []
  type: TYPE_NORMAL
- en: Why did we need the extra node and group? As Apache Karaf Cellar is for provisioning
    bundles across a cluster group, this will result in spreading all bundles across
    the same group. While running services across a cluster actually needs the separation
    of bundles across the cluster, this results in actually separating nodes with
    explicit groups again.
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the following screenshot; it sums up the communication ways within
    one cluster group. Installation of one bundle throughout the cluster is either
    achieved through the commands mentioned previously or by just installing this
    bundle on **node 1**. This *state* of a new bundle will be synchronized throughout
    the cluster group unless this explicit bundle is blacklisted. Another way of disabling
    this automatic synchronization throughout the cluster is by using a management
    node. A management node requires one *master* node within the cluster group that
    manages the installation of the features across the cluster. This works contrary
    to the default setup and idea behind the *all-knowing* cluster *brain*. For more
    details, check out *Learning Karaf Cellar*, *Jean-Baptiste Onofré*, *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5081OS_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
