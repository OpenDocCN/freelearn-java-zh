["```java\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\n    testImplementation 'org.assertj:assertj-core:3.22.0'\n    testImplementation 'org.mockito:mockito-core:4.8.0'\n    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'\ntestImplementation 'com.github.database-rider:rider-core:1.33.0'\n    testImplementation 'com.github.database-rider:rider-junit5:1.33.0'\n    implementation 'org.postgresql:postgresql:42.5.0'\n}\n```", "```java\n    @DBRider\n    ```", "```java\n    @DBUnit(caseSensitiveTableNames = true,\n    ```", "```java\n            caseInsensitiveStrategy= Orthography.LOWERCASE)\n    ```", "```java\n    public class WordRepositoryPostgresTest {\n    ```", "```java\n    }\n    ```", "```java\n        @Test\n    ```", "```java\n        void fetchesWord()  {\n    ```", "```java\n        }\n    ```", "```java\n    @DBRider\n    ```", "```java\n    public class WordRepositoryPostgresTest {\n    ```", "```java\n        private DataSource dataSource;\n    ```", "```java\n        private final ConnectionHolder connectionHolder\n    ```", "```java\n                    = () -> dataSource.getConnection();\n    ```", "```java\n    }\n    ```", "```java\n        @BeforeEach\n    ```", "```java\n        void setupConnection() {\n    ```", "```java\n            var ds = new PGSimpleDataSource();\n    ```", "```java\n            ds.setServerNames(new String[]{\"localhost\"});\n    ```", "```java\n            ds.setDatabaseName(\"wordzdb\");\n    ```", "```java\n            ds.setCurrentSchema(\"public\");\n    ```", "```java\n            ds.setUser(\"ciuser\");\n    ```", "```java\n            ds.setPassword(\"cipassword\");\n    ```", "```java\n            this.dataSource = ds;\n    ```", "```java\n        }\n    ```", "```java\n    create user ciuser with password 'cipassword';\n    ```", "```java\n    create database wordzdb;\n    ```", "```java\n        @Test\n    ```", "```java\n        public void fetchesWord()  {\n    ```", "```java\n            String actual = \"\";\n    ```", "```java\n            assertThat(actual).isEqualTo(\"ARISE\");\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void fetchesWord()  {\n    ```", "```java\n            WordRepository repository\n    ```", "```java\n                     = new WordRepositoryPostgres();\n    ```", "```java\n            String actual = \"\";\n    ```", "```java\n            assertThat(actual).isEqualTo(\"ARISE\");\n    ```", "```java\n        }\n    ```", "```java\npackage com.wordz.adapters.db;\nimport com.wordz.domain.WordRepository;\npublic class WordRepositoryPostgres implements\n                                     WordRepository {\n}\n```", "```java\n    public class WordRepositoryPostgres implements WordRepository {\n    ```", "```java\n        @Override\n    ```", "```java\n        public String fetchWordByNumber(int number) {\n    ```", "```java\n            return null;\n    ```", "```java\n        }\n    ```", "```java\n    @Override\n    ```", "```java\n        public int highestWordNumber() {\n    ```", "```java\n            return 0;\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void fetchesWord()  {\n    ```", "```java\n            WordRepository repository\n    ```", "```java\n                        = new WordRepositoryPostgres();\n    ```", "```java\n            String actual =\n    ```", "```java\n                   repository.fetchWordByNumber(27);\n    ```", "```java\n            assertThat(actual).isEqualTo(\"ARISE\");\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        public void fetchesWord()  {\n    ```", "```java\n            WordRepository repository\n    ```", "```java\n                  = new\n    ```", "```java\n                    WordRepositoryPostgres(dataSource);\n    ```", "```java\n            String actual = adapter.fetchWordByNumber(27);\n    ```", "```java\n            assertThat(actual).isEqualTo(\"ARISE\");\n    ```", "```java\n        }\n    ```", "```java\n    public WordRepositoryPostgres(DataSource dataSource){\n        // Not implemented\n    }\n```", "```java\n    {\n    ```", "```java\n      \"word\": [\n    ```", "```java\n        {\n    ```", "```java\n          \"word_number\": 27,\n    ```", "```java\n          \"word\": \"ARISE\"\n    ```", "```java\n        }\n    ```", "```java\n      ]\n    ```", "```java\n    }\n    ```", "```java\n        @Test\n    ```", "```java\n        @DataSet(\"adapters/data/wordTable.json\")\n    ```", "```java\n        public void fetchesWord()  {\n    ```", "```java\n            WordRepository repository\n    ```", "```java\n                = new WordRepositoryPostgres(dataSource);\n    ```", "```java\n            String actual =\n    ```", "```java\n                        repository.fetchWordByNumber(27);\n    ```", "```java\n            assertThat(actual).isEqualTo(\"ARISE\");\n    ```", "```java\n        }\n    ```", "```java\n    create table word (word_number int primary key,\n    ```", "```java\n    word char(5));\n    ```", "```java\n    grant select, insert, update, delete on all tables in schema public to ciuser;\n    ```", "```java\ndependencies {\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'\n    testImplementation 'org.assertj:assertj-core:3.22.0'\n    testImplementation 'org.mockito:mockito-core:4.8.0'\n    testImplementation 'org.mockito:mockito-junit-jupiter:4.8.0'\n    testImplementation 'com.github.database-rider:rider-core:1.35.0'\n    testImplementation 'com.github.database-rider:rider-junit5:1.35.0'\n    implementation 'org.postgresql:postgresql:42.5.0'\n    implementation 'org.jdbi:jdbi3-core:3.34.0'\n}\n```", "```java\n    public class WordRepositoryPostgres\n    ```", "```java\n                             implements WordRepository {\n    ```", "```java\n        private final Jdbi jdbi;\n    ```", "```java\n        public WordRepositoryPostgres(DataSource\n    ```", "```java\n                                          dataSource){\n    ```", "```java\n            jdbi = Jdbi.create(dataSource);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n       private static final String SQL_FETCH_WORD_BY_NUMBER\n    ```", "```java\n         = \"select word from word where \"\n    ```", "```java\n                          + \"word_number=:wordNumber\";\n    ```", "```java\n    @Override\n    ```", "```java\n    public String fetchWordByNumber(int wordNumber) {\n    ```", "```java\n        String word = jdbi.withHandle(handle -> {\n    ```", "```java\n            var query =\n    ```", "```java\n             handle.createQuery(SQL_FETCH_WORD_BY_NUMBER);\n    ```", "```java\n            query.bind(\"wordNumber\", wordNumber);\n    ```", "```java\n            return query.mapTo(String.class).one();\n    ```", "```java\n        });\n    ```", "```java\n        return word;\n    ```", "```java\n    }\n    ```", "```java\nCREATE TABLE game (\n    player_name character varying NOT NULL,\n    word character(5),\n    attempt_number integer DEFAULT 0,\n    is_game_over boolean DEFAULT false\n);\n```"]