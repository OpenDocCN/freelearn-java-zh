["```java\n(...)\n\n<dependency>\n    <groupId>com.netflix.hystrix</groupId>\n    <artifactId>hystrix-core</artifactId>\n    <version>${version.hystrix}</version> </dependency>\n\n(...)\n```", "```java\n(...)\n\n@ApplicationScoped\npublic class PricingProxy {\n\n    (...)\n\n //1\n private class GetPriceCommand extends HystrixCommand<Response> {\n\n        private final String itemId;\n\n //2\n public GetPriceCommand(String itemId) {\n            //3\n super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"pricing-service\")); this.itemId = itemId;\n        }\n\n @Override\n        //4\n        protected Response run() {\n            //5\n Client client = ClientBuilder.newClient();\n            WebTarget target = client.target(targetPath + \"/price/\" + itemId);\n            return target.request(MediaType.APPLICATION_JSON).get();\n        }\n    }\n}\n```", "```java\n(...)\n\n@ApplicationScoped\npublic class PricingProxy {\n\n    private final String targetPath = System.getProperty(\"proxy.pricing.url\"); //1\n    public Price getPrice(String itemId){\n        //2\n return new GetPriceCommand(itemId).execute().readEntity(Price.class);\n    }\n\n    (...)\n}\n\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport org.packt.swarm.petstore.pricing.model.Price;\n\nimport javax.enterprise.context.ApplicationScoped;\nimport javax.persistence.EntityManager;\nimport javax.persistence.PersistenceContext;\nimport java.util.List;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.LockSupport;\n\n@ApplicationScoped\npublic class PricingService {\n\n    @PersistenceContext(unitName = \"PricingPU\")\n    private EntityManager em;\n\n    public Price findByItemId(String itemId) {\n //1\n LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(5));\n        return em.createNamedQuery(\"Price.findByItemId\", Price.class).setParameter(\"itemId\", itemId).getSingleResult();\n    }\n}\n```", "```java\n(...)\nprivate class GetPriceCommand extends HystrixCommand<Response> {\n\n    private final String itemId;\n\n    public GetPriceCommand(String itemId) {\n //1\n super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"pricing-service\"))\n .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n        //2\n .withExecutionTimeoutInMilliseconds(100)));\n        this.itemId = itemId;\n    }\n\n    @Override\n    protected Response run() {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(targetPath + \"/price/\" + itemId);\n\n        return target.request(MediaType.APPLICATION_JSON).get();\n    }\n}\n(...)\n```", "```java\n(...)private class GetPriceCommand extends HystrixCommand<Response> {\n\n    private final String itemId;\n\n    public GetPriceCommand(String itemId) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(\"pricing-service\"))\n//1           .andThreadPoolPropertiesDefaults(HystrixThreadPoolProperties.Setter().withCoreSize(3));\n        this.itemId = itemId;\n    }\n\n    @Override\n    protected Response run() {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(targetPath + \"/price/\" + itemId);\n        return target.request(MediaType.APPLICATION_JSON).get();\n    }\n}\n(...)\n```", "```java\n(...)\nprivate class CreatePaymentCommand extends HystrixCommand<Response> {\n\n    private final Payment payment;\n\n    public CreatePaymentCommand(Payment payment) {\n        super(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(SERVICE_NAME))\n                              .andCommandPropertiesDefaults(HystrixCommandProperties.Setter()\n                                      .withExecutionTimeoutInMilliseconds(100)));\n        this.payment = payment;\n    }\n\n    @Override\n    protected Response run() {\n        Client client = ClientBuilder.newClient();\n        WebTarget target = client.target(targetPath + \"/payment\");\n        return target.request(MediaType.APPLICATION_JSON).post(Entity.json(payment));\n    }\n\n @Override\n    //1\n    protected Response getFallback() {        //2\n return Response.status(Response.Status.SERVICE_UNAVAILABLE).build();\n    }\n}\n\n(...)\n```", "```java\npublic String buy(int customerId){\n    Cart cart = cartProxy.getCart(customerId);\n\n    Order order = createOrderFromCart(customerId, cart);\n    int orderId  = orderProxy.createOrder(order);\n\n    Payment payment = new Payment();\n    payment.setMerchantId(Constants.MERCHANT_ID);\n    payment.setDescription(String.format(\"ORDER_ID: %s\", orderId));\n    payment.setAmount(order.getPrice());\n\n    Response response =  paymentProxy.createPayment(payment);\n\n if(response.getStatus() == Response.Status.SERVICE_UNAVAILABLE.getStatusCode()){\n throw new RuntimeException(\"Payment service unreachable\");\n    }\n\n    return (String) response.readEntity(String.class);\n}\n```"]