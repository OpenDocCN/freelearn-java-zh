["```java\n    =========================\n    CONDITIONS EVALUATION REPORT\n    =========================\n\n    Positive matches:\n    -----------------\n    ...\n    DataSourceAutoConfiguration\n          - @ConditionalOnClass classes found:    \n            javax.sql.DataSource,org.springframework.jdbc.\n            datasource.embedded.EmbeddedDatabaseType   \n            (OnClassCondition)\n            ...\n\n    Negative matches:\n    -----------------\n    ...\n    GsonAutoConfiguration\n          - required @ConditionalOnClass classes not found:  \n          com.google.gson.Gson (OnClassCondition)\n          ...\n```", "```java\n@Configuration \n@ConditionalOnClass(Gson.class) \npublic class GsonAutoConfiguration { \n\n  @Bean \n  @ConditionalOnMissingBean \n  public Gson gson() { \n    return new Gson(); \n  } \n\n} \n```", "```java\ninclude 'db-count-starter' \n```", "```java\napply plugin: 'java' \n\nrepositories { \n  mavenCentral() \n  maven { url \"https://repo.spring.io/snapshot\" } \n  maven { url \"https://repo.spring.io/milestone\" } \n\n} \n\ndependencies { \n  compile(\"org.springframework.boot:spring-boot:2.0.0.BUILD-SNAPSHOT\")  \n  compile(\"org.springframework.data:spring-data-commons:2.0.2.RELEASE\") \n} \n```", "```java\npublic class DbCountRunner implements CommandLineRunner { \n    protected final Log logger = LogFactory.getLog(getClass()); \n\n    private Collection<CrudRepository> repositories; \n\n    public DbCountRunner(Collection<CrudRepository> repositories) { \n        this.repositories = repositories; \n    } \n\n    @Override \n    public void run(String... args) throws Exception { \n        repositories.forEach(crudRepository -> \n            logger.info(String.format(\"%s has %s entries\", \n                getRepositoryName(crudRepository.getClass()), \n                crudRepository.count()))); \n\n    } \n\n    private static String \n            getRepositoryName(Class crudRepositoryClass) { \n        for(Class repositoryInterface : \n                crudRepositoryClass.getInterfaces()) { \n            if (repositoryInterface.getName(). \n                    startsWith(\"com.example.bookpub.repository\")) { \n                return repositoryInterface.getSimpleName(); \n            } \n        } \n        return \"UnknownRepository\"; \n    } \n} \n```", "```java\n@Configuration \npublic class DbCountAutoConfiguration { \n    @Bean \n    public DbCountRunner dbCountRunner\n               (Collection<CrudRepository> repositories) { \n        return new DbCountRunner(repositories); \n    } \n}\n```", "```java\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\ncom.example.bookpubstarter.dbcount.DbCountAutoConfiguration \n```", "```java\ncompile project(':db-count-starter') \n```", "```java\n    2017-12-16 INFO com.example.bookpub.StartupRunner        : Welcome to the Book Catalog System!\n    2017-12-16 INFO c.e.b.dbcount.DbCountRunner              : AuthorRepository has 1 entries\n    2017-12-16 INFO c.e.b.dbcount.DbCountRunner              : PublisherRepository has 1 entries\n    2017-12-16 INFO c.e.b.dbcount.DbCountRunner              : BookRepository has 1 entries\n    2017-12-16 INFO c.e.b.dbcount.DbCountRunner              : ReviewerRepository has 0 entries\n    2017-12-16 INFO com.example.bookpub.BookPubApplication   : Started BookPubApplication in 8.528 seconds (JVM running for 9.002)\n    2017-12-16 INFO com.example.bookpub.StartupRunner        : Number of books: 1\n\n```", "```java\n@Bean \n@ConditionalOnMissingBean \npublic DbCountRunner \n   dbCountRunner(Collection<CrudRepository> repositories) { \n  return new DbCountRunner(repositories); \n} \n```", "```java\ncompile(\"org.springframework.boot:spring-boot-autoconfigure:2.0.0.BUILD-SNAPSHOT\")\n```", "```java\nDbCountAutoConfiguration#dbCountRunner\n - @ConditionalOnMissingBean (types: com.example.bookpubstarter.dbcount.DbCountRunner; SearchStrategy: all) found no beans (OnBeanCondition)\n```", "```java\nprotected final Log logger = LogFactory.getLog(getClass()); \n@Bean \npublic DbCountRunner dbCountRunner\n                     (Collection<CrudRepository> repositories) { \n  return new DbCountRunner(repositories) { \n    @Override \n    public void run(String... args) throws Exception { \n      logger.info(\"Manually Declared DbCountRunner\"); \n    } \n  }; \n} \n```", "```java\nDbCountAutoConfiguration#dbCountRunner\n - @ConditionalOnMissingBean (types: com.example.bookpubstarter.dbcount.DbCountRunner; SearchStrategy: all) found the following [dbCountRunner] (OnBeanCondition)\n\n2017-12-16 INFO com.example.bookpub.BookPubApplication$1    : Manually Declared DbCountRunner\n```", "```java\n#org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n#com.example.bookpubstarter.dbcount.DbCountAutoConfiguration\n```", "```java\n@Target(ElementType.TYPE) \n@Retention(RetentionPolicy.RUNTIME) \n@Import(DbCountAutoConfiguration.class) \n@Documented \npublic @interface EnableDbCounting { \n} \n```", "```java\n@SpringBootApplication \n@EnableScheduling \n@EnableDbCounting \npublic class BookPubApplication { \n\n  public static void main(String[] args) { \n    SpringApplication.run(BookPubApplication.class, args); \n  } \n\n  @Bean \n  public StartupRunner schedulerRunner() { \n    return new StartupRunner(); \n  } \n} \n```", "```java\nc.e.b.dbcount.DbCountRunner         : AuthorRepository has 0 entries\nc.e.b.dbcount.DbCountRunner         : BookRepository has 0 entries\nc.e.b.dbcount.DbCountRunner         : PublisherRepository has 0 entries\nc.e.b.dbcount.DbCountRunner         : ReviewerRepository has 0 entries\ncom.example.bookpub.StartupRunner   : Welcome to the Book Catalog System!\ncom.example.bookpub.StartupRunner   : Number of books: 1  \n```"]