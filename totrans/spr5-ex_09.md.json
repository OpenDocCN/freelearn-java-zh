["```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-netflix-hystrix-stream</artifactId>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-stream-rabbit</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.turbine;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.turbine.stream.EnableTurbineStream;\n\n@EnableEurekaClient\n@EnableTurbineStream\n@SpringBootApplication\npublic class AirlineTurbineApplication {\n\n public static void main(String[] args) {\n    SpringApplication.run(AirlineTurbineApplication.class, args);\n }\n\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.hystrix.ui;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.hystrix.dashboard.EnableHystrixDashboard;\n\n@EnableEurekaClient\n@SpringBootApplication\n@EnableHystrixDashboard\npublic class HystrixApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(HystrixApplication.class, args);\n  }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.projectreactor.rabbitmq</groupId>\n  <artifactId>reactor-rabbitmq</artifactId>\n  <version>1.0.0.M1</version>\n</dependency>\n\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.mailservice.infra.rabbitmq;\n\n// imports are omitted\n\n@Configuration\npublic class RabbitMQConfiguration {\n\n  private final String pass;\n\n  private final String user;\n\n  private final String host;\n\n  private final Integer port;\n\n  private final String mailQueue;\n\n  public RabbitMQConfiguration(@Value(\"${spring.rabbitmq.password}\") String pass,\n      @Value(\"${spring.rabbitmq.username}\") String user,\n      @Value(\"${spring.rabbitmq.host}\") String host,\n      @Value(\"${spring.rabbitmq.port}\") Integer port,\n      @Value(\"${mail.queue}\") String mailQueue) {\n    this.pass = pass;\n    this.user = user;\n    this.host = host;\n    this.port = port;\n    this.mailQueue = mailQueue;\n  }\n\n  @Bean(\"springConnectionFactory\")\n  public ConnectionFactory connectionFactory() {\n    CachingConnectionFactory factory = new CachingConnectionFactory();\n    factory.setUsername(this.user);\n    factory.setPassword(this.pass);\n    factory.setHost(this.host);\n    factory.setPort(this.port);\n    return factory;\n  }\n\n  @Bean\n  public AmqpAdmin amqpAdmin(@Qualifier(\"springConnectionFactory\") ConnectionFactory connectionFactory) {\n    return new RabbitAdmin(connectionFactory);\n  }\n\n  @Bean\n  public TopicExchange emailExchange() {\n    return new TopicExchange(\"email\", true, false);\n  }\n\n  @Bean\n  public Queue mailQueue() {\n    return new Queue(this.mailQueue, true, false, false);\n  }\n\n  @Bean\n  public Binding mailExchangeBinding(Queue mailQueue) {\n    return BindingBuilder.bind(mailQueue).to(emailExchange()).with(\"*\");\n  }\n\n  @Bean\n  public Receiver receiver() {\n    val options = new ReceiverOptions();\n    com.rabbitmq.client.ConnectionFactory connectionFactory = new com.rabbitmq.client.ConnectionFactory();\n    connectionFactory.setUsername(this.user);\n    connectionFactory.setPassword(this.pass);\n    connectionFactory.setPort(this.port);\n    connectionFactory.setHost(this.host);\n    options.connectionFactory(connectionFactory);\n    return ReactorRabbitMq.createReceiver(options);\n  }\n\n}\n```", "```java\npackage springfive.airline.mailservice.domain;\n\nimport lombok.Data;\n\n@Data\npublic class Mail {\n\n  String from;\n\n  String to;\n\n  String subject;\n\n  String message;\n\n}\n```", "```java\npackage springfive.airline.mailservice.domain.service;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ReactiveHttpOutputMessage;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.reactive.function.BodyInserter;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.client.WebClient;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport springfive.airline.mailservice.domain.Mail;\nimport springfive.airline.mailservice.domain.service.data.SendgridMail;\n\n@Service\npublic class MailSender {\n\n  private final String apiKey;\n\n  private final String url;\n\n  private final WebClient webClient;\n\n  public MailSender(@Value(\"${sendgrid.apikey}\") String apiKey,\n      @Value(\"${sendgrid.url}\") String url,\n      WebClient webClient) {\n    this.apiKey = apiKey;\n    this.webClient = webClient;\n    this.url = url;\n  }\n\n  public Flux<Void> send(Mail mail){\n    final BodyInserter<SendgridMail, ReactiveHttpOutputMessage> body = BodyInserters\n      .fromObject(SendgridMail.builder().content(mail.getMessage()).from(mail.getFrom()).to(mail.getTo()).subject(mail.getSubject()).build());\n    return this.webClient.mutate().baseUrl(this.url).build().post()\n        .uri(\"/v3/mail/send\")\n        .body(body)\n        .header(\"Authorization\",\"Bearer \" + this.apiKey)\n        .header(\"Content-Type\",\"application/json\")\n        .retrieve()\n        .onStatus(HttpStatus::is4xxClientError, clientResponse ->\n            Mono.error(new RuntimeException(\"Error on send email\"))\n        ).bodyToFlux(Void.class);\n  }\n\n}\n```", "```java\npackage springfive.airline.mailservice.domain.service;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport java.io.IOException;\nimport javax.annotation.PostConstruct;\nimport lombok.extern.slf4j.Slf4j;\nimport lombok.val;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Service;\nimport reactor.rabbitmq.Receiver;\nimport springfive.airline.mailservice.domain.Mail;\n\n@Service\n@Slf4j\npublic class MailQueueConsumer {\n\n  private final MailSender mailSender;\n\n  private final String mailQueue;\n\n  private final Receiver receiver;\n\n  private final ObjectMapper mapper;\n\n  public MailQueueConsumer(MailSender mailSender, @Value(\"${mail.queue}\") String mailQueue,\n      Receiver receiver, ObjectMapper mapper) {\n    this.mailSender = mailSender;\n    this.mailQueue = mailQueue;\n    this.receiver = receiver;\n    this.mapper = mapper;\n  }\n\n  @PostConstruct\n  public void startConsume() {\n    this.receiver.consumeAutoAck(this.mailQueue).subscribe(message -> {\n      try {\n        val mail = this.mapper.readValue(new String(message.getBody()), Mail.class);\n        this.mailSender.send(mail).subscribe(data ->{\n          log.info(\"Mail sent successfully\");\n        });\n      } catch (IOException e) {\n        throw new RuntimeException(\"error on deserialize object\");\n      }\n    });\n  }\n\n}\n```", "```java\npackage springfive.airline.mailservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.hystrix.EnableHystrix;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@EnableHystrix\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class MailServiceApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(MailServiceApplication.class, args);\n  }\n\n}\n```", "```java\n  <dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n\n  <dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-core</artifactId>\n  </dependency>\n\n  <dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-config</artifactId>\n  </dependency>\n```", "```java\npackage springfive.airline.authservice.infra.security;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport springfive.airline.authservice.service.CredentialsDetailsService;\n\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n  private final PasswordEncoder passwordEncoder;\n\n  private final CredentialsDetailsService credentialUserDetails;\n\n  public SecurityConfig(PasswordEncoder passwordEncoder,\n      CredentialsDetailsService credentialUserDetails) {\n    this.passwordEncoder = passwordEncoder;\n    this.credentialUserDetails = credentialUserDetails;\n  }\n\n  @Override\n  @Autowired\n protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n auth.userDetailsService(this.credentialUserDetails).passwordEncoder(this.passwordEncoder);\n  }\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n http.csrf().disable()\n .authorizeRequests()\n .antMatchers(\"/login\", \"/**/register/**\").permitAll()\n .anyRequest().authenticated()\n .and()\n .formLogin().permitAll();\n  }\n\n}\n```", "```java\npackage springfive.airline.authservice.service;\n\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Component;\nimport springfive.airline.authservice.domain.Credential;\nimport springfive.airline.authservice.domain.data.CredentialData;\nimport springfive.airline.authservice.repository.CredentialRepository;\n\n@Component\npublic class CredentialsDetailsService implements UserDetailsService {\n\n  private final CredentialRepository credentialRepository;\n\n  public CredentialsDetailsService(CredentialRepository credentialRepository) {\n    this.credentialRepository = credentialRepository;\n  }\n\n  @Override\n  public CredentialData loadUserByUsername(String email) throws UsernameNotFoundException {\n    final Credential credential = this.credentialRepository.findByEmail(email);\n    return CredentialData.builder().email(credential.getEmail()).password(credential.getPassword()).scopes(credential.getScopes()).build();\n  }\n\n}\n```", "```java\npackage springfive.airline.authservice.infra.oauth;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\nimport org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\n\n@Configuration\npublic class OAuthTokenProducer {\n\n    @Value(\"${config.oauth2.privateKey}\")\n    private String privateKey;\n\n    @Value(\"${config.oauth2.publicKey}\")\n    private String publicKey;\n\n    @Bean\n    public JwtTokenStore tokenStore(JwtAccessTokenConverter tokenEnhancer) {\n        return new JwtTokenStore(tokenEnhancer);\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public JwtAccessTokenConverter tokenEnhancer() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(privateKey);\n        converter.setVerifierKey(publicKey);\n        return converter;\n    }\n\n}\n```", "```java\npackage springfive.airline.authservice;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n\n@EnableZuulProxy\n@EnableEurekaClient @SpringBootApplication\npublic class AuthServiceApplication {\n\n public static void main(String[] args) {\n  SpringApplication.run(AuthServiceApplication.class, args);\n }\n\n}\n```", "```java\ncurl -s 442cf4015509eda9c03e5ca3aceef752:4f7ec648a48b9d3fa239b497f7b6b4d8019697bd@localhost:7777/oauth/token   -d grant_type=client_credentials  -d scope=trust | jq .\n```", "```java\n....\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients)throws Exception {\n  clients\n      .inMemory()\n      .withClient(\"ecommerce\") // ecommerce microservice\n      .secret(\"9ecc8459ea5f39f9da55cb4d71a70b5d1e0f0b80\")\n      .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\",\n          \"client_credentials\")\n      .authorities(\"maintainer\", \"owner\", \"user\")\n      .scopes(\"read\", \"write\")\n      .accessTokenValiditySeconds(THREE_HOURS)\n      .and()\n      .withClient(\"442cf4015509eda9c03e5ca3aceef752\") // planes microservice\n      .secret(\"4f7ec648a48b9d3fa239b497f7b6b4d8019697bd\")\n .authorizedGrantTypes(\"authorization_code\", \"refresh_token\", \"implicit\",\n          \"client_credentials\")\n .authorities(\"operator\")\n .scopes(\"trust\")\n      .accessTokenValiditySeconds(ONE_DAY)\n\n....\n```", "```java\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"name\":\"John Doe\",\"email\":\"john@doe.com\", \"password\" : \"john\"}' http://localhost:7777/register\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n\n```", "```java\nconfig:\n  oauth2:\n    privateKey: |\n      -----BEGIN RSA PRIVATE KEY-----\n      MIICXQIBAAKBgQDNQZKqTlO/+2b4ZdhqGJzGBDltb5PZmBz1ALN2YLvt341pH6i5\n      mO1V9cX5Ty1LM70fKfnIoYUP4KCE33dPnC7LkUwE/myh1zM6m8cbL5cYFPyP099t\n      hbVxzJkjHWqywvQih/qOOjliomKbM9pxG8Z1dB26hL9dSAZuA8xExjlPmQIDAQAB\n      AoGAImnYGU3ApPOVtBf/TOqLfne+2SZX96eVU06myDY3zA4rO3DfbR7CzCLE6qPn\n      yDAIiW0UQBs0oBDdWOnOqz5YaePZu/yrLyj6KM6Q2e9ywRDtDh3ywrSfGpjdSvvo\n      aeL1WesBWsgWv1vFKKvES7ILFLUxKwyCRC2Lgh7aI9GGZfECQQD84m98Yrehhin3\n      fZuRaBNIu348Ci7ZFZmrvyxAIxrV4jBjpACW0RM2BvF5oYM2gOJqIfBOVjmPwUro\n      bYEFcHRvAkEAz8jsfmxsZVwh3Y/Y47BzhKIC5FLaads541jNjVWfrPirljyCy1n4\n      sg3WQH2IEyap3WTP84+csCtsfNfyK7fQdwJBAJNRyobY74cupJYkW5OK4OkXKQQL\n      Hp2iosJV/Y5jpQeC3JO/gARcSmfIBbbI66q9zKjtmpPYUXI4tc3PtUEY8QsCQQCc\n      xySyC0sKe6bNzyC+Q8AVvkxiTKWiI5idEr8duhJd589H72Zc2wkMB+a2CEGo+Y5H\n      jy5cvuph/pG/7Qw7sljnAkAy/feClt1mUEiAcWrHRwcQ71AoA0+21yC9VkqPNrn3\n      w7OEg8gBqPjRlXBNb00QieNeGGSkXOoU6gFschR22Dzy\n      -----END RSA PRIVATE KEY-----\n    publicKey: |\n      -----BEGIN PUBLIC KEY-----\n      MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDNQZKqTlO/+2b4ZdhqGJzGBDlt\n      b5PZmBz1ALN2YLvt341pH6i5mO1V9cX5Ty1LM70fKfnIoYUP4KCE33dPnC7LkUwE\n      /myh1zM6m8cbL5cYFPyP099thbVxzJkjHWqywvQih/qOOjliomKbM9pxG8Z1dB26\n      hL9dSAZuA8xExjlPmQIDAQAB\n      -----END PUBLIC KEY-----\n```", "```java\n  oauth2:\n    resource:\n      userInfoUri: http://localhost:7777/credential\n```", "```java\npackage springfive.airline.airlineplanes.infra.oauth;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;\nimport org.springframework.security.oauth2.provider.token.store.JwtTokenStore;\n\n@Configuration\npublic class OAuthTokenConfiguration {\n\n  @Value(\"${config.oauth2.privateKey}\")\n  private String privateKey;\n\n  @Value(\"${config.oauth2.publicKey}\")\n  private String publicKey;\n\n  @Bean\n  public JwtTokenStore tokenStore() throws Exception {\n    JwtAccessTokenConverter enhancer = new JwtAccessTokenConverter();\n    enhancer.setSigningKey(privateKey);\n    enhancer.setVerifierKey(publicKey);\n    enhancer.afterPropertiesSet();\n    return new JwtTokenStore(enhancer);\n  }\n\n}\n```", "```java\npackage springfive.airline.airlineplanes;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\n\n@EnableZuulProxy\n@EnableEurekaClient\n@EnableResourceServer\n@SpringBootApplication\npublic class AirlinePlanesApplication {\n\n public static void main(String[] args) {\n  SpringApplication.run(AirlinePlanesApplication.class, args);\n }\n\n}\n```", "```java\ndocker-compose -f docker-compose-infra.yaml up -d\ndocker-compose -f docker-compose-micro.yaml up -d\n```"]