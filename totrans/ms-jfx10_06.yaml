- en: Understanding WebDriver Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selenium WebDriver provides an API for tracking the various events that happen
    when test scripts are executed using WebDriver. Many navigation events get fired
    before and after a WebDriver internal event occurs (such as before and after navigating
    to a URL, and before and after browser back-navigation) and these can be tracked
    and captured. To throw an event, WebDriver gives you a class named `EventFiringWebDriver`,
    and to catch that event, it provides the test-script developer with an interface
    named `WebDriverEventListener`. The test-script developer should provide its own
    implementations for the overridden methods from the interface. In this chapter,
    we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to listen to and handle various browser-navigation events by using EventFiringWebDriver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to listen to and handle web-element action events that get triggered during
    the execution of test scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding additional features to WebDriver to capture performance or accessibility
    testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing the eventFiringWebDriver and eventListener classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `EventFiringWebDriver` class is a wrapper around the WebDriver that gives
    the driver the capability to fire events. The `EventListener` class, on the other
    hand, waits to listen to `EventFiringWebDriver` and handles all of the events
    that are dispatched. There can be more than one listener waiting to hear from
    the `EventFiringWebDriver` class for an event to fire. All of the event listeners
    should be registered with the `EventFiringWebDriver` class to get notified.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following flow diagram explains what has to be done to capture all of the
    events raised by `EventFiringWebDriver` during the execution of test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5da5045c-da26-4484-b978-97540a96bb62.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating an instance of EventListener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `EventListener` class handles all of the events that are dispatched by
    the `EventFiringWebDriver` class. There are two ways to create an `EventListener`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: By implementing the `WebDriverEventListener` interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By extending the `AbstractWebDriverEventListener` class provided in the WebDriver
    library.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is up to you, as a test-script developer, to choose which way to go.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing WebDriverEventListener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `WebDriverEventListener` interface has all the event methods declared.
    The `EventFiringWebDriver` class, as soon as it realizes an event has occurred,
    invokes the registered method of `WebDriverEventListener`. Here, we have created
    an `IAmTheEventListener` named class and have implemented `WebDriverEventListener`.
    Now we need to provide implementation for all the methods declared in it. Currently,
    in `WebDriverEventListener`, there are 15 methods. We will discuss each one of
    them shortly. Make sure the IDE provides us with the dummy implementation of these
    methods. The class that we have created with all 15 overridden methods is as follows
    (we have provided implementations for a couple of methods as an example):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Extending AbstractWebDriverEventListener
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The second way to create a listener class is by extending the `AbstractWebDriverEventListene
    r` class. `AbstractWebDriverEventListener` is an abstract class that implements
    `WebDriverEventListener`. Though it doesn''t really provide any implementation
    for the methods in the `WebDriverEventListener` interface, it creates a dummy
    implementation such that the listener class that you are creating doesn''t have
    to contain all the methods, only the ones that you, as a test-script developer,
    are interested in. The following is a class we have created that extends `AbstractWebDriverEventListener`
    and provides implementations for a couple of methods in it. This way, we can override
    only the methods that we are interested in rather than all of the methods in our
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a WebDriver instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have created our listener class that listens for all of the events
    generated, it''s time to create our test script class and let it call `IAmTheDriver.java`.
    After the class is created, we declare a ChromeDriver instance in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `ChromeDriver` instance will be the underlying driver instance that drives
    all the driver events. This is nothing new. The step explained in the next section
    is where we make this driver an instance of `EventFiringWebDriver`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating EventFiringWebDriver and EventListener instances
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the basic driver instance, pass it as an argument while constructing
    the `EventFiringWebDriver` instance. We will be using this instance of the driver
    to execute all of the further user actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, using the following code, instantiate the `EventListener`, `IAmTheEventListener.java`,
    or `IAmTheEventListener2.java` class that we created previously. This will be
    the class to which all of the events are dispatched:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Registering EventListener with EventFiringWebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For the event executions to be notified by `EventListener`, we have registered
    `EventListener` to the `EventFiringWebDriver` class. Now the `EventFiringWebDriver`
    class will know where to send the notifications. This is done by the following
    line of code: `eventFiringDriver.register(eventListener);`'
  prefs: []
  type: TYPE_NORMAL
- en: Executing and verifying the events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time for our test script to execute events, such as navigation events.
    Let''s first navigate to Google and then Facebook. We will use the browser back-navigation
    to go back to Google. The full code of the test script is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we modify our listener class to record `navigateTo`
    and `navigateBack` before and after events inherited from the `AbstractWebDriverEventListener`
    class. The modified methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you execute your test script, the output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Registering multiple EventListeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can register more than one listener with `EventFiringWebDriver`. Once the
    event occurs, all of the registered listeners are notified about it. Let''s modify
    our test script to register both our `IAmTheListener.java` and `IAmTheListener2.java`
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Modify the listeners slightly to differentiate the log statements. Now if you
    execute the preceding code, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Exploring different WebDriver event listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen some of the methods in our `EventListeners` that get invoked when
    their corresponding events are executed, for example, before and after navigation
    methods are invoked when the `navigateTo` event is triggered. Here, we'll see
    all the methods that `WebDriverEventListener` provides us.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for WebElement value changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event occurs when the value of a WebElement changes when the `sendKeys()`
    or `clear()` methods are executed on them. There are two methods associated with
    this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding method is invoked before the WebDriver attempts to change the
    value of the WebElement. As a parameter, the WebElement itself is passed to the
    method so that you can log the value of the element before the change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method is the second method associated with the value-change event
    that is invoked after the driver changes the value of the WebElement. Again, the
    WebElement and the WebDriver are sent as parameters to the method. If an exception
    occurs when changing the value, this method is not invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for the clicked WebElement
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event occurs when a WebElement is clicked, that is, by executing `webElement.click()`.
    There are two methods to listen for this event in the `WebDriverEventListener`
    implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding method is invoked when the WebDriver is about to click on a particular
    WebElement. The WebElement that is going to be clicked on and the WebDriver that
    is clicking on it are sent as parameters to this method so that the test-script
    developer can interpret which driver performed the click action, and on which
    element the action was performed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `EventFiringWebDriver` class notifies the preceding method after the click
    action is taken on a WebElement. Similar to the `beforeClickOn()` method, this
    method is also sent the WebElement and WebDriver instances. If an exception occurs
    during a click event, this method is not called.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for a WebElement search event
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event is triggered when the WebDriver searches for a WebElement on the
    web page using `findElement()` or `findElements()`. There are, again, two methods
    associated with this event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding method is invoked just before WebDriver begins searching for
    a particular WebElement on the page. For parameters, it sends the locating mechanism,
    that is, the WebElement that is searched for, and the WebDriver instance that
    is performing the search:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, the `EventFiringWebDriver` class calls the preceding method after
    the search for an element is over and the element is found. If there are any exceptions
    during the search, this method is not called, and an exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for browser back-navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The browser back-navigation event, as we have already seen, gets invoked when
    we use the `driver.navigation().back()` method. The browser goes back one level
    in its history. Just like all the other events, this event is associated with
    two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding method is invoked before the browser takes you back in its history.
    The WebDriver that invoked this event is passed as a parameter to this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Just as in all the after `<<event>>` methods, the preceding method is invoked
    when the navigate-back action is triggered. The preceding two methods will be
    invoked irrespective of the navigation of the browser; that is, if the browser
    doesn't have any history and you invoke this method, the browser doesn't take
    you to any of its history. But, even in that scenario, as the event is triggered,
    those two methods are invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for browser forward-navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event is very similar to the browser back-navigation, except that this
    is browser forward-navigation, so it is using `driver.navigate().forward()`. The
    two methods associated with this event are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public void afterNavigateForward(WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void beforeNavigateForward(WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Just as in browser back-navigation, these methods are invoked irrespective of
    whether or not the browser takes you one level forward.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for browser NavigateTo events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve seen earlier, this event occurs whenever the driver executes `driver.
    get(url)`. The related methods for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public void beforeNavigateTo(java.lang.String url, WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void afterNavigateTo(java.lang.String url, WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL that is used for the driver-navigation is passed as a parameter to the
    preceding methods, along with the driver that triggered the event.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for script execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event is triggered whenever the driver executes a JavaScript. The associated
    methods for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public void beforeScript(java.lang.String script, WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public void afterScript(java.lang.String script, WebDriver driver)`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding methods get the JavaScript that was executed as a string, and
    the WebDriver that executed it as a parameter. If an exception occurs during script
    execution, the `afterScript()` method will not be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Listening for an exception
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This event occurs when the WebDriver comes across an exception. For instance,
    if you try to search for a WebElement using `findElement()`, and that element
    doesn''t exist on the page, the driver throws an exception (`NoSuchElementException`).
    At this point, this event is triggered, and the following method gets notified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In all the `after<<event>>` methods, we have seen that they will not be invoked
    if the driver comes across any exception. In that case, instead of those `after<<event>>`
    methods, the `onException()` method is invoked and the throwable object and the
    WebDriver object are sent to it as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Unregistering EventListener with EventFiringWebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we have seen the different kinds of events that get triggered, and the
    `EventFiringWebDriver` class that notifies all of the listeners registered to
    it. If, at any point, you want one of your event listeners to stop listening from
    `EventFiringWebDriver`, you can do that by unregistering from that driver. The
    following API unregisters an event listener from a driver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The parameter of the method should be the event listener that wants to opt out
    of getting event notifications.
  prefs: []
  type: TYPE_NORMAL
- en: Performing accessibility testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can perform basic accessibility checks by using tools such as Google''s
    Accessibility Developer Tools ([https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)).
    We can inject the `Google Accessibility testing library` in a web page and perform
    the `Accessibility Audit`. This can be done automatically every time `afterNavigatTo()`
    is called. In the following code example, we will inject the `axe_testing.js`
    file provided by the Google Accessibility Developer Tools and perform the audit,
    which will print a report on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The report is printed in the console, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This report contains a collection of audit rules that check for common accessibility
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing page-performance metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Measuring and optimizing the client-side performance is essential for a seamless
    user experience, and this is critical for Web 2.0 applications using AJAX.
  prefs: []
  type: TYPE_NORMAL
- en: Capturing vital information, such as the time taken for page load, rendering
    of the elements, and the JavaScript code execution, will help in identifying the
    areas where performance is slow and optimizes the overall client-side performance.
  prefs: []
  type: TYPE_NORMAL
- en: '**Navigation Timing** is a W3C-Standard JavaScript API to measure performance
    on the web. The API provides a simple way to get accurate and detailed timing
    statistics natively for page navigation and load events. It is available on Internet
    Explorer 9, Google Chrome, Firefox, and WebKit-based browsers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The API is accessed via the properties of the timing interface of the `window.performance`
    object using JavaScript. We will capture the page-load time every time we navigate
    to a page. This can be done by using `JavaScriptExecutor` to call `winodw.performance`
    in the `afterNavigateTo()` method in `IAmTheEventListener2.java`, as shown in
    the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: As discussed in the previous code, the `window.performance` object provides
    us with the performance metric that is available within the `Browser Window object`.
    We need to use JavaScript to retrieve this metric. Here, we are collecting the
    `loadEventEnd` time and the `navigationEventStart` time, and calculating the difference
    between them, which will give us the page-load time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about `EventFiringWebDriver` and `EventListeners`,
    and how they work together to make a developer's life easier by helping them to
    debug what is going on at each step while the test cases get executed. You also
    learned how to use WebDriver events to perform different types of testing on a
    page, such as accessibility and client-side performance checks. In the next [chapter](a1d063a0-5332-4970-9d11-61aad05ae4f3.xhtml),
    you will learn more about RemoteWebDriver for running tests on remote machines
    in distributed and parallel mode for Cross-Browser Testing.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can listen to WebDriver events using `WebDriverEventListener` interface—
    True or False?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How you can automatically clear an input field before calling the `sendKeys`
    method using `WebDriverEventListener`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selenium supports accessibility testing— True or False?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Find out more about the Navigation Timing API at [https://www.w3.org/TR/navigation-timing/](https://www.w3.org/TR/navigation-timing/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find more details on Google's Accessibility Developer Tools at [https://github.com/GoogleChrome/accessibility-developer-tools](https://github.com/GoogleChrome/accessibility-developer-tools)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
