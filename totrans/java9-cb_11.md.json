["```java\n        HttpClient client = HttpClient.newBuilder().build();\n```", "```java\n        HttpRequest request = HttpRequest\n                    .newBuilder(new URI(\"http://httpbin.org/get\"))\n                    .GET()\n                    .version(HttpClient.Version.HTTP_1_1)\n                    .build();\n```", "```java\n        HttpResponse<String> response = client.send(request,\n                             HttpResponse.BodyHandler.asString());\n```", "```java\n        System.out.println(\"Status code: \" + response.statusCode());\n        System.out.println(\"Response Body: \" + response.body());\n```", "```java\nHttpClient client = HttpClient.newHttpClient();\n```", "```java\nHttpClient client = HttpClient\n                    .newBuilder()\n                    //redirect policy for the client. Default is NEVER\n                    .followRedirects(HttpClient.Redirect.ALWAYS) \n                    //HTTP client version. Defabult is HTTP_2\n                    .version(HttpClient.Version.HTTP_1_1)\n                    //few more APIs for more configuration\n                    .build();\n```", "```java\nHttpRequest request = HttpRequest\n                .newBuilder()\n                .uri(new URI(\"http://httpbin.org/get\")\n                .headers(\"Header 1\", \"Value 1\", \"Header 2\", \"Value 2\")\n                .timeout(Duration.ofMinutes(5))\n                .version(HttpClient.Version.HTTP_1_1)\n                .GET()\n                .build();\n```", "```java\nHttpResponse<String> response = client.send(request,\n                                HttpResponse.BodyHandler.asString());\n```", "```java\n        HttpClient client = HttpClient.newBuilder().build();\n```", "```java\n        Map<String, String> requestBody = \n                    Map.of(\"key1\", \"value1\", \"key2\", \"value2\");\n```", "```java\n        ObjectMapper mapper = new ObjectMapper();\n        HttpRequest request = HttpRequest\n                   .newBuilder(new URI(\"http://httpbin.org/post\"))\n                   .POST(\n          HttpRequest.BodyProcessor.fromString(\n            mapper.writeValueAsString(requestBody)\n          )\n        )\n        .version(HttpClient.Version.HTTP_1_1)\n        .build();\n```", "```java\n        HttpResponse<String> response = client.send(request, \n                             HttpResponse.BodyHandler.asString());\n```", "```java\n        System.out.println(\"Status code: \" + response.statusCode());\n        System.out.println(\"Response Body: \" + response.body());\n```", "```java\n{\n  \"authenticated\": true,\n  \"user\": \"user\"\n}\n```", "```java\n        public class UsernamePasswordAuthenticator \n          extends Authenticator{\n        }\n```", "```java\n        private String username;\n        private String password;\n\n        public UsernamePasswordAuthenticator(){}\n        public UsernamePasswordAuthenticator ( String username, \n                                               String password){\n          this.username = username;\n          this.password = password;\n        }\n```", "```java\n        @Override\n        protected PasswordAuthentication getPasswordAuthentication(){\n          return new PasswordAuthentication(username, \n                                            password.toCharArray());\n        }\n```", "```java\n        String username = \"user\";\n        String password = \"passwd\"; \n        UsernamePasswordAuthenticator authenticator = \n                new UsernamePasswordAuthenticator(username, password);\n```", "```java\n        HttpClient client = HttpClient.newBuilder()\n                                      .authenticator(authenticator)\n                                      .build();\n```", "```java\n        HttpRequest request = HttpRequest.newBuilder(new URI(\n          \"http://httpbin.org/basic-auth/user/passwd\"\n        ))\n        .GET()\n        .version(HttpClient.Version.HTTP_1_1)\n        .build();\n```", "```java\n        HttpResponse<String> response = client.send(request,\n        HttpResponse.BodyHandler.asString());\n\n        System.out.println(\"Status code: \" + response.statusCode());\n        System.out.println(\"Response Body: \" + response.body());\n```", "```java\npublic class UsernamePasswordAuthenticator \n  extends Authenticator{\n    private String username;\n    private String password;\n\n    public UsernamePasswordAuthenticator(){}\n\n    public UsernamePasswordAuthenticator ( String username, \n                                           String password){\n        this.username = username;\n        this.password = password;\n    }\n\n    @Override\n    protected PasswordAuthentication getPasswordAuthentication(){\n      return new PasswordAuthentication(username, \n                         password.toCharArray());\n    }\n}\n```", "```java\n        HttpClient client = HttpClient.newBuilder().build();\n```", "```java\n        HttpRequest request = HttpRequest\n                        .newBuilder(new URI(\"http://httpbin.org/get\"))\n                        .GET()\n                        .version(HttpClient.Version.HTTP_1_1)\n                        .build();\n```", "```java\n        CompletableFuture<HttpResponse<String>> responseFuture = \n                  client.sendAsync(request, \n                         HttpResponse.BodyHandler.asString());\n```", "```java\n        CompletableFuture<Void> processedFuture = \n                   responseFuture.thenAccept(response -> {\n          System.out.println(\"Status code: \" + response.statusCode());\n          System.out.println(\"Response Body: \" + response.body());\n        });\n```", "```java\n        CompletableFuture.allOf(processedFuture).join();\n```", "```java\nmodule http.client.demo{\n  requires httpclient;\n  requires httpcore;\n  requires commons.logging;\n  requires commons.codec;\n}\n```", "```java\n        CloseableHttpClient client = HttpClients.createDefault();\n```", "```java\n        HttpGet request = new HttpGet(\"http://httpbin.org/get\");\n```", "```java\n        CloseableHttpResponse response = client.execute(request);\n```", "```java\n        int statusCode = response.getStatusLine().getStatusCode();\n        String responseBody = EntityUtils.toString(response.getEntity());\n        System.out.println(\"Status code: \" + statusCode);\n        System.out.println(\"Response Body: \" + responseBody);\n```", "```java\nString responseBody = client.execute(request, response -> {\n  int status = response.getStatusLine().getStatusCode();\n  HttpEntity entity = response.getEntity();\n  return entity != null ? EntityUtils.toString(entity) : null;\n});\n```", "```java\n<dependency>\n  <groupId>com.mashape.unirest</groupId>\n  <artifactId>unirest-java</artifactId>\n  <version>1.4.9</version>\n</dependency>\n```", "```java\nmodule http.client.demo{\n  requires httpasyncclient;\n  requires httpclient;\n  requires httpmime;\n  requires json;\n  requires unirest.java;\n  requires httpcore;\n  requires httpcore.nio;\n  requires commons.logging;\n  requires commons.codec;\n}\n```", "```java\nHttpResponse<JsonNode> jsonResponse = \n  Unirest.get(\"http://httpbin.org/get\")\n         .asJson();\n```", "```java\nint statusCode = jsonResponse.getStatus();\nJsonNode jsonBody = jsonResponse.getBody();\n```", "```java\njsonResponse = Unirest.post(\"http://httpbin.org/post\")\n                      .field(\"key1\", \"val1\")\n                      .field(\"key2\", \"val2\")\n                      .asJson();\n```", "```java\njsonResponse = Unirest.get(\"http://httpbin.org/basic-auth/user/passwd\")\n                      .basicAuth(\"user\", \"passwd\")\n                      .asJson();\n```"]