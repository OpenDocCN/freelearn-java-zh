["```java\noc create -f https://raw.githubusercontent.com/wildfly-swarm/sti-wildflyswarm/master/1.0/wildflyswarm-sti-all.json\n```", "```java\noc new-app wildflyswarm-10-centos7~https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git (...)\n```", "```java\noc create -f https://raw.githubusercontent.com/wildfly-swarm/sti-wildflyswarm/master/1.0/wildflyswarm-sti-all.json\n```", "```java\noc new-app wildflyswarm-10-centos7~https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git (...)\n```", "```java\noc delete all -l app=pricing-service\n```", "```java\nPOSTGRESQL_HOST=pricing-service.petstore.svc\nPOSTGRESQL_USER=pricing\nPOSTGRESQL_PASSWORD=pricing\nPOSTGRESQL_SCHEMA=pricingdb\n```", "```java\napiVersion: v1\nkind: BuildConfig\nmetadata:\n  name: pricing-service-pipeline\n  labels:\n    name: pricing-service-pipeline\nspec:\n  runPolicy: Serial\n  strategy:\n    type: JenkinsPipeline\n    jenkinsPipelineStrategy:\n      jenkinsfile:\"pipeline { \\n agent any\\n stages {\\n stage('Build') {\\n steps {\\n echo 'Pipeline is running'\\n }\\n }\\n }\\n }\\n\"\n```", "```java\n//1\npipeline {\n    //2\n    agent any\n    //3\n    stages {\n        //4\n        stage('Print') {\n            steps {\n                echo 'This pipeline will build pricing-service one day'\n            }\n        }\n    }\n}\n```", "```java\n\n(...)\n\n    <dependencies>\n        (...)\n        <dependency>\n            <groupId>org.postgresql</groupId>\n            <artifactId>postgresql</artifactId>\n            <version>${version.postgresql}</version>\n        </dependency>\n\n //1\n <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>${version.junit}</version>\n            <scope>test</scope> </dependency>\n\n //2\n <dependency>\n            <groupId>org.jboss.arquillian.junit</groupId>\n            <artifactId>arquillian-junit-container</artifactId>\n            <scope>test</scope> </dependency>\n\n //3\n <dependency>\n            <groupId>org.wildfly.swarm</groupId>\n            <artifactId>arquillian</artifactId>\n            <version>${version.wildfly.swarm}</version>\n            <scope>test</scope> </dependency>\n\n //4\n <dependency>\n            <groupId>com.h2database</groupId>\n            <artifactId>h2</artifactId>\n            <version>${version.h2}</version>\n            <scope>test</scope> </dependency>\n\n    </dependencies>\n\n    (...)\n\n</project>\n\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        version=\"2.1\"\n        xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n        xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\">\n    <!-- 1 -->\n    <persistence-unit name=\"PricingPU\" transaction-type=\"JTA\">\n        <!-- 2 -->\n        <jta-data-source>java:jboss/datasources/PricingDS</jta-data-source>\n        <properties>\n            <!-- 3 -->\n            <property name=\"javax.persistence.schema-generation.database.action\" value=\"drop-and-create\"/>\n            <property name=\"javax.persistence.schema-generation.create-source\" value=\"metadata\"/>\n            <property name=\"javax.persistence.schema-generation.drop-source\" value=\"metadata\"/>\n\n            <property name=\"javax.persistence.sql-load-script-source\" value=\"META-INF/load.sql\"/>\n        </properties>\n    </persistence-unit>\n</persistence>\n```", "```java\nDROP TABLE IF EXISTS PRICE;\n\nCREATE TABLE PRICE (id serial PRIMARY KEY, name varchar, price smallint);\n\nINSERT INTO PRICE(name, price) VALUES ('test-pet', 5);\n```", "```java\npackage org.packt.swarm.petstore.pricing;\n\nimport org.jboss.arquillian.container.test.api.Deployment;\nimport org.jboss.arquillian.junit.Arquillian;\nimport org.jboss.shrinkwrap.api.ShrinkWrap;\nimport org.jboss.shrinkwrap.api.asset.EmptyAsset;\nimport org.jboss.shrinkwrap.api.spec.JavaArchive;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.wildfly.swarm.Swarm;\nimport org.wildfly.swarm.arquillian.CreateSwarm;\nimport org.wildfly.swarm.datasources.DatasourcesFraction;\nimport org.wildfly.swarm.jaxrs.JAXRSArchive;\nimport org.wildfly.swarm.spi.api.Module;\n\nimport javax.inject.Inject;\n\n//1\n@RunWith(Arquillian.class)\npublic class PricingServiceTest {\n\n    //2\n    @Deployment\n    public static JavaArchive createDeployment() {\n        return ShrinkWrap.create(JavaArchive.class)\n                .addClasses(Price.class, PricingService.class)\n                .addAsResource(\"META-INF/persistence.xml\")\n                .addAsResource(\"META-INF/load.sql\")\n                .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    //2\n    @CreateSwarm\n    public static Swarm createSwarm() throws Exception {\n        DatasourcesFraction datasourcesFraction = new DatasourcesFraction()\n                //3\n                .jdbcDriver(\"h2\", (d) -> {\n                    d.driverClassName(\"org.h2.Driver\");\n                    d.xaDatasourceClass(\"org.h2.jdbcx.JdbcDataSource\");\n                    d.driverModuleName(\"com.h2database.h2\");\n                })\n                .dataSource(\"PricingDS\", (ds) -> {\n                    ds.driverName(\"h2\");\n                    ds.connectionUrl(\"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\");\n                    ds.userName(\"sa\");\n                    ds.password(\"sa\");\n                });\n\n        Swarm swarm = new Swarm();\n        swarm.fraction(datasourcesFraction);\n\n        return swarm;\n    }\n\n    //3\n    @Inject\n    PricingService pricingService;\n\n    //4\n    @Test\n    public void testSearchById() {\n       Assert.assertEquals(pricingService.findByName(\"test-pet\").getPrice(),5);\n    }\n}\n```", "```java\npipeline { \n//1\n agent any\n//2 \ntools {\n    maven 'maven3.5.2'\n    jdk 'jdk8u152'\n    git 'Default'\n }\n stages {\n//3\n stage('Unit tests') {\n     steps {\n      //4\n      git url: 'https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git'\n //5\n sh 'mvn clean test -Dswarm.build.modules=target/test-classes/modules'\n }\n }\n}\n```", "```java\npipeline { \n agent any\n tools {\n    maven 'maven3.5.2'\n    jdk 'jdk8u152'\n    git 'Default'\n }\n stages {\n stage('Test') {\n     steps {\n      git url: 'https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git'\n      sh 'mvn clean install -Dswarm.build.modules=target/test-classes/modules'\n     }\n    }\n //1\n stage('Build') {\n     steps {\n        //2\n        openshiftBuild(bldCfg: 'pricing-service', showBuildLogs: 'true')\n        //3\n        openshiftVerifyBuild(bldCfg: 'pricing-service', waitTime: '300000')\n    }\n }\n }\n}\n```", "```java\npipeline { \n agent any\n tools {\n    maven 'maven3.5.2'\n    jdk 'jdk8u152'\n    git 'Default'\n }\n stages {\n stage('Test') {\n     steps {\n      git url: 'https://github.com/PacktPublishing/Hands-On-Cloud-Development-with-WildFly.git'\n      sh 'mvn clean install -Dswarm.build.modules=target/test-classes/modules'\n     }\n    }\n stage('Build') {\n     steps {\n        openshiftBuild(bldCfg: 'pricing-service', showBuildLogs: 'true')\n        openshiftVerifyBuild(bldCfg: 'pricing-service', waitTime: '300000')\n    }\n    }\n//1\n stage('Deploy'){\n     steps {\n         //2\n         openshiftDeploy(depCfg: 'pricing-service')\n         //3\n         openshiftScale(depCfg: 'pricing-service',replicaCount:'3')\n         //4\n         openshiftVerifyDeployment(depCfg: 'pricing-service',verifyReplicaCount:'true',replicaCount:'3', waitTime: '300000')\n         //5\n         openshiftVerifyService(svcName: 'pricing-service')\n     }\n }\n }\n post {\n    //6\n    success {\n        echo \"Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' result: SUCCESS\"\n    }\n    //7\n    failure {\n        echo \"Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' result: FAILURE\"\n    }\n }\n}\n```"]