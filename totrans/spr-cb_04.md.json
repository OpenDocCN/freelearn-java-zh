["```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-jdbc</artifactId>\n      <version>4.1.6.RELEASE</version>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.35</version>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>postgresql</groupId>\n      <artifactId>postgresql</artifactId>\n      <version>9.1-901-1.jdbc4</version>\n    </dependency>\n    ```", "```java\n    @Bean\n    public DataSource dataSource() {\n            DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n            dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n            dataSource.setUrl(\"jdbc:mysql://localhost:3306/db1\");\n            dataSource.setUsername(\"user1\");\n            dataSource.setPassword(\"pass1\");\n\n            return dataSource;\n    }\n    ```", "```java\n    @Bean\n    public DataSource dataSource() {\n        DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n        dataSource.setDriverClassName(\"org.postgresql.Driver\");\n        dataSource.setUrl(\"jdbc:postgresql://localhost:5432/db1\");\n        dataSource.setUsername(\"user1\");\n        dataSource.setPassword(\"pass1\");\n\n        return dataSource;\n    }\n    ```", "```java\n    @Bean\n    public JdbcTemplate jdbcTemplate(DataSource dataSource) {\n      return new JdbcTemplate(dataSource);\n    }\n    ```", "```java\n    @Repository\n    public class UserDAO {\n    ```", "```java\n    @Autowired\n    private JdbcTemplate jdbcTemplate;\n    ```", "```java\n    @Controller\n    public class UserController {\n      @Autowired\n     private UserDAO userDAO;\n\n    ```", "```java\n    userDAO.add(user);\n    ```", "```java\npublic class User {\n  private Long id;\n  private String firstName;\n  private Integer age;\n```", "```java\nCREATE TABLE `user` (\n  `id` int(11) AUTO_INCREMENT,\n  `first_name` text,\n  `age` int(11),\n  PRIMARY KEY (`id`)\n)\n```", "```java\npublic void add(User user) {\n  String sql = \"insert into user (first_name, age) values (?, ?)\";\n  jdbcTemplate.update(sql, user.getFirstName(), user.getAge());\n}\n```", "```java\n    private class UserMapper implements RowMapper<User> {\n      public User mapRow(ResultSet row, int rowNum) throws SQLException {\n        User user = new User();\n\n        user.setId(row.getLong(\"id\"));\n        user.setFirstName(row.getString(\"first_name\"));\n        user.setAge(row.getInt(\"age\"));\n\n        return user;\n      }\n    }\n    ```", "```java\n    public User findById(Long id) {\n      String sql = \"select * from user where id=?\";\n      User user = jdbcTemplate.queryForObject(sql, new Object[]{id}, new UserMapper());\n      return user;\n    }\n    ```", "```java\npublic User findById(Long id) {\n  String sql = \"select * from user where id=?\";\n  User user = jdbcTemplate.queryForObject(sql, new Object[]{id}, ParameterizedBeanPropertyRowMapper.newInstance(User.class));\n  return user;\n}\n```", "```java\npublic List<User> findAll() {\n  String sql = \"select * from user\";\n  List<User> userList = jdbcTemplate.query(sql, ParameterizedBeanPropertyRowMapper.newInstance(User.class));\n  return userList;\n}\n```", "```java\npublic class User {\n  private Long id;\n  private String firstName;\n  private Integer age;\n  private LinkedList<Post> posts = new LinkedList<Post>();\n\npublic class Post {\n  private long id;\n  private String title;\n  private Date date;\n  private User user;\n```", "```java\nCREATE TABLE `user` (\n  `id` int(11) AUTO_INCREMENT,\n  `first_name` text,\n  `age` int(11),\n  PRIMARY KEY (`id`)\n)\n\nCREATE TABLE `post` (\n  `id` int(11) AUTO_INCREMENT,\n  `title` text,\n  `date` datetime,\n  `user_id` int(11),\n  PRIMARY KEY (`id`),\n  CONSTRAINT `user_id` FOREIGN KEY (`id`) REFERENCES `user` (`id`)\n)\n```", "```java\n    public List<User> findAll() {\n      String sql = \"select u.id, u.first_name, u.age, p.id as p_id, p.title as p_title, p.date as p_date from user u left join post p on p.user_id = u.id order by u.id asc, p.date desc\";\n      return jdbcTemplate.query(sql, new UserWithPosts());\n    }\n    ```", "```java\n    private class UserWithPosts implements ResultSetExtractor<List<User>> {\n\n      public List<User> extractData(ResultSet rs) throws SQLException,\n          DataAccessException {\n\n        Map<Long, User> userMap = new ConcurrentHashMap<Long, User>();\n        User u = null;\n        while (rs.next()) {\n          // user already in map?\n          Long id = rs.getLong(\"id\");\n          u = userMap.get(id);\n\n          // if not, add it\n          if(u == null) {\n            u = new User();\n            u.setId(id);\n            u.setFirstName(rs.getString(\"first_name\"));\n            u.setAge(rs.getInt(\"age\"));\n            userMap.put(id, u);\n          }\n\n          // create post if there's one\n          Long postId = rs.getLong(\"p_id\");\n          if (postId > 0) {\n            System.out.println(\"add post id=\" + postId);\n            Post p = new Post();\n            p.setId(postId);\n            p.setTitle(rs.getString(\"p_title\"));\n            p.setDate(rs.getDate(\"p_date\"));\n            p.setUser(u);\n            u.getPosts().add(p);\n          }\n        }\n\n        return new LinkedList<User>(userMap.values());\n      }\n    }\n    ```", "```java\npublic void update(User user) {\n  String sql = \"update user set first_name=?, age=? where id=?\";\n  jdbcTemplate.update(sql, user.getFirstName(), user.getAge(), user.getId());\n}\n```", "```java\npublic void save(User user) {\n  if (user.getId() == null) {\n    add(user);\n  }\n  else {\n    update(user);\n  }\n}\n```", "```java\npublic void delete(User user) {\n  String sql = \"delete from user where id=?\";\n  getJdbcTemplate().update(sql, user.getId());\n}\n```", "```java\npublic long countMinorUsers() {\n  String sql = \"select count(*) from age < 18\";\n  return jdbcTemplate.queryForObject(sql, Long.class);\n}\n```", "```java\npublic void add(List<User> userList) {\n  String sql = \"insert into user (first_name, age) values (?, ?)\";\n\n  List<Object[]> userRows = new ArrayList<Object[]>();\n  for (User user : userList) {\n        userRows.add(new Object[] {user.getFirstName(), user.getAge()});\n  }\n\n   jdbcTemplate.batchUpdate(sql, userRows);\n}\n```", "```java\n    @Configuration\n    @EnableWebMvc\n    @EnableTransactionManagement\n    @ComponentScan(basePackages = {\"com.spring_cookbook.controllers\", \"com.spring_cookbook.dao\"})\n    public class AppConfig {\n    …\n    ```", "```java\n    @Bean\n    public DataSourceTransactionManager transactionManager() {\n        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager();\n      transactionManager.setDataSource(dataSource());\n      return transactionManager;\n    }\n    ```", "```java\n    @Repository\n    @Transactional\n    public class UserDAO {\n    …\n    ```", "```java\nCREATE TABLE user (\n  id int NOT NULL AUTO_INCREMENT,\n  first_name text,\n  age int DEFAULT NULL,\n  PRIMARY KEY (id)\n);\n```", "```java\n@Entity\n@Table(name = \"user\")\npublic class User {\n\n  @Id\n  @GeneratedValue\n  private Long id;\n\n  @Column(name = \"first_name\")\n  private String firstName;\n\n  private Integer age;\n\n  // getters and setters.. \n```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-orm</artifactId>\n      <version>4.1.6.RELEASE</version>\n    </dependency>\n\n    <dependency>\n      <groupId>mysql</groupId>\n      <artifactId>mysql-connector-java</artifactId>\n      <version>5.1.35</version>\n    </dependency>  \n\n    <dependency>\n      <groupId>org.hibernate</groupId>\n      <artifactId>hibernate-core</artifactId>\n      <version>4.3.8.Final</version>\n    </dependency>\n    ```", "```java\n    @Configuration\n    @EnableWebMvc\n    @EnableTransactionManagement\n    @ComponentScan(basePackages = {\"com.spring_cookbook.controllers\", \"com.spring_cookbook.dao\"})\n    public class AppConfig {\n    …\n    ```", "```java\n    @Bean\n    public DataSource dataSource() {\n            DriverManagerDataSource dataSource = new DriverManagerDataSource();\n\n            dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\");\n            dataSource.setUrl(\"jdbc:mysql://localhost:3306/db1\");\n            dataSource.setUsername(\"user1\");\n            dataSource.setPassword(\"pass1\");\n\n            return dataSource;\n    }\n    ```", "```java\n    @Bean\n    public SessionFactory sessionFactory(DataSource dataSource) {\n      LocalSessionFactoryBuilder sessionBuilder = new LocalSessionFactoryBuilder(dataSource);\n      Properties props = new Properties();\n      props.put(\"hibernate.dialect\", \"org.hibernate.dialect.MySQLDialect\");\n      props.put(\"hibernate.show_sql\", \"true\");\n      sessionBuilder.addProperties(props);\n\n      sessionBuilder.addAnnotatedClass(User.class);\n\n      return sessionBuilder.buildSessionFactory();\n    }\n    ```", "```java\n    @Bean\n    public HibernateTransactionManager transactionManager(SessionFactory sessionFactory) {\n      return new HibernateTransactionManager(sessionFactory);\n    }\n    ```", "```java\n    @Autowired\n    SessionFactory sessionFactory;\n    ```", "```java\n    @Transactional\n    public void add(User user) {\n      sessionFactory.getCurrentSession().saveOrUpdate(user);\n    }\n    ```"]