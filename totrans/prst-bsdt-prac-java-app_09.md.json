["```java\n<dependency>    <groupId>jakarta.data</groupId>\n    <artifactId>jakarta-data-api</artifactId>\n    <version>${data.version}</version>\n</dependency>\n```", "```java\n@Entitypublic class Developer {\n    @Id\n    private String nickname;\n    private String name;\n    private String city;\n    private String language;\n}\n@Entity\npublic class Airplane {\n    @Id\n    private String model;\n    private String manufacturer;\n    private String nationality;\n    private int seats;\n}\n```", "```java\n@Repositorypublic interface DeveloperRepository extends\n  CrudRepository<Developer, String> {\n    List<Developer> findByLanguage(String language);\n}\n```", "```java\n@Repositorypublic interface Hangar extends\n  PageableRepository<Airplane, String> {\n    Page<Hangar> findByManufacturer(String manufacturer,\n      Pageable pageable);\n}\n```", "```java\npublic class App {    public static void main(String[] args) {\n        try (SeContainer container =\n         SeContainerInitializer.newInstance().initialize()) {\n            DeveloperRepository repository = container\n              .select(DeveloperRepository.class).get();\n            Developer otavio = Developer.builder()\n                    .name(\"Otavio Santana\")\n                    .city(\"Salvador\")\n                    .nickname(\"ptavopkava\")\n                    .language(\"Java\")\n                    .build();\n            Developer kvarel4 = Developer.builder()\n                     .name(\"Karina Varela\")\n                    .city(\"Brasília\")\n                    .nickname(\"kvarel4\")\n                    .language(\"Java\")\n                    .build();\n            repository.save(otavio);\n            repository.save(kvarel4);\n            Optional<Developer> developer = repository\n              .findById(otavio.getNickname());\n            List<Developer> java = repository\n              .findByLanguage(\"Java\");\n            System.out.println(\"Java developers: \" + java);\n            repository.delete(otavio);\n        }\n    }\n```", "```java\ntry (SeContainer container =  SeContainerInitializer.newInstance().initialize()) {\n        Hangar hangar = container\n          .select(Hangar.class).get();\n        Airplane freighters = Airplane.builder()\n         .model(\"Freighters\")\n                .manufacturer(\"Boeing\")\n                .nationality(\"United States\")\n                .seats(149)\n                .build();\n        Airplane max = Airplane.builder().model(\"Max\")\n                .manufacturer(\"Boeing\").nationality(\"United\n                 States\")\n                .seats(149)\n                .build();\n        Airplane nextGeneration = Airplane.builder()\n                 .model(\"Next-Generation 737\")\n                .manufacturer(\"Boeing\").nationality(\"United\n                 States\")\n                .seats(149)\n                .build();\n        Airplane dreamliner = Airplane.builder()\n                .model(\"Dreamliner\")\n                .manufacturer(\"Boeing\").nationality(\"United\n                 States\")\n                .seats(248)\n                .build();\n        hangar.saveAll(List.of(freighters, max,\n          nextGeneration));\n        Pageable pageable = Pageable.ofSize(1)\n                .sortBy(Sort.asc(\"manufacturer\"));\n        Page<Airplane> page = hangar.findAll(pageable);\n        System.out.println(\"The first page: \" +\n          page.content());\n        Pageable nextPageable = page.nextPageable();\n        Page<Airplane> page2 =\n          hangar.findAll(nextPageable);\n        System.out.println(\"The second page: \" +\n          page2.content());\n    }\n```", "```java\n@ApplicationScoped@Consumes(MediaType.APPLICATION_JSON)\n@Produces(MediaType.APPLICATION_JSON)\n@Path(\"developers\")\npublic class DeveloperResource {\n    private final DeveloperRepository repository;\n    @Inject\n    public DeveloperResource(DeveloperRepository\n     repository) {\n        this.repository = repository;\n    }\n    @GET\n    public List<Developer> getDevelopers() {\n        return this.repository.findAll()\n         .collect(Collectors.toUnmodifiableList());\n    }\n    @GET\n    @Path(\"{id}\")\n    public Developer findById(@PathParam(\"id\") String id) {\n        return this.repository.findById(id)\n        .orElseThrow(() -> new WebApplicationException\n         (Response.Status.NOT_FOUND));\n    }\n    @PUT\n    public Developer insert(Developer developer) {\n        return this.repository.save(developer);\n    }\n    @DELETE\n    @Path(\"{id}\")\n    public void deleteById(@PathParam(\"id\") String id) {\n        this.repository.deleteById(id);\n    }\n}\n```"]