["```java\n    <dependency>\n      <groupId>org.reactivestreams</groupId>\n      <artifactId>reative-streams</artifactId>\n      <version>1.0.1</version>\n    </dependency>\n\n    <dependency>\n      <groupId>org.reactivestreams</groupId>\n      <artifact>reactive-streams-tck</artifactId>\n      <version>1.0.0</version>\n      <scope>test</scope>\n    </dependency>\n```", "```java\n    @FunctionalInterface\n    public static interface Flow.Publisher<T>\n```", "```java\n    public static interface Flow.Subscriber<T>\n```", "```java\n    public static interface Flow.Subscription\n```", "```java\n    static interface Flow.Processor<T,R> extends Flow.Subscriber<T>,\n     Flow.Publisher<R>\n```", "```java\n    import java.util.concurrent.Flow.*;\n\n    public class packtSubscriber<T> implements Subscriber<T>\n    {\n      private Subscription theSubscription;\n\n      // We will override the four Subscriber interface methods\n\n      @Override\n      public void onComplete()\n      {\n        System.out.println(\"Data stream ended\");\n      }\n\n      @Override\n      public void onError(Throwable theError)\n      {\n        theError.printStackTrace();\n      }\n\n      @Override\n      public void onNext(T theItem)\n      {\n        System.out.println(\"Next item received: \" + theItem);\n        theSubscription.request(19);  // arbitrary number for\n         example purposes\n      }\n\n      @Override\n      public void onSubscribe(Subscription theSubscription)\n      {\n        this.theSubscription = theSubscription;\n        theSubscription.request(19);\n      }\n\n    } \n```", "```java\n    import java.util.concurrent.SubsmissionPublisher;\n\n    . . . \n\n    // First, let's create a Publisher instance\n    SubmissionPublisher<String> packtPublisher = new \n     SubmissionPublisher<>();\n\n    // Next, we will register a Subscriber\n    PacktSubscriber<String> currentSubscriber = new \n     PacktSubscriber<>();\n    packtPublisher.subscribe(currentSubscriber);\n\n    // Finally, we will publish data to the Subscriber and \n       close the publishing effort\n    System.out.println(\"||---- Publishing Data Stream ----||\");\n    . . . \n    packtPublisher.close();\n    System.out.println(\"||---- End of Data Stream Reached ----||\");\n```", "```java\n    public synchronized void protectedMethod()\n    {\n      . . . \n    }\n```", "```java\n    . . . \n    public class unprotectedMethod()\n    {\n      . . . \n      public int doSomething(int tValue) \n      {\n        synchronized (this)\n        {\n          if (tValue != 0)\n          {\n            // do something to change tValue\n            return tValue;\n          }\n        }\n      } \n    }\n```", "```java\n    . . .\n    class PacktThread extends Thread\n    {\n      . . .\n      public void run()\n      {\n        . . . \n      }\n    }\n\n    . . . \n\n    Thread varT = new PacktThread();\n\n    . . .\n\n    // This next line is start the Thread by executing\n       the run() method.\n    varT.start();\n\n    . . . \n```", "```java\n    . . . \n    class PacktRunner implements Runnable\n    {\n       . . .\n      public void run()\n      {\n        . . .\n      }\n    }\n\n    . . . \n\n    PacktRunner varR = new PacktRunner();\n    Thread varT = new Thread(varR);\n\n    . . .\n\n    // This next line is start the Thread by executing the \n       run() method.\n    varT.start();\n\n    . . . \n```", "```java\n    public static interface\n     CompletableFuture.AsynchronousCompletionTask\n```", "```java\n    . . . \n\n    volatile boolean notInReceiptOfEventNotification; \n\n    . . . \n\n    while ( notInReceiptOfEventNotification );\n    {\n      java.lang.Thread.onSpinWait();\n    }\n\n    // Add functionality here to read and process the event\n\n    . . . \n```"]