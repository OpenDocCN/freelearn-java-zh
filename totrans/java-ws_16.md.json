["```java\nboolean test(T t);\n```", "```java\nPredicate<T> and(Predicate<T>);\nPredicate<T> or(Predicate<T>);\nPredicate<T> not(Predicate<T>);\n```", "```java\n    package com.packt.java.chapter16;\n    public class Main {\n        public static void main(String[] args) {\n        // write your code here\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class Exercise1 {\n        public static void main(String[] args) {\n        // write your code here\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public interface Sensor {\n        int batteryHealth();\n        void batteryHealth(int health);\n        boolean triggered();\n        void triggered(boolean state);\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class Gateway implements Sensor {\n        private int batteryHealth;\n        private boolean triggered;\n        @Override\n        public int batteryHealth() {\n            return batteryHealth;\n        }\n        @Override\n        public void batteryHealth(int health) {\n            this.batteryHealth = health;\n        }\n        @Override\n        public boolean triggered() {\n            return triggered;\n        }\n        @Override\n        public void triggered(boolean state) {\n            triggered = state;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class Fire implements Sensor {\n        private int batteryHealth;\n        private boolean triggered;\n        private int temperature;\n        @Override\n        public int batteryHealth() {\n            return batteryHealth;\n        }\n        @Override\n        public void batteryHealth(int health) {\n        }\n        @Override\n        public boolean triggered() {\n            return triggered;\n        }\n        @Override\n        public void triggered(boolean state) {\n        }\n        public int temperature() {\n            return temperature;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class Movement implements Sensor {\n        private int batteryHealth;\n        private boolean isTriggered;\n        private int ambientLight;\n        @Override\n        public int batteryHealth() {\n            return batteryHealth;\n        }\n        @Override\n        public void batteryHealth(int health) {\n        }\n        @Override\n        public boolean triggered() {\n            return isTriggered;\n        }\n        @Override\n        public void triggered(boolean state) {\n        }\n        public int ambientLight() {\n            return ambientLight;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class Fire implements Sensor {\n        private int batteryHealth;\n        private boolean triggered;\n        private int temperature;\n        public Fire(int batteryHealth, boolean isTriggered, int temperature) {\n            this.batteryHealth = batteryHealth;\n            this.triggered = isTriggered;\n            this.temperature = temperature;\n        }\n        @Override\n        public int batteryHealth() {\n            return batteryHealth;\n        }\n        @Override\n        public void batteryHealth(int health) {\n        }\n        @Override\n        public boolean triggered() {\n            return triggered;\n        }\n        @Override\n        public void triggered(boolean state) {\n        }\n        public int temperature() {\n            return temperature;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    public class HasAlarm {\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Predicate;\n    public class HasAlarm implements Predicate<Sensor> {\n        @Override\n        public boolean test(Sensor sensor) {\n            return sensor.triggered();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.function.Predicate;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n            for (Sensor sensor : sensors) {\n                if (new HasAlarm().test(sensor)) {\n                    System.out.println(\"Alarm was triggered\");\n                }\n            }\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Predicate;\n    public class HasWarning implements Predicate<Sensor> {\n        public static final int BATTERY_WARNING = 10;\n        @Override\n        public boolean test(Sensor sensor) {\n            return sensor.batteryHealth() < BATTERY_WARNING;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.function.Predicate;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n            Predicate<Sensor> hasAlarmOrWarning = new HasAlarm().or(new           HasWarning());\n            for (Sensor sensor : sensors) {\n                if (new HasAlarm().test(sensor)) {\n                    System.out.println(\"Alarm was triggered\");\n                }\n            }\n        }\n    }\n    ```", "```java\nExercise1.java\n1  package com.packt.java.chapter16;\n2  \n3  import java.util.ArrayList;\n4  import java.util.List;\n5  import java.util.function.Predicate;\n6  \n7  public class Exercise1 {\n8  \n9      public static void main(String[] args) {\n10         List<Sensor> sensors = new ArrayList<>();\n11         sensors.add(new Gateway(34, false));\n12         sensors.add(new Gateway(14, true));\n13         sensors.add(new Gateway(74, false));\n14         sensors.add(new Gateway(8, false));\n15         sensors.add(new Gateway(18, false));\n16         sensors.add(new Gateway(9, false));\nhttps://packt.live/2P9njsy\n```", "```java\nvoid accept(T);\n```", "```java\nConsumer<T> andThen(Consumer<T>);\n```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.function.Predicate;\n    public class Exercise2 {\n        static boolean alarmServiceNotified;\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n            Predicate<Sensor> hasAlarmOrWarning = new HasAlarm().or(new           HasWarning());\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Consumer;\n    public class SendAlarm implements Consumer<Sensor> {\n        @Override\n        public void accept(Sensor sensor) {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Consumer;\n    public class SendAlarm implements Consumer<Sensor> {\n        @Override\n        public void accept(Sensor sensor) {\n            if (sensor.triggered()) {\n                Exercise2.alarmServiceNotified = true;\n            }\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.function.Predicate;\n    public class Exercise2 {\n        static boolean alarmServiceNotified;\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n            Predicate<Sensor> hasAlarmOrWarning = new HasAlarm().or(new       HasWarning());\n            SendAlarm sendAlarm = new SendAlarm();\n        }\n    }\n    ```", "```java\n            sensors.stream().filter(hasAlarmOrWarning).forEach(sendAlarm);\n    ```", "```java\n            if (alarmServiceNotified) {\n                System.out.println(\"Alarm service notified\");\n            }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Consumer;\n    public class ResetAlarm implements Consumer<Sensor> {\n        @Override\n        public void accept(Sensor sensor) {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n            import java.util.function.Consumer;\n    public class ResetAlarm implements Consumer<Sensor> {\n        @Override\n        public void accept(Sensor sensor) {\n            sensor.triggered(false);\n            sensor.batteryHealth(50);\n            Exercise2.alarmServiceNotified = false;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    import java.util.function.Consumer;\n    import java.util.function.Predicate;\n    public class Exercise2 {\n        static boolean alarmServiceNotified;\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n            Predicate<Sensor> hasAlarmOrWarning = new HasAlarm().or(new       HasWarning());\n            if (sensors.stream().anyMatch(hasAlarmOrWarning)) {\n                System.out.println(\"Alarm or warning was triggered\");\n            }\n            SendAlarm sendAlarm = new SendAlarm();\n            ResetAlarm resetAlarm = new ResetAlarm();\n            sensors.stream().filter(hasAlarmOrWarning)      .forEach(sendAlarm.andThen(resetAlarm));\n            if (alarmServiceNotified) {\n                System.out.println(\"Alarm service notified\");\n            }\n        }\n    }\n    ```", "```java\nExercise2.java\n21         Predicate<Sensor> hasAlarmOrWarning = new HasAlarm().or(new       HasWarning());\n22 \n23         if (sensors.stream().anyMatch(hasAlarmOrWarning)) {\n24             System.out.println(\"Alarm or warning was triggered\");\n25         }\n26 \n27         SendAlarm sendAlarm = new SendAlarm();\n28 \n29         ResetAlarm resetAlarm = new ResetAlarm();\n30 \n31         sensors.stream().filter(hasAlarmOrWarning)      .forEach(sendAlarm.andThen(resetAlarm));\n32 \n33         if (alarmServiceNotified) {\n34             System.out.println(\"Alarm service notified\");\n35         }\n36 \n37         if (sensors.stream().anyMatch(hasAlarmOrWarning.negate())) {\n38             System.out.println(\"Nothing was triggered\");\n39         }\nhttps://packt.live/2JqD7n9\n```", "```java\nR apply(T);\n```", "```java\nFunction<V, R> compose(Function<V, T>);\n```", "```java\nFunction<T, V> andThen(Function<R, V>);\n```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Exercise3 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Gateway(9, false));\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Function;\n    public class ExtractBatteryHealth implements Function<Sensor, Integer> {\n        @Override\n        public Integer apply(Sensor sensor) {\n            return null;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.function.Function;\n    public class ExtractBatteryHealth implements Function<Sensor, Integer> {\n        @Override\n        public Integer apply(Sensor sensor) {\n            return sensor.batteryHealth();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Exercise3 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Fire(78, false, 21));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Movement(87, false, 45));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Fire(32, false, 23));\n            sensors.add(new Gateway(9, false));\n            sensors.add(new Movement(76, false, 41));\n            ExtractBatteryHealth extractBatteryHealth = new ExtractBatteryHealth();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.List;\n    public class Exercise3 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Fire(78, false, 21));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Movement(87, false, 45));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Fire(32, false, 23));\n            sensors.add(new Gateway(9, false));\n            sensors.add(new Movement(76, false, 41));\n            ExtractBatteryHealth extractBatteryHealth = new           ExtractBatteryHealth();\n            Integer[] batteryHealths =           sensors.stream().map(extractBatteryHealth)          .toArray(Integer[]::new);\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter16;\n    import java.util.ArrayList;\n    import java.util.Arrays;\n    import java.util.List;\n    public class Exercise3 {\n        public static void main(String[] args) {\n            List<Sensor> sensors = new ArrayList<>();\n            sensors.add(new Gateway(34, false));\n            sensors.add(new Gateway(14, true));\n            sensors.add(new Fire(78, false, 21));\n            sensors.add(new Gateway(74, false));\n            sensors.add(new Gateway(8, false));\n            sensors.add(new Movement(87, false, 45));\n            sensors.add(new Gateway(18, false));\n            sensors.add(new Fire(32, false, 23));\n            sensors.add(new Gateway(9, false));\n            sensors.add(new Movement(76, false, 41));\n            ExtractBatteryHealth extractBatteryHealth = new ExtractBatteryHealth();\n            Integer[] batteryHealths =           sensors.stream().map(extractBatteryHealth)          .toArray(Integer[]::new);\n            System.out.println(Arrays.toString(batteryHealths));\n        }\n    }\n    ```"]