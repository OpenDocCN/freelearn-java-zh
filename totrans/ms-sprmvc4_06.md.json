["```java\ncompile 'org.springframework.boot:spring-boot-starter-security'\n```", "```java\nUsing default security password: 13212bb6-8583-4080-b790-103408c93115\n\n```", "```java\nsecurity.user.name=admin\nsecurity.user.password=secret\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n            throws Exception {\n        auth.inMemoryAuthentication()\n                .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n                .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n}\n```", "```java\n@RestController\n@RequestMapping(\"/api\")\n@Secured(\"ROLE_ADMIN\")\npublic class UserApiController {\n  // ... code omitted\n}\n```", "```java\n> http GET 'http://localhost:8080/api/users' -a user:user -p=h\nHTTP/1.1 403 Forbidden\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nContent-Type: application/json;charset=UTF-8\nDate: Sat, 23 May 2015 17:40:09 GMT\nExpires: 0\nPragma: no-cache\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=2D4761C092EDE9A4DB91FA1CAA16C59B; Path=/; HttpOnly\nTransfer-Encoding: chunked\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\n\n```", "```java\n> http GET 'http://localhost:8080/api/users' -a admin:admin -p=h\nHTTP/1.1 200 OK\nCache-Control: no-cache, no-store, max-age=0, must-revalidate\nContent-Type: application/json;charset=UTF-8\nDate: Sat, 23 May 2015 17:42:58 GMT\nExpires: 0\nPragma: no-cache\nServer: Apache-Coyote/1.1\nSet-Cookie: JSESSIONID=CE7A9BF903A25A7A8BAD7D4C30E59360; Path=/; HttpOnly\nTransfer-Encoding: chunked\nX-Content-Type-Options: nosniff\nX-Frame-Options: DENY\nX-XSS-Protection: 1; mode=block\n\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(securedEnabled = true)\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n        throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n            .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .httpBasic()\n            .and()\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(\"/login\", \"/logout\").permitAll()\n            .antMatchers(HttpMethod.GET, \"/api/**\").hasRole(\"USER\")\n            .antMatchers(HttpMethod.POST, \"/api/**\").hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.PUT, \"/api/**\").hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.DELETE, \"/api/**\").hasRole(\"ADMIN\")\n            .anyRequest().authenticated();\n    }\n}\n```", "```java\ncompile 'org.thymeleaf.extras:thymeleaf-extras-springsecurity3'\n```", "```java\n<!DOCTYPE html>\n<html \n\n      >\n<head>\n  <!-- content trimmed -->\n</head>\n<body>\n\n<!-- content trimmed -->\n<nav>\n    <div class=\"nav-wrapper indigo\">\n        <ul class=\"right\">\n        <!-- content trimmed -->\n        </ul>\n    </div>\n</nav>\n<div>\n You are logged as <b sec:authentication=\"name\" /> with roles <span sec:authentication=\"authorities\" />\n -\n <form th:action=\"@{/logout}\" method=\"post\" style=\"display: inline-block\">\n <input type=\"submit\" value=\"Sign Out\" />\n </form>\n <hr/>\n</div>\n\n<section layout:fragment=\"content\">\n    <p>Page content goes here</p>\n</section>\n\n<!-- content trimmed -->\n</body>\n</html>\n```", "```java\n<div sec:authorize=\"hasRole('ROLE_ADMIN')\">\n    You are an administrator\n</div>\n```", "```java\n@Configuration\n@Order(1)\npublic class ApiSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    public void configureAuth(AuthenticationManagerBuilder auth)\n        throws Exception {\n        auth.inMemoryAuthentication()\n            .withUser(\"user\").password(\"user\").roles(\"USER\").and()\n            .withUser(\"admin\").password(\"admin\").roles(\"USER\", \"ADMIN\");\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .antMatcher(\"/api/**\")\n            .httpBasic().and()\n            .csrf().disable()\n            .authorizeRequests()\n            .antMatchers(HttpMethod.GET).hasRole(\"USER\")\n            .antMatchers(HttpMethod.POST).hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.PUT).hasRole(\"ADMIN\")\n            .antMatchers(HttpMethod.DELETE).hasRole(\"ADMIN\")\n            .anyRequest().authenticated();\n    }\n}\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n\n@Configuration\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                .formLogin()\n                .defaultSuccessUrl(\"/profile\")\n                .and()\n                .logout().logoutSuccessUrl(\"/login\")\n                .and()\n                .authorizeRequests()\n                .antMatchers(\"/webjars/**\", \"/login\").permitAll()\n                .anyRequest().authenticated();\n    }\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .formLogin()\n        .loginPage(\"/login\") // <= custom login page\n        .defaultSuccessUrl(\"/profile\")\n        // the rest of the configuration stays the same\n}\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class LoginController {\n\n    @RequestMapping(\"/login\")\n    public String authenticate() {\n        return \"login\";\n    }\n}\n```", "```java\n<!DOCTYPE HTML>\n<html \n\n      layout:decorator=\"layout/default\">\n<head>\n    <title>Login</title>\n</head>\n<body>\n<div class=\"section no-pad-bot\" layout:fragment=\"content\">\n    <div class=\"container\">\n\n        <h2 class=\"header center orange-text\">Login</h2>\n\n        <div class=\"row\">\n            <div id=\"errorMessage\" class=\"card-panel red lighten-2\" th:if=\"${param.error}\">\n                <span class=\"card-title\">Invalid user name or password</span>\n            </div>\n\n            <form class=\"col s12\" action=\"/login\" method=\"post\">\n                <div class=\"row\">\n                    <div class=\"input-field col s12\">\n                        <input id=\"username\" name=\"username\" type=\"text\" class=\"validate\"/>\n                        <label for=\"username\">Username</label>\n                    </div>\n                </div>\n                <div class=\"row\">\n                    <div class=\"input-field col s12\">\n                        <input id=\"password\" name=\"password\" type=\"password\" class=\"validate\"/>\n                        <label for=\"password\">Password</label>\n                    </div>\n                </div>\n                <div class=\"row center\">\n                    <button class=\"btn waves-effect waves-light\" type=\"submit\" name=\"action\">Submit\n                        <i class=\"mdi-content-send right\"></i>\n                    </button>\n                </div>\n                <input type=\"hidden\" th:name=\"${_csrf.parameterName}\" th:value=\"${_csrf.token}\"/>\n            </form>\n        </div>\n    </div>\n</div>\n</body>\n</html>\n```", "```java\n<div sec:authorize=\"isAuthenticated()\">\n    You are logged as <b sec:authentication=\"name\"/> with roles <span sec:authentication=\"authorities\"/>\n    -\n    <form th:action=\"@{/logout}\" method=\"post\" style=\"display: inline-block\">\n        <input type=\"submit\" value=\"Sign Out\"/>\n    </form>\n    <hr/>\n</div>\n```", "```java\n.antMatchers(\"/webjars/**\", \"/login\", \"/signin/**\", \"/signup\").permitAll()\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.UserProfile;\nimport org.springframework.social.connect.web.SignInAdapter;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.NativeWebRequest;\n\n@Component\npublic class AuthenticatingSignInAdapter implements SignInAdapter {\n\n    public static void authenticate(Connection<?> connection) {\n        UserProfile userProfile = connection.fetchUserProfile();\n        String username = userProfile.getUsername();\n        UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(username, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authentication);\n        System.out.println(String.format(\"User %s %s connected.\", userProfile.getFirstName(), userProfile.getLastName()));\n    }\n\n    @Override\n    public String signIn(String userId, Connection<?> connection, NativeWebRequest request) {\n        authenticate(connection);\n        return null;\n    }\n}\n```", "```java\npackage masterSpringMvc.authentication;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.connect.Connection;\nimport org.springframework.social.connect.ConnectionFactoryLocator;\nimport org.springframework.social.connect.UsersConnectionRepository;\nimport org.springframework.social.connect.web.ProviderSignInUtils;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.context.request.WebRequest;\n\n@Controller\npublic class SignupController {\n    private final ProviderSignInUtils signInUtils;\n\n    @Autowired\n    public SignupController(ConnectionFactoryLocator connectionFactoryLocator, UsersConnectionRepository connectionRepository) {\n        signInUtils = new ProviderSignInUtils(connectionFactoryLocator, connectionRepository);\n    }\n\n    @RequestMapping(value = \"/signup\")\n    public String signup(WebRequest request) {\n        Connection<?> connection = signInUtils.getConnectionFromSession(request);\n        if (connection != null) {\n            AuthenticatingSignInAdapter.authenticate(connection);\n            signInUtils.doPostSignUp(connection.getDisplayName(), request);\n        }\n        return \"redirect:/profile\";\n    }\n}\n```", "```java\n<form th:action=\"@{/signin/twitter}\" method=\"POST\" class=\"center\">\n    <div class=\"row\">\n        <button class=\"btn indigo\" name=\"twitterSignin\" type=\"submit\">Connect with Twitter\n            <i class=\"mdi-social-group-add left\"></i>\n        </button>\n    </div>\n</form>\n```", "```java\n@Bean\n@ConditionalOnBean(SignInAdapter.class)\n@ConditionalOnMissingBean(ProviderSignInController.class)\npublic ProviderSignInController signInController(\n        ConnectionFactoryLocator factoryLocator,\n        UsersConnectionRepository usersRepository, SignInAdapter signInAdapter) {\n    ProviderSignInController controller = new ProviderSignInController(\n            factoryLocator, usersRepository, signInAdapter);\n    if (!CollectionUtils.isEmpty(this.signInInterceptors)) {\n controller.setSignInInterceptors(this.signInInterceptors);\n    }\n    return controller;\n}\n```", "```java\n@Bean\n@Primary\npublic UsersConnectionRepository getUsersConnectionRepository(\n  DataSource dataSource, ConnectionFactoryLocator connectionFactoryLocator) {\n    return new JdbcUsersConnectionRepository(\n      dataSource, connectionFactoryLocator, Encryptors.noOpText());\n}\n```", "```java\nbrew install redis\n\n```", "```java\nredis-server\n\n```", "```java\ncompile 'org.springframework.boot:spring-boot-starter-redis'\ncompile 'org.springframework.session:spring-session:1.0.1.RELEASE'\n```", "```java\nspring.redis.host=localhost\nspring.redis.port=6379\n```", "```java\npackage masterSpringMvc.config;\n\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.context.annotation.Profile;\nimport org.springframework.session.data.redis.config.annotation.web.http.EnableRedisHttpSession;\n\n@Configuration\n@Profile(\"redis\")\n@EnableRedisHttpSession\npublic class RedisConfig {\n}\n```", "```java\n-Dspring.profiles.active=redis\n\n```", "```java\njava -Dserver.port=$PORT -Dspring.profiles.active=redis -jar app.jar\n\n```", "```java\nSPRING_PROFILES_ACTIVE=redis ./gradlew bootRun\n\n```", "```java\n> redis-cli\n127.0.0.1:6379> KEYS *\n(empty list or set)\n\n```", "```java\n127.0.0.1:6379> KEYS *\n1) \"spring:session:expirations:1432487760000\"\n2) \"spring:session:sessions:1768a55b-081a-4673-8535-7449e5729af5\"\n127.0.0.1:6379> HKEYS spring:session:sessions:1768a55b-081a-4673-8535-7449e5729af5\n1) \"sessionAttr:SPRING_SECURITY_CONTEXT\"\n2) \"sessionAttr:org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository.CSRF_TOKEN\"\n3) \"lastAccessedTime\"\n4) \"maxInactiveInterval\"\n5) \"creationTime\"\n\n```", "```java\n$ keytool -genkey -alias masterspringmvc -keyalg RSA -keystore src/main/resources/tomcat.keystore\nEnter keystore password: password\nRe-enter new password: password\nWhat is your first and last name?\n [Unknown]:  Master Spring MVC\nWhat is the name of your organizational unit?\n [Unknown]:  Packt\nWhat is the name of your organization?\n [Unknown]:  Packt\nWhat is the name of your City or Locality?\n [Unknown]:  Paris\nWhat is the name of your State or Province?\n [Unknown]:  France\nWhat is the two-letter country code for this unit?\n [Unknown]:  FR\nIs CN=Master Spring MVC, OU=Packt, O=Packt, L=Paris, ST=France, C=FR correct?\n [no]:  yes\n\nEnter key password for <masterspringmvc>\n (RETURN if same as keystore password): password2\nRe-enter new password: password2\n\n```", "```java\nserver.port = 8443\nserver.ssl.key-store = classpath:tomcat.keystore\n server.ssl.key-store-password = password\nserver.ssl.key-password = password2\n\n```", "```java\n@Configuration\npublic class SslConfig {\n\n    @Bean\n    public EmbeddedServletContainerFactory servletContainer() throws IOException {\n        TomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory();\n        tomcat.addAdditionalTomcatConnectors(createSslConnector());\n        return tomcat;\n    }\n\n    private Connector createSslConnector() throws IOException {\n        Connector connector = new Connector(Http11NioProtocol.class.getName());\n        Http11NioProtocol protocol =\n                (Http11NioProtocol) connector.getProtocolHandler();\n        connector.setPort(8443);\n        connector.setSecure(true);\n        connector.setScheme(\"https\");\n        protocol.setSSLEnabled(true);\n        protocol.setKeyAlias(\"masterspringmvc\");\n        protocol.setKeystorePass(\"password\");\n        protocol.setKeyPass(\"password2\");\n        protocol.setKeystoreFile(new ClassPathResource(\"tomcat.keystore\").getFile().getAbsolutePath());\n        protocol.setSslProtocol(\"TLS\");\n        return connector;\n    }\n}\n```", "```java\n@Configuration\npublic class WebSecurityConfiguration extends WebSecurityConfigurerAdapter {\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .requiresChannel().anyRequest().requiresSecure()\n            .and()\n            /* rest of the configuration */;\n    }\n}\n```", "```java\nserver.tomcat.remote_ip_header=x-forwarded-for\nserver.tomcat.protocol_header=x-forwarded-proto\n\n```"]