- en: Chapter 5. Exploring Code Coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains the code coverage, coverage tools, and provides step-by-step
    guidance to generate a coverage report.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Code, branch, and line coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coverage tools such as Clover, Cobertura, EclEmma, and JaCoCo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring coverage using Eclipse plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ant, Maven, and Gradle to generate reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding code coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Code coverage** is a measurement of percentage of instructions of code being
    executed while the automated tests are running.'
  prefs: []
  type: TYPE_NORMAL
- en: A piece of code with high code coverage implies that the code has been thoroughly
    unit tested and has a lower chance of containing bugs than code with a low code
    coverage. You should concentrate on writing meaningful (business logic) unit tests
    and not on having 100 percent coverage because it's easy to cheat and have 100
    percent coverage with completely useless tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Numerous metrics can be used to measure the code coverage. The following are
    the ones that are widely used:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Statement or line coverage**: This measures the statements or lines being
    covered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Branch coverage**: This measures the percentage of each branch of each control
    structure, such as the if else and switch case statements'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Function or method coverage**: This measures the function execution'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following Java code will elucidate the metrics.
  prefs: []
  type: TYPE_NORMAL
- en: 'An `absSum` method takes two integer arguments and then returns the absolute
    sum of the two arguments. An `Integer` type can hold a `NULL` value, so the method
    checks for `NULL`. If both arguments are `NULL`, then the method returns `0` as
    given in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This example has 10 branches: the first `if(op1 == null && op2 == null)` statement
    has four branches: `op1 == null`, `op1!= null`, `op2 == null`, and `op2 != null`.
    Similarly, the second `if` statement has four branches and the last `if (op2 ==
    null)` statement has two branches, `op2== null` and `op2 != null`.'
  prefs: []
  type: TYPE_NORMAL
- en: If a test passes two non-null integers to the `absSum` method, then it covers
    four lines, that is, three `if` statements and the final `return` statement, but
    the first three `return` statements remain uncovered. It covers three out of ten
    branches; the first `if` statement covers one out of four branches, that is, `op1
    == null`. Similarly, the second `if` statement covers one branch out of four branches,
    and the last `if` statement covers one branch out of two branches `op2 != null`.
    So, the branch coverage becomes 30 percent.
  prefs: []
  type: TYPE_NORMAL
- en: 'To cover all instructions and all branches, the following four input pairs
    need to be passed to the method: `[null, null]`, `[null, value]`, `[value, null]`,
    and `[value, value]`.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning the inner details of code instrumentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Coverage is measured by the ratio of basic code branches or instructions that
    were exercised by some tests to the total number of instructions or branches available
    in the system under test.
  prefs: []
  type: TYPE_NORMAL
- en: The ratio is measured in a series of steps. First, in a copy of source code,
    each block of statement is instrumented with an accumulator flag. Then, the tests
    run on the instrumented code and update the flags. Finally, a program collects
    the accumulator flags and measures the ratio of the flags turned on versus the
    total number of flags. Bytecode can be changed on the fly or during compilation.
    This is actually what test coverage frameworks do under the covers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two code instrumentation options are available: source code instrumentation
    and object code instrumentation. Object code instrumentation modifies the generated
    bytecode, so it is hard to implement.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code coverage example has seven lines, but if we expand the branches
    into lines, then it will result in 14 lines. If a coverage tool needs to instrument
    the code, then it will modify the source code and initialize an array of length
    14 with `0` and set `1` when a line is executed while a test is being run. The
    following example demonstrates the source code instrumentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: After test execution, the coverage tool checks the `visitedLines` array and
    computes the ratio of all lines that have `visitedLines[index]` equal to `1` versus
    the total number of lines. If we test the method with the input sets `[null, null]`
    and `[value, value]`, then the five lines (lines 4, 7, 8, 9, and 12) remain uncovered.
    To cover 100 percent, we need to test the method with four possible combinations
    of null and non-null integers.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Eclipse plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned that the coverage tools can either instrument the object code or
    source code. Java code coverage tools can be categorized into two sections: tools
    that instrument the source code and tools that instrument the bytecode.'
  prefs: []
  type: TYPE_NORMAL
- en: Source code instrumentation is easier but requires source code recompilation.
    Bytecode instrumentation is complex but doesn't require source code recompilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the available Java code coverage tools:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cobertura**: This tool instruments the bytecode offline and is a widely used
    coverage tool. Cobertura is an open source project (GNU GPL) and is very easy
    to configure with Eclipse and build tools. Version 1.9, which was released in
    March 2010, is the latest stable version.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**EMMA**: This tool instruments the bytecode offline or on the fly and is distributed
    under the **Common Public License** (**CPL**). Version 2.1, released in June 2005,
    is the latest version. **Google CodePro AnalytiX** is based on EMMA.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clover**: This tool instruments the source code and comes with a proprietary
    Atlassian license, and the latest stable version, 3.2, was released in February
    2014.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JaCoCo**: This tool is distributed under **Eclipse Public License** (**EPL**).
    JaCoCo instruments the bytecode on the fly while running the code. The latest
    stable version, 0.6.4, was released in December 2013\. JaCoCo was a replacement
    of EMMA. EclEmma is a JaCoCo-based Eclipse plugin.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section will explore the Eclipse plugins based on the preceding
    Java-based coverage tools.
  prefs: []
  type: TYPE_NORMAL
- en: Uncovering the Clover plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A trial version of the Clover plugin can be installed for a month. You can refer
    to the installation instruction at [https://confluence.atlassian.com/display/CLOVER/](https://confluence.atlassian.com/display/CLOVER/).
    The Clover Eclipse plugin supports the site update and manual download installation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to install and execute the Clover plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: During installation, Clover shows a list of installable elements. Expand the
    **Clover** blind and select **Clover 3** and **Clover 3 Ant Support**. The following
    screenshot displays the details:![Uncovering the Clover plugin](img/00059.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Show View** menu and select all **Clover** views. The following screenshot
    displays the **Clover** views:![Uncovering the Clover plugin](img/00060.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Java project named `Chapter05` and add the `Metrics.java` and `MetricsTest.java`
    Java files as designed in the preceding section. Open Clover's **Coverage Explorer**
    and click on the **Enable or disable Clover on one or more project** button. The
    following screenshot shows the button details:![Uncovering the Clover plugin](img/00061.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Chapter05` project. Clover will enable the source code instrumentation
    on this project. Right-click on the `MetricsTest` file and go to **Run With Clover
    As** | **JUnit Test**. The following screenshot shows the pop-up menu:![Uncovering
    the Clover plugin](img/00062.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Coverage Explorer** and it will show the following coverage output:![Uncovering
    the Clover plugin](img/00063.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Clover Dashboard**. The dashboard will show you the coverage details,
    test results, complexity, and the least-tested methods. The following screenshot
    shows the dashboard details:![Uncovering the Clover plugin](img/00064.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the source code. The clover plugin decorates the source code; the uncovered
    lines become red and the covered lines become green. It also shows the execution
    count against each line. The following is the instrumented source code output:![Uncovering
    the Clover plugin](img/00065.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with the EclEmma plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: EclEmma Version 2.0 is based on the JaCoCo code coverage library. Follow the
    instructions at [http://www.eclemma.org/index.html](http://www.eclemma.org/index.html)
    to install the EclEmma Eclipse plugin. Like Clover, EclEmma supports site update
    and its manual download.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once EclEmma is installed, follow the steps to configure and execute tests
    using EclEmma:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the test class and go to **Coverage As** | **1 JUnit Test**.
    This will instrument the bytecode on the fly and bring up the coverage report.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After EclEmma installation, a new menu button appears under the main menu panel.
    When you expand this menu, it shows the JUnit tests that have been executed recently.
    Click on the menu button to generate the coverage report. The following screenshot
    shows the EclEmma code coverage menu button:![Working with the EclEmma plugin](img/00066.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you open the **Coverage** tab, it shows the coverage details. The following
    screenshot shows the output:![Working with the EclEmma plugin](img/00067.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The branch coverage report is more prominent in EclEmma. The following screenshot
    shows the coverage details:![Working with the EclEmma plugin](img/00068.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A green diamond signifies that the branch is 100 percent covered, a red diamond
    signifies the branch is not covered, and a yellow diamond signifies that the branch
    is partially covered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Examining the eCobertura plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**eCobertura** is a Cobertura-based Eclipse plugin. eCobertura shows the branch
    coverage in a tabular format. To install the eCobertura plugin, go to [https://marketplace.eclipse.org/content/ecobertura#.UxYBmoVh85w](https://marketplace.eclipse.org/content/ecobertura#.UxYBmoVh85w)
    and drag the **Install** button to your Eclipse workspace that is running. Eclipse
    will automatically install the plugin for you. The following screenshot shows
    the Marketplace **Install** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the eCobertura plugin](img/00069.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After installation, a new menu button appears under the menu panel for Cobertura,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Examining the eCobertura plugin](img/00070.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the steps to measure code coverage using eCobertura:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Show View** | **Other,** and select the **Coverage Session View** option
    under **eCobertura**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute the test and then click on the Cobertura menu button, or from the dropdown,
    select the test you want to measure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the **Coverage Session View** tab. This will show you the following output:![Examining
    the eCobertura plugin](img/00071.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the branch coverage is 60 percent. In the preceding section, we measured
    10 branches. Using our custom coverage program, we measured that 4 out of 10 branches
    were covered. It proves that our custom code coverage program works fine.
  prefs: []
  type: TYPE_NORMAL
- en: Measuring coverage using Gradle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradle can be configured to generate coverage reports using JaCoCo. This section
    will explain how to configure the Gradle JaCoCo plugin in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to configure the Gradle plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a base folder named `Chapter05` under any directory, such as `D:/Packt`;
    then, add a `lib` folder under `Chapter05` and copy the `JUnit4` and `hamcrest`
    JARs to the `lib` folder. Add another folder named `Chapter05` under the base
    folder `Chapter05` for the Java project. As per Gradle conventions, source files
    are kept under `src/main/java` and test files are kept under `src/test/java`.
    Create the directories under `Chapter05\Chapter05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This `Chapter05` naming strategy is used for you to easily track the project
    and download the code from the Packt Publishing website, but your code should
    express the intent of the code. The name `Chapter05` doesn't make any sense, maybe
    you can name it something like `SimpleGradleProject` or `GradleCoverageProject`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the content of the Eclipse project and the `Metrics` and `MetricsTest`
    Java files that we created in the *Uncovering the Clover plugin* section to the
    new directory. Copy the content of the `src` folder to `src/main/java` and the
    `test` folder to `src/test/java` (as per Gradle conventions).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `build.gradle` file directly under `Chapter05\Chapter05`, and add
    the following code snippet to the file to enable the JaCoCo coverage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `jaCoCo` plugin adds a new task, `jacocoTestReport`. To execute the `jacocoTestReport`
    task, a `mavenCentral()` repository dependency needs to be added to the `repositories`
    closure. Gradle downloads the required `jaCoCo` JARs from the `mavenCentral` repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the command prompt, go to the `Chapter05\Chapter05` directory, and run
    the `gradle jacocoTestReport` command. This will download the JAR files and generate
    the coverage report. The following screenshot shows the console output:![Measuring
    coverage using Gradle](img/00072.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `Chapter05\Chapter05\build\jacocoHtml` and launch the `index.html` file.
    The following is the JaCoCo coverage report output:![Measuring coverage using
    Gradle](img/00073.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Working with the Maven Cobertura plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven has a Cobertura plugin to measure code coverage; this section will explain
    how to configure the Cobertura Maven plugin in your project.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Cobertura uses `asm` to instrument the bytecode. The `asm` framework is a Java
    bytecode manipulation and analysis framework. Visit [http://asm.ow2.org/](http://asm.ow2.org/)
    for `asm` details. Cobertura modifies the `.class` file, imports `net.sourceforge.cobertura.coveragedata.*`,
    implements the `HasBeenInstrumented` interface, and adds code to capture coverage,
    such as `ProjectData.getGlobalProjectData().getOrCreateClassData("com.packt.coverage.Metrics").touch(21);`.
  prefs: []
  type: TYPE_NORMAL
- en: After instrumenting the bytecode, Cobertura creates a `.ser` file and updates
    the file during test execution. This `.ser` file contains the test coverage details.
    The instrumented bytecode can be slightly slower than normal without it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the ensuing steps to configure Maven to generate a Cobertura report:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `pom.xml` file and place it under `/Chapter05/Chapter05`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the `pom.xml` file to add the project details as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the Cobertura plugin details as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the command prompt, change the directory to `/Chapter05/Chapter05`, and
    issue the `mvn cobertura:cobertura` command. This will start downloading Cobertura
    plugin files and start instrumenting the `.class` files. The following screenshot
    portrays the Maven console output:![Working with the Maven Cobertura plugin](img/00074.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `/Chapter05/Chapter05/target`. The `target` folder contains the following
    important subfolders:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`cobertura`: This contains the `cobertura.ser` file'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`generated-classes`: This contains the instrumented bytecode or the `.class`
    files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site`: This contains the coverage report in XML and HTML formats'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`surefire-reports`: This contains the test execution report'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the coverage report generated in the HTML format
    in the `site` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Maven Cobertura plugin](img/00075.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Running the Cobertura Ant task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will explain how to configure the Cobertura Ant task in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps for configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: Gradle and Maven can download the coverage tool JARs while running the build,
    but Ant needs the Cobertura JAR files to the classpath. Download the Cobertura
    ZIP file from [http://cobertura.github.io/cobertura/](http://cobertura.github.io/cobertura/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Extract the ZIP file and copy all JAR files in the downloaded ZIP to `Chapter05\lib`.
    Include all JARs from the `lib` folder and `cobertura.jar` from the `root` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `build.properties` file under `Chapter05\Chapter05` and enter the
    following information:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `src.dir` attribute represents the source folder location and `test.dir`
    represents the test file location. The `cobertura.dir` attribute refers to the
    Cobertura library or JAR files. The coverage tool needs to access the Cobertura
    library files. The other entries are required for report generation and bytecode
    instrumentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a `build.xml` file under `Chapter05\Chapter05`, and add targets for Cobertura
    instrumentation and JUnit test to update the `.ser` file and generate the report.
    Download the `build.xml` file from the Packt Publishing website (the `Chapter05`
    code). The important targets are `init`, `compile`, `testcompile`, `instrument`,
    `test`, `coverage-report`, `summary-coverage-report`, `alternate-coverage-report`,
    and `clean`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the command prompt, change the directory to `Chapter05\Chapter05`, and
    issue the `ant` command. This will generate the report. The following is the console
    output of the command:![Running the Cobertura Ant task](img/00076.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cobertura generates the report in `Chapter05\Chapter05\reports`. The `reports`
    folder contains various reports in XML and HTML formats.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Code coverage is not a silver bullet that can deliver zero-defect software!
    The most important thing is writing effective tests and unit testing the logic.
    Writing tests for getters and setters or constructor doesn't add value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, code coverage is described in depth and examples are provided
    to measure code coverage using Eclipse plugins and various coverage tools, such
    as Clover, JaCoCo, EclEmma, and Cobertura. We have also configured Ant, Maven,
    and Gradle to generate code coverage reports using coverage tools.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be able configure Eclipse plugins and
    build scripts to measure code coverage.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter covers the static code analysis, code metrics, and various
    open source tools. It configures and uses PMD, Checkstyle, and FindBugs to analyze
    code quality and explores the Sonar code quality dashboard.
  prefs: []
  type: TYPE_NORMAL
