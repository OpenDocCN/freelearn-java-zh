["```java\ndouble principal = 10000;\ndouble rate = 0.05;\nint years = 3;\ndouble interest = principal * rate * years;\n```", "```java\nLoanDSL loan = LoanDSL.builder()\n        .principal(10000.0)\n        .interestRate(0.05)\n        .term(3)\n        .build();\ndouble interest = loan.calculateInterest();\n```", "```java\nclass Person {\n    private String name;\n    private String surname;\n    private Date birthDate;\n    public Person() {\n    }\n    public Person(String name, String surname, Date birthDate) {\n        this.name = name;\n        this.surname = surname;\n        this.birthDate = birthDate;\n    }\n    public Person(Person anotherPerson) {\n        if (anotherPerson == null) {\n            throw new NullPointerException(\"AnotherPerson cannot be null\");\n        }\n        this.name = anotherPerson.getName();\n        this.surname = anotherPerson.getSurname();\n        this.birthDate = anotherPerson.getBirthDate();\n    }\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getSurname() {\n        return surname;\n    }\n    public void setSurname(String surname) {\n        this.surname = surname;\n    }\n    public Date getBirthDate() {\n        return birthDate;\n    }\n    public void setBirthDate(Date birthDate) {\n        this.birthDate = birthDate;\n    }\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Person person = (Person) o;\n        return Objects.equals(name, person.name) && Objects.equals(surname, person.surname) && Objects.equals(birthDate, person.birthDate);\n    }\n    @Override\n    public int hashCode() {\n        return Objects.hash(name, surname, birthDate);\n    }\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"name='\" + name + '\\'' +\n                \", surname='\" + surname + '\\'' +\n                \", birthDate=\" + birthDate +\n                '}';\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.30</version>\n</dependency>\n```", "```java\npublic Person(Person anotherPerson) {\n    if (anotherPerson == null) {\n        throw new NullPointerException(\"AnotherPerson cannot be null\");\n    }\n    this.name = anotherPerson.getName();\n    this.surname = anotherPerson.getSurname();\n    this.birthDate = anotherPerson.getBirthDate();\n}\n```", "```java\npublic Person(@NonNull Person anotherPerson) {\n    this.name = anotherPerson.getName();\n    this.surname = anotherPerson.getSurname();\n    this.birthDate = anotherPerson.getBirthDate();\n}\n```", "```java\npublic Person() {\n}\n```", "```java\npublic Person(String name, String surname, Date birthDate) {\n    this.name = name;\n    this.surname = surname;\n    this.birthDate = birthDate;\n}\n```", "```java\nprivate final String name;\nprivate String surname;\nprivate Date birthDate;\n```", "```java\n@Getter @Setter private String name;\n@Getter @Setter private String surname;\n@Getter @Setter private Date birthDate;\n```", "```java\n@Getter\n@Setter\nclass Person {\n    private String name;\n    private String surname;\n    private Date birthDate;\n    //other code here...\n}\n```", "```java\n@Setter(AccessLevel.PROTECTED) private String name;\n```", "```java\n@NoArgsConstructor\n@AllArgsConstructor\n@Getter\n@Setter\n@EqualsAndHashCode\n@ToString\nclass Person {\n    private String name;\n    private String surname;\n    private Date birthDate;\n    public Person(@NonNull Person anotherPerson) {\n        this.name = anotherPerson.getName();\n        this.surname = anotherPerson.getSurname();\n        this.birthDate = anotherPerson.getBirthDate();\n    }\n}\n```", "```java\n@AllArgsConstructor\n@NoArgsConstructor\n@Data\nclass Person {\n    private String name;\n    private String surname;\n    private Date birthDate;\n    public Person(@NonNull Person anotherPerson) {\n        this.name = anotherPerson.getName();\n        this.surname = anotherPerson.getSurname();\n        this.birthDate = anotherPerson.getBirthDate();\n    }\n}\n```", "```java\nPerson p = Person.builder()\n        .name(\"Luke\")\n        .surname(\"Skywalker\")\n        .birthDate(parseDate(\"1951-09-25\"))\n        .build();\n```", "```java\n@Builder\nclass Team {\n    private String name;\n    @Singular\n    private List<String> members;\n}\n```", "```java\nTeam myTeam = Team.builder()\n        .member(\"John\")\n        .member(\"Susan\")\n        .member(\"Chris\")\n        .build();\n```", "```java\nvar members = List.of(\"John\", \"Susan\", \"Chris\");\nTeam myTeam = Team.builder()\n        .members(members)\n        .build();\n```", "```java\n@Builder\nclass Team {\n    private String name;\n    @Builder.Default private Long created = System.currentTimeMillis();\n    @Singular\n    private List<String> members;\n}\n```", "```java\npublic class Person {\n    private String name;\n    private String surname;\n    private Integer age;\n   // getters and setters...\n}\npublic class PersonDTO {\n    private String name;\n    private String lastName;\n    private LocalDate birthDate;\n    // getters and setters...\n}\n```", "```java\npublic Person from(PersonDTO personDTO) {\n    if (personDTO == null) {\n        return null;\n    }\n    Person person = new Person();\n    person.setName(personDTO.getName());\n    person.setSurname(personDTO.getLastName());\n    person.setAge(calculateCurrentAge(personDTO.getBirthDate()));\n    return person;\n}\nprivate Integer calculateCurrentAge(LocalDate birthDate) {\n    return Period.between(birthDate, LocalDate.now()).getYears();\n}\n```", "```java\n@Mapper\npublic interface PersonMapper {\n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\n    @Mapping(source=\"lastName\", target=\"surname\")\n    Person personDtoToPerson(PersonDTO personDto);\n}\n```", "```java\n@Mapper\npublic interface PersonMapper {\n    PersonMapper INSTANCE = Mappers.getMapper(PersonMapper.class);\n    @Mapping(source=\"lastName\", target=\"surname\")\n    @Mapping(source=\"birthDate\", target=\"age\")\n    Person personDtoToPerson(PersonDTO personDto);\n    default Integer calculateCurrentAge(LocalDate birthDate) {\n        return Period.between(birthDate, LocalDate.now()).getYears();\n    }\n}\n```", "```java\npublic void greet(){\n    System.out.printf(\"Hello I'm %s%n\", name);\n}\n```", "```java\npublic class ReflectionExample {\n    public static void main(String[] args) throws Exception {\n        // Obtain the class object\n        Class<?> personClass = Class.forName(\"com.example.demo3.mapstruct.Person\");\n        // Create an instance of the Person class\n        Object personInstance = personClass.getConstructor(String.class, String.class, Integer.class)\n                .newInstance(\"Alice\", \"Smith\", 30);\n        // Access and modify fields using reflection\n        Field nameField = personClass.getDeclaredField(\"name\");\n        nameField.setAccessible(true); // Bypass private access\n                                       // modifier\n        String nameValue = (String) nameField.get(personInstance);\n        System.out.println(\"Original Name: \" + nameValue);\n        nameField.set(personInstance, \"Bob\");\n        // Access and invoke methods using reflection\n        Method greetMethod = personClass.getDeclaredMethod(\"greet\");\n        greetMethod.invoke(personInstance);\n        // Verify the modified name\n        String modifiedName = (String) nameField.get(personInstance);\n        System.out.println(\"Modified Name: \" + modifiedName);\n    }\n}\n```"]