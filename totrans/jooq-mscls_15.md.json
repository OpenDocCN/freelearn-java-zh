["```java\nlong total = ctx.fetchCount(PRODUCT);\n```", "```java\nList<Product> result = ctx.selectFrom(PRODUCT)\n```", "```java\n  .orderBy(PRODUCT.PRODUCT_ID)\n```", "```java\n  .limit(size)\n```", "```java\n  .offset(size * page)\n```", "```java\n  .fetchInto(Product.class);\n```", "```java\nPage<Product> pageOfProduct = new PageImpl(result,\n```", "```java\n  PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, \n```", "```java\n    PRODUCT.PRODUCT_ID.getName())), total);\n```", "```java\nMap<Integer, List<Product>> result = ctx.select(\n```", "```java\n    PRODUCT.asterisk(), count().over().as(\"total\"))\n```", "```java\n  .from(PRODUCT)\n```", "```java\n  .orderBy(PRODUCT.PRODUCT_ID)\n```", "```java\n  .limit(size)\n```", "```java\n  .offset(size * page)\n```", "```java\n  .fetchGroups(field(\"total\", Integer.class), Product.class);\n```", "```java\nPage<Product> pageOfProduct \n```", "```java\n  = new PageImpl(result.values().iterator().next(),\n```", "```java\n    PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, \n```", "```java\n       PRODUCT.PRODUCT_ID.getName())),\n```", "```java\n         result.entrySet().iterator().next().getKey());\n```", "```java\nSELECT ... FROM ...\n```", "```java\nWHERE id < {last_seen_id}\n```", "```java\nORDER BY id DESC\n```", "```java\nLIMIT {how_many_rows_to_fetch}\n```", "```java\nSELECT ... FROM ...\n```", "```java\nWHERE id > {last_seen_id}\n```", "```java\nORDER BY id ASC\n```", "```java\nLIMIT {how_many_rows_to_fetch}\n```", "```java\nSELECT ... FROM ...\n```", "```java\nWHERE ... AND id < {last_seen_id}\n```", "```java\nORDER BY id DESC\n```", "```java\nLIMIT {how_many_rows_to_fetch}\n```", "```java\nSELECT ... FROM ...\n```", "```java\nWHERE ... AND id > {last_seen_id}\n```", "```java\nORDER BY id ASC\n```", "```java\nLIMIT {how_many_rows_to_fetch}\n```", "```java\nList<Product> result = ctx.selectFrom(PRODUCT)\n```", "```java\n   .where(PRODUCT.PRODUCT_ID.lt(productId))\n```", "```java\n   .orderBy(PRODUCT.PRODUCT_ID.desc())\n```", "```java\n   .limit(size)\n```", "```java\n   .fetchInto(Product.class);\n```", "```java\nSELECT `classicmodels`.`product`.`product_id`,\n```", "```java\n       `classicmodels`.`product`.`product_name`,\n```", "```java\n       ...\n```", "```java\nFROM `classicmodels`.`product`\n```", "```java\nWHERE `classicmodels`.`product`.`product_id` < 20\n```", "```java\nORDER BY `classicmodels`.`product`.`product_id` DESC\n```", "```java\nLIMIT 5\n```", "```java\nList<Product> result = ctx.selectFrom(PRODUCT)\n```", "```java\n  .orderBy(PRODUCT.PRODUCT_ID)\n```", "```java\n  .seek(productId) \n```", "```java\n  .limit(size)\n```", "```java\n  .fetchInto(Product.class);\n```", "```java\nList<Employee> result = ctx.selectFrom(EMPLOYEE)\n```", "```java\n  .orderBy(EMPLOYEE.OFFICE_CODE, EMPLOYEE.SALARY.desc())\n```", "```java\n  .seek(officeCode, salary) \n```", "```java\n  .limit(size)\n```", "```java\n  .fetchInto(Employee.class);\n```", "```java\nSELECT `classicmodels`.`employee`.`employee_number`,\n```", "```java\n  ...\n```", "```java\nFROM `classicmodels`.`employee`\n```", "```java\nWHERE (`classicmodels`.`employee`.`office_code` > '1'\n```", "```java\n   OR (`classicmodels`.`employee`.`office_code` = '1'\n```", "```java\n     AND `classicmodels`.`employee`.`salary` < 75000))\n```", "```java\nORDER BY `classicmodels`.`employee`.`office_code`,\n```", "```java\n         `classicmodels`.`employee`.`salary` DESC\n```", "```java\nLIMIT 10\n```", "```java\nList<Orderdetail> result = ctx.selectFrom(ORDERDETAIL)\n```", "```java\n .orderBy(ORDERDETAIL.ORDER_ID, ORDERDETAIL.PRODUCT_ID.desc(),\n```", "```java\n          ORDERDETAIL.QUANTITY_ORDERED.desc())\n```", "```java\n .seek(orderId, productId, quantityOrdered)\n```", "```java\n .limit(size)\n```", "```java\n .fetchInto(Orderdetail.class);\n```", "```java\nSELECT `classicmodels`.`orderdetail`.`orderdetail_id`,\n```", "```java\n      ...\n```", "```java\nFROM `classicmodels`.`orderdetail`\n```", "```java\nWHERE (`classicmodels`.`orderdetail`.`order_id` > 10100\n```", "```java\n  OR (`classicmodels`.`orderdetail`.`order_id` = 10100\n```", "```java\n  AND `classicmodels`.`orderdetail`.`product_id` < 23)\n```", "```java\n  OR (`classicmodels`.`orderdetail`.`order_id` = 10100\n```", "```java\n  AND `classicmodels`.`orderdetail`.`product_id` = 23\n```", "```java\n  AND `classicmodels`.`orderdetail`.`quantity_ordered` < 30))\n```", "```java\nORDER BY `classicmodels`.`orderdetail`.`order_id`,\n```", "```java\n         `classicmodels`.`orderdetail`.`product_id` DESC,\n```", "```java\n         `classicmodels`.`orderdetail`.`quantity_ordered` DESC\n```", "```java\nLIMIT 10\n```", "```java\nList<Product> result = ctx.selectFrom(PRODUCT)\n```", "```java\n .orderBy(PRODUCT.BUY_PRICE, PRODUCT.PRODUCT_ID)\n```", "```java\n .seek(PRODUCT.MSRP.minus(PRODUCT.MSRP.mul(0.35)), \n```", "```java\n     val(productId)) \n```", "```java\n .limit(size)\n```", "```java\n .fetchInto(Product.class);\n```", "```java\npublic List<Orderdetail> fetchOrderdetailPageAsc(\n```", "```java\n         long orderdetailId, int size) {\n```", "```java\n  List<Orderdetail> result = ctx.selectFrom(ORDERDETAIL)\n```", "```java\n    .orderBy(ORDERDETAIL.ORDERDETAIL_ID)\n```", "```java\n    .seek(orderdetailId) \n```", "```java\n    .limit(size)\n```", "```java\n    .fetchInto(Orderdetail.class);\n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\nconst postResponse \n```", "```java\n   = await fetch('/orderdetail/${start}/${size}');\n```", "```java\nconst data = await postResponse.json();\n```", "```java\nstart = data[size-1].orderdetailId;\n```", "```java\nhttp://localhost:8080/orderdetail/0/3\n```", "```java\nhttp://localhost:8080/orderdetail/3/3\n```", "```java\nhttp://localhost:8080/orderdetail/6/3\n```", "```java\n…\n```", "```java\nMap<Office, List<Employee>> result = ctx.select().from(\n```", "```java\n  select(OFFICE.OFFICE_CODE, OFFICE...,\n```", "```java\n         EMPLOYEE.FIRST_NAME, EMPLOYEE...,\n```", "```java\n         denseRank().over().orderBy(\n```", "```java\n             OFFICE.OFFICE_CODE, OFFICE.CITY).as(\"rank\"))\n```", "```java\n  .from(OFFICE)\n```", "```java\n  .join(EMPLOYEE)\n```", "```java\n  .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE)).asTable(\"t\"))\n```", "```java\n  .where(field(name(\"t\", \"rank\")).between(start, end))\n```", "```java\n  .fetchGroups(Office.class, Employee.class);\n```", "```java\nMap<Office, List<Employee>> result = \n```", "```java\n  ctx.select(OFFICE.OFFICE_CODE, OFFICE...,       \n```", "```java\n             EMPLOYEE.FIRST_NAME, EMPLOYEE...)\n```", "```java\n     .from(OFFICE)\n```", "```java\n     .join(EMPLOYEE)\n```", "```java\n     .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n     .qualify(denseRank().over()\n```", "```java\n        .orderBy(OFFICE.OFFICE_CODE, OFFICE.CITY)\n```", "```java\n        .between(start, end))   \n```", "```java\n     .fetchGroups(Office.class, Employee.class);\n```", "```java\nvar result = ctx.select().from(\n```", "```java\n  select(PRODUCT_MASTER.PRODUCT_LINE,\n```", "```java\n    PRODUCT_MASTER.PRODUCT_NAME, PRODUCT_MASTER.PRODUCT_SCALE,\n```", "```java\n      rowNumber().over().orderBy(\n```", "```java\n        PRODUCT_MASTER.PRODUCT_LINE).as(\"rowNum\"))\n```", "```java\n .from(PRODUCT_MASTER).asTable(\"t\"))\n```", "```java\n .where(field(name(\"t\", \"rowNum\")).between(start, end))\n```", "```java\n .fetchInto(ProductMaster.class);\n```", "```java\nvar result = ctx.select(PRODUCT_MASTER.PRODUCT_LINE,\n```", "```java\n    PRODUCT_MASTER.PRODUCT_NAME, PRODUCT_MASTER.PRODUCT_SCALE)\n```", "```java\n .from(PRODUCT_MASTER)\n```", "```java\n .qualify(rowNumber().over()\n```", "```java\n    .orderBy(PRODUCT_MASTER.PRODUCT_LINE).between(start, end))\n```", "```java\n .fetchInto(ProductMaster.class);\n```", "```java\npublic List<ProductRecord> fetchCarsOrNoCars(\n```", "```java\n       float buyPrice, boolean cars) {\n```", "```java\n  return ctx.selectFrom(PRODUCT)\n```", "```java\n   .where((buyPrice > 0f ? PRODUCT.BUY_PRICE.gt(\n```", "```java\n       BigDecimal.valueOf(buyPrice)) : noCondition())\n```", "```java\n     .and(cars ? PRODUCT.PRODUCT_LINE.in(\"Classic Cars\", \n```", "```java\n       \"Motorcycles\", \"Trucks and Buses\", \"Vintage Cars\") : \n```", "```java\n   PRODUCT.PRODUCT_LINE.in(\"Plains\",\"Ships\", \"Trains\")))\n```", "```java\n   .fetch();\n```", "```java\n}\n```", "```java\nList<EmployeeRecord> fetchEmployees(boolean isSaleRep) {\n```", "```java\n return ctx.selectFrom(EMPLOYEE)\n```", "```java\n  .where(EMPLOYEE.SALARY.compare(isSaleRep \n```", "```java\n     ? Comparator.IN : Comparator.NOT_IN,\n```", "```java\n       select(EMPLOYEE.SALARY).from(EMPLOYEE)\n```", "```java\n           .where(EMPLOYEE.SALARY.lt(65000))))\n```", "```java\n           .orderBy(EMPLOYEE.SALARY)\n```", "```java\n           .fetch();\n```", "```java\n}\n```", "```java\npublic List<ProductRecord> fetchProducts(\n```", "```java\n                   float buyPrice, float msrp) {\n```", "```java\n  return ctx.selectFrom(PRODUCT)\n```", "```java\n    .where(PRODUCT.BUY_PRICE.compare(\n```", "```java\n      buyPrice < 55f ? Comparator.LESS : Comparator.GREATER,\n```", "```java\n       select(avg(PRODUCT.MSRP.minus(\n```", "```java\n        PRODUCT.MSRP.mul(buyPrice / 100f))))\n```", "```java\n    .from(PRODUCT).where(PRODUCT.MSRP.coerce(Float.class)\n```", "```java\n     .compare(msrp > 100f ? \n```", "```java\n         Comparator.LESS : Comparator.GREATER, msrp))))\n```", "```java\n     .fetch();\n```", "```java\n}\n```", "```java\nSelectQuery select = ctx.selectFrom(PRODUCT)\n```", "```java\n  .where(PRODUCT.QUANTITY_IN_STOCK.gt(0))\n```", "```java\n  .getQuery();\n```", "```java\nif (startBuyPrice != null && endBuyPrice != null) {\n```", "```java\n   select.addConditions(PRODUCT.BUY_PRICE\n```", "```java\n         .betweenSymmetric(startBuyPrice, endBuyPrice));\n```", "```java\n}\n```", "```java\nif (productVendor != null) {\n```", "```java\n    select.addConditions(PRODUCT.PRODUCT_VENDOR\n```", "```java\n          .eq(productVendor));\n```", "```java\n}\n```", "```java\nif (productScale != null) {\n```", "```java\n    select.addConditions(PRODUCT.PRODUCT_SCALE\n```", "```java\n          .eq(productScale));\n```", "```java\n}\n```", "```java\nselect.fetch();\n```", "```java\nCondition condition = PRODUCT.QUANTITY_IN_STOCK.gt(0);\n```", "```java\nif (startBuyPrice != null && endBuyPrice != null) {\n```", "```java\n    condition = condition.and(PRODUCT.BUY_PRICE\n```", "```java\n       .betweenSymmetric(startBuyPrice, endBuyPrice));\n```", "```java\n}\n```", "```java\nif (productVendor != null) {\n```", "```java\n    condition = condition.and(PRODUCT.PRODUCT_VENDOR\n```", "```java\n       .eq(productVendor));\n```", "```java\n}\n```", "```java\nif (productScale != null) {\n```", "```java\n    condition = condition.and(PRODUCT.PRODUCT_SCALE\n```", "```java\n       .eq(productScale));\n```", "```java\n}\n```", "```java\nSelectQuery select = ctx.selectFrom(PRODUCT)\n```", "```java\n   .where(condition)\n```", "```java\n   .getQuery();\n```", "```java\nselect.fetch();\n```", "```java\nCondition condition = trueCondition();\n```", "```java\npublic List<Record> appendTwoJoins(\n```", "```java\n       boolean andEmp, boolean addSale) {\n```", "```java\n  SelectQuery select = ctx.select(OFFICE.CITY, \n```", "```java\n       OFFICE.COUNTRY).from(OFFICE).limit(10).getQuery();\n```", "```java\n  if (andEmp) {\n```", "```java\n    select.addSelect(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME);\n```", "```java\n    select.addJoin(EMPLOYEE, \n```", "```java\n              OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE));\n```", "```java\n    if (addSale) {\n```", "```java\n     select.addSelect(SALE.FISCAL_YEAR, \n```", "```java\n                SALE.SALE_, SALE.EMPLOYEE_NUMBER);\n```", "```java\n     select.addJoin(SALE, JoinType.LEFT_OUTER_JOIN, \n```", "```java\n          EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER));\n```", "```java\n    }\n```", "```java\n  }\n```", "```java\nreturn select.fetch();\n```", "```java\n}\n```", "```java\nSELECT `classicmodels`.`customer`.`customer_number`,\n```", "```java\n  count(*) AS `clazz_[0, 1]`, 0 AS `clazz_[2, 2]`, \n```", "```java\n            0 AS `clazz_[3, 5]`, 0 AS `clazz_[6, 15]`\n```", "```java\nFROM `classicmodels`.`customer`\n```", "```java\nJOIN `classicmodels`.`payment` ON   \n```", "```java\n  `classicmodels`.`customer`.`customer_number` \n```", "```java\n    = `classicmodels`.`payment`.`customer_number`\n```", "```java\nGROUP BY `classicmodels`.`customer`.`customer_number`\n```", "```java\nHAVING count(*) BETWEEN 0 AND 1\n```", "```java\nUNION\n```", "```java\n...\n```", "```java\nHAVING count(*) BETWEEN 2 AND 2\n```", "```java\nUNION\n```", "```java\n...\n```", "```java\nHAVING count(*) BETWEEN 3 AND 5\n```", "```java\nUNION\n```", "```java\nSELECT `classicmodels`.`customer`.`customer_number`,\n```", "```java\n       0, 0, 0, count(*)\n```", "```java\nFROM `classicmodels`.`customer`\n```", "```java\nJOIN `classicmodels`.`payment` ON   \n```", "```java\n  `classicmodels`.`customer`.`customer_number` \n```", "```java\n    = `classicmodels`.`payment`.`customer_number`\n```", "```java\nGROUP BY `classicmodels`.`customer`.`customer_number`\n```", "```java\nHAVING count(*) BETWEEN 6 AND 15\n```", "```java\nprivate SelectQuery getQuery() {\n```", "```java\n  return ctx.select(CUSTOMER.CUSTOMER_NUMBER)\n```", "```java\n    .from(CUSTOMER)\n```", "```java\n    .join(PAYMENT)\n```", "```java\n    .on(CUSTOMER.CUSTOMER_NUMBER.eq(PAYMENT.CUSTOMER_NUMBER))\n```", "```java\n    .groupBy(CUSTOMER.CUSTOMER_NUMBER)\n```", "```java\n    .getQuery();\n```", "```java\n}\n```", "```java\npublic record Clazz(int left, int right) {}\n```", "```java\npublic List<CustomerRecord> classifyCustomerPayments(\n```", "```java\n                                    Clazz... clazzes) {\n```", "```java\n  SelectQuery[] sq = new SelectQuery[clazzes.length];\n```", "```java\n  for (int i = 0; i < sq.length; i++) {\n```", "```java\n     sq[i] = getQuery(); // create a query for each UNION\n```", "```java\n  }\n```", "```java\n  sq[0].addSelect(count().as(\"clazz_[\" + clazzes[0].left() \n```", "```java\n    + \", \" + clazzes[0].right() + \"]\"));\n```", "```java\n  sq[0].addHaving(count().between(clazzes[0].left(), \n```", "```java\n    clazzes[0].right()));\n```", "```java\n  for (int i = 1; i < sq.length; i++) {\n```", "```java\n       sq[0].addSelect(val(0).as(\"clazz_[\" + clazzes[i]\n```", "```java\n         .left() + \", \" + clazzes[i].right() + \"]\"));\n```", "```java\n  }\n```", "```java\n  for (int i = 1; i < sq.length; i++) {\n```", "```java\n     for (int j = 0; j < i; j++) {\n```", "```java\n         sq[i].addSelect(val(0));\n```", "```java\n     }\n```", "```java\n     sq[i].addSelect(count());\n```", "```java\n     for (int j = i + 1; j < sq.length; j++) {\n```", "```java\n         sq[i].addSelect(val(0));\n```", "```java\n     }\n```", "```java\n     sq[i].addHaving(count().between(clazzes[i].left(), \n```", "```java\n       clazzes[i].right()));\n```", "```java\n     sq[0].union(sq[i]);\n```", "```java\n  }\n```", "```java\n  return sq[0].fetch();\n```", "```java\n}\n```", "```java\nList<CustomerRecord> result = classicModelsRepository\n```", "```java\n  .classifyCustomerPayments(new Clazz(0, 1), new Clazz(2, 2), \n```", "```java\n                   new Clazz(3, 5), new Clazz(6, 15));\n```", "```java\npublic long insertClassicCar(\n```", "```java\n    String productName, String productVendor, \n```", "```java\n    String productScale, boolean price) {\n```", "```java\n  InsertQuery iq = ctx.insertQuery(PRODUCT);\n```", "```java\n  iq.addValue(PRODUCT.PRODUCT_LINE, \"Classic Cars\");\n```", "```java\n  iq.addValue(PRODUCT.CODE, 599302);\n```", "```java\n  if (productName != null) {\n```", "```java\n    iq.addValue(PRODUCT.PRODUCT_NAME, productName);\n```", "```java\n  }\n```", "```java\n  if (productVendor != null) {\n```", "```java\n    iq.addValue(PRODUCT.PRODUCT_VENDOR, productVendor);\n```", "```java\n  }\n```", "```java\n  if (productScale != null) {\n```", "```java\n    iq.addValue(PRODUCT.PRODUCT_SCALE, productScale);\n```", "```java\n  }\n```", "```java\n  if (price) {\n```", "```java\n    iq.addValue(PRODUCT.BUY_PRICE, \n```", "```java\n           select(avg(PRODUCT.BUY_PRICE)).from(PRODUCT));\n```", "```java\n  }\n```", "```java\n  iq.setReturning(PRODUCT.getIdentity());\n```", "```java\n  iq.execute();\n```", "```java\n  return iq.getReturnedRecord()\n```", "```java\n    .getValue(PRODUCT.getIdentity().getField(), Long.class);\n```", "```java\n}\n```", "```java\npublic int updateProduct(float oldPrice, float value) {\n```", "```java\n  UpdateQuery uq = ctx.updateQuery(PRODUCT);\n```", "```java\n  uq.addValue(PRODUCT.BUY_PRICE, \n```", "```java\n     PRODUCT.BUY_PRICE.plus(PRODUCT.BUY_PRICE.mul(value)));\n```", "```java\n  uq.addConditions(PRODUCT.BUY_PRICE\n```", "```java\n     .lt(BigDecimal.valueOf(oldPrice)));\n```", "```java\n  return uq.execute();\n```", "```java\n}\n```", "```java\npublic int deleteSale(int fiscalYear, double sale) {\n```", "```java\n  DeleteQuery dq = ctx.deleteQuery(SALE);\n```", "```java\n  Condition condition = SALE.FISCAL_YEAR\n```", "```java\n    .compare(fiscalYear <= 2003 \n```", "```java\n       ? Comparator.GREATER : Comparator.LESS, fiscalYear);\n```", "```java\n  if (sale > 5000d) {\n```", "```java\n     condition = condition.or(SALE.SALE_.gt(sale));\n```", "```java\n  }\n```", "```java\n  dq.addConditions(condition);\n```", "```java\n  return dq.execute();\n```", "```java\n}\n```", "```java\npublic <R extends Record> List<R> select(\n```", "```java\n    Table<R> table, Collection<SelectField<?>> fields,  \n```", "```java\n                               Condition... conditions) {\n```", "```java\n   SelectQuery sq = ctx.selectQuery(table);\n```", "```java\n   sq.addSelect(fields);\n```", "```java\n   sq.addConditions(conditions);\n```", "```java\n   return sq.fetch();\n```", "```java\n}\n```", "```java\nList<ProductRecord> rs1 = \n```", "```java\n  classicModelsRepository.select(PRODUCT,\n```", "```java\n     List.of(PRODUCT.PRODUCT_LINE, PRODUCT.PRODUCT_NAME, \n```", "```java\n             PRODUCT.BUY_PRICE, PRODUCT.MSRP),\n```", "```java\n     PRODUCT.BUY_PRICE.gt(BigDecimal.valueOf(50)), \n```", "```java\n     PRODUCT.MSRP.gt(BigDecimal.valueOf(80)));\n```", "```java\nList<Record> rs2 =   \n```", "```java\n  classicModelsRepository.select(table(\"product\"),\n```", "```java\n     List.of(field(\"product_line\"), field(\"product_name\"), \n```", "```java\n       field(\"buy_price\"), field(\"msrp\")),\n```", "```java\n         field(\"buy_price\").gt(50), field(\"msrp\").gt(80));\n```", "```java\npublic <R extends Record> List<R> select(\n```", "```java\n    Table<R> table, Collection<TableField<R, ?>> fields, \n```", "```java\n       Condition... conditions) {\n```", "```java\n  SelectQuery sq = ctx.selectQuery(table);\n```", "```java\n  sq.addSelect(fields);\n```", "```java\n  sq.addConditions(conditions);\n```", "```java\n  return sq.fetch();\n```", "```java\n}\n```", "```java\npublic <R extends Record> int insert (\n```", "```java\n    Table<R> table, Map<TableField<R, ?>, ?> values) {\n```", "```java\n    InsertQuery iq = ctx.insertQuery(table);\n```", "```java\n   iq.addValues(values);\n```", "```java\n   return iq.execute();\n```", "```java\n}\n```", "```java\nint ri = classicModelsRepository.insert(PRODUCT,\n```", "```java\n  Map.of(PRODUCT.PRODUCT_LINE, \"Classic Cars\", \n```", "```java\n         PRODUCT.CODE, 599302,\n```", "```java\n         PRODUCT.PRODUCT_NAME, \"1972 Porsche 914\"));\n```", "```java\npublic <R extends Record> int update(Table<R> table,\n```", "```java\n    Map<TableField<R, ?>, ?> values, Condition... conditions) {\n```", "```java\n  UpdateQuery uq = ctx.updateQuery(table);\n```", "```java\n  uq.addValues(values);\n```", "```java\n  uq.addConditions(conditions);\n```", "```java\n  return uq.execute();\n```", "```java\n}\n```", "```java\nint ru = classicModelsRepository.update(SALE, \n```", "```java\n    Map.of(SALE.TREND, \"UP\", SALE.HOT, true), \n```", "```java\n       SALE.TREND.eq(\"CONSTANT\"));\n```", "```java\npublic <R extends Record> int delete(Table<R> table, \n```", "```java\n       Condition... conditions) {\n```", "```java\n  DeleteQuery dq = ctx.deleteQuery(table);\n```", "```java\n  dq.addConditions(conditions);\n```", "```java\n  return dq.execute();\n```", "```java\n}  \n```", "```java\nint rd1 = classicModelsRepository.delete(SALE, \n```", "```java\n    SALE.TREND.eq(\"UP\"));\n```", "```java\nint rd2 = classicModelsRepository.delete(table(\"sale\"),    \n```", "```java\n    field(\"trend\").eq(\"CONSTANT\"));\n```", "```java\n// Day 1\n```", "```java\npublic List<SaleRecord>\n```", "```java\n  filterSaleByFiscalYear(int fiscalYear) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n   .where(SALE.FISCAL_YEAR.eq(fiscalYear))\n```", "```java\n   .fetch();\n```", "```java\n}\n```", "```java\n// Day 2\n```", "```java\npublic List<SaleRecord> filterSaleByTrend(String trend) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n    .where(SALE.TREND.eq(trend))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\n// Day 3\n```", "```java\npublic List<SaleRecord> filterSaleByFiscalYearAndTrend(\n```", "```java\n     int fiscalYear, String trend) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n    .where(SALE.FISCAL_YEAR.eq(fiscalYear)\n```", "```java\n    .and(SALE.TREND.eq(trend)))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\n// Day 4\n```", "```java\npublic List<SaleRecord>\n```", "```java\n  filterSaleBy(Collection<Condition> cf) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n        .where(cf)\n```", "```java\n        .fetch();\n```", "```java\n}\n```", "```java\nList<SaleRecord> result = \n```", "```java\n  classicModelsRepository.filterSaleBy(\n```", "```java\n    List.of(SALE.FISCAL_YEAR.eq(2004), SALE.TREND.eq(\"DOWN\"), \n```", "```java\n          SALE.EMPLOYEE_NUMBER.eq(1370L)));\n```", "```java\nList<SaleRecord> result =   \n```", "```java\n  classicModelsRepository.filterSaleBy(\n```", "```java\n     List.of(SALE.FISCAL_YEAR.eq(2004), SALE.TREND.eq(\"DOWN\"), \n```", "```java\n         EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)));\n```", "```java\n// Day 5\n```", "```java\n@FunctionalInterface\n```", "```java\npublic interface SaleFunction<Sale, Condition> {\n```", "```java\n    Condition apply(Sale s);\n```", "```java\n}\n```", "```java\npublic List<SaleRecord> filterSaleBy(\n```", "```java\n     SaleFunction<Sale, Condition> sf) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n    .where(sf.apply(SALE))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\nList<SaleRecord> result = classicModelsRepository\n```", "```java\n  .filterSaleBy(s -> s.SALE_.gt(4000d));\n```", "```java\n// Day 6\n```", "```java\npublic List<SaleRecord> filterSaleBy(\n```", "```java\n       Function<Sale, Condition> f) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n    .where(f.apply(SALE))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\n// Day 7\n```", "```java\npublic List<SaleRecord> filterSaleBy(\n```", "```java\n        Function<Sale, Condition>... ff) {\n```", "```java\n  return ctx.selectFrom(SALE)\n```", "```java\n    .where(Stream.of(ff).map(f -> f.apply(SALE))\n```", "```java\n                        .collect(toList()))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\nList<SaleRecord> result = classicModelsRepository\n```", "```java\n     .filterSaleBy(s -> s.SALE_.gt(4000d), \n```", "```java\n                   s -> s.TREND.eq(\"DOWN\"), \n```", "```java\n                   s -> s.EMPLOYEE_NUMBER.eq(1370L));\n```", "```java\npublic <T extends Table<R>, R extends Record> List<R>\n```", "```java\n    filterBy(T t, Function<T, Condition>... ff) {\n```", "```java\n  return ctx.selectFrom(t)\n```", "```java\n  .where(Stream.of(ff).map(f -> f.apply(t)).collect(toList()))\n```", "```java\n  .fetch();\n```", "```java\n}\n```", "```java\nList<SaleRecord> result1 \n```", "```java\n = classicModelsRepository.filterBy(SALE, \n```", "```java\n    s -> s.SALE_.gt(4000d), s -> s.TREND.eq(\"DOWN\"), \n```", "```java\n    s -> s.EMPLOYEE_NUMBER.eq(1370L));\n```", "```java\nList<EmployeeRecord> result2 = classicModelsRepository\n```", "```java\n  .filterBy(EMPLOYEE, e -> e.JOB_TITLE.eq(\"Sales Rep\"), \n```", "```java\n            e -> e.SALARY.gt(55000));\n```", "```java\nList<Record> result3 = classicModelsRepository\n```", "```java\n  .filterBy(table(\"employee\"), \n```", "```java\n   e -> field(\"job_title\", String.class).eq(\"Sales Rep\"), \n```", "```java\n   e -> field(\"salary\", Integer.class).gt(55000));\n```", "```java\npublic <T extends Table<R>, R extends Record> List<Record>\n```", "```java\n filterBy(T t, Supplier<Collection<TableField<R, ?>>> \n```", "```java\n          select, Function<T, Condition>... ff) {\n```", "```java\n  return ctx.select(select.get())\n```", "```java\n    .from(t)\n```", "```java\n    .where(Stream.of(ff).map(\n```", "```java\n       f -> f.apply(t)).collect(toList()))\n```", "```java\n    .fetch();\n```", "```java\n}\n```", "```java\nList<Record> result = classicModelsRepository.filterBy(SALE, \n```", "```java\n   () -> List.of(SALE.SALE_ID, SALE.FISCAL_YEAR),\n```", "```java\n      s -> s.SALE_.gt(4000d), s -> s.TREND.eq(\"DOWN\"), \n```", "```java\n      s -> s.EMPLOYEE_NUMBER.eq(1370L));\n```", "```java\nList<Record> result = classicModelsRepository\n```", "```java\n   .filterBy(table(\"sale\"), \n```", "```java\n    () -> List.of(field(\"sale_id\"), field(\"fiscal_year\")),\n```", "```java\n       s -> field(\"sale\").gt(4000d), \n```", "```java\n       s -> field(\"trend\").eq(\"DOWN\"), \n```", "```java\n       s -> field(\"employee_number\").eq(1370L));\n```", "```java\npublic <T extends Table<R>, R extends Record> List<Record>\n```", "```java\n  filterBy (T t, Supplier<Collection<SelectField<?>>> \n```", "```java\n            select, Function<T, Condition>... ff) {\n```", "```java\n return ctx.select(select.get())\n```", "```java\n .from(t)\n```", "```java\n .where(Stream.of(ff).map(f -> f.apply(t))\n```", "```java\n .collect(toList()))\n```", "```java\n .fetch();\n```", "```java\n}   \n```", "```java\npublic List<Orderdetail> fetchOrderdetailPageAsc(\n```", "```java\n    long orderdetailId, int size, BigDecimal priceEach, \n```", "```java\n      Integer quantityOrdered) {\n```", "```java\n  SelectQuery sq = ctx.selectFrom(ORDERDETAIL)\n```", "```java\n     .orderBy(ORDERDETAIL.ORDERDETAIL_ID)\n```", "```java\n     .seek(orderdetailId)\n```", "```java\n     .limit(size)\n```", "```java\n     .getQuery();\n```", "```java\n  if (priceEach != null) {\n```", "```java\n   sq.addConditions(ORDERDETAIL.PRICE_EACH.between(\n```", "```java\n    priceEach.subtract(BigDecimal.valueOf(50)), priceEach));\n```", "```java\n  }\n```", "```java\n  if (quantityOrdered != null) {\n```", "```java\n    sq.addConditions(ORDERDETAIL.QUANTITY_ORDERED.between(\n```", "```java\n      quantityOrdered - 25, quantityOrdered));\n```", "```java\n  }\n```", "```java\n  return sq.fetchInto(Orderdetail.class);\n```", "```java\n}\n```", "```java\nhttp://localhost:8080/orderdetail/0/3\n```", "```java\n        ?priceEach=100&quantityOrdered=75\n```"]