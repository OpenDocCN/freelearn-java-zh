["```java\npublic class Senator {\n    private int[] voteYes, voteNo;\n    private String name, party;\n    public Senator(String name, String party, \n                     int[] voteYes, int[] voteNo) {\n        this.voteYes = voteYes;\n        this.voteNo = voteNo;\n        this.name = name;\n        this.party = party;\n    }\n    public int[] getVoteYes() { return voteYes; }\n    public int[] getVoteNo() { return voteNo; }\n    public String getName() { return name; }\n    public String getParty() { return party; }\n    public String toString() {\n        return getName() + \", P\" + \n          getParty().substring(getParty().length() - 1);\n    }\n}\n```", "```java\npublic class Senate {\n  public static List<Senator> getSenateVotingStats(){\n     List<Senator> results = new ArrayList<>();\n     results.add(new Senator(\"Senator1\", \"Party1\", \n                       new int[]{1,0,0,0,0,0,1,0,0,1}, \n                       new int[]{0,1,0,1,0,0,0,0,1,0}));\n     results.add(new Senator(\"Senator2\", \"Party2\", \n                       new int[]{0,1,0,1,0,1,0,1,0,0}, \n                       new int[]{1,0,1,0,1,0,0,0,0,1}));\n     results.add(new Senator(\"Senator3\", \"Party1\", \n                       new int[]{1,0,0,0,0,0,1,0,0,1}, \n                       new int[]{0,1,0,1,0,0,0,0,1,0}));\n     results.add(new Senator(\"Senator4\", \"Party2\", \n                       new int[]{1,0,1,0,1,0,1,0,0,1}, \n                       new int[]{0,1,0,1,0,0,0,0,1,0}));\n     results.add(new Senator(\"Senator5\", \"Party1\", \n                       new int[]{1,0,0,1,0,0,0,0,0,1}, \n                       new int[]{0,1,0,0,0,0,1,0,1,0}));\n     IntStream.rangeClosed(6, 98).forEach(i -> {\n       double r1 = Math.random();\n       String name = \"Senator\" + i;\n       String party = r1 > 0.5 ? \"Party1\" : \"Party2\";\n       int[] voteNo = new int[10];\n       int[] voteYes = new int[10];\n       IntStream.rangeClosed(0, 9).forEach(j -> {\n         double r2 = Math.random();\n         voteNo[j] = r2 > 0.4 ? 0 : 1;\n         voteYes[j] = r2 < 0.6 ? 0 : 1;\n       });\n       results.add(new Senator(name,party,voteYes,voteNo));\n     });\n     results.add(new Senator(\"Senator99\", \"Party1\", \n                       new int[]{0,0,0,0,0,0,0,0,0,0}, \n                       new int[]{1,1,1,1,1,1,1,1,1,1}));\n        results.add(new Senator(\"Senator100\", \"Party2\",\n                       new int[]{1,1,1,1,1,1,1,1,1,1}, \n                       new int[]{0,0,0,0,0,0,0,0,0,0}));\n        return results;\n    }\n    public static int timesVotedYes(Senator senator){\n        return Arrays.stream(senator.getVoteYes()).sum();\n    }\n}\n```", "```java\nList<Senator> senators = Senate.getSenateVotingStats();\nlong c1 = senators.stream()\n   .filter(s -> s.getParty() == \"Party1\").count();\nSystem.out.println(\"Members of Party1: \" + c1);\n\nlong c2 = senators.stream()\n   .filter(s -> s.getParty() == \"Party2\").count();\nSystem.out.println(\"Members of Party2: \" + c2);\nSystem.out.println(\"Members of the senate: \" + (c1 + c2));\n```", "```java\nint issue = 3;\nc1 = senators.stream()\n  .filter(s -> s.getParty() == \"Party1\")\n  .filter(s -> s.getVoteNo()[issue] != s.getVoteYes()[issue])\n  .count();\nSystem.out.println(\"Members of Party1 who voted on Issue\" + \n                                          issue + \": \" + c1);\n\nc2 = senators.stream()\n  .filter(s -> s.getParty() == \"Party2\" &&\n               s.getVoteNo()[issue] != s.getVoteYes()[issue])\n  .count();\nSystem.out.println(\"Members of Party2 who voted on Issue\" + \n                                          issue + \": \" + c2);\nSystem.out.println(\"Members of the senate who voted on Issue\" \n                                 + issue + \": \" + (c1 + c2));\n```", "```java\nc1 = senators.stream()\n        .filter(s -> s.getParty() == \"Party1\" &&\n                     s.getVoteYes()[issue] == 1)\n        .count();\nSystem.out.println(\"Members of Party1 who voted Yes on Issue\"\n                                        + issue + \": \" + c1);\n\nc2 = senators.stream()\n        .filter(s -> s.getParty() == \"Party2\" &&\n                     s.getVoteYes()[issue] == 1)\n        .count();\nSystem.out.println(\"Members of Party2 who voted Yes on Issue\"\n                                        + issue + \": \" + c2);\nSystem.out.println(\"Members of the senate voted Yes on Issue\"\n                                 + issue + \": \" + (c1 + c2));\n```", "```java\nlong countAndPrint(List<Senator> senators, \n       Predicate<Senator> pred1, Predicate<Senator> pred2, \n                                           String prefix) {\n    long c = senators.stream().filter(pred1::test)\n                              .filter(pred2::test).count();\n    System.out.println(prefix + c);\n    return c;\n}\n```", "```java\nint issue = 3;\n\nPredicate<Senator> party1 = s -> s.getParty() == \"Party1\";\nPredicate<Senator> party2 = s -> s.getParty() == \"Party2\";\nPredicate<Senator> voted3 = \n       s -> s.getVoteNo()[issue] != s.getVoteYes()[issue];\nPredicate<Senator> yes3 = s -> s.getVoteYes()[issue] == 1;\n\nlong c1 = countAndPrint(senators, party1, s -> true, \n                                   \"Members of Party1: \");\nlong c2 = countAndPrint(senators, party2, s -> true, \n                                   \"Members of Party2: \");\nSystem.out.println(\"Members of the senate: \" + (c1 + c2));\n\nc1 = countAndPrint(senators, party1, voted3, \n   \"Members of Party1 who voted on Issue\" + issue + \": \");\nc2 = countAndPrint(senators, party2, voted3, \n   \"Members of Party2 who voted on Issue\" + issue + \": \");\nSystem.out.println(\"Members of the senate who voted on Issue\"\n                                 + issue + \": \" + (c1 + c2));\n\nc1 = countAndPrint(senators, party1, yes3, \n  \"Members of Party1 who voted Yes on Issue\" + issue + \": \");\nc2 = countAndPrint(senators, party2, yes3, \n  \"Members of Party2 who voted Yes on Issue\" + issue + \": \");\nSystem.out.println(\"Members of the senate voted Yes on Issue\" \n                                 + issue + \": \" + (c1 + c2));\n```", "```java\nlong c1 = senators.stream()\n        .flatMap(s -> s.getParty() == \"Party1\" ? \n                      Stream.of(s) : Stream.empty())\n        .count();\nSystem.out.println(\"Members of Party1: \" + c1);\n```", "```java\nc1 = senators.stream().flatMap(s -> \n  Stream.ofNullable(s.getParty() == \"Party1\" ? s : null))\n                                                 .count();\nSystem.out.println(\"Members of Party1: \" + c1);\n```", "```java\nlong c2 = senators.stream()\n  .map(s -> s.getParty() == \"Party2\" ? \n                         Optional.of(s) : Optional.empty())\n  .flatMap(o -> o.map(Stream::of).orElseGet(Stream::empty))\n  .count();\nSystem.out.println(\"Members of Party2: \" + c2);\n```", "```java\nlong c2 = senators.stream()\n  .map(s -> s.getParty() == \"Party2\" ? \n                         Optional.of(s) : Optional.empty())\n  .flatMap(Optional::stream)\n  .count();\nSystem.out.println(\"Members of Party2: \" + c2);\n```", "```java\nsenators.stream()\n  .filter(s -> s.getParty() == \"Party1\" &&\n                            s.getVoteYes()[3] == 1)    \n  .findFirst()\n  .ifPresent(s -> System.out.println(\"First senator \"\n         \"of Party1 found who voted Yes on issue 3: \" \n                                     + s.getName()));\n```", "```java\nfindFirst() method, which does the described job. It returns the Optional object, so we have added another ifPresent() operator that is invoked only if the Optionalobject contains a non-null value. The resulting output is as follows:\n```", "```java\nsenators.stream().filter(s -> s.getVoteYes()[3] == 1)\n        .findAny()\n        .ifPresent(s -> System.out.println(\"A senator \" +\n                 \"found who voted Yes on issue 3: \" + s));\n```", "```java\nboolean found = senators.stream()\n       .anyMatch(s -> (s.getParty() == \"Party1\" && \n                             s.getVoteYes()[3] == 1));\nString res = found ? \n  \"At least one senator of Party1 voted Yes on issue 3\"\n  : \"Nobody of Party1 voted Yes on issue 3\";\nSystem.out.println(res);\n```", "```java\nboolean yes = senators.stream()\n    .allMatch(s -> (s.getParty() == \"Party1\" &&\n                           s.getVoteYes()[3] == 1));\nString res = yes ? \n  \"All senators of Party1 voted Yes on issue 3\"\n  : \"Not all senators of Party1 voted Yes on issue 3\";\nSystem.out.println(res);\n```", "```java\nboolean yes = senators.stream()\n   .noneMatch(s -> (s.getParty() == \"Party1\" && \n                            s.getVoteYes()[3] == 1));\nString res = yes ? \n  \"None of the senators of Party1 voted Yes on issue 3\"\n  : \"Some of senators of Party1 voted Yes on issue 3\";\nSystem.out.println(res);\n```", "```java\nsenators.stream().map(s -> s.getParty())\n        .distinct().forEach(System.out::println);\n```", "```java\nSystem.out.println(\"These are the first 3 senators \" \n                          + \"of Party1 in the list:\");\nsenators.stream()\n        .filter(s -> s.getParty() == \"Party1\")\n.limit(3)\n        .forEach(System.out::println);\n\nSystem.out.println(\"These are the first 2 senators \"\n                           + \"of Party2 in the list:\");\nsenators.stream().filter(s -> s.getParty() == \"Party2\")\n.limit(2)\n        .forEach(System.out::println);\n```", "```java\nsenators.stream()\n   .max(Comparator.comparing(Senate::timesVotedYes))\n   .ifPresent(s -> System.out.println(\"A senator voted \"\n        + \"Yes most of times (\" + Senate.timesVotedYes(s) \n                                            + \"): \" + s));\n```", "```java\ntimesVotedYes() method to select the senator who voted Yes most often. You might remember, we have assigned all instances of Yes to Senator100. Let's see if that would be the result:\n```", "```java\nsenators.stream()\n  .min(Comparator.comparing(Senate::timesVotedYes))\n  .ifPresent(s -> System.out.println(\"A senator voted \"\n       + \"Yes least of times (\" + Senate.timesVotedYes(s) \n                                            + \"): \" + s));\n```", "```java\nSystem.out.println(\"Here is count of times the first \"\n                            + \"5 senators voted Yes:\");\nsenators.stream().limit(5)\n  .forEach(s -> System.out.println(s + \": \" \n                           + Senate.timesVotedYes(s)));\nSystem.out.println(\"Stop printing at a senator who \"\n                     + \"voted Yes more than 4 times:\");\nsenators.stream().limit(5)\n        .takeWhile(s -> Senate.timesVotedYes(s) < 5)\n        .forEach(s -> System.out.println(s + \": \" \n                           + Senate.timesVotedYes(s)));\n```", "```java\nSystem.out.println(\"Here is count of times the first \" \n                             + \"5 senators voted Yes:\");\nsenators.stream().limit(5)\n        .forEach(s -> System.out.println(s + \": \" \n                            + Senate.timesVotedYes(s)));\nSystem.out.println(\"Start printing at a senator who \"\n                      + \"voted Yes more than 4 times:\");\nsenators.stream().limit(5)\n        .dropWhile(s -> Senate.timesVotedYes(s) < 5)\n        .forEach(s -> System.out.println(s + \": \" \n                            + Senate.timesVotedYes(s)));\nSystem.out.println(\"...\");\n```", "```java\nThread.currentThread().dumpStack();\n```", "```java\nnew Throwable().printStackTrace();\n```", "```java\nArrays.stream(Thread.currentThread().getStackTrace())\n        .forEach(System.out::println);\n```", "```java\nArrays.stream(new Throwable().getStackTrace())\n        .forEach(System.out::println);\n```", "```java\nnew Throwable().getStackTrace()[1].getClassName();\n\nThread.currentThread().getStackTrace()[2].getClassName();\n```", "```java\npublic class Clazz01 {\n  public void method(){ new Clazz02().method(); }\n}\npublic class Clazz02 {\n  public void method(){ new Clazz03().method(); }\n}\npublic class Clazz03 {\n  public void method(){\n    Arrays.stream(Thread.currentThread()\n                        .getStackTrace()).forEach(ste -> {\n      System.out.println();\n      System.out.println(\"ste=\" + ste);\n      System.out.println(\"ste.getFileName()=\" + \n                                     ste.getFileName());\n      System.out.println(\"ste.getClassName()=\" +\n                                    ste.getClassName());\n      System.out.println(\"ste.getMethodName()=\" + \n                                   ste.getMethodName());\n      System.out.println(\"ste.getLineNumber()=\" + \n                                   ste.getLineNumber());\n    });\n  }\n}\n```", "```java\npublic class Demo02StackWalking {\n    public static void main(String... args) {\n        demo_walking();\n    }\n    private static void demo_walking(){\n        new Clazz01().method();\n    }\n}\n```", "```java\npublic class Clazz01 {\n  public void method(){ \n    System.out.println(\"Clazz01 was called by \" +\n      StackWalker.getInstance(StackWalker\n        .Option.RETAIN_CLASS_REFERENCE)\n        .getCallerClass().getSimpleName());\n    new Clazz02().method(); \n  }\n}\npublic class Clazz02 {\n  public void method(){ \n    System.out.println(\"Clazz02 was called by \" +\n      StackWalker.getInstance(StackWalker\n        .Option.RETAIN_CLASS_REFERENCE)\n        .getCallerClass().getSimpleName());\n    new Clazz03().method(); \n  }\n}\npublic class Clazz03 {\n  public void method(){\n    System.out.println(\"Clazz01 was called by \" +\n      StackWalker.getInstance(StackWalker\n        .Option.RETAIN_CLASS_REFERENCE)\n        .getCallerClass().getSimpleName());\n  }\n}\n```", "```java\nStackWalker.getInstance().forEach(System.out::println);\n```", "```java\nStackWalker.getInstance().walk(sf -> { \n  sf.forEach(System.out::println); return null; \n});\n```", "```java\nStackWalker stackWalker = \n   StackWalker.getInstance(Set.of(StackWalker\n                   .Option.RETAIN_CLASS_REFERENCE), 10);\nstackWalker.forEach(sf -> {\n    System.out.println();\n    System.out.println(\"sf=\"+sf);\n    System.out.println(\"sf.getFileName()=\" + \n                                       sf.getFileName());\n    System.out.println(\"sf.getClass()=\" + sf.getClass());\n    System.out.println(\"sf.getMethodName()=\" + \n                                     sf.getMethodName());\n    System.out.println(\"sf.getLineNumber()=\" + \n                                     sf.getLineNumber());\n    System.out.println(\"sf.getByteCodeIndex()=\" +\n                                  sf.getByteCodeIndex());\n    System.out.println(\"sf.getClassName()=\" + \n                                      sf.getClassName());\n    System.out.println(\"sf.getDeclaringClass()=\" + \n                                 sf.getDeclaringClass());\n    System.out.println(\"sf.toStackTraceElement()=\" +\n                               sf.toStackTraceElement());\n});\n```", "```java\nSet<String> set = new HashSet<>();\nset.add(\"Life\");\nset.add(\"is\");\nset.add(\"good!\");\nset = Collections.unmodifiableSet(set); \n```", "```java\nSet<String> immutableSet = \n  Collections.unmodifiableSet(new HashSet<>(Arrays\n                          .asList(\"Life\", \"is\", \"good!\")));\n```", "```java\nSet<String> immutableSet = Stream.of(\"Life\",\"is\",\"good!\")\n  .collect(Collectors.collectingAndThen(Collectors.toSet(),\n                             Collections::unmodifiableSet));\n```", "```java\nSet<String> immutableSet =\n  Collections.unmodifiableSet(Stream.of(\"Life\",\"is\",\"good!\")\n                               .collect(Collectors.toSet()));\n```", "```java\nSet<String> immutableSet = Set.of(\"Life\",\"is\",\"good!\");\n```", "```java\nList<String> immutableList = List.of(\"Life\",\"is\",\"good!\");\n\nMap<Integer,String> immutableMap1 = \n                   Map.of(1, \"Life\", 2, \"is\", 3, \"good!\");\n\nMap<Integer,String> immutableMap2 = \n       Map.ofEntries(entry(1, \"Life \"), entry(2, \"is\"), \n                                        entry(3, \"good!\");\n\nMap.Entry<Integer,String> entry1 = Map.entry(1,\"Life\");\nMap.Entry<Integer,String> entry2 = Map.entry(2,\"is\");\nMap.Entry<Integer,String> entry3 = Map.entry(3,\"good!\");\nMap<Integer,String> immutableMap3 = \n                    Map.ofEntries(entry1, entry2, entry3);\n```", "```java\nList<String> list = new ArrayList<>();\nlist.add(\"unmodifiableList1: Life\");\nlist.add(\" is\");\nlist.add(\" good! \");\nlist.add(null);\nlist.add(\"\\n\\n\");\nList<String> unmodifiableList1 = \n                      Collections.unmodifiableList(list);\n//unmodifiableList1.add(\" Well...\"); //throws exception\n//unmodifiableList1.set(2, \" sad.\"); //throws exception\nunmodifiableList1.stream().forEach(System.out::print);\n\nlist.set(2, \" sad. \");\nlist.set(4, \" \");\nlist.add(\"Well...\\n\\n\");\nunmodifiableList1.stream().forEach(System.out::print);\n```", "```java\nList<String> list2 = \n           Arrays.asList(\"unmodifiableList2: Life\", \n                        \" is\", \" good! \", null, \"\\n\\n\");\nList<String> unmodifiableList2 = \n                    Collections.unmodifiableList(list2);\n//unmodifiableList2.add(\" Well...\"); //throws exception\n//unmodifiableList2.set(2, \" sad.\"); //throws exception\nunmodifiableList2.stream().forEach(System.out::print);\n\nlist2.set(2, \" sad. \");\n//list2.add(\"Well...\\n\\n\");  //throws exception\nunmodifiableList2.stream().forEach(System.out::print);\n```", "```java\nList<String> immutableList1 =\n        Collections.unmodifiableList(new ArrayList<>() {{\n            add(\"immutableList1: Life\");\n            add(\" is\");\n            add(\" good! \");\n            add(null);\n            add(\"\\n\\n\");\n        }});\n//immutableList1.set(2, \" sad.\");     //throws exception\n//immutableList1.add(\"Well...\\n\\n\");  //throws exception\nimmutableList1.stream().forEach(System.out::print);\n```", "```java\nList<String> immutableList2 =\n  Collections.unmodifiableList(Stream\n   .of(\"immutableList2: Life\",\" is\",\" good! \",null,\"\\n\\n\")\n   .collect(Collectors.toList()));\n//immutableList2.set(2, \" sad.\");     //throws exception\n//immutableList2.add(\"Well...\\n\\n\");  //throws exception\nimmutableList2.stream().forEach(System.out::print);\n```", "```java\nList<String> immutableList3 = \n  Stream.of(\"immutableList3: Life\",\n                             \" is\",\" good! \",null,\"\\n\\n\")\n  .collect(Collectors.collectingAndThen(Collectors.toList(),\n                             Collections::unmodifiableList));\n//immutableList3.set(2, \" sad.\");     //throws exception\n//immutableList3.add(\"Well...\\n\\n\");  //throws exception\nimmutableList3.stream().forEach(System.out::print);\n```", "```java\nSet<String> set = new HashSet<>();\nset.add(\"unmodifiableSet1: Life\");\nset.add(\" is\");\nset.add(\" good! \");\nset.add(null);\nSet<String> unmodifiableSet1 = \n                       Collections.unmodifiableSet(set);\n//unmodifiableSet1.remove(\" good! \"); //throws exception\n//unmodifiableSet1.add(\"...Well...\"); //throws exception\nunmodifiableSet1.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n\nset.remove(\" good! \");\nset.add(\"...Well...\");\nunmodifiableSet1.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nSet<String> set2 = \n   new HashSet<>(Arrays.asList(\"unmodifiableSet2: Life\", \n                                \" is\", \" good! \", null));\nSet<String> unmodifiableSet2 = \n                       Collections.unmodifiableSet(set2);\n//unmodifiableSet2.remove(\" good! \"); //throws exception\n//unmodifiableSet2.add(\"...Well...\"); //throws exception\nunmodifiableSet2.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n\nset2.remove(\" good! \");\nset2.add(\"...Well...\");\nunmodifiableSet2.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nSet<String> immutableSet1 =\n     Collections.unmodifiableSet(new HashSet<>() {{\n            add(\"immutableSet1: Life\");\n            add(\" is\");\n            add(\" good! \");\n            add(null);\n        }});\n//immutableSet1.remove(\" good! \"); //throws exception\n//immutableSet1.add(\"...Well...\"); //throws exception\nimmutableSet1.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nSet<String> immutableSet2 =\n     Collections.unmodifiableSet(Stream\n        .of(\"immutableSet2: Life\",\" is\",\" good! \", null)\n                           .collect(Collectors.toSet()));\n//immutableSet2.remove(\" good!\");  //throws exception\n//immutableSet2.add(\"...Well...\"); //throws exception\nimmutableSet2.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nSet<String> immutableSet3 = \n  Stream.of(\"immutableSet3: Life\",\" is\",\" good! \", null)\n  .collect(Collectors.collectingAndThen(Collectors.toSet(),\n                            Collections::unmodifiableSet));\n//immutableList5.set(2, \"sad.\");  //throws exception\n//immutableList5.add(\"Well...\");  //throws exception\nimmutableSet3.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nMap<Integer, String> map = new HashMap<>();\nmap.put(1, \"unmodifiableleMap: Life\");\nmap.put(2, \" is\");\nmap.put(3, \" good! \");\nmap.put(4, null);\nmap.put(5, \"\\n\\n\");\nMap<Integer, String> unmodifiableleMap = \n                       Collections.unmodifiableMap(map);\n//unmodifiableleMap.put(3, \" sad.\");   //throws exception\n//unmodifiableleMap.put(6, \"Well...\"); //throws exception\nunmodifiableleMap.values().stream()\n                             .forEach(System.out::print);\nmap.put(3, \" sad. \");\nmap.put(4, \"\");\nmap.put(5, \"\");\nmap.put(6, \"Well...\\n\\n\");\nunmodifiableleMap.values().stream()\n                             .forEach(System.out::print);\n```", "```java\nMap<Integer, String> immutableMap1 =\n        Collections.unmodifiableMap(new HashMap<>() {{\n            put(1, \"immutableMap1: Life\");\n            put(2, \" is\");\n            put(3, \" good! \");\n            put(4, null);\n            put(5, \"\\n\\n\");\n        }});\n//immutableMap1.put(3, \" sad. \");   //throws exception\n//immutableMap1.put(6, \"Well...\");  //throws exception\nimmutableMap1.values().stream().forEach(System.out::print);\n```", "```java\nString[][] mapping = \n       new String[][] {{\"1\", \"immutableMap2: Life\"}, \n                       {\"2\", \" is\"}, {\"3\", \" good! \"}, \n                          {\"4\", null}, {\"5\", \"\\n\\n\"}};\n\nMap<Integer, String> immutableMap2 =\n  Collections.unmodifiableMap(Arrays.stream(mapping)\n    .collect(Collectors.toMap(a -> Integer.valueOf(a[0]), \n                          a -> a[1] == null? \"\" : a[1])));\nimmutableMap2.values().stream().forEach(System.out::print);\n```", "```java\nnull value in the source array:\n```", "```java\nString[][] mapping = \n    new String[][]{{\"1\", \"immutableMap3: Life\"}, \n       {\"2\", \" is\"}, {\"3\", \" good! \"}, {\"4\", \"\\n\\n\"}};\nMap<Integer, String> immutableMap3 =\n   Collections.unmodifiableMap(Arrays.stream(mapping)\n     .collect(Collectors.toMap(a -> Integer.valueOf(a[0]), \na -> a[1])));\n//immutableMap3.put(3, \" sad.\");   //throws Exception\n//immutableMap3.put(6, \"Well...\"); //throws exception\nimmutableMap3.values().stream().forEach(System.out::print);\n```", "```java\nmapping[0][1] = \"immutableMap4: Life\";\nMap<Integer, String> immutableMap4 = Arrays.stream(mapping)\n           .collect(Collectors.collectingAndThen(Collectors\n             .toMap(a -> Integer.valueOf(a[0]), a -> a[1]),\n                             Collections::unmodifiableMap));\n//immutableMap4.put(3, \" sad.\");    //throws exception\n//immutableMap4.put(6, \"Well...\");  //throws exception\nimmutableMap4.values().stream().forEach(System.out::print);\n```", "```java\nList<String> immutableList = \n  List.of(\"immutableList: Life\", \n      \" is\", \" is\", \" good!\\n\\n\"); //, null);\n//immutableList.set(2, \"sad.\");    //throws exception\n//immutableList.add(\"Well...\");    //throws exception\nimmutableList.stream().forEach(System.out::print);\n```", "```java\nSet<String> immutableSet = \n    Set.of(\"immutableSet: Life\", \" is\", \" good!\");\n                                      //, \" is\" , null);\n//immutableSet.remove(\" good!\\n\\n\");  //throws exception\n//immutableSet.add(\"...Well...\\n\\n\"); //throws exception\nimmutableSet.stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nMap<Integer, String> immutableMap = \n   Map.of(1</span>, \"immutableMap: Life\", 2, \" is\", 3, \" good!\");\n                                    //, 4, null);\n//immutableMap.put(3, \" sad.\");    //throws exception\n//immutableMap.put(4, \"Well...\");  //throws exception\nimmutableMap.values().stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nMap<Integer, String> immutableMap3 = \n            Map.ofEntries(entry(1, \"immutableMap3: Life\"), \n                      entry(2, \" is\"), entry(3, \" good!\"));\nimmutableMap3.values().stream().forEach(System.out::print);\nSystem.out.println(\"\\n\");\n```", "```java\nstatic <E> List<E> of()\nstatic <E> List<E> of(E e1)\nstatic <E> List<E> of(E e1, E e2)\nstatic <E> List<E> of(E e1, E e2, E e3)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)\nstatic <E> List<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)\nstatic <E> List<E> of(E... elements)\n```", "```java\nstatic <E> Set<E> of()\nstatic <E> Set<E> of(E e1)\nstatic <E> Set<E> of(E e1, E e2)\nstatic <E> Set<E> of(E e1, E e2, E e3)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9)\nstatic <E> Set<E> of(E e1, E e2, E e3, E e4, E e5, E e6, E e7, E e8, E e9, E e10)\nstatic <E> Set<E> of(E... elements)\n```", "```java\nstatic <K,V> Map<K,V> of()\nstatic <K,V> Map<K,V> of(K k1, V v1)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V   v5\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7,\nK k8, V v8)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7,\nK k8, V v8, K k9, V v9)\nstatic <K,V> Map<K,V> of(K k1, V v1, K k2, V v2, K k3, V v3, K k4, V v4, K k5, V v5, K k6, V v6, K k7, V v7,\nK k8, V v8, K k9, V v9, K k10, V v10)\nstatic <K,V> Map<K,V> ofEntries(Map.Entry<? extends K,? extends V>... entries\n```", "```java\nthenRun(Runnable action)\nthenApply(Function<T,U> fn)\nthenAccept(Consumer<T> action)\n```", "```java\nthenCompose(Function<T,CompletionStage<U>> fn)\napplyToEither(CompletionStage other, Function fn)\nacceptEither(CompletionStage other, Consumer action)\nrunAfterBoth(CompletionStage other, Runnable action)\nrunAfterEither(CompletionStage other, Runnable action)\nthenCombine(CompletionStage<U> other, BiFunction<T,U,V> fn)\nthenAcceptBoth(CompletionStage other, BiConsumer<T,U> action)\n```", "```java\nhandle(BiFunction<T,Throwable,U> fn)\nwhenComplete(BiConsumer<T,Throwable> action)\n```", "```java\nexceptionally(Function<Throwable,T> fn)\n```", "```java\ntoCompletableFuture()\n```", "```java\nrunAsync(Runnable runnable)\nrunAsync(Runnable runnable, Executor executor)\nsupplyAsync(Supplier<U> supplier)\nsupplyAsync(Supplier<U> supplier, Executor executor)\n```", "```java\nallOf(CompletableFuture<?>... cfs)\nanyOf(CompletableFuture<?>... cfs)\n```", "```java\ncomplete(T value)\ncompletedStage(U value)\ncompletedFuture(U value)\nfailedStage(Throwable ex)\nfailedFuture(Throwable ex)\ncompleteAsync(Supplier<T> supplier)\ncompleteExceptionally(Throwable ex)\ncompleteAsync(Supplier<T> supplier, Executor executor)\ncompleteOnTimeout(T value, long timeout, TimeUnit unit)\n```", "```java\njoin()\ndefaultExecutor()\nnewIncompleteFuture()\ngetNow(T valueIfAbsent)\ngetNumberOfDependents()\nminimalCompletionStage()\nisCompletedExceptionally()\nobtrudeValue(T value)\nobtrudeException(Throwable ex)\norTimeout(long timeout, TimeUnit unit)\ndelayedExecutor(long delay, TimeUnit unit)\n```", "```java\nStopWatch stopWatch = new StopWatch();\nStage failedStage;\nString SUCCESS = \"Success\";\n\nstopWatch.start();\nString result11 = doStage(Stage.FoundationMaterials);\nString result12 = doStage(Stage.Foundation, result11);\nString result21 = doStage(Stage.WallsMaterials);\nString result22 = doStage(Stage.Walls, \n                       getResult(result21, result12));\nString result31 = doStage(Stage.RoofMaterials);\nString result32 = doStage(Stage.Roof, \n                       getResult(result31, result22));\nSystem.out.println(\"House was\" + \n       (isSuccess(result32)?\"\":\" not\") + \" built in \" \n                + stopWatch.getTime()/1000\\. + \" sec\");\n```", "```java\nenum Stage {\n    FoundationMaterials,\n    WallsMaterials,\n    RoofMaterials,\n    Foundation,\n    Walls,\n    Roof\n}\n```", "```java\nString doStage(Stage stage) {\n    String result = SUCCESS;\n    boolean failed = stage.equals(failedStage);\n    if (failed) {\n        sleepSec(2);\n        result = stage + \" were not collected\";\n        System.out.println(result);\n    } else {\n        sleepSec(1);\n        System.out.println(stage + \" are ready\");\n    }\n    return result;\n}\n```", "```java\nString doStage(Stage stage, String previousStageResult) {\n  String result = SUCCESS;\n  boolean failed = stage.equals(failedStage);\n  if (isSuccess(previousStageResult)) {\n    if (failed) {\n      sleepSec(2);\n      result = stage + \" stage was not completed\";\n      System.out.println(result);\n    } else {\n      sleepSec(1);\n      System.out.println(stage + \" stage is completed\");\n    }\n  } else {\n      result = stage + \" stage was not started because: \" \n                                    + previousStageResult;\n      System.out.println(result);\n  }\n  return result;\n}\n```", "```java\nprivate static void sleepSec(int sec) {\n    try {\n        TimeUnit.SECONDS.sleep(sec);\n    } catch (InterruptedException e) {\n    }\n}\nboolean isSuccess(String result) {\n    return SUCCESS.equals(result);\n}\nString getResult(String result1, String result2) {\n    if (isSuccess(result1)) {\n        if (isSuccess(result2)) {\n            return SUCCESS;\n        } else {\n            return result2;\n        }\n    } else {\n        return result1;\n    }\n}\n```", "```java\nExecutorService execService = Executors.newCachedThreadPool();\nCallable<String> t11 = \n                     () -> doStage(Stage.FoundationMaterials);\nFuture<String> f11 = execService.submit(t11);\nList<Future<String>> futures = new ArrayList<>();\nfutures.add(f11);\n\nCallable<String> t21 = () -> doStage(Stage.WallsMaterials);\nFuture<String> f21 = execService.submit(t21);\nfutures.add(f21);\n\nCallable<String> t31 = () -> doStage(Stage.RoofMaterials);\nFuture<String> f31 = execService.submit(t31);\nfutures.add(f31);\n\nString result1 = getSuccessOrFirstFailure(futures);\n\nString result2 = doStage(Stage.Foundation, result1);\nString result3 = \n       doStage(Stage.Walls, getResult(result1, result2));\nString result4 = \n        doStage(Stage.Roof, getResult(result1, result3));\n```", "```java\nString getSuccessOrFirstFailure(\n                      List<Future<String>> futures) {\n    String result = \"\";\n    int count = 0;\n    try {\n        while (count < futures.size()) {\n            for (Future<String> future : futures) {\n                if (future.isDone()) {\n                    result = getResult(future);\n                    if (!isSuccess(result)) {\n                        break;\n                    }\n                    count++;\n                } else {\n                    sleepSec(1);\n                }\n            }\n            if (!isSuccess(result)) {\n                break;\n            }\n        }\n    } catch (Exception ex) {\n        ex.printStackTrace();\n    }\n    return result;\n}\n```", "```java\nSupplier<String> supplier1 = \n                 () -> doStage(Stage.Foundation, result1);\nSupplier<String> supplier2 = \n                () -> getResult(result1, supplier1.get());\nSupplier<String> supplier3 = \n              () -> doStage(Stage.Walls, supplier2.get());\nSupplier<String> supplier4 = \n                () -> getResult(result1, supplier3.get());\nSupplier<String> supplier5 = \n               () -> doStage(Stage.Roof, supplier4.get());\nSystem.out.println(\"House was\" + \n              (isSuccess(supplier5.get()) ? \"\" : \" not\") + \n      \" built in \" + stopWatch.getTime() / 1000\\. + \" sec\");\n```", "```java\nstopWatch.start();\nExecutorService pool = Executors.newCachedThreadPool();\nCompletableFuture<String> cf1 =\n   CompletableFuture.supplyAsync(() -> \n           doStageEx(Stage.FoundationMaterials), pool);\nCompletableFuture<String> cf2 =\n   CompletableFuture.supplyAsync(() -> \n                doStageEx(Stage.WallsMaterials), pool);\nCompletableFuture<String> cf3 =\n   CompletableFuture.supplyAsync(() -> \n                 doStageEx(Stage.RoofMaterials), pool);\nCompletableFuture.allOf(cf1, cf2, cf3)\n  .thenComposeAsync(result -> \n      CompletableFuture.supplyAsync(() -> SUCCESS), pool)\n  .thenApplyAsync(result -> \n                 doStage(Stage.Foundation, result), pool)\n  .thenApplyAsync(result -> \n                      doStage(Stage.Walls, result), pool)\n  .thenApplyAsync(result -> \n                       doStage(Stage.Roof, result), pool)\n  .handleAsync((result, ex) -> {\n       System.out.println(\"House was\" +\n         (isSuccess(result) ? \"\" : \" not\") + \" built in \" \n                 + stopWatch.getTime() / 1000\\. + \" sec\");\n       if (result == null) {\n         System.out.println(\"Because: \" + ex.getMessage());\n         return ex.getMessage();\n       } else {\n         return result;\n       }\n  }, pool);\nSystem.out.println(\"Out!!!!!\");\n```", "```java\nString doStageEx(Stage stage) {\n  boolean failed = stage.equals(failedStage);\n  if (failed) {\n    sleepSec(2);\n    throw new RuntimeException(stage + \n                          \" stage was not completed\");\n  } else {\n    sleepSec(1);\n    System.out.println(stage + \" stage is completed\");\n  }\n  return SUCCESS;\n}\n```", "```java\nOut!!!!!) came out first, which means that all the chains of the operations related to building the house were executed asynchronously\n```", "```java\nString getData() {\n  System.out.println(\"Getting data from some source...\");\n  sleepSec(1);\n  return \"Some input\";\n}\nSomeClass doSomething(String input) {\n  System.out.println(\n    \"Doing something and returning SomeClass object...\");\n  sleepSec(1);\n  return new SomeClass();\n}\nAnotherClass doMore(SomeClass input) {\n  System.out.println(\"Doing more of something and \" +\n                    \"returning AnotherClass object...\");\n  sleepSec(1);\n  return new AnotherClass();\n}\nYetAnotherClass doSomethingElse(AnotherClass input) {\n  System.out.println(\"Doing something else and \" +\n                \"returning YetAnotherClass object...\");\n  sleepSec(1);\n  return new YetAnotherClass();\n}\nint doFinalProcessing(YetAnotherClass input) {\n  System.out.println(\"Processing and finally \" +\n                                \"returning result...\");\n  sleepSec(1);\n  return 42;\n}\nAnotherType doSomethingAlternative(SomeClass input) {\n  System.out.println(\"Doing something alternative \" +\n               \"and returning AnotherType object...\");\n  sleepSec(1);\n  return new AnotherType();\n}\nYetAnotherType doMoreAltProcessing(AnotherType input) {\n  System.out.println(\"Doing more alternative and \" +\n                  \"returning YetAnotherType object...\");\n  sleepSec(1);\n  return new YetAnotherType();\n}\nint doFinalAltProcessing(YetAnotherType input) {\n  System.out.println(\"Alternative processing and \" +\n                         \"finally returning result...\");\n  sleepSec(1);\n  return 43;\n}\n```", "```java\nint myHandler(Integer result, Throwable ex) {\n    System.out.println(\"And the answer is \" + result);\n    if (result == null) {\n        System.out.println(\"Because: \" + ex.getMessage());\n        return -1;\n    } else {\n        return result;\n    }\n}\n```", "```java\nExecutorService pool = Executors.newCachedThreadPool();\nCompletableFuture<SomeClass> completableFuture =\n   CompletableFuture.supplyAsync(() -> getData(), pool)\n     .thenApplyAsync(result -> doSomething(result), pool);\n\ncompletableFuture\n   .thenApplyAsync(result -> doMore(result), pool)\n   .thenApplyAsync(result -> doSomethingElse(result), pool)\n   .thenApplyAsync(result -> doFinalProcessing(result), pool)\n   .handleAsync((result, ex) -> myHandler(result, ex), pool);\n\ncompletableFuture\n   .thenApplyAsync(result -> doSomethingAlternative(result), pool)\n   .thenApplyAsync(result -> doMoreAltProcessing(result), pool)\n   .thenApplyAsync(result -> doFinalAltProcessing(result), pool)\n   .handleAsync((result, ex) -> myHandler(result, ex), pool);\n\nSystem.out.println(\"Out!!!!!\");\n```", "```java\nlong c1 = senators.stream()\n        .flatMap(s -> Stream.ofNullable(s.getParty() \n                              == \"Party1\" ? s : null))\n        .count();\nSystem.out.println(\"OfNullable: Members of Party1: \" + c1);\n\nlong c2 = senators.stream()\n        .map(s -> s.getParty() == \"Party2\" ? Optional.of(s) \n                                        : Optional.empty())\n        .flatMap(Optional::stream)\n        .count();\nSystem.out.println(\"Optional.stream(): Members of Party2: \"\n                                                      + c2);\n\nsenators.stream().limit(5)\n        .takeWhile(s -> Senate.timesVotedYes(s) < 5)\n        .forEach(s -> System.out.println(\"takeWhile(<5): \" \n                     + s + \": \" + Senate.timesVotedYes(s)));\n\nsenators.stream().limit(5)\n         .dropWhile(s -> Senate.timesVotedYes(s) < 5)\n        .forEach(s -> System.out.println(\"dropWhile(<5): \" \n                     + s + \": \" + Senate.timesVotedYes(s)));\n```", "```java\nstatic <T> Stream<T> iterate(T seed, UnaryOperator<T> f)\n```", "```java\nString result = \n    IntStream.iterate(1, i -> i + 2)\n             .limit(5)\n             .mapToObj(i -> String.valueOf(i))\n             .collect(Collectors.joining(\", \"));\nSystem.out.println(\"Iterate: \" + result);\n```", "```java\nstatic <T> Stream<T> iterate(T seed, \n     Predicate<? super T> hasNext, UnaryOperator<T> next)\n```", "```java\nString result = \n   IntStream.iterate(1, i -> i < 11, i -> i + 2)\n            .mapToObj(i -> String.valueOf(i))\n            .collect(Collectors.joining(\", \"));\nSystem.out.println(\"Iterate: \" + result);\n```"]