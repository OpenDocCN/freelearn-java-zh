["```java\nJWT = header.payload.signature\n```", "```java\n{\n \"alg\": \"HS256\",\n \"typ\": \"JWT\"\n}\n```", "```java\n{\n \"sub\": \"1234567890\",\n \"username\": \"Test User\",\n \"iat\": 1516239022\n}\n```", "```java\nbase64UrlEncode(header) + \".\" +base64UrlEncode(payload)\n```", "```java\nHMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n  packtpub\n)\n```", "```java\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciIsImlhdCI6MTUxNjIzOTAyMn0.yzBMVScwv9Ln4vYafpTuaSGa6mUbpwCg84VOhVTQKBg\n```", "```java\n@Bean\npublic SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http){\n    AuthenticationWebFilter authenticationJWT = new AuthenticationWebFilter(new     \n    UserDetailsRepositoryReactiveAuthenticationManager(userDetailsRepository()));\n    authenticationJWT.setAuthenticationSuccessHandler(new         \n                                                    JWTAuthSuccessHandler());\n    http.csrf().disable();\n    http\n      .authorizeExchange()\n      .pathMatchers(WHITELISTED_AUTH_URLS)\n      .permitAll()\n      .and()\n      .addFilterAt(authenticationJWT, SecurityWebFiltersOrder.FIRST)\n      .authorizeExchange()\n      .pathMatchers(HttpMethod.GET, \"/api/movie/**\").hasRole(\"USER\")\n      .pathMatchers(HttpMethod.POST, \"/api/movie/**\").hasRole(\"ADMIN\")\n      .anyExchange().authenticated()\n      .and()\n      .addFilterAt(new JWTAuthWebFilter(), SecurityWebFiltersOrder.HTTP_BASIC);\n    return http.build();\n}\n```", "```java\n@Bean\npublic MapReactiveUserDetailsService userDetailsRepository() {\n    UserDetails user = User.withUsername(\"user\").password(\"    \n        {noop}password\").roles(\"USER\").build();\n    UserDetails admin = User.withUsername(\"admin\").password(\"\n        {noop}password\").roles(\"USER\",\"ADMIN\").build();\n    return new MapReactiveUserDetailsService(user, admin);\n}\n```", "```java\npublic class JWTAuthSuccessHandler implements ServerAuthenticationSuccessHandler{\n    @Override\n    public Mono<Void> onAuthenticationSuccess(WebFilterExchange     \n            webFilterExchange, Authentication authentication) {\n        ServerWebExchange exchange = webFilterExchange.getExchange();\n        exchange.getResponse()\n            .getHeaders()\n            .add(HttpHeaders.AUTHORIZATION, \n                    getHttpAuthHeaderValue(authentication));\n        return webFilterExchange.getChain().filter(exchange);\n    }\n    private static String getHttpAuthHeaderValue(Authentication authentication){\n        return String.join(\" \",\"Bearer\",tokenFromAuthentication(authentication));\n    }\n    private static String tokenFromAuthentication(Authentication authentication){\n        return new JWTUtil().generateToken(\n            authentication.getName(),\n            authentication.getAuthorities());\n    }\n}\n```", "```java\npublic static String generateToken(String subjectName, Collection<? extends             GrantedAuthority> authorities) {\n    JWTClaimsSet claimsSet = new JWTClaimsSet.Builder()\n        .subject(subjectName)\n        .issuer(\"javacodebook.com\")\n        .expirationTime(new Date(new Date().getTime() + 30 * 1000))\n        .claim(\"auths\", authorities.parallelStream().map(auth ->                             (GrantedAuthority) auth).map(a ->                                 \n            a.getAuthority()).collect(Collectors.joining(\",\")))\n        .build();\n    SignedJWT signedJWT = new SignedJWT(new JWSHeader(JWSAlgorithm.HS256),         claimsSet);\n    try {\n        signedJWT.sign(JWTUtil.getJWTSigner());\n    } catch (JOSEException e) {\n        e.printStackTrace();\n    }\n    return signedJWT.serialize();\n}\n```", "```java\npublic class JWTAuthConverter implements Function<ServerWebExchange,             \n        Mono<Authentication>> {\n    @Override\n    public Mono<Authentication> apply(ServerWebExchange serverWebExchange) {\n        return Mono.justOrEmpty(serverWebExchange)\n            .map(JWTUtil::getAuthorizationPayload)\n            .filter(Objects::nonNull)\n            .filter(JWTUtil.matchBearerLength())\n            .map(JWTUtil.getBearerValue())\n            .filter(token -> !token.isEmpty())\n            .map(JWTUtil::verifySignedJWT)\n            .map(JWTUtil::getUsernamePasswordAuthenticationToken)\n            .filter(Objects::nonNull);\n    }\n}\n```", "```java\n@Override\npublic Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n    return this.getAuthMatcher().matches(exchange)\n        .filter(matchResult -> matchResult.isMatch())\n        .flatMap(matchResult -> this.jwtAuthConverter.apply(exchange))\n        .switchIfEmpty(chain.filter(exchange).then(Mono.empty()))\n        .flatMap(token -> authenticate(exchange, chain, token));\n}\n//..more methods\nprivate Mono<Void> authenticate(ServerWebExchange exchange,\n                              WebFilterChain chain, Authentication token) {\n    WebFilterExchange webFilterExchange = new WebFilterExchange(exchange, chain);\n    return this.reactiveAuthManager.authenticate(token)\n      .flatMap(authentication -> onAuthSuccess(authentication, \n          webFilterExchange));\n}\nprivate Mono<Void> onAuthSuccess(Authentication authentication, WebFilterExchange \n        webFilterExchange) {\n    ServerWebExchange exchange = webFilterExchange.getExchange();\n    SecurityContextImpl securityContext = new SecurityContextImpl();\n    securityContext.setAuthentication(authentication);\n    return this.securityContextRepository.save(exchange, securityContext)\n        .then(this.authSuccessHandler\n        .onAuthenticationSuccess(webFilterExchange, authentication))\n        .subscriberContext(ReactiveSecurityContextHolder.withSecurityContext(\n            Mono.just(securityContext)));\n}\n```", "```java\n@RestController\n@RequestMapping(path = \"/auth\", produces = { APPLICATION_JSON_UTF8_VALUE })\npublic class AuthController {\n\n    @Autowired\n    private MapReactiveUserDetailsService userDetailsRepository;\n        @RequestMapping(method = POST, value = \"/token\")\n        @CrossOrigin(\"*\")\n        public Mono<ResponseEntity<JWTAuthResponse>> token(@RequestBody     \n                JWTAuthRequest jwtAuthRequest) throws AuthenticationException {\n            String username =  jwtAuthRequest.getUsername();\n            String password =  jwtAuthRequest.getPassword();\n            return userDetailsRepository.findByUsername(username)\n               .map(user -> ok().contentType(APPLICATION_JSON_UTF8).body(\n                 new JWTAuthResponse(JWTUtil.generateToken(user.getUsername(),                  user.getAuthorities()), user.getUsername())))\n                 .defaultIfEmpty(notFound().build());\n        }\n    }\n}\n```", "```java\nmvn spring-boot:run\n```", "```java\n<dependency>\n <groupId>org.springframework.security.oauth.boot</groupId>\n <artifactId>spring-security-oauth2-autoconfigure</artifactId>\n</dependency>\n```", "```java\n<!--Spring Boot-->\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<!--OAuth-->\n<dependency>\n  <groupId>org.springframework.security.oauth</groupId>\n  <artifactId>spring-security-oauth2</artifactId>\n  <version>2.3.2.RELEASE</version>\n</dependency>\n<!--JWT-->\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-jwt</artifactId>\n  <version>1.0.9.RELEASE</version>\n</dependency>\n```", "```java\n@SpringBootApplication\npublic class OAuthAuthorizationServerRun extends SpringBootServletInitializer {\n  public static void main(String[] args) {\n      SpringApplication.run(OAuthAuthorizationServerRun.class, args);\n  }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n  @Autowired\n  private BCryptPasswordEncoder passwordEncoder;\n  @Autowired\n  public void globalUserDetails(final AuthenticationManagerBuilder auth) throws \n        Exception {\n      auth\n          .inMemoryAuthentication()\n          .withUser(\"user\").password(passwordEncoder.encode(\"password\"))\n          .roles(\"USER\")\n          .and()\n          .withUser(\"admin\").password(passwordEncoder.encode(\"password\"))\n          .roles(\"USER\", \"ADMIN\");\n  }\n  //...\n}\n```", "```java\n@Override\npublic void configure(final ClientDetailsServiceConfigurer clients) throws \n        Exception {\n  clients.inMemory()\n     .withClient(\"oAuthClientAppID\")\n     .secret(passwordEncoder().encode(\"secret\"))\n     .authorizedGrantTypes(\"password\", \"authorization_code\", \"refresh_token\")\n     .scopes(\"movie\", \"read\", \"write\")\n     .accessTokenValiditySeconds(3600)\n     .refreshTokenValiditySeconds(2592000)\n     .redirectUris(\"http://localhost:8080/movie/\", \n        \"http://localhost:8080/movie/index\");\n}\n```", "```java\n@Bean\n@Primary\npublic DefaultTokenServices tokenServices() {\n  final DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\n  defaultTokenServices.setTokenStore(tokenStore());\n  defaultTokenServices.setSupportRefreshToken(true);\n  return defaultTokenServices;\n}\n@Override\npublic void configure(final AuthorizationServerEndpointsConfigurer endpoints) \n    throws Exception {\n  final TokenEnhancerChain tokenEnhancerChain = new TokenEnhancerChain();\n  tokenEnhancerChain.setTokenEnhancers(Arrays.asList(tokenEnhancer(), \n    accessTokenConverter()));\n  endpoints.tokenStore(tokenStore()).tokenEnhancer(tokenEnhancerChain)\n    .authenticationManager(authenticationManager);\n}\n@Bean\npublic TokenStore tokenStore() {\n  return new JwtTokenStore(accessTokenConverter());\n}\n@Bean\npublic JwtAccessTokenConverter accessTokenConverter() {\n  final JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n  converter.setSigningKey(\"secret\");\n  return converter;\n}\n@Bean\npublic TokenEnhancer tokenEnhancer() {\n  return new CustomTokenEnhancer();\n}\n```", "```java\npublic class CustomTokenEnhancer implements TokenEnhancer {\n  @Override\n  public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, \n    OAuth2Authentication authentication) {\n      final Map<String, Object> additionalInfo = new HashMap<>();\n      additionalInfo.put(\"principalinfo\", \n        authentication.getPrincipal().toString());\n      ((DefaultOAuth2AccessToken)accessToken)\n        .setAdditionalInformation(additionalInfo);\n      return accessToken;\n  }\n}\n```", "```java\nserver.servlet.context-path=/oauth-server\nserver.port=8082\n```", "```java\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {\n  @Autowired\n  private CustomAccessTokenConverter customAccessTokenConverter;\n  @Override\n  public void configure(final HttpSecurity http) throws Exception {\n      http.sessionManagement()\n        .sessionCreationPolicy(SessionCreationPolicy.ALWAY)\n        .and()\n        .authorizeRequests().anyRequest().permitAll();\n  }\n  @Override\n  public void configure(final ResourceServerSecurityConfigurer config) {\n      config.tokenServices(tokenServices());\n  }\n  @Bean\n  public TokenStore tokenStore() {\n      return new JwtTokenStore(accessTokenConverter());\n  }\n  @Bean\n  public JwtAccessTokenConverter accessTokenConverter() {\n      final JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n      converter.setAccessTokenConverter(customAccessTokenConverter);\n      converter.setSigningKey(\"secret\");\n      converter.setVerifierKey(\"secret\");\n      return converter;\n  }\n  @Bean\n  @Primary\n  public DefaultTokenServices tokenServices() {\n      final DefaultTokenServices defaultTokenServices = \n        new DefaultTokenServices();\n      defaultTokenServices.setTokenStore(tokenStore());\n      return defaultTokenServices;\n  }\n}\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SpringSecurityConfig extends GlobalMethodSecurityConfiguration {\n  @Override\n  protected MethodSecurityExpressionHandler createExpressionHandler() {\n      return new OAuth2MethodSecurityExpressionHandler();\n  }\n}\n```", "```java\n@PreAuthorize(\"#oauth2.hasScope('movie') and #oauth2.hasScope('read')\")\n```", "```java\n@RestController\npublic class MovieController {\n   @RequestMapping(value = \"/movie\", method = RequestMethod.GET)\n   @ResponseBody\n   @PreAuthorize(\"#oauth2.hasScope('movie') and #oauth2.hasScope('read')\")\n   public Movie[] getMovies() {\n      initIt();//Movie list initialization\n      return movies;\n   }\n   //…\n}\n```", "```java\n@Data\n@ToString\n@Builder\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Movie {\n  private Long id;\n  private String title;\n  private String genre;\n}\n```", "```java\n@Configuration\n@EnableOAuth2Client\npublic class OAuthClientConfig {\n  @Autowired\n  private OAuth2ClientContext oauth2ClientContext;\n\n  @Autowired\n  @Qualifier(\"movieAppClientDetails\")\n  private OAuth2ProtectedResourceDetails movieAppClientDetails;\n\n  @ConfigurationProperties(prefix = \"security.oauth2.client.movie-app-client\")\n  @Bean\n  public OAuth2ProtectedResourceDetails movieAppClientDetails() {\n      return new AuthorizationCodeResourceDetails();\n  }\n  @Bean\n  public BCryptPasswordEncoder passwordEncoder() {\n      return new BCryptPasswordEncoder();\n  }\n  @Bean\n  public OAuth2RestTemplate movieAppRestTemplate() {\n      return new OAuth2RestTemplate(movieAppClientDetails, oauth2ClientContext);\n  }\n}\n```", "```java\n@RequestMapping(value = \"/movie/index\", method = RequestMethod.GET)\n@ResponseBody\npublic Movie[] index() {\n  Movie[] movies = movieAppRestTemplate\n    .getForObject(movieApiBaseUri, Movie[].class);\n  return movies;\n}\n```", "```java\nserver:\n  port: 8080\nspring:\n  thymeleaf:\n    cache: false\nsecurity:\n  oauth2:\n    client:\n      movie-app-client:\n        client-id: oAuthClientAppID\n        client-secret: secret\n        user-authorization-uri: http://localhost:8082/oauth-server/oauth/authorize\n        access-token-uri: http://localhost:8082/oauth-server/oauth/token\n        scope: read, write, movie\n        pre-established-redirect-uri: http://localhost:8080/movie/index\nmovie:\n  base-uri: http://localhost:8081/oauth-resource/movie\n```"]