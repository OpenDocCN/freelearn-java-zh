["```java\n    <span class=\"strong\"><strong>    activator  \"~run\"</strong></span>\n    ```", "```java\n    public static Result modifyHeaders() {\n           response().setHeader(\"ETag\", \"foo_java\");\n          return ok(\"Header Modification Example\");\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>  GET   /header_example    controllers.Application.modifyHeaders</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/header_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /header_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; ETag: foo_java</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 27</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Header Modification Example%</strong></span>\n    ```", "```java\n    <span class=\"strong\"><strong>  activator \"~run\"</strong></span>\n    ```", "```java\n    def modifyHeaders = Action {\n        Ok(\"Header Modification Example\")\n          .withHeaders(\n            play.api.http.HeaderNames.ETAG -&gt; \"foo_scala\"\n          )\n      }\n    ```", "```java\n    GET   /header_example    controllers.Application.modifyHeaders\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/header_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /header_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; ETag: foo_scala</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 27</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Header Modification Example%</strong></span>\n    ```", "```java\n    public static Result modifyCookies() {\n            response().setCookie(\"source\", \"tw\", (60*60));\n            return ok(\"Cookie Modification Example\");\n         }\n    ```", "```java\n    GET   /cookie_example    controllers.Application.modifyCookies\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/cookie_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /cookie_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Set-Cookie: source=tw; Expires=Sun, 23 Oct 2014 10:22:43 GMT; Path=/</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 27</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Cookie Modification Example%</strong></span>\n    ```", "```java\n    def modifyCookies = Action {\n          val cookie = Cookie(\"source\", \"tw\", Some(60*60))\n          Ok(\"Cookie Modification Example\")\n            .withCookies(cookie)\n         }\n    ```", "```java\n    GET   /cookie_example    controllers.Application.modifyCookies\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/cookie_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /cookie_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Set-Cookie: source=tw; Expires=Sun, 23 Oct 2014 09:27:24 GMT; Path=/; HTTPOnly</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 27</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Cookie Modification Example%</strong></span>\n    ```", "```java\nval cookie = Cookie(\"source\", \"tw\", Some(60*60))\n```", "```java\n    public static Result modifySession() {\n            final String sessionVar = \"user_pref\";\n            final String userPref = session(sessionVar);\n            if (userPref == null) {\n            session(sessionVar, \"tw\");\n            return ok(\"Setting session var: \" + sessionVar);\n            } else {\n            return ok(\"Found user_pref: \" + userPref);\n            }\n         }\n    ```", "```java\n    GET   /session_example    controllers.Application.modifySession\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/session_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /session_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Set-Cookie: PLAY_SESSION=\"cadbcca718bbfcc11af40a2cfe8e4c76716cca1f-user_pref=tw\"; Path=/; HTTPOnly</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 30</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Setting session var: user_pref%</strong></span>\n    ```", "```java\n    def modifySession = Action { request =&gt;\n          val sessionVar = \"user_pref\"\n          request.session.get(sessionVar) match {\n            case Some(userPref) =&gt; {\n              Ok(\"Found userPref: %s\".format(userPref))\n            }\n            case None =&gt; {\n          Ok(\"Setting session var: %s\".format(sessionVar))\n                .withSession(\n                  sessionVar -&gt; \"tw\"\n            )\n            }\n          }\n         }\n    ```", "```java\n    GET   /session_example    controllers.Application.modifySession\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/session_example</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying 127.0.0.1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (127.0.0.1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /session_example HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: text/plain; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Set-Cookie: PLAY_SESSION=\"64c6d2e0894a60dd28101e37b742f71ae332ed13-user_pref=tw\"; Path=/; HTTPOnly</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 30</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>Setting session var: user_pref%</strong></span>\n    ```", "```java\n    @With(AuthAction.class)\n        public static Result dashboard() {\n            return ok(\"User dashboard\");\n        }\n         public static Result login() {\n            return ok(\"Please login\");\n        }\n    ```", "```java\n    package controllers;\n     import play.*;\n    import play.mvc.*;\n    import play.libs.*;\n    import play.libs.F.*;\n     public class AuthAction extends play.mvc.Action.Simple {\n        public F.Promise&lt;Result&gt; call(Http.Context ctx) throws Throwable {\n            Http.Cookie authCookie = ctx.request().cookie(\"auth\");\n             if (authCookie != null) {\n              Logger.info(\"Cookie: \" + authCookie);\n              return delegate.call(ctx);\n             } else {\n              Logger.info(\"Redirecting to login page\");\n              return Promise.pure(redirect(controllers.routes.\n    Application.login()));\n            }\n        }\n    }\n    ```", "```java\n    GET   /dashboard      controllers.Application.dashboard\n      GET   /login      controllers.Application.login\n    ```", "```java\n    [info] application - Redirecting to login page\n    ```", "```java\n    def dashboard = AuthAction {\n           Ok(\"User dashboard\")\n         }\n          def login = Action {\n           Ok(\"Please login\")\n         }\n    ```", "```java\n    object AuthAction extends ActionBuilder[Request] {\n      import play.api.mvc.Results._\n      import scala.concurrent.Future\n       def invokeBlock[A](request: Request[A], block: (Request[A]) =&gt;     Future[Result]) = {\n        request.cookies.get(\"auth\") match {\n          case Some(authCookie) =&gt; {\n            Logger.info(\"Cookie: \" + authCookie)\n            block(request)  \n          }\n          case None =&gt; {\n            Logger.info(\"Redirecting to login page\")\n            Future.successful(Redirect(routes.Application.login()))\n          }\n        }\n      }\n    }\n    ```", "```java\n    GET   /dashboard      controllers.Application.dashboard\n      GET   /login      controllers.Application.login\n    ```", "```java\n    [info] application - Redirecting to login page\n    ```", "```java\n// Java\nreturn delegate.call(ctx);\n // Scala\nblock(request)\n```", "```java\n// Java\nreturn Promise.pure(redirect(controllers.routes.Application.login()));\n // Scala\nFuture.successful(Redirect(routes.Application.login()))\n```", "```java\n    import play.api.mvc._\n       object ResponseTimeLogFilter {\n          def apply(): ResponseTimeLogFilter = {\n             new ResponseTimeLogFilter()\n           }\n         }\n       class ResponseTimeLogFilter extends Filter {\n          import play.api.Logger\n          import scala.concurrent.Future\n          import play.api.libs.concurrent.Execution.Implicits.defaultContext\n            def apply(f: (RequestHeader) =&gt; Future[Result])(rh: RequestHeader): Future[Result] = {\n             val startTime = System.currentTimeMillis\n             val result = f(rh)\n             result.map { result =&gt;\n               val currDate = new java.util.Date\n               val responseTime = (currDate.getTime() - startTime) / 1000F\n                Logger.info(s\"${rh.remoteAddress} - [${currDate}] - ${rh.method} ${rh.uri}\" +\n               s\" ${result.header.status} ${responseTime}\")\n                result\n             }\n           }\n         }\n    ```", "```java\n    import play.GlobalSettings;\n        import play.api.mvc.EssentialFilter;\n         public class Global extends GlobalSettings {\n          public &lt;T extends EssentialFilter&gt; Class&lt;T&gt;[] filters() {\n            return new Class[]{\n        ResponseTimeLogFilter.class\n         };\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>[info] application - 0:0:0:0:0:0:0:1 - [Mon Oct 24 23:58:44 PHT 2014] - GET /session_example 200 0.673</strong></span>\n    ```", "```java\n    import play.api.Logger\n      import play.api.mvc._\n      import play.api.libs.concurrent.Execution.Implicits.defaultContext\n       object ResponseTimeLogFilter extends EssentialFilter {\n          def apply(nextFilter: EssentialAction) = new EssentialAction {\n            def apply(requestHeader: RequestHeader) = {\n              val startTime = System.currentTimeMillis\n              nextFilter(requestHeader).map { result =&gt;\n                val currDate = new java.util.Date\n                val responseTime = (currDate.getTime() - startTime) / 1000F\n                 Logger.info(s\"${requestHeader.remoteAddress} - [${currDate}] - ${requestHeader.method} ${requestHeader.uri}\" +\n                s\" ${result.header.status} ${responseTime}\")\n                 result\n              }\n            }\n          }\n        }\n    ```", "```java\n    import play.api._\n        import play.api.mvc._\n        import controllers.ResponseTimeLogFilter\n         object Global extends WithFilters(ResponseTimeLogFilter) {\n          override def onStart(app: Application) {\n         Logger.info(\"Application has started\")\n          }\n          override def onStop(app: Application) {\n            Logger.info(\"Application shutdown...\")\n          }\n        }\n    ```", "```java\n    <span class=\"strong\"><strong>[info] application - 0:0:0:0:0:0:0:1 - [Mon Oct 24 23:58:44 PHT 2014] - GET /session_example 200 0.673</strong></span>\n    ```", "```java\n    package controllers;\n     import play.*;\n    import play.mvc.*;\n    import play.data.*;\n    import views.html.*;\n    import models.*;\n     public class Products extends Controller {\n      private static Form&lt;Product&gt; productForm = Form.form(Product.class);\n       public static Result edit(Product product) {\n        return ok(views.html.products.form.render(product.sku, productForm.fill(product)));\n      }\n       public static Result update(String sku) {\n        return ok(\"Received update request\");\n      }\n    }\n    ```", "```java\n    package models;\n     import play.mvc.*;\n     public class Product implements PathBindable&lt;Product&gt; {\n      public String sku;\n      public String title;\n       private static final java.util.Map&lt;String, String&gt; productMap = new java.util.HashMap&lt;String, String&gt;();\n      static {\n        productMap.put(\"ABC\", \"8-Port Switch\");\n        productMap.put(\"DEF\", \"16-Port Switch\");\n        productMap.put(\"GHI\", \"24-Port Switch\");\n      }\n         public static void add(Product product) {\n          productMap.put(product.sku, product.title);\n        }  \n         public static java.util.List&lt;Product&gt; getProducts() {\n          java.util.List&lt;Product&gt; productList = new java.util.ArrayList&lt;Product&gt;();\n          for (java.util.Map.Entry&lt;String, String&gt; entry : productMap.entrySet()) {\n            Product p = new Product();\n            p.sku = entry.getKey();\n            p.title = entry.getValue();\n            productList.add(p);    \n          }\n          return productList;\n        }\n       public Product bind(String key, String value) {\n        String product = productMap.get(value);\n        if (product != null) {\n          Product p = new Product();\n          p.sku = value;\n          p.title = product;\n           return p;\n        } else {\n          throw new IllegalArgumentException(\"Product with sku \" + value + \" not found\");\n        }\n      }\n       public String unbind(String key) {\n        return sku;\n      }\n       public String javascriptUnbind() {\n        return \"function(k,v) {\\n\" +\n            \"    return v.sku;\" +\n            \"}\";\n      }\n    }\n    ```", "```java\n    GET   /products/:product   controllers.Products.edit(product: models.Product)\n      PUT   /products/:sku     controllers.Products.update(sku)\n    ```", "```java\n    @(sku: String, productForm: Form[models.Product])\n     @helper.form(action = routes.Products.update(sku)) {\n      @helper.inputText(productForm(\"sku\"))\n      @helper.inputText(productForm(\"title\"))\n       &lt;input type=\"submit\" /&gt;\n    }\n    ```", "```java\n    For request 'GET /products/XYZ' [Product with sku XYZ not found]\n    ```", "```java\n    package controllers\n       import play.api._\n      import play.api.data._\n      import play.api.data.Forms._\n      import play.api.mvc._\n       case class Product(sku: String, title: String)\n       object Product {\n        implicit def pathBinder(implicit stringBinder: PathBindable[String]) = new PathBindable[Product] {\n          override def bind(key: String, value: String): Either[String, Product] = {\n            for {\n              sku &lt;- stringBinder.bind(key, value).right\n              product &lt;- productMap.get(sku).toRight(\"Product not found\").right\n            } yield product\n          }\n          override def unbind(key: String, product: Product): String = {\n            stringBinder.unbind(key, product.sku)\n          }\n        }\n         def add(product: Product) = productMap += (product.sku -&gt; product)\n         val productMap = scala.collection.mutable.Map(\n          \"ABC\" -&gt; Product(\"ABC\", \"8-Port Switch\"),\n          \"DEF\" -&gt; Product(\"DEF\", \"16-Port Switch\"),\n          \"GHI\" -&gt; Product(\"GHI\", \"24-Port Switch\")\n        )\n      }\n       object Products extends Controller {\n        val productForm: Form[Product] = Form(\n          mapping(\n            \"sku\" -&gt; nonEmptyText,\n            \"title\" -&gt; nonEmptyText\n          )(Product.apply)(Product.unapply)\n        )\n         def edit(product: Product) = Action {\n          Ok(views.html.products.form(product.sku, productForm.fill(product)))\n        }\n         def update(sku: String) = Action {\n          Ok(\"Received update request\")\n        }\n      }\n    ```", "```java\n    GET   /products/:product   controllers.Products.edit(product: controllers.Product)\n      PUT   /products/:sku     controllers.Products.update(sku)\n    ```", "```java\n    @(sku: String, productForm: Form[controllers.Product])\n     @helper.form(action = routes.Products.update(sku)) {\n      @helper.inputText(productForm(\"sku\"))\n      @helper.inputText(productForm(\"title\"))\n       &lt;input type=\"submit\" /&gt;\n    }\n    ```", "```java\n    For request 'GET /products/XYZ' [Product not found]\n    ```", "```java\n// Java \n    private static Form&lt;Product&gt; productForm = Form.form(Product.class);\n    public static Result edit(Product product) {\n    return ok(views.html.products.form.render(product.sku, productForm.fill(product)));\n   }\n```", "```java\n// Scala \n    implicit def pathBinder(implicit stringBinder: PathBindable[String]) = new PathBindable[Product] {\n    override def bind(key: String, value: String): Either[String, Product] = {\n      for {\n        sku &lt;- stringBinder.bind(key, value).right\n        product &lt;- productMap.get(sku).toRight(\"Product not found\").right\n      } yield product\n    }\n    override def unbind(key: String, product: Product): String = {\n      stringBinder.unbind(key, product.sku)\n    }\n  }\n```", "```java\nGET   /products/:product   controllers.Products.edit(product: controllers.Product)\n```", "```java\n    public static Result index() {\n        return ok(Json.toJson(Product.getProducts()));\n      }\n    ```", "```java\n    import play.libs.Json;\n    ```", "```java\n    GET   /products       controllers.Products.index\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/products</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 117</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>[{\"sku\":\"ABC\",\"title\":\"8-Port Switch\"},{\"sku\":\"DEF\",\"title\":\"16-Port Switch\"},{\"sku\":\"GHI\",\"title\":\"24-Port Switch\"}]%</strong></span>\n    ```", "```java\n    def index = Action {\n        Ok(toJson(Product.productMap.values))\n      }\n    ```", "```java\n    import play.api.libs.json._\n        import play.api.libs.json.Json._\n    ```", "```java\n    implicit val productWrites = new Writes[Product] {\n          def writes(product: Product) = Json.obj(\n            \"sku\" -&gt; product.sku,\n            \"title\" -&gt; product.title\n          )\n        }\n    ```", "```java\n    GET   /products       controllers.Products.index\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v http://localhost:9000/products</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; GET /products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 200 OK</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 117</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>[{\"sku\":\"ABC\",\"title\":\"8-Port Switch\"},{\"sku\":\"DEF\",\"title\":\"16-Port Switch\"},{\"sku\":\"GHI\",\"title\":\"24-Port Switch\"}]%</strong></span>\n    ```", "```java\nimplicit val productWrites = new Writes[Product] {\n      def writes(product: Product) = Json.obj(\n        \"sku\" -&gt; product.sku,\n        \"title\" -&gt; product.title\n      )\n    }\n```", "```java\nOk(toJson(Product.productMap.values))\n```", "```java\n    @BodyParser.Of(BodyParser.Json.class)\n      public static Result postProduct() {\n        JsonNode json = request().body().asJson();\n        String sku = json.findPath(\"sku\").textValue();\n        String title = json.findPath(\"title\").textValue();\n         Product p = new Product();\n        p.sku = sku;\n        p.title = title;\n        Product.add(p);\n        return created(Json.toJson(p));\n      }\n    ```", "```java\n    import com.fasterxml.jackson.databind.JsonNode;\n    ```", "```java\n    POST   /products       controllers.Products.postProduct\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" --data '{\"sku\":\"JKL\", \"title\":\"VPN/Router\"}'</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; POST /products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>&gt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>* upload completely sent off: 35 out of 35 bytes</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 34</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>{\"sku\":\"JKL\",\"title\":\"VPN/Router\"}%</strong></span>\n    ```", "```java\n    def postProduct = Action(BodyParsers.parse.json) { request =&gt;\n        val post = request.body.validate[Product]\n        post.fold(\n          errors =&gt; {\n            BadRequest(Json.obj(\"status\" -&gt;\"error\", \"message\" -&gt; JsError.toFlatJson(errors)))\n          },\n          product =&gt; {\n            Product.add(product)\n            Ok(toJson(product))\n          }\n        )\n      }\n    ```", "```java\n    import play.api.libs.functional.syntax._\n    ```", "```java\n    implicit val productReads: Reads[Product] = (\n        (JsPath \\ \"sku\").read[String] and\n        (JsPath \\ \"title\").read[String]\n      )(Product.apply _)\n    ```", "```java\n    POST   /products       controllers.Products.postProduct\n    ```", "```java\n    <span class=\"strong\"><strong>$ curl -v -X POST http://localhost:9000/products --header \"Content-type: application/json\" --data '{\"sku\":\"JKL\", \"title\":\"VPN/Router\"}'</strong></span>\n    <span class=\"strong\"><strong>* Hostname was NOT found in DNS cache</strong></span>\n    <span class=\"strong\"><strong>*   Trying ::1...</strong></span>\n    <span class=\"strong\"><strong>* Connected to localhost (::1) port 9000 (#0)</strong></span>\n    <span class=\"strong\"><strong>&gt; POST /products HTTP/1.1</strong></span>\n    <span class=\"strong\"><strong>&gt; User-Agent: curl/7.37.1</strong></span>\n    <span class=\"strong\"><strong>&gt; Host: localhost:9000</strong></span>\n    <span class=\"strong\"><strong>&gt; Accept: */*</strong></span>\n    <span class=\"strong\"><strong>&gt; Content-type: application/json</strong></span>\n    <span class=\"strong\"><strong>&gt; Content-Length: 35</strong></span>\n    <span class=\"strong\"><strong>&gt;</strong></span>\n    <span class=\"strong\"><strong>* upload completely sent off: 35 out of 35 bytes</strong></span>\n    <span class=\"strong\"><strong>&lt; HTTP/1.1 201 Created</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Type: application/json; charset=utf-8</strong></span>\n    <span class=\"strong\"><strong>&lt; Content-Length: 34</strong></span>\n    <span class=\"strong\"><strong>&lt;</strong></span>\n    <span class=\"strong\"><strong>* Connection #0 to host localhost left intact</strong></span>\n    <span class=\"strong\"><strong>{\"sku\":\"JKL\",\"title\":\"VPN/Router\"}%</strong></span>\n    ```", "```java\nJsonNode json = request().body().asJson();\n    String sku = json.findPath(\"sku\").textValue();\n   String title = json.findPath(\"title\").textValue();\n```", "```java\nval post = request.body.validate[Product]\n     post.fold(\n      errors =&gt; {\n        BadRequest(Json.obj(\"status\" -&gt;\"error\", \"message\" -&gt; JsError.toFlatJson(errors)))\n      },\n      product =&gt; {\n        Product.add(product)\n        Ok(toJson(product))\n      }\n    )\n```", "```java\n    @helper.form(action = routes.Application.handleUpload, 'enctype -&gt; \"multipart/form-data\") {\n        Profile Photo: &lt;input type=\"file\" name=\"profile\"&gt;\n\n        &lt;div&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/div&gt;\n\n    }\n    ```", "```java\n    import play.mvc.Http.MultipartFormData;\n        import play.mvc.Http.MultipartFormData.FilePart;\n        import java.nio.file.*;\n        import java.io.*;    public static Result uploadForm() {\n            return ok(form.render());\n        }\n         public static Result handleUpload() {\n            MultipartFormData body = request().body().asMultipartFormData();\n            FilePart profileImage = body.getFile(\"profile\");\n             if (profileImage != null) {\n                try {\n                    String fileName = profileImage.getFilename();\n                    String contentType = profileImage.getContentType();\n                    File file = profileImage.getFile();\n                     Path path = FileSystems.getDefault().getPath(\"/tmp/\" + fileName);\n                    Files.write(path, Files.readAllBytes(file.toPath()));\n                    return ok(\"Image uploaded\");\n                } catch(Exception e) {\n                    return internalServerError(e.getMessage());\n                }\n            } else {\n                flash(\"error\", \"Please upload a valid file\");\n                return redirect(routes.Application.uploadForm());    \n            }\n        }\n    ```", "```java\n    GET   /upload_form    controllers.Application.uploadForm\n      POST   /upload      controllers.Application.handleUpload\n    ```", "```java\n    <span class=\"strong\"><strong>$ ls /tmp</strong></span>\n    <span class=\"strong\"><strong>B82BE492-0BEF-4B2D-9A68-2664FB9C2A97.png</strong></span>\n    ```", "```java\n    @helper.form(action = routes.Application.handleUpload, 'enctype -&gt; \"multipart/form-data\") {\n\n        Profile photo: &lt;input type=\"file\" name=\"profile\"&gt;\n\n        &lt;div&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/div&gt;\n\n    }\n    ```", "```java\n    def uploadForm = Action {\n        Ok(views.html.form())\n      }\n       def handleUpload = Action(parse.multipartFormData) { request =&gt;\n        import java.io.File\n         request.body.file(\"profile\") match {\n          case Some(profileImage) =&gt; {\n            val filename = profileImage.filename\n            val contentType = profileImage.contentType\n            profileImage.ref.moveTo(new File(s\"/tmp/$filename\"))\n            Ok(\"Image uploaded\")\n          }\n          case None =&gt; {\n            Redirect(routes.Application.uploadForm).flashing(\n              \"error\" -&gt; \"Please upload a valid file\")\n          }\n        }\n      }\n    ```", "```java\n    GET   /upload_form    controllers.Application.uploadForm\n      POST   /upload      controllers.Application.handleUpload\n    ```", "```java\n    <span class=\"strong\"><strong>$ ls /tmp</strong></span>\n    <span class=\"strong\"><strong>B82BE492-0BEF-4B2D-9A68-2664FB9C2A97.png</strong></span>\n    ```", "```java\n    public static Promise&lt;Result&gt; asyncExample() {\n          ActorRef fileReaderActor = Akka.system().actorOf(Props.create(FileReaderActor.class));\n          FileReaderProtocol words = new FileReaderProtocol(\"/usr/share/dict/words\");\n           return Promise.wrap(ask(fileReaderActor, words, 3000)).map(\n                new Function&lt;Object, Result&gt;() {\n                    public Result apply(Object response) {\n                        return ok(response.toString());\n                    }\n                }\n            );\n        }\n    ```", "```java\n    import java.util.*;\n        import play.libs.Akka;\n        import play.libs.F.Function;\n        import static play.mvc.Results.*;\n        import static akka.pattern.Patterns.ask;\n        import play.libs.F.Promise;\n        import akka.actor.*;\n    ```", "```java\n    package actors;\n         import java.util.*;\n        import java.util.concurrent.Callable;\n        import java.nio.charset.*;\n        import java.nio.file.*;\n        import java.io.*;\n        import scala.concurrent.ExecutionContext;\n        import scala.concurrent.Future;\n        import scala.concurrent.Await;\n        import scala.concurrent.duration.*;\n        import akka.dispatch.*;\n        import akka.util.Timeout;\n        import akka.actor.*;\n        import play.libs.Akka;\n         import static akka.dispatch.Futures.future;\n         public class FileReaderActor extends UntypedActor {\n          public void onReceive(Object message) throws Exception {\n            if (message instanceof FileReaderProtocol) {\n              final String filename = ((FileReaderProtocol) message).filename;\n               Future&lt;String&gt; future = future(new Callable&lt;String&gt;() {\n             public String call() {\n           try {\n             Path path = Paths.get(filename);\n              List&lt;String&gt; list = Files.readAllLines(path, StandardCharsets.UTF_8);\n             String[] contents = list.toArray(new String[list.size()]);\n               return Arrays.toString(contents);\n            } catch(Exception e) {\n          throw new IllegalStateException(e);\n            }\n        }\n            }, Akka.system().dispatcher());\n          akka.pattern.Patterns.pipe(\n        future, Akka.system().dispatcher()).to(getSender());\n          }\n        }\n      }\n    ```", "```java\n    package actors;\n         public class FileReaderProtocol implements java.io.Serializable {\n          public final String filename;\n          public FileReaderProtocol(String filename) { this.filename = filename; }\n        }\n    ```", "```java\n    GET   /async_example     controllers.Application.asyncExample\n    ```", "```java\n    akka.default-dispatcher.fork-join-executor.pool-size-max = 64\n        akka.actor.debug.receive = on\n    ```", "```java\n    val fileReaderActor = Akka.system.actorOf(Props[FileReaderActor], name = \"fileReader\")    \n          def asyncExample = Action.async {\n          implicit val timeout = Timeout(3 seconds)\n\n           (fileReaderActor ? FileReaderProtocol(\"/usr/share/dict/words\")).mapTo[String].map{ words =&gt;\n            Ok(\"Words: \\n\" + words)\n          }\n        }\n    ```", "```java\n    import play.api.libs.concurrent.Akka\n        import play.api.Play.current\n        import akka.pattern.ask\n        import akka.pattern.pipe\n        import akka.util.Timeout\n        import akka.actor.{Props, Actor, ActorLogging}\n        import scala.concurrent.duration._\n        import scala.concurrent._\n        import play.api.libs.concurrent.Execution.Implicits.defaultContext\n    ```", "```java\n    case class FileReaderProtocol(filename: String)\n         class FileReaderActor extends Actor with ActorLogging {\n\n           def receive = {\n            case FileReaderProtocol(filename) =&gt; {\n              val currentSender = sender\n              val contents = Future {\n                scala.io.Source.fromFile(filename).mkString\n              }\n              contents pipeTo currentSender\n            }\n          }\n        }\n    ```", "```java\n    GET   /async_example     controllers.Application.asyncExample\n    ```", "```java\n    akka.default-dispatcher.fork-join-executor.pool-size-max = 64\n        akka.actor.debug.receive = on\n    ```", "```java\n// Java\n    Path path = Paths.get(filename);\n    List&lt;String&gt; list = Files.readAllLines(path, StandardCharsets.UTF_8);\n```", "```java\n// Scala\n    val contents = Future {\n      scala.io.Source.fromFile(filename).mkString\n    }\n```", "```java\n// Java\n    return Promise.wrap(ask(fileReaderActor, words, 3000)).map(\n      new Function&lt;Object, Result&gt;() {\n        public Result apply(Object response) {\n          return ok(response.toString());\n        }\n      }\n    );\n     // Scala\n   (fileReaderActor ? FileReaderProtocol(\"/usr/share/dict/words\"))       .mapTo[String].map{ words =&gt;\n       Ok(\"Words: \\n\" + words)\n     }\n```", "```java\nakka.default-dispatcher.fork-join-executor.pool-size-max =64\n    akka.actor.debug.receive = on\n```"]