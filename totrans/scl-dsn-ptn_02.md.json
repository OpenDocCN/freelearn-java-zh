["```java\ntrait Alarm {\n  def trigger(): String\n}\n```", "```java\ntrait Notifier {\n  val notificationMessage: String\n\n  def printNotification(): Unit = {\n    System.out.println(notificationMessage)\n  }\n\n  def clear()\n}\n```", "```java\nclass NotifierImpl(val notificationMessage: String) extends Notifier {\n  override def clear(): Unit = System.out.println(\"cleared\")\n}\n```", "```java\ntrait Beeper {\n  def beep(times: Int): Unit = {\n    1 to times foreach(i => System.out.println(s\"Beep number: $i\"))\n  }\n}\n```", "```java\nobject BeeperRunner {\n  val TIMES = 10\n\n  def main (args: Array[String]): Unit = {\n    val beeper = new Beeper {}\n    beeper.beep(TIMES)\n  }\n}\n```", "```java\nBeep number: 1\nBeep number: 2\nBeep number: 3\nBeep number: 4\nBeep number: 5\nBeep number: 6\nBeep number: 7\nBeep number: 8\nBeep number: 9\nBeep number: 10\n```", "```java\nabstract class Connector {\n  def connect()\n  def close()\n}\n\ntrait ConnectorWithHelper extends Connector {\n  def findDriver(): Unit = {\n    System.out.println(\"Find driver called.\")\n  }\n}\n\nclass PgSqlConnector extends ConnectorWithHelper {\n  override def connect(): Unit = {\n    System.out.println(\"Connected...\")\n  }\n\n  override def close(): Unit = {\n    System.out.println(\"Closed...\")\n  }\n}\n```", "```java\ntrait Ping {\n  def ping(): Unit = {\n    System.out.println(\"ping\")\n  }\n}\n\ntrait Pong {\n  def pong(): Unit = {\n    System.out.println(\"pong\")\n  }\n}\n\ntrait PingPong extends Ping with Pong {\n  def pingPong(): Unit = {\n    ping()\n    pong()\n  }\n}\n\nobject Runner extends PingPong {\n  def main(args: Array[String]): Unit = {\n    pingPong()\n  }\n}\n```", "```java\nobject MixinRunner extends Ping with Pong {\n  def main(args: Array[String]): Unit = {\n    ping()\n    pong()\n  }\n}\n```", "```java\nclass Watch(brand: String, initialTime: Long) {\n  def getTime(): Long = System.currentTimeMillis() - initialTime\n}\n\nobject WatchUser {\n  def main(args: Array[String]): Unit = {\n    val expensiveWatch = new Watch(\"expensive brand\", 1000L) with Alarm with Notifier {\n      override def trigger(): String = \"The alarm was triggered.\"\n      override def clear(): Unit = {\n        System.out.println(\"Alarm cleared.\")\n      }\n      override val notificationMessage: String = \"Alarm is running!\"\n    }\n    val cheapWatch = new Watch(\"cheap brand\", 1000L) with Alarm {\n      override def trigger(): String = \"The alarm was triggered.\"\n    }\n    // show some watch usage.\n    System.out.println(expensiveWatch.trigger())\n    expensiveWatch.printNotification()\n    System.out.println(s\"The time is ${expensiveWatch.getTime()}.\")\n    expensiveWatch.clear()\n\n    System.out.println(cheapWatch.trigger())\n    System.out.println(\"Cheap watches cannot manually stop the alarm...\")\n  }\n}\n```", "```java\nThe alarm was triggered.\nAlarm is running!\nThe time is 1234567890562.\nAlarm cleared.\nThe alarm was triggered.\nCheap watches cannot manually stop the alarm...\n```", "```java\nobject ReallyExpensiveWatchUser {\n  def main(args: Array[String]): Unit = {\n    val reallyExpensiveWatch = new Watch(\"really expensive brand\", 1000L) with ConnectorWithHelper {\n      override def connect(): Unit = {\n        System.out.println(\"Connected with another connector.\")\n      }\n      override def close(): Unit = {\n        System.out.println(\"Closed with another connector.\")\n      }\n    }\n\n    System.out.println(\"Using the really expensive watch.\")\n    reallyExpensiveWatch.findDriver()\n    reallyExpensiveWatch.connect()\n    reallyExpensiveWatch.close()\n  }\n}\n```", "```java\nError:(36, 80) illegal inheritance; superclass Watch\n is not a subclass of the superclass Connector\n of the mixin trait ConnectorWithHelper\n    val reallyExpensiveWatch = new Watch(\"really expensive brand\", 1000L) with ConnectorWithHelper {\n^\n```", "```java\ntrait AlarmNotifier {\n  this: Notifier =>\n\n  def trigger(): String\n}\n```", "```java\nobject SelfTypeWatchUser {\n  def main(args: Array[String]): Unit = {\n    // uncomment to see the self-type error.\n    // val watch = new Watch(\"alarm with notification\", 1000L) with AlarmNotifier {\n    //}\n    val watch = new Watch(\"alarm with notification\", 1000L) with AlarmNotifier with Notifier {\n      override def trigger(): String = \"Alarm triggered.\"\n\n      override def clear(): Unit = {\n        System.out.println(\"Alarm cleared.\")\n      }\n\n      override val notificationMessage: String = \"The notification.\"\n    }\n\n    System.out.println(watch.trigger())\n    watch.printNotification()\n    System.out.println(s\"The time is ${watch.getTime()}.\")\n    watch.clear()\n  }\n}\n```", "```java\ntrait FormalGreeting {\n  def hello(): String\n}\n\ntrait InformalGreeting {\n  def hello(): String\n}\n\nclass Greeter extends FormalGreeting with InformalGreeting {\n  override def hello(): String = \"Good morning, sir/madam!\"\n}\n\nobject GreeterUser {\n  def main(args: Array[String]): Unit = {\n    val greeter = new Greeter()\n    System.out.println(greeter.hello())\n  }\n}\n```", "```java\ndef getTime(): String\n```", "```java\ndef getTime(): Int\n```", "```java\ntrait A {\n  def hello(): String = \"Hello, I am trait A!\"\n}\n\ntrait B {\n  def hello(): String = \"Hello, I am trait B!\"\n}\n\nobject Clashing extends A with B {\n  def main(args: Array[String]): Unit = {\n    System.out.println(hello())\n  }\n}\n```", "```java\nError:(11, 8) object Clashing inherits conflicting members:\n  method hello in trait A of type ()String and\n  method hello in trait B of type ()String\n(Note: this can be resolved by declaring an override in object Clashing.)\nobject Clashing extends A with B {\n ^\n```", "```java\noverride def hello(): String = super[A].hello()\n```", "```java\ndef value(a: Int): Int = a // in trait A\ndef value(a: Int): String = a.toString // in trait B\n```", "```java\nError:(19, 16) overriding method value in trait B of type (a: Int)String;\n method value has incompatible type\n  override def value(a: Int): Int = super[A].value(a)\n               ^\n```", "```java\nError:(20, 16) method value is defined twice\n  conflicting symbols both originated in file '/path/to/traits/src/main/scala/com/ivan/nikolov/composition/Clashing.scala'\n  override def value(a: Int): String = super[B].value(a)\n```", "```java\ntrait C {\n  def value(a: Int): Int = a\n}\n\ntrait D {\n  def value(a: Int): String = a.toString\n}\n\nobject Example {\n\n  val c = new C {}\n  val d = new D {}\n\n  def main (args: Array[String]): Unit = {\n    System.out.println(s\"c.value: ${c.value(10)}\")\n    System.out.println(s\"d.value: ${d.value(10)}\")\n  }\n}\n```", "```java\ntrait A {\n  def hello(): String = \"Hello from A\"\n}\n\ntrait B extends A {\n  override def hello(): String = \"Hello from B\"\n}\n\ntrait C extends A {\n  override def hello(): String = \"Hello from C\"\n}\n\ntrait D extends B with C {\n\n}\n\nobject Diamond extends D {\n  def main(args: Array[String]): Unit = {\n    System.out.println(hello())\n  }\n}\n```", "```java\nHello from C\n```", "```java\ntrait D extends C with B {\n\n}\n```", "```java\nHello from B\n```", "```java\nclass Animal extends AnyRef\nclass Dog extends Animal\n```", "```java\nAnimal -> AnyRef -> Any\nDog -> Animal -> AnyRef -> Any\n```", "```java\nclass MultiplierIdentity {\n  def identity: Int = 1\n}\n```", "```java\ntrait DoubledMultiplierIdentity extends MultiplierIdentity {\n  override def identity: Int = 2 * super.identity\n}\n\ntrait TripledMultiplierIdentity extends MultiplierIdentity {\n  override def identity: Int = 3 * super.identity\n}\n```", "```java\n// first Doubled, then Tripled\nclass ModifiedIdentity1 extends DoubledMultiplierIdentity with TripledMultiplierIdentity\n\nclass ModifiedIdentity2 extends DoubledMultiplierIdentity with TripledMultiplierIdentity {\n  override def identity: Int = super[DoubledMultiplierIdentity].identity\n}\n\nclass ModifiedIdentity3 extends DoubledMultiplierIdentity with TripledMultiplierIdentity {\n  override def identity: Int = super[TripledMultiplierIdentity].identity\n}\n// first Doubled, then Tripled\n```", "```java\n// first Tripled, then Doubled\nclass ModifiedIdentity4 extends TripledMultiplierIdentity with DoubledMultiplierIdentity\n\nclass ModifiedIdentity5 extends TripledMultiplierIdentity with DoubledMultiplierIdentity {\n  override def identity: Int = super[DoubledMultiplierIdentity].identity\n}\n\nclass ModifiedIdentity6 extends TripledMultiplierIdentity with DoubledMultiplierIdentity {\n  override def identity: Int = super[TripledMultiplierIdentity].identity\n}\n// first Tripled, then Doubled\n```", "```java\nobject ModifiedIdentityUser {\n  def main(args: Array[String]): Unit = {\n    val instance1 = new ModifiedIdentity1\n    val instance2 = new ModifiedIdentity2\n    val instance3 = new ModifiedIdentity3\n    val instance4 = new ModifiedIdentity4\n    val instance5 = new ModifiedIdentity5\n    val instance6 = new ModifiedIdentity6\n\n    System.out.println(s\"Result 1: ${instance1.identity}\")\n    System.out.println(s\"Result 2: ${instance2.identity}\")\n    System.out.println(s\"Result 3: ${instance3.identity}\")\n    System.out.println(s\"Result 4: ${instance4.identity}\")\n    System.out.println(s\"Result 5: ${instance5.identity}\")\n    System.out.println(s\"Result 6: ${instance6.identity}\")\n  }\n}\n```", "```java\nResult 1: 6\nResult 2: 2\nResult 3: 6\nResult 4: 6\nResult 5: 6\nResult 6: 3\n```", "```java\nclass DoubledMultiplierIdentityTest extends FlatSpec with ShouldMatchers with DoubledMultiplierIdentity\n```", "```java\nError:(5, 79) illegal inheritance; superclass FlatSpec\n is not a subclass of the superclass MultiplierIdentity\n of the mixin trait DoubledMultiplierIdentity\nclass DoubledMultiplierIdentityTest extends FlatSpec with ShouldMatchers with DoubledMultiplierIdentity {\n^\n```", "```java\npackage com.ivan.nikolov.linearization\n\nimport org.scalatest.{ShouldMatchers, FlatSpec}\n\nclass DoubledMultiplierIdentityTest extends FlatSpec with ShouldMatchers {\n\n  class DoubledMultiplierIdentityClass extends DoubledMultiplierIdentity\n\n  val instance = new DoubledMultiplierIdentityClass\n\n  \"identity\" should \"return 2 * 1\" in {\n    instance.identity should equal(2)\n  }\n}\n```", "```java\ntrait A {\n  def hello(): String = \"Hello, I am trait A!\"\n  def pass(a: Int): String = s\"Trait A said: 'You passed $a.'\"\n}\n```", "```java\npackage com.ivan.nikolov.composition\n\nimport org.scalatest.{FlatSpec, Matchers}\n\nclass TraitATest extends FlatSpec with Matchers with A {\n\n  \"hello\" should \"greet properly.\" in {\n    hello() should equal(\"Hello, I am trait A!\")\n  }\n\n  \"pass\" should \"return the right string with the number.\" in {\n    pass(10) should equal(\"Trait A said: 'You passed 10.'\")\n  }\n\n  it should \"be correct also for negative values.\" in {\n    pass(-10) should equal(\"Trait A said: 'You passed -10.'\")\n  }\n}\n```", "```java\npackage com.ivan.nikolov.composition\n\nimport org.scalatest.{FlatSpec, Matchers}\n\nclass TraitACaseScopeTest extends FlatSpec with Matchers {\n  \"hello\" should \"greet properly.\" in new A {\n    hello() should equal(\"Hello, I am trait A!\")\n  }\n\n  \"pass\" should \"return the right string with the number.\" in new A {\n    pass(10) should equal(\"Trait A said: 'You passed 10.'\")\n  }\n\n  it should \"be correct also for negative values.\" in new A {\n    pass(-10) should equal(\"Trait A said: 'You passed -10.'\")\n  }\n}\n```", "```java\nmvn clean test\n```", "```java\nsbt test\n```"]