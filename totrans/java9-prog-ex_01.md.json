["```java\n    ~$ /usr/libexec/java_home -V\nMatching Java Virtual Machines (10):\n 9, x86_64:    \"Java SE 9-ea\"    /Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home\n 1.8.0_92, x86_64:    \"Java SE 8\"    /Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home\n 1.7.0_60, x86_64:    \"Java SE 7\"    /Library/Java/JavaVirtualMachines/jdk1.7.0_60.jdk/Contents/Home\n/Library/Java/JavaVirtualMachines/jdk-9.jdk/Contents/Home\n\n```", "```java\n    export JAVA_HOME=$(/usr/libexec/java_home)\n\n```", "```java\n    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)\n\n```", "```java\n    export JAVA_HOME=$(/usr/libexec/java_home -v 9)\n\n```", "```java\n    $ jshell\n|  Welcome to JShell -- Version 9-ea\n|  For an introduction type: /help intro\njshell> \n\n```", "```java\n    jshell> /help intro\n| \n|  intro\n| \n|  The jshell tool allows you to execute Java code, getting immediate results.\n|  You can enter a Java definition (variable, method, class, etc), like:  int x = 8\n|  or a Java expression, like:  x + x\n|  or a Java statement or import.\n|  These little chunks of Java code are called 'snippets'.\n| \n|  There are also jshell commands that allow you to understand and\n|  control what you are doing, like:  /list\n| \n|  For a list of commands: /help\n\n```", "```java\n    jshell> /help\n|  Type a Java language expression, statement, or declaration.\n|  Or type one of the following commands:\n|     /list [<name or id>|-all|-start]                             -- list the source you have typed\n|     /edit <name or id>                                           -- edit a source entry referenced by name or id\n|     /drop <name or id>                                           -- delete a source entry referenced by name or id\n|     /save [-all|-history|-start] <file>                          -- Save snippet source to a file.\n...\n\nHello World example:\n```", "```java\n    jshell> System.out.println(\"Hello World!\")\nHello World!\n\n```", "```java\n    jshell> int a = 13\na ==> 13\njshell> \n\n```", "```java\n    jshell> System.out.println(a)\n13\n\n```", "```java\n    jshell> void main(String[] args){\n ...>  System.out.println(\"Hello World\")\n ...> }\n|  Error:\n|  ';' expected\n|   System.out.println(\"Hello World\")\n| \n\n```", "```java\n    jshell> void main(String[] args){\n ...>  System.out.println(\"Hello World\");\n ...> }\n|  created method main(String[])\n\n```", "```java\n    jshell> main(null)\nHello World\n\n```", "```java\n    jshell> /list\n 1 : System.out.println(\"Hello World!\")\n 2 : int a = 13;\n 3 : System.out.println(a)\n 4 : void main(String[] args){\n System.out.println(\"Hello World\");\n }\n\n```", "```java\n    jshell> /save HelloWorld.java\n\n```", "```java\n    $ cat HelloWorld.java\nSystem.out.println(\"Hello World!\")\nint a = 13;\nSystem.out.println(a)\nvoid main(String[] args){\n System.out.println(\"Hello World\");\n }\n\n```", "```java\n    jshell> /reset\n|  Resetting state.\n\n```", "```java\n    jshell> /list\n\njshell>\n\n```", "```java\n    jshell> /open HelloWorld.java\nHello World!\n13\n\n```", "```java\n/edit command followed by the number of the snippet:\n```", "```java\n    jshell> /edit 1\n\n```", "```java\n    printf(\"Hello World!\")\n\n```", "```java\n    Hello World!\n\n```", "```java\n    jshell> /list -start\n\n s1 : import java.util.*;\n s2 : import java.io.*;\n s3 : import java.math.*;\n s4 : import java.net.*;\n s5 : import java.util.concurrent.*;\n s6 : import java.util.prefs.*;\n s7 : import java.util.regex.*;\n s8 : void printf(String format, Object... args) { System.out.printf(format, args); }\n\nprintf, which is also the name of a method in the PrintStream class.\n```", "```java\n    jshell> /list -all\n\n...\n s7 : import java.util.regex.*;\n...\n 1 : System.out.println(\"Hello World!\")\n...\n e1 : System.out.println(\"Hello World!\")\n int a = 14;\n 5 : System.out.println(\"Hello World!\");\n...\n\n```", "```java\n    jshell> /1\nSystem.out.println(\"Hello World!\")\nHello World!\n\n```", "```java\n/-n. Here, n is the number of the snippet counting from the last one. So, if you want to execute the very last snippet, then you have to write /-1. If you want to execute the one before the last one, you have to write /-2. Note that if you already typed /-1, then the last one is the re-execution of the last snippet and snippet number -2 will become number -3.\n```", "```java\n    jshell> /vars\n|    int a = 13\n\n```", "```java\n    jshell> class s {}\n|  created class s\n\njshell> /types\n|    class s\n\n```", "```java\n    jshell> /methods\n|    printf (String,Object...)void\n|    main (String[])void\n\n```", "```java\n    jshell> /drop 1\n|  This command does not accept the snippet '1' : System.out.println(\"Hello World!\")\n|  See /types, /methods, /vars, or /list\n\n1 was executed and the /drop command actually drops the defined variable, type, or method. There is nothing to be dropped in the first snippet. But, if we reissue the /list command, we will get the following results:\n```", "```java\n    jshell> /list\n\n 1 : System.out.println(\"Hello World!\")\n 2 : int a = 13;\n 3 : System.out.println(a)\n 4 : void main(String[] args){\n System.out.println(\"Hello World\");\n }\n\n```", "```java\n    jshell> /drop 2\n|  dropped variable a\n\njshell> /drop 4\n|  dropped method main(String[])\n\n```", "```java\n    jshell> /set editor \"vi\"\n|  Editor set to: vi\n\n```", "```java\nvoid println(String message) { System.out.println(message); }\n\n```", "```java\n    jshell> /set start sample.startup\n\njshell> /reset\n|  Resetting state.\n\njshell> println(\"wuff\")\nwuff\n\njshell> printf(\"This won't work...\")\n|  Error:\n|  cannot find symbol\n|    symbol:   method printf(java.lang.String)\n|  printf(\"This won't work...\")\n|  ^----^\n\n```", "```java\n    jshell> /set feedback verbose\n|  Feedback mode: verbose\n\njshell> int z = 13\nz ==> 13\n|  modified variable z : int\n|    update overwrote variable z : int\n\n```", "```java\npublic class HelloWorld { \n  public static void main(String[] args){ \n        System.out.println(\"Hello World\"); \n       } \n  }\n\n```", "```java\n    javac HelloWorld.java\n\n```", "```java\n    $ java HelloWorld\nHello World\n\n```", "```java\nmain method and we inserted the declaration of the class around it.\n```", "```java\n    $ mv HelloWorld.java Hello.java\n~/Dropbox/java_9-by_Example$ javac Hello.java\nHello.java:2: error: class HelloWorld is public, should be declared in a file named HelloWorld.java\npublic class HelloWorld {\n ^\n1 error\n\n```", "```java\n    java -cp . HelloWorld\n\n```", "```java\n    $ javap HelloWorld.class\nCompiled from \"HelloWorld.java\"\npublic class HelloWorld {\n public HelloWorld();\n public static void main(java.lang.String[]);\n}\n\n```", "```java\n    $ javap -c HelloWorld.class\nCompiled from \"HelloWorld.java\"\npublic class HelloWorld {\n public HelloWorld();\n Code:\n 0: aload_0\n 1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n 4: return\n public static void main(java.lang.String[]);\n Code:\n 0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;\n 3: ldc           #3                  // String hali\n 5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n 8: return\n}\n\n```", "```java\nManifest-Version: 1.0 \nCreated-By: 9-ea (Oracle Corporation)\n\n```", "```java\n         jar -cf hello.jar HelloWorld.class\n\n```", "```java\n    $ java -cp hello.jar HelloWorld\nHello World\n\n```", "```java\n$ jar -tf hello.jar \nMETA-INF/ \nMETA-INF/MANIFEST.MF \nHelloWorld.class\n\n```", "```java\npublic class HelloWorldLoop { \n  public static void main(String[] args){ \n       for( ;; ){ \n         System.out.println(\"Hello World\"); \n         } \n       } \n  }\n\n```", "```java\n$ jps \n21873 sun.tools.jps.Jps \n21871 HelloWorldLoop\n\n```", "```java\n    -Xagentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=7896\n\n```"]