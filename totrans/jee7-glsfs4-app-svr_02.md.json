["```java\n<h:outputStylesheet library=\"css\"  name=\"styles.css\"/>\n```", "```java\n<h:outputScript library=\"scripts\" name=\"somescript.js\"/>\n```", "```java\n<h:graphicImage library=\"images\" name=\"logo.png\"/>\n```", "```java\n<?xml version='1.0' encoding='UTF-8' ?>\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html \n\n >\n <h:head>\n        <title>Enter Customer Data</title>\n </h:head>\n <h:body>\n <h:outputStylesheet library=\"css\" name=\"styles.css\"/>\n <h:form id=\"customerForm\">\n <h:messages></h:messages>\n <h:panelGrid columns=\"2\"\n columnClasses=\"rightAlign,leftAlign\">\n <h:outputLabel for=\"firstName\" value=\"First \n Name:\">\n </h:outputLabel>\n <h:inputText id=\"firstName\"\n label=\"First Name\"\n value=\"#{customer.firstName}\"\n required=\"true\">\n <f:validateLength minimum=\"2\" maximum=\"30\">\n </f:validateLength>\n </h:inputText>\n <h:outputLabel for=\"lastName\" value=\"Last Name:\">\n </h:outputLabel>\n <h:inputText id=\"lastName\"\n label=\"Last Name\"\n value=\"#{customer.lastName}\"\n required=\"true\">\n <f:validateLength minimum=\"2\" maximum=\"30\">\n </f:validateLength>\n </h:inputText>\n <h:outputLabel for=\"email\" value=\"Email:\">\n </h:outputLabel>\n <h:inputText id=\"email\" \n label=\"Email\" \n value=\"#{customer.email}\">\n <f:validateLength minimum=\"3\" maximum=\"30\">\n </f:validateLength>\n </h:inputText>\n <h:panelGroup></h:panelGroup>\n <h:commandButton action=\"confirmation\" \n value=\"Save\">\n </h:commandButton>\n </h:panelGrid>\n </h:form>\n </h:body>\n</html>\n```", "```java The second namespace (``) is the core JSF tag library; by convention, the prefix `f` (for faces) is used when using this tag library.`` ```", "```java ``The first JSF-specific tags we see in our example are the `<h:head>` and the `<h:body>` tags. These tags are analogous to the standard HTML `<head>` and `<body>` tags and are rendered as such when the page is displayed in the browser.`` ```", "```java ``The `<h:outputStylesheet>` tag is used to load a CSS style sheet from a well-known location. (JSF standardizes the locations of resources such as CSS style sheets and JavaScript files; this will be discussed in detail later in the chapter.) The value of the `library` attribute must correspond to the directory where the CSS file resides (this directory must be under a `resources` directory). The `name` attribute must correspond to the name of the CSS style sheet we wish to load.`` ```", "```java ``The next tag that we see is the `<h:form>` tag. This tag generates an HTML form when the page is rendered. As can be seen in the example, there is no need to specify an `action` or a `method` attribute for this tag; as a matter of fact, there is neither an `action` attribute nor a `method` attribute for this tag. The `action` attribute for the rendered HTML form will be generated automatically, and the `method` attribute will always be `\"post\".` The `id` attribute of `<h:form>` is optional; however, it is a good idea to always add it since it makes debugging JSF applications easier.`` ```", "```java ``The next tag we see is the `<h:messages>` tag. As its name implies, this tag is used to display any messages. As we will see shortly, JSF can automatically generate validation messages. These will be displayed inside this tag. Additionally, arbitrary messages can be added programmatically via the `addMessage()` method defined in `javax.faces.context.FacesContext`.`` ```", "```java ``The next JSF tag we see is `<h:panelGrid>`. This tag is roughly equivalent to an HTML table, but it works a bit differently. Instead of declaring rows and columns, the `<h:panelGrid>` tag has a `columns` attribute; the value of this attribute indicates the number of columns in the table rendered by this tag. As we place components inside this tag, they will be placed in a row until the number of columns defined in the `columns` attribute is reached, and then the next component will be placed in the next row. In the example, the value of the `columns` attribute is two. Therefore, the first two tags will be placed in the first row, the next two will be placed in the second row, and so forth.`` ```", "```java ``Another interesting attribute of `<h:panelGrid>` is the `columnClasses` attribute. This attribute assigns a CSS class to each column in the rendered table. In the example, two CSS classes (separated by a comma) are used as the value for this attribute. This has the effect of assigning the first CSS class to the first column and the second one to the second column. Had there been three or more columns, the third one would have gotten the first CSS class, the fourth one would have gotten the second one, and so on, alternating between the first one and the second one. To clarify how this works, the next code snippet illustrates a portion of the source of the HTML markup generated by our example page:`` ```", "```java\n`<table>     <tbody>         <tr>  **<td class=\"rightAlign\">**  **<label for=\"customerForm:firstName\">**  **First Name:**  **</label>**  **</td>**  **<td class=\"leftAlign\">**  **<input id=\"customerForm:firstName\" type=\"text\"**  **name=\"customerForm:firstName\" />**  **</td>**         </tr>         <tr>  **<td class=\"rightAlign\">**  **<label for=\"customerForm:lastName\">**  **Last Name:**  **</label>**  **</td>**  **<td class=\"leftAlign\">**  **<input id=\"customerForm:lastName\" type=\"text\"**  **name=\"customerForm:lastName\" />**  **</td>**         </tr>         <tr>  **<td class=\"rightAlign\">**  **<label for=\"customerForm:lastName\">**  **Email:**  **</label>**  **</td>**  **<td class=\"leftAlign\">**  **<input id=\"customerForm:email\" type=\"text\"**  **name=\"customerForm:email\" />**  **</td>**         </tr>         <tr>  **<td class=\"rightAlign\"></td>**  **<td class=\"leftAlign\">**  **<input type=\"submit\" name=\"customerForm:j_idt12\"**  **value=\"Save\" />**  **</td>**         </tr>     </tbody> </table>`\n```", "```java ``Note how each `<td>` tag has an alternating CSS tag of \"`rightAlign`\" or \"`leftAlign`\". We achieved this by assigning the value \"`rightAlign,leftAlign`\" to the `columnClasses` attribute of `<h:panelGrid>`. The CSS classes we have used in our example are defined in the CSS style sheet we loaded via the `<h:outputStylesheet>` tag we discussed earlier. The IDs of the generated markup are a combination of the ID we gave to the `<h:form>` component plus the ID of each individual component. We didn't assign an ID to the `<h:commandButton>` component near the end of the page, so the JSF runtime assigned one automatically.`` ```", "```java ``At this point in the example, we start adding components inside `<h:panelGrid>`. These components will be rendered inside the table rendered by `<h:panelGrid>`. As we have mentioned before, the number of columns in the rendered table is defined by the columns attribute of `<h:panelGrid>`. Therefore, we don't need to worry about columns (or rows); we have to just start adding components, and they will be inserted in the right place.`` ```", "```java ``The next tag we see is the `<h:outputLabel>` tag. This tag renders an HTML `label` element. Labels are associated with other components via the `for` attribute, whose value must match the ID of the component that the label is for.`` ```", "```java ``Next, we see the `<h:inputText>` tag. This tag generates a text field in the rendered page; its `label` attribute is used for any validation messages. It lets the user know which field the message refers to.`` ```", "```java ``Although it is not required for the value of the `label` attribute of `<h:inputText>` to match the label displayed on the page, it is highly recommended to use this value. In case of an error, this will let the user know exactly which field the message is referring to.`` ```", "```java ``Of particular interest is the tag's `value` attribute. What we see as the value for this attribute is a **value-binding expression**. This means that this value is tied to a property of one of the application's named beans. In the example, this particular text field is tied to a property called `firstName` in a named bean called `customer`. When a user enters a value for this text field and submits the form, the corresponding property in the named bean is updated with this value. The tag's `required` attribute is optional, and valid values for it are `true` and `false`. If this attribute is set to `true`, the container will not let the user submit the form until the user enters some data in the text field. If the user attempts to submit the form without entering a required value, the page will be reloaded and an error message will be displayed inside the `<h:messages>` tag. The following screenshot shows the error message:`` ```", "```java ``The preceding screenshot illustrates the default error message shown when the user attempts to save the form in the example without entering a value for the customer's first name. The first part of the message (**First Name**) is taken from the value of the `label` attribute of the corresponding `<h:inputTextField>` tag. You can customize the text as well as the style of the message (font, color, and so on). We will cover how to do this later in this chapter.`` ```", "```java ``Having an `<h:messages>` tag on every JSF page is a good idea; without it, the user might not see the validation messages and will have no idea why the form submission is not going through. By default, JSF validation messages do not generate any output in the GlassFish log. A common mistake new JSF developers make is that they fail to add an `<h:messages>` tag to their pages. Without the tag, if the validation fails, then the navigation seems to fail for no reason. (The same page is rendered if the navigation fails, and without an `<h:messages>` tag, no error messages are displayed in the browser.)`` ```", "```java ``We can define the project stage as an initialization parameter to the faces servlet in the `web.xml` file or as a custom JNDI resource. Since `web.xml` is now optional and altering it makes it relatively easy to use the wrong project stage if we forget to modify it when we move our code from one environment to another, the preferred way of setting the project stage is through a custom JNDI resource.`` ```", "```java ``After you enter the preceding two values, the **Factory Class** field will be automatically populated with the value `org.glassfish.resources.custom.factory.PrimitivesAndStringFactory`.`` ```", "```java\n `FacesContext facesContext =         FacesContext.getCurrentInstance();     Application application = facesContext.getApplication();      if (application.getProjectStage().equals(         ProjectStage.Production)) {       //do production stuff     } else if (application.getProjectStage().equals(         ProjectStage.Development)) {       //do development stuff     } else if (application.getProjectStage().equals(         ProjectStage.UnitTest)) {       //do unit test stuff     } else if (application.getProjectStage().equals(         ProjectStage.SystemTest)) {       //do system test stuff     }`\n```", "```java ``As we can see, project stages allow us to modify our code's behavior for different environments. More importantly, setting the project stage allows the JSF engine to behave a bit differently based on the project stage setting. Relevant to our discussion, setting the project stage to Development results in additional logging statements in the application server log. Therefore, if we forget to add an `<h:messages>` tag to our page—our project stage is Development—and validation fails, a validation error will be displayed on the page even if we omit the `<h:messages>` component. The following screenshot shows the validation error message:`` ```", "```java ``In the previous section's example, note that each `<h:inputField>` tag has a nested `<f:validateLength>` tag. As its name implies, this tag validates that the entered value for the text field is between a minimum and maximum length. The minimum and maximum values are defined by the tag's `minimum` and `maximum` attributes. `<f:validateLength>` is one of the standard validators included in JSF. Just like with the `required` attribute of `<h:inputText>`, JSF will automatically display a default error message when a user attempts to submit a form with a value that does not validate.`` ```", "```java ``In addition to `<f:validateLength>`, JSF includes other standard validators, which are listed in the following table:`` ```", "```java ``Note that in the description for `<f:validateBean>`, we briefly mentioned Bean Validation. The Bean Validation JSR aims to standardize JavaBean validation. JavaBeans are used across several other API's that, up until recently, had to implement their own validation logic. JSF 2.0 adopted the Bean Validation standard to help validate named bean properties.`` ```", "```java ``For the complete list of Bean Validation annotations, refer to the `javax.validation.constraints` package in the Java EE 7 API at [http://docs.oracle.com/javaee/7/api/](http://docs.oracle.com/javaee/7/api/).`` ```", "```java `` `<h:panelGroup>` is the next new tag in the example. Typically, `<h:panelGroup>` is used to group several components together so that they occupy a single cell in a `<h:panelGrid>` tag. This can be accomplished by adding components inside `<h:panelGroup>` and adding `<h:panelGroup>` to `<h:panelGrid>`. As can be seen in the example, this particular instance of `<h:panelGroup>` has no child components. In this particular case, the purpose of `<h:panelGroup>` is to have an \"empty\" cell and have the next component, `<h:commandButton>`, align with all other input fields in the form. `` ```", "```java `` `<h:commandButton>` renders an HTML submit button in the browser. Just like with standard HTML, its purpose is to submit the form. Its `value` attribute simply sets the button's label. This tag's `action` attribute is used for navigation. The next page shown is based on the value of this attribute. The `action` attribute can have a `String` constant or a **method binding** **expression**, meaning that it can point to a method in a named bean that returns a `String` value. `` ```", "```java ``If the base name of a page in our application matches the value of the `action` attribute of an `<h:commandButton>` tag, then we navigate to this page when clicking on the button. This JSF feature frees us from having to define navigation rules, as we used to do in the older versions of JSF. In our example, our confirmation page is called `confirmation.xhtml`; therefore, by convention, this page will be shown when the button is clicked since the value of its `action` attribute (\"`confirmation`\") matches the base name of the page.`` ```", "```java ``To make a Java class a CDI named bean, all we need to do is make sure that the class has a public, no-argument constructor (one is created implicitly if there are no other constructors declared, which is the case in our example), and add the `@Named` annotation at the class level. The following code snippet is the managed bean for our example:`` ```", "```java\n`package net.ensode.glassfishbook.jsf; import javax.enterprise.context.RequestScoped; import javax.inject.Named;  **@Named** @RequestScoped public class Customer {    private String firstName;   private String lastName;   private String email;    public String getEmail() {     return email;   }    public void setEmail(String email) {     this.email = email;   }    public String getFirstName() {     return firstName;   }    public void setFirstName(String firstName) {     this.firstName = firstName;   }    public String getLastName() {     return lastName;   }    public void setLastName(String lastName) {     this.lastName = lastName;   } }`\n```", "```java ``The `@Named` class annotation designates this bean as a CDI named bean. This annotation has an optional `value` attribute that we can use to give our bean a logical name to use in our JSF pages. However, by convention, the value of this attribute is the same as the class name (`Customer`, in our case) with its first character switched to lowercase. In our example, we retain this default behavior; therefore, we access our bean's properties via the `customer` logical name. Notice the `value` attribute of any of the input fields in our example page to see this logical name in action.`` ```", "```java ``Notice that other than the `@Named` and `@RequestScoped` annotations, there is nothing special about this bean. It is a standard JavaBean with private properties and corresponding getter and setter methods. The `@RequestScoped` annotation specifies that the bean should live through a single request.`` ```", "```java ``As can be seen on our input page, when we click on the **Save** button in the `customer_data_entry.xhtml` page, our application will navigate to a page called `confirmation.xhtml`. This happens because we are taking advantage of the JSF's convention over configuration feature, in which if the value of the `action` attribute of a command button or link matches the base name of another page, then the navigation takes us to this page.`` ```", "```java ``When JSF does not recognize the value of the `action` attribute of a command button or command link, it will, by default, navigate to the same page that was displayed in the browser when the user clicked on a button or link that was meant to navigate to another page.`` ```", "```java ``If navigation does not seem to be working properly, chances are there is a typo in the value of this attribute. Remember that by convention, JSF will look for a page whose base name matches the value of the `action` attribute of a command button or link.`` ```", "```java ``The source for `confirmation.xhtml` looks as follows:`` ```", "```java\n`<?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html        >   <h:head>     <title>Customer Data Entered</title>   </h:head>   <h:body>     <h:panelGrid columns=\"2\" columnClasses=\"rightAlign,leftAlign\">       <h:outputText value=\"First Name:\"></h:outputText>       <h:outputText value=\"#{customer.firstName}\"></h:outputText>       <h:outputText value=\"Last Name:\"></h:outputText>       <h:outputText value=\"#{customer.lastName}\"></h:outputText>       <h:outputText value=\"Email:\"></h:outputText>       <h:outputText value=\"#{customer.email}\"></h:outputText>     </h:panelGrid>   </h:body> </html>`\n```", "```java ``The `<h:outputText>` tag is the only tag on this page that we haven't covered before. This tag simply displays the value of its `value` attribute to the rendered page; its `value` attribute can be a simple string or a value binding expression. Since the value binding expressions in our `<h:outputText>` tags are the same expressions that were used in the previous page for the `<h:inputText>` tags, their values will correspond to the data that the user entered.`` ```", "```java ``In traditional (that is, non-JSF) Java web applications, we defined URL patterns to be processed by specific servlets. Specifically for JSF, the suffixes `.jsf` or `.faces` were commonly used; another commonly used URL mapping for JSF was the `/faces` prefix. By default, GlassFish automatically adds the `/faces` prefix to the faces servlet; therefore, we don't have to specify any URL mappings at all. If, for any reason, we need to specify a different mapping, then we need to add a `web.xml` configuration file to our application. However, the default will suffice in most cases.`` ```", "```java ``The URL we used for the pages in our application was the name of our Facelets page, prefixed by `/faces`. This takes advantage of the default URL mapping.`` ```", "```java`` ```", "```java package net.ensode.glassfishbook.jsfcustomval;  import javax.faces.application.FacesMessage; import javax.faces.component.UIComponent; import javax.faces.component.html.HtmlInputText; import javax.faces.context.FacesContext; import javax.faces.validator.FacesValidator; import javax.faces.validator.Validator; import javax.faces.validator.ValidatorException; import org.apache.commons.lang.StringUtils;  @FacesValidator(value = \"emailValidator\") public class EmailValidator implements Validator {    @Override  public void validate(FacesContext facesContext,  UIComponent uiComponent,  Object value) throws ValidatorException {     org.apache.commons.validator.EmailValidator emailValidator =         org.apache.commons.validator.EmailValidator.getInstance();     HtmlInputText htmlInputText = (HtmlInputText) uiComponent;      String email = (String) value;      if (!StringUtils.isEmpty(email)) {       if (!emailValidator.isValid(email)) {         FacesMessage facesMessage = new              FacesMessage(htmlInputText.             getLabel()             + \": email format is not valid\");         throw new ValidatorException(facesMessage);       }     }   } } ```", "```java <?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html               >   <h:head>     <title>Enter Customer Data</title>   </h:head>   <h:body>     <h:outputStylesheet library=\"css\" name=\"styles.css\"/>     <h:form>       <h:messages></h:messages>       <h:panelGrid columns=\"2\"                    columnClasses=\"rightAlign,leftAlign\">         <h:outputText value=\"First Name:\">         </h:outputText>         <h:inputText label=\"First Name\"                      value=\"#{customer.firstName}\"                      required=\"true\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>         </h:inputText>         <h:outputText value=\"Last Name:\"></h:outputText>         <h:inputText label=\"Last Name\"                      value=\"#{customer.lastName}\"                      required=\"true\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>         </h:inputText>         <h:outputText value=\"Email:\">         </h:outputText>  <h:inputText label=\"Email\" value=\"#{customer.email}\">   <f:validator validatorId=\"emailValidator\" />  </h:inputText>         <h:panelGroup></h:panelGroup>         <h:commandButton action=\"confirmation\" value=\"Save\">         </h:commandButton>       </h:panelGrid>     </h:form>   </h:body> </html> ```", "```java package net.ensode.glassfishbook.jsfcustomval;  import javax.enterprise.context.RequestScoped; import javax.faces.application.FacesMessage; import javax.faces.component.UIComponent; import javax.faces.component.html.HtmlInputText; import javax.faces.context.FacesContext; import javax.faces.validator.ValidatorException; import javax.inject.Named;  import org.apache.commons.lang.StringUtils;  @Named @RequestScoped public class AlphaValidator {   public void validateAlpha(FacesContext facesContext,  UIComponent uiComponent,  Object value) throws ValidatorException {     if (!StringUtils.isAlphaSpace((String) value)) {       HtmlInputText htmlInputText = (HtmlInputText) uiComponent;       FacesMessage facesMessage = new FacesMessage(htmlInputText.           getLabel()           + \": only alphabetic characters are allowed.\");       throw new ValidatorException(facesMessage);     }   } } ```", "```java <?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html               >   <h:head>     <title>Enter Customer Data</title>   </h:head>   <h:body>     <h:outputStylesheet library=\"css\" name=\"styles.css\"/>     <h:form>       <h:messages></h:messages>       <h:panelGrid columns=\"2\"                    columnClasses=\"rightAlign,leftAlign\">         <h:outputText value=\"First Name:\">         </h:outputText>  <h:inputText label=\"First Name\"  value=\"#{customer.firstName}\"  required=\"true\"  validator=\"#{alphaValidator.validateAlpha}\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>  </h:inputText>         <h:outputText value=\"Last Name:\"></h:outputText>  <h:inputText label=\"Last Name\"  value=\"#{customer.lastName}\"  required=\"true\"  validator=\"#{alphaValidator.validateAlpha}\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>  </h:inputText>         <h:outputText value=\"Email:\">         </h:outputText>         <h:inputText label=\"Email\" value=\"#{customer.email}\">           <f:validateLength minimum=\"3\" maximum=\"30\">           </f:validateLength>           <f:validator validatorId=\"emailValidator\" />         </h:inputText>         <h:panelGroup></h:panelGroup>         <h:commandButton action=\"confirmation\" value=\"Save\">         </h:commandButton>       </h:panelGrid>     </h:form>   </h:body> </html> ```", "```java <?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html               >   <h:head>     <title>Enter Customer Data</title>   </h:head>   <h:body>     <h:outputStylesheet library=\"css\" name=\"styles.css\" />     <h:form>  <h:messages styleClass=\"errorMsg\"></h:messages>       <h:panelGrid columns=\"2\"                    columnClasses=\"rightAlign,leftAlign\">         <h:outputText value=\"First Name:\">         </h:outputText>         <h:inputText label=\"First Name\"                      value=\"#{customer.firstName}\"                      required=\"true\"                       validator=\"#{alphaValidator.validateAlpha}\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>         </h:inputText>         <h:outputText value=\"Last Name:\"></h:outputText>         <h:inputText label=\"Last Name\"                      value=\"#{customer.lastName}\"                      required=\"true\"                      validator=\"#{alphaValidator.validateAlpha}\">           <f:validateLength minimum=\"2\" maximum=\"30\">           </f:validateLength>         </h:inputText>         <h:outputText value=\"Email:\">         </h:outputText>         <h:inputText label=\"Email\" value=\"#{customer.email}\">           <f:validator validatorId=\"emailValidator\" />         </h:inputText>         <h:panelGroup></h:panelGroup>         <h:commandButton action=\"confirmation\" value=\"Save\">         </h:commandButton>       </h:panelGrid>     </h:form>   </h:body> </html> ```", "```java .errorMsg {   color: red; } ```", "```java javax.faces.validator.DoubleRangeValidator.MAXIMUM={1}: Validation      Error: Value is greater than allowable maximum of \"{0}\" javax.faces.validator.DoubleRangeValidator.MINIMUM={1}: Validation      Error: Value is less than allowable minimum of ''{0}'' javax.faces.validator.DoubleRangeValidator.NOT_IN_RANGE={2}:      Validation Error: Specified attribute is not between the      expected values of {0} and {1}. javax.faces.validator.DoubleRangeValidator.TYPE={0}: Validation      Error: Value is not of the correct type javax.faces.validator.LengthValidator.MAXIMUM={1}: Validation      Error: Value is greater than allowable maximum of ''{0}'' javax.faces.validator.LengthValidator.MINIMUM={1}: Validation      Error: Value is less than allowable minimum of ''{0}'' javax.faces.validator.LongRangeValidator.MAXIMUM={1}: Validation      Error: Value is greater than allowable maximum of ''{0}'' javax.faces.validator.LongRangeValidator.MINIMUM={1}: Validation      Error: Value is less than allowable minimum of ''{0}'' javax.faces.validator.LongRangeValidator.NOT_IN_RANGE={2}:      Validation Error: Specified attribute is not between the      expected values of {0} and {1}. javax.faces.validator.LongRangeValidator.TYPE={0}: Validation      Error: Value is not of the correct type. javax.faces.validator.NOT_IN_RANGE=Validation Error: Specified      attribute is not between the expected values of {0} and {1}. javax.faces.validator.RegexValidator.PATTERN_NOT_SET=Regex pattern      must be set. javax.faces.validator.RegexValidator.PATTERN_NOT_SET_detail=Regex      pattern must be set to non-empty value. javax.faces.validator.RegexValidator.NOT_MATCHED=Regex Pattern not      matched javax.faces.validator.RegexValidator.NOT_MATCHED_detail=Regex      pattern of ''{0}'' not matched javax.faces.validator.RegexValidator.MATCH_EXCEPTION=Error in      regular expression. javax.faces.validator.RegexValidator.MATCH_EXCEPTION_detail=Error      in regular expression, ''{0}'' javax.faces.validator.BeanValidator.MESSAGE={0} ```", "```java javax.faces.validator.LengthValidator.MINIMUM={1}: minimum allowed      length is ''{0}'' ```", "```java <?xml version='1.0' encoding='UTF-8'?> <faces-config version=\"2.0\"                     xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee       http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd\">  <application>  <message-bundle>net.ensode.Messages</message-bundle>  </application> </faces-config> ```", "```java <?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html               >   <h:head>     <title>JSF Ajax Demo</title>   </h:head>   <h:body>     <h2>JSF Ajax Demo</h2>     <h:form>       <h:messages/>       <h:panelGrid columns=\"2\">          <h:outputText value=\"Echo input:\"/>  <h:inputText id=\"textInput\" value=\"#{controller.text}\">  <f:ajax render=\"textVal\" event=\"keyup\"/>  </h:inputText>          <h:outputText value=\"Echo output:\"/>         <h:outputText id=\"textVal\" value=\"#{controller.text}\"/>       </h:panelGrid>       <hr/>       <h:panelGrid columns=\"2\">         <h:panelGroup/>         <h:panelGroup/>         <h:outputText value=\"First Operand:\"/>         <h:inputText id=\"first\" value=\"#{controller.firstOperand}\"                           size=\"3\"/>         <h:outputText value=\"Second Operand:\"/>         <h:inputText id=\"second\"                           value=\"#{controller.secondOperand}\"                           size=\"3\"/>         <h:outputText value=\"Total:\"/>         <h:outputText id=\"sum\" value=\"#{controller.total}\"/>  <h:commandButton   actionListener=\"#{controller.calculateTotal}\"  value=\"Calculate Sum\">  <f:ajax execute=\"first second\" render=\"sum\"/>  </h:commandButton>       </h:panelGrid>     </h:form>   </h:body> </html> ```", "```java package net.ensode.glassfishbook.jsfajax;  import javax.faces.event.ActionEvent; import javax.faces.view.ViewScoped; import javax.inject.Named;  @Named @ViewScoped public class Controller {    private String text;   private int firstOperand;   private int secondOperand;   private int total;      public Controller() {   }   public void calculateTotal(ActionEvent actionEvent) {  total = firstOperand + secondOperand;  }    public String getText() {     return text;   }    public void setText(String text) {     this.text = text;   }    public int getFirstOperand() {     return firstOperand;   }    public void setFirstOperand(int firstOperand) {     this.firstOperand = firstOperand;   }    public int getSecondOperand() {     return secondOperand;   }    public void setSecondOperand(int secondOperand) {     this.secondOperand = secondOperand;   }    public int getTotal() {     return total;   }    public void setTotal(int total) {     this.total = total;   } } ```", "```java <!DOCTYPE html> <html   >   <head jsf:id=\"head\">         <title>JSF Page with HTML5 Markup</title>  <link jsf:library=\"css\" jsf:name=\"styles.css\"   rel=\"stylesheet\"   type=\"text/css\"   href=\"resources/css/styles.css\"/>     </head>  <body jsf:id=\"body\">  <form jsf:prependId=\"false\">             <table style=\"border-spacing: 0; border-collapse:                  collapse\">                 <tr>                     <td class=\"rightAlign\">  <label jsf:for=\"firstName\">First   Name</label>                     </td>                     <td class=\"leftAlign\">  <input type=\"text\" jsf:id=\"firstName\"  jsf:value=\"#{customer.firstName}\"/>                        </td>                 </tr>                  <tr>                     <td class=\"rightAlign\">  <label jsf:for=\"lastName\">Last Name</label>                     </td>                     <td class=\"leftAlign\">  <input type=\"text\" jsf:id=\"lastName\"  jsf:value=\"#{customer.lastName}\"/>                     </td>                 </tr>                 <tr>                     <td class=\"rightAlign\">  <label jsf:for=\"email\">Email   Address</label>                     </td>                     <td class=\"leftAlign\">  <input type=\"email\" jsf:id=\"email\"  jsf:value=\"#{customer.email}\"/></td>                 </tr>                 <tr>                     <td></td>                   <td>  <input type=\"submit\"   jsf:action=\"confirmation\"  value=\"Submit\"/>                   </td>                 </tr>             </table>         </form>     </body> </html> ```", "```java <?xml version='1.0' encoding='UTF-8' ?> <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"> <html                 >     <h:head>         <title>Enter Customer Data</title>     </h:head>     <h:body>         <h:outputStylesheet library=\"css\" name=\"styles.css\"/>         <h:form id=\"customerForm\">             <h:messages/>             <h:panelGrid columns=\"2\"                          columnClasses=\"rightAlign,leftAlign\">                 <h:outputLabel for=\"firstName\" value=\"First Name:\">                 </h:outputLabel>                 <h:inputText id=\"firstName\"                              label=\"First Name\"                              value=\"#{customer.firstName}\"                              required=\"true\"  p:placeholder=\"First Name\">                     <f:validateLength minimum=\"2\" maximum=\"30\">                     </f:validateLength>                 </h:inputText>                 <h:outputLabel for=\"lastName\" value=\"Last Name:\">                 </h:outputLabel>                 <h:inputText id=\"lastName\"                              label=\"Last Name\"                              value=\"#{customer.lastName}\"                              required=\"true\"  p:placeholder=\"Last Name\">                     <f:validateLength minimum=\"2\" maximum=\"30\">                     </f:validateLength>                 </h:inputText>                 <h:outputLabel for=\"email\" value=\"Email:\">                 </h:outputLabel>                 <h:inputText id=\"email\"                               label=\"Email\"                               value=\"#{customer.email}\"  p:placeholder=\"Email Address\">                     <f:validateLength minimum=\"3\" maximum=\"30\">                     </f:validateLength>                 </h:inputText>                 <h:panelGroup></h:panelGroup>                 <h:commandButton action=\"confirmation\" value=\"Save\">                 </h:commandButton>             </h:panelGrid>         </h:form>     </h:body> </html> ```", "```java @Named @FlowScoped(\"customerinfo\") public class Customer implements Serializable {    //class body omitted } ```", "```java` ```"]