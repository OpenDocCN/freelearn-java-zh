["```java\n mvn clean package liberty:run\n```", "```java\n@GraphQLApi\npublic class SimpleApi {\n    @Query\n    public String hello() {\n        return \"Hello World\";\n    }\n}\n```", "```java\n\"Query root\"\ntype Query {\n  hello: String\n}\n```", "```java\nquery hello {\n  hello\n}\n```", "```java\n@GraphQLApi\npublic class PortfolioGraphQLApi {\n    @Inject\n    private PortfolioDatabase portfolioDB;\n    @Query\n    @Description(\"Returns the portfolio of the given       owner.\")\n    public Portfolio portfolio(@Name(\"owner\") String owner)\n        throws UnknownPortfolioException {\n        return Optional.ofNullable(portfolioDB.getPortfolio           (owner)).orElseThrow(() -> new                UnknownPortfolioException(owner));\n    }\n    //...\n}\n```", "```java\ntype Portfolio {\n  accountID: ID\n  loyalty: Loyalty\n  owner: String\n  stocks: [Stock]\n  total: Float!\n}\n\"Query root\"\ntype Query {\n  \"Returns the portfolio of the given owner.\"\n  portfolio(owner: String): Portfolio\n}\ntype Stock {\ntype Stock {\n  commission: Float!\n  dateOfLastUpdate: String\n  pricePerShare: Float!\n  shares: Int!\n  symbol: String!\n  total: Float!\n}\n}\nenum Loyalty {\n  BRONZE\n  GOLD\n  SILVER\n}\n```", "```java\n@GraphQLApi\npublic class PortfolioGraphQLApi {\n    //...\n    @Mutation\n    public Portfolio createNewPortfolio(@Name(\"portfolio\") \n      Portfolio portfolio)\n        throws DuplicatePortfolioOwnerException,             UnknownPortfolioException {\n        portfolioDB.addPortfolio(portfolio);\n        return portfolio(portfolio.getOwner());\n    }\n```", "```java\ninput PortfolioInput {\n  accountID: ID\n  loyalty: Loyalty\n  owner: String\n  stocks: [StockInput]\n  total: Float!\n}\ninput StockInput {\n  commission: Float!\n  shares: Int!\n  symbol: String\n}\n```", "```java\n@Interface\npublic interface OwnerProfile {\n    String getOwnerId();\n    String getEmailAddress();\n    void setEmailAddress(String emailAddress);\n}\npublic class OwnerProfileImpl implements OwnerProfile {\n    private String ownerId;\n    private String emailAddress;\n    // ... public getters / setters\n}\npublic class ManagedOwnerProfileImpl extends \n  OwnerProfileImpl implements OwnerProfile {\n    private String managerName;\n    private String managerEmailAddress;\n    // ... public getters / setters\n}\n```", "```java\n@GraphQLApi\npublic class ProfileGraphQLApi {\n    @Inject\n    OwnerProfileDatabase db;\n    @Query\n    public OwnerProfile profile(String ownerId) {\n        return db.getProfile(ownerId);\n    }\n    @Mutation\n    public boolean addProfile(OwnerProfileImpl profile)           throws DuplicatePortfolioOwnerException {\n        db.addProfile(profile);\n        return true;\n    }\n    @Mutation\n    public boolean addManagedProfile\n      (ManagedOwnerProfileImpl profile)           throws DuplicatePortfolioOwnerException {\n        db.addProfile(profile);\n        return true;\n    }\n}\n```", "```java\ninterface OwnerProfile {\n  emailAddress: String\n  ownerId: String\n}\ntype ManagedOwnerProfileImpl implements OwnerProfile {\n  emailAddress: String\n  managerEmailAddress: String\n  managerName: String\n  ownerId: String\n}\ntype OwnerProfileImpl implements OwnerProfile {\n  emailAddress: String\n  ownerId: String\n}\ninput ManagedOwnerProfileImplInput {\n  emailAddress: String\n  managerEmailAddress: String\n  managerName: String\n  ownerId: String\n}\ninput OwnerProfileImplInput {\n  emailAddress: String\n  ownerId: String\n}\n```", "```java\n@GraphQLApi\npublic class ProfileGraphQLApi {\n    @Inject\n    PortfolioDatabase portfolioDB;\n    public Loyalty getLoyalty(@Source OwnerProfileImpl       profile) throws UnknownPortfolioException {\n        String ownerId = profile.getOwnerId();\n        Portfolio p = portfolioDB.getPortfolio(ownerId);\n        return p.getLoyalty();\n    }\n    // ... \n}\n```", "```java\n@Mutation\npublic Collection<Portfolio> createNewPortfolios(\n        @Name(\"portfolios\") List<Portfolio> newPortfolios)\n        throws GraphQLException, UnknownPortfolioException {\n    Tuple<Collection<Portfolio>, Collection<String>>      tuple = portfolioDB.addPortfolios(newPortfolios);\n    if (!tuple.second.isEmpty()) {\n       // some of the portfolios to be added already exist;\n        // throw an exception with partial results\n        throw new GraphQLException(\n            \"The following portfolios already exist and \"             + \"cannot be re-added: \" + tuple.second,              tuple.first); // here are the partial results\n    }\n    return tuple.first;\n}\n```", "```java\n@Test\npublic void testAllProfilesWithStringDocument()\n  throws Exception {\n    verify(() -> executeSync(\n        new RequestImpl(\"query allProfiles {\"\n                       +\"  allProfiles {\"\n                       +\"     ownerId, emailAddress\"\n                       +\"  }\"\n                       +\"}\")));\n}\nprivate Response executeSync(Request req) {\n    try (DynamicGraphQLClient client = newClient()) {\n        return client.executeSync(req);\n    } catch (Exception ex) {\n        throw new IllegalStateException(ex);\n    }\n}\nprivate DynamicGraphQLClient newClient() {\n    return DynamicGraphQLClientBuilder.newBuilder()\n        .url(URL)\n        .build();\n}\nprivate void verify(Supplier<Response> responseSupplier)        throws Exception {\n    Response resp = responseSupplier.get();\n    JsonObject data = resp.getData();\n    assertNotNull(data);\n    JsonArray allProfiles =         data.getJsonArray(\"allProfiles\");\n    assertNotNull(allProfiles);\n    JsonObject emily = allProfiles.getJsonObject(0);\n    assertNotNull(emily);\n    assertEquals(\"Emily J\", emily.getString(\"ownerId\"));\n    assertEquals(\"emilyj@notmyrealaddress.com\",        emily.getString(\"emailAddress\"));\n    JsonObject andy = allProfiles.getJsonObject(1);\n    assertNotNull(andy);\n    assertEquals(\"Andy M\", andy.getString(\"ownerId\"));\n    assertEquals(\"andym@notmyrealaddress.com\",        andy.getString(\"emailAddress\"));\n}\n```", "```java\n@Test\npublic void testAllProfilesWithConstructedDocument() throws   Exception {\n    Field query = field(\"allProfiles\");\n    query.setFields(Arrays.asList(field(\"ownerId\"),         field(\"emailAddress\")));\n    verify(() -> executeSync(document(operation\n        (OperationType.QUERY, \"allProfiles\",query))));\n}\n```", "```java\nclass OwnerProfile {\n    String ownerId;\n    String emailAddress;\n    // public getters/setters\n}\n```", "```java\n@GraphQLClientApi\ninterface ProfileApi {\n    List<OwnerProfile> allProfiles();\n}\n```", "```java\n@Test\npublic void testAllProfiles() throws Exception {\n    ProfileApi api = TypesafeGraphQLClientBuilder         .newBuilder()\n        .endpoint(URL)\n        .build(ProfileApi.class);\n    List<OwnerProfile> allProfiles = api.allProfiles();\n    assertNotNull(allProfiles);\n    assertEquals(2, allProfiles.size());\n    assertEquals(\"Emily J\",         allProfiles.get(0).getOwnerId());\n    assertEquals(\"emilyj@notmyrealaddress.com\",        allProfiles.get(0).getEmailAddress());\n    assertEquals(\"Andy M\",allProfiles.get(1).getOwnerId());\n    assertEquals(\"andym@notmyrealaddress.com\",        allProfiles.get(1).getEmailAddress());\n}\n```"]