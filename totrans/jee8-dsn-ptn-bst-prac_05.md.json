["```java\n@Stateless\n@LocalBean \npublic class AcademicFacadeImpl {\n    ...\n    ...\n    // this method will be intercepted for some statistical \n    // interceptor:\n    public void requestTestReview (@Observes TestRevisionTO \n    testRevisionTO) {\n        System.out.println(\"enrollment : \" + \n        testRevisionTO.getEnrollment());\n        LocalDateTime dateTime = scheduleTestReview (testRevisionTO);\n        // send an email with the schedule date for review:\n        sendEmail (testRevisionTO, dateTime); \n    }\n}\n```", "```java\n@Stateless\npublic class AcademicFacadeImpl {\n   ...\n   ...\n   @AroundInvoke\n  public Object statisticMethod (InvocationContext invocationContext)  throws Exception{\n   ...\n}\n\n}\n```", "```java\n@Interceptor\npublic class StatisticInterceptor implements Serializable {\n\n  @Inject \n  private Event<String> event; \n\n  @AroundInvoke\n  public Object statisticMethod (InvocationContext invocationContext) throws Exception{\n    System.out.println(\"Statistical method : \"\n        + invocationContext.getMethod().getName() + \" \" \n        + invocationContext.getMethod().getDeclaringClass()\n        );\n\n    // get the enrollment:\n    TestRevisionTO testRevisionTO = \n    (TestRevisionTO)invocationContext.getParameters()[0];\n\n    System.out.println(\"Enrolment : \" + \n    testRevisionTO.getEnrollment());\n\n    // fire an asynchronous statistical event:\n    event.fire (testRevisionTO.getEnrollment());\n\n    return invocationContext.proceed();\n\n  }\n\n}\n```", "```java\n@Stateless\n@Interceptors({StatisticInterceptor.class})\npublic class AcademicFacadeImpl\n```", "```java\n@Stateless\npublic class AcademicFacadeImpl{\n   ...\n   @Interceptors({StatisticInterceptor.class})\n   public void requestTestReview (@Observes TestRevisionTO \n   testRevisionTO) {\n      ...\n   }\n}\n```", "```java\npublic class StatisticalFacadeImpl {\n\n    public void control (@Observes String enrolment ) {\n        System.out.println(\"This enrolment is asking for a test \n        revision : \" +  enrolment);\n        // Here we can persist this information, for example. \n    }\n}\n```", "```java\n@Stateless\n@LocalBean\npublic class StatisticalFacadeImpl {\n    @Asynchronous\n    public void control (String enrolment ) {\n        System.out.println(\"This enrolment is asking for a test \n        revision : \" +  enrolment);\n    }\n}\n```", "```java\n@Interceptors({PrimaryInterceptor.class, SecondaryInterceptor.class,\n        LastInterceptor.class})\npublic void method(String prm) { ... }\n```", "```java\nvoid someMethod() { ... }\n```", "```java\n@PostConstruct\nvoid initialize() { ... }\n\n@PreDestroy\nvoid finalize () { ...}\n```", "```java\nvoid someOtherMethod(InvocationContext ctx) { ... }\n```", "```java\n@PostConstruct\nvoid initialize (InvocationContext ctx){...}\n@PreDestroy\nvoid cleanup(InvocationContext ctx) { ... }\n```", "```java\npublic AcademicFacadelImpl  () {\n    System.out.println (\"creating  bean.\");\n}\n\n@PostConstruct\npublic void initialize () {\n    System.out.println (\"post construct of bean.\");\n}\n```", "```java\n@PostConstruct\n public void initialize (InvocationContext ctx) {\n    System.out.println (\"intercepting post construct of bean.\");\n }\n```", "```java\ncreating  bean.\nintercepting post construct of bean.\n```", "```java\n@PostConstruct\n public void initialize (InvocationContext ctx) {\n    System.out.println (\"intercepting post construct of bean.\");\n    ctx.proceed();\n }\n```", "```java\ncreating bean.\nintercepting post construct of bean.\npost construct of bean\n```", "```java\n@Inherited\n@InterceptorBinding\n@Retention(RUNTIME)\n@Target({METHOD, TYPE})\npublic @interface Loggable {\n}\n```", "```java\n@Loggable\n@Interceptor\npublic class LoggedInterceptor implements Serializable {\n\n @AroundInvoke\n public Object logMethod (InvocationContext invocationContext) throws \n Exception{\n System.out.println(\"Entering method : \"\n + invocationContext.getMethod().getName() + \" \" \n + invocationContext.getMethod().getDeclaringClass()\n );\n return invocationContext.proceed();\n }\n}\n```", "```java\n@Loggable\npublic class ProfessorDAO implements Serializable {\n ...\n}\n```", "```java\npublic class ProfessorDAO implements Serializable {\n   ...\n    @Loggable\n    public Professor findByName (String name) {\n        ... \n    }\n}\n```", "```java\n<interceptors>\n <class>academic.interceptors.LoggedInterceptor</class>\n </interceptors>\n```", "```java\n@Inherited\n@InterceptorBinding\n@Retention (RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD, ElementType.TYPE})\npublic @interface Statistic {\n}\n@Statistical\n@Interceptor\npublic class StatisticInterceptor implements Serializable {\n\n  @Inject \n  Event<String> event; \n\n  @AroundInvoke\n  public Object statisticMethod (InvocationContext invocationContext) \n  throws Exception{\n    System.out.println(\"Statistical method : \"\n        + invocationContext.getMethod().getName() + \" \" \n        + invocationContext.getMethod().getDeclaringClass()\n        );\n\n    // get the enrolment:\n    TestRevisionTO testRevisionTO = (TestRevisionTO)invocationContext.getParameters()[0];\n\n    System.out.println(\"Enrollment : \" + testRevisionTO.getEnrollment());\n\n    // fire an asynchronous statistical event:\n    event.fire (testRevisionTO.getEnrollment());\n    return invocationContext.proceed();\n  }\n\n}\n```", "```java\n/**\n * Session Bean implementation class StatisticalFacadeImpl\n */\n@Stateless\npublic class StatisticalFacadeImpl {\n\n    /**\n     * Default constructor. \n     */\n    public StatisticalFacadeImpl() {\n        // TODO Auto-generated constructor stub\n    }\n\n    public void control (@Observes String enrolment ) {\n      System.out.println(\"This enrolment is asking for a test revision : \" + enrolment);\n    }\n\n}\n```", "```java\n**\n * Session Bean implementation class AcademicFacadeImpl\n */\n@Stateless\npublic class AcademicFacadeImpl  {\n   ...\n   ...\n@Statistic\npublic void requestTestReview (@Observes TestRevisionTO testRevisionTO) {\n    System.out.println(\"Enrollment : \" + testRevisionTO.getEnrollment());\n    LocalDateTime dateTime = scheduleTestReview (testRevisionTO);\n    sendEmail (testRevisionTO, dateTime); // send an email with the schedule date for the test review:\n  }   \n    ...\n    ...\n}\n```", "```java\npublic interface Engineering {\n List<String> getDisciplines ();\n}\npublic class BasicEngineering implements Engineering {\n\n @Override\n public List<String> getDisciplines() {\n return Arrays.asList(\"d7\", \"d3\");\n }\n}\n@Electronic\npublic class ElectronicEngineering extends BasicEngineering {\n ... \n}\n@Mechanical\npublic class MechanicalEngineering extends BasicEngineering {\n ...\n}\n```", "```java\n@Decorator\npublic abstract class MechanicalDecorator implements Engineering {\n   @Mechanical\n   @Any\n   @Inject\n   @Delegate\n   Engineering engineering;\n\n   @Override\n   public List<String> getDisciplines() {\n      System.out.println(\"Decorating Mechanical Engineering\");\n      List<String> disciplines = new ArrayList<>\n      (engineering.getDisciplines());\n      disciplines.addAll (Arrays.asList(\"d31\", \"d37\", \"d33\", \"d34\", \n      \"d32\"));\n      return disciplines;\n    }\n}\n@Decorator\npublic abstract class EngineeringDecorator implements Engineering {\n   @Electronic\n   @Any\n   @Inject\n   @Delegate\n   Engineering engineering;\n\n   @Override\n   public List<String> getDisciplines() {\n      System.out.println(\"Decorating Electronic\");\n      List<String> disciplines = new ArrayList<>\n      (engineering.getDisciplines());\n      disciplines.addAll (Arrays.asList(\"d21\", \"d27\", \"d23\", \"d24\", \n      \"d22\"));\n      return disciplines;\n    }\n}\n```", "```java\n<decorators>\n     <class>book.chapter3.decorator.ElectronicDecorator</class>\n     <class>book.chapter3.decorator.MechanicalDecorator</class>\n </decorators>\n```", "```java\n<decorators>\n     <class>book.chapter3.decorator.BasicEngineeringDecorator</class>\n         <class>book.chapter3.decorator.ElectronicEngineeringDecorator</class>\n     <class>book.chapter3.decorator.MechanicalEngineeringDecorator</class>\n </decorators>\n```"]