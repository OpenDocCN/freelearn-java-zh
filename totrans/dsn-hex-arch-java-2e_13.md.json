["```java\n<persistence-unit name=\"mysql\">\n    <provider>\n       org.hibernate.reactive.provider\n       .ReactivePersistenceProvider\n    </provider>\n    <class>dev.davivieria.SomeObject</class>\n    <properties>\n    <property name=»javax.persistence.jdbc.url»\n       value=»jdbc:mysql://localhost/hreact\"/>\n    </properties>\n</persistence-unit>\n```", "```java\nimport static javax.persistence.Persistence.createEnti\n  tyManagerFactory;\nSessionFactory factory = createEntityManagerFactory (\npersistenceUnitName ( args ) ).unwrap(SessionFac\n  tory.class);\n/** Code omitted **/\npublic static String persistenceUnitName(String[] args) {\n    return args.length > 0 ?\n    args[0] : \"postgresql-example\";\n}\n```", "```java\nSomeObject someObject = new SomeObject();\nfactory.withTransaction(\n     (\norg.hibernate.reactive.mutiny.Mutiny.\n  Transaction session,\norg.hibernate.reactive.mutiny.Mutiny.Transaction tx) ->\nsession.persistAll(someObject)).subscribe();\n```", "```java\n@Entity\n@Table(name=\"locations\")\npublic class Location extends PanacheEntity {\n    @Id @GeneratedValue\n    private Integer id;\n    @NotNull @Size(max=100)\n    public String country;\n    @NotNull @Size(max=100)\n    public String state;\n    @NotNull @Size(max=100)\n    public String city;\n}\n```", "```java\n    List<Location> locations = Location.listAll();\n    ```", "```java\n    Location.deleteAll();\n    ```", "```java\n    Optional<Location> optional = Location.findByIdOp\n      tional(locationId);\n    ```", "```java\n    Location location = new Location();\n    location.country = \"Brazil\";\n    location.state = \"Sao Paulo\";\n    location.city = \"Santo Andre\";\n    location.persist();\n    ```", "```java\n@Entity\n@Table(name=\"locations\")\npublic class Location {\n/** Code omitted **/\n}\n```", "```java\n@ApplicationScoped\npublic class LocationRepository implements PanacheReposi\n  tory<Location> {\n   public Location findByCity(String city){\n       return find (\"city\", city).firstResult();\n   }\n   public Location findByState(String state){\n       return find(\"state\", state).firstResult();\n   }\n   public void deleteSomeCountry(){\n       delete (\"country\", \"SomeCountry\");\n  }\n}\n```", "```java\n@Inject\nLocationRepository locationRepository;\npublic Location findLocationByCity(City city){\n    return locationRepository.findByCity(city);\n}\n```", "```java\n    List<Location> locations = locationReposi\n      tory.listAll();\n    ```", "```java\n    locationRepository.deleteAll();\n    ```", "```java\n    Optional<Location> optional = locationReposi\n      tory.findByIdOptional(locationId);\n    ```", "```java\n    Location location = new Location();\n    location.country = \"Brazil\";\n    location.state = \"Sao Paulo\";\n    location.city = \"Santo Andre\";\n    locationRepository.persist(location);\n    ```", "```java\n    <dependencies>\n      <dependency>\n        <groupId>io.quarkus</groupId>\n        artifactId>quarkus-reactive-mysql-client\n          </artifactId>\n      </dependency>\n      <dependency>\n        <groupId>io.quarkus</groupId>\n       <artifactId>quarkus-hibernate-reactive-panache</ar\n          tifactId>\n      </dependency>\n    </dependencies>\n    ```", "```java\n    quarkus.datasource.db-kind = mysql\n    quarkus.datasource.reactive = true\n    quarkus.datasource.reactive.url = mysql://lo\n      calhost:3306/inventory\n    quarkus.datasource.username = root\n    quarkus.datasource.password = password\n    ```", "```java\n    quarkus.hibernate-orm.sql-load-script=inventory.sql\n    quarkus.hibernate-orm.database.generation = drop-and-\n      create\n    quarkus.hibernate-orm.log.sql = true\n    ```", "```java\n@Entity(name = \"RouterData\")\n@Table(name = \"routers\")\n@EqualsAndHashCode(exclude = \"routers\")\npublic class RouterData implements Serializable {\n    @Id\n    @Column(name=\"router_id\", columnDefinition =\n      «BINARY(16)\")\n    private UUID routerId;\n    @Column(name=\"router_parent_core_id\",\n    columnDefinition = \"BINARY(16)\")\n    private UUID routerParentCoreId;\n   /** Code omitted **/\n}\n```", "```java\n{\n    /**Code omitted**/\n   @ManyToOne(cascade = CascadeType.ALL)\n   @JoinColumn(name=\"location_id\")\n   private LocationData routerLocation;\n   @OneToMany(cascade = {CascadeType.MERGE},\n   fetch = FetchType.EAGER)\n   @JoinColumn(name=\"router_id\")\n   private List<SwitchData> switches;\n   @OneToMany(cascade = CascadeType.ALL, fetch =\n     FetchType.EAGER)\n   @JoinColumn(name=\"router_parent_core_id\")\n   private Set<RouterData> routers;\n   /**Code omitted**/\n}\n```", "```java\n@Entity\n@Table(name = \"switches\")\npublic class SwitchData {\n    @ManyToOne\n    private RouterData router;\n    @Id\n    @Column(name=\"switch_id\", columnDefinition =\n      «BINARY(16)\")\n    private UUID switchId;\n    @Column(name=\"router_id\", columnDefinition =\n      «BINARY(16)\")\n    private UUID routerId;\n    @OneToMany(cascade = CascadeType.ALL, fetch =\n      FetchType.EAGER)\n    @JoinColumn(name=\"switch_id\")\n    private Set<NetworkData> networks;\n    @ManyToOne\n    @JoinColumn(name=\"location_id\")\n    private LocationData switchLocation;\n    /**Code omitted**/\n}\n```", "```java\n@Entity\n@Table(name = \"networks\")\npublic class NetworkData {\n    @ManyToOne\n    @JoinColumn(name=\"switch_id\")\n    private SwitchData switchData;\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    @Column(name=\"network_id\")\n    private int id;\n   /**Code omitted**/\n}\n```", "```java\nEntity\n@Table(name = \"location\")\npublic class LocationData {\n    @Id\n    @Column(name=\"location_id\")\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private int locationId;\n    @Column(name=\"address\")\n    private String address;\n    @Column(name=\"city\")\n    private String city;\n    /**Code omitted**/\n}\n```", "```java\n    @ApplicationScoped\n    public class RouterManagementRepository implements Pa\n      nacheRepositoryBase<RouterData, UUID> {\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class SwitchManagementRepository implements Pa\n      nacheRepositoryBase<SwitchData, UUID> {\n    }\n    ```", "```java\npublic interface RouterManagementOutputPort {\n    Router retrieveRouter(Id id);\n    boolean removeRouter(Id id);\n    Router persistRouter(Router router);\n}\n```", "```java\npublic interface SwitchManagementOutputPort {\n    Switch retrieveSwitch(Id id);\n}\n```", "```java\n    @ApplicationScoped\n    public class RouterManagementMySQLAdapter implements\n      RouterManagementOutputPort {\n        @Inject\n        RouterManagementRepository\n          routerManagementRepository;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @Override\n    public Router retrieveRouter(Id id) {\n        var routerData =\n        routerManagementRepository.findById(id.getUuid())\n          .subscribe()\n          .asCompletionStage()\n          .join();\n        return RouterMapper.routerDataToDomain(router\n          Data);\n    }\n    ```", "```java\n    @Override\n    public Router removeRouter(Id id) {\n     return routerManagementRepository\n            .deleteById(\n            id.getUuid())\n            .subscribe().asCompletionStage().join();\n    }\n    ```", "```java\n    @Override\n    public Router persistRouter(Router router) {\n        var routerData =\n        RouterH2Mapper.routerDomainToData(router);\n        Panache.withTransaction(\n        ()->routerManagementRepository.persist\n        (routerData));\n        return router;\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class SwitchManagementMySQLAdapter implements\n      SwitchManagementOutputPort {\n        @Inject\n        SwitchManagementRepository\n          switchManagementRepository;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @Override\n    public Switch retrieveSwitch(Id id) {\n        var switchData =\n        switchManagementRepository.findById(id.getUuid())\n           .subscribe()\n           .asCompletionStage()\n           .join();\n        return RouterMapper.switchDataToDo\n          main(switchData);\n    }\n    ```", "```java\n@QuarkusTest\npublic class RouterManagementMySQLAdapterTest {\n    @InjectMock\n    RouterManagementMySQLAdapter\n    routerManagementMySQLAdapter;\n    @Test\n    public void testRetrieveRouter() {\n        Router router = getRouter();\n        Mockito.when(\n        routerManagementMySQLAdapter.\n        retrieveRouter(router.getId())).thenReturn(router);\n        Router retrievedRouter =\n        routerManagementMySQLAdapter.\n        retrieveRouter(router.getId());\n        Assertions.assertSame(router, retrievedRouter);\n    }\n   /** Code omitted **/\n}\n```", "```java\nquarkus.datasource.db-kind=mysql\nquarkus.datasource.reactive=true\nquarkus.hibernate-orm.database.generation=drop-and-create\nquarkus.hibernate-orm.sql-load-script=inventory.sql\nquarkus.vertx.max-event-loop-execute-time=100\n```", "```java\n$ mvn test\n```", "```java\n2021-10-10 01:33:40,242 INFO  [  .0.24]] (build-10) Creating container for image: mysql:8.0.24\n2021-10-10 01:33:40,876 INFO  [  .0.24]] (build-10) Starting container with ID: 67e788aab66f2f2c6bd91c0be1a164117294ac29cc574941ad41ff5760de918c\n2021-10-10 01:33:41,513 INFO  [  .0.24]] (build-10) Container mysql:8.0.24 is starting: 67e788aab66f2f2c6bd91c0be1a164117294ac29cc574941ad41ff5760de918c\n2021-10-10 01:33:41,520 INFO  [  .0.24]] (build-10) Waiting for database connection to become available at jdbc:mysql://localhost:49264/default using query 'SELECT 1'\n2021-10-10 01:34:01,078 INFO  [  .0.24]] (build-10) Container is started (JDBC URL: jdbc:mysql://localhost:49264/default)\n2021-10-10 01:34:01,079 INFO  [  .0.24]] (build-10) Container mysql:8.0.24 started in PT20.883579S\n2021-10-10 01:34:01,079 INFO  [io.qua.dev.mys.dep.MySQLDevServicesProcessor] (build-10) Dev Services for MySQL started.\n```", "```java\n[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 32.672 s - in dev.davivieira.topologyinventory.framework.adapters.input.rest.NetworkManagementAdapterTest\n[INFO] Running dev.davivieira.topologyinventory.framework.adapters.input.rest.RouterManagementAdapterTest\n[INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.232 s - in dev.davivieira.topologyinventory.framework.adapters.input.rest.RouterManagementAdapterTest\n[INFO] Running dev.davivieira.topologyinventory.framework.adapters.input.rest.SwitchManagementAdapterTest\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.088 s - in dev.davivieira.topologyinventory.framework.adapters.input.rest.SwitchManagementAdapterTest\n[INFO] Running dev.davivieira.topologyinventory.framework.adapters.input.rest.outputAdapters.RouterManagementMySQLAdapterTest\n[INFO] Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.116 s - in dev.davivieira.topologyinventory.framework.adapters.input.rest.outputAdapters.RouterManagementMySQLAdapterTest\n[INFO] Running dev.davivieira.topologyinventory.framework.adapters.input.rest.outputAdapters.SwitchManagementMySQLAdapterTest\n[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 s - in dev.davivieira.topologyinventory.framework.adapters.input.rest.outputAdapters.SwitchManagementMySQLAdapterTest\n```"]