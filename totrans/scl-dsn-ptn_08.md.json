["```java\ncase class Date(\n  day: Int,\n  month: String,\n  year: Int\n)\n```", "```java\nobject DateExample {\n  def main(args: Array[String]): Unit = {\n    val thirdOfMarch = Date(3, \"MARCH\", 2016)\n    val fourthOfJuly = Date(4, \"JULY\", 2016)\n    val newYear1 = Date(31, \"DECEMBER\", 2015)\n    val newYear2 = Date(31, \"DECEMBER\", 2015)\n    System.out.println(s\"The 3rd of March 2016 is the same as\n     the 4th of July 2016: ${thirdOfMarch == fourthOfJuly}\")\n    System.out.println(s\"The new year of 2015 is here twice:\n     ${newYear1 == newYear2}\")\n  }\n}\n```", "```java\nclass BadDate(\n  day: Int,\n  month: String,\n  year: Int\n)\n```", "```java\nobject BadDateExample {\n  def main(args: Array[String]): Unit = {\n    val thirdOfMarch = new BadDate(3, \"MARCH\", 2016)\n    val fourthOfJuly = new BadDate(4, \"JULY\", 2016)\n    val newYear1 = new BadDate(31, \"DECEMBER\", 2015)\n    val newYear2 = new BadDate(31, \"DECEMBER\", 2015)\n    System.out.println(s\"The 3rd of March 2016 is the same as the\n     4th of July 2016: ${thirdOfMarch == fourthOfJuly}\")\n    System.out.println(s\"The new year of 2015 is here twice:\n     ${newYear1 == newYear2}\")\n  }\n}\n```", "```java\ncase class Message(number: Int) {\n  def print(): String = s\"This is a message with number: $number.\"\n}\n```", "```java\nimport java.util.concurrent.ConcurrentLinkedQueue\nimport scala.util.Random\n\nclass DataGenerator extends Runnable {\n  val MAX_VAL = 10\n  val MAX_TIME = 10000\n  private var isStop = false\n  private val queue: ConcurrentLinkedQueue[Int] = new ConcurrentLinkedQueue[Int]()\n\n  override def run(): Unit = {\n    val random = new Random()\n    while (!isStop) {\n      Thread.sleep(random.nextInt(MAX_TIME))\n      queue.add(random.nextInt(MAX_VAL))\n    }\n  }\n\n  def getMessage(): Option[Message] =\n    Option(queue.poll()).map {\n    case number => Message(number)\n  }\n\n  def requestStop(): Unit = this.synchronized {\n    isStop = true\n  }\n}\n```", "```java\nobject MessageExample {\n  val TIMES_TO_TRY = 10\n  val MAX_TIME = 5000\n\n  def main(args: Array[String]): Unit = {\n    val generator = new DataGenerator\n    // start the generator in another thread\n    new Thread(generator).start()\n    val random = new Random()\n    (0 to TIMES_TO_TRY).foreach {\n      case time =>\n        Thread.sleep(random.nextInt(MAX_TIME))\n        System.out.println(\"Getting next message...\")\n        generator.getMessage().foreach(m =>\n          System.out.println(m.print()))\n    }\n    generator.requestStop()\n  }\n}\n```", "```java\ncase class Person(name: String, age: Int, address: String)\n```", "```java\ntrait Parser[T] {\n  def parse(file: String): List[T]\n}\n```", "```java\nimport com.github.tototoshi.csv.CSVReader\n\nclass CSVParser extends Parser[Person] {\n  override def parse(file: String): List[Person] =\n    CSVReader.open(new\n        InputStreamReader(this.getClass.getResourceAsStream(file))).all().map {\n          case List(name, age, address) =>\n            Person(name, age.toInt, address)\n    }\n}\n```", "```java\nimport org.json4s._\nimport org.json4s.jackson.JsonMethods\n\nclass JsonParser extends Parser[Person] {\n  implicit val formats = DefaultFormats\n  override def parse(file: String): List[Person] =\n    JsonMethods.parse(StreamInput(this.getClass.getResourceAsStream(file))).extract[List[Person]]\n}\n```", "```java\nIvan,26,London\nMaria,23,Edinburgh\nJohn,36,New York\nAnna,24,Moscow\n```", "```java\n[\n  {\n    \"name\": \"Ivan\",\n    \"age\": 26,\n    \"address\": \"London\"\n  },\n  {\n    \"name\": \"Maria\",\n    \"age\": 23,\n    \"address\": \"Edinburgh\"\n  },\n  {\n    \"name\": \"John\",\n    \"age\": 36,\n    \"address\": \"New York\"\n  },\n  {\n    \"name\": \"Anna\",\n    \"age\": 24,\n    \"address\": \"Moscow\"\n  }\n]\n```", "```java\nobject Parser {\n  def apply(filename: String): Parser[Person] =\n    filename match {\n      case f if f.endsWith(\".json\") => new JsonParser\n      case f if f.endsWith(\".csv\") => new CSVParser\n      case f => throw new RuntimeException(s\"Unknown format: $f\")\n    }\n}\n```", "```java\nclass PersonApplication[T](parser: Parser[T]) {\n  def write(file: String): Unit = {\n    System.out.println(s\"Got the following data ${parser.parse(file)}\")\n  }\n}\n```", "```java\nobject ParserExample {\n  def main(args: Array[String]): Unit = {\n    val csvPeople = Parser(\"people.csv\")\n    val jsonPeople = Parser(\"people.json\")\n    val applicationCsv = new PersonApplication(csvPeople)\n    val applicationJson = new PersonApplication(jsonPeople)\n    System.out.println(\"Using the csv: \")\n    applicationCsv.write(\"people.csv\")\n    System.out.println(\"Using the json: \")\n    applicationJson.write(\"people.json\")\n  }\n}\n```", "```java\nclass Application[T](strategy: (String) => List[T]) {\n  def write(file: String): Unit = {\n    System.out.println(s\"Got the following data ${strategy(file)}\")\n  }\n}\n```", "```java\nimport com.github.tototoshi.csv.CSVReader\nimport org.json4s.{StreamInput, DefaultFormat}\nimport org.json4s.jackson.JsonMethods\n\nobject StrategyFactory {\n  implicit val formats = DefaultFormats\n\n  def apply(filename: String): (String) => List[Person] =\n    filename match {\n      case f if f.endsWith(\".json\") => parseJson\n      case f if f.endsWith(\".csv\") => parseCsv\n      case f => throw new RuntimeException(s\"Unknown format: $f\")\n    }\n\n  def parseJson(file: String): List[Person] =\n    JsonMethods.parse(StreamInput(this.getClass.getResourceAsStream(file))).extract[List[Person]]\n\n  def parseCsv(file: String): List[Person] = CSVReader.open(new\n      InputStreamReader(this.getClass.getResourceAsStream(file))).all().map {\n        case List(name, age, address) => Person(name, age.toInt, address)\n  }\n}\n```", "```java\nobject StrategyExample {\n  def main(args: Array[String]): Unit = {\n    val applicationCsv = new Application[Person](StrategyFactory(\"people.csv\"))\n    val applicationJson = new Application[Person](StrategyFactory(\"people.json\"))\n    System.out.println(\"Using the csv: \")\n    applicationCsv.write(\"people.csv\")\n    System.out.println(\"Using the json: \")\n    applicationJson.write(\"people.json\")\n  }\n}\n```", "```java\ncase class Robot() {\n  def cleanUp(): Unit = System.out.println(\"Cleaning up.\")\n  def pourJuice(): Unit = System.out.println(\"Pouring juice.\")\n  def makeSandwich(): Unit = System.out.println(\"Making a sandwich.\")\n}\n```", "```java\ntrait RobotCommand {\n  def execute(): Unit\n}\n\ncase class MakeSandwichCommand(robot: Robot) extends RobotCommand {\n  override def execute(): Unit = robot.makeSandwich()\n}\n\ncase class PourJuiceCommand(robot: Robot) extends RobotCommand {\n  override def execute(): Unit = robot.pourJuice()\n}\n\ncase class CleanUpCommand(robot: Robot) extends RobotCommand {\n  override def execute(): Unit = robot.cleanUp()\n}\n```", "```java\nclass RobotController {\n  val history = ListBuffer[RobotCommand]()\n\n  def issueCommand(command: RobotCommand): Unit = {\n    command +=: history\n    command.execute()\n  }\n\n  def showHistory(): Unit = {\n    history.foreach(println)\n  }\n}\n```", "```java\nobject RobotExample {\n  def main(args: Array[String]): Unit = {\n    val robot = Robot()\n    val robotController = new RobotController\n    robotController.issueCommand(MakeSandwichCommand(robot))\n    robotController.issueCommand(PourJuiceCommand(robot))\n    System.out.println(\"I'm eating and having some juice.\")\n    robotController.issueCommand(CleanUpCommand(robot))\n    System.out.println(\"Here is what I asked my robot to do:\")\n    robotController.showHistory()\n  }\n}\n```", "```java\nclass RobotByNameController {\n  val history = ListBuffer[() => Unit]()\n\n  def issueCommand(command: => Unit): Unit = {\n    command _ +=: history\n    command\n  }\n\n  def showHistory(): Unit = {\n    history.foreach(println)\n  }\n}\n```", "```java\nobject RobotByNameExample {\n  def main(args: Array[String]): Unit = {\n    val robot = Robot()\n    val robotController = new RobotByNameController\n    robotController.issueCommand(MakeSandwichCommand(robot).execute())\n    robotController.issueCommand(PourJuiceCommand(robot).execute())\n    System.out.println(\"I'm eating and having some juice.\")\n    robotController.issueCommand(CleanUpCommand(robot).execute())\n    System.out.println(\"Here is what I asked my robot to do:\")\n    robotController.showHistory()\n  }\n}\n```", "```java\ncase class Money(amount: Int)\n```", "```java\ntrait Dispenser {\n  val amount: Int\n  val next: Option[Dispenser]\n\n  def dispense(money: Money): Unit = {\n    if (money.amount >= amount) {\n      val notes = money.amount / amount\n      val left = money.amount % amount\n      System.out.println(s\"Dispensing $notes note/s of $amount.\")\n      if (left > 0) next.map(_.dispense(Money(left)))\n    } else {\n      next.foreach(_.dispense(money))\n    }\n  }\n}\n```", "```java\nclass Dispenser50(val next: Option[Dispenser]) extends Dispenser {\n  override val amount = 50\n}\n\nclass Dispenser20(val next: Option[Dispenser]) extends Dispenser {\n  override val amount: Int = 20\n}\n\nclass Dispenser10(val next: Option[Dispenser]) extends Dispenser {\n  override val amount: Int = 10\n}\n\nclass Dispenser5(val next: Option[Dispenser]) extends Dispenser {\n  override val amount: Int = 5\n}\n```", "```java\nclass ATM {\n  val dispenser: Dispenser = {\n    val d1 = new Dispenser5(None)\n    val d2 = new Dispenser10(Some(d1))\n    val d3 = new Dispenser20(Some(d2))\n    new Dispenser50(Some(d3))\n  }\n\n  def requestMoney(money: Money): Unit = {\n    if (money.amount % 5 != 0) {\n      System.err.println(\"The smallest nominal is 5 and we cannot\n       satisfy your request.\")\n    } else {\n      dispenser.dispense(money)\n    }\n  }\n}\n```", "```java\nobject ATMExample {\n  def main(args: Array[String]): Unit = {\n    val atm = new ATM\n    printHelp()\n    Source.stdin.getLines().foreach {\n      case line =>\n        processLine(line, atm)\n    }\n  }\n\n  def printHelp(): Unit = {\n    System.out.println(\"Usage: \")\n    System.out.println(\"1\\. Write an amount to withdraw...\")\n    System.out.println(\"2\\. Write EXIT to quit the application.\")\n  }\n\n  def processLine(line: String, atm: ATM): Unit = {\n    line match {\n      case \"EXIT\" =>\n        System.out.println(\"Bye!\")\n        System.exit(0)\n      case l =>\n        try {\n          atm.requestMoney(Money(l.toInt))\n          System.out.println(\"Thanks!\")\n        } catch {\n          case _: Throwable =>\n            System.err.println(s\"Invalid input: $l.\")\n            printHelp()\n        }\n    }\n  }\n}\n```", "```java\ntrait PartialFunctionDispenser {\n  def dispense(dispenserAmount: Int): PartialFunction[Money, Money] = {\n    case Money(amount) if amount >= dispenserAmount =>\n      val notes = amount / dispenserAmount\n      val left = amount % dispenserAmount\n      System.out.println(s\"Dispensing $notes note/s of $dispenserAmount.\")\n      Money(left)\n    case m @ Money(amount) => m\n  }\n}\n```", "```java\nclass PartialFunctionATM extends PartialFunctionDispenser {\n  val dispenser =\n    dispense(50)\n      .andThen(dispense(20))\n      .andThen(dispense(10))\n      .andThen(dispense(5))\n\n  def requestMoney(money: Money): Unit = {\n    if (money.amount % 5 != 0) {\n      System.err.println(\"The smallest nominal is 5 and we cannot\n       satisfy your request.\")\n    } else {\n      dispenser(money)\n    }\n  }\n}\n```", "```java\ntrait Expression {\n  def interpret(): Int\n}\n```", "```java\nclass Number(n: Int) extends Expression {\n  override def interpret(): Int = n\n}\n```", "```java\nclass Add(right: Expression, left: Expression) extends Expression {\n  override def interpret(): Int = left.interpret() + right.interpret()\n}\n\nclass Subtract(right: Expression, left: Expression) extends Expression {\n  override def interpret(): Int = left.interpret() - right.interpret()\n}\n\nclass Multiply(right: Expression, left: Expression) extends Expression {\n  override def interpret(): Int = left.interpret() * right.interpret()\n}\n```", "```java\nobject Expression {\n  def apply(operator: String, left: => Expression, right: => Expression): Option[Expression] =\n    operator match {\n      case \"+\" => Some(new Add(right, left))\n      case \"-\" => Some(new Subtract(right, left))\n      case \"*\" => Some(new Multiply(right, left))\n      case i if i.matches(\"\\\\d+\") => Some(new Number(i.toInt))\n      case _ => None\n    }\n}\n```", "```java\nclass RPNParser {\n  def parse(expression: String): Expression = {\n    val tokenizer = new StringTokenizer(expression)\n    tokenizer.asScala.foldLeft(mutable.Stack[Expression]()) {\n      case (result, token) => \n        val item = Expression(token.toString, result.pop(), result.pop())\n        item.foreach(result.push)\n        result\n    }.pop()\n  }\n}\n```", "```java\nclass RPNInterpreter {\n  def interpret(expression: Expression): Int = expression.interpret()\n}\n```", "```java\nobject RPNExample {\n  def main(args: Array[String]): Unit = {\n    val expr1 = \"1 2 + 3 * 9 10 + -\" // (1 + 2) * 3 - (9 + 10) = -10\n    val expr2 = \"1 2 3 4 5 * * - +\" // 1 + 2 - 3 * 4 * 5 = -57\n    val expr3 = \"12 -\" // invalid\n    val parser = new RPNParser\n    val interpreter = new RPNInterpreter\n    System.out.println(s\"The result of '${expr1}' is:\n     ${interpreter.interpret(parser.parse(expr1))}\")\n    System.out.println(s\"The result of '${expr2}' is:\n     ${interpreter.interpret(parser.parse(expr2))}\")\n    try {\n      System.out.println(s\"The result is:\n       ${interpreter.interpret(parser.parse(expr3))}\")\n    } catch {\n      case _: Throwable => System.out.println(s\"'$expr3' is invalid.\")\n    }\n  }\n}\n```"]