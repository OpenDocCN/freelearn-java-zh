["```java\nhttp://mvnrepository.com/artifact/org.mockito/mockito-core):\n```", "```java\n<dependency>\n  <groupId>org.mockito</groupId>\n  <artifactId>mockito-core</artifactId>\n  <version>1.9.5</version>\n  <scope>test</scope>\n</dependency>\n```", "```java\n  testCompile 'org.mockito:mockito-core:1.9.5'\n```", "```java\n represents the StockBroker class. StockBroker collaborates with the MarketWatcher and Portfolio classes. The perform() method of StockBroker accepts a portfolio and a Stock object:\n```", "```java\npublic class StockBroker {\n  private final static BigDecimal LIMIT = new BigDecimal(\"0.10\");\n\n  private final MarketWatcher market;\n\n  public StockBroker(MarketWatcher market) {\n    this.market = market;\n  }\n\n  public void perform(Portfolio portfolio,Stock stock) {\n    Stock liveStock = market.getQuote(stock.getSymbol());\n    BigDecimal avgPrice = portfolio.getAvgPrice(stock);\n    BigDecimal priceGained = liveStock.getPrice().subtract(avgPrice);\n    BigDecimal percentGain = priceGained.divide(avgPrice);\n    if(percentGain.compareTo(LIMIT) > 0) {\n      portfolio.sell(stock, 10);\n    }else if(percentGain.compareTo(LIMIT) < 0){\n      portfolio.buy(stock);\n    }\n  }\n}\n```", "```java\nimport org.mockito.Mockito;\n\npublic class StockBrokerTest {\n  MarketWatcher marketWatcher = Mockito.mock(MarketWatcher.class);\n  Portfolio portfolio = Mockito.mock(Portfolio.class);\n\n}\n```", "```java\nimport static org.mockito.Mockito.mock;\n\npublic class StockBrokerTest {\n  MarketWatcher marketWatcher = mock(MarketWatcher.class);\n  Portfolio portfolio = mock(Portfolio.class);\n}\n```", "```java\nimport org.mockito.Mock;\n\npublic class StockBrokerTest {\n  @Mock \n  MarketWatcher marketWatcher;\n  @Mock \n  Portfolio portfolio;\n}\n```", "```java\nMockitoAnnotations to create mocks:\n```", "```java\nimport static org.junit.Assert.assertEquals;\nimport org.mockito.MockitoAnnotations;\n\npublic class StockBrokerTest {\n\n  @Mock \n  MarketWatcher marketWatcher;\n\n  @Mock \n  Portfolio portfolio;\n\n  @Before \n  public void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test \n  public void sanity() throws Exception {\n    assertNotNull(marketWatcher);\n    assertNotNull(portfolio);\n  }\n}\n```", "```java\nMockitoJUnitRunner JUnit runner:\n```", "```java\nimport org.mockito.runners.MockitoJUnitRunner;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class StockBrokerTest {\n\n  @Mock\n    MarketWatcher marketWatcher;\n  @Mock \n    Portfolio portfolio;\n\n  @Test \n    public void sanity() throws Exception {\n      assertNotNull(marketWatcher);\n      assertNotNull(portfolio);\n  }\n}\n```", "```java\ngetQuote(String symbol) method of MarcketWatcher and returns a specific Stock object:\n```", "```java\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class StockBrokerTest {\n\n  @Mock MarketWatcher marketWatcher;\n  @Mock Portfolio portfolio;\n\n  @Test\n  public void marketWatcher_Returns_current_stock_status() {\n    Stock uvsityCorp = new Stock(\"UV\", \"Uvsity Corporation\", new BigDecimal(\"100.00\"));\n\n when(marketWatcher.getQuote(anyString())).\n thenReturn(uvsityCorp);\n\n    assertNotNull(marketWatcher.getQuote(\"UV\"));\n  }\n}\n```", "```java\nStockBroker class:\n```", "```java\nimport com.packt.trading.dto.Stock;\nimport static org.junit.Assert.assertNotNull;\nimport static org.mockito.Matchers.anyString;\nimport static org.mockito.Matchers.isA;\nimport static org.mockito.Mockito.verify;\nimport static org.mockito.Mockito.when;\n\n@RunWith(MockitoJUnitRunner.class)\npublic class StockBrokerTest {\n  @Mock   MarketWatcher marketWatcher;\n  @Mock   Portfolio portfolio;\n  StockBroker broker;\n\n  @Before public void setUp() {\n    broker = new StockBroker(marketWatcher);\n  }\n\n  @Test\n  public void when_ten_percent_gain_then_the_stock_is_sold() {\n    //Portfolio's getAvgPrice is stubbed to return $10.00\n    when(portfolio.getAvgPrice(isA(Stock.class))).\n      thenReturn(new BigDecimal(\"10.00\"));\n    //A stock object is created with current price $11.20\n    Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(\"11.20\"));\n    //getQuote method is stubbed to return the stock\n    when(marketWatcher.getQuote(anyString())).thenReturn(aCorp);\n    //perform method is called, as the stock price increases \n    // by 12% the broker should sell the stocks\n    broker.perform(portfolio, aCorp);\n\n  //verifying that the broker sold the stocks\n  verify(portfolio).sell(aCorp,10);\n }  \n}\n```", "```java\n  @Test  public void verify_zero_interaction() {\n    verifyZeroInteractions(marketWatcher,portfolio);\n  }\n```", "```java\n  @Test  public void verify_no_more_interaction() {\n    Stock noStock = null;\n    portfolio.getAvgPrice(noStock);\n    portfolio.sell(null, 0);\n    verify(portfolio).getAvgPrice(eq(noStock));\n    //this will fail as the sell method was invoked\n    verifyNoMoreInteractions(portfolio);\n  }\n```", "```java\nwhen(mockObject.getValue(1)).thenReturn(expected value);\n```", "```java\nrequest object is created and passed to service. Now, from a test, if we call the someMethod method and service is a mocked object, then from test, we cannot stub callMethod with a specific request as the request object is local to the someMethod:\n```", "```java\npublic void someMethod(Object obj){\n  Request req = new Request();\n  req.setValue(obj);\n  Response resp = service.callMethod(req);\n}\n```", "```java\nverify(mock).someMethod(anyInt(), anyString(), eq(\"third argument\"));\n```", "```java\nverify(mock).someMethod(1, anyString(), \"third argument\");\n```", "```java\n  class BlueChipStockMatcher extends ArgumentMatcher<String>{\n    @Override\n    public boolean matches(Object symbol) {\n       return \"FB\".equals(symbol) ||  \n         \"AAPL\".equals(symbol);\n    }\n  }\n```", "```java\n  class OtherStockMatcher extends BlueChipStockMatcher{\n    @Override\n    public boolean matches(Object symbol) {\n      return !super.matches(symbol);\n    }\n  }\n```", "```java\n@Test\npublic void argument_matcher() {\n    when(portfolio.getAvgPrice(isA(Stock.class))).\n      thenReturn(new BigDecimal(\"10.00\"));\n\n    Stock blueChipStock = new Stock(\"FB\", \"FB Corp\", new BigDecimal(1000.00));\n    Stock otherStock = new Stock(\"XY\", \"XY Corp\", new BigDecimal(5.00));\n\n    when(marketWatcher.getQuote(argThat(new       BlueChipStockMatcher()))).thenReturn(blueChipStock);\n    when(marketWatcher.getQuote(argThat(new       OtherStockMatcher()))).thenReturn(otherStock);\n\n    broker.perform(portfolio, blueChipStock);\n    verify(portfolio).sell(blueChipStock,10);\n\n    broker.perform(portfolio, otherStock);\n    verify(portfolio, never()).sell(otherStock,10);\n  }\n```", "```java\n  @Test(expected = IllegalStateException.class)\n  public void throwsException() throws Exception {\n    when(portfolio.getAvgPrice(isA(Stock.class))).thenThrow(new IllegalStateException(\"Database down\"));\n\n    portfolio.getAvgPrice(new Stock(null, null, null));\n  }\n```", "```java\ndoThrow(exception).when(mock).voidmethod(arguments);\n```", "```java\n  @Test(expected = IllegalStateException.class)\n  public void throwsException_void_methods() throws Exception {\n    doThrow(new IllegalStateException()).\n      when(portfolio).buy(isA(Stock.class));\n    portfolio.buy(new Stock(null, null, null));\n  }\n```", "```java\n   @Test\n  public void consecutive_calls() throws Exception {\n    Stock stock = new Stock(null, null, null);\n    when(portfolio.getAvgPrice(stock)).thenReturn(BigDecimal.TEN, BigDecimal.ZERO);\n    assertEquals(BigDecimal.TEN, portfolio.getAvgPrice(stock));\n    assertEquals(BigDecimal.ZERO, portfolio.getAvgPrice(stock));\n    assertEquals(BigDecimal.ZERO, portfolio.getAvgPrice(stock));\n  }\n```", "```java\nwhen(portfolio.getAvgPrice(stock)).thenReturn(BigDecimal.TEN).thenReturn(BigDecimal.TEN).thenThrow(new IllegalStateException())\n```", "```java\npublic interface Answer<T> {\n   T answer(InvocationOnMock invocation) throws Throwable;\n}\n```", "```java\nObject[] args = invocation.getArguments();\nObject mock = invocation.getMock();\n```", "```java\nAnswer classes. Add HashMap to the test class:\n```", "```java\nMap<String, List<Stock>> stockMap = new HashMap<String, List<Stock>>();\n```", "```java\nclass BuyAnswer implements Answer<Object>{\n  @Override\n  public Object answer(InvocationOnMock invocation) throws Throwable \n   {\n    Stock newStock = (Stock)invocation.getArguments()[0];\n    List<Stock> stocks = stockMap.get(newStock.getSymbol());\n    if(stocks != null) {\n      stocks.add(newStock);\n    }else {\n      stocks = new ArrayList<Stock>();\n      stocks.add(newStock);\n      stockMap.put(newStock.getSymbol(), stocks);\n    }\n    return null;\n  }\n}\n```", "```java\nclass TotalPriceAnswer implements Answer<BigDecimal>{\n  @Override  \n  public BigDecimal answer(InvocationOnMock invocation) throws Throwable  {\n    BigDecimal totalPrice = BigDecimal.ZERO;\n\n    for(String stockId: stockMap.keySet()) {\n      for(Stock stock:stockMap.get(stockId)) {\n        totalPrice = totalPrice.add(stock.getPrice());\n      }\n    }\n    return totalPrice;\n  }\n}\n```", "```java\n@Test\n  public void answering() throws Exception {\n    stockMap.clear();\n    doAnswer(new BuyAnswer()).when(portfolio).\n      buy(isA(Stock.class));\n\n    when(portfolio.getCurrentValue()).\n    then(new TotalPriceAnswer());\n\n    portfolio.buy(new Stock(\"A\", \"A\", BigDecimal.TEN));\n    portfolio.buy(new Stock(\"B\", \"B\", BigDecimal.ONE));\n\n    assertEquals(new BigDecimal(\"11\"), portfolio.getCurrentValue());\n  }\n```", "```java\nSomeClass realObject = new RealImplemenation();\nSomeClass spyObject = spy(realObject);\n```", "```java\n@Test public void spying() throws Exception {\n    Stock realStock = new Stock(\"A\", \"Company A\", BigDecimal.ONE);\n    Stock spyStock = spy(realStock);\n    //call real method from  spy\n    assertEquals(\"A\", spyStock.getSymbol());\n\n    //Changing value using spy\n    spyStock.updatePrice(BigDecimal.ZERO);\n\n    //verify spy has the changed value\n    assertEquals(BigDecimal.ZERO, spyStock.getPrice());\n\n    //Stubbing method\n    when(spyStock.getPrice()).thenReturn(BigDecimal.TEN);\n\n    //Changing value using spy\n    spyStock.updatePrice(new BigDecimal(\"7\"));\n\n    //Stubbed method value 10.00  is returned NOT 7\n    assertNotEquals(new BigDecimal(\"7\"), spyStock.getPrice());\n    //Stubbed method value 10.00\n    assertEquals(BigDecimal.TEN,  spyStock.getPrice());\n\n}\n```", "```java\n doThrow(new RuntimeException()).\n doNothing().\n doAnswer(someAnswer).\n when(mock).someVoidMethod();\n\n  //this call throws exception\n  mock.someVoidMethod(); \n  // this call does nothing \n  mock.someVoidMethod();\n```", "```java\ndoCallRealMethod().when(mock).someVoidMethod();\n```", "```java\ndoReturn:\n```", "```java\n@Test public void doReturn_is_not_type_safe() throws Exception {\n  //then return is type safe- It has to return a BigDecimal\n  when(portfolio.getCurrentValue()).thenReturn(BigDecimal.ONE);\n   //method call works fine\n  portfolio.getCurrentValue();\n\n    //returning a String instead of BigDecimal\n  doReturn(\"See returning a String\").\n    when(portfolio.getCurrentValue());\n    //this call will fail with an error\n  portfolio.getCurrentValue();\n}\n```", "```java\n@Test\n  public void doReturn_usage() throws Exception {\n    List<String> list = new ArrayList<String>();\n    List<String> spy = spy(list);\n    //impossible the real list.get(0) is called and fails\n    //with IndexOutofBoundsException, as the list is empty\n    when(spy.get(0)).thenReturn(\"not reachable\");\n  }\n```", "```java\n@Test public void doReturn_usage() throws Exception {\n  List<String> list = new ArrayList<String>();\n  List<String> spy = spy(list);\n\n  //doReturn fixed the issue\n  doReturn(\"now reachable\").when(spy).get(0);\n  assertEquals(\"now reachable\", spy.get(0));\n}\n```", "```java\npublic void buildPerson(String firstName, String lastName, String middleName, int age){\n  Person person = new Person();\n  person.setFirstName(firstName);\n  person.setMiddleName(middleName);\n  person.setLastName(lastName);\n  person.setAge(age);\n this,personService.save(person);\n}\n```", "```java\n@Test\npublic void argument_captor() throws Exception {\n  when(portfolio.getAvgPrice(isA(Stock.class))).thenReturn(new BigDecimal(\"10.00\"));\n  Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(11.20));\n  when(marketWatcher.getQuote(anyString())).thenReturn(aCorp);\n  broker.perform(portfolio, aCorp);\n\n  ArgumentCaptor<String> stockIdCaptor = ArgumentCaptor.forClass(String.class);\n\n  verify(marketWatcher).getQuote(stockIdCaptor.capture());\n  assertEquals(\"A\", stockIdCaptor.getValue());\n\n  //Two arguments captured\n  ArgumentCaptor<Stock>  stockCaptor = ArgumentCaptor.forClass(Stock.class);   ArgumentCaptor<Integer> stockSellCountCaptor = ArgumentCaptor.forClass(Integer.class);\n\n  verify(portfolio).sell(stockCaptor.capture(), stockSellCountCaptor.capture());\n  assertEquals(\"A\", stockCaptor.getValue().getSymbol());\n  assertEquals(10, stockSellCountCaptor.getValue().intValue());\n}\n```", "```java\n@Test public void inorder() throws Exception {\n  Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(11.20));\n  portfolio.getAvgPrice(aCorp);\n  portfolio.getCurrentValue();\n  marketWatcher.getQuote(\"X\");\n  portfolio.buy(aCorp);\n  InOrder inOrder=inOrder(portfolio,marketWatcher);\n  inOrder.verify(portfolio).buy(isA(Stock.class));\n  inOrder.verify(portfolio).getAvgPrice(isA(Stock.class));\n}\n```", "```java\n@Test public void inorder() throws Exception {\n  Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(11.20));\n  portfolio.getAvgPrice(aCorp);\n  portfolio.getCurrentValue();\n  marketWatcher.getQuote(\"X\");\n  portfolio.buy(aCorp);\n\n  InOrder inOrder=inOrder(portfolio,marketWatcher);\n  inOrder.verify(portfolio).getAvgPrice(isA(Stock.class));\n  inOrder.verify(portfolio).getCurrentValue();\n  inOrder.verify(marketWatcher).getQuote(anyString());\n  inOrder.verify(portfolio).buy(isA(Stock.class));\n}\n```", "```java\n@Test\n  public void changing_default() throws Exception {\n    Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(11.20));\n    Portfolio pf = Mockito.mock(Portfolio.class);\n    //default null is returned\n    assertNull(pf.getAvgPrice(aCorp));\n    Portfolio pf1 = Mockito.mock(Portfolio.class, Mockito.RETURNS_SMART_NULLS);\n    //a smart null is returned\n    System.out.println(\"#1 \"+pf1.getAvgPrice(aCorp));\n    assertNotNull(pf1.getAvgPrice(aCorp));\n\n    Portfolio pf2 = Mockito.mock(Portfolio.class, Mockito.RETURNS_MOCKS);\n    //a mock is returned\n    System.out.println(\"#2 \"+pf2.getAvgPrice(aCorp));\n    assertNotNull(pf2.getAvgPrice(aCorp));\n\n    Portfolio pf3 = Mockito.mock(Portfolio.class, Mockito.RETURNS_DEEP_STUBS);\n    //a deep stubbed mock is returned\n    System.out.println(\"#3 \"+pf3.getAvgPrice(aCorp));\n    assertNotNull(pf3.getAvgPrice(aCorp));\n  }\n```", "```java\ngetAvgPrice method to return a value, but reset clears the stub; after reset, the getAvgPrice method returns NULL:\n```", "```java\n@Test \npublic void resetMock() throws Exception {\n  Stock aCorp = new Stock(\"A\", \"A Corp\", new BigDecimal(11.20));\n\n  Portfolio portfolio = Mockito.mock(Portfolio.class);\n  when(portfolio.getAvgPrice(eq(aCorp))).\n    thenReturn(BigDecimal.ONE);\n  assertNotNull(portfolio.getAvgPrice(aCorp));\n\n  Mockito.reset(portfolio);\n  //Resets the stub, so getAvgPrice returns NULL\n  assertNull(portfolio.getAvgPrice(aCorp));\n}\n```", "```java\nStock globalStock =  when(Mockito.mock(Stock.class).getPrice()).thenReturn(BigDecimal.ONE).getMock();\n\n  @Test\n  public void access_global_mock() throws Exception {\n    assertEquals(BigDecimal.ONE, globalStock.getPrice());\n  }\n```", "```java\n@Test\npublic void mocking_details() throws Exception {\n  Portfolio pf1 = Mockito.mock(Portfolio.class, Mockito.RETURNS_MOCKS);\n\n  BigDecimal result = pf1.getAvgPrice(globalStock);\n  assertNotNull(result);\n  assertTrue(Mockito.mockingDetails(pf1).isMock());\n\n  Stock myStock = new Stock(null, null, null);\n  Stock spy = spy(myStock);\n  assertTrue(Mockito.mockingDetails(spy).isSpy());\n\n}\n```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class StockBrokerBDDTest {\n  @Mock MarketWatcher marketWatcher;\n  @Mock Portfolio portfolio;\n\n  StockBroker broker;\n\n  @Before public void setUp() {\n    broker = new StockBroker(marketWatcher);\n  }\n\n  @Test\n  public void should_sell_a_stock_when_price_increases_by_ten_percent(){\n    Stock aCorp = new Stock(\"FB\", \"FaceBook\", new BigDecimal(11.20));\n    //Given a customer previously bought 10 'FB' stocks at  \n    //$10.00/per share\n    given(portfolio.getAvgPrice(isA(Stock.class))).\n      willReturn(new BigDecimal(\"10.00\"));\n\n    given(marketWatcher.getQuote(eq(\"FB\"))).\n      willReturn(aCorp);\n\n    //when the 'FB' stock price becomes $11.00\n    broker.perform(portfolio, aCorp);\n\n    //then the 'FB' stocks are sold\n    verify(portfolio).sell(aCorp,10);\n  }\n}\n```"]