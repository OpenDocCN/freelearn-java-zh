- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Deciding on an Architecture Style
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 决定架构风格
- en: So far, this book has provided an opinionated approach to building a web application
    in a Hexagonal Architecture style. From organizing code to taking shortcuts, we
    have answered many questions that this architecture style confronts us with.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，本书提供了一种有见地的构建基于六边形架构风格的Web应用程序的方法。从组织代码到走捷径，我们回答了许多这种架构风格向我们提出的许多问题。
- en: Some of the answers in this book can be applied to the conventional layered
    architecture style. Some answers can only be implemented in a domain-centric approach,
    such as the one proposed in this book. And some answers you might not even agree
    with because they haven’t worked in your experience.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的某些答案可以应用于传统的分层架构风格。某些答案只能在领域中心方法中实现，例如本书中提出的方法。还有一些答案你可能不同意，因为它们在你的经验中没有奏效。
- en: 'The final questions we want answers for, however, are these: when should we
    actually use the Hexagonal Architecture style? And when should we rather stick
    with the conventional layered style (or any other style for that matter)?'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们真正想要得到答案的最终问题是这些：我们应该何时实际使用六边形架构风格？我们应该何时而不是坚持传统的分层风格（或任何其他风格）？
- en: Start simple
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从简单开始
- en: An important point that took me far too long to realize is that software architecture
    isn’t just something we define at the beginning of a software project that will
    take care of itself after. We can’t know everything we need to know to design
    a great architecture at the beginning of a project! The architecture of a software
    project can and should evolve over time to adapt to changing requirements.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个我花了很长时间才意识到的重要观点是，软件架构不仅仅是我们在软件项目开始时定义的，之后就会自行处理的事情。在项目开始时，我们不可能知道我们设计优秀架构所需知道的一切！软件项目的架构可以也应该随着时间的推移而演化，以适应不断变化的需求。
- en: This means that we won’t know which architecture style will be the best for
    the software project in the long run, and we might need to change the architecture
    style in the future! To make this possible, we need to make certain that our software
    is supple to change. We need to plant a seed of maintainability.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可能不知道哪种架构风格在长期内将是软件项目的最佳选择，我们可能需要在将来改变架构风格！为了实现这一点，我们需要确保我们的软件易于更改。我们需要播下一颗可维护性的种子。
- en: '**Maintainability** means that we need to make our code modular so that we
    can work on each module in isolation and move it around in the code base, should
    the need arise. Our architecture needs to make the boundaries between those modules
    as clear as possible so that unwanted dependencies between those modules don’t
    accidentally creep in, reducing maintainability.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**可维护性**意味着我们需要使我们的代码模块化，这样我们就可以独立地工作在每个模块上，并在需要时将其在代码库中移动。我们的架构需要尽可能清晰地界定这些模块之间的边界，以防止那些模块之间意外地产生不想要的依赖，从而降低可维护性。'
- en: The start of a project might only involve a collection of *CRUD* use cases,
    and a domain-centric architecture such as Hexagonal Architecture might be overkill,
    so we opt for something simpler such as the component-based approach. Or we might
    know enough about the project already that we start building out a rich domain
    model, in which case the Hexagonal Architecture style might be the right one to
    start with.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 项目开始可能只涉及一组*CRUD*用例，而领域中心的架构，如六边形架构，可能过于复杂，因此我们选择更简单的方法，如基于组件的方法。或者，我们可能已经足够了解项目，开始构建一个丰富的领域模型，在这种情况下，六边形架构风格可能是开始的最佳选择。
- en: Evolve the domain
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 领域演化
- en: Over time, we learn more and more about the requirements of our software, and
    we can make better and better decisions about the best architecture style. The
    application might evolve from a collection of simple CRUD use cases to a rich
    domain-centric application with a lot of business rules. At this point, the Hexagonal
    Architecture style becomes a good option.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，我们对我们软件的需求了解得越来越多，我们可以做出越来越好的关于最佳架构风格的决定。应用程序可能从一组简单的CRUD用例演变为具有许多业务规则的丰富领域中心应用程序。在这种情况下，六边形架构风格成为一个不错的选择。
- en: It should have become clear in the previous chapters that the main feature of
    a Hexagonal Architecture style is that we can develop domain code free from diversions,
    such as persistence concerns and dependencies on external systems. In my opinion,
    evolving domain code free from external influence is the single most important
    argument for the Hexagonal Architecture style.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，应该已经很明显，六边形架构风格的主要特点是我们可以开发不受干扰的领域代码，例如持久性关注和对外部系统的依赖。在我看来，不受外部影响地发展领域代码是六边形架构风格最重要的论点。
- en: This is why this architecture style is such a good match for DDD practices.
    To state the obvious, in DDD, the domain drives the development, and we can best
    reason about the domain if we don’t have to think about persistence concerns and
    other technical aspects simultaneously.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么这种架构风格与DDD实践如此匹配。显而易见的是，在DDD中，领域驱动开发，如果我们不必同时考虑持久性关注和其他技术方面，我们就能最好地推理领域。
- en: I would even go so far as to say that *domain-centric architecture styles such
    as the hexagonal style are enablers of DDD*. Without an architecture that puts
    the domain at the center of things, and without inverting dependencies toward
    domain code, we have no chance of really doing DDD. The design will always be
    driven by other factors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至可以说，像六边形架构这样的**以领域为中心的架构风格**是领域驱动设计（DDD）的推动者。如果没有一个将领域置于事物中心的架构，并且没有将依赖反转到领域代码，我们就没有真正实施DDD的机会。设计将始终由其他因素驱动。
- en: 'So, as a first indicator of whether to use the architecture style presented
    in this book or not: *if the domain code is not the most important thing in your
    application, you probably don’t need this* *architecture style*.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，作为是否使用本书中介绍的架构风格的第一指标：**如果你的应用程序中领域代码不是最重要的事情，你可能不需要这种架构风格**。
- en: Trust your experience
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信任你的经验
- en: We’re creatures of habit. Habits automate decisions for us, so we don’t have
    to spend time on them. If there’s a lion running toward us, we run. If we build
    a new web application, we use the layered architecture style. We have done it
    so often in the past that it has become a habit.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是习惯的产物。习惯为我们自动化决策，所以我们不必在这些事情上浪费时间。如果有一只狮子朝我们跑来，我们就跑。如果我们构建一个新的Web应用程序，我们就使用分层架构风格。我们过去经常这样做，以至于它已经变成了一种习惯。
- en: I’m not saying that habitual decisions are necessarily bad decisions. Habits
    are just as good at helping to make a good decision as they are at helping to
    make a bad one. I’m saying that we’re doing what we’re experienced in. We’re comfortable
    with what we’ve done in the past, so why should we change anything?
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说习惯性的决策一定是错误的决策。习惯在帮助做出好决策方面和帮助做出坏决策方面一样有效。我的意思是，我们在做我们熟悉的事情。我们对过去所做的事情感到舒适，那么我们为什么要改变任何事情呢？
- en: Therefore, the only way to make an educated decision about an architecture style
    is by having experience in different architecture styles. If you’re unsure about
    the Hexagonal Architecture style, try it out on a small module of the application
    that you’re currently building. Get used to the concepts. Get comfortable. Apply
    the ideas in this book, modify them, and add your own ideas to develop a style
    that you’re comfortable with.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，唯一能够就架构风格做出明智决策的方法是拥有不同架构风格的经验。如果你对六边形架构风格不确定，可以在你目前正在构建的应用程序的一个小模块上尝试它。熟悉这些概念。感到舒适。应用这本书中的想法，修改它们，并加入你自己的想法，发展出你感到舒适的风格。
- en: This experience can then guide your next architecture decision.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这种经验可以指导你下一个架构决策。
- en: It depends
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 取决于
- en: I would love to provide a list of multiple-choice questions to decide on an
    architecture style, just like all those “*Which personality type are you?*” and
    “*If you were a dog, what kind of dog would you be?*” tests that regularly swirl
    around on social media.[1](#footnote-048)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我很乐意提供一个多项选择题列表来决定架构风格，就像所有那些“*你是哪种性格类型？*”和“*如果你是狗，你是什么品种的狗？*”这样的测试，这些测试经常在社交媒体上出现。[1](#footnote-048)
- en: '[1](#footnote-048-backlink) In case you wanted to know, I’m the “Defender”
    personality type, and if I were a dog, I would apparently be a pitbull.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[1](#footnote-048-backlink) 如果你想知道，我是“捍卫者”性格类型，而且如果我是狗，我显然会是一只比特犬。'
- en: However, it isn’t as easy as that. My answer to the question of which architecture
    style to choose remains the professional consultant’s – “*It depends.*” It depends
    on the type of software to be built. It depends on the role of the domain code.
    It depends on the experience of the team. And finally, it depends on being comfortable
    with a decision.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，事情并没有那么简单。我对选择哪种架构风格的问题的回答仍然是专业顾问的——“*视情况而定*”。这取决于要构建的软件类型。这取决于领域代码的角色。这取决于团队的经验。最后，这取决于对做出决定的舒适度。
- en: I hope, however, that this book has provided some sparks of inspiration to help
    with the question of architecture. If you have a story to tell about architecture
    decisions, with or without Hexagonal Architecture, I’d love to hear about it.[2](#footnote-047)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我希望这本书能提供一些灵感的火花，帮助您解决架构问题。如果您有关于架构决策的故事要分享，无论是使用还是不使用六边形架构，我都非常愿意倾听。[2](#footnote-047)
- en: '[2](#footnote-047-backlink) Contact: you can drop me an email at [tom@reflectoring.io](B19916_15.xhtml).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[2](#footnote-047-backlink) 联系方式：您可以通过 [tom@reflectoring.io](B19916_15.xhtml)
    发送邮件给我。'
