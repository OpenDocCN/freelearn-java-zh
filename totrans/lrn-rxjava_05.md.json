["```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Integer> threeIntegers  = Observable.range(1, 3);\n\n        threeIntegers.subscribe(i -> System.out.println(\"Observer One: \" + i));\n        threeIntegers.subscribe(i -> System.out.println(\"Observer Two: \" + i));\n    }\n}\n```", "```java\nObserver One: 1\nObserver One: 2\nObserver One: 3\nObserver Two: 1\nObserver Two: 2\nObserver Two: 3\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.ConnectableObservable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        ConnectableObservable<Integer> threeIntegers =\n                Observable.range(1, 3).publish();\n\n        threeIntegers.subscribe(i -> System.out.println(\"Observer One: \" + i));\n        threeIntegers.subscribe(i -> System.out.println(\"Observer Two: \" + i));\n\n        threeIntegers.connect();\n    }\n}\n\n```", "```java\nObserver One: 1\nObserver Two: 1\nObserver One: 2\nObserver Two: 2\nObserver One: 3\nObserver Two: 3\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Integer> threeRandoms = Observable.range(1,3)\n                        .map(i -> randomInt());\n\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n```", "```java\nObserver 1: 38895\nObserver 1: 36858\nObserver 1: 82955\nObserver 2: 55957\nObserver 2: 47394\nObserver 2: 16996\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.ConnectableObservable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        ConnectableObservable<Integer> threeInts = Observable.range(1,3).publish();\n\n        Observable<Integer> threeRandoms = threeInts.map(i -> randomInt());\n\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        threeInts.connect();\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n\n```", "```java\nObserver 1: 99350\nObserver 2: 96343\nObserver 1: 4155\nObserver 2: 75273\nObserver 1: 14280\nObserver 2: 97638\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.ConnectableObservable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        ConnectableObservable<Integer> threeRandoms = Observable.range(1,3)\n                .map(i -> randomInt()).publish();\n\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        threeRandoms.connect();\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n\n```", "```java\nObserver 1: 90125\nObserver 2: 90125\nObserver 1: 79156\nObserver 2: 79156\nObserver 1: 76782\nObserver 2: 76782\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.observables.ConnectableObservable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        ConnectableObservable<Integer> threeRandoms = Observable.range(1,3)\n                .map(i -> randomInt()).publish();\n\n        //Observer 1 - print each random integer\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        //Observer 2 - sum the random integers, then print\n        threeRandoms.reduce(0, (total,next) -> total + next)\n                .subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        threeRandoms.connect();\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n```", "```java\nObserver 1: 40021\nObserver 1: 78962\nObserver 1: 46146\nObserver 2: 165129\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Integer> threeRandoms = Observable.range(1,3)\n                .map(i -> randomInt())\n                .publish()\n                .autoConnect(2);\n\n        //Observer 1 - print each random integer\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        //Observer 2 - sum the random integers, then print\n        threeRandoms.reduce(0, (total,next) -> total + next)\n                .subscribe(i -> System.out.println(\"Observer 2: \" + i));\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n```", "```java\nObserver 1: 83428\nObserver 1: 77336\nObserver 1: 64970\nObserver 2: 225734\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Integer> threeRandoms = Observable.range(1,3)\n                .map(i -> randomInt()).publish().autoConnect(2);\n\n        //Observer 1 - print each random integer\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        //Observer 2 - sum the random integers, then print\n        threeRandoms.reduce(0, (total,next) -> total + next)\n                .subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        //Observer 3 - receives nothing\n        threeRandoms.subscribe(i -> System.out.println(\"Observer 3: \" + i);\n    }\n\n    public static int randomInt() {\n        return ThreadLocalRandom.current().nextInt(100000);\n    }\n}\n```", "```java\nObserver 1: 8198\nObserver 1: 31718\nObserver 1: 97915\nObserver 2: 137831\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> seconds =\n                Observable.interval(1, TimeUnit.SECONDS)\n                        .publish()\n                        .autoConnect();\n\n        //Observer 1\n        seconds.subscribe(i -> System.out.println(\"Observer 1: \" + i));\n\n        sleep(3000);\n\n        //Observer 2\n        seconds.subscribe(i -> System.out.println(\"Observer 2: \" + i));\n\n        sleep(3000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nObserver 1: 0\nObserver 1: 1\nObserver 1: 2\nObserver 1: 3\nObserver 2: 3\nObserver 1: 4\nObserver 2: 4\nObserver 1: 5\nObserver 2: 5\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> seconds =\n                Observable.interval(1, TimeUnit.SECONDS)\n                        .publish()\n                        .refCount();\n\n        //Observer 1\n        seconds.take(5)\n                .subscribe(l -> System.out.println(\"Observer 1: \" + l));\n\n        sleep(3000);\n\n        //Observer 2\n        seconds.take(2)\n                .subscribe(l -> System.out.println(\"Observer 2: \" + l));\n\n        sleep(3000);\n        //there should be no more Observers at this point\n\n        //Observer 3\n        seconds.subscribe(l -> System.out.println(\"Observer 3: \" + l));\n\n        sleep(3000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nObserver 1: 0\nObserver 1: 1\nObserver 1: 2\nObserver 1: 3\nObserver 2: 3\nObserver 1: 4\nObserver 2: 4\nObserver 3: 0\nObserver 3: 1\nObserver 3: 2\n```", "```java\nObservable<Long> seconds =\n        Observable.interval(1, TimeUnit.SECONDS).share();\n\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> seconds =\n                Observable.interval(1, TimeUnit.SECONDS)\n                    .replay()\n                    .autoConnect();\n\n        //Observer 1\n        seconds.subscribe(l -> System.out.println(\"Observer 1: \" + l));\n\n        sleep(3000);\n\n        //Observer 2\n        seconds.subscribe(l -> System.out.println(\"Observer 2: \" + l));\n\n        sleep(3000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nObserver 1: 0\nObserver 1: 1\nObserver 1: 2\nObserver 2: 0\nObserver 2: 1\nObserver 2: 2\nObserver 1: 3\nObserver 2: 3\nObserver 1: 4\nObserver 2: 4\nObserver 1: 5\nObserver 2: 5\n```", "```java\nObserver 1: 0\nObserver 1: 1\nObserver 1: 2\nObserver 2: 1\nObserver 2: 2\nObserver 1: 3\nObserver 2: 3\nObserver 1: 4\nObserver 2: 4\nObserver 1: 5\nObserver 2: 5\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \n\"Delta\", \"Epsilon\")\n                    .replay(1)\n                    .autoConnect();\n\n        //Observer 1\n        source.subscribe(l -> System.out.println(\"Observer 1: \" + l));\n\n        //Observer 2\n        source.subscribe(l -> System.out.println(\"Observer 2: \" + l));\n    }\n}\n```", "```java\nObserver 1: Alpha\nObserver 1: Beta\nObserver 1: Gamma\nObserver 1: Delta\nObserver 1: Epsilon\nObserver 2: Epsilon\n```", "```java\nObservable<String> source =\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n            .replay(1)\n            .refCount();\n```", "```java\nObserver 1: Alpha\nObserver 1: Beta\nObserver 1: Gamma\nObserver 1: Delta\nObserver 1: Epsilon\nObserver 2: Alpha\nObserver 2: Beta\nObserver 2: Gamma\nObserver 2: Delta\nObserver 2: Epsilon\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Long> seconds =\n                Observable.interval(300, TimeUnit.MILLISECONDS)\n                        .map(l -> (l + 1) * 300) // map to elapsed milliseconds\n                        .replay(1, TimeUnit.SECONDS)\n                        .autoConnect();\n\n        //Observer 1\n        seconds.subscribe(l -> System.out.println(\"Observer 1: \" + l));\n\n        sleep(2000);\n\n        //Observer 2\n        seconds.subscribe(l -> System.out.println(\"Observer 2: \" + l));\n\n        sleep(1000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nObserver 1: 300\nObserver 1: 600\nObserver 1: 900\nObserver 1: 1200\nObserver 1: 1500\nObserver 1: 1800\nObserver 2: 1500\nObserver 2: 1800\nObserver 1: 2100\nObserver 2: 2100\nObserver 1: 2400\nObserver 2: 2400\nObserver 1: 2700\nObserver 2: 2700\nObserver 1: 3000\nObserver 2: 3000\n```", "```java\nObservable<Long> seconds =\n        Observable.interval(300, TimeUnit.MILLISECONDS)\n                .map(l -> (l + 1) * 300) // map to elapsed milliseconds\n                .replay(1, 1, TimeUnit.SECONDS)\n                .autoConnect();\n\n```", "```java\nObserver 1: 300\nObserver 1: 600\nObserver 1: 900\nObserver 1: 1200\nObserver 1: 1500\nObserver 1: 1800\nObserver 2: 1800\nObserver 1: 2100\nObserver 2: 2100\nObserver 1: 2400\nObserver 2: 2400\nObserver 1: 2700\nObserver 2: 2700\nObserver 1: 3000\nObserver 2: 3000\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<Integer> cachedRollingTotals =\n                Observable.just(6, 2, 5, 7, 1, 4, 9, 8, 3)\n                    .scan(0, (total,next) -> total + next)\n                    .cache();\n\n        cachedRollingTotals.subscribe(System.out::println);\n    }\n}\n```", "```java\nObservable<Integer> cachedRollingTotals =\n        Observable.just(6, 2, 5, 7, 1, 4, 9, 8, 3)\n            .scan(0, (total,next) -> total + next)\n            .cacheWithInitialCapacity(9);\n```", "```java\nimport io.reactivex.subjects.PublishSubject;\nimport io.reactivex.subjects.Subject;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject = PublishSubject.create();\n\n        subject.map(String::length)\n                .subscribe(System.out::println);\n\n        subject.onNext(\"Alpha\");\n        subject.onNext(\"Beta\");\n        subject.onNext(\"Gamma\");\n        subject.onComplete();\n    }\n}\n```", "```java\n5\n4\n5\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.subjects.PublishSubject;\nimport io.reactivex.subjects.Subject;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Observable<String> source1 =\n                Observable.interval(1, TimeUnit.SECONDS)\n                    .map(l -> (l + 1) + \" seconds\");\n\n        Observable<String> source2 =\n                Observable.interval(300, TimeUnit.MILLISECONDS)\n                    .map(l -> ((l + 1) * 300) + \" milliseconds\");\n\n        Subject<String> subject = PublishSubject.create();\n\n        subject.subscribe(System.out::println);\n\n        source1.subscribe(subject);\n        source2.subscribe(subject);\n\n        sleep(3000);\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\n300 milliseconds\n600 milliseconds\n900 milliseconds\n1 seconds\n1200 milliseconds\n1500 milliseconds\n1800 milliseconds\n2 seconds\n2100 milliseconds\n2400 milliseconds\n2700 milliseconds\n3 seconds\n3000 milliseconds\n```", "```java\nimport io.reactivex.subjects.PublishSubject;\nimport io.reactivex.subjects.Subject;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject = PublishSubject.create();\n\n        subject.onNext(\"Alpha\");\n        subject.onNext(\"Beta\");\n        subject.onNext(\"Gamma\");\n        subject.onComplete();\n\n        subject.map(String::length)\n                .subscribe(System.out::println);\n    }\n}\n```", "```java\nSubject<String> subject = \n        PublishSubject.<String>create().toSerialized();\n```", "```java\nimport io.reactivex.subjects.BehaviorSubject;\nimport io.reactivex.subjects.Subject;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject =\n                BehaviorSubject.create();\n\n        subject.subscribe(s -> System.out.println(\"Observer 1: \" + s));\n\n        subject.onNext(\"Alpha\");\n        subject.onNext(\"Beta\");\n        subject.onNext(\"Gamma\");\n\n        subject.subscribe(s -> System.out.println(\"Observer 2: \" + s));\n    }\n}\n```", "```java\nObserver 1: Alpha\nObserver 1: Beta\nObserver 1: Gamma\nObserver 2: Gamma\n```", "```java\nimport io.reactivex.subjects.ReplaySubject;\nimport io.reactivex.subjects.Subject;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject =\n                ReplaySubject.create();\n\n        subject.subscribe(s -> System.out.println(\"Observer 1: \" + s));\n\n        subject.onNext(\"Alpha\");\n        subject.onNext(\"Beta\");\n        subject.onNext(\"Gamma\");\n        subject.onComplete();\n\n        subject.subscribe(s -> System.out.println(\"Observer 2: \" + s));\n    }\n}\n```", "```java\nObserver 1: Alpha\nObserver 1: Beta\nObserver 1: Gamma\nObserver 2: Alpha\nObserver 2: Beta\nObserver 2: Gamma\n```", "```java\nimport io.reactivex.subjects.AsyncSubject;\nimport io.reactivex.subjects.Subject;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject =\n                AsyncSubject.create();\n\n        subject.subscribe(s ->\n        System.out.println(\"Observer 1: \" + s),\n                Throwable::printStackTrace,\n                () -> System.out.println(\"Observer 1 done!\")\n        );\n\n        subject.onNext(\"Alpha\");\n        subject.onNext(\"Beta\");\n        subject.onNext(\"Gamma\");\n        subject.onComplete();\n\n        subject.subscribe(s ->\n        System.out.println(\"Observer 2: \" + s),\n                Throwable::printStackTrace,\n                () -> System.out.println(\"Observer 2 done!\")\n        );\n    }\n}\n```", "```java\nObserver 1: Gamma\nObserver 1 done!\nObserver 2: Gamma\nObserver 2 done!\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.subjects.ReplaySubject;\nimport io.reactivex.subjects.Subject;\nimport io.reactivex.subjects.UnicastSubject;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject =\n                UnicastSubject.create();\n\n        Observable.interval(300, TimeUnit.MILLISECONDS)\n                .map(l -> ((l + 1) * 300) + \" milliseconds\")\n                .subscribe(subject);\n\n        sleep(2000);\n\n        subject.subscribe(s -> System.out.println(\"Observer 1: \" + s));\n\n        sleep(2000);\n\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nObserver 1: 300 milliseconds\nObserver 1: 600 milliseconds\nObserver 1: 900 milliseconds\nObserver 1: 1200 milliseconds\nObserver 1: 1500 milliseconds\nObserver 1: 1800 milliseconds\nObserver 1: 2100 milliseconds\nObserver 1: 2400 milliseconds\nObserver 1: 2700 milliseconds\nObserver 1: 3000 milliseconds\nObserver 1: 3300 milliseconds\nObserver 1: 3600 milliseconds\nObserver 1: 3900 milliseconds\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.subjects.Subject;\nimport io.reactivex.subjects.UnicastSubject;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n        Subject<String> subject =\n                UnicastSubject.create();\n\n        Observable.interval(300, TimeUnit.MILLISECONDS)\n                .map(l -> ((l + 1) * 300) + \" milliseconds\")\n                .subscribe(subject);\n\n        sleep(2000);\n\n        //multicast to support multiple Observers\n        Observable<String> multicast = subject.publish().autoConnect();\n\n        //bring in first Observer\n        multicast.subscribe(s -> System.out.println(\"Observer 1: \" + s));\n        sleep(2000);\n\n        //bring in second Observer\n        multicast.subscribe(s -> System.out.println(\"Observer 2: \" + s));\n        sleep(1000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nObserver 1: 300 milliseconds\nObserver 1: 600 milliseconds\nObserver 1: 900 milliseconds\nObserver 1: 1200 milliseconds\n...\nObserver 1: 3900 milliseconds\nObserver 1: 4200 milliseconds\nObserver 2: 4200 milliseconds\nObserver 1: 4500 milliseconds\nObserver 2: 4500 milliseconds\n```"]