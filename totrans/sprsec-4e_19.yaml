- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Build GraalVM Native Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is dedicated to honing skills concerning native images and `GraalVM`.
    Throughout this chapter, you’ll receive guidance on crafting a Spring Security
    application that makes use of native functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: '`Spring Boot 3` introduces native image generation support through `GraalVM`,
    and Spring Security seamlessly integrates with this capability, making its features
    compatible with native images. This integration can be a great way to improve
    the performance and security of your Spring Security applications.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll delve into the essential steps for efficiently updating build configurations
    to leverage `GraalVM` tools, enabling seamless integration of native capabilities
    into your applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, we will explore `GraalVM` Native Image support with Spring Security
    features that we have not covered so far in this book, including the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `GraalVM`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating `GraalVM` images using `Buildpacks`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a native image using Native Build Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling method security in `GraalVM` Native Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section is dedicated to offering guidance on specific `Spring
    Security` features that may necessitate additional hints to be supplied by the
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter’s code in action link is here: [https://packt.link/fQ5AM](https://packt.link/fQ5AM).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing GraalVM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**GraalVM** is a high-performance runtime that provides significant improvements
    in application performance and efficiency. **GraalVM** represents a high-performance
    runtime **Java Development** **Kit** (**JDK**).'
  prefs: []
  type: TYPE_NORMAL
- en: Besides supporting **just-in-time** (**JIT**) compilation, **GraalVM** also
    enables ahead-of-time compilation of Java applications. This feature facilitates
    quicker initialization, enhanced runtime performance, and reduced resource consumption.
    However, the resulting executable is limited to running on the platform for which
    it was compiled. **GraalVM** extends its functionality by offering additional
    programming languages and execution modes. The first production-ready version,
    **GraalVM** 19.0, was introduced in May 2019.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will delve deeper into the concept of native images
    to gain a better understanding.
  prefs: []
  type: TYPE_NORMAL
- en: What are native images?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Native images in **GraalVM** refer to executables compiled **Ahead Of Time**
    (**AOT**) from Java applications. Unlike traditional Java applications, which
    are typically compiled to bytecode and run on the **Java Virtual Machine** (**JVM**),
    native images are compiled directly into machine code for a specific platform.
  prefs: []
  type: TYPE_NORMAL
- en: '**GraalVM’s** native image leverages the **GraalVM** compiler to analyze and
    optimize the Java application’s code during compilation, resulting in a standalone
    native executable tailored for the target environment. These native images can
    be deployed independently without requiring a separate JVM installation, making
    them particularly useful for deploying lightweight, fast-starting applications
    in containerized environments or serverless platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: Key features of GraalVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**GraalVM** distinguishes itself from the base JDK through several key features:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Graal compiler**, serving as a JIT compiler.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GraalVM Native Image**, a technology facilitating ahead-of-time compilation
    of Java applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GraalVM` SDK, comprising a Java-based framework and a suite of APIs tailored
    for developing high-performance language runtimes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JavaScript`, `Ruby`, `Python`, and several other widely-used languages. With
    GraalVM’s polyglot capabilities, developers can seamlessly blend multiple programming
    languages within a single application without incurring additional overhead from
    foreign language calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ECMAScript 2023`-compliant JavaScript runtime, alongside Node.js.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LLVM` bitcode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security benefits of GraalVM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In terms of security, **GraalVM** offers some notable advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: It stops new, unfamiliar code from being loaded while the program is running.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It only incorporates paths that the application has proven reachable within
    its image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reflection is turned off by default and requires a specific inclusion list to
    enable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deserialization is allowed only for a predefined list of classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Issues related to the just-in-time compiler, such as crashes, incorrect compilations,
    or the possibility of creating machine code gadgets via techniques like **JIT
    spraying** (security exploit) are eliminated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After covering the key features and security benefits of **GraalVM**, we’ll
    proceed to explore practical examples of building **GraalVM** images. This will
    involve utilizing Buildpacks and applying them to our JBCP Calendar application.
  prefs: []
  type: TYPE_NORMAL
- en: GraalVM images using Buildpacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ensure Docker is installed by referring to the details in the Docker documentation
    ([https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)).
    If you are using Linux, configure Docker to permit non-root users.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: For macOS users, it is advisable to enhance the allocated Docker memory to a
    minimum of **8 GB** and consider adding more CPUs. On Microsoft Windows, ensure
    optimal performance by enabling the Docker WSL 2 backend ([https://docs.docker.com/desktop/wsl/](https://docs.docker.com/desktop/wsl/)).
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we will construct `Buildpacks` and `Gradle`, as well
    as crafting `Buildpacks` and `Maven`.
  prefs: []
  type: TYPE_NORMAL
- en: Building GraalVM images using Buildpacks and Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The AOT tasks are automatically configured by the `plugins` block with `org.graalvm.buildtools.native`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our sample application, we need to add the plugin declaration to the `build.gradle`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the `org.graalvm.buildtools.native` plugin is applied, the `bootBuildImage`
    task will produce a native image instead of a JVM one. Execute the task using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Building GraalVM images using Buildpacks and Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a native image container using `pom.xml` file adopts the `spring-boot-starter-parent`
    and includes the `org.graalvm.buildtools:native-maven-plugin`. Ensure that the
    `<parent>` section in your `pom.xml` resembles the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Additionally, you should include the following `native-maven-plugin` in the
    `<plugins>` section of your `pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `spring-boot-starter-parent` includes a `-P` flag on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter19.01-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Running GraalVM images from Buildpacks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After executing the relevant build command for **Maven** or **Gradle**, a Docker
    image should be accessible. Initiate your application by utilizing the docker
    run command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Your application should be reachable via `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: To gracefully shut down the application, press *Ctrl +* *C*.
  prefs: []
  type: TYPE_NORMAL
- en: Following the construction of `Buildpacks`, we will delve into a detailed exploration
    of building a Native Image using **Native** **Build Tools**.
  prefs: []
  type: TYPE_NORMAL
- en: Building a native image using Native Build Tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you prefer generating a native executable without relying on **Docker**,
    **GraalVM****Native Build Tools** come in handy. These tools are provided as plugins
    by **GraalVM** for both **Maven** and **Gradle**, offering a range of **GraalVM**
    tasks, including the generation of a native image.
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections, we will understand the process of building and running
    **GraalVM** images using **Native Build Tools** with either **Maven** or **Gradle**.
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To generate a native image with the **Native Build Tools**, ensure that you
    have a **GraalVM** distribution installed on your system.
  prefs: []
  type: TYPE_NORMAL
- en: For our examples, we will use `bellsoft-liberica-vm-openjdk17-23.0.3` that is
    available in the Liberica Native Image Kit Download Center ([https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17)](https://bell-sw.com/pages/downloads/native-image-kit/#nik-23-(jdk-17))).
  prefs: []
  type: TYPE_NORMAL
- en: Building GraalVM images using Native Build Tools and Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like with the buildpack support, it’s essential to ensure the usage of
    `spring-boot-starter-parent` to inherit the native profile. Additionally, make
    sure to incorporate the `org.graalvm.buildtools:native-maven-plugin` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Once the native profile is enabled, you can initiate the `native:compile` goal
    to commence the native-image compilation process.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can locate the executable of the native image in the `target` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Building GraalVM images using Native Build Tools and Gradle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our sample application, we need to add the **Native Build Tools** **Gradle
    plugin**.
  prefs: []
  type: TYPE_NORMAL
- en: When you incorporate the Native Build Tools Gradle plugin into your project,
    the Spring Boot Gradle plugin will promptly activate the Spring AOT engine. Task
    dependencies are prearranged, enabling you to simply execute the standard `nativeCompile`
    task for generating a native image.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: You can locate the native image executable within the directory named `build/native/nativeCompile`.
  prefs: []
  type: TYPE_NORMAL
- en: Running GraalVM images from Native Build Tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At this stage, your application should be functional. The startup time varies
    across different machines, but it is expected to be considerably faster than a
    Spring Boot application running on a JVM.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can run the application by executing it directly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: By navigating to `http://localhost:8080` in your web browser, you should have
    access to the **JBCP** **Calendar** application.
  prefs: []
  type: TYPE_NORMAL
- en: To gracefully shut down the application, press *Ctrl +* *C*.
  prefs: []
  type: TYPE_NORMAL
- en: Upon grasping the fundamental configurations for building **GraalVM** images,
    we will delve deeper into specific use cases associated with **Spring Security**
    native images.
  prefs: []
  type: TYPE_NORMAL
- en: Method Security in GraalVM Native Image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While **GraalVM** Native Image does support **Method Security**, certain use
    cases may require the application to supply additional hints for proper functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re employing custom implementations of `UserDetails` or authentication
    classes and using `@PreAuthorize` and `@PostAuthorize` annotations, you may need
    supplementary indications. Consider a scenario where you’ve crafted a custom implementation
    of the `UserDetails` class, which is returned by your `UserDetailsService`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a custom `UserDetails` implementation as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The provided implementation of `hasAdminRole()` is merely presented as an illustration
    of how method security can be managed with `GraalVM` native images. However, for
    production environments, it’s advisable to consider a safer implementation of
    `hasAdminRole()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to use `hasAdminRole()` method within a `@PreAuthorize` annotation
    in the `CalendarService` interface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that the `@EnableMethodSecurity` annotation is present in `SecurityConfig.java`
    to activate method security annotations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter19.02-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Sign in to the application with `admin1@example.com/admin1` and try accessing
    http://localhost:8080/events. You will notice all the events can be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.1 – All the events page](img/B21757_19_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.1 – All the events page
  prefs: []
  type: TYPE_NORMAL
- en: 'When you sign in to the application with `user1@example.com/user1` and try
    accessing http://localhost:8080/events, You will get the following access denied
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.2 – Access denied page for unauthorized user](img/B21757_19_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.2 – Access denied page for unauthorized user
  prefs: []
  type: TYPE_NORMAL
- en: 'If you execute your application’s native image with the provided configuration,
    attempting to invoke the `hasAdminRole()` method will result in an error resembling
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The error above indicates that the `hasAdminRole()` method cannot be located
    on the `CalendarUserDetails.class`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Spring Security relies on reflection to invoke the `hasAdminRole()` method,
    and `GraalVM` Native Image does not inherently support reflection.
  prefs: []
  type: TYPE_NORMAL
- en: 'To resolve this problem, you must follow the subsequent steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Provide hints to GraalVM Native Image to enable reflection on the `CalendarUserDetails#hasAdminRole()`
    method. This can be achieved by supplying a custom hint, as demonstrated in the
    following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now you can build the native image of your application, and it should function
    as intended.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter19.03-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delved into the support for **GraalVM** Native Image in
    conjunction with Spring Security features, which were not previously covered in
    this book. We introduced the concept of native images, including the key features
    and security benefits of **GraalVM**.
  prefs: []
  type: TYPE_NORMAL
- en: The key topics explored included `Spring Boot 3`, which introduces native image
    generation support via **GraalVM**, seamlessly integrating with Spring Security
    features and making them compatible with native images. We have seen that there
    are some cases where we need to provide hints to be used by **GraalVM**.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we’ve successfully improved our application’s performance and security,
    aligning with contemporary software development practices.
  prefs: []
  type: TYPE_NORMAL
- en: In concluding this chapter, I want to extend my heartfelt congratulations to
    you for reaching this milestone of completing the book. Your dedication and commitment
    to learning about `Spring Security 6` features are commendable.
  prefs: []
  type: TYPE_NORMAL
- en: As you reflect on the concepts covered, remember that every step you take toward
    mastering these technologies brings you closer to becoming an adept developer.
    Embrace the challenges ahead with confidence, knowing that each hurdle is an opportunity
    for growth. Keep exploring, keep experimenting, and never underestimate the power
    of continuous learning.
  prefs: []
  type: TYPE_NORMAL
- en: Wishing you continued success on your software development journey!
  prefs: []
  type: TYPE_NORMAL
- en: Appendix – Additional Reference Material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this [*Appendix*](B21757_20.xhtml#_idTextAnchor642), we will cover some reference
    material that we feel is helpful (and largely undocumented) but too comprehensive
    to insert in the chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'During this section, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using build tools (`Gradle` or `Maven`) and IDE (**IntelliJ IDEA** or **Eclipse**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with the JBCP calendar sample code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating a server certificate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional supporting resource
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section is designed to provide you with guidance for further depth and
    clarity on the provided code covered in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Build tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book’s code is executable via **Gradle** or **Maven**.
  prefs: []
  type: TYPE_NORMAL
- en: In subsequent sections, we’ll elaborate on executing projects utilizing either
    `Gradle` or `Maven` as the build tool. The code from the book operates independently
    of any **Integrated Development** **Environment** (**IDE**).
  prefs: []
  type: TYPE_NORMAL
- en: However, we’ll provide examples of implementations using **Eclipse** and **IntelliJ
    IDEA**.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we demonstrate the usage of build tools such as `Gradle`
    or `Maven`.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle build tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All the code in this book can be built using the `Gradle` locally at [https://gradle.org/install/](https://gradle.org/install/).
  prefs: []
  type: TYPE_NORMAL
- en: A local installation of `Gradle` is not required as the root of the source code
    already has the `Gradle` wrapper installed. The `Gradle` wrapper can be installed
    in any submodule. You can find additional information about the `Gradle` wrapper
    at [https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml](https://docs.gradle.org/current/userguide/gradle_wrapper.xhtml).
  prefs: []
  type: TYPE_NORMAL
- en: Maven build tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout the chapters ahead, you’ll find a wealth of code examples, practical
    tips, and hands-on exercises designed for those who are comfortable with **Maven**.
  prefs: []
  type: TYPE_NORMAL
- en: '`Maven` locally at [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [https://www.packtpub.com](https://www.packtpub.com). If
    you purchased this book from elsewhere, you could visit [https://www.packtpub.com/support](https://www.packtpub.com/support)
    and register to have the files emailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we’ll delve into initiating the JBCP calendar sample
    code with your preferred IDE such as **IntelliJ IDEA** or **Eclipse**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the JBCP calendar sample code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we described in [*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy
    of an Unsafe Application*, we have assumed that you have installed `Java 17` as
    a minimum. You can download a JDK from Oracle’s website ([https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/))
    or use any other OpenJDK version 17.
  prefs: []
  type: TYPE_NORMAL
- en: Upon the publication of this book, all the code has been validated with `Java
    21`, the most recent **Long-Term Support** (**LTS**) version.
  prefs: []
  type: TYPE_NORMAL
- en: The upcoming section discusses the structure of sample code and its utilization
    within your preferred IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Sample code structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sample code contains folders of a multimodule `Gradle` or `Maven` project.
    Each folder is named `ChapterNN`, where `NN` is the `chapter number`. Each `ChapterNN`
    folder has additional folders containing each milestone project with the format
    `chapterNN.mm-calendar`, where `NN` is the `chapter number` and `mm` is the `milestone`
    within that chapter.
  prefs: []
  type: TYPE_NORMAL
- en: For simplicity, we recommend that you extract the source to a path that does
    not contain any spaces. Each milestone is a checkpoint within the `chapter` and
    allows you to easily compare your code with the book’s code. For example, `chapter02.03-calendar`
    contains milestone number `03` within [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043),
    *Getting Started with Spring Security*, of the calendar application. The location
    of the preceding project would be `~/` `Spring-Security-Fourth-Edition/Chapter02/chapter02.03-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy of an Unsafe Application*,
    and [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043), *Getting Started with Spring
    Security*, have been created as `Spring projects`, not using `Spring Boot` as
    a project base.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B21757_03.xhtml#_idTextAnchor068), *Custom Authentication*, converted
    the calendar project to a `Spring` `Boot codebase`.'
  prefs: []
  type: TYPE_NORMAL
- en: To keep each chapter as independent as possible, most chapters in the book are
    built on [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295), *Opening up to OAuth2*,
    or [*Chapter 15*](B21757_15.xhtml#_idTextAnchor479), *Additional Spring Security
    Features*. This means that, in most cases, you can read through [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295),
    *Opening up to OAuth2*, and then skip around to the other parts of the book. However,
    this also means that it is important to start each chapter with the chapter’s
    `milestone 00` source code rather than continuing to work on the code from the
    previous chapter. This ensures that your code starts in the same place that the
    chapter does.
  prefs: []
  type: TYPE_NORMAL
- en: While you can get through the entire book without performing any of the steps,
    we recommend starting each chapter with `milestone 00` and implementing the steps
    in the book. This will ensure that you get the most out of the book. You can use
    the milestone versions to copy large portions of code or to compare your code
    if you run into problems.
  prefs: []
  type: TYPE_NORMAL
- en: Using the samples in IntelliJ IDEA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few things that are necessary to run the sample applications within
    `Tomcat` plugin has been configured with `Gradle` or `Maven` to run the embedded
    instance to help you get started faster.
  prefs: []
  type: TYPE_NORMAL
- en: Importing projects in IntelliJ IDEA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Most of the diagrams used in this book were taken from `Gradle` or `Maven` projects.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA will allow you to import an existing project, or you can simply
    open `build.gradle` or `pom.xml` from the root of the source code base and IDEA
    will create the necessary project files for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you open IntelliJ IDEA, you can open the entire project using the **Open**
    option, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 1 – JBCP calendar samples import](img/B21757_20_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 1 – JBCP calendar samples import
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you will be prompted to select various options for how IntelliJ IDEA
    will execute this project, either **Gradle** or **Maven**, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 2 – Gradle or Maven option](img/B21757_20_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 2 – Gradle or Maven option
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we choose **Gradle**, for example, you will be able to work with any of
    the chapters, and the layout will look as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 3 – Chapter presentation layout with IDEA](img/B21757_20_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 3 – Chapter presentation layout with IDEA
  prefs: []
  type: TYPE_NORMAL
- en: After importing the project in **IntelliJ IDEA**, you can run your code following
    the guidance provided in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running the samples within IntelliJ IDEA
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running milestone projects can be done by creating a **Run/Debug Configuration**
    entry for each project.
  prefs: []
  type: TYPE_NORMAL
- en: For each `spring-boot` project (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), you can simply click the green play button in the toolbar,
    or right-click on the main class and choose **Run CalendarApplication**. IntelliJ
    IDEA will start the Spring Boot application, and you will see the logs in the
    **Run** tool window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 4 – Running the Spring Boot project with IntelliJ IDEA](img/B21757_20_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 4 – Running the Spring Boot project with IntelliJ IDEA
  prefs: []
  type: TYPE_NORMAL
- en: 'For other projects, you can use the terminal or if using IntelliJ IDEA, go
    to **File** | **Run** and select **Edit Configurations...**, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 5 – Custom applications, Run with IntelliJ IDEA](img/B21757_20_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 5 – Custom applications, Run with IntelliJ IDEA
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be presented with options to add new configurations. Select the plus
    (**+**) sign in the upper-left corner to choose a new **Gradle** configuration,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 6 – Custom applications, Add New Configuration with IntelliJ
    IDEA](img/B21757_20_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 6 – Custom applications, Add New Configuration with IntelliJ
    IDEA
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can give it a name such as `chapter01.00 (bootRun)` and select the
    actual milestone directory for this configuration. Finally, enter `tomcatRun`
    under the **Run** option to execute, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 7 – Custom project, Run with IntelliJ IDEA](img/B21757_20_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 7 – Custom project, Run with IntelliJ IDEA
  prefs: []
  type: TYPE_NORMAL
- en: Select the configuration you want to execute; click on the green **Run** button
    (as shown in [*Appendix*](B21757_20.xhtml#_idTextAnchor642)*figure 7*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will cover the usage of **Eclipse** to run the sample
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the samples in Eclipse
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will cover the sample applications usage within Eclipse.
    Across all projects, a `Tomcat` plugin has been set up using `Gradle` or `Maven`
    to facilitate the rapid initiation of an embedded instance, expediting your initial
    setup process.
  prefs: []
  type: TYPE_NORMAL
- en: Importing projects in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After you download and install your Eclipse IDE ([https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/)),
    launch Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you first open Eclipse, it will prompt you for the workspace location.
    You may need to go to **File** | **Switch Workspace** | **Other** to create a
    new workspace. We recommend entering a workspace location that does not contain
    any spaces. For example, look at the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 8 – Eclipse workspace choice](img/B21757_20_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 8 – Eclipse workspace choice
  prefs: []
  type: TYPE_NORMAL
- en: Once you have created a new workspace, choose **Import Projects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, we will choose **Existing** **Maven Projects**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 9 – Eclipse project import as Maven project](img/B21757_20_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 9 – Eclipse project import as Maven project
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the location you exported the code to and select the parent folder
    of the code. You will see all the projects listed. You can select the projects
    you are interested in or leave all the projects selected. If you decide to import
    all the projects, you can easily focus on the current chapter since the naming
    conventions will ensure that the projects are sorted in the order that they are
    presented in the book:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 10 – Eclipse Maven project import confirmation](img/B21757_20_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 10 – Eclipse Maven project import confirmation
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be able to work with any of the chapters, and the layout will look
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 11 – Chapters presentation layout with Eclipse](img/B21757_20_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 11 – Chapters presentation layout with Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: After importing the project in **Eclipse**, you can run your code following
    the guidance provided in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running the samples within Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To execute each milestone project, you can proceed with the subsequent steps:'
  prefs: []
  type: TYPE_NORMAL
- en: For each spring-boot project (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), you can simply click on the **Run** button in Eclipse,
    or right-click on your project and select **Run As** | **Java Application**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 12 – Running the Spring Boot project with Eclipse](img/B21757_20_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 12 – Running the Spring Boot project with Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: 'For other projects, you can use the terminal, go to the **Run** button using
    **Eclipse**, or right-click on your project and select **Run Configurations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Appendix figure 13 – Custom applications, Run with Eclipse](img/B21757_20_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Appendix figure 13 – Custom applications, Run with Eclipse
  prefs: []
  type: TYPE_NORMAL
- en: In the `package cargo:run`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Starting the samples from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B21757_01.xhtml#_idTextAnchor015), *Anatomy of an Unsafe Application*,
    and [*Chapter 2*](B21757_02.xhtml#_idTextAnchor043), *Getting Started with Spring
    Security*, you will use different tasks to run the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using `Gradle`, run the following command to start the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ./mvnw package cargo:run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For the rest of the chapters in the book (starting from [*Chapter 3*](B21757_03.xhtml#_idTextAnchor068)*,
    Custom Authentication*), Spring Boot has been used:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re using `Gradle`, run the following command to start the application:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ./mvnw spring-boot:run
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In general, for every section of the book, there’s a `README.md` file in the
    root directory of each chapter milestone. This file includes the necessary commands
    to launch the application, tailored to your preferred build tool.
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we’ll address the generation of a server certificate.
  prefs: []
  type: TYPE_NORMAL
- en: Generating a server certificate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some of the chapters sample code (that is, [*Chapter 8*](B21757_08.xhtml#_idTextAnchor261),
    *Client Certificate Authentication with TLS*, [*Chapter 9*](B21757_09.xhtml#_idTextAnchor295),
    *Opening up to OAuth2*, [*Chapter 10*](B21757_10.xhtml#_idTextAnchor314), *SAML
    2 Support*, and [*Chapter 18*](B21757_18.xhtml#_idTextAnchor591), *Single Sign-On
    with the Central Authentication Service*) requires the use of HTTPS in order for
    the sample code to work.
  prefs: []
  type: TYPE_NORMAL
- en: Some projects have been configured to run `HTTPS`; most of the configuration
    is managed in properties or `YAML` files.
  prefs: []
  type: TYPE_NORMAL
- en: Now, when you run the sample code on the embedded Tomcat server from `Maven`
    or `Gradle`, you can connect to `http://localhost:8080` or `https://localhost:8443`.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not already have a certificate, you must first generate one.
  prefs: []
  type: TYPE_NORMAL
- en: If you wish, you can skip this step and use the `tomcat.keystore` file, which
    contains a certificate that is located in the `src/main/resources/keys` directory
    in the book’s sample source.
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the following command lines at the command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Most of the values are self-explanatory, but you will want to ensure that the
    answer to **What is your first and last name?** is the host that you will be accessing
    your web application from. This is necessary to ensure that the SSL handshake
    will succeed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should now have a file in the current directory named `tomcat.keystore`.
    You can view its contents using the following command from within the same directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: As you may have guessed, it is insecure to use `changeit` as a password, as
    this is the default password used with many JDK implementations. In a production
    environment, you should use a secure password rather than something as simple
    as `changeit`.
  prefs: []
  type: TYPE_NORMAL
- en: For additional information about the `keytool` command, refer to the documentation
    found on Oracle’s website ([https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml](https://docs.oracle.com/en/java/javase/17/docs/specs/man/keytool.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: If you are having issues, you might also find the *CAS SSL Troubleshooting and
    Reference Guide* helpful ([https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml](https://apereo.github.io/cas/7.0.x/installation/Troubleshooting-Guide.xhtml)).
  prefs: []
  type: TYPE_NORMAL
- en: Supplementary materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section contains a listing of additional resources to technologies and
    concepts that are used throughout the book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java Development Kit Downloads**: Refer to [https://www.oracle.com/java/technologies/downloads/](https://www.oracle.com/java/technologies/downloads/)
    for downloading the JDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MVC Architecture**: Refer to [https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller](https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Security site**: Refer to [https://spring.io/projects/spring-security](https://spring.io/projects/spring-security).
    You can find links to the Spring Security Javadoc, downloads, source code, and
    reference at this link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Framework**: Refer to [https://projects.spring.io/spring-framework/](https://projects.spring.io/spring-framework/).
    You can find links to the Spring Framework Javadoc, downloads, source code, and
    reference from this link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Boot**: Refer to [https://projects.spring.io/spring-boot/](https://projects.spring.io/spring-boot/).
    You can find links to the Spring Boot Javadoc, downloads, source code, and reference
    from this link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring Data**: Refer to [https://projects.spring.io/spring-data/](https://projects.spring.io/spring-data/).
    You can find links to the Spring Data Javadoc, downloads, source code, and reference
    from this link. In this book, we covered three of the sub-projects of Spring Data,
    including Spring Data JPA ([https://projects.spring.io/spring-data-jpa/](https://projects.spring.io/spring-data-jpa/))
    and Spring Data MongoDB ([https://projects.spring.io/spring-data-mongodb/](https://projects.spring.io/spring-data-mongodb/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven**: For more information about Maven, visit their site at [https://maven.apache.org](https://maven.apache.org).
    For more information about Maven transitive dependencies, refer to the *Introduction
    to the Dependency Mechanism* documentation at [https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies](https://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.xhtml#Transitive_Dependencies).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gradle` ([https://gradle.org](https://gradle.org)) instead of using `Maven`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object-relational mapping (ORM)**: You can find more general information
    on Wikipedia at [https://en.wikipedia.org/wiki/Object-relational_mapping](https://en.wikipedia.org/wiki/Object-relational_mapping).
    If you want more hands-on instruction, you may also be interested in the Hibernate
    (a common Java ORM framework) documentation at [https://hibernate.org/](https://hibernate.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are UI technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**JSP**: You can find more information about JSP on Oracle’s site at [https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml](https://www.oracle.com/technical-resources/articles/javase/servlets-jsp.xhtml).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Thymeleaf**: This is a modern, tempting framework that provides an excellent
    alternative to JSP. An additional benefit is that it provides support for both
    Spring and Spring Security out of the box. You can find more information about
    Thymeleaf at [https://www.thymeleaf.org/](https://www.thymeleaf.org/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
