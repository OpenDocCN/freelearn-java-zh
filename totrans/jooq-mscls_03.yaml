- en: '*Chapter 2*: Customizing the jOOQ Level of Involvement'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：自定义 jOOQ 参与级别'
- en: In the previous chapter, we introduced jOOQ in a Spring Boot application and
    used it for generating and executing a valid non-type-safe SQL statement. In this
    chapter, we will continue this journey and increase the jOOQ level of involvement
    via an astonishing feature – the so-called jOOQ *Code Generator*. In other words,
    jOOQ will be in control of the persistence layer via a straightforward flow that
    begins with type-safe queries, continues by generating **Plain Old Java Objects**
    (**POJOs**) used to map the query results as objects, and ends with generating
    DAOs used to shortcut the most common queries in object-oriented style.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了在 Spring Boot 应用程序中使用 jOOQ 并用它来生成和执行一个有效的非类型安全的 SQL 语句。在本章中，我们将继续这一旅程，并通过一个惊人的特性——所谓的
    jOOQ *代码生成器*来提高 jOOQ 的参与级别。换句话说，jOOQ 将通过一个简单的流程来控制持久层，该流程从类型安全的查询开始，通过生成用于将查询结果映射为对象的
    **Plain Old Java Objects**（**POJOs**）继续，并以生成用于在面向对象风格中简化最常见查询的 DAOs 结束。
- en: By the end of this chapter, you'll know how to write type-safe queries, and
    how to instruct jOOQ to generate POJOs and DAOs that have custom names in Java
    and Kotlin applications, using Maven and Gradle. We will cover these topics declaratively
    (for instance, in XML files) and programmatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解如何编写类型安全的查询，以及如何指导 jOOQ 在 Java 和 Kotlin 应用程序中生成具有自定义名称的 POJOs 和 DAOs，使用
    Maven 和 Gradle。我们将声明性地（例如，在 XML 文件中）和程序性地涵盖这些主题。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding what type-safe queries are
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解什么是类型安全的查询
- en: Generating a jOOQ Java-based schema
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成基于 jOOQ 的 Java 架构
- en: Writing queries using a Java-based schema
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于 Java 的架构编写查询
- en: Configuring jOOQ to generate POJOs
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 jOOQ 以生成 POJOs
- en: Configuring jOOQ to generate DAOs
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 jOOQ 以生成 DAOs
- en: Configuring jOOQ to generate interfaces
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 jOOQ 以生成接口
- en: Tackling programmatic configuration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理程序配置
- en: Introducing jOOQ settings
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 jOOQ 设置
- en: Let's start with a brief discussion about type-safe queries.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从对类型安全查询的简要讨论开始。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code files used in this chapter can be found on GitHub:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter02](https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter02)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter02](https://github.com/PacktPublishing/jOOQ-Masterclass/tree/master/Chapter02)'
- en: Understanding what type-safe queries are
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解什么是类型安全的查询
- en: Generally speaking, what actually is a type-safe API? In short, an API is type-safe
    if it relies on the type system of a programming language aiming to prevent and
    report type errors. Specifically, jOOQ enables the compiler to do that via the
    Code Generator features.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一般而言，实际上什么是类型安全的 API？简而言之，如果一个 API 依赖于编程语言的类型系统，旨在防止和报告类型错误，那么它就是类型安全的。具体来说，jOOQ
    通过代码生成器功能使编译器能够做到这一点。
- en: Working with type-safe SQL is preferable because there is no need to validate
    every SQL statement via dedicated tests, and it is faster to fix things during
    coding than while running the application. For example, you can significantly
    reduce the number of unit tests dedicated to SQL validation and focus on integration
    tests, which is always a good thing. So, SQL type safety really matters!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型安全的 SQL 是首选，因为不需要通过专门的测试来验证每个 SQL 语句，而且在编码期间修复问题比在应用程序运行时修复要快。例如，你可以显著减少专门用于
    SQL 验证的单元测试数量，并专注于集成测试，这始终是一件好事。因此，SQL 类型安全确实很重要！
- en: Declaring SQL statements as Java `String` statements (for example, in JPQL style,
    which is verified at execution time) doesn't take advantage of type safety. In
    other words, the compiler cannot guarantee that a SQL statement is valid. This
    happens in each of the following examples that use different choices for the persistence
    layer. All these examples compile but fail at runtime.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将 SQL 语句声明为 Java `String` 语句（例如，在 JPQL 风格中，它在执行时得到验证）没有利用类型安全。换句话说，编译器不能保证 SQL
    语句的有效性。以下每个使用不同持久层选择的例子都会发生这种情况。所有这些例子都可以编译，但在运行时失败。
- en: 'Let''s see a `JdbcTemplate` non-type-safe SQL example (with the wrong order
    of binding values):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个 `JdbcTemplate` 非类型安全的 SQL 示例（绑定值的顺序错误）：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, we have a Spring Data example (`name` should be `String`, not `int`):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个 Spring Data 示例（`name` 应该是 `String`，而不是 `int`）：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here is a Spring Data derived query method example (`name` should be `String`,
    not `int`):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 Spring Data 派生的查询方法示例（`name` 应该是 `String`，而不是 `int`）：
- en: '[PRE9]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following is a jOOQ query builder without the Code Generator example (instead
    of `v`, it should be `v.getOwnerName()`):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个没有代码生成器的jOOQ查询构建器示例（`v`应该替换为`v.getOwnerName()`）：
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here''s another jOOQ query builder without the Code Generator example (in our
    schema, there is no `OFFICES` table and no `CAPACITY` column):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一个没有代码生成器的jOOQ查询构建器示例（在我们的模式中，没有`OFFICES`表和`CAPACITY`列）：
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These are just some simple cases that are easy to spot and fix. Imagine a non-type-safe
    complex query with a significant number of bindings.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些简单的情况，容易发现和修复。想象一下一个非类型安全的复杂查询，其中包含大量的绑定。
- en: 'But, if the jOOQ Code Generator is enabled, then jOOQ will compile the SQL
    statements against an actual Java-based schema that mirrors a database. This way,
    jOOQ ensures *at least* the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果启用jOOQ代码生成器，那么jOOQ将针对一个实际基于Java的模式编译SQL语句，该模式反映了数据库。这样，jOOQ确保至少以下内容：
- en: The classes and fields that occur in SQL exist, have the expected type, and
    are mapped to a database.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL中出现的类和字段存在，具有预期的类型，并且映射到数据库。
- en: There are no type mismatches between the operators and operands.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作符和操作数之间没有类型不匹配。
- en: The generated query is syntactically valid.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的查询在语法上是有效的。
- en: Important Note
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'I said *at least* because, besides type safety, jOOQ takes care of many other
    aspects, such as quotations, qualification, and case sensitivity of identifiers.
    These aspects are not easy to handle across SQL dialects, and thanks to the Code
    Generator feature, jOOQ makes the right choices for us upfront almost everywhere.
    As Lukas Eder said: *"Using jOOQ with the Code Generator is just a little additional
    setup, but it will help jOOQ to make the right, carefully chosen default choices
    for so many silly edge cases that are so annoying to handle later on. I can''t
    recommend it enough! :)"*'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我说“至少”是因为，除了类型安全之外，jOOQ还关注许多其他方面，例如引号、限定符和标识符的大小写敏感性。这些方面在SQL方言之间处理起来并不容易，多亏了代码生成器功能，jOOQ几乎在所有地方都为我们预先做出了正确的选择。正如Lukas
    Eder所说：“使用带有代码生成器的jOOQ只是稍微多一点的设置，但它将帮助jOOQ为许多愚蠢的边缘情况做出正确的、经过仔细选择的默认选择，这些边缘情况在以后处理起来非常令人烦恼。我强烈推荐！
    :)”
- en: 'Back to type safety, let''s assume that the jOOQ Code Generator has produced
    the needed artifacts (a suite of classes that mirrors the database tables, columns,
    routines, views, and so on). In this context, the previous jOOQ examples can be
    rewritten in a type-safe manner, as follows. Note that none of the following snippets
    will compile:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 回到类型安全，假设jOOQ代码生成器已经生成了所需的工件（一组类，反映了数据库表、列、过程、视图等）。在这种情况下，之前的jOOQ示例可以以类型安全的方式重写，如下所示。请注意，以下所有代码片段都无法编译：
- en: '[PRE17]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Besides being less verbose than the original example, this query is type-safe
    as well. This time, `CUSTOMER` (which replaced `table("CUSTOMER")`) is a `static`
    instance (shortcut) of the `Customer` class, representing the `customer` table.
    Moreover, `CUSTOMER_NAME` (which replaced `field("CUSTOMER.CUSTOMER_NAME")`) is
    also a `static` field in the `Customer` class, representing the `customer_name`
    column of the `customer` table. These Java objects have been generated by the
    jOOQ Code Generator as part of the Java-based schema. Note how this `static` instance
    was nominally imported here – if you find the technique of importing each `static`
    artifact cumbersome, then you can simply rely on the neat trick of importing the
    entire schema as `import static jooq.generated.Tables.*`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 与原始示例相比，这个查询不仅更简洁，而且也是类型安全的。这次，`CUSTOMER`（替换了`table("CUSTOMER")`）是`Customer`类的`static`实例（快捷方式），代表`customer`表。此外，`CUSTOMER_NAME`（替换了`field("CUSTOMER.CUSTOMER_NAME")`）也是`Customer`类中的`static`字段，代表`customer`表的`customer_name`列。这些Java对象是由jOOQ代码生成器作为基于Java的模式的一部分生成的。注意这个`static`实例是如何名义上导入的——如果你觉得导入每个`static`工件的方法很麻烦，那么你可以简单地依靠导入整个模式作为`import
    static jooq.generated.Tables.*`的整洁技巧。
- en: 'The second jOOQ example can be rewritten in a type-safe manner, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个jOOQ示例可以以类型安全的方式重写，如下所示：
- en: '[PRE23]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following figure is a screenshot from the IDE, showing that the compiler
    complains about the type safety of this SQL:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图是IDE的截图，显示编译器对这个SQL的类型安全提出异议：
- en: '![Figure 2.1 – The compiler reports a type safety error'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – 编译器报告类型安全错误](img/B16833_Figure_2.1.jpg)'
- en: '](img/B16833_Figure_2.1.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – 编译器报告类型安全错误](img/B16833_Figure_2.1.jpg)'
- en: Figure 2.1 – The compiler reports a type safety error
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 编译器报告类型安全错误
- en: Important Note
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Lukas Eder said this: *"As you probably know, the IDEs help writing SQL and
    JPQL strings, which is nice. But IDEs doesn''t fail the build when a column name
    changes."* Well, having type-safe queries covers this aspect, and the IDE can
    fail the build. So, thanks to jOOQ''s fluency and expressiveness, the IDE can
    provide code completion and refactoring support. Moreover, with jOOQ, the bind
    variables are part of a non-dynamic **Abstract Syntax Tree** (**AST**); therefore,
    it is not possible to expose SQL injection vulnerabilities this way.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 卢卡斯·埃德（Lukas Eder）说：“你可能知道，IDEs帮助编写SQL和JPQL字符串，这是很好的。但是，当列名更改时，IDEs不会使构建失败。”嗯，具有类型安全的查询涵盖了这一方面，IDE可以导致构建失败。所以，多亏了jOOQ的流畅性和表达性，IDE可以提供代码补全和重构支持。此外，在jOOQ中，绑定变量是动态**抽象语法树**（**AST**）的一部分；因此，不可能通过这种方式暴露SQL注入漏洞。
- en: OK, but how do we obtain this Java-based schema?
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，但我们如何获取这个基于Java的架构呢？
- en: Generating a jOOQ Java-based schema
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成jOOQ基于Java的架构
- en: All the previous queries were referencing the database schema explicitly by
    placing the table or column name between quotes and passing them as arguments
    to the jOOQ built-in `table()` and `field()` methods respectively.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的先前查询都是通过将表名或列名放在引号之间并分别将它们作为参数传递给jOOQ内置的`table()`和`field()`方法来显式引用数据库架构的。
- en: But, using the jOOQ Code Generator allows the SQL statements expressed via jOOQ's
    query DSL API to take advantage of a Java-based schema that mirrors the one from
    the database. The code generation part is the job of the jOOQ generation tool
    (its starting point is the `org.jooq.codegen.GenerationTool` class).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，使用jOOQ代码生成器允许通过jOOQ查询DSL API表达的SQL语句利用与数据库中镜像的基于Java的架构。代码生成部分是jOOQ生成工具的工作（其起点是`org.jooq.codegen.GenerationTool`类）。
- en: Having a Java-based schema is quite useful. The SQL statements can be expressed
    via the Java data access layer and executed against the underlying database schema.
    Besides being type-safe, these SQL statements are not prone to typos, are easy
    to refactor (for example, to rename a column), and are less verbose than referencing
    the database schema explicitly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个基于Java的架构非常有用。SQL语句可以通过Java数据访问层表达并针对底层数据库架构执行。除了类型安全外，这些SQL语句不易出错，易于重构（例如，重命名列），并且比显式引用数据库架构更简洁。
- en: jOOQ comes with several solutions for generating the Java-based schema via the
    jOOQ Code Generator. Mainly, jOOQ can generate the Java-based schema by applying
    the technique of reverse engineering to the database directly, the DDL files,
    JPA entities, or XML files containing the schema. Next, we will tackle the first
    three approaches, starting with the first approach, which generates the Java-based
    schema directly from the database. Mainly, we will use Flyway to migrate the database
    (Liquibase is supported as well), which is subsequently reverse engineered by
    jOOQ to obtain the Java-based schema.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: jOOQ提供了几种通过jOOQ代码生成器生成基于Java架构的解决方案。主要来说，jOOQ可以通过直接对数据库应用逆向工程技术来生成基于Java的架构，也可以通过DDL文件、JPA实体或包含架构的XML文件。接下来，我们将探讨前三种方法，从第一种方法开始，即直接从数据库生成基于Java的架构。主要我们会使用Flyway来迁移数据库（也支持Liquibase），随后jOOQ将对其进行逆向工程以获取基于Java的架构。
- en: Code generation from a database directly
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接从数据库生成代码
- en: 'The following figure represents the jOOQ Java-based schema generation flow:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示了jOOQ基于Java的架构生成流程：
- en: '![Figure 2.2 – Java-based schema generation'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.2 – 基于Java的架构生成'
- en: '](img/B16833_Figure_2.2.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B16833_Figure_2.2.jpg)'
- en: Figure 2.2 – Java-based schema generation
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.2 – 基于Java的架构生成
- en: So far, jOOQ will regenerate the Java-based schema every time the application
    starts (runs).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，jOOQ每次应用程序启动（运行）时都会重新生成基于Java的架构。
- en: In other words, even if the database schema has not changed, jOOQ will regenerate
    the Java-based schema at each run. Obviously, this is preferable to regenerating
    the Java-based schema only when the underlying database schema is missing or has
    changed (for instance, a new column has been added to a table); otherwise, this
    is just a waste of time.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，即使数据库架构没有发生变化，jOOQ在每次运行时也会重新生成基于Java的架构。显然，这比仅在底层数据库架构缺失或发生变化（例如，向表中添加了新列）时重新生成基于Java的架构更可取；否则，这仅仅是一种浪费时间的行为。
- en: Conscious schema change management is a good thing, and having a tool for this
    is great! Most probably, you'll choose between Flyway and Liquibase. While we
    will only cover the Flyway approach in the next section, Liquibase is very well
    represented in the jOOQ manual ([https://www.jooq.org/doc/latest/manual/code-generation/codegen-liquibase/)](https://www.jooq.org/doc/latest/manual/code-generation/codegen-liquibase/)).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Adding Flyway with Maven
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Flyway is a great tool for database migration ([https://flywaydb.org/](https://flywaydb.org/)).
    Mainly, Flyway keeps track of database schema modifications via a table named
    `flyway_schema_history` (or `schema_version` in Flyway prior to version 5). This
    table is automatically added to the database and is maintained by Flyway itself.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, in Spring Boot, Flyway reads and executes all the database migration
    scripts located in the indicated path (the default path is `src/main/resources/db/migration`).
    For instance, in this book, we use an explicit path that points to a location
    outside the applications in the root folder (`${root}/db/migration`). We do this
    because we want to avoid multiplying the migrations scripts in every single application.
    To quickly start with Flyway, simply add to `pom.xml` the following dependency:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The Flyway default Maven phase for a `migrate` operation is `pre-integration-test`
    (right after `package`). On the other hand, jOOQ needs the migrations to take
    place in the `generate-sources` phase (right after `validate`), therefore much
    earlier.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Mainly, jOOQ triggers a `SELECT` query against the `flyway_schema_history`
    table to check the schema version. This means that jOOQ needs to wait for migrations
    to take place and the schema version to be updated. If the version is updated,
    then jOOQ regenerates the Java-based schema; otherwise, you''ll see a message
    like this: `Existing version 1.1 is up to date with 1.1 for schema classicmodels.
    Ignoring schema`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Scheduling migrations in the `generate-sources` phase can be done via the Flyway
    Maven plugin, as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Let's try using Gradle.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Adding Flyway with Gradle
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you prefer to use Gradle, then you''ll need `build.gradle` in the following
    code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Next, let's add the SQL scripts following the Flyway naming conventions.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Adding SQL scripts for Flyway
  id: totrans-107
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the applications developed in this book, the scripts read and executed by
    Flyway are named `V1.1__Create.sql` (this file contains the DDLs of the database
    schema) and `afterMigrate.sql` (this file contains the DMLs to populate the database)
    and are placed externally to the applications in the `${root}/db/migration` folder.
    Adding a new file that respects the Flyway naming convention (for example, `V1.2__AddColumn.sql`)
    will instruct Flyway to update the database schema and jOOQ to regenerate the
    Java-based schema. As long as no migrations happen and the jOOQ-generated classes
    exist, jOOQ doesn't regenerate the Java-based schema.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure represents the flow, which is particularly interesting
    for most use cases that contain DDL changes:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 下图表示的流程对于大多数包含 DDL 变更的使用案例尤其有趣：
- en: '![Figure 2.3 – Flyway migrations and the jOOQ Java-based schema generation'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.3 – Flyway 迁移和基于 jOOQ 的 Java 架构生成'
- en: '](img/B16833_Figure_2.3.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B16833_Figure_2.3.jpg)'
- en: Figure 2.3 – Flyway migrations and the jOOQ Java-based schema generation
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – Flyway 迁移和基于 jOOQ 的 Java 架构生成
- en: Note how Flyway migrations take place before jOOQ code generation. Finally,
    it's time to enable the jOOQ Code Generator.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 Flyway 迁移是在 jOOQ 代码生成之前发生的。最后，是时候启用 jOOQ 代码生成器了。
- en: From a developer perspective, enabling the jOOQ Code Generator is a setup task
    that gets materialized in a snippet of code, written in standalone migration scripts
    or `pom.xml` if there is a Maven-based project, or `build.gradle` if there is
    a Gradle-based project. jOOQ reads this information and uses it to configure and
    automatically execute the `org.jooq.codegen.GenerationTool` generator accordingly.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者的角度来看，启用 jOOQ 代码生成器是一个设置任务，它通过在独立迁移脚本或 `pom.xml`（如果项目基于 Maven）或 `build.gradle`（如果项目基于
    Gradle）中编写的代码片段来实现。jOOQ 读取这些信息，并据此配置和自动执行 `org.jooq.codegen.GenerationTool` 生成器。
- en: Running the Code Generator with Maven
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Maven 运行代码生成器
- en: Mainly, the jOOQ Code Generator can run in standalone mode or with Maven/Gradle.
    While there are no big differences between these two approaches, we prefer to
    go further with the Maven plugin, `jooq-codegen-maven`. Nevertheless, for a quick
    example of running the Code Generator from the command line in standalone mode,
    you have everything you need (including a `README` file) packed in a ZIP archive
    named `standalone-codegen-jooq.zip`. This is available for MySQL, PostgreSQL,
    SQL Server, and Oracle.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 主要来说，jOOQ 代码生成器可以以独立模式或与 Maven/Gradle 一起运行。虽然这两种方法之间没有太大差异，但我们更喜欢使用 Maven 插件
    `jooq-codegen-maven` 来进一步操作。不过，为了快速示例从命令行以独立模式运行代码生成器，你需要一个包含所有必需文件（包括 `README`
    文件）的 ZIP 存档，名为 `standalone-codegen-jooq.zip`。这适用于 MySQL、PostgreSQL、SQL Server
    和 Oracle。
- en: 'Now, configuring jOOQ''s Code Generator requires some information that can
    be packed in an XML file. The climax of this file is the `<configuration>` tag
    used to shape an `org.jooq.meta.jaxb.Configuration` instance. Consider reading
    carefully each comment of the following jOOQ Code Generator configuration stub,
    since each comment provides important details about the tag that precedes it (in
    the bundled code, you''ll see an expanded version of these comments, containing
    extra details):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，配置 jOOQ 的代码生成器需要一些可以打包到 XML 文件中的信息。这个文件的顶峰是 `<configuration>` 标签，用于塑造一个 `org.jooq.meta.jaxb.Configuration`
    实例。请仔细阅读以下 jOOQ 代码生成器配置存根中的每个注释，因为每个注释都提供了关于其前一个标签的重要细节（在附带代码中，你会看到一个包含额外细节的注释扩展版本）：
- en: '[PRE42]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Next, the `<generator/>` tag contains all the information needed for customizing
    the jOOQ generator:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，`<generator/>` 标签包含了所有用于自定义 jOOQ 生成器的信息：
- en: '[PRE55]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Based on this stub and the comments, let''s try to fill up the missing parts
    for configuring the jOOQ Code Generator against the `classicmodels` database in
    MySQL:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这个存根和注释，让我们尝试填充配置 jOOQ 代码生成器针对 MySQL 中的 `classicmodels` 数据库所缺失的部分：
- en: '[PRE88]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: For brevity, the alternatives for PostgreSQL, SQL Server, and Oracle are not
    listed here, but you can find them in the code bundled with this book in the application
    named *WriteTypesafeSQL*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁，这里没有列出 PostgreSQL、SQL Server 和 Oracle 的替代方案，但你可以在这本书附带的应用程序 *WriteTypesafeSQL*
    中的代码中找到它们。
- en: 'Additionally, the Maven plugin supports the following flags in `<configuration>`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Maven 插件在 `<configuration>` 中支持以下标志：
- en: 'Disabling the plugin via a Boolean property/constant:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过布尔属性/常量禁用插件：
- en: '[PRE132]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: 'Specifying an external XML configuration instead of an inline configuration:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用外部 XML 配置而不是内联配置：
- en: '[PRE133]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'Alternatively, specifying several external configuration files, merged by using
    Maven''s `combine.children="append"` policy:'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者，指定多个外部配置文件，使用 Maven 的 `combine.children="append"` 策略合并：
- en: '[PRE134]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: Next, let's run the jOOQ generator via Gradle.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们通过 Gradle 运行 jOOQ 生成器。
- en: Running the Code Generator with Gradle
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Gradle 运行代码生成器
- en: 'Running the Code Generator via Gradle can be accomplished via `gradle-jooq-plugin`
    ([https://github.com/etiennestuder/gradle-jooq-plugin/](https://github.com/etiennestuder/gradle-jooq-plugin/)).
    The next snippet of code represents the climax of configuration for Oracle:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE135]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: 'In addition, we have to bind the jOOQ generator to the Flyway migration tool
    to execute it only when it is really needed:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE177]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: In the bundled code, you can find the complete application (*WriteTypesafeSQL*)
    for MySQL, PostgreSQL, SQL Server, and Oracle, written for Java/Kotlin and Maven/Gradle
    combos.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, if you prefer `Ant`, then read this: [https://www.jooq.org/doc/latest/manual/code-generation/codegen-ant/](https://www.jooq.org/doc/latest/manual/code-generation/codegen-ant/).
    Next, let''s tackle another approach to generating the Java-based schema.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Code generation from SQL files (DDL)
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another jOOQ approach for obtaining the Java-based schema relies on the DDL
    Database API, which is capable of accomplishing this task from SQL scripts (a
    single file or incremental files) containing the database schema. Mainly, the
    jOOQ SQL parser materializes our SQL scripts into an in-memory H2 database (available
    out of the box in Spring Boot), and the generation tool will reverse-engineer
    it to output the Java-based schema. The following figure depicts this flow:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – The jOOQ Java-based schema generation via the DDL Database API'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16833_Figure_2.4.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – The jOOQ Java-based schema generation via the DDL Database API
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: The climax of the DDL Database API configuration relies on the jOOQ Meta Extensions,
    represented by `org.jooq.meta.extensions.ddl.DDLDatabase`.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Running the Code Generator with Maven
  id: totrans-285
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this context, running the Code Generator via Maven relies on the following
    XML stub. Read each comment, since they contain valuable information (in the bundled
    code, you''ll see an expanded version of these comments):'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE190]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: In this context, jOOQ generates the Java-based schema without connecting to
    the real database. It uses the DDL files to produce an in-memory H2 database that
    is subsequently reverse-engineered into Java classes. The `<schemaVersionProvider>`
    tag can be bound to a Maven constant that you have to maintain in order to avoid
    running the Code Generator when nothing has changed.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides this stub, we need the following dependency:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE234]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: 'Based on this stub and the explanations from the comments, let''s try to fill
    up the missing parts to configure the jOOQ Code Generator against the `classicmodels`
    database in PostgreSQL:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE239]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: The Gradle alternative is available in the bundled code.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the SQL files
  id: totrans-383
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Currently, it is impossible to use some vendor-specific stuff; therefore, our
    SQL files may contain parts that the jOOQ SQL parser may not understand. In such
    cases, we have to prepare our SQL files by delimiting these parts with the jOOQ
    default conventions from the following example:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE282]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: The code between `-- [jooq ignore start]` and `-- [jooq ignore stop]` is ignored
    by the jOOQ SQL parser. Turning on/off ignoring content between such tokens can
    be done via the `parseIgnoreComments` Boolean property, while customizing these
    tokens can be done via the `parseIgnoreCommentStart` and `parseIgnoreCommentStop`
    properties. For more details, refer to [https://www.jooq.org/doc/latest/manual/code-generation/codegen-ddl/](https://www.jooq.org/doc/latest/manual/code-generation/codegen-ddl/).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: In the bundled code, you can see an implementation of this stub for MySQL, PostgreSQL,
    SQL Server, and Oracle via the Java/Kotlin and Maven/Gradle combos, under the
    name *DeclarativeDDLDatabase*.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Going forward, while the jOOQ SQL parser will become more powerful, this will
    be the recommended approach for using the jOOQ Code Generator. The goal is to
    delegate jOOQ to do more migration work out of the box.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Code generation from entities (JPA)
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's assume that you have a JPA application that relies on a schema shaped
    as an entity model (JPA-annotated entities) and you want to obtain the jOOQ Java-based
    schema. If you cannot isolate the JPA entity model in a separate module of the
    application, then you can configure jOOQ to generate the Java-based schema directly
    from the real database (supposing that you have access to the real database schema
    during the development stage) or from the DDL files (assuming that you have such
    files). But, if you can easily place the entities in a separate module of the
    application, then you can rely on jOOQ's JPA Database API (`org.jooq.meta.extensions.jpa.JPADatabase`),
    which is capable of generating the Java-based schema from the JPA model. The JPA
    Database API requires entities in a separate module because it has to look them
    up from the classpath via Spring.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure depicts the flow of the JPA Database API:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – The jOOQ Java-based schema generation via the JPA Database API'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B16833_Figure_2.5.jpg)'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – The jOOQ Java-based schema generation via the JPA Database API
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: The flow of the JPA Database API uses Hibernate internally for generating an
    in-memory H2 database from the JPA model (entities). Subsequently, jOOQ reverse-engineers
    this H2 database into jOOQ classes (the Java-based schema).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: Running the Code Generator with Maven
  id: totrans-399
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this context, running the Code Generator via Maven relies on the following
    XML stub. Read each comment, since they contain valuable information (in the bundled
    code, you can find an expanded version of these comments):'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-438
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: 'Based on this stub and the comments, here is an example containing the popular
    settings (this snippet was extracted from a JPA application that uses MySQL as
    the real database):'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE331]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-455
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-457
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: '[PRE361]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: '[PRE377]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: 'Besides this stub, we need the following dependency:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: '[PRE380]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: '[PRE384]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: This approach and the Gradle alternative are available in the bundled code for
    Java and Kotlin under the name `DeclarativeJPADatabase`.
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: 'Another approach that you''ll find interesting is generating the Java-based
    schema from XML files: [https://www.jooq.org/doc/latest/manual/code-generation/codegen-xml/](https://www.jooq.org/doc/latest/manual/code-generation/codegen-xml/).
    This is exemplified in `DeclarativeXMLDatabase` and `ProgrammaticXMLGenerator`.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, it is highly recommended to read the *Code generation*
    section of the jOOQ manual: [https://www.jooq.org/doc/latest/manual/code-generation/](https://www.jooq.org/doc/latest/manual/code-generation/).
    This section contains tons of settings and configurations that influence the generated
    artifacts.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: If you need to manage multiple databases, schemas, catalogs, a shared-schema
    multitenancy, and so on, then refer to [*Chapter 17*](B16833_17.xhtml#_idTextAnchor330),
    *Multitenancy in jOOQ*.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: Writing queries using a Java-based schema
  id: totrans-507
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once jOOQ's Code Generator has done its job, we have access to the generated
    artifacts. Among these artifacts, we have the `jooq.generated.tables` folder,
    which contains the database tables mirrored as Java code. The generated artifacts
    are placed in the specified `/target` folder (in our case, `target/generated-sources`)
    under the specified package name (in our case, `jooq.generated`).
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, you''ll instruct the jOOQ Code Generator to store generated code
    under the `/target` folder (Maven), `/build` folder (Gradle), or `/src` folder.
    Basically, if you choose the `/target` or `/build` folder, then jOOQ regenerates
    the code at each build; therefore, you are sure that sources are always up to
    date. Nevertheless, to decide which path fits best to your strategic case, consider
    reading Lukas Eder''s answer from Stack Overflow: [https://stackoverflow.com/questions/25576538/why-does-jooq-suggest-to-put-generated-code-under-target-and-not-under-src](https://stackoverflow.com/questions/25576538/why-does-jooq-suggest-to-put-generated-code-under-target-and-not-under-src).
    It is also recommended to check out the *Code generation and version control*
    section from the jOOQ manual, available at [https://www.jooq.org/doc/latest/manual/code-generation/codegen-version-control/](https://www.jooq.org/doc/latest/manual/code-generation/codegen-version-control/).'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that, in the previous chapter ([*Chapter 1*](B16833_01.xhtml#_idTextAnchor015),
    *Starting jOOQ and Spring Boot*), we already used the jOOQ DSL API to write the
    following query:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE386]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: 'This query references the database schema (table and columns). Rewriting this
    query referencing the Java-based schema produces the following code (jOOQ `Record`
    such as `OfficeRecord` are introduced in the next chapter; for now, think of it
    as the result set wrapped in a Java object):'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE388]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: '[PRE392]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: 'Alternatively, generating and executing the query immediately can be done as
    follows (`Office` is a POJO):'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE393]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: 'Depending on the database vendor, the generated SQL looks as follows with MySQL
    (note that jOOQ has correctly generated backticks specific to MySQL queries):'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE399]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-531
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-532
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-533
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: 'The generated SQL looks as follows with PostgreSQL (note that jOOQ has used
    the qualification containing the PostgreSQL schema):'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE406]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: '[PRE409]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: '[PRE412]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: 'The generated SQL looks as follows with Oracle (note that jOOQ has made the
    identifiers uppercase, exactly as Oracle prefers):'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE413]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-550
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: 'The generated SQL looks as follows with SQL Server (note that jOOQ has used
    `[]`, specific to SQL Server):'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE420]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: So, depending on the dialect, jOOQ has produced the expected query.
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that `selectFrom(table("OFFICE"))` has been rendered as `*`, while `selectFrom(OFFICE)`
    has been rendered as a list of column names. In the first case, jOOQ cannot infer
    the columns from the argument table; therefore, it projects `*`. In the second
    case, thanks to the Java-based schema, jOOQ projects the known columns from the
    table, which avoids the usage of the controversial `*`. Of course, `*` per se
    isn''t controversial – just the fact that the columns aren''t listed explicitly,
    as this article explains: [https://tanelpoder.com/posts/reasons-why-select-star-is-bad-for-sql-performance/](https://tanelpoder.com/posts/reasons-why-select-star-is-bad-for-sql-performance/).'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try another example that queries the `ORDER` table. Since `ORDER` is
    a reserved word in most dialects, let''s see how jOOQ will handle it. Note that
    our query doesn''t do anything special to instruct jOOQ about this aspect:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE427]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: 'Or, generating and executing it immediately (`Order` is a POJO):'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE429]'
  id: totrans-566
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: '[PRE433]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: 'Let''s see the valid SQL generated for MySQL:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE436]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-576
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-577
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-578
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: For brevity, we'll skip the generated SQL for PostgreSQL, Oracle, and SQL Server.
    Mainly, since jOOQ quotes everything by default, we can use reserved and unreserved
    names exactly in the same way and get back valid SQL statements.
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s tackle one more example:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE443]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: 'Or, generating and executing it immediately (`CustomerAndOrder` is a POJO):'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE448]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: '[PRE452]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-596
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-597
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: 'This query uses the `JOIN`...`USING` syntax. Basically, instead of a condition
    via the `ON` clause, you supply a set of fields that have an important particularity
    – their names are common to both tables to the left and right of the join operator.
    However, some dialects (for example, Oracle) don''t allow us to use qualified
    names in `USING`. Having qualified names leads to an error such as `ORA-25154:
    column part of USING clause cannot have qualifier`.'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 'jOOQ is aware of this aspect and takes action. Following the Oracle dialect,
    jOOQ renders `CUSTOMER.CUSTOMER_NUMBER` as `"CUSTOMER_NUMBER"`, not qualified
    as `"CLASSICMODELS"."CUSTOMER"."CUSTOMER_NUMBER"`. Check this here:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE457]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-601
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-602
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-604
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-605
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: This was just an example of how jOOQ takes care of the generated SQL by emulating
    the correct syntax, depending on the dialect used! Thanks to jOOQ code generation,
    we benefit from default choices for so many silly edge cases that are so annoying
    to handle later on.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize a handful of advantages brought by jOOQ code generation:'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: Type-safe SQL queries. Did I mention type-safe SQL queries?!
  id: totrans-610
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to worry about the identifier's case sensitivity, quotation, and qualification.
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using generated code makes for much leaner expressions. There's less wrapping
    noise such as `field("X", "Y")`, `field(name("X", "Y"))`, or `field(name("X",
    "Y"), DATA_TYPE)`. Via jOOQ code generation, this would just be `X.Y`.
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IDE can provide code completion and refactoring support.
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can use the IDE to find uses of tables and columns because they're Java objects.
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code will no longer compile when the columns are renamed, rather than having
    to run the query for it to fail.
  id: totrans-615
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoidance of issues caused by edge cases with vendor-specific data types.
  id: totrans-616
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since jOOQ quotes everything by default, users don't have to think of quoting
    reserved names such as `table(name("ORDER"))`. It's just `ORDER`, and jOOQ will
    produce `` `ORDER` ``, `"ORDER"`, `[ORDER]`, or whatever is specific to the used
    dialect.
  id: totrans-617
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important Note
  id: totrans-618
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As a rule of thumb, always consider jOOQ code generation as the default way
    to exploit jOOQ. Of course, there are edge cases when code generation cannot be
    fully exploited (for instance, in the case of schemas that are created/modified
    dynamically at runtime), but this is a different story.
  id: totrans-619
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The application developed in this section is named *WriteTypesafeSQL*.
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: jOOQ versus JPA Criteria versus QueryDSL
  id: totrans-621
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All these three, jOOQ, JPA Criteria (or the Spring Data JPA Specifications API
    built on top of the Criteria API), and QueryDSL, can provide type-safe SQL.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: If you come from a JPA background, then you know that JPA defines a Metamodel
    API for Criteria queries. So, the Criteria API and the Metamodel API can provide
    type safety for SQL as well. But, the Criteria API is quite complicated compared
    to QueryDSL. You don't have to take my word for it – try it! However, the Criteria
    API is something that you need to learn in addition to JPQL and all the JPA stuff.
    Also, it is not intuitive, it is poorly documented, and developers describe it
    as quite slow. Moreover, having 100% type safety means having to write all SQL
    statements that are prone to type errors via the Criteria API.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: QueryDSL supports SQL type safety as well. Having support in Spring Boot, QueryDSL
    is well covered in this article at [https://dzone.com/articles/querydsl-vs-jooq-feature](https://dzone.com/articles/querydsl-vs-jooq-feature),
    which contains a non-exhaustive list of jOOQ support beyond QueryDSL's "feature
    completeness." Nevertheless, that article is quite old and may be out of date.
    Meanwhile, jOOQ has even more advantages that you can find yourself by a quick
    search on `reddit.com`.
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's go one step further and give more control to jOOQ.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: Configuring jOOQ to generate POJOs
  id: totrans-626
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have used our own **POJOs** as our primary **Data** **Transfer Objects**
    (**DTOs**). This is a common approach in layered applications such as Spring Boot
    applications.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: The `Office` and `Order` POJOs are Java mirrors of the `OFFICE` and `ORDER`
    tables, since our queries fetch all the columns from these tables. On the other
    hand, the `CustomerAndOrder` POJO maps columns from two different tables, `CUSTOMER`
    and `ORDER`. More precisely, it maps `CUSTOMER_NAME` from `CUSTOMER` and `ORDER_DATE`
    from `ORDER`.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: 'Optionally, jOOQ can generate POJOs on our behalf via the jOOQ Code Generator.
    In Maven, this feature can be enabled via the following configuration into the
    `<generator>` tag:'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE465]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-633
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-634
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-636
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: 'Additionally, jOOQ can add to the generated POJOs a set of Bean Validation
    API annotations to convey type information. More precisely, they include two well-known
    validation annotations – `@NotNull` (`javax/jakarta.validation.constraints.NotNull`)
    and `@Size` (`javax/jakarta``.validation.constraints.Size`). To enable these annotations,
    the configuration should be as follows:'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE472]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: Also, you should add the dependency for `validation-api` as in the bundled code.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the names of the generated POJOs are the same as the names of the
    tables in *Pascal* case (for instance, the table named `office_has_manager` becomes
    `OfficeHasManager`). Altering the default behavior can be achieved via so-called
    *generator strategies* – basically, in Maven, a piece of XML delimited by the
    `<strategy>` tag that relies on regular expressions for producing custom (user-defined)
    output. For example, if the POJOs are prefixed with the `Jooq` text, then the
    generator strategy will be the following:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE476]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: '[PRE478]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: This time, the table named `office_has_manager` results in a POJO source named
    `JooqOfficeHasManager`. More details about the generator strategies (including
    the programmatic approach) are available in [*Chapter 18*](B16833_18.xhtml#_idTextAnchor338),
    *jOOQ SPI (Providers and Listeners)*. Also, it is recommended to read [https://www.jooq.org/doc/latest/manual/code-generation/codegen-matcherstrategy/](https://www.jooq.org/doc/latest/manual/code-generation/codegen-matcherstrategy/).
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: The Gradle alternative is available in the bundled code.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, jOOQ generates a POJO for each table in the database. Therefore,
    by default, jOOQ can generate a POJO as `Office` and `Order` (or `JooqOffice`
    and `JooqOrder`, conforming to the preceding strategy), but its purpose is not
    to generate more complex POJOs, such as composite POJOs or ones containing arbitrary
    objects (such as `CustomerAndOrder`). The following is the source code of `JooqOffice`,
    generated by jOOQ:'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE486]'
  id: totrans-657
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-658
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: '[PRE491]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: '[PRE494]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: '[PRE497]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: '[PRE503]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: '[PRE507]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: '[PRE509]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: '[PRE511]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-686
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: 'Similar POJOs are generated for each table of the `classicmodels` database.
    This means that we can still use our `CustomerAndOrder` POJO, but there is no
    need to write our own POJOs for `Office` and `Order` because we can use those
    generated by jOOQ. The following code was cut out from `ClassicModelsRepository`
    and uses the generated `JooqOffice` and `JooqOrder` (note the imports – jOOQ placed
    the POJOs in the `jooq.generated.tables.pojos` package):'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE516]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: '[PRE517]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-690
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: '[PRE519]'
  id: totrans-691
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-692
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: '[PRE521]'
  id: totrans-693
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-694
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-695
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-696
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-697
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-698
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: '[PRE527]'
  id: totrans-699
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-700
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: '[PRE529]'
  id: totrans-701
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-702
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: '[PRE531]'
  id: totrans-703
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-704
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: Done! So, jOOQ-generated POJOs can be used as any regular POJOs. For instance,
    they can be returned from a `REST` controller, and Spring Boot will serialize
    them as JSON. We'll detail more types of supported POJOs later on when we tackle
    the mapping result set to POJOs.
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: The application developed in this section is available as *GeneratePojos*. Next,
    let's see how jOOQ can generate DAOs.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: Configuring jOOQ to generate DAOs
  id: totrans-707
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with Spring Data JPA/JDBC, then you're already used to relying
    on a DAO layer that wraps the queries. Both Spring Data JDBC and JPA provide a
    built-in DAO that exposes a set of CRUD operations and can be extended via user-defined
    repositories.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: jOOQ code generation can produce similar DAOs. Basically, for each table of
    the database, jOOQ can generate an `org.jooq.DAO` implementation that exposes
    methods such as `findById()`, `delete()`, `findAll()`, `insert()`, and `update()`.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: 'In Maven, this feature can be enabled via the following configuration in the
    `<generator>` tag:'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE533]'
  id: totrans-711
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: '[PRE534]'
  id: totrans-712
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-713
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: '[PRE536]'
  id: totrans-714
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-715
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: '[PRE538]'
  id: totrans-716
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-717
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: 'jOOQ DAOs make use of POJOs; therefore, jOOQ will implicitly generate POJOs
    as well. Since we are in Spring Boot, it will be nice to have the generated DAOs
    annotated with `@Repository` as the built-in `SimpleJpaRepository`. To achieve
    this, we use the `<springAnnotations/>` flag, as follows:'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  id: totrans-719
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-720
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: '[PRE542]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-722
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: 'By default, the names of the generated DAOs are the same as the names of the
    tables in *Pascal* case and suffixed with the word `Dao` (for instance, the table
    named `office_has_manager` becomes `OfficeHasManagerDao`). Altering the default
    behavior can be achieved via so-called *generator strategies*. For instance, following
    the Spring style, we prefer `OfficeHasManagerRepository` instead of `OfficeHasManagerDao`.
    This can be achieved as follows:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE544]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-725
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-726
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-728
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-729
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-731
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: '[PRE552]'
  id: totrans-732
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-733
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: 'The Gradle alternative is available in the bundled code. For instance, the
    generated `OfficeRepository` looks as follows:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE554]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: '[PRE558]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: '[PRE559]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-747
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-748
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-752
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: Each generated DAO extends the common base implementation named `DAOImpl`. This
    implementation supplies common methods such as `insert()`, `update()`, `delete()`,
    and `findById()`.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: So far, our `ClassicModelsRepository` contains three query methods, represented
    by `findOfficesInTerritory()`, `findOrdersByRequiredDate()`, and `findCustomersAndOrders()`.
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: 'However, let''s check the query from `findOfficesInTerritory()`:'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE575]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: 'Here, we notice that the generated `OfficeRepository` already covers this query
    via the `fetchByTerritory(String territory)` method; therefore, we can use this
    built-in DAO method directly in our service, `ClassicModelsService`, as follows:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE578]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-764
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-765
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-766
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-767
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: 'Going further, check out the query from `findOrdersByRequiredDate()`:'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: 'This time, the previous query is covered in `OrderRepository` by the built-in
    DAO method, `fetchRangeOfRequiredDate(LocalDate li, LocalDate ui)`. So, we can
    drop the previous query and rely on `ClassicModelsService` on the built-in one,
    as follows:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE586]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-775
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-778
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: At this point, the only query method left in `ClassicModelsRepository` is `findCustomersAndOrders()`.
    This query method doesn't have an alternative in the default generated DAOs; therefore,
    we still need it.
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: For now, you can check the application named *GenerateDaos*. Later on, we'll
    discuss extending and customizing the jOOQ-generated DAO.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: Configuring jOOQ to generate interfaces
  id: totrans-781
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Besides POJOs and DAOs, jOOQ can generate an interface for each table. Each
    column is associated with a getter and a setter. In Maven, this can be done as
    shown here:'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE592]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: Basically, jOOQ generates interfaces that look like Spring Data's so-called
    *interfaces-based closed projections*. We can use these interfaces for mapping
    results sets exactly as we do with *closed projections*.
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: 'Nevertheless, note that at the time of writing, this feature has been proposed
    to be removed. You can track the deprecation here: [https://github.com/jOOQ/jOOQ/issues/10509](https://github.com/jOOQ/jOOQ/issues/10509).'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's continue with the programmatic configuration of the jOOQ Code Generator.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: Tackling programmatic configuration
  id: totrans-790
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you prefer programmatic configurations, then jOOQ exposes a fluent API (`org.jooq.meta.jaxb.*`)
    that can be used for configuring code generation in programmatic fashion. First,
    for Maven, add the following dependency in `pom.xml`:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE596]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-794
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-795
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: Alternatively, in Gradle, add `implementation 'org.jooq{.trial-java-8}:jooq-codegen'`.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: Note that `Configuration` refers to `org.jooq.meta.jaxb.Configuration`, not
    `org.jooq.Configuration`, which is used for creating `DSLContext` and other jOOQ
    contexts.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: 'This programmatic API mirrors the declarative approach and, therefore, is very
    intuitive. For instance, here it is the programmatic alternative of the declarative
    approach presented in the *Configuring jOOQ to generate DAOs* section for the
    MySQL `classicmodels` schema:'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-803
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: '[PRE606]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-806
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: '[PRE610]'
  id: totrans-809
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-810
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-811
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-812
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: '[PRE616]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-816
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: '[PRE619]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: '[PRE620]'
  id: totrans-819
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-822
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: '[PRE624]'
  id: totrans-823
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: '[PRE625]'
  id: totrans-824
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: '[PRE626]'
  id: totrans-825
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '[PRE627]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: '[PRE628]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '[PRE629]'
  id: totrans-828
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-831
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-832
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-833
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-834
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-835
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: The jOOQ Code Generator must generate the classes before the application's classes
    are compiled; therefore, the programmatic Code Generator should be placed in a
    separate module of your application and invoked at the proper moment before the
    compilation phase. As you'll see in the bundled code (*ProgrammaticGenerator*),
    this can be achieved via `exec-maven-plugin` for Maven or `JavaExec` for Gradle.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: If you prefer the DDL Database API, then you'll love the programmatic approach
    from `ProgrammaticDDLDatabase`. If you prefer the JPA Database API, then check
    out the programmatic approach as well, *ProgrammaticJPADatabase*.
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: All the applications from this chapter are available for Java/Kotlin and Maven/Gradle
    combos.
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: Introducing jOOQ settings
  id: totrans-839
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jOOQ supports a bunch of optional settings (`org.jooq.conf.Settings`) that are
    mostly used to customize rendered SQL. While all these settings rely on defaults
    that have been carefully chosen for a wide range of cases, there are still situations
    when we have to alter them.
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
- en: 'If you prefer the declarative approach, then you can alter these settings via
    an XML file, named `jooq-settings.xml`, placed in the application classpath. For
    instance, if the rendered SQL doesn''t contain the name of the catalog/schema,
    then `jooq-settings.xml` will be as follows:'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE637]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: 'Without these settings, jOOQ renders the name of the catalog/schema for each
    generated SQL. Here is an example in SQL Server:'
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: Without these settings, jOOQ renders `[classicmodels].[dbo].[customer].[customer_name]`
    .
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With these settings, jOOQ doesn't render the schema and catalog names – `[customer].[customer_name]`
    .
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see in the corresponding XSD (`https://www.jooq.org/xsd/jooq-runtime-3.x.x.xsd`),
    jOOQ supports a lot of settings, and most of them are for advanced users and serve
    only certain scenarios. Nevertheless, some of them are more popular than others,
    and you'll see them mentioned in the proper context throughout this book.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: 'Moreover, jOOQ `Settings` can be programmatically shaped via `@Bean`, as follows:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE642]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: '[PRE643]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-855
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-857
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: 'Via `@Bean`, we customize jOOQ settings globally (at the application level),
    but we can override them locally at the `DSLContext` level via the `DSLContext`
    constructor (`DSL.using()`), as shown in this example:'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE648]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: '[PRE651]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '[PRE652]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: 'Alternatively, we can locally define `DSLContext`, derived from the current
    `DSLContext` (denoted as `ctx`) and having altered `Settings`:'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE653]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '[PRE654]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: '[PRE656]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: During this book, you'll have plenty of occasions to see `Settings` at work,
    so there is no need to bother too much for the moment.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: It's time to summarize this chapter!
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-872
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have reached several targets, but the most important was
    the introduction of the jOOQ Code Generator using configurative and programmatic
    approaches. More specifically, you saw how to write type-safe queries and how
    to generate and use POJOs and DAOs. These are fundamental skills in jOOQ that
    we'll develop during the entire book.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: From this point forward, we'll focus on other topics that will help you to become
    a jOOQ power user.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start diving into the jOOQ core concepts.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
