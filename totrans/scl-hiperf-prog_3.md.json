["```java\njavap -c <PATH_TO_CLASS_FILE>\n\n```", "```java\nscalac -print <PATH>\n\n```", "```java\ncase class Price(value: BigDecimal) extends AnyVal \ncase class OrderId(value: Long) extends AnyVal \n\n```", "```java\ndef printInfo(p: Price, oId: OrderId): Unit = \n  println(s\"Price: ${p.value}, ID: ${oId.value}\") \n\n```", "```java\npublic void printInfo(scala.math.BigDecimal, long); \n\n```", "```java\ncase class Price(value: BigDecimal) extends AnyVal { \n  def lowerThan(p: Price): Boolean = this.value < p.value \n} \n\n// Example usage \nval p1 = Price(BigDecimal(1.23)) \nval p2 = Price(BigDecimal(2.03)) \np1.lowerThan(p2) // returns true \n\n```", "```java\npublic final boolean lowerThan$extension(scala.math.BigDecimal, scala.math.BigDecimal); \n    Code: \n       0: aload_1 \n       1: aload_2 \n       2: invokevirtual #56  // Method scala/math/BigDecimal.$less:(Lscala/math/BigDecimal;)Z \n       5: ireturn \n\n```", "```java\nval p1 = BigDecimal(1.23) \nval p2 = BigDecimal(2.03) \nPrice.lowerThan(p1, p2)  // returns true \n\n```", "```java\ndef newPriceArray(count: Int): Array[Price] = { \n  val a = new Array[Price](count) \n  for(i <- 0 until count){ \n    a(i) = Price(BigDecimal(Random.nextInt())) \n  } \n  a \n} \n\n```", "```java\npublic highperfscala.anyval.ValueClasses$$anonfun$newPriceArray$1(highperfscala.anyval.ValueClasses$Price[]); \n    Code: \n       0: aload_0 \n       1: aload_1 \n       2: putfield      #29  // Field a$1:[Lhighperfscala/anyval/ValueClasses$Price; \n       5: aload_0 \n       6: invokespecial #80  // Method scala/runtime/AbstractFunction1$mcVI$sp.\"<init>\":()V \n       9: return \n\npublic void apply$mcVI$sp(int); \n    Code: \n       0: aload_0 \n       1: getfield      #29  // Field a$1:[Lhighperfscala/anyval/ValueClasses$Price; \n       4: iload_1 \n       5: new           #31  // class highperfscala/anyval/ValueClasses$Price \n       // omitted for brevity \n      21: invokevirtual #55  // Method scala/math/BigDecimal$.apply:(I)Lscala/math/BigDecimal; \n      24: invokespecial #59  // Method highperfscala/anyval/ValueClasses$Price.\"<init>\":(Lscala/math/BigDecimal;)V \n      27: aastore \n      28: return \n\n```", "```java\ntype Tagged[U] = { type Tag = U } \ntype @@[T, U] = T with Tagged[U] \n\n```", "```java\nobject TaggedTypes { \n\n  sealed trait PriceTag \n  type Price = BigDecimal @@ PriceTag \n\n  object Price { \n    def newPrice(p: BigDecimal): Price = \n      Tag[BigDecimal, PriceTag](p) \n\n    def lowerThan(a: Price, b: Price): Boolean = \n      Tag.unwrap(a) < Tag.unwrap(b) \n  } \n} \n\n```", "```java\npublic void apply$mcVI$sp(int); \n    Code: \n       0: aload_0 \n       1: getfield      #29  // Field a$1:[Ljava/lang/Object; \n       4: iload_1 \n       5: getstatic     #35  // Field highperfscala/anyval/TaggedTypes$Price$.MODULE$:Lhighperfscala/anyval/TaggedTypes$Price$; \n       8: getstatic     #40  // Field scala/package$.MODULE$:Lscala/package$; \n      11: invokevirtual #44  // Method scala/package$.BigDecimal:()Lscala/math/BigDecimal$; \n      14: getstatic     #49  // Field scala/util/Random$.MODULE$:Lscala/util/Random$; \n      17: invokevirtual #53  // Method scala/util/Random$.nextInt:()I \n      20: invokevirtual #58  // Method scala/math/BigDecimal$.apply:(I)Lscala/math/BigDecimal; \n      23: invokevirtual #62  // Method highperfscala/anyval/TaggedTypes$Price$.newPrice:(Lscala/math/BigDecimal;)Ljava/lang/Object; \n      26: aastore \n      27: return \n\n```", "```java\nList.fill(10000)(2).map(_* 2) \n\n```", "```java\ncase class ShareCount[T](value: T) \n\n```", "```java\ndef newShareCount(l: Long): ShareCount[Long] = ShareCount(l) \n\n```", "```java\n  public highperfscala.specialization.Specialization$ShareCount<java.lang.Object> newShareCount(long); \n    Code: \n       0: new           #21  // class orderbook/Specialization$ShareCount \n       3: dup \n       4: lload_1 \n       5: invokestatic  #27  // Method scala/runtime/BoxesRunTime.boxToLong:(J)Ljava/lang/Long; \n       8: invokespecial #30  // Method orderbook/Specialization$ShareCount.\"<init>\":(Ljava/lang/Object;)V \n      11: areturn \n\n```", "```java\ncase class ShareCount[@specialized(Long, Int) T](value: T) \n\n```", "```java\n  public highperfscala.specialization.Specialization$ShareCount<java.lang.Object> newShareCount(long); \n    Code: \n       0: new           #21  // class highperfscala.specialization/Specialization$ShareCount$mcJ$sp \n       3: dup \n       4: lload_1 \n       5: invokespecial #24  // Method highperfscala.specialization/Specialization$ShareCount$mcJ$sp.\"<init>\":(J)V \n       8: areturn \n\n```", "```java\n public class highperfscala.specialization.Specialization$ShareCount$mcI$sp extends highperfscala.specialization.Specialization$ShareCount<java .lang.Object> \n\n```", "```java\n  class ParentFoo[@specialized T](t: T) \n  class ChildFoo[T](t: T) extends ParentFoo[T](t) \n\n  def newChildFoo(i: Int): ChildFoo[Int] = new ChildFoo[Int](i) \n\n```", "```java\n  public highperfscala.specialization.Inheritance$ChildFoo<java.lang.Object> newChildFoo(int); \n    Code: \n       0: new           #16  // class highperfscala/specialization/Inheritance$ChildFoo \n       3: dup \n       4: iload_1 \n       5: invokestatic  #22  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n       8: invokespecial #25  // Method highperfscala/specialization/Inheritance$ChildFoo.\"<init>\":(Ljava/lang/Object;)V \n      11: areturn \n\n```", "```java\nclass ParentFoo must be a trait. Specialized version of class ChildFoo will inherit generic highperfscala.specialization.Inheritance.ParentFoo[Boolean] \nclass ChildFoo[@specialized T](t: T) extends ParentFoo[T](t) \n\n```", "```java\n  trait ParentBar[@specialized T] { \n    def t(): T \n  } \n\n  class ChildBar[@specialized T](val t: T) extends ParentBar[T] \n\n  def newChildBar(i: Int): ChildBar[Int] = new ChildBar(i) \n\n```", "```java\n  public highperfscala.specialization.Inheritance$ChildBar<java.lang.Object> newChildBar(int); \n    Code: \n       0: new           #32  // class highperfscala/specialization/Inheritance$ChildBar$mcI$sp \n       3: dup \n       4: iload_1 \n       5: invokespecial #35  // Method highperfscala/specialization/Inheritance$ChildBar$mcI$sp.\"<init>\":(I)V \n       8: areturn \n\n```", "```java\n  class Foo[T](t: T) \n\n  object Foo { \n    def create[T](t: T): Foo[T] = new Foo(t) \n  } \n\n  def boxed: Foo[Int] = Foo.create(1) \n\n```", "```java\n  public highperfscala.specialization.MethodReturnTypes$Foo<java.lang.Object> boxed(); \n    Code: \n       0: getstatic     #19  // Field highperfscala/specialization/MethodReturnTypes$Foo$.MODULE$:Lhighperfscala/specialization/MethodReturnTypes$Foo$; \n       3: iconst_1 \n       4: invokestatic  #25  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n       7: invokevirtual #29  // Method highperfscala/specialization/MethodReturnTypes$Foo$.create:(Ljava/lang/Object;)Lhighperfscala/specialization/MethodReturnTypes$Foo; \n      10: areturn \n\n```", "```java\ndef createSpecialized[@specialized T](t: T): Foo[T] = new Foo(t) \n\n```", "```java\n  case class ShareCount(value: Int) extends AnyVal \n  case class ExecutionCount(value: Int) \n\n  class Container2[@specialized X, @specialized Y](x: X, y: Y) \n\n  def shareCount = new Container2(ShareCount(1), 1) \n\n  def executionCount = new Container2(ExecutionCount(1), 1) \n\n  def ints = new Container2(1, 1) \n\n```", "```java\n@BenchmarkMode(Array(Throughput)) \n@OutputTimeUnit(TimeUnit.SECONDS) \n@Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS) \n@Measurement(iterations = 30, time = 10, timeUnit = TimeUnit.SECONDS) \n@Fork(value = 1, warmups = 1, jvmArgs = Array(\"-Xms1G\", \"-Xmx1G\")) \nclass SpecializationBenchmark { \n\n  @Benchmark \n  def specialized(): Double = \n    specializedExecution.shareCount.toDouble * specializedExecution.price \n\n  @Benchmark \n  def boxed(): Double = \n    boxedExecution.shareCount.toDouble * boxedExecution.price \n} \n\nobject SpecializationBenchmark { \n  class SpecializedExecution[@specialized(Int) T1, @specialized(Double) T2]( \n    val shareCount: Long, val price: Double) \n  class BoxingExecution[T1, T2](val shareCount: T1, val price: T2) \n\n  val specializedExecution: SpecializedExecution[Int, Double] = \n    new SpecializedExecution(10l, 2d) \n  val boxedExecution: BoxingExecution[Long, Double] = new BoxingExecution(10l, 2d) \n} \n\n```", "```java\nsbt 'project chapter3' 'jmh:run SpecializationBenchmark -foe true'\n\n```", "```java\ndef tuple2: (Int, Double) = (1, 2.0) \n\n```", "```java\n  public scala.Tuple2<java.lang.Object, java.lang.Object> tuple2(); \n    Code: \n       0: new           #36  // class scala/Tuple2$mcID$sp \n       3: dup \n       4: iconst_1 \n       5: ldc2_w        #37  // double 2.0d \n       8: invokespecial #41  // Method scala/Tuple2$mcID$sp.\"<init>\":(ID)V \n      11: areturn \n\n```", "```java\ndef tuple3: (Int, Double, Int) = (1, 2.0, 3) \n\n```", "```java\n  public scala.Tuple3<java.lang.Object, java.lang.Object, java.lang.Object> tuple3(); \n    Code: \n       0: new           #45  // class scala/Tuple3 \n       3: dup \n       4: iconst_1 \n       5: invokestatic  #24  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n       8: ldc2_w        #37  // double 2.0d \n      11: invokestatic  #49  // Method scala/runtime/BoxesRunTime.boxToDouble:(D)Ljava/lang/Double; \n      14: iconst_3 \n      15: invokestatic  #24  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n      18: invokespecial #52  // Method scala/Tuple3.\"<init>\":(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V \n      21: areturn \n\n```", "```java\ncase class Bar(value: Int) extends AnyVal \ndef tuple2Boxed: (Int, Bar) = (1, Bar(2)) \n\n```", "```java\n  public scala.Tuple2<java.lang.Object, highperfscala.patternmatch.PatternMatching$Bar> tuple2Boxed(); \n    Code: \n       0: new           #18  // class scala/Tuple2 \n       3: dup \n       4: iconst_1 \n       5: invokestatic  #24  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n       8: new           #26  // class highperfscala.patternmatch/PatternMatching$Bar \n      11: dup \n      12: iconst_2 \n      13: invokespecial #29  // Method highperfscala.patternmatch/PatternMatching$Bar.\"<init>\":(I)V \n      16: invokespecial #32  // Method scala/Tuple2.\"<init>\":(Ljava/lang/Object;Ljava/lang/Object;)V \n      19: areturn \n\n```", "```java\n case class IntBar(i: Int, b: Bar) \n def intBar: IntBar = IntBar(1, Bar(2)) \n\n```", "```java\n  public highperfscala.patternmatch.PatternMatching$IntBar intBar(); \n    Code: \n       0: new           #18  // class highperfscala.patternmatch/PatternMatching$IntBar \n       3: dup \n       4: iconst_1 \n       5: iconst_2 \n       6: invokespecial #21  // Method highperfscala.patternmatch/PatternMatching$IntBar.\"<init>\":(II)V \n       9: areturn \n\n```", "```java\n  sealed trait Side \n  case object Buy extends Side \n  case object Sell extends Side \n  def handleOrder(s: Side): Boolean = s match { \n    case Buy => true \n    case Sell => false \n  } \n\n```", "```java\n public boolean handleOrder(highperfscala.patternmatch.PatternMatching$Side); \n    Code: \n       0: aload_1 \n       1: astore_2 \n       2: getstatic     #148  // Field highperfscala.patternmatch/PatternMatching$Buy$.MODULE$:Lhighperfscala.patternmatch/PatternMatching$Buy$; \n       5: aload_2 \n       6: invokevirtual #152  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z \n       9: ifeq          17 \n      12: iconst_1 \n      13: istore_3 \n      14: goto          29 \n      17: getstatic     #157  // Field highperfscala.patternmatch/PatternMatching$Sell$.MODULE$:Lhighperfscala.patternmatch/PatternMatching$Sell$; \n      20: aload_2 \n      21: invokevirtual #152  // Method java/lang/Object.equals:(Ljava/lang/Object;)Z \n      24: ifeq          31 \n      27: iconst_0 \n      28: istore_3 \n      29: iload_3 \n      30: ireturn \n      31: new           #159  // class scala/MatchError \n      34: dup \n      35: aload_2 \n      36: invokespecial #160  // Method scala/MatchError.\"<init>\":(Ljava/lang/Object;)V \n      39: athrow \n\n```", "```java\n  sealed trait Order \n  case class BuyOrder(price: Double) extends Order \n  case class SellOrder(price: Double) extends Order \n  def handleOrder(o: Order): Boolean = o match { \n    case BuyOrder(price) if price > 2.0 => true \n    case BuyOrder(_) => false \n    case SellOrder(_) => false \n  } \n\n```", "```java\n        case10(){ \n          if (x1.$isInstanceOf[highperfscala.patternmatch.PatternMatching$BuyOrder]()) \n            { \n              rc8 = true; \n              x2 = (x1.$asInstanceOf[highperfscala.patternmatch.PatternMatching$BuyOrder](): highperfscala.patternmatch.PatternMatching$BuyOrder); \n              { \n                val price: Double = x2.price(); \n                if (price.>(2.0)) \n                  matchEnd9(true) \n                else \n                  case11() \n              } \n            } \n          else \n            case11() \n        }; \n        case11(){ \n          if (rc8) \n            matchEnd9(false) \n          else \n            case12() \n        }; \n\n```", "```java\nclass PatternMatchingBenchmarks { \n\n  @Benchmark \n  def matchIntLiterals(i: PatternMatchState): Int = i.matchIndex match { \n    case 1 => 1 \n    case 2 => 2 \n    case 3 => 3 \n    case 4 => 4 \n    case 5 => 5 \n    case 6 => 6 \n    case 7 => 7 \n    case 8 => 8 \n    case 9 => 9 \n    case 10 => 10 \n  } \n\n  @Benchmark \n  def matchIntVariables(ii: PatternMatchState): Int = ii.matchIndex match { \n    case `a` => 1 \n    case `b` => 2 \n    case `c` => 3 \n    case `d` => 4 \n    case `e` => 5 \n    case `f` => 6 \n    case `g` => 7 \n    case `h` => 8 \n    case `i` => 9 \n    case `j` => 10 \n  } \n\n  @Benchmark \n  def matchAnyVal(i: PatternMatchState): Int = CheapFoo(i.matchIndex) match { \n    case CheapFoo(1) => 1 \n    case CheapFoo(2) => 2 \n    case CheapFoo(3) => 3 \n    case CheapFoo(4) => 4 \n    case CheapFoo(5) => 5 \n    case CheapFoo(6) => 6 \n    case CheapFoo(7) => 7 \n    case CheapFoo(8) => 8 \n    case CheapFoo(9) => 9 \n    case CheapFoo(10) => 10 \n  } \n\n  @Benchmark \n  def matchCaseClass(i: PatternMatchState): Int = \n    ExpensiveFoo(i.matchIndex) match { \n      case ExpensiveFoo(1) => 1 \n      case ExpensiveFoo(2) => 2 \n      case ExpensiveFoo(3) => 3 \n      case ExpensiveFoo(4) => 4 \n      case ExpensiveFoo(5) => 5 \n      case ExpensiveFoo(6) => 6 \n      case ExpensiveFoo(7) => 7 \n      case ExpensiveFoo(8) => 8 \n      case ExpensiveFoo(9) => 9 \n      case ExpensiveFoo(10) => 10 \n    } \n} \n\nobject PatternMatchingBenchmarks { \n\n  case class CheapFoo(value: Int) extends AnyVal \n  case class ExpensiveFoo(value: Int) \n\n  private val (a, b, c, d, e, f, g, h, i, j) = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10) \n\n  @State(Scope.Benchmark) \n  class PatternMatchState { \n    @Param(Array(\"1\", \"5\", \"10\")) \n    var matchIndex: Int = 0 \n  } \n} \n\n```", "```java\nsbt 'project chapter3' 'jmh:run PatternMatchingBenchmarks -foe true'\n\n```", "```java\n       6: tableswitch   { // 1 to 10 \n                     1: 113 \n                     2: 109 \n                     3: 105 \n                     4: 101 \n                     5: 97 \n                     6: 92 \n                     7: 87 \n                     8: 82 \n                     9: 77 \n                    10: 72 \n               default: 60 \n          } \n\n```", "```java\ndef processShareCount(sc: ShareCount): Boolean = \n (sc: @switch) match { \n case ShareCount(1) => true \n case _ => false \n}\n```", "```java\ndef sum(l: List[Int]): Int = l match { \n  case Nil => 0 \n  case x :: xs => x + sum(xs) \n} \n\n```", "```java\nsum(List(1,2,3,4,5))\n```", "```java\n1 + (sum(List(2,3,4,5))) \n1 + (2 + (sum(List(3,4,5)))) \n1 + (2 + (3 + (sum(List(4,5))))) \n1 + (2 + (3 + (4 + (sum(List(5)))))) \n1 + (2 + (3 + (4 + (5)))) \n1 + (2 + (3 + (9))) \n1 + (2 + (12)) \n1 + (14) \n15 \n\n```", "```java\n $ sbt 'project chapter3' console\n    scala> highperfscala.tailrec.TailRecursion.sum((1 to 1000000).toList)\n    java.lang.StackOverflowError\n      at scala.collection.immutable.Nil$.equals(List.scala:424)\n      at highperfscala.tailrec.TailRecursion$.sum(TailRecursion.scala:12)\n      at highperfscala.tailrec.TailRecursion$.sum(TailRecursion.scala:13)\n      at highperfscala.tailrec.TailRecursion$.sum(TailRecursion.scala:13)\n      at highperfscala.tailrec.TailRecursion$.sum(TailRecursion.scala:13)\n    ...omitted for brevity \n```", "```java\ndef tailrecSum(l: List[Int]): Int = { \n  def loop(list: List[Int], acc: Int): Int = list match { \n    case Nil => acc \n    case x :: xs => loop(xs, acc + x) \n  } \n  loop(l, 0) \n} \n\n```", "```java\n scala> highperfscala.tailrec.TailRecursion.tailrecSum((1 to 1000000).toList)\n    res0: Int = 1784293664 \n```", "```java\npublic int sum(scala.collection.immutable.List<java.lang.Object>); \n    Code: \n       0: aload_1 \n// omitted for brevity        \n      52: invokevirtual #41  // Method sum:(Lscala/collection/immutable/List;)I \n      55: iadd \n      56: istore_3 \n      57: iload_3 \n      58: ireturn \n// omitted for brevity \n\n```", "```java\n  private int loop(scala.collection.immutable.List<java.lang.Object>, int); \n    Code: \n       0: aload_1 \n    // omitted for brevity \n      60: goto          0 \n   // omitted for brevity \n\n```", "```java\ndef tailrecSum(l: List[Int]): Int = { \n  @tailrec \n  def loop(list: List[Int], acc: Int): Int = list match { \n    case Nil => acc \n    case x :: xs => loop(xs, acc + x) \n  } \n  loop(l, 0) \n} \n\n```", "```java\n [error] chapter3/src/main/scala/highperfscala/tailrec/TailRecursion.scala:12: could not optimize @tailrec annotated method sum: it contains a recursive call not in tail position\n    [error]   def sum(l: List[Int]): Int = l match {\n    [error]                                ^\n    [error] one error found\n    [error] (chapter3/compile:compileIncremental) Compilation failed \n```", "```java\ndef sum2(l: List[Int]): Int = { \n\n def loop(list: List[Int], acc: Int): Int = list match { \n   case Nil => acc \n   case x :: xs => info(xs, acc + x) \n } \n def info(list: List[Int], acc: Int): Int = { \n   println(s\"${list.size} elements to examine. sum so far: $acc\") \n   loop(list, acc) \n } \n loop(l, 0) \n} \n\n```", "```java\ndef tailrecSum2(l: List[Int]): Int = { \n  @tailrec \n  def loop(list: List[Int], acc: Int): Int = list match { \n    case Nil => acc \n    case x :: xs => \n     println(s\"${list.size} elements to examine. sum so far: $acc\") \n     loop(list, acc) \n } \n\n loop(l, 0) \n} \n\n```", "```java\ndef sumFromReader(br: BufferedReader): Int = { \n def read(acc: Int, reader: BufferedReader): Int = { \n   Option(reader.readLine().toInt) \n     .fold(acc)(i => read(acc + i, reader)) \n } \n read(0, br) \n} \n\n```", "```java\ndef tailrecSumFromReader(br: BufferedReader): Int = { \n  @tailrec \n  def read(acc: Int, reader: BufferedReader): Int = { \n    val opt = Option(reader.readLine().toInt) \n    if (opt.isEmpty) acc else read(acc + opt.get, reader) \n  } \n  read(0, br) \n} \n\n```", "```java\nclass Printer(msg: String) { \n def printMessageNTimes(n: Int): Unit = { \n   if(n > 0){ \n     println(msg) \n     printMessageNTimes(n - 1) \n   } \n } \n} \n\n```", "```java\n [error] chapter3/src/main/scala/highperfscala/tailrec/TailRecursion.scala:74: could not optimize @tailrec annotated method printMessageNTimes: it is neither private nor final so can be overridden\n    [error]     def printMessageNTimes(n: Int): Unit = {\n    [error]         ^\n    [error] one error found\n    [error] (chapter3/compile:compileIncremental) Compilation failed \n```", "```java\ndef tryCatchBlock(l: List[Int]): Int = { \n def loop(list: List[Int], acc: Int): Int = list match { \n   case Nil => acc \n   case x :: xs => \n     try { \n       loop(xs, acc + x) \n     } catch { \n       case e: IOException => \n         println(s\"Recursion got interrupted by exception\") \n         acc \n     } \n } \n\n loop(l, 0) \n} \n\n```", "```java\nprivate final int loop$4(scala.collection.immutable.List, int); \n    Code: \n       0: aload_1 \n      // omitted for brevity       \n      61: new           #43  // class scala/MatchError \n      64: dup \n      65: aload_3 \n      66: invokespecial #46  // Method scala/MatchError.\"<init>\":(Ljava/lang/Object;)V \n      69: athrow \n      // omitted for brevity \n      114: ireturn \n    Exception table: \n       from    to  target type \n          48    61    70   Class java/io/IOException \n\n```", "```java\nsealed abstract class Option[+A] extends Product with Serializable \nfinal case class Some[+A](x: A) extends Option[A] \ncase object None extends Option[Nothing] \n\n```", "```java\ndef optionalInt(i: Int): Option[Int] = Some(i) \n\n```", "```java\n  public scala.Option<java.lang.Object> optionalInt(int); \n    Code: \n       0: new           #16  // class scala/Some \n       3: dup \n       4: iload_1 \n       5: invokestatic  #22  // Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer; \n       8: invokespecial #25  // Method scala/Some.\"<init>\":(Ljava/lang/Object;)V \n      11: areturn \n\n```", "```java\nOption(10).fold(\"no value\")(i => s\"value is $i\") \n\n```", "```java\nval o = Option(10) \nif (o.isDefined) s\"value is ${o.get} else \"no value\" \n\n```", "```java\nsealed trait Opt \n\nobject OptOps { \n\n  def some[@specialized A](x: A): A @@ Opt = Tag(x) \n  def nullCheckingSome[@specialized A](x: A): A @@ Opt = \n    if (x == null) sys.error(\"Null values disallowed\") else Tag(x) \n  def none[A]: A @@ Opt = Tag(null.asInstanceOf[A]) \n\n  def isSome[A](o: A @@ Opt): Boolean = o != null \n  def isEmpty[A](o: A @@ Opt): Boolean = !isSome(o) \n\n  def unsafeGet[A](o: A @@ Opt): A = \n    if (isSome(o)) o.asInstanceOf[A] else sys.error(\"Cannot get None\") \n\n  def fold[A, B](o: A @@ Opt)(ifEmpty: => B)(f: A => B): B = \n    if (o == null) ifEmpty else f(o.asInstanceOf[A]) \n} \n\n```", "```java\n class OptionCreationBenchmarks { \n\n  @Benchmark \n  def scalaSome(): Option[ShareCount] = Some(ShareCount(1)) \n\n  @Benchmark \n  def scalaNone(): Option[ShareCount] = None \n\n  @Benchmark \n  def optSome(): ShareCount @@ Opt = OptOps.some(ShareCount(1)) \n\n  @Benchmark \n  def optSomeWithNullChecking(): ShareCount @@ Opt = \n    OptOps.nullCheckingSome(ShareCount(1)) \n\n  @Benchmark \n  def optNone(): ShareCount @@ Opt = OptOps.none \n\n  @Benchmark \n  def optNoneReuse(): ShareCount @@ Opt = noShares \n} \n\nobject OptionCreationBenchmarks { \n  case class ShareCount(value: Long) extends AnyVal \n  val noShares: ShareCount @@ Opt = OptOps.none \n} \n\n```", "```java\nsbt 'project chapter3' 'jmh:run OptionCreationBenchmarks  -foe true'\n\n```", "```java\nclass OptionFoldingBenchmarks { \n\n  @Benchmark \n  def scalaOption(): ShareCount = \n    scalaSome.fold(ShareCount(0))(c => ShareCount(c.value * 2)) \n\n  @Benchmark \n  def optOption(): ShareCount = \n    OptOps.fold(optSome)(ShareCount(0))(c => ShareCount(c.value * 2)) \n\n} \n\nobject OptionFoldingBenchmarks { \n\n  case class ShareCount(value: Long) extends AnyVal \n\n  val scalaSome: Option[ShareCount] = Some(ShareCount(7)) \n  val optSome: ShareCount @@ Opt = OptOps.some(ShareCount(7)) \n} \n\n```", "```java\njmh:run OptionFoldingBenchmarks  -foe true\n\n```"]