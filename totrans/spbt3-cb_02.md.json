["```java\n    server:\n      port: 9000\n    spring:\n      security:\n        oauth2:\n          authorizationserver:\n            client:\n              basic-client:\n                registration:\n                  client-id: \"football\"\n                  client-secret: \"{noop}SuperSecret\"\n                  client-authentication-methods:\n                    - \"client_secret_post\"\n                  authorization-grant-types:\n                    - \"client_credentials\"\n                  scopes:\n                    - \"football:read\"\n    ```", "```java\n    curl --location 'http://localhost:9000/oauth2/token' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'grant_type=client_credentials' \\\n    --data-urlencode 'client_id=football' \\\n    --data-urlencode 'client_secret=SuperSecret' \\\n    --data-urlencode 'scope=football:read'\n    ```", "```java\n    {\"access_token\":\"eyJraWQiOiIyMWZkYzEyMy05NTZmLTQ5YWQtODU2 Zi1mNjAxNzc4NzAwMmQiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJiYXNp Yy1jbGllbnQiLCJhdWQiOiJiYXNpYy1jbGllbnQiL CJuYmYiOjE2OTk1NzIwNjcsInNjb3BlIjpbInByb2ZpbGUiXSwiaXNzIj oiaHR0cDovL2xvY2FsaG9zdDo5MDAwIiwiZXhwIjoxNjk5NTcyMzY3LCJ pYXQiOjE2OTk1NzIwNjd9.TavlnbirP_4zGH8WaJHrcCrNs5ZCnStqqiX Kc6pakfvQPviosGdgo9vunq4ogRZWYNjXOS5GYw0XlubSj0UDznnxSLyx 7tR7cEZJSQVHc6kffuozycJ_xl5yzw6_Kv_pJ4fP00b7pbHWO8ciZKUhmW -Pvt5TV8sMFY-uNzgsCtiN5EYdplMUfZdwHMy8yon3bUah8Py7RoAw1bIE ioGUEiK5XLDaE4yGdo8RyyBv4wj3mw6Bs8dcLspLKWXG5spXlZes6XCaSu 0ZXtLE09AgA_Gmq0kwmhWXgnpGKuCkhkXASyJXboQD9TR0y3yTn_aNeiuV MPzX4DQ7IaCKzgmaYg\",\"scope\":\"profile\",\"token_type\":\"Bearer\",\"expires_in\":299}\n    ```", "```java\n    @RequestMapping(\"/football\")\n    @RestController\n    public class FootballController {\n        @GetMapping(\"/teams\")\n        public List<String> getTeams() {\n            return List.of(\"Argentina\", \"Australia\",\n                           \"Brazil\");\n        }\n    }\n    ```", "```java\n    spring:\n      security:\n        oauth2:\n          resourceserver:\n            jwt:\n              audiences:\n              - football\n    HTTP Error 401 Unauthorized error.\n    ```", "```java\n    curl --location 'http://localhost:9000/oauth2/token' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'grant_type=client_credentials' \\\n    --data-urlencode 'client_id=football' \\\n    --data-urlencode 'client_secret=SuperSecret' \\\n    --data-urlencode 'scope=football:read'\n    ```", "```java\n    curl -H \"Authorization: Bearer <access_token> with the value of the access token you obtained in the previous request, as shown in *Figure 2**.4*.Now, the resource server will return the expected result, along with a list of teams.\n    ```", "```java\n{\n  \"sub\": \"football\",\n  \"aud\": \"football\",\n  \"nbf\": 1699671850,\n  \"scope\": [\n    \"football:read\"\n  ],\n  \"iss\": \"http://localhost:9000\",\n  \"exp\": 1699672150,\n  \"iat\": 1699671850\n}\n```", "```java\n    spring:\n      security:\n        oauth2:\n          authorizationserver:\n            client:\n              football:\n                registration:\n                  client-id: \"football\"\n                  client-secret: \"{noop}SuperSecret\"\n                  client-authentication-methods:\n                    - \"client_secret_post\"\n                  authorization-grant-types:\n                    - \"client_credentials\"\n                  scopes:\n                    - \"football:read\"\n    FootballController controller class, create a method named addTeam that’s mapped to a POST action:\n\n    ```", "```java\n\n    You can do a more complex implementation, but for this exercise, we can keep this emulated implementation.\n    ```", "```java\n    @Configuration\n    public class SecurityConfig {\n        @Bean\n        public SecurityFilterChain\n        filterChain(HttpSecurity http) throws Exception {\n            return http.authorizeHttpRequests(authorize ->\n                authorize.requestMatchers(HttpMethod.GET,\n                \"/football/teams/**\").hasAuthority(\n                \"SCOPE_football:read\").requestMatchers(\n                HttpMethod.POST, \"/football/teams/**\")\n                .hasAuthority(\"SCOPE_football:admin\")\n                .anyRequest().authenticated())\n                .oauth2ResourceServer(oauth2 ->\n                oauth2.jwt(Customizer.withDefaults()))\n                .build();\n        }\n    }\n    ```", "```java\n    curl --location 'http://localhost:9000/oauth2/token' \\\n    --header 'Content-Type: application/x-www-form-urlencoded' \\\n    --data-urlencode 'grant_type=client_credentials' \\\n    --data-urlencode 'client_id=football' \\\n    --data-urlencode 'client_secret=SuperSecret' \\\n    --data-urlencode '200.However, let’s say you try to perform the POST request to create a team:\n\n    ```", "```java\n\n    ```", "```java\nWWW-Authenticate: Bearer error=\"insufficient_scope\", error_description=\"The request requires higher privileges than provided by the access token.\", error_uri=\"https://tools.ietf.org/html/rfc6750#section-3.1\"\n```", "```java\ncurl --location 'http://localhost:9000/oauth2/token' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'client_id=football' \\\n--data-urlencode 'client_secret=SuperSecret' \\\n--data-urlencode 'scope=football:read football:admin'\n```", "```java\n@Bean\npublic SecurityFilterChain filterChainRoles(HttpSecurity\nhttp) throws Exception {\n    return http.authorizeHttpRequests(authorize ->\n    authorize.requestMatchers(HttpMethod.POST,\n    \"football/teams/**\").hasRole(\"ADMIN\")\n    .anyRequest().authenticated())\n    .oauth2ResourceServer(oauth2 ->\n    oauth2.jwt(Customizer.withDefaults()))\n    .build();\n}\n```", "```java\nclass CustomClaimValidator implements\nOAuth2TokenValidator<Jwt> {\n    OAuth2Error error = new OAuth2Error(\"custom_code\",\n    \"This feature is only for special football fans\",\n    null);\n    @Override\n    public OAuth2TokenValidatorResult validate(Jwt jwt) {\n        if (jwt.getClaims().containsKey(\"specialFan\")){\n            return OAuth2TokenValidatorResult.success();\n        }\n        else{\n            return\n                OAuth2TokenValidatorResult.failure(error);\n        }\n    }\n}\n```", "```java\ndocker run --name spring-cache -p 6379:6379 -d redis\n```", "```java\n    spring:\n      security:\n        oauth2:\n          authorizationserver:\n            client:\n              football-ui:\n                registration:\n                  client-id: \"football-ui\"\n                  client-secret: \"{noop}TheSecretSauce\"\n                  client-authentication-methods:\n                    - \"client_secret_basic\"\n                  authorization-grant-types:\n                    - \"authorization_code\"\n                    - \"refresh_token\"\n                    - \"client_credentials\"\n                  redirect-uris:\n                    - \"http://localhost:9080/login/oauth2/code/football-ui\"\n                  scopes:\n                    - \"openid\"\n                    - \"profile\"\n                    - \"football:read\"\n                    - \"football:admin\"\n                require-authorization-consent: true\n    ```", "```java\n    User:\n        name: \"user\"\n        password: \"password\"\n    ```", "```java\n    <dependency>\n        <groupId>org.thymeleaf.extras</groupId>\n        <artifactId>thymeleaf-extras-springsecurity6\n            </artifactId>\n        <version>3.1.1.RELEASE</version>\n    </dependency>\n    ```", "```java\n    @Controller\n    public class FootballController {\n        @GetMapping(\"/\")\n        public String home() {\n            return \"home\";\n        }\n    }\n    ```", "```java\n    <!DOCTYPE HTML>\n    <html>\n    <head>\n        <title>The great football app</title>\n        <meta http-equiv=\"Content-Type\"\n            content=\"text/html; charset=UTF-8\" />\n    </head>\n    <body>\n        <p>Let's see <a href=\"/myself\"> who you are </a>.\n        You will need to login first!</p>\n    </body>\n    </html>\n    ```", "```java\n    spring:\n      security:\n        oauth2:\n          client:\n            registration:\n              football-ui:\n                client-id: \"football-ui\"\n                client-secret: \"TheSecretSauce\"\n                redirect-uri:\n                  \"{baseUrl}/login/oauth2/code/\n                  {registrationId}\"\n                authorization-grant-type:\n                  authorization_code\n                scope:\n                  openid,profile,football:read,\n                  football:admin\n            provider:\n              football-ui:\n    SecurityConfiguration and create a SecurityFilterChain bean:\n    ```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration {\n    @Bean\n    public SecurityFilterChain\n    defaultSecurityFilterChain(HttpSecurity http)\n    throws Exception {\n        http.authorizeHttpRequests(\n            (authorize) -> authorize\n            .requestMatchers(\"/\").permitAll()\n            .anyRequest().authenticated())\n            .oauth2Login(Customizer.withDefaults());\n        return http.build();\n    }\n}\n```", "```java\n    @GetMapping(\"/myself\")\n    public String user(Model model,\n    @AuthenticationPrincipal OidcUser oidcUser) {\n        model.addAttribute(\"userName\",\n            oidcUser.getName());\n        model.addAttribute(\"audience\",\n            oidcUser.getAudience());\n        model.addAttribute(\"expiresAt\",\n            oidcUser.getExpiresAt());\n        model.addAttribute(\"claims\",\n            oidcUser.getClaims());\n        return \"myself\";\n    }\n    ```", "```java\n    <body>\n        <h1>This is what we can see in your OpenId\n            data</h1>\n        <p>Your username <span style=\"font-weight:bold\"\n            th:text=\"${userName}\" />! </p>\n        <p>Audience <span style=\"font-weight:bold\"\n            th:text=\"${audience}\" />.</p>\n        <p>Expires at <span style=\"font-weight:bold\"\n            th:text=\"${expiresAt}\" />.</p>\n        </div>\n        <h2>Here all the claims</h2>\n        <table>\n            <tr th:each=\"claim: ${claims}\">\n                <td th:text=\"${claim.key}\" />\n                <td th:text=\"${claim.value}\" />\n            </tr>\n        </table>\n        <h2>Let's try to use your rights</h2>\n        <a href=\"/teams\">Teams</a>\n    </body>\n    ```", "```java\n    @GetMapping(\"/teams\")\n    public String teams(@RegisteredOAuth2AuthorizedClient(\"football-ui\") OAuth2AuthorizedClient authorizedClient, Model model) {\n        RestTemplate restTemplate = new RestTemplate();\n        HttpHeaders headers = new HttpHeaders();\n        headers.add(HttpHeaders.AUTHORIZATION,\n            \"Bearer \" + authorizedClient.getAccessToken()\n            .getTokenValue());\n        HttpEntity<String> entity = new HttpEntity<>(null,\n            headers);\n        ResponseEntity<String> response =\n            restTemplate.exchange(\n            \"http://localhost:8080/football/teams\",\n            HttpMethod.GET, entity, String.class);\n        model.addAttribute(\"teams\", response.getBody());\n       return \"teams\";\n    }\n    ```", "```java\n    spring:\n      security:\n        oauth2:\n          resourceserver:\n            jwt:\n              audiences:\n              - football\n              - football-ui\n              issuer-uri: http://localhost:9000\n    ```", "```java\n    spring:\n      data:\n        redis:\n          host: localhost\n          port: 6379\n    ```", "```java\n    server:\n      port: 9080\n    ```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-oauth2-client\n            </artifactId>\n    </dependency>\n    ```", "```java\n    spring\n      security:\n        oauth2:\n          client:\n            registration:\n              football-gmail:\n                client-id: \"replace with your client id\"\n                client-secret: \"replace with your secret\"\n                redirect-uri:\n                  \"{baseUrl}/login/oauth2/code/\n                  {registrationId}\"\n                authorization-grant-type:\n                  authorization_code\n                scope: openid,profile,email\n            provider:\n              football-gmail:\n                issuer-uri: https://accounts.google.com\n                user-name-attribute: given_name\n    ```", "```java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig {\n    }\n    ```", "```java\n    @Bean\n    @Order(1)\n    public SecurityFilterChain authorizationServerSecurityFilterChain(HttpSecurity http)\n            throws Exception{\n        OAuth2AuthorizationServerConfiguration\n            .applyDefaultSecurity(http);\n        http.getConfigurer(\n            OAuth2AuthorizationServerConfigurer.class)\n            .oidc(Customizer.withDefaults());\n        http\n            .exceptionHandling((exceptions) -> exceptions\n                .defaultAuthenticationEntryPointFor(\n                    new LoginUrlAuthenticationEntryPoint(\n                        \"/oauth2/authorization/\n                        football-gmail\"),\n                    new MediaTypeRequestMatcher(\n                        MediaType.TEXT_HTML)\n                )\n            )\n            .oauth2ResourceServer((oauth2) ->\n                oauth2.jwt(Customizer.withDefaults()));\n        return http.build();\n    }\n    ```", "```java\n    @Bean\n    @Order(2)\n    public SecurityFilterChain\n    defaultSecurityFilterChain(HttpSecurity http)\n            throws Exception {\n        http\n            .authorizeHttpRequests((authorize) ->\n                authorize\n                .anyRequest().authenticated())\n            .oauth2Login(Customizer.withDefaults());\n        return http.build();\n    }\n    ```", "```java\n    <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-oauth2-client\n          </artifactId>\n    </dependency>\n    ```", "```java\n    server:\n      port: 9080\n    spring:\n      cloud:\n        azure:\n          active-directory:\n            b2c:\n              enabled: true\n              base-uri:\n    https://sb3cookbook.b2clogin.com/\n                  sb3cookbook.onmicrosoft.com/\n              credential:\n                client-id:\n                  aa71b816-3d6e-4ee1-876b-83d5a60c4d84\n    client-secret: '<the secret>'\n              login-flow: sign-up-or-sign-in\n    logout-success-url: http://localhost:9080\n              user-flows:\n                sign-up-or-sign-in: B2C_1_SUSI\n              user-name-attribute-name: given_name\n      data:\n        redis:\n          host: localhost\n          port: 6379\n    ```", "```java\n    private final AadB2cOidcLoginConfigurer configurer;\n    public SecurityConfiguration(AadB2cOidcLoginConfigurer\n    configurer) {\n        this.configurer = configurer;\n    }\n    @Bean\n    public SecurityFilterChain\n    defaultSecurityFilterChain(HttpSecurity http) throws\n    Exception {\n        http\n            .authorizeHttpRequests((authorize) ->\n                authorize\n                .requestMatchers(\"/\").permitAll()\n                .anyRequest().authenticated())\n            .apply(configurer);\n        return http.build();\n    }\n    ```", "```java\n    <dependency>\n      <groupId>com.azure.spring</groupId>\n      <artifactId>spring-cloud-azure-starter-active-\n        directory-b2c</artifactId>\n    </dependency>\n    ```", "```java\n    spring:\n      cloud:\n        azure:\n          active-directory:\n            b2c:\n              enabled: true\n              profile:\n                tenant-id:\n                  b2b8f451-385b-4b9d-9268-244a8f05b32f\n              credential:\n                client-id:\n                  aa71b816-3d6e-4ee1-876b-83d5a60c4d84\n              base-uri: https://sb3cookbook.b2clogin.com\n              user-flows:\n                sign-up-or-sign-in: B2C_1_SISU\n    ```", "```java\n@Bean\npublic Converter<Jwt, Collection<GrantedAuthority>>\naadJwtGrantedAuthoritiesConverter() {\n    return new AadJwtGrantedAuthoritiesConverter();\n}\n@Bean\npublic JwtAuthenticationConverter\naadJwtAuthenticationConverter() {\n    JwtAuthenticationConverter converter = new\n        JwtAuthenticationConverter();\n        converter.setJwtGrantedAuthoritiesConverter(\n            aadJwtGrantedAuthoritiesConverter());\n    return converter;\n}\n```", "```java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    return http\n        .authorizeHttpRequests(authorize -> authorize\n            .requestMatchers(HttpMethod.GET,\n                \"/football/teams/**\").hasAnyAuthority(\n                \"APPROLE_football.read\",\n                \"APPROLE_football.admin\")\n            .requestMatchers(HttpMethod.POST,\n                \"/football/teams/**\").hasAnyAuthority(\n                \"APPROLE_football.admin\")\n            .anyRequest().authenticated())\n        .oauth2ResourceServer(oauth2 ->\n            oauth2.jwt(Customizer.withDefaults()))\n        .build();\n}\n```", "```java\n{\n  «aud»: «fdc345e8-d545-49af-aa1a-04a087364c8b»,\n  \"iss\": \"https://login.microsoftonline.com/b2b8f451-385b-\n    4b9d-9268-244a8f05b32f/v2.0\",\n  \"iat\": 1700518483,\n  \"nbf\": 1700518483,\n  \"exp\": 1700522383,\n  \"aio\": \"ASQA2/8VAAAAIXIjK+\n    28DPOc4epV22pKGfqdRSnps2dtReyZY7MPhpk=\",\n  \"azp\": \"aa71b816-3d6e-4ee1-876b-83d5a60c4d84\",\n  \"azpacr\": \"1\",\n  \"oid\": \"d88d83d6-421f-41e2-ba99-f49516fd439a\",\n  \"rh\": \"0.ASQAUfS4sls4nUuSaCRKjwWzL-hFw_\n    1F1a9JqhoEoIc2TIskAAA.\",\n  «roles»: [\n    \"football.read\",\n    \"football.admin\"\n  ],\n  \"sub\": \"d88d83d6-421f-41e2-ba99-f49516fd439a\",\n  \"tid\": \"b2b8f451-385b-4b9d-9268-244a8f05b32f\",\n  \"uti\": \"JSxYHbHkpUS91mwBtxNaAA\",\n  \"ver\": \"2.0\"\n}\n```"]