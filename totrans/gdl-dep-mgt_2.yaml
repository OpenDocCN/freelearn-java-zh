- en: Chapter 2. Working with Repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to define dependencies for your project.
    Those dependencies are mostly stored somewhere in a repository or a directory
    structure. A repository usually has a structure to support different versions
    for the same dependency. Also, some metadata, such as the other dependencies for
    a module, is saved in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: In our build files, we must define the location of a repository for our dependencies.
    We can mix different types of repositories, such as Maven and Ivy. We can even
    use a local filesystem as a repository. We will see how we can define and configure
    repositories in our build files.
  prefs: []
  type: TYPE_NORMAL
- en: Also, Gradle offers the option of configuring the repository layout, if the
    repository is using a custom layout. We will learn how to provide credentials
    for repositories with basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to add dependencies from a repository in a Gradle build file, we
    must explicitly add the `repositories` configuration block. Within the configuration
    block, we define the location of the repository and maybe some extra configuration.
    In the following example of a build file, we define a Maven repository with a
    custom location:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We can include several repositories in our build file. We can even mix the
    type of repositories, for example to, include both the Ivy repository and a local
    filesystem. Gradle supports the following types of repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Maven JCenter repository | This is a preconfigured repository for Bintray
    JCenter |'
  prefs: []
  type: TYPE_TB
- en: '| Maven central repository | This is a preconfigured repository for Maven Central
    |'
  prefs: []
  type: TYPE_TB
- en: '| Maven local repository | This is a preconfigured repository for the local
    Maven repository |'
  prefs: []
  type: TYPE_TB
- en: '| Maven repository | This is a to-be-configured Maven repository, which has
    a custom location |'
  prefs: []
  type: TYPE_TB
- en: '| Ivy repository | This is a to-be-configured Ivy repository, which has a location
    and layout |'
  prefs: []
  type: TYPE_TB
- en: '| Flat directory repository | This is a local filesystem repository |'
  prefs: []
  type: TYPE_TB
- en: We will see how to use these repositories in our build file later. It is good
    to realize that Gradle will try to download all artifacts from a dependency, from
    the same repository that the dependency module descriptor file is found. So, if
    we have multiple repositories defined in our build script, Gradle will still use
    the first repository that the module descriptor file is found on to download the
    artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Maven JCenter repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bintray's JCenter is a relatively new public Maven repository, where a lot of
    Maven open source dependencies are stored. It is a superset of the Maven Central
    repository and also contains dependency artifacts published directly to JCenter.
    The URL to access the repository is [https://jcenter.bintray.com](https://jcenter.bintray.com).
    Gradle provides a shortcut for JCenter, so we don't have to type the URL ourselves
    in the `repositories` configuration block. The shortcut method is `jcenter()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we define a reference to Bintray''s JCenter
    repository using the `jcenter()` shortcut:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Since Gradle 2.1, the default protocol is `https` for the JCenter repository
    URL. If we want to use the `http` protocol, we must set the `url` property for
    the repository. In the next example build file, we will redefine the `url` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Optionally, we can assign a name to the repository definition. This can be
    done for all Maven repositories, and because JCenter is also a Maven repository,
    we can set the `name` property. In the following example build file, we define
    multiple repositories and set the `name` property. We add a new task, `repositoriesInfo`,
    which will display the `name` and `URL` properties for each repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `repositoriesInfo` task, we get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Using the Maven Central repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can configure the central Maven 2 repository in the `repositories` configuration
    block. Gradle provides the shortcut method, `mavenCentral`. This configures the
    central Maven repository with the URL `https://repo1.maven.org/maven2/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build file, we will define the central Maven 2 repository
    for our build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradle 2.1 uses the `https` protocol when we use the `mavenCentral` method.
    If we want to use the `http` protocol, we can redefine the `url` property and
    use the `http://repo1.maven.org/maven2/` address. In the next example build file,
    we will redefine the `url` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides changing the `url` property, we can also set an optional `name` property
    when we use the `mavenCentral` method. In the following example build script,
    we assign a value to the `name` property. We add a new task, `repositoriesInfo`,
    to display information about the configured repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s invoke the `repositoriesInfo` task to see the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Using the Maven local repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have used Maven on our local computer before there is a great change,
    we have a local Maven cache with downloaded artifacts. We can use this local cache
    as a repository in our Gradle build, with the `mavenLocal` shortcut method. Although
    it is possible to use our local Maven cache, it is not advisable because it makes
    the build dependent on local settings. If we work on a bigger project with more
    developers, then we cannot rely on the local Maven cache on each developer's computer
    as the only repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use the `mavenLocal` shortcut method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The location of the local Maven cache is determined in the same way as Maven.
    Gradle will try to find the `settings.xml` file in `USER_HOME/.m2` or `M2_HOME/conf`,
    where the former takes precedence over the latter. If the `settings.xml` file
    is found, then the location of the local Maven repository defined in the file
    is used. If `settings.xml` cannot be found, or if the local Maven repository location
    is not defined, then the default location is `USER_HOME/.` `m2/repository`.
  prefs: []
  type: TYPE_NORMAL
- en: Using Maven repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have learned about shortcut methods to define a Maven repository. If we
    have our own Maven repository, such as Nexus or Artifactory, we can use the `maven`
    method in the `repositories` configuration block. With this method, we can define
    the `url` property to access the repository. We can see this in action in the
    following example build script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: When Gradle finds the module dependency descriptor in the Maven repository,
    then the artifacts will be searched for in this repository. If the artifacts are
    stored in another location, we use the `artifactUrls` property to specify the
    location. This way, Gradle will look for the dependency module descriptors in
    the location specified by the `url` property, and for the artifacts in the locations
    specified by the `artifactUrls` property.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example build script will define a custom Maven repository, with multiple
    locations for the artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have configured our custom Maven repository with basic authentication,
    we must provide a username and password to access the repository. In our Gradle
    build file, we set the username and password in the `credentials` block of the
    `maven` configuration. Let''s first add the username and password to the build
    file and later see how we can externalize these properties. The next example build
    file will use the `credentials` configuration block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: It is not a good idea to add the username and password to the build file, because
    this file is shared with all the developers involved in our project. We fix this
    using project properties, instead of a hardcoded username and password. The values
    of the project properties can be set via the command line with the `-P` or `--project-prop`
    options. Or, we can add the `gradle.properties` file to our project with the names
    and values of the project properties. The `gradle.properties` file must not be
    put in the version control system of our project, so that the values are private
    for the developer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example build file uses the `mavenUsername` project properties
    and `mavenPassword` for the Maven repository credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'When we execute any tasks for this script, we should provide the values for
    the project properties via the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, we can create the `gradle.properties` file in the project directory, with
    the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have multiple projects that use the same custom Maven repository, then
    we can also create a Gradle init script with the correct credentials. A Gradle
    init script runs before the build starts. In the script, we want to set the credentials
    for a Maven repository with a specific name. There are several ways to use an
    init script:'
  prefs: []
  type: TYPE_NORMAL
- en: We can use an init script directly from the command line with the `-I` or `--init-script`
    options. Here, we specify the name of the init script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We put the `init.gradle` file in the `USER_HOME/.gradle` directory. This file
    is run before every Gradle build on our computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We put a file with the`.gradle` extension in the `USER_HOME/.gradle/init.d`
    directory. All Gradle init scripts from this directory are run before every build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We put a file with the `.gradle` extension in the `GRADLE_HOME/init.d` directory.
    This way, we can package a custom Gradle distribution with init scripts that always
    need to be executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take a look at the contents of the init script in the next example init
    script file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We must change our project Gradle build file, because the credentials are now
    set via an init script. We will remove the credentials from the project build
    file. In the next example build file, we will remove the credentials and helper
    method, to set the credential properties. The credentials are set by the init
    script. The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Using the flat directory repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Gradle also allows directories to be used as repositories to solve dependencies.
    We can specify one or more directories using the `flatDir` method. Optionally,
    we can specify a name for the repository. In the next example build file, we specify
    the `lib` and `jars` directories to be used as repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When we use the flat directory repository, Gradle resolves dependency artifacts
    based on the artifact name and version. The group part of a dependency is ignored.
    If we only use flat directory repositories in our project, we can even leave out
    the group part when we configure the dependencies. Gradle uses the following rules
    to resolve a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[artifact]-[version].[ext]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[artifact]-[version]-[classifier].[ext]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[artifact].[ext]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[artifact]-[classifier].[ext]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the next example build file, we will define a flat directory repository
    and a single dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradle will resolve the following files in the `lib` directory; the first matching
    file is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pedestrian-1.0.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pedestrian-1.0-jdk16.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pedestr``ian.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pedestrian-jdk16.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Ivy repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ivy repositories allow customizable and flexible repository layout patterns.
    Gradle supports Ivy repositories, and we can configure the repository layout patterns
    in our Gradle build script. To define an Ivy repository, we use the `ivy` method
    in the `repositories` configuration block.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we define a standard Ivy repository, and
    we also set the optional `name` property for the repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The layout of an Ivy repository defines the patterns used to search module
    dependency metadata and the dependency artifacts. We can use some predefined layouts
    in our build scripts. In the previous example build file, we didn''t specify a
    layout. Gradle will then use the default `gradle` layout. The next table shows
    the different layout names we can use, their patterns to find the Ivy metadata
    XML files, and the artifacts for the dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Ivy pattern | Artifact pattern |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| gradle | `[organisation]/[module]/[revision]/ivy-[revision].xml` | `[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])`
    |'
  prefs: []
  type: TYPE_TB
- en: '| maven | `[organisation]/[module]/[revision]/ivy-[revision].xml` | `[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier])(.[ext])`
    |'
  prefs: []
  type: TYPE_TB
- en: '| ivy | `[organisation]/[module]/[revision]/[type]s/[artifact](.[ext])` | `[organisation]/[module]/[revision]/[type]s/[artifact](.[ext])`
    |'
  prefs: []
  type: TYPE_TB
- en: The `.` in `organisation` is replaced with `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use a layout, we use the `layout` method inside the `ivy` configuration.
    For example, in the next build script, we use the `maven` and `ivy` layouts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'To define a custom pattern for the Ivy XML files and the artifacts, we use
    the `pattern` layout. With this layout, we define our own patterns using the tokens
    defined by Ivy. In the following table, we see the tokens that can be used to
    build a pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Token | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [organisation] | This is the organisation name. |'
  prefs: []
  type: TYPE_TB
- en: '| [orgPath] | This is the organisation name, where `.` has been replaced by
    `/`. This can be used to configure maven2-like repositories. |'
  prefs: []
  type: TYPE_TB
- en: '| [module] | This is the module name. |'
  prefs: []
  type: TYPE_TB
- en: '| [branch] | This is the branch name. |'
  prefs: []
  type: TYPE_TB
- en: '| [revision] | This is the revision name. |'
  prefs: []
  type: TYPE_TB
- en: '| [artifact] | This is the artifact name (or ID). |'
  prefs: []
  type: TYPE_TB
- en: '| [type] | This is the artifact type. |'
  prefs: []
  type: TYPE_TB
- en: '| [ext] | This is the artifact file extension. |'
  prefs: []
  type: TYPE_TB
- en: '| [conf] | This is the configuration name. |'
  prefs: []
  type: TYPE_TB
- en: '| [originalname] | This is the original artifact name (including the extension).
    |'
  prefs: []
  type: TYPE_TB
- en: To specify an optional token, we enclose the token with parentheses (`(` and
    `)`). If the token defined between parentheses is null or empty, then the token
    is ignored. For example, the `[artifact](-[revision]).[ext]` pattern will accept
    `artifact.jar` if `revision` is not set and `artifact-1.1.jar` if `revision` is
    set.
  prefs: []
  type: TYPE_NORMAL
- en: We define a custom layout in our build script by specifying the layout with
    the `pattern` name, and adding a configuration block where we define the patterns
    for the Ivy XML files and artifacts. If we don't specify a special pattern for
    the Ivy XML files, then the artifact pattern is used. We need to define at least
    one artifact pattern. The patterns are appended to the `url` property of the repository.
    Optionally, we can set the `pattern` layout property, `m2compatible`. If the value
    is `true`, then the `.` in the `[organisation]` token is replaced with `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build script, we will define two new repositories with
    a custom layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'An alternative syntax to define custom patterns is using `artifactPattern`
    and `ivyPattern` inside the `ivy` configuration block. We don''t have to use the
    `layout` method with this definition. If we don''t specify `ivyPattern`, then
    the pattern defined with `artifactPattern` is used to find Ivy XML files. In the
    following example build script, we rewrite the repository definitions from the
    previous example build file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To specify the username and password for an Ivy repository with basic authentication,
    we use the `credentials` method, just as we did with the Maven repositories. In
    the next example build file, we will set the credentials to access an Ivy repository.
    Take a look at the section about Maven repositories to see how we can externalize
    the username and password, so that they are not part of the build script code.
    The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Using different protocols
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Maven and Ivy repositories can be accessed via several protocols. We already
    learned that we can use the `http` and `https` protocols. However, we can also
    use the `file` and `sftp` protocols. We must provide credentials when we use the
    `sftp` protocol. The `file` protocol doesn't support authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next example build file will use the `file` and `sftp` protocols to define
    the Maven and Ivy repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to define repositories in your Gradle build
    scripts. You saw how to use predefined shortcut methods: `jcenter`, `mavenCentral`,
    and `mavenLocal`. To access a Maven repository at a custom location, we can use
    the `url` property and the `maven` method. When we configure an Ivy repository,
    we have the most control. We can specify a URL, and also the layout pattern of
    the repository. You learned that you can also use a flat directory repository
    in your build scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: You saw how to provide credentials for repositories with basic authentication.
    You now know how to save the username and password outside your build script.
    Finally, you learned how to use different transport protocols to access repositories.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how Gradle will resolve dependencies.
  prefs: []
  type: TYPE_NORMAL
