- en: Future Directions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we focused on best practices with some exciting utilities
    provided by the Java 9 platform. Specifically, we covered UTF-8 Property Files,
    Unicode 7.0.0, Linux/AArch64 port,Â multi-resolution images, and common locale
    data repository.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter provides an overview of the future development of the Java platform,
    beyond Java 9\. We will look at what is planned for Java 10 and what further changes
    we are likely to see in the future. Each potential change to the Java platform
    will be characterized as targeted, submitted, or drafted. Targeted refers to changes
    that have been earmarked for Java 10\. Submitted refers to a change that has been
    submitted but does not target a specific version of the Java platform. Changes
    that are drafted are still on the drawing board and are not ready to be submitted
    or designated as targeted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, this chapter covers future changes to the Java platform grouped
    in the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: JDK changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Virtual Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Special projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Future Changes to the JDK
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Java Development Kit is at core of the Java platform and is continually
    being updated with new capabilities and efficiencies realized with each release.
    Looking beyond Java 9, we see a multitude of possible changes to the JDK. Many
    of these changes will be implemented in Java 10 and others might be saved for
    later releases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes to the JDK in Java 10 and beyond are presented in the following
    proposal categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Targeted for Java 10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Submitted Proposals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drafted Proposals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK changes targeted for Java 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At the time of this book''s publication, the following listed **Java Development
    Kit** (**JDK**)-related changes were slated for inclusion in the Java 10 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Repository consolidation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native-Header Tool Removal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Repository consolidation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Java 9 platform consists of eight distinct repositories as depicted in
    the following diagram. In Java 10, we should see all of these repositories combined
    into a single repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8b331a6-e0a4-4c43-849c-f6cfb85d0253.png)'
  prefs: []
  type: TYPE_IMG
- en: Repository consolidation should help streamline development. Moreover, it should
    increase the ease of maintaining and updating the Java platform.
  prefs: []
  type: TYPE_NORMAL
- en: You can get an early look at this repository at [http://hg.openjdk.java.net/jdk10/consol-proto/](http://hg.openjdk.java.net/jdk10/consol-proto/).
  prefs: []
  type: TYPE_NORMAL
- en: Native-header tool removal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The javah tool is used to generate C header files and C source files from Java
    classes. C programs can reference the generated header files and source files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a look at the life and death of the javah tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb5e9476-4840-4f07-8d4c-ce659e98a143.png)'
  prefs: []
  type: TYPE_IMG
- en: As illustrated earlier, the javah tool was introduced with Java 7 and its functionality
    was included in the javac that came with JDK8\. This functionality was reportedly
    superior compared to that of the original tool. In JDK 9, developers received
    warnings each time the javah tool was used, informing them of its pending removal
    from the JDK. The tool is slated for removal in JDK 10.
  prefs: []
  type: TYPE_NORMAL
- en: JDK-related submitted proposals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following Java Enhancement Proposals have been submitted, but have not
    yet been committed for delivery as part of the Java 10 platform. Oracle has set
    a two-year release plan, so it is safe to assume that, many if not all, of the
    proposals listed in this section and beyond have a chance of being part of the
    Java 10 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Parallelize the Full GC Phase in CMS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST APIs for JMX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support Heap Allocation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallelize the Full GC Phase in CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](d29f6411-3e8f-4bd3-8ee9-1dc0314d8e75.xhtml), *Leveraging the
    New Default G1 Garbage Collector*, we reviewed the changes to the **Concurrent
    Mark Sweep** (**CMS**) garbage collector. CMS garbage collection involves scanning
    heap memory, marking objects for removal and then making a sweep to actually remove
    those objects. The CMS method of garbage collection is essentially an upgraded
    "Mark and Sweep" method; which you can refer to [Chapter 7](d29f6411-3e8f-4bd3-8ee9-1dc0314d8e75.xhtml),
    *Leveraging the New Default G1 Garbage Collector*, for additional information.
  prefs: []
  type: TYPE_NORMAL
- en: 'The current downside to CMS garbage collection is that the serial mark and
    sweep is implemented using a single thread. This results in unwanted pause times.
    Currently, full garbage collection takes place in four phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Marking phase**: Mark objects for collection'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Forwarding phase**: Determine where live objects will be relocated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adjust pointer phase**: Updates points based on new locations of live objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compaction phase**: Moves objects to designated locations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The future plan for CMS is to implement the mark and sweep so they can be performed
    in parallel. The change is not to the garbage collection algorithm. Instead, each
    of the above listed phases will be parallelized. This will result in greater efficiencies
    for CMS garbage collection and hopefully eliminate, or significantly reduce, pause
    times.
  prefs: []
  type: TYPE_NORMAL
- en: REST APIs for JMX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**), RESTful programming, and RESTful
    API use a client/server cacheable communications protocol, usually HTTP. REST
    is a common software architecture for developing networked applications.'
  prefs: []
  type: TYPE_NORMAL
- en: One of the future changes to the Java platform is to provide RESTful web interfaces
    to MBeans.
  prefs: []
  type: TYPE_NORMAL
- en: '**Managed Bean** (**MBean**) is an object in Java that represents a resource
    to be managed. These resources could include a specific hardware device, an application,
    a service, or other component.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The interfaces will permit MBeans to use the following HTTP methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CONNECT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPTIONS`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRACE`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MBeans are managed using **Java Management Extensions** (**JMX**). The JMX
    architecture has three levels, as depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/69a5ff4d-645f-4bb4-9ca1-9016659e564c.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the REST adapter is part of the **Distributed Services** level.
    That level contains both connectors and adapters. The connectors provide mirroring
    of agent level interfaces to remote clients. The adapters, on the other hand,
    convert the interfaces using a different protocol. The future change will be to
    transform the services at the **Agent** level to REST APIs.
  prefs: []
  type: TYPE_NORMAL
- en: Support heap allocation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A proposed future change is to allow developers to designate alternate memory
    devices for the Java heap. Specifically, the proposal is to permit developers
    to designate non-DRAM memory for the Java heap. This change takes advantage of
    the decreasing cost of memory and memory devices.
  prefs: []
  type: TYPE_NORMAL
- en: Implementation is likely to use an `AllocateHeapAt` flag.
  prefs: []
  type: TYPE_NORMAL
- en: JDK-related drafted proposals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section covers several JDK-related proposals that, at the time of this
    book's publication, were in the draft phase. That suggests they might not be fully
    analyzed or might even be cancelled. That being said, it is likely that each of
    these will move from drafted, to submitted, and then to targeted for the Java
    10 platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'Draft proposals covered in this section are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Finalization promptness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java memory model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreign function interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Isolated methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reduce metaspace waste
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve IPv6 support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unboxed argument lists for method handles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced MandelblotSet Demo Using Value Types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Efficient Array Comparison Intrinsics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finalization promptness
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Java language includes finalization to clean up objects that were unreachable
    by garbage collection. The proposed change is to make this process quicker and
    will require modifications to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ReferenceHandleThread`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FinalizerThread`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`java.lang.ref.Reference`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional changes related to increasing the promptness of finalization includes
    the creation of a new API. The following graphic details how the API will be able
    to implement GC and runtime actions, and then inform that finalization needs to
    take place. This certainly should result in faster processing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b7166659-6e03-4a2c-811f-3eae26bafe3c.png)'
  prefs: []
  type: TYPE_IMG
- en: Java memory model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is a continuing effort to keep **Java''s memory model** (**JMM**) updated.
    Current efforts are focused on several areas to include:'
  prefs: []
  type: TYPE_NORMAL
- en: Shared memory concurrency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM concurrency support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JDK components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Expected results of JMM-related engineering efforts are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Improved formalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JVM voverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extended scope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C11/C++11 compatibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation guidance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tool support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foreign Function Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Foreign Function Interfaces** (**FFI**) are software APIs that permits programs
    to call methods/functions from a program written in a different language. In an
    upcoming version of the JDK, we are apt to see an FFI that allows developers to
    call upon shared libraries and operating-system kernels directly from java methods.
    The proposed FFI will reportedly also enable developers to manage native memory
    blocks.'
  prefs: []
  type: TYPE_NORMAL
- en: The new FFI will be similar to **Java Native Access** (**JNA**) and **Java Native
    Runtime** (**JNR**). JNA is a library that permits access to native shared libraries
    without having to use the **Java Native Interface** (**JNI**). JNR is a Java API
    that is used for calling native code. The proposed FFI will permit and optimize
    native method calls as well as optimized native memory management.
  prefs: []
  type: TYPE_NORMAL
- en: Isolated methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `MethodHandles.Lookup` class is part of the `java.lang.invoke` package.
    We use lookup objects to create method handles and a lookup class to access them.
    Here is the header for the lookup class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Future changes to the `MethodHandles.Lookup` class will support the loading
    of method byte codes without the need for an attached class. Furthermore, these
    methods will be referenced using method handles. The class will have a new `loadCode`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing metaspace waste
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Currently, when metaspace chunks are freed, they cannot be used as different
    sized chunks. So, if metaspace chunk A was freed and was of size X, that space
    cannot be reused for a metaspace chunk greater than or less than size X. This
    results in a tremendous amount of unusable metaspace waste. This can also lead
    to out-of-memory errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'A future change to the JDK will resolve this issue by increasing the reuse
    of metaspace chunks. The change will support the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: Allow neighboring chunks to form a larger chunk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allow larger chunks to be divided into smaller chunks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This proposed change resolves the issue by ensuring smaller chunks can be reused
    and that larger chunks are not wasted as they can be split to support the reuse
    of smaller chunks.
  prefs: []
  type: TYPE_NORMAL
- en: Improving IPv6 support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Internet Protocol version 6** (**IPv6**) is the current version of the Internet
    Protocol. The Internet Protocol provides the identification and location schema
    that enables Internet traffic routing. IPv6 is considered an Internet layer protocol
    that is sued by packet-switched networking.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the history of the Internet Protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b34a14d5-d47e-4114-91f0-a22cc1873f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'IPv6 is the replacement for IPv4 and has several changes that the Java platform
    should support. Key IPv6 changes from IPv4 are categorized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Jumbograms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Larger address space
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multicasting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network-layer security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Options extensibility
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Privacy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified router processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stateless address auto-configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As the Internet continues to transition from IPv4 to IPv6, the following cases
    are possible and should all be supported in the Java 10 platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Multiple versions of IPv4 exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One version of IPv6 exists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple versions of IPv6 exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple versions of IPv4 and one version of IPv6 exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple versions of IPv4 and IPv6 exist
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unboxed argument lists for method handles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The way in which unboxed argument lists are currently handled can lead to processing
    inefficiencies. This is especially true when we use `Object[]` or `List<object>`
    as variable-length argument lists. Java uses `java.lang.invoke` to transform the
    method calls using boxing. In Java, autoboxing is when the compiler automatically
    converts primitive types and their corresponding object wrapper classes. Here
    is the list of wrapper classes along with the corresponding primitive type:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Wrapper class** | **Primitive type** |'
  prefs: []
  type: TYPE_TB
- en: '| Boolean | boolean |'
  prefs: []
  type: TYPE_TB
- en: '| Byte | byte |'
  prefs: []
  type: TYPE_TB
- en: '| Character | char |'
  prefs: []
  type: TYPE_TB
- en: '| Double | double |'
  prefs: []
  type: TYPE_TB
- en: '| Float | float |'
  prefs: []
  type: TYPE_TB
- en: '| Integer | int |'
  prefs: []
  type: TYPE_TB
- en: '| Long | long |'
  prefs: []
  type: TYPE_TB
- en: '| Short | short |'
  prefs: []
  type: TYPE_TB
- en: 'As you can see from the following illustration autoboxing occurs when we go
    from primitive values to an object of the associated wrapper class and, when we
    go from an object of a wrapper class to primitive values it is called unboxing:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ce771a6-9308-4192-a19e-62412b5b7730.png)'
  prefs: []
  type: TYPE_IMG
- en: The inefficiencies are due to mismatches between the argument's list actual
    types and the array or list encasing them. In a future Java release, these inefficiencies
    will be removed. A new `ArgumentList` class will be added to the Java platform
    that polymorphically boxes valid arguments lists into a heap node.
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced MandelblotSet demo using value types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This low priority Java Enhancement Proposal is likely to be implemented in Java
    10 as its scope is limited. The plan is to develop a sample Java application that
    demonstrates improvements in memory and performance specific to using Valhalla
    project components, value types, and generics instead of primitive types.
  prefs: []
  type: TYPE_NORMAL
- en: Valhalla project components refer to user-defined custom immutable primitive
    types as value types.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about value types in the Java Virtual Machine section of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A Mandelbrot set is a specific example of fractal mathematics used in chaos
    theory. The sample MandelbrotSet that accompanied JDK 8 provides a comparison
    of parallel and sequential data streams. In Java 10 or beyond, the sample MandelbrotSet
    will be updated to show performance and memory efficiencies between using Valhalla
    project components, value types and generics as opposed to primitive types.
  prefs: []
  type: TYPE_NORMAL
- en: Efficient array comparison intrinsics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A future change to the Java platform will be to include a method for comparing
    arrays. Currently, this is something developers have to code on their own. The
    change will be incorporated by adding something similar to the `compareTo` method
    in `java.util.Arrays`.
  prefs: []
  type: TYPE_NORMAL
- en: Although specifics are not available, the prospect of being able to compare
    arrays using native functionality is exciting. This is a component that will save
    many developers time. This is likely to be realized in the Java 10 platform release.
  prefs: []
  type: TYPE_NORMAL
- en: Future changes to the Java Compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are two notable draft changes to the Java platform, specifically the
    Java Compiler. These Java Enhancement Proposals are listed as follows and detailed
    in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Policy for retiring javac `-source` and `-target` options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pluggable static analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Policy for retiring javac -source and -target options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A formal draft proposal has been submitted to define a policy for retiring `-source`
    and `-target` options. This effort is to help reduce maintenance costs of the
    compiler. The `-source` and `-target` options were provided to ease development
    efforts, but not formally required by any standards. Starting with the Java 9
    platform, these target options are not recognized.
  prefs: []
  type: TYPE_NORMAL
- en: The new policy is called "one plus three back" which means that the current
    version will be supported as well as the three previous releases. This policy
    will persist with JDK 10.
  prefs: []
  type: TYPE_NORMAL
- en: Pluggable static analyzers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ongoing research Java Enhancement Proposal was initiated in the summer of
    2013 as an exploratory measure and future support for a full Java Enhancement
    Proposal to empower developers to define extensions that can, at compile time,
    conduct the arbitrary static analysis. The research is to see how a pluggable
    static type analyzer framework can be implemented for the Java Compiler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The goals of the research are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Collect static analyzer requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyze static analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine the requirements for a framework that supports static analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement and test
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final outcome of the ongoing research will be either to submit a feature
    Java Enhancement Proposal or to make the recommendation that pursuit of the feature
    cease.
  prefs: []
  type: TYPE_NORMAL
- en: Future Changes to the Java Virtual Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Several new features and enhancements to the Java Virtual Machine (JVM) and
    core libraries have been submitted and drafted. It is likely that at least some
    of these features and enhancements will be realized in the Java 10 platform, and
    others will be saved for later releases.
  prefs: []
  type: TYPE_NORMAL
- en: JVM-related submitted proposals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three Java Enhancement Proposals that have been submitted. While,
    not currently earmarked for Java 10, it is likely that we will see the changes
    when Java 10 is released. The three proposals are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Container aware Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable execution of Java methods on GPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Epsilon GC: The arbitrarily low overhead gGarbage (non-) collector'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Container aware Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An effort is being made so the JVM and core libraries are aware when they are
    running in a container. Moreover, to be adaptive in the use of available system
    resources. This feature is especially relevant with the ubiquitous nature of cloud
    computing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two major components of the proposed feature:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Detection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determine if Java is running inside a container
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Container resource exposure:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose container resources limits
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Expose container resource configuration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Several configuration status points have been initially identified:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **General** | **CPU-related** | **Memory-related** |'
  prefs: []
  type: TYPE_TB
- en: '| `isContainerized` | CPU Period | Block I/O Device Weight |'
  prefs: []
  type: TYPE_TB
- en: '|  | CPU Quota | Block I/O Weight |'
  prefs: []
  type: TYPE_TB
- en: '|  | CPU Set Memory Nodes | Current Memory Usage |'
  prefs: []
  type: TYPE_TB
- en: '|  | CPU Sets | Device I/O Read Rate |'
  prefs: []
  type: TYPE_TB
- en: '|  | CPU Usage | Device I/O Write Rate |'
  prefs: []
  type: TYPE_TB
- en: '|  | CPU Usage Per CPU | Max Memory Usage |'
  prefs: []
  type: TYPE_TB
- en: '|  | Number of CPUs | Maximum Kernal Memory |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Memory Swappiness |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | OOM Kill Enabled |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | OOM Score Adjustment |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Shared Memory Size |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Soft Memory Limit |'
  prefs: []
  type: TYPE_TB
- en: '|  |  | Total Memory Limit |'
  prefs: []
  type: TYPE_TB
- en: Initially, this feature is scheduled to support Docker on Linux-64\. A likely
    scenario is that this feature be released with Java 10 with sole support for Docker
    on Linux-64\. Then, feature support will be expanded in subsequent releases of
    the Java platform.
  prefs: []
  type: TYPE_NORMAL
- en: Enable execution of Java methods on GPU
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enabling the seamless ability for Java applications to take advantage of GPUs
    is the subject of project Sumatra. The goal is to use Java's Stream API in parallel
    and the lambda programming model. It makes great sense for us to exploit the processing
    power and efficiency of GPUs.
  prefs: []
  type: TYPE_NORMAL
- en: 'The overarching goal is to make this feature easy to use for developers. The
    feature will be implemented with the following characteristics:'
  prefs: []
  type: TYPE_NORMAL
- en: Do not change the syntax of the Java parallel stream API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hardware and software stacks should be automatically detected
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic detection and analysis to determine if using the GPU makes sense from
    a performance standard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide CPU execution when offloading processing to a GPU fails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be no performance degradation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be no new security risks introduced by this feature
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be memory persistence between the CPU and GPU
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key benefit of this Java Enhancement Proposal will be performance improvements
    for our Java applications.
  prefs: []
  type: TYPE_NORMAL
- en: Epsilon GC - The arbitrarily low overhead garbage (non-) collector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 7](d29f6411-3e8f-4bd3-8ee9-1dc0314d8e75.xhtml), *Leveraging the
    New Default G1 Garbage Collector*, we detailed the enhancements to Java's Garbage
    Collection with the release of the Java 9 platform. In the spirit of continuous
    improvement, a Java Enhancement Proposal has been submitted to develop a garbage
    collection to specifically handle memory allocation. This garbage collector will
    signal the JVM to shutdown when no more memory is available on the Java heap.
  prefs: []
  type: TYPE_NORMAL
- en: The goal is for this garbage collector to be passive and use very limited overhead.
    The introduction of this garbage collection is not intended to degrade performance.
  prefs: []
  type: TYPE_NORMAL
- en: This change will not impact current garbage collectors.
  prefs: []
  type: TYPE_NORMAL
- en: JVM-related drafted proposals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following Java Enhancement Proposals have been drafted for a future version
    of the Java platform and are detailed in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide stable USDT probe points on JVM compiled methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrent Monitor Deflation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low-overhead way of sampling Java heap allocations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diagnostic Command Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enhanced Class Redefinition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enable NUMA mode by default when appropriate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Value objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Align JVM Access Checks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide stable USDT probe points on JVM compiled methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**User-level Statistically Defined Tracing** (**USDT**) is used to insert probe
    points to mark the entry and exit of methods. Compilers then permit a handshake
    with tracing tools so that those tools can discover the probe points and manipulate
    them.'
  prefs: []
  type: TYPE_NORMAL
- en: Common tracing tools are Dtrace and **Berkeley Packet Filters** (**BPF**).
  prefs: []
  type: TYPE_NORMAL
- en: The Java Virtual Machine, even with JVM 9, does not support this technology
    set. The current lack of support stems from how the JVM generates compiled code;
    it does this dynamically without any static **Executable Linkable Files** (**ELFs**).
    Tracing tools need the ELFs to work. An additional mitigating factor is that the
    JVM dynamically patches its own generated code which does not support external
    patching.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a future Java release, likely Java 10, the **JVMTI** (**JVM Tools Interface**)
    will be modified to support probe tools to perform their standard operations on
    the JVM''s dynamically compiled code. Provisionally identified changes to JVMTI
    APIs include:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding patch points or method entry and exit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The enumeration of the compiled methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State change notifications on compiled method load
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Toggle trace points on/off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making chunks of compiled methods inspectable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The good news is that there will not need to be any changes to how Java code
    is compiled. It can already be patched, so the required functionality will be
    created by modifying the USDT API as well as a few changes to the JVM.
  prefs: []
  type: TYPE_NORMAL
- en: Concurrent monitor deflation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A monitor, in our context, is a synchronized mechanism that controls concurrent
    access to an object. Monitors help prevent multiple threads from accessing a monitored
    object at the same time. The JVM automatically switches between three monitor
    implementation methods. The three implementation methods are illustrated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b68166a9-783d-4b9c-9ab9-d3fa74e08c06.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial lock of a Java object uses biased locking. That method ensures only
    the locking thread can lock the object. With this approach, the JVM installs a
    thread pointer in the Java object. When a second thread attempts to lock the Java
    object, the JVM switches to the basic locking monitor implementation method. This
    second method uses **compare-and-swap** (**CAS**) operations. When a CAS operation
    fails, such as when a second thread attempt to lock the Java object, the JVM switches
    to the third monitor implementation method. That method is a full-blown monitor.
    This method requires native heap storage which is referred to as the monitor being
    inflated.
  prefs: []
  type: TYPE_NORMAL
- en: The purpose of the Concurrent Monitor Deflation Java Enhancement Proposal is
    to perform monitor deflation while the threads are running. This will decrease
    the JVM-induced pause times.
  prefs: []
  type: TYPE_NORMAL
- en: Provide a low-overhead way of sampling Java heap allocations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mismanagement of Java heaps can result in heap exhaustion, and insufficient
    memory due to memory fragmentation (GC thrashing). In a future release of Java,
    most likely Java 10, we will have a means of sampling Java heap allocations. This
    will be implemented by enhancing the **Java Virtual Machine Tools Interface**
    (**JVMTI**). The resulting functionality will provide an extremely low-overhead
    solution.
  prefs: []
  type: TYPE_NORMAL
- en: Diagnostic Command Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 137, Diagnostic Command Framework, proposes a framework
    be created for sending diagnostic commands to the Java Virtual Machine.
  prefs: []
  type: TYPE_NORMAL
- en: The framework will include a **Java Management Extension** (JMX) interface,
    which will permit remote issuing of diagnostic commands via a JMX connection.
  prefs: []
  type: TYPE_NORMAL
- en: The JRocket Mission Control tools already have this feature successfully implemented.
    This served as proof of concept and it is therefore extremely likely that this
    enhancement will be part of the Java 10 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Enhanced Class Redefinition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java Enhancement Proposal 159, Enhanced Class Redefinition, calls for enhanced
    JVM capabilities in regards to class redefinition at runtime. Specifically the
    proposal includes the following class redefinition operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding super types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding static fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding instance fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing static fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Removing instance fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Current JVM class redefinition capabilities are limited to method swapping.
    This is viewed as extremely restrictive. With the new proposed enhancement, developers
    will not have to restart their applications after changes. This is especially
    beneficial when dealing with large and distributed systems.
  prefs: []
  type: TYPE_NORMAL
- en: Enable NUMA mode by default when appropriate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java Enhancement Proposal 163, enable NUMA mode by default when appropriate.
    This proposal is only applicable to NUMA hardware. The intent is to have the JVM
    enable the following flag when it detects NUMA hardware:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This flag can currently be evoked manually. With the proposed enhancement, it
    will be evoked automatically by the JVM when it has detected that it is running
    on a NUMA piece of hardware.
  prefs: []
  type: TYPE_NORMAL
- en: '**Non-Uniform Memory Access** (**NUMA**) is a memory model used in computer
    multiprocessing. With this memory model, access time is dependent on the memory
    location relative to that of the processor.'
  prefs: []
  type: TYPE_NORMAL
- en: This will be an easy enhancement to implement and is likely to be part of the
    Java 10 platform release.
  prefs: []
  type: TYPE_NORMAL
- en: Value objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 169, value objects, intended to provide the necessary
    JVM infrastructure to permit working with objects that are immutable as well as
    objects that are without reference. This new infrastructure will allow for the
    efficient by-value computation with non-primitive data types.
  prefs: []
  type: TYPE_NORMAL
- en: 'The set of goals for this proposal include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: More closely align `java.lang.Integer` and `int` semantics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make Java data structures more portable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Support abstract data types with a performance similar to that of Java primitive
    data types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User-defined
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Library-defined
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimize parallel computations by enabling function-style computation with pure
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Improve support for:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complex numbers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Vector values
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tuples
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Increase safety and security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrease "defensive copying"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One of the stated implementation strategies is to add a `lockPermanently` operation.
    It will get passed an Object and then mark that Object as both immutable and unaliasable.
    The concept of a permanently locked object stipulates that:'
  prefs: []
  type: TYPE_NORMAL
- en: Fields cannot be changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elements of an array cannot be changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No synchronization is possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''Waiting'' methods cannot be evoked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '''Notifying'' methods cannot be evoked'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity hash codes inquiries are not permitted
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pointer equality checks cannot be performed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is likely to be one of the more popular additions to the Java 10 platform.
  prefs: []
  type: TYPE_NORMAL
- en: Align JVM Access Checks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java Enhancement Proposal 181, Align JVM Checks with Java Language Rules for
    Nested Classes, focuses on the need to align JVM access checking rules with Java
    language rules, specifically for constructors, fields, and methods in nested classes.
    This will be accomplished by partitioning related classes in nests. Class files
    will be able to access private names of other class files in the same nest.
  prefs: []
  type: TYPE_NORMAL
- en: Nests will share an access control context. With the advent of nests, access
    bridges will not be required. The bulk of the change will be to the JVM's access
    rules.
  prefs: []
  type: TYPE_NORMAL
- en: Future Changes to JavaX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `Javax.*` packages are the subject of two specific Java Enhancement Proposals
    that have been submitted for a future Java platform release. Those proposals are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: JMX specific annotations for registration of managed resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modernize the GTK3 Look and Feel implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMX specific annotations for registration of managed resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The draft Java Enhancement Proposal titled, JMX specific annotations for registration
    of managed resources, will provide a set of annotations for registration and configuration
    of **MBeans** (**Managed Bean**).
  prefs: []
  type: TYPE_NORMAL
- en: An MBean is a Java Object representing a manageable resource (app, service,
    component, or device).
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this proposal is to lessen the burden on developers in the registration
    and configuring of MBeans. In addition, the source code readability will increase
    by ensuring all MBean declaration components are co-located.
  prefs: []
  type: TYPE_NORMAL
- en: The JMX specific annotations will be located in the `javax.management.annotations`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: This Java Enhancement Proposal has been specifically planned for Java 11\. Although,
    there is a possibility that it could be redesigned for Java 10.
  prefs: []
  type: TYPE_NORMAL
- en: Modernize the GTK3 Look and Feel Implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GTK3 is a widget toolkit used for creating graphical user interfaces, formally
    known as the GIMP toolkit. The draft Java Enhancement Proposal titled, Modernize
    the GTK3 Look and Feel implementation, calls for the rewriting of the current
    GTK2 Look and Feel so that it uses GTK3 instead.
  prefs: []
  type: TYPE_NORMAL
- en: GTK3 implementation will not replace GTK2\. It is important to note that one
    or the other, not both of these can be used at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: You can access the GTK3 reference manual at [https://developer.gnome.org/gtk3/stable/](https://developer.gnome.org/gtk3/stable/).
  prefs: []
  type: TYPE_NORMAL
- en: Ongoing Special Projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Java Enhancement Proposals present design and implementation changes to the
    Java platform. The criteria for a JEP being drafted is that the work must meet
    at least one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: At least two weeks of engineering work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signifies a significant change to the JDK
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Represents a high demand issue for developers or customers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Projects, on the other hand, represent collaborative efforts that are sponsored
    by one of the following groups:'
  prefs: []
  type: TYPE_NORMAL
- en: 2D Graphics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adoption
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AWT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compatibility and specification review
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Conformance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Core Libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Governing Board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HotSpot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Internationalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JMX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NetBeans Projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Porters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serviceability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sound
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Groups are formal and new ones can be proposed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following listed active projects represent possible future enhancement
    areas to the Java platform. Brief information about each project is provided later
    in this section and provides insight into general areas of future changes:'
  prefs: []
  type: TYPE_NORMAL
- en: Annotations pipeline 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio Synthesis Engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caciocavallo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common VM Interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiler Grammar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Da Vinci Machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Device I/O
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HarfBuzz Integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kona
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OpenJFX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Panama
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shenandoah
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotations pipeline 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project explores improvements to how annotations are handled within the
    Java compiler pipeline. There is no intention to propose changing specifications;
    rather, the focus is on performance enhancements.
  prefs: []
  type: TYPE_NORMAL
- en: Audio Synthesis Engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project is looking at the creation of a new midi synthesizer for the JDK.
    The current midi synthesizer belongs to a licensed library. The working group
    would like to see the new midi synthesizer as an open source JDK asset.
  prefs: []
  type: TYPE_NORMAL
- en: Caciocavallo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Caciocavallo project aims to improve the OpenJDK **Abstract Windows Toolkit**
    (**AWT**) internal interfaces. This extends to 2D subsystems. The proposed improvement
    stands to ease the way AWT is ported to new platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Common VM Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Common VM Interface project has the goal of documenting the VM interface
    for OpenJDK. This should make it easier for Classpath VMs and other VMs to use
    OpenJDK.
  prefs: []
  type: TYPE_NORMAL
- en: Compiler Grammar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Compiler Grammar project is working on an experimental Java Compiler that
    is based on ANTLR grammar. **ANTLR**, **Another Tool for Language Recognition**,
    is a parser that reads, processes, and executes structured text or binary files.
    The project team hopes this Java Compiler will replace the current one as it uses
    a hand-written parser, **LALR** (**Look-Ahead Left to Right**). The LALR parser
    has been identified by the project group as fragile and difficult to extend.
  prefs: []
  type: TYPE_NORMAL
- en: Da Vinci Machine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Da Vinci Machine Project, represents the effort to extend the JVM with support
    for non-Java languages. Current efforts are focused on allowing the new languages
    to exist alongside Java in the JVM. Performance and efficiency are key characteristics
    of the effort.
  prefs: []
  type: TYPE_NORMAL
- en: Device I/O
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This project intends to provide access to generic peripheral devices via a
    Java-level API. The initial list of peripheral devices the project team wants
    to support include:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GPIO** (**General Purpose Input/Output**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I2C** (**Inter-Integrated Circuit Bus**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SPI** (**Serial Peripheral Interface**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**UART** (**Universal Asynchronous Receiver/Transmitter**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Graal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Graal project has the goal of exposing VM functionality via Java APIs. This
    exposure will permit developers to write, in Java, dynamic compilers for a given
    language runtime. This effort includes the development of a multi-language interpreter
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: HarfBuzz Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The HarfBuzz Integration project hopes to integrate the HarfBuzz layout engine
    into the Java Development Kit. This is intended to replace the ICU layout engine
    with the HarfBuzz layout engine. The ICU layout engine has been deprecated, solidifying
    the importance of this project's future success.
  prefs: []
  type: TYPE_NORMAL
- en: Kona
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Kona project, is working to define and implement Java APIs to support the
    **Internet of Things** (**IoT**) domain. This includes networking technologies
    and protocols. Although not stated, safety and security will be paramount to this
    effort's implementation success.
  prefs: []
  type: TYPE_NORMAL
- en: OpenJFX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are not many details available regarding the OpenJFX project. The stated
    goal of this project is to create the next-generation Java client toolkit. Based
    on the project title, it can be assumed that the group wants to create an OpenJFX
    version of JavaFX, which is a set of packages used to create rich internet applications.
  prefs: []
  type: TYPE_NORMAL
- en: Panama
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Project panama is focused on enhancing the connections between JVM and non-Java
    APIs. The project includes the following selected components:'
  prefs: []
  type: TYPE_NORMAL
- en: Native function calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native data access from JVM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native data access inside JVM heap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New data layouts in JVM heap
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API extraction tools for header files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The project team has generated a repository tree that matches JDK 9's structure.
    This significantly increases the likelihood of the project's success.
  prefs: []
  type: TYPE_NORMAL
- en: Shenandoah
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Project Shenandoah has the goal of significantly reducing the pause times with
    garbage collection operations. The approach is to have more garbage collection
    operations run concurrently with the Java application. In [Chapter 7](d29f6411-3e8f-4bd3-8ee9-1dc0314d8e75.xhtml),
    *Leveraging the New Default G1 Garbage Collector* you read about CMS and G1\.
    The Shenandoah project intends to add concurrent compaction to the possible garbage
    collection approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we provided an overview of the future developments of the Java
    platform, beyond Java 9\. We looked at what is planned for Java 10 and what further
    changes we are likely to see beyond Java 10\. Each potential change to the Java
    platform was characterized as targeted, submitted, or drafted. Specifically, we
    covered future changes to the Java platform grouped in the following categories:
    JDK Changes, Java Compiler, Java Virtual Machine, JavaX, and special projects.'
  prefs: []
  type: TYPE_NORMAL
