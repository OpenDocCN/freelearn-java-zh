["```java\n    double a = 3;\n    double b = 4;\n    double m = 0; // variable for the minimum\n    ```", "```java\n    // string to be printed\n    String r = \"The minimum of numbers: \" + a + \" and \" + b + \" is \";\n    ```", "```java\n    // mathematical operation\n    m = Math.min(a,b);\n    ```", "```java\n    System.out.println(r + m); // print out the results\n    ```", "```java\n    public class Activity1 {\n        public static void main(String[] args) {\n            if (args.length < 2) {\n                System.err.println(\"Error. Usage is:\");\n                System.err.println(\"Activity1 systolic diastolic\");\n                System.exit(-1);\n            }\n    ```", "```java\n            int systolic  = Integer.parseInt(args[0]);\n            int diastolic = Integer.parseInt(args[1]);\n    ```", "```java\n            System.out.print(systolic + \"/\" + diastolic + \" is \");\n            if ((systolic <= 90) || (diastolic <= 60)) {\n                System.out.println(\"low blood pressure.\");\n            } else if ((systolic >= 140) || (diastolic >= 90)) {\n                System.out.println(\"high blood pressure.\");\n            } else if ((systolic >= 120) || (diastolic >= 80)) {\n                System.out.println(\"pre-high blood pressure.\");\n            } else {\n                System.out.println(\"ideal blood pressure.\");\n            }\n        }\n    }\n    ```", "```java\n    public int wordCount ( String s ) {\n        int count = 0;  // variable to count words\n        // if the entry is empty or is null, count is zero\n        // therefore we evaluate it only otherwise\n        if ( !(s == null || s.isEmpty()) ) {\n            // use the split method from the String class to\n            // separate the words having the whitespace as separator\n            String[] w = s.split(\"\\\\s+\");\n            count = w.length;\n        }\n        return count;\n    }\n    ```", "```java\n    public int symbolCount ( String s, boolean withSpaces ) {\n        int count = 0;  // variable to count symbols\n        // if the entry is empty or is null, count is zero\n        // therefore we evaluate it only otherwise\n        if ( !(s == null || s.isEmpty()) ) {\n            if (withSpaces) {\n                // with whitespaces return the full length\n                count = s.length();\n            } else {\n                // without whitespaces, eliminate whitespaces\n                // and get the length on the fly\n                count = s.replace(\" \", \"\").length();\n            }\n        }\n        return count;\n    }\n    ```", "```java\n    public int getFrequency ( String s, char c ) {\n        int count = 0;\n        // if the entry is empty or is null, count is zero\n        // therefore we evaluate it only otherwise\n        if ( !(s == null || s.isEmpty()) ) {\n            count = s.length() - s.replace(Character.toString(c), \"\").length();\n        }\n        return count;\n    }\n    ```", "```java\n    WordTool wt = new WordTool();\n    String text = \"The river carried the memories from her childhood.\";\n    ```", "```java\n    char search = 'e';\n    ```", "```java\n    System.out.println( \"Analyzing the text: \\n\" + text );\n    System.out.println( \"Total words: \" + wt.wordCount(text) );\n    System.out.println( \"Total symbols (w. spaces): \" + wt.symbolCount(text, true) );\n    System.out.println( \"Total symbols (wo. spaces): \" + wt.symbolCount(text, false) );\n    System.out.println( \"Total amount of \" + search + \": \" + wt.getFrequency(text, search) );\n    ```", "```java\n    /**\n      * <H1>WordTool</H1>\n      * A class to perform calculations about text.\n      *\n      * @author Joe Smith\n      * @version 0.1\n      * @since 20190305\n      */\n    ```", "```java\n    /**\n      * <h2>wordCount</h2>\n      * returns the amount of words in a text, takes a string as parameter\n      *\n      * @param s\n      * @return int\n      */\n    public int wordCount ( String s ) { [...]\n    ```", "```java\n    /**\n      * <h2>symbolCount</h2>\n      * returns the amount of symbols in a string with or without counting spaces\n      *\n      * @param s\n      * @param withSpaces\n      * @return int\n      */\n    public int symbolCount ( String s, boolean withSpaces ) { [...]\n    ```", "```java\n    /**\n      * <h2>getFrequency</h2>\n      * returns the amount of occurrences of a symbol in a string\n      *\n      * @param s\n      * @param c\n      * @return int\n      */\n    public int getFrequency ( String s, char c ) { [...]\n    ```", "```java\n    String[] text = {\"So\", \"many\", \"books\", \"so\", \"little\", \"time\"};\n    ```", "```java\n    String searchQuery = \"so\";\n    ```", "```java\n    int occurrence = -1;\n    ```", "```java\n    for(int i = 0; i < text.length; i++) {\n        occurrence = text[i].compareToIgnoreCase(searchQuery);\n        if (occurrence == 0) {\n            System.out.println(\"Found query at: \" + i);\n        }\n    }\n    ```", "```java\n    List <Double> numbers = new ArrayList <Double> ();\n    ```", "```java\n    long numNodes = (long) Math.round(Math.random() * 10000);\n    ```", "```java\n    for (int i = 0; i < numNodes; i++) {\n        numbers.add(Math.random() * 100);\n    }\n    ```", "```java\n    Iterator iterator = numbers.iterator();\n    ```", "```java\n    Double average = 0.0;\n    while(iterator.hasNext()) {\n        average += (Double) iterator.next() / numNodes;\n    }\n    ```", "```java\n    System.out.println(\"Average: \" + average);\n    ```", "```java\n    import java.nio.file.NoSuchFileException;\n    import java.util.logging.*;\n    ```", "```java\n    public static void issuePointerException() throws NullPointerException {\n        throw new NullPointerException(\"Exception: file not found\");\n    }\n    ```", "```java\n    public static void issueFileException() throws NoSuchFileException {\n        throw new NoSuchFileException(\"Exception: file not found\");\n    }\n    ```", "```java\n    Logger logger = Logger.getAnonymousLogger();\n    ```", "```java\n    int exceptionNum = Integer.valueOf(args[0]);\n    ```", "```java\nActivity01.java\n1  switch (exceptionNum) {\n2      case 1:\n3          try {\n4            issuePointerException();\n5          } catch (NullPointerException ne) {\n6            logger.log(Level.SEVERE, \"Exception happened\", ne);\n7          }\n8          break;\n9      case 2:\n10         try {\n11           issueFileException();\n12         } catch (NoSuchFileException ne) {\n13           logger.log(Level.WARNING, \"Exception happened\", ne);\n14         }\n15         break;\nhttps://packt.live/33SEL8B\n```", "```java\n    rootProject.name = 'temps'\n    ```", "```java\n    build.gradle\n    1  buildscript {\n    2      repositories {\n    3          jcenter()\n    4      }\n    5      dependencies {\n    6          classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'\n    7      }\n    8  }\n    https://packt.live/2pJJJFY\n    ```", "```java\n    package com.packtpub.temps;\n    public class City {\n        private String name;\n        private String country;\n        double summertimeHigh;      // In degrees C\n        public City(String name, String country, double summertimeHigh) {\n            this.name = name;\n            this.country = country;\n            this.summertimeHigh = summertimeHigh;\n        }\n    }\n    ```", "```java\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public String getCountry() {\n        return country;\n    }\n    public void setCountry(String country) {\n        this.country = country;\n    }\n    public double getSummertimeHigh() {\n        return summertimeHigh;\n    }\n    public void setSummertimeHigh(double summertimeHigh) {\n        this.summertimeHigh = summertimeHigh;\n    }\n    ```", "```java\n    public String format(boolean fahrenheit) {\n        String degrees = summertimeHigh + \" C\";\n        if (fahrenheit) {\n            degrees = TempConverter.convertToF(summertimeHigh) + \" F\";\n        }\n        return name + \", \" + country + \" \" + degrees;\n    }\n    ```", "```java\n    package com.packtpub.temps;\n    public class SummerHigh {\n        private City base;\n        private City moderateCuts;\n        private City noCuts;\n        public SummerHigh(City base, City moderateCuts, City noCuts) {\n            this.base = base;\n            this.moderateCuts = moderateCuts;\n            this.noCuts = noCuts;\n        }\n    }\n    ```", "```java\n    public City getBase() {\n        return base;\n    }\n    public void setBase(City base) {\n        this.base = base;\n    }\n    public City getModerateCuts() {\n        return moderateCuts;\n    }\n    public void setModerateCuts(City moderateCuts) {\n        this.moderateCuts = moderateCuts;\n    }\n    public City getNoCuts() {\n        return noCuts;\n    }\n    public void setNoCuts(City noCuts) {\n        this.noCuts = noCuts;\n    }\n    ```", "```java\n    public String format(boolean fahrenheit) {\n        StringBuilder builder = new StringBuilder();\n        builder.append(\"In 2100, \");\n        builder.append(base.format(fahrenheit));\n        builder.append(\" will be like\\n   \");\n        builder.append(noCuts.format(fahrenheit));\n        builder.append(\" with no emissions cuts,\");\n        builder.append(\"\\n   \");\n        builder.append(moderateCuts.format(fahrenheit));\n        builder.append(\" with moderate emissions cuts\");\n        return builder.toString();\n    }\n    ```", "```java\n    package com.packtpub.temps;\n    import com.google.common.collect.HashBasedTable;\n    import com.google.common.collect.Table;\n    import java.util.Map;\n    public class SummerHighs {\n        private Table<String, String, SummerHigh> data;\n        public SummerHighs() {\n            data = HashBasedTable.create();\n        }\n    }\n    ```", "```java\n    public SummerHigh getByCity(String city) {\n        Map<String, SummerHigh> row = data.row(city.toLowerCase());\n        SummerHigh summerHigh = null;\n        for ( String key : row.keySet()) {\n            summerHigh = row.get(key);\n        }\n        return summerHigh;\n    }\n    ```", "```java\n    public SummerHigh getByCountry(String country) {\n        Map<String, SummerHigh> column = data.column(country.toLowerCase());\n        SummerHigh summerHigh = null;\n        for ( String key : column.keySet()) {\n            summerHigh = column.get(key);\n        }\n        return summerHigh;\n    }\n    ```", "```java\n    // Convenience methods to help initialize data.\n    public void addSummerHigh(SummerHigh summerHigh) {\n        City baseCity = summerHigh.getBase();\n        data.put(baseCity.getName().toLowerCase(),\n                baseCity.getCountry().toLowerCase(), summerHigh);\n    }\n    public SummerHigh createSummerHigh(City base, City moderateCuts,\n                                       City noCuts) {\n        return new SummerHigh(base, moderateCuts, noCuts);\n    }\n    public City createCity(String name, String country, double summertimeHigh) {\n        return new City(name, country, summertimeHigh);\n    }\n    ```", "```java\n    SummerHighs.java\n    67     addSummerHigh(\n    68         createSummerHigh(\n    69             createCity(\"Tokyo\", \"Japan\", 26.2),\n    70             createCity(\"Beijing\", \"China\", 29.0),\n    71             createCity(\"Wuhan\", \"China\", 31.2)\n    72         )\n    73     );\n    https://packt.live/2qELV2d\n    ```", "```java\n    Main.java\n    6          SummerHighs summerHighs = new SummerHighs();\n    7          summerHighs.initialize();\n    8  \n    9          boolean fahrenheit = false;\n    10         // Handle inputs\n    11         if (args.length < 2) {\n    12             System.err.println(\"Error: usage is:\");\n    13             System.err.println(\" -city London\");\n    14             System.err.println(\" -country United Kingdom\");\n    15         }\n    16\n    17         String searchBy = args[0];\n    18         String name = args[1];\n    19         SummerHigh high = null;\n    20         if (\"-city\".equals(searchBy)) {\n    21             high = summerHighs.getByCity(name);\n    22         } else if (\"-country\".equals(searchBy)) {\n    23             high = summerHighs.getByCountry(name);\n    24         }\n    https://packt.live/2BBF2AO\n    ```", "```java\n    package com.packtpub.temps;\n    public class TempConverter {\n        public static double convertToF(double degreesC) {\n            double degreesF = (degreesC * 9/5) + 32;\n            // Round to make nicer output.\n            return Math.round(degreesF * 10.0) / 10.0;\n        }\n    }\n    ```", "```java\n    CREATE TABLE IF NOT EXISTS student\n    (\n    STUDENT_ID long,\n    FIRST_NAME varchar(255),\n    LAST_NAME varchar(255),\n    PRIMARY KEY (STUDENT_ID)\n    );\n    ```", "```java\n    CREATE TABLE IF NOT EXISTS chapter\n    (\n    CHAPTER_ID long,\n    CHAPTER_NAME varchar(255),\n    PRIMARY KEY (CHAPTER_ID)\n    );\n    ```", "```java\n    CREATE TABLE IF NOT EXISTS student_progress\n    (\n    STUDENT_ID long,\n    CHAPTER_ID long,\n    COMPLETED date,\n    PRIMARY KEY (STUDENT_ID, CHAPTER_ID)\n    );\n    ```", "```java\n    INSERT INTO student\n    (STUDENT_ID, FIRST_NAME, LAST_NAME)\n    VALUES (1, 'BOB', 'MARLEY');\n    ```", "```java\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (1, 'Getting Started');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (2, 'Learning the Basics');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (3, 'Object-Oriented Programming: Classes and Methods');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (4, 'Collections, Lists, and Java's Built-In APIs');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (5, 'Exceptions');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (6, 'Modules, Packages, and Libraries');\n    INSERT INTO chapter\n    (CHAPTER_ID, CHAPTER_NAME)\n    VALUES (7, 'Databases and JDBC');\n    ```", "```java\n    INSERT INTO student_progress\n    (STUDENT_ID, CHAPTER_ID, COMPLETED)\n    VALUES (1, 2, '2019-08-28');\n    ```", "```java\n    SELECT first_name, last_name, chapter.chapter_id, chapter_name, completed\n    FROM student, chapter, student_progress\n    WHERE first_name = 'BOB'\n    AND last_name = 'MARLEY'\n    AND student.student_id = student_progress.student_id\n    AND chapter.chapter_id = student_progress.chapter_id\n    ORDER BY chapter_id;\n    ```", "```java\n    ShowProgress.java\n    1  package com.packtpub.db;\n    2  import java.sql.*;\n    3  public class ShowProgress {\n    4      public static void main(String[] args) {\n    5          if (args.length < 2) {\n    6             System.err.println(\"Error: please enter the first and last               name.\");\n    7              System.exit(-1);\n    8          }\n    9          // Get student first and last name as inputs.\n    10         String firstName = args[0].toUpperCase();\n    11         String lastName = args[1].toUpperCase();\n    https://packt.live/31EPNg4\n    ```", "```java\n    BOB MARLEY\n    2019-03-01  2 Learning the Basics\n    2019-03-01  3 Object-Oriented Programming: Classes and Methods\n    2019-03-01  7 Databases and JDBC\n    ```", "```java\n    RecordProgress.java\n    1  package com.packtpub.db;\n    2  \n    3  import java.sql.*;\n    4  \n    5  public class RecordProgress {\n    6      public static void main(String[] args) {\n    7  \n    8          // Get input\n    9          if (args.length < 3) {\n    10             System.err.println(\"Error: please enter first last chapter.\");\n    11             System.exit(-1);\n    12         }\n    13 \n    14         // Get student first and last name and chapter number.\n    15         String firstName = args[0].toUpperCase();\n    https://packt.live/362QaF1\n    ```", "```java\n    java -cp customers-1.0-all.jar com.packtpub.db.RecordProgress bob marley 4\n    ```", "```java\n    Number rows added: 1\n    ```", "```java\n    import java.io.IOException;\n    import java.nio.file.*;\n    import java.nio.file.attribute.BasicFileAttributes;\n    import java.util.Collections;\n    ```", "```java\n    Path path = Paths.get(System.getProperty(\"user.home\"));\n    ```", "```java\n    Files.walkFileTree(path, Collections.emptySet(), 10, new SimpleFileVisitor<Path>() { [...]\n    ```", "```java\n    @Override\n    public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) {\n    ```", "```java\n    String [] pathArray = path.toString().split(\"/\");\n    int depthInit = pathArray.length;\n    ```", "```java\n    String [] fileArray = dir.toString().split(\"/\");\n    int depthCurrent = fileArray.length;\n    ```", "```java\n    for (int i = depthInit; i < depthCurrent; i++) {\n        System.out.print(\"    \");\n    }\n    ```", "```java\n    System.out.println(fileArray[fileArray.length - 1]);\n    return FileVisitResult.CONTINUE;\n    ```", "```java\n    @Override\n    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n        System.out.println(\"visitFileFailed: \" + file);\n        return FileVisitResult.CONTINUE;\n    }\n    ```", "```java\n    topeka\n        snap\n            gnome-calculator\n            gnome-system-monitor\n            libreoffice\n        Downloads\n    [...]\n    ```", "```java\n    String fileName = \"temp.txt\";\n    Path pathFile = Paths.get(fileName);\n    ```", "```java\n    if(!Files.exists(pathFile))  {\n        try {\n            // Create the file\n            Files.createFile(pathFile);\n            System.out.println(\"New file created at: \" + pathFile);\n        } catch (IOException ioe) {\n            System.out.println(\"EXCEPTION when creating file: \" + ioe.getMessage());\n        }\n    }\n    ```", "```java\n    Activity01.java\n    27 public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes      attrs) {\n    28  \n    29     String toFile = \"\";\n    30  \n    31     String [] pathArray = path.toString().split(\"/\");\n    32     int depthInit = pathArray.length;\n    33     String [] fileArray = dir.toString().split(\"/\");\n    34     int depthCurrent = fileArray.length;\n    35     for (int i = depthInit; i < depthCurrent; i++) {\n    36         toFile += \"    \";\n    37     }\n    38     toFile += fileArray[fileArray.length - 1];\n    39  \n    40     if(Files.exists(pathFile))\n    https://packt.live/35Ye4kR\n    ```", "```java\n    user@computer:~/[...]/Activity0801/out/production/Activity0801$ ls\n    'Main$1.class'   Main.class   temp.txt\n    ```", "```java\n    Client.java\n    1  import java.io.*;\n    2  import java.net.*;\n    3  \n    4  public class Client {\n    5      public static void main(String[] args) throws IOException {\n    6          if (args.length != 2) {\n    7              System.err.println(\n    8                      \"Usage: java EchoClient <host name> <port number>\");\n    9              System.exit(1);\n    10         }\n    11 \n    12         String hostName = args[0];\n    13         int portNumber = Integer.parseInt(args[1]);\n    14 \n    https://packt.live/2MEFg0w\n    ```", "```java\nServer.java\n1  import java.net.*;\n2  import java.io.*;\n3  \n4  public class Server {\n5      public static void main(String[] args) throws IOException {\n6  \n7          if (args.length != 1) {\n8              System.err.println(\"Usage: java EchoServer <port number>\");\n9              System.exit(1);\n10         }\n11 \n12         int portNumber = Integer.parseInt(args[0]);\n13 \n14         try (\n15                 ServerSocket serverSocket =\nhttps://packt.live/2WbxAWv\n```", "```java\n            try {\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n    ```", "```java\n            String url = \"http://hc.apache.org/\";\n                Document doc =\n                        Jsoup.connect(url).get();\n    ```", "```java\n    Elements sections = doc.select(\"div.section\");\n    ```", "```java\n                for (Element div : sections) {\n                    for (Element child : div.children()) {\n                    }\n                }\n    ```", "```java\n                        String tag = child.tagName();\n                        if (tag.equalsIgnoreCase(\"h3\")) {\n                        }\n    ```", "```java\n                            Elements links = child.getElementsByTag(\"a\");\n                            for (Element link : links) {\n                                System.out.println(link.text());\n                            }\n    ```", "```java\n    Child.java\n    9     public static void main(String[] args) throws java.io.IOException,       InterruptedException {\n    10        int ch;\n    11        System.out.print (\"Let's echo: \");\n    12        while ((ch = System.in.read ()) != '\\n')\n    13            System.out.print ((char) ch);\n    14        BufferedWriter bw=new BufferedWriter(\n    15                new FileWriter(new File(\"mycal2022.txt\")));\n    16            int cont = 0;\n    17            while(cont <= 50) {\n    18                System.out.println(cont++);\n    19                cont %= 50;\n    20                bw.write(cont + \"\\n\");\n    https://packt.live/32I5Afu\n    ```", "```java\nParent.java\n18         try {\n19             process.waitFor(5, TimeUnit.SECONDS);\n20         } catch (InterruptedException ie) {\n21             System.out.println(\"WARNING: interrupted exception fired\");\n22         }\n23\n24         System.out.println(\"trying to write\");\n25         OutputStream out = process.getOutputStream();\n26         Writer writer = new OutputStreamWriter(out);\n27         writer.write(\"This is how we roll!\\n\");\n28         writer.flush();\n29\n30         File file = new File(\"data.log\");\n31         FileWriter fileWriter = new FileWriter(file);\n32         BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);\n33\n34         System.out.println(\"trying to read\");\n35         InputStream in = process.getInputStream();\n36         Reader reader = new InputStreamReader(in);\n37         BufferedReader bufferedReader = new BufferedReader(reader);\n38         String line = bufferedReader.readLine();\n39\n40         // send to screen\n41         System.out.println(line);\nhttps://packt.live/2MEBlR9\n```", "```java\n    [a-zA-Z]{2,}\\s{1}\\d+[a-zA-Z]{1}\n    ```", "```java\n            public ShoppingCart removeItem(ShoppingItem item) {\n               Map<String, Integer> newList = new HashMap<>(mShoppingList);\n                int value = 0;\n                if (newList.containsKey(item.name)) {\n                    value = newList.get(item.name);\n                }\n                if (value > 0) {\n                    newList.put(item.name, --value);\n                }\n                return new ShoppingCart(newList);\n            }\n    ```", "```java\n    public ShoppingCart addItems(ShoppingItem... items) {\n                Map<String, Integer> newList = new HashMap<>(mShoppingList);\n                ShoppingCart newCart = null;\n                for (ShoppingItem item : items) {\n                    newCart = addItem(item);\n                }\n    ```", "```java\n    public class Activity1 {\n        public static void main(String[] args) {\n            ShoppingCart myFirstCart = new ShoppingCart(new HashMap<>());\n            ShoppingCart mySecondCart = myFirstCart.addItem(new           ShoppingItem(\"Chair\", 150));\n            ShoppingCart myThirdCart = mySecondCart.addItem(new           ShoppingItem(\"Table\", 350));\n    ```", "```java\n        public static int fibonacci(int number) {\n            if (number == 0) {\n                return number;\n            } else if (number == 1) {\n                return 1;\n            } else {\n                return (fibonacci(number - 1) + fibonacci(number - 2));\n            }\n        }\n    ```", "```java\n        public static void main(String[] args) {\n            for (int i = 0; i < 17; i++) {\n                System.out.println( fibonacci(i) );\n            }\n        }\n    ```", "```java\nActivity1.java\n30         double sum = calculatePrice(fruitCart, vegetableCart, meatAndFishCart);\n31         System.out.println(String.format(\"Sum: %.2f\", sum));\n32\n33         Map<String, Double> discounts = Map.of(\"Cod\", 0.2, \"Salad\", 0.5);\n34\n35         double sumDiscount = calculatePriceWithDiscounts(discounts, fruitCart, vegetableCart,            meatAndFishCart);\n36         System.out.println(String.format(\"Discount sum: %.2f\", sumDiscount));\n37     }\n38\n39     private static double calculatePrice(ShoppingCart... carts) {\n40         return Stream.of(carts)\n41                 .flatMap((cart) -> { return cart.mArticles.stream(); })\n42                 .mapToDouble((item) -> { return item.price; })\n43                 .sum();\n44     }\nhttps://packt.live/35Zm5Gj\n```", "```java\nActivity2.java\n61         private ShoppingArticle(String name, String category, double price, String unit) {\n62             this.name = name;\n63             this.category = category;\n64             this.price = price;\n65             this.unit = unit;\n66         }\n67\n68         @Override\n69         public String toString() {\n70             return name + \" (\" + category + \")\";\n71         }\n72     }\n73\n74     private static ShoppingArticle findCheapestFruit (List<ShoppingArticle> articles) {\n75         return articles.stream()\n76                 .filter((article) -> article.category.equals(\"Fruits\"))\n77                 .min(Comparator.comparingDouble(article -> article.price))\n78                 .orElse(null);\n79     }\n80\n81     private static ShoppingArticle findMostExpensiveVegetable (List<ShoppingArticle> articles) {\n82         return articles.stream()\n83                 .filter((article) -> article.category.equals(\"Vegetables\"))\n84                 .max(Comparator.comparingDouble(article -> article.price))\n85                 .orElse(null);\n86     }\nhttps://packt.live/32EnOid\n```", "```java\nActivity1.java\n52         for (Sensor sensor : sensors) {\n53             if (hasAlarmOrWarning.test(sensor)) {\n54                 alarmOrWarning = true;\n55             }\n56         }\n57\n58         if (alarmOrWarning) {\n59             System.out.println(\"Alarm, or warning, was triggered!\");\n60\n61\n62             for (Sensor sensor : sensors) {\n63                 System.out.println(sensor.batteryHealth() + \", \" + sensor.triggered());\n64             }\n65         }\n66     }\n67\n68 }\nhttps://packt.live/33Vnc7X\n```", "```java\nActivity2.java\n36     private static double loopedAverageHealth(Integer[] batteryHealths) {\n37         double average = 0;\n38         for (int i = 0; i < batteryHealths.length; i++) {\n39             average += batteryHealths[i];\n40         }\n41         average = average / batteryHealths.length;\n42         return average;\n43     }\n44\n45     private static double streamedAverageHealth(Integer[] batteryHealths) {\n46         return Stream.of(batteryHealths)\n47                 .mapToDouble(Integer::intValue)\n48                 .average()\n49                 .orElse(0);\n50     }\n51\n52     private static double recursiveAverageHealth(Integer[] batteryHealths, int index) {\n53         double average = batteryHealths[index] / (double) batteryHealths.length;\n54         if (index == 0) {\n55             return average;\n56         } else {\n57             return average + recursiveAverageHealth(batteryHealths, index - 1);\n58         }\n59     }\n60 }\nhttps://packt.live/32EnJep\n```", "```java\nActivity3.java\n37     private static double loopedAverageHealth(Integer[] batteryHealths) {\n38         double average = 0;\n39         for (int i = 0; i < batteryHealths.length; i++) {\n40             average += batteryHealths[i];\n41         }\n42         average = average / batteryHealths.length;\n43         return average;\n44     }\n45\n46     private static double streamedAverageHealth(Integer[] batteryHealths) {\n47         return Stream.of(batteryHealths)\n48                 .mapToDouble(Integer::intValue)\n49                 .average()\n50                 .orElse(0);\n51     }\n52\n53     private static double recursiveAverageHealth(Integer[] batteryHealths, int index) {\n54         double average = batteryHealths[index] / (double) batteryHealths.length;\n55         if (index == 0) {\n56             return average;\n57         } else {\n58             return average + recursiveAverageHealth(batteryHealths, index - 1);\n59         }\n60     }\n61 }\nhttps://packt.live/2BxaoIK\n```", "```java\n    Activity1.java\n    53             @Override\n    54             public void onComplete() {\n    55                 System.out.println(\"onComplete()\");\n    56             }\n    57         });\n    58     }\n    59\n    60\n    61     private static String[] getStrings() {\n    62         String filePath = \"res/numbers.txt\";\n    63         try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n    64             return words.flatMap((line) -> Arrays.stream(line.split(\"[\\\\s\\\\n]+\")))\n    65                     .filter((word) -> word.length() > 0)\n    66                     .toArray(String[]::new);\n    67         } catch (IOException e) {\n    68             e.printStackTrace();\n    69         }\n    70         return null;\n    71     }\n    72 }\n    https://packt.live/32GPq6b\n    ```", "```java\n      @Override\n                public void onSubscribe(Flow.Subscription subscription) {\n                    this.subscription = subscription;\n                    subscription.request(1);\n                }\n    ```", "```java\n        public int countWords(String text) {\n            int count = 0;\n            return count;\n        }\n    ```", "```java\n            if (text != null) {\n                String trimmed = text.trim();\n                if (trimmed.length() > 0) {\n                    String[] words = trimmed.split(\"\\\\s+\");\n                    count = words.length;\n                }\n            }\n    ```", "```java\n        @ParameterizedTest\n        @CsvSource({\n            \"'A man, a plan, a canal. Panama',  7\",\n            \"'Able was I ere I saw Elba',  7\",\n            \", 0\",\n            \"'', 0\",\n            \"'   ', 0\",\n            \"' A cat in the hat with spaces   ', 7\"\n        })\n    ```", "```java\n        public void testWordCounts(String text, int expected) {\n            WordCount wordCount = new WordCount();\n            int count = wordCount.countWords(text);\n            Assertions.assertEquals(expected, count,\n                    \"Expected \" + expected + \" for input[\" + text + \"]\");\n        }\n    ```"]