- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Authentication with Spring Data
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Data进行身份验证
- en: In the previous chapter, we covered how to leverage Spring Security’s built-in
    **Java DataBase Connectivity** (**JDBC**) support. In this chapter, we will look
    at the Spring Data project and how to leverage **Jakarta Persistence API** (**JPA**)
    to perform authentication against a relational database. We will also explore
    how to perform authentication against a document database using **MongoDB**. This
    chapter’s sample code is based on the Spring Security setup from [*Chapter 4*](B21757_04.xhtml#_idTextAnchor106),
    *JDBC-based Authentication*, and it has been updated to refactor the need for
    SQL and to use ORM for all database interactions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了如何利用Spring Security的内置**Java数据库连接**（**JDBC**）支持。在本章中，我们将探讨Spring
    Data项目以及如何利用**Java持久性API**（**JPA**）对关系型数据库进行身份验证。我们还将探讨如何使用**MongoDB**对文档数据库进行身份验证。本章的示例代码基于第4章的Spring
    Security设置，*基于JDBC的身份验证*（[B21757_04.xhtml#_idTextAnchor106]），并且已经更新以重构对SQL的需求，并使用ORM进行所有数据库交互。
- en: 'During the course of this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的讨论过程中，我们将涵盖以下主题：
- en: Some of the basic concepts related to the Spring Data project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring Data项目相关的一些基本概念
- en: Utilizing Spring Data JPA to authenticate against a relational database
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Spring Data JPA对关系型数据库进行身份验证
- en: Utilizing Spring Data MongoDB to authenticate against a document database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用Spring Data MongoDB对文档数据库进行身份验证
- en: How to customize Spring Security for more flexibility when dealing with Spring
    Data integration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何自定义Spring Security以在处理Spring Data集成时获得更多灵活性
- en: Understanding the Spring Data project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Spring Data项目
- en: The Spring Data project’s mission is to provide a familiar and consistent Spring-based
    programming model for data access, while still retaining the special traits of
    the underlying data provider.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data项目的目标是提供一个熟悉且一致的基于Spring的数据访问编程模型，同时仍然保留底层数据提供者的特殊特性。
- en: 'The following are just a few of the powerful features of this Spring Data project:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个Spring Data项目的一些强大功能：
- en: Powerful repository and custom object-mapping abstractions
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强大的存储库和自定义对象映射抽象
- en: Dynamic query derivation from repository method names
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从存储库方法名称动态推导查询
- en: Implementation of domain base classes, providing basic properties
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现领域基类，提供基本属性
- en: Support for transparent auditing (created and last changed)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持透明审计（创建和最后更改）
- en: The ability to integrate custom repository code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够集成自定义存储库代码
- en: Easy Spring integration via Java-based configuration and custom XML namespaces
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过基于Java的配置和自定义XML命名空间轻松实现Spring集成
- en: Advanced integration with Spring MVC controllers
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Spring MVC控制器的高级集成
- en: Experimental support for cross-store persistence
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对跨存储持久化的实验性支持
- en: This project simplifies the use of data access technologies, relational and
    non-relational databases, `MapReduce` frameworks, and cloud-based data services.
    This umbrella project contains many subprojects that are specific to a given database.
    These projects were developed by working together with many of the companies and
    developers that are behind these exciting technologies. There are also many community-maintained
    modules and other related modules, including *JDBC support* and *Apache Hadoop*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目简化了数据访问技术的使用，包括关系型和非关系型数据库、`MapReduce`框架和基于云的数据服务。这个母项目包含许多特定于给定数据库的子项目。这些项目是由与许多支持这些令人兴奋技术的公司和开发者合作开发的。还有许多由社区维护的模块和其他相关模块，包括*JDBC支持*和*Apache
    Hadoop*。
- en: 'The following table describes the main modules that make up the Spring Data
    project:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格描述了构成Spring Data项目的核心模块：
- en: '| **Module** | **Description** |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| **模块** | **描述** |'
- en: '| Spring Data Commons | Applies core Spring concepts to all Spring Data projects
    |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Commons | 将核心Spring概念应用于所有Spring Data项目 |'
- en: '| Spring Data Gemfire | Provides easy configuration and access to Gemfire from
    Spring applications |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Gemfire | 从Spring应用程序中提供简单的配置和访问Gemfire |'
- en: '| Spring Data JPA | Makes it easy to implement JPA-based repositories |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data JPA | 使实现基于JPA的存储库变得容易 |'
- en: '| Spring Data Key Value | Map-based repositories and SPIs, which can easily
    build a Spring Data module for key-value stores |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Key Value | 基于映射的存储库和SPI，可以轻松构建用于键值存储的Spring Data模块 |'
- en: '| Spring Data LDAP | Provides Spring Data repository support for Spring LDAP
    |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data LDAP | 为Spring LDAP提供Spring Data存储库支持 |'
- en: '| Spring Data MongoDB | Spring-based, object-document support and repositories
    for MongoDB |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data MongoDB | 基于Spring的对象-文档支持和MongoDB的仓库 |'
- en: '| Spring Data REST | Exports Spring Data repositories as hypermedia-driven
    RESTful resources |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data REST | 将Spring Data仓库作为超媒体驱动的RESTful资源导出 |'
- en: '| Spring Data Redis | Provides easy configuration and access to Redis from
    Spring applications |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data Redis | 为Spring应用程序提供简单的配置和访问Redis |'
- en: '| Spring Data for Apache Cassandra | A Spring Data module for Apache Cassandra
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data for Apache Cassandra | Apache Cassandra的Spring Data模块 |'
- en: '| Spring Data for Apache Solr | A Spring Data module for Apache Solr |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Spring Data for Apache Solr | Apache Solr的Spring Data模块 |'
- en: Table 5.1 – Main modules of the Spring Data project
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表5.1 – Spring Data项目的核心模块
- en: After exploring the core modules of the Spring Data project, let’s now delve
    into the primary features of Spring Data JPA.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索Spring Data项目的核心模块之后，现在让我们深入了解Spring Data JPA的主要功能。
- en: 'This chapter’s code in action link is here: [https://packt.link/omOQK](https://packt.link/omOQK).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例链接在此：[https://packt.link/omOQK](https://packt.link/omOQK)。
- en: Spring Data JPA
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Data JPA
- en: The Spring Data JPA project aims to significantly improve the ORM implementation
    of data access layers by reducing the effort to the amount that’s actually needed.
    A developer only needs to write repository interfaces, including custom finder
    methods, and Spring will provide the implementation automatically.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Data JPA项目旨在通过减少实际所需的工作量来显著提高数据访问层的ORM实现。开发者只需编写仓库接口，包括自定义查找方法，Spring将自动提供实现。
- en: 'The following are just a few of the powerful features specific to the Spring
    Data JPA Project:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下只是Spring Data JPA项目的一些特定于项目的强大功能：
- en: Sophisticated support for building repositories based on Spring and JPA
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于Spring和JPA构建仓库的复杂支持
- en: Support for `QueryDSL` predicates and, thus, type-safe JPA queries
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持`QueryDSL`谓词，从而实现类型安全的JPA查询
- en: Transparent auditing of domain classes
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 领域类的透明审计
- en: Pagination support, dynamic query execution, and the ability to integrate custom
    data access code
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分页支持、动态查询执行以及集成自定义数据访问代码的能力
- en: Validation of `@Query`-annotated queries at bootstrap time
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在启动时验证`@Query`注解的查询
- en: Support for XML based entity mapping
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持基于XML的实体映射
- en: The `JavaConfig` based repository configuration by introducing `@EnableJpaRepositories`
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过引入`@EnableJpaRepositories`实现基于`JavaConfig`的仓库配置
- en: Updating our dependencies
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all the dependencies you need for this chapter, so
    you will not need to make any updates to your `build.gradle` file. However, if
    you are just adding Spring Data JPA support to your application, you need to add
    `spring-boot- starter-data-jpa` as a dependency in the `build.gradle` file, as
    follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包含了本章所需的全部依赖项，因此您不需要更新您的`build.gradle`文件。但是，如果您只是将Spring Data JPA支持添加到您的应用程序中，您需要在`build.gradle`文件中添加`spring-boot-starter-data-jpa`作为依赖项，如下所示：
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Notice haven’t removed the `spring-boot-starter-jdbc` dependency.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们没有移除`spring-boot-starter-jdbc`依赖项。
- en: The `spring-boot-starter-data-jpa` dependency will contain all the dependencies
    needed to wire our domain objects to our embedded database with JPA.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`spring-boot-starter-data-jpa`依赖将包含将我们的领域对象与嵌入式数据库连接所需的全部依赖项。'
- en: Reconfiguring the database configuration
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新配置数据库配置
- en: Firstly, we will convert the current JBCP calendar project. Let’s begin by reconfiguring
    the database.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将转换当前的JBCP日历项目。让我们从重新配置数据库开始。
- en: We can begin by removing the `DataSourceConfig.java` file, as we will be leveraging
    Spring Boot’s built-in support for an embedded H2 database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以先删除`DataSourceConfig.java`文件，因为我们将会利用Spring Boot内置对嵌入式H2数据库的支持。
- en: Initializing the database
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化数据库
- en: We can now remove the `src/main/resources/database` directory and all contents
    in that directory. This directory contains several `.``sql` files.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以删除`src/main/resources/database`目录及其中的所有内容。此目录包含多个`.sql`文件。
- en: 'Now, we need to create a `data.sql` file that will contain our seed data, as
    follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要创建一个包含我们的种子数据的`data.sql`文件，如下所示：
- en: 'Take a look at the following SQL statement, depicting the password for **user1**:'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，展示了**user1**的密码：
- en: '[PRE1]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Take a look at the following SQL statement, depicting the password for **admin1**:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，展示了**admin1**的密码：
- en: '[PRE2]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Take a look at the following SQL statement, depicting the password for **user2**:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看以下SQL语句，展示了**user2**的密码：
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Take a look at the following SQL statement, depicting the user roles:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一下以下 SQL 语句，描述了用户角色：
- en: '[PRE4]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here, **user1** has one role:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，**user1** 拥有一个角色：
- en: '[PRE5]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Here, **admin1** has two roles:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，**admin1** 拥有两个角色：
- en: '[PRE6]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Take a look at the following SQL statement, depicting events:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看一下以下 SQL 语句，描述了事件：
- en: '[PRE7]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we can update the application properties to define our embedded database
    properties in the `src/main/resources/application.yml` file, as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以更新应用程序属性，在 `src/main/resources/application.yml` 文件中定义我们的嵌入式数据库属性，如下所示：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: At this point, we have removed the old database configuration and added the
    new configuration. The application will not work at this point, but this can still
    be considered a marker point before we continue to the next steps of conversion.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经移除了旧的数据库配置并添加了新的配置。此时应用程序将无法工作，但仍然可以将其视为转换下一步之前的一个标记点。
- en: Important note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Your code should now look like this: `calendar05.01-calendar`.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：`calendar05.01-calendar`。
- en: Refactoring from SQL to ORM
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 SQL 转换到 ORM
- en: Refactoring from an SQL to an ORM implementation is simpler than you might think.
    Most of the refactoring involves the removal of excess code in the form of an
    SQL. In this next section, we will refactor our SQL implementation to a JPA implementation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 从 SQL 转换到 ORM 实现比你想象的要简单。大部分的转换涉及移除以 SQL 形式存在的多余代码。在接下来的这一节中，我们将把我们的 SQL 实现转换为
    JPA 实现。
- en: For JPA to map our domain objects to our database, we need to perform some mapping
    on our domain objects.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让 JPA 将我们的领域对象映射到我们的数据库，我们需要在我们的领域对象上执行一些映射。
- en: Mapping domain objects using JPA
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 JPA 映射领域对象
- en: 'Take a look at the following steps to learn about mapping the domain objects:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下步骤来了解如何映射领域对象：
- en: 'Let’s begin by mapping our `Event.java` file so that all the domain objects
    will use JPA, as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先映射我们的 `Event.java` 文件，以便所有领域对象都将使用 JPA，如下所示：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We need to create a `Role.java` file with the following contents:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要创建一个包含以下内容的 `Role.java` 文件：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `Role` object will be used to map authorities to our `CalendarUser` table.
    Let’s map our `CalendarUser.java` file, now that we have a `Role.java` file:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Role` 对象将被用来将权限映射到我们的 `CalendarUser` 表。现在我们已经有了 `Role.java` 文件，让我们映射我们的 `CalendarUser.java`
    文件：'
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this point, we have mapped our domain objects with the required JPA annotation,
    including `@Entity` and `@Table` to define the **Relational Database Management
    System** (**RDBMS**) location, as well as structural, reference, and association
    mapping annotations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用所需的 JPA 注解映射了我们的领域对象，包括 `@Entity` 和 `@Table` 来定义 **关系型数据库管理系统**（**RDBMS**）的位置，以及结构、引用和关联映射注解。
- en: 'At this stage, you can also **remove** the following dependency:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你也可以**删除**以下依赖项：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The application will not work at this point, but this can still be considered
    a marker point before we continue to the next steps of conversion.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此时应用程序将无法工作，但仍然可以将其视为转换下一步之前的一个标记点。
- en: Important note
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'Your code should now look like this: `calendar05.02-calendar`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像这样：`calendar05.02-calendar`。
- en: Spring Data repositories
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Data 存储库
- en: 'We will now add the required interfaces for Spring Data to map our required
    **Create, Read, Update, and Delete** (**CRUD**) operations to our embedded database,
    by performing the following steps:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将添加所需的接口，以便 Spring Data 将所需的 **创建、读取、更新和删除**（**CRUD**）操作映射到我们的嵌入式数据库，通过执行以下步骤：
- en: 'We begin by adding a new interface to a new package, which will be `com.packtpub.springsecurity.repository`.
    The new file will be called `CalendarUserRepository.java`, as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先向一个新包中添加一个新的接口，该包将是 `com.packtpub.springsecurity.repository`。新文件将被命名为 `CalendarUserRepository.java`，如下所示：
- en: '[PRE13]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can now continue by adding a new interface to the same repository package,
    which will be `com.packtpub.springsecurity.repository`, and the new file will
    be called `EventRepository.java`:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以继续添加一个新的接口到同一个存储库包中，该包将是 `com.packtpub.springsecurity.repository`，新文件将被命名为
    `EventRepository.java`：
- en: '[PRE14]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will allow for standard CRUD operations such as `find()`, `save()`, and
    `delete()` on our `Event` objects.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许对 `Event` 对象执行标准的 CRUD 操作，如 `find()`、`save()` 和 `delete()`。
- en: 'Finally, we will add a new interface to the same repository package, which
    will be `com.packtpub.springsecurity.repository`, and the new file will be called
    `RoleRepository.java`. This `CrudRepository` interface will be used to manage
    the `Role` object for our security roles associated with a given `CalendarUser`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将向同一个仓库包添加一个新的接口，该接口将是`com.packtpub.springsecurity.repository`，新文件将命名为`RoleRepository.java`。这个`CrudRepository`接口将用于管理与给定的`CalendarUser`关联的安全角色中的`Role`对象：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This will allow for standard CRUD operations such as `find()`, `save()`, and
    `delete()` on our `Role` objects.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将允许我们对`Role`对象执行标准CRUD操作，如`find()`、`save()`和`delete()`。
- en: Data access objects
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据访问对象
- en: 'We need to refactor the `JdbcEventDao.java` file with a new name, `JpaEventDao.java`,
    so that we can replace the JDBC SQL code with our new Spring Data code. Let’s
    take a look at the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`JdbcEventDao.java`文件重命名为`JpaEventDao.java`，这样我们就可以用新的Spring Data代码替换JDBC
    SQL代码。让我们看看以下步骤：
- en: 'Specifically, we need to add the new `EventRepository` interface and replace
    the SQL code with the new ORM repository, as shown in the following code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 具体来说，我们需要添加新的`EventRepository`接口，并用新的ORM仓库替换SQL代码，如下所示：
- en: '[PRE16]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'At this point, we need to refactor the DAO classes to support the new `CrudRepository`
    interfaces we have created. Let’s begin by refactoring the `JdbcCalendarUserDao.java`
    file. First, we can rename the file `JpaCalendarUserDao.java` to indicate that
    this uses JPA, not standard JDBC:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这一点上，我们需要重构DAO类以支持我们创建的新`CrudRepository`接口。让我们从重构`JdbcCalendarUserDao.java`文件开始。首先，我们可以将文件重命名为`JpaCalendarUserDao.java`，以表明这个文件使用的是JPA而不是标准的JDBC：
- en: '[PRE17]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding code, the update fragments to leverage the JPA repositories
    have been placed in bold, so now the `Event` and `CalendarUser` objects are mapped
    to our underlying RDBMS.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，用于利用JPA仓库的更新片段已被加粗，因此现在`Event`和`CalendarUser`对象被映射到我们的底层RDBMS。
- en: The application will not work at this point, but this can still be considered
    a marker point before we continue to the next steps of conversion.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，应用程序可能无法正常工作，但这仍然可以被视为在继续转换的下一步之前的一个标记点。
- en: Important note
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: At this point, your source code should look the same as `chapter05.03- calendar`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，您的源代码应该看起来与`chapter05.03- calendar`相同。
- en: Application services
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序服务
- en: The only thing left to do is configure Spring Security to use the new artifacts.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的唯一事情就是配置Spring Security以使用新的工件。
- en: 'We need to edit the `DefaultCalendarService.java` file and only remove the
    remaining code that was used to add `USER_ROLE` to any new `User` object that
    was created, as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编辑`DefaultCalendarService.java`文件，并仅删除用于将`USER_ROLE`添加到任何新创建的`User`对象的剩余代码，如下所示：
- en: '[PRE18]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The UserDetailsService object
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UserDetailsService对象
- en: 'Let’s take a look at the following steps to add the `UserDetailsService` object:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下步骤来添加`UserDetailsService`对象：
- en: 'Now, we need to add a new implementation of the `UserDetailsService` object;
    we will use our `CalendarUserRepository` interface to authenticate and authorize
    users again, with the same underlying RDBMS, but using our new JPA implementation,
    as follows:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加`UserDetailsService`对象的新实现；我们将使用我们的`CalendarUserRepository`接口再次对用户进行身份验证和授权，使用相同的底层RDBMS，但使用我们的新JPA实现，如下所示：
- en: '[PRE19]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, we have to configure Spring Security to use our custom `UserDetailsService`
    object, as follows:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须配置Spring Security以使用我们的自定义`UserDetailsService`对象，如下所示：
- en: '[PRE20]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Start the application and try logging in to the application. Any of the configured
    users can now log in and create new events. You can also create a new user and
    will be able to log in as this new user immediately.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动应用程序并尝试登录应用程序。现在，任何配置的用户都可以登录并创建新事件。您还可以创建一个新用户，并可以立即以这个新用户登录。
- en: Important note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 重要注意事项
- en: Your code should now look like `calendar05.04-calendar`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像`calendar05.04-calendar`。
- en: Refactoring from an RDBMS to a document database
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从关系型数据库管理系统（RDBMS）重构到文档数据库
- en: Luckily, with the Spring Data project, once we have a Spring Data implementation,
    we have most of the difficult work completed. Now, there are only a few implementation-specific
    changes that need to be refactored.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，随着Spring Data项目的出现，一旦我们有了Spring Data实现，大部分困难的工作就已经完成了。现在，只需要对几个特定实现进行重构。
- en: Document database implementation with MongoDB
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MongoDB的文档数据库实现
- en: We are now going to work on refactoring our RDBMS implementation—with JPA as
    our ORM provider—to a document database implementation, using MongoDB as our underlying
    database provider. MongoDB is a free and open-source cross-platform document-oriented
    database program. Classified as a NoSQL database program, MongoDB uses JSON-like
    documents with schemas. MongoDB is developed by MongoDB Inc. and is located at
    [https://github.com/mongodb/mongo](https://github.com/mongodb/mongo).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将着手重构我们的 RDBMS 实现——使用 JPA 作为 ORM 提供者——到文档数据库实现，使用 MongoDB 作为底层数据库提供者。MongoDB
    是一个免费的开源跨平台文档导向数据库程序。作为一种 NoSQL 数据库程序，MongoDB 使用具有模式的类似 JSON 的文档。MongoDB 由 MongoDB
    Inc. 开发，位于 [https://github.com/mongodb/mongo](https://github.com/mongodb/mongo)。
- en: Updating our dependencies
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的依赖项
- en: 'We have already included all of the dependencies you need for this chapter,
    so you will not need to make any updates to your `build.gradle` file. However,
    if you are just adding Spring Data JPA support to your own application, you will
    need to add `spring-boot-starter-data-jpa` as a dependency to the `build.gradle`
    file, as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经包含了本章所需的全部依赖项，因此你不需要更新你的 `build.gradle` 文件。然而，如果你只是将 Spring Data JPA 支持添加到自己的应用程序中，你需要在
    `build.gradle` 文件中添加 `spring-boot-starter-data-jpa` 作为依赖项，如下所示：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Notice that we removed the `spring-boot-starter-jpa` dependency. The `spring-boot-
    starter-data-mongodb` dependency will contain all the dependencies needed to wire
    our domain objects to our embedded MongoDB database, with a mix of Spring and
    MongoDB annotations.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经移除了 `spring-boot-starter-jpa` 依赖。`spring-boot-starter-data-mongodb` 依赖将包含将我们的领域对象连接到嵌入式
    MongoDB 数据库所需的所有依赖项，这些依赖项结合了 Spring 和 MongoDB 注解。
- en: We also added the `Flapdoodle`-embedded MongoDB database, but this is only meant
    for testing and demonstration purposes. Embedded MongoDB will provide a platform-neutral
    way to run MongoDB in unit tests. This embedded database is located at [https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo](https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了 `Flapdoodle` 嵌入式 MongoDB 数据库，但这仅用于测试和演示目的。嵌入式 MongoDB 将提供一种平台无关的方式来在单元测试中运行
    MongoDB。这个嵌入式数据库位于 [https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo](https://github.com/flapdoodle-oss/de.flapdoodle.embed.mongo)。
- en: Reconfiguring the database configuration in MongoDB
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新配置 MongoDB 数据库配置
- en: 'First, we will begin to convert the current JBCP calendar project. Let’s begin
    by reconfiguring the database to use the Flapdoodle-embedded MongoDB database.
    Previously, when we updated the dependencies for this project, we added a Flapdoodle
    dependency that gave the project an embedded MongoDB database, which we could
    automatically use instead of installing a full version of MongoDB installation.
    To stay consistent with the JBCP application, we need to change the name of our
    database. With Spring Data, we can change the MongoDB configuration using the
    YAML configuration, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将开始将当前的 JBCP 日历项目转换为 JPA 实现。让我们首先重新配置数据库以使用 Flapdoodle-嵌入式 MongoDB 数据库。之前，当我们更新这个项目的依赖项时，我们添加了一个
    Flapdoodle 依赖项，为项目提供了一个嵌入式 MongoDB 数据库，我们可以自动使用它而不是安装完整的 MongoDB 版本。为了与 JBCP 应用程序保持一致，我们需要更改我们数据库的名称。使用
    Spring Data，我们可以通过以下方式使用 YAML 配置更改 MongoDB 配置：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The most important configuration for our current requirements is changing the
    database name to `dataSource`, which is the same name we used throughout this
    book.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们当前的需求，最重要的配置是将数据库名称更改为 `dataSource`，这是我们在这本书中一直使用的名称。
- en: Initializing the MongoDB database
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化 MongoDB 数据库
- en: 'With the JPA implementation, we used the `data.sql` file to initialize the
    data in our database. For MongoDB implementation, we can remove the `data.sql`
    file and replace it with a Java configuration file, which we will call `MongoDataInitializer.java`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JPA 实现，我们使用了 `data.sql` 文件来初始化数据库中的数据。对于 MongoDB 实现，我们可以移除 `data.sql` 文件，并用一个
    Java 配置文件替换它，我们将称之为 `MongoDataInitializer.java`：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This will be executed at load time and will seed the same data into our MongoDB
    as we did with our H2 database.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在加载时执行，并将与我们在 H2 数据库中执行相同的数据种子到我们的 MongoDB 中。
- en: Mapping domain objects with MongoDB
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 MongoDB 映射领域对象
- en: 'Let’s begin by mapping our `Event.java` file so that each of the domain objects
    is saved as a document in our MongoDB database. This can be done by performing
    the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先映射我们的 `Event.java` 文件，以便将每个领域对象作为文档保存在我们的 MongoDB 数据库中。这可以通过以下步骤完成：
- en: 'With a document database, domain object mapping is a little different, but
    the same ORM concepts hold true. Let’s begin with the `Event` JPA implementation,
    and then we can transform our `Entity` to document mapping:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文档数据库中，领域对象映射略有不同，但相同的ORM概念仍然适用。让我们从`Event` JPA实现开始，然后我们可以将我们的`Entity`转换为文档映射：
- en: '[PRE24]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In entity-based JPA mapping, we needed to use six different annotations to
    create the required mapping. Now, with document-based MongoDB mapping, we need
    to change all the previous mapping annotations. Here is a fully refactored example
    of our `Event.java` file:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在基于实体的JPA映射中，我们需要使用六个不同的注解来创建所需的映射。现在，在基于文档的MongoDB映射中，我们需要更改所有之前的映射注解。以下是我们`Event.java`文件的完全重构示例：
- en: '[PRE25]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding code, we can see the following notable changes.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们可以看到以下显著的变化。
- en: First, we declare the class to be of type `@o.s.d.mongodb.core.mapping.Document`
    and provide a collection name for these documents.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们声明类为`@o.s.d.mongodb.core.mapping.Document`类型，并为这些文档提供一个集合名称。
- en: Next, the `Event` class must implement the `o.s.d.domain.Persistable` interface,
    providing the primary key type (`Integer`) for our document.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，`Event`类必须实现`o.s.d.domain.Persistable`接口，为我们的文档提供主键类型（`Integer`）。
- en: Now, we change the annotation for our domain ID to `@o.s.d.annotation.Id`, to
    define the domain primary key.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将我们的领域ID的注解更改为`@o.s.d.annotation.Id`，以定义领域主键。
- en: Previously, we had to map our owner and attendee `CalendarUser` object to two
    different mapping annotations.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前，我们必须将所有者与会者`CalendarUser`对象映射到两个不同的映射注解。
- en: Now, we only have to define the two types to be of type `@o.s.d.mongodb.core.mapping.DBRef`
    and allow Spring Data to take care of the underlying references.
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们只需要定义两种类型为`@o.s.d.mongodb.core.mapping.DBRef`，并允许Spring Data处理底层引用。
- en: The final annotation we have to add defines a specific constructor to be used
    for new documents to be added to our document, by using the `@``o.s.d.annotation.PersistenceConstructor`
    annotation.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须添加的最后一个注解定义了一个特定的构造函数，用于通过使用`@o.s.d.annotation.PersistenceConstructor`注解将新文档添加到我们的文档中。
- en: 'Now that we have reviewed the changes needed to refactor from JPA to MongoDB,
    let’s refactor the other domain object, starting with the `Role.java` file, as
    follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经审查了从JPA到MongoDB重构所需的更改，让我们重构其他领域对象，从`Role.java`文件开始，如下所示：
- en: '[PRE26]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The final domain object that we need to refactor is our `CalendarUser.java`
    file. After all, this is the most complex domain object we have in this application:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要重构的最后一个领域对象是我们的`CalendarUser.java`文件。毕竟，这是我们在这个应用程序中最复杂的领域对象：
- en: '[PRE27]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As you can see, the effort to refactor our domain objects from JPA to MongoDB
    is fairly simple, requiring less annotation configuration than the JPA configuration.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，将我们的领域对象从JPA重构到MongoDB的努力相当简单，所需的注解配置比JPA配置少。
- en: Spring Data repositories of MongoDB
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MongoDB的Spring Data仓库
- en: 'We now have only a few changes to make to refactor from a JPA implementation
    to a MongoDB implementation. We will begin by refactoring our `CalendarUserRepository.java`
    file by changing the interface that our repository extends, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在只需要对从JPA实现到MongoDB实现的重构进行少量更改。我们将从重构我们的`CalendarUserRepository.java`文件开始，更改我们的仓库扩展的接口，如下所示：
- en: '[PRE28]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: sw `RoleRepository.java` files accordingly.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 适当地修改`RoleRepository.java`文件。
- en: Important note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you need help with any of these changes, remember the source for `chapter05.05`
    will have the completed code available for your reference.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要帮助进行这些更改，请记住`chapter05.05`的源代码将提供可供参考的完整代码。
- en: Data access objects in MongoDB
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MongoDB中的数据访问对象
- en: 'In our `EventDao` interface, we are required to create a new `Event` object.
    With JPA, we can automatically generate our object ID. With MongoDB, there are
    several ways to assign primary key identifiers, but for the sake of this demonstration,
    we are just going to use an atomic counter, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`EventDao`接口中，我们需要创建一个新的`Event`对象。在JPA中，我们可以自动生成我们的对象ID。在MongoDB中，有几种方法可以分配主键标识符，但为了演示的目的，我们只是使用原子计数器，如下所示：
- en: '[PRE29]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'There was technically no change to our `CalendarUserDao` object, but for consistency
    in this book, we renamed the implementation file to denote the use of `Mongo`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在技术上，我们的`CalendarUserDao`对象没有发生变化，但为了保持本书的一致性，我们将实现文件重命名为表示使用`Mongo`：
- en: '[PRE30]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: There are no other **Data Access Object** (**DAO**) changes required for this
    refactoring example.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个重构示例，没有其他**数据访问对象（DAO**）更改所需的。
- en: Go ahead and start the application, and it will behave just as before.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 开始应用吧，它将表现得和以前一样。
- en: Try to log in as **user1** and **admin1**. Then test the application to ensure
    that both users can add new events to the system, ensuring the mapping is correct
    for the entire application.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以**user1**和**admin1**的身份登录。然后测试应用程序，确保两个用户都可以向系统中添加新事件，确保整个应用程序的映射是正确的。
- en: Important note
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: You should start with the source from `chapter05.05-calendar`.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该从`chapter05.05-calendar`的源代码开始。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have looked at the power and flexibility of the Spring Data project and explored
    several aspects related to application development, as well as its integration
    with Spring Security. In this chapter, we covered the Spring Data project and
    a few of its capabilities. We also saw the refactoring process to convert from
    legacy JDBC code using SQL to ORM with JPA, and from a JPA implementation with
    Spring Data to a MongoDB implementation using Spring Data. We also covered configuring
    Spring Security to leverage an `ORM Entity` in a relational database and a document
    database.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了Spring Data项目的强大功能和灵活性，并研究了与应用程序开发相关的几个方面，以及它与Spring Security的集成。在本章中，我们介绍了Spring
    Data项目及其一些功能。我们还看到了将遗留的JDBC代码使用SQL转换为ORM使用JPA的过程，以及从使用Spring Data的JPA实现到使用Spring
    Data的MongoDB实现的过程。我们还介绍了配置Spring Security以利用关系型数据库中的`ORM实体`和文档数据库。
- en: In the next chapter, we will explore Spring Security’s built-in support for
    *LDAP-based authentication*.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨Spring Security对基于*LDAP认证*的内置支持。
