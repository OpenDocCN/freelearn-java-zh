["```java\nList<String> studentNames = new ArrayList<>();studentNames.add(\"Sarah-Milou\");\nstudentNames.add(\"Tjed\");\nstudentNames.add(\"Fahya\");\n```", "```java\nList<Person> personNames = new ArrayList<>();personNames.add(new Person(\"Sarah-Milou\", 4));\npersonNames.add(new Person(\"Tjed\", 6));\npersonNames.add(new Person(\"Fahya\", 8));\n```", "```java\nSet<String> emailAddresses = new HashSet<>();emailAddresses.add(\"sarahmilou@amsterdam.com\");\nemailAddresses.add(\"tjed@amsterdam.com\");\nemailAddresses.add(\"fahya@amsterdam.com\");\n```", "```java\nMap<String, String> userInfo = new HashMap<>();userInfo.put(\"Sarah-Milou\", \"Sarah-Milou Doyle\");\nuserInfo.put(\"Tjed\", \"Tjed Quist\");\nuserInfo.put(\"Fahya\", \"Fahya Osei\");\n```", "```java\nQueue<String> printQueue = new LinkedList<>();printQueue.add(\"Document1\");\nprintQueue.add(\"Document2\");\nprintQueue.add(\"Document3\");\nString nextJob = printQueue.poll(); // \"Document1\"\n```", "```java\nList<String> names = new ArrayList<>();names.add(\"Julie\"); // Adds \"Julie\" at the end of the list\nnames.add(0, \"Janice\"); // Inserts \"Janice\" at index 0\n```", "```java\nString name = names.get(1);\n```", "```java\nnames.remove(1); // Removes the element at index 1names.remove(\"Janice\"); // Removes the first occurrence\n```", "```java\nfor (int i = 0; i < names.size(); i++) {    System.out.println(names.get(i));\n}\n```", "```java\nJaniceMonica\n```", "```java\nfor (String name : names) {    System.out.println(name);\n}\n```", "```java\nSet<String> names = new HashSet<>();names.add(\"Elizabeth\");\nnames.add(\"Janie\");\n```", "```java\nSet<String> names = new LinkedHashSet<>();\n```", "```java\nSet<String> names = new TreeSet<>();\n```", "```java\nnames.remove(\"Janie\");\n```", "```java\nfor (String name : names) {    System.out.println(name);\n}\n```", "```java\nElizabeth\n```", "```java\nMap<String, Integer> gfNrMap = new HashMap<>();gfNrMap.put(\"Ross\", 12);\ngfNrMap.put(\"Chandler\", 8);\n```", "```java\nint rossNrOfGfs = gfNrMap.get(\"Ross\");\n```", "```java\ngfNrMap.put(\"Chandler\", 9);\n```", "```java\ngfNrMap.remove(\"Ross\");\n```", "```java\nfor (Map.Entry<String, Integer> entry : gfNrMap.entrySet()) {    System.out.println(entry.getKey() + \": \" +\n      entry.getValue());\n}\n```", "```java\nRoss: 12Chandler: 9\n```", "```java\nfor (String key : gfNrMap.keySet()) {    System.out.println(key + \": \" + gfNrMap.get(key));\n}\n```", "```java\nRoss: 12Chandler: 9\n```", "```java\nfor (Integer value : gfNrMap.values()) {    System.out.println(value);\n}\n```", "```java\n129\n```", "```java\nQueue<String> queue = new LinkedList<>();queue.add(\"Task 1\");\nqueue.offer(\"Task 2\");\n```", "```java\nDeque<String> queue = new LinkedList<>();queue.addLast(\"Task 1\"); // or add\nqueue.offer(\"Task 2\"); // or offerLast\n```", "```java\nqueue.addFirst(\"Task 3\");queue.offerFirst(\"Task 4\");\n```", "```java\nString head = queue.peek();\n```", "```java\nString removedElement = queue.poll();\n```", "```java\nfor (String element : queue) {    System.out.println(element);\n}\n```", "```java\nTask 3Task 1\nTask 2\n```", "```java\npublic class Person implements Comparable<Person> {...}\n```", "```java\npublic class Person implements Comparable<Person> {    int age; // not private to keep the example short\n    String name;\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n    @Override\n    public int compareTo(Person other) {\n        return Integer.compare(this.age, other.age);\n    }\n}\n```", "```java\nList<Person> personList = new ArrayList<>();personList.add(new Person(\"Huub\", 1));\npersonList.add(new Person(\"Joep\", 4));\npersonList.add(new Person(\"Anne\", 3));\nCollections.sort(personList);\n```", "```java\nComparator<Person> nameComparator = new  Comparator<Person>() {\n    @Override\n    public int compare(Person p1, Person p2) {\n        return p1.getName().compareTo(p2.getName());\n    }\n};\n```", "```java\nList<Person> personList = new ArrayList<>();personList.add(new Person(\"Huub\", 1));\npersonList.add(new Person(\"Joep\", 4));\npersonList.add(new Person(\"Anne\", 3));\nCollections.sort(personList, nameComparator);\n```", "```java\nTreeSet<Person> personTreeSet = new TreeSet<>();personTreeSet.add(new Person(\"Huub\", 1));\npersonTreeSet.add(new Person(\"Joep\", 4));\npersonTreeSet.add(new Person(\"Anne\", 3));\n```", "```java\nComparator<Person> nameComparator = (p1, p2) ->  p1.getName().compareTo(p2.getName());\nTreeSet<Person> personTreeSetByName = new\n  TreeSet<>(nameComparator);\npersonTreeSetByName.add(new Person(\"Huub\", 1));\npersonTreeSetByName.add(new Person(\"Joep\", 4));\npersonTreeSetByName.add(new Person(\"Anne\", 3));\n```", "```java\nTreeMap<Person, Integer> personTreeMap = new TreeMap<>();personTreeMap.put(new Person(\"Huub\", 1), 1);\npersonTreeMap.put(new Person(\"Joep\", 4), 4);\npersonTreeMap.put(new Person(\"Anne\", 3), 3);\n```", "```java\nComparator<Person> nameComparator = (p1, p2) ->  p1.getName().compareTo(p2.getName());\nTreeMap<Person, Integer> personTreeMapByName = new\n  TreeMap<>(nameComparator);\npersonTreeMapByName.put(new Person(\"Huub\", 1), 1);\npersonTreeMapByName.put(new Person(\"Joep\", 4), 4);\npersonTreeMapByName.put(new Person(\"Anne\", 3), 3);\n```", "```java\nList<String> names = new ArrayList<>();\n```", "```java\nList = new ArrayList();list.add(\"Hello\");\nlist.add(\"World\");\nlist.add(123); // Integer inserted in a List of strings.\n               //  Allowed, but not logical.\nfor (int i = 0; i < list.size(); i++) {\n    Object item = list.get(i);\n    if (item instanceof String) {\n        String strItem = (String) item; // Type casting\n                                        //  required\n        System.out.println(strItem);\n    } else {\n        System.out.println(\"Item is not a String\");\n    }\n}\n```", "```java\npublic class Laptop {    private String brand;\n    private String model;\n    public Laptop(String brand, String model) {\n        this.brand = brand;\n        this.model = model;\n    }\n    // Getters and setters omitted\n}\n```", "```java\npublic class Book {    private String title;\n    private String author;\n    public Book(String title, String author) {\n        this.title = title;\n        this.author = author;\n    }\n    // Getters and setters omitted\n}\n```", "```java\npublic class LaptopBag {    private Laptop;\n    public LaptopBag(Laptop laptop) {\n        this.laptop = laptop;\n    }\n    public Laptop getLaptop() {\n        return laptop;\n    }\n    public void setLaptop(Laptop laptop) {\n        this.laptop = laptop;\n    }\n}\n```", "```java\npublic class BookBag {    private Book;\n    public BookBag(Book book) {\n        this.book = book;\n    }\n    public Book getBook() {\n        return book;\n    }\n    public void setBook(Book book) {\n        this.book = book;\n    }\n}\n```", "```java\npublic class ObjectBag {    private Object;\n    public ObjectBag(Object object) {\n        this.object = object;\n    }\n    public Object getObject() {\n        return object;\n    }\n    public void setObject(Object object) {\n        this.object = object;\n    }\n}\n```", "```java\npublic class Bag<T> {    private T content;\n    public Bag(T content) {\n        this.content = content;\n    }\n    public T getContent() {\n        return content;\n    }\n    public void setContent(T content) {\n        this.content = content;\n    }\n}\n```", "```java\nBag<Laptop> laptopBag = new Bag<>(new Laptop(\"Dell\", \"XPS  15\"));\nBag<Book> bookBag = new Bag<>(new Book(\"Why Java is fun\",\n  \"Maaike and Seán\"));\n```", "```java\npublic interface Measurable {    double getMeasurement();\n}\n```", "```java\npublic class MeasurementBag<T extends Measurable> {    private T content;\n    public MeasurementBag(T content) {\n        this.content = content;\n    }\n    public T getContent() {\n        return content;\n    }\n    public void setContent(T content) {\n        this.content = content;\n    }\n    public double getContentMeasurement() {\n        return content.getMeasurement();\n    }\n}\n```", "```java\npublic class Person {    private String name;\n    private int age;\n    // Constructor, getters, and setters\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + (name == null ? 0 :\n          name.hashCode());\n        result = 31 * result + age;\n        return result;\n    }\n}\n```", "```java\npublic class Bag<T> {    private T content;\n    // Constructor, getters, and setters\n    @Override\n    public int hashCode() {\n        return Objects.hashCode(content);\n    }\n}\n```", "```java\nimport java.util.*;public class DinosaurCareSystem {\n    private Set<Dinosaur> dinosaurs;\n    private List<Activity> activities;\n    public DinosaurCareSystem() {\n        dinosaurs = new HashSet<>();\n        activities = new ArrayList<>();\n    }\n    public void addDinosaur(Dinosaur dinosaur) {\n        dinosaurs.add(dinosaur);\n    }\n    public void logActivity(Activity activity) {\n        activities.add(activity);\n    }\n    public List<Dinosaur> sortDinosaurs() {\n        List<Dinosaur> sortedDinosaurs = new\n          ArrayList<>(dinosaurs);\n        Collections.sort(sortedDinosaurs, new\n          DinosaurComparator());\n        return sortedDinosaurs;\n    }\n    //... existing methods for handling exceptions and\n          other functionalities here\n}\n```", "```java\nimport java.util.Comparator;public class DinosaurComparator implements\n  Comparator<Dinosaur> {\n    @Override\n    public int compare(Dinosaur d1, Dinosaur d2) {\n    // assume Dinosaur has a getSize() method\n        return d1.getSize().compareTo(d2.getSize());      }\n}\n```"]