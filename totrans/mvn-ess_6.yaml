- en: Chapter 6. Maven Assemblies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven provides an extensible architecture via plugins and lifecycles. Archive
    types such as `.jar`, `.war`, `.ear`, and many more are supported by plugins and
    associated lifecycles. The JAR plugin creates an artifact with the `.jar` extension
    and the relevant metadata, according to the JAR specification. The JAR file is,
    in fact, a ZIP file with the optional `META-INF` directory. You can find more
    details about the JAR specification from [http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html](http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html).
  prefs: []
  type: TYPE_NORMAL
- en: The JAR file aggregates a set of class files to build a single distribution
    unit. The WAR file aggregates a set of JAR files, Java classes, JSPs, images,
    and many more resources into a single distribution unit that can be deployed in
    a Java EE application server. However, when you build a product, you may need
    to aggregate many JAR files from different places, WAR files, README files, LICENSE
    files, and many more into a single ZIP file. To build such an archive, we can
    use the Maven `assembly` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the possible contents of a Maven assembly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Maven Assemblies](img/B02157_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Maven assembly plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assembly descriptor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifact/resource filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End-to-end example to build a custom distribution archive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Maven `assembly` plugin produces a custom archive, which adheres to a user-defined
    layout. This custom archive is also known as the Maven assembly. In other words,
    a Maven assembly is a distribution unit, which is built according to a custom
    layout.
  prefs: []
  type: TYPE_NORMAL
- en: The assembly plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's take a quick look at a real-world example, which uses the `assembly` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: '**WSO2 Identity Server** (**WSO2 IS**) is an open source identity and entitlement
    management product distributed under the Apache 2.0 license as a ZIP file. The
    ZIP distribution is assembled using the Maven `assembly` plugin. Let''s take a
    look at the root POM file of the `distribution` module of WSO2 IS, which builds
    the Identity Server distribution, available at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml).'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, pay attention to the `plugins` section of the POM file. Here, you can
    see that `maven-assembly-plugin` is associated with the project. Inside the plugin
    configuration, you can define any number of executions with the `execution` element,
    which is a child element of the `executions` element, which has the following
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you look at the first `execution` element, it associates the `attached` goal
    of the `assembly` plugin with the `test` phase of the `default` lifecycle. In
    the same manner, the second `execution` element associates the `attached` goal
    with the `package` phase of the `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Maven `default` lifecycle includes: `validate`, `initialize`, `generate-sources`,
    `process-sources`, `generate-resources`, `process-resources`, `compile`, `process-classes`,
    `generate-test-sources`, `process-test-sources`, `generate-test-resources`, `process-test-resources`,
    `test-compile`, `process-test-classes`, `test`, `prepare-package`, `package`,
    `pre-integration-test`, `integration-test`, `post-integration-test`, `verify`,
    `install`, `deploy`.'
  prefs: []
  type: TYPE_NORMAL
- en: Everything inside the `configuration` element is plugin specific. In this case,
    the Maven `assembly` plugin knows how to process the `filters` and `descriptors`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this particular example, only the `attached` goal of the `assembly` plugin
    is used. The `assembly` plugin introduces eight goals; however, six of them are
    deprecated, including the `attached` goal. It is not recommended to use any of
    the deprecated goals. Later, we''ll see how to use the `single` goal of the `assembly`
    plugin instead of the deprecated `attached` goal. The following lists out the
    six deprecated goals of the `assembly` plugin. In case you are using any of them,
    you should migrate your project to use the `single` goal, except for the fourth
    one, the `unpack` goal. For that, you need to use the `unpack` goal of the Maven
    `dependency` plugin. The following lists out the six deprecated goals of the assembly
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`assembly:assembly`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assembly:attached`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assembly:directory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assembly:unpack`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assembly:directory-single`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`assembly:directory-inline`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about the Maven `assembly` plugin and its goals can be found at
    [http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html](http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html).
  prefs: []
  type: TYPE_NORMAL
- en: The assembly descriptor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `assembly` descriptor is an XML-based configuration, which defines how to
    build an assembly and how its content should be structured.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we go back to our previous example, the `attached` goal of the `assembly`
    plugin creates a binary distribution according to the `assembly` descriptor, both
    in the `test` and the `package` phases of the `default` Maven lifecycle. The `assembly`
    descriptors for each phase can be specified under the `descriptors` element. As
    in the case of this particular example, there are multiple `descriptor` elements
    defined under the `descriptors` parent element. For the `package` phase, it has
    three assembly descriptors, as shown in the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Each `descriptor` element instructs the `assembly` plugin from where to load
    the descriptor, and each `descriptor` file will be executed sequentially in the
    defined order.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the `src/assembly/bin.xml` file, which is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The file path in the descriptor element is given relative to the root POM file
    under the `distribution` module. You can find the complete `bin.xml` file at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml).
  prefs: []
  type: TYPE_NORMAL
- en: The value of the `format` element specifies the ultimate type of the artifact
    to be produced. It can be `zip`, `tar`, `tar.gz`, `tar.bz2`, `jar`, `dir`, or
    `war`. You can use the same assembly descriptor to create multiple formats. In
    that case, you need to include multiple `format` elements under the `formats`
    parent element.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Even though you can specify the format of the assembly in the `assembly` descriptor,
    it is recommended to do it via the plugin configuration. In the plugin configuration,
    you can define different formats for your assembly, as shown in the following
    block of code. The benefit here is that you can have multiple Maven profiles to
    build different archive types. We will discuss Maven profiles in [Chapter 7](ch07.html
    "Chapter 7. Best Practices"), *Best Practices*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When the value of the `includeBaseDirectory` element is set to `false`, the
    artifact will be created with no base directory. If this is set to `true`, which
    is the default value, the artifact will be created under the base directory. You
    can specify a value for the base directory under the `baseDirectory` element.
    In most cases, the value of `includeBaseDirectory` is set to `false` so that the
    final distribution unit directly packs all the artifacts right under it, without
    having another root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Each `fileSet` element under the `fileSets` parent element specifies the set
    of files to be assembled to build the final archive. The first `fileSet` element
    instructs to copy all the content from `directory` (which is `target/wso2carbon-core-4.2.0`)
    to the `outputDirectory`, excluding all the files defined under each `exclude`
    element. If no exclusions are defined, then all the content inside the `directory`
    will be copied into the `outputDirectory`. In this particular case, the value
    of `${pom.version}` will be replaced by the `version` of the artifact, defined
    in the `pom.xml` file under the `distribution` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first `exclude` element instructs not to copy any file having the extension
    `.sh` from anywhere inside `target/wso2carbon-core-4.2.0` to the `outputDirectory`
    element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The second `exclude` element instructs not to copy any file having the name
    `wso2server.bat` from anywhere inside `target/wso2carbon-core-4.2.0` to `outputDirectory`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The third `exclude` element instructs not to copy the file `axis2services`
    /`sample01.aar` from anywhere inside `target/wso2carbon-core-4.2.0` to `outputDirectory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `include` element instructs to copy only the files having the `.xml` extension
    from anywhere inside the `../p2-profile-gen/target/wso2carbon-core-4.2.0/repository/conf/identity`
    directory to `outputDirectory`. If no `include` element is defined, everything
    will be included:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The three `include` elements mentioned in the preceding code instruct to copy
    only the files having specific names from anywhere inside the `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/security/ldif`
    directory to the `outputDirectory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `include` element instructs to copy only the WAR file with the name `oauth2.war`
    from anywhere inside the `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/deployment/server/webappas`
    directory to the `outputDirectory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The `include` element instructs to copy any file with the extension `.css`
    from anywhere inside the `../styles/service/src/main/resources/web/styles/css`
    directory to the `outputDirectory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The `include` element instructs to copy all the files inside the `patch006`
    directory from anywhere inside the `../p2-profile-gen/target/WSO2-CARBON-PATCH-4.2.0-0006`
    directory to `outputDirectory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `files` element is very much similar to the `fileSets` element in terms
    of the key functionality. Both can be used to control the contents of the assembly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `files`/`file` element should be used when you are fully aware of the exact
    source file location while the `fileSets`/`fileSet` element is much flexible in
    picking files from a source based on a defined pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fileMode` element in the following snippet defines a set of permissions
    to be attached to the copied file. The permissions are defined as per the four
    digit octal notation. You can read more about the four digit octal notation from
    [http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions](http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: There are three `descriptor` elements defined under the `assembly` plugin for
    the `package` phase. The one we discussed earlier will create the binary distribution,
    while the `src/assembly/src.xml` and `src/assembly/docs.xml` files will create
    the source distribution and the documentation distribution respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also look at the `assembly` descriptor defined for the `test` phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This is quite short and only includes the configuration required to build the
    initial distribution of the WSO2 Identity Server. Even though this project does
    this at the `test` phase, it seems like it has no value. In this case, it seems
    like `maven-antrun-plugin`, which is also associated with the `package` phase,
    but prior to the definition of the `assembly` plugin, needs the ZIP file distribution.
    Ideally, you should not have the `assembly` plugin run at the `test` phase unless
    there is a very strong reason to do so. You may need the distribution ready to
    run the integration tests; however, the integration tests should be executed in
    the `integration-test` phase, which comes after the `package` phase. In most cases,
    the `assembly` plugin is associated with the `package` phase of the Maven `default`
    lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the assembly descriptor defined in `src/assembly/dist.xml`
    for the `test` phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This configuration introduces a new element that we have not seen before, that
    is, `dependencySet`. The `dependencySet` element lets you include or exclude project
    dependencies to/from the final assembly that we are building. In the previous
    example, it adds the `rampart` module into the `outputDirectory` element. The
    value of the `include` element should be in the format of `groupdId:artifactId:type[:classifier][:version]`.
    Maven will first look for this artifact with the defined coordinates in its local
    Maven repository, and if found, it will copy it to the location defined under
    the `outputDirectory` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike the `fileSet` and `file` elements, the `dependencySet` element does
    not define a concrete path to pick and copy the dependency from. Maven finds the
    artifacts via the defined coordinates. If you want to include a dependency just
    by its `groupId` element and the `artifactId` coordinates, then you can follow
    the pattern `groupdId:artifactId`. The particular artifact should be declared
    under the `dependencies` section of the POM file, which has the `assembly` plugin
    defined. You can find the following dependency definition for the `rampart` module
    in the POM file under the `distribution` module. If two versions of the same dependency
    are being defined in the same POM file (which is rather unlikely), then the last
    in the order will be copied:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also include a dependency by its `groupId`, `artifactId`, and `type`,
    as shown in the following configuration. Then, you can follow the pattern `groupdId:artifactId:type[:classifier]`.
    This is the exact pattern followed in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to be more precise, you can also include the version into the pattern.
    In this case, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most of the time we talk about four Maven coordinates; however, to be precise,
    there are five. A Maven artifact can be uniquely identified by these five coordinates:
    `groupdId:artifactId:type[:classifier]:version`. We have already discussed the
    four main coordinates, but not the `classifier`. This is very rarely used; it
    can be quite useful in a scenario where we build an artifact out of the same POM
    file but with multiple target environments. We will be talking about `classifiers`
    in detail in [Chapter 7](ch07.html "Chapter 7. Best Practices"), *Best Practices*.'
  prefs: []
  type: TYPE_NORMAL
- en: The previous example only covered a very small subset of the `assembly` descriptor.
    You can find all available configuration options at [http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html](http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html),
    which is quite an exhaustive list.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is a best practice or a convention to include all the assembly `descriptor`
    files inside a directory called `assembly`, though it is not mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at another real-world example with **Apache Axis2**. Axis2
    is an open source project released under the Apache 2.0 license. Axis2 has three
    types of distributions: a binary distribution as a ZIP file, a WAR file distribution,
    and a source distribution as a ZIP file. The binary ZIP distribution of Axis2
    can be run on its own, while the WAR distribution must be deployed in a Java EE
    application server.'
  prefs: []
  type: TYPE_NORMAL
- en: All three Axis2 distributions are created from the POM file inside the `distribution`
    module, which can be found at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml).
  prefs: []
  type: TYPE_NORMAL
- en: 'This POM file associates the `single` goal of the Maven `assembly` plugin with
    the project, which initiates the process of creating the final distribution artifacts.
    The assembly configuration points to three different `assembly` descriptors—one
    for the ZIP distribution, the second for the WAR distribution, and the third for
    the source code distribution. The following code snippet shows the `assembly`
    plugin configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the `bin-assembly.xml` file—the `assembly` descriptor,
    which builds the ZIP distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This is exactly what we discussed earlier, and exactly what we wanted to avoid
    due to the same reason as in the comment, in the preceding code snippet. If we
    want to build a `tar.gz` distribution, then we need to modify the file. Instead
    of doing that, we can move the `format` configuration element out of the `assembly`
    descriptor to the plugin configuration defined in the `pom.xml` file. Then, you
    can define multiple profiles and configure the archive type based on the profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `useProjectArtifact` configuration element instructs the plugin whether
    to include the artifact produced in this project build into the `dependencySet`
    element. By setting the value to `false`, we avoid it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `includes` and `excludes` configuration elements will ensure that all the
    artifacts defined under the `dependencies` section of the `distribution/pom.xml`
    file will be included in the assembly, except the artifacts defined under the
    `excludes` configuration element. If you do not have any `include` elements, all
    the dependencies defined in the POM file will be included in the assembly, except
    what is defined under the `excludes` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `unpack` configuration element is set to `true`, all the dependencies
    defined under the `include` elements will be unpacked into `outputDirectory`.
    The plugin is capable of unpacking `jar`, `zip`, `tar.gz`, and `tar.bz` archives.
    The `unpackOptions` configuration element, shown in the following configuration,
    can be used to filter out the content of the dependencies getting unpacked. According
    to the following configuration, only the files defined under the `include` elements
    under the `unpackOptions` element will be included; the rest will be ignored and
    won''t be included in the assembly. In this particular case, `axis2-webapp` is
    a WAR file (which is defined under the `include` element of the previous configuration)
    and the `distributions/pom.xml` file has a dependency to it. This web app will
    be exploded (extracted), and then all the files inside the `WEB-INF/classes` and
    `axis2-web` directories will be copied into the `webapp` directory of the ZIP
    distribution, along with the `WEB-INF/web.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s take a look at `war-assembly.xml`—the assembly descriptor, which
    builds the WAR distribution. There is nothing new in this configuration, except
    the `outputFileNameMapping` configuration element. Since the value of the `format`
    element is set to `zip`, this `assembly` descriptor will produce an archive file
    conforming to the ZIP file specification. The value of the `outputFileNameMapping`
    configuration element gets applied to all the dependencies. The default value
    is parameterized: `${artifactId}-${version}${classifier?}.${extension}`. In this
    case, it''s hardcoded to `axis2.war`, so the `axis2-webapp` artifact will be copied
    to the location defined under the `outputDirectory` element as `axis2.war`. Since
    there is no value defined for the `outputDirectory` element, the files will be
    copied to the root location, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Artifact/resource filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We had a `filters` configuration, defined for the `assembly` plugin in the first
    example with the WSO2 Identity Server. This instructs the `assembly` plugin to
    apply the filter criteria defined in the provided filter or the set of filters
    for the files that are being copied to the final archive file. If you want to
    apply a filter to a given file, then you should set the value of the `filtered`
    element to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration shows how to define a filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a look at the file `${basedir}/src/assembly/filter.properties`.
    This file defines a set of name/value pairs. The name is a special placeholder,
    which should be enclosed between `${` and `}` in the file to be filtered, and
    it will be replaced by the value during the filtering process:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Assembly help
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we discussed earlier, the `assembly` plugin currently only has two active
    goals: `single` and `help`; all the others are deprecated. As we witnessed in
    the previous example, the `single` goal is responsible for creating the archive
    with all sorts of other configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to execute the `help` goal of the `assembly`
    plugin. This has to be executed from a directory with a POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If you see the following error when you run this command, you may not have
    the latest version. In that case, update the plugin version to 2.4.1 or later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: A runnable standalone Maven project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since we have covered a lot of ground-related information of the Maven `assembly`
    plugin, let''s see how to build a complete end-to-end runnable standalone project
    with the `assembly` plugin. You can find the complete sample at [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06).
    Proceed with the following steps to create a runnable standalone Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a directory structure, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `JSONParser.java` file is a simple Java class, which reads a JSON file
    and prints to the console, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can create a POM file under `modules/json-parser` to build our JAR
    file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once we are done with the `json-parser` module, the next step is to create
    the `distribution` module. The `distribution` module will have a POM file and
    an `assembly` descriptor. Let''s first create the POM file under `modules/distribution`,
    which is shown here. This will associate two plugins with the project: `maven-assembly-plugin`
    and `maven-jar-plugin`. Both the plugins get executed in the `package` phase of
    the Maven `default` lifecycle. Since the `maven-assembly-plugin` is defined prior
    to the `maven-jar-plugin`, it will get executed first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following configuration shows the `assembly` descriptor (`module/distribution/src/main/assembly/dist.xml`),
    corresponding to the `assembly` plugin defined in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we are done with the `distribution` module too. Next, we will create the
    root POM file, which aggregates both the `json-parser` and `distribution` modules,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are all set to build the project. From the root directory, type `mvn clean
    install`. This will produce the `json-parser-bin.zip` archive inside the `modules/distribution/target`
    directory. The output will be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Go to `modules/distribution/target` and unzip `json-parser-bin.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run the parser, type the following command, which will produce `No valid
    JSON file provided` as the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once again, run the parser with a valid JSON file. You need to pass the path
    to the JSON file as an argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the output produced by the preceding command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on the Maven `assembly` plugin. The `assembly` plugin
    provides a way of building custom archive files, aggregating many other custom
    configurations and resources. Most of the Java based products use the `assembly`
    plugin to build the final distribution artifacts. These can be a binary distribution,
    a source code distribution, or even a documentation distribution. This chapter
    covered real-world examples on how to use the Maven `assembly` plugin in detail,
    and finally, concluded with an end-to-end sample Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss best practices in Maven.
  prefs: []
  type: TYPE_NORMAL
