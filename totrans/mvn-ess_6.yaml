- en: Chapter 6. Maven Assemblies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 Maven Assemblies
- en: Maven provides an extensible architecture via plugins and lifecycles. Archive
    types such as `.jar`, `.war`, `.ear`, and many more are supported by plugins and
    associated lifecycles. The JAR plugin creates an artifact with the `.jar` extension
    and the relevant metadata, according to the JAR specification. The JAR file is,
    in fact, a ZIP file with the optional `META-INF` directory. You can find more
    details about the JAR specification from [http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html](http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 通过插件和生命周期提供了一种可扩展的架构。插件和关联的生命周期支持诸如 `.jar`、`.war`、`.ear` 等多种存档类型。JAR 插件根据
    JAR 规范创建一个具有 `.jar` 扩展名和相关元数据的工件。实际上，JAR 文件是一个包含可选 `META-INF` 目录的 ZIP 文件。你可以从
    [http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html](http://docs.oracle.com/javase/7/docs/technotes/guides/jar/jar.html)
    找到更多关于 JAR 规范的详细信息。
- en: The JAR file aggregates a set of class files to build a single distribution
    unit. The WAR file aggregates a set of JAR files, Java classes, JSPs, images,
    and many more resources into a single distribution unit that can be deployed in
    a Java EE application server. However, when you build a product, you may need
    to aggregate many JAR files from different places, WAR files, README files, LICENSE
    files, and many more into a single ZIP file. To build such an archive, we can
    use the Maven `assembly` plugin.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JAR 文件将一组类文件聚合起来构建一个单一的发行单元。WAR 文件将一组 JAR 文件、Java 类、JSP、图片以及许多其他资源聚合到一个单一的发行单元中，该单元可以在
    Java EE 应用服务器中部署。然而，当你构建一个产品时，你可能需要将来自不同地方的许多 JAR 文件、WAR 文件、README 文件、LICENSE
    文件等聚合到一个单一的 ZIP 文件中。为了构建这样的存档，我们可以使用 Maven `assembly` 插件。
- en: 'The following figure shows the possible contents of a Maven assembly:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了 Maven `assembly` 的可能内容：
- en: '![Maven Assemblies](img/B02157_06_01.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Maven Assemblies](img/B02157_06_01.jpg)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Maven assembly plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven `assembly` 插件
- en: Assembly descriptor
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存档描述符
- en: Artifact/resource filters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 艺术品/资源过滤器
- en: End-to-end example to build a custom distribution archive
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建定制发行存档的端到端示例
- en: The Maven `assembly` plugin produces a custom archive, which adheres to a user-defined
    layout. This custom archive is also known as the Maven assembly. In other words,
    a Maven assembly is a distribution unit, which is built according to a custom
    layout.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `assembly` 插件生成一个符合用户定义布局的定制存档。这个定制存档也被称为 Maven `assembly`。换句话说，一个 Maven
    `assembly` 是一个根据定制布局构建的发行单元。
- en: The assembly plugin
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`assembly` 插件'
- en: Let's take a quick look at a real-world example, which uses the `assembly` plugin.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速看一下一个使用 `assembly` 插件的真实世界示例。
- en: '**WSO2 Identity Server** (**WSO2 IS**) is an open source identity and entitlement
    management product distributed under the Apache 2.0 license as a ZIP file. The
    ZIP distribution is assembled using the Maven `assembly` plugin. Let''s take a
    look at the root POM file of the `distribution` module of WSO2 IS, which builds
    the Identity Server distribution, available at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**WSO2 身份服务器**（**WSO2 IS**）是一个开源的身份和权限管理产品，以 ZIP 文件的形式分发，遵循 Apache 2.0 许可证。ZIP
    分发是通过 Maven `assembly` 插件组装的。让我们看一下 WSO2 IS 的 `distribution` 模块的根 POM 文件，它构建了身份服务器发行版，可在
    [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/pom.xml)
    找到。'
- en: 'First, pay attention to the `plugins` section of the POM file. Here, you can
    see that `maven-assembly-plugin` is associated with the project. Inside the plugin
    configuration, you can define any number of executions with the `execution` element,
    which is a child element of the `executions` element, which has the following
    configuration:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，注意 POM 文件的 `plugins` 部分。在这里，你可以看到 `maven-assembly-plugin` 与项目相关联。在插件配置内部，你可以使用
    `execution` 元素定义任意数量的执行，该元素是 `executions` 元素的一个子元素，其配置如下：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you look at the first `execution` element, it associates the `attached` goal
    of the `assembly` plugin with the `test` phase of the `default` lifecycle. In
    the same manner, the second `execution` element associates the `attached` goal
    with the `package` phase of the `default` lifecycle.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看第一个 `execution` 元素，它将 `assembly` 插件的 `attached` 目标与 `default` 生命周期的 `test`
    阶段关联起来。同样地，第二个 `execution` 元素将 `attached` 目标与 `default` 生命周期的 `package` 阶段关联起来。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Maven `default` lifecycle includes: `validate`, `initialize`, `generate-sources`,
    `process-sources`, `generate-resources`, `process-resources`, `compile`, `process-classes`,
    `generate-test-sources`, `process-test-sources`, `generate-test-resources`, `process-test-resources`,
    `test-compile`, `process-test-classes`, `test`, `prepare-package`, `package`,
    `pre-integration-test`, `integration-test`, `post-integration-test`, `verify`,
    `install`, `deploy`.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `default`生命周期包括：`validate`、`initialize`、`generate-sources`、`process-sources`、`generate-resources`、`process-resources`、`compile`、`process-classes`、`generate-test-sources`、`process-test-sources`、`generate-test-resources`、`process-test-resources`、`test-compile`、`process-test-classes`、`test`、`prepare-package`、`package`、`pre-integration-test`、`integration-test`、`post-integration-test`、`verify`、`install`、`deploy`。
- en: Everything inside the `configuration` element is plugin specific. In this case,
    the Maven `assembly` plugin knows how to process the `filters` and `descriptors`
    elements.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`configuration`元素内的所有内容都是插件特定的。在这种情况下，Maven `assembly`插件知道如何处理`filters`和`descriptors`元素。'
- en: 'In this particular example, only the `attached` goal of the `assembly` plugin
    is used. The `assembly` plugin introduces eight goals; however, six of them are
    deprecated, including the `attached` goal. It is not recommended to use any of
    the deprecated goals. Later, we''ll see how to use the `single` goal of the `assembly`
    plugin instead of the deprecated `attached` goal. The following lists out the
    six deprecated goals of the `assembly` plugin. In case you are using any of them,
    you should migrate your project to use the `single` goal, except for the fourth
    one, the `unpack` goal. For that, you need to use the `unpack` goal of the Maven
    `dependency` plugin. The following lists out the six deprecated goals of the assembly
    plugin:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的例子中，只使用了`assembly`插件的`attached`目标。`assembly`插件引入了八个目标；然而，其中六个已经弃用，包括`attached`目标。不建议使用任何已弃用的目标。稍后，我们将看到如何使用`assembly`插件的`single`目标来替代已弃用的`attached`目标。以下列出了`assembly`插件的六个已弃用目标。如果你正在使用其中任何一个，你应该将你的项目迁移到使用`single`目标，除了第四个，即`unpack`目标。为此，你需要使用Maven
    `dependency`插件的`unpack`目标。以下列出了`assembly`插件的六个已弃用目标：
- en: '`assembly:assembly`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:assembly`'
- en: '`assembly:attached`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:attached`'
- en: '`assembly:directory`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:directory`'
- en: '`assembly:unpack`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:unpack`'
- en: '`assembly:directory-single`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:directory-single`'
- en: '`assembly:directory-inline`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assembly:directory-inline`'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about the Maven `assembly` plugin and its goals can be found at
    [http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html](http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Maven `assembly`插件的更多详细信息及其目标可以在[http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html](http://maven.apache.org/plugins/maven-assembly-plugin/plugin-info.html)找到。
- en: The assembly descriptor
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件描述符
- en: The `assembly` descriptor is an XML-based configuration, which defines how to
    build an assembly and how its content should be structured.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`assembly`描述符是一个基于XML的配置，它定义了如何构建一个组件以及其内容应该如何结构化。'
- en: 'If we go back to our previous example, the `attached` goal of the `assembly`
    plugin creates a binary distribution according to the `assembly` descriptor, both
    in the `test` and the `package` phases of the `default` Maven lifecycle. The `assembly`
    descriptors for each phase can be specified under the `descriptors` element. As
    in the case of this particular example, there are multiple `descriptor` elements
    defined under the `descriptors` parent element. For the `package` phase, it has
    three assembly descriptors, as shown in the following configuration:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到之前的例子，`assembly`插件的`attached`目标会根据`assembly`描述符创建一个二进制分发，在`default` Maven生命周期的`test`和`package`阶段。每个阶段的`assembly`描述符可以在`descriptors`元素下指定。正如这个特定例子的情况一样，在`descriptors`父元素下定义了多个`descriptor`元素。对于`package`阶段，它有三个组件描述符，如下面的配置所示：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each `descriptor` element instructs the `assembly` plugin from where to load
    the descriptor, and each `descriptor` file will be executed sequentially in the
    defined order.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`descriptor`元素指示`assembly`插件从哪里加载描述符，并且每个`descriptor`文件将按照定义的顺序依次执行。
- en: 'Let''s take a look at the `src/assembly/bin.xml` file, which is shown here:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看`src/assembly/bin.xml`文件，它在这里显示：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The file path in the descriptor element is given relative to the root POM file
    under the `distribution` module. You can find the complete `bin.xml` file at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符元素中的文件路径是相对于`distribution`模块下的根POM文件给出的。你可以在[https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/products/is/5.0.0/modules/distribution/src/assembly/bin.xml)找到完整的`bin.xml`文件。
- en: The value of the `format` element specifies the ultimate type of the artifact
    to be produced. It can be `zip`, `tar`, `tar.gz`, `tar.bz2`, `jar`, `dir`, or
    `war`. You can use the same assembly descriptor to create multiple formats. In
    that case, you need to include multiple `format` elements under the `formats`
    parent element.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`format`元素的值指定了要生成的存档的最终类型。它可以是指定类型为`zip`、`tar`、`tar.gz`、`tar.bz2`、`jar`、`dir`或`war`。你可以使用相同的汇编描述符来创建多个格式。在这种情况下，你需要在`formats`父元素下包含多个`format`元素。'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Even though you can specify the format of the assembly in the `assembly` descriptor,
    it is recommended to do it via the plugin configuration. In the plugin configuration,
    you can define different formats for your assembly, as shown in the following
    block of code. The benefit here is that you can have multiple Maven profiles to
    build different archive types. We will discuss Maven profiles in [Chapter 7](ch07.html
    "Chapter 7. Best Practices"), *Best Practices*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你可以在`assembly`描述符中指定汇编的格式，但建议通过插件配置来完成。在插件配置中，你可以为你的汇编定义不同的格式，如下面的代码块所示。这里的优点是你可以拥有多个Maven配置文件来构建不同的存档类型。我们将在[第7章](ch07.html
    "第7章。最佳实践")*最佳实践*中讨论Maven配置文件：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When the value of the `includeBaseDirectory` element is set to `false`, the
    artifact will be created with no base directory. If this is set to `true`, which
    is the default value, the artifact will be created under the base directory. You
    can specify a value for the base directory under the `baseDirectory` element.
    In most cases, the value of `includeBaseDirectory` is set to `false` so that the
    final distribution unit directly packs all the artifacts right under it, without
    having another root directory:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当`includeBaseDirectory`元素的值设置为`false`时，将不会创建基础目录，如果设置为`true`，这是默认值，则将在基础目录下创建存档。你可以在`baseDirectory`元素下指定基础目录的值。在大多数情况下，`includeBaseDirectory`的值设置为`false`，以便最终的分发单元直接将所有存档打包在其下方，而不需要另一个根目录：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Each `fileSet` element under the `fileSets` parent element specifies the set
    of files to be assembled to build the final archive. The first `fileSet` element
    instructs to copy all the content from `directory` (which is `target/wso2carbon-core-4.2.0`)
    to the `outputDirectory`, excluding all the files defined under each `exclude`
    element. If no exclusions are defined, then all the content inside the `directory`
    will be copied into the `outputDirectory`. In this particular case, the value
    of `${pom.version}` will be replaced by the `version` of the artifact, defined
    in the `pom.xml` file under the `distribution` module.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fileSets`父元素下的每个`fileSet`元素指定了要组装以构建最终存档的文件集。第一个`fileSet`元素指示将`directory`（即`target/wso2carbon-core-4.2.0`）中的所有内容复制到`outputDirectory`，排除每个`exclude`元素下定义的所有文件。如果没有定义排除项，则将`directory`内部的所有内容复制到`outputDirectory`。在这个特定的情况下，`${pom.version}`的值将被在`distribution`模块下的`pom.xml`文件中定义的存档`version`值所替换。
- en: 'The first `exclude` element instructs not to copy any file having the extension
    `.sh` from anywhere inside `target/wso2carbon-core-4.2.0` to the `outputDirectory`
    element:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个`exclude`元素指示不要从`target/wso2carbon-core-4.2.0`内部的任何位置复制任何扩展名为`.sh`的文件到`outputDirectory`元素：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The second `exclude` element instructs not to copy any file having the name
    `wso2server.bat` from anywhere inside `target/wso2carbon-core-4.2.0` to `outputDirectory`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个`exclude`元素指示不要从`target/wso2carbon-core-4.2.0`内部的任何位置复制任何名为`wso2server.bat`的文件到`outputDirectory`。
- en: 'The third `exclude` element instructs not to copy the file `axis2services`
    /`sample01.aar` from anywhere inside `target/wso2carbon-core-4.2.0` to `outputDirectory`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个`exclude`元素指示不要从`target/wso2carbon-core-4.2.0`内部的任何位置复制文件`axis2services`/`sample01.aar`到`outputDirectory`：
- en: '[PRE7]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The `include` element instructs to copy only the files having the `.xml` extension
    from anywhere inside the `../p2-profile-gen/target/wso2carbon-core-4.2.0/repository/conf/identity`
    directory to `outputDirectory`. If no `include` element is defined, everything
    will be included:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 元素指示仅从 `../p2-profile-gen/target/wso2carbon-core-4.2.0/repository/conf/identity`
    目录内的任何位置复制具有 `.xml` 扩展名的文件到 `outputDirectory`。如果没有定义 `include` 元素，则所有内容都将被包含：'
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The three `include` elements mentioned in the preceding code instruct to copy
    only the files having specific names from anywhere inside the `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/security/ldif`
    directory to the `outputDirectory`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前述代码中提到的三个 `include` 元素指示仅从 `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/security/ldif`
    目录内的任何位置复制具有特定名称的文件到 `outputDirectory`：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `include` element instructs to copy only the WAR file with the name `oauth2.war`
    from anywhere inside the `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/deployment/server/webappas`
    directory to the `outputDirectory`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 元素指示仅从 `../p2-profile-gen/target/wso2carbon-core/4.2.0/repository/resources/deployment/server/webappas`
    目录内的任何位置复制名为 `oauth2.war` 的WAR文件到 `outputDirectory`：'
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `include` element instructs to copy any file with the extension `.css`
    from anywhere inside the `../styles/service/src/main/resources/web/styles/css`
    directory to the `outputDirectory`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 元素指示从 `../styles/service/src/main/resources/web/styles/css` 目录内的任何位置复制任何具有
    `.css` 扩展名的文件到 `outputDirectory`：'
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `include` element instructs to copy all the files inside the `patch006`
    directory from anywhere inside the `../p2-profile-gen/target/WSO2-CARBON-PATCH-4.2.0-0006`
    directory to `outputDirectory`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`include` 元素指示从 `../p2-profile-gen/target/WSO2-CARBON-PATCH-4.2.0-0006` 目录内的任何位置复制
    `patch006` 目录中的所有文件到 `outputDirectory`：'
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `files` element is very much similar to the `fileSets` element in terms
    of the key functionality. Both can be used to control the contents of the assembly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`files` 元素在关键功能方面与 `fileSets` 元素非常相似。两者都可以用来控制组合的内容。'
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `files`/`file` element should be used when you are fully aware of the exact
    source file location while the `fileSets`/`fileSet` element is much flexible in
    picking files from a source based on a defined pattern.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完全清楚确切源文件位置时，应使用 `files/file` 元素，而 `fileSets/fileSet` 元素在根据定义的模式从源中选择文件方面则更加灵活。
- en: 'The `fileMode` element in the following snippet defines a set of permissions
    to be attached to the copied file. The permissions are defined as per the four
    digit octal notation. You can read more about the four digit octal notation from
    [http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions](http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的片段中的 `fileMode` 元素定义了一组要附加到复制文件的权限。权限按照四位八进制表示法定义。你可以从 [http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions](http://en.wikipedia.org/wiki/File_system_permissions#Octal_notation_and_additional_permissions)
    了解更多关于四位八进制表示法的信息：
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There are three `descriptor` elements defined under the `assembly` plugin for
    the `package` phase. The one we discussed earlier will create the binary distribution,
    while the `src/assembly/src.xml` and `src/assembly/docs.xml` files will create
    the source distribution and the documentation distribution respectively.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `assembly` 插件的 `package` 阶段下定义了三个 `descriptor` 元素。我们之前讨论的那个将创建二进制发行版，而 `src/assembly/src.xml`
    和 `src/assembly/docs.xml` 文件将分别创建源发行版和文档发行版。
- en: 'Let''s also look at the `assembly` descriptor defined for the `test` phase:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们也看看为 `test` 阶段定义的 `assembly` 描述符：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is quite short and only includes the configuration required to build the
    initial distribution of the WSO2 Identity Server. Even though this project does
    this at the `test` phase, it seems like it has no value. In this case, it seems
    like `maven-antrun-plugin`, which is also associated with the `package` phase,
    but prior to the definition of the `assembly` plugin, needs the ZIP file distribution.
    Ideally, you should not have the `assembly` plugin run at the `test` phase unless
    there is a very strong reason to do so. You may need the distribution ready to
    run the integration tests; however, the integration tests should be executed in
    the `integration-test` phase, which comes after the `package` phase. In most cases,
    the `assembly` plugin is associated with the `package` phase of the Maven `default`
    lifecycle.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简短，仅包括构建WSO2身份服务器初始分发的所需配置。尽管此项目在`test`阶段执行此操作，但它似乎没有价值。在这种情况下，似乎需要`maven-antrun-plugin`，它与`package`阶段相关联，但在定义`assembly`插件之前，需要ZIP文件分发。理想情况下，除非有非常充分的理由，否则不应在`test`阶段运行`assembly`插件。您可能需要准备好的分发来运行集成测试；然而，集成测试应在`package`阶段之后的`integration-test`阶段执行。在大多数情况下，`assembly`插件与Maven的`default`生命周期的`package`阶段相关联。
- en: 'The following code shows the assembly descriptor defined in `src/assembly/dist.xml`
    for the `test` phase:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了为`test`阶段在`src/assembly/dist.xml`中定义的assembly描述符：
- en: '[PRE15]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This configuration introduces a new element that we have not seen before, that
    is, `dependencySet`. The `dependencySet` element lets you include or exclude project
    dependencies to/from the final assembly that we are building. In the previous
    example, it adds the `rampart` module into the `outputDirectory` element. The
    value of the `include` element should be in the format of `groupdId:artifactId:type[:classifier][:version]`.
    Maven will first look for this artifact with the defined coordinates in its local
    Maven repository, and if found, it will copy it to the location defined under
    the `outputDirectory` element.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置引入了一个我们之前未曾见过的元素，即`dependencySet`。`dependencySet`元素允许您将项目依赖项包含或排除在构建的最终组装中。在先前的示例中，它将`rampart`模块添加到`outputDirectory`元素中。`include`元素的值应采用以下格式：`groupdId:artifactId:type[:classifier][:version]`。Maven将首先在其本地Maven仓库中查找具有定义坐标的此工件，如果找到，它将将其复制到`outputDirectory`元素下定义的位置。
- en: 'Unlike the `fileSet` and `file` elements, the `dependencySet` element does
    not define a concrete path to pick and copy the dependency from. Maven finds the
    artifacts via the defined coordinates. If you want to include a dependency just
    by its `groupId` element and the `artifactId` coordinates, then you can follow
    the pattern `groupdId:artifactId`. The particular artifact should be declared
    under the `dependencies` section of the POM file, which has the `assembly` plugin
    defined. You can find the following dependency definition for the `rampart` module
    in the POM file under the `distribution` module. If two versions of the same dependency
    are being defined in the same POM file (which is rather unlikely), then the last
    in the order will be copied:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与`fileSet`和`file`元素不同，`dependencySet`元素不定义一个具体的路径来选择和复制依赖项。Maven通过定义的坐标查找工件。如果您只想通过`groupId`元素和`artifactId`坐标包含依赖项，那么您可以遵循以下模式：`groupdId:artifactId`。特定的工件应在POM文件的`dependencies`部分声明，该部分定义了`assembly`插件。您可以在`distribution`模块下的POM文件中找到以下对`rampart`模块的依赖定义。如果在同一POM文件中定义了同一依赖项的两个版本（这相当不可能），则最后定义的版本将被复制：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can also include a dependency by its `groupId`, `artifactId`, and `type`,
    as shown in the following configuration. Then, you can follow the pattern `groupdId:artifactId:type[:classifier]`.
    This is the exact pattern followed in the previous example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过`groupId`、`artifactId`和`type`包含依赖项，如下面的配置所示。然后，您可以遵循以下模式：`groupdId:artifactId:type[:classifier]`。这正是先前的示例中遵循的模式：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you want to be more precise, you can also include the version into the pattern.
    In this case, it will look like this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更精确，也可以将版本包含在模式中。在这种情况下，它将看起来像这样：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Most of the time we talk about four Maven coordinates; however, to be precise,
    there are five. A Maven artifact can be uniquely identified by these five coordinates:
    `groupdId:artifactId:type[:classifier]:version`. We have already discussed the
    four main coordinates, but not the `classifier`. This is very rarely used; it
    can be quite useful in a scenario where we build an artifact out of the same POM
    file but with multiple target environments. We will be talking about `classifiers`
    in detail in [Chapter 7](ch07.html "Chapter 7. Best Practices"), *Best Practices*.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候我们谈论四个Maven坐标；然而，为了精确，实际上有五个。Maven构件可以通过这五个坐标唯一标识：`groupdId:artifactId:type[:classifier]:version`。我们已经讨论了四个主要坐标，但没有讨论`classifier`。这很少使用；在从同一个POM文件构建构件但具有多个目标环境的情况下，它可能非常有用。我们将在[第7章](ch07.html
    "第7章。最佳实践")*最佳实践*中详细讨论`classifiers`。
- en: The previous example only covered a very small subset of the `assembly` descriptor.
    You can find all available configuration options at [http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html](http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html),
    which is quite an exhaustive list.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例仅涵盖了`assembly`描述符的一个非常小的子集。您可以在[http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html](http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html)找到所有可用的配置选项，这是一个相当详尽的列表。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: It is a best practice or a convention to include all the assembly `descriptor`
    files inside a directory called `assembly`, though it is not mandatory.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个名为`assembly`的目录中包含所有`assembly`描述符文件是一种最佳实践或约定，尽管这不是强制的。
- en: 'Let''s take a look at another real-world example with **Apache Axis2**. Axis2
    is an open source project released under the Apache 2.0 license. Axis2 has three
    types of distributions: a binary distribution as a ZIP file, a WAR file distribution,
    and a source distribution as a ZIP file. The binary ZIP distribution of Axis2
    can be run on its own, while the WAR distribution must be deployed in a Java EE
    application server.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个带有**Apache Axis2**的真实世界示例。Axis2是一个在Apache 2.0许可下发布的开源项目。Axis2有三种类型的分发：作为ZIP文件的二进制分发，作为WAR文件的文件分发，以及作为ZIP文件的源代码分发。Axis2的二进制ZIP分发可以独立运行，而WAR分发必须部署在Java
    EE应用服务器上。
- en: All three Axis2 distributions are created from the POM file inside the `distribution`
    module, which can be found at [http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所有三个Axis2分发都是从`distribution`模块内的POM文件中创建的，该模块可以在[http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml](http://svn.apache.org/repos/asf/axis/axis2/java/core/trunk/modules/distribution/pom.xml)找到。
- en: 'This POM file associates the `single` goal of the Maven `assembly` plugin with
    the project, which initiates the process of creating the final distribution artifacts.
    The assembly configuration points to three different `assembly` descriptors—one
    for the ZIP distribution, the second for the WAR distribution, and the third for
    the source code distribution. The following code snippet shows the `assembly`
    plugin configuration:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此POM文件将Maven `assembly`插件的`single`目标与项目关联，从而启动创建最终分发构件的过程。`assembly`配置指向三个不同的`assembly`描述符——一个用于ZIP分发，第二个用于WAR分发，第三个用于源代码分发。以下代码片段显示了`assembly`插件的配置：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s take a look at the `bin-assembly.xml` file—the `assembly` descriptor,
    which builds the ZIP distribution:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`bin-assembly.xml`文件——构建ZIP分发的`assembly`描述符：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This is exactly what we discussed earlier, and exactly what we wanted to avoid
    due to the same reason as in the comment, in the preceding code snippet. If we
    want to build a `tar.gz` distribution, then we need to modify the file. Instead
    of doing that, we can move the `format` configuration element out of the `assembly`
    descriptor to the plugin configuration defined in the `pom.xml` file. Then, you
    can define multiple profiles and configure the archive type based on the profile:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我们之前讨论的，也是我们想要避免的，原因与前面代码注释中的相同。如果我们想构建`tar.gz`分发，那么我们需要修改文件。而不是这样做，我们可以将`format`配置元素从`assembly`描述符移动到在`pom.xml`文件中定义的插件配置中。然后，您可以定义多个配置文件，并根据配置文件配置存档类型：
- en: '[PRE21]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `useProjectArtifact` configuration element instructs the plugin whether
    to include the artifact produced in this project build into the `dependencySet`
    element. By setting the value to `false`, we avoid it:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`useProjectArtifact`配置元素指示插件是否将在此项目构建中产生的构件包含到`dependencySet`元素中。通过将值设置为`false`，我们可以避免它：'
- en: '[PRE22]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `includes` and `excludes` configuration elements will ensure that all the
    artifacts defined under the `dependencies` section of the `distribution/pom.xml`
    file will be included in the assembly, except the artifacts defined under the
    `excludes` configuration element. If you do not have any `include` elements, all
    the dependencies defined in the POM file will be included in the assembly, except
    what is defined under the `excludes` section.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`includes`和`excludes`配置元素将确保`distribution/pom.xml`文件的`dependencies`部分下定义的所有艺术品都将包含在构建中，除了在`excludes`配置元素下定义的艺术品。如果你没有定义任何`include`元素，POM文件中定义的所有依赖项都将包含在构建中，除了在`excludes`部分定义的内容。'
- en: 'Once the `unpack` configuration element is set to `true`, all the dependencies
    defined under the `include` elements will be unpacked into `outputDirectory`.
    The plugin is capable of unpacking `jar`, `zip`, `tar.gz`, and `tar.bz` archives.
    The `unpackOptions` configuration element, shown in the following configuration,
    can be used to filter out the content of the dependencies getting unpacked. According
    to the following configuration, only the files defined under the `include` elements
    under the `unpackOptions` element will be included; the rest will be ignored and
    won''t be included in the assembly. In this particular case, `axis2-webapp` is
    a WAR file (which is defined under the `include` element of the previous configuration)
    and the `distributions/pom.xml` file has a dependency to it. This web app will
    be exploded (extracted), and then all the files inside the `WEB-INF/classes` and
    `axis2-web` directories will be copied into the `webapp` directory of the ZIP
    distribution, along with the `WEB-INF/web.xml` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将`unpack`配置元素设置为`true`，在`include`元素下定义的所有依赖项都将解压缩到`outputDirectory`。该插件能够解压缩`jar`、`zip`、`tar.gz`和`tar.bz`存档。以下配置中显示的`unpackOptions`配置元素可以用来过滤解压缩依赖项的内容。根据以下配置，只有`unpackOptions`元素下的`include`元素中定义的文件将被包含；其余的将被忽略，不会包含在构建中。在这个特定情况下，`axis2-webapp`是一个WAR文件（在先前配置的`include`元素下定义），而`distributions/pom.xml`文件有对其的依赖。这个Web应用将被展开（提取），然后`WEB-INF/classes`和`axis2-web`目录中的所有文件将被复制到ZIP分发的`webapp`目录中，包括`WEB-INF/web.xml`文件：
- en: '[PRE23]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, let''s take a look at `war-assembly.xml`—the assembly descriptor, which
    builds the WAR distribution. There is nothing new in this configuration, except
    the `outputFileNameMapping` configuration element. Since the value of the `format`
    element is set to `zip`, this `assembly` descriptor will produce an archive file
    conforming to the ZIP file specification. The value of the `outputFileNameMapping`
    configuration element gets applied to all the dependencies. The default value
    is parameterized: `${artifactId}-${version}${classifier?}.${extension}`. In this
    case, it''s hardcoded to `axis2.war`, so the `axis2-webapp` artifact will be copied
    to the location defined under the `outputDirectory` element as `axis2.war`. Since
    there is no value defined for the `outputDirectory` element, the files will be
    copied to the root location, as shown here:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看一下`war-assembly.xml`——构建WAR分发的构建描述符。在这个配置中没有新内容，除了`outputFileNameMapping`配置元素。由于`format`元素的值设置为`zip`，这个`assembly`描述符将生成符合ZIP文件规范的存档文件。`outputFileNameMapping`配置元素的值应用于所有依赖项。默认值是参数化的：`${artifactId}-${version}${classifier?}.${extension}`。在这种情况下，它是硬编码为`axis2.war`，所以`axis2-webapp`艺术品将被复制到`outputDirectory`元素下定义的位置作为`axis2.war`。由于没有为`outputDirectory`元素定义值，文件将被复制到根位置，如下所示：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Artifact/resource filtering
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 艺术品/资源过滤
- en: We had a `filters` configuration, defined for the `assembly` plugin in the first
    example with the WSO2 Identity Server. This instructs the `assembly` plugin to
    apply the filter criteria defined in the provided filter or the set of filters
    for the files that are being copied to the final archive file. If you want to
    apply a filter to a given file, then you should set the value of the `filtered`
    element to `true`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第一个示例中为WSO2身份服务器中的`assembly`插件定义了一个`filters`配置。这指示`assembly`插件应用提供的过滤器或过滤器集中定义的文件过滤标准。如果你想要对一个特定的文件应用过滤器，那么你应该将`filtered`元素的值设置为`true`。
- en: 'The following configuration shows how to define a filter:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置展示了如何定义一个过滤器：
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Let''s take a look at the file `${basedir}/src/assembly/filter.properties`.
    This file defines a set of name/value pairs. The name is a special placeholder,
    which should be enclosed between `${` and `}` in the file to be filtered, and
    it will be replaced by the value during the filtering process:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看文件`${basedir}/src/assembly/filter.properties`。此文件定义了一组名称/值对。名称是一个特殊的占位符，应在要过滤的文件中用`${`和`}`括起来，并在过滤过程中被值替换：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Assembly help
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组装帮助
- en: 'As we discussed earlier, the `assembly` plugin currently only has two active
    goals: `single` and `help`; all the others are deprecated. As we witnessed in
    the previous example, the `single` goal is responsible for creating the archive
    with all sorts of other configurations.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，`assembly`插件目前只有两个活跃的目标：`single`和`help`；所有其他的目标都已弃用。正如我们在前面的示例中看到的，`single`目标负责创建带有各种其他配置的存档。
- en: 'The following command shows how to execute the `help` goal of the `assembly`
    plugin. This has to be executed from a directory with a POM file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何执行`assembly`插件的`help`目标。这必须在包含POM文件的目录中执行：
- en: '[PRE27]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If you see the following error when you run this command, you may not have
    the latest version. In that case, update the plugin version to 2.4.1 or later:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行此命令时，如果你看到以下错误，可能不是最新版本。在这种情况下，将插件版本更新到2.4.1或更高版本：
- en: '[PRE28]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: A runnable standalone Maven project
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个可运行的独立Maven项目
- en: 'Since we have covered a lot of ground-related information of the Maven `assembly`
    plugin, let''s see how to build a complete end-to-end runnable standalone project
    with the `assembly` plugin. You can find the complete sample at [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06).
    Proceed with the following steps to create a runnable standalone Maven project:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经涵盖了Maven `assembly`插件的许多相关信息，让我们看看如何使用`assembly`插件构建一个完整的端到端可运行的独立项目。你可以找到完整的示例在[https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter06)。按照以下步骤创建一个可运行的独立Maven项目：
- en: 'First, create a directory structure, as shown here:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，创建一个目录结构，如下所示：
- en: '[PRE29]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `JSONParser.java` file is a simple Java class, which reads a JSON file
    and prints to the console, as shown here:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`JSONParser.java`文件是一个简单的Java类，它读取一个JSON文件并将其打印到控制台，如下所示：'
- en: '[PRE30]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, we can create a POM file under `modules/json-parser` to build our JAR
    file, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在`modules/json-parser`下创建一个POM文件来构建我们的JAR文件，如下所示：
- en: '[PRE31]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once we are done with the `json-parser` module, the next step is to create
    the `distribution` module. The `distribution` module will have a POM file and
    an `assembly` descriptor. Let''s first create the POM file under `modules/distribution`,
    which is shown here. This will associate two plugins with the project: `maven-assembly-plugin`
    and `maven-jar-plugin`. Both the plugins get executed in the `package` phase of
    the Maven `default` lifecycle. Since the `maven-assembly-plugin` is defined prior
    to the `maven-jar-plugin`, it will get executed first:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们完成了`json-parser`模块，下一步就是创建`distribution`模块。`distribution`模块将有一个POM文件和一个`assembly`描述符。让我们首先在`modules/distribution`下创建POM文件，如下所示。这将与项目关联两个插件：`maven-assembly-plugin`和`maven-jar-plugin`。这两个插件都在Maven
    `default`生命周期的`package`阶段执行。由于`maven-assembly-plugin`在`maven-jar-plugin`之前定义，因此它将首先执行：
- en: '[PRE32]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The following configuration shows the `assembly` descriptor (`module/distribution/src/main/assembly/dist.xml`),
    corresponding to the `assembly` plugin defined in the previous step:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下配置显示了`assembly`描述符（`module/distribution/src/main/assembly/dist.xml`），对应于上一步中定义的`assembly`插件：
- en: '[PRE33]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Now, we are done with the `distribution` module too. Next, we will create the
    root POM file, which aggregates both the `json-parser` and `distribution` modules,
    as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们也完成了`distribution`模块。接下来，我们将创建根POM文件，它聚合了`json-parser`和`distribution`模块，如下所示：
- en: '[PRE34]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'We are all set to build the project. From the root directory, type `mvn clean
    install`. This will produce the `json-parser-bin.zip` archive inside the `modules/distribution/target`
    directory. The output will be as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经准备好构建项目了。从根目录，输入`mvn clean install`。这将产生位于`modules/distribution/target`目录中的`json-parser-bin.zip`存档。输出如下：
- en: '[PRE35]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Go to `modules/distribution/target` and unzip `json-parser-bin.zip`.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往`modules/distribution/target`并解压`json-parser-bin.zip`。
- en: 'To run the parser, type the following command, which will produce `No valid
    JSON file provided` as the output:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行解析器，请输入以下命令，它将输出`No valid JSON file provided`：
- en: '[PRE36]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Once again, run the parser with a valid JSON file. You need to pass the path
    to the JSON file as an argument:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行解析器，并使用有效的 JSON 文件。您需要将 JSON 文件的路径作为参数传递：
- en: '[PRE37]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following is the output produced by the preceding command:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的输出是由前面的命令产生的：
- en: '[PRE38]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Summary
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on the Maven `assembly` plugin. The `assembly` plugin
    provides a way of building custom archive files, aggregating many other custom
    configurations and resources. Most of the Java based products use the `assembly`
    plugin to build the final distribution artifacts. These can be a binary distribution,
    a source code distribution, or even a documentation distribution. This chapter
    covered real-world examples on how to use the Maven `assembly` plugin in detail,
    and finally, concluded with an end-to-end sample Maven project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于 Maven 的 `assembly` 插件。`assembly` 插件提供了一种构建自定义归档文件的方法，聚合了许多其他自定义配置和资源。大多数基于
    Java 的产品都使用 `assembly` 插件来构建最终的分发工件。这些可以是二进制分发、源代码分发，甚至是文档分发。本章详细介绍了如何使用 Maven
    的 `assembly` 插件的实际案例，并最终以一个端到端的示例 Maven 项目结束。
- en: In the next chapter, we will discuss best practices in Maven.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Maven 的最佳实践。
