["```java\nenum Size {SMALL, MEDIUM, LARGE}\n```", "```java\nclass Shirt { \n    Size size;              // instance variable of type Size \n    Color color; \n\n    Shirt(Size size, Color color) {      // Size object with Shirt                                                                     \n                                         // instantiation \n        this.size = size; \n        this.color = color; \n    } \n} \n```", "```java\nclass GarmentFactory { \n    void createShirts() { \n        Shirt redShirtS = new Shirt(Size.SMALL, Color.red); \n        Shirt greenShirtM = new Shirt(Size.MEDIUM, Color.green); \n        Shirt redShirtL = new Shirt(Size.LARGE, Color.red); \n    } \n} \n```", "```java\nfinal class Size extends Enum                 // 'enum' converted to final class  \n{ \n    public static final Size SMALL;           // variables to store  \n    public static final Size MEDIUM;          // enum constants \n    public static final Size LARGE;           //  \n\n    private static final Size $VALUES[];    // array of all enum \n                                            // constants \n\n    static \n    {                                       // static initializer \n        SMALL = new Size(\"SMALL\", 0);       // to initialize enum                                                                                             \n                                            // constants \n        MEDIUM = new Size(\"MEDIUM\", 1);     // \n        LARGE = new Size(\"LARGE\", 2);       // \n        $VALUES = (new Size[] {             // \n            SMALL, MEDIUM, LARGE            // & populate array of enum                                             \n                                            // constants \n        }); \n    } \n    public static Size[] values() \n    { \n                return (Size[])$VALUES.clone();       // Avoiding any                                                                                                          \n                                                    // modification to  \n    }                                // $VALUES by calling methods \n    public static Size valueOf(String s) \n    { \n        return (Size)Enum.valueOf(Size, s); \n    } \n    private Size(String s, int i) \n    { \n        super(s, i); \n    } \n} \n```", "```java\nenum Size { \n    SMALL(36, 19), \n    MEDIUM(32, 20) {               // Constant specific class body  \n        int number = 10;                    // variable specific to \n                                            //MEDIUM \n        int getSize() {                     // method specific to \n                                            //MEDIUM \n            return length + width; \n        } \n    }, \n    LARGE(34, 22) { \n        @Override  \n        public String toText() {            // overriding method toText \n                                            //for  \n            return \"LARGE\";                 // constant LARGE \n        } \n    }; \n\n    int length;                             // instance variable \n                                            //accessible \n    int width;                              // to all enum constants \n\n    Size(int length, int width) {           // enum constructor; \n                                            //accepts length \n        this.length = length;               // and width \n        this.width = width; \n    } \n\n    int getLength() {                       // method accessible to all \n                                            //enum \n        return length;                      // constants \n    } \n\n    int getWidth() {                        // method accessible to all \n                                            //enum \n        return width;                       // constants \n    }  \n\n    public String toText() {               // method accessible to all \n                                           //enum \n        return length + \" X \" + width;     // constants \n    } \n} \n```", "```java\nSystem.out.println(Size.SMALL.toText());  // toString is defined for all constants \n```", "```java\n36 X 19 \n```", "```java\nSystem.out.println(Size.LARGE.toText()); \n```", "```java\nLARGE\n```", "```java\nSystem.out.println(Size.MEDIUM.number);          // Doesn't compile \nSystem.out.println(Size.MEDIUM.getSize());       // Doesn't compile \n```", "```java\nenum Size {\n    SMALL(36, 19),\n    MEDIUM(32, 20),\n    LARGE(34, 22);\n    int length;                            // instance variable \n                                           //accessible\n    int width;                             // to all enum constants\n    Size(int length, int width) {          // enum constructor; accepts \n                                            //length\n         this.length = length;             // and width\n         this.width = width;\n    }\n    int getSize() {\n       if (this == MEDIUM)\n         return length + width;\n       else                                           // throws runtime \n                                                      // exception\n         throw new UnsupportedOperationException();   // if used with \n                                                      // constants\n    }                                                 // other than \n                                                      //MEDIUM\n}\n```", "```java\nSystem.out.println(MEDIUM.getSize());\nSystem.out.println(LARGE.getSize());\n```", "```java\n52\nException in threadâ€”java.lang.UnsupportedOperationException\n```", "```java\nclass Measurement {}                      // base class \nclass Small extends Measurement {         // derived class \n    String text = \"Small\";                // state specific to class \n                                          //Small \n} \nclass Medium extends Measurement {        // derived class \n    public int getLength() {              // behavior specific to class \n                                          //Medium \n        return 9999; \n    } \n} \nclass Large extends Measurement {}        // derived class \n\nenum Size {                                \n    SMALL(new Small()),                // constant created using Small \n                                       //instance \n    MEDIUM(new Medium()),              // constant created using Medium \n                                       //instance \n    LARGE(new Large());                // constant created using Large \n                                       //instance \n\n    private Measurement mObj;     // Measurement is base class of  \n                                  // classes Small, Medium & Large \n\n    Size(Measurement obj) {     // wraps Measurement instance as an \n                                //Enum instance \n        mObj = obj; \n    } \n    Measurement getMeasurement() { // get the wrapped instance \n        return mObj; \n    } \n}\n```", "```java\nclass Test1 { \n    public static void main(String args[]) { \n        var large = Size.LARGE; \n        System.out.println(large.getMeasurement()\n                             .getLength());      // doesn't compile \n                                                 // the type of the                                                     \n                                                 // variable used \n                                                 // to wrap the value                                                  \n                                                 // of enum  \n                                                 // constant is                                                          \n                                                 // Measurement  \n    } \n} \n```", "```java\nenum Size <T extends Measurement> {      // enum with type parameter \n    SMALL(new Small()), \n    MEDIUM(new Medium()), \n    LARGE(new Large()); \n\n    private T mObj; \n\n    Size(T obj) { \n        mObj = obj; \n    } \n    T getMeasurement() { \n        return mObj; \n    } \n} \n\nclass Measurement {} \nclass Small extends Measurement { \n    String text = \"Small\"; \n} \nclass Medium extends Measurement {} \nclass Large extends Measurement { \n    public int getLength() { \n        return 40; \n    } \n}\n```", "```java\nvar large = Size.LARGE; \nSystem.out.println(large.getMeasurement().getLength());  \n```", "```java\npublic enum Data<T> { \n    NAME<String>,                // constants of generic  \n    AGE<Integer>,                // enum Data \n    ADDRESS<Address>; \n} \n```", "```java\npublic class FormData { \n    public <T> void add(Data<T> type, T value) { \n        //..code \n    } \n}\n```", "```java\nFormData data = new FormData(); \ndata.add(Data.NAME, \"Pavni\");            // okay; type of NAME and \n                                         // Pavni is String \ndata.add(Data.AGE, 22);                  // okay; type of AGE and 22 is \n                                         // Integer \ndata.add(Data.ADDRESS, \"California\");    // Won't compile. \"California\"  \n                                         // is String, not Address \n                                         // instance \n```"]