["```java\npublic static void main(String[] args) {\n    System.out.println(\"Adapter Pattern: engines\");\n    var electricEngine = new ElectricEngine();\n    var enginePetrol = new PetrolEngine();\n    var vehicleElectric = new Vehicle(electricEngine);\n    var vehiclePetrol = new Vehicle(enginePetrol);\n    vehicleElectric.drive();\n    vehicleElectric.refuel();\n    vehiclePetrol.drive();\n    vehiclePetrol.refuel();\n}\n```", "```java\nAdapter Pattern: engines\n...\nVehicle, stop\nVehicle needs recharge\nElectricEngine, check plug\nElectricEngine, recharging\n...\nVehicle needs petrol\nPetrolEngine, tank\n```", "```java\nclass Vehicle {\n    private final Engine engine;\n  ...\n    void refuel(){\n        System.out.println(\"Vehicle, stop\");\n        switch (engine){\n            case ElectricEngine de -> {\n                System.out.println(\"Vehicle needs diesel\");\n                de.checkPlug();\n                de.tank();\n            }\n            case PetrolEngine pe -> {\n                System.out.println(\"Vehicle needs petrol\");\n                pe.tank();\n            }\n            default -> throw new IllegalStateException\n               (\"Vehicle has no engine\");\n        }\n        engine.tank();\n    }\n}\n```", "```java\nsealed interface Engine permits ElectricEngine,\n    PetrolEngine  {\n    void run();\n    void tank();\n}\n```", "```java\nfinal class ElectricEngine implements Engine{\n    @Override\n    public void run() {\n        System.out.println(\"ElectricEngine, run\");\n    }\n    @Override\n    public void tank() {\n        System.out.println(\"ElectricEngine, recharging\");\n    }\n    public void checkPlug(){\n        System.out.println(\"ElectricEngine, check plug\");\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Bridge, vehicle\n        engines...\");\n    Vehicle sportVehicle = new SportVehicle(new\n        PetrolEngine(), 911);\n    Vehicle pickupVehicle = new PickupVehicle(new\n        DieselEngine(), 300);\n    sportVehicle.drive();\n    sportVehicle.stop();\n    pickupVehicle.drive();\n    pickupVehicle.stop();\n}\n```", "```java\nPattern Bridge, vehicle engines...\nSportVehicle, starting engine\nPetrolEngine, on\nSportVehicle, engine started, hp:911\nSportVehicle, stopping engine\nPetrolEngine, self check\nPetrolEngine, off\nSportVehicle, engine stopped\nPickupVehicle, starting engine\nDieselEngine, on\nPickupVehicle, engine started, hp:300\nPickupVehicle, stopping engine\nDieselEngine, off\nPickupVehicle, engine stopped\n```", "```java\nclass DieselEngine implements Engine{\n        ...\n    @Override\n    public void turnOff() {...}\n}\nclass PetrolEngine implements Engine{\n        ...\n    @Override\n    public void turnOff() {\n       selfCheck();\n       ...\n    }\n    private void selfCheck(){ ...}\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Composite, vehicle\n        parts...\");\n    var fastVehicle = new SportVehicle(\"sport\");\n    var engine = new VehiclePart(\"fast-engine\");\n    engine.addPart(new VehiclePart(\"cylinder-head\"));\n    var brakes = new VehiclePart(\"super-brakes\");\n    var transmission = new VehiclePart(\"automatic-\n        transmission\");\n    fastVehicle.addPart(engine);\n    fastVehicle.addPart(brakes);\n    fastVehicle.addPart(transmission);\n    fastVehicle.printParts();\n}\n```", "```java\nPattern Composite, vehicle parts...\nSportCar, type'sport', parts:'\n[{type='fast-engine', parts=[{type='cylinder-head',\n  parts=[]}]},\n{type='super-brakes', parts=[]},\n{type='automatic-transmission', parts=[]}]'\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Decorator, vehicle 1\");\n    Vehicle standardVehicle = new StandardVehicle();\n    Vehicle vehicleToBeTuned = new StandardVehicle();\n    Vehicle tunedVehicle = new SportVehicle\n        (vehicleToBeTuned, 200);\n    System.out.println(\"Drive a standard vehicle\");\n    standardVehicle.move();\n    System.out.println(\"Drive a tuned vehicle\");\n    tunedVehicle.move();\n}\n```", "```java\nPattern Decorator, tuned vehicle\nDrive a standard vehicle\nVehicle, move\nDrive a tuned vehicle\nSportVehicle, activate horse power:200\nTunedVehicleDecorator, turbo on\nVehicle, move\n```", "```java\nsealed abstract class TunedVehicleDecorator implements\n    Vehicle permits SportVehicle {\n    private final Vehicle vehicle;\n    TunedVehicleDecorator(Vehicle vehicle) {\n        this.vehicle = vehicle;\n    }\n    @Override\n    public void move() {\n        System.out.println(\"TunedVehicleDecorator,\n           turbo on\");\n        vehicle.move();\n    }\n}\nfinal class SportVehicle extends TunedVehicleDecorator {\n    private final int horsePower;\n    public SportVehicle(Vehicle vehicle, int horsePower) {\n        super(vehicle);\n        this.horsePower = horsePower;\n    }\n    @Override\n    public void move() {\n        System.out.println(\"SportVehicle, activate horse\n            power:\" + horsePower);\n        super.move();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Facade, vehicle types\");\n    List<Vehicle> vehicles = Arrays.asList(new\n        DieselVehicle(), new PetrolVehicle());\n    for (var vehicle: vehicles){\n        vehicle.start();\n        vehicle.refuel();\n    }\n}\n```", "```java\nPattern Facade, vehicle types\nDieselVehicle, engine warm up\nDieselVehicle, engine start\nDieselVehicle, refuel diesel\nPetrolVehicle, engine start\nPetrolVehicle, refuel petrol\n```", "```java\nprivate static final List<Sensor> vehicleSensors = new\n    ArrayList<>();\nstatic {\n    vehicleSensors.add(new Sensor(\"fuel\", true));\n    vehicleSensors.add(new Sensor(\"fuel\", false));\n    vehicleSensors.add(new Sensor(\"speed\", false));\n    vehicleSensors.add(new Sensor(\"speed\", true));\n}\npublic static void main(String[] args) {\n    ...\n    Rule analog = new RuleAnalog();\n    Rule speedSensor = new RuleType(\"speed\");\n    ...\n    var analogAndSpeedSensors = new RuleAnd(analog,\n        speedSensor);\n    var analogOrSpeedSensors = new RuleOr(analog,\n        speedSensor);\n    System.out.println(\"analogAndSpeedSensors=\" +\n        analogAndSpeedSensors.validateSensors\n            (vehicleSensors));\n    System.out.println(\"analogOrSpeedSensors=\" +\n          analogOrSpeedSensors.validateSensors\n              (vehicleSensors));\n}\n```", "```java\nPattern Filter, vehicle sensors\nAnalogSensors: [Sensor[type=fuel, analog=true],\n    Sensor[type=speed, analog=true]]\nSpeedSensors: [Sensor[type=speed, analog=false],\n    Sensor[type=speed, analog=true]]\nanalogAndSpeedSensors=[Sensor[type=speed, analog=true]]\nanalogOrSpeedSensors=[Sensor[type=fuel, analog=true],\n    Sensor[type=speed, analog=true], Sensor[type=speed,\n        analog=false]]\n```", "```java\n@FunctionalInterface\ninterface Rule {\n    Collection<Sensor> validateSensors(Collection<Sensor>\n        sensors);\n}\nclass RuleAnalog implements Rule {\n    @Override\n    public Collection<Sensor> validateSensors\n        (Collection<Sensor> sensors) {\n        return sensors.stream()\n                .filter(Sensor::analog)\n                .collect(Collectors.toList());\n    }\n}\nrecord RuleAnd(Rule rule, Rule additionalRule) implements\n    Rule {\n    @Override\n    public Collection<Sensor> validateSensors\n        (Collection<Sensor> sensors) {\n        Collection<Sensor> initRule = rule.validateSensors\n            (sensors);\n        return additionalRule.validateSensors(initRule);\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Flyweight, sharing\n        templates\");\n    Vehicle car1 = VehicleGarage.borrow(\"sport\");\n    car1.move();\n    Vehicle car2 = VehicleGarage.borrow(\"sport\");\n    System.out.println(\"Similar template:\" +\n        (car1.equals(car2)));\n}\n```", "```java\nPattern Flyweight, sharing vehicles\nVehicleGarage, borrowed type:sport\nVehicle, type:'sport-car', confirmed\nVehicleGarage, borrowed type:sport\nSimilar template: true\n```", "```java\nclass VehicleGarage {\n    private static final Map<String, Vehicle> vehicleByType\n        = new HashMap<>();\n    static {\n        vehicleByType.put(\"common\", new VehicleType\n            (\"common-car\"));\n        vehicleByType.put(\"sport\", new VehicleType(\"sport-\n            car\"));\n    }\n    private VehicleGarage() {\n    }\n    static Vehicle borrow(String type){\n        Vehicle v = vehicleByType.get(type);\n        if(v == null){\n            v =  new VehicleType(type);\n            vehicleByType.put(type, v);\n        }\n        System.out.println(\"VehicleGarage, borrowed type:\"\n            + type);\n        return v;\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern FrontController, vehicle\n        system\");\n    var vehicleController = new VehicleController();\n    vehicleController.processRequest(\"engine\");\n    vehicleController.authorize();\n    vehicleController.processRequest(\"engine\");\n    vehicleController.processRequest(\"brakes\");\n}\n```", "```java\nPattern FrontController, vehicle system\nVehicleController, log:'engine'\nVehicleController, is authorized\nVehicleController, not authorized request:'engine'\nVehicleController, authorization\nVehicleController, log:'engine'\nVehicleController, is authorized\nEngineUnit, start\nVehicleController, log:'brakes'\nVehicleController, is authorized\nBrakesUnit, activated\n```", "```java\nrecord RequestDispatcher(BrakesUnit brakesUnit, EngineUnit\n    engineUnit) {\n    void dispatch(String command) {\n        switch (command.toLowerCase()) {\n            case \"engine\" -> engineUnit.start();\n            case \"brakes\" -> brakesUnit.activate();\n            default -> throw new IllegalArgumentException\n                (\"not implemented:\" + command);\n        }\n    }\n}\nclass VehicleController {\n    private final RequestDispatcher dispatcher;\n    ...\n    void processRequest(String request) {\n        logRequest(request);\n        if (isAuthorized()) {\n            dispatcher.dispatch(request);\n        } else {\n            System.out.printf(\"\"\"\n                VehicleController, not authorized request:\n                    '%s'%n\"\"\", request);\n        }\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Marker, sensor\n        identification\");\n    var sensors = Arrays\n            .asList(new BrakesSensor(), new EngineSensor()\n                    , new ConsumptionSensor());\n    sensors.forEach(sensor -> {\n        if(sensor.getClass().isAnnotationPresent\n            (CertifiedAnnotation.class)){\n            System.out.println(\"Sensor with Marker\n                annotation:\" + sensor);\n        } else {\n            switch (sensor){\n                case CertifiedSensor cs -> System.out.\n                    println(\"Sensor with Marker interface:\n                        \" + cs);\n                case Sensor s -> System.out.println\n                    (\"Sensor without identification:\"+ s);\n            }\n        }\n    });\n}\n```", "```java\nPattern Marker, sensor identification\nSensor without identification:BrakesSensor[]\nSensor with Marker interface:chapter04.marker\n  .EngineSensor@776ec8df\nSensor with Marker annotation:chapter04.marker\n  .ConsumptionSensor@30dae81\n```", "```java\n@Retention(RetentionPolicy.RUNTIME)\n@interface CertifiedAnnotation {}\npublic interface CertifiedSensor extends Sensor {}\npublic interface Sensor {\n    void activate();\n}\n```", "```java\n@CertifiedAnnotation\nclass ConsumptionSensor implements Sensor {\n    @Override\n    public void activate() {...}\n}\nfinal class EngineSensor implements CertifiedSensor {\n    @Override\n    public void activate() {...}\n}\n```", "```java\nclass ModuleMain {\n    ...\n    private static void initModules() {\n        brakesModule = BrakesModule.getInstance();\n        engineModule = EngineModule.getInstance();\n        engineModule.init();\n    }\n    ...\n    public static void main(String[] args) {\n        initModules();\n        printStatus();\n    }\n}\n```", "```java\nBrakesModule, unit:BrakesModule@5ca881b5\nEngineModule, unit:EngineModule@4517d9a3\nEngineModule, init\nBrakesModule, ready:false\nEngineModule, ready:true\n```", "```java\nclass EngineModule implements VehicleModule {\n    private static volatile EngineModule INSTANCE;\n    static EngineModule getInstance() {\n       ...\n        return INSTANCE;\n    }\n    private boolean ready;\n     ...\n    @Override\n    public void init() {...}\n    @Override\n    public void status() {...}\n}\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Pattern Proxy, remote vehicle\n        controller\");\n    Vehicle vehicle = new VehicleProxy();\n    vehicle.move();\n    vehicle.move();\n}\n```", "```java\nPattern Proxy, remote vehicle controller\nVehicleProxy, real vehicle connected\nVehicleReal, move\nVehicleReal, move\n```", "```java\nclass VehicleProxy implements Vehicle{\n    private Vehicle vehicleReal;\n    @Override\n    public void move() {\n        if(vehicleReal == null){\n            System.out.println(\"VehicleProxy, real vehicle\n                connected\");\n            vehicleReal = new VehicleReal();\n        }\n        vehicleReal.move();\n    }\n}\n```", "```java\npublic static void main(String[] args) {\n        System.out.println(\"Pattern Twin, vehicle\n            initiation sequence\");\n        var vehicleBrakes1  = new VehicleBrakes();\n        var vehicleEngine1 = new VehicleEngine();\n        vehicleBrakes1.setEngine(vehicleEngine1);\n        vehicleEngine1.setBrakes(vehicleBrakes1);\n        vehicleEngine1.init();\n    }\n```", "```java\nPattern Twin, vehicle initiation sequence\nAbstractVehiclePart, constructor\nAbstractVehiclePart, constructor\nVehicleBrakes, initiated\nVehicleEngine, initiated\n```", "```java\npublic class VehicleBrakes extends AbstractVehiclePart {\n    private VehicleEngine twin;\n    VehicleBrakes() {\n    }\n    void setEngine(VehicleEngine engine) {\n        this.twin = engine;\n    }\n    @Override\n    void init() {\n        if (twin.isReady()) {\n            setReady();\n        } else {\n            setReady();\n            twin.init();\n        }\n        System.out.println(\"VehicleBrakes, initiated\");\n    }\n}\n```"]