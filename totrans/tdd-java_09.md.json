["```java\npackage com.sales.domain;\nimport java.time.LocalDate;\npublic interface Commands {\n    SalesReport calculateForPeriod(LocalDate start,\n                                   LocalDate end);\n}\n```", "```java\npackage com.sales.domain;\nimport java.time.LocalDate;\npublic class RequestSalesReport {\n    private final LocalDate start;\n    private final LocalDate end;\n    public RequestSalesReport(LocalDate start,\n                              LocalDate end){\n        this.start = start;\n        this.end = end;\n    }\n    public SalesReport produce(SalesReporting reporting) {\n        return reporting.reportForPeriod(start, end);\n    }\n}\n```", "```java\npackage com.sales.domain;\npublic interface SalesRepository {\n    List<Sale> allWithinDateRange(LocalDate start,\n                                  LocalDate end);\n}\n```", "```java\npackage com.sales.domain;\npublic interface MappingService {\n    void addReview(GeographicLocation location,\n                   Review review);\n}\n```", "```java\npackage com.wordz.domain;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport static org.assertj.core.api.Assertions.*;\nimport static org.mockito.Mockito.when;\n```", "```java\n@ExtendWith(MockitoExtension.class)\npublic class WordSelectionTest {\n```", "```java\n    private static final int HIGHEST_WORD_NUMBER = 3;\n    private static final int WORD_NUMBER_SHINE = 2;\n```", "```java\n    @Mock\n    private WordRepository repository;\n    @Mock\n    private RandomNumbers random;\n```", "```java\n    @Test\n    void selectsWordAtRandom() {\n        when(repository.highestWordNumber())\n            .thenReturn(HIGHEST_WORD_NUMBER);\n        when(repository.fetchWordByNumber(WORD_NUMBER_SHINE))\n            .thenReturn(\"SHINE\");\n        when(random.next(HIGHEST_WORD_NUMBER))\n            .thenReturn(WORD_NUMBER_SHINE);\n        var selector = new WordSelection(repository,\n                                         random);\n        String actual = selector.chooseRandomWord();\n        assertThat(actual).isEqualTo(\"SHINE\");\n    }\n}\n```", "```java\n    @BeforeEach\n    ```", "```java\n    void beforeEachTest() {\n    ```", "```java\n        when(repository.highestWordNumber())\n    ```", "```java\n                      .thenReturn(HIGHEST_WORD_NUMBER);\n    ```", "```java\n        when(repository.fetchWordByNumber(WORD_NUMBER_SHINE))\n    ```", "```java\n                      .thenReturn(\"SHINE\");\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    public interface WordRepository {\n    ```", "```java\n        String fetchWordByNumber(int number);\n    ```", "```java\n        int highestWordNumber();\n    ```", "```java\n    }\n    ```", "```java\npackage com.wordz.domain;\npublic interface RandomNumbers {\n    int next(int upperBoundInclusive);\n}\n```", "```java\npackage com.wordz.domain;\npublic class WordSelection {\n    private final WordRepository repository;\n    private final RandomNumbers random;\n    public WordSelection(WordRepository repository,\n                         RandomNumbers random) {\n        this.repository = repository;\n        this.random = random;\n    }\n    public String chooseRandomWord() {\n        int wordNumber =\n           random.next(repository.highestWordNumber());\n        return repository.fetchWordByNumber(wordNumber);\n    }\n}\n```"]