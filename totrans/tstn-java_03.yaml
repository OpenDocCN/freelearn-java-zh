- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Maven Build Tool
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java programs are seldom just a single file. They can consist of just a few
    files or thousands of files. We have seen that you must compile Java source code
    files into bytecode. Having to do this for so many files makes the work quite
    tedious. This is where a build tool is invaluable.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, the programs were all run from the folder we stored
    them in. As programs grow into multiple files, you manage them by categorizing
    them. The basic categories that date back to the early days of programming are
    input, process, and output. You can break down these categories into specific
    tasks that your program must perform. In Java, we call a category a **package**.
    A package, in turn, is a folder into which you store all the Java files that are
    part of the category. A complex program may consist of hundreds of files organized
    into packages.
  prefs: []
  type: TYPE_NORMAL
- en: In this environment, you must compile every single file. As you can imagine,
    this can be very tedious if you must compile them one at a time. One of the purposes
    of a build system is to simplify this task, and at the very minimum, all you must
    enter at the command line is `mvn`, the Maven executable program. In this chapter,
    we will see how we can use **Maven**. As Maven is a feature of every IDE, you
    can load any program organized as a Maven-managed project into any IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: While Maven is the most widely used build system, it is not the only one. Another
    popular build system is called **Gradle**. What sets it apart from Maven is that
    it uses an imperative rather than a declarative configuration file. Gradle uses
    a **Domain-Specific Language** (**DSL**) based on the **Groovy** language. As
    such, it could be used for general programming, although its vocabulary and syntax
    are designed for building software projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overview of Maven functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pom.xml` configuration file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will gain a sufficient understanding of the
    Maven build process to be able to use it right away. Later in the book, we will
    see how we can use Maven to manage testing. See the *Further reading* section
    for links to articles and free books that cover Maven in far more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the tools required to run the examples in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 17 installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven 3.8.6 or a newer version installed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I suggest downloading the source code that goes with this book from [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03)
    before you proceed so that you try out what is shown in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Ubuntu and other Linux distributions may have a version of Maven already installed.
    If it is not version 3.8.6 or greater, you must replace it with the newest version.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visit the Maven download page at [https://maven.apache.org/download.html](https://maven.apache.org/download.html).
    Here, you will find the program in two different compressed formats, one for Windows
    (`.zip`) and one for Linux/macOS (`tar.gz`).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Maven compressed files](img/B19088_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – Maven compressed files
  prefs: []
  type: TYPE_NORMAL
- en: The versions shown here represent the current ones at the time of this writing.
    When starting out, it is best to install the most recent version. Now, let us
    review how we install Maven for each OS.
  prefs: []
  type: TYPE_NORMAL
- en: Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no installer for Maven. Unzip the ZIP archive into a folder. As we
    saw when we installed Java without an installer, I use a folder called `devapp`
    for all my development tools. Once unzipped, you need to add the location of the
    `bin` folder to your path. You may come across references to two environment variables,
    `M2_HOME` and `MAVEN_HOME`. While they don’t do any harm, both are obsolete as
    of Maven 3.5.x.
  prefs: []
  type: TYPE_NORMAL
- en: If you are an admin on your computer, then just add the path to the `bin` folder
    to your path. If you are not, then use the `set` command to add it to your path.
    Here is my `setjava.bat` file for non-admins. Change your batch file to match
    your folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can verify that Maven is working with `mvn --version`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – The output of mvn --version on Windows](img/B19088_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – The output of mvn --version on Windows
  prefs: []
  type: TYPE_NORMAL
- en: Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have superuser status, you can use this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Verify it with `mvn --version`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not a superuser, unzip the `tar.gz` file downloaded from the Maven
    website into the folder of your choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the location for Maven to your path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Add this line to your `.profile` or `.bash_profile` file according to your Linux
    distribution.
  prefs: []
  type: TYPE_NORMAL
- en: macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Assuming that you are using Homebrew on your Mac, you can install Maven with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Verify the installation with `mvn --version`.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not have Homebrew or are not the superuser, then you can install Maven
    the same way as you installed it for Linux for non-superusers. Newer versions
    of macOS use `.zshenv` rather than `.profile` for your user script.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Verifying the installation in Linux or macOS](img/B19088_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Verifying the installation in Linux or macOS
  prefs: []
  type: TYPE_NORMAL
- en: With Maven installed, let us look at what it offers us.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Maven functionality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard Java libraries that are part of the JDK is quite extensive. However,
    there are added libraries that supply functionality, such as connecting to a relational
    database, which you must download and then add to the project before running it.
    You can configure Maven to do this for you. No need to visit a library’s web page
    – download the file, place it in the proper folder, and let the Java compiler
    know it is available.
  prefs: []
  type: TYPE_NORMAL
- en: As with most build tools, Maven is more than just a tool for compiling programs.
  prefs: []
  type: TYPE_NORMAL
- en: In today’s development environment, code does not go from the developer right
    into production if it compiles successfully. There has to be unit testing of methods
    and integration testing of the interactions between the various modules or classes
    in a program. You will use specialized servers for this work, and you can configure
    Maven to carry this out.
  prefs: []
  type: TYPE_NORMAL
- en: Let us review what else it can do.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the Java language and its standard libraries can cover multiple use cases,
    they only cover a small subset of what programmers want to do. Frequently, added
    Java libraries that provide support for tasks, such as GUI programming with JavaFX;
    certain drivers, such as one for working with a range of databases, for sophisticated
    logging, or for enhanced data collections; and more, need to be part of your program.
    The problem is that these libraries must be in the **Java classpath**. A classpath
    is the list of files and folders holding Java libraries that must be accessible
    in your filesystem. Without a tool such as Maven, you must download every library
    you wish to use and update the Java classpath manually.
  prefs: []
  type: TYPE_NORMAL
- en: However, Maven allows you to list all the libraries you plan to use in a project’s
    configuration file called the `pom.xml`. Maven keeps a folder on your filesystem
    where it stores the required dependency library files. This folder is called a
    repository. By default, this folder is placed inside another folder called `.m2`,
    which, in turn, is stored in your home directory. You can change this to use any
    folder from your computer, although most programmers leave the default folder
    location as is.
  prefs: []
  type: TYPE_NORMAL
- en: If a required dependency is not already in your local repository, then Maven
    will download it. A default central repository called Maven Central exists and
    can be found at [https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2/).
    You can search for libraries and retrieve the entry necessary to add to your `pom.xml`
    file at [https://search.maven.org/](https://search.maven.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Maven plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven program is not large; it relies on Java programs called plugins to
    conduct its tasks. For example, there are plugins to compile and package code,
    run tests, execute and deploy the code to a server, and more. The `pom.xml` file
    is where we list the plugins along with the dependencies. You can search for plugins
    as you did for dependencies at MVNRepository.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven program uses a range of default plugins available to you without including
    them in the `pom.xml` file. Major builds of Maven use versions of the default
    plugins at the time the build was released. To ensure that you are using the most
    recent version of the plugins, I recommend listing every plugin that you will
    use in the `pom.xml` file. In general, always explicitly list the plugins you
    will use rather than allow Maven to use its built-in or implicit plugins.
  prefs: []
  type: TYPE_NORMAL
- en: Maven project layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To use Maven, it is necessary to organize the program’s folder into a specific
    layout. You can configure Maven to use a layout of your choice. What follows is
    the default layout. This will allow Maven to discover all the files and resources
    that are part of your project. Let us look at the folder structure for a desktop
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You must create these folders and the `pom.xml` file before you start coding
    from the command line with an editor. Your IDE will create this structure if you
    indicate it is a Maven project when you create it. All IDEs will open a Maven
    project if it follows this folder layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you have successfully built the program, you will find a new folder called
    `target`. This is where Maven stores the compiled source code files and the final
    packaged file called the `jar` file. Here is the folder structure of `target`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Maven creates this folder when you build a project for the first time. Each
    build will replace any file in `target` with a newer version when you change the
    matching source code file. Never edit or change any files found in `target` because
    the next time you create a build, it will replace the files in `target` and any
    edits you made will be lost.
  prefs: []
  type: TYPE_NORMAL
- en: You can also instruct Maven to clean a project, and this results in contents
    of `target` being deleted. If the `pom.xml` file is instructing Maven to package
    your program as an archive, such as a JAR file, then you find the JAR or whichever
    archive you are creating in the `target` folder.
  prefs: []
  type: TYPE_NORMAL
- en: If you do not work with an IDE, you may consider writing a batch file or shell
    script to create this folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: The next task is to create the `pom.xml` file with the required plugins listed
    – but before we do that, let us look at how we organize multiple source code files
    using packages.
  prefs: []
  type: TYPE_NORMAL
- en: Java source code packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Java languages encourages developers to organize their code based on functionality.
    This could be code to interact with a user, access records from a database, or
    perform business calculations. In this section, we will learn about packages and
    how to use them in a Maven project. We already know that you do not need a package.
    The first program, `CompoundInterest`, that we ran in the previous chapter, did
    not have any packages. This was handy when a project just consisted of a single
    file. Once a project encompasses multiple files, you will use packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are using Maven, the location of our packages must be `src/main/java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The rules for naming packages are similar to the rules for identifiers, as
    well as any rules for naming folders in your OS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The periods stand for a slash, either a forward or back slash depending on
    your operating system. This means that `business` is a folder in `kenfogel` and
    `kenfogel` is a folder in `com`. Using our Maven layout, it will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: When we use packages, each file belonging to the package must have a statement
    as the first line of code that declares the name of the package.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we used a version of the `CompoundInterest` program
    with two classes in one file because the **Single-File-Source-Code** feature cannot
    have more than one file, as its name implies. Unless you need to use the Single-File-Source-Code
    feature, you should create a file for each class in your program. The file name
    must be the same as the public class name in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the class that holds the business process; notice that it begins with
    the package statement. In this first part, we are declaring what external library
    we will need and then declaring the class and the class variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Next up are the methods that contain executable code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Every Java program must have at least one class that has one method named `main`.
    Here is the class in which the `main` method exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In both files, you will see an `import` statement. To access a class that is
    not in the same package, you must import it. This statement informs the compiler
    that code coming from a class in another package will be used. Let’s discuss both
    the `import` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first import statement makes the `NumberFormat` class—that is part of the
    `java.text` package—available to the compiler. Note that packages that begin with
    `java` or `javax` are usually part of the Java installation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the second import statement, by using `CompoundInterest04.java`, we are
    instantiating the `CompoundInterestCalculator04` class in the `main` method. This
    class file is not in the same package, so you must import it to reference it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is the folder structure of the `CompoundInterest` program that Maven expects
    to find on your storage device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Basic Maven file structure](img/B19088_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – Basic Maven file structure
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are looking at the directory structure for the Maven-managed `CompoundInterest`
    program. The project is organized into packages that match `import` statements
    in your code. Here, you can see how the package names, such as `com.kenfogel.compoundinterest`,
    exist in your filesystem. We have one last part of a Maven project we must learn
    about and that is the `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: The pom.xml configuration file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You must configure Maven with a declarative XML file. This file declares, in
    XML format, all the information necessary to build a project. It lists the required
    libraries here, along with the plugins needed to support Maven tasks. In this
    section, we will examine the `pom.xml` file that holds the Maven configuration
    to build the `CompoundInterest` program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the first three tags that are used in every `pom.xml` file by everyone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s describe the parts of the code we just wrote:'
  prefs: []
  type: TYPE_NORMAL
- en: The first line that begins with `<?xml` is the XML prolog. These are the default
    values and could be left out, as it is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The root `project` tag defines the XML namespaces. It includes the location
    of the schema file that validates the `pom.xml` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`modelVersion` refers to the version that the `pom.xml` file conforms to. Since
    Maven 2, it has been `4.0.0`, and any other value will result in an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next up is how we identify a project; consider the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: These three tags are commonly referred to as the project’s GAV, using the first
    letter of each tag – `groupId`, `artifactId`, and `version`. Taken together, these
    should be unique for every project you create.
  prefs: []
  type: TYPE_NORMAL
- en: '`groupId` and `artifactId` also define a default package in your code. You
    do not need to have this package, but can have any package structure you think
    is appropriate. When a project, either your own or one downloaded for your project,
    is stored in your local repository, `version` becomes another folder. This allows
    you to have multiple versions of a project that differ by version number. Should
    you be developing a library for download by Maven, then the contents of the three
    tags become the identification for users to download your work.'
  prefs: []
  type: TYPE_NORMAL
- en: You are free to use any names you want in `groupId` and `artifactId`. It must
    conform to the XML rules for a string. There is a convention that says that the
    combination of `groupId` and `artifactId` should conform to Java’s rules for naming
    packages. The name should be unique, especially if you plan to make it available
    through Maven Central. Therefore, programmers use their company or personal domain
    name in reverse. If you do not have a domain, then simply use your name as I have.
    I do own [kenfogel.com](http://kenfogel.com) and I recommend that all developers
    get a domain name for their work.
  prefs: []
  type: TYPE_NORMAL
- en: For `version`,  we are also free to use anything – numbers or strings. If you
    have previously downloaded a specific version of a library, then Maven will use
    the local copy. One special word, `SNAPSHOT`, when added to the end of the version
    designation, implies that this project is still in development. This means that
    Maven will download this library even if it exists in the local repository. Unless
    you reconfigure Maven, `SNAPSHOT` versions are only updated once a day.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is what Maven stores in your local repository after using Maven to run
    the project. You can see how it is stored using the complete GAV:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – The .m2/repository ](img/B19088_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – The .m2/repository
  prefs: []
  type: TYPE_NORMAL
- en: The folders other than `compoundinterest` have dependencies and plugins that
    the Maven program and your project require.
  prefs: []
  type: TYPE_NORMAL
- en: Coming up, we will see a section of the `pom.xml` file called `defaultGoals`
    – a part of the `build` section of the `pom.xml` file. This is where you provide
    Maven with the tasks it must carry out. Maven does not place your project in your
    local repository unless you use `install` as one of your goals, and that is how
    this directory structure was created. The `groupId` element in the `pom.xml` file
    is broken down into folders based on the periods you placed in the tag. While
    `artifactId` and `version` in the `pom.xml` file may have periods in their text,
    they are not broken down into folders like `groupId`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is how we describe the final file that will contain everything necessary
    for your code to run. This is called `package` and refers to the various archive
    formats that Java programs can be stored in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not have a `<packaging>` tag, then Maven will default to `jar`. These
    packages are compressed ZIP files with a folder structure and files required for
    the project. You can inspect any of these packaging formats by using any `.zip`
    utility. The choices for packaging are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: jar – Java archive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`META-INF` folder that has a file named `MANIFEST.MF`. If Maven has configured
    `MANIFEST.MF` to include the package and file name of the class that holds the
    `main` method, then you can run this file by double-clicking on it or entering
    the file name at the command prompt.'
  prefs: []
  type: TYPE_NORMAL
- en: war – web archive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This ZIP archive is for use on a web server such as `.war` file differs from
    a `.jar` file to meet the requirements of a web server, such as folders for HTML
    and JavaScript files.
  prefs: []
  type: TYPE_NORMAL
- en: ear – enterprise archive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This ZIP archive is for use on a Java enterprise profile servers such as Glassfish
    or WildFly. These are also called application servers that provide the functionality
    for running complex web applications. Modern web programming in Java recommends
    using `.war` files even for complex systems. I will discuss these in more detail
    when we look at web programming in [*Chapter 14*](B19088_14.xhtml#_idTextAnchor281),
    *Server-Side Coding* *with Jakarta*.
  prefs: []
  type: TYPE_NORMAL
- en: pom – POM
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven supports using multiple POM files. One way to do this is to have a parent
    POM file included as part of the project’s POM file. I have hundreds of projects
    that I have created for my students. Early on, I found myself editing each POM
    file in each project to update versions or add new dependencies and plugins that
    every project will share. Using a parent POM file, I can place all the common
    components in this file and then include them in the individual POM files of each
    project. If the project and parent POM files each have the same tag, then the
    project POM overrides the parent POM.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us continue going through the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'These are three optional sections that provide additional information that
    can help manage the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<description>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brief description of the project in sentences
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <`developers>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Here you can list the team members. I have used it to identify my students.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<``organization>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Name of the company you work for or the name of the client
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `archive` file, the packaging that is created, holds all the compiled bytecode
    and any required libraries. It also includes the `pom.xml` file. This makes it
    possible for web and enterprise servers to display this information in the web
    console or dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up is the properties section of the file; consider the following code
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, think of `properties` as variables that you can
    use elsewhere in the POM file, such as defining the Java version the compiler
    will come from or the name of the class containing the `main` method when creating
    a `MANIFEST.MF` file. You can see that `java.version` becomes `${java.version}`.
    You can now use this value elsewhere in the POM file. The Maven plugin that manages
    compilation will use the compiler source and target source. `exec.mainClass` denotes
    the class that holds the main method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next up are dependencies; these are external libraries that your program requires.
    Consider the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: A dependency is a library that must be available for the program to compile
    and execute. If a dependency is not found in your local repository, then Maven
    will download it.
  prefs: []
  type: TYPE_NORMAL
- en: Just as you named your project, the first three tags, `groupId`, `artifactId`,
    and `version`, name the library you wish to use. Maven uses this information to
    identify what it must look for in your local repository or a remote repository
    so it can be downloaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'A new tag appears here called `<scope>`. Here are the four most used scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compile scope**: This is the default scope. It means that this library is
    required to compile the program. It will also be added to the package.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime scope**: This library must be available at runtime, but it is not
    used for compiling. **Java Database Connectivity** drivers fall into this category,
    as Java only uses them when the program runs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provided scope**: When you run a program in a framework such as Spring or
    an application server such as WildFly, many of the project’s dependency libraries
    are included in the server. This means you do not need to add them to the archive.
    You will need these files to compile the code, and Maven will download them into
    your repository so that the compiler can verify that you are using them correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test` branch of the Maven project and not the `java` branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next up is the `build` section, where we define what tasks we want Maven to
    carry out and what we will need to accomplish. In Maven, you can express the tasks
    you want to carry out as either a lifecycle, a phase, or a goal. A lifecycle consists
    of multiple phases, a phase can consist of multiple goals, and a goal is a specific
    task.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Maven, there are just three lifecycles, whereas there are numerous phases
    and goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Here we have the `defaultGoal` tag of the `build` section of a POM file. If
    you do not use this tag, then Maven will use the `Default` lifecycle, which, in
    turn, invokes 21 phases. In this example, we are explicitly invoking two phases
    and one goal.
  prefs: []
  type: TYPE_NORMAL
- en: As the name of this tag implies, this is the set of phases and goals that will
    be performed in case no goals or phases were otherwise defined (via the command
    line). The `clean` belongs to the `Clean` lifecycle, which, in turn, consists
    of three phases. When we list a phase such as `clean`, Maven will also carry out
    every phase that precedes it. In the case of the `Clean` lifecycle, if you show
    the `clean` phase, then it also carries out the `pre-clean` phase but not the
    `post-clean` phase. To carry out all the operations of a lifecycle, you simply
    use the last phase of the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we see two phases and one goal. We just saw that the `clean`
    phase invokes its preceding phase first. The package phase is preceded by 16 phases,
    each of which will be carried out. A goal is a single task and does not invoke
    anything else. The `exec:java` goal is used to execute your code explicitly after
    all previous phases and goals complete successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Here are a handful of the phases and goals we will be using.
  prefs: []
  type: TYPE_NORMAL
- en: Phases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`clean`: Deletes the target folder. This will force Maven to compile all the
    source files. If not used, only source code files with a date and time later than
    the corresponding `.class` file are compiled. This goal is a member of the `Clean`
    lifecycle and does not invoke any other goals in other lifecycles.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile`: `compile` will go through the source code tree, compile every source
    code file, and write the bytecode to the target folder. As a member of the `Default`
    lifecycle, and before Maven runs `compile`, it will first perform all the goals
    that precede it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This goal will invoke the unit tests. As the subsequent goals will
    run tests, we do not have to list them explicitly. However, if you just want to
    compile and test your code, then you can use `test` as the final goal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: This combines all the files into a `jar` package assuming that the
    `<packaging>` tag in the POM file is `jar`. The test goal precedes the package
    in the `Default` lifecycle. Therefore, Maven will run the unit tests, if there
    are any, first.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: This adds this project to your local repository if all previous
    goals have been completed successfully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Goals
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`exec:java` and `exec:exec`: These two are not part of the standard lifecycles.
    They require a special plugin and do not execute any other goals. `exec:java`
    will use the same JVM that Maven is running in. `exec:exec` will spawn or start
    up a new JVM. This can be useful if you need to configure the JVM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can override the `defaultGoal` tag by placing a phase name on the command
    line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In this example, as the package belongs to the `Default` lifecycle, all phases
    that precede it will be carried out first. All the phases and goals in `defaultGoal`
    are ignored.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is the concluding section of the build, where we will define the plugins.
    Except for `maven-clean-plugin` and `exec-maven-plugin`, all of these plugins
    exist in Maven as defaults. The versions of the plugins are decided when a major
    revision occurs, such as going from Maven 2 to Maven 3\. This list is not updated
    with point releases.
  prefs: []
  type: TYPE_NORMAL
- en: Maven 3, introduced in 2010, has an internal list of default plugins that is
    quite old. For that reason, you should declare every plugin you will use, even
    if there is a default; that is what you see here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some plugins have tags that allow you to configure how they carry out their
    task. `maven-jar-plugin` allows you to show the class that holds the main method
    in its `<mainClass>` tag. We will configure the `surefire` plugin when we examine
    unit testing to turn unit tests on or off. As we look at different programs, we
    will be enhancing this and other POM files we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This plugin is responsible for deleting any output from a previous run of Maven:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This plugin includes any files in the resource folder of a project into the
    final packaging; a resource can be an image or a properties file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the plugin that invokes the Java compiler:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you are performing unit tests, this plugin is used to configure the tests,
    such as to write the test results to a file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is the plugin responsible for packaging your program into a `jar` file.
    It includes the configuration to make the `jar` file executable by just double-clicking
    on it:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This plugin allows Maven to execute your program:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We close the root tag:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With our POM file ready, we are now ready to use Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Running Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have set up the Maven file structure, written your `pom.xml` file,
    coded your sources, and added any resources, such as images, then all you need
    to do is use Maven, which is quite straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Let us begin by running Maven on the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line Maven
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to follow to use Maven on the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a terminal or console in the folder that holds the project’s folders, such
    as `src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure your setup if needed, should you not be an admin or superuser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the `mvn` command at the prompt. If there are no errors in your code,
    it should conduct all the goals you asked for. If there are errors, then you need
    to review the output of Maven, correct the errors, and use `mvn` again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is my output from a successful build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'First up is to clean, meaning delete, any code generated the last time we built
    this program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'If there were resources, then we would be able see that they were added to
    the program. We do not have resources, so this plugin will do nothing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the compiler is invoked. As we first cleaned the project, the plugin detected
    that all source code files must be compiled. If we did not use the clear goal,
    it would only compile source code files whose date is more recent than the bytecode
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'You can have resources that are only used for unit testing. If there are any,
    they will be added to the test build of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The compiler is now invoked a second time to compile any unit test classes
    you have written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This plugin is responsible for running the unit tests that were just compiled:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As the packaging was defined as `.jar`, this plugin will now create the `.``jar`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This last plugin will execute your code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the program output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'All has gone well, and you receive the following report on how long the whole
    process took:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Java requires that every statement or expression must end with a semicolon.
    I purposely removed a semicolon from one of the files so that we can see how coding
    errors are expressed. The following appears after a build failure is declared:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: You can also request more information on failures by running Maven as `mvn -X`.
    This will provide more information should the error be due to a problem with the
    `pom.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: Running Maven in an IDE
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is normally included in IDE distributions. If you do not plan to work
    from the command line, you do not need to download and install Maven unless your
    IDE requests.
  prefs: []
  type: TYPE_NORMAL
- en: All IDEs have a `run` command and/or a `run maven` command. If both exist, use
    `run maven`. If there is no `run maven` command, expect the `run` command to recognize
    that this is a Maven project and use Maven rather than its internal build system
    to process your program.
  prefs: []
  type: TYPE_NORMAL
- en: An IDE will highlight errors in your source code and `pom.xml` file before you
    run the project. When the IDE recognizes errors, it will not compile your code
    until the issues are resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use Maven, the most widely used Java
    build tool. The heart of Maven is the `pom.xml` file; we have seen the most significant
    sections of this file and what they are used for. Going forward, all the examples
    will be Maven-based.
  prefs: []
  type: TYPE_NORMAL
- en: By now, you know how to organize the directories for a Maven project, the components
    of a basic `pom.xml` file, and how to invoke Maven to build and execute your program.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will examine the object-oriented structure of a Java program, what
    an object is, and the coding syntax for loops and decisions.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Maven: The Complete* *Reference*: [https://books.sonatype.com/mvnref-book/reference/index.html](https://books.sonatype.com/mvnref-book/reference/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Maven by* *Example*: [https://books.sonatype.com/mvnex-book/reference/index.html](https://books.sonatype.com/mvnex-book/reference/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The Maven* *Cookbook*: [https://books.sonatype.com/mcookbook/reference/index.html](https://books.sonatype.com/mcookbook/reference/index.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Part 2:Language Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are an experienced coder who needs to learn the syntax of the Java language
    as quickly as possible. This part of the book covers the details you need to know
    to construct and code a solution in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part contains the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19088_04.xhtml#_idTextAnchor086), *Language Fundamentals – Data
    Types and Variables*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19088_05.xhtml#_idTextAnchor106), *Language Fundamentals – Classes*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19088_06.xhtml#_idTextAnchor128), *Methods, Interfaces, Records,
    and Their Relationships*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19088_07.xhtml#_idTextAnchor154), *Java Syntax and Exceptions*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19088_08.xhtml#_idTextAnchor172), *Arrays, Collections, Generics,
    Functions, and Streams*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19088_09.xhtml#_idTextAnchor195), *Using Threads in Java*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19088_10.xhtml#_idTextAnchor214), *Implementing Software Design
    Principles and Patterns in Java*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19088_11.xhtml#_idTextAnchor232), *Documentation and Logging*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19088_12.xhtml#_idTextAnchor244), *BigDecimal and Unit Testing*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
