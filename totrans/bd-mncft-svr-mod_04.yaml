- en: Chapter 4. Testing on the Spigot Server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Bukkit plugins are designed to run on a CraftBukkit or Spigot server. At this
    point, you have a Spigot server and a simple plugin. After completing this chapter,
    you will have your new plugin installed on your server. In this chapter, you will
    make changes to your plugin''s code, and you will quickly see it being reflected
    on your server. This will help you develop the plugin much faster and allow you
    to accomplish more as you create new plugins. You will also learn how to troubleshoot
    the code in order to fix it when it is not working properly. This chapter will
    cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a JAR file for your plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the plugin on your server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing new versions of the plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a JAR file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to install a plugin on a server, we need a `.jar` file. A `JAR` file
    is a Java executable. It contains all the written code, which is bundled together
    in a ZIP file format. This code needs to be translated so that a computer can
    understand and run it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In NetBeans, there is a single button that we can click on to build a project.
    This will generate the `.jar` file that we need. Let''s add a block of code to
    our project to automatically copy the created `.jar` file to a more convenient
    location. In NetBeans, click on the **Files** tab to access the `build.xml file`
    for your project, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a JAR file](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open `build.xml` and add the following block of code after the `import` `file`
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This additional code will be executed after the JAR file is successfully built.
    It will copy the JAR file from the `dist` directory to the specified location.
    You can change `"../Plugin Jars"` to whichever directory you want. Here, `..`
    means to go up one folder. Therefore, if your NetBeans project is located at `C:\Users\Owner\Documents\NetBeansProjects\MyFirstBukkitPlugin`,
    then the `.jar` file will be copied to `C\Users\Owner\Documents\NetBeansProjects\Plugin
    Jars\MyFirstBukkitPlugin.jar`. Adding this code to each of your plugins will keep
    them organized in a central folder. After adding this new code, your file will
    look similar to the following piece of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the preceding code, `failonerror` is set to `true`. This means that an error
    will be presented when building in case the JAR file fails to be copied to the
    defined location. An error such as this may indicate that the location does not
    exist or you have insufficient privileges. You can set this value to `false` if
    you do not wish to see these warnings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that you will have many additional lines between `<!--` and `-->`. These
    are comments, and I encourage you to read them if you wish to learn more about
    what you can add to the `build.xml` file. Once you save this file, you are ready
    to build your project. You can do so by clicking on the hammer icon or using the
    *F11* shortcut key. The hammer icon, which is present on your toolbar, looks like
    the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Building a JAR file](img/00026.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If NetBeans fails to successfully build a jar, then you may have errors in your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: These errors are most likely shown by the red lines and light bulbs, as seen
    in [Chapter 3](part0026_split_000.html#OPEK1-b66e70deee6e4ed481db4b113e303f23
    "Chapter 3. Creating Your First Bukkit Plugin"), *Creating Your First Bukkit Plugin*.
    You can usually find these errors by hovering over or clicking on the bulbs for
    help. If you are not able to do so, refer to the previous chapter to check whether
    your code is correct or not. If you still have doubts, refer to [Chapter 2](part0020_split_000.html#J2B81-b66e70deee6e4ed481db4b113e303f23
    "Chapter 2. Learning the Bukkit API"), *Learning the Bukkit API* for help.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation of the new plugin is quite simple. You need to create a copy
    of the `.jar` file from the directory that you chose earlier in your server''s
    `plugins` folder. Then, start your server as you normally would. You will see
    the output of the console informing you that the plugin is loaded, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing the plugin](img/00027.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: If you do not see the `Hello World!` message when your server initially starts,
    don't worry. This behavior is normal because at this point, there will never be
    players online for the message to be broadcasted to. For now, we are only concerned
    with the messages that were highlighted in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Every time you make changes to the code, you will have to build a new JAR file
    and install the new version. To install the newer version, you can simply copy
    and paste it into the server's `plugin` folder and overwrite the old file. This
    can be usually done without even shutting down the server. However, if the server
    is running, you will need to use the `reload` command to load the new version.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not wish to manually copy the `plugin .jar` file and paste it in
    the server''s plugin folder every time you make changes in the code, then you
    can automate it in `build.xml`. In addition to copying the `jar` file and pasting
    it in the `Plugin Jars` directory, you can also copy and paste it directly in
    your server''s `plugins` directory. To do so, add a second `copy file` tag and
    set `todir` to your server''s `plugin` directory. The following code is an example
    of what this will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Again, you should do this for every plugin that you want to automatically install
    on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Testing your plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you may recall, the purpose of the first plugin was to discover when a plugin
    is loaded. Issue a `reload` command by typing the following command into the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see that Spigot will automatically disable and re-enable the plugin,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your plugin](img/00028.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This time, you will see the **Hello World!** message once your plugin is enabled.
    If exactly one player is online, then it will say hello to that player. Let''s
    observe this by logging onto the server and issuing the reload command from in-game.
    Open your Minecraft client and connect to your server. From in-game, first issue
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You will be given a list of all the plugins that are installed. For now, there
    is only one plugin, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your plugin](img/00029.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that there is one player on the server, we can test the plugin by reloading
    the server. Issue the following in-game command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that in both the game and console, you will see the **Hello Codisimus**
    message, as shown in the following screenshot, to indicate that the plugin is
    working as intended:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing your plugin](img/00030.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Testing new versions of the plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The plugin works as intended, but there is always room for improvement. Let's
    continue working with this plugin by adding code to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'A player may not see the **hello** message when it is white in color. We can
    change the color of the message using `ChatColor Enum`. This `Enum constants`
    has all the color codes that are supported in-game so that we can easily add them
    to messages. Let''s modify the plugin and install the newly modified version on
    the server. Choose your favorite color and place it before the message in the
    `broadcastToServer` method, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Before you build a new JAR file, change the version in `plugin.yml` to `0.2`
    to indicate that this is an updated version. Each time you make a revision to
    the code, you create a new version. Changing the version number to reflect the
    code change will ensure that the new code will have a unique version number assigned
    to it. This is valuable if you need to know the code changes that are included
    within a specific edition of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Build a new JAR file using either the build icon or the *F11* key. Copy and
    paste the new version into the `plugins` folder if you did not set up `build.xml`
    to do so automatically. Issue the `reload` command again to view the results,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing new versions of the plugin](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The plugin has been reloaded and the message is now in color. Also, note how
    the version number changes when the plugin is disabled, and again when it is loaded
    and enabled. This makes it clear that the new version of the plugin was successfully
    installed on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to expand this plugin more on your own to test different code. The following
    list contains a few challenges for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Program the plugin to display the actual name of the world rather than the word
    **World**. A hint for this challenge is that you can get a list of all the worlds
    and then use the first world in the list. Note that this will broadcast `Hello
    world!`, unless you have renamed the world in `server.properties`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send a message to the player rather than broadcasting the message to the entire
    server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If more than one player is online, send a unique hello message to each player.
    A hint for this is that you can use a `for` loop.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If no players are online, send a unique hello message for each world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you develop this plugin as well as other Bukkit plugins, there will be times
    when the code that you have written does not function as you would expect. This
    is caused by an error that lies somewhere in the code. These errors are referred
    to as **bugs**, and the process of finding these bugs and removing them is called
    **debugging**.
  prefs: []
  type: TYPE_NORMAL
- en: Learning from your mistakes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Do not be discouraged when your plugin does not work on the first try. Even
    experienced programmers encounter bugs throughout their code. Just because your
    software does not work perfectly does not mean that you are a poor developer.
    Being able to discover bugs and fix them is a huge part of software development.
    The more mistakes you make, the more you can learn from them. This is apparent
    in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some day, you may write a plugin that has a list of players in it. You may
    then write the following `for` loop to loop through each player and remove those
    who are in the `CREATIVE` mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: When you test this code, an error will likely occur. The error that is thrown
    will be a `ConcurrentModificationException method`. The name of the exception
    may not mean much to you, but it will help you narrow down the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Developers need not know how to fix every error, but they should know where
    to find information about those errors so that they can figure out how to fix
    them. This is usually found in the software's documentation or public message
    boards. Most developers will make a note of the error message and search for information
    about it using Google. The top results will often be the official documentation
    or posts from other people who have encountered the same issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'To know more about the error, you can search for `ConcurrentModificationException`;
    you may find the following statement from Oracle''s **Javadoc**:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"For example, it is not generally permissible for one thread to modify a Collection
    while another thread is iterating over it. "*'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The official javadoc can prove to be useful. But sometimes, they are still difficult
    to understand. Luckily, there exist websites such as [stackoverflow.com](http://stackoverflow.com),
    which allow programmers to help each other debug code. If you refer back to the
    search results, you will see links to Stack Overflow questions as well as posts
    from similar websites. These links can be very helpful because often there are
    people just like you who have run into the same error. If you look at the questions
    and the answers provided by others, you can learn why this error occurs and how
    to remedy it.
  prefs: []
  type: TYPE_NORMAL
- en: 'After reading through the questions related to the concurrent modification
    bug, you will eventually learn that in most cases, the exception occurs when you
    attempt to modify a list or collection while looping through it. You will also
    find that you must use an iterator in order to avoid this scenario. Usually, there
    are examples of how to fix the bug too. In this case, there are explanations of
    how to correctly use an iterator to remove objects from a list. If an explanation
    is not present, then you can research iterators within Oracle''s javadoc just
    as you would use Bukkit''s javadoc. We can fix the previous code by using an iterator,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: After fixing the concurrent modification bug that was present in the code, you
    are now a more experienced programmer. You will know how to avoid this issue in
    the future and you have even learned how to use an iterator in the process.
  prefs: []
  type: TYPE_NORMAL
- en: When researching is not enough
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, looking through documentation and reading message boards is not enough
    to fix a bug. Errors such as **NullPointerException** are very common and can
    be caused by a variety of things. By researching, you will discover that **NullPointerException**
    occurs when you attempt to access a method or field of a **null** object. "Null"
    refers to the lack of a value. Therefore, a null object is an object that does
    not exist. However, knowing this does not always help you find exactly which object
    has a null value and why it is a null value in the first place. To aid in finding
    bugs, here are some steps to follow to pinpoint the troublesome code.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the stack trace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Most errors in Java are presented in the form of a **stack trace**. A stack
    trace informs you of the lines of code that were being executed before the error
    occurred. On a Spigot server, these stack traces will appear similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Reading the stack trace](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If your server is hosted somewhere else and you are viewing the console through
    an online browser tool, the stack trace may be printed in the reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever there is an exception on your server, Spigot logs the error along with
    the plugin that caused it. Sometimes, there are even details of which event was
    in progress when the error occurred. With the stack trace shown in the preceding
    screenshot, we can see that the error was caused by `MyFirstBukkitPlugin` `version
    0.3`. If the version does not match the version that you have in your **IDE**,
    you will want to update the server with the latest version of the plugin. This
    way, you can be certain that the code running on the server is the same code that
    you have in NetBeans. We can also see that the exception was thrown when the plugin
    was being enabled. On the next line, we see the specific error, which was **NullPointerException**.
    On the line following that, we are told the exact line of code that caused the
    error. It happened within the `onEnable` method of the `MyFirstBukkitPlugin` class.
    In parenthesis, it states **MyFirstBukkitPlugin.java:27**. This tells us that
    the error was on line 27 of the `MyFirstBukkitPlugin` class, which of course is
    in the `onEnable` method. The first three lines of the stack trace are the most
    useful to us. You rarely have to look at the further lines for explanation. Sometimes,
    you will not see any of the class names in the code at the start of the stack
    trace. However, if you look further, you will probably see a familiar class and
    method name.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that you have the class name and line number, you can look back at your
    code to see if you notice why you are getting **NullPointerException**. Within
    NetBeans, I can see that line 27 is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Breaking down the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The troublesome line is a very long line of code. So, it is not apparent which
    object has a null value. If you find yourself in a similar situation, I recommend
    that you break down the code into multiple lines. This will give us the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After installing and running this new code, you should see the same error in
    the console, but it will point you to a different line of code. With this new
    code, you will now see that the exception is thrown on line 30, which is the last
    line of the preceding code segment.
  prefs: []
  type: TYPE_NORMAL
- en: Adding debug messages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is still a lot going on in that single line of code. Therefore, you may
    not be sure about which variable is null. Is it `player`, `playerCount`, or `worldCount`?
    If you need some additional help, you can add what we call debug messages to your
    code. These messages can print information to the console log to indicate what
    is happening throughout the code. There are a few ways to log messages in a Bukkit
    plugin. The easiest way is to use the `System.out.println(String string)` method.
    However, it is a better practice to utilize the logger that the Spigot server
    assigns to your plugin. The logger can be retrieved with the `getLogger` method.
    This method is in the `JavaPlugin` class. You can access it from within the `onEnable`
    method. These debug messages will only be temporary. Therefore, you can use whichever
    method you prefer. But I do suggest that you try using the logger as it also prints
    out plugin information. In our example, we will use the logger.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we know how to print messages, let''s log the values of each variable,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that we have added the debug messages before the faulty line of code. Once
    an exception is thrown, the computer stops executing the code. Therefore, if the
    debug messages were after the `sendMessage` call, the messages would never be
    printed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding debug messages](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you install and run the updated code, you will see the debug messages
    within the console:'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can clearly see that `player` has a `null` value.
  prefs: []
  type: TYPE_NORMAL
- en: Referring back to the Javadoc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look back at the line of code where `player` is set and then read the
    Bukkit javadoc, you will learn that player has a value of null because the requested
    player, Codisimus, is not online. If the player cannot be found, `null` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '![Referring back to the Javadoc](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the bug in the code may not be exactly at the line given in
    the stack trace. In this scenario, the null value is set a few lines earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Fixing the bug only after you understand it
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the bug is exposed, we can fix it. In the case of **NullPointerException**,
    there are two solutions. Do not simply fix the bug a certain way because you can.
    You should strive to understand why the bug is present and how the code should
    function instead. Maybe, the variable player is never supposed to have a null
    value. If I know that the player Codisimus will always be online, then perhaps,
    I misspelled the username. However, we know that Codisimus will not always be
    online. So, within this plugin, the player variable will sometimes have a null
    value. In that scenario, we do not want to try to send a message to the player,
    since it will throw **NullPointerException**. To remedy this, we can put the line
    of code within an `if` statement, which developers typically refer to as a null
    check:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that I have changed the debug messages to comments by prepending them with
    // so that those messages are not printed to the log. Alternatively, I can remove
    these lines completely if I feel that I will never need them again.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added the null check, the message will only be sent if the
    player is not null.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You now know how to create a JAR file from a NetBeans project. For the plugins
    that you will create in the future, you can follow this simple process in order
    to install and run your new plugin, whether it is for testing or for a finished
    product. You also know how to update a plugin that is already installed on your
    server and fix the bugs that are exposed in your code. In the following chapters,
    we will create increasingly complex plugins. The first step to this is creating
    commands for plugins that players will be able to execute in game.
  prefs: []
  type: TYPE_NORMAL
