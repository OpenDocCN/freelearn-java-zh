- en: Best Practices In Java 9
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9最佳实践
- en: In the last chapter, we explored several changes regarding command-line flags
    in Java 9\. Specifically, we covered unified JVM logging, compiler control, new
    diagnostic commands, removal of the HPROF heap profiling agent, the removal of
    the **Java Heap Analysis Tool** (**JHAT**), command-line flag argument validation,
    and the ability to compile for older platform versions.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了Java 9中有关命令行标志的几个更改。具体来说，我们涵盖了统一的JVM日志、编译器控制、新的诊断命令、移除HPROF堆分析代理、移除**Java堆分析工具**（**JHAT**）、命令行标志参数验证以及为旧平台版本编译的能力。
- en: 'In this chapter, we will focus on best practices with additional utilities
    provided with the Java 9 platform. Specifically, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注Java 9平台提供的附加实用工具的最佳实践。具体来说，我们将涵盖：
- en: Support for UTF-8
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对UTF-8的支持
- en: Unicode 7.0.0
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode 7.0.0
- en: Linux/AArch64 port
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux/AArch64端口
- en: Multi-resolution images
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多分辨率图像
- en: Common Locale Data Repository
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用区域数据存储库
- en: Support for UTF-8
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对UTF-8的支持
- en: '**Unicode Transformation Format-8** (**UTF-8**) is a character set that encapsulates
    all Unicode characters using one to four 8-bit bytes. It is the byte-oriented
    encoded form of Unicode. UTF-8 is and has been the predominant character set for
    encoding web pages since 2009\. Here are some characteristics of UTF-8:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Unicode转换格式-8**（**UTF-8**）是一个字符集，它使用一到四个8位字节封装所有Unicode字符。它是Unicode的字节编码形式。自2009年以来，UTF-8一直是编码网页的主要字符集。以下是UTF-8的一些特性：'
- en: Can encode all 1,112,064 Unicode code points
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以编码所有1,112,064个Unicode代码点
- en: Uses one to four 8-bit bytes
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一到四个8位字节
- en: Accounts for nearly 90% of all web pages
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 占据了几乎所有网页的近90%
- en: Is backward compatible with ASCII
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与ASCII向后兼容
- en: Is reversible
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可逆
- en: The pervasive use of UTF-8 underscores the importance of ensuring the Java platform
    fully supports UTF-8\. This mindset led to the Java Enhancement Proposal 226,
    **UTF-8 property resource bundles**. With Java 9 applications, we have the ability
    to specify property files that have UTF-8 encoding. The Java 9 platform includes
    changes to the `ResourceBundle` API to support UTF-8.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: UTF-8的普遍使用强调了确保Java平台完全支持UTF-8的重要性。这种思维方式导致了Java增强提案226，**UTF-8属性资源包**。使用Java
    9应用程序，我们可以指定具有UTF-8编码的属性文件。Java 9平台对`ResourceBundle`API进行了更改以支持UTF-8。
- en: Let's take a look at the pre-Java 9 `ResourceBundle` class, followed by what
    changes were made to this class in the Java 9 platform.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Java 9之前的`ResourceBundle`类，然后是Java 9平台对该类所做的更改。
- en: The ResourceBundle class
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`ResourceBundle`类'
- en: 'The following class provides developers with the ability to isolate locale-specific
    resources from a resource bundle. This class significantly simplifies localization
    and translation:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下类为开发者提供了从资源包中隔离特定区域设置资源的能力。这个类显著简化了本地化和翻译：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Creating resource bundles needs a purposeful approach. For example, let''s
    imagine that we are creating a resource bundle that will support multiple languages
    for a business application. Our button labels, among other things, will be displayed
    differently depending on the current locale. So, for our example, we can create
    a resource bundle for our buttons. We can call it `buttonResources`. Then, for
    each locale, we can create a `buttonResource_<identifier>`. Here are some examples:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建资源包需要一种有目的的方法。例如，让我们想象我们正在创建一个资源包，该资源包将支持商业应用程序的多种语言。我们的按钮标签（以及其他内容）将根据当前的区域设置而有所不同。因此，在我们的示例中，我们可以为我们的按钮创建一个资源包。我们可以将其称为`buttonResources`。然后，对于每个区域设置，我们可以创建一个`buttonresource_<标识符>`。以下是一些示例：
- en: '`buttonResource_ja`: for Japanese'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buttonResource_ja`：用于日语'
- en: '`buttonResource_uk`: for UK English'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buttonResource_uk`：用于英国英语'
- en: '`buttonResource_it`: for Italian'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buttonResource_it`：用于意大利语'
- en: '`buttonResource_lh`: for Lithuanian'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`buttonResource_lh`：用于立陶宛语'
- en: We can use a resource bundle with the same name as the base name for our default
    bundle. So, `buttonResource` would contain our default bundle.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用与我们的默认包基本名称相同的名称的资源包。因此，`buttonResource`将包含我们的默认包。
- en: 'To obtain a locale-specific object, we make a call to the `getBundle` method.
    An example follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取特定区域设置的对象，我们调用`getBundle`方法。以下是一个示例：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the next sections we will examine the `ResourceBundle` class by looking at
    its nested class, field and constructor, and included methods.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将通过查看`ResourceBundle`类的嵌套类、字段和构造函数以及包含的方法来检查`ResourceBundle`类。
- en: The nested class
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嵌套类
- en: 'There is one nested class associated with the `ResourceBundle` class, that
    is the `ResourceBundle.Control` class. It provides callback methods that are used
    when the `ResourceBundle.getBundle` method is used:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The `ResourceBundle.Control` class has the following fields:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_CLASS`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_DEFAULT`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final List<String> FORMAT_PROPERTIES`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final long TTL_DONT_CACHE`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`public static final long TTL_NO_EXPIRATION_CONTROL`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The class has a single, empty constructor and the following methods:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '`getCandidateLocales()`:'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '| **Component** | **Details** |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
- en: '| Returns | List of candidate locales |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
- en: '`getControl()`:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '| **Component** | **Details** |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if `formats` is unknown)`NullPointerException`
    (if `formats` is null) |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `formats`: These are the formats that will be returned by the
    `ResourceBundle.Control.getFormats` method |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| Returns | A `ResourceBundle.Control` that supports the formats specified
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '`getFallbackLocale()`:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '| **Component** | **Details** |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale that could not be found with the `ResourceBundle.getBundle` method |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| Returns | The fallback locale |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '`getFormats()`:'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '| **Component** | **Details** |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` is null) |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| Returns | A list of Strings with their formats so the resource bundles can
    be loaded |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: '`getNoFallbackControl()`:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '| **Component** | **Details** |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if `formats` is unknown)`NullPointerException`
    (if `formats` is null) |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `formats`: these are the formats that will be returned by the
    `ResourceBundle.Control.getFormats` method |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| Returns | A `ResourceBundle.Control` that supports the formats specified
    without a fallback locale. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '`getTimeToLive()`:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '| **Component** | **Details** |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if `baseName` is null) |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| Returns | Zero or a positive millisecond that is offset from the cached time
    |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '`needsReload()`:'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '| **Component** | **Details** |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: '| Throws | `NullPointerException` (if any of the following listed parameters
    are null):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '`baseName`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`locale`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`loader`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bundle`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale`format`: the resource bundle format`loader`: the `ClassLoader` that should
    be used to load the bundle`bundle`: the expired bundle`loadTime`: a time bundle
    was added to the cache |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
- en: '| Returns | `true`/`false` to indicate if the expired bundle needs to be reloaded
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
- en: '`newBundle()`:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '| **Component** | **Details** |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `ClassCastException` (if the loaded class cannot be cast to `ResourceBundle`)`ExceptionInInitializerError`
    (if initialization fails)`IllegalAccessException` (if the class or constructor
    is not accessible)`IllegalArgumentException` (if the format is unknown)`InstantiationException`
    (if the class instantiation fails)`IOException` (resource reading error)`NullPointerException`
    (if any of the following listed parameters are null):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '| 抛出 | `ClassCastException`（如果加载的类不能转换为`ResourceBundle`）`ExceptionInInitializerError`（如果初始化失败）`IllegalAccessException`（如果类或构造函数不可访问）`IllegalArgumentException`（如果格式未知）`InstantiationException`（如果类实例化失败）`IOException`（资源读取错误）`NullPointerException`（如果以下列出的任何参数为null）：'
- en: '`baseName`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`baseName`'
- en: '`locale`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`locale`'
- en: '`format`'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`format`'
- en: '`loader`'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`loader`'
- en: '`SecurityException` (if access to new instances is denied) |'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecurityException`（如果拒绝访问新实例） |'
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale`format`: the resource bundle format`loader`: the `ClassLoader` that should
    be used to load the bundle`reload`: `true`/`false` flag indicating if the resource
    bundle has expired |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `baseName`: 完整的类名`locale`: 所需的区域设置`format`: 资源包格式`loader`: 应用于加载包的`ClassLoader``reload`:
    表示资源包是否过期的`true`/`false`标志 |'
- en: '| Returns | Instance of the resource bundle |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 资源包的实例 |'
- en: '`toBundleName()`:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toBundleName()`:'
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '| **Component** | **Details** |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `NullPointerException` (if `baseName` or `locale` is null) |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `NullPointerException`（如果`baseName`或`locale`为null） |'
- en: '| Parameters | `baseName`: a fully qualified class name`locale`: the desired
    locale |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `baseName`: 完整的类名`locale`: 所需的区域设置 |'
- en: '| Returns | The bundle name |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 包名 |'
- en: '`toResourceName()`:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`toResourceName()`:'
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '| **Component** | **Details** |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `NullPointerException` (if `bundleName` or `suffix` is null) |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `NullPointerException`（如果`bundleName`或`suffix`为null） |'
- en: '| Parameters | `bundleName`: the name of the bundle`suffix`: the suffix for
    the file name |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `bundleName`: 包名`suffix`: 文件名后缀 |'
- en: '| Returns | The converted resource name |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 转换后的资源名称 |'
- en: Fields and constructors
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字段和构造函数
- en: 'The `ResourceBundle` class has one field as described here:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceBundle`类有一个字段，如下所述：'
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The parent bundle is searched by the `getObject` method when a specified resource
    is not found.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 当指定资源未找到时，`getObject`方法会搜索父包。
- en: 'The constructor for the ResourceBundle class is as shown here:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ResourceBundle类的构造函数如下所示：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Methods
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法
- en: 'The `ResourceBundle` class has 18 methods, each described here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`ResourceBundle`类有18个方法，每个方法在此进行描述：'
- en: '`clearCache()`:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clearCache()`:'
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '| **Component** | **Details** |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | None |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | 无 |'
- en: '| Parameters | None |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 无 |'
- en: '| Returns | None |'
  id: totrans-123
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 无 |'
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '| **Component** | **Details** |'
  id: totrans-125
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `NullPointerException` (if loader is null) |'
  id: totrans-126
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `NullPointerException`（如果loader为null） |'
- en: '| Parameters | `loader`: the class loader |'
  id: totrans-127
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `loader`: 类加载器 |'
- en: '| Returns | None |'
  id: totrans-128
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 无 |'
- en: '`containsKey()`:'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`containsKey()`:'
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '| **Component** | **Details** |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `NullPointerException` (if `key` is null) |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `NullPointerException`（如果`key`为null） |'
- en: '| Parameters | `key`: resource key |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `key`: 资源键 |'
- en: '| Returns | `true`/`false` depending on if the key is in the `ResourceBundle`
    or parent bundles |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 根据`ResourceBundle`或父包中是否存在键返回`true`/`false` |'
- en: '`getBundle()`:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`getBundle()`:'
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '| **Component** | **Details** |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found)`NullPointerException` (if `baseName` is null) |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `MissingResourceException`（如果提供的`baseName`的资源包未找到）`NullPointerException`（如果`baseName`为null）
    |'
- en: '| Parameters | `baseName`: fully qualified class name |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `baseName`: 完整的类名 |'
- en: '| Returns | Resource bundle based on the given `baseName` and the default locale
    |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 基于给定的`baseName`和默认区域设置的资源包 |'
- en: '[PRE19]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '| **Component** | **Details** |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found)`NullPointerException`
    (if `baseName` is null) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `IllegalArgumentException`（如果传递的控制操作不当）`MissingResourceException`（如果提供的`baseName`的资源包未找到）`NullPointerException`（如果`baseName`为null）
    |'
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    provides information so the resource bundle can be loaded |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `baseName`: 完整的类名`control`: 控制提供信息，以便资源包可以被加载 |'
- en: '| Returns | Resource bundle based on the given `baseName` and the default locale
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '[PRE20]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '| **Component** | **Details** |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found)`NullPointerException` (if `baseName` or `locale` is null)
    |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`locale`: desired locale
    |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '| **Component** | **Details** |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found in any of the
    locales)`NullPointerException` (if `baseName`, `control`, or `locale` is null)
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    provides information so the resource bundle can be loaded`targetLocale`: desired
    locale |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '| **Component** | **Details** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource bundle for the provided
    `baseName` is not found in any of the locales)`NullPointerException` (if `baseName`,
    `loader`, or `locale` is null) |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`locale`: desired locale`loader`:
    class loader |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '[PRE23]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '| **Component** | **Details** |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: '| Throws | `IllegalArgumentException` (if the passed control performs improperly)`MissingResourceException`
    (if the resource bundle for the provided `baseName` is not found in any of the
    locales)`NullPointerException` (if `baseName`, `control`, `loader`, or `targetLocale`
    is null) |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `baseName`: fully qualified class name`control`: the control
    providing information so the resource bundle can be loaded`loader`: class loader`targetLocale`:
    desired locale |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| Returns | Resource bundle based on the given `baseName` and `locale` |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '`getKeys()`:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '| **Component** | **Details** |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| Returns | Enumeration of keys in the `ResourceBundle` and parent bundles
    |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '`getLocale()`:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '| **Component** | **Details** |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: '| Throws | None |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
- en: '| Parameters | None |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
- en: '| Returns | the `locale` of the current resource bundle |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
- en: '`getObject()`:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '| **Component** | **Details** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
- en: '| Throws | `MissingResourceException` (if the resource for the provided key
    is not found)`NullPointerException` (if `key` is null) |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: this is the key for the desired object |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
- en: '| Returns | The object for the key provided |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
- en: '`getString()`:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '| **Component** | **Details** |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| Throws | `ClassCastException` (if the found object is not a key)`MissingResourceException`
    (if the resource for the provided key is not found)`NullPointerException` (if
    `key` is null) |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| Parameters | `key`: this is the key for the desired `String` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| Returns | The `String` for the key provided |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: '`getStringArray()`:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '| **Component** | **Details** |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
- en: '| Throws | `ClassCastException` (if the found object is not a `String` array)`MissingResourceException`
    (if the resource for the provided key is not found)`NullPointerException` (if
    `key` is null) |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `ClassCastException`（如果找到的对象不是`String`数组）`MissingResourceException`（如果找不到提供的键的资源）`NullPointerException`（如果`key`为null）|'
- en: '| Parameters | `key`: this is the key for the desired `String` array |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `key`：这是所需`String`数组的键 |'
- en: '| Returns | The `String` array for the key provided |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 提供的键的`String`数组 |'
- en: '`handleGetObject()`:'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleGetObject()`:'
- en: '[PRE29]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '| **Component** | **Details** |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | `NullPointerException` (if `key` is null) |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | `NullPointerException`（如果`key`为null）|'
- en: '| Parameters | `key`: key for the desired `Object` |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `key`：所需`Object`的键 |'
- en: '| Returns | The object for the given key |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 给定键的对象 |'
- en: '`handleKeySet()`:'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`handleKeySet()`:'
- en: '[PRE30]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '| **Component** | **Details** |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | None |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | 无 |'
- en: '| Parameters | None |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 无 |'
- en: '| Returns | Set of keys in `ResourceBundle` |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | `ResourceBundle`中的键集 |'
- en: '`keySet()`:'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`keySet()`:'
- en: '[PRE31]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '| **Component** | **Details** |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | None |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | 无 |'
- en: '| Parameters | None |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 无 |'
- en: '| Returns | Set of keys in `ResourceBundle` and its parent bundles |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | `ResourceBundle`及其父包中的键集 |'
- en: '`setParent()`:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setParent()`:'
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '| **Component** | **Details** |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| **组件** | **详细信息** |'
- en: '| Throws | None |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| 抛出 | 无 |'
- en: '| Parameters | `parent`: the parent bundle for the current bundle |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | `parent`：当前包的父包 |'
- en: '| Returns | None |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 返回 | 无 |'
- en: Changes in Java 9
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9的变化
- en: The properties file format, based on ISO-8859-1, was previously supported by
    the Java platform. That format does not easily support escape characters, although
    it does provide an appropriate escape mechanism. The use of ISO-8859-1 requires
    conversion between the text characters and their escaped form.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 基于ISO-8859-1的属性文件格式以前由Java平台支持。该格式不易支持转义字符，尽管它确实提供了一个适当的转义机制。使用ISO-8859-1需要在文本字符及其转义形式之间进行转换。
- en: The Java 9 platform includes a modified `ResourceBundle` class with the default
    file encoding set to UTF-8 vice ISO-8859-1\. This saves applications the time
    it takes to make the aforementioned escape mechanism conversions.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台包括一个修改后的`ResourceBundle`类，默认文件编码设置为UTF-8而不是ISO-8859-1。这节省了应用程序进行上述转义机制转换所需的时间。
- en: Unicode 7.0.0
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unicode 7.0.0
- en: Java Enhancement Proposal 227, titled Unicode 7.0, was created to indicate the
    need to update the appropriate APIs to support Unicode version 7.0\. That version
    of Unicode was released on June 16, 2014\. Previous to Java 9, Unicode version
    6.2 was the latest version supported.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案227，标题为Unicode 7.0，旨在表明需要更新适当的API以支持Unicode 7.0版本。该版本的Unicode于2014年6月16日发布。在Java
    9之前，Unicode 6.2是支持的最新版本。
- en: 'You can learn more about **Unicode version 7.0.0** at the official specification
    page at: [http://unicode.org/versions/Unicode7.0.0/](http://unicode.org/versions/Unicode7.0.0/).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方规范页面上了解更多关于**Unicode 7.0.0版本**的信息：[http://unicode.org/versions/Unicode7.0.0/](http://unicode.org/versions/Unicode7.0.0/)。
- en: 'At the time this book was published, the most recent Unicode standard was version
    10.0.0, released on June 20, 2017\. Interestingly, the Java 9 platform will support
    Unicode version 7.0.0, but not the more recent version 10.0.0 of the Unicode standard.
    In addition to the two Unicode specifications listed here, from version 7.0.0,
    will not be implemented by the Java 9 platform:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书出版时，最新的Unicode标准是10.0.0版本，于2017年6月20日发布。有趣的是，Java 9平台将支持Unicode 7.0.0版本，但不会支持更近期的Unicode标准10.0.0版本。除了这里列出的两个Unicode规范之外，从7.0.0版本开始，Java
    9平台将不会实现以下内容：
- en: '**Unicode Technical Standard #10** (**UTS #10**)'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicode技术标准#10**（**UTS #10**）'
- en: 'Unicode collation algorithm: details how to compare Unicode strings'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode排序算法：如何比较Unicode字符串的详细信息
- en: '**Unicode Technical Standard #46** (**UTS #46**)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicode技术标准#46**（**UTS #46**）'
- en: '**Unicode Internationalizing Domain Names for Applications** (**IDNA**) **Compatibility
    processing**: comprehensive mapping for text case and domain name variants'
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicode国际域名应用**（**IDNA**）**兼容处理**：对文本大小写和域名变体的全面映射'
- en: 'The core of the Java 9 platform changes, specific to Unicode 7.0.0 support,
    includes the following Java classes:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台针对Unicode 7.0.0支持的具体变化包括以下Java类：
- en: '`java.lang package`'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang package`'
- en: Character
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符
- en: String
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串
- en: '`java.text.package`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.text.package`'
- en: Bidi
  id: totrans-236
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bidi
- en: BreakIterator
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: BreakIterator
- en: Normalizer
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正规化器
- en: Let's take a quick look at each of those classes to help solidify our comprehension
    of the broad impact that support for Unicode 7.0.0 has on the Java 9 platform.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速查看这些类，以帮助我们巩固对Unicode 7.0.0对Java 9平台广泛影响的了解。
- en: The java.lang package
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`java.lang`包'
- en: The `java.lang.package` provides fundamental classes used in nearly every Java
    application. In this section, we will look at the `Character` and `String` classes.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.lang.package`提供了在几乎所有Java应用程序中使用的根本类。在本节中，我们将探讨`Character`和`String`类。'
- en: 'The `Character` class:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`Character`类：'
- en: '[PRE33]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is one of the many core classes that has been around since the first version
    of Java. An object of the `Character` class consists of a single field of type
    `char`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这是有史以来Java第一个版本就存在的许多核心类之一。`Character`类的对象包含一个类型为`char`的单个字段。
- en: 'The `String` class:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`String`类：'
- en: '[PRE34]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Strings, another core originating class, are immutable character strings.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串，另一个核心起源类，是不可变的字符字符串。
- en: Modifying the `Character` and `String` classes to support a newer version of
    Unicode, version 7.0 for Java 9, is an important step to help keep Java relevant
    as the premier programming language.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Character`和`String`类以支持Unicode的新版本，Java 9的7.0版本，是帮助Java作为首屈一指的编程语言保持相关性的重要步骤。
- en: The java.text package
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`java.text`包'
- en: The `Bidi`, `BreakIterator`, and `Normalizer` classes are not as widely used
    as the `Character` and `String` classes. Here is a brief overview of those classes.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bidi`、`BreakIterator`和`Normalizer`类不像`Character`和`String`类那样被广泛使用。以下是对这些类的简要概述。'
- en: 'The `Bidi` class:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`Bidi`类：'
- en: '[PRE35]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This class is used to implement Unicode's bidirectional algorithm. This is used
    to support Arabic or Hebrew.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类用于实现Unicode的双向算法。这用于支持阿拉伯语或希伯来语。
- en: For specific information on the *Unicode Bidirectional Algorithm*, visit [http://unicode.org/reports/tr9/](http://unicode.org/reports/tr9/).
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*Unicode双向算法*的详细信息，请访问[http://unicode.org/reports/tr9/](http://unicode.org/reports/tr9/)。
- en: 'The `BreakIterator` class:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`BreakIterator`类：'
- en: '[PRE36]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This class is used for finding text boundaries.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类用于查找文本边界。
- en: 'The `Normalizer` class:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`Normalizer`类：'
- en: '[PRE37]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This method contains two methods:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法包含两个方法：
- en: '`isNormalized`: used to determine if `char` values of a given sequence are
    normalized'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`isNormalized`：用于确定给定序列的`char`值是否已规范化'
- en: '`normalize`: normalizes a sequence of char values'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`normalize`：将一系列`char`值规范化'
- en: Additional significance
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外的意义
- en: 'As previously stated, JDK 8 supports Unicode 6.2\. Version 6.3 was released
    on September 30, 2013 with the following listed highlights:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，JDK 8支持Unicode 6.2。6.3版本于2013年9月30日发布，以下列出了一些亮点：
- en: Bidirectional behavior improvements
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 双向行为改进
- en: Improved Unihan data
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进了Unihan数据
- en: Better support for Hebrew
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好的希伯来语支持
- en: 'Version 7.0.0, released on June 16, 2014, introduced the following changes:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 7.0.0版本于2014年6月16日发布，引入了以下变化：
- en: Added 2,834 characters
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加了2,834个字符
- en: Increased support for Azerbaijan, Russian, and high German dialects
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强了对阿塞拜疆语、俄语和德语方言的支持
- en: Pictographic symbols
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图形符号
- en: Historic scripts for several countries and regions
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个国家和地区的史前脚本
- en: Updates to the Unicode bidirectional algorithm
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unicode双向算法的更新
- en: Nearly 3,000 new Cantonese pronunciation entries
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 近3000个新的粤语发音条目
- en: Major enhancements to the Indic script properties
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 印度语脚本属性的重大改进
- en: The vast changes to Unicode with version 6.3 and 7.0.0 underscores the importance
    of the Java 9 platform supporting 7.0.0 as opposed to 6.2, as with Java 8.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: Unicode在6.3和7.0.0版本中的巨大变化突出了Java 9平台支持7.0.0而不是6.2的重要性，正如Java 8所做的那样。
- en: The Linux/AArch64 port
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Linux/AArch64端口
- en: '**Java Enhancement Proposal 237** (**JEP 237**) had a single goal of porting
    JDK 9 to Linux/AArch64\. In order to understand what this means to us as Java
    9 developers, let''s talk a bit about hardware.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java增强提案237**（**JEP 237**）的唯一目标是把JDK 9移植到Linux/AArch64。为了了解这对我们作为Java 9开发者意味着什么，让我们谈谈一些关于硬件的事情。'
- en: ARM is a British company that has been creating computing cores and architectures
    for over three decades. Their original name was **Acorn RISC Machine** (**ARM**),
    with **RISC** standing for **Reduced Instruction Set Computing**. Somewhere along
    the way, they changed their name to **Advanced RISC Machine** (**ARM**), and finally,
    to ARM Holdings or just ARM. They license their architectures to other companies.
    ARM reports that there have been over 100 billion ARM processors manufactured.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: ARM是一家英国公司，已经超过三十年在创建计算核心和架构。他们的原始名称是**Acorn RISC Machine**（ARM），其中**RISC**代表**精简指令集计算**。在某个时候，他们将其名称更改为**Advanced
    RISC Machine**（ARM），最终变为ARM Holdings或简称ARM。他们向其他公司许可其架构。ARM报告称，已经制造了超过1000亿个ARM处理器。
- en: 'In late 2011, ARM came out with a new ARM architecture called ARMv8\. This
    architecture included a 64-bit optional architecture called AArch64, which, as
    you would expect, came with a new instruction set. Here is an abbreviated list
    of AArch64 features:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在2011年底，ARM推出了一个新的ARM架构，称为ARMv8。这个架构包括一个可选的64位架构AArch64，正如你所预期的，它带来了一套新的指令集。以下是AArch64特性的简略列表：
- en: 'A64 instruction set:'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: A64指令集：
- en: 31 general purpose 64-bit registers
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 31个通用64位寄存器
- en: Dedicated zero or stack pointer registers
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 专用零或堆栈指针寄存器
- en: The ability to take 32-bit or 64-bit arguments
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够接受32位或64位参数
- en: 'Advanced SIMD (NEON) - enhanced:'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级SIMD（NEON）-增强：
- en: 32x 128-bit registers
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32个128位寄存器
- en: Supports double-precision floating points
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持双精度浮点数
- en: AES encrypt/decrypt and SHA-1/SHA-2 hashing
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AES加密/解密和SHA-1/SHA-2哈希
- en: New exception system
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的异常系统
- en: 'Oracle did a great job of identifying this architecture as something that needs
    to be supported in the new Java 9 platform. The new AArch64 architecture is said
    to essentially be an entirely new design. JDK 9 has been successfully ported to
    Linux/AArch64 with the following implementations:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle在确定这个架构需要在新的Java 9平台上得到支持方面做得很好。据说新的AArch64架构基本上是一个全新的设计。JDK 9已经成功移植到Linux/AArch64，以下是一些实现方式：
- en: Template interpreter
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板解释器
- en: C1 JIT compiler
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C1 JIT编译器
- en: C2 JIT compiler
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C2 JIT编译器
- en: For information about the C1 and C2 JIT compilers, refer to Chapter 14, *Command
    Line Flags*.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 关于C1和C2 JIT编译器的信息，请参阅第14章，*命令行标志*。
- en: Multi-resolution Images
  id: totrans-295
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 多分辨率图像
- en: 'The purpose of Java Enhancement Proposal 251 was to create a new API that supports
    multi-resolution images. Specifically, to allow a multi-resolution image to encapsulate
    several resolution variants of the same image. This new API will be located in
    the `java.awt.image` package. The following diagram shows how multi-resolution
    can encapsulate a set of images, with different resolutions, into a single image:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案251的目的是创建一个新的API，支持多分辨率图像。具体来说，允许多分辨率图像封装同一图像的多个分辨率变体。这个新的API将位于`java.awt.image`包中。以下图表显示了多分辨率如何将不同分辨率的图像集封装到一个单独的图像中：
- en: '![](img/e462b267-be5e-4658-9fb5-a2685b50217b.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e462b267-be5e-4658-9fb5-a2685b50217b.png)'
- en: This new API will give developers the ability to retrieve all image variants
    or retrieve a resolution-specific image. This is a powerful set of capabilities.
    The `java.awt.Graphics` class will be used to retrieve the desired variant from
    the multi-resolution image.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的API将使开发者能够检索所有图像变体或检索特定分辨率的图像。这是一组强大的功能。`java.awt.Graphics`类将被用来从多分辨率图像中检索所需的变体。
- en: 'Here is a quick look at the API:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是API的快速浏览：
- en: '[PRE38]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: As you can see in the preceding code example, the API contains the `getResolutionVariant`
    and `getResolutionVariants` that return an `Image` and a list of images respectively.
    Since `MultiResolutionImage` is an interface, we will need an abstract class to
    implement it.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码示例所示，API包含`getResolutionVariant`和`getResolutionVariants`，分别返回一个`Image`和图像列表。由于`MultiResolutionImage`是一个接口，我们需要一个抽象类来实现它。
- en: Common Locale Data Repository (CLDR)
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见区域数据存储库（CLDR）
- en: Java Enhancement Proposal 252, uses CLDR Locale Data by default, implements
    the decision to use locale data from the Unicode Common Locale Data Repository
    by default. CLDR is a key component of many software applications that supports
    multiple languages. It is touted as the largest locale data repository and is
    used by a plethora of large software providers to include Apple, Google, IBM,
    and Microsoft. The widespread use of CLDR has made it the unofficial industry
    standard repository for locale data. Making this the default repository in the
    Java 9 platform further solidifies it as the software industry standard.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案252，默认使用CLDR区域数据，实现了默认使用Unicode通用区域数据存储库中区域数据的决策。CLDR是许多支持多种语言的软件应用的关键组件。它被誉为最大的区域数据存储库，并被苹果、谷歌、IBM和微软等众多大型软件提供商所使用。CLDR的广泛应用使其成为区域数据的不官方行业标准存储库。在Java
    9平台中将它作为默认存储库进一步巩固了其在软件行业标准中的地位。
- en: 'Interestingly, CLDR was already part of JDK 8, but was not the default library.
    In Java 8, we had to enable CLDR by setting a system property as shown here:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，CLDR已经是JDK 8的一部分，但不是默认库。在Java 8中，我们必须通过设置系统属性来启用CLDR，如下所示：
- en: '[PRE39]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: So, in Java 9, we no longer have to enable CLDR as it will be the default repository.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在Java 9中，我们不再需要启用CLDR，因为它将是默认存储库。
- en: 'There are additional locale data repositories in the Java 9 platform. They
    are listed here in their default lookup order:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9平台中还有其他区域数据存储库。它们按默认查找顺序列在这里：
- en: '**Common Locale Data Repository** (**CLDR**).'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**通用区域数据存储库**（**CLDR**）。'
- en: COMPAT - previously JRE.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: COMPAT - 之前是JRE。
- en: '**Service Provider Interface** (**SPI**).'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**服务提供者接口**（**SPI**）。'
- en: 'To change the lookup order, we can change the `java.locale.providers` setting
    as illustrated:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改查找顺序，我们可以更改`java.locale.providers`设置，如下所示：
- en: '[PRE40]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: In the preceding example, `SPI` would be first, followed by `COMPAT`, and then
    `CLDR`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`SPI`将首先出现，然后是`COMPAT`，最后是`CLDR`。
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on best practices with additional utilities provided
    by the Java 9 platform. Specifically, we covered UTF-8 property files, Unicode
    7.0.0, Linux/AArch64 port, multi-resolution images, and Common Locale Data Repository.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们重点介绍了Java 9平台提供的附加实用工具的最佳实践。具体来说，我们涵盖了UTF-8属性文件、Unicode 7.0.0、Linux/AArch64端口、多分辨率图像和通用区域数据存储库。
- en: In the next chapter, our final chapter, we will look at the future direction
    for the Java platform by looking ahead to what we can expect in Java 10.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，我们的最后一章，我们将通过展望Java 10中我们可以期待的内容来探讨Java平台的未来方向。
