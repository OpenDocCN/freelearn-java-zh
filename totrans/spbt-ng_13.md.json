["```java\nexport enum AntiHeroActions {\n  GET_ANTI_HERO_LIST = '[Anti-Hero] Get Anti-Hero list',\n  SET_ANTI_HERO_LIST = '[Anti-Hero] Set Anti-Hero list',\n  REMOVE_ANTI_HERO_STATE =\n   '[Anti-Hero] Remove ALL Anti-Hero (STATE)',\n}\nexport const removeAntiHeroState = createAction(\n    AntiHeroActions.REMOVE_ANTI_HERO_STATE,\n  props<{ antiHeroId: string }>()\n);\n```", "```java\nexport const antiHeroReducer = createReducer(\n  initialState,\n  on(setAntiHeroList, (state, { antiHeroes }) => { return\n    {...state, antiHeroes}}),\n  on(removeAntiHeroState, (state, { antiHeroId }) => {\n    return {...state, antiHeroes:\n      state.antiHeroes.filter(data => data.id !=\n                              antiHeroId)}\n  }),\n);\n```", "```java\n// See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13 /\nexport class AntiHeroListComponent implements OnInit {\n   // other code for component not displayed\n  @Output() antiHero = new EventEmitter<{antiHero:   AntiHero, action :TableActions}>();\n  selectAntiHero(antiHero: AntiHero, action: TableActions)  {\n    this.antiHero.emit({antiHero, action});\n }\n}\n```", "```java\n// See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13\n<button (click)=\"selectAntiHero(element, 1)\" mat-raised-button color=\"warn\">\n           <mat-icon>delete</mat-icon> Delete\n</button>\n```", "```java\nexport enum TableActions {\n  View,\n   Delete\n}\n```", "```java\n  selectAntiHero(data: {antiHero: AntiHero, action:\n    TableActions}) {\n    switch(data.action) {\n      case TableActions.Delete: {\n        this.store.dispatch({type:\n          AntiHeroActions. REMOVE_ANTI_HERO_STATE,\n          antiHeroId: data.antiHero.id});\n        return;\n      }\n      default: \"\"\n    }\n  }\n```", "```java\n// See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13\n<!-- Dumb component anti hero list -->\n<app-anti-hero-list [antiHeroes]=\"antiHeroes\" (antiHero)=\"selectAntiHero($event)\" [headers]=\"headers\"></app-anti-hero-list>\n```", "```java\nexport enum AntiHeroActions {\n  GET_ANTI_HERO_LIST = '[Anti-Hero] Get Anti-Hero list',\n  SET_ANTI_HERO_LIST = '[Anti-Hero] Set Anti-Hero list',\n  REMOVE_ANTI_HERO_API =\n    '[Anti-Hero] Remove Anti-Hero (API)',\n  REMOVE_ANTI_HERO_STATE =\n    '[Anti-Hero] Remove Anti-Hero (STATE)',\n}\n```", "```java\n // See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13\n removeAntiHero$ = createEffect(() => {\n    return this.actions$.pipe(\n        ofType(AntiHeroActions.REMOVE_ANTI_HERO_API),\n        mergeMap((data: { payload: string}) =>\n          this.antiHeroService.deleteAntiHero(data.payload)\n          .pipe(\n            map(() => ({ type:\n              AntiHeroActions.REMOVE_ANTI_HERO_STATE,\n              antiHeroId: data.payload })),\n            catchError(() => EMPTY)\n          ))\n        )\n    }, {dispatch: true}\n  );\n```", "```java\n selectAntiHero(data: {antiHero: AntiHero, action: TableActions}) {\n    switch(data.action) {\n      case TableActions.Delete: {\n        this. store.dispatch({type:\n          AntiHeroActions.REMOVE_ANTI_HERO_API,\n          payload: data.antiHero.id});\n        return;\n      }\n      default: \"\"\n    }\n  }\n```", "```java\n // See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13\nexport enum AntiHeroActions {\n  GET_ANTI_HERO_LIST = '[Anti-Hero] Get Anti-Hero list',\n  SET_ANTI_HERO_LIST = '[Anti-Hero] Set Anti-Hero list',\n  ADD_ANTI_HERO_API = '[Anti-Hero] Add Anti-Hero (API',\n  ADD_ANTI_HERO_STATE = '[Ant\n    i-Hero] Add Anti-Hero (STATE)',\n  REMOVE_ANTI_HERO_API =\n    '[Anti-Hero] Remove Anti-Hero (API)',\n  REMOVE_ANTI_HERO_STATE =\n    '[Anti-Hero] Remove Anti-Hero (STATE)',\n}\nexport const addAntiHeroState = createAction(\n  AntiHeroActions.ADD_ANTI_HERO_STATE,\n  props<{ antiHero: AntiHero }>()\n)\n```", "```java\n// add anti-heroes to the database\n  addAntiHero$ = createEffect(() =>{\n    return this.actions$.pipe(\n        ofType(AntiHeroActions.ADD_ANTI_HERO_API),\n        mergeMap((data: {type: string, payload: AntiHero})\n          => this.antiHeroService.addAntiHero(data.payload)\n          .pipe(\n            map(antiHeroes => ({ type:\n              AntiHeroActions.ADD_ANTI_HERO_STATE,\n              antiHero: data.payload })),\n            tap(() =>\n              this.router.navigate([\"anti-heroes\"])),\n            catchError(() => EMPTY)\n          ))\n        )\n    }, {dispatch: true})\n```", "```java\nexport const antiHeroReducer = createReducer(\n  initialState,\n  on(setAntiHeroList, (state, { antiHeroes }) => { return\n    {...state, antiHeroes}}),\n  on(removeAntiHeroState, (state, { antiHeroId }) => {\n    return {...state, antiHeroes:\n     state.antiHeroes.filter(data => data.id !=\n       antiHeroId)}\n  }),\n  on(addAntiHeroState, (state, {antiHero}) => {\n    return {...state, antiHeroes: [...state.antiHeroes,\n            antiHero]}\n  }),\n);\n```", "```java\nexport class AntiHeroFormComponent implements OnInit {\n  @Input() actionButtonLabel: string = 'Create';\n  @Output() action = new EventEmitter();\n  form: FormGroup;\n  constructor(private fb: FormBuilder) {\n    this.form = this.fb.group({\n      id: [''],\n      firstName: [''],\n      lastName: [''],\n      house: [''],\n      knownAs: ['']\n    })\n   }\n  emitAction() {\n    this.action.emit({value: this.form.value,\n                      action: this.actionButtonLabel})\n  }\n}\n```", "```java\n// form.component.html\n<app-anti-hero-form [selectedAntiHero]=\"antiHero\" (action)=\"formAction($event)\"></app-anti-hero-form>\n// form.component.ts\n formAction(data: {value: AntiHero, action: string}) {\n    switch(data.action) {\n      case \"Create\" : {\n        this.store.dispatch({type:\n          AntiHeroActions.ADD_ANTI_HERO_API,\n          payload: data.value});\n        return;\n      }\n      default: \"\"\n    }\n  }\n```", "```java\n // See full code on https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-13\nexport enum AntiHeroActions {\n  GET_ANTI_HERO_LIST = '[Anti-Hero] Get Anti-Hero list',\n  SET_ANTI_HERO_LIST = '[Anti-Hero] Set Anti-Hero list',\n  ADD_ANTI_HERO_API = '[Anti-Hero] Add Anti-Hero (API',\n  ADD_ANTI_HERO_STATE =\n    '[Anti-Hero] Add Anti-Hero (STATE)',\n  REMOVE_ANTI_HERO_API =\n    '[Anti-Hero] Remove Anti-Hero (API)',\n  REMOVE_ANTI_HERO_STATE =\n    '[Anti-Hero] Remove Anti-Hero (STATE)',\n  MODIFY_ANTI_HERO_API =\n    '[Anti-Hero] Modify Anti-Hero (API)',\n  MODIFY_ANTI_HERO_STATE =\n    '[Anti-Hero] Modify Anti-Hero (STATE)',\n}\nexport const modifyAntiHeroState = createAction(\n    AntiHeroActions.MODIFY_ANTI_HERO_STATE,\n    props<{ antiHero: AntiHero }>()\n);\n```", "```java\n// modify anti-heroes in the database\n   modifyAntiHero$ = createEffect(() =>{\n    return this.actions$.pipe(\n        ofType(AntiHeroActions.MODIFY_ANTI_HERO_API),\n        mergeMap((data: {type: string, payload: AntiHero})\n          => this.antiHeroService.updateAntiHero(\n          data.payload.id, data.payload)\n          .pipe(\n            map(antiHeroes => ({ type:\n                AntiHeroActions.MODIFY_ANTI_HERO_STATE,\n                antiHero: data.payload })),\n            tap(() =>\n              this.router.navigate([\"anti-heroes\"])),\n            catchError(() => EMPTY)\n          ))\n        )\n    }, {dispatch: true})\n```", "```java\nexport const antiHeroReducer = createReducer(\n  initialState,\n  on(setAntiHeroList, (state, { antiHeroes }) => {\n    return {...state, antiHeroes}}),\n  on(removeAntiHeroState, (state, { antiHeroId }) => {\n    return {...state, antiHeroes:\n      state.antiHeroes.filter(data => data.id !=\n                              antiHeroId)}\n  }),\n  on(addAntiHeroState, (state, {antiHero}) => {\n    return {...state, antiHeroes: [...state.antiHeroes,\n                                   antiHero]}\n  }),\n  on(modifyAntiHeroState, (state, {antiHero}) => {\n    return {...state, antiHeroes: state.antiHeroes.map(data\n      => data.id === antiHero.id ? antiHero : data)}\n  }),\n);\n```", "```java\nexport class AntiHeroFormComponent implements OnInit {\n  @Input() actionButtonLabel: string = 'Create';\n  @Input() selectedAntiHero: AntiHero | null = null;\n  @Output() action = new EventEmitter();\n  form: FormGroup;\n  constructor(private fb: FormBuilder) {\n    this.form = this.fb.group({\n      id: [''],\n      firstName: [''],\n      lastName: [''],\n      house: [''],\n      knownAs: ['']\n    })\n   }\n  ngOnInit(): void {\n    this.checkAction();\n  }\n  checkAction() {\n    if(this.selectedAntiHero) {\n      this.actionButtonLabel = \"Update\";\n      this.patchDataValues()\n    }\n  emitAction() {\n    this.action.emit({value: this.form.value,\n      action: this.actionButtonLabel})\n  }\n}\n```", "```java\n// form.component.html\n<app-anti-hero-form [selectedAntiHero]=\"antiHero\" (action)=\"formAction($event)\"></app-anti-hero-form>\n// form.component.ts\nantiHero$: Observable<AntiHero | undefined>;\n  antiHero: AntiHero | null = null;\n  constructor(private router: ActivatedRoute,\n    private store: Store<AppState>) {\n    const id = this.router.snapshot.params['id'];\n    this.antiHero$ = this.store.select(selectAntiHero(id));\n    this.antiHero$.subscribe(d => {\n      if(d) this.antiHero = d;\n    });\n   }\n formAction(data: {value: AntiHero, action: string}) {\n    switch(data.action) {\n      case \"Create\" : {\n        this.store.dispatch({type:\n          AntiHeroActions.ADD_ANTI_HERO_API,\n          payload: data.value});\n        return;\n      }\n     case \"Update\" : {\n        this.store.dispatch({type:\n          AntiHeroActions.MODIFY_ANTI_HERO_API,\n          payload: data.value});\n        return;\n      }\n      default: \"\"\n    }\n  }\n```"]