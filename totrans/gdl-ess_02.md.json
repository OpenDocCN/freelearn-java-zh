["```java\napply plugin: 'java'\n```", "```java\nhello-java\n├── build.gradle               // build file\n└── src\n └── main\n └── java               // source root\n └── com\n └── packtpub\n └── ge\n └── hello\n ├── GreetingService.java\n └── Main.java \n\n```", "```java\npackage com.packtpub.ge.hello;\n\npublic class GreetingService {\n    public String greet(String user) {\n        return \"Hello \" + user;\n    }\n}\n```", "```java\npackage com.packtpub.ge.hello;\n\npublic class Main {\n    public static void main(String[] args) {\n        GreetingService service = new GreetingService();\n        System.out.println(service.greet(args[0]));\n    }\n}\n```", "```java\n$ gradle compileJava\n\n```", "```java\nhello-java\n...\n├── build\n│   ├── classes\n│   │   └── main\n│   │       └── com\n│   │           └── packtpub\n│   │               └── ge\n│   │                   └── hello\n│   │                       ├── GreetingService.class\n│   │                       └── Main.class\n...\n\n```", "```java\n$ gradle build\n\n```", "```java\nhello-java\n...\n├── build\n│   ...\n│   ├── libs\n│   │   └── hello-java.jar\n...\n\n```", "```java\n$ java -cp build/libs/hello-java.jar \\ com.packtpub.ge.hello.Main Reader\n\n```", "```java\nHello Reader\n\n```", "```java\narchivesBaseName = \"my-app\"\n```", "```java\n$ gradle clean\n\n```", "```java\n$ gradle –q tasks\n------------------------------------------------------------\nAll tasks runnable from root project\n------------------------------------------------------------\n\nBuild tasks\n-----------\nassemble - Assembles the outputs of this project.\nbuild - Assembles and tests this project.\nbuildDependents - Assembles and tests this project and all projects that depend on it.\nbuildNeeded - Assembles and tests this project and all projects it depends on.\nclasses - Assembles main classes.\nclean - Deletes the build directory.\njar - Assembles a jar archive containing the main classes.\ntestClasses - Assembles test classes.\n\nBuild Setup tasks\n-----------------\ninit - Initializes a new Gradle build. [incubating]\nwrapper - Generates Gradle wrapper files. [incubating]\n\nDocumentation tasks\n-------------------\njavadoc - Generates Javadoc API documentation for the main source code.\nHelp tasks\n----------\ncomponents - Displays the components produced by root project 'hello-java'. [incubating]\ndependencies - Displays all dependencies declared in root project 'hello-java'.\ndependencyInsight - Displays the insight into a specific dependency in root project 'hello-java'.\nhelp - Displays a help message.\nmodel - Displays the configuration model of root project 'hello-java'. [incubating]\nprojects - Displays the sub-projects of root project 'hello-java'.\nproperties - Displays the properties of root project 'hello-java'.\ntasks - Displays the tasks runnable from root project 'hello-java'.\n\nVerification tasks\n------------------\ncheck - Runs all checks.\ntest - Runs the unit tests.\n...\n\n```", "```java\n...\nsrc\n└── test\n └── java        // test source root\n └── com\n └── packtpub\n └── ge\n └── hello\n └── GreetingServiceTest.java\n...\n\n```", "```java\npackage com.packtpub.ge.hello;\n\nimport org.junit.Before;\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\n\npublic class GreetingServiceTest {\n\n    GreetingService service;\n\n    @Before\n    public void setup() {\n        service = new GreetingService();\n    }\n\n    @Test\n    public void testGreet() {\n        assertEquals(\"Hello Test\", service.greet(\"Test\"));\n    }\n}\n```", "```java\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.12'\n}\n```", "```java\n$ gradle test\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\nBUILD SUCCESSFUL\n\nTotal time: 1.662 secs\n\n```", "```java\n@Test\npublic void testGreet() {\n    assertEquals(\"Test Hello\", service.greet(\"Guest\"));\n}\n```", "```java\n$ gradle test\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n\ncom.packtpub.ge.hello.GreetingServiceTest > testGreet FAILEDorg.junit.ComparisonFailure at GreetingServiceTest.java:18\n1 test completed, 1 failed\n:test FAILED\n\nFAILURE: Build failed with an exception.\n\n......\n\n```", "```java\n$ gradle build\n\n```", "```java\n$gradle build\n:compileJava UP-TO-DATE\n:processResources UP-TO-DATE\n:classes UP-TO-DATE\n:jar UP-TO-DATE\n:assemble UP-TO-DATE\n:compileTestJava\n:processTestResources UP-TO-DATE\n:testClasses\n:test\n:check\n:build\n\nBUILD SUCCESSFUL\n\nTotal time: 1.617 secs\n\n```", "```java\napply plugin: 'java'\napply plugin: 'application'\n\nmainClassName = \"com.packtpub.ge.hello.Main\"\nrun.args = [\"Reader\"]\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testCompile 'junit:junit:4.11'\n}\n```", "```java\n$ gradle tasks\n...\nApplication tasks\n-----------------\ninstallApp - Installs the project as a JVM application along with libs and OS specific scripts.\nrun - Runs this project as a JVM application\n...\n\nDistribution tasks\n------------------\nassembleDist - Assembles the main distributions\ndistTar - Bundles the project as a distribution.\ndistZip - Bundles the project as a distribution.\ninstallDist - Installs the project as a distribution as-is.\n...\n\n```", "```java\n$ gradle -q run\nHello Reader\n\n```", "```java\n    public String greet(String user) {\n        return \"Hola \" + user;\n    }\n```", "```java\n$ gradle -q run\nHola Reader\n\n```", "```java\n$ gradle –q run Reader\n\n```", "```java\n$ gradle –q clean build\n\n```", "```java\nrun.args = [project.runArgs]\n```", "```java\n$ gradle -q run -PrunArgs=world\n\n```", "```java\n$ gradle distZip\n:compileJava\n:processResources UP-TO-DATE\n:classes\n:jar\n:startScripts\n:distZip\n\nBUILD SUCCESSFUL\n\nTotal time: 1.29 secs\n\n```", "```java\ndistributions.main.baseName = 'someName'\n```", "```java\nhello-app\n├── bin\n│   ├── hello-app\n│   └── hello-app.bat\n└── lib\n └── hello-app.jar\n\n```", "```java\n$ hello-app Reader\nHello Reader\n\n```", "```java\n$ ./hello-app Reader\nHello Reader\n\n```", "```java\n$ gradle eclipse\n$ gradle idea\n\n```", "```java\n.idea/\n*.iml\n*.ipr\n*.iws\n.classpath\n.project\n.settings/\n```"]