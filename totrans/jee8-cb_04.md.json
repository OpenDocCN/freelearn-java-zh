["```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@WebServlet(name = \"LoadOnStartupServlet\", urlPatterns = {\"/LoadOnStartupServlet\"}, \nloadOnStartup = 1)\npublic class LoadOnStartupServlet extends HttpServlet {\n\n    @Override\n    public void init() throws ServletException {\n        System.out.println(\"*******SERVLET LOADED \n                           WITH SERVER's STARTUP*******\");\n    }\n\n}\n```", "```java\n@WebServlet(name = \"InitConfigServlet\", urlPatterns = {\"/InitConfigServlet\"}, \n        initParams = {\n                @WebInitParam(name = \"key1\", value = \"value1\"),\n                @WebInitParam(name = \"key2\", value = \"value2\"),\n                @WebInitParam(name = \"key3\", value = \"value3\"),\n                @WebInitParam(name = \"key4\", value = \"value4\"),\n                @WebInitParam(name = \"key5\", value = \"value5\")\n        }\n)\npublic class InitConfigServlet extends HttpServlet {\n\n    Map<String, String> param = new HashMap<>();\n\n    @Override\n    protected void doPost(HttpServletRequest req, \n    HttpServletResponse resp)   \n    throws ServletException, IOException {\n        doProcess(req, resp);\n    }\n\n    @Override\n    protected void doGet(HttpServletRequest req, \n    HttpServletResponse resp) \n    throws ServletException, IOException {\n        doProcess(req, resp);\n    }\n\n    private void doProcess(HttpServletRequest req, \n    HttpServletResponse resp) \n    throws IOException{\n        resp.setContentType(\"text/html\");\n        PrintWriter out = resp.getWriter();\n\n        if (param.isEmpty()){\n            out.println(\"No params to show\");\n        } else{\n            param.forEach((k,v) -> out.println(\"param: \" + k + \", \n                                        value: \" + v + \"<br />\"));\n        }\n    }\n\n    @Override\n    public void init(ServletConfig config) throws ServletException {\n        System.out.println(\"init\");\n        List<String> list = \n        Collections.list(config.getInitParameterNames());\n        list.forEach((key) -> {\n            param.put(key, config.getInitParameter(key));\n        });\n    }\n\n}\n```", "```java\n@WebServlet(urlPatterns = \"/AsyncServlet\", asyncSupported = true)\npublic class AsyncServlet extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    protected void doGet(HttpServletRequest request,\n            HttpServletResponse response) throws ServletException, \n            IOException {\n\n        long startTime = System.currentTimeMillis();\n        System.out.println(\"AsyncServlet Begin, Name=\"\n                + Thread.currentThread().getName() + \", ID=\"\n                + Thread.currentThread().getId());\n\n        String time = request.getParameter(\"timestamp\");\n        AsyncContext asyncCtx = request.startAsync();\n\n        asyncCtx.start(() -> {\n            try {\n                Thread.sleep(Long.valueOf(time));\n                long endTime = System.currentTimeMillis();\n                long timeElapsed = endTime - startTime;\n                System.out.println(\"AsyncServlet Finish, Name=\"\n                        + Thread.currentThread().getName() + \", ID=\"\n                        + Thread.currentThread().getId() + \", Duration=\"\n                        + timeElapsed + \" milliseconds.\");\n\n                asyncCtx.getResponse().getWriter().write\n                (\"Async process time: \" + timeElapsed + \" milliseconds\");\n                asyncCtx.complete();\n            } catch (InterruptedException | IOException ex) {\n                System.err.println(ex.getMessage());\n            }\n        });\n    }\n}\n```", "```java\n<body>\n    <a href=\"${pageContext.request.contextPath}/InitConfigServlet\">\n    InitConfigServlet</a>\n    <br />\n    <br />\n    <form action=\"${pageContext.request.contextPath}/AsyncServlet\" \n     method=\"GET\">\n        <h2>AsyncServlet</h2>\n        Milliseconds\n        <br />\n        <input type=\"number\" id=\"timestamp\" name=\"timestamp\" \n        style=\"width: 200px\" value=\"5000\"/>\n        <button type=\"submit\">Submit</button>\n    </form>\n\n</body>\n```", "```java\n@WebServlet(name = \"InitConfigServlet\", urlPatterns = \n{\"/InitConfigServlet\"}, \n        initParams = {\n                @WebInitParam(name = \"key1\", value = \"value1\"),\n                @WebInitParam(name = \"key2\", value = \"value2\"),\n                @WebInitParam(name = \"key3\", value = \"value3\"),\n                @WebInitParam(name = \"key4\", value = \"value4\"),\n                @WebInitParam(name = \"key5\", value = \"value5\")\n        }\n)\n```", "```java\n@WebServlet(urlPatterns = \"/AsyncServlet\", asyncSupported = true)\n```", "```java\nAsyncContext asyncCtx = request.startAsync();\n```", "```java\nasyncCtx.start(() -> {...\n```", "```java\n                asyncCtx.getResponse().getWriter().write(\"Async \n                process time: \" \n                + timeElapsed + \" milliseconds\");\n                asyncCtx.complete();\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n<h:body>\n    <div id=\"layout\">\n        <div id=\"header\">\n            <ui:insert name=\"header\" >\n                <ui:include src=\"img/header.xhtml\" />\n            </ui:insert>\n        </div>\n        <div id=\"content\">\n            <ui:insert name=\"content\" >\n                <ui:include src=\"img/content.xhtml\" />\n            </ui:insert>\n        </div>\n        <div id=\"footer\">\n            <ui:insert name=\"footer\" >\n                <ui:include src=\"img/footer.xhtml\" />\n            </ui:insert>\n        </div>\n    </div>\n</h:body>\n```", "```java\n<body>\n    <h1>Template header</h1>\n</body>\n```", "```java\n<body>\n   <h1>Template content</h1>\n</body>\n```", "```java\n<body>\n   <h1>Template content</h1>\n</body>\n```", "```java\n<h:body>\n    <ui:composition template=\"WEB-INF/template/layout.xhtml\">\n\n    </ui:composition>\n</h:body>\n```", "```java\n<h:body>\n    <ui:composition template=\"/template/layout.xhtml\">\n        <ui:define name=\"content\">\n            <h1><p style=\"color:red\">User content. Timestamp: #\n            {userBean.timestamp}</p></h1>\n        </ui:define>\n    </ui:composition>\n</h:body>\n```", "```java\n@Named\n@RequestScoped\npublic class UserBean implements Serializable{\n\n    public Long getTimestamp(){\n        return new Date().getTime();\n    }\n\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n       xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n       http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n       bean-discovery-mode=\"all\">\n</beans>\n```", "```java\n<ui:composition template=\"/template/layout.xhtml\">\n    <ui:define name=\"content\">\n        <h1><font color=\"red\">User content. Timestamp: #\n            {userBean.timestamp}\n        </font></h1>\n    </ui:define>\n</ui:composition>\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@WebServlet(name = \"ServerPushServlet\", urlPatterns = \n{\"/ServerPushServlet\"})\npublic class ServerPushServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n        doRequest(request, response);\n    }\n\n    private void doRequest(HttpServletRequest request,\n    HttpServletResponse response) throws IOException{\n        String usePush = request.getParameter(\"usePush\");\n\n        if (\"true\".equalsIgnoreCase(usePush)){\n            PushBuilder pb = request.newPushBuilder();\n            if (pb != null) {\n                for(int row=0; row < 5; row++){\n                    for(int col=0; col < 8; col++){\n                        pb.path(\"image/keyboard_buttons/keyboard_buttons-\" \n                                + row + \"-\" + col + \".jpeg\")\n                          .addHeader(\"content-type\", \"image/jpeg\")\n                          .push();\n                    }\n                }\n            }\n        }\n\n        try (PrintWriter writer = response.getWriter()) {\n            StringBuilder html = new StringBuilder();\n            html.append(\"<html>\");\n            html.append(\"<center>\");         \n            html.append(\"<table cellspacing='0' cellpadding='0'\n                         border='0'>\");\n\n            for(int row=0; row < 5; row++){\n                html.append(\" <tr>\");\n                for(int col=0; col < 8; col++){\n                    html.append(\" <td>\");\n                    html.append(\"<img \n                    src='image/keyboard_buttons/keyboard_buttons-\" +\n                         row + \"-\" + col + \".jpeg' style='width:100px;   \n                         height:106.25px;'>\"); \n                    html.append(\" </td>\"); \n                }\n                html.append(\" </tr>\"); \n            }\n\n            html.append(\"</table>\");            \n            html.append(\"<br>\");\n\n            if (\"true\".equalsIgnoreCase(usePush)){\n                html.append(\"<h2>Image pushed by ServerPush</h2>\");\n            } else{\n                html.append(\"<h2>Image loaded using HTTP/1.0</h2>\");\n            }\n\n            html.append(\"</center>\");\n            html.append(\"</html>\");\n            writer.write(html.toString());\n        }\n    }\n\n}\n```", "```java\n<body>\n    <a href=\"ServerPushServlet?usePush=true\">Use HTTP/2.0 (ServerPush)</a>\n    <br />\n    <a href=\"ServerPushServlet?usePush=false\">Use HTTP/1.0</a>\n</body>\n```", "```java\n            PushBuilder pb = request.newPushBuilder();\n            if (pb != null) {\n                for(int row=0; row < 5; row++){\n                    for(int col=0; col < 8; col++){\n                        pb.path(\"image/keyboard_buttons/keyboard_buttons-\" \n                                + row + \"-\" + col + \".jpeg\")\n                          .addHeader(\"content-type\", \"image/jpeg\")\n                          .push();\n                    }\n                }\n            }\n```", "```java\nif (pb != null) {\n   ...\n}\n```"]