["```java\n        public class FileSearch implements Runnable { \n\n```", "```java\n        private String initPath; \n        private String end; \n\n```", "```java\n        private List<String> results; \n\n```", "```java\n        public FileSearch(String initPath, String end) { \n          this.initPath = initPath; \n          this.end = end; \n          results=new ArrayList<>(); \n        } \n\n```", "```java\n        public List<String> getResults() { \n          return results; \n        } \n\n```", "```java\n        @Override \n        public void run() { \n          System.out.printf(\"%s: Starting\\n\",\n                            Thread.currentThread().getName()); \n\n```", "```java\n        File file = new File(initPath); \n          if (file.isDirectory()) { \n            directoryProcess(file); \n          } \n\n```", "```java\n        private void directoryProcess(File file) { \n          File list[] = file.listFiles(); \n\n```", "```java\n        if (list != null) { \n          for (int i = 0; i < list.length; i++) { \n            if (list[i].isDirectory()) { \n              directoryProcess(list[i]); \n            } else { \n              fileProcess(list[i]); \n            } \n          } \n        } \n\n```", "```java\n        private void fileProcess(File file) { \n          if (file.getName().endsWith(end)) { \n            results.add(file.getAbsolutePath()); \n          } \n        } \n\n```", "```java\n        public class Task extends FutureTask<List<String>> { \n\n```", "```java\n        private FileSearch fileSearch; \n\n```", "```java\n        public Task(Runnable runnable, List<String> result) { \n          super(runnable, result); \n          this.fileSearch=(FileSearch)runnable; \n        } \n\n```", "```java\n        @Override \n        protected void set(List<String> v) { \n\n```", "```java\n        v=fileSearch.getResults();     \n\n```", "```java\n        super.set(v); \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n\n```", "```java\n        ExecutorService executor = Executors.newCachedThreadPool(); \n\n```", "```java\n        FileSearch system=new FileSearch(\"C:\\\\Windows\", \"log\"); \n        FileSearch apps=new FileSearch(\"C:\\\\Program Files\",\"log\"); \n        FileSearch documents=new FileSearch(\"C:\\\\Documents And\n                                             Settings\",\"log\"); \n\n```", "```java\n        Task systemTask=new Task(system,null); \n        Task appsTask=new Task(apps,null); \n        Task documentsTask=new Task(documents,null); \n\n```", "```java\n        executor.submit(systemTask); \n        executor.submit(appsTask); \n        executor.submit(documentsTask); \n\n```", "```java\n        executor.shutdown(); \n\n```", "```java\n        try { \n          executor.awaitTermination(1, TimeUnit.DAYS); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } \n\n```", "```java\n        try { \n          System.out.printf(\"Main: System Task: Number of Results: %d\\n\",\n                            systemTask.get().size()); \n          System.out.printf(\"Main: App Task: Number of Results: %d\\n\",\n                            appsTask.get().size()); \n          System.out.printf(\"Main: Documents Task: Number of \n                             Results: %d\\n\",documentsTask.get().size()); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } catch (ExecutionException e) { \n          e.printStackTrace(); \n        } \n\n```", "```java\n        public class AlwaysThrowsExceptionWorkerThread extends\n                                ForkJoinWorkerThread { \n\n```", "```java\n        protected AlwaysThrowsExceptionWorkerThread(ForkJoinPool pool) { \n          super(pool); \n        } \n\n```", "```java\n        protected void onStart() { \n          super.onStart(); \n          throw new RuntimeException(\"Exception from worker thread\"); \n        } \n\n```", "```java\n        public class AlwaysThrowsExceptionWorkerThreadFactory implements\n                                 ForkJoinWorkerThreadFactory {  \n\n```", "```java\n        @Override \n        public ForkJoinWorkerThread newThread(ForkJoinPool pool) { \n          return new AlwaysThrowsExceptionWorkerThread(pool); \n        } \n\n```", "```java\n        public class Handler implements UncaughtExceptionHandler { \n\n```", "```java\n        @Override \n        public void uncaughtException(Thread t, Throwable e) { \n          System.out.printf(\"Handler: Thread %s has thrown an\n                             Exception.\\n\",t.getName()); \n          System.out.printf(\"%s\\n\",e); \n          System.exit(-1); \n        } \n\n```", "```java\n        public class OneSecondLongTask extends RecursiveAction{ \n\n```", "```java\n        @Override \n        protected void compute() { \n          System.out.printf(\"Task: Starting.\\n\"); \n          try { \n            TimeUnit.SECONDS.sleep(1); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n          System.out.printf(\"Task: Finish.\\n\"); \n        } \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n\n```", "```java\n        OneSecondLongTask task=new OneSecondLongTask(); \n\n```", "```java\n        Handler handler = new Handler(); \n\n```", "```java\n        AlwaysThrowsExceptionWorkerThreadFactory factory=new\n                            AlwaysThrowsExceptionWorkerThreadFactory(); \n\n```", "```java\n        ForkJoinPool pool=new ForkJoinPool(2,factory,handler,false); \n\n```", "```java\n        pool.execute(task); \n\n```", "```java\n        pool.shutdown(); \n\n```", "```java\n        try { \n          pool.awaitTermination(1, TimeUnit.DAYS); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } \n\n```", "```java\n         System.out.printf(\"Task: Finish.\\n\"); \n\n```", "```java\n        System.exit(-1); \n\n```", "```java\n        public class Producer implements Runnable { \n\n```", "```java\n        private LinkedTransferQueue<String> buffer; \n\n```", "```java\n        private String name; \n\n```", "```java\n        public Producer(String name, LinkedTransferQueue<String> buffer){ \n          this.name=name; \n          this.buffer=buffer; \n        } \n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<10000; i++) { \n            buffer.put(name+\": Element \"+i); \n          } \n          System.out.printf(\"Producer: %s: Producer done\\n\",name); \n        } \n\n```", "```java\n        public class Consumer implements Runnable { \n\n```", "```java\n        private LinkedTransferQueue<String> buffer; \n\n```", "```java\n        private String name; \n\n```", "```java\n        public Consumer(String name, LinkedTransferQueue<String> buffer){ \n          this.name=name; \n          this.buffer=buffer; \n        } \n\n```", "```java\n        @Override \n        public void run() { \n          for (int i=0; i<10000; i++){ \n            try { \n              buffer.take(); \n            } catch (InterruptedException e) { \n              e.printStackTrace(); \n            } \n          } \n          System.out.printf(\"Consumer: %s: Consumer done\\n\",name); \n        } \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n\n```", "```java\n        final int THREADS=100; \n        LinkedTransferQueue<String> buffer=new LinkedTransferQueue<>(); \n\n```", "```java\n        Thread producerThreads[]=new Thread[THREADS]; \n\n```", "```java\n        Thread consumerThreads[]=new Thread[THREADS]; \n\n```", "```java\n        for (int i=0; i<THREADS; i++){ \n          Consumer consumer=new Consumer(\"Consumer \"+i,buffer); \n          consumerThreads[i]=new Thread(consumer); \n          consumerThreads[i].start(); \n        } \n\n```", "```java\n        for (int i=0; i<THREADS; i++) { \n          Producer producer=new Producer(\"Producer: \"+ i , buffer); \n          producerThreads[i]=new Thread(producer); \n          producerThreads[i].start(); \n        } \n\n```", "```java\n        for (int i=0; i<THREADS; i++){ \n          try { \n            producerThreads[i].join(); \n            consumerThreads[i].join(); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n        } \n\n```", "```java\n        System.out.printf(\"Main: Size of the buffer: %d\\n\",\n                          buffer.size()); \n        System.out.printf(\"Main: End of the example\\n\"); \n\n```", "```java\n        public class Task implements Runnable { \n\n```", "```java\n        @Override \n        public void run() { \n\n```", "```java\n        for (int i=0; i<100; i++) { \n\n```", "```java\n        try { \n          TimeUnit.MILLISECONDS.sleep(100); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } \n\n```", "```java\n              System.out.printf(\"%s: %d\\n\",Thread.currentThread()\n                                                  .getName(),i);      \n            } \n          } \n        } \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) throws Exception{ \n\n```", "```java\n        Task task = new Task(); \n\n```", "```java\n        Thread threads[] = new Thread[5]; \n\n```", "```java\n        for (int i = 0; i < 5; i++) { \n          threads[i] = new Thread(task); \n          threads[i].setPriority(i + 1); \n          threads[i].start(); \n        } \n\n```", "```java\n        for (int j = 0; j < 10; j++) { \n          System.out.printf(\"Main: Logging threads\\n\"); \n          for (int i = 0; i < threads.length; i++) { \n\n```", "```java\n        System.out.printf(\"**********************\\n\"); \n        System.out.printf(\"Main: %d: Id: %d Name: %s: Priority: %d\\n\",i,\n                          threads[i].getId(),threads[i].getName(),\n                          threads[i].getPriority()); \n        System.out.printf(\"Main: Status: %s\\n\",threads[i].getState()); \n        System.out.printf(\"Main: Thread Group: %s\\n\",\n                          threads[i].getThreadGroup()); \n        System.out.printf(\"Main: Stack Trace: \\n\"); \n\n```", "```java\n          for (int t=0; t<threads[i].getStackTrace().length; t++) { \n            System.out.printf(\"Main: %s\\n\",threads[i].getStackTrace()\n                              [t]); \n          } \n          System.out.printf(\"**********************\\n\"); \n        } \n\n```", "```java\n              TimeUnit.SECONDS.sleep(1); \n            } \n          } \n        } \n\n```", "```java\n        public class Task implements Runnable { \n\n```", "```java\n        private final Semaphore semaphore; \n\n```", "```java\n        public Task(Semaphore semaphore){ \n          this.semaphore=semaphore; \n        } \n\n```", "```java\n        @Override \n        public void run() { \n          try { \n            semaphore.acquire(); \n            System.out.printf(\"%s: Get the semaphore.\\n\",\n                              Thread.currentThread().getName()); \n\n```", "```java\n          TimeUnit.SECONDS.sleep(2); \n          System.out.println(Thread.currentThread().getName()+\":\n                             Release the semaphore.\"); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } finally { \n          semaphore.release();       \n        } \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) throws Exception { \n\n```", "```java\n        Semaphore semaphore=new Semaphore(3); \n\n```", "```java\n        Thread threads[]=new Thread[10]; \n\n```", "```java\n        for (int i=0; i<threads.length; i++) { \n          Task task=new Task(semaphore); \n          threads[i]=new Thread(task); \n          threads[i].start(); \n\n          TimeUnit.MILLISECONDS.sleep(200); \n\n          showLog(semaphore); \n        } \n\n```", "```java\n          for (int i=0; i<5; i++) { \n            showLog(semaphore); \n            TimeUnit.SECONDS.sleep(1); \n          } \n        } \n\n```", "```java\n        private static void showLog(Semaphore semaphore) { \n          System.out.printf(\"********************\\n\"); \n          System.out.printf(\"Main: Semaphore Log\\n\"); \n          System.out.printf(\"Main: Semaphore: Avalaible Permits: %d\\n\",\n                            semaphore.availablePermits()); \n          System.out.printf(\"Main: Semaphore: Queued Threads: %s\\n\",\n                            semaphore.hasQueuedThreads()); \n          System.out.printf(\"Main: Semaphore: Queue Length: %d\\n\",\n                            semaphore.getQueueLength()); \n          System.out.printf(\"Main: Semaphore: Fairness: %s\\n\",\n                            semaphore.isFair()); \n          System.out.printf(\"********************\\n\"); \n        } \n\n```", "```java\n        public class TaskLocalRandom implements Runnable { \n\n```", "```java\n        @Override \n        public void run() { \n          String name=Thread.currentThread().getName(); \n          for (int i=0; i<10; i++){ \n            System.out.printf(\"%s: %d\\n\",name,\n                              ThreadLocalRandom.current().nextInt(10)); \n          } \n        } \n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n\n```", "```java\n        Thread threads[]=new Thread[3]; \n\n```", "```java\n        for (int i=0; i<3; i++) { \n          TaskLocalRandom task=new TaskLocalRandom(); \n          threads[i]=new Thread(task); \n          threads[i].start(); \n        } \n\n```"]