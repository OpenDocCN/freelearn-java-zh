["```java\ndocker run -it --rm ubuntu \n```", "```java\ncat /etc/os-release | grep 'VERSION=' \n```", "```java\ndocker rm -f $(docker ps -aq) \n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i eclipse-temurin:17 jshell -q \n```", "```java\necho 'Runtime.getRuntime().availableProcessors()' | docker run --rm -i --cpus=3 eclipse-temurin:17 jshell -q \n```", "```java\ndocker run -it --rm eclipse-temurin:17 java -XX:+PrintFlagsFinal | grep \"size_t MaxHeapSize\" \n```", "```java\ndocker run -it --rm -m=1024M eclipse-temurin:17 java -XX:+PrintFlagsFinal | grep \"size_t MaxHeapSize\" \n```", "```java\ndocker run -it --rm -m=1024M eclipse-temurin:17 java -Xmx600m -XX:+PrintFlagsFinal -version | grep \"size_t MaxHeapSize\" \n```", "```java\necho 'new byte[100_000_000]' | docker run -i --rm -m=1024M eclipse-temurin:17 jshell -q \n```", "```java\necho 'new byte[500_000_000]' | docker run -i --rm -m=1024M eclipse-temurin:17 jshell -q \n```", "```java\n---\nspring.config.activate.on-profile: docker\nserver.port: 8080 \n```", "```java\nFROM **openjdk:****17**\nEXPOSE **8080**\nADD **./build/libs/*.jar app.jar**\nENTRYPOINT **[****\"java\"****,****\"-jar\"****,****\"/app.jar\"****]** \n```", "```java\n**FROM** **eclipse-temurin:17.0.5_8-jre-focal as builder**\nWORKDIR extracted\nADD ./build/libs/*.jar app.jar\nRUN java -Djarmode=layertools -jar app.jar extract\n**FROM** **eclipse-temurin:17.0.5_8-jre-focal**\nWORKDIR application\nCOPY --from=builder extracted/dependencies/ ./\nCOPY --from=builder extracted/spring-boot-loader/ ./\nCOPY --from=builder extracted/snapshot-dependencies/ ./\nCOPY --from=builder extracted/application/ ./\nEXPOSE 8080\nENTRYPOINT [\"java\", \"org.springframework.boot.loader.JarLauncher\"] \n```", "```java\n    FROM eclipse-temurin:17.0.5_8-jre-focal as builder \n    ```", "```java\n    FROM eclipse-temurin:17.0.5_8-jre-focal \n    ```", "```java\ncd $BOOK_HOME/Chapter04\n./gradlew :microservices:product-service:build \n```", "```java\ncd microservices/product-service\ndocker build -t product-service . \n```", "```java\ndocker images | grep product-service \n```", "```java\ndocker run --rm -p8080:8080 -e \"SPRING_PROFILES_ACTIVE=docker\" product-service \n```", "```java\ncurl localhost:8080/product/3 \n```", "```java\ndocker ps \n```", "```java\ndocker run -d -p8080:8080 -e \"SPRING_PROFILES_ACTIVE=docker\" --name my-prd-srv product-service \n```", "```java\ndocker logs my-prd-srv -f \n```", "```java\ndocker rm -f my-prd-srv \n```", "```java\n---\n**spring.config.activate.on-profile:****docker**\nserver.port: 8080\napp:\n  product-service:\n    host: product\n    port: 8080\n  recommendation-service:\n    host: recommendation\n    port: 8080\n  review-service:\n    host: review\n    port: 8080 \n```", "```java\nversion: '2.1'\nservices:\n  product:\n    build: microservices/product-service\n    mem_limit: 512m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n  recommendation:\n    build: microservices/recommendation-service\n    mem_limit: 512m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n  review:\n    build: microservices/review-service\n    mem_limit: 512m\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker\n  product-composite:\n    build: microservices/product-composite-service\n    mem_limit: 512m\n    ports:\n      - \"8080:8080\"\n    environment:\n      - SPRING_PROFILES_ACTIVE=docker \n```", "```java\n    cd $BOOK_HOME/Chapter04\n    ./gradlew build\n    docker-compose build \n    ```", "```java\n    docker images | grep chapter04 \n    ```", "```java\n    docker-compose up -d \n    ```", "```java\ndocker-compose logs -f \n```", "```java\ncurl localhost:8080/product-composite/123 -s | jq . \n```", "```java\ndocker-compose down \n```", "```java\nif [[ $@ == *\"start\"* ]]\nthen\n    echo \"Restarting the test environment...\"\n    echo \"$ docker-compose down --remove-orphans\"\n    docker-compose down --remove-orphans\n    echo \"$ docker-compose up -d\"\n    docker-compose up -d\nfi \n```", "```java\nwaitForService http://$HOST:${PORT}/product-composite/1 \n```", "```java\nfunction testUrl() {\n    url=$@\n    if curl $url -ks -f -o /dev/null\n    then\n          return 0\n    else\n          return 1\n    fi;\n}\n**function****waitForService****() {**\n    url=$@\n    echo -n \"Wait for: $url... \"\n    n=0\n    until testUrl $url\n    do\n        n=$((n + 1))\n        if [[ $n == 100 ]]\n        then\n            echo \" Give up\"\n            exit 1\n        else\n            sleep 3\n            echo -n \", retry #$n \"\n        fi\n    done\n    echo \"DONE, continues...\"\n} \n```", "```java\nif [[ $@ == *\"stop\"* ]]\nthen\n    echo \"We are done, stopping the test environment...\"\n    echo \"$ docker-compose down\"\n    docker-compose down\nfi \n```", "```java\n./test-em-all.bash start stop \n```", "```java\n    docker-compose ps \n    ```", "```java\n    docker-compose logs product \n    ```", "```java\n    docker-compose restart product \n    ```", "```java\n    docker-compose up -d --scale product=1 \n    ```", "```java\n    docker system prune -f --volumes \n    ```", "```java\n    ./test-em-all.bash \n    ```", "```java\n    docker-compose down \n    ```", "```java\n./gradlew clean build && docker-compose build && ./test-em-all.bash start stop \n```", "```java\n     review:\n        build: microservices/review-service\n        ports:\n          - \"8080:8080\"\n        environment:\n          - SPRING_PROFILES_ACTIVE=docker\n      product-composite:\n        build: microservices/product-composite-service\n        ports:\n          - \"8080:8080\"\n        environment:\n          - SPRING_PROFILES_ACTIVE=docker \n    ```"]