["```java\npublic class Calculation {\n    public void loanCalculator(FinancialData data) {\n        var monthlyPayment = data.getPrincipalAmount() *\n           (data.getMonthlyInterestRate() / (1 - Math.pow(\n           (1 + data.getMonthlyInterestRate()), -\n           data.getMonthlyPeriods())));\n        data.setMonthlyPayment(monthlyPayment);\n    }\n}\n```", "```java\npublic class Calculation2 extends Calculation {\n    public void futureValueCalculator(FinancialData data) {\n        var futureValue = data.getMonthlyPayment() *\n            ((1 - Math.pow(\n            (1 + data.getMonthlyInterestRate()),\n            data.getMonthlyPeriods())) /\n            data.getMonthlyInterestRate());\n        data.setPrincipalAmount(futureValue);\n    }\n    public void savingsGoalCalculator(FinancialData data) {\n        double monthlyPayment = data.getPrincipalAmount() *\n            (data.getMonthlyInterestRate() /\n            (1 - Math.pow(\n            (1 + data.getMonthlyInterestRate()),\n            data.getMonthlyPeriods())));\n        data.setMonthlyPayment(monthlyPayment);\n    }\n}\n```", "```java\npublic interface FinanceCalculate {\n    void determine(FinancialData data);\n}\n```", "```java\n public class FutureValue implements FinanceCalculate {\n    @Override\n    public void determine(FinancialData data) {\n        var futureValue = data.getMonthlyPayment() *\n           ((1 - Math.pow(\n           (1 + data.getMonthlyInterestRate()),\n           data.getMonthlyPeriods())) /\n           data.getMonthlyInterestRate());\n        data.setPrincipalAmount(futureValue);\n    }\n}\n```", "```java\npublic class BankingServices {\n    public void doCalculation(FinanceCalculate process,\n                              FinancialData data) {\n        process.determine(data);\n    }\n}\n```", "```java\npublic class SuperClass {\n    public void display(String name) {\n        System.out.printf(\"Welcome %s%n\", name);\n    }\n}\n```", "```java\npublic class SubClass extends SuperClass {\n    @Override\n    public void display(String name) {\n        System.out.printf(\"Welcome to Java %s%n\", name);\n    }\n}\n```", "```java\npublic class Liskov {\n    public void doDisplay(SuperClass sc) {\n        sc.display(\"Ken\");\n    }\n    public static void main(String[] args) {\n        new Liskov().doDisplay(new SuperClass());\n    }\n}\n```", "```java\nWelcome Ken\n```", "```java\n        new Liskov().doDisplay(new SubClass());\n```", "```java\nWelcome to Java Ken\n```", "```java\npublic class SubClass extends SuperClass {\n    public void display(String name, int age) {\n        System.out.printf(\"Welcome to Java %s at age %d%n\",\n                           name, age);\n    }\n}\n```", "```java\npublic interface Delivery {\n    void doPackageSize(int length, int height, int width);\n    void doDeliveryCharge();\n}\n```", "```java\npublic class Courier implements Delivery {\n    private double packageSize;\n    private double charge;\n    @Override\n    public void doPackageSize(int length, int height,\n                                            int width) {\n       packageSize = length * width * width;\n    }\n    @Override\n    public void doDeliveryCharge() {\n        if (packageSize < 5) {\n            charge = 2.0;\n        } else if (packageSize < 10 ) {\n            charge = 4.0;\n        } else {\n            charge = 10.0;        }\n    }\n}\n```", "```java\npublic interface AirDelivery extends Delivery {\n    boolean isHazardous();\n}\n```", "```java\npublic class Bread {\n    private String description;\n    private int stockAmount;\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public int getStockAmount() {\n        return stockAmount;\n    }\n    public void setStockAmount(int stockAmount) {\n        this.stockAmount = stockAmount;\n    }\n}\n```", "```java\npublic class Milk {\n    private String description;\n    private int stockAmount;\n    public String getDescription() {\n        return description;\n    }\n    public void setDescription(String description) {\n        this.description = description;\n    }\n    public int getStockAmount() {\n        return stockAmount;\n    }\n    public void setStockAmount(int stockAmount) {\n        this.stockAmount = stockAmount;\n    }\n}\n```", "```java\npublic class MilkReport {\n    private final Milk milkData;\n    public MilkReport(Milk data) {\n        milkData = data;\n    }\n    public void displayReport() {\n        System.out.printf(\"Description: %s  Stock: %d%n\",\n            milkData.getDescription(),\n            milkData.getStockAmount());\n    }\n}\n```", "```java\npublic interface Inventory {\n    public String getDescription();\n    public void setDescription(String description);\n    public int getStockAmount();\n    public void setStockAmount(int stockAmount);\n}\n```", "```java\npublic class MilkDI implements Inventory{ . . . }\npublic class BreadDI implements Inventory{ . . . }\n```", "```java\npublic class InventoryReport {\n    private final Inventory inventoryData;\n    public InventoryReport(Inventory data) {\n        inventoryData = data;\n    }\n    public void displayReport() {\n        System.out.printf(\"Description: %s  Stock: %d%n\",\n            inventoryData.getDescription(),\n            inventoryData.getStockAmount() );\n    }\n}\n```", "```java\npublic class SingletonSafe {\n```", "```java\n    private static Singleton instance;\n```", "```java\n    private Singleton() {}\n```", "```java\n    public static Singleton getInstance() {\n        if (instance == null) {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n}\n```", "```java\npublic class SingletonExample {\n    public void perform() {\n```", "```java\n        var myInstance1 = Singleton.getInstance();\n        var myInstance2 = Singleton.getInstance();\n```", "```java\n        if (myInstance1 == myInstance2) {\n            System.out.printf(\n               \"Objects are the same%n\");\n        } else {\n            System.out.printf(\n              \" Objects are different%n\");\n        }\n    }\n    public static void main(String[] args) {\n        new SingletonExample().perform ();\n    }\n}\n```", "```java\n    public static Singleton getInstance() {\n```", "```java\n        synchronized (Singleton.class) {\n            if (instance == null) {\n                instance = new Singleton();\n            }\n        }\n        return instance;\n    }\n```", "```java\npublic interface SharedInterface {\n    String whatAmI();\n    void perform();\n}\n```", "```java\npublic class Version01 implements SharedInterface{\n    @Override\n    public String whatAmI() {\n        return \"Version 01\";\n    }\n    @Override\n    public void perform() {\n        System.out.printf(\"Running perform in Version 01\");\n    }\n}\npublic class Version02 implements SharedInterface {\n    @Override\n    public String whatAmI() {\n        return \"Version 02\";\n    }\n    @Override\n    public void perform() {\n        System.out.printf(\"Running perform in Version 02\");\n    }\n}\n```", "```java\npublic class Factory {\n    public static SharedInterface getInstance(\n                                 String designator) {\n```", "```java\n        return switch (designator) {\n            case \"version01\" -> new Version01();\n            case \"version02\" -> new Version02();\n            default -> null;\n        };\n    }\n}\n```", "```java\npublic class FactoryExample {\n```", "```java\n    private SharedInterface version;\n    public void perform(String versionName) {\n```", "```java\n        version = Factory.getInstance(versionName);\n        System.out.printf(\n            \"Version: %s%n\",version.whatAmI());\n        version.perform();\n    }\n    public static void main(String[] args) {\n        new FactoryExample().perform(\"version02\");\n    }\n}\n```", "```java\npublic interface USFuelConsumption {\n    String calculateUS(double distance, double volume);\n}\npublic class USCar implements USFuelConsumption {\n    @Override\n    public String calculateUS(double distance,\n                                   double volume) {\n        return \"MPG = \" + distance/volume;\n    }\n}\n```", "```java\npublic class AdapterExample {\n    private USFuelConsumption consumption;\n    public AdapterExample() {\n        consumption = new USCar();\n    }\n    public void perform() {\n        System.out.printf(\n              \"%s%n\",consumption.calculateUS(350.0, 12.0));\n    }\n    public static void main(String[] args) {\n        new AdapterExample().perform();\n    }\n}\n```", "```java\nMPG = 29.166666666666668\n```", "```java\npublic interface MetricFuelConsumptions {\n    String calculateMetric(double distance, double volume);\n}\npublic class MetricCar implements MetricFuelConsumptions {\n    @Override\n    public String calculateMetric(double distance,\n                                     double volume) {\n        return \"l/100km = \" + volume/distance * 100;\n    }\n}\n```", "```java\npublic class UstoMetricAdapter implements USFuelConsumption {\n    private final MetricCar metric;\n    public UstoMetricAdapter() {\n        metric = new MetricCar();\n    }\n```", "```java\n    @Override\n    public String calculateUS(double distance,\n                                     double volume) {\n        return metric.calculateMetric(distance, volume);\n    }\n}\n```", "```java\npublic class AdapterExample {\n    private USFuelConsumption consumption;\n    public AdapterExample() {\n```", "```java\n        consumption = new UstoMetricAdapter();\n    }\n    public void perform() {\n        System.out.printf(\"%s%n\",\n            consumption.calculateUS(350.0, 44.0));\n    }\n    public static void main(String[] args) {\n        new AdapterExample().perform();\n    }\n}\n```", "```java\nl/100km = 12.571428571428573\n```", "```java\npublic class TheProperty {\n```", "```java\n    private String observedValue = \"unicorn\";\n    private final PropertyChangeSupport support;\n```", "```java\n    public TheProperty() {\n        support = new PropertyChangeSupport(this);\n    }\n```", "```java\n    Public void addPropertyChangeListener(\n                  PropertyChangeListener listener) {\n        support.addPropertyChangeListener(listener);\n    }\n```", "```java\n    Public void removePropertyChangeListener(\n                  PropertyChangeListener listener) {\n        support.removePropertyChangeListener(listener);\n    }\n```", "```java\n    public void setObservedValue(String value) {\n        System.out.printf(\n               \"TP: observedValue has changed.%n\");\n        support.firePropertyChange(\n               \"observedValue\", this.observedValue, value);\n        observedValue = value;\n    }\n```", "```java\n    public String getObservedValue() {\n        return observedValue;\n    }\n}\n```", "```java\npublic class TheListener implements PropertyChangeListener{\n```", "```java\n    private String updatedValue;\n```", "```java\n    @Override\n    public void propertyChange(PropertyChangeEvent evt) {\n        System.out.printf(\"TL: The state has changed.%n\");\n        System.out.printf(\"TL: Observed field:%s%n\",\n                          evt.getPropertyName());\n        System.out.printf(\"TL: Previous value: %s%n\",\n                          evt.getOldValue());\n        System.out.printf(\"TL: New value: %s%n\",\n                          evt.getNewValue());\n        setUpdatedValue((String) evt.getNewValue());\n    }\n```", "```java\n    public String getUpdatedValue() {\n        return updatedValue;\n    }\n    public void setUpdatedValue(String updatedValue) {\n        this.updatedValue = updatedValue;\n    }\n}\n```", "```java\npublic class PropertyListenerExample {\n    public void perform() {\n```", "```java\n        var observable = new TheProperty();\n        var observer = new TheListener();\n```", "```java\n        observable.addPropertyChangeListener(observer);\n```", "```java\n        observable.setObservedValue(\"moose\");\n        System.out.printf(\n                \"PLE: New value in observer is %s%n\",\n                observable.getObservedValue());\n    }\n    public static void main(String[] args) {\n        new PropertyListenerExample().perform();\n    }\n}\n```"]