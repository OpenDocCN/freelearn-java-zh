["```java\nKieServices ks = KieServices.Factory.get();\n```", "```java\nKieContainer kContainer = ks.getKieClasspathContainer();\n```", "```java\n// create the Maven GAV wrapper\nReleaseId releaseId = ks.newReleaseId(\"com.packt.masterjbpm6\", \"pizzadelivery\", \"1.0-SNAPSHOT\");\n// then create the container to load the existing module\nKieContainer kieContainer = ks.newKieContainer(releaseId);\n```", "```java\nReleaseId newReleaseId = ks.newReleaseId(\"com.packt.masterjbpm6\", \"pizzadelivery\", \"1.1-SNAPSHOT\"); \n// update the container with the KIE module identified by its GAV\nResults result = kieContainer.updateToVersion (newReleaseId);\nif (result.hasMessages (Level.ERROR))\n{\nList<Message> errors= result.getMessages(Level.ERROR);\n```", "```java\n<kbase name=\"kbase\" packages=\"com.packt.masterjbpm6.event\">\n```", "```java\n    <kbase name=\"kbase\" includes=\"kbaseold\"\n    packages=\"com.packt.masterjbpm6.process\">\n        <ksession name=\"ksession\" />\n    </kbase>\n    ```", "```java\n<kbase name=\"kbase-napoli\" default=\"true\" packages=\"*\" includes=\"kbase-vesuvio\">\n```", "```java\n<kbase name=\"kbase-vesuvio\" default=\"false\" packages=\"*\">\n```", "```java\n    <kbase name=\"kbase\" includes=\"kbaseold\"\n    packages=\"com.packt.masterjbpm6.process\">\n        <ksession name=\"ksession\" />\n    </kbase>\n    <kbase name=\"kbaseold\" packages=\"com.packt.masterjbpm6.event\">\n        <ksession name=\"ksession2\" />\n    </kbase>\n    ```", "```java\nKieSession kieSession=kieContainer.newKieSession (\"ksession\");\n```", "```java\nResource res=ks.getResources().newFileSystemResource (new File(\"/jbpm-constructs/target/classes/\"));\n```", "```java\nKieServices ks = KieServices.Factory.get();\n// create the KIE module model\nKieModuleModel kmodule = ks.newKieModuleModel();\n// create the KieBase model\nKieBaseModel kieBaseModel = kmodule.newKieBaseModel(\"KBase\");\n// create the KieSession model\nKieSessionModel ksession1 = kieBaseModel.newKieSessionModel(\"KSession\").setDefault(true);\nKieFileSystem kfs = ks.newKieFileSystem();\nReleaseId rid = ks.newReleaseId(\"com.packt.masterjbpm6\", \"pizzaDeliveryNew \", \"1.0\");\n// generate pom.xml file\nkfs.generateAndWritePomXML(rid);\n// and write the <kmodule> xml file\nkfs.writeKModuleXML(kmodule.toXML());\n```", "```java\nKieBuilder kieBuilder = ks.newKieBuilder(kfs);\n\n// add dependencies (here, we put jar Files as Resources but you\n// can use one or more KieModule too)\nResource dependencyRes = ks.getResources().newFileSystemResource(new File(\"c:/temp/pizzadelivery-1.0.jar \"));\nkieBuilder.setDependencies(dependencyRes);\n```", "```java\nkieBuilder.buildAll();\nif (kieBuilder.getResults().hasMessages(Level.ERROR)) {\n\n}\n```", "```java\n  String myprocess= \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?> \\n <definitions id=\\\"Definition\\\"\\n\" +\n\nkfs.write(\"src/main/resources/process.bpmn\", myprocess);\n```", "```java\nKieServices ks = KieServices.Factory.get();\nKieRepository kr = ks.getRepository();\n```", "```java\nResource kieresource= ks.getResources().newFileSystemResource(new File(\"c:/Users/simo/git/masterjbpm6/pizzadelivery/target/classes/\"));\n// or \nks.getResources().newFileSystemResource(new File(\"c:/Users/simo/git/masterjbpm6/pizzadelivery/target/pizzadelivery-1.0.jar\"));\n// add to the KIE repo\nKieModule kModule = kr.addKieModule(kieresource);\n// load and use the module\nKieContainer kContainer = ks.newKieContainer(kproj.getReleaseId());\n```", "```java\nReleaseId releaseId = ks.newReleaseId(\"com.packt.masterjbpm6\", \"pizzadelivery\", \"1.0-SNAPSHOT\");\nKieModule kModule=kr.getKieModule(releaseId);\n```", "```java\nKieServices ks = KieServices.Factory.get();\nReleaseId releaseId = ks.newReleaseId(\"com.packt.masterjbpm6\", \"pizzadelivery\", \"1.0-SNAPSHOT\");\nKieContainer kieContainer = ks.newKieContainer(releaseId);\n// bind the scanner to the container\nKieScanner scanner = ks.newKieScanner(kieContainer);\n// synchronous scanner\nscanner.scanNow();\n```", "```java\nMavenRepository repo = MavenRepository.getMavenRepository();\nList<DependencyDescriptor> dependencies = repo.getArtifactDependecies(\"com.packt.masterjbpm6:pizzadelivery:1.0\");\nArtifact module = repo.resolveArtifact(ks.newReleaseId(\n  \"com.packt.masterjbpm6\", \"pizzadelivery\", \"1.0\"));\n```", "```java\n    KieRuntimeLogger logger = loggers.newFileLogger(ksession, \"c:/temp/kielogger\");\n    ```", "```java\n    KieRuntimeLogger logger = loggers.newConsoleLogger(ksession);\n    ```", "```java\n    13:31:03.459 [main] INFO  o.d.c.a.WorkingMemoryConsoleLogger - OBJECT ASSERTED value:com.packt.masterjbpm6.pizza.model.Order@12e13d86 factId: 1\n\n    13:31:03.708 [main] INFO  o.d.c.a.WorkingMemoryConsoleLogger - BEFORE RULEFLOW GROUP ACTIVATED group:masterRuleGroup[size=1]\n    13:31:03.724 [main] INFO  o.d.c.a.WorkingMemoryConsoleLogger - BEFORE ACTIVATION FIRED rule:checkorder activationId:checkorder [1] declarations: $o=com.packt.masterjbpm6.pizza.model.Order@12e13d86 ruleflow-group: masterRuleGroup\n    ```", "```java\n    // update the log file every 5 seconds\n    KieRuntimeLogger logger = loggers.newThreadedFileLogger(ksession, \"c:/temp/kie_threaded\", 5000);\n    ```", "```java\n<ksession\n\n<fileLogger id=\"filelogger\" file=\"mysession.log\" threaded=\"true\" interval=\"10\" />\n<consoleLogger id=\"consolelog\" />\n</ksession>\n```", "```java\nKieServices ks = KieServices.Factory.get();\nKieStoreServices storeservice = ks.getStoreServices();\nKieContainer kContainer = ks.getKieClasspathContainer();\nKieBase kbase = kContainer.getKieBase(\"kbase\");\n// initialize the Session Environment with EMF and the TM\nEnvironment env = EnvironmentFactory.newEnvironment();\n    env.set(EnvironmentName.ENTITY_MANAGER_FACTORY, super.getEmf());\n\n// current Bitronix transaction manager\n  env.set(EnvironmentName.TRANSACTION_MANAGER,\n    TransactionManagerServices.getTransactionManager());\n// create the session\n  ksession = storeservice.newKieSession(kbase, null, env);\n// perform the Rule task test\n  testRule();\n  long id = ksession.getIdentifier();\n// dispose the session\n  ksession.dispose();\n// reload the session given its ID\n  KieSession loadedsession = storeservice.loadKieSession(id, kbase, null,env);\n// check it is the same session\n  assertEquals(id, loadedsession.getIdentifier());\n// rerun the test on the loaded session\nksession = loadedsession;\n  testRule();\n```", "```java\n// preconfigured environment with disabled persistence\nRuntimeEnvironmentBuilder builder=RuntimeEnvironmentBuilder.Factory.get()\n      .newDefaultInMemoryBuilder();\n// with enabled persistence: emf is your EntityManagerFactory\nRuntimeEnvironmentBuilder.Factory.get().newDefaultBuilder().entityMan agerFactory(emf).persistence(true);\n```", "```java\n    RuntimeManagerFactory managerFactory = RuntimeManagerFactory.Factory.get();\n\n    // pass the RuntimeEnvironment we get from the EnvironmentBuilder\n    RuntimeManager rtManager=managerFactory.newSingletonRuntimeManager (builder.get());\n    ```", "```java\n    RuntimeEngine engine = rtManager.getRuntimeEngine(EmptyContext.get());\n    // we can now get the initialized services\n    KieSession ksession = engine.getKieSession();\n    TaskService taskService = engine.getTaskService();\n    ```", "```java\nrtManager.close();\n```", "```java\nEnvironment env = KnowledgeBaseFactory.newEnvironment();\nEntityManagerFactory emf= Persistence.createEntityManagerFactory( \"com.packt.masterjbpm6.persistenceunit\" ));\nenv.set( EnvironmentName.ENTITY_MANAGER_FACTORY,emf);\nenv.set( EnvironmentName.TRANSACTION_MANAGER,\nbitronix.tm.TransactionManagerServices.getTransactionManager());\n\nStatefulKnowledgeSession ksession = JPAKnowledgeService.newKieSession( kbase, null, env );\n```", "```java\n// create the command and execute\nCommand startProcess= CommandFactory.newStartProcess (\"pizzadelivery\");\nksession.execute(startProcess);\n```", "```java\nGetProcessInstanceCommand getProcessInstanceCommand = new GetProcessInstanceCommand();\ngetProcessInstanceCommand.setProcessInstanceId( processInstance.getId());\nProcessInstance processInstance = ksession.execute( getProcessInstanceCommand );\n```", "```java\nStringBuffer orderdesc = new StringBuffer();\nList<Command> batchcmds = new ArrayList<Command>();\nbatchcmds.add(CommandFactory.newSetGlobal(\"newnote\", orderdesc));\nOrder order = new Order();\norder.setCost(200);\nbatchcmds.add(CommandFactory.newInsert(order));\nbatchcmds.add(CommandFactory.newSetGlobal(\"orderglobal\", order));\nbatchcmds.add(CommandFactory.newStartProcess(\"rule\"));\nExecutionResults results = ksession.execute(CommandFactory .newBatchExecution(batchcmds));\n```", "```java\nList<Command> pizzabatchcmds = new ArrayList<Command>();\npizzabatchcmds.add(CommandFactory.newStartProcess(\"pizzadelivery\"));\npizzabatchcmds.add(CommandFactory.newStartProcess(\"pizzadelivery\"));\nksession.execute(CommandFactory.newBatchExecution(pizzabatchcmds));\n```", "```java\n<ksession name=\"ksession\">\n<listeners>\n<ruleRuntimeEventListener type=\"com.packt.masterjbpm6.RuntimeEventlistener\" />\n<agendaEventListener type=\"com.packt.masterjbpm6.AgendaEventlistener\" />\n<processEventListener type=\"com.packt.masterjbpm6.ProcessEventlistener\" />\n</listeners>\n</ksession>\n```", "```java\npublic class RulesAppChannel implements Channel {\n    // handle the channel object sent\npublic void send(Object object) {\n\n    }\n  }\nksession.registerChannel(\"appChannel\", new RulesAppChannel());\n```", "```java\nwhen\n        $o: com.packt.masterjbpm6.pizza.model.Order (cost>100)\n    then\n    {\n\n      channels[\"appChannel\"].send(\"urgent!\");\n    }\n```", "```java\n  Map <String, Channel> channels=ksession.getChannels();\n```", "```java\nInternalTaskService internalTaskService = (InternalTaskService) taskServiceFactory.newTaskService();\n```", "```java\npublic void start(long taskId, String userId) {\n  executor.execute(new CompositeCommand<Void>(\n    new StartTaskCommand(taskId, userId),\n    new CancelDeadlineCommand(taskId, true, false)));\n}\n```", "```java\npublic CompositeCommand(TaskCommand<T> mainCommand, TaskCommand<?>...commands) { \n\n}\n```", "```java\nmail.smtp.host=localhost\nmail.smtp.port=2345\nmail.from=alerts@packt.com\nmail.replyto=replyTo@packt.com\n```", "```java\nTaskFluent fluent = new TaskFluent();\nfluent.setName(\"adhoc Human Task\");\nfluent.addPotentialUser(\"Luigi\").setAdminUser(\"Administrator\");\nTask task = fluent.getTask();\n// add the task\nlong taskid = taskService.addTask(task, new HashMap<String, Object>());\n```", "```java\n  ftask.setWorkItemId(\"default-singleton\");\n  ftask.setProcessId(PROCESS_ID);\n  ftask.setProcessInstanceId(processinstance.getId());\n  ftask.setProcessSessionId(ksession.getId());\n```", "```java\nAuditLogService auditservice=engine.getAuditLogService();\nList<ProcessInstanceLog> pizzadeliveryLogs= auditservice.findActiveProcessInstances(\"pizzadelivery\");\n```", "```java\n  ksession.addEventLister(listener);\n```", "```java\nEntityManagerFactory emf = Persistence.createEntityManagerFactory(\"com.packt.masterjbpm6.persist enceunitApp\");\nAuditLogService logService = new JPAAuditLogService(emf, PersistenceStrategyType.STANDALONE_LOCAL);\n```", "```java\nProcess:\n   BEFORE_START_EVENT_TYPE = 0;\n   AFTER_START_EVENT_TYPE = 1;\n   BEFORE_COMPLETE_EVENT_TYPE = 2;\n   AFTER_COMPLETE_EVENT_TYPE = 3;\nNodes:\n   BEFORE_NODE_ENTER_EVENT_TYPE = 4;\n   AFTER_NODE_ENTER_EVENT_TYPE = 5;\n   BEFORE_NODE_LEFT_EVENT_TYPE = 6;\n   AFTER_NODE_LEFT_EVENT_TYPE = 7;\nVariables:\n   BEFORE_VAR_CHANGE_EVENT_TYPE = 8;\n   AFTER_VAR_CHANGE_EVENT_TYPE = 9;\n```", "```java\nAuditEventBuilder builder = new DefaultAuditEventBuilderImpl();\nVariableInstanceLog variablelog = (VariableInstanceLog) builder.buildEvent(event);\n// get process variable properties: processId, var. name and value\nString processId= variablelog.getProcessId();\nString variableId=variablelog.getVariableId();\nString value= variablelog.getValue();\n// persist\nem.persist (variablelog);\n```", "```java\n    PoolingDataSource pds = new PoolingDataSource();\n    pds.setUniqueName(\"jdbc/localjbpm-ds\");\n    pds.setClassName(LrcXADataSource.class.getName());\n    pds.setMaxPoolSize(5);\n    pds.setAllowLocalTransactions(true);\n    pds.getDriverProperties().put(\"user\",\"sa\");\n    pds.getDriverProperties().put(\"password\",\"\");\n    pds.getDriverProperties().put(\"url\",\"jdbc:h2:tcp://localhost /~/jbpm-db;MVCC=TRUE\");\n    pds.getDriverProperties().put(\"driverClassName\",\"org.h2.Driv er\");\n    pds.init();\n    ```", "```java\n    java.naming.factory.initial=bitronix.tm.jndi.BitronixInitialContextFactory\n    ```", "```java\n    <persistence-unit name=\"localjbpm-persistenceunit\"\n        transaction-type=\"JTA\">\n    <provider>org.hibernate.ejb.HibernatePersistence</provider>\n    <!--  match the bitronix datasource uniqueName -->\n    <jta-data-source>jdbc/localjbpm-ds</jta-data-source>\n    ```", "```java\n    EntityManagerFactory emf =Persistence.createEntityManagerFactory(\"localjbpm- persistenceunit\");\n    ```", "```java\nAuditEntity audit = new AuditEntity();\naudit.setDesc(\"startAudit1\");\nUserTransaction ut;\ntry {\n  ut = (UserTransaction) new InitialContext()\n      .lookup(\"java:comp/UserTransaction\");\n  ut.begin();\n  em.joinTransaction();\n  em.persist(audit);\n// start process\n  ProcessInstance pi = ksession.startProcess(\"auditTxProcess\");\n// new application database insert\n  AuditEntity auditproc = new AuditEntity();\n  auditproc.setDesc(\"Audit1:process started\");\n  em.persist(auditproc);\n// commit both process instance and audit entity\n  ut.commit();\n```", "```java\nEnvironmentName.USE_PESSIMISTIC_LOCKING\n```"]