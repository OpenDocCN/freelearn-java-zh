["```java\nprovides: spring-test, spring-boot, junit, mockito, hamcrest-library, jsonassert, json-path \n```", "```java\ndependencies { \n  compile(\"org.springframework.boot:spring-boot-starter-data-jpa\") \n  compile(\"org.springframework.boot:spring-boot-starter-jdbc\") \n  runtime(\"com.h2database:h2\") \n  testCompile(\"org.springframework.boot:spring-boot-starter-test\")  \n} \n```", "```java\nprovides: spring-jdbc,spring-tx,tomcat-jdbc \n```", "```java\n    package com.example.bookpub; \n\n    import org.springframework.boot.SpringApplication; \n    import org.springframework.boot.autoconfigure.\n    SpringBootApplication; \n\n    @SpringBootApplication \n    public class BookPubApplication { \n\n      public static void main(String[] args) { \n        SpringApplication.run(BookPubApplication.class, args); \n      } \n    } \n```", "```java\n    @SpringBootConfiguration \n    @EnableAutoConfiguration \n    @ComponentScan (excludeFilters = @Filter(type =  \n                                     FilterType.CUSTOM,  \n                    classes = TypeExcludeFilter.class)) \n    public @interface SpringBootApplication {...} \n```", "```java\n      $ ./gradlew clean bootRun\n\n```", "```java\n    ...\n      .   ____          _            __ _ _\n    /\\ / ___'_ __ _ _(_)_ __  __ _ \n    ( ( )___ | '_ | '_| | '_ / _` | \n     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n      '  |____| .__|_| |_|_| |___, | / / / /\n     =========|_|==============|___/=/_/_/_/\n     :: Spring Boot ::  (v2.0.0.BUILD-SNAPSHOT)\n\n    2017-12-16 23:18:53.721 : Starting BookPubApplication on mbp with  \n    PID 43850 \n    2017-12-16 23:18:53.781 : Refreshing org.springframework.context.\n    annotation.Annotatio\n    2017-12-16 23:18:55.544 : Building JPA container \n    EntityManagerFactory for persistence \n    2017-12-16 23:18:55.565 : HHH000204: Processing \n    PersistenceUnitInfo [name: default \n    2017-12-16 23:18:55.624 : HHH000412: Hibernate Core  \n    {5.2.12.Final}\n    2017-12-16 23:18:55.625 : HHH000206: hibernate.properties not \n    found\n    2017-12-16 23:18:55.627 : HHH000021: Bytecode provider name : \n    javassist\n    2017-12-16 23:18:55.774 : HCANN000001: Hibernate Commons \n    Annotations {5.0.1.Final\n    2017-12-16 23:18:55.850 : HHH000400: Using dialect: \n    org.hibernate.dialect.H2Dialect\n    2017-12-16 23:18:55.902 : HHH000397: Using \n    ASTQueryTranslatorFactory\n    2017-12-16 23:18:56.094 : HHH000227: Running hbm2ddl schema \n    export\n    2017-12-16 23:18:56.096 : HHH000230: Schema export complete\n    2017-12-16 23:18:56.337 : Registering beans for JMX exposure on \n    startup\n    2017-12-16 23:18:56.345 : Started BookPubApplication in 3.024 \n    seconds (JVM running...\n    2017-12-16 23:18:56.346 : Closing \n    org.springframework.context.annotation.AnnotationC..\n    2017-12-16 23:18:56.347 : Unregistering JMX-exposed beans on \n    shutdown\n    2017-12-16 23:18:56.349 : Closing JPA EntityManagerFactory for \n    persistence unit 'def...\n    2017-12-16 23:18:56.349 : HHH000227: Running hbm2ddl schema \n    export\n    2017-12-16 23:18:56.350 : HHH000230: Schema export complete\n    BUILD SUCCESSFUL\n    Total time: 52.323 secs\n\n```", "```java\n    Building JPA container EntityManagerFactory for persistence unit \n    'default'\n    HHH000412: Hibernate Core {5.2.12.Final}\n    HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\n\n```", "```java\n        package com.example.bookpub; \n\n        import com.example.bookpub.repository.BookRepository;\n        import org.apache.commons.logging.Log; \n        import org.apache.commons.logging.LogFactory; \n        import org.springframework.beans.factory.annotation.Autowired;\n        import org.springframework.boot.CommandLineRunner; \n        import org.springframework.scheduling.annotation.Scheduled;\n\n        public class StartupRunner implements CommandLineRunner { \n            protected final Log logger = LogFactory.getLog(getClass()); \n            @Override \n            public void run(String... args) throws Exception { \n                logger.info(\"Hello\"); \n            } \n        }\n```", "```java\n@Bean \npublic StartupRunner schedulerRunner() { \n    return new StartupRunner(); \n} \n```", "```java\n2017-12-16 21:57:51.048  INFO --- \ncom.example.bookpub.StartupRunner         : Hello\n\n```", "```java\npublic class StartupRunner implements CommandLineRunner { \n    protected final Log logger = LogFactory.getLog(getClass()); \n    @Autowired \n    private DataSource ds; \n    @Override \n    public void run(String... args) throws Exception { \n        logger.info(\"DataSource: \"+ds.toString()); \n    } \n} \n```", "```java\n2017-12-16 21:46:22.067 com.example.bookpub.StartupRunner   \n:DataSource: org.apache.tomcat.jdbc.pool.DataSource@4...  {...driverClassName=org.h2.Driver; ... }\n\n```", "```java\nspring.datasource.url = jdbc:h2:~/test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE \nspring.datasource.username = sa \nspring.datasource.password = \n```", "```java\n    spring.datasource.driver-class-name: com.mysql.jdbc.Driver\n    spring.datasource.url:   \n    jdbc:mysql://localhost:3306/springbootcookbook\n    spring.datasource.username: root\n    spring.datasource.password:\n\n```", "```java\n    spring.jpa.hibernate.ddl-auto=create-drop\n\n```", "```java\n@Autowired \nprivate JdbcTemplate jdbcTemplate; \n```", "```java\n@Entity \npublic class Book { \n  @Id \n  @GeneratedValue \n  private Long id; \n  private String isbn; \n  private String title; \n  private String description; \n\n  @ManyToOne \n  private Author author; \n  @ManyToOne \n  private Publisher publisher; \n\n  @ManyToMany \n  private List<Reviewers> reviewers; \n\n  protected Book() {} \n\n  public Book(String isbn, String title, Author author, \n       Publisher publisher) { \n    this.isbn = isbn; \n    this.title = title; \n    this.author = author; \n    this.publisher = publisher; \n  } \n  //Skipping getters and setters to save space, but we do need them \n} \n```", "```java\n@Entity \npublic class Author { \n  @Id \n  @GeneratedValue \n  private Long id; \n  private String firstName; \n  private String lastName; \n  @OneToMany(mappedBy = \"author\") \n  private List<Book> books; \n\n  protected Author() {} \n\n  public Author(String firstName, String lastName) {...} \n    //Skipping implementation to save space, but we do need \n       it all \n} \n```", "```java\n@Entity \npublic class Publisher { \n  @Id \n  @GeneratedValue \n  private Long id; \n  private String name; \n  @OneToMany(mappedBy = \"publisher\") \n  private List<Book> books; \n\n  protected Publisher() {} \n\n  public Publisher(String name) {...} \n} \n\n@Entity \npublic class Reviewer { \n  @Id \n  @GeneratedValue \n  private Long id; \n  private String firstName; \n  private String lastName; \n\n  protected Reviewer() {} \n\n  public Reviewer(String firstName, String lastName) \n     {...}\n} \n```", "```java\n@Repository \npublic interface BookRepository \n       extends CrudRepository<Book, Long> { \n   public Book findBookByIsbn(String isbn); \n} \n```", "```java\npublic class StartupRunner implements CommandLineRunner { \n  @Autowired private BookRepository bookRepository; \n\n  public void run(String... args) throws Exception { \n    logger.info(\"Number of books: \" + \n       bookRepository.count()); \n  } \n} \n```", "```java\n@SpringBootApplication \n@EnableScheduling \npublic class BookPubApplication {...}\n```", "```java\n@Scheduled(initialDelay = 1000, fixedRate = 10000) \npublic void run() { \n    logger.info(\"Number of books: \" +  \n        bookRepository.count()); \n} \n```"]