["```java\n<depedency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-ldap</artifactId>\n</dependency>\n```", "```java\nspring.ldap.urls=ldap://localhost:10389\nspring.ldap.base=o=packtPublisher\nspring.ldap.password=secret\nspring.ldap.username=uid=admin,ou=system\n```", "```java\n@Configuration\n@ComponentScan(basePackages = { \"com.nilangpatel.springldap.config\" })\npublic class LdapDataConfig {\n\n  @Value(\"${spring.ldap.urls}\")\n  private String ldapUrls;\n\n  @Value(\"${spring.ldap.base}\")\n  private String ldapBase;\n\n  @Value(\"${spring.ldap.password}\")\n  private String ldapManagerPwd;\n\n  @Value(\"${spring.ldap.username}\")\n  private String ldapManagerUserName;\n\n  @Bean(\"ldapAuthStructure\")\n  public LdapAuthStructure getLDAPAuthStructure() {\n    LdapAuthStructure authStructure = new LdapAuthStructure();\n\n    authStructure.setLdapUrl(ldapUrls);\n    authStructure.setLdapBase(ldapBase);\n    authStructure.setLdapManagerDn(ldapManagerUserName);\n    authStructure.setLdapManagerPwd(ldapManagerPwd);\n    authStructure.setUserDnPattern(\"uid={0},ou=users\");\n    authStructure.setUserSearchBase(\"ou=roles\");\n\n    return authStructure;\n  }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\n@ComponentScan(\"com.nilangpatel.springldap.security\")\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Autowired\n  private LdapAuthStructure ldapAuthStructure;\n\n  private Logger logger = LoggerFactory.getLogger(WebSecurityConfig.class);\n\n  @Override\n  public void configure(WebSecurity web) throws Exception {\n    web.ignoring().antMatchers(\"/js/**\");\n    web.ignoring().antMatchers(\"/css/**\");\n  }\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n     http.authorizeRequests()\n      .antMatchers(\"/\").permitAll()\n      .anyRequest().fullyAuthenticated().and()\n    .formLogin().loginPage(\"/login\").permitAll()\n      .defaultSuccessUrl(\"/privatePage\",true)\n      .failureUrl(\"/login?error=true\")\n      .and()\n    .logout()\n      .permitAll().logoutSuccessUrl(\"/login?logout=true\");\n    logger.info(\"configure method is called to make the resources secure ...\");\n  }\n\n  @Override\n  protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {\n    authManagerBuilder.ldapAuthentication()\n    .userDnPatterns(ldapAuthStructure.getUserDnPattern())\n    .userSearchBase(ldapAuthStructure.getUserSearchBase())\n    .contextSource()\n      .url(ldapAuthStructure.getLdapUrl()+\"/\"+ldapAuthStructure.getLdapBase())\n      .managerDn(ldapAuthStructure.getLdapManagerDn())\n      .managerPassword(ldapAuthStructure.getLdapManagerPwd())\n      .and()\n    .passwordCompare()\n      .passwordEncoder(new LdapShaPasswordEncoder())\n      .passwordAttribute(\"userPassword\");\n\n    logger.info(\"configure method is called to build Authentication manager ...\");\n  }  \n\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-data-ldap</artifactId>\n</dependency>\n```", "```java\n@Entry(\n  base = \"ou=users\", \n  objectClasses = {\"top\", \"person\", \"organizationalPerson\",\"inetOrgPerson\"})\npublic final class LdapAuthUser implements Persistable<Name> {\n\n  @Id\n  private Name id;\n\n  @Attribute(name = \"uid\")\n  @DnAttribute(value=\"uid\")\n  private String userName;\n\n  @Attribute(name = \"sn\")\n  private String surName;\n\n  @Attribute(name = \"cn\") \n  private String firstName;\n\n  @Attribute(name = \"userPassword\") \n  private String password;\n\n  @Transient\n  private boolean isNew;\n\n  //.. setter and getter methods\n}\n```", "```java\n@Repository\npublic interface LdapAuthRepository extends LdapRepository<LdapAuthUser>{\n\n}\n```", "```java\n@Component\npublic class LdapAuthService {\n\n  private Logger logger = LoggerFactory.getLogger(LdapAuthService.class);\n\n  @Autowired\n  private LdapAuthRepository ldapAuthRepository;\n\n//Create\n  public void addUser(LdapAuthUser ldapAuthUser) {\n    Name dn = LdapNameBuilder\n            .newInstance()\n            .add(\"uid\", ldapAuthUser.getUserName())\n            .add(\"ou\", \"users\")\n            .build();\n\n    boolean isExist = ldapAuthRepository.existsById(dn);\n    if(isExist ==false) {\n      ldapAuthRepository.save(ldapAuthUser);\n    }else {\n      logger.info(\"User with username \"+ldapAuthUser.getUserName()+\" is already exist \");\n    }\n  }\n  //Read  \n  public LdapAuthUser getUser(String userName) {\n    Optional<LdapAuthUser> ldapAuthUserOptional = ldapAuthRepository.\n            findOne(LdapQueryBuilder.query().where(\"uid\").is(userName));\n    if(ldapAuthUserOptional.isPresent()) {\n      return ldapAuthUserOptional.get();\n    }else {\n      return null;\n    }\n  }\n  //Update\n  public void updateLdapUser(LdapAuthUser ldapUser) {\n    ldapAuthRepository.save(ldapUser);\n\n  }\n//Delete\npublic void deleteUser(String userName) {\n    Optional<LdapAuthUser> ldapAuthUserOptional = ldapAuthRepository.\n            findOne(LdapQueryBuilder.query().where(\"uid\").is(userName));\n    if(ldapAuthUserOptional.isPresent()) {\n      ldapAuthRepository.delete(ldapAuthUserOptional.get());\n    }else {\n      logger.info(\"User with username \"+userName+\" does not exist \");\n    }\n  }\n}\n```", "```java\n        LdapAuthUser ldapUser = new LdapAuthUser();\n        ldapUser.setUserName(\"kpatel\");\n        ldapUser.setPassword(\"test1234\");\n        ldapUser.setFirstName(\"Komal\");\n        ldapUser.setSurName(\"Patel\");\n        ldapUser.setIsNew(true);\n\n        Name dn = LdapNameBuilder.newInstance()\n              .add(\"ou=users\")\n              .add(\"uid=kpatel\")\n              .build();\n        ldapUser.setId(dn);\n\n        ldapAuthService.addUser(ldapUser);\n```", "```java\n public boolean authenticateLdapUserWithContext(String userName, String password) {\n    return ldapAuthRepository.authenticateLdapUserWithContext(userName, password);\n  }\n\n  public boolean authenticateLdapUserWithLdapQuery(String userName, String password) {\n    return ldapAuthRepository.authenticateLdapUserWithLdapQuery(userName, password);\n  }\n```", "```java\n@Bean(\"ldapTemplate\")\n  public LdapTemplate getLdapTemplate() {\n    return new LdapTemplate(getLdapContextSrc());\n  }\n\n  @Bean\n  public ContextSource getLdapContextSrc() {\n    LdapContextSource ldapContextSrc = new LdapContextSource();\n    ldapContextSrc.setUrl(ldapUrls);\n    ldapContextSrc.setUserDn(ldapManagerUserName);\n    ldapContextSrc.setPassword(ldapManagerPwd);\n    ldapContextSrc.setBase(ldapBase);\n    ldapContextSrc.afterPropertiesSet();\n    return ldapContextSrc;\n  }\n```", "```java\n@Repository\npublic interface LdapAuthRepository extends LdapRepository<LdapAuthUser>,LdapAuthRepositoryCustom\n{\n\n}\n```", "```java\n@Repository\npublic class LdapAuthRepositoryCustomImpl implements LdapAuthRepositoryCustom {\n\n  private Logger logger = LoggerFactory.getLogger(LdapAuthRepositoryCustomImpl.class);\n\n  @Autowired\n  private LdapTemplate ldapTemplate;\n\n  ...// Custom implementation method.\n```", "```java\n@Override\n  public void create(LdapAuthUser ldapAuthUser) {\n    ldapAuthUser.setIsNew(true);\n    ldapTemplate.create(ldapAuthUser);\n  }\n  @Override\n  public void createByBindOperation(LdapAuthUser ldapAuthUser) {\n\n    DirContextOperations ctx = new DirContextAdapter();\n    ctx.setAttributeValues(\"objectclass\", new String[] {\"top\", \"person\",     \"organizationalPerson\",\"inetOrgPerson\"});\n    ctx.setAttributeValue(\"cn\", ldapAuthUser.getFirstName());\n    ctx.setAttributeValue(\"sn\", ldapAuthUser.getSurName());\n    ctx.setAttributeValue(\"uid\", ldapAuthUser.getUserName());\n    ctx.setAttributeValue(\"password\", ldapAuthUser.getPassword());\n\n    Name dn = LdapNameBuilder.newInstance()\n            .add(\"ou=users\")\n            .add(\"uid=bpatel\")\n            .build();\n\n    ctx.setDn(dn);\n    ldapTemplate.bind(ctx);\n\n  }\n```", "```java\n@Override\npublic LdapAuthUser findByUserName(String userName) {\n    return ldapTemplate.findOne(\n        LdapQueryBuilder.query().where(\"uid\").is(userName), LdapAuthUser.class);\n}\n\n@Override\npublic List<LdapAuthUser> findByMatchingUserName(String userName) {\n   return ldapTemplate.find(\n       LdapQueryBuilder.query().where(\"uid\").like(userName), LdapAuthUser.class);\n}\n\n@Override\npublic LdapAuthUser findByUid(String uid) {\n    return ldapTemplate.findOne(LdapQueryBuilder.query().where(\"uid\").is(uid), LdapAuthUser.class);\n}\n\n@Override\npublic List<LdapAuthUser> findAllWithTemplate() {\n   return ldapTemplate.findAll(LdapAuthUser.class);\n}\n\n@Override\npublic List<LdapAuthUser> findBySurname(String surName) {\n    return ldapTemplate.find(LdapQueryBuilder.query().where(\"sn\").is(surName), LdapAuthUser.class);\n}\n```", "```java\n@Override\n  public void updateWithTemplate(LdapAuthUser ldapAuthUser) {\n    ldapTemplate.update(ldapAuthUser);\n  }\n```", "```java\n  @Override\n  public void deleteFromTemplate(LdapAuthUser ldapAuthUser) {\n    ldapTemplate.delete(ldapAuthUser);\n  }\n\n  @Override\n  public void deleteFromTemplateWithUnbind(String userName) {\n    Name dn = LdapNameBuilder.newInstance()\n            .add(\"ou=users\")\n            .add(\"uid=\"+userName)\n            .build();\n    ldapTemplate.unbind(dn);\n  }\n```", "```java\n@Override\npublic boolean authenticateLdapUserWithLdapQuery(String userName, String password) {\n    try {\n     ldapTemplate.authenticate(LdapQueryBuilder.query().where(\"uid\").is(userName), password);\n     return true;\n    }catch(Exception e) {\n      logger.error(\"Exception occuired while authenticating user with user name \"+userName,e.getMessage(),e);\n    }\n    return false;\n  }\n\n@Override\npublic boolean authenticateLdapUserWithContext(String userName, String password) {\n    DirContext ctx = null;\n    try {\n      String userDn = getDnForUser(userName);\n      ctx = ldapTemplate.getContextSource().getContext(userDn, password);\n      return true;\n    } catch (Exception e) {\n      // If exception occurred while creating Context, means - authentication did not succeed\n      logger.error(\"Authentication failed \", e.getMessage(),e);\n      return false;\n    } finally {\n      // DirContext must be closed here.\n      LdapUtils.closeContext(ctx);\n    }\n}\n```", "```java\n  private String getDnForUser(String uid) {\n      List<String> result = ldapTemplate.search(\n          LdapQueryBuilder.query().where(\"uid\").is(uid),\n          new AbstractContextMapper<String>() {\n             protected String doMapFromContext(DirContextOperations ctx) {\n                return ctx.getNameInNamespace();\n             }\n          });\n      if(result.size() != 1) {\n        throw new RuntimeException(\"User not found or not unique\");\n      }\n      return result.get(0);\n   }\n```", "```java\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/\").permitAll()\n      .antMatchers(\"/adminPage/\").hasAnyAuthority(\"ADMIN\")\n      .antMatchers(\"/userPage/\").hasAnyAuthority(\"USER\")\n      .anyRequest().fullyAuthenticated()\n      .and()\n   .formLogin().loginPage(\"/login\").permitAll()\n      .defaultSuccessUrl(\"/privatePage\",true)\n      .failureUrl(\"/login?error=true\")\n      .and()\n      .logout()\n      .permitAll().logoutSuccessUrl(\"/login?logout=true\");\n    logger.info(\"configure method is called to make the resources secure ...\");\n  }\n```", "```java\n  @Override\n  protected void configure(AuthenticationManagerBuilder authManagerBuilder) throws Exception {\n    authManagerBuilder.ldapAuthentication()\n      .userDnPatterns(ldapAuthStructure.getUserDnPattern())\n      .userSearchBase(ldapAuthStructure.getUserSearchBase())\n      .groupSearchBase(ldapAuthStructure.getGroupSearchBase())\n      .groupSearchFilter(\"member={0}\").rolePrefix(\"\")\n    .contextSource()\n      .url(ldapAuthStructure.getLdapUrl()+\"/\"+ldapAuthStructure.getLdapBase())\n      .managerDn(ldapAuthStructure.getLdapManagerDn())\n      .managerPassword(ldapAuthStructure.getLdapManagerPwd())\n      .and()\n    .passwordCompare()\n      .passwordEncoder(new LdapShaPasswordEncoder())\n      .passwordAttribute(\"userPassword\");\n\n    logger.info(\"configure method is called to build Authentication manager ...\");\n  }\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-oauth2-client</artifactId>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.security</groupId>\n  <artifactId>spring-security-oauth2-client</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-oauth2-jose</artifactId>\n</dependency>\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-oauth2-core</artifactId>\n</dependency>\n```", "```java\nspring.security.oauth2.client.registration.google.provider=google\nspring.security.oauth2.client.registration.google.client-name=Google\nspring.security.oauth2.client.registration.google.client-id=<GOOGLE_CLIENT_ID>\nspring.security.oauth2.client.registration.google.client-secret=<GOOGLE_SECRET>\n```", "```java\n@Override\n  protected void configure(HttpSecurity http) throws Exception {\n     http.authorizeRequests()\n      .anyRequest().authenticated()\n      .and()\n        .oauth2Login();\n     super.configure(http);\n  }\n```", "```java\n@ModelAttribute(\"currentUserName\")\npublic String getCurrentUserName() {\n  String name = \"\";\n  if(SecurityContextHolder.getContext().getAuthentication() !=null) {\n    if(SecurityContextHolder.getContext().getAuthentication() \n        instanceof OAuth2AuthenticationToken) {\n      OAuth2AuthenticationToken oauth2Authentication = \n          (OAuth2AuthenticationToken)SecurityContextHolder.getContext().getAuthentication();\n      name = (String)oauth2Authentication.getPrincipal().getAttributes().get(\"name\");\n    }else {\n      String userName = SecurityContextHolder.getContext().getAuthentication().getName();\n      LdapAuthUser ldapUser = ldapAuthService.getUser(userName);\n      if(ldapUser !=null) {\n        name = ldapUser.getFirstName()+\" \"+ldapUser.getSurName();\n      }\n    }\n  }\n  return name;\n}\n```", "```java\n http.authorizeRequests()\n  .antMatchers(\"/\",\"/login\").permitAll()\n  .antMatchers(\"/adminPage/\").hasAnyAuthority(\"ADMIN\")\n  .antMatchers(\"/userPage/\").hasAnyAuthority(\"USER\")\n  .anyRequest().fullyAuthenticated()\n    .and()\n  .oauth2Login().loginPage(\"/login\")\n    .defaultSuccessUrl(\"/privatePage\",true)\n    .failureUrl(\"/login?error=true\")\n    .and()\n  .logout()\n    .permitAll().logoutSuccessUrl(\"/login?logout=true\");\n```", "```java\n@Autowired\nprivate ClientRegistrationRepository clientRegistrationRepository;\n\n@GetMapping(\"/login\")\npublic String showLoginPage(@RequestParam(value = \"error\",required = false) String error,\n    @RequestParam(value = \"logout\", required = false) String logout,Model model) {\n  logger.info(\"This is login page URL \");\n\n  if (error != null) {\n    model.addAttribute(\"error\", \"Invalid Credentials provided.\");\n  }\n\n  if (logout != null) {\n    model.addAttribute(\"message\", \"Logged out\");\n  }\n\n  String authorizationRequestBaseUri = \"oauth2/authorization\";\n  Map<String, String> oauth2AuthenticationUrls = new HashMap<String, String>();\n\n  Iterable<ClientRegistration> clientRegistrations = (Iterable<ClientRegistration>)  clientRegistrationRepository;\n\n  clientRegistrations.forEach(registration -> \n  oauth2AuthenticationUrls.put(registration.getClientName(), \n      authorizationRequestBaseUri + \"/\" + registration.getRegistrationId()));\n  model.addAttribute(\"urls\", oauth2AuthenticationUrls);\n\n  setProcessingData(model, LdapAuthConstant.TITLE_LOGIN_PAGE);\n\n  return \"login\";\n}\n```", "```java\n@Component\npublic class CustomLdapAuthProvider implements AuthenticationProvider{\n\n  @Autowired\n  LdapAuthService ldapAuthService;\n\n  @Override\n  public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n    String userName = authentication.getPrincipal().toString();\n    String password = authentication.getCredentials().toString();\n\n    boolean isAuthenticate = ldapAuthService.authenticateLdapUserWithContext(userName, password);\n\n    if(isAuthenticate == true) {\n      List<LdapGranntedAuthority> userRoles = ldapAuthService.getUserAuthorities(userName);\n      return new UsernamePasswordAuthenticationToken(\n          userName, password, userRoles);\n    }else {\n      return null;\n    }\n  }\n\n  @Override\n  public boolean supports(Class<?> authentication) {\n    return authentication.equals(\n        UsernamePasswordAuthenticationToken.class);\n  }\n}\n```", "```java\n@Override\npublic List<LdapGranntedAuthority> getUserAuthorities(String userName) {\n  AndFilter groupFilter = new AndFilter();\n  groupFilter.and(new EqualsFilter(\"objectclass\",\"groupOfNames\"));\n  groupFilter.and(new EqualsFilter(\"member\",\"uid=\"+userName+\",ou=users,o=packtPublisher\"));\n  List<LdapGranntedAuthority> userRoleLst =  ldapTemplate.search(LdapQueryBuilder.query().\n                      filter(groupFilter),new LdapRoleMapper());\n  return userRoleLst;\n}\n```", "```java\npublic class LdapRoleMapper implements ContextMapper<LdapGranntedAuthority>{\n\n  @Override\n  public LdapGranntedAuthority mapFromContext(Object ctx) throws NamingException {\n    DirContextAdapter adapter = (DirContextAdapter) ctx;\n    String role = adapter.getStringAttribute(\"cn\");\n    LdapGranntedAuthority ldapGranntedAuthority = new LdapGranntedAuthority();\n    ldapGranntedAuthority.setAuthority(role);\n    return ldapGranntedAuthority;\n  }\n}\n```", "```java\npublic class LdapGranntedAuthority implements GrantedAuthority {\n\n  String authority;\n  public void setAuthority(String authority) {\n    this.authority = authority;\n  }\n  @Override\n  public String getAuthority() {\n    return authority;\n  }\n}\n```", "```java\n@Autowired\nCustomLdapAuthProvider customLdapAuthProvider;\n\n@PostMapping(\"/ldapLogin\")\npublic String ldapAuthenticate(HttpServletRequest req,@RequestParam(value = \"username\",required = true) String username,\n    @RequestParam(value = \"password\", required = true) String password,RedirectAttributes redirectAttributes) {\n\n  UsernamePasswordAuthenticationToken authReq\n  = new UsernamePasswordAuthenticationToken(username, password);\n  Authentication auth = customLdapAuthProvider.authenticate(authReq);\n  if(auth !=null) {\n    logger.info(\" If user is authenticated .... \"+auth.isAuthenticated());\n    SecurityContext sc = SecurityContextHolder.getContext();\n    sc.setAuthentication(auth);\n    HttpSession session = req.getSession(true);\n    session.setAttribute(HttpSessionSecurityContextRepository.SPRING_SECURITY_CONTEXT_KEY, sc);\n\n    if(auth.isAuthenticated() == true) {\n      return \"redirect:/privatePage\"; \n    }else {\n      redirectAttributes.addAttribute(\"error\", \"true\");\n      return \"redirect:/login\";\n    }\n  }else { // failed authentication - either username or password fails.\n    redirectAttributes.addAttribute(\"error\", \"true\");\n    return \"redirect:/login\";\n  }\n}\n```", "```java\n@Configuration\n@EnableAuthorizationServer\npublic class CustomAuthorizationConfig extends AuthorizationServerConfigurerAdapter{\n\n  @Autowired\n    @Qualifier(\"authenticationManager\")\n    private AuthenticationManager authenticationManager;\n\n  @Autowired\n  PasswordEncoder encoder;\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) \n      throws Exception {\n        clients.inMemory()\n          .withClient(\"c1\")\n          .authorizedGrantTypes(\"implicit\")\n          .scopes(\"read\", \"write\", \"trust\")\n          .secret(encoder.encode(\"123\"))\n          .redirectUris(\"http://localhost:8082/privatePage\")\n          .resourceIds(\"oauth2-server\");\n    }\n\n    @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(\"123\");\n        return converter;\n    }\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n    @Override\n    public void configure(\n      AuthorizationServerEndpointsConfigurer endpoints) \n      throws Exception {\n        endpoints\n          .authenticationManager(authenticationManager)\n          .tokenServices(tokenServices())\n          .tokenStore(tokenStore())\n          .accessTokenConverter(accessTokenConverter());\n    }\n\n    @Bean(\"resourceServerTokenServices\")\n    @Primary\n    public DefaultTokenServices tokenServices() {\n        DefaultTokenServices defaultTokenServices = new DefaultTokenServices();\n        defaultTokenServices.setTokenStore(tokenStore());\n        defaultTokenServices.setSupportRefreshToken(false);\n        defaultTokenServices.setAccessTokenValiditySeconds(120);\n        defaultTokenServices.setTokenEnhancer(accessTokenConverter());\n        return defaultTokenServices;\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean(\"authenticationManager\")\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n      AuthenticationManager authenticationManager = super.authenticationManagerBean(); \n      return authenticationManager;\n    }\n\n    @Override\n  public void configure(WebSecurity web) throws Exception {\n    web.ignoring().antMatchers(\"/js/**\");\n    web.ignoring().antMatchers(\"/css/**\");\n  }\n\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) \n      throws Exception {\n        auth.inMemoryAuthentication()\n          .withUser(\"john\").password(new BCryptPasswordEncoder().encode(\"123\")).authorities(\"USER\");\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http\n         .authorizeRequests()\n         .antMatchers(\"/oauth/authorize\",\"/\").permitAll()\n         .and()\n         .formLogin().loginPage(\"/login\").permitAll();\n    }\n\n    @Bean(\"encoder\")\n    public BCryptPasswordEncoder encoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n}\n```", "```java\n@Configuration\n@EnableResourceServer\npublic class ResourceServerConfig extends ResourceServerConfigurerAdapter {\n\nprivate static final String RESOURCE_ID = \"oauth2-server\";\n\n  @Override\n  public void configure(ResourceServerSecurityConfigurer resources) {\n    resources\n      .tokenStore(tokenStore())\n      .resourceId(RESOURCE_ID);\n  }\n\n  @Override\n  public void configure(HttpSecurity http) throws Exception {\n        http\n            .authorizeRequests()\n            .antMatchers(\"/api/**\").authenticated()\n            .and().exceptionHandling().accessDeniedHandler(new OAuth2AccessDeniedHandler());\n  }\n\n  @Bean\n    public TokenStore tokenStore() {\n        return new JwtTokenStore(accessTokenConverter());\n    }\n\n  @Bean\n    public JwtAccessTokenConverter accessTokenConverter() {\n        JwtAccessTokenConverter converter = new JwtAccessTokenConverter();\n        converter.setSigningKey(\"123\");\n        return converter;\n    }\n\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter{\n      @Override\n      protected void configure(HttpSecurity http) throws Exception {\n         http\n           .authorizeRequests()\n           .antMatchers(\"/\",\"/customAuth\").permitAll()\n        .anyRequest().authenticated();\n      }\n  }\n```", "```java\n@Controller\npublic class WebController {\n\n  private Logger logger = LoggerFactory.getLogger(WebController.class);\n\n  @GetMapping(\"/\")\n  public String showHomePage(Model model) {\n    logger.info(\"This is show home page method \");\n    setProcessingData(model, \"Home Page\");\n    return \"home\";\n  }\n\n  @GetMapping(\"/privatePage\")\n  public String showControlPage(Model model) {\n    logger.info(\"This is privaet page \");\n      setProcessingData(model, \"Private Page\");\n      return \"private-page\";\n  }\n\n  @GetMapping(\"/customAuth\")\n  public String authorizeUser(Model model,@Value(\"${custom.auth.authorization-uri}\") String authorizationUri,\n      @Value(\"${custom.auth.client-id}\") String clientId,\n      @Value(\"${custom.auth.client-secret}\") String clientSecret,\n      @Value(\"${custom.auth.grant-type}\") String grantType,\n      @Value(\"${custom.auth.response-type}\") String responseType) {\n\n      UriComponentsBuilder uriBuilder = UriComponentsBuilder.fromHttpUrl(authorizationUri)\n                .queryParam(\"username\", clientId)\n                .queryParam(\"password\", clientSecret)\n                .queryParam(\"grant_type\", grantType)\n                .queryParam(\"response_type\", responseType)\n                .queryParam(\"client_id\", clientId);\n\n      return \"redirect:\"+uriBuilder.toUriString();\n  }\n}\n```", "```java\ncustom.auth.authorization-uri=http://localhost:8081/oauth/authorizee\ncustom.auth.client-id=c1\ncustom.auth.client-secret=123\ncustom.auth.grant-type=implicit\ncustom.auth.response-type=token\n```", "```java\n@RestController\n@RequestMapping(\"/api\")\npublic class ServiceAPIController {\n\n  private Logger logger = LoggerFactory.getLogger(ServiceAPIController.class);\n\n  @RequestMapping(\"/currentUser\")\n  public Principal getUser(Principal user) {\n    return user;\n  }\n\n  @RequestMapping(\"/adminresource\")\n  public String adminResource(Principal user) {\n    return \"{\\\"id\\\":\\\"\" + user.getName() + \"\\\",\\\"content\\\":\\\"Hello World\\\"}\";\n  }\n\n  @RequestMapping(value=\"/usergreeting\", method = RequestMethod.GET, produces = {MediaType.APPLICATION_JSON_VALUE})\n  public String userResource(Principal user) {\n    return \"{\\\"id\\\":\\\"\" + user.getName() + \"\\\",\\\"content\\\":\\\"Hello World\\\"}\";\n  }\n\n  @RequestMapping(value = \"/userlist\", method = RequestMethod.GET)\n  public ResponseEntity<List<SampleUser>> listAllSampleUsers() {\n      logger.info(\"Listing all users...\");\n      SampleUser s1 = new SampleUser();\n      SampleUser s2 = new SampleUser();\n\n      s1.setFirstName(\"Nilang\");\n      s1.setLastName(\"Patel\");\n\n      s2.setFirstName(\"Komal\");\n      s2.setLastName(\"Patel\");\n\n      List<SampleUser> users = new ArrayList<SampleUser>();\n\n      users.add(s1);\n      users.add(s2);\n      return new ResponseEntity<List<SampleUser>>(users, HttpStatus.OK);\n    }\n\n}\n```", "```java\n@Configuration\n@EnableGlobalMethodSecurity(prePostEnabled = true,securedEnabled = true)\npublic class MethodSecurityConfig extends GlobalMethodSecurityConfiguration {\n\n  @Override\n  protected MethodSecurityExpressionHandler createExpressionHandler() {\n    return new OAuth2MethodSecurityExpressionHandler();\n  }\n}\n```", "```java\n@Secured(\"ROLE_USER\")\npublic String getUserAccnt() {\n....\n}\n@Secured({ \"ROLE_USER\", \"ROLE_ADMIN\" })\npublic String getCompanyPolicy() {\n....\n}\n```", "```java\n@PreAuthorize(\"hasAuthority('ADMIN') and #oauth2.hasScope('read')\")\npublic String adminResource(Principal user) {\n  ...\n}\n@PreAuthorize(\"hasAuthority('USER') and #oauth2.hasScope('read') or (!#oauth2.isOAuth() and hasAuthority('USER'))\")\npublic String userResource(Principal user) {\n  ...\n}\n@PreAuthorize(\"hasAuthority('ADMIN') or #oauth2.hasScope('trust') or (!#oauth2.isOAuth() and hasAuthority('ADMIN'))\")\npublic ResponseEntity<List<SampleUser>> listAllSampleUsers() {\n  ...\n}\n```"]