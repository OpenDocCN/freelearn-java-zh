["```java\nprotected void setUp() throws Exception\n```", "```java\n    import org.junit.After;\n    import org.junit.AfterClass;\n    import org.junit.Before;\n    import org.junit.BeforeClass;\n    import org.junit.Test;\n\n    public class SanityTest {\n\n      @BeforeClass\n      public static void beforeClass() {\n        System.out.println(\"***Before Class is invoked\");\n      }\n\n      @Before\n      public void before() {\n        System.out.println(\"____________________\");\n        System.out.println(\"\\t Before is invoked\");\n      }\n      @After\n      public void after() {\n        System.out.println(\"\\t After is invoked\");\n        System.out.println(\"=================\");\n      }\n\n      @Test\n      public void someTest() {\n        System.out.println(\"\\t\\t someTest is invoked\");\n      }\n\n      @Test\n      public void someTest2() {\n        System.out.println(\"\\t\\t someTest2 is invoked\");\n      }\n\n      @AfterClass\n      public static void afterClass() {\n        System.out.println(\"***After Class is invoked\");\n      }\n    }\n    ```", "```java\n    package com.packtpub.junit.recap;\n\n    import org.junit.Assert;\n    import org.junit.Test;\n\n    public class AssertTest {\n\n      @Test\n      public void assertTrueAndFalseTest() throws Exception {\n        Assert.assertTrue(true);\n        Assert.assertFalse(false);\n      }\n\n      @Test\n      public void assertNullAndNotNullTest() throws Exception {\n        Object myObject = null;\n        Assert.assertNull(myObject);\n\n        myObject = new String(\"Some value\");\n        Assert.assertNotNull(myObject);\n      }\n    }\n    ```", "```java\n      import static org.junit.Assert.assertEquals;\n\n      @Test\n      public void assertEqualsTest() throws Exception {\n        Integer i = new Integer(\"5\");\n        Integer j = new Integer(\"5\");;\n        assertEquals(i,j);\n      }\n    ```", "```java\n       import static org.junit.Assert.assertNotSame;\n      @Test\n      public void assertNotSameTest() throws Exception {\n        Integer i = new Integer(\"5\");\n        Integer j = new Integer(\"5\");;\n        assertNotSame(i , j);\n      }\n    ```", "```java\n      import static org.junit.Assert.assertSame;\n      @Test\n      public void assertSameTest() throws Exception {\n        Integer i = new Integer(\"5\");\n        Integer j = i;\n        assertSame(i,j);\n      }\n    ```", "```java\n      @Test(expected=RuntimeException.class)\n  public void exception() {\n    throw new RuntimeException();\n  }\n```", "```java\n@RunWith(Suite.class)\npublic class Assumption {\n\n}\n```", "```java\n@Test\n@Ignore(\"John's holiday stuff failing\")\npublic void when_today_is_holiday_then_stop_alarm() {\n}\n```", "```java\npublic class TestExecutionOrder {\n  @Test   public void edit() throws Exception {\n    System.out.println(\"edit executed\");\n  }\n  @Test   public void create() throws Exception {\n    System.out.println(\"create executed\");\n  }\n  @Test   public void remove() throws Exception {\n    System.out.println(\"remove executed\");\n  }  \n}\n```", "```java\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestExecutionOrder { â€¦ }\n```", "```java\npublic class Assumption {\n\n  boolean isSonarRunning = false;\n  @Test \n  public void very_critical_test() throws Exception {\n    isSonarRunning = true;\n    Assume.assumeFalse(isSonarRunning);\n    assertTrue(true);\n  }\n\n}\n```", "```java\npublic void very_critical_test() throws Exception {\n    isSonarRunning = false;\n    Assume.assumeFalse(isSonarRunning);\n    assertTrue(true);\n}\n```", "```java\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite;\n\n@RunWith(Suite.class)\n@Suite.SuiteClasses({ AssertTest.class, TestExecutionOrder.class,Assumption.class })\npublic class TestSuite {\n\n}\n```", "```java\n  public static void assertThat(Object actual, Matcher matcher\n```", "```java\nimport static org.hamcrest.CoreMatchers.not;\nimport static org.hamcrest.CoreMatchers.is;\nimport static org.junit.Assert.assertThat;\n\nimport org.junit.Test;\n\npublic class AssertThatTest {\n\n  @Test\n  public void verify_Matcher() throws Exception {\n    int age = 30;\n    assertThat(age, equalTo(30));\n    assertThat(age, is(30));\n\n    assertThat(age, not(equalTo(33)));\n    assertThat(age, is(not(33)));\n  }\n}\n```", "```java\n@Test\n  public void verify_multiple_values() throws Exception {\n\n    double marks = 100.00;\n    assertThat(marks, either(is(100.00)).or(is(90.9)));\n\n    assertThat(marks, both(not(99.99)).and(not(60.00)));\n\n    assertThat(marks, anyOf(is(100.00),is(1.00),is(55.00),is(88.00),is(67.8)));\n\n    assertThat(marks, not(anyOf(is(0.00),is(200.00))));\n\n    assertThat(marks, not(allOf(is(1.00),is(100.00), is(30.00))));\n  }\n```", "```java\n   @Test\n  public void verify_collection_values() throws Exception {\n\n    List<Double> salary =Arrays.asList(50.0, 200.0, 500.0);\n\n    assertThat(salary, hasItem(50.00));\n    assertThat(salary, hasItems(50.00, 200.00));\n        assertThat(salary, not(hasItem(1.00)));\n  }\n```", "```java\n@Test\n  public void verify_Strings() throws Exception {\n    String name = \"John Jr Dale\";\n    assertThat(name, startsWith(\"John\"));\n    assertThat(name, endsWith(\"Dale\"));\n    assertThat(name, containsString(\"Jr\"));\n  }\n```", "```java\nassertThat works:\n```", "```java\n  if(!matcher.matches(actual)){\n         Description description = new StringDescription();\n         description.appendText(reason).appendText(\"\\nExpected: ).appendDescriptionOf(matcher).appendText(\"\\n   but: \");\n\n         matcher.describeMismatch(actual, description);\n         throw new AssertionError(description.toString());\n  }\n```", "```java\n    public class LessThanOrEqual<T extends Comparable<T>> extends BaseMatcher<Comparable<T>> {\n\n    }\n    ```", "```java\n    assertThat (actual, matcher(expectedValue)).\n    ```", "```java\n    public class LessThanOrEqual<T extends Comparable<T>> extends BaseMatcher<Comparable<T>> {\n      private final Comparable<T> expectedValue;\n\n      public LessThanOrEqual(T expectedValue) {\n       this.expectedValue = expectedValue;\n      }\n\n      @Override\n      public void describeTo(Description description) {\n        description.appendText(\" less than or equal(<=) \"+expectedValue);\n      }\n\n      @Override\n      public boolean matches(Object t) {\n        int compareTo = expectedValue.compareTo((T)t);\n        return compareTo > -1;\n      }\n    }\n    ```", "```java\n      @Factory\n      public static<T extends Comparable<T>>  Matcher<T>        \n        lessThanOrEqual(T t) {\n        return new LessThanOrEqual(t);\n        }\n    ```", "```java\n       @Test\n      public void lessthanOrEquals_custom_matcher() throws Exception\n      {\n        int actualGoalScored = 2;\n        assertThat(actualGoalScored, lessThanOrEqual(4));\n        assertThat(actualGoalScored, lessThanOrEqual(2));\n\n        double originalPI = 3.14;\n        assertThat(originalPI, lessThanOrEqual(9.00));\n\n        String authorName = \"Sujoy\";\n        assertThat(authorName, lessThanOrEqual(\"Zachary\"));\n      }\n    ```", "```java\n        int maxInt = Integer.MAX_VALUE;\n        assertThat(maxInt, lessThanOrEqual(Integer.MIN_VALUE));\n    ```", "```java\n    package com.packtpub.junit.recap;\n\n    public class Factorial {\n\n      public long factorial(long number) {\n        if(number == 0) {\n          return 1;\n        }\n\n        return number*factorial(number-1);\n      }\n    }\n    ```", "```java\n    import org.junit.runner.RunWith;\n    import org.junit.runners.Parameterized;\n\n    @RunWith(Parameterized.class)\n    public class ParameterizedFactorialTest {\n\n    }\n    ```", "```java\n    @parameters method factorialData():\n    ```", "```java\n      @Parameters\n      public static Collection<Object[]> factorialData() {\n        return Arrays.asList(new Object[][] {\n\n          { 0, 1 }, { 1, 1 }, { 2, 2 }, { 3, 6 }, { 4, 24 }, { 5, 120 },{ 6, 720 }  \n        });\n      }\n    ```", "```java\n        private int number;\n        private int expectedResult;\n\n        public ParameterizedFactorialTest(int input, int expected) {\n            number= input;\n            expectedResult= expected;\n        }\n    ```", "```java\n       @Test\n      public void factorial() throws Exception {\n        Factorial fact = new Factorial();\n        assertEquals(fact.factorial(number),expectedResult);\n      }\n    ```", "```java\n    @RunWith(Parameterized.class)\n    public class ParameterizeParamFactorialTest {\n\n      @Parameters\n      public static Collection<Object[]> factorialData() {\n        return Arrays.asList(new Object[][] {\n\n          { 0, 1 }, { 1, 1 }, { 2, 2 }, { 3, 6 }, { 4, 24 }, { 5, 120 },{ 6, 720 }  \n        });\n      }\n\n      public int number;\n      public int expectedResult;\n\n      @Test\n      public void factorial() throws Exception {\n        Factorial fact = new Factorial();\n      assertEquals(fact.factorial(number),expectedResult);\n      }\n    }\n    ```", "```java\n        @Parameter(value=0)\n        public int number;\n        @Parameter(value=1)\n        public int expectedResult;\n    ```", "```java\n  @Test(timeout=10)\n  public void forEver() throws Exception {\n    Thread.sleep(100000);\n  }\n```", "```java\n    @RunWith(Theories.class)\n    public class MyTheoryTest {\n\n    }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class MyTheoryTest {\n\n      @Theory\n      public void sanity() {\n        System.out.println(\"Sanity check\");\n      }\n    }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class MyTheoryTest {\n      @DataPoint public static String name =\"Jack\";\n\n      @Theory\n      public void sanity(String aName) {\n        System.out.println(\"Sanity check \"+aName);\n      }\n    }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class MyTheoryTest {\n      @DataPoint public static String jack =\"Jack\";\n      @DataPoint public static String mike =\"Mike\";\n\n      @Theory\n      public void sanity(String aName) {\n        System.out.println(\"Sanity check \"+aName);\n      }\n    }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class MyTheoryTest {\n      @DataPoint public static String jack =\"Jack\";\n      @DataPoint public static String mike =\"Mike\";\n\n      @Theory\n      public void sanity(String firstName, String lastName) {\n        System.out.println(\"Sanity check \"+firstName+\", \"+lastName);\n      }\n    }\n    ```", "```java\n      @DataPoints  public static char[] chars = \n              new char[] {'A', 'B', 'C'};\n      @Theory\n      public void build(char c, char d) {\n        System.out.println(c+\" \"+d);\n      }\n    ```", "```java\n      public class Adder {\n\n        public Object add(Number a, Number b) {\n          return a.doubleValue()+b.doubleValue();\n        }\n\n        public Object add(String a, String b) {\n          return a+b;\n        }\n      }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class ExternalTheoryTest {\n\n    }\n    ```", "```java\n    public abstract List<PotentialAssignment> getValueSources(ParameterSignature parametersignature);\n    ```", "```java\n      import org.junit.experimental.theories.ParameterSignature;\n      import org.junit.experimental.theories.ParameterSupplier;\n      import org.junit.experimental.theories.PotentialAssignment;\n\n      public  class NumberSupplier extends ParameterSupplier {\n        @Override\n          public List<PotentialAssignment>       \n          getValueSources(ParameterSignature sig) {\n            List<PotentialAssignment> list = new ArrayList<PotentialAssignment>();\n            list.add(PotentialAssignment.forValue(\"long\", 2L));\n            list.add(PotentialAssignment.forValue(\"float\", 5.00f));\n            list.add(PotentialAssignment.forValue(\"double\", 89d));\n            return list;\n      }\n\n    };\n    ```", "```java\n    import org.junit.experimental.theories.ParametersSuppliedBy;\n    import org.junit.experimental.theories.Theories;\n    import org.junit.experimental.theories.Theory;\n    import org.junit.runner.RunWith;\n\n    @RunWith(Theories.class)\n    public class ExternalTheoryTest {\n\n      @Theory\n      public void adds_numbers(\n      @ParametersSuppliedBy(NumberSupplier.class) Number num1,\n      @ParametersSuppliedBy(NumberSupplier.class) Number num2) \n      {\n        System.out.println(num1 + \" and \" + num2);\n      }\n\n    }\n    ```", "```java\n    @RunWith(Theories.class)\n    public class ExternalTheoryTest {\n\n      @Theory\n      public void adds_numbers(\n      @ParametersSuppliedBy(NumberSupplier.class) Number num1,\n      @ParametersSuppliedBy(NumberSupplier.class) Number num2) {\n        Adder anAdder = new Adder();\n        double expectedSum = num1.doubleValue()+num2.doubleValue();\n        double actualResult = (Double)anAdder.add(num1, num2);\n        assertEquals(actualResult, expectedSum, 0.01);\n      }\n\n    }\n    ```", "```java\n@Test(timeout=10)\n```", "```java\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.Timeout;\n\npublic class TimeoutTest {\n\n    @Rule\n    public Timeout globalTimeout =  new Timeout(20);\n\n    @Test\n    public void testInfiniteLoop1() throws InterruptedException{\n      Thread.sleep(30);\n    }\n\n    @Test\n    public void testInfiniteLoop2() throws InterruptedException{\n      Thread.sleep(30);\n    }\n\n}\n```", "```java\npublic class ExpectedExceptionRuleTest {\n\n   @Rule\n    public ExpectedException thrown= ExpectedException.none();\n\n    @Test\n    public void throwsNothing() {\n\n    }\n\n    @Test\n    public void throwsNullPointerException() {\n      thrown.expect(NullPointerException.class);\n      throw new NullPointerException();\n    }\n\n    @Test\n    public void throwsIllegalStateExceptionWithMessage() {\n      thrown.expect(IllegalStateException.class);\n      thrown.expectMessage(\"Is this a legal state?\");\n\n      throw new IllegalStateException(\"Is this a legal state?\");\n    }\n}\n```", "```java\n@Rule\n  public TemporaryFolder folder = new TemporaryFolder();\n\n  @Test\n  public void testUsingTempFolder() throws IOException {\n    File createdFile = folder.newFile(\"myfile.txt\");\n    File createdFolder = folder.newFolder(\"mysubfolder\");\n\n  }\n```", "```java\nimport org.junit.rules.ErrorCollector;\nimport static org.hamcrest.CoreMatchers.equalTo;\n\npublic class ErrorCollectorTest {\n\n   @Rule\n   public ErrorCollector collector = new ErrorCollector();\n\n   @Test\n   public void fails_after_execution() {\n   collector.checkThat(\"a\", equalTo(\"b\"));\n   collector.checkThat(1, equalTo(2));\n   collector.checkThat(\"ae\", equalTo(\"g\"));\n   }\n}\n```", "```java\npublic class VerifierRuleTest {\n  private String errorMsg = null;\n\n  @Rule\n  public TestRule rule = new Verifier() {\n    protected void verify() {\n      assertNull(\"ErrorMsg should be null after each test execution\",errorMsg);\n    }\n  };\n\n  @Test\n  public void testName() throws Exception {\n    errorMsg = \"Giving a value\";\n  }\n}\n```", "```java\n@FixMethodOrder(MethodSorters.NAME_ASCENDING)\npublic class TestWatcherTest {\n\n  private static String dog = \"\";\n\n    @Rule\n    public TestWatcher watchman = new TestWatcher() {\n      @Override\n      public Statement apply(Statement base, Description description) {\n        return super.apply(base, description);\n      }\n\n      @Override\n      protected void succeeded(Description description) {\n        dog += description.getDisplayName() + \" \" + \"success!\\n\";\n      }\n\n      @Override\n      protected void failed(Throwable e, Description description) {\n        dog += description.getDisplayName() + \" \" + e.getClass().getSimpleName() + \"\\n\";\n      }\n\n      @Override\n      protected void starting(Description description) {\n        super.starting(description);\n      }\n\n      @Override\n      protected void finished(Description description) {\n        super.finished(description);\n      }\n    };\n\n    @Test\n    public void red_test() {\n      fail();\n    }\n\n    @Test\n    public void green() {\n    }\n\n    @AfterClass\n    public static void afterClass() {\n      System.out.println(dog);\n    }\n}\n```", "```java\ngreen(com.packtpub.junit.recap.rule.TestWatcherTest) success!\nred_test(com.packtpub.junit.recap.rule.TestWatcherTest) AssertionError\n\n```", "```java\npublic class TestNameRuleTest {\n\n  @Rule\n    public TestName name = new TestName();\n\n    @Test\n    public void testA() {\n      assertEquals(\"testA\", name.getMethodName());\n    }\n\n    @Test\n    public void testB() {\n      assertEquals(\"testB\", name.getMethodName());\n    }\n}\n```", "```java\nclass Resource{\n  public void open() {\n    System.out.println(\"Opened\");\n  }\n\n  public void close() {\n    System.out.println(\"Closed\");\n  }\n\n  public double get() {\n    return Math.random();\n  }\n}\n```", "```java\npublic class ExternalResourceTest {\n  Resource resource;\n  public @Rule TestName name = new TestName();\n\n  public @Rule ExternalResource rule = new ExternalResource() {\n    @Override protected void before() throws Throwable {\n      resource = new Resource();\n      resource.open();\n      System.out.println(name.getMethodName());\n    }\n\n    @Override protected void after()  {\n      resource.close();\n      System.out.println(\"\\n\");\n    }\n  };\n\n  @Test\n  public void someTest() throws Exception {\n    System.out.println(resource.get());\n  }\n\n  @Test\n  public void someTest2() throws Exception {\n    System.out.println(resource.get());\n  }\n}\n```", "```java\nOpened\nsomeTest2\n0.5872875884671511\nClosed\n\nOpened\nsomeTest\n0.395586457988541\nClosed\n\n```", "```java\npublic interface SmartTests { /* category marker */ }\npublic interface CrazyTests { /* category marker */ }\n\npublic class SomeTest {\n  @Test\n  public void a() {\n    fail();\n  }\n\n  @Category(CrazyTests.class)\n  @Test\n  public void b() {\n  }\n}\n\n@Category({CrazyTests.class, SmartTests.class})\npublic class OtherTest {\n  @Test\n  public void c() {\n\n  }\n}\n\n@RunWith(Categories.class)\n@IncludeCategory(CrazyTests.class)\n@SuiteClasses( { SomeTest.class, OtherTest.class }) // Note that Categories is a kind of Suite\npublic class CrazyTestSuite {\n  // Will run SomeTest.b and OtherTest.c, but not SomeTest.a\n}\n\n@RunWith(Categories.class)\n@IncludeCategory(CrazyTests.class)\n@ExcludeCategory(SmartTests.class)\n@SuiteClasses( { SomeTest.class, OtherTest.class }) \npublic class CrazyTestSuite {\n  // Will run SomeTest.b, but not SomeTest.a or OtherTest.c\n}\n```"]