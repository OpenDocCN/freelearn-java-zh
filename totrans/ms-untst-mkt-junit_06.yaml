- en: Chapter 6. Revealing Code Quality
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '"Testing by itself does not improve software quality. Test results are an indicator
    of quality, but in and of themselves, they don''t improve it. Trying to improve
    software quality by increasing the amount of testing is like trying to lose weight
    by weighing yourself more often. What you eat before you step onto the scale determines
    how much you will weigh, and the software development techniques you use determine
    how many errors testing will find. If you want to lose weight, don''t buy a new
    scale; change your diet. If you want to improve your software, don''t test more;
    develop better."'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Steve McConnell
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A poorly developed system generates more bugs than a well-designed system. Manual
    testing can identify software bugs but cannot improve the quality of the system;
    however, TDD and JUnit tests are considered as automated unit testing frameworks,
    and they indeed help in improving the quality of the system. Static code quality
    analysis exposes quality issues in the code and provides suggestions for improvement,
    and continuous health monitoring keeps the system healthy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Code quality metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static code analysis using PMD, Checkstyle, and FindBugs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SonarQube dashboard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SonarQube runner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code quality analysis using Ant, Maven, and Gradle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the static code analysis
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static code analysis is the process of analyzing code without executing it.
    Code review is also a sort of static code analysis but is performed with humans
    or team members. Generally, static code analysis is performed by an automated
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, a static analysis includes the following metrics:'
  prefs: []
  type: TYPE_NORMAL
- en: Violation of coding best practices such as long method body, long parameter
    list, large classes, and variable names.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cohesion represents responsibility of a single module (class). If a module or
    class possesses too many responsibilities, such as tax calculation, sending e-mails,
    and formatting user inputs, the class or module is less cohesive. Performing multiple
    dissimilar tasks introduces complexity and maintainability issues. High cohesion
    means performing only a particular type of task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppose a person is assigned to handle customer tickets, code new features,
    design the architecture, organize the annual office party, and so on; this person
    will be over occupied and is bound to make mistakes. It will be very difficult
    for him or her to manage all the responsibilities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In refactoring terms, if a class performs too many tasks, the class is called
    a GOD object or class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Coupling measures the dependency on other modules or code. Low dependency enforces
    high cohesion. If module C depends on two other modules, A and B, any change in
    the APIs of A or B will force C to change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event-driven architecture is an example of loose coupling. In an event-driven
    system when something changes, an event is published to a destination without
    any knowledge of who will process the event; the event consumers consume the event
    and take action(s). This decouples the event publisher from the event consumers.
    So, any change in the consumer doesn't force the publisher to change.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Cyclomatic complexity measures the complexity of a program. In 1976, Thomas
    J. McCabe, Sr. developed cyclomatic complexity. It measures the number of linearly
    independent paths in a program. This is not restricted to a program-level complexity,
    but it can also be applied to individual functions, modules, methods, or classes
    within a program.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cyclomatic complexity of a program is defined with a control flow graph of the
    program. Complexity is represented as *M = E-N+2P*, where *M* is complexity, *E*
    is the number of edges of the graph, *N* is the number of nodes of the graph,
    and *P* is the number of connected components. Any method with a complexity greater
    than 10 has a serious problem.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'A method that has no conditional statements has a cyclomatic complexity of
    1\. The following diagram represents the directed graph and complexity:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Understanding the static code analysis](img/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'A method with a single condition (an IF) or a single loop (a FOR) has a complexity
    of 2\. The following diagram explains the calculation:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Understanding the static code analysis](img/00078.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following is the corresponding code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Various automated tools are available for static code analysis. In addition,
    the built-in Eclipse compiler can already perform a lot of static code analysis.
    The following are the widely used ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Checkstyle**: This tool performs static code analysis, and it can also be
    used to show violations of a configured coding standard. It comes under a GNU
    General Public License. You can check it out at the following link: [http://checkstyle.sourceforge.net](http://checkstyle.sourceforge.net).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**FindBugs**: This is an open source static bytecode analyzer for potential
    Java errors. Plugins are available for Eclipse, NetBeans, and IntelliJ IDEA. It
    comes under a GNU General Public License. FindBugs can be configured with Jenkins.
    The following is the link for the FindBugs website: [http://findbugs.sourceforge.net](http://findbugs.sourceforge.net).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PMD**: This is a static ruleset based on the Java source code analyzer that
    identifies potential problems. PMD has an Eclipse plugin that shows an error icon
    in the editor, but PMD errors are not true errors; rather, they''re the result
    of inefficient code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will examine the static analysis tools.
  prefs: []
  type: TYPE_NORMAL
- en: Working with the Checkstyle plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This class, `Calculator.java`, calculates the sum of a list of numbers. It's
    a generic class; we can calculate the sum of integers or doubles or any number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on `CodeQualityChapter06` and enable **Checkstyle**. The following
    screenshot displays the Checkstyle pop-up menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Checkstyle plugin](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This action will trigger the Checkstyle validation. It will open the **Checks**
    tab (if the **Checks** tab is not opened automatically, then open the view from
    the show views menu) and show a graphical view of violations. The following screenshot
    displays the graphical violation pie chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Checkstyle plugin](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another view shows the violations in a tabular format. The following screenshot
    displays the violations in a tabular format:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the Checkstyle plugin](img/00082.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Exploring the FindBugs plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the configuration and usage of the FindBugs plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'FindBugs works with three types of errors. You can visit [http://findbugs.sourceforge.net/bugDescriptions.html](http://findbugs.sourceforge.net/bugDescriptions.html)
    for the FindBugs error details. The following are the FindBugs-supported error
    categories and errors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Correctness bug:** This is an apparent coding mistake that results in code
    that was probably not what the developer intended; for example, a method ignores
    the return value of a self-assigned field. The following are a few examples of
    a correctness bug:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class defines `tostring()` but it should be `toString()`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A value is checked here to see whether it is null, but this value can't be null
    because it was previously dereferenced, and if it were null, a null pointer exception
    would have occurred at the earlier dereference
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The method in the subclass doesn't override a similar method in a superclass
    because the type of a parameter doesn't exactly match the type of the corresponding
    parameter in the superclass
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `equal(Object)` but it should be `equals(Object)`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bad practice:** This includes violations of recommended best practices and
    essential coding practice. The following are the examples of bad practices:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hash code and equals problems**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `hashCode()` but it should be `equals()` and `hashCode()`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `equals()` but it should be `hashCode()`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `hashCode()` and uses `Object.equals()`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `equals()` and uses `Object.hashCode()`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cloneable idiom**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class defines `clone()` but doesn't implement `Cloneable`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Serializable problems**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Class is `Serializable`, but doesn't define `serialVersionUID`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparator doesn't implement `Serializable`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Non serializable class has a `serializable` inner class
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dropped exceptions**: Here, an exception is created and dropped rather than
    thrown, such as the following example, where the exception was created but not
    thrown:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Misuse of finalize**:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Explicit invocation of finalize
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Finalizer does not call the superclass finalizer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dodgy errors**: This kind of code is confusing, anomalous, or written in
    a way that leads to errors. Examples include the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dead store of class literal**: An instruction assigns a class literal to
    a variable and then never uses it.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Switch fall through**: A value stored in the previous switch case is overwritten
    here due to a switch fall through. It is likely that you forgot to put a break
    or return at the end of the previous case.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unconfirmed type casts** and **redundant null check**: This error occurs
    when a value is `null`, for example, consider the following code:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The following is the update site URL for the FindBugs Eclipse plugin: [http://findbugs.cs.umd.edu/eclipse](http://findbugs.cs.umd.edu/eclipse).'
  prefs: []
  type: TYPE_NORMAL
- en: You can also install it through Eclipse Marketplace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install FindBugs and then add the following code to the `CodeQualityChapter06`
    project for verification:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the project and click on the **Find Bugs** menu. The following
    is the pop-up menu displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the FindBugs plugin](img/00083.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the source file; it shows the bug icons. The following screenshot displays
    the bugs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the FindBugs plugin](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot displays the bugs in a tabular format with the error
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exploring the FindBugs plugin](img/00085.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Working with the PMD plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PMD can find duplicate code, dead code, empty if/while statements, empty try/catch
    blocks, complicated expressions, cyclomatic complexity, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the update site URL for Eclipse: [http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/](http://sourceforge.net/projects/pmd/files/pmd-eclipse/update-site/).
    You can also install it through Eclipse Marketplace.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, right-click on the `CodeQualityChapter06` project and select
    the **Toggle PMD Nature** menu item. It will enable the project for PMD analysis.
    The following screenshot demonstrates the PMD pop-up menu options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the PMD plugin](img/00086.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'PMD shows the errors in the **Problems** tab. The following screenshot shows
    the PMD violations in the **Problems** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Working with the PMD plugin](img/00087.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The next section will describe the SonarQube dashboard and analyze projects
    using the SonarQube runner, Ant, Gradle, and Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring code quality with SonarQube
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SonarQube is a web-based open source continuous quality assessment dashboard.
    It comes with a GNU General Public License and supports cross-platform, so it
    can be installed on many popular operating systems. SonarQube is developed in
    Java. As of March 2014, the latest version is 4.1.2.
  prefs: []
  type: TYPE_NORMAL
- en: 'SonarQube exhibits the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: It is a web-based code quality dashboard that can be accessed from anywhere.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports numerous languages. The languages and coding platforms supported
    in Version 4.1.2 are ABAP, Android, C/C++, C#, COBOL, Erlang, Flex/ActionScript,
    Groovy, Java, JavaScript, Natural, PHP, PL/I, PL/SQL, Python, VB.NET, Visual Basic
    6, Web (analysis of HTML included in pages on HTML, JSP, JSF, Ruby, PHP, and so
    on), and XML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It offers the following metrics:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs and potential bugs
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Breach in coding standards
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Duplications
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lack of unit tests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bad distribution of complexities
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaghetti design
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not enough or too many comments
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It records history in a database and provides chronological graphs of quality
    metrics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It can be expanded using numerous plugins.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports continuous automated inspection using Ant/Maven/Gradle and CI tools
    such as Jenkins, CruiseControl, and Bamboo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It integrates with Eclipse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following section covers the SonarQube installation and usage.
  prefs: []
  type: TYPE_NORMAL
- en: Running SonarQube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following are the SonarQube configuration steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download SonarQube from [http://www.sonarqube.org/downloads/](http://www.sonarqube.org/downloads/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file into the directory of your choice. We'll refer
    to it as `<sonar_install_directory>` or `SONAR_HOME` in the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `<sonar_install_directory>/bin` directory. The `bin` directory lists
    the SonarQube-supported operating systems. Go to a specific OS directory such
    as open `windows-x86-64` for a Windows 64-bit machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run a shell script or batch file to start Sonar. The following screenshot shows
    the command prompt output of a Windows 64-bit machine. Note that the server logs
    the **Web server is started** information when the web server is started:![Running
    SonarQube](img/00088.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Internet Explorer and type in `http://localhost:9000`. This will launch
    the SonarQube dashboard. Initially, the dashboard shows an empty project list.
    First, we need to analyze the projects to get them displayed in the dashboard.
    The following is the SonarQube dashboard on display:![Running SonarQube](img/00089.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installation is complete. Next, we need to analyze a project using SonarQube.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code with the SonarQube runner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '![Analyzing code with the SonarQube runner](img/00090.jpeg)*   Create a new
    `SONAR_RUNNER_HOME` environment variable, which is set to `<runner_install_directory>`.*   Add
    the `<runner_install_directory>/bin` directory to your `Path` variable.*   Open
    command prompt and check whether the runner is installed. Issue the `sonar-runner
    –h` command, and you will get the following output:![Analyzing code with the SonarQube
    runner](img/00091.jpeg)*   Go to the `CodeQualityChapter06` project folder, create
    a properties file named `sonar-project.properties`, and add the following lines
    to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the command prompt, change the directory to `CodeQualityChapter06`, and
    issue the `sonar-runner` command; this will start the project analysis. Sonar
    will download JAR files and store the analysis data into an H2 database. Once
    the analysis is over, open `http://localhost:9000`; this will launch the SonarQube
    dashboard.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The metrics displayed in the dashboard are technical debt, code details, documentation,
    code duplication, complexity, and coverage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Technical Debt** metric:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00092.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following screenshot shows the code details metric:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00093.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following screenshot shows the **Documentation** metric:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00094.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following screenshot shows the cyclomatic **Complexity** metric:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00095.jpeg)*   Click on the
    **Issues 12** hyperlink in the **Technical Debt** metric; this will open an issue''s
    details with a severity legend. The following is the **Severity** legend:![Analyzing
    code with the SonarQube runner](img/00096.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following screenshot shows the issue details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00097.jpeg)*   Click on any
    of the three complexity hyperlinks. Sonar will open the files and show the complexity
    details.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following is an example of the complexity of `Buggy.java`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Analyzing code with the SonarQube runner](img/00098.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The **Hotspot** view displays the pain areas of the project, such as hotspots
    by duplicate lines, major violations, most violated rules, and the most violated
    resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Time Machine** view displays the chronological view of the project, such
    as a graphical day- or month-wise comparison of code complexity or code coverage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Improving quality with the Sonar Eclipse plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sonar provides an Eclipse plugin for accessing and fixing the Sonar-reported
    code issues in the Eclipse editor. The plugin can be downloaded from [http://www.sonarsource.com/products/plugins/developer-tools/eclipse/](http://www.sonarsource.com/products/plugins/developer-tools/eclipse/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the plugin is installed, right-click on the project, open the **Configure**
    menu, and click on the **Associate with Sonar...** menu item. The following screenshot
    shows the **Configure** menu details:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving quality with the Sonar Eclipse plugin](img/00099.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: In the `sonar-project.properties` file, we stored the `sonar.projectKey=packt:CodeQualityChapter06`
    project key.
  prefs: []
  type: TYPE_NORMAL
- en: In the Sonar wizard, enter `GroupId=packt` and `ArtifactId= CodeQualityChapter06`.
    Click on **Find on server** and then click on **Finish**. This will connect to
    the local Sonar server and bring the issue details into the **Problems** tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the Sonar wizard''s screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving quality with the Sonar Eclipse plugin](img/00100.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are the violations from the Sonar repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving quality with the Sonar Eclipse plugin](img/00101.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on any problem, and it will take you to the source code''s line and show
    a tooltip of the problem. The following screenshot shows the blocker violation
    that the `hashCode()` method is not implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Improving quality with the Sonar Eclipse plugin](img/00102.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Add a `hashCode` method, rerun the Sonar runner, and launch the Sonar Eclipse
    wizard; it will remove the blocking issue.
  prefs: []
  type: TYPE_NORMAL
- en: Monitoring quality with Gradle and SonarQube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section covers the Gradle integration with Sonar. Gradle has an inbuilt
    Sonar plugin. Create a `build.gradle` file under `/Packt/Chapter06/CodeQualityChapter06`.
    Add the following lines to the `build.gradle` file and the Sonar lines are highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `sonar.projectKey` refers to `packt:CodeQualityChapter06`. Open the
    command prompt and issue the `gradle sonarRunner` command. This will start building
    the project. The following is the console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring quality with Gradle and SonarQube](img/00103.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Open the Sonar URL, and it will show the coverage computed by the JaCoCo plugin.
    The following is the code coverage and the technical debt output. Note that the
    **+8** new issues are added to the project. Technical debt is increased from 0.4
    days to 1.2 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring quality with Gradle and SonarQube](img/00104.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring quality with Maven and SonarQube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This section describes how to integrate Maven with SonarQube. We will use the
    `CodeQualityChapter06` Eclipse project for the analysis. Maven has a plugin for
    Sonar. Create a `pom.xml` file under `/Packt/Chapter06/CodeQualityChapter06`.
    Add the following lines to the `pom.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Open the command prompt, go to the project base folder, and issue the `mvn sonar:sonar`
    command. This command will download the SonarQube version of JAR files from the
    repository and start analyzing the project. Note the highlighted section `<sonar.language>java<…>`
    in the preceding script. This `<sonar.language>` tag signifies that the Maven
    will analyze a `java` project.
  prefs: []
  type: TYPE_NORMAL
- en: In the Gradle script or Sonar runner, we didn't mention a project version; here
    in Maven, as per the Maven project convention, we have to specify a `<version>1.0-SNAPSHOT</version>`
    version in the `POM.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: SonarQube uniquely identifies a project using a key (`GroupId` or `ArtifactId`)
    and a version. So, Maven analysis will create a new project statistics in the
    Sonar server as the version number is supplied in Maven, but not in Gradle and
    Sonar runner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the **Projects** section on the Sonar dashboard.
    Note that the Maven analysis created **Version** **1.0-SNAPSHOT**, whereas the
    Gradle and Sonar runner both updated an **unspecified** version of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Monitoring quality with Maven and SonarQube](img/00105.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Monitoring quality with Ant and SonarQube
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section describes how to configure Ant to integrate with Sonar. An Ant
    target needs a task to perform a build step. SonarQube provides an Ant task for
    project analysis. The Ant task JAR needs to be downloaded from [http://repository.codehaus.org/org/codehaus/sonar-plugins/sonar-ant-task/2.1/sonar-ant-task-2.1.jar](http://repository.codehaus.org/org/codehaus/sonar-plugins/sonar-ant-task/2.1/sonar-ant-task-2.1.jar).
  prefs: []
  type: TYPE_NORMAL
- en: We will analyze the `CodeQualityChapter06` project with Ant. Copy the downloaded
    JAR file in `\Packt\chapter06\lib` and create a `build.xml` file directly under
    `CodeQualityChapter06`. You can copy the existing `build.xml` file that we used
    in [Chapter 5](part0030_split_000.html#page "Chapter 5. Exploring Code Coverage"),
    *Code Coverage*, or download the code for this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XML namespaces act like Java packages and provide a qualified name for an XML
    element or attribute and avoid name collision. The namespace is defined by the
    `xmlns` attribute at the start tag of an element. The namespace declaration has
    the `syntax.`
  prefs: []
  type: TYPE_NORMAL
- en: '``To access a Sonar task, we will refer to a namespace `sonar` defined in the
    `antlib:org.sonar.ant` URI. We will define the URI in `taskdef`.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``Modify the `build.xml` file and add the `sonar` namespace and the following
    snippet (excluding the common tasks, compilation task, and test tasks for the
    space economy):``'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '``Note that the `sonar.projectKey`, `sonar.projectName`, `sonar.projectVersion`,
    and `sonar.language` properties are defined in the preceding XML code. The Sonar
    task uses these attributes to uniquely identify a project and project language.
    Also note that a `taskdef` URI, `uri="antlib:org.sonar.ant"`, is defined to locate
    an `org/sonar/ant/antlib.xml` XML resource in the `${lib.dir}/sonar-ant-task-2.1.jar`
    classpath. The `sonar-ant-task` JAR contains the XML file.``'
  prefs: []
  type: TYPE_NORMAL
- en: '``Open the command prompt, change the directory to `CodeQualityChapter06`,
    and issue the `ant sonar` command. This will execute the Sonar task and start
    analyzing the project.``'
  prefs: []
  type: TYPE_NORMAL
- en: '`The following is the SonarQube dashboard output. The second row with **Version**
    **2.0** and key **packt:chapter06_ant** is the Ant analysis result:`'
  prefs: []
  type: TYPE_NORMAL
- en: '`![Monitoring quality with Ant and SonarQube](img/00106.jpeg)` `# Getting familiar
    with false positives    This section deals with the false positives. In general,
    a static code analysis tool analyzes a source code against a set of rules and
    reports a violation when it finds a violation pattern in the source code. However,
    when we review the pattern and find that the violation is not correct in the context,
    then the reported violation is a false positive.    Static analysis tools report
    violations, but we have to filter out correct rule sets and remove the false positive
    rules. The SonarQube manual code review feature enables you to review code, add
    comments, and flag violations as false positives. The following Sonar URL describes
    how to review violations and flag violations as false positives: [http://www.sonarqube.org/sonar-2-8-in-screenshots/](http://www.sonarqube.org/sonar-2-8-in-screenshots/).    #
    Summary    This chapter explained the static code analysis and code quality attributes
    in depth. It covered the SonarQube code quality dashboard, static code analysis
    using Eclipse plugins, the Sonar runner and build scripts such as Ant, Maven,
    and Gradle, and code quality tools such as PMD, Checkstyle, and FindBugs.    By
    now, the reader will be able to configure the Sonar dashboard, set up Eclipse
    plugins, and configure Sonar runner and build scripts to analyze code quality
    using PMD, FindBugs, and Checkstyle.    The next chapter will cover the unit testing
    web tier code with mock objects.`'
  prefs: []
  type: TYPE_NORMAL
