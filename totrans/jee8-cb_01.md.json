["```java\n<dependencies>\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hamcrest</groupId>\n            <artifactId>hamcrest-core</artifactId>\n            <version>1.3</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate.validator</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>6.0.8.Final</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish</groupId>\n            <artifactId>javax.el</artifactId>\n            <version>3.0.1-b10</version>\n        </dependency>\n</dependencies>\n```", "```java\npublic class User {\n\n    @NotBlank\n    private String name;\n\n    @Email\n    private String email;\n\n    @NotEmpty\n    private List<@PositiveOrZero Integer> profileId;\n\n    public User(String name, String email, List<Integer> profileId) {\n        this.name = name;\n        this.email = email;\n        this.profileId = profileId;\n    }\n}\n```", "```java\npublic class UserTest {\n\n    private static Validator validator;\n\n    @BeforeClass\n    public static void setUpClass() {\n        validator = Validation.buildDefaultValidatorFactory()\n        .getValidator();\n    }\n\n    @Test\n    public void validUser() {\n        User user = new User(\n            \"elder\", \n            \"elder@eldermoraes.com\", \n            asList(1,2));\n\n            Set<ConstraintViolation<User>> cv = validator\n            .validate(user);\n            assertTrue(cv.isEmpty());\n    }\n\n    @Test\n    public void invalidName() {\n        User user = new User(\n            \"\", \n            \"elder@eldermoraes.com\", \n            asList(1,2));\n\n            Set<ConstraintViolation<User>> cv = validator\n            .validate(user);\n            assertEquals(1, cv.size());\n    }\n\n    @Test\n    public void invalidEmail() {\n        User user = new User(\n        \"elder\", \n        \"elder-eldermoraes_com\", \n        asList(1,2));\n\n        Set<ConstraintViolation<User>> cv = validator\n        .validate(user);\n        assertEquals(1, cv.size());\n    } \n\n    @Test\n    public void invalidId() {\n        User user = new User(\n            \"elder\", \n            \"elder@eldermoraes.com\", \n            asList(-1,-2,1,2));\n\n            Set<ConstraintViolation<User>> cv = validator\n            .validate(user);\n            assertEquals(2, cv.size());\n    } \n}\n```", "```java\n@BeforeClass\npublic static void setUpClass() {\n    validator = Validation.buildDefaultValidatorFactory().getValidator();\n}\n```", "```java\nUser user = new User(\n   \"elder\", \n   \"elder@eldermoraes.com\", \n   asList(1,2));\n```", "```java\nSet<ConstraintViolation<User>> cv = validator.validate(user);\n```", "```java\nassertTrue(cv.isEmpty());\n```", "```java\nasList(-1,-2,1,2));\n```", "```java\nassertEquals(2, cv.size());\n```", "```java\n<dependency>\n    <groupId>org.jboss.weld.se</groupId>\n    <artifactId>weld-se-shaded</artifactId>\n    <version>3.0.0.Final</version>\n</dependency>\n```", "```java\npublic class MyEvent {\n\n    private final String value;\n\n    public MyEvent(String value){\n        this.value = value;\n    }\n\n    public String getValue(){\n        return value;\n    }\n}\n```", "```java\npublic class OrderedObserver {\n\n    public static void main(String[] args){\n        try(SeContainer container =    \n        SeContainerInitializer.newInstance().initialize()){\n            container\n                .getBeanManager()\n                .fireEvent(new MyEvent(\"event: \" + \n                System.currentTimeMillis()));\n        }\n    }\n\n    public void thisEventBefore(\n            @Observes @Priority(Interceptor.Priority\n            .APPLICATION - 200) \n            MyEvent event){\n\n        System.out.println(\"thisEventBefore: \" + event.getValue());\n    }\n\n    public void thisEventAfter(\n            @Observes @Priority(Interceptor.Priority\n           .APPLICATION + 200) \n            MyEvent event){\n\n        System.out.println(\"thisEventAfter: \" + event.getValue());\n    }  \n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans \n\n       xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n       http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n       bean-discovery-mode=\"all\">\n</beans>\n```", "```java\nINFO: WELD-ENV-002003: Weld SE container \n353db40d-e670-431d-b7be-4275b1813782 initialized\n thisEventBefore: event -> 1501818268764\n thisEventAfter: event -> 1501818268764\n```", "```java\npublic static void main(String[] args){\n    try(SeContainer container =  \n    SeContainerInitializer.newInstance().initialize()){\n        container\n            .getBeanManager()\n            .fireEvent(new ExampleEvent(\"event: \" \n            + System.currentTimeMillis()));\n    }\n}\n```", "```java\npublic void thisEventBefore(\n        @Observes @Priority(Interceptor.Priority.APPLICATION - 200) \n        MyEvent event){\n\n    System.out.println(\"thisEventBefore: \" + event.getValue());\n}\n```", "```java\n<dependency>\n    <groupId>javax</groupId>\n    <artifactId>javaee-api</artifactId>\n    <version>8.0</version>\n    <scope>provided</scope>\n</dependency>\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>org.glassfish.jersey.containers</groupId>\n            <artifactId>jersey-container-grizzly2-http</artifactId>\n            <version>2.26-b09</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.inject</groupId>\n            <artifactId>jersey-hk2</artifactId>\n            <version>2.26-b09</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.jersey.media</groupId>\n            <artifactId>jersey-media-sse</artifactId>\n            <version>2.26-b09</version>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n    </dependencies>\n```", "```java\npublic class ServerMock {\n\n    public static final URI CONTEXT = \n    URI.create(\"http://localhost:8080/\");\n    public static final String BASE_PATH = \"ssevents\";\n\n    public static void main(String[] args) {\n        try {\n            final ResourceConfig resourceConfig = new \n            ResourceConfig(SseResource.class);\n\n            final HttpServer server = \n            GrizzlyHttpServerFactory.createHttpServer(CONTEXT, \n            resourceConfig, false);\n            server.start();\n\n            System.out.println(String.format(\"Mock Server started\n            at %s%s\", CONTEXT, BASE_PATH));\n\n            Thread.currentThread().join();\n        } catch (IOException | InterruptedException ex) {\n            System.out.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n@Path(ServerMock.BASE_PATH)\npublic class SseResource {\n\n    private static volatile SseEventSink SINK = null;\n\n    @GET\n    @Produces(MediaType.SERVER_SENT_EVENTS)\n    public void getMessageQueue(@Context SseEventSink sink) {\n        SseResource.SINK = sink;\n    }\n\n    @POST\n    public void addMessage(final String message, @Context Sse sse) \n    throws IOException {\n        if (SINK != null) {\n            SINK.send(sse.newEventBuilder()\n                .name(\"sse-message\")\n                .id(String.valueOf(System.currentTimeMillis()))\n                .data(String.class, message)\n                .comment(\"\")\n                .build());\n        }\n    }\n}\n```", "```java\npublic class ClientConsumer {\n\n    public static final Client CLIENT = ClientBuilder.newClient();\n    public static final WebTarget WEB_TARGET = \n    CLIENT.target(ServerMock.CONTEXT\n    + BASE_PATH);\n\n    public static void main(String[] args) {\n        consume();\n    }\n\n    private static void consume() {\n\n        try (final SseEventSource sseSource =\n                     SseEventSource\n                             .target(WEB_TARGET)\n                             .build()) {\n\n            sseSource.register(System.out::println);\n            sseSource.open();\n\n            for (int counter=0; counter < 5; counter++) {\n                System.out.println(\" \");\n                for (int innerCounter=0; innerCounter < 5; \n                innerCounter++) {\n                    WEB_TARGET.request().post(Entity.json(\"event \"\n                    + innerCounter));\n                }\n                Thread.sleep(1000);\n            }\n\n            CLIENT.close();\n            System.out.println(\"\\n All messages consumed\");\n        } catch (InterruptedException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```", "```java\nInboundEvent{name='sse-message', id='1502228257736', comment='',    data=event 0}\n InboundEvent{name='sse-message', id='1502228257753', comment='',   data=event 1}\n InboundEvent{name='sse-message', id='1502228257758', comment='',   data=event 2}\n InboundEvent{name='sse-message', id='1502228257763', comment='',   data=event 3}\n InboundEvent{name='sse-message', id='1502228257768', comment='',   data=event 4}\n```", "```java\nfinal ResourceConfig resourceConfig = new ResourceConfig(SseResource.class);\nfinal HttpServer server = GrizzlyHttpServerFactory.createHttpServer(CONTEXT, resourceConfig, false);\nserver.start();\n```", "```java\naddMessage(final String message, @Context Sse sse)\n```", "```java\n@GET\n@Produces(MediaType.SERVER_SENT_EVENTS)\npublic void getMessageQueue(@Context SseEventSink sink)\n```", "```java\nsseSource.register(System.out::println);\nsseSource.open();\n```", "```java\nServerMock.WEB_TARGET.request().post(Entity.json(\"event \" + innerCounter));\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class User implements Serializable {\n\n    private String name;\n    private String email;\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email; \n    }\n\n    //DON'T FORGET THE GETTERS AND SETTERS\n    //THIS RECIPE WON'T WORK WITHOUT THEM\n}\n```", "```java\n@Named\n@ViewScoped\npublic class UserBean implements Serializable {\n\n    private User user;\n\n    public UserBean(){\n        user = new User(\"Elder Moraes\", \"elder@eldermoraes.com\");\n    }\n\n    public void userAction(){\n        FacesContext.getCurrentInstance().addMessage(null, \n                new FacesMessage(\"Name|Password welformed\"));\n    }\n\n    //DON'T FORGET THE GETTERS AND SETTERS\n    //THIS RECIPE WON'T WORK WITHOUT THEM\n}\n```", "```java\n@FacesConverter(\"userConverter\")\npublic class UserConverter implements Converter<User> {\n\n    @Override\n    public String getAsString(FacesContext fc, UIComponent uic, \n    User user) {\n        return user.getName() + \"|\" + user.getEmail();\n    }\n\n    @Override\n    public User getAsObject(FacesContext fc, UIComponent uic, \n    String string) {\n        return new User(string.substring(0, string.indexOf(\"|\")), \n        string.substring(string.indexOf(\"|\") + 1));\n    }\n\n}\n```", "```java\n@FacesValidator(\"userValidator\")\npublic class UserValidator implements Validator<User> {\n\n    @Override\n    public void validate(FacesContext fc, UIComponent uic, \n    User user) \n    throws ValidatorException {\n        if(!user.getEmail().contains(\"@\")){\n            throw new ValidatorException(new FacesMessage(null, \n                                         \"Malformed e-mail\"));\n        }\n    }\n}\n```", "```java\n<h:body>\n    <h:form>\n        <h:panelGrid columns=\"3\">\n            <h:outputLabel value=\"Name|E-mail:\" \n            for=\"userNameEmail\"/>\n            <h:inputText id=\"userNameEmail\" \n            value=\"#{userBean.user}\" \n            converter=\"userConverter\" validator=\"userValidator\"/> \n            <h:message for=\"userNameEmail\"/>\n        </h:panelGrid>\n        <h:commandButton value=\"Validate\" \n        action=\"#{userBean.userAction()}\"/>\n    </h:form> \n</h:body>\n```", "```java\n<h:commandButton value=\"Validate\" action=\"#{userBean.userAction()}\"/>\n```", "```java\n<h:inputText id=\"userNameEmail\" value=\"#{userBean.user}\" converter=\"userConverter\" validator=\"userValidator\"/>\n```", "```java\nvalue=\"#{userBean.user}\"\n```", "```java\n<dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n</dependency>\n```", "```java\n{\n  \"user\": {\n    \"email\": \"elder@eldermoraes.com\",\n    \"name\": \"Elder\",\n    \"profile\": [\n      {\n        \"id\": 1\n      },\n      {\n        \"id\": 2\n      },\n      {\n        \"id\": 3\n      }\n    ]\n  }\n}\n```", "```java\npublic class JPointer {\n\n    public static void main(String[] args) throws IOException{\n        try (InputStream is = \n        JPointer.class.getClassLoader().getResourceAsStream(\"user.json\");\n                JsonReader jr = Json.createReader(is)) {\n\n            JsonStructure js = jr.read();\n            JsonPointer jp = Json.createPointer(\"/user/profile\");\n            JsonValue jv = jp.getValue(js);\n            System.out.println(\"profile: \" + jv);\n        }\n    }\n}\n```", "```java\nprofile: [{\"id\":1},{\"id\":2},{\"id\":3}]\n```", "```java\n    <dependencies>\n        <dependency>\n            <groupId>org.eclipse</groupId>\n            <artifactId>yasson</artifactId>\n            <version>1.0</version>\n        </dependency> \n        <dependency>\n            <groupId>org.glassfish</groupId>\n            <artifactId>javax.json</artifactId>\n            <version>1.1</version>\n        </dependency> \n    </dependencies>\n```", "```java\npublic class User {\n\n    private String name;\n    private String email;\n\n    public User(){        \n    }\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" + \"name=\" + name + \", email=\" + email + '}';\n    }\n\n    //DON'T FORGET THE GETTERS AND SETTERS\n    //THIS RECIPE WON'T WORK WITHOUT THEM\n\n}\n```", "```java\npublic class JsonBUser {\n\n    public static void main(String[] args) throws Exception {\n        User user = new User(\"Elder\", \"elder@eldermoraes.com\");\n\n        Jsonb jb = JsonbBuilder.create();\n        String jsonUser = jb.toJson(user);\n        User u = jb.fromJson(jsonUser, User.class);\n\n        jb.close();\n        System.out.println(\"json: \" + jsonUser);\n        System.out.println(\"user: \" + u);\n\n    }\n}\n```", "```java\njson: {\"email\":\"elder@eldermoraes.com\",\"name\":\"Elder\"}\n user: User{name=Elder, email=elder@eldermoraes.com}\n```", "```java\n<dependency>\n    <groupId>javax</groupId>\n    <artifactId>javaee-api</artifactId>\n    <version>8.0</version>\n    <scope>provided</scope>\n</dependency>\n```", "```java\n@WebServlet(name = \"ServerPush\", urlPatterns = {\"/ServerPush\"})\npublic class ServerPush extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n    HttpServletResponse \n    response) throws ServletException, IOException {\n\n        PushBuilder pb = request.newPushBuilder();\n        if (pb != null) {\n            pb.path(\"images/javaee-logo.png\")\n              .addHeader(\"content-type\", \"image/png\")\n              .push();\n        }\n\n        try (PrintWriter writer = response.getWriter();) {\n            StringBuilder html = new StringBuilder();\n            html.append(\"<html>\");\n            html.append(\"<center>\");\n            html.append(\"<img src='images/javaee-logo.png'><br>\");\n            html.append(\"<h2>Image pushed by ServerPush</h2>\");\n            html.append(\"</center>\");\n            html.append(\"</html>\");\n            writer.write(html.toString());\n        }\n    }\n}\n```", "```java\nhttps://localhost:8080/ch01-servlet/ServerPush\n```", "```java\n        <dependency>\n            <groupId>junit</groupId>\n            <artifactId>junit</artifactId>\n            <version>4.12</version>\n            <scope>test</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.apache.tomee</groupId>\n            <artifactId>openejb-core</artifactId>\n            <version>7.0.4</version>\n        </dependency>\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@Entity \npublic class User implements Serializable{\n\n    @Id\n    private Long id;\n    private String name;\n    private String email;\n\n    public User(){        \n    }\n\n    public User(Long id, String name, String email) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n    }\n\n    //DON'T FORGET THE GETTERS AND SETTERS\n    //THIS RECIPE WON'T WORK WITHOUT THEM\n}\n```", "```java\npublic class Roles {\n    public static final String ADMIN = \"ADMIN\";\n    public static final String OPERATOR = \"OPERATOR\";\n}\n```", "```java\n@Stateful\npublic class UserBean {\n\n    @PersistenceContext(unitName = \"ch01-security-pu\", \n    type = PersistenceContextType.EXTENDED)\n    private EntityManager em;\n\n    @RolesAllowed({Roles.ADMIN, Roles.OPERATOR})\n    public void add(User user){\n        em.persist(user);\n    }\n\n    @RolesAllowed({Roles.ADMIN})\n    public void remove(User user){\n        em.remove(user);\n    }\n\n    @RolesAllowed({Roles.ADMIN})\n    public void update(User user){\n        em.merge(user);\n    }\n\n    @PermitAll\n    public List<User> get(){\n        Query q = em.createQuery(\"SELECT u FROM User as u \");\n        return q.getResultList();\n    }\n```", "```java\npublic class RoleExecutor {\n\n    public interface Executable {\n        void execute() throws Exception;\n    }\n\n    @Stateless\n    @RunAs(Roles.ADMIN)\n    public static class AdminExecutor {\n        public void run(Executable executable) throws Exception {\n            executable.execute();\n        }\n    }\n\n    @Stateless\n    @RunAs(Roles.OPERATOR)\n    public static class OperatorExecutor {\n        public void run(Executable executable) throws Exception {\n            executable.execute();\n        }\n    }\n}\n```", "```java\n    //Lot of setup code before this point\n\n    @Test\n    public void asAdmin() throws Exception {\n        adminExecutor.run(() -> {\n            userBean.add(new User(1L, \"user1\", \"user1@user.com\"));\n            userBean.add(new User(2L, \"user2\", \"user2@user.com\"));\n            userBean.add(new User(3L, \"user3\", \"user3@user.com\"));\n            userBean.add(new User(4L, \"user4\", \"user4@user.com\"));\n\n            List<User> list = userBean.get();\n\n            list.forEach((user) -> {\n                userBean.remove(user);\n            });\n\n            Assert.assertEquals(\"userBean.get()\", 0, \n            userBean.get().size());\n        });\n    }\n```", "```java\n    @Test\n    public void asOperator() throws Exception {\n\n        operatorExecutor.run(() -> {\n            userBean.add(new User(1L, \"user1\", \"user1@user.com\"));\n            userBean.add(new User(2L, \"user2\", \"user2@user.com\"));\n            userBean.add(new User(3L, \"user3\", \"user3@user.com\"));\n            userBean.add(new User(4L, \"user4\", \"user4@user.com\"));\n\n            List<User> list = userBean.get();\n\n            list.forEach((user) -> {\n                try {\n                    userBean.remove(user);\n                    Assert.fail(\"Operator was able to remove user \" + \n                    user.getName());\n                } catch (EJBAccessException e) {\n                }\n            });\n            Assert.assertEquals(\"userBean.get()\", 4, \n            userBean.get().size());\n        });\n    }\n```", "```java\n    @Test\n    public void asAnonymous() {\n\n        try {\n            userBean.add(new User(1L, \"elder\", \n            \"elder@eldermoraes.com\"));\n            Assert.fail(\"Anonymous user should not add users\");\n        } catch (EJBAccessException e) {\n        }\n\n        try {\n            userBean.remove(new User(1L, \"elder\", \n            \"elder@eldermoraes.com\"));\n            Assert.fail(\"Anonymous user should not remove users\");\n        } catch (EJBAccessException e) {\n        }\n\n        try {\n            userBean.get();\n        } catch (EJBAccessException e) {\n            Assert.fail(\"Everyone can list users\");\n        }\n    }\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n        <dependency>\n            <groupId>javax.mvc</groupId>\n            <artifactId>javax.mvc-api</artifactId>\n            <version>1.0-pr</version>\n        </dependency>\n```", "```java\n@ApplicationPath(\"webresources\")\npublic class AppConfig extends Application{\n}\n```", "```java\npublic class User {\n\n    private String name;\n    private String email;\n\n    public User(String name, String email) {\n        this.name = name;\n        this.email = email;\n    }\n\n    //DON'T FORGET THE GETTERS AND SETTERS\n    //THIS RECIPE WON'T WORK WITHOUT THEM\n}\n```", "```java\n@Stateless\npublic class UserBean {\n\n    public User getUser(){\n        return new User(\"Elder\", \"elder@eldermoraes.com\");\n    }\n}\n```", "```java\n@Controller\n@Path(\"userController\")\npublic class UserController {\n\n    @Inject\n    Models models;\n\n    @Inject\n    UserBean userBean;\n\n    @GET\n    public String user(){\n        models.put(\"user\", userBean.getUser());\n        return \"/user.jsp\";\n    }\n}\n```", "```java\n<head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; \n    charset=UTF-8\">\n    <title>User MVC</title>\n</head>\n<body>\n    <h1>${user.name}/${user.email}</h1>\n</body>\n```", "```java\n@Inject\nModels models;\n```", "```java\nmodels.put(\"user\", userBean.getUser());\n```", "```java\n<h1>${user.name}/${user.email}</h1>\n```"]