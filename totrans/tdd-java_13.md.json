["```java\n    package com.wordz.domain;\n    ```", "```java\n    public class NewGameTest {\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    public class NewGameTest {\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var game = new Game();\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npackage com.wordz.domain;\npublic class Game {\n}\n```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var game = new Game();\n    ```", "```java\n            var player = new Player();\n    ```", "```java\n            game.start(player);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npublic class Game {\n    public void start(Player player) {\n    }\n}\n```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var wordz = new Wordz();\n    ```", "```java\n            var player = new Player();\n    ```", "```java\n            wordz.start(player);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\npublic class Wordz {\n    public void start(Player player) {\n    }\n}\n```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Test\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var wordz = new Wordz();\n    ```", "```java\n            var player = new Player();\n    ```", "```java\n            wordz.newGame(player);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    import org.junit.jupiter.api.Test;\n    ```", "```java\n    import org.junit.jupiter.api.extension.ExtendWith;\n    ```", "```java\n    import org.mockito.Mock;\n    ```", "```java\n    import org.mockito.junit.jupiter.MockitoExtension;\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Mock\n    ```", "```java\n        private GameRepository gameRepository;\n    ```", "```java\n        @InjectMocks\n    ```", "```java\n        private Wordz wordz;\n    ```", "```java\n        @Test\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var player = new Player();\n    ```", "```java\n            wordz.newGame(player);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    public interface GameRepository {\n    ```", "```java\n    }\n    ```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Mock\n    ```", "```java\n        private GameRepository gameRepository;\n    ```", "```java\n        @Test\n    ```", "```java\n        void startsNewGame() {\n    ```", "```java\n            var player = new Player();\n    ```", "```java\n            wordz.newGame(player);\n    ```", "```java\n            var gameArgument =\n    ```", "```java\n                   ArgumentCaptor.forClass(Game.class)\n    ```", "```java\n            verify(gameRepository)\n    ```", "```java\n               .create(gameArgument.capture());\n    ```", "```java\n            var game = gameArgument.getValue();\n    ```", "```java\n            assertThat(game.getWord()).isEqualTo(\"ARISE\");\n    ```", "```java\n            assertThat(game.getAttemptNumber()).isZero();\n    ```", "```java\n            assertThat(game.getPlayer()).isSameAs(player);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    public class Wordz {\n    ```", "```java\n        private final GameRepository gameRepository;\n    ```", "```java\n        public Wordz(GameRepository gr) {\n    ```", "```java\n            this.gameRepository = gr;\n    ```", "```java\n        }\n    ```", "```java\n        public void newGame(Player player) {\n    ```", "```java\n            var game = new Game(player, \"ARISE\", 0);\n    ```", "```java\n            gameRepository.create(game);\n    ```", "```java\n        }\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void startsNewGame() {\n    ```", "```java\n        var player = new Player();\n    ```", "```java\n        wordz.newGame(player);\n    ```", "```java\n        Game game = getGameInRepository();\n    ```", "```java\n        assertThat(game.getWord()).isEqualTo(\"ARISE\");\n    ```", "```java\n        assertThat(game.getAttemptNumber()).isZero();\n    ```", "```java\n        assertThat(game.getPlayer()).isSameAs(player);\n    ```", "```java\n    }\n    ```", "```java\n    private Game getGameInRepository() {\n    ```", "```java\n        var gameArgument\n    ```", "```java\n           = ArgumentCaptor.forClass(Game.class)\n    ```", "```java\n        verify(gameRepository)\n    ```", "```java\n                .create(gameArgument.capture());\n    ```", "```java\n        return gameArgument.getValue();\n    ```", "```java\n    }\n    ```", "```java\n        @Test\n    ```", "```java\n        void selectsRandomWord() {\n    ```", "```java\n        }\n    ```", "```java\n    @ExtendWith(MockitoExtension.class)\n    ```", "```java\n    public class NewGameTest {\n    ```", "```java\n        @Mock\n    ```", "```java\n        private GameRepository gameRepository;\n    ```", "```java\n        @Mock\n    ```", "```java\n        private WordRepository wordRepository ;\n    ```", "```java\n        @Mock\n    ```", "```java\n        private RandomNumbers randomNumbers ;\n    ```", "```java\n        @InjectMocks\n    ```", "```java\n        private Wordz wordz;\n    ```", "```java\n    public class Wordz {\n    ```", "```java\n        private final GameRepository gameRepository;\n    ```", "```java\n        private final WordSelection wordSelection ;\n    ```", "```java\n        public Wordz(GameRepository gr,\n    ```", "```java\n                     WordRepository wr,\n    ```", "```java\n                     RandomNumbers rn) {\n    ```", "```java\n            this.gameRepository = gr;\n    ```", "```java\n            this.wordSelection = new WordSelection(wr, rn);\n    ```", "```java\n        }\n    ```", "```java\n        @Test\n    ```", "```java\n        void selectsRandomWord() {\n    ```", "```java\n            when(randomNumbers.next(anyInt())).thenReturn(2);\n    ```", "```java\n            when(wordRepository.fetchWordByNumber(2))\n    ```", "```java\n                   .thenReturn(\"ABCDE\");\n    ```", "```java\n        }\n    ```", "```java\n    @Test\n    void selectsRandomWord() {\n        int wordNumber = 2;\n        when(randomNumbers.next(anyInt()))\n           .thenReturn(wordNumber);\n        when(wordRepository\n           .fetchWordByNumber(wordNumber))\n               .thenReturn(\"ABCDE\");\n    }\n```", "```java\n        @Test\n    ```", "```java\n        void selectsRandomWord() {\n    ```", "```java\n            givenWordToSelect(\"ABCDE\");\n    ```", "```java\n        }\n    ```", "```java\n        private void givenWordToSelect(String wordToSelect){\n    ```", "```java\n            int wordNumber = 2;\n    ```", "```java\n            when(randomNumbers.next(anyInt()))\n    ```", "```java\n                    .thenReturn(wordNumber);\n    ```", "```java\n            when(wordRepository\n    ```", "```java\n                    .fetchWordByNumber(wordNumber))\n    ```", "```java\n                    .thenReturn(wordToSelect);\n    ```", "```java\n        }\n    ```", "```java\n    @Test\n    ```", "```java\n    void selectsRandomWord() {\n    ```", "```java\n        givenWordToSelect(\"ABCDE\");\n    ```", "```java\n        var player = new Player();\n    ```", "```java\n        wordz.newGame(player);\n    ```", "```java\n        Game game = getGameInRepository();\n    ```", "```java\n        assertThat(game.getWord()).isEqualTo(\"ABCDE\");\n    ```", "```java\n    }\n    ```", "```java\n    public void newGame(Player player) {\n    ```", "```java\n        var word = wordSelection.chooseRandomWord();\n    ```", "```java\n        Game game = new Game(player, word, 0);\n    ```", "```java\n        gameRepository.create(game);\n    ```", "```java\n    }\n    ```", "```java\n    @Test\n    ```", "```java\n    void startsNewGame() {\n    ```", "```java\n        var player = new Player();\n    ```", "```java\n        givenWordToSelect(\"ARISE\");\n    ```", "```java\n        wordz.newGame(player);\n    ```", "```java\n        Game game = getGameInRepository();\n    ```", "```java\n        assertThat(game.getWord()).isEqualTo(\"ARISE\");\n    ```", "```java\n        assertThat(game.getAttemptNumber()).isZero();\n    ```", "```java\n        assertThat(game.getPlayer()).isSameAs(player);\n    ```", "```java\n    }\n    ```", "```java\nprivate static final Player PLAYER = new Player();\n@Test\nvoid startsNewGame() {\n    givenWordToSelect(\"ARISE\");\n    wordz.newGame(PLAYER);\n    Game game = getGameInRepository();\n    assertThat(game.getWord()).isEqualTo(\"ARISE\");\n    assertThat(game.getAttemptNumber()).isZero();\n    assertThat(game.getPlayer()).isSameAs(PLAYER);\n}\n```", "```java\n@ExtendWith(MockitoExtension.class)\npublic class GuessTest {\n    private static final Player PLAYER = new Player();\n    private static final String CORRECT_WORD = \"ARISE\";\n    private static final String WRONG_WORD = \"RXXXX\";\n    @Mock\n    private GameRepository gameRepository;\n    @InjectMocks\n    private Wordz wordz;\n    @Test\n    void returnsScoreForGuess() {\n        givenGameInRepository(\n                       Game.create(PLAYER, CORRECT_WORD));\n        GuessResult result = wordz.assess(PLAYER, WRONG_WORD);\n        Letter firstLetter = result.score().letter(0);\n        assertThat(firstLetter)\n               .isEqualTo(Letter.PART_CORRECT);\n    }\n    private void givenGameInRepository(Game game) {\n        when(gameRepository\n           .fetchForPlayer(eq(PLAYER)))\n              .thenReturn(Optional.of(game));\n    }\n}\n```", "```java\n    static Game create(Player player, String correctWord) {\n        return new Game(player, correctWord, 0, false);\n    }\n```", "```java\npackage com.wordz.domain;\nimport java.util.List;\npublic record GuessResult(\n        Score score,\n        boolean isGameOver\n) { }\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    var game = gameRepository.fetchForPlayer(player);\n    var target = new Word(game.getWord());\n    var score = target.guess(guess);\n    return new GuessResult(score, false);\n}\n```", "```java\n    @Test\n    ```", "```java\n    void updatesAttemptNumber() {\n    ```", "```java\n        givenGameInRepository(\n    ```", "```java\n                   Game.create(PLAYER, CORRECT_WORD));\n    ```", "```java\n        wordz.assess(PLAYER, WRONG_WORD);\n    ```", "```java\n        var game = getUpdatedGameInRepository();\n    ```", "```java\n        assertThat(game.getAttemptNumber()).isEqualTo(1);\n    ```", "```java\n    }\n    ```", "```java\n    private Game getUpdatedGameInRepository() {\n    ```", "```java\n        ArgumentCaptor<Game> argument\n    ```", "```java\n                = ArgumentCaptor.forClass(Game.class);\n    ```", "```java\n        verify(gameRepository).update(argument.capture());\n    ```", "```java\n        return argument.getValue();\n    ```", "```java\n    }\n    ```", "```java\n    package com.wordz.domain;\n    ```", "```java\n    public interface GameRepository {\n    ```", "```java\n        void create(Game game);\n    ```", "```java\n        Game fetchForPlayer(Player player);\n    ```", "```java\n        void update(Game game);\n    ```", "```java\n    }\n    ```", "```java\n    public GuessResult assess(Player player, String guess) {\n    ```", "```java\n        var game = gameRepository.fetchForPlayer(player);\n    ```", "```java\n        game.incrementAttemptNumber();\n    ```", "```java\n        gameRepository.update(game);\n    ```", "```java\n        var target = new Word(game.getWord());\n    ```", "```java\n        var score = target.guess(guess);\n    ```", "```java\n        return new GuessResult(score, false);\n    ```", "```java\n    }\n    ```", "```java\n    public void incrementAttemptNumber() {\n    ```", "```java\n        attemptNumber++;\n    ```", "```java\n    }\n    ```", "```java\n    public GuessResult assess(Player player, String guess) {\n    ```", "```java\n        var game = gameRepository.fetchForPlayer(player);\n    ```", "```java\n        Score score = game.attempt( guess );\n    ```", "```java\n        gameRepository.update(game);\n    ```", "```java\n        return new GuessResult(score, false);\n    ```", "```java\n    }\n    ```", "```java\npublic Score attempt(String latestGuess) {\n    attemptNumber++;\n    var target = new Word(targetWord);\n    return target.guess(latestGuess);\n}\n```", "```java\n@Test\nvoid reportsGameOverOnCorrectGuess(){\n    var player = new Player();\n    Game game = new Game(player, \"ARISE\", 0);\n    when(gameRepository.fetchForPlayer(player))\n                          .thenReturn(game);\n    var wordz = new Wordz(gameRepository,\n                           wordRepository, randomNumbers);\n    var guess = \"ARISE\";\n    GuessResult result = wordz.assess(player, guess);\n    assertThat(result.isGameOver()).isTrue();\n}\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    var game = gameRepository.fetchForPlayer(player);\n    Score score = game.attempt( guess );\n    if (score.allCorrect()) {\n        return new GuessResult(score, true);\n    }\n    gameRepository.update(game);\n    return new GuessResult(score, false);\n}\n```", "```java\n@Test\nvoid reportsAllCorrect() {\n    var word = new Word(\"ARISE\");\n    var score = word.guess(\"ARISE\");\n    assertThat(score.allCorrect()).isTrue();\n}\n@Test\nvoid reportsNotAllCorrect() {\n    var word = new Word(\"ARISE\");\n    var score = word.guess(\"ARI*E\");\n    assertThat(score.allCorrect()).isFalse();\n}\n```", "```java\npublic boolean allCorrect() {\n    var totalCorrect = results.stream()\n            .filter(letter -> letter == Letter.CORRECT)\n            .count();\n    return totalCorrect == results.size();\n}\n```", "```java\n@Test\nvoid gameOverOnTooManyIncorrectGuesses(){\n    int maximumGuesses = 5;\n    givenGameInRepository(\n            Game.create(PLAYER, CORRECT_WORD,\n                    maximumGuesses-1));\n    GuessResult result = wordz.assess(PLAYER, WRONG_WORD);\n    assertThat(result.isGameOver()).isTrue();\n}\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    var game = gameRepository.fetchForPlayer(player);\n    Score score = game.attempt( guess );\n    if (score.allCorrect()) {\n        return new GuessResult(score, true);\n    }\n    gameRepository.update(game);\n    return new GuessResult(score,\n                           game.hasNoRemainingGuesses());\n}\n```", "```java\npublic boolean hasNoRemainingGuesses() {\n    return attemptNumber == MAXIMUM_NUMBER_ALLOWED_GUESSES;\n}\n```", "```java\n@Test\nvoid rejectsGuessAfterGameOver(){\n    var gameOver = new Game(PLAYER, CORRECT_WORD,\n                1, true);\n    givenGameInRepository( gameOver );\n    GuessResult result = wordz.assess(PLAYER, WRONG_WORD);\n    assertThat(result.isError()).isTrue();\n}\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    var game = gameRepository.fetchForPlayer(player);\n    if(game.isGameOver()) {\n        return GuessResult.ERROR;\n    }\n    Score score = game.attempt( guess );\n    if (score.allCorrect()) {\n        return new GuessResult(score, true, false);\n    }\n    gameRepository.update(game);\n    return new GuessResult(score,\n                   game.hasNoRemainingGuesses(), false);\n}\n```", "```java\n    public static final GuessResult ERROR\n                  = new GuessResult(null, true, true);\n```", "```java\n@Test\nvoid recordsGameOverOnCorrectGuess(){\n    givenGameInRepository(Game.create(PLAYER, CORRECT_WORD));\n    wordz.assess(PLAYER, CORRECT_WORD);\n    Game game = getUpdatedGameInRepository();\n    assertThat(game.isGameOver()).isTrue();\n}\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    var game = gameRepository.fetchForPlayer(player);\n    if(game.isGameOver()) {\n        return GuessResult.ERROR;\n    }\n    Score score = game.attempt( guess );\n    if (score.allCorrect()) {\n        game.end();\n        gameRepository.update(game);\n        return new GuessResult(score, true, false);\n    }\n    gameRepository.update(game);\n    return new GuessResult(score,\n                 game.hasNoRemainingGuesses(), false);\n}\n```", "```java\npackage com.wordz.domain;\npublic class Wordz {\n    private final GameRepository gameRepository;\n    private final WordSelection selection ;\n    public Wordz(GameRepository repository,\n                 WordRepository wordRepository,\n                 RandomNumbers randomNumbers) {\n        this.gameRepository = repository;\n        this.selection =\n             new WordSelection(wordRepository, randomNumbers);\n    }\n    public void newGame(Player player) {\n        var word = wordSelection.chooseRandomWord();\n        gameRepository.create(Game.create(player, word));\n    }\n```", "```java\n    public GuessResult assess(Player player, String guess) {\n        Game game = gameRepository.fetchForPlayer(player);\n        if(game.isGameOver()) {\n            return GuessResult.ERROR;\n        }\n        Score score = game.attempt( guess );\n        gameRepository.update(game);\n        return new GuessResult(score,\n                               game.isGameOver(), false);\n    }\n}\n```", "```java\npackage com.wordz.domain;\npublic record GuessResult(\n        Score score,\n        boolean isGameOver,\n        boolean isError\n) {\n    static final GuessResult ERROR\n         = new GuessResult(null, true, true);\n    static GuessResult create(Score score,\n                              boolean isGameOver) {\n        return new GuessResult(score, isGameOver, false);\n    }\n}\n```", "```java\npublic GuessResult assess(Player player, String guess) {\n    Game game = gameRepository.fetchForPlayer(player);\n    if(game.isGameOver()) {\n        return GuessResult.ERROR;\n    }\n    Score score = game.attempt( guess );\n    gameRepository.update(game);\n    return GuessResult.create(score, game.isGameOver());\n}\n```", "```java\n@Test\nvoid rejectsGuessAfterGameOver(){\n    var game = Game.create(PLAYER, CORRECT_WORD);\n    game.end();\n    givenGameInRepository( game );\n    GuessResult result = wordz.assess(PLAYER, WRONG_WORD);\n    assertThat(result.isError()).isTrue();\n}\n```"]