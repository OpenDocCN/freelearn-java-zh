- en: Chapter 1. Getting Started with GlassFish
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. GlassFish入门
- en: 'In this chapter, we will discuss how to get started with GlassFish. The following
    are some of the topics discussed in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何开始使用GlassFish。以下是本章讨论的一些主题：
- en: An overview of Java EE and GlassFish
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java EE和GlassFish概述
- en: Obtaining GlassFish
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取GlassFish
- en: Installing and starting GlassFish
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和启动GlassFish
- en: Explaining the concept of GlassFish domains
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释GlassFish域的概念
- en: Deploying Java EE applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署Java EE应用程序
- en: Setting up Database Connectivity
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置数据库连接
- en: An Overview of Java EE and GlassFish
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java EE和GlassFish概述
- en: '**Java Enterprise Edition** (**Java EE**, formerly called **J2EE** or **Java
    2 Enterprise Edition**) is a standard set of technologies for server-side Java
    development. Java EE technologies include **JavaServer Faces** (**JSF**), **Enterprise
    JavaBeans** (**EJBs**), the **Java Messaging Service** (**JMS**), the **Java Persistence
    API** (**JPA**), the Java API for WebSocket, **Contexts and Dependency Injection**
    (**CDI**), the **Java API for XML Web Services** (**JAX-WS**), the **Java API
    for RESTful Web Services** (**JAX-RS**), and the **Java API for JSON Processing**
    (**JSON-P**), among others.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java企业版**（**Java EE**，以前称为**J2EE**或**Java 2企业版**）是一套用于服务器端Java开发的标准化技术。Java
    EE技术包括**JavaServer Faces**（**JSF**）、**企业JavaBeans**（**EJBs**）、**Java消息服务**（**JMS**）、**Java持久化API**（**JPA**）、Java
    API for WebSocket、**上下文与依赖注入**（**CDI**）、**Java API for XML Web Services**（**JAX-WS**）、**Java
    API for RESTful Web Services**（**JAX-RS**）和**Java API for JSON Processing**（**JSON-P**）等。'
- en: Several commercial and open source application servers exist. Java EE application
    servers allow developers to develop and deploy Java EE-compliant applications,
    GlassFish being one of them. Other open source Java EE application servers include
    Red Hat's WildFly (formerly JBoss), the Apache Software Foundation's Geronimo,
    and ObjectWeb's JOnAS. Commercial application servers include Oracle's WebLogic,
    IBM's WebSphere, and the Oracle Application Server.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 存在着多个商业和开源应用服务器。Java EE应用服务器允许开发者开发并部署Java EE兼容的应用程序，GlassFish就是其中之一。其他开源Java
    EE应用服务器包括Red Hat的WildFly（以前称为JBoss）、Apache软件基金会的Geronimo和ObjectWeb的JOnAS。商业应用服务器包括Oracle的WebLogic、IBM的WebSphere和Oracle应用服务器。
- en: GlassFish is the Java EE 7 reference implementation; as such, it implements
    the latest Java EE APIs before any other application server in the market. GlassFish
    is open source and freely available, and is licensed under the **Common Development
    and Distribution License** (**CDDL**).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish是Java EE 7的参考实现；因此，它在市场上的任何其他应用服务器之前都实现了最新的Java EE API。GlassFish是开源的，并且可以免费获取，并且根据**通用开发与分发许可证**（**CDDL**）授权。
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can find out more about the CDDL license at [http://opensource.org/licenses/CDDL-1.0](http://opensource.org/licenses/CDDL-1.0).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://opensource.org/licenses/CDDL-1.0](http://opensource.org/licenses/CDDL-1.0)了解更多关于CDDL许可证的信息。
- en: Like all Java EE-compliant application servers, GlassFish provides the necessary
    libraries to allow us to develop and deploy Java applications compliant with Java
    EE specifications.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 与所有Java EE兼容的应用服务器一样，GlassFish提供了必要的库，使我们能够开发并部署符合Java EE规范的Java应用程序。
- en: What's new in Java EE 7?
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java EE 7的新特性是什么？
- en: 'Java EE 7, the latest version of the Java EE specification, includes several
    improvements and additions to the specification. The following sections list the
    major improvements to the specifications that are of interest to enterprise application
    developers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 7是Java EE规范的最新版本，它对该规范进行了多项改进和补充。以下各节列出了对规范的主要改进，这些改进对企业应用开发者来说很有兴趣：
- en: JavaServer Faces (JSF) 2.2
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JavaServer Faces (JSF) 2.2
- en: 'Java EE 7 includes a new version of the **JavaServer Faces** (**JSF**) specification.
    JSF 2.2 includes the following notable new features:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE 7包括**JavaServer Faces**（**JSF**）规范的最新版本。JSF 2.2包括以下显著的新特性：
- en: JSF 2.2 features the HTML5 friendly markup, that is, web pages can be written
    using the standard HTML 5 markup and using JSF-specific attributes on the HTML
    tags.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSF 2.2具有HTML5友好的标记，也就是说，可以使用标准的HTML 5标记和HTML标签上的JSF特定属性来编写网页。
- en: JSF 2.2 also includes Faces Flows, which provides a way to encapsulate related
    pages with defined entry and exit points.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSF 2.2还包括Faces Flows，它提供了一种封装相关页面并定义入口和出口点的方法。
- en: Resource library contracts are the third major JSF feature introduced in JSF
    2.2\. Resource library contracts allow us to easily develop web applications that
    can have a different look and feel for different users using JSF.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源库合约是 JSF 2.2 中引入的第三个主要 JSF 特性。资源库合约使我们能够轻松开发具有不同外观和感觉的 Web 应用程序，这些外观和感觉适用于不同的用户。
- en: Java Persistence API (JPA) 2.1
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java Persistence API (JPA) 2.1
- en: JPA was introduced as a standard part of Java EE in version 5 of the specification.
    JPA replaced entity beans as the standard object relational mapping framework
    for Java EE. JPA adopted ideas from third-party object relational frameworks such
    as Hibernate and JDO, and made them a part of the standard.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JPA 被引入为 Java EE 规范第 5 版的标准部分。JPA 用作 Java EE 的标准对象关系映射框架，取代了实体 Bean。JPA 采用了来自第三方对象关系框架（如
    Hibernate 和 JDO）的思想，并将它们作为标准的一部分。
- en: 'JPA 2.1 introduces the following new features:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: JPA 2.1 引入了以下新特性：
- en: JPA 2.1 introduces the concept of **Converters**, which allows custom code conversions
    between values stored in the database and values stored in Java objects. For instance,
    a common problem when working with database data is that the desired value in
    Java code differs from the value stored in the database. For example, the values
    `1` and `0` are commonly stored in the database to denote `true` and `false` respectively.
    Java has a perfectly good boolean type, so `true` and `false` can be used directly.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA 2.1 引入了 **转换器** 的概念，它允许在数据库中存储的值和 Java 对象中存储的值之间进行自定义代码转换。例如，当处理数据库数据时，Java
    代码中期望的值与数据库中存储的值通常不同。例如，值 `1` 和 `0` 常常存储在数据库中以表示 `true` 和 `false`。Java 有一个非常好的布尔类型，因此可以直接使用
    `true` 和 `false`。
- en: The JPA Criteria API can now perform bulk updates and deletes.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA 查询 API 现在可以执行批量更新和删除。
- en: JPA 2.1 now supports stored procedures.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA 2.1 现在支持存储过程。
- en: JPA 2.1 introduces the `@ConstructorResult` annotation, which allows returning
    standard Java classes (but not the JPA entities) from native SQL queries.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JPA 2.1 引入了 `@ConstructorResult` 注解，它允许从原生 SQL 查询中返回标准的 Java 类（但不是 JPA 实体）。
- en: Java API for RESTful Web Services (JAX-RS) 2.0
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java API for RESTful Web Services (JAX-RS) 2.0
- en: JAX-RS is a Java API for developing RESTful web services. RESTful web services
    use the **Representational State Transfer** (**REST**) architecture. Java EE 6
    adopted JAX-RS as an official part of the Java EE specification.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 是一个用于开发 RESTful 网络服务的 Java API。RESTful 网络服务使用 **表示状态转换**（**REST**）架构。Java
    EE 6 将 JAX-RS 作为 Java EE 规范的官方部分。
- en: 'JAX-RS 2.0 includes the following new features:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: JAX-RS 2.0 包含以下新特性：
- en: JAX-RS 2.0 introduces a new client-side API. While previous versions of JAX-RS
    made it easy to develop RESTful web services, each implementation defined its
    own proprietary client-side API.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 2.0 引入了一个新的客户端 API。虽然之前的 JAX-RS 版本使得开发 RESTful 网络服务变得容易，但每个实现都定义了自己的专有客户端
    API。
- en: Extension points, method filters, and entity interceptors are also introduced
    in JAX-RS 2.0\. These features allow **Aspect Oriented Programming** (**AOP**)
    when developing RESTful web services.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展点、方法过滤器和实体拦截器也被引入到 JAX-RS 2.0 中。这些特性允许在开发 RESTful 网络服务时进行 **面向方面编程**（**AOP**）。
- en: JAX-RS 2.0 also introduces asynchronous processing both on the server side and
    as part of the client API.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JAX-RS 2.0 还在服务器端和客户端 API 中引入了异步处理。
- en: Java Message Service (JMS) 2.0
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java Message Service (JMS) 2.0
- en: The **Java Message Service** (**JMS**) API has been completely revamped in Java
    EE 7\. Previous versions of JMS required lots of boilerplate code; with the new
    revamped JMS 2.0 API, this is no longer the case.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java EE 7 中，**Java 消息服务**（**JMS**）API 已完全重写。之前的 JMS 版本需要大量的样板代码；使用新的重写的 JMS
    2.0 API，这种情况不再存在。
- en: Java API for JSON Processing (JSON-P) 1.0
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java API for JSON Processing (JSON-P) 1.0
- en: JSON-P is a brand new API introduced in Java EE 7\. JSON-P allows us to parse
    and generate **JSON** (**JavaScript Object Notation**) strings.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-P 是 Java EE 7 中引入的一个全新的 API。JSON-P 允许我们解析和生成 **JSON**（**JavaScript 对象表示法**）字符串。
- en: Java API for WebSocket 1.0
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Java API for WebSocket 1.0
- en: Traditional web applications use a request-response model, that is, a client
    (typically a web browser) requests resources and the server provides a response.
    In this model, communication is always initiated by the client.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的 Web 应用程序使用请求-响应模型，即客户端（通常是 Web 浏览器）请求资源，服务器提供响应。在这个模型中，通信始终由客户端发起。
- en: WebSockets were introduced as part of the HTML5 specification; they provide
    full-duplex communication between the client and the server.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: WebSocket 作为 HTML5 规范的一部分被引入；它们在客户端和服务器之间提供全双工通信。
- en: GlassFish advantages
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GlassFish优势
- en: 'With so many options in Java EE application servers, why choose GlassFish?
    Besides the obvious advantage of GlassFish being available free of charge, it
    offers the following benefits:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java EE应用服务器中有这么多选项，为什么选择GlassFish？除了GlassFish免费提供的明显优势外，它还提供以下好处：
- en: '**Java EE reference implementation**: GlassFish is the Java EE reference implementation.
    What this means is that other application servers may use GlassFish to make sure
    their product complies with the specification. GlassFish could theoretically be
    used to debug other application servers. If an application deployed under another
    application server is not behaving properly, but it does behave properly when
    deployed under GlassFish, then more than likely the improper behavior is due to
    a bug in the other application server.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java EE参考实现**：GlassFish是Java EE参考实现。这意味着其他应用服务器可能使用GlassFish来确保其产品符合规范。理论上，GlassFish可以用来调试其他应用服务器。如果一个在另一个应用服务器上部署的应用程序表现不正常，但在GlassFish上部署时表现正常，那么很可能是不正常行为是由于其他应用服务器中的错误。'
- en: '**Supports the latest versions of the Java EE specification**: Since GlassFish
    is the reference Java EE specification, it tends to implement the latest specifications
    before any other application server in the market. As a matter of fact, at the
    time of writing, GlassFish is the only Java EE application server in the market
    that supports the complete Java EE 7 specification.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持Java EE规范的最新版本**：由于GlassFish是参考Java EE规范，它通常在市场上任何其他应用服务器之前实现最新规范。事实上，在撰写本文时，GlassFish是市场上唯一支持完整Java
    EE 7规范的应用服务器。'
- en: Obtaining GlassFish
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取GlassFish
- en: GlassFish can be downloaded at [https://glassfish.java.net](https://glassfish.java.net).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish可以从[https://glassfish.java.net](https://glassfish.java.net)下载。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GlassFish 4.0 is also bundled with the NetBeans IDE version 7.4 or newer.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish 4.0也捆绑了7.4或更新的NetBeans IDE版本。
- en: 'Once there, you will see a window as shown in the following screenshot:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦到达那里，你将看到一个如下截图所示的窗口：
- en: '![Obtaining GlassFish](img/6886EN_01_01.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![获取GlassFish](img/6886EN_01_01.jpg)'
- en: 'Clicking on the **Download** link takes us to a wizard page that provides several
    options to download GlassFish as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下载**链接将带我们到一个提供多个选项的向导页面，以下载GlassFish，如下截图所示：
- en: '![Obtaining GlassFish](img/6886EN_01_02.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![获取GlassFish](img/6886EN_01_02.jpg)'
- en: The download page has several options; we can get the full Java EE platform
    or the web profile. We can also download GlassFish as a compressed ZIP file or
    as a native installer for the operating system of our choice.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下载页面有多个选项；我们可以获取完整的Java EE平台或Web配置文件。我们还可以下载GlassFish作为压缩的ZIP文件或作为我们选择的操作系统的本地安装程序。
- en: To be able to follow all of the examples in this book, we need to download the
    full Java EE platform version of GlassFish. We will download the compressed ZIP
    file version since the instructions to install it are very similar across any
    operating system; feel free to download a platform-specific installer if you prefer.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够跟随本书中的所有示例，我们需要下载GlassFish的完整Java EE平台版本。我们将下载压缩的ZIP文件版本，因为安装说明在所有操作系统上都非常相似；如果您更喜欢，可以自由下载特定平台的安装程序。
- en: Installing GlassFish
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装GlassFish
- en: We will use the ZIP installer to illustrate the installation process. This installation
    process works under all major operating systems.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用ZIP安装程序来演示安装过程。此安装过程适用于所有主流操作系统。
- en: Installing GlassFish is an easy process; however, GlassFish assumes that some
    dependencies are present in your system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 安装GlassFish是一个简单的过程；然而，GlassFish假设您的系统中存在某些依赖项。
- en: GlassFish dependencies
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GlassFish依赖项
- en: In order to install GlassFish 4, a recent version of the **Java Development
    Kit** (**JDK**) must be installed on your workstation (JDK 1.7 or newer required),
    and the Java executable file must be in your system PATH. The latest JDK can be
    downloaded at [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html).
    Please refer to the JDK installation instructions for your particular platform
    at [http://docs.oracle.com/javase/7/docs/webnotes/install/index.html](http://docs.oracle.com/javase/7/docs/webnotes/install/index.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装GlassFish 4，必须在您的工作站上安装一个较新的**Java开发工具包**（**JDK**）（需要JDK 1.7或更高版本），并且Java可执行文件必须在您的系统PATH中。最新的JDK可以从
    [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    下载。请参考 [http://docs.oracle.com/javase/7/docs/webnotes/install/index.html](http://docs.oracle.com/javase/7/docs/webnotes/install/index.html)
    中您特定平台的JDK安装说明。
- en: Performing the installation
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行安装
- en: 'Once JDK has been installed, the GlassFish installation can begin by simply
    extracting the download compressed file as shown in the following screenshot:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了JDK，就可以通过以下截图所示简单地提取下载的压缩文件来开始GlassFish的安装：
- en: '![Performing the installation](img/6886EN_01_03.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![执行安装](img/6886EN_01_03.jpg)'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All modern operating systems including Linux, Windows, and Mac OS X include
    out-of-the-box support to extract compressed ZIP files; consult your operating
    system documentation for details.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 所有现代操作系统，包括Linux、Windows和Mac OS X，都自带了提取压缩ZIP文件的支持；有关详细信息，请参阅您的操作系统文档。
- en: After extracting the ZIP file, a new directory named `glassfish4` will be created.
    This new directory contains our GlassFish installation.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 解压ZIP文件后，将创建一个名为`glassfish4`的新目录。这个新目录包含我们的GlassFish安装。
- en: Starting GlassFish
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动GlassFish
- en: 'To start GlassFish from the command line, change your directory to `[glassfish
    installation directory]/glassfish4/bin` and execute the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行启动GlassFish，请将您的目录更改为 `[glassfish安装目录]/glassfish4/bin` 并执行以下命令：
- en: '[PRE0]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding command, and most commands shown in this chapter, assume a Unix
    or Unix-like operating system such as Linux or Mac OS. For Windows systems, the
    initial `./` is not necessary.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令以及本章中显示的大多数命令都假设使用Unix或Unix-like操作系统，如Linux或Mac OS。对于Windows系统，初始的`./`是不必要的。
- en: 'A few short seconds after executing the preceding command, we should see a
    message similar to the following at the bottom of the terminal:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行前面的命令后不久，我们应该在终端底部看到类似以下的消息：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Tip
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the sample code files for all the Packt books that you have
    purchased from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册，以便将文件直接通过电子邮件发送给您。
- en: 'We can then open a browser window and type the following URL in the browser''s
    location text field:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以打开一个浏览器窗口，并在浏览器地址栏中输入以下URL：
- en: '`http://localhost:8080`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080`'
- en: 'If everything goes well, we should see a page indicating that your GlassFish
    server is now running as shown in the following screenshot:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，我们应该看到一个页面，表明您的GlassFish服务器现在正在运行，如下面的屏幕截图所示：
- en: '![Starting GlassFish](img/6886EN_01_04.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![启动GlassFish](img/6886EN_01_04.jpg)'
- en: Tip
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Getting Help**'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**获取帮助**'
- en: If any of the preceding steps fail or for help with GlassFish in general, a
    great resource is the GlassFish forum at [https://www.java.net/forums/glassfish/glassfish](https://www.java.net/forums/glassfish/glassfish).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果前面的任何步骤失败或需要关于GlassFish的一般帮助，一个很好的资源是GlassFish论坛 [https://www.java.net/forums/glassfish/glassfish](https://www.java.net/forums/glassfish/glassfish)。
- en: Deploying our first Java EE application
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署我们的第一个Java EE应用程序
- en: To further confirm that our GlassFish installation is running properly, we will
    deploy a **WAR** (**Web ARchive**) file and make sure the file deploys and executes
    properly. Before moving on, please download the file `simpleapp.war` from this
    book's web site at [www.packtpub.com](http://www.packtpub.com).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步确认我们的GlassFish安装运行正常，我们将部署一个**WAR**（**Web ARchive**）文件，并确保文件能够正确部署和执行。在继续之前，请从本书的网站
    [www.packtpub.com](http://www.packtpub.com) 下载文件 `simpleapp.war`。
- en: Deploying an application through the Web Console
  id: totrans-86
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过Web控制台部署应用程序
- en: 'To deploy `simpleapp.war`, open a browser and navigate to `http://localhost:4848`.
    You should be greeted with the default GlassFish server administration page as
    shown in the following screenshot:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署`simpleapp.war`，打开浏览器并导航到`http://localhost:4848`。你应该会看到默认的GlassFish服务器管理页面，如下面的截图所示：
- en: '![Deploying an application through the Web Console](img/6886EN_01_05.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web控制台部署应用程序](img/6886EN_01_05.jpg)'
- en: By default, GlassFish is installed in development mode. In this mode, it is
    not necessary to enter a username and password to access the GlassFish web console.
    In production environments, it is highly advisable to configure the web console
    so that it is password protected.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，GlassFish以开发模式安装。在这种模式下，访问GlassFish网络控制台不需要输入用户名和密码。在生产环境中，强烈建议配置网络控制台，使其受密码保护。
- en: At this point, we should click on the **Deploy an Application** item under the
    **Deployment** section on the main screen.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们应该点击主屏幕下**部署**部分中的**部署应用程序**项。
- en: 'To deploy our application, we should select the **Local Packaged File or Directory
    That is Accessible from GlassFish Server** radio button and either type the path
    to our WAR file or select it by clicking on the **Browse Files...** button. Once
    this is done, you will see a window as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要部署我们的应用程序，我们应该选择**从GlassFish服务器可访问的本地打包文件或目录**单选按钮，并输入我们的WAR文件的路径或通过点击**浏览文件...**按钮选择它。一旦完成，你将看到一个窗口，如下面的截图所示：
- en: '![Deploying an application through the Web Console](img/6886EN_01_06.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web控制台部署应用程序](img/6886EN_01_06.jpg)'
- en: 'After we have selected our WAR file, a number of input fields that allow us
    to specify several options are shown. For our purposes, all defaults are fine.
    We can simply click on the **OK** button at the top right of the page as shown
    in the following screenshot:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们选择了我们的WAR文件后，会显示一些输入字段，允许我们指定几个选项。对于我们的目的，所有默认值都很好。我们只需简单地点击页面右上角的**确定**按钮，如下面的截图所示：
- en: '![Deploying an application through the Web Console](img/6886EN_01_07.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web控制台部署应用程序](img/6886EN_01_07.jpg)'
- en: 'Once we deploy our application, the GlassFish web console displays the **Applications**
    window, with our application listed as one of the deployed applications as shown
    in the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们部署了应用程序，GlassFish网络控制台将显示**应用程序**窗口，我们的应用程序作为已部署应用程序之一列出，如下面的截图所示：
- en: '![Deploying an application through the Web Console](img/6886EN_01_08.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web控制台部署应用程序](img/6886EN_01_08.jpg)'
- en: 'To execute the `simpleapp` application, type the following URL in the browser''s
    location text field:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行`simpleapp`应用程序，在浏览器地址栏中输入以下URL：
- en: '`http://localhost:8080/simpleapp/simpleservlet`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:8080/simpleapp/simpleservlet`'
- en: 'The resulting page should look like the following screenshot:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的页面应如下面的截图所示：
- en: '![Deploying an application through the Web Console](img/6886EN_01_09.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![通过Web控制台部署应用程序](img/6886EN_01_09.jpg)'
- en: That's it! We have successfully deployed our first Java EE application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们已经成功部署了我们的第一个Java EE应用程序。
- en: Undeploying an application through the GlassFish Admin Console
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过GlassFish管理控制台卸载应用程序
- en: 'To undeploy the application we just deployed, log in to the GlassFish Admin
    Console by typing the following URL in the browser:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 要卸载我们刚刚部署的应用程序，通过在浏览器中输入以下URL登录到GlassFish管理控制台：
- en: '`http://localhost:4848`'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://localhost:4848`'
- en: Then, either click on the **Applications** menu item in the navigation pane
    on the left, or click on the **List Deployed Applications** item on the administration
    console's home page.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，要么在左侧导航面板中点击**应用程序**菜单项，要么在管理控制台主页上点击**列出已部署应用程序**项。
- en: 'Either way should take us to the application management page as shown in the
    following screenshot:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，都应带我们到应用程序管理页面，如下面的截图所示：
- en: '![Undeploying an application through the GlassFish Admin Console](img/6886EN_01_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![通过GlassFish管理控制台卸载应用程序](img/6886EN_01_10.jpg)'
- en: The application can be undeployed simply by selecting the checkbox next to the
    `simpleapp` name from the list of deployed applications and clicking on the **Undeploy**
    button above the list of deployed applications.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序可以通过简单地从已部署应用程序列表中选择`simpleapp`名称旁边的复选框，然后点击列表上方的**卸载**按钮来卸载。
- en: 'Once our application has been undeployed, it is no longer shown on the application
    management page as shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们的应用程序被卸载，它将不再显示在应用程序管理页面上，如下面的截图所示：
- en: '![Undeploying an application through the GlassFish Admin Console](img/6886EN_01_11.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![通过GlassFish管理控制台卸载应用程序](img/6886EN_01_11.jpg)'
- en: Deploying an application through the command line
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过命令行部署应用程序
- en: There are two ways in which an application can be deployed through the command
    line—it can be done either by copying the artifact we want to deploy to an `autodeploy`
    directory, or by using GlassFish's `asadmin` command-line utility.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令必须在`[glassfish安装目录]/glassfish4/bin`路径下执行。
- en: The autodeploy directory
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: '`asadmin`可执行文件也可以通过发出如下命令来卸载应用程序：'
- en: Now that we have undeployed the `simpleapp` WAR file, we are ready to deploy
    it using the command line. To deploy the application in this manner, simply copy
    `simpleapp.war` to `[glassfish installation directory]/glassfish4/glassfish/domains/domain1/autodeploy`.
    The application will automatically be deployed just by copying it to this directory.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经卸载了`simpleapp`WAR文件，我们准备使用命令行来部署它。要以这种方式部署应用程序，只需将`simpleapp.war`复制到`[glassfish安装目录]/glassfish4/glassfish/domains/domain1/autodeploy`。只需将文件复制到该目录，应用程序就会自动部署。
- en: 'We can verify that the application has successfully been deployed by looking
    at the server log. The server log can be found by typing `[glassfish installation
    directory]/glassfish4/glassfish/domains/domain1/logs/server.log`. The last few
    lines on this file should look something like the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看服务器日志来验证应用程序是否已成功部署。可以通过输入`[glassfish安装目录]/glassfish4/glassfish/domains/domain1/logs/server.log`来找到服务器日志。该文件上的最后几行应该看起来像以下内容：
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We can, of course, also verify the deployment by navigating to the same URL
    for the application, which we used when deploying through the web console: `http://localhost:8080/simpleapp/simpleservlet`.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当然也可以通过导航到与通过Web控制台部署时相同的URL来验证部署：`http://localhost:8080/simpleapp/simpleservlet`。
- en: Once here, the application should execute properly.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦到达这里，应用程序应该能够正确执行。
- en: 'An application deployed this way can be undeployed by simply deleting the artifact
    (WAR file, in our case) from the `autodeploy` directory. After deleting the file,
    we should see a message similar to the following in the server log:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式部署的应用程序可以通过简单地从`autodeploy`目录中删除工件（在我们的例子中是WAR文件）来卸载。删除文件后，我们应该在服务器日志中看到类似于以下的消息：
- en: '[PRE3]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The asadmin command-line utility
  id: totrans-121
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: asadmin命令行实用程序
- en: 'An alternate way of deploying an application through the command line is to
    use the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过命令行部署应用程序的另一种方法是使用以下命令：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding command must be executed from the `[glassfish installation directory]/glassfish4/bin`
    path.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令必须在`[glassfish安装目录]/glassfish4/bin`路径下执行。
- en: 'We should see the following confirmation on the command line terminal letting
    us know that the file was deployed successfully:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在命令行终端看到以下确认信息，以告知我们文件已成功部署：
- en: '[PRE5]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The server logfile should show a message similar to the following:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器日志文件应显示类似于以下的消息：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `asadmin` executable can be used to undeploy an application as well by
    issuing a command like the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`asadmin`可执行文件通过发出类似以下命令来卸载应用程序：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following message should be shown at the bottom of the terminal window:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下消息应在终端窗口的底部显示：
- en: '[PRE8]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Please note that the file extension is not used to undeploy the application,
    the argument to `asadmin undeplo`y should be the application name, which is, by
    default, the WAR file name (minus the extension).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，文件扩展名不用于卸载应用程序，`asadmin undeploy`的参数应该是应用程序名称，默认情况下是WAR文件名（不带扩展名）。
- en: GlassFish domains
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过命令行部署应用程序有两种方式——可以通过将我们要部署的工件复制到`autodeploy`目录，或者使用GlassFish的`asadmin`命令行实用程序来完成。
- en: Alert readers might have noticed that the `autodeploy` directory is under a
    `domains/domain1` subdirectory. GlassFish has a concept of domains. Domains allow
    a collection of related applications to be deployed together. Several domains
    can be started concurrently. GlassFish domains behave like individual GlassFish
    instances; a default domain called `domain1` is created when installing GlassFish.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕的读者可能已经注意到`autodeploy`目录位于`domains/domain1`子目录下。GlassFish有一个域的概念。域允许将相关应用程序一起部署。可以同时启动多个域。GlassFish域的行为类似于单独的GlassFish实例；在安装GlassFish时，会创建一个默认域，称为`domain1`。
- en: Creating Domains
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建域
- en: 'Additional domains can be created from the command line by issuing the following
    command:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在命令行中发出以下命令来从命令行创建额外的域：
- en: '[PRE9]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding command takes several parameters to specify ports where the domain
    will listen to for several services (HTTP, Admin, JMS, IIOP, Secure HTTP, and
    so on). Type the following command in the command line to see these parameters:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令接受多个参数来指定域名将监听的服务（HTTP、Admin、JMS、IIOP、Secure HTTP等）的端口号。在命令行中输入以下命令以查看这些参数：
- en: '[PRE10]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: If we want several domains to execute concurrently on the same server, these
    ports must be chosen carefully since specifying the same ports for different services
    (or even the same service across domains) will prevent one of the domains from
    working properly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在同一服务器上同时运行多个域名，这些端口号必须仔细选择，因为为不同的服务（或甚至跨域的相同服务）指定相同的端口号将阻止其中一个域名正常工作。
- en: 'The default ports for the default `domain1` domain are listed in the following
    table:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 默认`domain1`域名的默认端口号列在以下表中：
- en: '| Service | Port |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | 端口号 |'
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Admin | 4848 |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| Admin | 4848 |'
- en: '| HTTP | 8080 |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| HTTP | 8080 |'
- en: '| Java Messaging System (JMS) | 7676 |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| Java Messaging System (JMS) | 7676 |'
- en: '| Internet Inter-ORB Protocol (IIOP) | 3700 |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| Internet Inter-ORB Protocol (IIOP) | 3700 |'
- en: '| Secure HTTP (HTTPS) | 8181 |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| Secure HTTP (HTTPS) | 8181 |'
- en: '| Secure IIOP | 3820 |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| Secure IIOP | 3820 |'
- en: '| Mutual Authorization IIOP | 3920 |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| Mutual Authorization IIOP | 3920 |'
- en: '| Java Management Extensions (JMX) administration | 8686 |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| Java Management Extensions (JMX) administration | 8686 |'
- en: Please note that when creating a domain, the only port that needs to be specified
    is the admin port. If the other ports are not specified, the default ports listed
    in the preceding table will be used. Care must be taken when creating a domain,
    since, as explained above, two domains cannot run concurrently in the same server
    if any of their services listen for connections on the same port.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在创建域名时，只需指定管理端口号。如果未指定其他端口号，将使用前面表中列出的默认端口号。在创建域名时必须小心，因为如上所述，如果任何服务在相同的端口上监听连接，则同一服务器上的两个域名不能同时运行。
- en: 'An alternate method of creating a domain, without having to specify ports for
    every service, is to issue the following command:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 创建域名的另一种方法，无需为每个服务指定端口号，是执行以下命令：
- en: '[PRE11]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The value of the `--portbase` parameter dictates the base port for the domain;
    ports for the different services will be offsets of the given port number. The
    following table lists the ports assigned to all the different services:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`--portbase`参数的值决定了域名的基准端口号；不同服务的端口号将是给定端口号的偏移量。以下表列出了分配给所有不同服务的端口号：'
- en: '| Service | Port |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| 服务 | 端口号 |'
- en: '| --- | --- |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Admin | portbase + 48 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| Admin | 端口号 + 48 |'
- en: '| HTTP | portbase + 80 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| HTTP | 端口号 + 80 |'
- en: '| Java Messaging System (JMS) | portbase + 76 |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| Java Messaging System (JMS) | 端口号 + 76 |'
- en: '| Internet Inter-ORB Protocol (IIOP) | portbase + 37 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| Internet Inter-ORB Protocol (IIOP) | 端口号 + 37 |'
- en: '| Secure HTTP (HTTPS) | portbase + 81 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| Secure HTTP (HTTPS) | 端口号 + 81 |'
- en: '| Secure IIOP | portbase + 38 |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| Secure IIOP | 端口号 + 38 |'
- en: '| Mutual Authorization IIOP | portbase + 39 |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| Mutual Authorization IIOP | 端口号 + 39 |'
- en: '| Java Management Extensions (JMX) administration | portbase + 86 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| Java Management Extensions (JMX) administration | 端口号 + 86 |'
- en: Of course, care must be taken when choosing the value for `--portbase`, making
    sure that none of the assigned ports collide with any other domain.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在为`--portbase`选择值时必须小心，确保分配的端口号不会与其他任何域名冲突。
- en: Tip
  id: totrans-169
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a rule of thumb, creating domains using a portbase number greater than 8000
    and divisible by 1000 should create domains that don't conflict with each other.
    For example, it should be safe to create a domain using a portbase of 9000, another
    one using a portbase of 10000, so on and so forth.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，使用大于8000且能被1000整除的端口号创建域名，应该能创建出不会相互冲突的域名。例如，使用端口号9000创建一个域名，另一个使用端口号10000，依此类推，应该是安全的。
- en: Deleting domains
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除域名
- en: 'Deleting a domain is very simple. It can be accomplished by issuing the following
    command in the command line:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 删除域名非常简单。可以通过在命令行中执行以下命令来完成：
- en: '[PRE12]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We should see the following message on the terminal window:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该在终端窗口看到以下信息：
- en: '[PRE13]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Tip
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please use the preceding command with care. Once a domain is deleted, it cannot
    be easily recreated (all deployed applications as well as any connection pools,
    data sources, and so on will be gone).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 请谨慎使用上述命令。一旦删除了域名，它就不能轻易地被重新创建（所有已部署的应用程序以及任何连接池、数据源等都将消失）。
- en: Stopping a domain
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止域名
- en: 'A domain that is running can be stopped by issuing the following command:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过执行以下命令来停止正在运行的域名：
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding command will stop the domain named `domainname`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将停止名为`domainname`的域名。
- en: 'If only one domain is running, the `domainname` argument is optional, that
    is, we can simply stop the running domain by issuing the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个域正在运行，则`domainname`参数是可选的，也就是说，我们可以简单地通过以下命令停止正在运行的域：
- en: '[PRE15]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This book will assume that the reader is working with the default domain called
    `domain1` and the default ports. If this is not the case, instructions given need
    to be modified to match the appropriate domain and port.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将假设读者正在使用默认域`domain1`和默认端口进行工作。如果不是这种情况，给出的说明需要修改以匹配适当的域和端口。
- en: Setting up Database Connectivity
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库连接
- en: Any nontrivial Java EE application will connect to a **Relational Database Management
    System** (**RDBMS**). Supported RDBMS systems include Java DB, Oracle, Derby,
    Sybase, DB2, PointBase, MySQL, PostgreSQL, Informix, Cloudscape, and SQL Server.
    In this section, we will demonstrate how to set up GlassFish to communicate with
    a MySQL database. The procedure is similar for other RDBMS systems.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 任何非平凡的Java EE应用程序都将连接到**关系数据库管理系统**（**RDBMS**）。支持的RDBMS系统包括Java DB、Oracle、Derby、Sybase、DB2、PointBase、MySQL、PostgreSQL、Informix、Cloudscape和SQL
    Server。在本节中，我们将演示如何设置GlassFish与MySQL数据库通信。对于其他RDBMS系统，该过程类似。
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: GlassFish comes bundled with an RDBMS called JavaDB. This RDBMS is based on
    Apache Derby. To limit the download and configuration needed to follow this book's
    code, all examples needing an RDBMS will use the bundled JavaDB RDBMS. The instructions
    in this section are to illustrate how to connect GlassFish to a third-party RDBMS.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: GlassFish附带一个名为JavaDB的RDBMS。这个RDBMS基于Apache Derby。为了限制本书代码所需的下载和配置，所有需要RDBMS的示例都将使用捆绑的JavaDB
    RDBMS。本节中的说明是为了说明如何将GlassFish连接到第三方RDBMS。
- en: Setting up connection pools
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置连接池
- en: Opening and closing the database connections is a relatively slow operation.
    For performance reasons, GlassFish and other Java EE application servers keep
    a pool of open database connections; when a deployed application requires a database
    connection, one is provided from the pool; when the application no longer needs
    the database connection, the said connection is returned to the pool.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 打开和关闭数据库连接是一个相对缓慢的操作。出于性能考虑，GlassFish和其他Java EE应用程序服务器会保持一个打开的数据库连接池；当部署的应用程序需要数据库连接时，就会从池中提供一个；当应用程序不再需要数据库连接时，该连接就会返回到池中。
- en: 'The first step to follow when setting up a connection pool is to copy the JAR
    file containing the JDBC driver for our RDBMS in the `lib` directory of the domain
    (consult your RDBMS documentation for information on where to obtain this JAR
    file). If the GlassFish domain where we want to add the connection pool is running
    when copying the JDBC driver, it must be restarted for the change to take effect.
    The domain can be restarted by executing the following command:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 设置连接池的第一步是复制包含我们RDBMS JDBC驱动的JAR文件到域的`lib`目录中（查阅你的RDBMS文档以获取有关获取此JAR文件的信息）。如果我们想添加连接池的GlassFish域在复制JDBC驱动程序时正在运行，则必须重新启动域以使更改生效。可以通过执行以下命令来重新启动域：
- en: '[PRE16]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Once the JDBC driver has been copied to the appropriate location and the application
    server has been restarted, log in to the admin console by pointing the browser
    to `http://localhost:4848`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦JDBC驱动程序已复制到适当的目录，并且应用程序服务器已重新启动，请通过将浏览器指向`http://localhost:4848`来登录管理控制台。
- en: 'Then, navigate to **Resources** | **JDBC** | **JDBC Connection Pools**. The
    browser should now look something like what is shown in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，导航到**资源** | **JDBC** | **JDBC连接池**。浏览器现在应该类似于以下截图所示：
- en: '![Setting up connection pools](img/6886EN_01_12.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![设置连接池](img/6886EN_01_12.jpg)'
- en: 'Click on the **New...** button. After entering the appropriate values for our
    RDBMS, the main area of the page should look something like the following screenshot:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**新建...**按钮。在输入我们RDBMS的适当值后，页面主区域应类似于以下截图：
- en: '![Setting up connection pools](img/6886EN_01_13.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![设置连接池](img/6886EN_01_13.jpg)'
- en: 'After clicking on the **Next** button, we should see a page similar to the
    one shown in the following screenshot:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**下一步**按钮后，我们应该看到类似于以下截图的页面：
- en: '![Setting up connection pools](img/6886EN_01_14.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![设置连接池](img/6886EN_01_14.jpg)'
- en: Most of the default values on the top portion of the page shown in the preceding
    screenshot are sensible. Scroll all the way down and enter the appropriate property
    values for our RDBMS (at a minimum, username, password, and URL). Then, click
    on the **Finish** button at the top right of the screen.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面截图显示的页面顶部大部分默认值都是合理的。滚动到页面底部，并输入我们RDBMS（至少包括用户名、密码和URL）的适当属性值。然后，点击屏幕右上角的**完成**按钮。
- en: Property names vary depending on the RDBMS we are using, but usually there is
    a URL property where we should enter the JDBC URL for our database, plus username
    and password properties where we should enter authentication credentials for our
    database.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 属性名称取决于我们使用的RDBMS，但通常有一个URL属性，我们应该在其中输入数据库的JDBC URL，以及用户名和密码属性，我们应该在其中输入数据库的认证凭据。
- en: 'Our newly created connection pool should now be visible in the list of connection
    pools as shown in the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新创建的连接池现在应该可以在连接池列表中看到，如下面的截图所示：
- en: '![Setting up connection pools](img/6886EN_01_15.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![设置连接池](img/6886EN_01_15.jpg)'
- en: In some cases, the GlassFish domain may need to be restarted after setting up
    a new connection pool.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，在设置新的连接池后，可能需要重新启动GlassFish域。
- en: 'We can verify that our connection pool was successfully set up by clicking
    on its pool name and then enabling the **Ping** button on the resulting page as
    shown in the following screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过点击其池名称，然后在结果页面上的**Ping**按钮上启用，来验证我们的连接池是否成功设置，如下面的截图所示：
- en: '![Setting up connection pools](img/6886EN_01_16.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![设置连接池](img/6886EN_01_16.jpg)'
- en: Our connection pool is now ready to be used by our applications.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据源现在已准备好供我们的应用程序使用。
- en: Setting up the data sources
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置数据源
- en: 'Java EE applications don''t access connection pools directly; they access a
    data source instead, which points to a connection pool. To set up a new data source,
    click on the **JDBC** icon under the **Resources** menu item on the left-hand
    side of the web console, then click on the **JDBC Connection Pools** tab, and
    then click on the **New...** button. After filling out the appropriate information
    for our new data source, the main area of the web console should look something
    like what is shown in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: Java EE应用程序不直接访问连接池；它们通过数据源访问，该数据源指向连接池。要设置新的数据源，点击左侧网页控制台下的**资源**菜单项下的**JDBC**图标，然后点击**JDBC连接池**选项卡，然后点击**新建...**按钮。填写我们新数据源的相关信息后，网页控制台的主要区域应该看起来像以下截图所示：
- en: '![Setting up the data sources](img/6886EN_01_17.jpg)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![设置数据源](img/6886EN_01_17.jpg)'
- en: 'After clicking on the **OK** button, we can see our newly created data source
    as shown in the following screenshot:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确定**按钮后，我们可以在以下截图所示中看到我们新创建的数据源：
- en: '![Setting up the data sources](img/6886EN_01_18.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![设置数据源](img/6886EN_01_18.jpg)'
- en: Summary
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed how to download and install GlassFish. We also
    discussed several methods of deploying the Java EE application through the GlassFish
    web console, through the `asadmin` command, and by copying the file to the `autodeploy`
    directory. We also discussed basic GlassFish administration tasks like setting
    up domains and setting up Database Connectivity by adding connection pools and
    data sources. In the next chapter, we will cover how to develop web applications
    using JSF.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了如何下载和安装GlassFish。我们还讨论了通过GlassFish网页控制台、通过`asadmin`命令以及通过将文件复制到`autodeploy`目录来部署Java
    EE应用程序的几种方法。我们还讨论了基本的GlassFish管理任务，如设置域和通过添加连接池和数据源来设置数据库连接。在下一章中，我们将介绍如何使用JSF开发Web应用程序。
