["```java\n    String text = null;\n    int length = text.length();\n    ```", "```java\n    public void unreachableCodeExample() {\n        boolean condition = someBooleanMethod();\n        if (condition) {\n            System.out.println(\"Condition is true.\");\n            return;\n        }\n        System.out.println(\"This line of code is unreachable.\");\n    }\n    private static boolean someBooleanMethod() {\n        return true;\n    }\n    System.out will never be executed. So, you have to refactor your code: you could fix the boolean method if that’s the case or just drop it and delete the if condition.\n    ```", "```java\n    public void classMismatchExample(){\n        Object i = 6;\n        String s = (String) i; //this will throw an exception\n        System.out.println(s);\n    }\n    ```", "```java\n    Person person = new Person();\n    Person anotherPerson = new Person();\n    if(person.equals(anotherPerson)) {\n        System.out.println(\"They're equal\");\n    } else {\n        System.out.println(\"They're not equal\");\n    }\n    if(person.compareTo(anotherPerson) == 0) {\n        System.out.println(\"They're equal\");\n    } else {\n        System.out.println(\"They're not equal\");\n    }\n    ```", "```java\n    They're not equal\n    equals method is not correctly implemented in our Person class, and we’re using the one coming from Object. If our class implements equals on it. To avoid any misbehavior, you could just override equals using compareTo:\n\n    ```", "```java\n\n    ```", "```java\npublic int calculateSum(int a, int b) {\n    if (a > 0) {\n        return a + b;\n    } else {\n        return a - b;\n    }\n}\n```", "```java\nPerson person = null;\ntry {\n    String name = person.getName(); //throws NPE\n} finally {\n    throw new IOException();\n}\n```", "```java\nPerson person = null;\ntry {\n    String name = person.getName(); //throws NPE\n} finally {\n    return;\n}\n```", "```java\npublic static void copyFiles(String sourceFileName, String destFileName) {\n    InputStream inputStream = null;\n    OutputStream outputStream = null;\n    try {\n        inputStream = Files.newInputStream(Paths.get(sourceFileName));\n        outputStream = Files.newOutputStream(Paths.get(destFileName));\n        copy(inputStream, outputStream);\n    } catch (IOException e) {\n        // handling exception\n    } finally {\n        try {\n            inputStream.close();\n            outputStream.close();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n```", "```java\nvoid doSomething() {\n    int x = getInput();\n    int z = x + 2;\n    if (z > 20) {\n        throw new RuntimeException();\n    } else {\n        System.out.println(\"OK\");\n    }\n}\n```"]