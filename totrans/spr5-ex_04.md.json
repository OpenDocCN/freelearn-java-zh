["```java\nvar bookName: String\n```", "```java\nval book = \"Spring 5.0 by Example\"\n```", "```java\nval book = \"Spring 5.0 by Example\"\nvar bookName: String\nprintln(\"Hello, world!\")\n```", "```java\nfun greetings(name:String,greeting:String):String{\n  return greeting + name\n}\n```", "```java\npublic String greetings(String name,String greeting){\n  return greeting + name;\n}\n```", "```java\nfun printGreetings(name:String,greeting:String):Unit{\n  println(greeting + name)\n}\n```", "```java\nfun greetings(name:String,greeting:String) = greeting + name\n```", "```java\nopen class Greetings {\n  open fun greeting() {}\n}\n\nclass SuperGreeting() : Greetings() {\n override fun greeting() {\n  // my super greeting\n  }\n}\n```", "```java\ndata class Book(val author:String,val name:String,val description:String,val new:Boolean = false)\n```", "```java\nfun main(args : Array<String>) {\n  val springFiveOld = Book(\"Claudio E. de Oliveira\",\"Spring 5.0 by Example\",\"Amazing example of Spring Boot Apps\",false)\n  val springFiveNew = springFiveOld.copy(new = true)\n  println(springFiveOld)\n  println(springFiveNew)\n}\n```", "```java\nobject BookNameFormatter{\n  fun format(book: Book):String = \"The book name is\" + book.name\n}\n```", "```java\nval springFiveOld = Book(\"Claudio E. de Oliveira\",\"Spring 5.0 by Example\",\"Amazing example of Spring Boot Apps\",false)\nBookNameFormatter.format(springFiveOld)\n```", "```java\ndata class Book(val author:String,val name:String,val description:String,val new:Boolean = false{\n\n  companion object {\n    fun create(name:String,description: String,author: String):Book{\n      return Book(author,name,description)\n    }\n  }\n\n}\n```", "```java\nval myBookWithFactory = Book.create(\"Claudio E. de Oliveira\",\"Spring 5.0 by Example\",\"Amazing example of Spring Boot Apps\")\n```", "```java\nval bookName = \"Spring 5.0\"\nval phrase = \"The name of the book is $bookName\"\n```", "```java\nval springFiveOld = Book(\"Claudio E. de Oliveira\",\"Spring 5.0 by Example\",\"Amazing example of Spring Boot Apps\",false)\nval phrase = \"The name of the book is ${springFiveOld.name}\"\n```", "```java\nfun returnValue(instance: Any): String {\n  if (instance is String) {\n    return instance\n  }\n  throw IllegalArgumentException(\"Instance is not String\")\n} \n```", "```java\npublic String returnValue(Object instance) {\n  if (instance instanceof String) {\n    String value = (String) instance;\n      return value;\n    }\n    throw IllegalArgumentException(\"Instance is not String\");\n}\n```", "```java\nfor ( i in 1..5){\n  println(i)\n}\n```", "```java\nfor (i in 1 until 5) {\n  println(i)\n}\n```", "```java\nfor (i in 5 downTo 1) {\n  println(i)\n}\n```", "```java\nfor (i in 1..6 step 2) {\n  print(i)\n}\n```", "```java\nvar myNonNullString:String = \"my non null string\"\n```", "```java\nvar allowNull:String? = \"permits null references\"\n```", "```java\nval hash:TrackedHashTag? = TrackedHashTag(hashTag=\"java\",queue=\"java\")\nval queueString = hash?.queue\n```", "```java\nval hash:TrackedHashTag? = TrackedHashTag(hashTag=\"java\",queue=\"java\")\nval queueString = hash?.queue ?: \"unrecognized-queue\"\n```", "```java\n\n<dependency>\n <groupId>com.fasterxml.jackson.module</groupId>\n <artifactId>jackson-module-kotlin</artifactId>\n <version>${jackson.version}</version>\n</dependency>\n```", "```java\n<plugin>\n  <artifactId>kotlin-maven-plugin</artifactId>\n  <groupId>org.jetbrains.kotlin</groupId>\n  <version>${kotlin.version}</version>\n  <configuration>\n    <jvmTarget>1.8</jvmTarget>\n  </configuration>\n  <executions>\n    <execution>\n      <id>compile</id>\n      <phase>process-sources</phase>\n      <goals>\n        <goal>compile</goal>\n      </goals>\n    </execution>\n    <execution>\n      <id>test-compile</id>\n      <phase>process-test-sources</phase>\n      <goals>\n        <goal>test-compile</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\n    <build>\n\n    <sourceDirectory>${project.basedir}/src/main/kotlin<\n    /sourceDirectory<testSourceDirectory>${project.basedir}/src/\n    test/kotlin</testSourceDirectory>\n\n    .....\n\n    </build>\n```", "```java\ndocker network create twitter\n```", "```java\ndocker network list\n```", "```java\ndocker pull redis:4.0.6-alpine\n```", "```java\ndocker images\n```", "```java\ndocker run -d --name redis --net twitter -p 6379:6379 redis:4.0.6-alpine\n```", "```java\nsudo apt-get install redis-tools -y\n```", "```java\nredis-cli\n```", "```java\n SET \"user:id:10\" \"joe\"\n```", "```java\n GET \"user:id:10\"\n```", "```java\n SET \"users\" \"0\"\n INCR \"users\"\n GET \"users\"\n```", "```java\n GET \"users\"\n DECR \"users\"\n GET \"users\"\n```", "```java\n GET \"users\"\n INCRBY \"users\" 2\n GET \"users\"\n```", "```java\n LPUSH \"categories\" \"sports\"\n LPUSH \"categories\" \"movies\"\n LRANGE \"categories\" 0 -1\n```", "```java\n RPUSH \"categories\" \"kitchen\"\n RPUSH \"categories\" \"room\"\n LRANGE \"categories\" 0 -1\n```", "```java\n LSET \"categories\" 0 \"series\"\"\n LRANGE \"categories\" 0 -1\n```", "```java\n LRANGE \"categories\" 0 2\n LRANGE \"categories\" 0 -1\n```", "```java\n SADD \"unique-visitors\" \"joe\"\n SADD \"unique-visitors\" \"mary\"\n```", "```java\n SMEMBERS \"unique-visitors\"\n```", "```java\n SCARD \"unique-visitors\"\n```", "```java\nspring:\n  redis:\n    host: localhost\n    port: 6379\n\n```", "```java\npackage springfive.twittertracked.infra.redis\n\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.data.redis.connection.ReactiveRedisConnectionFactory\nimport org.springframework.data.redis.core.ReactiveRedisTemplate\nimport org.springframework.data.redis.serializer.RedisSerializationContext\n\n@Configuration\nopen class RedisConfiguration {\n\n  @Bean\n  open fun reactiveRedisTemplate(connectionFactory:ReactiveRedisConnectionFactory):  \n ReactiveRedisTemplate<String, String> {\n      return ReactiveRedisTemplate(connectionFactory, RedisSerializationContext.string())\n  }\n\n}\n```", "```java\npackage springfive.twittertracked.domain.repository\n\nimport org.springframework.data.redis.core.ReactiveRedisTemplate\nimport org.springframework.stereotype.Service\nimport reactor.core.publisher.Flux\nimport reactor.core.publisher.Mono\nimport springfive.twitterconsumer.domain.TrackedHashTag\n\n@Service\nclass TrackedHashTagRepository(private val redisTemplate: ReactiveRedisTemplate<String, String>){\n\n fun save(trackedHashTag: TrackedHashTag): Mono<TrackedHashTag>? {\n    return this.redisTemplate\n             .opsForSet().add(\"hash-tags\", \"${trackedHashTag.hashTag}:${trackedHashTag.queue}\")\n             .flatMap { Mono.just(trackedHashTag) }\n  }\n\n  fun findAll(): Flux<TrackedHashTag> {\n    return this.redisTemplate.opsForSet().members(\"hash-tags\").flatMap { el ->\n      val data = el.split(\":\")\n      Flux.just(TrackedHashTag(hashTag = data[0],queue = data[1]))\n    }\n  }\n}\n```", "```java\npackage springfive.twittertracked.domain.service\n\nimport org.springframework.stereotype.Service\nimport springfive.twitterconsumer.domain.TrackedHashTag\nimport springfive.twitterconsumer.domain.repository.TrackedHashTagRepository\n\n@Service\nclass TrackedHashTagService(private val repository: TrackedHashTagRepository) {\n\n  fun save(hashTag:TrackedHashTag) = this.repository.save(hashTag)\n\n  fun all() = this.repository.findAll()\n\n}\n```", "```java\npackage springfive.twittertracked.domain.resource\n\nimport org.springframework.web.bind.annotation.*\nimport springfive.twitterconsumer.domain.TrackedHashTag\nimport springfive.twitterconsumer.domain.service.TrackedHashTagService\n\n@RestController\n@RequestMapping(\"/api/tracked-hash-tag\")\nclass TrackedHashTagResource(private val service:TrackedHashTagService) {\n\n  @GetMapping\n  fun all() = this.service.all()\n\n  @PostMapping\n  fun save(@RequestBody hashTag:TrackedHashTag) = this.service.save(hashTag)\n\n}\n```", "```java\n<build>\n\n  <finalName>tracked_hashtag</finalName>\n\n  ....\n\n</build>\n```", "```java\n<plugin>\n  <groupId>io.fabric8</groupId>\n  <artifactId>docker-maven-plugin</artifactId>\n  <version>0.21.0</version>\n  <configuration>\n    <images>\n      <image>\n        <name>springfivebyexample/${project.build.finalName}</name>\n        <build>\n          <from>openjdk:latest</from>\n          <entryPoint>java -Dspring.profiles.active=container -jar \n       /application/${project.build.finalName}.jar</entryPoint>\n          <assembly>\n            <basedir>/application</basedir>\n            <descriptorRef>artifact</descriptorRef>\n            <inline>\n              <id>assembly</id>\n              <files>\n                <file>\n               <source>target/${project.build.finalName}.jar</source>\n                </file>\n              </files>\n            </inline>\n          </assembly>\n          <tags>\n            <tag>latest</tag>\n          </tags>\n          <ports>\n            <port>9090</port>\n          </ports>\n        </build>\n        <run>\n          <namingStrategy>alias</namingStrategy>\n        </run>\n        <alias>${project.build.finalName}</alias>\n      </image>\n    </images>\n  </configuration>\n</plugin>\n```", "```java\nmvn clean install docker:build\n```", "```java\ndocker images\n```", "```java\ndocker run -d --name hashtag-tracker --net twitter -p 9090:9090 springfivebyexample/tracked_hashtag\n```", "```java\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"hashTag\":\"java\",\"queue\":\"java\"}' \\\n http://localhost:9090/api/tracked-hash-tag\n```", "```java\ncurl 'http://localhost:9090/api/tracked-hash-tag' | jq '.'\n```"]