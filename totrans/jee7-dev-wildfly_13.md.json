["```java\n<dependency>\n    <groupId>junit</groupId>\n    <artifactId>junit</artifactId>\n    <scope>test</scope>\n    <version>4.11</version>\n</dependency>\n```", "```java\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.jboss.arquillian</groupId>\n            <artifactId>arquillian-bom</artifactId>\n            <version>1.1.5.Final</version>\n            <scope>import</scope>\n            <type>pom</type>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```", "```java\n<dependency>\n    <groupId>org.jboss.arquillian.junit</groupId>\n    <artifactId>arquillian-junit-container</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<profile>\n    <id>arq-wildfly-managed</id>\n    <dependencies>\n        <dependency>\n            <groupId>org.wildfly</groupId>\n            <artifactId>wildfly-arquillian-container-managed</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n</profile>\n```", "```java\n<dependency>\n    <groupId>org.jboss.arquillian.protocol</groupId>\n    <artifactId>arquillian-protocol-servlet</artifactId>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(Arquillian.class)\npublic class TicketServiceTest {\n\n}\n```", "```java\n@Deployment\npublic static Archive<?> createTestArchive() {\n    return ShrinkWrap.create(WebArchive.class)\n         addPackage(SeatType.class.getPackage())\n        .addPackage(TicketService.class.getPackage())\n        .addPackage(LoggerProducer.class.getPackage())\n        .addAsResource(\"META-INF/persistence.xml\")\n        .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n}\n```", "```java\n@Inject\nTicketService ticketService;\n\n@Test\npublic void shouldCreateSeatType() throws Exception {\n    // given\n    final SeatType seatType = new SeatType();\n    seatType.setDescription(\"Balcony\");\n    seatType.setPrice(11);\n    seatType.setQuantity(5);\n\n    // when\n    ticketService.createSeatType(seatType);\n\n    // then\n    assertNotNull(seatType.getId());\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<arquillian \n\n            xsi:schemaLocation=\"http://jboss.org/schema/arquillian\n        http://jboss.org/schema/arquillian/arquillian_1_0.xsd\">\n\n    <container qualifier=\"jboss-managed\" default=\"true\">\n        <!-- Additional configuration -->\n    </container>\n\n</arquillian>\n```", "```java\n<container qualifier=\"jboss-managed\" default=\"true\">\n    <configuration>\n        <property name=\"jbossHome\">C:\\wildfly</property>\n    </configuration>\n</container>\n```", "```java\n<container qualifier=\"jboss-remote\" default=\"true\">\n    <configuration>\n        <property name=\"managementAddress\">localhost</property>\n        <property name=\"managementPort\">9999</property>\n    </configuration>\n</container>\n```", "```java\nmvn clean package â€“Parquillian-wildfly-managed\n\n```", "```java\n<activation>\n    <activeByDefault>true</activeByDefault>\n</activation>\n```", "```java\n@RunWith(ArquillianSputnik.class)\nclass TicketServiceTest extends Specification {\n\n    @Deployment\n    def static WebArchive createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class)\n               .addPackage(SeatType.class.getPackage())\n               .addPackage(TicketService.class.getPackage())\n               .addPackage(LoggerProducer.class.getPackage())\n               .addAsResource('META-INF/persistence.xml')\n               .addAsWebInfResource(EmptyAsset.INSTANCE, 'beans.xml');\n    }\n\n    @Inject\n    TicketService ticketService;\n\n    def \"should create SeatType\"() {\n        given:\n        def seatType = new SeatType(description: \"Balcony\", \n                                    price: 11, quantity: 6)\n\n        when:\n        ticketService.createSeatType(seatType);\n\n        then:\n        seatType.getId() != null\n    }\n}\n```", "```java\nMaven.resolver().resolve(\"G:A:V\").withTransitivity().asFile();\n```", "```java\nMaven.resolver().loadPomFromFile(\"/path/to/pom.xml\").\nresolve(\"G:A\").withTransitivity().asFile();\n```", "```java\nassertThat(frodo.getName()).isEqualTo(\"Frodo\");\n```", "```java\npublic class ArquillianWarUtils {\n\n    private static final String BEANS_XML = \"beans.xml\";\n    private static final String ASSERTJ_COORDINATE =\n                                  \"org.assertj:assertj-core\";\n\n    private static File[] ASSERTJ_ARTIFACT = Maven.resolver()\n     .loadPomFromFile(\"pom.xml\").resolve(ASSERTJ_COORDINATE)\n     .withTransitivity().asFile();\n\n    public static WebArchive getBasicWebArchive() {\n        return ShrinkWrap.create(WebArchive.class)\n            .addAsLibraries(ASSERTJ_ARTIFACT)\n            .addAsWebInfResource(EmptyAsset.INSTANCE, BEANS_XML);\n    }\n}\n```", "```java\n    @Deployment\n    public static WebArchive createDeployment() {\n        return ArquillianWarUtils.getBasicWebArchive()\n                    .addPackage(SomePackage.class.getPackage();\n    }\n```", "```java\nMaven.resolver().loadPomFromFile(\"pom.xml\")\n               .importRuntimeDependencies().resolve()\n               .withTransitivity().asFile();\n```", "```java\nShrinkWrap\n    .create(ZipImporter.class)\n    .importFrom(new File(\"/target/myPackage.war\"))\n    .as(WebArchive.class);\n```", "```java\nShrinkWrap.create(MavenImporter.class)\n    .loadPomFromFile(\"/path/to/pom.xml\")\n    .importBuildOutput()\n    .as(WebArchive.class);\n```", "```java\npublic class ArquillianWarUtils {\n\n    // already presented code\n\n    public static WebArchive getBasicWebArchive() { . . . }\n\n    public static WebArchive importBuildOutput() {\n        return ShrinkWrap.create(MavenImporter.class)\n                  .loadPomFromFile(\"pom.xml\")\n                  .importBuildOutput()\n                  .as(WebArchive.class);\n    }\n}\n```", "```java\nShrinkWrap.create(EmbeddedGradleImporter.class)\n    .forProjectDirectory(\"/path/to/dir\")\n    .importBuildOutput()\n    .as(WebArchive.class);\n```", "```java\n<dependencyManagement>\n     <!-- shrinkwrap resolvers import must be before arquillian bom! -->\n    <dependency>\n        <groupId>org.jboss.shrinkwrap.resolver</groupId>\n        <artifactId>shrinkwrap-resolver-bom</artifactId>\n        <version>${version.shrinkwrap-resolver}</version>\n        <scope>import</scope>\n        <type>pom</type>\n    </dependency>\n    <dependency>\n        <groupId>org.jboss.shrinkwrap</groupId>\n        <artifactId>shrinkwrap-bom</artifactId>\n        <version>${version.shrinkwrap}</version>\n        <scope>import</scope>\n        <type>pom</type>\n    </dependency>\n</dependencyManagement>\n```", "```java\n<persistence>\n   <persistence-unit name=\"myapp\">\n      <provider>org.hibernate.ejb.HibernatePersistence</provider>\n      <jta-data-source>java:/DefaultDS</jta-data-source>\n      <properties>\n         <property name=\"hibernate.dialect\" \n                  value=\"org.hibernate.dialect.HSQLDialect\"/>\n         <property name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\"/>\n      </properties>\n   </persistence-unit>\n</persistence>\n```", "```java\nfinal PersistenceDescriptor persistence = Descriptors\n  .create(PersistenceDescriptor.class)\n            .createPersistenceUnit()\n               .name(\"myapp\")\n               .provider(\"org.hibernate.ejb.HibernatePersistence\")\n               .jtaDataSource(\"java:/DefaultDS\")\n               .getOrCreateProperties()\n                  .createProperty().name(\"hibernate.dialect\")\n                     .value(\"org.hibernate.dialect.HSQLDialect\").up()\n                  .createProperty().name(\"hibernate.hbm2ddl.auto\")\n                     .value(\"create-drop\").up()\n               .up().up()\n```", "```java\n@Test\n@UsingDataSet(\"datasets/seats.yml\")\n@ShouldMatchDataSet(\"datasets/expected-seats.yml\")\npublic void shouldMakeACleanup() throws Exception {\n    // given\n    // from annotation\n\n    // when\n    ticketService.doCleanUp();\n\n    // then\n    // from annotation\n}\n```", "```java\nSeat_Type:\n  - description: test\n    position: \"box\"\n    price: 10\n    quantity: 10\n```", "```java\nSeat_Type:\n```", "```java\n<dependency>\n    <groupId>org.jboss.arquillian.extension</groupId>\n    <artifactId>arquillian-persistence-dbunit</artifactId>\n    <version>1.0.0.Alpha7</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(Arquillian.class)\n@WarpTest\n@RunAsClient\npublic class BasicWarpTest {\n\n    @Deployment(testable = true)\n    public static WebArchive createDeployment() {\n       ...\n    }\n\n    @Test\n    public void test() {\n        // Warp test\n    }\n}\n```", "```java\nWarp\n    .initiate(Activity)\n    .inspect(Inspection);\n```", "```java\nWarp\n    .initiate(Activity)\n    .observer(Observer)\n    .inspect(Inspection);\n```", "```java\n<dependency>\n    <groupId>org.jboss.arquillian.extension</groupId>\n    <artifactId>arquillian-warp</artifactId>\n    <version>1.0.0.Alpha7</version>\n    <type>pom</type>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>org.jboss.arquillian.extension</groupId>\n    <artifactId>arquillian-rest-warp-impl-jaxrs-2.0</artifactId>\n    <version>1.0.0.Alpha2</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>org.jboss.resteasy</groupId>\n    <artifactId>resteasy-client</artifactId>\n    <version>3.0.9.Final</version>\n    <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(Arquillian.class)\n@WarpTest\n@RunAsClient\npublic class SeatsResourceTest {\n\n    @Deployment(testable = true)\n    public static WebArchive deployment() {\n        return ShrinkWrap.create(MavenImporter.class)\n                         .loadPomFromFile(\"pom.xml\")\n                         .importBuildOutput()\n                         .as(WebArchive.class);\n    }\n\n    @ArquillianResource\n private URL contextPath;            // [1]\n\n    private ResteasyWebTarget target;\n\n    @Before\n    public void setUp() {\n        final ResteasyClient client = \n                   new ResteasyClientBuilder().build();\n        this.target = client.target(contextPath + \"rest/seat\");\n    }\n\n    @Test\n    public void testasd() {\n        Warp.initiate(new Activity() {\n            @Override\n            public void perform() {\n                final String response = target\n                 .request(MediaType.APPLICATION_JSON_TYPE)\n .get(String.class);  // [2]\n assertNotNull(response);              // [3]\n            }\n        }).inspect(new Inspection() {\n\n            private static final long serialVersionUID = 1L;\n\n            @ArquillianResource\n            private RestContext restContext;\n\n            @AfterServlet\n            public void testGetSeats() {\n                assertEquals(200, restContext.getHttpResponse().getStatusCode());\n                assertEquals(MediaType.APPLICATION_JSON, restContext.getHttpResponse().getContentType());\n assertNotNull(restContext.getHttpResponse().getEntity());  // [4]\n            }\n        });\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.glassfish.tyrus.bundles</groupId>\n    <artifactId>tyrus-standalone-client</artifactId>\n    <scope>test</scope>\n    <version>1.8.3</version>\n</dependency>\n```", "```java\n@RunAsClient\n@RunWith(Arquillian.class)\npublic class TicketServiceTest {\n\n    private static final String WEBSOCKET_URL = \"ws://localhost:8080/ticket-agency-test-websockets/tickets\";\n    private static final String SEAT_RESOURCE_URL = \"http://localhost:8080/ticket-agency-test-websockets/rest/seat\";\n\n    @Deployment\n public static Archive<?> createTestArchive() { // [1]\n        return ShrinkWrap.create(MavenImporter.class).loadPomFromFile(\"pom.xml\").importBuildOutput()\n            .as(WebArchive.class);\n    }\n\n    @Test\n    public void shouldReceiveMessageOnBooking() throws Exception {\n        // given\n        final int seatNumber = 4;\n final Deque<JsonObject> messages = new ConcurrentLinkedDeque<>(); // [2]\n final CountDownLatch messageLatch =new CountDownLatch(1); // [3]\n final MessageHandler.Whole<String> handler = // [4]\n          new MessageHandler.Whole<String>() {\n            @Override\n public void onMessage(String message) {\n                messages.add(Json\n                 .createReader(new StringReader(message))\n                 .readObject());\n                messageLatch.countDown();\n            }\n        };\n\n ContainerProvider.getWebSocketContainer()  // [5]\n                         .connectToServer(new Endpoint() {\n            @Override\n public void onOpen(Session session, \n EndpointConfig endpointConfig) {\n                session.addMessageHandler(handler);\n            }\n        }, new URI(WEBSOCKET_URL));\n\n        // when\n RestAssured.when()\n .post(SEAT_RESOURCE_URL + \"/\" + seatNumber)\n .then().statusCode(200); // [6]\n messageLatch.await(10, TimeUnit.SECONDS); // [7]\n\n // then [8]\n        assertThat(messages.size(), equalTo(1));\n        final JsonObject message = messages.poll();\n        assertThat(message.getInt(\"id\"), equalTo(seatNumber));\n    }\n}\n```", "```java\n@Inject BoundConversationContext conversationContext;\n\n@Before\npublic void init() {\n      conversationContext.associate(\n      new MutableBoundRequest(new HashMap<String, Object>(),\n                              new HashMap<String, Object>()));\n      conversationContext.activate();\n}\n```", "```java\n@RunWith(Arquillian.class)\npublic class TicketTest {\n\n    @Inject BoundConversationContext conversationContext;\n\n    @Before\n    public void init() {\n        conversationContext.associate(\n        new MutableBoundRequest(new HashMap<String, Object>(),\n            new HashMap<String, Object>()));\n        conversationContext.activate();\n    }\n\n    @Deployment\n    public static Archive<?> createTestArchive() {\n        return ShrinkWrap.create(WebArchive.class, \"ticket.war\")\n           .addPackage(SeatProducer.class.getPackage())\n           .addPackage(Seat.class.getPackage())\n           .addPackage(TicketService.class.getPackage())\n           .addPackage(DataManager.class.getPackage())\n           .addAsResource(\"META-INF/persistence.xml\")\n           .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n    }\n\n    @Inject\n    TicketService ticketService;\n\n    @Inject\n    BookerService bookerService;\n\n    @Inject\n    Logger log;\n\n    @Test\n    public void testTicketAgency () throws Exception {\n\n        SeatType seatType = new SeatType();\n        seatType.setDescription(\"Balcony\");\n        seatType.setPrice(20);\n        seatType.setQuantity(5);\n\n        ticketService.createSeatType(seatType);\n        log.info(\"Created Seat Type\");\n        assertNotNull(seatType.getId());\n\n        List<SeatType> listSeats = new ArrayList();\n        listSeats.add(seatType);\n        ticketService.createTheatre(listSeats);\n\n        log.info(\"Created Theatre\");\n        log.info(seatType.getDescription() + \" was persisted with id \" + seatType.getId());\n\n        bookerService.bookSeat(new Long(seatType.getId()), seatType.getPrice());\n        log.info(\"Created Theatre\");\n        log.info(\"Money left: \" +bookerService.getMoney());\n        assertTrue(bookerService.getMoney() <100); \n    }\n}\n```", "```java\nexport FORGE_HOME=~/forge/\nexport PATH=$PATH:$FORGE_HOME/bin\n```", "```java\nforge.bat\n```", "```java\n[bin]$\nalias                                   echo\nunalias                                 edit\nexport                                  exit\nabout                                   git-clone\naddon-build-and-install                 grep\naddon-install                           less\naddon-install-from-git                  ls\naddon-list                              man\naddon-remove                            mkdir\narchetype-add                           more\narchetype-list                          open\narchetype-remove                        pl-cmil-forge-ecore-ui\ncat                                     project-new\ncd                                      pwd\nclear                                   rm\ncommand-list                            run\nconfig-clear                            system-property-get\nconfig-list                             system-property-set\nconfig-set                              touch\nconnection-create-profile               track-changes\nconnection-remove-profile               transaction-start\ncp                                      version\ndate                                    wait\n\n```", "```java\nCREATE TABLE users (\n  id serial PRIMARY KEY,\n  name varchar(50),\n  surname varchar(50),\n  email varchar(50)\n);\n```", "```java\n[bin]$ project-new --named forge-demo --topLevelPackage com.packtpub.wflydevelopment.appendix â€“projectFolder forge-demo\n```", "```java\n[forge-demo]$ project-set-compiler-version --sourceVersion 1.8 --targetVersion 1.8\n[forge-demo]$ javaee-setup --javaEEVersion 7\n***SUCCESS*** JavaEE 7 has been installed.\n\n```", "```java\n[forge-demo]$ jpa-setup --jpaVersion 2.1 --provider HIBERNATE --container WILDFLY --dbType POSTGRES  --dataSourceName java:jboss/datasources/PostgreSqlDS\n\n```", "```java\n[persistence.xml]$ cat .\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<persistence  xmlns:xsi=\"http://w\nww.w3.org/2001/XMLSchema-instance\" version=\"2.1\" xsi:schemaLocation=\"http://xmln\ns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence\n_2_1.xsd\">\n <persistence-unit name=\"forge-demo-persistence-unit\" transaction-type=\"JTA\">\n <description>Forge Persistence Unit</description>\n <provider>org.hibernate.ejb.HibernatePersistence</provider>\n <jta-data-source>java:jboss/datasources/PostgreSqlDS</jta-data-source>\n <exclude-unlisted-classes>false</exclude-unlisted-classes>\n <properties>\n <property name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\"/>\n <property name=\"hibernate.show_sql\" value=\"true\"/>\n <property name=\"hibernate.format_sql\" value=\"true\"/>\n <property name=\"hibernate.transaction.flush_before_completion\" value=\"true\n\"/>\n <property name=\"hibernate.dialect\" value=\"org.hibernate.dialect.PostgreSQL\nDialect\"/>\n </properties>\n </persistence-unit>\n</persistence>\n\n```", "```java\n[persistence.xml]$ jpa-generate-entities-from-tables  \\\n--jdbcUrl jdbc:postgresql://localhost:5432/forge \\\n--hibernateDialect org.hibernate.dialect.PostgreSQLDialect \\\n--userName jboss \\\n--userPassword jboss \\\n--driverLocation c:\\\\forge\\\\postgresql-9.3-1101.jdbc41.jar \\\n--driverClass org.postgresql.Driver \\\n--databaseTables users \n\n```", "```java\nforge --install org.jboss.forge.addon:angularjs\n\n```", "```java\n[forge-demo]$ scaffold-setup --provider AngularJS\n\n```", "```java\n[forge-demo]$ scaffold-generate --provider AngularJS --targets com.packtpub.wflydevelopment.appendix.model.Users\n\n```", "```java\n[forge-demo]$ rest-generate-endpoints-from-entities --targets com.packtpub.wflydevelopment.appendix.model.Users\n\n```", "```java\n<dependency>\n    <groupId>javax</groupId>\n    <artifactId>javaee-api</artifactId>\n    <version>7.0</version>\n    <scope>provided</scope>\n</dependency>\n```", "```java\n   @Id\n   @Column(name = \"id\", unique = true, nullable = false)\n   @GeneratedValue(strategy=GenerationType.IDENTITY)\n   public int getId() {\n      return this.id;\n   }\n```", "```java\n[forge-demo]$ build\n***SUCCESS*** Build Success \n```"]