- en: Chapter 2. Getting Started with Spring Batch Jobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 使用 Spring Batch 作业入门
- en: In the previous chapter, we learned about batch applications, the offerings
    and architecture of Spring Batch, and how to build a Spring Batch application
    to run a batch job. It is important to understand the details of a framework and
    its components to be able to effectively configure them for business needs. XML-
    and annotation-based configurations have made programming more efficient and flexible
    with Spring Batch.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了批量应用程序、Spring Batch 的提供和架构，以及如何构建 Spring Batch 应用程序以运行批量作业。理解框架及其组件的细节对于能够有效地为业务需求配置它们非常重要。基于
    XML 和注解的配置使 Spring Batch 的编程更加高效和灵活。
- en: Some applications expect the configuration to be flexible to the style of programming
    they follow. Different programs need the ability to trigger a batch job in different
    ways, including command line and schedulers, or a part of the program itself.
    It is also important to stop executing batch jobs elegantly if needed.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序期望配置能够灵活适应它们遵循的编程风格。不同的程序需要以不同的方式触发批量作业，包括命令行和调度程序，或者程序本身的一部分。如果需要，优雅地停止执行批量作业也很重要。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Spring Batch XML features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Batch XML 功能
- en: Configuring jobs, transactions, and repositories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置作业、事务和存储库
- en: EL and listeners
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EL 和监听器
- en: Executing jobs from command line and web applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行和 Web 应用程序执行作业
- en: Schedulers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度程序
- en: Spring Batch XML features
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Batch XML 功能
- en: Spring Batch XML configuration is the most important aspect of Spring Batch
    programming. Spring Batch has a unique XML terminology and namespace. Understanding
    these terminologies and using the right set of entities helps to build an efficient
    batch application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch XML 配置是 Spring Batch 编程最重要的方面。Spring Batch 有独特的 XML 术语和命名空间。理解这些术语并使用正确的实体集有助于构建高效的批量应用程序。
- en: Spring Batch XML namespace
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Batch XML 命名空间
- en: 'Spring Batch has dedicated XML namespace support to provide comfortable configurations.
    The Spring XML application context file needs to have the following declaration
    to activate the namespace:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 有专门的 XML 命名空间支持，以提供舒适的配置。Spring XML 应用程序上下文文件需要以下声明来激活命名空间：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The namespace configuration provides the prefix that can be used to configure
    the details in the context file. In the preceding example, we have `batch` as
    a prefix to configure a job. The prefixes are the identifiers specific to this
    document only. One can use any valid names as a prefix for the namespace configuration.
    If any namespace is configured without a prefix, it is considered as the default
    namespace, and one should configure the elements without a prefix to configure
    using the default prefix. In the previous chapter, we configured `batch` as the
    default prefix and, hence, we directly configured the job and the step.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间配置提供了可以在上下文文件中配置详细信息的前缀。在先前的示例中，我们使用 `batch` 作为配置作业的前缀。前缀是仅针对本文件的标识符。可以为命名空间配置使用任何有效的名称作为前缀。如果配置了任何没有前缀的命名空间，则被视为默认命名空间，并且应该配置没有前缀的元素以使用默认前缀。在上一章中，我们配置了
    `batch` 作为默认前缀，因此我们直接配置了作业和步骤。
- en: Spring Batch XML tags
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring Batch XML 标签
- en: 'Spring Batch XML configuration defines the flow of the batch job. Following
    are the important Spring Batch tags and their descriptions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch XML 配置定义了批量作业的流程。以下是一些重要的 Spring Batch 标签及其描述：
- en: '`job`: This defines a job composed of a set of steps and transitions between
    the steps. The job will be exposed in the enclosing bean factory as a component
    of type `Job` that can be launched using `JobLauncher`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`job`：这定义了一个由一系列步骤和步骤之间的转换组成的作业。该作业将在封装的 bean 工厂中作为类型为 `Job` 的组件公开，可以使用 `JobLauncher`
    启动。'
- en: '`step`: This defines a stage in job processing backed by a step.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`step`：这定义了一个由步骤支持的作业处理阶段。'
- en: '`tasklet`: This declares the implementation of the tasklet strategy (the strategy
    for processing in a step). It can be done by configuring a chunk or by configuring
    a reference to the `Tasklet` interface.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tasklet`：这声明了任务策略（步骤中的处理策略）的实现。可以通过配置一个块或通过配置对 `Tasklet` 接口的引用来实现。'
- en: '`chunk`: This declares that the owning step will perform chunk-oriented processing
    (reading data one at a time and creating groups to be written), delegate what
    defines a chunk, and configure the chunk-oriented components.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`job-repository`: This configures `JobRepository` (the repository responsible
    for persistence of batch metadata entities) using a relational data store. It
    is needed by other components such as the `job` and `step` implementations.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flow`: This defines a flow composed of a set of steps and transitions between
    steps.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring jobs, transactions, and repositories
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous section, we can configure Spring Batch jobs conveniently
    through XML configuration itself. **Job** is the primary element and the following
    figure shows the hierarchy of the components in the configuration:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring jobs, transactions, and repositories](img/3372OS_02_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
- en: 'Each job can contain multiple steps, each step contains tasklets, and each
    tasklet contains chunks. Each component has individual elements that are defined
    as subelements of the other. The following is the syntax for one such batch job:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Job configuration
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Job is the root element in batch application configuration. A job defines the
    batch job to be executed with the configurations of job repository, and properties
    such as restartable or not. The following are the attributes of the `job` element:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is a unique identifier for the `job` element.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`abstract`: This is used to configure if the job is abstract, that is, it is
    not meant to be instantiated by itself, but rather it is just serving as a parent
    for concrete child job definitions. By default it is `false`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`increment`: This is a reference to a `JobParametersIncrementer` bean definition.
    This will be used to provide a new set of parameters by altering the previous
    set of parameters to be eligible for a fresh run as the `next` instance.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`job-repository`: This is the bean name of the `JobRepository` that is to be
    used. This attribute is not mandatory, and it defaults to the `jobRepository`
    bean.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This is the name of the parent job from which a job should inherit.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restartable`: This defines whether the job should be retartable or not in
    the case of failure. Set this to `false` if the job should not be restarted. By
    default it is `true`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A validator of type `DefaultJobParametersValidator` can be configured as a
    part of the job configuration to validate simple and optional parameters. The
    following is a snippet of such a configuration:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For complex constraints, the `validator` interface can also be implemented.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Step configuration
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Step is the first subelement of a job. A job can contain multiple steps. The
    following are different approaches in which multiple steps can be configured:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '**Multithreaded step (single process):** Spring Batch allows you to execute
    chunks of work in parallel as a part of a single process. Each chunk processes
    a set of records when there is a large amount of data to process in threads.![Step
    configuration](img/3372OS_02_02.jpg)'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplest way to start parallel processing is by adding `taskExecutor` to
    your step configuration as an attribute of the tasklet.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Parallel step (single process)**: This is the mechanism of processing multiple
    steps in a single process.![Step configuration](img/3372OS_02_03.jpg)'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the snippet to configure parallel steps:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Remote chunking of step (multiprocess)**: This splits the step processing
    across multiple processes, communicating with each other through a middleware.
    A step of Spring Batch acts as the master and the listeners of corresponding middleware
    act as the slaves. While the master component runs as a single process, slaves
    are the multiple remote processes.![Step configuration](img/3372OS_02_04.jpg)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partitioning a step (single process or multiprocess)**: Partitioning is the
    process in which one step is configured to have sub steps. The super step is the
    master and the sub steps are the slaves. Slave steps have to complete the execution
    to consider the master step as completed.![Step configuration](img/3372OS_02_05.jpg)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the attributes of the step element:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the unique identifier for the `step` element'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next`: This is a shortcut to specify the next step to execute after the current
    step'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This is the name of the parent step from which a job should inherit'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-start-if-complete`: This is set to `true` to allow a step to be started
    even if it is already complete'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a sample step configuration:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tasklet configuration
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tasklet is the subelement of the step element that can be used to specify the
    step process that is repeatable and transactional as part of a step.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the attributes of the `tasklet` element:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '`ref`: This is the reference to a bean definition that implements the `Tasklet`
    interface.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-start-if-complete`: This is set to `true` to allow a step to be started
    even if it is already complete.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: This is the method specification for the tasklet execution.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-limit`: This is the maximum number of times a step may be started.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task-executor`: The task executor is responsible for the execution of the
    task.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`throttle-limit`: This is the maximum number of tasks that can be queued for
    concurrent processing to prevent thread pools from being overwhelmed. The default
    value is `4`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction-manager`: This is the bean name of the transaction manager that
    is to be used. Default is `transactionManager`, if not specified.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the sample job configuration with tasklet:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Chunk configuration
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chunk is the child element of tasklet that can be used to perform read-write
    processing. Chunk configuration involves more data beans compared to other element's
    configuration.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 块是tasklet的子元素，可用于执行读写处理。与其它元素的配置相比，块配置涉及更多的数据Bean。
- en: 'The following are the attributes of the chunk element:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为块元素的属性：
- en: '`reader`: This is the bean name of the item reader that is to be used for the
    process and implements the `ItemReader` interface.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reader`：这是用于过程并实现`ItemReader`接口的项目读取器的Bean名称。'
- en: '`processor`: This is the bean name of the item processor that is to be used
    for the process and implements the `ItemProcessor` interface.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`processor`：这是用于过程并实现`ItemProcessor`接口的项目处理器的Bean名称。'
- en: '`writer`: This is the bean name of the item writer that is to be used for the
    process and implements the `ItemWriter` interface.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`writer`：这是用于过程并实现`ItemWriter`接口的项目写入器的Bean名称。'
- en: '`cache-capacity`: This is the capacity of the cache in the retry policy.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cache-capacity`：这是重试策略中缓存的容量。'
- en: '`chunk-completion-policy`: A transaction will be committed when this policy
    decides to complete. Defaults to `SimpleCompletionPolicy` with the chunk size
    equal to the `commit-interval` attribute.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chunk-completion-policy`：当此策略决定完成时，将提交事务。默认为`SimpleCompletionPolicy`，块大小等于`commit-interval`属性。'
- en: '`commit-interval`: The number of items that will be processed before `commit`
    is called for the transaction. Set either this or the `chunk-completion-policy`
    attribute, but not both.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`commit-interval`：在调用`commit`进行事务提交之前将要处理的项目数量。设置此属性或`chunk-completion-policy`属性，但不能同时设置两者。'
- en: '`processor-transactional`: This determines whether the processor is transaction
    aware or not.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`processor-transactional`：这决定了处理器是否具有事务感知性。'
- en: '`reader-transactional-queue`: This determines whether the reader is a transactional
    queue.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reader-transactional-queue`：这决定了读取器是否是事务队列。'
- en: '`retry-limit`: This is the maximum number of times the processing of an item
    will be retried.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retry-limit`：这是处理项目重试的最大次数。'
- en: '`retry-policy`: This is the bean specification of the retry policy. If specified,
    then the `retry-limit` and `retryable` exceptions are ignored.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`retry-policy`：这是重试策略的Bean规范。如果指定，则忽略`retry-limit`和`retryable`异常。'
- en: '`skip-limit`: This is the maximum number of items that will be allowed to be
    skipped.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip-limit`：这是允许跳过的最大项目数量。'
- en: '`skip-policy`: This is the bean specification of skip policy. If specified,
    then the `skip-limit` and `skippable` exceptions are ignored.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`skip-policy`：这是跳过策略的Bean规范。如果指定，则忽略`skip-limit`和`skippable`异常。'
- en: 'The following is the sample job configuration with the tasklet chunk:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个带有tasklet块的示例作业配置：
- en: '[PRE7]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The chunk configuration can have the exception skip and retry elements added
    as its child components. The `skippable-exception-classes` and `retryable-exception-classes`
    elements for the skip and retry configurations. The bean configuration can as
    well be annotated to keep the Spring Batch configuration simpler.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 块配置可以添加异常跳过和重试元素作为其子组件。跳过和重试配置的`skippable-exception-classes`和`retryable-exception-classes`元素。Bean配置也可以注解以简化Spring
    Batch配置。
- en: Transaction configuration
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 事务配置
- en: Transaction configuration is one of the key aspects of Spring Batch. The Spring
    transaction manager is the configuration for transactions. Spring provides diverse
    transaction managers for diverse specifications; for JDBC it is `DataSourceTransactionManager`
    and for JPA it is `JpaTransactionManager`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 事务配置是Spring Batch的关键方面之一。Spring事务管理器是事务的配置。Spring为不同的规范提供不同的事务管理器；对于JDBC是`DataSourceTransactionManager`，对于JPA是`JpaTransactionManager`。
- en: Spring Batch lets us configure the `transaction-attributes` element as a child
    element of the chunk, to set the isolation and propagation levels of the transaction.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch允许我们将`transaction-attributes`元素配置为块子元素，以设置事务的隔离和传播级别。
- en: The exceptions for which the rollback operation need not be performed can be
    chosen. These exceptions can be configured using the `include` element as a child
    of the `no-rollback-exception-classes` element, which is a child element of the
    tasklet.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以选择不需要执行回滚操作异常。这些异常可以通过将`include`元素作为`no-rollback-exception-classes`元素的子元素进行配置，而`no-rollback-exception-classes`元素是tasklet的子元素。
- en: 'The following is a sample job configuration with the transaction manager:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个带有事务管理器的示例作业配置：
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Job repository configuration
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务存储库配置
- en: 'The job repository maintains the information related to the job execution.
    It also maintains the state of the batch job. Job repositories are available in
    two types from Spring Batch: in-memory repository and persistent repository.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作业存储库维护与作业执行相关的信息。它还维护批处理作业的状态。Spring Batch提供了两种类型的作业存储库：内存存储库和持久存储库。
- en: '**In-memory repository** lets the job run again for the same job configuration
    and parameters multiple times. In-memory repository is volatile and so, it does
    not allow restart between JVM instances. It also cannot guarantee that any two
    job instances with the same parameters will be launched concurrently, hence, it
    is not suitable in a multithreaded job or in a locally partitioned step. It can
    be configured using `MapJobRepositoryFactoryBean`.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存存储库**允许作业针对相同的作业配置和参数多次运行。内存存储库是易变的，因此不允许在JVM实例之间重启。它也不能保证具有相同参数的两个作业实例将并发启动，因此不适合多线程作业或本地分区步骤。它可以使用`MapJobRepositoryFactoryBean`进行配置。'
- en: It requires the transaction manager for rollback semantics within the repository
    and to handle the business logic defined in the transactional database.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要事务管理器在存储库中进行回滚语义处理，并处理在事务数据库中定义的业务逻辑。
- en: 'The following is a sample in-memory repository configuration:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例内存存储库配置：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Persistent** **repository** can be configured using the `job-repository`
    element to perform persistent database operations on a database. The datasource
    can be configured using any API, for example, we have used Apache commons `BasicDataSource`
    in the following configurations.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**持久** **存储库**可以使用`job-repository`元素进行配置，以在数据库上执行持久数据库操作。数据源可以使用任何API进行配置，例如，我们在以下配置中使用了Apache
    Commons `BasicDataSource`。'
- en: 'The following is a sample persistent repository configuration:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例持久存储库配置：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: EL and listeners
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EL和监听器
- en: 'Spring Batch provides an interesting feature starting from version 3: **Expression
    Language** (**EL**). **Spring Expression Language** (**SpEL**) lets us make XML
    configuration dynamic by capturing the values at runtime from execution context.
    SpEL can resolve the expressions from both properties and beans. This runtime
    capturing behavior lets the job access late binding configurations as well.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 从版本3开始，Spring Batch提供了一项有趣的功能：**表达式语言**（**EL**）。**Spring表达式语言**（**SpEL**）允许我们在运行时从执行上下文中捕获值，从而使XML配置动态化。SpEL可以从属性和bean中解析表达式。这种运行时捕获行为允许作业访问延迟绑定的配置。
- en: 'The following is a sample SpEL configuration:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例SpEL配置：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Listeners
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监听器
- en: Spring Batch can be configured to have a set of additional events identified
    with the help of listeners. Listeners can be used in different combinations to
    identify the events at different levels. The following are the various listener
    types provided by Spring Batch for batch processing.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch可以通过监听器识别一组附加事件。监听器可以组合使用，以识别不同级别的事件。以下是由Spring Batch为批处理提供的各种监听器类型。
- en: 'Job listeners: They identify the job level events'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作业监听器：它们识别作业级别的事件
- en: 'Step listeners: They identify the step level events'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 步骤监听器：它们识别步骤级别的事件
- en: 'Item listeners: They identify the item repetition and retry events'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目监听器：它们识别项目重复和重试事件
- en: Job listeners
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作业监听器
- en: 'Job listeners identify the events occurring at the job level. Job listeners
    can be configured by the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作业监听器识别作业级别发生的事件。可以通过以下方式配置作业监听器：
- en: '**Implementing JobExecutionListener**: The following is the sample listener
    configuration using `JobExecutionListener` implementation:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现JobExecutionListener**: 以下是一个使用`JobExecutionListener`实现的示例监听器配置：'
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The XML configuration for the preceding defined listener is as follows:'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是对先前定义的监听器的XML配置：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Using annotations**: The following is the sample listener configuration using
    annotations:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用注解**: 以下是一个使用注解的示例监听器配置：'
- en: '[PRE14]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The way to configure the annotated listener is same as the `JobExecutionListener`
    configuration.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 配置注解监听器的方式与`JobExecutionListener`配置相同。
- en: Step listeners
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 步骤监听器
- en: Just like job listeners capture the execution status of jobs, steps have certain
    listeners to capture different events. The way of implementing this set of listeners
    is the same as the job listeners (by implementing the corresponding interface
    or by using annotations), except that the listener element has to be configured
    as the child element of the `step` element.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of step listeners with the methods to override:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '`StepExecutionListener`: This identifies the before and after of step execution
    events using the `beforeStep` and `afterStep` methods respectively'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChunkListener`: This identifies the before and after of chunk execution events
    using the `beforeChunk` and `afterChunk` methods respectively'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemReadListener`: This identifies if the before and after item is read and
    when an exception occurs, it reads an item event using the `beforeRead`, `afterRead`,
    and `onReadError` methods respectively'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemProcessListener`: This identifies the state before and after `ItemProcessor`
    gets an item and when an exception is thrown by the processor using the `beforeProcess`,
    `afterProcess`, and `onProcessError` methods respectively'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemWriteListener`: This identifies the before and after of when an item is
    written and when an exception occurs, writing an item event using the `beforeWrite`,
    `afterWrite`, and `onWriteError` methods respectively'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SkipListener`: This identifies the skip event of reading, processing, or writing
    an item using the `onSkipInRead`, `onSkipInProcess`, and `onSkipInWrite` methods
    respectively'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Item listeners
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Item listeners identify the retry and repeat events. These listeners can be
    configured in the same way as job or step listeners.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the item listeners with the methods to override:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '`RepeatListener`: This identifies the before and after of each repeat event
    using the `before` and `after` methods respectively. It identifies the first and
    last repeat event using the `open` and `close` methods respectively. It also identifies
    every failure event using the `onError` method.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RetryListener`: This identifies the first and last try event, irrespective
    of whether the retry is a success or a failure, using the `open` and `close` methods
    respectively. It also identifies the every failure event using the `onError` method.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing jobs from the command line and web applications
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first chapter, we learned how to configure and run a simple batch job
    application using Spring Batch, by launching the job from a Java program. The
    Java-based API of Spring Batch makes the job launching very convenient through
    different ways of invoking the batch job. In this section, let's examine the concepts
    of launching a batch job in different ways and stopping the batch job elegantly.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: JobLauncher
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Batch makes it easier to launch a batch job with the help of the `JobLauncher`.
    `JobLauncher` represents a simple interface to launch a job with a given set of
    job parameters. The run method of `JobLauncher` takes `Job` and `JobParameters`
    of type Spring beans as parameters and invokes the batch job execution.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code snippet we have used in the previous chapter to launch
    a job using `JobLauncher`:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can use `JobParametersBuilder` to build different types of `JobParameter`.
    A `JobLauncher` can be configured with a persistent job repository, using the
    following syntax:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![JobLauncher](img/3372OS_02_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
- en: Launching a job from the `run` method of `JobLauncher` calls `execute` on `job`
    and confirms the job execution status (`FINISHED` or `FAILED`) after execution,
    which is a synchronous process.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: However, in certain business scenarios, we want the `JobLauncher` to invoke
    and handover the process to another controller to make it asynchronous so that
    multiple processes can be triggered. `TaskExecutor` helps in this scenario, if
    configured along with `JobLauncher`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![JobLauncher](img/3372OS_02_07.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: 'The following is the syntax to configure `SimpleJobLauncher` with `taskExecutor`
    to make the process asynchronous:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Launching a job from a command line
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `CommandLineJobRunner` makes it simple to launch a Spring Batch job from
    a command line. The following are the steps in which `CommandLineJobRunner` works:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Loading the appropriate `ApplicationContext`
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing command-line arguments into `JobParameters`
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating the appropriate job based on arguments
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `JobLauncher` provided in the application context to launch the job
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the command to launch a job using `CommandLineJobRunner`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The exit code of the job execution represents the status of the batch job after
    run, where `0` represents `COMPLETED`, `1` represents `FAILED`, and `2` represents
    an error from the command-line job runner, such as not being able to find a job
    in the provided context.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Launching a job from within a web application
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have learned how to launch a batch job from a Java program and command
    line. There are scenarios when a job needs to be launched from within a web application.
    Applications that generate reports from within an application and trigger asynchronous
    processes from the applications with thread-based configuration are such business
    scenarios.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the program to launch the job using Spring MVC framework with
    Spring dependency:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The controller launches the jobs using `JobController` that is auto-wired in
    the `JobLauncherController` through configurations. The controller can be called
    from a request URL with `RequestMapping` configured with the `handle` method.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Stopping batch jobs gracefully
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jobs can be gracefully stopped when necessary from within a program with the
    help of the `JobOperator` interface. `JobOperator` provides the CRUD operations
    of the job.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax to stop a job using `JobOperator`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的语法是使用`JobOperator`停止作业的语法：
- en: '[PRE20]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`JobOperator` identifies the running job with the given `jobName` and calls
    the `stop` method by attaining the job `id` from executions.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobOperator`使用给定的`jobName`识别正在运行的作业，并通过从执行中获取作业`id`来调用`stop`方法。'
- en: The `JobOperator` needs to be configured to be available for the program. The
    following is the sample configuration of the `jobOperator` with the resources,
    job explorer (the entry point to browse executions of running, or historical jobs
    and steps), registry, and repository properties.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobOperator`需要配置为程序可用。以下是对`jobOperator`的示例配置，包括资源、作业探索器（浏览正在运行或历史作业和步骤的入口点）、注册表和存储库属性。'
- en: '[PRE21]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The job configuration supports the stop setup at tasklet and the chunk-oriented
    step level as well.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 作业配置支持在任务和以块为导向的步骤级别进行停止设置。
- en: Schedulers
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调度器
- en: Schedulers are the programs that can periodically launch other programs. As
    mentioned earlier, Spring Batch is not a scheduling framework. Spring Batch can
    work in conjunction with a scheduler (such as Quartz/Control-M), but cannot replace
    a scheduler.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 调度器是可以定期启动其他程序的程序。如前所述，Spring Batch不是一个调度框架。Spring Batch可以与调度器（如Quartz/Control-M）协同工作，但不能替代调度器。
- en: 'The following are popular schedulers:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些流行的调度器：
- en: '**Cron**: This is an expression-based job scheduler available on Unix-like
    systems to launch other programs'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Cron**: 这是一个基于表达式的作业调度器，可在类Unix系统中启动其他程序'
- en: '**Control-M**: This is a batch scheduling software available for distributed
    computing platforms including Unix, Windows, Linux, and OpenVMS environments'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Control-M**: 这是一个适用于分布式计算平台（包括Unix、Windows、Linux和OpenVMS环境）的批处理调度软件'
- en: '**Spring scheduler**: This scheduler from Spring supports XML, or annotation-based
    or cron expressions to launch a batch job'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring调度器**: 这个来自Spring的调度器支持XML、基于注解或cron表达式来启动批处理作业'
- en: '**Quartz**: Quartz is a richly featured, open source job scheduling library
    that can be integrated within virtually any Java application'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**石英（Quartz）**: 石英是一个功能丰富的开源作业调度库，可以集成到几乎任何Java应用程序中'
- en: While Cron and Control-M can use `CommandLineJobRunner` to launch a batch job,
    Quartz and Spring scheduler can launch the batch job from within the application
    programmatically. One can choose between these options based on the frequency
    of job execution and the way it is to be invoked.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`CommandLineJobRunner`可以用于Cron和Control-M启动批处理作业，但Quartz和Spring调度器可以从应用程序内部以编程方式启动批处理作业。可以根据作业执行的频率和调用方式选择这些选项之一。
- en: Summary
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned the configuration details of the Spring Batch jobs
    and their components to be able to effectively use them for business needs. We
    learned how to make the batch programming more efficient and flexible using XML-
    and annotation-based configurations. We also learned different ways of launching
    the batch job, such as from a command-line, a Java program, and within a web application,
    and also how to stop a batch job gracefully from within a program. We completed
    this chapter with an understanding of the different job schedulers available in
    the market and which launching solution can be used in combination with these
    schedulers.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了Spring Batch作业及其组件的配置细节，以便能够有效地满足业务需求。我们学习了如何通过基于XML和注解的配置使批处理编程更加高效和灵活。我们还学习了不同的启动批处理作业的方式，例如从命令行、Java程序以及Web应用程序中启动，以及如何在程序内部优雅地停止批处理作业。我们通过了解市场上可用的不同作业调度器和哪些启动解决方案可以与这些调度器结合使用来完成本章。
- en: In the next chapter, we will learn in detail about reading, processing, and
    writing different forms of data using Spring Batch.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细了解使用Spring Batch读取、处理和写入不同形式的数据。
