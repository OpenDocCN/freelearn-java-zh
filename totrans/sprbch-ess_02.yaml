- en: Chapter 2. Getting Started with Spring Batch Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about batch applications, the offerings
    and architecture of Spring Batch, and how to build a Spring Batch application
    to run a batch job. It is important to understand the details of a framework and
    its components to be able to effectively configure them for business needs. XML-
    and annotation-based configurations have made programming more efficient and flexible
    with Spring Batch.
  prefs: []
  type: TYPE_NORMAL
- en: Some applications expect the configuration to be flexible to the style of programming
    they follow. Different programs need the ability to trigger a batch job in different
    ways, including command line and schedulers, or a part of the program itself.
    It is also important to stop executing batch jobs elegantly if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch XML features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring jobs, transactions, and repositories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EL and listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing jobs from command line and web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schedulers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch XML features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Batch XML configuration is the most important aspect of Spring Batch
    programming. Spring Batch has a unique XML terminology and namespace. Understanding
    these terminologies and using the right set of entities helps to build an efficient
    batch application.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch XML namespace
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spring Batch has dedicated XML namespace support to provide comfortable configurations.
    The Spring XML application context file needs to have the following declaration
    to activate the namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The namespace configuration provides the prefix that can be used to configure
    the details in the context file. In the preceding example, we have `batch` as
    a prefix to configure a job. The prefixes are the identifiers specific to this
    document only. One can use any valid names as a prefix for the namespace configuration.
    If any namespace is configured without a prefix, it is considered as the default
    namespace, and one should configure the elements without a prefix to configure
    using the default prefix. In the previous chapter, we configured `batch` as the
    default prefix and, hence, we directly configured the job and the step.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch XML tags
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Spring Batch XML configuration defines the flow of the batch job. Following
    are the important Spring Batch tags and their descriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`job`: This defines a job composed of a set of steps and transitions between
    the steps. The job will be exposed in the enclosing bean factory as a component
    of type `Job` that can be launched using `JobLauncher`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`step`: This defines a stage in job processing backed by a step.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tasklet`: This declares the implementation of the tasklet strategy (the strategy
    for processing in a step). It can be done by configuring a chunk or by configuring
    a reference to the `Tasklet` interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chunk`: This declares that the owning step will perform chunk-oriented processing
    (reading data one at a time and creating groups to be written), delegate what
    defines a chunk, and configure the chunk-oriented components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`job-repository`: This configures `JobRepository` (the repository responsible
    for persistence of batch metadata entities) using a relational data store. It
    is needed by other components such as the `job` and `step` implementations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flow`: This defines a flow composed of a set of steps and transitions between
    steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring jobs, transactions, and repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous section, we can configure Spring Batch jobs conveniently
    through XML configuration itself. **Job** is the primary element and the following
    figure shows the hierarchy of the components in the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring jobs, transactions, and repositories](img/3372OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Each job can contain multiple steps, each step contains tasklets, and each
    tasklet contains chunks. Each component has individual elements that are defined
    as subelements of the other. The following is the syntax for one such batch job:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Job configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Job is the root element in batch application configuration. A job defines the
    batch job to be executed with the configurations of job repository, and properties
    such as restartable or not. The following are the attributes of the `job` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is a unique identifier for the `job` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`abstract`: This is used to configure if the job is abstract, that is, it is
    not meant to be instantiated by itself, but rather it is just serving as a parent
    for concrete child job definitions. By default it is `false`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`increment`: This is a reference to a `JobParametersIncrementer` bean definition.
    This will be used to provide a new set of parameters by altering the previous
    set of parameters to be eligible for a fresh run as the `next` instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`job-repository`: This is the bean name of the `JobRepository` that is to be
    used. This attribute is not mandatory, and it defaults to the `jobRepository`
    bean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This is the name of the parent job from which a job should inherit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restartable`: This defines whether the job should be retartable or not in
    the case of failure. Set this to `false` if the job should not be restarted. By
    default it is `true`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A validator of type `DefaultJobParametersValidator` can be configured as a
    part of the job configuration to validate simple and optional parameters. The
    following is a snippet of such a configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: For complex constraints, the `validator` interface can also be implemented.
  prefs: []
  type: TYPE_NORMAL
- en: Step configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Step is the first subelement of a job. A job can contain multiple steps. The
    following are different approaches in which multiple steps can be configured:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Multithreaded step (single process):** Spring Batch allows you to execute
    chunks of work in parallel as a part of a single process. Each chunk processes
    a set of records when there is a large amount of data to process in threads.![Step
    configuration](img/3372OS_02_02.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The simplest way to start parallel processing is by adding `taskExecutor` to
    your step configuration as an attribute of the tasklet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Parallel step (single process)**: This is the mechanism of processing multiple
    steps in a single process.![Step configuration](img/3372OS_02_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the snippet to configure parallel steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Remote chunking of step (multiprocess)**: This splits the step processing
    across multiple processes, communicating with each other through a middleware.
    A step of Spring Batch acts as the master and the listeners of corresponding middleware
    act as the slaves. While the master component runs as a single process, slaves
    are the multiple remote processes.![Step configuration](img/3372OS_02_04.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Partitioning a step (single process or multiprocess)**: Partitioning is the
    process in which one step is configured to have sub steps. The super step is the
    master and the sub steps are the slaves. Slave steps have to complete the execution
    to consider the master step as completed.![Step configuration](img/3372OS_02_05.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following are the attributes of the step element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the unique identifier for the `step` element'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next`: This is a shortcut to specify the next step to execute after the current
    step'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent`: This is the name of the parent step from which a job should inherit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-start-if-complete`: This is set to `true` to allow a step to be started
    even if it is already complete'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a sample step configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Tasklet configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tasklet is the subelement of the step element that can be used to specify the
    step process that is repeatable and transactional as part of a step.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the attributes of the `tasklet` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ref`: This is the reference to a bean definition that implements the `Tasklet`
    interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`allow-start-if-complete`: This is set to `true` to allow a step to be started
    even if it is already complete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`method`: This is the method specification for the tasklet execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`start-limit`: This is the maximum number of times a step may be started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`task-executor`: The task executor is responsible for the execution of the
    task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`throttle-limit`: This is the maximum number of tasks that can be queued for
    concurrent processing to prevent thread pools from being overwhelmed. The default
    value is `4`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`transaction-manager`: This is the bean name of the transaction manager that
    is to be used. Default is `transactionManager`, if not specified.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the sample job configuration with tasklet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Chunk configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Chunk is the child element of tasklet that can be used to perform read-write
    processing. Chunk configuration involves more data beans compared to other element's
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the attributes of the chunk element:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reader`: This is the bean name of the item reader that is to be used for the
    process and implements the `ItemReader` interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`processor`: This is the bean name of the item processor that is to be used
    for the process and implements the `ItemProcessor` interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`writer`: This is the bean name of the item writer that is to be used for the
    process and implements the `ItemWriter` interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cache-capacity`: This is the capacity of the cache in the retry policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chunk-completion-policy`: A transaction will be committed when this policy
    decides to complete. Defaults to `SimpleCompletionPolicy` with the chunk size
    equal to the `commit-interval` attribute.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`commit-interval`: The number of items that will be processed before `commit`
    is called for the transaction. Set either this or the `chunk-completion-policy`
    attribute, but not both.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`processor-transactional`: This determines whether the processor is transaction
    aware or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reader-transactional-queue`: This determines whether the reader is a transactional
    queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retry-limit`: This is the maximum number of times the processing of an item
    will be retried.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`retry-policy`: This is the bean specification of the retry policy. If specified,
    then the `retry-limit` and `retryable` exceptions are ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip-limit`: This is the maximum number of items that will be allowed to be
    skipped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`skip-policy`: This is the bean specification of skip policy. If specified,
    then the `skip-limit` and `skippable` exceptions are ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the sample job configuration with the tasklet chunk:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The chunk configuration can have the exception skip and retry elements added
    as its child components. The `skippable-exception-classes` and `retryable-exception-classes`
    elements for the skip and retry configurations. The bean configuration can as
    well be annotated to keep the Spring Batch configuration simpler.
  prefs: []
  type: TYPE_NORMAL
- en: Transaction configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Transaction configuration is one of the key aspects of Spring Batch. The Spring
    transaction manager is the configuration for transactions. Spring provides diverse
    transaction managers for diverse specifications; for JDBC it is `DataSourceTransactionManager`
    and for JPA it is `JpaTransactionManager`.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch lets us configure the `transaction-attributes` element as a child
    element of the chunk, to set the isolation and propagation levels of the transaction.
  prefs: []
  type: TYPE_NORMAL
- en: The exceptions for which the rollback operation need not be performed can be
    chosen. These exceptions can be configured using the `include` element as a child
    of the `no-rollback-exception-classes` element, which is a child element of the
    tasklet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample job configuration with the transaction manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Job repository configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The job repository maintains the information related to the job execution.
    It also maintains the state of the batch job. Job repositories are available in
    two types from Spring Batch: in-memory repository and persistent repository.'
  prefs: []
  type: TYPE_NORMAL
- en: '**In-memory repository** lets the job run again for the same job configuration
    and parameters multiple times. In-memory repository is volatile and so, it does
    not allow restart between JVM instances. It also cannot guarantee that any two
    job instances with the same parameters will be launched concurrently, hence, it
    is not suitable in a multithreaded job or in a locally partitioned step. It can
    be configured using `MapJobRepositoryFactoryBean`.'
  prefs: []
  type: TYPE_NORMAL
- en: It requires the transaction manager for rollback semantics within the repository
    and to handle the business logic defined in the transactional database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample in-memory repository configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '**Persistent** **repository** can be configured using the `job-repository`
    element to perform persistent database operations on a database. The datasource
    can be configured using any API, for example, we have used Apache commons `BasicDataSource`
    in the following configurations.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample persistent repository configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: EL and listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Batch provides an interesting feature starting from version 3: **Expression
    Language** (**EL**). **Spring Expression Language** (**SpEL**) lets us make XML
    configuration dynamic by capturing the values at runtime from execution context.
    SpEL can resolve the expressions from both properties and beans. This runtime
    capturing behavior lets the job access late binding configurations as well.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a sample SpEL configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Listeners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Batch can be configured to have a set of additional events identified
    with the help of listeners. Listeners can be used in different combinations to
    identify the events at different levels. The following are the various listener
    types provided by Spring Batch for batch processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Job listeners: They identify the job level events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step listeners: They identify the step level events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Item listeners: They identify the item repetition and retry events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job listeners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Job listeners identify the events occurring at the job level. Job listeners
    can be configured by the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Implementing JobExecutionListener**: The following is the sample listener
    configuration using `JobExecutionListener` implementation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The XML configuration for the preceding defined listener is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Using annotations**: The following is the sample listener configuration using
    annotations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The way to configure the annotated listener is same as the `JobExecutionListener`
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Step listeners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just like job listeners capture the execution status of jobs, steps have certain
    listeners to capture different events. The way of implementing this set of listeners
    is the same as the job listeners (by implementing the corresponding interface
    or by using annotations), except that the listener element has to be configured
    as the child element of the `step` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a list of step listeners with the methods to override:'
  prefs: []
  type: TYPE_NORMAL
- en: '`StepExecutionListener`: This identifies the before and after of step execution
    events using the `beforeStep` and `afterStep` methods respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChunkListener`: This identifies the before and after of chunk execution events
    using the `beforeChunk` and `afterChunk` methods respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemReadListener`: This identifies if the before and after item is read and
    when an exception occurs, it reads an item event using the `beforeRead`, `afterRead`,
    and `onReadError` methods respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemProcessListener`: This identifies the state before and after `ItemProcessor`
    gets an item and when an exception is thrown by the processor using the `beforeProcess`,
    `afterProcess`, and `onProcessError` methods respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemWriteListener`: This identifies the before and after of when an item is
    written and when an exception occurs, writing an item event using the `beforeWrite`,
    `afterWrite`, and `onWriteError` methods respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SkipListener`: This identifies the skip event of reading, processing, or writing
    an item using the `onSkipInRead`, `onSkipInProcess`, and `onSkipInWrite` methods
    respectively'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Item listeners
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Item listeners identify the retry and repeat events. These listeners can be
    configured in the same way as job or step listeners.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the item listeners with the methods to override:'
  prefs: []
  type: TYPE_NORMAL
- en: '`RepeatListener`: This identifies the before and after of each repeat event
    using the `before` and `after` methods respectively. It identifies the first and
    last repeat event using the `open` and `close` methods respectively. It also identifies
    every failure event using the `onError` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RetryListener`: This identifies the first and last try event, irrespective
    of whether the retry is a success or a failure, using the `open` and `close` methods
    respectively. It also identifies the every failure event using the `onError` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing jobs from the command line and web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first chapter, we learned how to configure and run a simple batch job
    application using Spring Batch, by launching the job from a Java program. The
    Java-based API of Spring Batch makes the job launching very convenient through
    different ways of invoking the batch job. In this section, let's examine the concepts
    of launching a batch job in different ways and stopping the batch job elegantly.
  prefs: []
  type: TYPE_NORMAL
- en: JobLauncher
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Batch makes it easier to launch a batch job with the help of the `JobLauncher`.
    `JobLauncher` represents a simple interface to launch a job with a given set of
    job parameters. The run method of `JobLauncher` takes `Job` and `JobParameters`
    of type Spring beans as parameters and invokes the batch job execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the code snippet we have used in the previous chapter to launch
    a job using `JobLauncher`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use `JobParametersBuilder` to build different types of `JobParameter`.
    A `JobLauncher` can be configured with a persistent job repository, using the
    following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '![JobLauncher](img/3372OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launching a job from the `run` method of `JobLauncher` calls `execute` on `job`
    and confirms the job execution status (`FINISHED` or `FAILED`) after execution,
    which is a synchronous process.
  prefs: []
  type: TYPE_NORMAL
- en: However, in certain business scenarios, we want the `JobLauncher` to invoke
    and handover the process to another controller to make it asynchronous so that
    multiple processes can be triggered. `TaskExecutor` helps in this scenario, if
    configured along with `JobLauncher`.
  prefs: []
  type: TYPE_NORMAL
- en: '![JobLauncher](img/3372OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the syntax to configure `SimpleJobLauncher` with `taskExecutor`
    to make the process asynchronous:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Launching a job from a command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `CommandLineJobRunner` makes it simple to launch a Spring Batch job from
    a command line. The following are the steps in which `CommandLineJobRunner` works:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading the appropriate `ApplicationContext`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing command-line arguments into `JobParameters`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Locating the appropriate job based on arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `JobLauncher` provided in the application context to launch the job
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the command to launch a job using `CommandLineJobRunner`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The exit code of the job execution represents the status of the batch job after
    run, where `0` represents `COMPLETED`, `1` represents `FAILED`, and `2` represents
    an error from the command-line job runner, such as not being able to find a job
    in the provided context.
  prefs: []
  type: TYPE_NORMAL
- en: Launching a job from within a web application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have learned how to launch a batch job from a Java program and command
    line. There are scenarios when a job needs to be launched from within a web application.
    Applications that generate reports from within an application and trigger asynchronous
    processes from the applications with thread-based configuration are such business
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the program to launch the job using Spring MVC framework with
    Spring dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The controller launches the jobs using `JobController` that is auto-wired in
    the `JobLauncherController` through configurations. The controller can be called
    from a request URL with `RequestMapping` configured with the `handle` method.
  prefs: []
  type: TYPE_NORMAL
- en: Stopping batch jobs gracefully
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Jobs can be gracefully stopped when necessary from within a program with the
    help of the `JobOperator` interface. `JobOperator` provides the CRUD operations
    of the job.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the syntax to stop a job using `JobOperator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`JobOperator` identifies the running job with the given `jobName` and calls
    the `stop` method by attaining the job `id` from executions.'
  prefs: []
  type: TYPE_NORMAL
- en: The `JobOperator` needs to be configured to be available for the program. The
    following is the sample configuration of the `jobOperator` with the resources,
    job explorer (the entry point to browse executions of running, or historical jobs
    and steps), registry, and repository properties.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The job configuration supports the stop setup at tasklet and the chunk-oriented
    step level as well.
  prefs: []
  type: TYPE_NORMAL
- en: Schedulers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Schedulers are the programs that can periodically launch other programs. As
    mentioned earlier, Spring Batch is not a scheduling framework. Spring Batch can
    work in conjunction with a scheduler (such as Quartz/Control-M), but cannot replace
    a scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are popular schedulers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cron**: This is an expression-based job scheduler available on Unix-like
    systems to launch other programs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Control-M**: This is a batch scheduling software available for distributed
    computing platforms including Unix, Windows, Linux, and OpenVMS environments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Spring scheduler**: This scheduler from Spring supports XML, or annotation-based
    or cron expressions to launch a batch job'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quartz**: Quartz is a richly featured, open source job scheduling library
    that can be integrated within virtually any Java application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Cron and Control-M can use `CommandLineJobRunner` to launch a batch job,
    Quartz and Spring scheduler can launch the batch job from within the application
    programmatically. One can choose between these options based on the frequency
    of job execution and the way it is to be invoked.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned the configuration details of the Spring Batch jobs
    and their components to be able to effectively use them for business needs. We
    learned how to make the batch programming more efficient and flexible using XML-
    and annotation-based configurations. We also learned different ways of launching
    the batch job, such as from a command-line, a Java program, and within a web application,
    and also how to stop a batch job gracefully from within a program. We completed
    this chapter with an understanding of the different job schedulers available in
    the market and which launching solution can be used in combination with these
    schedulers.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn in detail about reading, processing, and
    writing different forms of data using Spring Batch.
  prefs: []
  type: TYPE_NORMAL
