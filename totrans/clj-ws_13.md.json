["```java\n{:deps {org.clojure/java.jdbc {:mvn/version \"0.7.9\"}}}\n(require '[clojure.java.jdbc :as jdbc])\n```", "```java\n(def db {:dbtype \"derby\" ;; the type of RDBMS\n         :dbname \"derby-local\" ;; the DB as it will be stored on disk\n         :create true       ;; essential on first interaction\n         })\n```", "```java\nuser=> (jdbc/get-connection db)\n```", "```java\n{:deps {org.apache.derby/derby {:mvn/version \"10.14.2.0\"}}\n```", "```java\n    {:deps\n     {org.apache.derby/derby {:mvn/version \"10.14.2.0\"}\n      org.clojure/java.jdbc {:mvn/version \"0.7.9\"}}}\n    ```", "```java\n    user=> (require '[clojure.java.jdbc :as jdbc])\n    nil\n    ```", "```java\n    user=> (def db {:dbtype \"derby\" \n                    :dbname \"derby-local\" \n                    :create true})\n    => #'user/db\n    ```", "```java\n    user=> (jdbc/get-connection db)\n    ```", "```java\n    {:deps\n     {hikari-cp {:mvn/version \"2.8.0\"}\n      org.apache.derby/derby {:mvn/version \"10.14.2.0\"}\n      org.clojure/java.jdbc {:mvn/version \"0.7.9\"}}}\n    ```", "```java\n    jdbc:derby:[subprotocol:][databaseName][;attribute=value]\n    ```", "```java\n    user=> (require '[clojure.java.jdbc :as jdbc]\n                    '[hikari-cp.core :as hikari])\n    nil\n    user=> (def db {:datasource (hikari/make-datasource {:jdbc-url \"jdbc:derby:derby-local;create=true\"})})\n    => #'user/db\n    ```", "```java\n    (def db {:datasource \n      (hikari/make-datasource {:database-name \"derby-local\" \n                               :datasource-class-name \"org.apache.derby.jdbc.EmbeddedDataSource\"})})\n    ```", "```java\n    (jdbc/get-connection db)\n    ```", "```java\n<foreign key field name> <foreign key type> REFERENCES <parent table>\n```", "```java\n    (def create-app-user-ddl \"CREATE TABLE app_user (\n    id INT GENERATED ALWAYS AS IDENTITY CONSTRAINT USER_ID_PK PRIMARY KEY,\n    first_name VARCHAR(32),\n    surname VARCHAR(32),\n    height SMALLINT,\n    weight SMALLINT)\")\n    => #'user/create-app-user-ddl\n    (def create-activity-ddl \"CREATE TABLE activity (\n      id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n      activity_type VARCHAR(32),\n      distance DECIMAL(5,2),\n      duration INT,\n      user_id INT REFERENCES app_user ON DELETE CASCADE)\")\n    #'user/create-activity-ddl\n    ```", "```java\n    (def create-app-user-ddl-2 (jdbc/create-table-ddl :app_user\n      [[:id :int \"GENERATED ALWAYS AS IDENTITY CONSTRAINT USER_ID_PK PRIMARY KEY\"]\n      [:first_name \"varchar(32)\"]\n      [:surname \"varchar(32)\"]\n      [:height :smallint]\n      [:weight :smallint]]\n      {:entities clojure.string/lower-case}))\n    ```", "```java\n    user=> (jdbc/db-do-commands db [create-app-user-ddl create-activity-ddl])\n    => (0 0)\n    ```", "```java\n(jdbc/insert! db-spec :example {:col1 42 :col2 \"123\"})\n```", "```java\n(jdbc/query   db-spec [\"SELECT * FROM example WHERE id = ?\" 13])\n```", "```java\n(jdbc/update! db-spec :example {:col1 77 :col2 \"456\"} [\"id = ?\" 13])\n```", "```java\n(jdbc/delete! db-spec :example [\"id = ?\" 13])\n```", "```java\nuser=> (jdbc/insert!\n         <db-spec>\n         table name keyword>\n         {<column_name> <column_value>\n          ..})\n({:1 1M})\n```", "```java\nuser=> (jdbc/insert! \n         <db-spec>\n         <table name keyword>\n         [<column name> ..] \n         [<column value> ..])\n(1)\n```", "```java\n({:generated_key 1})\n```", "```java\nuser=> (jdbc/insert! db :app_user {:first_name \"Andre\" :surname \"Agassi\" :height 180 :weight 80} {:keywordize? false})\n({\"1\" 1M})\n```", "```java\nuser=> (jdbc/insert-multi!\n  <db-spec>\n  <table name keyword>\n  [{<column name> <column value> ..}\n   {<column name> <column value> ..}])\n({:1 1M} {:1 2M})\n(jdbc/insert-multi!\n  <db-spec>\n  <table name keyword>\n  [<column name> ..] \n  [[<column value> ..] [<column value> ..]])\n=> (1 1)\n```", "```java\n    user=> (jdbc/insert!\n             db\n             :app_user\n             {:first_name \"Andre\"\n              :surname    \"Agassi\"\n              :height     180\n              :weight     80})\n    ({:1 1M})\n    user=> (jdbc/insert! \n             db\n             :app_user \n             [:first_name :surname :height :weight] \n             [\"Andre\" \"Agassi\" 180 80])\n    (1)\n    ```", "```java\n    user=> (jdbc/insert-multi!\n      db\n      :activity\n      [{:activity_type \"run\" :distance 8.67 :duration 2520 :user_id 1}\n       {:activity_type \"cycle\" :distance 17.68 :duration 2703 :user_id 1}])\n    ({:1 1M} {:1 2M})\n    ```", "```java\n    user=> (jdbc/query db [\"select * from app_user\"])\n    ({:id 1, :first_name \"Andre\", :surname \"Agassi\", :height 180, :weight 80})\n    user=> (jdbc/query db [\"select * from activity\"])\n    ({:id 1, :activity_type \"run\", :distance 8.67M, :duration 2520, :user_id 1} \n     {:id 2, :activity_type \"cycle\", :distance 17.68M, :duration 2703, :user_id 1})\n    ```", "```java\n    {:keywordize? false :identifiers str/upper-case}\n    user=> (require '[clojure.string :as str])\n    => nil\n    user=> (jdbc/query db [\"select * from app_user\"] {:keywordize? false :identifiers str/upper-case})\n    ({\"ID\" 1, \"FIRST_NAME\" \"Andre\", \"SURNAME\" \"Agassi\", \"HEIGHT\" 180, \"WEIGHT\" 80})\n    ```", "```java\n    :<qualifier>/<column name>\n    user=> (jdbc/query db [\"select * from app_user\"] {:identifiers str/upper-case :qualifier \"app_user\"})\n    (#:app_user{:ID 1, :FIRST_NAME \"Andre\", :SURNAME \"Agassi\", :HEIGHT 180, :WEIGHT 80})\n    ```", "```java\n    user=> (-> (jdbc/query db [\"select * from app_user\"] {:identifiers str/upper-case :qualifier \"app_user\"})\n        first\n        keys)\n    => (:app_user/ID :app_user/FIRST_NAME :app_user/SURNAME :app_user/HEIGHT :app_user/WEIGHT)\n    ```", "```java\n    {:as-arrays? true}\n    ```", "```java\n    user=> (jdbc/query db [\"select * from activity\"] {:as-arrays? true})\n    [[:id :activity_type :distance :duration :user_id] \n     [1 \"run\" 8.67M 2520 1] \n     [2 \"cycle\" 17.68M 2703 1]]\n    ```", "```java\n(defn custom-row-fn [row]\n)\n(defn custom-result-set-fn [result-set]\n)\n```", "```java\n    (defn add-user-friendly-duration\n      [{:keys [duration] :as row}]\n      (let [quot-rem (juxt quot rem) \n            [hours remainder] (quot-rem duration (* 60 60))\n            [minutes seconds] (quot-rem remainder 60)]\n        (assoc row :friendly-duration\n                   (cond-> \"\"\n                           (pos? hours) (str hours \"h \")\n                           (pos? minutes) (str minutes \"m \")\n                           (pos? seconds) (str seconds \"s\")\n                           :always str/trim))))\n    #'user/add-user-friendly-duration\n    ```", "```java\n    user=> (jdbc/query db [\"select * from activity\"]\n           {:row-fn add-user-friendly-duration})\n    ({:id 1, :activity_type \"run\", :distance 8.67M, :duration 2520, :user_id 1, :friendly-duration \"42m\"}\n     {:id 2, :activity_type \"cycle\", :distance 17.68M, :duration 2703, :user_id 1, :friendly-duration \"45m 3s\"})\n    ```", "```java\n    (fn [result-set]\n      (reduce (fn [total-distance {:keys [distance]}]\n                (+ total-distance distance))\n              0\n              result-set))\n    ```", "```java\n    user=> (jdbc/query db [\"select * from activity\"]\n                {:result-set-fn (fn [result-set]\n                                  (reduce (fn [total-distance {:keys [distance]}]\n                                            (+ total-distance distance))\n                                          0\n                                          result-set))})\n    26.35M\n    ```", "```java\n    (jdbc/query db [\"select * from activity\"]\n                {:row-fn        :distance\n                 :result-set-fn #(apply + %)})\n    => 26.35M\n    ```", "```java\n(update! db table set-map where-clause opts)\n```", "```java\n    user=> (jdbc/update! db :app_user {:weight 78} [\"first_name = 'Andre' and surname = 'Agassi'\"])\n    => (1)\n    ```", "```java\n    user => (jdbc/query db [\"select * from app_user\"])\n    => ({:id 1, :first_name \"Andre\", :surname \"Agassi\", :height 180, :weight 78})\n    ```", "```java\n    (delete! db table where-clause opts)\n    ```", "```java\n    user=> (jdbc/delete! db :app_user [\"first_name = 'Andre' and surname = 'Agassi'\"])\n    => [1]\n    ```", "```java\n    user=> (jdbc/query db [\"select * from activity\"])\n    => ()\n    ```", "```java\n{:deps {..\n        semantic-csv {:mvn/version \"0.2.1-alpha1\"}\n        org.clojure/data.csv {:mvn/version \"0.1.4\"}}\n```", "```java\n    (ns packt-clj.fitness.schema\n      (:refer-clojure :exclude [load])\n      (:require\n        [clojure.java.jdbc :as jdbc]\n        [hikari-cp.core :as hikari]))\n    ```", "```java\n    WARNING: load already refers to: #'clojure.core/load in namespace: packt-clj.fitness.schema, being replaced by: #'packt-clj.fitness.schema/load\n    ```", "```java\n    (def ^:private jdbc-url \"jdbc:derby:derby-local;create=true\")\n    (def db {:datasource (hikari/make-datasource {:jdbc-url jdbc-url})})\n    ```", "```java\n    (def ^:private create-app-user-ddl \"CREATE TABLE app_user (\n      id int GENERATED ALWAYS AS IDENTITY CONSTRAINT USER_ID_PK PRIMARY KEY,\n      first_name varchar(32),\n      surname varchar(32),\n      height smallint,\n      weight smallint)\")\n    (def ^:private create-activity-ddl \"CREATE TABLE activity (\n      id INT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,\n      activity_type VARCHAR(32),\n      distance DECIMAL(7,2),\n      duration INT,\n      activity_date DATE,\n      user_id INT REFERENCES app_user ON DELETE CASCADE)\")\n    ```", "```java\n    (defn load\n      []\n      (jdbc/db-do-commands db [create-app-user-ddl create-activity-ddl]))\n    ```", "```java\n    (ns packt-clj.fitness.ingest\n      (:require\n        [clojure.java.jdbc :as jdbc]))\n    (defn user\n      [db app_user]\n      (first (jdbc/insert! db :app_user app_user)))\n    (defn activity\n      [db activity]\n      (first (jdbc/insert! db :activity activity)))\n    ```", "```java\n    (ns packt-clj.fitness.query\n      (:require\n        [clojure.java.jdbc :as jdbc]))\n    (defn all-users\n      [db]\n      (jdbc/query db [\"select * from app_user\"]))\n    (defn user\n      [db user-id]\n      (jdbc/query db [(str \"select * from app_user where id = \" user-id)]))\n    ```", "```java\n    (defn all-activities\n      [db]\n      (jdbc/query db [\"select * from activity\"]))\n    (defn activity\n      [db activity-id]\n      (jdbc/query db [(str \"select * from activity where id = \" activity-id)]))\n    (defn activities-by-user\n      [db user-id]\n      (jdbc/query db [(str \"select * from activity where user_id = \" user-id)]))\n    ```", "```java\n    {:deps {..\n            clojure.java-time {:mvn/version \"0.3.2\"}\n            medley {:mvn/version \"1.2.0\"}}\n    (ns packt-clj.fitness.query\n      (:require\n        [clojure.java.jdbc :as jdbc]\n        [java-time :as t]\n        [medley.core :as medley]))\n    ```", "```java\n    (defn most-active-user\n      [db]\n      (jdbc/query\n        db\n        [\"select au.first_name, au.surname, a.duration from app_user au, activity a where au.id = a.user_id \"]\n        {:row-fn        (fn [{:keys [first_name surname duration]}] {:name     (str first_name \" \" surname)\n    :duration duration})\n         :result-set-fn (fn [rs]\n                          (->> rs\n                               (group-by :name)\n                               (medley/map-vals #(apply + (map :duration %)))\n                               (sort-by val)\n                               last))}))\n    ```", "```java\n    query.clj\n    41 (defn monthly-activity-by-user\n    42   [db user-id]\n    43   (jdbc/query\n    44     db\n    45     [(str \"select au.first_name, au.surname, a.duration, a.activity_type, a.distance, a.activity_date from app_user au, activity a where au.id = a.user_id and a.user_id = \" 1)]\n    46     {:row-fn        (fn [row] (update row :activity_date t/local-date))\n    47      :result-set-fn (fn [rs]\n    48                       (reduce\n    49                         (fn [acc {:keys [activity_date activity_type distance duration first_name surname] :as row}]\n    50                           (let [month-year (t/as activity_date :month-of-year :year)]\n    The complete code can be referred at: https://packt.live/37G4naC\n    ```", "```java\n    (require '[packt-clj.fitness.ingest :as ingest]\n             '[packt-clj.fitness.schema :as schema]\n             '[packt-clj.fitness.query :as query])\n    ```", "```java\n    user=> (jdbc/execute! schema/db [\"drop table activity\"])\n    [0]\n    user=> (jdbc/execute! schema/db [\"drop table app_user\"])\n    [0]\n    user=> (schema/load)\n    (0 0)\n    ```", "```java\n    user=> (def users [{:first_name \"Andre\"\n                :surname    \"Agassi\"\n                :height     180\n                :weight     80}\n               {:first_name \"Pete\"\n                :surname    \"Sampras\"\n                height     185\n                :weight     77\n                }\n                {:first_name \"Steffi\"\n                surname    \"Graff\"\n                :height     176\n                :weight     64}])\n    #'user/users\n    user=> (doseq [user users]\n      (ingest/user schema/db user))\n    nil\n    ```", "```java\n    user=> (def accessors\n      {:activity_type :type\n       :distance :distance_metres\n       :duration :duration_seconds\n       :user_id :userid\n       :activity_date (fn [{:keys [day month year]}] (str year \"-\" month \"-\" day))})\n    user=> #'user/accessors\n    ```", "```java\n    user=> (defn apply-accessors\n      [row accessors]\n      (reduce-kv\n        (fn [acc target-key accessor]\n          (assoc acc target-key (accessor row)))\n        {}\n        accessors))\n    => #'user/apply-accessors\n    ```", "```java\n    user=> (require '[semantic-csv.core :as sc]\n                    '[clojure.data.csv :as csv]\n                    '[clojure.java.io :as io])\n    => nil\n    user=> (def activities\n      (->> (csv/read-csv (io/reader \"resources/sample-activities.csv\"))\n           sc/mappify\n           (map #(apply-accessors % accessors))))\n    user=> #'user/activities\n    ```", "```java\n    user=> (first activities)\n    => {:activity_type \"swim\", :distance \"5100.00\", :duration \"9180\", :user_id \"1\", :activity_date \"2019-01-22\"}\n    ```", "```java\n    user=> (doseq [activity activities]\n      (ingest/activity schema/db activity))\n    => nil\n    ```", "```java\n    user=> (count (query/all-users schema/db))\n    => 3\n    user=> (count (query/all-activities schema/db))\n    => 60\n    user=> (query/user schema/db 1)\n    => ({:id 1, :first_name \"Andre\", :surname \"Agassi\", :height 180, :weight 80})\n    user=> (query/activity schema/db 1)\n    =>\n    ({:id 1,\n      :activity_type \"swim\",\n      :distance 5100.00M,\n      :duration 9180,\n      :activity_date #inst\"2019-01-22T00:00:00.000-00:00\",\n      :user_id 1})\n    user=> (count (query/activities-by-user schema/db 1))\n    => 20\n    user=> (query/most-active-user schema/db)\n    => [\"Pete Sampras\" 136680]\n    user=> (clojure.pprint/pprint (query/monthly-activity-by-user schema/db 3))\n    ```", "```java\n    {:players [<player 1> ...]\n     :matches [<match 1> ...]}\n    ```", "```java\n    {:max-rating …\n     :player-name …}\n    ```"]