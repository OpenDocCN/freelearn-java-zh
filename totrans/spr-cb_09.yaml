- en: Chapter 9. Handling Mobiles and Tablets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Spring Mobile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting mobiles and tablets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Switching to the normal view on mobiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using different JSP views for mobiles automatically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a `.mobi` domain name on mobiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an `m.` subdomain on mobiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a different domain name on mobiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a subfolder path on mobiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To build a mobile-friendly website, the current trend is to use responsive
    design where the page adapts to the screen width. This way, the same page is nicely
    displayed on all devices: computers, tablets and mobiles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another approach, which this chapter covers, is to build a separate website
    for mobile devices. This requires building two pages (different HTML and distinct
    URLs) for each page of the website: one for the computer and one for the mobile.
    This extra work makes sense when:'
  prefs: []
  type: TYPE_NORMAL
- en: Performance is important. For example, the loading time of a responsive website
    like [https://www.flickr.com/](https://www.flickr.com/) would be too long on mobile
    devices because of the high-resolution images of the desktop version. A separate
    mobile website makes it easier to optimize the user experience on mobile devices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The computer version of the website already exists; in this case, it's usually
    much simpler to build a separate mobile website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll cover how to serve different pages to mobile devices
    using Spring Mobile, a Spring project.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Spring Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to install Spring Mobile and prepare the Spring
    configuration class for the other recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to install Spring Mobile:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for Spring Mobile in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make the Spring configuration class extend `WebMvcConfigurerAdapter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `addInterceptors()` method from `WebMvcConfigurerAdapter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `addInterceptors()` method will be used in the following recipes to register
    various interceptors.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information about interceptors, refer to the *Executing some code before
    and after controllers using interceptors* recipe in [Chapter 3](ch03.html "Chapter 3. Using
    Controllers and Views"), *Using Controllers and Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting mobiles and tablets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how, from a controller method, you can detect whether
    the current HTTP request has come from a desktop computer, mobile, or tablet.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Register a `DeviceResolverHandlerInterceptor` interceptor and use `DeviceUtils`
    in the controller method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration class, declare a `DeviceResolverHandlerInterceptor`
    bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the `DeviceResolverHandlerInterceptor` bean as an interceptor in the
    `addInterceptors()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add an `HttpServletRequest` argument to your controller method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `DeviceUtils.getCurrentDevice()` to generate a `Device` object from `HttpServletRequest`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `Device` object to detect the type of device that sent the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `DeviceResolverHandlerInterceptor` interceptor generates a `Device` object
    from the HTTP request and stores it in `HttpServletRequest`, passed to the controller
    method. `DeviceUtils.getCurrentDevice()` is a convenient method to retrieve the
    `Device` object.
  prefs: []
  type: TYPE_NORMAL
- en: You can then choose to display different JSPs based on the `Device` type.
  prefs: []
  type: TYPE_NORMAL
- en: To generate the `Device` object, `DeviceResolverHandlerInterceptor` uses `LiteDeviceResolver`
    by default, which uses the **User-Agent** header of the HTTP request. The algorithm
    is based on WordPress Mobile Pack's detection algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: Switching to the normal view on mobiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A mobile user gets the mobile version of the website by default, but he/she
    may want to access some contents displayed only on the normal version. Spring
    Mobile offers the `SitePreference` object for that purpose, which is to be used
    instead of the `Device` object used in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create links, to switch between the normal version and
    the mobile version of a website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration class, declare a `DeviceResolverHandlerInterceptor`
    bean and a `SitePreferenceHandlerInterceptor` bean and register them as interceptors:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your controller method, add an `HttpServletRequest` argument:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use `SitePreferenceUtils.getCurrentSitePreference()` to generate a `SitePreference`
    object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `SitePreference` object to detect the version of the page to be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the view, add links to the two versions of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Mobile automatically detects the `site_preference` parameter (via the
    `SitePreferenceHandlerInterceptor` interceptor) and adjusts the `SitePreference`
    value accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `SitePreference` value is the same as `Device`. For example,
    a *mobile* preference for a *mobile* device. When the user clicks on a link containing
    a `site_preference` parameter, the site preference is changed, but the device
    type remains the same. For example, a *normal* preference for a *mobile* device.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Mobile supports a *tablet* site preference. Some websites provide pages
    optimized for tablets; Google Search, for example, provides a page optimized for
    tablets.
  prefs: []
  type: TYPE_NORMAL
- en: Using different JSP views for mobiles automatically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of having to manually select the correct JSP in each controller method
    depending on the request device or site preference, use `LiteDeviceDelegatingViewResolver`
    provided by Spring Mobile.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the Spring configuration class, replace any existing `ViewResolver` bean
    with a `LiteDeviceDelegatingViewResolver` bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a controller returning the `userList` String, the `/WEB-INF/userList.jsp`
    JSP view will be used if the site preference is *normal*. The `/WEB-INF/mobile/userList.jsp`
    JSP view will be used if the site preference is *mobile*.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the site preference is *mobile* and `/WEB-INF/mobile/userList.jsp` doesn''t
    exist, `/WEB-INF/userList.jsp` will be used as a fallback instead. This is enabled
    by the line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`LiteDeviceDelegatingViewResolver` supports custom JSP views for tablets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using a .mobi domain name on mobiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to use a top-level `.mobi` domain name for
    the mobile pages of your website. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysite.com` for the normal website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysite.mobi` for the mobile version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The top-level domain name `.mobi` has been created to enable visitors of a website
    to ask explicitly for its mobile version. For example, [http://google.mobi](http://google.mobi).
    Google, Microsoft, Nokia, and Samsung originally sponsored it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the `SitePreferenceHandlerInterceptor` interceptor is declared
    in the Spring configuration. Refer to the *Switching to the normal view on mobiles*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use a `.mobi` domain name for the mobile version of the
    website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration, declare a `SiteSwitcherHandlerInterceptor` bean
    initialized with the `dotMobi()` method with your main domain name as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare that bean as an interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behind the scenes, `SiteSwitcherHandlerInterceptor` reads the current `SitePreference`
    value (*normal*, *tablet*, or *mobile*) and performs a redirect to the correct
    domain name if necessary. For example, an HTTP request from a mobile device for
    `mywebsite.com` will be automatically redirected to `mywebsite.mobi`. A tablet
    will go to the normal website.
  prefs: []
  type: TYPE_NORMAL
- en: Using an m. subdomain on mobiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to use an `m.` subdomain for the mobile pages
    of your website. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysite.com` for the normal website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m.mysite.com` for the mobile version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some advantages of an `m.` subdomain are:'
  prefs: []
  type: TYPE_NORMAL
- en: No need to purchase another domain name (and another SSL certificate if you're
    using HTTPS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is easy to remember for the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the `SitePreferenceHandlerInterceptor` interceptor is declared
    in the Spring configuration. Refer to the *Switching to the normal view on mobiles*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use a `m.` subdomain for the mobile version of the website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration, declare a `SiteSwitcherHandlerInterceptor` bean
    initialized with the `mDot()` method with your main domain name as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare that bean as an interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behind the scenes, `SiteSwitcherHandlerInterceptor` reads the current `SitePreference`
    value (*normal*, *tablet*, or *mobile*) and performs a redirect to the correct
    domain name if necessary. For example, an HTTP request from a mobile device for
    `mywebsite.com` will be automatically redirected to `m.mywebsite.com`. A tablet
    will go to the normal website.
  prefs: []
  type: TYPE_NORMAL
- en: Using a different domain name on mobiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to use a different domain name for the mobile
    pages of your website. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysite.com` for the normal website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mymobilesite.com` for the mobile version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the `SitePreferenceHandlerInterceptor` interceptor is declared
    in the Spring configuration. Refer to the *Switching to the normal view on mobiles*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use a different domain name for the mobile version of
    the website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration, declare a `SiteSwitcherHandlerInterceptor` bean
    initialized with the `standard()` method with your main domain name, mobile domain
    name, and the value for the `Set-Cookie` HTTP header field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare that bean as an interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behind the scenes, `SiteSwitcherHandlerInterceptor` reads the current `SitePreference`
    value (*normal*, *tablet*, or *mobile*) and performs a redirect to the correct
    domain name if necessary. For example, an HTTP request from a mobile device for
    `mywebsite.com` will be redirected automatically to `mymobilewebsite.com`. A tablet
    will go to the normal website.
  prefs: []
  type: TYPE_NORMAL
- en: The `Set-Cookie` HTTP header field contains the `SitePreference` value. The
    cookie allows us to share that value with subdomains. In this recipe, `.mywebsite.com`
    makes the `SitePreference` value available to `www.mywebsite.com`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Using a subfolder path on mobiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to use a subfolder in the URL for the mobile
    pages of your website. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mysite.com` for the normal website'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mysite.com/mobile` for the mobile version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that the `SitePreferenceHandlerInterceptor` interceptor is declared
    in the Spring configuration. Refer to the *Switching to the normal view on mobiles*
    recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to use a subfolder path for the mobile version of the website:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration, declare a `SiteSwitcherHandlerInterceptor` bean
    initialized with the `urlPath()` method with the subfolder name and the web application
    root path if necessary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare that bean as an interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the controller method for the URL with the `mobile` subfolder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behind the scenes, `SiteSwitcherHandlerInterceptor` reads the current `SitePreference`
    value (*normal*, *tablet*, or *mobile*) and performs a redirect to add or remove
    the `mobile` subfolder to the URL if necessary. For example, an HTTP request from
    a mobile device for `mywebsite.com` will be automatically redirected to `mywebsite.com/mobile`.
    A tablet will go to the normal website.
  prefs: []
  type: TYPE_NORMAL
