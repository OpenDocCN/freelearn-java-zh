- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding Java Distributions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Java发行版
- en: In this chapter, we will examine how the **Java** language came about and how
    it is managed. While the word *Java* is used throughout this book, please note
    that I am referring to the **Java Standard Edition** or **Java SE**. There are
    numerous versions and distributions of Java, and this sometimes leads to confusion
    over which one to use. Is Java free, or do I have to license it? Can I include
    a Java runtime with my software? Can I distribute my own version of Java? These
    and other questions will be answered in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Java语言的起源以及它是如何被管理的。虽然本书中使用了*Java*这个词，但请注意，我指的是**Java标准版**或**Java
    SE**。Java有众多版本和发行版，这有时会导致对使用哪个版本产生混淆。Java是免费的，还是我需要获得许可？我能否将Java运行时包含在我的软件中？我能否分发自己的Java版本？这些问题以及其他问题将在本章中解答。
- en: You will learn how to install Java on Linux, macOS, and Windows. The significant
    tools that are part of the Java installation are highlighted in this chapter and
    will be used in later chapters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何在Linux、macOS和Windows上安装Java。本章突出了Java安装中包含的重要工具，这些工具将在后续章节中使用。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: A little history
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一点历史
- en: What makes Java special?
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java的独特之处在哪里？
- en: Why are there many distributions of Java?
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么会有这么多Java发行版？
- en: Which Java should you get?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您应该选择哪个Java版本？
- en: How is Java licensed?
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java是如何授权的？
- en: Why are there so many versions of Java?
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么会有这么多版本的Java？
- en: Installing Java
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Java
- en: What’s in the box?
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 箱子里有什么？
- en: Let’s begin with a quick history lesson.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从快速的历史课开始。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To code in Java or run Java programs on your desktop, you need a computer and
    operating system that supports the **Java Development Kit** (**JDK**). There are
    JDKs available for different operating systems and different **central processing
    units** (**CPUs**). If you are running the Windows operating system, your only
    concern is whether you are running 32-bit or 64-bit. On macOS, there are versions
    of Java for both Intel and Apple (ARM) CPUs. If your operating system is Linux,
    there are more variations depending on your computer’s hardware. There is even
    a version of Java for IBM mainframes that run Linux.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Java或您的桌面上运行Java程序，您需要一个支持**Java开发工具包**（**JDK**）的计算机和操作系统。不同操作系统和不同**中央处理器**（**CPU**）都有可用的JDK。如果您正在运行Windows操作系统，您唯一需要关心的是您是否在运行32位或64位。在macOS上，有适用于Intel和Apple（ARM）CPU的Java版本。如果您的操作系统是Linux，则根据您的计算机硬件，有更多变体。甚至还有适用于运行Linux的IBM大型机的Java版本。
- en: The only other hardware requirement is the amount of RAM on your system. I have
    run Java applications on a Raspberry Pi 3 Model B with just 1 GB of RAM. As a
    developer, you are doing more than just running programs. You run editors, compilers,
    web servers, database servers, and your usual software. Doing this needs memory.
    I recommend a minimum of 8 GB for a development system; 16 GB is ideal, and 32
    GB might let you play games while you code.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除了硬件要求之外，还需要考虑您系统上的RAM数量。我曾在只有1GB RAM的Raspberry Pi 3 Model B上运行Java应用程序。作为一名开发者，您所做的不仅仅是运行程序。您还需要运行编辑器、编译器、Web服务器、数据库服务器以及您常用的软件。完成这些任务需要内存。我建议开发系统至少配备8GB内存；16GB是理想的选择，而32GB可能让您在编码的同时还能玩游戏。
- en: A little history
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一点历史
- en: Java did not start as a language called Java. In the early 1990s, the company
    **Sun Microsystems**, known for its SPARC workstations and the Solaris operating
    system, saw potential in the consumer electronics space. They put together a team
    of engineers to develop products in this space under the title **Green Project**.
    Their first device was called the **Star7**, a small handheld computer that used
    a custom version of Solaris. The Star7 is the first personal digital assistant,
    preceding the Apple Newton by a year. As part of the development of Star7, a language
    was created. James Gosling, a Canadian software engineer working for Sun, led
    a team that developed this new language for the Star7, called **Oak**. The Star7
    never went into production, but Oak was destined to take over the world.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java并非一开始就被称为Java。在20世纪90年代初，以SPARC工作站和Solaris操作系统闻名的公司**Sun Microsystems**，看到了消费电子领域的潜力。他们组建了一支工程师团队，在这个领域下以**Green
    Project**的名义开发产品。他们的第一个设备被称为**Star7**，这是一款使用定制版Solaris的小型手持式电脑。Star7是第一个个人数字助理，比苹果的Newton早了一年。作为Star7开发的一部分，创造了一种语言。加拿大软件工程师James
    Gosling领导了一个团队，为Star7开发了一种新的语言，称为**Oak**。Star7从未投入生产，但Oak注定要统治世界。
- en: One of the consumer electronics targets Sun hoped that the Star7 could be used
    for was set-top boxes for the cable TV industry. They set up a company called
    FirstPerson and made a bid to develop a set-top box for the cable provider Time
    Warner. They lost the bid. While they were unsuccessful in bringing the Star7
    to market, they saw potential in the Oak language. The only problem was that Oak
    was already trademarked.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: There are numerous stories about how Oak became Java. Was it named after their
    favorite beverage or an island in Indonesia? Java was just 1 of 12 possible names.
    The names were turned over to the legal department for trademark searches. Of
    the names on the list given to the legal team, Java was the fourth name on the
    list and the first to pass the legal review. Java became the new name for Oak.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: The early 1990s was also the time that the **World Wide Web** (**WWW**) became
    available to anyone with an internet connection. The Green team developed a browser
    called WebRunner coded with Java as a showcase for the language. This browser
    could run programs called Applets, which were written in Java. Java 1.0 was introduced
    to the world in 1995, and WebRunner was renamed HotJava. Netscape also licensed
    Java for their Navigator browser.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: In 1998 Java 1.2, also referred to as Java 2, was introduced. Among many new
    features was the **Swing GUI library**, which significantly improved writing desktop
    GUI programs that ran independently from a browser. The **Java EE** platform was
    released in 1999 as **J2EE**. It was used to develop Java web servers. Now, you
    could write Java programs that responded to requests from a browser and were run
    on a web server. The rest, as the expression goes, is history.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: What makes Java special?
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java was designed by Gosling and his team to address shortcomings they perceived
    in **C++**. The most significant of the shortcomings was memory management. In
    C++, variables of type pointer were used to allocate memory for objects. Once
    an object was no longer needed, the developer’s responsibility was to release
    or deallocate the memory. Forgetting to do so resulted in memory leaks. A leak
    is a block of memory marked as *in use* but no longer accessible by a pointer.
    While Java still required you to allocate memory, you did not need to deallocate
    it. A process called the **garbage collector** tracked all memory allocations.
    When a pointer, named a reference in Java, went out of scope, the garbage collector
    would release its memory automatically. There are five garbage collectors available.
    The Parallel Garbage Collector is the default general-purpose collector. Serial
    Garbage Collector, CMS Garbage Collector, G1 Garbage Collector, and Z Garbage
    Collector use algorithms for specific types of applications such as those requiring
    low latency or requiring only a single thread.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: However, garbage collection is not the most significant feature of Java. What
    sets Java apart from its predecessors, **C** and **C++**, is that Java programs
    do not execute directly in the computer’s operating system. Instead, compiled
    Java programs, called **bytecode**, execute inside another process called the
    **Java virtual machine** (**JVM**).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，垃圾回收并不是 Java 最显著的特征。Java 与其前辈 **C** 和 **C++** 区别开来的是，Java 程序不会直接在计算机的操作系统上执行。相反，编译后的
    Java 程序，称为 **字节码**，在另一个称为 **Java 虚拟机**（**JVM**）的进程中执行。
- en: The JVM is a software simulation of a computer. The bytecode is the machine
    language of this simulated machine. The JVM then translates the bytecode into
    the machine language of the underlying computer.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 是计算机的软件模拟。字节码是这个模拟机的机器语言。然后 JVM 将字节码转换为底层计算机的机器语言。
- en: The JVM is responsible for optimizing the code and performing garbage collection.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 负责优化代码和执行垃圾回收。
- en: Native languages such as C and C++ are directly compiled into the machine language
    of the CPU coupled with the computer’s operating system it will run on. Any libraries
    used must also have been compiled for a specific CPU and operating system. This
    means that a program compiled for an Intel CPU running Windows or an Apple M1
    CPU running a specific version of macOS must be recompiled for an Intel CPU running
    Linux.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 原生语言，如 C 和 C++，会直接编译成 CPU 的机器语言，并与其运行的计算机操作系统相结合。任何使用的库也必须为特定的 CPU 和操作系统编译。这意味着为运行
    Windows 的 Intel CPU 编译的程序或为运行特定版本 macOS 的 Apple M1 CPU 编译的程序必须为运行 Linux 的 Intel
    CPU 重新编译。
- en: Java turns this concept on its head. Code that you write in Java and compile
    into bytecode can run on any hardware and operating system unchanged if there
    is a JVM for that computer. Java describes itself as a *Write Once Run Anywhere*
    language. This means that a Java application written on and for an Intel CPU will
    also run on an ARM-based system unchanged and without the need to recompile if
    there is a JVM for that platform.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Java 将这一概念颠倒过来。如果你用 Java 编写代码并将其编译成字节码，那么只要有相应的 JVM，这些代码就可以在任何硬件和操作系统上无变化地运行。Java
    自称为 *一次编写，到处运行* 的语言。这意味着在 Intel CPU 上编写和运行的 Java 应用程序也可以在基于 ARM 的系统上无变化地运行，无需重新编译，前提是该平台有
    JVM。
- en: In [*Chapter 4*](B19088_04.xhtml#_idTextAnchor086), *Language Fundamentals –
    Data Types and Variables*, and [*Chapter 5*](B19088_05.xhtml#_idTextAnchor106)*,
    Language Fundamentals – Classes*, we will examine the syntax of the Java language.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第4章*](B19088_04.xhtml#_idTextAnchor086)，*语言基础 – 数据类型和变量*，以及 [*第5章*](B19088_05.xhtml#_idTextAnchor106)，*语言基础
    – 类* 中，我们将检查 Java 语言的语法。
- en: 'Java is not the only language that runs in the JVM. More languages were developed
    to take advantage of the JVM while at the same time taking a different approach
    and syntax from Java. Here are four of the most widely used ones:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Java 不是唯一能在 JVM 上运行的编程语言。为了利用 JVM 的优势，同时采用与 Java 不同的方法和语法，开发了更多语言。以下是最广泛使用的四种：
- en: Scala
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Scala
- en: Kotlin
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kotlin
- en: Groovy
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Groovy
- en: Clojure
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clojure
- en: We now know what makes Java special in relation to languages that do not have
    a virtual machine. What can be confusing is that there is not just one version
    of Java distributed by just one company. Why? Let's take a look at that next.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道了 Java 与没有虚拟机的语言相比的独特之处。可能令人困惑的是，并非只有一个公司分发 Java 的一个版本。为什么？让我们接下来看看这一点。
- en: Why are there many distributions of Java?
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么会有许多 Java 发行版？
- en: Java was first released as proprietary software. In 2006, Sun Microsystems created
    an open source version of Java called the **OpenJDK** with a GNU General Public
    License allowing developers to change and share the program. Sun (and later, the
    new owner, Oracle) retained Java-related intellectual property and copyrights.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Java 首次作为专有软件发布。2006 年，Sun Microsystems 创建了一个名为 **OpenJDK** 的开源版本 Java，它带有 GNU
    通用公共许可证，允许开发者修改和共享程序。Sun（以及后来的新所有者 Oracle）保留了与 Java 相关的知识产权和版权。
- en: One way to describe Java is to state that only JDKs and runtimes are considered
    Java if they pass an extensive suite of tests called the **Technology Compatibility
    Kit** (**TCK**). While Java was designated open source, initially, TCK was not.
    It needed to be licensed, for a fee, from Oracle. This resulted in very few companies
    making their own branded version of Java.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 描述 Java 的一种方式是指出，只有通过称为 **技术兼容性工具包**（**TCK**）的广泛测试套件，JDK 和运行时才被认为是 Java。虽然 Java
    被指定为开源，但最初 TCK 并不是。它需要付费从 Oracle 获得许可。这导致很少有公司推出自己的 Java 品牌版本。
- en: Today, however, it is possible to get access to the TCK without paying a fee.
    You have to make a formal request to Oracle, along with presenting several supporting
    documents explaining why you require access to the TCK. A screening committee
    will review your request and decide whether to grant you access to the TCK. At
    the time of writing, 27 organizations have signed the **OpenJDK Community TCK
    License Agreement** (**OCTLA**) and have access to the TCK.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，然而，你可以无需支付费用就能获取TCK。你必须向Oracle提出正式申请，并提交几份支持性文件，解释你为什么需要访问TCK。一个筛选委员会将审查你的申请并决定是否授予你访问TCK的权限。在撰写本文时，已有27个组织签署了**OpenJDK社区TCK许可协议**（**OCTLA**）并有权访问TCK。
- en: So, why do companies still distribute their own branded version of Java? The
    simplest answer is to provide support to clients who wish to use Java in situations
    where the distributor may have more experience in a particular domain. Cloud providers
    such as Microsoft and Amazon have their own branded versions of Java that have
    been optimized for their cloud infrastructure. BellSoft, the distributor of the
    Liberica distribution, is one of the leaders involved in ARM versions of Java.
    While it might not make much of a difference which distribution you choose, the
    distribution your clients will use is significant.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，为什么公司仍然分发他们自己的Java品牌版本呢？最简单的答案是向希望在使用Java的情况下获得更多特定领域经验的客户提供服务。像Microsoft和Amazon这样的云服务提供商有自己的Java品牌版本，这些版本已经针对他们的云基础设施进行了优化。Liberica发行版的发行商BellSoft是参与Java
    ARM版本的主要领导者之一。虽然选择哪个发行版可能不会有多大区别，但你的客户将使用的发行版是重要的。
- en: Regardless of the distributor, the language is maintained by Oracle. A well-established
    process allows anyone to propose changes to the language. Through the **Java Community
    Process** (**JCP**), all changes, additions, and removals from the language are
    carefully reviewed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是哪个发行商，语言都是由Oracle维护的。一个成熟的流程允许任何人提出对语言的修改建议。通过**Java社区流程**（**JCP**），对语言的全部更改、新增和删除都得到了仔细的审查。
- en: The actual coding of changes to the JDK is primarily the responsibility of developers
    working for Oracle. Consider joining the JCP to keep abreast of changes and contribute
    to the language.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: JDK变更的实际编码主要是Oracle工作的开发者的责任。考虑加入JCP，以了解变化并贡献于语言。
- en: Let's move on and look at which version you should use since you do not have
    any experience with the language.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看看你应该使用哪个版本，因为你对这个语言没有任何经验。
- en: Which Java should you get?
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你应该获取哪种Java？
- en: All distributions of Java since Java 11, including Oracle’s distribution, are
    based on the OpenJDK source code. It should not matter whose distribution of Java
    you choose if it has passed the TCK. If you do not have a distribution you must
    use, then I recommend the Eclipse Adoptium version called **Temurin**. This version
    has passed the TCK. Java is a registered trademark, so the word cannot be used
    for distributions other than from Oracle, hence the name Temurin. If you are curious
    about where this name came from, I will give you a hint – it is an anagram.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 自Java 11以来，所有Java的发行版，包括Oracle的发行版，都是基于OpenJDK源代码的。如果你没有必须使用的发行版，我推荐使用名为**Temurin**的Eclipse
    Adoptium版本。这个版本已经通过了TCK。Java是一个注册商标，因此这个词不能用于Oracle以外的发行版，所以有了这个名字Temurin。如果你对这个名字的来源好奇，我会给你一个提示——它是一个字母表重排。
- en: You might think that the obvious choice for a Java distribution would be an
    Oracle-branded version. This was pretty much the case until the final release
    of Java 8\. With this release, Oracle required companies that distributed Java
    as part of their commercial offerings to purchase a commercial support license
    for access to updates to Java. Starting with Java 11, Oracle required commercial
    licensees to purchase a subscription for every developer. Personal use of the
    Oracle-branded JDK has remained free to use, though.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为Java发行版的明显选择是Oracle品牌的版本。这几乎就是Java 8最终发布之前的情况。随着这次发布，Oracle要求将Java作为其商业产品一部分进行分发的公司购买商业支持许可证以获取Java更新的访问权限。从Java
    11开始，Oracle要求商业许可证持有者为每位开发者购买订阅。尽管如此，Oracle品牌的JDK的个人使用仍然是免费的。
- en: This gets confusing because should you choose to use the OpenJDK distribution
    or any other distribution based on the OpenJDK except for Oracle’s, there are
    no fees required for commercial distribution. With the release of Java 17, Oracle
    changed its licensing again. Now called the Oracle **No-Fee Terms and Conditions**
    (**NFTC**), this now allows you to use Oracle’s Java for the development of software
    and then distribute this version of Java with your program without the need for
    a subscription or fee. This is only applicable to versions of Java starting at
    17\. Versions from 8 to 16 are still subject to the licenses.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能会让人困惑，因为如果你选择使用OpenJDK发行版或基于OpenJDK的任何其他发行版（除了Oracle的），商业分发不需要支付费用。随着Java
    17的发布，Oracle再次改变了其授权方式。现在被称为Oracle的**无费条款和条件**（**NFTC**），这现在允许你在开发软件时使用Oracle的Java，然后无需订阅或费用即可将此版本的Java与你的程序一起分发。这仅适用于从17开始的Java版本。从8到16的版本仍然受限于许可证。
- en: How is Java licensed?
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java是如何授权的？
- en: If you plan to use Java to develop software commercially, then how it is licensed
    is important to you. As already stated, the OpenJDK carries the GNU General Public
    License version 2, commonly referred to as the **GPLv2**. The GPL is widely used
    in open source software. At its most basic level, it requires any software that
    uses GPL licensed code to also be subject to the GPL. This means that any software
    you create must make its source code available under the same conditions. Copyright
    and intellectual property rights stay with the author of the work, either Oracle
    or you.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划使用Java进行商业软件开发，那么它的授权对你来说很重要。如前所述，OpenJDK携带GNU通用公共许可证版本2，通常称为**GPLv2**。GPL在开源软件中广泛使用。在最基本层面上，它要求任何使用GPL许可代码的软件也必须受GPL约束。这意味着你创建的任何软件都必须在相同条件下提供源代码。版权和知识产权归作品作者所有，无论是Oracle还是你。
- en: Java’s GPLv2 carries with it the Classpath Exception, also called the linking
    exception. A classpath, like an operating system path, is the location of classes
    and packages that the JVM and Java compiler will use. Under this exception, you
    do not need to supply the source code when you distribute your application. The
    software you write that is linked to Java does not require a GPLv2 license. It
    can remain proprietary and cannot be freely used like GPL software. You choose
    the licensing for the code that you generate.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Java的GPLv2附带Classpath异常，也称为链接异常。类路径，就像操作系统路径一样，是JVM和Java编译器将使用的类和包的位置。根据这个例外，当你分发你的应用程序时，你不需要提供源代码。链接到Java的软件不需要GPLv2许可证。它可以保持专有，不能像GPL软件那样自由使用。你选择你生成的代码的授权。
- en: Why are there so many versions of Java?
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么Java有这么多版本？
- en: Java is constantly evolving – bug fixes, enhancements, and new features are
    in continuous development. Java was initially numbered as 1 plus a version number.
    The first nine versions starting in 1996 and until 2014 were 1.0, 1.1, 1.2, 1.3,
    1.4, 1.5, 1.6, 1.7, and 1.8\. Between each of these versions, there was a third
    number that represented an update rather than a major revision, such as 1.8_202\.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Java 一直在不断发展——错误修复、增强和新功能都在持续开发中。Java最初以1加上版本号进行编号。从1996年开始，直到2014年的前九个版本分别是1.0、1.1、1.2、1.3、1.4、1.5、1.6、1.7和1.8。在这些版本之间，有一个代表更新而不是主要修订的第三个数字，例如1.8_202。
- en: 'Starting with Java 1.8, then subsequently named Java 8, here is the timeline
    of Java versions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从Java 1.8开始，随后被称为Java 8，以下是Java版本的时间线：
- en: '![](img/B19088_01_Table1.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19088_01_Table1.jpg)'
- en: Table 1.1 – Timeline of Java versions
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1 – Java版本的时间线
- en: You will see several versions designated **LTS**, short for **Long Term Support**,
    by Oracle. These versions are expected to be supported with bug fixes and security
    updates for at least 8 years. The non-LTS versions, also called **feature releases**,
    are accumulative fixes, updates, and preview features. Support for these versions
    is expected to last only until the next non-LTS or LTS version is released. Companies
    that have their own Java distribution may provide support for longer than Oracle
    does.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到Oracle标记了几个**LTS**版本，即**长期支持**版本。这些版本预计将至少提供8年的错误修复和安全更新。非LTS版本，也称为**功能发布**，是累积的修复、更新和预览功能。对这些版本的支持预计将持续到下一个非LTS或LTS版本发布。拥有自己Java分发的公司可能提供的支持时间比Oracle更长。
- en: LTS versions are typically what many organizations prefer to use for their products.
    Java 8, released in March 2014, is still supported and will be until December
    2030\. Subsequent LTS versions are being supported for just 8 years but, as already
    mentioned, may be supported by other Java distributors for a longer period. The
    current schedule for new releases of Java has an LTS version every 2 years. A
    non-LTS version is released every 6 months.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: LTS版本通常是许多组织用于其产品的首选。Java 8于2014年3月发布，目前仍在支持中，并将持续到2030年12月。随后的LTS版本仅支持8年，但如前所述，其他Java分销商可能会提供更长时间的支持。Java新版本发布的当前计划是每两年一个LTS版本，每六个月发布一个非LTS版本。
- en: If you plan to develop server-side software, you must use an LTS version. Libraries
    required for server-side are written to use a specific LTS version. When a new
    LTS version is released, it might take some time for all such libraries to be
    updated as is currently the case with LTS Java 17\. As I write this, most server-side
    applications are running Java 11 and some still even use Java 8.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划开发服务器端软件，您必须使用LTS版本。服务器端所需的库是针对特定LTS版本编写的。当一个新的LTS版本发布时，所有这些库可能需要一些时间才能更新，正如目前LTS
    Java 17的情况一样。在我撰写本文时，大多数服务器端应用程序正在运行Java 11，一些甚至仍在使用Java 8。
- en: What has contributed to Java’s success is evident in the continuing and now
    regular cadence of releases. This ensures that Java continues to be a state-of-the-art
    language.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对Java成功做出贡献的因素在持续且现在已成为常规的发布节奏中显而易见。这确保了Java继续成为一门最前沿的语言。
- en: Installing Java
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Java
- en: Installing Java is a simple process. As a developer, you will install the JDK
    from any of the distributors. Most Java distributors have packaged Java with an
    installer and as a compressed file without an installer that you can download.
    The choice depends on your OS, CPU, and whether you are the administrator or superuser
    and can use an installer. Or, you are a client and can only install the compressed
    file.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Java是一个简单的过程。作为开发者，您将从任何分销商那里安装JDK。大多数Java分销商都打包了带有安装程序的Java，以及一个没有安装程序的压缩文件，您可以下载。选择取决于您的操作系统、CPU，以及您是否是管理员或超级用户并且可以使用安装程序。或者，您是客户端用户，只能安装压缩文件。
- en: With your distribution and version decided, you are ready to install Java as
    an admin and non-admin.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的分发和版本确定后，您就可以准备安装Java作为管理员和非管理员用户。
- en: As an admin
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为管理员
- en: As an admin, you can install Java for all users of the computer in the following
    ways.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 作为管理员，您可以通过以下方式为计算机上的所有用户安装Java。
- en: Windows
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: Download the appropriate (32- or 64-bit) `.msi` file for Java from [https://adoptium.net/](https://adoptium.net/).
    This type of file contains an installer that will place Java in the folder of
    your choice and configure the appropriate environment variables. Just double-click
    on the `.msi` file after it is downloaded. The Windows installer will lead you
    through the installation.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从[https://adoptium.net/](https://adoptium.net/)下载适用于Java的适当（32位或64位）`.msi`文件。此类文件包含一个安装程序，它将Java放置在您选择的文件夹中，并配置适当的环境变量。下载后，只需双击`.msi`文件。Windows安装程序将引导您完成安装过程。
- en: macOS
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: macOS
- en: You have two options for installing Java for macOS. The first is to download
    the `.pkg` file for Mac that includes an installer. Just double-click on the `.pkg`
    file after it is downloaded. The Apple installer will lead you through the installation.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS安装Java，您有两个选择。第一个是下载包含安装程序的Mac `.pkg`文件。下载后，只需双击`.pkg`文件。Apple安装程序将引导您完成安装过程。
- en: The second is to use **HomeBrew**, a command-line utility for managing new software
    and updates, which will download and install Java.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用**HomeBrew**，这是一个用于管理新软件和更新的命令行工具，它将下载并安装Java。
- en: 'With HomeBrew installed, you can install the OpenJDK version with the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了HomeBrew之后，您可以使用以下命令安装OpenJDK版本：
- en: '[PRE0]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To install the Eclipse Temurin version of Java 17, use the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Java 17的Eclipse Temurin版本，请使用以下命令：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Linux
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux
- en: 'On Linux, you use the `apt install` command-line tool. You must be a superuser/admin
    to use this tool. You also include the distribution and version you require. You
    install the OpenJDK Java at the command line with the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，您使用`apt install`命令行工具。您必须是超级用户/管理员才能使用此工具。您还必须包含所需的分发和版本。您可以使用以下命令在命令行中安装OpenJDK
    Java：
- en: '[PRE2]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To install the Eclipse Temurin version of Java, use the following:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Eclipse Temurin版本的Java，请使用以下命令：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Verifying installation
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'Once the installation is complete, verify that Java works by issuing the following
    command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，通过以下命令验证Java是否正常工作：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If it shows you the version and distribution name of Java that you just installed,
    you are done and ready to code Java. The version number may be different depending
    on when you download Java or use `apt install`. Here is what you should see:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它显示了你刚刚安装的Java的版本和发行名称，那么你就完成了，可以开始编写Java代码。版本号可能因你下载Java或使用`apt install`的时间而有所不同。你应该看到以下内容：
- en: Windows
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Linux and macOS
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux和macOS
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: If it tells you that it cannot find Java, then follow the instructions given
    in the coming *Configuring environment variables* section for setting up the environment
    variables.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它告诉你找不到Java，那么请按照即将到来的*配置环境变量*部分中的说明来设置环境变量。
- en: As a non-admin
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作为非管理员
- en: If you are not an admin, then you can still install Java but only you will be
    able to use it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不是管理员，那么你仍然可以安装Java，但只有你才能使用它。
- en: Windows
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: Windows users can download the appropriate `.zip` file version and unzip it
    in the desired folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以下载适当的`.zip`文件版本，并将其解压到所需的文件夹中。
- en: Linux and macOS
  id: totrans-93
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux和macOS
- en: Download the appropriate `.tar.gz` file version for either Linux or macOS. Once
    downloaded, use the following command line. The only difference between Linux
    and macOS is the name of the file.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 下载适用于Linux或macOS的适当`.tar.gz`文件版本。下载完成后，使用以下命令行。Linux和macOS之间的唯一区别是文件名。
- en: 'For Linux, use the following:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Linux，使用以下命令：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For macOS, use the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 对于macOS，使用以下命令：
- en: '[PRE8]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring environment variables
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置环境变量
- en: There are two environment variables that need to be set. While the environment
    variables are the same on Windows, Linux, and macOS, the process of setting them
    differs.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 需要设置两个环境变量。虽然Windows、Linux和macOS上的环境变量相同，但设置它们的过程不同。
- en: The first environment variable is `JAVA_HOME`. Certain Java processes, such
    as web servers, need to know where Java is installed to be able to access specific
    components in the JDK. It must be assigned the full path to the folder in which
    you have installed Java.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个环境变量是`JAVA_HOME`。某些Java进程，如Web服务器，需要知道Java的安装位置才能访问JDK中的特定组件。它必须被分配到安装Java的文件夹的完整路径。
- en: The second environment variable is `PATH`. When a program is run from the command
    line, the OS will look for an executable file in the current directory. If it
    is not found, then it will go through every directory in the path to look for
    it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个环境变量是`PATH`。当从命令行运行程序时，操作系统将在当前目录中查找可执行文件。如果没有找到，它将遍历路径中的每个目录以查找它。
- en: 'You will have to enter these commands every time you open a console. Adjust
    the command based on your login name and the version of Java you are installing.
    While you can install multiple versions of Java, only one can be used for `JAVA_HOME`
    and `PATH`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你每次打开控制台时都必须输入这些命令。根据你的登录名和要安装的Java版本调整命令。虽然你可以安装多个Java版本，但只能有一个用于`JAVA_HOME`和`PATH`：
- en: Windows
  id: totrans-104
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Adjust the path to the folder created when you unzipped the Java file. You
    can also place these two lines in a batch file that you can run every time you
    open a console to code in Java:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 调整解压Java文件时创建的文件夹的路径。你还可以将这些两行放入一个批处理文件中，每次你打开控制台编写Java代码时都可以运行：
- en: Linux
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Linux
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This assumes that you are logged in as `javadev` and you are placing Java in
    a directory called `java`. These two lines can be added to your `.profile` file
    in your home directory so that they execute every time you log in.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设你已经以`javadev`的身份登录，并且你将Java放置在名为`java`的目录中。这两行可以添加到你的家目录中的`.profile`文件中，以便每次登录时执行。
- en: macOS
  id: totrans-110
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: macOS
- en: '[PRE11]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This assumes that you are logged in as `javadev` and you are placing Java in
    a directory called `java`. These two lines can be added to your `.bash.profile`
    file in your home directory so that they execute every time you log in.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这假设你已经以`javadev`的身份登录，并且你将Java放置在名为`java`的目录中。这两行可以添加到你的家目录中的`.bash.profile`文件中，以便每次登录时执行。
- en: Verifying installation
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证安装
- en: 'You can quickly determine whether your installation of Java is correct. Open
    a command or console window on whatever system you are using. If you performed
    the non-admin installation, then ensure that `JAVA_HOME` and `PATH` have been
    updated and set. In the command window, enter the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以快速确定Java的安装是否正确。打开你正在使用的系统上的命令或控制台窗口。如果你执行了非管理员安装，请确保`JAVA_HOME`和`PATH`已更新并设置。在命令窗口中，输入以下命令：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the installation was successful, the output, if you installed the OpenJDK,
    will be as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果安装成功，如果你安装了OpenJDK，输出将如下所示：
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output, if you installed the Temurin JDK, will be as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您安装了Temurin JDK，输出将如下所示：
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Your installation is now complete and verified. Let's now examine some of the
    files that you just installed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 您的安装现在已完成并已验证。现在让我们检查一下您刚刚安装的一些文件。
- en: What is in the box?
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒子里有什么？
- en: The JDK contains the programs and libraries necessary to compile your source
    code into bytecode and then execute your code in the JVM program. It also includes
    numerous tools that support your work as a developer.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: JDK包含将源代码编译成字节码并在JVM程序中执行代码所需的程序和库。它还包括许多支持您作为开发人员工作的工具。
- en: There is a second packaging of Java, called the **Java Runtime Edition** (**JRE**).
    This smaller package only contains the components necessary to run Java bytecode
    and not the Java compiler.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Java还有一种第二种打包方式，称为**Java运行时版**（**JRE**）。这个较小的包只包含运行Java字节码所需的组件，而不包括Java编译器。
- en: Java 9 introduced a new way to package Java applications that rendered the JRE
    superfluous. As of Java 11, Oracle no longer distributes a JRE for both their
    distribution and the OpenJDK. Certain distributions from other companies may still
    provide a JRE for the current versions of Java. We will look at the modular approach
    to packaging Java applications in a later chapter.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9引入了一种新的打包Java应用程序的方法，这使得JRE变得多余。截至Java 11，Oracle不再为其分发和OpenJDK提供JRE。其他公司的一些分发可能仍然为Java的当前版本提供JRE。我们将在后面的章节中探讨打包Java应用程序的模块化方法。
- en: The installation of Java will take up approximately 300 MB of disk space depending
    on the underlying OS.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Java的安装将占用大约300 MB的磁盘空间，具体取决于底层操作系统。
- en: The following are the directory structures from a Linux and Windows Java installation.
    The first is for Ubuntu but will be almost identical on all Linux and macOS installations.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从Linux和Windows Java安装的目录结构。第一个是为Ubuntu设计的，但在所有Linux和macOS安装上几乎相同。
- en: 'The directory structure for Ubuntu 20.04.4 LTS is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 20.04.4 LTS的目录结构如下：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The directory structure for Windows Enterprise 11 Version 21H2 is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Enterprise 11版本21H2的目录结构如下：
- en: '[PRE16]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If we investigate the `bin` folder, we will find several executable programs
    that Java refers to as its tools. On a Windows system, they all have the `.exe`
    extension; on Linux and macOS, they appear as names only. In this chapter, we
    will discuss the following tools:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们调查`bin`文件夹，我们会发现几个Java称为其工具的可执行程序。在Windows系统上，它们都有`.exe`扩展名；在Linux和macOS上，它们只显示名称。在本章中，我们将讨论以下工具：
- en: '`jar`'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jar`'
- en: '`java`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java`'
- en: '`javadoc`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javadoc`'
- en: '`jlink`'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jlink`'
- en: '`jmod`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jmod`'
- en: '`jpackage`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jpackage`'
- en: '`jshell`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jshell`'
- en: '`javaw`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`javaw`'
- en: These are tools we will be using in the coming chapters. See the tool specification
    link in the *Further reading* section for details on all the tools included in
    the JDK.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在接下来的章节中使用的工具。请参阅*进一步阅读*部分的工具规范链接，以了解JDK中包含的所有工具的详细信息。
- en: 'We have divided these tools into the following categories:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将这些工具分为以下类别：
- en: Compiling and executing a Java program
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译和执行Java程序
- en: Assembling and packaging a Java application
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组装和打包Java应用程序
- en: Documenting Java classes
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录Java类文档
- en: '**Read, Evaluate, Print, and Loop** (**REPL**)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**读取、评估、打印和循环**（**REPL**）'
- en: Let’s look at each of these categories.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一查看这些类别。
- en: Compiling and executing a Java program
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译和执行Java程序
- en: These are the tools that take us from source code to running a Java program.
    Some important tools are as follows.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是将我们从源代码带到运行Java程序的工具。一些重要的工具如下。
- en: javac
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: javac
- en: This is the Java compiler. Its role is to compile a Java source code file that
    ends in `.java` into a bytecode file that ends in `.class`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Java编译器。它的作用是将以`.java`结尾的Java源代码文件编译成以`.class`结尾的字节码文件。
- en: java or javaw.exe
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: java或javaw.exe
- en: This is the tool that starts up the JVM process and then executes the bytecode
    file in the process. When using `java`, a console window will open and remain
    open until the JVM process ends. The `javaw` tool also starts up the JVM and executes
    a bytecode program. It will not open a console.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是启动JVM进程并执行该进程中的字节码文件的工具。当使用`java`时，将打开一个控制台窗口，并保持打开状态，直到JVM进程结束。`javaw`工具也会启动JVM并执行字节码程序。它不会打开控制台。
- en: Windows users typically do not expect a console to open as they may have never
    seen one or interacted with one. If you wish to create a Windows shortcut to run
    a Java program, you will use `javaw.exe program.class`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户通常不期望打开控制台，因为他们可能从未见过或与之交互过。如果您想创建一个Windows快捷方式来运行Java程序，您将使用`javaw.exe
    program.class`。
- en: We will examine these three commands in [*Chapter 2*](B19088_02.xhtml#_idTextAnchor043),
    *Code, Compile, and Execute*.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Assembling and packaging a Java application
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Java program can be constructed of hundreds, thousands, or even more `.class`
    files. In these cases, it is necessary to assemble all these files along with
    any supporting files (such as images) into a single file. Some of the tools that
    do so are the following.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: jar
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Java program or library usually consists of multiple `.class` files. To simplify
    the delivery of such programs, the `jar` tool combines all the class files of
    an application or library into a single file that uses ZIP compression and has
    the `.jar` extension. A `.jar` file can be designated as executable. In this case,
    you already have a Java JDK or JRE installed. We will see how this tool is used
    in [*Chapter 2*](B19088_02.xhtml#_idTextAnchor043),*Code, Compile, and Execute*.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: jmod and jlink
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Java 9 introduced the concept of modular Java, an approach to assembling Java
    applications that uses a new format for combining class files called `.jmod` files.
    These files are like `.jar` files in that they are ZIP compressed files. The `jmod`
    tool creates `.jmod` files.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Until Java 9 came along, a single file called `rt.jar` held all the Java libraries.
    Starting with Java 9, the Java libraries exist as individual `.jmod` files. Java
    packages the JVM file as a `.jmod` file. What this means to a developer is that
    it is possible to distribute Java applications that include the JVM and only those
    components of Java that must be available to execute your program. It is now unnecessary
    to have the JDK or JRE pre-installed as all that you need to execute the program
    is in the archive. You still need the `jar` tool to construct such an executable
    as you cannot execute `.jmod` files. We will see how these two tools are used
    in [*Chapter 16*](B19088_16.xhtml#_idTextAnchor315), *Deploying Java in Standalone
    Packages and Containers*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: jpackage
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `jpackage` tool creates native applications that hold a Java application
    and a Java runtime. It is used with either `.jar` or `.jmod` files. The output
    is an executable file, such as `.msi` or `.exe` for Windows, or a `.dmg` file
    for a macOS system. We will see how this tool is used in [*Chapter 16*](B19088_16.xhtml#_idTextAnchor315)*,*
    *Deploying Java in Standalone Packages and Containers*.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Documenting Java classes
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Having carefully documented your code, Java has a tool for gathering all your
    comments for easy access for other developers who may use your code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: javadoc
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Documenting code has always been an issue in almost every language. Java takes
    a unique approach to encouraging documentation. If you comment your code in a
    specific format (which we will examine in [*Chapter 4*](B19088_04.xhtml#_idTextAnchor086),
    *Language Fundamentals – Data Types and Variables*), the `javadoc` tool will generate
    an HTML page for every class that you create. On this page, you will find all
    public members of the class presented.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Look at the `javadoc` page for the `ArrayList` class at https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ArrayList.html.
    Everything you see on this web page was written into the source code file that
    was then converted to the HTML page you are looking at. We will examine this tool
    in [*Chapter 11*](B19088_11.xhtml#_idTextAnchor232)*,* *Documentation and Logging*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: REPL
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A REPL tool is one that supports the execution of code, one line at a time.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: jshell
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `jshell` tool allows you to write and execute individual Java statements
    without the need for the usual decorations of classes and methods. This can be
    quite useful for learning Java. It can execute code line by line as you write
    it. We will examine `jshell` in [*Chapter 2*](B19088_02.xhtml#_idTextAnchor043)*,*
    *Code, Compile, and Execute*.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned a little about Java’s history, how it is licensed,
    and why there are so many distributions and versions of Java. You now understand
    Java as a development tool and know how to select a Java distribution and version.
    We saw how we could install Java on our computers regardless of the OS. In [*Chapter
    12*](B19088_12.xhtml#_idTextAnchor244), *BigDecimal and Unit Testing*, we will
    also examine how to install Java in a Docker container. We wrapped up the chapter
    with a look at nine Java tools that come with the JDK; we will see them again
    in later chapters. We will learn more about these tools in those chapters.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B19088_02.xhtml#_idTextAnchor043), *Code, Compile, and Execute*,
    we will learn how we write, compile, link, and execute Java programs. Coding with
    a plain text editor, `jshell`, and with an **integrated development environment**
    (**IDE**) will be our focus.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**How Java got its name**: [https://www.quora.com/How-Java-got-its-name/answer/Ashok-Kumar-1682](https://www.quora.com/How-Java-got-its-name/answer/Ashok-Kumar-1682)'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GNU General Public License, version 2, with the Classpath Exception**: [https://openjdk.java.net/legal/gplv2+ce.html](https://openjdk.java.net/legal/gplv2+ce.html)'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Oracle No-Fee Terms and Conditions (NFTC)**: [https://www.oracle.com/downloads/licenses/no-fee-license.html](https://www.oracle.com/downloads/licenses/no-fee-license.html)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java® Development Kit Version 17 Tool Specifications**: [https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html](https://docs.oracle.com/en/java/javase/17/docs/specs/man/index.html)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JVM Garbage Collectors**: [https://www.baeldung.com/jvm-garbage-collectors](https://www.baeldung.com/jvm-garbage-collectors)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JVM垃圾回收器**: [https://www.baeldung.com/jvm-garbage-collectors](https://www.baeldung.com/jvm-garbage-collectors)'
