["```java\nclass Logger {\n  def log(message: String, severity: String): Unit = {\n    System.out.println(s\"${severity.toUpperCase}: $message\")\n  }\n}\n```", "```java\ntrait Log {\n  def info(message: String)\n  def debug(message: String)\n  def warning(message: String)\n  def error(message: String)\n}\n```", "```java\nclass AppLogger extends Logger with Log {\n  override def info(message: String): Unit = log(message, \"info\")\n\n  override def warning(message: String): Unit = log(message, \"warning\")\n\n  override def error(message: String): Unit = log(message, \"error\")\n\n  override def debug(message: String): Unit = log(message, \"debug\")\n}\n```", "```java\nobject AdapterExample {\n  def main(args: Array[String]): Unit = {\n    val logger = new AppLogger\n    logger.info(\"This is an info message.\")\n    logger.debug(\"Debug something here.\")\n    logger.error(\"Show an error message.\")\n    logger.warning(\"About to finish.\")\n    logger.info(\"Bye!\")\n  }\n}\n```", "```java\nclass FinalAppLogger extends Log {\n  private val logger = new FinalLogger\n\n  override def info(message: String): Unit = logger.log(message, \"info\")\n\n  override def warning(message: String): Unit = logger.log(message,\n   \"warning\")\n\n  override def error(message: String): Unit = logger.log(message, \"error\")\n\n  override def debug(message: String): Unit = logger.log(message, \"debug\")\n}\n```", "```java\npackage object adapter {\n\n  implicit class FinalAppLoggerImplicit(logger: FinalLogger) extends Log {\n\n    override def info(message: String): Unit = logger.log(message, \"info\")\n\n    override def warning(message: String): Unit = logger.log(message,\n     \"warning\")\n\n    override def error(message: String): Unit = logger.log(message,\n     \"error\")\n\n    override def debug(message: String): Unit = logger.log(message,\n     \"debug\")\n  }\n}\n```", "```java\nobject AdapterImplicitExample {\n  def main(args: Array[String]): Unit = {\n    val logger: Log = new FinalLogger\n    logger.info(\"This is an info message.\")\n    logger.debug(\"Debug something here.\")\n    logger.error(\"Show an error message.\")\n    logger.warning(\"About to finish.\")\n    logger.info(\"Bye!\")\n  }\n}\n```", "```java\ntrait InputReader {\n  def readLines(): Stream[String]\n}\n```", "```java\nclass AdvancedInputReader(reader: BufferedReader) extends InputReader {\n  override def readLines(): Stream[String] =\n    reader.lines().iterator().asScala.toStream\n}\n```", "```java\nabstract class InputReaderDecorator(inputReader: InputReader) extends InputReader {\n  override def readLines(): Stream[String] =\n    inputReader.readLines()\n}\n```", "```java\nclass CapitalizedInputReader(inputReader: InputReader) extends InputReaderDecorator(inputReader) {\n  override def readLines(): Stream[String] =\n    super.readLines().map(_.toUpperCase)\n}\n```", "```java\nclass CompressingInputReader(inputReader: InputReader) extends InputReaderDecorator(inputReader) with LazyLogging {\n  override def readLines(): Stream[String] = super.readLines().map {\n    case line =>\n      val text = line.getBytes(Charset.forName(\"UTF-8\"))\n      logger.info(\"Length before compression: {}\", text.length.toString)\n      val output = new ByteArrayOutputStream()\n      val compressor = new GZIPOutputStream(output)\n      try {\n        compressor.write(text, 0, text.length)\n        val outputByteArray = output.toByteArray\n        logger.info(\"Length after compression: {}\",\n         outputByteArray.length.toString)\n        new String(outputByteArray, Charset.forName(\"UTF-8\"))\n      } finally {\n        compressor.close()\n        output.close()\n      }\n  }\n}\n```", "```java\nclass Base64EncoderInputReader(inputReader: InputReader) extends InputReaderDecorator(inputReader) {\n  override def readLines(): Stream[String] = super.readLines().map {\n    case line => Base64.getEncoder.encodeToString(line.getBytes(Charset.forName(\"UTF-8\")))\n  }\n}\n```", "```java\nobject DecoratorExample {\n  def main(args: Array[String]): Unit = {\n    val stream = new BufferedReader(\n      new InputStreamReader(\n        new BufferedInputStream(this.getClass.getResourceAsStream(\"data.txt\"))\n      )\n    )\n    try {\n      val reader = new CapitalizedInputReader(new AdvancedInputReader(stream))\n      reader.readLines().foreach(println)\n    } finally {\n      stream.close()\n    }\n  }\n}\n```", "```java\nthis is a data file\nwhich contains lines\nand those lines will be\nmanipulated by our stream reader.\n```", "```java\nobject DecoratorExampleBig {\n  def main(args: Array[String]): Unit = {\n    val stream = new BufferedReader(\n      new InputStreamReader(\n        new BufferedInputStream(this.getClass.getResourceAsStream(\"data.txt\"))\n      )\n    )\n    try {\n      val reader = new CompressingInputReader(\n        new Base64EncoderInputReader(\n          new CapitalizedInputReader(\n            new AdvancedInputReader(stream)\n          )\n        )\n      )\n      reader.readLines().foreach(println)\n    } finally {\n      stream.close()\n    }\n  }\n}\n```", "```java\ntrait CapitalizedInputReaderTrait extends InputReader {\n  abstract override def readLines(): Stream[String] =\n    super.readLines().map(_.toUpperCase)\n}\n```", "```java\ntrait CompressingInputReaderTrait extends InputReader with LazyLogging {\n  abstract override def readLines(): Stream[String] =\n    super.readLines().map {\n      case line =>\n        val text = line.getBytes(Charset.forName(\"UTF-8\"))\n        logger.info(\"Length before compression: {}\", text.length.toString)\n        val output = new ByteArrayOutputStream()\n        val compressor = new GZIPOutputStream(output)\n        try {\n          compressor.write(text, 0, text.length)\n          val outputByteArray = output.toByteArray\n          logger.info(\"Length after compression: {}\",\n           outputByteArray.length.toString)\n          new String(outputByteArray, Charset.forName(\"UTF-8\"))\n        } finally {\n          compressor.close()\n          output.close()\n        }\n    }\n}\n```", "```java\ntrait Base64EncoderInputReaderTrait extends InputReader {\n  abstract override def readLines(): Stream[String] =\n    super.readLines().map {\n      case line =>\n        Base64.getEncoder.encodeToString(line.getBytes(Charset.forName(\"UTF-8\")))\n    }\n}\n```", "```java\nobject StackableTraitsExample {\n  def main(args: Array[String]): Unit = {\n    val stream = new BufferedReader(\n      new InputStreamReader(\n        new BufferedInputStream(this.getClass.getResourceAsStream(\"data.txt\"))\n      )\n    )\n    try {\n      val reader = new AdvancedInputReader(stream) with CapitalizedInputReaderTrait\n      reader.readLines().foreach(println)\n    } finally {\n      stream.close()\n    }\n  }\n}\n```", "```java\nobject StackableTraitsBigExample {\n  def main(args: Array[String]): Unit = {\n    val stream = new BufferedReader(\n      new InputStreamReader(\n        new BufferedInputStream(this.getClass.getResourceAsStream(\"data.txt\"))\n      )\n    )\n    try {\n      val reader = new AdvancedInputReader(stream) with CapitalizedInputReaderTrait \n        with Base64EncoderInputReaderTrait \n        with CompressingInputReaderTrait\n      reader.readLines().foreach(println)\n    } finally {\n      stream.close()\n    }\n  }\n}\n```", "```java\ntrait Hasher {\n  def hash(data: String): String\n\n  protected def getDigest(algorithm: String, data: String) = {\n    val crypt = MessageDigest.getInstance(algorithm)\n    crypt.reset()\n    crypt.update(data.getBytes(\"UTF-8\"))\n    crypt\n  }\n}\n```", "```java\nclass Sha1Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"SHA-1\", data).digest()))\n}\n\nclass Sha256Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"SHA-256\", data).digest()))\n}\n\nclass Md5Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"MD5\", data).digest()))\n}\n```", "```java\nabstract class PasswordConverter(hasher: Hasher) {\n  def convert(password: String): String\n}\n```", "```java\nclass SimplePasswordConverter(hasher: Hasher) extends PasswordConverter(hasher) {\n  override def convert(password: String): String =\n    hasher.hash(password)\n}\n\nclass SaltedPasswordConverter(salt: String, hasher: Hasher) extends PasswordConverter(hasher) {\n  override def convert(password: String): String =\n    hasher.hash(s\"${salt}:${password}\")\n}\n```", "```java\nobject BridgeExample {\n  def main(args: Array[String]): Unit = {\n    val p1 = new SimplePasswordConverter(new Sha256Hasher)\n    val p2 = new SimplePasswordConverter(new Md5Hasher)\n    val p3 = new SaltedPasswordConverter(\"8jsdf32T^$%\", new Sha1Hasher)\n    val p4 = new SaltedPasswordConverter(\"8jsdf32T^$%\", new Sha256Hasher)\n    System.out.println(s\"'password' in SHA-256 is:\n     ${p1.convert (\"password\")}\")\n    System.out.println(s\"'1234567890' in MD5 is:\n     ${p2.convert (\"1234567890\")}\")\n    System.out.println(s\"'password' in salted SHA-1 is:\n     ${p3.convert (\"password\")}\")\n    System.out.println(s\"'password' in salted SHA-256 is:\n     ${p4.convert (\"password\")}\")\n  }\n}\n```", "```java\ntrait Sha1Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"SHA-1\", data).digest()))\n}\n\ntrait Sha256Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"SHA-256\", data).digest()))\n}\n\ntrait Md5Hasher extends Hasher {\n  override def hash(data: String): String = \n    new String(Hex.encodeHex(getDigest(\"MD5\", data).digest()))\n}\n```", "```java\nabstract class PasswordConverterBase {\n  self: Hasher =>\n  def convert(password: String): String\n}\n```", "```java\nclass SimplePasswordConverterScala extends PasswordConverterBase {\n  self: Hasher =>\n  override def convert(password: String): String = hash(password)\n}\n\nclass SaltedPasswordConverterScala(salt: String) extends PasswordConverterBase {\n  self: Hasher =>\n  override def convert(password: String): String =\n    hash(s\"${salt}:${password}\")\n}\n```", "```java\nobject ScalaBridgeExample {\n  def main(args: Array[String]): Unit = {\n    val p1 = new SimplePasswordConverterScala with Sha256Hasher\n    val p2 = new SimplePasswordConverterScala with Md5Hasher\n    val p3 = new SaltedPasswordConverterScala(\"8jsdf32T^$%\") with\n     Sha1Hasher\n    val p4 = new SaltedPasswordConverterScala(\"8jsdf32T^$%\") with\n     Sha256Hasher\n    System.out.println(s\"'password' in SHA-256 is:\n     ${p1.convert(\"password\")}\")\n    System.out.println(s\"'1234567890' in MD5 is:\n     ${p2.convert(\"1234567890\")}\")\n    System.out.println(s\"'password' in salted SHA-1 is:\n     ${p3.convert(\"password\")}\")\n    System.out.println(s\"'password' in salted SHA-256 is:\n     ${p4.convert(\"password\")}\")\n  }\n}\n```", "```java\ntrait Node {\n  def print(prefix: String): Unit\n}\n```", "```java\nclass Leaf(data: String) extends Node {\n  override def print(prefix: String): Unit =\n    System.out.println(s\"${prefix}${data}\")\n}\n\nclass Tree extends Node {\n  private val children = ListBuffer.empty[Node]\n\n  override def print(prefix: String): Unit = {\n    System.out.println(s\"${prefix}(\")\n    children.foreach(_.print(s\"${prefix}${prefix}\"))\n    System.out.println(s\"${prefix})\")\n  }\n\n  def add(child: Node): Unit = {\n    children += child\n  }\n\n  def remove(): Unit = {\n    if (children.nonEmpty) {\n      children.remove(0)\n    }\n  }\n}\n```", "```java\nobject CompositeExample {\n  def main(args: Array[String]): Unit = {\n    val tree = new Tree\n    tree.add(new Leaf(\"leaf 1\"))\n    val subtree1 = new Tree\n    subtree1.add(new Leaf(\"leaf 2\"))\n    val subtree2 = new Tree\n    subtree2.add(new Leaf(\"leaf 3\"))\n    subtree2.add(new Leaf(\"leaf 4\"))\n    subtree1.add(subtree2)\n    tree.add(subtree1)\n    val subtree3 = new Tree\n    val subtree4 = new Tree\n    subtree4.add(new Leaf(\"leaf 5\"))\n    subtree4.add(new Leaf(\"leaf 6\"))\n    subtree3.add(subtree4)\n    tree.add(subtree3)\n    tree.print(\"-\")\n  }\n}\n```", "```java\ntrait DataDownloader extends LazyLogging {\n  def download(url: String): Array[Byte] = {\n    logger.info(\"Downloading from: {}\", url)\n    Thread.sleep(5000)\n    // {\n    // \"name\": \"Ivan\",\n    // \"age\": 26\n    // }\n    // the string below is the Base64 encoded Json above.\n    \"ew0KICAgICJuYW1lIjogIkl2YW4iLA0KICAgICJhZ2UiOiAyNg0KfQ==\".getBytes\n  }\n}\n```", "```java\ntrait DataDecoder {\n  def decode(data: Array[Byte]): String = new String(Base64.getDecoder.decode(data), \"UTF-8\")\n}\n```", "```java\ntrait DataDeserializer {\n  implicit val formats = DefaultFormats\n\n  def parse[T](data: String)(implicit m: Manifest[T]): T =\n    JsonMethods.parse(StringInput(data)).extract[T]\n}\n```", "```java\nclass DataReader extends DataDownloader with DataDecoder with DataDeserializer {\n  def readPerson(url: String): Person = {\n    val data = download(url)\n    val json = decode(data)\n    parse[Person](json)\n  }\n}\n```", "```java\nobject FacadeExample {\n  def main(args: Array[String]): Unit = {\n    val reader = new DataReader\n    System.out.println(s\"We just read the following person:\n     ${reader.readPerson(\"https://www.ivan-nikolov.com/\")}\")\n  }\n}\n```", "```java\nsealed abstract class Color\ncase object Red extends Color\ncase object Green extends Color\ncase object Blue extends Color\ncase object Yellow extends Color\ncase object Magenta extends Color\n```", "```java\nclass Circle(color: Color) {\n  System.out.println(s\"Creating a circle with $color color.\")\n\n  override def toString(): String = s\"Circle($color)\"\n}\n```", "```java\nimport scala.collection.mutable.Map\n\nobject Circle {\n  val cache = Map.empty[Color, Circle]\n\n  def apply(color: Color): Circle = cache.getOrElseUpdate(color,\n   new Circle(color))\n\n  def circlesCreated(): Int = cache.size\n}\n```", "```java\nCircle(Green)\n```", "```java\nimport scala.collection.mutable.ListBuffer\n\nclass Graphic {\n  val items = ListBuffer.empty[(Int, Int, Double, Circle)]\n\n  def addCircle(x: Int, y: Int, radius: Double, circle: Circle): Unit = {\n    items += ((x, y, radius, circle))\n  }\n\n  def draw(): Unit = {\n    items.foreach {\n      case (x, y, radius, circle) =>\n        System.out.println(s\"Drawing a circle at ($x, $y) with radius\n         $radius: $circle\")\n    }\n  }\n}\n```", "```java\nobject FlyweightExample {\n  def main(args: Array[String]): Unit = {\n    val graphic = new Graphic\n    graphic.addCircle(1, 1, 1.0, Circle(Green))\n    graphic.addCircle(1, 2, 1.0, Circle(Red))\n    graphic.addCircle(2, 1, 1.0, Circle(Blue))\n    graphic.addCircle(2, 2, 1.0, Circle(Green))\n    graphic.addCircle(2, 3, 1.0, Circle(Yellow))\n    graphic.addCircle(3, 2, 1.0, Circle(Magenta))\n    graphic.addCircle(3, 3, 1.0, Circle(Blue))\n    graphic.addCircle(4, 3, 1.0, Circle(Blue))\n    graphic.addCircle(3, 4, 1.0, Circle(Yellow))\n    graphic.addCircle(4, 4, 1.0, Circle(Red))\n    graphic.draw()\n    System.out.println(s\"Total number of circle objects created:\n     ${Circle.circlesCreated()}\")\n  }\n}\n```", "```java\ntrait FileReader {\n  def readFileContents(): String\n}\n```", "```java\nclass FileReaderReal(filename: String) extends FileReader {\n  val contents = {\n    val stream = this.getClass.getResourceAsStream(filename)\n    val reader = new BufferedReader(\n      new InputStreamReader(\n        stream\n      )\n    )\n    try {\n      reader.lines().iterator().asScala.mkString\n      (System.getProperty(\"line.separator\"))\n    } finally {\n      reader.close()\n      stream.close()\n    }\n  }\n  System.out.println(s\"Finished reading the actual file: $filename\")\n\n  override def readFileContents(): String = contents\n}\n```", "```java\nclass FileReaderProxy(filename: String) extends FileReader {\n  private var fileReader: FileReaderReal = null\n\n  override def readFileContents(): String = {\n    if (fileReader == null) {\n      fileReader = new FileReaderReal(filename)\n    }\n    fileReader.readFileContents()\n  }\n}\n```", "```java\nobject ProxyExample {\n  def main(args: Array[String]): Unit = {\n    val fileMap = Map(\n      \"file1.txt\" -> new FileReaderProxy(\"file1.txt\"),\n      \"file2.txt\" -> new FileReaderProxy(\"file2.txt\"),\n      \"file3.txt\" -> new FileReaderProxy(\"file3.txt\"),\n      \"file4.txt\" -> new FileReaderReal(\"file1.txt\")\n    )\n    System.out.println(\"Created the map. You should have seen\n     file1.txt read because it wasn't used in a proxy.\")\n    System.out.println(s\"Reading file1.txt from the proxy:\n     ${fileMap(\"file1.txt\").readFileContents()}\")\n    System.out.println(s\"Reading file3.txt from the proxy:\n     ${fileMap(\"file3.txt\").readFileContents()}\")\n  }\n}\n```"]