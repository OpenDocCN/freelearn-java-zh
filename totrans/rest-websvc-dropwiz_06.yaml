- en: Chapter 6. Using a Database
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。使用数据库
- en: Our application is growing steadily. We now need a place to store the contacts
    we are going to manage, and an efficient way to do so. We will use the MySQL server,
    whose installation was outlined in the first chapter of the book, for our data
    storage needs. Dropwizard provides everything we will need to interact with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序正在稳步增长。我们现在需要一个地方来存储我们将要管理的联系信息，以及一个高效的方式来做到这一点。我们将使用 MySQL 服务器，其安装已在本书的第一章中概述，来满足我们的数据存储需求。Dropwizard
    提供了我们与之交互所需的一切。
- en: Preparing the database
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备数据库
- en: It is time to actually store and retrieve data with our application. We are
    going to create a connection between our application and a MySQL database.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候使用我们的应用程序实际存储和检索数据了。我们将创建应用程序与 MySQL 数据库之间的连接。
- en: We will need an actual database to connect to and query. Since we have MySQL
    installed, we can also use the `mysql` command-line client in order to create
    a database and some tables in it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个实际的数据库来连接和查询。由于我们已经安装了 MySQL，我们也可以使用 `mysql` 命令行客户端来创建数据库并在其中创建一些表。
- en: Getting ready
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Start the `mysql` client by executing the following command in your terminal:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在终端中执行以下命令来启动 `mysql` 客户端：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As shown in the following screenshot, the MySQL shell will then prompt you
    to provide your password, which is the password of the MySQL root user that you
    set during the installation of MySQL:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，MySQL 壳将提示您提供密码，这是您在安装 MySQL 时设置的 MySQL root 用户的密码：
- en: '![Getting ready](img/9530OS_06_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![准备工作](img/9530OS_06_01.jpg)'
- en: How to do it…
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s follow the next steps in order to prepare our application''s database:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤准备我们应用程序的数据库：
- en: 'Create the database phonebook by running the following query:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行以下查询来创建数据库 phonebook：
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will need an additional MySQL user with full rights to the newly created
    database. Create the user and grant appropriate access rights with the following
    commands:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要一个额外的 MySQL 用户，具有对新创建的数据库的完全访问权限。使用以下命令创建用户并授予适当的访问权限：
- en: '[PRE2]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Select the `phonebook` database with the `USE` command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `USE` 命令选择 `phonebook` 数据库：
- en: '[PRE3]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Create the contact table in order to store some contacts.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个联系表来存储一些联系信息。
- en: '[PRE4]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add some test data in the contact table:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在联系表中添加一些测试数据：
- en: '[PRE5]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have just set up our database. With the queries we ran, we created a database
    along with a database user and a table to hold contact-related information. Our
    application will be updated in order to store and retrieve information to and
    from this table.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚设置了数据库。通过我们运行的查询，我们创建了一个数据库、一个数据库用户以及一个用于存储联系信息的表。我们的应用程序将更新以存储和检索此表中的信息。
- en: Interacting with the database
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数据库交互
- en: Now we have a database and data in place. However, in order to be able to connect
    to the database, we need to include the `mysql jdbc` connector in the project.
    Also, we will need the `dropwizard-jdbi` module that will allow us to create a
    database connection and **Data Access Objects** (**DAO**) through which we will
    query the database, making use of the API provided by the JDBI project ([http://jdbi.org/](http://jdbi.org/)).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了数据库和数据。然而，为了能够连接到数据库，我们需要在项目中包含 `mysql jdbc` 连接器。此外，我们还需要 `dropwizard-jdbi`
    模块，它将允许我们创建数据库连接和 **数据访问对象** (**DAO**)，通过它我们将查询数据库，利用 JDBI 项目提供的 API ([http://jdbi.org/](http://jdbi.org/))。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s see what is needed in order to achieve this. First, add the following
    dependencies in `pom.xml` within the `<dependencies>` section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为了实现这一点需要什么。首先，在 `pom.xml` 的 `<dependencies>` 部分中添加以下依赖项：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We are now ready to proceed and update our application. We are going to use
    JDBI's SQL object API mapping methods to predefine the SQL statements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已准备好继续并更新我们的应用程序。我们将使用 JDBI 的 SQL 对象 API 映射方法来预定义 SQL 语句。
- en: How to do it…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s see how to connect and interact with the database through our application
    by following the next steps:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何通过以下步骤通过我们的应用程序连接和交互数据库：
- en: 'Create a new package, `com.dwbook.phonebook.dao`, and a `ContactDAO` interface
    in it with the following code:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的包，`com.dwbook.phonebook.dao`，并在其中创建一个 `ContactDAO` 接口，代码如下：
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Add the `#getContactById()`method, which will allow us to query the database
    and retrieve a list of contacts or a specific contact when its ID is given. Use
    the `@SqlQuery` annotation to specify the SQL query that will be executed when
    the method is called. You will need to import `org.skife.jdbi.v2.sqlobject.*`
    and `com.dwbook.phonebook.representations.Contact`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a `com.dwbook.phonebook.dao.mappers` package and the `ContactMapper`
    class that implements the map method, as shown in the following code snippet.
    Mapper classes facilitate the mapping of a `resultset` database row to an object.
    You will need to import `java.sql.ResultSet`, `java.sql.SQLException`, `org.skife.jdbi.v2.StatementContext`,
    `org.skife.jdbi.v2.tweak.ResultSetMapper`, and `com.dwbook.phonebook.representations.Contact`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In `ContactDAO`, register your mapper with the `#getContactById()` method by
    adding the `@Mapper` annotation to it (before the `@SqlQuery` annotation). Import
    the `com.dwbook.phonebook.dao.mappers.ContactMapper` and `org.skife.jdbi.v2.sqlobject.customizers.Mapper`
    classes.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `config.yaml` configuration file, add the section database consisting
    of the minimum set of properties required for establishing a database connection
    (indented according to the `YAML` syntax).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add the database property in the `PhonebookConfiguration` class, and create
    a getter method for it. Import the `io.dropwizard.db.DataSourceFactory` class
    first.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Modify the `run` method in the `App` class in order to create a DBIFactory class
    that will be used to build a `DBI` instance, which we will then pass as a parameter
    to `ContactResource`. You will need to import `org.skife.jdbi.v2.DBI` and `io.dropwizard.jdbi.DBIFactory`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the previous step, we passed the `jdbi` instance as a parameter to the `ContactResource`
    constructor. However, the constructor `ContactResource(DBI)` does not exist (yet),
    so we need to create it. We will add a private final `ContactDAO` member in our
    resource class using the `onDemand` method and use JDBI to instantiate it. You
    will also need to add the necessary imports for `DBI` and `ContactDAO`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Modify the `ContactResource#getContact()` method class using the `contactDao`
    object so it returns an actual contact from the database.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Rebuild and run the application, providing the updated configuration file as
    an argument.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your browser and go to `http://localho``st:8080/contact/1`. You will see
    a JSON representation of the first row we inserted in the contact table, the one
    having `id` equal to `1`, that is, `John Doe`. Take a look at the following screenshot
    which outlines this:![How to do it…](img/9530OS_06_02.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Respectively, the following screenshot shows the output for `http://localhost:8080/contact/2`:'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/9530OS_06_03.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, let's add the methods for creating, updating, and deleting contacts in
    our DAO. For inserting new entries, add the `#createContact()` method.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that since we are updating the database and not querying it (that is, retrieving
    information), we use the `@SqlUpdate` annotation for the SQL query instead of
    the `@SqlQuery` annotation we used in the `#getContact()` method. Also, the `@GetGeneratedKeys`
    annotation is used in order to retrieve the value of the primary key of the newly
    inserted row; in this case, the value of the `id` field.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For updating existing entries, add the `#updateContact()` method:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In order to delete existing entries, add the `#deleteContact()` method:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have the database methods in place, let''s use them in the `Resource`
    class so that we actually insert, update, and delete contacts. Modify the `ContactResource#createContact()`
    method in order to insert the new contact in the database, retrieve its `id`,
    and use it to construct its URI, passing it as a parameter to the `Response#created()`
    method. For this, we will need to import `java.net.URI and java.net.URISyntaxException`
    first:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In a similar way, update the `ContactResource#deleteContact()` method so that
    the contacts can indeed be deleted:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, let''s also update the `ContactResource#updateContact()` method so
    that our application can update existing contacts while handling the relevant
    HTTP requests:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Thanks to JDBI, our phonebook application can now interact with a database,
    retrieving, storing, updating, and deleting contacts.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a new contact by performing an HTTP POST request with `curl`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The contact is created, and the value of the inserted row''s primary key, that
    is, the contact `id,` is `174`, as you can see (the `Location` response header)
    in the following screenshot:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/9530OS_06_04.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
- en: JDBI's SQL Object API simplifies the creation of `DAO`. We created the `DAO`
    interfaces on which we can map plain, parameterized SQL queries to specific methods
    using the `@SqlQuery` annotation; note that apart from the object mapper, no additional
    implementation is needed.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Since we are retrieving data from the database and returning a `Contact` instance,
    we needed to create a `Mapper` class, which is a class that implements the `org.skife.jdbi.v2.tweak.ResultSetMapper<T>`
    interface for the `Contact` class. Its implementation was fairly simple and straightforward.
    We created a `Contact` object with the values we got from the database `ResultSet`
    object using the `#getLong()` and `#getString()` methods and providing the column
    name.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: We used `jdbi` to create our `DAO` instances within our resource class using
    the `DBI#onDemand()` method. However, in order to do that, we had to create a
    `DBI` factory and build the `DBI` instance prior to registering our resources.
    Again, this was pretty simple, and required minor modifications in the `App#run()`
    method.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: The `DBI` factory requires the database connection settings in order to build
    the `DBI` instance. Going one step back, we had our configuration class updated
    to read and expose the `DatabaseConfiguration` settings, which were declared in
    the database section of the applications configuration file, that is, `config.yaml`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`DBI`工厂需要数据库连接设置来构建`DBI`实例。退一步说，我们的配置类已经更新，以读取和公开`DatabaseConfiguration`设置，这些设置在应用程序配置文件的数据库部分声明，即`config.yaml`。'
- en: There's more…
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: JDBI identifies itself as an SQL convenience library for Java. We used the JDBI
    SQL Object API where a particular method is mapped to a specific SQL statement.
    However, this is not the only way of using JDBI to interact with a database. JDBI
    exposes another API too, that is, the fluent style API.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: JDBI将自己标识为Java的SQL便捷库。我们使用了JDBI SQL对象API，其中特定方法映射到特定的SQL语句。然而，这并不是使用JDBI与数据库交互的唯一方式。JDBI还公开了另一个API，即流畅风格API。
- en: The JDBI fluent style API
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JDBI流畅风格API
- en: The fluent style API allows us to open and use a database handle to create and
    execute SQL queries on demand on the fly, instead of using the predefined SQL
    statements that the SQL Object API utilizes.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 流畅风格API允许我们打开并使用数据库句柄，在需要时即时创建和执行SQL查询，而不是使用SQL对象API使用的预定义SQL语句。
- en: Generally, the type of API that you should use depends on your personal taste,
    and you can even mix both APIs together.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你应该使用的API类型取决于你的个人喜好，你甚至可以将两种API混合使用。
- en: The @MapResultAsBean annotation
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`@MapResultAsBean`注解'
- en: In this example, we have implemented a mapper and used the `@Mapper` annotation
    in order to map the result of an SQL query to a `Contact` instance. An alternative
    approach would be the use of the `MapResultAsBean` annotation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们实现了一个映射器，并使用`@Mapper`注解将SQL查询的结果映射到`Contact`实例。另一种方法可以使用`MapResultAsBean`注解。
- en: '[PRE23]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: By annotating `#getContactById()` in this example, we map the result of the
    SQL query directly to a `Contact` instance, without needing to implement a custom
    mapper. In order for this to work though, the `Contact` class should be updated
    with setters (that is, `setFirstName(String firstName){ .. }`). Due to this, the
    final keyword will have to be removed from the declaration of each member variable.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，通过注解`#getContactById()`，我们将SQL查询的结果直接映射到`Contact`实例，而不需要实现自定义映射器。不过，为了使这可行，`Contact`类应该更新为设置器（即`setFirstName(String
    firstName){ .. }`）。因此，必须从每个成员变量的声明中移除`final`关键字。
