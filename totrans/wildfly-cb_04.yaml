- en: Chapter 4. Managing the Logging Subsystem with the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a file-handler logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a periodic-rotating file-handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a size-rotating file-handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining asynchronous handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a syslog-handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing and reading log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a different logging implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The logging subsystem is where you can configure the information statements
    of WildFly and your application, for debugging and auditing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: WildFly comes with a default configuration, which can be found in the `configuration`
    folder of both the standalone and domain directories. The default configuration
    automatically logs the information on the console and on a file named `server.log`.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you will learn in this chapter, WildFly has seven different handlers to
    help you persist with your application logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Console**: Writes application logs to the standard output'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File**: Writes application logs to a file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Periodic**: Writes application logs to a file by rotating it on the basis
    of time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Size**: Writes application logs to a file by rotating it on the basis of
    size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Async**: Wraps one or more handler to give asynchronous behavior'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom**: Lets you use your own handler, as long as it extends the `java.util.logging.Handler`
    class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Syslog**: Writes application logs to the default OS logger'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the operation mode of your WildFly, you have different settings
    concerning the default log file paths.
  prefs: []
  type: TYPE_NORMAL
- en: Domain mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a managed domain, we have two types of log files: Controller and server
    logs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Starting with the default configuration of `domain.xml`, both the domain controller
    components and the servers are located on the same host:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Process | Log File |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `[Host Controller]` | `jboss.domain.log.dir/host-controller.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `[Process Controller]` | `jboss.domain.log.dir/process-controller.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `[Server One]` | `jboss.domain.servers.dir/server-one/log/server.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `[Server Two]` | `jboss.domain.servers.dir/server-two/log/server.log` |'
  prefs: []
  type: TYPE_TB
- en: '| `[Server Three]` | `jboss.domain.servers.dir/server-three/log/server.log`
    |'
  prefs: []
  type: TYPE_TB
- en: 'If you want to change one of the previously mentioned properties, you can set
    a different value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Standalone mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default log files for a standalone server is in the log subdirectory of
    the `jboss.server.base.dir` folder of the WildFly home:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Process | Log File |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `[Server]` | `jboss.server.log.dir/server.log` |'
  prefs: []
  type: TYPE_TB
- en: 'If you want to change the previously mentioned property, you can set a different
    value, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Creating a file-handler logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The logging subsystem is where you configure the output information statements
    of your application and/or WildFly cores, for debugging or auditing purposes.
    In this recipe, we will learn how to target the log statement output of your application
    to a file-handler.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s create a standalone configuration for our recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start WildFly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now deploy the `logging.war` application, and take a look at the `log` folder
    to see if the file `wildflycookbook-fh.log` is present. The corresponding test
    URL is as follows `http://127.0.0.1:8080/logging`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now check your logs and you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3744_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Log statements with wildflycookbook-fh file handler.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to add the file-handler, and then create a category to map the
    proper application packages to our new file-handler, `wildflycookbook-fh`.
  prefs: []
  type: TYPE_NORMAL
- en: Application package can be any, even the WildFly internal package, that you
    might be interested in and want to store in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once you''ve created the file-handler, you can check it''s configuration
    within the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3744_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at the `standalone.xml file`, the new file-handler configuration looks
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Typically, every environment has its own peculiarities, even for the logging
    subsystem. In a test environment, you will probably need more information to view,
    so you want developer information to be traced into the log file. We can achieve
    this behavior by enabling the `DEBUG` level on both, handler and category. Let's
    see both the instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'First we enable the `DEBUG` level on the file handler itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we enable the `DEBUG` level on the category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating a periodic-rotating file-handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to target the log statement output of your
    application to a periodic file handler. This is different from the file-handler,
    in that when the running system reaches a pre-defined time (that is, hour change,
    day change, and so on), the log file rolls, backing up itself and creating a new
    file with the same characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start WildFly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding configuration, we settled the suffix, the rotating algorithm,
    to minutes just to give an example.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In a production environment, you should use a daily rotating algorithm and schedule
    an `olding` mechanism to back up the files somewhere else in order to avoid file
    system fullfilling.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Nevertheless, if you followed the previous recipe, you just need to add the
    `periodic.rotating-file-handler` to the category as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead, if you skipped the *Creating a file-handler logging* recipe, you need
    to create a new category and reference the handler to it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now deploy the `logging.war`, if you haven''t done it yet, and take a look
    at the `log` folder to check if the file `wildflycookbook-prfh.log` is present.
    To trigger the log statements into the new file, hit the following address: `http://127.0.0.1:8080/logging`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now wait a minute, and refresh the page a couple of times. What you should
    notice in the `jboss.server.base.dir/log` folder is at least another `*-prfh*`
    log file, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_04_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: As you can see, our log file has rotated once.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to create the file-handler and then create a category to map the
    proper application packages to our new periodic-rotating-file-handler `wildflycookbook-prfh`.
    Application package can be any, even the WildFly internal package, that you might
    be interested in and want to store in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: What about the "zero" byte file? That file was created just after the creation
    of the handler. In my case, I waited for a few minutes before running the `logging`
    application, so when it was time to write on the file, the handler first checked
    if the minute was changed (it was), then rolled the file. It then created the
    new file and wrote into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once you''ve created the periodic-rotating-file-handler, you can check
    it''s configuration within the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at `standalone.xml`, the new periodic-rotating-file-handler configuration
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `wildflycookbook-fh` handler is present because of the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a size-rotating file-handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to target the log statement output of your
    application to a size-rotating-file-handler. It is different from a file-handler
    in that when the file itself reaches a specific size in terms of bytes, it rolls
    backing up itself and creates a new file with the same characteristics. This mechanism
    is, by default, settled to have only one backup file. This is to prevent your
    hard disks running out of space quickly, in case you forget the setting.
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of simplicity, we will try our recipe with WildFly running in the
    standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start WildFly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding configuration, we settled the `rotate-size` to `1` KB. When
    the file reaches that size, the handler closes the current file and creates a
    new one. The old one will be renamed with an index suffix. The property `max-backup-index`
    specifies exactly how many files the handler has to maintain; in our case it is
    `five`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Nevertheless, in the *Creating a file-handler logging* recipe we created a
    logger category. Thus, if you followed that recipe, you just need to add the `size-rotating-file-handler`
    handler to the category as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Instead, if you skipped the `Creating a file-handler logging` recipe, you need
    to create a new category and reference the handler to it, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now deploy the `logging.war`, if you haven''t done it yet, and take a look
    at the `log` folder to check if the file `wildflycookbook-srfh.log` is present.
    To trigger the log statements into the new file, hit the following address: `http://127.0.0.1:8080/logging`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do it three to four times, so that our log file increases in size. What you
    should notice is a couple of `*-srfh.log` log files in the `jboss.server.base.dir/log`
    folder, as follows:![How to do it…](img/3744_04_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to create the size-rotating-file-handler and then create/choose
    a category to map the proper application packages to our new size-rotating-file-handler,
    `wildflycookbook-srfh`. Application package can be any, even the WildFly internal
    package, that you might be interested in and want to store in a separate file.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if we reach `max-backup-index`?
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we already switched our current log file five times, so in our `log`
    folder we have the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log.1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log.2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log.3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log.4`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wildflycookbook-srfh.log.5`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Indexed files are all about 1 KB in size, while the current one, `wildflycookbook-srfh.log`
    needs only a few more bytes to roll.
  prefs: []
  type: TYPE_NORMAL
- en: As we hit our application once again, the current file rolls with the index
    suffix 1, the old `.1` becomes `.2`, the old `.2` becomes `.3` and so on.. What
    happens to the `.5` file? It gets removed and the `.4` file takes its place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Anyway, once you''ve created the size-rotating-file-handler, you can check
    its configuration within the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Looking at `standalone.xml`, the new size-rotating-file-handler configuration
    looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The handlers, `wildflycookbook-fh` and `wildflycookbook-prfh,` are present because
    of the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Defining asynchronous handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to target the log statement output of your
    application to a handler of your choice and have it logging in an asynchronous
    way. For the sake of simplicity, we will try our recipe with WildFly running in
    the standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, this recipe relies on the configuration made while explaining the
    *Creating a file-handler logging* and *Creating a periodic-rotating file-handler*
    recipes of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the new configuration, just issue the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we have our new async-handler managing two other handlers in an asynchronous
    way. To check if the async-handler is properly configured, open the browser and
    point it to the following URL: `http://127.0.0.1:8080/logging`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The files managed by the `wildflycookbook-fh` and `wildflycookbook-prfh` handlers,
    still write into their own log files. The async-handler itself does not generate
    any additional files at all; it only adds asynchronous behavior to the other handlers.
  prefs: []
  type: TYPE_NORMAL
- en: The async-handler is used to improve the logging throughput.
  prefs: []
  type: TYPE_NORMAL
- en: 'It grabs application log statements, puts them into a buffer, and then logs
    them using the handlers that you defined. Also, this buffer is not unbounded—it
    has a limit. As a matter of fact, from the commands shown in the *How to do it*
    section, I''ve emphasized some of the key points: `queue-length` and `overflow-action`.'
  prefs: []
  type: TYPE_NORMAL
- en: Simply speaking, we told the async-handler how many log statements the buffers
    can hold, and what it should do when there is no more room in them.
  prefs: []
  type: TYPE_NORMAL
- en: We settled `1024` as the number of the log statements for the buffer, and we
    settled a `block` action as an exceeded limit behavior. This means that the log
    statement is in a hold state until it finds room in the buffer. You can otherwise
    choose the `discard` action, with the consequence of losing your logs.
  prefs: []
  type: TYPE_NORMAL
- en: You can use whatever action you want, but keep in mind that for the `block`
    action, you should tune the size of your buffer to not hold too many or too few
    logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at `standalone.xml`, the new async-handler configuration looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The async-handler is faster, so why wouldn't you always use that? Well, not
    always; sometimes you can get a worse performance by using the async-handler.
  prefs: []
  type: TYPE_NORMAL
- en: If your application makes intense use of I/O operations, then you can benefit
    from it. On the other hand, if your application makes intense use of the CPU,
    you will definitely not benefit from using the async-handler, as it will increase
    context-switching.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a syslog-handler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to use "syslog". The syslog is a standard
    protocol used for message logging. This standard has been implemented for different
    operating systems, such as Linux, Unix, and Windows. In 2009, the **Internet**
    **Engineering Task Force** (**IETF**) standardized the "syslog" protocol specification,
    which can be viewed at the following address:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tools.ietf.org/html/rfc5424](http://tools.ietf.org/html/rfc5424)'
  prefs: []
  type: TYPE_NORMAL
- en: You will probably use `syslog-handler` in environments where a centralized logging
    system is used to collect all system information.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, for this recipe I will use a syslog server named `syslog-ng`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install into a Fedora 21 system, do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once done, enable the following directives into `/etc/rsyslog.conf`,:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then start the `rsyslogd` daemon with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Its detailed installation and configuration is out of the scope of this book.
    By the way, you can refer to the official documentation at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://syslog-ng.org](https://syslog-ng.org)'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you didn''t follow the previous recipe, we will need to create a standalone
    configuration for our recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `logging`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s start WildFly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to associate the handler to a logger, and we will use `com.packtpub.wildflycookbook`
    (used in the previous recipes of this chapter), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we can test our new configuration, open a new terminal window and `tail`
    the `syslog`, by issuing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will work in Fedora 21; in a different Linux system, you may find your
    `SysLog` server logging into the `/var/log/messages` file. However, point to the
    file with regard to your OS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once ready, deploy the logging application, if you haven''t done so yet, and
    open your browser to the following URL: `http://localhost:8080/logging`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see something similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It's our logging application's fatal message catched by the syslog. You know
    this because it refers to the `wildfly-logging` which corresponds to the value
    of the attribute `app-name`, when defining the `syslog-handler`. It worked!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, it's better to repeat that "syslog" is a protocol, thus it has
    many implementations depending on the hardware and software. In other words, it
    is OS dependent. In our first command, while creating the `syslog-handler`, we
    specified a lot of parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s summarize them in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Attribute | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `server-address` | This is where the syslog server is—default is `localhost`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `hostname` | This is the hostname of the sever sending the messages. |'
  prefs: []
  type: TYPE_TB
- en: '| `port` | This is the port that the syslog server listens to—default is `514`.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `syslog-format` | The format used to log the message based on the RFC5424
    specification—default is `RFC5424`. |'
  prefs: []
  type: TYPE_TB
- en: '| `facility` | This is the "category" of the message, still based on the RFC5425
    specification—default is `user-level`. |'
  prefs: []
  type: TYPE_TB
- en: '| `level` | This is the log level—default is `ALL`. |'
  prefs: []
  type: TYPE_TB
- en: '| `app-name` | This should correspond to the application generating the message.
    It''s basically used for filtering. |'
  prefs: []
  type: TYPE_TB
- en: '| `enabled` | When set to false, disables the `syslog-handler`—default value
    is `true`. |'
  prefs: []
  type: TYPE_TB
- en: However, whenever you create a handler, you will always have to reference it
    into a logger. Otherwise you will not see any messages at all.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Going into much detail about the "syslog" protocol is out of the scope of this
    book. For more information about it, please refer to its specification, available
    at the following site:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://tools.ietf.org/html/rfc5424](http://tools.ietf.org/html/rfc5424)'
  prefs: []
  type: TYPE_NORMAL
- en: Listing and reading log files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to list and read log files. This can be helpful
    when you have access only to the CLI (which might be a remote one), and not to
    the server itself or the file system hosting the log files.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To fully understand this recipe, you should have followed one of the previous
    recipes, which have created the various log files. However, the standard WildFly
    log file `server.log` would be present and it's enough.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before reading a file, we need to know which log files are present. To list
    them all, execute the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Because of our previous recipes, we have a lot of files to look at. For the
    purpose of this recipe, we will use the default log file, `server.log`. To read
    the file, we can try the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the output shows just the last few lines of the content.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to read from the beginning, you can specify the `tail=false` parameter
    (by default, it is set to `true`), along with the `name` parameter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to see more lines of the log file, just specify the number of lines
    you want, and add the `lines` parameter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Obviously, a continuous `tail -f` like command would be very useful, but there
    isn't one, at least not for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is one more option worth mentioning, that is, the `skip` parameter. It
    basically shifts your lines up or down, depending on whether you are starting
    from the head or the tail of the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s give it a try using a skip by 5 lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The command just dropped the last 5 lines of the file, but it started displaying
    the output 5 lines earlier. By default, the total number of lines displayed is
    10—this is because, by default, it starts reading the tail of the file.
  prefs: []
  type: TYPE_NORMAL
- en: Since WildFly version 8.2, the logging subsystem earned a new resource called
    `log-file`. The resource lists all log files defined in the `jboss.server.log.dir`
    (or `jboss.domain.log.dir` depending on the operational mode), which are defined
    in the subsystem. With WildFly 9, now you can download a log file by using the
    management interface.
  prefs: []
  type: TYPE_NORMAL
- en: Open a browser and point it to `http://localhost:9990/management/subsystem/logging/log-file/server.log?operation=attribute&name=stream&useStreamAsResponse`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can use HTTP tools such as `curl`. With the `curl` tool,
    you can get a log file content, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding example gets the stream of the `server.log` and stores it into
    a homonymous file (the `-o server.log` directive effectively stores the output).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Meanwhile, with the new release of WildFly 9, you can read the log file directly
    from the Web Console. You can see all the available files by clicking on **Runtime**
    and by selecting the **Log viewer** menu item on the left, as depicted in the
    following image:![There's more…](img/3744_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you select the log file to view, the **Download** and **View** buttons,
    are enabled. The following screenshot is how a log file looks like in the Web
    Console:![There's more…](img/3744_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How nice and elegant!
  prefs: []
  type: TYPE_NORMAL
- en: Using a different logging implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final recipe about logging, we will learn how to use a different logging
    implementation. In the earlier version of JBoss AS, you could have relied on the
    `java.util.logging` (also JUL) or the `log4j` implementation. WildFly relies on
    the JUL logging implementation.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To manage which logging implementation you can use, WildFly gives you a couple
    of attributes.
  prefs: []
  type: TYPE_NORMAL
- en: The first one is named `add-logging-api-dependencies`, which can be set to `true`
    (default value) or to `false`. When it's true, the WildFly logging default implementation
    is automatically added to all deployments.
  prefs: []
  type: TYPE_NORMAL
- en: The other attribute is named `use-deployment-logging-config`, which can be set
    to `true` (default value) or to `false`. When set to `true`, it gives to deployments
    the `per-deployment logging` feature, which essentially enables your application
    to carry its own logging configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration files are allowed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`logging.properties`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jboss-logging.properties`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j.properties`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`jboss-log4j.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are deploying an EAR application, the file should be placed into the
    `META-INF` directory. While in case of WAR and JAR bundles, the file could be
    either placed into the `META-INF` or `WEB-INF` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go back to our recipe. We will see how we can use a different logging
    implementation. We will use the `log4j` implementation.
  prefs: []
  type: TYPE_NORMAL
- en: To test our logging configuration, we will need an application to log some statements.
    In this case, we will use the application named `log4j`. To obtain the artifact
    to deploy, please refer to the *Software prerequisites* recipe in [Chapter 1](ch01.html
    "Chapter 1. Welcome to WildFly!"), *Welcome to WildFly!*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to create a custom standalone configuration folder to test our
    recipe, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we remove the automatic logging dependency of our application. Keep in
    mind that this setting would be general to all other applications that are running
    on the same WildFly instance, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now the application to be deployed needs to declare a dependency to `log4j`,
    which is already provided to you as a module in the WildFly home `modules/system/layers/base/org/apache/log4j/main`
    folder. To do this, you need to add a file called `jboss-deployment-structure.xml`
    into your `META-INF` or `WEB-INF` folder (depending if you got an EAR or a WAR
    application), which looks like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'As previously mentioned, the `per-deployment-logging` feature is enabled by
    default. However, here is the CLI command to enable it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to `reload` the server once done.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also, as pointed out in the *Getting ready* section, you can provide your own
    logging configuration file. The following is the `log4j.xml` file that comes with
    my `log4j` application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we can build and deploy the application. While deploying the application,
    keep an eye on the logs in the `log4j.log` file ( defined in the above XML code
    snippet), available in the `£WILDFLY_HOME` folder. You should see the following
    entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There is another way to achieve the same result. You can maintain the `add-logging-api-dependencies`
    to `true`, and exclude the `logging` subsystem to avoid implicit dependencies
    within the `jboss-deployment-structure.xml` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: This approach is too conservative, as it won't affect other applications which
    may rely on the logging subsystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'Furthermore, the dependencies can be written in the standard Java way, which
    is via the `MANIFEST.MF` file placed in the `META-INF` folder, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remember to include an empty line at the end of the line, to have a valid `MANIFEST.MF`
    file. You can also have more dependencies modules, by separating them with a comma
    `,`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More information about how logging works in WildFly 9, can be viewed at [https://docs.jboss.org/author/display/WFLY9/Logging+Configuration](https://docs.jboss.org/author/display/WFLY9/Logging+Configuration).
  prefs: []
  type: TYPE_NORMAL
