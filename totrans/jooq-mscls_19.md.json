["```java\nCREATE FUNCTION name (parameters)\n```", "```java\nRETURNS data_type AS\n```", "```java\nBEGIN\n```", "```java\n    statements/computations\n```", "```java\n    RETURN value\n```", "```java\nEND\n```", "```java\nDELIMITER $$\n```", "```java\nCREATE FUNCTION `sale_price`(\n```", "```java\n  `quantity` INT, `list_price` REAL, `fraction_of_price` REAL)\n```", "```java\n  RETURNS REAL\n```", "```java\n  DETERMINISTIC\n```", "```java\n  BEGIN\n```", "```java\n    RETURN (`list_price` - \n```", "```java\n      (`list_price` * `fraction_of_price`)) * `quantity`;    \n```", "```java\n  END $$\n```", "```java\nDELIMITER ;\n```", "```java\nSalePrice sp = new SalePrice();\n```", "```java\nsp.setQuantity(25);\n```", "```java\nsp.setListPrice(15.5);\n```", "```java\nsp.setFractionOfPrice(0.75);\n```", "```java\nsp.execute(ctx.configuration());\n```", "```java\ndouble result = sp.getReturnValue();\n```", "```java\nsp.setQuantity(field(select(PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n  .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))));\n```", "```java\nsp.setListPrice(field(select(PRODUCT.MSRP.coerce(Double.class))\n```", "```java\n  .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))));\n```", "```java\nsp.setFractionOfPrice(0.75);\n```", "```java\nsp.execute(ctx.configuration());\n```", "```java\ndouble result = sp.getReturnValue();\n```", "```java\ndouble sp = Routines.salePrice(\n```", "```java\n    ctx.configuration(), 25, 15.5, 0.75);\n```", "```java\nField<Float> sp = Routines.salePrice(\n```", "```java\n  field(select(PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n         .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))),\n```", "```java\n  field(select(PRODUCT.MSRP.coerce(Double.class))\n```", "```java\n         .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))),\n```", "```java\n  val(0.75));\n```", "```java\ndouble sp = ctx.fetchValue(salePrice(\n```", "```java\n field(select(PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n  .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))),\n```", "```java\n field(select(PRODUCT.MSRP.coerce(Double.class))\n```", "```java\n  .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L))),\n```", "```java\n val(0.75)));\n```", "```java\nctx.select(ORDERDETAIL.ORDER_ID,\n```", "```java\n    sum(salePrice(ORDERDETAIL.QUANTITY_ORDERED,\n```", "```java\n        ORDERDETAIL.PRICE_EACH.coerce(Double.class), \n```", "```java\n        val(0.75))).as(\"sum_sale_price\"))\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .groupBy(ORDERDETAIL.ORDER_ID)\n```", "```java\n   .orderBy(field(name(\"sum_sale_price\")).desc())\n```", "```java\n   .fetch();\n```", "```java\nSELECT `classicmodels`.`orderdetail`.`order_id`,\n```", "```java\n   sum(`classicmodels`.`sale_price`(\n```", "```java\n       `classicmodels`.`orderdetail`.`quantity_ordered`, \n```", "```java\n       `classicmodels`.`orderdetail`.`price_each`, 7.5E-1)) \n```", "```java\n          AS `sum_sale_price`\n```", "```java\n   FROM `classicmodels`.`orderdetail`\n```", "```java\n   GROUP BY `classicmodels`.`orderdetail`.`order_id`\n```", "```java\n   ORDER BY `sum_sale_price` DESC\n```", "```java\nCREATE OR REPLACE FUNCTION \"update_msrp\" (\n```", "```java\n    \"id\" BIGINT, \"debit\" INTEGER) RETURNS REAL AS $$\n```", "```java\n    UPDATE \"public\".\"product\"\n```", "```java\n        SET \"msrp\" = \"public\".\"product\".\"msrp\" - \"debit\"\n```", "```java\n        WHERE \"public\".\"product\".\"product_id\" = \"id\"\n```", "```java\n        RETURNING \"public\".\"product\".\"msrp\";\n```", "```java\n$$ LANGUAGE SQL;\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME, \n```", "```java\n           PRODUCT.MSRP.as(\"obsolete_msrp\"), \n```", "```java\n           updateMsrp(PRODUCT.PRODUCT_ID, inline(50)))\n```", "```java\n   .from(PRODUCT).fetch();\n```", "```java\nSELECT \"public\".\"product\".\"product_id\",\n```", "```java\n       \"public\".\"product\".\"product_name\",\n```", "```java\n       \"public\".\"product\".\"msrp\" AS \"obsolete_msrp\",\n```", "```java\n               \"public\".\"update_msrp\"(\"id\" := \"public\"\n```", "```java\n                   .\"product\".\"product_id\", \"debit\" := 50)\n```", "```java\nFROM \"public\".\"product\"\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE FUNCTION \n```", "```java\n     \"card_commission\"(\"card_type\" IN VARCHAR2)\n```", "```java\nRETURN NUMBER IS\n```", "```java\n \"commission\" NUMBER := 0;\n```", "```java\n BEGIN\n```", "```java\n   RETURN CASE \"card_type\"\n```", "```java\n     WHEN 'VisaElectron' THEN .15\n```", "```java\n     WHEN 'Mastercard' THEN .22\n```", "```java\n     ELSE .25\n```", "```java\n   END;\n```", "```java\nEND;\n```", "```java\nctx.select(cardCommission(BANK_TRANSACTION.CARD_TYPE))\n```", "```java\n   .from(BANK_TRANSACTION)\n```", "```java\n   .fetch();\n```", "```java\nList<BigDecimal> commission = ctx.fetchValues(\n```", "```java\n  select(cardCommission(BANK_TRANSACTION.CARD_TYPE))\n```", "```java\n    .from(BANK_TRANSACTION));\n```", "```java\nSELECT \"CLASSICMODELS\".\"card_commission\"(\n```", "```java\n       \"CLASSICMODELS\".\"BANK_TRANSACTION\".\"CARD_TYPE\")\n```", "```java\nFROM \"CLASSICMODELS\".\"BANK_TRANSACTION\"\n```", "```java\nctx.configuration().derive(new Settings()\n```", "```java\n   .withRenderScalarSubqueriesForStoredFunctions(true))\n```", "```java\n   .dsl()\n```", "```java\n   .select(cardCommission(BANK_TRANSACTION.CARD_TYPE))\n```", "```java\n   .from(BANK_TRANSACTION)\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  (SELECT \"CLASSICMODELS\".\"card_commission\"(\n```", "```java\n    \"CLASSICMODELS\".\"BANK_TRANSACTION\".\"CARD_TYPE\")\n```", "```java\n      FROM DUAL)\n```", "```java\nFROM \"CLASSICMODELS\".\"BANK_TRANSACTION\"\n```", "```java\nCREATE OR REPLACE FUNCTION \"department_topic_arr\" \n```", "```java\n   (IN \"id\" BIGINT)\n```", "```java\nRETURNS TEXT[] \n```", "```java\nAS $$\n```", "```java\n  SELECT \"public\".\"department\".\"topic\"\n```", "```java\n      FROM \"public\".\"department\" WHERE \n```", "```java\n           \"public\".\"department\".\"department_id\" = \"id\"\n```", "```java\n$$ LANGUAGE SQL; \n```", "```java\nctx.select().from(unnest(departmentTopicArr(2L))\n```", "```java\n   .as(\"t\")).fetch();\n```", "```java\nctx.fetch(unnest(departmentTopicArr(2L)).as(\"t\"));\n```", "```java\nCREATE OR REPLACE FUNCTION \"employee_office_arr\"(VARCHAR(10))\n```", "```java\n  RETURNS BIGINT[] \n```", "```java\nAS $$\n```", "```java\n  SELECT ARRAY(SELECT \"public\".\"employee\".\"employee_number\"\n```", "```java\n    FROM \"public\".\"employee\" WHERE \"public\".\"employee\"\n```", "```java\n         .\"office_code\" = $1)\n```", "```java\n$$ LANGUAGE sql;\n```", "```java\nEmployeeOfficeArr eoa = new EmployeeOfficeArr();\n```", "```java\neoa.set__1(\"1\");\n```", "```java\neoa.execute(ctx.configuration());\n```", "```java\nLong[] result = eoa.getReturnValue();\n```", "```java\nctx.select(field(name(\"t\", \"en\")), sum(SALE.SALE_))\n```", "```java\n   .from(SALE)\n```", "```java\n   .rightJoin(unnest(employeeOfficeArr(\"1\")).as(\"t\", \"en\"))\n```", "```java\n     .on(field(name(\"t\", \"en\")).eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .groupBy(field(name(\"t\", \"en\"))).fetch();        \n```", "```java\nSELECT \"t\".\"en\",sum(\"public\".\"sale\".\"sale\")\n```", "```java\nFROM \"public\".\"sale\"\n```", "```java\nRIGHT OUTER JOIN unnest(\"public\".\"employee_office_arr\"('1')) \n```", "```java\nAS \"t\" (\"en\") \n```", "```java\nON \"t\".\"en\" = \"public\".\"sale\".\"employee_number\"\n```", "```java\nGROUP BY \"t\".\"en\"\n```", "```java\nCREATE OR REPLACE FUNCTION \"get_salary_stat\"(\n```", "```java\n    OUT \"min_sal\" INT, OUT \"max_sal\" INT, OUT \"avg_sal\" NUMERIC) \n```", "```java\n  LANGUAGE plpgsql\n```", "```java\n  AS $$\n```", "```java\n  BEGIN  \n```", "```java\n    SELECT MIN(\"public\".\"employee\".\"salary\"),\n```", "```java\n           MAX(\"public\".\"employee\".\"salary\"),\n```", "```java\n           AVG(\"public\".\"employee\".\"salary\")::NUMERIC(7,2)\n```", "```java\n      INTO \"min_sal\", \"max_sal\", \"avg_sal\"\n```", "```java\n      FROM \"public\".\"employee\";\n```", "```java\n  END;\n```", "```java\n$$;\n```", "```java\nGetSalaryStat salStat = new GetSalaryStat();\n```", "```java\nsalStat.execute(ctx.configuration());\n```", "```java\nInteger minSal = salStat.getMinSal();\n```", "```java\nInteger maxSal = salStat.getMaxSal();\n```", "```java\nBigDecimal avgSal = salStat.getAvgSal();\n```", "```java\nSELECT \"min_sal\", \"max_sal\", \"avg_sal\" \n```", "```java\nFROM \"public\".\"get_salary_stat\"()\n```", "```java\nGetSalaryStat salStat = getSalaryStat(ctx.configuration());\n```", "```java\n// call the getters\n```", "```java\nInteger minSal = ctx.fetchValue(val(getSalaryStat(\n```", "```java\n      ctx.configuration()).getMinSal()));\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME,   \n```", "```java\n           EMPLOYEE.SALARY)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.SALARY.coerce(BigDecimal.class)\n```", "```java\n      .gt(getSalaryStat(ctx.configuration()).getAvgSal()))\n```", "```java\n   .fetch();\n```", "```java\nSELECT \"min_sal\",\"max_sal\",\"avg_sal\"\n```", "```java\nFROM \"public\".\"get_salary_stat\"()\n```", "```java\nSELECT \"public\".\"employee\".\"first_name\",\n```", "```java\n       \"public\".\"employee\".\"last_name\",\n```", "```java\n       \"public\".\"employee\".\"salary\"\n```", "```java\nFROM \"public\".\"employee\"\n```", "```java\nWHERE \"public\".\"employee\".\"salary\" > 65652.17\n```", "```java\nCREATE FUNCTION \"make_array\"(anyelement, anyelement) \n```", "```java\nRETURNS anyarray \n```", "```java\nAS $$\n```", "```java\n  SELECT ARRAY[$1, $2];\n```", "```java\n$$ LANGUAGE SQL;\n```", "```java\nMakeArray ma = new MakeArray();\n```", "```java\nma.set__1(1);\n```", "```java\nma.set__2(2);\n```", "```java\nma.execute(ctx.configuration());\n```", "```java\nPgArray arr = (PgArray) ma.getReturnValue();\n```", "```java\nctx.select(makeArray(1, 2).as(\"ia\"),\n```", "```java\n           makeArray(\"a\", \"b\").as(\"ta\")).fetch();\n```", "```java\nCREATE FUNCTION \"dup\"(IN \"f1\" anyelement, \n```", "```java\n   OUT \"f2\" anyelement, OUT \"f3\" anyarray)\n```", "```java\nAS 'select $1, array[$1,$1]' LANGUAGE sql;\n```", "```java\nDup dup = new Dup();\n```", "```java\ndup.setF1(10);\n```", "```java\ndup.execute(ctx.configuration());\n```", "```java\n// call here getF2() and/or getF3()\n```", "```java\nctx.select(val(dup(ctx.configuration(), 10).getF2())).fetch();\n```", "```java\nctx.fetchValue(val(dup(ctx.configuration(), 10).getF2()));\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE FUNCTION\n```", "```java\n   \"GET_CUSTOMER\" (\"cl\" IN NUMBER)\n```", "```java\n  RETURN SYS_REFCURSOR\n```", "```java\n       AS  \"cur\"  SYS_REFCURSOR;\n```", "```java\n  BEGIN\n```", "```java\n      OPEN \"cur\" FOR\n```", "```java\n           SELECT *\n```", "```java\n           FROM \"CUSTOMER\"\n```", "```java\n                       WHERE \"CUSTOMER\".\"CREDIT_LIMIT\" > \"cl\"\n```", "```java\n           ORDER BY \"CUSTOMER\".\"CUSTOMER_NAME\";\n```", "```java\n      RETURN \"cur\";\n```", "```java\n  END;\n```", "```java\nGetCustomer customers = new GetCustomer();\n```", "```java\ncustomers.setCl(120000);\n```", "```java\ncustomers.execute(ctx.configuration());\n```", "```java\nResult<Record> result = customers.getReturnValue();\n```", "```java\nString name = (String) result.getValue(0, \"CUSTOMER_NAME\");\n```", "```java\nString name = result.get(0).get(\"CUSTOMER_NAME\", String.class);\n```", "```java\nResult<Record> result = getCustomer(\n```", "```java\n   ctx.configuration(), 120000);\n```", "```java\nTable<?> t = table(result);\n```", "```java\nTable<CustomerRecord> t = table(result.into(CUSTOMER));\n```", "```java\nctx.select(CUSTOMERDETAIL.ADDRESS_LINE_FIRST, \n```", "```java\n           CUSTOMERDETAIL.POSTAL_CODE,\n```", "```java\n           t.field(name(\"CUSTOMER_NAME\")))\n```", "```java\n   .from(t)\n```", "```java\n   .join(CUSTOMERDETAIL)\n```", "```java\n    .on(CUSTOMERDETAIL.CUSTOMER_NUMBER.eq(\n```", "```java\n        t.field(name(\"CUSTOMER_NUMBER\"), Long.class)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(getCustomer(field(\n```", "```java\n     select(avg(CUSTOMER.CREDIT_LIMIT))\n```", "```java\n        .from(CUSTOMER)))).fetch();    \n```", "```java\nCREATE OR REPLACE FUNCTION \"get_offices_multiple\"() \n```", "```java\n  RETURNS SETOF REFCURSOR \n```", "```java\nAS $$\n```", "```java\n DECLARE\n```", "```java\n  \"ref1\" REFCURSOR;           \n```", "```java\n  \"ref2\" REFCURSOR;           \n```", "```java\n BEGIN\n```", "```java\n OPEN \"ref1\" FOR \n```", "```java\n  SELECT \"public\".\"office\".\"city\", \"public\".\"office\".\"country\" \n```", "```java\n  FROM \"public\".\"office\" \n```", "```java\n  WHERE \"public\".\"office\".\"internal_budget\" < 100000;  \n```", "```java\n  RETURN NEXT \"ref1\"; \n```", "```java\n OPEN \"ref2\" FOR \n```", "```java\n  SELECT \"public\".\"office\".\"city\", \"public\".\"office\".\"country\"\n```", "```java\n  FROM \"public\".\"office\" \n```", "```java\n  WHERE \"public\".\"office\".\"internal_budget\" > 100000;  \n```", "```java\n RETURN NEXT \"ref2\";    \n```", "```java\nEND;\n```", "```java\n$$ LANGUAGE plpgsql;\n```", "```java\nResult<GetOfficesMultipleRecord> results = \n```", "```java\n        getOfficesMultiple(ctx.configuration());\n```", "```java\nfor (GetOfficesMultipleRecord result : results) {\n```", "```java\n  Result<Record> records = result.getGetOfficesMultiple();\n```", "```java\n  System.out.println(\"-------------------------\");\n```", "```java\n  for (Record r : records) {\n```", "```java\n    System.out.println(r.get(\"city\") + \", \" + r.get(\"country\"));\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nCREATE OR REPLACE FUNCTION \"product_of_product_line\"(\n```", "```java\n  IN \"p_line_in\" VARCHAR)\n```", "```java\nRETURNS TABLE(\"p_id\" BIGINT, \"p_name\" VARCHAR, \n```", "```java\n              \"p_line\" VARCHAR) LANGUAGE plpgsql \n```", "```java\nAS $$ \n```", "```java\nBEGIN\n```", "```java\n  RETURN QUERY\n```", "```java\n  SELECT ...;     \n```", "```java\n  END; \n```", "```java\n$$;\n```", "```java\nProductOfProductLine popl = new ProductOfProductLine();\n```", "```java\nTable<ProductOfProductLineRecord> t = popl.call(\"Trains\");\n```", "```java\nResult<ProductOfProductLineRecord> r = \n```", "```java\n   ctx.fetch(popl.call(\"Trains\"));\n```", "```java\nResult<ProductOfProductLineRecord> r = \n```", "```java\n   ctx.selectFrom(popl.call(\"Trains\")).fetch();\n```", "```java\nctx.selectFrom(PRODUCT_OF_PRODUCT_LINE.call(\"Trains\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.selectFrom(PRODUCT_OF_PRODUCT_LINE(val(\"Trains\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.selectFrom(PRODUCT_OF_PRODUCT_LINE.call(\"Trains\"))\n```", "```java\n   .where(PRODUCT_OF_PRODUCT_LINE.P_NAME.like(\"1962%\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT_OF_PRODUCT_LINE.P_ID, \n```", "```java\n           PRODUCT_OF_PRODUCT_LINE.P_NAME)\n```", "```java\n   .from(PRODUCT_OF_PRODUCT_LINE.call(\"Classic Cars\"))\n```", "```java\n   .where(PRODUCT_OF_PRODUCT_LINE.P_ID.gt(100L))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE\n```", "```java\n   .TEXT_DESCRIPTION, PRODUCT_OF_PRODUCT_LINE.asterisk())\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .crossApply(PRODUCT_OF_PRODUCT_LINE(\n```", "```java\n               PRODUCTLINE.PRODUCT_LINE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE\n```", "```java\n     .TEXT_DESCRIPTION, PRODUCT_OF_PRODUCT_LINE.asterisk())\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .outerApply(PRODUCT_OF_PRODUCT_LINE(\n```", "```java\n               PRODUCTLINE.PRODUCT_LINE))\n```", "```java\n   .fetch();\n```", "```java\nCREATE OR REPLACE PACKAGE \"DEPARTMENT_PKG\" AS\n```", "```java\n TYPE \"BGT\" IS RECORD (\"LOCAL_BUDGET\" FLOAT, \"CASH\" FLOAT);\n```", "```java\n  FUNCTION \"GET_BGT\"(\"p_profit\" IN FLOAT)\n```", "```java\n    RETURN \"BGT\";\n```", "```java\n  FUNCTION \"GET_MAX_CASH\"\n```", "```java\n    RETURN FLOAT; \n```", "```java\nEND \"DEPARTMENT_PKG\";\n```", "```java\n/\n```", "```java\nCREATE OR REPLACE PACKAGE BODY \"DEPARTMENT_PKG\"\n```", "```java\n-- check bundled code for this skipped part\n```", "```java\nEND\"DEPARTMENT_PKG\";\n```", "```java\n/\n```", "```java\nGetMaxCash gmc = new GetMaxCash();\n```", "```java\ngmc.execute(ctx.configuration());\n```", "```java\ndouble resultGmc = gmc.getReturnValue();\n```", "```java\nGetBgt bgt = new GetBgt();\n```", "```java\nbgt.setPProfit(50000.0);\n```", "```java\nbgt.execute(ctx.configuration());\n```", "```java\nBgtRecord resultBgt = bgt.getReturnValue();\n```", "```java\ndouble resultGmc = getMaxCash(ctx.configuration());\n```", "```java\nBgtRecord resultBgt = getBgt(ctx.configuration(), 50000.0);\n```", "```java\nctx.select(getMaxCash()).fetch();\n```", "```java\ndouble mc = ctx.fetchValue(getMaxCash());\n```", "```java\nThe rendered SQL:\n```", "```java\nSELECT \"CLASSICMODELS\".\"department_pkg\".\"get_max_cash\"() \n```", "```java\nFROM DUAL\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, OFFICE.CITY, OFFICE.COUNTRY,\n```", "```java\n           DEPARTMENT.NAME, DEPARTMENT.LOCAL_BUDGET)\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .join(DEPARTMENT)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(DEPARTMENT.OFFICE_CODE)\n```", "```java\n     .and(DEPARTMENT.LOCAL_BUDGET\n```", "```java\n       .in(getBgt(ctx.configuration(),\n```", "```java\n          getMaxCash(ctx.configuration()))\n```", "```java\n            .getLocalBudget())))\n```", "```java\n   .fetch();\n```", "```java\nCREATE OR REPLACE TYPE \"EVALUATION_CRITERIA\" AS OBJECT (\n```", "```java\n  \"communication_ability\" NUMBER(7), \n```", "```java\n  \"ethics\" NUMBER(7), \n```", "```java\n  \"performance\" NUMBER(7), \n```", "```java\n  \"employee_input\" NUMBER(7),\n```", "```java\n  MEMBER FUNCTION \"IMPROVE\"(\"k\" NUMBER) \n```", "```java\n      RETURN \"EVALUATION_CRITERIA\",\n```", "```java\n  MAP MEMBER FUNCTION \"SCORE\" RETURN NUMBER\n```", "```java\n);\n```", "```java\nCREATE OR REPLACE TYPE BODY \"EVALUATION_CRITERIA\" AS\n```", "```java\n-- check bundled code for this skipped part\n```", "```java\nEND;\n```", "```java\nEvaluationCriteriaRecord ecr = \n```", "```java\n   ctx.newRecord(EVALUATION_CRITERIA);        \n```", "```java\necr.setCommunicationAbility(58);\n```", "```java\necr.setEthics(30);\n```", "```java\necr.setPerformance(26);\n```", "```java\necr.setEmployeeInput(59);\n```", "```java\nBigDecimal result = ecr.score();\n```", "```java\nEvaluationCriteriaRecord newEcr = ecr.improve(10);        \n```", "```java\nctx.select(MANAGER.MANAGER_ID, MANAGER.MANAGER_NAME)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .where(score(MANAGER.MANAGER_EVALUATION)\n```", "```java\n     .lt(newEcr.score()))\n```", "```java\n   .fetch();        \n```", "```java\nctx.select(MANAGER.MANAGER_ID, MANAGER.MANAGER_NAME)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .where(score(improve(\n```", "```java\n      MANAGER.MANAGER_EVALUATION, inline(10)))\n```", "```java\n        .gt(BigDecimal.valueOf(57)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(secondMax(ORDERDETAIL.QUANTITY_ORDERED), \n```", "```java\n                     ORDERDETAIL.PRODUCT_ID)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .groupBy(ORDERDETAIL.PRODUCT_ID)\n```", "```java\n   .having(secondMax(ORDERDETAIL.QUANTITY_ORDERED)\n```", "```java\n     .gt(BigDecimal.valueOf(55)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(concatenate(EMPLOYEE.FIRST_NAME))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.FIRST_NAME.like(\"M%\"))\n```", "```java\n   .fetch();\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE PROCEDURE \n```", "```java\n   \"GET_AVG_PRICE_BY_PRODUCT_LINE\" (\n```", "```java\n    \"pl\" IN VARCHAR2, \"average\" OUT DECIMAL) AS \n```", "```java\nBEGIN\n```", "```java\n   SELECT AVG(\"PRODUCT\".\"BUY_PRICE\")\n```", "```java\n      INTO \"average\"\n```", "```java\n      FROM \"PRODUCT\"\n```", "```java\n      WHERE \"PRODUCT\".\"PRODUCT_LINE\" = \"pl\";\n```", "```java\nEND;\n```", "```java\nGetAvgPriceByProductLine avg = new GetAvgPriceByProductLine();\n```", "```java\navg.setPl(\"Classic Cars\");\n```", "```java\navg.execute(ctx.configuration());\n```", "```java\nBigInteger result = avg.getAverage();\n```", "```java\nBigInteger result = getAvgPriceByProductLine(\n```", "```java\n   ctx.configuration(), \"Classic Cars\");\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME,   \n```", "```java\n           PRODUCT.BUY_PRICE)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .where(PRODUCT.BUY_PRICE.coerce(BigInteger.class)\n```", "```java\n     .gt(getAvgPriceByProductLine(\n```", "```java\n         ctx.configuration(), \"Classic Cars\"))\n```", "```java\n     .and(PRODUCT.PRODUCT_LINE.eq(\"Classic Cars\")))\n```", "```java\n   .fetch();\n```", "```java\ncall \"CLASSICMODELS\".\"get_avg_price_by_product_line\" (\n```", "```java\n  'Classic Cars', ?)\n```", "```java\nSELECT \"CLASSICMODELS\".\"PRODUCT\".\"PRODUCT_ID\",\n```", "```java\n       \"CLASSICMODELS\".\"PRODUCT\".\"PRODUCT_NAME\",\n```", "```java\n       \"CLASSICMODELS\".\"PRODUCT\".\"BUY_PRICE\"\n```", "```java\nFROM \"CLASSICMODELS\".\"PRODUCT\"\n```", "```java\nWHERE (\"CLASSICMODELS\".\"PRODUCT\".\"BUY_PRICE\" > 64\n```", "```java\n  AND \"CLASSICMODELS\".\"PRODUCT\".\"PRODUCT_LINE\" \n```", "```java\n    = 'Classic Cars')\n```", "```java\nDELIMITER $$\n```", "```java\nCREATE PROCEDURE `get_product`(IN `pid` BIGINT)\n```", "```java\n  BEGIN\n```", "```java\n   SELECT * FROM `product` WHERE `product`.`product_id` = `pid`;\n```", "```java\n  END $$\n```", "```java\nDELIMITER\n```", "```java\nGetProduct gp = new GetProduct();\n```", "```java\ngp.setPid(1L);\n```", "```java\ngp.execute(ctx.configuration());\n```", "```java\nResult<Record> result = gp.getResults().get(0);\n```", "```java\ngetProduct(ctx.configuration(), 1L);\n```", "```java\nTable<?> t = table(gp.getResults().get(0));\n```", "```java\nTable<ProductRecord> t = table(gp.getResults()\n```", "```java\n  .get(0).into(PRODUCT));\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE PROCEDURE \"GET_PRODUCT\"(\n```", "```java\n    \"pid\" IN NUMBER, \"cursor_result\" OUT SYS_REFCURSOR) AS \n```", "```java\nBEGIN\n```", "```java\n  OPEN \"cursor_result\" FOR\n```", "```java\n    SELECT * FROM \"PRODUCT\" \n```", "```java\n    WHERE \"PRODUCT\".\"PRODUCT_ID\" = \"pid\";\n```", "```java\nEND;\n```", "```java\nGetProduct gp = new GetProduct();\n```", "```java\ngp.setPid(1L);\n```", "```java\ngp.execute(ctx.configuration());\n```", "```java\nResult<Record> result = gp.getCursorResult();\n```", "```java\nResult<Record> result = getProduct(ctx.configuration(), 1L);\n```", "```java\nTable<?> t = table(gp.getResults().get(0));\n```", "```java\nTable<?> t = table(getProduct(ctx.configuration(), 1L));\n```", "```java\nTable<ProductRecord> t = \n```", "```java\n    table(gp.getCursorResult().into(PRODUCT)); \n```", "```java\nTable<ProductRecord> t = \n```", "```java\n    table(getProduct(ctx.configuration(), 1L)\n```", "```java\n        .into(PRODUCT));\n```", "```java\nDELIMITER $$\n```", "```java\nCREATE PROCEDURE `get_emps_in_office`(\n```", "```java\n                           IN `in_office_code` VARCHAR(10))\n```", "```java\n  BEGIN\n```", "```java\n    SELECT `office`.`city`, `office`.`country`, \n```", "```java\n                   `office`.`internal_budget`\n```", "```java\n      FROM `office`\n```", "```java\n      WHERE `office`.`office_code`=`in_office_code`;\n```", "```java\n     SELECT `employee`.`employee_number`,\n```", "```java\n            `employee`.`first_name`, `employee`.`last_name`\n```", "```java\n      FROM `employee`\n```", "```java\n      WHERE `employee`.`office_code`=`in_office_code`;\n```", "```java\n  END $$\n```", "```java\nDELIMITER ;\n```", "```java\nGetEmpsInOffice geio = new GetEmpsInOffice();\n```", "```java\ngeio.setInOfficeCode(\"1\");\n```", "```java\ngeio.execute(ctx.configuration());\n```", "```java\nResults results = geio.getResults();\n```", "```java\nfor (Result<Record> result : results) {\n```", "```java\n  System.out.println(\"Result set:\\n\");\n```", "```java\n  for (Record record : result) {\n```", "```java\n    System.out.println(record);\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE PROCEDURE \n```", "```java\n  \"GET_EMPS_IN_OFFICE\"(\"in_office_code\" IN VARCHAR,\n```", "```java\n    \"cursor_office\" OUT SYS_REFCURSOR, \n```", "```java\n    \"cursor_employee\" OUT SYS_REFCURSOR) AS \n```", "```java\nBEGIN\n```", "```java\n  OPEN \"cursor_office\" FOR\n```", "```java\n    SELECT \"OFFICE\".\"CITY\", \"OFFICE\".\"COUNTRY\", \n```", "```java\n        \"OFFICE\".\"INTERNAL_BUDGET\"\n```", "```java\n    FROM \"OFFICE\"\n```", "```java\n    WHERE \"OFFICE\".\"OFFICE_CODE\" = \"in_office_code\";\n```", "```java\n  OPEN \"cursor_employee\" FOR\n```", "```java\n    SELECT \"EMPLOYEE\".\"EMPLOYEE_NUMBER\", \n```", "```java\n           \"EMPLOYEE\".\"FIRST_NAME\", \"EMPLOYEE\".\"LAST_NAME\"\n```", "```java\n    FROM \"EMPLOYEE\"\n```", "```java\n    WHERE \"EMPLOYEE\".\"OFFICE_CODE\" = \"in_office_code\";\n```", "```java\nEND;\n```", "```java\nGetEmpsInOffice geio = new GetEmpsInOffice();\n```", "```java\ngeio.setInOfficeCode(\"1\");\n```", "```java\ngeio.execute(ctx.configuration());\n```", "```java\nResult<Record> co = geio.getCursorOffice();\n```", "```java\nResult<Record> ce = geio.getCursorEmployee();\n```", "```java\nGetEmpsInOffice results = \n```", "```java\n   getEmpsInOffice(ctx.configuration(), \"1\");        \n```", "```java\nfor (Result<Record> result : results.getResults()) {\n```", "```java\n  …\n```", "```java\n}\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE PROCEDURE \n```", "```java\n    \"REFRESH_TOP3_PRODUCT\"(\"p_line_in\" IN VARCHAR2) AS \n```", "```java\nBEGIN\n```", "```java\n  DELETE FROM \"TOP3PRODUCT\"; \n```", "```java\n  INSERT INTO ...\n```", "```java\n      FETCH NEXT 3 ROWS ONLY;         \n```", "```java\nEND;\n```", "```java\nctx.begin(call(name(\"REFRESH_TOP3_PRODUCT\"))\n```", "```java\n   .args(val(\"Trains\")))\n```", "```java\n   .execute();\n```", "```java\nctx.call(name(\"REFRESH_TOP3_PRODUCT\"))\n```", "```java\n   .args(val(\"Trains\"))\n```", "```java\n   .execute();\n```", "```java\nParameter<Integer> quantity = in(\"quantity\", INTEGER);\n```", "```java\nParameter<Double> listPrice = in(\"list_price\", DOUBLE);\n```", "```java\nParameter<Double> fractionOfPrice = \n```", "```java\n  in(\"fraction_of_price\", DOUBLE);\n```", "```java\nctx.createOrReplaceFunction(\"sale_price_jooq\")\n```", "```java\n   .parameters(quantity, listPrice, fractionOfPrice)\n```", "```java\n   .returns(DECIMAL(10, 2))\n```", "```java\n   .deterministic()\n```", "```java\n   .as(return_(listPrice.minus(listPrice\n```", "```java\n     .mul(fractionOfPrice)).mul(quantity)))\n```", "```java\n   .execute();\n```", "```java\nDROP FUNCTION IF EXISTS `sale_price_jooq`;\n```", "```java\nCREATE FUNCTION `sale_price_jooq`(`quantity` INT, \n```", "```java\n         `list_price` DOUBLE, `fraction_of_price` DOUBLE) \n```", "```java\nRETURNS DECIMAL(10, 2) \n```", "```java\nDETERMINISTIC \n```", "```java\nBEGIN \n```", "```java\nRETURN ((`list_price` - (`list_price` * \n```", "```java\n         `fraction_of_price`)) * `quantity`); \n```", "```java\nEND;\n```", "```java\nfloat result = ctx.select(function(name(\"sale_price_jooq\"),\n```", "```java\n  DECIMAL(10, 2), inline(10), inline(20.45), inline(0.33)))\n```", "```java\n  .fetchOneInto(Float.class);\n```", "```java\nCREATE OR REPLACE FUNCTION \"swap_jooq\"(\n```", "```java\n       INOUT \"x\" INT, INOUT \"y\" INT) \n```", "```java\n  RETURNS RECORD LANGUAGE PLPGSQL AS $$ \n```", "```java\nBEGIN\n```", "```java\n  SELECT \"x\", \"y\" INTO \"y\", \"x\"; \n```", "```java\nEND; $$\n```", "```java\nParameter<Integer> x = inOut(\"x\", INTEGER);\n```", "```java\nParameter<Integer> y = inOut(\"y\", INTEGER);\n```", "```java\nctx.createOrReplaceFunction(\"swap_jooq\")\n```", "```java\n   .parameters(x, y)                 \n```", "```java\n   .returns(RECORD)                \n```", "```java\n   .as(begin(select(x, y).into(y, x)))\n```", "```java\n   .execute();\n```", "```java\nRecord1<Record> result = ctx.select(\n```", "```java\n  function(name(\"swap_jooq\"),\n```", "```java\n    RECORD, inline(1), inline(2))).fetchOne();\n```", "```java\nCREATE OR ALTER PROCEDURE [update_msrp_jooq] \n```", "```java\n   @product_id BIGINT, @debit INT AS \n```", "```java\nBEGIN\n```", "```java\n  UPDATE [classicmodels].[dbo].[product]\n```", "```java\n  SET [classicmodels].[dbo].[product].[msrp] = \n```", "```java\n      ([classicmodels].[dbo].[product].[msrp] - @debit)\n```", "```java\nWHERE [classicmodels].[dbo].[product].[product_id] = \n```", "```java\n      @product_id; \n```", "```java\nEND;\n```", "```java\nParameter<Long> id = in(\"id\", BIGINT);\n```", "```java\nParameter<Integer> debit = in(\"debit\", INTEGER);        \n```", "```java\nctx.createOrReplaceProcedure(\"update_msrp_jooq\")\n```", "```java\n   .parameters(id, debit)\n```", "```java\n   .as(update(PRODUCT)\n```", "```java\n        .set(PRODUCT.MSRP, PRODUCT.MSRP.minus(debit))\n```", "```java\n        .where(PRODUCT.PRODUCT_ID.eq(id)))\n```", "```java\n   .execute();\n```", "```java\n// CALL statement in an anonymous procedural block\n```", "```java\nvar result = ctx.begin(call(name(\"update_msrp_jooq\"))\n```", "```java\n       .args(inline(1L), inline(100)))\n```", "```java\n       .execute();\n```", "```java\n// CALL statement directly\n```", "```java\nvar result = ctx.call(name(\"update_msrp_jooq\"))\n```", "```java\n       .args(inline(1L), inline(100))\n```", "```java\n       .execute();\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE PROCEDURE \n```", "```java\n   \"get_avg_price_by_product_line_jooq\" (\n```", "```java\n      \"pl\" IN VARCHAR2,\"average\" OUT DECIMAL) AS \n```", "```java\nBEGIN\n```", "```java\n   SELECT AVG(\"CLASSICMODELS\".\"PRODUCT\".\"BUY_PRICE\")\n```", "```java\n   INTO \"average\" FROM \"CLASSICMODELS\".\"PRODUCT\"\n```", "```java\n   WHERE \"CLASSICMODELS\".\"PRODUCT\".\"PRODUCT_LINE\" = \"pl\";\n```", "```java\nEND;\n```", "```java\nParameter<String> pl = in(\"pl\", VARCHAR);\n```", "```java\nParameter<BigDecimal> average = out(\"average\", DECIMAL);\n```", "```java\nctx.createOrReplaceProcedure(\n```", "```java\n    \"get_avg_price_by_product_line_jooq\")\n```", "```java\n   .parameters(pl, average)\n```", "```java\n   .as(select(avg(PRODUCT.BUY_PRICE)).into(average)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .where(PRODUCT.PRODUCT_LINE.eq(pl)))\n```", "```java\n   .execute();\n```", "```java\nCREATE PROCEDURE `get_office_gt_budget_jooq`(`budget` INT) \n```", "```java\n  BEGIN\n```", "```java\n    SELECT `classicmodels`.`office`.`city`,\n```", "```java\n           `classicmodels`.`office`.`country`,\n```", "```java\n           `classicmodels`.`office`.`state`\n```", "```java\n    FROM `classicmodels`.`office`\n```", "```java\n    WHERE `classicmodels`.`office`.`internal_budget` > `budget`; \n```", "```java\n  END;\n```", "```java\nParameter<Integer> budget = in(\"budget\", INTEGER);\n```", "```java\nctx.createOrReplaceProcedure(\"get_office_gt_budget_jooq\")\n```", "```java\n   .parameters(budget)\n```", "```java\n   .as(select(OFFICE.CITY, OFFICE.COUNTRY, OFFICE.STATE)\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .where(OFFICE.INTERNAL_BUDGET.gt(budget)))\n```", "```java\n   .execute();\n```"]