- en: Chapter 5. RESTful Web Services by Example
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The APIs and technologies introduced and discussed in the previous chapters
    are suitable for different types of projects and use cases. This chapter covers
    how these APIs and technologies can fit into solutions and case-oriented software
    systems.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: After a brief introduction of what the application is supposed to do, we will
    break it down and focus on every component and technology used. So bring on the
    extra cup of mocha and join the fun.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following two samples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Event notification application showing Server-sent Events, **Async Servlet**,
    JSON-P API, and JAX-RS based on the **Twitter Search API**
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library application showing JAX-RS API, WebSockets, JSON-P API, and asynchronous
    JAX-RS resources to form an end-to-end solution
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event notification application
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Twitter-based application is the first sample application that will demonstrate
    a HTML5-based application developed on top of Server-sent Events, JAX-RS 2.0 API,
    Asynchronous Servlet, and the Twitter Search API together, to dynamically update
    a page with more search results periodically.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: The build system used for the sample application is **Maven** and the sample
    can be deployed in any Java EE 7-compatible application server notably GlassFish
    v4.0, an open source reference implementation of the Java EE 7 specification.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apache Maven is a build management tool. More information about Maven can be
    found at [http://maven.apache.org](http://maven.apache.org) and more information
    about GlassFish can be found at [https://glassfish.java.net/](http:// https://glassfish.java.net/)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The project's layout
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project''s directory layout follows the standard Maven structure, which
    is briefly explained in the following table:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: '| Source code | Description |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
- en: '| `src/main/java` | This directory contains all the sources required by the
    library application. |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
- en: '| `src/main/webapp` | This directory contains the JavaScript files, html files,
    and `WEB-INF/web.xml` file. |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
- en: The event notification GUI
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The event notification application consists of one screen, which serves as
    the vehicle for showing dynamic updates based on the Twitter feeds. The screen
    is shown in the following screenshot:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![The event notification GUI](img/8125EN_05_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: The application is a basic sample showing updates as the events carrying the
    updates happen and are received. This could be a newer tweet coming in, or Facebook
    friends' updates, or any other type of events consumable by any of the Java EE-managed
    components. The key point is, once the channel of communication is established
    with the server, it is up to the server to keep sending updates as they occur.
    The client does not poll for updates.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In this sample, when the servlet is loaded there is an **EJB timer**, which
    is run every 10 seconds and activates a CDI bean that uses the Twitter Search
    API to get new tweets. The Twitter Search API returns the tweets in JSON format.
    This tweet information is then sent to the client using Server-sent Events support
    with JAX-RS. On the client side the JSON data is parsed to display certain information
    on the screen.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: A detailed look at the event notification application
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After an initial introduction to what the application is supposed to do, let's
    dissect it further and study each individual component that builds this application.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the order in which the details of the application will be covered:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: The `web.xml`
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The implementation of the Application class
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The JAX-RS resource used in the application
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Asynchronous Servlet client used by the application
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The EJB that interacts with the Twitter Search API
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The web.xml
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To set up the application, configure the servlet deployment descriptor `web.xml`
    as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`MyApplication` is a subclass of `javax.ws.rs.Application`. It is used to register
    the JAX-RS resource so that it is known the JAX-RS API.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: The `async-supported` element is set to `true` to indicate that the servlet
    supports asynchronous processing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The implementation of the Application class
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the implementation of the `Application` subclass:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The `getClasses()` method is overridden to return the:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '`ServerSentEventsResource.class`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SseFeature.class`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ServerSentEventsResource` class is a simple JAX-RS that sends the JSON
    data from the Twitter Search API as Server-sent Events. We shall look at the`ServerSentEventsResource`
    in more detail in the next section.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: The `SseFeature.class` is an implementation provided by **Jersey** to support
    the `ServerSentEvents` feature. It will ensure the data is of the media type `"text/event-stream"`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To enable Server-sent Events feature, add `SseFeatures.class` to the list of
    classes returned by the `getClasses()` method in the implementation of the `javax.ws.rs.Application`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS resource used by the application
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is the source code of the `ServerSentEventsResource.java`. This is a simple
    POJO, annotated with `@Path` to identify the URI of the resource.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `EventOutput` class is a channel that provides the outbound Server-sent
    Events. When we return the `EventOutput` object from the `getMessage()` method,
    the Jersey implementation keeps the connection open so that the Server-sent Events
    can be sent. One instance of this class corresponds with exactly one HTTP connection.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: The `sendMessage()` method writes the message using the `eventOutput.write()`
    method. To write Server-sent Events, we use the `OutboundEvent.Builder()` method.
    A name `"custom-message"` is passed to this `OutboundEvent.Builder()` method and
    then we pass the message object to the `build()` method. The message object contains
    the tweets-related information for our sample.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, `OutboundEvent.Builder().id(id)` can be used to associate an ID
    with a Server-sent Event which is not covered previously.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，可以使用`OutboundEvent.Builder().id(id)`将一个ID与之前未涵盖的Server-sent Event关联。
- en: The Asynchronous Servlet client used by the application
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用程序使用的异步Servlet客户端
- en: In normal request response scenarios, a thread is kept running for each request
    till the response becomes available. This turns into a bottleneck in cases when
    the backend is taking a long time to process the requests, and the thread processing
    the request waits for the backend to finish preparing the required response and
    thus cannot take on any new incoming request.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常的请求响应场景中，每个请求都会保持一个线程运行，直到响应可用。当后端处理请求花费很长时间时，这会变成一个瓶颈，处理请求的线程等待后端完成准备所需的响应，因此无法处理任何新的传入请求。
- en: One way to solve this would be to save the request in a centralized queue and
    send the request as the threads are available to process the request. Calling
    the `startAsync()` method stores the request/response pair in a queue, the `doGet()`
    method returns, and the calling thread can be recycled.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个问题的一种方法是将请求保存在一个集中队列中，并在线程可用时发送请求。调用`startAsync()`方法将请求/响应对存储在队列中，`doGet()`方法返回，调用线程可以被回收。
- en: The following section discusses these concepts of asynchronous request processing
    with servlets.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的部分讨论了使用Servlet进行异步请求处理的概念。
- en: 'Here is the code of the Servlet client for the application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是应用程序的Servlet客户端代码：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is a Servlet with `urlPatterns={"/TestClient"}` and the `async-supported`
    attribute set to true. The `async-supported` attribute instructs the container
    that this servlet process the incoming requests asynchronously and thus the container
    should make the necessary modification in request allocation of the processing
    threads.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个设置了`urlPatterns={"/TestClient"}`和`async-supported`属性为true的Servlet。`async-supported`属性指示容器这个Servlet将异步处理传入的请求，因此容器应该对处理线程的请求分配进行必要的修改。
- en: 'The next snippet shows the implementation of the `service()` method that can
    handle the `GET` and `POST` requests:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码片段显示了处理`GET`和`POST`请求的`service()`方法的实现：
- en: '[PRE4]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding snippet, an instance of the `AsyncContext` object is obtained
    by invoking the `request.startAsync()` method.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，通过调用`request.startAsync()`方法获得`AsyncContext`对象的实例。
- en: The `asyncContext.setTimeout(60000)` method indicates a timeout in milliseconds
    for the asynchronous operations of the servlet.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`asyncContext.setTimeout(60000)`方法表示Servlet异步操作的毫秒级超时。'
- en: An implementation of an `AsyncListener` interface is added to the asynchronous
    context using the `asyncContext.addListener()` method.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`asyncContext.addListener()`方法向异步上下文添加一个`AsyncListener`接口的实现。
- en: After the `startAsync()` method is called on the request, an `AsyncEvent` object
    is sent to the implementation of the `AsyncListener` interface as the operation
    completes, there is an error, or the operation times out. As shown previously,
    we have an implementation of the `AsyncListener` interface that can implement
    the following methods `onComplete()`, `onError()`, `onTimeOut()`, or `onStartAsync()`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在请求上调用`startAsync()`方法后，当操作完成、出现错误或操作超时时，将发送一个`AsyncEvent`对象到`AsyncListener`接口的实现。如前所述，我们有一个实现`AsyncListener`接口的实现，可以执行以下方法：`onComplete()`、`onError()`、`onTimeOut()`或`onStartAsync()`。
- en: The `AsyncRequestProcessor` class shown in the following code is the `Runnable`
    instance of the thread, which does the actual work. The `AsyncRequestProcessor`
    class registers the `EventSource` object to listen for the Server-sent Events,
    which are sent by the JAX-RS `ServerSentEventsResource.java`, covered earlier.
    As events occur the `onEvent()` callback is triggered and JSONP is used to parse
    the events.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码中显示的`AsyncRequestProcessor`类是线程的`Runnable`实例，执行实际工作。`AsyncRequestProcessor`类将`EventSource`对象注册为监听由之前提到的JAX-RS
    `ServerSentEventsResource.java`发送的Server-sent Events。当事件发生时，`onEvent()`回调被触发，并使用JSONP解析事件。
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As seen in the preceding code, we use the **JSR 353 Java API for JSON Processing**
    to create a `JSonReader` object from the `inboundEvent#getData()` method. The
    `JSONArray` object is returned by the `jsonReader.readArray()` method. The `JsnObject`
    objects are read from the array and the tweet information is displayed.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述的代码所示，我们使用**JSR 353 Java API for JSON Processing**从`inboundEvent#getData()`方法创建一个`JSonReader`对象。`JSONArray`对象由`jsonReader.readArray()`方法返回。从数组中读取`JsnObject`对象，并显示推文信息。
- en: The EJB that interacts with the Twitter Search API
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here is the code for the EJB that will invoke the Twitter Search API. This EJB
    has a timer that will periodically call the Twitter Search API to get tweets for
    GlassFish and get the results in the JSON format.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `@Stateless` annotation indicates this is a stateless session bean.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '**Twitter v1.1 API** uses **OAuth** to provide authorized access to its API.
    Twitter offers applications the ability to issue authenticated requests on behalf
    of the application itself (as opposed to on behalf of a specific user). For more
    on **OAuth** please check [https://dev.twitter.com/docs/api/1.1/overview](https://dev.twitter.com/docs/api/1.1/overview).'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this demo, you will need to have a Twitter account and create an application
    based on information specified in this following link: [https://dev.twitter.com/docs/auth/oauth](https://dev.twitter.com/docs/auth/oauth).
    Please see the `Readme.txt` with the sample for instructions on how to run the
    sample.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: The following code uses the **twitter4j** API from [http://twitter4j.org/en/index.html](http://twitter4j.org/en/index.html)
    to integrate Java and the Twitter API.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Here is the code that will connect to `SEARCH_URL` and get the tweets
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code reads the `twitter4j.properties` and creates a `ConfigurationBuilder`
    object with the `consumerKey`, `consumerSecret`, `accessToken`, and `accessTokenSecret`
    keys. Using the `TwitterFactory` API an instance of Twitter object is created.
    A `Query` object to send the search request to Twitter with the keyword `"glassfish"`
    is created. The `twitter.search` returns tweets that match a specified query.
    This method calls [http://search.twitter.com/search.json](http://search.twitter.com/search.json).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: Once the `QueryResult` object is obtained, the `JsonArrayBuilder` object is
    used to build the JSON object containing the results. For more information on
    twitter4j API please check [http://twitter4j.org/oldjavadocs/3.0.0/index.html](http://twitter4j.org/oldjavadocs/3.0.0/index.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: The EJB bean has an additional method that will invoke the **EJB timer**. Here
    is the EJB Timer code that will send these tweets, which are obtained from the
    Twitter Search API, to the REST Endpoint `ServerSentEventsResource` using the
    `POST` method.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `@Schedule` annotation is used to schedule fetching tweets every 10 seconds.
    The EJB specification has more details on usages of `@Schedule`. The `JsonArray`
    object statuses get the feeds from the `getFeedData()` method that was covered
    in the earlier section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: '`WebTarget` is created with the `TARGET_URI` that is the URL `http://localhost:8080/jersey-sse-twitter-sample`
    where the application is deployed.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: The `webTarget.path("twittersse")` method points to the location of the `ServerSentEventsResource`
    class covered earlier that is the REST resource.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Using the `request().post(Entity.text(message))` method the tweets that are
    obtained from the Twitter Search API are sent as a Text Entity.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the sequence of events:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The user deploys the application and invokes the Servlet client from this URL
    `http://localhost:8080/jersey-sse-twitter-sample`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The EJB timer gets scheduled every 10 seconds.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The EJB timer will invoke the Twitter Search API to get the tweets for `"glassfish"`
    in JSON format.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The EJB timer sends the data obtained in step to the JAX-RS `ServerSentEventsResource`
    class using the `POST` request.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The JAX-RS resource `ServerSentEventsResource` opens the `EventOutput` channel,
    which is the outbound channel for the Server-sent Events.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Servlet client in step 1 has the `EventSource` object open that is listening
    for the Server-sent Events.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Servlet client uses JSON-P API to parse the Twitter feeds.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally the tweets are shown in the browser.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The library application
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The library application is a simple, self-contained, real-life-based application
    that demonstrates HTML5 technologies such as WebSockets and shows how to use JAX-RS
    verbs, how to write data using JSON-P API, and how to take advantage of the asynchronous
    aspect of processing the resources. To stay on track the application contains
    the components that describe the preceding technologies using a simple GUI and
    does not have fancy dialog boxes or very complicated business logic.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: How the application is deployed
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The build system used for the sample application is Maven and the sample can
    be deployed in any Java EE 7-compatible application server, notably GlassFish
    v4.0, which is an open source reference implementation of Java EE specification.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: The project's layout
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The project''s directory layout follows the standard Maven structure, which
    is briefly explained in the following table:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '| Source code | Description |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
- en: '| `src/main/java` | This directory contains all the sources required by the
    library application. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
- en: '| `src/main/webapp` | This directory contains the JavaScript files, HTML files,
    and the `WEB-INF/web.xml` file. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
- en: The library application GUI
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The library application consists of one screen that serves as the vehicle for
    showing different rendering of the data and forms for gathering inputs. The screen
    is shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![The library application GUI](img/8125EN_05_02.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: 'Using the screen, a user can do the following operations:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: Browse the collection of books.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for a book.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Checkout a book.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return a book.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place hold on a book.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following table shows the action taken by a user, the details of what happens
    behind the scenes, and the API and technologies involved in processing the requests:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '| Action | API and technology used |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
- en: '| Browse the collection of books | This task uses the JAX-RS `GET` verb to
    get the collection of books in the library. It uses the JSON-P API to write the
    data in JSON format. We use an implementation of JAX-RS `MessageBodyWriter` class,
    which knows how to serialize a custom class to JSON output. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
- en: '| Borrow a book | When a book is checked out from the library it reduces from
    the collection of books, which the library has. This task demonstrates the use
    of the JAX-RS verb `DELETE` and deletes the book from the collection. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| 借阅书籍 | 当从图书馆借阅书籍时，它将从图书馆拥有的书籍集合中减少。这个任务展示了 JAX-RS 动词 `DELETE` 的使用，并将书籍从集合中删除。|'
- en: '| Return a book | When a book is returned to the library it will be added to
    the collection of books that the library has. This task demonstrates the use of
    the JAX-RS verb `POST` and adds the book to the collection. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| 归还书籍 | 当书籍归还到图书馆时，它将被添加到图书馆拥有的书籍集合中。这个任务展示了 JAX-RS 动词 `POST` 的使用，并将书籍添加到集合中。|'
- en: '| Place hold on a book | When a book is placed on hold, the library application
    should notify other users currently having the book to return it. Once the book
    is returned, a notification should be sent to the user requesting the book. This
    is an asynchronous operation. This task demonstrates the use of asynchronous processing
    of the JAX-RS resources. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| 预订书籍 | 当一本书被预订时，图书馆应用程序应该通知当前拥有这本书的其他用户归还它。一旦书籍归还，应向请求书籍的用户发送通知。这是一个异步操作。这个任务展示了
    JAX-RS 资源异步处理的使用。|'
- en: Application interaction monitoring
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序交互监控
- en: There is a pane that will show what is the query, which was sent to the endpoint.
    Additionally, we will show the output returned by the endpoint.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个面板会显示发送到端点的查询，此外，我们还将显示端点返回的输出。
- en: A detailed look at the library application
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对图书馆应用程序的详细分析
- en: After an initial introduction to what the application is supposed to do, let's
    dissect it further and study each individual component that builds this application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在对应用程序应该做什么的初步介绍之后，让我们进一步剖析它，并研究构建此应用程序的每个单独组件。
- en: 'The following is the order in which the details of the application will be
    covered:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将介绍应用程序详细信息的顺序：
- en: The `web.xml`
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.xml`'
- en: The `Application` subclass implementation in our application
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序中 `Application` 子类的实现
- en: The JAX-RS Entity Providers used in our application
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应用程序中使用的 JAX-RS 实体提供者
- en: The HTML page
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML 页面
- en: 'JavaScript snippets and JAX-RS resource methods for the following functions:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下功能的 JavaScript 片段和 JAX-RS 资源方法：
- en: Browsing the collection of books
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览书籍集合
- en: Searching for a book
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索书籍
- en: Checking out a book
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借阅书籍
- en: Returning a book
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 归还书籍
- en: Placing a hold on the book
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订书籍
- en: The web.xml
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`web.xml`'
- en: 'To set up the application, configure the servlet deployment descriptor `web.xml`
    as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置应用程序，按照以下方式配置 servlet 部署描述符 `web.xml`：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the preceding snippet, we defined a servlet to take the subclass of the JAX-RS
    Application `BookApplication`. The URL pattern is `/app/*`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的片段中，我们定义了一个用于接收 JAX-RS 应用程序 `BookApplication` 子类的 servlet。URL 模式是 `/app/*`。
- en: The Application subclass
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`Application` 子类'
- en: Here is the snippet of the `BookApplication` class, which is mentioned in the
    `web.xml` description.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 `BookApplication` 类的片段，该片段在 `web.xml` 描述中提到。
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `BookApplication` class extends the JAX-RS `Application` class. In the
    `getClasses()` method implementation, the following are registered:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`BookApplication` 类扩展了 JAX-RS 的 `Application` 类。在 `getClasses()` 方法实现中，以下内容被注册：'
- en: '`BookResource.class`'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BookResource.class`'
- en: '`BookCollectionWriter.class`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BookCollectionWriter.class`'
- en: '`BookWriter.class`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BookWriter.class`'
- en: The `BookResource` class is covered in detail in the next few sections, with
    every function of the JavaScript; the corresponding method of the `BookResource`
    class will be explained.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`BookResource` 类将在接下来的几节中详细介绍，包括 JavaScript 的每个功能；`BookResource` 类的相应方法将进行解释。'
- en: The `BookCollectionWriter` class is an implementation of a `MessageBodyWriter`
    interface, which takes a `List<Book>` object and serializes it to the JSON format.
    To produce the `application/json` encoded output, the `BookCollectionWriter` class
    uses JSON-P API.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`BookCollectionWriter` 类是 `MessageBodyWriter` 接口的一个实现，它接收一个 `List<Book>` 对象并将其序列化为
    JSON 格式。为了产生 `application/json` 编码的输出，`BookCollectionWriter` 类使用了 JSON-P API。'
- en: The `BookWriter` class provides the facility to serialize the user-defined `Book`
    class, which is shown in the following section. The `Book` class has fields such
    as name of the book, author, and ISBN. Using this `BookWriter` class it is possible
    to convert this `Book` class into a format specified in the resource, for example,
    `"text/plain"` or `"application/json"`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'JAX-RS Entity Provider: BookCollectionWriter'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to the `BookWriter` class covered in the earlier section there is a
    class called `BookCollectionWriter` in the sample; this is used to serialize a
    list of books. Here is an implementation of the `writeTo()` method in the `BookCollectionWriter`
    class:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding code does media type filtering; if the `mediaType` parameter equals
    `MediaType.APPLICATION_JSON_TYPE`, then it uses the JSON-P API to create a `JsonGenerator`
    object. Using the `writeStartArray()` and `writeStartObject()` methods of `JsonGenerator`
    class, the array of JSON objects is written.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: If the `mediaType` parameter equals `MediaType.TEXT_PLAIN_TYPE`, then a String
    representation of the books is returned.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: The HTML page
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As you may recall, when the application is launched in the browser, you will
    see the `index.html` screen. Let''s take a peek at the source code of the `index.html`
    file:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is standard HTML, which uses an external JavaScript file called `main.js`
    to import the following functionalities:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the collection of books
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching for a book
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking out a book
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Returning a book
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placing hold on a book
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The highlighted `div` elements `query` and `output` show the JAX-RS query and
    the output on the page. Every button has an `onclick()` event associated with
    it that calls a function in JavaScript. Each function shall be covered in detail
    in the next section.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Browsing the collection of books
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user clicks on the **Browse Collection** button on the HTML page, the
    input is checked and then the `sendBrowseRequest()` function is called in the
    JavaScript.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  id: totrans-165
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet of the `sendBrowseRequest()`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `createRequest()` function is used to create an `XMLHttpRequest` object
    as covered in [Chapter 2](ch02.html "Chapter 2. WebSockets and Server-sent Events"),
    *WebSockets and Server-sent Events*. The request, which is sent to the JAX-RS
    resource, is a `GET` request with the URI `/app/library/books` (we shall cover
    the JAX-RS resource in the next section). When the value of the `XMLHttpRequest`
    object's `readyState` is `4`, it means that the response is complete and we can
    get the data. In our sample, we display the `responseText` using the snippet `document.getElementById("output").innerHTML=req.responseText;`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS resource method for the GET request
  id: totrans-169
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet for the `GET` request:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This is a very simple method that will use the `BookCollectionWriter` class
    that we covered earlier to output the `List<Book>` objects in JSON format or in
    the plain text format.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Searching for a book
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user clicks on the **Search** button on the HTML page, the `sendSearchWSRequest()`
    function is called in the JavaScript.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `sendSearchWSRequest()` function demonstrates the WebSockets functionality
    in our application. A WebSocket URI is initializing in the JavaScript as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `sendSearchWSRequest()` function uses the WebSocket JavaScript API to send
    the string `book` name to the `BookWebSocket` class shown in the following section.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: The WebSockets endpoint
  id: totrans-179
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet for the WebSockets''s `ServerEndpoint` annotated class
    `BookWebSocket`:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `BookWebSocket` is a POJO that is annotated with `@ServerEndpoint` and initialized
    to a URI of `/app/websockets`. The `@OnMessage` annotation on the `searchBook()`
    method will cause this method to be invoked when the WebSockets server endpoint
    receives the message. The WebSockets endpoint simply returns back a string with
    the name of the book for the case of simplicity of the sample.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: Checking out a book
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user clicks on the **Checkout** button on the HTML page, the input is
    checked and then the `sendCheckoutRequest()` function is called in the JavaScript.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  id: totrans-185
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet of the `sendCheckoutRequest()` function:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The request, which is sent to the JAX-RS resource, is a `DELETE` request placed
    on the `/app/library/book/` URI. We will cover the JAX-RS resource in the next
    section.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS resource method for the DELETE request
  id: totrans-189
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the code snippet for the `DELETE` request:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This is a very simple method that will delete the book if it exists in the collection
    and send back the book details using the `BookWriter` class covered earlier.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: Returning a book
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user clicks on the **Return** button on the HTML page, the input is checked
    and then the `sendReturnRequest()` function is called in the JavaScript.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet of the `sendReturnRequest()` function:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The request, which is sent to the JAX-RS resource, is a `POST` request with
    `app/library/book/` as the target URI.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS resource method for the POST request
  id: totrans-199
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the code snippet for the `POST` request:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Placing a hold on a book
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a user clicks on the **Hold** button on the HTML page, the input is checked
    and then the `sendHoldRequest()` function is called in the JavaScript.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Using JavaScript
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the snippet of the `sendHoldRequest()` function:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: A `POST` request is sent to the JAX-RS resource located at the `app/library/hold/`
    URI. The resource is described in the next section.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: The JAX-RS resource method for the asynchronous POST request
  id: totrans-208
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Here is the JAX-RS resource method that places a hold on a book. This is an
    asynchronous resource, which is covered in [Chapter 4](ch04.html "Chapter 4. JSON
    and Asynchronous Processing"), *JSON and Asynchronous Processing*:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The parameter `ar` of type `AsyncResponse` is similar to the `AsyncContext`
    class in the Servlet 3.0 specification and facilitates asynchronous request execution.
    In this example the request is suspended for a specific duration and the response
    is pushed to the client with the `AsyncResponse.resume()` method.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: The Singleton EJB BookService
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is the code for the Singleton EJB, which stores the details about the
    books:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Thus, we have seen a detailed view of the library application, which uses the
    different JAX-RS 2.0, WebSockets, and JSON-P APIs.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered two real life examples of RESTful Web Services. At the
    beginning, using the event notification sample, we demonstrated how to use Server-sent
    Events with asynchronous processing of servlets and how the server can push data
    to the clients as and when the events occur.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Continued on, in the library application we covered the JAX-RS API and also
    the custom message body readers, writers. We also demonstrated the use of JSON-P
    API. The library application showed how to use WebSockets from a JavaScript client
    and send messages to WebSockets endpoints.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
