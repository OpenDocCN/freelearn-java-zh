["```java\nopenapi: 3.0.1\ninfo:\n  title: Product Catalogue API\n  description: API for managing product catalog\n  version: 0.0.1\nservers:\n  - url: http://localhost:8080\n    description: Generated server url\ntags:\n  - name: products\n    description: the products API \n```", "```java\npaths:\n  /api/products/{productId}:\n    get:\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          schema:\n            type: string\n          example: AK21109\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductOutput'\n        '400':\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ProblemDetail'\n        '404':c\n          content:\n            '*/*':\n              schema:\n                $ref: '#/components/schemas/ProblemDetail' \n```", "```java\n put:\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ProductInput'\n        required: true\n      responses:\n        '200':\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ProductOutput'\n        '201': \n```", "```java\n /api/products:\n    get:\n      tags:\n        - products\n      summary: Retrieve all products\n      operationId: getProducts\n      responses:\n        '200':\n          description: A list of products\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref:\n    '#/components/schemas/ProductOutput' \n```", "```java\ncomponents:\n  schemas:\n    ProductOutput:\n      type: object\n      properties:\n        name:\n          type: string\n          example: Keyboard\n        productId:\n          type: string\n          description: ID of the product to delete\n          example: AK21109\n        description:\n          type: string\n          example: Ergonomic Keyboard\n        price:\n          type: number\n          example: 60 \n```", "```java\n<dependency>\n    <groupId>org.springdoc</groupId>\n    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>\n    <version>2.5.0</version>\n</dependency> \n```", "```java\n@Tag(name = \"products\", description = \"the products API\")\npublic interface ProductsApi {\n....\n} \n```", "```java\n@Operation(\n    operationId = \"deleteProduct\",\n    summary = \"Logical remove a product by ID\",\n    responses = {\n        @ApiResponse(responseCode = \"204\",\n            description = \"Product removed successfully\"),\n    }\n)\nResponseEntity<Void> deleteProduct(\n    @Parameter(name = \"productId\",\n        description = \"ID of the product to delete\", required = true,\n        in = ParameterIn.PATH, example = \"AK21109\") @ValidSku\n        String productId\n); \n```", "```java\n@Operation(\n    operationId = \"getProductById\",\n    summary = \"Retrieve a product by ID\",\n    responses = {\n        @ApiResponse(responseCode = \"200\", description = \"Product found\",\n            content = {\n                @Content(mediaType = \"application/json\",\n                schema = @Schema(implementation = ProductOutput.class))}),\n        @ApiResponse(responseCode = \"404\",\n            description = \"Product not found\",content = @Content(\n                schema = @Schema(implementation = ProblemDetail.class),\n                examples = {\n                    @ExampleObject(name = \"Validation Error\",\n                        summary = \"Example of validation error\",\n                        value = \"\"\"\n                        {\"type\":\"about:blank\",\n                         \"title\": \"Not Found\",\n                         \"status\": 404,\n                         \"detail\": \"Product not found with id AK21102\",\n                         \"instance\": \"/api/products/AK21102\"\n                         }\n\"\"\")}))})\nResponseEntity<ProductOutput> getProductById(\n    @Parameter(name = \"productId\",\n        description = \"ID of the product to delete\", required = true,\n        in = ParameterIn.PATH, example = \"AK21109\")\n    @ValidSku String productId\n); \n```", "```java\npublic record ProductInput(\n        @NotBlank\n        @Size(min = 3, max = 255)\n        **@****Schema****(name =** **\"name\"****,**\n **requiredMode =** **Schema****.RequiredMode.REQUIRED,**\n **example =** **\"Keyboard\"****)**\n        @JsonProperty(\"name\")\n        String name,\n        @NotBlank\n        @Size(min = 10, max = 255)\n        **@Schema****(name =** **\"description\"****,**\n **requiredMode =** **Schema****.RequiredMode.REQUIRED,**\n **example =** **\"Ergonomic Keyboard\")**\n        @JsonProperty(\"description\")\n        String description,\n        @NotNull\n        @Positive\n        **@Schema****(name =** **\"price\",**\n **requiredMode =** **Schema****.RequiredMode.REQUIRED,**\n **example =** **\"60.0\"****)**\n        @JsonProperty(\"price\")\n        BigDecimal price) {\n} \n```", "```java\n \"ProductInput\": {\n        \"required\": [\n            \"description\",\n            \"name\",\n            \"price\"\n        ],\n        \"type\": \"object\",\n        \"properties\": {\n            \"name\": {\n            \"maxLength\": 255,\n            \"minLength\": 3,\n            \"type\": \"string\",\n            \"example\": \"Keyboard\"\n            },\n            \"description\": {\n                \"maxLength\": 255,\n                \"minLength\": 10,\n                \"type\": \"string\",\n                \"example\": \"Ergonomic Keyboard\"\n            },\n            \"price\": {\n                \"type\": \"number\",\n                \"example\": 60\n            }\n        }\n    } \n```", "```java\n@Configuration\npublic class SpringDocConfiguration {\n  @Bean\n  OpenAPI apiInfo(\n    @Value(\"${application.version}\") String version) {\n    return new OpenAPI().info(\n      new Info()\n        .title(\"Product Catalogue API\")\n        .description(\"API for managing product catalog\")\n        .version(version));\n  }\n} \n```"]