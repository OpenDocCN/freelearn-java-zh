- en: Exploring Advanced Interactions of WebDriver
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we discussed the WebDriver interface and its features,
    including taking screenshots, working with Windows, frames, alerts, cookies, and
    synchronizing tests. In this chapter, we will go through some advanced ways of
    performing actions on WebElements. We will learn how to perform actions, using
    the actions API of Selenium WebDriver, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Complex mouse actions, such as moving the mouse, double-clicking, and dragging
    and dropping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard shortcuts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the build and perform actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We know how to perform some basic actions, such as clicking on a button and
    typing text into a textbox; however, there are many scenarios where we have to
    perform multiple actions at the same time, for example, keeping the *Shift* button
    pressed and typing text for uppercase letters, and the dragging and dropping mouse
    actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a simple scenario here. Open the [http://guidebook.seleniumacademy.com/Selectable.html](http://guidebook.seleniumacademy.com/Selectable.html).
    A box of tiles numbered 1 to 12 will appear, as seen in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83234a72-4071-496d-a528-be94774ba35b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you inspect the elements with browser developer tools, you will see an ordered
    list tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you click a number, its background color changes to orange. Try selecting
    the tiles 1, 3, and 5\. You do that by holding down *Ctrl* + tile 1 + tile 3 +
    tile 5\. This involves performing multiple actions, that is, holding *Ctrl* continuously
    and clicking on tiles 1, 3, and 5\. How do we perform these multiple actions using
    WebDriver? The following code demonstrates how:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you refer to the code, we are getting introduced to a new class named
    `Actions`. This `Actions` class is the one that is used to emulate all the complex
    user events. Using this, the developer of the test script could combine all the
    necessary user gestures into one composite action. We have declared all the actions
    that are to be executed to achieve the functionality of clicking on the numbers
    1, 3, and 5\. Once all the actions are grouped together, we build that into a
    composite action. `Action` is an interface that has only the `perform()` method,
    which executes the composite action. When we execute the test, tiles 1, 3, and
    5 will be selected one by one. Finally, tile 5 will be selected, as shown in this
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3536f3af-e12e-48f4-8ec0-71bbded32f68.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, to make WebDriver perform multiple actions at the same time, you need to
    follow a three-step process of using the user-facing API of the actions class
    to group all the actions, then build the composite action, and perform the action.
    This process can be made into a two-step process, as the `perform()` method internally
    calls the `build()` method. So the previous code will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have directly invoked the `perform()` method on the
    `Actions` instance, which internally calls the `build()` method to create a composite
    action before executing it. In the subsequent sections of this chapter, we will
    take a closer look at the `Actions` class. All the actions are basically divided
    into two categories: mouse-based actions and keyboard-based actions. In the following
    sections, we will discuss all the actions that are specific to the mouse and keyboard
    available in the `Actions` class.'
  prefs: []
  type: TYPE_NORMAL
- en: Learning mouse based interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are around eight different mouse actions that can be performed using the
    actions class. We will see each of their syntax and a working example.
  prefs: []
  type: TYPE_NORMAL
- en: The moveByOffset action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `moveByOffset()` method is used to move the mouse from its current position
    to another point on the web page. Developers can specify the *x* distance and
    the *y* distance the mouse has to be moved. When the page is loaded, generally
    the initial position of the mouse would be (0, 0), unless there is an explicit
    focus declared by the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `moveByOffset()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `xOffSet` is the input parameter providing the WebDriver
    the amount of offset to be moved along the *x* axis. A positive value is used
    to move the cursor to the right, and a negative value is used to move the cursor
    to the left.
  prefs: []
  type: TYPE_NORMAL
- en: '`yOffSet` is the input parameter providing the WebDriver the amount of offset
    to be moved along the *y* axis. A positive value is used to move the cursor down
    along the *y* axis, and a negative value is used to move the cursor toward the
    top.'
  prefs: []
  type: TYPE_NORMAL
- en: When the `xOffSet` and `yOffSet` values result in moving the cursor out of the
    document, a  `MoveTargetOutOfBounds` exception is raised.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a working example of it. The objective of the following code is
    to move the cursor on to tile 3 on the web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eabd86c4-a1fb-4b7a-b922-4fb254413d85.png)'
  prefs: []
  type: TYPE_IMG
- en: We have added `+1` to the coordinates, because if you observe the element in
    Firebug, we have a style border of 1 px. The border is a CSS-style attribute,
    which when applied to an element will add a border of the specified color around
    the element, with the specified amount of thickness. Though the previous code
    does move your mouse over tile 3, we don't realize this, because we are not performing
    any action there. We will see this shortly, when we use the `moveByOffset()` method
    in combination with the `click()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The click at current location action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `click()` method is used to simulate the left-click of your mouse at its
    current point of location. This method doesn't really realize where or on which
    element it is clicking. It just clicks wherever it is at that point in time. Hence,
    this method is used in combination with some other action, rather than independently,
    to create a composite action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `click()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`public Actions click()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `click()` method doesn''t really have any context about where it is performing
    its action; hence, it doesn''t take any input parameter. Let''s see a code example
    of the `click()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the above example we have used a combination of the `moveByOffset()` and
    `click()` methods to move the cursor from point (0, 0) to the point of tile 7\.
    Because the initial position of the mouse is (0, 0), the *x*, *y* offset provided
    for the `moveByOffset()` method is nothing but the location of the tile 7 element.
    Now let''s try to move the cursor from tile 1 to tile 11, and from there to tile
    5, and see how the code looks. Before we get into the code, let''s inspect the
    `Selectable.html` page using Firebug. The following is the style of each tile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The three elements with which we are concerned for our offset movement in the
    preceding style code are: `height`, `width`, and the `border` thickness. Here,
    the `height` value is `80px`, the `width` value is `100px`, and the `border` value
    is `1px`. Use these three factors to calculate the offset to navigate from one
    tile to the other. Note that the border thickness between any two tiles will result
    in `2 px`, that is, `1 px` from each tile. The following is the code that uses
    the `moveByOffset` and `click()` methods to navigate from tile 1 to tile 11, and
    from there to tile 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The click on a WebElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen how to click a WebElement by calculating the offset to it. This
    process may not be needed every time, especially when the WebElement has its own
    identifiers, such as a name or an ID. We can use another overloaded version of
    the `click()` method to click directly on the WebElement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for clicking on a WebElement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The input parameter for this method is an instance of the WebElement on which
    the `click` action should be performed. This method, like all the other methods
    in the `Actions` class, will return an `Actions` instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s try to modify the previous code example to use the `click(WebElement)`
    method, instead of using the `moveByOffset()` method, to move to the location
    of the WebElement and click on it using the `click()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Now the `moveByOffset()` method has been replaced by the `click(WebElement)`
    method, and, all of a sudden, the complex coordinate geometry has been removed
    from the code. If you're a tester, this is one more good reason to push your developers
    to provide identifiers for the WebElements.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you observe the previous examples for the `moveByOffset` and `click` methods,
    all the operations of moving the mouse and clicking on tiles 1, 11, and 5 are
    built separately and performed separately. This is not how we use our `Actions`
    class. You can actually build all these actions together and then perform them.
    So, the preceding code will turn out to be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The click and hold at current location action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `clickAndHold()` method is another method of the actions class that left-clicks
    on an element and holds it without releasing the left button of the mouse. This
    method will be useful when executing operations such as drag and drop. This method
    is one of the variants of the `clickAndHold()` method that the actions class provides.
    We will discuss the other variant in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the `Sortable.html` file that came with the book. You can see that
    the tiles can be moved from one position to the other. Now let''s try to move
    tile 3 to the position of tile 2. The sequence of steps that are involved to do
    this are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the cursor to the position of tile 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click and hold tile 3.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the cursor in this position to tile 2's location.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s see how this can be accomplished, using the WebDriver''s `clickAndHold()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s analyze the following line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The tile movement will be similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/944e4722-7d84-4f9e-9483-70df3f8ed449.png)'
  prefs: []
  type: TYPE_IMG
- en: First, we move the cursor to the location of tile 3. Then, we click and hold
    tile 3. Then, we move the cursor by `120px` horizontally to the position of tile
    2\. The last line performs all the preceding actions. Now execute this in your
    eclipse and see what happens. If you observe closely, tile 3 doesn't properly
    go into the position of tile 2\. This is because we are yet to release the left
    button. We just commanded the WebDriver to click and hold, but not to release.
  prefs: []
  type: TYPE_NORMAL
- en: The click and hold a WebElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we have seen the `clickAndHold()` method, which will
    click and hold a WebElement at the current position of the cursor. It doesn't
    care about which element it is dealing with. So, if we want to deal with a particular
    WebElement on the web page, we have to first move the cursor to the appropriate
    position and then perform the `clickAndHold()` action. To avoid the hassle of
    moving the cursor geometrically, WebDriver provides the developers with another
    variant or overloaded method of the `clickAndHold()` method that takes the WebElement
    as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax is this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The input parameter for this method is the WebElement that has to be clicked
    and held. The return type, as in all the other methods of the `Actions` class,
    is the `Actions` instance. Now let''s refactor the example in the previous section
    to use this method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The only change is that we have removed the action of moving the cursor to the
    `(200, 20)` position and provided the WebElement to the `clickAndHold()` method
    that will take care of identifying the WebElement.
  prefs: []
  type: TYPE_NORMAL
- en: The release at current location action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, in the previous example, we have seen how to click and hold an element.
    The ultimate action that has to be taken on a held WebElement is to release it
    so that the element can be dropped or released from the mouse. The `release()`
    method is the one that can release the left mouse button on a WebElement.
  prefs: []
  type: TYPE_NORMAL
- en: The API syntax for the `release()` method is as follows: `public Actions release()`.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding method doesn't take any input parameter and returns the `Actions`
    class instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify the previous code to include the `release` action in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will make sure that the mouse is released at the specified
    location.
  prefs: []
  type: TYPE_NORMAL
- en: The release on another WebElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is an overloaded version of the `release()` method. Using this, you can
    actually release the currently held WebElement in the middle of another WebElement.
    In this way, we don't have to calculate the offset of the target WebElement from
    the held WebElement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The input parameter for the preceding method is obviously the target WebElement,
    where the held WebElement should be dropped. The return type is the instance of
    the `Actions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the preceding code example to use this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Look at how simple the preceding code is. We have removed all the `moveByOffset`
    code and added the `release()` method that takes the WebElement with the name
    `two` as the input parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking the `release()` or `release(WebElement)` methods without calling the
    `clickAndHold()` method will result in an undefined behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The moveToElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `moveToElement()` method is another method of WebDriver that helps us to
    move the mouse cursor to a WebElement on the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `moveToElement()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The input parameter for the preceding method is the target WebElement, where
    the mouse should be moved. Now go back to the `clickAndHold` at *current location
    action* section of this chapter and try to modify the code to use this method.
    The following is the code we have written in *The click-and-hold-at-current-location
    action* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we will replace the `moveByOffset(x, y)` method with
    the `moveToElement(WebElement)` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have moved to tile 3, clicked and held it, and then
    moved to the location of tile 2, by specifying its offset. If you want, you can
    add the `release()` method before the `perform()` method.
  prefs: []
  type: TYPE_NORMAL
- en: There might be a number of ways to achieve the same task. It is up to the user
    to choose the appropriate ones that best suit the given circumstances.
  prefs: []
  type: TYPE_NORMAL
- en: The dragAndDropBy action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There might be many instances where we may have to drag and drop components
    or WebElements of a web page. We can accomplish that by using many of the actions
    seen until now. But WebDriver has given us a convenient out-of-the-box method
    to use. Let's see its API syntax.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `dragAndDropBy()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `WebElement` input parameter is the target WebElement to be dragged, the
    `xOffset` parameter is the horizontal offset to be moved, and the `yOffset` parameter
    is the vertical offset to be moved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a code example for it. Open the HTML file, `DragMe.html`, provided
    with this book. It has a square box, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9dfa2b9d-f4b9-465a-a5e1-c32911386701.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can actually drag that rectangle to any location on the web page. Let''s
    see how we can do that, using WebDriver. The following is the code example for
    that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, `dragMe` is the WebElement that is identified by its
    `id`, and that is dragged `300px` horizontally and `200px` vertically. The following
    screenshot shows how an element is dragged from this position:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8db11150-9639-44a0-8c0b-c431f32f1c7d.png)'
  prefs: []
  type: TYPE_IMG
- en: The dragAndDrop action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `dragAndDrop()` method is similar to the `dragAndDropBy()` method. The only
    difference being that, instead of moving the WebElement by an offset, we move
    it on to a target element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `dragAndDrop()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The input parameters for the preceding method are the WebElement source and
    the WebElement target, while the return type is the `Actions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a working code example for it. Open the `DragAndDrop.html` file,
    which is provided with the book, with two square boxes, as shown in this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a805d005-ebdd-4cdc-80fe-12c29f8158f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here, we can actually drag the Drag me to my target rectangle to the Drop here
    rectangle. Try that. Let''s see how that can be achieved, using WebDriver:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the source and target WebElements are identified by
    their IDs, and the `dragAndDrop()` method is used to drag one to the other. Here,
    out of the script with first square box dropped on the second box shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6ee19696-4b35-42f6-ac0c-9b6172088063.png)'
  prefs: []
  type: TYPE_IMG
- en: The double click at current location action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Moving on to another action that can be performed using a mouse, `doubleClick()`
    is another out- of-the-box method that WebDriver provides to emulate the double-clicking
    of the mouse. This method, like the `click()` method, comes in two flavors. One
    is double-clicking a WebElement, which we will discuss in next section; the second
    is clicking at the current location of the cursor, which will be discussed here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, the preceding method doesn''t take any input parameters, as it just
    clicks on the current cursor location and returns an actions class instance. Let''s
    see how the previous code can be converted to use this method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have used the `moveToElement(WebElement)` method
    to move the mouse to the location of the button element and just double-clicked
    at the current location. Here is the output after performing the double-click
    on the element on the sample page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f703cd69-1145-43e4-9b43-c8a65cd189bc.png)'
  prefs: []
  type: TYPE_IMG
- en: The double click on WebElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen a method that double-clicks at the current location, we
    will discuss another method that WebDriver provides to emulate the double-clicking
    of a WebElement.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `doubleClick()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The input parameter for the preceding method is the target WebElement that has
    to be double-clicked, and the return type is the `Actions` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see a code example for this. Open the `DoubleClick.html` file and *single*-click
    on the Click Me button. You shouldn''t see anything happening. Now double-click
    on the button; you should see an alert saying Double Clicked !!. Now we will try
    to do the same thing using WebDriver. The following is the code to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: After executing the preceding code, you should see an alert dialog saying that
    the button has been double-clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The context click on WebElement action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `contextClick()` method, also known as *right-click*, is quite common on
    many web pages these days. It displays a menu similar to this screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dabf2a1-2c7f-4ab4-a9ed-b66686e65be4.png)'
  prefs: []
  type: TYPE_IMG
- en: This context menu can be accessed by a right-click of the mouse on the WebElement.
    WebDriver provides the developer with an option of emulating that action, using
    the `contextClick()` method. Like many other methods, this method has two variants
    as well. One is clicking on the current location and the other overloaded method
    is clicking on the WebElement. Let's discuss the context of clicking on WebElement
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API syntax for the `contextClick()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The input parameter is obviously the WebElement that has to be right-clicked,
    and the return type is the `Actions` instance. As we do normally, its time to
    see a code example. If you open the `ContextClick.html` file, you can right-click
    on the text visible on the page, and it will display the context menu. Now clicking
    any item pops up an alert dialog stating which item has been clicked. Now let''s
    see how to implement this in WebDriver, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, first we have right-clicked using the `contextClick()`
    method on the WebElement contextMenu, and then left-clicked on Item 4 from the
    context menu. This should pop up an alert dialog saying Item 4 Clicked.
  prefs: []
  type: TYPE_NORMAL
- en: The context click at current location action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have seen context click on a WebElement, it''s time to explore
    the `contextClick()` method at the current mouse location. The API syntax for
    the `contextClick()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As expected, the preceding method doesn''t expect any input parameter and returns
    the `Actions` instance. Let''s see the necessary modifications needed for the
    previous example to use this method. The following is the code refactored to achieve
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code first moves the cursor to the `div-context` WebElement and
    then context-clicks it.
  prefs: []
  type: TYPE_NORMAL
- en: Learning keyboard-based interactions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have seen all the actions that can be taken using a mouse. Now
    it's time to look at some of the actions that are specific to the keyboard in
    the `Actions` class. Basically, there are three different actions that are available
    in the `Actions` class that are specific to the keyboard. They are the `keyUp`,
    `keyDown`, and `sendKeys` actions, each having two overloaded methods. One method
    is to execute the action directly on the WebElement, and the other is to just
    execute the method irrespective of its context.
  prefs: []
  type: TYPE_NORMAL
- en: The keyDown and keyUp actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `keyDown()` method is used to simulate the action of pressing and holding
    a key. The keys that we are referencing here are the *Shift*, *Ctrl*, and *Alt*
    keys. The `keyUp()` method is used to release the key that is already pressed
    using the `keyDown()` method. The API syntax for the `keyDown()` method is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'An `IllegalArgumentException` is thrown when the passed key is not one of the
    *Shift*, *Ctrl*, and *Alt* keys. The API syntax for the `keyUp()` method is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `keyUp` action performed on a key, on which a `keyDown` action is not already
    being performed, will result in some unexpected results. So, we have to make sure
    we perform the `keyUp` action after a `keyDown` action is performed.
  prefs: []
  type: TYPE_NORMAL
- en: The sendKeys method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used to type in alphanumeric and special character keys into WebElements
    such as textbox, textarea, and so on. This is different than the `WebElement.sendKeys(CharSequence
    keysToSend)` method, as this method expects the WebElements to have the focus
    before being called. The API syntax for the `sendkeys()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: We expect you to implement a couple of test scripts around these keyboard events
    using the `keyUp`, `keyDown`, and `sendKeys()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to use the actions class to create a set
    of actions, and build them into a composite action to execute it in one pass,
    using the `perform()` method. In this way, we can aggregate a series of complex
    user actions into a single functionality, which can be executed in one pass. In
    the next [chapter](480ab588-a7a3-4592-8b58-1b98060a0568.xhtml), we will learn
    WebDriver events and how we can listen and perform advanced actions, using WebDriver.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or False – the drag and drop action requires the source element and the
    target element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List the keyboard methods that we can perform using the actions API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which method of the actions API will help in performing a double-click operation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the actions API, how we can perform a save option (that is to say, *Ctrl*
    + *S*)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can we open a context menu using the actions API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check the following links for more information about the topics we
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Read more about Advanced User Interaction at[ https://github.com/SeleniumHQ/selenium/wiki/Advanced-User-Interactions](https://github.com/SeleniumHQ/selenium/wiki/Advanced-User-Interactions)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See Chapter 4 : *Working with Selenium API* in* Selenium Testing Tools* Cookbook,
    second edition, by Unmesh Gundecha, and Chapter 6,* Utilizing the Advanced User
    Interactions API* in *Master Selenium WebDriver,* byMark Collin, for more examples
    of the actions API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
