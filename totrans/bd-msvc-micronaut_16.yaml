- en: '*Chapter 10*: IoT with Micronaut'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：使用Micronaut的物联网'
- en: '**Internet of Things** (**IoT**) is one of the fastest emerging technologies.
    It is a network of devices or things. These devices have the same capabilities
    as sensors or software and can communicate with other devices over the internet.
    A device or thing can be from various fields and can include things such as light
    bulbs, door locks, heartbeat monitors, location sensors, and many devices that
    can be enabled with sensors. It is an ecosystem of smart devices or things with
    internet capabilities. IoT is trending in various fields. A few of the top trending
    fields are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**（**IoT**）是发展最快的科技之一。它是一个由设备或事物组成的网络。这些设备具有与传感器或软件相同的性能，并且可以通过互联网与其他设备通信。设备或事物可以来自各个领域，包括灯泡、门锁、心跳监测器、位置传感器以及许多可以启用传感器的设备。这是一个具有互联网功能的智能设备或事物生态系统。物联网在各个领域都有趋势。以下是一些热门领域的几个例子：'
- en: Home automation
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 家庭自动化
- en: Manufacturing and industrial applications
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 制造和工业应用
- en: Healthcare and medical science
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 医疗和医学科学
- en: Military and defense
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 军事和防御
- en: Automotive, transportation, and logistics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 汽车、交通和物流
- en: 'Along with these fields, in this chapter, we will learn about the following
    topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些领域，在本章中，我们还将学习以下主题：
- en: Basics of IoT
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网基础
- en: Working with Micronaut Alexa skills
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Micronaut Alexa技能一起工作
- en: By the end of this chapter, you will be well versed in the preceding aspects
    concerning IoT with Micronaut integration.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将熟练掌握有关Micronaut集成的物联网的先前方面。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: All the commands and technical instructions in this chapter can be run on Windows
    10 and macOS. The code examples in this chapter are available in this book's GitHub
    repository at [https://github.com/PacktPublishing/Building-Microservices-with-Micronaut/tree/master/Chapter10/](https://github.com/PacktPublishing/Building-Microservices-with-Micronaut/tree/master/Chapter10/).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的命令和技术说明都可以在Windows 10和macOS上运行。本章中的代码示例可以在本书的GitHub仓库中找到，地址为[https://github.com/PacktPublishing/Building-Microservices-with-Micronaut/tree/master/Chapter10/](https://github.com/PacktPublishing/Building-Microservices-with-Micronaut/tree/master/Chapter10/).
- en: 'The following tools need to be installed and set up in the development environment:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下工具需要在开发环境中安装和设置：
- en: '**Java SDK**: Version 13 or above (we used Java 14).'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java SDK**：版本13或更高（我们使用了Java 14）。'
- en: '**Maven**: This is optional and only required if you would like to use Maven
    as the build system. However, we recommend having Maven set up on any development
    machine. Instructions to download and install Maven can be found at [https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi).'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven**：这是可选的，仅当您希望使用Maven作为构建系统时才需要。然而，我们建议在任何开发机器上设置Maven。有关下载和安装Maven的说明可以在[https://maven.apache.org/download.cgi](https://maven.apache.org/download.cgi)找到。'
- en: '**Development IDE**: Based on your preference, any Java-based IDE can be used,
    but for the purpose of writing this chapter, IntelliJ was used.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发IDE**：根据您的偏好，可以使用任何基于Java的IDE，但为了编写本章，我们使用了IntelliJ。'
- en: '**Git**: Instructions for downloading and installing Git can be found at [https://git-scm.com/downloads](https://git-scm.com/downloads).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：有关下载和安装Git的说明可以在[https://git-scm.com/downloads](https://git-scm.com/downloads)找到。'
- en: '**PostgreSQL**: Instructions for downloading and installing PostgreSQL can
    be found at [https://www.postgresql.org/download/](https://www.postgresql.org/download/).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**：有关下载和安装PostgreSQL的说明可以在[https://www.postgresql.org/download/](https://www.postgresql.org/download/)找到。'
- en: '**MongoDB**: MongoDB Atlas provides a free online Database-as-a-Service (DBaaS)
    with up to 512 MB storage. However, if you would prefer to use a local database,
    then the instructions for downloading and installing MongoDB can be found at [https://docs.mongodb.com/manual/administration/install-community/](https://docs.mongodb.com/manual/administration/install-community/).
    We used a local installation to write this chapter.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MongoDB**：MongoDB Atlas提供高达512 MB存储空间的免费在线数据库即服务（DBaaS）。然而，如果您希望使用本地数据库，则可以在[https://docs.mongodb.com/manual/administration/install-community/](https://docs.mongodb.com/manual/administration/install-community/)找到下载和安装MongoDB的说明。我们使用本地安装来编写本章。'
- en: '**REST client**: Any HTTP REST client can be used. We used the Advanced REST
    Client Chrome plugin in this chapter.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**REST客户端**：可以使用任何HTTP REST客户端。在本章中，我们使用了Advanced REST Client Chrome插件。'
- en: '**Docker**: Instructions for downloading and installing Docker can be found
    at [https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker**: 有关下载和安装Docker的说明可在[https://docs.docker.com/get-docker/](https://docs.docker.com/get-docker/)找到。'
- en: '**Amazon**: You will need an Amazon account for Alexa, which you can set up
    at [https://developer.amazon.com/alexa](https://developer.amazon.com/alexa).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊**: 您需要一个亚马逊账户来使用Alexa，您可以在[https://developer.amazon.com/alexa](https://developer.amazon.com/alexa)上设置账户。'
- en: Basics of IoT
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网基础
- en: '**IoT** is a network of devices or things. These things can be anything – it
    can be a human wearing a health monitor, a pet wearing a geolocation sensor, a
    car with a tire pressure sensor, a television with voice/visual capability, or
    a smart speaker. IoT can also use advanced **machine learning** (**ML**) and **artificial
    intelligence** (**AI**) capabilities in the cloud to provide next-level services.
    IoT can make things smart with data collection and automation. The following diagram
    illustrates IoT:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**物联网**是一个设备或事物的网络。这些事物可以是任何东西——它可以是佩戴健康监测器的人类，佩戴地理定位传感器的宠物，带有轮胎压力传感器的汽车，具有语音/视觉功能的电视，或智能扬声器。物联网还可以在云中使用高级**机器学习**（**ML**）和**人工智能**（**AI**）功能来提供更高级的服务。物联网可以通过数据收集和自动化使事物变得智能。以下图表说明了物联网：'
- en: '![Figure 10.1 – Internet of Things (IoT)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.1 – 物联网 (IoT)'
- en: '](img/Figure_10.1_B16585.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.1 – 物联网 (IoT)'
- en: Figure 10.1 – Internet of Things (IoT)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 物联网 (IoT)
- en: These devices or things have internet capabilities and are interconnected, so
    they act as an ecosystem. This ecosystem can collect, send, and act based on data
    it acquires from other things. For example, you can turn on the lights at your
    home when you arrive.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备或事物具有互联网功能并且相互连接，因此它们充当一个生态系统。这个生态系统可以收集、发送并根据从其他事物获取的数据采取行动。例如，当您到达家时，您可以打开家中的灯光。
- en: IoT provides significant benefits to individuals, businesses, and organizations.
    IoT can reduce manual work and intervention with seamless data transfer between
    two systems or devices. IoT devices are become more significant every day in the
    consumer market, be it as locks, doorbells, light bulbs, speakers, televisions,
    healthcare products, or fitness systems. IoT is mainly accessed now in voice enabled
    ecosystems such as Google Home, Apple Siri, Amazon Alexa, Microsoft Cortana, Samsung
    Bixby, and more. There are numerous positive aspects of IoT; however, there are
    a few cons regarding security and privacy issues.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网为个人、企业和组织提供了显著的好处。物联网可以通过在两个系统或设备之间无缝传输数据来减少手动工作和干预。物联网设备在消费市场中的重要性日益增加，无论是作为锁、门铃、灯泡、扬声器、电视、医疗产品还是健身系统。物联网现在主要通过语音启用的生态系统访问，例如Google
    Home、Apple Siri、Amazon Alexa、Microsoft Cortana、Samsung Bixby等。物联网有许多积极方面；然而，在安全和隐私问题上也有一些缺点。
- en: Now that we have learned about the basics of IoT and its applications, let's
    understand the basics of Alexa skills.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了物联网及其应用的基础知识，让我们了解Alexa技能的基础。
- en: Working on the basics of Alexa skills
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Alexa技能的基础知识上工作
- en: Alexa is a cloud-based voice recognition service available on millions of devices
    from Amazon and third-party device manufacturers, such as televisions, Bluetooth
    speakers, headphones, automobiles, and so on. You can build interactive voice-based
    request-response applications using Alexa.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa是一种基于云的语音识别服务，可在亚马逊和第三方设备制造商的数百万台设备上使用，例如电视、蓝牙扬声器、耳机、汽车等。您可以使用Alexa构建基于交互式语音的请求-响应应用程序。
- en: 'Alexa can be integrated into various applications. Alexa also has screen capabilities
    for displaying responses visually, and Echo Show is an Alexa speaker with a display
    screen. The following diagram illustrates the Amazon Alexa architecture:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa可以集成到各种应用程序中。Alexa还具有屏幕功能，可以直观地显示响应，Echo Show是一款带有显示屏的Alexa扬声器。以下图表说明了亚马逊Alexa架构：
- en: '![Figure 10.2 – Amazon Alexa architecture'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.2 – 亚马逊Alexa架构'
- en: '](img/Figure_10.2_B16585.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.2 – 亚马逊Alexa架构'
- en: Figure 10.2 – Amazon Alexa architecture
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 亚马逊Alexa架构
- en: Users can say the wake-up word for the device, which is **Alexa**, and perform
    an operation. For example, to find the weather in your current location, you can
    say *Alexa, what is the current weather?* and you will receive a response, such
    as *The current weather in your location is 28 degrees*. Alexa skills are like
    apps, and you can enable or disable skills using the Alexa app for a specific
    device. Skills are voice-based Alexa capabilities.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以说出设备的唤醒词**Alexa**，并执行操作。例如，要查找您当前位置的天气，您可以说*Alexa，当前天气是什么？*，您将收到如下响应：*您当前位置的天气是28度*。Alexa技能就像应用一样，您可以使用特定设备的Alexa应用来启用或禁用技能。技能是基于语音的Alexa功能。
- en: 'Alexa can do the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa可以做以下事情：
- en: Set an alarm.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置闹钟。
- en: Play music from Spotify, Apple Music, or Google Music.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放来自Spotify、Apple Music或Google Music的音乐。
- en: Create a to-do list and add items to your shopping list.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建待办事项列表并将项目添加到购物清单中。
- en: Check the weather.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看天气。
- en: Check your calendar.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查您的日历。
- en: Read news briefings.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阅读新闻简报。
- en: Check bank accounts.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看银行账户。
- en: Order in a restaurant.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在餐厅点餐。
- en: Check facts on the internet.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在互联网上查事实。
- en: These are a few of the many things that Alexa can perform. Now, let's move on
    and understand more about Alexa.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是Alexa能做的许多事情中的一部分。现在，让我们继续了解更多的Alexa。
- en: Basics of Alexa skills
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Alexa技能基础
- en: Users with any voice-based assistants or tools can use the wake-up word to open
    the skill or application. For example, with Google Home, we use *Hey Google* or
    *OK Google*, for Apple Siri, we use *Hey Siri* or *Siri*, and for Amazon Alexa,
    we use *Alexa*. This wake-up word can be replaced with *Amazon*, *Echo*, or *computer*.
    All Alexa skills have been designed based on the voice interaction model; that
    is, phrases you can say to make the skill do something you want, such as *Alexa,
    turn on the lights* or *Alexa, what is the current temperature?*
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有任何基于语音的助手或工具的用户可以使用唤醒词来打开技能或应用。例如，使用Google Home，我们使用*Hey Google*或*OK Google*，对于Apple
    Siri，我们使用*Hey Siri*或*Siri*，而对于Amazon Alexa，我们使用*Alexa*。这个唤醒词可以被替换为*Amazon*，*Echo*或*computer*。所有Alexa技能都是基于语音交互模型设计的；也就是说，您可以说的短语来让技能做您想要的事情，例如*Alexa，打开灯光*或*Alexa，当前温度是多少？*
- en: 'Alexa supports the following two types of voice interaction models:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa支持以下两种类型的语音交互模型：
- en: '**Pre-built voice interaction model**: Alexa defines the phrases for each skill
    for you.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预构建的语音交互模型**：Alexa为您定义了每个技能的短语。'
- en: '**Custom voice interaction model**: You define the phrases that the user can
    say to interact with your skills.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义语音交互模型**：您定义用户可以说的短语来与您的技能交互。'
- en: 'For our working example code, we will use the custom voice interaction model.
    The following diagram illustrates the process of opening a skill using a custom
    voice interaction model:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的工作示例代码，我们将使用自定义语音交互模型。以下图表说明了使用自定义语音交互模型打开技能的过程：
- en: '![Figure 10.3 – Opening a skill'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.3 – 打开技能'
- en: '](img/Figure_10.3_B16585.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.3_B16585.jpg]'
- en: Figure 10.3 – Opening a skill
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.3_B16585.jpg]'
- en: Now that we know about the wake-up word, the phrase following it is the **launch**
    word, followed by the **invocation name**. For our sample application, **Pet Clinic**,
    the launch word will be **open**, followed by the invocation **Pet Clinic**.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了唤醒词，紧随其后的短语是**启动词**，然后是**调用名称**。对于我们的示例应用**宠物诊所**，启动词将是**打开**，后面跟着调用**宠物诊所**。
- en: 'The following diagram illustrates the relationship between utterances and intent:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了话语和意图之间的关系：
- en: '![Figure 10.4 – Opening a skill'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.4 – 打开技能'
- en: '](img/Figure_10.4_B16585.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.4_B16585.jpg]'
- en: Figure 10.4 – Opening a skill
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 打开技能
- en: An utterance is a word users say to Alexa to convey what they want to do such
    as *Turn on the lights*, *What is the current temperature?*, and so on. Users
    can say the same thing in different ways, such as *find the temperature*, *current
    temperature*, *outside temperature*, *the temperature in [location]*, and Alexa
    will provide pre-build utterances and associated requests as part of the custom
    voice interaction model. This list of utterances can be mapped to a request or
    intent.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 话语是用户对Alexa说的话，用以传达他们想要做什么，例如*打开灯光*，*当前温度是多少？*等等。用户可以用不同的方式说出同样的话，例如*查找温度*，*当前温度*，*室外温度*，*[位置]的温度*，而Alexa将提供预构建的话语和相关请求作为自定义语音交互模型的一部分。这个话语列表可以映射到一个请求或意图。
- en: 'The following diagram illustrates the custom voice interaction model with a
    **wake word**, **launch**, **invocation name**, **utterance**, and **intent**:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了带有**唤醒词**、**启动**、**调用名称**、**语音**和**意图**的自定义语音交互模型：
- en: '![Figure 10.5 – Opening a skill – Pet Clinic'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5 – 打开技能 – 宠物诊所'
- en: '](img/Figure_10.5_B16585.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.5_B16585.jpg)'
- en: Figure 10.5 – Opening a skill – Pet Clinic
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 打开技能 – 宠物诊所
- en: For our code example, we will use the sequences *Alexa, Open Pet Clinic*, and
    *Alexa, find nearby Pet Clinics*. Here, the wake-up word is **Alexa**, the launch
    word is **Open**, and the invocation name is **Pet Clinic**. The utterance can
    be **find the nearest pet clinic**. We can also have other variations of utterances,
    such as **find pet clinic**. All these utterances can be mapped to **GetFactByPetClinicIntent**.
    We will learn about intents in the next section of this chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的代码示例，我们将使用序列*Alexa，打开宠物诊所*和*Alexa，查找附近的宠物诊所*。在这里，唤醒词是**Alexa**，启动词是**打开**，调用名称是**宠物诊所**。语音可以是**找到最近的宠物诊所**。我们还可以有其他语音变体，例如**找到宠物诊所**。所有这些语音都可以映射到**GetFactByPetClinicIntent**。我们将在本章的下一节学习关于意图的内容。
- en: Basics of intents
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 意图的概述
- en: One of the fundamental designs for voice in Alexa is intents. Intents capture
    events the end user wants to do with voice. Intents represent an action that is
    triggered by the user's spoken request. Intents in Alexa are specified in a JSON
    structure called an **intent schema**. The built-in intents include **Cancel**,
    **Help**, **Stop**, **Navigate Home**, and **Fallback**. Some intents are basic,
    such as help, and the skills should have a Help Intent.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa语音设计的基本原理之一是意图。意图捕捉了最终用户想要通过语音执行的事件。意图代表了由用户的语音请求触发的动作。Alexa中的意图在称为**意图模式**的JSON结构中指定。内置的意图包括**取消**、**帮助**、**停止**、**导航回家**和**回退**。有些意图是基本的，例如帮助，技能应该有一个帮助意图。
- en: 'The following diagram illustrates the built-in intents in the Alexa developer
    console:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了Alexa开发者控制台中的内置意图：
- en: '![Figure 10.6 – Built-in intents'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.6 – 内置意图'
- en: '](img/Figure_10.6_B16585.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.6_B16585.jpg)'
- en: Figure 10.6 – Built-in intents
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 内置意图
- en: If we have a website for logging in that has username and password fields and
    a submit button, there will be a submit intent in the Alexa skill world. However,
    one big difference is that users can say the submit in different ways; for example,
    *Submit*, *submit it*, *confirm*, *ok*, *get*, *continue*, and so on. These different
    ways of saying the same thing are called **utterances**. Each intent should include
    a list of utterances; that is, all the things a user might say to invoke these
    intents. Intents can have arguments called **slots**, which will not be discussed
    in this chapter.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个登录网站，该网站有用户名和密码字段以及一个提交按钮，在Alexa技能世界中将会有一个提交意图。然而，一个很大的不同之处在于用户可以用不同的方式说出“提交”；例如，*提交*、*提交它*、*确认*、*好*、*获取*、*继续*等等。这些表达相同意思的不同方式被称为**语音**。每个意图都应该包括一个语音列表；也就是说，用户可能说出以调用这些意图的所有内容。意图可以有称为**槽位**的参数，这些内容在本章中不会讨论。
- en: Now that we have learned about the basics of Alexa skills by covering utterances,
    intents, and built-in intents, let's create our first functional Alexa skill.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经通过涵盖语音、意图和内置意图学习了Alexa技能的基础，让我们创建我们的第一个功能性的Alexa技能。
- en: Your first HelloWorld Alexa skill
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 您的第一个HelloWorld Alexa技能
- en: 'To start creating our Alexa skill, we must navigate to [https://developer.amazon.com/](https://developer.amazon.com/),
    select **Amazon Alexa**, and click **Create Alexa Skills**. This will open the
    Alexa developer console. If you don''t have an Amazon developer account, you can
    create one for free. The following screenshot illustrates the **Create Skill**
    screen:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始创建我们的Alexa技能，我们必须导航到[https://developer.amazon.com/](https://developer.amazon.com/)，选择**Amazon
    Alexa**，然后点击**创建Alexa技能**。这将打开Alexa开发者控制台。如果您没有Amazon开发者账户，您可以免费创建一个。以下屏幕截图展示了**创建技能**屏幕：
- en: '![Figure 10.7 – Create Skill screen'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 创建技能屏幕'
- en: '](img/Figure_10.7_B16585.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.7_B16585.jpg)'
- en: Figure 10.7 – Create Skill screen
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 创建技能屏幕
- en: In the preceding screenshot, you can see how to create a new skill name called
    `Pet Clinic`, choose a model to add to your skill option called `Custom`, and
    choose a method to host your skill's backend resources called `Provision your
    own`. Choose a template to add to your skill called `Start from Scratch`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，你可以看到如何创建一个名为`宠物诊所`的新技能名称，选择一个要添加到你的技能选项中的模型，并选择一个托管你的技能后端资源的方法，称为`自行提供`。选择一个要添加到你的技能中的模板，称为`从头开始创建`。
- en: 'By using the custom voice interaction model, we have learned that we need to
    create and configure our wake word, launch, invocation name, utterances, and intent.
    The wake word is configured for the device and is the same for all the skills,
    so we don''t need to change it. In our configuration, we will configure the code
    launch, invocation, utterances, and intent. The following diagram illustrates
    the basics of developing Alexa skills:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用自定义语音交互模型，我们了解到我们需要创建和配置我们的唤醒词、启动词、调用名称、语句和意图。唤醒词为设备配置，对所有技能都是相同的，因此我们不需要更改它。在我们的配置中，我们将配置代码启动、调用、语句和意图。以下图表说明了开发
    Alexa 技能的基本原理：
- en: '![Figure 10.8 – Alexa skills'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.8 – Alexa 技能](img/Figure_10.8_B16585.jpg)'
- en: '](img/Figure_10.8_B16585.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.8_B16585.jpg)'
- en: Figure 10.8 – Alexa skills
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – Alexa 技能
- en: 'Alexa skills are based on the **voice interaction model** and **programming
    logic**. Programming logic can be created using Node.js, Java, Python, C#, or
    Go. This programming logic allows us to connect to web services, microservices,
    APIs, and interfaces. With this, you can invoke an internet-accessible endpoint
    for Alexa skills. The following diagram illustrates the skills developer console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Alexa 技能基于 **语音交互模型** 和 **编程逻辑**。编程逻辑可以使用 Node.js、Java、Python、C# 或 Go 创建。这种编程逻辑允许我们连接到
    Web 服务、微服务、API 和接口。有了这个，您可以调用 Alexa 技能的互联网可访问端点。以下图表说明了技能开发者控制台：
- en: '![Figure 10.9 – Alexa skills'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.9 – Alexa 技能](img/Figure_10.9_B16585.jpg)'
- en: '](img/Figure_10.9_B16585.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.9_B16585.jpg)'
- en: Figure 10.9 – Alexa skills
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – Alexa 技能
- en: 'We can set `pet clinic` and save it. You can also select the `HelloWorldIntent`
    intent and rename it `PetClinicWelcomeIntent`. There will be sample utterances
    listed in the intent that you can modify manually or use the JSON Editor and copy
    the `alexa_petclinic_intent_schema.json` code from this book''s GitHub repository.
    The following code illustrates the JSON schema for the intent:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将 `pet clinic` 设置并保存。您还可以选择 `HelloWorldIntent` 意图并将其重命名为 `PetClinicWelcomeIntent`。在意图中将有示例语句列出，您可以手动修改或使用
    JSON 编辑器并从本书的 GitHub 仓库复制 `alexa_petclinic_intent_schema.json` 代码。以下代码说明了意图的 JSON
    架构：
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can configure the intent's invocation name and sample utterance using the
    JSON configuration file.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 JSON 配置文件配置意图的调用名称和示例语句。
- en: Once you have copied the JSON file to the Alexa developer console's JSON editor,
    click **Save Model** and then **Build Model and Evaluate Model**.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已将 JSON 文件复制到 Alexa 开发者控制台的 JSON 编辑器中，请点击 **保存模型** 然后点击 **构建模型和评估模型**。
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The preceding configuration is a sample from this chapter's folder on GitHub.
    The actual schema can be copied from GitHub.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上述配置是 GitHub 上本章文件夹中的示例。实际架构可以从 GitHub 复制。
- en: Once you have built the model, click **Test** in the Alexa developer console
    and enable the skill testing process. Now, we need to develop our backend code
    for the response.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建了模型，请在 Alexa 开发者控制台中点击 **测试** 并启用技能测试过程。现在，我们需要开发我们的后端代码以进行响应。
- en: 'Create a Maven Java project using your favorite IDE. The following dependencies
    are required for this:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您最喜欢的 IDE 创建一个 Maven Java 项目。以下依赖项对于此项目是必需的：
- en: '[PRE1]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will be using Amazon''s `ask-sdk` for our backend Java development. You
    can also configure the dependencies using Gradle. A sample Gradle configuration
    can be seen in the following code:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用亚马逊的 `ask-sdk` 进行我们的后端 Java 开发。您也可以使用 Gradle 配置依赖项。以下代码展示了示例 Gradle 配置：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We need to create a Java class for all the intents. In our JSON schema, we
    have defined the `CancelIntent`, `HelpIntent`, `StopIntent`, `NavigateHomeIntent`,
    `FallbackIntent`, and `PetClinicWelcomeIntent` intents. For every intent, we need
    to create a handler; for example, `PetClinicWelcomeIntent` should have `PetClicWelcomeIntentHandler`.
    The handler''s name will be added to the end of each intent name. We must also
    create one additional handler that hasn''t been configured in the JSON schema,
    and this is called `LaunchRequestHandler`. This is the first intent that is triggered
    whenever their skill is launched. The following code illustrates `LaunchRequestHandler`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为所有意图创建一个 Java 类。在我们的 JSON 架构中，我们已定义了 `CancelIntent`、`HelpIntent`、`StopIntent`、`NavigateHomeIntent`、`FallbackIntent`
    和 `PetClinicWelcomeIntent` 意图。对于每个意图，我们需要创建一个处理器；例如，`PetClinicWelcomeIntent` 应该有
    `PetClicWelcomeIntentHandler`。处理器名称将被添加到每个意图名称的末尾。我们还必须创建一个额外的处理器，该处理器在 JSON 架构中尚未配置，称为
    `LaunchRequestHandler`。这是每次启动技能时都会触发的第一个意图。以下代码说明了 `LaunchRequestHandler`：
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`LaunchRequestHandler` will override the handler method and the response voice
    message when the skill is launched. This is defined in the code block. In the
    code, we have a speech text response of *Welcome to Pet Clinic, you can say find
    near by Pet Clinics*, along with the title of `PetClinic`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`LaunchRequestHandler` 将覆盖当技能启动时的处理方法以及响应语音消息。这已在代码块中定义。在代码中，我们有一个语音文本响应“欢迎来到宠物诊所，您可以说出查找附近的宠物诊所”，以及
    `PetClinic` 的标题。'
- en: 'Now that we have created the handlers (`CancelandStopIntentHandler`, `HelpIntentHandler`,
    `LaunchRequestHandler`, `PetClinicWelcomeIntentHandler`, and `SessionEndedRequestHandler`),
    we need to create `StreamHandler`. `StreamHandler` is the entry point for the
    AWS Lambda function. All requests that are sent by the end user to Alexa, which
    invokes your skill, will pass through this class. You need to configure the copy
    of the skill ID from the Amazon Alexa developer console in the endpoint. Refer
    to the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了处理程序（`CancelandStopIntentHandler`、`HelpIntentHandler`、`LaunchRequestHandler`、`PetClinicWelcomeIntentHandler`
    和 `SessionEndedRequestHandler`），我们需要创建 `StreamHandler`。`StreamHandler` 是 AWS Lambda
    函数的入口点。所有由最终用户发送到 Alexa、调用您的技能的请求都将通过此类传递。您需要在端点中配置从 Amazon Alexa 开发者控制台复制的技能
    ID。请参考以下代码：
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'With that, we have learned about how to use stream handlers and how to invoke
    intent handlers. Let''s learn about the use of the skill ID, which is where you
    can get information about the skill ID. The following screenshot illustrates the
    skill ID''s location in the developer console:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经了解了如何使用流处理器以及如何调用意图处理器。让我们学习技能 ID 的使用，这是您可以获取有关技能 ID 信息的地方。以下截图说明了技能
    ID 在开发者控制台中的位置：
- en: '![Figure 10.10 – Endpoint skill ID and default region'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.10 – 端点技能 ID 和默认区域'
- en: '](img/Figure_10.10_B16585.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.10_B16585.jpg)'
- en: Figure 10.10 – Endpoint skill ID and default region
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.10 – 端点技能 ID 和默认区域
- en: 'The skill ID can be found on the Alexa developer console''s `.jar` file with
    dependencies for the code. You can execute the `mvn assembly:assembly -DdescriptorId=jar-with-dependencies
    package` command to create the `.jar` file. This `.jar` file will be located in
    the target directory, as illustrated in the following screenshot:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 技能 ID 可在 Alexa 开发者控制台的 `.jar` 文件中找到，该文件包含代码的依赖项。您可以通过执行 `mvn assembly:assembly
    -DdescriptorId=jar-with-dependencies package` 命令来创建 `.jar` 文件。此 `.jar` 文件将位于目标目录中，如图所示：
- en: '![Figure 10.11 – Maven JAR file location'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.11 – Maven JAR 文件位置'
- en: '](img/Figure_10.11_B16585.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.11_B16585.jpg)'
- en: Figure 10.11 – Maven JAR file location
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.11 – Maven JAR 文件位置
- en: The next step is to create the Amazon Lambda function, which is our backend
    service code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建 Amazon Lambda 函数，这是我们后端服务代码。
- en: 'Navigate to [https://console.aws.amazon.com/lambda/](https://console.aws.amazon.com/lambda/)
    to create a function. Name the function `lambda_for_petclinic`, set options to
    `Author from scratch`, and set runtime to `Java 11`. The user interface is illustrated
    in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到 [https://console.aws.amazon.com/lambda/](https://console.aws.amazon.com/lambda/)
    创建一个函数。将函数命名为 `lambda_for_petclinic`，设置选项为 `从头开始创建作者`，并将运行时设置为 `Java 11`。用户界面如图所示：
- en: '![Figure 10.12 – Alexa Create function screen'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.12 – Alexa 创建函数屏幕'
- en: '](img/Figure_10.12_B16585_edited.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.12_B16585_edited.jpg)'
- en: Figure 10.12 – Alexa Create function screen
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.12 – Alexa 创建函数屏幕
- en: 'The next step is to create the trigger with **Trigger configuration** set to
    **Alexa Skills Kit**, as shown in the following screenshot. You need to copy the
    Alexa **Skill Id** from the Alexa developer console''s **Endpoint** screen. Also,
    you need to copy the **Function ARN** (**Amazon Resource Name**) property from
    the Lambda developer console to the Alexa skill developer console''s **Endpoint**
    screen. The following screenshot illustrates the location of the AWS Lambda function''s
    ARN:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建触发器，将 **触发器配置** 设置为 **Alexa Skills Kit**，如下面的截图所示。您需要从 Alexa 开发者控制台的 **端点**
    屏幕中复制 Alexa **技能 ID**。同时，您还需要从 Lambda 开发者控制台复制 **函数 ARN**（**Amazon Resource Name**）属性到
    Alexa 技能开发者控制台的 **端点** 屏幕中。以下截图说明了 AWS Lambda 函数的 ARN 位置：
- en: '![Figure 10.13 – AWS Function ARN\'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.13 – AWS 函数 ARN'
- en: '](img/Figure10.13_B16585.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure10.13_B16585.jpg)'
- en: Figure 10.13 – AWS Function ARN\
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.13 – AWS 函数 ARN
- en: 'The **Function ARN** value must be copied from the Alexa developer console
    **Endpoint** screen to the **Default Region** section or to the location-specific
    regions, as shown in *Figure 10.10*. The skill ID shown in *Figure 10.10* should
    be copied to the AWS Lambda trigger screen, as illustrated here:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数ARN**值必须从Alexa开发者控制台的**端点**屏幕复制到**默认区域**部分或到特定位置的区域，如图*图10.10*所示。图*图10.10*中显示的技能ID应复制到AWS
    Lambda触发器屏幕，如图所示：'
- en: '![Figure 10.14 – AWS Lambda – Add trigger'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.14 – AWS Lambda – 添加触发器'
- en: '](img/Figure10.14_B16585.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure10.14_B16585.jpg)'
- en: Figure 10.14 – AWS Lambda – Add trigger
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – AWS Lambda – 添加触发器
- en: Once the trigger has been added with the necessary skill ID and the `.jar` file,
    along with any dependencies (`petclinic-Alexa-maven-1.0-SNAPSHOT-jar-with-dependencies.jar`),
    to the Lambda function.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了必要的技能ID和`.jar`文件，以及任何依赖项（`petclinic-Alexa-maven-1.0-SNAPSHOT-jar-with-dependencies.jar`），到Lambda函数中。
- en: 'The following screenshot illustrates the process of uploading the `.jar` file
    to the Amazon Lambda function:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图说明了将`.jar`文件上传到Amazon Lambda函数的过程：
- en: '![Figure 10.15 –Uploading code to Amazon Lambda'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.15 – 将代码上传到Amazon Lambda'
- en: '](img/Figure10.15_B16585.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure10.15_B16585.jpg)'
- en: Figure 10.15 –Uploading code to Amazon Lambda
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 将代码上传到Amazon Lambda
- en: Now that we have created our first Alexa skill and uploaded the necessary code,
    let's test it out.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了第一个Alexa技能并上传了必要的代码，让我们来测试一下。
- en: Testing your code
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试您的代码
- en: 'The last and final process is to test the code with the Amazon Alexa Simulator,
    which is located in the developer console. The following screenshot illustrates
    how to request the Alexa Simulator:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后和最终的过程是使用Amazon Alexa模拟器测试代码，该模拟器位于开发者控制台中。以下截图说明了如何请求Alexa模拟器：
- en: '![Figure 10.16 – Alexa Simulator request/response'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.16 – Alexa模拟器请求/响应'
- en: '](img/Figure10.16_B16585.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure10.16_B16585.jpg)'
- en: Figure 10.16 – Alexa Simulator request/response
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 – Alexa模拟器请求/响应
- en: The request/response testing screen accepts text or speech. You can type or
    say `open pet clinic` and `find nearby pet clinics` here. You should be able to
    see the response from the Java code in the **JSON Output 1** section. Once you
    can see the response, this means we have successfully created our first basic
    IoT pet clinic example with a request and a response.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 请求/响应测试界面接受文本或语音。您可以在其中键入或说出“打开宠物诊所”和“查找附近的宠物诊所”。您应该能够在**JSON输出1**部分看到Java代码的响应。一旦您看到了响应，这意味着我们已经成功创建了第一个带有请求和响应的基本物联网宠物诊所示例。
- en: We will integrate Micronaut and Alexa in the next section. You can find the
    complete working example for the `petclinic-alexa-maven` project in this book's
    GitHub repository.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节中将Micronaut和Alexa集成。您可以在本书的GitHub存储库中找到`petclinic-alexa-maven`项目的完整工作示例。
- en: Integrating Micronaut with Alexa
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Micronaut与Alexa集成
- en: 'As we discussed in the preceding section, in this section, we will start to
    understand how to integrate Micronaut with Alexa. Micronaut provides various extensions
    that support `micronaut-function-aws-alexa` module includes support for building
    Alexa skills with Micronaut. Micronaut Alexa support can wire up your Alexa application
    with **AlexaFunction** and supports dependency injection for the following types:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前一节中讨论的，在本节中，我们将开始了解如何将Micronaut与Alexa集成。Micronaut提供了各种扩展，支持`micronaut-function-aws-alexa`模块，包括支持使用Micronaut构建Alexa技能。Micronaut
    Alexa支持可以通过**AlexaFunction**连接您的Alexa应用程序，并支持以下类型的依赖注入：
- en: '`com.amazon.ask.dispatcher.request.handler.RequestHandler`'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.amazon.ask.dispatcher.request.handler.RequestHandler`'
- en: '`com.amazon.ask.dispatcher.request.interceptor.RequestInterceptor`'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.amazon.ask.dispatcher.request.interceptor.RequestInterceptor`'
- en: '`com.amazon.ask.dispatcher.exception.ExceptionHandler`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.amazon.ask.dispatcher.exception.ExceptionHandler`'
- en: '`com.amazon.ask.builder.SkillBuilder`'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`com.amazon.ask.builder.SkillBuilder`'
- en: 'Micronaut''s `aws-alexa` module simplifies how we can develop Alexa skills
    with Java, Kotlin, or Groovy. The following code is the Java Maven dependency
    for the `aws-alexa` module:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Micronaut的`aws-alexa`模块简化了我们使用Java、Kotlin或Groovy开发Alexa技能的方式。以下代码是`aws-alexa`模块的Java
    Maven依赖项：
- en: '[PRE5]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'As we learned in the previous chapters, Micronaut uses Java annotations. To
    change any Alexa Java handler so that it can work with Micronaut, all we need
    to do is add the necessary `@Singleton` annotation; that is, `javax.inject.Singleton`.
    A sample `LaunchRequestHandler` with the `Singleton` annotation is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中学到的，Micronaut使用Java注解。为了改变任何Alexa Java处理器，使其能够与Micronaut一起工作，我们只需要添加必要的`@Singleton`注解；即`javax.inject.Singleton`。以下是一个带有`Singleton`注解的示例`LaunchRequestHandler`：
- en: '[PRE6]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'With the help of Micronaut, you can perform unit testing for your intents easily.
    This is because the `@MicronautTest` annotation provides seamless unit testing
    capabilities. Here, we can inject the handler into the unit test cases. The Micronaut
    framework leverages the Amazon `LaunchRequest` class to do the following:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Micronaut 的帮助下，你可以轻松地对你的意图进行单元测试。这是因为 `@MicronautTest` 注解提供了无缝的单元测试功能。在这里，我们可以将处理程序注入到单元测试用例中。Micronaut
    框架利用 Amazon 的 `LaunchRequest` 类来完成以下操作：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can find the complete working example for the `petclinic-alexa-micronaut-maven`
    project in this book''s GitHub repository. You can connect to a web service or
    to a backend database in the handler to send a request and receive a response.
    The following diagram illustrates the design for Alexa skill integration with
    the backend:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本书的 GitHub 仓库中找到 `petclinic-alexa-micronaut-maven` 项目的完整工作示例。你可以在处理程序中连接到网络服务或后端数据库，发送请求并接收响应。以下图表展示了
    Alexa 技能与后端集成的设计：
- en: '![Figure 10.17 – Alexa skills with a custom backend'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.17 – 带自定义后端的 Alexa 技能'
- en: '](img/Figure_10.17_B16585.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.17_B16585.jpg)'
- en: Figure 10.17 – Alexa skills with a custom backend
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – 带自定义后端的 Alexa 技能
- en: 'Your `speechText`, as shown in the following code snippet:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下代码片段所示，你的 `speechText`：
- en: '[PRE8]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `speechText` handle method can be added from a microservice call and can
    retrieve information from a database or service.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 可以从微服务调用中添加 `speechText` 处理方法，并可以从数据库或服务中检索信息。
- en: Now that we have integrated Micronaut with Alexa, we can control IoT devices
    with the Voice and Micronaut microservices.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将 Micronaut 与 Alexa 集成，我们可以使用语音和 Micronaut 微服务来控制物联网设备。
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored how to use the basics of IoT and Amazon Alexa.
    Then, we dived into creating a Micronaut microservice and integrating it with
    Amazon Alexa. With this integration, we can control IoT devices with the Voice
    and Micronaut microservices.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了如何使用物联网和 Amazon Alexa 的基础知识。然后，我们深入研究了创建 Micronaut 微服务并将其与 Amazon
    Alexa 集成的过程。通过这种集成，我们可以使用语音和 Micronaut 微服务来控制物联网设备。
- en: This chapter enhanced your Micronaut microservices journey in IoT. It has equipped
    you with first-hand knowledge of IoT and Amazon Alexa. Micronaut also supports
    **Speech Synthesis Markup Language** (**SSML**) and Flash Briefings.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 本章增强了你在物联网中的 Micronaut 微服务之旅。它使你获得了物联网和 Amazon Alexa 的第一手知识。Micronaut 还支持 **语音合成标记语言**
    (**SSML**) 和闪报。
- en: In the next chapter, we will bring all the topics that we have learned about
    together and take things to the next level by architecting enterprise microservices,
    looking at OpenAPI, scaling Micronaut, and deep diving into building enterprise-grade
    microservices.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把我们所学的所有主题结合起来，通过构建企业级微服务、查看 OpenAPI、扩展 Micronaut 以及深入构建企业级微服务，将事物提升到新的水平。
- en: Questions
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is IoT?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物联网是什么？
- en: Name a few devices that are IoT devices.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列举一些物联网设备。
- en: What is an Alexa skill?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Alexa 技能？
- en: What are Alexa intents?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 Alexa 意图？
- en: Which programming languages does Alexa support?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Alexa 支持哪些编程语言？
- en: What is the default launch handler class's name?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认启动处理程序类的名称是什么？
- en: What is the one change you will need to make to your annotate handlers so that
    they're compatible with Micronaut?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要对你的注解处理程序进行哪一项更改，以便它们与 Micronaut 兼容？
