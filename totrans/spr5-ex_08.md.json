["```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.airlineplanes.domain;\n\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport com.fasterxml.jackson.annotation.JsonInclude.Include;\nimport java.util.Set;\nimport lombok.Builder;\nimport lombok.Data;\nimport lombok.NonNull;\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport springfive.airline.airlineplanes.resource.data.PlaneRequest;\n\n@Data\n@Document(collection = \"planes\")\n@JsonInclude(Include.NON_NULL)\npublic class Plane {\n\n  @Id\n  String id;\n\n  String owner;\n\n  PlaneModel model;\n\n  Set<Seat> seats;\n\n  String notes;\n\n  @Builder\n  public static Plane newPlane(String owner,PlaneModel planeModel,Set<Seat> seats,String notes){\n    Plane plane = new Plane();\n    plane.owner = owner;\n    plane.model = planeModel;\n    plane.seats = seats;\n    plane.notes = notes;\n    return plane;\n  }\n\n  public Plane fromPlaneRequest(@NonNull PlaneRequest planeRequest){\n    this.owner = planeRequest.getOwner();\n    this.model = planeRequest.getModel();\n    this.seats = planeRequest.getSeats();\n    this.notes = planeRequest.getNotes();\n    return this;\n  }\n\n}\n```", "```java\npackage springfive.airline.airlineplanes.repository;\n\nimport org.springframework.data.repository.reactive.ReactiveCrudRepository;\nimport springfive.airline.airlineplanes.domain.Plane;\n\npublic interface PlaneRepository extends ReactiveCrudRepository<Plane,String>{\n}\n```", "```java\npackage springfive.airline.airlineplanes.service;\n\nimport lombok.NonNull;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport springfive.airline.airlineplanes.domain.Plane;\nimport springfive.airline.airlineplanes.repository.PlaneRepository;\nimport springfive.airline.airlineplanes.resource.data.PlaneRequest;\n\n@Service\npublic class PlaneService {\n\n  private final PlaneRepository planeRepository;\n\n  public PlaneService(PlaneRepository planeRepository) {\n    this.planeRepository = planeRepository;\n  }\n\n  public Flux<Plane> planes(){\n    return this.planeRepository.findAll();\n  }\n\n  public Mono<Plane> plane(@NonNull String id){\n    return this.planeRepository.findById(id);\n  }\n\n  public Mono<Void> deletePlane(@NonNull Plane plane){\n    return this.planeRepository.delete(plane);\n  }\n\n  public Mono<Plane> create(@NonNull PlaneRequest planeRequest){\n    final Plane plane = Plane.builder().owner(planeRequest.getOwner())\n .planeModel(planeRequest.getModel()).seats(planeRequest.getSeats())\n .notes(planeRequest.getNotes()).build();\n    return this.planeRepository.save(plane);\n  }\n\n  public Mono<Plane> update(@NonNull String id,@NonNull PlaneRequest planeRequest){\n    return this.planeRepository.findById(id)\n        .flatMap(plane -> Mono.just(plane.fromPlaneRequest(planeRequest)))\n        .flatMap(this.planeRepository::save);\n  }\n\n}\n```", "```java\npackage springfive.airline.airlineplanes.resource;\n\nimport java.net.URI;\nimport javax.validation.Valid;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.util.UriComponentsBuilder;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\nimport springfive.airline.airlineplanes.domain.Plane;\nimport springfive.airline.airlineplanes.resource.data.PlaneRequest;\nimport springfive.airline.airlineplanes.service.PlaneService;\n\n@RestController\n@RequestMapping(\"/planes\")\npublic class PlaneResource {\n\n  private final PlaneService planeService;\n\n  public PlaneResource(PlaneService planeService) {\n    this.planeService = planeService;\n  }\n\n  @GetMapping\n  public Flux<Plane> planes() {\n    return this.planeService.planes();\n  }\n\n  @GetMapping(\"/{id}\")\n  public Mono<ResponseEntity<Plane>> plane(@PathVariable(\"id\") String id) {\n    return this.planeService.plane(id).map(ResponseEntity::ok)\n .defaultIfEmpty(ResponseEntity.notFound().build());\n  }\n\n  @PostMapping\n  public Mono<ResponseEntity<Void>> newPlane(\n      @Valid @RequestBody PlaneRequest planeRequest, UriComponentsBuilder uriBuilder) {\n    return this.planeService.create(planeRequest).map(data -> {\n      URI location = uriBuilder.path(\"/planes/{id}\")\n .buildAndExpand(data.getId())\n .toUri();\n      return ResponseEntity.created(location).build();\n    });\n  }\n\n  @DeleteMapping(\"/{id}\")\n  public Mono<ResponseEntity<Object>> deletePlane(@PathVariable(\"id\") String id) {\n    return this.planeService.plane(id).flatMap(data -> this.planeService.deletePlane(data)\n        .then(Mono.just(ResponseEntity.noContent().build())))\n        .defaultIfEmpty(new ResponseEntity<>(HttpStatus.NOT_FOUND));\n  }\n\n  @PutMapping(\"/{id}\")\n  public Mono<ResponseEntity<Object>> updatePlane(@PathVariable(\"id\") String id,@Valid @RequestBody PlaneRequest planeRequest) {\n    return this.planeService.update(id,planeRequest)\n        .then(Mono.just(ResponseEntity.ok().build()));\n  }\n\n}\n```", "```java\npackage springfive.airline.airlineplanes;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\n @EnableZuulProxy\n@EnableEurekaClient @SpringBootApplication\npublic class AirlinePlanesApplication {\n\n public static void main(String[] args) {\n  SpringApplication.run(AirlinePlanesApplication.class, args);\n }\n\n}\n```", "```java\nspring:\n  application:\n    name: planes\n  cloud:\n    config:\n      uri: http://localhost:5000\n      label: master\n```", "```java\nStarted AirlinePlanesApplication in 17.153 seconds (JVM running for 18.25)\n```", "```java\npackage springfive.airline.airlineflights.service;\n\nimport org.springframework.cloud.client.discovery.DiscoveryClient;\nimport org.springframework.cloud.client.loadbalancer.LoadBalancerClient;\nimport org.springframework.stereotype.Service;\nimport reactor.core.publisher.Flux;\nimport reactor.core.publisher.Mono;\n\n@Service\npublic class DiscoveryService {\n\n  private final LoadBalancerClient lbClient;\n\n  private final DiscoveryClient dClient;\n\n  public DiscoveryService(LoadBalancerClient lbClient, DiscoveryClient dClient) {\n    this.lbClient = lbClient;\n    this.dClient = dClient;\n  }\n\n  public Flux<String> serviceAddressFor(String service) {\n    return Flux.defer(() ->  Flux.just(this.dClient.getInstances(service)).flatMap(srv ->\n        Mono.just(this.lbClient.choose(service))\n    ).flatMap(serviceInstance ->\n        Mono.just(serviceInstance.getUri().toString())\n    ));\n  }\n\n}\n```", "```java\npublic Mono<Plane> plane(String id) {\n  return discoveryService.serviceAddressFor(this.planesService).next().flatMap(\n      address -> this.webClient.mutate().baseUrl(address + \"/\" + this.planesServiceApiPath + \"/\" + id).build().get().exchange()\n      .flatMap(clientResponse -> clientResponse.bodyToMono(Plane.class)));\n}\n```", "```java\n{\n  \"owner\" : \"Spring Framework Company\",\n  \"model\" : {\n    \"factory\" : \"Pivotal\",\n    \"model\" : \"5.0\",\n    \"name\" : \"Spring 5.0\",\n    \"reference_name\" : \"S5.0\"\n  },\n  \"seats\" : [\n    {\n      \"identity\" : \"1A\",\n      \"row\" : \"1\",\n      \"right_side\" : { \"seat_identity\" : \"2A\"},\n      \"category\" : {\n        \"id\" : \"A\",\n        \"name\": \"First Class\"\n      }\n    },\n    {\n      \"identity\" : \"2A\",\n      \"row\" : \"1\",\n      \"left_side\" : { \"seat_identity\" : \"1A\"},\n      \"category\" : {\n        \"id\" : \"A\",\n        \"name\": \"First Class\"\n      }\n    },\n    {\n      \"identity\" : \"3A\",\n      \"row\" : \"1\",\n      \"left_side\" :{ \"seat_identity\" : \"2A\"},\n      \"category\" : {\n        \"id\" : \"A\",\n        \"name\": \"First Class\"\n      }\n    }\n    ],\n  \"notes\": \"The best company airplane\"\n}\n```", "```java\n@HystrixCommand(commandKey = \"plane-by-id\",groupKey = \"airline-flights\",fallbackMethod = \"fallback\",commandProperties = {\n @HystrixProperty(name=\"circuitBreaker.requestVolumeThreshold\",value=\"10\"),\n @HystrixProperty(name = \"circuitBreaker.errorThresholdPercentage\", value = \"10\"),\n @HystrixProperty(name=\"circuitBreaker.sleepWindowInMilliseconds\",value=\"10000\"),\n @HystrixProperty(name = \"execution.isolation.thread.timeoutInMilliseconds\", value = \"800\"),\n @HystrixProperty(name = \"metrics.rollingStats.timeInMilliseconds\", value = \"10000\")\n })\npublic Mono<Plane> plane(String id) {\n  return discoveryService.serviceAddressFor(this.planesService).next().flatMap(\n      address -> this.webClient.mutate().baseUrl(address + \"/\" + this.planesServiceApiPath + \"/\" + id).build().get().exchange()\n      .flatMap(clientResponse -> clientResponse.bodyToMono(Plane.class)));\n}\n```", "```java\n<dependency>\n  <groupId>de.codecentric</groupId>\n  <artifactId>spring-boot-admin-server</artifactId>\n  <version>1.5.6</version>v\n</dependency>\n\n<dependency>\n  <groupId>de.codecentric</groupId>\n  <artifactId>spring-boot-admin-server-ui</artifactId>\n  <version>1.5.6</version>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.admin;\n\nimport de.codecentric.boot.admin.config.EnableAdminServer;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\n\n@EnableAdminServer\n@EnableEurekaClient\n@SpringBootApplication\npublic class AdminApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(AdminApplication.class, args);\n  }\n\n}\n```", "```java\nspring:\n  application:\n    name: admin\n  cloud:\n    config:\n      uri: http://localhost:5000\n      label: master\n```", "```java\nserver:\n  port: 50015\n\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nspring:\n  boot:\n    admin:\n      discovery:\n        converter:\n          health-endpoint-path: /actuator/health\n```", "```java\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-netflix-zuul</artifactId>\n</dependency>\n```", "```java\npackage springfive.airline.edge;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.netflix.eureka.EnableEurekaClient;\nimport org.springframework.cloud.netflix.zuul.EnableZuulProxy;\nimport org.springframework.stereotype.Controller;\n\n@Controller\n@EnableZuulProxy\n@EnableEurekaClient\n@SpringBootApplication\npublic class EdgeServerApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(EdgeServerApplication.class, args);\n  }\n\n}\n```", "```java\nzuul:\n  routes:\n    planes:\n      path: /api/v1/planes/**\n      serviceId: planes\n    flights:\n      path: /api/v1/flights/**\n      serviceId: flights\n    fares:\n      path: /api/v1/fares/**\n      serviceId: fares\n    passengers:\n      path: /api/v1/passengers/**\n      serviceId: passengers\n```", "```java\n@RequestMapping(\"/planes\")\n```", "```java\n@RequestMapping(\"/\")\n```", "```java\ncurl http://localhost:8888/api/v1/planes\n```"]