["```java\n     Account account = new Account(); \n```", "```java\n    package com.packt.patterninspring.chapter2.factory;\n    public interface Account { \n      void accountType(); \n   } \n```", "```java\n    package com.packt.patterninspring.chapter2.factory; \n    public class SavingAccount implements Account{ \n      @Override \n      public void accountType() { \n         System.out.println(\"SAVING ACCOUNT\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.factory; \n    public class CurrentAccount implements Account { \n      @Override \n      public void accountType() { \n         System.out.println(\"CURRENT ACCOUNT\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.factory.pattern; \n    import com.packt.patterninspring.chapter2.factory.Account; \n    import com.packt.patterninspring.chapter2.factory.CurrentAccount; \n    import com.packt.patterninspring.chapter2.factory.SavingAccount; \n    public class AccountFactory { \n      final String CURRENT_ACCOUNT = \"CURRENT\"; \n      final String SAVING_ACCOUNT  = \"SAVING\"; \n      //use getAccount method to get object of type Account    \n      //It is factory method for object of type Account \n      public Account getAccount(String accountType){   \n         if(CURRENT_ACCOUNT.equals(accountType)) {   \n               return new CurrentAccount();   \n         }\n         else if(SAVING_ACCOUNT.equals(accountType)){   \n               return new SavingAccount();   \n         }    \n         return null;   \n      }   \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.factory.pattern; \n    import com.packt.patterninspring.chapter2.factory.Account; \n    public class FactoryPatterMain { \n      public static void main(String[] args) { \n         AccountFactory accountFactory = new AccountFactory(); \n         //get an object of SavingAccount and call its accountType()\n         method. \n         Account savingAccount = accountFactory.getAccount(\"SAVING\"); \n         //call accountType method of SavingAccount \n         savingAccount.accountType(); \n         //get an object of CurrentAccount and call its accountType() \n         method. \n         Account currentAccount = accountFactory.getAccount(\"CURRENT\"); \n         //call accountType method of CurrentAccount \n         currentAccount.accountType(); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.model; \n    public interface Bank { \n      void bankName(); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.model; \n    public class ICICIBank implements Bank { \n      @Override \n      public void bankName() { \n        System.out.println(\"ICICI Bank Ltd.\"); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.model; \n    public class YesBank implements Bank{ \n      @Override \n      public void bankName() { \n         System.out.println(\"Yes Bank Pvt. Ltd.\"); \n      } \n   } \n```", "```java\n    package com.packt.patterninspring.chapter2.abstractfactory.pattern; \n    import com.packt.patterninspring.chapter2.model.Account; \n    import com.packt.patterninspring.chapter2.model.Bank; \n    public abstract class AbstractFactory { \n      abstract Bank getBank(String bankName); \n      abstract Account getAccount(String accountType); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.abstractfactory.pattern; \n    import com.packt.patterninspring.chapter2.model.Account; \n    import com.packt.patterninspring.chapter2.model.Bank; \n    import com.packt.patterninspring.chapter2.model.ICICIBank; \n    import com.packt.patterninspring.chapter2.model.YesBank; \n    public class BankFactory extends AbstractFactory { \n      final String ICICI_BANK = \"ICICI\"; \n      final String YES_BANK   = \"YES\"; \n      //use getBank method to get object of name bank    \n      //It is factory method for object of name bank \n      @Override \n      Bank getBank(String bankName) { \n         if(ICICI_BANK.equalsIgnoreCase(bankName)){   \n               return new ICICIBank();   \n         } \n         else if(YES_BANK.equalsIgnoreCase(bankName)){   \n               return new YesBank();   \n         }   \n         return null; \n      } \n      @Override \n      Account getAccount(String accountType) { \n         return null; \n      } \n    } \n```", "```java\n     package com.packt.patterninspring.chapter2.abstractfactory.pattern; \n     import com.packt.patterninspring.chapter2.model.Account; \n     import com.packt.patterninspring.chapter2.model.Bank; \n     import com.packt.patterninspring.chapter2.model.CurrentAccount; \n     import com.packt.patterninspring.chapter2.model.SavingAccount; \n     public class AccountFactory extends AbstractFactory { \n       final String CURRENT_ACCOUNT = \"CURRENT\"; \n       final String SAVING_ACCOUNT  = \"SAVING\"; \n       @Override \n       Bank getBank(String bankName) { \n          return null; \n      } \n      //use getAccount method to get object of type Account    \n      //It is factory method for object of type Account \n      @Override \n      public Account getAccount(String accountType){   \n        if(CURRENT_ACCOUNT.equals(accountType)) {   \n               return new CurrentAccount();   \n        }\n        else if(SAVING_ACCOUNT.equals(accountType)){   \n               return new SavingAccount();   \n        }    \n        return null;   \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.abstractfactory.pattern; \n    public class FactoryProducer { \n      final static String BANK    = \"BANK\"; \n      final static String ACCOUNT = \"ACCOUNT\"; \n      public static AbstractFactory getFactory(String factory){ \n         if(BANK.equalsIgnoreCase(factory)){ \n               return new BankFactory(); \n         }\n         else if(ACCOUNT.equalsIgnoreCase(factory)){ \n               return new AccountFactory(); \n         } \n         return null; \n       } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.factory.pattern; \n    import com.packt.patterninspring.chapter2.model.Account; \n    public class FactoryPatterMain { \n      public static void main(String[] args) { \n         AccountFactory accountFactory = new AccountFactory(); \n         //get an object of SavingAccount and call its accountType() \n         method. \n         Account savingAccount = accountFactory.getAccount(\"SAVING\"); \n         //call accountType method of SavingAccount \n         savingAccount.accountType(); \n         //get an object of CurrentAccount and call its accountType() \n         method. \n         Account currentAccount = accountFactory.getAccount(\"CURRENT\"); \n         //call accountType method of CurrentAccount \n         currentAccount.accountType(); \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.singleton.pattern; \n    public class SingletonClass { \n      private static SingletonClass instance = null; \n      private SingletonClass() { \n      } \n      public static SingletonClass getInstance() { \n        if (instance == null) { \n          synchronized(SingletonClass.class){   \n               if (instance == null) { \n                  instance = new SingletonClass(); \n               } \n          } \n        } \n       return instance; \n      } \n    } \n  } \n```", "```java\n    package com.packt.patterninspring.chapter2.singleton.pattern; \n    public class SingletonClass { \n      private static final SingletonClass INSTANCE = \n         new SingletonClass(); \n      private SingletonClass() {} \n      public static SingletonClass getInstance() { \n        return INSTANCE; \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter2.prototype.pattern;\n    public abstract class Account implements Cloneable{\n      abstract public void accountType();\n      public Object clone() {\n        Object clone = null;\n        try {\n          clone = super.clone();\n        }\n        catch (CloneNotSupportedException e) {\n          e.printStackTrace();\n        }\n        return clone;\n      }\n    }\n```", "```java\n    package com.packt.patterninspring.chapter2.prototype.pattern;\n    public class CurrentAccount extends Account {\n      @Override\n      public void accountType() {\n        System.out.println(\"CURRENT ACCOUNT\");\n      }\n    }\n```", "```java\n    package com.packt.patterninspring.chapter2.prototype.pattern;\n    public class SavingAccount extends Account{\n      @Override\n      public void accountType() {\n        System.out.println(\"SAVING ACCOUNT\");\n      }\n    }\n```", "```java\n    package com.packt.patterninspring.chapter2.prototype.pattern;\n    import java.util.HashMap;\n    import java.util.Map;\n    public class AccountCache {\n       public static Map<String, Account> accountCacheMap =\n           new HashMap<>();\n       static{\n         Account currentAccount = new CurrentAccount();\n         Account savingAccount = new SavingAccount();\n         accountCacheMap.put(\"SAVING\", savingAccount);\n         accountCacheMap.put(\"CURRENT\", currentAccount);\n       }\n     }\n```", "```java\n    package com.packt.patterninspring.chapter2.prototype\n         .pattern;\n    public class PrototypePatternMain {\n      public static void main(String[] args) {\n        Account currentAccount = (Account) \n          AccountCache.accountCacheMap.get(\"CURRENT\").clone();\n       currentAccount.accountType();\n       Account savingAccount = (Account) \n         AccountCache.accountCacheMap.get(\"SAVING\") .clone();\n       savingAccount.accountType();\n     }\n   }\n```", "```java\n    package com.packt.patterninspring.chapter2.builder.pattern; \n    public class Account { \n      private String accountName; \n      private Long accountNumber; \n      private String accountHolder; \n      private double balance; \n      private String type; \n      private double interest; \n      private Account(AccountBuilder accountBuilder) { \n         super(); \n         this.accountName = accountBuilder.accountName; \n         this.accountNumber = accountBuilder.accountNumber; \n         this.accountHolder = accountBuilder.accountHolder; \n         this.balance = accountBuilder.balance; \n         this.type = accountBuilder.type; \n         this.interest = accountBuilder.interest; \n      } \n      //setters and getters \n       public static class AccountBuilder { \n         private final String accountName; \n         private final Long accountNumber; \n         private final String accountHolder; \n         private double balance; \n         private String type; \n         private double interest; \n         public AccountBuilder(String accountName, \n            String accountHolder, Long accountNumber) { \n            this.accountName = accountName; \n            this.accountHolder = accountHolder; \n            this.accountNumber = accountNumber; \n         } \n         public AccountBuilder balance(double balance) { \n            this.balance = balance; \n            return this; \n         } \n         public AccountBuilder type(String type) { \n            this.type = type; \n            return this; \n         } \n         public AccountBuilder interest(double interest) { \n            this.interest = interest; \n            return this; \n         } \n         public Account build() { \n            Account user =  new Account(this); \n            return user; \n         } \n       } \n       public String toString() { \n       return \"Account [accountName=\" + accountName + \", \n          accountNumber=\" + accountNumber + \", accountHolder=\" \n          + accountHolder + \", balance=\" + balance + \", type=\"\n          + type + \", interest=\" + interest + \"]\"; \n       } \n    } \n```", "```java\n     package com.packt.patterninspring.chapter2.builder.pattern; \n     public class AccountBuilderTest { \n       public static void main(String[] args) { \n         Account account = new Account.AccountBuilder(\"Saving\n            Account\", \"Dinesh Rajput\", 1111l) \n              .balance(38458.32) \n              .interest(4.5) \n              .type(\"SAVING\") \n              .build(); \n         System.out.println(account); \n       } \n     } \n```"]