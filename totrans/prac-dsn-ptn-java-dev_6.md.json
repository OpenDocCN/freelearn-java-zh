["```java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"Active Object Pattern, moving\n        vehicle\");\n    var sportVehicle = new SportVehicle(\"super_sport\");\n    sportVehicle.move();\n    sportVehicle.turnOnRadio();\n    sportVehicle.turnOffRadio();\n    sportVehicle.turnOnRadio();\n    sportVehicle.stopVehicle();\n    sportVehicle.turnOffRadio();\n    TimeUnit.MILLISECONDS.sleep(400);\n    System.out.println(\"ActiveObjectMain, sportVehicle\n    moving:\" + sportVehicle.isMoving());\n}\n```", "```java\nActive Object Pattern, moving vehicle\nMovingVehicle:'super_sport', moving\nMovingVehicle:'super_sport', radio on\nMovingVehicle:'super_sport', moving\nMovingVehicle:'super_sport', stopping, commands_active:'3'\nMovingVehicle:'super_sport', stopped\nActiveObjectMain, sportVehicle moving:false\n```", "```java\nabstract class MovingVehicle {\n    private static final AtomicInteger COUNTER = new\n       AtomicInteger();\n    private final BlockingDeque<Runnable> commands;\n    private final String type;\n    private final Thread thread;\n    private boolean active;\n    MovingVehicle(String type) {\n        this.commands = new LinkedBlockingDeque<>();\n        this.type = type;\n        this.thread = createMovementThread();\n    }\n   …\n  private Thread createMovementThread() {\n    var thread = new Thread(() -> {\n        while (active) {\n            try {\n                var command = commands.take();\n                command.run();\n               ...\n        }\n    });\n    thread.setDaemon(true);\n    thread.setName(\"moving-vehicle-\" +\n        COUNTER.getAndIncrement());\n    return thread;\n   …\n}\n```", "```java\nabstract class MovingVehicle {\n  ...\n  void turnOffRadio() throws InterruptedException {\n    commands.putLast(() -> {...});\n  }\n  void stopVehicle() throws InterruptedException {\n    commands.putFirst(() -> {...});\n  }\n  ...\n}\n```", "```java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"Async method invocation Pattern,\n        moving vehicle\");\n    var sensorTaskExecutor = new\n        TempSensorExecutor<Integer>();\n    var tempSensorCallback = new TempSensorCallback();\n    var tasksNumber = 5;\n    var measurements = new ArrayList<SensorResult\n       <Integer>>();\n    System.out.printf(\"\"\"\n                AsyncMethodMain, tasksNumber:'%d' %n\"\"\",\n                    tasksNumber);\n    for(int i=0; i<tasksNumber; i++) {\n        var sensorResult = sensorTaskExecutor.measure(new\n            TempSensorTask(), tempSensorCallback);\n        measurements.add(sensorResult);\n    }\n    sensorTaskExecutor.start();\n    AsyncMethodUtils.delayMills(10);\n    for(int i=0; i< tasksNumber; i++){\n        var temp = sensorTaskExecutor.stopMeasurement\n            (measurements.get(i));\n        System.out.printf(\"\"\"\n                AsyncMethodMain, sensor:'%d'\n                    temp:'%d'%n\"\"\", i, temp);\n    }\n```", "```java\nAsync method invocation Pattern, moving vehicle\nAsyncMethodMain, tasksNumber:'5'\nSensorTaskExecutor, started:5\n...\nTempSensorTask,n:'4' temp:'5', thread:'thread-3'\nTempSensorTask,n:'3' temp:'26', thread:'thread-0'\nTemperatureSensorCallback, recorded value:'26',\n  thread:'main'\nAsyncMethodMain, sensor:'0' temp:'26'\n…\n```", "```java\nclass TempSensorExecutor<T> implements SensorExecutor<T> {\n    ...\n    @Override\n    public SensorResult<T> measure(Callable<T> sensor,\n        SensorCallback<T> callback) {\n        var result = new TempSensorResult<T>(callback);\n        Runnable runnable = () -> {\n            try {\n                result.setResult(sensor.call());\n            } catch (Exception e) {\n                result.addException(e);\n            }\n        };\n        var thread = new Thread(runnable, \"thread-\" +\n            COUNTER.getAndIncrement());\n        thread.setDaemon(true);\n        threads.add(thread);\n        return result;\n    }\n}\n```", "```java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"Balking pattern, vehicle move\");\n    var vehicle = new Vehicle();\n    var numberOfDrivers = 5;\n    var executors = Executors.newFixedThreadPool(2);\n    for (int i = 0; i < numberOfDrivers; i++) {\n        executors.submit(vehicle::drive);\n    }\n    TimeUnit.MILLISECONDS.sleep(1000);\n    executors.shutdown();\n    System.out.println(\"Done\");\n}\n```", "```java\nBalking pattern, vehicle move\nVehicle state:'MOVING', moving, mills:'75',\n  thread='Thread[pool-1-thread-2,5,main]'\nVehicle state:'STOPPED' stopped, mills:'75',\n  thread='Thread[pool-1-thread-2,5,main]'\nVehicle state:'MOVING', moving, mills:'98',\n  thread='Thread[pool-1-thread-1,5,main]'\n…\n```", "```java\nclass Vehicle {\n    synchronized void driveWithMills(int mills) throws\n        InterruptedException {\n        var internalState = getState();\n        switch (internalState) {\n            case MOVING -> System.out.printf(\"\"\"\n                    Vehicle state:'%s', vehicle in move,\n                        millis:'%d', thread='%s'%n\"\"\",\n                           state, mills, Thread\n                             .currentThread());\n            case STOPPED -> startEngineAndMove(mills);\n            case null -> init();\n        }\n}\n...\n```", "```java\npublic static void main(String[] args) {\n    System.out.println(\"Double checked locking pattern,\n        only one vehicle\");\n    var amount = 5;\n    ExecutorService executor = Executors\n        .newFixedThreadPool(amount);\n    System.out.println(\"Number of executors:\" + amount);\n    for (int i = 0; i < amount; i++) {\n        executor.submit(VehicleSingleton::getInstance);\n        executor.submit(VehicleSingletonChecked\n           ::getInstance);\n    }\n    executor.shutdown();\n}\n```", "```java\nDouble checked locking pattern, only one vehicle\nNumber of executors:5\nVehicleSingleton, constructor thread:'pool-1-thread-1'\nhashCode:'1460252997'\nVehicleSingleton, constructor thread:'pool-1-thread-5'\nhashCode:'1421065097'\nVehicleSingleton, constructor thread:'pool-1-thread-3'\nhashCode:'1636104814'\nVehicleSingletonChecked, constructor thread:'pool-1-thread-\n2' hashCode:'523532675'\n```", "```java\npublic static VehicleSingleton getInstance(){\n    if (INSTANCE == null){\n        INSTANCE = new VehicleSingleton();\n    }\n    return INSTANCE;\n}\n...\nstatic VehicleSingletonChecked getInstance() {\n    if (INSTANCE == null) {\n        synchronized (VehicleSingletonChecked.class) {\n            if (INSTANCE == null) {\n                INSTANCE = new VehicleSingletonChecked();\n            }\n        }\n    }\n    return INSTANCE;\n}\n```", "```java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"Read-Write Lock pattern, writing\n        and reading sensor values\");\n    ReentrantReadWriteLock readWriteLock = new\n        ReentrantReadWriteLock();\n    var sensor = new Sensor(readWriteLock.readLock(),\n        readWriteLock.writeLock());\n    var sensorWriter = new SensorWriter(\"writer-1\",\n        sensor);\n    var writerThread = getWriterThread(sensorWriter);\n    ExecutorService executor = Executors.newFixedThreadPool\n        (NUMBER_READERS);\n    var readers = IntStream.range(0, NUMBER_READERS)\n            .boxed().map(i -> new SensorReader(\"reader-\"\n               + i, sensor, CYCLES_READER)).toList();\n    readers.forEach(executor::submit);\n    writerThread.start();\n    executor.shutdown();\n}\n```", "```java\nRead-Write Lock pattern, writing and reading sensor values\nSensorReader read, type:'reader-2', value:'50,\nthread:'pool-1-thread-3'\nSensorReader read, type:'reader-0', value:'50,\nthread:'pool-1-thread-1'\nSensorReader read, type:'reader-1', value:'50,\nthread:'pool-1-thread-2'\nSensorWriter write, type:'writer-1', value:'26',\nthread:'pool-2-writer-1'\nSensorReader read, type:'reader-2', value:'26,\nthread:'pool-1-thread-3'\n...\n```", "```java\nclass Sensor {\n    ...\n    int getValue() {\n        readLock.lock();\n        int result;\n        try {  result = value; … } finally {  readLock.\n          unlock(); }\n        return result;\n    }\n    void writeValue(int v) {\n        writeLock.lock();\n        try { this.value = v; ...} finally {\n            writeLock.unlock();}\n    }\n}\n```", "```java\npublic static void main(String[] args) throws Exception{\n    System.out.println(\"Producer-Consumer pattern,\n        decoupling receivers and emitters\");\n    var producersNumber = 12;\n    var consumersNumber = 10;\n    var container = new EventsContainer(3);\n    ExecutorService producerExecutor =\n        Executors.newFixedThreadPool(4, new\n            ProdConThreadFactory(\"prod\"));\n    ExecutorService consumersExecutor = Executors.\n        newFixedThreadPool(2, new ProdConThreadFactory\n            (\"con\"));\n    IntStream.range(0, producersNumber)\n            .boxed().map(i -> new EventProducer(container))\n            .forEach(producerExecutor::submit);\n    IntStream.range(0, consumersNumber)\n            .boxed().map(i -> new EventConsumer(i,container))\n            .forEach(consumersExecutor::submit);\n    TimeUnit.MILLISECONDS.sleep(200);\n    producerExecutor.shutdown();\n    consumersExecutor.shutdown();\n}\n```", "```java\nProducer-Consumer pattern, decoupling mess\nVehicleSecurityConsumer,event:'Event[number=0, source=pool-\nprod-0]', number:'0', thread:'pool-con-0'\nVehicleSecurityConsumer,event:'Event[number=1, source=pool-\nprod-3]', number:'1', thread:'pool-con-1'\nVehicleSecurityConsumer,event:'Event[number=3, source=pool-\nprod-1]', number:'2', thread:'pool-con-0'\nVehicleSecurityConsumer,event:'Event[number=2, source=pool-prod-2]', number:'3', thread:'pool-con-1'\n...\n```", "```java\npublic static void main (String [] args) throws Exception {\n    System.out.println(\"Scheduler pattern, temperature\n        measurement\");\n    var scheduler = new CustomScheduler(100);\n    scheduler.run();\n    for (int i=0; i < 15; i++){\n        scheduler.addTask(new SensorTask(\n            \"temperature-\"+i));\n    }\n    TimeUnit.SECONDS.sleep(1);\n    scheduler.stop();\n}\n```", "```java\nScheduler pattern, providing sensor values\nSensorTask, type:'temperature-0'\n,activeTime:'58',thread:'scheduler-1'\nSensorTask, type:'temperature-1',\nactiveTime:'65',thread:'scheduler-1'\nSensorTask, type:'temperature-2',\nactiveTime:'75',thread:'scheduler-1'\n...\nCustomScheduler, stopped\n```", "```java\nCustomScheduler  { ...\n    CustomScheduler(int intervalMillis) {\n    this.intervalMills = intervalMillis;\n    this.queue = new ArrayBlockingQueue<>(10);\n    this.thread = new Thread(() -> {\n        while (active){\n            try {\n                var runnable = queue.poll(intervalMillis,\n                    TimeUnit.MILLISECONDS);\n                 ...\n                 var delay = intervalMillis – runnable\n                    .activeTime();\n                TimeUnit.MILLISECONDS.sleep(delay);\n            } catch (InterruptedException e) {  throw new\n                RuntimeException(e); }\n        }\n        System.out.println(\"CustomScheduler, stopped\");\n    }, \"scheduler-1\");\n}\n...\n```", "```java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"Pooled scheduler pattern ,\n        providing sensor values\");\n    var pool = new CustomScheduledThreadPoolExecutor(2);\n    for(int i=0; i < 4; i++){\n        pool.scheduleAtFixedRate(new SensorTask\n           (\"temperature-\"+i), 0, 50,\n                TimeUnit.MILLISECONDS);\n    }\n    TimeUnit.MILLISECONDS.sleep(200);\n    pool.shutdown();\n}\n```", "```java\nPooled scheduler pattern, providing sensor values\nPOOL: scheduled task:'468121027', every MILLS:'50'\nPOOL, before execution, thread:'custom-scheduler-pool-0',\ntask:'852255136'\n...\nPOOL: scheduled task:'1044036744', every MILLS:'50'\nSensorTask, type:'temperature-1',\nactiveTime:'61',thread:'custom-scheduler-pool-1'\nSensorTask, type:'temperature-0',\nactiveTime:'50',thread:'custom-scheduler-pool-0'\nPOOL, after execution, task:'852255136', diff:'56'\nPOOL, before execution, thread:'custom-scheduler-pool-0',\ntask:'1342170835'\nSensorTask, type:'temperature-2'\n,activeTime:'71',thread:'custom-scheduler-pool-0'\n...\nPOOL is going down\n```", "```java\npublic static void main (String[] args) throws Exception{\n    System.out.println(\"Thread-Pool pattern, providing\n        sensor values\");\n    var executor = Executors.newFixedThreadPool(5);\n    for (int i=0; i < 15; i++){\n        var task = new TemperatureTask(\"temp\" + i);\n        var worker  = new SensorWorker(task);\n        executor.submit(worker);\n    }\n    executor.shutdown();\n}\n```", "```java\nThread-Pool pattern, providing sensor values\nTemperatureTask, type:'temp3', temp:'0', thread:'pool-1-\nthread-4'\nTemperatureTask, type:'temp4', temp:'7', thread:'pool-1-\nthread-5'\nTemperatureTask, type:'temp2', temp:'15', thread:'pool-1-\nthread-3'\nTemperatureTask, type:'temp1', temp:'20', thread:'pool-1-\nthread-2'\n..\n```", "```java\nclass SensorWorker implements Runnable {\n    ...\n    @Override\n    public void run () {\n        try {task.measure();} catch (InterruptedException\n            e) {...}\n    }\n}\n```"]