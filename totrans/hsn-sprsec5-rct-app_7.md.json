["```java\ncreate table persistent_logins(\n     series varchar(64) not null primary key,   \n     username varchar(75) not null,\n     token varchar(100) not null,\n     last_used timestamp not null\n);\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.csrf().disable();\n  http.authorizeRequests().anyRequest().hasAnyRole(\"ADMIN\", \"USER\")\n      .and()\n      .authorizeRequests().antMatchers(\"/login**\").permitAll()\n      .and()\n      .formLogin()\n      .loginPage(\"/login\").loginProcessingUrl(\"/loginProc\").permitAll()\n      .and()\n      .logout().logoutSuccessUrl(\"/login\").permitAll()\n      .and()\n      .rememberMe()\n      .rememberMeParameter(\"rememberme\").tokenRepository(tokenRepository());\n}\n@Bean\npublic PersistentTokenRepository tokenRepository() {\n  JdbcTokenRepositoryImpl jdbcTokenRepositoryImpl=new JdbcTokenRepositoryImpl();\n  jdbcTokenRepositoryImpl.setDataSource(dataSource);\n  return jdbcTokenRepositoryImpl;\n}\n```", "```java\n<form action='<spring:url value=\"/loginProc\"/>' method=\"post\">\n  <table>\n      <tr>\n          <td>Username</td>\n          <td><input type=\"text\" name=\"username\"></td>\n      </tr>\n      <tr>\n          <td>Password</td>\n          <td><input type=\"password\" name=\"password\"></td>\n      </tr>\n      <tr>\n          <td><input type=\"checkbox\" name=\"rememberme\"></td>\n          <td>Remember me</td>\n      </tr>\n      <tr>\n          <td><button type=\"submit\">Login</button></td>\n      </tr>\n  </table>\n</form>\n```", "```java\nmvn jetty:run\n```", "```java\nhttp.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.ALWAYS);\n```", "```java\nhttp.sessionManagement().invalidSessionUrl(\"/invalidSession\");\n```", "```java\nhttp.sessionManagement().maximumSessions(1);\n```", "```java\nhttp.sessionManagement().sessionFixation().migrateSession();\n```", "```java\nhttp.sessionManagement().sessionFixation().newSession();\n```", "```java\nhttp.sessionManagement().sessionFixation().none();\n```", "```java\nhttp\n  .csrf().disable();\n```", "```java\n<input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\" />\n```", "```java\n<head>\n     <meta name=\"_csrf\" content=\"${_csrf.token}\"/>\n     <meta name=\"_csrf_header\" content=\"${_csrf.headerName}\"/>\n     <!-- ... -->\n </head>\n```", "```java\nhttp\n  .csrf()\n  .csrfTokenRepository(new CookieCsrfTokenRepository());\n```", "```java\nContent-Security-Policy: script-src https://trusted-domain.com\n```", "```java\nContent-Security-Policy: script-src https://trusted-domain.com; report-uri /csp-report-api/\n```", "```java\nContent-Security-Policy-Report-Only: script-src https://trusted-domain.com; report-uri /csp-report-api/\n```", "```java\n{\"csp-report\":\n    {\"document-uri\":\"...\",\n    \"violated-directive\":\"script-src https://trusted-domain.com\",\n    \"original-policy\":\"...\",\n    \"blocked-uri\":\"https://untrusted-domain.com\"}\n}\n```", "```java\nContent-Security-Policy: script-src 'self' 'nonce-<cryptographically generated random string>'\n```", "```java\nContent-Security-Policy: script-src 'self' 'sha256-<base64 encoded hash>'\n```", "```java\nhttp\n     .headers()\n         .contentSecurityPolicy(\"script-src 'self' https://trusted-domain.com; report-uri /csp-report-api/\");\n```", "```java\nhttp\n     .headers()\n         .contentSecurityPolicy(\"script-src 'self' https://trusted-domain.com; report-uri /csp-report-api/\")\n        .reportOnly();\n```", "```java\nhttp.authorizeRequests()\n      .requiresChannel().antMatchers(\"/httpsRequired/**\").requiresSecure();\n```", "```java\nhttp.authorizeRequests()\n      .requiresChannel().anyRequest().requiresSecure();\n```", "```java\n.requiresChannel().antMatchers(\"/httpRequired/**\").requiresInsecure();\n```", "```java\n.requiresChannel().anyRequest().requiresInsecure();\n```", "```java\n@EnableWebSecurity\n@Configuration\npublic class SpringSecurityConfig extends WebSecurityConfigurerAdapter {\n\n @Override\n protected void configure(HttpSecurity http) throws Exception {\n    http.cors();\n }\n @Bean\n CorsConfigurationSource corsConfigurationSource() {\n    UrlBasedCorsConfigurationSource urlCorsConfigSrc = new\n          UrlBasedCorsConfigurationSource();\n    urlCorsConfigSrc.registerCorsConfiguration(\"/**\", \n        new CorsConfiguration().applyPermitDefaultValues());\n    return urlCorsConfigSrc;\n }\n}\n```", "```java\nCorsConfiguration configuration = new CorsConfiguration();\nconfiguration.setAllowedOrigins(new ArrayList<String>(Arrays.asList(\"*\")));\nconfiguration.setAllowedHeaders(new ArrayList<String>        \n    (Arrays.asList(\"Authorization\", \"Cache-Control\", \"Content-Type\")));\nconfiguration.setAllowedMethods(new ArrayList<String>(Arrays.asList(\"HEAD\", \n    \"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\")));\nconfiguration.setAllowCredentials(true);\n```", "```java\n@Configuration\npublic class SpringMVCConfig {\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n          .allowedMethods(\"HEAD\", \"GET\", \"PUT\", \"POST\", \"DELETE\",\n            \"PATCH\",\"OPTIONS\");\n      }\n    };\n  }\n}\n```", "```java\nbackend \"inmem\" {\n} \nlistener \"tcp\" {\n  address = \"0.0.0.0:8200\"\n  tls_disable = 1\n}\ndisable_mlock = true\n```", "```java\n./vault server -config vault.conf\n```", "```java\nexport VAULT_ADDR=http://127.0.0.1:8200\n```", "```java\n./vault unseal <any key generated using initialization>\n```", "```java\nexport VAULT_TOKEN=ee60f275-7b16-48ea-0e74-dc48b4b3729c\n```", "```java\n./vault write secret/movie-application password=randomstring\n```", "```java\nunzip -a spring-boot-spring-cloud-vault.zip\n```", "```java\n<dependency>\n <groupId>org.springframework.cloud</groupId>\n <artifactId>spring-cloud-starter-vault-config</artifactId>\n <version>2.0.0.RELEASE</version>\n</dependency>\n```", "```java\nspring:\n  application:\n      name: movie-application\nspring.cloud.vault:\n  host: localhost # hostname of vault server\n  port: 8200  # vault server port\n  scheme: http # connection scheme http or https\n  uri: http://localhost:8200 # vault endpoint\n  connection-timeout: 10000 # connection timeout in milliseconds\n  read-timeout: 5000  # read timeout in milliseconds\n  config:\n      order: -10  # order for property source\n  token: ee60f275-7b16-48ea-0e74-dc48b4b3729c\nhealth.vault.enabled: true  # health endpoint enabled using spring actuator\n```", "```java\n./vault token create\n```", "```java\n@Value(\"${password}\")\nString password;\n\n@PostConstruct\nprivate void postConstruct() {\n System.out.println(\"Secret in Movie application password is: \" + password);\n}\n```", "```java\n<!--HDIV dependency-->\n<dependency>\n   <groupId>org.hdiv</groupId>\n   <artifactId>spring-boot-starter-hdiv-thymeleaf</artifactId>\n   <version>1.3.1</version>\n   <type>pom</type>\n</dependency>\n```", "```java\n@Configuration\n@EnableHdivWebSecurity\npublic class HdivSecurityConfig extends HdivWebSecurityConfigurerAdapter {\n    @Override\n    public void addExclusions(final ExclusionRegistry registry) {\n        registry.addUrlExclusions(\"/login\");\n    }\n}\n```", "```java\nmvn spring-boot:run\n```", "```java\npublic class CustomDSL extends AbstractHttpConfigurer<CustomDSL, HttpSecurity> {\n    @Override\n    public void init(HttpSecurity builder) throws Exception {\n       // Any configurations that you would like to do (say as default) can be  \n       configured here\n    }\n\n    @Override\n    public void configure(HttpSecurity builder) throws Exception {\n       // Can add anything specific to your application and this will be honored\n    }\n}\n```", "```java\n@Override\n protected void configure(HttpSecurity http) throws Exception {\n     http\n         .apply(<invoke custom DSL>)\n         ...;\n }\n```"]