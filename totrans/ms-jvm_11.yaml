- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: The JVM Ecosystem and Alternative JVMs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM 生态系统和替代 JVM
- en: The JVM is the cornerstone of Java’s *write once, run anywhere* philosophy,
    enabling the execution of Java bytecode on diverse platforms. While the HotSpot
    JVM has long been the stalwart choice, the expansive JVM ecosystem extends far
    beyond, offering alternative implementations that cater to specific needs and
    performance considerations. In this chapter, we’ll explore the JVM landscape comprehensively,
    delving into alternative JVMs such as OpenJ9 and Correto. As we unravel their
    nuances, you will gain valuable insights into the diverse options available, each
    with unique features, optimizations, and trade-offs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 是 Java “一次编写，到处运行”哲学的基石，它使得 Java 字节码能够在各种平台上执行。虽然 HotSpot JVM 一直是最可靠的选择，但庞大的
    JVM 生态系统远远超出了这个范围，提供了满足特定需求和性能考量的替代实现。在本章中，我们将全面探索 JVM 的景观，深入研究如 OpenJ9 和 Correto
    这样的替代 JVM。随着我们揭示它们的细微差别，你将获得宝贵的见解，了解可用的各种选项，每个选项都有其独特的功能、优化和权衡。
- en: Our journey commences with an in-depth overview of these alternative JVMs, shedding
    light on their architectures and critical differentiators. Subsequent sections
    delve into the performance characteristics and benchmarks that distinguish these
    implementations, providing a nuanced understanding of how alternative JVMs stack
    up against the conventional HotSpot. Through real-world performance metrics, we
    aim to empower you with the knowledge to make informed decisions tailored to your
    specific use cases. Additionally, we’ll explore practical scenarios and use points
    where alternative JVMs shine, showcasing their strengths in various application
    domains. This chapter will also discuss the seamless integration of these JVMs
    with Java applications, offering insights into compatibility, tooling support,
    and interoperability. Finally, we’ll wrap up with essential considerations that
    guide the judicious selection of a JVM, ensuring that you are equipped to navigate
    the complexities of the JVM ecosystem with confidence and precision.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的旅程从对这些替代 JVM 的深入概述开始，揭示了它们的架构和关键区别。随后的章节深入探讨这些实现的表现特性和基准，提供了对替代 JVM 如何与传统
    HotSpot 相比较的深入理解。通过实际性能指标，我们旨在赋予你知识，以便根据你特定的用例做出明智的决定。此外，我们将探讨替代 JVM 在实际场景和用例中的表现，展示它们在各种应用领域的优势。本章还将讨论这些
    JVM 与 Java 应用程序的无缝集成，提供关于兼容性、工具支持互操作性的见解。最后，我们将总结选择 JVM 的关键考虑因素，确保你能够自信且精确地导航
    JVM 生态系统。
- en: 'In this chapter, we’ll explore the topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: The diversity of the JVM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM 的多样性
- en: Eclipse J9
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse J9
- en: Amazon Corretto
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Amazon Corretto
- en: Azul Zulu
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azul Zulu
- en: IBM Semeru
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IBM Semeru
- en: Eclipse Temurin
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse Temurin
- en: Even more JVM vendors and SDKMan
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多的 JVM 供应商和 SDKMan
- en: The diversity of the JVM
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM 的多样性
- en: A captivating exploration of the JVM and its remarkable tapestry is interwoven
    within the programming world. While Java often takes center stage, the JVM’s true
    prowess lies in its versatility, extending far beyond a mere executor of Java
    bytecode. Contrary to popular belief, the JVM is not a monolithic entity but a
    testament to diversity, accommodating a rich ecosystem of alternative implementations
    and vendors. Let’s embark on a journey to uncover the manifold facets of the JVM
    that make it an unparalleled force in software development.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JVM 及其非凡的织锦在编程世界中引人入胜。虽然 Java 经常占据中心舞台，但 JVM 的真正实力在于其多功能性，远远超出仅仅执行 Java 字节码的能力。与流行观念相反，JVM
    并不是一个单一实体，而是多样性的见证，它容纳了丰富的替代实现和供应商生态系统。让我们踏上探索 JVM 多面性的旅程，了解它如何成为软件开发中无与伦比的力量。
- en: Despite being the bedrock of Java, the JVM is not confined to a single language.
    Its extensibility has paved the way for many programming languages to flourish
    under its aegis. From Kotlin and Scala to Groovy and Clojure, the JVM acts as
    a unifying platform that fosters an environment where developers can seamlessly
    harness the power of different languages. Moreover, the landscape of JVM distributors
    is a testament to the ecosystem’s robustness. Beyond Oracle’s HotSpot JVM, there’s
    a tapestry of alternatives, each bringing its unique blend of optimizations, features,
    and licensing models. In fact, over the JVM’s storied history, more than 20 implementations
    have emerged, catering to diverse needs and preferences.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Java的基石是JVM，但它并不局限于单一语言。其可扩展性为许多编程语言在其庇护下繁荣发展铺平了道路。从Kotlin和Scala到Groovy和Clojure，JVM充当了一个统一平台，为开发者提供了一个无缝利用不同语言力量的环境。此外，JVM发行者的格局证明了生态系统的稳健性。除了Oracle的HotSpot
    JVM之外，还有一系列替代方案，每个都带来了其独特的优化、特性和许可模式。事实上，在JVM悠久的历史中，已经出现了超过20种实现，满足多样化的需求和偏好。
- en: One of the most remarkable aspects of the JVM is its ability to transcend the
    boundaries of languages and vendors. Thanks to meticulously crafted specifications,
    developers can write code in one JVM implementation and confidently execute it
    in another, regardless of vendor disparities. This interoperability fosters code
    reuse and promotes an ecosystem where innovation can thrive. As we navigate this
    section, we’ll explore how the JVM’s universal bridge enables developers to compile
    code on one JVM and seamlessly run it on another, underscoring the platform’s
    adaptability and resilience.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JVM最引人注目的特点之一是它能够超越语言和供应商的界限。得益于精心制定的规范，开发者可以在一个JVM实现中编写代码，并自信地在另一个实现中执行它，无论供应商有何差异。这种互操作性促进了代码重用，并促进了一个创新可以蓬勃发展的生态系统。在我们浏览这一节时，我们将探讨JVM的通用桥梁如何使开发者能够在一个JVM上编译代码，并在另一个JVM上无缝运行，强调了该平台的适应性和弹性。
- en: The question of why there are multiple JVM implementations when code can seamlessly
    run across them is a multifaceted exploration of software development’s diverse
    needs and specialized contexts. While the ability to run code across different
    JVMs promotes interoperability, multiple implementations stem from the desire
    to cater to specific use cases, optimize performance, and adapt to varying hardware
    and software environments. It’s important to note that most distributions are
    not different JVM implementations but builds of the OpenJDK project, sometimes
    with slight modifications. Additionally, all distributions must succeed in the
    Java **Technology Compatibility Kit** (**TCK**) ([https://foojay.io/pedia/tck/](https://foojay.io/pedia/tck/)),
    ensuring they adhere to Java standards and maintain compatibility across the Java
    ecosystem. The sources of OpenJDK are available at [https://github.com/openjdk/jdk/](https://github.com/openjdk/jdk/),
    and you can even build the runtime yourself by following the instructions in the
    “building” file. This stringent requirement ensures developers can rely on consistent
    behavior and functionality, regardless of the distribution chosen when running
    their Java applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码可以在它们之间无缝运行时，为什么存在多个JVM实现的问题，是对软件开发多样化需求和特定上下文的多元探索。虽然跨不同JVM运行代码的能力促进了互操作性，但多个实现源于满足特定用例、优化性能和适应不同的硬件和软件环境的愿望。值得注意的是，大多数发行版并不是不同的JVM实现，而是OpenJDK项目的构建，有时略有修改。此外，所有发行版都必须在Java
    **技术兼容性工具包** (**TCK**) ([https://foojay.io/pedia/tck/](https://foojay.io/pedia/tck/))
    中成功，确保它们遵守Java标准并在Java生态系统中保持兼容性。OpenJDK的源代码可在[https://github.com/openjdk/jdk/](https://github.com/openjdk/jdk/)找到，你甚至可以按照“构建”文件中的说明自行构建运行时。这一严格的要求确保了开发者可以依赖一致的行为和功能，无论选择哪个发行版来运行他们的Java应用程序。
- en: Each JVM possesses unique strengths that can be harnessed in specific contexts,
    making them powerful tools for developers. Consider, for instance, the OpenJ9
    JVM. Its emphasis on resource efficiency and swift startup times makes it a compelling
    choice for cloud-based applications, where responsiveness and resource utilization
    are critical factors. On the other hand, Amazon Corretto, with its focus on **long-term
    support** (**LTS**) and seamless integration with **Amazon Web Services** (**AWS**),
    is well-suited for enterprises deeply entrenched in the AWS ecosystem.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JVM都拥有独特的优势，这些优势可以在特定环境中得到发挥，使它们成为开发者的强大工具。以OpenJ9 JVM为例，它对资源效率和快速启动时间的重视使其成为基于云的应用程序的一个有吸引力的选择，在这些应用中，响应性和资源利用率是关键因素。另一方面，Amazon
    Corretto专注于**长期支持**（**LTS**）并与**Amazon Web Services**（**AWS**）无缝集成，非常适合深深扎根于AWS生态系统的企业。
- en: Moreover, the JVM’s adaptability extends to the hardware level. The ability
    to run the same code on diverse platforms, whether on Lego Mindstorms or specific
    hardware such as OpenSolaris, exemplifies the JVM’s portability. It simplifies
    the development process and empowers developers to create applications seamlessly
    transitioning between different environments without compromising functionality.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，JVM的适应性还扩展到硬件层面。能够在不同的平台上运行相同的代码，无论是在乐高Mindstorms上还是在OpenSolaris等特定硬件上，都体现了JVM的可移植性。它简化了开发过程，并赋予开发者创建在不同环境中无缝过渡的应用程序的能力，而不会影响功能。
- en: The power of each JVM lies in its ability to execute code and in the optimizations
    and features it brings to the table. For instance, GraalVM, known for its **just-in-time**
    (**JIT**) compiler and polyglot capabilities, opens the door to language interoperability,
    allowing developers to seamlessly integrate languages such as JavaScript, Python,
    and Ruby into their Java applications. This versatility is invaluable in scenarios
    where diverse languages must coexist within a single code base.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个JVM的力量在于其执行代码的能力以及它带来的优化和特性。例如，以其**即时编译器**（**JIT**）和多语言能力而闻名的GraalVM，为语言互操作性打开了大门，允许开发者无缝地将JavaScript、Python和Ruby等语言集成到他们的Java应用程序中。这种多功能性在需要多种语言在单个代码库中共存的场景中非常有价值。
- en: In essence, the existence of multiple JVMs is a testament to the adaptability
    and diversity of the Java ecosystem. Developers can leverage these implementations
    to tailor their choices based on performance requirements, integration needs,
    and the specific characteristics of the target environment. This variety fosters
    innovation and ensures that the JVM remains a robust and dynamic platform that
    can evolve alongside the ever-changing software development landscape.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，多个JVM的存在证明了Java生态系统的适应性和多样性。开发者可以利用这些实现来根据性能要求、集成需求和目标环境的特定特征来定制他们的选择。这种多样性促进了创新，并确保JVM始终是一个强大且动态的平台，可以与不断变化的软件开发景观同步发展。
- en: 'As we conclude this section on the diverse and influential landscape of the
    JVM, we’ve unveiled the intricacies that make it a unifying force across programming
    languages and hardware platforms. The ability to seamlessly run code across multiple
    JVMs while maintaining compatibility underscores the flexibility and robustness
    of this foundational technology. Yet, the question lingers: with such compatibility,
    why do we have a multitude of JVM implementations?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束关于JVM多样性和影响力的这一部分时，我们揭示了使其成为跨编程语言和硬件平台统一力量的复杂性。能够在多个JVM上无缝运行代码的同时保持兼容性，凸显了这一基础技术的灵活性和稳健性。然而，问题仍然存在：有了这样的兼容性，为什么我们还有许多JVM实现呢？
- en: The answer lies in the nuanced strengths and optimizations each JVM brings to
    the table, catering to specific use cases, performance demands, and integration
    scenarios. In the next section, we will embark on a hands-on exploration of selected
    JVM implementations that exemplify this diversity. Join us as we delve into Eclipse
    J9, Amazon Corretto, Azul, and Eclipse Temurin and dissect their unique features,
    performance characteristics, and real-world applications. Through this deep dive,
    we aim to equip you with the knowledge to navigate the rich tapestry of JVM choices,
    ensuring you can make informed decisions aligned with your development goals.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 答案在于每个 JVM 带来的细微优势和优化，针对特定的用例、性能需求和集成场景。在下一节中，我们将开始对一些具有代表性的 JVM 实现进行实际探索，这些实现展示了这种多样性。加入我们，我们将深入探讨
    Eclipse J9、Amazon Corretto、Azul 和 Eclipse Temurin，剖析它们的独特特性、性能特征和实际应用。通过这次深入研究，我们旨在为您提供知识，帮助您在丰富的
    JVM 选项中导航，确保您能做出与您的开发目标一致的决定。
- en: Eclipse J9
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse J9
- en: In this dedicated section, we’ll delve into the capabilities of Eclipse J9,
    a JVM implementation that stands out for its emphasis on efficiency, scalability,
    and resource optimization. As we navigate the intricacies of Eclipse J9, we’ll
    uncover the unique features that set it apart in the vast landscape of JVM implementations
    and explore why developers should consider this powerhouse for their Java applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨 Eclipse J9 的功能，这是一个 JVM 实现，以其对效率、可伸缩性和资源优化的重视而脱颖而出。随着我们深入了解 Eclipse
    J9 的复杂性，我们将揭示其独特的特性，这些特性使其在 JVM 实现的广阔领域中脱颖而出，并探讨为什么开发者应该考虑将这个强大的工具用于他们的 Java 应用程序。
- en: Eclipse J9, developed by the Eclipse Foundation, represents a cutting-edge JVM
    implementation that’s designed to maximize efficiency and minimize resource footprint.
    Known for its compact size and swift startup times, Eclipse J9 excels in critical
    resource utilization scenarios, making it a prime candidate for cloud-based applications,
    microservices, and other environments where responsiveness is paramount. Its architecture
    incorporates advanced JIT compilation techniques and aggressive memory management,
    contributing to a nimble and responsive runtime.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Eclipse 基金会开发的 Eclipse J9 是一种前沿的 JVM 实现，旨在最大化效率并最小化资源占用。以其紧凑的尺寸和快速的启动时间而闻名，Eclipse
    J9 在关键资源利用场景中表现出色，使其成为基于云的应用程序、微服务和其他响应速度至关重要的环境的理想选择。其架构集成了先进的 JIT 编译技术以及积极的内存管理，有助于实现灵活和响应迅速的运行时。
- en: 'Eclipse J9, as a distinguished JVM implementation, unfolds many advantages
    that position it as a compelling choice for discerning developers. At the forefront
    is its commendable commitment to resource efficiency. Eclipse J9’s compact footprint
    optimizes system resources, making it an optimal solution for applications where
    minimizing overhead is pivotal. This efficiency extends to memory utilization
    and processor engagement, a crucial feature for applications operating in resource-constrained
    environments. Swift startup times further amplify its appeal, enhancing user experience
    and responsiveness, especially in scenarios where time-to-operation is of the
    essence. Eclipse J9’s scalability is another noteworthy benefit, accommodating
    the dynamic demands of diverse environments, from small-scale applications to
    expansive enterprise systems. As we explore the landscape of Eclipse J9, these
    benefits emerge as critical pillars, underlining its capacity to empower developers
    to create applications that seamlessly balance performance and resource consumption:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse J9，作为一个杰出的 JVM 实现，展现了许多优势，使其成为明智开发者的一个诱人选择。其中最突出的是其对资源效率的 commendable
    承诺。Eclipse J9 的紧凑型足迹优化了系统资源，使其成为在最小化开销至关重要的应用程序中的理想解决方案。这种效率扩展到内存利用和处理器参与，这对于在资源受限环境中运行的应用程序是一个关键特性。快速的启动时间进一步增强了其吸引力，提升了用户体验和响应速度，尤其是在时间到操作至关重要的场景中。Eclipse
    J9 的可伸缩性是另一个值得注意的好处，它能够满足从小型应用程序到大型企业系统等不同环境的动态需求。当我们探索 Eclipse J9 的领域时，这些好处成为关键的支柱，凸显了其赋予开发者创建能够无缝平衡性能和资源消耗的应用程序的能力：
- en: '**Resource efficiency**: Eclipse J9’s compact footprint ensures efficient utilization
    of system resources, making it an ideal choice for applications where minimizing
    overhead is crucial. This efficiency extends to both memory usage and processor
    utilization, allowing for optimal performance in resource-constrained environments.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源效率**：Eclipse J9的紧凑型足迹确保了系统资源的有效利用，使其成为在最小化开销至关重要的应用中的理想选择。这种效率既适用于内存使用，也适用于处理器利用率，从而在资源受限的环境中实现最佳性能。'
- en: '**Swift startup times**: The JVM’s startup time is pivotal in particular application
    domains, and Eclipse J9 shines in this regard. Its rapid startup ensures that
    applications become operational swiftly, enhancing user experience and responsiveness.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速启动时间**：在特定应用领域，JVM的启动时间至关重要，而Eclipse J9在这方面表现出色。其快速的启动确保了应用程序能够迅速运行，从而提升了用户体验和响应速度。'
- en: '**Scalability**: Eclipse J9 is designed to scale seamlessly across various
    environments, adapting to the demands of both small-scale applications and large-scale
    enterprise systems. Its scalability makes it well-suited for dynamic workloads
    and applications that may experience fluctuating markets.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：Eclipse J9旨在在各种环境中无缝扩展，适应从小型应用到大规模企业系统的需求。其可扩展性使其非常适合动态工作负载和可能经历市场波动的应用程序。'
- en: Considering Eclipse J9 for your Java applications becomes imperative when efficiency,
    rapid responsiveness, and optimal resource utilization are paramount. Whether
    you’re developing cloud-native applications or microservices or deploying in resource-constrained
    environments, Eclipse J9 provides a compelling solution. The benefits of Eclipse
    J9 translate into tangible advantages, offering developers the flexibility to
    balance performance and resource consumption according to their application’s
    unique requirements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当效率、快速响应和最佳资源利用至关重要时，考虑将Eclipse J9用于您的Java应用程序变得势在必行。无论您是在开发云原生应用、微服务还是在资源受限的环境中部署，Eclipse
    J9都提供了一个有吸引力的解决方案。Eclipse J9的好处转化为有形的优势，为开发者提供了根据其应用程序的独特需求平衡性能和资源消耗的灵活性。
- en: 'As we conclude our exploration into the efficiency and scalability offered
    by Eclipse J9, we’ve witnessed how this JVM implementation can be a strategic
    choice for developers seeking optimal resource utilization and rapid responsiveness
    in their Java applications. The benefits of Eclipse J9, from its compact footprint
    to swift startup times and scalable architecture, underscore its versatility across
    various application landscapes. In the next section, we will seamlessly transition
    into an in-depth examination of another notable JVM implementation: Amazon Corretto.
    We’ll uncover the distinctive features and advantages that Amazon Corretto brings
    to the table, further expanding our understanding of the diverse and dynamic world
    of JVM. The journey continues, and the exploration of JVM implementations remains
    the key to unlocking the full potential of Java development.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们探索Eclipse J9提供的效率和可扩展性，我们见证了这种JVM实现如何成为寻求在Java应用程序中实现最佳资源利用和快速响应的开发者的战略选择。从其紧凑型足迹到快速启动时间以及可扩展的架构，Eclipse
    J9的优势凸显了其在各种应用领域的多功能性。在下一节中，我们将无缝过渡到对另一个著名的JVM实现——Amazon Corretto的深入考察。我们将揭示Amazon
    Corretto的独特特性和优势，进一步扩展我们对多样化且动态的JVM世界的理解。旅程仍在继续，对JVM实现的探索仍然是解锁Java开发全部潜力的关键。
- en: Amazon Corretto
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Amazon Corretto
- en: In this section, we’ll embark on an insightful journey into Amazon Corretto,
    a JVM implementation crafted by Amazon that combines reliability, performance,
    and LTS. As we navigate the nuances of Amazon Corretto, we’ll explore its unique
    features, performance optimizations, and compelling reasons developers should
    consider integrating this JVM implementation into their Java applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始一段对Amazon Corretto的深入探索之旅，这是由Amazon打造的JVM实现，它结合了可靠性、性能和长期支持（LTS）。随着我们了解Amazon
    Corretto的细微差别，我们将探索其独特特性、性能优化以及开发者为何应考虑将此JVM实现集成到他们的Java应用程序中的有力理由。
- en: Amazon Corretto represents Amazon’s commitment to delivering a high-quality,
    open source JVM that meets the demands of modern Java development. Built on the
    solid foundation of OpenJDK (Java Development Kit), Corretto is designed to provide
    a reliable and secure Java runtime environment. Amazon Corretto is free to use
    and comes with LTS, making it an attractive choice for enterprises looking for
    a stable and dependable JVM.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Amazon Corretto 代表了亚马逊致力于提供高质量、开源 JVM 的承诺，该 JVM 满足现代 Java 开发的需求。建立在 OpenJDK（Java
    开发工具包）的坚实基础之上，Corretto 设计用于提供可靠和安全的 Java 运行时环境。Amazon Corretto 可免费使用，并附带 LTS，使其成为寻求稳定和可靠
    JVM 的企业的有吸引力的选择。
- en: 'In navigating the intricacies of JVM implementations, Amazon Corretto emerges
    as a beacon of reliability, performance, and sustained support. This segment delves
    into the distinct advantages that make Amazon Corretto a compelling choice for
    Java developers across diverse landscapes. From its commitment to LTS to performance
    optimizations and a steadfast focus on security, Amazon Corretto offers a comprehensive
    suite of benefits that elevate the development experience and ensure the longevity
    and stability of Java applications. Join us as we unravel the layers of Amazon
    Corretto’s advantages, providing a nuanced understanding of why this JVM implementation
    deserves a prominent place in your toolkit:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航 JVM 实现的复杂性时，Amazon Corretto 成为一个可靠、性能和持续支持的灯塔。本部分深入探讨了使 Amazon Corretto
    成为跨不同领域 Java 开发者有吸引力的选择的独特优势。从其对 LTS 的承诺到性能优化和坚定不移的关注安全，Amazon Corretto 提供了一系列提升开发体验并确保
    Java 应用程序长期性和稳定性的好处。加入我们，我们将揭开 Amazon Corretto 优势的层层面纱，提供对为什么这种 JVM 实现值得在您的工具箱中占据突出位置的细微理解：
- en: '**LTS**: One of the standout features of Amazon Corretto is its LTS. Enterprises
    can benefit from extended support and updates, ensuring the stability and security
    of their Java applications over an extended period.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS**：Amazon Corretto 的一个突出特点是它的 LTS。企业可以利用扩展的支持和更新，确保其 Java 应用程序在较长一段时间内的稳定性和安全性。'
- en: '**Performance optimizations**: Amazon Corretto is equipped with performance
    enhancements that optimize the execution of Java applications. These optimizations
    improve responsiveness and throughput, making it well-suited for a wide range
    of use cases.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能优化**：Amazon Corretto 配备了优化 Java 应用程序执行的性能增强功能。这些优化提高了响应性和吞吐量，使其非常适合广泛的用例。'
- en: '**Security and stability**: Built with a focus on security and stability, Amazon
    Corretto undergoes rigorous testing and quality assurance processes. It ensures
    developers can rely on a robust, secure runtime environment for their Java applications.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性和稳定性**：Amazon Corretto 专注于安全性和稳定性构建，经过严格的测试和质量保证流程。它确保开发者可以依赖一个强大、安全的运行时环境来运行他们的
    Java 应用程序。'
- en: '**Compatibility with OpenJDK**: Amazon Corretto maintains compatibility with
    OpenJDK, allowing developers to transition from other OpenJDK-based JVMs seamlessly.
    This compatibility simplifies the migration process while providing the benefits
    of Amazon’s additional optimizations and support.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与 OpenJDK 的兼容性**：Amazon Corretto 与 OpenJDK 保持兼容，允许开发者无缝地从其他基于 OpenJDK 的 JVM
    转换。这种兼容性简化了迁移过程，同时提供了亚马逊额外优化和支持的好处。'
- en: Considering Amazon Corretto for your Java applications is a strategic decision,
    especially when LTS, performance optimizations, and a commitment to security are
    paramount. Whether you are developing cloud-native applications, serverless functions,
    or traditional enterprise systems, Amazon Corretto offers a compelling JVM solution
    backed by the reliability and scale of AWS.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑将 Amazon Corretto 用于您的 Java 应用程序是一个战略性的决定，尤其是在 LTS（长期支持）、性能优化和安全性至关重要的情况下。无论您是在开发云原生应用程序、无服务器函数还是传统企业系统，Amazon
    Corretto 都提供了一种有吸引力的 JVM 解决方案，该方案由 AWS 的可靠性和规模支持。
- en: 'As we conclude our exploration of the robust world of Amazon Corretto, we’ve
    witnessed the confluence of reliability, performance, and LTS that defines this
    JVM implementation. The benefits of Amazon Corretto, from its unwavering commitment
    to security to the optimization of Java applications, resonate as compelling reasons
    for developers to consider integrating it into their projects. Our journey into
    the diverse landscape of JVM implementations continues, and in the next section,
    we will unravel the intricacies of another noteworthy player: Azul. Join us as
    we explore Azul’s distinctive features and advantages to Java development, expanding
    our understanding of the myriad possibilities that JVM implementations offer.
    The path to Java excellence unfolds, and the exploration of Azul awaits in the
    next section.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束对强大的 Amazon Corretto 世界探索之际，我们见证了可靠性、性能和 LTS 的融合，这定义了这一 JVM 实现的特点。Amazon
    Corretto 的好处，从其对安全的坚定承诺到 Java 应用的优化，都是开发者考虑将其集成到项目中的有力理由。我们继续探索 JVM 实现的多样化领域，在下一节中，我们将揭示另一个值得关注的参与者：Azul
    的复杂性。加入我们，探索 Azul 的独特特性和对 Java 开发的优势，扩展我们对 JVM 实现提供的众多可能性的理解。Java 优秀之路正在展开，下一节中
    Azul 的探索在等待着。
- en: Azul Zulu and Zing
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azul Zulu 和 Zing
- en: In this section, we’ll delve into the dynamic realm of **Azul Zulu Builds of
    OpenJDK** (**Azul Zulu**), a JVM implementation that is a pivotal part of Azul’s
    comprehensive offerings in the Java runtime space. Azul, renowned for its commitment
    to providing JVM runtimes and additional tools to enhance Java performance while
    reducing costs, brings Azul Zulu to the forefront. As a TCK-certified build of
    OpenJDK, Azul Zulu aligns with the performance standards of most distributors
    as they all base their builds on the OpenJDK project. Azul’s active participation
    in monitoring and resolving CVE security issues sets it apart, allowing it to
    adhere to a 3-month release cycle. It enables Azul to provide free and commercial
    builds of all supported versions with timely security fixes, ensuring the safe
    operation of Java applications in production environments.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨 **Azul Zulu OpenJDK 构建**（**Azul Zulu**）的动态领域，这是 Azul 在 Java 运行时空间全面提供的重要组成部分。Azul
    以其致力于提供 JVM 运行时以及增强 Java 性能并降低成本的工具而闻名，将 Azul Zulu 推到了前沿。作为经过 TCK 认证的 OpenJDK
    构建，Azul Zulu 与大多数发行商的性能标准保持一致，因为它们的所有构建都基于 OpenJDK 项目。Azul 在监控和解决 CVE 安全问题方面的积极参与使其脱颖而出，使其能够遵守
    3 个月的发布周期。它使 Azul 能够提供所有受支持版本的免费和商业构建，并按时修复安全漏洞，确保 Java 应用程序在生产环境中的安全运行。
- en: Furthermore, Azul Zulu’s distinction lies in its groundbreaking contributions
    to the OpenJDK ecosystem. Azul initiated the OpenJDK project known as **Coordinated
    Restore at Checkpoint** (**CraC**) ([https://openjdk.org/projects/crac/](https://openjdk.org/projects/crac/)),
    making Zulu the first JVM runtime to incorporate this feature, enabling ultrafast
    startup of Java applications. Zulu’s versatility extends to JavaFX integrations,
    catering to various use cases.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Azul Zulu 的独特之处在于其对 OpenJDK 生态系统的开创性贡献。Azul 启动了名为 **协调检查点恢复**（**CraC**）的
    OpenJDK 项目（[https://openjdk.org/projects/crac/](https://openjdk.org/projects/crac/）），使
    Zulu 成为第一个整合这一特性的 JVM 运行时，从而实现了 Java 应用程序的快速启动。Zulu 的多功能性还扩展到 JavaFX 集成，满足各种用例。
- en: '**Azul Zing Builds of OpenJDK** (**Azul Zing**) emerges as a stalwart in the
    JVM landscape, offering a tapestry of benefits that elevate Java development to
    new heights. Azul Zing introduces the innovative **Continuously Concurrent Compacting
    Collector** (**C4**) Garbage Collector at its core, setting a benchmark for low-latency
    and pauseless garbage collection. This key feature ensures that Java applications
    remain responsive, even in the face of intensive workloads. Beyond its cutting-edge
    garbage collection, Azul Zing is distinguished by its unwavering commitment to
    enhanced runtime performance. It is a formidable choice for applications demanding
    high throughput and minimal latency. Its scalability and elasticity further position
    Azul Zing as a versatile solution, seamlessly adapting to the dynamic requirements
    of both small-scale applications and large enterprise systems. With a foundation
    rooted in LTS and stability, Azul Zing becomes a strategic choice for projects
    with extended life cycles, promising developers a robust platform for crafting
    Java applications that excel in performance, responsiveness, and reliability.
    Join us in exploring the manifold benefits of Azul Zing as we uncover how this
    JVM implementation stands as a beacon of innovation and efficiency in the ever-evolving
    landscape of Java development:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azul Zing的OpenJDK构建**（**Azul Zing**）在JVM领域中成为了一座坚实的堡垒，提供了一系列提升Java开发至新高度的益处。Azul
    Zing在其核心引入了创新的**持续并发压缩收集器**（**C4**）垃圾收集器，为低延迟和无暂停的垃圾收集设定了基准。这一关键特性确保了Java应用程序即使在面对密集型工作负载时也能保持响应性。除了其尖端的垃圾收集技术外，Azul
    Zing还以其对增强运行时性能的坚定不移的承诺而著称。它是要求高吞吐量和最小延迟的应用程序的一个强大选择。其可扩展性和弹性进一步将Azul Zing定位为一个多才多艺的解决方案，能够无缝适应小型应用程序和大型企业系统动态需求。基于长期支持（LTS）和稳定性，Azul
    Zing成为生命周期较长的项目的战略选择，为开发者提供了一个强大的平台，用于构建在性能、响应性和可靠性方面表现卓越的Java应用程序。随着我们揭示这个JVM实现如何在不断发展的Java开发领域中成为创新和效率的灯塔，加入我们探索Azul
    Zing的多重益处：'
- en: '**C4 Garbage Collector**: Azul Zing incorporates the innovative C4 Garbage
    Collector. This collector distinguishes itself by providing low-latency and pauseless
    garbage collection, ensuring that Java applications maintain consistent responsiveness
    even under heavy workloads.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C4 垃圾收集器**：Azul Zing集成了创新的C4垃圾收集器。该收集器通过提供低延迟和无暂停的垃圾收集而脱颖而出，确保Java应用程序即使在重负载下也能保持一致的响应性。'
- en: '**Enhanced runtime performance**: Azul Zing is engineered to deliver enhanced
    runtime performance, making it well-suited for high-throughput and low-latency
    applications. Its optimizations contribute to improved application responsiveness
    and reduced execution times.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的运行时性能**：Azul Zing经过设计以提供增强的运行时性能，使其非常适合高吞吐量和低延迟的应用。其优化有助于提高应用程序的响应速度和减少执行时间。'
- en: '**Scalability and elasticity**: Azul Zing is designed to scale seamlessly across
    diverse workloads, adapting to the demands of both small-scale applications and
    large, enterprise-level systems. Its elasticity ensures optimal performance in
    dynamic and fluctuating environments.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性和弹性**：Azul Zing被设计为能够无缝地跨越不同的工作负载进行扩展，适应小型应用程序和大型企业级系统的需求。其弹性确保了在动态和波动环境中获得最佳性能。'
- en: '**LTS and stability**: Azul Zing offers LTS and stability, providing enterprises
    with a reliable foundation for their Java applications. This commitment to stability
    is crucial for projects with extended life cycles and stringent reliability requirements.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS和稳定性**：Azul Zing提供长期支持（LTS）和稳定性，为企业提供了Java应用程序的可靠基础。对稳定性这一承诺对于生命周期较长和可靠性要求严格的项目至关重要。'
- en: Azul Zing for Java development is a strategic choice when performance, scalability,
    and low latency are non-negotiable. The advanced features, including the C4 Garbage
    Collector, position Azul Zing as an ideal solution for applications where consistent
    responsiveness and optimal resource utilization are paramount. Let’s unravel the
    capabilities of Azul Zing and discover how this JVM implementation can be a catalyst
    for achieving unprecedented levels of performance in your Java applications. This
    section aims to equip you with insights to make informed decisions and leverage
    the advantages of Azul Zing across a diverse range of use cases.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java 开发而言，Azul Zing 是在性能、可扩展性和低延迟不可协商时的战略选择。包括 C4 垃圾收集器在内的先进特性使 Azul Zing
    成为适用于一致响应性和最佳资源利用至关重要的应用的理想解决方案。让我们揭开 Azul Zing 的能力，了解这种 JVM 实现如何成为在 Java 应用中实现前所未有的性能水平的催化剂。本节旨在为您提供洞察力，以便做出明智的决定并利用
    Azul Zing 在各种用例中的优势。
- en: In navigating the intricacies of Azul Zulu and Zing, we’ve unraveled a tapestry
    of benefits that positions these JVM implementations as a beacon of innovation
    and efficiency. Azul Zulu is a build of OpenJDK with additional integrations such
    as CRaC and JavaFX. Azul Zing is a powerful catalyst for achieving peak Java application
    performance, from the groundbreaking C4 Garbage Collector to its commitment to
    enhanced runtime performance and scalability. As our journey through diverse JVM
    implementations continues, our next destination beckons us toward IBM Semeru.
    In the upcoming section, we’ll delve into the distinctive features and advantages
    that IBM Semeru brings to the forefront, further expanding our understanding of
    the multifaceted landscape of Java development. Our exploration of IBM Semeru
    awaits, promising new insights and perspectives in our quest for Java excellence.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航 Azul Zulu 和 Zing 的复杂性时，我们揭示了一系列的益处，使这些 JVM 实现成为创新和效率的灯塔。Azul Zulu 是一个包含额外集成（如
    CRaC 和 JavaFX）的 OpenJDK 构建。Azul Zing 是实现峰值 Java 应用性能的强大催化剂，从开创性的 C4 垃圾收集器到其对增强运行时性能和可扩展性的承诺。随着我们探索不同
    JVM 实现的旅程继续，我们的下一个目的地召唤我们前往 IBM Semeru。在接下来的部分，我们将深入探讨 IBM Semeru 的独特特性和优势，进一步扩展我们对
    Java 开发多方面景观的理解。我们对 IBM Semeru 的探索即将展开，承诺在追求 Java 优秀的过程中带来新的见解和视角。
- en: IBM Semeru
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IBM Semeru
- en: In this section, we’ll explore IBM Semeru, a JVM implementation that encapsulates
    the expertise and innovation of IBM in the realm of Java development. As we navigate
    the intricacies of IBM Semeru, we will unravel its distinctive features, optimizations,
    and compelling reasons developers should consider integrating this JVM implementation
    into their Java applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探索 IBM Semeru，这是一个封装了 IBM 在 Java 开发领域专业知识和创新的 JVM 实现。随着我们导航 IBM Semeru
    的复杂性，我们将揭示其独特特性、优化以及开发者应考虑将其 JVM 实现集成到 Java 应用中的有力理由。
- en: IBM Semeru, based on the OpenJ9 JVM, represents IBM’s commitment to delivering
    a high-performance, scalable, and efficient Java runtime environment. With a focus
    on resource efficiency, rapid startup times, and advanced optimizations, IBM Semeru
    is designed to cater to various application scenarios.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 OpenJ9 JVM 的 IBM Semeru 代表了 IBM 提供高性能、可扩展和高效 Java 运行环境的承诺。专注于资源效率、快速启动时间和高级优化，IBM
    Semeru 设计用于满足各种应用场景。
- en: 'IBM Semeru emerges as a beacon of innovation in Java development, encapsulating
    a spectrum of benefits that redefine the possibilities of efficient and scalable
    runtime environments. Anchored by the robust OpenJ9 virtual machine, Semeru introduces
    a harmonious blend of resource efficiency and rapid startup times, making it an
    ideal choice for contemporary cloud-native applications and microservices. Integrating
    **ahead-of-time** (**AOT**) compilation further distinguishes IBM Semeru, translating
    Java bytecode into machine code before runtime to enhance startup performance
    and reduce the memory footprint. With a container-friendly architecture optimized
    for cloud deployments, IBM Semeru caters to the evolving needs of modern application
    deployment, ensuring adaptability, scalability, and efficiency. For developers
    seeking a comprehensive solution that aligns with the demands of dynamic cloud
    environments, IBM Semeru is a compelling choice, promising a sophisticated and
    optimized Java runtime experience. Join us in exploring the benefits that IBM
    Semeru brings to the forefront as we delve into a new era of Java development
    excellence:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '**OpenJ9 virtual machine**: IBM Semeru leverages the OpenJ9 virtual machine,
    known for its efficient memory usage and fast startup times. This optimization
    is particularly beneficial for cloud-native applications and microservices where
    resource efficiency is paramount.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AOT compilation**: IBM Semeru incorporates AOT compilation, a feature that
    translates Java bytecode into machine code before runtime. This approach enhances
    startup performance, reduces the memory footprint, and contributes to consistent
    and predictable application behavior.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container-friendly architecture**: With a container-friendly architecture,
    IBM Semeru is well-suited for deployment in containerized environments. Its efficient
    resource utilization and compatibility with container orchestration platforms
    make it ideal for modern, scalable infrastructures.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Optimized for cloud deployments**: IBM Semeru is optimized for cloud deployments,
    aligning with the demands of cloud-native applications. Its adaptability to dynamic
    and scalable cloud environments positions it as a strategic choice for developers
    building applications in cloud ecosystems.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consideration of IBM Semeru becomes imperative when resource efficiency, rapid
    startup times, and compatibility with modern deployment paradigms are critical
    for your Java applications. Whether you are developing cloud-native applications
    microservices or deploying in containerized environments, IBM Semeru offers a
    robust JVM implementation with the backing of IBM’s expertise and commitment to
    innovation. Join us as we uncover the capabilities of IBM Semeru, providing you
    with insights to make informed decisions and harness the advantages of this feature-rich
    JVM implementation for your Java development endeavors.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Our exploration into the world of JVM implementations reaches a crescendo with
    the comprehensive insights gained from IBM Semeru. The distinctive benefits, from
    resource efficiency to cloud optimization, underscore its significance in the
    ever-evolving landscape of Java development. As our journey continues, the spotlight
    now shifts toward Eclipse Temurin. In the forthcoming section, we will unravel
    the unique features and advantages that Eclipse Temurin brings to the table, enriching
    our understanding of JVM implementations. This exploration of Eclipse Temurin
    promises new perspectives and innovations as we strive toward Java excellence.
    Join us in continuing our journey through the diverse tapestry of JVM implementations
    as we uncover Eclipse Temurin’s capabilities in the dynamic world of Java development.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Temurin
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll explore Eclipse Temurin, a robust and versatile JVM implementation
    that stands as a testament to the collaborative efforts within the Eclipse community.
    As we navigate the intricacies of Eclipse Temurin, we will uncover its distinctive
    features, optimizations, and compelling reasons why developers should consider
    embracing this JVM implementation for their Java applications.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse Temurin, formerly AdoptOpenJDK, is a community-driven, open source project
    that provides free, high-quality, and production-ready builds of the OpenJDK.
    Fueled by a commitment to transparency and collaboration, Eclipse Temurin ensures
    that developers can access a reliable and well-supported Java runtime environment.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'Eclipse Temurin emerges as a beacon of reliability and versatility in the Java
    development landscape, offering a rich tapestry of benefits that resonate with
    the needs of modern developers. With a commitment to timely updates and security
    patches for OpenJDK, Eclipse Temurin ensures developers have access to the latest
    enhancements, contributing to the security and stability of Java applications.
    Its platform independence provides the flexibility to deploy Java applications
    seamlessly across diverse operating systems and architectures, catering to the
    demands of projects targeting multiple environments. What sets Eclipse Temurin
    apart is its transparent and open community collaboration within the Eclipse ecosystem.
    Developers can actively contribute, fostering a sense of community-driven development
    and ensuring the JVM evolves in sync with the diverse needs of its users. The
    ease of adoption, coupled with a commitment to providing hassle-free builds of
    OpenJDK, positions Eclipse Temurin as an essential component in the toolkit of
    developers seeking a reliable, well-supported, and community-driven Java runtime
    environment. Join us as we unravel the benefits Eclipse Temurin brings to Java
    development, fostering a new era of collaboration and innovation within the Eclipse
    community:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '**Timely updates and security patches**: Eclipse Temurin offers timely updates
    and security patches for OpenJDK, ensuring developers can access the latest enhancements
    and fixes. This commitment to regular updates contributes to the security and
    stability of Java applications.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Platform independence**: Eclipse Temurin supports various platforms, allowing
    developers to deploy Java applications seamlessly across diverse operating systems
    and architectures. This platform independence is crucial for projects targeting
    multiple environments.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Transparent and open community collaboration**: Being part of the Eclipse
    community, Eclipse Temurin benefits from transparent and open collaboration. Developers
    can actively contribute to the project, fostering a sense of community-driven
    development and ensuring that the JVM evolves in tandem with the diverse needs
    of its users.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ease of adoption**: Eclipse Temurin’s commitment to providing easy-to-adopt
    OpenJDK builds simplifies incorporating the latest Java features into projects.
    This ease of adoption is precious for developers seeking a hassle-free integration
    of new Java capabilities.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering Eclipse, Temurin becomes imperative for developers prioritizing
    access to up-to-date OpenJDK builds, a collaborative community-driven approach,
    and seamless platform independence. Whether you are developing applications for
    deployment across various operating systems or contributing to an open source
    ecosystem, Eclipse Temurin provides a reliable and well-supported foundation.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: Our journey through the diverse landscape of JVM implementations has been a
    rich tapestry of innovation and optimization, from Eclipse Temurin’s community-driven
    excellence to the unique strengths of IBM Semeru, Azul Zulu’s performance prowess,
    Amazon Corretto’s reliability, and the efficiency of Eclipse J9\. As we conclude
    these individual explorations, the next section promises a holistic view, showcasing
    the remarkable diversity that defines the world of JVM implementations. Join us
    in the upcoming section, where we will navigate multiple JVM implementations in
    a single section, highlighting the dynamic choices available to developers. From
    Eclipse Temurin to other notable players, witness how the JVM ecosystem thrives
    on versatility, offering developers many options to tailor their choices based
    on specific needs and preferences. The exploration continues, unveiling the depth
    and breadth of the JVM implementation world.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Even more JVM vendors and SDKMan
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we’ll embark on a fascinating exploration of the expansive
    diversity within the JVM ecosystem. Our focus will extend beyond individual JVM
    implementations, encompassing a spectrum of specialized builds tailored for distinct
    use cases and environments. Join us as we delve into the nuances of Dragonwell,
    Tencent Kona, Liberica, Mandrel, the Microsoft Build of OpenJDK, and SapMachine
    – each representing a unique facet of JVM diversity, optimized to cater to specific
    demands and scenarios.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll be embarking on a captivating journey into the multifaceted world of
    JVM diversity, where a kaleidoscope of specialized builds awaits exploration.
    Each JVM implementation represents a distinctive approach to addressing unique
    challenges in application development. From extreme scaling demands to cloud computing,
    big data, and SAP-supported ecosystems, each JVM is meticulously crafted to meet
    specific use cases. Join us as we unravel the intricacies of these implementations,
    gaining insights into how they cater to diverse scenarios, thus offering developers
    a rich palette of options to align with the unique requirements of their projects.
    This exploration promises a deeper understanding of the adaptability and versatility
    ingrained in the diverse world of JVMs:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: '**Dragonwell (Alibaba)**: Engineered as the in-house OpenJDK implementation
    at Alibaba, Dragonwell is optimized for the extreme scaling demands of online
    eCommerce and financial and logistics applications. Dive into how Dragonwell powers
    the intricate web of Java applications across Alibaba’s massive server infrastructure.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tencent Kona**: Serving as Tencent’s default JDK for cloud computing, big
    data, and various Java applications, Kona is a production-ready distribution of
    OpenJDK with LTS. Uncover the features that make Tencent Kona a robust choice
    for diverse computing needs within Tencent’s ecosystem.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Liberica (BellSoft)**: As a 100% open source Java implementation built from
    OpenJDK, Liberica is thoroughly tested, including passing the **Java Compatibility
    Kit** (**JCK**). Explore how Liberica’s commitment to openness ensures JavaFX
    support across all its versions.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mandrel (Red Hat)**: Focused on GraalVM’s native-image component, Mandrel
    facilitates the generation of native images for Quarkus applications. Delve into
    how Mandrel simplifies the journey from Java source code to efficient, native
    applications, a crucial capability for cloud-native application development.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Microsoft Build of OpenJDK**: Microsoft’s contribution to JVM diversity comes
    from a no-cost distribution of OpenJDK. With LTS binaries for Java 11 and Java
    16 across multiple operating systems and architectures, understand how Microsoft’s
    build provides a versatile option for developers.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SapMachine (SAP)**: As a downstream version of the OpenJDK project, SapMachine
    is meticulously crafted to support SAP customers and partners. Discover how SAP’s
    commitment ensures the success of Java applications within the SAP ecosystem.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring this rich tapestry of JVM implementations is paramount for developers
    seeking solutions tailored to specific use cases, from extreme scaling in eCommerce
    to cloud computing, big data, and beyond.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: As we explore the plethora of JVM implementations discussed earlier SDKMAN ([https://sdkman.io/](https://sdkman.io/))
    emerges as a versatile companion, simplifying the management of various vendors
    and versions. The need for different JVM versions is common in real-world production
    scenarios, whether for stability, optimization, or during migration phases. Join
    us as we delve into how SDKMAN streamlines the process of managing JVM implementations,
    providing developers with a seamless experience in experimenting with, switching
    between, and maintaining diverse JVM versions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'In this pivotal segment, we’ll embark on a journey to unravel the potent capabilities
    of SDKMAN. This tool is a linchpin in simplifying the intricate landscape of JVM
    diversity. As we explore the vast array of JVM implementations and versions, SDKMAN
    emerges as a versatile ally, streamlining the management process with finesse.
    It extends the gift of vendor agnosticism, allowing developers to seamlessly navigate
    between JVM vendors such as Alibaba, Tencent, BellSoft, Red Hat, Microsoft, and
    SAP. Let’s dive into the intricacies of version management, where SDKMAN empowers
    developers to effortlessly install, switch, and utilize diverse JVM versions,
    addressing the nuanced needs of projects in real-world production scenarios. With
    seamless integration into popular build tools and a commitment to community-driven
    updates, SDKMAN becomes the linchpin in ensuring a smooth and agile development
    experience, freeing developers to focus on their code in the dynamic and diverse
    landscape of Java development. Join us as we unlock the power of SDKMAN, demystifying
    the complexities and enhancing the agility of JVM management for developers worldwide:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '**Vendor agnosticism**: SDKMAN embraces vendor agnosticism, allowing developers
    to switch between JVM vendors such as Alibaba, Tencent, BellSoft, Red Hat, Microsoft,
    and SAP. Experience the freedom to choose the most suitable JVM for your specific
    use case without the hassle of manual installations.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version management**: Managing multiple JVM versions is essential in the
    dynamic landscape of Java development. SDKMAN simplifies version management, enabling
    developers to quickly install, switch, and use different versions based on project
    requirements or migration needs.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Seamless integration of and integration with build tools**: SDKMAN integrates
    with popular build tools such as Maven and Gradle, facilitating a smooth transition
    between different JVM versions within your build and deployment processes. It
    ensures that your projects stay aligned with the chosen JVM without disruptions.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community-driven updates**: SDKMAN is a community-driven initiative that
    ensures continuous updates and support for the latest JVM releases. Stay in sync
    with the vibrant Java ecosystem ([https://foojay.io/today/disco-api-helping-you-to-find-any-openjdk-distribution](https://foojay.io/today/disco-api-helping-you-to-find-any-openjdk-distribution))
    and access the latest features and optimizations as soon as they become available.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the ever-evolving landscape of Java development, SDKMAN emerges as a valuable
    ally for developers seeking agility and flexibility in managing JVM implementations.
    Whether you are exploring diverse JVM vendors, experimenting with versions, or
    navigating migration phases, SDKMAN streamlines the process, empowering developers
    to stay focused on their code.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we conclude our exploration of the intricate world of JVM diversity and the
    instrumental role of SDKMAN, you have gained a profound understanding of alternative
    JVMs, including Alibaba’s Dragonwell, Tencent Kona, Liberica, Mandrel, the Microsoft
    Build of OpenJDK, and SapMachine. This chapter not only shed light on the unique
    characteristics of these implementations, catering to diverse use cases, but also
    emphasized the pivotal role of SDKMAN in simplifying JVM management. The insights
    garnered set the stage for the upcoming chapter, where you will delve into the
    fundamental principles shaping Java frameworks. From design patterns to modularity,
    these principles are essential for creating robust, scalable, and maintainable
    applications. The practical utility of the information provided in this chapter
    will become evident, equipping you with the knowledge needed to navigate the dynamic
    Java development landscape. As we transition into Java framework principles, the
    comprehensive understanding you’ve gained here promises to be invaluable, guiding
    you on a seamless journey toward excellence in your coding endeavors.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: What is the primary focus of Alibaba’s Dragonwell JVM implementation?
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud computing
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Online eCommerce and financial and logistics applications
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Big data
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Microservices
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which JVM implementation is Tencent’s default JDK for cloud computing and big
    data?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Amazon Corretto
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Tencent Kona
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Eclipse Temurin
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azul Zulu
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the primary focus of the Mandrel JVM implementation?
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: High-performance computing
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Running applications on containers
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Native image generation for Quarkus applications
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Cloud-native application development
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is one of the key benefits of Eclipse Temurin (formerly AdoptOpenJDK)?
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Closed source development
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Timely updates and security patches
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Limited platform support
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Exclusive focus on cloud environments
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How does SDKMAN simplify JVM management for developers?
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By limiting the number of JVM vendors available
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By restricting the use of different JVM versions
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By seamlessly integrating with build tools
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: By supporting only proprietary JVM implementations
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What differentiates Azul Zulu from Azul Zing?
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Azul Zulu is not TCK-certified
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azul Zing is based on OpenJDK
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azul Zulu incorporates the G1 Garbage Collector
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Azul Zing focuses on small-scale applications
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What key feature of Azul Zulu ensures that Java applications remain responsive
    even under heavy workloads?
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C4 Garbage Collector
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Falcon compiler
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Elasticity
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: JavaFX integration
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the answers to this chapter’s questions:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: B. Online eCommerce and financial and logistics applications
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B. Tencent Kona
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C. Native image generation for Quarkus applications
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B. Timely updates and security patches
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C. By seamlessly integrating with build tools
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: B. Azul Zing is based on OpenJDK
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A. C4 Garbage Collector
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
