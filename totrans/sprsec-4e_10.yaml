- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SAML 2 Support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SAML is predominantly employed as a web-based authentication mechanism, relying
    on the browser agent to facilitate the authentication process. In broad terms,
    the authentication flow of SAML can be outlined as follows.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security provides comprehensive SAML 2 support. This section discusses
    how to integrate SAML 2 into your Servlet-based application.
  prefs: []
  type: TYPE_NORMAL
- en: Starting from 2009, support for relying parties has been available as part of
    an extension project. In 2019, efforts were initiated to integrate this support
    into the core of Spring Security. This mirrors a similar process initiated in
    2017 for incorporating Spring Security’s OAuth 2.0 support.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will explore the following subjects:'
  prefs: []
  type: TYPE_NORMAL
- en: Fundamental aspects of the SAML protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Establishing your SAML 2 Login using Spring Security
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acquiring the SAML 2 Authenticated Principal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parsing and generating SAML 2.0 metadata
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tailoring authorities using Spring Security SAML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing Single Logout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This chapter’s code in action link is here: [https://packt.link/7qRvM](https://packt.link/7qRvM).'
  prefs: []
  type: TYPE_NORMAL
- en: What is SAML?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Security Assertion Markup Language** (**SAML**) stands as a widely embraced
    open standard based on XML, specifically crafted for the secure exchange of **authentication
    and authorization** (**AA**) information among federated organizations. It serves
    to streamline **Single Sign-On** (**SSO**) capabilities for browser-based access.'
  prefs: []
  type: TYPE_NORMAL
- en: Established in 2005 as an OASIS standard and consistently upheld by the **Organization
    for the Advancement of Structured Information Standards** (**OASIS**), SAML 2.0
    amalgamates elements from SAML 1.1, the **Liberty Alliance Identity Federation
    Framework** (**ID-FF**) 1.2, and Shibboleth 1.3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the SAML 2.0 specification, three crucial entities assume distinct roles:
    the principal, the service provider, and the identity provider.'
  prefs: []
  type: TYPE_NORMAL
- en: As an illustration, consider Sally accessing her investment account on ucanbeamillionaire.com.
    To log her in and let her access her account, the site employs SAML for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: SAML 2.0 is widely adopted and used in various scenarios, such as enterprise
    applications, cloud services, and web-based authentication systems, to establish
    a secure and interoperable framework for identity and access management.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key components and concepts of SAML 2.0 include:'
  prefs: []
  type: TYPE_NORMAL
- en: A **Service Provider** (**SP**) functions as the entity delivering a service,
    often in the form of an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An **Identity Provider** (**IdP**) serves as the entity furnishing identities,
    encompassing the capability to authenticate a user. Typically, the IdP also houses
    the user profile, which includes additional information such as the first name,
    last name, job code, phone number, address, and more. The extent of user data
    required by SPs may vary, ranging from a basic profile (username, email) to a
    more comprehensive set (job code, department, address, location, manager, etc.),
    depending on the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **SAML Request**, which is also known as an authentication request, is initiated
    by the SP to formally request authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IdP generates a **SAML Response**, which includes the actual assertion of
    the authenticated user. Additionally, the SAML Response may incorporate extra
    information, such as user profile details and group/role information, based on
    the capabilities supported by the SP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SP-initiated** sign-in denotes the SAML sign-in flow instigated by the SP.
    This typically occurs when an end user attempts to access a resource or sign in
    directly on the SP side, such as when the browser endeavors to access a protected
    resource on the SP’s platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IdP-initiated** sign-in characterizes the SAML sign-in flow instigated by
    the IdP. In this scenario, instead of the SAML flow being prompted by a redirection
    from the SP, the IdP initiates a SAML Response redirected to the SP to validate
    the user’s identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Exploring the SAML protocol](img/B21757_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Exploring the SAML protocol
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few key points to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Direct interaction between the SP and the IdP never occurs. All interactions
    are facilitated through a browser, which serves as the intermediary for all redirections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SP must be aware of the IdP to redirect to before obtaining information
    about the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SP remains unaware of the user’s identity until it receives the SAML assertion
    from the IdP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initiation of this flow is not restricted to the SP; an IdP can also kickstart
    an authentication flow.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SAML authentication flow operates asynchronously. The SP is uncertain if
    the IdP will complete the entire process. Consequently, the SP does not retain
    any state related to authentication requests. When the SP receives a response
    from the IdP, it must include all necessary information.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Following the introduction of the SAML protocol, we’ll delve into the functionality
    of SAML 2.0 Login within the context of Spring Security.
  prefs: []
  type: TYPE_NORMAL
- en: SAML 2.0 Login with Spring Security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SAML 2.0 Login functionality empowers an application to function as a SAML
    2.0 relying party. This enables users to log in to the application using their
    pre-existing accounts with a SAML 2.0 Asserting Party, such as ADFS, Okta, and
    other IdPs.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The implementation of SAML 2.0 Login utilizes the **Web Browser Single Sign-On
    (SSO) Profile**, as outlined in the SAML 2 Profiles Specification: [https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15](https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15).'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin our exploration of SAML 2.0 relying party authentication in the context
    of Spring Security, we observe that Spring Security guides the user to a third
    party for authentication. This is accomplished through a sequence of redirections:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – Redirecting to asserting party authentication](img/B21757_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Redirecting to asserting party authentication
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s delve deeper into this sequence of SAML redirections:'
  prefs: []
  type: TYPE_NORMAL
- en: Initially, a user submits an unauthenticated request to the `/private` resource
    without proper authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring Security’s `AuthorizationFilter` signals the denial of the unauthenticated
    request by throwing an `AccessDeniedException`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Due to the lack of authorization, the `ExceptionTranslationFilter` triggers
    the start of authentication. The configured `AuthenticationEntryPoint` is an instance
    of `LoginUrlAuthenticationEntryPoint`, redirecting to the endpoint that generates
    the `<saml2:AuthnRequest>`, managed by the `Saml2WebSsoAuthenticationRequestFilter`.
    If multiple asserting parties are configured, it may first redirect to a picker
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subsequently, the `Saml2WebSsoAuthenticationRequestFilter` generates, signs,
    serializes, and encodes a `<saml2:AuthnRequest>` using its configured `Saml2AuthenticationRequestFactory`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser then takes the `<saml2:AuthnRequest>` and presents it to the asserting
    party, initiating the user authentication process. Upon successful authentication,
    the asserting party returns a `<saml2:Response>` to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser proceeds to `POST` the `<saml2:Response>` to the assertion consumer
    service endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following diagram illustrates the authentication process of a `<saml2:Response>`
    in Spring Security:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Authenticating a <saml2:Response>](img/B21757_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Authenticating a <saml2:Response>
  prefs: []
  type: TYPE_NORMAL
- en: 'We can summarize the interactions as follow:'
  prefs: []
  type: TYPE_NORMAL
- en: Upon submission of a `<saml2:Response>` by the browser to the application, the
    process is handed over to the `Saml2WebSsoAuthenticationFilter`. This filter employs
    its configured `AuthenticationConverter` to generate a `Saml2AuthenticationToken`
    by extracting the response from the `HttpServletRequest`. Additionally, the converter
    resolves the `RelyingPartyRegistration` and provides it to the `Saml2AuthenticationToken`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Subsequently, the filter transfers the token to its configured `AuthenticationManager`,
    defaulting to the `OpenSamlAuthenticationProvider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the event of authentication failure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `SecurityContextHolder` is cleared.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `AuthenticationEntryPoint` is invoked to initiate the authentication process
    anew.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If authentication succeeds:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Authentication` is set on the `SecurityContextHolder`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Saml2WebSsoAuthenticationFilter` invokes `FilterChain#doFilter(request,
    response)` to proceed with the remaining application logic.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: After the introduction of SAML 2.0 Login with Spring Security, we will explore
    a real-world SAML example using OKTA.
  prefs: []
  type: TYPE_NORMAL
- en: Add a SAML application on OKTA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To begin, you’ll need an OKTA developer account.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, visit the OKTA developer website: [https://developer.okta.com/signup](https://developer.okta.com/signup).
    You will be presented with the following options to create an account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – OKTA developer portal](img/B21757_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – OKTA developer portal
  prefs: []
  type: TYPE_NORMAL
- en: Choose **Access the Okta Developer Edition Service**, then create your developer
    account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.5 – OKTA developer account creation](img/B21757_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – OKTA developer account creation
  prefs: []
  type: TYPE_NORMAL
- en: The second step is to log in with your account, then go to **Applications**
    | **Create** **App Integration**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **SAML 2.0** and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a name to your application like `JBCP Calendar SAML` and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Single sign on URL: `https://localhost:8443/login/saml2/sso/okta`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the recipient URL and Destination URL: (the default)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the audience URI: `https://localhost:8443/saml2/service-provider-metadata/okta`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'After that click **Next**. Select these options: **I’m an Okta customer adding
    an internal app** and **This is an internal app that we** **have created**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: OKTA will create your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **SAML Signing Certificates** and go to **SHA-2** | **Actions** |
    **View IdP Metadata**. You can *right-click* and copy this menu item’s link or
    open its URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Copy the resulting link to your clipboard. It should look something like the
    following: `https://dev-xxxxx.okta.com/app/<random-characters>/sso/saml/metadata`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your application’s **Assignment** tab and assign access to the **Everyone**
    group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the user principal in OKTA
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s first create a user principal in OKTA.
  prefs: []
  type: TYPE_NORMAL
- en: Log in to OKTA and go to the OKTA administrator console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the **Users** page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once logged in, navigate to the **Admin** section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Directory** from the menu. Then choose the **People** sub-menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add Person** button or similar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in user details: Provide the necessary information for the new user, such
    as first name, last name, email address, and any other required fields. You may
    also set a username and assign a role or group to the user.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Adding users with OKTA](img/B21757_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Adding users with OKTA
  prefs: []
  type: TYPE_NORMAL
- en: Additional required dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We include the following additional dependencies in your `build.gradle` file
    if you are leveraging the OAuth 2 feature:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Specifying IdP Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a Spring Boot application, configure the metadata for an IdP by creating
    a setup resembling the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.01-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the SAML 2 Authenticated Principal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the relying party is appropriately configured for a specific asserting
    party, it is prepared to receive assertions. Following the validation of an assertion
    by the relying party, the outcome is a `Saml2Authentication` containing a `Saml2AuthenticatedPrincipal`.
    Consequently, you can access the principal, as demonstrated in the `SpringSecurityUserContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.02-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security can parse asserting party metadata to produce an `AssertingPartyDetails`
    instance as well as publish relying party metadata from a `RelyingPartyRegistration`
    instance.
  prefs: []
  type: TYPE_NORMAL
- en: Parsing SAML 2 metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By utilizing `RelyingPartyRegistrations`, it becomes possible to parse metadata
    from an asserting party. If you’re utilizing OpenSAML vendor support, the resultant
    `AssertingPartyDetails` will be in the form of `OpenSamlAssertingPartyDetails`.
    Consequently, you can access the underlying OpenSAML XMLObject by following these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Generating SAML 2 Metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can expose a metadata endpoint with the `saml2Metadata` DSL method, as
    you can see below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Utilize the metadata endpoint for registering your relying party with the asserting
    party. This typically involves identifying the appropriate form field to provide
    the metadata endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: The default metadata endpoint is `/saml2/metadata`. It also responds to `/saml2/metadata/{registrationId}`
    and `/saml2/service-provider-metadata/{registrationId}`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can adapt this by calling the `metadataUrl` method in the DSL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Adapting RelyingPartyRegistration lookup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To configure your own `Saml2MetadataResponseResolver`, you should use `RelyingPartyRegistration`
    as described below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have explored the SAML 2.0 Login functionality with Spring Security,
    we’ll move on to use custom SAML Spring Boot Auto Configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding SAML Spring Boot Auto Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Boot generates two `@Bean` objects for a relying party.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first is a `SecurityFilterChain` that configures the application as a relying
    party. When including `spring-security-saml2-service-provider`, the `SecurityFilterChain`
    looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: You will notice that every authenticated user has a `ROLE_USER` role by default.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To test the application, open a web browser and navigate to: `https://localhost:8443`.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, proceed to the `/events` page. You should get an **Access** **Denied**
    error.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.03-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom RelyingPartyRegistrationRepository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Spring Boot creates a `RelyingPartyRegistrationRepository`, which represents
    the asserting party and relying party metadata. This includes things such as the
    location of the SSO endpoint the relying party should use when requesting authentication
    from the asserting party.
  prefs: []
  type: TYPE_NORMAL
- en: You can override the default by publishing your own `RelyingPartyRegistrationRepository`
    bean. You can also remove the existing `spring.security.saml2.relyingparty.registration`
    configuration properties programmatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, you can look up the asserting party’s configuration by hitting
    its metadata endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can directly wire up the repository by using the DSL, which
    also overrides the auto-configured `SecurityFilterChain`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `registrationId` is a user-defined value chosen to distinguish between different
    registrations.
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.04-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom authorities with Spring Security SAML
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Upon logging in, you may observe that the displayed page indicates a `ROLE_USER`
    authority.
  prefs: []
  type: TYPE_NORMAL
- en: Despite granting access to all users initially, you can configure your **SAML**
    application to transmit a user’s groups as an attribute. Additionally, you have
    the option to include other attributes such as name and email.
  prefs: []
  type: TYPE_NORMAL
- en: Start by choosing to edit your OKTA application SAML settings section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Complete the Group Attribute Statements section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name: `groups`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Filter: `Matches regex` and use `.*` for the value'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Name format: `Unspecified`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can add additional attributes. As an example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.7 – Additional custom user attributes in OKTA](img/B21757_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Additional custom user attributes in OKTA
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `ROLE_ADMIN`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.8 – Defining a custom group in OKTA](img/B21757_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – Defining a custom group in OKTA
  prefs: []
  type: TYPE_NORMAL
- en: Then assign to this group the user `admin1@example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.9 – Assigning users to groups in OKTA](img/B21757_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Assigning users to groups in OKTA
  prefs: []
  type: TYPE_NORMAL
- en: Adapt the `SecurityConfig.java` class to override the default configuration.
    Then, use a converter to map the values in the `groups` attribute to Spring Security
    authorities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, you should see your user’s groups as authorities. That comes from the OKTA
    SAML context related to the authenticated user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that with these changes, you will now have access to the `admin1@example.com`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.05`.
  prefs: []
  type: TYPE_NORMAL
- en: Performing Single Logout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Security’s SAML support includes a logout feature that requires some
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: You can use `OpenSSL` to create a private key and certificate. Ensure you provide
    a value for at least one of the questions during the process, and the setup should
    be successful.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Copy the generated files to your app’s `src/main/resources/credentials` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Configure in `application.yml`, the generated key, the certificates location
    and the IdP’s logout configuration similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'On the OKTA configuration page:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the OKTA Admin Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Applications** | **Applications**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `https://localhost:8443/logout/saml2/slo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `https://localhost:8443/saml2/service-provider-metadata/okta`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the `local.crt` file you created in the previous steps, and click **Upload
    Certificate**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Next**.![Figure 10.10 – Single Logout configuration with OKTA](img/B21757_10_10.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Figure 10.10 – Single Logout configuration with OKTA
  prefs: []
  type: TYPE_NORMAL
- en: Click **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Restart the Spring Boot application. You can now log out from OKTA as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: As the SAML 2.0 specification permits multiple values for each attribute, you
    have the option to use either `getAttribute` to retrieve the list of attributes
    or `getFirstAttribute` to obtain the first value in the list. The `getFirstAttribute`
    method proves particularly useful when it’s known that there is only one value.
  prefs: []
  type: TYPE_NORMAL
- en: Your code should now look like that in `chapter10.06-calendar`.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter delved into the realm of **SAML**, a robust standard for achieving
    SSO in modern identity management. Beginning with an introduction to SAML’s foundational
    principles, it progressed to practical implementation, guiding developers through
    the seamless integration of **SAML 2** Login within the Spring Security framework.
  prefs: []
  type: TYPE_NORMAL
- en: Key highlights included the practical steps involved in adding a **SAML** application
    on OKTA, a widely used IdP, and the creation of user principals within OKTA for
    streamlined user management. Essential dependencies for successful **SAML** integration
    were outlined, emphasizing the crucial tools and libraries for building a resilient
    authentication system.
  prefs: []
  type: TYPE_NORMAL
- en: You have gained insights into critical configuration steps, such as specifying
    IdP metadata to ensure a standardized and secure communication channel. The chapter
    explored the retrieval of the **SAML 2** authenticated principal and parsing **SAML
    2** metadata, and producing **SAML 2** metadata, providing a comprehensive understanding
    of the technical intricacies involved.
  prefs: []
  type: TYPE_NORMAL
- en: Flexibility in `RelyingPartyRegistration`, overriding `RelyingPartyRegistrationRepository`
    for advanced customization. Practical guidance was provided on customizing authorities
    within Spring Security SAML, enabling the effective management of user roles.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter concluded by addressing the crucial aspect of Single Logout, showcasing
    how SAML supports a standardized mechanism for logging out users across various
    services. In essence, this chapter equips you with the knowledge and practical
    insights needed to implement SAML-based authentication, fostering a secure and
    seamless identity management experience in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll learn more about Spring Security authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Enhancing Authorization Mechanisms'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part delves into fine-grained access control, exploring various methods
    to implement precise authorization that may impact specific sections of an application
    page. Initially, we examine two approaches for implementing fine-grained authorization.
    Subsequently, we explore Spring Security’s methodology for securing the business
    tier through method annotation, utilizing interface-based proxies for **Aspect-Oriented
    Programming** (**AOP**). Furthermore, we investigate annotation-based security’s
    capability for role-based filtering on data collections. Lastly, we compare class-based
    proxies with interface-based proxies.
  prefs: []
  type: TYPE_NORMAL
- en: Within this section, we delve into the intricate topic of **Access Control Lists**
    (**ACLs**), offering a comprehensive overview of their potential for domain object
    instance-level authorization. Spring Security offers a robust, albeit complex,
    ACL module that effectively caters to the needs of small to medium-sized implementations.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, we undertake the task of crafting custom implementations for Spring
    Security’s essential authorization APIs. This hands-on approach enables a deeper
    understanding of Spring Security’s authorization architecture.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B21757_11.xhtml#_idTextAnchor332), *Fine-Grained Access Control*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B21757_12.xhtml#_idTextAnchor375), *Access Control Lists*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B21757_13.xhtml#_idTextAnchor415), *Custom Authorization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
