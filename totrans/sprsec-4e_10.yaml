- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: SAML 2 Support
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SAML 2支持
- en: SAML is predominantly employed as a web-based authentication mechanism, relying
    on the browser agent to facilitate the authentication process. In broad terms,
    the authentication flow of SAML can be outlined as follows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: SAML主要用作基于网络的认证机制，依赖于浏览器代理来促进认证过程。从广义上讲，SAML的认证流程可以概述如下。
- en: Spring Security provides comprehensive SAML 2 support. This section discusses
    how to integrate SAML 2 into your Servlet-based application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security提供了全面的SAML 2支持。本节讨论了如何将SAML 2集成到基于Servlet的应用程序中。
- en: Starting from 2009, support for relying parties has been available as part of
    an extension project. In 2019, efforts were initiated to integrate this support
    into the core of Spring Security. This mirrors a similar process initiated in
    2017 for incorporating Spring Security’s OAuth 2.0 support.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从2009年开始，作为扩展项目的一部分，已经提供了对依赖方的支持。到2019年，开始努力将这项支持集成到Spring Security的核心中。这反映了2017年启动的将Spring
    Security的OAuth 2.0支持纳入其中的类似过程。
- en: 'This chapter will explore the following subjects:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将探讨以下主题：
- en: Fundamental aspects of the SAML protocol
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAML协议的基本方面
- en: Establishing your SAML 2 Login using Spring Security
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security建立您的SAML 2登录
- en: Acquiring the SAML 2 Authenticated Principal
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取SAML 2认证主体
- en: Parsing and generating SAML 2.0 metadata
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解析和生成SAML 2.0元数据
- en: Tailoring authorities using Spring Security SAML
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Security SAML定制权限
- en: Executing Single Logout
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行单点登出
- en: 'This chapter’s code in action link is here: [https://packt.link/7qRvM](https://packt.link/7qRvM).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码示例链接在此：[https://packt.link/7qRvM](https://packt.link/7qRvM)。
- en: What is SAML?
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是SAML？
- en: '**Security Assertion Markup Language** (**SAML**) stands as a widely embraced
    open standard based on XML, specifically crafted for the secure exchange of **authentication
    and authorization** (**AA**) information among federated organizations. It serves
    to streamline **Single Sign-On** (**SSO**) capabilities for browser-based access.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全断言标记语言**（**SAML**）是一个基于XML的广泛采用的开放标准，专门用于在联合组织之间安全交换**认证和授权**（**AA**）信息。它用于简化基于浏览器的**单点登录**（**SSO**）功能。'
- en: Established in 2005 as an OASIS standard and consistently upheld by the **Organization
    for the Advancement of Structured Information Standards** (**OASIS**), SAML 2.0
    amalgamates elements from SAML 1.1, the **Liberty Alliance Identity Federation
    Framework** (**ID-FF**) 1.2, and Shibboleth 1.3.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 2.0于2005年作为OASIS标准建立，并由**结构化信息标准推进组织**（**OASIS**）持续维护，它结合了SAML 1.1、**Liberty
    Alliance Identity Federation Framework**（**ID-FF**）1.2和Shibboleth 1.3的元素。
- en: 'Within the SAML 2.0 specification, three crucial entities assume distinct roles:
    the principal, the service provider, and the identity provider.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在SAML 2.0规范中，三个关键实体承担不同的角色：主体、服务提供者和身份提供者。
- en: As an illustration, consider Sally accessing her investment account on ucanbeamillionaire.com.
    To log her in and let her access her account, the site employs SAML for authentication.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以Sally访问ucanbeamillionaire.com上的投资账户为例。为了让她登录并访问她的账户，该网站使用SAML进行认证。
- en: SAML 2.0 is widely adopted and used in various scenarios, such as enterprise
    applications, cloud services, and web-based authentication systems, to establish
    a secure and interoperable framework for identity and access management.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 2.0 已被广泛采用并在各种场景中使用，例如企业应用、云服务和基于网络的认证系统，以建立一个安全和互操作的框架，用于身份和访问管理。
- en: 'Key components and concepts of SAML 2.0 include:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 2.0的关键组件和概念包括：
- en: A **Service Provider** (**SP**) functions as the entity delivering a service,
    often in the form of an application.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务提供者**（**SP**）是提供服务的实体，通常以应用程序的形式存在。'
- en: An **Identity Provider** (**IdP**) serves as the entity furnishing identities,
    encompassing the capability to authenticate a user. Typically, the IdP also houses
    the user profile, which includes additional information such as the first name,
    last name, job code, phone number, address, and more. The extent of user data
    required by SPs may vary, ranging from a basic profile (username, email) to a
    more comprehensive set (job code, department, address, location, manager, etc.),
    depending on the application.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份提供者**（**IdP**）是提供身份的实体，包括验证用户的能力。通常，IdP还包含用户资料，其中包含额外的信息，如名字、姓氏、工作代码、电话号码、地址等。SP对用户数据的需求可能有所不同，从基本资料（用户名、电子邮件）到更全面的资料集（工作代码、部门、地址、位置、经理等），具体取决于应用程序。'
- en: A **SAML Request**, which is also known as an authentication request, is initiated
    by the SP to formally request authentication.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SAML请求**，也称为身份验证请求，由SP启动，以正式请求身份验证。'
- en: The IdP generates a **SAML Response**, which includes the actual assertion of
    the authenticated user. Additionally, the SAML Response may incorporate extra
    information, such as user profile details and group/role information, based on
    the capabilities supported by the SP.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IdP生成一个**SAML响应**，其中包含已认证用户的实际断言。此外，SAML响应可能包含额外信息，例如用户配置文件细节和组/角色信息，这些信息基于SP支持的功能。
- en: '**SP-initiated** sign-in denotes the SAML sign-in flow instigated by the SP.
    This typically occurs when an end user attempts to access a resource or sign in
    directly on the SP side, such as when the browser endeavors to access a protected
    resource on the SP’s platform.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**由SP启动的**登录是指由SP启动的SAML登录流程。这通常发生在最终用户尝试访问资源或直接在SP端登录时，例如当浏览器试图访问SP平台上的受保护资源时。'
- en: '**IdP-initiated** sign-in characterizes the SAML sign-in flow instigated by
    the IdP. In this scenario, instead of the SAML flow being prompted by a redirection
    from the SP, the IdP initiates a SAML Response redirected to the SP to validate
    the user’s identity.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**由IdP启动的**登录是指由IdP启动的SAML登录流程。在这种情况下，SAML流程不是由SP的重定向触发的，而是IdP启动一个重定向到SP的SAML响应，以验证用户的身份。'
- en: '![Figure 10.1 – Exploring the SAML protocol](img/B21757_10_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 探索SAML协议](img/B21757_10_01.jpg)'
- en: Figure 10.1 – Exploring the SAML protocol
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 探索SAML协议
- en: 'Here are a few key points to consider:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关键点需要考虑：
- en: Direct interaction between the SP and the IdP never occurs. All interactions
    are facilitated through a browser, which serves as the intermediary for all redirections.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SP与IdP之间的直接交互从未发生。所有交互都通过浏览器进行，浏览器作为所有重定向的中介。
- en: The SP must be aware of the IdP to redirect to before obtaining information
    about the user.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在获取用户信息之前，SP必须知道要重定向到的IdP。
- en: The SP remains unaware of the user’s identity until it receives the SAML assertion
    from the IdP.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SP在收到IdP的SAML断言之前，不知道用户的身份。
- en: The initiation of this flow is not restricted to the SP; an IdP can also kickstart
    an authentication flow.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此流程的启动不仅限于SP；IdP也可以启动一个身份验证流程。
- en: The SAML authentication flow operates asynchronously. The SP is uncertain if
    the IdP will complete the entire process. Consequently, the SP does not retain
    any state related to authentication requests. When the SP receives a response
    from the IdP, it must include all necessary information.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAML身份验证流程是异步的。SP不确定IdP是否会完成整个流程。因此，SP不会保留与身份验证请求相关的任何状态。当SP从IdP收到响应时，它必须包含所有必要的信息。
- en: Following the introduction of the SAML protocol, we’ll delve into the functionality
    of SAML 2.0 Login within the context of Spring Security.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了SAML协议之后，我们将深入探讨Spring Security上下文中SAML 2.0登录的功能。
- en: SAML 2.0 Login with Spring Security
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SAML 2.0使用Spring Security登录
- en: The SAML 2.0 Login functionality empowers an application to function as a SAML
    2.0 relying party. This enables users to log in to the application using their
    pre-existing accounts with a SAML 2.0 Asserting Party, such as ADFS, Okta, and
    other IdPs.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 2.0登录功能使应用程序能够作为SAML 2.0依赖方运行。这使用户能够使用他们现有的SAML 2.0断言方（如ADFS、Okta和其他IdP）的账户登录到应用程序。
- en: Important note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The implementation of SAML 2.0 Login utilizes the **Web Browser Single Sign-On
    (SSO) Profile**, as outlined in the SAML 2 Profiles Specification: [https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15](https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: SAML 2.0登录的实现使用了**Web浏览器单点登录（SSO）配置文件**，如SAML 2配置文件规范所述：[https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15](https://groups.oasis-open.org/higherlogic/ws/public/document?document_id=35389#page=15)。
- en: 'To begin our exploration of SAML 2.0 relying party authentication in the context
    of Spring Security, we observe that Spring Security guides the user to a third
    party for authentication. This is accomplished through a sequence of redirections:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始探索Spring Security上下文中的SAML 2.0依赖方身份验证，我们观察到Spring Security引导用户到第三方进行身份验证。这是通过一系列重定向来实现的：
- en: '![Figure 10.2 – Redirecting to asserting party authentication](img/B21757_10_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 重定向到断言方身份验证](img/B21757_10_02.jpg)'
- en: Figure 10.2 – Redirecting to asserting party authentication
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 重定向到断言方身份验证
- en: 'Let’s delve deeper into this sequence of SAML redirections:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解这个 SAML 重定向序列：
- en: Initially, a user submits an unauthenticated request to the `/private` resource
    without proper authorization.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始时，用户在没有适当授权的情况下向 `/private` 资源提交未认证的请求。
- en: Spring Security’s `AuthorizationFilter` signals the denial of the unauthenticated
    request by throwing an `AccessDeniedException`.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Security 的 `AuthorizationFilter` 通过抛出 `AccessDeniedException` 来指示未认证请求的拒绝。
- en: Due to the lack of authorization, the `ExceptionTranslationFilter` triggers
    the start of authentication. The configured `AuthenticationEntryPoint` is an instance
    of `LoginUrlAuthenticationEntryPoint`, redirecting to the endpoint that generates
    the `<saml2:AuthnRequest>`, managed by the `Saml2WebSsoAuthenticationRequestFilter`.
    If multiple asserting parties are configured, it may first redirect to a picker
    page.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于缺乏授权，`ExceptionTranslationFilter` 触发认证的开始。配置的 `AuthenticationEntryPoint` 是
    `LoginUrlAuthenticationEntryPoint` 的一个实例，它将重定向到由 `Saml2WebSsoAuthenticationRequestFilter`
    管理的生成 `<saml2:AuthnRequest>` 的端点。如果配置了多个断言方，它可能首先重定向到一个选择页面。
- en: Subsequently, the `Saml2WebSsoAuthenticationRequestFilter` generates, signs,
    serializes, and encodes a `<saml2:AuthnRequest>` using its configured `Saml2AuthenticationRequestFactory`.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后，`Saml2WebSsoAuthenticationRequestFilter` 使用其配置的 `Saml2AuthenticationRequestFactory`
    生成、签名、序列化和编码一个 `<saml2:AuthnRequest>`。
- en: The browser then takes the `<saml2:AuthnRequest>` and presents it to the asserting
    party, initiating the user authentication process. Upon successful authentication,
    the asserting party returns a `<saml2:Response>` to the browser.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器随后将 `<saml2:AuthnRequest>` 提交给断言方，启动用户认证过程。在认证成功后，断言方将 `<saml2:Response>`
    返回给浏览器。
- en: The browser proceeds to `POST` the `<saml2:Response>` to the assertion consumer
    service endpoint.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器继续将 `<saml2:Response>` 通过 `POST` 方式发送到断言消费者服务端点。
- en: 'The following diagram illustrates the authentication process of a `<saml2:Response>`
    in Spring Security:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下图表说明了 Spring Security 中 `<saml2:Response>` 的认证过程：
- en: '![Figure 10.3 – Authenticating a <saml2:Response>](img/B21757_10_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 认证 <saml2:Response>](img/B21757_10_03.jpg)'
- en: Figure 10.3 – Authenticating a <saml2:Response>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 认证 <saml2:Response>
- en: 'We can summarize the interactions as follow:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将交互总结如下：
- en: Upon submission of a `<saml2:Response>` by the browser to the application, the
    process is handed over to the `Saml2WebSsoAuthenticationFilter`. This filter employs
    its configured `AuthenticationConverter` to generate a `Saml2AuthenticationToken`
    by extracting the response from the `HttpServletRequest`. Additionally, the converter
    resolves the `RelyingPartyRegistration` and provides it to the `Saml2AuthenticationToken`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当浏览器向应用程序提交 `<saml2:Response>` 时，该过程由 `Saml2WebSsoAuthenticationFilter` 处理。此过滤器使用其配置的
    `AuthenticationConverter` 通过从 `HttpServletRequest` 中提取响应来生成 `Saml2AuthenticationToken`。此外，转换器解析
    `RelyingPartyRegistration` 并将其提供给 `Saml2AuthenticationToken`。
- en: Subsequently, the filter transfers the token to its configured `AuthenticationManager`,
    defaulting to the `OpenSamlAuthenticationProvider`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后，过滤器将令牌传递给其配置的 `AuthenticationManager`，默认为 `OpenSamlAuthenticationProvider`。
- en: 'In the event of authentication failure:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在认证失败的情况下：
- en: The `SecurityContextHolder` is cleared.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SecurityContextHolder` 被清除。'
- en: The `AuthenticationEntryPoint` is invoked to initiate the authentication process
    anew.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationEntryPoint` 被调用以重新启动认证过程。'
- en: 'If authentication succeeds:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果认证成功：
- en: The `Authentication` is set on the `SecurityContextHolder`.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Authentication` 被设置在 `SecurityContextHolder` 中。'
- en: The `Saml2WebSsoAuthenticationFilter` invokes `FilterChain#doFilter(request,
    response)` to proceed with the remaining application logic.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Saml2WebSsoAuthenticationFilter` 调用 `FilterChain#doFilter(request, response)`
    以继续剩余的应用程序逻辑。'
- en: After the introduction of SAML 2.0 Login with Spring Security, we will explore
    a real-world SAML example using OKTA.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入 SAML 2.0 与 Spring Security 登录之后，我们将通过 OKTA 探索一个实际的 SAML 示例。
- en: Add a SAML application on OKTA
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 OKTA 上添加 SAML 应用程序
- en: To begin, you’ll need an OKTA developer account.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，你需要一个 OKTA 开发者账户。
- en: 'First, visit the OKTA developer website: [https://developer.okta.com/signup](https://developer.okta.com/signup).
    You will be presented with the following options to create an account:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问 OKTA 开发者网站：[https://developer.okta.com/signup](https://developer.okta.com/signup)。你将看到以下选项来创建账户：
- en: '![Figure 10.4 – OKTA developer portal](img/B21757_10_04.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – OKTA 开发者门户](img/B21757_10_04.jpg)'
- en: Figure 10.4 – OKTA developer portal
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – OKTA 开发者门户
- en: Choose **Access the Okta Developer Edition Service**, then create your developer
    account.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **访问 Okta 开发者版服务**，然后创建您的开发者账户。
- en: '![Figure 10.5 – OKTA developer account creation](img/B21757_10_05.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – OKTA 开发者账户创建](img/B21757_10_05.jpg)'
- en: Figure 10.5 – OKTA developer account creation
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – OKTA 开发者账户创建
- en: The second step is to log in with your account, then go to **Applications**
    | **Create** **App Integration**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二步是使用您的账户登录，然后转到 **应用程序** | **创建** **应用集成**。
- en: Choose **SAML 2.0** and click **Next**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **SAML 2.0** 并点击 **下一步**。
- en: Give a name to your application like `JBCP Calendar SAML` and click **Next**.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给您的应用程序起一个名字，例如 `JBCP 日历 SAML` 并点击 **下一步**。
- en: 'Use the following configuration:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下配置：
- en: 'Single sign on URL: `https://localhost:8443/login/saml2/sso/okta`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单点登录 URL：`https://localhost:8443/login/saml2/sso/okta`
- en: 'For the recipient URL and Destination URL: (the default)'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于接收器 URL 和目标 URL：（默认）
- en: 'For the audience URI: `https://localhost:8443/saml2/service-provider-metadata/okta`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于受众 URI：`https://localhost:8443/saml2/service-provider-metadata/okta`
- en: 'After that click **Next**. Select these options: **I’m an Okta customer adding
    an internal app** and **This is an internal app that we** **have created**.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后点击 **下一步**。选择以下选项：**我是一个 Okta 客户，添加内部应用程序** 和 **这是一个我们** **创建的内部应用程序**。
- en: Select **Finish**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **完成**。
- en: OKTA will create your application.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OKTA 将创建您的应用程序。
- en: Go to the **SAML Signing Certificates** and go to **SHA-2** | **Actions** |
    **View IdP Metadata**. You can *right-click* and copy this menu item’s link or
    open its URL.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 **SAML 签名证书** 并选择 **SHA-2** | **操作** | **查看 IdP 元数据**。您可以 **右键单击** 并复制此菜单项的链接或打开其
    URL。
- en: 'Copy the resulting link to your clipboard. It should look something like the
    following: `https://dev-xxxxx.okta.com/app/<random-characters>/sso/saml/metadata`.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的链接复制到您的剪贴板。它看起来可能如下所示：`https://dev-xxxxx.okta.com/app/<随机字符>/sso/saml/metadata`。
- en: Go to your application’s **Assignment** tab and assign access to the **Everyone**
    group.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您应用程序的 **分配** 选项卡并将访问权限分配给 **所有人** 组。
- en: Creating the user principal in OKTA
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 OKTA 中创建用户主体
- en: Let’s first create a user principal in OKTA.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在 OKTA 中创建一个用户主体。
- en: Log in to OKTA and go to the OKTA administrator console.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 OKTA 并进入 OKTA 管理员控制台。
- en: Navigate to the **Users** page.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **用户** 页面。
- en: Once logged in, navigate to the **Admin** section.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，导航到 **管理员** 部分。
- en: Select **Directory** from the menu. Then choose the **People** sub-menu.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **目录**。然后选择 **人员** 子菜单。
- en: Click the **Add Person** button or similar.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加人员** 按钮或类似按钮。
- en: 'Fill in user details: Provide the necessary information for the new user, such
    as first name, last name, email address, and any other required fields. You may
    also set a username and assign a role or group to the user.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写用户详细信息：提供新用户所需的信息，例如姓名、姓氏、电子邮件地址和任何其他必填字段。您还可以设置用户名并分配角色或组给用户。
- en: '![Figure 10.6 – Adding users with OKTA](img/B21757_10_06.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 使用 OKTA 添加用户](img/B21757_10_06.jpg)'
- en: Figure 10.6 – Adding users with OKTA
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 使用 OKTA 添加用户
- en: Additional required dependencies
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他必需的依赖项
- en: 'We include the following additional dependencies in your `build.gradle` file
    if you are leveraging the OAuth 2 feature:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 OAuth 2 功能，我们将在您的 `build.gradle` 文件中包含以下附加依赖项：
- en: '[PRE0]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Specifying IdP Metadata
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指定 IdP 元数据
- en: 'In a Spring Boot application, configure the metadata for an IdP by creating
    a setup resembling the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Boot 应用程序中，通过创建以下类似的设置来配置 IdP 的元数据：
- en: '[PRE1]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Important note
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter10.01-calendar`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `chapter10.01-calendar` 中的那样。
- en: Retrieving the SAML 2 Authenticated Principal
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 SAML 2 认证主体
- en: 'Once the relying party is appropriately configured for a specific asserting
    party, it is prepared to receive assertions. Following the validation of an assertion
    by the relying party, the outcome is a `Saml2Authentication` containing a `Saml2AuthenticatedPrincipal`.
    Consequently, you can access the principal, as demonstrated in the `SpringSecurityUserContext`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦为特定的断言方正确配置了依赖方，它就准备好接收断言。在依赖方验证断言后，结果是一个包含 `Saml2AuthenticatedPrincipal`
    的 `Saml2Authentication`。因此，您可以通过 `SpringSecurityUserContext` 访问主体，如下所示：
- en: '[PRE2]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Important note
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter10.02-calendar`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `chapter10.02-calendar` 中的那样。
- en: Spring Security can parse asserting party metadata to produce an `AssertingPartyDetails`
    instance as well as publish relying party metadata from a `RelyingPartyRegistration`
    instance.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 可以解析断言方元数据以生成 `AssertingPartyDetails` 实例，并从 `RelyingPartyRegistration`
    实例发布依赖方元数据。
- en: Parsing SAML 2 metadata
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 解析 SAML 2 元数据
- en: 'By utilizing `RelyingPartyRegistrations`, it becomes possible to parse metadata
    from an asserting party. If you’re utilizing OpenSAML vendor support, the resultant
    `AssertingPartyDetails` will be in the form of `OpenSamlAssertingPartyDetails`.
    Consequently, you can access the underlying OpenSAML XMLObject by following these
    steps:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用 `RelyingPartyRegistrations`，可以解析断言方的元数据。如果你使用 OpenSAML 供应商支持，结果 `AssertingPartyDetails`
    将以 `OpenSamlAssertingPartyDetails` 的形式存在。因此，你可以通过以下步骤访问底层的 OpenSAML XMLObject：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Generating SAML 2 Metadata
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成 SAML 2 元数据
- en: 'You can expose a metadata endpoint with the `saml2Metadata` DSL method, as
    you can see below:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `saml2Metadata` DSL 方法公开元数据端点，如下所示：
- en: '[PRE4]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Utilize the metadata endpoint for registering your relying party with the asserting
    party. This typically involves identifying the appropriate form field to provide
    the metadata endpoint.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 利用元数据端点将依赖方注册到断言方。这通常涉及识别适当的表单字段以提供元数据端点。
- en: The default metadata endpoint is `/saml2/metadata`. It also responds to `/saml2/metadata/{registrationId}`
    and `/saml2/service-provider-metadata/{registrationId}`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 默认元数据端点是 `/saml2/metadata`。它还响应于 `/saml2/metadata/{registrationId}` 和 `/saml2/service-provider-metadata/{registrationId}`。
- en: 'You can adapt this by calling the `metadataUrl` method in the DSL:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在 DSL 中调用 `metadataUrl` 方法来适配它：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Adapting RelyingPartyRegistration lookup
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 适配 RelyingPartyRegistration 查找
- en: 'To configure your own `Saml2MetadataResponseResolver`, you should use `RelyingPartyRegistration`
    as described below:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置自己的 `Saml2MetadataResponseResolver`，你应该使用以下描述的 `RelyingPartyRegistration`：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now that we have explored the SAML 2.0 Login functionality with Spring Security,
    we’ll move on to use custom SAML Spring Boot Auto Configuration.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了使用 Spring Security 的 SAML 2.0 登录功能，我们将继续使用自定义的 SAML Spring Boot 自动配置。
- en: Overriding SAML Spring Boot Auto Configuration
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 覆盖 SAML Spring Boot 自动配置
- en: Spring Boot generates two `@Bean` objects for a relying party.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 为依赖方生成两个 `@Bean` 对象。
- en: 'The first is a `SecurityFilterChain` that configures the application as a relying
    party. When including `spring-security-saml2-service-provider`, the `SecurityFilterChain`
    looks like:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是配置应用程序作为依赖方的 `SecurityFilterChain`。当包含 `spring-security-saml2-service-provider`
    时，`SecurityFilterChain` 看起来如下：
- en: You will notice that every authenticated user has a `ROLE_USER` role by default.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到每个经过身份验证的用户默认都有一个 `ROLE_USER` 角色。
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To test the application, open a web browser and navigate to: `https://localhost:8443`.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试应用程序，请打开网页浏览器并导航到：`https://localhost:8443`。
- en: Next, proceed to the `/events` page. You should get an **Access** **Denied**
    error.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，转到 `/events` 页面。你应该会得到一个 **访问** **被拒绝** 错误。
- en: Important note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter10.03-calendar`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像 `chapter10.03-calendar` 中的那样。
- en: Creating a custom RelyingPartyRegistrationRepository
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自定义 RelyingPartyRegistrationRepository
- en: Spring Boot creates a `RelyingPartyRegistrationRepository`, which represents
    the asserting party and relying party metadata. This includes things such as the
    location of the SSO endpoint the relying party should use when requesting authentication
    from the asserting party.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 创建了一个 `RelyingPartyRegistrationRepository`，它代表断言方和依赖方元数据。这包括诸如依赖方在请求断言方进行身份验证时应使用的
    SSO 端点位置等信息。
- en: You can override the default by publishing your own `RelyingPartyRegistrationRepository`
    bean. You can also remove the existing `spring.security.saml2.relyingparty.registration`
    configuration properties programmatically.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过发布自己的 `RelyingPartyRegistrationRepository` bean 来覆盖默认设置。你也可以通过编程方式删除现有的
    `spring.security.saml2.relyingparty.registration` 配置属性。
- en: 'For example, you can look up the asserting party’s configuration by hitting
    its metadata endpoint:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以通过访问其元数据端点来查找断言方的配置：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Alternatively, you can directly wire up the repository by using the DSL, which
    also overrides the auto-configured `SecurityFilterChain`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以直接通过 DSL 连接仓库，这也会覆盖自动配置的 `SecurityFilterChain`：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `registrationId` is a user-defined value chosen to distinguish between different
    registrations.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`registrationId` 是用户定义的值，用于区分不同的注册。'
- en: Your code should now look like that in `chapter10.04-calendar`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码现在应该看起来像 `chapter10.04-calendar` 中的那样。
- en: Creating custom authorities with Spring Security SAML
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Spring Security SAML 创建自定义权限
- en: Upon logging in, you may observe that the displayed page indicates a `ROLE_USER`
    authority.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，你可能观察到显示的页面指示一个 `ROLE_USER` 权限。
- en: Despite granting access to all users initially, you can configure your **SAML**
    application to transmit a user’s groups as an attribute. Additionally, you have
    the option to include other attributes such as name and email.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最初授予所有用户访问权限，但您可以配置您的 **SAML** 应用程序以将用户的组作为属性传输。此外，您还可以选择包括其他属性，如姓名和电子邮件。
- en: Start by choosing to edit your OKTA application SAML settings section.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先选择编辑您的OKTA应用程序SAML设置部分。
- en: Complete the Group Attribute Statements section.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成组属性声明部分。
- en: 'Name: `groups`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：`groups`
- en: 'Filter: `Matches regex` and use `.*` for the value'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤器：`Matches regex` 并使用 `.*` 作为值
- en: 'Name format: `Unspecified`'
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称格式：`Unspecified`
- en: 'You can add additional attributes. As an example:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以添加其他属性。例如：
- en: '![Figure 10.7 – Additional custom user attributes in OKTA](img/B21757_10_07.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7 – OKTA中的附加自定义用户属性](img/B21757_10_07.jpg)'
- en: Figure 10.7 – Additional custom user attributes in OKTA
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – OKTA中的附加自定义用户属性
- en: Go to the `ROLE_ADMIN`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `ROLE_ADMIN`。
- en: '![Figure 10.8 – Defining a custom group in OKTA](img/B21757_10_08.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8 – 在OKTA中定义自定义组](img/B21757_10_08.jpg)'
- en: Figure 10.8 – Defining a custom group in OKTA
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 在OKTA中定义自定义组
- en: Then assign to this group the user `admin1@example.com`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后将用户 `admin1@example.com` 分配到该组。
- en: '![Figure 10.9 – Assigning users to groups in OKTA](img/B21757_10_09.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 在OKTA中分配用户到组](img/B21757_10_09.jpg)'
- en: Figure 10.9 – Assigning users to groups in OKTA
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 在OKTA中分配用户到组
- en: Adapt the `SecurityConfig.java` class to override the default configuration.
    Then, use a converter to map the values in the `groups` attribute to Spring Security
    authorities.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `SecurityConfig.java` 类以覆盖默认配置。然后，使用转换器将 `groups` 属性中的值映射到Spring Security权限。
- en: '[PRE10]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, you should see your user’s groups as authorities. That comes from the OKTA
    SAML context related to the authenticated user.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您应该能看到您的用户组作为权限。这来自与认证用户相关的OKTA SAML上下文。
- en: You will notice that with these changes, you will now have access to the `admin1@example.com`.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您会注意到，通过这些更改，您现在可以访问 `admin1@example.com`。
- en: Important note
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Your code should now look like that in `chapter10.05`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `chapter10.05` 中的那样。
- en: Performing Single Logout
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行单点登出
- en: Spring Security’s SAML support includes a logout feature that requires some
    configuration.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security的SAML支持包括一个需要一些配置的登出功能。
- en: You can use `OpenSSL` to create a private key and certificate. Ensure you provide
    a value for at least one of the questions during the process, and the setup should
    be successful.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `OpenSSL` 创建私钥和证书。确保在过程中至少提供一个问题的值，设置应该会成功。
- en: '[PRE11]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Copy the generated files to your app’s `src/main/resources/credentials` directory.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将生成的文件复制到您的应用程序的 `src/main/resources/credentials` 目录。
- en: 'Configure in `application.yml`, the generated key, the certificates location
    and the IdP’s logout configuration similar to the following:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `application.yml` 中配置，生成的密钥、证书位置和IdP的登出配置类似于以下内容：
- en: '[PRE12]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'On the OKTA configuration page:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在OKTA配置页面上：
- en: Open the OKTA Admin Console.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开OKTA管理控制台。
- en: Choose **Applications** | **Applications**.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **应用程序** | **应用程序**。
- en: Go to the `https://localhost:8443/logout/saml2/slo`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 `https://localhost:8443/logout/saml2/slo`。
- en: Set `https://localhost:8443/saml2/service-provider-metadata/okta`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `https://localhost:8443/saml2/service-provider-metadata/okta`。
- en: Click the `local.crt` file you created in the previous steps, and click **Upload
    Certificate**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您在之前步骤中创建的 `local.crt` 文件，然后点击 **上传证书**。
- en: Click **Next**.![Figure 10.10 – Single Logout configuration with OKTA](img/B21757_10_10.jpg)
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击 **下一步**。![图10.10 – 与OKTA的单点登出配置](img/B21757_10_10.jpg)
- en: Figure 10.10 – Single Logout configuration with OKTA
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – 与OKTA的单点登出配置
- en: Click **Finish**.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成**。
- en: Restart the Spring Boot application. You can now log out from OKTA as well.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Spring Boot应用程序。您现在也可以从OKTA登出。
- en: Important note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: As the SAML 2.0 specification permits multiple values for each attribute, you
    have the option to use either `getAttribute` to retrieve the list of attributes
    or `getFirstAttribute` to obtain the first value in the list. The `getFirstAttribute`
    method proves particularly useful when it’s known that there is only one value.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于SAML 2.0规范允许每个属性有多个值，您可以选择使用 `getAttribute` 来检索属性列表，或者使用 `getFirstAttribute`
    来获取列表中的第一个值。当已知只有一个值时，`getFirstAttribute` 方法特别有用。
- en: Your code should now look like that in `chapter10.06-calendar`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您的代码现在应该看起来像 `chapter10.06-calendar` 中的那样。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter delved into the realm of **SAML**, a robust standard for achieving
    SSO in modern identity management. Beginning with an introduction to SAML’s foundational
    principles, it progressed to practical implementation, guiding developers through
    the seamless integration of **SAML 2** Login within the Spring Security framework.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了**SAML**领域，这是现代身份管理中实现SSO的强大标准。从介绍SAML的基础原则开始，它逐步过渡到实际实施，引导开发者在Spring
    Security框架中无缝集成**SAML 2**登录。
- en: Key highlights included the practical steps involved in adding a **SAML** application
    on OKTA, a widely used IdP, and the creation of user principals within OKTA for
    streamlined user management. Essential dependencies for successful **SAML** integration
    were outlined, emphasizing the crucial tools and libraries for building a resilient
    authentication system.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 关键亮点包括在广泛使用的IdP OKTA上添加**SAML**应用程序的实用步骤，以及在OKTA中创建用户主体以简化用户管理。概述了成功**SAML**集成所必需的关键依赖项，强调了构建弹性认证系统所需的关键工具和库。
- en: You have gained insights into critical configuration steps, such as specifying
    IdP metadata to ensure a standardized and secure communication channel. The chapter
    explored the retrieval of the **SAML 2** authenticated principal and parsing **SAML
    2** metadata, and producing **SAML 2** metadata, providing a comprehensive understanding
    of the technical intricacies involved.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解了关键配置步骤的见解，例如指定IdP元数据以确保标准化和安全的通信通道。本章探讨了检索**SAML 2**认证主体和解析**SAML 2**元数据，以及生成**SAML
    2**元数据，从而全面理解涉及的技术复杂性。
- en: Flexibility in `RelyingPartyRegistration`, overriding `RelyingPartyRegistrationRepository`
    for advanced customization. Practical guidance was provided on customizing authorities
    within Spring Security SAML, enabling the effective management of user roles.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在`RelyingPartyRegistration`中具有灵活性，可以通过覆盖`RelyingPartyRegistrationRepository`进行高级定制。本章提供了在Spring
    Security SAML中自定义权限的实用指南，以实现用户角色的有效管理。
- en: This chapter concluded by addressing the crucial aspect of Single Logout, showcasing
    how SAML supports a standardized mechanism for logging out users across various
    services. In essence, this chapter equips you with the knowledge and practical
    insights needed to implement SAML-based authentication, fostering a secure and
    seamless identity management experience in your applications.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过解决单点登出的关键方面结束，展示了SAML如何支持跨各种服务的标准化用户登出机制。本质上，本章为您提供了实施基于SAML的认证所需的知识和实践见解，有助于在您的应用程序中实现安全且无缝的身份管理体验。
- en: In the next chapter, we’ll learn more about Spring Security authorization.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于Spring Security授权的内容。
- en: 'Part 4: Enhancing Authorization Mechanisms'
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：增强授权机制
- en: This part delves into fine-grained access control, exploring various methods
    to implement precise authorization that may impact specific sections of an application
    page. Initially, we examine two approaches for implementing fine-grained authorization.
    Subsequently, we explore Spring Security’s methodology for securing the business
    tier through method annotation, utilizing interface-based proxies for **Aspect-Oriented
    Programming** (**AOP**). Furthermore, we investigate annotation-based security’s
    capability for role-based filtering on data collections. Lastly, we compare class-based
    proxies with interface-based proxies.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分深入探讨了细粒度访问控制，探讨了实现精确授权的各种方法，这可能影响应用程序页面的特定部分。最初，我们检查了两种实现细粒度授权的方法。随后，我们探讨了Spring
    Security通过方法注解来保护业务层的方法，利用基于接口的代理来实现**面向切面编程**（**AOP**）。此外，我们还研究了基于注解的安全在数据集合基于角色过滤方面的能力。最后，我们比较了基于类的代理与基于接口的代理。
- en: Within this section, we delve into the intricate topic of **Access Control Lists**
    (**ACLs**), offering a comprehensive overview of their potential for domain object
    instance-level authorization. Spring Security offers a robust, albeit complex,
    ACL module that effectively caters to the needs of small to medium-sized implementations.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们深入探讨了复杂的主题——**访问控制列表**（**ACLs**），提供了它们在域对象实例级授权方面的潜力概述。Spring Security提供了一个强大但复杂的ACL模块，有效地满足了从小型到中型实施的需求。
- en: Moreover, we undertake the task of crafting custom implementations for Spring
    Security’s essential authorization APIs. This hands-on approach enables a deeper
    understanding of Spring Security’s authorization architecture.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还承担了为Spring Security的核心授权API定制实现的任务。这种动手实践的方法有助于更深入地理解Spring Security的授权架构。
- en: 'This part has the following chapters:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 11*](B21757_11.xhtml#_idTextAnchor332), *Fine-Grained Access Control*'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B21757_11.xhtml#_idTextAnchor332), *细粒度访问控制*'
- en: '[*Chapter 12*](B21757_12.xhtml#_idTextAnchor375), *Access Control Lists*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B21757_12.xhtml#_idTextAnchor375), *访问控制列表*'
- en: '[*Chapter 13*](B21757_13.xhtml#_idTextAnchor415), *Custom Authorization*'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B21757_13.xhtml#_idTextAnchor415), *自定义授权*'
