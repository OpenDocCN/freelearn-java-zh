- en: '*Chapter 12*: Java GUI Programming'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 12 章*：Java GUI 编程'
- en: This chapter provides an overview of Java **graphical user interface** (**GUI**)
    technologies and demonstrates how the JavaFX kit can be used to create a GUI application.
    The latest versions of JavaFX not only provide many helpful features but also
    allow for the preserving and embedding of legacy implementations and styles.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了 Java **图形用户界面**（**GUI**）技术的概述，并演示了如何使用 JavaFX 工具包创建 GUI 应用程序。JavaFX 的最新版本不仅提供了许多有用的功能，还允许保留和嵌入旧版实现和样式。
- en: In a certain respect, the GUI is the most important part of an application.
    It directly interacts with the user. If the GUI is inconvenient, unappealing to
    the eye, or confusing, even the best backend solution might not persuade the user
    to use this application. By contrast, a well-thought-out, intuitive, and nicely
    designed GUI helps to retain users, even if the application does not do the job
    as well as its competitors.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，GUI 是应用程序最重要的部分。它直接与用户交互。如果 GUI 不方便、不吸引人或不清晰，即使是最优秀的后端解决方案也可能无法说服用户使用这个应用程序。相比之下，一个经过深思熟虑、直观且设计精良的
    GUI 有助于保留用户，即使应用程序的工作效果不如竞争对手。
- en: 'The agenda of the chapter requires us to cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的议程要求我们涵盖以下主题：
- en: Java GUI technologies
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java GUI 技术概述
- en: JavaFX fundamentals
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaFX 基础知识
- en: HelloWorld with JavaFX
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JavaFX 的 HelloWorld
- en: Control elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制元素
- en: Charts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图表
- en: Applying CSS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用 CSS
- en: Using FXML
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FXML
- en: Embedding HTML
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入 HTML
- en: Playing media
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放媒体
- en: Adding effects
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加效果
- en: By the end of the chapter, you will be able to create a user interface using
    Java GUI technologies, as well as creating and using a user interface project
    as a standalone application.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够使用 Java GUI 技术创建用户界面，以及创建和使用用户界面项目作为独立应用程序。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To be able to execute the code examples provided in this chapter, you will
    need the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够执行本章提供的代码示例，您需要以下内容：
- en: A computer with a Microsoft Windows, Apple macOS, or Linux operating system
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一台装有 Microsoft Windows、Apple macOS 或 Linux 操作系统的计算机
- en: Java SE version 17 or later
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 版本 17 或更高版本
- en: An IDE or code editor of your choice
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的 IDE 或代码编辑器
- en: The instructions for how to set up Java SE and the IntelliJ IDEA editor were
    provided in [*Chapter 1*](B18388_01_ePub.xhtml#_idTextAnchor015), *Getting Started
    with Java 17*. The files with the code examples for this chapter are available
    on GitHub at [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    in the `examples/src/main/java/com/packt/learnjava/ch12_gui` folder and in the
    `gui` folder, which contains a standalone GUI application.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如何设置 Java SE 和 IntelliJ IDEA 编辑器的说明在 [*第 1 章*](B18388_01_ePub.xhtml#_idTextAnchor015)，“开始使用
    Java 17”中提供。本章的代码示例文件可在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)，在
    `examples/src/main/java/com/packt/learnjava/ch12_gui` 文件夹和 `gui` 文件夹中，其中包含一个独立的
    GUI 应用程序。
- en: Java GUI technologies
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java GUI 技术概述
- en: 'The name **Java Foundation Classes** (**JFC**) may be a source of much confusion.
    It implies *the classes that are at the foundation of Java*, while, in fact, JFC
    includes only classes and interfaces related to the GUI. To be precise, JFC is
    a collection of three frameworks: the **Abstract Window Toolkit** (**AWT**), Swing,
    and Java 2D.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java 基础类**（**JFC**）的名称可能是一个引起许多混淆的来源。它暗示了 *Java 的基础类*，而实际上，JFC 只包括与 GUI 相关的类和接口。为了更精确，JFC
    是三个框架的集合：**抽象窗口工具包**（**AWT**）、Swing 和 Java 2D。'
- en: JFC is part of **Java Class Library** (**JCL**), although the name JFC came
    into being only in 1997, while AWT was part of JCL from the very beginning. At
    that time, Netscape developed a GUI library called **Internet Foundation Classes**
    (**IFC**), and Microsoft created **Application Foundation Classes** (**AFC**)
    for GUI development, too. So, when Sun Microsystems and Netscape decided to form
    a new GUI library, they inherited the word *Foundation* and created JFC. The Swing
    framework took over the Java GUI programming from AWT and was successfully used
    for almost two decades.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: JFC 是 **Java 类库**（**JCL**）的一部分，尽管 JFC 的名称直到 1997 年才出现，而 AWT 从一开始就是 JCL 的一部分。当时，Netscape
    开发了一个名为 **Internet Foundation Classes**（**IFC**）的 GUI 库，Microsoft 也为 GUI 开发创建了
    **Application Foundation Classes**（**AFC**）。因此，当 Sun Microsystems 和 Netscape 决定创建一个新的
    GUI 库时，他们继承了单词 *Foundation* 并创建了 JFC。Swing 框架接管了从 AWT 到 Java GUI 编程，并且成功使用了近二十年。
- en: A new GUI programming toolkit, JavaFX, was added to JCL in Java 8\. It was removed
    from JCL in Java 11, and since then, has resided as an open source project supported
    by the company Gluon as a downloadable module in addition to the JDK. JavaFX uses
    a somewhat different approach to GUI programming than AWT and Swing. It presents
    a more consistent and simpler design and has a good chance of being a winning
    Java GUI-programming toolkit.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 8中，Java控制台库（JCL）中添加了一个新的GUI编程工具包，JavaFX。它在Java 11中被从JCL中移除，从那时起，它作为由公司Gluon支持的开源项目的一部分，以可下载模块的形式存在，除了JDK。JavaFX在GUI编程方面采用了与AWT和Swing略有不同的方法。它提供了一个更一致和更简单的设计，并且有很大的机会成为获胜的Java
    GUI编程工具包。
- en: JavaFX fundamentals
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaFX基础知识
- en: Cities such as New York, London, Paris, and Moscow have many theaters, and people
    who live there cannot avoid hearing about new plays and productions released almost
    every week. It makes them inevitably familiar with theater terminology, in which
    the terms *stage*, *scene*, and *event* are probably used most often. These three
    terms are at the foundation of a JavaFX application structure, too.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约、伦敦、巴黎和莫斯科等城市拥有众多剧院，居住在那里的人们不可避免地会听到几乎每周都会发布的新剧本和制作。这使得他们不可避免地熟悉了剧院术语，其中*舞台*、*场景*和*事件*这些术语可能被使用得最为频繁。这三个术语也是JavaFX应用程序结构的基础。
- en: The top-level container in JavaFX that holds all other components is represented
    by the `javafx.stage.Stage` class. So, you can say that, in the JavaFX application,
    everything happens on a *stage*. From a user perspective, it is a display area
    or window where all the controls and components perform their actions (like actors
    in a theater). And, similar to the actors in a theater, they do it in the context
    of a *scene*, represented by the `javafx.scene.Scene` class. So, a JavaFX application,
    like a play in a theater, is composed of `Scene` objects presented inside the
    `Stage` object one at a time. Each `Scene` object contains a graph that defines
    the positions of the scene actors (called `javafx.scene.Node`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX中代表所有其他组件的最高级容器是由`javafx.stage.Stage`类表示的。因此，可以说在JavaFX应用程序中，所有事情都是在*舞台*上发生的。从用户的角度来看，这是一个显示区域或窗口，所有控件和组件都在这里执行它们的动作（就像剧院中的演员一样）。而且，与剧院中的演员类似，它们在*场景*的上下文中执行，由`javafx.scene.Scene`类表示。因此，JavaFX应用程序，就像剧院中的戏剧一样，是由在`Stage`对象内部一次呈现一个的`Scene`对象组成的。每个`Scene`对象包含一个图，定义了场景演员（称为`javafx.scene.Node`）的位置。
- en: 'Some of the nodes’ controls are associated with *events*: a button clicked
    or a checkbox checked, for example. These events can be processed by the event
    handler associated with the corresponding control element.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一些节点控件与*事件*相关联：例如，按钮点击或复选框勾选。这些事件可以通过与相应控件元素关联的事件处理器进行处理。
- en: 'The main class of a JavaFX application has to extend the abstract `java.application.Application`
    class, which has several life cycle methods. We list them in the sequence of the
    invocation: `launch()`, `init()`, `notifyPreloader()`, `start()`, and `stop()`.
    It looks like quite a few to remember. But, most probably, you need to implement
    only one method, `start()`, where the actual GUI is constructed and executed.
    Nevertheless, we will review all the life cycle methods just for completeness:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX应用程序的主要类必须扩展抽象的`java.application.Application`类，该类有几个生命周期方法。我们按调用顺序列出它们：`launch()`、`init()`、`notifyPreloader()`、`start()`和`stop()`。看起来有很多要记住。但，很可能是你只需要实现一个方法，即`start()`，在这里实际构建和执行GUI。尽管如此，我们仍将回顾所有生命周期方法，以确保完整性：
- en: '`static void launch(Class<? extends Application> appClass, String... args)`:
    This launches the application and is often called the `main` method; it does not
    return until `Platform.exit()` is called or all the application windows close.
    The `appClass` parameter must be a public subclass of the `Application` class
    with a public no-argument constructor.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static void launch(Class<? extends Application> appClass, String... args)`:
    这将启动应用程序，通常被称为`main`方法；它不会返回，直到调用`Platform.exit()`或所有应用程序窗口关闭。`appClass`参数必须是一个具有公共无参数构造函数的`Application`类的公共子类。'
- en: '`static void launch(String... args)`: The same as the preceding method, assuming
    that the public subclass of the `Application` class is the immediately enclosing
    class. This is the method most often used to launch the JavaFX application; we
    are going to use it in our examples, too.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static void launch(String... args)`: 与前面的方法相同，假设`Application`类的公共子类是立即封装的类。这是启动JavaFX应用程序最常用的方法；我们也将要在我们的示例中使用它。'
- en: '`void init()`: This method is called after the `Application` class is loaded;
    it is typically used for some kind of resource initialization. The default implementation
    does nothing, and we are not going to use it.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void init()`: 在`Application`类加载后调用此方法；通常用于某种类型的资源初始化。默认实现不执行任何操作，我们也不会使用它。'
- en: '`void notifyPreloader(Preloader.PreloaderNotification info)`: This can be used
    to show progress when the initialization takes a long time; we are not going to
    use it.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void notifyPreloader(Preloader.PreloaderNotification info)`: 当初始化耗时较长时，可以使用此方法来显示进度；我们不会使用它。'
- en: '`abstract void start(Stage primaryStage)`: The method we are going to implement.
    It is called after the `init()` method returns, and after the system is ready
    to do the main job. The `primaryStage` parameter is the stage where the application
    is going to present its scenes.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`abstract void start(Stage primaryStage)`: 我们将要实现的方法。在`init()`方法返回后，以及系统准备好执行主要工作后调用。`primaryStage`参数是应用程序将要展示其场景的阶段。'
- en: '`void stop()`: This is called when the application should stop, and can be
    used to release the resources. The default implementation does nothing, and we
    are not going to use it.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`void stop()`: 当应用程序应该停止时调用此方法，可以用来释放资源。默认实现不执行任何操作，我们也不会使用它。'
- en: The API of the JavaFX toolkit can be found online ([https://openjfx.io/javadoc/18//](https://openjfx.io/javadoc/18//)).
    As of the time of writing, the latest version is *18*. Oracle provides extensive
    documentation and code examples, too ([https://docs.oracle.com/javafx/2//](https://docs.oracle.com/javafx/2//)).
    The documentation includes the description and user manual of Scene Builder (a
    development tool that provides a visual layout environment and lets you quickly
    design a user interface for the JavaFX application without writing any code).
    This tool may be useful for creating a complex and intricate GUI, and many people
    use it all the time. In this book though, we will concentrate on JavaFX code writing
    without using this tool.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX工具包的API可以在网上找到（[https://openjfx.io/javadoc/18//](https://openjfx.io/javadoc/18/)）。截至写作时，最新版本是*18*。Oracle还提供了广泛的文档和代码示例（[https://docs.oracle.com/javafx/2//](https://docs.oracle.com/javafx/2/)）。文档包括Scene
    Builder（一个提供可视化布局环境并允许您快速为JavaFX应用程序设计用户界面的开发工具）的描述和用户手册。这个工具对于创建复杂和精细的GUI可能很有用，许多人一直在使用它。然而，在这本书中，我们将专注于不使用此工具的JavaFX代码编写。
- en: 'To be able to do it, the following are the necessary steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够做到这一点，以下是一些必要的步骤：
- en: 'Add the following dependency to the `pom.xml` file:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到`pom.xml`文件中：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Download the JavaFX SDK for your OS from [https://gluonhq.com/products/javafx/](https://gluonhq.com/products/javafx/)
    (the `openjfx-18_osx-x64_bin-sdk.zip` file, as of the time of writing) and unzip
    it in any directory.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[https://gluonhq.com/products/javafx/](https://gluonhq.com/products/javafx/)（截至写作时的`openjfx-18_osx-x64_bin-sdk.zip`文件）下载适用于您的操作系统的JavaFX
    SDK，并将其解压缩到任何目录中。
- en: 'Assuming you have unzipped the JavaFX SDK into the `/path/javafx-sdk/` folder,
    add the following options to the Java command, which will launch your JavaFX application
    on the Linux platform:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您已将JavaFX SDK解压缩到`/path/javafx-sdk/`文件夹中，请将以下选项添加到Java命令中，这将启动Linux平台上的JavaFX应用程序：
- en: '[PRE1]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Windows, the same options look as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上，这些选项看起来如下：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`/path/JavaFX/` and `C:\path\JavaFX\` are the placeholders that you need to
    substitute with the actual path to the folder that contains the JavaFX SDK.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`/path/JavaFX/`和`C:\path\JavaFX\`是您需要用包含JavaFX SDK的文件夹的实际路径替换的占位符。'
- en: 'Assuming that the application’s main class is `HelloWorld`, in the case of
    IntelliJ, enter the preceding options into the `VM options` field, as follows
    (the example is for Linux):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 假设应用程序的主类是`HelloWorld`，在IntelliJ中，将前面的选项输入到`VM options`字段中，如下所示（示例为Linux）：
- en: '![](img/B18388_Figure_12.1.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.1.jpg)'
- en: These options have to be added to `Run/Debug Configurations` of the `HelloWorld`,
    `BlendEffect`, and `OtherEffects` classes of the `ch12_gui` package of the source
    code. If you prefer a different IDE or have a different OS, you can find recommendations
    on how to set it in the `openjfx.io` documentation ([https://openjfx.io/openjfx-docs](https://openjfx.io/openjfx-docs)).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项必须添加到源代码中`ch12_gui`包的`HelloWorld`、`BlendEffect`和`OtherEffects`类的`Run/Debug
    Configurations`中。如果您更喜欢不同的IDE或使用不同的操作系统，您可以在`openjfx.io`文档中找到如何设置的推荐方法（[https://openjfx.io/openjfx-docs](https://openjfx.io/openjfx-docs)）。
- en: 'To run the `HelloWorld`, `BlendEffect`, and `OtherEffects` classes from the
    command line, use the following commands on the Linux platform in the project
    root directory (where the `pom.xml` file is located):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要从命令行运行 `HelloWorld`、`BlendEffect` 和 `OtherEffects` 类，请在 Linux 平台上的项目根目录（`pom.xml`
    文件所在位置）使用以下命令：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'On Windows, the same commands look as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，相同的命令如下所示：
- en: '[PRE4]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Each of the `HelloWorld`, `BlendEffect`, and `OtherEffects` classes has two
    `start()` methods: `start1()` and `start2()`. After you run the class once, rename
    `start()` as `start1()`, and `start1()` as `start()`, and run the preceding commands
    again. Then, rename `start()` as `start2()`, and `start2()` as `start()`, and
    run the previous commands yet again. And so on, until all the `start()` methods
    are executed. This way you will see the results of all the examples in this chapter.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWorld`、`BlendEffect` 和 `OtherEffects` 每个类都有两个 `start()` 方法：`start1()`
    和 `start2()`。运行该类一次后，将 `start()` 重命名为 `start1()`，将 `start1()` 重命名为 `start()`，然后再次运行前面的命令。然后，将
    `start()` 重命名为 `start2()`，将 `start2()` 重命名为 `start()`，再次运行前面的命令。依此类推，直到所有 `start()`
    方法都执行完毕。这样你将看到本章中所有示例的结果。'
- en: 'This concludes the high-level presentation of JavaFX. With that, we move to
    the most exciting (for any programmer) part: writing code.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了 JavaFX 的高级介绍。有了这个，我们将转向最激动人心（对于任何程序员来说）的部分：编写代码。
- en: HelloWorld with JavaFX
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HelloWorld with JavaFX
- en: 'Here is the `HelloWorld` JavaFX application that shows the `Hello, World!`
    and `Exit` text:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是显示“Hello, World!”和“退出”文本的 `HelloWorld` JavaFX 应用程序：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: As you can see, the application is launched by calling the `Application.launch(String...
    args)` static method. The `start(Stage primaryStage)` method creates a `Text`
    node with the message `Button`, with the text `Exit` located at the absolute position
    155 (horizontally) and 80 (vertically). The action, assigned to `Button` (when
    it is clicked), prints `Platform.exit()` method. These two nodes are added as
    children to the layout pane, which allows absolute positioning.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，应用程序是通过调用 `Application.launch(String... args)` 静态方法启动的。`start(Stage primaryStage)`
    方法创建了一个带有消息“按钮”的 `Text` 节点，文本“退出”位于绝对位置 155（水平）和 80（垂直）。当点击 `Button`（当它被点击时）时，分配的动作将打印
    `Platform.exit()` 方法。这两个节点被添加为布局面板的子节点，允许绝对定位。
- en: 'The `Stage` object is assigned the title of `The primary stage (top-level container)`.
    It is also assigned an action on clicking the close-the-window symbol (the **x**
    button) in the window’s upper corner: top left on the Linux system and top right
    on the Windows system.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`Stage` 对象被分配了标题“主舞台（顶级容器）”。它还被分配了一个在窗口右上角点击关闭窗口符号（Linux 系统的左上角和 Windows 系统的右上角）的动作。'
- en: While creating actions, we have used a Lambda expression, which we are going
    to discuss in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281), *Functional
    Programming*.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建动作时，我们使用了 Lambda 表达式，我们将在[*第13章*](B18388_13_ePub.xhtml#_idTextAnchor281)“函数式编程”中讨论。
- en: The created layout pane is set on a `Scene` object. The scene size is set to
    350 pixels horizontally and 150 pixels vertically. The `Scene` object is placed
    on the stage. Then, the stage is displayed by calling the `show()` method.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的布局面板被设置在 `Scene` 对象上。场景大小设置为水平 350 像素和垂直 150 像素。`Scene` 对象被放置在舞台上。然后，通过调用
    `show()` 方法显示舞台。
- en: 'If we run the preceding application (the `start()` method of the `HellowWorld`
    class), the following window will pop up:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的应用程序（`HellowWorld` 类的 `start()` 方法），将弹出以下窗口：
- en: '![](img/B18388_Figure_12.2.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.2.jpg)'
- en: 'Clicking on the **Exit** button results in the expected message being displayed:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **退出** 按钮将显示预期的消息：
- en: '![](img/B18388_Figure_12.3.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.3.jpg)'
- en: 'But, if you need to do something else after the `stop()` method to the `HelloWorld`
    class. In this example it looks as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果你需要在 `HelloWorld` 类的 `stop()` 方法之后执行其他操作。在这个例子中看起来如下所示：
- en: '[PRE37]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'If you click the **x** button or the **Exit** button, the display will show
    the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 **x** 按钮或 **退出** 按钮，显示将如下所示：
- en: '![](img/B18388_Figure_12.4.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.4.jpg)'
- en: This example gives you a sense of how JavaFX works. From now on, while reviewing
    the JavaFX capabilities, we will present only the code in the `start()` method.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子让你对 JavaFX 的工作方式有一个感觉。从现在开始，在回顾 JavaFX 功能时，我们只会在 `start()` 方法中展示代码。
- en: The toolkit has a huge number of packages, each with many classes, and each
    class having many methods. We won’t be able to discuss all of them. Instead, we
    are going to present just an overview of all the major areas of the JavaFX functionality
    in the most simple and straightforward way we can.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: Control elements
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `javafx.scene.control` package ([https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html)).
    There are more than 80 of them, including a button, text field, checkbox, label,
    menu, progress bar, and scroll bar, to name a few. As we have mentioned already,
    each control element is a subclass of `Node` that has more than 200 methods. So,
    you can imagine how rich and fine-tuned a GUI can be when built using JavaFX.
    However, the scope of this book allows us to cover only a few elements and their
    methods.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: We have already implemented a button in the example in the preceding section.
    Let’s now use a label and a text field to create a simple form with input fields
    (first name, last name, and age) and a `start()` method in the `HelloWorld` class
    (rename the previous `start()` method `start1()`, and rename the `start2()` method
    `start()`).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let’s create controls:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'As you can guess, the text will be used as the form instructions. The rest
    is quite straightforward and looks very similar to what we have seen in the `HelloWorld`
    example. `action()` is a function implemented as the following method:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This function accepts three parameters (the `javafx.scene.control.TextField`
    objects), then gets the submitted input values and just prints them. The code
    makes sure that there are always some default values available for printing, and
    that entering a non-numeric value of `age` does not break the application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'With the controls and action in place, we then put them into a grid layout
    using the `javafx.scene.layout.GridPane` class:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The `GridPane` layout pane has rows and columns that form cells in which the
    nodes can be set. Nodes can span columns and rows. The `setAlignment()` method
    sets the position of the grid to the center of a scene (the default position is
    the top left of a scene). The `setHgap()` and `setVgap()` methods set the spacing
    (in pixels) between the columns (horizontally) and rows (vertically). The `setPadding()`
    method adds some space along the borders of the grid pane. The `Insets()` object
    sets the values (in pixels) in the order of top, right, bottom, and left.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to place the created nodes in the corresponding cells (arranged
    in two columns):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The `add()` method accepts either three or five parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The node, the column index, and the row index
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The node, the column index, the row index, how many columns to span, and how
    many rows to span
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The columns and rows indices start from `0`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: The `setHalignment()` method sets the position of the node in the cell. The
    `HPos` enum has values `LEFT`, `RIGHT`, and `CENTER`. The `addRow(int i, Node...
    nodes)` method accepts the row index and the varargs of nodes. We use it to place
    the `Label` and `TextField` objects.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`setHalignment()` 方法设置节点在单元格中的位置。`HPos` 枚举有 `LEFT`、`RIGHT` 和 `CENTER` 三个值。`addRow(int
    i, Node... nodes)` 方法接受行索引和节点变量的参数。我们使用它来放置 `Label` 和 `TextField` 对象。'
- en: 'The rest of the `start()` method is very similar to the `HelloWorld` example
    (only the title and size have changed):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`start()` 方法的其余部分与 `HelloWorld` 示例非常相似（只有标题和大小有所变化）：'
- en: '[PRE72]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'If we run the newly implemented `start()` method, the result will be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行新实现的 `start()` 方法，结果将如下所示：
- en: '![](img/B18388_Figure_12.5.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.5.jpg)'
- en: 'We can fill the data as follows, for example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以这样填充数据，例如：
- en: '![](img/B18388_Figure_12.6.jpg)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.6.jpg)'
- en: 'After you click the **Submit** button, the following message is displayed and
    the application exits:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在您点击 **提交** 按钮后，将显示以下消息，并且应用程序退出：
- en: '![](img/B18388_Figure_12.7.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.7.jpg)'
- en: 'To help visualize the layout, especially in the case of a more complex design,
    you can use the `setGridLinesVisible(boolean v)` grid method to make the grid
    lines visible. It helps to see how the cells are aligned. We can add (uncomment)
    the following line to our example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助可视化布局，特别是在更复杂的设计中，您可以使用 `setGridLinesVisible(boolean v)` 网格方法使网格线可见。这有助于看到单元格是如何对齐的。我们可以在我们的示例中添加（取消注释）以下行：
- en: '[PRE77]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'We run it again, and the result will be as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次运行它，结果如下：
- en: '![](img/B18388_Figure_12.8.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.8.jpg)'
- en: As you can see, the layout is now outlined explicitly, which helps us to visualize
    the design.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，布局现在被明确地勾勒出来，这有助于我们可视化设计。
- en: The `javafx.scene.layout` package includes 24 layout classes such as `Pane`
    (we saw it in the `HelloWorld` example), `StackPane` (allows us to overlay nodes),
    `FlowPane` (allows the positions of nodes to flow as the size of the window changes),
    and `AnchorPane` (preserves the nodes’ position relative to their anchor point),
    to name a few. The `VBox` layout will be demonstrated in the next section, *Charts*.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`javafx.scene.layout` 包包括 24 个布局类，例如 `Pane`（我们在 `HelloWorld` 示例中见过）、`StackPane`（允许我们叠加节点）、`FlowPane`（允许节点位置随窗口大小变化而流动）、`AnchorPane`（保持节点相对于其锚点的位置），等等。下一节将演示
    `VBox` 布局，*图表*。'
- en: Charts
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图表
- en: 'JavaFX provides the following chart components for data visualization in the
    `javafx.scene.chart` package:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 在 `javafx.scene.chart` 包中提供了以下图表组件用于数据可视化：
- en: '`LineChart`: Adds a line between the data points in a series. Typically used
    to present the trends over time.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LineChart`：在系列中的数据点之间添加线条。通常用于展示随时间的变化趋势。'
- en: '`AreaChart`: Similar to `LineChart`, but fills the area between the line that
    connects the data points and the axis. Typically used for comparing cumulated
    totals over time.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AreaChart`：与 `LineChart` 类似，但填充连接数据点和坐标轴之间的区域。通常用于比较随时间累积的总数。'
- en: '`BarChart`: Presents data as rectangular bars. Used for visualization of discrete
    data.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BarChart`：以矩形条的形式展示数据。用于离散数据的可视化。'
- en: '`PieChart`: Presents a circle divided into segments (filled with different
    colors), each segment representing a value as a proportion of the total. We will
    demonstrate it in this section.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PieChart`：将圆形分成几个部分（用不同颜色填充），每个部分代表总值的比例。我们将在本节中演示它。'
- en: '`BubbleChart`: Presents data as two-dimensional oval shapes called bubbles,
    which allow presenting three parameters.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BubbleChart`：以二维椭圆形形状（称为气泡）展示数据，允许展示三个参数。'
- en: '`ScatterChart`: Presents the data points in a series as is. Useful to identify
    the presence of a clustering (data correlation).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ScatterChart`：以系列中的数据点原样展示。有助于识别是否存在聚类（数据相关性）。'
- en: 'The following example (the `start3()` method of the `HellowWorld` class) demonstrates
    how the result of testing can be presented as a pie chart. Each segment represents
    the number of tests succeeded, failed, or ignored:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例（`HellowWorld` 类的 `start3()` 方法）演示了如何将测试结果以饼图的形式展示。每个部分代表测试成功、失败或忽略的数量：
- en: '[PRE78]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: We have created two nodes—`Text` and `PieChart`—and placed them in the cells
    of the `VBox` layout, which sets them in a column, one above another. We have
    added the padding of 10 pixels around the edges of the `VBox` pane. Notice that
    VBox extends the `Node` and `Pane` classes, as other panes do, too. We have also
    positioned the pane in the center of the scene using the `setAlignment()` method.
    The rest is the same as all other previous examples, except the scene title and
    size.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个节点——“Text”和“PieChart”，并将它们放置在“VBox”布局的单元格中，使它们按列排列，一个在上一个下面。我们在“VBox”面板的边缘添加了10像素的填充。请注意，VBox扩展了“Node”和“Pane”类，就像其他面板一样。我们还使用`setAlignment()`方法将面板定位在场景的中心。其余的与所有其他先前的示例相同，只是场景标题和大小不同。
- en: 'If we run this example (rename the previous `start()` method `start2()`, and
    rename the `start3()` method `start()`), the result will be as follows:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个示例（将之前的`start()`方法重命名为`start2()`，将`start3()`方法重命名为`start()`），结果将如下所示：
- en: '![](img/B18388_Figure_12.9.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18388_Figure_12.9.jpg)'
- en: The `PieChart` class, as well as any other chart, has several other methods
    that can be useful for presenting more complex and dynamic data in a user-friendly
    manner.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`PieChart`类以及任何其他图表都有几个其他方法，这些方法可以用于以用户友好的方式展示更复杂和动态的数据。'
- en: Now, let’s discuss how you can enrich the look and feel of your application
    by using the power of **Cascading Style Sheets** (**CSS**).
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论如何通过使用**层叠样式表**（**CSS**）的力量来丰富您应用程序的外观和感觉。
- en: Applying CSS
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用CSS
- en: 'By default, JavaFX uses the style sheet that comes with the distribution JAR
    file. To override the default style, you can add a style sheet to the scene using
    the `getStylesheets()` method:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JavaFX使用随分发JAR文件一起提供的样式表。要覆盖默认样式，您可以使用`getStylesheets()`方法将样式表添加到场景中：
- en: '[PRE91]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'The `mystyle.css` file has to be placed in the `src/main/resources` folder.
    Let’s do it, and add the `mystyle.css` file with the following content to the
    `HelloWorld` example:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`mystyle.css`文件必须放置在`src/main/resources`文件夹中。让我们这样做，并将以下内容的`mystyle.css`文件添加到`HelloWorld`示例中：'
- en: '[PRE92]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'As you can see, we would like to style the `Button` node and the `Text` node
    that has a `text-hello` ID in a certain way. We also have to modify the `HelloWorld`
    example by adding the ID to the `Text` element and the style sheet file to the
    scene (the `start4()` method):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们希望以某种方式样式化具有`text-hello` ID的`Button`节点和`Text`节点。我们还必须通过向`Text`元素添加ID并将样式表文件添加到场景中（`start4()`方法）来修改`HelloWorld`示例：
- en: '[PRE101]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'If we run this code (rename the previous `start()` method `start3()` and rename
    the `start4()` method `start()`), the result will be as follows:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行此代码（将之前的`start()`方法重命名为`start3()`，将`start4()`方法重命名为`start()`），结果将如下所示：
- en: '![](img/B18388_Figure_12.10.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18388_Figure_12.10.jpg)'
- en: 'Alternatively, an inline style can be set on any node that will be used to
    overwrite the file style sheet, default or not. Let’s add (uncomment) the following
    line to the latest version of the `HelloWorld` example:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以在任何将要使用的节点上设置内联样式，以覆盖文件样式表，无论是默认的还是其他样式。让我们向最新的`HelloWorld`示例中添加（取消注释）以下行：
- en: '[PRE119]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'If we run the example again, the result will be as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们再次运行这个示例，结果将如下所示：
- en: '![](img/B18388_Figure_12.11.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B18388_Figure_12.11.jpg)'
- en: Look through the JavaFX CSS reference guide ([https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html](https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html))
    to get an idea of the variety and possible options for custom styling.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅JavaFX CSS参考指南（[https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html](https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html)），以了解自定义样式的多样性和可能选项。
- en: Now, let’s discuss an alternative way of building a user interface for an FX
    application, without writing Java code, by using **FX Markup Language** (**FXML**).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论一种为FX应用程序构建用户界面的替代方法，这种方法不需要编写Java代码，而是通过使用**FX标记语言**（**FXML**）。
- en: Using FXML
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用FXML
- en: '**FXML** is an XML-based language that allows building a user interface and
    maintaining it independently of the application (business) logic (as far as the
    look and feel are concerned, or other presentation-related changes). Using FXML,
    you can design a user interface without even writing one line of Java code.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '**FXML**是一种基于XML的语言，允许独立于应用程序（业务）逻辑（就外观和感觉而言，或其他与展示相关的更改）构建用户界面和维护它。使用FXML，您可以在不写一行Java代码的情况下设计用户界面。'
- en: FXML does not have a schema, but its capabilities reflect the API of the JavaFX
    objects used to build a scene. This means you can use the API documentation to
    understand what tags and attributes are allowed in the FXML structure. Most of
    the time, JavaFX classes can be used as tags and their properties as attributes.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: FXML没有模式，但其功能反映了用于构建场景的JavaFX对象的API。这意味着您可以使用API文档来了解在FXML结构中允许哪些标签和属性。大多数时候，JavaFX类可以用作标签，它们的属性可以用作属性。
- en: In addition to the FXML file (the view), the controller (Java class) can be
    used for processing the model and organizing the page flow. The model consists
    of domain objects managed by the view and the controller. It also allows using
    all the power of CSS styling and JavaScript. But, in this book, we will be able
    to demonstrate only the basic FXML capabilities. The rest you can find in the
    FXML introduction ([https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html](https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html))
    and many good tutorials available online.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 除了FXML文件（视图）之外，控制器（Java类）还可以用于处理模型和组织页面流程。模型由视图和控制器管理的域对象组成。它还允许使用CSS样式和JavaScript的全部功能。但是，在这本书中，我们只能演示基本的FXML功能。其余的可以在FXML介绍([https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html](https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html))和许多在线的优秀教程中找到。
- en: 'To demonstrate FXML usage, we are going to reproduce the simple form we created
    in the *Control elements* section and then enhance it by adding the page flow.
    Here’s how our form, with first name, last name, and age, can be expressed in
    FXML:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示FXML的使用，我们将重新创建在*控制元素*部分创建的简单表单，并通过添加页面流程来增强它。以下是我们的表单，包含名字、姓氏和年龄，如何在FXML中表示：
- en: '[PRE120]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: As you can see, it expresses the desired scene structure, familiar to you already,
    and specifies the controller class, `HelloWorldController`, which we are going
    to see shortly. As we have mentioned already, the tags match the class names we
    have been using to construct the same GUI with Java only. We put the preceding
    FXML code (as the `helloWorld.fxml` file) into the `resources` folder.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，它表达了您已经熟悉的期望场景结构，并指定了控制器类`HelloWorldController`，我们很快就会看到。正如我们之前提到的，标签与我们在仅使用Java构建相同GUI时使用的类名相匹配。我们将前面的FXML代码（作为`helloWorld.fxml`文件）放入`resources`文件夹。
- en: 'Now, let’s look at the `start5()` method (rename it `start()`) of the `HelloWorld`
    class that uses the `helloWorld.fxml` file:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`HelloWorld`类的`start5()`方法（将其重命名为`start()`），它使用`helloWorld.fxml`文件：
- en: '[PRE158]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: The `start()` method just loads the `helloWorld.fxml` file and sets the stage,
    the latter being done exactly as in our previous examples.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`start()`方法只是加载`helloWorld.fxml`文件并设置舞台，后者与我们的前例中的操作完全相同。'
- en: 'Now, let’s look at the `HelloWorldController` class. If need be, we could launch
    the application having only the following:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看`HelloWorldController`类。如果需要，我们可以只使用以下内容启动应用程序：
- en: '[PRE174]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: 'The form would be presented, but the button click would do nothing. That is
    what we meant while talking about the user interface development independent of
    the application logic. Notice the `@FXML` annotation. It binds the method and
    properties to the FXML tags using their IDs. Here is how the full controller implementation
    looks:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 表单将会显示，但按钮点击将不会执行任何操作。这就是我们在谈论与应用程序逻辑无关的用户界面开发时的意思。注意`@FXML`注解。它使用它们的ID将方法和属性绑定到FXML标签。以下是完整的控制器实现：
- en: '[PRE179]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: 'It should look very familiar to you for the most part. The only difference
    is that we refer to the fields and their values not directly (as previously),
    but using binding marked with the `@FXML` annotation. If we run the `HelloWorld`
    class now (don’t forget to rename the `start5()` method as `start()`), the page
    appearance and behavior will be exactly the same as we described in the *Control
    elements* section:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大部分内容来说，它应该非常熟悉。唯一的区别是我们不是直接（如之前那样）引用字段及其值，而是使用带有`@FXML`注解的绑定来引用。如果我们现在运行`HelloWorld`类（别忘了将`start5()`方法重命名为`start()`），页面外观和行为将与我们之前在*控制元素*部分描述的完全相同：
- en: '![](img/B18388_Figure_12.12.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.12.jpg)'
- en: 'If the **x** button in the upper corner is clicked, the following output appears
    on the screen:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击了右上角的**x**按钮，屏幕上会显示以下输出：
- en: '![](img/B18388_Figure_12.13.jpg)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.13.jpg)'
- en: 'If the **Submit** button is clicked, the output shows the following message:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击**提交**按钮，输出会显示以下消息：
- en: '![](img/B18388_Figure_12.14.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18388_Figure_12.14.jpg)'
- en: 'Now, let’s look at the standalone GUI application with two pages implemented
    as a separate project in the `gui` folder:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.15.jpg)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, this application consists of the main `GuiApp` class, two `Controller`
    classes, the `User` class, and two pages (the `.fxml` files). Let us start from
    the `.fxml` files. To make it simple, the `page01.fxml` file has almost exactly
    the same content as the `helloWorld.fxml` file described in the preceding section.
    The only difference is that it refers to the `Controller01` class, which has the
    `start()` method implemented exactly as the `start5()` method described previously,
    too. The main `GuiApp` class looks very simple:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: 'As you can see, it just invokes the `start()` method in the `Controller01`
    class, which in turn displays the familiar page to your form:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.16.jpg)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
- en: 'After the form is filled and the `Controller01` class and then passed to the
    `Controller02` class, using the `submitClicked()` method of the `Controller01`
    class:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: 'The `Controller02.goToPage2()` method looks as follows:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: '[PRE251]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: 'The second page just presents the received data. Here is how its FXML looks
    (the `page2.fxml` file):'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: As you can see, the page has only two read-only `Text` fields. The first one
    (with `id="textHello"`) shows the data passed from the previous page. The second
    just shows the message, `Do what has to be done here`. This is not very sophisticated,
    but it demonstrates how the flow of data and pages can be organized.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute the `GuiApp` class, we will see the familiar form and can fill
    it with data:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.17.jpg)'
  id: totrans-421
  prefs: []
  type: TYPE_IMG
- en: 'After we click the **Submit** button, this window will be closed and the new
    one will appear:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.18.jpg)'
  id: totrans-423
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can click the **x** button in the upper-left corner (or in the upper-right
    corner on Windows) and see the following message:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.19.jpg)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
- en: The `stop()` method worked as expected.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: With that, we conclude our presentation of FXML and move to the next topic of
    adding HTML to the JavaFX application.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: Embedding HTML
  id: totrans-428
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add HTML to JavaFX is easy. All you have to do is to use the `javafx.scene.web.WebView`
    class, which provides a window where the added HTML is rendered similar to how
    it happens in a browser. The `WebView` class uses WebKit, the open source browser
    engine, and thus supports full browsing functionality.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: Like all other JavaFX components, the `WebView` class extends the `Node` class
    and can be treated in the Java code as such. In addition, it has its own properties
    and methods that allow adjusting the browser window to the encompassing application
    by setting the window size (maximum, minimum, and preferred height and width),
    font scale, zoom rate, adding CSS, enabling the context (right-click) menu, and
    similar. The `getEngine()` method returns a `javafx.scene.web.WebEngine` object
    associated with it. It provides the ability to load HTML pages, navigate them,
    apply different styles to the loaded pages, access their browsing history and
    the document model, and execute JavaScript.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using the `javafx.scene.web` package, two steps have to be taken first:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to the `pom.xml` file:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE279]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: The version of `javafx-web` typically stays abreast with the Java version, but
    at the time of writing, version 12 of `javafx-web` has not yet been released,
    so we are using the latest available version, *11.0.2*.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `javafx-web` uses the `com.sun.*` packages, which have been removed from
    Java 9 ([https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-F7696E02-A1FB-4D5A-B1F2-89E7007D4096](https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-F7696E02-A1FB-4D5A-B1F2-89E7007D4096)),
    to access the `com.sun.*` packages from Java 9+, set the following VM options
    in addition to `--module-path` and `--add-modules`, described in the JavaFX fundamentals
    section in `Run/Debug Configuration` of the `HtmlWebView` class of the `ch12_gui`
    package (for Windows, change the slash sign to the backward slash):'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE280]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: 'To execute the `HtmlWebView` class from the command line, go to the `examples`
    folder and use the following command for Unix/Linux/macOS systems (don''t forget
    to substitute `/path/JavaFX` with the actual path to the folder that contains
    the JavaFX SDK):'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: 'On Windows, the same command looks as follows (don''t forget to substitute
    `C:\path\JavaFX` with the actual path to the folder that contains the JavaFX SDK):'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: The `HtmlWebView` class contains several `start()` methods too. Rename and execute
    them one by one, as described in the *JavaFX fundamentals* section.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Let’s look at a few examples now. We create a new application, `HtmlWebView`,
    and set VM options for it with the VM options (`--module-path`, `--add-modules`,
    and `--add-exports`) we have described. Now, we can write and execute code that
    uses the `WebView` class.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: 'First, here is how simple HTML can be added to the JavaFX application (the
    `start()` method in the `HtmlWebView` class):'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-453
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: 'The preceding code creates a `WebView` object, gets the `WebEngine` object
    from it, uses the acquired `WebEngine` object to load the HTML, sets the `WebView`
    object on the scene, and configures the stage. The `loadContent()` method accepts
    two strings: the content and its mime type. The content string can be constructed
    in the code or created from reading the `.html` file.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the `HtmlWebView` class, the result will be as follows:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.20.jpg)'
  id: totrans-457
  prefs: []
  type: TYPE_IMG
- en: 'If necessary, you can show other JavaFX nodes along with the `WebView` object
    in the same window. For example, let’s add a `Text` node above the embedded HTML
    (the `start2()` method in the `HtmlWebView` class):'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  id: totrans-459
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-467
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-471
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-472
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-473
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-474
  prefs: []
  type: TYPE_PRE
  zh: '[PRE309]'
- en: 'As you can see, the `WebView` object is not set on the scene directly, but
    on the layout object instead, along with a `txt` object. Then, the layout object
    is set on the scene. The result of the preceding code is as follows:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.21.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
- en: 'With a more complex HTML page, it is possible to load it from the file directly,
    using the `load()` method. To demonstrate this approach, let’s create a `form.html`
    file in the `resources` folder with the following content:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-496
  prefs: []
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-497
  prefs: []
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-506
  prefs: []
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-508
  prefs: []
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-509
  prefs: []
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-510
  prefs: []
  type: TYPE_PRE
  zh: '[PRE342]'
- en: 'This HTML presents a form similar to the one we have created in the *Using
    FXML* section. After the `\formHandler` URI (see the `<form>` HTML tag). To present
    this form inside a JavaFX application, the following code can be used:'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  id: totrans-512
  prefs: []
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-513
  prefs: []
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-514
  prefs: []
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-515
  prefs: []
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE355]'
- en: '[PRE356]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE356]'
- en: '[PRE357]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE357]'
- en: '[PRE358]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE358]'
- en: '[PRE359]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE359]'
- en: '[PRE360]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE360]'
- en: 'As you can see, the difference from our other examples is that we now use the
    `File` class and its `toURI()` method to access the HTML in the `src/main/resources/form.html`
    file directly, without converting the content to a string first. If you run the
    `start3()` method (renamed `start()` ) of the `HtmlWebView` class, the result
    looks as follows:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.22.jpg)'
  id: totrans-531
  prefs: []
  type: TYPE_IMG
- en: This solution is useful when you need to send a request or post data from your
    JavaFX application. But, when the form you would like a user to fill is already
    available on the server, you can just load it from the URL.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s incorporate a Google search in the JavaFX application. We
    can do it by changing the parameter value of the `load()` method to the URL of
    the page we would like to load (the `start4()` method of the `HtmlWebView` class):'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE361]'
- en: '[PRE362]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE362]'
- en: '[PRE363]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE363]'
- en: '[PRE364]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE364]'
- en: '[PRE365]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE365]'
- en: '[PRE366]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE366]'
- en: '[PRE367]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE367]'
- en: '[PRE368]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE368]'
- en: '[PRE369]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE369]'
- en: '[PRE370]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE370]'
- en: '[PRE371]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE371]'
- en: '[PRE372]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE372]'
- en: '[PRE373]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE373]'
- en: '[PRE374]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE374]'
- en: '[PRE375]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE375]'
- en: '[PRE376]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE376]'
- en: 'We have also added a style to the layout in order to increase the font and
    add color to the background, so we can see the outline of the area where the rendered
    HTML is embedded. When we run this example (don’t forget to rename the `start4()`
    method `start()`), the following window appears:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.23.jpg)'
  id: totrans-551
  prefs: []
  type: TYPE_IMG
- en: In this window, you can perform all the aspects of a search that you usually
    access via the browser.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: 'And, as we have mentioned already, you can zoom into the rendered page. For
    example, if we add the `wv.setZoom(1.5)` line to the preceding example, the result
    will be as follows:'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.24.jpg)'
  id: totrans-554
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can set the scale for the font and even the style from a file:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE377]'
- en: '[PRE378]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE378]'
- en: Notice, though, that we set the font scale on the `WebView` object, while we
    set the style in the `WebEngine` object.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also access (and manipulate) the DOM object of the loaded page using
    the `WebEngine` class method, `getDocument()`:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE379]'
- en: 'And, we can access the browsing history, get the current index, and move the
    history backward and forward:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  id: totrans-562
  prefs: []
  type: TYPE_PRE
  zh: '[PRE380]'
- en: '[PRE381]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE381]'
- en: '[PRE382]'
  id: totrans-564
  prefs: []
  type: TYPE_PRE
  zh: '[PRE382]'
- en: '[PRE383]'
  id: totrans-565
  prefs: []
  type: TYPE_PRE
  zh: '[PRE383]'
- en: 'For each entry of the history, we can extract its URL, title, or last-visited
    date:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE384]'
- en: '[PRE385]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE385]'
- en: '[PRE386]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE386]'
- en: '[PRE387]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE387]'
- en: '[PRE388]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE388]'
- en: '[PRE389]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE389]'
- en: '[PRE390]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE390]'
- en: '[PRE391]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE391]'
- en: Read the documentation of the `WebView` and `WebEngine` classes to get more
    ideas about how you can take advantage of their functionality.
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: Playing media
  id: totrans-576
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding an image to a scene of the JavaFX application does not require the `com.sun.*`
    packages, so the `--add-export` VM options listed in the *Embedding HTML* section
    are not needed. But, it doesn’t hurt to have them anyway, so leave the `--add-export`
    options in place if you have added them already.
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: 'An image can be included in a scene using the `javafx.scene.image.Image` and
    `javafx.scene.image.ImageView` classes. To demonstrate how to do it, we are going
    to use the Packt logo, `packt.png`, located in the `resources` folder. Here is
    the code that does it (the `start6()` method of the `HelloWorld` class):'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  id: totrans-579
  prefs: []
  type: TYPE_PRE
  zh: '[PRE392]'
- en: '[PRE393]'
  id: totrans-580
  prefs: []
  type: TYPE_PRE
  zh: '[PRE393]'
- en: '[PRE394]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE394]'
- en: '[PRE395]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE395]'
- en: '[PRE396]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE396]'
- en: '[PRE397]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE397]'
- en: '[PRE398]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE398]'
- en: '[PRE399]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE399]'
- en: '[PRE400]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE400]'
- en: '[PRE401]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE401]'
- en: '[PRE402]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE402]'
- en: '[PRE403]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE403]'
- en: '[PRE404]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE404]'
- en: '[PRE405]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE405]'
- en: '[PRE406]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE406]'
- en: '[PRE407]'
  id: totrans-594
  prefs: []
  type: TYPE_PRE
  zh: '[PRE407]'
- en: '[PRE408]'
  id: totrans-595
  prefs: []
  type: TYPE_PRE
  zh: '[PRE408]'
- en: 'If we run the preceding code, the result will be as follows:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.25.jpg)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
- en: The currently supported image formats are BMP, GIF, JPEG, and PNG. Look through
    the API of the `Image` and `ImageView` classes ([https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/image/package-summary.html](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/image/package-summary.html))
    to learn the many ways an image can be formatted and adjusted as needed.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s see how to use other media files in a JavaFX application. Playing
    an audio or movie file requires the `--add-export` VM options listed in the *Embedding
    HTML* section.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: 'The currently supported encodings are as follows:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: '`AAC`: **Advanced Audio Coding** audio compression'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`H.264/AVC`: H.264/MPEG-4 Part 10 / **AVC** (**Advanced Video Coding**) video
    compression'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MP3`: Raw MPEG-1, 2, and 2.5 audio; layers I, II, and III'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PCM`: Uncompressed, raw audio samples'
  id: totrans-604
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see a more detailed description of the supported protocols, media containers,
    and metadata tags in the API documentation ([https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html](https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html)).
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three classes allow constructing a media player that can be added
    to a scene:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  id: totrans-607
  prefs: []
  type: TYPE_PRE
  zh: '[PRE409]'
- en: '[PRE410]'
  id: totrans-608
  prefs: []
  type: TYPE_PRE
  zh: '[PRE410]'
- en: '[PRE411]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE411]'
- en: 'The `Media` class represents the source of the media. The `MediaPlayer` class
    provides all the methods that control the media playback: `play()`, `stop()`,
    `pause()`, `setVolume()`, and similar. You can also specify the number of times
    that the media should be played. The `MediaView` class extends the `Node` class
    and can be added to a scene. It provides a view of the media being played by the
    media player and is responsible for a media appearance.'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: 'For the demonstration, let’s run the `start5()` method of the `HtmlWebView`
    class, which plays the `jb.mp3` file located in the `resources` folder:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  id: totrans-612
  prefs: []
  type: TYPE_PRE
  zh: '[PRE412]'
- en: '[PRE413]'
  id: totrans-613
  prefs: []
  type: TYPE_PRE
  zh: '[PRE413]'
- en: '[PRE414]'
  id: totrans-614
  prefs: []
  type: TYPE_PRE
  zh: '[PRE414]'
- en: '[PRE415]'
  id: totrans-615
  prefs: []
  type: TYPE_PRE
  zh: '[PRE415]'
- en: '[PRE416]'
  id: totrans-616
  prefs: []
  type: TYPE_PRE
  zh: '[PRE416]'
- en: '[PRE417]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE417]'
- en: '[PRE418]'
  id: totrans-618
  prefs: []
  type: TYPE_PRE
  zh: '[PRE418]'
- en: '[PRE419]'
  id: totrans-619
  prefs: []
  type: TYPE_PRE
  zh: '[PRE419]'
- en: '[PRE420]'
  id: totrans-620
  prefs: []
  type: TYPE_PRE
  zh: '[PRE420]'
- en: '[PRE421]'
  id: totrans-621
  prefs: []
  type: TYPE_PRE
  zh: '[PRE421]'
- en: '[PRE422]'
  id: totrans-622
  prefs: []
  type: TYPE_PRE
  zh: '[PRE422]'
- en: '[PRE423]'
  id: totrans-623
  prefs: []
  type: TYPE_PRE
  zh: '[PRE423]'
- en: '[PRE424]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE424]'
- en: '[PRE425]'
  id: totrans-625
  prefs: []
  type: TYPE_PRE
  zh: '[PRE425]'
- en: '[PRE426]'
  id: totrans-626
  prefs: []
  type: TYPE_PRE
  zh: '[PRE426]'
- en: '[PRE427]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE427]'
- en: '[PRE428]'
  id: totrans-628
  prefs: []
  type: TYPE_PRE
  zh: '[PRE428]'
- en: '[PRE429]'
  id: totrans-629
  prefs: []
  type: TYPE_PRE
  zh: '[PRE429]'
- en: '[PRE430]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE430]'
- en: '[PRE431]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE431]'
- en: '[PRE432]'
  id: totrans-632
  prefs: []
  type: TYPE_PRE
  zh: '[PRE432]'
- en: Notice how a `Media` object is constructed based on the source file. The `MediaPlayer`
    object is constructed based on the `Media` object and then set as a property of
    the `MediaView` class constructor. The `MediaView` object is set on the scene
    along with two `Text` objects. We use the `VBox` object to provide the layout.
    Finally, after the scene is set on the stage and the stage becomes visible (after
    the `show()` method completes), the `play()` method is invoked on the `MediaPlayer`
    object. By default, the media is played once.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute this code, the following window will appear and the `jb.m3` file
    will be played:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.26.jpg)'
  id: totrans-635
  prefs: []
  type: TYPE_IMG
- en: We could add controls to stop, pause, and adjust the volume, but it would require
    much more code, and that would go beyond the scope of this book. You can find
    a guide on how to do it in the Oracle online documentation ([https://docs.oracle.com/javafx/2/media/jfxpub-media.htm](https://docs.oracle.com/javafx/2/media/jfxpub-media.htm)).
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: 'A `sea.mp4` movie file can be played similarly (the `start6()` method of the
    `HtmlWebView` class):'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE433]'
- en: '[PRE434]'
  id: totrans-639
  prefs: []
  type: TYPE_PRE
  zh: '[PRE434]'
- en: '[PRE435]'
  id: totrans-640
  prefs: []
  type: TYPE_PRE
  zh: '[PRE435]'
- en: '[PRE436]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE436]'
- en: '[PRE437]'
  id: totrans-642
  prefs: []
  type: TYPE_PRE
  zh: '[PRE437]'
- en: '[PRE438]'
  id: totrans-643
  prefs: []
  type: TYPE_PRE
  zh: '[PRE438]'
- en: '[PRE439]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE439]'
- en: '[PRE440]'
  id: totrans-645
  prefs: []
  type: TYPE_PRE
  zh: '[PRE440]'
- en: '[PRE441]'
  id: totrans-646
  prefs: []
  type: TYPE_PRE
  zh: '[PRE441]'
- en: '[PRE442]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE442]'
- en: '[PRE443]'
  id: totrans-648
  prefs: []
  type: TYPE_PRE
  zh: '[PRE443]'
- en: '[PRE444]'
  id: totrans-649
  prefs: []
  type: TYPE_PRE
  zh: '[PRE444]'
- en: '[PRE445]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE445]'
- en: '[PRE446]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE446]'
- en: '[PRE447]'
  id: totrans-652
  prefs: []
  type: TYPE_PRE
  zh: '[PRE447]'
- en: '[PRE448]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE448]'
- en: '[PRE449]'
  id: totrans-654
  prefs: []
  type: TYPE_PRE
  zh: '[PRE449]'
- en: '[PRE450]'
  id: totrans-655
  prefs: []
  type: TYPE_PRE
  zh: '[PRE450]'
- en: '[PRE451]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE451]'
- en: 'The only difference is the different sizes of the scene needed to show the
    full frame of this particular clip. We figured out the necessary size after several
    trial-and-error adjustments. Alternatively, we could use the `MediaView` methods
    (`autosize()`, `preserveRatioProperty()`, `setFitHeight()`, `setFitWidth()`, `fitWidthProperty()`,
    `fitHeightProperty()`, and similar) to adjust the size of the embedded window
    and to match the size of the scene automatically. If we execute the preceding
    example, the following window will pop up and play the clip:'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.27.jpg)'
  id: totrans-658
  prefs: []
  type: TYPE_IMG
- en: 'We can even combine playing both audio and video files in parallel, and thus
    provide a movie with a soundtrack (the `start7()` method of the `HtmlWebView`
    class):'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  id: totrans-660
  prefs: []
  type: TYPE_PRE
  zh: '[PRE452]'
- en: '[PRE453]'
  id: totrans-661
  prefs: []
  type: TYPE_PRE
  zh: '[PRE453]'
- en: '[PRE454]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE454]'
- en: '[PRE455]'
  id: totrans-663
  prefs: []
  type: TYPE_PRE
  zh: '[PRE455]'
- en: '[PRE456]'
  id: totrans-664
  prefs: []
  type: TYPE_PRE
  zh: '[PRE456]'
- en: '[PRE457]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE457]'
- en: '[PRE458]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE458]'
- en: '[PRE459]'
  id: totrans-667
  prefs: []
  type: TYPE_PRE
  zh: '[PRE459]'
- en: '[PRE460]'
  id: totrans-668
  prefs: []
  type: TYPE_PRE
  zh: '[PRE460]'
- en: '[PRE461]'
  id: totrans-669
  prefs: []
  type: TYPE_PRE
  zh: '[PRE461]'
- en: '[PRE462]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE462]'
- en: '[PRE463]'
  id: totrans-671
  prefs: []
  type: TYPE_PRE
  zh: '[PRE463]'
- en: '[PRE464]'
  id: totrans-672
  prefs: []
  type: TYPE_PRE
  zh: '[PRE464]'
- en: '[PRE465]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE465]'
- en: '[PRE466]'
  id: totrans-674
  prefs: []
  type: TYPE_PRE
  zh: '[PRE466]'
- en: '[PRE467]'
  id: totrans-675
  prefs: []
  type: TYPE_PRE
  zh: '[PRE467]'
- en: '[PRE468]'
  id: totrans-676
  prefs: []
  type: TYPE_PRE
  zh: '[PRE468]'
- en: '[PRE469]'
  id: totrans-677
  prefs: []
  type: TYPE_PRE
  zh: '[PRE469]'
- en: '[PRE470]'
  id: totrans-678
  prefs: []
  type: TYPE_PRE
  zh: '[PRE470]'
- en: '[PRE471]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE471]'
- en: '[PRE472]'
  id: totrans-680
  prefs: []
  type: TYPE_PRE
  zh: '[PRE472]'
- en: '[PRE473]'
  id: totrans-681
  prefs: []
  type: TYPE_PRE
  zh: '[PRE473]'
- en: '[PRE474]'
  id: totrans-682
  prefs: []
  type: TYPE_PRE
  zh: '[PRE474]'
- en: '[PRE475]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE475]'
- en: '[PRE476]'
  id: totrans-684
  prefs: []
  type: TYPE_PRE
  zh: '[PRE476]'
- en: '[PRE477]'
  id: totrans-685
  prefs: []
  type: TYPE_PRE
  zh: '[PRE477]'
- en: It is possible to do this because each of the players is executed by its own
    thread.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the `javafx.scene.media` package, read the API and
    the developer guide online, links to which are provided here:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html](https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html)
    for the API of the `javafx.scene.media` package'
  id: totrans-688
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.oracle.com/javafx/2/media/jfxpub-media.htm](https://docs.oracle.com/javafx/2/media/jfxpub-media.htm)
    for a tutorial on the usage of the `javafx.scene.media` package'
  id: totrans-689
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding effects
  id: totrans-690
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `javafx.scene.effects` package contains many classes that allow the adding
    of various effects to the nodes:'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: '`Blend`: Combines pixels from two sources (typically images) using one of the
    pre-defined `BlendModes`'
  id: totrans-692
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Bloom`: Makes the input image brighter, so that it appears to glow'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoxBlur`: Adds blur to an image'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorAdjust`: Allows adjustments of hue, saturation, brightness, and contrast
    to an image'
  id: totrans-695
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorInput`: Renders a rectangular region that is filled with the given paint'
  id: totrans-696
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplacementMap`: Shifts each pixel by a specified distance'
  id: totrans-697
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DropShadow`: Renders a shadow of the given content behind the content'
  id: totrans-698
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GaussianBlur`: Adds blur using a particular (Gaussian) method'
  id: totrans-699
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Glow`: Makes the input image appear to glow'
  id: totrans-700
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InnerShadow`: Creates a shadow inside the frame'
  id: totrans-701
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lighting`: Simulates a light source shining on the content and makes flat
    objects look more realistic'
  id: totrans-702
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MotionBlur`: Simulates the given content seen in motion'
  id: totrans-703
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PerspectiveTransform`: Transforms the content as seen in a perspective'
  id: totrans-704
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reflection`: Renders a reflected version of the input below the actual input
    content'
  id: totrans-705
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SepiaTone`: Produces a sepia tone effect, similar to the appearance of antique
    photographs'
  id: totrans-706
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shadow`: Creates a monochrome duplicate of the content with blurry edges'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All effects share a parent, the `Effect` abstract class. The `Node` class has
    the `setEffect(Effect e)` method, which means that any of the effects can be added
    to any node. That is the main way of applying effects to the nodes—the actors
    that produce a scene on a stage (if we recall our analogy introduced at the beginning
    of this chapter).
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: The only exception is the `Blend` effect, which makes its usage more complicated
    than the use of other effects. In addition to using the `setEffect(Effect e)`
    method, some of the `Node` class children also have the `setBlendMode(BlendMode
    bm)` method, which allows regulating how the images blend into one another when
    they overlap. So, it is possible to set different blend effects in different ways
    that override one another and produce an unexpected result that may be difficult
    to debug. That is what makes the `Blend` effect usage more complicated, and that
    is why we are going to start the overview with how the `Blend` effect can be used.
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: 'Three aspects regulate the appearance of the area where two images overlap
    (we use two images in our examples to make it simpler, but, in practice, many
    images can overlap):'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: '**The value of the opacity property**: This defines how much can be seen through
    the image; the opacity value 0.0 means the image is fully transparent, while the
    opacity value 1.0 means nothing behind it can be seen.'
  id: totrans-711
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The alpha value and strength of each color**: This defines the transparency
    of the color as a double value in the range 0.0-1.0 or 0-255.'
  id: totrans-712
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The blending mode, defined by the BlendMode enum value**: Depending on the
    mode, opacity, and alpha value of each color, the result might also depend on
    the sequence in which the images were added to the scene; the first added image
    is called a bottom input, while the second of the overlapping images is called
    a top input. If the top input is completely opaque, the bottom input is hidden
    by the top input.'
  id: totrans-713
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting appearance of the overlapping area is calculated based on the
    opacity, the alpha values of the colors, the numeric values (strength) of the
    colors, and the blending mode, which can be one of the following:'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: '`ADD`: The color and alpha components from the top input are added to those
    from the bottom input.'
  id: totrans-715
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BLUE`: The blue component of the bottom input is replaced with the blue component
    of the top input; the other color components are unaffected.'
  id: totrans-716
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COLOR_BURN`: The inverse of the bottom input color components is divided by
    the top input color components, all of which is then inverted to produce the resulting
    color.'
  id: totrans-717
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COLOR_DODGE`: The bottom input color components are divided by the inverse
    of the top input color components to produce the resulting color.'
  id: totrans-718
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DARKEN`: The darker of the color components from the two inputs is selected
    to produce the resulting color.'
  id: totrans-719
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DIFFERENCE`: The darker of the color components from the two inputs is subtracted
    from the lighter one to produce the resulting color.'
  id: totrans-720
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXCLUSION`: The color components from the two inputs are multiplied and doubled,
    and then subtracted from the sum of the bottom input color components, to produce
    the resulting color.'
  id: totrans-721
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GREEN`: The green component of the bottom input is replaced with the green
    component of the top input; the other color components are unaffected.'
  id: totrans-722
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HARD_LIGHT`: The input color components are either multiplied or screened,
    depending on the top input color.'
  id: totrans-723
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIGHTEN`: The lighter of the color components from the two inputs is selected
    to produce the resulting color.'
  id: totrans-724
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MULTIPLY`: The color components from the first input are multiplied by those
    from the second input.'
  id: totrans-725
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OVERLAY`: The input color components are either multiplied or screened, depending
    on the bottom input color.'
  id: totrans-726
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RED`: The red component of the bottom input is replaced with the red component
    of the top input; the other color components are unaffected.'
  id: totrans-727
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SCREEN`: The color components from both of the inputs are inverted, multiplied
    with each other, and that result is again inverted to produce the resulting color.'
  id: totrans-728
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOFT_LIGHT`: The input color components are either darkened or lightened,
    depending on the top input color.'
  id: totrans-729
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SRC_ATOP`: The part of the top input lying inside the bottom input is blended
    with the bottom input.'
  id: totrans-730
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SRC_OVER`: The top input is blended over the bottom input.'
  id: totrans-731
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To demonstrate the `Blend` effect, let’s create another application, called
    `BlendEffect`. It does not require the `com.sun.*` packages, so the `--add-export`
    VM options are not needed. Only the `--module-path` and `--add-modules` options,
    described in the *JavaFX fundamentals* section, have to be set for compilation
    and execution.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: 'The scope of this book does not allow us to demonstrate all possible combinations,
    so we will create a red circle and a blue square (see the `BlendEffect` class):'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE478]'
- en: '[PRE479]'
  id: totrans-735
  prefs: []
  type: TYPE_PRE
  zh: '[PRE479]'
- en: '[PRE480]'
  id: totrans-736
  prefs: []
  type: TYPE_PRE
  zh: '[PRE480]'
- en: '[PRE481]'
  id: totrans-737
  prefs: []
  type: TYPE_PRE
  zh: '[PRE481]'
- en: '[PRE482]'
  id: totrans-738
  prefs: []
  type: TYPE_PRE
  zh: '[PRE482]'
- en: '[PRE483]'
  id: totrans-739
  prefs: []
  type: TYPE_PRE
  zh: '[PRE483]'
- en: '[PRE484]'
  id: totrans-740
  prefs: []
  type: TYPE_PRE
  zh: '[PRE484]'
- en: '[PRE485]'
  id: totrans-741
  prefs: []
  type: TYPE_PRE
  zh: '[PRE485]'
- en: '[PRE486]'
  id: totrans-742
  prefs: []
  type: TYPE_PRE
  zh: '[PRE486]'
- en: '[PRE487]'
  id: totrans-743
  prefs: []
  type: TYPE_PRE
  zh: '[PRE487]'
- en: '[PRE488]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE488]'
- en: '[PRE489]'
  id: totrans-745
  prefs: []
  type: TYPE_PRE
  zh: '[PRE489]'
- en: '[PRE490]'
  id: totrans-746
  prefs: []
  type: TYPE_PRE
  zh: '[PRE490]'
- en: We used the `Color.rgb(int red, int green, int blue, double alpha)` method to
    define the colors of each of the figures, but there are many more ways to do it.
    Read the `Color` class API documentation for more details ([https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/paint/Color.html](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/paint/Color.html)).
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: 'To overlap the created circle and square, we will use the `Group` node:'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  id: totrans-749
  prefs: []
  type: TYPE_PRE
  zh: '[PRE491]'
- en: '[PRE492]'
  id: totrans-750
  prefs: []
  type: TYPE_PRE
  zh: '[PRE492]'
- en: '[PRE493]'
  id: totrans-751
  prefs: []
  type: TYPE_PRE
  zh: '[PRE493]'
- en: 'In the preceding code, the square is a bottom input. We will also create a
    group where the square is a top input:'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  id: totrans-753
  prefs: []
  type: TYPE_PRE
  zh: '[PRE494]'
- en: '[PRE495]'
  id: totrans-754
  prefs: []
  type: TYPE_PRE
  zh: '[PRE495]'
- en: '[PRE496]'
  id: totrans-755
  prefs: []
  type: TYPE_PRE
  zh: '[PRE496]'
- en: The distinction is important because we defined the circle as half-opaque, while
    the square was completely opaque. We will use the same settings throughout all
    our examples.
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s compare the two modes, `MULTIPLY` and `SRC_OVER`. We will set them on
    the groups, using the `setEffect()` method, as follows:'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  id: totrans-758
  prefs: []
  type: TYPE_PRE
  zh: '[PRE497]'
- en: '[PRE498]'
  id: totrans-759
  prefs: []
  type: TYPE_PRE
  zh: '[PRE498]'
- en: '[PRE499]'
  id: totrans-760
  prefs: []
  type: TYPE_PRE
  zh: '[PRE499]'
- en: '[PRE500]'
  id: totrans-761
  prefs: []
  type: TYPE_PRE
  zh: '[PRE500]'
- en: '[PRE501]'
  id: totrans-762
  prefs: []
  type: TYPE_PRE
  zh: '[PRE501]'
- en: '[PRE502]'
  id: totrans-763
  prefs: []
  type: TYPE_PRE
  zh: '[PRE502]'
- en: 'In the `start()` method of the called `BlendEffect` class, for each mode, we
    create two groups, one with the input where the circle is on top of the square,
    and another with the input where the square is on top of the circle, and we put
    the four created groups in a `GridPane` layout (see the source code for details).
    If we run the `BlendEffect` application, the result will be as follows:'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.28.jpg)'
  id: totrans-765
  prefs: []
  type: TYPE_IMG
- en: As was expected, when the square is on the top (the two images on the right),
    the overlapping area is completely taken by the opaque square. But, when the circle
    is a top input (the two images on the left), the overlapped area is somewhat visible
    and calculated based on the blend effect.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we set the same mode directly on the group, the result will be
    slightly different. Let’s run the same code but with the mode set on the group:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  id: totrans-768
  prefs: []
  type: TYPE_PRE
  zh: '[PRE503]'
- en: '[PRE504]'
  id: totrans-769
  prefs: []
  type: TYPE_PRE
  zh: '[PRE504]'
- en: '[PRE505]'
  id: totrans-770
  prefs: []
  type: TYPE_PRE
  zh: '[PRE505]'
- en: '[PRE506]'
  id: totrans-771
  prefs: []
  type: TYPE_PRE
  zh: '[PRE506]'
- en: 'Locate the following code in the `start()` method:'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  id: totrans-773
  prefs: []
  type: TYPE_PRE
  zh: '[PRE507]'
- en: '[PRE508]'
  id: totrans-774
  prefs: []
  type: TYPE_PRE
  zh: '[PRE508]'
- en: 'And change it to the following:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  id: totrans-776
  prefs: []
  type: TYPE_PRE
  zh: '[PRE509]'
- en: '[PRE510]'
  id: totrans-777
  prefs: []
  type: TYPE_PRE
  zh: '[PRE510]'
- en: 'If we run the `BlendEffect` class again, the result will look as follows:'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.29.jpg)'
  id: totrans-779
  prefs: []
  type: TYPE_IMG
- en: As you can see, the red color of the circle has slightly changed and there is
    no difference between the `MULTIPLY` and `SRC_OVER` modes. That is the issue with
    the sequence of adding the nodes to the scene we mentioned at the beginning of
    the section.
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: 'The result also changes depending on which node the effect is set on. For example,
    instead of setting the effect on the group, let’s set the effect on the circle
    only:'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  id: totrans-782
  prefs: []
  type: TYPE_PRE
  zh: '[PRE511]'
- en: '[PRE512]'
  id: totrans-783
  prefs: []
  type: TYPE_PRE
  zh: '[PRE512]'
- en: '[PRE513]'
  id: totrans-784
  prefs: []
  type: TYPE_PRE
  zh: '[PRE513]'
- en: '[PRE514]'
  id: totrans-785
  prefs: []
  type: TYPE_PRE
  zh: '[PRE514]'
- en: '[PRE515]'
  id: totrans-786
  prefs: []
  type: TYPE_PRE
  zh: '[PRE515]'
- en: '[PRE516]'
  id: totrans-787
  prefs: []
  type: TYPE_PRE
  zh: '[PRE516]'
- en: 'Locate the following code in the `start()` method:'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  id: totrans-789
  prefs: []
  type: TYPE_PRE
  zh: '[PRE517]'
- en: '[PRE518]'
  id: totrans-790
  prefs: []
  type: TYPE_PRE
  zh: '[PRE518]'
- en: 'And change it to the following:'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  id: totrans-792
  prefs: []
  type: TYPE_PRE
  zh: '[PRE519]'
- en: '[PRE520]'
  id: totrans-793
  prefs: []
  type: TYPE_PRE
  zh: '[PRE520]'
- en: 'We run the application and see the following:'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.30.jpg)'
  id: totrans-795
  prefs: []
  type: TYPE_IMG
- en: 'The two images on the right remain the same as in all the previous examples,
    but the two images on the left show the new colors of the overlapping area. Now,
    let’s set the same effect on the square instead of the circle, as follows:'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  id: totrans-797
  prefs: []
  type: TYPE_PRE
  zh: '[PRE521]'
- en: '[PRE522]'
  id: totrans-798
  prefs: []
  type: TYPE_PRE
  zh: '[PRE522]'
- en: '[PRE523]'
  id: totrans-799
  prefs: []
  type: TYPE_PRE
  zh: '[PRE523]'
- en: '[PRE524]'
  id: totrans-800
  prefs: []
  type: TYPE_PRE
  zh: '[PRE524]'
- en: '[PRE525]'
  id: totrans-801
  prefs: []
  type: TYPE_PRE
  zh: '[PRE525]'
- en: '[PRE526]'
  id: totrans-802
  prefs: []
  type: TYPE_PRE
  zh: '[PRE526]'
- en: 'Locate the following code in the `start()` method:'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  id: totrans-804
  prefs: []
  type: TYPE_PRE
  zh: '[PRE527]'
- en: '[PRE528]'
  id: totrans-805
  prefs: []
  type: TYPE_PRE
  zh: '[PRE528]'
- en: 'And change it to the following:'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  id: totrans-807
  prefs: []
  type: TYPE_PRE
  zh: '[PRE529]'
- en: '[PRE530]'
  id: totrans-808
  prefs: []
  type: TYPE_PRE
  zh: '[PRE530]'
- en: 'The result will slightly change again and will look as presented in the following
    screenshot:'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.31.jpg)'
  id: totrans-810
  prefs: []
  type: TYPE_IMG
- en: There is no difference between the `MULTIPLY` and `SRC_OVER` modes, but the
    red color is different than it was when we set the effect on the circle.
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change the approach again and set the blend mode directly on the circle
    only, using the following code:'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  id: totrans-813
  prefs: []
  type: TYPE_PRE
  zh: '[PRE531]'
- en: '[PRE532]'
  id: totrans-814
  prefs: []
  type: TYPE_PRE
  zh: '[PRE532]'
- en: '[PRE533]'
  id: totrans-815
  prefs: []
  type: TYPE_PRE
  zh: '[PRE533]'
- en: 'Locate the following code in the `start()` method:'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  id: totrans-817
  prefs: []
  type: TYPE_PRE
  zh: '[PRE534]'
- en: '[PRE535]'
  id: totrans-818
  prefs: []
  type: TYPE_PRE
  zh: '[PRE535]'
- en: 'And change it to this:'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  id: totrans-820
  prefs: []
  type: TYPE_PRE
  zh: '[PRE536]'
- en: '[PRE537]'
  id: totrans-821
  prefs: []
  type: TYPE_PRE
  zh: '[PRE537]'
- en: 'The result changes again:'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.32.jpg)'
  id: totrans-823
  prefs: []
  type: TYPE_IMG
- en: Setting the blend mode on the square only removes the difference between the
    `MULTIPLY` and `SRC_OVER` modes again.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the following code in the `start()` method:'
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  id: totrans-826
  prefs: []
  type: TYPE_PRE
  zh: '[PRE538]'
- en: '[PRE539]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE539]'
- en: 'And change it to the following:'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  id: totrans-829
  prefs: []
  type: TYPE_PRE
  zh: '[PRE540]'
- en: '[PRE541]'
  id: totrans-830
  prefs: []
  type: TYPE_PRE
  zh: '[PRE541]'
- en: 'The result is as follows:'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.33.jpg)'
  id: totrans-832
  prefs: []
  type: TYPE_IMG
- en: To avoid confusion and make the results of the blending more predictable, you
    have to watch the sequence in which the nodes are added to the scene and the consistency
    of the way the blend effect is applied.
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: 'In the source code provided with this book, you will find examples for all
    effects included in the `javafx.scene.effects` package. They are all demonstrated
    by running side-by-side comparisons. Here is one example:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.34.jpg)'
  id: totrans-835
  prefs: []
  type: TYPE_IMG
- en: For your convenience, there are **Pause** and **Continue** buttons provided
    that allow you to pause the demonstration and review the result for different
    values of opacity set on the blend effect.
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate all other effects, we have created yet another application,
    called `OtherEffects`, which also doesn’t require the `com.sun.*` packages, so
    the `--add-export` VM options are not needed. The effects demonstrated include
    `Bloom`, `BoxBlur`, `ColorAdjust`, `DisplacementMap`, `DropShadow`, `Glow`, `InnerShadow`,
    `Lighting`, `MotionBlur`, `PerspectiveTransform`, `Reflection`, `ShadowTone`,
    and `SepiaTone`. We have used two images to present the result of applying each
    of the effects (the Packt logo and a mountain lake view):'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  id: totrans-838
  prefs: []
  type: TYPE_PRE
  zh: '[PRE542]'
- en: '[PRE543]'
  id: totrans-839
  prefs: []
  type: TYPE_PRE
  zh: '[PRE543]'
- en: '[PRE544]'
  id: totrans-840
  prefs: []
  type: TYPE_PRE
  zh: '[PRE544]'
- en: '[PRE545]'
  id: totrans-841
  prefs: []
  type: TYPE_PRE
  zh: '[PRE545]'
- en: '[PRE546]'
  id: totrans-842
  prefs: []
  type: TYPE_PRE
  zh: '[PRE546]'
- en: '[PRE547]'
  id: totrans-843
  prefs: []
  type: TYPE_PRE
  zh: '[PRE547]'
- en: '[PRE548]'
  id: totrans-844
  prefs: []
  type: TYPE_PRE
  zh: '[PRE548]'
- en: '[PRE549]'
  id: totrans-845
  prefs: []
  type: TYPE_PRE
  zh: '[PRE549]'
- en: '[PRE550]'
  id: totrans-846
  prefs: []
  type: TYPE_PRE
  zh: '[PRE550]'
- en: '[PRE551]'
  id: totrans-847
  prefs: []
  type: TYPE_PRE
  zh: '[PRE551]'
- en: 'We also have added two buttons that allow you to pause and continue the demonstration
    (it iterates over the effect and the values of their parameters):'
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  id: totrans-849
  prefs: []
  type: TYPE_PRE
  zh: '[PRE552]'
- en: '[PRE553]'
  id: totrans-850
  prefs: []
  type: TYPE_PRE
  zh: '[PRE553]'
- en: '[PRE554]'
  id: totrans-851
  prefs: []
  type: TYPE_PRE
  zh: '[PRE554]'
- en: '[PRE555]'
  id: totrans-852
  prefs: []
  type: TYPE_PRE
  zh: '[PRE555]'
- en: '[PRE556]'
  id: totrans-853
  prefs: []
  type: TYPE_PRE
  zh: '[PRE556]'
- en: '[PRE557]'
  id: totrans-854
  prefs: []
  type: TYPE_PRE
  zh: '[PRE557]'
- en: 'The `et` object is the object of the `EffectsThread` thread:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  id: totrans-856
  prefs: []
  type: TYPE_PRE
  zh: '[PRE558]'
- en: 'The thread goes through the list of the effects, creates a corresponding effect
    10 times (with 10 different effects’ parameter values), and, every time, sets
    the created `Effect` object on each of the images, then sleeps for 1 second to
    give you an opportunity to review the result:'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  id: totrans-858
  prefs: []
  type: TYPE_PRE
  zh: '[PRE559]'
- en: '[PRE560]'
  id: totrans-859
  prefs: []
  type: TYPE_PRE
  zh: '[PRE560]'
- en: '[PRE561]'
  id: totrans-860
  prefs: []
  type: TYPE_PRE
  zh: '[PRE561]'
- en: '[PRE562]'
  id: totrans-861
  prefs: []
  type: TYPE_PRE
  zh: '[PRE562]'
- en: '[PRE563]'
  id: totrans-862
  prefs: []
  type: TYPE_PRE
  zh: '[PRE563]'
- en: '[PRE564]'
  id: totrans-863
  prefs: []
  type: TYPE_PRE
  zh: '[PRE564]'
- en: '[PRE565]'
  id: totrans-864
  prefs: []
  type: TYPE_PRE
  zh: '[PRE565]'
- en: '[PRE566]'
  id: totrans-865
  prefs: []
  type: TYPE_PRE
  zh: '[PRE566]'
- en: '[PRE567]'
  id: totrans-866
  prefs: []
  type: TYPE_PRE
  zh: '[PRE567]'
- en: '[PRE568]'
  id: totrans-867
  prefs: []
  type: TYPE_PRE
  zh: '[PRE568]'
- en: '[PRE569]'
  id: totrans-868
  prefs: []
  type: TYPE_PRE
  zh: '[PRE569]'
- en: '[PRE570]'
  id: totrans-869
  prefs: []
  type: TYPE_PRE
  zh: '[PRE570]'
- en: '[PRE571]'
  id: totrans-870
  prefs: []
  type: TYPE_PRE
  zh: '[PRE571]'
- en: '[PRE572]'
  id: totrans-871
  prefs: []
  type: TYPE_PRE
  zh: '[PRE572]'
- en: '[PRE573]'
  id: totrans-872
  prefs: []
  type: TYPE_PRE
  zh: '[PRE573]'
- en: '[PRE574]'
  id: totrans-873
  prefs: []
  type: TYPE_PRE
  zh: '[PRE574]'
- en: '[PRE575]'
  id: totrans-874
  prefs: []
  type: TYPE_PRE
  zh: '[PRE575]'
- en: '[PRE576]'
  id: totrans-875
  prefs: []
  type: TYPE_PRE
  zh: '[PRE576]'
- en: '[PRE577]'
  id: totrans-876
  prefs: []
  type: TYPE_PRE
  zh: '[PRE577]'
- en: '[PRE578]'
  id: totrans-877
  prefs: []
  type: TYPE_PRE
  zh: '[PRE578]'
- en: '[PRE579]'
  id: totrans-878
  prefs: []
  type: TYPE_PRE
  zh: '[PRE579]'
- en: '[PRE580]'
  id: totrans-879
  prefs: []
  type: TYPE_PRE
  zh: '[PRE580]'
- en: '[PRE581]'
  id: totrans-880
  prefs: []
  type: TYPE_PRE
  zh: '[PRE581]'
- en: '[PRE582]'
  id: totrans-881
  prefs: []
  type: TYPE_PRE
  zh: '[PRE582]'
- en: 'We will show how each effect is created next, under the screenshot with the
    effect’s result. To present the result, we have used the `GridPane` layout:'
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  id: totrans-883
  prefs: []
  type: TYPE_PRE
  zh: '[PRE583]'
- en: '[PRE584]'
  id: totrans-884
  prefs: []
  type: TYPE_PRE
  zh: '[PRE584]'
- en: '[PRE585]'
  id: totrans-885
  prefs: []
  type: TYPE_PRE
  zh: '[PRE585]'
- en: '[PRE586]'
  id: totrans-886
  prefs: []
  type: TYPE_PRE
  zh: '[PRE586]'
- en: '[PRE587]'
  id: totrans-887
  prefs: []
  type: TYPE_PRE
  zh: '[PRE587]'
- en: '[PRE588]'
  id: totrans-888
  prefs: []
  type: TYPE_PRE
  zh: '[PRE588]'
- en: '[PRE589]'
  id: totrans-889
  prefs: []
  type: TYPE_PRE
  zh: '[PRE589]'
- en: '[PRE590]'
  id: totrans-890
  prefs: []
  type: TYPE_PRE
  zh: '[PRE590]'
- en: '[PRE591]'
  id: totrans-891
  prefs: []
  type: TYPE_PRE
  zh: '[PRE591]'
- en: '[PRE592]'
  id: totrans-892
  prefs: []
  type: TYPE_PRE
  zh: '[PRE592]'
- en: '[PRE593]'
  id: totrans-893
  prefs: []
  type: TYPE_PRE
  zh: '[PRE593]'
- en: '[PRE594]'
  id: totrans-894
  prefs: []
  type: TYPE_PRE
  zh: '[PRE594]'
- en: '[PRE595]'
  id: totrans-895
  prefs: []
  type: TYPE_PRE
  zh: '[PRE595]'
- en: '[PRE596]'
  id: totrans-896
  prefs: []
  type: TYPE_PRE
  zh: '[PRE596]'
- en: '[PRE597]'
  id: totrans-897
  prefs: []
  type: TYPE_PRE
  zh: '[PRE597]'
- en: '[PRE598]'
  id: totrans-898
  prefs: []
  type: TYPE_PRE
  zh: '[PRE598]'
- en: '[PRE599]'
  id: totrans-899
  prefs: []
  type: TYPE_PRE
  zh: '[PRE599]'
- en: 'And, finally, the created `GridPane` object was passed to the scene, which
    in turn was placed on a stage familiar to you from our earlier examples:'
  id: totrans-900
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  id: totrans-901
  prefs: []
  type: TYPE_PRE
  zh: '[PRE600]'
- en: '[PRE601]'
  id: totrans-902
  prefs: []
  type: TYPE_PRE
  zh: '[PRE601]'
- en: '[PRE602]'
  id: totrans-903
  prefs: []
  type: TYPE_PRE
  zh: '[PRE602]'
- en: '[PRE603]'
  id: totrans-904
  prefs: []
  type: TYPE_PRE
  zh: '[PRE603]'
- en: '[PRE604]'
  id: totrans-905
  prefs: []
  type: TYPE_PRE
  zh: '[PRE604]'
- en: '[PRE605]'
  id: totrans-906
  prefs: []
  type: TYPE_PRE
  zh: '[PRE605]'
- en: 'The following screenshots depict examples of the effects of each of the 13
    parameter values. Under each screenshot, we present the code snippet from the
    `createEffect(String effect, double d, Text txt)` method that created this effect:'
  id: totrans-907
  prefs: []
  type: TYPE_NORMAL
- en: 'Effect of parameter value 1:'
  id: totrans-908
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.35.jpg)'
  id: totrans-909
  prefs: []
  type: TYPE_IMG
- en: '[PRE606]'
  id: totrans-910
  prefs: []
  type: TYPE_PRE
  zh: '[PRE606]'
- en: '[PRE607]'
  id: totrans-911
  prefs: []
  type: TYPE_PRE
  zh: '[PRE607]'
- en: '[PRE608]'
  id: totrans-912
  prefs: []
  type: TYPE_PRE
  zh: '[PRE608]'
- en: '[PRE609]'
  id: totrans-913
  prefs: []
  type: TYPE_PRE
  zh: '[PRE609]'
- en: 'Effect of parameter value 2:'
  id: totrans-914
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.36.jpg)'
  id: totrans-915
  prefs: []
  type: TYPE_IMG
- en: '[PRE610]'
  id: totrans-916
  prefs: []
  type: TYPE_PRE
  zh: '[PRE610]'
- en: '[PRE611]'
  id: totrans-917
  prefs: []
  type: TYPE_PRE
  zh: '[PRE611]'
- en: '[PRE612]'
  id: totrans-918
  prefs: []
  type: TYPE_PRE
  zh: '[PRE612]'
- en: '[PRE613]'
  id: totrans-919
  prefs: []
  type: TYPE_PRE
  zh: '[PRE613]'
- en: '[PRE614]'
  id: totrans-920
  prefs: []
  type: TYPE_PRE
  zh: '[PRE614]'
- en: '[PRE615]'
  id: totrans-921
  prefs: []
  type: TYPE_PRE
  zh: '[PRE615]'
- en: 'Effect of parameter value 3:'
  id: totrans-922
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.37.jpg)'
  id: totrans-923
  prefs: []
  type: TYPE_IMG
- en: '[PRE616]'
  id: totrans-924
  prefs: []
  type: TYPE_PRE
  zh: '[PRE616]'
- en: '[PRE617]'
  id: totrans-925
  prefs: []
  type: TYPE_PRE
  zh: '[PRE617]'
- en: '[PRE618]'
  id: totrans-926
  prefs: []
  type: TYPE_PRE
  zh: '[PRE618]'
- en: '[PRE619]'
  id: totrans-927
  prefs: []
  type: TYPE_PRE
  zh: '[PRE619]'
- en: 'Effect of parameter value 4:'
  id: totrans-928
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.38.jpg)'
  id: totrans-929
  prefs: []
  type: TYPE_IMG
- en: '[PRE620]'
  id: totrans-930
  prefs: []
  type: TYPE_PRE
  zh: '[PRE620]'
- en: '[PRE621]'
  id: totrans-931
  prefs: []
  type: TYPE_PRE
  zh: '[PRE621]'
- en: '[PRE622]'
  id: totrans-932
  prefs: []
  type: TYPE_PRE
  zh: '[PRE622]'
- en: '[PRE623]'
  id: totrans-933
  prefs: []
  type: TYPE_PRE
  zh: '[PRE623]'
- en: 'Effect of parameter value 5:'
  id: totrans-934
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.39.jpg)'
  id: totrans-935
  prefs: []
  type: TYPE_IMG
- en: '[PRE624]'
  id: totrans-936
  prefs: []
  type: TYPE_PRE
  zh: '[PRE624]'
- en: '[PRE625]'
  id: totrans-937
  prefs: []
  type: TYPE_PRE
  zh: '[PRE625]'
- en: '[PRE626]'
  id: totrans-938
  prefs: []
  type: TYPE_PRE
  zh: '[PRE626]'
- en: '[PRE627]'
  id: totrans-939
  prefs: []
  type: TYPE_PRE
  zh: '[PRE627]'
- en: 'Effect of parameter value 6:'
  id: totrans-940
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.40.jpg)'
  id: totrans-941
  prefs: []
  type: TYPE_IMG
- en: '[PRE628]'
  id: totrans-942
  prefs: []
  type: TYPE_PRE
  zh: '[PRE628]'
- en: '[PRE629]'
  id: totrans-943
  prefs: []
  type: TYPE_PRE
  zh: '[PRE629]'
- en: '[PRE630]'
  id: totrans-944
  prefs: []
  type: TYPE_PRE
  zh: '[PRE630]'
- en: '[PRE631]'
  id: totrans-945
  prefs: []
  type: TYPE_PRE
  zh: '[PRE631]'
- en: '[PRE632]'
  id: totrans-946
  prefs: []
  type: TYPE_PRE
  zh: '[PRE632]'
- en: '[PRE633]'
  id: totrans-947
  prefs: []
  type: TYPE_PRE
  zh: '[PRE633]'
- en: '[PRE634]'
  id: totrans-948
  prefs: []
  type: TYPE_PRE
  zh: '[PRE634]'
- en: '[PRE635]'
  id: totrans-949
  prefs: []
  type: TYPE_PRE
  zh: '[PRE635]'
- en: '[PRE636]'
  id: totrans-950
  prefs: []
  type: TYPE_PRE
  zh: '[PRE636]'
- en: '[PRE637]'
  id: totrans-951
  prefs: []
  type: TYPE_PRE
  zh: '[PRE637]'
- en: '[PRE638]'
  id: totrans-952
  prefs: []
  type: TYPE_PRE
  zh: '[PRE638]'
- en: '[PRE639]'
  id: totrans-953
  prefs: []
  type: TYPE_PRE
  zh: '[PRE639]'
- en: '[PRE640]'
  id: totrans-954
  prefs: []
  type: TYPE_PRE
  zh: '[PRE640]'
- en: '[PRE641]'
  id: totrans-955
  prefs: []
  type: TYPE_PRE
  zh: '[PRE641]'
- en: '[PRE642]'
  id: totrans-956
  prefs: []
  type: TYPE_PRE
  zh: '[PRE642]'
- en: 'Effect of parameter value 7:'
  id: totrans-957
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.41.jpg)'
  id: totrans-958
  prefs: []
  type: TYPE_IMG
- en: '[PRE643]'
  id: totrans-959
  prefs: []
  type: TYPE_PRE
  zh: '[PRE643]'
- en: '[PRE644]'
  id: totrans-960
  prefs: []
  type: TYPE_PRE
  zh: '[PRE644]'
- en: '[PRE645]'
  id: totrans-961
  prefs: []
  type: TYPE_PRE
  zh: '[PRE645]'
- en: '[PRE646]'
  id: totrans-962
  prefs: []
  type: TYPE_PRE
  zh: '[PRE646]'
- en: '[PRE647]'
  id: totrans-963
  prefs: []
  type: TYPE_PRE
  zh: '[PRE647]'
- en: 'Effect of parameter value 8:'
  id: totrans-964
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.42.jpg)'
  id: totrans-965
  prefs: []
  type: TYPE_IMG
- en: '[PRE648]'
  id: totrans-966
  prefs: []
  type: TYPE_PRE
  zh: '[PRE648]'
- en: '[PRE649]'
  id: totrans-967
  prefs: []
  type: TYPE_PRE
  zh: '[PRE649]'
- en: '[PRE650]'
  id: totrans-968
  prefs: []
  type: TYPE_PRE
  zh: '[PRE650]'
- en: '[PRE651]'
  id: totrans-969
  prefs: []
  type: TYPE_PRE
  zh: '[PRE651]'
- en: '[PRE652]'
  id: totrans-970
  prefs: []
  type: TYPE_PRE
  zh: '[PRE652]'
- en: '[PRE653]'
  id: totrans-971
  prefs: []
  type: TYPE_PRE
  zh: '[PRE653]'
- en: '[PRE654]'
  id: totrans-972
  prefs: []
  type: TYPE_PRE
  zh: '[PRE654]'
- en: '[PRE655]'
  id: totrans-973
  prefs: []
  type: TYPE_PRE
  zh: '[PRE655]'
- en: 'Effect of parameter value 9:'
  id: totrans-974
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.43.jpg)'
  id: totrans-975
  prefs: []
  type: TYPE_IMG
- en: '[PRE656]'
  id: totrans-976
  prefs: []
  type: TYPE_PRE
  zh: '[PRE656]'
- en: '[PRE657]'
  id: totrans-977
  prefs: []
  type: TYPE_PRE
  zh: '[PRE657]'
- en: '[PRE658]'
  id: totrans-978
  prefs: []
  type: TYPE_PRE
  zh: '[PRE658]'
- en: '[PRE659]'
  id: totrans-979
  prefs: []
  type: TYPE_PRE
  zh: '[PRE659]'
- en: '[PRE660]'
  id: totrans-980
  prefs: []
  type: TYPE_PRE
  zh: '[PRE660]'
- en: '[PRE661]'
  id: totrans-981
  prefs: []
  type: TYPE_PRE
  zh: '[PRE661]'
- en: '[PRE662]'
  id: totrans-982
  prefs: []
  type: TYPE_PRE
  zh: '[PRE662]'
- en: '[PRE663]'
  id: totrans-983
  prefs: []
  type: TYPE_PRE
  zh: '[PRE663]'
- en: '[PRE664]'
  id: totrans-984
  prefs: []
  type: TYPE_PRE
  zh: '[PRE664]'
- en: '[PRE665]'
  id: totrans-985
  prefs: []
  type: TYPE_PRE
  zh: '[PRE665]'
- en: '[PRE666]'
  id: totrans-986
  prefs: []
  type: TYPE_PRE
  zh: '[PRE666]'
- en: '[PRE667]'
  id: totrans-987
  prefs: []
  type: TYPE_PRE
  zh: '[PRE667]'
- en: '[PRE668]'
  id: totrans-988
  prefs: []
  type: TYPE_PRE
  zh: '[PRE668]'
- en: 'Effect of parameter value 10:'
  id: totrans-989
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.44.jpg)'
  id: totrans-990
  prefs: []
  type: TYPE_IMG
- en: '[PRE669]'
  id: totrans-991
  prefs: []
  type: TYPE_PRE
  zh: '[PRE669]'
- en: '[PRE670]'
  id: totrans-992
  prefs: []
  type: TYPE_PRE
  zh: '[PRE670]'
- en: '[PRE671]'
  id: totrans-993
  prefs: []
  type: TYPE_PRE
  zh: '[PRE671]'
- en: '[PRE672]'
  id: totrans-994
  prefs: []
  type: TYPE_PRE
  zh: '[PRE672]'
- en: '[PRE673]'
  id: totrans-995
  prefs: []
  type: TYPE_PRE
  zh: '[PRE673]'
- en: 'Effect of parameter value 11:'
  id: totrans-996
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.45.jpg)'
  id: totrans-997
  prefs: []
  type: TYPE_IMG
- en: '[PRE674]'
  id: totrans-998
  prefs: []
  type: TYPE_PRE
  zh: '[PRE674]'
- en: '[PRE675]'
  id: totrans-999
  prefs: []
  type: TYPE_PRE
  zh: '[PRE675]'
- en: '[PRE676]'
  id: totrans-1000
  prefs: []
  type: TYPE_PRE
  zh: '[PRE676]'
- en: '[PRE677]'
  id: totrans-1001
  prefs: []
  type: TYPE_PRE
  zh: '[PRE677]'
- en: '[PRE678]'
  id: totrans-1002
  prefs: []
  type: TYPE_PRE
  zh: '[PRE678]'
- en: 'Effect of parameter value 12:'
  id: totrans-1003
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.46.jpg)'
  id: totrans-1004
  prefs: []
  type: TYPE_IMG
- en: '[PRE679]'
  id: totrans-1005
  prefs: []
  type: TYPE_PRE
  zh: '[PRE679]'
- en: '[PRE680]'
  id: totrans-1006
  prefs: []
  type: TYPE_PRE
  zh: '[PRE680]'
- en: '[PRE681]'
  id: totrans-1007
  prefs: []
  type: TYPE_PRE
  zh: '[PRE681]'
- en: '[PRE682]'
  id: totrans-1008
  prefs: []
  type: TYPE_PRE
  zh: '[PRE682]'
- en: 'Effect of parameter value 13:'
  id: totrans-1009
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.47.jpg)'
  id: totrans-1010
  prefs: []
  type: TYPE_IMG
- en: '[PRE683]'
  id: totrans-1011
  prefs: []
  type: TYPE_PRE
  zh: '[PRE683]'
- en: '[PRE684]'
  id: totrans-1012
  prefs: []
  type: TYPE_PRE
  zh: '[PRE684]'
- en: '[PRE685]'
  id: totrans-1013
  prefs: []
  type: TYPE_PRE
  zh: '[PRE685]'
- en: '[PRE686]'
  id: totrans-1014
  prefs: []
  type: TYPE_PRE
  zh: '[PRE686]'
- en: The full source code of this demonstration is provided with the book and is
    available on GitHub.
  id: totrans-1015
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-1016
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the JavaFX kit, its main features, and
    how it can be used to create a GUI application. The topics covered included an
    overview of Java GUI technologies, the JavaFX control elements, charts, using
    CSS, FXML, embedding HTML, playing media, and adding effects.
  id: totrans-1017
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can create a user interface using Java GUI technologies, as well as
    creating and using a user interface project as a standalone application.
  id: totrans-1018
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is dedicated to functional programming. It provides an overview
    of functional interfaces that come with JDK, explains what a Lambda expression
    is, and how to use a functional interface in a Lambda expression. It also explains
    and demonstrates how to use method references.
  id: totrans-1019
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  id: totrans-1020
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the top-level content container in JavaFX?
  id: totrans-1021
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the base class of all the scene participants in JavaFX?
  id: totrans-1022
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the base class of a JavaFX application.
  id: totrans-1023
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is one method of the JavaFX application that has to be implemented?
  id: totrans-1024
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `Application` method has to be called by the `main` method to execute
    a JavaFX application?
  id: totrans-1025
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two VM options are required to execute a JavaFX application?
  id: totrans-1026
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `Application` method is called when the JavaFX application window is closed
    using the **x** button in the upper corner?
  id: totrans-1027
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which class has to be used to embed HTML?
  id: totrans-1028
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three classes that have to be used to play media.
  id: totrans-1029
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the VM option required to be added in order to play media?
  id: totrans-1030
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name five JavaFX effects.
  id: totrans-1031
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
