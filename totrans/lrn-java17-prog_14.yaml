- en: '*Chapter 12*: Java GUI Programming'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provides an overview of Java **graphical user interface** (**GUI**)
    technologies and demonstrates how the JavaFX kit can be used to create a GUI application.
    The latest versions of JavaFX not only provide many helpful features but also
    allow for the preserving and embedding of legacy implementations and styles.
  prefs: []
  type: TYPE_NORMAL
- en: In a certain respect, the GUI is the most important part of an application.
    It directly interacts with the user. If the GUI is inconvenient, unappealing to
    the eye, or confusing, even the best backend solution might not persuade the user
    to use this application. By contrast, a well-thought-out, intuitive, and nicely
    designed GUI helps to retain users, even if the application does not do the job
    as well as its competitors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The agenda of the chapter requires us to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Java GUI technologies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaFX fundamentals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HelloWorld with JavaFX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying CSS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using FXML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding HTML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing media
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be able to create a user interface using
    Java GUI technologies, as well as creating and using a user interface project
    as a standalone application.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be able to execute the code examples provided in this chapter, you will
    need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A computer with a Microsoft Windows, Apple macOS, or Linux operating system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java SE version 17 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An IDE or code editor of your choice
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The instructions for how to set up Java SE and the IntelliJ IDEA editor were
    provided in [*Chapter 1*](B18388_01_ePub.xhtml#_idTextAnchor015), *Getting Started
    with Java 17*. The files with the code examples for this chapter are available
    on GitHub at [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    in the `examples/src/main/java/com/packt/learnjava/ch12_gui` folder and in the
    `gui` folder, which contains a standalone GUI application.
  prefs: []
  type: TYPE_NORMAL
- en: Java GUI technologies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The name **Java Foundation Classes** (**JFC**) may be a source of much confusion.
    It implies *the classes that are at the foundation of Java*, while, in fact, JFC
    includes only classes and interfaces related to the GUI. To be precise, JFC is
    a collection of three frameworks: the **Abstract Window Toolkit** (**AWT**), Swing,
    and Java 2D.'
  prefs: []
  type: TYPE_NORMAL
- en: JFC is part of **Java Class Library** (**JCL**), although the name JFC came
    into being only in 1997, while AWT was part of JCL from the very beginning. At
    that time, Netscape developed a GUI library called **Internet Foundation Classes**
    (**IFC**), and Microsoft created **Application Foundation Classes** (**AFC**)
    for GUI development, too. So, when Sun Microsystems and Netscape decided to form
    a new GUI library, they inherited the word *Foundation* and created JFC. The Swing
    framework took over the Java GUI programming from AWT and was successfully used
    for almost two decades.
  prefs: []
  type: TYPE_NORMAL
- en: A new GUI programming toolkit, JavaFX, was added to JCL in Java 8\. It was removed
    from JCL in Java 11, and since then, has resided as an open source project supported
    by the company Gluon as a downloadable module in addition to the JDK. JavaFX uses
    a somewhat different approach to GUI programming than AWT and Swing. It presents
    a more consistent and simpler design and has a good chance of being a winning
    Java GUI-programming toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: JavaFX fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cities such as New York, London, Paris, and Moscow have many theaters, and people
    who live there cannot avoid hearing about new plays and productions released almost
    every week. It makes them inevitably familiar with theater terminology, in which
    the terms *stage*, *scene*, and *event* are probably used most often. These three
    terms are at the foundation of a JavaFX application structure, too.
  prefs: []
  type: TYPE_NORMAL
- en: The top-level container in JavaFX that holds all other components is represented
    by the `javafx.stage.Stage` class. So, you can say that, in the JavaFX application,
    everything happens on a *stage*. From a user perspective, it is a display area
    or window where all the controls and components perform their actions (like actors
    in a theater). And, similar to the actors in a theater, they do it in the context
    of a *scene*, represented by the `javafx.scene.Scene` class. So, a JavaFX application,
    like a play in a theater, is composed of `Scene` objects presented inside the
    `Stage` object one at a time. Each `Scene` object contains a graph that defines
    the positions of the scene actors (called `javafx.scene.Node`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the nodesâ€™ controls are associated with *events*: a button clicked
    or a checkbox checked, for example. These events can be processed by the event
    handler associated with the corresponding control element.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The main class of a JavaFX application has to extend the abstract `java.application.Application`
    class, which has several life cycle methods. We list them in the sequence of the
    invocation: `launch()`, `init()`, `notifyPreloader()`, `start()`, and `stop()`.
    It looks like quite a few to remember. But, most probably, you need to implement
    only one method, `start()`, where the actual GUI is constructed and executed.
    Nevertheless, we will review all the life cycle methods just for completeness:'
  prefs: []
  type: TYPE_NORMAL
- en: '`static void launch(Class<? extends Application> appClass, String... args)`:
    This launches the application and is often called the `main` method; it does not
    return until `Platform.exit()` is called or all the application windows close.
    The `appClass` parameter must be a public subclass of the `Application` class
    with a public no-argument constructor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static void launch(String... args)`: The same as the preceding method, assuming
    that the public subclass of the `Application` class is the immediately enclosing
    class. This is the method most often used to launch the JavaFX application; we
    are going to use it in our examples, too.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void init()`: This method is called after the `Application` class is loaded;
    it is typically used for some kind of resource initialization. The default implementation
    does nothing, and we are not going to use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void notifyPreloader(Preloader.PreloaderNotification info)`: This can be used
    to show progress when the initialization takes a long time; we are not going to
    use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`abstract void start(Stage primaryStage)`: The method we are going to implement.
    It is called after the `init()` method returns, and after the system is ready
    to do the main job. The `primaryStage` parameter is the stage where the application
    is going to present its scenes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`void stop()`: This is called when the application should stop, and can be
    used to release the resources. The default implementation does nothing, and we
    are not going to use it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API of the JavaFX toolkit can be found online ([https://openjfx.io/javadoc/18//](https://openjfx.io/javadoc/18//)).
    As of the time of writing, the latest version is *18*. Oracle provides extensive
    documentation and code examples, too ([https://docs.oracle.com/javafx/2//](https://docs.oracle.com/javafx/2//)).
    The documentation includes the description and user manual of Scene Builder (a
    development tool that provides a visual layout environment and lets you quickly
    design a user interface for the JavaFX application without writing any code).
    This tool may be useful for creating a complex and intricate GUI, and many people
    use it all the time. In this book though, we will concentrate on JavaFX code writing
    without using this tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to do it, the following are the necessary steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Download the JavaFX SDK for your OS from [https://gluonhq.com/products/javafx/](https://gluonhq.com/products/javafx/)
    (the `openjfx-18_osx-x64_bin-sdk.zip` file, as of the time of writing) and unzip
    it in any directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assuming you have unzipped the JavaFX SDK into the `/path/javafx-sdk/` folder,
    add the following options to the Java command, which will launch your JavaFX application
    on the Linux platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Windows, the same options look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`/path/JavaFX/` and `C:\path\JavaFX\` are the placeholders that you need to
    substitute with the actual path to the folder that contains the JavaFX SDK.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming that the applicationâ€™s main class is `HelloWorld`, in the case of
    IntelliJ, enter the preceding options into the `VM options` field, as follows
    (the example is for Linux):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These options have to be added to `Run/Debug Configurations` of the `HelloWorld`,
    `BlendEffect`, and `OtherEffects` classes of the `ch12_gui` package of the source
    code. If you prefer a different IDE or have a different OS, you can find recommendations
    on how to set it in the `openjfx.io` documentation ([https://openjfx.io/openjfx-docs](https://openjfx.io/openjfx-docs)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the `HelloWorld`, `BlendEffect`, and `OtherEffects` classes from the
    command line, use the following commands on the Linux platform in the project
    root directory (where the `pom.xml` file is located):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'On Windows, the same commands look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Each of the `HelloWorld`, `BlendEffect`, and `OtherEffects` classes has two
    `start()` methods: `start1()` and `start2()`. After you run the class once, rename
    `start()` as `start1()`, and `start1()` as `start()`, and run the preceding commands
    again. Then, rename `start()` as `start2()`, and `start2()` as `start()`, and
    run the previous commands yet again. And so on, until all the `start()` methods
    are executed. This way you will see the results of all the examples in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This concludes the high-level presentation of JavaFX. With that, we move to
    the most exciting (for any programmer) part: writing code.'
  prefs: []
  type: TYPE_NORMAL
- en: HelloWorld with JavaFX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is the `HelloWorld` JavaFX application that shows the `Hello, World!`
    and `Exit` text:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the application is launched by calling the `Application.launch(String...
    args)` static method. The `start(Stage primaryStage)` method creates a `Text`
    node with the message `Button`, with the text `Exit` located at the absolute position
    155 (horizontally) and 80 (vertically). The action, assigned to `Button` (when
    it is clicked), prints `Platform.exit()` method. These two nodes are added as
    children to the layout pane, which allows absolute positioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Stage` object is assigned the title of `The primary stage (top-level container)`.
    It is also assigned an action on clicking the close-the-window symbol (the **x**
    button) in the windowâ€™s upper corner: top left on the Linux system and top right
    on the Windows system.'
  prefs: []
  type: TYPE_NORMAL
- en: While creating actions, we have used a Lambda expression, which we are going
    to discuss in [*Chapter 13*](B18388_13_ePub.xhtml#_idTextAnchor281), *Functional
    Programming*.
  prefs: []
  type: TYPE_NORMAL
- en: The created layout pane is set on a `Scene` object. The scene size is set to
    350 pixels horizontally and 150 pixels vertically. The `Scene` object is placed
    on the stage. Then, the stage is displayed by calling the `show()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the preceding application (the `start()` method of the `HellowWorld`
    class), the following window will pop up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the **Exit** button results in the expected message being displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'But, if you need to do something else after the `stop()` method to the `HelloWorld`
    class. In this example it looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'If you click the **x** button or the **Exit** button, the display will show
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example gives you a sense of how JavaFX works. From now on, while reviewing
    the JavaFX capabilities, we will present only the code in the `start()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The toolkit has a huge number of packages, each with many classes, and each
    class having many methods. We wonâ€™t be able to discuss all of them. Instead, we
    are going to present just an overview of all the major areas of the JavaFX functionality
    in the most simple and straightforward way we can.
  prefs: []
  type: TYPE_NORMAL
- en: Control elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `javafx.scene.control` package ([https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html](https://openjfx.io/javadoc/11/javafx.controls/javafx/scene/control/package-summary.html)).
    There are more than 80 of them, including a button, text field, checkbox, label,
    menu, progress bar, and scroll bar, to name a few. As we have mentioned already,
    each control element is a subclass of `Node` that has more than 200 methods. So,
    you can imagine how rich and fine-tuned a GUI can be when built using JavaFX.
    However, the scope of this book allows us to cover only a few elements and their
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: We have already implemented a button in the example in the preceding section.
    Letâ€™s now use a label and a text field to create a simple form with input fields
    (first name, last name, and age) and a `start()` method in the `HelloWorld` class
    (rename the previous `start()` method `start1()`, and rename the `start2()` method
    `start()`).
  prefs: []
  type: TYPE_NORMAL
- en: 'First, letâ€™s create controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can guess, the text will be used as the form instructions. The rest
    is quite straightforward and looks very similar to what we have seen in the `HelloWorld`
    example. `action()` is a function implemented as the following method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This function accepts three parameters (the `javafx.scene.control.TextField`
    objects), then gets the submitted input values and just prints them. The code
    makes sure that there are always some default values available for printing, and
    that entering a non-numeric value of `age` does not break the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the controls and action in place, we then put them into a grid layout
    using the `javafx.scene.layout.GridPane` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The `GridPane` layout pane has rows and columns that form cells in which the
    nodes can be set. Nodes can span columns and rows. The `setAlignment()` method
    sets the position of the grid to the center of a scene (the default position is
    the top left of a scene). The `setHgap()` and `setVgap()` methods set the spacing
    (in pixels) between the columns (horizontally) and rows (vertically). The `setPadding()`
    method adds some space along the borders of the grid pane. The `Insets()` object
    sets the values (in pixels) in the order of top, right, bottom, and left.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to place the created nodes in the corresponding cells (arranged
    in two columns):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The `add()` method accepts either three or five parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: The node, the column index, and the row index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The node, the column index, the row index, how many columns to span, and how
    many rows to span
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The columns and rows indices start from `0`.
  prefs: []
  type: TYPE_NORMAL
- en: The `setHalignment()` method sets the position of the node in the cell. The
    `HPos` enum has values `LEFT`, `RIGHT`, and `CENTER`. The `addRow(int i, Node...
    nodes)` method accepts the row index and the varargs of nodes. We use it to place
    the `Label` and `TextField` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The rest of the `start()` method is very similar to the `HelloWorld` example
    (only the title and size have changed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the newly implemented `start()` method, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can fill the data as follows, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After you click the **Submit** button, the following message is displayed and
    the application exits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To help visualize the layout, especially in the case of a more complex design,
    you can use the `setGridLinesVisible(boolean v)` grid method to make the grid
    lines visible. It helps to see how the cells are aligned. We can add (uncomment)
    the following line to our example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'We run it again, and the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the layout is now outlined explicitly, which helps us to visualize
    the design.
  prefs: []
  type: TYPE_NORMAL
- en: The `javafx.scene.layout` package includes 24 layout classes such as `Pane`
    (we saw it in the `HelloWorld` example), `StackPane` (allows us to overlay nodes),
    `FlowPane` (allows the positions of nodes to flow as the size of the window changes),
    and `AnchorPane` (preserves the nodesâ€™ position relative to their anchor point),
    to name a few. The `VBox` layout will be demonstrated in the next section, *Charts*.
  prefs: []
  type: TYPE_NORMAL
- en: Charts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JavaFX provides the following chart components for data visualization in the
    `javafx.scene.chart` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LineChart`: Adds a line between the data points in a series. Typically used
    to present the trends over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AreaChart`: Similar to `LineChart`, but fills the area between the line that
    connects the data points and the axis. Typically used for comparing cumulated
    totals over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BarChart`: Presents data as rectangular bars. Used for visualization of discrete
    data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PieChart`: Presents a circle divided into segments (filled with different
    colors), each segment representing a value as a proportion of the total. We will
    demonstrate it in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BubbleChart`: Presents data as two-dimensional oval shapes called bubbles,
    which allow presenting three parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ScatterChart`: Presents the data points in a series as is. Useful to identify
    the presence of a clustering (data correlation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example (the `start3()` method of the `HellowWorld` class) demonstrates
    how the result of testing can be presented as a pie chart. Each segment represents
    the number of tests succeeded, failed, or ignored:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: We have created two nodesâ€”`Text` and `PieChart`â€”and placed them in the cells
    of the `VBox` layout, which sets them in a column, one above another. We have
    added the padding of 10 pixels around the edges of the `VBox` pane. Notice that
    VBox extends the `Node` and `Pane` classes, as other panes do, too. We have also
    positioned the pane in the center of the scene using the `setAlignment()` method.
    The rest is the same as all other previous examples, except the scene title and
    size.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run this example (rename the previous `start()` method `start2()`, and
    rename the `start3()` method `start()`), the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `PieChart` class, as well as any other chart, has several other methods
    that can be useful for presenting more complex and dynamic data in a user-friendly
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: Now, letâ€™s discuss how you can enrich the look and feel of your application
    by using the power of **Cascading Style Sheets** (**CSS**).
  prefs: []
  type: TYPE_NORMAL
- en: Applying CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, JavaFX uses the style sheet that comes with the distribution JAR
    file. To override the default style, you can add a style sheet to the scene using
    the `getStylesheets()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'The `mystyle.css` file has to be placed in the `src/main/resources` folder.
    Letâ€™s do it, and add the `mystyle.css` file with the following content to the
    `HelloWorld` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, we would like to style the `Button` node and the `Text` node
    that has a `text-hello` ID in a certain way. We also have to modify the `HelloWorld`
    example by adding the ID to the `Text` element and the style sheet file to the
    scene (the `start4()` method):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run this code (rename the previous `start()` method `start3()` and rename
    the `start4()` method `start()`), the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, an inline style can be set on any node that will be used to
    overwrite the file style sheet, default or not. Letâ€™s add (uncomment) the following
    line to the latest version of the `HelloWorld` example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the example again, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Look through the JavaFX CSS reference guide ([https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html](https://docs.oracle.com/javafx/2/api/javafx/scene/doc-files/cssref.html))
    to get an idea of the variety and possible options for custom styling.
  prefs: []
  type: TYPE_NORMAL
- en: Now, letâ€™s discuss an alternative way of building a user interface for an FX
    application, without writing Java code, by using **FX Markup Language** (**FXML**).
  prefs: []
  type: TYPE_NORMAL
- en: Using FXML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**FXML** is an XML-based language that allows building a user interface and
    maintaining it independently of the application (business) logic (as far as the
    look and feel are concerned, or other presentation-related changes). Using FXML,
    you can design a user interface without even writing one line of Java code.'
  prefs: []
  type: TYPE_NORMAL
- en: FXML does not have a schema, but its capabilities reflect the API of the JavaFX
    objects used to build a scene. This means you can use the API documentation to
    understand what tags and attributes are allowed in the FXML structure. Most of
    the time, JavaFX classes can be used as tags and their properties as attributes.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the FXML file (the view), the controller (Java class) can be
    used for processing the model and organizing the page flow. The model consists
    of domain objects managed by the view and the controller. It also allows using
    all the power of CSS styling and JavaScript. But, in this book, we will be able
    to demonstrate only the basic FXML capabilities. The rest you can find in the
    FXML introduction ([https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html](https://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html))
    and many good tutorials available online.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate FXML usage, we are going to reproduce the simple form we created
    in the *Control elements* section and then enhance it by adding the page flow.
    Hereâ€™s how our form, with first name, last name, and age, can be expressed in
    FXML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, it expresses the desired scene structure, familiar to you already,
    and specifies the controller class, `HelloWorldController`, which we are going
    to see shortly. As we have mentioned already, the tags match the class names we
    have been using to construct the same GUI with Java only. We put the preceding
    FXML code (as the `helloWorld.fxml` file) into the `resources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, letâ€™s look at the `start5()` method (rename it `start()`) of the `HelloWorld`
    class that uses the `helloWorld.fxml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: The `start()` method just loads the `helloWorld.fxml` file and sets the stage,
    the latter being done exactly as in our previous examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, letâ€™s look at the `HelloWorldController` class. If need be, we could launch
    the application having only the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: 'The form would be presented, but the button click would do nothing. That is
    what we meant while talking about the user interface development independent of
    the application logic. Notice the `@FXML` annotation. It binds the method and
    properties to the FXML tags using their IDs. Here is how the full controller implementation
    looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: 'It should look very familiar to you for the most part. The only difference
    is that we refer to the fields and their values not directly (as previously),
    but using binding marked with the `@FXML` annotation. If we run the `HelloWorld`
    class now (donâ€™t forget to rename the `start5()` method as `start()`), the page
    appearance and behavior will be exactly the same as we described in the *Control
    elements* section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the **x** button in the upper corner is clicked, the following output appears
    on the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If the **Submit** button is clicked, the output shows the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, letâ€™s look at the standalone GUI application with two pages implemented
    as a separate project in the `gui` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As you can see, this application consists of the main `GuiApp` class, two `Controller`
    classes, the `User` class, and two pages (the `.fxml` files). Let us start from
    the `.fxml` files. To make it simple, the `page01.fxml` file has almost exactly
    the same content as the `helloWorld.fxml` file described in the preceding section.
    The only difference is that it refers to the `Controller01` class, which has the
    `start()` method implemented exactly as the `start5()` method described previously,
    too. The main `GuiApp` class looks very simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it just invokes the `start()` method in the `Controller01`
    class, which in turn displays the familiar page to your form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After the form is filled and the `Controller01` class and then passed to the
    `Controller02` class, using the `submitClicked()` method of the `Controller01`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Controller02.goToPage2()` method looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: 'The second page just presents the received data. Here is how its FXML looks
    (the `page2.fxml` file):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the page has only two read-only `Text` fields. The first one
    (with `id="textHello"`) shows the data passed from the previous page. The second
    just shows the message, `Do what has to be done here`. This is not very sophisticated,
    but it demonstrates how the flow of data and pages can be organized.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute the `GuiApp` class, we will see the familiar form and can fill
    it with data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we click the **Submit** button, this window will be closed and the new
    one will appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can click the **x** button in the upper-left corner (or in the upper-right
    corner on Windows) and see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `stop()` method worked as expected.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we conclude our presentation of FXML and move to the next topic of
    adding HTML to the JavaFX application.
  prefs: []
  type: TYPE_NORMAL
- en: Embedding HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add HTML to JavaFX is easy. All you have to do is to use the `javafx.scene.web.WebView`
    class, which provides a window where the added HTML is rendered similar to how
    it happens in a browser. The `WebView` class uses WebKit, the open source browser
    engine, and thus supports full browsing functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Like all other JavaFX components, the `WebView` class extends the `Node` class
    and can be treated in the Java code as such. In addition, it has its own properties
    and methods that allow adjusting the browser window to the encompassing application
    by setting the window size (maximum, minimum, and preferred height and width),
    font scale, zoom rate, adding CSS, enabling the context (right-click) menu, and
    similar. The `getEngine()` method returns a `javafx.scene.web.WebEngine` object
    associated with it. It provides the ability to load HTML pages, navigate them,
    apply different styles to the loaded pages, access their browsing history and
    the document model, and execute JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start using the `javafx.scene.web` package, two steps have to be taken first:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The version of `javafx-web` typically stays abreast with the Java version, but
    at the time of writing, version 12 of `javafx-web` has not yet been released,
    so we are using the latest available version, *11.0.2*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since `javafx-web` uses the `com.sun.*` packages, which have been removed from
    Java 9 ([https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-F7696E02-A1FB-4D5A-B1F2-89E7007D4096](https://docs.oracle.com/javase/9/migrate/toc.htm#JSMIG-GUID-F7696E02-A1FB-4D5A-B1F2-89E7007D4096)),
    to access the `com.sun.*` packages from Java 9+, set the following VM options
    in addition to `--module-path` and `--add-modules`, described in the JavaFX fundamentals
    section in `Run/Debug Configuration` of the `HtmlWebView` class of the `ch12_gui`
    package (for Windows, change the slash sign to the backward slash):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To execute the `HtmlWebView` class from the command line, go to the `examples`
    folder and use the following command for Unix/Linux/macOS systems (don''t forget
    to substitute `/path/JavaFX` with the actual path to the folder that contains
    the JavaFX SDK):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Windows, the same command looks as follows (don''t forget to substitute
    `C:\path\JavaFX` with the actual path to the folder that contains the JavaFX SDK):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `HtmlWebView` class contains several `start()` methods too. Rename and execute
    them one by one, as described in the *JavaFX fundamentals* section.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s look at a few examples now. We create a new application, `HtmlWebView`,
    and set VM options for it with the VM options (`--module-path`, `--add-modules`,
    and `--add-exports`) we have described. Now, we can write and execute code that
    uses the `WebView` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, here is how simple HTML can be added to the JavaFX application (the
    `start()` method in the `HtmlWebView` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code creates a `WebView` object, gets the `WebEngine` object
    from it, uses the acquired `WebEngine` object to load the HTML, sets the `WebView`
    object on the scene, and configures the stage. The `loadContent()` method accepts
    two strings: the content and its mime type. The content string can be constructed
    in the code or created from reading the `.html` file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we run the `HtmlWebView` class, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If necessary, you can show other JavaFX nodes along with the `WebView` object
    in the same window. For example, letâ€™s add a `Text` node above the embedded HTML
    (the `start2()` method in the `HtmlWebView` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the `WebView` object is not set on the scene directly, but
    on the layout object instead, along with a `txt` object. Then, the layout object
    is set on the scene. The result of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'With a more complex HTML page, it is possible to load it from the file directly,
    using the `load()` method. To demonstrate this approach, letâ€™s create a `form.html`
    file in the `resources` folder with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE333]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE334]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE335]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE336]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE337]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: 'This HTML presents a form similar to the one we have created in the *Using
    FXML* section. After the `\formHandler` URI (see the `<form>` HTML tag). To present
    this form inside a JavaFX application, the following code can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, the difference from our other examples is that we now use the
    `File` class and its `toURI()` method to access the HTML in the `src/main/resources/form.html`
    file directly, without converting the content to a string first. If you run the
    `start3()` method (renamed `start()` ) of the `HtmlWebView` class, the result
    looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This solution is useful when you need to send a request or post data from your
    JavaFX application. But, when the form you would like a user to fill is already
    available on the server, you can just load it from the URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, letâ€™s incorporate a Google search in the JavaFX application. We
    can do it by changing the parameter value of the `load()` method to the URL of
    the page we would like to load (the `start4()` method of the `HtmlWebView` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE362]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE363]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE364]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE365]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE366]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE367]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE368]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE369]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE370]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE371]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE372]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE373]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE374]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE375]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE376]'
  prefs: []
  type: TYPE_PRE
- en: 'We have also added a style to the layout in order to increase the font and
    add color to the background, so we can see the outline of the area where the rendered
    HTML is embedded. When we run this example (donâ€™t forget to rename the `start4()`
    method `start()`), the following window appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this window, you can perform all the aspects of a search that you usually
    access via the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'And, as we have mentioned already, you can zoom into the rendered page. For
    example, if we add the `wv.setZoom(1.5)` line to the preceding example, the result
    will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, we can set the scale for the font and even the style from a file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE377]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE378]'
  prefs: []
  type: TYPE_PRE
- en: Notice, though, that we set the font scale on the `WebView` object, while we
    set the style in the `WebEngine` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also access (and manipulate) the DOM object of the loaded page using
    the `WebEngine` class method, `getDocument()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE379]'
  prefs: []
  type: TYPE_PRE
- en: 'And, we can access the browsing history, get the current index, and move the
    history backward and forward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE380]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE381]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE382]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE383]'
  prefs: []
  type: TYPE_PRE
- en: 'For each entry of the history, we can extract its URL, title, or last-visited
    date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE384]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE385]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE386]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE387]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE388]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE389]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE390]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE391]'
  prefs: []
  type: TYPE_PRE
- en: Read the documentation of the `WebView` and `WebEngine` classes to get more
    ideas about how you can take advantage of their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Playing media
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Adding an image to a scene of the JavaFX application does not require the `com.sun.*`
    packages, so the `--add-export` VM options listed in the *Embedding HTML* section
    are not needed. But, it doesnâ€™t hurt to have them anyway, so leave the `--add-export`
    options in place if you have added them already.
  prefs: []
  type: TYPE_NORMAL
- en: 'An image can be included in a scene using the `javafx.scene.image.Image` and
    `javafx.scene.image.ImageView` classes. To demonstrate how to do it, we are going
    to use the Packt logo, `packt.png`, located in the `resources` folder. Here is
    the code that does it (the `start6()` method of the `HelloWorld` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE392]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE393]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE394]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE395]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE396]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE397]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE398]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE399]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE400]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE401]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE402]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE403]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE404]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE405]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE406]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE407]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE408]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the preceding code, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The currently supported image formats are BMP, GIF, JPEG, and PNG. Look through
    the API of the `Image` and `ImageView` classes ([https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/image/package-summary.html](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/image/package-summary.html))
    to learn the many ways an image can be formatted and adjusted as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, letâ€™s see how to use other media files in a JavaFX application. Playing
    an audio or movie file requires the `--add-export` VM options listed in the *Embedding
    HTML* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The currently supported encodings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AAC`: **Advanced Audio Coding** audio compression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`H.264/AVC`: H.264/MPEG-4 Part 10 / **AVC** (**Advanced Video Coding**) video
    compression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MP3`: Raw MPEG-1, 2, and 2.5 audio; layers I, II, and III'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PCM`: Uncompressed, raw audio samples'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can see a more detailed description of the supported protocols, media containers,
    and metadata tags in the API documentation ([https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html](https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three classes allow constructing a media player that can be added
    to a scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE409]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE410]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE411]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Media` class represents the source of the media. The `MediaPlayer` class
    provides all the methods that control the media playback: `play()`, `stop()`,
    `pause()`, `setVolume()`, and similar. You can also specify the number of times
    that the media should be played. The `MediaView` class extends the `Node` class
    and can be added to a scene. It provides a view of the media being played by the
    media player and is responsible for a media appearance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the demonstration, letâ€™s run the `start5()` method of the `HtmlWebView`
    class, which plays the `jb.mp3` file located in the `resources` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE412]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE413]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE414]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE415]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE416]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE417]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE418]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE419]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE420]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE421]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE422]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE423]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE424]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE425]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE426]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE427]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE428]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE429]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE430]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE431]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE432]'
  prefs: []
  type: TYPE_PRE
- en: Notice how a `Media` object is constructed based on the source file. The `MediaPlayer`
    object is constructed based on the `Media` object and then set as a property of
    the `MediaView` class constructor. The `MediaView` object is set on the scene
    along with two `Text` objects. We use the `VBox` object to provide the layout.
    Finally, after the scene is set on the stage and the stage becomes visible (after
    the `show()` method completes), the `play()` method is invoked on the `MediaPlayer`
    object. By default, the media is played once.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we execute this code, the following window will appear and the `jb.m3` file
    will be played:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We could add controls to stop, pause, and adjust the volume, but it would require
    much more code, and that would go beyond the scope of this book. You can find
    a guide on how to do it in the Oracle online documentation ([https://docs.oracle.com/javafx/2/media/jfxpub-media.htm](https://docs.oracle.com/javafx/2/media/jfxpub-media.htm)).
  prefs: []
  type: TYPE_NORMAL
- en: 'A `sea.mp4` movie file can be played similarly (the `start6()` method of the
    `HtmlWebView` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE433]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE434]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE435]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE436]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE437]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE438]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE439]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE440]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE441]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE442]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE443]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE444]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE445]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE446]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE447]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE448]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE449]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE450]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE451]'
  prefs: []
  type: TYPE_PRE
- en: 'The only difference is the different sizes of the scene needed to show the
    full frame of this particular clip. We figured out the necessary size after several
    trial-and-error adjustments. Alternatively, we could use the `MediaView` methods
    (`autosize()`, `preserveRatioProperty()`, `setFitHeight()`, `setFitWidth()`, `fitWidthProperty()`,
    `fitHeightProperty()`, and similar) to adjust the size of the embedded window
    and to match the size of the scene automatically. If we execute the preceding
    example, the following window will pop up and play the clip:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can even combine playing both audio and video files in parallel, and thus
    provide a movie with a soundtrack (the `start7()` method of the `HtmlWebView`
    class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE452]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE453]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE454]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE455]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE456]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE457]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE458]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE459]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE460]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE461]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE462]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE463]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE464]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE465]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE466]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE467]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE468]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE469]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE470]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE471]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE472]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE473]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE474]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE475]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE476]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE477]'
  prefs: []
  type: TYPE_PRE
- en: It is possible to do this because each of the players is executed by its own
    thread.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about the `javafx.scene.media` package, read the API and
    the developer guide online, links to which are provided here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html](https://openjfx.io/javadoc/11/javafx.media/javafx/scene/media/package-summary.html)
    for the API of the `javafx.scene.media` package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.oracle.com/javafx/2/media/jfxpub-media.htm](https://docs.oracle.com/javafx/2/media/jfxpub-media.htm)
    for a tutorial on the usage of the `javafx.scene.media` package'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `javafx.scene.effects` package contains many classes that allow the adding
    of various effects to the nodes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Blend`: Combines pixels from two sources (typically images) using one of the
    pre-defined `BlendModes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Bloom`: Makes the input image brighter, so that it appears to glow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BoxBlur`: Adds blur to an image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorAdjust`: Allows adjustments of hue, saturation, brightness, and contrast
    to an image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ColorInput`: Renders a rectangular region that is filled with the given paint'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DisplacementMap`: Shifts each pixel by a specified distance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DropShadow`: Renders a shadow of the given content behind the content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GaussianBlur`: Adds blur using a particular (Gaussian) method'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Glow`: Makes the input image appear to glow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`InnerShadow`: Creates a shadow inside the frame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Lighting`: Simulates a light source shining on the content and makes flat
    objects look more realistic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MotionBlur`: Simulates the given content seen in motion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PerspectiveTransform`: Transforms the content as seen in a perspective'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Reflection`: Renders a reflected version of the input below the actual input
    content'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SepiaTone`: Produces a sepia tone effect, similar to the appearance of antique
    photographs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shadow`: Creates a monochrome duplicate of the content with blurry edges'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All effects share a parent, the `Effect` abstract class. The `Node` class has
    the `setEffect(Effect e)` method, which means that any of the effects can be added
    to any node. That is the main way of applying effects to the nodesâ€”the actors
    that produce a scene on a stage (if we recall our analogy introduced at the beginning
    of this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: The only exception is the `Blend` effect, which makes its usage more complicated
    than the use of other effects. In addition to using the `setEffect(Effect e)`
    method, some of the `Node` class children also have the `setBlendMode(BlendMode
    bm)` method, which allows regulating how the images blend into one another when
    they overlap. So, it is possible to set different blend effects in different ways
    that override one another and produce an unexpected result that may be difficult
    to debug. That is what makes the `Blend` effect usage more complicated, and that
    is why we are going to start the overview with how the `Blend` effect can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Three aspects regulate the appearance of the area where two images overlap
    (we use two images in our examples to make it simpler, but, in practice, many
    images can overlap):'
  prefs: []
  type: TYPE_NORMAL
- en: '**The value of the opacity property**: This defines how much can be seen through
    the image; the opacity value 0.0 means the image is fully transparent, while the
    opacity value 1.0 means nothing behind it can be seen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The alpha value and strength of each color**: This defines the transparency
    of the color as a double value in the range 0.0-1.0 or 0-255.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The blending mode, defined by the BlendMode enum value**: Depending on the
    mode, opacity, and alpha value of each color, the result might also depend on
    the sequence in which the images were added to the scene; the first added image
    is called a bottom input, while the second of the overlapping images is called
    a top input. If the top input is completely opaque, the bottom input is hidden
    by the top input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The resulting appearance of the overlapping area is calculated based on the
    opacity, the alpha values of the colors, the numeric values (strength) of the
    colors, and the blending mode, which can be one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ADD`: The color and alpha components from the top input are added to those
    from the bottom input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BLUE`: The blue component of the bottom input is replaced with the blue component
    of the top input; the other color components are unaffected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COLOR_BURN`: The inverse of the bottom input color components is divided by
    the top input color components, all of which is then inverted to produce the resulting
    color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COLOR_DODGE`: The bottom input color components are divided by the inverse
    of the top input color components to produce the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DARKEN`: The darker of the color components from the two inputs is selected
    to produce the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DIFFERENCE`: The darker of the color components from the two inputs is subtracted
    from the lighter one to produce the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EXCLUSION`: The color components from the two inputs are multiplied and doubled,
    and then subtracted from the sum of the bottom input color components, to produce
    the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GREEN`: The green component of the bottom input is replaced with the green
    component of the top input; the other color components are unaffected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HARD_LIGHT`: The input color components are either multiplied or screened,
    depending on the top input color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LIGHTEN`: The lighter of the color components from the two inputs is selected
    to produce the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MULTIPLY`: The color components from the first input are multiplied by those
    from the second input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OVERLAY`: The input color components are either multiplied or screened, depending
    on the bottom input color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RED`: The red component of the bottom input is replaced with the red component
    of the top input; the other color components are unaffected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SCREEN`: The color components from both of the inputs are inverted, multiplied
    with each other, and that result is again inverted to produce the resulting color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SOFT_LIGHT`: The input color components are either darkened or lightened,
    depending on the top input color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SRC_ATOP`: The part of the top input lying inside the bottom input is blended
    with the bottom input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SRC_OVER`: The top input is blended over the bottom input.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To demonstrate the `Blend` effect, letâ€™s create another application, called
    `BlendEffect`. It does not require the `com.sun.*` packages, so the `--add-export`
    VM options are not needed. Only the `--module-path` and `--add-modules` options,
    described in the *JavaFX fundamentals* section, have to be set for compilation
    and execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The scope of this book does not allow us to demonstrate all possible combinations,
    so we will create a red circle and a blue square (see the `BlendEffect` class):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE478]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE479]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE480]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE481]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE482]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE483]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE484]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE485]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE486]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE487]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE488]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE489]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE490]'
  prefs: []
  type: TYPE_PRE
- en: We used the `Color.rgb(int red, int green, int blue, double alpha)` method to
    define the colors of each of the figures, but there are many more ways to do it.
    Read the `Color` class API documentation for more details ([https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/paint/Color.html](https://openjfx.io/javadoc/11/javafx.graphics/javafx/scene/paint/Color.html)).
  prefs: []
  type: TYPE_NORMAL
- en: 'To overlap the created circle and square, we will use the `Group` node:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE491]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE492]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE493]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, the square is a bottom input. We will also create a
    group where the square is a top input:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE494]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE495]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE496]'
  prefs: []
  type: TYPE_PRE
- en: The distinction is important because we defined the circle as half-opaque, while
    the square was completely opaque. We will use the same settings throughout all
    our examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s compare the two modes, `MULTIPLY` and `SRC_OVER`. We will set them on
    the groups, using the `setEffect()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE497]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE498]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE499]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE500]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE501]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE502]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `start()` method of the called `BlendEffect` class, for each mode, we
    create two groups, one with the input where the circle is on top of the square,
    and another with the input where the square is on top of the circle, and we put
    the four created groups in a `GridPane` layout (see the source code for details).
    If we run the `BlendEffect` application, the result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As was expected, when the square is on the top (the two images on the right),
    the overlapping area is completely taken by the opaque square. But, when the circle
    is a top input (the two images on the left), the overlapped area is somewhat visible
    and calculated based on the blend effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if we set the same mode directly on the group, the result will be
    slightly different. Letâ€™s run the same code but with the mode set on the group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE503]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE504]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE505]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE506]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following code in the `start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE507]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE508]'
  prefs: []
  type: TYPE_PRE
- en: 'And change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE509]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE510]'
  prefs: []
  type: TYPE_PRE
- en: 'If we run the `BlendEffect` class again, the result will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the red color of the circle has slightly changed and there is
    no difference between the `MULTIPLY` and `SRC_OVER` modes. That is the issue with
    the sequence of adding the nodes to the scene we mentioned at the beginning of
    the section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result also changes depending on which node the effect is set on. For example,
    instead of setting the effect on the group, letâ€™s set the effect on the circle
    only:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE511]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE512]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE513]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE514]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE515]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE516]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following code in the `start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE517]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE518]'
  prefs: []
  type: TYPE_PRE
- en: 'And change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE519]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE520]'
  prefs: []
  type: TYPE_PRE
- en: 'We run the application and see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The two images on the right remain the same as in all the previous examples,
    but the two images on the left show the new colors of the overlapping area. Now,
    letâ€™s set the same effect on the square instead of the circle, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE521]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE522]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE523]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE524]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE525]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE526]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following code in the `start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE527]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE528]'
  prefs: []
  type: TYPE_PRE
- en: 'And change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE529]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE530]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will slightly change again and will look as presented in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is no difference between the `MULTIPLY` and `SRC_OVER` modes, but the
    red color is different than it was when we set the effect on the circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can change the approach again and set the blend mode directly on the circle
    only, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE531]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE532]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE533]'
  prefs: []
  type: TYPE_PRE
- en: 'Locate the following code in the `start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE534]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE535]'
  prefs: []
  type: TYPE_PRE
- en: 'And change it to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE536]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE537]'
  prefs: []
  type: TYPE_PRE
- en: 'The result changes again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the blend mode on the square only removes the difference between the
    `MULTIPLY` and `SRC_OVER` modes again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the following code in the `start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE538]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE539]'
  prefs: []
  type: TYPE_PRE
- en: 'And change it to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE540]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE541]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To avoid confusion and make the results of the blending more predictable, you
    have to watch the sequence in which the nodes are added to the scene and the consistency
    of the way the blend effect is applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the source code provided with this book, you will find examples for all
    effects included in the `javafx.scene.effects` package. They are all demonstrated
    by running side-by-side comparisons. Here is one example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For your convenience, there are **Pause** and **Continue** buttons provided
    that allow you to pause the demonstration and review the result for different
    values of opacity set on the blend effect.
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate all other effects, we have created yet another application,
    called `OtherEffects`, which also doesnâ€™t require the `com.sun.*` packages, so
    the `--add-export` VM options are not needed. The effects demonstrated include
    `Bloom`, `BoxBlur`, `ColorAdjust`, `DisplacementMap`, `DropShadow`, `Glow`, `InnerShadow`,
    `Lighting`, `MotionBlur`, `PerspectiveTransform`, `Reflection`, `ShadowTone`,
    and `SepiaTone`. We have used two images to present the result of applying each
    of the effects (the Packt logo and a mountain lake view):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE542]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE543]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE544]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE545]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE546]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE547]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE548]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE549]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE550]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE551]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have added two buttons that allow you to pause and continue the demonstration
    (it iterates over the effect and the values of their parameters):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE552]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE553]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE554]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE555]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE556]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE557]'
  prefs: []
  type: TYPE_PRE
- en: 'The `et` object is the object of the `EffectsThread` thread:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE558]'
  prefs: []
  type: TYPE_PRE
- en: 'The thread goes through the list of the effects, creates a corresponding effect
    10 times (with 10 different effectsâ€™ parameter values), and, every time, sets
    the created `Effect` object on each of the images, then sleeps for 1 second to
    give you an opportunity to review the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE559]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE560]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE561]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE562]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE563]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE564]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE565]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE566]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE567]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE568]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE569]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE570]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE571]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE572]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE573]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE574]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE575]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE576]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE577]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE578]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE579]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE580]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE581]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE582]'
  prefs: []
  type: TYPE_PRE
- en: 'We will show how each effect is created next, under the screenshot with the
    effectâ€™s result. To present the result, we have used the `GridPane` layout:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE583]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE584]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE585]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE586]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE587]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE588]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE589]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE590]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE591]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE592]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE593]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE594]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE595]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE596]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE597]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE598]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE599]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally, the created `GridPane` object was passed to the scene, which
    in turn was placed on a stage familiar to you from our earlier examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE600]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE601]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE602]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE603]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE604]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE605]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshots depict examples of the effects of each of the 13
    parameter values. Under each screenshot, we present the code snippet from the
    `createEffect(String effect, double d, Text txt)` method that created this effect:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Effect of parameter value 1:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE606]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE607]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE608]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE609]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 2:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE610]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE611]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE612]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE613]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE614]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE615]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 3:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE616]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE617]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE618]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE619]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 4:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE620]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE621]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE622]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE623]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 5:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE624]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE625]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE626]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE627]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 6:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE628]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE629]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE630]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE631]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE632]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE633]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE634]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE635]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE636]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE637]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE638]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE639]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE640]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE641]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE642]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 7:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE643]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE644]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE645]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE646]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE647]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 8:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE648]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE649]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE650]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE651]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE652]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE653]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE654]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE655]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 9:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE656]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE657]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE658]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE659]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE660]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE661]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE662]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE663]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE664]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE665]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE666]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE667]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE668]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 10:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE669]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE670]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE671]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE672]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE673]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 11:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE674]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE675]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE676]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE677]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE678]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 12:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE679]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE680]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE681]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE682]'
  prefs: []
  type: TYPE_PRE
- en: 'Effect of parameter value 13:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B18388_Figure_12.47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE683]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE684]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE685]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE686]'
  prefs: []
  type: TYPE_PRE
- en: The full source code of this demonstration is provided with the book and is
    available on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you were introduced to the JavaFX kit, its main features, and
    how it can be used to create a GUI application. The topics covered included an
    overview of Java GUI technologies, the JavaFX control elements, charts, using
    CSS, FXML, embedding HTML, playing media, and adding effects.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can create a user interface using Java GUI technologies, as well as
    creating and using a user interface project as a standalone application.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is dedicated to functional programming. It provides an overview
    of functional interfaces that come with JDK, explains what a Lambda expression
    is, and how to use a functional interface in a Lambda expression. It also explains
    and demonstrates how to use method references.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the top-level content container in JavaFX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the base class of all the scene participants in JavaFX?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the base class of a JavaFX application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is one method of the JavaFX application that has to be implemented?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `Application` method has to be called by the `main` method to execute
    a JavaFX application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which two VM options are required to execute a JavaFX application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which `Application` method is called when the JavaFX application window is closed
    using the **x** button in the upper corner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which class has to be used to embed HTML?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name three classes that have to be used to play media.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the VM option required to be added in order to play media?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name five JavaFX effects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
