["```java\npackage com.packt.courseware\nimport scala.io.StdIn\nobject Chatbot1\n{\n   def main(args: Array[String]):Unit =  {\n     // do something\n   }\n}\n```", "```java\n         package com.packt.couserware\n    object X  { def f() = { … } }\n```", "```java\ndef main(args: Array[String]): Unit = {\nval name = StdIn.readLine(\"Hi! What is your name?\")\nprintln(s\" $name, tell me something interesting, say 'bye' to end the talk\")\nvar timeToBye = false  \nwhile (!timeToBye)timeToBye = StdIn.readLine(\">\") \nmatch {case \"bye\" => println(\"ok, bye\")\n                             truecase  _      => println(\"interesting...\")false}\n}\n```", "```java\npackage com.packt.coursewarepackage com.packt.courseware\n\nimport scala.io.StdIn\n\nobject Chatbot1 {\n\n  def main(args: Array[String]): Unit = {\n    val name = StdIn.readLine(\"Hi! What is your name?\")\n    println(s\" $name, tell me something interesting, say 'bye' to end the talk\")\n    var timeToBye = false\n    while (!timeToBye)\n       timeToBye = StdIn.readLine(\">\") match {\n         case \"bye\" => println(\"ok, bye\")\n         true\n         case \"time\" => println(s\"time is ${java.time.LocalTime.now()}\")\n         true\n         case _ => println(\"interesting...\")\n         false\n       }\n}\n\n}\n```", "```java\norganization := \"com.packt.courseware\"name := \"chatbot1\"version := \"0.1-SNAPSHOT\"\nscalaVersion := \"2.12.4\"\n```", "```java\nrssh3:1-project rssh$ sbt run\n[info] Loading global plugins from /Users/rssh/.sbt/0.13/plugins\n[info] Set current project to chatbot1 (in build file:/Users/rssh/work/packt/professional-scala/Lesson 1/1-project/)\n[info] Running com.packt.courseware.Chatbot1\nHi! What is your name? Jon\n  Jon, tell me something interesting, say 'bye' to end the talk\n```", "```java\n>qqq\ninteresting..\n>ddd\ninteresting...\n>bye\nok, bye\n [success] Total time: 19 s, completed Dec 1, 2017 7:18:42 AM\n```", "```java\n    sbt console\n    ```", "```java\n    case \"time\" =>\n    ```", "```java\n         java.time.LocalTime.now()\n    ```", "```java\n    println(\"time is ${java.time.LocalTime.now()}\")\n    ```", "```java\ndef main(args: Array[String]): Unit = {\nval name = StdIn.readLine(\"Hi! What is your name?\")\nprintln(s\" $name, tell me something interesting, say 'bay' to end the talk\")\nvar timeToBye = false\nwhile (!timeToBye)timeToBye = StdIn.readLine(\">\") \nmatch {case \"bye\" => println(\"ok, bye\")truecase \"time\" => \nprintln(s\"time is ${java.time.LocalTime.now()}\")truecase _ => \nprintln(\"interesting...\")false}\n}\n```", "```java\n> class X {  def f():Int = 1 }\n> Class X defined  // answer in REPL\n```", "```java\n> def f():Int = 1\n```", "```java\n> val x = 1\n```", "```java\n> var y = 2\n```", "```java\n>  object O {  def f():Int =1  }\n>  trait O {  def f():Int =1  } \n```", "```java\n    sbt console\n    ```", "```java\n    >  object ZeroPoint {\n    >     val x:Int = 0\n    >     val y:Int = 0\n    > }\n    ```", "```java\n    { A; B }\n    ```", "```java\n    {\n       A\n       B\n    }\n    ```", "```java\n               >  if (1 == 1)  \"A\"  else \"B\"\n               - let's eval one in REPL\n        ```", "```java\n            >  x match {\n                 case \"Jon\"  =>  doSomethingSpecialForJon()\n                 case \"Joe\" =>   doSomethingSpecialForJoe()\n                 case   _   => doForAll()\n              }\n        ```", "```java\n             var i=0\n              var s=0\n              while(i < 10) {\n                  s = s+i\n                  i = i +1\n              }\n        ```", "```java\n  object Chatbot1 {def printHello():Unit = {\nprintln(\"Hello\")}def main(args: Array[String]): Unit = {\nprintHello() … // unchanged code here\n     }\n}\n```", "```java\nlibraryDependencies += \"org.scalatest\" %% \"scalatest\" % \"3.0.4\" % \"test\"\n```", "```java\n      Lesson 1/2-project\n    ```", "```java\n     > cd  ~/courses/packscala/Lesson 1/2-project\n    ```", "```java\n        > sbt test\n    ```", "```java\n    [info] ExampleSpec:\n    [info] - example test should pass\n    [info] StepTest:\n    [info] - step of unparded word must be interesting\n    ```", "```java\npackage com.packt.courseware.l1\nimport org.scalatest.FunSuite\n\nclass ExampleSpec extends FunSuite {\n\n  test(\"example test  should pass\") {\n     assert(1==1)\n  }\n\n}\n```", "```java\nsbt test\n```", "```java\n          test(\"trivial\")  {\n                assert(false)\n           }\n    ```", "```java\n          test(\"trivial\")  {\n                assert(true)\n           }\n    ```", "```java\npackage com.packt.courseware.l1\n\nimport java.time.LocalTime\nimport java.time.format.DateTimeFormatter\nimport scala.io.StdIn\n\ncase class LineProcessResult(answer:String,timeToBye:Boolean)\n\nobject Chatbot2 {\n\n  def main(args: Array[String]): Unit = {\n    val name = StdIn.readLine(\"Hi! What is your name? \")\n    println(s\" $name, tell me something interesting, say 'bye' to end the talk\")\n\n    var c = LineProcessResult(\"\",false)\n    while(!c.timeToBye){\n      c = step(StdIn.readLine(\">\"))\n      println(c.answer)\n    }\n\n  }\n\n  def step(input:String): LineProcessResult = {\n    input match {\n      case \"bye\" => LineProcessResult(\"ok, bye\", true)\n      case \"time\" => LineProcessResult(LocalTime.now().format(DateTimeFormatter.ofPattern(\"HH:mm:ss\")),false)\n      case _ => LineProcessResult(\"interesting...\", false)\n    }\n  }\n\n}\n```", "```java\npackage com.packt.courseware.l1\n\nimport org.scalatest.FunSuite\n\nclass StepTestSpec extends FunSuite {\n\n  test(\"step of unparded word must be interesting\") {\n    val r = Chatbot2.step(\"qqqq\")\n    assert(! r.timeToBye)\n    assert(r.answer == \"interesting...\")\n  }\n\n}\n```", "```java\n    test(\"after bye, timeToBye should be set to true\")\n    {\n\n    }\n    ```", "```java\n        val r = Chatbot2.step(\"bye\")\n        ```", "```java\n        assert(! r.timeToBye)\n        ```", "```java\n    test(\"after bye, timeToBye should be set to true\") {  \n    val r = Chatbot2.step(\"bye\")\n    assert(! r.timeToBye)\n\n    ```", "```java\ntest(\"local time must be parser\") {\nval r = Chatbot2.step(\"time\")\nval formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\")\nval t = LocalTime.parse(r.answer,formatter)// assertion is not necessary\n}\n```", "```java\n      case \"date\" => LineProcessResult(LocalDate.now().format(DateTimeFormatter.ofPattern(\"dd:YYYY-MM\")),false)\n    ```", "```java\n    test(\"local date must be parser\") {\n    val r = Chatbot2.step(\"date\")\n    val formatter = DateTimeFormatter.ofPattern(\"dd:MM-YYYY\")\n    val t = LocalDate.parse(r.answer,formatter)// assertion is not necessary\n    }\n    ```"]