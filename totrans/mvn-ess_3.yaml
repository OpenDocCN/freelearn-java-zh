- en: Chapter 3. Maven Archetypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The word **archetype** has its roots in Greek literature. It's derived from
    two Greek words, **archein** and **typos**. The word archein means original or
    old, while typos means patterns.
  prefs: []
  type: TYPE_NORMAL
- en: 'The word archetype means original patterns. The famous psychologist, Carl Gustav
    Jung introduced the archetype concept in psychology. Jung argued that there are
    12 different archetypes that represent human motivation, and he further divided
    them into three categories: ego, soul, and self. The innocent, regular guy, hero,
    and caregiver fall under the ego type. The explorer, rebel, lover, and creator
    fall under the soul type. The self type includes jester, sage, magician, and ruler.
    The concept behind Maven archetypes does not deviate a lot from what Jung explained
    in psychology.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows the relationship between a Maven project, a project
    archetype, and projects generated from the archetype:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Maven Archetypes](img/B02157_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we create a Java project, we need to structure it in different ways based
    on the type of the project. If it's a Java EE web application, then we need to
    have a `WEB-INF` directory and a `web.xml` file. If it's a Maven plugin project,
    we need to have a `Mojo` class that extends from `org.apache.maven.plugin.AbstractMojo`.
    As each type of project has its own predefined structure, why would everyone have
    to build the same structure again and again? Why not start with a template? Each
    project can have its own template, and developers can extend the template to suite
    their requirements. Maven archetypes address this concern. Each archetype is a
    project template.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A list of Maven archetypes can be found at [http://maven-repository.com/archetypes](http://maven-repository.com/archetypes).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The Maven archetype plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The most used archetypes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archetype quickstart
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Maven `archetype` is a plugin in itself. We will discuss plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*. The `generate`
    goal of the `archetype` plugin has been used to generate a Maven project from
    an archetype. Let''s start with a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will invoke the `generate` goal of the Maven `archetype` plugin
    to create a simple Java project. You will see that the following project structure
    has been created with a sample POM file. The name of the root or the base directory
    is derived from the value of the `artifactId` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample POM file will only have a dependency to the `junit` JAR file, with
    `test` as the scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated `App.java` class will have the following template code. The name
    of the package is derived from the provided `groupId` parameter. If we want a
    different value as the package name, then we need to pass this value in the command
    itself as `-Dpackage=com.packt.samples.application`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the simplest way to get started with a Maven project. In the previous
    example, we used the non-interactive mode by setting `interactiveMode=false`.
    This will force the plugin to use whatever values we passed in the command itself,
    along with the default values.
  prefs: []
  type: TYPE_NORMAL
- en: 'To invoke the plugin in the interactive mode, just type `mvn archetype:generate`.
    This will prompt for user inputs as the plugin proceeds with its execution. The
    very first one is to ask for a filter or a number for the type of the archetype.
    The filter can be specified in the format of `[groupdId:]artifactId`, shown as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'When you type the filter criteria, for example, `org.apache.maven.archetypes:maven-archetype-quickstart`,
    the plugin will display the number associated with it, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this case, there is only one `archetype` which matches the filter, and the
    number associated with it is `1`. If you press *Enter* against the last line in
    the previous output, or just type `1`, the plugin will start to proceed with the
    `org.apache.maven.archetypes:maven-archetype-quickstart` archetype.
  prefs: []
  type: TYPE_NORMAL
- en: 'Something that you might have already noticed is that as soon as you type `mvn
    archetype:generate`, the plugin displays a long list of Maven archetypes supported
    by the plugin, and each archetype has a number associated with it. You can avoid
    this long list by specifying a filter criterion with the command itself, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Batch mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `archetype` plugin can operate in the batch mode either by setting the
    `interactiveMode` argument to `false` or passing `-B` as an argument. When operating
    in the batch mode, you need to clearly specify which archetype you are going to
    use with the arguments `archetypeGroupId`, `archetypeArtifactId`, and `archetypeVersion`.
    You also need to clearly identify the resultant artifact with the `groupId`, `artifactId`,
    `version`, and `package` arguments, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Any inquisitive mind should be asking a very valid question by now.
  prefs: []
  type: TYPE_NORMAL
- en: In the non-interactive mode, we did not type any filter or provide any Maven
    coordinates for the archetype in the very first example. So, how does the plugin
    know about the archetype? When no archetype is specified, the plugin goes with
    the default one, which is `org.apache.maven.archetypes:maven-archetype-quickstart`.
  prefs: []
  type: TYPE_NORMAL
- en: Archetype catalogues
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How does the plugin find all the archetypes available in the system? When you
    just type `mvn archetype:generate`, a list of archetypes is displayed by the plugin
    for the user selection. The complete list is around 1100, but only the first 10
    are shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Going back to the original question, how does the plugin find these details
    about different archetypes?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `archetype` plugin maintains the details about different archetypes in
    an internal catalogue, which comes with the plugin itself. The archetype catalogue
    is simply an XML file. The following shows the internal catalogue of the `archetype`
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In addition to the internal catalogue, you can also maintain a `local` archetype
    catalogue. This is available at `USER_HOME/.m2/archetype-catalog.xml`, and by
    default, it's an empty file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is also a remote catalogue available at [http://repo1.maven.org/maven2/archetype-catalog.xml](http://repo1.maven.org/maven2/archetype-catalog.xml).
  prefs: []
  type: TYPE_NORMAL
- en: By default, the `archetype` plugin will load all the available archetypes from
    the `local` and `remote` catalogues. If we go back to the archetype list displayed
    by the plugin and type `mvn archetype:generate`, then by looking at each entry,
    we can determine whether a given archetype is loaded from the `internal`, `local`,
    or `remote` catalogue.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following archetype is loaded from the `remote` catalogue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to force the `archetype` plugin to list all the archetypes from
    the internal catalogue only, then you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all the archetypes from the `local` catalogue only, you need to use
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'To list all the archetypes from the `internal`, `local`, and `remote` catalogues,
    you need to use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Building an archetype catalogue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the `internal`, `local`, and `remote` catalogues, you can also
    build your own catalogue. Say you have developed your own set of Maven archetypes
    and need to build a catalogue out of them, which can be shared with others by
    publicly hosting it. Once you have built the archetypes, they will be available
    in your `local` Maven repository. The following command will crawl through the
    `local` Maven repository and build an archetype catalogue from all the archetypes
    available there. Here, we use the `crawl` goal of the `archetype` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Public archetype catalogues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'People who develop archetypes for their projects will list them in publicly
    hosted archetype catalogues. The following list shows some of the publicly available
    Maven archetype catalogues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fuse**: The Fuse archetype catalogue can be found at [http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml](http://repo.fusesource.com/nexus/content/groups/public/archetype-catalog.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Java.net**: The Java.net archetype catalogue can be found at [https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml](https://java.net/projects/maven2-repository/sources/svn/content/trunk/repository/archetype-catalog.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cocoon**: The Cocoon archetype catalogue can be found at [http://cocoon.apache.org/archetype-catalog.xml](http://cocoon.apache.org/archetype-catalog.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**MyFaces**: The MyFaces archetype catalogue can be found at [http://myfaces.apache.org/archetype-catalog.xml](http://myfaces.apache.org/archetype-catalog.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Apache Synapse**: The Apache Synapse archetype catalogue can be found at
    [http://synapse.apache.org/archetype-catalog.xml](http://synapse.apache.org/archetype-catalog.xml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s take Apache Synapse as an example. Synapse is an open source Apache
    project that builds an **enterprise** **service bus** (**ESB**). The following
    command uses the Apache Synapse archetype to generate a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will produce the following directory structure. If you
    look at the `pom.xml` file, you will notice that it contains all the necessary
    instructions along with the required dependencies to build the Synapse project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s have a look at the previous Maven command that we had used to build
    the project with the Synapse archetype. The most important argument is `archetypeCatalog`.
    The value of the `archetypeCatalog` argument can point directly to the `archetype-catalog.xml`
    file or to a directory that contains the `archetype-catalog.xml` file. The following
    configuration shows the `archetype-catalog.xml` file corresponding to the Synapse
    archetype. It only has a single archetype, but with two different versions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The value of the `archetypeCatalog` parameter can be a comma-separated list,
    where each item points to an `archetype-catalog.xml` file or to a directory, which
    contains `archetype-catalog.xml`. The default values are `remote` and `local`,
    where the archetypes are loaded from the `local` repository and the `remote` repository.
    If you want to load an `archetype-catalog.xml` file from the local file system,
    then you need to prefix the absolute path to the file with `file://`. The value
    `local` is just a shortcut for `file://~/.m2/archetype-catalog.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous Maven command, we used the `archetype` plugin in the non-interactive
    mode, so we had to be very specific with the archetype that we needed to generate
    the Maven project. This was done with the following three arguments. The value
    of these three arguments must match the corresponding elements defined in the
    associated `archetype-catalog.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The anatomy of archetype – catalog.xml
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have already gone through a couple of sample `archetype-catalog.xml` files
    and their uses. The XML schema of the `archetype-catalog.xml` file is available
    at [http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd](http://maven.apache.org/xsd/archetype-catalog-1.0.0.xsd).
    The following shows an `archetype-catalog.xml` file skeleton with all the key
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `archetypes` parent element can hold one or more `archetype` child elements.
    Each `archetype` element should uniquely identify the Maven artifact corresponding
    to it. This is done by combining the `groupId`, `artifactId`, and `version` elements
    of the artifact. These three elements carry the exact same meaning that we discussed
    under Maven coordinates. The `description` element can be used to describe the
    archetype. The value of the description element will appear against the archetype
    when it is listed by the `archetype` plugin. For example, the following output
    is generated according to the pattern—`groupId:artifactId (description)` from
    the `archetype-catalog.xml` file when you type `mvn archetype:generate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Each `archetype` child element can carry a value for the `repository` element.
    This instructs the `archetype` plugin where to find the corresponding artifact.
    When no value is specified, the artifact is loaded from the repository, where
    the catalogue file comes from.
  prefs: []
  type: TYPE_NORMAL
- en: The archetype plugin goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have only discussed the `generate` and `crawl` goals
    of the `archetype` plugin. All the useful functionalities in the Maven build process
    are developed as plugins. A given Maven plugin can have multiple goals, where
    each goal carries out a very specific task. We will discuss plugins in detail
    in [Chapter 4](ch04.html "Chapter 4. Maven Plugins"), *Maven Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following goals are associated with the `archetype` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`archetype:generate`: The `generate` goal creates a Maven project corresponding
    to the selected archetype. This accepts the `archetypeGroupId`, `archetypeArtifactId`,
    `archetypeVersion`, `filter`, `interactiveMode`, `archetypeCatalog`, and `baseDir`
    arguments. We have already discussed almost all of these arguments in detail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:update-local-catalog`: The `update-local-catalog` goal has to be
    executed against a Maven archetype project. This will update the `local` archetype
    catalog with the new archetype. The `local` archetype catalog is available at
    `~/.m2/archetype-catalog.xml`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:jar`: The `jar` goal has to be executed against a Maven archetype
    project, which will create a JAR file out of it. This accepts the `archetypeDirectory`
    argument, which contains the classes; it also accepts the `finalName` argument,
    the name of the JAR file to be generated, and the `outputDirectory` argument,
    which is the location where the final output is copied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:crawl`: The `crawl` goal crawls through a local or a file system-based
    Maven repository (not remote or via HTTP) and creates an archetype catalogue file.
    This accepts `catalogFile` as an argument (which maps into the `catalog` system
    property), which is the name of the catalogue file to be created. By default,
    this crawls through the `local` Maven repository, and to override the location,
    we need to pass the corresponding repository URL with the `repository` argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:create-from-project`: The `create-from-project` goal creates an
    archetype project from an existing project. If you compare this with the `generate`
    goal, then `generate`, in fact, creates a new Maven project from scratch corresponding
    to the selected archetype, while `create-from-project` creates a Maven archetype
    project from an existing project. In other words, `create-from-project` generates
    a template out of an existing Maven project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:integration-test`: The `integration-test` goal will execute the
    integration tests associated with the Maven archetype project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archetype:help`: The `help` goal will display the manual associated with the
    `archetype` plugin, listing out all the available goals. If you want to get a
    detailed description of all the goals, then use the `-Ddetail=true` parameter
    along with the command. It is also possible to get help for a given goal. For
    example, the following command will display the help associated with the `generate`
    goal:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Java EE web applications with the archetype plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to start with a Java EE web application, you can simply use the
    `maven-archetype-webapp` archetype to generate the Maven project skeleton, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will produce the following directory structure. One issue
    here is that it does not have the `java` directory just after `src/main`. If you
    want to add any Java code, you need to make sure that you first create an `src/main/java`
    directory and create your Java package under it; otherwise, with the default configuration
    settings, Maven won''t pick your classes for compilation. By default, Maven looks
    for the source code inside `src/main/java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The `maven-archetype-webapp` archetype is not the only archetype to generate
    a Java EE project using the `archetype` plugin. Codehaus, a collaborative environment
    to build open source projects, also provides a few archetypes to generate web
    applications. The following example uses the `webapp-javaee6` archetype from Codehaus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command will produce the following directory structure. This
    overcomes one of the issues in the `maven-archetype-webapp` archetype, and creates
    the `src/main/java` and `src/test/java` directories. The only issue here is that
    it does not create the `src/main/webapp/WEB-INF` directory, which you will have
    to create manually:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Deploying web applications to a remote Apache Tomcat server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we have created a template web application either using the `maven-archetype-webapp`
    or `webapp-javaee6` archetype. Let's see how to deploy this web application into
    a remote Apache Tomcat application server from Maven itself. Most developers would
    love doing this rather than manual copying.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This assumes you have already installed Apache Tomcat in your environment. If
    not, you can download Tomcat 7.x distribution from [http://tomcat.apache.org/download-70.cgi](http://tomcat.apache.org/download-70.cgi)
    and set it up.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy the web application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we are going to deploy the web application to a remote Tomcat server, we
    need to have a valid user account that has the privilege to deploy a web application.
    Add the following entries to the `TOMCAT_HOME/conf/tomcat-users.xml` file under
    the `tomcat-users` root element. This will create a user with the name `admin`
    and the password `password`, and the `manager-gui` and `manager-script` roles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to configure Maven to talk to the remote Tomcat server. Add the
    following configuration to `USER_HOME/.m2/settings.xml` under the `servers` element,
    shown as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Go inside the root directory of the template web application that we generated
    before (`my-webapp`), and then add the `tomcat7-maven-plugin` to the `pom.xml`
    file available there. The complete `pom.xml` file will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following Maven command to build and deploy the sample web application
    into the Tomcat server. Once it is deployed, you can access it via `http://localhost:8080/my-webapp/`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To redeploy, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To undeploy, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Android mobile applications with the archetype plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are an Android application developer who wants to start with a skeleton
    Android project, you can use the `android-quickstart` archetype developed by akquinet,
    shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'This command produces the following skeleton project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the Android skeleton project, run the following Maven command from
    the `my-android-app` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command looks straightforward, but is based on your Android SDK
    version; therefore, you might encounter certain issues. Some of the possible issues
    and solutions are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following error if you pass an invalid value to the `android.sdk.path`
    argument:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path will point to the Android `sdk` directory, and right under this, you
    will find the `platforms` directory. By setting `android.sdk.path` to the correct
    path, you can avoid this error.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, the `android-quickstart` archetype assumes the Android platform
    to be `7`. You will see the following error if the Android platform installed
    in your local machine is different from this:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To fix this, open the `pom.xml` file and set the right platform version with
    `<sdk><platform>20</platform></sdk>`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'By default, the `android-quickstart` archetype assumes that the `aapt` tool
    is available under `sdk/platform-tools`. However, with the latest `sdks`, it''s
    being moved to `sdk/build-tools/android-4.4W`; you will get the following error:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To fix the error, you need to update the `maven-android-plugin` `version` and
    `artifactId`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open up the `pom.xml` file inside the `my-android-app` directory and find the
    following plugin configuration. Change `artifactId` to `android-maven-plugin`
    and version to `4.0.0-rc.1`, shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once the build is complete, `android-maven-plugin` will produce the `my-android-app-1.0.0.apk`
    and `my-android-app-1.0.0.jar` artifacts inside the `target` directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deploy the skeleton Android application (apk) to the connected device, use
    the following Maven command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: EJB archives with the archetype plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, we will discuss how to create a Maven **Enterprise JavaBeans** (**EJB**)
    project using the `ejb-javaee6` archetype developed by Codehaus, which is a collaborative
    environment to build open source projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command produces the following skeleton project. You can create
    your EJB classes inside `src/main/java/com/packt/samples/ejbapp/`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look at the following `pom.xml` file inside `my-ejbapp` directory, you
    will notice that `maven-ejb-plugin` is used internally to produce the EJB artifact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Even though we have highlighted `ejb-javaee6`, it is not the best out there
    to generate a Maven EJB project. The template produced by the `ejb-javaee6` archetype
    is very basic. Oracle WebLogic has developed a better EJB archetype,—`basic-webapp-ejb`.
    The following example shows how to use the `basic-webapp-ejb` archetype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Prior to executing the previous command, there is more homework to be done.
    The `basic-webapp-ejb` archetype is not available in any public Maven repositories.
    First, you need to download the WebLogic distribution from [http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html](http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/wls_12c_netbeans_install/wls_12c_netbeans_install.html),
    and then install it locally by performing the instructions given in the `README.txt`
    file. Once the installation is complete, the `basic-webapp-ejb` archetype and
    `weblogic-maven-plugin` can be installed into the local Maven repository, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to `wls12130/wlserver/server/lib` and execute the following command. This
    will build the plugin JAR file using the WebLogic JarBuilder tool:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous command will create the `weblogic-maven-plugin.jar` file. Now,
    we need to extract it out to get the `pom.xml` file. From `wls12130/wlserver/server/lib`,
    execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we need to copy the `pom.xml` file to `wls12130/wlserver/server/lib`.
    From `wls12130/wlserver/server/lib`, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can install `weblogic-maven-plugin.jar` into the `local` Maven repository.
    From `wls12130/wlserver/server/lib`, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In addition to the plugin, we also need to install the `basic-webapp-ejb` archetype.
    To do this, go to `wls12130/oracle_common/plugins/maven/com/oracle/maven/oracle-maven-sync/12.1.3`
    and execute the following two commands. Note that `oracle_common` is a hidden
    directory. If you are using a different version of WebLogic instead of 12.1.3,
    use the number associated with your version:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once you are done with these steps, you can execute the following command to
    generate the EJB template project using the WebLogic `basic-webapp-ejb` archetype.
    Make sure that you have the right version of `archetypeVersion`; this should match
    the archetype version that comes with your WebLogic distribution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This command produces the following skeleton project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'To package the EJB archive, execute the following command from the `my-ejbapp`
    directory. This will produce `basicWebappEjb.war` inside the `target` directory.
    Now, you can deploy this WAR file into your Java EE application server, which
    supports EJB:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: JIRA plugins with the archetype plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JIRA is an issue-tracking system developed by Atlassian. It is quite popular
    among many open source projects. One of the extension points in JIRA is its plugins.
    Here, we will see how to generate a skeleton JIRA plugin using `jira-plugin-archetype`
    developed by Atlassian:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will produce the following project template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Spring MVC applications with the archetype plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring **model view controller** (**MVC**) is a web application framework developed
    under the Spring framework, which is an open source application framework and
    an inversion of the control container. Here, we will see how to generate a template
    Spring MVC application using the `spring-mvc-quickstart` archetype.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To know more about the Spring MVC framework, refer to [http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/mvc.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Currently, the `spring-mvc-quickstart` archetype is not available in any of
    the public Maven repositories, so we have to download it from GitHub and build
    from the source, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the archetype is built from the source and is available in the `local`
    Maven repository, you can execute the following command to generate the template
    Spring MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This will produce the following project template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how to run the template Spring MVC application with the embedded
    Tomcat via Maven itself. Once the server is up, you can browse through the web
    application via `http://localhost:8080/my-spring-app`. The embedded Tomcat can
    be launched via the `run` goal of the `tomcat7` plugin, shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about the `tomcat7` plugin are available at [http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/](http://tomcat.apache.org/maven-plugin-trunk/tomcat7-maven-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on Maven archetypes. Maven archetypes provide a
    way of reducing repetitive work in building Maven projects. There are thousands
    of archetypes out there available publicly to assist you when building different
    types of projects. This chapter covered a commonly used set of archetypes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look into Maven plugins.
  prefs: []
  type: TYPE_NORMAL
