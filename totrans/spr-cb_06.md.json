["```java\n    <dependency> \n        <groupId>org.springframework.security</groupId> \n        <artifactId>spring-security-web</artifactId> \n        <version>3.2.5.RELEASE</version> \n    </dependency> \n\n    <dependency> \n        <groupId>org.springframework.security</groupId> \n        <artifactId>spring-security-config</artifactId> \n        <version>3.2.5.RELEASE</version> \n    </dependency> \n    ```", "```java\n    @Configuration\n    @EnableWebSecurity\n    public class SecurityConfig extends WebSecurityConfigurerAdapter {\n    }\n    ```", "```java\n    public class ServletInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n        @Override\n        protected Class<?>[] getRootConfigClasses() {\n            return new Class[] {SecurityConfig.class};\n        }\n\n      ...\n    ```", "```java\n    public class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer {\n    }\n    ```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Autowired\n    public void configureUsers(AuthenticationManagerBuilder auth) throws Exception {\n        auth.inMemoryAuthentication()\n.withUser(\"user1\").password(\"pwd\").roles(\"USER\")\n    .and()\n.withUser(\"admin\").password(\"admin_pwd\").roles(\"USER\", \"ADMIN\");\n\n    }\n}\n```", "```java\nprotected void configure(HttpSecurity http) throws Exception { \n  http \n      .authorizeRequests() \n          .anyRequest().authenticated() \n      .and().formLogin()\n      .and().httpBasic(); \n}\n```", "```java\n    <dependency> \n        <groupId>javax.servlet</groupId> \n        <artifactId>jstl</artifactId> \n        <version>1.2</version> \n    </dependency> \n    ```", "```java\n    @Bean \n    public ViewResolver jspViewResolver(){ \n        InternalResourceViewResolver resolver = new InternalResourceViewResolver(); \n        resolver.setViewClass(JstlView.class); \n        resolver.setPrefix(\"/WEB-INF/jsp/\"); \n        resolver.setSuffix(\".jsp\"); \n        return resolver; \n    } \n    ```", "```java\n    @Controller\n    public class UserController {\n\n      @RequestMapping(\"login\") \n      public String login() { \n          return \"login\"; \n      }\n    â€¦ \n    ```", "```java\n    <%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n    <%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n    <%@ taglib prefix=\"form\" uri=\"http://www.springframework.org/tags/form\" %>\n    <%@ page isELIgnored=\"false\" %>\n\n    <c:url var=\"loginUrl\" value=\"/login\" />\n    <form action=\"${loginUrl}\" method=\"post\">      \n        <input type=\"hidden\" name=\"${_csrf.parameterName}\" value=\"${_csrf.token}\"/>\n\n        <c:if test=\"${param.error != null}\">       \n            <p>\n                Invalid username and password.\n            </p>\n        </c:if>\n\n        <p>\n            <label for=\"username\">Username</label>\n            <input type=\"text\" id=\"username\" name=\"username\"/> \n        </p>\n\n        <p>\n            <label for=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" name=\"password\"/> \n        </p>\n\n        <button type=\"submit\">Log in</button>\n    </form>\n    ```", "```java\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests().anyRequest().authenticated();\n        http.formLogin().loginPage(\"/login\").permitAll();\n    }\n    ```", "```java\n    <dependency> \n        <groupId>org.springframework</groupId> \n        <artifactId>spring-jdbc</artifactId> \n        <version>${spring.version}</version> \n    </dependency> \n    ```", "```java\n    create table users(\n      username varchar(50) not null,\n      password varchar(50) not null,\n      enabled boolean not null default true,\n      primary key (username)\n    );\n\n    create table authorities (\n        username varchar(50) not null,\n        authority varchar(50) not null,\n        constraint fk_authorities_users foreign key(username) references users(username)\n    );\n\n    create unique index ix_auth_username on authorities (username,authority);    \n    ```", "```java\n    insert into users (username, password) values ('user1','pwd1');\n    insert into users (username, password) values ('user2','pwd2');\n\n    insert into authorities (username, authority) values ('user1', 'ADMIN');\n    insert into authorities (username, authority) values ('user2', 'ADMIN');\n    ```", "```java\n    @Bean \n    public DataSource dataSource() { \n            DriverManagerDataSource dataSource = new DriverManagerDataSource(); \n\n    dataSource.setDriverClassName(\"com.mysql.jdbc.Driver\"); \n    dataSource.setUrl(\"jdbc:mysql://localhost:3306/db1\"); \n            dataSource.setUsername(\"user1\"); \n            dataSource.setPassword(\"pass1\"); \n\n            return dataSource; \n    }\n    ```", "```java\n    @Bean \n    public DataSourceTransactionManager transactionManager() { \n        DataSourceTransactionManager transactionManager = new DataSourceTransactionManager(); \n        transactionManager.setDataSource(dataSource()); \n        return transactionManager; \n    }\n    ```", "```java\n    @Autowired \n    public void configure(AuthenticationManagerBuilder auth) throws Exception { \n        auth.jdbcAuthentication() \n                .dataSource(dataSource()) \n                .usersByUsernameQuery( \n                        \"select username,password,enabled from users where username=?\") \n                .authoritiesByUsernameQuery( \n                        \"select username,authority from authorities where username=?\"); \n    } \n    ```", "```java\nprotected void configure(HttpSecurity http) throws Exception { \n  ...\n  AntPathRequestMatcher pathRequestMatcher = new AntPathRequestMatcher(\"/logout\");\n  http.logout().logoutRequestMatcher(pathRequestMatcher); \n}\n```", "```java\n@Override\npublic void configure(WebSecurity web) throws Exception {\n    web\n      .ignoring()\n        .antMatchers(\"/css/**\")\n        .antMatchers(\"/js/**\");\n        .antMatchers(\"/img/**\");\n}\n```", "```java\nprotected void configure(HttpSecurity http) throws Exception { \n  http.authorizeRequests() \n      .antMatchers(\"/css/**\", \"/js/**\", \"/img/**\").permitAll()\n      .anyRequest().authenticated(); \n}\n```", "```java\nhttp.authorizeRequests() \n    .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") \n    .anyRequest().authenticated(); \n```", "```java\n    <dependency>\n      <groupId>org.springframework.security</groupId>\n      <artifactId>spring-security-taglibs</artifactId>\n      <version>3.2.5.RELEASE</version>\n    </dependency>\n    ```", "```java\n    <%@ taglib prefix=\"sec\" uri=\"http://www.springframework.org/security/tags\" %>    \n\n    <sec:authorize access=\"isAuthenticated()\">\n      Username: <sec:authentication property=\"principal.username\" />\n    </sec:authorize>\n    ```", "```java\n<sec:authorize access=\"isAnonymous()\">\n  This will be shown only to not-authenticated users.\n</sec:authorize>\n```", "```java\n<sec:authorize access=\"hasRole('ADMIN')\">\n  This will be shown only to users who have the \"ADMIN\" authority.\n</sec:authorize>\n```", "```java\n<sec:authorize access=\"hasAnyRole('ADMIN', 'WARRIOR')\">\n  This will be shown only to users who have the \"ADMIN\" or the \"WARRIOR\" authority.\n</sec:authorize>\n```", "```java\n    keytool -genkey -alias admin -keypass adminpass -keystore certificate.bin -storepass adminpass\n    ```", "```java\n    What is your first and last name?\n      [Unknown]:  \n    What is the name of your organizational unit?\n      [Unknown]:  \n    What is the name of your organization?\n      [Unknown]:  \n    What is the name of your City or Locality?\n      [Unknown]:  \n    What is the name of your State or Province?\n      [Unknown]:  \n    What is the two-letter country code for this unit?\n      [Unknown]:  \n    Is CN=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown correct?\n      [no]:  yes\n\n    ```", "```java\n    <Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\"\n               maxThreads=\"150\" scheme=\"https\" secure=\"true\"\n               clientAuth=\"false\" sslProtocol=\"TLS\"\n               keystoreFile=\"certificate.bin\" keystorePass=\"adminpass\" />\n    ```"]