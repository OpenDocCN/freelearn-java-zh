- en: Different Available WebDrivers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用的不同WebDriver
- en: 'The previous chapter introduced the Selenium WebDriver architecture and WebDriver
    interface. We used Google Chrome with ChromeDriver to create a simple test. In
    this chapter, we will explore the WebDriver implementation for Mozilla Firefox,
    Microsoft Internet Explorer, Microsoft Edge, and Safari. With WebDriver becoming
    a W3C specification, all of the major browser vendors now support WebDriver natively.
    In this chapter, we will look at the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 上一章介绍了Selenium WebDriver架构和WebDriver接口。我们使用ChromeDriver和Google Chrome创建了一个简单的测试。在本章中，我们将探讨Mozilla
    Firefox、Microsoft Internet Explorer、Microsoft Edge和Safari的WebDriver实现。随着WebDriver成为W3C规范，所有主要浏览器厂商现在都原生支持WebDriver。在本章中，我们将探讨以下内容：
- en: Using driver-specific implementations for Mozilla Firefox, Google Chrome, Microsoft
    Internet Explorer and Edge, and Apple Safari
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Mozilla Firefox、Google Chrome、Microsoft Internet Explorer和Edge以及Apple Safari的特定驱动程序实现
- en: Using the browser options class to execute tests in headless mode and use custom
    profiles
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用浏览器选项类以无头模式执行测试并使用自定义配置文件
- en: Using mobile emulation with Google Chrome
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google Chrome进行移动仿真
- en: Firefox Driver
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Firefox驱动程序
- en: The implementation of Firefox Driver has been changed in Selenium 3.0\. Starting
    with Firefox version 47.0+, we need to use separate a driver that will interact
    with the Firefox browser similarly to ChromeDriver. The new driver for Firefox
    is called Geckodriver.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox驱动的实现已在Selenium 3.0中更改。从Firefox版本47.0开始，我们需要使用一个单独的驱动程序，该驱动程序将与Firefox浏览器交互，类似于ChromeDriver。新的Firefox驱动程序称为Geckodriver。
- en: The Geckodriver provides the HTTP API described by the W3C WebDriver Protocol to
    communicate with Gecko browsers, such as Firefox. It translates calls into the
    Firefox Remote Protocol (Marionette)  by acting as a proxy between the local and
    remote ends.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Geckodriver提供了由W3C WebDriver协议描述的HTTP API，用于与Gecko浏览器（如Firefox）通信。它通过充当本地和远程端之间的代理，将调用转换为Firefox远程协议（Marionette）。
- en: Using GeckoDriver
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GeckoDriver
- en: In this section, we will see how to configure and use **Geckodriver** for Firefox
    in our tests. First of all, we need to download the **Geckodriver** executable
    from  [https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何配置和使用**Geckodriver**在Firefox测试中。首先，我们需要从 [https://github.com/mozilla/geckodriver/releases](https://github.com/mozilla/geckodriver/releases)
    下载**Geckodriver**可执行文件。
- en: Download the appropriate version of **Geckodriver** based on the Firefox version
    installed on your computer as well as the operating system. Copy the executable
    file into the `/src/test/resources/drivers` folder.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您计算机上安装的Firefox版本以及操作系统，下载适当的**Geckodriver**版本。将可执行文件复制到`/src/test/resources/drivers`文件夹中。
- en: 'We will use the Search Test we created in Chapter 1 and modify the test to
    use the **Geckodriver**. For this, we need to modify the `setup()` method, provide
    the path of the **Geckodriver** binary in the `webdriver.gecko.driver` property,
    and instantiate the `FirefoxDriver` class:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用我们在第1章中创建的搜索测试，并修改测试以使用**Geckodriver**。为此，我们需要修改`setup()`方法，在`webdriver.gecko.driver`属性中提供**Geckodriver**二进制文件的路径，并实例化`FirefoxDriver`类：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now execute the test, and you will see **Geckodriver** running in the console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在执行测试，你将在控制台看到**Geckodriver**正在运行：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It will launch a new Firefox window and execute the test. The Firefox window
    will be closed at the end of the execution.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它将启动一个新的Firefox窗口并执行测试。执行结束后，Firefox窗口将被关闭。
- en: Using Headless Mode
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无头模式
- en: Headless mode is a very useful way to run Firefox for automated testing with
    Selenium WebDriver. In headless mode, Firefox runs as normal only you don't see
    the UI components. This makes Firefox faster and tests run more efficiently, especially
    in the CI (Continuous Integration) environment.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无头模式是使用Selenium WebDriver进行自动化测试时运行Firefox的一种非常有用的方式。在无头模式下，Firefox运行得像正常一样，只是你看不到UI组件。这使得Firefox运行更快，测试运行更高效，尤其是在CI（持续集成）环境中。
- en: 'We can run Selenium tests in headless mode by configuring the `FirefoxOptions`
    class, as shown in the following code snippet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过配置`FirefoxOptions`类以无头模式运行Selenium测试，如下代码片段所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the preceding code, we first created an instance of the `FirefoxOptions` class,
    called the `setHeadless()` method, that passes the value as `true` to launch the
    Firefox browser in headless mode. You will see a long message indicating the browser
    instance has been launched in headless mode, as shown in the following console
    output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先创建了一个`FirefoxOptions`类的实例，调用`setHeadless()`方法，将值设置为`true`以在无头模式下启动Firefox浏览器。您将看到一个长消息，指示浏览器实例已在无头模式下启动，如下面的控制台输出所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: During the execution, you will not see the Firefox window on the screen but
    the test will be executed in headless mode.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行过程中，您将不会在屏幕上看到Firefox窗口，但测试将在无头模式下执行。
- en: Understanding the Firefox profile
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Firefox配置文件
- en: 'A Firefox profile is a folder that the Firefox browser uses to store all your
    passwords, bookmarks, settings, and other user data. A Firefox user can create
    any number of profiles with different custom settings and use it accordingly.
    According to Mozilla, the following are the different attributes that can be stored
    in the profiles:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox配置文件是Firefox浏览器用来存储所有密码、书签、设置和其他用户数据的文件夹。Firefox用户可以创建任意数量的配置文件，并使用不同的自定义设置。根据Mozilla的说法，以下是可以存储在配置文件中的不同属性：
- en: Bookmarks and browsing history
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 书签和浏览历史记录
- en: Passwords
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Site-specific preferences
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 站点特定首选项
- en: Search engines
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索引擎
- en: A personal dictionary
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人词典
- en: Autocomplete history
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动完成历史记录
- en: Download history
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载历史记录
- en: Cookies
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饼干
- en: DOM Storage
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM存储
- en: Security certificate settings
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全证书设置
- en: Security device settings
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全设备设置
- en: Download actions
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载操作
- en: Plugin MIME types
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件MIME类型
- en: Stored sessions
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储的会话
- en: Toolbar customizations
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具栏自定义
- en: User styles
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户样式
- en: 'To create, rename, or delete a profile, you have to perform the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建、重命名或删除配置文件，您必须执行以下步骤：
- en: 'Open the Firefox profile manager. To do that, in the command prompt terminal,
    navigate to the install directory of Firefox; typically, it is in **Program Files**
    if you are on Windows. Navigate to the location where you can find the `firefox`
    binary file, and execute the following command:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Firefox配置文件管理器。为此，在命令提示符终端中，导航到Firefox的安装目录；通常，如果您在Windows上，它位于**程序文件**中。导航到可以找到`firefox`二进制文件的位置，并执行以下命令：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It will open the profile manager, which will look like the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 它将打开配置文件管理器，外观如下面的截图所示：
- en: '![](img/815a8608-1f1e-44f5-af70-4bd26616b2a4.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/815a8608-1f1e-44f5-af70-4bd26616b2a4.png)'
- en: Note that before executing the preceding command, you need to make sure you
    close all your currently-running Firefox instances.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在执行上述命令之前，您需要确保关闭所有当前运行的Firefox实例。
- en: Use the Create Profile... button to create another profile, the Rename Profile...
    button to rename an existing profile, and the Delete Profile... button to delete
    one.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用“创建配置文件...”按钮创建另一个配置文件，使用“重命名配置文件...”按钮重命名现有配置文件，使用“删除配置文件...”按钮删除一个。
- en: So, coming back to our WebDriver, whenever we create an instance of `FirefoxDriver`,
    a temporary profile is created and used by the WebDriver. To see the profile that
    is currently being used by a Firefox instance, navigate to Help | Troubleshooting
    Information.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，回到我们的WebDriver，每次我们创建一个`FirefoxDriver`实例时，都会创建一个临时配置文件，并由WebDriver使用。要查看当前正在使用的Firefox实例的配置文件，请转到帮助
    | 故障排除信息。
- en: 'This will launch all the details of the particular Firefox instance of which
    the profile is a part. It will look similar to the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动特定Firefox实例的所有详细信息，其中配置文件是其一部分。它看起来类似于以下截图：
- en: '![](img/6fb35369-ad22-460e-a2dc-03d7a43c4555.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6fb35369-ad22-460e-a2dc-03d7a43c4555.png)'
- en: The highlighted oval in the preceding screenshot shows the profile folder. Click
    on the Show Folder button; it should open the location of the profile corresponding
    to that of your current Firefox instance. Now, let's launch a Firefox browser
    instance using our FirefoxDriver, and verify its profile location.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个截图中的突出显示的椭圆形显示了配置文件文件夹。单击“显示文件夹”按钮；它应该打开与当前Firefox实例对应的配置文件位置。现在，让我们使用我们的FirefoxDriver启动一个Firefox浏览器实例，并验证其配置文件位置。
- en: 'Let''s launch a Firefox browser using the following code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用以下代码启动Firefox浏览器：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This will launch a browser instance. Now, navigate to Help | Troubleshooting
    Information, and once the info is launched, click the Show Folder button. This
    will open the current WebDriver''s profile directory. Every time you launch a
    Firefox instance using Firefox Driver, it will create a new profile for you. If
    you go one level above this directory, you will see the profiles created by your
    FirefoxDriver, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动一个浏览器实例。现在，导航到帮助 | 故障排除信息，一旦信息被启动，点击显示文件夹按钮。这将打开当前WebDriver的配置文件目录。每次您使用Firefox
    Driver启动Firefox实例时，它都会为您创建一个新的配置文件。如果您向上移动一个目录级别，您将看到FirefoxDriver创建的配置文件，如下截图所示：
- en: '![](img/3db28be6-cd39-48b5-9436-2acde675b3d3.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/3db28be6-cd39-48b5-9436-2acde675b3d3.png)'
- en: All the preceding folders correspond to each of the Firefox instances launched
    by the FirefoxDriver.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的前述文件夹都对应于FirefoxDriver启动的每个Firefox实例。
- en: 'So far, we have seen what Firefox profiles are and how WebDriver creates one
    every time it launches the browser. Now, let''s see how we can create our own
    custom profiles using WebDriver APIs. The following is the code example to create
    your own Firefox profile using the WebDriver library and set the options you want
    your browser to have, overriding what FirefoxDriver gives you:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了Firefox配置文件是什么以及WebDriver每次启动浏览器时如何创建一个。现在，让我们看看如何使用WebDriver API创建我们自己的自定义配置文件。以下是一个使用WebDriver库创建自己的Firefox配置文件并设置您希望浏览器拥有的选项的代码示例，覆盖FirefoxDriver提供的选项：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, `FirefoxProfile` is the class that has been instantiated
    to create a custom profile for the Firefox browser launched from the test. Now,
    having an instance of that class, we can set various options and preferences in
    it, which we will discuss shortly. First, there are two overloaded versions of
    constructors for `FirefoxProfile`. One creates an empty profile and moulds it
    according to requirements. This is seen in the preceding code. The second version
    creates a profile instance from an existing profile directory, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`FirefoxProfile` 是一个类，它已经被实例化以创建从测试中启动的Firefox浏览器的自定义配置文件。现在，拥有该类的实例后，我们可以在其中设置各种选项和首选项，我们将在稍后讨论。首先，`FirefoxProfile`
    有两个构造函数的重载版本。一个创建一个空配置文件并根据需求对其进行塑形。这在前面的代码中可以看到。第二个版本从一个现有的配置文件目录创建配置文件实例，如下所示：
- en: '[PRE7]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, the `profileDir` input parameter is the directory location of an existing
    profile. The profile directory is the one we saw in the preceding screenshot.
    Let's discuss some interesting customizations that we can do to our Firefox browser
    using Firefox profiles.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`profileDir` 输入参数是现有配置文件的目录位置。配置文件目录是我们在前面的截图中所看到的。让我们讨论一些我们可以对Firefox浏览器进行的有趣的自定义设置。
- en: Adding the extension to Firefox
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Firefox添加扩展
- en: In this section, we will see how we can extend our Firefox browser with some
    additional capabilities using Profiles. Whenever WebDriver launches a new Firefox
    browser, it creates a new profile on the disk, and this profile doesn't contain
    any of the installed Firefox extensions in it.  We will add an extension using
    the Profiles every time WebDriver creates an instance of the Firefox browser.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看到如何使用配置文件扩展我们的Firefox浏览器以获得一些额外的功能。每当WebDriver启动一个新的Firefox浏览器时，它都会在磁盘上创建一个新的配置文件，而这个配置文件不包含安装的任何Firefox扩展。我们将使用配置文件在WebDriver每次创建Firefox浏览器的实例时添加一个扩展。
- en: Now, let's change the profile using the `addExtension()` method provided by
    `FirefoxProfile`. This method is used to add extensions to the Firefox browser.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`FirefoxProfile`提供的`addExtension()`方法更改配置文件。此方法用于向Firefox浏览器添加扩展。
- en: 'The following is the API syntax for the method:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为该方法提供的API语法：
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The input parameter is the XPI file that has to be installed on the Firefox
    browser. If WebDriver doesn''t find the file in the specified location, it will
    raise `IOException`. The following is the code to override the default profile
    and extend the Firefox browser to have an extension named Xpath Finder:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数是要安装到Firefox浏览器上的XPI文件。如果WebDriver在指定位置找不到文件，它将引发`IOException`。以下是将默认配置文件覆盖并扩展Firefox浏览器以包含名为Xpath
    Finder的扩展的代码：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, if you see the Firefox browser that is launched by the FirefoxDriver,
    you will find the Xpath Finder extension installed on it. In the console log,
    you will see a message indicating the extension has been added to the browser:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您看到由FirefoxDriver启动的Firefox浏览器，您将发现Xpath Finder扩展已安装在其上。在控制台日志中，您将看到一个消息指示扩展已被添加到浏览器中：
- en: '**1532196699704 addons.xpi-utils DEBUG New add-on xPathFinder@0.9.3 installed
    in app-profile**'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**1532196699704 addons.xpi-utils DEBUG 新增插件 xPathFinder@0.9.3 安装在 app-profile**'
- en: Storing and retrieving a profile
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 存储和检索配置文件
- en: 'We can also write the profile information of the browser to the JSON file and
    later instantiate new browsers with the same profile. The `FirefoxProfile` class
    provides a method to export the profile information as JSON. The following is
    its API syntax:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将浏览器的配置文件信息写入JSON文件，然后使用相同的配置文件实例化新的浏览器。`FirefoxProfile`类提供了一个方法来将配置文件信息导出为JSON。以下是其API语法：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output or return type is a String, which contains the JSON information in
    it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 输出或返回类型是一个包含JSON信息的字符串。
- en: 'Now, to create a browser with the same profile, the `FirefoxProfile` class
    provides a static method that takes the JSON string as the input. The following
    is the API syntax:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了创建具有相同配置文件的浏览器，`FirefoxProfile`类提供了一个静态方法，它接受JSON字符串作为输入。以下是其API语法：
- en: '[PRE11]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This is a static method in the `FirefoxProfile` class that takes the JSON string
    to create a profile from. The following is the code example for that:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在`FirefoxProfile`类中的静态方法，它接受一个JSON字符串来创建一个配置文件。以下是该方法的代码示例：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, we have exported the profile as a JSON string. In your
    test case, you can write that JSON information to a file and store it. Later,
    you can read the JSON file using `FirefoxOptions` and create `FirefoxDriver` from
    that.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已经将配置文件导出为JSON字符串。在您的测试用例中，您可以将该JSON信息写入文件并存储它。稍后，您可以使用`FirefoxOptions`读取该JSON文件，并从中创建`FirefoxDriver`。
- en: Dealing with Firefox preferences
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理Firefox偏好设置
- en: So far, we have learned about Firefox profiles, and how we can create our own
    customized profiles for Firefox Driver. Now, let's see how we can set our preferences
    in the profiles we create and where FirefoxDriver stores them.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了Firefox配置文件，以及我们如何为FirefoxDriver创建自己的自定义配置文件。现在，让我们看看我们如何在创建的配置文件中设置我们的偏好设置，以及FirefoxDriver将它们存储在哪里。
- en: According to Mozilla, a Firefox Preference is any value or defined behavior
    that can be set by a user. These values are saved to the preference files. If
    you open the profile directory by navigating to Help | Troubleshooting Information
    and clicking on the Show Folder button, you will see two preference files: `prefs.js`
    and `user.js`. All the user preferences are written to the `prefs.js` file by
    the Firefox application during the launch. A user can override those values for
    their chosen values, and they are stored in the `user.js` file. The value in `user.js`
    for a preference takes precedence over all the other values set for that particular
    preference. So, your FirefoxDriver overwrites all the default preferences of Firefox
    in the `user.js` file for you. When you add a new preference, FirefoxDriver writes
    that to the `user.js` preference file, and the Firefox browser behaves accordingly.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Mozilla的说法，Firefox偏好设置是指用户可以设置的任何值或定义的行为。这些值被保存到偏好设置文件中。如果您通过导航到帮助 | 故障排除信息并点击显示文件夹按钮来打开配置目录，您将看到两个偏好设置文件：`prefs.js`和`user.js`。所有用户偏好设置都是在Firefox应用程序启动期间写入到`prefs.js`文件的。用户可以覆盖这些值以选择自己的值，并且它们被存储在`user.js`文件中。对于特定偏好设置的`user.js`中的值优先于为该特定偏好设置设置的其它所有值。因此，您的FirefoxDriver会为您覆盖Firefox在`user.js`文件中的所有默认偏好设置。当您添加一个新的偏好设置时，FirefoxDriver会将它写入到`user.js`偏好设置文件中，Firefox浏览器会相应地表现。
- en: 'Open the `user.js` file in the profile directory. The following are the list
    of all the preferences that FirefoxDriver sets for you by default:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开配置目录下的`user.js`文件。以下是由FirefoxDriver默认为您设置的偏好设置列表：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This Firefox Driver treats them as `Frozen Preferences` and doesn't allow the
    test-script developer to change them. However, there are a few preferences in
    the preceding list that FirefoxDriver allows you to change, which we will see
    shortly.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这个FirefoxDriver将它们视为`冻结的偏好设置`，并且不允许测试脚本开发者更改它们。然而，在先前的列表中，FirefoxDriver允许您更改一些偏好设置，我们将在稍后看到。
- en: Setting preferences
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置偏好设置
- en: 'Now we will learn how to set our own preferences. As an example, we will see
    how to change the user agent of your browser. These days, many web applications
    have a main site as well as a mobile site/m. site. The application will validate
    the user agent of the incoming request and decide whether to act as a server for
    a normal site or mobile site. So, in order to test your mobile site from your
    laptop or desktop browser, you just have to change your user agent. Let''s see
    a code example where we can change the user-agent preference of our Firefox browser
    using FirefoxDriver, and send a request to the Facebook homepage. But before that,
    let''s see the `setPreference()` method provided by the FirefoxProfile class:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何设置我们自己的偏好。作为一个例子，我们将看到如何更改浏览器的用户代理。这些天，许多Web应用程序都有一个主站以及一个移动站/m.站。应用程序将验证传入请求的用户代理，并决定是否作为普通站或移动站的服务器。因此，为了从您的笔记本电脑或桌面浏览器测试您的移动站，您只需更改您的用户代理。让我们看一个代码示例，我们可以使用FirefoxDriver更改我们的Firefox浏览器的用户代理偏好，并发送请求到Facebook主页。但在那之前，让我们看看FirefoxProfile类提供的`setPreference()`方法：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The input parameters are `key`, which is a string and represents your preference,
    and `value`, which has to be set to the preference.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 输入参数是`key`，它是一个字符串，代表您的偏好，以及`value`，它必须设置为偏好值。
- en: 'There are two other overloaded versions of the preceding method shown; one
    of which is as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法有两个其他重载版本，其中一个如下所示：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here is the other overloaded version:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是另一个重载版本：
- en: '[PRE16]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, using the preceding `setPreference()` method, we will try to change the
    user agent of our browser using the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用前面的`setPreference()`方法，我们将尝试使用以下代码更改我们浏览器的用户代理：
- en: '[PRE17]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the preceding code for the `setPreference()` method, `general.useragent.override`
    is set as the name of the preference, and the second parameter is the value for
    that preference, which represents the iPhone user agent. Now open the `user.js`
    file for this particular Firefox instance, and you will see the entry for this
    preference. You should use the following preference in your `user.js` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setPreference()`方法的先前代码中，`general.useragent.override`被设置为偏好的名称，第二个参数是那个偏好的值，它代表iPhone用户代理。现在打开这个特定Firefox实例的`user.js`文件，您将看到这个偏好的条目。您应该在您的`user.js`文件中使用以下偏好：
- en: '[PRE18]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Apart from this, you will observe that the mobile version of the Facebook homepage
    has been served to you.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这个之外，您还会观察到Facebook主页的移动版本已经被提供给您。
- en: Understanding frozen preferences
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解冻结偏好
- en: 'Now, let''s go back to the big list of frozen preferences that `user.js` contains,
    which we saw earlier. The Firefox Driver thinks that a test-script developer doesn''t
    have to deal with them and doesn''t allow those values to be changed. Let''s pick
    one frozen preference and try to change its values in our code. Let''s consider
    the `browser.shell.checkDefaultBrowser` preference, whose value FirefoxDriver
    implementers thought should be set to `false` so that the Firefox browser does
    not ask you whether to make Firefox your default browser, if it is not already,
    when you are busy executing your test cases. Ultimately, you don''t have to deal
    with the pop-up itself in your test scripts. Apart from setting the preference
    value to `false`, the implementers of FirefoxDriver also thought of freezing this
    value so that users don''t alter these values. That is the reason these preferences
    are called frozen preferences. Now, what happens if you try to modify these values
    in your test scripts? Let''s see a code example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到之前看到的`user.js`中包含的冻结偏好列表。Firefox Driver认为测试脚本开发者不需要处理这些偏好，并且不允许更改这些值。让我们选择一个冻结偏好，并尝试在我们的代码中更改其值。让我们考虑`browser.shell.checkDefaultBrowser`偏好，FirefoxDriver实现者认为应该将其设置为`false`，这样Firefox浏览器就不会在您忙于执行测试用例时询问您是否要将Firefox设置为默认浏览器（如果尚未设置）。最终，您不需要在测试脚本中处理这个弹出窗口本身。除了将偏好值设置为`false`之外，FirefoxDriver的实现者还认为应该冻结这个值，这样用户就不会更改这些值。这就是为什么这些偏好被称为冻结偏好。现在，如果您尝试在测试脚本中修改这些值会发生什么？让我们看一个代码示例：
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now when you execute your code, you will immediately see an exception saying
    you''re not allowed to override these values. The following is the exception stack
    trace you will see:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在当您执行代码时，您将立即看到一个异常，表示不允许覆盖这些值。以下是在您将看到的异常堆栈跟踪：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is how FirefoxDriver mandates a few preferences that are not to be touched.
    However, there are a few preferences of the frozen list that FirefoxDriver allows
    to alter through code. For that, it explicitly exposes methods in the FirefoxProfile
    class. Those exempted preferences are for dealing with SSL certificates and native
    events. Here, we will see how we can override the SSL certificates' preferences.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 FirefoxDriver 强制设置了一些不希望被修改的偏好设置。然而，有一些冻结列表中的偏好设置，FirefoxDriver 允许通过代码进行修改。为此，它明确地在
    FirefoxProfile 类中公开了方法。这些豁免的偏好设置是用于处理 SSL 证书和原生事件。在这里，我们将看到如何覆盖 SSL 证书的偏好设置。
- en: 'Let''s use a code example that tries to override the default Firefox behavior
    to handle SSL certificates. The `FirefoxProfile` class has two methods to handle
    the SSL certificates; the first one is as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用一个代码示例来尝试覆盖默认的 Firefox 行为以处理 SSL 证书。`FirefoxProfile` 类有两个处理 SSL 证书的方法；第一个方法如下：
- en: '[PRE21]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This lets Firefox know whether to accept SSL certificates that are untrusted.
    By default, it is set to true, that is, Firefox accepts SSL certificates that
    are untrusted. The second method is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这让 Firefox 知道是否接受不受信任的 SSL 证书。默认情况下，它被设置为 true，即 Firefox 接受不受信任的 SSL 证书。第二个方法如下：
- en: '[PRE22]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This lets Firefox assume that the untrusted certificates are issued by untrusted
    or self-signed certification agents. Firefox, by default, assumes the issuer to
    be untrusted. That assumption is particularly useful when you test an application
    in the test environment while using the certificate from the production environment.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这让 Firefox 假设不受信任的证书是由不受信任或自签名的证书代理机构签发的。默认情况下，Firefox 假设签发者是受信任的。这种假设在测试测试环境中的应用程序时，使用生产环境的证书尤其有用。
- en: 'The preferences, `webdriver_accept_untrusted_certs` and `webdriver_assume_
    untrusted_issuer`, are the ones related to the SSL certificates. Now, let''s create
    a Java code to modify the values for these two values. By default, the values
    are set to true, as seen in the `user.js` file. Let''s mark them as false with
    the following code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 偏好设置 `webdriver_accept_untrusted_certs` 和 `webdriver_assume_untrusted_issuer`
    与 SSL 证书相关。现在，让我们创建一个 Java 代码来修改这两个值。默认情况下，这些值被设置为 true，如 `user.js` 文件中所示。让我们用以下代码将它们标记为
    false：
- en: '[PRE23]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, we have set the values to false, and now if we open the `user.js` file
    in the profile directory of this instance of Firefox, you will see the values
    set to false, as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将值设置为 false，现在如果你打开该实例的配置文件目录中的 `user.js` 文件，你会看到设置为 false 的值，如下所示：
- en: '[PRE24]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Chrome Driver
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Chrome 驱动程序
- en: The ChromeDriver works similar to the Geckodriver and implements the W3C WebDriver
    protocol. We saw how to set up and use ChromeDriver in Chapter 1\. In this section,
    we will focus on the ChromeDriver options to run tests in headless mode, use mobile
    emulation, and use custom profiles.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ChromeDriver 与 Geckodriver 的工作方式相似，并实现了 W3C WebDriver 协议。我们在第一章中介绍了如何设置和使用 ChromeDriver。在本节中，我们将重点关注
    ChromeDriver 选项，以在无头模式下运行测试、使用移动仿真以及使用自定义配置文件。
- en: Using Headless Mode
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用无头模式
- en: Similar to Firefox, we can run tests in headless mode with ChromeDriver. This
    makes Chrome tests run faster and tests run more efficiently, especially in the
    CI (Continuous Integration) environment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Firefox 类似，我们可以使用 ChromeDriver 在无头模式下运行测试。这使得 Chrome 测试运行得更快，测试运行得更有效率，尤其是在
    CI（持续集成）环境中。
- en: 'We can run Selenium tests in headless mode by configuring the `ChromeOptions` class
    as shown in the following code snippet:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过配置 `ChromeOptions` 类来在无头模式下运行 Selenium 测试，如下面的代码片段所示：
- en: '[PRE25]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding code, we first created an instance of the `ChromeOptions` class,
    called the `setHeadless()` method, that passes the value as `true` to launch the
    Chrome browser in headless mode. During the execution, you will not see the Chrome
    window on the screen but the test will be executed in headless mode.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们首先创建了一个 `ChromeOptions` 类的实例，调用 `setHeadless()` 方法，将值设置为 `true` 以在无头模式下启动
    Chrome 浏览器。在执行过程中，你将不会在屏幕上看到 Chrome 窗口，但测试将在无头模式下执行。
- en: Using Mobile Emulation for testing mobile web applications
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用移动仿真进行移动网页应用测试
- en: 'The Chrome browser allows users to emulate Chrome on mobile devices, such as
    Pixel 2, Nexus 7, iPhone, or iPad, from the desktop version of Chrome via DevTools.
    The following screenshot shows how our sample application will be seen in Chrome
    for iPhone. We can start the mobile emulation in Chrome browser with the following
    steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome浏览器允许用户通过DevTools从桌面版本的Chrome模拟移动设备上的Chrome，例如Pixel 2、Nexus 7、iPhone或iPad。以下截图显示了我们的示例应用程序在Chrome
    iPhone中的显示效果。我们可以通过以下步骤在Chrome浏览器中启动移动设备模拟：
- en: 'Navigate to the sample web application in the Chrome Browser:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome浏览器中导航到示例Web应用程序：
- en: '![](img/27c36572-adde-4ab4-b430-176504f1d470.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27c36572-adde-4ab4-b430-176504f1d470.png)'
- en: 'Open the Developer Tools. Select the blue Mobile device icon and then select
    the device. In this example, we selected iPhone X. The Chrome browser will reload
    according to the selected device:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开发者工具。选择蓝色移动设备图标，然后选择设备。在这个例子中，我们选择了iPhone X。Chrome浏览器将根据所选设备重新加载：
- en: '![](img/dc360086-3bc6-4f3b-a555-3f5af073d5cb.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc360086-3bc6-4f3b-a555-3f5af073d5cb.png)'
- en: The mobile-emulation feature allows developers and testers to quickly test how
    a website will be displayed on a mobile device, without requiring a real device
    and speed up the development process.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备模拟功能允许开发者和测试人员快速测试网站在移动设备上的显示效果，无需实际设备，从而加快开发过程。
- en: 'We can also use mobile emulation with our Selenium WebDriver tests by configuring
    ChromeOptions. Let''s modify the search test to test on Google Pixel 2:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过配置ChromeOptions使用Selenium WebDriver测试进行移动设备模拟。让我们修改搜索测试以在Google Pixel
    2上测试：
- en: '[PRE26]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The preceding code will enable the Mobile emulation in Chrome during the execution,
    and will load the mobile version of the Website. This is done by first configuring
    the Device metrics, such as width and height, using a Java HashMap. In this example,
    we configured the `deviceMetrics` hashmap as shown in the following code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将在执行期间启用Chrome中的移动设备模拟，并加载网站的移动版本。这是通过首先使用Java HashMap配置设备度量，例如宽度和高度来完成的。在这个例子中，我们配置了`deviceMetrics`
    HashMap，如下面的代码所示：
- en: '[PRE27]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we need to create another Hashmap, named `mobileEmulation`, that will
    hold the `deviceMetrics` and `userAgent` Strings. The `userAgent` string specifies
    which Mobile device should be used, such as Pixel 2 XL, and the rendering engine
    versions:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建另一个名为`mobileEmulation`的HashMap，它将包含`deviceMetrics`和`userAgent`字符串。`userAgent`字符串指定了应使用哪个移动设备，例如Pixel
    2 XL，以及渲染引擎版本：
- en: '[PRE28]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Finally, we need to pass the `mobileEmulation` hashmap to the ChromeOptions
    class, and call the `setExperimentalOption()` method that passes the `mobileEmulation`
    hashmap:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要将`mobileEmulation` hashmap传递给`ChromeOptions`类，并调用传递`mobileEmulation`
    hashmap的`setExperimentalOption()`方法：
- en: '[PRE29]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will load the mobile version of the application and Selenium will run the
    test as usual.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载应用程序的移动版本，Selenium将像往常一样运行测试。
- en: 'We can get the `userAgent` string after configuring the mobile device. Go to
    the Network tab in the Chrome Developer tools.  Reload the page, select the first
    request from the list, and copy the value of the User-Agent key from the Headers
    tab, as shown in the following screenshot:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 配置移动设备后，我们可以获取`userAgent`字符串。在Chrome开发者工具中转到“网络”标签页，重新加载页面，从列表中选择第一个请求，并从“头部”标签页复制`User-Agent`键的值，如下面的截图所示：
- en: '![](img/89c2b814-e359-4cd3-9cd7-f45e210724af.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/89c2b814-e359-4cd3-9cd7-f45e210724af.png)'
- en: We can set a number of Chrome preferences using the `setExperimentalOptions()`
    method and the `ChromeOptions` class.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`setExperimentalOptions()`方法和`ChromeOptions`类设置多个Chrome首选项。
- en: Adding ChromeExtensions
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Chrome扩展
- en: Similar to Firefox, we can add extensions to the Chrome browser by specifying
    the location of the extension. We can add **Packed** (.crx file) or **Unpacked**
    (folder) extensions using the ChromeOptions class.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 与Firefox类似，我们可以通过指定扩展的位置向Chrome浏览器添加扩展。我们可以使用ChromeOptions类添加**打包**（.crx文件）或**未打包**（文件夹）扩展。
- en: 'To add a **Packed** extension, we need to call the `addExtension()` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加**打包**扩展，我们需要调用`addExtension()`方法：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'To add an Unpacked extension, we need to use the `addArguments()` method, which
    will load the extension reading the specified folder while launching the Chrome
    binary. This is done as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加未打包扩展，我们需要使用`addArguments()`方法，该方法将在启动Chrome二进制文件时读取指定的文件夹来加载扩展。操作如下：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Similarly, you can use Chrome options to add more extensions, arguments, and
    Binaries to your Chrome browser.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以使用Chrome选项向您的Chrome浏览器添加更多扩展、参数和二进制文件。
- en: InternetExplorerDriver
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: InternetExplorerDriver
- en: In order to execute your test scripts on the Internet Explorer browser, you
    need WebDriver's InternetExplorerDriver. Similar to Google Chrome and Firefox,
    we need to download the **IEDriver Server** executable from [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)  for
    Internet Explorer.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在Internet Explorer浏览器上执行测试脚本，你需要WebDriver的InternetExplorerDriver。与Google Chrome和Firefox类似，我们需要从[https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)下载**IEDriver
    Server**可执行文件，用于Internet Explorer。
- en: The IEDriver server then uses its IEThreadExplorer class, which is written in
    C++, to drive the IE browser using the Component Object Model framework.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: IEDriver服务器随后使用其IEThreadExplorer类，该类是用C++编写的，通过组件对象模型框架来驱动IE浏览器。
- en: Writing your first test script for the IE browser
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为IE浏览器编写第一个测试脚本
- en: 'Now you are all set to write test scripts that run on the Internet Explorer
    browser. The following is the code that instantiates InternetExplorerDriver:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好编写在Internet Explorer浏览器上运行的测试脚本了。以下是如何实例化InternetExplorerDriver的代码：
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Understanding IEDriver capabilities
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解IEDriver能力
- en: 'In this section, we will discuss some of the important capabilities of InternetExplorerDriver.
    This is where we have set the IEDriver capability to ignore the security domains.
    The code is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些InternetExplorerDriver的重要功能。这是我们设置IEDriver能力以忽略安全域的地方。代码如下：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Similar to `INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS`, IEDriver has
    many other capabilities. The following is a list with an explanation on why it
    is used:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 与`INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS`类似，IEDriver有许多其他功能。以下是一个列表，解释了为什么使用它：
- en: '| **Capability** | **Value to be Set** | **Purpose** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **能力** | **要设置的值** | **目的** |'
- en: '| INITIAL_BROWSER_URL | URL, for example, [http://www. google.com](http://www.%20google.com)
    | This capability is set with the URL value that the driver should navigate the
    browser to as soon as it opens up. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| INITIAL_BROWSER_URL | URL，例如，[http://www.google.com](http://www.%20google.com)
    | 此能力使用URL值设置驱动程序在打开浏览器时应导航到的浏览器。|'
- en: '| INTRODUCE_ FLAKINESS_BY_ IGNORING_SECURITY_ DOMAINS | True or False | This
    defines whether the IEDriverServer should ignore the browser security domain settings.
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS | 布尔值 | 这定义了IEDriverServer是否应该忽略浏览器安全域设置。|'
- en: '| NATIVE_EVENTS | True or False | This tells the IEDriver server whether to
    use native events or JavaScript events for executing mouse or keyboard actions.
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| NATIVE_EVENTS | 布尔值 | 这告诉IEDriver服务器是否在执行鼠标或键盘动作时使用原生事件或JavaScript事件。|'
- en: '| REQUIRE_WINDOW_ FOCUS | True or False | If the value is set to True, the
    IE browser window will get the focus. This is especially useful when executing
    native events. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| REQUIRE_WINDOW_FOCUS | 布尔值 | 如果设置为True，IE浏览器窗口将获得焦点。这在执行原生事件时特别有用。|'
- en: '| ENABLE_PERSISTENT_ HOVERING | True or False | If set to True, IEDriver will
    persistently fire a mouse-hovering event. This is especially important in overcoming
    issues with how IE handles mouse-over events. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| ENABLE_PERSISTENT_HOVERING | 布尔值 | 如果设置为True，IEDriver将持续触发鼠标悬停事件。这在克服IE处理鼠标悬停事件的问题时特别重要。|'
- en: '| IE_ENSURE_CLEAN_ SESSION | True or False | If True, it clears all the cookies,
    cache, history, and saved form data of all the instances of IE. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| IE_ENSURE_CLEAN_SESSION | 布尔值 | 如果为True，则清除IE的所有实例的所有cookies、缓存、历史记录和保存的表单数据。|'
- en: '| IE_SET_PROXY_BY_ SERVER | True or False | If True, the proxy server settings
    for the IEDriver server is used. If False, WindowsProxyManager is used to determine
    the proxy server. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| IE_SET_PROXY_BY_SERVER | 布尔值 | 如果为True，则使用IEDriver服务器的代理服务器设置。如果为False，则使用WindowsProxyManager来确定代理服务器。|'
- en: Edge Driver
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Edge驱动程序
- en: Microsoft Edge is the latest web browser launched with Microsoft Windows 10\.
    Microsoft Edge was one of the first browsers to implement the W3C WebDriver standard
    and provides built-in support for Selenium WebDriver.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 微软Edge是随着微软Windows 10推出的最新网络浏览器。微软Edge是首批实施W3C WebDriver标准的浏览器之一，并为Selenium
    WebDriver提供内置支持。
- en: Similar to Internet Explorer, in order to execute test scripts on the Microsoft
    Edge browser, we need to use the EdgeDriver class and a standalone Microsoft WebDriver
    Server executable. The Microsoft WebDriver Server is maintained by the Microsoft
    Edge development team. You can find more information at [https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Internet Explorer 类似，为了在 Microsoft Edge 浏览器上执行测试脚本，我们需要使用 EdgeDriver 类和一个独立的
    Microsoft WebDriver 服务器可执行文件。Microsoft WebDriver 服务器由 Microsoft Edge 开发团队维护。更多信息请参阅
    [https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)。
- en: Writing your first test script for the Edge browser
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Edge 浏览器的第一个测试脚本
- en: 'Let''s set up the Microsoft WebDriver Server and create a test for testing
    the search feature on Microsoft Edge. We need to download and install Microsoft
    WebDriver Server on Windows 10 ([https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/)):'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们设置 Microsoft WebDriver 服务器并创建一个测试，用于测试 Microsoft Edge 浏览器的搜索功能。我们需要在 Windows
    10 上下载和安装 Microsoft WebDriver 服务器（[https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/））：
- en: '[PRE34]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The Microsoft WebDriver Server is a standalone server executable that implements
    WebDriver's JSON-wire protocol, which works as a glue between the test script
    and the Microsoft Edge browser. In the preceding code, we need to specify the
    path of the executable using the `webdriver.edge.driver` property similarly to
    other browser configurations we saw earlier in the chapter.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft WebDriver 服务器是一个独立的可执行服务器，实现了 WebDriver 的 JSON-wire 协议，它作为测试脚本和 Microsoft
    Edge 浏览器之间的粘合剂。在前面的代码中，我们需要使用 `webdriver.edge.driver` 属性指定可执行文件的路径，类似于我们在本章前面看到的其他浏览器配置。
- en: 'We also set the Page Load Strategy to eager, using the `EdgeOptions` class:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还设置页面加载策略为 eager，使用 `EdgeOptions` 类：
- en: '[PRE35]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: When navigating to a new page URL, Selenium WebDriver, by default, waits until
    the page has fully loaded before passing the control to the next command. This
    works well in most cases but can cause long wait times on pages that have to load
    a large number of third-party resources. Using the `eager` page-load strategy
    can make test execution faster. The eager page-load strategy will wait until the
    `DOMContentLoaded` event is complete, that is, the HTML content is downloaded
    and parsed only, but other resources, such as images, may still be loading. However,
    this may introduce flakiness where elements are dynamically loaded.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当导航到新的页面 URL 时，Selenium WebDriver 默认会在将控制权传递给下一个命令之前等待页面完全加载。这在大多数情况下都很好，但在需要加载大量第三方资源的页面上可能会导致长时间等待。使用
    `eager` 页面加载策略可以使测试执行更快。`eager` 页面加载策略将等待直到 `DOMContentLoaded` 事件完成，即仅下载和解析 HTML
    内容，但其他资源，如图片，可能仍在加载。然而，这可能会引入元素动态加载时的不稳定性。
- en: Safari Driver
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Safari Driver
- en: 'With Selenium 3.0 and WebDriver becoming the W3C standard, Apple now provides
    SafariDriver built into the browser. We do not have to download it separately.
    However, in order to work it with Selenium WebDriver, we have to set a Develop
    | Allow Remote Automation option from Safari''s main menu, as shown in the following
    screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 Selenium 3.0 和 WebDriver 成为 W3C 标准，苹果现在在浏览器中内置了 SafariDriver。我们无需单独下载它。然而，为了与
    Selenium WebDriver 一起使用，我们必须从 Safari 的主菜单设置 Develop | Allow Remote Automation
    选项，如下面的截图所示：
- en: '![](img/50c0aef4-03f9-4a5b-b0a7-2089e82270db.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50c0aef4-03f9-4a5b-b0a7-2089e82270db.png)'
- en: Allowing remote automation
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 允许远程自动化
- en: Writing your first test script for the Safari browser
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Safari 浏览器的第一个测试脚本
- en: 'This is as straight forward. The following is the test script using the Safari
    Driver:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单。以下是用 Safari Driver 编写的测试脚本：
- en: '[PRE36]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In the preceding code, we created an instance of the `SafariDriver` class to
    launch and execute tests on the Safari browser.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个 `SafariDriver` 类的实例，用于在 Safari 浏览器上启动和执行测试。
- en: Summary
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have seen some of the major implementations of WebDriver
    that are widely used in the industry.  We looked at some of the key configuration
    options for each browser and how to use them for custom profiles and mobile emulation.
    The underlying technology for every driver is JSONWire Protocol, which is fundamental
    for all the implementations. In the next chapter, we will learn how to use the
    Java 8 Stream API and Lambda functions with the Selenium WebDriver API.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你看到了WebDriver在行业中广泛使用的几个主要实现。我们查看了一些浏览器的重要配置选项，以及如何使用它们来创建自定义配置文件和移动仿真。每个驱动程序的基础技术是JSONWire协议，这是所有实现的基础。在下一章中，我们将学习如何使用Java
    8 Stream API和Lambda函数与Selenium WebDriver API一起使用。
- en: Questions
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the significance of WebDriver becoming W3C Specification?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WebDriver成为W3C规范的意义是什么？
- en: 'True or False: WebDriver is an interface?'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确或错误：WebDriver是一个接口？
- en: Which browsers support Headless testing?
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些浏览器支持无头测试？
- en: How can we test mobile websites with Chrome?
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何使用Chrome测试移动网站？
- en: Further information
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following links for more information about the topics
    covered in this chapter:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看以下链接，获取更多关于本章涵盖主题的信息：
- en: Read the WebDriver Specification at [https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.w3.org/TR/webdriver/](https://www.w3.org/TR/webdriver/)阅读WebDriver规范
- en: You can find more details about GeckoDriver and its capabilities at [https://github.com/mozilla/geckodriver](https://github.com/mozilla/geckodriver)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在[https://github.com/mozilla/geckodriver](https://github.com/mozilla/geckodriver)找到更多关于GeckoDriver及其功能的信息
- en: Read more about the ChromeDriver capabilities at [http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)
    and mobile emulation at [http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)了解更多关于ChromeDriver的功能，以及在[http://chromedriver.chromium.org/capabilities](http://chromedriver.chromium.org/capabilities)了解更多关于移动仿真的信息
- en: Read more about EdgeDriver capabilities at [https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://docs.microsoft.com/en-gb/microsoft-edge/webdriver](https://docs.microsoft.com/en-gb/microsoft-edge/webdriver)了解更多关于EdgeDriver的功能
