["```java\n    lein repl\n    ```", "```java\n    (import 'java.math.BigDecimal)\n    ```", "```java\n    java.math.BigDecimal\n    ```", "```java\n    BigDecimal big_number = new BigDecimal(\"100000\");\n    ```", "```java\n    (new BigDecimal \"100000\")\n    ```", "```java\n    100000M\n    ```", "```java\n    (def big-num (new BigDecimal \"100000\"))\n    ```", "```java\n    (def big-num (BigDecimal. \"100000\"))\n    ```", "```java\n    (import '[java.math BigDecimal BigInteger])\n    ```", "```java\n    (BigInteger. \"10000\")\n    ```", "```java\n    10000\n    ```", "```java\n    (BigDecimal. 100000.5)\n    ```", "```java\n    100000.5M\n    ```", "```java\n    (import 'java.time.LocalTime 'java.util.Locale)\n    ```", "```java\n    (Locale. \"pl\")\n    ```", "```java\n    #object[java.util.Locale 0x50e7be4d \"pl\"]\n    ```", "```java\n    LocalTime time = LocalTime.now();\n    System.out.println(time);\n    ```", "```java\n    (LocalTime/now)\n    ```", "```java\n    #object[java.time.LocalTime 0x355f5f59 \"23:10:29.761\"]\n    ```", "```java\n    LocalTime.NOON\n    ```", "```java\n    (LocalTime/MIDNIGHT)\n    ```", "```java\n    #object[java.time.LocalTime 0x2712e99d \"00:00\"]\n    ```", "```java\n    (.negate big-num)\n    ```", "```java\n    -100000M\n    ```", "```java\n    BigDecimal big_num = new BigDecimal(\"100000\");\n    ```", "```java\n    big_num.pow(2);\n    ```", "```java\n    10000000000\n    ```", "```java\n    (.pow big-num 2)\n    ```", "```java\n    10000000000M\n    ```", "```java\n(let [num 2]\n  (+ 3 num))\n```", "```java\n    (import 'java.time.ZonedDateTime)\n    ```", "```java\n    (ZonedDateTime/now)\n    ```", "```java\n    #object[java.time.ZonedDateTime 0x1572c67a \"2019-10-05T18:00:27.814+02:00[Europe/Warsaw]\"]\n    ```", "```java\n    (. (ZonedDateTime/now) getOffset)\n    ```", "```java\n    #object[java.time.ZoneOffset 0x362c5bf1 \"+02:00\"]\n    ```", "```java\n    (.getOffset (ZonedDateTime/now))\n    ```", "```java\n    (. (. (ZonedDateTime/now) getOffset) getTotalSeconds)\n    ```", "```java\n    7200\n    ```", "```java\n    (.. (ZonedDateTime/now) getOffset getTotalSeconds)\n    ```", "```java\n    7200\n    ```", "```java\n    StringBuffer string = new StringBuffer(\"quick\");\n            string.append(\"brown\");\n            string.append(\"fox\");\n            string.append(\"jumped\");\n            string.append(\"over\");\n            string.append(\"the\");\n            string.append(\"lazy\");\n            string.append(\"dog\");\n    ```", "```java\n    (let [string (StringBuffer. \"quick\")]\n         (.append string \" brown\")\n         (.append string \" fox\")\n         (.append string \" jumped\")\n         (.append string \" over\")\n         (.append string \" the\")\n         (.append string \" lazy\")\n         (.append string \" dog\")\n         (.toString string))\n    ```", "```java\n    \"quick brown fox jumped over the lazy dog\"\n    ```", "```java\n     (let [string (StringBuffer. \"quick\")]\n         (doto string\n               (.append \" brown\")\n               (.append \" fox\")\n               (.append \" jumped\")\n               (.append \" over\")\n               (.append \" the\")\n               (.append \" lazy\")\n               (.append \" dog\"))\n         (.toString string))\n    ```", "```java\n    \"quick brown fox jumped over the lazy dog\"\n    ```", "```java\n    lein new app coffee-app\n    ```", "```java\n    (ns coffee-app.core\n        (:require [coffee-app.utils :as utils])\n        (:import [java.util Scanner])\n        (:gen-class))\n    ```", "```java\n    (def ^:const price-menu {:latte 0.5 :mocha 0.4})\n    ```", "```java\n    (def input (Scanner. System/in))\n    ```", "```java\n    (defn- start-app []\n           \"Displaying main menu and processing user choices.\"\n           (let [run-application (ref true)]\n                (while (deref run-application)\n                       (println \"\\n|     Coffee app         |\")\n                       (println \"| 1-Menu 2-Orders 3-Exit |\\n\")\n                       (let [choice (.nextInt input)]\n                            (case choice\n                                  1 (show-menu)\n                                  2 (show-orders)\n                                  3 (dosync (ref-set run-application false)))))))\n    ```", "```java\n    run-application (ref true)\n    (while (deref run-application)\n    ```", "```java\n    (dosync (ref-set run-application false))\n    ```", "```java\n    (println \"\\n|     Coffee app         |\")\n    (println \"| 1-Menu 2-Orders 3-Exit |\\n\")\n    ```", "```java\n    choice (.nextInt input)\n    ```", "```java\n    (case choice\n            1 (show-menu)\n            2 (show-orders))\n    ```", "```java\n    (defn- show-menu []\n           (println \"| Available coffees |\")\n           (println \"|1\\. Latte   2.Mocha |\")\n           (let [choice (.nextInt input)]\n                (case choice\n                      1 (buy-coffee :latte)\n                      2 (buy-coffee :mocha))))\n    ```", "```java\n    (println \"| Available coffees |\")\n    (println \"|1\\. Latte   2.Mocha |\")\n    ```", "```java\n    choice (.nextInt input)\n    ```", "```java\n    (case choice\n           1 (buy-coffee :latte)\n           2 (buy-coffee :mocha))\n    ```", "```java\n    (defn- buy-coffee [type]\n           (println \"How many coffees do you want to buy?\")\n           (let [choice (.nextInt input)\n                 price (utils/calculate-coffee-price price-menu type choice)]\n                (utils/display-bought-coffee-message type choice price)))\n    ```", "```java\n    (ns coffee-app.utils) \n    ```", "```java\n    (defn calculate-coffee-price [coffees coffee-type number]\n          (->\n            (get coffees coffee-type)\n            (* number)\n            float))\n    ```", "```java\n    (ns coffee-app.utils)\n    (defn display-bought-coffee-message [type number total]\n          (println \"Buying\" number (name type) \"coffees for total:€\" total))\n    ```", "```java\n    Buying 2 latte coffees for total:€ 1.0\n    ```", "```java\n    (ns coffee-app.core)\n    (defn- show-orders []\n           (println \"\\n\")\n           (println \"Display orders here\"))\n    ```", "```java\n    Display orders here\n    ```", "```java\n    (ns coffee-app.utils\n        (:require [clojure.java.io :as io])\n        (:import [java.io PushbackReader]))\n    ```", "```java\n    (defn save-to [location data]\n          (spit location data :append true))\n    ```", "```java\n    (defn file-exists? [location]\n          (.exists (io/as-file location)))\n    ```", "```java\n     (defn load-orders\n      \"Reads a sequence of orders stored in file.\"\n      [file]\n      (if (file-exists? file)\n        (with-open [r (PushbackReader. (io/reader file))]\n                          (binding [*read-eval* false]\n                           (doall (take-while #(not= ::EOF %) (repeatedly #(read-one-order r))))))\n      []))\n    ```", "```java\n     (defn read-one-order [r]\n      (try\n        (read r)\n      (catch java.lang.RuntimeException e\n        (if (= \"EOF while reading\" (.getMessage e))\n          ::EOF\n          (throw e)))))\n    ```", "```java\n     (defn save-coffee-order [orders-file type number price]\n      (save-to orders-file {:type type :number number :price price}))\n    ```", "```java\n    (ns coffee-app.core)\n    (defn buy-coffee [type]\n           (println \"How many coffees do you want to buy?\")\n           (let [choice (.nextInt input)\n                 price (utils/calculate-coffee-price price-menu type choice)]\n                (utils/save-coffee-order orders-file type choice price)\n                (utils/display-bought-coffee-message type choice price)))\n    ```", "```java\n    (def ^:const orders-file \"orders.edn\")\n    (defn show-orders []\n           (println \"\\n\")\n           (doseq [order (utils/load-orders orders-file)]\n                  (println (utils/display-order order))))\n    ```", "```java\n    (defn display-order [order]\n          (str \"Bought \" (:number order) \" cups of \" (name (:type order)) \" for €\" (:price order)))\n    ```", "```java\n    lein repl\n    ```", "```java\n    (def capitals [\"Berlin\" \"Oslo\" \"Warszawa\" \"Belgrad\"])\n    ```", "```java\n    capitals\n    ```", "```java\n    [\"Berlin\" \"Oslo\" \"Warszawa\" \"Belgrad\"]\n    ```", "```java\n    (class capitals)\n    ```", "```java\n    clojure.lang.PersistentVector\n    ```", "```java\n    (def destinations (java.util.ArrayList. capitals))\n    ```", "```java\n    destinations\n    ```", "```java\n    [\"Berlin\" \"Oslo\" \"Warszawa\" \"Belgrad\"]\n    ```", "```java\n    (class destinations)\n    ```", "```java\n    java.util.ArrayList\n    ```", "```java\n    (vec destinations)\n    ```", "```java\n    (class (vec destinations))\n    ```", "```java\n    clojure.lang.PersistentVector\n    ```", "```java\n    (def fluss {\"Germany\" \"Rhein\" \"Poland\" \"Vistula\" })\n    ```", "```java\n    fluss\n    ```", "```java\n    {\"Germany\" \"Rhein\" \"Poland\" \"Vistula\" }\n    ```", "```java\n    (class fluss)\n    ```", "```java\n    clojure.lang.PersistentArrayMap\n    ```", "```java\n    (def rivers (java.util.HashMap. fluss))\n    ```", "```java\n    rivers\n    ```", "```java\n    {\"Poland\" \"Vistula\" \"Germany\" \"Rhein\"}\n    ```", "```java\n    (class rivers)\n    ```", "```java\n    java.util.HashMap\n    ```", "```java\n    (into {} rivers)\n    ```", "```java\n    {\"Poland\" \"Vistula\" \"Germany\" \"Rhein\"}\n    ```", "```java\n    (class (into {} rivers))\n    ```", "```java\n    clojure.lang.PersistentArrayMap\n    ```", "```java\nvar string = \"JavaScript string\"\nvar string_length = string.length;\nvar shout = string.toUpperCase();\n```", "```java\n(def string \"JavaScript string\")\n(def string_length (.-length string))\n(def shout (.toUpperCase string))\n```", "```java\n(range 1 10)\n```", "```java\n(range 1 10)\n```", "```java\nvar num = new Number(123);\n```", "```java\n(def num (js/Number. 123))\n```", "```java\n    lein new mies js-interop\n    ```", "```java\n    scripts/repl\n    ```", "```java\n    (js-obj \"Austria\" \"Donau\")\n    ```", "```java\n    #js {:Austria \"Donau\"}\n    ```", "```java\n    (def rivers-map-js (js-obj \"country\" {\"river\" \"Donau\"}))\n    ```", "```java\n    (.-country rivers-map-js)\n    ```", "```java\n    {\"river\" \"Donau\"}\n    ```", "```java\n    (.-river (.-country rivers-map-js))\n    ```", "```java\n    nil\n    ```", "```java\n    (def rivers-map-js-converted (clj->js {\"country\" {\"river\" \"Donau\"}}))\n    ```", "```java\n    #cljs.user/rivers-map-js-converted\n    ```", "```java\n    rivers-map-js-converted\n    ```", "```java\n    #js {:country #js {:river \"Donau\"}}\n    ```", "```java\n    (.-river (.-country rivers-map-js-converted))\n    ```", "```java\n    \"Donau\"\n    ```", "```java\n    (js->clj #js {:river \"Donau\"})\n    ```", "```java\n    {\"river\" \"Donau\"}\n    ```", "```java\n    (js->clj #js {:country #js {:river \"Donau\"}})\n    ```", "```java\n    {\"country\" {\"river\" \"Donau\"}}\n    ```", "```java\n    lein new figwheel-main hello-clojurescript.core -- --rum\n    ```", "```java\n    cd hello-clojurescript.core/\n    ```", "```java\n    lein fig:build\n    ```", "```java\n    [Figwheel] Watching paths: (\"test\" \"src\") to compile build – dev\n    ```", "```java\n    (ns ^:figwheel-hooks hello-clojurescript.core\n      (:require [goog.dom :as gdom]\n                    [rum.core :as rum]))\n    ```", "```java\n    (defn get-app-element []\n      (gdom/getElement \"app\"))\n    ```", "```java\n    <!DOCTYPE html>\n    <html>\n      <head>\n        <link href=\"css/style.css\" rel=\"stylesheet\" type=\"text/css\">\n      </head>\n      <body>\n        <div id=\"app\"></div>\n        <script src=\"img/dev-main.js\" type=\"text/javascript\"></script>\n      </body>\n    </html>\n    ```", "```java\n    (defonce app-state (atom {:text \"Hello world!\" :counter 0}))\n    ```", "```java\n    (rum/defc hello-world []\n      [:div\n       [:h1 (:text (deref app-state))]\n       [:h3 \"Edit this in src/hello_clojurescript/core.cljs and watch it change!\"]])\n    ```", "```java\n    (defn mount [el]\n      (rum/mount (hello-world) el))\n    (defn mount-app-element []\n      (when-let [el (get-app-element)]\n        (mount el)))\n    ```", "```java\n    (rum/defc hello-world < rum/reactive []\n              [:div {}\n               (band \"Metallica\" (:counter (rum/react app-state)))])\n    ```", "```java\n    (rum/defc band [name likes]\n              [:div {:class \"band\"\n                     :on-click #(increment-likes)}\n               (str name \" is liked \" likes \" times\")])\n    ```", "```java\n(defn increment-likes []\n      (swap! app-state update-in [:counter] inc))\n```", "```java\n[Figwheel] Watching paths: (\"test\" \"src\") to compile build - dev\n```", "```java\n    lein new figwheel-main hello-drag-and-drop -- --rum\n    ```", "```java\n    [jayq \"2.5.4\"]\n    ```", "```java\n    (ns ^:figwheel-hooks hello-drag-and-drop.core\n      (:require [jayq.core :as jayq :refer [$]]\n                [goog.dom :as gdom]\n                [rum.core :as rum]))\n    ```", "```java\n    <script src=\"img/jquery-3.4.1.min.js\" integrity=\"sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\" crossorigin=\"anonymous\"></script>\n     <script src=\"img/jquery-ui.min.js\" integrity=\"sha256-VazP97ZCwtekAsvgPBSUwPFKdrwD3unUfSGVYrahUqU=\" crossorigin=\"anonymous\"></script>\n    ```", "```java\n    lein fig:build\n    ```", "```java\n    (rum/defc tile [text number]\n      [:div {:class \"tile\" :id number} text])\n    ```", "```java\n    .tile {\n        border: 1px solid green;\n        display: inline-block;\n        height: 100px;\n        width: 200px;\n    }\n    ```", "```java\n    (rum/defc tiles []\n      [:.tiles {}\n        (tile \"first\" 1)\n        (tile \"second\" 2)])\n    ```", "```java\n    (defonce is-element-dropped? (atom false))\n    ```", "```java\n    (rum/defc dropped-message < rum/reactive []\n              [:div {}\n               (str \"Was element dropped? \" (rum/react is-element-dropped?))])\n    ```", "```java\n    (rum/defc content []\n      [:div {}\n        (tiles)\n        (dropped-message)])\n    ```", "```java\n    (defn mount [el]\n      (rum/mount (content) el))\n    ```", "```java\n     (rum/defc card [number]\n      [:.card {:data-number number :id number}])\n    ```", "```java\n    (rum/defc cards []\n      [:.cards {}\n        (card 1)\n        (card 2)])\n    ```", "```java\n    (rum/defc content []\n      [:div {}\n              (tiles)\n              (cards)\n              (dropped-message)])\n    ```", "```java\n    .card {\n        border: 1px solid red;\n        display: inline-block;\n        height: 50px;\n        width: 50px;\n    }\n    ```", "```java\n    (defn make-draggable []\n      (.draggable ($ \".card\") (attrs {:revert true :cursor \"move\"})))\n    ```", "```java\n    (defn attrs [a]\n      (clj->js (sablono.util/html-to-dom-attrs a)))\n    ```", "```java\n    (ns ^:figwheel-hooks hello-drag-and-drop.core\n      (:require [goog.dom :as gdom]\n                [jayq.core :as jayq :refer [$]]\n                [rum.core :as rum]\n                [sablono.util]))\n    ```", "```java\n    (defn ^:after-load on-reload []\n      (mount-app-element)\n      (make-draggable))\n    ```", "```java\n    (defn make-droppable []\n      (.droppable ($ (str \".tile\"))\n                         (attrs {:hoverClass \"hovered-tile\" :drop handle-drop :activate start-dragging})))\n    ```", "```java\n    .hovered-tile {\n        background-color: cornflowerblue;\n    }\n    ```", "```java\n    (defn handle-drop [event ui]\n      (let [draggable-id (jayq/data (.-draggable ui) \"number\")]\n        (println \"Dropping element with id\" draggable-id)\n        (reset! is-element-dropped? true)\n        (.draggable (.-draggable ui) \"disable\")\n        (.droppable ($ (str \"#\" (.-id (.-target event)))) \"disable\")\n        (.position (.-draggable ui) \n                        (attrs {:of ($ (str \"#\" (.-id (.-target event)))) :my \"left top\" :at \"left top\"}))))\n    ```", "```java\n    (defn start-dragging [event ui]\n          (reset! is-element-dropped? false))\n    ```", "```java\n    .card.ui-draggable-disabled {\n        background-color: yellow;\n    }\n    ```", "```java\n    (defn ^:after-load on-reload []\n      (mount-app-element)\n      (make-draggable)\n      (make-droppable))\n    ```", "```java\n    lein repl\n    ```", "```java\n    (def three-numbers-array (java.util.ArrayList. [0 1 2]))\n    ```", "```java\n    three-numbers-array\n    ```", "```java\n    [0 1 2]\n    ```", "```java\n    (defn array-list-getter [array index]\n          (.get array index))\n    ```", "```java\n    (array-list-getter three-numbers-array 1)\n    ```", "```java\n    1\n    ```", "```java\n    (array-list-getter three-numbers-array 5)\n    ```", "```java\n    IndexOutOfBoundsException Index: 5, Size: 3 java.util.Arraylist.rangeCheck (ArrayList.java:657)\n    ```", "```java\n    (defn array-list-getter [array index]\n          (try\n            (.get array index)\n            (catch IndexOutOfBoundsException ex\n              (str \"No element at index \" index))))\n    ```", "```java\n    (array-list-getter three-numbers-array 5)\n    ```", "```java\n    \"No element at index 5\"\n    ```", "```java\n    (array-list-getter three-numbers-array 1)\n    ```", "```java\n    1\n    ```", "```java\n    (defn array-list-getter [array index]\n          (try\n            (.get array index)\n            (catch IndexOutOfBoundsException ex\n              (str \"No element at index \" index))\n            (finally (println \"Login usage of array-list-getter\"))))\n    ```", "```java\n    (array-list-getter three-numbers-array 1)\n    ```", "```java\n    Login usage of array-list-getter:\n    1\n    ```", "```java\n    (array-list-getter three-numbers-array 5)\n    ```", "```java\n    lein new mies error-handling\n    ```", "```java\n    scripts/repl\n    ```", "```java\n    (def languages {:Clojure \"CLJ\"\n                              :ClojureScript \"CLJS\"\n                              :JavaScript \"JS\"})\n    ```", "```java\n    (defn language-abbreviator [language]\n      (if-let [lang (get languages language)]\n              lang\n              (throw (js/Error. \"Language not supported\"))))\n    ```", "```java\n    (language-abbreviator :JavaScript)\n    ```", "```java\n    \"JS\"\n    ```", "```java\n    (language-abbreviator :Ruby)\n    ```", "```java\n    Execution error (Error) at (<cljs repl>:1)\n    Language not supported\n    ```", "```java\n    (defn get-language-of-the-week [languages]\n          (let [lang-of-the-week (rand-nth languages)]\n               (try\n                 (str \"The language of the week is: \" (language-abbreviator lang-of-the-week))\n                 (catch js/Error e\n                   (str lang-of-the-week \" is not a supported language\")))))\n    ```", "```java\n    (get-language-of-the-week [:Ruby :Kotlin :Go])\n    ```", "```java\n    \"Go is not a supported language\"\n    ```", "```java\n    (get-language-of-the-week [:Clojure :JavaScript :ClojureScript])\n    ```", "```java\n    \"The language of the week is: CLJS\"\n    ```", "```java\n    (defn get-language-of-the-week [languages]\n          (let [lang-of-the-week (rand-nth languages)]\n               (try\n                 (str \"The language of the week is: \" (language-abbreviator lang-of-the-week))\n                 (catch js/Error e\n                   (str lang-of-the-week \" is not a supported language\"))\n                 (finally (println lang-of-the-week \"was chosen as the language of the week\")))))\n    ```", "```java\n    (get-language-of-the-week [:Clojure :JavaScript :ClojureScript])\n    ```", "```java\n    ClojureScript was chosen as the language of the week\n    \"The language of the week is: ClojureScript\"\n    ```", "```java\n    (get-language-of-the-week [:Ruby :Kotlin :Go])\n    ```", "```java\n    :Kotlin was chosen as the language of the week\n    \":Kotlin is not a supported language\"\n    ```"]