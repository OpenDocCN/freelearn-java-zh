- en: Chapter 6. Code Quality Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第六章。代码质量插件
- en: 'In this chapter, we will review some of the available tools for the Java language
    and how to use them in the context of Maven. We will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将回顾一些可用于 Java 语言的工具，以及如何在 Maven 上下文中使用它们。我们将涵盖以下食谱：
- en: Analyzing code coverage with the Maven JaCoCo plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven JaCoCo 插件分析代码覆盖率
- en: Analyzing code coverage with the Maven Cobertura plugin
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven Cobertura 插件分析代码覆盖率
- en: Analyzing code with the Maven PMD plugin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven PMD 插件分析代码
- en: Analyzing code with the Maven Checkstyle plugin
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven Checkstyle 插件分析代码
- en: Analyzing code with the Maven FindBugs plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven FindBugs 插件分析代码
- en: Generating source references with the Maven JXR plugin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven JXR 插件生成源引用
- en: Analyzing code with the Maven SonarQube plugin
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven SonarQube 插件分析代码
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: It is one thing to write code and another to write good code. The subjectivity
    of code quality is greatly reduced by having coding guidelines/standards. Whether
    a developer follows coding standards or not can be verified by subjecting the
    code to a code review. On the other hand, there are tools that automatically perform
    these reviews against defined standards.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码和编写优秀的代码是两回事。通过拥有编码指南/标准，代码质量的主体性得到了极大的降低。开发者是否遵循编码标准可以通过对代码进行代码审查来验证。另一方面，有一些工具可以自动执行这些审查，与定义的标准进行对比。
- en: In addition to code quality, programming best practices also recommend writing
    automated unit tests for the code. The line and branch coverage achieved by these
    unit tests can also be quantitatively measured by tools.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 除了代码质量，编程最佳实践还建议为代码编写自动单元测试。这些单元测试实现的行和分支覆盖率也可以通过工具进行定量测量。
- en: Analyzing code coverage with the Maven JaCoCo plugin
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven JaCoCo 插件分析代码覆盖率
- en: JaCoCo is a free Java code coverage tool. This is essentially the successor
    to Emma, and it has been developed by the EclEmma team as an Eclipse project.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: JaCoCo 是一个免费的 Java 代码覆盖率工具。这实际上是 Emma 的继任者，它是由 EclEmma 团队作为 Eclipse 项目开发的。
- en: JaCoCo offers line and branch coverage.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: JaCoCo 提供行和分支覆盖率。
- en: Getting ready
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven is set up on your system and is verified to work. To do this, refer to
    the first three recipes of [Chapter1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 已在您的系统上设置并验证其工作。为此，请参考[第一章](ch01.html "第一章。入门")的前三个食谱，*入门*。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to analyze the code coverage with the Maven JaCoCo
    plugin:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤使用 Maven JaCoCo 插件分析代码覆盖率：
- en: Open the pom file of a project that has unit tests (for instance, `project-with-tests`).
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开具有单元测试的项目（例如，`project-with-tests`）的 pom 文件。
- en: 'Add the following code:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following command from the command prompt:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令提示符运行以下命令：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Note the output for the preceding command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意前面命令的输出：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Open the `index.html` file generated in the `target/site/jacoco` folder:![How
    to do it...](img/6124OS_06_01.jpg)
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开在 `target/site/jacoco` 文件夹中生成的 `index.html` 文件：![如何操作...](img/6124OS_06_01.jpg)
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In the pom file, we instruct Maven to run the following two goals of the Maven
    JaCoCo plugin:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 pom 文件中，我们指示 Maven 运行 Maven JaCoCo 插件的以下两个目标：
- en: '`prepare-agent`: This is bound by default to the `initialize` phase of the
    Maven default lifecycle. The goal runs and prepares the agent that does the analysis.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prepare-agent`：默认情况下，它与 Maven 默认生命周期的 `initialize` 阶段绑定。目标运行并准备执行分析的分析代理。'
- en: '`report`: This agent gathers test coverage information when the tests are run
    and creates the report as part of the prepare-package phase (which we have explicitly
    specified).'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`report`：当运行测试时，此代理收集测试覆盖率信息，并在 `prepare-package` 阶段（我们已明确指定）中创建报告。'
- en: The report gives information about the test coverage. Green indicates lines
    that are covered by tests and red indicates lines that are not covered by tests.
    In the preceding example, **12 of 19** instructions are not covered by tests.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 报告提供了关于测试覆盖率的详细信息。绿色表示被测试覆盖的行，红色表示未被测试覆盖的行。在上面的示例中，**12/19** 指令未被测试覆盖。
- en: There's more...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You could subject the project to code coverage and generate the same report
    without making any changes to the pom file. To do this, run the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以对项目进行代码覆盖率分析并生成相同的报告，而无需对 pom 文件进行任何更改。为此，请运行以下命令：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, you may get the following error:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可能会遇到以下错误：
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To fix this, specify the `groupId` and `artifactId` parameters of the plugin
    explicitly. In the *Configuring Maven to search for plugins* recipe of [Chapter
    8](ch08.html "Chapter 8. Handling Typical Build Requirements"), *Handling Typical
    Build Requirements*, we will see an alternate way to address this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，明确指定插件的 `groupId` 和 `artifactId` 参数。在 [第 8 章](ch08.html "第 8 章。处理典型构建需求")
    的 *配置 Maven 以搜索插件* 菜谱中，我们将看到解决此问题的另一种方法。
- en: 'In the following code, what what we will be doing is explicitly calling the
    relevant goals that we saw getting executed earlier. So, first `prepare-agent`
    will run, followed by `test`, and then the `report` goal:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将明确调用之前看到执行的相关目标。所以首先运行 `prepare-agent`，然后是 `test`，最后是 `report` 目标：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'How about failing the build if the code coverage is below a threshold value?
    To do this, perform the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果代码覆盖率低于阈值值时失败构建怎么办？为此，执行以下步骤：
- en: 'Add the following execution block to the plugin configuration in the `build`
    section specified earlier:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下执行块添加到之前指定的 `build` 部分的插件配置中：
- en: '[PRE6]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following command:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE7]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Observe the result as shown in following screenshot:![There's more...](img/6124OS_06_02.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图所示的结果：![还有更多...](img/6124OS_06_02.jpg)
- en: Analyzing code coverage with the Maven Cobertura plugin
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven Cobertura 插件分析代码覆盖率
- en: Cobertura is another popular Java tool that calculates the percentage of code
    accessed by tests. It is based on **jcoverage**. There are many ways to use Cobertura,
    including standalone, through Ant script, and Maven. Let us use the Maven Cobertura
    plugin.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cobertura 是另一个流行的 Java 工具，它计算测试访问的代码百分比。它基于 **jcoverage**。使用 Cobertura 有许多方式，包括独立使用、通过
    Ant 脚本和 Maven。让我们使用 Maven Cobertura 插件。
- en: How to do it...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to analyze the code coverage with the Maven Cobertura
    plugin:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤使用 Maven Cobertura 插件分析代码覆盖率：
- en: Open a Maven project that has unit tests (for instance, `project-with-tests`).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个具有单元测试的 Maven 项目（例如，`project-with-tests`）。
- en: 'Run the following command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE8]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Observe the following output:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下输出：
- en: '[PRE9]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: See the report generated:![How to do it...](img/6124OS_06_03.jpg)
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看生成的报告：![如何操作...](img/6124OS_06_03.jpg)
- en: How it works...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: JaCoCo instruments the code online when the tests are running and hence,it needs
    to have the agent running. On the other hand, Cobertura instruments the bytecode
    during compilation offline. The `cobertura` goal of the Cobertura Maven plugin
    instruments the project, runs the tests, and generates the report.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: JaCoCo 在测试运行时在线对代码进行仪器化，因此需要运行代理。另一方面，Cobertura 在离线编译期间对字节码进行仪器化。Cobertura Maven
    插件的 `cobertura` 目标对项目进行仪器化，运行测试并生成报告。
- en: There are separate goals to `instrument` and `check` results, if required.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，有单独的目标用于 `instrument` 和 `check` 结果。
- en: There's more...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'What if we want to fail the build if the code coverage is below a threshold
    level? We can set up Cobertura to do this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在代码覆盖率低于阈值时失败构建，我们可以设置 Cobertura 来实现这一点：
- en: 'Add the following to the pom file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 pom 文件中：
- en: '[PRE10]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_04.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图所示的结果：![还有更多...](img/6124OS_06_04.jpg)
- en: The build has failed because, in the pom file, we specified that the build should
    be halted if the coverage is less than 85%.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 构建失败，因为在 pom 文件中，我们指定了如果覆盖率低于 85%，则应停止构建。
- en: Analyzing code with the Maven PMD plugin
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven PMD 插件分析代码
- en: PMD is a source code analyzer. It finds common programming flaws such as unused
    variables, empty catch blocks, and unnecessary object creation. It also includes
    the **Copy/Paste Detector** (**CPD**) that finds duplicated code.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: PMD 是一个源代码分析器。它查找常见的编程缺陷，如未使用的变量、空的 catch 块和不必要的对象创建。它还包括 **复制/粘贴检测器**（**CPD**），用于查找重复的代码。
- en: How to do it...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to run PMD on a Maven project:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤在 Maven 项目上运行 PMD：
- en: Open the Maven project for which you want to do a PMD analysis (for instance,
    `project-with-violations`).
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要进行 PMD 分析的 Maven 项目（例如，`project-with-violations`）。
- en: 'Run the following command:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Observe the output:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE13]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Check the contents of the `target` folder:![How to do it...](img/6124OS_06_05.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 `target` 文件夹的内容：![如何操作...](img/6124OS_06_05.jpg)
- en: Open the `pmd.xml` report:![How to do it...](img/6124OS_06_06.jpg)
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `pmd.xml` 报告：![如何操作...](img/6124OS_06_06.jpg)
- en: Open the `cpd.html` file in the `site` folder:![How to do it...](img/6124OS_06_07.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `site` 文件夹中打开 `cpd.html` 文件：![如何操作...](img/6124OS_06_07.jpg)
- en: How it works...
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `pmd` or `cpd` goals of the Maven PMD plugin are not bound to any phase.
    Also, they analyze the Java source and thus, do not need any other Maven phase
    or goal to be run.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Maven PMD 插件的 `pmd` 或 `cpd` 目标没有绑定到任何阶段。它们也分析 Java 源代码，因此不需要运行任何其他 Maven 阶段或目标。
- en: When the `pmd` goal is run, it generates a PMD site report using default rulesets
    and the configuration set in the plugin. It also generates a pmd output file in
    the XML format.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 `pmd` 目标时，它使用默认规则集和插件中设置的配置生成 PMD 站点报告。它还生成一个 XML 格式的 pmd 输出文件。
- en: 'You can also define your own customized ruleset. To do this, add the following
    code in the `configuration` section of the pom file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以定义自己的自定义规则集。为此，在 pom 文件的 `configuration` 部分添加以下代码：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Likewise, when the `cpd` goal is run, it generates a similar report for duplicated
    code. By default, the minimum token count that it considers to report that code
    is duplicated is 100 tokens (which is typically 10 lines of code).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当运行 `cpd` 目标时，它会为重复代码生成类似的报告。默认情况下，它认为报告代码重复的最小令牌计数是 100 个令牌（这通常是 10 行代码）。
- en: There's more...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The plugin can be made to fail the build by using the check goal in the following
    way:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下方式使用插件的 check 目标使构建失败：
- en: 'Add the following code to the pom file of `project-with-violations`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `project-with-violations` 的 pom 文件中：
- en: '[PRE15]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the following command:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_08.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图中的输出结果：![还有更多...](img/6124OS_06_08.jpg)
- en: Analyzing code with the Maven Checkstyle plugin
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Maven Checkstyle 插件分析代码
- en: Checkstyle is a tool that helps programmers follow coding standards. It automates
    the process of checking if defined coding standards are followed. It can support
    any coding standards by suitable configuration. Like other tools, it can be run
    standalone as well as integrated with Maven.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Checkstyle 是一个帮助程序员遵循编码标准的工具。它自动化了检查定义的编码标准是否被遵循的过程。它可以通过适当的配置支持任何编码标准。像其他工具一样，它既可以独立运行，也可以与
    Maven 集成。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to analyze code with the Maven Checkstyle plugin:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤使用 Maven Checkstyle 插件分析代码：
- en: Open the Maven project for which you want to do a Checkstyle analysis (for instance,
    `project-with-violations`).
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您要进行 Checkstyle 分析的 Maven 项目（例如，`project-with-violations`）。
- en: 'Run the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Observe the output as shown in the following screenshot:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图中的输出结果：
- en: '[PRE18]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Open the `checkstyle-result.xml` report in the `target` folder:![How to do it...](img/6124OS_06_09.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `target` 文件夹中打开 `checkstyle-result.xml` 报告：![如何操作...](img/6124OS_06_09.jpg)
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Unlike the `pmd`, `checkstyle` goal of Maven, the Checkstyle plugin is not bound
    to any phase.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Maven 的 `pmd`、`checkstyle` 目标不同，Checkstyle 插件没有绑定到任何阶段。
- en: When the `checkstyle` goal is run, it generates a Checkstyle site report using
    default rulesets and the configuration set in the plugin. It also generates a
    Checkstyle output file in the XML format.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 `checkstyle` 目标时，它使用默认规则集和插件中设置的配置生成 Checkstyle 站点报告。它还生成一个 XML 格式的 Checkstyle
    输出文件。
- en: 'The Maven Checkstyle plugin supports several configuration options to customize
    the rules, exclude files from being checked, and so on. Let''s briefly discuss
    the examples that show usage of Maven Checkstyle plugin in some advanced usecases:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Checkstyle 插件支持多个配置选项来定制规则、排除要检查的文件等。让我们简要讨论一些示例，展示 Maven Checkstyle 插件在高级用例中的使用：
- en: 'Checkstyle rules can be specified inline in the `configuration` section of
    the plugin:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Checkstyle 规则可以内联在插件的 `configuration` 部分中指定：
- en: '[PRE19]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'They can also be specified in an external file and referred using the `configLocation`
    element:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它们也可以在外部文件中指定，并使用 `configLocation` 元素进行引用：
- en: '[PRE20]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'A Suppressions filter can be created to tell Checkstyle not to report violations
    on specific files and specific sections of the files:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以创建一个 Suppressions 过滤器，告诉 Checkstyle 不要在特定文件和文件的特定部分报告违规：
- en: '[PRE21]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: There's more...
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As in the case of PMD, we can configure the Maven Checkstyle plugin such that
    it fails a build in case of errors:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 与 PMD 的情况一样，我们可以配置 Maven Checkstyle 插件，使其在出现错误时失败构建：
- en: 'Add the following code to the pom file of `project-with-violations`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `project-with-violations` 的 pom 文件中：
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the following Maven command:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE23]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_10.jpg)
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图所示的输出：![还有更多...](img/6124OS_06_10.jpg)
- en: Analyzing code with the Maven FindBugs plugin
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven FindBugs插件分析代码
- en: FindBugs is another tool that uses static analysis to inspect Java bytecode
    for bugs in a Java code. It is based on the concept of bug patterns. A bug pattern
    is a code snippet that is often an error.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: FindBugs是另一个使用静态分析来检查Java代码中Java字节码中错误的工具。它基于错误模式的概念。错误模式通常是一个错误代码片段。
- en: How to do it...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let us see how we can use the Maven FindBugs plugin to analyze and identify
    defects in our code:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用Maven FindBugs插件来分析和识别代码中的缺陷：
- en: Open the Maven project for which you want to do the FindBugs analysis.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要进行FindBugs分析的Maven项目。
- en: 'Run the following command:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE24]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Observe the output:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Open the generated XML file `findbugsXml.xml` in the `target` folder:![How to
    do it...](img/6124OS_06_11.jpg)
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`target`文件夹中打开生成的XML文件`findbugsXml.xml`：![如何操作...](img/6124OS_06_11.jpg)
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: When the `findbugs` goal of the FindBugs plugin is run, it analyzes the bytecode
    and reports errors to an output file in the XML format. Unlike Checkstyle and
    the PMD plugins, it does not generate a default site report unless configured
    differently.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行FindBugs插件的`findbugs`目标时，它分析字节码并将错误报告到XML格式的输出文件中。与Checkstyle和PMD插件不同，除非配置不同，否则它不会生成默认的站点报告。
- en: Tip
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As FindBugs works on bytecode, the project needs to be compiled before the FindBugs
    analysis can be run. Otherwise, you will not find any FindBugs defects!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 由于FindBugs在字节码上工作，因此在运行FindBugs分析之前，项目需要先编译。否则，你将找不到任何FindBugs缺陷！
- en: 'FindBugs also provides several options that allow you to specify the classes
    to be included/excluded from analysis, specify the rules to be run, and to fail
    when errors crop up during the build. Let''s briefly discuss some examples that
    describe the basic usage of the FindBugs plugin:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: FindBugs还提供了几个选项，允许你指定要包含/排除分析的类，指定要运行的规则，并在构建过程中出现错误时失败。让我们简要讨论一些描述FindBugs插件基本使用的示例：
- en: 'Filter bugs to report: This plugin allows us to specify classes and methods
    that can be included or excluded from reporting:'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤要报告的bug：此插件允许我们指定可以包含或排除在报告中的类和方法：
- en: '[PRE26]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Bug detectors to run: We can also specify which detectors to run. This can
    be done in the following manner:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要运行的错误检测器：我们还可以指定要运行哪些检测器。这可以通过以下方式完成：
- en: '[PRE27]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: There's more...
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also launch the FindBugs GUI to view the report in a graphical format:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以启动FindBugs GUI以图形格式查看报告：
- en: 'To do this, run the following Maven command:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要这样做，请运行以下Maven命令：
- en: '[PRE28]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Observe the FindBugs screen:![There's more...](img/6124OS_06_12.jpg)
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察FindBugs屏幕：![还有更多...](img/6124OS_06_12.jpg)
- en: Generating source references with the Maven JXR plugin
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven JXR插件生成源引用
- en: 'You may have observed the following warnings when running the PMD or Checkstyle
    plugin:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行PMD或Checkstyle插件时，你可能已经观察到以下警告：
- en: '[PRE29]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The plugins attempt to link the violation to the specific lines in the cross-reference
    of the source. As they are unable to find this cross-reference, they display the
    warning.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 插件试图将违规行为链接到源交叉引用的特定行。由于它们无法找到此交叉引用，因此显示警告。
- en: To generate this cross-reference, we need to use the Maven JXR plugin.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成此交叉引用，我们需要使用Maven JXR插件。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to generate source references with the Maven JXR plugin:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤使用Maven JXR插件生成源引用：
- en: Open the project for which you want to run the cross-reference.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要运行交叉引用的项目。
- en: 'Run the following Maven command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE30]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Observe the output:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE31]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Browse the `target/site` folder.![How to do it...](img/6124OS_06_13.jpg)
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览`target/site`文件夹。![如何操作...](img/6124OS_06_13.jpg)
- en: Open the contents of the `xref` folder in the browser:![How to do it...](img/6124OS_06_14.jpg)
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开`xref`文件夹的内容：![如何操作...](img/6124OS_06_14.jpg)
- en: How it works...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'When the `jxr` goal of the Maven JXR plugin is run, it generates a cross-reference
    of all the source files of the project. The format is similar to Javadoc, but
    on clicking on the class, you get to see the source code with the line numbers:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行Maven JXR插件的`jxr`目标时，它生成项目的所有源文件的交叉引用。格式类似于Javadoc，但点击类时，你可以看到带有行号的源代码：
- en: '![How it works...](img/6124OS_06_15.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/6124OS_06_15.jpg)'
- en: There's more...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Once the cross-reference exists, code quality tools, such as PMD and Checkstyle,
    link to this reference automatically by using the following steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立交叉引用，代码质量工具，如PMD和Checkstyle，将自动使用以下步骤链接到此引用：
- en: 'Run the following Maven command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE32]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Open the Checkstyle report in the browser:![There's more...](img/6124OS_06_16.jpg)
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中打开Checkstyle报告：![还有更多...](img/6124OS_06_16.jpg)
- en: You can now see the line numbers against each of the violations, with the link
    to the line number in the cross-referenced source code.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以看到针对每个违规的行号，以及到交叉引用源代码行号的链接。
- en: Analyzing code with the Maven SonarQube plugin
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Maven SonarQube插件分析代码
- en: Each of the code analysis tools we have seen in the previous sections identify
    specific issues in the code. While Checkstyle looks for violations in coding guidelines,
    PMD identifies common coding errors, and FindBugs detects bug patterns.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在前几节中看到的每个代码分析工具都识别代码中的特定问题。虽然Checkstyle寻找编码指南中的违规，PMD识别常见的编码错误，而FindBugs检测错误模式。
- en: You could have your project configured to run all the three. In addition, you
    could also run plugins to identify coverage. You could also do all these and more
    by doing a SonarQube analysis of the project.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将项目配置为运行所有这三个工具。此外，您还可以运行插件以识别覆盖率。您还可以通过执行项目的SonarQube分析来完成所有这些以及其他操作。
- en: SonarQube is a platform to manage code quality. It is a web-based application,
    where rules, alerts, thresholds, and other metrics can be configured. It provides
    various ways to analyze code. The results of the analysis can then be viewed in
    a web application. SonarQube also provides several paid plugins, such as **SQALE**,
    and for specific languages, such as Cobol and C++.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube是一个用于管理代码质量的平台。它是一个基于Web的应用程序，其中可以配置规则、警报、阈值和其他指标。它提供了分析代码的多种方式。分析的结果可以在Web应用程序中查看。SonarQube还提供了一些付费插件，例如**SQALE**，以及针对特定语言，如Cobol和C++。
- en: Getting ready...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中...
- en: 'Let''s briefly discuss some basic requirements for using the Maven SonarQube
    plugin:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要讨论使用Maven SonarQube插件的一些基本要求：
- en: Visit the download page for SonarQube at [http://www.sonarqube.org/downloads/](http://www.sonarqube.org/downloads/).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问SonarQube的下载页面[http://www.sonarqube.org/downloads/](http://www.sonarqube.org/downloads/)。
- en: Download the latest release.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新版本。
- en: Unzip the ZIP file to a folder of your choice.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将ZIP文件解压缩到您选择的文件夹中。
- en: Based on the platform, start the server by following the instructions.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据平台，按照说明启动服务器。
- en: Confirm that the server is running by visiting the web page at `http://localhost:9000/`
    (assuming it's a default installation).
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问网页`http://localhost:9000/`（假设是默认安装）来确认服务器正在运行。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to analyze the code with the Maven SonarQube plugin:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤使用Maven SonarQube插件分析代码：
- en: Open the Maven project for which you want to do SonarQube analysis.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您想要进行SonarQube分析的项目。
- en: 'Run the following Maven command:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE33]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Observe the output as shown in the following screenshot:![How to do it...](img/6124OS_06_17.jpg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下屏幕截图所示的输出：![如何操作...](img/6124OS_06_17.jpg)
- en: Visit the Sonar web page at `http://localhost:9000`:![How to do it...](img/6124OS_06_18.jpg)
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Sonar网页`http://localhost:9000`：![如何操作...](img/6124OS_06_18.jpg)
- en: Click on the project link:![How to do it...](img/6124OS_06_19.jpg)
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击项目链接：![如何操作...](img/6124OS_06_19.jpg)
- en: How it works...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `sonar` goal of the Maven SonarQube plugin sets in motion a series of steps
    to do various analyses of the project. Based on the configuration, the Sonar plugin
    performs Checkstyle analysis, FindBugs analysis and PMD analysis, as well as detects
    code coverage, code duplication, design issues and code complexity.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: Maven SonarQube插件的`sonar`目标启动了一系列步骤，以对项目进行各种分析。根据配置，Sonar插件执行Checkstyle分析、FindBugs分析和PMD分析，并检测代码覆盖率、代码重复、设计问题和代码复杂性。
- en: It sends the output to a database and generates reports that can be viewed from
    the web page by the user.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 它将输出发送到数据库，并生成用户可以通过网页查看的报告。
- en: As you can see from the dashboard, it has generated the unit test report along
    with coverage information. Clicking on the link will take the user to details
    of the coverage.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从仪表板中看到的那样，它已生成单元测试报告以及覆盖率信息。点击链接将用户带到覆盖率详情。
- en: '![How it works...](img/6124OS_06_20.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/6124OS_06_20.jpg)'
- en: 'Similarly, clicking on **Issues** gives details of the various violations:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，点击**问题**可以查看各种违规的详细信息：
- en: '![How it works...](img/6124OS_06_21.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/6124OS_06_21.jpg)'
- en: Each of these issues can be drilled down to the line-level details, and Sonar
    provides the details, including fix suggestions.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这些问题中的每一个都可以深入到行级细节，Sonar 提供了详细信息，包括修复建议。
- en: There's more...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: SonarQube provides several configuration options to specify rules to be included/excluded,
    source files to be included/excluded, and so on. The configuration can be done
    through the web interface, and in some cases, by means of properties, either in
    the Maven's settings file or through the command line.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: SonarQube 提供了多个配置选项来指定要包含/排除的规则、要包含/排除的源文件等。配置可以通过网页界面进行，在某些情况下，也可以通过属性进行，无论是在
    Maven 的设置文件中还是在命令行中。
- en: In addition, SonarQube provides plugins for Eclipse and IntelliJ. Once installed
    and configured, these plugins report violations directly in the IDE in the specific
    lines. As this is not specific to Maven, its details are outside the scope of
    this section.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，SonarQube 为 Eclipse 和 IntelliJ 提供了插件。一旦安装并配置，这些插件就会在 IDE 中直接报告特定行的违规情况。由于这并非特定于
    Maven，其详细信息超出了本节范围。
