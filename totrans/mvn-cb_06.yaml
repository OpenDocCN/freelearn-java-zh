- en: Chapter 6. Code Quality Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will review some of the available tools for the Java language
    and how to use them in the context of Maven. We will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code coverage with the Maven JaCoCo plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code coverage with the Maven Cobertura plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven PMD plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven Checkstyle plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven FindBugs plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating source references with the Maven JXR plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven SonarQube plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is one thing to write code and another to write good code. The subjectivity
    of code quality is greatly reduced by having coding guidelines/standards. Whether
    a developer follows coding standards or not can be verified by subjecting the
    code to a code review. On the other hand, there are tools that automatically perform
    these reviews against defined standards.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to code quality, programming best practices also recommend writing
    automated unit tests for the code. The line and branch coverage achieved by these
    unit tests can also be quantitatively measured by tools.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code coverage with the Maven JaCoCo plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JaCoCo is a free Java code coverage tool. This is essentially the successor
    to Emma, and it has been developed by the EclEmma team as an Eclipse project.
  prefs: []
  type: TYPE_NORMAL
- en: JaCoCo offers line and branch coverage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified to work. To do this, refer to
    the first three recipes of [Chapter1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to analyze the code coverage with the Maven JaCoCo
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the pom file of a project that has unit tests (for instance, `project-with-tests`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command from the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the output for the preceding command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `index.html` file generated in the `target/site/jacoco` folder:![How
    to do it...](img/6124OS_06_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the pom file, we instruct Maven to run the following two goals of the Maven
    JaCoCo plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '`prepare-agent`: This is bound by default to the `initialize` phase of the
    Maven default lifecycle. The goal runs and prepares the agent that does the analysis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report`: This agent gathers test coverage information when the tests are run
    and creates the report as part of the prepare-package phase (which we have explicitly
    specified).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The report gives information about the test coverage. Green indicates lines
    that are covered by tests and red indicates lines that are not covered by tests.
    In the preceding example, **12 of 19** instructions are not covered by tests.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You could subject the project to code coverage and generate the same report
    without making any changes to the pom file. To do this, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you may get the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: To fix this, specify the `groupId` and `artifactId` parameters of the plugin
    explicitly. In the *Configuring Maven to search for plugins* recipe of [Chapter
    8](ch08.html "Chapter 8. Handling Typical Build Requirements"), *Handling Typical
    Build Requirements*, we will see an alternate way to address this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, what what we will be doing is explicitly calling the
    relevant goals that we saw getting executed earlier. So, first `prepare-agent`
    will run, followed by `test`, and then the `report` goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'How about failing the build if the code coverage is below a threshold value?
    To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following execution block to the plugin configuration in the `build`
    section specified earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the result as shown in following screenshot:![There's more...](img/6124OS_06_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing code coverage with the Maven Cobertura plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cobertura is another popular Java tool that calculates the percentage of code
    accessed by tests. It is based on **jcoverage**. There are many ways to use Cobertura,
    including standalone, through Ant script, and Maven. Let us use the Maven Cobertura
    plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to analyze the code coverage with the Maven Cobertura
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a Maven project that has unit tests (for instance, `project-with-tests`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See the report generated:![How to do it...](img/6124OS_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JaCoCo instruments the code online when the tests are running and hence,it needs
    to have the agent running. On the other hand, Cobertura instruments the bytecode
    during compilation offline. The `cobertura` goal of the Cobertura Maven plugin
    instruments the project, runs the tests, and generates the report.
  prefs: []
  type: TYPE_NORMAL
- en: There are separate goals to `instrument` and `check` results, if required.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What if we want to fail the build if the code coverage is below a threshold
    level? We can set up Cobertura to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The build has failed because, in the pom file, we specified that the build should
    be halted if the coverage is less than 85%.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code with the Maven PMD plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PMD is a source code analyzer. It finds common programming flaws such as unused
    variables, empty catch blocks, and unnecessary object creation. It also includes
    the **Copy/Paste Detector** (**CPD**) that finds duplicated code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to run PMD on a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to do a PMD analysis (for instance,
    `project-with-violations`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the contents of the `target` folder:![How to do it...](img/6124OS_06_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `pmd.xml` report:![How to do it...](img/6124OS_06_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `cpd.html` file in the `site` folder:![How to do it...](img/6124OS_06_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `pmd` or `cpd` goals of the Maven PMD plugin are not bound to any phase.
    Also, they analyze the Java source and thus, do not need any other Maven phase
    or goal to be run.
  prefs: []
  type: TYPE_NORMAL
- en: When the `pmd` goal is run, it generates a PMD site report using default rulesets
    and the configuration set in the plugin. It also generates a pmd output file in
    the XML format.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also define your own customized ruleset. To do this, add the following
    code in the `configuration` section of the pom file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Likewise, when the `cpd` goal is run, it generates a similar report for duplicated
    code. By default, the minimum token count that it considers to report that code
    is duplicated is 100 tokens (which is typically 10 lines of code).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The plugin can be made to fail the build by using the check goal in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the pom file of `project-with-violations`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven Checkstyle plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Checkstyle is a tool that helps programmers follow coding standards. It automates
    the process of checking if defined coding standards are followed. It can support
    any coding standards by suitable configuration. Like other tools, it can be run
    standalone as well as integrated with Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to analyze code with the Maven Checkstyle plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to do a Checkstyle analysis (for instance,
    `project-with-violations`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `checkstyle-result.xml` report in the `target` folder:![How to do it...](img/6124OS_06_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unlike the `pmd`, `checkstyle` goal of Maven, the Checkstyle plugin is not bound
    to any phase.
  prefs: []
  type: TYPE_NORMAL
- en: When the `checkstyle` goal is run, it generates a Checkstyle site report using
    default rulesets and the configuration set in the plugin. It also generates a
    Checkstyle output file in the XML format.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Maven Checkstyle plugin supports several configuration options to customize
    the rules, exclude files from being checked, and so on. Let''s briefly discuss
    the examples that show usage of Maven Checkstyle plugin in some advanced usecases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Checkstyle rules can be specified inline in the `configuration` section of
    the plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'They can also be specified in an external file and referred using the `configLocation`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A Suppressions filter can be created to tell Checkstyle not to report violations
    on specific files and specific sections of the files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As in the case of PMD, we can configure the Maven Checkstyle plugin such that
    it fails a build in case of errors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the pom file of `project-with-violations`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![There's more...](img/6124OS_06_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Analyzing code with the Maven FindBugs plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FindBugs is another tool that uses static analysis to inspect Java bytecode
    for bugs in a Java code. It is based on the concept of bug patterns. A bug pattern
    is a code snippet that is often an error.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us see how we can use the Maven FindBugs plugin to analyze and identify
    defects in our code:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to do the FindBugs analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the generated XML file `findbugsXml.xml` in the `target` folder:![How to
    do it...](img/6124OS_06_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the `findbugs` goal of the FindBugs plugin is run, it analyzes the bytecode
    and reports errors to an output file in the XML format. Unlike Checkstyle and
    the PMD plugins, it does not generate a default site report unless configured
    differently.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As FindBugs works on bytecode, the project needs to be compiled before the FindBugs
    analysis can be run. Otherwise, you will not find any FindBugs defects!
  prefs: []
  type: TYPE_NORMAL
- en: 'FindBugs also provides several options that allow you to specify the classes
    to be included/excluded from analysis, specify the rules to be run, and to fail
    when errors crop up during the build. Let''s briefly discuss some examples that
    describe the basic usage of the FindBugs plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter bugs to report: This plugin allows us to specify classes and methods
    that can be included or excluded from reporting:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Bug detectors to run: We can also specify which detectors to run. This can
    be done in the following manner:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also launch the FindBugs GUI to view the report in a graphical format:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the FindBugs screen:![There's more...](img/6124OS_06_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generating source references with the Maven JXR plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You may have observed the following warnings when running the PMD or Checkstyle
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The plugins attempt to link the violation to the specific lines in the cross-reference
    of the source. As they are unable to find this cross-reference, they display the
    warning.
  prefs: []
  type: TYPE_NORMAL
- en: To generate this cross-reference, we need to use the Maven JXR plugin.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to generate source references with the Maven JXR plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project for which you want to run the cross-reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Browse the `target/site` folder.![How to do it...](img/6124OS_06_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the contents of the `xref` folder in the browser:![How to do it...](img/6124OS_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the `jxr` goal of the Maven JXR plugin is run, it generates a cross-reference
    of all the source files of the project. The format is similar to Javadoc, but
    on clicking on the class, you get to see the source code with the line numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_06_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the cross-reference exists, code quality tools, such as PMD and Checkstyle,
    link to this reference automatically by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the Checkstyle report in the browser:![There's more...](img/6124OS_06_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now see the line numbers against each of the violations, with the link
    to the line number in the cross-referenced source code.
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing code with the Maven SonarQube plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each of the code analysis tools we have seen in the previous sections identify
    specific issues in the code. While Checkstyle looks for violations in coding guidelines,
    PMD identifies common coding errors, and FindBugs detects bug patterns.
  prefs: []
  type: TYPE_NORMAL
- en: You could have your project configured to run all the three. In addition, you
    could also run plugins to identify coverage. You could also do all these and more
    by doing a SonarQube analysis of the project.
  prefs: []
  type: TYPE_NORMAL
- en: SonarQube is a platform to manage code quality. It is a web-based application,
    where rules, alerts, thresholds, and other metrics can be configured. It provides
    various ways to analyze code. The results of the analysis can then be viewed in
    a web application. SonarQube also provides several paid plugins, such as **SQALE**,
    and for specific languages, such as Cobol and C++.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s briefly discuss some basic requirements for using the Maven SonarQube
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the download page for SonarQube at [http://www.sonarqube.org/downloads/](http://www.sonarqube.org/downloads/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest release.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unzip the ZIP file to a folder of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the platform, start the server by following the instructions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm that the server is running by visiting the web page at `http://localhost:9000/`
    (assuming it's a default installation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to analyze the code with the Maven SonarQube plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project for which you want to do SonarQube analysis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![How to do it...](img/6124OS_06_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visit the Sonar web page at `http://localhost:9000`:![How to do it...](img/6124OS_06_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the project link:![How to do it...](img/6124OS_06_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `sonar` goal of the Maven SonarQube plugin sets in motion a series of steps
    to do various analyses of the project. Based on the configuration, the Sonar plugin
    performs Checkstyle analysis, FindBugs analysis and PMD analysis, as well as detects
    code coverage, code duplication, design issues and code complexity.
  prefs: []
  type: TYPE_NORMAL
- en: It sends the output to a database and generates reports that can be viewed from
    the web page by the user.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the dashboard, it has generated the unit test report along
    with coverage information. Clicking on the link will take the user to details
    of the coverage.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, clicking on **Issues** gives details of the various violations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each of these issues can be drilled down to the line-level details, and Sonar
    provides the details, including fix suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SonarQube provides several configuration options to specify rules to be included/excluded,
    source files to be included/excluded, and so on. The configuration can be done
    through the web interface, and in some cases, by means of properties, either in
    the Maven's settings file or through the command line.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, SonarQube provides plugins for Eclipse and IntelliJ. Once installed
    and configured, these plugins report violations directly in the IDE in the specific
    lines. As this is not specific to Maven, its details are outside the scope of
    this section.
  prefs: []
  type: TYPE_NORMAL
