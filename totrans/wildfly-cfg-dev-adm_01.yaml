- en: Chapter 1. Installing WildFly
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。安装 WildFly
- en: The Java language has undergone many changes since its first release and will
    continue to adapt to meet the needs of the developer. Oracle, which acquired Sun
    in 2010, stated that its high-level Java strategy is to enhance and extend the
    reach of Java to new and emerging software development objectives; simplify, optimize,
    and integrate the Java platform into new deployment architectures; and invest
    in the Java developer community allowing for increased participation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Java 首次发布以来，Java 语言经历了许多变化，并将继续适应以满足开发者的需求。2010 年收购 Sun 的 Oracle 表示，其高级 Java
    策略是增强和扩展 Java 到新的和新兴的软件开发目标；简化、优化并将 Java 平台集成到新的部署架构中；以及投资于 Java 开发者社区，以增加参与度。
- en: This has certainly been true in the Enterprise edition of Java, the main focus
    of which has been improved developer productivity, providing support for HTML5,
    and meeting enterprise demands. Out of all the Enterprise Java releases, Java
    EE 7 has been the most transparent and open to community participation. By allowing
    public feedback, the demands of the community can be realized and used to help
    shape Java EE 7 for the better, ultimately adding to the growth and success of
    Enterprise Java.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这在 Java 企业版中确实如此，其重点是提高开发者的生产力，提供对 HTML5 的支持，并满足企业需求。在所有企业 Java 版本中，Java EE
    7 是最透明且最开放于社区参与的。通过允许公开反馈，社区的需求可以得到实现并用于帮助塑造 Java EE 7，从而最终促进企业 Java 的增长和成功。
- en: In addition, a large number of open source projects are used within the application
    server, such as Hibernate and Undertow. Integrating all these libraries does not
    come without a price because each library has evolved with complexity and requires
    more and more additional libraries to work.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，应用程序服务器内部使用了大量开源项目，例如 Hibernate 和 Undertow。整合所有这些库并非没有代价，因为每个库都随着复杂性的增加而需要越来越多的附加库来工作。
- en: As most IT experts agree, the challenge for today's application servers is to
    combine a rich set of features requested by customers along with a lightweight
    and flexible container configuration.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如大多数 IT 专家所同意，今天应用程序服务器的挑战在于结合客户所需的一套丰富功能，以及轻量级和灵活的容器配置。
- en: What's new in WildFly 8?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WildFly 8 的新特性有哪些？
- en: WildFly 8 is the direct continuation to the JBoss AS project. The renaming of
    the community version of JBoss AS was done to reduce confusion between the open
    source JBoss server, the JBoss community, and the **JBoss Enterprise Application
    Platform** (**JBoss EAP**). WildFly 8 is free and open source, with support coming
    from the JBoss community, whereas JBoss EAP is a licensed product that comes with
    support from RedHat.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 8 是 JBoss AS 项目的直接延续。对 JBoss AS 社区版本的更名是为了减少开源 JBoss 服务器、JBoss 社区和 **JBoss
    企业应用平台**（**JBoss EAP**）之间的混淆。WildFly 8 是免费和开源的，由 JBoss 社区提供支持，而 JBoss EAP 是一个带有
    RedHat 支持的授权产品。
- en: 'The most notable updates in WildFly 8 from earlier versions are as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 8 相较于早期版本最显著的更新如下：
- en: '**Java EE7 certification**: WildFly is a fully compliant Java EE enterprise
    server, which means that it provides reference implementations for all **Java
    Specification Requests** (**JSRs**) that make up Java EE 7\. JSRs are basically
    change requests for the Java language. For more information on how JSRs work,
    refer to [https://www.jcp.org/en/jsr/overview](https://www.jcp.org/en/jsr/overview).'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java EE7 认证**：WildFly 是一个完全符合 Java EE 企业服务器的产品，这意味着它为构成 Java EE 7 的所有 **Java
    规范请求**（**JSRs**）提供了参考实现。JSRs 基本上是针对 Java 语言的变更请求。有关 JSRs 如何工作的更多信息，请参阅 [https://www.jcp.org/en/jsr/overview](https://www.jcp.org/en/jsr/overview)。'
- en: '**Arrival of Undertow**: JBoss Web has been completely removed and replaced
    with Undertow. Undertow is a cutting-edge web server that supports non-blocking
    and blocking handlers, web sockets, and asynchronous servlets. It has been designed
    for scalability and maximum throughput. It is easy to use, easy to configure,
    and is highly customizable.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Undertow 的到来**：JBoss Web 已完全移除并替换为 Undertow。Undertow 是一个支持非阻塞和阻塞处理程序、WebSocket
    和异步 Servlet 的前沿 Web 服务器。它被设计用于可扩展性和最大吞吐量。它易于使用，易于配置，并且高度可定制。'
- en: '**Port Reduction**: The number of open ports has been greatly reduced in WildFly.
    Only two ports are open: 8080 and 9990\. This has been achieved by multiplexing
    protocols over HTTP using the HTTP upgrade feature of Undertow.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端口减少**：WildFly 中的开放端口数量已大幅减少。只有两个端口开放：8080 和 9990。这是通过使用 Undertow 的 HTTP
    升级功能在 HTTP 上多路复用协议来实现的。'
- en: '**Security Manager**: You can now configure per-deployment security permissions.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全管理器**：你现在可以按部署配置安全权限。'
- en: '**Logging**: Several enhancements have been made to WildFly logging. You can
    now view logfiles via the management interface, define custom formatters, and
    configure logging per-deployment.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：WildFly日志记录已经进行了多项增强。你现在可以通过管理界面查看日志文件，定义自定义格式化程序，并按部署配置日志记录。'
- en: '**Clustering**: Clustering in WildFly is heavily refactored and includes many
    new features, including web sessions, single sign-on, and mod_cluster support
    for Undertow. There is also a new public clustering API and new @Stateful EJB
    caching implementation.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集群**：WildFly的集群进行了大量重构，并包括许多新特性，包括Web会话、单点登录和Undertow的mod_cluster支持。还有一个新的公共集群API和新的@Stateful
    EJB缓存实现。'
- en: '**Command-line interface (CLI)**: You now have the ability to define an alias
    when connecting to a server, and the CLI GUI has additional functionality allowing
    you to explore any node in the tree.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令行界面（CLI）**：你现在在连接到服务器时可以定义别名，CLI GUI还增加了额外的功能，允许你探索树中的任何节点。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Installing the Java environment
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Java环境
- en: Installing WildFly 8
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装WildFly 8
- en: Installing JBoss tools
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装JBoss工具
- en: Exploring the application server filesystem
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索应用服务器文件系统
- en: Understanding the WildFly kernel
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解WildFly内核
- en: Getting started with the application server
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用应用服务器
- en: As far as hardware requirements are concerned, you should be aware that the
    server distribution, at the time of writing, requires about 150 MB of hard disk
    space and allocates a minimum of 64 MB and a maximum of 512 MB for a standalone
    server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在硬件要求方面，你应该知道，在撰写本文时，服务器发行版需要大约150 MB的硬盘空间，并为独立服务器分配了最小64 MB和最大512 MB。
- en: 'In order to get started, we are going to perform the following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始，我们将执行以下步骤：
- en: Download and install the Java Development Kit.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Java开发工具包。
- en: Download and install WildFly 8.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装WildFly 8。
- en: Download and install the Eclipse development environment. While we will use
    Eclipse in this book, you are free to use your IDE of choice.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装Eclipse开发环境。虽然我们将在本书中使用Eclipse，但你完全可以选择你喜欢的IDE。
- en: At the end of this chapter, you will have all the required software installed
    and will be ready to start working with the application server.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将安装所有必要的软件，并准备好开始使用应用服务器。
- en: Installing the Java environment
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Java环境
- en: WildFly is written in Java; therefore it needs a **Java Virtual Machine** (**JVM**)
    in which to run, along with the standard edition Java libraries. So, before we
    can get started setting up or learning about WildFly, we first need to install
    the **Java Development Kit** (**JDK**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly是用Java编写的；因此，它需要一个**Java虚拟机**（**JVM**）来运行，以及标准版Java库。因此，在我们开始设置或学习WildFly之前，我们首先需要安装**Java开发工具包**（**JDK**）。
- en: To use WildFly, you will need at least Java SE 7 or above. Although there is
    no plan to use Java 8 language changes within the WildFly 8.x source code, WildFly
    is compiled against Java 8\. It is recommended that you use the latest version
    of Java SE 8 to run WildFly.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用WildFly，你需要至少Java SE 7或更高版本。尽管在WildFly 8.x源代码中没有计划使用Java 8语言变更，但WildFly是针对Java
    8编译的。建议您使用Java SE 8的最新版本来运行WildFly。
- en: 'So, let''s move to the Oracle download page, [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html),
    which now hosts all JDK downloads, as shown in the following screenshot:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们转到Oracle下载页面，[http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)，它现在托管所有JDK下载，如下面的截图所示：
- en: '![Installing the Java environment](img/6232OS_01_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![安装Java环境](img/6232OS_01_01.jpg)'
- en: 'This will take you to the download page for the latest JDK. At the time of
    writing, this was Java 8 update 5\. You will need to accept the license agreement
    before downloading the JDK. Choose to download the latest version of Java for
    your operating system. Have a look at the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带你去最新JDK的下载页面。在撰写本文时，这是Java 8更新5。在下载JDK之前，你需要接受许可协议。选择下载适用于你操作系统的最新Java版本。查看以下截图：
- en: '![Installing the Java environment](img/6232OS_01_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![安装Java环境](img/6232OS_01_02.jpg)'
- en: The download will take a few minutes depending how fast your network is.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下载时间取决于你的网络速度。
- en: Installing Java on Linux
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Linux上安装Java
- en: 'Installing Java on Linux is very straightforward. Once the download is complete,
    extract the `tar.gz` file to your chosen install location. This command extracts
    the archive to your current directory:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上安装Java非常简单。下载完成后，将`tar.gz`文件解压到您选择的安装位置。以下命令将存档提取到您的当前目录：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, you need to add the path as an environment variable. This can be achieved
    by adding the following lines to your user profile script (the `.profile` file
    found in your home directory):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要将路径添加到环境变量中。这可以通过将以下行添加到您的用户配置文件脚本（位于您家目录中的`.profile`文件）来实现：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Installing Java on Windows
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Windows上安装Java
- en: Windows users can simply run the executable (`.exe`) file to start the installation.
    The name of the installer varies depending on the operating system and your system
    architecture (32-bit or 64-bit); however, the steps will be the same—just the
    name will change. At the time of writing, the installer for the latest version
    of Java for 64-bit Windows is called `jdk-8u5-windows-x64.exe`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以直接运行可执行文件（`.exe`）来启动安装。安装程序的名字取决于操作系统和您的系统架构（32位或64位）；然而，步骤将是相同的——只是名字会变化。在撰写本文时，64位Windows上最新版本的Java安装程序名为`jdk-8u5-windows-x64.exe`。
- en: When using Windows, you should stay away from installation paths that include
    empty spaces, such as `C:\Program Files`, as this leads to some issues when referencing
    the core libraries. An installation path such as `C:\Software\Java` or simply
    `C:\Java` is a better alternative.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Windows时，您应该避免包含空格的安装路径，例如`C:\Program Files`，因为这会导致在引用核心库时出现一些问题。`C:\Software\Java`或简单的`C:\Java`是一个更好的选择。
- en: When the installation is complete, you will need to update a couple of settings
    on the computer so that it will know where to find Java. The most important setting
    is `JAVA_HOME`, which is directly referenced by the WildFly startup script.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您需要更新计算机上的几个设置，以便它知道Java的位置。最重要的设置是`JAVA_HOME`，它直接被WildFly启动脚本引用。
- en: 'If you are running Windows XP/2000, follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行Windows XP/2000，请按照以下步骤操作：
- en: Right-click on **My Computer**, and select **Properties** from the context menu.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**我的电脑**，从上下文菜单中选择**属性**。
- en: On the **Advanced** tab, click on the **Environment Variables** button.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**高级**选项卡上，点击**环境变量**按钮。
- en: Then, in the **System variables** box, click on **New**.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在**系统变量**框中，点击**新建**。
- en: Name the new variable `JAVA_HOME`, and give a value of the path to your JDK
    installation; I recommend something like `C:\Java\jdk1.8.0_05`.![Installing Java
    on Windows](img/6232OS_01_03.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新变量命名为`JAVA_HOME`，并给出JDK安装路径的值；我建议像`C:\Java\jdk1.8.0_05`这样的路径。![在Windows上安装Java](img/6232OS_01_03.jpg)
- en: Tip
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Windows 7 tip**'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Windows 7技巧**'
- en: Because of increased security in Windows 7, standard users must have **User**
    **Account** **Control** (**UAC**) turned on to change the environment variables,
    and the change must be completed via user accounts. In the **User Accounts** window,
    under **Tasks**, select **Change my environment variables**. Use the **New**,
    **Edit**, or **Delete** button to amend environment variables
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于Windows 7的安全性提高，标准用户必须开启**用户账户控制**（**UAC**）以更改环境变量，并且更改必须通过用户账户完成。在**用户账户**窗口中，在**任务**下选择**更改我的环境变量**。使用**新建**、**编辑**或**删除**按钮来修改环境变量。
- en: Now it's time to modify the system's `PATH` variable. Double-click on the `PATH`
    system variable. In the box that pops up, navigate to the end of the **Variable**
    **Value** line, add a semicolon to the end, and then add the path to your JDK.
    This will be something like `%JAVA_HOME%\bin`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候修改系统的`PATH`变量了。双击`PATH`系统变量。在弹出的框中，导航到**变量值**行的末尾，添加一个分号，然后添加您的JDK路径。这将是类似`%JAVA_HOME%\bin`的东西。
- en: Installing WildFly 8
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装WildFly 8
- en: 'The WildFly application server can be downloaded for free from the WildFly
    site, [http://www.wildfly.org/downloads/](http://www.wildfly.org/downloads/).
    Have a look at the following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly应用程序服务器可以从WildFly网站免费下载，[http://www.wildfly.org/downloads/](http://www.wildfly.org/downloads/)。请查看以下截图：
- en: '![Installing WildFly 8](img/6232OS_01_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![安装WildFly 8](img/6232OS_01_04.jpg)'
- en: You will notice that there is an option to download a minimalistic core distribution.
    This is aimed at developers who want to build their own application runtime using
    the WildFly 8 architecture.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到有一个选项可以下载一个简约的核心发行版。这个版本是为那些想要使用WildFly 8架构构建自己的应用程序运行时环境的开发者准备的。
- en: Choose to download the full Java EE7 distribution. Like JBoss AS 7, WildFly
    does not come with an installer. It is simply a matter of extracting the compressed
    archive to a location of your choosing.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 选择下载完整的Java EE7发行版。与JBoss AS 7一样，WildFly不附带安装程序。只需将压缩存档提取到您选择的任何位置即可。
- en: 'Linux users can extract the file using the `tar` or `unzip` command (depending
    on the type of compressed file you downloaded):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Linux用户可以使用`tar`或`unzip`命令提取文件（取决于您下载的压缩文件类型）：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: For those of you using Windows, you can use WinZip or WinRAR, taking care to
    choose a folder that does not contain empty spaces.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Windows的用户，您可以使用WinZip或WinRAR，注意选择一个不包含空格的文件夹。
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Security warning**'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全警告**'
- en: Unix/Linux users should be aware that WildFly does not require root privileges,
    as none of the default ports used by WildFly are below the privileged port range
    of 1024\. To reduce the risk of users gaining root privileges through WildFly,
    install and run WildFly as a non-root user.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Unix/Linux用户应该知道，WildFly不需要root权限，因为WildFly使用的默认端口都不低于1024的特权端口范围。为了降低用户通过WildFly获得root权限的风险，请以非root用户安装并运行WildFly。
- en: Starting WildFly
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始启动WildFly
- en: 'After installing WildFly, it is wise to perform a simple startup test to validate
    that there are no problems with your Java configuration. To test your installation,
    move to the `bin` directory of your WildFly installand issue the following command:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装WildFly后，进行简单的启动测试以验证您的Java配置没有问题是很明智的。要测试您的安装，请转到WildFly安装的`bin`目录，并执行以下命令：
- en: 'For Linux/Unix users:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Linux/Unix用户：
- en: '[PRE3]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'For Windows users:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows用户：
- en: '[PRE4]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following screenshot shows a sample WildFly 8 startup console:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了WildFly 8的启动控制台：
- en: '![Starting WildFly](img/6232OS_01_05.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![开始启动WildFly](img/6232OS_01_05.jpg)'
- en: The preceding command starts up a WildFly standalone instance that's equivalent
    to starting the application server with the `run.sh` script used by releases prior
    to JBoss AS 7\. The `run.sh` file remains in the WildFly `bin` directory but is
    merely a placeholder and will not start the application server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令启动了一个与JBoss AS 7之前版本中使用的`run.sh`脚本启动应用程序服务器等效的WildFly独立实例。`run.sh`文件仍然位于WildFly的`bin`目录中，但它只是一个占位符，不会启动应用程序服务器。
- en: Notice how fast the application server starts. This is due to the modular architecture
    of WildFly. Essential services are started concurrently on boot-up, and non-critical
    services are started only when needed, resulting in an exceptionally fast startup.
    Local caching means that the server will start even quicker second time round!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 注意应用程序服务器启动有多快。这是由于WildFly的模块化架构。在启动时，关键服务并发启动，非关键服务仅在需要时启动，从而实现了极快的启动速度。本地缓存意味着服务器在第二次启动时将更快！
- en: 'If you need to customize the startup properties of your application server,
    then you need to open and modify the `standalone.conf` file (or `standalone.conf.bat`
    for Windows users). This file contains the memory requirements of WildFly. The
    following is the Linux core section of it:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要自定义应用程序服务器的启动属性，则需要打开并修改`standalone.conf`文件（或Windows用户的`standalone.conf.bat`）。此文件包含WildFly的内存需求。以下是它的Linux核心部分：
- en: '[PRE5]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Java SE 8 users**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java SE 8用户**'
- en: PermGen has been replaced with Metaspace in Java 8\. If you are using Java 8,
    then remove the `-XX:MaxPermSize=256m` property from the `standalone.conf` file,
    and replace it with `-XX:MaxMetaspaceSize=256m`. This will prevent VM warnings
    being printed to your WildFly logs on startup.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 8中，PermGen已被Metaspace取代。如果您使用的是Java 8，请从`standalone.conf`文件中删除`-XX:MaxPermSize=256m`属性，并将其替换为`-XX:MaxMetaspaceSize=256m`。这将防止在启动时将VM警告打印到您的WildFly日志中。
- en: By default, the application server starts with a minimum heap space memory requirement
    of 64 MB and a maximum requirement of 512 MB. This will be just enough to get
    started; however, if you need to run a core Java EE application on it, you will
    likely require a minimum of 1 GB of heap space. More realistically, you will need
    2 GB or more depending on your application type. Generally speaking, 32-bit machines
    cannot execute a process whose space exceeds 4 GB; however, on 64-bit machines,
    there's essentially no limit to process the size.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，应用程序服务器以64 MB的最小堆空间内存需求和512 MB的最大需求启动。这足以开始使用；然而，如果您需要在上面运行核心Java EE应用程序，您可能至少需要1
    GB的堆空间。更现实地说，根据您的应用程序类型，您可能需要2 GB或更多。一般来说，32位机器无法执行超过4 GB空间的过程；然而，在64位机器上，处理过程的大小实际上没有限制。
- en: 'You can verify that the server is reachable from the network by simply pointing
    your browser to the application server''s welcome page, which is reachable by
    default at the well-known address: `http://localhost:8080`. Have a look at the
    following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将浏览器指向应用服务器的欢迎页面来验证服务器是否可以从网络访问，默认情况下，该页面可以通过以下知名地址访问：`http://localhost:8080`。请查看以下截图：
- en: '![Starting WildFly](img/6232OS_01_06.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![启动 WildFly](img/6232OS_01_06.jpg)'
- en: Connecting to the server with the command-line interface
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令行界面连接到服务器
- en: If you have been using releases of the application server prior to JBoss AS
    7, you might have heard about the `twiddle` command-line utility that queries
    the MBeans installed on the application server. This utility was replaced in JBoss
    AS 7 and is still used in WildFly. Its replacement is a more sophisticated interface
    named the **command-line** **interface** (**CLI**), which can be found in the
    `JBOSS_HOME/bin` folder.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前使用过 JBoss AS 7 之前的版本的应用服务器，你可能听说过 `twiddle` 命令行工具，该工具可以查询应用服务器上安装的 MBeans。这个工具在
    JBoss AS 7 中被替换，但在 WildFly 中仍然被使用。它的替代品是一个更复杂的界面，称为 **命令行界面**（**CLI**），可以在 `JBOSS_HOME/bin`
    文件夹中找到。
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**References to JBOSS_HOME**'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**关于 JBOSS_HOME 的引用**'
- en: Although the community version of JBoss AS has been renamed to WildFly, you
    will see that the properties in the startup scripts continue to use the property,
    `JBOSS_HOME`, to reference the install directory of WildFly. For this reason,
    we will continue to use `JBOSS_HOME` when referring to the root install of WildFly.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '尽管 JBoss AS 的社区版本已被重命名为 WildFly，但你将看到启动脚本中的属性仍然使用属性 `JBOSS_HOME` 来引用 WildFly
    的安装目录。因此，当我们提到 WildFly 的根安装时，我们将继续使用 `JBOSS_HOME`。 '
- en: Just launch the `jboss-cli.sh` script (or `jboss-cli.bat` for Windows users),
    and you will be able to manage the application server via a shell interface, as
    shown in the following screenshot. Bear in mind that the server needs to be running
    in order to connect via the CLI.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 只需启动 `jboss-cli.sh` 脚本（对于 Windows 用户是 `jboss-cli.bat`），你就可以通过 shell 界面管理应用服务器，如以下截图所示。请注意，服务器需要运行才能通过
    CLI 连接。
- en: '![Connecting to the server with the command-line interface](img/6232OS_01_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![使用命令行界面连接到服务器](img/6232OS_01_07.jpg)'
- en: Once you are in the shell session, if you are unsure of what commands can be
    issued, you can simply press the *Tab* button to display all possible commands.
    If your command is partly typed, and there is only one possible matching command,
    your command will be autocompleted. Those of you who use Linux will be used to
    this type of command-line assistance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你进入了 shell 会话，如果你不确定可以发出哪些命令，你可以简单地按一下 *Tab* 键来显示所有可能的命令。如果你的命令部分输入，并且只有一个可能的匹配命令，你的命令将会自动完成。那些使用
    Linux 的用户会对这种命令行辅助方式感到熟悉。
- en: In the preceding screenshot, we have just connected to the server using the
    `connect` command, which, by default, uses the loopback server address and plugs
    into port number 9990.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们刚刚使用 `connect` 命令连接到服务器，默认情况下，该命令使用回环服务器地址，并连接到端口号 9990。
- en: Note
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The CLI is discussed in depth in [Chapter 7](ch07.html "Chapter 7. Using the
    Management Interfaces"), *Using the Management Interfaces*, which is all about
    the server-management interfaces. We will have an initial taste of its basic functionalities
    in the following sections, to get you accustomed to this powerful tool.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 在 [第 7 章](ch07.html "第 7 章。使用管理接口") 中进行了深入讨论，*使用管理接口*，这是关于服务器管理接口的全部内容。在接下来的几节中，我们将初步了解其基本功能，以便让你熟悉这个强大的工具。
- en: Stopping WildFly
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 停止 WildFly
- en: Probably the easiest way to stop WildFly is to send an interrupt signal using
    *Ctrl* + *C*. This should be done in the same console window in which you issued
    the startup command, that is, where the server is running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 可能停止 WildFly 的一种最简单的方法是使用 *Ctrl* + *C* 发送中断信号。这应该在发出启动命令的同一控制台窗口中完成，即服务器运行的地方。
- en: 'However, if your WildFly process was launched in the background or is running
    on another machine (see in the following sections), then you can use the CLI interface
    to issue an immediate `shutdown` command as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你的 WildFly 进程是在后台启动的或者运行在另一台机器上（见以下章节），那么你可以使用 CLI 界面立即发出 `shutdown` 命令，如下所示：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Locating the shutdown script
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定位关闭脚本
- en: 'There is actually one more option to shut down the application server, which
    is pretty useful if you need to shut down the server from within a script. This
    option consists of passing the `--connect` option to the admin shell, thereby
    switching off the interactive mode as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上还有一个选项可以关闭应用程序服务器，这在您需要从脚本中关闭服务器时非常有用。此选项包括将 `--connect` 选项传递给管理外壳，从而关闭交互模式，如下所示：
- en: '[PRE7]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Stopping WildFly on a remote machine
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在远程机器上停止 WildFly
- en: 'Shutting down an application server running on a remote machine is just a matter
    of connecting and providing the server''s remote address to the CLI:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭远程机器上运行的应用程序服务器只需连接并提供服务器的远程地址到 CLI：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remotely accessing WildFly via the CLI requires authentication. Check out [Chapter
    10](ch10.html "Chapter 10. Securing WildFly"), *Securing WildFly*, for more information
    about it. It also requires that the management interface on the remote WildFly
    install is opened to allow remote connections. This is covered in detail in [Chapter
    7](ch07.html "Chapter 7. Using the Management Interfaces"), *Using the Management
    Interfaces*.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 CLI 远程访问 WildFly 需要身份验证。有关更多信息，请参阅第 10 章 [Chapter 10. Securing WildFly](ch10.html
    "Chapter 10. Securing WildFly")，*Securing WildFly*。这也要求远程 WildFly 安装上的管理界面打开以允许远程连接。这在第
    7 章 [Chapter 7. Using the Management Interfaces](ch07.html "Chapter 7. Using the
    Management Interfaces")，*Using the Management Interfaces* 中有详细说明。
- en: Restarting WildFly
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重启 WildFly
- en: The CLI contains a lot of useful commands. One of the most helpful options is
    the ability to reload all or part of the server configuration using the `reload`
    command.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: CLI 包含许多有用的命令。其中最有帮助的选项之一是使用 `reload` 命令重新加载所有或部分服务器配置。
- en: 'When issued on the **root** **node** **path** of the server, WildFly reloads
    all the services configuration, as shown in the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当在服务器的 **root** **节点** **路径** 上执行时，WildFly 会重新加载所有服务配置，如下面的命令所示：
- en: '[PRE9]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Installing the Eclipse environment
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Eclipse 环境
- en: Although the main focus of this book is the administration of the WildFly application
    server, we are also concerned with application packaging and deployment. For this
    reason, we will sometimes add examples that require a development environment
    to be installed on your machine.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管本书的主要重点是 WildFly 应用程序服务器的管理，但我们还关注应用程序打包和部署。因此，我们有时会添加需要安装到您机器上的开发环境的示例。
- en: The development environment used in this book is Eclipse. Eclipse is known by
    developers worldwide and contains a huge set of plugins, building on its core
    functionality. If you are comfortable with another IDE, then feel free to use
    it, but this book will demonstrate Eclipse only. At the time of writing this,
    only Eclipse and NetBeans have plugins for WildFly.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的开发环境是 Eclipse。Eclipse 在全球开发者中都很知名，它包含了一个庞大的插件集，建立在其核心功能之上。如果您对其他 IDE 感到舒适，那么请随意使用它，但本书将仅演示
    Eclipse。在撰写本书时，只有 Eclipse 和 NetBeans 为 WildFly 提供插件。
- en: So let's move to the Eclipse download page, located at [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们转到位于 [http://www.eclipse.org/downloads](http://www.eclipse.org/downloads)
    的 Eclipse 下载页面。
- en: 'From this page, download the latest Enterprise edition. The compressed package
    contains all the Java EE plugins already installed and requires about 248 MB of
    disk space. Have a look at the following screenshot:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 从此页面下载最新的企业版。该压缩包包含已安装的所有 Java EE 插件，需要大约 248 MB 的磁盘空间。请查看以下截图：
- en: '![Installing the Eclipse environment](img/6232OS_01_08.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Eclipse 环境](img/6232OS_01_08.jpg)'
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are using Java 8, you should make sure you download Eclipse Luna (4.4)
    or the patched Version of 4.3.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Java 8，请确保您下载 Eclipse Luna (4.4) 或 4.3 的修补版本。
- en: 'Once you have downloaded Eclipse, unzip it to a folder of your choice. The
    extracted folder will be called `eclipse`. To start Eclipse, navigate to the `eclipse`
    folder and run:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Eclipse 后，将其解压缩到您选择的文件夹。提取的文件夹将被称为 `eclipse`。要启动 Eclipse，请导航到 `eclipse` 文件夹并运行：
- en: '[PRE10]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Windows users can simply double-click on the executable file contained in the
    `eclipse` folder (the one with the big, blue, round eclipse icon).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户只需双击 `eclipse` 文件夹（带有大、蓝色、圆形 Eclipse 图标的文件夹）中的可执行文件。
- en: Installing JBoss tools
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 JBoss tools
- en: 'The next step is to install the WildFly 8 adapter, which is a part of the suite
    of plugins named JBoss tools. Installing new plugins in Eclipse is pretty simple;
    just perform the following steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装 WildFly 8 适配器，它是名为 JBoss tools 的插件套件的一部分。在 Eclipse 中安装新插件非常简单；只需执行以下步骤：
- en: From the menu, navigate to **Help** | **Eclipse Marketplace**.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中，导航到**帮助** | **Eclipse 市场place**。
- en: Then, search for the plugin you want to install (in this case, type `jboss tools`).
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，搜索您想要安装的插件（在本例中，键入`jboss tools`）。
- en: Finally, click on **Install** as shown in the following screenshot:![Installing
    JBoss tools](img/6232OS_01_09.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击以下截图所示的**安装**按钮：![安装 JBoss 工具](img/6232OS_01_09.jpg)
- en: Make sure you select the version of JBoss tools that matches your version of
    Eclipse, for example, Luna or Kepler. In this case, we are using Eclipse Luna,
    so I have selected the Luna version of JBoss tools. If you want to install just
    the WildFly adapter, select **JBossAS Tools**. Agree to the terms and click on
    **OK**. Restart Eclipse when prompted to do so.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您选择与您的 Eclipse 版本匹配的 JBoss 工具版本，例如 Luna 或 Kepler。在本例中，我们使用 Eclipse Luna，因此我选择了
    Luna 版本的 JBoss 工具。如果您只想安装 WildFly 适配器，请选择**JBossAS 工具**。同意条款并点击**确定**。当提示时重启 Eclipse。
- en: 'You can now set up the WildFly server in Eclipse by performing the following
    steps:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以通过以下步骤在 Eclipse 中设置 WildFly 服务器：
- en: Navigate to **New** | **Server**.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**新建** | **服务器**。
- en: Expand the **JBoss Community** node.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**JBoss 社区**节点。
- en: Select the option, **WildFly 8**, as shown in the following screenshot:![Installing
    JBoss tools](img/6232OS_01_10.jpg)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择以下截图所示的选项，**WildFly 8**：![安装 JBoss 工具](img/6232OS_01_10.jpg)
- en: Make sure you select your installed Java 8 JRE.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您选择已安装的 Java 8 JRE。
- en: Point the home directory to that of your WildFly root directory, as shown in
    the following screenshot:![Installing JBoss tools](img/6232OS_01_11.jpg)
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将主目录指向 WildFly 根目录，如下截图所示：![安装 JBoss 工具](img/6232OS_01_11.jpg)
- en: Exploring the application server filesystem
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索应用服务器文件系统
- en: 'Now that we are done with the installation of all the necessary tools, we will
    concentrate on the application server structure. The first thing you''ll notice
    when you browse through the application server folders is that its filesystem
    is basically divided into two core parts: the dichotomy reflects the distinction
    between **standalone** servers and **domain** servers.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了所有必要工具的安装，我们将专注于应用服务器的结构。当您浏览应用服务器文件夹时，您首先会注意到其文件系统基本上分为两个核心部分：这种二分法反映了**独立**服务器和**域**服务器之间的区别。
- en: The concept of a domain server is not new in the market of application servers,
    however, it was only introduced in JBoss with AS 7 as a way to *manage and coordinate*
    a set of instances of the application server. An application server node which
    is not configured as part of a domain is qualified as a standalone server. A standalone
    server resembles, in practice, a single instance of the application server you
    used to see in releases of the application server prior to JBoss AS 7.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 域服务器的概念在应用服务器市场上并不新鲜，然而，它仅在 JBoss AS 7 中作为管理并协调一组应用服务器实例的方式被引入。未配置为域一部分的应用服务器节点被认定为独立服务器。在实践中，独立服务器类似于您在
    JBoss AS 7 之前的应用服务器版本中看到的应用服务器单个实例。
- en: We will discuss the concept of domains in detail in [Chapter 5](ch05.html "Chapter 5. Configuring
    a WildFly Domain"), *Configuring a WildFly Domain*. For the time being, we will
    explore the different filesystem structures for both kinds of servers.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第 5 章](ch05.html "第 5 章。配置 WildFly 域")*配置 WildFly 域*中详细讨论域的概念。目前，我们将探索这两种服务器类型的不同文件系统结构。
- en: 'From a bird''s-eye perspective, we can see that the main filesystem is split
    in two: one section that is pertinent to domain servers and another that is relative
    to standalone servers. The following diagram depicts the tree of the application
    server:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 从宏观角度来看，我们可以看到主要文件系统分为两部分：一部分与域服务器相关，另一部分与独立服务器相关。以下图表展示了应用服务器的树状结构：
- en: '![Exploring the application server filesystem](img/6232OS_01_12.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![探索应用服务器文件系统](img/6232OS_01_12.jpg)'
- en: In the next section, we will dig deeper into the folder structure of the WildFly
    application server, dissecting its content and looking at what it is used for.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更深入地探讨 WildFly 应用服务器的文件夹结构，剖析其内容并查看其用途。
- en: The bin folder
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bin 文件夹
- en: The `bin` folder is where you will find all your startup scripts, such as `standalone.sh`
    and `domain.sh`. In addition to the startup scripts, you can find `standalone.conf`,
    which can be used to customize WildFly's bootstrap process.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin` 文件夹是您将找到所有启动脚本的地方，例如 `standalone.sh` 和 `domain.sh`。除了启动脚本外，您还可以找到 `standalone.conf`，它可以用于自定义
    WildFly 的引导过程。'
- en: As you saw earlier, the `bin` folder also includes the `jboss-cli.sh` script
    (`jboss-cli.bin` for Windows users), which starts the interactive CLI. You will
    also find various other useful scripts, such as `add-user.sh` and `vault.sh`.
    This folder also contains the web services utility scripts (`wsconsume.sh` and
    `wsprovide.sh`) used to generate the web services definition language and the
    corresponding Java interfaces.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如您之前所见，`bin` 文件夹还包括 `jboss-cli.sh` 脚本（Windows 用户为 `jboss-cli.bin`），该脚本启动交互式
    CLI。您还会找到各种其他有用的脚本，例如 `add-user.sh` 和 `vault.sh`。此文件夹还包含用于生成 Web 服务定义语言及其相应 Java
    接口的 Web 服务实用脚本（`wsconsume.sh` 和 `wsprovide.sh`）。
- en: There are several subfolders within the `bin` directory. The `service` folder
    and the `init.d` folder contain programs that allow you to install WildFly as
    service on Windows and Linux, respectively.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin` 目录内有几个子目录。`service` 目录和 `init.d` 目录包含允许您在 Windows 和 Linux 上分别将 WildFly
    作为服务安装的程序。'
- en: The docs folder
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`docs` 文件夹'
- en: The `docs` folder contains two subfolders, `examples` and `schema`. The `schema`
    folder contains all the `.xsd` schema definition files used by the configuration
    as schema.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`docs` 文件夹包含两个子文件夹，`examples` 和 `schema`。`schema` 文件夹包含配置作为模式使用的所有 `.xsd` 模式定义文件。'
- en: The `examples` folder contains numerous configuration examples, from a minimalistic
    standalone example to an ec2 HA example (HA meaning high availability, and ec2
    referring to Amazon Elastic Compute Cloud).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`examples` 文件夹包含许多配置示例，从简约的独立示例到 ec2 高可用性示例（HA 表示高可用性，ec2 指的是亚马逊弹性计算云）。'
- en: The domain folder
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 域文件夹
- en: 'The next folder is the `domain` folder, which contains the domain structure
    split across a set of folders:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个文件夹是 `domain` 文件夹，它包含跨越一组文件夹的域结构：
- en: 'The `configuration` folder contains all the configuration files:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`configuration` 文件夹包含所有配置文件：'
- en: The main configuration file is `domain.xml`, which contains all services that
    are used by the nodes of the domain. It also configures the socket-binding interfaces
    for all services.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主要配置文件是 `domain.xml`，它包含域节点使用的所有服务。它还配置了所有服务的套接字绑定接口。
- en: Another key file for domains is `host.xml`, which is used to define the **host**
    controller (**HC**).
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域的关键文件之一是 `host.xml`，它用于定义**主机控制器**（**HC**）。
- en: The last file contained in the configuration folder is `logging.properties`,
    which is used to define the logging format of the bootstrap process for both the
    **process** controller (**PC**) and host controller.
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置文件夹中包含的最后一个文件是 `logging.properties`，它用于定义**进程控制器**（**PC**）和主机控制器的引导过程日志格式。
- en: The `content` folder is used as a repository to store deployed modules.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content` 文件夹用作存储已部署模块的存储库。'
- en: The `lib` folder hosts the subfolder `ext`, which is there to support Java SE/EE
    style extensions. Some of the application server deployers are able to scan this
    folder for additional libraries that are picked up by the local class loader.
    Nevertheless, this approach is not recommended and is maintained only for compliance
    with the language specifications. The `modules` folder should be used to install
    your libraries within WildFly.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lib` 文件夹托管 `ext` 子文件夹，它用于支持 Java SE/EE 风格的扩展。一些应用程序服务器部署器能够扫描此文件夹以查找由本地类加载器拾取的附加库。尽管如此，此方法不建议使用，并且仅为了符合语言规范而维护。应使用
    `modules` 文件夹在 WildFly 中安装您的库。'
- en: The `log` folder, as you might imagine, contains the logging output of the domain.
    The file, by default, is truncated every time the server is rebooted.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如您所想象，`log` 文件夹包含域的日志输出。默认情况下，每次服务器重启时，该文件都会被截断。
- en: The `servers` folder holds a set of subfolders for each server defined in the
    configuration file. The most useful directory contained beneath each server is
    the `log` folder, which is the location where single instances emit their log.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servers` 文件夹包含配置文件中定义的每个服务的一组子文件夹。每个服务器下最有用的目录是 `log` 文件夹，这是单个实例发出日志的位置。'
- en: The `data` folder is used by the application server to store its runtime data,
    such as transaction logging.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data` 文件夹由应用程序服务器用于存储其运行时数据，例如事务日志。'
- en: Finally, the `tmp` folder is used to store temporary files written by the server.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`tmp` 文件夹用于存储服务器写入的临时文件。
- en: The standalone folder
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`standalone` 文件夹'
- en: 'If you are running the application server in standalone mode, this is the part
    of the filesystem you will be interested in. Its structure is quite similar to
    the `domain` folder with the notable exception of a `deployment` folder. Let''s
    proceed with order. Just below the `standalone` folder, you will find the following
    set of subdirectories:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '`configuration`'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data`'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deployments`'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lib`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tmp`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content and use of these subdirectories is explained as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: The `configuration` folder contains the application server configuration files.
    As a matter of fact, the application server ships with a set of different configuration
    files, each one using a different set of extensions. Launching the standalone
    startup script without passing in any parameters will, by default, use the `standalone.xml`
    configuration file.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Besides `standalone.xml`, this folder contains the `logging.properties` file
    that configures the logging of the bootstrap process. The other files you will
    find here are `mgmt-users.properties` and `mgmt-group.properties`, which can be
    used to secure the management interfaces. Security is discussed in detail in [Chapter
    10](ch10.html "Chapter 10. Securing WildFly"), *Securing WildFly*.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `data` folder is used by the application server to store its runtime data,
    such as transaction logging.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `deployments` folder is the location in which users can place their deployment
    content (for example, WAR, EAR, JAR, and SAR files) to have it automatically deployed
    in the server runtime. Users, particularly those running production systems, are
    encouraged to use WildFly's management APIs to upload and deploy deployment content
    instead of relying on the deployment scanner subsystem that periodically scans
    this directory. See [Chapter 6](ch06.html "Chapter 6. Application Structure and
    Deployment"), *Application Structure and Deployment*, for more details.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `lib` folder hosts the subfolder `ext`, which is used to define extensions
    of the application server. The same considerations for the domain's `lib` path
    apply here.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `log` folder contains the logs emitted by the standalone instance of the
    application server. The default logfile, named `server.log`, is, by default, truncated
    every time the server is rebooted. This can be configured within the `standalone.xml`
    file.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `tmp` folder is used to save temporary files written by WildFly.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The welcome-content folder
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `welcome-content` folder contains the default page, which is loaded when
    you browse to the root of your application server (`http://localhost:8080`). In
    terms of web server configuration, this is the **Web root context**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: The modules folder
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Beneath the `modules` folder, you will find the application server's set of
    libraries, which are a part of the server distribution.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Historically, JBoss AS releases used to manage their set of libraries in different
    ways. Let's recap to bring about some order. Earlier, Release 4.x was used to
    define the core server libraries into the `JBOSS_HOME/server` libraries. Thereafter,
    each server definition had its specific library in the `server/<servername>/lib`
    folder.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: This approach was pretty simple, however, it led to a useless proliferation
    of libraries that were replicated in the `default/all` server distribution.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Releases 5.x and 6.x had the concept of the `common/lib` folder, which was the
    main repository for all modules that were common to all server definitions. Each
    server distribution still contained a `server/<servername>/lib` path for the libraries
    that were specific to that server definition. Unchanged from the earlier release
    was the repository for core server modules comprised by `JBOSS_HOME/server`.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: JBoss AS 7 followed a more modular approach improving over all the earlier approaches.
    This modular approach remains unchanged in WildFly. The server bootstrap library,
    `jboss-modules.jar`, can be found in the root of the application server. This
    single archive is all you need to bootstrap WildFly's application server kernel.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The main system modules are located in the `system/layers/base` folder under
    the `modules` folder. This has changed slightly in WildFly as, in JBoss AS 7,
    all modules were defined directly in the `modules` folder.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table outlines the diverse approaches used across different server
    releases:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '| AS release | Bootstrap libraries | Server libraries |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
- en: '| 4.x | `JBOSS_HOME/server` | `JBOSS_HOME/server/<server>/lib` |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
- en: '| 5.x and 6.x | `JBOSS_HOME/server` | `JBOSS_HOME/common/lib`and`JBOSS_HOME/server/<server>/lib`
    |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
- en: '| 7.x and 8.x | `JBOSS_HOME/jboss-modules.jar` | `JBOSS_HOME/modules` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
- en: Listing all the modules will take up too much space, however, the module repository
    layout is often the same as the module name. For example, the `org.jboss.as.ejb3`
    module can be found in the `org/jboss/as/ejb3` subfolder of the `modules` folder.
    This approach to organizing the modules certainly makes sense, and if you are
    used to a maven repository layout structure, you will have no problem getting
    your head around it.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: In the last section of this chapter, we will see how modules are actually loaded
    by the application server.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Understanding WildFly's kernel
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'WildFly''s kernel was redesigned in JBoss AS 7\. Understanding the details
    of the modular kernel will help you understand concepts introduced later in the
    book. The kernel is based on two main projects, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '**JBoss Modules**: This project handles class loading of resources in the container.
    You can think about JBoss modules as a thin bootstrap wrapper for executing an
    application in a modular environment.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modular Service Container** (**MSC**): This project provides a way to install,
    uninstall, and manage services used by a container. MSC further enables resource
    injection into services and dependency management between services.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following diagram depicts the basic architecture of WildFly''s server kernel:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding WildFly''s kernel](img/6232OS_01_13.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
- en: With this information, we can now progress to the loading of server modules.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Loading application server modules
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learning more about JBoss modules is essential if you want to understand the
    server configuration discussed in the next few chapters. At its heart, a module
    is really just a wrapper for a JAR file but treated by the application container
    as a module. The reason for this is class loading and dependency management, as
    each module can be treated as a pluggable unit, as depicted by the next diagram.
    WildFly has two different types of modules; the only difference between them is
    the way they are packaged:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Static modules
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic modules
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Have a look at the following screenshot:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading application server modules](img/6232OS_01_14.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
- en: 'Using a static module is the simplest way to load a module, and it''s used
    as the default module when starting up the application server. Static modules
    are defined within the `JBOSS_HOME/modules/system/layers/base` directory. Each
    module has a configuration file called `module.xml`. The following example shows
    the contents of the `javax.batch.api` `module.xml` file:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As you can see, a module definition contains two main elements, the **resources**
    defined in the module (and their path) and the module's **dependencies**. In this
    example, the main resource is `jboss-batch-api_1.0_spec-1.0.0.Final.jar`, contained
    in the same folder as the `module.xml` file. It has dependencies on two other
    modules, `javax.api` and `javax.enterprise.api`.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: A module which is defined with a `main-class` element is said to be **executable**.
    In other words, the module name can be listed on the command line, and the standard
    static `main(String[])` method in the named module's `main-class` will be loaded
    and executed.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating custom static modules is useful should you have many applications deployed
    to your server, which rely on the same third-party libraries. This means that
    you do not have to deploy multiple applications with the same bundled libraries.
    The other benefit to creating custom static modules is that you can declare explicit
    dependencies on other static modules. Installing modules is covered in [Chapter
    3](ch03.html "Chapter 3. Configuring Enterprise Services"), *Configuring Enterprise
    Services*, in which we install a JDBC driver as a module.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'The other way to approach the module repository is by using dynamic modules.
    This can be achieved in two ways, as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Firstly, we can add the module information, such as its dependencies, within
    the `MANIFEST` file within your JAR, for example, in the Main class `mypackage/MyClass`:'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The second way to do this is by adding the dependency to the `jboss-deployment-structure.xml`
    file, as shown in the following code:'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成此操作的第二种方式是通过将依赖项添加到`jboss-deployment-structure.xml`文件中，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will cover this in more detail in [Chapter 6](ch06.html "Chapter 6. Application
    Structure and Deployment"), *Application Structure and Deployment*, in which we
    explain class loading.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](ch06.html "第6章。应用结构和部署")*应用结构和部署*中更详细地介绍这一点，其中我们解释了类加载。
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we outlined the latest features that come shipped with WildFly.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了随WildFly一起提供的最新功能。
- en: 'We have seen that WildFly is composed of modular architecture, and that the
    kernel of WildFly is made up of two separate projects: JBoss Modules and MSC.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到WildFly由模块化架构组成，并且WildFly的内核由两个独立的项目组成：JBoss Modules和MSC。
- en: This modular architecture results in an exceptionally light kernel that is able
    to load modules as required, resulting in a quicker startup time.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模块化架构导致了一个异常轻量级的内核，能够按需加载模块，从而实现更快的启动时间。
- en: The physical structure of the application server reflects the dichotomy between
    standalone servers and domain servers, the former being a single node instance
    and the latter a set of managed resources controlled by a domain controller and
    a host controller.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 应用服务器的物理结构反映了独立服务器和域服务器之间的二分法，前者是一个单节点实例，而后者是一组由域控制器和主机控制器管理的资源。
- en: In the next chapter, we will dig deeper into the details of how to configure
    the application server, focusing our attention on the standalone server configuration
    file (`standalone.xml`), which contains the configuration for both the core application
    server and the stack of enterprise services running on top of it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨如何配置应用服务器的细节，重点关注独立服务器配置文件（`standalone.xml`），它包含核心应用服务器及其上运行的堆栈企业服务的配置。
