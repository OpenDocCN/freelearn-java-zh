["```java\nStream<Object> objectStream = Stream.of(new Object());\n```", "```java\nStream<Object> objectStream = Stream.of(new Object(), new Object(), new Object());\n```", "```java\nList<String> stringList = List.of(\"string1\", \"string2\", \"string3\");\nStream<String> stringStream = stringList.stream();\n```", "```java\nString[] stringArray = new String[]{\"string1\", \"string2\", \"string3\"};\nStream<String> stringStream = Arrays.stream(stringArray);\n```", "```java\nStream<Object> nullableStream = Stream.ofNullable(new Object());\n```", "```java\nStream<Integer> stream = Stream.iterate(0, (i) -> {\n    return i + 1;\n}).limit(5);\n```", "```java\nStream.Builder<String> streamBuilder = Stream.builder();\nfor (int i = 0; i < 10; i++) {\n    streamBuilder.accept(\"string\" + i);\n}\n```", "```java\nStream.Builder<String> streamBuilder = Stream.builder();\nstreamBuilder.add(\"string1\").add(\"string2\").add(\"string3\");\n```", "```java\nStream<String> stream = streamBuilder.build();\n```", "```java\nList.of(\"string1\", \"string2\", \"string3\").parallelStream()\n```", "```java\nList.of(1, 2, 3).stream().parallel()\n```", "```java\nList.of(1, 2, 3).stream().parallel().parallel().parallel()\n```", "```java\nStream.of(1, 2, 3, 4).onClose(() -> {\n    System.out.println(\"Closed\");\n}).close();\n```", "```java\nStream.of(1, 2, 3, 4).onClose(() -> {\n    System.out.println(\"Close handler 1\");\n}).onClose(() -> {\n    System.out.println(\"Close handler 2\");\n}).onClose(() -> {\n    System.out.println(\"Close handler 3\");\n}).close();\n```", "```java\ntry (Stream<Integer> stream = Stream.of(6, 3, 8, 12, 3, 9)) {\n    boolean matched = stream.onClose(() -> {\n        System.out.println(\"Closed\");\n    }).anyMatch((e) -> {\n        return e > 10;\n    });\n    System.out.println(matched);\n}\n```", "```java\n    Stream.of(1, 4, 6, 2, 3, 7).forEach((n) -> { System.out.println(n); });\n    ```", "```java\n    Stream.of(1, 4, 6, 2, 3, 7).parallel().forEach((n) -> { System.out.println(n); });\n    ```", "```java\n    Stream.of(1, 4, 6, 2, 3, 7).parallel().forEachOrdered((n) -> { System.out.println(n); });\n    ```", "```java\n    Object[] array = Stream.of(1, 4, 6, 2, 3, 7).toArray();\n    ```", "```java\n    Integer[] array = Stream.of(1, 4, 6, 2, 3, 7).toArray(Integer[]::new);\n    ```", "```java\n    Integer[] array = Stream.of(1, 4, 6, 2, 3, 7).toArray(elements -> new Integer[elements]);\n    ```", "```java\n    int sum = Stream.of(1, 7, 4, 3, 9, 6).reduce(0, (a, b) -> a + b);\n    ```", "```java\n    int sum = Stream.of(1, 7, 4, 3, 9, 6).reduce(0, (total, i) -> total + i, (a, b) -> a + b );\n    ```", "```java\n    int intSum = IntStream.of(1, 7, 4, 3, 9, 6).sum();\n    System.out.println(intSum);\n    ```", "```java\n    long longSum = LongStream.of(7L, 4L, 9L, 2L).sum();\n    System.out.println(longSum);\n    ```", "```java\n    double doubleSum = DoubleStream.of(5.4, 1.9, 7.2, 6.1).sum();\n    System.out.println(doubleSum);\n    ```", "```java\n    List<Integer> items = Stream.of(6, 3, 8, 12, 3, 9).collect(Collectors.toList());\n    System.out.println(items);\n    ```", "```java\n    List<Integer> items = Stream.of(6, 3, 8, 12, 3, 9).collect(\n            () -> { return new ArrayList<Integer>(); },\n            (list, i) -> { list.add(i); },\n            (list, elements) -> { list.addAll(elements); });\n    System.out.println(items);\n    ```", "```java\n    List<Integer> items = Stream.of(6, 3, 8, 12, 3, 9).collect(ArrayList::new, List::add, List::addAll);\n    System.out.println(items);\n    ```", "```java\n    Optional min = Stream.of(6, 3, 8, 12, 3, 9).min((a, b) -> { return a - b;});\n    System.out.println(min);\n    ```", "```java\n    Optional max = Stream.of(6, 3, 8, 12, 3, 9).max((a, b) -> { return a - b;});\n    System.out.println(max);\n    ```", "```java\n    OptionalDouble avg = IntStream.of(6, 3, 8, 12, 3, 9).average();\n    System.out.println(avg);\n    ```", "```java\n    long count = Stream.of(6, 3, 8, 12, 3, 9).count();\n    System.out.println(count);\n    ```", "```java\n    boolean matched = Stream.of(6, 3, 8, 12, 3, 9).anyMatch((e) -> { return e > 10; });\n    System.out.println(matched);\n    ```", "```java\n    boolean matched = Stream.of(6, 3, 8, 12, 3, 9).allMatch((e) -> { return e > 10; });\n    System.out.println(matched);\n    ```", "```java\n    boolean matched = Stream.of(6, 3, 8, 12, 3, 9).noneMatch((e) -> { return e > 10; });\n    System.out.println(matched);\n    ```", "```java\n    Optional firstElement = Stream.of(6, 3, 8, 12, 3, 9).findFirst();\n    System.out.println(firstElement);\n    ```", "```java\n    Optional firstElement = Stream.of(7, 9, 3, 4, 1).findAny();\n    System.out.println(firstElement);\n    ```", "```java\n    Iterator<Integer> iterator = Stream.of(1, 2, 3, 4, 5, 6)\n            .iterator();\n    while (iterator.hasNext()) {\n        Integer next = iterator.next();\n        System.out.println(next);\n    }\n    ```", "```java\n    IntSummaryStatistics intStats = IntStream.of(7, 9, 3, 4, 1).summaryStatistics();\n    System.out.println(intStats);\n    LongSummaryStatistics longStats = LongStream.of(6L, 4L, 1L, 3L, 7L).summaryStatistics();\n    System.out.println(longStats);\n    DoubleSummaryStatistics doubleStats = DoubleStream.of(4.3, 5.1, 9.4, 1.3, 3.9).summaryStatistics();\n    System.out.println(doubleStats);\n    ```", "```java\n    IntSummaryStatistics{count=5, sum=24, min=1, average=4,800000, max=9}\n    LongSummaryStatistics{count=5, sum=21, min=1, average=4,200000, max=7}\n    DoubleSummaryStatistics{count=5, sum=24,000000, min=1,300000, average=4,800000, max=9,400000}\n    ```", "```java\n    Stream.of(1, 2, 3, 4, 5, 6)\n            .filter((i) -> { return i > 3; })\n            .forEach(System.out::println);\n    ```", "```java\n    Stream.of(\"5\", \"3\", \"8\", \"2\")\n            .map((s) -> { return Integer.parseInt(s); })\n            .forEach((i) -> { System.out.println(i > 3); });\n    ```", "```java\n    Stream.of(\"5\", \"3\", \"8\", \"2\")\n            .mapToInt((i) -> { return Integer.parseInt(i); })\n            .forEach((i) -> { System.out.println(i > 3); });\n    ```", "```java\n    Stream.of(List.of(1, 2, 3), List.of(4, 5, 6), List.of(7, 8, 9))\n            .flatMap((l) -> { return l.stream(); })\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 2, 2, 2, 2, 3)\n            .distinct()\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 3, 6, 4, 5, 2)\n            .sorted()\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 3, 6, 4, 5, 2)\n            .sorted((a, b) -> a - b)\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 2, 3, 4, 5, 6)\n            .unordered()\n            .forEach((i) -> { System.out.print(i); });\n    System.out.println();\n    Stream.of(1, 2, 3, 4, 5, 6)\n            .parallel()\n            .unordered()\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 2, 3, 4, 5, 6)\n            .limit(3)\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    Stream.of(1, 2, 3, 4, 5, 6)\n            .skip(3)\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    IntStream.of(1, 2)\n            .boxed()\n            .forEach((i) -> { System.out.println(i + i.getClass().getSimpleName()); });\n    System.out.println();\n    LongStream.of(3, 3)\n            .boxed()\n            .forEach((l) -> { System.out.println(l + l.getClass().getSimpleName()); });\n    System.out.println();\n    DoubleStream.of(5, 6)\n            .boxed()\n            .forEach((d) -> { System.out.println(d + d.getClass().getSimpleName()); });\n    ```", "```java\n    1Integer\n    2Integer\n    3Long\n    4Long\n    5.0Double\n    6.0Double\n    ```", "```java\n    Stream.of(2, 2, 2, 3, 1, 2, 5)\n            .takeWhile((i) -> { return i == 2; })\n            .forEach((i) -> { System.out.println(i); });\n    ```", "```java\n    Stream.of(1, 2, 2, 3, 1, 2, 5)\n            .takeWhile((i) -> { return i == 2; })\n            .forEach((i) -> { System.out.println(i); });\n    ```", "```java\n    Stream.of(2, 2, 2, 3, 1, 2, 5)\n            .dropWhile((i) -> { return i == 2; })\n            .forEach((i) -> { System.out.print(i); });\n    ```", "```java\n    long count = Stream.of(6, 5, 3, 8, 1, 9, 2, 4, 7, 0)\n            .peek((i) -> { System.out.print(i); })\n            .filter((i) -> { return i < 5; })\n            .peek((i) -> { System.out.print(i); })\n            .map((i) -> { return String.valueOf(i); })\n            .peek((p) -> { System.out.print(p); })\n            .count();\n    System.out.println(count);\n    ```", "```java\n    class MyItem {\n        int value;\n        public MyItem(int value) {\n            this.value = value;\n        }\n    }\n    ```", "```java\n    long sum = Stream.of(new MyItem(1), new MyItem(2), new MyItem(3))\n            .peek((item) -> {\n                item.value = 0;\n            })\n            .mapToInt((item) -> { return item.value; })\n            .sum();\n    System.out.println(sum);\n    ```", "```java\n    package com.packt.java.chapter15;\n    public class Exercise1 {\n        public static void main(String[] args) {\n        // write your code here\n        }\n    }\n    ```", "```java\n        private static final class ShoppingArticle {\n            final String name;\n            final double price;\n            public ShoppingArticle(String name, double price) {\n                this.name = name;\n                this.price = price;\n            }\n        }\n    ```", "```java\n        private static final class ShoppingCart {\n            final List<ShoppingArticle> mArticles;\n            public ShoppingCart(List<ShoppingArticle> list) {\n                mArticles = List.copyOf(list);\n            }\n        }\n    ```", "```java\n    public class Exercise1 {\n        public static void main(String[] args) {\n            ShoppingCart fruitCart = new ShoppingCart(List.of(\n                    new ShoppingArticle(\"Orange\", 1.5),\n                    new ShoppingArticle(\"Apple\", 1.7),\n                    new ShoppingArticle(\"Banana\", 2.2)\n            ));\n        }\n    ```", "```java\n            ShoppingCart vegetableCart = new ShoppingCart(List.of(\n                    new ShoppingArticle(\"Cucumber\", 0.8),\n                    new ShoppingArticle(\"Salad\", 1.2),\n                    new ShoppingArticle(\"Tomatoes\", 2.7)\n            ));\n        }\n    ```", "```java\n            ShoppingCart meatAndFishCart = new ShoppingCart(List.of(\n                    new ShoppingArticle(\"Cod\", 46.5),\n                    new ShoppingArticle(\"Beef\", 29.1),\n                    new ShoppingArticle(\"Salmon\", 35.2)\n            ));\n        }\n    ```", "```java\n        private static double calculatePrice(ShoppingCart... carts) {\n        }\n    ```", "```java\n    private static double calculatePrice(ShoppingCart... carts) {\n            return Stream.of(carts)\n        }\n    ```", "```java\n        private static double calculatePrice(ShoppingCart... carts) {\n            return Stream.of(carts)\n                .flatMap((cart) -> { return cart.mArticles.stream(); })\n        }\n    ```", "```java\n        private static double calculatePrice(ShoppingCart... carts) {\n            return Stream.of(carts)\n                .flatMap((cart) -> { return cart.mArticles.stream(); })\n                .mapToDouble((item) -> { return item.price; })\n        }\n    ```", "```java\n    private static double calculatePrice(ShoppingCart... carts) {\n        return Stream.of(carts)\n                .flatMap((cart) -> { return cart.mArticles.stream(); })\n                .mapToDouble((item) -> { return item.price; })\n                .sum();\n    }\n    ```", "```java\n        double sum = calculatePrice(fruitCart, vegetableCart, meatAndFishCart);\n        System.out.println(String.format(\"Sum: %.2f\", sum));\n    }\n    ```", "```java\n    List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.toCollection(TreeSet::new));\n    ```", "```java\n    List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.toList());\n    ```", "```java\n    List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.toUnmodifiableList());\n    ```", "```java\n    List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.toSet());\n    ```", "```java\n    List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.toUnmodifiableSet());\n    ```", "```java\n    String joined = List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.joining());\n    System.out.println(joined);\n    ```", "```java\n    String joined = List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.joining(\",\"));\n    System.out.println(joined);\n    ```", "```java\n    String joined = List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.joining(\",\", \"Prefix\", \"Suffix\"));\n    System.out.println(joined);\n    ```", "```java\n    Set<String> mapped = List.of(\"one\", \"two\", \"three\", \"four\", \"five\")\n            .stream()\n            .collect(Collectors.mapping((s) -> { return s + \"-suffix\"; }, Collectors.toSet()));\n    System.out.println(mapped);\n    ```", "```java\n    List<String> mapped = List.of(\n            Set.of(\"one\", \"two\", \"three\"),\n            Set.of(\"four\", \"five\"),\n            Set.of(\"six\")\n    )\n            .stream()\n            .collect(Collectors.flatMapping(\n                    (set) -> { return set.stream(); },\n                    Collectors.toList())\n            );\n    System.out.println(mapped);\n    ```", "```java\n    Set<String> collected = List.of(\"Andreas\", \"David\", \"Eric\")\n            .stream()\n            .collect(Collectors.filtering(\n                    (name) -> { return name.length() < 6; },\n                    Collectors.toSet())\n            );\n    System.out.println(collected);\n    ```", "```java\n    Set<String> immutableSet = List.of(\"Andreas\", \"David\", \"Eric\")\n            .stream()\n            .collect(Collectors.collectingAndThen(\n                    Collectors.toSet(), \n                    (set) -> { return Collections.unmodifiableSet(set); })\n            );\n    System.out.println(immutableSet);\n    ```", "```java\n    long count = List.of(\"Andreas\", \"David\", \"Eric\")\n            .stream()\n            .collect(Collectors.counting());\n    System.out.println(count);\n    ```", "```java\n    Optional<Integer> smallest = Stream.of(1, 2, 3)\n            .collect(Collectors.minBy((a, b) -> { return a - b; });\n    System.out.println(smallest);\n    ```", "```java\n    Optional<Integer> biggest = Stream.of(1, 2, 3)\n            .collect(Collectors.maxBy((a, b) -> { return a - b; }));\n    System.out.println(biggest);\n    ```", "```java\n    int sum = Stream.of(1d, 2d, 3d)\n            .collect(Collectors.summingInt((d) -> { return d.intValue(); }));\n    System.out.println(sum);\n    ```", "```java\n    long sum = Stream.of(1d, 2d, 3d)\n            .collect(Collectors.summingLong((d) -> { return d.longValue(); }));\n    System.out.println(sum);\n    ```", "```java\n    double sum = Stream.of(1, 2, 3)\n            .collect(Collectors.summingDouble((i) -> { return i.doubleValue(); }));\n    System.out.println(sum);\n    ```", "```java\n    double average = Stream.of(1d, 2d, 3d)\n            .collect(Collectors.averagingInt((d) -> { return d.intValue(); }));\n    System.out.println(average);\n    ```", "```java\n    double average = Stream.of(1d, 2d, 3d)\n            .collect(Collectors.averagingLong((d) -> { return d.longValue(); }));\n    System.out.println(average);\n    ```", "```java\n    double average = Stream.of(1, 2, 3)\n            .collect(Collectors.averagingDouble((i) -> { return i.doubleValue(); }));\n    System.out.println(average);x§\n    ```", "```java\n    private static class Car {\n        String brand;\n        long enginePower;\n        Car(String brand, long enginePower) {\n            this.brand = brand;\n            this.enginePower = enginePower;\n        }\n        public String getBrand() {\n            return brand;\n        }\n        @Override\n        public String toString() {\n            return brand + \": \" + enginePower;\n        }\n    } \n    ```", "```java\n    Map<String, List<Car>> grouped = Stream.of(\n            new Car(\"Toyota\", 92),\n            new Car(\"Kia\", 104),\n            new Car(\"Hyundai\", 89),\n            new Car(\"Toyota\", 116),\n            new Car(\"Mercedes\", 209))\n            .collect(Collectors.groupingBy(Car::getBrand));\n    System.out.println(grouped);\n    ```", "```java\n    Map<String, Set<Car>> grouped = Stream.of(\n            new Car(\"Toyota\", 92),\n            new Car(\"Kia\", 104),\n            new Car(\"Hyundai\", 89),\n            new Car(\"Toyota\", 116),\n            new Car(\"Mercedes\", 209))\n            .collect(Collectors.groupingBy(Car::getBrand, Collectors.          toSet()));\n    System.out.println(grouped);\n    ```", "```java\n    Map<String, Optional<Car>> collected = Stream.of(\n            new Car(\"Volvo\", 195),\n            new Car(\"Honda\", 96),\n            new Car(\"Volvo\", 165),\n            new Car(\"Volvo\", 165),\n            new Car(\"Honda\", 104),\n            new Car(\"Honda\", 201),\n            new Car(\"Volvo\", 215))\n            .collect(Collectors.groupingBy(Car::getBrand, Collectors.          reducing((carA, carB) -> {\n                if (carA.enginePower > carB.enginePower) {\n                    return carA;\n                }\n                return carB;\n            })));\n    System.out.println(collected);\n    ```", "```java\n    Map<Boolean, List<Car>> partitioned = Stream.of(\n            new Car(\"Toyota\", 92),\n            new Car(\"Kia\", 104),\n            new Car(\"Hyundai\", 89),\n            new Car(\"Toyota\", 116),\n            new Car(\"Mercedes\", 209))\n            .collect(Collectors.partitioningBy((car) -> { return car.          enginePower > 100; }));\n    System.out.println(partitioned);\n    ```", "```java\n    Map<Boolean, Set<Car>> partitioned = Stream.of(\n            new Car(\"Toyota\", 92),\n            new Car(\"Kia\", 104),\n            new Car(\"Hyundai\", 89),\n            new Car(\"Toyota\", 116),\n            new Car(\"Mercedes\", 209))\n            .collect(Collectors.partitioningBy((car) -> { return car.          enginePower > 100; }, Collectors.toSet()));\n    System.out.println(partitioned);\n    ```", "```java\n    Map<String, Integer> mapped = List.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n            .stream()\n            .collect(Collectors.toMap((s) -> {\n                return s;\n            }, (s) -> {\n                return Integer.valueOf(s);\n            }));\n    System.out.println(mapped);\n    ```", "```java\n    Map<String, Integer> mapped = List.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"1\", \"2\")\n            .stream()\n            .collect(Collectors.toMap((s) -> {\n                return s;\n            }, (s) -> {\n                return Integer.valueOf(s);\n            }, (a, b) -> {\n                return Integer.valueOf(b);\n            }));\n    System.out.println(mapped);\n    ```", "```java\n    TreeMap<String, Integer> mapped = List.of(\"1\", \"2\", \"3\", \"4\", \"5\", \"1\", \"2\")\n            .stream()\n            .collect(Collectors.toMap((s) -> {\n                return s;\n            }, (s) -> {\n                return Integer.valueOf(s);\n            }, (a, b) -> {\n                return Integer.valueOf(b);\n            }, () -> {\n                return new TreeMap<>();\n            }));\n    System.out.println(mapped);\n    ```", "```java\n    LongSummaryStatistics statistics = Stream.of(\n            new Car(\"Volvo\", 165),\n            new Car(\"Volvo\", 165),\n            new Car(\"Honda\", 104),\n            new Car(\"Honda\", 201)\n    ).collect(Collectors.summarizingLong((e) -> {\n        return e.enginePower;\n    }));\n    System.out.println(statistics);\n    ```", "```java\nAndreas, 42, Sweden\nDavid, 37, Sweden\nEric, 39, USA\n```", "```java\nString filePath = System.getProperty(\"user.dir\") + File.separator +  \"res/authors.csv\";\ntry (Stream<String> authors = Files.lines(Paths.get(filePath))) {\n    authors.forEach((author) -> {\n        System.out.println(author);\n    });\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```", "```java\ntry (Stream<String> authors = Files.lines(Paths.get(filePath))) {\n    authors.onClose(() -> {\n        System.out.println(\"Closed\");\n    }).forEach((author) -> {\n        System.out.println(author);\n    });\n} catch (IOException e) {\n    e.printStackTrace();\n}\n```", "```java\ntry (Stream<String> authors = new BufferedReader(\n        new InputStreamReader(new FileInputStream(filePath))).lines()\n) {\n    ...\n} catch (FileNotFoundException e) {\n    e.printStackTrace();\n}\n```", "```java\n    package com.packt.java.chapter15;\n    public class Exercise2 {\n    }\n    ```", "```java\n    package com.packt.java.chapter15;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n    }\n    ```", "```java\n        private static class ShoppingArticle {\n            final String name;\n            final String category;\n            final double price;\n            final String unit;\n            private ShoppingArticle(String name, String category, double price,           String unit) {\n                this.name = name;\n                this.category = category;\n                this.price = price;\n                this.unit = unit;\n            }\n            @Override\n            public String toString() {\n                return name + \" (\" + category + \")\";\n            }\n        }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        return null;\n    }\n    ```", "```java\n    public static void main(String[] args) {\n        try {\n            List<ShoppingArticle> database = loadDatabaseFile();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).map((line) -> {\n                return line.split(\",\");\n            }).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).map((line) -> {\n                return line.split(\",\");\n            }).peek((arr) -> {\n                System.out.println(Arrays.toString(arr));\n            }).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).map((line) -> {\n                return line.split(\",\");\n            }).peek((arr) -> {\n                System.out.println(Arrays.toString(arr));\n            }).map((arr) -> {\n                return new ShoppingArticle(arr[0], arr[1],               Double.valueOf(arr[2]), arr[3]);\n            }).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).map((line) -> {\n                return line.split(\",\");\n            }).peek((arr) -> {\n                System.out.println(Arrays.toString(arr));\n            }).map((arr) -> {\n                return new ShoppingArticle(arr[0], arr[1],               Double.valueOf(arr[2]), arr[3]);\n            }).peek((art) -> {\n                System.out.println(art);\n            }).count();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```", "```java\n    private static List<ShoppingArticle> loadDatabaseFile() throws IOException {\n        try (Stream<String> stream = Files.lines(Path.of(\"res/database.csv\"))) {\n            return stream.peek((line) -> {\n                System.out.println(line);\n            }).skip(1).map((line) -> {\n                return line.split(\",\");\n            }).peek((arr) -> {\n                System.out.println(Arrays.toString(arr));\n            }).map((arr) -> {\n                return new ShoppingArticle(arr[0], arr[1],               Double.valueOf(arr[2]), arr[3]);\n            }).peek((art) -> {\n                System.out.println(art);\n            }).collect(Collectors.toUnmodifiableList());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n    ```"]