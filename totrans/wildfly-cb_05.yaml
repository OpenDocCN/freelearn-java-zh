- en: Chapter 5. Managing the Datasource Subsystems with the CLI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 使用CLI管理数据源子系统
- en: 'In this chapter, you will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将涵盖以下主题：
- en: Preparing a non JDBC-4 compliant driver
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备非JDBC-4兼容的驱动程序
- en: Creating and removing a datasource
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和删除数据源
- en: Checking the datasource connection
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查数据源连接
- en: Reading the datasource's statistics
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取数据源的统计信息
- en: Setting a connection pool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置连接池
- en: Creating and removing XA-Datasource
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和删除XA数据源
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to manage WildFly datasource subsystems
    with the CLI. This is independent of the WildFly operation mode. For this reason
    and to facilitate the configuration, we will be running WildFly in the standalone
    mode.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用CLI管理WildFly数据源子系统。这独立于WildFly的操作模式。因此，为了便于配置，我们将以独立模式运行WildFly。
- en: A datasource is the component used by applications to connect to the database.
    The datasource, in turn, uses a driver to communicate with the underlying database
    properly. Hence, for WildFly to provide database integration, it needs a driver
    and a datasource.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源是应用程序用于连接数据库的组件。数据源反过来使用驱动程序与底层数据库正确通信。因此，为了WildFly提供数据库集成，它需要一个驱动程序和一个数据源。
- en: WildFly comes with a default configuration, which is the `ExampleDS` datasource,
    bound to the "H2" driver. H2 is a Java SQL database, used mainly as an in-memory
    DB for testing purpose with SQL support.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly自带默认配置，即`ExampleDS`数据源，绑定到“H2”驱动程序。H2是一个Java SQL数据库，主要用于测试目的的内存数据库，并支持SQL。
- en: WildFly automatically recognizes any JDBC 4 compliant driver. For this reason,
    a driver can be installed as a module (that is, static deployment) or it can be
    deployed as any normal application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly自动识别任何符合JDBC 4规范的驱动程序。因此，驱动程序可以作为模块（即静态部署）安装，或者它可以作为任何正常应用程序部署。
- en: In the first method, you will have to replicate the driver module installation
    in all the hosts where the applications and configuration require such a driver.
    On the other hand, by using dynamic deployment in the domain mode, the driver
    can be spread to all server groups, and thus to all available hosts, with just
    one command or a click.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一种方法中，您必须在所有需要此类驱动程序的应用程序和配置的主机上复制驱动模块安装。另一方面，通过在域模式下使用动态部署，只需一个命令或一个点击，就可以将驱动程序传播到所有服务器组，从而传播到所有可用的主机。
- en: A datasource can also be deployed in the old fashioned way by using a `-ds.xml`
    file. Even though this alternative is very helpful when migrating from JBoss 5
    and JBoss 6, it is not the best choice when configuring a production environment.
    That's because the datasource cannot be altered via a management interface, such
    as CLI and Web Admin Console. Also, the datasource cannot be configured to take
    advantage of the security concerns, such as security domains and password vaults
    (we will discuss these topics later in the book).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 数据源也可以通过使用`-ds.xml`文件以传统方式部署。尽管这种替代方案在从JBoss 5和JBoss 6迁移时非常有帮助，但在配置生产环境时并不是最佳选择。这是因为数据源不能通过管理界面（如CLI和Web管理控制台）进行更改。此外，数据源不能配置为利用安全关注，如安全域和密码保险库（我们将在本书的后面讨论这些主题）。
- en: Preparing a non JDBC-4 compliant driver
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备非JDBC-4兼容的驱动程序
- en: In this recipe, we will learn how to make a JDBC driver compliant to version
    4\. This is needed to install the driver and to make it available for your datasources,
    and hence to your applications.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何使JDBC驱动程序符合版本4。这是安装驱动程序并将其提供给您的数据源，以及您的应用程序所必需的。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you already have a JDBC 4 compliant driver, you can skip this recipe; otherwise,
    I assume that you do not have a JDBC driver and I'll refer to it as `non-jdbc-4-driver.jar`,
    throughout the recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个符合JDBC 4规范的驱动程序，您可以跳过此配方；否则，我假设您没有JDBC驱动程序，我将在整个配方中将其称为`non-jdbc-4-driver.jar`。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To make your driver JDBC 4 compliant, you just need to add a file into it,
    as described in the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要使您的驱动程序符合JDBC 4规范，您只需按照以下步骤添加一个文件：
- en: Create a temporary folder and navigate into it.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个临时文件夹并进入其中。
- en: Place your `non-jdbc-4-driver.jar` driver file into it.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的`non-jdbc-4-driver.jar`驱动程序文件放入其中。
- en: Create a `META-INF/services` directory.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`META-INF/services`目录。
- en: Create a file named `java.sql.Driver` and place it into the folder specified
    in step 3.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`java.sql.Driver`的文件并将其放置在第3步指定的文件夹中。
- en: Edit the file `java.sqlDriver` and enter one line containing the fully qualified
    name of the class implementing the driver.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Starting from the empty folder as per step `1`, update the file `non-jdbc-4-driver.jar`
    using the JAR tool as follows:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You are now ready to install or deploy your new JDBC 4 compliant driver.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Creating and removing a datasource
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most used features that an application comes with is the possibility
    to persist states (such as user information, orders, and so on) into a database.
    In this recipe, we will learn how to configure datasources and a JDBC 4 compliant
    driver.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we begin, we need to have a running database installed on our computer,
    or on a remote server. In this recipe, we will use a MySQL database running locally
    and listening on port `3306`—the installation and configuration of the MySQL database
    server is beyond the scope of this book.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: 'Declaring a new datasource consists of two separate steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Installing the JDBC driver.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the datasource itself.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step can be done in two different ways. You can install a JDBC driver
    by deploying it as a normal artifact, or you can install it as a WildFly module.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: First, download the latest version (which, as per this writing, is "5.1.35")
    of the MySQL JDBC connector from [http://dev.mysql.com/downloads/connector/j/](http://dev.mysql.com/downloads/connector/j/),
    and place it into your WildFly Cookbook directory `WFC`, under your `home` folder.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: 'To install a JDBC driver as a WildFly module, we need to perform the following
    actions:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'Go into the modules folder `$WILDFLY_HOME/modules/system/layers/base` and create
    a subfolder structure that matches your module name as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Place the `~/WFC/mysql-connector-java-5.1.35-bin.jar` file, that you downloaded
    previously, into the `main` folder .
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `main` folder, create a file named `module.xml` with the following
    content:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, I've emphasized the name of the module which matched the subfolders
    structure—except for the main folder which just corresponds to the `version`.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Great! Now we are ready to add the driver to the datasource subsystem.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start WildFly and do the following:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Before we can continue, please create a database on your running MySQL server
    instance named `wildflycookbook`, as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we have the JDBC driver installed, we are ready to configure our datasource.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now execute the following commands:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, on listing the available datasources, you should find our newly created
    one:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you need to remove a datasource, invoke `remove` next to it, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, configuring a datasource is not that tough, but what it needs
    to get there is a lot of work. The datasource itself is just a reference to the
    database, which involves a connector, that is, the driver. In fact, in the DS
    configuration, I emphasized the `driver-name` attribute that matches the driver
    that we defined in the *Getting ready* section. Furthermore, I emphasized the
    `password` attribute that you should change with regard to your database configuration.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Datasource configuration comes with more parameters such as defining and sizing
    a connection pool, but we will see that later in this chapter with a dedicated
    recipe. You will also learn that you can have an XA-Datasource, which actually
    enables distributed transaction across different transactional systems.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: Checking the datasource connection
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you might see errors in your log's application because of something
    going wrong with your persistence storage. The first thing to do in that case,
    is to check if the database is up and running by testing its connection; you may
    even realize that you are pointing to a wrong one or you misspelled the connection
    URL.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe is based on the previous one, where we have configured a datasource
    which connects to a local MySQL database, so we will test our database connection
    with the WildFlyCookBookDS datasource. You can test the connection with a datasource
    of your choice as long as you provide the correct configuration as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now execute the following commands:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That's it! Wasn't it easy?
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Reading the datasource's statistics
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to enable the statistics of the datasource
    to check whether we are getting the most out of it, or if we need to tune something
    with the datasource, or at worst, scale with the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get an idea of what is going on with our datasource, let''s generate some
    traffic towards the database. In this case, we will use the application named
    `datasource-traffic-generator`. To obtain the artifact to deploy, please refer
    to the *Software prerequisites* recipe in [Chapter 1](ch01.html "Chapter 1. Welcome
    to WildFly!"), *Welcome to WildFly!*. Furthermore, in the source code of the application,
    you can find an Apache JMeter (also JMeter) project, available at the following
    path: `datasource-traffic-generator/src/main/resources/HTTP Request Defaults.jmx`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: Briefly, Apache JMeter is a testing tool used to make a stress test; as a matter
    of fact, we will stress the `datasource-traffic-generator` application, which
    inserts some data into the DB.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can download the Apache JMeter binary, from [http://jmeter.apache.org/download_jmeter.cgi](http://jmeter.apache.org/download_jmeter.cgi).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'The installation is quite easy:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Just unzip the downloaded package `apache-jmeter-2.13.zip`, into the `~/WFC`
    folder.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run it, from the command line, navigate to the JMeter folder and issue the
    following command:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If everything goes well, you should see the JMeter tool as depicted in the
    following image:'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Getting ready](img/3744_05_01.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Apache JMeter
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Furthermore, the database that we are going to use is MySQL. In that, create
    a database named `wildflycookbook`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, create a table named `USER`, as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, deploy the `datasource-traffic-generator.war` bundle as usual.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enable JDBC and Pool statistics with the following commands on the CLI:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open the `datasource-traffic-generator/src/main/resources/HTTP Request Defaults.jmx`
    JMeter project and hit the start button.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As soon as you hit the play button in JMeter, in the WIldFLy CLI, execute the
    following commands:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The result is depicted in the following image:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_05_02.jpg)'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, we executed two commands, one to retrieve information at the
    `jdbc` level, and one to retrieve information about the `pool` configured within
    the datasource.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of executing two commands within the CLI, you can use just one command
    to retrieve a lot more information. This can be helpful in parsing the data outside
    the CLI; also keep in mind that the output is very similar to the JSON format.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: As a matter of fact, you can execute a CLI command outside the CLI using a bash-script,
    python, or Java and then parse the result to retrieve just the information you
    need.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 'To execute a CLI command using the bash-shell, type the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Setting a connection pool
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As in the previous recipe, sometimes we need to extract some information regarding
    the behavior of database integration. Many times, when your application's concurrent
    users are in the order of hundreds or thousands, you have to serve multiple DB
    connections at a time. This is exactly what we will learn in this recipe, using
    the CLI.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Think of a connection pool like a bucket pre-filled with a minimum number of
    ready-to-use connections for your application. There is also an upper bound limit
    that defines the maximum number of connections that the pool can hold. The default
    values for the minimum and maximum size of the pool are `0` and `20` respectively,
    with the `prefill` attribute set to `false` by default. This means that when a
    datasource is started up, its connection pool is created with `0` active and valid
    connections, and that it can hold up to 20 connections.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Why would you use a connection pool? Because creating a connection involves
    a lot of things under the hood, so having it ready helps you with the performance.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command line tool and connect to the
    CLI:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now execute the following commands:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previously mentioned commands created a pool for our connections, so that
    we can count to a series of available connections that goes from 10 to 20.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One more option that we can use to boost our database connection is to have
    our connection pool pre-filled with connections.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve this, we need set the `pool-prefill` attribute to `true`, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As you can see, not all changes are made at runtime; we often need to reload
    the WildFly configuration, like in this case. To reload the server (we had a recipe
    for that, both standalone and domain mode), execute the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following image shows the `WildFlyCookbookDS` datasource with its new Pool
    configuration:'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_05_03.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: There is also one more important aspect, which is worth mentioning about the
    datasource connection pool.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: What happens if you pre-fill your pool with valid connections and then the database
    crashes or it gets restarted? Well, your connections might look valid in the pool,
    but the reference to the underlying database has changed, thus they will not be
    able to query your data. Fortunately, there are a few parameters that can help
    you solve this problem.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you need to choose a mechanism to validate your connection. You
    can opt for a time based approach, or decide to check your connection every time
    it is used.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'The first approach consists of setting the following attributes:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '`background-validation=true`'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`background-validation-millis=30000`—default is `0`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the other hand, the second approach consists of setting the following attribute:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: '`validate-on-match=true`'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whichever approach you use, always set the other one to `false`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have chosen the validation mechanism, you need to specify how to check
    if the connection is valid. You can achieve this by using one of the following
    attributes:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '`check-valid-connection-sql`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`valid-connection-checker-class`'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Both the attributes are database specific. The first one must contain a valid
    SQL code (for example `SELECT 1` or `SELECT 1 FROM DUAL`). The second one delegates
    its check algorithm to a class. WildFly provides checker classes for the most
    used databases, which are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '| **Checker class** |'
  id: totrans-142
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.db2.DB2ValidConnectionChecker` |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLValidConnectionChecker`
    |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLReplicationValidConnectionChecker`
    |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLValidConnectionChecker`
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.GoodForSecondsValidConnectionChecker`
    |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.JDBC4ValidConnectionChecker`
    |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.NullValidConnectionChecker`
    |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.SQLExceptionValidConnectionChecker`
    |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.oracle.OracleValidConnectionChecker`
    |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLValidConnectionChecker`
    |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseValidConnectionChecker`
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
- en: 'Last, but not the least, you can count on two other attributes that help you
    clean up connections: `stale-connection-checker-class-name` and `exception-sorter-class-name`.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'The first one provides you with an easy way to clean up stale connections;
    you can rely on a generic class, and DB2 and Oracle specific classes, as the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '| **Generic/specific class** |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.AlwaysStaleConnectionChecker`
    |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.NullStaleConnectionChecker`
    |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.db2.DB2StaleConnectionChecker` |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.oracle.OracleStaleConnectionChecker`
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
- en: 'The second attribute provides you with an easy way to clean up connections
    that threw a `FATAL` exception, and relative to your database, you can rely on
    the following classes:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '| **Class** |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.db2.DB2ExceptionSorter` |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.informix.InformixExceptionSorter`
    |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.mysql.MySQLExceptionSorter` |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.mssql.MSSQLExceptionSorter` |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.AlwaysExceptionSorter` |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.novendor.NullExceptionSorter` |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.oracle.OracleExceptionSorter` |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.postgres.PostgreSQLExceptionSorter`
    |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
- en: '| `org.jboss.jca.adapters.jdbc.extensions.sybase.SybaseExceptionSorter` |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
- en: Creating and removing XA-Datasource
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XA-Datasources are just like normal datasources, except that they need a different
    `driver-class-name` and they support distributed transaction across heterogeneous
    transactional systems.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine the classical example of an online store: a user buys an item, the
    item is removed from the stock database and an amount of money is subtracted from
    the user''s bank account, which is an external system. Both the operations must
    succeed in order to proceed with payment and shipment.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: This was just an example to give you the idea; we will not go any further.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The prerequisite of this recipe is the *Getting ready* section of the *Creating
    and removing a datasource* recipe.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a running WildFly server, open your command-line tool and connect to the
    CLI:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now execute the following commands:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, on listing the available datasources you should find our newly created
    one:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: If you need to remove a datasource, invoke `remove` next to it, as depicted
    in the following image:![How to do it…](img/3744_05_04.jpg)
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first created an XA-DataSource with just the required information and then
    added the other ones, all in batch mode. By doing this, we are able to split the
    configuration process and eventually see where we are going wrong.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先只使用所需信息创建了一个XA-DataSource，然后以批量模式添加了其他信息。通过这样做，我们能够将配置过程拆分，并最终找出我们出错的地方。
- en: Additionally, we specified the `xa-datasource-class` class, because XA-DataSource
    needs a special class that implements and supports distributed transactions. The
    driver is the same, just specify a different driver class implementation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们指定了`xa-datasource-class`类，因为XA-DataSource需要一个实现并支持分布式事务的特殊类。驱动程序是相同的，只需指定不同的驱动类实现。
