["```java\npackage packt.jee.eclipse.jaxb.example; \n//Skipped imports \n\n@XmlRootElement \n@XmlAccessorType(XmlAccessType.FIELD) \npublic class Course { \n  @XmlAttribute \n  private int id; \n  @XmlElement(namespace=\"http://packt.jee.eclipse.jaxb.example\") \n  private String name; \n  private int credits; \n  @XmlElement(name=\"course_teacher\") \n  private Teacher teacher; \n\n  public Course() {} \n\n  public Course (int id, String name, int credits) { \n    this.id = id; \n    this.name = name; \n    this.credits = credits; \n  } \n\n  //Getters and setters follow \n} \n```", "```java\n@XmlRootElement(name=\"school_course\") \n```", "```java\npackage packt.jee.eclipse.jaxb.example; \n\npublic class Teacher { \n  private int id; \n  private String name; \n\n  public Teacher() {} \n\n  public Teacher (int id, String name) { \n    this.id = id; \n    this.name = name; \n  } \n\n  //Getters and setters follow \n} \n```", "```java\npackage packt.jee.eclipse.jaxb.example; \n\n//Skipped imports \n\npublic class JAXBExample { \n\n  public static void main(String[] args) throws Exception { \n    doJAXBXml(); \n\n  } \n\n  //Create XML from Java object and then vice versa \n  public static void doJAXBXml() throws Exception { \n    Course course = new Course(1,\"Course-1\", 5); \n    course.setTeacher(new Teacher(1, \"Teacher-1\")); \n\n    JAXBContext context = JAXBContext.newInstance(Course.class); \n\n    //Marshall Java object to XML \n    Marshaller marshaller = context.createMarshaller(); \n    //Set option to format generated XML \n    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, \n     true); \n    StringWriter stringWriter = new StringWriter(); \n    //Marshal Course object and write to the StringWriter \n    marshaller.marshal(course, stringWriter); \n    //Get String from the StringWriter \n    String courseXml = stringWriter.getBuffer().toString(); \n    stringWriter.close(); \n    //Print course XML \n    System.out.println(courseXml); \n\n    //Now unmarshall courseXML to create Course object \n    Unmarshaller unmarshaller = context.createUnmarshaller(); \n    //Create StringReader from courseXml \n    StringReader stringReader = new StringReader(courseXml); \n    //Create StreamSource which will be used by JAXB unmarshaller \n    StreamSource streamSource = new StreamSource(stringReader); \n    Course unmarshalledCourse = \n     unmarshaller.unmarshal(streamSource, Course.class).getValue();    \n     System.out.println(\"-----------------nUnmarshalled course name - \" \n        + unmarshalledCourse.getName()); \n    stringReader.close(); \n   } \n} \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> \n<course id=\"1\" > \n    <ns2:name>Course-1</ns2:name> \n    <credits>5</credits> \n    <course_teacher> \n        <id>1</id> \n        <name>Teacher-1</name> \n    </course_teacher> \n</course> \n\n----------------- \nUnmarshalled course name - Course-1 \n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>org.eclipse.persistence</groupId> \n      <artifactId>eclipselink</artifactId> \n      <version>2.6.1-RC1</version> \n    </dependency> \n  </dependencies> \n```", "```java\njavax.xml.bind.context.factory=org.eclipse.persistence.jaxb.JAXBContextFactory \n```", "```java\n  //Create JSON from Java object and then vice versa \n  public static void doJAXBJson() throws Exception { \n\n    Course course = new Course(1,\"Course-1\", 5); \n    course.setTeacher(new Teacher(1, \"Teacher-1\")); \n\n    JAXBContext context = JAXBContext.newInstance(Course.class); \n\n    //Marshal Java object to JSON \n    Marshaller marshaller = context.createMarshaller(); \n    //Set option to format generated JSON \n    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, \n     true);    marshaller.setProperty(MarshallerProperties.MEDIA_TYPE, \n     \"application/json\");    marshaller.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT, \n     true); \n\n    StringWriter stringWriter = new StringWriter(); \n    //Marshal Course object and write to the StringWriter \n    marshaller.marshal(course, stringWriter); \n    //Get String from the StringWriter \n    String courseJson = stringWriter.getBuffer().toString(); \n    stringWriter.close(); \n    //Print course JSON \n    System.out.println(courseJson); \n\n    //Now, unmarshall courseJson to create Course object \n    Unmarshaller unmarshler = context.createUnmarshaller(); \n    unmarshler.setProperty(MarshallerProperties.MEDIA_TYPE, \n     \"application/json\");    unmarshler.setProperty(MarshallerProperties.JSON_INCLUDE_ROOT, \n     true); \n\n    //Create StringReader from courseJson \n    StringReader stringReader = new StringReader(courseJson); \n    //Create StreamSource which will be used by JAXB unmarshaller \n    StreamSource streamSource = new StreamSource(stringReader); \n    Course unmarshalledCourse = unmarshler.unmarshal(streamSource, \n     Course.class).getValue();    \n    System.out.println(\"-----------------nUnmarshalled course name - \" + unmarshalledCourse.getName()); \n    stringReader.close(); \n  } \n```", "```java\n{ \n   \"course\" : { \n      \"id\" : 1, \n      \"name\" : \"Course-1\", \n      \"credits\" : 5, \n      \"course_teacher\" : { \n         \"id\" : 1, \n         \"name\" : \"Teacher-1\" \n      } \n   } \n} \n----------------- \nUnmarshalled course name - Course-1 \n```", "```java\n   <dependency>\n    <groupId>javax.json.bind</groupId>\n    <artifactId>javax.json.bind-api</artifactId>\n    <version>1.0</version>\n   </dependency>\n\n   <dependency>\n    <groupId>org.eclipse</groupId>\n    <artifactId>yasson</artifactId>\n    <version>1.0.1</version>\n   </dependency>\n\n   <dependency>\n    <groupId>org.glassfish</groupId>\n    <artifactId>javax.json</artifactId>\n    <version>1.1.2</version>\n   </dependency>\n  </dependencies>\n```", "```java\npackage packt.jee.eclipse.jsonb.example;\nimport javax.json.bind.annotation.JsonbProperty;\n\npublic class Course {\n @JsonbProperty\n private int id;\n\n @JsonbProperty\n private String name;\n\n @JsonbProperty\n private int credits;\n\n @JsonbProperty(\"course_teacher\")\n private Teacher teacher;\n\n //skipped constructors, getters and setters to save space\n}\n```", "```java\npackage packt.jee.eclipse.jsonb.example;\nimport javax.json.bind.Jsonb;\nimport javax.json.bind.JsonbBuilder;\npublic class JSONBExample {\n  public static void main(String[] args) throws Exception {\n    Course course = new Course(1,\"Course-1\", 5);\n    course.setTeacher(new Teacher(1, \"Teacher-1\"));\n\n    // Serialize to JSON string\n    Jsonb jsonb = JsonbBuilder.create();\n    String courseJson = jsonb.toJson(course, Course.class);\n    System.out.println(courseJson);\n\n    // De-serialize fromd JSON string\n    Course deserializedCourse = jsonb.fromJson(courseJson, Course.class);\n    System.out.println(deserializedCourse.getName());\n  }\n}\n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>org.glassfish.jersey.containers</groupId> \n      <artifactId>jersey-container-servlet</artifactId> \n      <version>2.26</version> \n    </dependency> \n  </dependencies> \n```", "```java\npackage packt.jee.eclipse.rest.ws.dto; \n\nimport javax.xml.bind.annotation.XmlAccessType; \nimport javax.xml.bind.annotation.XmlAccessorType; \nimport javax.xml.bind.annotation.XmlAttribute; \nimport javax.xml.bind.annotation.XmlElement; \nimport javax.xml.bind.annotation.XmlRootElement; \n\n@XmlRootElement \n@XmlAccessorType(XmlAccessType.FIELD) \npublic class Teacher { \n\n  @XmlAttribute \n  private int id; \n\n  @XmlElement(name=\"teacher_name\") \n  private String name; \n\n  //constructors \n  public Course() {} \n\n  public Course (int id, String name, int credits, Teacher \n   teacher) { \n    this.id = id; \n    this.name = name; \n    this.credits = credits; \n    this.teacher = teacher; \n  } \n\n  //Getters and setters follow \n} \n```", "```java\npackage packt.jee.eclipse.rest.ws.dto; \n\nimport javax.xml.bind.annotation.XmlAccessType; \nimport javax.xml.bind.annotation.XmlAccessorType; \nimport javax.xml.bind.annotation.XmlAttribute; \nimport javax.xml.bind.annotation.XmlElement; \nimport javax.xml.bind.annotation.XmlRootElement; \n\n@XmlRootElement \n@XmlAccessorType(XmlAccessType.FIELD) \npublic class Course { \n\n  @XmlAttribute \n  private int id; \n\n  @XmlElement(name=\"course_name\") \n  private String name; \n\n  private int credits; \n\n  private Teacher teacher; \n\n  //constructors \n  public Teacher() {} \n\n  public Teacher (int id, String name) { \n    this.id = id; \n    this.name = name; \n  } \n\n  //Getters and setters follow \n} \n```", "```java\npackage packt.jee.eclipse.rest.ws.services; \n\nimport javax.ws.rs.GET; \nimport javax.ws.rs.Path; \nimport javax.ws.rs.PathParam; \nimport javax.ws.rs.Produces; \nimport javax.ws.rs.core.MediaType; \n\nimport packt.jee.eclipse.rest.ws.dto.Course; \nimport packt.jee.eclipse.rest.ws.dto.Teacher; \n\n@Path(\"/course\") \npublic class CourseService { \n\n  @GET \n  @Produces (MediaType.APPLICATION_XML) \n  @Path(\"get/{courseId}\") \n  public Course getCourse (@PathParam(\"courseId\") int id) { \n\n    //To keep the example simple, we will return \n    //hardcoded values here. However, you could get \n    //data from database using, for example, JDO or JDBC \n\n    return new Course(id,\"Course-\" + id, 5, new Teacher(2, \n     \"Teacher1\")); \n  } \n} \n```", "```java\npackage packt.jee.eclipse.rest.ws; \n\nimport javax.ws.rs.ApplicationPath; \n\nimport org.glassfish.jersey.server.ResourceConfig; \n\n@ApplicationPath(\"services\") \npublic class CourseMgmtRESTApplication extends ResourceConfig { \n\n  public CourseMgmtRESTApplication () { \n    packages(\"packt.jee.eclipse.rest.ws.services\"); \n  } \n\n} \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?> \n<course id=\"10\"> \n  <course_name>Course-10</course_name> \n  <credits>5</credits> \n  <teacher id=\"2\"> \n    <teacher_name>Teacher1</teacher_name> \n  </teacher> \n</course>\n```", "```java\npublic class CourseService { \n\n  @GET \n  @Produces (MediaType.APPLICATION_JSON) \n  @Path(\"get/{courseId}\") \n  public Course getCourse (@PathParam(\"courseId\") int id) { \n... \n} \n} \n```", "```java\n    <dependency> \n      <groupId>org.glassfish.jersey.media</groupId> \n      <artifactId>jersey-media-json-jackson</artifactId> \n      <version>2.18</version> \n    </dependency> \n```", "```java\n{ \n    id: 10, \n    credits: 5, \n    teacher: { \n        id: 2, \n        teacher_name: \"Teacher1\" \n    }, \n    course_name: \"Course-10\" \n} \n```", "```java\n  @GET \n  @Produces (MediaType.APPLICATION_JSON) \n  @Path(\"get/{courseId}\") \n  public Course getCourseJSON (@PathParam(\"courseId\") int id) { \n\n    return createDummyCourse(id); \n\n  } \n\n  @GET \n  @Produces (MediaType.APPLICATION_XML) \n  @Path(\"get/{courseId}\") \n  public Course getCourseXML (@PathParam(\"courseId\") int id) { \n\n    return createDummyCourse(id); \n\n  } \n\n  private Course createDummyCourse (int id) { \n    //To keep the example simple, we will return \n    //hardcoded value here. However, you could get \n    //data from database using, for example, JDO or JDBC \n\n    return new Course(id,\"Course-\" + id, 5, new Teacher(2, \n     \"Teacher1\")); \n  } \n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>org.glassfish.jersey.core</groupId> \n      <artifactId>jersey-client</artifactId> \n      <version>2.18</version> \n    </dependency> \n  </dependencies>\n```", "```java\npackage packt.jee.eclipse.rest.ws.client; \n\nimport javax.ws.rs.client.Client; \nimport javax.ws.rs.client.ClientBuilder; \nimport javax.ws.rs.client.WebTarget; \nimport javax.ws.rs.core.MediaType; \nimport javax.ws.rs.core.Response; \n\n/** \n * This is a simple test class for invoking RESTful web service \n * using JAX-RS client APIs \n */ \npublic class CourseManagementClient { \n\n  public static void main(String[] args) { \n\ntestGetCoursesJSON(); \n\n  } \n\n  //Test getCourse method (XML or JSON) of CourseService \n  public static void testGetCoursesJSON() { \n    //Create JAX-RS client \n    Client client = ClientBuilder.newClient(); \n    //Get WebTarget for a URL \n    WebTarget webTarget = \n client.target(\"http://localhost:8080/CourseManagementREST/services/course\"); \n    //Add paths to URL \n    webTarget = webTarget.path(\"get\").path(\"10\"); \n\n    //We could also have create webTarget in one call with the full URL - \n    //WebTarget webTarget = \n client.target(\"http://localhost:8080/CourseManagementREST/services/course/get/10\"); \n\n    //Execute HTTP get method \n    Response response = \n     webTarget.request(MediaType.APPLICATION_JSON).get(); \n\n    //Check response code. 200 is OK \n    if (response.getStatus() != 200) { \n      System.out.println(\"Error invoking REST web service - \" + \n       response.getStatusInfo().getReasonPhrase()); \n      return; \n    } \n\n    //REST call was successful. Print the response \n    System.out.println(response.readEntity(String.class)); \n  } \n} \n```", "```java\n  @POST \n  @Consumes (MediaType.APPLICATION_JSON) \n  @Produces (MediaType.APPLICATION_JSON) \n  @Path(\"add\") \n  public Course addCourse (Course course) { \n\n    int courseId = dummyAddCourse(course.getName(), \n     course.getCredits()); \n\n    course.setId(courseId); \n\n    return course; \n  } \n\n  private int dummyAddCourse (String courseName, int credits) { \n\n    //To keep the example simple, we will just print \n    //parameters we received in this method to console and not \n    //actually save data to database. \n    System.out.println(\"Adding course \" + courseName + \", credits \n = \" + credits); \n\n    //TODO: Add course to database table \n\n    //return hard-coded id \n    return 10; \n  } \n```", "```java\n  //Test addCourse method (JSON version) of CourseService \n  public static void testAddCourseJSON() { \n\n    //Create JAX-RS client \n    Client client = ClientBuilder.newClient(); \n\n    //Get WebTarget for a URL \n    WebTarget webTarget = \n client.target(\"http://localhost:8600/CourseManagementREST/services/course/add\"); \n\n    //Create JSON representation of Course, \n    //with course_name and credits fields. Instead of creating \n    //JSON manually, you could also use JAXB to create JSON from \n    //Java object. \n    String courseJSON = \"{\"course_name\":\"Course-4\", \n     \"credits\":5}\"; \n\n    //Execute HTTP post method \n    Response response = webTarget.request(). \n        post(Entity.entity(courseJSON, \n         MediaType.APPLICATION_JSON_TYPE)); \n\n    //Check response code. 200 is OK \n    if (response.getStatus() != 200) { \n      //Print error message \n      System.out.println(\"Error invoking REST Web Service - \" + \n       response.getStatusInfo().getReasonPhrase() + \n          \", Error Code : \" + response.getStatus()); \n      //Also dump content of response message \n      System.out.println(response.readEntity(String.class)); \n      return; \n    } \n\n    //REST call was successful. Print the response \n    System.out.println(response.readEntity(String.class)); \n  } \n```", "```java\n//Execute HTTP post method \nResponse response = \n webTarget.request().post(Entity.entity(courseJSON, \n       MediaType.APPLICATION_JSON_TYPE)); \n```", "```java\n<!DOCTYPE html> \n<html> \n<head> \n<meta charset=\"UTF-8\"> \n<title>Add Course - JSON</title> \n\n<script type=\"text/javascript\"> \n\n  function testAddCourseJSON() { \n\n    //Hardcoded course information to keep example simple. \n    //This could be passed as arguments to this function \n    //We could also use HTML form to get this information from \n     users \n    var courseName = \"Course-4\"; \n    var credits = 4; \n\n    //Create XMLHttpRequest \n    var req = new XMLHttpRequest(); \n\n    //Set callback function, because we will have XMLHttpRequest \n    //make asynchronous call to our web service \n    req.onreadystatechange = function () { \n      if (req.readyState == 4 && req.status == 200) { \n        //HTTP call was successful. Display response \n        document.getElementById(\"responseSpan\").innerHTML = \n         req.responseText; \n      } \n    }; \n\n    //Open request to our REST service. Call is going to be asyc \n    req.open(\"POST\", \n \"http://localhost:8080/CourseManagementREST/services/course/add\", \n true); \n    //Set request content type as JSON \n    req.setRequestHeader(\"Content-type\", \"application/JSON\"); \n\n    //Create Course object and then stringify it to create JSON \n     string \n    var course = { \n      \"course_name\": courseName, \n      \"credits\" : credits \n    }; \n\n    //Send request. \n    req.send(JSON.stringify(course)); \n  } \n</script> \n\n</head> \n<body> \n  <button type=\"submit\" onclick=\"return testAddCourseJSON();\">Add \n   Course using JSON</button> \n  <p/> \n  <span id=\"responseSpan\"></span> \n</body> \n</html> \n```", "```java\n@POST \n@Consumes (MediaType.APPLICATION_FORM_URLENCODED) \n@Path(\"add\") \npublic Response addCourseFromForm (@FormParam(\"name\") String courseName, \n    @FormParam(\"credits\") int credits) throws URISyntaxException { \n\n  dummyAddCourse(courseName, credits); \n\n  return Response.seeOther(new \n URI(\"../addCourseSuccess.html\")).build(); \n} \n```", "```java\n<h3>Course added successfully</h3> \n```", "```java\n  //Test addCourse method (Form-Encoded version) of CourseService \n  public static void testAddCourseForm() { \n\n    //create JAX-RS client \n    Client client = ClientBuilder.newClient(); \n\n    //Get WebTarget for a URL \n    WebTarget webTarget = \n client.target(\"http://localhost:8600/CourseManagementREST/services/course/add\"); \n\n    //Create Form object and populate fields \n    Form form = new Form(); \n    form.param(\"name\", \"Course-5\"); \n    form.param(\"credits\", \"5\"); \n\n    //Execute HTTP post method \n    Response response = webTarget.request(). \n        post(Entity.entity(form, \n         MediaType.APPLICATION_FORM_URLENCODED)); \n\n    //check response code. 200 is OK \n    if (response.getStatus() != 200) { \n      //Print error message \n      System.out.println(\"Error invoking REST Web Service - \" + \n       response.getStatusInfo().getReasonPhrase() + \n          \", Error Code : \" + response.getStatus()); \n      //Also dump content of response message \n      System.out.println(response.readEntity(String.class)); \n      return; \n    } \n\n    //REST call was successful. Print the response \n    System.out.println(response.readEntity(String.class)); \n  } \n```", "```java\n  <dependencies>\n   <dependency>\n    <groupId>org.glassfish.jersey.containers</groupId>\n    <artifactId>jersey-container-servlet</artifactId>\n    <version>2.26</version>\n   </dependency>\n   <dependency>\n    <groupId>org.glassfish.jersey.media</groupId>\n    <artifactId>jersey-media-json-binding</artifactId>\n    <version>2.26</version>\n   </dependency>\n   <dependency>\n    <groupId>org.glassfish.jersey.inject</groupId>\n    <artifactId>jersey-hk2</artifactId>\n    <version>2.26</version>\n   </dependency>\n  </dependencies> \n```", "```java\n@Produces (MediaType.APPLICATION_JSON)\n```", "```java\npackage packt.jee.eclipse.ws.soap; \n\npublic class Course { \n  private int id; \n  private String name; \n  private int credits; \n\n  //Setters and getters follow here \n} \n```", "```java\npackage packt.jee.eclipse.ws.soap; \n\nimport java.util.ArrayList; \nimport java.util.List; \n\nimport javax.jws.WebService; \n\n@WebService \npublic class CourseManagementService { \n\n  public List<Course> getCourses() { \n    //Here courses could be fetched from database using, \n    //for example, JDBC or JDO. However, to keep this example \n    //simple, we will return hardcoded list of courses \n\n    List<Course> courses = new ArrayList<Course>(); \n\n    courses.add(new Course(1, \"Course-1\", 4)); \n    courses.add(new Course(2, \"Course-2\", 3)); \n\n    return courses; \n  } \n\n  public Course getCourse(int courseId) { \n    //Here again, we could get course details from database using \n    //JDBC or JDO. However, to keep this example \n    //simple, we will return hardcoded course \n\n    return new Course(1,\"Course-1\",4); \n  } \n} \n```", "```java\n  <dependencies> \n    <dependency> \n      <groupId>com.sun.xml.ws</groupId> \n      <artifactId>jaxws-rt</artifactId> \n      <version>2.2.10</version> \n    </dependency> \n  </dependencies> \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<endpoints  \n version=\"2.0\"> \n  <endpoint name=\"CourseService\" implementation=\"packt.jee.eclipse.ws.soap.CourseManagementService\" \n        url-pattern=\"/courseService\" /> \n</endpoints> \n```", "```java\n<definitions \n\n targetNamespace=\"http://soap.ws.eclipse.jee.packt/\" \n  name=\"CourseManagementServiceService\"> \n  <types> \n    <xsd:schema> \n      <xsd:import namespace=\"http://soap.ws.eclipse.jee.packt/\" \nschemaLocation=\"http://localhost:8080/CourseMgmtWSProject/courseService?xsd=1\" /> \n    </xsd:schema> \n  </types> \n  <message name=\"getCourses\"> \n    <part name=\"parameters\" element=\"tns:getCourses\" /> \n  </message> \n  <message name=\"getCoursesResponse\"> \n    <part name=\"parameters\" element=\"tns:getCoursesResponse\" /> \n  </message> \n  <message name=\"getCourse\"> \n    <part name=\"parameters\" element=\"tns:getCourse\" /> \n  </message> \n  <message name=\"getCourseResponse\"> \n    <part name=\"parameters\" element=\"tns:getCourseResponse\" /> \n  </message> \n  <portType name=\"CourseManagementService\"> \n    <operation name=\"getCourses\"> \n      <input \nwsam:Action=\"http://soap.ws.eclipse.jee.packt/CourseManagementService/getCoursesRequest\" \n        message=\"tns:getCourses\" /> \n      <output \nwsam:Action=\"http://soap.ws.eclipse.jee.packt/CourseManagementService/getCoursesResponse\" \n        message=\"tns:getCoursesResponse\" /> \n    </operation> \n    <operation name=\"getCourse\"> \n      <input \nwsam:Action=\"http://soap.ws.eclipse.jee.packt/CourseManagementService/getCourseRequest\" \n        message=\"tns:getCourse\" /> \n      <output \nwsam:Action=\"http://soap.ws.eclipse.jee.packt/CourseManagementService/getCourseResponse\" \n        message=\"tns:getCourseResponse\" /> \n    </operation> \n  </portType> \n  <binding name=\"CourseManagementServicePortBinding\" \n   type=\"tns:CourseManagementService\"> \n    <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" \n      style=\"document\" /> \n    <operation name=\"getCourses\"> \n      <soap:operation soapAction=\"\" /> \n      <input> \n        <soap:body use=\"literal\" /> \n      </input> \n      <output> \n        <soap:body use=\"literal\" /> \n      </output> \n    </operation> \n    <operation name=\"getCourse\"> \n      <soap:operation soapAction=\"\" /> \n      <input> \n        <soap:body use=\"literal\" /> \n      </input> \n      <output> \n        <soap:body use=\"literal\" /> \n      </output> \n    </operation> \n  </binding> \n  <service name=\"CourseManagementServiceService\"> \n    <port name=\"CourseManagementServicePort\" \n     binding=\"tns:CourseManagementServicePortBinding\"> \n      <soap:address \nlocation=\"http://localhost:8080/CourseMgmtWSProject/courseService\" \n /> \n    </port> \n  </service> \n</definitions> \n```", "```java\n<xs:schema  \n   version=\"1.0\" \n  targetNamespace=\"http://soap.ws.eclipse.jee.packt/\"> \n\n  <xs:element name=\"getCourse\" type=\"tns:getCourse\" /> \n  <xs:element name=\"getCourseResponse\" \n   type=\"tns:getCourseResponse\" /> \n  <xs:element name=\"getCourses\" type=\"tns:getCourses\" /> \n  <xs:element name=\"getCoursesResponse\" \n type=\"tns:getCoursesResponse\" /> \n\n  <xs:complexType name=\"getCourses\"> \n    <xs:sequence /> \n  </xs:complexType> \n  <xs:complexType name=\"getCoursesResponse\"> \n    <xs:sequence> \n      <xs:element name=\"return\" type=\"tns:course\" minOccurs=\"0\" \n        maxOccurs=\"unbounded\" /> \n    </xs:sequence> \n  </xs:complexType> \n  <xs:complexType name=\"course\"> \n    <xs:sequence> \n      <xs:element name=\"credits\" type=\"xs:int\" /> \n      <xs:element name=\"id\" type=\"xs:int\" /> \n      <xs:element name=\"name\" type=\"xs:string\" minOccurs=\"0\" /> \n    </xs:sequence> \n  </xs:complexType> \n  <xs:complexType name=\"getCourse\"> \n    <xs:sequence> \n      <xs:element name=\"arg0\" type=\"xs:int\" /> \n    </xs:sequence> \n  </xs:complexType> \n  <xs:complexType name=\"getCourseResponse\"> \n    <xs:sequence> \n      <xs:element name=\"return\" type=\"tns:course\" minOccurs=\"0\" /> \n    </xs:sequence> \n  </xs:complexType> \n</xs:schema>\n```", "```java\npackage packt.jee.eclipse.ws.soap; \n\nimport java.util.List; \n\nimport javax.jws.WebService; \n\n@WebService \npublic interface ICourseManagementService { \n  public List<Course> getCourses(); \n} \n```", "```java\npackage packt.jee.eclipse.ws.soap; \n\nimport java.util.ArrayList; \nimport java.util.List; \n\nimport javax.jws.WebService; \n\n@WebService \n (endpointInterface=\"packt.jee.eclipse.ws.soap.ICourseManagementService\") \npublic class CourseManagementService implements ICourseManagementService { \n\n  //getCourses and getCourse methods follow here \n} \n```", "```java\nwsimport -keep -p packt.jee.eclipse.ws.soap.client http://localhost:8080/CourseMgmtWSProject/courseService?wsdl\n\n```", "```java\npackage packt.jee.eclipse.ws.soap.client.test; \n\nimport packt.jee.eclipse.ws.soap.client.Course; \nimport packt.jee.eclipse.ws.soap.client.CourseManagementService; \nimport packt.jee.eclipse.ws.soap.client.CourseManagementServiceService; \n\npublic class CourseMgmtWSClient { \n\n  public static void main(String[] args) { \n    CourseManagementServiceService service = new \n CourseManagementServiceService();    CourseManagementService port = \n     service.getCourseManagementServicePort(); \n\n    Course course = port.getCourse(1); \n    System.out.println(\"Course name = \" + course.getName()); \n  } \n\n} \n```", "```java\n<xs:complexType name=\"getCourse\"> \n     <xs:sequence> \n         <xs:element name=\"arg0\" type=\"xs:int\"/> \n     </xs:sequence> \n</xs:complexType> \n```", "```java\npublic Course getCourse(@WebParam(name=\"courseId\") int courseId) {...} \n```", "```java\n<xs:complexType name=\"getCourse\"> \n     <xs:sequence> \n         <xs:element name=\"courseId\" type=\"xs:int\"/> \n     </xs:sequence> \n</xs:complexType> \n```", "```java\n<?xml version=\"1.0\" ?> \n<S:Envelope > \n  <S:Body> \n    <ns2:getCourse > \n      <courseId>1</courseId> \n    </ns2:getCourse> \n  </S:Body> \n</S:Envelope> \n```", "```java\n<?xml version='1.0' encoding='UTF-8'?> \n<S:Envelope > \n  <S:Body> \n    <ns2:getCourseResponse \n     > \n      <return> \n        <credits>4</credits> \n        <id>1</id> \n        <name>Course-1</name> \n      </return> \n    </ns2:getCourseResponse> \n  </S:Body> \n</S:Envelope> \n```", "```java\n@WebService \n@SOAPBinding(style=Style.RPC, use=Use.LITERAL) \npublic class CourseManagementService {...} \n```", "```java\n    Caused by: com.sun.xml.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions\n    java.util.List is an interface, and JAXB can't handle interfaces.\n      this problem is related to the following location:\n        at java.util.List\n```", "```java\n  public List<Course> getCourses() {...} \n```", "```java\npackage packt.jee.eclipse.ws.soap; \n\nimport java.util.List; \n\nimport javax.xml.bind.annotation.XmlAnyElement; \nimport javax.xml.bind.annotation.XmlRootElement; \n\n@XmlRootElement \npublic class Courses { \n  @XmlAnyElement \n  public List<Course> courseList; \n\n  public Courses() { \n\n  } \n\n  public Courses (List<Course> courseList) { \n    this.courseList = courseList; \n  } \n} \n```", "```java\n  public Courses getCourses() { \n    //Here, courses could be fetched from database using, \n    //for example, JDBC or JDO. However, to keep this example \n    //simple, we will return hardcoded list of courses \n\n    List<Course> courses = new ArrayList<Course>(); \n\n    courses.add(new Course(1, \"Course-1\", 4)); \n    courses.add(new Course(2, \"Course-2\", 3)); \n\n    return new Courses(courses); \n  } \n```"]