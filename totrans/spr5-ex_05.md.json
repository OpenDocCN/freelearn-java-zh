["```java\nmkdir tweet-gathering\n```", "```java\ndocker pull rabbitmq:3.7.0-management-alpine\n```", "```java\ndocker run -d --name rabbitmq --net twitter -p 5672:5672 -p 15672:15672 rabbitmq:3.7.0-management-alpine\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```", "```java\nspring:\n  rabbitmq:\n    host: localhost\n    username: guest\n    password: guest\n    port: 5672\n```", "```java\nqueue:\n  twitter: twitter-stream\nexchange:\n  twitter: twitter-exchange\nrouting_key:\n  track: track.*\n```", "```java\npackage springfive.twittergathering.infra.rabbitmq\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\nimport org.springframework.amqp.core.Binding\nimport org.springframework.amqp.core.BindingBuilder\nimport org.springframework.amqp.core.Queue\nimport org.springframework.amqp.core.TopicExchange\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nopen class RabbitMQConfiguration(@Value(\"\\${queue.twitter}\") private val queue:String,\n                                 @Value(\"\\${exchange.twitter}\") private val        \nexchange:String,\n                                 @Value(\"\\${routing_key.track}\") private val routingKey:String){\n\n    @Bean\n    open fun queue():Queue{\n        return Queue(this.queue,false)\n    }\n\n    @Bean\n    open fun exchange():TopicExchange{\n        return TopicExchange(this.exchange)\n    }\n\n    @Bean\n    open fun binding(queue: Queue, exchange: TopicExchange): Binding {\n        return BindingBuilder.bind(queue).to(exchange).with(this.routingKey)\n    }\n\n    @Bean\n    open fun converter(): Jackson2JsonMessageConverter {\n        return Jackson2JsonMessageConverter(ObjectMapper().registerModule(KotlinModule()))\n    }\n\n}\n```", "```java\n@RabbitListener(queues = [\"twitter-track-hashtag\"])\nfun receive(hashTag:TrackedHashTag) {\n...\n}\n```", "```java\nthis.rabbitTemplate.convertAndSend(\"twitter-exchange\",\"track.${hashTag.queue}\",it)\n```", "```java\ntwitter:\n  consumer-key: ${consumer-key}\n  consumer-secret: ${consumer-secret}\n  access-token: ${access-token}\n  access-token-secret: ${access-token-secret}\n```", "```java\ndata class TwitterToken(val accessToken: String,val accessTokenSecret: String)\n```", "```java\ndata class TwitterAppSettings(val consumerKey: String,val consumerSecret: String)\n```", "```java\npackage springfive.twittergathering.infra.twitter\n\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nopen class TwitterConfiguration(@Value(\"\\${twitter.consumer-key}\") private val consumerKey: String,\n                                @Value(\"\\${twitter.consumer-secret}\") private val consumerSecret: String,\n                                @Value(\"\\${twitter.access-token}\") private val accessToken: String,\n                                @Value(\"\\${twitter.access-token-secret}\") private val accessTokenSecret: String) {\n\n    @Bean\n    open fun twitterAppSettings(): TwitterAppSettings {\n        return TwitterAppSettings(consumerKey, consumerSecret)\n    }\n\n    @Bean\n    open fun twitterToken(): TwitterToken {\n        return TwitterToken(accessToken, accessTokenSecret)\n    }\n\n}\n```", "```java\npackage springfive.twittergathering.infra.web\n\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.web.reactive.function.client.WebClient\n\n@Configuration\nopen class WebClientProducer {\n\n    @Bean\n    open fun webClient(): WebClient? {\n        return WebClient.create()\n    }\n\n}\n```", "```java\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class TwitterUser(val id:String,val name:String)\n```", "```java\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class Tweet(val id:String, val text:String, @JsonProperty(\"created_at\")val createdAt:String, val user:TwitterUser)\n```", "```java\npackage springfive.twittergathering.infra.twitter\n\nimport org.springframework.util.StringUtils\nimport springfive.twittergathering.infra.twitter.EncodeUtils.computeSignature\nimport springfive.twittergathering.infra.twitter.EncodeUtils.encode\nimport java.util.*\n\nobject Twitter {\n\n    private val SIGNATURE_METHOD = \"HMAC-SHA1\"\n\n    private val AUTHORIZATION_VERIFY_CREDENTIALS = \"OAuth \" +\n            \"oauth_consumer_key=\\\"{key}\\\", \" +\n            \"oauth_signature_method=\\\"\" + SIGNATURE_METHOD + \"\\\", \" +\n            \"oauth_timestamp=\\\"{ts}\\\", \" +\n            \"oauth_nonce=\\\"{nonce}\\\", \" +\n            \"oauth_version=\\\"1.0\\\", \" +\n            \"oauth_signature=\\\"{signature}\\\", \" +\n            \"oauth_token=\\\"{token}\\\"\"\n\n    fun buildAuthHeader(appSettings: TwitterAppSettings, twitterToken: TwitterToken, method: String, url: String, query: String):String{\n        val ts = \"\" + Date().time / 1000\n        val nounce = UUID.randomUUID().toString().replace(\"-\".toRegex(), \"\")\n        val parameters = \"oauth_consumer_key=${appSettings.consumerKey}&oauth_nonce=$nounce&oauth_signature_method=$SIGNATURE_METHOD&oauth_timestamp=$ts&oauth_token=${encode(twitterToken.accessToken)}&oauth_version=1.0&track=${encode(query)}\"\n        val signature = \"$method&\" + encode(url) + \"&\" + encode(parameters)\n        var result = AUTHORIZATION_VERIFY_CREDENTIALS\n        result = StringUtils.replace(result, \"{nonce}\", nounce)\n        result = StringUtils.replace(result, \"{ts}\", \"\" + ts)\n        result = StringUtils.replace(result, \"{key}\", appSettings.consumerKey)\n        result = StringUtils.replace(result, \"{signature}\", encode(computeSignature(signature, \"${appSettings.consumerSecret}&${encode(twitterToken.accessTokenSecret)}\")))\n        result = StringUtils.replace(result, \"{token}\", encode(twitterToken.accessToken))\n        return result\n    }\n\n}\n\ndata class TwitterToken(val accessToken: String,val accessTokenSecret: String)\n\ndata class TwitterAppSettings(val consumerKey: String,val consumerSecret: String)\n```", "```java\npackage springfive.twittergathering.domain.service\n\nimport com.fasterxml.jackson.annotation.JsonIgnoreProperties\nimport com.fasterxml.jackson.annotation.JsonProperty\nimport org.springframework.http.MediaType\nimport org.springframework.stereotype.Service\nimport org.springframework.web.reactive.function.BodyInserters\nimport org.springframework.web.reactive.function.client.WebClient\nimport reactor.core.publisher.Flux\nimport springfive.twittergathering.infra.twitter.Twitter\nimport springfive.twittergathering.infra.twitter.TwitterAppSettings\nimport springfive.twittergathering.infra.twitter.TwitterToken\n\n@Service\nclass TweetGatherService(private val twitterAppSettings: TwitterAppSettings,\n                         private val twitterToken: TwitterToken,\n                         private val webClient: WebClient) {\n\n    fun streamFrom(query: String): Flux<Tweet> {\n        val url = \"https://stream.twitter.com/1.1/statuses/filter.json\"\n        return this.webClient.mutate().baseUrl(url).build()\n                .post()\n                .body(BodyInserters.fromFormData(\"track\", query))\n                .header(\"Authorization\", Twitter.buildAuthHeader(twitterAppSettings, twitterToken, \"POST\", url, query))\n                .accept(MediaType.TEXT_EVENT_STREAM)\n                .retrieve().bodyToFlux(Tweet::class.java)\n    }\n\n}\n\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class Tweet(val id: String = \"\", val text: String = \"\", @JsonProperty(\"created_at\") val createdAt: String = \"\", val user: TwitterUser = TwitterUser(\"\", \"\"))\n\n@JsonIgnoreProperties(ignoreUnknown = true)\ndata class TwitterUser(val id: String, val name: String)\n```", "```java\npackage springfive.twittergathering.domain.service\n\nimport org.springframework.amqp.rabbit.annotation.RabbitListener\nimport org.springframework.amqp.rabbit.core.RabbitTemplate\nimport org.springframework.stereotype.Service\nimport reactor.core.publisher.Mono\nimport reactor.core.scheduler.Schedulers\nimport springfive.twittergathering.domain.TrackedHashTag\nimport java.util.concurrent.CompletableFuture\nimport java.util.concurrent.TimeUnit\n\n@Service\nclass TwitterGatherRunner(private val twitterGatherService: TweetGatherService,private val rabbitTemplate: RabbitTemplate) {\n\n    @RabbitListener(queues = [\"twitter-track-hashtag\"])\n    fun receive(hashTag:TrackedHashTag) {\n        val streamFrom = this.twitterGatherService.streamFrom(hashTag.hashTag).filter({\n            return@filter it.id.isNotEmpty() && it.text.isNotEmpty() &&  \n             it.createdAt.isNotEmpty()\n        })\n        val subscribe = streamFrom.subscribe({\n            println(it.text)\n            Mono.fromFuture(CompletableFuture.runAsync {\n                this.rabbitTemplate.convertAndSend(\"twitter- \n                 exchange\",\"track.${hashTag.queue}\",it)\n            })\n        })\n        Schedulers.elastic().schedule({ subscribe.dispose() },10L,TimeUnit.SECONDS)\n    }\n\n}\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-amqp</artifactId>\n</dependency>\n```", "```java\nspring:\n  rabbitmq:\n    host: localhost\n    username: guest\n    password: guest\n    port: 5672\n  redis:\n    host: 127.0.0.1\n    port: 6379\n\nserver:\n  port: 9090\n\nqueue:\n  twitter: twitter-track-hashtag\nexchange:\n  twitter: twitter-track-exchange\nrouting_key:\n  track: \"*\"\n---\nspring:\n  profiles: docker\n  rabbitmq:\n    host: rabbitmq\n    username: guest\n    password: guest\n    port: 5672\n  redis:\n    host: redis\n    port: 6379\n\nserver:\n  port: 9090\n\nqueue:\n  twitter: twitter-track-hashtag\nexchange:\n  twitter: twitter-track-exchange\nrouting_key:\n  track: \"*\"\n```", "```java\npackage springfive.twittertracked.infra.rabbitmq\n\nimport com.fasterxml.jackson.databind.ObjectMapper\nimport com.fasterxml.jackson.module.kotlin.KotlinModule\nimport org.springframework.amqp.core.Binding\nimport org.springframework.amqp.core.BindingBuilder\nimport org.springframework.amqp.core.Queue\nimport org.springframework.amqp.core.TopicExchange\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nopen class RabbitMQConfiguration(@Value(\"\\${queue.twitter}\") private val queue:String,\n                                 @Value(\"\\${exchange.twitter}\") private val exchange:String,\n                                 @Value(\"\\${routing_key.track}\") private val routingKey:String){\n\n    @Bean\n    open fun queue():Queue{\n        return Queue(this.queue,false)\n    }\n\n    @Bean\n    open fun exchange():TopicExchange{\n        return TopicExchange(this.exchange)\n    }\n\n    @Bean\n    open fun binding(queue: Queue, exchange: TopicExchange): Binding {\n        return BindingBuilder.bind(queue).to(exchange).with(this.routingKey)\n    }\n\n    @Bean\n    open fun converter(): Jackson2JsonMessageConverter {\n        return Jackson2JsonMessageConverter(ObjectMapper().registerModule(KotlinModule()))\n    }\n\n}\n```", "```java\npackage springfive.twittertracked.domain.service\n\nimport org.springframework.amqp.rabbit.core.RabbitTemplate\nimport org.springframework.beans.factory.annotation.Value\nimport org.springframework.stereotype.Service\nimport reactor.core.publisher.Mono\nimport springfive.twittertracked.domain.TrackedHashTag\nimport springfive.twittertracked.domain.repository.TrackedHashTagRepository\nimport java.util.concurrent.CompletableFuture\n\n@Service\nclass TrackedHashTagService(private val repository: TrackedHashTagRepository,\n                            private val rabbitTemplate: RabbitTemplate,\n                            @Value(\"\\${exchange.twitter}\") private val exchange: String,\n                            @Value(\"\\${routing_key.track}\") private val routingKey: String) {\n\n    fun save(hashTag: TrackedHashTag) {\n        this.repository.save(hashTag).subscribe { data ->\n            Mono.fromFuture(CompletableFuture.runAsync {\n this.rabbitTemplate.convertAndSend(this.exchange, this.routingKey,  \n                hashTag)\n })\n        }\n    }\n\n    fun all() = this.repository.findAll()\n\n}\n```", "```java\ncurl -H \"Content-Type: application/json\" -X POST -d '{\"hashTag\":\"bitcoin\",\"queue\":\"bitcoin\"}' \\\nhttp://localhost:9090/api/tracked-hash-tag\n```", "```java\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n  </dependency>\n</dependencies>\n```", "```java\ninfo:\n  project: \"twitter-gathering\"\n  kotlin: @kotlin.version@\n```", "```java\nmanagement:\n  endpoints:\n    web:\n expose: \"*\"\n```"]