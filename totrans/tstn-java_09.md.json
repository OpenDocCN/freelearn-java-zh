["```java\npublic class ThreadClass extends Thread {\n```", "```java\n    private int actionCounter = 25;\n```", "```java\n    private static int threadCounter = 0;\n```", "```java\n    public ThreadClass() {\n        super(\"\" + ++threadCounter);\n    }\n```", "```java\n    @Override\n    public String toString() {\n        return \"#\" + getName() + \" : \" + actionCounter;\n    }\n```", "```java\n    @Override\n    public void run() {\n        System.out.printf(\"extends Thread%n\");\n        while (true) {\n            System.out.printf(\"%s%n\", this);\n            if (--actionCounter == 0) {\n                return;\n            }\n        }\n    }\n}\n```", "```java\npublic class ThreadClassRunner {\n```", "```java\n    public void perform() {\n        for (int i = 0; i < 5; i++) {\n            new ThreadClass().start();\n        }\n    }\n    public static void main(String[] args) {\n        new ThreadClassRunner().perform();\n    }\n}\n```", "```java\npublic class ThreadRunnableInterface implements Runnable{\n    private int actionCounter = 25;\n    @Override\n    public String toString() {\n```", "```java\n        return \"#\" + Thread.currentThread().getName() +\n                 \" : \" + actionCounter;\n    }\n```", "```java\n    @Override\n    public void run() {\n        while (true) {\n            System.out.printf(\"%s%n\", this);\n            if (--actionCounter == 0) {\n                return;\n            }\n        }\n    }\n}\n```", "```java\n    public void perform() {\n        System.out.printf(\"implements Runnable%n\");\n        for (int i = 0; i < 5; i++) {\n```", "```java\n            new Thread(new ThreadRunnableInterface(), \"\"\n                          + ++i).start();\n        }\n    }\n```", "```java\npublic class ExecutorThreadingInterface implements Runnable {\n    private int actionCounter = 250;\n```", "```java\n    private final int threadCount;\n```", "```java\n    public ExecutorThreadingInterface(int count) {\n        threadCount = count;\n    }\n```", "```java\n    @Override\n    public String toString() {\n        return \"#\" + Thread.currentThread().getName()\n            + \"-\" + threadCount + \" : \" + actionCounter;\n    }\n```", "```java\n    @Override\n    public void run() {\n        while (true) {\n            System.out.printf(\"%s%n\", this);\n            if (--actionCounter == 0) {\n                return;\n            }\n        }\n    }\n}\n```", "```java\npublic class ExecutorServiceRunner {\n```", "```java\n    private final int numOfThreads = 5;\n    private final int threadPoolSize = 2;\n    private final ExecutorService service;\n```", "```java\n    public ExecutorServiceRunner() {\n        service =\n             Executors.newFixedThreadPool(threadPoolSize);\n    }\n    public void perform() {\n        for (int i = 0; i < numOfThreads; i++) {\n```", "```java\n            service.execute(\n                      new ExecutorThreadingInterface(i));\n        }\n```", "```java\n        service.shutdown();\n    }\n```", "```java\n    public static void main(String[] args) {\n        new ExecutorServiceRunner().perform();\n    }\n}\n```", "```java\npublic class ThreadCallableInterface\n                          implements Callable<String> {\n    private int actionCounter = 250;\n    private final int threadCount;\n    public ThreadCallableInterface(int count) {\n        threadCount = count;\n    }\n    @Override\n    public String toString() {\n        return \"#\" + Thread.currentThread().getName() +\n                \"-\" + threadCount + \" : \" + actionCounter;\n    }\n```", "```java\n    @Override\n    public String call() {\n        while (true) {\n            System.out.printf(\"%s%n\", this);\n            if (--actionCounter == 0) {\n                return \"Thread # \" + threadCount +\n                                          \" is finished\";\n            }\n        }\n    }\n}\n```", "```java\npublic class ThreadCallableInterfaceRunner {\n```", "```java\n    private final List<Future<String>> futureList;\n    private final ExecutorService executor;\n    private final int numOfThreads = 5;\n    private final int threadPoolSize = 2;\n```", "```java\n    private final DateTimeFormatter dtf;\n```", "```java\n    public ThreadCallableInterfaceRunner() {\n        executor =\n            Executors.newFixedThreadPool(threadPoolSize);\n```", "```java\n        futureList = new ArrayList<>();\n        dtf = DateTimeFormatter.ofPattern(\n                                \"yyyy/MM/dd HH:mm:ss\");\n    }\n    public void perform(){\n```", "```java\n        for (int i = 0; i < numOfThreads; i++) {\n            Future<String> future = executor.submit(\n                           new ThreadCallableInterface(i));\n            futureList.add(future);\n        }\n```", "```java\n        for (Future<String> futureResult : futureList) {\n            try {\n                System.out.println(\n                    dtf.format(LocalDateTime.now()) + \":\" +\n                    futureResult.get());\n            } catch (InterruptedException |\n                             ExecutionException e) {\n                e.printStackTrace();\n            }\n        }\n```", "```java\n        executor.shutdown();\n    }\n```", "```java\n    public static void main(String[] args) {\n        new ThreadCallableInterfaceRunner().perform();\n    }\n}\n```", "```java\npublic class ThreadClass1 extends Thread {\n    private int actionCounter = 500;\n    private static int threadCounter = 0;\n    private final ThreadClass2 tc2;\n    public ThreadClass1() {\n        super(\"\" + ++threadCounter);\n        tc2 = new ThreadClass2();\n    }\n    @Override\n    public String toString() {\n        return \"#\" + getName() + \" : \" + actionCounter;\n    }\n    @Override\n    public void run() {\n```", "```java\n        tc2.start();\n        while (true) {\n            System.out.printf(\"%s%n\", this);\n```", "```java\n                if (actionCounter == 225) {\n                    try {\n                        tc2.join();\n                    } catch (InterruptedException ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            if (--actionCounter == 0) {\n                return;\n            }\n        }\n    }\n}\n```", "```java\nthread.setDaemon(true);\n```", "```java\npublic class Adder {\n    private long counter = 0;\n    public long addUp(long value) {\n        counter += value;\n```", "```java\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n        return counter;\n    }\n}\n```", "```java\npublic class SynchronizedThreadClass extends Thread {\n    private int actionCounter = 5;\n    private static int threadCounter = 0;\n```", "```java\n    private final Adder adder;\n```", "```java\n    public SynchronizedThreadClass(Adder adder) {\n        super(\"\" + ++threadCounter);\n        this.adder = adder;\n    }\n    @Override\n    public String toString() {\n        return \"#\" + getName() + \" : \" + actionCounter;\n    }\n    @Override\n    public void run() {\n        while (true) {\n            var value = adder.addUp(2);\n```", "```java\n            System.out.printf(\n                 \"%s : %d%n\", this, adder.addUp(2));\n            if (--actionCounter == 0) {\n                return;\n            }\n        }\n    }\n}\n```", "```java\npublic class SynchronizedExample {\n```", "```java\n    private final SynchronizedThreadClass tc1;\n    private final SynchronizedThreadClass tc2;\n    private final Adder sa;\n```", "```java\n    public SynchronizedExample() {\n        sa = new Adder();\n        tc1 = new SynchronizedThreadClass(sa);\n        tc2 = new SynchronizedThreadClass(sa);\n    }\n    public void perform() {\n        tc1.start();\n        tc2.start();\n    }\n    public static void main(String[] args) {\n        new SynchronizedExample().perform();\n    }\n}\n```", "```java\n    public long addUp(long value) {\n        synchronized (this) {\n            counter += value;\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException ex) {\n                ex.printStackTrace();\n            }\n            return counter;\n        }\n    }\n```", "```java\n    public synchronized long addUp(long value) {\n```", "```java\npublic class Deadlock1 {\n```", "```java\n    public final Object lock1 = new Object();\n    public final Object lock2 = new Object();\n    public void perform() {\n        var t1 = new ThreadLock1(lock1, lock2);\n        var t2 = new ThreadLock2(lock1, lock2);\n        t1.start();\n        t2.start();\n    }\n    public static void main(String args[]) {\n        new Deadlock1().perform();\n    }\n}\n```", "```java\npublic class ThreadLock1 extends Thread {\n    private final Object lock1;\n    private final Object lock2;\n    public ThreadLock1(Object lock1, Object lock2) {\n       this.lock1 = lock1;\n       this.lock2 = lock2;\n    }\n```", "```java\n    @Override\n    public void run() {\n        synchronized (lock1) {\n            System.out.printf(\n                      \"Thread 1: Holding lock 1%n\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n            }\n            System.out.printf(\n                       \"Thread 1: Waiting for lock 2%n\");\n            synchronized (lock2) {\n                System.out.printf(\n                        \"Thread 1: Holding lock 1 & 2%n\");\n            }\n        }\n    }\n}\npublic class ThreadLock2 extends Thread {\n    private final Object lock1;\n    private final Object lock2;\n    public ThreadLock2(Object lock1, Object lock2) {\n       this.lock1 = lock1;\n       this.lock2 = lock2;\n    }\n```", "```java\n    @Override\n    public void run() {\n        synchronized (lock2) {\n            System.out.printf(\n                       \"Thread 2: Holding lock 2%n\");\n            try {\n                Thread.sleep(10);\n            } catch (InterruptedException e) {\n            }\n            System.out.printf(\n                     \"Thread 2: Waiting for lock 1%n\");\n            synchronized (lock1) {\n                System.out.printf(\n                      \"Thread 2: Holding lock 1 & 2%n\");\n            }\n        }\n    }\n}\n```", "```java\nThread 1: Holding lock 1\nThread 2: Holding lock 2\nThread 1: Waiting for lock 2\nThread 2: Waiting for lock 1\n```", "```java\nThread 1: Holding lock 1\nThread 1: Waiting for lock 2\nThread 1: Holding lock 1 & 2\nThread 2: Holding lock 2\nThread 2: Waiting for lock 1\nThread 2: Holding lock 1 & 2\n```", "```java\n    public final Lock lock1 = new ReentrantLock();\n    public final Lock lock2 = new ReentrantLock();\n```", "```java\npublic class ThreadLock1a extends Thread {\n    private final Lock lock1;\n    private final Lock lock2;\n    public ThreadLock1a(Lock lock1, Lock lock2) {\n       this.lock1 = lock1;\n       this.lock2 = lock2;\n    }\n    @Override\n    public void run() {\n```", "```java\n        lock1.lock();\n        System.out.printf(\"Thread 1a: Holding lock 1%n\");\n        try {\n            Thread.sleep(10);\n        } catch (InterruptedException e) {\n        }\n        System.out.printf(\n              \"Thread 1a: Waiting for lock 2%n\");\n        lock2.lock();\n        System.out.printf(\"Thread 1a: Holding lock 1 & 2\");\n        lock2.unlock();\n        lock1.unlock();\n    }\n}\n```", "```java\n     public void perform() {\n        for (int i = 0; i < 5; ++i) {\n```", "```java\n            Thread.ofVirtual().name(\"Thread # \" + i).\n               start(new VirtualThreadRunnableInterface());\n        }\n        try {\n            Thread.sleep(500);\n        } catch (InterruptedException ex) {\n            ex.printStackTrace();\n        }\n    }\n```"]