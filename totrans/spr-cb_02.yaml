- en: Chapter 2. Defining Beans and Using Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a bean explicitly with @Bean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a bean implicitly with @Component
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a bean via dependency injection with @Autowired
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a bean directly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listing all beans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multiple configuration classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Beans** are at the core of Spring. They are standard Java objects instantiated
    and managed by Spring.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Beans are mostly used to:'
  prefs: []
  type: TYPE_NORMAL
- en: Configure Spring in some way (database connection parameters, security, and
    so on)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid hardcoding dependencies using **dependency injection**, so that our classes
    remain self-contained and unit testable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you'll learn how to define beans and use them.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a bean explicitly with @Bean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to define a bean is to create, in a Spring configuration class,
    a method annotated with `@Bean` returning an object (the actual bean). Such beans
    are usually used to configure Spring in some way (database, security, view resolver,
    and so on). In this recipe, we'll define a bean that contains the connection details
    of a database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a Spring configuration class, add a `dataSource()` method annotated with
    `@Bean` and return a `Datasource` object. In this method, create a `DriverManagerDataSource`
    object initialized with the connection details of a database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At startup, because of `@Bean`, the `dataSource()` method is automatically executed
    and returns a `Datasource` object which is stored by Spring (in a Spring object
    called `ApplicationContext`). The bean name is `dataSource`, which is the same
    as its methods name. From this point, any call to `dataSource()` will return the
    same cached `DataSource` object; `dataSource()` won't actually be executed again.
    This is done using aspect-oriented programming; any call to `dataSource()` is
    intercepted by Spring, which directly returns the object instead of executing
    the method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To customize the bean name, use the name parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To force `dataSource()` to be executed each time it''s called (and return a
    different object each time), use the `@Scope` annotation with a `prototype` scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s possible to define beans using our own classes. For example, if we have
    a `UserService` class, we can define a `UserService` bean in a Spring configuration
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: However, it's usually simpler to let Spring generate this kind of beans automatically
    using a `@Component` annotation on the `UserService` class, as explained in the
    *Defining a bean implicitly with @Component* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a bean implicitly with @Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Beans don't have to be defined in a Spring configuration class. Spring will
    automatically generate a bean from any class annotated with `@Component`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the basic web application created in the *Creating a Spring web
    application* recipe in [Chapter 1](ch01.html "Chapter 1. Creating a Spring Application"),
    *Creating a Spring Application*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `com.springcookbook.service` package and the following service class
    in it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to define a bean by adding `@Component` to an existing class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Spring configuration file, in the `@ComponentScan` class annotation,
    add the `com.springcookbook.service` base package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `UserService` class, add `@Component`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At startup, the `com.springcookbook.service` package will be scanned by Spring.
    The `UserService` class is annotated with `@Component`, so a bean is automatically
    instantiated from it. The bean's name will be `userService` by default, based
    on the class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To specify a custom name, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the `UserService` bean requires some custom initialization, for example,
    based on the current environment, it's possible to define and initialize the bean
    explicitly as explained in the previous recipe, *Defining a bean explicitly with
    @Bean*.
  prefs: []
  type: TYPE_NORMAL
- en: '`@Controller`, `@Service`, and `@Repository` are also component annotations;
    Spring will automatically instantiate a bean at startup from the classes annotated
    with them. It''s not strictly necessary to use these component annotations, but
    they make the role of the component class clearer; `@Controller` is used for controller
    classes, `@Service` is used for service classes (so that''s the one we would actually
    use for our `UserService` class), and `@Repository` is used for persistence classes.
    They also add minor extra functionality to the component classes. Refer to [http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations](http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/html/beans.html#beans-stereotype-annotations).'
  prefs: []
  type: TYPE_NORMAL
- en: Using a bean via dependency injection with @Autowired
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring configuration beans, such as the one in the *Defining a bean explicitly
    with @Bean* recipe are automatically discovered and used by Spring. To use a bean
    (any kind of bean) in one of your classes, add the bean as a field and annotate
    it with `@Autowired`. Spring will automatically initialize the field with the
    bean. In this recipe, we'll use an existing bean in a controller class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to use an existing bean in one of your classes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the controller class, add a `UserService` field annotated with `@Autowired`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a controller method, use the `UserService` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In a web browser, go to `http://localhost:8080/hi` to check whether it's working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with the existing `UserService` bean. This is called dependency
    injection; the controller class simply declares its dependency, a `UserService`
    field. It's Spring that initializes the field by injecting a `UserService` object
    into it.
  prefs: []
  type: TYPE_NORMAL
- en: If Spring is not able to find an existing bean for that dependency, an exception
    is thrown.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s possible to set the name of the bean to be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Dependency injection is useful when interfaces are used. For example, we could
    replace our `UserService` class by a `UserService` interface and its implementation
    `UserServiceImpl`. Everything would work the same, except that it's now simple
    to swap `UserServiceImpl` for another class, for example, for unit testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a bean directly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's possible to get a bean directly from Spring instead of using dependency
    injection by making Spring's `ApplicationContext`, which contains all the beans,
    a dependency of your class. In this recipe, we'll inject an existing bean into
    a controller class.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to get and use a bean directly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the controller class, add an `ApplicationContext` field annotated with `@Autowired`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a controller method, use the `ApplicationContext` object and its `getBean()`
    method to retrieve the `UserService` bean:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with its `ApplicationContext` object. The `ApplicationContext`
    object references all Spring beans, so we can get a bean directly using its name.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's possible to get a bean by its class, without knowing its name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Listing all beans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It can be useful, especially for debugging purposes, to list all the beans at
    a given moment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the code from the *Defining a bean implicitly with @Component* recipe,
    where we defined a `UserService` bean.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to retrieve the names of the beans currently in Spring''s
    `ApplicationContext` object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your class, add an `ApplicationContext` field annotated with `@Autowired`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In a method of that class, use `ApplicationContext` and its `getBeanDefinitionNames()`method
    to get the list of bean names:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the controller class is instantiated, Spring automatically initializes
    the `@Autowired` field with its `ApplicationContext` object. The `ApplicationContext`
    object references all Spring beans, so we can get a list of all the beans that
    are using it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To retrieve the bean itself from its name, use the `getBean()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using multiple configuration classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Spring configuration class can get quite long with many bean definitions.
    At this point, it can be convenient to break it into multiple classes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the code from the *Defining a bean explicitly with @Bean* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here''s how to add a second configuration class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new configuration class, for example, `DatabaseConfig` in the `com.springcookbook.config`
    package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `ServletInitializer` class, add the `DatabaseConfig` class in the `getServletConfigClasses()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Move the `Datasource` bean from the `AppConfig` class to `DatabaseConfig`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are using a Spring application without a `ServletInitializer` class,
    you can include other configuration classes from your primary configuration class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
