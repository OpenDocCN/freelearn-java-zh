["```java\npublic class CoordSchedule {\n    private String startingTimestamp;\n    private String endingTimestamp;\n    private int frequency;\n\n}\n```", "```java\n@Test\n@DisplayName(\"Frequency must be less than 1440\")\nvoid testFrequency() {\n}\n```", "```java\nAssertions.assertTrue(schedule.getFrequency() < 1440);\n```", "```java\n    sourceCompatibility = 12\n    ```", "```java\n    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')\n    testImplementation('org.junit.jupiter:junit-jupiter-engine:5.4.2')\n    ```", "```java\n    test {\n        useJUnitPlatform()\n    }\n    ```", "```java\n    public static final int MAX_FREQUENCY = 1440;\n    public static final int MIN_FREQUENCY = 5;\n    ```", "```java\n    private String startingTimestamp;\n    private String endingTimestamp;\n    private int frequency;\n    ```", "```java\n    public CoordinatorSchedule(String startingTimestamp, \n        String endingTimestamp, int frequency) {\n        this.startingTimestamp = startingTimestamp;\n        this.endingTimestamp = endingTimestamp;\n        this.frequency = frequency;\n    }\n    ```", "```java\n    private Date parseTimestamp(String timestamp) {\n        Date date = null;\n        SimpleDateFormat format =       new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm'Z'\",Locale.getDefault());\n        format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n        try {\n            date = format.parse(timestamp);\n        } catch (ParseException e) {\n            e.printStackTrace();\n        }\n        return date;\n    }\n    ```", "```java\n    public Date getStartingTimestampAsDate() {\n        return parseTimestamp(startingTimestamp);\n    }\n    public Date getEndingTimestampAsDate() {\n        return parseTimestamp(endingTimestamp);\n    }\n    ```", "```java\n    @Test\n    @DisplayName(\"Frequency must be less than 1440\")\n    void testFrequency() {\n        CoordSchedule schedule = new CoordSchedule(\n                \"2020-12-15T15:32Z\",\n                \"2020-12-30T05:15Z\",\n                60\n        );\n        Assertions.assertTrue(schedule.getFrequency() < 50);\n    }\n    ```", "```java\n    > Task :compileJava UP-TO-DATE\n    > Task :processResources NO-SOURCE\n    > Task :classes UP-TO-DATE\n    > Task :compileTestJava UP-TO-DATE\n    > Task :processTestResources NO-SOURCE\n    > Task :testClasses UP-TO-DATE\n    > Task :test FAILED\n    expected: <true> but was: <false>\n    org.opentest4j.AssertionFailedError: expected: <true> but was: <false>\n    at com.packtpub.testing.CoordScheduleTest.testFrequency(CoordScheduleTest.java:19)\n    com.packtpub.testing.CoordScheduleTest > testFrequency() FAILED\n        org.opentest4j.AssertionFailedError at CoordScheduleTest.java:19\n    1 test completed, 1 failed\n    FAILURE: Build failed with an exception.\n    ```", "```java\n    @Test\n    @DisplayName(\"Frequency must be less than 1440\")\n    void testFrequency() {\n        CoordSchedule schedule = new CoordSchedule(\n                \"2020-12-15T15:32Z\",\n                \"2020-12-30T05:15Z\",\n                60\n        );\n        int frequency = schedule.getFrequency();\n        Assertions.assertTrue(frequency\n                < CoordSchedule.MAX_FREQUENCY);\n        Assertions.assertTrue(frequency\n                > CoordSchedule.MIN_FREQUENCY);\n    }\n    ```", "```java\n    @Test\n    @DisplayName(\"Timestamp will be null if not formatted correctly\")\n    void testStartingTimestamps() {\n        CoordSchedule schedule = new CoordSchedule(\n                \"2020/12/15T15:32Z\",\n                \"2020-12-15T15:35Z\",\n                60\n        );\n        Date starting = schedule.getStartingTimestampAsDate();\n        // Timestamp is not formatted properly.\n        Assertions.assertNull(starting);\n    }\n    ```", "```java\n    @Test\n    @DisplayName(\"Ending timestamp must be after starting\")\n    void testTimestamps() {\n        CoordSchedule schedule = new CoordSchedule(\n                \"2020-12-15T15:32Z\",\n                \"2020-12-15T15:35Z\",\n                60\n        );\n        Date starting = schedule.getStartingTimestampAsDate();\n        Assertions.assertNotNull(starting);\n        Date ending = schedule.getEndingTimestampAsDate();\n        Assertions.assertNotNull(ending);\n        Assertions.assertTrue(ending.after(starting));\n    }\n    ```", "```java\n    Testing started at 14:59 ...\n    14:59:33: Executing tasks ':cleanTest :test --tests \"com.packtpub.testing.CoordScheduleTest\"'...\n    > Task :cleanTest\n    > Task :compileJava\n    > Task :processResources NO-SOURCE\n    > Task :classes\n    > Task :compileTestJava\n    > Task :processTestResources NO-SOURCE\n    > Task :testClasses\n    > Task :test\n    java.text.ParseException: Unparseable date: \"2020/12/15T15:32Z\"\n    at java.base/java.text.DateFormat.parse(DateFormat.java:395)\n    at com.packtpub.testing.CoordSchedule.parseTimestamp(CoordSchedule.java:64)\n    at com.packtpub.testing.CoordSchedule.getStartingTimestampAsDate(CoordSchedule.java:49)\n    at com.packtpub.testing.CoordScheduleTest.testStartingTimestamps(CoordScheduleTest.java:41)\n    …\n    BUILD SUCCESSFUL in 0s\n    4 actionable tasks: 4 executed\n    14:59:34: Tasks execution finished ':cleanTest :test --tests \"com.packtpub.testing.CoordScheduleTest\"'.\n    ```", "```java\n@ParameterizedTest\n@ValueSource(ints = { 10000, 11000 })\npublic void testMetStepGoal(int steps) {\n    DailyGoal dailyGoal = new DailyGoal(DAILY_GOAL);\n    Assertions.assertTrue(dailyGoal.hasMetGoal(steps));\n}\n```", "```java\n@ParameterizedTest\n@CsvSource({\n    \"10,     false\",\n    \"9999,   false\",\n    \"10000,  true\",\n    \"20000,  true\"\n})\npublic void testHasMetStepGoal(int steps, boolean expected) {\n   // …\n}\n```", "```java\n@CsvSource({\n    \"'A man, a plan, a canal. Panama',  7\",\n    \"'Able was I ere I saw Elba',  7\",\n    \", 0\",\n    \"'', 0\"\n})\n```", "```java\n    testImplementation('org.junit.jupiter:junit-jupiter-params:5.4.2')\n    ```", "```java\n    int dailyGoal = 10000;\n    public DailyGoal(int dailyGoal) {\n        this.dailyGoal = dailyGoal;\n    }\n    public boolean hasMetGoal(int steps) {\n        if (steps >= dailyGoal) {\n            return true;\n        }\n        return false;\n    }\n    ```", "```java\n    public static final int DAILY_GOAL = 10000;\n    ```", "```java\n    @ParameterizedTest\n    @ValueSource(ints = { 10000, 11000 })\n    public void testMetStepGoal(int steps) {\n        DailyGoal dailyGoal = new DailyGoal(DAILY_GOAL);\n        Assertions.assertTrue(dailyGoal.hasMetGoal(steps));\n    }\n    ```", "```java\n    @ParameterizedTest\n    @ValueSource(ints = { 10, 9999 })\n    public void testNotMetStepGoal(int steps) {\n        DailyGoal dailyGoal = new DailyGoal(DAILY_GOAL);\n        Assertions.assertFalse(dailyGoal.hasMetGoal(steps));\n    }\n    ```", "```java\n    @ParameterizedTest\n    @CsvSource({\n        \"10,     false\",\n        \"9999,   false\",\n        \"10000,  true\",\n        \"20000,  true\"\n    })\n    public void testHasMetStepGoal(int steps, boolean expected) {\n        DailyGoal dailyGoal = new DailyGoal(DAILY_GOAL);\n        // Using a lambda will lazily evaluate the expression\n        Assertions.assertTrue(\n                dailyGoal.hasMetGoal(steps) == expected,\n                () -> \"With \" + steps +\n                      \" steps, hasMetGoal() should return \" +\n                        expected);\n    }\n    ```", "```java\n@Disabled(\"Until platform team fixes issue 5578\")\n@Test\npublic void testThatShouldNotFail() {\n   // …\n}\n```", "```java\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n```", "```java\n    public static double convertToF(double degreesC) {\n        double degreesF = (degreesC * 9/5) + 32;\n        // Round to make nicer output.\n        return Math.round(degreesF * 10.0) / 10.0;\n    }\n    ```", "```java\n    @Test\n    public void testFahrenheitWhenCold() {\n        // -40 C == -40 F\n        double degreesC = -40.0;\n        double degreesF = TempConverter.convertToF(degreesC);\n        Assertions.assertEquals(degreesC, degreesF);\n    }\n    ```", "```java\n    @Test\n    public void testFahrenheitWhenHot() {\n        // 100 C == 212 F\n        double degreesC = 100.0;\n        double degreesF = TempConverter.convertToF(degreesC);\n        Assertions.assertEquals(212.0, degreesF);\n    }\n    ```", "```java\n    @BeforeAll\n    public static void runBeforeAllTests() {\n        System.out.println(\"Before all tests\");\n    }\n    ```", "```java\n    @AfterAll\n    public static void runAfterAllTests() {\n        System.out.println(\"After all tests\");\n    }\n    ```", "```java\n    @BeforeEach\n    public void runBeforeEachTest() {\n        System.out.println(\"Before each test\");\n    }\n    ```", "```java\n    @AfterEach\n    public void runAfterEachTest() {\n        System.out.println(\"After each test\");\n    }\n    ```", "```java\n    Before all tests\n    Before each test\n    After each test\n    Before each test\n    After each test\n    After all tests\n    BUILD SUCCESSFUL in 0s\n    4 actionable tasks: 2 executed, 2 up-to-date\n    ```", "```java\nWorkflowStatus workflowStatus = workflowClient.getStatus(id);\nif (!workflowStatus.isOk()) {\n    emailNotifier.sendFailureEmail(workflowStatus);\n}\n```", "```java\nWorkflowStatus workflowStatus = workflowClient.getStatus(id);\n```", "```java\nimport static org.mockito.Mockito.*;\nworkflowClient = mock(WorkflowClient.class);\n```", "```java\nString id = \"WORKFLOW-1\";\nWorkflowStatus workflowStatus =   new WorkflowStatus(id, WorkflowStatus.OK);\nwhen(workflowClient.getStatus(id)).thenReturn(workflowStatus);\n```", "```java\nwhen(workflowClient.getStatus(anyString())).thenReturn(workflowStatus);\n```", "```java\nimport static org.mockito.Mockito.*;\nEmailNotifier emailNotifier = mock(EmailNotifier.class);\n```", "```java\nverify(emailNotifier, times(0)).sendFailureEmail(workflowStatus);\n```", "```java\nverify(emailNotifier, times(1)).sendFailureEmail(workflowStatus);\n```", "```java\nverify(emailNotifier).sendFailureEmail(workflowStatus);\n```", "```java\n@TestInstance(TestInstance.Lifecycle.PER_CLASS)\npublic class WorkflowMonitorTest {\n    private EmailNotifier emailNotifier;\n    private WorkflowClient workflowClient;\n    private WorkflowMonitor workflowMonitor;\n    @BeforeAll\n    public void setUpMocks() {\n        emailNotifier = mock(EmailNotifier.class);\n        workflowClient = mock(WorkflowClient.class);\n        workflowMonitor =\n                new WorkflowMonitor(emailNotifier, workflowClient);\n    }\n}\n```", "```java\n    testImplementation(\"org.mockito:mockito-core:2.+\")\n    ```", "```java\n    public static final String OK = \"OK\";\n    public static final String ERROR = \"ERROR\";\n    private String id;\n    private String status = OK;\n    public WorkflowStatus(String id, String status) {\n        this.id = id;\n        this.status = status;\n    }\n    public boolean isOk() {\n        if (OK.equals(status)) {\n            return true;\n        }\n        return false;\n    }\n    ```", "```java\n    public void sendFailureEmail(WorkflowStatus workflowStatus) {\n        // This would have actual code...\n    }\n    ```", "```java\n    public WorkflowStatus getStatus(String id) {\n        // This would use HTTP to get the status.\n        return new WorkflowStatus(id, WorkflowStatus.OK);\n    }\n    ```", "```java\n    private EmailNotifier emailNotifier;\n    private WorkflowClient workflowClient;\n    ```", "```java\n    public void checkStatus(String id) {\n        WorkflowStatus workflowStatus = workflowClient.getStatus(id);\n        if (!workflowStatus.isOk()) {\n            emailNotifier.sendFailureEmail(workflowStatus);\n        }\n    }\n    ```", "```java\n    @TestInstance(TestInstance.Lifecycle.PER_CLASS)\n    ```", "```java\n    private EmailNotifier emailNotifier;\n    private WorkflowClient workflowClient;\n    private WorkflowMonitor workflowMonitor;\n    @BeforeAll\n    public void setUpMocks() {\n        emailNotifier = mock(EmailNotifier.class);\n        workflowClient = mock(WorkflowClient.class);\n        workflowMonitor =       new WorkflowMonitor(emailNotifier, workflowClient);\n    }\n    ```", "```java\n    @Test\n    public void testSuccess() {\n        String id = \"WORKFLOW-1\";\n        WorkflowStatus workflowStatus =       new WorkflowStatus(id, WorkflowStatus.OK);\n        when(workflowClient.getStatus(id)).thenReturn(workflowStatus);\n        workflowMonitor.checkStatus(id);\n        verify(emailNotifier, times(0)).sendFailureEmail(workflowStatus);\n    }\n    ```", "```java\n        @Test\n        public void testFailure() {\n            String id = \"WORKFLOW-1\";\n            WorkflowStatus workflowStatus =           new WorkflowStatus(id, WorkflowStatus.ERROR);\n            when(workflowClient.getStatus(anyString()))          .thenReturn(workflowStatus);\n            workflowMonitor.checkStatus(id);\n            verify(emailNotifier).sendFailureEmail(workflowStatus);\n        }\n    }\n    ```"]