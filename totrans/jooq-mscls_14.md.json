["```java\nlong insertedId = ctx.insertInto(SALE, SALE.FISCAL_YEAR, \n```", "```java\n    SALE.SALE_, SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n    SALE.REVENUE_GROWTH)\n```", "```java\n .values(2004, 2311.42, 1370L, 1, 0.0)\n```", "```java\n .returningResult(SALE.SALE_ID)\n```", "```java\n .fetchOneInto(long.class);\n```", "```java\n // .fetchOne(); to fetch Record1<Long>\n```", "```java\n.returningResult(SALE.getIdentity().getField())\n```", "```java\nList<Long> insertedIds = ctx.insertInto(SALE, \n```", "```java\n    SALE.FISCAL_YEAR,SALE.SALE_, SALE.EMPLOYEE_NUMBER, \n```", "```java\n    SALE.FISCAL_MONTH, SALE.REVENUE_GROWTH)\n```", "```java\n .values(2004, 2311.42, 1370L, 1, 0.0)\n```", "```java\n .values(2003, 900.21, 1504L, 1, 0.0)\n```", "```java\n .values(2005, 1232.2, 1166L, 1, 0.0)\n```", "```java\n .returningResult(SALE.getIdentity().getField())\n```", "```java\n // or, .returningResult(SALE.SALE_ID)\n```", "```java\n .collect(intoList());\n```", "```java\n // or, .fetchInto(Long.class);\n```", "```java\nctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n               SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n               SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2002, 5411.42, 1504L, 1, 0.0)\n```", "```java\n   .execute();\n```", "```java\n//meanwhile, a concurrent transaction can sneak a INSERT\n```", "```java\nvar lastId = ctx.lastID();\n```", "```java\nSaleRecord sr = ctx.newRecord(SALE);\n```", "```java\nsr.setFiscalYear(2021);\n```", "```java\n...\n```", "```java\nsr.insert();\n```", "```java\n// here you can call sr.getSaleId()\n```", "```java\nprivate final SaleRepository saleRepository; // injected DAO\n```", "```java\nSale s = new Sale(); // jooq.generated.tables.pojos.Sale\n```", "```java\ns.setFiscalYear(2020);\n```", "```java\n...\n```", "```java\nsaleRepository.insert(s);\n```", "```java\n// here you can call s.getSaleId()\n```", "```java\nDSLContext derivedCtx = ctx.configuration().derive(\n```", "```java\n new Settings().withReturnIdentityOnUpdatableRecord(false))\n```", "```java\n               .dsl();\n```", "```java\n SaleRecord sr = derivedCtx.newRecord(SALE);\n```", "```java\n sr.setFiscalYear(2021);\n```", "```java\n ...\n```", "```java\n sr.insert();\n```", "```java\nDSLContext derivedCtx = ctx.configuration().derive(\n```", "```java\n  new Settings().withUpdatablePrimaryKeys(true)).dsl();\n```", "```java\n SaleRecord sr = derivedCtx.selectFrom(SALE)\n```", "```java\n    .where(SALE.SALE_ID.eq(2L))\n```", "```java\n    .fetchSingle();\n```", "```java\n sr.setSaleId(new_primary_key);\n```", "```java\n sr.store(); // UPDATE primary key\n```", "```java\nctx.update(SALE)\n```", "```java\n   .set(SALE.SALE_ID, sr.getSaleId() + 1)\n```", "```java\n   .where(SALE.SALE_ID.eq(sr.getSaleId()))\n```", "```java\n   .execute();\n```", "```java\nCREATE SEQUENCE \"employee_seq\" START 100000 INCREMENT 10 \n```", "```java\n       MINVALUE 100000 MAXVALUE 10000000 \n```", "```java\n       OWNED BY \"employee\".\"employee_number\";\n```", "```java\nCREATE TABLE \"employee\" (\n```", "```java\n  \"employee_number\" BIGINT NOT NULL,\n```", "```java\n  ...\n```", "```java\n);\n```", "```java\nCREATE SEQUENCE \"sale_seq\" START 1000000; \n```", "```java\nCREATE TABLE \"sale\" (\n```", "```java\n  \"sale_id\" BIGINT NOT NULL DEFAULT NEXTVAL ('\"sale_seq\"'),  \n```", "```java\n  ...\n```", "```java\n);\n```", "```java\npublic static final Sequence<Long> EMPLOYEE_SEQ = \n```", "```java\n  Internal.createSequence(\"employee_seq\", Public.PUBLIC, \n```", "```java\n   SQLDataType.BIGINT.nullable(false), 100000, 10, 100000, \n```", "```java\n    10000000, false, null);\n```", "```java\nString name = EMPLOYEE_SEQ.getName();\n```", "```java\nField<Long> start = EMPLOYEE_SEQ.getStartWith();\n```", "```java\nField<Long> min = EMPLOYEE_SEQ.getMinvalue();\n```", "```java\nField<Long> max = EMPLOYEE_SEQ.getMaxvalue();\n```", "```java\nField<Long> inc = EMPLOYEE_SEQ.getIncrementBy();\n```", "```java\nlong cr = ctx.fetchValue(EMPLOYEE_SEQ.currval());\n```", "```java\nlong cr = ctx.select(EMPLOYEE_SEQ.currval())\n```", "```java\n  .fetchSingle().value1();\n```", "```java\nlong cr = ctx.select(EMPLOYEE_SEQ.currval())\n```", "```java\n  .fetchSingleInto(Long.class); // or, fetchOneInto()\n```", "```java\nlong nv = ctx.fetchValue(EMPLOYEE_SEQ.nextval());\n```", "```java\nlong nv = ctx.select(EMPLOYEE_SEQ.nextval())\n```", "```java\n  .fetchSingle().value1();\n```", "```java\nlong nv = ctx.select(EMPLOYEE_SEQ.nextval())\n```", "```java\n  .fetchSingleInto(Long.class); // or, fetchOneInto()\n```", "```java\nRecord2<Long, Long> vals = ctx.fetchSingle(\n```", "```java\n           EMPLOYEE_SEQ.nextval(), EMPLOYEE_SEQ.currval());\n```", "```java\nRecord2<Long, Long> vals = ctx.select(EMPLOYEE_SEQ.nextval(), \n```", "```java\n           EMPLOYEE_SEQ.currval()) .fetchSingle();\n```", "```java\nctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n               SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n               SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2005, 1370L, 1282.641, 1, 0.0)\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER,    \n```", "```java\n               EMPLOYEE.LAST_NAME, EMPLOYEE.FIRST_NAME, ...)\n```", "```java\n   .values(EMPLOYEE_SEQ.nextval(),\n```", "```java\n      val(\"Lionel\"), val(\"Andre\"), ...)\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.SALE_,  \n```", "```java\n               SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n               SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2020, 900.25, 1611L, 1, 0.0)\n```", "```java\n   .execute();\n```", "```java\n// another transaction can INSERT and currval() is modified\n```", "```java\nlong cr = ctx.fetchValue(SALE_SEQ.currval());\n```", "```java\nctx.update(SALE)\n```", "```java\n   .set(SALE.FISCAL_YEAR, 2005)\n```", "```java\n   .where(SALE.SALE_ID.eq(cr))\n```", "```java\n   .execute();\n```", "```java\nctx.deleteFrom(SALE)\n```", "```java\n   .where(SALE.SALE_ID.eq(ctx.fetchValue(SALE_SEQ.currval())))\n```", "```java\n   .execute();\n```", "```java\nctx.deleteFrom(SALE)\n```", "```java\n   .where(SALE.SALE_ID.eq(SALE_SEQ.currval()))\n```", "```java\n   .execute();\n```", "```java\nDELETE FROM \"public\".\"sale\" WHERE \n```", "```java\n  \"public\".\"sale\".\"sale_id\" = currval('\"public\".\"sale_seq\"')\n```", "```java\nList<Long> ids1 = ctx.fetchValues(EMPLOYEE_SEQ.nextvals(10));\n```", "```java\nList<Long> ids2 = ctx.fetch(EMPLOYEE_SEQ\n```", "```java\n   .nextvals(10)).into(Long.class);\n```", "```java\nList<Record1<Long>> ids3 = ctx.fetch(\n```", "```java\n   EMPLOYEE_SEQ.nextvals(10));\n```", "```java\nfor (int i = 0; i < ids.size(); i++) {\n```", "```java\n ctx.insertInto(EMPLOYEE, EMPLOYEE.EMPLOYEE_NUMBER, \n```", "```java\n                EMPLOYEE.LAST_NAME...)\n```", "```java\n   .values(ids1.get(i), \"Lionel\", ...)\n```", "```java\n   .execute();\n```", "```java\n}\n```", "```java\nEmployeeRecord er = new EmployeeRecord(ids1.get(0),\n```", "```java\n  // or, ids2.get(0).value1(), \n```", "```java\n  \"Lionel\", ...);  \n```", "```java\nCREATE TABLE [product] (\n```", "```java\n  [product_id] BIGINT NOT NULL IDENTITY,\n```", "```java\n  ...\n```", "```java\n);\n```", "```java\nctx.insertInto(PRODUCT, PRODUCT.PRODUCT_ID, \n```", "```java\n               PRODUCT.PRODUCT_LINE, PRODUCT.CODE, \n```", "```java\n               PRODUCT.PRODUCT_NAME)\n```", "```java\n   .values(5555L, \"Classic Cars\", 599302L, \"Super TX Audi\")\n```", "```java\n   .onDuplicateKeyIgnore();\n```", "```java\nQuery q1 = ctx.query(\"SET IDENTITY_INSERT [product] ON\");\n```", "```java\nQuery q2 = ctx.insertInto(PRODUCT, PRODUCT.PRODUCT_ID, \n```", "```java\n    PRODUCT.PRODUCT_LINE, PRODUCT.CODE, PRODUCT.PRODUCT_NAME)\n```", "```java\n  .values(5555L, \"Classic Cars\", 599302L, \"Super TX Audi\")\n```", "```java\n  .onDuplicateKeyIgnore(); // this will lead to a MERGE\n```", "```java\nQuery q3 = ctx.query(\"SET IDENTITY_INSERT [product] OFF\");\n```", "```java\nctx.batch(q1, q2, q3).execute();\n```", "```java\nctx.insertInto(SALE, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n               SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n               SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2004, 2311.42, 1370L, 1, 0.0)\n```", "```java\n   .returningResult(SALE.SALE_ID, rowid())\n```", "```java\n   .fetchOne();  \n```", "```java\nString rowid = ...;\n```", "```java\nvar result = ctx.selectFrom(SALE)\n```", "```java\n   .where(rowid().eq(rowid))\n```", "```java\n   .fetch();\n```", "```java\nvar result = ctx.selectFrom(PRODUCTLINE)\n```", "```java\n .where(PRODUCTLINE.PRODUCT_LINE.eq(\"Classic Cars\")\n```", "```java\n   .and(PRODUCTLINE.CODE.eq(599302L)))\n```", "```java\n .fetchSingle();\n```", "```java\nvar result = ctx.selectFrom(PRODUCTLINE)\n```", "```java\n  .where(row(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.CODE)\n```", "```java\n    .eq(row(\"Classic Cars\", 599302L)))\n```", "```java\n  .fetchSingle();\n```", "```java\nresult = ctx.selectFrom(PRODUCTLINE)\n```", "```java\n  .where(row(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.CODE)    \n```", "```java\n  .in(row(\"Classic Cars\", 599302L),\n```", "```java\n      row(\"Trains\", 123333L),\n```", "```java\n      row(\"Motorcycles\", 599302L)))\n```", "```java\n// Maven and standalone\n```", "```java\n<database>\n```", "```java\n  ...\n```", "```java\n  <embeddablePrimaryKeys>.*</embeddablePrimaryKeys>\n```", "```java\n  <embeddableUniqueKeys>.*</embeddableUniqueKeys>\n```", "```java\n</database>\n```", "```java\n// Gradle\n```", "```java\ndatabase {\n```", "```java\n  ...\n```", "```java\n  embeddablePrimaryKeys = '.*'\n```", "```java\n  embeddableUniqueKeys = '.*'\n```", "```java\n}\n```", "```java\n// programmatic\n```", "```java\n.withEmbeddablePrimaryKeys(\".*\")\n```", "```java\n.withEmbeddableUniqueKeys(\".*\")\n```", "```java\nCREATE TABLE [productline] (\n```", "```java\n  [product_line] VARCHAR(50) NOT NULL,\n```", "```java\n  [code] BIGINT NOT NULL,\n```", "```java\n  ...\n```", "```java\n  CONSTRAINT [productline_pk]\n```", "```java\n    PRIMARY KEY ([product_line],[code])\n```", "```java\n);\n```", "```java\n<strategy>\n```", "```java\n <matchers>\n```", "```java\n  <embeddables>\n```", "```java\n   <embeddable>\n```", "```java\n    <expression>.*_pk</expression>\n```", "```java\n    <recordClass>\n```", "```java\n     <expression>Embedded_$0_Record</expression>\n```", "```java\n     <transform>PASCAL</transform>\n```", "```java\n    </recordClass>\n```", "```java\n    <pojoClass>\n```", "```java\n     <expression>Embedded_$0</expression>\n```", "```java\n     <transform>PASCAL</transform>\n```", "```java\n    </pojoClass>\n```", "```java\n   </embeddable>\n```", "```java\n  </embeddables>\n```", "```java\n </matchers>\n```", "```java\n</strategy>\n```", "```java\nCREATE TABLE [product] (\n```", "```java\n  [product_line] VARCHAR(50) DEFAULT NULL,\n```", "```java\n  [code] BIGINT NOT NULL,\n```", "```java\n  ...\n```", "```java\n  CONSTRAINT [product_productline_fk]\n```", "```java\n    FOREIGN KEY ([product_line],[code]) \n```", "```java\n    REFERENCES [productline] ([product_line],[code])\n```", "```java\n);\n```", "```java\nCREATE TABLE [productlinedetail] (\n```", "```java\n  [product_line] VARCHAR(50) NOT NULL,\n```", "```java\n  [code] BIGINT NOT NULL,\n```", "```java\n  ...\n```", "```java\n  CONSTRAINT [productlinedetail_productline_fk]\n```", "```java\n    FOREIGN KEY ([product_line],[code]) \n```", "```java\n    REFERENCES [productline] ([product_line],[code])  \n```", "```java\n);\n```", "```java\nvar result = ctx.select(PRODUCTLINE.PRODUCT_LINE, \n```", "```java\n           PRODUCTLINE.CODE, PRODUCTLINE.CREATED_ON) ...\n```", "```java\n// Result<Record2<EmbeddedProductlinePkRecord, LocalDate>>\n```", "```java\nvar result = ctx.select(PRODUCTLINE.PRODUCTLINE_PK, \n```", "```java\n                        PRODUCTLINE.CREATED_ON)...\n```", "```java\n// '.get(0)' returns the first \n```", "```java\n// Record2<EmbeddedProductlinePkRecord, LocalDate>,\n```", "```java\n// while '.value1()' returns the EmbeddedProductlinePkRecord\n```", "```java\nresult.get(0).value1().getProductLine()\n```", "```java\nresult.get(0).value1().getCode()\n```", "```java\nList<EmbeddedProductlinePk> result =    \n```", "```java\n   ctx.select(PRODUCTLINE.PRODUCTLINE_PK)\n```", "```java\n      .from(PRODUCTLINE)\n```", "```java\n      .where(PRODUCTLINE.IMAGE.isNull())\n```", "```java\n      .fetchInto(EmbeddedProductlinePk.class);\n```", "```java\nvar result = ctx.selectFrom(PRODUCTLINE)\n```", "```java\n  .where(PRODUCTLINE.PRODUCTLINE_PK.in(\n```", "```java\n    new EmbeddedProductlinePkRecord(\"Classic Cars\", 599302L),\n```", "```java\n    new EmbeddedProductlinePkRecord(\"Vintage Cars\", 223113L)))\n```", "```java\n  .fetch();\n```", "```java\nvar result = ctx.select(PRODUCTLINE.PRODUCTLINE_PK,\n```", "```java\n              PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME)\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .join(PRODUCT)\n```", "```java\n   .on(PRODUCTLINE.PRODUCTLINE_PK.eq(\n```", "```java\n          PRODUCT.PRODUCT_PRODUCTLINE_FK))\n```", "```java\n   .fetch();\n```", "```java\nEmbeddedProductlinePkRecord pk = new \n```", "```java\n    EmbeddedProductlinePkRecord(\"Turbo Jets\", 908844L);\n```", "```java\nctx.update(PRODUCTLINE)\n```", "```java\n   .set(PRODUCTLINE.TEXT_DESCRIPTION, \"Not available\")\n```", "```java\n   .where(PRODUCTLINE.PRODUCTLINE_PK.eq(pk))\n```", "```java\n   .execute();\n```", "```java\nctx.deleteFrom(PRODUCTLINE)\n```", "```java\n   .where(PRODUCTLINE.PRODUCTLINE_PK.eq(pk))\n```", "```java\n   .execute();\n```", "```java\nctx.insertInto(PRODUCTLINE, PRODUCTLINE.PRODUCTLINE_PK, \n```", "```java\n               PRODUCTLINE.TEXT_DESCRIPTION)\n```", "```java\n   .values(pk, \"Some cool turbo engines\")\n```", "```java\n   .execute();\n```", "```java\nCREATE OR REPLACE VIEW \"customer_master\" AS\n```", "```java\nSELECT \"customerdetail\".\"city\",\n```", "```java\n       \"customerdetail\".\"country\",       \n```", "```java\n       \"customerdetail\".\"state\",\n```", "```java\n       \"customerdetail\".\"postal_code\",\n```", "```java\n       ...\n```", "```java\nFROM \"customer\"\n```", "```java\nJOIN \"customerdetail\" \n```", "```java\n  ON \"customerdetail\".\"customer_number\" =      \n```", "```java\n     \"customer\".\"customer_number\"\n```", "```java\nWHERE \"customer\".\"first_buy_date\" IS NOT NULL;\n```", "```java\nCREATE OR REPLACE VIEW \"office_master\" AS\n```", "```java\nSELECT \"office\".\"city\",\n```", "```java\n       \"office\".\"country\",\n```", "```java\n       \"office\".\"state\",\n```", "```java\n       \"office\".\"postal_code\",\n```", "```java\n       ... \n```", "```java\nFROM \"office\"\n```", "```java\nWHERE \"office\".\"city\" IS NOT NULL;\n```", "```java\nctx.select(CUSTOMER_MASTER.CUSTOMER_NAME, \n```", "```java\n           CUSTOMER_MASTER.CREDIT_LIMIT,  \n```", "```java\n           CUSTOMER_MASTER.CITY.as(\"customer_city\"), \n```", "```java\n           OFFICE_MASTER.CITY.as(\"office_city\"), \n```", "```java\n           OFFICE_MASTER.PHONE)\n```", "```java\n   .from(CUSTOMER_MASTER)\n```", "```java\n   .leftOuterJoin(OFFICE_MASTER)\n```", "```java\n   .on(row(CUSTOMER_MASTER.COUNTRY, CUSTOMER_MASTER.STATE, \n```", "```java\n           CUSTOMER_MASTER.CITY)\n```", "```java\n     .eq(row(OFFICE_MASTER.COUNTRY, OFFICE_MASTER.STATE,   \n```", "```java\n             OFFICE_MASTER.CITY)))\n```", "```java\n   .orderBy(CUSTOMER_MASTER.CUSTOMER_NAME)\n```", "```java\n   .fetch();\n```", "```java\n<database>\n```", "```java\n ...\n```", "```java\n <syntheticObjects>\n```", "```java\n  <primaryKeys>\n```", "```java\n   <primaryKey>\n```", "```java\n    <name>office_master_pk</name>\n```", "```java\n    <tables>office_master</tables>\n```", "```java\n    <fields>\n```", "```java\n     <field>country</field>\n```", "```java\n     <field>state</field>\n```", "```java\n     <field>city</field>\n```", "```java\n    </fields>\n```", "```java\n   </primaryKey>\n```", "```java\n  </primaryKeys>\n```", "```java\n  <foreignKeys>\n```", "```java\n   <foreignKey>\n```", "```java\n    <name>office_master_fk</name>\n```", "```java\n    <tables>customer_master</tables>\n```", "```java\n    <fields>\n```", "```java\n     <field>country</field>\n```", "```java\n     <field>state</field>\n```", "```java\n     <field>city</field>\n```", "```java\n    </fields>\n```", "```java\n    <referencedTable>office_master</referencedTable>\n```", "```java\n    <referencedFields>\n```", "```java\n     <field>country</field>\n```", "```java\n     <field>state</field>\n```", "```java\n     <field>city</field>\n```", "```java\n    </referencedFields>\n```", "```java\n   </foreignKey>\n```", "```java\n  </foreignKeys>\n```", "```java\n </syntheticObjects>\n```", "```java\n</database>\n```", "```java\nctx.select(CUSTOMER_MASTER.CUSTOMER_NAME, \n```", "```java\n           CUSTOMER_MASTER.CREDIT_LIMIT, \n```", "```java\n           CUSTOMER_MASTER.CITY.as(\"customer_city\"),\n```", "```java\n           OFFICE_MASTER.CITY.as(\"office_city\"), \n```", "```java\n           OFFICE_MASTER.PHONE)\n```", "```java\n   .from(CUSTOMER_MASTER)\n```", "```java\n   .leftOuterJoin(OFFICE_MASTER)\n```", "```java\n   .onKey()\n```", "```java\n   .orderBy(CUSTOMER_MASTER.CUSTOMER_NAME)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(CUSTOMER_MASTER.CUSTOMER_NAME, \n```", "```java\n        CUSTOMER_MASTER.CREDIT_LIMIT, \n```", "```java\n        CUSTOMER_MASTER.CITY.as(\"customer_city\"),\n```", "```java\n        CUSTOMER_MASTER.officeMaster().CITY.as(\"office_city\"), \n```", "```java\n        CUSTOMER_MASTER.officeMaster().PHONE)\n```", "```java\n   .from(CUSTOMER_MASTER)\n```", "```java\n   .orderBy(CUSTOMER_MASTER.CUSTOMER_NAME)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(OFFICE_MASTER.OFFICE_CODE, OFFICE_MASTER.PHONE)\n```", "```java\n   .from(OFFICE_MASTER)\n```", "```java\n   .where(row(OFFICE_MASTER.COUNTRY, OFFICE_MASTER.STATE, \n```", "```java\n          OFFICE_MASTER.CITY).in(\n```", "```java\n      row(\"USA\", \"MA\", \"Boston\"),\n```", "```java\n      row(\"USA\", \"CA\", \"San Francisco\")))\n```", "```java\n   .fetch();\n```", "```java\n<embeddablePrimaryKeys>\n```", "```java\n office_master_pk\n```", "```java\n</embeddablePrimaryKeys>\n```", "```java\nctx.select(OFFICE_MASTER.OFFICE_CODE, OFFICE_MASTER.PHONE)\n```", "```java\n   .from(OFFICE_MASTER)\n```", "```java\n   .where(OFFICE_MASTER.OFFICE_MASTER_PK.in(\n```", "```java\n     new OfficeMasterPkRecord(\"USA\", \"MA\", \"Boston\"),\n```", "```java\n     new OfficeMasterPkRecord(\"USA\", \"CA\", \"San Francisco\")))\n```", "```java\n   .fetch();\n```", "```java\nList<OfficeMasterPk> result = \n```", "```java\n   ctx.select(OFFICE_MASTER.OFFICE_MASTER_PK)\n```", "```java\n      .from(OFFICE_MASTER)\n```", "```java\n      .where(OFFICE_MASTER.OFFICE_CODE.eq(\"1\"))\n```", "```java\n      .fetchInto(OfficeMasterPk.class);\n```", "```java\nctx.select(CUSTOMER_MASTER.CUSTOMER_NAME, ...)\n```", "```java\n   .from(CUSTOMER_MASTER)\n```", "```java\n   .innerJoin(OFFICE_MASTER)\n```", "```java\n     .on(OFFICE_MASTER.OFFICE_MASTER_PK\n```", "```java\n       .eq(CUSTOMER_MASTER.OFFICE_MASTER_FK))\n```", "```java\n   .orderBy(CUSTOMER_MASTER.CUSTOMER_NAME)\n```", "```java\n   .fetch();\n```", "```java\nctx.update(OFFICE_MASTER)\n```", "```java\n   .set(OFFICE_MASTER.PHONE, \"+16179821809\")\n```", "```java\n   .where(OFFICE_MASTER.OFFICE_MASTER_PK.eq(\n```", "```java\n       new OfficeMasterPkRecord(\"USA\", \"MA\", \"Boston\")))\n```", "```java\n   .execute();\n```", "```java\nUniqueKey<OfficeMasterRecord> OFFICE_MASTER_PK = ...\n```", "```java\nForeignKey<CustomerMasterRecord, OfficeMasterRecord>\n```", "```java\n             CUSTOMER_MASTER__OFFICE_MASTER_FK = ...\n```", "```java\nCustomerMasterRecord cmr = ctx.selectFrom(CUSTOMER_MASTER)\n```", "```java\n .where(CUSTOMER_MASTER.CUSTOMER_NAME\n```", "```java\n  .eq(\"Classic Legends Inc.\")).fetchSingle();      \n```", "```java\nOfficeMasterRecord parent = cmr.fetchParent(\n```", "```java\n Keys.CUSTOMER_MASTER__OFFICE_MASTER_FK);\n```", "```java\nList<CustomerMasterRecord> children =  \n```", "```java\n parent.fetchChildren(Keys.CUSTOMER_MASTER__OFFICE_MASTER_FK);\n```", "```java\n<syntheticObjects>\n```", "```java\n <uniqueKeys>\n```", "```java\n  <uniqueKey>\n```", "```java\n   <name>office_master_uk</name>\n```", "```java\n   <tables>office_master</tables>\n```", "```java\n   <fields>\n```", "```java\n    <field>postal_code</field>\n```", "```java\n   </fields>\n```", "```java\n  </uniqueKey>\n```", "```java\n </uniqueKeys>\n```", "```java\n <foreignKeys>\n```", "```java\n  <foreignKey>\n```", "```java\n   <name>customer_office_master_fk</name>\n```", "```java\n   <tables>customer_master</tables>\n```", "```java\n   <fields>\n```", "```java\n    <field>postal_code</field>\n```", "```java\n   </fields>\n```", "```java\n   <referencedTable>office_master</referencedTable>\n```", "```java\n   <referencedFields>\n```", "```java\n    <field>postal_code</field>\n```", "```java\n   </referencedFields>\n```", "```java\n  </foreignKey>\n```", "```java\n </foreignKeys>\n```", "```java\n</syntheticObjects>\n```", "```java\nCREATE TABLE \"product\" (\n```", "```java\n  \"product_id\" BIGINT\n```", "```java\n               NOT NULL DEFAULT NEXTVAL ('\"product_seq\"'),\n```", "```java\n  …\n```", "```java\n  \"product_id\" BIGINT GENERATED BY DEFAULT AS IDENTITY \n```", "```java\n                     (START WITH 10 INCREMENT BY 10),\n```", "```java\n  CONSTRAINT \"product\"pk\" PRIMARY KEY (\"product_id\"),\n```", "```java\n  ...\n```", "```java\n) ;\n```", "```java\nvar result = ctx.insertInto(PRODUCT)\n```", "```java\n  .set(PRODUCT.PRODUCT_LIN\", \"Vintage Cars\")\n```", "```java\n  .set(PRODUCT.CODE, 223113L)\n```", "```java\n  .set(PRODUCT.PRODUCT_NAME, \"Rolls-Royce Dawn Drophead\")\n```", "```java\n  .returningResult(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_UID)\n```", "```java\n  .fetch();\n```", "```java\nresult.get(0).value1(); // valid primary key (PRODUCT_ID)\n```", "```java\nresult.get(0).value2(); // valid identity key (PRODUCT_UID)\n```", "```java\nProductRecord pr = ctx.newRecord(PRODUCT);\n```", "```java\npr.setProductLine(\"Classic Cars\");\n```", "```java\npr.setCode(599302L);\n```", "```java\npr.setProductName(\"1967 Chevrolet Camaro RS\");\n```", "```java\npr.insert();\n```", "```java\npr.getProductId();  // valid primary key (PRODUCT_ID)\n```", "```java\npr.getProductUid(); // valid identity key (PRODUCT_UID) WOW!\n```", "```java\nCREATE TABLE product (\n```", "```java\n  product_id NUMBER(10) DEFAULT product_seq.nextval \n```", "```java\n                        NOT NULL,\n```", "```java\n  ...\n```", "```java\n  product_uid NUMBER(10) DEFAULT product_uid_seq.nextval \n```", "```java\n                        NOT NULL,\n```", "```java\n  CONSTRAINT product_pk PRIMARY KEY (product_id),\n```", "```java\n  ...\n```", "```java\n);\n```", "```java\nCREATE SEQUENCE product_seq START WITH 1000000 INCREMENT BY 1;\n```", "```java\nCREATE SEQUENCE product_uid_seq START WITH 10 INCREMENT BY 10;\n```", "```java\n<syntheticObjects>\n```", "```java\n <identities>\n```", "```java\n  <identity>\n```", "```java\n   <tables>product</tables>\n```", "```java\n   <fields>product_uid</fields>\n```", "```java\n  </identity>\n```", "```java\n </identities>\n```", "```java\n</syntheticObjects>\n```", "```java\n<database>\n```", "```java\n …\n```", "```java\n <!-- Prepare the synthetic keys -->\n```", "```java\n <syntheticObjects>                                \n```", "```java\n  <columns>\n```", "```java\n   <column>\n```", "```java\n    <name>REFUND_AMOUNT</name>                                        \n```", "```java\n    <tables>BANK_TRANSACTION</tables>\n```", "```java\n    <type>DECIMAL(10,2)</type>\n```", "```java\n   </column>                                     \n```", "```java\n  </columns>\n```", "```java\n </syntheticObjects> \n```", "```java\n <!-- Now tell the code generator \n```", "```java\n      how to compute the values -->\n```", "```java\n <forcedTypes>\n```", "```java\n  <forcedType>\n```", "```java\n   <generator>\n```", "```java\n    ctx -> payment().INVOICE_AMOUNT.minus(\n```", "```java\n           DSL.sum(TRANSFER_AMOUNT))\n```", "```java\n   </generator>\n```", "```java\n   <includeExpression>REFUND_AMOUNT</includeExpression>\n```", "```java\n  </forcedType>                                        \n```", "```java\n </forcedTypes>  \n```", "```java\n</database>\n```", "```java\n<database>\n```", "```java\n <!-- Tell the code generator how to \n```", "```java\n      compute the values for an existing column -->\n```", "```java\n <forcedTypes>\n```", "```java\n  <forcedType>\n```", "```java\n   <generator>\n```", "```java\n     ctx -> DSL.concat(OFFICE.COUNTRY, DSL.inline(“, “), \n```", "```java\n            OFFICE.STATE, DSL.inline(“, “), OFFICE.CITY)\n```", "```java\n   </generator>\n```", "```java\n   <includeExpression>\n```", "```java\n    OFFICE.ADDRESS_LINE_FIRST\n```", "```java\n   </includeExpression>\n```", "```java\n  </forcedType>                                                          \n```", "```java\n </forcedTypes>  \n```", "```java\n</database>\n```", "```java\nCREATE TABLE \"customer\" (\n```", "```java\n  \"customer_number\" BIGINT NOT NULL \n```", "```java\n                         DEFAULT NEXTVAL ('\"customer_seq\"'),\n```", "```java\n  \"customer_name\" VARCHAR(50) NOT NULL, \n```", "```java\n  ... \n```", "```java\n  CONSTRAINT \"customer_pk\" PRIMARY KEY (\"customer_number\"), \n```", "```java\n  CONSTRAINT \"customer_name_uk\" UNIQUE (\"customer_name\") \n```", "```java\n  ... \n```", "```java\n); \n```", "```java\nCREATE TABLE \"department\" ( \n```", "```java\n  \"department_id\" SERIAL NOT NULL, \n```", "```java\n  \"code\" INT NOT NULL, \n```", "```java\n  ... \n```", "```java\n  CONSTRAINT \"department_pk\" PRIMARY KEY (\"department_id\"), \n```", "```java\n  CONSTRAINT \"department_code_uk\" UNIQUE (\"code\") \n```", "```java\n  ... \n```", "```java\n);\n```", "```java\nCustomerRecord cr = ctx.selectFrom(CUSTOMER)\n```", "```java\n  .where(CUSTOMER.CUSTOMER_NAME.eq(\"Mini Gifts ...\"))\n```", "```java\n  .fetchSingle();\n```", "```java\ncr.setPhone(\"4159009544\");\n```", "```java\ncr.store();   \n```", "```java\nDepartmentRecord dr = ctx.selectFrom(DEPARTMENT)\n```", "```java\n  .where(DEPARTMENT.DEPARTMENT_ID.eq(1))\n```", "```java\n  .fetchSingle();\n```", "```java\ndr.setTopic(new String[] {\"promotion\", \"market\", \"research\"});\n```", "```java\ndr.store();\n```", "```java\nUPDATE \"public\".\"customer\" SET \"phone\" = ?\n```", "```java\nWHERE \"public\".\"customer\".\"customer_number\" = ?\n```", "```java\nUPDATE \"public\".\"department\" SET \"topic\" = ?::text[]\n```", "```java\nWHERE (\"public\".\"department\".\"name\" = ?\n```", "```java\n       AND \"public\".\"department\".\"phone\" = ?)\n```", "```java\n<syntheticObjects>\n```", "```java\n <primaryKeys>\n```", "```java\n  <primaryKey>\n```", "```java\n   <name>synthetic_department_pk</name>\n```", "```java\n   <tables>department</tables>\n```", "```java\n   <fields>\n```", "```java\n    <field>name</field>\n```", "```java\n    <field>phone</field>\n```", "```java\n   </fields>\n```", "```java\n  </primaryKey>\n```", "```java\n </primaryKeys>\n```", "```java\n</syntheticObjects>\n```", "```java\n<syntheticObjects>\n```", "```java\n <primaryKeys>\n```", "```java\n  <primaryKey>\n```", "```java\n   <name>synthetic_customer_name</name>\n```", "```java\n   <tables>customer</tables>\n```", "```java\n   <fields>\n```", "```java\n    <field>customer_name</field>\n```", "```java\n   </fields>\n```", "```java\n  </primaryKey>\n```", "```java\n  <primaryKey>\n```", "```java\n   <name>synthetic_department_code</name>\n```", "```java\n   <tables>department</tables>\n```", "```java\n   <fields>\n```", "```java\n    <field>code</field>\n```", "```java\n   </fields>\n```", "```java\n  </primaryKey>\n```", "```java\n </primaryKeys>\n```", "```java\n</syntheticObjects>\n```", "```java\nUPDATE \"public\".\"customer\" SET \"phone\" = ?\n```", "```java\nWHERE \"public\".\"customer\".\"customer_name\" = ?\n```", "```java\nUPDATE \"public\".\"department\" SET \"topic\" = ?::text[]\n```", "```java\nWHERE \"public\".\"department\".\"code\" = ?\n```"]