- en: Chapter 2. Running WildFly in Standalone Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly from a custom configuration folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding WildFly onto a custom port
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binding WildFly onto a custom IP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring multiple WildFly instances to run on the same machine with different
    ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring multiple WildFly instances to run on the same machine with different
    IPs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing applications using the deployments folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the server-state via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying an application via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Undeploying an application via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing commands in batch mode via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reloading a server configuration via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shutting down and restarting an instance via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suspending and resuming an instance via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backing up your configuration file via the CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to manage WildFly running in the standalone
    mode. First we will discuss which profile fits our needs, and then we will cover
    how to run WildFly with a specific configuration file, navigate through the Web
    Console, and the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: You will also learn how to get multiple WildFly instances running on the same
    machine, both with different ports and IPs, in case you have only one network
    interface. You will learn how to connect to the CLI, retrieve server information,
    reload server configuration, and shut down, deploy, and undeploy an application.
  prefs: []
  type: TYPE_NORMAL
- en: Running WildFly from a custom configuration folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to run WildFly from a custom configuration
    folder. This can be handy if you want to use the same WildFly installation folder,
    but run two or more WildFly instances with different configurations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What you have to do is to just copy the `standalone` folder to a path of your
    choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'That''s it! Now just run WildFly as usual, specifying your configuration folder
    by passing the `-Djboss.server.base.dir` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On specification of a different `jboss.server.base.dir` directory, WildFly tries
    to pick up the `standalone.xml` file from the expected folder. In fact, your configuration
    path has to maintain the same folder structure. WildFly lets you override different
    paths, in case you need to.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a table summarizing all such paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Property name | Usage | Default value |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `java.ext.dirs` | The JDK extension directory paths | Null |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.home.dir` | The root directory of the WildFly installation | Set by
    `standalone.sh to $JBOSS_HOME` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.base.dir` | The base directory for server content | `jboss.home.dir/standalone`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.config.dir` | The base configuration directory | `jboss.server.base.dir/configuration`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.data.dir` | The directory used for persistent data file storage
    | `jboss.server.base.dir/data` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.log.dir` | The directory containing the `server.log` file |
    `jboss.server.base.dir/log` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.temp.dir` | The directory used for temporary file storage |
    `jboss.server.base.dir/tmp` |'
  prefs: []
  type: TYPE_TB
- en: '| `jboss.server.deploy.dir` | The directory used to store the deployed content
    | `jboss.server.data.dir/content` |'
  prefs: []
  type: TYPE_TB
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Furthermore, you can use a different configuration file by specifying it via
    the `--server-config` directive, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Binding WildFly onto a custom port
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why would you bind WildFly onto a custom port? This is because you might have
    a different service running on the same IP:PORT (that is, another WildFly or JBoss
    instance, Tomcat, or GlassFish).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Just open your command line and launch your WildFly standalone instance as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you can change the port using either the Web Console or the CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Web Console
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Point your browser to the following address: `http://127.0.0.1:8080/console`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log in by entering the credentials specified in [Chapter 1](ch01.html "Chapter 1. Welcome
    to WildFly!"), *Welcome to WildFly!* while adding the management user; we entered
    `wildfly` as the username and `cookbook.2015` as the password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Configuration** tab and select from the menu on the left side under
    general configuration, the voice **Socket Binding**, and select **View** as shown
    in the following screenshot:![Using the Web Console](img/3744_02_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `http` property and scroll down the page to edit the port number,
    as shown in the following screenshot:![Using the Web Console](img/3744_02_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, change the port number from `8080` to `9080` and click on the button labeled
    **Save**. You will be notified, but the GUI will denote that the update was successful
    and that a server reload is required to take advantage of the new changes.![Using
    the Web Console](img/3744_02_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Runtime** tab. You should see a button labeled **Reload**, click
    on it and confirm, as shown in the following screenshot:![Using the Web Console](img/3744_02_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open your Web Console using the new port number as follows: `http://localhost:9080/console`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the CLI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a different terminal, connect to the CLI and do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You are disconnected at the moment; type `connect` to connect to the server
    or `help` for the list of supported commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Actually there is another method to change the port number, which is by passing
    `standalone.sh`, a Java parameter (which starts with a capital "D") as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will match the property named `http` specified in the `socket-binding`
    tag, for the attribute `port` in `standalone.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are coming from JBoss AS 5 or 6, you might have used `port-offset`, which
    still changes the port number by adding the offset to the default value (which
    is `8080`), but also changes other port numbers. In WildFly, it would also change
    the management port.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we specify the port-offset to `1000` as follows :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We would end up with WildFly listening on port 9080 (that is, 8080+1000) and
    the WildFly management port would be 10990 (that is, 9090+1000).
  prefs: []
  type: TYPE_NORMAL
- en: Binding WildFly onto a custom IP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As for the port number, you might want to bind WildFly to an address different
    from the default one; for example, your public IP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To achieve this kind of customization, you can use both the Web Console and
    the CLI. Nevertheless, it is common to have SSH access to the servers running
    WildFly, or worse (better for security reasons), you might have SSH on different
    servers before landing on the WildFly one. In this case, you will only be able
    to use the CLI, that's why from now on we will mainly use the CLI to manage the
    server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting used to the CLI will give you a deeper knowledge of WildFly's configuration
    setting and it will be more mnemonic so you won't forget it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s change the IP address as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you look at `standalone.xml`, you will notice properties within the following
    `{}` and preceded by the dollar sign `$`. This property will be replaced by the
    value of the namesake parameter, specified when launching the server with the
    script.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Furthermore, the same logic applies when you want to modify the management interface
    address. In that case, you will have to pass the `jboss.bind.address.management`
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, both parameters can be specified with shortcuts, such as `-b 10.0.0.1`
    for the `jboss.bind.address` parameter, and `-bmanagement 10.0.0.1` for the `jboss.bind.address.management`.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring multiple WildFly instances to run on the same machine with different
    ports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, mostly because of architectural reasons, you may need to run
    multiple WildFly instances on a single server. You can do this by isolating each
    instance and giving it a different binding port.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we need to create a standalone configuration for each instance
    that we want to set up and run. All we need to do is replicate the concept explained
    in the *Running WildFly from a custom configuration folder* recipe. Suppose we
    want two running nodes/instances, we use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to configure each instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To achieve such a requirement, you can use either of the methods explained earlier
    in the *Binding WildFly on a custom port* recipe. Let's take a look at each of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Using jboss.http.port
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first thing to try is to run the two WildFly instances by passing the parameter
    `jboss.http.port`, obviously with different values. Actually, one of them could
    have the default value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are going to run another WildFly instance by passing a different `jboss.http.port`
    parameter in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Ouch! Something went wrong!
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see from the log, `http-interface` couldn''t start properly because
    of the **Address already in use** message. This is because we changed `jboss.http.port`,
    but not the analogous one for the management interface, which is `http-interface`
    defined in `standalone.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using jboss.http.port](img/3744_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '"http-interface" defined in the standalone.xml'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every standalone instance has its own management interface, thus we need to
    change its binding as well. Let''s fix it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'There you go! Now if you check the open sockets at the OS level, filtering
    by the java process, you will see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using jboss.http.port](img/3744_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using jboss.socket.binding.port-offset
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Okay, let''s try using the `port-offset` directive:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is keyed in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'As you have noticed, both servers start up regularly without any additional
    configuration or precaution. Lastly, just check the socket at the OS level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using jboss.socket.binding.port-offset](img/3744_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the `jboss.socket.binding.port-offset` directive facilitates all configuration
    needs, in contrast to every single configuration update needed when using `jboss.http.port`.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, with WildFly, you could benefit even more by using the `port-offset`
    configuration, as you would also need to adjust the remoting socket.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring multiple WildFly instances to run on the same machine with different
    IPs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, mostly due to architectural reasons, you may need to run multiple
    WildFly instances on a single server. You can do this by isolating each instance
    and giving it different binding IPs. The IPs might be virtual or effectively provided
    by the physical network interfaces installed on your system. Either way is good.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you decide on virtual IPs, you can do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here `YOUR_NIC` might be `eth0`. Now, if you list all the available interfaces
    in your server, you will also see the following new ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, we need to create a standalone configuration for each instance
    that we want to set up and run. If you have already done so from the previous
    recipe (*Configuring multiple WildFly instances to run on the same machine with
    different ports*), you can jump to the *How to do it...* section. Otherwise, all
    we need to do is replicate the concept explained in the *Binding WildFly onto
    a custom IP* recipe. Suppose we want two running nodes/instances, the command
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now we are ready to configure each instance.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a terminal window and type in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Ouch! Another fail!
  prefs: []
  type: TYPE_NORMAL
- en: What's wrong now? Pretty much the same thing we had in the previous recipe.
    We didn't change any binding parameter (IP address or port number) for the management
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a matter of fact, as you can see from the log of the `node-1` instance,
    the management and HTTP interface are bound to the local address, which is the
    default one. Thus, the `node-2` instance will have the same settings, hence the
    error: **Address already in use**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s fix this error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following in a different terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'There you go! We have two WildFly instances running at the same time, each
    using a dedicated IP, even if they are both using the same PORT. Let''s check
    it at OS level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/3744_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you have noticed in this recipe and in the previous one, we can customize
    the WildFly binding relative to the IP address and port number, both for the service
    components (which is your application) and the management components (which are
    the Admin Console and the CLI).
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, we can even mix customization and thus change both the IP and the
    port, and change the port number for the service components and the IP address
    for the management interface. You can do whatever you want as long as you don't
    make equals binding.
  prefs: []
  type: TYPE_NORMAL
- en: A typical configuration has the services components bound to a public interface
    (that is, an IP address that's visible externally) and the management interface
    bound to a private interface (that is, an IP address that's only visible locally
    or within your network).
  prefs: []
  type: TYPE_NORMAL
- en: Managing applications using the deployments folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After configuring and customizing the WildFly standalone, it's time to deploy
    our first application. WildFly provides a lot of methods to deploy applications,
    one of them being via the deployment scanner (well known to those of you who come
    from the JBoss AS version). Basically, all you need to do is to copy your artifact
    into the `deployments` folder of your standalone instance.
  prefs: []
  type: TYPE_NORMAL
- en: In a production environment, you had better turn off the deployment scanner
    to avoid replacing a deployment accidentally—you would be in very big trouble.
    Do use the proper "deploy" operation using either the CLI or the Admin Console.
    We will see both in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we will need a Java web application. If you want, you can use
    one of my projects from my GitHub account, at the following address: [https://github.com/foogaro/wildfly-cookbook.git](https://github.com/foogaro/wildfly-cookbook.git).'
  prefs: []
  type: TYPE_NORMAL
- en: You can `git-clone` the repository or just download it as a ZIP archive. Either
    way, create a folder named `github` into the `WFC` folder, and place the source
    into it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `git-clone` command, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once `git` has done with cloning the repo, you can find a project called `example`.
    To compile the project, do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding commands compile the project and generate the web application
    artifact into a folder named `target`. There you can find the application `example.awar`,
    ready to be deployed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is also the official WildFly quickstarts repository, which has plenty
    of precious resources to look at, and it is also available for contribution at
    the following address: [https://github.com/wildfly/quickstart](https://github.com/wildfly/quickstart).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, assume that we are going to use the default `standalone` folder as the
    base configuration path of our instance. To see everything in action, it's better
    to first run WildFly and then start managing the application itself using the
    `deployments` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s start up WildFly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now keeping your terminal windows visible, open your favorite file manager tool,
    and copy `example.war` into the `deployments` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Alternatively, you can copy the web application using a new terminal, using
    the following command:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'A few seconds later (the timer interval is set for every 5 seconds, so you
    may wait a few milliseconds or 5 seconds), we''ll get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And you should also get a new file in the `deployments` folder named `example.war.deployed`.
    This is a marker saying that the application has been successfully deployed. In
    case of an error, any operation would have been rolled back and a new file named
    `example.war.failed` would have been created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, can you guess how to undeploy it? Yes... rename the marker file extension
    with `.undeploy` as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And in the `deployments` folder, a new file named `example.war.undeployed` has
    been created. How do we redeploy it now? Delete the two marker files, or create
    a new one named `example.war.dodeploy`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To recap what we''ve learned so far, marker files always have the same name
    as the application plus the suffix. The following table summarizes all the available
    markers:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Suffix | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `.dodeploy` | User generated to indicate that the given content should be
    deployed. |'
  prefs: []
  type: TYPE_TB
- en: '| `.skipdeploy` | User generated to indicate that the given content should
    skip auto-deploy as long as the file is present. This allows you to modify the
    exploded content without having the scanner initiate redeploy in the middle of
    the update. Same is true for zipped content. |'
  prefs: []
  type: TYPE_TB
- en: '| `.isdeploying` | Placed by the deployment scanner service to indicate that
    it has noticed a `.dodeploy` file or new or updated auto-deploy mode content and
    is in the process of deploying the content. This marker file will be deleted when
    the deployment process completes, so you may not see it for small size artifacts.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.deployed` | Placed by the deployment scanner service to indicate that the
    given content has been deployed. If you delete this file, the content will be
    undeployed. |'
  prefs: []
  type: TYPE_TB
- en: '| `.failed` | Placed by the deployment scanner service to indicate that the
    given content has failed in its deploying process. In the file, you will find
    information about what went wrong during deployment. Note that with auto-deploy
    mode, removing this file will make the deployment eligible for deployment again.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `.isundeploying` | Placed by the deployment scanner service to indicate that
    it has noticed that a `.deployed` file has been deleted and the content is being
    undeployed. This marker file will be deleted when the undeployment process completes,
    so you may not see it for small size artifacts. |'
  prefs: []
  type: TYPE_TB
- en: '| `.undeployed` | Placed by the deployment scanner service to indicate that
    the given content has been undeployed. If you delete this file, there will be
    no impact at all. |'
  prefs: []
  type: TYPE_TB
- en: '| `.pending` | Placed by the deployment scanner service to indicate that it
    has noticed the need to deploy content but has not yet instructed the server to
    deploy it.This file is created if the scanner detects that some auto-deploy content
    is still in the process of being copied or if there is some problem that prevents
    auto-deployment. The scanner will not instruct the server to deploy or undeploy
    any content (not just the directly affected content) as long as this condition
    holds. |'
  prefs: []
  type: TYPE_TB
- en: Connecting to the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three ways to manage your WildFly, that is, by editing the XML file,
    the Console and the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, editing the XML directly can be error-prone, as it can waste you
    precious seconds; moreover, every change requires a server restart.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Console gives you visual editing features, but it's not complete. The Web
    Console can perform just a subset of all the available actions that you can execute
    using the CLI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CLI stands for Command Line Interface, and it is a tool that you are recommended
    to use to manage your WildFly application server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why the CLI? Most of the time, for security reasons, you connect to enterprise
    environments via SSH and are thus not able to see the Web Console at all. CLI
    WildFly comes in handy for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'CLI is a powerful tool that gives you full control over WildFly; you can deploy
    and undeploy applications, create and manage data sources, manage logging, change
    system properties, stop and start instances, and more. Working with the CLI also
    helps you understand the WildFly core logic so you can really become an expert
    WildFly administrator. Nevertheless, if you really want a GUI as well, you can
    have the CLI in GUI version; just execute the following command while you have
    your WildFly running:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot depicts the CLI GUI tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Connecting to the CLI](img/3744_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: CLI GUI tool
  prefs: []
  type: TYPE_NORMAL
- en: Now, it's time to play around with the CLI. Let's see what you can do!
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the CLI is a management tool, you will need to have your WildFly instance
    up and running. In this case too, we will use the default standalone configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window and start WildFly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s open a terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once in, we need to connect to the running instance. By typing the command `connect`,
    the tool connects to the instance with the default parameters, which is `localhost:9990`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also connect to the CLI directly from the command line by passing the
    --connect parameter as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From now on, we will connect directly to the CLI without having to connect to
    it from the inside.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now try the command listing `ls` (as you would do in Linux):![How to do it…](img/3744_02_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list command gives you all the components that you can operate on, pretty
    much what you can see editing the `standalone.xml`. In fact, listing the subsystems,
    you will see all the subsystems present declared in `standalone.xml`:![How to
    do it…](img/3744_02_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember that the *Tab* key on your keyboard is your friend. If you don't remember
    a command, just hit *Tab*. If you don't remember how to complete a command, just
    hit *Tab*. Hitting the *Tab* key will show all the possible solutions within your
    current context.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two others special characters within the CLI: `/` (the forward slash)
    and `:` (the colon). The forward slash is used to navigate through the contexts,
    while the colon is used to invoke method operation within the last selected context.
    Check the next recipe for an example.'
  prefs: []
  type: TYPE_NORMAL
- en: Checking the server-state via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to check the server status. WildFly may have
    different status depending on its phase: starting, stopping, started, and stopped.
    Sometimes, just checking its status at the OS level by looking for its process
    might not be enough.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the CLI is a management tool, you will need to have your WildFly instance
    up and running. Also for this recipe, we will rely on the default standalone configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window and start WildFly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In a new terminal window, type in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you connect to the host-controller, you are just in the root of your configuration.
    Thus, you can invoke an operation on it, and to do that, you need to start with
    the `:` (colon) symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example we used the `read-attribute` method, but you could have any
    of the available ones. To see them is as easy as hitting the *Tab* key right after
    the colon symbol, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Getting back to our server state, we received two responses: one saying that
    our invocation was successful, and the second one reporting the result, **running**.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying an application via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy an application using the CLI. Here
    we will use just the basic options but keep in mind that you have several options
    during deployments, which we will analyze deeply in the chapter dedicated to the
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, and in the following one as well, we will need an application
    to test our configuration. For this recipe, we will need the application named
    `example` that you can find in my GitHub repository. If you skipped the *Managing
    applications using the deployments folder* recipe, please refer to it to download
    the source code and the projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With your WildFly instance up and running, open up a terminal and connect to
    the CLI as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to tell the CLI to deploy our application as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And let''s have a look at the `server.log` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s check it for deployment from the CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I emphasized a log line to take your attention. As you can see, WildFly automatically
    saves its artifacts into its `data/content` folder. In that folder, you will find
    a lot of folders with hashed names that contain the artifact. The artifact is
    then renamed as `content`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to see the `content` file information using the `unzip` command,
    you will find your artifact structure as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also deploy an artifact disabled, with status stopped, and enable it
    at your convenience as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This will just add the artifact into the `data/content` folder of WildFly in
    your running-mode, to enable it later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: There is also a reference to the deployment inside the `standalone.xml` configuration
    file; open it and scroll down to the end.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more…](img/3744_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Standalone.xml updated after a deploy
  prefs: []
  type: TYPE_NORMAL
- en: Yes, you will find the `name` and the `runtime-name` along with the hash. In
    the *How it works...* section, I showed you where the deployment really persists,
    and in that case, it was stored into the `$WILDFLY_HOME/standalone/data/content/`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Did you notice it? The first two characters of the `sha1` value denote the first
    folder, the rest of the `sha1` hash is the subfolder that contains the artifact
    renamed as `content`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Getting the original deployment file can sometimes save your life, especially
    when dealing with a production environment, where last minute works are not "integrated"
    that much. Be safe with your backup.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at the `deployments` folder now. It's empty. That is because
    everything goes into the runtime `data/content` folder. Try to stop the instance
    and copy the `example.war` application into the `deployments` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now start the instance again. What do you get? Something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This is because you tried to deploy the same artifact twice, once using the
    CLI and once using the `deployment` folder. There is a listener called `deployment-scanner`
    that is triggered whenever you modify the content of the `deployment` folder.
    By the way, you can solve the preceding problem using the CLI, or by removing
    the auto-generated XML code into `standalone.xml` and leaving the artifact in
    the `deployments` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Undeploying an application via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to undeploy an application using the CLI.
    As per the `deploy` command, we will use just the basic available options. We
    will analyze the `undeploy` command deeply, later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe follows the previous one, which is *Deploying an application via
    CLI*. This means that we will find the `example` application ready to be `undeployed`.
    If you skipped the previous recipe, follow the instructions that it provides,
    or alternatively provide yourself with an application to undeploy.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With your WildFly instance up and running, open a terminal and connect to the
    CLI as usual:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to tell the CLI to undeploy our application as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And the `server.log` logs the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you did a copy and paste of the previous command, you wouldn't have noticed
    a helpful feature of the `undeploy` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can tell the CLI to list all the deployments first, so you can choose the
    right one to undeploy using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Executing commands in batch mode via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to invoke commands in the batch mode. Actually,
    you can declare and prepare a list of commands to execute, and execute them sequentially
    at once. The batch mode gives you consistency among your operations and configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Get our WildFly instance up and running; from the folder where we downloaded
    the GitHub repository, `WFC/github/wildfly-cookbook`, copy the `example.war` and
    `simple.war` applications into the `$JBOSS_HOME` folder and connect to the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you can find the applications, you probably need to compile the projects.
    I''ll show you how to do it for the `simple` application, and the same applies
    to the others. Open a terminal and do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to do the following operation in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: Deploy `example.war`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy `simple.war`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s go to the CLI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And the `server.log` logs the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Reloading a server configuration via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to reload the server configuration, without
    the need for a full restart. Often, there are changes that need the server to
    be reloaded. Most of the time you realize that a specific setting needs a different
    value just after a server startup or during tests. So, instead of stopping and
    starting the all application server, you can just reload the configuration, unless
    the change involves the JVM or settings that are needed at boot time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already seen how to reload a server while playing with IPs and port
    binding, but it's worth mentioning again.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command itself is pretty easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Basically, the `reload` command issues, in sequence, a `stop` for all the WildFly
    active services and a `start`, which starts up the services again. This should
    give you important information. The JVM remains the same. If you test the active
    process at the OS level before and after issuing the `reload` command, you will
    notice that the processes' IDs are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Last but not least, your CLI does not disconnect.
  prefs: []
  type: TYPE_NORMAL
- en: Shutting down and restarting an instance via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop a WildFly instance via the CLI, or
    alternatively, restart it via the CLI.The restart option is in contrast to the
    `reload` command of the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start up your WildFly so that we can directly connect to it via the CLI, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command itself is pretty easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding command stops everything and drops you off from the CLI. Hence,
    in case you need to restart your WildFly instance, you need to execute the `standalone.sh`
    script again, along with any parameter previously defined.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Alternatively, if what you really need is a full stop and start, you can rely
    on the `--restart=true` option for the `shutdown` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before executing the `shutdown` command with the `restart` option, take note
    of the process ID (PID) of the WildFly instance, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Okay, now go back into the CLI and do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The first visible difference is that your CLI doesn''t disconnect. Now let''s
    go back to the terminal and list the available processes at the OS level, as done
    previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'This is probably the most important difference with the `reload` command. You
    get a completely new JVM, a different process ID at the OS level. The preceding
    command executed into the CLI completely shuts down the current instance and starts
    up a new one, as shown in the following log entries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Remember that the PID changes, so if you are monitoring your instance per PID,
    consider updating your monitoring tool/script as well!
  prefs: []
  type: TYPE_NORMAL
- en: Suspending and resuming an instance via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to suspend an instance without killing active
    requests. Once the running requests are completed, the next ones will not be accepted.
    This is a new feature available in WildFly 9.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To test this recipe, we will need the application named `grace` that you can
    find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe, please refer to it to download all the source
    code and the projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start up your WildFly so we can directly connect to it via the CLI, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, deploy the application `grace.war`. Once the application has been
    deployed, open it using a browser at the following URL `http://127.0.0.1:8080/grace`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will hit the `index.jsp` page which increments a counter and then sleeps
    for 10 seconds, just to simulate a long running request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While running, open a terminal window and connect to the CLI as usual. Once
    there, do as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, going back on the browser, your request should be done and you should see
    a page similar to the following one:![How to do it…](img/3744_02_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the other hand, to resume the instance, just invoke the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command itself is pretty easy. What you should know is what happens to
    the next user''s requests. The next user would get the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Obviously, you could handle the HTTP **503** code using a special page to warn
    the users about the technical problems due to the system's upgrade.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the WildFly logs you should catch the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `resume` command is pretty easy as well. What needs to be noticed is that
    the user will not lose his current and active session, which is a really great
    feature from the user's point of view.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the WildFly logs, you should catch the following entry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if you go back to the application and refresh the page, you should see
    the counter increasing from where it stopped, as depicted in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/3744_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Backing up your configuration file via the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to backup our configuration via the CLI. Essentially,
    the CLI backs up the `standalone.xml` file by copying it into the `snapshot`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start up your WildFly so that we can directly connect to it via the CLI, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command itself is pretty easy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: That's it! A backup of the `standalone.xml` file gets copied into the `snapshot`
    folder, named by prefixing the file with the current date and time.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always back up your configuration, especially when operating in a production
    environment.
  prefs: []
  type: TYPE_NORMAL
