- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a time when it seems there is no other topic but artificial intelligence,
    it may seem strange to write a book that gathers the key practices for writing
    good, maintainable, and, in a word, clean code. As I write this, tools are becoming
    well-known – perhaps they are already well-known – that assist the developer and
    help write code, suggesting how to complete the line of code they are writing
    or even writing some short methods. Opinions at the moment are very polarized,
    between those who fear becoming obsolete in a few weeks and those who believe
    their natural intelligence is superior to any artificial intelligence.
  prefs: []
  type: TYPE_NORMAL
- en: As often happens, we will probably find ourselves somewhere in the middle. While
    it’s true that AI can assist us in small, very specific tasks, analyzing small
    portions of code around the line we are writing and completing the work for us,
    there is still quite some time before it will write all the code for us, that
    is scalable, maintainable, and expandable, and without bugs – if that moment ever
    arrives, by the way. Writing good code involves making decisions that go beyond
    mere syntax and involve understanding the specific requirements and nuances of
    a given problem, which no AI can grasp.
  prefs: []
  type: TYPE_NORMAL
- en: Well-written code is clear, readable, and easy to understand. This is crucial
    for collaboration in a team, as other developers (or even yourself in the future)
    need to comprehend and modify the code. AI can assist in generating code, but
    it might not always produce code that is easy to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: Bugs are inevitable in software development. Writing clean and well-organized
    code can significantly ease the process of debugging. Clear code is easier to
    navigate, making it simpler to identify and fix issues. AI tools can help with
    debugging, but they may not catch every type of error or understand the specific
    logic of your code as well as a human can.
  prefs: []
  type: TYPE_NORMAL
- en: The technical skills of a programmer are still very important and will be for
    a long time; writing clean code and refactoring one’s codebase will be pivotal
    qualities, that will make us better and more valuable professionals.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is primarily for those who write code; we believe it is particularly
    useful for those who have been doing it for a short time, but even experienced
    professionals sometimes forget how to do certain things – or perhaps think that
    the context doesn’t allow for alternative approaches. We bring no secret recipes,
    no magic formula, just a compendium of the main techniques and tricks for refactoring
    your code, writing clean code, and above all, understanding if something is wrong
    and fixing it. We also try to avoid ending up in unpleasant situations with small
    adjustments to implement every day. All in one book.
  prefs: []
  type: TYPE_NORMAL
- en: Our job is very complex, much more than it seems, and this complexity is challenging
    to convey to those who don’t speak our slang; there are many aspects to consider,
    and there are several variables at play, both technical and not. Even after the
    end of a course of study, one often begins to face the world of work having to
    learn many other new things.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a book that I would have wanted when I started my career: a sort of
    map of a very vast and, for many, still unexplored territory.'
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B20912_01.xhtml#_idTextAnchor014), *What is Refactoring?*, starts
    with the fundamental concepts, explaining what is meant by refactoring and why
    it is important. Faced with many possible opportunities for refactoring, let’s
    learn to understand how to give each opportunity the right importance, i.e., which
    one to refactor first. We also understand when it is not necessary to refactor.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B20912_02.xhtml#_idTextAnchor042), *Good Coding Habits*, covers
    the topic of writing high-quality code by day-to-day habits. What is good code?
    What is bad code? We will delve into this and briefly explore the concept of clean
    code. We’ll talk about the SOLID principles of software design, and also about
    the importance of (not using) side effects and mutability and common causes of
    bad code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B20912_03.xhtml#_idTextAnchor070), *Code Smells*, is about the
    most frequent “red flags” that you can step into when going through your codebase;
    those red flags should immediately catch the eye of a professional. Recognizing
    them (and thus avoiding them) is a crucial part of our skills.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B20912_04.xhtml#_idTextAnchor095), *Testing*, is about the importance
    of the testing phase. Why is it important and why do you have to test as often
    as you can? We’ll learn about unit testing and how we can be sure that most of
    our codebase is covered by tests. We’ll go into Test Driven Development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B20912_05.xhtml#_idTextAnchor117), *Refactoring Techniques*,
    is an overview of the main “tricks” that we can adopt to get rid of the code smells
    we discovered in [*Chapter 3*](B20912_03.xhtml#_idTextAnchor070). We’ll learn
    to write better methods and move code when necessary; we’ll organize data and
    simplify both conditional logic and method calls. We’ll also discuss generalization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B20912_06.xhtml#_idTextAnchor150), *Metaprogramming*, is about...
    not writing code! In other terms, we can use well-tested and well-grounded frameworks
    and libraries to write the code for us, avoiding reinventing the wheel.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B20912_07.xhtml#_idTextAnchor161), *Static and Dynamic Analysis*,
    talks about how we can be sure we’re on the right path. The chapter delves into
    the concept of code analysis and program analysis, also exploring some tools that
    can be very useful in understanding how far we are from the quality threshold
    we want to set.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B20912_08.xhtml#_idTextAnchor183), *Crafting Quality Every Day*,
    tells us about the little and big actions that we can put in place during our
    day-to-day work routine. From code versioning to code formatting, from code reviews
    to pair programming, we can incorporate a lot of small but constant effort to
    keep our codebase clean and maintainable.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B20912_09.xhtml#_idTextAnchor217), *Mastering Software Architecture*,
    lifts our gaze and talks about the architecture of a software project. It explains
    what architecture is and what it is made of; it tells us about the main architectural
    patterns. Just as we did for individual pieces of code, we discussed which are
    the main architectural red flags to avoid.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code samples provided in this book are just code snippets, generic enough
    to be run with the most recent Java versions, provided by any vendor. All the
    most common operating systems (Windows, macOS, and Linux) will work. The build
    and dependency management tool used is Maven.
  prefs: []
  type: TYPE_NORMAL
- en: 'The suggested configuration is Java 17 and Apache Maven 3.8:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Java 17 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Maven 3.8 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: GitHub repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If there’s any errata, it will be updated in this GitHub repository: [https://github.com/PacktPublishing/Refactoring-in-Java](https://github.com/PacktPublishing/Refactoring-in-Java)'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “A parameterized SQL query is created using `PreparedStatement`,
    where `?` is a placeholder for the user input.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “We can see a **START** node, from which starts an edge that goes into a conditional
    node.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](http://customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright%40packt.com?subject=)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](mailto:authors.packtpub.com?subject=).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *Refactoring in Java*, we’d love to hear your thoughts! [Please
    click here to go straight to the Amazon review page for this book and share your
    feedback](https://packt.link/r/1805126636).
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B20912_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781805126638](https://packt.link/free-ebook/9781805126638)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Introduction to Refactoring'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will start by defining what is meant by “refactoring” and why it is an important
    practice in software development. We will also cover the benefits of refactoring
    and the situations in which it is appropriate to use it. We will delve into the
    specific areas of code that developers should consider refactoring, providing
    guidance on how to identify and prioritize areas for improvement.
  prefs: []
  type: TYPE_NORMAL
- en: Then we’ll cover the topic of writing high-quality code by day-to-day habits,
    which each professional should interiorize. We’re going to start by discussing
    what distinguishes good code from bad code and briefly explore the concept of
    clean code. Then we’ll delve into the SOLID principles of software design, the
    importance of (not using) side effects, mutability, and common causes of bad code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B20912_01.xhtml#_idTextAnchor014), *What is Refactoring?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B20912_02.xhtml#_idTextAnchor042), *Good Coding Habits*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
