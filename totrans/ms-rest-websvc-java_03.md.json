["```java\n[https://example.com/blog/posts/12](https://example.com/blog/posts/12 ) \n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-jpa</artifactId>\n</dependency> \n```", "```java\npublic interface ProductsApi {\n    ResponseEntity<ProductOutput> createOrUpdateProduct(String productId,\n        @Valid ProductInput productInput);\n    ResponseEntity<Void> deleteProduct(String productId);\n    ResponseEntity<ProductOutput> editProductDescription(String productId,\n        @Valid ProductDescriptionInput input);\n    ResponseEntity<ProductOutput> getProductById(String productId);\n    ResponseEntity<List<ProductOutput>> getProducts();\n} \n```", "```java\n@RestController\n@RequestMapping(\"/api/products\")\npublic class ProductsApiController implements ProductsApi {\n    private final ProductsQueryUseCase productsQueryUseCase;\n    private final ProductsCommandUseCase productsCommandUseCase;\n    private final ProductMapper productMapper;\n    public ProductsApiController(\n        ProductsQueryUseCase productsQueryUseCase,\n        ProductsCommandUseCase productsCommandUseCase,\n        ProductMapper productMapper) {\n    this.productsQueryUseCase = productsQueryUseCase;\n    this.productsCommandUseCase = productsCommandUseCase;\n    this.productMapper = productMapper;\n    }\n  ...\n} \n```", "```java\n@Mapper(componentModel = \"spring\")\npublic interface ProductMapper {\n    ProductOutput toProductOutput(Product product);\n} \n```", "```java\n @PutMapping(value = \"/{productId}\")\n    @Override\n    public ResponseEntity<ProductOutput> createOrUpdateProduct(\n        @PathVariable(\"productId\") @ValidSku String productId,\n        @Valid @RequestBody ProductInput productInput) {\n        final var product = productsCommandUseCase.createProduct(\n            productInput.toProduct(productId));\n        HttpStatus status = product.isNewProduct() ? HttpStatus.CREATED :\n            HttpStatus.OK;\n        return ResponseEntity.status(status)\n              .body(productMapper.toProductOutput(product.product()));\n     } \n```", "```java\n curl -X 'PUT' \\\n  'http://localhost:8080/api/products/AK21101' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Keyboard\",\n  \"description\": \"Ergonomic Keyboard\",\n  \"price\": 60\n}' \n```", "```java\nHTTP/1.1 201\nContent-Type: application/json\n{\n  \"name\": \"Keyboard\",\n  \"sku\": \"AK21101\",\n  \"description\": \"Ergonomic Keyboard\",\n  \"price\": 60.00\n} \n```", "```java\n@GetMapping\n@Override\npublic ResponseEntity<List<ProductOutput>> getProducts() {\n    final var products = productsQueryUseCase.getAllProducts()\n          .stream()\n          .map(productMapper::toProductOutput)\n          .toList();\n    return ResponseEntity.status(HttpStatus.OK)\n                .body(products);\n} \n```", "```java\ncurl -X 'GET' \\\n  'http://localhost:8080/api/products' \\\n  -H 'accept: application/json' \n```", "```java\nHTTP/1.1 200\nContent-Type: application/json\n[\n  {\n    \"name\": \"Keyboard\",\n    \"sku\": \"AK21101\",\n    \"description\": \"Ergonomic Keyboard\",\n    \"price\": 60.00\n  }\n] \n```", "```java\n@GetMapping(value = \"/{productId}\")\n@Override\npublic ResponseEntity<ProductOutput> getProductById(@PathVariable(\"productId\") String productId) {\n    final var product = productsQueryUseCase.getProductById(productId);\n    return ResponseEntity.status(HttpStatus.OK)\n            .body(productMapper.toProductOutput(product));\n} \n```", "```java\n curl -X 'GET' \\\n  'http://localhost:8080/api/products/AK21101' \\\n  -H 'accept: application/json' \n```", "```java\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"name\": \"Keyboard\",\n  \"sku\": \"AK21101\",\n  \"description\": \"Ergonomic Keyboard\",\n  \"price\": 60.00\n} \n```", "```java\n@DeleteMapping(value = \"/{productId}\")\n@Override\npublic ResponseEntity<Void> deleteProduct(@PathVariable(\"productId\") String productId) {\n    productsCommandUseCase.deleteProduct(productId);\n    return ResponseEntity.noContent().build();\n} \n```", "```java\n curl -X 'DELETE' \\\n  'http://localhost:8080/api/products/AK21101' \\\n  -H 'accept: */*' \n```", "```java\nHTTP/1.1 204 \n```", "```java\n@PatchMapping(value = \"/{productId}\")\n@Override\npublic ResponseEntity<ProductOutput> editProductDescription(@PathVariable(\"productId\") String productId,\n@RequestBody @Valid ProductDescriptionInput input) {\n    final var product = productsCommandUseCase.updateProductDescription(\n        productId, input.description());\n    return ResponseEntity.status(HttpStatus.OK)\n            .body(productMapper.toProductOutput(product));\n} \n```", "```java\n curl -X 'PATCH' \\\n  'http://localhost:8080/api/products/AK21101' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"description\": \"Ergonomic Keyboard 2.0\"\n}' \n```", "```java\nHTTP/1.1 200\nContent-Type: application/json\n{\n  \"name\": \"Keyboard\",\n  \"sku\": \"AK21101\",\n  \"description\": \"Ergonomic Keyboard 2.0\",\n  \"price\": 60.00\n} \n```", "```java\n@ControllerAdvice\npublic class GlobalExceptionHandler extends ResponseEntityExceptionHandler {\n    @ExceptionHandler(EntityNotFoundException.class)\n    public ResponseEntity<Object> handleNotFound(\n        EntityNotFoundException exception, WebRequest request) {\n        ProblemDetail problemDetail = ProblemDetail.forStatusAndDetail(\n            HttpStatus.NOT_FOUND, exception.getMessage());\n        return this.handleExceptionInternal(exception, problemDetail,\n            new HttpHeaders(), HttpStatus.NOT_FOUND, request);\n    }\n    @ExceptionHandler(ConstraintViolationException.class)\n    public ResponseEntity<Object> handleBadRequestDueToBeanValidation(\n        ConstraintViolationException ex, WebRequest request) {\n        final Set<String> errors = ex.getConstraintViolations().stream()\n                .map(e -> ((PathImpl) e.getPropertyPath())\n                           .getLeafNode() + \": \" + e.getMessage())\n                .collect(Collectors.toSet());\n        ProblemDetail problemDetail = ProblemDetail.forStatusAndDetail(\n            HttpStatus.BAD_REQUEST, \"Invalid request content.\");\n        problemDetail.setProperty(\"errors\", errors);\n        return this.handleExceptionInternal(ex, problemDetail,\n            new HttpHeaders(), HttpStatus.BAD_REQUEST, request);\n    }\n    @Override\n    protected ResponseEntity<Object> handleMethodArgumentNotValid(\n        MethodArgumentNotValidException ex, HttpHeaders headers,\n        HttpStatusCode status, WebRequest request) {\n        final List<String> errors = new ArrayList<>();\n        for (final FieldError error :\n            ex.getBindingResult().getFieldErrors()) {\n                errors.add(\n                    error.getField() + \": \" + error.getDefaultMessage());\n        }\n        for (final ObjectError error :\n            ex.getBindingResult().getGlobalErrors()) {\n                errors.add(\n                error.getObjectName() + \": \" + error.getDefaultMessage());\n        }\n        ProblemDetail problemDetail = ex.getBody();\n        problemDetail.setProperty(\"errors\", errors);\n        return handleExceptionInternal(ex, problemDetail, headers, status,\n            request);\n    }\n} \n```", "```java\n@Constraint(validatedBy = {})\n@NotNull\n@Pattern(regexp = \"[A-Za-z]{2}[0-9]{5}\",\n    message = \"SKU must follow the pattern AA99999\")\n@Target({PARAMETER, FIELD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface ValidSku {\n    String message() default \"Invalid SKU\";\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n} \n```", "```java\npublic interface ProductsApi {\n    ResponseEntity<ProductOutput> createOrUpdateProduct(\n        @ValidSku String productId, @Valid ProductInput productInput);\n    ResponseEntity<Void> deleteProduct(@ValidSku String productId);\n    ResponseEntity<ProductOutput> editProductDescription(\n        @ValidSku String productId, @Valid ProductDescriptionInput input);\n    ResponseEntity<ProductOutput> getProductById(\n        @ValidSku String productId);\n    ResponseEntity<List<ProductOutput>> getProducts();\n} \n```", "```java\n curl -X 'PUT' \\\n  'http://localhost:8080/api/products/AAAA' \\\n  -H 'accept: application/json' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n  \"name\": \"Keyboard\",\n  \"description\": \"Ergonomic Keyboard\",\n  \"price\": 60\n}' \n```", "```java\nHTTP/1.1 400\nContent-Type: application/json\n{\n  \"type\": \"about:blank\",\n  \"title\": \"Bad Request\",\n  \"status\": 400,\n  \"detail\": \"Invalid request content.\",\n  \"instance\": \"/api/products/123\",\n  \"errors\": [\n    \"productId: SKU must follow the pattern AA99999\"\n  ]\n} \n```", "```java\npublic record ProductInput(\n    @NotBlank\n    @Size(min = 3, max = 255)\n    @JsonProperty(\"name\")\n    String name,\n    @NotBlank\n    @Size(min = 10, max = 255)\n    @JsonProperty(\"description\")\n    String description,\n    @NotNull\n    @Positive\n    @JsonProperty(\"price\")\n    BigDecimal price) {\n} \n```"]