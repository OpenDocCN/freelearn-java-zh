["```java\n    public class TransferServiceImpl implements TransferService { \n      public void transfer(Account a, Account b, Double amount) { \n        //Security concern start here \n        if (!hasPermission(SecurityContext.getPrincipal()) { \n          throw new AccessDeniedException(); \n        } \n        //Security concern end here \n\n        //Business logic start here \n        Account aAct = accountRepository.findByAccountId(a); \n        Account bAct = accountRepository.findByAccountId(b); \n        accountRepository.transferAmount(aAct, bAct, amount); \n        ... \n      } \n    } \n```", "```java\n    public class TransferServiceImpl implements TransferService { \n      public void transfer(Account a, Account b, Double amount) { \n        //Security concern start here \n        if (!hasPermission(SecurityContext.getPrincipal()) { \n          throw new AccessDeniedException(); \n        } \n        //Security concern end here \n\n        //Business logic start here \n        ... \n      } \n    } \n\n    public class AccountServiceImpl implements AccountService { \n      public void withdrawl(Account a, Double amount) { \n        //Security concern start here \n        if (!hasPermission(SecurityContext.getPrincipal()) { \n          throw new AccessDeniedException(); \n        } \n        //Security concern end here \n\n        //Business logic start here \n        ... \n      } \n    } \n```", "```java\n    package com.packt.patterninspring.chapter6.bankapp.service; \n    public interface TransferService { \n      void transfer(String accountA, String accountB, Long amount); \n    } \n```", "```java\n    package com.packt.patterninspring.chapter6.bankapp.aspect; \n\n    import org.aspectj.lang.annotation.AfterReturning; \n    import org.aspectj.lang.annotation.AfterThrowing; \n    import org.aspectj.lang.annotation.Aspect; \n    import org.aspectj.lang.annotation.Before; \n\n    @Aspect \n    public class Auditing { \n\n      //Before transfer service \n      @Before(\"execution(* com.packt.patterninspring.chapter6.bankapp.\n      service.TransferService.transfer(..))\")  \n      public void validate(){ \n        System.out.println(\"bank validate your credentials before \n        amount transferring\"); \n      } \n\n      //Before transfer service \n      @Before(\"execution(* com.packt.patterninspring.chapter6.bankapp.\n      service.TransferService.transfer(..))\")  \n      public void transferInstantiate(){ \n        System.out.println(\"bank instantiate your amount \n        transferring\"); \n      } \n\n      //After transfer service \n      @AfterReturning(\"execution(* com.packt.patterninspring.chapter6.\n      bankapp.service.TransferService.transfer(..))\") \n      public void success(){ \n        System.out.println(\"bank successfully transferred amount\"); \n      } \n\n      //After failed transfer service \n      @AfterThrowing(\"execution(* com.packt.patterninspring.chapter6.\n      bankapp.service.TransferService.transfer(..))\") \n      public void rollback() { \n        System.out.println(\"bank rolled back your transferred amount\"); \n      } \n    } \n```", "```java\n    //Before transfer service \n    @Before(\"execution(* com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\")  \n    public void validate(){ \n      System.out.println(\"bank validate your credentials before amount \n      transferring\"); \n    } \n\n    //Before transfer service \n    @Before(\"execution(* com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\")  \n    public void transferInstantiate(){ \n      System.out.println(\"bank instantiate your amount transferring\"); \n    } \n```", "```java\n    //After transfer service \n    @AfterReturning(\"execution(* com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\") \n    public void success(){ \n      System.out.println(\"bank successfully transferred amount\"); \n    } \n```", "```java\n    //After failed transfer service \n    @AfterThrowing(\"execution(* com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\") \n    public void rollback() { \n      System.out.println(\"bank rolled back your transferred amount\"); \n    } \n```", "```java\n    //After failed transfer service \n    @AfterThrowing(value = \"execution(*       \n    com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\", throwing=\"e\")) \n    public void rollback(DataAccessException e) { \n      System.out.println(\"bank rolled back your transferred amount\"); \n    } \n```", "```java\n    //After transfer service \n    @After (\"execution(* com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.transfer(..))\") \n    public void trackTransactionAttempt(){ \n      System.out.println(\"bank has attempted a transaction\"); \n    } \n```", "```java\n    @Around(execution(*    com.packt.patterninspring.chapter6.\n    bankapp.service.TransferService.createCache(..))) \n    public Object cache(ProceedingJoinPoint point){ \n    Object value = cacheStore.get(CacheUtils.toKey(point)); \n    if (value == null) { \n      value = point.proceed(); \n      cacheStore.put(CacheUtils.toKey(point), value); \n    } \n    return value; \n   } \n```", "```java\n    package com.packt.patterninspring.chapter6.bankapp.config; \n\n    import org.springframework.context.annotation.Bean; \n    import org.springframework.context.annotation.ComponentScan; \n    import org.springframework.context.annotation.Configuration; \n    import org.springframework.context.annotation.\n      EnableAspectJAutoProxy; \n\n    import com.packt.patterninspring.chapter6.bankapp.aspect.Auditing; \n\n    @Configuration \n    @EnableAspectJAutoProxy \n    @ComponentScan \n    public class AppConfig { \n      @Bean \n      public Auditing auditing() { \n         return new Auditing(); \n      } \n   } \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/aop \n      http://www.springframework.org/schema/aop/spring-aop.xsd \n      http://www.springframework.org/schema/beans \n      http://www.springframework.org/schema/beans/spring-beans.xsd \n      http://www.springframework.org/schema/context \n      http://www.springframework.org/schema/context/spring-\n      context.xsd\"> \n      <context:component-scan base- \n      package=\"com.packt.patterninspring.chapter6.bankapp\" /> \n      <aop:aspectj-autoproxy /> \n      <bean class=\"com.packt.patterninspring.chapter6.\n      bankapp.aspect.Auditing\" /> \n    </beans> \n```", "```java\n    package com.packt.patterninspring.chapter6.bankapp.aspect; \n\n    public class Auditing { \n      public void validate(){ \n        System.out.println(\"bank validate your credentials before \n        amount transferring\"); \n      } \n      public void transferInstantiate(){ \n        System.out.println(\"bank instantiate your amount \n        transferring\"); \n      } \n      public void success(){ \n        System.out.println(\"bank successfully transferred amount\"); \n      } \n      public void rollback() { \n        System.out.println(\"bank rolled back your transferred amount\"); \n      } \n    } \n```", "```java\n    <aop:config> \n      <aop:aspect ref=\"auditing\"> \n        <aop:before pointcut=\"execution(*    \n        com.packt.patterninspring.chapter6.bankapp.\n        service.TransferService.transfer(..))\"  \n        method=\"validate\"/> \n        <aop:before pointcut=\"execution(*  \n        com.packt.patterninspring.chapter6.bankapp.\n        service.TransferService.transfer(..))\"  \n        method=\"transferInstantiate\"/> \n        <aop:after-returning pointcut=\"execution(*  \n        com.packt.patterninspring.chapter6.\n        bankapp.service.TransferService.transfer(..))\"  \n        method=\"success\"/> \n        <aop:after-throwing pointcut=\"execution(*  \n        com.packt.patterninspring.chapter6.bankapp.\n        service.TransferService.transfer(..))\"  \n        method=\"rollback\"/> \n      </aop:aspect> \n    </aop:config> \n```", "```java\n    package com.packt.patterninspring.chapter6.bankapp.service; \n    import org.springframework.stereotype.Service; \n    public class TransferServiceImpl implements TransferService { \n      @Override \n      public void transfer(String accountA, String accountB, Long \n      amount) { \n        System.out.println(amount+\" Amount has been tranfered from \n        \"+accountA+\" to \"+accountB); \n      } \n    } \n```"]