["```java\nBook javaBook = new Book(\"Java 101\", \"123456\");\nMember dummyMember = new DummyMember());\njavaBook.issueTo(dummyMember);\nassertEquals(javaBook.numberOfTimesIssued(),1);\n```", "```java\npublic interface Dispenser {\n  void dispense(BigDecimal amount) throws DispenserFailed;\n}\npublic class AlwaysFailingDispenserStub implements Dispenser{\n  public void dispense(BigDecimal amount) throws DispenserFailed{\n    throw new DispenserFailed (ErrorType.HARDWARE,\"not  responding\");\n  }\n}\nclass ATMTest...\n  @Test\n  public void transaction_is_rolledback_when_hardware_fails() {\n    Account myAccount = new Account(\"John\", 2000.00);\n    TransactionManager txMgr = TransactionManager.forAccount(myAccount);\n    txMgr.registerMoneyDispenser(new AlwaysFailingDispenserStub());\n    WithdrawalResponse response = txMgr.withdraw(500.00);\n    assertEquals(false, response.wasSuccess());\n    assertEquals(2000.00, myAccount.remainingAmount());\n  }\n```", "```java\npublic class AddressDao extends SimpleJdbcDaoSupport{\n\n  public void batchInsertOrUpdate(List<AddressDTO> addressList, User user){\n    List<AddressDTO> insertList = buildListWhereLastChangeTimeMissing(addressList);\n\n    List<AddressDTO> updateList = buildListWhereLastChangeTimeValued(addressList);\n    int rowCount =  0;\n\n    if (!insertList.isEmpty()) {\n      rowCount = getSimpleJdbcTemplate().batchUpdate(INSERT_SQL,…);\n    }\n\n    if (!updateList.isEmpty()){\n      rowCount += getSimpleJdbcTemplate().batchUpdate(UPDATE_SQL,…);\n    }\n\n    if (addressList.size() != rowCount){\n      raiseErrorForDataInconsistency(…); \n    }\n}\n```", "```java\npublic class FakeAddressDao extends AddressDao{\n  @Override\n  public SimpleJdbcTemplate getSimpleJdbcTemplate() {\n    return jdbcTemplate;\n  } \n}\n```", "```java\npublic class ATMTest {\n  @Mock Dispenser failingDispenser;\n\n  @Before  public void setUp() throws Exception {\n    MockitoAnnotations.initMocks(this);\n  }\n\n  @Test  public void transaction_is_rolledback_when_hardware_fails() throws DispenserFailed {\n    Account myAccount = new Account(2000.00, \"John\");\n    TransactionManager txMgr = TransactionManager.forAccount(myAccount);\n    txMgr.registerMoneyDispenser(failingDispenser);\n\n    doThrow(new  DispenserFailed()).when(failingDispenser).dispense(isA(BigDecimal.class));\n\n    txMgr.withdraw(500);\n      assertEquals(2000.00, myAccount.getRemainingBalance());\n\n    verify(failingDispenser, new Times(1)).dispense(isA(BigDecimal.class));\n}\n}\n```", "```java\nclass ResourceAdapter{  \n  void print(String userId, String document, Object settings) {\n    if(securityService.canAccess(\"lanPrinter1\", userId)) {\n      printer.print(document, settings);\n    }\n  }\n}\n```", "```java\nclass SpyPrinter implements Printer{\n  private int noOfTimescalled = 0;\n   @Override\n  public void print(Object document, Object settings) {\n    noOfTimescalled++;\n  }\n  public int getInvocationCount() {\n    return noOfTimescalled;\n  }\n}\n```", "```java\nclass FakeSecurityService implements SecurityService{\n  public boolean canAccess(String printerName, String userId){\n    return true;\n  }\n}\n```", "```java\nprint behavior of the ResourceAdapter class:\n```", "```java\n@Test public void verify() throws Exception {\n  SpyPrinter spyPrinter = new SpyPrinter();\n  adapter = new ResourceAdapter(new FakeSecurityService(), spyPrinter);\n  adapter.print(\"john\", \"helloWorld.txt\", \"all pages\");\n  assertEquals(1, spyPrinter.getInvocationCount());\n}\n```"]