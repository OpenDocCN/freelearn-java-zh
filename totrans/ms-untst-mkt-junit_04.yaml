- en: Chapter 4. Progressive Mockito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter distills the Mockito framework to its main core and provides technical
    examples. No previous knowledge of mocking is necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics are covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Mockito APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced Mockito examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behavior-driven development (BDD) with Mockito
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with Mockito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mockito is an open source mock unit testing framework for Java. In the previous
    chapter, we read about test doubles and mock objects. Mockito allows mock object
    creation, verification, and stubbing.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out more about Mockito, visit the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/mockito/](http://code.google.com/p/mockito/)'
  prefs: []
  type: TYPE_NORMAL
- en: Why should you use Mockito?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automated tests are safety nets. They run and notify the user if the system
    is broken so that the offending code can be fixed very quickly.
  prefs: []
  type: TYPE_NORMAL
- en: If a test suite runs for an hour, the purpose of quick feedback is compromised.
    Unit tests should act as a safety net and provide quick feedback; this is the
    main principle of TDD.
  prefs: []
  type: TYPE_NORMAL
- en: I worked with an environment where when a piece of code is checked-in, the automated
    tests would run and would take hours to complete. So, a developer had to wait
    for an hour to check-in the new code unless the previous build/test run was complete.
    A developer can check-in the code in the middle of a build, but the best practice
    is to monitor the status before signing off; otherwise, the new code can break
    the next build and cause problem for the other developers. So, the developer has
    to wait for an additional hour to monitor the next build. This kind of slow build
    environment blocks the progress of development.
  prefs: []
  type: TYPE_NORMAL
- en: 'A test may take time to execute due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes a test acquires a connection from the database that fetches/updates
    data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It connects to the Internet and downloads files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It interacts with an SMTP server to send e-mails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It performs I/O operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now the question is do we really need to acquire a database connection or download
    files to unit test code?
  prefs: []
  type: TYPE_NORMAL
- en: The answer is yes. If it doesn't connect to a database or download the latest
    stock price, few parts of the system remain untested. So, DB interaction or network
    connection is mandatory for a few parts of the system, and these are integration
    tests. To unit test these parts, the external dependencies need to be mocked out.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito plays a key role in mocking out external dependencies. It mocks out
    the database connection or any external I/O behavior so that the actual logic
    can be unit tested.
  prefs: []
  type: TYPE_NORMAL
- en: Unit tests should adhere to a number of principles for flexibility and maintainability.
    The next section will elucidate the principles that we will follow throughout
    this journey.
  prefs: []
  type: TYPE_NORMAL
- en: Qualities of unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unit tests should adhere to the following principles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Order independent and isolated**: The `ATest.java` test class should not
    be dependent on the output of the `BTest.java` test class, or a `when_an_user_is_deleted_the_associated_id_gets_deleted()`
    test should not depend on the execution of another `when_a_new_user_is_created_an_id_is_returned()`
    test. The tests shouldn''t fail if `BTest.java` is executed after `ATest.java`,
    or the `when_a_new_user_is_created_an_id_is_returned()`test is executed after
    `when_an_user_is_deleted_the_associated_id_gets_deleted()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Trouble-free setup and run**: Unit tests should not require a DB connection
    or an Internet connection or a clean-up temp directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Effortless execution**: Unit tests should run fine on all computers, not
    just on a specific computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Formula 1 execution**: A test should not take more than a second to finish
    the execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito provides APIs to mock out the external dependencies and achieve the
    qualities mentioned here.
  prefs: []
  type: TYPE_NORMAL
- en: Drinking Mockito
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Download the latest Mockito binary from the following link and add it to the
    project dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/mockito/downloads/list](http://code.google.com/p/mockito/downloads/list)'
  prefs: []
  type: TYPE_NORMAL
- en: As of February 2014, the latest Mockito version is 1.9.5.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Mockito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following Gradle script snippet will add a Mockito dependency to a Gradle
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Mocking in action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section demonstrates the mock objects with a stock quote example. In the
    real world, people invest money on the stock market—they buy and sell stocks.
    A stock symbol is an abbreviation used to uniquely identify shares of a particular
    stock on a particular market, such as stocks of Facebook are registered on NASDAQ
    as FB and stocks of Apple as AAPL.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will build a stock broker simulation program. The program will watch the
    market statistics, and depending on the current market data, you can perform any
    of the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Buy stocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sell stocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hold stocks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The domain classes that will be used in the program are `Stock`, `MarketWatcher`,
    `Portfolio`, and `StockBroker`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Stock` represents a real-world stock. It has a symbol, company name, and price.'
  prefs: []
  type: TYPE_NORMAL
- en: '`MarketWatcher` looks up the stock market and returns the quote for the stock.
    A real implementation of a market watcher can be implemented from [http://www.wikijava.org/wiki/Downloading_stock_market_quotes_from_Yahoo!_finance](http://www.wikijava.org/wiki/Downloading_stock_market_quotes_from_Yahoo!_finance).
    Note that the real implementation will connect to the Internet and download the
    stock quote from a provider.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Portfolio` represents a user''s stock data such as the number of stocks and
    price details. `Portfolio` exposes APIs for getting the average stock price and
    buying and selling stocks. Suppose on day one someone buys a share at a price
    of $10.00, and on day two, the customer buys the same share at a price of $8.00\.
    So, on day two the person has two shares and the average price of the share is
    $9.00.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Look at the `perform` method. It takes a `portfolio` object and a `stock` object,
    calls the `getQuote` method of `MarketWatcher`, and passes a `stock` symbol. Then,
    it gets the average stock price from `portfolio` and compares the current market
    price with the average stock price. If the current stock price is 10 percent greater
    than the average price, then the `StockBroker` program sells 10 stocks from `Portfolio`;
    however, if the current stock price goes down by 10 percent, then the program
    buys shares from the market to average out the loss.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we sell 10 stocks? This is just an example and 10 is just a number; this
    could be anything you want.
  prefs: []
  type: TYPE_NORMAL
- en: '`StockBroker` depends on `Portfolio` and `MarketWatcher`; a real implementation
    of `Portfolio` should interact with a database, and `MarketWatcher` needs to connect
    to the Internet. So, if we write a unit test for the broker, we need to execute
    the test with a database and an Internet connection. A database connection will
    take time and Internet connectivity depends on the Internet provider. So, the
    test execution will depend on external entities and will take a while to finish.
    This will violate the quick test execution principle. Also, the database state
    might not be the same across all test runs. This is also applicable for the Internet
    connection service. Each time the database might return different values, and
    therefore asserting a specific value in your unit test is very difficult.'
  prefs: []
  type: TYPE_NORMAL
- en: We'll use Mockito to mock the external dependencies and execute the test in
    isolation. So, the test will no longer be dependent on real external service,
    and therefore it will be executed quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Mocking objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A mock can be created with the help of a static `mock()` method as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Otherwise, you can use Java''s static import feature and static import the
    `mock` method of the `org.mockito.Mockito` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'There''s another alternative; you can use the `@Mock` annotation as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The test method name is `when_ten_percent_gain_then_the_stock_is_sold`; a test
    name should explain the intention of the test. We use underscores to make the
    test name readable. We will use the `when_<<`something happens`>>_then_<<`the
    action is taken`>>` convention for the tests.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding test example, the `getAvgPrice()` method of `portfolio` is
    stubbed to return $10.00, then the `getQuote` method is stubbed to return a hardcoded
    `stock` object with a current stock price of $11.20\. The `broker` logic should
    sell the stock as the stock price goes up by 12 percent.
  prefs: []
  type: TYPE_NORMAL
- en: The `portfolio` object is a mock object. So, unless we stub a method, by default,
    all the methods of portfolio are autostubbed to return a default value, and for
    the `void` methods, no action is performed. The `sell` method is a `void` method;
    so, instead of connecting to a database to update the stock count, the autostub
    will do nothing.
  prefs: []
  type: TYPE_NORMAL
- en: However, how will we test whether the `sell` method was invoked? We use `Mockito.verify`.
  prefs: []
  type: TYPE_NORMAL
- en: The `verify()` method is a static method, which is used to verify the method
    invocation. If the method is not invoked, or the argument doesn't match, then
    the verify method will raise an error to indicate that the code logic has issues.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the method invocation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To verify a redundant method invocation, or to verify whether a stubbed method
    was not called but was important from the test perspective, we should manually
    verify the invocation; for this, we need to use the static `verify` method.
  prefs: []
  type: TYPE_NORMAL
- en: Why do we use verify?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Mock objects are used to stub external dependencies. We set an expectation,
    and a mock object returns an expected value. In some conditions, a behavior or
    method of a mock object should not be invoked, or sometimes, we may need to call
    the method N (a number) times. The `verify` method verifies the invocation of
    mock objects.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito does not automatically verify all stubbed calls.
  prefs: []
  type: TYPE_NORMAL
- en: If a stubbed behavior should not be called but the method is called due to a
    bug in the code, `verify` flags the error though we have to verify that manually.
    The `void` methods don't return values, so you cannot assert the returned values.
    Hence, `verify` is very handy to test the `void` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying in depth
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `verify()` method has an overloaded version that takes `Times` as an argument.
    `Times` is a Mockito framework class of the `org.mockito.internal.verification`
    package, and it takes `wantedNumberOfInvocations` as an integer argument.
  prefs: []
  type: TYPE_NORMAL
- en: If `0` is passed to `Times`, it infers that the method will not be invoked in
    the testing path. We can pass `0` to `Times(0)` to make sure that the `sell` or
    `buy` methods are not invoked. If a negative number is passed to the `Times` constructor,
    Mockito throws `MockitoException - org.mockito.exceptions.base.MockitoException`,
    and this shows the **Negative value is not allowed here** error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are used in conjunction with `verify`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`times(int wantedNumberOfInvocations)`: This method is invoked exactly *n*
    times; if the method is not invoked `wantedNumberOfInvocations` times, then the
    test fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`never()`: This method signifies that the stubbed method is never called or
    you can use `times(0)` to represent the same scenario. If the stubbed method is
    invoked at least once, then the test fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atLeastOnce()`: This method is invoked at least once, and it works fine if
    it is invoked multiple times. However, the operation fails if the method is not
    invoked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atLeast(int minNumberOfInvocations)`: This method is called at least *n* times,
    and it works fine if the method is invoked more than the `minNumberOfInvocations`
    times. However, the operation fails if the method is not called `minNumberOfInvocations`
    times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`atMost(int maxNumberOfInvocations)`: This method is called at the most `n`
    times. However, the operation fails if the method is called more than `minNumberOfInvocations`
    times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`only()`: The `only` method called on a mock fails if any other method is called
    on the mock object. In our example, if we use `verify(portfolio, only()).sell(aCorp,10);`,
    the test will fail with the following output:![Verifying in depth](img/00052.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The test fails in line 15 as `portfolio.getAvgPrice(stock)` is called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`timeout(int millis)`: This method is interacted in a specified time range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifying zero and no more interactions
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `verifyZeroInteractions(Object... mocks)` method verifies whether no interactions
    happened on the given mocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following test code directly calls `verifyZeroInteractions` and passes
    the two mock objects. Since no methods are invoked on the mock objects, the test
    passes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `verifyNoMoreInteractions(Object... mocks)` method checks whether any of
    the given mocks has any unverified interaction. We can use this method after verifying
    a mock method to make sure that nothing else was invoked on the mock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following test code demonstrates `verifyNoMoreInteractions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the JUnit output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying zero and no more interactions](img/00053.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The following are the rationales and examples of argument matchers.
  prefs: []
  type: TYPE_NORMAL
- en: Using argument matcher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ArgumentMatcher` is a Hamcrest matcher with a predefined `describeTo()` method.
    `ArgumentMatcher` extends the `org.hamcrest.BaseMatcher` package. It verifies
    the indirect inputs into a mocked dependency.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Matchers.argThat(Matcher)` method is used in conjunction with the `verify`
    method to verify whether a method is invoked with a specific argument value.
  prefs: []
  type: TYPE_NORMAL
- en: '`ArgumentMatcher` plays a key role in mocking. The following section describes
    the context of `ArgumentMatcher`.'
  prefs: []
  type: TYPE_NORMAL
- en: Mock objects return expected values, but when they need to return different
    values for different arguments, argument matcher comes into play. Suppose we have
    a method that takes a player name as input and returns the total number of runs
    (a run is a point scored in a cricket match) scored as output. We want to stub
    it and return `100` for `Sachin` and `10` for `xyz`. We have to use argument matcher
    to stub this.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mockito returns expected values when a method is stubbed. If the method takes
    arguments, the argument must match during the execution; for example, the `getValue(int
    someValue)` method is stubbed in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, the `getValue` method is called with `mockObject.getValue(100)`. Then,
    the parameter doesn't match (it is expected that the method will be called with
    1, but at runtime, it encounters 100), so the mock object fails to return the
    expected value. It will return the default value of the return type—if the return
    type is Boolean, it'll return false; if the return type is object, then null,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito verifies argument values in natural Java style by using an `equals()`
    method. Sometimes, we use argument matchers when extra flexibility is required.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito provides built-in matchers such as `anyInt()`, `anyDouble()`, `anyString()`,
    `anyList()`, and `anyCollection()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'More built-in matchers and examples of custom argument matchers or Hamcrest
    matchers can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.mockito.googlecode.com/hg/latest/org/mockito/Matchers.html](http://docs.mockito.googlecode.com/hg/latest/org/mockito/Matchers.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we are using argument matchers, all arguments have to be provided by matchers.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re passing three arguments and all of them are passed using matchers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example will fail because the first and the third arguments are
    not passed using matcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The ArgumentMatcher class
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `ArgumentMatcher` class allows the creation of customized argument matchers.
    `ArgumentMatcher` is a Hamcrest matcher with the predefined `describeTo()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Use the `Matchers.argThat(org.hamcrest.Matcher)` method and pass an instance
    of the Hamcrest matcher.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the `MarketWatcher` class; it takes a stock symbol and then gets the
    quote from the market.
  prefs: []
  type: TYPE_NORMAL
- en: We will create a mock for the `MarketWatcher.getQuote` method that takes a `String`
    object. We wish to make this method conditional. If a blue chip stock symbol is
    passed to the method, then the method will return $1000.00; otherwise, it will
    return $5.00.
  prefs: []
  type: TYPE_NORMAL
- en: How will we identify a blue chip share? A blue chip share is a common stock
    of a well-known company whose value and dividends are reliable and usually safe
    for investment. For example, if the stock symbol is FB or AAPL, we will consider
    the stock as a blue chip stock.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us create a custom matcher to identify blue chip stocks. The following
    code shows a custom argument matcher:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The following class extends `BlueChipStockMatcher` and then negates the result
    to indicate that the stock is not a blue chip stock:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The following test uses the custom matchers to sell the shares:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `marketWatcher` is stubbed to return a blue chip share
    when the stock symbol is `FB` or `AAPL`; otherwise, it returns a normal stock.
  prefs: []
  type: TYPE_NORMAL
- en: Throwing exceptions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Unit tests are not meant for only happy path testing. We should test our code
    for the failure conditions too. Mockito provides an API to raise an error during
    testing. Suppose we are testing a flow where we compute a value and then print
    it to a printer. If the printer is not configured, or a network error happens,
    or a page is not loaded, the system throws an exception. We can test this using
    Mockito's exception APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How do we test exceptional conditions such as database access failure?
  prefs: []
  type: TYPE_NORMAL
- en: Mockito provides a method called `thenThrow(Throwable)`; this method throws
    an exception when the stubbed method is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will stub the `getAvgPrice` method to throw an exception when the method
    is called, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We are stubbing `portfolio` to throw an exception when `getAvgPrice()` is invoked.
    The following is the syntax to throw an exception from a method that returns `void`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `buy` method in `Portfolio` is a `void` method; we will stub the `buy`
    method to throw an exception. The following test code throws `IllegalStateException`
    when the `buy` method is invoked on the `portfolio` object. Note that `doThrow().when()`
    will be used to raise the error from the `buy` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Stubbing consecutive calls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Stubbing a method for consecutive calls is required in the following situations:'
  prefs: []
  type: TYPE_NORMAL
- en: Calling a stubbed method in a loop when you need different results for different
    calls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you need one invocation to throw an exception and other invocations to
    return a value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to test a condition where the first call will return a value, the next
    call should not find any value, and then again it should return a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The varargs version of `thenReturn(objects...)` takes comma-separated return
    values and returns the arguments in order such that if we pass two arguments to
    the `thenReturn` method, then the first call to the stubbed method will return
    the first argument. Thereafter, all other calls will return the second argument,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `thenReturn` takes two values: `BigDecimal.TEN` and `BigDecimal.ZERO`.
    The first call to `getAvgPrice` will return `BigDecimal.TEN`, and then each call
    will return `BigDecimal.ZERO`.'
  prefs: []
  type: TYPE_NORMAL
- en: This can be done in another way—Mockito methods return stub objects and follow
    a builder pattern to allow a chain of calls.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, `thenReturn` and `thenThrow` are combined to build
    a chain of response. After the second call, each `getAvgPrice` invocation will
    throw an exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Stubbing with an Answer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Stubbed methods return a hardcoded value but cannot return an on the fly result.
    The Mockito framework provides the callbacks to compute the on the fly results.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito allows stubbing with the generic `Answer` interface. This is a callback;
    when a stubbed method on a mock object is invoked, the `answer(InvocationOnMock
    invocation)` method of the `Answer` object is called. This `Answer` object's `answer()`
    method returns the actual object.
  prefs: []
  type: TYPE_NORMAL
- en: The syntax of `Answer` is `when(mock.someMethod()).thenAnswer(new Answer() {…});`
    or `when(mock.someMethod()).then(answer);`, which is similar to `thenReturn()`
    and `thenThrow()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Answer` interface is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InvocationOnMock` argument is an important part of callback. It can return
    the arguments passed to the method and also return the mock object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: One can buy 10 stocks of Facebook or 10 different stocks. The `stockMap` object
    stores a key-value pair. The key is the `Stock` symbol and the value is a list
    of stocks. 10 Facebook stocks will add a single key, `FB,` and a list of 10 Facebook
    stocks. An Apple stock will add another entry to the map with an `AAPL` key and
    value and a list with a single Apple stock.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `Answer` implementation is called when the `buy` method is invoked.
    The `invocationOnMock` object returns the arguments, and the `buy` method accepts
    only one argument, that is, a `Stock` object. So, type casted the 0^(th) argument
    to `Stock`. Then, insert `Stock` to the `stockMap` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `answer` object implements the total price computation logic:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `getCurrentValue()` method will be stubbed to return the preceding answer
    implementation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following JUnit test code uses the `TotalPriceAnswer` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Check that the `stockMap` object is cleared to remove existing data. Then, the
    `void` `buy` method is stubbed to add stocks to `stockMap` using the `doAnswer`
    method, and then the `getCurrentValue` method is stubbed to the `TotalPriceAnswer`
    answer.
  prefs: []
  type: TYPE_NORMAL
- en: Spying objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A Mockito `spy` object allows us to use real objects instead of mocks by replacing
    some of the methods with the stubbed ones. This behavior allows us to test the
    legacy code; one cannot mock a class that needs to be tested. Legacy code comes
    with methods that cannot be tested, but other methods use them; so, these methods
    need to be stubbed to work with the other methods. A `spy` object can stub the
    nontestable methods so that other methods can be tested easily.
  prefs: []
  type: TYPE_NORMAL
- en: Once an expectation is set for a method on a `spy` object, then `spy` no longer
    returns the original value. It starts returning the stubbed value, but still it
    exhibits the original behavior for the other methods that are not stubbed.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito can create a `spy` of a real object. Unlike stubbing, when we use `spy`,
    the real methods are called (unless a method was stubbed).
  prefs: []
  type: TYPE_NORMAL
- en: '`Spy` is also known as partial mock; one example of the use of `spy` in the
    real world is dealing with legacy code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Declaration of `spy` is done using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is a self-explanatory example of `spy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Stubbing void methods
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the *Throwing exceptions* section of this chapter, we learned that `doThrow`
    is used for throwing exceptions for the `void` methods. The *Stubbing with an
    Answer* section of this chapter showed you how to use `doAnswer` for the void
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will explore the other `void` methods: `doNothing`, `doReturn`,
    `doThrow`, and `doCallRealMethod`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `doNothing()` API does nothing. By default, all the `void` methods do nothing.
    However, if you need consecutive calls on a `void` method, the first call is to
    throw an error, the next call is to do nothing, and then the next call to perform
    some logic using `doAnswer()` and then follow this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `doCallRealMethod()` API is used when you want to call the real implementation
    of a method on a mock or a `spy` object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `doReturn()` method is similar to stubbing a method and returning an expected
    value. However, this is used only when `when(mock).thenReturn(return)` cannot
    be used.
  prefs: []
  type: TYPE_NORMAL
- en: The `when-thenReturn` method is more readable than `doReturn()`; also, `doReturn()`
    is not a safe type. The `thenReturn` method checks the method return types and
    raises a compilation error if an unsafe type is passed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how the test fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stubbing void methods](img/00054.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Spying real objects and calling real methods on a spy has side effects; to counter
    this side effect, use `doReturn()` instead of `thenReturn()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code describes the side effect of spying and calling `thenReturn()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the spy object calls a real method while trying to stub
    `get(index)`, and unlike the mock objects, the real method was called and it failed
    with an `ArrayIndexOutOfBounds` error.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the failure message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Stubbing void methods](img/00055.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'This can be protected using `doReturn()` as shown in the following code, but
    note that typically we don''t mock lists or domain objects; this is just an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Capturing arguments with ArgumentCaptor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ArgumentCaptor` is used to verify the arguments passed to a stubbed method.
    Sometimes, we compute a value, then create another object using the computed value,
    and then call a mock object using that new object. This computed value is not
    returned from the original method, but it is used for some other computation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ArgumentCaptor` provides an API to access objects that are instantiated within
    the method under the test.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code snippet explains the problem behind the inaccessibility
    of the method arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: We are passing a first name, middle name, last name, and an age to the `buildPerson`
    method. This method creates a `Person` object and sets the name and age to it.
    Finally, it invokes the `personService` class and saves the `person` object to
    a database.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we cannot stub the `save` behavior of `personService` from a JUnit test
    with a specific value since the `Person` object is created inside the method.
    We can mock `save` using a generic matcher object such as `isA(Person.class)`
    and then verify whether the `Person` object contains the correct name and age
    using the argument captor.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito verifies argument values in natural Java style by using an `equals()`
    method. This is also the recommended way of matching arguments because it makes
    tests clean and simple. In some situations though, it is necessary to assert on
    certain arguments after the actual verification.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code uses two `ArgumentCaptors` and verifies whether it uses
    a specific stock symbol, `A,` and not any other value while calling the method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Check that `ArgumentCaptor` takes a `Class` type in the `forClass` method and
    then the captor is passed to the `verify` method to collect the argument details.
    The `sell` method takes two arguments, `Stock` and `Integer`. So, two `ArgumentCaptors`
    are created. The `stockCaptor` object captures the `Stock` argument and `stockSellCountCaptor`
    captures the stock quantity. Finally, the values are compared to verify whether
    the correct values were passed to the `sell` method.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the invocation order
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mockito facilitates verifying if interactions with a mock were performed in
    a given order using the `InOrder` API. It allows us to create `InOrder` of mocks
    and verify the call order of all calls of all mocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following test sequentially invokes the `getAvgPrice`, `getCurrentValue`,
    `getQuote`, and `buy` methods, but verifies whether the `buy()` method is invoked
    before the `getAvgPrice()` method. So, the verification order is wrong and hence
    the test fails:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the error message output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Verifying the invocation order](img/00056.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Reordering the verification sequence, we fixed the test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Changing the default settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We learned that nonstubbed methods of a mock object return default values such
    as null for an object and false for a Boolean. However, Mockito allows us to change
    the default settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the allowed settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RETURNS_DEFAULTS**: This is the default setting. It returns null for object,
    false for Boolean, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RETURNS_SMART_NULLS**: This returns `spy` of a given type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RETURNS_MOCKS**: This returns mocks for objects and the default value for
    primitives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RETURNS_DEEP_STUBS**: This returns a deep stub.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**CALLS_REAL_METHODS**: This calls a real method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following example overrides the default Mockito settings and uses different
    return types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the console output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing the default settings](img/00057.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Resetting mock objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A static method `reset(T…)` enables resetting mock objects. The `reset` method
    should be handled with special care; if you need to reset a mock, you will most
    likely need another test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Exploring Mockito annotations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We learned that Mockito supports the `@Mock` annotation for mocking. Just like
    `@Mock`, Mockito supports the following three useful annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Captor`: This simplifies the creation of `ArgumentCaptor`, which is useful
    when the argument to capture is a super generic class, such as `List<Map<String,Set<String>>.`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Spy`: This creates a `spy` of a given object. Use it instead of `spy (object)`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@InjectMocks`: This injects `mock` or `spy` fields into the tested object
    automatically using a constructor injection, setter injection, or field injection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with inline stubbing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mockito allows us to create mocks while stubbing it. Basically, it allows creating
    a stub in one line of code. This can be helpful to keep the test code clean.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, some stubs can be created and stubbed at field initialization
    in a test. We use the `Stock` objects in almost all tests. We can create a global
    mock `Stock` and stub it at definition, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Determining mocking details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Mockito.mockingDetails` identifies whether a particular object is a mock or
    a spy, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Behavior-driven development with Mockito
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: BDD is a software engineering process based on TDD. BDD combines the best practices
    of TDD, **domain-driven** **development** (**DDD**), and **object-oriented programming**
    (**OOP**).
  prefs: []
  type: TYPE_NORMAL
- en: In an agile team, scoping a feature is a mammoth task. The business stakeholders
    talk about business interests, and the development team talks about technical
    challenges. BDD provides a universal language that allows useful communication
    and feedback between the stakeholders.
  prefs: []
  type: TYPE_NORMAL
- en: 'Dan North developed BDD, created the **JBehave** framework for BDD, and proposed
    the following best practices:'
  prefs: []
  type: TYPE_NORMAL
- en: Unit test names should start with the word *should* and *should* be written
    in the order of the business value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Acceptance tests** (**AT**) should be written in a user story manner, such
    as "As a (role) I want (feature) so that (benefit)"'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Acceptance criteria should be written in terms of scenarios and implemented
    as "Given (initial context), when (event occurs), then (ensure some outcomes)"
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s write a user story for our stock broker simulation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Story**: A stock is sold'
  prefs: []
  type: TYPE_NORMAL
- en: '**In order** to maximize profit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**As a** Stock broker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I want** to sell a stock **when** the price goes up by 10 percent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a scenario example:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**: 10 percent increase in stock price should sell the stock in the
    market'
  prefs: []
  type: TYPE_NORMAL
- en: '**Given** a customer previously bought FB stocks at $10.00 per share'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**And** he currently has 10 shares left in his portfolio'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When** the FB stock price becomes $11.00'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then** I should sell all the FB stocks and the portfolio should have zero
    FB stocks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mockito supports the BDD style of writing tests using the `given-when-then`
    syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Writing tests in BDD style
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In BDD, `given` represents the initial context and `when` represents the event
    or condition. However, Mockito already has a `when` style of (initial context
    definition) method stubbing; therefore, `when` doesn't go well with BDD. Thus,
    the `BDDMockito` class introduces an alias so that we can stub method calls with
    the `given(object)` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following JUnit test is implemented in BDD style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Note that the test name starts with a `should` statement. The `given` syntax
    of `Mockito` is used to set the initial context that the portfolio already has
    `FB` stocks bought at $10.00 per share and the current `FB` stock price is $11.00
    per share.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the test execution output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing tests in BDD style](img/00058.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The BDD syntax
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following methods are used in conjunction with `given`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`willReturn`(a value to be returned): This returns a given value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`willThrow`(a throwable to be thrown): This throws a given exception'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`will`(`Answer` answer) and `willAnswer`(`Answer` answer): This is similar
    to `then`(answer) and `thenAnswer`(answer)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`willCallRealMethod()`: This calls the real method on the mock object or spy'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `jMock` and `EasyMock` frameworks are the other two Java-based unit testing
    frameworks that support mocking for automated unit tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `jMock` and `EasyMock` frameworks provide mocking capabilities, but the
    syntax is not as simple as Mockito. You can visit the following URLs to explore
    the frameworks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://jmock.org/](http://jmock.org/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://easymock.org/](http://easymock.org/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about BDD and JBehave, visit [http://jbehave.org/](http://jbehave.org/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, Mockito is described in detail and technical examples are provided
    to demonstrate the capability of Mockito.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to use advanced features of the
    Mockito framework, and start BDD with Mockito.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain the importance of code coverage, line and branch
    coverage, how to measure code coverage, Eclipse plugins, setting up Cobertura,
    and generating coverage report using Ant, Gradle, and Maven.
  prefs: []
  type: TYPE_NORMAL
