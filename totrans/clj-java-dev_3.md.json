["```java\nlein new thumbnails\n\n```", "```java\n(defproject thumbnails \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]])\n```", "```java\n(defproject thumbnails \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.imgscalr/imgscalr-lib \"4.2\"]])\n```", "```java\n(defproject thumbnails \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.6.0\"]\n                 [org.imgscalr/imgscalr-lib \"4.2\"]]\n  :repositories [[\"jcenter\" \"http://jcenter.bintray.com/\"]])\n```", "```java\nlein deps\n\n```", "```java\nlein deps :tree\n\n```", "```java\n [clojure-complete \"0.2.3\" :scope \"test\" :exclusions [[org.clojure/clojure]]]\n [org.clojure/clojure \"1.6.0\"]\n [org.clojure/tools.nrepl \"0.2.6\" :scope \"test\" :exclusions [[org.clojure/clojure]]]\n [org.imgscalr/imgscalr-lib \"4.2\"]\n```", "```java\n(def a (new java.util.ArrayList 20))\n```", "```java\n(def a (ArrayList.))\n```", "```java\n(. add a 5)\n```", "```java\n(. instance method-name args*)\n```", "```java\n(.method-name instance args*)\n```", "```java\n(java.util.Collections/emptyMap)\n```", "```java\n(java.util.AbstractMap.SimpleEntry. \"key\" \"value\")\n```", "```java\n(java.util.AbstractMap$SimpleEntry. \"key\" \"value\")\n```", "```java\n(ns thumbnails.image\n  (:require [clojure.java.io :as io])\n  (:import [javax.imageio ImageIO]\n           [java.awt.image BufferedImageOp]\n           [org.imgscalr Scalr Scalr$Mode]))\n```", "```java\n(def image-stream (io/input-stream \"http://imgs.xkcd.com/comics/angular_momentum.jpg\"))(def image (ImageIO/read image-stream))\nimage\n(.getWidth image)\n```", "```java\n(ns thumbnails.image\n  (:require [clojure.java.io :as io])\n  (:import [javax.imageio ImageIO]\n           [java.awt.image BufferedImageOp]\n           [org.imgscalr Scalr Scalr$Mode]))\n\n(defn load-image [image-stream]\n  (ImageIO/read image-stream))\n\n(defn save-image [image path]\n  (ImageIO/write image \"PNG\" (io/output-stream path)))\n\n(defn image-size [image]\n  [(.getWidth image) (.getHeight image)])\n\n(defn generate-thumbnail [image size]\n  (Scalr/resize image Scalr$Mode/FIT_TO_WIDTH size (into-array BufferedImageOp [])))\n\n(defn get-image-width [image-path]\n  (let [image (load-image image-path)\n        [w _] (image-size image)]\n    w))\n```", "```java\n(into-array BufferedImageOp [])\n```", "```java\n(ns thumbnails.thumbnail-test\n  (:require [clojure.test :refer :all]\n            [clojure.java.io :as io]\n            [thumbnails.image :refer :all]))\n\n(deftest test-image-width\n  (testing \"We should be able to get the image with\"\n    (let [image-stream (io/input-stream \"http://imgs.xkcd.com/comics/angular_momentum.jpg\")\n          image (load-image image-stream)]\n      (save-image image \"xkcd-width.png\")\n      (is (= 600 (get-image-width (io/input-stream \"xkcd-width.png\")))))))\n\n(deftest test-load-image\n  (testing \"We should be able to generate thumbnails\"\n    (let [image-stream (io/input-stream \"http://imgs.xkcd.com/comics/angular_momentum.jpg\")\n          image (load-image image-stream)\n          thumbnail-image (generate-thumbnail image 50)]\n      (save-image thumbnail-image \"xkcd.png\")\n      (is (= 50 (get-image-width (io/input-stream \"xkcd.png\")))))))\n```", "```java\n(let [x 42] x)\n```", "```java\n(let [x 42\n      y (* x x)]\n  (println \"x is \" x \" and y \" y))\n```", "```java\n(let [x 42]\n  (let [y (* x x)]\n    (println \"x is \" x \" and y \" y)))\n```", "```java\n(let [x 42]\n  (let [y (* x x)]\n    (let [x 41]\n      (println \"x is \" x \" and y \" y))))\n```", "```java\nimage (load-image image-path)\n```", "```java\n[w _] (image-size image)\n```", "```java\n(let [v [1 2 3]] [(first v) (nth v 2)]) ;; [1 3]\n```", "```java\n(let [[f s t] [1 2 3]] [f t]) ;; [1 3]\n```", "```java\n(let [[f s] [1 2]] f) ;; 1\n(let [[f s t] [1 2 3]] [f t]) ;; [1 3]\n(let [[f] [1 2]] f);; 1\n(let [[f s t] [1 2]] t);; nil\n(let [[f & t [1 2]] t);; (2)\n(let [[f & t [1 2 3]] t);; (2 3)\n(let [[f & t [1 2 3]] t);; (2 3)\n(let [[f & [_ t]] [1 2 3]] [f t])\n```", "```java\n(defn func [[f _ t]]\n  (+ f t))\n(func [1 2 3]) ;; 4\n```", "```java\n(let [{a-value a} {: a-value  5}] a-value) ;; 5\n(let [{a-value :a c-value :c} {:a 5 :b 6 :c 7}] c-value) ;; 7\n(let [{:keys [a c]} {:a 5 :b 6 :c 7}] c) ;; 7\n(let [{:syms [a c]} {'a 5 :b 6 'c 7}] c) ;; 7\n(let [{:strs [a c]} {:a 5 :b 6 :c 7 \"a\" 9}] [a c]) ;; [9 nil]\n(let [{:strs [a c] :or {c 42}} {:a 5 :b 6 :c 7 \"a\" 9}] [a c]) ;; [9 42]\n```", "```java\n(defn get-image-width [image-path]\n  (let [image (load-image image-path)\n        [w _] (image-size image)]\n    w))\n```", "```java\n (deftest test-load-image\n  (testing \"We should be able to generate thumbnails\"\n    (let [image-stream    (io/input-stream \"http://imgs.xkcd.com/comics/angular_momentum.jpg\")\n          image           (load-image image-stream)\n          thumbnail-image (generate-thumbnail image 50)]\n      (save-image thumbnail-image \"xkcd.png\")\n      (is (= 50 (get-image-width (io/input-stream \"xkcd.png\")))))))\n```", "```java\n(ns thumbnails.image-java\n  (:require [thumbnails.image :as img])\n  (:gen-class\n    :methods [[loadImage [java.io.InputStream] java.awt.image.BufferedImage]\n              [saveImage [java.awt.image.BufferedImage String] void]\n              [generateThumbnail [java.awt.image.BufferedImage int] java.awt.image.BufferedImage]]\n    :main false\n    :name thumbnails.ImageProcessor))\n\n(defn -loadImage [this image-stream]\n  (img/load-image image-stream))\n\n(defn -saveImage [this image path]\n  (img/save-image image path))\n\n(defn -generateThumbnail [this image size]\n  (img/generate-thumbnail image size))\n```", "```java\n(:gen-class\n    :methods [[loadImage [java.io.InputStream] java.awt.image.BufferedImage]\n              [saveImage [java.awt.image.BufferedImage String] void]\n              [generateThumbnail [java.awt.image.BufferedImage int] java.awt.image.BufferedImage]]\n    :main false\n    :name thumbnails.ImageProcessor)\n```", "```java\n$ lein install\n\n```", "```java\napply plugin: 'java'\napply plugin: 'groovy'\n\nrepositories {\n  jcenter()\n  mavenLocal()\n}\n\ndependencies {\n  compile \"thumbnails:thumbnails:0.1.0-SNAPSHOT\"\n  testCompile \"org.spockframework:spock-core:0.7-groovy-2.0\"\n}\n```", "```java\npackage imaging.java\n\nimport thumbnails.ImageProcessor\nimport spock.lang.*\n\nclass ImageSpec extends Specification {\n  def \"Test we can use imaging tools\"() {\n    setup:\n      def processor = new ImageProcessor()\n      def imageStream = getClass().getResourceAsStream(\"/test.png\")\n\n    when:\n      def image = processor.loadImage(imageStream)\n      def thumbnail = processor.generateThumbnail(image, 100)\n\n    then:\n      thumbnail.getWidth() == 100\n  }\n}\n```", "```java\ngradle test\n```", "```java\n(import '(javax.swing JFrame JLabel JTextField JButton)\n        '(java.awt.event ActionListener)\n        '(java.awt GridLayout))\n(defn sample []\n  (let [frame (JFrame. \"Simple Java Integration\")\n        sample-button (JButton. \"Hello\")]\n    (.addActionListener\n     sample-button\n     (reify ActionListener\n            (actionPerformed\n             [_ evt]\n             (println \"Hello world\"))))\n    (doto frame\n      (.add sample-button)\n      (.setSize 100 40)\n      (.setVisible true))))\n(sample)\n```", "```java\nbutton.addActionListener(new ActionListener() {\n  public void actionPerformed(ActionEvent e) {\n    System.out.println(\"Hello world\")'\n  }\n})\n```", "```java\n  (reify ActionListener\n            (actionPerformed\n             [_ evt]\n             (println \"Hello world\")))\n```", "```java\n(reify InterfaceOrProtocol\n  (method [self parameter-list]\n    method-body)\n  (method2 [self parameter-list]\n    method-body))\n```"]