["```java\n        public class Task implements Runnable {\n\n```", "```java\n        private final Date initDate; \n        private final String name;\n\n```", "```java\n        public Task(String name){ \n          initDate=new Date(); \n          this.name=name; \n        }\n\n```", "```java\n        @Override \n        public void run() {\n\n```", "```java\n        System.out.printf(\"%s: Task %s: Created on: %s\\n\",\n                          Thread.currentThread().getName(),\n                          name,initDate); \n        System.out.printf(\"%s: Task %s: Started on: %s\\n\",\n                          Thread.currentThread().getName(),\n                          name,new Date());\n\n```", "```java\n        try { \n          Long duration=(long)(Math.random()*10); \n          System.out.printf(\"%s: Task %s: Doing a task during %d\n                             seconds\\n\", Thread.currentThread().getName(),\n                            name,duration); \n          TimeUnit.SECONDS.sleep(duration); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n         System.out.printf(\"%s: Task %s: Finished on: %s\\n\",\n                           Thread.currentThread().getName(),\n                           name,new Date());\n\n```", "```java\n        public class RejectedTaskController implements\n                                              RejectedExecutionHandler { \n          @Override \n          public void rejectedExecution(Runnable r,\n                                        ThreadPoolExecutor executor) { \n            System.out.printf(\"RejectedTaskController: The task %s has been\n                              rejected\\n\",r.toString()); \n            System.out.printf(\"RejectedTaskController: %s\\n\",\n                              executor.toString()); \n            System.out.printf(\"RejectedTaskController: Terminating: %s\\n\",\n                              executor.isTerminating()); \n            System.out.printf(\"RejectedTaksController: Terminated: %s\\n\",\n                              executor.isTerminated()); \n          }\n\n```", "```java\n        public class Server {\n\n```", "```java\n        private final ThreadPoolExecutor executor;\n\n```", "```java\n        public Server(){ \n          executor =( ThreadPoolExecutor ) Executors.newFixedThreadPool(\n                        Runtime.getRuntime().availableProcessors() ); \n          RejectedTaskController controller=new\n                                         RejectedTaskController(); \n          executor.setRejectedExecutionHandler(controller); \n        }\n\n```", "```java\n        public void executeTask(Task task){ \n          System.out.printf(\"Server: A new task has arrived\\n\");\n\n```", "```java\n        executor.execute(task);\n\n```", "```java\n        System.out.printf(\"Server: Pool Size: %d\\n\",\n                          executor.getPoolSize()); \n        System.out.printf(\"Server: Active Count: %d\\n\",\n                          executor.getActiveCount()); \n        System.out.printf(\"Server: Task Count: %d\\n\",\n                          executor.getTaskCount()); \n        System.out.printf(\"Server: Completed Tasks: %d\\n\",\n                          executor.getCompletedTaskCount());\n\n```", "```java\n        public void endServer() { \n          executor.shutdown(); \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) { \n            Server server=new Server(); \n\n            System.out.printf(\"Main: Starting.\\n\"); \n              for (int i=0; i<100; i++){ \n                Task task=new Task(\"Task \"+i); \n                server.executeTask(task); \n              }\n\n```", "```java\n        System.out.printf(\"Main: Shuting down the Executor.\\n\"); \n        server.endServer();\n\n```", "```java\n        System.out.printf(\"Main: Sending another Task.\\n\"); \n        Task task=new Task(\"Rejected task\"); \n        server.executeTask(task); \n\n        System.out.printf(\"Main: End.\\n\");\n\n```", "```java\n        public class FactorialCalculator implements Callable<Integer> {\n\n```", "```java\n        private final Integer number;\n\n```", "```java\n        public FactorialCalculator(Integer number){ \n          this.number=number; \n        }\n\n```", "```java\n        @Override \n        public Integer call() throws Exception {\n\n```", "```java\n        int result = 1;\n\n```", "```java\n        if ((number==0)||(number==1)) { \n          result=1; \n        } else { \n          for (int i=2; i<=number; i++) { \n            result*=i; \n            TimeUnit.MILLISECONDS.sleep(20); \n          } \n        }\n\n```", "```java\n        System.out.printf(\"%s: %d\\n\",Thread.currentThread().getName(),\n                          result);\n\n```", "```java\n        return result;\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors\n                                               .newFixedThreadPool(2);\n\n```", "```java\n        List<Future<Integer>> resultList=new ArrayList<>();\n\n```", "```java\n        Random random=new Random();\n\n```", "```java\n        for (int i=0; i<10; i++){ \n          Integer number= random.nextInt(10);\n\n```", "```java\n        FactorialCalculator calculator=new FactorialCalculator(number);\n\n```", "```java\n        Future<Integer> result=executor.submit(calculator);\n\n```", "```java\n          resultList.add(result); \n        }\n\n```", "```java\n        do {\n\n```", "```java\n        System.out.printf(\"Main: Number of Completed Tasks: %d\\n\",\n                          executor.getCompletedTaskCount());\n\n```", "```java\n        for (int i=0; i<resultList.size(); i++) { \n          Future<Integer> result=resultList.get(i); \n          System.out.printf(\"Main: Task %d: %s\\n\",i,result.isDone()); \n        }\n\n```", "```java\n        try { \n          TimeUnit.MILLISECONDS.sleep(50); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        } while (executor.getCompletedTaskCount()<resultList.size());\n\n```", "```java\n        System.out.printf(\"Main: Results\\n\"); \n        for (int i=0; i<resultList.size(); i++) { \n          Future<Integer> result=resultList.get(i); \n          Integer number=null; \n          try { \n            number=result.get(); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } catch (ExecutionException e) { \n            e.printStackTrace(); \n          }\n\n```", "```java\n          System.out.printf(\"Main: Task %d: %d\\n\",i,number); \n        }\n\n```", "```java\n        executor.shutdown();\n\n```", "```java\n        public class UserValidator {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        public UserValidator(String name) { \n          this.name=name; \n        }\n\n```", "```java\n        public boolean validate(String name, String password) {\n\n```", "```java\n        Random random=new Random();\n\n```", "```java\n        try { \n          long duration=(long)(Math.random()*10); \n          System.out.printf(\"Validator %s: Validating a user during %d\n                             seconds\\n\", this.name,duration); \n          TimeUnit.SECONDS.sleep(duration); \n        } catch (InterruptedException e) { \n          return false; \n        }\n\n```", "```java\n          return random.nextBoolean(); \n        }\n\n```", "```java\n        public String getName(){ \n          return name; \n        }\n\n```", "```java\n        public class ValidatorTask implements Callable<String> {\n\n```", "```java\n        private final UserValidator validator;\n\n```", "```java\n        private final String user; \n        private final String password;\n\n```", "```java\n        public ValidatorTask(UserValidator validator, String user,\n                             String password){ \n          this.validator=validator; \n          this.user=user; \n          this.password=password; \n        }\n\n```", "```java\n        @Override \n        public String call() throws Exception {\n\n```", "```java\n        if (!validator.validate(user, password)) { \n          System.out.printf(\"%s: The user has not been found\\n\",\n                            validator.getName()); \n          throw new Exception(\"Error validating user\"); \n        }\n\n```", "```java\n        System.out.printf(\"%s: The user has been found\\n\",\n                          validator.getName()); \n        return validator.getName();\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        String username=\"test\"; \n        String password=\"test\";\n\n```", "```java\n        UserValidator ldapValidator=new UserValidator(\"LDAP\"); \n        UserValidator dbValidator=new UserValidator(\"DataBase\");\n\n```", "```java\n        TaskValidator ldapTask=new TaskValidator(ldapValidator,\n                                                 username, password); \n        TaskValidator dbTask=new TaskValidator(dbValidator,\n                                               username,password);\n\n```", "```java\n        List<TaskValidator> taskList=new ArrayList<>(); \n        taskList.add(ldapTask); \n        taskList.add(dbTask);\n\n```", "```java\n        ExecutorService executor=(ExecutorService)Executors\n                                             .newCachedThreadPool(); \n        String result;\n\n```", "```java\n        try { \n          result = executor.invokeAny(taskList); \n          System.out.printf(\"Main: Result: %s\\n\",result); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        } catch (ExecutionException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        executor.shutdown(); \n        System.out.printf(\"Main: End of the Execution\\n\");\n\n```", "```java\n        public class Result {\n\n```", "```java\n        private String name; \n        private int value;\n\n```", "```java\n        public String getName() { \n          return name; \n        } \n        public void setName(String name) { \n          this.name = name; \n        } \n        public int getValue() { \n          return value; \n        } \n        public void setValue(int value) { \n          this.value = value; \n        }\n\n```", "```java\n        public class Task implements Callable<Result> {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        public Task(String name) { \n          this.name=name; \n        }\n\n```", "```java\n        @Override \n        public Result call() throws Exception {\n\n```", "```java\n        System.out.printf(\"%s: Staring\\n\",this.name);\n\n```", "```java\n        try { \n          long duration=(long)(Math.random()*10); \n          System.out.printf(\"%s: Waiting %d seconds for results.\\n\",\n                            this.name,duration); \n          TimeUnit.SECONDS.sleep(duration); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        int value=0; \n        for (int i=0; i<5; i++){ \n          value+=(int)(Math.random()*100); \n        }\n\n```", "```java\n        Result result=new Result(); \n        result.setName(this.name); \n        result.setValue(value);\n\n```", "```java\n        System.out.println(this.name+\": Ends\");\n\n```", "```java\n          return result; \n        }\n\n```", "```java\n        public class Main { \n\n          public static void main(String[] args) {\n\n```", "```java\n        ExecutorService executor=(ExecutorService)Executors\n                                               .newCachedThreadPool();\n\n```", "```java\n        List<Task> taskList=new ArrayList<>(); \n        for (int i=0; i<10; i++){ \n          Task task=new Task(\"Task-\"+i); \n          taskList.add(task); \n        }\n\n```", "```java\n        List<Future<Result>>resultList=null;\n\n```", "```java\n        try { \n          resultList=executor.invokeAll(taskList); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        executor.shutdown();\n\n```", "```java\n        System.out.println(\"Main: Printing the results\"); \n        for (int i=0; i<resultList.size(); i++){ \n          Future<Result> future=resultList.get(i); \n          try { \n            Result result=future.get(); \n            System.out.println(result.getName()+\": \"+result.getValue()); \n          } catch (InterruptedException | ExecutionException e) { \n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n        public class Task implements Callable<String> {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        public Task(String name) { \n          this.name=name; \n        }\n\n```", "```java\n        public String call() throws Exception { \n          System.out.printf(\"%s: Starting at : %s\\n\",name,new Date()); \n          return \"Hello, world\"; \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ScheduledExecutorService executor=Executors\n                                           .newScheduledThreadPool(1);\n\n```", "```java\n        System.out.printf(\"Main: Starting at: %s\\n\",new Date()); \n        for (int i=0; i<5; i++) { \n          Task task=new Task(\"Task \"+i); \n          executor.schedule(task,i+1 , TimeUnit.SECONDS); \n        }\n\n```", "```java\n        executor.shutdown();\n\n```", "```java\n        try { \n          executor.awaitTermination(1, TimeUnit.DAYS); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        System.out.printf(\"Main: Ends at: %s\\n\",new Date());\n\n```", "```java\n        public class Task implements Runnable {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        public Task(String name) { \n          this.name=name; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          System.out.printf(\"%s: Executed at: %s\\n\",name,new Date()); \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ScheduledExecutorService executor=Executors\n                                           .newScheduledThreadPool(1);\n\n```", "```java\n        System.out.printf(\"Main: Starting at: %s\\n\",new Date());\n\n```", "```java\n        Task task=new Task(\"Task\");\n\n```", "```java\n        ScheduledFuture<?> result=executor.scheduleAtFixedRate(task, 1,\n                                                  2, TimeUnit.SECONDS);\n\n```", "```java\n        for (int i=0; i<10; i++){ \n          System.out.printf(\"Main: Delay: %d\\n\",result\n                                     .getDelay(TimeUnit.MILLISECONDS));\n\n```", "```java\n          try { \n            TimeUnit.MILLISECONDS.sleep(500); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n        }\n\n```", "```java\n        executor.shutdown();\n\n```", "```java\n        try { \n          TimeUnit.SECONDS.sleep(5); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        System.out.printf(\"Main: Finished at: %s\\n\",new Date());\n\n```", "```java\n        public class Task implements Callable<String> { \n          @Override \n          public String call() throws Exception { \n            while (true){ \n              System.out.printf(\"Task: Test\\n\"); \n              Thread.sleep(100); \n            } \n          }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ThreadPoolExecutor executor=(ThreadPoolExecutor)Executors\n                                               .newCachedThreadPool();\n\n```", "```java\n        Task task=new Task();\n\n```", "```java\n        System.out.printf(\"Main: Executing the Task\\n\"); \n        Future<String> result=executor.submit(task);\n\n```", "```java\n        try { \n          TimeUnit.SECONDS.sleep(2); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        System.out.printf(\"Main: Canceling the Task\\n\"); \n        result.cancel(true);\n\n```", "```java\n        System.out.printf(\"Main: Canceled: %s\\n\",result.isCancelled()); \n        System.out.printf(\"Main: Done: %s\\n\",result.isDone());\n\n```", "```java\n        executor.shutdown(); \n        System.out.printf(\"Main: The executor has finished\\n\");\n\n```", "```java\n        public class ExecutableTask implements Callable<String> {\n\n```", "```java\n        private final String name; \n        public String getName(){ \n          return name; \n        }\n\n```", "```java\n        public ExecutableTask(String name){ \n          this.name=name; \n        }\n\n```", "```java\n        @Override \n        public String call() throws Exception { \n          try { \n            long duration=(long)(Math.random()*10); \n            System.out.printf(\"%s: Waiting %d seconds for results.\\n\",\n                              this.name,duration); \n            TimeUnit.SECONDS.sleep(duration); \n          } catch (InterruptedException e) {}     \n          return \"Hello, world. I'm \"+name; \n        }\n\n```", "```java\n        public class ResultTask extends FutureTask<String> {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        public ResultTask(ExecutableTask callable) { \n          super(callable); \n          this.name= callable.getName(); \n        }\n\n```", "```java\n        @Override \n        protected void done() { \n          if (isCancelled()) { \n            System.out.printf(\"%s: Has been canceled\\n\",name); \n          } else { \n            System.out.printf(\"%s: Has finished\\n\",name); \n          } \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ExecutorService executor=Executors.newCachedThreadPool();\n\n```", "```java\n        ResultTask resultTasks[]=new ResultTask[5];\n\n```", "```java\n        for (int i=0; i<5; i++) { \n          ExecutableTask executableTask=new ExecutableTask(\"Task \"+i); \n          resultTasks[i]=new ResultTask(executableTask); \n          executor.submit(resultTasks[i]); \n        }\n\n```", "```java\n        try { \n          TimeUnit.SECONDS.sleep(5); \n        } catch (InterruptedException e1) { \n          e1.printStackTrace(); \n        }\n\n```", "```java\n        for (int i=0; i<resultTasks.length; i++) { \n          resultTasks[i].cancel(true); \n        }\n\n```", "```java\n        for (int i=0; i<resultTasks.length; i++) { \n          try { \n            if (!resultTasks[i].isCancelled()){ \n              System.out.printf(\"%s\\n\",resultTasks[i].get()); \n            } \n          } catch (InterruptedException | ExecutionException e) { \n            e.printStackTrace(); \n          }     \n        }\n\n```", "```java\n            executor.shutdown(); \n          } \n        }\n\n```", "```java\n        public class ReportGenerator implements Callable<String> {\n\n```", "```java\n        private final String sender; \n        private final String title;\n\n```", "```java\n        public ReportGenerator(String sender, String title){ \n          this.sender=sender; \n          this.title=title; \n        }\n\n```", "```java\n        @Override \n        public String call() throws Exception { \n          try { \n            Long duration=(long)(Math.random()*10); \n            System.out.printf(\"%s_%s: ReportGenerator: Generating a\n                              report during %d seconds\\n\",this.sender,\n                              this.title,duration); \n            TimeUnit.SECONDS.sleep(duration); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          }\n\n```", "```java\n          String ret=sender+\": \"+title; \n          return ret; \n        }\n\n```", "```java\n        public class ReportRequest implements Runnable {\n\n```", "```java\n        private final String name;\n\n```", "```java\n        private final CompletionService<String> service;\n\n```", "```java\n        public ReportRequest(String name, CompletionService<String>\n                             service){ \n          this.name=name; \n          this.service=service; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          ReportGenerator reportGenerator=new ReportGenerator(name,\n                                                              \"Report\"); \n          service.submit(reportGenerator); \n\n        }\n\n```", "```java\n        public class ReportProcessor implements Runnable {\n\n```", "```java\n        private final CompletionService<String> service;\n\n```", "```java\n        private volatile boolean end;\n\n```", "```java\n        public ReportProcessor (CompletionService<String> service){ \n          this.service=service; \n          end=false; \n        }\n\n```", "```java\n        @Override \n        public void run() { \n          while (!end){ \n            try { \n              Future<String> result=service.poll(20, TimeUnit.SECONDS);\n\n```", "```java\n              if (result!=null) { \n                String report=result.get(); \n                System.out.printf(\"ReportReceiver: Report Received: %s\\n\",\n                                  report); \n              }       \n            } catch (InterruptedException | ExecutionException e) { \n              e.printStackTrace(); \n            } \n          } \n          System.out.printf(\"ReportSender: End\\n\"); \n        }\n\n```", "```java\n        public void stopProcessing() { \n          this.end = true; \n        }\n\n```", "```java\n        public class Main { \n          public static void main(String[] args) {\n\n```", "```java\n        ExecutorService executor=Executors.newCachedThreadPool();\n\n```", "```java\n        CompletionService<String> service=new\n                                   ExecutorCompletionService<>(executor);\n\n```", "```java\n        ReportRequest faceRequest=new ReportRequest(\"Face\", service); \n        ReportRequest onlineRequest=new ReportRequest(\"Online\", service);   \n        Thread faceThread=new Thread(faceRequest); \n        Thread onlineThread=new Thread(onlineRequest);\n\n```", "```java\n        ReportProcessor processor=new ReportProcessor(service); \n        Thread senderThread=new Thread(processor);\n\n```", "```java\n        System.out.printf(\"Main: Starting the Threads\\n\"); \n        faceThread.start(); \n        onlineThread.start(); \n        senderThread.start();\n\n```", "```java\n        try { \n          System.out.printf(\"Main: Waiting for the report generators.\\n\"); \n          faceThread.join(); \n          onlineThread.join(); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        System.out.printf(\"Main: Shutting down the executor.\\n\"); \n        executor.shutdown(); \n        try { \n          executor.awaitTermination(1, TimeUnit.DAYS); \n        } catch (InterruptedException e) { \n          e.printStackTrace(); \n        }\n\n```", "```java\n        processor.stopProcessing(); \n        System.out.println(\"Main: Ends\");\n\n```"]