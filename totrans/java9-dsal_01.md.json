["```java\npublic static long computeRemainder(long base, long power, long divisor){ \n  long baseRaisedToPower = 1;\n  for(long i=1;i<=power;i++){ \n    baseRaisedToPower *= base;\n  }\n  return baseRaisedToPower % divisor;\n}\n```", "```java\npublic static void main(String [] args){\n  long startTime = System.currentTimeMillis();\n  for(int i=0;i<1_000_000_000;i++){\n    computeRemainder(2, 10, 7);\n  }\n  long endTime = System.currentTimeMillis();\n  System.out.println(endTime - startTime);\n}\n```", "```java\npublic static long computeRemainderCorrected(long base, long power, long divisor){\n  long baseRaisedToPower = 1;\n  for(long i=1;i<=power;i++){\n    baseRaisedToPower *= base;\n    baseRaisedToPower %= divisor;\n  }\n  return baseRaisedToPower;\n}\n```", "```java\npublic static long computeRemainderUsingEBS(long base, long power, long divisor){\n  long baseRaisedToPower = 1;\n  long powerBitsReversed = 0;\n  int numBits=0;\n```", "```java\n  while(power>0){\n    powerBitsReversed <<= 1;\n    powerBitsReversed += power & 1;\n    power >>>= 1;\n    numBits++;\n  }\n```", "```java\n  while (numBits-->0){\n    if(powerBitsReversed%2==1){\n      baseRaisedToPower *= baseRaisedToPower * base;\n    }else{\n      baseRaisedToPower *= baseRaisedToPower;\n    }\n    baseRaisedToPower %= divisor;\n    powerBitsReversed>>>=1;\n  }\n  return baseRaisedToPower;\n}\n```", "```java\npublic static void main(String [] args){\n  System.out.println(computeRemainderUsingEBS(13, 10_000_000, 7));\n\n  long startTime = System.currentTimeMillis();\n  for(int i=0;i<1000;i++){\n    computeRemainderCorrected(13, 10_000_000, 7);\n  } \n  long endTime = System.currentTimeMillis();\n  System.out.println(endTime - startTime);\n\n  startTime = System.currentTimeMillis();\n  for(int i=0;i<1000;i++){\n    computeRemainderUsingEBS(13, 10_000_000, 7);\n  }\n  endTime = System.currentTimeMillis();\n  System.out.println(endTime - startTime);\n}\n```"]