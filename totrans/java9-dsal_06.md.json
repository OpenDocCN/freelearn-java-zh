["```java\n10, 5, 2, 3, 78, 53, 3,1,1,24,1,35,35,2,67,4,33,30\n```", "```java\n@FunctionalInterface \npublic interface Comparator<T> { \n     int compare(T o1, T o2); \n}\n```", "```java\npublic static <E> void quicksort(E[] array, int start, int end,\nComparator<E> comparator) {\n\n    if (end - start <= 0) {\n        return;\n    }\n\n    int i = start;\n    int j = end - 1;\n    boolean movingI = true;\n\n    while (i < j) {\n\n    if (comparator.compare(array[i], array[j]) > 0) {\n        swap(array, i, j);\n        movingI = !movingI;\n    } else {\n        if (movingI) {\n            i++;\n        } else {\n            j--;\n            }\n        }\n    }\n\n    quicksort(array, start, i, comparator);\n    quicksort(array, i + 1, end, comparator);\n}\n```", "```java\npublic static <E> void quicksort(E[] array, Comparator<E> comparator){\n    quicksort(array, 0, array.length, comparator);\n}\n```", "```java\nInteger[] array =\nnew Integer[]{10, 5, 2, 3, 78, 53, 3, 1, 1, 24, 1, 35,\n35, 2, 67, 4, 33, 30};\n\nquicksort(array, (a, b) -> a - b);\nSystem.out.println(Arrays.toString(array));\n```", "```java\n[1, 1, 1, 2, 2, 3, 3, 4, 5, 10, 24, 30, 33, 35, 35, 53, 67, 78]\n```", "```java\nT(n) = T(n-1) + a(n-1) + b where a and b are some constants.\n=> T(n) – T(n-1) = a(n-1) + b\n```", "```java\nT(n) – T(n-1) = a(n-1) + b\nT(n-1) – T(n-2) = a(n-2) + b\nT(n-2) – T(n-3) = a(n-3) + b\n...\nT(2) – T(1) = a(1) + b\n```", "```java\nT(n) – T(1) = a (1+2+3+...+(n-1)) + (n-1)b\n=> T(n) – T(1) = an(n-1)/2 + (n-1)b\n=> T(n) = an(n-1)/2 + (n-1)b + T(1)\n=> T(n) = O(n2)\n```", "```java\nT(n) = 2T((n-1)/2) + a(n-1) + b\n```", "```java\nT(n) = 2T(n/2) + a(n-1) + b\n```", "```java\nS(m) = 2S(m-1) + a 2m + (b-a)\n```", "```java\nS(m) = 2(2S(m-2) + a 2m-1 + (b-a)) + a 2m + (b-a)\n=> S(m) = 4 S(m-2) + a (2m + 2m) + (b-a)(2+1)\n```", "```java\nS(m) = 8 S(m-3) + a (2m + 2m  + 2m) + (b-a)(4+2+1)\n…\nS(m) = 2m S(0) + a (2m+ 2m  + 2m+ 2m) + (b-a)(2m-1+ 2m-2+ … + 2+1)\n=>S(m) = 2m S(0) + a m . 2m+ (b-a) (2m – 1)\n=> T(n) = nT(1) + a . (lg n) . n + (b-a) (n-1)\n=> T(n) =  θ(n lg n)\n```", "```java\npublic static <E> void quicksort(E[] array, int start, int end,\nComparator<E> comparator) {\n    if (end - start <= 0) {\n        return;\n    }\n int pivotIndex = (int)((end-start)*Math.random()) + start;\n swap(array, pivotIndex, end-1);\n    //let's find the pivot.\n    int i = start;\n    int j = end - 1;\n    boolean movingI = true;\n    while (i < j) {\n        if (comparator.compare(array[i], array[j]) > 0) {\n            swap(array, i, j);\n            movingI = !movingI;\n        } else {\n            if (movingI) {\n                i++;\n            } else {\n                j--;\n            }\n        }\n    }\n    quicksort(array, start, i, comparator);\n    quicksort(array, i + 1, end, comparator);\n}\n```", "```java\nprivate static <E> void merge(E[] array, int start, int mid, int end, E[] targetArray, Comparator<E> comparator) {\n    int i = start;\n    int j = mid;\n    int k = start;\n    while (k < end) {\n```", "```java\n        if (i == mid) {\n            targetArray[k] = array[j];\n            j++;\n        } else if (j == end) {\n            targetArray[k] = array[i];\n            i++;\n        } \n```", "```java\n        else if (comparator.compare(array[i], array[j]) > 0) {\n            targetArray[k] = array[j];\n            j++;\n        } else {\n            targetArray[k] = array[i];\n            i++;\n        }\n```", "```java\n        k++;\n    }\n}\n```", "```java\npublic static <E> void mergeSort(E[] sourceArray, int start,\nint end, E[] tempArray, Comparator<E> comparator) {\n```", "```java\n    if (start >= end - 1) {\n        return;\n    }\n```", "```java\n    int mid = (start + end) / 2;\n    mergeSort(sourceArray, start, mid, tempArray, comparator);\n    mergeSort(sourceArray, mid, end, tempArray, comparator);\n    merge(sourceArray, start, mid, end, tempArray, comparator);\n```", "```java\n    System.arraycopy(tempArray, start, sourceArray, start,\n        end - start);\n}\n```", "```java\nT(n) = 2T(n/2) + an + b\n```", "```java\n    private static <E> void merge(E[] arrayL, E[] arrayR, \n    int start, int mid, int end, E[] targetArray, \n    Comparator<E> comparator) { \n        int i = start; \n        int j = mid; \n        int k = start; \n        while (k < end) { \n            if (i == mid) { \n                targetArray[k] = arrayR[j]; \n                j++; \n            } else if (j == end) { \n                targetArray[k] = arrayL[i]; \n                i++; \n            } else if (comparator.compare(arrayL[i], arrayR[j]) > 0) { \n                targetArray[k] = arrayR[j]; \n                j++; \n            } else { \n                targetArray[k] = arrayL[i]; \n                i++; \n            } \n            k++; \n        } \n}\n```", "```java\npublic static <E> E[] mergeSortNoCopy(E[] sourceArray, int start,\nint end, E[] tempArray, Comparator<E> comparator) {\n    if (start >= end - 1) {\n        return sourceArray;\n    }\n```", "```java\n    int mid = (start + end) / 2;\n    E[] sortedPart1 =\n    mergeSortNoCopy(sourceArray, start, mid, tempArray,\n                    comparator);\n    E[] sortedPart2 =\n    mergeSortNoCopy(sourceArray, mid, end, tempArray,\n                    comparator);\n```", "```java\n    if (sortedPart2 == sortedPart1) {\n        if (sortedPart1 == sourceArray) {\n            merge(sortedPart1, sortedPart2, start, mid, end,\n                  tempArray, comparator);\n            return tempArray;\n        } else {\n            merge(sortedPart1, sortedPart2, start, mid, end,\n            sourceArray, comparator);\n            return sourceArray;\n        }\n    } else {\n```", "```java\n        merge(sortedPart1, sortedPart2, start, mid, end,\n              sortedPart2, comparator);\n        return sortedPart2;\n    }\n}\n```", "```java\nInteger[] anotherArray = new Integer[array.length];\narray = mergeSortNoCopy(array, 0, array.length, anotherArray,\n(a, b)->a-b);\nSystem.out.println(Arrays.toString(array));\n```", "```java\n[1, 1, 1, 2, 2, 3, 3, 4, 5, 10, 24, 30, 33, 35, 35, 53, 67, 78]\n```"]