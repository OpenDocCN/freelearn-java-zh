- en: Chapter 3. Using Controllers and Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。使用控制器和视图
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Associating a route to a controller method
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将路由关联到控制器方法
- en: Using a JSP view
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JSP视图
- en: Passing attributes from a controller to a JSP view
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器传递属性到JSP视图
- en: Using dynamic route parameters in a controller method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在控制器方法中使用动态路由参数
- en: Using a common prefix for the routes of a controller
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用控制器路由的公共前缀
- en: Using a page template with Tiles
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Tiles页面模板
- en: Executing some code before and after controllers using interceptors
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用拦截器在控制器前后执行一些代码
- en: Building multilingual pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建多语言页面
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'A Spring web application uses a **MVC** (**Model-View-Controller**) architecture
    to process HTTP requests, as shown in the following image:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Spring Web应用程序使用**MVC**（**模型-视图-控制器**）架构来处理HTTP请求，如下面的图像所示：
- en: '![Introduction](img/5807OS_03_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/5807OS_03_01.jpg)'
- en: An HTTP request, identified by a route (for example, `/user/list`), executes
    a controller method. A view, usually a JSP file, is rendered afterwards and the
    resulting HTML is sent back as a response.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个HTTP请求，由一个路由（例如，`/user/list`）标识，执行一个控制器方法。之后渲染一个视图，通常是一个JSP文件，并将生成的HTML作为响应发送回去。
- en: 'In this chapter, we will start by creating a controller and view. Then, you''ll
    learn how to retrieve URL parameters from a controller method. We''ll cover two
    standard ways to reduce code repetition with page templates and URL prefixes.
    We will finish with more advanced topics related to controllers and views: interceptors
    and internationalization.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从创建控制器和视图开始。然后，你将学习如何从控制器方法中检索URL参数。我们将介绍两种使用页面模板和URL前缀来减少代码重复的标准方法。最后，我们将探讨与控制器和视图相关的高级主题：拦截器和国际化。
- en: 'The recipes in this chapter will work with a project similar to the one in
    the *Creating a Spring web application* recipe in [Chapter 1](ch01.html "Chapter 1. Creating
    a Spring Application"), *Creating a Spring Application*, with a Spring configuration
    class annotated with `@EnableWebMvc` and scanning a Java package dedicated to
    controller classes:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的食谱将与第1章中“创建Spring Web应用程序”食谱类似的项目一起工作，第1章“创建Spring应用程序”，其中包含一个用`@EnableWebMvc`注解的Spring配置类，并扫描一个专门用于控制器类的Java包：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the project structure:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这是项目结构：
- en: '![Introduction](img/5807OS_03_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/5807OS_03_04.jpg)'
- en: Associating a route to a controller method
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将路由关联到控制器方法
- en: In this recipe, you will learn how to define a controller method to be executed
    for a given route.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将学习如何定义一个控制器方法，用于执行给定路由。
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here are the steps for creating a controller method for a given route:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建给定路由的控制器方法的步骤如下：
- en: 'Create a controller class in your controller package (for example, `com.springcookbook.controller`).
    This is a normal Java class annotated with `@Controller`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的控制器包（例如，`com.springcookbook.controller`）中创建一个控制器类。这是一个用`@Controller`注解的正常Java类：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a controller method. This is a standard Java method annotated with `@RequestMapping`,
    which takes the route as a parameter:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个控制器方法。这是一个标准的Java方法，用`@RequestMapping`注解，它将路由作为参数：
- en: '[PRE2]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: A request with the `/user/list` route will execute the `userList()`method.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个具有`/user/list`路由的请求将执行`userList()`方法。
- en: Using a JSP view
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSP视图
- en: In this recipe, you'll learn how to render and return a JSP view after the execution
    of a controller method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将学习如何在控制器方法执行后渲染并返回一个JSP视图。
- en: How to do it…
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Here are the steps to create a JSP view:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 创建JSP视图的步骤如下：
- en: 'Add the Maven dependency for JSTL in `pom.xml`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加JSTL的Maven依赖项：
- en: '[PRE3]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a JSP view resolver to the Spring configuration class:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将JSP视图解析器添加到Spring配置类中：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a controller method:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个控制器方法：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create the `/WEB-INF/jsp/user/list.jsp` JSP:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`/WEB-INF/jsp/user/list.jsp` JSP：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: The controller method path is `/user/list`. Using the JSP view resolver, Spring
    will find and render the corresponding `/WEB-INF/jsp/user/list.jsp` JSP.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器方法路径是`/user/list`。使用JSP视图解析器，Spring将找到并渲染相应的`/WEB-INF/jsp/user/list.jsp`
    JSP。
- en: If the path had been `/user_list`, the corresponding JSP would have been `/WEB-INF/jsp/user_list.jsp`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径是`/user_list`，相应的JSP将是`/WEB-INF/jsp/user_list.jsp`。
- en: 'This is the current project structure:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是当前的项目结构：
- en: '![How it works…](img/5807OS_03_05.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理…](img/5807OS_03_05.jpg)'
- en: There's more…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It''s possible to explicitly return a `String` object from the controller method,
    which Spring will use to find the JSP. In this example, `/WEB-INF/jsp/my_friends.jsp`
    will be used:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制器方法显式返回一个`String`对象是可能的，Spring将使用它来查找JSP。在这个例子中，将使用`/WEB-INF/jsp/my_friends.jsp`：
- en: '[PRE7]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For more information about what can be done in a JSP file, refer to [http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm](http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有关在JSP文件中可以做什么的更多信息，请参阅[http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm](http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm)。
- en: Thymeleaf, FreeMarker, and Velocity are popular view frameworks that provide
    an alternative to JSPs. FreeMarker and Velocity are supported by Spring by default.
    Thymeleaf provides its own view resolver.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Thymeleaf、FreeMarker和Velocity是流行的视图框架，它们提供了对JSP的替代方案。FreeMarker和Velocity默认由Spring支持。Thymeleaf提供自己的视图解析器。
- en: Passing attributes from a controller to a JSP view
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器传递属性到JSP视图
- en: In this recipe, you'll learn how to set attributes in a controller method and
    use them in a JSP view.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在控制器方法中设置属性并在JSP视图中使用它们。
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to pass data from a controller to a view:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从控制器传递数据到视图的步骤如下：
- en: 'Add a `Model` argument to the controller method:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Model`参数添加到控制器方法中：
- en: '[PRE8]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the controller method, add attributes to the `Model` object:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，向`Model`对象添加属性：
- en: '[PRE9]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the attributes in the JSP file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在JSP文件中使用属性：
- en: '[PRE10]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `nbUsers` variable is set to `13` in the controller. In the JSP file, the
    `${nbUsers}` **EL** (**Expression Language**) element will be rendered to `13`,
    so that the following HTML will be returned:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器中，`nbUsers`变量被设置为`13`。在JSP文件中，`${nbUsers}` **EL**（**表达式语言**）元素将被渲染为`13`，因此将返回以下HTML：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using dynamic route parameters in a controller method
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在控制器方法中使用动态路由参数
- en: 'Now we will define dynamic segments for a route and use them in the associated
    controller method. For example, we want the `/user/5/name` and `/user/6/email`
    routes to execute the same controller method with different arguments: `showUserField(5,
    "name")` and `showUserField(6, "email")`, respectively.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将定义路由的动态段并在相关的控制器方法中使用它们。例如，我们希望`/user/5/name`和`/user/6/email`路由执行相同的控制器方法，但使用不同的参数：`showUserField(5,
    "name")`和`showUserField(6, "email")`。
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use `{}` to enclose the dynamic route segments and `@PathVariable` to annotate
    the corresponding controller method arguments:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`{}`括起来包含动态路由段，并使用`@PathVariable`注解相应的控制器方法参数：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A request for the `/user/5/email` route will execute the `showUserField(5,"email")`
    method. `@PathVariable("id") Long userId` casts the `id` route parameter to the
    `userId` method argument. Similarly, the `field` route parameter is passed as
    `String` to `showUserField()`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`/user/5/email`路由的请求将执行`showUserField(5,"email")`方法。`@PathVariable("id") Long
    userId`将路由参数`id`转换为`userId`方法参数。同样，`field`路由参数作为`String`传递给`showUserField()`。
- en: An incorrect route such as `/user/test/email` (it's incorrect because the `test`
    substring cannot be converted to a `Long` object) will trigger a 400 server error
    with the message **The request sent by the client was syntactically incorrect.**
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个不正确的路由，如`/user/test/email`（这是不正确的，因为`test`子串不能转换为`Long`对象），将触发一个带有消息**客户端发送的请求在语法上不正确**的400服务器错误。
- en: Using a common prefix for the routes of a controller
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用控制器路由的公共前缀
- en: In this recipe, we will define in one place a route prefix shared by all the
    routes of a controller. We will start the routes of the `UserController` controller
    with `/user`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将定义一个控制器所有路由共享的路由前缀。我们将以`/user`开始`UserController`控制器的路由。
- en: How to do it…
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to set a route prefix:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 设置路由前缀的步骤如下：
- en: 'Add `@RequestMapping` with the common route prefix to the controller class:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将带有公共路由前缀的`@RequestMapping`添加到控制器类中：
- en: '[PRE13]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add `@RequestMapping` with the remainder of the route to the controller methods:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将带有剩余路由的`@RequestMapping`添加到控制器方法中：
- en: '[PRE14]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works…
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A request for the `/user/add` route will execute the `addUser()`method. A request
    for the `/user/list` route will execute the `userList()`method.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`/user/add`路由的请求将执行`addUser()`方法。对于`/user/list`路由的请求将执行`userList()`方法。
- en: Using a page template with Tiles
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Tiles页面模板
- en: With a page template, avoid repeating the common elements of the pages (HTML
    head, header, footer, navigation, and so on) in every JSP.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用页面模板，避免在每一个JSP中重复页面的公共元素（HTML头部、页眉、页脚、导航等）。
- en: How to do it…
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to use Tiles:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Tiles Maven dependencies in `pom.xml`:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In the Spring configuration class, remove the JSP view resolver (if it's there).
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare Tiles in the Spring configuration class:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Create the `/WEB-INF/tiles.xml` Tiles configuration file:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create the `/WEB-INF/jsp/templates/template.jsp` page template:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the controller methods, return the base name of a standard JSP file. For
    example, for `/jsp/home.jsp`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the Spring configuration is loaded, Tiles is initialized using the declared
    `tiles.xml` configuration file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5807OS_03_02.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
- en: When a request arrives, the controller method is executed and returns the `"home"`
    String, which matches the definition named `"*"` in `tiles.xml`. This definition
    will use the `template` definition and pass the `body` variable to it with the
    `/WEB-INF/jsp/home.jsp` value. In `template.jsp`, the `tiles:insertAttribute`
    tag will be replaced by the contents of `home.jsp`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, the `home.jsp` file is integrated with `template.jsp` and the
    resulting HTML is sent as a response.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'In `template.php`, make sure to include the following to be able to use Tiles
    tags such as `<tiles:insertAttribute>`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: There's more…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tiles can be used when JSP files are in subfolders and support multiple page
    templates. It's also possible to define repeated text in one place.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the JSP with subfolders
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the number of JSP files grows, you can maintain them by grouping them according
    to sections, using subfolders:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the controller method, return the folder with the `jsp` base name, for example,
    `user/list`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tiles.xml`, add the definition:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Using multiple page templates
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To handle multiple templates, define a prefix for each template in `tiles.xml`.
    For example, we defined below a main template with the `main_ prefix` using the
    `template1.jsp` JSP and a secondary template with the `secondary_ prefix` using
    the `template2.jsp` JSP:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the controller method, for `home.jsp`, return `"main_home"` to use `template1`
    or `"secondary_home"` to use `template2`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: Defining page titles only once using a text attribute
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A title usually needs to appear twice in an HTML page: once in the `<title>`
    tag of the page `<head>` section and once in a `<h1>` tag of the page `<body>`
    section. Using Tiles, you can define it only once in an external `.properties`
    file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tiles.xml`, add a title attribute to the template definition:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In `template.jsp`, get the title and use it:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Create the `src/main/resources/messages.properties` file:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: To learn more about Tiles, go to [https://tiles.apache.org/framework/tutorial/](https://tiles.apache.org/framework/tutorial/).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Executing some code before and after controllers using interceptors
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how, with interceptors, we can execute some code
    across all controllers at different moments of a request workflow with the `preHandle()`,
    `postHandle()`, and `afterCompletion()` hooks:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing some code before and after controllers using interceptors](img/5807OS_03_03.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![使用拦截器在控制器前后执行一些代码](img/5807OS_03_03.jpg)'
- en: Interceptors are used for authentication, logging, and profiling (among others).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器用于身份验证、日志记录和性能分析（等等）。
- en: How to do it…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the steps to create and register an interceptor:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建和注册拦截器的步骤：
- en: 'Create a class extending `HandlerInterceptorAdapter`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个扩展`HandlerInterceptorAdapter`的类：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Override the methods you want to use:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 覆盖你想要使用的方法：
- en: '[PRE28]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Note
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that if `preHandle()` returns `false`, the request workflow will be stopped
    and the controller method won't be called.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果`preHandle()`返回`false`，则请求工作流程将停止，并且不会调用控制器方法。
- en: 'Make the Spring configuration class extend `WebMvcConfigurerAdapter` and annotate
    it with `@EnableWebMvc`:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使Spring配置类扩展`WebMvcConfigurerAdapter`并使用`@EnableWebMvc`注解：
- en: '[PRE29]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the Spring configuration class, declare the interceptor as a bean and register
    it with the `addInterceptors()`method:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置类中，将拦截器声明为一个bean，并使用`addInterceptors()`方法注册它：
- en: '[PRE30]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The interceptor methods are executed at the corresponding moments of the request
    workflow.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 拦截器方法在请求工作流程的相应时刻执行。
- en: There's more…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多…
- en: 'To restrict the interceptor to specific URLs, add path patterns to the interceptor
    registration:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要将拦截器限制为特定的URL，请向拦截器注册中添加路径模式：
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In this example, the interceptor methods will be executed for `/home`, `/user/list`,
    and /`user/add` but not for `/contact`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，拦截器方法将为`/home`、`/user/list`和`/user/add`执行，但不会为`/contact`执行。
- en: Building multilingual pages
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建多语言页面
- en: Next we will learn how to create a multilingual page (in English and French)
    using only one JSP, and display it in English by default, with a link to switch
    to French. We will then store the text outside the JSP, in both languages, in
    separate `.properties` files.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何使用单个JSP创建多语言页面（英语和法语），默认显示英语，并提供一个链接切换到法语。然后，我们将文本存储在JSP之外，在两种语言中，分别存储在单独的`.properties`文件中。
- en: How to do it…
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Here are the steps to build a bilingual JSP view:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是构建双语文本JSP视图的步骤：
- en: 'Create the JSP:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建JSP：
- en: '[PRE32]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Create the English `.properties` file `src/main/resources/messages.properties`:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建英文`.properties`文件`src/main/resources/messages.properties`：
- en: '[PRE33]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Create the French `.properties` file `src/main/resources/messages_fr.properties`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建法语`.properties`文件`src/main/resources/messages_fr.properties`：
- en: '[PRE34]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In Spring configuration, declare the `.properties` files:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring配置中，声明`.properties`文件：
- en: '[PRE35]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Make sure that the Spring configuration class extends `WebMvcConfigurerAdapter`
    and is annotated with `@EnableWebMvc`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保Spring配置类扩展`WebMvcConfigurerAdapter`并使用`@EnableWebMvc`注解：
- en: '[PRE36]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Define a `LocaleChangeInterceptor` interceptor to allow the current language
    to be changed with a `lang` URL parameter. Register the interceptor:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个允许使用`lang` URL参数更改当前语言的`LocaleChangeInterceptor`拦截器。注册拦截器：
- en: '[PRE37]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Store the user language selection in a cookie and declare the default language:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在cookie中存储用户语言选择并声明默认语言：
- en: '[PRE38]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: How it works…
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The following steps describe how the preceding code works:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤描述了前面代码的工作原理：
- en: When a request comes in, Spring first checks whether it has a cookie value containing
    a language. If the answer is yes, it uses it as the current language; otherwise,
    it uses the default language. This behavior comes from the declaration of `CookieLocaleResolver`
    as the locale resolver.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当请求到来时，Spring首先检查它是否有一个包含语言值的cookie。如果答案是肯定的，它就使用它作为当前语言；否则，它使用默认语言。这种行为来自将`CookieLocaleResolver`声明为区域解析器的声明。
- en: The `LocaleChangeInterceptor` then checks whether there's a `lang` parameter
    in the URL. If the answer is yes, it uses it as the current language (instead
    of the default or cookie language).
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后`LocaleChangeInterceptor`检查URL中是否存在`lang`参数。如果答案是肯定的，它就使用它作为当前语言（而不是默认或cookie语言）。
- en: When `home.jsp` is rendered, its text is fetched from the `.properties` file
    corresponding to the current language. If no text is found for a given message
    key, the key itself is displayed. This behavior comes from `messageSource.setUseCodeAsDefaultMessage(true)`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当`home.jsp`被渲染时，其文本是从对应当前语言的`.properties`文件中获取的。如果找不到给定消息键的文本，则显示键本身。这种行为来自`messageSource.setUseCodeAsDefaultMessage(true)`。
- en: There's more…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多…
- en: You may need to retrieve the current language name from a controller method.
    You may also need to have the page language in the URL instead of in a cookie.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要从控制器方法中检索当前语言名称。你也可能需要在URL中而不是在cookie中设置页面语言。
- en: Getting the current language
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 获取当前语言
- en: 'To retrieve the current language from a controller or an interceptor, use the
    following code:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要从控制器或拦截器中检索当前语言，请使用以下代码：
- en: '[PRE39]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Using the language in the URL
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在URL中使用语言
- en: 'Spring does not provide a convenient way to handle the language in the URL
    (for example, `/en/user/list`). Instead, it has to be done manually:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Spring没有提供方便的方式来处理URL中的语言（例如，`/en/user/list`）。相反，必须手动完成：
- en: Use an interceptor to retrieve the language from the URL and override the current
    language.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用拦截器从URL中检索语言并覆盖当前语言。
- en: 'Prefix the controller method mappings with the supported languages (so that
    Spring can retrieve it from the route with the language):'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将控制器方法映射前缀为支持的语言（以便Spring可以从带有语言的路由中检索它）：
- en: '[PRE40]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'When generating an internal link, prefix it with the current language, assuming
    that `$lang` contains the current language:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当生成内部链接时，假设`$lang`包含当前语言，请在其前加上当前语言：
- en: '[PRE41]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
