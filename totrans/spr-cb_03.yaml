- en: Chapter 3. Using Controllers and Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Associating a route to a controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a JSP view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passing attributes from a controller to a JSP view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dynamic route parameters in a controller method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a common prefix for the routes of a controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a page template with Tiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing some code before and after controllers using interceptors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building multilingual pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Spring web application uses a **MVC** (**Model-View-Controller**) architecture
    to process HTTP requests, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5807OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: An HTTP request, identified by a route (for example, `/user/list`), executes
    a controller method. A view, usually a JSP file, is rendered afterwards and the
    resulting HTML is sent back as a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will start by creating a controller and view. Then, you''ll
    learn how to retrieve URL parameters from a controller method. We''ll cover two
    standard ways to reduce code repetition with page templates and URL prefixes.
    We will finish with more advanced topics related to controllers and views: interceptors
    and internationalization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The recipes in this chapter will work with a project similar to the one in
    the *Creating a Spring web application* recipe in [Chapter 1](ch01.html "Chapter 1. Creating
    a Spring Application"), *Creating a Spring Application*, with a Spring configuration
    class annotated with `@EnableWebMvc` and scanning a Java package dedicated to
    controller classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/5807OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Associating a route to a controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to define a controller method to be executed
    for a given route.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps for creating a controller method for a given route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a controller class in your controller package (for example, `com.springcookbook.controller`).
    This is a normal Java class annotated with `@Controller`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a controller method. This is a standard Java method annotated with `@RequestMapping`,
    which takes the route as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A request with the `/user/list` route will execute the `userList()`method.
  prefs: []
  type: TYPE_NORMAL
- en: Using a JSP view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to render and return a JSP view after the execution
    of a controller method.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to create a JSP view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependency for JSTL in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a JSP view resolver to the Spring configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/WEB-INF/jsp/user/list.jsp` JSP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller method path is `/user/list`. Using the JSP view resolver, Spring
    will find and render the corresponding `/WEB-INF/jsp/user/list.jsp` JSP.
  prefs: []
  type: TYPE_NORMAL
- en: If the path had been `/user_list`, the corresponding JSP would have been `/WEB-INF/jsp/user_list.jsp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the current project structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5807OS_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It''s possible to explicitly return a `String` object from the controller method,
    which Spring will use to find the JSP. In this example, `/WEB-INF/jsp/my_friends.jsp`
    will be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For more information about what can be done in a JSP file, refer to [http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm](http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Thymeleaf, FreeMarker, and Velocity are popular view frameworks that provide
    an alternative to JSPs. FreeMarker and Velocity are supported by Spring by default.
    Thymeleaf provides its own view resolver.
  prefs: []
  type: TYPE_NORMAL
- en: Passing attributes from a controller to a JSP view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to set attributes in a controller method and
    use them in a JSP view.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to pass data from a controller to a view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `Model` argument to the controller method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller method, add attributes to the `Model` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the attributes in the JSP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `nbUsers` variable is set to `13` in the controller. In the JSP file, the
    `${nbUsers}` **EL** (**Expression Language**) element will be rendered to `13`,
    so that the following HTML will be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Using dynamic route parameters in a controller method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we will define dynamic segments for a route and use them in the associated
    controller method. For example, we want the `/user/5/name` and `/user/6/email`
    routes to execute the same controller method with different arguments: `showUserField(5,
    "name")` and `showUserField(6, "email")`, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use `{}` to enclose the dynamic route segments and `@PathVariable` to annotate
    the corresponding controller method arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A request for the `/user/5/email` route will execute the `showUserField(5,"email")`
    method. `@PathVariable("id") Long userId` casts the `id` route parameter to the
    `userId` method argument. Similarly, the `field` route parameter is passed as
    `String` to `showUserField()`.
  prefs: []
  type: TYPE_NORMAL
- en: An incorrect route such as `/user/test/email` (it's incorrect because the `test`
    substring cannot be converted to a `Long` object) will trigger a 400 server error
    with the message **The request sent by the client was syntactically incorrect.**
  prefs: []
  type: TYPE_NORMAL
- en: Using a common prefix for the routes of a controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will define in one place a route prefix shared by all the
    routes of a controller. We will start the routes of the `UserController` controller
    with `/user`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to set a route prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `@RequestMapping` with the common route prefix to the controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `@RequestMapping` with the remainder of the route to the controller methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A request for the `/user/add` route will execute the `addUser()`method. A request
    for the `/user/list` route will execute the `userList()`method.
  prefs: []
  type: TYPE_NORMAL
- en: Using a page template with Tiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With a page template, avoid repeating the common elements of the pages (HTML
    head, header, footer, navigation, and so on) in every JSP.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to use Tiles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Tiles Maven dependencies in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the Spring configuration class, remove the JSP view resolver (if it's there).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare Tiles in the Spring configuration class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/WEB-INF/tiles.xml` Tiles configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `/WEB-INF/jsp/templates/template.jsp` page template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the controller methods, return the base name of a standard JSP file. For
    example, for `/jsp/home.jsp`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the Spring configuration is loaded, Tiles is initialized using the declared
    `tiles.xml` configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5807OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a request arrives, the controller method is executed and returns the `"home"`
    String, which matches the definition named `"*"` in `tiles.xml`. This definition
    will use the `template` definition and pass the `body` variable to it with the
    `/WEB-INF/jsp/home.jsp` value. In `template.jsp`, the `tiles:insertAttribute`
    tag will be replaced by the contents of `home.jsp`.
  prefs: []
  type: TYPE_NORMAL
- en: To summarize, the `home.jsp` file is integrated with `template.jsp` and the
    resulting HTML is sent as a response.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `template.php`, make sure to include the following to be able to use Tiles
    tags such as `<tiles:insertAttribute>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tiles can be used when JSP files are in subfolders and support multiple page
    templates. It's also possible to define repeated text in one place.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the JSP with subfolders
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As the number of JSP files grows, you can maintain them by grouping them according
    to sections, using subfolders:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the controller method, return the folder with the `jsp` base name, for example,
    `user/list`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tiles.xml`, add the definition:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Using multiple page templates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To handle multiple templates, define a prefix for each template in `tiles.xml`.
    For example, we defined below a main template with the `main_ prefix` using the
    `template1.jsp` JSP and a secondary template with the `secondary_ prefix` using
    the `template2.jsp` JSP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the controller method, for `home.jsp`, return `"main_home"` to use `template1`
    or `"secondary_home"` to use `template2`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining page titles only once using a text attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A title usually needs to appear twice in an HTML page: once in the `<title>`
    tag of the page `<head>` section and once in a `<h1>` tag of the page `<body>`
    section. Using Tiles, you can define it only once in an external `.properties`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `tiles.xml`, add a title attribute to the template definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `template.jsp`, get the title and use it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `src/main/resources/messages.properties` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To learn more about Tiles, go to [https://tiles.apache.org/framework/tutorial/](https://tiles.apache.org/framework/tutorial/).
  prefs: []
  type: TYPE_NORMAL
- en: Executing some code before and after controllers using interceptors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how, with interceptors, we can execute some code
    across all controllers at different moments of a request workflow with the `preHandle()`,
    `postHandle()`, and `afterCompletion()` hooks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Executing some code before and after controllers using interceptors](img/5807OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interceptors are used for authentication, logging, and profiling (among others).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to create and register an interceptor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a class extending `HandlerInterceptorAdapter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the methods you want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that if `preHandle()` returns `false`, the request workflow will be stopped
    and the controller method won't be called.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Make the Spring configuration class extend `WebMvcConfigurerAdapter` and annotate
    it with `@EnableWebMvc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the Spring configuration class, declare the interceptor as a bean and register
    it with the `addInterceptors()`method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The interceptor methods are executed at the corresponding moments of the request
    workflow.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To restrict the interceptor to specific URLs, add path patterns to the interceptor
    registration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the interceptor methods will be executed for `/home`, `/user/list`,
    and /`user/add` but not for `/contact`.
  prefs: []
  type: TYPE_NORMAL
- en: Building multilingual pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next we will learn how to create a multilingual page (in English and French)
    using only one JSP, and display it in English by default, with a link to switch
    to French. We will then store the text outside the JSP, in both languages, in
    separate `.properties` files.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to build a bilingual JSP view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the JSP:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the English `.properties` file `src/main/resources/messages.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the French `.properties` file `src/main/resources/messages_fr.properties`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In Spring configuration, declare the `.properties` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Make sure that the Spring configuration class extends `WebMvcConfigurerAdapter`
    and is annotated with `@EnableWebMvc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `LocaleChangeInterceptor` interceptor to allow the current language
    to be changed with a `lang` URL parameter. Register the interceptor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Store the user language selection in a cookie and declare the default language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following steps describe how the preceding code works:'
  prefs: []
  type: TYPE_NORMAL
- en: When a request comes in, Spring first checks whether it has a cookie value containing
    a language. If the answer is yes, it uses it as the current language; otherwise,
    it uses the default language. This behavior comes from the declaration of `CookieLocaleResolver`
    as the locale resolver.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `LocaleChangeInterceptor` then checks whether there's a `lang` parameter
    in the URL. If the answer is yes, it uses it as the current language (instead
    of the default or cookie language).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When `home.jsp` is rendered, its text is fetched from the `.properties` file
    corresponding to the current language. If no text is found for a given message
    key, the key itself is displayed. This behavior comes from `messageSource.setUseCodeAsDefaultMessage(true)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may need to retrieve the current language name from a controller method.
    You may also need to have the page language in the URL instead of in a cookie.
  prefs: []
  type: TYPE_NORMAL
- en: Getting the current language
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To retrieve the current language from a controller or an interceptor, use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Using the language in the URL
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Spring does not provide a convenient way to handle the language in the URL
    (for example, `/en/user/list`). Instead, it has to be done manually:'
  prefs: []
  type: TYPE_NORMAL
- en: Use an interceptor to retrieve the language from the URL and override the current
    language.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Prefix the controller method mappings with the supported languages (so that
    Spring can retrieve it from the route with the language):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When generating an internal link, prefix it with the current language, assuming
    that `$lang` contains the current language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
