["```java\n    @ApplicationScoped\n    class MyBean {\n        public String name = \"Test Bean\";\n        public String getName(){\n            return name;\n        }\n    }\n    class Consumer {\n        @Inject\n        MyBean myBean;\n        public String getName() {\n            return myBean.getName();\n        }\n    }\n    ```", "```java\n    @Singleton\n    class EagerBean { ... }\n    class Consumer {\n        @Inject\n        EagerBean eagerBean;\n    }\n    ```", "```java\n    @RequestScoped\n    class RequestData {\n        public String getResponse(){\n            return \"string response\";\n        }\n    }\n    @Path(\"/\")\n    class Consumer {\n        @Inject\n        RequestData requestData;\n        @GET\n        @Path(\"/request\")\n        public String loadRequest(){\n            return requestData.getResponse();\n        }\n    }\n    ```", "```java\n    @Dependent\n    class DependentBean { ... }\n    @ApplicationScoped\n    class ConsumerApplication {\n        @Inject\n        DependentBean dependentBean;\n    }\n    @RequestScoped\n    class ConsumerRequest {\n        @Inject\n        DependentBean dependentBean;\n    }\n    ```", "```java\n    @SessionScoped\n    class SessionBean implements Serializable {\n        public String getSessionData(){\n            return \"sessionData\";\n        }\n    }\n    @Path(\"/\")\n    class Consumer {\n        @Inject\n        SessionBean sessionBean;\n        @GET\n        @Path(\"/sessionData\")\n        public String test(){\n            return sessionBean.getSessionData();\n        }\n    }\n    ```", "```java\n<dependency>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-resteasy</artifactId>\n</dependency>\n```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    @ApplicationScoped\n    public class RouterManagementH2Adapter implements\n      RouterManagementOutputPort {\n        @PersistenceContext\n        private EntityManager em;\n       /** Code omitted **/\n            private void setUpH2Database() {\n            EntityManagerFactory entityManagerFactory =\n            Persistence.createEntityManagerFactory(\n              \"inventory\");\n            EntityManager em =\n            entityManagerFactory.createEntityManager();\n            this.em = em;\n        }\n    }\n    ```", "```java\n    public interface RouterManagementUseCase {\n        void setOutputPort(\n        RouterManagementOutputPort\n          routerManagementOutputPort);\n        /** Code omitted **/\n    }\n    ```", "```java\n    @NoArgsConstructor\n    public class RouterManagementInputPort implements\n      RouterManagementUseCase {\n        private RouterManagementOutputPort\n        routerManagementOutputPort;\n        @Override\n        public void setOutputPort(\n        RouterManagementOutputPort\n          routerManagementOutputPort) {\n            this.routerManagementOutputPort =\n            routerManagementOutputPort;\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    import jakarta.inject.Inject;\n    @ApplicationScoped\n    public class RouterManagementInputPort implements\n      RouterManagementUseCase {\n        @Inject\n        RouterManagementOutputPort\n          routerManagementOutputPort;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class RouterManagementGenericAdapter {\n        @Inject\n        private RouterManagementUseCase\n          routerManagementUseCase;\n        /** Code omitted **/\n    }\n    ```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    @ApplicationScoped\n    public class SwitchManagementH2Adapter implements\n      SwitchManagementOutputPort {\n        @PersistenceContext\n        private EntityManager em;\n        /** Code omitted **/\n    }\n    ```", "```java\n    public interface SwitchManagementUseCase {\n        void setOutputPort(\n        SwitchManagementOutputPort\n          switchManagementOutputPort)\n    /** Code omitted **/\n    }\n    ```", "```java\n    @NoArgsConstructor\n    public class SwitchManagementInputPort implements\n      SwitchManagementUseCase {\n        private SwitchManagementOutputPort\n        switchManagementOutputPort;\n        @Override\n        public void setOutputPort(\n        SwitchManagementOutputPort\n          switchManagementOutputPort) {\n            this.switchManagementOutputPort =\n            switchManagementOutputPort;\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    import jakarta.inject.Inject;\n    @ApplicationScoped\n    public class SwitchManagementInputPort implements\n      SwitchManagementUseCase {\n        @Inject\n        private SwitchManagementOutputPort\n        switchManagementOutputPort;\n        /** Code omitted **/\n    }\n    ```", "```java\n    public class SwitchManagementGenericAdapter {\n        @Inject\n        private SwitchManagementUseCase\n          switchManagementUseCase;\n        @Inject\n        private RouterManagementUseCase\n          routerManagementUseCase;\n        /** Code omitted **/\n    }\n    ```", "```java\n    public SwitchManagementGenericAdapter (\n    RouterManagementUseCase routerManagementUseCase,\n      SwitchManagementUseCase switchManagementUseCase){\n        this.routerManagementUseCase =\n          routerManagementUseCase;\n        this.switchManagementUseCase =\n          switchManagementUseCase;\n    }\n    ```", "```java\n    public interface NetworkManagementUseCase {\n        void setOutputPort(\n        RouterManagementOutputPort\n          routerNetworkOutputPort);\n        /** Code omitted **/\n    }\n    ```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    import jakarta.inject.Inject;\n    public class NetworkManagementInputPort implements\n      NetworkManagementUseCase {\n        private RouterManagementOutputPort\n        routerManagementOutputPort;\n        @Override\n        public void setOutputPort(\n        RouterManagementOutputPort\n          routerManagementOutputPort) {\n            this.routerManagementOutputPort =\n           routerManagementOutputPort;\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class NetworkManagementInputPort implements\n      NetworkManagementUseCase {\n        @Inject\n        private RouterManagementOutputPort\n        routerManagementOutputPort;\n        /** Code omitted **/\n    }\n    ```", "```java\n    import jakarta.enterprise.context.ApplicationScoped;\n    import jakarta.inject.Inject;\n    @ApplicationScoped\n    public class NetworkManagementGenericAdapter {\n        @Inject\n        private SwitchManagementUseCase\n          switchManagementUseCase;\n        @Inject\n        private NetworkManagementUseCase\n          networkManagementUseCase;\n       /** Code omitted **/\n    }\n    ```", "```java\n    public NetworkManagementGenericAdapter(\n    SwitchManagementUseCase switchManagementUseCase, Net\n      workManagementUseCase networkManagementUseCase) {\n        this.switchManagementUseCase =\n          switchManagementUseCase;\n        this.networkManagementUseCase =\n          networkManagementUseCase;\n    }\n    ```", "```java\n    <dependency>\n      <groupId>io.quarkiverse.cucumber</groupId>\n      <artifactId>quarkus-cucumber</artifactId>\n      <version>1.0    .0</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.quarkus</groupId>\n      <artifactId>quarkus-junit5</artifactId>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    <dependency>\n      <groupId>io.cucumber</groupId>\n      <artifactId>cucumber-java</artifactId>\n      <version>${cucumber.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.cucumber</groupId>\n      <artifactId>cucumber-junit</artifactId>\n      <version>${cucumber.version}</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>io.cucumber</groupId>\n      <artifactId>cucumber-picocontainer</artifactId>\n      <version>${cucumber.version}</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\npackage dev.davivieira.topologyinventory.application;\nimport io.cucumber.junit.Cucumber;\nimport io.cucumber.junit.CucumberOptions;\nimport org.junit.runner.RunWith;\n@RunWith(Cucumber.class)\n@CucumberOptions(\n        plugin = {\"pretty\", \"html:target/cucumber-result\"}\n)\npublic class ApplicationTest {\n}\n```", "```java\npackage dev.davivieira.topologyinventory.application;\nimport io.quarkiverse.cucumber.CucumberQuarkusTest;\nimport io.quarkus.test.junit.QuarkusTest;\n@QuarkusTest\npublic class ApplicationTest extends CucumberQuarkusTest {\n}\n```", "```java\npackage dev.davivieira.topologyinventory.application.mocks;\nimport dev.davivieira.topologyinventory.applica\n  tion.ports.output.RouterManagementOutputPort;\nimport dev.davivieira.topologyinventory.domain.en\n  tity.Router;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport io.quarkus.test.Mock;\n@Mock\npublic class RouterManagementOutputPortMock implements\n  RouterManagementOutputPort {\n    @Override\n    public Router retrieveRouter(Id id) {\n        return null;\n    }\n    @Override\n    public Router removeRouter(Id id) {\n        return null;\n    }\n    @Override\n    public Router persistRouter(Router router) {\n        return null;\n    }\n}\n```", "```java\npackage dev.davivieira.topologyinventory.application.mocks;\nimport dev.davivieira.topologyinventory.applica\n  tion.ports.output.SwitchManagementOutputPort;\nimport dev.davivieira.topologyinventory.domain.en\n  tity.Switch;\nimport dev.davivieira.topologyinventory.domain.vo.Id;\nimport io.quarkus.test.Mock;\n@Mock\npublic class SwitchManagementOutputPortMock implements\n  SwitchManagementOutputPort {\n    @Override\n    public Switch retrieveSwitch(Id id) {\n        return null;\n    }\n}\n```", "```java\npublic class RouterAdd extends ApplicationTestData {\n    @Inject\n    RouterManagementUseCase routerManagementUseCase;\n   /** Code omitted **/\n}\n```", "```java\nthis.routerManagementUseCase = new RouterManagementInput\n  Port();\n```", "```java\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running dev.davivieira.topologyinventory.application.ApplicationTest\n2021-09-08 22:44:15,596 INFO  [io.quarkus] (main) Quarkus 2.2.1.Final on JVM started in 1.976s. Listening on: http://localhost:8081\n2021-09-08 22:44:15,618 INFO  [io.quarkus] (main) Profile test activated.\n2021-09-08 22:44:15,618 INFO  [io.quarkus] (main) Installed features: [cdi, cucumber, smallrye-context-propagation]\n@RouterCreate\nScenario: Creating a new core router\n#dev/davivieira/topologyinventory/application/routers/RouterCreate.feature:4\n.  Given I provide all required data to create a core router\n#dev.davivieira.topologyinventory.application.RouterCreate.create_core_router()\n.  Then A new core router is created\n#dev.davivieira.topologyinventory.application.RouterCreate.a_new_core_router_is_created()\n```"]