["```java\ngrid.addComponentColumn(user -> new Button(\"Delete\", e -> deleteClicked(user)));\n```", "```java\ngrid.getEditor().setEnabled(true);\n```", "```java\n@Entity\n@Data public class Role {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String name;\n\n    private Boolean module1Authorized;\n\n    private Boolean module2Authorized;\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n```", "```java\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.16.18</version>\n    <scope>provided</scope>\n</dependency>\n\n```", "```java\n@Entity\n@Data\npublic class User {\n\n    @Id\n    @GeneratedValue\n    private Long id;\n\n    private String firstName;\n\n    private String lastName;\n\n    private String email;\n\n    private String password;\n\n    private boolean blocked;\n\n    @ManyToMany(fetch = FetchType.EAGER)\n    private Set<Role> roles;\n\n @ManyToOne    private Role mainRole;\n}\n```", "```java\npublic class RoleRepository {\n\n    public static List<Role> findAll() { ... }\n\n    public static Role save(Role role) { ... }\n}\n```", "```java\npublic class UserRepository {\n\n    public static List<User> findAll() { ... }\n\n    public static User findById(Long id) { ... }\n\n    private static User getById(Long id, EntityManager em) { ... }\n\n    public static User save(User user) { ... }\n\n    public static void delete(User user) { ... }\n}\n```", "```java\npublic class EditableGridCrud extends Composite {\n\n    private Grid<User> grid = new Grid<>();\n\n    public EditableGridCrud() {\n        initLayout();\n        initBehavior();\n    }\n\n    private void initLayout() {\n        grid.setSizeFull();\n        VerticalLayout layout = new VerticalLayout(grid);\n\n        setCompositionRoot(layout);\n        setSizeFull();\n    }\n\n    private void initBehavior() {\n    }\n}\n```", "```java\nGrid grid = new Grid(User.class);\n```", "```java\ngrid.setColumns(\"firstName\", \"lastName\");\n```", "```java\npublic class EditableGridCrud extends Composite {\n    ...\n\n    private void initBehavior() {\n        grid.addColumn(User::getFirstName).setCaption(\"First name\");\n        grid.addColumn(User::getLastName).setCaption(\"Last name\");\n        grid.addColumn(User::getEmail).setCaption(\"Email\");\n        grid.addColumn(User::getPassword).setCaption(\"Password\");\n        grid.addColumn(User::isBlocked).setCaption(\"Blocked\");\n    }\n }\n```", "```java\ngrid.addColumn(User::getFirstName)\n    .setCaption(\"First name\")\n    .setWidth(150);\n```", "```java\npublic class EditableGridCrud extends Composite {\n    ...\n\n    public EditableGridCrud() {\n        initLayout();\n        initBehavior();\n        refresh();\n    }\n\n    private void refresh() {\n        grid.setItems(UserRepository.findAll());\n    }\n    ...\n\n}\n```", "```java\ngrid.addColumn(User::getPassword)\n        .setCaption(\"Password\")\n        .setRenderer(user -> \"********\", new TextRenderer());\n```", "```java\ngrid.getEditor().setEnabled(true);\n```", "```java\nBinder<User> binder = grid.getEditor().getBinder();\n```", "```java\ngrid.addColumn(User::getFirstName)\n        .setCaption(\"First Name\")\n        .setEditorBinding(binder\n                .forField(new TextField())\n                .bind(User::getFirstName, User::setFirstName));\n\n```", "```java\ngrid.getEditor().addSaveListener(e -> save(e.getBean()));\n```", "```java\npublic class EditableGridCrud extends Composite {\n    ...\n\n    private void save(User user) {\n        UserRepository.save(user);\n        refresh();\n    }\n    ...\n}\n```", "```java\n<dependency>\n    <groupId>org.hibernate</groupId>\n    <artifactId>hibernate-validator</artifactId>\n    <version>6.0.2.Final</version>\n</dependency>\n\n```", "```java\n...\npublic class User {\n    ...\n\n @NotNull    private String firstName;\n\n    @NotNull\n    private String lastName;\n\n    @Email\n    private String email;\n\n    @NotNull\n @Size(min = 8, max = 100)\n    private String password;\n\n    ...\n}\n```", "```java\ngrid.addColumn(User::getFirstName)\n        .setCaption(\"First Name\")\n        .setEditorBinding(binder\n                .forField(new TextField())\n .withNullRepresentation(\"\")\n .withValidator(new BeanValidator(User.class, \"firstName\"))\n                .bind(User::getFirstName, User::setFirstName));\n\n```", "```java\npublic class CustomCrud extends Composite {\n\n    private Button refresh = new Button(\"\", VaadinIcons.REFRESH);\n    private Button add = new Button(\"\", VaadinIcons.PLUS);\n    private Button edit = new Button(\"\", VaadinIcons.PENCIL);\n\n    private Grid<User> grid = new Grid<>(User.class);\n\n    public CustomCrud() {\n        initLayout();\n        initBehavior();\n        refresh();\n    }\n\n    private void initLayout() {\n        CssLayout header = new CssLayout(refresh, add, edit);\n        header.addStyleName(ValoTheme.LAYOUT_COMPONENT_GROUP);\n\n        grid.setSizeFull();\n\n        VerticalLayout layout = new VerticalLayout(header, grid);\n        layout.setExpandRatio(grid, 1);\n        setCompositionRoot(layout);\n        setSizeFull();\n    }\n\n    private void initBehavior() {\n    }\n\n    public void refresh() {\n    }\n}\n```", "```java\n...\n    private void initLayout() {\n        ...\n        grid.setColumns(\"firstName\", \"lastName\", \"email\", \"mainRole\");\n        ...\n    }\n...\n```", "```java\n...\n    private void initBehavior() {\n grid.asSingleSelect().addValueChangeListener(e -> updateHeader());\n refresh.addClickListener(e -> refresh());\n    }\n\n    public void refresh() {\n grid.setItems(UserRepository.findAll());\n        updateHeader();\n    }\n\n    private void updateHeader() {\n        boolean selected = !grid.asSingleSelect().isEmpty();\n        edit.setEnabled(selected);\n    }\n...\n```", "```java\n...\nprivate void initBehavior() {\n    ...\n add.addClickListener(e -> showAddWindow());\n    edit.addClickListener(e -> showEditWindow()); }\n\nprivate void showAddWindow() {\n    UserFormWindow window = new UserFormWindow(\"Add\", new User());\n    getUI().addWindow(window);\n}\n\nprivate void showEditWindow() {\n    UserFormWindow window = new UserFormWindow(\"Edit\", grid.asSingleSelect().getValue());\n    getUI().addWindow(window);\n}\n\n```", "```java\nprivate class UserFormWindow extends Window { // inner to CustomCrud\n\n    private TextField firstName = new TextField(\"First name\");\n    private TextField lastName = new TextField(\"Last name\");\n    private TextField email = new TextField(\"Email\");\n    private PasswordField password = new PasswordField(\"Password\");\n    private CheckBoxGroup<Role> roles = new CheckBoxGroup<>(\"Roles\", RoleRepository.findAll());\n    private ComboBox<Role> mainRole = new ComboBox<>(\"Main Role\", RoleRepository.findAll());\n    private CheckBox blocked = new CheckBox(\"Blocked\");\n\n    private Button cancel = new Button(\"Cancel\");\n    private Button save = new Button(\"Save\", VaadinIcons.CHECK);\n\n    public UserFormWindow(String caption, User user) {\n        initLayout(caption);\n        initBehavior(user);\n    }\n\n    private void initLayout(String caption) {\n        ...\n    }\n\n    private void initBehavior(User user) {\n    }\n}\n```", "```java\nprivate void initBehavior(User user) { // inside UserFormWindow\n    Binder<User> binder = new Binder<>(User.class);\n    binder.bindInstanceFields(this);\n    binder.readBean(user);\n}\n```", "```java\nprivate void initBehavior(User user) { // inside UserFormWindow\n    ...\n\n    cancel.addClickListener(e -> close());\n    save.addClickListener(e -> {\n        try {\n            binder.writeBean(user);\n            UserRepository.save(user);\n            close();\n            refresh();\n            Notification.show(\"User saved\");\n\n        } catch (ValidationException ex) {\n            Notification.show(\"Please fix the errors and try again\");\n        }\n    });\n}\n```", "```java\nprivate void initBehavior(User user) { // inside UserFormWindow\n    BeanValidationBinder<User> binder = new BeanValidationBinder<>(User.class);\n    ...\n}\n```", "```java\npublic class CustomCrud extends Composite {\n    ...\n\n    private void initLayout() {\n        ...\n\n        grid.addComponentColumn(user -> new Button(\"Delete\", e -> deleteClicked(user)));\n        ...\n    }\n    ...\n\n    private void deleteClicked(User user) {\n        showRemoveWindow(user);\n        refresh();\n    }\n\n    private void showRemoveWindow(User user) {\n        Window window = new RemoveWindow(user);\n        window.setModal(true);\n        window.center();\n        getUI().addWindow(window);\n    }\n}\n```", "```java\npublic class CrudAddOn extends Composite {\n\n    private GridCrud<User> crud = new GridCrud<>(User.class, new HorizontalSplitCrudLayout());\n\n    public CrudAddOn() {\n        initLayout();\n        initBehavior();\n    }\n\n    private void initLayout() {\n        crud.getGrid().setColumns(\"firstName\", \"lastName\", \"email\", \"mainRole\");\n        crud.getCrudFormFactory().setVisibleProperties(\"firstName\", \"lastName\", \"email\", \"password\", \"roles\", \"mainRole\", \"blocked\");\n\n        crud.getCrudFormFactory().setFieldType(\"password\", PasswordField.class);\n        crud.getCrudFormFactory().setFieldProvider(\"roles\", new CheckBoxGroupProvider<>(RoleRepository.findAll()));\n        crud.getCrudFormFactory().setFieldProvider(\"mainRole\", new ComboBoxProvider<>(\"Main Role\", RoleRepository.findAll()));\n\n        VerticalLayout layout = new VerticalLayout(crud);\n        setCompositionRoot(layout);\n        setSizeFull();\n    }\n\n    private void initBehavior() {\n        crud.setFindAllOperation(() -> UserRepository.findAll());\n        crud.setAddOperation(user -> UserRepository.save(user));\n        crud.setUpdateOperation(user -> UserRepository.save(user));\n        crud.setDeleteOperation(user -> UserRepository.delete(user));\n        crud.getCrudFormFactory().setUseBeanValidation(true);\n    }\n}\n```", "```java\npublic class UserRepository {\n\n    public static List<User> findAll(String lastName) {\n        return JPAService.runInTransaction(em ->\n                em.createQuery(\"select u from User u where u.lastName like :lastName\")\n                        .setParameter(\"lastName\", lastName)\n                        .getResultList()\n        );\n    }\n    ...\n}\n```", "```java\ngrid.setItems(UserRepository.findAll(lastNameFilter.getValue()));\n```"]