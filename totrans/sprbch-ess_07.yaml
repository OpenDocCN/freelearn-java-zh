- en: Chapter 7. Inspecting Spring Batch Jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned about enterprise integration, varieties
    of enterprise application integration, and the Spring Integration project to integrate
    Spring Batch applications with its message-driven approach. We also learned about
    launching batch jobs with Spring Integration and RESTful job processing techniques.
    Spring Batch job execution deals with huge data that changes time to time. This
    changing data might get corrupted at times and lead to failed job executions.
    It is important to keep a close eye on such failures, and failure reasons should
    be saved in a constructive manner for future tracking and fixing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Batch job monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing execution data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Listeners
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Web monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Batch job monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far we have seen varieties of batch job configurations and executions handling
    data from diverse sources, processing it, and pushing the outcomes into another
    data store. Everything looks good as long as the jobs keep executing the way we
    make the configurations. The stability of an application can be figured by how
    strong and detailed the response of the application is to any problems with its
    surroundings, that is, the environment in which the application is running, the
    availability and accessibility of external systems, and the correctness of the
    data supplied to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Applications should be able to generate clear tracking information on what is
    happening in and out of the application in terms of functionality, who is using
    it, how the performance is, and a detailed stack of issues/errors the application
    faces. Spring Batch addresses these parameters and generates a greater infrastructure
    to monitor the batch job processing and store this monitored information.
  prefs: []
  type: TYPE_NORMAL
- en: The application infrastructure should take care of identifying any such problems
    and also reporting to the respective departments through the preconfigured channels
    of communication. Spring Batch has a strong infrastructure to maintain the monitored
    job information in a database. Let us understand the database infrastructure and
    how each entity is related to each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the schema diagram defined by Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Batch job monitoring](img/3372OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding figure depicts the schema of the batch job that takes care of
    the job execution information. The significance of each of these entities is as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BATCH_JOB_INSTANCE`: This maintains high-level information on the batch jobs,
    along with the instance of each job. It contains a unique identifier for different
    job instances created for the same job, with a different set of job parameters
    (`JOB_KEY`), along with the job name and version of each record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BATCH_JOB_PARAMS`: This maintains information related to each set of job parameters
    instance. It maintains the key/value pairs of job parameters to be passed to a
    job.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BATCH_JOB_EXECUTION`: This maintains the job execution information for each
    instance of the job. It maintains individual records for each execution of the
    batch job by connecting with `BATCH_JOB_INSTANCE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BATCH_STEP_EXECUTION`: This maintains the step execution information for each
    step of a job instance. It connects with `BATCH_JOB_EXECUTION` to maintain the
    step execution information for each job execution instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BATCH_JOB_EXECUTION_CONTEXT`: This is the information needed for each job
    execution instance. This is unique for each execution, so the same information
    as that of the previous run is considered for retry jobs. Hence, it connects with
    `BATCH_JOB_EXECUTION` to maintain an instance per execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BATCH_STEP_EXECUTION_CONTEXT`: This is similar to `BATCH_JOB_EXECUTION_CONTEXT`,
    except that it maintains the context information for each of the step execution.
    Hence, it connects with `BATCH_STEP_EXECUTION` to maintain the unique instance
    with each step execution instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing execution data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Spring Batch saves all the monitoring and job information to the database,
    let's understand each of the administration components of Spring Batch, how they
    interact with each other, and their configurations.
  prefs: []
  type: TYPE_NORMAL
- en: '![Accessing execution data](img/3372OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The database saves job-related information and acts as a source to monitor the
    job execution information.
  prefs: []
  type: TYPE_NORMAL
- en: 'A database can be configured using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The values of `driverClassName`, `url`, `username`, and `password` can be specific
    to the database and a particular user connection to that database. `DataSourceTransactionManager`
    is the transaction manager here and it refers to the database with the `datasource`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: JobRepository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.springframework.batch.core.repository.JobRepository` interface is the
    central point of access for job-related information. It accesses the state and
    metadata of batch jobs from the database and supplies it to other resources.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for the `JobRepository` follows the ensuing syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: JobLauncher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.springframework.batch.core.launch.JobLauncher` interface is responsible
    for job execution and also updates the changing job status in `JobRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for `JobLauncher` follows the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: JobOperator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.springframework.batch.core.launch.JobOperator` interface acts as a
    controlling point for batch job processing. It sends start, stop, and restart
    signals to another administrator, namely, `JobLauncher` by accessing the job information
    from `JobExplorer`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for `JobOperator` follows the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: JobExplorer
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `org.springframework.batch.core.explore.JobExplorer` interface reads the
    job-related information from the database and provides the information to other
    administrators, such as `JobOperator` in job execution, with read-only access.
  prefs: []
  type: TYPE_NORMAL
- en: 'The configuration for `JobExplorer` follows the ensuing syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Listeners
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we discussed that listeners are the components that
    get triggered by the preconfigured events in an execution. We can use such listeners
    to trigger a particular event on the batch job and act as a monitoring tool for
    the corresponding problems. A listener can also be configured to report the corresponding
    department for a particular problem in execution.
  prefs: []
  type: TYPE_NORMAL
- en: '![Listeners](img/3372OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following is a sample listener definition and configuration to monitor a
    batch job problem.
  prefs: []
  type: TYPE_NORMAL
- en: 'A listener class can be defined to execute before and after the execution of
    a job, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The configuration of a batch job with the monitoring listener can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Web monitoring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Batch job execution can be monitored and examined with the web interface
    provided by the open-source project of Spring, that is, **Spring Batch Admin**.
    This is a simple web application built with the Spring MVC user interface to act
    as an admin console for the Spring Batch applications and systems. The main use
    cases developed in this project are inspecting jobs, launching jobs, inspecting
    the executions, and stopping the executions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Refer to the Spring Batch Admin reference guide at [http://docs.spring.io/spring-batch-admin/reference.html](http://docs.spring.io/spring-batch-admin/reference.html)
    for detailed information on installation and usage.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Through this chapter, we learned the importance of job execution monitoring
    and Spring Batch job monitoring infrastructure. We also learned how to access
    job execution information with the help of the administrators' configurations.
    In addition, we learned about monitoring and reporting batch job problems with
    the help of listeners. We finished this chapter with an understanding of the Spring
    Batch Administration project features and how it can help with batch job monitoring.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn in detail about the batch scaling model,
    parallel processing, and partitioning concepts.
  prefs: []
  type: TYPE_NORMAL
