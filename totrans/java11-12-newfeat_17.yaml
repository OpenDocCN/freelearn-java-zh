- en: Enhanced Enums in Project Amber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enums add type safety to finite and predefined sets of constants. Enums enable
    you to define a new type (such as a class or an interface) with a state and behavior.
    **Project Amber** is enhancing enums, taking them to the next level by adding
    type variables (generics) and allowing sharper enum type-checking. These will
    enable enums to define constants with type information, state, and behavior—applicable
    exclusively to each constant. These enhancements will reduce the need to refactor
    enums to classes in order to use generics.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The reason for enhancing enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a state and behavior to enum constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating generic enums
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing a constant, specific state and behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing sharper type-checking for enum constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A quick background
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Enums** introduced type safety to the use of constants, which were defined
    previously by using `static`, and `final` variables of a type such as `int`.'
  prefs: []
  type: TYPE_NORMAL
- en: An example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine limiting the sizes of a shirt to some predefined sizes (such as `Small`,
    `Medium`, and `Large`). The following code shows how you can do that with an enum
    (`Size`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Java's coding guidelines recommend using uppercase to define enum constants
    (such as `SMALL`). Multiple words in a constant can be separated by using an underscore.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how you can use the `Size` enum in a class, `Shirt`,
    to restrict its sizes to constants defined in the `Size` enum:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The instance variable of the `Size` type in the `Shirt` class limits the values
    that are assigned to it to `Size.SMALL`, `Size.MEDIUM`, and `Size.LARGE`. The
    following code is an example of how another class, `GarmentFactory`, uses enum
    constants to create instances of the `Shirt` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Enums define new types with predefined sets of constant values. Enums add type
    safety to constant values.
  prefs: []
  type: TYPE_NORMAL
- en: Decompiled enum – behind the scenes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Every user-defined enum implicitly extends the `java.lang.Enum` class. Behind
    the scenes, the one-line `Size` enum (defined in the preceding section) is compiled
    into something similar to the following (I''ve added comments in the code to explain
    it; when you compile an enum, you won''t get similar comments):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Enums are syntactic sugar. The compiler takes your enum construct and extends
    `java.lang.Enum` to create a class. It adds the variables, initializers, and methods
    to get the required behavior.
  prefs: []
  type: TYPE_NORMAL
- en: The state and behavior of enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The enum constants can have their own states and behaviors. You can define a
    state and behavior that is common to all enum constants, or states and behaviors
    that are specific to each one of them. But can you access the state or behavior
    that is specific to an enum constant? Let's find out.
  prefs: []
  type: TYPE_NORMAL
- en: Adding states and behaviors to enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add states and behaviors to enum constants by defining instance variables
    and methods in an enum. All of these are accessible by the enum constants. Let''s
    modify the `Size` enum defined in the previous section, by adding a state and
    behavior to it. Each enum constant can define a constant, specific class body,
    define a new state and behavior, or override the default behavior of the enum
    methods in which it is defined. The following is an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `Size` enum defines three enum constants—`SMALL`,
    `MEDIUM`, and `LARGE`. It also defines instance variables (`length` and `breadth`),
    a constructor, and the `getLength()`, `getWidth`, and `toText()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the state and behavior of enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At present, an enum constant can access the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The state and behavior common to all enum constants
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overridden methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `Size` enum (defined in the preceding section), you can access the
    state and behavior common to all enum constants, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also access the behavior that a specific enum constant overrides as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code will have the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you can''t access the state or behavior that is specific to an enum
    constant, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `getSize()` method and the `number` variable can''t be accessed by using
    the `MEDIUM` constant. That is because `MEDIUM` creates an anonymous class and
    overrides the methods of the `Size` enum. It can''t access the constant, specific
    state or behavior, because it''s still referenced by a variable of the `Size` type.
    The following figure should help you remember this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e637ffe5-79aa-46f9-9dd6-aa2d3b68f5fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Existing enums don't allow access to a state or behavior that is specific to
    an enum constant, because it creates an anonymous class to do so.
  prefs: []
  type: TYPE_NORMAL
- en: Workarounds to access enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the ways to access members such as variables and methods that are specific
    to an enum constant is—to define them for all members, but only allow the usage
    for specific members (I know, this is not recommended). I''ve removed code that
    is not relevant to show how this works, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s try to access the method `getSize()` using enum constants:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: First and foremost, adding code (the `getSize()` method) that is not applicable
    to all enum constants breaks the encapsulation. In the preceding example, I defined
    `getSize()` in the main body, whereas only the `MEDIUM` enum constant required
    the `getSize()` method. This is neither desirable nor recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Compared it with an arrangement of a base class and its derived classes, adding
    all of the behaviors specific to the different derived classes in your base class.
    However, it's not recommended as it doesn't define the encapsulated code.
  prefs: []
  type: TYPE_NORMAL
- en: Using inheritance with enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is another example of an enum, that works with a set of subclasses
    by passing instances of subclasses to the enum constructor. To get the point across,
    I''ve modified the `Size` enum, which we have been working on with since the beginning
    of this chapter. The following is the modified code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, you can''t access the state and behavior of the enum-constant-specific
    code. The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, the enhanced enums come to the rescue. JEP 301 introduced enhanced enums
    by adding type variables or generics to it. Let's look at how it works in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding generics to enums
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's rewrite the enum code from the preceding example, adding a variable type
    to the enum `Size`. The bounded type parameter (`<T extends Measurement>`) restricts
    the types that can be passed as arguments to the `Size` enum, to the `Measurement` class
    and its derived classes.
  prefs: []
  type: TYPE_NORMAL
- en: This section modifies the code from the preceding section. To understand the
    example code and its purpose, please read the preceding section (if you haven't
    already).
  prefs: []
  type: TYPE_NORMAL
- en: 'The modified code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code can be used to access behavior that is specific to a constant,
    say, the `getLength()` method, which is accessible only to the `LARGE` constant,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With the enhanced enums (with generics added), you will be able to access an
    enum constant specific state or behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Let's work with another example of a generic enum, which can be used to restrict
    the user data to certain types.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example creates a generic enum, `Data`, which can be passed as
    a type parameter, `T`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `FormData` class defines a generic method that can accept a constant of
    the `Data` enum and a value of the same type that is used for the enum constant:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows how you can use the constants of the `Data` enum to
    restrict the combination of types of values that you pass to the `add` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: With the mismatched data, the code fails at compilation, making it easier for
    the developer to correct it.
  prefs: []
  type: TYPE_NORMAL
- en: Compilation failures are always better than runtime exceptions. Using the generic
    `Data` enum will make the code fail at compile time for a mismatched combination
    of values passed to `add()`.
  prefs: []
  type: TYPE_NORMAL
- en: Sharper typing of enum constants
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the two major goals of enhanced enums is to perform sharper type-checking
    for enums. At present, the type of all enum constants is the enum in which they
    are defined. Referring to our example enum, `Size`, this essentially means that
    the type of all of the enum constants (`SMALL`, `MEDIUM`, and `LARGE`) is `Size`,
    which is incorrect (as depicted in the following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3031f8fa-d9bf-46ed-81cb-6d6c27929742.png)'
  prefs: []
  type: TYPE_IMG
- en: Although enum constants are allowed to define a constant specific class body,
    which includes variables and methods, the constant type is not sharp enough to
    allow for access to enum constant-specific values. Even in the case of generic
    enums, the static type of an enum constant is not sharp enough to capture the
    full type information of individual constants.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about how the enums in Java 5 introduced type safety
    to constants. We covered how each enum constant can have its own distinct state
    and behavior, not just what is common to all enum constants. However, it's not
    feasible to access the state and behavior that is specific to an enum constant
    with the existing enums.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we covered how the enhanced enums can use generics and access a constant
    specific state and behavior. With examples, we also covered how type parameters
    facilitate sharper typing of enum constants.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover how the data classes in Project Amber are bringing
    about language changes to define data carrier classes.
  prefs: []
  type: TYPE_NORMAL
