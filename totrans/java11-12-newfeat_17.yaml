- en: Enhanced Enums in Project Amber
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Project Amber中的增强枚举
- en: Enums add type safety to finite and predefined sets of constants. Enums enable
    you to define a new type (such as a class or an interface) with a state and behavior.
    **Project Amber** is enhancing enums, taking them to the next level by adding
    type variables (generics) and allowing sharper enum type-checking. These will
    enable enums to define constants with type information, state, and behavior—applicable
    exclusively to each constant. These enhancements will reduce the need to refactor
    enums to classes in order to use generics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举为有限和预定义的常量集添加了类型安全。枚举使您能够定义一个具有状态和行为的新的类型（例如类或接口）。**Project Amber**正在增强枚举，通过添加类型变量（泛型）和允许更精确的枚举类型检查，将它们提升到下一个层次。这将使枚举能够定义具有类型信息、状态和行为的常量——仅适用于每个常量。这些增强将减少将枚举重构为类以使用泛型的需求。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The reason for enhancing enums
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强枚举的原因
- en: Adding a state and behavior to enum constants
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为枚举常量添加状态和行为
- en: Creating generic enums
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建泛型枚举
- en: Accessing a constant, specific state and behavior
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问特定常量的状态和行为
- en: Performing sharper type-checking for enum constants
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对枚举常量执行更精确的类型检查
- en: A quick background
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速背景
- en: '**Enums** introduced type safety to the use of constants, which were defined
    previously by using `static`, and `final` variables of a type such as `int`.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**枚举**引入了类型安全到常量的使用中，这些常量之前是通过使用`static`和`final`变量（如`int`）定义的。'
- en: An example
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: 'Imagine limiting the sizes of a shirt to some predefined sizes (such as `Small`,
    `Medium`, and `Large`). The following code shows how you can do that with an enum
    (`Size`):'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下将衬衫的尺寸限制为一些预定义的尺寸（如`Small`、`Medium`和`Large`）。以下代码展示了您如何使用枚举（`Size`）来实现这一点：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Java's coding guidelines recommend using uppercase to define enum constants
    (such as `SMALL`). Multiple words in a constant can be separated by using an underscore.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Java的编码规范建议使用大写字母来定义枚举常量（如`SMALL`）。常量中的多个单词可以使用下划线分隔。
- en: 'The following code shows how you can use the `Size` enum in a class, `Shirt`,
    to restrict its sizes to constants defined in the `Size` enum:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了您如何在一个类`Shirt`中使用`Size`枚举来限制其尺寸为`Size`枚举中定义的常量：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The instance variable of the `Size` type in the `Shirt` class limits the values
    that are assigned to it to `Size.SMALL`, `Size.MEDIUM`, and `Size.LARGE`. The
    following code is an example of how another class, `GarmentFactory`, uses enum
    constants to create instances of the `Shirt` class:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Shirt`类中，`Size`类型的实例变量限制了分配给它的值只能是`Size.SMALL`、`Size.MEDIUM`和`Size.LARGE`。以下代码是另一个类`GarmentFactory`如何使用枚举常量创建`Shirt`类实例的示例：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Enums define new types with predefined sets of constant values. Enums add type
    safety to constant values.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举定义了具有预定义常量集的新类型。枚举为常量值添加了类型安全。
- en: Decompiled enum – behind the scenes
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反编译枚举——幕后
- en: 'Every user-defined enum implicitly extends the `java.lang.Enum` class. Behind
    the scenes, the one-line `Size` enum (defined in the preceding section) is compiled
    into something similar to the following (I''ve added comments in the code to explain
    it; when you compile an enum, you won''t get similar comments):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户定义的枚举隐式扩展了`java.lang.Enum`类。幕后，前面部分定义的单一行的`Size`枚举（枚举）被编译成类似以下的内容（我在代码中添加了注释以解释它；当您编译枚举时，您不会得到类似的注释）：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Enums are syntactic sugar. The compiler takes your enum construct and extends
    `java.lang.Enum` to create a class. It adds the variables, initializers, and methods
    to get the required behavior.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举是语法糖。编译器将您的枚举构造扩展为`java.lang.Enum`以创建一个类。它添加了变量、初始化器和获取所需行为的方法。
- en: The state and behavior of enum constants
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举常量的状态和行为
- en: The enum constants can have their own states and behaviors. You can define a
    state and behavior that is common to all enum constants, or states and behaviors
    that are specific to each one of them. But can you access the state or behavior
    that is specific to an enum constant? Let's find out.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 枚举常量可以有自己的状态和行为。您可以定义一个对所有枚举常量都通用的状态和行为，或者定义每个枚举常量特有的状态和行为。但是，您能访问特定于枚举常量的状态或行为吗？让我们来看看。
- en: Adding states and behaviors to enum constants
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为枚举常量添加状态和行为
- en: 'You can add states and behaviors to enum constants by defining instance variables
    and methods in an enum. All of these are accessible by the enum constants. Let''s
    modify the `Size` enum defined in the previous section, by adding a state and
    behavior to it. Each enum constant can define a constant, specific class body,
    define a new state and behavior, or override the default behavior of the enum
    methods in which it is defined. The following is an example of this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding example, the `Size` enum defines three enum constants—`SMALL`,
    `MEDIUM`, and `LARGE`. It also defines instance variables (`length` and `breadth`),
    a constructor, and the `getLength()`, `getWidth`, and `toText()` methods.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the state and behavior of enum constants
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At present, an enum constant can access the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: The state and behavior common to all enum constants
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overridden methods
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the `Size` enum (defined in the preceding section), you can access the
    state and behavior common to all enum constants, as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding code will have the following output:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'You can also access the behavior that a specific enum constant overrides as
    follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The preceding code will have the following output:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'However, you can''t access the state or behavior that is specific to an enum
    constant, as shown in the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The `getSize()` method and the `number` variable can''t be accessed by using
    the `MEDIUM` constant. That is because `MEDIUM` creates an anonymous class and
    overrides the methods of the `Size` enum. It can''t access the constant, specific
    state or behavior, because it''s still referenced by a variable of the `Size` type.
    The following figure should help you remember this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e637ffe5-79aa-46f9-9dd6-aa2d3b68f5fc.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: Existing enums don't allow access to a state or behavior that is specific to
    an enum constant, because it creates an anonymous class to do so.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Workarounds to access enum constants
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the ways to access members such as variables and methods that are specific
    to an enum constant is—to define them for all members, but only allow the usage
    for specific members (I know, this is not recommended). I''ve removed code that
    is not relevant to show how this works, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s try to access the method `getSize()` using enum constants:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output of the preceding code is as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: First and foremost, adding code (the `getSize()` method) that is not applicable
    to all enum constants breaks the encapsulation. In the preceding example, I defined
    `getSize()` in the main body, whereas only the `MEDIUM` enum constant required
    the `getSize()` method. This is neither desirable nor recommended.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Compared it with an arrangement of a base class and its derived classes, adding
    all of the behaviors specific to the different derived classes in your base class.
    However, it's not recommended as it doesn't define the encapsulated code.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Using inheritance with enum constants
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is another example of an enum, that works with a set of subclasses
    by passing instances of subclasses to the enum constructor. To get the point across,
    I''ve modified the `Size` enum, which we have been working on with since the beginning
    of this chapter. The following is the modified code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个枚举的另一个示例，它通过将子类的实例传递给枚举构造函数与一组子类一起工作。为了说明问题，我已经修改了`Size`枚举，这是我们自本章开始以来一直在工作的枚举。以下是被修改的代码：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Again, you can''t access the state and behavior of the enum-constant-specific
    code. The following is an example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，您无法访问特定于枚举常量的代码的状态和行为。以下是一个示例：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, the enhanced enums come to the rescue. JEP 301 introduced enhanced enums
    by adding type variables or generics to it. Let's look at how it works in the
    next section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，增强枚举发挥了作用。JEP 301通过向其中添加类型变量或泛型来引入增强枚举。让我们在下一节看看它是如何工作的。
- en: Adding generics to enums
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将泛型添加到枚举中
- en: Let's rewrite the enum code from the preceding example, adding a variable type
    to the enum `Size`. The bounded type parameter (`<T extends Measurement>`) restricts
    the types that can be passed as arguments to the `Size` enum, to the `Measurement` class
    and its derived classes.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重写上一例中的枚举代码，给枚举`Size`添加一个变量类型。有界类型参数（`<T extends Measurement>`）限制了可以传递给`Size`枚举的参数类型，仅限于`Measurement`类及其派生类。
- en: This section modifies the code from the preceding section. To understand the
    example code and its purpose, please read the preceding section (if you haven't
    already).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节修改了上一节中的代码。要理解示例代码及其目的，请阅读上一节（如果您还没有阅读的话）。
- en: 'The modified code is as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的代码如下：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code can be used to access behavior that is specific to a constant,
    say, the `getLength()` method, which is accessible only to the `LARGE` constant,
    as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码可以用来访问特定于常量的行为，例如，`getLength()`方法，它只能被`LARGE`常量访问，如下所示：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With the enhanced enums (with generics added), you will be able to access an
    enum constant specific state or behavior.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在增强枚举（添加了泛型）中，您将能够访问枚举常量的特定状态或行为。
- en: Let's work with another example of a generic enum, which can be used to restrict
    the user data to certain types.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再来看一个泛型枚举的例子，它可以用来限制用户数据到某些类型。
- en: 'The following example creates a generic enum, `Data`, which can be passed as
    a type parameter, `T`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例创建了一个泛型枚举`Data`，它可以作为类型参数`T`传递：
- en: '[PRE17]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `FormData` class defines a generic method that can accept a constant of
    the `Data` enum and a value of the same type that is used for the enum constant:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`FormData`类定义了一个泛型方法，可以接受`Data`枚举的常量以及与枚举常量相同类型的值：'
- en: '[PRE18]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following code shows how you can use the constants of the `Data` enum to
    restrict the combination of types of values that you pass to the `add` method:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用`Data`枚举的常量来限制传递给`add`方法的值的类型组合：
- en: '[PRE19]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: With the mismatched data, the code fails at compilation, making it easier for
    the developer to correct it.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在不匹配的数据的情况下，代码在编译时失败，这使得开发者更容易纠正它。
- en: Compilation failures are always better than runtime exceptions. Using the generic
    `Data` enum will make the code fail at compile time for a mismatched combination
    of values passed to `add()`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 编译错误总是比运行时异常要好。使用泛型枚举`Data`将使代码在编译时因传递给`add()`的值组合不匹配而失败。
- en: Sharper typing of enum constants
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举常量的更精确类型
- en: 'One of the two major goals of enhanced enums is to perform sharper type-checking
    for enums. At present, the type of all enum constants is the enum in which they
    are defined. Referring to our example enum, `Size`, this essentially means that
    the type of all of the enum constants (`SMALL`, `MEDIUM`, and `LARGE`) is `Size`,
    which is incorrect (as depicted in the following figure):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 增强枚举的两个主要目标之一是执行更精确的类型检查。目前，所有枚举常量的类型是它们定义的枚举。以我们的示例枚举`Size`为例，这本质上意味着所有枚举常量（`SMALL`、`MEDIUM`和`LARGE`）的类型是`Size`，这是不正确的（如下面的图所示）：
- en: '![](img/3031f8fa-d9bf-46ed-81cb-6d6c27929742.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3031f8fa-d9bf-46ed-81cb-6d6c27929742.png)'
- en: Although enum constants are allowed to define a constant specific class body,
    which includes variables and methods, the constant type is not sharp enough to
    allow for access to enum constant-specific values. Even in the case of generic
    enums, the static type of an enum constant is not sharp enough to capture the
    full type information of individual constants.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然枚举常量允许定义一个包含变量和方法的具体类体，但其常量类型不够精确，无法允许访问枚举常量特定的值。即使在泛型枚举的情况下，枚举常量的静态类型也不够精确，无法捕获个别常量的完整类型信息。
- en: Summary
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about how the enums in Java 5 introduced type safety
    to constants. We covered how each enum constant can have its own distinct state
    and behavior, not just what is common to all enum constants. However, it's not
    feasible to access the state and behavior that is specific to an enum constant
    with the existing enums.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了 Java 5 中枚举如何引入类型安全到常量。我们介绍了每个枚举常量都可以拥有其独特的状态和行为，而不仅仅是所有枚举常量共有的内容。然而，使用现有的枚举无法访问特定于枚举常量的状态和行为。
- en: Next, we covered how the enhanced enums can use generics and access a constant
    specific state and behavior. With examples, we also covered how type parameters
    facilitate sharper typing of enum constants.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了增强型枚举如何使用泛型和访问特定的状态和行为。通过示例，我们还介绍了类型参数如何促进枚举常量的更精确类型化。
- en: In the next chapter, we'll cover how the data classes in Project Amber are bringing
    about language changes to define data carrier classes.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 Project Amber 中的数据类是如何带来语言变化以定义数据载体类的。
