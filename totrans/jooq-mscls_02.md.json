["```java\n<dependency>\n```", "```java\n  <groupId>org.jooq</groupId>\n```", "```java\n  <artifactId>jooq</artifactId>\n```", "```java\n  <version>...</version> <!-- optional -->\n```", "```java\n</dependency>\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.springframework.boot</groupId>\n```", "```java\n  <artifactId>spring-boot-starter-jooq</artifactId>\n```", "```java\n</dependency>\n```", "```java\nplugins {\n```", "```java\n  id 'nu.studer.jooq' version ...\n```", "```java\n}\n```", "```java\n<dependency>\n```", "```java\n  <groupId>org.jooq.trial-java-8</groupId>\n```", "```java\n  <artifactId>jooq</artifactId>\n```", "```java\n  <version>...</version>\n```", "```java\n</dependency>\n```", "```java\njooq {\n```", "```java\n  version = '...'\n```", "```java\n  edition = nu.studer.gradle.jooq.JooqEdition.TRIAL_JAVA_8\n```", "```java\n}\n```", "```java\njooq {\n```", "```java\n  version.set(...)\n```", "```java\n  edition.set(nu.studer.gradle.jooq.JooqEdition.TRIAL_JAVA_8)\n```", "```java\n}\n```", "```java\n// Create DSLContext from a pre-existing configuration\n```", "```java\nDSLContext ctx = DSL.using(configuration);\n```", "```java\n// Create DSLContext from ad-hoc arguments\n```", "```java\nDSLContext ctx = DSL.using(connection, dialect);\n```", "```java\ntry (Connection conn = DriverManager.getConnection(\n```", "```java\n    \"jdbc:mysql://localhost:3306/classicmodels\", \n```", "```java\n    \"root\", \"root\")) {\n```", "```java\n  DSLContext ctx = \n```", "```java\n    DSL.using(conn, SQLDialect.MYSQL);\n```", "```java\n  ...\n```", "```java\n} catch (Exception e) {\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\nDSLContext ctx = DSL.using(dataSource, dialect);\n```", "```java\nDSLContext getContext() {\n```", "```java\n  MysqlDataSource dataSource = new MysqlDataSource();\n```", "```java\n  dataSource.setServerName(\"localhost\");\n```", "```java\n  dataSource.setDatabaseName(\"classicmodels\");\n```", "```java\n  dataSource.setPortNumber(\"3306\");\n```", "```java\n  dataSource.setUser(props.getProperty(\"root\");\n```", "```java\n  dataSource.setPassword(props.getProperty(\"root\");\n```", "```java\n  return DSL.using(dataSource, SQLDialect.MYSQL);\n```", "```java\n}\n```", "```java\nspring.datasource.driverClassName=com.mysql.cj.jdbc.Driver\n```", "```java\nspring.datasource.url=jdbc:mysql://localhost:3306/\n```", "```java\n                 classicmodels?createDatabaseIfNotExist=true\n```", "```java\nspring.datasource.username=root\n```", "```java\nspring.datasource.password=root\n```", "```java\nspring.jooq.sql-dialect=MYSQL\n```", "```java\n@Repository\n```", "```java\npublic class ClassicModelsRepository {\n```", "```java\n  private final DSLContext ctx;\n```", "```java\n  public ClassicModelsRepository(DSLContext ctx) {\n```", "```java\n    this.ctx = ctx;\n```", "```java\n  }\n```", "```java\n  ...\n```", "```java\n}\n```", "```java\nSELECT * FROM `office` WHERE `territory` = ?\n```", "```java\nResultQuery<?> query = ctx.selectFrom(table(\"office\"))\n```", "```java\n  .where(field(\"territory\").eq(territory));\n```", "```java\nResultQuery<?> query = ctx.select()\n```", "```java\n  .from(table(\"office\"))                  \n```", "```java\n  .where(field(\"territory\").eq(territory));\n```", "```java\nResultQuery<?> query = ctx.selectFrom(table(\"OFFICE\"))\n```", "```java\n  .where(field(\"TERRITORY\").eq(territory));\n```", "```java\nResultQuery<?> query = ctx.select()\n```", "```java\n  .from(table(\"OFFICE\"))                  \n```", "```java\n  .where(field(\"TERRITORY\").eq(territory));\n```", "```java\npublic List<Office> findOfficesInTerritory(String territory) {\n```", "```java\n  List<Office> result = ctx.selectFrom(table(\"office\"))\n```", "```java\n.where(field(\"territory\").eq(territory))\n```", "```java\n.fetchInto(Office.class); \n```", "```java\n  return result;\n```", "```java\n}\n```", "```java\n// 'query' is the ResultQuery object\n```", "```java\nList<Office> result = query.fetchInto(Office.class);\n```"]