- en: Chapter 3. Working with the Process Designer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we were introduced to the concept of BPM and we got
    an overview of the jBPM tool stack and the family along some hands-on experience
    to build our first application using jBPM. The next four chapters will detail
    each jBPM component that we have discussed so far and the remaining chapters will
    guide you to customizing jBPM, integrating with the application architecture,
    and deploying a production-ready BPM application.
  prefs: []
  type: TYPE_NORMAL
- en: The first step that a business analyst with requirements for an application
    in hand would be the design and modeling of the business processes. This step
    is not often straightforward and involves multiple artifacts apart from the business
    process flow itself. This chapter will take us through the journey of designing
    a business process with all its etiquettes and will simulate the business process
    to understand how the designed business process would behave in a runtime environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter guides you through the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Business process modeling using BPM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data object modeling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using scripting and logic within BPM activities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modeling user interface forms that are attached to human activities in order
    to take input from human actors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simulating a business process to understand its runtime characteristics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using web-based and Eclipse tooling to work on the same project, and to collaborate
    between business users and technologists
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will discuss how to do the above primarily by using the web-based process
    designer. Eclipse-based tooling is also discussed but briefly, highlighting only
    the differences in performing modeling.
  prefs: []
  type: TYPE_NORMAL
- en: Web-based tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web-based tooling for jBPM is an extension to the user interface framework provided
    for the Drools Guvnor knowledge repository. The framework provides a platform
    to create, maintain, and run multiple knowledge assets for a knowledge-based application.
    The jBPM extension (which is named jBPM-WB, the short form for jBPM workbench)
    uses the features of the platform to create and maintain applications and leverage
    the capabilities of the platform to provide user interactions with knowledge assets
    corresponding to the business process. This kind of abstraction helps the jBPM
    workbench to easily integrate the assets of the other software in the family and
    create an integrated development environment for the business logic integration
    platform.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will focus on the asset editors for the knowledge assets
    that are part of jBPM, namely business process definitions, process and task forms,
    and data models.
  prefs: []
  type: TYPE_NORMAL
- en: Process modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process designer provided with jBPM is an integrated environment to design,
    validate, and simulate business processes. The following screenshot highlights
    six distinct parts of the process designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process modeling](img/9578OS_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Parts of jBPM process designer
  prefs: []
  type: TYPE_NORMAL
- en: 'They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**1**: Object library'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2**: Process canvas'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3**: Properties editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4**: Toolbar'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5**: Problem visualization screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**6**: Metadata'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these parts is detailed in the following subsections.
  prefs: []
  type: TYPE_NORMAL
- en: The Object Library
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Object Library** is a palette of constructs that are used to build business
    processes. The **Object Library** holds largely the BPMN-compliant constructs.
    The library is arranged as a drop-down menu with the categories of constructs
    serving as the headings. Users creating a business process can choose a construct
    from the palette and drop the construct in the process canvas. The following screenshot
    shows the default object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Object Library](img/9578OS_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Apart from the BPMN constructs, the object repository also holds the workflow
    patterns. We have discussed these workflow patterns in [Chapter 1](ch01.html "Chapter 1. Business
    Process Modeling – Bridging Business and Technology"), *Business Process Modeling
    – Bridging Business and Technology*, and they are solution templates for frequently
    occurring process design scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: A developer can choose to customize the object library by adding extended and
    customized tasks; we can discuss these in the chapter exclusively for customization.
  prefs: []
  type: TYPE_NORMAL
- en: The process canvas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The process canvas is our workspace; we create the business process in this
    canvas by dragging and dropping the BPMN constructs provided by the object library,
    connecting and customizing them to create the desired business process. The process
    designer helps us to create a technically deployable business process and to model
    the aesthetics of diagramming by ordering and placing the objects, resizing the
    objects, and changing the color patterns. The following screenshot shows a sample
    business process designed using the process designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The process canvas](img/9578OS_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A useful tool, the community calls the morphing menu a great feature available
    in the process canvas. Once you drag and drop and select the object, we can see
    a tool menu around the object. The tools available in the menu will be different
    for different objects. There are three menus, one each at the top, bottom, and
    right of the object; they have a distinct collection of tools.
  prefs: []
  type: TYPE_NORMAL
- en: The right part of the menu has tools that help the user to work primarily on
    the process without always relying on the drag and drop feature of the object
    library. The user can add a task or gateway object to the canvas, include the
    connector, add an attachment, or add a data object. The following screenshot highlights
    the right part of the menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![The process canvas](img/9578OS_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The top part of the menu has utilities for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the task to the process dictionary (this will be discussed in detail
    in the subsequent section of the chapter)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the **Node Source**, which helps in viewing the BPMN source of the object![The
    process canvas](img/9578OS_03_05.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding screenshot shows the top menu highlighted and a view of the **Node
    Source** window, which shows the source of the task object.
  prefs: []
  type: TYPE_NORMAL
- en: The bottom menu contains the tooling for converting a BPMN object into a similar
    counterpart. For example, we have placed a service task and have to change it
    to a human task. We will have to delete the task, replace it with another task,
    and restore the connections to it. Using this feature, and upon clicking the tool
    icon, we get a list of objects that we can interchange, and by selecting another
    object, we can change the object. This is a handy tool, particularly while maintaining
    a very large business process flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following image shows the menu of interchangeable objects on a task element:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The process canvas](img/9578OS_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Properties editor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Apart from the visible parts of a business process diagram, each object in the
    business process has properties that can be customized. For example, in a human
    task, we have to assign an actor or a group. The **Properties** editor helps the
    designer to set these details. The **Properties** editor panel for each object
    can be obtained by selecting the object. For setting the process level properties,
    we have to click on the canvas itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Properties editor panel has the following four sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Core Properties**: The Core properties section contains the properties that
    are essential for a particular BPMN element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extra Properties**: Extra properties as the name indicates are properties
    other than the core properties that are non-mandatory. For example, documentation
    for a task.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Graphical Settings**: Properties that can be changed for improving the aesthetics
    of the business process. The designers will have the flexibility to change the
    background, border, font colors, and the font size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Simulation Properties**: Simulation properties are settings needed for creating
    the process simulation. The details of these properties are discussed in the *Process
    Simulation* section.![Properties editor](img/9578OS_03_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding screenshot shows the property editor for a process, showing core,
    extra, and simulation properties for a BPMN process.
  prefs: []
  type: TYPE_NORMAL
- en: The core and extra properties for each BPMN construct and the purpose are detailed
    in [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*.
  prefs: []
  type: TYPE_NORMAL
- en: Toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Toolbar contains a set of utilities that aid in creating and maintaining a business
    process. Most of the utilities are common to any diagram editor (such as cut,
    paste, save, rename, delete, and zoom) and provide advanced features such as form
    modeling and process simulation.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the tools are easily understandable from their names itself and may
    not need a detailed discussion. We will discuss the specific functionalities that
    need attention in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Problem visualization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we continue designing a business process, it is important to be informed
    about the syntactic and semantic errors in our business process. The problems
    section shows these errors in our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the errors from a BPMN process that has just
    started; that is, it contains only the start node. The errors indicate that the
    start node has no outgoing connection and the process does not have an end node:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Problem visualization](img/9578OS_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Another provision included for the users is to visualize a problem in a specific
    process. This provision switches the editor into the validation mode. It can be
    accessed from the toolbar (refer to the following screenshot), and clicking on
    **Start validating** will show a list of errors in the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Problem visualization](img/9578OS_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Also, if the error is in a particular object, the object is highlighted. Click
    on the highlighted object to get the list of errors.
  prefs: []
  type: TYPE_NORMAL
- en: The designer shows these errors by validating the business processes against
    a set of preconfigured rules; these rules are customizable. (Please see [Chapter
    7](ch07.html "Chapter 7. Customizing and Extending jBPM"), *Customizing and Extending
    jBPM* for the customization techniques).
  prefs: []
  type: TYPE_NORMAL
- en: The Metadata tab
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Metadata** tab shows the details of the business process as an artifact.
    It contains information such as the user who created and modified the artifact,
    the format of the artifact, and so on. Also, there is a provision to have a discussion
    about the artifact, which will be very useful in scenarios where we have a larger
    distributed team of business analysts who create and manage the business processes.
  prefs: []
  type: TYPE_NORMAL
- en: Data object modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A part of business domain modeling is to identify all the entities in the problem
    domain, the relationships between the entities, and their attributes. The data
    associated with these entities are often collected, updated, and removed via business
    processes. Thus, these entities become a part of our business process.
  prefs: []
  type: TYPE_NORMAL
- en: For example, **Customer** is a data entity that occurs in almost every business
    domain, and customer creation (the process of adding a customer) is a very common
    business process. JBPM provides data modeling features where these entities can
    be created as data objects and be included in the business process.
  prefs: []
  type: TYPE_NORMAL
- en: Let us discuss data modeling with an example. We consider a very primitive customer
    creation process with a human task to capture customer details and a service task
    to call the customer creation service available. The image given below shows the
    business process under discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '![Data object modeling](img/9578OS_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the `Customer` data object by using the process designer, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the workbench.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Authoring** | **Project Authoring** | **Tools** | **Data Modeler** and
    click the **Create** button. The following screen pops up:![Data object modeling](img/9578OS_03_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For creating the customer data object, give an identifier, a label, and the
    package name for the unique identification of this data object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Well, as you must have noticed, there is another (optional) field called **Superclass**.
    This needs a bit of explanation on the technical side of how the data object is
    considered in the design of jBPM.
  prefs: []
  type: TYPE_NORMAL
- en: The data object modeled by us is created as a Java object with the attributes
    specified by us and included in the application as its dependency. The superclass
    points to the inheritance feature of Java, and we can use this feature in scenarios
    where data objects have parent–child relationships.
  prefs: []
  type: TYPE_NORMAL
- en: 'After creating the data object, we can use the **Create new field** provision
    (see the following screenshot) to add the attributes corresponding to the data
    object. The following screenshot shows the **name**, **age**, and **sex** attributes
    added to the **Customer** data object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data object modeling](img/9578OS_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Save the data object. Now, we have to utilize the data object in the business
    process.
  prefs: []
  type: TYPE_NORMAL
- en: In the business process, we have a human task that captures the information
    of a customer as its input and maps it to the output set of the task. For doing
    so, in the process designer, add the customer objects as **Type** in the input
    and output set of the human tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the property editor for the **Capture customer
    details** human task, where the customer data object is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data object modeling](img/9578OS_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Form modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing the discussion with our example of primitive customer creation, the
    next problem will be how to provide a user interface for the human task (capturing
    customer information). Form modeling provides a solution for this scenario. A
    business analyst can design a form that can be used to capture the information
    attached to a task.
  prefs: []
  type: TYPE_NORMAL
- en: To be precise, the data collected through the form is mapped to the data output
    set of the human task. When we run the **Create customer** business process, the
    "Capturing customer information" task is assigned to an actor (or a group) and
    will be available in the inbox. For completing the task, the user will have to
    enter the details into a user interface that the engine renders by using the model
    of the form.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, let us explore how to model a form for a task included in the business process.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Create customer** process, select the **Capturing customer** **information**
    task.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the highlighted tool menu, the top part contains the tool for editing the
    associated form. Click on the tool, and select graphic modeling; this takes us
    to the form modeling screen:![Creating a form](img/9578OS_03_13_A.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For modeling the form, first, we have to create the data origins, where we define
    the mapping of data input sets to form variables and the form variables to data
    output sets. In this scenario, we have to map the data input and the data output
    of the customer variable.
  prefs: []
  type: TYPE_NORMAL
- en: We have to fill the **Id**, **Input Id**, and **Output Id** fields and choose
    the render color for the form. Further, we have to select the data models that
    the form has to represent and click **Add data holder** to add a data model as
    a data origin for the form.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the form modeling screen after adding the customer
    data origin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a form](img/9578OS_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we can model the look and feel of the form. For this, we choose the **Add
    fields by origin** tab, where the data origins are listed and add to the form
    canvas the fields attached in the customer data object (as shown in the following
    screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: Select a field, use the toolbar to edit the field properties, and move the field
    around in the form, to improve the aesthetics.
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a form](img/9578OS_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting the field properties
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For each field included in the form, we can specify a set of properties that
    determine its runtime behavior and its layout.
  prefs: []
  type: TYPE_NORMAL
- en: For using the **Properties** panel (as shown in the following screenshot), select
    the field, and on the tool menu, click the edit button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Properties for validating data integrity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Size of the input text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maximum characters supported
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mandatory or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Read-only or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password field or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pattern of the data expressed as a regular expression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties for specifying the look and feel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS style of the label and the field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type of the field if the type of data has multiple user interfaces; for example,
    string can be capture in a field or text area or by using a rich-text editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties for data binding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties for increasing usability
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting default values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inferring values using formulas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Properties** editor for the string type
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting the field properties](img/9578OS_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting a default value
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A general usability and productivity improvement technique in data entry screens
    is to provide default values for the fields. The form modeler supports this feature
    by using Java and **XPath** expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: XPath is a query language that can be used for selecting nodes in an XML document.
    See [http://en.wikipedia.org/wiki/XPath](http://en.wikipedia.org/wiki/XPath).
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose that in the customer creation process example, we have to default the
    field **sex** to **Male**, assuming that there are more male customers in the
    problem domain than female customers. So, in the **Default value formula** field
    of the property editor, we can use the expression as given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting a default value](img/9578OS_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Another common occurring scenario is to default a date field to the current
    date.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting a default value](img/9578OS_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Inferring field values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another feature that we require in a data entry screen is to populate the values
    of some fields on the basis of the values of the other fields. For example, if
    we are capturing the information of a product (say, a laptop), there will be multiple
    cost components such as price, tax value, and discount. The total cost of the
    product is derived from these three components. So, we can set the formula for
    calculating the total cost by using an XPath expression referring to the fields
    for price, tax value, and discount (see the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![Inferring field values](img/9578OS_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making the field read-only would complete the trick.
  prefs: []
  type: TYPE_NORMAL
- en: Subforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In a form, it is common to contain multiple sections. For example, while capturing
    customer information, we also need to capture the address information. Further,
    there are two type of address: one is the permanent address and the other is the
    communication address. Considering reusability in the form design, the most elegant
    way of modeling this scenario will be to create a single address form and including
    it twice in the **Customer** form.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Form modeler supports this scenario by using a feature called subform, where
    we can include one form in another. For achieving this, we have to create **Address
    form** and we have to go to the **Add field by type** tab of **Customer form**
    and add **Simple Subform** and choose the property of **Default form** as the
    already created **Address.form**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subforms](img/9578OS_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiple subforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Yet another requirement is to have multiple objects of the same item in a form.
    Consider a scenario of the order management process. We have to capture the order
    information. An order typically consists of two parts: one is the order itself
    having information such as who the requestor is and at what time the request was
    made, and the other part is the requested item that consists of the product and
    the quantity ordered. This can be multiple; that is, the requestor may have multiple
    items in an order. A typical form to capture these details will be as given in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple subforms](img/9578OS_03_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Furthermore, on clicking **Add order Items**, we will get a row of order items.
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiple subforms](img/9578OS_03_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How do we model this scenario in the form modeler?
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same method as that for the subform. Create data models for Order
    and Item. Create forms for Order and Item. In **Order form**, use the **Multiple
    subform** form type.
  prefs: []
  type: TYPE_NORMAL
- en: If we take the property editor of **multiple subform**, we will get a lot of
    options to improve the look and feel of the form, to control what operations can
    be seen in the form, and so on. Play around and get a good feel of it.
  prefs: []
  type: TYPE_NORMAL
- en: Process simulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: So far, we have discussed a lot about business process modeling and aids that
    jBPM provides for it. The modeled process can now be deployed to know the runtime
    characteristics. Wait! Don't we have to analyze and verify the characteristics
    of the business process? JBPM provides tooling for analyzing the runtime characteristics
    of a modeled business process, and this is called business process simulation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Process simulation helps us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Optimize the business process design by pre-execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the resource utilization of human actors involved in the business
    process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand the performance characteristics of the business process by prediction
    and analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuously improve the business process design by minimizing the errors caused
    by a change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can progress with the discussion on process simulation by using a sample
    business process flow as shown in the following image. The process flow depicts
    a business process for an online transaction, including the collection of customer
    information, sending the one-time password, and validation of the password. The
    consideration for choosing this process design for illustration was to have multiple
    process paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process simulation](img/9578OS_03_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Process paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The process paths feature helps the process designer to see all the possible
    combinations of paths in the business process. This will help us to understand
    any flaw in the logic we have used.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access the **Process Paths** tooling from the designer toolbar, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process paths](img/9578OS_03_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Select the **Process Paths** menu; it will calculate and list the paths that
    the process flow can possibly take. Select one of the paths, and click **Show
    Path** to highlight it in the process canvas:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process paths](img/9578OS_03_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows the process with a path highlighted. This tool
    becomes handy, particularly while designing complex business processes.
  prefs: []
  type: TYPE_NORMAL
- en: Simulation parameters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The process simulation engine needs some parameter inputs other than the information
    available in the business process; these parameters collectively describe or define
    the scenario of business process simulation. The parameters to be captured for
    scenario creation vary with the type of business process elements in a business
    process. For example, we need to capture the working hours with the human tasks
    for simulating resource utilization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Simulation properties can be changed using the property editor and vary when
    selecting different process elements. The following screenshot shows the property
    editor showing the simulation properties for a human task (**Provide one-time
    password**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simulation parameters](img/9578OS_03_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The following section details the simulation parameters that have to be set
    for various process elements.
  prefs: []
  type: TYPE_NORMAL
- en: Process-level parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The process-level simulation properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`baseTimeunit`: The unit of time used in the simulation scenario. All values
    representing time will be considered to be expressed in this unit unless overridden
    locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`baseCurrencyUnit`: The base currency unit used in the simulation scenario
    expressed using the ISO 4217 (three-letter code) standard. For example, the US
    dollar is represented as **USD**. Similar to baseTimeUnit, all values representing
    currency will be considered to be expressed in this unit unless overridden locally.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: ISO 4217 is an international standard, established for the purpose of having
    internationally recognized codes for the representation of currencies.
  prefs: []
  type: TYPE_NORMAL
- en: Task-level parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The task-level simulation properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`unitCost` (labeled as cost per time unit): This is the cost per time unit
    that has to be paid for performing the task. The cost is expressed as the number
    of `baseCurrencyUnit` properties per `baseTimeUnit`, and the default value is
    zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distributionType`: This specifies the statistical distribution of the processing
    time of this task over the period of execution of multiple instances of the business
    process in the scenario.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported statistical distribution types in jBPM are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Uniform distribution**: Uniform distribution or rectangular distribution
    has equal probability for all values between the minimum and the maximum processing
    time values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Normal distribution**: It is one of the common distributions in nature represented
    as a symmetric bell-shaped curve and is specified by the mean and standard deviation
    values of the processing time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poison distribution**: It is used to estimate the number of arrivals within
    a given time and is specified by the mean processing time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: For in-depth understanding of the distribution type, please try understanding
    probability distributions; see [http://en.wikipedia.org/wiki/Probability_distribution](http://en.wikipedia.org/wiki/Probability_distribution).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`staffAvailability`: The quantity of resources available for the task and is
    set to a default of 1\. This parameter is applicable only to human tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workingHours`: The working hours for a human resource. This parameter is also
    applicable only to manual (human) tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flow element parameters
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The simulation property attached to a sequence flow is *probability*, which
    is the probability of the control being passed to this element. This is attached
    to the sequence flow process element. If we specify a probability value of 50
    percent to each of the two sequence flows outgoing from a gateway, it means that
    the two sequence flows are equally probable to occur.
  prefs: []
  type: TYPE_NORMAL
- en: Running simulation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, as we have discussed about setting the simulation properties, we can run
    the simulation. The menu is available along with **Process Paths** in the process
    designer toolbar:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running simulation](img/9578OS_03_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will be prompted to provide details such as the number of instances to be
    simulated and the interval between process simulations. The simulation process
    is asynchronous, and once completed, the simulation tab will be populated with
    the simulation results.
  prefs: []
  type: TYPE_NORMAL
- en: Simulation results
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The summary of the simulation is available on the right hand side of the simulation
    tab. This contains the information of the simulation and a hierarchy for navigating
    through the simulation results at different levels such as process, process elements,
    and paths. The following screenshot shows the summary information for the sample
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simulation results](img/9578OS_03_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The results section is quite fleshy, with different types of charts to choose
    from that represent data in multiple ways. Play around with the options there.
    The following are the major datasets included in the simulation results:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Process simulation results**: If we select the process (from the hierarchy
    shown) to view the execution result, we can view the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Execution times results**: This shows the maximum, minimum, and average time
    of execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activity instances**: This shows the activity (task) instances created during
    the simulation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Total cost**: Shows the minimum, maximum, and average value of the projected
    cost for the business process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following image shows the execution time results of the online transaction
    business process:![Simulation results](img/9578OS_03_29.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Process element-wise simulation results**: Select each process element in
    the hierarchy to show the process element-wise simulation results. For service
    tasks, this basically shows the minimum, maximum, and average values of the execution
    time. Further, for human tasks, it also shows the resource allocation details,
    wait time for resources, and the cost factor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path simulation results**: Path simulation results show the number of times
    that the path has been executed and its percentage contribution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Eclipse-based tooling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous sections of this chapter, we have concentrated on modeling the
    process and utilities available in the web-based tooling provided by jBPM. The
    web-based tooling primarily focuses on the business analysts. Can the business
    analysts create an application on their own? We must acknowledge that we are not
    yet there, but, of course, there are only a few gaps left to reach that destiny.
    On today's course, we need the help of technologists to create a completely functional
    application.
  prefs: []
  type: TYPE_NORMAL
- en: jBPM tooling considers this reality in the form of the updated Eclipse tooling
    that helps developers to create a jBPM application or collaborate with the team
    of business analysts to complete an application.
  prefs: []
  type: TYPE_NORMAL
- en: Importing a project created using web-based tooling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we have discussed how to create a jBPM project by using Eclipse
    tooling. Here, we will discuss how to import a project that was created in the
    process designer (possibly by someone in the business analyst role) into Eclipse
    and continue working on it.
  prefs: []
  type: TYPE_NORMAL
- en: The default implementation of the knowledge repository in jBPM utilizes Git,
    a widely used source code management system. So, when we create a project by using
    web-based tooling, it actually creates a project in Git. Git supports people to
    work concurrently on a project, and this facility can be utilized for collaborative
    working between users of web-based tooling and Eclipse tooling.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first, we should know the Git repository location that jBPM uses as the
    knowledge repository for the sample project:'
  prefs: []
  type: TYPE_NORMAL
- en: Log into web-based tooling, and go to the **Project Authoring** | **Administration**
    menu. There will be a list of repositories and projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the project we want and we can see the Git repository URL. There will
    be two URLs available: one using the **git** protocol and the other for the **ssh**
    protocol. The screenshot of this section is as follows:![Importing a project created
    using web-based tooling](img/9578OS_03_30.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the URL using the tooling available.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open Eclipse (that is installed with the jBPM installation).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **File** | **Import** | **Projects from Git**, click **Next**, select
    **URL**, and click **Next**. We will get the window shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the ssh URL and authentication details:![Importing a project created using
    web-based tooling](img/9578OS_03_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Proceed with the wizard and finish importing the project; in Eclipse **Package
    Explorer**, we will get the project imported. The project structure is the Maven
    project structure for a Java project. Explore and we can see the data object,
    forms, and business processes that we have created:![Importing a project created
    using web-based tooling](img/9578OS_03_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Process modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Eclipse-based tooling comes with a BPMN diagram editor for modeling business
    processes. The editor provides similar features as the web-based process designer.
    It consists of a canvas where we can visually illustrate the business process,
    **Palette**, which acts the BPMN object library, and the property editor for setting
    the properties of each BPMN element. The following screenshot provides the BPMN
    diagram editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Process modeling](img/9578OS_03_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are not discussing the features of the editor in detail as they are similar
    to the features explained for web-based tooling.
  prefs: []
  type: TYPE_NORMAL
- en: Data object modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For data object modeling, jBPM doesn't provide any visual modeling tooling,
    but the source code generated internally while creating a data object is provided
    to the developer user. This source code is in Java, and the objects are represented
    as **Plain Old Java Object** (**POJO**) and decorated using annotations from the
    knowledge API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows `Order.java` created for the `Order` data object
    created in the process designer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Data object modeling](img/9578OS_03_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Form modeling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to data object modeling, developer tooling doesn't include any visual
    tooling for form modeling but is available as a raw file that can be hacked by
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: The files with the `.form` extension contain the properties within the form
    and the files with the `.ftl` (which refers to FreeMarker template files) extension
    contain the layout information of the form.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more details on FreeMarker templates, see [http://en.wikipedia.org/wiki/FreeMarker](http://en.wikipedia.org/wiki/FreeMarker).
  prefs: []
  type: TYPE_NORMAL
- en: Process simulation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no tooling as such available for process simulation, and the developers
    have to rely on unit test cases and debugging tooling available for analyzing
    the runtime characteristics of a process.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The view for writing unit test cases and process instances is discussed in the
    *Writing automated test cases* section of [Chapter 2](ch02.html "Chapter 2. Building
    Your First BPM Application"), *Building Your First BPM Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Saving changes to the knowledge repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In web-based tooling, saving the artifact would be reflected in the knowledge
    repository. Eclipse-based tooling is a bit different in this aspect. The saved
    files will reflect only in our local file system; for synchronizing with the knowledge
    repository (here, the Git repository), we can use Eclipse tooling for commit and
    pushing to the Git repository.
  prefs: []
  type: TYPE_NORMAL
- en: Right click on the project (**Package Explorer**), and go to **Team** | **Commit**.
    It will take you to the commit screen shown in the following screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the artifacts to be moved to the repository, provide a commit message,
    and use the **Commit and Push** button to push the changes to the knowledge repository:![Saving
    changes to the knowledge repository](img/9578OS_03_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The chapter focused on the tooling available for process design and covered
    in detail the various features available in both web and Eclipse-based tooling,
    targeting business users and technologists, respectively. The chapter also helps
    in getting a hands-on experience of how both web and Eclipse-based tooling can
    be used collaboratively in process design.
  prefs: []
  type: TYPE_NORMAL
- en: Now, as we have discussed process design in considerable detail, let us explore
    the tooling available for operation management in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Also, [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*,
    can be considered an extension to process designing, where we will discuss in
    detail each BPMN construct that can be included in a business process.
  prefs: []
  type: TYPE_NORMAL
