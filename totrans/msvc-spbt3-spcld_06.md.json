["```java\ndocker-compose exec mongodb mongosh product-db --quiet --eval \"db.products.find()\" \n```", "```java\ndocker-compose exec mysql mysql -uuser -p review-db -e \"select * from reviews\" \n```", "```java\next {\n  mapstructVersion = \"1.5.3.Final\"\n} \n```", "```java\nimplementation \"org.mapstruct:mapstruct:${mapstructVersion}\" \n```", "```java\nannotationProcessor \"org.mapstruct:mapstruct-processor:${mapstructVersion}\"\ntestAnnotationProcessor \"org.mapstruct:mapstruct-processor:${mapstructVersion}\" \n```", "```java\ncompileOnly \"org.mapstruct:mapstruct-processor:${mapstructVersion}\" \n```", "```java\nimplementation 'org.springframework.boot:spring-boot-starter-data-mongodb' \n```", "```java\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\nimplementation 'com.mysql:mysql-connector-j' \n```", "```java\nimplementation platform('org.testcontainers:testcontainers-bom:1.15.2')\ntestImplementation 'org.testcontainers:testcontainers'\ntestImplementation 'org.testcontainers:junit-jupiter'\ntestImplementation 'org.testcontainers:mongodb' \n```", "```java\nimplementation platform('org.testcontainers:testcontainers-bom:1.15.2')\ntestImplementation 'org.testcontainers:testcontainers'\ntestImplementation 'org.testcontainers:junit-jupiter'\ntestImplementation 'org.testcontainers:mysql' \n```", "```java\n**@Document(collection=\"products\")**\npublic class ProductEntity {\n **@Id**\n private String id;\n **@Version**\n private Integer version;\n **@Indexed(unique = true)**\n private int productId;\n private String name;\n private int weight; \n```", "```java\n@Document(collection=\"recommendations\")\n**@CompoundIndex**(name = \"prod-rec-id\", unique = true, def = \"{'productId': 1, 'recommendationId' : 1}\")\npublic class RecommendationEntity {\n    @Id\n    private String id;\n    @Version\n    private Integer version;\n    private int productId;\n    private int recommendationId;\n    private String author;\n    private int rating;\n    private String content; \n```", "```java\n**@Entity**\n**@Table**(name = \"reviews\", indexes = { @Index(name = \"reviews_unique_idx\", unique = true, columnList = **\"productId,reviewId\"**) })\npublic class ReviewEntity {\n    **@Id** **@GeneratedValue**\n    private int id;\n    **@Version**\n    private int version;\n    private int productId;\n    private int reviewId;\n    private String author;\n    private String subject;\n    private String content; \n```", "```java\npublic interface ProductRepository extends\n    PagingAndSortingRepository <ProductEntity, String>,\n    CrudRepository<ProductEntity, String> {\n    **Optional**<ProductEntity> findByProductId(int productId);\n} \n```", "```java\npublic interface RecommendationRepository extends CrudRepository <RecommendationEntity, String> {\n    **List**<RecommendationEntity> findByProductId(int productId);\n} \n```", "```java\npublic interface ReviewRepository extends CrudRepository<ReviewEntity, Integer> {\n    **@Transactional(readOnly = true)**\n    List<ReviewEntity> findByProductId(int productId);\n} \n```", "```java\n@SpringBootTest\n@Testcontainers\nclass SampleTests {\n  @Container\n  private static MySQLContainer database = \n    new MySQLContainer(\"mysql:8.0.32\"); \n```", "```java\npublic abstract class MySqlTestBase {\n  private static MySQLContainer **database** =\n    new MySQLContainer(\"mysql:8.0.32\").withStartupTimeoutSeconds(300);\n\n  **static** {\n    database.start();\n  }\n  **@DynamicPropertySource**\n  static void **databaseProperties**(DynamicPropertyRegistry registry) {\n    registry.add(\"spring.datasource.url\", database::getJdbcUrl);\n    registry.add(\"spring.datasource.username\", database::getUsername);\n    registry.add(\"spring.datasource.password\", database::getPassword);\n  }\n} \n```", "```java\nclass PersistenceTests extends MySqlTestBase {\nclass ReviewServiceApplicationTests extends MySqlTestBase { \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<configuration>\n    <include resource=\"org/springframework/boot/logging/logback/**defaults.xml**\"/>\n    <include resource=\"org/springframework/boot/logging/logback/**console-appender.xml**\"/>\n    <**root** **level**=**\"INFO\"**>\n        <appender-ref ref=\"CONSOLE\" />\n    </root>\n</configuration> \n```", "```java\n@DataJpaTest\n@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)\nclass PersistenceTests extends MySqlTestBase { \n```", "```java\n@DataMongoTest\nclass PersistenceTests {\n    @Autowired\n    private ProductRepository repository;\n    private ProductEntity savedEntity;\n    @BeforeEach\n    void setupDb() {\n        repository.deleteAll();\n        ProductEntity entity = new ProductEntity(1, \"n\", 1);\n        savedEntity = repository.save(entity);\n        assertEqualsProduct(entity, savedEntity);\n    } \n```", "```java\n@Test\nvoid create() {\n    ProductEntity newEntity = new ProductEntity(2, \"n\", 2);\n    **repository.save**(newEntity);\n    ProductEntity foundEntity = \n    repository.**findById**(newEntity.getId()).get();\n    assertEqualsProduct(newEntity, foundEntity);\n    **assertEquals(****2**, repository.count());\n} \n```", "```java\n@Test\nvoid update() {\n    savedEntity.setName(\"n2\");\n    repository.**save**(savedEntity);\n    ProductEntity foundEntity = \n    repository.**findById**(savedEntity.getId()).get();\n    **assertEquals(****1****,** (long)foundEntity.getVersion());\n    **assertEquals(****\"n2\"****,** foundEntity.getName());\n} \n```", "```java\n@Test\nvoid delete() {\n    repository.**delete**(savedEntity);\n    **assertFalse(repository.existsById**(savedEntity.getId()));\n} \n```", "```java\n@Test\nvoid getByProductId() {\n    Optional<ProductEntity> entity = \n    repository.**findByProductId**(savedEntity.getProductId());\n    assertTrue(entity.isPresent());\n    **assertEqualsProduct**(savedEntity, entity.get());\n} \n```", "```java\n@Test\nvoid duplicateError() {\n  assertThrows(**DuplicateKeyException**.class, () -> {\n    ProductEntity entity = new ProductEntity(savedEntity.getProductId(), \"n\", 1);\n    repository.save(entity);\n  });\n} \n```", "```java\n@Test\nvoid optimisticLockError() {\n    // Store the saved entity in two separate entity objects\n    ProductEntity **entity1** = \n    repository.findById(savedEntity.getId()).get();\n    ProductEntity **entity2** = \n    repository.findById(savedEntity.getId()).get();\n    // Update the entity using the first entity object\n    entity1.setName(\"n1\");\n    repository.**save(entity1)**;\n    //  Update the entity using the second entity object.\n    // This should fail since the second entity now holds an old version \n    // number, that is, an Optimistic Lock Error\n    assertThrows(**OptimisticLockingFailureException.class**, () -> {\n      entity2.setName(\"n2\");\n      repository.**save(entity2)**;\n    });\n    // Get the updated entity from the database and verify its new state\n    ProductEntity updatedEntity = \n    repository.findById(savedEntity.getId()).get();\n    **assertEquals(****1****,** (int)updatedEntity.getVersion());\n    **assertEquals(****\"n1\"****,** updatedEntity.getName());\n} \n```", "```java\n@Test\nvoid paging() {\n    repository.deleteAll();\n    List<ProductEntity> newProducts = rangeClosed(1001, 1010)\n        .mapToObj(i -> new ProductEntity(i, \"name \" + i, i))\n        .collect(Collectors.toList());\n    repository.**saveAll**(newProducts);\n    Pageable nextPage = **PageRequest.of(****0****,** **4****, ASC,** **\"productId\"****);**\n    nextPage = **testNextPage**(nextPage, \"[1001, 1002, 1003, 1004]\", \n    true);\n    nextPage = testNextPage(nextPage, \"[1005, 1006, 1007, 1008]\", \n    true);\n    nextPage = testNextPage(nextPage, \"[1009, 1010]\", false);\n} \n```", "```java\nprivate Pageable testNextPage(Pageable nextPage, String expectedProductIds, boolean expectsNextPage) {\n    Page<ProductEntity> productPage = repository.**findAll(nextPage);**\n    assertEquals(expectedProductIds, productPage.getContent()\n    .stream().map(p -> p.getProductId()).collect(Collectors.\n    toList()).toString());\n    assertEquals(expectsNextPage, productPage.hasNext());\n    return productPage.nextPageable();\n} \n```", "```java\ncd $BOOK_HOME/Chapter06\n./gradlew microservices:product-service:test --tests PersistenceTests \n```", "```java\npublic class ProductServiceApplication {\n  private static final Logger LOG = \n  LoggerFactory.getLogger(ProductServiceApplication.class);\n  public static void main(String[] args) {\n    ConfigurableApplicationContext ctx = \n    SpringApplication.run(ProductServiceApplication.class, args);\n    String mongodDbHost = \n    ctx.getEnvironment().getProperty(\"spring.data.mongodb.host\");\n    String mongodDbPort = \n    ctx.getEnvironment().getProperty(\"spring.data.mongodb.port\");\n **LOG.info(****\"Connected to MongoDb: \"** **+ mongodDbHost +** **\":\"** **+** \n **mongodDbPort);**\n  }\n} \n```", "```java\n@PostMapping(\n    value    = \"/product\",\n    consumes = \"application/json\",\n    produces = \"application/json\")\nProduct createProduct(@RequestBody Product body);\n@DeleteMapping(value = \"/product/{productId}\")\nvoid deleteProduct(@PathVariable int productId); \n```", "```java\nprivate final ServiceUtil serviceUtil;\nprivate final ProductRepository repository;\nprivate final ProductMapper mapper;\n@Autowired\npublic ProductServiceImpl(**ProductRepository repository, ProductMapper mapper, ServiceUtil serviceUtil**) {\n    this.repository = repository;\n    this.mapper = mapper;\n    this.serviceUtil = serviceUtil;\n} \n```", "```java\npublic Product createProduct(Product body) {\n    try {\n        ProductEntity entity = mapper.apiToEntity(body);\n        ProductEntity newEntity = repository.**save**(entity);\n        return mapper.**entityToApi**(newEntity);\n    } catch (**DuplicateKeyException** dke) {\n        **throw****new****InvalidInputException**(\"Duplicate key, Product Id: \" + \n        body.getProductId());\n    }\n} \n```", "```java\npublic Product getProduct(int productId) {\n    if (**productId <** **1**) throw new InvalidInputException(\"Invalid \n    productId: \" + productId);\n    ProductEntity entity = repository.**findByProductId**(productId)\n        .**orElseThrow**(() -> new NotFoundException(\"No product found for \n         productId: \" + productId));\n    Product response = mapper.entityToApi(entity);\n    response.setServiceAddress(**serviceUtil**.getServiceAddress());\n    return response;\n} \n```", "```java\npublic void deleteProduct(int productId) {\n    repository.**findByProductId**(productId).**ifPresent**(e -> \n    repository.delete(e));\n} \n```", "```java\n@Mapper(componentModel = \"spring\")\npublic interface ProductMapper {\n    @Mappings({\n        @Mapping(target = \"**serviceAddress**\", ignore = true)\n    })\n    Product **entityToApi**(ProductEntity entity);\n    @Mappings({\n        @Mapping(target = \"**id**\", ignore = true),\n        @Mapping(target = \"**version**\", ignore = true)\n    })\n    ProductEntity **apiToEntity**(Product api);\n} \n```", "```java\n @Mapping(target = \"**rate**\", source=\"entity.**rating**\"),\n    Recommendation entityToApi(RecommendationEntity entity);\n    @Mapping(target = \"**rating**\", source=\"api.**rate**\"),\n    RecommendationEntity apiToEntity(Recommendation api); \n```", "```java\n@Autowired\nprivate ProductRepository repository;\n@**BeforeEach**\nvoid **setupDb**() {\n   repository.deleteAll();\n} \n```", "```java\n@Test\nvoid duplicateError() {\n   int productId = 1;\n   **postAndVerifyProduct(productId, OK);**\n   assertTrue(repository.findByProductId(productId).isPresent());\n   **postAndVerifyProduct(productId, UNPROCESSABLE_ENTITY)**\n      .jsonPath(\"$.path\").isEqualTo(\"/product\")\n      .jsonPath(\"$.message\").isEqualTo(\"Duplicate key, Product Id: \" + \n       productId);\n} \n```", "```java\n@Test\nvoid deleteProduct() {\n   int productId = 1;\n   postAndVerifyProduct(productId, OK);\n   assertTrue(repository.findByProductId(productId).isPresent());\n   deleteAndVerifyProduct(productId, **OK**);\n   assertFalse(repository.findByProductId(productId).isPresent());\n   deleteAndVerifyProduct(productId, **OK**);\n} \n```", "```java\nprivate WebTestClient.BodyContentSpec postAndVerifyProduct(int productId, HttpStatus expectedStatus) {\n   Product product = new Product(productId, \"Name \" + productId, \n   productId, \"SA\");\n   return client.post()\n      .uri(\"/product\")\n      .body(just(product), Product.class)\n      .accept(APPLICATION_JSON)\n      .**exchange()**\n      .expectStatus().**isEqualTo(expectedStatus)**\n      .expectHeader().**contentType(APPLICATION_JSON)**\n **.expectBody();**\n} \n```", "```java\n@Operation(\n  summary = \"${api.product-composite.create-composite-product.description}\",\n  description = \"${api.product-composite.create-composite-product.notes}\")\n@ApiResponses(value = {\n  @ApiResponse(responseCode = \"400\", description = \"${api.responseCodes.badRequest.description}\"),\n  @ApiResponse(responseCode = \"422\", description = \"${api.responseCodes.unprocessableEntity.description}\")\n  })\n@PostMapping(\n  value    = \"/product-composite\",\n  consumes = \"application/json\")\nvoid createProduct(@RequestBody ProductAggregate body); \n```", "```java\n@Operation(\n  summary = \"${api.product-composite.delete-composite-product.description}\",\n  description = \"${api.product-composite.delete-composite-product.notes}\")\n@ApiResponses(value = {\n  @ApiResponse(responseCode = \"400\", description = \"${api.responseCodes.badRequest.description}\"),\n  @ApiResponse(responseCode = \"422\", description = \"${api.responseCodes.unprocessableEntity.description}\")\n})\n@DeleteMapping(value = \"/product-composite/{productId}\")\nvoid deleteProduct(@PathVariable int productId); \n```", "```java\ncreate-composite-product:\n  description: Creates a composite product\n  notes: |\n    # Normal response\n    The composite product information posted to the API will be \n    split up and stored as separate product-info, recommendation \n    and review entities.\n    # Expected error responses\n    1\\. If a product with the same productId as specified in the \n    posted information already exists, an **422 - Unprocessable \n    Entity** error with a \"duplicate key\" error message will be \n    Returned\ndelete-composite-product:\n  description: Deletes a product composite\n  notes: |\n    # Normal response\n    Entities for product information, recommendations and reviews \n    related to the specified productId will be deleted.\n    The implementation of the delete method is idempotent, that is, \n    it can be called several times with the same response.\n    This means that a delete request of a non-existing product will \n    return **200 Ok**. \n```", "```java\n@Override\npublic Product createProduct(Product body) {\n    try {\n        return **restTemplate.postForObject**(\n                   productServiceUrl, body, Product.class);\n    } catch (HttpClientErrorException ex) {\n        throw **handleHttpClientException**(ex);\n    }\n} \n```", "```java\n@Override\npublic void deleteProduct(int productId) {\n    try {\n        **restTemplate.delete**(productServiceUrl + \"/\" + productId);\n    } catch (HttpClientErrorException ex) {\n        throw handleHttpClientException(ex);\n    }\n} \n```", "```java\n@Override\npublic void createProduct(ProductAggregate body) {\n    try {\n        Product product = new Product(body.getProductId(), \n        body.getName(), body.getWeight(), null);\n        **integration.createProduct**(product);\n        if (body.getRecommendations() != null) {\n            body.getRecommendations().forEach(r -> {\n                Recommendation recommendation = new \n                Recommendation(body.getProductId(), \n                r.getRecommendationId(), r.getAuthor(), r.getRate(), \n                r.getContent(), null);\n                **integration.createRecommendation**(recommendation);\n            });\n        }\n        if (body.getReviews() != null) {\n            body.getReviews().forEach(r -> {\n                Review review = new Review(body.getProductId(), \n                r.getReviewId(), r.getAuthor(), r.getSubject(), \n                r.getContent(), null);\n                **integration.createReview**(review);\n            });\n        }\n    } catch (RuntimeException re) {\n        LOG.warn(\"createCompositeProduct failed\", re);\n        throw re;\n    }\n} \n```", "```java\n@Override\npublic void deleteProduct(int productId) {\n    integration.deleteProduct(productId);\n    integration.deleteRecommendations(productId);\n    integration.deleteReviews(productId);\n} \n```", "```java\n@Test\nvoid createCompositeProduct1() {\n   ProductAggregate compositeProduct = new ProductAggregate(1, \"name\", \n   1, null, null, null);\n   postAndVerifyProduct(compositeProduct, OK);\n}\n@Test\nvoid createCompositeProduct2() {\n    ProductAggregate compositeProduct = new ProductAggregate(1, \"name\", \n        1, singletonList(new RecommendationSummary(1, \"a\", 1, \"c\")),\n        singletonList(new ReviewSummary(1, \"a\", \"s\", \"c\")), null);\n    postAndVerifyProduct(compositeProduct, OK);\n}\n@Test\nvoid deleteCompositeProduct() {\n    ProductAggregate compositeProduct = new ProductAggregate(1, \"name\", \n        1,singletonList(new RecommendationSummary(1, \"a\", 1, \"c\")),\n        singletonList(new ReviewSummary(1, \"a\", \"s\", \"c\")), null);\n    postAndVerifyProduct(compositeProduct, OK);\n    deleteAndVerifyProduct(compositeProduct.getProductId(), OK);\n    deleteAndVerifyProduct(compositeProduct.getProductId(), OK);\n} \n```", "```java\n mongodb:\n    image: **mongo:6.0.4**\n    mem_limit: 512m\n    ports:\n      - **\"27017:27017\"**\n    command: mongod\n    **healthcheck**:\n      test: \"mongo --eval 'db.stats().ok'\"\n      interval: 5s\n      timeout: 2s\n      retries: 60\n  mysql:\n    image: **mysql:8.0.32**\n    mem_limit: 512m\n    ports:\n      - \"**3306:3306**\"\n    environment:\n      - **MYSQL_ROOT_PASSWORD**=rootpwd\n      - **MYSQL_DATABASE**=review-db\n      - **MYSQL_USER**=user\n      - **MYSQL_PASSWORD**=pwd\n    **healthcheck**:\n      test: \"/usr/bin/mysql --user=user --password=pwd --execute \\\"SHOW DATABASES;\\\"\"\n      interval: 5s\n      timeout: 2s\n      retries: 60 \n```", "```java\ndepends_on:\n  mongodb:\n    condition: service_healthy \n```", "```java\ndepends_on:\n  mysql:\n    condition: service_healthy \n```", "```java\nspring.data.mongodb:\n  host: **localhost**\n  port: **27017**\n  database: product-db\nlogging:\n level:\n org.springframework.data.mongodb.core.**MongoTemplate**: **DEBUG**\n---\nspring.config.activate.on-profile: **docker**\nspring.data.mongodb.host: **mongodb** \n```", "```java\n**spring.jpa.hibernate.ddl-auto**: update\nspring.datasource:\n  url: jdbc:mysql://**localhost**/review-db\n  username: user\n  password: pwd\nspring.datasource.hikari.**initializationFailTimeout**: 60000\n**logging**:\n level:\n org.hibernate.SQL: DEBUG\n org.hibernate.type.descriptor.sql.BasicBinder: TRACE\n---\nspring.config.activate.on-profile: docker\nspring.datasource:\n url: jdbc:mysql://**mysql**/review-db \n```", "```java\ndocker-compose exec mongodb mongosh ––quiet\n> \n```", "```java\ndocker-compose exec mysql mysql -uuser -p review-db\nmysql> \n```", "```java\ncd $BOOK_HOME/Chapter06\n./gradlew build && docker-compose build && docker-compose up \n```", "```java\ndocker-compose exec mongodb mongosh product-db --quiet --eval \"db.products.find()\" \n```", "```java\ndocker-compose exec mongodb mongosh recommendation-db --quiet --eval \"db.recommendations.find()\" \n```", "```java\ndocker-compose exec mysql mysql -uuser -p review-db -e \"select * from reviews\" \n```", "```java\nfunction setupTestdata() {\n    body=\\\n    '{\"productId\":1,\"name\":\"product 1\",\"weight\":1, \"recommendations\":[\n        {\"recommendationId\":1,\"author\":\"author \n         1\",\"rate\":1,\"content\":\"content 1\"},\n        {\"recommendationId\":2,\"author\":\"author \n         2\",\"rate\":2,\"content\":\"content 2\"},\n        {\"recommendationId\":3,\"author\":\"author \n         3\",\"rate\":3,\"content\":\"content 3\"}\n    ], \"reviews\":[\n        {\"reviewId\":1,\"author\":\"author 1\",\"subject\":\"subject \n         1\",\"content\":\"content 1\"},\n        {\"reviewId\":2,\"author\":\"author 2\",\"subject\":\"subject \n         2\",\"content\":\"content 2\"},\n        {\"reviewId\":3,\"author\":\"author 3\",\"subject\":\"subject \n         3\",\"content\":\"content 3\"}\n    ]}'\n    recreateComposite 1 \"$body\"\n    body=\\\n    '{\"productId\":113,\"name\":\"product 113\",\"weight\":113, \"reviews\":[\n    {\"reviewId\":1,\"author\":\"author 1\",\"subject\":\"subject \n     1\",\"content\":\"content 1\"},\n    {\"reviewId\":2,\"author\":\"author 2\",\"subject\":\"subject \n     2\",\"content\":\"content 2\"},\n    {\"reviewId\":3,\"author\":\"author 3\",\"subject\":\"subject \n     3\",\"content\":\"content 3\"}\n]}'\n    recreateComposite 113 \"$body\"\n    body=\\\n    '{\"productId\":213,\"name\":\"product 213\",\"weight\":213, \n    \"recommendations\":[\n       {\"recommendationId\":1,\"author\":\"author \n         1\",\"rate\":1,\"content\":\"content 1\"},\n       {\"recommendationId\":2,\"author\":\"author \n        2\",\"rate\":2,\"content\":\"content 2\"},\n       {\"recommendationId\":3,\"author\":\"author \n        3\",\"rate\":3,\"content\":\"content 3\"}\n]}'\n    recreateComposite 213 \"$body\"\n} \n```", "```java\nfunction **recreateComposite**() {\n    local productId=$1\n    local composite=$2\n    assertCurl 200 \"curl -X **DELETE** http://$HOST:$PORT/product-\n    composite/${productId} -s\"\n    curl -X **POST** http://$HOST:$PORT/product-composite -H \"Content-Type: \n    application/json\" --data \"$composite\"\n} \n```", "```java\nwaitForService curl -X DELETE http://$HOST:$PORT/product-composite/13\nsetupTestdata \n```", "```java\ncd $BOOK_HOME/Chapter06\n./test-em-all.bash start stop \n```"]