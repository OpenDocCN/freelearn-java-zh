- en: Chapter 1. Spring Batch Fundamentals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations need to process huge volumes of data through a series of transactions
    in their day-to-day operations. These business operations should be automated
    to process the information efficiently without human intervention. Batch processing
    can execute such a series of operations through programs, with a predefined set
    of data groups as input, process the data, and generate a set of output data groups
    and/or update the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to batch applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch and its offerings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch infrastructure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job design and executions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to batch applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Organizations need to accomplish diverse business operations that include a
    large amount of data processing. Following are some examples of such operations:'
  prefs: []
  type: TYPE_NORMAL
- en: Generation of salary slips and tax calculations in a large enterprise
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Credit card bill generation by banks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fresh stock updated by retail stores in their catalog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All such operations are executed with a predefined set of configurations and
    schedules, to run at a particular offload system time. Batch applications should
    be able to process large volumes of data without human intervention. The following
    figure represents a typical batch application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to batch applications](img/3372OS_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A standard batch application is expected to have the following capabilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scalable**: It should be able to process billions of records and be reliable
    without crashing the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robust**: It should be intelligent enough to identify the invalid data and
    keep track of such mishaps to rerun with corrected data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Dynamic**: It should interact with different systems to access the data using
    the credentials provided and process the operations'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concurrent**: It must process multiple jobs in parallel with the shared resources'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Systematic**: It should process the workflow-driven batches in a sequence
    of dependent steps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High performance**: It must complete the processing in a specified batch
    window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch and its offerings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Batch is a lightweight, comprehensive batch framework designed to enable
    the development of robust batch applications that are vital for the daily operations
    of enterprise systems developed by SpringSource and Accenture in collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch follows POJO-based development to let developers easily implement
    batch processing and integrate with other enterprise systems when needed.
  prefs: []
  type: TYPE_NORMAL
- en: '**Plain Old Java** **Object** (**POJO**) represents an ordinary Java object
    that can be used to store a data item and exchange information between services
    easily.'
  prefs: []
  type: TYPE_NORMAL
- en: While Spring Batch provides many reusable functions adopted from the Spring
    framework and customized for batch applications to perform common batch (such
    as split processing of huge volumes of data, logging, transaction management,
    job process-skip-restart, and effective resource management), it is not a scheduling
    framework. Spring Batch can work in conjunction with a scheduler (such as Quartz/Control-M),
    but cannot replace a scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: 'We discussed the capabilities expected from a standard batch application in
    the previous section. Spring Batch is designed to fulfill the expected features,
    along with its high capability, to integrate with different applications developed
    in other frameworks. Let''s observe some of the important features offered by
    Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: Support for multiple file formats, including fixed length, delimited files,
    XML and common database access using JDBC, and other prominent frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic retry after failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job control language to monitor and perform common operations such as job start,
    stop, suspend, and cancel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking status and statistics during the batch execution and after completing
    the batch processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for multiple ways of launching the batch job, including script, HTTP,
    and message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support to run concurrent jobs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for services such as logging, resource management, skip, and restarting
    the processing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring Batch infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring Batch is designed with a layered architecture, including three major
    components, namely, Application, Core, and Infrastructure, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Batch infrastructure](img/3372OS_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Application layer contains the developer-written code to run the batch jobs
    using Spring Batch.
  prefs: []
  type: TYPE_NORMAL
- en: The Batch Core layer contains the core runtime classes such as `JobLauncher`,
    `Job`, and `Step`, necessary to launch and control the batch job. This layer interacts
    with the Application layer and Batch Infrastructure layer to run the batch jobs.
  prefs: []
  type: TYPE_NORMAL
- en: The Batch Infrastructure layer contains the common readers, writers, and services.
    Both Application and Batch Core are built on top of Infrastructure. They refer
    to Infrastructure for the information required to run the batch jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Multiple components are involved in Spring Batch job execution. The components
    and their relationship are discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Batch components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following figure represents the Spring Batch job components and the relationship
    between these components:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Batch components](img/3372OS_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`JobLauncher` is the interface responsible for beginning a job. When a job
    is first launched, `JobLauncher` verifies in the `JobRepository`, if the job is
    already executed and the validity of the `Job` parameter before executing the
    job.'
  prefs: []
  type: TYPE_NORMAL
- en: A job is the actual batch process to be executed. A `Job` parameter can be configured
    in an XML or a Java program.
  prefs: []
  type: TYPE_NORMAL
- en: '`JobInstance` is the logical instance of the job per cycle. If a `JobInstance`
    execution fails, the same `JobInstance` can be executed again. Hence, each `JobInstance`
    can have multiple job executions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`JobExecution` is the representation of single run of a job. `JobExecution`
    contains the run information of the job in execution, such as `status`, `startTime`,
    `endTime`, `failureExceptions`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`JobParameters` are the set of parameters used for a batch job.'
  prefs: []
  type: TYPE_NORMAL
- en: A `Step` is a sequential phase of a batch job. `Step` contains the definition
    and control information of a batch job. The following figure represents multiple
    steps in a batch job. Each `Step` constitutes three activities, namely, data reading,
    processing, and writing, which are taken care of by `ItemReader`, `ItemProcessor`,
    and `ItemWriter` respectively. Each record is read, processed (optional), and
    written to the system.
  prefs: []
  type: TYPE_NORMAL
- en: '`StepExecution` is the representation of a single run of a `Step`. `StepExecution`
    contains the run information of the step, such as `status`, `startTime`, `endTime`,
    `readCount`, `writeCount`, `commitCount`, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Spring Batch components](img/3372OS_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`JobRepository` provides **create, retrieve, update, and delete** (**CRUD**)
    operations for the `JobLauncher`, `Job`, and `Step` implementations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ItemReader` is the abstract representation of the retrieval operation of `Step`.
    `ItemReader` reads one item at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ItemProcessor` is the abstract representation of the business processing of
    the item read by `ItemReader`. `ItemProcessor` processes valid items only and
    returns `null` if the item is invalid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ItemWriter` is the abstract representation of the output operation of `Step`.
    `ItemWriter` writes one batch or chunk of items at a time.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will use our understanding of these components and develop
    a simple batch application using the essential Spring Batch job components. Also
    included are the code snippets of this application in steps.
  prefs: []
  type: TYPE_NORMAL
- en: Job design and executions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spring Batch can be configured in your project in multiple ways, by including
    downloaded ZIP distribution and checking out from Git or configure using Maven.
    In our case, we will use the Maven configuration. You should have Maven installed
    in your system directly or using an IDE-based plugin (we are using Eclipse in
    this example). Refer to [https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/)
    to integrate Maven in your Eclipse IDE. The latest versions of Eclipse come with
    this plugin installed; verify this before installing.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Spring Batch job can be launched in multiple ways, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching the job from the command line
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the job using job schedulers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the job from a Java program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Launching the job from a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this sample program, we are launching the batch job from a simple Java program.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps, with code snippets, to run the first batch job
    using Spring Batch:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Maven-enabled Java project (let's call it `SpringBatch`). Maven is
    the software to manage the projects effectively. The `pom.xml` file is the configuration
    file for Maven to include any API dependencies. There are dedicated Maven archetypes
    that can create sample projects. The location for Maven is [http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes](http://mvnrepository.com/artifact/org.springframework.batch/spring-batch-archetypes).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configure `pom.xml` in the `root` directory of your project to have the required
    Maven dependencies that include the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Spring framework with batch
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log4j` for logging'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: JUnit to test the application
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Commons Lang helper utilities for the `java.lang` API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**HyperSQL** **Database** (**HSQLDB**) to be able to run using HSQLDB, which
    is a relational database management system written in Java'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create `log4j.xml` under the `src\main\resources` directory to log with the
    following content, which will produce a formatted console output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include the configuration file (`context.xml`) under the `src\main\resources\batch`
    directory with the following content. Context configuration includes the `jobRepository`,
    `jobLauncher`, and `transactionManager` configuration. We configured the batch
    as the default schema in this configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Include the job config (`firstBatch.xml`) under the `src\main\resources\batch`
    directory with the following content. Batch job configuration includes configuring
    the batch job with step and tasklet, using a Java program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write the tasklet (the strategy for processing in a step) for the first job
    (`FirstBatch.java`) under the `src\main\java\batch` directory with the following
    content. This tasklet program is referred to in the `firstBatch.xml` configuration
    for tasklet reference under `Job`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write the Java program to execute the batch job (`ExecuteBatchJob.java`) under
    the `src\main\java\batch` directory with the following content. Through this program,
    we access the job configuration file and identify the `JobLauncher` and `Job`
    beans from the configuration files. `JobExecution` is invoked from the `run` method
    of `JobLauncher` by passing the job and `jobParameters`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned earlier, we can run a batch job from either of the options, including
    command line, job schedulers, web application, or a simple Java program. We are
    using a simple Java program here to run our first job.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following is the folder structure to be generated in the `SpringBatch` project,
    after including the resources mentioned earlier:![Job design and executions](img/3372OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `src/main/java and src/main/resources` to the project source through build
    path properties, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Job design and executions](img/3372OS_01_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Build the project with the Maven installation and run the `ExecuteBatchJob`
    Java program to get the batch job execution status printed on the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following the previously mentioned steps, we configured our first batch job
    using Spring Batch and executed it successfully from a Java program.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout this chapter, we learned about batch applications, real-time batch
    applications, and the capabilities expected from a standard batch application.
    We also learned about Spring Batch applications and the features offered by the
    Spring Batch technology, high-level Spring Batch architecture, and components
    involved in Spring Batch job execution, along with the relationships among those
    components. We completed this chapter with the development of a simple batch application
    and ran the program successfully.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about the configuration of batch jobs using
    XML and EL, and the execution of batch jobs from the command line and application.
    We will also discuss the scheduling of batch jobs.
  prefs: []
  type: TYPE_NORMAL
