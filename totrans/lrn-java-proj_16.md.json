["```java\n// Output: Before: eagle, After: eagle//              Before: eagleBefore: EAGLE, After: EAGLE\n```", "```java\n   A - 11 A - 22 A - 33 A - 44 B - 44 C - 44 A - 55 B - 55 C - 55\n```", "```java\n   List<String> nothing = List.of();   List<String> list1 = Arrays.asList(\"Sean\");\n   List<String> list2 = Arrays.asList(\"Maike\", \"van\", \"Putten\");\n```", "```java\n   Stream<List<String>> streamOfLists = Stream.of(nothing, list1, list2);\n```", "```java\n   streamOfLists.forEach(System.out::print);\n```", "```java\n   [][Sean][Maike, van, Putten]\n```", "```java\n   streamOfLists = Stream.of(nothing, list1, list2);\n```", "```java\n   streamOfLists.flatMap(list -> list.stream())\n```", "```java\n   Stream<R> flatMap(Function(T, R))\n```", "```java\n   SeanMaikevanPutten\n```", "```java\n   .sorted(Comparator.comparing(Person::getAge)) // p -> p.getAge()\n```", "```java\n.filter(name -> name.length() == 3)\n```", "```java\n   0.Tim 1.Tim 0.Jim 1.Jim 0.Peter 0.Ann 1.Ann 0.Mary 2.Ann 3.Ann 2.Jim 3.Jim\n```", "```java\n   int[] ia          = {1,2,3};   double[] da       = {1.1, 2.2, 3.3};\n   long[] la         = {1L, 2L, 3L};\n```", "```java\n   IntStream iStream1       = Arrays.stream(ia);   DoubleStream dStream1    = Arrays.stream(da);\n   LongStream lStream1      = Arrays.stream(la);\n```", "```java\nSystem.out.println(iStream1.count() + \", \" + dStream1.count() + \", \" + lStream1.count()); // 3, 3, 3\n```", "```java\n   IntStream iStream2       = IntStream.of(1, 2, 3);   DoubleStream dStream2    = DoubleStream.of(1.1, 2.2, 3.3);\n   LongStream lStream2      = LongStream.of(1L, 2L, 3L);\n```", "```java\nSystem.out.println(iStream2.count() + \", \" + dStream2.count() + \", \" + lStream2.count()); // 3, 3, 3\n```", "```java\n   DoubleStream random    = DoubleStream.generate(() -> Math.random());   random.limit(5).forEach(System.out::println);\n```", "```java\n   IntStream even = IntStream.iterate(2, (n) -> n + 2);   even.limit(5).forEach(System.out::println);\n```", "```java\n   OptionalInt max = IntStream.of(10, 20, 30)           .max(); // terminal operation\n   max.ifPresent(System.out::println);// 30\n```", "```java\n   OptionalDouble min = DoubleStream.of(10.0, 20.0, 30.0)           .min(); // terminal operation\n   // NoSuchElementException is thrown if no value present\n   System.out.println(min.orElseThrow());// 10.0\n```", "```java\n   OptionalDouble average = LongStream.of(10L, 20L, 30L)           .average(); // terminal operation\n   System.out.println(average.orElseGet(() -> Math.random())); // 20.0\n```", "```java\n   IntStream is = IntStream.of(4, 2, 3);   System.out.println(is.sum());// 9\n```", "```java\n   Stream<Integer> numbers = Stream.of(1,2,3);  System.out.println(numbers.reduce(0, (n1, n2) -> n1 + n2)); // 6\n```", "```java\n   Stream<Integer> sInteger = Stream.of(1,2,3);   IntStream intS           = sInteger.mapToInt( n -> n); // unboxed\n   System.out.println(intS.sum()); // 6\n```", "```java\nint sum = Stream.of(1,2,3)                           .mapToInt(n -> n)\n                           .sum();\nSystem.out.println(sum); // 6\n```", "```java\n   stats(IntStream.of(5, 10, 15, 20));   stats(IntStream.empty());\n```", "```java\n   IntSummaryStatistics intStats = numbers.summaryStatistics(); // terminal op.\n```", "```java\n520\n12.5\n4\n50\n```", "```java\n2147483647-2147483648\n0.0\n0\n0\n```", "```java\n// Stream<T> to Stream<T>Stream.of(\"ash\", \"beech\", \"sycamore\")\n        // map(Function<T,R>)\n        //    Function<T,R> => Function<String, String>\n        //       String apply(String s)\n        .map(tree -> tree.toUpperCase())\n        .forEach(System.out::println);// ASH, BEECH, SYCAMORE\n```", "```java\n// Stream<T> to DoubleStreamDoubleStream dblStream = Stream.of(\"ash\", \"beech\", \"sycamore\")\n        // mapToDouble(ToDoubleFunction<T>)\n        //   ToDoubleFunction<T> is a functional interface:\n        //      double applyAsDouble(T value) => double applyAsDouble(String tree)\n        .mapToDouble(tree -> tree.length()); // upcast in background\ndblStream.forEach(System.out::println); // 3.0, 5.0, 8.0\n```", "```java\n// Stream<T> to IntStreamIntStream intStream    = Stream.of(\"ash\", \"beech\", \"sycamore\")\n        // mapToInt(ToIntFunction<T>)\n        //   ToIntFunction<T> is a functional interface:\n        //      int applyAsInt(T value) => int applyAsInt(String tree)\n        .mapToInt(tree -> tree.length());\nintStream.forEach(System.out::println); // 3, 5, 8\n```", "```java\n// Stream<T> to LongStreamLongStream longStream = Stream.of(\"ash\", \"beech\", \"sycamore\")\n        // mapToLong(ToLongFunction<T>)\n        //   ToLongFunction<T> is a functional interface:\n        //      long applyAsLong(T value) => long applyAsLong(String tree)\n        .mapToLong(tree -> tree.length()); // upcast in background\nlongStream.forEach(System.out::println); // 3, 5, 8\n```", "```java\n// IntStream to Stream<T>Stream<String> streamStr = IntStream.of(1, 2, 3)\n        // mapToObj(IntFunction<R>)\n        //    IntFunction is a functional interface:\n        //       R apply(int value)\n        .mapToObj(n -> \"Number:\"+ n);\nstreamStr.forEach(System.out::println);// Number:1, Number:2, Number:3\n```", "```java\n// IntStream to DoubleStreamDoubleStream dblStream = IntStream.of(1, 2, 3) // re-open closed stream\n        // mapToDouble(IntToDoubleFunction)\n        //   IntToDoubleFunction is a functional interface:\n        //      double applyAsDouble(int value)\n        .mapToDouble(n -> (double)n); // cast NOT necessary\ndblStream.forEach(System.out::println); // 1.0, 2.0, 3.0\n```", "```java\n// IntStream to IntStreamIntStream intStream = IntStream.of(1, 2, 3)\n        //  map(IntUnaryOperator)\n        //    IntUnaryOperator is a functional interface:\n        //        int applyAsInt(int)\n        .map(n -> n*2);\nintStream.forEach(System.out::println);// 2, 4, 6\n```", "```java\n// IntStream to LongStreamLongStream longStream = IntStream.of(1, 2, 3)\n        // mapToLong(IntToLongFunction)\n        //   IntToLongFunction is a functional interface:\n        //      long applyAsLong(int value)\n        .mapToLong(n -> (long)n); // cast NOT necessary\nlongStream.forEach(System.out::println); // 1, 2, 3\n```", "```java\nOptional<T> Optional.of(T value)\n```", "```java\nOptional.empty()\n```", "```java\nOptional.ofNullable(T value)\n```", "```java\nOptional opt1 = Optional.ofNullable(value);Optional opt2 = (value == null) ? Optional.empty() : Optional.of(value);\n```", "```java\n        Optional opt1 = Optional.empty();//        System.out.println(opt1.get()); // NoSuchElementException\n        opt1.ifPresent(o -> System.out.println(\"opt1: \"+o)); \n        // no exception\n```", "```java\n        Optional opt2 = Optional.of(23);//        Optional.of(null); // NullPointerException\n        opt2.ifPresent(o -> System.out.println(\"opt2: \"+o)); \n        // opt2: 23\n```", "```java\nOptional opt3 = Optional.ofNullable(23);opt3.ifPresent(o -> System.out.println(\"opt3: \"+o)); // opt3: 23\n```", "```java\nOptional opt4 = Optional.ofNullable(null);opt4.ifPresent(o -> System.out.println(\"opt4: \"+o));\nif(opt4.isEmpty()){\n    System.out.println(\"opt4 is empty!\");           // opt4 is empty!\n}\n```", "```java\n   Optional<Double> valueInOptional = Optional.ofNullable(60.0);\n```", "```java\n   if(valueInOptional.isPresent()){     System.out.println(valueInOptional.get());  // 60.0\n   }\n```", "```java\n   valueInOptional.ifPresent(System.out::println);// 60.0   System.out.println(valueInOptional.orElse(Double.NaN)); // 60.0\n```", "```java\n   Optional<Double> emptyOptional = Optional.ofNullable(null);\n```", "```java\nSystem.out.println(emptyOptional.orElse(Double.NaN)); // NaNSystem.out.println(emptyOptional.orElseGet(() -> Math.random())); \n// 0.8524556508038182\n```", "```java\n    System.out.println(emptyOptional.orElseThrow()); // NoSuchElementException\n// System.out.println(emptyOptional.orElseThrow(() -> new RuntimeException()));\n```", "```java\n   OptionalDouble optAvg = IntStream.rangeClosed(1, 10).average();   optAvg.ifPresent(d -> System.out.println(d));// 5.5\n```", "```java\n   System.out.println(optAvg.getAsDouble()); // 5.5\n```", "```java\n   double dblAvg = optAvg.orElseGet(() -> Double.NaN);   System.out.println(dblAvg);// 5.5\n```", "```java\n   OptionalInt optInt = OptionalInt.of(35);   int age = optInt.orElseGet(() -> 0);\n   System.out.println(age); // 35\n   System.out.println(optInt.getAsInt()); // 35\n```", "```java\nStream<String> parallelFarmAnimals =    List.of(\"sheep\", \"pigs\", \"horses\").parallelStream(); // Collection API\nStream<String> parallelHouseAnimals =\n    Stream.of(\"cats\", \"dogs\").parallel(); // Stream API\n```", "```java\n   int sum = Stream.of(10, 20, 30, 40, 50, 60)                              .mapToInt(Integer::intValue)\n                              .sum();\n   System.out.println(\"Sum == \"+sum);  // 210\n```", "```java\n   int sum = Stream.of(10, 20, 30, 40, 50, 60)                              .parallel()  // Stream<T> method\n                              .mapToInt(Integer::intValue)\n                              .sum();\n   System.out.println(\"Sum == \"+sum);  // 210\n```", "```java\n10 20 30 40 50Operation took: 5 seconds.\n```", "```java\n40 20 30 50 10Operation took: 1 seconds.\n```", "```java\n10 20 30 40 50Operation took: 1 seconds.\n```", "```java\n   int result = Stream.of(1,2,3,4,5)                                .reduce(0,\n                                              (n1, n2) -> n1 - n2);\n   System.out.println(result); // -15\n```", "```java\n(n1, n2) -> { // accumulator    System.out.print(n1 + \", \" + n2 + \"\\n\");\n    return n1 - n2;\n},\n(subTask1, subTask2) -> { // combiner\n    System.out.print(\"\\t\" +subTask1 + \", \" + subTask2 + \"\\n\");\n    return subTask1 - subTask2;\n}\n```", "```java\n0, 1           // (identity, 1) == -1        // line 10, 3           // (identity, 3) == -3        // line 2\n0, 5           // (identity, 5) == -5        // line 3\n0, 2           // (identity, 2) == -2        // line 4\n0, 4           // (identity, 4) == -4        // line 5\n    -1, -2     // (line 1, line 4)        // line 6\n    -4, -5     // (line 5, line 3)        // line 7\n    -3, 1      // (line 2, line 6)        // line 8\n    1, -4      // (line 7, line 8)        // line 9\n5                 // line 9\n```", "```java\n   {P=Paula, J=John, M=Mike, Mary}   class java.util.concurrent.ConcurrentHashMap\n```", "```java\n   name -> name.charAt(0),  // key\n```", "```java\n   name -> name,            // value\n```", "```java\n   (name1, name2) -> name1 + \", \"+ name2));// key collisions\n```"]