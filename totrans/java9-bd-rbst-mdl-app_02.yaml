- en: The Java 9 Landscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java is already a fully-grown adult in its own right more than two decades since
    its first release. With a stunning community of developers and wide adoption in
    a number of industries, the platform continues to evolve and keep up with the
    rest of the world in terms of performance, security, and scalability. We will
    begin our journey by exploring the most significant features introduced in Java
    9, what are the biggest drivers behind them, and what more we can expect in subsequent
    developments of the platform, along with some of the things that did not make
    it in this release.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Java 9 at 20,000 feet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Breaking the monolith
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playing around with the Java Shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking control of external processes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boosting performance with G1
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Measuring performance with JMH
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready for HTTP 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encompassing reactive programming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Expanding the wish list
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 9 at 20,000 feet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You might be asking yourself--isn't Java 9 just a maintenance release with a
    set of features that did not make it into Java 8? There is plenty of new stuff
    in Java 9 that makes it a distinct version in its own right.
  prefs: []
  type: TYPE_NORMAL
- en: Inarguably, the modularization of the Java platform (developed as part of project
    Jigsaw) is the biggest piece of work that makes it successfully in Java 9\. Initially
    planned for Java 8, but postponed, project Jigsaw is also one of the main reasons
    why the final release of Java 9 was further postponed. Jigsaw also introduces
    a few notable changes to the Java platform and is one of the reasons Java 9 is
    considered a major release. We will explore these features in detail in the subsequent
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **JCP** (**Java Community Process**) provides the mechanisms to turn a
    set of feature proposals (also known as **Java Enhancement Proposals** or **JEPs**)
    into formal specifications that provide the basis to extend the platform with
    new functionality. Java 9 is no different in that regard. Apart from the Jigsaw-related
    Java enhancement proposals, there is a long list of other enhancements that made
    it in Java 9\. Throughout this book, we will discuss the various features in terms
    of logical groups based on the corresponding enhancement proposals, including
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Java Shell** (also called **JShell**)--an interactive shell for the Java
    platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New APIs to work with operating system processes in a portable manner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Garbage-first** (**G1**) garbage collector introduced in Java 7 is made
    the default garbage collector in Java 9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the **Java Microbenchmark Harness** (**JMH**) tool that can be used to
    run performance benchmarks against Java applications is included as part of the
    Java distribution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for the HTTP 2.0 and WebSocket standards by means of a new client API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Concurrency enhancements among which is the definition of the `Flow` class,
    which describes an interface for the reactive streams specification in the Java
    platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some of the initial proposals that were accepted for release 9 did not make
    it there and were postponed for a later release, along with other interesting
    things that developers may expect in the future.
  prefs: []
  type: TYPE_NORMAL
- en: You can download the JDK 9 distribution for your system from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html),
    if you are eager to get your hands dirty before trying to move through the other
    chapters and experimenting with the newly introduced samples and concepts.
  prefs: []
  type: TYPE_NORMAL
- en: Breaking the monolith
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Over the years, the utilities of the Java platform have continued to evolve
    and increase, making it one big monolith. In order to make the platform more suitable
    for embedded and mobile devices, the publication of stripped down editions such
    as Java CDC and Java ME was necessary. These, however, did not prove to be flexible
    enough for modern applications with varying requirements in terms of functionality
    provided by the JDK. In that regard, the need for a modular system came in as
    a viral requirement, not only to address modularization of the Java utilities
    (overall, more than 5000 Java classes and 1500 C++ source files with more than
    25,0000 lines of code for the Hotspot runtime), but also to provide a mechanism
    for developers to create and manage modular applications using the same module
    system used in the JDK. Java 8 provided an intermediate mechanism to enable applications
    to use only a subset of the APIs provided by the entire JDK, and that mechanism
    was named compact profiles. In fact, compact profiles also provided the basis
    for further work that had to be done in order to break dependencies between the
    various distinct components of the JDK required to enable implementation of a
    module system in Java.
  prefs: []
  type: TYPE_NORMAL
- en: The module system itself has been developed under the name of project Jigsaw
    on the basis of which several Java enhancement proposals and a target JSR (376)
    were formed. Much was put in place to address the requirements of project Jigsaw--there
    was evidence of concept implementation with more features proposed than the ones
    that successfully made it into Java 9\. Apart from that, a complete restructuring
    of the JDK code base has been made along with a complete reorganization of the
    JDK distributable images.
  prefs: []
  type: TYPE_NORMAL
- en: There was considerable controversy in the community as to whether an existing
    and mature Java module system such as OSGi should be adopted as part of the JDK
    instead of providing a completely new module system. However, OSGI targets runtime
    behavior such as the resolution of module dependencies, installation, uninstallation,
    starting and stopping of modules (also named bundles in terms of OSGI), custom
    module classloaders, and so on. Project Jigsaw however targets a compile-time
    module system where resolution of dependencies happen when the application is
    compiled. Moreover, installing and uninstalling a module as part of the JDK eliminates
    the need to include it as a dependency explicitly during compilation. Furthermore,
    loading of module classes is made possible through the existing hierarchy of classloaders
    (the bootstrap and the extension and system classloaders), although, there was
    a possibility of using custom module classloaders pretty much similar to the module
    classloaders of OSGI. The latter was, however, abandoned; we will discuss Java
    module classloading in more detail when we talk about the details of the module
    system in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Additional benefits from the Java module system include enhanced security and
    performance. By modularizing the JDK and applications into Jigsaw modules, we
    are able to create well-defined boundaries between components and their corresponding
    domains. This separation of concerns aligns with the security architecture of
    the platform and is an enabler of better resource utilization. We have dedicated
    two detailed chapters to all of the preceding points, and to the topic of adopting
    Java 9 as well, which also requires a degree of understanding on the possible
    approaches to migrating existing projects to Java 9.
  prefs: []
  type: TYPE_NORMAL
