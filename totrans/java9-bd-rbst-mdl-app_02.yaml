- en: The Java 9 Landscape
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 9 的全景
- en: Java is already a fully-grown adult in its own right more than two decades since
    its first release. With a stunning community of developers and wide adoption in
    a number of industries, the platform continues to evolve and keep up with the
    rest of the world in terms of performance, security, and scalability. We will
    begin our journey by exploring the most significant features introduced in Java
    9, what are the biggest drivers behind them, and what more we can expect in subsequent
    developments of the platform, along with some of the things that did not make
    it in this release.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Java 自从第一个版本发布以来已经是一个成熟的成年人，超过二十年了。凭借令人惊叹的开发者社区和众多行业的广泛应用，该平台继续在性能、安全性和可扩展性方面与世界其他地区保持同步。我们将从探索
    Java 9 中引入的最显著特性开始，探讨它们背后的最大推动力，以及我们可以在平台后续发展中期待什么，以及一些未包含在本版本中的内容。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Java 9 at 20,000 feet
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 20,000 英尺的高度看 Java 9
- en: Breaking the monolith
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打破单体架构
- en: Playing around with the Java Shell
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Java Shell 中玩耍
- en: Taking control of external processes
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制外部进程
- en: Boosting performance with G1
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 G1 提升性能
- en: Measuring performance with JMH
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JMH 测量性能
- en: Getting ready for HTTP 2.0
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备迎接 HTTP 2.0
- en: Encompassing reactive programming
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含响应式编程
- en: Expanding the wish list
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展愿望清单
- en: Java 9 at 20,000 feet
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 20,000 英尺的高度看 Java 9
- en: You might be asking yourself--isn't Java 9 just a maintenance release with a
    set of features that did not make it into Java 8? There is plenty of new stuff
    in Java 9 that makes it a distinct version in its own right.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问自己--Java 9 仅仅是一个包含了一些未能在 Java 8 中实现的功能的维护版本吗？Java 9 中有很多新内容，使其成为一个独特的版本。
- en: Inarguably, the modularization of the Java platform (developed as part of project
    Jigsaw) is the biggest piece of work that makes it successfully in Java 9\. Initially
    planned for Java 8, but postponed, project Jigsaw is also one of the main reasons
    why the final release of Java 9 was further postponed. Jigsaw also introduces
    a few notable changes to the Java platform and is one of the reasons Java 9 is
    considered a major release. We will explore these features in detail in the subsequent
    chapters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，Java 平台的模块化（作为 Jigsaw 项目的一部分开发）是使其成功进入 Java 9 的最大工作之一。最初计划在 Java 8 中实现，但被推迟，Jigsaw
    项目也是 Java 9 最终发布进一步推迟的主要原因之一。Jigsaw 还为 Java 平台引入了一些显著的变化，这也是 Java 9 被视为重大版本的原因之一。我们将在后续章节中详细探讨这些特性。
- en: 'The **JCP** (**Java Community Process**) provides the mechanisms to turn a
    set of feature proposals (also known as **Java Enhancement Proposals** or **JEPs**)
    into formal specifications that provide the basis to extend the platform with
    new functionality. Java 9 is no different in that regard. Apart from the Jigsaw-related
    Java enhancement proposals, there is a long list of other enhancements that made
    it in Java 9\. Throughout this book, we will discuss the various features in terms
    of logical groups based on the corresponding enhancement proposals, including
    the following:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**JCP**（Java Community Process）提供了将一系列特性提案（也称为**Java增强提案**或**JEPs**）转化为正式规范的机制，这些规范为通过新功能扩展平台提供了基础。在这一点上，Java
    9 并无不同。除了与 Jigsaw 相关的 Java 增强提案外，还有许多其他增强功能被纳入了 Java 9。在这本书中，我们将根据相应的增强提案，以逻辑组的形式讨论各种特性，包括以下内容：'
- en: The **Java Shell** (also called **JShell**)--an interactive shell for the Java
    platform
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java Shell**（也称为**JShell**）--Java 平台的交互式外壳'
- en: New APIs to work with operating system processes in a portable manner
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以可移植的方式与操作系统进程协同工作的新 API
- en: The **Garbage-first** (**G1**) garbage collector introduced in Java 7 is made
    the default garbage collector in Java 9
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Java 7 中引入的 **Garbage-first**（G1）垃圾收集器在 Java 9 中被设置为默认的垃圾收集器
- en: Adding the **Java Microbenchmark Harness** (**JMH**) tool that can be used to
    run performance benchmarks against Java applications is included as part of the
    Java distribution
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 **Java Microbenchmark Harness**（JMH）工具添加到 Java 分发中，该工具可以用于对 Java 应用程序进行性能基准测试
- en: Support for the HTTP 2.0 and WebSocket standards by means of a new client API
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过新的客户端 API 支持 HTTP 2.0 和 WebSocket 标准
- en: Concurrency enhancements among which is the definition of the `Flow` class,
    which describes an interface for the reactive streams specification in the Java
    platform
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发增强，其中定义了 `Flow` 类，该类描述了 Java 平台中反应式流规范的接口
- en: Some of the initial proposals that were accepted for release 9 did not make
    it there and were postponed for a later release, along with other interesting
    things that developers may expect in the future.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些最初被接受用于发布 9 的提案并没有实现，而是被推迟到了以后的版本，以及其他开发者可能期待的未来有趣的事情。
- en: You can download the JDK 9 distribution for your system from [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html),
    if you are eager to get your hands dirty before trying to move through the other
    chapters and experimenting with the newly introduced samples and concepts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 [http://www.oracle.com/technetwork/java/javase/downloads/index.html](http://www.oracle.com/technetwork/java/javase/downloads/index.html)
    下载适用于您系统的 JDK 9 发行版，如果您在尝试阅读其他章节和尝试新引入的示例和概念之前，想先动手实践。
- en: Breaking the monolith
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打破单体
- en: Over the years, the utilities of the Java platform have continued to evolve
    and increase, making it one big monolith. In order to make the platform more suitable
    for embedded and mobile devices, the publication of stripped down editions such
    as Java CDC and Java ME was necessary. These, however, did not prove to be flexible
    enough for modern applications with varying requirements in terms of functionality
    provided by the JDK. In that regard, the need for a modular system came in as
    a viral requirement, not only to address modularization of the Java utilities
    (overall, more than 5000 Java classes and 1500 C++ source files with more than
    25,0000 lines of code for the Hotspot runtime), but also to provide a mechanism
    for developers to create and manage modular applications using the same module
    system used in the JDK. Java 8 provided an intermediate mechanism to enable applications
    to use only a subset of the APIs provided by the entire JDK, and that mechanism
    was named compact profiles. In fact, compact profiles also provided the basis
    for further work that had to be done in order to break dependencies between the
    various distinct components of the JDK required to enable implementation of a
    module system in Java.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 几年来，Java 平台的实用性持续发展和增加，使其成为了一个庞大的单体。为了使平台更适合嵌入式和移动设备，有必要发布简化版，如 Java CDC 和 Java
    ME。然而，这些版本在满足 JDK 提供的功能性方面变化多端的应用需求时，证明还不够灵活。在这方面，模块化系统的需求变得迫切，不仅是为了解决 Java 工具的模块化（总体而言，超过
    5000 个 Java 类和 1500 个 C++ 源文件，Hotspot 运行时超过 25,0000 行代码），而且还为了提供一个机制，让开发者可以使用与
    JDK 中相同的模块系统来创建和管理模块化应用程序。Java 8 提供了一种中间机制，允许应用程序仅使用整个 JDK 提供的 API 子集，这种机制被命名为紧凑配置文件。实际上，紧凑配置文件还为后续工作奠定了基础，这些工作是为了打破
    JDK 各个不同组件之间的依赖关系，从而实现 Java 中的模块化。
- en: The module system itself has been developed under the name of project Jigsaw
    on the basis of which several Java enhancement proposals and a target JSR (376)
    were formed. Much was put in place to address the requirements of project Jigsaw--there
    was evidence of concept implementation with more features proposed than the ones
    that successfully made it into Java 9\. Apart from that, a complete restructuring
    of the JDK code base has been made along with a complete reorganization of the
    JDK distributable images.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化系统本身是在名为 Jigsaw 的项目下开发的，基于此，形成了几个 Java 增强提案和一个目标 JSR（376）。为了满足 Jigsaw 项目的需求，做了很多工作——有概念实现的证据，提出的特性比成功进入
    Java 9 的特性要多。除此之外，还对 JDK 代码库进行了完全重构，并对 JDK 可分发镜像进行了完全重组。
- en: There was considerable controversy in the community as to whether an existing
    and mature Java module system such as OSGi should be adopted as part of the JDK
    instead of providing a completely new module system. However, OSGI targets runtime
    behavior such as the resolution of module dependencies, installation, uninstallation,
    starting and stopping of modules (also named bundles in terms of OSGI), custom
    module classloaders, and so on. Project Jigsaw however targets a compile-time
    module system where resolution of dependencies happen when the application is
    compiled. Moreover, installing and uninstalling a module as part of the JDK eliminates
    the need to include it as a dependency explicitly during compilation. Furthermore,
    loading of module classes is made possible through the existing hierarchy of classloaders
    (the bootstrap and the extension and system classloaders), although, there was
    a possibility of using custom module classloaders pretty much similar to the module
    classloaders of OSGI. The latter was, however, abandoned; we will discuss Java
    module classloading in more detail when we talk about the details of the module
    system in Java.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在社区中，关于是否应该采用现有的成熟Java模块系统，如OSGi，作为JDK的一部分，而不是提供一个全新的模块系统，存在相当大的争议。然而，OSGi针对的是运行时行为，例如模块依赖的解析、安装、卸载、模块（在OSGi术语中称为bundle）的启动和停止、自定义模块类加载器等。然而，Project
    Jigsaw的目标是一个编译时模块系统，其中依赖关系的解析发生在应用程序编译时。此外，将模块作为JDK的一部分进行安装和卸载，消除了在编译时显式将其包括为依赖项的需要。此外，通过现有的类加载器层次结构（引导类加载器、扩展类加载器和系统类加载器），可以实现模块类的加载，尽管，使用与OSGi模块类加载器相当的自定义模块类加载器也是可能的。然而，后者已被放弃；当我们讨论Java模块系统的细节时，我们将更详细地讨论Java模块类加载。
- en: Additional benefits from the Java module system include enhanced security and
    performance. By modularizing the JDK and applications into Jigsaw modules, we
    are able to create well-defined boundaries between components and their corresponding
    domains. This separation of concerns aligns with the security architecture of
    the platform and is an enabler of better resource utilization. We have dedicated
    two detailed chapters to all of the preceding points, and to the topic of adopting
    Java 9 as well, which also requires a degree of understanding on the possible
    approaches to migrating existing projects to Java 9.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Java模块系统带来的额外好处包括增强的安全性和性能。通过将JDK和应用程序模块化成Jigsaw模块，我们能够创建组件及其相应领域之间明确界定的边界。这种关注点的分离与平台的安全架构相一致，并且是更好地利用资源的能力。我们已经为所有上述点以及采用Java
    9的主题（这也需要对将现有项目迁移到Java 9的可能方法有一定的理解）分配了两个详细的章节。
