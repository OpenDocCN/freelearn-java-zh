- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Writing Business Logic for APIs
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为API编写业务逻辑
- en: You defined API specs using OpenAPI in the previous chapter. API Java interfaces
    and models were generated by the OpenAPI (Swagger Codegen). In this chapter, you
    will implement the API’s code in terms of both business logic and data persistence.
    Here, business logic refers to the actual code you are writing for domain functionalities,
    which in our case comprise operations performed for e-commerce, such as checking
    out the shopping cart.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您使用OpenAPI定义了API规范。API Java接口和模型由OpenAPI（Swagger Codegen）生成。在本章中，您将根据业务逻辑和数据持久化实现API的代码。在这里，业务逻辑指的是您为领域功能编写的实际代码，在我们的案例中，这包括电子商务操作，如结账。
- en: You will write services and repositories for implementation and add hypermedia
    and `"_links"` field. It is worth noting that the code provided only consists
    of the important lines and not the whole file in the interest of brevity. You
    can always access the links given after the code to view the complete file.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将为实现编写服务和存储库，并添加超媒体和`"_links"`字段。值得注意的是，提供的代码仅包含重要的行，而不是整个文件，以保持简洁。您可以通过代码后的链接查看完整文件。
- en: 'This chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Overview of the service design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务设计概述
- en: Adding a repository component
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加存储库组件
- en: Adding service components
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加服务组件
- en: Implementing hypermedia
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现超媒体
- en: Enhancing the controller with a service and HATEOAS
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用服务和HATEOAS增强控制器
- en: Adding ETags to API responses
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在API响应中添加ETags
- en: Testing the APIs
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试API
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To execute the instructions in this and the following chapters, you will need
    any REST API client, such as *Insomnia* or *Postman*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章及以下章节中的指令，您需要任何REST API客户端，例如*Insomnia*或*Postman*。
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub上找到本章的代码文件，地址为[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04)。
- en: Overview of the service design
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务设计概述
- en: 'We are going to implement a multi-layered architecture that comprises four
    layers – the presentation layer, application layer, domain layer, and infrastructure
    layer. Multi-layered architecture is a fundamental building block in the architecture
    style known as **domain-driven design** (**DDD**). Let’s have a brief look at
    each of these layers:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个包含四个层——表示层、应用层、领域层和基础设施层的多层架构。多层架构是被称为**领域驱动设计**（**DDD**）的架构风格的基本构建块。让我们简要地看看这些层：
- en: '**Presentation layer**: This layer represents the **user interface** (**UI**).
    In [*Chapter 7*](B19349_07.xhtml#_idTextAnchor169), *Designing a User Interface*,
    you’ll develop the UI for a sample e-commerce app.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示层**：这一层代表**用户界面**（**UI**）。在[*第7章*](B19349_07.xhtml#_idTextAnchor169)，*设计用户界面*中，您将为一个示例电子商务应用开发UI。'
- en: '**Application layer**: The application layer contains the application logic
    and maintains and coordinates the overall flow of the application. Just to remind
    you, it only contains the application logic and *not* the business logic. RESTful
    web services, async APIs, gRPC APIs, and GraphQL APIs are a part of this layer.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用层**：应用层包含应用逻辑并维护和协调整个应用流程。提醒一下，它只包含应用逻辑，*不包括*业务逻辑。RESTful Web服务、异步API、gRPC
    API和GraphQL API都是这一层的一部分。'
- en: We already covered REST APIs and controllers in [*Chapter 3*](B19349_03.xhtml#_idTextAnchor080),
    *API Specifications and Implementation*, which are part of the application layer.
    We implemented the controllers for demonstration purposes in the previous chapter.
    In this chapter, we’ll implement a controller extensively to serve real data.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第3章*](B19349_03.xhtml#_idTextAnchor080)，*API规范与实现*中介绍了REST API和控制器，它们是应用层的一部分。在前一章中，我们为了演示目的实现了控制器。在本章中，我们将广泛实现一个控制器以服务真实数据。
- en: '`Order` or `Product`. It is responsible for reading/persisting these objects
    to the infrastructure layer. The domain layer consists of services and repositories
    too. We’ll also be covering these in this chapter.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`订单`或`产品`。它负责将这些对象读取/持久化到基础设施层。领域层也包含服务和存储库。我们也会在本章中介绍这些内容。'
- en: '**Infrastructure layer**: The infrastructure layer provides support to all
    other layers. It is responsible for communication, such as interaction with the
    database, message brokers, and filesystems. Spring Boot works as an infrastructure
    layer and provides support for communication and interaction with both external
    and internal systems, such as databases and message brokers.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基础设施层**：基础设施层为所有其他层提供支持。它负责通信，例如与数据库、消息代理和文件系统的交互。Spring Boot作为基础设施层，为与外部和内部系统（如数据库和消息代理）的通信和交互提供支持。'
- en: We’ll use the bottom-to-top approach. Let’s start implementing the domain layer
    with the `@``Repository` component.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用自下而上的方法。让我们从使用`@Repository`组件实现领域层开始。
- en: Adding a Repository component
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个仓库组件
- en: We’ll use the bottom-to-top approach to add a `@Repository` component. Let’s
    start implementing the domain layer with a `@Repository` component. We’ll implement
    the service and enhance the `@Controller` component in subsequent sections accordingly.
    We will code the `@Repository` component first, then use it in the `@Service`
    component using constructor injection. The `@Controller` component will be enhanced
    using the `@Service` component, which will also be injected into the Controller
    using constructor injection.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将采用自下而上的方法来添加`@Repository`组件。让我们从使用`@Repository`组件实现领域层开始。我们将在后续章节中相应地实现服务和增强`@Controller`组件。我们首先将实现`@Repository`组件，然后在`@Service`组件中使用构造函数注入使用它。`@Controller`组件将通过`@Service`组件进行增强，该组件也将通过构造函数注入到控制器中。
- en: The @Repository annotation
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`@Repository`注解'
- en: Repository components are Java classes marked with the `@Repository` annotation.
    This is a special Spring component that is used for interacting with databases.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库组件是带有`@Repository`注解的Java类。这是一个特殊的Spring组件，用于与数据库交互。
- en: '`@Repository` is a general-purpose stereotype that represents both DDD’s Repository
    and the `@Repository`.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Repository`是一个通用 stereotypes，代表 DDD 的 Repository 和 `@Repository`。'
- en: 'You’ll use the following libraries as database dependencies:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用以下库作为数据库依赖项：
- en: '**H2 database for persisting data**: We are going to use H2’s memory instance;
    however, you can also use a file-based instance'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用于持久化数据的H2数据库**：我们将使用H2的内存实例；然而，你也可以使用基于文件的实例'
- en: '**Hibernate object relational mapping (ORM)**: For database object mapping'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Hibernate对象关系映射（ORM）**：用于数据库对象映射'
- en: '**Flyway for database migration**: This helps maintain the database and maintains
    a database changes history that allows rollbacks, version upgrades, and so on'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flyway数据库迁移**：这有助于维护数据库，并保持数据库变更历史记录，允许回滚、版本升级等操作'
- en: 'Let’s add these dependencies to the `build.gradle` file. `org.springframework.boot:spring-boot-starter-data-jpa`
    adds all the required JPA dependencies, including Hibernate:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这些依赖项添加到`build.gradle`文件中。`org.springframework.boot:spring-boot-starter-data-jpa`添加了所有必要的JPA依赖项，包括Hibernate：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/build.gradle](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/build.gradle)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/build.gradle](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/build.gradle)'
- en: After adding the dependencies, we can add the configuration related to the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 添加依赖项后，我们可以添加与数据库相关的配置。
- en: Configuring the database and JPA
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置数据库和JPA
- en: 'We also need to modify the `application.properties` file with the following
    configuration. The configuration file is available at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/application.properties](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/application.properties):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要修改以下配置的`application.properties`文件。配置文件可在[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/application.properties](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/application.properties)找到：
- en: '**Datasource configuration**: The following are the Spring datasource configurations:'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据源配置**：以下为Spring数据源配置：'
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We need to add H2-specific properties to the data source. The URL value suggests
    that a memory-based H2 database instance will be used.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要向数据源添加H2特定的属性。URL值表明将使用基于内存的H2数据库实例。
- en: '**H2 database configuration**: The following are the two H2 database configurations:'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, the H2 console is the H2 web client that allows you to perform different
    operations on H2, such as viewing tables and executing queries. The H2 console
    is enabled for local access only; this means you can access the H2 console only
    on localhost. Also, remote access is disabled by setting `web-allow-others` to
    `false`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '**JPA configuration**: The following are the JPA/Hibernate configurations:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We don’t want to generate the DDL or process the SQL file, because we want to
    use Flyway for database migrations. Therefore, `generate-ddl` is marked with `false`
    and `ddl-auto` is set to `none`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '**Flyway configuration**: The following are the Flyway configurations:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, properties that are required for Flyway to connect to the database have
    been set.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the H2 database
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: You can access the H2 database console using `/h2-console`. For example, if
    your server is running on localhost and port `8080`, then you can access it using
    [http://localhost:8080/h2-console/](http://localhost:8080/h2-console/).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: You are done with setting up the database configuration. Let’s create the database
    schema and seed data script in the next subsection.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: The database and seed data script
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we are done configuring the `build.gradle` and `application.properties`
    files and we can start writing the code. First, we’ll add the Flyway database
    migration script. This script can be written in SQL only. You can place this file
    in the `db/migration` directory inside the `src/main/resources` directory. We’ll
    follow the Flyway naming convention (`V<version>.<name>.sql`) and create the `V1.0.0__Init.sql`
    file inside the `db/migration` directory. You can then add the following script
    to this file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/db/migration/V1.0.0__Init.sql](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/resources/db/migration/V1.0.0__Init.sql)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: This script creates the `ecomm` schema and adds all the tables required for
    our sample e-commerce app. It also adds `insert` statements for the seed data.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Adding entities
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, we can add the entities. An entity is a special object marked with the
    `@Entity` annotation that maps directly to the database table using an ORM implementation
    such as *Hibernate*. Another popular ORM is *EclipseLink*. You can place all entity
    objects in the `com.packt.modern.api.entity` package.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the `CartEntity.java` file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/java/com/packt/modern/api/entity/CartEntity.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/tree/main/Chapter04/src/main/java/com/packt/modern/api/entity/CartEntity.java)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `@Entity` annotation is part of the `jakarta.persistence` package,
    which denotes that it is an entity and should be mapped to the database table.
    By default, it takes the entity name; however, we are using the `@Table` annotation
    to map to the database table. Earlier, the `javax.persistence` package was part
    of Oracle. Once Oracle open sourced JEE and handed it over to the Eclipse Foundation,
    it was legally required to change the name of the package from `javax.persistence`
    to `jakarta.persistence`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`@Entity` 注解是 `jakarta.persistence` 包的一部分，表示它是一个实体，应该映射到数据库表。默认情况下，它采用实体名称；然而，我们使用
    `@Table` 注解来映射到数据库表。之前，`javax.persistence` 包是 Oracle 的一部分。一旦 Oracle 将 JEE 开源并移交给
    Eclipse 基金会，就法律上要求将包名从 `javax.persistence` 更改为 `jakarta.persistence`。
- en: We are also using one-to-one and many-to-many annotations to map the `Cart`
    entity to the `User` entity and `Item` entity, respectively. The `ItemEntity`
    list is also associated with `@JoinTable`, because we are using the `CART_ITEM`
    join table to map the cart and product items based on the `CART_ID` and `ITEM_ID`
    columns in their respective tables.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还使用一对一和一对多注解将 `Cart` 实体映射到 `User` 实体和 `Item` 实体，分别。`ItemEntity` 列表也与 `@JoinTable`
    关联，因为我们使用 `CART_ITEM` 连接表根据它们各自表中的 `CART_ID` 和 `ITEM_ID` 列映射购物车和产品项。
- en: 'In `UserEntity`, the `Cart` entity has also been added to maintain the relationship,
    as shown in the following code block. `FetchType` is marked as `LAZY`, which means
    the user’s cart will be loaded only when explicitly asked. Also, you want to remove
    the cart if it is not referenced by the user, which can be done by configuring
    `orphanRemoval` to `true`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `UserEntity` 中，也添加了 `Cart` 实体以维护关系，如下面的代码块所示。`FetchType` 被标记为 `LAZY`，这意味着只有当明确请求时才会加载用户的购物车。此外，如果你希望当购物车没有被用户引用时移除它，可以通过将
    `orphanRemoval` 配置为 `true` 来实现：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity/UserEntity.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity/UserEntity.java)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity/UserEntity.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity/UserEntity.java)'
- en: All other entities are being added to the entity package located at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 所有其他实体都添加到位于 [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/entity)
    的实体包中。
- en: Now, we can add the repositories.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以添加仓储。
- en: Adding repositories
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加仓储
- en: All the repositories have been added to [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所有仓储都已添加到 [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository)。
- en: Repositories are simplest to add for CRUD operations, thanks to Spring Data
    JPA. You just must extend the interfaces with default implementations, such as
    `CrudRepository`, which provides all the CRUD operation implementations, such
    as `save`, `saveAll`, `findById`, `findAll`, `findAllById`, `delete`, and `deleteById`.
    The `save(Entity e)` method is used for both create and update entity operations.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Spring Data JPA 的支持，添加仓储（Repositories）对 CRUD 操作来说非常简单。你只需扩展具有默认实现的接口，例如 `CrudRepository`，它提供了所有
    CRUD 操作的实现，如 `save`、`saveAll`、`findById`、`findAll`、`findAllById`、`delete` 和 `deleteById`。`save(Entity
    e)` 方法用于创建和更新实体操作。
- en: 'Let’s create `CartRepository.java`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们创建 `CartRepository.java`:'
- en: '[PRE8]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/CartRepository.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/CartRepository.java)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/CartRepository.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/CartRepository.java)'
- en: The `CartRepository` interface extends the `CrudRepository` part of the `org.
    springframework.data.repository` package. You can also add methods supported by
    the JPA query language marked with the `@Query` annotation (part of the `org.springframework.data.jpa.repository`
    package). The query inside the `@Query` annotation is written in `CartEntity`
    as the table name instead of `Cart`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartRepository` 接口扩展了 `org.springframework.data.repository` 包中的 `CrudRepository`
    部分。您还可以添加带有 `@Query` 注解（`org.springframework.data.jpa.repository` 包的一部分）支持的方法。`@Query`
    注解内的查询使用 `CartEntity` 作为表名，而不是 `Cart`。'
- en: Selecting columns in JPQL
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JPQL 中选择列
- en: Similarly, for columns, you should use the variable names given in the class
    for the fields, instead of using the database table fields. In any case, if you
    use the database table name or field name and it does not match the class and
    class members mapped to the actual table, you will get an error.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，对于列，您应该使用类中为字段提供的变量名，而不是使用数据库表字段。在任何情况下，如果您使用数据库表名或字段名，并且它与映射到实际表的类和类成员不匹配，您将得到一个错误。
- en: 'You must be wondering, *“What if I want to add my own custom method with JPQL
    or native SQL?”* Well, let me tell you, you can do this too. For orders, we have
    added a custom interface for this very purpose. First, let’s have a look at `OrderRepository`,
    which is very similar to `CartRepository`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想知道，“如果我想要添加自己的自定义方法使用 JPQL 或原生态 SQL 会怎样？”好吧，让我告诉您，您也可以这样做。对于订单，我们添加了一个自定义接口来达到这个目的。首先，让我们看看
    `OrderRepository`，它与 `CartRepository` 非常相似：
- en: '[PRE9]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepository.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepository.java)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepository.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepository.java)'
- en: 'If you look closely, we have extended an extra interface – `OrderRepositoryExt`.
    This is our extra interface for the `Order` repository and consists of the following
    code:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细观察，我们会扩展一个额外的接口——`OrderRepositoryExt`。这是我们为 `Order` 存储库提供的额外接口，由以下代码组成：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryExt.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryExt.java)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryExt.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryExt.java)'
- en: We already have a `save()` method for this purpose in `CrudRepository`; however,
    we want to use a different implementation. For this purpose, and to demonstrate
    how you can create your own repository method implementation, we are adding this
    extra repository interface.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 `CrudRepository` 中有一个 `save()` 方法来达到这个目的；然而，我们想要使用不同的实现。为此，并展示您如何创建自己的存储库方法实现，我们添加了这个额外的存储库接口。
- en: 'Now, let’s create the `OrderRepositoryExt` interface implementation, as shown
    here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建 `OrderRepositoryExt` 接口实现，如下所示：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryImpl.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryImpl.java)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryImpl.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository/OrderRepositoryImpl.java)'
- en: This way, we can also have our own implementation in JPQL/`@Repository` annotation
    tells the Spring container that this special component is a repository and should
    be used to interact with the database using the underlying JPA.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们也可以在我们的实现中使用JPQL/`@Repository`注解告诉Spring容器这个特殊组件是一个存储库，应该用于使用底层JPA与数据库交互。
- en: It is also marked as `@Transactional`, which is a special annotation that means
    that transactions performed by methods in this class will be managed by Spring.
    It removes all the manual work of adding commits and rollbacks. You can also add
    this annotation to a specific method inside the class.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它也被标记为 `@Transactional`，这是一个特殊的注解，意味着这个类中的方法执行的事务将由Spring管理。它消除了添加提交和回滚的所有手动工作。你还可以将此注解添加到类中的特定方法上。
- en: 'We are also using `@PersistenceContext` for the `EntityManager` class, which
    allows us to create and execute the query manually, as shown in the following
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在`EntityManager`类上使用了`@PersistenceContext`，这允许我们手动创建和执行查询，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This method basically first fetches the items in the customer’s cart. Then,
    it calculates the order total, creates a new order, and saves it in the database.
    Next, it removes the items from the cart by removing the mapping because cart
    items are now part of the order. After that, it saves the mapping of the order
    and cart items.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法基本上首先获取客户购物车中的项目。然后，它计算订单总额，创建一个新的订单，并将其保存到数据库中。接下来，它通过删除映射来从购物车中删除项目，因为购物车项目现在是订单的一部分。之后，它保存订单和购物车项目的映射。
- en: Order creation is done using the native SQL query with the prepared statement.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 订单创建是通过使用预处理语句的本地SQL查询完成的。
- en: If you look closely, you’ll also find that we have used the official *Java 15*
    feature, **text** **blocks** ([https://docs.oracle.com/en/java/javase/15/text-blocks/index.html](https://docs.oracle.com/en/java/javase/15/text-blocks/index.html)).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细观察，你还会发现我们使用了官方的 *Java 15* 功能，**文本** **块** ([https://docs.oracle.com/en/java/javase/15/text-blocks/index.html](https://docs.oracle.com/en/java/javase/15/text-blocks/index.html))。
- en: Similarly, you can create a repository for all other entities. All the repositories
    are available at [https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以为所有其他实体创建存储库。所有存储库都可以在[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/repository)找到。
- en: Now that we have created the repositories, we can move on to adding services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了存储库，我们可以继续添加服务。
- en: Adding a Service component
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加服务组件
- en: The `@Service` component is an interface that works between controllers and
    repositories and is where we’ll add the business logic. Though you can directly
    call repositories from controllers, it is not a good practice as repositories
    should only be part of the data retrieval and persistence functionalities. Service
    components also help in sourcing data from various sources, such as databases
    and other external applications.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Service`组件是一个在控制器和存储库之间工作的接口，我们将在这里添加业务逻辑。尽管你可以直接从控制器中调用存储库，但这不是一种好的做法，因为存储库应该是数据检索和持久化功能的一部分。服务组件还有助于从各种来源获取数据，例如数据库和其他外部应用程序。'
- en: Service components are marked with the `@Service` annotation, which is a specialized
    Spring `@Component` that allows implemented classes to be auto-detected using
    class-path scanning. Service classes are used to add business logic. Like `Repository`,
    the `Service` object also represents both DDD’s Service and JEE’s Business Service
    Façade patterns. Like `Repository`, it is also a general-purpose stereotype and
    can be used according to the underlying approach.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 服务组件用`@Service`注解标记，这是一个专门的Spring `@Component`，它允许通过类路径扫描自动检测实现类。服务类用于添加业务逻辑。像`Repository`一样，`Service`对象也代表了DDD的Service和JEE的业务服务外观模式。像`Repository`一样，它也是一个通用目的的构造型，可以根据底层方法使用。
- en: 'First, we’ll create the service interface, which is a normal Java interface
    with all the desired method signatures. This interface will expose all the operations
    that can be performed by `CartService`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建服务接口，这是一个包含所有所需方法签名的普通Java接口。这个接口将公开`CartService`可以执行的所有操作：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/service/CartService.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/service/CartService.java)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/service/CartService.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/service/CartService.java)'
- en: The `CartServiceImpl` class is annotated with `@Service`, therefore it would
    be auto-detected and available for injection. The `CartRepository`, `UserRepository`,
    and `ItemService` class dependencies are injected using constructor injection.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`CartServiceImpl`类被`@Service`注解，因此它将被自动检测并可用于注入。`CartRepository`、`UserRepository`和`ItemService`类依赖项使用构造函数注入。'
- en: 'Let’s have a look at one more method implementation of the `CartService` interface.
    Check the following code. It adds an item, or updates the price and quantity if
    the item already exists:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`CartService`接口的一个更多方法实现。查看以下代码。它添加一个项目，或者如果项目已存在，则更新价格和数量：
- en: '[PRE14]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding code, we are not managing the application state, but are instead
    writing the sort of business logic that queries the database, sets the entity
    object, persists the object, and then returns the model class. Let’s have a look
    at the statement blocks as numbered in the previous code:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们不是管理应用程序状态，而是在编写查询数据库、设置实体对象、持久化对象，然后返回模型类的业务逻辑。让我们看看前面代码中按编号的语句块：
- en: The method only has `customerId` as a parameter and there is no `Cart` parameter.
    Therefore, first we get `CartEntity` from the database based on the given `customerId`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该方法只有一个`customerId`参数，没有`Cart`参数。因此，首先根据给定的`customerId`从数据库中获取`CartEntity`。
- en: The program control iterates through the items retrieved from the `CartEntity`
    object. If the given item already exists, then the quantity and price are changed.
    Else, it creates a new `Item` entity from the given `Item` model and then saves
    it to the `CartEntity` object. The `itemExists` flag is used to find out whether
    we need to update the existing `Item` or add a new one.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序控制遍历从`CartEntity`对象检索到的项目。如果给定的项目已经存在，则更改数量和价格。否则，它从给定的`Item`模型创建一个新的`Item`实体，并将其保存到`CartEntity`对象中。`itemExists`标志用于确定我们是否需要更新现有的`Item`或添加一个新的。
- en: Finally, the updated `CartEntity` object is saved in the database. The latest
    `Item` entity is retrieved from the database, and then gets converted into a model
    collection and returned to the calling program.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将更新的`CartEntity`对象保存到数据库中。从数据库中检索最新的`Item`实体，然后将其转换为模型集合并返回给调用程序。
- en: Similarly, you can write `Service` components for others the way you have implemented
    them for `Cart`. Before we start enhancing the `Controller` classes, we need to
    add a final frontier to our overall feature.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，你可以像为`Cart`实现的那样为其他人编写`Service`组件。在我们开始增强`Controller`类之前，我们需要将一个最终前沿添加到我们的整体功能中。
- en: Implementing hypermedia
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现超媒体
- en: We learned about hypermedia and HATEOAS in [*Chapter 1*](B19349_01.xhtml#_idTextAnchor014),
    *RESTful Web Service Fundamentals*. Spring provides state-of-the-art support to
    HATEOAS using the `org.springframework.boot:` `spring-boot-starter-hateoas` dependency.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第一章*](B19349_01.xhtml#_idTextAnchor014)，“RESTful Web服务基础”中学习了超媒体和HATEOAS。Spring使用`org.springframework.boot:`
    `spring-boot-starter-hateoas`依赖项为HATEOAS提供最先进的支持。
- en: 'First, we need to make sure that all models returned as part of the API response
    contain the link field. There are different ways to associate links (that is,
    the `org.springframework.hateoas.Link` class) with models, either manually or
    via auto-generation. Spring HATEOAS’s links and attributes are implemented according
    to *RFC-8288* ([https://tools.ietf.org/html/rfc8288](https://tools.ietf.org/html/rfc8288)).
    For example, you can create a self-link manually as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要确保API响应中返回的所有模型都包含链接字段。将链接（即`org.springframework.hateoas.Link`类）与模型关联的方式有多种，可以是手动或通过自动生成。Spring
    HATEOAS的链接和属性是根据*RFC-8288*（[https://tools.ietf.org/html/rfc8288](https://tools.ietf.org/html/rfc8288)）实现的。例如，你可以手动创建一个自链接，如下所示：
- en: '[PRE15]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `responseModel` is a model object that is returned by the API. It has
    a field called `_self` that is set using the `linkTo` and `methodOn` static methods.
    The `linkTo` and `methodOn` methods are provided by the Spring HATEOAS library
    and allow us to generate a self-link for a given controller method.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`responseModel`是一个由API返回的模型对象。它有一个名为`_self`的字段，该字段使用`linkTo`和`methodOn`静态方法设置。`linkTo`和`methodOn`方法由Spring
    HATEOAS库提供，允许我们为给定的控制器方法生成一个自链接。
- en: This can also be done automatically by using Spring HATEOAS’s `RepresentationModelAssembler`
    interface. This interface mainly exposes two methods – `toModel(T model)` and
    `toCollectionModel(Iterable<? extends T> entities)` – that convert the given entity/entities
    into Model and `CollectionModel`, respectively.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过使用Spring HATEOAS的`RepresentationModelAssembler`接口自动完成。此接口主要公开了两个方法——`toModel(T
    model)`和`toCollectionModel(Iterable<? extends T> entities)`——分别将给定的实体/实体转换为模型和`CollectionModel`。
- en: 'Spring HATEOAS provides the following classes to enrich the user-defined models
    with hypermedia. It basically provides a class that contains links and methods
    to add those to the model:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Spring HATEOAS提供了以下类来丰富用户定义的模型以包含超媒体。它基本上提供了一个包含链接和添加这些链接到模型的方法的类：
- en: '`RepresentationModel`: Models/DTOs can extend this to collect the links.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RepresentationModel`：模型/DTO可以扩展此功能以收集链接。'
- en: '`EntityModel`: This extends `RepresentationModel` and wraps the domain object
    (that is, the model) inside it with the content private field. Therefore, it contains
    the domain model/DTO and the links.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EntityModel`：这扩展了`RepresentationModel`，并在其中使用内容私有字段包装了域对象（即模型）。因此，它包含域模型/DTO和链接。'
- en: '`CollectionModel`: `CollectionModel` also extends `RepresentationModel`. It
    wraps the collection of models and provides a way to maintain and store the links.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CollectionModel`：`CollectionModel`也扩展了`RepresentationModel`。它包装了模型集合并提供了一种维护和存储链接的方式。'
- en: '`PageModel`: `PageModel` extends `CollectionModel` and provides ways to iterate
    through the pages, such as `getNextLink()` and `getPreviousLink()`, and through
    page metadata with `getTotalPages()`, among others.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PageModel`：`PageModel`扩展了`CollectionModel`，并提供了遍历页面、例如`getNextLink()`和`getPreviousLink()`，以及通过`getTotalPages()`等页面元数据的方法。'
- en: 'The default way to work with Spring HATEOAS is to extend `RepresentationModel`
    with domain models, as shown in the following snippet:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring HATEOAS的默认方式是通过扩展`RepresentationModel`与域模型一起使用，如下面的代码片段所示：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Extending `RepresentationModel` enhances the model with additional methods,
    including `getLink()`, `hasLink()`, and `add()`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展`RepresentationModel`增强了模型，包括`getLink()`、`hasLink()`和`add()`等附加方法。
- en: 'You know that all these models are being generated by the OpenAPI Codegen;
    therefore, we need to configure the OpenAPI Codegen to generate new models that
    support hypermedia, which is done using the following `config.json` file:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道所有这些模型都是由OpenAPI Codegen生成的；因此，我们需要配置OpenAPI Codegen以生成支持超媒体的新模型，这可以通过以下`config.json`文件完成：
- en: '[PRE17]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/resources/api/config.json](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/resources/api/config.json)'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/resources/api/config.json](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/resources/api/config.json)'
- en: Adding the `hateoas` property and setting it to `true` would automatically generate
    models that would extend the `RepresentationModel` class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`hateoas`属性并将其设置为`true`将自动生成扩展`RepresentationModel`类的模型。
- en: 'We are halfway there to implement the API business logic. Now, we need to make
    sure that links will be populated with the appropriate URL automatically. For
    that purpose, we’ll extend the `RepresentationModelAssemblerSupport` abstract
    class, which internally implements `RepresentationModelAssembler`. Let’s write
    the assembler for `Cart`, as shown in the following code block:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了实现API业务逻辑的一半。现在，我们需要确保链接将自动填充适当的URL。为此，我们将扩展`RepresentationModelAssemblerSupport`抽象类，该类内部实现了`RepresentationModelAssembler`。让我们编写`Cart`的汇编器，如下面的代码块所示：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/hateoas/CartRepresentationModelAssembler.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/hateoas/CartRepresentationModelAssembler.java)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In the previous code, the important part in the `Cart` assembler is extending
    `RepresentationModelAssemblerSupport` and overriding the `toModel()` method. If
    you look closely, you’ll see that `CartController.class`, along with the `Cart`
    model, is also passed to `Rep` using the `super()` call. This allows the assembler
    to generate the links appropriately as is required for the `methodOn` method shared
    earlier. This way, you can generate the link automatically.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'You may also need to add additional links to other resource controllers. You
    can achieve this by writing a bean that implements `RepresentationModelProcessor`
    and then override the `process()` method, as shown here:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You can always refer to [https://docs.spring.io/spring-hateoas/docs/current/reference/html/](https://docs.spring.io/spring-hateoas/docs/current/reference/html/)
    for more information.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Let’s make use of the services and HATEOAS enablers you created in the controller
    classes in the next section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing the controller with a service and HATEOAS
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B19349_03.xhtml#_idTextAnchor080), *API Specifications and
    Implementation*, we created the `Controller` class for the Cart API – `CartController`
    – which just implements the OpenAPI Codegen-generated API specification interface
    – `CartApi`. It was just a mere block of code without any business logic or data
    persistence calls.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, since we have written the repositories, services, and HATEOAS assemblers,
    we can enhance the API controller class, as shown here:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/controller/CartsController.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/controller/CartsController.java)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that `CartService` and `CartRepresentationModelAssembler` are injected
    using the constructor. The Spring container injects these dependencies at runtime.
    Then, these can be used as shown in the following code block:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/controller/CartsController.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/controller/CartsController.java)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, you can see that the service retrieves the `Cart` entity
    based on `customerId` (which internally retrieves it from the repository). This
    `Cart` entity then gets converted into a model that also contains the hypermedia
    links made available by Spring HATEOAS’s `RepresentationModelAssemblerSupport`
    class.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: The `ok()` static method of `ResponseEntity` is used to wrap the returned model
    that also contains the `200` `OK` status.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: This way, you can also enhance and implement the other controllers. Now, we
    can also add an ETag to our API responses.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Adding ETags to API responses
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An ETag is an HTTP response header that contains a computed hash or equivalent
    value of the response entity, and a minor change in the entity must change its
    value. HTTP request objects can then contain the `If-None-Match` and `If-Match`
    headers to receive the conditional responses.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s call an API to retrieve the response with an ETag, as shown next:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Then, you can copy the value from the ETag header to the `If-None-Match` header
    and send the same request again with the `If-None-Match` header:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: You can see that since there is no change to the entity in the database, and
    it contains the same entity, it sends a `304` (`NOT MODIFIED`) response instead
    of sending the proper response with `200 OK`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to implement ETags is using Spring’s `ShallowEtagHeaderFilter`,
    as shown here:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/AppConfig.java](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/src/main/java/com/packt/modern/api/AppConfig.java)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: For this implementation, Spring calculates the MD5 hash from the cached content
    written to the response. Next time, when it receives a request with the `If-None-Match`
    header, it again creates the MD5 hash from the cached content written to the response
    and then compares these two hashes. If both are the same, it sends the `304 NOT
    MODIFIED` response. This way, it will save bandwidth, but the same CPU computation
    will be required.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the HTTP cache control (`org.springframework.http.CacheControl`)
    class and use the version or a similar attribute that gets updated with each change,
    if available, to avoid unnecessary CPU computation and for better ETag handling,
    as shown next:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Adding an ETag to the response also allows UI apps to determine whether a page/object
    refresh is required, or an event needs to be triggered, especially where data
    changes frequently in applications, such as providing live scores or stock quotes.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have implemented fully functional APIs. Let’s test them next.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Testing the APIs
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, you must be looking forward to testing. You can find the API client collection
    at the following location, which is an HTTP Archive file and can be used by Insomnia
    or Postman API clients. You can import it and then test the APIs:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/Chapter04-API-Collection.har](https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/Chapter04/Chapter04-API-Collection.har)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Building and running the Chapter 4 code
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: You can build the code by running `gradlew clean build` from the root of the
    project and run the service using `java -jar build/libs/Chapter04-0.0.1-SNAPSHOT.jar`.
    Make sure to use Java 17 in the path.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about database migration using Flyway, maintaining
    and persisting data using repositories, and writing business logic to services.
    We have also learned how hypermedia can automatically be added to API responses
    using Spring HATEOAS assemblers. You have now learned about all the RESTful API
    development practices, which allows you to use this skill in your day-to-day work
    involving RESTful API development.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have written synchronous APIs. In the next chapter, you will learn
    about async APIs and how to implement them using Spring.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why is the `@Repository` class used?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it possible to add extra imports or annotations to Swagger-generated classes
    or models?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How are ETags useful?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answers
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repository classes are marked with `@Repository`, which is a specialized `@Component`
    that makes these classes auto-detectable by package-level auto-scanning and makes
    them available for injection. Spring provides these classes especially for DDD
    repositories and the JEE DAO pattern. This is the layer used by the application
    for interacting with the database – retrieval and persistence as a central repository.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is possible to change the way models and APIs are generated. You must copy
    the template that you want to modify and then place it in the resources folder.
    Then, you have to modify the `swaggerSources` block in the `build.gradle` file
    by adding an extra configuration parameter to point to the template source, such
    as `templateDir = file("${rootDir}/src/main/resources/ templates")`. This is the
    place where you keep modified templates such as `api. mustache`. This will extend
    the OpenAPI Codegen templates. You can find all the templates inside the OpenAPI
    generator JAR file, such as `openapi-generator-cli-4.3.1.jar` in the `\JavaSpring`
    directory. You can copy the one you want to modify in the `src/main/resource/templates`
    directory and then play with it. You can make use of the following resources:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**JavaSpring** **templates**: [https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources/JavaSpring](https://github.com/swagger-api/swagger-codegen/tree/master/modules/swagger-codegen/src/main/resources/JavaSpring)'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mustache template** **variables**: [https://github.com/swagger-api/swagger-codegen/wiki/Mustache-Template-Variables](https://github.com/swagger-api/swagger-codegen/wiki/Mustache-Template-Variables)'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**An article explaining implementing a similar** **approach**: [https://arnoldgalovics.com/swagger-codegen-custom-template/](https://arnoldgalovics.com/swagger-codegen-custom-template/)'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解释实施类似方法的文章**：[https://arnoldgalovics.com/swagger-codegen-custom-template/](https://arnoldgalovics.com/swagger-codegen-custom-template/)'
- en: ETags help to improve the REST/HTTP client performance and user experience by
    only re-rendering the page/section when the underlying API response is updated.
    They also save bandwidth by carrying the response body only when required. CPU
    utilization can be optimized if the ETag is generated based on values retrieved
    from the database, for example, the version or date last modified.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ETags 通过仅在底层API响应更新时重新渲染页面/部分，有助于提高REST/HTTP客户端性能和用户体验。它们还通过仅在需要时携带响应体来节省带宽。如果ETag是基于从数据库检索的值（例如，版本或最后修改日期）生成的，则可以优化CPU利用率。
- en: Further reading
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Spring HATEOAS: [https://docs.spring.io/spring-hateoas/docs/current/reference/html/](https://docs.spring.io/spring-hateoas/docs/current/reference/html/)'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring HATEOAS：[https://docs.spring.io/spring-hateoas/docs/current/reference/html/](https://docs.spring.io/spring-hateoas/docs/current/reference/html/)
- en: 'RFC-8288: [https://tools.ietf.org/html/rfc8288](https://tools.ietf.org/html/rfc8288)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RFC-8288：[https://tools.ietf.org/html/rfc8288](https://tools.ietf.org/html/rfc8288)
