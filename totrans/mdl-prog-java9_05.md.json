["```java\n$ java --list-modules \n... \njava.jnlp@9 \njava.logging@9\njava.management@9\njava.naming@9\njava.prefs@9\n```", "```java\n$ java -d java.logging \nmodule java.logging@9\n  exports java.util.logging \n  requires mandated java.base \n  provides jdk.internal.logger.DefaultLoggerFinder with\n sun.util.logging.internal.LoggingProviderImpl \n  contains sun.net.www.protocol.http.logging \n  contains sun.util.logging.internal \n  contains sun.util.logging.resources \n```", "```java\n    module packt.addressbook { \n      requires java.logging; \n      requires packt.sortutil; \n    } \n```", "```java\n    package packt.addressbook; \n    ... \n    import java.util.logging.Logger; \n    ... \n    public class Main { \n      private static final Logger logger = \n        Logger.getLogger(Main.class.getName()); \n      ... \n    } \n```", "```java\n    public static void main(String[] args) { \n      logger.info(\"Address book viewer application: Started\"); \n      ... \n      System.out.println(contacts); \n      logger.info(\"Address book viewer application: Completed\"); \n    } \n```", "```java\n$ javac --module-source-path src -d out --module \n  packt.addressbook,packt.sortui\n```", "```java\n$ java --module-path out -m packt.addressbook/packt.addressbook.Main\nMar 27, 2017 7:41:51 PM packt.addressbook.Main main\nINFO: Address book viewer application: Started\n[Charles Babbage, Tim Berners-Lee, Edsger Dijkstra, Ada Lovelace, Alan Turing]\nMar 27, 2017 7:41:51 PM packt.addressbook.Main main\nINFO: Address book viewer application: Completed\n```", "```java\n$ javac --module-source-path src -d out $(find . -name '*.java')\n```", "```java\n    <?xml version=\"1.0\"?> \n    <addressbook> \n      <contact> \n        <firstname>Edsger</firstname> \n        <lastname>Dijkstra</lastname> \n        <address> \n          <street>5612</street> \n          <city>AZ</city> \n          <state>Eindhoven</state> \n          <country>Netherlands</country> \n        </address> \n        <phone>345-678-9012</phone> \n      </contact> \n      <contact> \n          ... \n      </contact> \n      ... \n    </addressbook> \n```", "```java\n    ContactUtil contactUtil = new ContactUtil(); \n    List<Contact> contacts = contactUtil.getContacts(); \n```", "```java\n    module packt.contact { \n      requires java.xml; \n    } \n```", "```java\n    package packt.contact.util; \n    public class ContactLoader { \n      public List<Contact> loadContacts(String fileName) { \n        ... \n      } \n```", "```java\n    package packt.contact.internal; \n    public class XmlUtil { \n      ... \n    } \n```", "```java\n    public Document loadXmlFile(String fileName) throws\n     ParserConfigurationException, SAXException, IOException { \n       File inputFile = new File(fileName); \n       DocumentBuilderFactory dbFactory =\n         DocumentBuilderFactory.newInstance(); \n       DocumentBuilder dBuilder = dbFactory.newDocumentBuilder(); \n       Document doc = dBuilder.parse(inputFile); \n       doc.getDocumentElement().normalize(); \n       return doc; \n    } \n```", "```java\n    public String getElement(Node nNode, String tagName) { \n      if (nNode.getNodeType() == Node.ELEMENT_NODE) { \n        Element eElement = (Element) nNode; \n        return eElement.getElementsByTagName(tagName)\n         .item(0).getTextContent(); \n      } \n      return \"\"; \n    } \n```", "```java\n    public List<Contact> loadContacts(String fileName) {\n\n    }\n```", "```java\n    XmlUtil xmlUtil = new XmlUtil();\n    Document doc = xmlUtil.loadXmlFile(fileName);\n```", "```java\n    module packt.contact { \n      requires java.xml; \n      exports packt.contact.model; \n      exports packt.contact.util; \n    } \n```", "```java\n    public List<Contact> loadContacts(String fileName)  \n     throws ParserConfigurationException, SAXException, IOException\n```", "```java\n    try { \n      contacts = contactLoader.loadContacts(\"input.xml\"); \n    } catch (ParserConfigurationException | SAXException |\n       IOException e) { \n         // Handle error here \n    } \n```", "```java\n    package packt.contact.util; \n    public class ContactLoadException extends Exception { \n      ... \n      public ContactLoadException() { \n        super(); \n      } \n      public ContactLoadException(String message) { \n        super(message); \n        // TODO Auto-generated constructor stub \n      } \n    } \n```", "```java\n    public List<Contact> loadContacts(String fileName) throws\n     ContactLoadException { \n       ... \n       Document doc; \n       try { \n         doc = xmlUtil.loadXmlFile(fileName); \n       } catch (ParserConfigurationException | SAXException |\n          IOException e) { \n            throw new ContactLoadException(\"Unable to load \n            Contact file\"); \n       } \n```", "```java\n    module packt.addressbook { \n      requires java.logging; \n      requires packt.sortutil; \n      requires packt.contact; \n    } \n```", "```java\n    try { \n          contacts = contactLoader.loadContacts(\n            \"/Users/koushik/code/java9/input.xml\"); \n        } catch (ContactLoadException e) { \n            logger.severe(e.getMessage()); \n            System.exit(0); \n        } \n```", "```java\n    public class Main { \n\n      private static final Logger logger = \n        Logger.getLogger(Main.class.getName()); \n\n      public static void main(String[] args) { \n\n        logger.info(\"Address book viewer application: Started\"); \n        List<Contact> contacts = new ArrayList<>(); \n        ContactLoader contactLoader = new ContactLoader(); \n        SortUtil sortUtil = new SortUtil(); \n        try { \n          contacts = contactLoader.loadContacts(\n            \"/Users/koushik/code/java9/input.xml\"); \n        } catch (ContactLoadException e) { \n            logger.severe(e.getMessage()); \n            System.exit(0); \n        } \n\n        sortUtil.sortList(contacts); \n        System.out.println(contacts); \n        logger.info(\"Address book viewer application: Completed\"); \n      } \n    } \n```", "```java\n$ java --module-path out -m packt.addressbook/packt.addressbook.Main\nMar 28, 2017 3:25:41 PM packt.addressbook.Main main \nINFO: Address book viewer application: Started \n[Charles Babbage, Tim Berners-Lee, Edsger Dijkstra, Ada Lovelace, Alan Turing]\nMar 28, 2017 3:25:41 PM packt.addressbook.Main main \nINFO: Address book viewer application: Completed \n```", "```java\n    module packt.addressbook.ui { \n      requires packt.sortutil; \n      requires packt.contact; \n    } \n```", "```java\n    public class Main extends Application { \n\n      public static void main(String[] args) { \n        launch(args); \n      } \n\n      @Override \n      public void start(Stage primaryStage) throws Exception { \n        // Build JavaFX UI and application functionality \n      } \n    } \n```", "```java\n    ContactLoader contactLoader = new ContactLoader(); \n    SortUtil sortUtil = new SortUtil(); \n    try { \n          contacts = contactLoader.loadContacts(\n            \"/Users/koushik/code/java9/input.xml\"); \n        } catch (ContactLoadException e) { \n            logger.severe(e.getMessage()); \n            System.exit(0); \n        } \n\n        sortUtil.sortList(contacts); \n```", "```java\n    // Create a new JavaFX ListView \n    ListView<String> list = new ListView<String>(); \n    // Collect a String list of Contact names in lastName,\n    firstName format \n    List<String> listContactNames = contacts.stream()\n          .map(c -> c.getLastName() + \", \" + c.getFirstName()) \n          .collect(Collectors.toList()); \n    // Build an ObservableList from the list of names \n    ObservableList<String> obsContactNames =\n         FXCollections.observableList(listContactNames); \n    // Pass that to ListView to have them displayed in a list \n    list.setItems(obsContactNames); \n    // Add listener to handle click events \n    list.getSelectionModel()\n          .selectedItemProperty()\n         .addListener((obs, oldVal, newVal) -> { \n             // Get the selected index in the ListView \n             int selectedIndex = \n               list.getSelectionModel().getSelectedIndex(); \n             name.setText(newVal); \n             // Get the Contact instance which was clicked \n             Contact contact = finalContactList.get(selectedIndex); \n             // Set the values to each of the labels on the right \n             street.setText(contact.getAddress().getStreet()); \n             ...    \n```", "```java\n$ java --list-modules \n... \njavafx.base@9\njavafx.controls@9\njavafx.deploy@9\njavafx.fxml@9\njavafx.graphics@9\njavafx.media@9\njavafx.swing@9\njavafx.web@9\n... \n```", "```java\nPackage                  Module \n------------------------------------------\njavafx.collections       javafx.base \njavafx.scene.control     javafx.controls \njavafx.application       javafx.graphics \njavafx.scene.layout      javafx.graphics \njavafx.geometry          javafx.graphics \n```", "```java\n    module packt.addressbook.ui { \n      requires java.logging; \n      requires javafx.base; \n      requires javafx.controls; \n      requires javafx.graphics; \n      requires packt.sortutil; \n      requires packt.contact; \n    } \n```", "```java\n$ javac --module-source-path src -d out $(find . -name '*.java')\n```", "```java\n$ java --module-path out -m packt.addressbook.ui/packt.addressbook.ui.Main\n\nException in Application constructor\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n...\nCaused by: java.lang.IllegalAccessException: class com.sun.javafx.application.LauncherImpl (in module javafx.graphics) cannot access class packt.addressbook.ui.Main (in module packt.addressbook.ui) because module packt.addressbook.ui does not export packt.addressbook.ui to module javafx.graphics \n...\n```", "```java\n    module packt.addressbook.ui { \n      exports packt.addressbook.ui;  \n      requires java.logging; \n      requires javafx.base; \n      requires javafx.controls; \n      requires javafx.graphics; \n      requires packt.sortutil; \n      requires packt.contact; \n    } \n```"]