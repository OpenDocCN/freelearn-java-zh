["```java\n        int[] quantities01 = new int[10];\n        int quantities02[] = new int[10];\n```", "```java\nint[] quantities01;\n…\nquantities01 = new int[10];\n```", "```java\nString[] stuff = new String[4];\n```", "```java\nString myThing = \"Moose\";\nstuff[0] = myThing;\n```", "```java\n        System.out.printf(\"Length: %d%n\", stuff.length);\n```", "```java\n        stuff[0] = \"Java\";\n        stuff[1] = \"Python\";\n        stuff[2] = \"JavaScript\";\n        stuff[3] = \"C#\";\n        for (int i = 0; i < stuff.length; ++i) {\n            System.out.printf(\"Stuff %d = %s%n\", i, stuff[i]);\n        }\n```", "```java\nfor(String s : stuff) {\n    System.out.printf(\"Stuff %s%n\", s);\n}\n```", "```java\n        int numberOfCats = 6;\n        int[] cats = new int[numberOfCats];\n```", "```java\n List moreStuff = new ArrayList();\n```", "```java\n        int numberOfApples = 9;\n        String orange = \"Valencia\";\n\n        List stuff = new ArrayList();\n        stuff.add(numberOfApples);\n        stuff.add(orange);\n\n        System.out.printf(\"Stuff: %s%n\", stuff);\n```", "```java\n        int numberOfApples = 9;\n        String orange1 = \"Valencia\";\n        String orange2 = \"Navel\";\n\n        List<String> stuff = new ArrayList<>();\n        stuff.add(orange1);\n        stuff.add(orange2);\n        stuff.add(numberOfApples);\n\n        System.out.printf(\"Stuff: %s%n\", stuff);\n```", "```java\njava.lang.RuntimeException: Uncompilable code - incompatible types: java.lang.Integer cannot be converted to java.lang.String\n```", "```java\nList<String> moreStuff = new ArrayList<>();\n```", "```java\n        String orange1 = \"Valencia\";\n        String orange2 = \"Navel\";\n\n        List<String> stuff = new ArrayList<>();\n        stuff.add(orange1);\n        stuff.add(orange2);\n\n        System.out.printf(\"Stuff: %s%n\", stuff.get(0));\n        System.out.printf(\"Stuff: %s%n\", stuff.get(1));\n```", "```java\n        stuff.set(0, \"Blood Orange\");\n```", "```java\npublic class ComparableClass implements \n                     Comparable<ComparableClass>{\n    private final int value;\n    public ComparableClass(int initialValue) {\n        value = initialValue;\n    }\n    @Override\n    public int compareTo(ComparableClass o) {\n        return value – o.value;        \n    }\n}\n```", "```java\npublic class ComparableTest {\n    private final ComparableClass comparable01;\n    private final ComparableClass comparable02;\n\n    public ComparableTest(int value1, int value2) {\n        comparable01 = new ComparableClass(value1);\n        comparable02 = new ComparableClass(value2);\n    }\n    public void perform() {\n        System.out.printf(\"comparable01 to comparable02 %d%n\", \n                comparable01.compareTo(comparable02));\n        System.out.printf(\"comparable02 to comparable01 %d%n\", \n                comparable02.compareTo(comparable01));\n    }\n    public static void main(String[] args) {\n        ComparableTest examples = new ComparableTest(12, 2);\n        examples.perform();\n    }\n}\n```", "```java\n    public int getValue() {\n        return value;\n    }\n```", "```java\npublic class ComparableSorting {\n    private final List<ComparableClass> comparableClasses;\n```", "```java\n    public ComparableSorting() {\n        comparableClasses = new ArrayList<>();\n    }\n```", "```java\n    private void fillList() {\n        Random rand = new Random();\n        int upperBound = 25;\n        System.out.printf(\"Unsorted:%n\");\n        for(int i = 0; i < 10; ++i) {\n            comparableClasses.add(\n                new ComparableClass(rand.nextInt(upperBound)));\n        }\n        System.out.printf(\"%n\");\n    }\n```", "```java\n    private void displayList() {\n        for(int i = 0; i < 10; ++i) {\n            System.out.printf(\n                \"%s \", comparableClasses.get(i).getValue());\n        }\n        System.out.printf(\"%n\");\n    }\n```", "```java\n    public void perform() {\n        fillList();\n        displayList();\n```", "```java\n        Collections.sort(comparableClasses);\n        displayList();\n    }    \n    public static void main(String[] args) {\n        ComparableSorting examples = new ComparableSorting();\n        examples.perform();\n    }\n}\n```", "```java\n        Map<Integer, Integer> hashMap = new HashMap<>();\n```", "```java\n        hashMap.put(6, 6);\n        hashMap.put(5, 4);\n        hashMap.put(4, 8);\n        hashMap.put(3, 10);\n        hashMap.put(2, 6);\n```", "```java\n        System.out.printf(\"%s%n\",hashMap.get(4));\n        System.out.printf(\"%s%n\",hashMap.get(1));\n```", "```java\n        Set s = hashMap.entrySet();\n```", "```java\n        Iterator it = s.iterator();\n```", "```java\n        while (it.hasNext()) {\n```", "```java\n            System.out.printf(\"%s%n\",it.next());\n        }\n```", "```java\n8\nnull\n2=6\n3=10\n4=8\n5=4\n6=6\n```", "```java\n        Map<Integer, Integer> linkedHashMap = new              LinkedHashMap<>();\n        linkedHashMap.put(6, 6);\n        linkedHashMap.put(5, 4);\n        linkedHashMap.put(4, 8);\n        linkedHashMap.put(3, 10);\n        linkedHashMap.put(2, 6);\n        Set s = linkedHashMap.entrySet();\n        Iterator it = s.iterator();\n        System.out.printf(\"key=Value%n\");\n        while (it.hasNext()) {\n            System.out.printf(\"%s%n\",it.next());\n        }\n```", "```java\n6=6\n5=4\n4=8\n3=10\n2=6\n```", "```java\n        Map<Integer, Integer> treeMap = new TreeMap<>();\n```", "```java\n        treeMap.put(6, 6);\n        treeMap.put(4, 4);\n        treeMap.put(3, 8);\n        treeMap.put(2, 10);\n        treeMap.put(5, 6);\n```", "```java\n        Set s = treeMap.entrySet();\n        Iterator it = s.iterator();\n        while (it.hasNext()) {\n            System.out.printf(\"%s%n\",it.next());\n        }\n```", "```java\n2=6\n3=10\n4=8\n5=4\n6=6\n```", "```java\n@FunctionalInterface\npublic interface EventHandler<T extends Event> extends     EventListener {\n    void handle(T event);\n}\n```", "```java\n        btn.setOnAction(new EventHandler<ActionEvent>() {\n            @Override\n            public void handle(ActionEvent event) {\n                actionTarget.setText(userBean.toString());\n            }\n        });\n```", "```java\n        btn.setOnAction((ActionEvent event) -> {\n            actionTarget.setText(userBean.toString());\n        });\n```", "```java\n        btn.setOnAction(this::signInButtonHandler);\n```", "```java\nprivate void signInButtonHandler(ActionEvent e) {\n    actionTarget.setText(userBean.toString());\n}\n```", "```java\npublic record Employee(String employeeId, String firstName, \n         String lastName, String department, double salary) { }\n```", "```java\npublic class StreamsExample {\n    private List<Employee> staffList;\n    public StreamsExample() {\n        staffList = Arrays.asList(new Employee(\"A9\", \"Benson\", \n                             \"Bill\", \"Sales\", 56000),\n                new Employee(\"A1\", \"Clarkson\", \n                             \"Bill\", \"Sales\", 56000),\n                new Employee(\"A2\", \"Blunt\", \n                             \"Wesley\", \"HR\", 56000),\n                new Employee(\"A3\", \"Smith\", \n                             \"Joan\", \"Software\", 56000),\n                new Employee(\"A4\", \"Smith\", \n                             \"John\", \"Accounting\", 56000),\n                new Employee(\"A5\", \"Lance\", \n                             \"Gilbert\", \"Sales\", 56000));\n    }\n```", "```java\nList<Employee> filteredList = staffList.stream().\n    filter( s -> s.firstName().startsWith(\"J\")).\n    collect(Collectors.toList());\n```", "```java\nstaffList.stream().sorted((e1, e2) ->  \n    e1.lastName().compareTo(e2.lastName())).\n    forEach(System.out::println);\n```"]