- en: Creating New Vaadin Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的 Vaadin 项目
- en: 'This first chapter serves as the foundations for a journey full of interesting
    technologies, thrilling challenges, and useful code. If you are reading this book,
    the chances that you have coded a Vaadin application before are high. You probably
    have a basic understanding of the key players in a Vaadin application: components,
    layouts, listeners, binders, resources, themes, and widget sets; and you, of course,
    have had your share of Java coding!'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这第一章是通往充满有趣技术、激动人心的挑战和有用代码之旅的基础。如果您正在阅读这本书，您之前编写过 Vaadin 应用程序的可能性很高。您可能对 Vaadin
    应用程序中的关键角色有基本了解：组件、布局、监听器、绑定器、资源、主题和小部件集；当然，您也分享过 Java 编码的经验！
- en: Having a solid base when starting a project, not only with Vaadin but with any
    other technology, plays an important role in successful projects. Understanding
    what your code does and why it is required helps you make better decisions and
    become more productive. This chapter will help you understand what is really needed
    to run a Vaadin application and how you can become more confident about the dependencies
    and Maven configuration required to start a new Vaadin project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始项目时拥有坚实的基础，不仅对于 Vaadin，对于任何其他技术也是如此，在成功项目中起着重要作用。了解您的代码做什么以及为什么需要它有助于您做出更好的决策并提高生产力。本章将帮助您了解运行
    Vaadin 应用程序真正需要什么，以及您如何对启动新 Vaadin 项目所需的依赖项和 Maven 配置更有信心。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: The main Java dependencies in Vaadin
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vaadin 中的主要 Java 依赖项
- en: Servlets and UIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Servlets 和 UIs
- en: Maven plugins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 插件
- en: Key elements in a Vaadin application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Vaadin 应用程序中的关键元素
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: You will be required to have Java SE Development Kit and Java EE SDK version
    8 or later. You also need Maven version 3 or later. A Java IDE with Maven support,
    such as IntelliJ IDEA, Eclipse, or NetBeans is recommended. Finally, to use the
    Git repository of this book, you need to install Git.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 Java SE 开发工具包和 Java EE SDK 版本 8 或更高版本。您还需要 Maven 版本 3 或更高版本。建议使用具有 Maven
    支持的 Java IDE，例如 IntelliJ IDEA、Eclipse 或 NetBeans。最后，为了使用本书的 Git 仓库，您需要安装 Git。
- en: 'The code files of this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/Data-centric-Applications-with-Vaadin-8/tree/master/chapter-01](https://github.com/PacktPublishing/Data-centric-Applications-with-Vaadin-8/tree/master/chapter-01)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Data-centric-Applications-with-Vaadin-8/tree/master/chapter-01](https://github.com/PacktPublishing/Data-centric-Applications-with-Vaadin-8/tree/master/chapter-01)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际运行情况：
- en: '[https://goo.gl/RHavBs](https://goo.gl/RHavBs)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/RHavBs](https://goo.gl/RHavBs)'
- en: About the demo applications
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于演示应用程序
- en: 'This book offers value in two ways: the book itself with its explanations,
    and its companion source code. Instead of developing one single application throughout
    the book, several small demo applications demonstrate the concepts explained in
    each chapter. This helps you to jump to any chapter you are interested in, and
    fully understand the purpose of each part of the code without worrying about the
    technicalities that we have looked at in other chapters.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本书以两种方式提供价值：书本身及其解释，以及其配套源代码。本书不是开发一个单一的应用程序，而是通过几个小型演示应用程序来展示每章中解释的概念。这有助于您跳转到任何感兴趣的章节，并完全理解代码各部分的用途，而无需担心我们在其他章节中探讨的技术细节。
- en: Understanding the source code
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解源代码
- en: 'Before you compile the project, you have to start an H2 database instance.
    For your convenience, a server is configured in the `Data-centric-Applications-with-Vaadin-8/chapter-05`
    Maven module. You can create a run configuration for the following Maven command
    or you can run it directly on the command line:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在编译项目之前，您必须启动一个 H2 数据库实例。为了您的方便，`Data-centric-Applications-with-Vaadin-8/chapter-05`
    Maven 模块中已配置了一个服务器。您可以为此 Maven 命令创建一个运行配置，或者您可以直接在命令行上运行它：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the database is up and running, you can build all the demo applications
    by executing the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库启动并运行后，您可以通过执行以下操作构建所有演示应用程序：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All the demo applications are aggregated in a multi-module Maven project, where
    each module corresponds to one chapter of the book.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有演示应用程序都聚合在一个多模块 Maven 项目中，其中每个模块对应本书的一章。
- en: 'This book assumes that you are proficient enough with Maven to follow the example
    applications of each chapter. If you have no previous experience with Maven or
    multi-module Maven projects, please spend some time going through the tutorials
    and documentation at: [http://maven.apache.org/guides](http://maven.apache.org/guides).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本书假设您对 Maven 已经足够熟悉，能够跟随每一章的示例应用程序。如果您没有 Maven 或多模块 Maven 项目的先前经验，请花些时间浏览以下教程和文档：[http://maven.apache.org/guides](http://maven.apache.org/guides)。
- en: 'Each chapter''s module may contain multiple sub-modules depending on the concepts
    being explained in that chapter. We will use the Jetty Maven plugin to run the
    examples. Most IDEs today have good support for Maven. The best way to use this
    book''s code is by importing the `Data-centric-Applications-with-Vaadin-8` Maven
    project into your IDE and creating individual *running configurations* for each
    demo application. There are tons of resources online that explain how to do this
    for the most popular IDEs, such as IntelliJ IDEA, NetBeans, and Eclipse. For example,
    to run the example application for this chapter in IntelliJ IDEA, create a new
    running configuration like the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章的模块可能包含多个子模块，具体取决于该章节所解释的概念。我们将使用 Jetty Maven 插件来运行示例。如今，大多数 IDE 都对 Maven
    有很好的支持。使用本书代码的最佳方式是将 `Data-centric-Applications-with-Vaadin-8` Maven 项目导入您的 IDE，并为每个演示应用程序创建单独的
    *运行配置*。网上有大量资源解释如何为最流行的 IDE（如 IntelliJ IDEA、NetBeans 和 Eclipse）执行此操作。例如，要在 IntelliJ
    IDEA 中运行本章的示例应用程序，创建一个新的运行配置，如下所示：
- en: '![](img/dbe3941e-694b-4a61-b0b4-aadb27684661.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dbe3941e-694b-4a61-b0b4-aadb27684661.png)'
- en: 'Make sure the working directory corresponds to the correct module in the project.
    Alternatively, you can run the application by executing the following on the command
    line:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 确保工作目录对应于项目中的正确模块。或者，您可以在命令行上执行以下操作来运行应用程序：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This executes the package Maven phase and starts a Jetty server. The application
    should be available at `http://localhost:8080`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行 Maven 的打包阶段并启动 Jetty 服务器。应用程序应在 `http://localhost:8080` 上可用。
- en: So, go ahead! Download the source code, import it into your IDE, and run a couple
    of examples. Feel free to explore the code, modify it, and even use it in your
    own projects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，继续前进！下载源代码，将其导入您的 IDE，并运行几个示例。请随意探索代码，修改它，甚至将其用于您自己的项目中。
- en: Understanding the architecture of a Vaadin application
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Vaadin 应用程序的架构
- en: What's the best way of starting a new Vaadin project? It’s hard to say. It depends
    on your previous experience, current development environment setup, and your own
    preferences. One of the most popular ways of creating a new Vaadin project is
    by using one of the official *Maven archetypes*. You have probably used the `vaadin-archetype-application`
    Maven archetype, which is good to quickly get started with Vaadin. Maybe you have
    used the `vaadin-archetype-widgetset` archetype to create a Vaadin add-on, or
    maybe you have used the `vaadin-archetype-application-multimodule` or `vaadin-archetype-application-example`
    archetypes to bootstrap some of your applications. IDEs such as Eclipse provide
    tools to create a Vaadin project without even thinking about Maven archetypes.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的开始新 Vaadin 项目的办法是什么？很难说。这取决于您的先前经验、当前的开发环境设置以及您的个人偏好。创建新 Vaadin 项目的最流行方法之一是使用官方的
    *Maven 架构模板*。您可能已经使用过 `vaadin-archetype-application` Maven 架构模板，这对于快速开始使用 Vaadin
    很有帮助。也许您已经使用过 `vaadin-archetype-widgetset` 架构模板来创建 Vaadin 扩展，或者您可能使用过 `vaadin-archetype-application-multimodule`
    或 `vaadin-archetype-application-example` 架构模板来启动一些应用程序。例如，Eclipse 这样的 IDE 提供了创建
    Vaadin 项目而不必考虑 Maven 架构模板的工具。
- en: All of those archetypes and tools are good in the sense that they get you started
    quickly and show some good practices. However, when you create a project from
    scratch, you get a better understanding of the whole architecture of the application.
    Of course, you can use the archetypes if you already feel comfortable enough with
    every part of the generated `pom.xml` file. However, building the project from
    scratch is a good way of truly understanding and controlling the configuration
    of your Vaadin application.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些架构模板和工具都很好，因为它们能快速让您开始，并展示一些良好的实践。然而，当您从头开始创建项目时，您能更好地理解整个应用程序的架构。当然，如果您已经对生成的
    `pom.xml` 文件中的每个部分都感到足够舒适，您可以使用这些架构模板。然而，从头开始构建项目是真正理解和控制您的 Vaadin 应用程序配置的好方法。
- en: Creating a new project from scratch
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从头开始创建新项目
- en: Usually, you would use the `vaadin-archetype-application` or `vaadin-archetype-application-multimodule`
    Maven archetypes to create a new Vaadin application. There's nothing wrong with
    using these if the generated code suits your needs. However, these archetypes
    generate more code than you need, partially because they try to show you how to
    get started with Vaadin and partially because they are general-purpose starters
    which are well-suited for most projects. But let's gain full control (and understanding)
    of the web application by creating a Vaadin project in a very different way—a
    more fine-grained, controlled way.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会使用 `vaadin-archetype-application` 或 `vaadin-archetype-application-multimodule`
    Maven 原型来创建一个新的 Vaadin 应用程序。如果您生成的代码符合您的需求，使用这些原型是没有问题的。然而，这些原型生成的代码比您需要的多，部分原因是因为它们试图向您展示如何开始使用
    Vaadin，部分原因是因为它们是通用型启动器，非常适合大多数项目。但是，让我们通过以非常不同的方式创建一个 Vaadin 项目来完全控制（和理解）网络应用程序——一种更细粒度、更受控制的方式。
- en: A Vaadin application is, at the end of the day, a Java application packaged
    as a `WAR` file. You can think of it as a standard web application in which you
    drop some JARs that allow you to build a web UI using the Java Programming Language
    instead of HTML and JavaScript. Is it as simple as dropping some JARs into your
    Java project? Let's find out!
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从根本上说，Vaadin 应用程序是一个打包为 `WAR` 文件的 Java 应用程序。您可以将它视为一个标准网络应用程序，其中您放置一些 JAR 文件，允许您使用
    Java 编程语言而不是 HTML 和 JavaScript 来构建 Web UI。这就像将一些 JAR 文件放入您的 Java 项目中那么简单吗？让我们来看看！
- en: 'Use the `maven-archetype-webapp` to generate a simple Java web application
    by executing the following on the command line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `maven-archetype-webapp` 通过在命令行中执行以下操作来生成一个简单的 Java 网络应用程序：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Use the following properties when prompted:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在提示时使用以下属性：
- en: '`groupId`: `packt.vaadin.datacentric.chapter01`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupId`: `packt.vaadin.datacentric.chapter01`'
- en: '`artifactId`: `chapter-01`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`artifactId`: `chapter-01`'
- en: '`version`: `1.0-SNAPSHOT`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: `1.0-SNAPSHOT`'
- en: '`package`: `packt.vaadin.datacentric.chapter01`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`: `packt.vaadin.datacentric.chapter01`'
- en: IDEs such as NetBeans, Eclipse, and IntelliJ IDEA have excellent support for
    Maven. You should be able to create a new Maven project using the previous archetype
    in your IDE by providing the corresponding Maven coordinates without using the
    command line.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans、Eclipse 和 IntelliJ IDEA 等集成开发环境对 Maven 有很好的支持。您应该能够在 IDE 中使用之前提供的原型创建一个新的
    Maven 项目，只需提供相应的 Maven 坐标，无需使用命令行。
- en: 'Clean up the `pom.xml` file to make it look like the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 清理 `pom.xml` 文件，使其看起来如下所示：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note that in the code provided with this book, you’ll find a `<parent>` section
    in the `pom.xml` file of the `chapter-01` project. This is because all the demo
    applications of the book have been aggregated into a single `Data-centric-Applications-with-Vaadin-8`
    Maven project for your convenience. You don’t need to add any `<parent>` section
    to your project if you are following the steps in this chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在本书提供的代码中，您会在 `chapter-01` 项目的 `pom.xml` 文件中找到一个 `<parent>` 部分。这是因为本书的所有演示应用程序都已聚合到一个单独的
    `Data-centric-Applications-with-Vaadin-8` Maven 项目中，以便您方便使用。如果您按照本章的步骤进行操作，您不需要在项目中添加任何
    `<parent>` 部分。
- en: 'Remove the `src/main/webapp` and `src/main/resources` directories. This deletes
    the generated `web.xml` file which will make Maven complain. To tell it that this
    was intended, add the following property to your `pom.xml` file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 删除 `src/main/webapp` 和 `src/main/resources` 目录。这将删除生成的 `web.xml` 文件，这将使 Maven
    抱怨。为了告诉它这是故意的，请将以下属性添加到您的 `pom.xml` 文件中：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Also, add the following properties to configure Maven to use Java 8:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，添加以下属性以配置 Maven 使用 Java 8：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Maven dependencies
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 依赖项
- en: 'At this point, we have a very simple Java project setup that will be packaged
    as a `WAR` file. The next natural step is to add the required dependencies or
    libraries. Vaadin, like many other Java web applications, requires the Servlet
    API. Add it as follows to the `pom.xml` file:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个非常简单的 Java 项目设置，它将被打包成 `WAR` 文件。下一步自然的步骤是添加所需的依赖项或库。Vaadin，就像许多其他
    Java 网络应用程序一样，需要 Servlet API。按照以下步骤将其添加到 `pom.xml` 文件中：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Notice that the scope of this dependency is set as `provided`, which means that
    a server, or more specifically, a Servlet Container, such as Jetty or Tomcat,
    will provide the implementation.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个依赖项的范围被设置为 `provided`，这意味着服务器，或者更具体地说，Servlet 容器，如 Jetty 或 Tomcat，将提供实现。
- en: 'Let’s continue by adding the required Vaadin dependencies. First, add the `vaadin-bom`
    dependency to your `pom.xml` file:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续添加所需的 Vaadin 依赖项。首先，将 `vaadin-bom` 依赖项添加到您的 `pom.xml` 文件中：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This book uses Vaadin Framework version 8.3.2, the latest production-ready version
    of the framework at the time of writing.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用 Vaadin 框架版本 8.3.2，这是撰写本书时的最新生产就绪版本。
- en: 'A Maven BOM, or bill of materials, frees you from worrying about versions of
    related dependencies; in this case, the Vaadin dependencies. Let''s drop these
    dependencies next. Add the following to your `pom.xml` file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Maven BOM，或物料清单，让你免于担心相关依赖项的版本；在这种情况下，是 Vaadin 依赖项。让我们接下来删除这些依赖项。将以下内容添加到你的
    `pom.xml` 文件中：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There's no need to explicitly set the version for these thanks to the `vaadin-bom`
    dependency. We've just added a server-side API (`vaadin-server`), a client-side
    engine or widget set (`vaadin-client-compiled`), and the Valo theme (`vaadin-themes`).
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `vaadin-bom` 依赖，你无需显式设置这些版本的值。我们刚刚添加了一个服务器端 API (`vaadin-server`)，一个客户端引擎或小部件集
    (`vaadin-client-compiled`)，以及 Valo 主题 (`vaadin-themes`)。
- en: 'At this point, you can compile the project by running the following command
    inside the `chapter-01` directory:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，你可以在 `chapter-01` 目录内运行以下命令来编译项目：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will download the dependencies to your local Maven repository if you haven't
    used Vaadin 8.3.2 before.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前没有使用过 Vaadin 8.3.2，这将下载依赖项到你的本地 Maven 仓库。
- en: Servlets and UIs
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Servlet 和 UI
- en: 'A Vaadin application in its simplest form is a `Servlet` that delegates user
    interface logic to a `UI` implementation. The `vaadin-server` dependency includes
    the `Servlet` implementation: the `VaadinServlet` class. Let’s configure one.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 简单形式的 Vaadin 应用程序是一个将用户界面逻辑委托给 `UI` 实现的 `Servlet`。`vaadin-server` 依赖项包括 `Servlet`
    实现：`VaadinServlet` 类。让我们来配置一个。
- en: Create a new directory with the name `java` inside the `src/main` directory.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/main` 目录内创建一个名为 `java` 的新目录。
- en: You might have to tell your IDE that this is a source directory. You will most
    likely find this by right-clicking the directory and selecting the option to mark
    it as a source directory. Check the documentation for your IDE for detailed instructions.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要告诉你的 IDE 这是一个源目录。你很可能会通过右键单击目录并选择将其标记为源目录的选项来找到它。请查阅你 IDE 的文档以获取详细说明。
- en: 'Create a new package with the name `packt.vaadin.datacentric.chapter01`, and
    add a simple `UI` implementation inside this package:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `packt.vaadin.datacentric.chapter01` 的新包，并在该包内添加一个简单的 `UI` 实现：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add a new `WebConfig` class to encapsulate everything related to web configuration,
    and define the `VaadinServlet` as an inner class:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个新的 `WebConfig` 类来封装与网络配置相关的所有内容，并将 `VaadinServlet` 定义为一个内部类：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `WebappVaadinServlet` class must be `public static` to allow its instantiation
    by the Servlet Container. Notice how we are configuring `/*` as the servlet URL
    mapping using the `@WebServlet` annotation. This makes the application available
    at the root of the deployment path. Notice also how the `@VaadinServletConfiguration`
    annotation connects the `Servlet` to the `UI` implementation, the `VaadinUI` class
    we implemented in the previous step.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebappVaadinServlet` 类必须是 `public static`，以便 Servlet 容器可以实例化它。注意我们是如何使用 `@WebServlet`
    注解将 `/*` 配置为 servlet URL 映射的。这使得应用程序在部署路径的根目录下可用。注意，`@VaadinServletConfiguration`
    注解如何将 `Servlet` 连接到 `UI` 实现，即我们在上一步中实现的 `VaadinUI` 类。'
- en: Maven plugins
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 插件
- en: You must have used, or at least seen, the Vaadin Maven plugin. It allows you
    to compile the widget set and theme, among other tasks. When creating a new Vaadin
    application, though, you don’t have any add-ons, custom client-side components,
    or themes. This means you don’t need the Vaadin Maven plugin just yet. You can
    use the default widget set provided by the `vaadin-client-compiled` dependency.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经使用过，或者至少见过 Vaadin Maven 插件。它允许你编译小部件集和主题，以及其他任务。然而，在创建一个新的 Vaadin 应用程序时，你没有任何附加组件、自定义客户端组件或主题。这意味着你目前不需要
    Vaadin Maven 插件。你可以使用由 `vaadin-client-compiled` 依赖提供的默认小部件集。
- en: 'We can benefit from at least one Maven plugin at this point: the Jetty Maven
    plugin. Although you can configure most IDEs to use a variety of servers in order
    to deploy your application during development, the Jetty Maven plugin frees you
    from further specific configurations, making it simple for developers to choose
    the tools they prefer. To use the plugin, add the following to the `pom.xml` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们可以从至少一个 Maven 插件中受益：Jetty Maven 插件。虽然你可以配置大多数 IDE 以使用各种服务器来在开发期间部署你的应用程序，但
    Jetty Maven 插件让你免去了进一步的特定配置，这使得开发者可以简单地选择他们偏好的工具。要使用此插件，请将以下内容添加到 `pom.xml` 文件中：
- en: '[PRE13]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'With this in place, you can run the application by creating a new running configuration
    in your IDE to execute `mvn jetty:run`. Point your browser to `http://localhost:8080`
    and you should see the application running:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，你可以通过在IDE中创建一个新的运行配置来执行`mvn jetty:run`来运行应用程序。将你的浏览器指向`http://localhost:8080`，你应该会看到应用程序正在运行：
- en: '![](img/5c26e506-a4de-4096-9539-3cb4e232f71d.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c26e506-a4de-4096-9539-3cb4e232f71d.png)'
- en: Components and layouts
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件和布局
- en: To get a full picture of the main parts of a Vaadin application, let's do a
    quick review of some of the most important classes you should already be familiar
    with. In a Vaadin application, most of the code deals with components and layouts.
    In a nutshell, you add components such as `Label`, `TextField`, `CheckBox`, `ComboBox`,
    and `Grid` into layouts such as `VerticalLayout`, `FormLayout`, `GridLayout`,
    `HorizontalLayout`, and `CSSLayout`. You can also add layouts into layouts.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了全面了解Vaadin应用程序的主要部分，让我们快速回顾一些你应该已经熟悉的最重要的类。在Vaadin应用程序中，大部分代码都与组件和布局相关。简而言之，你将`Label`、`TextField`、`CheckBox`、`ComboBox`和`Grid`等组件添加到`VerticalLayout`、`FormLayout`、`GridLayout`、`HorizontalLayout`和`CSSLayout`等布局中。你还可以将布局添加到布局中。
- en: 'During design or development, you might want to explore the available components
    and layouts in the framework so that you can pick the best for a particular scenario.
    One way to see all the components and layouts included in the framework is by
    visiting the Vaadin sampler at: [http://demo.vaadin.com/sampler](http://demo.vaadin.com/sampler).
    You can see code examples by clicking the Information icon in the upper right
    corner of the page:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计或开发过程中，你可能想要探索框架中可用的组件和布局，以便你可以为特定场景选择最佳选项。查看框架中包含的所有组件和布局的一种方法是通过访问Vaadin示例器：[http://demo.vaadin.com/sampler](http://demo.vaadin.com/sampler)。你可以通过点击页面右上角的“信息”图标来查看代码示例：
- en: '![](img/c6790880-f9a0-4a6f-a00c-d930a02d27fe.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6790880-f9a0-4a6f-a00c-d930a02d27fe.png)'
- en: Listeners and binders
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听器和绑定器
- en: Vaadin applications interact with the server through listeners and binders.
    Listeners allow you to handle user interaction, while binders allow you to keep
    values in input components (such as `TextField`) and domain objects (for example,
    a custom `User` class) in sync.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Vaadin应用程序通过监听器和绑定器与服务器交互。监听器允许你处理用户交互，而绑定器允许你保持输入组件（如`TextField`）和域对象（例如，自定义的`User`类）的值同步。
- en: Events and listeners
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和监听器
- en: 'In a Vaadin application, the behavior is added through *listeners*. A listener
    fires an event when the corresponding action happens, usually caused by the interaction
    of the user with the UI. Two of the most common listeners in Vaadin are `ClickListener`
    (for buttons) and `ValueChangeListener` (for input components). Listeners are
    usually defined by implementing a *functional interface*, which allows you to
    react to an event using a method reference:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Vaadin应用程序中，行为是通过*监听器*添加的。当发生相应的动作时，监听器会触发一个事件，这通常是由用户与UI的交互引起的。Vaadin中最常见的两个监听器是`ClickListener`（用于按钮）和`ValueChangeListener`（用于输入组件）。监听器通常通过实现*功能接口*来定义，这允许你使用方法引用来响应事件：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can also use a Lambda expression instead:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用Lambda表达式：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And to make it more readable and testable, extract the listener logic to a
    new method, passing only what''s needed as parameters (in this case, nothing is
    needed):'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使其更易于阅读和测试，将监听器逻辑提取到新的方法中，只传递所需的参数（在这种情况下，不需要传递任何参数）：
- en: '[PRE16]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Data binding
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据绑定
- en: 'Data binding is typically done through the `Binder` class. This class allows
    you to connect the values in one or more fields to Java properties in a domain
    class. Suppose you have a `User` class (the domain class) with a `password` Java
    `String` as one of its properties. You can create a `TextField` and bind its value
    to the `password` property as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定通常通过`Binder`类来完成。这个类允许你将一个或多个字段中的值连接到域类中的Java属性。假设你有一个`User`类（域类），它有一个作为其属性之一的Java
    `String`类型的`password`。你可以创建一个`TextField`并将其值绑定到`password`属性，如下所示：
- en: '[PRE17]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is a powerful and type-safe way of implementing data binding. Imagine that
    you, at some point during development, decide to rename the `password` property
    in the `User` class to something like `pin`. You can use the refactoring tools
    of your IDE to rename the property, and the IDE will rename the getters, setters,
    and any code calling these two methods. Of course, you'd have to change the caption
    `"Email"` to `"PIN"` yourself, but that would have also been the case with other
    binding mechanisms.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种强大且类型安全的实现数据绑定的方式。想象一下，在开发过程中，你决定将 `User` 类中的 `password` 属性重命名为类似 `pin`
    的名称。你可以使用 IDE 的重构工具来重命名属性，IDE 将重命名获取器、设置器和调用这些方法的任何代码。当然，你必须自己将标题 `"Email"` 改为
    `"PIN"`，但这也适用于其他绑定机制。
- en: 'Binders are also used to add validators and converters. These can be added
    using Lambda expressions or method references. For example, the following snippet
    of code checks that a `String` has exactly `4` characters and converts it into
    an integer:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定器也用于添加验证器和转换器。这些可以使用 Lambda 表达式或方法引用添加。例如，以下代码片段检查一个 `String` 是否恰好有 `4` 个字符，并将其转换为整数：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Resources and themes
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源和主题
- en: The `Resource` interface and its implementations are the connections between
    Java code and resources such as images, downloadable files, or embedded content.
    You have probably used a `StreamResource` to dynamically generate a file that
    a user can download or a `ThemeResource` to display an image in your UI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`Resource` 接口及其实现是 Java 代码与图像、可下载文件或嵌入式内容等资源之间的连接。你可能已经使用过 `StreamResource`
    来动态生成用户可以下载的文件，或者使用 `ThemeResource` 在你的 UI 中显示图像。'
- en: A theme, in turn, is a set of static resources used to configure the appearance
    of a Vaadin application. By default, Vaadin applications use the Valo theme, a
    powerful set of styles that can be configured using variables.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 主题，反过来，是一组用于配置 Vaadin 应用程序外观的静态资源。默认情况下，Vaadin 应用程序使用 Valo 主题，这是一组强大的样式，可以使用变量进行配置。
- en: Widget sets and add-ons
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件集和附加组件
- en: So far, you have been introduced to the most common parts of a Vaadin application.
    Vaadin is mostly about using an API with Java running on the server side. This
    Java code defines how the application looks and behaves, but a Vaadin application
    runs on a browser using HTML 5 and JavaScript. You don't have to write a line
    of HTML or JavaScript in order to implement a Vaadin application. How is this
    possible? How does a Java class define the HTML rendered in the browser?
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经了解了 Vaadin 应用程序最常见的一部分。Vaadin 主要关于使用在服务器端运行的 Java API。这段 Java 代码定义了应用程序的外观和行为，但
    Vaadin 应用程序是在浏览器上使用 HTML 5 和 JavaScript 运行的。你不需要编写一行 HTML 或 JavaScript 代码来实现 Vaadin
    应用程序。这是如何实现的？Java 类是如何定义在浏览器中渲染的 HTML 的？
- en: The key to understanding this is the *widget set*. A widget set is a JavaScript
    engine running on the client side, which contains all the code required to show
    components and communicate with the server side. A widget set is generated by
    compiling a set of Java classes into JavaScript using GWT. These Java classes
    are provided by the Vaadin Framework and you can add your own if you want to.
    If you are not using custom client-side components (your own, or those provided
    by a third-party Vaadin add-on), you can use the already compiled widget set which
    is included in the `vaadin-client-compiled` dependency.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点的关键是 *小部件集*。小部件集是在客户端运行的 JavaScript 引擎，其中包含显示组件和与服务器端通信所需的所有代码。小部件集是通过使用
    GWT 将一组 Java 类编译成 JavaScript 生成的。这些 Java 类由 Vaadin 框架提供，如果你想的话，可以添加自己的。如果你没有使用自定义客户端组件（你自己的或第三方
    Vaadin 附加组件提供的），你可以使用已经编译好的小部件集，该小部件集包含在 `vaadin-client-compiled` 依赖项中。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter served as an introduction to the architecture of a Vaadin application
    and its main players. We explained the most important parts of a Vaadin application
    and how they are connected. We also learned how to create a minimal Vaadin application
    from scratch by adding every single configuration required by ourselves.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 本章作为 Vaadin 应用程序架构及其主要角色的介绍。我们解释了 Vaadin 应用程序最重要的部分以及它们是如何连接的。我们还学习了如何从头开始创建一个最小的
    Vaadin 应用程序，通过添加我们自己需要的每一个配置。
- en: In the next chapter, you will learn how to implement main screens and custom
    application modules that are discovered and registered with a Vaadin application
    at runtime.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何实现主屏幕和自定义应用程序模块，这些模块在运行时会与 Vaadin 应用程序发现并注册。
