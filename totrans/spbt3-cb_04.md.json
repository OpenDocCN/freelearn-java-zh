["```java\n    server:\n        port: 8761\n    eureka:\n        client:\n            registerWithEureka: false\n            fetchRegistry: false\n    ```", "```java\n    @EnableEurekaServer\n    @SpringBootApplication\n    public class RegistryApplication\n    ```", "```java\n        <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n        <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-starter-netflix-eureka- client</artifactId>\n        </dependency>\n        ```", "```java\n        <dependencyManagement>\n             <dependencies>\n                  <dependency>\n                       <groupId>org.springframework.cloud</groupId>\n                       <artifactId>spring-cloud-dependencies</artifactId>\n                       <version>${spring-cloud.version}</version>\n                       <type>pom</type>\n                       <scope>import</scope>\n                  </dependency>\n             </dependencies>\n        </dependencyManagement>\n        ```", "```java\n        <properties>\n            <java.version>21</java.version>\n            <spring-cloud.version>2022.0.4</spring-cloud.version>\n        </properties>\n        ```", "```java\n        server:\n          port: 0\n        spring:\n          application:\n            name: FootballServer\n        eureka:\n          client:\n            serviceUrl:\n              defaultZone: http://localhost:8761/eureka/\n        ```", "```java\n        <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>\n        </dependency>\n        <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n        ```", "```java\n        @EnableDiscoveryClient\n        @EnableFeignClients\n        @SpringBootApplication\n        public class AlbumsApplication {\n        ```", "```java\n        spring:\n          application:\n            name: AlbumsServer\n        eureka:\n          client:\n            serviceUrl:\n        FootballClient class, changing @FeignClient by setting just the target application name:\n\n        ```", "```java\n\n        ```", "```java\n    curl http://localhost:8080/albums/players\n    ```", "```java\n<dependency>\n     <groupId>org.springframework.boot</groupId>\n     <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n```", "```java\n      instance:\n        instance-id: ${spring.application.name}:${random.int}\n    ```", "```java\n    football:\n      instanceId: ${random.uuid}\n    server:\n      port: 0\n    spring:\n      application:\n        name: FootballServer\n    eureka:\n      client:\n        serviceUrl:\n          defaultZone: http://localhost:8761/eureka/\n      instance:\n        ServiceInformationController and write the following code:\n\n    ```", "```java\n\n    ```", "```java\n    ./mvnw package\n    ```", "```java\n    java -jar ./target/football-0.0.1-SNAPSHOT.jar\n    ```", "```java\n        @RequestMapping(method = RequestMethod.GET, value=\"/serviceinfo\")\n        String getServiceInfo();\n        ```", "```java\n        @GetMapping(\"/serviceinfo\")\n        public String getServiceInfo(){\n            return footballClient.getServiceInfo();\n        }\n        ```", "```java\n    curl http://localhost:8080/albums/serviceinfo\n    ```", "```java\n    spring:\n      application:\n        name: GatewayServer\n      cloud:\n        gateway:\n          routes:\n            - id: players\n              uri: lb://footballserver\n              predicates:\n                - Path=/api/players/**\n              filters:\n                - StripPrefix=1\n    eureka:\n      client:\n        serviceUrl:\n          defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    curl http://localhost:8080/api/players\n    ```", "```java\n    @GetMapping\n    public List<String> getAlbums(){\n         return List.of(\"Album 1\", \"Album 2\", \"Album 3\");\n    }\n    ```", "```java\n    server:\n      port: 0\n    ```", "```java\n    spring:\n      application:\n        name: GatewayServer\n      cloud:\n        gateway:\n          routes:\n            - id: players\n              uri: lb://footballserver\n              predicates:\n                - Path=/api/players/**\n              filters:\n                - StripPrefix=1\n            - id: albums\n              uri: lb://albumsserver\n              predicates:\n                - Path=/api/albums/**\n              filters:\n                - StripPrefix=1\n    eureka:\n      client:\n        serviceUrl:\n          defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    curl http://localhost:8080/api/albums\n    ```", "```java\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    spring:\n      application:\n        name: GatewayServer\n      cloud:\n        gateway:\n          routes:\n            - id: players\n              uri: ${PLAYERS_URI:lb://footballserver}\n              predicates:\n                - Path=/api/players/**\n              filters:\n                - StripPrefix=1\n            - id: albums\n              uri: ${ALBUMS_URI:lb://albumsserver}\n              predicates:\n                - Path=/api/albums/**\n              filters:\n                - StripPrefix=1\n    eureka:\n      client:\n        serviceUrl:\n          defaultZone: http://localhost:8761/eureka/\n    ```", "```java\n    @AutoConfigureWireMock(port = 0)\n    @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, properties = {\n            \"PLAYERS_URI=http://localhost:${wiremock.server.port}\",\n            \"ALBUMS_URI=http://localhost:${wiremock.server.port}\",\n    })\n    public class RoutesTester {\n        @Autowired\n        private WebTestClient webClient;\n    }\n    ```", "```java\n    @Test\n    public void playersRouteTest() throws Exception\n    ```", "```java\n    stubFor(get(urlEqualTo(\"/players\"))\n            .willReturn(aResponse()\n                    .withHeader(\"Content-Type\", \"application/json\")\n                    .withBody(\"\"\"\n                            [\n                                {\n                                    \"id\": \"325636\",\n                                    \"jerseyNumber\": 11,\n                                    \"name\": \"Alexia PUTELLAS\",\n                                    \"position\": \"Midfielder\",\n                                    \"dateOfBirth\": \"1994-02-04\"\n                                },\n                                {\n                                     \"id\": \"396930\",\n                                     \"jerseyNumber\": 2,\n                                     \"name\": \"Ona BATLLE\",\n                                     \"position\": \"Defender\",\n                                     \"dateOfBirth\": \"1999-06-10\"\n                                 }\n                              ]\"\"\")));\n    ```", "```java\n    webClient.get().uri(\"/api/players\").exchange()\n            .expectStatus().isOk()\n            .expectBody()\n            .jsonPath(\"$[0].name\").isEqualTo(\"Alexia PUTELLAS\")\n            .jsonPath(\"$[1].name\").isEqualTo(\"Ona BATLLE\");\n    ```", "```java\n    git clone https://github.com/felipmiguel/spring3-recipes-config\n    ```", "```java\n        server:\n            port: 0\n        eureka:\n          client:\n            serviceUrl:\n              defaultZone: http://localhost:8761/eureka/\n          instance:\n            instance-id: ${spring.application.name}:${random.int}\n        ```", "```java\n        server:\n          port: 8080\n        spring:\n          cloud:\n            gateway:\n              routes:\n                - id: players\n                  uri: ${PLAYERS_URI:lb://footballserver}\n                  predicates:\n                    - Path=/api/players/**\n                  filters:\n                    - StripPrefix=1\n                - id: albums\n                  uri: ${ALBUMS_URI:lb://albumsserver}\n                  predicates:\n                    - Path=/api/albums/**\n                  filters:\n                    - StripPrefix=1\n        ```", "```java\n    git commit -m \"Initial configuration\" .\n    git push\n    ```", "```java\n    server.port: 8888\n    spring:\n      cloud:\n        config:\n          server:\n            git:\n              ConfigApplication class and add the @EnableConfigServer annotation. It should look like this:\n\n    ```", "```java\n\n    ```", "```java\n        <dependency>\n             <groupId>org.springframework.cloud</groupId>\n             <artifactId>spring-cloud-starter-config</artifactId>\n        </dependency>\n        ```", "```java\n        spring:\n          config:\n            import: optional:configserver:http://localhost:8888\n          application:\n            name: AlbumsServer\n        ```", "```java\n        football:\n          instanceId: ${random.uuid}\n        spring:\n          config:\n            import: optional:configserver:http://localhost:8888\n          application:\n            name: FootballServer\n        ```", "```java\n        spring:\n          config:\n            import: optional:configserver:http://localhost:8888\n          application:\n            name: gatewayserver\n        ```", "```java\n    curl http://localhost:8080/api/players\n    ```", "```java\n/{application}/{profile}[/{label}]\n/{application}-{profile}.yml\n/{label}/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.properties\n```", "```java\ncurl http://localhost:8888/GatewayServer-default.yml\n```", "```java\nserver:\n  port: 8080\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\nspring:\n  cloud:\n    gateway:\n      routes:\n      - id: players\n        uri: ${PLAYERS_URI:lb://footballserver}\n        predicates:\n        - Path=/api/players/**\n        filters:\n        - StripPrefix=1\n      - id: albums\n        uri: ${ALBUMS_URI:lb://albumsserver}\n        predicates:\n        - Path=/api/albums/**\n        filters:\n        - StripPrefix=1\n```", "```java\nspring:\n  cloud:\n    config:\n      server:\n        git:\n          uri: https://github.com/PacktPublishing/Spring-Boot-3.0- Cookbook-Config\n          username: theuser\n          password: strongpassword\n```", "```java\ndocker run -d -p 9411:9411 openzipkin/zipkin\n```", "```java\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-actuator</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-tracing-bridge-otel</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.opentelemetry</groupId>\n        <artifactId>opentelemetry-exporter-zipkin</artifactId>\n    </dependency>\n    ```", "```java\n    <dependency>\n        <groupId>io.micrometer</groupId>\n        <artifactId>micrometer-tracing</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>io.github.openfeign</groupId>\n        <artifactId>feign-micrometer</artifactId>\n    </dependency>\n    ```", "```java\n    management:\n        tracing:\n            sampling:\n                probability: 1.0\n    ```", "```java\n    spring\n      cloud:\n        config:\n          label: <your branch name>\n    ```", "```java\n    curl http://localhost:8080/api/players\n    curl http://localhost:8080/api/albums\n    curl http://localhost:8080/api/albums/players\n    ```", "```java\n    spring:\n      application:\n        name: admin-server\n      config:\n        import: optional:configserver:http://localhost:8888\n      cloud:\n        config:\n          label: distributed-tracing\n    ```", "```java\n    spring:\n      cloud:\n        gateway:\n          routes:\n            - id: players\n              uri: lb://footballserver\n              predicates:\n                - Path=/api/players/**\n              filters:\n                - StripPrefix=1\n            - id: albums\n              uri: lb://albumsserver\n              predicates:\n                - Path=/api/albums/**\n              filters:\n                - StripPrefix=1\n            - id: admin\n              uri: lb://admin-server\n              predicates:\n                - Path=/admin/**\n              filters:\n    admin-server.yml in your GitHub repository with the following content:\n    ```", "```java\nspring:\n  boot:\n    admin:\n      ui:\n        application.yml file in your GitHub repository:\n\n```", "```java\n\n\t\t\t\tThe last step before we run the application is configuring the Spring Boot Admin application to enable Admin Server and the Spring Cloud Discovery client. For that, open the `FootballAdminApplication` class and add the following annotations:\n\n```", "```java\n\n\t\t\t\tNow, you can run the Spring Boot Admin application. Remember that you will need to run the rest of the applications that were reused from the *Integrating distributed tracing with Spring Cloud* recipe and that the `config` and `registry` services should start before the other services. As the Spring Boot Admin service is exposed through Spring Cloud Gateway, you can open `http://locahost:8080/admin` to access Spring Boot Admin:\n\n\t\t\t![Figure 4.9: The initial Spring Boot Admin page. It defaults to the Applications view](img/B21646_04_9.jpg)\n\n\t\t\tFigure 4.9: The initial Spring Boot Admin page. It defaults to the Applications view\n\t\t\tWhen you access Spring Boot Admin, it redirects you to the **Applications** view. It retrieves the list from Eureka Server. On the application, if you click on the green check on the left-hand side, you will be redirected to the application details page:\n\t\t\t![Figure 4.10: Application details in Spring Boot Admin](img/B21646_04_10.jpg)\n\n\t\t\tFigure 4.10: Application details in Spring Boot Admin\n\t\t\tDepending on how many Actuator endpoints are enabled in that application, you will see either more or fewer options in the left pane. As you activate the `health`, `env`, `metrics`, `beans`, and `loggers` endpoints, you will see **Details**, **Metrics**, **Environment**, **Beans**, and **Loggers**. If you open **Loggers**, you will see all loggers defined by the application. As you did in the *Changing settings in a running application* recipe in [*Chapter 3*](B21646_03.xhtml#_idTextAnchor103), you can change the log level, but this time from a nice UI:\n\t\t\t![Figure 4.11: Loggers in Spring Boot Admin](img/B21646_04_11.jpg)\n\n\t\t\tFigure 4.11: Loggers in Spring Boot Admin\n\t\t\tThere are two more views on the top bar:\n\n\t\t\t\t*   **Wallboard**: This shows the applications running in the wallboard view\n\t\t\t\t*   **Journal**: This shows the events that are happening in the Discovery service\n\n\t\t\tHow it works...\n\t\t\tSpring Boot Admin may work without Eureka Server, but you would need to configure each application as a client of Spring Boot Admin. Instead, we configured Spring Boot Admin to discover the applications using Eureka Server. Connecting to Eureka Server requires Eureka Client. The Config service centralizes the configuration, which is why we used the Config Client.\n\t\t\tSpring Boot Admin gets the list of applications and their instances from Eureka Server. Then, using the Actuator endpoint of each instance, it can get all the details of the application. The more Actuator endpoints are enabled, the more details can be shown. We used the central configuration to allow the desired endpoints in one single place.\n\t\t\tSpring Boot Admin can run out of Spring Cloud Gateway; however, it makes sense to centralize the access through Spring Cloud Gateway in this example. Keep in mind that some Actuator endpoints may expose sensitive information. With this design, you only need to expose Spring Cloud Gateway while you keep the rest of the services with no public exposure. Then, you can set up OAuth2, as explained in the *Protecting Spring Cloud Gateway* recipe. When configuring Spring Boot Admin behind a reverse proxy, setting the `spring.boot.admin.ui.public-url` property is necessary.\n\t\t\tProtecting Spring Cloud Gateway\n\t\t\tWhen implementing Spring Cloud Gateway, it can serve as a system’s single entry point. For this reason, protecting Spring Cloud Gateway with OAuth2 is a good idea. This allows for centralizing authentication and authorization in Spring Cloud Gateway, eliminating the need for your client to reauthenticate with each service behind it.\n\t\t\tYou want to place your `football` RESTful API, which is protected with OAuth2, behind Spring Cloud Gateway. So, you’ll also need to protect Spring Cloud Gateway with OAuth2.\n\t\t\tIn this recipe, you’ll learn how to configure Spring Cloud Gateway as a resource server and pass the token that you receive to the downstream service.\n\t\t\tGetting ready\n\t\t\tIn this exercise, you will need the following:\n\n\t\t\t\t*   An authorization server. You can reuse Spring Authorization Server, which you created in the *Setting up Spring Authorization Server* recipe in [*Chapter 2*](B21646_02.xhtml#_idTextAnchor066), for this purpose.\n\t\t\t\t*   A resource server. The RESTful API you created in the *Protecting a RESTful API using OAuth2* recipe in [*Chapter 2*](B21646_02.xhtml#_idTextAnchor066), can be reused here.\n\t\t\t\t*   A Spring Cloud Gateway server. You can reuse the Spring Cloud Gateway server you created in the *Setting up Spring Cloud Gateway* recipe. You can always reuse the latest version of the Spring Cloud Gateway server in later recipes. I’m using the initial setup for simplicity.\n\t\t\t\t*   Eureka Server. You can reuse the Eureka Server application you created in the *Setting up Eureka* *Server* recipe.\n\n\t\t\tIf you haven’t completed the previous recipes yet, I’ve prepared a working version for all of them in this book’s GitHub repository at [https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook](https://github.com/PacktPublishing/Spring-Boot-3.0-Cookbook), in the `chapter4/recipe4-9/start` folder.\n\t\t\tHow to do it...\n\t\t\tIn this recipe, we’ll set our RESTful API behind Spring Cloud Gateway and then protect Spring Cloud Gateway with OAuth2\\. Let’s begin:\n\n\t\t\t\t1.  First, configure the RESTful API so that it’s registered in Eureka Server. For that, add the Eureka Client dependency to the RESTful API’s `pom.xml` file:\n\n    ```", "```java\n\n    As it is part of Spring Cloud, you should also include the corresponding dependency management in the `pom.xml` file, as follows:\n\n    ```", "```java\n\n    Add a project-level property to configure the Spring Cloud version:\n\n    ```", "```java\n\n    Now, you can add the Eureka Server configuration to the `application.yml` file:\n\n    ```", "```java\n\n    Though not required, I recommend configuring the application port randomly and assigning a name to the Spring Boot application. With this configuration, you won’t need to care about port conflicts, and you’ll make the application discoverable by name. For that, in the `application.yml` file, add the following lines:\n\n    ```", "```java\n\n    I’ve added the `spring` label for clarity, but the `application.yml` file should have it defined.\n\n    \t\t\t\t2.  Next, configure Spring Cloud Gateway as a resource server. For that, you will need to add the Spring OAuth2 Resource Server dependency to your `pom.xml` file:\n\n    ```", "```java\n\n    Then, configure `application.yml` with the application registration settings. We’ll use the same configuration that we did for the RESTful API:\n\n    ```", "```java\n\n    \t\t\t\t3.  Now, configure Spring Cloud Gateway with the route to the RESTful API:\n\n    ```", "```java\n\n    \t\t\t\t4.  Now that the application is behind Spring Cloud Gateway, which is protected using OAuth2, you can test the application. Remember to run the Eureka and Authorization projects before running the Spring Cloud Gateway and RESTful API projects.\n\n    First, you’ll need to obtain an access token from the authorization server to test the application. For that, execute the following command in your Terminal:\n\n    ```", "```java\n\n    You will see the result that’s returned by the RESTful API:\n\n\t\t\t![Figure 4.12: Using the RESTful API through Spring Cloud Gateway, which is protected with OAuth2](img/B21646_04_12.jpg)\n\n\t\t\tFigure 4.12: Using the RESTful API through Spring Cloud Gateway, which is protected with OAuth2\n\t\t\tThe result contains a list of teams.\n\t\t\tHow it works...\n\t\t\tSpring Cloud Gateway acts as a resource server. This means it will require a valid access token to be issued by our authorization server.\n\t\t\tSpring Cloud Gateway will relay the access token to the downstream RESTful API. Both will validate the access token. You can configure Spring Cloud Gateway with the first level of OAuth2 validation. For example, you can validate the token issuer and the token scopes. Then, if you need more fine-grained validation, you can do so on the RESTful API.\n\n```"]