["```java\nnpm install -g generator-jhipster\n```", "```java\njhipster\n```", "```java\nmvnw\n```", "```java\njhipster entity Owner\n```", "```java\n//For Global installation\nnpm install -g jhipster-uml\n\n//For local installation\nnpm install jhipster-uml --dev\n```", "```java\njhipster-uml <class-diagram.xmi>\n```", "```java\n// If you wish to use DTO. The possible values would be MapStruct\njhipster-uml <class-diagram.xmi> --dto <value>\n\n//Type of pagination pattern.The possible values are [pager,pagination,infinite-scroll]\njhipster-uml <class-diagram.xmi> --paginate <value>\n\n//If you need to add service layer with class and implementation. The values would be [serviceClass,serviceImpl]\njhipster-uml <class-diagram.xmi> --service <value>\n```", "```java\nentity School {\n  name String required\n    eduType EducationType required\n    noOfRooms Integer required min(5) max(99)\n}\nenum EducationType {\n  PRIMARY, SECONDARY, HIGHER_SECONDARY \n}\nentity Teacher {\n  name String required\n    age Integer min(21) max(58)\n}\n// defining multiple one-to-many relationships with comments\nrelationship OneToMany {\n  School{teacher} to Teacher{school(name) required}\n}\n// Set pagination options\npaginate School with infinite-scroll\npaginate Teacher with pagination\n\n// Use data transfer objects (DTO)\ndto * with mapstruct\n\n// In case if DTO is not required for specific (comma separated)entities.\n// dto * with mapstruct except School\n\n// Set service options to all except few\nservice all with serviceImpl\n\n// In case if service layer is not required for certain \n// (comma separated) entities. Just uncomment below line\n// service all with serviceImpl except School\n```", "```java\nrelationship (OneToMany | ManyToOne | OneToOne | ManyToMany) {\n  <OWNER entity>[{<Relationship name>[(<Display field>)]}] to <DESTINATION entity>[{<Relationship name>[(<Display field>)]}]\n}\n```", "```java\nrelationship OneToMany {\n  School to Teacher\n}\n```", "```java\njhipster import-jdl <your_jdl_file.jh>\n```", "```java\nentity Country{\n  code String required maxlength(3)\n    name String required maxlength(52)\n    continent Continent required\n    region String required maxlength(26)\n    surfaceArea Float required\n    population Integer required\n    lifeExpectancy Float\n    localName String required maxlength(45)\n    governmentForm String required maxlength(45)\n}\nentity City{\n  name String required maxlength(35)\n    district String required maxlength(20)\n    population Integer required\n}\n\nentity CountryLanguage{\n    language String required\n    isOfficial TrueFalse required\n    percentage Float required\n}\n\nenum Continent {\n  ASIA, EUROPE, NORTH_AMERICA, AFRICA, OCEANIA, ANTARCTICA, SOUTH_AMERICA\n}\n\nenum TrueFalse{\n  T, F\n}\n\n// Set pagination options\npaginate Country, City, CountryLanguage with pagination\n\n// Use data transfer objects (DTO)\ndto * with mapstruct\n\n// Set service options. Alternatively 'Service all with sericeImpl can be used\nservice all with serviceImpl\n\nrelationship OneToMany{\n  Country{city} to City {country(name) required}\n  Country{countryLanguage} to CountryLanguage{country(name) required}\n}\nfilter Country\n```", "```java\norg.springframework.dao.InvalidDataAccessApiUsageException: Unknown name value [Asia] for enum class [com.nilangpatel.domain.enumeration.Continent]; nested exception is java.lang.IllegalArgumentException: Unknown name value [Asia] for enum class [com.nilangpatel.domain.enumeration.Continent] at org.springframework.orm.jpa.EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(EntityManagerFactoryUtils.java:367) ....\n```", "```java\n@NotNull\n//@Enumerated(EnumType.STRING) // commented original\n@Convert(converter=ContinentEnumConvertor.class) // added newly\n@Column(name = \"continent\", nullable = false)\nprivate Continent continent;       \n```", "```java\npublic class ContinentEnumConvertor implements AttributeConverter<Continent, String>{\n  @Override\n  public String convertToDatabaseColumn(Continent continent) {\n    return continent.getName();\n  }\n  @Override\n  public Continent convertToEntityAttribute(String continentValue) {\n    return Continent.getContinent(continentValue);\n  }\n}\n```", "```java\npublic enum Continent {\n  ASIA(\"Asia\"), EUROPE(\"Europe\"), NORTH_AMERICA(\"North America\"), AFRICA(\"Africa\"), OCEANIA(\"Oceania\"), ANTARCTICA(\"Antarctica\"), SOUTH_AMERICA(\"South America\");\n    private String name;\n  Continent(String name){\n    this.name=name;\n  }\n  public String getName() {\n    return this.name;\n  }\n  public static Continent getContinent(String name) {\n    Continent returnContinent = null;\n    switch(name){\n      case \"Asia\": returnContinent = Continent.ASIA;break;\n      case \"Europe\": returnContinent = Continent.EUROPE;break;\n      case \"North America\": returnContinent = Continent.NORTH_AMERICA;break;\n      case \"Africa\": returnContinent = Continent.AFRICA;break;\n      case \"Oceania\": returnContinent = Continent.OCEANIA;break;\n      case \"Antarctica\": returnContinent = Continent.ANTARCTICA;break;\n      case \"South America\": returnContinent = Continent.SOUTH_AMERICA;break;\n      default: returnContinent = null;\n    }\n    return returnContinent;\n  }\n}\n```", "```java\n{\n    \"gdpApp\": {\n        \"country\": {\n            \"home\": {\n                \"title\": \"Countries\",\n                \"createLabel\": \"Create a new Country\",\n            },\n            \"created\": \"A new Country is created with identifier {{ param }}\",\n            \"delete\": {\n                \"question\": \"Are you sure you want to delete Country {{ id }}?\"\n            },\n            \"detail\": {\n                \"title\": \"Country\"\n            },\n            \"code\": \"Code\",\n            \"name\": \"Name\",\n            \"continent\": \"Continent\",\n          ....\n        }\n    }\n}\n```", "```java\n<div>\n    <h2 id=\"page-heading\">\n        <span jhiTranslate=\"gdpApp.country.home.title\">Countries</span>\n    ....\n```", "```java\n \"ASIA\": \"Asia\",\n \"EUROPE\": \"Europe\",\n \"NORTH_AMERICA\": \"North America\",\n \"AFRICA\": \"Africa\",\n \"OCEANIA\": \"Oceania\",\n \"ANTARCTICA\": \"Antarctica\",\n \"SOUTH_AMERICA\": \"South America\",\n```", "```java\npublic interface CountryRepository extends JpaRepository<Country, Long>, JpaSpecificationExecutor<Country>\n```", "```java\n public Page<CountryDTO> findByCriteria(CountryCriteria criteria, Pageable page) {\n     log.debug(\"find by criteria : {}, page: {}\", criteria, page);\n     final Specification<Country> specification = createSpecification(criteria);\n     return countryRepository.findAll(specification, page)\n            .map(countryMapper::toDto);\n }\n```", "```java\npublic class CountryCriteria implements Serializable {\n    /**\n     * Class for filtering Continent\n     */\n    public static class ContinentFilter extends Filter<Continent> {\n    }\n    private static final long serialVersionUID = 1L;\n    private LongFilter id;\n    private StringFilter code;\n    private StringFilter name;\n    private ContinentFilter continent;\n    private StringFilter region;\n    private FloatFilter surfaceArea;\n    private IntegerFilter population;\n    private FloatFilter lifeExpectancy;\n    private StringFilter localName;\n    private StringFilter governmentForm;\n    private LongFilter cityId;\n    private LongFilter countryLanguageId;\n //setters and getters\n}\n```", "```java\n @GetMapping(\"/countries\")\n @Timed\n public ResponseEntity<List<CountryDTO>> getAllCountries(\n     CountryCriteria criteria, Pageable pageable) {\n\n     log.debug(\"REST request to get Countries by criteria: {}\", criteria);\n     Page<CountryDTO> page = countryQueryService.findByCriteria(criteria, pageable);\n     HttpHeaders headers = PaginationUtil.\n                 generatePaginationHttpHeaders(page, \"/api/countries\");\n     return ResponseEntity.ok().headers(headers).body(page.getContent());\n }\n```", "```java\n    public void configure(HttpSecurity http) throws Exception {\n        ....\n        .and()\n            .authorizeRequests()\n            .antMatchers(\"/api/register\").permitAll()\n            .antMatchers(\"/api/activate\").permitAll()\n            .antMatchers(\"/api/authenticate\").permitAll()\n            .antMatchers(\"/api/account/reset-password/init\").permitAll()\n            .antMatchers(\"/api/account/reset-password/finish\").permitAll()\n            .antMatchers(\"/api/**\").authenticated()\n            ....\n    }\n```", "```java\n@RestController\n@RequestMapping(\"/api/open\")\npublic class GenericRestResource {\n  private final Logger log = LoggerFactory.getLogger(GenericRestResource.class);\n  private final CountryQueryService countryQueryService;\n\n    public GenericRestResource(CountryQueryService countryQueryService) {\n        this.countryQueryService = countryQueryService;\n    }\n\n    @GetMapping(\"/search-countries\")\n    @Timed\n    public ResponseEntity<List<CountryDTO>> getAllCountriesForGdp(\n                CountryCriteria criteria, Pageable pageable) {\n        log.debug(\"REST request to get a page of Countries\");\n        Page<CountryDTO> page = countryQueryService.findByCriteria\n             (criteria, pageable);\n        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(\n             page, \"/api/open/search-countries\");\n        return ResponseEntity.ok().headers(headers).body(page.getContent());\n    }\n    @GetMapping(\"/show-gdp/{id}\")\n    @Timed\n    public ResponseEntity<CountryDTO> getCountryDetails(@PathVariable Long id) {\n        log.debug(\"Get Country Details to show GDP information\");\n        CountryDTO countryDto = new CountryDTO();\n        Optional<CountryDTO> countryData = countryService.findOne(id);\n        return ResponseEntity.ok().body(countryData.orElse(countryDto));\n    }\n}\n```", "```java\npublic void configure(HttpSecurity http) throws Exception {\n   ....\n    .antMatchers(\"/api/activate\").permitAll()\n    .antMatchers(\"/api/open/**\").permitAll()\n    .antMatchers(\"/api/authenticate\").permitAll()\n    ....\n}\n```", "```java\n@Injectable({ providedIn: 'root'})\nexport class CountryGDPService {\n    public searchCountryUrl = SERVER_API_URL + 'api/open/search-countries';\n    public showGDPUrl = SERVER_API_URL + 'api/open/show-gdp';\n    constructor(private http: HttpClient) { }\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http.get<ICountry[]>(this.searchCountryUrl, \n            { params: options, observe: 'response' });\n    }\n    find(id: number): Observable<EntityResponseType> {\n        return this.http.get<ICountry>(`${this.showGDPUrl}/${id}`, \n               { observe: 'response' });\n    }\n}\n```", "```java\n@Injectable({ providedIn: 'root' })\nexport class CountryGDPResolve implements Resolve<ICountry> {\n    constructor(private service: CountryGDPService) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Country> {\n        const id = route.params['id'] ? route.params['id'] : null;\n        if (id) {\n            return this.service.find(id).pipe(\n                filter((response: HttpResponse<Country>) => response.ok),\n                map((country: HttpResponse<Country>) => country.body)\n            );\n        }\n        return of(new Country());\n    }\n}\n\nexport const countryGDPRoute: Routes = [\n    {\n        path: 'countries',\n        component: SearchCountryComponent,\n        resolve: {\n            pagingParams: JhiResolvePagingParams\n        },\n        data: {\n            defaultSort: 'name,asc',\n            pageTitle: 'gdpApp.country.home.title'\n        },\n    },\n    {\n        path: 'showGDP/:id',\n        component: CountryGDPComponent,\n        resolve: {\n            country: CountryGDPResolve\n        }\n    },\n];\n```", "```java\nconst ENTITY_STATES = [...countryGDPRoute];\n\n@NgModule({\n    imports: [GdpSharedModule, RouterModule.forChild(ENTITY_STATES)],\n    declarations: [\n        SearchCountryComponent,\n        CountryGDPComponent,\n    ],\n    entryComponents: [SearchCountryComponent , CountryGDPComponent],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})\nexport class CountryGDPModule {}\n```", "```java\n@Component({\n  selector: 'jhi-search-country',\n  templateUrl: './search-country.component.html',\n})\nexport class SearchCountryComponent implements OnInit {\n    countries: ICountry[];\n    routeData: any;\n    totalItems: any;\n    queryCount: any;\n    itemsPerPage: any;\n    page: any;\n    predicate: any;\n    previousPage: any;\n    reverse: any;\n\n    // variables for country name and continent filters.\n    nameFilter: String;\n    continentFilter: String;\n\n   constructor(\n        private countryGDPService: CountryGDPService,\n        private activatedRoute: ActivatedRoute,\n        private router: Router,\n    ) {\n        this.itemsPerPage = ITEMS_PER_PAGE;\n        this.routeData = this.activatedRoute.data.subscribe(data => {\n            this.page = data.pagingParams.page;\n            this.previousPage = data.pagingParams.page;\n            this.reverse = data.pagingParams.ascending;\n            this.predicate = data.pagingParams.predicate;\n        });\n    }\n\n   loadAll() {\n        this.countryGDPService\n            .query({\n                page: this.page - 1,\n                size: this.itemsPerPage,\n                sort: this.sort(),\n                'name.contains': this.nameFilter,\n                'continent.equals' : this.continentFilter\n            })\n            .subscribe(\n                (res: HttpResponse<ICountry[]>) => this.paginateCountries(res.body, res.headers),\n            );\n    }\n .....\n\n}\n```", "```java\n<form name=\"searchCountriesForm\" novalidate (ngSubmit)=\"searchCountries()\">\n    <div class=\"container mb-5\">\n        <div class=\"row\">\n            <div class=\"col-6\">\n                <label class=\"form-control-label\" \n                jhiTranslate=\"gdpApp.country.name\" for=\"nameFilter\">Name</label> \n                <input type=\"text\" class=\"form-control\" \n                name=\"nameFilter\" id=\"nameFilter\" [(ngModel)]=\"nameFilter\" maxlength=\"52\"/>\n            </div>\n            <div class=\"col-4\">\n                <label class=\"form-control-label\" jhiTranslate=\"gdpApp.country.continent\"\n                for=\"continentFilter\">Continent</label>\n                <select class=\"form-control\" name=\"continentFilter\" \n                    [(ngModel)]=\"continentFilter\" id=\"continentFilter\">\n                    <option value=\"\">\n                        {{'gdpApp.Continent.ALL' | translate}}</option>\n                    <option value=\"ASIA\">\n                        {{'gdpApp.Continent.ASIA' | translate}}</option>\n                    <option value=\"EUROPE\">\n                        {{'gdpApp.Continent.EUROPE' | translate}}</option>\n                    <option value=\"NORTH_AMERICA\">\n                        {{'gdpApp.Continent.NORTH_AMERICA' | translate}}</option>\n                    <option value=\"AFRICA\">\n                        {{'gdpApp.Continent.AFRICA' | translate}}</option>\n                    <option value=\"OCEANIA\">\n                        {{'gdpApp.Continent.OCEANIA' | translate}}</option>\n                    <option value=\"ANTARCTICA\">\n                        {{'gdpApp.Continent.ANTARCTICA' | translate}}</option>\n                    <option value=\"SOUTH_AMERICA\">\n                        {{'gdpApp.Continent.SOUTH_AMERICA' | translate}}</option>\n                </select>\n            </div>\n            <div class=\"col-2 align-self-end\">\n                <label class=\"form-control-label\" for=\"search-countries\"></label>\n                <button type=\"submit\" id=\"search-countries\" class=\"btn btn-primary\">\n                        <fa-icon [icon]=\"'search'\"></fa-icon><span>Search</span>\n                </button>\n            </div> \n        </div>\n    </div>\n</form> \n<div class=\"table-responsive\" *ngIf=\"countries\">\n    <table class=\"table table-striped\">\n        <thead>\n        <tr jhiSort [(predicate)]=\"predicate\" \n                [(ascending)]=\"reverse\" [callback]=\"transition.bind(this)\">\n        <th jhiSortBy=\"code\"><span jhiTranslate=\"gdpApp.country.code\">\n                Code</span> <fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        <th jhiSortBy=\"name\"><span jhiTranslate=\"gdpApp.country.name\">\n                Name</span> <fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        <th jhiSortBy=\"continent\"><span jhiTranslate=\"gdpApp.country.continent\">\n                Continent</span> <fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        <th jhiSortBy=\"region\"><span jhiTranslate=\"gdpApp.country.region\">\n                Region</span> <fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        <th jhiSortBy=\"surfaceArea\"><span jhiTranslate=\"gdpApp.country.surfaceArea\">\n                Area</span> <fa-icon [icon]=\"'sort'\"></fa-icon></th>\n        <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let country of countries ;trackBy: trackId\">\n            <td>{{country.code}}</td>\n            <td>{{country.name}}</td>\n            <td jhiTranslate=\"{{'gdpApp.Continent.' + country.continent}}\">\n                {{country.continent}}</td>\n            <td>{{country.region}}</td>\n            <td>{{country.surfaceArea}}</td>\n            <td class=\"text-right\">\n                <div class=\"btn-group flex-btn-group-container\">\n                    <button type=\"submit\"\n                            [routerLink]=\"['/showGDP', country.id ]\"\n                            class=\"btn btn-info btn-sm\">\n                        <fa-icon [icon]=\"'eye'\"></fa-icon>\n                        <span class=\"d-none d-md-inline\" \n                         jhiTranslate=\"entity.action.view\">View GDP</span>\n                    </button>\n                </div>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n<div *ngIf=\"countries && countries.length\">\n    <div class=\"row justify-content-center\">\n        <jhi-item-count [page]=\"page\" [total]=\"queryCount\" \n            [itemsPerPage]=\"itemsPerPage\"></jhi-item-count>\n    </div>\n    <div class=\"row justify-content-center\">\n        <ngb-pagination [collectionSize]=\"totalItems\" \n            [(page)]=\"page\" [pageSize]=\"itemsPerPage\" [maxSize]=\"5\" [rotate]=\"true\" \n            [boundaryLinks]=\"true\" (pageChange)=\"loadPage(page)\"></ngb-pagination>\n    </div>\n</div>\n```", "```java\n@Component({\n  selector: 'jhi-show-gdp',\n  templateUrl: './show-gdp.component.html',\n  })\nexport class CountryGDPComponent implements OnInit {\n    currentCountry: ICountry;\n    data: IGdpData[];\n    preGDPUrl = 'http://api.worldbank.org/v2/countries/';\n    postGDPUrl = '/indicators/NY.GDP.MKTP.CD?format=json&per_page=' + 10;\n    year = [];\n    gdp = [];\n    chart = [];\n    noDataAvailale: any;\n    constructor(\n        private activatedRoute: ActivatedRoute,\n        private httpClient: HttpClient\n    ) {\n        this.activatedRoute.data.subscribe(data => {\n            this.currentCountry = data.country;\n        });\n    }\n    ngOnInit() {\n        const gdpUrl = this.preGDPUrl + this.currentCountry.code \n                       + this.postGDPUrl;\n        this.httpClient.get(gdpUrl).subscribe(res => {\n            this.noDataAvailale = true;\n            const gdpDataArr = res[1];\n            if ( gdpDataArr ) {\n                this.noDataAvailale = false;\n                gdpDataArr.forEach(y => {\n                    this.year.push(y.date);\n                    this.gdp.push(y.value);\n                });\n                this.year = this.year.reverse();\n                this.gdp = this.gdp.reverse();\n\n                this.chart = new Chart('canvas', {\n                    type: 'line',\n                    data: {\n                        labels: this.year,\n                        datasets: [\n                            {\n                            data: this.gdp,\n                            borderColor: '#3cba9f',\n                            fill: true\n                            }\n                        ]\n                    },\n                    options: {\n                    legend: {\n                        display: false\n                    },\n                    scales: {\n                        xAxes: [{\n                            display: true\n                        }],\n                        yAxes: [{\n                            display: true\n                        }],\n                      }\n                    }\n                });\n            }\n        });\n    }\n}\n```", "```java\n    {\n        path: 'showGDP/:id',\n        component: CountryGDPComponent,\n        resolve: {\n            country: CountryGDPResolve\n        }\n    }\n```", "```java\n<div class=\"container\">\n    <h2 id=\"page-heading\">\n        <span> GDP data for country <b>{{currentCountry.name}}</b></span>\n    </h2>\n    <br/>\n    <div class=\"row\">\n        <div class=\"col-4\">\n            <dl class=\"row\">\n                <dt class=\"col-sm-4\">Code</dt>\n                <dd class=\"col-sm-8\">{{currentCountry.code}}</dd>\n                <dt class=\"col-sm-4\">Name</dt>\n                <dd class=\"col-sm-8\">{{currentCountry.name}}</dd>\n                <dt class=\"col-sm-4\">Continent</dt>\n                <dd class=\"col-sm-8\">{{'gdpApp.Continent.' + \n                    currentCountry.continent | translate }}</dd>\n                <dt class=\"col-sm-4\">Region</dt>\n                <dd class=\"col-sm-8\">{{currentCountry.region}}</dd>\n                <dt class=\"col-sm-4\">Surface Area</dt>\n                <dd class=\"col-sm-8\">{{currentCountry.surfaceArea}}</dd>\n                <dt class=\"col-sm-4\"></dt>\n                <dd class=\"col-sm-8\">\n                    <div class=\"btn-group\">\n                        <button type=\"submit\"\n                                [routerLink]=\"['/countries']\"\n                                class=\"btn btn-info btn-sm\">\n                            <span class=\"d-none d-md-inline\">Back</span>\n                        </button>\n                    </div>\n                </dd>\n            </dl>\n        </div>\n        <div class=\"col-8\">\n            <div *ngIf=\"noDataAvailale\">\n                GDP data for <b>{{currentCountry.name}}</b> is not available\n            </div> \n            <div *ngIf=\"chart\">\n                <canvas id=\"canvas\">{{ chart }}</canvas>\n            </div>\n        </div>\n    </div>\n</div>\n```", "```java\n@NgModule({\n    imports: [\n        ....\n        GdpHomeModule,\n        GdpAccountModule,\n        // jhipster-needle-angular-add-module JHipster will add new module here\n        GdpEntityModule,\n        CountryGDPModule\n```", "```java\n<div class=\"navbar-collapse collapse\" id=\"navbarResponsive\" \n            [ngbCollapse]=\"isNavbarCollapsed\" [ngSwitch]=\"isAuthenticated()\">\n        <ul class=\"navbar-nav ml-auto\">\n            <li class=\"nav-item\" routerLinkActive=\"active\" \n                [routerLinkActiveOptions]=\"{exact: true}\">\n                <a class=\"nav-link\" routerLink=\"/\" (click)=\"collapseNavbar()\">\n                    <span>\n                        <fa-icon icon=\"home\"></fa-icon>\n                        <span jhiTranslate=\"global.menu.home\">Home</span>\n                    </span>\n                </a>\n            </li>\n            <li class=\"nav-item\" routerLinkActive=\"active\" \n [routerLinkActiveOptions]=\"{exact: true}\">\n <a class=\"nav-link\" routerLink=\"/countries\" \n                        (click)=\"collapseNavbar()\">\n <span>\n <fa-icon icon=\"list\"></fa-icon>\n <span>Countries</span>\n </span>\n </a>\n </li>\n          ....\n```", "```java\njhipster upgrade\n```"]