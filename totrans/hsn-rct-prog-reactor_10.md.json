["```java\nplugins {\n    id \"io.spring.dependency-management\" version \"1.0.1.RELEASE\"\n    id \"org.springframework.boot\" version \"2.0.3.RELEASE\"\n    id \"java\"\n}\n\n// Removed for brevity\n\ndependencies {\n        compile 'org.springframework.boot:spring-boot-starter-webflux'\n        compile 'org.springframework:spring-context-support'\n        compile group: 'org.freemarker', name: 'freemarker', version: '2.3.28'\n        testCompile group: 'junit', name: 'junit', version: '4.12'\n        testCompile 'io.projectreactor:reactor-test'\n}\n```", "```java\n    @Test\n    public void testExpectation() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            System.out.println(\"generating next of \" + state.getT1());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n        StepVerifier.create(fibonacciGenerator.take(10))\n                .expectNext(0L, 1L, 1L)\n                .expectNextCount(7)\n                .expectComplete()\n                .verify();\n    }\n```", "```java\njava.lang.AssertionError: expectation \"expectComplete\" failed (expected: onComplete(); actual: onNext(34))\n     at reactor.test.DefaultStepVerifierBuilder.failPrefix(DefaultStepVerifierBuilder.java:2235)\n     at reactor.test.DefaultStepVerifierBuilder.fail(DefaultStepVerifierBuilder.java:2231)\n     at reactor.test.DefaultStepVerifierBuilder.lambda$expectComplete$4(DefaultStepVerifierBuilder.java:245)\n```", "```java\n @Test\n    public void testErrorExpectation() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() > 30)\n                sink.error(new IllegalStateException(\"Value out of bound\"));\n\n         // Removed for brevity\n        });\n        StepVerifier.create(fibonacciGenerator.take(10))\n                .expectNextCount(9)\n                .expectErroSatisfies(x -> {\n                    assert(x instanceof IllegalStateException);\n                })\n                .verify();\n    }\n```", "```java\n    @Test\n    public void testConsumeWith() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            System.out.println(\"generating next of \" + state.getT2());\n\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n\n        StepVerifier.create(fibonacciGenerator)\n                .thenConsumeWhile(x -> x >= 0)\n                .expectComplete()\n               .verify();\n    }\n```", "```java\n   @Test\n    public void testExpectationWithDescp() throws Exception {\n        // removed for brevity\n        StepVerifier.create(fibonacciGenerator.take(9))\n                .expectNext(0L, 1L, 1L).as(\"Received 0,1,1 numbers\")\n                .expectNextCount(7).as(\"Received 9 numbers\")\n                .expectComplete()\n                .verify();\n    }\n```", "```java\njava.lang.AssertionError: expectation \"Received 9 numbers\" failed (expected: count = 7; actual: counted = 6; signal: onComplete())\n\n    at reactor.test.DefaultStepVerifierBuilder.failPrefix(DefaultStepVerifierBuilder.java:2235)\n    at reactor.test.DefaultStepVerifierBuilder.fail(DefaultStepVerifierBuilder.java:2231)\n```", "```java\n@Test\n    public void testRecordWith() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n          //   Removed for Brevity\n     });\n        StepVerifier.create(fibonacciGenerator, Long.MAX_VALUE)\n                .recordWith(() -> new ArrayList<>())\n                .thenConsumeWhile(x -> x >= 0)\n                .expectRecordedMatches(x -> x.size() > 0)\n                .expectComplete()\n                .verify();\n    }\n```", "```java\nStepVerifier.create(fibonacciGenerator.take(10))\n        .expectNext(0L, 1L, 1L)\n        .expectNextCount(7)\n        .verifyComplete();\n```", "```java\n@Test\n    public void testWithTimeout() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n            // removed for brevity\n        });\n        StepVerifier.create(fibonacciGenerator.take(9).delaySequence(Duration.ofSeconds(1)))\n                .expectNext(0L, 1L, 1L)\n                .expectNextCount(7)\n                .expectComplete()\n                .verify(Duration.ofMillis(100));\n    }\n```", "```java\njava.lang.AssertionError: VerifySubscriber timed out on reactor.core.publisher.SerializedSubscriber@1a57272\n\n    at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.pollTaskEventOrComplete(DefaultStepVerifierBuilder.java:1522)\n    at reactor.test.DefaultStepVerifierBuilder$DefaultVerifySubscriber.verify(DefaultStepVerifierBuilder.java:1107)\n    at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:729)\n    at ReactorTest.testWithTimeout(ReactorTest.java:58)\n\n```", "```java\n    @Test\n    public void testBackPressure() throws Exception {\n        Flux<Integer> numberGenerator = Flux.create(x -> {\n            System.out.println(\"Requested Events :\" + x.requestedFromDownstream());\n            int number = 1;\n            while (number < 100) {\n                x.next(number);\n                number++;\n            }\n            x.complete();\n        }, FluxSink.OverflowStrategy.ERROR);\n\n        StepVerifier.create(numberGenerator, 1L)\n                .thenConsumeWhile(x -> x >= 0)\n                .expectError()\n                .verifyThenAssertThat()\n                .hasDroppedElements();\n    }\n```", "```java\n    @Test\n     public void testDelay() {\n         StepVerifier.withVirtualTime(() -> Flux.just(1, 2, 3, 4, 5, 6, 7, 8, 9)\n                 .delaySequence(Duration.ofMillis(100)))\n                 .expectSubscription()\n                 .thenAwait(Duration.ofSeconds(100))\n                 .expectNextCount(9)\n                 .verifyComplete();\n     }\n```", "```java\n\n    @Test\n    public void testPublisherProbe() throws Exception {\n        Flux<Long> fibonacciGenerator = Flux.generate(() -> Tuples.<Long,\n                Long>of(0L, 1L), (state, sink) -> {\n            if (state.getT1() < 0)\n                sink.complete();\n            else\n                sink.next(state.getT1());\n            return Tuples.of(state.getT2(), state.getT1() + state.getT2());\n        });\n\n        PublisherProbe<Long> publisherProbe = PublisherProbe.of(fibonacciGenerator);\n        publisherProbe.flux().subscribe();\n\n        publisherProbe.assertWasSubscribed();\n        publisherProbe.assertWasRequested();\n\n    }\n```", "```java\nclass PrintService{\n    public void printEventNumbers(Flux<Long> source, PrintWriter writer) {\n        source\n                .filter(x -> x % 2 == 0)\n                .subscribe(writer::println);\n    }\n}\n```", "```java\n @Test\n public void testPublisherStub() throws Exception {\n   TestPublisher<Long> numberGenerator= TestPublisher.<Long>create();\n   StringWriter out = new StringWriter();\n   new PrintService().printEventNumbers(numberGenerator.flux(),\n    new PrintWriter(out));\n   numberGenerator.next(1L,2L,3L,4L);\n   numberGenerator.complete();\n   assertTrue(out.getBuffer().length() >0);\n }\n```", "```java\n    @Test\n    public void testNonComplientPublisherStub() throws Exception {\n        TestPublisher<Long> numberGenerator= TestPublisher.createNoncompliant(TestPublisher.Violation.REQUEST_OVERFLOW);\n        StepVerifier.create(numberGenerator, 1L)\n                .then(() -> numberGenerator.emit(1L,2L,3L,4L))\n                .expectNext(1L)\n                .verifyError();\n\n    }\n```", "```java\nreactor.core.Exceptions$ErrorCallbackNotImplemented: java.lang.IllegalStateException\n\nCaused by: java.lang.IllegalStateException\n    at ReactorDebug.lambda$testPublisherStub$1(ReactorDebug.java:22)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)\n    at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170)\n    at reactor.core.publisher.LambdaSubscriber.onSubscribe(LambdaSubscriber.java:89)\n    at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79)\n    at reactor.core.publisher.FluxGenerate.subscribe(FluxGenerate.java:83)\n    at reactor.core.publisher.FluxFilterFuseable.subscribe(FluxFilterFuseable.java:51)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6877)\n    at reactor.core.publisher.Flux.subscribeWith(Flux.java:7044)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6870)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6834)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6777)\n    at PrintService.printEventNumbers(ReactorProbe.java:57)\n    at ReactorDebug.testPublisherStub(ReactorDebug.java:28)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n```", "```java\nclass PrintService{\n    public void printEventNumbers(Flux<Long> source, PrintWriter writer) {\n        source\n                .filter(x -> x % 2 == 0)\n                .subscribe(writer::println,Throwable::printStackTrace);\n    }\n}\n```", "```java\njava.lang.IllegalStateException\n    at ReactorDebug.lambda$testPublisherStub$1(ReactorDebug.java:22)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)\n    at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.request(FluxFilterFuseable.java:170)\n    at reactor.core.publisher.LambdaSubscriber.onSubscribe(LambdaSubscriber.java:89)\n    at reactor.core.publisher.FluxFilterFuseable$FilterFuseableSubscriber.onSubscribe(FluxFilterFuseable.java:79)\n    at reactor.core.publisher.FluxGenerate.subscribe(FluxGenerate.java:83)\n    at reactor.core.publisher.FluxFilterFuseable.subscribe(FluxFilterFuseable.java:51)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6877)\n    at reactor.core.publisher.Flux.subscribeWith(Flux.java:7044)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6870)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6834)\n    at reactor.core.publisher.Flux.subscribe(Flux.java:6804)\n    at PrintService.printEventNumbers(ReactorProbe.java:57)\n    at ReactorDebug.testPublisherStub(ReactorDebug.java:28)\n   ........\n   ......\n    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n```", "```java\n      @Test\n    public void testPublisherStub() throws Exception {\n        Hooks.onOperatorDebug();\n        Flux<Long> fibonacciGenerator = getFibonacciGenerator();\n        StringWriter out = new StringWriter();\n        new PrintService().printEventNumbers(fibonacciGenerator,new PrintWriter(out));\n        assertTrue(out.getBuffer().length() >0);\n    }\nclass PrintService {\n    public void printEventNumbers(Flux<Long> source, PrintWriter writer) {\n        source\n                .filter(x -> x % 2 == 0)\n                .subscribe(writer::println,Throwable::printStackTrace);\n    }\n}\n```", "```java\njava.lang.IllegalStateException\n    at ReactorDebug.lambda$getFibonacciGenerator$1(ReactorDebug.java:30)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)\n  ...........\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nAssembly trace from producer [reactor.core.publisher.FluxGenerate] :\n    reactor.core.publisher.Flux.generate(Flux.java:947)\n    ReactorDebug.getFibonacciGenerator(ReactorDebug.java:27)\n    ReactorDebug.testPublisherStub(ReactorDebug.java:19)\nError has been observed by the following operator(s):\n    &#124;_  Flux.generate(ReactorDebug.java:27)\n    &#124;_  Flux.filter(ReactorProbe.java:58)\n```", "```java\n@Test\npublic void testPublisherStub() throws Exception {\n  Flux<Long> fibonacciGenerator = \n    getFibonacciGenerator().checkpoint();\n    StringWriter out = new StringWriter();\n  new PrintService().printEventNumbers(fibonacciGenerator,\n   new PrintWriter(out));\n  assertTrue(out.getBuffer().length() >0);\n}\n```", "```java\njava.lang.IllegalStateException\n    at ReactorDebug.lambda$getFibonacciGenerator$1(ReactorDebug.java:29)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)   \n...........\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nAssembly trace from producer [reactor.core.publisher.FluxGenerate] :\n    reactor.core.publisher.Flux.checkpoint(Flux.java:2690)\n    reactor.core.publisher.Flux.checkpoint(Flux.java:2640)\n    ReactorDebug.testPublisherStub(ReactorDebug.java:18)\nError has been observed by the following operator(s):\n    &#124;_  Flux.checkpoint(ReactorDebug.java:18)\n```", "```java\njava.lang.IllegalStateException\n    at ReactorDebug.lambda$getFibonacciGenerator$1(ReactorDebug.java:29)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n   .......\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \nAssembly site of producer [reactor.core.publisher.FluxGenerate] is identified by light checkpoint [generator check].\"description\" : \"generator check\"\n```", "```java\n@Test\npublic void testPublisherStub() throws Exception {\n  Flux<Long> fibonacciGenerator = getFibonacciGenerator().log();\n  StringWriter out = new StringWriter();\n  new PrintService().printEventNumbers(fibonacciGenerator,\n   new PrintWriter(out));\n  assertTrue(out.getBuffer().length() >0);\n}\n```", "```java\n<configuration>\n     <appender name=\"stdout\" class=\"ch.qos.logback.core.ConsoleAppender\">\n         <encoder>\n             <pattern>\n                 %d{HH:mm:ss.SSS} [%thread] [%-5level] %logger{36} - %msg%n\n             </pattern>\n         </encoder>\n     </appender>\n    <root level=\"DEBUG\">\n         <appender-ref ref=\"stdout\"/>\n     </root>\n </configuration>\n```", "```java\n23:07:09.139 [main] [DEBUG] reactor.util.Loggers$LoggerFactory - Using Slf4j logging frameworkthe\n23:07:09.419 [main] [INFO ] reactor.Flux.Generate.1 - &#124; onSubscribe([Fuseable] FluxGenerate.GenerateSubscription)\n23:07:09.450 [main] [INFO ] reactor.Flux.Generate.1 - &#124; request(unbounded)\n23:07:09.462 [main] [INFO ] reactor.Flux.Generate.1 - &#124; onNext(0)\n23:07:09.463 [main] [INFO ] reactor.Flux.Generate.1 - &#124; onNext(1)\n23:07:09.471 [main] [INFO ] reactor.Flux.Generate.1 - &#124; request(1)\n........\n23:07:09.958 [main] [INFO ] reactor.Flux.Generate.1 - &#124; request(1)\n23:07:10.087 [main] [ERROR] reactor.Flux.Generate.1 - &#124; onError(java.lang.IllegalStateException)\n23:07:10.126 [main] [ERROR] reactor.Flux.Generate.1 - \njava.lang.IllegalStateException: null\n    at ReactorDebug.lambda$getFibonacciGenerator$1(ReactorDebug.java:29)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.fastPath(FluxGenerate.java:223)\n    at reactor.core.publisher.FluxGenerate$GenerateSubscription.request(FluxGenerate.java:202)\n    at ...........\n```"]