- en: Chapter 5. Dependency Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章. 依赖管理
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Choosing the scope of dependency
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择依赖的范围
- en: Getting a report of dependencies
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取依赖报告
- en: Getting into dependency and avoiding dependency hell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进入依赖并避免依赖地狱
- en: Downloading dependencies into a folder
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将依赖下载到文件夹中
- en: Understanding SNAPSHOT dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 SNAPSHOT 依赖
- en: Handling dependency download errors
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理依赖下载错误
- en: Detecting unused/undeclared dependencies
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测未使用/未声明的依赖
- en: Manually installing dependencies that are not available in a repository
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动安装仓库中不可用的依赖
- en: Dependency management using Eclipse
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Eclipse 进行依赖管理
- en: Dependency management using NetBeans
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 NetBeans 进行依赖管理
- en: Dependency management using IntelliJ IDEA
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDEA 进行依赖管理
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: One of the powerful features of Maven is managing the dependencies required
    by the project. It is rare for a project to be developed without using other dependencies.
    The typical issues in using dependencies relate to the number and choice of dependencies,
    their versions, and the transitive dependencies (a project dependency, in turn,
    being dependent on other dependencies).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的强大功能之一是管理项目所需的依赖。一个项目在没有使用其他依赖的情况下开发是很罕见的。使用依赖的典型问题与依赖的数量和选择、它们的版本以及传递依赖（一个项目依赖反过来又依赖于其他依赖）有关。
- en: Maven has a way of managing the dependencies, as well as providing users with
    enough flexibility to handle complexities, as they arise.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 有一种管理依赖的方式，同时也为用户提供足够的灵活性来处理出现的复杂性。
- en: Choosing the scope of dependency
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择依赖的范围
- en: We may use a dependency for many reasons. Some of them may be required to compile
    and run the projects. There might be others only to run tests (for instance, `junit`).
    Then there may be dependencies that are required at runtime, say `logback`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能出于许多原因使用依赖。其中一些可能是为了编译和运行项目所必需的。可能还有其他仅用于运行测试的（例如，`junit`）。然后可能有在运行时必需的依赖，比如
    `logback`。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Use the following steps to choose the scope of the dependency:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤来选择依赖的范围：
- en: Open the Maven project we had created earlier.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们之前创建的 Maven 项目。
- en: 'Observe the following section:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下部分：
- en: '[PRE0]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Remove the preceding lines of code and run the following command:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除前面的代码行并运行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Observe that it runs without any issues.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察到它运行时没有任何问题。
- en: 'Now, run the following command:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，运行以下命令：
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Note the following error:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下错误：
- en: '[PRE3]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Java source code `App.java` did not have any dependency. Only the source
    classes were compiled by `mvn` and thus, the command ran without any error.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Java 源代码 `App.java` 没有任何依赖。只有源类被 `mvn` 编译，因此命令运行时没有出现任何错误。
- en: The test code `AppTest.java` required the `junit` library to build. This is
    declared in the import statement in the code. The `mvn` test tried to compile
    the test classes, and as it did not find the dependency, it failed.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 测试代码 `AppTest.java` 需要使用 `junit` 库进行构建。这在代码的导入语句中声明。`mvn` 测试尝试编译测试类，由于没有找到依赖，它失败了。
- en: 'The following information needs to be specified to declare a dependency:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 声明依赖需要指定以下信息：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding three elements uniquely identify the dependency.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个元素唯一地标识了依赖。
- en: 'The fourth piece of information is as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 第四条信息如下：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: By default, the `scope` is `compile`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`scope` 是 `compile`。
- en: 'There are six different dependency scopes available:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有六个不同的依赖范围可供选择：
- en: '`compile`: This dependency is required for compilation. This automatically
    means it is required for testing as well as runtime (when the project is run).'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`：这个依赖对于编译是必需的。这自动意味着它对于测试以及运行时（当项目运行时）也是必需的。'
- en: '`test`: This dependency is only required for tests. This means the dependency
    is typically in the test code. As the test code is not used to run the project,
    these dependencies are not required for runtime.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`：这个依赖仅用于测试。这意味着依赖通常在测试代码中。由于测试代码不用于运行项目，因此这些依赖在运行时不必要。'
- en: '`runtime`: These dependencies are not required during compilation, but only
    required to run the project. One example would be the `logback` dependency if
    you are using **Simple Logging Facade for Java** (**slf4j**) to log and want to
    use `logback` binding.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime`：这些依赖在编译期间不是必需的，但运行项目时是必需的。一个例子是，如果你使用 **Java 简单日志门面（slf4j**）进行日志记录并希望使用
    `logback` 绑定，那么就需要 `logback` 依赖。'
- en: '`provided`: This tells Maven that dependency is required for compilation and
    runtime, but this dependency need not be packaged with the package for distribution.
    The dependency will be provided by the user. An example of this dependency is
    `servlet-api`. Typically, application servers have these libraries.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`provided`：这告诉 Maven 依赖项对于编译和运行是必需的，但这个依赖项不需要与打包的分发包一起打包。依赖项将由用户提供。这种依赖项的一个例子是
    `servlet-api`。通常，应用服务器有这些库。'
- en: '`system`: This is similar to the provided scope. Here, we need to explicitly
    provide the location of the JAR file. It is not looked up from the repository.
    This may be useful to specify a dependency that is not present in the repository:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`system`：这与提供的范围相似。在这里，我们需要明确提供 JAR 文件的路径。它不会从仓库中查找。这可能有助于指定不在仓库中的依赖项：'
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`import`: This is only used on a dependency of the `pom` type in the `dependencyManagement`
    section. It indicates that the specified pom should be replaced with the dependencies
    in that pom''s `dependencyManagement` section. This is intended to centralize
    dependencies of large multi-module projects.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`import`：这仅在 `dependencyManagement` 部分的 `pom` 类型依赖项上使用。它表示指定的 pom 应该用该 pom
    的 `dependencyManagement` 部分中的依赖项替换。这是为了集中管理大型多模块项目的依赖项。'
- en: See also
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Manually installing dependencies that are not available in a repository*
    recipe in this chapter
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中 *手动安装仓库中不可用的依赖项* 的配方
- en: Getting a report of dependencies
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取依赖关系报告
- en: It is useful to get a list of dependencies for a Maven project in order to identify
    and troubleshoot problems. The Maven Dependency plugin helps us here.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 Maven 项目的依赖关系列表对于识别和调试问题非常有用。Maven Dependency 插件在这里帮了我们大忙。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To appreciate this, we need to have a fairly complex project that has several
    transitive dependencies. You can look at one such project at [https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要欣赏这一点，我们需要一个相当复杂的项目，它有几个传递依赖。您可以在 [https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid)
    上查看这样一个项目。
- en: The project source code is available as a Git repository. A Git repository is
    typically downloaded by cloning it. To do this, install Git on your system. Refer
    to the Git setup link ([https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/))
    for detailed instructions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 项目源代码以 Git 仓库的形式提供。通常通过克隆来下载 Git 仓库。为此，请在您的系统上安装 Git。有关详细说明，请参阅 Git 设置链接 ([https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/))。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps, to get a list of dependencies for a Maven project:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤，获取 Maven 项目的依赖关系列表：
- en: Clone the open source project `demoproject-selendroid`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆开源项目 `demoproject-selendroid`。
- en: 'Run the following Maven goal:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 目标：
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Observe the output as shown in the following screenshot:![How to do it...](img/6124OS_05_01.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下截图所示的输出：![如何操作...](img/6124OS_05_01.jpg)
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Maven Dependency plugin has several goals to obtain information regarding
    dependencies as well as manage them.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Dependency 插件有几个目标，用于获取有关依赖项的信息以及管理它们。
- en: Interestingly, this goal is not bound to any phase or lifecycle of Maven. This
    means, when the `mvn dependency:list` command is run, Maven runs the `list` goal
    and nothing else.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，这个目标并不绑定到 Maven 的任何阶段或生命周期。这意味着，当运行 `mvn dependency:list` 命令时，Maven 只会运行
    `list` 目标，而不会做其他任何事情。
- en: The `dependency:list` parameter tells Maven to run the `list` goal of the Maven
    Dependency plugin. This analyzes the pom file and generates a list of dependencies
    for the project.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`dependency:list` 参数告诉 Maven 运行 Maven Dependency 插件的 `list` 目标。这会分析 pom 文件并生成项目的依赖关系列表。'
- en: There's more...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While the dependency list might be good enough for simple cases, a more interesting
    and useful one would be a dependency report in a tree format.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然依赖关系列表对于简单情况可能足够好，但更有趣和有用的是以树形格式显示的依赖关系报告。
- en: 'This can be done by running the `tree` goal of Maven Dependency plugin:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过运行 Maven Dependency 插件的 `tree` 目标来完成：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Running this on the preceding project gives the following output:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的项目上运行此命令会得到以下输出：
- en: '![There''s more...](img/6124OS_05_02.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/6124OS_05_02.jpg)'
- en: As we can see, this is a better representation of the transitivity of the dependencies.
    Now we know that which other dependencies are used, for instance, `commons-logging`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，这是依赖关系传递性的更好表示。现在我们知道哪些其他依赖项被使用了，例如，`commons-logging`。
- en: Getting into dependency and avoiding dependency hell
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入依赖关系并避免依赖关系地狱
- en: As you use a number of dependencies, each of them in turn may also include further
    dependencies. A situation may come when there are multiple versions of the same
    dependencies in the project. This can often lead to errors.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 随着您使用越来越多的依赖关系，每个依赖关系反过来也可能包含更多的依赖关系。可能会出现项目中有多个相同依赖关系版本的情况。这通常会导致错误。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To understand this, we need to have a fairly complex project that has several
    transitive dependencies. You can look at one such project at [https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解这一点，我们需要一个相当复杂的项目，它有几个传递依赖关系。您可以在[https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid)查看这样一个项目。
- en: Clone the repository on your system. Now, we are ready to see how complex dependencies
    can get.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的系统上克隆仓库。现在，我们准备了解复杂依赖关系可能变得多么复杂。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to avoid dependency hell:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤来避免依赖关系地狱：
- en: 'Run the following command:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note the output as shown in the following screenshot:![How to do it...](img/6124OS_05_03.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下截图所示的输出：![如何操作...](img/6124OS_05_03.jpg)
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'As you can see, in the course of identifying the dependencies to be used in
    the project, Maven does a dependency analysis. This reveals two things:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，在确定项目要使用的依赖关系的过程中，Maven执行依赖关系分析。这揭示了两个问题：
- en: Two or more dependencies require the same version of another dependency. Maven
    includes a dependency only once.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个或多个依赖关系需要另一个依赖关系的相同版本。Maven只包含一次依赖关系。
- en: Two or more dependencies require a different version of another dependency.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个或多个依赖关系需要另一个依赖关系的不同版本。
- en: Maven resolves this by supporting the *nearest definition*, which means that
    it will use the version of the dependency closest to your project in the tree
    of dependencies.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Maven通过支持*最近定义*来解决这个问题，这意味着它将使用与您的项目在依赖关系树中最接近的依赖关系的版本。
- en: This means it will not necessarily take either the *latest* or the *oldest*
    version. It will go by the version that it finds *first* in the order of dependencies.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着它不一定选择最新的或最旧的版本。它将按照依赖关系的顺序，找到的第一个版本。
- en: Where the project fails to work due to the incorrect version being used, the
    correct way to resolve is to explicitly define the desired version of the dependency
    in your pom file. By the previous strategy, this being the *nearest definition*
    will get precedence over any other versions defined in any other dependency.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目由于使用了错误的版本而无法工作时，正确的解决方法是明确在您的pom文件中定义所需的依赖关系版本。根据前面的策略，这将作为*最近定义*将优先于任何其他依赖关系中定义的任何其他版本。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Maven provides another way to handle the preceding scenario, namely, by using
    the `dependencyManagement` element.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了另一种处理上述场景的方法，即通过使用`dependencyManagement`元素。
- en: This allows us to directly specify the versions of artifacts to be used when
    they are encountered in transitive dependencies or in dependencies where no version
    has been specified. In the example in the preceding section, the `guava` dependency
    was directly added to `demoproject-selendroid`, even though it was not directly
    used by the project. Instead, `demoproject-selendroid` can include `guava` as
    a dependency in its `dependencyManagement` section and directly control which
    version of `guava` is used when, or if, it is ever referenced.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们在遇到传递依赖关系或未指定版本的依赖关系时，直接指定要使用的工件版本。在前面章节的示例中，`guava`依赖关系直接添加到`demoproject-selendroid`中，即使它没有被项目直接使用。相反，`demoproject-selendroid`可以在其`dependencyManagement`部分将`guava`作为依赖关系包含，并直接控制何时或是否引用它时使用哪个版本的`guava`。
- en: There is no magic bullet to prevent dependency hell. Even if you manually manage
    the version of a library that gets included in your project by the preceding mechanism,
    it does not mean that other transitive dependencies, which depend on a different
    version of the same library, will suddenly become binary compatible with the managed
    version.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 没有魔法子弹可以防止依赖关系地狱。即使您手动管理通过前面机制包含在您的项目中的库的版本，这也并不意味着其他依赖于同一库不同版本的传递依赖关系会突然与管理的版本二进制兼容。
- en: Downloading dependencies into a folder
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将依赖关系下载到文件夹中
- en: Some projects may have a requirement for all the dependencies to be made available,
    say, in a folder. This could be to archive the dependencies used in a particular
    version of the build.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目可能需要将所有依赖项都可用，例如，在一个文件夹中。这可能是为了存档特定构建版本中使用的依赖项。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to download dependencies in the `target/dependency`
    folder:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤在 `target/dependency` 文件夹中下载依赖项：
- en: Let us open the demo project that we used in the previous recipe.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开之前菜谱中使用的演示项目。
- en: 'Run the following command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE10]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: See the output in the `target/dependency` folder:![How to do it...](img/6124OS_05_04.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `target/dependency` 文件夹中查看输出：![如何操作...](img/6124OS_05_04.jpg)
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `copy-dependencies` goal of the Maven Dependency plugin copies over all
    the dependencies used in the project, including transitive dependencies, to `target/dependency`
    folder of the project.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Dependency 插件的 `copy-dependencies` 目标会将项目中使用的所有依赖项（包括传递依赖项）复制到项目的 `target/dependency`
    文件夹中。
- en: There's more...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This goal takes several parameters to handle various use cases, such as copying
    pom files of the dependencies, copying parent poms, preserving the folder structure
    of the repository, and so on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此目标接受多个参数来处理各种用例，例如复制依赖项的 pom 文件、复制父 pom、保留仓库的文件夹结构等。
- en: 'The folder location can be changed by passing the following argument:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过传递以下参数来更改文件夹位置：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The dependencies will now be copied over to the `dependencies` folder instead
    of the default `target/dependency` folder.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在依赖项将被复制到 `dependencies` 文件夹而不是默认的 `target/dependency` 文件夹。
- en: 'The folder structure of the repository can be preserved and the poms of the
    dependencies can be copied over by running the following command:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过运行以下命令保留仓库的文件夹结构并将依赖项的 pom 复制过来：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The resultant folder structure will be similar to the repository layout as
    shown in the following screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的文件夹结构将类似于以下截图所示的仓库布局：
- en: '![There''s more...](img/6124OS_05_05.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多...](img/6124OS_05_05.jpg)'
- en: Understanding SNAPSHOT dependencies
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SNAPSHOT 依赖项
- en: 'In Maven, a `SNAPSHOT` version is a version of the project/dependency that
    has not been released. This is indicated by suffixing `SNAPSHOT` to the version
    number. Here''s an example:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Maven 中，`SNAPSHOT` 版本是项目/依赖项尚未发布的版本。这通过在版本号后附加 `SNAPSHOT` 来表示。以下是一个示例：
- en: '[PRE13]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You will notice that the project we created using the Maven archetype quickstart
    had a `SNAPSHOT` version.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您会注意到我们使用 Maven 架构快速启动创建的项目有一个 `SNAPSHOT` 版本。
- en: The version number specified before `-SNAPSHOT` is the version that the released
    project/dependency is expected to have. So, `1.0-SNAPSHOT` indicates `1.0` is
    not released yet.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `-SNAPSHOT` 前指定的版本号是预期发布的项目/依赖项应具有的版本。因此，`1.0-SNAPSHOT` 表示 `1.0` 尚未发布。
- en: As the `SNAPSHOT` version indicates software under development, Maven deals
    with these dependencies differently.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `SNAPSHOT` 版本表示正在开发中的软件，Maven 会以不同的方式处理这些依赖项。
- en: How to do it...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: One would rarely use the `SNAPSHOT` version of an external dependency. If you
    are developing a multi-module project in your organization, chances are you will
    use `SNAPSHOT` versions of other modules required in your project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 很少会使用外部依赖项的 `SNAPSHOT` 版本。如果您在您的组织中开发一个多模块项目，那么您可能会使用项目中需要的其他模块的 `SNAPSHOT`
    版本。
- en: 'Let us try the following contrived example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试以下虚构的示例：
- en: Open one of the projects that we have created.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们创建的一个项目。
- en: 'Add the following dependency:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下依赖项：
- en: '[PRE14]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code to specify the repository where the dependency is available:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码以指定依赖项可用的仓库：
- en: '[PRE15]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the following command:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE16]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Observe the following results:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察以下结果：
- en: '[PRE17]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first thing you would have seen is the need to define a specific repository
    to download the dependencies. These dependencies are not available in the usual
    repositories. They reside separately in repositories called **snapshot repositories**.
    In the preceding example, we specified the snapshot repository where the desired
    dependencies were available.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您首先会看到需要定义一个特定的仓库来下载依赖项。这些依赖项不在常规仓库中。它们位于称为 **快照仓库** 的单独仓库中。在先前的示例中，我们指定了包含所需依赖项的快照仓库。
- en: The second thing you would notice are the filenames. Each artifact that is being
    downloaded is appended with `20141107.161556-92`. This is a unique identifier
    for each `SNAPSHOT` version in the repository. This value changes each time a
    new `SNAPSHOT` version is available in the repository.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到的第二件事是文件名。每个正在下载的工件都会附加`20141107.161556-92`。这是仓库中每个`SNAPSHOT`版本的唯一标识符。每次仓库中有新的`SNAPSHOT`版本可用时，此值都会改变。
- en: Maven treats `SNAPSHOT` versions differently from release versions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: Maven对待`SNAPSHOT`版本和发布版本的方式不同。
- en: For a release version, Maven checks if the artifact is available in the local
    repository that is already downloaded. If so, it does not attempt to fetch the
    same from the remote repositories.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发布版本，Maven会检查该工件是否已存在于已下载的本地仓库中。如果是这样，它将不会尝试从远程仓库中获取相同的工件。
- en: For `SNAPSHOT` versions, even if the artifact is available locally, it checks
    the `SNAPSHOT` version for updates in the remote repository based on the update
    policy that can be configured.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`SNAPSHOT`版本，即使工件在本地可用，它也会根据可以配置的更新策略在远程仓库中检查`SNAPSHOT`版本的更新。
- en: By default, the update interval is once a day. This means, if Maven downloads
    a `SNAPSHOT` dependency at noon today, it will check for an update to it at noon
    tomorrow and not before that, irrespective of how many times you build the project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，更新间隔是一天一次。这意味着，如果Maven今天中午下载了一个`SNAPSHOT`依赖项，它将在明天中午检查其更新，而不会在此之前，无论你构建项目多少次。
- en: 'The update interval can be specified in the repository section of the pom or
    settings file as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 更新间隔可以在pom或settings文件的仓库部分指定如下：
- en: '[PRE18]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The choices are `always`, `daily` (default), `interval:X` (where `X` is an
    integer in minutes), or `never`. Let''s discuss in brief about these choices:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 选项有`always`、`daily`（默认）、`interval:X`（其中`X`是分钟内的一个整数）或`never`。让我们简要讨论这些选项：
- en: '`always`: This checks for updates for every Maven run.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`always`：这会在每次Maven运行时检查更新。'
- en: '`daily`: This checks for updates once a day. This does not necessarily mean
    exactly 24 hours from the last check; just once a day at the start of the day.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`daily`：这会每天检查一次更新。这并不一定意味着从上次检查的24小时后；只是在每天的开始。'
- en: '`interval:X`: This checks for updates after a specified time.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`interval:X`：这会在指定的时间后检查更新。'
- en: Tip
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In a multi-module project, it is good to set the `updatePolicy` element value
    to `always` for intermodule dependencies.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在多模块项目中，对于模块间的依赖项，将`updatePolicy`元素值设置为`always`是很好的。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As mentioned earlier, there are separate repositories for release and snapshot
    versions. By default, snapshots are disabled for a release repository and vice
    versa. The `repository` element has separate `releases` and `snapshots` sub-elements
    where this can be specified:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，发布版本和快照版本有单独的仓库。默认情况下，快照在发布仓库中是禁用的，反之亦然。`repository`元素有单独的`releases`和`snapshots`子元素，可以在其中指定：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Typically, for a release repository, `enabled` will be `false` for `snapshots`.
    For a snapshot repository, `enabled` will be `true` for `snapshots` and `false`
    for `releases`. This is so that Maven looks at the right repository for the right
    artifacts and does not unnecessarily look at the wrong repositories each time
    it needs a dependency.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，对于发布仓库，`snapshots`的`enabled`将为`false`。对于快照仓库，`snapshots`的`enabled`将为`true`，而`releases`的`enabled`将为`false`。这样，Maven每次需要依赖项时都会查看正确的仓库，而不会不必要地查看错误的仓库。
- en: The `checksumPolicy` element tells Maven what to do in case the checksum of
    the downloaded dependency does not match the actual checksum. The value of `fail`
    will stop the build with a checksum error.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`checksumPolicy`元素告诉Maven在下载的依赖项的校验和与实际校验和不匹配时应该做什么。`fail`的值将在校验和错误时停止构建。'
- en: Handling dependency download errors
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理依赖项下载错误
- en: There could be situations when a dependency might not be downloaded due to network
    problems or other issues. Sometimes, the error reported by Maven might not indicate
    the problem. It is good to know how to get around this problem.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况，由于网络问题或其他问题，依赖项可能无法下载。有时，Maven报告的错误可能不会表明问题。了解如何解决这个问题是很有用的。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'It is difficult to simulate this problem in a normal scenario, but we can create
    a contrived scenario, by using the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常情况下模拟这个问题是困难的，但我们可以通过以下步骤创建一个人为的场景：
- en: 'Modify the dependency version for JUnit in our simple project:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改我们简单项目中JUnit的依赖版本：
- en: '[PRE20]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the following command:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE21]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This will attempt to download the dependency and fail (as the version is invalid):'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将尝试下载依赖项并失败（因为版本无效）：
- en: '[PRE22]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the command again and observe the results:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行命令并观察结果：
- en: '[PRE23]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Delete the folder `3.9.1` (or the files in the folder ending with `.lastUpdated`)
    in the local repo (`.m2/repository/junit/junit/3.9.1`) and retry.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除本地仓库（`.m2/repository/junit/junit/3.9.1`）中的文件夹`3.9.1`（或以`.lastUpdated`结尾的文件夹中的文件）并重试。
- en: The `resolution will not be attempted` error will go away and Maven will attempt
    to download the dependency again
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “无法尝试解决”错误将消失，Maven将再次尝试下载依赖项。
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Maven first downloads the pom file of the dependency. It analyzes the pom file
    and recursively downloads the transitive dependencies specified there. It then
    downloads the actual dependency file, typically, a JAR file.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Maven首先下载依赖项的pom文件。它分析pom文件，并递归地下载那里指定的传递依赖项。然后下载实际的依赖项文件，通常是JAR文件。
- en: 'When Maven fails to download an artifact, it creates a file with the same name
    as the artifact it failed to download, but suffixed with `.lastUpdated`. In the
    file, it puts information related to the download, as shown in the following example:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 当Maven无法下载一个工件时，它会创建一个与未能下载的工件同名的文件，但后缀为`.lastUpdated`。在该文件中，它放入与下载相关的信息，如下例所示：
- en: '[PRE24]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When a request is made to Maven to download the dependency again, maven refers
    to the contents of this file to decide whether or not maven should reattempt.
    This is the case for release dependencies. The deletion of this file will ensure
    maven reattempts to download the dependency when asked.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求Maven再次下载依赖项时，Maven会参考此文件的内容来决定是否应该重新尝试。这是针对发布依赖项的情况。删除此文件将确保Maven在请求时重新尝试下载依赖项。
- en: We have seen how this works for SNAPSHOT dependencies in the *Understanding
    the SNAPSHOT dependencies* recipe of this chapter.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在本章的“理解SNAPSHOT依赖”食谱中看到了这是如何为SNAPSHOT依赖项工作的。
- en: Detecting unused/undeclared dependencies
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检测未使用/未声明的依赖项
- en: As your project becomes large and the number of dependencies increase (including
    transitive dependencies), it is good to know if we have ended up declaring dependencies
    that we are not using, or if we are using undeclared dependencies (which are brought
    in by transitive dependencies).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着项目变得越来越大，依赖项的数量（包括传递依赖项）增加，了解我们是否最终声明了未使用的依赖项，或者我们是否使用了未声明的依赖项（这些依赖项是通过传递依赖项引入的）是有好处的。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to detect the unused/undeclared dependencies:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤来检测未使用/未声明的依赖项：
- en: 'Run the following Maven command on the `demo-selendroid` project that we used
    earlier:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前使用的`demo-selendroid`项目上运行以下Maven命令：
- en: '[PRE25]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Note the report generated:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意生成的报告：
- en: '[PRE26]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As can be seen from the preceding report, Maven has identified a dependency
    used by the project that is not declared, for instance the `selenium-api` JAR
    file. It has also found a dependency that is declared in the pom file, but is
    not used by the project (`hamcrest-integration`). You could check if the removal
    causes any side-effect and if not, go ahead.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述报告所示，Maven已经识别出项目使用的一个未声明的依赖项，例如`selenium-api` JAR文件。它还发现了一个在pom文件中声明但未被项目使用的依赖项（`hamcrest-integration`）。您可以检查删除是否会引起任何副作用，如果没有，则继续操作。
- en: It is a good practice to explicitly define the dependency used in the project,
    specifying the version number instead of using it by means of a transitive dependency.
    This is because we have no control over the version or availability of this transitive
    dependency.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 明确定义项目中使用的依赖项，指定版本号而不是通过传递依赖项使用它，这是一个好习惯。这是因为我们无法控制这个传递依赖项的版本或可用性。
- en: On the other hand, in order to have better control over dependency conflicts
    that we saw earlier, it may not be a bad idea to explicitly define versions of
    dependencies that are not directly required by our project but used by our dependencies.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，为了更好地控制我们之前看到的依赖项冲突，明确定义那些不是直接由我们的项目要求但由我们的依赖项使用的依赖项的版本可能不是一个坏主意。
- en: Manually installing dependencies that are not available in a repository
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在仓库中不可用的依赖项的手动安装
- en: There may be situations where a library, which is not present in any Maven repository,
    needs to be used. We have seen one way to use it, that is, specifying it as a
    dependency with `system` scope and explicitly specifying the path to it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 可能存在这样的情况，需要使用一个不在任何 Maven 仓库中的库。我们已看到一种使用方法，即将其指定为具有 `system` 范围的依赖项，并明确指定其路径。
- en: The problem with this approach is that this dependency will not be available
    if you need to distribute your project as a library.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的缺点是，如果您需要将项目作为库分发，则此依赖项将不可用。
- en: Maven provides a mechanism to install an artifact to your local repository so
    that you can declare and use it like other dependencies.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 提供了一种机制，可以将工件安装到您的本地仓库，以便您可以像其他依赖项一样声明和使用它。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps to manually install the dependencies that aren''t available
    in a repository:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤手动安装仓库中不可用的依赖项：
- en: 'Add the following dependency to the simple project that we created earlier:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下依赖项添加到我们之前创建的简单项目中：
- en: '[PRE27]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The project will fail to compile with the error of a missing dependency
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 项目将因缺少依赖项而编译失败
- en: 'Now run the following Maven command:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下 Maven 命令：
- en: '[PRE28]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Note the result:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意结果：
- en: '[PRE29]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-194
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `install-file` goal of the Maven Install plugin allows dependencies to be
    installed to the local repository. It takes `groupId`, `artifactId`, `version`,
    and `packaging` type as parameters so that it can place the dependency suitably
    in the repository as well as create a simple pom file for it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Install 插件的 `install-file` 目标允许将依赖项安装到本地仓库。它接受 `groupId`、`artifactId`、`version`
    和 `packaging` 类型作为参数，以便它可以在仓库中适当地放置依赖项，并为它创建一个简单的 pom 文件。
- en: This method is not ideal in a project with multiple developers, as each developer
    needs to perform this step manually. One way to deal with this is to install this
    dependency in a repository manager that is used by the organization. As the developers
    will be using this repository manager as a `mirror`, Maven will find the dependency
    from the `mirror` and proceed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在有多个开发者的项目中，这种方法并不理想，因为每个开发者都需要手动执行此步骤。一种处理方法是将此依赖项安装到组织使用的仓库管理器中。因为开发者将使用此仓库管理器作为
    `mirror`，所以 Maven 将从 `mirror` 中找到依赖项并继续执行。
- en: In such a case, we could use the `deploy` goal of the Maven deploy plugin to
    install the artifact to the remote repository.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们可以使用 Maven deploy 插件的 `deploy` 目标将工件安装到远程仓库。
- en: Some remote repositories have access control. Maven allows access details to
    be specified in the `server` element. It is best to specify this in `settings.xml`
    as this file is specific to each user.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一些远程仓库有访问控制。Maven 允许在 `server` 元素中指定访问详情。最好在 `settings.xml` 中指定此内容，因为此文件对每个用户都是特定的。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Projects with dependencies that are installed by this method are again not distributable,
    as those using them will fail to find the dependencies.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法安装依赖项的项目再次不可分发，因为使用它们的人将无法找到依赖项。
- en: 'Where projects are expected to be distributed and included by others as dependencies,
    a different approach needs to be followed—the static **in-project repository**
    solution. Use the following steps to follow the in-project repository approach:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目预期被他人作为依赖项分发和包含时，需要遵循不同的方法——即静态 **项目内仓库** 解决方案。使用以下步骤遵循项目内仓库方法：
- en: 'Create a repository inside your project by adding the following in your pom
    file:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 pom 文件中添加以下内容以在项目中创建一个仓库：
- en: '[PRE30]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Use the following command to install the dependency to this repository:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令将依赖项安装到该仓库：
- en: '[PRE31]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: What have we achieved? Now, the dependency is packaged along with the source
    code in the `lib` folder of our project and available for distribution. This is
    transparent to the user as they do not need to do anything special to access it.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们取得了什么成果？现在，依赖项已与源代码一起打包到我们项目的 `lib` 文件夹中，并可供分发。这对用户来说是透明的，因为他们不需要做任何特殊操作来访问它。
- en: Dependency management using Eclipse
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse 进行依赖项管理
- en: We have seen that the Eclipse IDE provides support for Maven projects and allows
    us to run Maven commands from the IDE. Let us now see how we can manage dependencies
    using Eclipse.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 Eclipse IDE 提供了对 Maven 项目的支持，并允许我们从 IDE 中运行 Maven 命令。现在让我们看看如何使用 Eclipse
    管理依赖项。
- en: How to do it...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps in Eclipse IDE to manage the dependencies:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Eclipse IDE 中使用以下步骤来管理依赖项：
- en: Open the demoproject-selendroid file in Eclipse.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Eclipse 中打开 demoproject-selendroid 文件。
- en: Open the `pom.xml` file.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `pom.xml` 文件。
- en: Click on the **Dependencies** tab as shown in the following screenshot:![How
    to do it...](img/6124OS_05_06.jpg)
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击以下截图所示的 **依赖项** 选项卡：![如何操作...](img/6124OS_05_06.jpg)
- en: A new dependency can be added by clicking on the **Add…** button (see in the
    preceding screenshot for the **Add...** button):![How to do it...](img/6124OS_05_07.jpg)
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以通过点击 **添加…** 按钮（参见前面的截图中的 **添加…** 按钮）来添加新的依赖项：![如何操作...](img/6124OS_05_07.jpg)
- en: As you can see in the preceding screenshot, you can specify the values in the
    **Group Id:**, **Artifact Id:**, and **Version:** textboxes along with the value
    in the **Scope** dropdown. Alternately, you can search for an artifact in the
    **Enter groupId, artifactId or sha1 prefix or pattern (*):** textbox, and eclipse
    will populate the relevant columns based on your selection in the **Search Results**
    list.
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如前一个截图所示，您可以在 **组 ID：**、**组件 ID：** 和 **版本：** 文本框中指定值，以及 **作用域** 下拉列表中的值。或者，您可以在
    **输入组 ID、组件 ID 或 sha1 前缀或模式 (*):** 文本框中搜索一个组件，Eclipse 将根据您在 **搜索结果** 列表中的选择填充相关列。
- en: You can also see the dependency tree by clicking on the **Dependency Hierarchy**
    tab:![How to do it...](img/6124OS_05_08.jpg)
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以通过点击 **依赖关系层次结构** 选项卡来查看依赖关系树：![如何操作...](img/6124OS_05_08.jpg)
- en: How it works...
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: As Eclipse has built-in support for Maven, it allows visualization of dependencies
    by parsing the pom file. It also calls various Maven commands (such as `dependency:tree`)
    internally to build the hierarchy and display the same.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Eclipse 内置了对 Maven 的支持，它可以通过解析 pom 文件来可视化依赖项。它还内部调用各种 Maven 命令（如 `dependency:tree`）来构建层次结构并显示相同的内容。
- en: There's more...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'We saw that users can search for and add dependencies. For this to work, navigate
    to **Windows** | **Preferences** | **Maven** and check the **Download repository
    index updates on startup** option to download indexes, as shown in the following
    screenshot:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到用户可以搜索并添加依赖项。为了使此功能正常工作，请导航到 **Windows** | **首选项** | **Maven** 并勾选 **启动时下载仓库索引更新**
    选项以下载索引，如图所示：
- en: '![There''s more...](img/6124OS_05_09.jpg)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/6124OS_05_09.jpg)'
- en: You may need to restart Eclipse for this to take effect. Also, you can enable
    the **Maven Repositories** view (see in the preceding screenshot), see the repositories,
    and also update the index as required.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要重新启动 Eclipse 以使此更改生效。此外，您还可以启用 **Maven 仓库** 视图（参见前面的截图），查看仓库，并根据需要更新索引。
- en: Dependency management using NetBeans
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 NetBeans 进行依赖项管理
- en: Like Eclipse, NetBeans also allows dependencies to be managed and viewed through
    the IDE. Unlike Eclipse, NetBeans displays a graphical view of the dependencies
    along with additional information, which makes it easy for developers to troubleshoot
    issues.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Eclipse 类似，NetBeans 也允许通过 IDE 管理和查看依赖项。与 Eclipse 不同，NetBeans 显示了依赖项的图形视图以及附加信息，这使得开发者更容易排查问题。
- en: How to do it...
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps in the NetBeans IDE to manage the dependencies:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在 NetBeans IDE 中使用以下步骤来管理依赖项：
- en: Open the `demoproject-selendroid` file in NetBeans.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 NetBeans 中打开 `demoproject-selendroid` 文件。
- en: Open the `pom.xml` file.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `pom.xml` 文件。
- en: Click on the **Graph** tab:![How to do it...](img/6124OS_05_10.jpg)
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **图形** 选项卡：![如何操作...](img/6124OS_05_10.jpg)
- en: Hover over one of the dependencies in red (**commons-codec**):![How to do it...](img/6124OS_05_11.jpg)
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在红色依赖项之一（**commons-codec**）上：![如何操作...](img/6124OS_05_11.jpg)
- en: Hover over one of the dependencies in orange (**httpclient**):![How to do it...](img/6124OS_05_12.jpg)
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将鼠标悬停在橙色依赖项之一（**httpclient**）上：![如何操作...](img/6124OS_05_12.jpg)
- en: How it works...
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: NetBeans creates a graph of all the project dependencies and displays the same.
    It colors the dependencies that have conflicts in red and those that have warnings
    in orange. On hovering, NetBeans displays details of the issues.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 创建了一个包含所有项目依赖关系的图表，并显示相同的内容。它用红色突出显示有冲突的依赖项，用橙色突出显示有警告的依赖项。在悬停时，NetBeans
    显示问题的详细信息。
- en: This allows the user to take suitable action.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许用户采取适当的行动。
- en: Dependency management using IntelliJ IDEA
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDEA 进行依赖项管理
- en: Unlike Eclipse and NetBeans, viewing dependencies as graphs is only possible
    in the IntelliJ IDEA Ultimate version, which is commercial. The Community Edition
    does not support this option.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Eclipse 和 NetBeans 不同，只有在 IntelliJ IDEA Ultimate 版本中才能以图形的形式查看依赖项，这是一个商业版本。社区版不支持此选项。
- en: How to do it...
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Use the following steps in IntelliJ Idea Ultimate version to manage the dependencies:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在 IntelliJ IDEA Ultimate 版本中使用以下步骤来管理依赖项：
- en: Open the `demoproject-selendroid` file in the IntelliJ IDEA Ultimate edition.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ IDEA Ultimate 版本中打开 `demoproject-selendroid` 文件。
- en: Right-click on the `pom.xml` file.![How to do it...](img/6124OS_05_13.jpg)
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `pom.xml` 文件。![如何操作...](img/6124OS_05_13.jpg)
- en: Click on the **Show Dependencies...** option (See this option in the preceding
    screenshot) and observe the following screenshot:![How to do it...](img/6124OS_05_14.jpg)
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **显示依赖...** 选项（参见前面的截图中的此选项）并观察以下截图：![如何操作...](img/6124OS_05_14.jpg)
- en: How it works...
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: IntelliJ IDEA has first-class support for Maven projects. It reads the `pom.xml`
    file of the project, parses it, and identifies all the dependencies, including
    transitive dependencies. It then displays the same in a graphical manner, allowing
    users to visualize the project.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA 对 Maven 项目提供了一级支持。它读取项目的 `pom.xml` 文件，解析它，并识别所有依赖项，包括传递依赖项。然后以图形方式显示这些依赖项，使用户能够可视化项目。
