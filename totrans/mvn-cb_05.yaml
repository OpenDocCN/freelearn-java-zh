- en: Chapter 5. Dependency Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the scope of dependency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a report of dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting into dependency and avoiding dependency hell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading dependencies into a folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SNAPSHOT dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling dependency download errors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting unused/undeclared dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manually installing dependencies that are not available in a repository
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management using Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management using NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management using IntelliJ IDEA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the powerful features of Maven is managing the dependencies required
    by the project. It is rare for a project to be developed without using other dependencies.
    The typical issues in using dependencies relate to the number and choice of dependencies,
    their versions, and the transitive dependencies (a project dependency, in turn,
    being dependent on other dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: Maven has a way of managing the dependencies, as well as providing users with
    enough flexibility to handle complexities, as they arise.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the scope of dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We may use a dependency for many reasons. Some of them may be required to compile
    and run the projects. There might be others only to run tests (for instance, `junit`).
    Then there may be dependencies that are required at runtime, say `logback`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to choose the scope of the dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Maven project we had created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe the following section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove the preceding lines of code and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe that it runs without any issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Java source code `App.java` did not have any dependency. Only the source
    classes were compiled by `mvn` and thus, the command ran without any error.
  prefs: []
  type: TYPE_NORMAL
- en: The test code `AppTest.java` required the `junit` library to build. This is
    declared in the import statement in the code. The `mvn` test tried to compile
    the test classes, and as it did not find the dependency, it failed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following information needs to be specified to declare a dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding three elements uniquely identify the dependency.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fourth piece of information is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By default, the `scope` is `compile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are six different dependency scopes available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`compile`: This dependency is required for compilation. This automatically
    means it is required for testing as well as runtime (when the project is run).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This dependency is only required for tests. This means the dependency
    is typically in the test code. As the test code is not used to run the project,
    these dependencies are not required for runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`runtime`: These dependencies are not required during compilation, but only
    required to run the project. One example would be the `logback` dependency if
    you are using **Simple Logging Facade for Java** (**slf4j**) to log and want to
    use `logback` binding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`provided`: This tells Maven that dependency is required for compilation and
    runtime, but this dependency need not be packaged with the package for distribution.
    The dependency will be provided by the user. An example of this dependency is
    `servlet-api`. Typically, application servers have these libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`system`: This is similar to the provided scope. Here, we need to explicitly
    provide the location of the JAR file. It is not looked up from the repository.
    This may be useful to specify a dependency that is not present in the repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`import`: This is only used on a dependency of the `pom` type in the `dependencyManagement`
    section. It indicates that the specified pom should be replaced with the dependencies
    in that pom''s `dependencyManagement` section. This is intended to centralize
    dependencies of large multi-module projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Manually installing dependencies that are not available in a repository*
    recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a report of dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is useful to get a list of dependencies for a Maven project in order to identify
    and troubleshoot problems. The Maven Dependency plugin helps us here.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To appreciate this, we need to have a fairly complex project that has several
    transitive dependencies. You can look at one such project at [https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid).
  prefs: []
  type: TYPE_NORMAL
- en: The project source code is available as a Git repository. A Git repository is
    typically downloaded by cloning it. To do this, install Git on your system. Refer
    to the Git setup link ([https://help.github.com/articles/set-up-git/](https://help.github.com/articles/set-up-git/))
    for detailed instructions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps, to get a list of dependencies for a Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: Clone the open source project `demoproject-selendroid`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following Maven goal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output as shown in the following screenshot:![How to do it...](img/6124OS_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Dependency plugin has several goals to obtain information regarding
    dependencies as well as manage them.
  prefs: []
  type: TYPE_NORMAL
- en: Interestingly, this goal is not bound to any phase or lifecycle of Maven. This
    means, when the `mvn dependency:list` command is run, Maven runs the `list` goal
    and nothing else.
  prefs: []
  type: TYPE_NORMAL
- en: The `dependency:list` parameter tells Maven to run the `list` goal of the Maven
    Dependency plugin. This analyzes the pom file and generates a list of dependencies
    for the project.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the dependency list might be good enough for simple cases, a more interesting
    and useful one would be a dependency report in a tree format.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by running the `tree` goal of Maven Dependency plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Running this on the preceding project gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, this is a better representation of the transitivity of the dependencies.
    Now we know that which other dependencies are used, for instance, `commons-logging`.
  prefs: []
  type: TYPE_NORMAL
- en: Getting into dependency and avoiding dependency hell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you use a number of dependencies, each of them in turn may also include further
    dependencies. A situation may come when there are multiple versions of the same
    dependencies in the project. This can often lead to errors.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand this, we need to have a fairly complex project that has several
    transitive dependencies. You can look at one such project at [https://github.com/selendroid/demoproject-selendroid](https://github.com/selendroid/demoproject-selendroid).
  prefs: []
  type: TYPE_NORMAL
- en: Clone the repository on your system. Now, we are ready to see how complex dependencies
    can get.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to avoid dependency hell:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the output as shown in the following screenshot:![How to do it...](img/6124OS_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As you can see, in the course of identifying the dependencies to be used in
    the project, Maven does a dependency analysis. This reveals two things:'
  prefs: []
  type: TYPE_NORMAL
- en: Two or more dependencies require the same version of another dependency. Maven
    includes a dependency only once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two or more dependencies require a different version of another dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven resolves this by supporting the *nearest definition*, which means that
    it will use the version of the dependency closest to your project in the tree
    of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: This means it will not necessarily take either the *latest* or the *oldest*
    version. It will go by the version that it finds *first* in the order of dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Where the project fails to work due to the incorrect version being used, the
    correct way to resolve is to explicitly define the desired version of the dependency
    in your pom file. By the previous strategy, this being the *nearest definition*
    will get precedence over any other versions defined in any other dependency.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven provides another way to handle the preceding scenario, namely, by using
    the `dependencyManagement` element.
  prefs: []
  type: TYPE_NORMAL
- en: This allows us to directly specify the versions of artifacts to be used when
    they are encountered in transitive dependencies or in dependencies where no version
    has been specified. In the example in the preceding section, the `guava` dependency
    was directly added to `demoproject-selendroid`, even though it was not directly
    used by the project. Instead, `demoproject-selendroid` can include `guava` as
    a dependency in its `dependencyManagement` section and directly control which
    version of `guava` is used when, or if, it is ever referenced.
  prefs: []
  type: TYPE_NORMAL
- en: There is no magic bullet to prevent dependency hell. Even if you manually manage
    the version of a library that gets included in your project by the preceding mechanism,
    it does not mean that other transitive dependencies, which depend on a different
    version of the same library, will suddenly become binary compatible with the managed
    version.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading dependencies into a folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some projects may have a requirement for all the dependencies to be made available,
    say, in a folder. This could be to archive the dependencies used in a particular
    version of the build.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to download dependencies in the `target/dependency`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: Let us open the demo project that we used in the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: See the output in the `target/dependency` folder:![How to do it...](img/6124OS_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `copy-dependencies` goal of the Maven Dependency plugin copies over all
    the dependencies used in the project, including transitive dependencies, to `target/dependency`
    folder of the project.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This goal takes several parameters to handle various use cases, such as copying
    pom files of the dependencies, copying parent poms, preserving the folder structure
    of the repository, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The folder location can be changed by passing the following argument:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The dependencies will now be copied over to the `dependencies` folder instead
    of the default `target/dependency` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The folder structure of the repository can be preserved and the poms of the
    dependencies can be copied over by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The resultant folder structure will be similar to the repository layout as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding SNAPSHOT dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Maven, a `SNAPSHOT` version is a version of the project/dependency that
    has not been released. This is indicated by suffixing `SNAPSHOT` to the version
    number. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that the project we created using the Maven archetype quickstart
    had a `SNAPSHOT` version.
  prefs: []
  type: TYPE_NORMAL
- en: The version number specified before `-SNAPSHOT` is the version that the released
    project/dependency is expected to have. So, `1.0-SNAPSHOT` indicates `1.0` is
    not released yet.
  prefs: []
  type: TYPE_NORMAL
- en: As the `SNAPSHOT` version indicates software under development, Maven deals
    with these dependencies differently.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One would rarely use the `SNAPSHOT` version of an external dependency. If you
    are developing a multi-module project in your organization, chances are you will
    use `SNAPSHOT` versions of other modules required in your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us try the following contrived example:'
  prefs: []
  type: TYPE_NORMAL
- en: Open one of the projects that we have created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to specify the repository where the dependency is available:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the following results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing you would have seen is the need to define a specific repository
    to download the dependencies. These dependencies are not available in the usual
    repositories. They reside separately in repositories called **snapshot repositories**.
    In the preceding example, we specified the snapshot repository where the desired
    dependencies were available.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing you would notice are the filenames. Each artifact that is being
    downloaded is appended with `20141107.161556-92`. This is a unique identifier
    for each `SNAPSHOT` version in the repository. This value changes each time a
    new `SNAPSHOT` version is available in the repository.
  prefs: []
  type: TYPE_NORMAL
- en: Maven treats `SNAPSHOT` versions differently from release versions.
  prefs: []
  type: TYPE_NORMAL
- en: For a release version, Maven checks if the artifact is available in the local
    repository that is already downloaded. If so, it does not attempt to fetch the
    same from the remote repositories.
  prefs: []
  type: TYPE_NORMAL
- en: For `SNAPSHOT` versions, even if the artifact is available locally, it checks
    the `SNAPSHOT` version for updates in the remote repository based on the update
    policy that can be configured.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the update interval is once a day. This means, if Maven downloads
    a `SNAPSHOT` dependency at noon today, it will check for an update to it at noon
    tomorrow and not before that, irrespective of how many times you build the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The update interval can be specified in the repository section of the pom or
    settings file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The choices are `always`, `daily` (default), `interval:X` (where `X` is an
    integer in minutes), or `never`. Let''s discuss in brief about these choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '`always`: This checks for updates for every Maven run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`daily`: This checks for updates once a day. This does not necessarily mean
    exactly 24 hours from the last check; just once a day at the start of the day.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interval:X`: This checks for updates after a specified time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In a multi-module project, it is good to set the `updatePolicy` element value
    to `always` for intermodule dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned earlier, there are separate repositories for release and snapshot
    versions. By default, snapshots are disabled for a release repository and vice
    versa. The `repository` element has separate `releases` and `snapshots` sub-elements
    where this can be specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Typically, for a release repository, `enabled` will be `false` for `snapshots`.
    For a snapshot repository, `enabled` will be `true` for `snapshots` and `false`
    for `releases`. This is so that Maven looks at the right repository for the right
    artifacts and does not unnecessarily look at the wrong repositories each time
    it needs a dependency.
  prefs: []
  type: TYPE_NORMAL
- en: The `checksumPolicy` element tells Maven what to do in case the checksum of
    the downloaded dependency does not match the actual checksum. The value of `fail`
    will stop the build with a checksum error.
  prefs: []
  type: TYPE_NORMAL
- en: Handling dependency download errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There could be situations when a dependency might not be downloaded due to network
    problems or other issues. Sometimes, the error reported by Maven might not indicate
    the problem. It is good to know how to get around this problem.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is difficult to simulate this problem in a normal scenario, but we can create
    a contrived scenario, by using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the dependency version for JUnit in our simple project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will attempt to download the dependency and fail (as the version is invalid):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the command again and observe the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the folder `3.9.1` (or the files in the folder ending with `.lastUpdated`)
    in the local repo (`.m2/repository/junit/junit/3.9.1`) and retry.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `resolution will not be attempted` error will go away and Maven will attempt
    to download the dependency again
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven first downloads the pom file of the dependency. It analyzes the pom file
    and recursively downloads the transitive dependencies specified there. It then
    downloads the actual dependency file, typically, a JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: 'When Maven fails to download an artifact, it creates a file with the same name
    as the artifact it failed to download, but suffixed with `.lastUpdated`. In the
    file, it puts information related to the download, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: When a request is made to Maven to download the dependency again, maven refers
    to the contents of this file to decide whether or not maven should reattempt.
    This is the case for release dependencies. The deletion of this file will ensure
    maven reattempts to download the dependency when asked.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen how this works for SNAPSHOT dependencies in the *Understanding
    the SNAPSHOT dependencies* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Detecting unused/undeclared dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As your project becomes large and the number of dependencies increase (including
    transitive dependencies), it is good to know if we have ended up declaring dependencies
    that we are not using, or if we are using undeclared dependencies (which are brought
    in by transitive dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to detect the unused/undeclared dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following Maven command on the `demo-selendroid` project that we used
    earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the report generated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As can be seen from the preceding report, Maven has identified a dependency
    used by the project that is not declared, for instance the `selenium-api` JAR
    file. It has also found a dependency that is declared in the pom file, but is
    not used by the project (`hamcrest-integration`). You could check if the removal
    causes any side-effect and if not, go ahead.
  prefs: []
  type: TYPE_NORMAL
- en: It is a good practice to explicitly define the dependency used in the project,
    specifying the version number instead of using it by means of a transitive dependency.
    This is because we have no control over the version or availability of this transitive
    dependency.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, in order to have better control over dependency conflicts
    that we saw earlier, it may not be a bad idea to explicitly define versions of
    dependencies that are not directly required by our project but used by our dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Manually installing dependencies that are not available in a repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There may be situations where a library, which is not present in any Maven repository,
    needs to be used. We have seen one way to use it, that is, specifying it as a
    dependency with `system` scope and explicitly specifying the path to it.
  prefs: []
  type: TYPE_NORMAL
- en: The problem with this approach is that this dependency will not be available
    if you need to distribute your project as a library.
  prefs: []
  type: TYPE_NORMAL
- en: Maven provides a mechanism to install an artifact to your local repository so
    that you can declare and use it like other dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to manually install the dependencies that aren''t available
    in a repository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following dependency to the simple project that we created earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The project will fail to compile with the error of a missing dependency
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `install-file` goal of the Maven Install plugin allows dependencies to be
    installed to the local repository. It takes `groupId`, `artifactId`, `version`,
    and `packaging` type as parameters so that it can place the dependency suitably
    in the repository as well as create a simple pom file for it.
  prefs: []
  type: TYPE_NORMAL
- en: This method is not ideal in a project with multiple developers, as each developer
    needs to perform this step manually. One way to deal with this is to install this
    dependency in a repository manager that is used by the organization. As the developers
    will be using this repository manager as a `mirror`, Maven will find the dependency
    from the `mirror` and proceed.
  prefs: []
  type: TYPE_NORMAL
- en: In such a case, we could use the `deploy` goal of the Maven deploy plugin to
    install the artifact to the remote repository.
  prefs: []
  type: TYPE_NORMAL
- en: Some remote repositories have access control. Maven allows access details to
    be specified in the `server` element. It is best to specify this in `settings.xml`
    as this file is specific to each user.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Projects with dependencies that are installed by this method are again not distributable,
    as those using them will fail to find the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'Where projects are expected to be distributed and included by others as dependencies,
    a different approach needs to be followed—the static **in-project repository**
    solution. Use the following steps to follow the in-project repository approach:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a repository inside your project by adding the following in your pom
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to install the dependency to this repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What have we achieved? Now, the dependency is packaged along with the source
    code in the `lib` folder of our project and available for distribution. This is
    transparent to the user as they do not need to do anything special to access it.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management using Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that the Eclipse IDE provides support for Maven projects and allows
    us to run Maven commands from the IDE. Let us now see how we can manage dependencies
    using Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps in Eclipse IDE to manage the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the demoproject-selendroid file in Eclipse.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Dependencies** tab as shown in the following screenshot:![How
    to do it...](img/6124OS_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new dependency can be added by clicking on the **Add…** button (see in the
    preceding screenshot for the **Add...** button):![How to do it...](img/6124OS_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, you can specify the values in the
    **Group Id:**, **Artifact Id:**, and **Version:** textboxes along with the value
    in the **Scope** dropdown. Alternately, you can search for an artifact in the
    **Enter groupId, artifactId or sha1 prefix or pattern (*):** textbox, and eclipse
    will populate the relevant columns based on your selection in the **Search Results**
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also see the dependency tree by clicking on the **Dependency Hierarchy**
    tab:![How to do it...](img/6124OS_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Eclipse has built-in support for Maven, it allows visualization of dependencies
    by parsing the pom file. It also calls various Maven commands (such as `dependency:tree`)
    internally to build the hierarchy and display the same.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We saw that users can search for and add dependencies. For this to work, navigate
    to **Windows** | **Preferences** | **Maven** and check the **Download repository
    index updates on startup** option to download indexes, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You may need to restart Eclipse for this to take effect. Also, you can enable
    the **Maven Repositories** view (see in the preceding screenshot), see the repositories,
    and also update the index as required.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management using NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Like Eclipse, NetBeans also allows dependencies to be managed and viewed through
    the IDE. Unlike Eclipse, NetBeans displays a graphical view of the dependencies
    along with additional information, which makes it easy for developers to troubleshoot
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps in the NetBeans IDE to manage the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `demoproject-selendroid` file in NetBeans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `pom.xml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Graph** tab:![How to do it...](img/6124OS_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover over one of the dependencies in red (**commons-codec**):![How to do it...](img/6124OS_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover over one of the dependencies in orange (**httpclient**):![How to do it...](img/6124OS_05_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans creates a graph of all the project dependencies and displays the same.
    It colors the dependencies that have conflicts in red and those that have warnings
    in orange. On hovering, NetBeans displays details of the issues.
  prefs: []
  type: TYPE_NORMAL
- en: This allows the user to take suitable action.
  prefs: []
  type: TYPE_NORMAL
- en: Dependency management using IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike Eclipse and NetBeans, viewing dependencies as graphs is only possible
    in the IntelliJ IDEA Ultimate version, which is commercial. The Community Edition
    does not support this option.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps in IntelliJ Idea Ultimate version to manage the dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `demoproject-selendroid` file in the IntelliJ IDEA Ultimate edition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `pom.xml` file.![How to do it...](img/6124OS_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Show Dependencies...** option (See this option in the preceding
    screenshot) and observe the following screenshot:![How to do it...](img/6124OS_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IntelliJ IDEA has first-class support for Maven projects. It reads the `pom.xml`
    file of the project, parses it, and identifies all the dependencies, including
    transitive dependencies. It then displays the same in a graphical manner, allowing
    users to visualize the project.
  prefs: []
  type: TYPE_NORMAL
