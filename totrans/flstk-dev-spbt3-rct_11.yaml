- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introduction to TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces TypeScript. We will cover the basic skills that are
    required to use TypeScript with React and create our first React app with TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using TypeScript features with React
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a React app with TypeScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For our work, React version 18 or higher will be required.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find more resources at the GitHub link for this chapter: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter09).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**TypeScript** ([https://www.typescriptlang.org/](https://www.typescriptlang.org/))
    is a strongly typed superset of JavaScript, developed by Microsoft. TypeScript
    adoption has grown a lot in recent years and it is widely used in the industry.
    It has an active development community and is supported by most popular libraries.
    In the JetBrains 2022 Developer Ecosystem report, TypeScript was named the fastest-growing
    programming language ([https://www.jetbrains.com/lp/devecosystem-2022/](https://www.jetbrains.com/lp/devecosystem-2022/)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript offers several advantages compared to JavaScript, mostly due to
    strong typing:'
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript allows you to define **types** for variables, functions, and classes.
    This allows you to catch errors early in the development process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript improves the scalability of your app, as well as making your code
    easier to maintain.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TypeScript improves code readability and makes your code more self-documenting.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compared to JavaScript, the TypeScript learning curve can be steeper if you
    are not familiar with static typing.
  prefs: []
  type: TYPE_NORMAL
- en: The easiest way to try TypeScript is to use an online environment such as *TypeScript
    Playground* ([https://www.typescriptlang.org/play](https://www.typescriptlang.org/play)).
    If you want to code TypeScript locally, you can install the TypeScript compiler
    on your computer using `npm`. This will not be needed for our React project because
    Vite comes with built-in TypeScript support. TypeScript is transpiled to plain
    JavaScript and can then be executed in a JavaScript engine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `npm` command installs the latest version of TypeScript globally,
    allowing you to use TypeScript anywhere in your terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can check the installation by checking the TypeScript version number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Windows PowerShell, you might get an error stating that **running
    scripts is disabled on this system**. In this case, you have to change the execution
    policy to be able to run the installation command. You can read more at [https://go.microsoft.com/fwlink/?LinkID=135170](https://go.microsoft.com/fwlink/?LinkID=135170).
  prefs: []
  type: TYPE_NORMAL
- en: Like JavaScript, TypeScript has good IDE support that makes your coding more
    productive, with features like linting and code autocompletion – for example,
    IntelliSense in Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Common types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'TypeScript will automatically define the type of a variable when you initialize
    it. This is called **type inference**. In the following example, we declare a
    `message` variable and assign it to a string value. If we try to reassign it with
    another type, we get an error, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Type inference'
  prefs: []
  type: TYPE_NORMAL
- en: 'TypeScript has the following primitive types: `string`, `number`, and `boolean`.
    The `number` type represents both integer and floating-point numbers. You can
    also set an explicit type for a variable using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code demonstrates explicit typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The variables’ types can be checked using the `typeof` keyword, which returns
    a string representing the type of the variable it is applied to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t know the type of a variable, you can use the `unknown` type. It
    can be used when you get a value, for example, from some external source, and
    you don’t know its type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When a value is assigned to the unknown variable, you can check the type using
    the `typeof` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: TypeScript also provides the `any` type. If you define a variable using the
    `any` type, TypeScript doesn’t perform a type check or inference on that variable.
    You should avoid using the `any` type whenever possible, since it negates the
    effectiveness of TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: '**Arrays** can be declared in the same way as in JavaScript, but you have to
    define the type of the elements in the array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use the `Array` generic type (`Array<TypeOfElement>`) in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Type inference also works with objects. If you create the following object,
    TypeScript creates an object with these inferred types: `id: number`, `name: string`,
    and `email: string`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also define an object using the `interface` or `type` keyword, which
    describes the object’s shape. The `type` and `interface` are quite similar, and
    most of the time you are free to choose which one you use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can declare an object that conforms to the `Student` interface or
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more about the difference between `type` and `interface` in the
    TypeScript documentation: [https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces](https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, if you try to create an object that doesn’t match the interface or type,
    you will get an error. In the next image, we create an object where the `id` property
    value is `string`, but it is defined as `number` in the interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define optional properties by using the question mark (`?`) at the
    end of the property name. In the following example, we mark `email` to be optional.
    Now, you can create a student object without an email because it is an optional
    property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The **optional chaining operator** (`?.`) can be used to safely access object
    properties and methods that can be `null` or `undefined` without causing an error.
    It is really useful with optional properties. Let’s look at the following type,
    where `address` is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create an object based on the `Person` type that doesn’t have the `address`
    property defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you try to access the `address` property, an error is thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'However, if you use optional chaining, the value `undefined` is printed to
    the console and an error is not thrown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'There are also many ways to compose types in TypeScript. You can use the `|`
    operator to create a **union type**, a type that handles different types. For
    example, the following example defines a type that can contain a string or number:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also use union types to define sets of strings or numbers, as shown
    in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can use our union types in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If you create a new `Car` object and try to assign some other value than what
    is defined in the `Fuel` or `NoOfGears` union types, you will get an error.
  prefs: []
  type: TYPE_NORMAL
- en: Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you define functions, you can set parameter types in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'If you now try to call the function using a different parameter type, you will
    get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Function call'
  prefs: []
  type: TYPE_NORMAL
- en: 'If a function parameter type is not defined, it implicitly has an `any` type.
    You can also use union types in function parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'A function’s return type can be declared in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Arrow functions work in the same way in TypeScript, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'If the arrow function returns nothing, you can use the `void` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Now, you have encountered some TypeScript basics, and we will learn how to apply
    these new skills in our React apps.
  prefs: []
  type: TYPE_NORMAL
- en: Using TypeScript features with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: TypeScript is a valuable addition to your React projects, especially when they
    grow in complexity. In this section, we will learn how we can get prop and state
    type validation in our React components and detect potential errors early in development.
  prefs: []
  type: TYPE_NORMAL
- en: State and props
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In React, you have to define the type of component props. We have already learned
    that component props are JavaScript objects, so we can use `type` or `interface`
    to define the prop type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at one example where a component receives a `name` (`string`) and
    `age` (`number`) prop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can render our `HelloComponent` and pass props to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'If we use TypeScript, we can first create a `type` that describes our props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we can use our `HelloProps` type in the component props:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we pass props using the wrong type, we will get an error. This is great
    because, now, we can catch potential errors in the development phase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Typing props'
  prefs: []
  type: TYPE_NORMAL
- en: If we had used JavaScript instead, we wouldn’t have seen an error in this phase.
    In JavaScript, if we had passed a string as the `age` prop instead of a number,
    it would still have worked, but we might have encountered unexpected behavior
    or errors if we had tried to perform numerical operations on it later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'If there are optional props, you can mark these using the question mark in
    your type where you define the props – for example, if `age` is optional:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can use your component with or without `age` props.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to pass a function using the props, you can define it in your `type`
    using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Quite often, you will want to use the same `type` in multiple files in your
    app. In that case, it is a good practice to extract types into their own file
    and export them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can import the type into any component where you need it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'As we touched on in *Chapter 8*, you can also use the arrow function to create
    a functional component. There is a standard React type, `FC` (**function component**),
    that we can use with arrow functions. This type takes a generic argument that
    specifies the prop type, which is `HelloProps` in our case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have learned how to define prop types in your React app, so we will
    move on to states. When you create states using the `useState` hook we learned
    about in *Chapter 8*, type inference handles typing when you are using common
    primitive types. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'If you try to update the state using a different type, you will get an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Typing state'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also explicitly define state types. You have to do this if you want
    to initialize your state to `null` or `undefined`. In this case, you can use the
    union operator, and the syntax is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a complex state, you can use a `type` or `interface`. In the following
    example, we create a type that describes a user. Then, we create a state and initialize
    it with an empty `User` object. If you want to allow `null` values, you can use
    a union to allow either a `User` object or a `null` value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *Chapter 8*, we learned how to read user input in a React app. We used the
    input element’s `onChange` event handler to save typed data to the state. When
    using TypeScript, we have to define the types of events. In the following screenshot,
    you can see that we get an error if types are not defined:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Typing events'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how we can handle an input element’s change event. Let’s see one
    example where the input element code in the `return` statement looks like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The event handler function is called when the user types something into the
    input element, and the code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have to define the type of the event. For this, we can use the predefined
    `React.ChangeEvent` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read the complete list of event types in the React TypeScript CheatSheet:
    [https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forms_and_events/](https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forms_and_events/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to handle a change event on an input element, so the type is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The form submission handler function handles the form submission. This function
    should take an event parameter of the type `React.FormEvent<HTMLFormElement>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Now, we know how to handle events when using TypeScript in our React apps. Next,
    we will learn how to actually create a React app that uses TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React app with TypeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create a React app using Vite, and we will use TypeScript instead
    of JavaScript. We will use TypeScript later when we develop the frontend for our
    car backend. As we mentioned earlier, Vite comes with built-in TypeScript support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new React app using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, name your project `tsapp`, and select the **React** framework and the
    **TypeScript** variant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_09_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: React TypeScript app'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, move to your app folder, install dependencies, and run your app using
    the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open your app folder in VS Code, and you will see that the filename of our `App`
    component is `App.tsx`:![](img/B19818_09_08.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.8: App.tsx'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The file extension of TypeScript React files is `.tsx` (combining JSX with TypeScript).
    The regular file extension of TypeScript files is `.ts`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Locate the `tsconfig.json` file in the root of your project. This is a configuration
    file used by TypeScript to specify compiler options, such as the target version
    of the compiled JavaScript output or the module system that is used. We can use
    the default settings defined by Vite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s create the React app that we used as an example in an earlier section,
    when we defined types for events. The user can enter a name, and when the button
    is pressed, a hello message is shown using an alert:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'First, we will remove the code from the `App.tsx` file’s return statement and
    leave only fragments. After also removing all unused imports (except the `useState`
    import), your code should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create a `state` to store the value that the user enters into the input
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, add two input elements to the `return` statement, one that collects
    user input and another that submits the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create the event handler functions, `handleSubmit` and `handleChange`.
    Now, we also have to define the types of the events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the app using the `npm run dev` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Try typing your name into the input element and pressing the **Submit** button.
    You should see the hello message showing your name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_09_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: React TypeScript app'
  prefs: []
  type: TYPE_NORMAL
- en: Vite and TypeScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Vite transpiles TypeScript files to JavaScript, but it doesn’t perform type
    checking. Vite uses **esbuild** to transpile TypeScript files because that is
    much faster than the TypeScript compiler (`tsc`).
  prefs: []
  type: TYPE_NORMAL
- en: The VS Code IDE handles type checking for us, and you should fix all errors
    that are shown in the IDE. You can also use a Vite plugin called `vite-plugin-checker`
    ([https://github.com/fi3ework/vite-plugin-checker](https://github.com/fi3ework/vite-plugin-checker)).
    Type checking is done when we build a Vite app to production, and all errors should
    be fixed before the production build. We will build our Vite app later in this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started to learn TypeScript and how to use it in our React
    apps. Now, we know how to use common types in TypeScript and how to define types
    for React component props and states. We also learned to define types for events,
    and created our first React app with TypeScript using Vite.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on networking with React. We will also use
    the GitHub REST API to learn how to consume a RESTful web service with React.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is TypeScript?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define variable types?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define types in functions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define types for React props and states?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we define types for events?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do we create a React TypeScript app using Vite?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some other useful resources for learning about React with TypeScript:'
  prefs: []
  type: TYPE_NORMAL
- en: React TypeScript Cheatsheets ([https://react-typescript-cheatsheet.netlify.app/](https://react-typescript-cheatsheet.netlify.app/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Learn React with TypeScript, Second Edition*, by Carl Rippon ([https://www.packtpub.com/product/learn-react-with-typescript-second-edition/9781804614204](https://www.packtpub.com/product/learn-react-with-typescript-second-edition/9781804614204))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering TypeScript*, by Nathan Rozentals ([https://www.packtpub.com/product/mastering-typescript-fourth-edition/9781800564732](https://www.packtpub.com/product/mastering-typescript-fourth-edition/9781800564732))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
