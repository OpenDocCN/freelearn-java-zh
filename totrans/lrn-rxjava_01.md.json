["```java\napply plugin: 'java'\n\nsourceCompatibility = 1.8\n\nrepositories {\n      mavenCentral()\n}\n\ndependencies {\n      compile 'io.reactivex.rxjava2:rxjava:x.y.z'\n}\n\n```", "```java\n<project>\n  <modelVersion>4.0.0</modelVersion>\n    <groupId>org.nield</groupId>\n    <artifactId>mavenrxtest</artifactId>\n    <version>1.0</version>\n  <dependencies>\n    <dependency>\n     <groupId>io.reactivex.rxjava2</groupId>\n     <artifactId>rxjava</artifactId>\n     <version>x.y.z</version>\n    </dependency>\n  </dependencies>\n</project>\n\n```", "```java\nimport io.reactivex.Observable;\npublic class Launcher {\n      public static void main(String[] args) {\n        Observable<String> myStrings =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n      }\n}\n\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n      public static void main(String[] args)  {\n        Observable<String> myStrings =\n          Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \n\"Epsilon\");\n\n        myStrings.subscribe(s -> System.out.println(s));\n      }\n}\n\n```", "```java\n    Alpha \n    Beta \n    Gamma \n    Delta \n    Epsilon\n```", "```java\nimport io.reactivex.Observable;\n\npublic class Launcher {\n public static void main(String[] args) {\n\n   Observable<String> myStrings =\n     Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\",\n      \"Epsilon\");\n\n     myStrings.map(s -> s.length()).subscribe(s -> \n     System.out.println(s));\n  }\n}\n```", "```java\n    5\n    4\n    5\n    5\n    7\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n      public static void main(String[] args) {\n        Observable<Long> secondIntervals =\n          Observable.interval(1, TimeUnit.SECONDS);\n\n        secondIntervals.subscribe(s -> System.out.println(s));\n\n        /* Hold main thread for 5 seconds\n        so Observable above has chance to fire */\n        sleep(5000);\n      }\n\n      public static void sleep(long millis) {\n        try {\n          Thread.sleep(millis);\n        } catch (InterruptedException e) {\n          e.printStackTrace();\n        }\n      }\n}\n\n```", "```java\n0 \n1 \n2 \n3 \n4 \n```"]