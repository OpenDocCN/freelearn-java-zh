- en: 2\. Learning the Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be executing programs that do not have the typical
    linear flow that we have seen so far. You will first learn to use if, else, else
    if, and switch-case statements to control the flow of your programs. You will
    practice running for, while, and do-while loops in order to perform repetitive
    tasks in Java, and how to pass command-line arguments to modify how programs run.
    By the end of this chapter, you will be able to implement immutable, static (global)
    variables, alongside Java's variable type inference mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business applications have lots of special-case conditions. Such conditions
    may include finding changes in allocation rules starting at a particular year,
    or handling different types of employees differently based on their designation.
    To code for such special cases, you will require conditional logic. You basically
    tell the computer to perform a set of actions when a particular condition is met.
  prefs: []
  type: TYPE_NORMAL
- en: Before we delve into advanced Java topics, you need to know the basics of Java
    syntax. While some of this material might seem simple, you'll find you need to
    use the techniques and syntax shown in this chapter repeatedly in your applications.
  prefs: []
  type: TYPE_NORMAL
- en: As you've seen in *Chapter 1*, *Getting Started*, Java's syntax borrows heavily
    from C and C++. That's true for conditional statements that control the flow of
    your programs as well. Java, like most computer languages, allows you to do this.
    This chapter covers the basic syntax of the Java language, especially ways in
    which you can control the flow of your applications.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter, and the next one on object-oriented programming, will give you
    a good working knowledge of how Java programs work. You'll be able to take on
    more advanced APIs and topics. Work your way through this basic material, and
    you will be ready to move on to the more complex code to come.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Flow of Your Programs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine paying a bill from your e-wallet. You will only be able to make the
    payment if the credit balance in your e-wallet is greater than or equal to the
    bill amount. The following flowchart shows a simple logic that can be implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: A representative flow chart for an if-else statement'
  prefs: []
  type: TYPE_NORMAL
- en: Here, the credit amount dictates the course of action of the program. To facilitate
    such scenarios, Java uses the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: With the `if` statement, your application will execute a block of code *if*
    (and only if) a particular condition is true. In the following code, if the `happy`
    variable is `true`, then the block of code immediately following the `if` statement
    will execute. If the `happy` variable is not `true`, then the block of code immediately
    following the `if` statement will not execute.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 1: Creating a Basic if Statement'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most software industries, you are only working on a module of the code,
    and you might already know the value stored in a variable. You can use `if` statements
    and `print` statements in such cases. In this exercise, use an `if` statement
    to check if the values of variables assigned are `true` or `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory for examples from this chapter and others. Name the folder
    `sources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In IntelliJ, select `File` -> `New` -> `Project` from the `File` menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `New Project` dialog box, select a `Java` project. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box to create the project from a template. Click on `Command Line
    App`. Click on `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `chapter02`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the project location, click the button with three dots (`…`) and then select
    the `sources` folder you created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the base package name so that this entry is left blank. You will use
    Java packages in the *Chapter 6*, *Libraries, Packages, and Modules*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'IntelliJ will create a project named `chapter02`, as well as a `src` folder
    inside `chapter02`. This is where your Java code will reside. IntelliJ also creates
    a class named `Main`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rename the class named `Main` to `Exercise01`. (We're going to create a lot
    of small examples in this chapter.)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click in the text editor window on the word `Main` and then right-click
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the contextual menu, select `Refactor` | `Rename…`, enter `Exercise01`,
    and then press `Enter`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Within the `main()` method, define two Boolean variables, `happy` and `sad`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create two `if` statements, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final code should look similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click the green arrow that is just to the left of the text editor window that
    points at the class name `Exercise01`. Select the first menu choice, `Run` `Exercise01.main()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The line `I am happy.` comes from the first `if` statement, since the `happy`
    Boolean variable is true.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the second `if` statement does not execute, because the `sad` Boolean
    variable is false.
  prefs: []
  type: TYPE_NORMAL
- en: 'You almost always want to use curly braces to define the code block following
    an `if` condition. If you don''t, you may find odd errors in your programs. For
    example, in the following code, the second statement, which sets the `i` variable
    to zero, will always get executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike languages such as Python, indentation doesn''t count in Java. The following
    shows what will actually execute with greater clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The last line is always executed because it is outside the `if` statement after
    the curly braces closes.
  prefs: []
  type: TYPE_NORMAL
- en: Comparison Operators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to Java''s Booleans, you can use comparisons in conditional statements.
    These comparisons must form a Boolean expression that resolves to `true` or `false`.
    Comparison operators allow you to build Boolean expressions by comparing values.
    Java''s main comparison operators include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: The comparison operators in Java'
  prefs: []
  type: TYPE_NORMAL
- en: The comparison operators such as `==` do not work the way you would expect for
    textual values. See the *Comparing Strings* section later in this chapter to see
    how to compare text values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A single equals sign, `=`, is used to assign a value. Two equals signs, `==`,
    is used to compare values. Therefore, generally, you never use `=` in a Boolean
    expression to check a condition.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Using Java Comparison Operators'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An online retail store provides free delivery only if the destination is within
    a 10-kilometer (km) radius of the store. Given the distance between the nearest
    store location and home, we can code this business logic with comparison operators:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Project` pane in IntelliJ, right-click on the folder named `src`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose `New` -> `Java Class` from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Exercise02` for the name of the new class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the method named `main()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the `main()` method, define the variables we''ll use for comparisons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following `if` statements after the variable declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The final code should look similar to the following: [https://packt.live/32Ca9YS](https://packt.live/32Ca9YS)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise02` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Nested if Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nesting implies embedding a construct within another code construct. You can
    nest `if` statements within any block of code, including the block of code that
    follows an `if` statement. Here is an example of how the logic in a nested `if`
    statement is evaluated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: A representative flow chart for a nested if-else statement'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Implementing a Nested if Statement'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following exercise, we will nest an `if` statement within another `if`
    statement to check if the speed of the vehicle is above the speed limit, and if
    so, whether it is above the finable speed:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise03`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the `speed`, `speedForFine`, and `maxSpeed` variables with the values
    of `75`, `70`, and `60` respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a nested `if` statement, where the outer `if` statement checks if the
    speed is greater than or equal to the maximum speed limit, and the inner loop
    checks if the speed is greater than or equal to the speed limit for a fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `Exercise03` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try changing the value of speed in the code and then running the program again.
    You will see how different speed values produce different outputs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Branching Two Ways with if and else
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `else` statement following the code block for an `if` statement gets executed
    if the `if` statement condition is not true. You can also use `else if` statements
    to provide for an additional test.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The third line (in the `else` block) will only print if neither of the first
    two lines (the `if` or `else if` code blocks) was true. Whatever the value of
    speed, only one of the lines will print.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Using if and else Statements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A fair-trade coffee roaster offers a discount of 10% if you order more than
    5 kg of whole coffee beans, and a discount of 15% if you order more than 50 kg.
    We''ll code these business rules using `if`, `else if`, and `else` statements:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise04`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the `main` method and declare the variables as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following `if`, `else if`, and `else` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that we check against the largest threshold first. The reason for this
    is that a value greater than or equal to `largeThreshold` will also be greater
    than or equal to `mediumThreshold`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The full source code for this exercise can be found at: [https://packt.live/33UTu35](https://packt.live/33UTu35).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise04` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Run** window, you''ll see the path to your Java program, and then
    the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using Complex Conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Java allows you to create complex conditional statements with logical operators.
    Logical operators are generally used on only Boolean values. Here are some of
    the logical operators available in Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AND (&&)`: `a` && `b` will be evaluated to `true` if both a and b are `true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OR (||)`: `a` || `b` will be evaluated to `true` if either a or b, or both
    are `true`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NOT (!)`: `!a` be evaluated to true if `a` is `false`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the conditional operators to check more than one condition in an `if` statement.
    For example, the following shows an `if` statement where both conditions must
    be true for the overall `if` statement to execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the overall expression resolves to `false`, since the `blue` variable
    is false, and the `print` statement will not execute.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Always use parentheses to make your conditionals clear by grouping the conditions
    together.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check if either, or both, of the expressions are true with the
    `||` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, the overall expression resolves to true, since at least one part
    is true. Therefore, the `print` statement will execute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The value of `blue` is initialized to `false`. Since we are checking the NOT
    of the blue variable in the `if` statement, the `print` statement will execute.
    The following exercise shows how we can use logical operators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 5: Using Logical Operators to Create Complex Conditionals'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise shows an example of each of the conditional operators previously
    described. You are writing an application that works with data from a fitness
    tracker. To accomplish this, you need to code a check against normal heart rates
    during exercise.
  prefs: []
  type: TYPE_NORMAL
- en: If a person is 30 years old, a normal heart rate should be between 95 beats
    per minute (bpm) and 162 bpm. If the person is 60 years old, a normal heart rate
    should be between 80 and 136 bpm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following steps for completion:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise05`
    in the `main` method and declare variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an `if` statement to check the heart rate of a 30-year old person:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have nested conditionals to check the allowable range for 30-year-olds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create an `else if` statement to check the heart rate of a 60-year old person:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have nested conditionals to check the allowable range for 60-year-olds.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise05` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change `age` to `60` and re-run the program; your output should be as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The full source code for this exercise can be found at: [https://packt.live/2W3YAHs](https://packt.live/2W3YAHs).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Arithmetic Operators in an if Condition
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use arithmetic operators as well in Boolean expressions, as shown in
    `Example01.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The output in this case would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Here, the value of `(x + y)` is calculated, and then the result is compared
    to `5`. So, since the result of `x` added to `y` is `3`, which is less than `5`,
    the condition holds true. Therefore, the `print` statement is executed. Now that
    we have seen the variations of the `if else` statement, we will now see how we
    can use the ternary operator to express the `if else` statements.
  prefs: []
  type: TYPE_NORMAL
- en: The Ternary Operator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java allows a short-hand version of an `if else` statement, using the ternary
    (or three-part) operator, `?:`. This is often used when checking variables against
    an allowed maximum (or minimum) value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic format is: *Boolean expression* `?` *true block* `:` *false block*,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The JVM resolves the `(x > max)` Boolean expression. If true, then the expression
    returns the value immediately after the question mark. In this case, that value
    will be set into the `x` variable since the line of code starts with an assignment,
    `x =`. If the expression resolves to false, then the value after the colon, `:`,
    is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 6: Using the Ternary Operator'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Consider the minimum height requirement for a roller coaster to be 121 centimeters
    (cm). In this exercise, we will check for this condition using the ternary operator.
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise06`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare and assign values to the `height` and `minHeight` variables. Also,
    declare a string variable to print the output message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the ternary operator to check the minimum height requirement and set the
    value of `result`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So, if height is greater than `minHeight`, the first statement will be returned
    (`You are allowed on the ride`). Otherwise, the second statement will be returned
    (`Sorry you do not meet the height requirements`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your code should look similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `Exercise06` program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Equality Can Be Tricky
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java decimal types such as `float` and `double` (and the object versions, `Float`
    and `Double`) are not stored in memory in a way that works with regular equality
    checks.
  prefs: []
  type: TYPE_NORMAL
- en: When comparing decimal values, you normally need to define a value that represents
    what you think is close enough. For example, if two values are within *.001* of
    each other, then you may feel that is close enough to consider the values as equal.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7: Comparing Decimal Values'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you''ll run a program that checks if two double values are
    close enough to be considered equal:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise07`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Math.abs()` method returns the absolute value of the input, making sure
    the input is positive.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will learn more about the `Math` package in *Chapter 6*, *Libraries, Packages,
    and Modules*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise07` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the run window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how `a` and `b` differ due to the internal storage for the double type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more on how Java represents floating-point numbers, see [https://packt.live/2VZdaQy](https://packt.live/2VZdaQy).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Comparing Strings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You cannot use `==` to compare two strings in Java. Instead, you need to use
    the `String` class'' `equals` method. This is because `==` with `String` objects
    just checks whether they are the exact same object. What you''ll normally want
    is to check if the string values are equal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `equals` method on a `String` object called `cat` returns true if the passed-in
    `String`, `dog`, has the same value as the first `String`. In this case, these
    two strings differ. So, the Boolean expression will resolve to false.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use literal strings in Java, delineating these strings with double
    quotes. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: This case compares a `String` variable named `dog` with the literal string `"dog"`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Example09` shows how to call the equals method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Using switch Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `switch` statement is similar to a group of nested `if`-`else`-`if` statements.
    With `switch`, you can choose from a group of values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: With the `switch` keyword, you place the variable to be checked. In this case,
    we're checking a variable called `season`. Each case statement represents one
    possible value for the `switch` variable (season). If the value of season is `3`,
    then the `case` statement that matches will be executed, setting the `message`
    variable to the String `Fall`. The `break` statement ends the execution for that
    case.
  prefs: []
  type: TYPE_NORMAL
- en: The `default` statement is used as a catch-all for any unexpected value that
    doesn't match the defined cases. The best practice is to always include a `default`
    statement. Let's see how to implement this logic in a program.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 8: Using switch'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you''ll run a program that maps a number to a season:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise08`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter in the `main()` method and set up these variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enter the following `switch` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And enter a `println` statement to show us the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can find the code for this exercise here: [https://packt.live/35WXm58](https://packt.live/35WXm58).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise08` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Because the `season` variable is set to `3`, Java executes the `case` with `3`
    as the value, so in this case, setting the `message` variable to `Fall`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There is no one rule for when to use a `switch` statement as opposed to a series
    of `if`-`else` statements. In many cases, your choice will be based on the clarity
    of the code. In addition, `switch` statements are limited in only having cases
    that hold a single value, while `if` statements can test much more complicated
    conditions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Normally, you'll put a `break` statement after the code for a particular case.
    You don't have to. The code will keep executing from the start of the `case` until
    the next `break` statement. This allows you to treat multiple conditions similarly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 9: Allowing Cases to Fall Through'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will determine a temperature adjustment for the porridge
    in *Goldilocks and the Three Bears*. If the porridge is too hot, for example,
    you''ll need to reduce the temperature. If it''s too cold, raise the temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise09`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter in the `main()` method and set up these variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, enter the following `switch` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Print out the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `Exercise09` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the run window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Look carefully at the `switch` statement. If the value of the taste variable
    is too cold, then increment the temperature by 1\. If the value is too hot, decrement
    the temperature by 1\. But notice there is no break statement, so the code keeps
    executing and adjusts the temperature down by another 1\. This implies that if
    the porridge is too hot, the temperature is decremented by 1\. If it's way too
    hot, it's decremented by 2\. If the porridge is just right, there is no adjustment.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Starting with Java 7, you can use Strings in switch statements. Prior to Java
    7, you could not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Java 12 Enhanced switch Statements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java 12 offers a new form of the `switch` statement. Aimed at `switch` statements
    that are essentially used to determine the value of a variable, the new `switch`
    syntax allows you to assign a variable containing the result of the `switch`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new syntax looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This `switch` syntax does not use break statements. Instead, for a given case,
    only the code block after `->` gets executed. The value from that code block is
    then returned as the value from the switch statement.
  prefs: []
  type: TYPE_NORMAL
- en: We can rewrite the `Exercise09` example using the new syntax, as shown in the
    following exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ needs a configuration to support Java 12 `switch` statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10: Using Java 12 switch Statements'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will work on the same example as in the previous exercise.
    This time, though, we will implement the new switch case syntax that is made available
    by Java 12\. Before we start with the program there, you''ll have to make changes
    to the IntelliJ configuration. We will set that up in the initial few steps of
    the exercise:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `Run` menu, select `Edit` Configurations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Edit` Templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Application`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the `VM` options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click `OK`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This turns on the IntelliJ support for Java 12 enhanced switch statements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise10`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter in the `main()` method and set up this variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a `switch` statement as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note the semi-colon after `switch`. Remember, we are assigning a variable to
    a value with the whole statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then print out the value chosen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run this example, you should see the same output as in the previous
    example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The full code is as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Looping and Performing Repetitive Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we cover using loops to perform repetitive tasks. The main
    types of loop are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do-while` loops'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for` loops repeat a block a set number of times. Use a `for` loop when you
    are sure how many iterations you want. A newer form of the `for` loop iterates
    over each item in a collection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loops execute a block while a given condition is true. When the condition
    becomes false, the `while` loop stops. Similarly, `do-while` loops execute a block
    and then check a condition. If true, the `do-while` loop runs the next iteration.'
  prefs: []
  type: TYPE_NORMAL
- en: Use `while` loops if you are unsure how many iterations are required. For example,
    when searching through data to find a particular element, you normally want to
    stop when you find it.
  prefs: []
  type: TYPE_NORMAL
- en: Use a `do-while` loop if you always want to execute the block and only then
    check if another iteration is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Looping with the for Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `for` loop executes the same block of code for a given number of times. The
    syntax comes from the C language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: Each part is separated by a semicolon, (`;`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `set up` part gets executed at the beginning of the entire for loop. It
    runs once.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `boolean expression` is examined at each iteration, including the first.
    So long as this resolves to true, the loop will execute another iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `how to increment` part defines how you want a loop variable to increment.
    Typically, you'll add one for each increment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following exercise will implement a classic for loop in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Using a Classic for Loop'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will run a `for` loop for four iterations, using the classic
    for loop syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise11`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method and the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run the `Exercise11` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how the program executes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int i = 1` is the `for` loop set up part.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Boolean expression checked each iteration is `i < 5`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The how to increment part tells the `for` loop to add one to each iteration
    using the `++` operator.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each iteration, the code inside the parentheses executes. It continues like
    this until the Boolean expression stops being `true`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the old classic `for` loop, Java also offers an enhanced for
    loop designed to iterate over collections and arrays.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover arrays and collections in greater detail later in the book; for
    now, think of arrays as groups of values of the same data type stored in a single
    variable, whereas collections are groups of values of different data types stored
    in a single variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Using an Enhanced for Loop'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Iterating over the elements of arrays means that the increment value is always
    1 and the start value is always 0\. This allows Java to reduce the syntax of a
    form to iterate over arrays. In this exercise you will loop over all items in
    a `letters` array:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise12`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following array:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Chapter 4*, *Collections, Lists, and Java''s Built-In APIs*, will cover the
    array syntax in greater depth. For now, we have an array of three `String` values,
    `A`, `B`, and `C`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter an enhanced `for` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the reduced syntax of the `for` loop. Here, the variable letter iterates
    over every element in the letters array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise12` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Jumping Out of Loops with Break and Continue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `break` statement, as we saw in the `switch` examples, jumps entirely out
    of a loop. No more iterations will occur.
  prefs: []
  type: TYPE_NORMAL
- en: A `continue` statement jumps out of the current iteration of the loop. Java
    will then evaluate the loop expression for the next iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Using break and continue'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise shows how to jump out of a loop using `break`, or jump to the
    next iteration using continue:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise13`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a slightly longer array of `String` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following for loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This loop will normally iterate four times, once for each letter in the `letters`
    array. We'll change that though, with the next code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a conditional to the loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using `continue` here means that if the current letter equals `A`, then jump
    to the next iteration. None of the remaining loop code will get executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll print out the current letter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For all iterations that get here, you'll see the current letter printed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finish the `for` loop with a conditional using `break`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the value of `letter` is `C`, then the code will jump entirely out of the
    loop. And since our array of letters has another value, `D`, we'll never see that
    value at all. The loop is done when the value of letter is `C`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise13` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Exercise13.java` holds the full example:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for Exercise 13 can be found at the following link: [https://packt.live/2MDczAV](https://packt.live/2MDczAV).'
  prefs: []
  type: TYPE_NORMAL
- en: Using the while Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, you won't know in advance how many iterations you need. In that
    case, use a `while` loop instead of a `for` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `while` loop repeats so long as (or *while*) a Boolean expression resolves
    to true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Similar to a `for` loop, you'll often use a variable to count iterations. You
    don't have to do that, though. You can use any Boolean expression to control a
    `while` loop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Using a while Loop'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise implements a similar loop to *Exercise10*, which shows a `for`
    loop:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise14`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following variable setting and `while` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note how this loop increments the `i` variable by two each time. This results
    in printing odd numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise14` program using the green arrow to the left.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A common mistake is to forget to increment the variable used in your Boolean
    expression.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the do-while Loop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `do-while` loop provides a variant on the `while` loop. Instead of checking
    the condition first, the `do-while` loop checks the condition after each iteration.
    This means with a `do-while` loop, you will always have at least one iteration.
    Normally, you will only use a `do-while` loop if you are sure you want the iteration
    block to execute the first time, even if the condition is false.
  prefs: []
  type: TYPE_NORMAL
- en: One example use case for the `do-while` loop is if you are asking the user a
    set of questions and then reading the user's response. You always want to ask
    the first question.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic format is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Note the semicolon after the Boolean expression.
  prefs: []
  type: TYPE_NORMAL
- en: A `do-while` loop runs the iteration block once, and then checks the Boolean
    expression to see if the loop should run another iteration.
  prefs: []
  type: TYPE_NORMAL
- en: '`Example17.java` shows a `do-while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: This example prints out even numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use `break` and `continue` with `while` and `do`-`while` loops too.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Command-Line Arguments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command-line arguments are parameters passed to the `main()` method of your
    Java program. In each example so far, you've seen that the `main()` method takes
    in an array of `String` values. These are the command-line arguments to the program.
  prefs: []
  type: TYPE_NORMAL
- en: Command-line arguments prove their usefulness by giving you one way of providing
    inputs to your program. These inputs are part of the command line launching the
    program, when run from a Terminal shell window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15: Testing Command-Line Arguments'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise shows how to pass command-line arguments to a Java program, and
    also shows how to access those arguments from within your programs:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercises, create a new class named `Exercise15`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code uses a `for` loop to iterate over all the command-line arguments,
    which the `java` command places into the `String` array named `args`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each iteration prints out the position (`i`) of the argument and the value (`args[i]`).
    Note that Java arrays start counting positions from 0 and `args.length` holds
    the number of values in the `args` array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To run this program, we're going to take a different approach than before.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the bottom of the IntelliJ application, click on `Terminal`. This will show
    a command-line shell window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using IntelliJ for these examples, the code is stored in a folder named
    `src`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following command in the `Terminal` window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This changes to the folder with the example source code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the `javac` command to compile the Java program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command creates a file named `Exercise15.class` in the current directory.
    IntelliJ normally puts these .*class* files into a different folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, run the program with the `java` command with the parameters you want to
    pass:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In this command, `Exercise15` is the name of the Java class with the `main()`
    method, `Exercise15`. The values following `Exercise15` on the command line are
    passed to the `Exercise15` application as command-line arguments. Each argument
    is separated by a space character, so we have three arguments: *cat*, *dog*, and
    *wombat*.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first argument, at position `0` in the `args` array, is `cat`. The argument
    at position `1` is `dog`, and the argument at position `2` is `wombat`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `java` command, which runs compiled Java programs, supports a set of command-line
    arguments such as defining the available memory heap space. See the Oracle Java
    documentation at [https://packt.live/2BwqwdJ](https://packt.live/2BwqwdJ) for
    details on the command-line arguments that control the execution of your Java
    programs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Converting Command-Line Arguments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Command-line arguments appear in your Java programs as String values. In many
    cases, though, you'll want to convert these *String values* into numbers.
  prefs: []
  type: TYPE_NORMAL
- en: If you are expecting an integer value, you can use `Integer.parseInt()` to convert
    a `String` to an `int`.
  prefs: []
  type: TYPE_NORMAL
- en: If you are expecting a double value, you can use `Double.parseDouble()` to convert
    a `String` to a `double`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16: Converting String to Integers and Doubles'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise extracts command-line arguments and turns them into numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercises, create a new class named `Exercise16`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the following code to convert the first argument into an `int` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code first checks if there is a command-line argument, and then if so,
    converts the `String` value to an `int`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following code to convert the second argument into a `double` value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This code checks if there is a second command-line argument (start counting
    with 0) and if so, converts the `String` to a `double` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the `javac` command introduced in *Chapter 1*, *Getting Started*, to
    compile the Java program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command creates a file named `Exercise16.class` in the current directory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, run the program with the `java` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The values printed out have been converted from String values into numbers inside
    the program. This example does not try to catch errors, so you have to enter the
    inputs properly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Both `Integer.parseInt()` and `Double.parseDouble()` will throw `NumberFormatException`
    if the passed-in String does not hold a number. See *Chapter 5*, *Exceptions*,
    for more on exceptions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Diving Deeper into Variables — Immutability
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Immutable** objects cannot have their values modified. In Java terms, once
    an immutable object is constructed, you cannot modify the object.'
  prefs: []
  type: TYPE_NORMAL
- en: Immutability can provide a lot of advantages for the JVM, since it knows an
    immutable object cannot be modified. This can really help with garbage collection.
    When writing programs that use multiple threads, knowing an object cannot be modified
    by another thread can make your code safer.
  prefs: []
  type: TYPE_NORMAL
- en: In Java, `String` objects are immutable. While it may seem like you can assign
    a `String` to a different value, Java actually creates a new object when you try
    to change a `String`.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Final and Immutable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to immutable objects, Java provides a `final` keyword. With `final`,
    you cannot change the object reference itself. You can change the data within
    a `final` object, but you cannot change which object is referenced.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast `final` with immutable. An immutable object does not allow the data
    inside the object to change. A `final` object does not allow the object to point
    to another object.
  prefs: []
  type: TYPE_NORMAL
- en: Using Static Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *static* variable is common to all instances of a class. This differs from
    instance variables that apply to only one instance, or object, of a class. For
    example, each instance of the `Integer` class can hold a different `int` value.
    But, in the `Integer` class, `MAX_VALUE` and `MIN_VALUE` are static variables.
    These variables are defined once for all instances of integers, making them essentially
    global variables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Object-Oriented Programming*, delves into classes and objects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Static variables are often used as constants. To keep them constant, you normally
    want to define them as `final` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the names of Java constants are all uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: '`Example20.java` defines a constant, `MULTIPLY`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: Because the `MULTIPLY` constant is a final value, you will get a compilation
    error if your code attempts to change the value once set.
  prefs: []
  type: TYPE_NORMAL
- en: Using Local Variable Type Inference
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java is a statically typed language, which means each variable and each parameter
    has a defined type. As Java has provided the ability to create more complex types,
    especially related to collections, the Java syntax for variable types has gotten
    more and more complex. To help with this, Java version 10 introduced the concept
    of local variable type inference.
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, you can declare a variable of the `var` type. So long as it is fully
    clear what type the variable really should be, the Java compiler will take care
    of the details for you. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'This example creates a new `String` for the `s` variable. Even though s is
    declared with the `var` keyword, `s` really is of the `String` type. That is,
    this code is equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: With just a `String` type, this doesn't save you that much typing. When you
    get to more complex types, though, you will really appreciate the use of the `var`
    keyword.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Collections, Lists, and Java''s Built-In APIs*, covers collections,
    where you will see really complex types.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Example21.java` shows local variable type inference in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this example, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'Activity 1: Taking Input and Comparing Ranges'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are tasked with writing a program that takes a patient's blood pressure
    as input and then determines if that blood pressure is within the ideal range.
  prefs: []
  type: TYPE_NORMAL
- en: Blood pressure has two components, the systolic blood pressure and the diastolic
    blood pressure.
  prefs: []
  type: TYPE_NORMAL
- en: According to [https://packt.live/2oaVsgs](https://packt.live/2oaVsgs), the ideal
    systolic number is more than 90 and less than 120\. 90 and below is low blood
    pressure. Above 120 and below 140 is called pre-high blood pressure, and 140 and
    over is high blood pressure.
  prefs: []
  type: TYPE_NORMAL
- en: The ideal diastolic blood pressure is between 60 and 80\. 60 and below is low.
    Above 80 and under 90 is pre-high blood pressure, and over 90 is high blood pressure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Ideal ranges for systolic and diastolic blood pressures'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this activity, if either number is out of the ideal range,
    report that as non-ideal blood pressure:'
  prefs: []
  type: TYPE_NORMAL
- en: Write an application that takes two numbers, the systolic blood pressure and
    the diastolic blood pressure. Convert both inputs into `int` values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if there is the right number of inputs at the beginning of the program.
    Print an error message if any inputs are missing. Exit the application in this
    case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare against the ideal rates mentioned previously. Output a message describing
    the inputs as low, ideal, pre-high, or high blood pressure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To print an error message, use `System.err.println` instead of `System.out.println`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try out your program with a variety of inputs to ensure it works properly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to use the Terminal pane in IntelliJ to compile and run the program
    with command-line input. Look back at Exercises 15 and 16 for details on how to
    do this.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The blood pressure is typically reported as systolic blood pressure/diastolic
    blood pressure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 533.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered a lot of Java syntax—things you need to learn to be able
    to tackle the more advanced topics. You'll find yourself using these techniques
    in just about every Java application you write.
  prefs: []
  type: TYPE_NORMAL
- en: We started out by controlling the flow of the program using conditional statements
    such as `if`, `else if`, `else`, and `switch` statements. We then moved on to
    the different loops that can be used to perform repetitive tasks. After this,
    we looked at how to provide values during runtime using command-line arguments.
    This is one way to pass inputs to your Java applications. Every example in this
    chapter created a class, but we have not yet done much with these classes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about classes, methods, and object-oriented
    programming, and how you can do a lot more with classes.
  prefs: []
  type: TYPE_NORMAL
