- en: 2\. Learning the Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be executing programs that do not have the typical
    linear flow that we have seen so far. You will first learn to use if, else, else
    if, and switch-case statements to control the flow of your programs. You will
    practice running for, while, and do-while loops in order to perform repetitive
    tasks in Java, and how to pass command-line arguments to modify how programs run.
    By the end of this chapter, you will be able to implement immutable, static (global)
    variables, alongside Java's variable type inference mechanism.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business applications have lots of special-case conditions. Such conditions
    may include finding changes in allocation rules starting at a particular year,
    or handling different types of employees differently based on their designation.
    To code for such special cases, you will require conditional logic. You basically
    tell the computer to perform a set of actions when a particular condition is met.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Before we delve into advanced Java topics, you need to know the basics of Java
    syntax. While some of this material might seem simple, you'll find you need to
    use the techniques and syntax shown in this chapter repeatedly in your applications.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: As you've seen in *Chapter 1*, *Getting Started*, Java's syntax borrows heavily
    from C and C++. That's true for conditional statements that control the flow of
    your programs as well. Java, like most computer languages, allows you to do this.
    This chapter covers the basic syntax of the Java language, especially ways in
    which you can control the flow of your applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: This chapter, and the next one on object-oriented programming, will give you
    a good working knowledge of how Java programs work. You'll be able to take on
    more advanced APIs and topics. Work your way through this basic material, and
    you will be ready to move on to the more complex code to come.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the Flow of Your Programs
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine paying a bill from your e-wallet. You will only be able to make the
    payment if the credit balance in your e-wallet is greater than or equal to the
    bill amount. The following flowchart shows a simple logic that can be implemented:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: A representative flow chart for an if-else statement'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Here, the credit amount dictates the course of action of the program. To facilitate
    such scenarios, Java uses the `if` statement.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: With the `if` statement, your application will execute a block of code *if*
    (and only if) a particular condition is true. In the following code, if the `happy`
    variable is `true`, then the block of code immediately following the `if` statement
    will execute. If the `happy` variable is not `true`, then the block of code immediately
    following the `if` statement will not execute.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Exercise 1: Creating a Basic if Statement'
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In most software industries, you are only working on a module of the code,
    and you might already know the value stored in a variable. You can use `if` statements
    and `print` statements in such cases. In this exercise, use an `if` statement
    to check if the values of variables assigned are `true` or `false`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory for examples from this chapter and others. Name the folder
    `sources`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In IntelliJ, select `File` -> `New` -> `Project` from the `File` menu.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `New Project` dialog box, select a `Java` project. Click `Next`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the box to create the project from a template. Click on `Command Line
    App`. Click on `Next`.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `chapter02`.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the project location, click the button with three dots (`…`) and then select
    the `sources` folder you created previously.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the base package name so that this entry is left blank. You will use
    Java packages in the *Chapter 6*, *Libraries, Packages, and Modules*.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'IntelliJ will create a project named `chapter02`, as well as a `src` folder
    inside `chapter02`. This is where your Java code will reside. IntelliJ also creates
    a class named `Main`:'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Rename the class named `Main` to `Exercise01`. (We're going to create a lot
    of small examples in this chapter.)
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Double-click in the text editor window on the word `Main` and then right-click
    it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the contextual menu, select `Refactor` | `Rename…`, enter `Exercise01`,
    and then press `Enter`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will now see the following code:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the `main()` method, define two Boolean variables, `happy` and `sad`:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, create two `if` statements, as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The final code should look similar to this:'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Click the green arrow that is just to the left of the text editor window that
    points at the class name `Exercise01`. Select the first menu choice, `Run` `Exercise01.main()`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The line `I am happy.` comes from the first `if` statement, since the `happy`
    Boolean variable is true.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Note that the second `if` statement does not execute, because the `sad` Boolean
    variable is false.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'You almost always want to use curly braces to define the code block following
    an `if` condition. If you don''t, you may find odd errors in your programs. For
    example, in the following code, the second statement, which sets the `i` variable
    to zero, will always get executed:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Unlike languages such as Python, indentation doesn''t count in Java. The following
    shows what will actually execute with greater clarity:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The last line is always executed because it is outside the `if` statement after
    the curly braces closes.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Comparison Operators
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to Java''s Booleans, you can use comparisons in conditional statements.
    These comparisons must form a Boolean expression that resolves to `true` or `false`.
    Comparison operators allow you to build Boolean expressions by comparing values.
    Java''s main comparison operators include the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: The comparison operators in Java'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The comparison operators such as `==` do not work the way you would expect for
    textual values. See the *Comparing Strings* section later in this chapter to see
    how to compare text values.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: A single equals sign, `=`, is used to assign a value. Two equals signs, `==`,
    is used to compare values. Therefore, generally, you never use `=` in a Boolean
    expression to check a condition.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 2: Using Java Comparison Operators'
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An online retail store provides free delivery only if the destination is within
    a 10-kilometer (km) radius of the store. Given the distance between the nearest
    store location and home, we can code this business logic with comparison operators:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: In the `Project` pane in IntelliJ, right-click on the folder named `src`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose `New` -> `Java Class` from the menu.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Exercise02` for the name of the new class.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define the method named `main()`:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Inside the `main()` method, define the variables we''ll use for comparisons:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Enter the following `if` statements after the variable declarations:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The final code should look similar to the following: [https://packt.live/32Ca9YS](https://packt.live/32Ca9YS)'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise02` program using the green arrow to the left.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Nested if Statements
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nesting implies embedding a construct within another code construct. You can
    nest `if` statements within any block of code, including the block of code that
    follows an `if` statement. Here is an example of how the logic in a nested `if`
    statement is evaluated:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: A representative flow chart for a nested if-else statement'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Implementing a Nested if Statement'
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the following exercise, we will nest an `if` statement within another `if`
    statement to check if the speed of the vehicle is above the speed limit, and if
    so, whether it is above the finable speed:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise03`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Declare the `speed`, `speedForFine`, and `maxSpeed` variables with the values
    of `75`, `70`, and `60` respectively:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a nested `if` statement, where the outer `if` statement checks if the
    speed is greater than or equal to the maximum speed limit, and the inner loop
    checks if the speed is greater than or equal to the speed limit for a fine:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Run the `Exercise03` program using the green arrow to the left.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try changing the value of speed in the code and then running the program again.
    You will see how different speed values produce different outputs.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Branching Two Ways with if and else
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An `else` statement following the code block for an `if` statement gets executed
    if the `if` statement condition is not true. You can also use `else if` statements
    to provide for an additional test.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The third line (in the `else` block) will only print if neither of the first
    two lines (the `if` or `else if` code blocks) was true. Whatever the value of
    speed, only one of the lines will print.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Using if and else Statements'
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A fair-trade coffee roaster offers a discount of 10% if you order more than
    5 kg of whole coffee beans, and a discount of 15% if you order more than 50 kg.
    We''ll code these business rules using `if`, `else if`, and `else` statements:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise04`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the `main` method and declare the variables as follows:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Enter the following `if`, `else if`, and `else` statements:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Notice that we check against the largest threshold first. The reason for this
    is that a value greater than or equal to `largeThreshold` will also be greater
    than or equal to `mediumThreshold`.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The full source code for this exercise can be found at: [https://packt.live/33UTu35](https://packt.live/33UTu35).'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise04` program using the green arrow to the left.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Run** window, you''ll see the path to your Java program, and then
    the following output:'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using Complex Conditionals
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Java allows you to create complex conditional statements with logical operators.
    Logical operators are generally used on only Boolean values. Here are some of
    the logical operators available in Java:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '`AND (&&)`: `a` && `b` will be evaluated to `true` if both a and b are `true`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OR (||)`: `a` || `b` will be evaluated to `true` if either a or b, or both
    are `true`'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NOT (!)`: `!a` be evaluated to true if `a` is `false`'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use the conditional operators to check more than one condition in an `if` statement.
    For example, the following shows an `if` statement where both conditions must
    be true for the overall `if` statement to execute:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In this case, the overall expression resolves to `false`, since the `blue` variable
    is false, and the `print` statement will not execute.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Always use parentheses to make your conditionals clear by grouping the conditions
    together.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also check if either, or both, of the expressions are true with the
    `||` operator:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this case, the overall expression resolves to true, since at least one part
    is true. Therefore, the `print` statement will execute:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The value of `blue` is initialized to `false`. Since we are checking the NOT
    of the blue variable in the `if` statement, the `print` statement will execute.
    The following exercise shows how we can use logical operators.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 5: Using Logical Operators to Create Complex Conditionals'
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise shows an example of each of the conditional operators previously
    described. You are writing an application that works with data from a fitness
    tracker. To accomplish this, you need to code a check against normal heart rates
    during exercise.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: If a person is 30 years old, a normal heart rate should be between 95 beats
    per minute (bpm) and 162 bpm. If the person is 60 years old, a normal heart rate
    should be between 80 and 136 bpm.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个人是30岁，正常心率应在每分钟95次（bpm）到162次（bpm）之间。如果一个人是60岁，正常心率应在每分钟80次到136次（bpm）之间。
- en: 'Use the following steps for completion:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下步骤来完成：
- en: Using the techniques from the previous exercise, create a new class named `Exercise05`
    in the `main` method and declare variables.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个练习中的技术，在`main`方法中创建一个名为`Exercise05`的新类并声明变量。
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Create an `if` statement to check the heart rate of a 30-year old person:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`if`语句来检查30岁人的心率：
- en: '[PRE24]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have nested conditionals to check the allowable range for 30-year-olds.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们有嵌套条件来检查30岁人的允许范围。
- en: 'Create an `else if` statement to check the heart rate of a 60-year old person:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`else if`语句来检查60岁人的心率：
- en: '[PRE25]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We have nested conditionals to check the allowable range for 60-year-olds.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们有嵌套条件来检查60岁人的允许范围。
- en: Run the `Exercise05` program using the green arrow to the left.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧的绿色箭头运行`Exercise05`程序。
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Run`窗口中，你会看到你的Java程序路径，然后是以下输出：
- en: '[PRE26]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Change `age` to `60` and re-run the program; your output should be as follows:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`age`改为`60`并重新运行程序；你的输出应该是以下内容：
- en: '[PRE27]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Note
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'The full source code for this exercise can be found at: [https://packt.live/2W3YAHs](https://packt.live/2W3YAHs).'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本练习的完整源代码可以在以下链接找到：[https://packt.live/2W3YAHs](https://packt.live/2W3YAHs)。
- en: Using Arithmetic Operators in an if Condition
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在if条件中使用算术运算符
- en: 'You can use arithmetic operators as well in Boolean expressions, as shown in
    `Example01.java`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在布尔表达式中使用算术运算符，如`Example01.java`所示：
- en: '[PRE28]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output in this case would be as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，输出将是以下内容：
- en: '[PRE29]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Here, the value of `(x + y)` is calculated, and then the result is compared
    to `5`. So, since the result of `x` added to `y` is `3`, which is less than `5`,
    the condition holds true. Therefore, the `print` statement is executed. Now that
    we have seen the variations of the `if else` statement, we will now see how we
    can use the ternary operator to express the `if else` statements.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`(x + y)`的值被计算，然后结果与`5`进行比较。因此，由于`x`加上`y`的结果是`3`，小于`5`，条件为真。因此，执行`print`语句。现在我们已经看到了`if
    else`语句的变体，我们将现在看看如何使用三元运算符来表示`if else`语句。
- en: The Ternary Operator
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三元运算符
- en: Java allows a short-hand version of an `if else` statement, using the ternary
    (or three-part) operator, `?:`. This is often used when checking variables against
    an allowed maximum (or minimum) value.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Java允许使用三元（或三部分）运算符`?:`的简写形式来表示`if else`语句。这通常用于检查变量是否在允许的最大（或最小）值范围内。
- en: 'The basic format is: *Boolean expression* `?` *true block* `:` *false block*,
    as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 基本格式是：*布尔表达式* `?` *true块* `:` *false块*，如下所示：
- en: '[PRE30]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The JVM resolves the `(x > max)` Boolean expression. If true, then the expression
    returns the value immediately after the question mark. In this case, that value
    will be set into the `x` variable since the line of code starts with an assignment,
    `x =`. If the expression resolves to false, then the value after the colon, `:`,
    is returned.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: JVM解析`(x > max)`布尔表达式。如果为真，则表达式返回问号后面的值。在这种情况下，该值将被设置为`x`变量，因为代码行以赋值开始，`x =`。如果表达式解析为假，则返回冒号后面的值。
- en: 'Exercise 6: Using the Ternary Operator'
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习6：使用三元运算符
- en: 'Consider the minimum height requirement for a roller coaster to be 121 centimeters
    (cm). In this exercise, we will check for this condition using the ternary operator.
    Perform the following steps:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑过山车最小身高要求为121厘米（cm）。在这个练习中，我们将使用三元运算符来检查这个条件。执行以下步骤：
- en: Using the techniques from the previous exercise, create a new class named `Exercise06`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个练习中的技术，创建一个名为`Exercise06`的新类。
- en: 'Declare and assign values to the `height` and `minHeight` variables. Also,
    declare a string variable to print the output message:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明并赋值给`height`和`minHeight`变量。同时，声明一个字符串变量以打印输出信息：
- en: '[PRE31]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Use the ternary operator to check the minimum height requirement and set the
    value of `result`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用三元运算符检查最小身高要求并设置`result`的值：
- en: '[PRE32]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: So, if height is greater than `minHeight`, the first statement will be returned
    (`You are allowed on the ride`). Otherwise, the second statement will be returned
    (`Sorry you do not meet the height requirements`).
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your code should look similar to this:'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run the `Exercise06` program.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Equality Can Be Tricky
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java decimal types such as `float` and `double` (and the object versions, `Float`
    and `Double`) are not stored in memory in a way that works with regular equality
    checks.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: When comparing decimal values, you normally need to define a value that represents
    what you think is close enough. For example, if two values are within *.001* of
    each other, then you may feel that is close enough to consider the values as equal.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 7: Comparing Decimal Values'
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you''ll run a program that checks if two double values are
    close enough to be considered equal:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise07`.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `Math.abs()` method returns the absolute value of the input, making sure
    the input is positive.
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We will learn more about the `Math` package in *Chapter 6*, *Libraries, Packages,
    and Modules*.
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise07` program using the green arrow to the left.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the run window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Note how `a` and `b` differ due to the internal storage for the double type.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For more on how Java represents floating-point numbers, see [https://packt.live/2VZdaQy](https://packt.live/2VZdaQy).
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Comparing Strings
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You cannot use `==` to compare two strings in Java. Instead, you need to use
    the `String` class'' `equals` method. This is because `==` with `String` objects
    just checks whether they are the exact same object. What you''ll normally want
    is to check if the string values are equal:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `equals` method on a `String` object called `cat` returns true if the passed-in
    `String`, `dog`, has the same value as the first `String`. In this case, these
    two strings differ. So, the Boolean expression will resolve to false.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use literal strings in Java, delineating these strings with double
    quotes. Here''s an example:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This case compares a `String` variable named `dog` with the literal string `"dog"`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '`Example09` shows how to call the equals method:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'You should get the following output:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Using switch Statements
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `switch` statement is similar to a group of nested `if`-`else`-`if` statements.
    With `switch`, you can choose from a group of values.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic syntax follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With the `switch` keyword, you place the variable to be checked. In this case,
    we're checking a variable called `season`. Each case statement represents one
    possible value for the `switch` variable (season). If the value of season is `3`,
    then the `case` statement that matches will be executed, setting the `message`
    variable to the String `Fall`. The `break` statement ends the execution for that
    case.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `switch` 关键字，放置要检查的变量。在这种情况下，我们正在检查一个名为 `season` 的变量。每个 `case` 语句代表 `switch`
    变量（季节）的一个可能值。如果 `season` 的值为 `3`，则将执行匹配的 `case` 语句，将 `message` 变量设置为字符串 `Fall`。`break`
    语句结束该情况的执行。
- en: The `default` statement is used as a catch-all for any unexpected value that
    doesn't match the defined cases. The best practice is to always include a `default`
    statement. Let's see how to implement this logic in a program.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`default` 语句用于捕获任何不符合定义情况的意外值。最佳实践是始终包含一个 `default` 语句。让我们看看如何在程序中实现这种逻辑。'
- en: 'Exercise 8: Using switch'
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 8：使用 switch
- en: 'In this exercise, you''ll run a program that maps a number to a season:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将运行一个将数字映射到季节的程序：
- en: Using the techniques from the previous exercise, create a new class named `Exercise08`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个练习中的技术，创建一个名为 `Exercise08` 的新类。
- en: 'Enter in the `main()` method and set up these variables:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 方法中输入并设置以下变量：
- en: '[PRE42]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Enter the following `switch` statement.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下 `switch` 语句。
- en: '[PRE43]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'And enter a `println` statement to show us the results:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并输入一个 `println` 语句以显示结果：
- en: '[PRE44]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find the code for this exercise here: [https://packt.live/35WXm58](https://packt.live/35WXm58).'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在此处找到该练习的代码：[https://packt.live/35WXm58](https://packt.live/35WXm58)。
- en: Run the `Exercise08` program using the green arrow to the left.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧的绿色箭头运行 `Exercise08` 程序。
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 `Run` 窗口中，你会看到你的 Java 程序的路径，然后是以下输出：
- en: '[PRE45]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Because the `season` variable is set to `3`, Java executes the `case` with `3`
    as the value, so in this case, setting the `message` variable to `Fall`.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为 `season` 变量被设置为 `3`，所以 Java 执行了值为 `3` 的 `case`，因此在这种情况下，将 `message` 变量设置为字符串
    `Fall`。
- en: Note
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: There is no one rule for when to use a `switch` statement as opposed to a series
    of `if`-`else` statements. In many cases, your choice will be based on the clarity
    of the code. In addition, `switch` statements are limited in only having cases
    that hold a single value, while `if` statements can test much more complicated
    conditions.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 没有一条规则可以决定何时使用 `switch` 语句而不是一系列的 `if`-`else` 语句。在许多情况下，你的选择将基于代码的清晰度。此外，`switch`
    语句仅限于具有单个值的 `case`，而 `if` 语句可以测试更复杂的条件。
- en: Normally, you'll put a `break` statement after the code for a particular case.
    You don't have to. The code will keep executing from the start of the `case` until
    the next `break` statement. This allows you to treat multiple conditions similarly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你会在特定情况的代码后放置一个 `break` 语句。你不必这样做。代码将从 `case` 的开始处继续执行，直到下一个 `break` 语句。这允许你以类似的方式处理多个条件。
- en: 'Exercise 9: Allowing Cases to Fall Through'
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 9：允许情况自然过渡
- en: 'In this exercise, you will determine a temperature adjustment for the porridge
    in *Goldilocks and the Three Bears*. If the porridge is too hot, for example,
    you''ll need to reduce the temperature. If it''s too cold, raise the temperature:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将为《金发姑娘和三只熊》中的粥确定温度调整。例如，如果粥太热，你需要降低温度。如果太冷，则提高温度：
- en: Using the techniques from the previous exercise, create a new class named `Exercise09`.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前一个练习中的技术，创建一个名为 `Exercise09` 的新类。
- en: 'Enter in the `main()` method and set up these variables:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main()` 方法中输入并设置以下变量：
- en: '[PRE46]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Next, enter the following `switch` statement:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，输入以下 `switch` 语句：
- en: '[PRE47]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Print out the results:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印出结果：
- en: '[PRE48]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Run the `Exercise09` program using the green arrow to the left.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用左侧的绿色箭头运行 `Exercise09` 程序。
- en: 'In the run window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行窗口中，你会看到你的 Java 程序的路径，然后是以下输出：
- en: '[PRE49]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Look carefully at the `switch` statement. If the value of the taste variable
    is too cold, then increment the temperature by 1\. If the value is too hot, decrement
    the temperature by 1\. But notice there is no break statement, so the code keeps
    executing and adjusts the temperature down by another 1\. This implies that if
    the porridge is too hot, the temperature is decremented by 1\. If it's way too
    hot, it's decremented by 2\. If the porridge is just right, there is no adjustment.
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Starting with Java 7, you can use Strings in switch statements. Prior to Java
    7, you could not.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using Java 12 Enhanced switch Statements
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java 12 offers a new form of the `switch` statement. Aimed at `switch` statements
    that are essentially used to determine the value of a variable, the new `switch`
    syntax allows you to assign a variable containing the result of the `switch`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'The new syntax looks like this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This `switch` syntax does not use break statements. Instead, for a given case,
    only the code block after `->` gets executed. The value from that code block is
    then returned as the value from the switch statement.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: We can rewrite the `Exercise09` example using the new syntax, as shown in the
    following exercise.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ needs a configuration to support Java 12 `switch` statements.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10: Using Java 12 switch Statements'
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will work on the same example as in the previous exercise.
    This time, though, we will implement the new switch case syntax that is made available
    by Java 12\. Before we start with the program there, you''ll have to make changes
    to the IntelliJ configuration. We will set that up in the initial few steps of
    the exercise:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: From the `Run` menu, select `Edit` Configurations.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Edit` Templates.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on `Application`.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the `VM` options:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Click `OK`.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This turns on the IntelliJ support for Java 12 enhanced switch statements.
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise10`.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter in the `main()` method and set up this variable:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Define a `switch` statement as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Note the semi-colon after `switch`. Remember, we are assigning a variable to
    a value with the whole statement.
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Then print out the value chosen:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'When you run this example, you should see the same output as in the previous
    example:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The full code is as follows:'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Looping and Performing Repetitive Tasks
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we cover using loops to perform repetitive tasks. The main
    types of loop are as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '`for` loops'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`while` loops'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`do-while` loops'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for` loops repeat a block a set number of times. Use a `for` loop when you
    are sure how many iterations you want. A newer form of the `for` loop iterates
    over each item in a collection.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loops execute a block while a given condition is true. When the condition
    becomes false, the `while` loop stops. Similarly, `do-while` loops execute a block
    and then check a condition. If true, the `do-while` loop runs the next iteration.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Use `while` loops if you are unsure how many iterations are required. For example,
    when searching through data to find a particular element, you normally want to
    stop when you find it.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Use a `do-while` loop if you always want to execute the block and only then
    check if another iteration is needed.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Looping with the for Loop
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A `for` loop executes the same block of code for a given number of times. The
    syntax comes from the C language:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'In the preceding code, we can see that:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: Each part is separated by a semicolon, (`;`).
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `set up` part gets executed at the beginning of the entire for loop. It
    runs once.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `boolean expression` is examined at each iteration, including the first.
    So long as this resolves to true, the loop will execute another iteration.
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `how to increment` part defines how you want a loop variable to increment.
    Typically, you'll add one for each increment.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following exercise will implement a classic for loop in Java.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Using a Classic for Loop'
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will run a `for` loop for four iterations, using the classic
    for loop syntax:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise11`.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method and the following code:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Run the `Exercise11` program using the green arrow to the left.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Here is how the program executes:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`int i = 1` is the `for` loop set up part.'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Boolean expression checked each iteration is `i < 5`.
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The how to increment part tells the `for` loop to add one to each iteration
    using the `++` operator.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each iteration, the code inside the parentheses executes. It continues like
    this until the Boolean expression stops being `true`.
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to the old classic `for` loop, Java also offers an enhanced for
    loop designed to iterate over collections and arrays.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: We will cover arrays and collections in greater detail later in the book; for
    now, think of arrays as groups of values of the same data type stored in a single
    variable, whereas collections are groups of values of different data types stored
    in a single variable.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 12: Using an Enhanced for Loop'
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Iterating over the elements of arrays means that the increment value is always
    1 and the start value is always 0\. This allows Java to reduce the syntax of a
    form to iterate over arrays. In this exercise you will loop over all items in
    a `letters` array:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise12`.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Enter the following array:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '*Chapter 4*, *Collections, Lists, and Java''s Built-In APIs*, will cover the
    array syntax in greater depth. For now, we have an array of three `String` values,
    `A`, `B`, and `C`.'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter an enhanced `for` loop:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Notice the reduced syntax of the `for` loop. Here, the variable letter iterates
    over every element in the letters array.
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise12` program using the green arrow to the left.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Jumping Out of Loops with Break and Continue
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `break` statement, as we saw in the `switch` examples, jumps entirely out
    of a loop. No more iterations will occur.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: A `continue` statement jumps out of the current iteration of the loop. Java
    will then evaluate the loop expression for the next iteration.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Using break and continue'
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise shows how to jump out of a loop using `break`, or jump to the
    next iteration using continue:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise13`.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Define a slightly longer array of `String` values:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Enter the following for loop:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This loop will normally iterate four times, once for each letter in the `letters`
    array. We'll change that though, with the next code.
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a conditional to the loop:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: Using `continue` here means that if the current letter equals `A`, then jump
    to the next iteration. None of the remaining loop code will get executed.
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we''ll print out the current letter:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: For all iterations that get here, you'll see the current letter printed.
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finish the `for` loop with a conditional using `break`:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: If the value of `letter` is `C`, then the code will jump entirely out of the
    loop. And since our array of letters has another value, `D`, we'll never see that
    value at all. The loop is done when the value of letter is `C`.
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise13` program using the green arrow to the left.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '`Exercise13.java` holds the full example:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for Exercise 13 can be found at the following link: [https://packt.live/2MDczAV](https://packt.live/2MDczAV).'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Using the while Loop
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, you won't know in advance how many iterations you need. In that
    case, use a `while` loop instead of a `for` loop.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'A `while` loop repeats so long as (or *while*) a Boolean expression resolves
    to true:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: Similar to a `for` loop, you'll often use a variable to count iterations. You
    don't have to do that, though. You can use any Boolean expression to control a
    `while` loop.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Using a while Loop'
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise implements a similar loop to *Exercise10*, which shows a `for`
    loop:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercise, create a new class named `Exercise14`.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a `main()` method:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Enter the following variable setting and `while` loop:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note how this loop increments the `i` variable by two each time. This results
    in printing odd numbers.
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run the `Exercise14` program using the green arrow to the left.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Run` window, you''ll see the path to your Java program, and then the
    following output:'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A common mistake is to forget to increment the variable used in your Boolean
    expression.
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using the do-while Loop
  id: totrans-350
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `do-while` loop provides a variant on the `while` loop. Instead of checking
    the condition first, the `do-while` loop checks the condition after each iteration.
    This means with a `do-while` loop, you will always have at least one iteration.
    Normally, you will only use a `do-while` loop if you are sure you want the iteration
    block to execute the first time, even if the condition is false.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: One example use case for the `do-while` loop is if you are asking the user a
    set of questions and then reading the user's response. You always want to ask
    the first question.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: 'The basic format is as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Note the semicolon after the Boolean expression.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: A `do-while` loop runs the iteration block once, and then checks the Boolean
    expression to see if the loop should run another iteration.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '`Example17.java` shows a `do-while` loop:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This example prints out even numbers.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: You can use `break` and `continue` with `while` and `do`-`while` loops too.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: Handling Command-Line Arguments
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Command-line arguments are parameters passed to the `main()` method of your
    Java program. In each example so far, you've seen that the `main()` method takes
    in an array of `String` values. These are the command-line arguments to the program.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Command-line arguments prove their usefulness by giving you one way of providing
    inputs to your program. These inputs are part of the command line launching the
    program, when run from a Terminal shell window.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15: Testing Command-Line Arguments'
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise shows how to pass command-line arguments to a Java program, and
    also shows how to access those arguments from within your programs:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercises, create a new class named `Exercise15`.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This code uses a `for` loop to iterate over all the command-line arguments,
    which the `java` command places into the `String` array named `args`.
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each iteration prints out the position (`i`) of the argument and the value (`args[i]`).
    Note that Java arrays start counting positions from 0 and `args.length` holds
    the number of values in the `args` array.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To run this program, we're going to take a different approach than before.
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the bottom of the IntelliJ application, click on `Terminal`. This will show
    a command-line shell window.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When using IntelliJ for these examples, the code is stored in a folder named
    `src`.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following command in the `Terminal` window:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This changes to the folder with the example source code.
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the `javac` command to compile the Java program:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: This command creates a file named `Exercise15.class` in the current directory.
    IntelliJ normally puts these .*class* files into a different folder.
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, run the program with the `java` command with the parameters you want to
    pass:'
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'In this command, `Exercise15` is the name of the Java class with the `main()`
    method, `Exercise15`. The values following `Exercise15` on the command line are
    passed to the `Exercise15` application as command-line arguments. Each argument
    is separated by a space character, so we have three arguments: *cat*, *dog*, and
    *wombat*.'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will see the following output:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-385
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: The first argument, at position `0` in the `args` array, is `cat`. The argument
    at position `1` is `dog`, and the argument at position `2` is `wombat`.
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `java` command, which runs compiled Java programs, supports a set of command-line
    arguments such as defining the available memory heap space. See the Oracle Java
    documentation at [https://packt.live/2BwqwdJ](https://packt.live/2BwqwdJ) for
    details on the command-line arguments that control the execution of your Java
    programs.
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Converting Command-Line Arguments
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Command-line arguments appear in your Java programs as String values. In many
    cases, though, you'll want to convert these *String values* into numbers.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: If you are expecting an integer value, you can use `Integer.parseInt()` to convert
    a `String` to an `int`.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: If you are expecting a double value, you can use `Double.parseDouble()` to convert
    a `String` to a `double`.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16: Converting String to Integers and Doubles'
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise extracts command-line arguments and turns them into numbers:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: Using the techniques from the previous exercises, create a new class named `Exercise16`.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the `main()` method:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Enter the following code to convert the first argument into an `int` value:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: This code first checks if there is a command-line argument, and then if so,
    converts the `String` value to an `int`.
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following code to convert the second argument into a `double` value:'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: This code checks if there is a second command-line argument (start counting
    with 0) and if so, converts the `String` to a `double` value.
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the `javac` command introduced in *Chapter 1*, *Getting Started*, to
    compile the Java program:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: This command creates a file named `Exercise16.class` in the current directory.
  id: totrans-406
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, run the program with the `java` command:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'You will see the following output:'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-410
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The values printed out have been converted from String values into numbers inside
    the program. This example does not try to catch errors, so you have to enter the
    inputs properly.
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-412
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Both `Integer.parseInt()` and `Double.parseDouble()` will throw `NumberFormatException`
    if the passed-in String does not hold a number. See *Chapter 5*, *Exceptions*,
    for more on exceptions.
  id: totrans-413
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Diving Deeper into Variables — Immutability
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Immutable** objects cannot have their values modified. In Java terms, once
    an immutable object is constructed, you cannot modify the object.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: Immutability can provide a lot of advantages for the JVM, since it knows an
    immutable object cannot be modified. This can really help with garbage collection.
    When writing programs that use multiple threads, knowing an object cannot be modified
    by another thread can make your code safer.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: In Java, `String` objects are immutable. While it may seem like you can assign
    a `String` to a different value, Java actually creates a new object when you try
    to change a `String`.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Comparing Final and Immutable
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to immutable objects, Java provides a `final` keyword. With `final`,
    you cannot change the object reference itself. You can change the data within
    a `final` object, but you cannot change which object is referenced.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Contrast `final` with immutable. An immutable object does not allow the data
    inside the object to change. A `final` object does not allow the object to point
    to another object.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Using Static Values
  id: totrans-421
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A *static* variable is common to all instances of a class. This differs from
    instance variables that apply to only one instance, or object, of a class. For
    example, each instance of the `Integer` class can hold a different `int` value.
    But, in the `Integer` class, `MAX_VALUE` and `MIN_VALUE` are static variables.
    These variables are defined once for all instances of integers, making them essentially
    global variables.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Object-Oriented Programming*, delves into classes and objects.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'Static variables are often used as constants. To keep them constant, you normally
    want to define them as `final` as well:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: Note
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the names of Java constants are all uppercase.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`Example20.java` defines a constant, `MULTIPLY`:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: Because the `MULTIPLY` constant is a final value, you will get a compilation
    error if your code attempts to change the value once set.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Using Local Variable Type Inference
  id: totrans-432
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java is a statically typed language, which means each variable and each parameter
    has a defined type. As Java has provided the ability to create more complex types,
    especially related to collections, the Java syntax for variable types has gotten
    more and more complex. To help with this, Java version 10 introduced the concept
    of local variable type inference.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, you can declare a variable of the `var` type. So long as it is fully
    clear what type the variable really should be, the Java compiler will take care
    of the details for you. Here''s an example:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'This example creates a new `String` for the `s` variable. Even though s is
    declared with the `var` keyword, `s` really is of the `String` type. That is,
    this code is equivalent to the following:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: With just a `String` type, this doesn't save you that much typing. When you
    get to more complex types, though, you will really appreciate the use of the `var`
    keyword.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Collections, Lists, and Java''s Built-In APIs*, covers collections,
    where you will see really complex types.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '`Example21.java` shows local variable type inference in action:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'When you run this example, you will see the following output:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Activity 1: Taking Input and Comparing Ranges'
  id: totrans-445
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are tasked with writing a program that takes a patient's blood pressure
    as input and then determines if that blood pressure is within the ideal range.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Blood pressure has two components, the systolic blood pressure and the diastolic
    blood pressure.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: According to [https://packt.live/2oaVsgs](https://packt.live/2oaVsgs), the ideal
    systolic number is more than 90 and less than 120\. 90 and below is low blood
    pressure. Above 120 and below 140 is called pre-high blood pressure, and 140 and
    over is high blood pressure.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: The ideal diastolic blood pressure is between 60 and 80\. 60 and below is low.
    Above 80 and under 90 is pre-high blood pressure, and over 90 is high blood pressure.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/C13927_02_04.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Ideal ranges for systolic and diastolic blood pressures'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: 'For the purpose of this activity, if either number is out of the ideal range,
    report that as non-ideal blood pressure:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: Write an application that takes two numbers, the systolic blood pressure and
    the diastolic blood pressure. Convert both inputs into `int` values.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check if there is the right number of inputs at the beginning of the program.
    Print an error message if any inputs are missing. Exit the application in this
    case.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Compare against the ideal rates mentioned previously. Output a message describing
    the inputs as low, ideal, pre-high, or high blood pressure.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To print an error message, use `System.err.println` instead of `System.out.println`.
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try out your program with a variety of inputs to ensure it works properly.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll need to use the Terminal pane in IntelliJ to compile and run the program
    with command-line input. Look back at Exercises 15 and 16 for details on how to
    do this.
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The blood pressure is typically reported as systolic blood pressure/diastolic
    blood pressure.
  id: totrans-459
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 533.
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered a lot of Java syntax—things you need to learn to be able
    to tackle the more advanced topics. You'll find yourself using these techniques
    in just about every Java application you write.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: We started out by controlling the flow of the program using conditional statements
    such as `if`, `else if`, `else`, and `switch` statements. We then moved on to
    the different loops that can be used to perform repetitive tasks. After this,
    we looked at how to provide values during runtime using command-line arguments.
    This is one way to pass inputs to your Java applications. Every example in this
    chapter created a class, but we have not yet done much with these classes.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you'll learn about classes, methods, and object-oriented
    programming, and how you can do a lot more with classes.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
