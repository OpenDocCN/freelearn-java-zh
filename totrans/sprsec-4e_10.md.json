["```java\n//build.gradle\ndependencies {\n...\n    constraints {\n        implementation \"org.opensaml:opensaml-core:4.2.0\"\n        implementation \"org.opensaml:opensaml-saml-api:4.2.0\"\n        implementation \"org.opensaml:opensaml-saml-impl:4.2.0\"\n    }\n    implementation 'org.springframework.security:spring-security-saml2-service-provider'\n...\n```", "```java\nspring:\n  security:\n    saml2:\n      relyingparty:\n        registration:\n          okta:\n            assertingparty:\n              metadata-uri: https://dev-xxxxx.okta.com/app/ <random-characters>/sso/saml/metadata\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SpringSecurityUserContext.java\n@Component\npublic class SpringSecurityUserContext implements UserContext {\n    private static final Logger logger = LoggerFactory\n          .getLogger(SpringSecurityUserContext.class);\n    private final CalendarService calendarService;\n    public SpringSecurityUserContext(final CalendarService calendarService) {\n       if (calendarService == null) {\n          throw new IllegalArgumentException(\"calendarService cannot be null\");\n       }\n       this.calendarService = calendarService;\n    }\n    @Override\n    public CalendarUser getCurrentUser() {\n       SecurityContext context = SecurityContextHolder.getContext();\n       Authentication authentication = context.getAuthentication();\n       if (authentication == null) {\n          return null;\n       }\n       if(authentication.getPrincipal() instanceof DefaultSaml2AuthenticatedPrincipal saml2AuthenticatedPrincipal ) {\n          String email = saml2AuthenticatedPrincipal.getName();\n          CalendarUser result = calendarService.findUserByEmail(email);\n          if (result == null) {\n             throw new IllegalStateException(\n                   \"Spring Security is not in synch with CalendarUsers. Could not find user with email \" + email);\n          }\n          logger.info(\"CalendarUser: {}\", result);\n          return result;\n       }\n       return null;\n    }\n}\n```", "```java\nOpenSamlAssertingPartyDetails details = (OpenSamlAssertingPartyDetails)\n       registration.getAssertingPartyDetails();\nEntityDescriptor openSamlEntityDescriptor = details.getEntityDescriptor();\n```", "```java\nhttp\n       // ...\n       .saml2Login(withDefaults())\n       .saml2Metadata(withDefaults());\n```", "```java\n.saml2Metadata((saml2) -> saml2.metadataUrl(\"/saml/metadata\"))\n```", "```java\n@Bean\nSaml2MetadataResponseResolver metadataResponseResolver(RelyingPartyRegistrationRepository registrations) {\n    RequestMatcherMetadataResponseResolver metadata = new RequestMatcherMetadataResponseResolver(\n          (id) -> registrations.findByRegistrationId(\"relying-party\"), new OpenSamlMetadataResolver());\n    metadata.setMetadataFilename(\"metadata.xml\");\n    return metadata;\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http.authorizeHttpRequests( authz -> authz\n                   .requestMatchers(\"/webjars/**\").permitAll()\n                   .requestMatchers(\"/css/**\").permitAll()\n                   .requestMatchers(\"/favicon.ico\").permitAll()\n                   // H2 console:\n                   .requestMatchers(\"/admin/h2/**\").fullyAuthenticated()\n                   .requestMatchers(\"/\").permitAll()\n                   .requestMatchers(\"/login/*\").permitAll()\n                   .requestMatchers(\"/logout\").permitAll()\n                   .requestMatchers(\"/signup/*\").permitAll()\n                   .requestMatchers(\"/errors/**\").permitAll()\n                   .requestMatchers(\"/events/\").hasRole(\"ADMIN\")\n                   .requestMatchers(\"/**\").hasRole(\"USER\"))\n             .exceptionHandling(exceptions -> exceptions\n                   .accessDeniedPage(\"/errors/403\"))\n             .logout(form -> form\n                   .logoutUrl(\"/logout\")\n                   .logoutSuccessUrl(\"/\")\n                   .permitAll())\n             // CSRF is enabled by default, with Java Config\n             .csrf(AbstractHttpConfigurer::disable);\n       // @formatter:off\n       http\n             .saml2Login(withDefaults());\n       // For H2 Console\n       http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n       return http.build();\n    }\n...ommited for breviy\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SecurityConfig.java\n@Value(\"${metadata.location}\")\nprivate String assertingPartyMetadataLocation;\n@Bean\npublic RelyingPartyRegistrationRepository relyingPartyRegistrations() {\n    RelyingPartyRegistration registration = RelyingPartyRegistrations\n          .fromMetadataLocation(assertingPartyMetadataLocation)\n          .registrationId(\"okta\")\n          .build();\n    return new InMemoryRelyingPartyRegistrationRepository(registration);\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n... omitted for brevity\n       http\n             .saml2Login(saml2 -> saml2\n                   .relyingPartyRegistrationRepository(relyingPartyRegistrations())\n             );\n       return http.build();\n    }\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/service/ SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http.authorizeRequests( authz -> authz\n         ... omitted for brevity\n                   .requestMatchers(antMatcher(\"/errors/**\")).permitAll()\n                   .requestMatchers(antMatcher(\"/events/\")).hasRole(\"ADMIN\")\n                   .requestMatchers(antMatcher(\"/**\")).hasAuthority(\"Everyone\"))\n             .exceptionHandling(exceptions -> exceptions\n                   .accessDeniedPage(\"/errors/403\"))\n             .logout(form -> form\n                   .logoutUrl(\"/logout\")\n                  .logoutSuccessUrl(\"/\")\n                   .permitAll())\n             .csrf(AbstractHttpConfigurer::disable);\n       OpenSaml4AuthenticationProvider authenticationProvider = new OpenSaml4AuthenticationProvider();\n       authenticationProvider.setResponseAuthenticationConverter(groupsConverter());\n       // @formatter:off\n       http\n             .saml2Login(saml2 -> saml2\n                   .authenticationManager(new ProviderManager(authenticationProvider)))\n             .saml2Logout(withDefaults());\n       // For H2 Console\n       http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n       return http.build();\n    }\n    private Converter<OpenSaml4AuthenticationProvider.ResponseToken, Saml2Authentication> groupsConverter() {\n       Converter<ResponseToken, Saml2Authentication> delegate =\n             OpenSaml4AuthenticationProvider.createDefaultResponseAuthenticationConverter();\n       return (responseToken) -> {\n          Saml2Authentication authentication = delegate.convert(responseToken);\n          Saml2AuthenticatedPrincipal principal = (Saml2AuthenticatedPrincipal) authentication.getPrincipal();\n          List<String> groups = principal.getAttribute(\"groups\");\n          Set<GrantedAuthority> authorities = new HashSet<>();\n          if (groups != null) {\n             groups.stream().map(SimpleGrantedAuthority::new).forEach(authorities::add);\n          } else {\n             authorities.addAll(authentication.getAuthorities());\n          }\n          return new Saml2Authentication(principal, authentication.getSaml2Response(), authorities);\n       };\n    }\n}\n```", "```java\nopenssl req -newkey rsa:2048 -nodes -keyout rp-private.key -x509 -days 365 -out rp-certificate.crt\n```", "```java\nspring:\n  security:\n    saml2:\n      relyingparty:\n        registration:\n          okta:\n            signing:\n              credentials:\n                - private-key-location: classpath:credentials/rp-private.key\n                  certificate-location: classpath:credentials/rp-certificate.crt\n            assertingparty:\n              metadata-uri: https://dev-xxxxx.okta.com/app/ <random-characters>/sso/saml/metadata\n            singlelogout:\n              binding: POST\n              url: \"{baseUrl}/logout/saml2/slo\"\n```"]