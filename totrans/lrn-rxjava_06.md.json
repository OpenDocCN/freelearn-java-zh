["```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.interval(1, TimeUnit.SECONDS)\n                .map(i -> i + \" Mississippi\")\n                .subscribe(System.out::println);\n\n        sleep(5000);\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\n0 Mississippi\n1 Mississippi\n2 Mississippi\n3 Mississippi\n4 Mississippi\n```", "```java\npublic static <T> T intenseCalculation(T value) {\n    sleep(ThreadLocalRandom.current().nextInt(3000));\n    return value;\n}\npublic static void sleep(long millis) {\n    try {\n        Thread.sleep(millis);\n    } catch (InterruptedException e) {\n        e.printStackTrace();\n    }\n}\n```", "```java\nimport rx.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\nimport io.reactivex.Observable;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .map(s -> intenseCalculation((s)))\n                .subscribe(System.out::println);\n\n        Observable.range(1,6)\n                .map(s -> intenseCalculation((s)))\n                .subscribe(System.out::println);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nAlpha\nBeta\nGamma\nDelta\nEpsilon\n1\n2\n3\n4\n5\n6\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .map(s -> intenseCalculation((s)))\n                .subscribe(System.out::println);\n\n        Observable.range(1,6)\n                .subscribeOn(Schedulers.computation())\n                .map(s -> intenseCalculation((s)))\n                .subscribe(System.out::println);\n\n        sleep(20000);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\n1\n2\nAlpha\n3\n4\nBeta\n5\nGamma\nDelta\n6\nEpsilon\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable<String> source1 =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .map(s -> intenseCalculation((s)));\n\n        Observable<Integer> source2 =\n                Observable.range(1,6)\n                .subscribeOn(Schedulers.computation())\n                .map(s -> intenseCalculation((s)));\n\n        Observable.zip(source1, source2, (s,i) -> s + \"-\" + i)\n                .subscribe(System.out::println);\n\n        sleep(20000);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nAlpha-1\nBeta-2\nGamma-3\nDelta-4\nEpsilon-5\n```", "```java\nimport io.reactivex.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.interval(1, TimeUnit.SECONDS)\n                .map(l -> intenseCalculation((l)))\n                .subscribe(System.out::println);\n\n        sleep(Long.MAX_VALUE);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nimport io.reactivex.schedulers.Schedulers;\nimport io.reactivex.Observable;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .map(Launcher::intenseCalculation)\n                .blockingSubscribe(System.out::println,\n                        Throwable::printStackTrace,\n                        () -> System.out.println(\"Done!\"));\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nAlpha\nBeta\nGamma\nDelta\nEpsilon\nDone!\n```", "```java\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n    .subscribeOn(Schedulers.computation());\n```", "```java\n Database db = Database.from(conn);\n\n Observable<String> customerNames = \n     db.select(\"SELECT NAME FROM CUSTOMER\")\n         .getAs(String.class)\n         .subscribeOn(Schedulers.io());\n\n```", "```java\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n  .subscribeOn(Schedulers.newThread());\n```", "```java\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n .subscribeOn(Schedulers.single());\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.Scheduler;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        int numberOfThreads = 20;\n\n        ExecutorService executor =\n                Executors.newFixedThreadPool(numberOfThreads);\n\n        Scheduler scheduler = Schedulers.from(executor);\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(scheduler)\n                .doFinally(executor::shutdown)\n                .subscribe(System.out::println);\n    }\n}\n```", "```java\n//All three accomplish the same effect with subscribeOn()\n\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n        .subscribeOn(Schedulers.computation()) //preferred\n        .map(String::length)\n        .filter(i -> i > 5)\n        .subscribe(System.out::println);\n\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n        .map(String::length)\n        .subscribeOn(Schedulers.computation())\n        .filter(i -> i > 5)\n        .subscribe(System.out::println);\n\nObservable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n        .map(String::length)\n        .filter(i -> i > 5)\n        .subscribeOn(Schedulers.computation())\n        .subscribe(System.out::println);\n\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable<Integer> lengths =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .map(Launcher::intenseCalculation)\n                .map(String::length);\n\n        lengths.subscribe(i ->\nSystem.out.println(\"Received \" + i + \" on thread \" +\n                        Thread.currentThread().getName()));\n\n        lengths.subscribe(i ->\nSystem.out.println(\"Received \" + i + \" on thread \" +\n                        Thread.currentThread().getName()));\n\n        sleep(10000);\n\n    }\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 5 on thread RxComputationThreadPool-2\nReceived 4 on thread RxComputationThreadPool-2\nReceived 5 on thread RxComputationThreadPool-2\nReceived 5 on thread RxComputationThreadPool-2\nReceived 5 on thread RxComputationThreadPool-1\nReceived 7 on thread RxComputationThreadPool-2\nReceived 4 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable<Integer> lengths =\n                Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .map(Launcher::intenseCalculation)\n                .map(String::length)\n                .publish()\n                .autoConnect(2);\n\n        lengths.subscribe(i ->\nSystem.out.println(\"Received \" + i + \" on thread \" +\n                        Thread.currentThread().getName()));\n\n        lengths.subscribe(i ->\nSystem.out.println(\"Received \" + i + \" on thread \" +\n                        Thread.currentThread().getName()));\n\n        sleep(10000);\n\n    }\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 5 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\nReceived 4 on thread RxComputationThreadPool-1\nReceived 4 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\nReceived 5 on thread RxComputationThreadPool-1\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.net.URL;\nimport java.util.Scanner;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.fromCallable(() ->\ngetResponse(\"https://api.github.com/users/thomasnield/starred\")\n        ).subscribeOn(Schedulers.io())\n         .subscribe(System.out::println);\n\n        sleep(10000);\n    }\n    private static String getResponse(String path) {\n        try {\n            return new Scanner(new URL(path).openStream(), \"UTF-8\").useDelimiter(\"\\\\A\").next();\n        } catch (Exception e) {\n            return e.getMessage();\n        }\n    }\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\n[{\"id\":23095928,\"name\":\"RxScala\",\"full_name\":\"ReactiveX/RxScala\",\"o ....\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.interval(1, TimeUnit.SECONDS, Schedulers.newThread())\n                .subscribe(i -> System.out.println(\"Received \" + i +\n                        \" on thread \" + Thread.currentThread().getName()));\n\n        sleep(5000);\n    }\n\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```", "```java\nReceived 0 on thread RxNewThreadScheduler-1\nReceived 1 on thread RxNewThreadScheduler-1\nReceived 2 on thread RxNewThreadScheduler-1\nReceived 3 on thread RxNewThreadScheduler-1\nReceived 4 on thread RxNewThreadScheduler-1\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        Observable.just(\"Alpha\", \"Beta\", \"Gamma\", \"Delta\", \"Epsilon\")\n                .subscribeOn(Schedulers.computation())\n                .filter(s -> s.length() == 5)\n                .subscribeOn(Schedulers.io())\n                .subscribe(i -> System.out.println(\"Received \" + i +\n                       \" on thread \" + Thread.currentThread().getName()));\n\n        sleep(5000);\n    }\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived Alpha on thread RxComputationThreadPool-1\nReceived Gamma on thread RxComputationThreadPool-1\nReceived Delta on thread RxComputationThreadPool-1\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        //Happens on IO Scheduler\n        Observable.just(\"WHISKEY/27653/TANGO\", \"6555/BRAVO\", \"232352/5675675/FOXTROT\")\n                .subscribeOn(Schedulers.io())\n                .flatMap(s -> Observable.fromArray(s.split(\"/\")))\n\n                //Happens on Computation Scheduler\n                .observeOn(Schedulers.computation())\n                .filter(s -> s.matches(\"[0-9]+\"))\n                .map(Integer::valueOf)\n                .reduce((total, next) -> total + next)\n                .subscribe(i -> System.out.println(\"Received \" + i + \" on thread \"\n                        + Thread.currentThread().getName()));\n\n        sleep(1000);\n    }\n\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 5942235 on thread RxComputationThreadPool-1\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.io.BufferedWriter;\nimport java.io.File;\nimport java.io.FileWriter;\n\npublic class Launcher {\n\n    public static void main(String[] args) {\n\n        //Happens on IO Scheduler\n        Observable.just(\"WHISKEY/27653/TANGO\", \"6555/BRAVO\", \"232352/5675675/FOXTROT\")\n                .subscribeOn(Schedulers.io())\n                .flatMap(s -> Observable.fromArray(s.split(\"/\")))\n                .doOnNext(s -> System.out.println(\"Split out \" + s + \" on thread \"\n                        + Thread.currentThread().getName()))\n\n                //Happens on Computation Scheduler\n                .observeOn(Schedulers.computation())\n                .filter(s -> s.matches(\"[0-9]+\"))\n                .map(Integer::valueOf)\n                .reduce((total, next) -> total + next)\n                .doOnSuccess(i -> System.out.println(\"Calculated sum \" + i + \" on thread \"\n                        + Thread.currentThread().getName()))\n\n                //Switch back to IO Scheduler\n                .observeOn(Schedulers.io())\n                .map(i -> i.toString())\n                .doOnSuccess(s -> System.out.println(\"Writing \" + s + \" to file on thread \"\n                        + Thread.currentThread().getName()))\n                .subscribe(s -> write(s,\"/home/thomas/Desktop/output.txt\"));\n\n        sleep(1000);\n    }\n    public static void write(String text, String path) {\n        BufferedWriter writer = null;\n        try {\n            //create a temporary file\n            File file = new File(path);\n            writer = new BufferedWriter(new FileWriter(file));\n            writer.append(text);\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                writer.close();\n            } catch (Exception e) {\n            }\n        }\n    }\n\n    public static void sleep(int millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nSplit out WHISKEY on thread RxCachedThreadScheduler-1\nSplit out 27653 on thread RxCachedThreadScheduler-1\nSplit out TANGO on thread RxCachedThreadScheduler-1\nSplit out 6555 on thread RxCachedThreadScheduler-1\nSplit out BRAVO on thread RxCachedThreadScheduler-1\nSplit out 232352 on thread RxCachedThreadScheduler-1\nSplit out 5675675 on thread RxCachedThreadScheduler-1\nSplit out FOXTROT on thread RxCachedThreadScheduler-1\nCalculated sum 5942235 on thread RxComputationThreadPool-1\nWriting 5942235 to file on thread RxCachedThreadSchedule\n```", "```java\nimport javafx.application.Application;\nimport javafx.scene.Scene;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.ListView;\nimport javafx.scene.layout.VBox;\nimport javafx.stage.Stage;\nimport io.reactivex.Observable;\nimport io.reactivex.rxjavafx.observables.JavaFxObservable;\nimport io.reactivex.rxjavafx.schedulers.JavaFxScheduler;\nimport io.reactivex.schedulers.Schedulers;\npublic final class JavaFxApp extends Application {\n\n    @Override\n    public void start(Stage stage) throws Exception {\n\n        VBox root = new VBox();\n\n        ListView<String> listView = new ListView<>();\n        Button refreshButton = new Button(\"REFRESH\");\n\n        JavaFxObservable.actionEventsOf(refreshButton)\n                .observeOn(Schedulers.io())\n                .flatMapSingle(a ->\n          Observable.fromArray(getResponse(\"https://goo.gl/S0xuOi\")\n         .split(\"\\\\r?\\\\n\")\n          ).toList()\n                ).observeOn(JavaFxScheduler.platform())\n                .subscribe(list ->\nlistView.getItems().setAll(list));\n\n        root.getChildren().addAll(listView, refreshButton);\n        stage.setScene(new Scene(root));\n        stage.show();\n}\n\n    private static String getResponse(String path) {\n        try {\n            return new Scanner(new URL(path).openStream(), \"UTF-8\").useDelimiter(\"\\\\A\").next();\n        } catch (Exception e) {\n            return e.getMessage();\n        }\n    }\n}\n\n```", "```java\nimport io.reactivex.Observable;\nimport java.time.LocalTime;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n       Observable.range(1,10)\n               .map(i -> intenseCalculation(i))\n               .subscribe(i -> System.out.println(\"Received \" + i + \" \"\n                       + LocalTime.now()));\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 1 19:11:41.812\nReceived 2 19:11:44.174\nReceived 3 19:11:45.588\nReceived 4 19:11:46.034\nReceived 5 19:11:47.059\nReceived 6 19:11:49.569\nReceived 7 19:11:51.259\nReceived 8 19:11:54.192\nReceived 9 19:11:56.196\nReceived 10 19:11:58.926\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.time.LocalTime;\nimport java.util.concurrent.ThreadLocalRandom;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n       Observable.range(1,10)\n               .flatMap(i -> Observable.just(i)\n                       .subscribeOn(Schedulers.computation())\n                       .map(i2 -> intenseCalculation(i2))\n               )\n               .subscribe(i -> System.out.println(\"Received \" + i + \" \"\n                       + LocalTime.now() + \" on thread \"\n                       + Thread.currentThread().getName()));\n\n       sleep(20000);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 1 19:28:11.163 on thread RxComputationThreadPool-1\nReceived 7 19:28:11.381 on thread RxComputationThreadPool-7\nReceived 9 19:28:11.534 on thread RxComputationThreadPool-1\nReceived 6 19:28:11.603 on thread RxComputationThreadPool-6\nReceived 8 19:28:11.629 on thread RxComputationThreadPool-8\nReceived 3 19:28:12.214 on thread RxComputationThreadPool-3\nReceived 4 19:28:12.961 on thread RxComputationThreadPool-4\nReceived 5 19:28:13.274 on thread RxComputationThreadPool-5\nReceived 2 19:28:13.374 on thread RxComputationThreadPool-2\nReceived 10 19:28:14.335 on thread RxComputationThreadPool-2\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.time.LocalTime;\nimport java.util.concurrent.ThreadLocalRandom;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n       int coreCount = Runtime.getRuntime().availableProcessors();\n       AtomicInteger assigner = new AtomicInteger(0);\n\n       Observable.range(1,10)\n               .groupBy(i -> assigner.incrementAndGet() % coreCount)\n               .flatMap(grp -> grp.observeOn(Schedulers.io())\n                       .map(i2 -> intenseCalculation(i2))\n               )\n               .subscribe(i -> System.out.println(\"Received \" + i + \" \"\n                       + LocalTime.now() + \" on thread \"\n                       + Thread.currentThread().getName()));\n\n       sleep(20000);\n    }\n\n    public static <T> T intenseCalculation(T value) {\n        sleep(ThreadLocalRandom.current().nextInt(3000));\n        return value;\n    }\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 8 20:27:03.291 on thread RxCachedThreadScheduler-8\nReceived 6 20:27:03.446 on thread RxCachedThreadScheduler-6\nReceived 5 20:27:03.495 on thread RxCachedThreadScheduler-5\nReceived 4 20:27:03.681 on thread RxCachedThreadScheduler-4\nReceived 7 20:27:03.989 on thread RxCachedThreadScheduler-7\nReceived 2 20:27:04.797 on thread RxCachedThreadScheduler-2\nReceived 1 20:27:05.172 on thread RxCachedThreadScheduler-1\nReceived 9 20:27:05.327 on thread RxCachedThreadScheduler-1\nReceived 10 20:27:05.913 on thread RxCachedThreadScheduler-2\nReceived 3 20:27:05.957 on thread RxCachedThreadScheduler-3\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.disposables.Disposable;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n       Disposable d = Observable.interval(1, TimeUnit.SECONDS)\n               .doOnDispose(() -> System.out.println(\"Disposing on thread \"\n                       + Thread.currentThread().getName()))\n               .subscribe(i -> System.out.println(\"Received \" + i));\n\n       sleep(3000);\n       d.dispose();\n       sleep(3000);\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 0\nReceived 1\nReceived 2\nDisposing on thread main\n```", "```java\nimport io.reactivex.Observable;\nimport io.reactivex.disposables.Disposable;\nimport io.reactivex.schedulers.Schedulers;\nimport java.util.concurrent.TimeUnit;\n\npublic class Launcher {\n    public static void main(String[] args) {\n\n       Disposable d = Observable.interval(1, TimeUnit.SECONDS)\n               .doOnDispose(() -> System.out.println(\"Disposing on thread \"\n                       + Thread.currentThread().getName()))\n               .unsubscribeOn(Schedulers.io())\n               .subscribe(i -> System.out.println(\"Received \" + i));\n\n       sleep(3000);\n       d.dispose();\n       sleep(3000);\n    }\n\n    public static void sleep(long millis) {\n        try {\n            Thread.sleep(millis);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\nReceived 0\nReceived 1\nReceived 2\nDisposing on thread RxCachedThreadScheduler-1\n```"]