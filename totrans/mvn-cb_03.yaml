- en: Chapter 3. Maven Lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us start putting Maven to use. In this chapter, we will cover the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Maven lifecycle, phases, and goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the pom file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Maven settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding command-line options in Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Maven profiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a new Maven profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating/deactivating a Maven profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using properties in Maven
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying source encoding for platform-independent builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have set up Maven on our computer. We have created a simple Maven project
    and seen how to build it. We have also set up Maven to run on our preferred IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Let us now understand better how Maven works and how to use it. We will start
    by understanding the Maven build lifecycle as well as the phases and goals that
    make up the lifecycle. We will also explore Maven's project configuration pom
    file as well as the settings file. We will also try to understand what Maven profiles
    are and why they are needed. Finally, we will look at Maven's properties.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Maven lifecycle, phases, and goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we start using Maven, we need to understand the Maven project lifecycle.
    Maven is implemented based around the concept of a build lifecycle. This means
    there is a clearly defined process to build and distribute artifacts with Maven.
  prefs: []
  type: TYPE_NORMAL
- en: What makes up a lifecycle? The stages of a lifecycle are called phases. In each
    phase, one or more goals can be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified as working. For setting up Apache
    Maven, refer to the first three recipes of [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To build a Maven project, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run one of the Maven commands that we are familiar with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the various steps that get executed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven has three built-in build lifecycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default`: The `default` lifecycle handles project build and deployment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`clean`: The `clean` lifecycle cleans up the files and folders produced by
    Maven'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site`: The `site` lifecycle handles the creation of project documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have noticed that you do not have to explicitly specify a lifecycle.
    Instead, what you specify is a phase. Maven infers the lifecycle based on the
    phase specified.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the `package` phase indicates it is the `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: When Maven is run with the `package` phase as a parameter, the `default` build
    lifecycle gets executed. Maven runs all the phases in sequence, up to and including
    the specified phase (in our case, the `package` phase).
  prefs: []
  type: TYPE_NORMAL
- en: 'While each lifecycle has a number of phases, let us look at the important phases
    for each lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `clean` lifecycle: The `clean` phase removes all the files and folders
    created by Maven as part of its build'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `site` lifecycle: The `site` phase generates the project''s documentation,
    which can be published, as well as a template that can be customized further'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `default` lifecycle: The following are some of the important phases of
    the `default` lifecycle:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`validate`: This phase validates that all project information is available
    and correct'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`process-resources`: This phase copies project resources to the destination
    to package'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`compile`: This phase compiles the source code'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test`: This phase runs unit tests within a suitable framework'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`package`: This phase packages the compiled code in its distribution format'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`integration-test`: This phase processes the package in the integration test
    environment'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`verify`: This phase runs checks to verify that the package is valid'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`install`: This phase installs the package in the local repository'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`deploy`: This phase installs the final package in the configured repository'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each phase is made up of plugin goals. A plugin goal is a specific task that
    builds the project. Some goals make sense only in specific phases (for example,
    the compile goal of the Maven Compiler plugin makes sense in the compile phase,
    but the `checkstyle` goal of the Maven Checkstyle plugin can potentially be run
    in any phase). So some goals are bound to a specific phase of a lifecycle, while
    others are not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a table of phases, plugins, and goals:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Phase | Plugin | Goal |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `clean` | Maven Clean plugin | clean |'
  prefs: []
  type: TYPE_TB
- en: '| `site` | Maven Site plugin | site |'
  prefs: []
  type: TYPE_TB
- en: '| `process-resources` | Maven Resources plugin | resource |'
  prefs: []
  type: TYPE_TB
- en: '| `compile` | Maven Compiler plugin | compile |'
  prefs: []
  type: TYPE_TB
- en: '| `test` | Maven Surefire plugin | test |'
  prefs: []
  type: TYPE_TB
- en: '| `package` | Varies based on the packaging; for instance, the Maven JAR plugin
    | jar (in the case of a Maven JAR plugin) |'
  prefs: []
  type: TYPE_TB
- en: '| `install` | Maven Install plugin | install |'
  prefs: []
  type: TYPE_TB
- en: '| `deploy` | Maven Deploy plugin | deploy |'
  prefs: []
  type: TYPE_TB
- en: Understanding the pom file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every Maven project has a pom file that defines what the project is all about
    and how it should be built. Pom is an acronym for **project object model**. Let
    us take a peek at this file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s understand the pom file, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to a Maven project that we created in previous chapters.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the file named `pom.xml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A pom file is an XML file that is based on a specific schema, as specified
    at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also a `modelVersion` element that defines the version of this schema:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These are the basic elements of a pom file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `groupId` element is a unique identifier of the organization to which the
    project belongs. For our sample project, it is `org.packt.cookbook`. It is a good
    practice to follow the reverse domain name notation to specify this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The `artifactId` element is the name of the project. For our sample project,
    it is `simple-project`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `version` element is the specific instance of the project, corresponding
    to the source code at a particular instance of time. In our case, it is `1.0-SNAPSHOT`,
    which is a default version during development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We will explore the difference between the **SNAPSHOT** and concrete versions
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: The combination of `groupId`, `artifactId`, and `version` uniquely identifies
    the project. In this sense, they are the coordinates of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `packaging` element indicates the artifact type of the project. This is
    typically a `jar`, `war`, `zip`, or in some cases, a `pom`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `dependencies` element section of the pom file defines all the dependent
    projects of this project. This would typically be third-party libraries required
    to build, test, and run the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The `parent` section is used to indicate a relationship, specifically a parent-child
    relationship. If the project is part of a multi-module project or inherits project
    information from another project, then the details are specified in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Maven properties are **placeholders**. Their values are accessible anywhere
    in the pom file by using `${key}`, where `key` is the property name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A project with modules is known as a multi-module or **aggregator project**.
    Modules are projects that this pom file lists and are executed as a group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: For more information on multi-module projects refer to [Chapter 9](ch09.html
    "Chapter 9. Multi-module Projects"), *Multi-module Projects*.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Maven settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have got an idea of the essential elements of a pom file, let us
    also examine the various setting properties of Maven.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand the Maven settings, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `settings.xml` file in the `.m2` subfolder of your `HOME` folder, if
    it exists:![How to do it...](img/6124OS_03_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Otherwise, open the `settings.xml` file in the `conf` folder of your Maven installation
    (as defined in `M2_HOME`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven has a global settings file called `settings.xml` in the `conf` folder
    of the Maven installation. The values in this file can be overridden in the user
    settings file— the `settings.xml` file—that is present in the `.m2` subfolder
    of your `HOME` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The settings file contains configurations that are not specific to a project,
    but are global in nature. It also contains information that is not meant to be
    distributed (for example, passwords).
  prefs: []
  type: TYPE_NORMAL
- en: 'Like the pom file, the settings file is also an XML file based on an XML schema.
    It starts as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us now see some of the typical setting configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: The localRepository element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code represents the `localRepository` element in the settings
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have seen this in the *Changing the location of the Maven repository* recipe
    in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*, where
    we wanted to change the default location where Maven dependencies and plugins
    are stored.
  prefs: []
  type: TYPE_NORMAL
- en: The offline element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code represents the `offline` element in the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This setting indicates whether Maven should operate in offline mode; that is,
    it should not download updates or dependencies if they are not available.
  prefs: []
  type: TYPE_NORMAL
- en: The proxies element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We saw proxies in the **Running Maven behind an HTTP proxy server** recipe
    in [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*. The
    following code represents the `proxies` element in the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to specify a proxy server to connect to the Internet. This is
    relevant in enterprises where direct access to the Internet might be blocked due
    to security or other reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The mirrors element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following code represents the `mirrors` element in the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Instead of downloading dependencies from Maven Central, you can configure Maven
    to download them from a mirror of the central repository. This is extremely useful
    in an organization where the repository can be mirrored in a repository manager
    within an organization and all users can download dependencies from this mirror.
  prefs: []
  type: TYPE_NORMAL
- en: The repositories element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Repositories are remote collections of projects that Maven uses to populate
    the required dependencies to a local repository. There are two types of repositories—`releases`
    and `snapshots`—and Maven allows specific configurations for each, as illustrated
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The pluginRepositories element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While repositories store dependencies required for the project, the `pluginRepositories`
    element stores plugin libraries and associated files. Maven distinguishes between
    these two by having separate configurations for both. The elements are the same
    as that for repositories, except that the parent element is `pluginRepositories`.
  prefs: []
  type: TYPE_NORMAL
- en: The servers element
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The repositories for download and deployment are defined by the `repositories`
    and `distributionManagement` elements of the pom file. However, settings such
    as `username` and `password` cannot be distributed in the pom file for confidentiality
    reasons. Maven provides a mechanism to specify this in the settings file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Understanding command-line options in Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the most popular way to run Maven is to specify goals, Maven provides
    a number of command-line options to customize its behavior. They range from specifying
    values for properties, to varying the verbosity of the Maven output. It is useful
    to know some of the arguments, as they will often help with troubleshooting issues
    with Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is set up on your system and is verified as working.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To understand command-line options in Maven, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see an output such as the following screenshot:![How to do it...](img/6124OS_03_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A number of options that Maven supports are displayed in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will briefly discuss the command-line options that Maven provides.
  prefs: []
  type: TYPE_NORMAL
- en: Options
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When there is an error while running Maven, this flag will result in Maven
    displaying a detailed stack trace of the error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `quiet` option is enabled, only errors are displayed. The other outputs
    are not printed. This permits speeding up builds where verbose outputs are usually
    displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We have seen the `version` option to display the Maven version in the first
    three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting
    Started*. This is also a simple way to check if Maven is installed and working:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'When invoked with the `offline` option, Maven does not attempt to download
    any dependency or plugin from the Internet. This option will work correctly, provided
    Maven has all the information required for the project to be built and run. We
    will see how to enable projects to run in offline mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'When enabled with the `debug` option, Maven prints a lot of verbose output
    about every step that it performs. This is typically used to troubleshoot any
    build issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Understanding Maven profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven is designed to create portable builds that are expected to work across
    different platforms and in various runtime environments.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there may be situations where you need to build the same project differently.
    For instance, you may need to build a project differently for the purpose of staging
    and production. You may not want to build a project that requires a Linux library
    on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s understand Maven profiles by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `settings.xml` in the `conf` subfolder of your Maven installation (as specified
    in `M2_HOME`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the commented section of profiles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven provides three type of profiles:'
  prefs: []
  type: TYPE_NORMAL
- en: Per Project profile as defined in the pom file of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Per User profile as defined in the user settings file (in the `.m2` subfolder
    of the user's `HOME` folder)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Global profile as defined in the global settings file (in the `conf` folder
    of `M2_HOME`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By creating different profiles for different variations of the project build,
    you can use the same pom file to create differing builds.
  prefs: []
  type: TYPE_NORMAL
- en: One should be careful to ensure that this does not result in a non-portable
    build.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a new Maven profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us add a simple Maven profile to test our understanding of profiles.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a new Maven profile, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Maven project using the commands specified in the *Creating a simple
    project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in the `pom.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to create a profile: in the project''s pom file or in the
    settings file. It is important to note that, if a profile is active from the settings
    file, its values will override any profiles with equivalent IDs in the pom file.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The profile in `pom.xml` can have the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The profile in `settings.xml` can only have the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Activating/deactivating a Maven profile* recipe in this chapter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating/deactivating a Maven profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A profile can be specified in `pom.xml` or `settings.xml`. Each profile may
    be created for a specific purpose; for instance, to run on a particular platform
    or to run in an integration environment. All profiles may not need to run in all
    cases. Maven provides a mechanism to activate and deactivate a profile as required.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the project where we created the profile to add a new Maven profile section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s perform the following steps to activate/deactivate a Maven profile:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To deactivate a profile, set the following value in the `activeByDefault` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Maven command to check if the profile is active:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for the preceding command is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To activate the profile, set the following value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that the profile is now active, by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output for preceding command is shown as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Profiles can be triggered in one of the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Explicitly: Here, Maven provides a command-line option to invoke a profile,
    shown in the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This invokes the `dev` profile
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Through settings: A profile can be activated in the settings file by setting
    the `<active>` property to `true`. If activated, when the project is built, the
    profile is invoked:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Based on environment variables: The profile can be activated based on any environment
    variable and the value that it has:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If the system property `debug` is defined and has any value, then the profile
    is activated
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Based on OS settings: The following profile will only run on Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Present or missing files: The following profile will be activated if the `target/site`
    file is missing:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using properties in Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven allows us to define as well as use properties. Properties allow us to
    avoid hardcoding values in multiple places such as versions of dependencies. They
    also provide flexibility to the build tool by allowing values to be passed at
    runtime.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s define and use Maven properties by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the pom file of a project that we created earlier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Define a property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the property:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are different types of properties. They are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Environment variables: Prefixing a variable with `env.` will return the value
    of the shell''s environment variable. For example, `${env.PATH}` will return the
    value of the `PATH` variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'pom variables: Prefixing a variable with `project.` will return the value of
    that element in the pom file. For example, `${project.version}` will return the
    value in the `<version>` tag of the pom file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `settings` variable: Prefixing a variable with `settings.` will return
    the value of that element in the settings file. For example, `${settings.offline}`
    will return the value `<offline>` in the settings file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java properties: Any property available through the `System.getProperties()`
    method in Java is available. For example, `${java.home}`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Normal properties: Values that are specified in the `<properties>` tag, which
    is shown in the following example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `${java.version}` command will return `1.7`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Do remember that properties and profiles can break the portability of the project.
    Two specific practices for looking up in problem areas are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'External properties: These are properties defined outside the pom file (in
    a settings file) but used as part of a plugin configuration. The absence of this
    property definition will break the build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Incomplete specification: This is where properties are defined for different
    build environments. A missing definition for one will break the build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Specifying source encoding for platform-independent builds* recipe in this
    chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Specifying source encoding for platform-independent builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let us put our learning of properties to practical use. You will have observed
    the following warning while building the simple project that we created in the
    *Building a simple project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Let us remove this warning if we really do not want the build to be platform
    dependent.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s specify the source encoding for platform-independent builds in our Maven
    project, by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the pom file we created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe that the warning is no longer present.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `project.build.sourceEncoding` property explicitly specifies the encoding
    of the source files. Maven plugins get information about the encoding from the
    value of this property and use it.
  prefs: []
  type: TYPE_NORMAL
- en: This value will be the same on any platform that the project is built on and,
    thus, the build becomes independent of the platform.
  prefs: []
  type: TYPE_NORMAL
