["```java\nimplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\ncompileOnly 'org.projectlombok:lombok'\nannotationProcessor 'org.projectlombok:lombok'\n```", "```java\n@Entity\n@Table(name = \"books\")\n@Data\npublic class Book {\n    @Id @GeneratedValue\n    private Long id;\n    private String title;\n    private String isbn;\n}\n@Entity\n@Table(name = \"publishers\")\n@Data\npublic class Publisher {\n    @Id @GeneratedValue\n    private Long id;\n    private String name;\n    private String address;\n}\n@Entity\n@Table(name = \"authors\")\n@Data\npublic class Author {\n    @Id @GeneratedValue\n    private Long id;\n    private String name;\n    private String biography;\n}\n```", "```java\npublic interface BookRepository extends JpaRepository<Book, Long> {}\n```", "```java\n    version: '3.1'\n    services:\n      db:\n        image: postgres\n        restart: always\n        environment:\n          POSTGRES_PASSWORD: yourpassword\n          POSTGRES_DB: bookstore\n        ports:\n          - \"5432:5432\"\n```", "```java\n        spring.datasource.url=jdbc:postgresql://localhost:5432/bookstore\n        spring.datasource.username=postgres\n        spring.datasource.password=yourpassword\n        spring.jpa.hibernate.ddl-auto=update\n    ```", "```java\n    @ManyToMany\n    private List<Author> authors;\n```", "```java\n    @ManyToOne\n    private Publisher publisher;\n```", "```java\n@Repository\npublic interface BookRepository extends JpaRepository<Book, Long> { }\n```", "```java\n@RestController\n@RequestMapping(\"/books\")\n@RequiredArgsConstructor\npublic class BookController {\n    private final BookRepository bookRepository;\n    @PostMapping\n    @CacheEvict(value = \"books\", allEntries = true) // Invalidate the entire books cache\n    public ResponseEntity<Book> addBook(@RequestBody Book book) {\n        Book savedBook = bookRepository.save(book);\n        return ResponseEntity.ok(savedBook);\n    }\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Book> getBook(@PathVariable Long id) {\n        Optional<Book> book = bookRepository.findById(id);\n        return book.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n```", "```java\n./gradlew bootRun\n```", "```java\n    curl -X POST --location \"http://localhost:8080/publishers\" -H \"Content-Type: application/json\" -d \"{\\\"name\\\": \\\"Publisher Name\\\", \\\"address\\\": \\\"Address of the publisher\\\"}\"\n    ```", "```java\n    {\n      \"id\": 1,\n      \"name\": \"Publisher Name\",\n      \"address\": \"Address of the publisher\"\n    }\n    ```", "```java\n    curl -X POST --location \"http://localhost:8080/authors\"\n        -H \"Content-Type: application/json\"\n        -d \"{\\\"name\\\": \\\"Author Name\\\",\n            \\\"biography\\\": \\\"A long story\\\",\n            \\\"publisher\\\": {\\\"id\\\": 1}}\"\n    ```", "```java\n    curl -X POST --location \"http://localhost:8080/books\"-H \"Content-Type: application/json\" -d \"{\\\"title\\\": \\\"Book title\\\",\\\"isbn\\\": \\\"12345\\\",\\\"authors\\\": [{\\\"id\\\": 1}]}\"\n    ```", "```java\nversion: '3.1'\nservices:\n  db:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: yourpassword\n      POSTGRES_DB: bookstore\n    ports:\n      - \"5432:5432\"\n  mongodb:\n    image: mongo\n    restart: always\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_DATABASE: bookstore\n```", "```java\nspring.data.mongodb.uri=mongodb://localhost:27017/bookstore\n```", "```java\n@Document(collection = \"reviews\")\n@Data\npublic class Review {\n    @Id\n    private String id;\n    private Long bookId;\n    private String reviewerName;\n    private String comment;\n    private int rating;\n}\n```", "```java\npublic interface ReviewRepository extends MongoRepository<Review, String> { }\n```", "```java\n@RestController\n@RequestMapping(\"/reviews\")\n@RequiredArgsConstructor\npublic class ReviewController {\n    private final ReviewRepository reviewRepository;\n    @PostMapping\n    public ResponseEntity<Review> addReview(@RequestBody Review review) {\n        Review savedReview = reviewRepository.save(review);\n        return ResponseEntity.ok(savedReview);\n    }\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Review> getReview(@PathVariable String id) {\n        Optional<Review> review = reviewRepository.findById(id);\n        return review.map(ResponseEntity::ok).orElseGet(() -> ResponseEntity.notFound().build());\n    }\n}\n```", "```java\ncurl -X POST --location \"http://localhost:8080/reviews\"\n    -H \"Content-Type: application/json\"\n    -d \"{\\\"bookId\\\": 1, \\\"reviewerName\\\": \\\"Reader\\\", \\\"comment\\\": \\\"A great book to read\\\", \\\"rating\\\": 5}\"\n```", "```java\n{\n  \"id\": \"65adb0d7c8d33f5ab035b517\",\n  \"bookId\": 1,\n  \"reviewerName\": \"Reader\",\n  \"comment\": \"A great book to read\",\n  \"rating\": 5\n}\n```", "```java\n    implementation 'org.springframework.boot:spring-boot-starter-cache'\n    ```", "```java\n    @SpringBootApplication\n    @EnableCaching\n    public class BookstoreApplication {\n        public static void main(String[] args) {\n            SpringApplication.run(BookstoreApplication.class, args);\n        }\n    }\n    ```", "```java\n@PutMapping(\"/{id}\")\n@CacheEvict(value = \"books\", allEntries = true)\npublic ResponseEntity<Book> updateBook(@PathVariable Long id, @RequestBody Book book) {...}\n@PostMapping\n@CacheEvict(value = \"books\", allEntries = true) // Invalidate the entire books cache\npublic ResponseEntity<Book> addBook(@RequestBody Book book) {...}\n```", "```java\n    @Override\n    @Cacheable( \"books\")\n    Optional<Book> findById(Long id);\n```", "```java\ndependencies {\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-batch'\n    compileOnly 'org.projectlombok:lombok'\n    runtimeOnly 'org.postgresql:postgresql'\n    annotationProcessor 'org.projectlombok:lombok'\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n```", "```java\n@Entity\n@Table(name = \"publishers\")\n@Data\npublic class Publisher {\n    @Id @GeneratedValue\n    private Long id;\n    private String name;\n    private String address;\n}\n```", "```java\n  @Bean\n    public Job importPublisherJob(JobRepository jobRepository, Step step1) {\n        return new JobBuilder(\"importPublisherJob\", jobRepository)\n                .incrementer(new RunIdIncrementer())\n                .start(step1)\n                .build();\n    }\n```", "```java\n@Bean\npublic Step step1(JobRepository jobRepository,\n                  PlatformTransactionManager transactionManager,\n                  ItemReader<Publisher> reader,\n                  ItemProcessor<Publisher, Publisher> processor,\n                  ItemWriter<Publisher> writer) {\n    StepBuilder stepBuilder = new StepBuilder(\"step1\",jobRepository);\n    return stepBuilder.<Publisher, Publisher >chunk(10, transactionManager)\n            .reader(reader)\n            .processor(processor)\n            .writer(writer)\n            .build();\n}\n```", "```java\n@Bean\npublic FlatFileItemReader<Publisher> reader() {\n    return new FlatFileItemReaderBuilder<Publisher>()\n            .name(\"bookItemReader\")\n            .resource(new ClassPathResource(\"publishers.csv\"))\n            .delimited()\n            .names(new String[]{\"name\", \"address\"})\n            .fieldSetMapper(new BeanWrapperFieldSetMapper<>() {{\n                setTargetType(Publisher.class);\n            }}).linesToSkip(1)\n            .build();\n}\n```", "```java\n@Bean\npublic ItemProcessor<Publisher, Publisher> processor() {\n    return publisher -> {\n        publisher.setAddress(publisher.getAddress().toUpperCase());\n        publisher.setName(publisher.getName().toUpperCase());\n        return publisher;\n    };\n}\n```", "```java\n@Bean\npublic JpaItemWriter<Publisher> writer() {\n    JpaItemWriter<Publisher> writer = new JpaItemWriter<>();\n    writer.setEntityManagerFactory(entityManagerFactory);\n    return writer;\n}\n```", "```java\nimplementation 'org.liquibase:liquibase-core'\n```", "```java\nspring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml\n```", "```java\ndatabaseChangeLog:\n  - includeAll:\n      path: db/changelog/changes/\n```", "```java\ndatabaseChangeLog:\n  - changeSet:\n      id: 1\n      author: ahmeric\n      changes:\n        - addColumn:\n            tableName: books\n            columns:\n              - column:\n                  name: published\n                  type: boolean\n                  defaultValue: false\n```", "```java\n@Entity\n@Table(name = \"books\")\n@Data\npublic class Book {\n    @Id @GeneratedValue\n    private Long id;\n    private String title;\n    private String isbn;\n    @ManyToMany\n    private List<Author> authors;\n    private Boolean published;\n}\n```"]