- en: Local Variable Syntax for Lambda Parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java is enhancing its language by extending the use of the reserved type `var` for
    lambda parameters. The sole purpose of this enhancement is to align the syntax
    of lambda parameters with the syntax of declaring local variables with `var`.
    The parameters of implicitly-typed lambda expressions have been inferred by the
    compiler since lambdas were introduced, in Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Implicitly and explicitly-typed lambda parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use `var` with lambda parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using annotations with lambda parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To execute the code in this chapter, you must install JDK 11 (or a later version)
    on your system. All of the code in this chapter can be accessed at [https://github.com/PacktPublishing/Java-11-and-12-New-Features](https://github.com/PacktPublishing/Java-11-and-12-New-Features)[.](https://github.com/PacktPublishing/Java-11-and-12-New-Features)
  prefs: []
  type: TYPE_NORMAL
- en: Lambda expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **lambda expression** is an anonymous function that can accept input parameters
    and return a value. A lambda expression can specify the types of all (or none)
    of its input parameters; lambda expressions can be explicitly-typed or implicitly-typed.
  prefs: []
  type: TYPE_NORMAL
- en: Explicitly-typed lambda expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A lambda expression that explicitly specifies the type of all of its input
    parameters is referred to as an explicitly-typed lambda expression. The following
    code illustrates a few examples (with the input parameters in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The code in all of the preceding examples explicitly defines the types of all
    of the parameters that are being passed to it. If a lambda expression doesn't
    accept any parameter, it uses a pair of empty round braces (`()`).
  prefs: []
  type: TYPE_NORMAL
- en: 'If this makes you wonder the types of the variables to which the lambda expressions
    will be assigned, here''s the complete code for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Implicitly-typed lambda expressions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A lambda expression that doesn't specify the types of any of its input parameters
    is referred to as an **implicitly-typed** lambda expression. In this case, the
    compiler infers the type of the method parameters and adds it to the bytecode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the lambda expression from the preceding section, dropping the
    types of the input parameters (the modified code is in bold):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can''t mix implicitly-typed and explicitly-typed parameters in lambda expressions.
    For instance, the following code won''t compile because it explicitly specifies
    type of `x`, but not for `y`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Lambda parameters and type inference with var
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In JDK 11, you'll be able to use `var` with lambda parameters. However, this
    is just syntactic sugar. The reserved type name, `var`, was introduced in JDK
    10, to enable developers to declare local variables without using an explicit
    data type (to let the compiler infer the data type during compilation). But implicitly-typed
    lambda expressions were already doing this by using only the variable name for
    their parameters, without their types (examples are included in the preceding
    section).
  prefs: []
  type: TYPE_NORMAL
- en: Adding var to lambda parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java allows for the use of the reserved word `var` with lambda parameters, to
    align its syntax with the declaration of local variables, which can now use `var`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify the examples from the preceding section, adding `var` to the
    lambda parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The main reason for allowing the addition of `var` to lambda parameters is to
    align the usage with the syntax of the local parameters declared using `var`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using `var` with lambda parameters, you must use it with all of
    the lambda parameters. You can''t mix implicitly-typed or explicitly-typed parameters
    with the parameters that use `var`. The following code example won''t compile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You cannot enclose the parameters of a lambda expression using round brackets (`()`)
    if you are using just one method parameter. But, you can''t drop `()` if you are
    using `var` with your lambda parameters. Here is some sample code to illustrate
    this further:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can't mix implicitly-typed or explicitly-typed lambda parameters with the
    parameters that use `var`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding annotations to lambda parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can use annotations with lambda parameters if you define them with either
    explicit data types or by using the reserved type `var`. Annotations could be
    used to mark null or non-null lambda parameters. Here''s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered using the reserved type `var` with implicitly-typed
    lambda expressions. We started by identifying the syntax differences in explicitly-typed
    and implicitly-typed lambda expressions.
  prefs: []
  type: TYPE_NORMAL
- en: Through examples, you saw how adding `var` to lambda parameters is just syntactic
    sugar, since you have been able to use type inference with implicitly-typed lambda
    parameters ever since they were introduced in Java 8\. Using `var` with lambda
    parameters aligns their syntax with the local variables defined using `var`. Using `var`
    also enables developers to use annotations with lambda parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll work with the HTTP Client API, which will be added
    to Java 11 as one of its core APIs.
  prefs: []
  type: TYPE_NORMAL
