- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section briefly introduces the coverage of this book, the technical skills
    you'll need to get started, and the software requirements required to complete
    all of the included activities and exercises.
  prefs: []
  type: TYPE_NORMAL
- en: About the Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You already know you want to learn Clojure, and a smart way to learn Clojure
    is to learn by doing. *The Clojure Workshop* focuses on building up your practical
    skills so that you can write clean, expressive code with a language that is great
    for applications where concurrency and interoperability with the Java Virtual
    Machine are a priority. You'll learn from real examples that lead to real results.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout *The Clojure Workshop*, you'll take an engaging step-by-step approach
    to understanding Clojure. You won't have to sit through any unnecessary theory.
    If you're short on time, you can jump into a single exercise each day or spend
    an entire weekend learning about Clojure web development with Ring. It's your
    choice. Learning on your terms, you'll build up and reinforce key skills in a
    way that feels rewarding.
  prefs: []
  type: TYPE_NORMAL
- en: Every physical print copy of *The Clojure Workshop* unlocks access to the interactive
    edition. With videos detailing all exercises and activities, you'll always have
    a guided solution. You can also benchmark yourself against assessments, track
    progress, and receive content updates. You'll even earn a secure credential that
    you can share and verify online upon completion. It's a premium learning experience
    that's included with your print copy. To redeem it, follow the instructions located
    at the start of your Clojure book.
  prefs: []
  type: TYPE_NORMAL
- en: Fast-paced and direct, *The Clojure Workshop* is ideal for Clojure beginners.
    You'll build and iterate on your code like a software developer, learning along
    the way. This process means that you'll find that your new skills stick, embedded
    as best practice – a solid foundation for the years ahead.
  prefs: []
  type: TYPE_NORMAL
- en: Audience
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*The Clojure Workshop* is an ideal tutorial for the Clojure beginner who is
    just getting started. A basic understanding of JavaScript and Java would be ideal
    but not necessary. *The Clojure Workshop* will guide you well throughout the discussion
    on the interoperability of these technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: About the Chapters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Chapter 1*, *Hello REPL!*, gets you typing code immediately. You''ll learn
    the basics of the language, as well as how to get the most out of Clojure''s interactive
    REPL.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 2*, *Data Types and Immutability*, provides more building blocks,
    but these are Clojure building blocks that expose you to one of Clojure''s key
    features: immutability.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 3*, *Functions in Depth*, is a deeper dive into one of the areas that
    sets Clojure apart: the functional programming paradigm. These are the tools that
    will power you through the rest of the book.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 4*, *Mapping and Filtering*, is the first stop on your exploration
    of Clojure collections. The patterns and techniques here are all about learning
    to solve problems. The map and filter functions are two of the foremost Clojure
    workhorses.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 5*, *Many to One: Reducing*, will really start getting you thinking
    in new ways. The data-shaping techniques in this chapter complement those in the
    previous chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 6*, *Recursion and Looping*, takes your collection techniques to the
    next level. This chapter will make you think. By the end of the chapter, you''ll
    be ready to handle tricky problems using advanced functional patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 7*, *Recursion II: Lazy Sequences*, completes the panorama of Clojure
    collections with a look at a distinctive Clojure feature. If you can write functions
    to process complex tree structures, you are ready to use Clojure to solve big
    problems.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 8*, *Namespaces, Libraries, and Leiningen*, provides a close look
    at the tools you need for building real-world Clojure and ClojureScript applications.
    You have the skills to write good Clojure code; now you need to know how to put
    your application together.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 9*, *Host Platform Interoperability with Java and JavaScript*, brings
    you up to speed on a topic that is one of Clojure''s great strengths but can also
    be daunting. As a hosted language, Clojure gives you access to the underlying
    platform. Knowing how and when to use that power is a key Clojure skill.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 10*, *Testing*, is another important step in serious, real-world programming.
    Understanding Clojure and ClojureScript testing stories is a skill every professional
    programmer needs.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 11*, *Macros*, will help you understand a distinctive feature of the
    Lisp family of languages. Macros allow rich abstraction, but underneath the surface,
    there are a lot of important practical details.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 12*, *Concurrency*, reveals another unique Clojure strength. This
    chapter will give you a taste for building multithreaded applications on the Java
    Virtual Machine or event-driven ClojureScript single-page applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 13*, *Database Interaction and the Application Layer*, shows you how
    to leverage Clojure''s database libraries. Many real applications require databases,
    so these skills are essential.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 14*, *HTTP with Ring*, shows you how to set up and run a Clojure-driven
    web server. The Ring libraries are the most widely used HTTP technology in the
    Clojure world.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Chapter 15*, *The Frontend: A ClojureScript UI*, helps put together many of
    the things you''ve already learned about ClojureScript, the last layer on a Clojure
    web stack.'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "Please
    note that this function is in the `clojure.string` namespace, which is not referred
    to by default."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Words that you see on the screen, for example, in menus or dialog boxes, also
    appear in the text like this: "When you click on the `Fetch Images` button, the
    images appear with authors'' names."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In cases where inputting and executing some code gives an immediate output,
    this is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the example above, the code entered is `(sort [3 7 5 1 9])`, and the output
    is `(1 3 5 7 9)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'New terms and important words are shown like this: "Welcome to the Clojure
    **Read Eval Print Loop** (**REPL**), a command-line interface that we can use
    to interact with a running Clojure program."'
  prefs: []
  type: TYPE_NORMAL
- en: 'Key parts of code snippets are highlighted as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Long code snippets are truncated and the corresponding names of the code files
    on GitHub are placed at the top of the truncated code. The permalinks to the entire
    code are placed below the code snippet. It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before You Begin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each great journey begins with a humble step. Our upcoming adventure in the
    land of Clojure is no exception. Before we can do awesome things with data, we
    need to be prepared with a productive environment. In this section, we will see
    how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before installing Clojure, you need to make sure that you have the **Java Developer''s
    Kit** (**JDK**) installed on your computer. For Mac and Linux users, prebuilt
    binaries are a few keystrokes away. On Mac, for Homebrew users, you can just type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'On Debian-based Linux distributions, you can check which version is available
    by typing the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Depending on the output, you can then type something like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Clojure does not require a particularly recent version of the JDK.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Windows, you can download the OpenJDK installer here: [https://packt.live/3aBu1Qg](https://packt.live/3aBu1Qg).
    Once you have the installer, click on it to run, then follow the instructions.'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Clojure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once you have a working JDK on your system, setting up Clojure is easy with
    the Leiningen tool.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the appropriate version (Windows or Mac/Linux) from the Leiningen home
    page, here: [https://leiningen.org/](https://leiningen.org/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place Leiningen in a directory that is part of your system's `$PATH` and make
    it executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On Mac or Linux, this means putting it in a directory such as `~/bin` and calling
    `chmod`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'On Windows, to change the `$PATH` variable, go to `Control Panel` > `User Accounts`
    > `User Accounts` and click on `Change My Environment Variables`. In the pane
    showing the user variables for your personal user account, click on `Path` and
    then choose `Edit`.![Figure 0.1: User accounts'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14502_00_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 0.1: User accounts'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click on `New` to add a line, then type in the path to your new `bin` directory:![Figure
    0.2: Adding the path in bin directory'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B14502_00_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 0.2: Adding the path in bin directory'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that Leiningen is installed and executable, from the command line, simply
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Leiningen will fetch Clojure and all the libraries it needs to manage Clojure.
    And now, by simply typing `lein repl`, you''ll have your very first Clojure REPL:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 0.3: REPL started'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B14502_00_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 0.3: REPL started'
  prefs: []
  type: TYPE_NORMAL
- en: Editors and IDEs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While you can certainly do a lot with a REPL running in a console, it's much
    more convenient to integrate the Clojure REPL into your favorite editor. Plugins
    exist for just about every editor and environment out there, from Vim to Emacs
    and from IntelliJ to Electron or Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: We can't cover all the possible environments here, but we recommend using the
    coding tools you are already familiar with and adding a Clojure plugin. The best
    code editor is the one you enjoy using. As long as there is a Clojure plugin for
    it, you should be up and running in no time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Code Bundle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download the code files from GitHub at [https://packt.live/2vbksal](https://packt.live/2vbksal).
    Refer to these code files for the complete code bundle.
  prefs: []
  type: TYPE_NORMAL
- en: If you have any issues or questions about installation, please email us at `workshops@packt.com`.
  prefs: []
  type: TYPE_NORMAL
- en: The high-quality color images used in book can be found at [https://packt.live/2O5EzNX](https://packt.live/2O5EzNX)
  prefs: []
  type: TYPE_NORMAL
