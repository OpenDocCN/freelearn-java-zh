["```java\npublic class Adder {\n  public Integer add(Integer first, Integer second) {\n    if (first == null || second == null) {\n      throw new IllegalArgumentException(\"Invalid inputs first=[\" + first+ \"], second=[\" + second + \"]\");\n    }\n\n    return first + second;\n  }\n}\n```", "```java\npublic class AdderTest {\n  Adder adder = new Adder();\n\n @Test(expected=IllegalArgumentException.class)\n public void should_throw_exception_when_encounters_a_NULL_input(){\n adder.add(null, 1);\n }\n\n @Test(expected=IllegalArgumentException.class)\n public void should_throw_exception_when_second_input_is_NULL(){\n adder.add(2, null);\n }\n\n  @Test\n  public void should_return_zero_when_both_inputs_are_zero(){\n    int actual =adder.add(0, 0);\n    assertEquals(0, actual);\n  }\n\n  @Test\n  public void should_return_first_input_when_second_input_is_zero()  {\n    int actual =adder.add(1, 0);\n    assertEquals(1, actual);\n  }\n\n  @Test\n  public void should_return_second_input_when_first_input_is_zero()  {\n    int actual =adder.add(0, 2);\n    assertEquals(2, actual);\n  }\n\n  @Test\n  public void should_return_zero_when_summation_is_zero(){\n    int actual =adder.add(5, -5);\n    assertEquals(0, actual);\n  }\n\n  @Test public void should_return_a_negative_when_both_inputs_are_negative() {\n    int actual =adder.add(-8, -5);\n    assertTrue(actual < 0);\n  }\n\n  @Test\n  public void should_overflow_when_summation_exceeds_integer_limit() {\n    int actual =adder.add(Integer.MAX_VALUE, 1);\n    assertTrue(actual< 0);\n  }\n}\n```", "```java\npublic class Facade {\n  private final StringService stringService;\n  public Facade(StringService utility) {\n    this.stringService= utility;\n  }\n\n  public Object doSomething(Object o) {\n    if (o instanceof String) {\n      return stringService.format((String) o);\n    }\n\n    if (o instanceof Integer) {\n      return Integer.MIN_VALUE;\n    }\n\n    return null;\n  }\n}\n```", "```java\npublic class StringDecorator {\n  public String decorate(String object) {\n    return object+\"!\";\n  }\n}\n```", "```java\npublic interface PrinterService {\n  void print(String text);\n}\n```", "```java\npublic class Facade {\n  private final Decorator decorator;\n  private final PrinterService printerService;\n\n  public Facade(Decorator decorator, PrinterService printerService) {\n    this.decorator = decorator;\n    this.printerService = printerService;\n  }\n\n  public void process(String object) {\n    printerService.print(decorator.decorate(object));  \n   }\n\n}\n```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class FacadeTest {\n\n  @Mock PrinterService mockService;\n  Facade facade;\n\n  @Before\n  public void setUp() throws Exception {\n    facade = new Facade(new StringDecorator(), mockService);\n  }\n\n  @Test\n  public void test() {\n    String input = \"hello\";\n    doNothing().when(mockService).print(anyString());\n    facade.process(input);\n    verify(mockService).print(anyString());\n  }\n\n}\n```", "```java\npublic class Employee {\n  private String lastName;\n  private String name;\n\n  public Employee(String lastName , String name) {\n    this.lastName = lastName;\n    this.name = name;\n  }\n\n  public String getLastName() {\n    return lastName;\n  }\n\n  public String getName() {\n    return name;\n  }\n\n}\n```", "```java\npublic class HRService {\n\n  private Hashtable<String, Integer> employeeCountMap = new Hashtable<String, Integer>();\n\n  public String generateUniqueIdFor(Employee emp) {\n    Integer count = employeeCountMap.get(emp.getLastName());\n    if (count == null) {\n      count = 1;\n    } else {\n      count++;\n    }\n    employeeCountMap.put(emp.getLastName(), count);\n    return emp.getLastName()+(count < 9 ? \"0\"+count:\"\"+count);\n  }\n}\n```", "```java\npublic class HRServiceTest {\n  String familyName = \"Smith\";\n  static HRService service = new HRService();\n\n  @Test\n  public void when_one_employee_RETURNS_familyName01() throws Exception {\n    Employee johnSmith = new Employee(familyName, \"John\");\n    String id = service.generateUniqueIdFor(johnSmith);\n    assertEquals(familyName + \"01\", id);\n  }\n\n  //This test will fail, to fix this problem remove the static modifier\n  @Test\n  public void when_many_employees_RETURNS_familyName_and_count() {\n    Employee johnSmith = new Employee(familyName, \"John\");\n    Employee bobSmith = new Employee(familyName, \"Bob\");\n\n    String id = service.generateUniqueIdFor(johnSmith);\n    id = service.generateUniqueIdFor(bobSmith);\n    assertEquals(familyName + \"02\", id);\n  }\n\n}\n```", "```java\npublic interface EmployeeService {\n  public void doSomething(Employee emp);\n}\n```", "```java\npublic abstract class BaseEmployeeTest {\n\n  protected HashMap<String, Employee> employee ;\n\n  @Before\n  public void setUp() {\n    employee = new HashMap<String, Employee>();\n    employee.put(\"1\", new Employee(\"English\", \"Will\"));\n    employee.put(\"2\", new Employee(\"Cushing\", \"Robert\"));\n  }\n}\n```", "```java\npublic class EmployeeServiceTest extends BaseEmployeeTest {\n\n  EmployeeService service;\n  @Before\n  public void setUp() {\n    service = new EmployeeServiceImpl();\n  }\n  @Test\n  public void someTest() throws Exception {\n    for(Employee emp:employee.values()) {\n      service.doSomething(emp);\n    }\n  }\n}\n```", "```java\n  @Before\n  public void setUp() {\n    super.setUp();\n    service = new EmployeeServiceImpl();\n  }\n```", "```java\nclass CurrencyFormatter{\n\n  public static String format(double amount) {\n    NumberFormat format =NumberFormat.getCurrencyInstance();\n    return format.format(amount);\n  }\n}\n```", "```java\npublic class LocaleTest {\n\n  @Test\n  public void currencyRoundsOff() throws Exception {\n    assertEquals(\"$101.00\", CurrencyFormatter.format(100.999));\n  }\n}\n```", "```java\npublic class LocaleTest {\n  private Locale defaultLocale;\n  @Before\n  public void setUp() {\n    defaultLocale = Locale.getDefault();\n    Locale.setDefault(Locale.GERMANY);\n  }\n  @After\n  public void restore() {\n    Locale.setDefault(defaultLocale);\n  }\n  @Test\n  public void currencyRoundsOff() throws Exception {\n    assertEquals(\"$101.00\", CurrencyFormatter.format(100.999));\n  }\n}\n```", "```java\nCalendar cal = Calendar.getInstance ();\nDate now = cal.getTime();\n\n//Next month\ncal.add(Calendar.MONTH,1);\nDate futureMonth = cal.getTime();\n\n//Adding two days\ncal.add(Calendar.DATE,2);\nDate futureDate = cal.getTime();\n\n//Adding a year\ncal.add(Calendar.YEAR,1);\nDate futureYear = cal.getTime();\n\n//Adding 6 hours\ncal.add(Calendar.HOUR,6);\nDate futureHour = cal.getTime();\n\n//Adding 10 minutes\ncal.add(Calendar.MINUTE,10);\nDate futureMinutes = cal.getTime();\n\n//Adding 19 minutes\ncal.add(Calendar.SECOND,19);\nDate futureSec = cal.getTime();\n```", "```java\n@Test\npublic void currencyRoundsOff() throws Exception {\n  assertEquals(CurrencyFormatter.format(100.999), \"$101.00\");\n}\n```", "```java\n passes a meaningful error message:\n```", "```java\n@Test\npublic void currencyRoundsOff() throws Exception {\n  assertEquals(\"Currency formatting failed\", $101.00\", CurrencyFormatter.format(100.999));\n}\n```", "```java\n@Test\npublic void currencyRoundsOff() throws Exception {\n  assertNotNull(CurrencyFormatter.format(100.999));\n  assertTrue(CurrencyFormatter.format(100.999).contains(\"$\"));\n  assertEquals(\"$101.00\", CurrencyFormatter.format(100.999));\n}\n```", "```java\n@Test\npublic void currencyRoundsOff() throws Exception {\n  assertNotNull(\"Currency is NULL\", CurrencyFormatter.format(100.999));\n  assertTrue(\"Currency is not USD($)\", CurrencyFormatter.format(100.999).contains(\"$\"));\n  assertEquals(\"Wrong formatting\", \"$101.00\", CurrencyFormatter.format(100.999));\n}\n```", "```java\n    public class Calculator {\n\n      public int divide(int op1, int op2)  {\n        return op1/op2;\n      }\n    }\n    ```", "```java\n    @Test\n    public void divideByZero_throws_exception() throws Exception {\n      try {\n        calc.divide(1, 0);\n        fail(\"Should not reach here\");\n      } catch (ArithmeticException e) {\n\n      }\n    }\n    ```", "```java\n      @Test(expected = ArithmeticException.class)\n      public void divideByZero_throws_exception() throws Exception {\n        calc.divide(1, 0);\n      }\n    ```", "```java\n    public class CalculatorTest {\n\n      @Rule\n      public ExpectedException expectedException= ExpectedException.none();\n\n      Calculator calc = new Calculator();\n\n      @Test\n      public void divideByZero_throws_exception(){\n        expectedException.expect(ArithmeticException.class);\n        expectedException.expectMessage(\"/ by zero\");\n        calc.divide(1, 0);\n      }\n    }\n    ```", "```java\n      @Test\n      public void fails_when_an_exception_is_thrown()  {\n        try {\n          calc.divide(1, 0);\n        }catch(Exception ex) {\n          fail(\"Should not throw an exception\");\n        }\n      }\n    ```", "```java\n      @Test\n      public void fails_when_an_exception_is_thrown()  {\n        calc.divide(1, 0);\n      }\n    ```", "```java\n      @Test\n      public void fails_when_an_exception_is_thrown()  {\n        boolean isFailed = false;\n        try {\n          calc.divide(1, 0);\n        }catch(Exception ex) {\n          isFailed = true;\n        }\n\n        assertTrue(isFailed);\n      }\n    ```", "```java\n    public int sum(int... args) throws NumberOverflowException{\n      int sum = 0;\n      for(int val:args) {\n        if(Integer.MAX_VALUE - sum < val) {\n          throw new NumberOverflowException(\"Number overflow\");\n        }\n        sum+=val;\n      }\n\n      return sum;\n\n    }\n    ```", "```java\n      @Test\n      public void fails_when_an_exception_is_thrown()  {\n        try {\n          int sum = calc.sum(1,2,3);\n          assertEquals(6, sum);\n        } catch (NumberOverflowException e) {\n\n        }\n      }\n    ```", "```java\n      @Test\n      public void fails_when_an_exception_is_thrown() throws \n    Exception {\n        int sum = calc.sum(1,2,3);\n        assertEquals(6, sum);\n      }\n    ```", "```java\n    public void fails_when_an_exception_is_thrown() throws NumberOverflowException{\n\n    }\n    ```", "```java\nPerson objects for check in, a patient johnPeterson, and his guarantor johnsDad:\n```", "```java\nPerson johnsDad = new Person();\n   Address newYorkBayArea = new Address();\n   newYorkBayArea.setAddressType(AddressType.Residential);\n   newYorkBayArea.setCountry(\"US\");\n   newYorkBayArea.setState(\"NY\");\n   newYorkBayArea.setZip(\"49355\");\n   newYorkBayArea.setStreet(\"12/e xyz Avenue\");\n   johnsDad.addAddress(newYorkBayArea);\n   johnsDad.setEmail(\"dontDisturb@my.org\");\n   johnsDad.setFirstName(\"Freddy\");\n   johnsDad.setLastName(\"Peterson\");\n   daddy.setPerson(johnsDad);\n\n   Person johnPeterson = new Person();\n   Address mavernPhilly = new Address();\n   mavernPhilly.setAddressType(AddressType.Residential);\n   mavernPhilly.setCountry(\"US\");\n   mavernPhilly.setState(\"PA\");\n   mavernPhilly.setZip(\"19355\");\n   mavernPhilly.setStreet(\"123 Frazer\");\n   johnPeterson.addAddress(mavernPhilly);\n   johnPeterson.setEmail(\"johnYou12345@gmail.com\");\n   johnPeterson.setFirstName(\"John\");\n   johnPeterson.setLastName(\"Peterson\");\n```", "```java\nprotected Person newPerson(Address newYorkBayArea, StringlastName, String email, String firstName) {\n  Person person = new Person();\n  person.addAddress(newYorkBayArea);\n  person.setEmail(email);\n  person.setFirstName(firstName);\n  person.setLastName(lastName);\n  return person;\n}\n\nprotected Address newAddress(String street, String country, String state, String zip, AddressType residential) {\n  Address address = new Address();\n  address.setAddressType(residential);\n  address.setCountry(country);\n  address.setState(state);\n  address.setZip(zip);\n  address.setStreet(street);\n  return address;\n}\n```", "```java\nAddress newYorkBayArea = newAddress(\"12/e xyz Avenue\", \"US\", \"NY\",\"49355\", AddressType.Residential);\n\nPerson johnsDad = newPerson(newYorkBayArea, \"Peterson\",\"dontDisturb@my.org\", \"Freddy\");\n\nAddress mavernPhilly = newAddress(\"123 Frazer\", \"US\", \"PA\", \"19355\", AddressType.Residential);\n\nPerson johnPeterson = newPerson(mavernPhilly, \"Peterson\", \"johnYou12345@gmail.com\", \"John\");\n```", "```java\npublic class Message {\n  private String jmsMessageID;\n  private String header;\n  private Object payload;\n  private int eventType;\n}\n```", "```java\npublic interface MessagingService {\n  String publish(Object message);\n  List<Message> retrieveByMessageId(String jmsMessageId);\n}\n```", "```java\n@RunWith(MockitoJUnitRunner.class)\npublic class MessagingServiceTest {\n  MessagingService service = new MessagingServiceImpl();\n\n  @Test\n  public void logs_messages() throws Exception {\n    String msgId = service.publish(new String(\"hello world\"));\n    for(Message msg:service.retrieveByMessageId(msgId)) {\n      if(msg.getEventType() == 2) {\n        assertEquals(\"hello world\", msg.getPayload());\n        break;\n      }\n    }\n  }\n}\n```", "```java\n    public final class EncounterManager {\n      public boolean isHack = false;\n\n      public boolean save(Map data) {\n        if(isHack) {\n          return true;\n        }\n        Encounter enc = new EncounterServiceImpl().checkIn(buildCheckinRqst(data));\n        return enc != null;\n      }\n    }\n    ```", "```java\n    public final class EncounterManager {\n      private List<Encounter> retrieveEncounters() {\n        if (encounters == null) {\n          Patient patient = new Patient();\n          patient.setPatientId(patientId);\n          new EncounterServiceImpl().retreiveBy(patient);\n        }\n        return encounters;\n      }\n\n      public List<Encounter> encounters;\n      public void setEncounters(List<Encounter> encounters) {\n        this.encounters = encounters;\n      }\n    }\n    ```", "```java\n    @Override\n    public int hashCode() {\n      return isHack ? HACKED_NUMBER : 0;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n      if (obj instanceof EncounterManager) {\n        return isHack && ((EncounterManager) obj).isHack;\n      }\n      return false;\n    }\n    ```", "```java\n@Test\npublic void checks_in_patient() throws Exception {\n  createCheckInRequestForAPatientWithAGuarantor();\n  checkInaPatient();\n  assertResult();\n}\n```", "```java\npublic void checks_in_patient() throws Exception {\n  CheckInRequest request = new CheckInRequest();\n  request.setCheckInDate(new Date());\n  request.setDisease(\"Vomiting\");\n  request.setDoctor(\"Dr. Mike Hussey\");\n\n  String country = \"US\";\n  String johnsStreetAddress = \"123 Frazer\";\n  String johnsState = \"PA\";\n  String johnsZipCode = \"19355\";\n  Address johnsAddressMavernPhilly = buildAddress(johnsStreetAddress, country, johnsState, johnsZipCode,  AddressType.Residential);\n\n  String johnsEmailId = \"johnYou12345@gmail.com\";\n  String johnsFirstName = \"John\";\n  String familyName = \"Peterson\";\n\n  Person johnPeterson = buildPerson(johnsAddressMavernPhilly, familyName,johnsEmailId, johnsFirstName);\n\n  request.setPerson(johnPeterson);\n\n  Guarantor daddy = new Guarantor();\n  daddy.setGuarantorType(GuarantorType.Person);\n  String dadsStreetAddress = \"12/e xyz Avenue\";\n  String dadsState = \"NY\";\n  String dadsZipCode = \"49355\";\n  Address dadsAddressNYBayArea =buildAddress(dadsStreetAddress, country, dadsState,dadsZipCode, AddressType.Residential);\n  String dadsEmail = \"dontDisturb@my.org\";\n  String dadsFirstName = \"Freddy\";\n  Person johnsDad = buildPerson(dadsAddressNYBayArea, familyName,  dadsEmail, dadsFirstName);\n  daddy.setPerson(johnsDad);\n  request.setGuarantor(daddy);\n}\n```", "```java\npublic Person setFirstName(String firstName) {\n  this.firstName = firstName;\n  return this;\n}\n\npublic Person setLastName(String lastName) {\n  this.lastName = lastName;\n  return this;\n}\n```", "```java\nPerson mark = new Person().setEmail(\"mark@gmail.com\").setFirstName(\"Mark\").setPhoneNumber1(\"444-999-0090\");\n```"]