["```java\npackage com.ensode.jakartaeebook;\nimport jakarta.ejb.Stateless;\n@Stateless\npublic class SimpleSessionBean implements SimpleSession{\n  private final String message =\n    \"If you don't see this, it didn't work!\";\n  @Override\n  public String getMessage() {\n    return message;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook;\nimport jakarta.ejb.Remote;\n@Remote\npublic interface SimpleSession {\n  public String getMessage();\n}\n```", "```java\npackage com.ensode.jakartaeebook;\nimport jakarta.ejb.EJB;\nimport javax.naming.NamingException;\npublic class SessionBeanClient {\n  @EJB\n  private static SimpleSession simpleSession;\n  private void invokeSessionBeanMethods() throws\n    NamingException {\n    System.out.println(simpleSession.getMessage());\n    System.out.println(\"\\nSimpleSession is of type: \"\n        + simpleSession.getClass().getName());\n  }\n  public static void main(String[] args)\n    throws NamingException {\n    new SessionBeanClient().invokeSessionBeanMethods();\n  }\n}\n```", "```java\nappclient -client simplesessionbeanclient.jar \n```", "```java\nIf you don't see this, it didn't work!\nSimpleSession is of type: com.ensode.jakartaeebook._SimpleSession_Wrapper\n```", "```java\npackage com.ensode.jakartaeebook;\n//imports omitted for brevity\n@Stateful\npublic class CustomerDaoBean implements CustomerDao {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Override\n  public void saveCustomer(Customer customer) {\n    if (customer.getCustomerId() == null) {\n      entityManager.persist(customer);\n    } else {\n      entityManager.merge(customer);\n    }\n  }\n  @Override\n  public Customer getCustomer(Long customerId) {\n    Customer customer;\n    customer = entityManager.find(Customer.class,\n      customerId);\n    return customer;\n  }\n  @Override\n  public void deleteCustomer(Customer customer) {\n    entityManager.remove(customer);\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.facesjpa;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class CustomerController implements Serializable {\n  @EJB\n  private CustomerDaoBean customerDaoBean;\n //variable declarations omitted for brevity\n  public CustomerController() {\n    customer = new Customer();\n  }\n  public String saveCustomer() {\n    String returnValue = \"customer_saved\";\n    try {\n      populateCustomer();\n      customerDaoBean.saveCustomer(customer);\n    } catch (Exception e) {\n      e.printStackTrace();\n      returnValue = \"error_saving_customer\";\n    }\n    return returnValue;\n  }\n  private void populateCustomer() {\n     //method implementation omitted for brevity\n  }\n  //getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.singletonsession;\n//imports omiktted for brevity\n@Singleton\npublic class SingletonSessionBean implements\n  SingletonSessionBeanRemote {\n  @PersistenceContext\n  private EntityManager entityManager;\n  private List<UsStates> stateList;\n  @PostConstruct\n  public void init() {\n    Query query = entityManager.createQuery(\n      \"Select us from UsStates us\");\n    stateList = query.getResultList();\n  }\n  @Override\n  public List<UsStates> getStateList() {\n    return stateList;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.asynchronousmethods;\n//imports omitted for brevity\n@Stateless\npublic class AsynchronousSessionBean implements\n    AsynchronousSessionBeanRemote {\n  private static Logger logger = Logger.getLogger(\n    AsynchronousSessionBean.class.getName());\n  @Asynchronous\n  @Override\n  public void slowMethod() throws InterruptedException{\n    long startTime = System.currentTimeMillis();\n    logger.log(Level.INFO, \"entering slowMethod()\");\n    Thread.sleep(10000); //simulate processing for 10 seconds\n    logger.log(Level.INFO, \"leaving slowMethod()\");\n    long endTime = System.currentTimeMillis();\n    logger.log(Level.INFO, \"execution took {0} milliseconds\",\n      endTime - startTime)\n  }\n  @Asynchronous\n  @Override\n  public Future<Long> slowMethodWithReturnValue() throws\n    InterruptedException{\n    Thread.sleep(15000); //simulate processing for 15 seconds\n    return new AsyncResult<>(42L);\n  }\n}\n```", "```java\npackage com.ensode.jakarteebook.asynchronousmethodsclient;\n//imports omitted for brevity\npublic class App {\n  @EJB\n  private static AsynchronousSessionBeanRemote async;\n  public void invokeEjbMethods() {\n    async.slowMethod();\n    Future<Long> retVal\n        = async.slowMethodWithReturnValue();\n    if (!retVal.isDone()) {\n      System.out.println(\"Canceling second method call\");\n      retVal.cancel(true);\n    } else {\n      try {\n        System.out.println(\"second method call done, \"\n            + \"return value is: \" + retVal.get());\n      } catch (Exception ex) {\n        Logger.getLogger(App.class.getName()).\n            log(Level.SEVERE, null, ex);\n      }\n    }\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook;\n//imports omitted for brevity\n@JMSDestinationDefinition(\n    name = \"java:global/queue/JakartaEEBookQueue\",\n    interfaceName = \"jakarta.jms.Queue\",\n    destinationName = \"JakartaEEBookQueue\"\n)\n@MessageDriven(activationConfig = {\n  @ActivationConfigProperty(propertyName = \"destinationLookup»,\n      propertyValue = \"java:global/queue/JakartaEEBookQueue\"),\n  @ActivationConfigProperty(propertyName = \"destinationType\",\n      propertyValue = \"jakarta.jms.Queue\")\n})\npublic class ExampleMessageDrivenBean implements MessageListener {\n  private static final Logger LOG = Logger.getLogger(\n    ExampleMessageDrivenBean.class.getName());\n  public void onMessage(Message message) {\n    TextMessage textMessage = (TextMessage) message;\n    try {\n      LOG.log(Level.INFO, \"Received message: \");\n      LOG.log(Level.INFO, textMessage.getText());\n    } catch (JMSException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\n@TransactionAttribute(value=TransactionAttributeType.NEVER)\npublic void doitAsFastAsPossible(){\n  //performance critical code goes here.\n}\n```", "```java\npackage com.ensode.jakartaeebook;\n//imports omitted for brevity\n@Stateless\npublic class CustomerDaoRollbackBean implements\n  CustomerDaoRollback {\n  @Resource\n  private EJBContext ejbContext;\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource(name = \"java:app/jdbc/customerdbDatasource\")\n  private DataSource dataSource;\n  @Override\n  public void saveNewCustomer(Customer customer) {\n    if (customer == null ||\n      customer.getCustomerId() != null) {\n      ejbContext.setRollbackOnly();\n    } else {\n      customer.setCustomerId(getNewCustomerId());\n      entityManager.persist(customer);\n    }\n  }\n  //additional methods omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaee;\n//imports omitted\n@Stateless\n@TransactionManagement(value =\n  TransactionManagementType.BEAN)\npublic class CustomerDaoBmtBean implements CustomerDaoBmt {\n  @Resource private UserTransaction userTransaction;\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource(name = \"java:app/jdbc/customerdbDatasource\")\n  private DataSource dataSource;\n@Override\n  public void saveMultipleNewCustomers(\n    List<Customer> customerList)\n    throws Exception {\n      for (Customer customer : customerList) {\n        userTransaction.begin();\n        customer.setCustomerId(getNewCustomerId());\n        entityManager.persist(customer);\n        userTransaction.commit();\n      }\n    }\n  //additional methods omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook;\n//imports omitted\n@Stateless\npublic class JebTimerExampleBean implements\n  JebTimerExample\n  private static final Logger LOG =\n    Logger.getLogger(JebTimerExampleBean.class.getName());\n  @Resource\n  TimerService timerService;\n  @Override\n  public void startTimer(Serializable info) {\n    timerService.createTimer(new Date(), 5000, info);\n  }\n  @Override\n  public void stopTimer(Serializable info) {\n    Collection<Timer> timers = timerService.getTimers();\n    timers.stream().filter(t -> t.getInfo().equals(info)).\n      forEach(t -> t.cancel());\n  }\n  @Timeout\n  @Override\n  public void logMessage(Timer timer) {\n    LOG.log(Level.INFO, \"Message triggered by :{0} at {1}\",\n      new Object[]{timer.getInfo(),\n        System.currentTimeMillis()});\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook;\nimport jakarta.ejb.EJB;\npublic class Client {\n  @EJB\n  private static JebTimerExample jebTimerExample;\n  public static void main(String[] args) {\n    try {\n      jebTimerExample.startTimer(\"Timer 1\");\n      Thread.sleep(2000);\n      jebTimerExample.startTimer(\"Timer 2\");\n      Thread.sleep(30000);\n      jebTimerExample.stopTimer(\"Timer 1\");\n      jebTimerExample.stopTimer(\"Timer 2\");\n    } catch (InterruptedException e) {\n      e.printStackTrace();\n    }\n  }\n}\n```", "```java\nThis message was triggered by :Timer 1 at 1,699,468,776,716|#]\nThis message was triggered by :Timer 2 at 1,699,468,778,762|#]\nThis message was triggered by :Timer 1 at 1,699,468,781,716|#]\nThis message was triggered by :Timer 2 at 1,699,468,783,762|#]\nThis message was triggered by :Timer 1 at 1,699,468,786,716|#]\nThis message was triggered by :Timer 2 at 1,699,468,788,762|#]\n```", "```java\npackage com.ensode.javaee8book.calendarbasedtimer;\n//imports omitted for brevity\n@Stateless\npublic class CalendarBasedTimerJebExampleBean {\n  private static Logger logger = Logger.getLogger(\n      CalendarBasedTimerJebExampleBean.class.getName());\n  @Schedule(hour = \"20\", minute = \"10\")\n  public void logMessage() {\n    logger.log(Level.INFO,\n      \"This message was triggered at:{0}\",\n      System.currentTimeMillis());\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook;\n//imports omitted for brevity\n@Stateless\n@RolesAllowed(\"admin\")\npublic class SecureCustomerDaoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  public Long saveCustomer(Customer customer) {\n    if (customer.getCustomerId() == null) {\n      entityManager.persist(customer);\n    } else {\n      entityManager.merge(customer);\n    }\n    return customer.getCustomerId();\n  }\n  @RolesAllowed({\"user\", \"admin\"})\n  public Customer getCustomer(Long customerId) {\n    Customer customer;\n    customer = entityManager.find(Customer.class,\n      customerId);\n    return customer;\n  }\n  public void deleteCustomer(Customer customer) {\n    entityManager.remove(customer);\n  }\n}\n```"]