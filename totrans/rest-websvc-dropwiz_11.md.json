["```java\n<dependency>\n<groupId>junit</groupId>\n<artifactId>junit</artifactId>\n<version>3.8.1</version>\n<scope>test</scope>\n</dependency>\n```", "```java\n<dependency><groupId>io.dropwizard</groupId><artifactId>dropwizard-testing</artifactId><version>0.7.0-SNAPSHOT</version></dependency><dependency><groupId>org.hamcrest</groupId><artifactId>hamcrest-all</artifactId><version>1.3</version></dependency>\n```", "```java\n    package com.dwbook.phonebook;\n\n    import static org.fest.assertions.api.Assertions.assertThat;\n\n    import javax.ws.rs.core.MediaType;\n\n    import org.junit.Before;\n    import org.junit.ClassRule;\n    import org.junit.Test;\n    import com.dwbook.phonebook.representations.Contact;\n    import com.sun.jersey.api.client.Client;\n    import com.sun.jersey.api.client.ClientResponse;\n    import com.sun.jersey.api.client.WebResource;\n    import com.sun.jersey.api.client.filter.HTTPBasicAuthFilter;\n\n    import io.dropwizard.testing.junit.DropwizardAppRule;\n\n    public class ApplicationTest {\n\n      private Client client;\n\n      private Contact contactForTest = new Contact(0, \"Jane\", \"Doe\", \"+987654321\");\n\n        @ClassRule\n        public static final DropwizardAppRule<PhonebookConfiguration> RULE =\n                new DropwizardAppRule<PhonebookConfiguration>(App.class, \"config.yaml\");\n\n        @Before\n        public void setUp() {\n          client = new Client();\n            // Set the credentials to be used by the client\n            client.addFilter(new HTTPBasicAuthFilter(\"wsuser\", \"wsp1\"));\n        }\n\n        @Test\n        public void createAndRetrieveContact() {\n          // Create a new contact by performing the appropriate http request (POST)\n            WebResource contactResource = client.resource(\"http://localhost:8080/contact\");\n        ClientResponse response = contactResource\n          .type(MediaType.APPLICATION_JSON)\n          .post(ClientResponse.class, contactForTest);\n        // Check that the response has the appropriate response code (201)\n            assertThat(response.getStatus()).isEqualTo(201);\n\n            // Retrieve the newly created contact\n            String newContactURL = response.getHeaders().get(\"Location\").get(0);\n            WebResource newContactResource = client.resource(newContactURL);\n            Contact contact = newContactResource.get(Contact.class);\n            // Check that it has the same properties as the initial one\n            assertThat(contact.getFirstName()).isEqualTo(contactForTest.getFirstName());\n            assertThat(contact.getLastName()).isEqualTo(contactForTest.getLastName());\n            assertThat(contact.getPhone()).isEqualTo(contactForTest.getPhone());\n        }\n    }\n    ```", "```java\n    $ mvn clean test\n\n    ```", "```java\n    import javax.ws.rs.core.MediaType;\n    import com.codahale.metrics.health.HealthCheck;\n    import com.dwbook.phonebook.representations.Contact;\n    import com.sun.jersey.api.client.*;\n\n        public class NewContactHealthCheck extends HealthCheck {\n          private final Client client;\n\n          public NewContactHealthCheck(Client client) {\n          super();\n          this.client = client;\n        }\n\n        @Override\n        protected Result check() throws Exception {\n          WebResource contactResource = client\n            .resource(\"http://localhost:8080/contact\");\n          ClientResponse response = contactResource.type(\n            MediaType.APPLICATION_JSON).post(\n              ClientResponse.class,\n              new Contact(0, \"Health Check First Name\",\n                \"Health Check Last Name\", \"00000000\"));\n                if (response.getStatus() == 201) {\n                  return Result.healthy();\n                } else {\n                  return Result.unhealthy(\"New Contact cannot be created!\");\n          }\n        }\n      }\n    ```", "```java\n      // Add health checks\n      e.healthChecks().register(\"New Contact health check\", new NewContactHealthCheck(client));\n    ```"]