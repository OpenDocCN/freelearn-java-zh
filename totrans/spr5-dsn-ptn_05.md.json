["```java\n        ApplicationContext context = new    \n        AnnotationConfigApplicationContext(AppConfig.class); \n```", "```java\n        ApplicationContext context = new  \n        ClassPathXmlApplicationContext(\"applicationContext.xml\"); \n```", "```java\n        @Configuration \n        public class AppConfig { \n          @Bean \n          public TransferService transferService(){ ... } \n          @Bean \n          public AccountRepository accountRepository(DataSource \n          dataSource){ ... } \n        } \n```", "```java\n        @Configuration \n        public class InfraConfig { \n          @Bean \n          public DataSource dataSource () { ... } \n        } \n```", "```java\n    public interface BeanFactoryPostProcessor { \n      public void postProcessBeanFactory\n        (ConfigurableListableBeanFactory \n        beanFactory); \n    } \n```", "```java\n    jdbc.driver=org.hsqldb.jdbcDriver \n    jdbc.url=jdbc:hsqldb:hsql://production:9002 \n    jdbc.username=doj \n    jdbc.password=doj@123 \n```", "```java\n    @Configuration \n    @PropertySource ( \"classpath:/config/database.properties\" ) \n    public class InfraConfig { \n     @Bean \n     public DataSource dataSource( \n     @Value(\"${jdbc.driver}\") String driver, \n     @Value(\"${jdbc.url}\") String url, \n     @Value(\"${jdbc.user}\") String user, \n     @Value(\"${jdbc.password}\") String pwd) { \n       DataSource ds = new BasicDataSource(); \n       ds.setDriverClassName( driver); \n       ds.setUrl( url); \n       ds.setUser( user); \n       ds.setPassword( pwd )); \n       return ds; \n    } \n   } \n```", "```java\n    public interface BeanPostProcessor { \n      Object postProcessBeforeInitialization(Object bean, String \n      beanName) throws BeansException; \n      Object postProcessAfterInitialization(Object bean, String \n      beanName) throws BeansException; \n    } \n```", "```java\n    package com.packt.patterninspring.chapter5.bankapp.bpp; \n    import org.springframework.beans.BeansException; \n    import org.springframework.beans.factory.config.BeanPostProcessor; \n    import org.springframework.stereotype.Component; \n    @Component \n    public class MyBeanPostProcessor implements \n    BeanPostProcessor { \n      @Override \n      public Object postProcessBeforeInitialization\n      (Object bean, String beanName) throws BeansException { \n        System.out.println(\"In After bean Initialization \n        method. Bean name is \"+beanName); \n        return bean; \n      } \n      public Object postProcessAfterInitialization(Object bean, String  \n      beanName) throws BeansException { \n        System.out.println(\"In Before bean Initialization method. Bean \n        name is \"+beanName); \n        return bean; \n        } \n   }  \n```", "```java\n    public class BeanLifeCycleDemo { \n      public static void main(String[] args) { \n        ConfigurableApplicationContext applicationContext = new \n        AnnotationConfigApplicationContext(AppConfig.class); \n        applicationContext.close(); \n      } \n    }\n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n     xsi:schemaLocation=\"http://www.springframework.org/schema/beans  \n     http://www.springframework.org/schema/beans/spring-beans.xsd \n     http://www.springframework.org/schema/context   \n     http://www.springframework.org/schema/context/\n     spring-context-4.3.xsd\"> \n     <context:annotation-config/> \n     <bean id=\"transferService\"    \n     class=\"com.packt.patterninspring.chapter5.\n     bankapp.service.TransferService\"/> \n     <bean id=\"accountRepository\"   \n     class=\"com.packt.patterninspring.chapter5.\n     bankapp.repository.JdbcAccountRepository\" \n     init-method=\"populateCache\"/> \n    </beans> \n```", "```java\n    package com.packt.patterninspring.chapter5.bankapp.repository; \n    import com.packt.patterninspring.chapter5.bankapp.model.Account; \n    import com.packt.patterninspring.chapter5.bankapp.model.Amount; \n    import com.packt.patterninspring.chapter5.\n    bankapp.repository.AccountRepository; \n    public class JdbcAccountRepository implements AccountRepository { \n      @Override \n      public Account findByAccountId(Long accountId) { \n        return new Account(accountId, \"Arnav Rajput\", new  \n        Amount(3000.0)); \n    } \n    void populateCache(){ \n      System.out.println(\"Called populateCache() method\"); \n    } \n   }\n```", "```java\n    @Bean(initMethod = \"populateCache\") \n    public AccountRepository accountRepository(){ \n      return new JdbcAccountRepository(); \n    }\n```", "```java\n    @PostConstruct \n    void populateCache(){ \n      System.out.println(\"Called populateCache() method\"); \n    } \n```", "```java\n    //Get or create application context from somewhere \n    ApplicationContext applicationContext = new    \n    AnnotationConfigApplicationContext(AppConfig.class); \n\n    // Lookup the entry point into the application \n    TransferService transferService =    \n    context.getBean(TransferService.class); \n    // and use it \n    transferService.transfer(\"A\", \"B\", 3000.1); \n```", "```java\n    //Any implementation of application context \n\n    ConfigurableApplicationContext applicationContext = new   \n    AnnotationConfigApplicationContext(AppConfig.class); \n\n    // Destroy the application by closing application context. \n    applicationContext.close(); \n```", "```java\n        void destroy() throws Exception; \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n      http://www.springframework.org/schema/beans/spring-beans.xsd \n      http://www.springframework.org/schema/context \n      http://www.springframework.org/schema/context/spring-context-\n      4.3.xsd\"> \n      <context:annotation-config/> \n      <bean id=\"transferService\" \n      class=\"com.packt.patterninspring.chapter5.\n      bankapp.service.TransferService\"/> \n      <bean id=\"accountRepository\"   \n      class=\"com.packt.patterninspring.chapter5.\n      bankapp.repository.JdbcAccountRepository\" \n      destroy-method=\"clearCache\"/> \n   </beans> \n```", "```java\n    package com.packt.patterninspring.chapter5.bankapp.repository; \n    import com.packt.patterninspring.chapter5.bankapp.model.Account; \n    import com.packt.patterninspring.chapter5.bankapp.model.Amount; \n    import com.packt.patterninspring.chapter5.bankapp.\n      repository.AccountRepository; \n    public class JdbcAccountRepository implements AccountRepository { \n     @Override \n    public Account findByAccountId(Long accountId) { \n      return new Account(accountId, \"Arnav Rajput\", new\n      Amount(3000.0)); \n    } \n    void clearCache(){ \n      System.out.println(\"Called clearCache() method\"); \n    } \n   } \n```", "```java\n    @Bean (destroyMethod=\"clearCache\") \n    public AccountRepository accountRepository() { \n      return new JdbcAccountRepository(); \n    } \n```", "```java\n    public class JdbcAccountRepository { \n      @PreDestroy \n      void clearCache() { \n        // close files, connections... \n        // remove external resources... \n      } \n    } \n```", "```java\n    <bean id=\"...\" class=\"...\" scope=\"session\"/> \n```", "```java\n    <bean id=\"...\" class=\"...\" scope=\"request\"/>\n```", "```java\n    package com.packt.patterninspring.chapter5.bankapp.scope; \n    import java.util.HashMap; \n    import java.util.Map; \n    import org.springframework.beans.factory.ObjectFactory; \n    import org.springframework.beans.factory.config.Scope; \n\n    public class MyThreadScope implements Scope { \n      private final ThreadLocal<Object> myThreadScope = new\n      ThreadLocal<Object>() { \n        protected Map<String, Object> initialValue() { \n          System.out.println(\"initialize ThreadLocal\"); \n          return new HashMap<String, Object>(); \n         } \n       }; \n    @Override \n    public Object get(String name, ObjectFactory<?> objectFactory) { \n      Map<String, Object> scope = (Map<String, Object>)\n      myThreadScope.get(); \n      System.out.println(\"getting object from scope.\"); \n      Object object = scope.get(name); \n      if(object == null) { \n        object = objectFactory.getObject(); \n        scope.put(name, object); \n      } \n      return object; \n    } \n    @Override \n    public String getConversationId() { \n      return null; \n    } \n    @Override \n    public void registerDestructionCallback(String name, Runnable\n    callback) { \n\n    } \n    @Override \n    public Object remove(String name) { \n      System.out.println(\"removing object from scope.\"); \n      @SuppressWarnings(\"unchecked\") \n      Map<String, Object> scope = (Map<String, Object>)\n      myThreadScope.get(); \n      return scope.remove(name); \n     } \n     @Override \n     public Object resolveContextualObject(String name) { \n       return null; \n     } \n    } \n```", "```java\n    <?xml version=\"1.0\" encoding=\"UTF-8\"?> \n    <beans  \n\n      xsi:schemaLocation=\"http://www.springframework.org/schema/beans  \n      http://www.springframework.org/schema/beans/spring-beans.xsd\"> \n      <bean   class=\"org.springframework.beans.factory.\n      config.CustomScopeConfigurer\"> \n      <property name=\"scopes\"> \n        <map> \n          <entry key=\"myThreadScope\"> \n            <bean class=\"com.packt.patterninspring.chapter5.\n            bankapp.scope.MyThreadScope\"/> \n          </entry> \n        </map> \n      </property> \n     </bean> \n     <bean id=\"myBean\" class=\"com.packt.patterninspring.chapter5.\n      bankapp.bean.MyBean\" scope=\"myThreadScope\">  \n      <property name=\"name\" value=\"Dinesh\"></property> \n    </bean> \n    </beans> \n```"]