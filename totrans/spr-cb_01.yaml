- en: Chapter 1. Creating a Spring Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Mac OS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Spring web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a Spring web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Spring in a standard Java application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will first cover the installation of some of the tools
    for Spring development:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Java**: Spring is a Java framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven**: This is a build tool similar to Ant. It makes it easy to add Spring
    libraries to a project. Gradle is another option as a build tool.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tomcat**: This is a web server for Java web applications. You can also use
    JBoss, Jetty, GlassFish, or WebSphere.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Eclipse**: This is an IDE. You can also use NetBeans, IntelliJ IDEA, and
    so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, we will build a Spring web application and run it with Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we'll see how Spring can also be used in a standard Java application
    (not a web application).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Mac OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will first install Java 8 because it's not installed by default on Mac OS
    10.9 or higher version. Then, we will install Maven 3, a build tool similar to
    Ant, to manage the external Java libraries that we will use (Spring, Hibernate,
    and so on). Maven 3 also compiles source files and generates JAR and WAR files.
    We will also install Tomcat 8, a popular web server for Java web applications,
    which we will use throughout this book. JBoss, Jetty, GlassFish, or WebSphere
    could be used instead. Finally, we will install the Eclipse IDE, but you could
    also use NetBeans, IntelliJ IDEA, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java first, then Maven, Tomcat, and Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Java from the Oracle website [http://oracle.com](http://oracle.com).
    In the Java SE downloads section, choose the Java SE 8 SDK. Select **Accept the
    License Agreement** and download the **Mac OS X x64** package. The direct link
    to the page is [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).![Installing
    Java](img/5807OS_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the downloaded file, launch it, and complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `~/.bash_profile` file, set the `JAVA_HOME` environment variable. Change
    `jdk1.8.0_40.jdk` to the actual folder name on your system (this depends on the
    version of Java you are using, which is updated regularly):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a new terminal and test whether it''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Maven from the Apache website [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Choose the **Binary zip** file of the current stable version:![Installing Maven](img/5807OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the extracted folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `~/.bash_profile` file, add a `MAVEN HOME` environment variable pointing
    to that folder. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `bin` subfolder to your `PATH` environment variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a new terminal and test whether it''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing Tomcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Tomcat from the Apache website [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi)
    and choose the **Core** binary distribution.![Installing Tomcat](img/5807OS_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the extracted folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the scripts in the `bin` subfolder executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch Tomcat using the `catalina.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tomcat runs on the `8080` port by default. In a web browser, go to `http://localhost:8080/`
    to check whether it's working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Eclipse from [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/).
    Choose the **Mac OS X 64 Bit** version of **Eclipse IDE for Java EE Developers**.![Installing
    Eclipse](img/5807OS_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the extracted folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch Eclipse by executing the `eclipse` binary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tomcat can be run as a background process using these two scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: On a development machine, it's convenient to put Tomcat's folder somewhere in
    the home directory (for example, `~/bin`) so that its contents can be updated
    without root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will first install Java 8\. Then, we will install Maven 3, a build tool similar
    to Ant, to manage the external Java libraries that we will use (Spring, Hibernate,
    so on). Maven 3 also compiles source files and generates JAR and WAR files. We
    will also install Tomcat 8, a popular web server for Java web applications, which
    we will use throughout this book. JBoss, Jetty, GlassFish, or WebSphere could
    be used instead. Finally, we will install the Eclipse IDE, but you could also
    use NetBeans, IntelliJ IDEA, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java first, then Maven, Tomcat, and Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add this **PPA** (**Personal Package Archive**):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refresh the list of the available packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Download and install Java 8:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Test whether it''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Maven from the Apache website [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Choose the **Binary zip** file of the current stable version:![Installing Maven](img/5807OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the resulting folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your `~/.bash_profile` file, add a `MAVEN HOME` environment variable pointing
    to that folder. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `bin` subfolder to your `PATH` environment variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open a new terminal and test whether it''s working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing Tomcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Tomcat from the Apache website [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi)
    and choose the **Core** binary distribution.![Installing Tomcat](img/5807OS_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the extracted folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make the scripts in the `bin` subfolder executable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Launch Tomcat using the `catalina.sh` script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tomcat runs on the 8080 port by default. Go to `http://localhost:8080/` to check
    whether it's working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Eclipse from [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/).
    Choose the **Linux 64 Bit** version of **Eclipse IDE for Java EE Developers**.![Installing
    Eclipse](img/5807OS_01_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file and move the extracted folder to a convenient
    location (for example, `~/bin`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Launch Eclipse by executing the `eclipse` binary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Tomcat can be run as a background process using these two scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: On a development machine, it's convenient to put Tomcat's folder somewhere in
    the home directory (for example, `~/bin`) so that its contents can be updated
    without root privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java, Maven, Tomcat, and Eclipse on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will first install Java 8\. Then, we will install Maven 3, a build tool similar
    to Ant, to manage the external Java libraries that we will use (Spring, Hibernate,
    and so on). Maven 3 also compiles source files and generates JAR and WAR files.
    We will also install Tomcat 8, a popular web server for Java web applications,
    which we will use throughout this book. JBoss, Jetty, GlassFish, or WebSphere
    could be used instead. Finally, we will install the Eclipse IDE, but you could
    also use NetBeans, IntelliJ IDEA, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install Java first, then Maven, Tomcat, and Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Java
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Java from the Oracle website [http://oracle.com](http://oracle.com).
    In the Java SE downloads section, choose the Java SE 8 SDK. Select **Accept the
    License Agreement** and download the **Windows x64** package. The direct link
    to the page is [http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html).![Installing
    Java](img/5807OS_01_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the downloaded file, launch it, and complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Control Panel** | **System and Security** | **System** | **Advanced
    system settings** | **Environment Variables…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `JAVA_HOME` system variable with the `C:\Program Files\Java\jdk1.8.0_40`
    value. Change `jdk1.8.0_40` to the actual folder name on your system (this depends
    on the version of Java, which is updated regularly).![Installing Java](img/5807OS_01_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test whether it's working by opening Command Prompt and entering `java –version`.![Installing
    Java](img/5807OS_01_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Maven from the Apache website [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Choose the **Binary zip** file of the current stable version:![Installing Maven](img/5807OS_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `Programs` folder in your user folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the extracted folder to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Control Panel** | **System and Security** | **System** | **Advanced
    system settings** | **Environment Variables…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `MAVEN_HOME` system variable with the path to the Maven folder. For example,
    `C:\Users\jerome\Programs\apache-maven-3.2.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Path` system variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Append `;%MAVEN_HOME%\bin` to it.![Installing Maven](img/5807OS_01_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test whether it's working by opening a Command Prompt and entering `mvn –v`.![Installing
    Maven](img/5807OS_01_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Tomcat
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Tomcat from the Apache website [http://tomcat.apache.org/download-80.cgi](http://tomcat.apache.org/download-80.cgi)
    and choose the **32-bit/64-bit** **Windows Service Installer** binary distribution.![Installing
    Tomcat](img/5807OS_01_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch and complete the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tomcat runs on the 8080 port by default. Go to `http://localhost:8080/` to check
    whether it's working.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Download Eclipse from [http://www.eclipse.org/downloads/](http://www.eclipse.org/downloads/).
    Choose the **Windows 64 Bit** version of **Eclipse IDE for Java EE Developers**.![Installing
    Eclipse](img/5807OS_01_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncompress the downloaded file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch the `eclipse` program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Spring web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will build a simple Spring web application with Eclipse.
    We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add two Java classes to configure Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a "Hello World" web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next recipe, we will compile and run this web application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create a Spring web application in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Eclipse, in the **File** menu, select **New** | **Project…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Maven**, select **Maven Project** and click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Create a simple project (skip archetype selection)** checkbox and
    click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Group Id** field, enter `com.springcookbook`. For the **Artifact Id**
    field, enter `springwebapp`. For **Packaging**, select `war` and click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Spring to the project using Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open Maven''s `pom.xml` configuration file at the root of the project. Select
    the **pom.xml** tab to edit the XML source code directly. Under the `project`
    XML node, define the versions for Java and Spring. Also add the Servlet API, Spring
    Core, and Spring MVC dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating the configuration classes for Spring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create the Java packages `com.springcookbook.config` and `com.springcookbook.controller`;
    in the left-hand side pane **Package Explorer**, right-click on the project folder
    and select **New** | **Package…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `com.springcookbook.config` package, create the `AppConfig` class. In
    the **Source** menu, select **Organize Imports** to add the needed import declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Still in the `com.springcookbook.config` package, create the `ServletInitializer`
    class. Add the needed import declarations similarly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a "Hello World" web page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `com.springcookbook.controller` package, create the `HelloController`
    class and its `hi()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section will give more you details of what happened at every step.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The generated Maven project is a `pom.xml` configuration file along with a
    hierarchy of empty directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Adding Spring to the project using Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The declared Maven libraries and their dependencies are automatically downloaded
    in the background by Eclipse. They are listed under **Maven Dependencies** in
    the left-hand side pane **Package Explorer**.
  prefs: []
  type: TYPE_NORMAL
- en: Tomcat provides the `Servlet API` dependency, but we still declared it because
    our code needs it to compile. Maven will not include it in the generated `.war`
    file because of the `<scope>provided</scope>` declaration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the configuration classes for Spring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AppConfig` is a Spring configuration class. It is a standard Java class annotated
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Configuration`: This declares it as a Spring configuration class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@EnableWebMvc`: This enables Spring''s ability to receive and process web
    requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@ComponentScan(basePackages = {"com.springcookbook.controller"})`: This scans
    the `com.springcookbook.controller` package for Spring components'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ServletInitializer` is a configuration class for Spring''s servlet; it replaces
    the standard `web.xml` file. It will be detected automatically by `SpringServletContainerInitializer`,
    which is automatically called by any Servlet 3\. `ServletInitializer` extends
    the `AbstractAnnotationConfigDispatcherServletInitializer` abstract class and
    implements the required methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`getServletMappings()`: This declares the servlet root URI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`getServletConfigClasses()`: This declares the Spring configuration classes.
    Here, we declared the `AppConfig` class that was previously defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a "Hello World" web page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created a controller class in the `com.springcookbook.controller` package,
    which we declared in `AppConfig`. When navigating to `http://localhost:8080/hi`,
    the `hi()`method will be called and **Hello, world.** will be displayed in the
    browser. This will be explained further in [Chapter 3](ch03.html "Chapter 3. Using
    Controllers and Views"), *Using Controllers and Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Running a Spring web application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the Spring web application from the previous recipe.
    We will compile it with Maven and run it with Tomcat.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to compile and run a Spring web application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `pom.xml`, add this boilerplate code under the `project` XML node. It will
    allow Maven to generate `.war` files without requiring a `web.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In Eclipse, in the left-hand side pane **Package Explorer**, select the `springwebapp`
    project folder. In the **Run** menu, select **Run** and choose **Maven install**
    or you can execute `mvn clean install` in a terminal at the root of the project
    folder. In both cases, a `target` folder will be generated with the `springwebapp.war`
    file in it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `target/springwebapp.war` file to Tomcat's `webapps` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Launch Tomcat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a web browser, go to `http://localhost:8080/springwebapp/hi` to check whether
    it's working.![How to do it…](img/5807OS_01_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `pom.xml` the boilerplate code prevents Maven from throwing an error because
    there's no `web.xml` file. A `web.xml` file was required in Java web applications;
    however, since Servlet specification 3.0 (implemented in Tomcat 7 and higher versions),
    it's not required anymore.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'On Mac OS and Linux, you can create a symbolic link in Tomcat''s `webapps`
    folder pointing to the `.war` file in your project folder. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: So, when the`.war` file is updated in your project folder, Tomcat will detect
    that it has been modified and will reload the application automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Using Spring in a standard Java application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will build a standard Java application (not a web application)
    using Spring. We will:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add Spring to it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a class to configure Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `User` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define a `User` singleton in the Spring configuration class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the `User` singleton in the `main()` method
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will cover the steps to use Spring in a standard (not web)
    Java application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in Eclipse
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Eclipse, in the **File** menu, select **New** | **Project...**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Maven**, select **Maven Project** and click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Create a simple project (skip archetype selection)** checkbox and
    click on **Next >**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Group Id** field, enter `com.springcookbook`. For the **Artifact Id**
    field, enter `springapp`. Click on **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding Spring to the project using Maven
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open Maven''s `pom.xml` configuration file at the root of the project. Select
    the **pom.xml** tab to edit the XML source code directly. Under the `project`
    XML node, define the Java and Spring versions and add the Spring Core dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Creating a configuration class for Spring
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Create the `com.springcookbook.config` Java package; in the left-hand side pane
    **Package Explorer**, right-click on the project and select **New** | **Package…**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `com.springcookbook.config` package, create the `AppConfig` class. In
    the **Source** menu, select **Organize Imports** to add the needed import declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating the User class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a `User` Java class with two `String` fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Defining a User singleton in the Spring configuration class
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `AppConfig` class, define a `User` bean:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Using the User singleton in the main() method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create the `com.springcookbook.main` package with the `Main` class containing
    the `main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `main()` method, retrieve the User singleton and print its properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Test whether it's working; in the **Run** menu, select **Run**.![Using the User
    singleton in the main() method](img/5807OS_01_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created a Java project to which we added Spring. We defined a `User` bean
    called `admin` (the bean name is by default the bean method name). Spring beans
    are explained in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In the `Main` class, we created a Spring context object from the `AppConfig`
    class and retrieved the `admin` bean from it. We used the bean and finally, closed
    the Spring context.
  prefs: []
  type: TYPE_NORMAL
