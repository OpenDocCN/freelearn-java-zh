["```java\npackage net.ensode.javaee8book.jpaintro.entity; \n\nimport java.io.Serializable; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"CUSTOMERS\") \npublic class Customer implements Serializable \n{ \n  @Id \n  @Column(name = \"CUSTOMER_ID\") \n  private Long customerId; \n\n  @Column(name = \"FIRST_NAME\") \n  private String firstName; \n\n  @Column(name = \"LAST_NAME\") \n  private String lastName; \n\n  private String email; \n\n  public Long getCustomerId() \n  { \n    return customerId; \n  } \n  public void setCustomerId(Long customerId) \n  { \n    this.customerId = customerId; \n  } \n  public String getEmail() \n  { \n    return email; \n  } \n  public void setEmail(String email) \n  { \n    this.email = email; \n  } \n  public String getFirstName() \n  { \n    return firstName; \n  } \n  public void setFirstName(String firstName) \n  { \n    this.firstName = firstName; \n  } \n  public String getLastName() \n  { \n    return lastName; \n  } \n  public void setLastName(String lastName) \n  { \n    this.lastName = lastName; \n  } \n} \n```", "```java\npackage net.ensode.javaee8book.jpaintro.namedbean; \n\nimport javax.annotation.Resource; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.transaction.HeuristicMixedException; \nimport javax.transaction.HeuristicRollbackException; \nimport javax.transaction.NotSupportedException; \nimport javax.transaction.RollbackException; \nimport javax.transaction.SystemException; \nimport javax.transaction.UserTransaction; \nimport net.ensode.javaee8book.jpaintro.entity.Customer; \n\n@Named \n@RequestScoped \npublic class JpaDemoBean { \n\n @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    public String updateDatabase() { \n\n        String retVal = \"confirmation\"; \n\n        Customer customer = new Customer(); \n        Customer customer2 = new Customer(); \n        Customer customer3; \n\n        customer.setCustomerId(3L); \n        customer.setFirstName(\"James\"); \n        customer.setLastName(\"McKenzie\"); \n        customer.setEmail(\"jamesm@notreal.com\"); \n\n        customer2.setCustomerId(4L); \n        customer2.setFirstName(\"Charles\"); \n        customer2.setLastName(\"Jonson\"); \n        customer2.setEmail(\"cjohnson@phony.org\"); \n\n        try { \n            userTransaction.begin(); \n            entityManager.persist(customer); \n            entityManager.persist(customer2); \n            customer3 = entityManager.find(Customer.class, 4L); \n            customer3.setLastName(\"Johnson\"); \n            entityManager.persist(customer3); \n            entityManager.remove(customer); \n\n            userTransaction.commit(); \n        } catch (HeuristicMixedException | \n                HeuristicRollbackException | \n                IllegalStateException | \n                NotSupportedException | \n                RollbackException | \n                SecurityException | \n                SystemException e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n} \n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<persistence version=\"2.2\"   xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/persistence http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\"> \n  <persistence-unit name=\"customerPersistenceUnit\"> \n    <jta-data-source>jdbc/__CustomerDBPool</jta-data-source> \n  </persistence-unit> \n</persistence> \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.JoinColumn; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"LOGIN_INFO\") \npublic class LoginInfo \n{ \n  @Id \n  @Column(name = \"LOGIN_INFO_ID\") \n  private Long loginInfoId; \n\n  @Column(name = \"LOGIN_NAME\") \n  private String loginName; \n\n  private String password; \n\n @OneToOne @JoinColumn(name=\"CUSTOMER_ID\") private Customer customer; \n  public Long getLoginInfoId() \n  { \n    return loginInfoId; \n  } \n\n  public void setLoginInfoId(Long loginInfoId) \n  { \n    this.loginInfoId = loginInfoId; \n  } \n\n  public String getPassword() \n  { \n    return password; \n  } \n\n  public void setPassword(String password) \n  { \n    this.password = password; \n  } \n\n  public String getLoginName() \n  { \n    return loginName; \n  } \n\n  public void setLoginName(String userName) \n  { \n    this.loginName = userName; \n  } \n\n  public Customer getCustomer() \n  { \n    return customer; \n  } \n\n  public void setCustomer(Customer customer) \n  { \n    this.customer = customer; \n  } \n\n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport java.io.Serializable; \nimport java.util.Set; \n\nimport javax.persistence.CascadeType; \nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.OneToMany; \nimport javax.persistence.OneToOne; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"CUSTOMERS\") \npublic class Customer implements Serializable \n{ \n  @Id \n  @Column(name = \"CUSTOMER_ID\") \n  private Long customerId; \n\n  @Column(name = \"FIRST_NAME\") \n  private String firstName; \n\n  @Column(name = \"LAST_NAME\") \n  private String lastName; \n\n  private String email; \n\n @OneToOne(mappedBy = \"customer\") private LoginInfo loginInfo; public LoginInfo getLoginInfo() { return loginInfo; } public void setLoginInfo(LoginInfo loginInfo) { this.loginInfo = loginInfo; } \n   //Additional setters and getters omitted for brevity \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.namedbean; \n\nimport javax.annotation.Resource; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.transaction.HeuristicMixedException; \nimport javax.transaction.HeuristicRollbackException; \nimport javax.transaction.NotSupportedException; \nimport javax.transaction.RollbackException; \nimport javax.transaction.SystemException; \nimport javax.transaction.UserTransaction; \nimport net.ensode.javaee8book.entityrelationship.entity.Customer; \nimport net.ensode.javaee8book.entityrelationship.entity.LoginInfo; \n\n@Named \n@RequestScoped \npublic class OneToOneRelationshipDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    public String updateDatabase() { \n        String retVal = \"confirmation\"; \n        Customer customer; \n        LoginInfo loginInfo = new LoginInfo(); \n\n        loginInfo.setLoginInfoId(1L); \n        loginInfo.setLoginName(\"charlesj\"); \n        loginInfo.setPassword(\"iwonttellyou\"); \n\n        try { \n            userTransaction.begin(); \n\n            customer = entityManager.find(Customer.class, 4L); \n            loginInfo.setCustomer(customer); \n\n            entityManager.persist(loginInfo); \n\n            userTransaction.commit(); \n\n        } catch (NotSupportedException | \n                SystemException | \n                SecurityException | \n                IllegalStateException | \n                RollbackException | \n                HeuristicMixedException | \n                HeuristicRollbackException e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.JoinColumn; \nimport javax.persistence.ManyToOne; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"ORDERS\") \npublic class Order \n{ \n  @Id \n  @Column(name = \"ORDER_ID\") \n  private Long orderId; \n\n  @Column(name = \"ORDER_NUMBER\") \n  private String orderNumber; \n\n  @Column(name = \"ORDER_DESCRIPTION\") \n  private String orderDescription; \n\n @ManyToOne @JoinColumn(name = \"CUSTOMER_ID\") private Customer customer; \n\n  public Customer getCustomer() \n  { \n    return customer; \n  } \n\n  public void setCustomer(Customer customer) \n  { \n    this.customer = customer; \n  } \n\n  public String getOrderDescription() \n  { \n    return orderDescription; \n  } \n\n  public void setOrderDescription(String orderDescription) \n  { \n    this.orderDescription = orderDescription; \n  } \n\n  public Long getOrderId() \n  { \n    return orderId; \n  } \n\n  public void setOrderId(Long orderId) \n  { \n    this.orderId = orderId; \n  } \n\n  public String getOrderNumber() \n  { \n    return orderNumber; \n  } \n\n  public void setOrderNumber(String orderNumber) \n  { \n    this.orderNumber = orderNumber; \n  } \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport java.io.Serializable; \nimport java.util.Set; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.OneToMany; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"CUSTOMERS\") \npublic class Customer implements Serializable \n{ \n  @Id \n  @Column(name = \"CUSTOMER_ID\") \n  private Long customerId; \n\n  @Column(name = \"FIRST_NAME\") \n  private String firstName; \n\n  @Column(name = \"LAST_NAME\") \n  private String lastName; \n\n  private String email; \n\n  @OneToOne(mappedBy = \"customer\") \n  private LoginInfo loginInfo; \n\n @OneToMany(mappedBy=\"customer\") private Set<Order> orders; \n\n  public Long getCustomerId() \n  { \n    return customerId; \n  } \n\n  public void setCustomerId(Long customerId) \n  { \n    this.customerId = customerId; \n  } \n\n  public String getEmail() \n  { \n    return email; \n  } \n\n  public void setEmail(String email) \n  { \n    this.email = email; \n  } \n\n  public String getFirstName() \n  { \n    return firstName; \n  } \n\n  public void setFirstName(String firstName) \n  { \n    this.firstName = firstName; \n  } \n\n  public String getLastName() \n  { \n    return lastName; \n  } \n\n  public void setLastName(String lastName) \n  { \n    this.lastName = lastName; \n  } \n\n  public LoginInfo getLoginInfo() \n  { \n    return loginInfo; \n  } \n\n  public void setLoginInfo(LoginInfo loginInfo) \n  { \n    this.loginInfo = loginInfo; \n  } \n\n public Set<Order> getOrders()  { return orders; } public void setOrders(Set<Order> orders) { this.orders = orders; } \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.namedbean; \n\nimport javax.annotation.Resource; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.transaction.HeuristicMixedException; \nimport javax.transaction.HeuristicRollbackException; \nimport javax.transaction.NotSupportedException; \nimport javax.transaction.RollbackException; \nimport javax.transaction.SystemException; \nimport javax.transaction.UserTransaction; \nimport net.ensode.javaee8book.entityrelationship.entity.Customer; \nimport net.ensode.javaee8book.entityrelationship.entity.Order; \n\n@Named \n@RequestScoped \npublic class OneToManyRelationshipDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    public String updateDatabase() { \n        String retVal = \"confirmation\"; \n\n        Customer customer; \n        Order order1; \n        Order order2; \n\n        order1 = new Order(); \n        order1.setOrderId(1L); \n        order1.setOrderNumber(\"SFX12345\"); \n        order1.setOrderDescription(\"Dummy order.\"); \n\n        order2 = new Order(); \n        order2.setOrderId(2L); \n        order2.setOrderNumber(\"SFX23456\"); \n        order2.setOrderDescription(\"Another dummy order.\"); \n\n        try { \n            userTransaction.begin(); \n\n            customer = entityManager.find(Customer.class, 4L); \n\n            order1.setCustomer(customer); \n            order2.setCustomer(customer); \n\n            entityManager.persist(order1); \n            entityManager.persist(order2); \n\n            userTransaction.commit(); \n\n        } catch (NotSupportedException | \n                SystemException | \n                SecurityException | \n                IllegalStateException | \n                RollbackException | \n                HeuristicMixedException | \n                HeuristicRollbackException e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport java.util.Collection; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.JoinColumn; \nimport javax.persistence.JoinTable; \nimport javax.persistence.ManyToMany; \nimport javax.persistence.ManyToOne; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"ORDERS\") \npublic class Order \n{ \n  @Id \n  @Column(name = \"ORDER_ID\") \n  private Long orderId; \n\n  @Column(name = \"ORDER_NUMBER\") \n  private String orderNumber; \n\n  @Column(name = \"ORDER_DESCRIPTION\") \n  private String orderDescription; \n\n  @ManyToOne \n  @JoinColumn(name = \"CUSTOMER_ID\") \n  private Customer customer; \n\n @ManyToMany @JoinTable(name = \"ORDER_ITEMS\",      \n   joinColumns = @JoinColumn(name = \"ORDER_ID\",        \n    referencedColumnName = \"ORDER_ID\"),         \n     inverseJoinColumns = @JoinColumn(name = \"ITEM_ID\",                 \n      referencedColumnName = \"ITEM_ID\"))\n private Collection<Item> items; \n\n  public Customer getCustomer() \n  { \n    return customer; \n  } \n\n  public void setCustomer(Customer customer) \n  { \n    this.customer = customer; \n  } \n\n  public String getOrderDescription() \n  { \n    return orderDescription; \n  } \n\n  public void setOrderDescription(String orderDescription) \n  { \n    this.orderDescription = orderDescription; \n  } \n\n  public Long getOrderId() \n  { \n    return orderId; \n  } \n\n  public void setOrderId(Long orderId) \n  { \n    this.orderId = orderId; \n  } \n\n  public String getOrderNumber() \n  { \n    return orderNumber; \n  } \n\n  public void setOrderNumber(String orderNumber) \n  { \n    this.orderNumber = orderNumber; \n  } \n\n public Collection<Item> getItems() { return items; } public void setItems(Collection<Item> items) { this.items = items; } }\n```", "```java\npackage net.ensode.javaee8book.entityrelationship.entity; \n\nimport java.util.Collection; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.ManyToMany; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"ITEMS\") \npublic class Item \n{ \n  @Id \n  @Column(name = \"ITEM_ID\") \n  private Long itemId; \n\n  @Column(name = \"ITEM_NUMBER\") \n  private String itemNumber; \n\n  @Column(name = \"ITEM_SHORT_DESC\") \n  private String itemShortDesc; \n\n  @Column(name = \"ITEM_LONG_DESC\") \n  private String itemLongDesc; \n\n @ManyToMany(mappedBy=\"items\")  private Collection<Order> orders; public Collection<Order> getOrders() { return orders; } public void setOrders(Collection<Order> orders) { this.orders = orders; } \n\n  //additional setters and getters removed for brevity \n} \n```", "```java\npackage net.ensode.javaee8book.entityrelationship.namedbean; \n\nimport java.util.ArrayList; \nimport java.util.Collection; \nimport javax.annotation.Resource; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.transaction.HeuristicMixedException; \nimport javax.transaction.HeuristicRollbackException; \nimport javax.transaction.NotSupportedException; \nimport javax.transaction.RollbackException; \nimport javax.transaction.SystemException; \nimport javax.transaction.UserTransaction; \nimport net.ensode.javaee8book.entityrelationship.entity.Item; \nimport net.ensode.javaee8book.entityrelationship.entity.Order; \n\n@Named \n@RequestScoped \npublic class ManyToManyRelationshipDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    public String updateDatabase() { \n        String retVal = \"confirmation\"; \n\n        Order order; \n        Collection<Item> items = new ArrayList<Item>(); \n        Item item1 = new Item(); \n        Item item2 = new Item(); \n\n        item1.setItemId(1L); \n        item1.setItemNumber(\"BCD1234\"); \n        item1.setItemShortDesc(\"Notebook Computer\"); \n        item1.setItemLongDesc(\"64 bit Quad core CPU, 4GB memory\"); \n\n        item2.setItemId(2L); \n        item2.setItemNumber(\"CDF2345\"); \n        item2.setItemShortDesc(\"Cordless Mouse\"); \n        item2.setItemLongDesc(\"Three button, infrared, \" \n                + \"vertical and horizontal scrollwheels\"); \n\n        items.add(item1); \n        items.add(item2); \n\n        try { \n            userTransaction.begin(); \n\n entityManager.persist(item1); entityManager.persist(item2); order = entityManager.find(Order.class, 1L); order.setItems(items); entityManager.persist(order); \n\n            userTransaction.commit(); \n\n        } catch (NotSupportedException | \n                SystemException | \n                SecurityException | \n                IllegalStateException | \n                RollbackException | \n                HeuristicMixedException | \n                HeuristicRollbackException e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n} \n```", "```java\npackage net.ensode.javaee8book.compositeprimarykeys.entity; \n\nimport java.io.Serializable; \n\npublic class OrderItemPK implements Serializable \n{ \n  public Long orderId; \n  public Long itemId; \n\n  public OrderItemPK() \n  { \n\n  } \n\n  public OrderItemPK(Long orderId, Long itemId) \n  { \n    this.orderId = orderId; \n    this.itemId = itemId; \n  } \n\n  @Override \n  public boolean equals(Object obj) \n  { \n    boolean returnVal = false; \n\n    if (obj == null) \n    { \n      returnVal = false; \n    } \n    else if (!obj.getClass().equals(this.getClass())) \n    { \n      returnVal = false; \n    } \n    else \n    { \n      OrderItemPK other = (OrderItemPK) obj; \n\n      if (this == other) \n      { \n        returnVal = true; \n      } \n      else if (orderId != null && other.orderId != null \n          && this.orderId.equals(other.orderId)) \n      { \n        if (itemId != null && other.itemId != null \n            && itemId.equals(other.itemId)) \n        { \n          returnVal = true; \n        } \n      } \n      else \n      { \n        returnVal = false; \n      } \n    } \n\n    return returnVal; \n  } \n\n  @Override \n  public int hashCode() \n  { \n    if (orderId == null || itemId == null) \n    { \n      return 0; \n    } \n    else \n    { \n      return orderId.hashCode() ^ itemId.hashCode(); \n    } \n  } \n} \n```", "```java\npackage net.ensode.javaee8book.compositeprimarykeys.entity; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.IdClass; \nimport javax.persistence.Table; \n\n@Entity \n@Table(name = \"ORDER_ITEMS\") \n@IdClass(value = OrderItemPK.class) \npublic class OrderItem \n{ \n @Id \n  @Column(name = \"ORDER_ID\") \n  private Long orderId; \n\n @Id \n  @Column(name = \"ITEM_ID\") \n  private Long itemId; \n\n  @Column(name = \"ITEM_QTY\") \n  private Long itemQty; \n\n  public Long getItemId() \n  { \n    return itemId; \n  } \n\n  public void setItemId(Long itemId) \n  { \n    this.itemId = itemId; \n  } \n\n  public Long getItemQty() \n  { \n    return itemQty; \n  } \n\n  public void setItemQty(Long itemQty) \n  { \n    this.itemQty = itemQty; \n  } \n\n  public Long getOrderId() \n  { \n    return orderId; \n  } \n\n  public void setOrderId(Long orderId) \n  { \n    this.orderId = orderId; \n  } \n} \n```", "```java\npackage net.ensode.javaee8book.compositeprimarykeys.namedbean; \n\nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport net.ensode.javaee8book.compositeprimarykeys.entity.OrderItem; \nimport net.ensode.javaee8book.compositeprimarykeys.entity.OrderItemPK; \n\n@Named \n@RequestScoped \npublic class CompositePrimaryKeyDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    private OrderItem orderItem; \n\n    public String findOrderItem() { \n        String retVal = \"confirmation\"; \n\n        try { \n orderItem = entityManager.find(OrderItem.class,                                                                  \n            new OrderItemPK(1L, 2L)); \n        } catch (Exception e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n\n    public OrderItem getOrderItem() { \n        return orderItem; \n    } \n\n    public void setOrderItem(OrderItem orderItem) { \n        this.orderItem = orderItem; \n    } \n\n} \n```", "```java\npackage net.ensode.javaee8book.jpql.namedbean; \n\nimport java.util.List; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.persistence.Query; \nimport net.ensode.javaee8book.jpql.entity.UsState; \n\n@Named \n@RequestScoped \npublic class SelectQueryDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    private Stream<UsState> matchingStatesStream; \n    private List<UsState> matchingStatesList; \n\n    public String findStates() { \n        String retVal = \"confirmation\"; \n\n        try { \n Query query = entityManager .createQuery( \"SELECT s FROM UsState s WHERE s.usStateNm \" + \"LIKE :name\"); query.setParameter(\"name\", \"New%\"); matchingStatesStream = query.getResultStream(); if (matchingStatesStream != null) { matchingStatesList =\n              matchingStatesStream.collect(Collectors.toList()); } \n        } catch (Exception e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n        return retVal; \n    } \n\n    public List<UsState> getMatchingStatesList() { \n        return matchingStatesList; \n    } \n\n    public void setMatchingStatesList(List<UsState> matchingStatesList) { \n        this.matchingStatesList = matchingStatesList; \n    } \n\n} \n```", "```java\nSELECT * from US_STATES s where s.US_STATE_NM like 'New%' \n```", "```java\npackage net.ensode.javaee8book.criteriaapi.namedbean; \n\nimport java.util.List; \nimport javax.enterprise.context.RequestScoped; \nimport javax.inject.Named; \nimport javax.persistence.EntityManager; \nimport javax.persistence.PersistenceContext; \nimport javax.persistence.TypedQuery; \nimport javax.persistence.criteria.CriteriaBuilder; \nimport javax.persistence.criteria.CriteriaQuery; \nimport javax.persistence.criteria.Path; \nimport javax.persistence.criteria.Predicate; \nimport javax.persistence.criteria.Root; \nimport javax.persistence.metamodel.EntityType; \nimport javax.persistence.metamodel.Metamodel; \nimport javax.persistence.metamodel.SingularAttribute; \nimport net.ensode.javaee8book.criteriaapi.entity.UsState; \n\n@Named \n@RequestScoped \npublic class CriteriaApiDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    private List<UsState> matchingStatesList; \n    private List<UsState> matchingStatesList; \n\n    public String findStates() { \n        String retVal = \"confirmation\"; \n        try { \n CriteriaBuilder criteriaBuilder = entityManager. getCriteriaBuilder(); CriteriaQuery<UsState> criteriaQuery = criteriaBuilder. createQuery(UsState.class); Root<UsState> root = criteriaQuery.from(UsState.class); Metamodel metamodel = entityManager.getMetamodel(); EntityType<UsState> usStateEntityType = \n             metamodel.entity( UsState.class); SingularAttribute<UsState, String> usStateAttribute= usStateEntityType.getDeclaredSingularAttribute( \"usStateNm\", String.class); Path<String> path = root.get(usStateAttribute); Predicate predicate = criteriaBuilder.like(path,\n            \"New%\"); criteriaQuery = criteriaQuery.where(predicate); TypedQuery typedQuery = entityManager.createQuery( criteriaQuery); matchingStatesStream = typedQuery.getResultStream(); if (matchingStatesStream != null) { matchingStatesList =\n             matchingStatesStream.collect(Collectors.toList()); } \n\n        } catch (Exception e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n\n        return retVal; \n    } \n\n    public List<UsState> getMatchingStatesList() { \n        return matchingStatesList; \n    } \n\n    public void setMatchingStatesList(List<UsState> \n     matchingStatesList) { \n        this.matchingStatesList = matchingStatesList; \n    } \n\n} \n```", "```java\npackage net.ensode.javaee8book.criteriaupdate.namedbean; \n\n//imports omitted for brevity \n\n@Named \n@RequestScoped \npublic class CriteriaUpdateDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    private int updatedRows; \n\n    public String updateData() { \n        String retVal = \"confirmation\"; \n\n        try { \n\n            userTransaction.begin(); \n            insertTempData(); \n\n CriteriaBuilder criteriaBuilder = entityManager.getCriteriaBuilder(); CriteriaUpdate<Address> criteriaUpdate = criteriaBuilder.createCriteriaUpdate(Address.class); Root<Address> root = \n             criteriaUpdate.from(Address.class); criteriaUpdate.set(\"city\", \"New York\"); criteriaUpdate.where(criteriaBuilder.equal( root.get(\"city\"), \"New Yorc\")); Query query =\n             entityManager.createQuery(criteriaUpdate); updatedRows = query.executeUpdate(); \n            userTransaction.commit(); \n        } catch (Exception e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n        return retVal; \n    } \n\n    public int getUpdatedRows() { \n        return updatedRows; \n    } \n\n    public void setUpdatedRows(int updatedRows) { \n        this.updatedRows = updatedRows; \n    } \n\n    private void insertTempData() throws NotSupportedException, \n            SystemException, RollbackException, HeuristicMixedException, \n            HeuristicRollbackException { \n      //body omitted since it is not relevant to the discussion at hand \n      //full source code available as part of this book's code download \n} \n```", "```java\npackage net.ensode.javaee8book.criteriadelete.namedbean; \n\n//imports omitted \n\n@Named \n@RequestScoped \npublic class CriteriaDeleteDemoBean { \n\n    @PersistenceContext \n    private EntityManager entityManager; \n\n    @Resource \n    private UserTransaction userTransaction; \n\n    private int deletedRows; \n\n    public String deleteData() { \n        String retVal = \"confirmation\"; \n\n        try { \n\n            userTransaction.begin(); \n\n            CriteriaBuilder criteriaBuilder = \n            entityManager.getCriteriaBuilder(); \n            CriteriaDelete<Address> criteriaDelete \n            = criteriaBuilder.createCriteriaDelete(Address.class); \n            Root<Address> root =\n            criteriaDelete.from(Address.class); \n            criteriaDelete.where(criteriaBuilder.or\n            (criteriaBuilder.equal(root.get(\"city\"), \"New York\"), \n             criteriaBuilder.equal(root.get(\"city\"), \"New York\"))); \n\n            Query query = \n            entityManager.createQuery(criteriaDelete); \n\n            deletedRows = query.executeUpdate(); \n            userTransaction.commit(); \n        } catch (Exception e) { \n            retVal = \"error\"; \n            e.printStackTrace(); \n        } \n        return retVal; \n    } \n\n    public int getDeletedRows() { \n        return deletedRows; \n    } \n\n    public void setDeletedRows(int updatedRows) { \n        this.deletedRows = updatedRows; \n    } \n} \n```", "```java\nnet.ensode.javaee8book.beanvalidation.entity; \n\nimport java.io.Serializable; \n\nimport javax.persistence.Column; \nimport javax.persistence.Entity; \nimport javax.persistence.Id; \nimport javax.persistence.Table; \nimport javax.validation.constraints.NotNull; \nimport javax.validation.constraints.Size; \n\n@Entity \n@Table(name = \"CUSTOMERS\") \npublic class Customer implements Serializable \n{ \n  @Id \n  @Column(name = \"CUSTOMER_ID\") \n  private Long customerId; \n\n  @Column(name = \"FIRST_NAME\") \n @NotNull @Size(min=2, max=20) \n  private String firstName; \n\n  @Column(name = \"LAST_NAME\") \n @NotNull @Size(min=2, max=20) \n  private String lastName; \n\n  private String email; \n\n  public Long getCustomerId() \n  { \n    return customerId; \n  } \n\n  public void setCustomerId(Long customerId) \n  { \n    this.customerId = customerId; \n  } \n\n  public String getEmail() \n  { \n    return email; \n  } \n\n  public void setEmail(String email) \n  { \n    this.email = email; \n  } \n\n  public String getFirstName() \n  { \n    return firstName; \n  } \n\n  public void setFirstName(String firstName) \n  { \n    this.firstName = firstName; \n  } \n\n  public String getLastName() \n  { \n    return lastName; \n  } \n\n  public void setLastName(String lastName) \n  { \n    this.lastName = lastName; \n  } \n} \n```"]