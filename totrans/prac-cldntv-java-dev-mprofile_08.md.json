["```java\nmvn clean package liberty:run\n```", "```java\n@ApplicationScoped\n@Liveness\n@Readiness\n@Startup\npublic class LivenessCheck implements HealthCheck {\n    public HealthCheckResponse call() {\n        [...]\n    }\n}\n```", "```java\n@ApplicationScoped\n@Liveness\npublic class LivenessCheck implements HealthCheck {\n    public HealthCheckResponse call() {\n    //Percentage value from 0.0-1.0\n        Double memoryUsage = getMemUsage();\n    HealthCheckResponseBuilder builder =       HealthCheckResponse.named(\"LivenessCheck\");\n    if (memoryUsage < 0.9) {\n        builder.up();\n    } else {\n        builder.down();\n    }\n    builder = builder.withData(\"MemoryUsage\",       memoryUsage.toString());\n    return builder.build();\n    }\n}\n```", "```java\n    return HealthCheckResponse.builder()\n      .name(\"LivenessCheck\")\n      .status(memoryUsage < 0.9)\n      .withData(\"MemoryUsage\", memoryUsage\n      .toString()).build()\n```", "```java\n@ApplicationScoped\n@Readiness\npublic class ReadinessCheck implements HealthCheck { \n    public final String NAME = \"evenNumberPhobic\";\n    public HealthCheckResponse call() {\n        long time = System.currentTimeMillis();\n        if (time % 2 == 0) \n            return HealthCheckResponse.down(NAME);\n        else\n            return HealthCheckResponse.up(NAME);\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class CDIMethodProducerChecks {\n  @Produces\n  @Liveness\n  HealthCheck livenessCDIMethodProducer() {\n    return () -> HealthCheckResponse.named(\"cdiMemUsage\")      .status(getMemUsage() < 0.9).build();\n  }\n  @Produces\n  @Readiness\n  HealthCheck readinessCDIMethodProducer() {\n    return () -> HealthCheckResponse.named(\"cdiCpuUsage\")      .status(getCpuUsage() < 0.9).build();\n  }\n  @Produces\n  @Startup\n  HealthCheck startupCDIMethodProducer() {\n    return () -> HealthCheckResponse.named       (\"cdiStartStatus\").status(getStatus()).build();\n  }\n}\n```", "```java\n{\n  \"status\": \"DOWN\",\n  \"checks\": [\n    {\n      \"name\": \"goodCheck\",\n      \"status\": \"UP\"\n    },\n    {\n      \"name\": \"questionableCheck\",\n      \"status\": \"DOWN\",\n      \"data\": {\n        \"application\": \"backend\",\n        \"locale\": \"en\"\n      }\n    }\n  ]\n}\n```", "```java\napiVersion: apps/v1\nkind: Deployment\n[...]\nspec:\n  [...]\n  readinessProbe:\n    httpGet:\n      path: /health/ready\n      port: 9080\n    initialDelaySeconds: 60\n    periodSeconds: 15\n    failureThreshold: 2\n  livenessProbe:\n    httpGet:\n      path: /health/live\n      port: 9080\n    periodSeconds: 15\n    failureThreshold: 3\n  startupProbe:\n    httpGet:\n      path: /health/started\n      port: 9080\n    periodSeconds: 30\n    failureThreshold: 4\n[...]\n```", "```java\n{\n  \"base\": {\n    \"gc.total;name=scavenge\": 361,\n    \"gc.total;name=global\": 9,\n    \"classloader.loadedClasses.count\": 9448,\n    \"gc.time;name=global\": 33,\n    \"gc.time;name=scavenge\": 368,\n    \"cpu.systemLoadAverage\": -1,\n    \"thread.count\": 73,\n    \"classloader.unloadedClasses.total\": 0,\n    \"jvm.uptime\": 52938,\n    \"cpu.processCpuTime\": 23359375000,\n    \"memory.committedHeap\": 53805056,\n    \"thread.max.count\": 89,\n    \"cpu.availableProcessors\": 12,\n    \"classloader.loadedClasses.total\": 9448,\n    \"thread.daemon.count\": 69,\n    \"memory.maxHeap\": 536870912,\n    \"cpu.processCpuLoad\": 0.0023284173808607016,\n    \"memory.usedHeap\": 41412992\n  },\n  \"vendor\": {\n    [..]\n  },\n  \"application\": {\n    [..]\n  },\n}\n```", "```java\n{\n  \"base\": {\n    \"gc.total\": {\n      \"unit\": \"none\",\n      \"displayName\": \"Garbage Collection Count\",\n      \"name\": \"gc.total\",\n      \"description\": \"Displays the total number of        collections that have occurred. This attribute lists         -1 if the collection count is undefined for this \n        collector.\",\n      \"type\": \"counter\",\n      \"tags\": [\n        [\n          \"name=global\"\n        ],\n        [\n          \"name=scavenge\"\n        ]\n      ]\n    },\n    [...]\n  },\n  \"vendor\": {\n    [...]\n  },\n  \"application\": {\n    [...]\n  }\n}\n```", "```java\n# TYPE base_gc_total counter\n# HELP base_gc_total Displays the total number of collections that have occurred. This attribute lists -1 if the collection count is undefined for this collector.\nbase_gc_total{name=\"global\"} 9\nbase_gc_total{name=\"scavenge\"} 372\n[...]\n```", "```java\n    @Inject\n    MetricRegistry metricRegistry;\n```", "```java\n    @Inject\n    @RegistryType(type=MetricRegistry.Type.APPLICATION)\n    MetricRegistry metricRegistry;\n```", "```java\nCounter counter(String name);\n\nCounter counter (String name, Tag... tags);\n\nCounter counter (MetricID metricID);\n\nCounter counter (Metadata metadata);\n\nCounter counter (Metadata metadata, Tag... tags);\n```", "```java\n  @Inject\n  MetricRegistry metricRegistry;\n  public void metaDataExample() {\n    Metadata metadata = Metadata.builder()\n    .withName(\"testMetadata\")\n    .withType(MetricType.INVALID)\n    .build();\n    }\n```", "```java\n@ApplicationScoped\n@Path(\"/metricsResource\")\npublic class MetricsResource {\n    @Inject\n    MetricRegistry metricRegistry;\n    public void metadataTagMetricIDExample() {\n        String metricName = \"myMetric\";\n        Metadata metadata = Metadata.builder()\n        .withName(metricName)\n        .withType(MetricType.INVALID)\n        .withDisplayName(\"Human readable display name\")\n        .withDescription(\"This metadata example\"\n                + \" demonstrates how to create a\"\n                + \" Metadata object\")\n        .withUnit(MetricUnits.NONE).build();\n        Tag tag = new Tag(\"tagKey\", \"tagValue\");\n        Tag anotherTag = new Tag(\"anotherTag\", \"tagValue\");\n        MetricID metricID = new MetricID(metricName, tag,           anotherTag);\n    }\n}\n```", "```java\n@ApplicationScoped\n@Path(\"/metricsResource\")\npublic class MetricsResource {\n    @Counted(name=\"sample.metric\", displayName=\"sample       metric\", description=\"This sample counter metric         illustrates how to instrument a metric annotation\",           unit=MetricUnits.NONE, absolute=true, tags=            {\"tag1=value1\", \"tag2=value2\")\n    public void someMethod() {\n        //logic\n    }\n}\n```", "```java\n  @GET\n  @Path(\"/counter1\")\n  public String getCounter1(){\n      Metadata counterMetadata = Metadata.builder()\n              .withName(COUNTER_METRIC_NAME)\n              .withType(MetricType.COUNTER).build();\n\n      Counter counter = metricRegistry\n              .counter(counterMetadata, COUNTER_TAG);\n      counter.inc(); //increments by one\n\n      return \"A counter metric has been created and         incremented\" + \"by 1, the total is now \" +           counter.getCount();  }\n\n  @GET\n  @Path(\"/counter2\")\n  public String getCounter2(){\n      MetricID counterMetricID = new \n        MetricID(COUNTER_METRIC_NAME, \n              COUNTER_TAG);\n      Counter counter =         metricRegistry.counter(counterMetricID);\n\n      counter.inc(3);\n      return \"A counter metric was retrieve and         incremented\" + \" by 3, the total is now \" +           counter.getCount();\n  }\n```", "```java\n$ curl http://localhost:9080/ch6/counterResource/counter1\nA counter metric has been created and incremented by 1, the total is now 1\n$ curl http://localhost:9080/ch6/counterResource/counter2\nA counter metric was retrieve and incremented by 3, the total  is now 4\n$ curl http://localhost:9080/metrics/application/counterMetric\n# TYPE application_counterMetric_total counter\napplication_counterMetric_total{metricType=\"counter\"} 4\n```", "```java\n@ApplicationScoped\n@Path(\"/counterResource\")\n@Counted\npublic class CounterAnnotatedResource {\n\n  @GET\n  @Path(\"/getResource\")\n  public String getResource() {\n      return \"Counting the class\";\n  }\n}\n```", "```java\n$ curl http://localhost:9080/metrics/application\n# TYPE application_metrics_demo_CounterAnnotatedResource\n_getResource_total counter\napplication_metrics_demo_CounterAnnotatedResource_getResource_total 1\n# TYPE application_metrics_demo_CounterAnnotatedResource\n_CounterAnnotatedResource_total counter\napplication_metrics_demo_CounterAnnotatedResource_CounterAnnotatedResource_total 1\n```", "```java\n  @GET\n  @Path(\"/concurrentGauge\")\n  public String getConcurrentGage(){\n      ExecutorService executorService = \n        Executors.newCachedThreadPool();\n        Runnable sleeper = () -> {\n            ConcurrentGauge concurrentGauge =               metricRegistry.concurrentGauge\n               (CONCURRENTGAUGE_METRIC_NAME);\n            concurrentGauge.inc();\n            try {\n                Thread.sleep(10000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            concurrentGauge.dec();\n        };\n        for (int i = 0; i < 10; i++) {\n            executorService.submit(sleeper);\n        }\n\n      return \"Concurrent Gauge created and invoked in         parallel\";\n  }\n```", "```java\n$ curl http://localhost:9080/ch6/concurrentGaugeResource\n/concurrentGauge\nConcurrent Gauge created and invoked in parallel\n$ curl http://localhost:9080/metrics/application\n# TYPE application_concurrentGaugeMetric_current gauge\napplication_concurrentGaugeMetric_current 10\n# TYPE application_concurrentGaugeMetric_min gauge\napplication_concurrentGaugeMetric_min 0\n# TYPE application_concurrentGaugeMetric_max gauge\napplication_concurrentGaugeMetric_max 0\n## after a complete full minute…\n$ curl http://localhost:9080/m**etrics/application**\n# TYPE application_concurrentGaugeMetric_current gauge\napplication_concurrentGaugeMetric_current 0\n# TYPE application_concurrentGaugeMetric_min gauge\napplication_concurrentGaugeMetric_min 0\n# TYPE application_concurrentGaugeMetric_max gauge\napplication_concurrentGaugeMetric_max 10\n```", "```java\n    @GET\n    @Path(\"/concurrentGuage\")\n    public String getConcurrentGauge(){\n        ExecutorService executorService =           Executors.newCachedThreadPool();\n        Runnable sleeper = () -> sleeper(); \n        for (int i = 0; i < 10; i++) {\n            executorService.submit(sleeper);\n        }\n        return \"Concurrent Gauge created and invoked in           parallel\";\n    }\n    @ConcurrentGauge(name = CONCURRENTGAUGE_METRIC_NAME,       absolute = true)\n    public void sleeper() {\n        try {\n            Thread.sleep(10000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n```", "```java\n    @GET\n    @Path(\"/histogram\")\n    public String getHistogram()  {\n      Metadata histogramMetadata = Metadata.builder()\n      .withName(HISTOGRAM_METRIC_NAME)\n      .withUnit(MetricUnits.MILLISECONDS)\n      .withDescription(\"This histogram tracks random \n        millesconds\")\n      .withType(MetricType.HISTOGRAM).build();\n\n      Histogram histogram =         metricRegistry.histogram(histogramMetadata);\n\n      Random random = new Random();\n      for (int i = 0; i < 1000 ; i++) {\n          int randomInt = random.nextInt(1000);\n          histogram.update(randomInt);\n      }\n      int count = (int) histogram.getCount(); //returns         long value of count\n      Snapshot snapshot = histogram.getSnapshot(); //rest         of the stats\n\n       return \"Histogram created/retrieved and is tracking          random milliseconds\";\n    }\n}\n```", "```java\n$ curl http://localhost:9080/ch6/histogramResource\n/histogram\nHistogram created/retrieved and is tracking random milliseconds\n$ curl http://localhost:9080/metrics/application\n# TYPE application_histogramMetric_mean_seconds gauge\napplication_histogramMetric_mean_seconds 0.5048109999999999\n# TYPE application_histogramMetric_max_seconds gauge\napplication_histogramMetric_max_seconds 0.998\n# TYPE application_histogramMetric_min_seconds gauge\napplication_histogramMetric_min_seconds 0.0\n# TYPE application_histogramMetric_stddev_seconds gauge\napplication_histogramMetric_stddev_seconds 0.2884925116515156\n# TYPE application_histogramMetric_seconds summary\n# HELP application_histogramMetric_seconds This histogram tracks random millesconds\napplication_histogramMetric_seconds_count 1000\napplication_histogramMetric_seconds_sum 504.81100000000004\napplication_histogramMetric_seconds{quantile=\"0.5\"} 0.507\napplication_histogramMetric_seconds{quantile=\"0.75\"} 0.755\napplication_histogramMetric_seconds{quantile=\"0.95\"} 0.9510000000000001\napplication_histogramMetric_seconds{quantile=\"0.98\"} 0.974\napplication_histogramMetric_seconds{quantile=\"0.99\"} 0.981\napplication_histogramMetric_seconds{quantile=\"0.999\"} 0.995\n```", "```java\n    private final Tag METER_TAG = new Tag(\"metricType\",       \"meter\");\n\n    @GET\n    @Path(\"/meter\")\n    public String getMeter(){     \n     Meter meter = metricRegistry.meter(METER_METRIC_NAME,       METER_TAG);\n        meter.mark();\n        return \"Meter created/retrieved and marked by 1\";\n    }\n    @GET\n    @Path(\"/meter2\")\n    public String getMeter2(@QueryParam(\"value\") \n      @DefaultValue(\"1\") int value){      \n        MetricID meterMetricID = new           MetricID(METER_METRIC_NAME, METER_TAG); \n        Meter meter = metricRegistry.meter(meterMetricID);\n        meter.mark(value);\n        return \"Meter created/retrieved and marked by \" +           value;\n    }\n}\n```", "```java\n$ curl http://localhost:9080/ch6/meterResource/meter\nMeter created/retrieved and marked by 1\n$ curl http://localhost:9080/ch6/meterResource/meter2?value=3\nMeter created/retrieved and marked by 3\n$ curl http://localhost:9080/metrics/application\n# TYPE application_histogramMetric_total counter\napplication_histogramMetric_total{metricType=\"meter\"} 4\n# TYPE application_histogramMetric_rate_per_second gauge\napplication_histogramMetric_rate_per_second{metricType=\"meter\"} 0.4348951236275281\n# TYPE application_histogramMetric_one_min_rate_per_second gauge\napplication_histogramMetric_one_min_rate_per_second{metricType=\"meter\"} 0.8\n# TYPE application_histogramMetric_five_min_rate_per_second gauge\napplication_histogramMetric_five_min_rate_per_second{metricType=\"meter\"} 0.8\n# TYPE application_histogramMetric_fifteen_min_rate_per\n_second gauge\napplication_histogramMetric_fifteen_min_rate_per_second{metricType=\"meter\"} 0.8\n```", "```java\n    @GET\n    @Path(\"/meter\")\n    @Metered(name=METER_METRIC_NAME, tags={\"metricType=meter\"})\n    public String getMeterWithAnnotations() {\n        return \"Meter created/retrieved and marked by 1           with annotations\";\n    }\n```", "```java\n    @GET\n    @Path(\"/timer\")\n    public String getTimer() {\n        Timer timer = metricRegistry.timer(TIMER_METRIC_NAME);\n        Timer.Context timerContext = timer.time();\n        timerContext.close();\n        Runnable runnableTimer = () -> {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        };\n        // Time a Runnable\n        timer.time(runnableTimer);\n        return \"Timer created/retrieved and recorded total           elapsed time of \" + timer.getElapsedTime();\n    }\n```", "```java\n    @GET\n    @Path(\"/simpleTimer\")\n    public String getSimpleTimer(){\n      SimpleTimer simpleTimer =        metricRegistry.simpleTimer(SIMPLETIMER_METRIC_NAME);\n      SimpleTimer.Context simpleTimerContext =        simpleTimer.time();\n        simpleTimerContext.close();\n        // Time a Callable\n        Callable<String> callable = () -> {\n            Thread.sleep(2000);\n            return \"Finished Callable\";\n        };\n        simpleTimer.time(callable);\n        return \"SimpleTimer created/retrieved and recorded           total elapsed time of \" + simpleTimer             .getElapsedTime();\n    }\n```", "```java\n$ curl http://localhost:9080/ch6/timersResource/timer\nTimer created/retrieved and recorded total elapsed time of 2001 milliseconds\n$ curl http://localhost:9080/ch6/timersResource/simpleTimer\nSimpleTimer created/retrieved and recorded total elapsed time of 2000 milliseconds\n$ curl http://localhost:9080/metrics/application\n# TYPE application_simpleTimerMetric_total counter\napplication_simpleTimerMetric_total 1\n# TYPE application_simpleTimerMetric_elapsedTime_seconds gauge\napplication_simpleTimerMetric_elapsedTime_seconds 2.0005379000000003\n# TYPE application_simpleTimerMetric_maxTimeDuration\n_seconds gauge\napplication_simpleTimerMetric_maxTimeDuration_seconds NaN\n# TYPE application_simpleTimerMetric_minTimeDuration\n_seconds gauge\napplication_simpleTimerMetric_minTimeDuration_seconds NaN\n```", "```java\n    @GET\n    @Path(\"/timers\")\n    @Timed(name=ANNOTATED_TIMER_METRIC_NAME)\n    @SimplyTimed(name= ANNOTATED_SIMPLETIMER_METRIC_NAME)\n    public String getTimerWithAnnotations() {\n        //some business logic to time\n        return \"Timer with annotations\";\n    }\n```", "```java\n<T, R extends Number> Gauge<R> gauge(String name, T object, Function<T, R> func, Tag... tags);\n<T, R extends Number> Gauge<R> gauge(MetricID metricID, T object, Function<T, R> func);\n<T, R extends Number> Gauge<R> gauge(Metadata metadata, T object, Function<T, R> func, Tag... tags);\n<T, R extends Number> Gauge<R> gauge(Metadata metadata, T object, Function<T, R> func, Tag... tags);\n<T extends Number> Gauge<T> gauge(MetricID metricID, Supplier<T> supplier);\n<T extends Number> Gauge<T> gauge(Metadata metadata, Supplier<T> supplier, Tag... tags);\n```", "```java\n@ApplicationScoped\n@Path(\"/metricsResource\")\npublic class MyMetricsResource {\n    @Gauge(name=\"time.since.epoch\", unit =       MetricUnits.MILLISECONDS)\n    public long getGaugeWithAnnotations() {\n        return System.currentTimeMillis();\n    }\n}\n```", "```java\n$ curl http://localhost:9080/metrics/application\n# TYPE application_metrics_demo_gaugeResource_time_since\n_epoch_seconds gauge\napplication_metrics_demo_gaugeResource_time_since_epoch\n_seconds 1.6181035765080001E9\n```", "```java\n    @Inject\n    @Metric(name=\"fieldInjectedCounter\")\n    Counter fieldInjectedCounter;\n\n    Counter parameterInjectedCounter;\n    @Inject\n    public void setCounterMetric(@Metric(name =       \"parameterInjectedCounter\") Counter         parameterInjectedCounter) {\n        this.parameterInjectedCounter =           parameterInjectedCounter;\n    }\n```", "```java\n$ curl http://localhost:9080/metrics/base\n# TYPE base_REST_request_total counter\nbase_REST_request_total{class=\"com.ibm.hybrid.cloud.sample.stocktrader.account.AccountService\",method=\"getAccounts\"} 45\n# TYPE application_simpleTimerMetric_elapsedTime_seconds gauge\nbase_REST_request_elapsedTime_seconds{class=\"com.ibm.hybrid.cloud.sample.stocktrader.account.AccountService\",method=\"getAccounts\"} 1.7304427800000002\n```", "```java\nbase_REST_request_total{class=\" com.ibm.hybrid.cloud.sample.  stocktrader.account.AccountService\"} \n```", "```java\nincrease(base_REST_request_total[10m]).\n```", "```java\nrate(base_REST_request_total[10m])\n```", "```java\nrate(base_REST_request_elapsedTime_seconds[10m]) / rate(base_REST_request_total[10m]).\n```", "```java\n <HTTP method>:<package name>.<class name>.<method name>\n```", "```java\n<HTTP method>:<@Path value of endpoint's class>/<@Path value of endpoint's method>. \n```", "```java\n@Path(\"/traceResource\")\npublic class TraceResource {\n\n    @Inject\n    io.opentracing.Tracer tracer;\n    @GET\n    @Path(\"automaticTracing\")\n    @Traced(value=false)\n    public String doNotTraceMe(){\n        return \"Do NOT trace me!\";\n    }\n    @Traced(operationName=\"traceMe\")\n    public void traceMe(){\n       System.out.println(\"Trace me!\");\n    }\n}\n```"]