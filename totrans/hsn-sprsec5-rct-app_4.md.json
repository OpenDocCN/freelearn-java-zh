["```java\ngit clone https://github.com/apereo/cas-overlay-template.git server\n```", "```java\n<dependency>\n   <groupId>org.apereo.cas</groupId>\n   <artifactId>cas-server-support-json-service-registry</artifactId>\n   <version>${cas.version}</version>\n</dependency>\n<dependency>\n   <groupId>org.apereo.cas</groupId>\n   <artifactId>cas-server-support-yaml-service-registry</artifactId>\n   <version>${cas.version}</version>\n</dependency>\n```", "```java\nmkdir -p src/main/resources\ncp -R etc src/main/resources\n```", "```java\ntouch src/main/resources/application.properties\n```", "```java\nserver.context-path=/cas\nserver.port=6443\n\nserver.ssl.key-store=classpath:/etc/cas/thekeystore\nserver.ssl.key-store-password=changeit\nserver.ssl.key-password=changeit\n\ncas.server.name: https://localhost:6443\ncas.server.prefix: https://localhost:6443/cas\n\ncas.adminPagesSecurity.ip=127\\.0\\.0\\.1\n\ncas.authn.accept.users=casuser::password\n```", "```java\nkeytool -genkey -keyalg RSA -alias thekeystore -keystore thekeystore -storepass password -validity 360 -keysize 2048\n```", "```java\nkeytool -export -alias thekeystore -file thekeystore.crt -keystore thekeystore\n```", "```java\n/usr/libexec/java_home\n```", "```java\nkeytool -import -alias thekeystore -storepass password -file thekeystore.crt -keystore \"$(/usr/libexec/java_home)\\jre\\lib\\security\\cacerts\"\n```", "```java\n./build.sh package\n./build.sh run\n```", "```java\n--- !<org.apereo.cas.services.RegexRegisteredService>\nserviceId: \"^(http?|https?)://.*\"\nname: \"YAML\"\nid: 5000\ndescription: \"description\"\nattributeReleasePolicy: !<org.apereo.cas.services.ReturnAllAttributeReleasePolicy> {}\naccessStrategy: !<org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy>\n enabled: true\n ssoEnabled: true\n```", "```java\ncas.serviceRegistry.yaml.location=classpath:/clients\n```", "```java\nunzip -a spring-boot-cas-client.zip\n```", "```java\n<dependency>\n    <groupId>org.springframework.security</groupId>\n    <artifactId>spring-security-cas</artifactId>\n</dependency>\n```", "```java\nserver.port=9090\n```", "```java\n@Bean\npublic ServiceProperties serviceProperties() {\nServiceProperties serviceProperties = new ServiceProperties();\n    serviceProperties.setService(\"http://localhost:9090/login/cas\");\n    serviceProperties.setSendRenew(false);\n    return serviceProperties;\n}\n```", "```java\n@Bean\npublic AuthenticationEntryPoint authenticationEntryPoint() {\n    CasAuthenticationEntryPoint casAuthEntryPoint = new CasAuthenticationEntryPoint();\n    casAuthEntryPoint.setLoginUrl(\"https://localhost:6443/cas/login\");\n    casAuthEntryPoint.setServiceProperties(serviceProperties());\n    return casAuthEntryPoint;\n}\n```", "```java\n@Bean\npublic TicketValidator ticketValidator() {\n    return new Cas30ServiceTicketValidator(\"https://localhost:6443/cas\");\n}\n```", "```java\n@Bean\npublic CasAuthenticationProvider casAuthenticationProvider() {\n  CasAuthenticationProvider provider = new CasAuthenticationProvider();\n  provider.setServiceProperties(serviceProperties());\n  provider.setTicketValidator(ticketValidator());\n  provider.setUserDetailsService((s) -> new User(\"casuser\", \"password\",\n        true, true, true, true,\n        AuthorityUtils.createAuthorityList(\"ROLE_ADMIN\")));\n  provider.setKey(\"CAS_PROVIDER_PORT_9090\");\n  return provider;\n}\n```", "```java\nprivate AuthenticationProvider authenticationProvider;\nprivate AuthenticationEntryPoint authenticationEntryPoint;\n\n@Autowired\npublic SpringSecurityConfig(CasAuthenticationProvider casAuthenticationProvider,\n                     AuthenticationEntryPoint authenticationEntryPoint) {\n   this.authenticationProvider = casAuthenticationProvider;\n   this.authenticationEntryPoint = authenticationEntryPoint;\n}\n```", "```java\n@Override\nprotected void configure(AuthenticationManagerBuilder auth) throws Exception {\n    auth.authenticationProvider(authenticationProvider);\n}\n```", "```java\n@Override\nprotected AuthenticationManager authenticationManager() throws Exception {\n    return new ProviderManager(Arrays.asList(authenticationProvider));\n}\n```", "```java\n@Bean\npublic CasAuthenticationFilter casAuthenticationFilter(ServiceProperties serviceProperties) throws Exception {\n    CasAuthenticationFilter filter = new CasAuthenticationFilter();\n    filter.setServiceProperties(serviceProperties);\n    filter.setAuthenticationManager(authenticationManager());\n    return filter;\n}\n```", "```java\n@Controller\npublic class IndexController {\n    @GetMapping(\"/\")\n    public String index() {\n        return \"index\";\n    }\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head>\n   <meta charset=\"UTF-8\" />\n   <title>Spring Security CAS Sample - Unsecured page</title>\n</head>\n<body>\n<h1>Spring Security CAS Sample - Unsecured page</h1>\n<br>\n<a href=\"/secured\">Go to Secured Page</a>\n</body>\n</html>\n```", "```java\n@Controller\n@RequestMapping(value = \"/secured\")\npublic class CasController {\n\n   @GetMapping\n   public String secured(ModelMap modelMap) {\n     Authentication auth = SecurityContextHolder.getContext().getAuthentication();\n     if( auth != null && auth.getPrincipal() != null\n         && auth.getPrincipal() instanceof UserDetails) {\n       modelMap.put(\"authusername\", ((UserDetails) auth.getPrincipal()).getUsername());\n     }\n     return \"secured\";\n   }\n}\n```", "```java\n<!DOCTYPE html>\n<html >\n<head>\n   <meta charset=\"UTF-8\" />\n   <title>Spring Security CAS Sample - Secured page</title>\n</head>\n<body>\n<h1>Spring Security CAS Sample - Secured page</h1>\n<br>\n<h3 th:text=\"${authusername} ? 'Hello authenticated user, ' + ${authusername} + '!' : 'Hello non-logged in user!'\">Hello non-logged in user!</h3>\n</body>\n</html>\n```", "```java\n<groupId>com.packtpub.book.ch04.springsecurity</groupId>\n<artifactId>jetty-jaas-authentication</artifactId>\n<version>1.0-SNAPSHOT</version>\n<packaging>war</packaging>\n<properties>\n   <maven.compiler.source>1.8</maven.compiler.source>\n   <maven.compiler.target>1.8</maven.compiler.target>\n   <failOnMissingWebXml>false</failOnMissingWebXml>\n</properties>\n<dependencies>\n   <!--Spring Security Dependencies-->\n   <dependency>\n       <groupId>org.springframework.security</groupId>\n       <artifactId>spring-security-web</artifactId>\n       <version>5.0.4.RELEASE</version>\n   </dependency>\n   <dependency>\n       <groupId>org.springframework.security</groupId>\n       <artifactId>spring-security-config</artifactId>\n       <version>5.0.4.RELEASE</version>\n   </dependency>\n   <!--Spring Framework Dependencies-->\n   <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context</artifactId>\n       <version>5.0.4.RELEASE</version>\n   </dependency>\n   <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-webmvc</artifactId>\n       <version>5.0.4.RELEASE</version>\n   </dependency>\n   <!-- JSP, JSTL and Tag Libraries-->\n   <dependency>\n       <groupId>javax.servlet</groupId>\n       <artifactId>javax.servlet-api</artifactId>\n       <version>3.1.0</version>\n       <scope>provided</scope>\n   </dependency>\n   <dependency>\n       <groupId>javax.servlet</groupId>\n       <artifactId>jstl</artifactId>\n       <version>1.2</version>\n       <scope>provided</scope>\n   </dependency>\n   <dependency>\n       <groupId>javax.servlet.jsp</groupId>\n       <artifactId>javax.servlet.jsp-api</artifactId>\n       <version>2.3.1</version>\n       <scope>provided</scope>\n   </dependency>\n   <dependency>\n       <groupId>javax.servlet.jsp.jstl</groupId>\n       <artifactId>javax.servlet.jsp.jstl-api</artifactId>\n       <version>1.2.1</version>\n   </dependency>\n   <dependency>\n       <groupId>taglibs</groupId>\n       <artifactId>standard</artifactId>\n       <version>1.1.2</version>\n   </dependency>\n   <!--SLF4J and logback-->\n   <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>\n       <version>1.7.25</version>\n   </dependency>\n   <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>jcl-over-slf4j</artifactId>\n       <version>1.7.25</version>\n   </dependency>\n   <dependency>\n       <groupId>ch.qos.logback</groupId>\n       <artifactId>logback-core</artifactId>\n       <version>1.2.3</version>\n   </dependency>\n   <dependency>\n       <groupId>ch.qos.logback</groupId>\n       <artifactId>logback-classic</artifactId>\n       <version>1.2.3</version>\n   </dependency>\n</dependencies>\n\n<build>\n   <plugins>\n       <plugin>\n           <groupId>org.eclipse.jetty</groupId>\n           <artifactId>jetty-maven-plugin</artifactId>\n           <version>9.4.10.v20180503</version>\n       </plugin>\n   </plugins>\n</build>\n```", "```java\n// Gather information and then use this in the login method\n@Override\npublic void initialize(Subject subject, CallbackHandler callbackHandler, Map<String, \n            ?> sharedState, Map<String, ?> options) {\n    this.subject = subject;\n\n    NameCallback nameCallback = new NameCallback(\"Username:\");\n    PasswordCallback passwordCallback = new PasswordCallback(\"Password:\", false);\n    try {\n        callbackHandler.handle(new Callback[] { nameCallback, passwordCallback });\n    } catch (IOException e) {\n        e.printStackTrace();\n    } catch (UnsupportedCallbackException e) {\n        e.printStackTrace();\n    }\n    username = nameCallback.getName();\n    password = new String(passwordCallback.getPassword());\n}\n```", "```java\n// Code where actual login happens. Implement any logic as required by your application\n// In our sample we are just doing a hard-coded comparison of username and password\n@Override\npublic boolean login() throws LoginException {\n    if (username == null || (username.equalsIgnoreCase(\"\")) ||\n        password == null || (password.equalsIgnoreCase(\"\"))) {\n        throw new LoginException(\"Username and password is mandatory.\");\n    } else if (username.equalsIgnoreCase(\"admin\") &&        \n        password.equalsIgnoreCase(\"password\")) {\n        subject.getPrincipals().add(new JaasPrincipal(username));\n        return true;\n    } else if (username.equalsIgnoreCase(\"user\") && \n        password.equalsIgnoreCase(\"password\")) {\n        subject.getPrincipals().add(new JaasPrincipal(username));\n        return true;\n    }\n    return false;\n}\n```", "```java\npublic class JaasPrincipal implements Principal, Serializable {\n    private String username;\n    public JaasPrincipal(String username) {\n        this.username = username;\n    }\n    @Override\n    public String getName() {\n        return \"Authenticated_\"+this.username;\n    }\n}\n```", "```java\npublic class JaasAuthorityGranter implements AuthorityGranter {\n    @Override\n    public Set<String> grant(Principal principal) {\n        if (principal.getName().equalsIgnoreCase(\"Authenticated_admin\")) {\n            return Collections.singleton(\"ROLE_ADMIN\");\n        } else if (principal.getName().equalsIgnoreCase(\"Authenticated_user\")) {\n            return Collections.singleton(\"ROLE_USER\");\n        }\n        return Collections.singleton(\"ROLE_USER\");\n    }\n}\n```", "```java\n@Configuration\n@EnableWebMvc\n@ComponentScan( basePackages = \"com.packtpub\")\npublic class SpringMVCConfig implements WebMvcConfigurer {\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.jsp().prefix(\"/WEB-INF/views/\").suffix(\".jsp\");\n    }\n    @Override\n    public void addViewControllers(ViewControllerRegistry registry) {\n        registry.addViewController(\"/login\");\n    }\n}\n```", "```java\n@Bean\nDefaultJaasAuthenticationProvider jaasAuthenticationProvider() {\n   AppConfigurationEntry appConfig = new AppConfigurationEntry(\"com.packtpub.book.ch04.springsecurity.loginmodule.JaasLoginModule\",\n           AppConfigurationEntry.LoginModuleControlFlag.REQUIRED, new HashMap());\n\n   InMemoryConfiguration memoryConfig = new InMemoryConfiguration(new AppConfigurationEntry[] { appConfig });\n\n   DefaultJaasAuthenticationProvider def = new DefaultJaasAuthenticationProvider();\n   def.setConfiguration(memoryConfig);\n   def.setAuthorityGranters(new AuthorityGranter[] {jaasAuthorityGranter});\n   return def;\n}\n\n//We are configuring jaasAuthenticationProvider as our global AuthenticationProvider\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n   auth.authenticationProvider(jaasAuthenticationProvider());\n}\n```", "```java\n// Setting up our HTTP security\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n\n   // Setting up security\n   http.authorizeRequests()\n           .regexMatchers(\"/admin/.*\").hasRole(\"ADMIN\")\n           .anyRequest().authenticated().and().httpBasic();\n\n   // Setting our login page and to make it public\n   http.formLogin().loginPage(\"/login\").permitAll();\n   // Logout configuration\n   http.logout().logoutSuccessUrl(\"/\");\n   // Exception handling, for access denied\n   http.exceptionHandling().accessDeniedPage(\"/noaccess\");\n}\n```", "```java\n@Controller\npublic class JaasController {\n    @RequestMapping(value=\"/\", method = RequestMethod.GET)\n    public ModelAndView userPage() {\n        ModelAndView modelAndView = new ModelAndView(\"user\");\n        return modelAndView;\n    }\n    @RequestMapping(value = \"/admin/moresecured\", method = RequestMethod.GET)\n    public ModelAndView adminPage(HttpServletRequest request) {\n        ModelAndView modelAndView = new ModelAndView();\n        modelAndView.setViewName(\"moresecured\");\n        return modelAndView;\n    }\n    @RequestMapping(value=\"/noaccess\", method = RequestMethod.GET)\n    public ModelAndView accessDenied() {\n        ModelAndView modelAndView = new ModelAndView(\"noaccess\");\n        return modelAndView;\n    }\n}\n```", "```java\nmvn jetty:run\n```", "```java\n@Component\npublic final class CustomAuthenticationEntryPoint implements \n        AuthenticationEntryPoint {\n    @Override\n    public void commence(final HttpServletRequest request, final \n            HttpServletResponse response, final AuthenticationException \n        authException) throws IOException {\n        response.sendError(HttpServletResponse.SC_UNAUTHORIZED, \"Unauthorized\");\n    }\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        .authorizeRequests()\n        .antMatchers(\"/public\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n        .httpBasic()\n        .authenticationEntryPoint(customAuthenticationEntryPoint);\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n    .authorizeRequests()\n        .antMatchers(\"/public\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n        .httpBasic()\n    .defaultAuthenticationEntryPointFor(\n        loginUrlAuthenticationEntryPointUser(),\n        new AntPathRequestMatcher(\"/secured/user/**\"))\n    .defaultAuthenticationEntryPointFor(\n        loginUrlAuthenticationEntryPointAdmin(),\n        new AntPathRequestMatcher(\"/secured/admin/**\"));\n}\n@Bean\npublic AuthenticationEntryPoint loginUrlAuthenticationEntryPointUser(){\n    return new LoginUrlAuthenticationEntryPoint(\"/userAuth\");\n}      \n@Bean\npublic AuthenticationEntryPoint loginUrlAuthenticationEntryPointAdmin(){\n    return new LoginUrlAuthenticationEntryPoint(\"/adminAuth\");\n}\n```", "```java\n{bcrypt}$2y$10$zsUaFDpkjg01.JVipZhtFeOHpC2/LCH3yx6aNJpTNDOA8zDqhzgR6\n```", "```java\n@Autowired\npublic void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n    auth\n        .inMemoryAuthentication()\n        .passwordEncoder(new StandardPasswordEncoder())    \n        .withUser(\"user\")\n        .password(\"025baf3868bc8f785267d4aec1f02fa50809b7f715576198eda6466\")\n        .roles(\"USER\");\n}\n```", "```java\nPasswordEncoder passwordEncoder = \n    PasswordEncoderFactories.createDelegatingPasswordEncoder();\npasswordEncoder.setDefaultPasswordEncoderForMatches(new BCryptPasswordEncoder());\n```", "```java\nString defaultEncode = \"bcrypt\";\nMap encoders = new HashMap<>();\nencoders.put(defaultEncode, new BCryptPasswordEncoder());\nencoders.put(\"scrypt\", new SCryptPasswordEncoder());\nencoders.put(\"sha256\", new StandardPasswordEncoder());\n\nPasswordEncoder passwordEncoder =\n    new DelegatingPasswordEncoder(defaultEncode, encoders);\n```", "```java\nauth\n    .inMemoryAuthentication()\n    .passwordEncoder(new StandardPasswordEncoder(“random-text-salt”));\n```", "```java\npublic class NewLogicFilter extends GenericFilterBean {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response,\n            FilterChain chain) throws IOException, ServletException {\n        // Custom logic\n        chain.doFilter(request, response);\n    }\n}\n```", "```java\n@Configuration\npublic class SpringSecurityConfiguration extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n            .addFilterBefore(new NewLogicFilter(), \n                BasicAuthenticationFilter.class);\n    }\n}\n```"]