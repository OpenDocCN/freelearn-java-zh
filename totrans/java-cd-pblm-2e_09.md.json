["```java\ndefault <R> Stream<R> mapMulti (\n  BiConsumer<? super T, ? super Consumer<R>> mapper) \n```", "```java\nList<Integer> integers = List.of(3, 2, 5, 6, 7, 8);\nList<Integer> evenDoubledClassic = integers.stream()\n  .filter(i -> i % 2 == 0)\n  .map(i -> i * 2)\n  .collect(toList()); \n```", "```java\nList<Integer> evenDoubledMM = integers.stream()\n  .<Integer>mapMulti((i, consumer) -> {\n     if (i % 2 == 0) {\n       consumer.accept(i * 2);\n     }\n  })\n  .collect(toList()); \n```", "```java\nint evenDoubledAndSumMM = integers.stream()\n  .mapMultiToInt((i, consumer) -> {\n     if (i % 2 == 0) {\n       consumer.accept(i * 2);\n     }\n  })\n  .sum(); \n```", "```java\nList<Integer> evenDoubledMM = integers.stream()\n  .mapMultiToInt((i, consumer) -> {\n    if (i % 2 == 0) {\n      consumer.accept(i * 2);\n    }\n  })\n  .mapToObj(i -> i) // or, .boxed()\n  .collect(toList()); \n```", "```java\npublic class Author {\n  private final String name;\n  private final List<Book> books;\n  ...\n}\npublic class Book {\n\n  private final String title;\n  private final LocalDate published;\n  ...\n} \n```", "```java\npublic class Bookshelf {\n  private final String author;\n  private final String book;\n  ...\n} \n```", "```java\nList<Bookshelf> bookshelfClassic = authors.stream()\n  .flatMap(\n    author -> author.getBooks()\n                    .stream()\n                    .map(book -> new Bookshelf(\n                       author.getName(), book.getTitle()))\n  ).collect(Collectors.toList()); \n```", "```java\nList<Bookshelf> bookshelfMM = authors.stream()\n  .<Bookshelf>mapMulti((author, consumer) -> {\n     for (Book book : author.getBooks()) {\n       consumer.accept(new Bookshelf(\n         author.getName(), book.getTitle()));\n     }\n  })\n  .collect(Collectors.toList()); \n```", "```java\nList<Bookshelf> bookshelfGt2005Classic = authors.stream()\n  .flatMap(\n    author -> author.getBooks()\n      .stream()\n      .filter(book -> book.getPublished().getYear() > 2005)\n      .map(book -> new Bookshelf(\n         author.getName(), book.getTitle()))\n  ).collect(Collectors.toList()); \n```", "```java\nList<Bookshelf> bookshelfGt2005MM = authors.stream()\n  .<Bookshelf>mapMulti((author, consumer) -> {\n    for (Book book : author.getBooks()) {\n      if (book.getPublished().getYear() > 2005) {\n        consumer.accept(new Bookshelf(\n          author.getName(), book.getTitle()));\n      }\n    }\n  })\n  .collect(Collectors.toList()); \n```", "```java\npublic void bookshelfGt2005(Consumer<Bookshelf> consumer) {\n  for (Book book : this.getBooks()) {\n    if (book.getPublished().getYear() > 2005) {\n      consumer.accept(new Bookshelf(\n        this.getName(), book.getTitle()));\n    }\n  }\n} \n```", "```java\nList<Bookshelf> bookshelfGt2005MM = authors.stream()\n  .<Bookshelf>mapMulti(Author::bookshelfGt2005)\n  .collect(Collectors.toList()); \n```", "```java\npublic class Post {\n\n  private final int id;\n  private final String title;\n  private final String tags;\n  public Post(int id, String title, String tags) {\n    this.id = id;\n    this.title = title;\n    this.tags = tags;\n  }\n  ...\n  public static List<String> allTags(Post post) {\n\n    return Arrays.asList(post.getTags().split(\"#\"));\n  }\n} \n```", "```java\nList<Post> posts = List.of(\n  new Post(1, \"Running jOOQ\", \"#database #sql #rdbms\"),\n  new Post(2, \"I/O files in Java\", \"#io #storage #rdbms\"),\n  new Post(3, \"Hibernate Course\", \"#jpa #database #rdbms\"),\n  new Post(4, \"Hooking Java Sockets\", \"#io #network\"),\n  new Post(5, \"Analysing JDBC transactions\", \"#jdbc #rdbms\")\n); \n```", "```java\nMap<String, List<Integer>> result = posts.stream()\n  .flatMap(post -> Post.allTags(post).stream()\n  .map(t -> entry(t, post.getId())))\n  .collect(groupingBy(Entry::getKey,\n              mapping(Entry::getValue, toList()))); \n```", "```java\nMap<String, List<Integer>> resultMulti = posts.stream()\n  .<Map.Entry<String, Integer>>mapMulti((post, consumer) -> {\n      for (String tag : Post.allTags(post)) {\n             consumer.accept(entry(tag, post.getId()));\n      }\n  })\n  .collect(groupingBy(Entry::getKey,\n              mapping(Entry::getValue, toList()))); \n```", "```java\npublic class Printer {\n\n  Printer() {\n    System.out.println(\"Reset printer ...\");\n  }\n\n  public static void printNoReset() {\n    System.out.println(\n      \"Printing (no reset) ...\" + Printer.class.hashCode());\n  }\n\n  public void printReset() {\n    System.out.println(\"Printing (with reset) ...\" \n      + Printer.class.hashCode());\n  }\n} \n```", "```java\nSystem.out.print(\"p1:\");p1.run();\nSystem.out.print(\"p1:\");p1.run();\nSystem.out.print(\"p2:\");p2.run();\nSystem.out.print(\"p2:\");p2.run();\nSystem.out.print(\"p1:\");p1.run();\nSystem.out.print(\"p2:\");p2.run(); \n```", "```java\nRunnable p1 = new Printer()::printReset;\nRunnable p2 = () -> new Printer().printReset(); \n```", "```java\nReset printer ... \n```", "```java\np1:Printing (with reset) ...1159190947\np1:Printing (with reset) ...1159190947\np2:Reset printer ...\nPrinting (with reset) ...1159190947\np2:Reset printer ...\nPrinting (with reset) ...1159190947\np1:Printing (with reset) ...1159190947\np2:Reset printer ...\nPrinting (with reset) ...1159190947 \n```", "```java\nRunnable p1 = Printer::printNoReset;\nRunnable p2 = () -> Printer.printNoReset(); \n```", "```java\np1:Printing (no reset) ...149928006\np1:Printing (no reset) ...149928006\np2:Printing (no reset) ...149928006\np2:Printing (no reset) ...149928006\np1:Printing (no reset) ...149928006\np2:Printing (no reset) ...149928006 \n```", "```java\nstatic class Counter {\n  static int c;\n  public static int count() {\n    System.out.println(\"Incrementing c from \" \n      + c + \" to \" + (c + 1));\n    return c++; \n  }\n} \n```", "```java\nSupplier<Integer> supplier = () -> Counter.count();\nConsumer<Integer> consumer = c -> {\n  c = c + Counter.count(); \n  System.out.println(\"Consumer: \" + c ); \n}; \n```", "```java\nSystem.out.println(\"Counter: \" + Counter.c); // 0 \n```", "```java\nSystem.out.println(\"Supplier: \" + supplier.get()); // 0 \n```", "```java\nSystem.out.println(\"Counter: \" + Counter.c); // 1 \n```", "```java\nconsumer.accept(Counter.c); \n```", "```java\nc -> {\n  c = c + Counter.count(); \n  System.out.println(\"Consumer: \" + c ); \n} // Consumer: 2 \n```", "```java\nSystem.out.println(\"Counter: \" + Counter.c); // 2 \n```", "```java\nSystem.out.println(\"Supplier: \" + supplier.get()); // 2 \n```", "```java\nSystem.out.println(\"Counter: \" + Counter.c); // 3 \n```", "```java\npublic class ApplicationDependency {\n\n  private final long id;\n  private final String name;\n  private String dependencies;\n  public ApplicationDependency(long id, String name) {\n    this.id = id;\n    this.name = name;\n  }\n  public long getId() {\n    return id;\n  }\n  public String getName() {\n    return name;\n  }   \n\n**public** **String** **getDependencies****()** **{**\n**return** **dependencies;**\n **}**  \n\n  private void downloadDependencies() {\n\n    dependencies = \"list of dependencies \n      downloaded from repository \" + Math.random();\n  }    \n} \n```", "```java\npublic class DependencyManager {\n\n  private Map<Long,String> apps = new HashMap<>();\n\n  public void processDependencies(ApplicationDependency appd){\n\n    System.out.println();\n    System.out.println(\"Processing app: \" + appd.getName());\n    System.out.println(\"Dependencies: \" \n      + **appd.getDependencies()**);\n\n    apps.put(appd.getId(),**appd.getDependencies()**); \n  }    \n} \n```", "```java\npublic class ApplicationDependency {\n\n  **private****String****dependencies****=** **downloadDependencies();**\n  ...\n  public String getDependencies() {\n\n    return dependencies;\n  }\n  ...\n  private String downloadDependencies() {\n\n    return \"list of dependencies downloaded from repository \" \n      + Math.random();\n  }  \n} \n```", "```java\npublic class ApplicationDependency {\n  private String dependencies;\n  ...\n  public String getDependencies() {\n\n    **downloadDependencies();** \n\n    return dependencies;\n  }  \n  ...\n  private void downloadDependencies() {\n\n    dependencies = \"list of dependencies \n      downloaded from repository \" + Math.random();\n  }    \n} \n```", "```java\npublic String getDependencies() {\n\n**if** **(dependencies ==** **null****) {**\n **downloadDependencies();**\n **}**\n\n  return dependencies;\n} \n```", "```java\npublic class ApplicationDependency {\n\n**private****final** **Supplier<String> dependencies** \n **=** **this****::downloadDependencies;** \n **...**\n  public String getDependencies() {\n    **return** **dependencies.get();**\n  }   \n  ...\n  private **String** downloadDependencies() {\n\n    return \"list of dependencies downloaded from repository \" \n     + Math.random();\n  } \n} \n```", "```java\n@FunctionalInterface\npublic interface FSupplier<R> extends Supplier<R> {} \n```", "```java\npublic class Memoize {\n  private final static Object UNDEFINED = new Object();\n  public static <T> FSupplier<T> supplier(\n    final Supplier<T> supplier) {\n\n    AtomicReference cache = new AtomicReference<>(UNDEFINED);\n\n    return () -> { \n\n      Object value = cache.get(); \n\n      if (value == UNDEFINED) { \n\n        synchronized (cache) {\n\n          if (cache.get() == UNDEFINED) {\n\n            System.out.println(\"Caching: \" + supplier.get());\n            value = supplier.get();\n            cache.set(value);\n          }\n        }\n      }\n\n      return (T) value;\n    };\n  }\n} \n```", "```java\nprivate final Supplier<String> dependencies \n  = Memoize.supplier(this::downloadDependencies); \n```", "```java\nString text = \"\"\"\n  test, a, 1, 4, 5, 0xf5, 0x5, 4.5d, 6, 5.6, 50000, 345, \n  4.0f, 6$3, 2$1.1, 5.5, 6.7, 8, a11, 3e+1, -11199, 55 \n  \"\"\"; \n```", "```java\nList<Integer> integerValues \n  = parseText(text, Integer::valueOf);\nList<Double> doubleValues \n  = parseText(text, Double::valueOf);\n...\nList<Double> moreDoubleValues \n  = parseText(text, t -> Double.valueOf(t.replaceAll(\n      \"\\\\$\", \"\").replaceAll(\"xf\", \".\").replaceAll(\"x\", \".\"))); \n```", "```java\npublic static <T> List<T> parseText(\n    String text, Function<String, T> func) {\n  ...\n} \n```", "```java\npublic static <T> List<T> parseText(\n    String text, Function<String, T> func) {\n  return Arrays.stream(text.split(\",\")) // step 1 and 2\n    .filter(s -> !s.isEmpty())\n    .map(s -> {\n       try {\n         return func.apply(s.trim());   // step 3\n       } catch (Exception e) {}\n       return null;\n    })\n    .filter(Objects::nonNull)           // step 4\n    .collect(Collectors.toList());      // step 5\n} \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  public Car(String brand, String fuel, int horsepower) {\n    this.brand = brand;\n    this.fuel = fuel;\n    this.horsepower = horsepower;\n  }\n\n  // getters, equals(), hashCode(), toString()\n} \n```", "```java\nPredicate<Car> pChevrolets \n  = car -> car.getBrand().equals(\"Chevrolet\"); \n```", "```java\nList<Car> chevrolets = cars.stream() \n  .filter(pChevrolets)\n  .collect(Collectors.toList()); \n```", "```java\nPredicate<Car> pNotChevrolets \n  = car -> !car.getBrand().equals(\"Chevrolet\"); \n```", "```java\nPredicate<Car> pNotChevrolets = pChevrolets.negate(); \n```", "```java\nPredicate<Car> pNotChevrolets = Predicate.not(pChevrolets); \n```", "```java\nList<Car> notChevrolets = cars.stream() \n  .filter(pNotChevrolets) \n  .collect(Collectors.toList()); \n```", "```java\nPredicate<Car> pHorsepower \n  = car -> car.getHorsepower() >= 150; \n```", "```java\nList<Car> notChevrolets150 = cars.stream() \n  .filter(pChevrolets.negate())\n  .filter(pHorsepower)\n  .collect(Collectors.toList()); \n```", "```java\nList<Car> notChevrolets150 = cars.stream()\n  .filter(pChevrolets.negate().and(pHorsepower))\n  .collect(Collectors.toList()); \n```", "```java\nPredicate<Car> pElectric \n  = car -> car.getFuel().equals(\"electric\");\n\nList<Car> chevroletsOrElectric = cars.stream() \n  .filter(pChevrolets.or(pElectric))\n  .collect(Collectors.toList()); \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic final class Predicates {\n\n  private Predicates() {\n    throw new AssertionError(\"Cannot be instantiated\");\n  }\n  public static <T> Predicate<T> asOneAnd(\n      Predicate<T>... predicates) {\n    Predicate<T> theOneAnd = Stream.of(predicates)\n      .reduce(p -> true, Predicate::and);\n\n    return theOneAnd;\n  }\n\n  public static <T> Predicate<T> asOneOr(\n      Predicate<T>... predicates) {\n    Predicate<T> theOneOr = Stream.of(predicates)\n      .reduce(p -> false, Predicate::or);\n\n    return theOneOr; \n  }\n} \n```", "```java\nPredicate<Car> pLexus = car -> car.getBrand().equals(\"Lexus\");\nPredicate<Car> pDiesel = car -> car.getFuel().equals(\"diesel\"); \nPredicate<Car> p250 = car -> car.getHorsepower() > 250; \n```", "```java\nPredicate<Car> predicateAnd = Predicates\n  .asOneAnd(pLexus, pDiesel, p250); \n```", "```java\nList<Car> lexusDiesel250And = cars.stream() \n  .filter(predicateAnd) \n  .collect(Collectors.toList()); \n```", "```java\nPredicate<Car> p100 = car -> car.getHorsepower() >= 100;\nPredicate<Car> p200 = car -> car.getHorsepower() <= 200;\n\nPredicate<Car> p300 = car -> car.getHorsepower() >= 300;\nPredicate<Car> p400 = car -> car.getHorsepower() <= 400; \n```", "```java\nPredicate<Car> pCombo = Predicates.asOneOr(\n  Predicates.asOneAnd(p100, p200), \n  Predicates.asOneAnd(p300, p400)\n); \n```", "```java\nList<Car> comboAndOr = cars.stream() \n  .filter(pCombo) \n  .collect(Collectors.toList()); \n```", "```java\npublic class Author {\n  private final String name;\n  private final List<Book> books;\n  ...\n}\npublic class Book {\n\n  private final String title;\n  private final LocalDate published;\n  ...\n} \n```", "```java\nList<Book> book2002fm = authors.stream()\n  .flatMap(author -> author.getBooks().stream())\n  .filter(book -> book.getPublished().getYear() == 2002)\n  .collect(Collectors.toList()); \nmapMulti():\n```", "```java\nList<Book> book2002mm = authors.stream()\n  .<Book>mapMulti((author, consumer) -> {\n     for (Book book : author.getBooks()) {\n       if (book.getPublished().getYear() == 2002) {\n         consumer.accept(book);\n       }\n     }\n   })\n   .collect(Collectors.toList()); \n```", "```java\nList<Author> author2002mm = authors.stream()\n  .<Author>mapMulti((author, consumer) -> {\n     for (Book book : author.getBooks()) {\n       if (book.getPublished().getYear() == 2002) {\n         consumer.accept(author);\n         break;\n       }\n     }\n   })\n   .collect(Collectors.toList()); \n```", "```java\nList<Author> authors2002am = authors.stream()\n  .filter(\n     author -> author.getBooks()\n                     .stream()\n                     .anyMatch(book -> book.getPublished()\n                       .getYear() == 2002)\n  )\n .collect(Collectors.toList()); \n```", "```java\nauthors.removeIf(author -> author.getBooks().stream()\n  .noneMatch(book -> book.getPublished().getYear() == 2002)); \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n} \n```", "```java\nCar car = new Car(\"Ford\", \"electric\", 80); \n```", "```java\nPredicate<Car> predicate = cars::contains; \n```", "```java\nSystem.out.println(predicate.test(car)); // true \n```", "```java\nSystem.out.println(\n  cars.stream().anyMatch(p -> p.equals(car))\n); \n```", "```java\nBiPredicate<List<Car>, Car> biPredicate = List::contains; \n```", "```java\nSystem.out.println(biPredicate.test(cars, car)); // true \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n} \n```", "```java\nenum PredicateBuilder {\n  GT((t, u) -> t > u),\n  LT((t, u) -> t < u),\n  GE((t, u) -> t >= u),\n  LE((t, u) -> t <= u),\n  EQ((t, u) -> t.intValue() == u.intValue()),\n  NOT_EQ((t, u) -> t.intValue() != u.intValue());\n  ... \n```", "```java\n private final BiPredicate<Integer, Integer> predicate;\n  private PredicateBuilder(\n      BiPredicate<Integer, Integer> predicate) {\n    this.predicate = predicate;\n  }\n  ... \n```", "```java\n public <T> Predicate<T> toPredicate(\n      Function<T, Integer> getter, int u) {\n    return obj -> this.predicate.test(getter.apply(obj), u);\n  }\n  ... \n```", "```java\npublic static <T> Function<T, Integer> getFieldByName(\n    Class<T> cls, String field) {\n  return object -> {\n    try {\n      Field f = cls.getDeclaredField(field);\n      f.setAccessible(true);\n      return (Integer) f.get(object);\n    } catch (IllegalAccessException | IllegalArgumentException\n           | NoSuchFieldException | SecurityException e) { \n      throw new RuntimeException(e);\n    }\n  };\n} \n```", "```java\nPredicate<Car> gtPredicate \n  = PredicateBuilder.GT.toPredicate(\n      PredicateBuilder.getFieldByName(\n        Car.class, \"horsepower\"), 300); \n```", "```java\ncars.stream()\n    .filter(gtPredicate)\n    .forEach(System.out::println); \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n} \n```", "```java\nMap<String, String> filtersMap = Map.of(\n  \"brand\", \"Chevrolet\",\n  \"fuel\", \"diesel\"\n); \n```", "```java\nenum PredicateBuilder {\n  EQUALS(String::equals);\n  ... \n```", "```java\n private final BiPredicate<String, String> predicate;\n  private PredicateBuilder(\n      BiPredicate<String, String> predicate) {\n    this.predicate = predicate;\n  }\n  public <T> Predicate<T> toPredicate(\n      Function<T, String> getter, String u) {\n    return obj -> this.predicate.test(getter.apply(obj), u);\n  }\n  public static <T> Function<T, String> \n      getFieldByName(Class<T> cls, String field) {\n    return object -> {\n      try {\n        Field f = cls.getDeclaredField(field);\n        f.setAccessible(true);\n        return (String) f.get(object);\n      } catch (\n          IllegalAccessException | IllegalArgumentException\n          | NoSuchFieldException | SecurityException e) { \n        throw new RuntimeException(e);\n      }\n    };\n  }        \n} \n```", "```java\nPredicate<Car> filterPredicate = t -> true;\nfor(String key : filtersMap.keySet()) {\n  filterPredicate \n    = filterPredicate.and(PredicateBuilder.EQUALS\n      .toPredicate(PredicateBuilder.getFieldByName(\n        Car.class, key), filtersMap.get(key))); \n} \n```", "```java\ncars.stream()\n    .filter(filterPredicate)\n    .forEach(System.out::println); \n```", "```java\npublic final class Predicates {\n  private static final Logger logger \n    = LoggerFactory.getLogger(LogPredicate.class);\n  private Predicates() {\n    throw new AssertionError(\"Cannot be instantiated\");\n  }\n  public static <T> Predicate<T> testAndLog(\n      Predicate<? super T> predicate, String val) {\n    return t -> {\n      boolean result = predicate.test(t);\n      if (!result) {\n        logger.warn(predicate + \" don't match '\" + val + \"'\");\n      }\n      return result;\n    };\n  }\n} \n```", "```java\n@FunctionalInterface\npublic interface LogPredicate<T> extends Predicate<T> {\n  Logger logger = LoggerFactory.getLogger(LogPredicate.class);\n\n  default boolean testAndLog(T t, String val) {\n    boolean result = this.test(t);\n    if (!result) {\n      logger.warn(t + \" don't match '\" + val + \"'\");\n    }\n    return result;\n  }\n} \n```", "```java\nList<Car> cars = Arrays.asList(\n  new Car(\"Dacia\", \"diesel\", 100),\n  new Car(\"Lexus\", \"gasoline\", 300), \n  ...\n  new Car(\"Ford\", \"electric\", 200)\n);\n\nCar car1 = new Car(\"Lexus\", \"diesel\", 300);\nCar car2 = new Car(\"Ford\", \"electric\", 80);\nCar car3 = new Car(\"Chevrolet\", \"electric\", 150);\nList<Car> cars123 = List.of(car1, car2, car3); \n```", "```java\nboolean contains(T item);\nboolean containsAll(T... items);\nboolean containsAll(List<? extends T> items);\n**boolean****containsAll****(Stream<? extends T> items)****;**\nboolean containsAny(T... items);\nboolean containsAny(List<? extends T> items);\n**boolean****containsAny****(Stream<? extends T> items)****;** \n```", "```java\ndefault boolean containsAll(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return true;\n  }\n  return stream().filter(item -> set.remove(item))\n                 .anyMatch(any -> set.isEmpty());\n} \n```", "```java\ndefault boolean containsAny(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return false;\n  }\n  return stream().anyMatch(set::contains);\n} \n```", "```java\nstatic <T> Set<T> toSet(Stream<? extends T> stream) {\n  return stream.collect(Collectors.toSet());\n} \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic interface Streams<T> {\n  Stream<T> stream();\n  static <T> Streams<T> from(Stream<T> stream) {\n    return () -> stream;\n  }\n  ... \n```", "```java\n default boolean contains(T item) {\n    return stream().anyMatch(isEqual(item));\n  }\n  default boolean containsAll(T... items) {\n    return containsAll(Stream.of(items));\n  }\n  default boolean containsAll(List<? extends T> items) {\n    return containsAll(items.stream());\n  }\n  default boolean containsAll(Stream<? extends T> items) {\n    ...   \n  }\n  default boolean containsAny(T... items) {\n    return containsAny(Stream.of(items));\n  }\n  default boolean containsAny(List<? extends T> items) {\n    return containsAny(items.stream());\n  }\n  default boolean containsAny(Stream<? extends T> items) {\n    ...\n  }\n  static <T> Set<T> toSet(Stream<? extends T> stream) {\n    ...\n  }\n} \n```", "```java\nboolean result = Streams.from(cars.stream())\n  .containsAll(cars123); \n```", "```java\nboolean result = Streams.from(cars.stream())\n  .containsAll(car1, car2, car3);\nboolean result = Streams.from(cars.stream())\n  .containsAny(car1, car2, car3); \n```", "```java\nCar car4 = new Car(\"Mercedes\", \"electric\", 200); \nboolean result = Streams.from(cars.stream()\n    .filter(car -> car.getBrand().equals(\"Mercedes\"))\n    .distinct()\n    .dropWhile(car -> car.getFuel().equals(\"gasoline\"))\n  ).contains(car4); \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic interface Streams<T> extends Stream<T> { \n  ...\n} \n```", "```java\n@Override\npublic Streams<T> filter(Predicate<? super T> predicate);\n@Override\npublic <R> Streams<R> map(\n  Function<? super T, ? extends R> mapper);\n...\n@Override\npublic T reduce(T identity, BinaryOperator<T> accumulator);\n...\n@Override\ndefault boolean isParallel() {\n  return false;\n}\n...\n@Override\ndefault Streams<T> parallel() {\n  throw new UnsupportedOperationException(\n    \"Not supported yet.\"); // or, return this\n}\n@Override\ndefault Streams<T> unordered() {\n  throw new UnsupportedOperationException(\n    \"Not supported yet.\"); // or, return this\n}\n...\n@Override\ndefault Streams<T> sequential() {\n  return this;\n} \n```", "```java\nstatic <T> Streams<T> from(Stream<? extends T> stream) {\n  if (stream == null) {\n    return from(Stream.empty());\n  }\n  if (stream instanceof Streams) {\n    return (Streams<T>) stream;\n  }\n  return new StreamsWrapper<>(stream);\n} \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic class StreamsWrapper<T> implements Streams<T> {\n  private final Stream<? extends T> delegator;\n  public StreamsWrapper(Stream<? extends T> delegator) {\n    this.delegator = delegator.sequential();\n  }       \n  @Override\n  public Streams<T> filter(Predicate<? super T> predicate) { \n    return Streams.from(delegator.filter(predicate));\n  }\n  @Override\n  public <R> Streams<R> map(\n      Function<? super T, ? extends R> mapper) {\n    return Streams.from(delegator.map(mapper));\n  } \n  ...\n  @Override\n  public T reduce(T identity, BinaryOperator<T> accumulator) {\n    return ((Stream<T>) delegator)\n      .reduce(identity, accumulator);\n  }\n  ...\n} \n```", "```java\ndefault boolean contains(T item) {\n  return anyMatch(isEqual(item));\n}\ndefault boolean containsAll(T... items) {\n  return containsAll(Stream.of(items));\n}\ndefault boolean containsAll(List<? extends T> items) {\n  return containsAll(items.stream());\n}\ndefault boolean containsAll(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return true;\n  }\n  return filter(item -> set.remove(item))\n    .anyMatch(any -> set.isEmpty());\n} \n```", "```java\ndefault boolean containsAny(T... items) {\n  return containsAny(Stream.of(items));\n}\ndefault boolean containsAny(List<? extends T> items) {\n  return containsAny(items.stream());\n}\ndefault boolean containsAny(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return false;\n  }\n  return anyMatch(set::contains);\n} \n```", "```java\nstatic <T> Set<T> toSet(Stream<? extends T> stream) {\n  return stream.collect(Collectors.toSet());\n} \n```", "```java\nboolean result = Streams.from(cars.stream())\n  .filter(car -> car.getBrand().equals(\"Mercedes\"))\n  .contains(car1);\nboolean result = Streams.from(cars.stream())\n  .containsAll(cars123);\nboolean result = Streams.from(cars123.stream())\n  .containsAny(cars.stream()); \n```", "```java\nStreams<T> remove(T item);\nStreams<T> removeAll(T... items);\nStreams<T> removeAll(List<? extends T> items);\n**Streams<T>** **removeAll****(Stream<? extends T> items)****;**\nStreams<T> retainAll(T... items);\nStreams<T> retainAll(List<? extends T> items);\n**Streams<T>** **retainAll****(Stream<? extends T> items)****;** \n```", "```java\ndefault Streams<T> removeAll(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return this;\n  }\n  return from(stream().filter(item -> !set.contains(item)));\n} \n```", "```java\ndefault Streams<T> retainAll(Stream<? extends T> items) {\n  Set<? extends T> set = toSet(items);\n  if (set.isEmpty()) {\n    return from(Stream.empty());\n  }\n  return from(stream().filter(item -> set.contains(item)));\n} \n```", "```java\nstatic <T> Set<T> toSet(Stream<? extends T> stream) {\n  return stream.collect(Collectors.toSet());\n} \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic interface Streams<T> {\n  Stream<T> stream();\n  static <T> Streams<T> from(Stream<T> stream) {\n    return () -> stream;\n  }\n  // removeAll()/retainAll() default methods and toSet()\n} \n```", "```java\nStreams.from(cars.stream())\n  .retainAll(cars123)\n  .removeAll(car1, car3)\n  **.stream()**\n  .forEach(System.out::println); \n```", "```java\nStreams.from(Streams.from(cars.stream().distinct())\n  .retainAll(car1, car2, car3)\n  .stream()\n  .filter(car -> car.getFuel().equals(\"electric\")))\n  .removeAll(car2)\n  .stream()\n  .forEach(System.out::println); \n```", "```java\n@SuppressWarnings(\"unchecked\")\npublic interface Streams<T> extends Stream<T> {   \n\n  default Streams<T> remove(T item) {\n    return removeAll(item);\n  }\n\n  default Streams<T> removeAll(T... items) {\n    return removeAll(Stream.of(items));\n  }\n  default Streams<T> removeAll(List<? extends T> items) {\n    return removeAll(items.stream());\n  }\n  default Streams<T> removeAll(Stream<? extends T> items) {\n    Set<? extends T> set = toSet(items);\n    if (set.isEmpty()) {\n      return this;\n    }\n    return filter(item -> !set.contains(item))\n      .onClose(items::close);\n  }       \n  ... \n```", "```java\n default Streams<T> retainAll(T... items) {\n    return retainAll(Stream.of(items));\n  }\n  default Streams<T> retainAll(List<? extends T> items) {\n    return retainAll(items.stream());\n  }\n  default Streams<T> retainAll(Stream<? extends T> items) {\n    Set<? extends T> set = toSet(items);\n    if (set.isEmpty()) {\n      return from(Stream.empty());\n    }\n    return filter(item -> set.contains(item))\n      .onClose(items::close);\n  }\n  ...\n} \n```", "```java\nStreams.from(cars.stream())\n  .distinct() \n  .retainAll(car1, car2, car3)\n  .filter(car -> car.getFuel().equals(\"electric\")) \n  .removeAll(car2) \n  .forEach(System.out::println); \n```", "```java\nList<Integer> nrs = new ArrayList<>();\nList<String> strs = new ArrayList<>();\nList<Car> cars = List.of(...);\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n} \n```", "```java\nnrs.stream()\n   .sorted()\n   .forEach(System.out::println);\nstrs.stream()\n    .sorted()\n    .forEach(System.out::println); \n```", "```java\nnrs.stream()\n   .sorted((n1, n2) -> n1.compareTo(n2))\n   .forEach(System.out::println);\nstrs.stream()\n    .sorted((s1, s2) -> s1.compareTo(s2))\n    .forEach(System.out::println); \n```", "```java\nnrs.stream()\n   .sorted(Comparator.naturalOrder())\n   .forEach(System.out::println);\nstrs.stream()\n    .sorted(Comparator.naturalOrder())\n    .forEach(System.out::println); \n```", "```java\nnrs.stream()\n   .sorted(Comparator.reverseOrder())\n   .forEach(System.out::println);\nstrs.stream()\n    .sorted(Comparator.reverseOrder())\n    .forEach(System.out::println); \n```", "```java\nnrs.stream()\n   .sorted(Comparator.nullsFirst(Comparator.naturalOrder()))\n   .forEach(System.out::println);\n\nnrs.stream()\n   .sorted(Comparator.nullsLast(Comparator.naturalOrder()))\n   .forEach(System.out::println);\nnrs.stream()\n   .sorted(Comparator.nullsFirst(Comparator.reverseOrder()))\n   .forEach(System.out::println); \n```", "```java\nstrs.stream()\n    .sorted((s1, s2) -> \n       Character.compare(s1.charAt(s1.length() - 1), \n                         s2.charAt(s2.length() - 1)))\n    .forEach(System.out::println); \n```", "```java\ncars.stream()\n    .sorted()\n    .forEach(System.out::println); \n```", "```java\npublic class Car implements Comparable<Car> {\n  ...\n  @Override\n  public int compareTo(Car c) {\n    return this.getHorsepower() > c.getHorsepower()\n      ? 1 : this.getHorsepower() < c.getHorsepower() ? -1 : 0;\n  }\n} \n```", "```java\ncars.stream()\n    .sorted()\n    .forEach(System.out::println); \n```", "```java\ncars.stream() \n    .sorted(Comparator.comparingInt(Car::getHorsepower))\n    .forEach(System.out::println); \n```", "```java\ncars.stream()\n    .sorted(Comparator.comparingInt(\n            Car::getHorsepower).reversed())\n    .forEach(System.out::println); \n```", "```java\ncars.stream()\n    .sorted(Comparator.comparing(Car::getFuel, \n            Comparator.nullsLast(Comparator.naturalOrder())))\n    .forEach(System.out::println); \n```", "```java\ncars.stream()\n    .sorted(Comparator.comparing(Car::getFuel, \n            Comparator.nullsLast((s1, s2) -> \n              Character.compare(s1.charAt(s1.length() - 1), \n                                s2.charAt(s2.length() - 1)))))\n    .forEach(System.out::println); \n```", "```java\nimport static java.util.Comparator.comparing;\nimport static java.util.Comparator.nullsLast;\n...\nComparator<String> byCharAt = nullsLast(\n   (s1, s2) -> Character.compare(s1.charAt(s1.length() - 1), \n    s2.charAt(s2.length() - 1)));\nComparator<Car> byFuelAndCharAt = comparing(\n  Car::getFuel, byCharAt);\ncars.stream()\n    .sorted(byFuelAndCharAt)\n    .forEach(System.out::println); \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n}\nMap<Integer, Car> cars = Map.of(\n  1, new Car(\"Dacia\", \"diesel\", 350),\n  2, new Car(\"Lexus\", \"gasoline\", 350),\n  3, new Car(\"Chevrolet\", \"electric\", 150),\n  4, new Car(\"Mercedes\", \"gasoline\", 150),\n  5, new Car(\"Chevrolet\", \"diesel\", 250),\n  6, new Car(\"Ford\", \"electric\", 80),\n  7, new Car(\"Chevrolet\", \"diesel\", 450),\n  8, new Car(\"Mercedes\", \"electric\", 200),\n  9, new Car(\"Chevrolet\", \"gasoline\", 350),\n  10, new Car(\"Lexus\", \"diesel\", 300)\n); \n```", "```java\n[7(450), 1(350), 2(350), 9(350), 10(300), 5(250), \n8(200), 3(150), 4(150), 6(80)] \n```", "```java\nList<String> result = cars.entrySet().stream()\n  .sorted((c1, c2) -> c2.getValue().getHorsepower() \n        == c1.getValue().getHorsepower()\n     ? c1.getKey().compareTo(c2.getKey())\n     : Integer.valueOf(c2.getValue().getHorsepower())\n        .compareTo(c1.getValue().getHorsepower()))\n  .map(c -> c.getKey() + \"(\" \n                       + c.getValue().getHorsepower() + \")\")\n  .toList(); \n```", "```java\nList<String> result = cars.entrySet().stream()\n  .sorted(Entry.<Integer, Car>comparingByValue(\n            Comparator.comparingInt(\n              Car::getHorsepower).reversed())\n  .thenComparing(Entry.comparingByKey()))\n  .map(c -> c.getKey() + \"(\" \n    + c.getValue().getHorsepower() + \")\")\n  .toList(); \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n}\nMap<Integer, Car> cars = Map.of(\n  1, new Car(\"Dacia\", \"diesel\", 100),\n  ...\n  10, new Car(\"Lexus\", \"diesel\", 300)\n); \n```", "```java\nString electricBrands = cars.entrySet().stream()\n  .filter(c -> \"electric\".equals(c.getValue().getFuel()))\n  .map(c -> c.getValue().getBrand())\n  .collect(Collectors.joining(\", \")); \n```", "```java\nString electricBrands = cars.values().stream()\n  .filter(c -> \"electric\".equals(c.getFuel()))\n  .map(c -> c.getBrand())\n  .collect(Collectors.joining(\", \")); \n```", "```java\nCar newCar = new Car(\"No name\", \"gasoline\", 350);\nString carsAsNewCar1 = cars.entrySet().stream()\n .filter(c -> (c.getValue().getFuel().equals(newCar.getFuel())\n   && c.getValue().getHorsepower() == newCar.getHorsepower()))\n .map(map -> map.getValue().getBrand())\n .collect(Collectors.joining(\", \"));\n\nString carsAsNewCar2 = cars.values().stream()\n .filter(c -> (c.getFuel().equals(newCar.getFuel())\n   && c.getHorsepower() == newCar.getHorsepower()))\n .map(map -> map.getBrand())\n .collect(Collectors.joining(\", \")); \n```", "```java\nMap<Integer, Car> carsTop5a = cars.entrySet().stream()\n  .filter(c -> c.getKey() <= 5)\n  .collect(Collectors.toMap(\n     Map.Entry::getKey, Map.Entry::getValue));\n  //or, .collect(Collectors.toMap(\n  //      c -> c.getKey(), c -> c.getValue())); \n```", "```java\nMap<Integer, Car> hp100Top5a = cars.entrySet().stream()\n  .filter(c -> c.getValue().getHorsepower() > 100)\n  .sorted(Entry.comparingByValue(\n          Comparator.comparingInt(Car::getHorsepower)))\n  .collect(Collectors.toMap(\n     Map.Entry::getKey, Map.Entry::getValue, \n       (c1, c2) -> c2, LinkedHashMap::new));\n  //or, .collect(Collectors.toMap(\n  //      c -> c.getKey(), c -> c.getValue(), \n  //      (c1, c2) -> c2, LinkedHashMap::new)); \n```", "```java\npublic final class Filters {\n  private Filters() {\n    throw new AssertionError(\"Cannot be instantiated\");\n  }\n  public static <K, V> Map<K, V> byKey(\n        Map<K, V> map, Predicate<K> predicate) {\n  return map.entrySet()\n    .stream()\n    .filter(item -> predicate.test(item.getKey()))\n    .collect(Collectors.toMap(\n       Map.Entry::getKey, Map.Entry::getValue));\n  }\n\n  public static <K, V> Map<K, V> sortedByKey(\n    Map<K, V> map, Predicate<K> predicate, Comparator<K> c) {\n    return map.entrySet()\n      .stream()\n      .filter(item -> predicate.test(item.getKey()))\n      .sorted(Map.Entry.comparingByKey(c))\n      .collect(Collectors.toMap(\n         Map.Entry::getKey, Map.Entry::getValue,\n              (c1, c2) -> c2, LinkedHashMap::new));\n  }\n  ... \n```", "```java\n public static <K, V> Map<K, V> byValue(\n      Map<K, V> map, Predicate<V> predicate) {\n    return map.entrySet()\n      .stream()\n      .filter(item -> predicate.test(item.getValue()))\n      .collect(Collectors.toMap(\n         Map.Entry::getKey, Map.Entry::getValue));\n  }\n  public static <K, V> Map<K, V> sortedbyValue(Map<K, V> map, \n      Predicate<V> predicate, Comparator<V> c) {\n  return map.entrySet()\n    .stream()\n    .filter(item -> predicate.test(item.getValue()))\n    .sorted(Map.Entry.comparingByValue(c))\n    .collect(Collectors.toMap(\n       Map.Entry::getKey, Map.Entry::getValue,\n           (c1, c2) -> c2, LinkedHashMap::new));\n  }\n} \n```", "```java\nMap<Integer, Car> carsTop5s \n  = Filters.byKey(cars, c -> c <= 5); \n```", "```java\nMap<Integer, Car> hp100Top5s \n  = Filters.byValue(cars, c -> c.getHorsepower() > 100); \nMap<Integer, Car> hp100Top5d \n  = Filters.sortedbyValue(cars, c -> c.getHorsepower() > 100,\n      Comparator.comparingInt(Car::getHorsepower)); \n```", "```java\nstatic <T,R> Collector<T,R,R> of(\n  Supplier<R> supplier, \n  BiConsumer<R,T> accumulator, \n  BinaryOperator<R> combiner, \n  Collector.Characteristics... characteristics)\nstatic <T,A,R> Collector<T,A,R> of(\n  Supplier<A> supplier, \n  BiConsumer<A,T> accumulator, \n  BinaryOperator<A> combiner, \n  Function<A,R> finisher, \n  Collector.Characteristics... characteristics) \n```", "```java\npublic interface Vehicle {}\npublic class Car implements Vehicle {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n}\npublic class Submersible implements Vehicle {\n\n  private final String type;\n  private final double maxdepth;\n  ...\n} \n```", "```java\nMap<Integer, Car> cars = Map.of(\n  1, new Car(\"Dacia\", \"diesel\", 100),\n  ...\n  10, new Car(\"Lexus\", \"diesel\", 300)\n); \n```", "```java\npublic static <T> \n    Collector<T, TreeSet<T>, TreeSet<T>> toTreeSet() {\n  return Collector.of(TreeSet::new, TreeSet::add,\n    (left, right) -> {\n       left.addAll(right);\n       return left;\n    }, Collector.Characteristics.IDENTITY_FINISH);\n} \n```", "```java\nTreeSet<String> electricBrands = cars.values().stream()\n  .filter(c -> \"electric\".equals(c.getFuel()))\n  .map(c -> c.getBrand())\n  .collect(MyCollectors.toTreeSet()); \n```", "```java\npublic static <T> Collector<T, LinkedHashSet<T>, \n    LinkedHashSet<T>> toLinkedHashSet() {\n  return Collector.of(LinkedHashSet::new, HashSet::add,\n    (left, right) -> {\n       left.addAll(right);\n       return left;\n    }, Collector.Characteristics.IDENTITY_FINISH);\n} \n```", "```java\nLinkedHashSet<Integer> hpSorted = cars.values().stream()\n  .map(c -> c.getHorsepower())\n  .sorted()\n  .collect(MyCollectors.toLinkedHashSet()); \n```", "```java\npublic static <T, A, R> Collector<T, A, R> exclude(\n    Predicate<T> predicate, Collector<T, A, R> collector) {\n  return Collector.of(\n    collector.supplier(),\n    (l, r) -> {\n       if (predicate.negate().test(r)) {\n         collector.accumulator().accept(l, r);\n       }\n    },\n    collector.combiner(),\n    collector.finisher(),\n    collector.characteristics()\n     .toArray(Collector.Characteristics[]::new)\n  );\n} \n```", "```java\nLinkedHashSet<Integer> excludeHp200 = cars.values().stream()\n  .map(c -> c.getHorsepower())\n  .sorted()\n  .collect(MyCollectors.exclude(c -> c > 200, \n           MyCollectors.toLinkedHashSet())); \n```", "```java\nVehicle mazda = new Car(\"Mazda\", \"diesel\", 155);\nVehicle ferrari = new Car(\"Ferrari\", \"gasoline\", 500);\n\nVehicle hov = new Submersible(\"HOV\", 3000);\nVehicle rov = new Submersible(\"ROV\", 7000);\n\nList<Vehicle> vehicles = List.of(mazda, hov, ferrari, rov); \n```", "```java\npublic static \n  <T, A extends T, R extends Collection<A>> Collector<T, ?, R> \n    toType(Class<A> type, Supplier<R> supplier) {\n  return Collector.of(supplier,\n      (R r, T t) -> {\n         if (type.isInstance(t)) {\n           r.add(type.cast(t));\n         }\n      },\n      (R left, R right) -> {\n         left.addAll(right);\n         return left;\n      },\n      Collector.Characteristics.IDENTITY_FINISH\n  );\n} \n```", "```java\nList<Car> onlyCars = vehicles.stream()\n  .collect(MyCollectors.toType(\n    Car.class, ArrayList::new)); \n```", "```java\nSet<Submersible> onlySubmersible = vehicles.stream()\n  .collect(MyCollectors.toType(\n    Submersible.class, HashSet::new)); \n```", "```java\npublic static \n    Collector<Integer, SplayTree, SplayTree> toSplayTree() {\n  return Collector.of(SplayTree::new, SplayTree::insert,\n    (left, right) -> {\n       left.insertAll(right);\n       return left;\n    }, \n    Collector.Characteristics.IDENTITY_FINISH);\n} \n```", "```java\nSplayTree st = cars.values().stream()\n  .map(c -> c.getHorsepower())\n  .collect(MyCollectors.toSplayTree()); \n```", "```java\nstatic void readFiles(List<Path> paths) {\n  paths.forEach(p -> {\n    try {\n      readFile(p);\n    } catch (IOException e) {\n      **...** **// what can we throw here?**\n    }\n  });\n} \n```", "```java\nstatic void readFiles(List<Path> paths) {\n  paths.forEach(p -> {\n    try {\n      readFile(p);\n    } catch (IOException e) {\n      **throw****new****RuntimeException****(e);**\n    }\n  });\n} \n```", "```java\nstatic void readFiles(List<Path> paths) {\n  paths.forEach(p -> {\n    try {\n      readFile(p);\n    } catch (IOException e) {\n      **throw****new****IOException****(e);**\n    }\n  });\n} \n```", "```java\npublic final class Exceptions {\n  private Exceptions() {\n    throw new AssertionError(\"Cannot be instantiated\");\n  }\n  public static void throwChecked(Throwable t) {\n    Exceptions.<RuntimeException>throwIt(t);\n  }\n  @SuppressWarnings({\"unchecked\"})\n  private static <X extends Throwable> void throwIt(\n      Throwable t) throws X {\n    throw (X) t;\n  }\n} \n```", "```java\nstatic void readFiles(List<Path> paths) throws IOException {\n  paths.forEach(p -> {\n    try {\n      readFile(p);\n    } catch (IOException e) { \n      Exceptions.throwChecked(new IOException(\n        \"Some files are corrupted\", e));\n    }\n  });\n} \n```", "```java\nList<Path> paths = List.of(...);\ntry {\n  readFiles(paths);\n} catch (IOException e) {\n  System.out.println(e + \" \\n \" + e.getCause());\n} \n```", "```java\njava.io.IOException: Some files are corrupted \njava.io.FileNotFoundException: ...\n(The system cannot find the path specified) \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n}\nList<Car> cars = List.of(\n  new Car(\"Chevrolet\", \"diesel\", 350),\n  ...\n  new Car(\"Lexus\", \"diesel\", 300)\n); \n```", "```java\ncars.stream()\n    .distinct()\n    .forEach(System.out::println); \n```", "```java\ncars.stream()\n    .collect(Collectors.toMap(Car::getBrand, \n             Function.identity(), (c1, c2) -> c1))\n    .values()\n    .forEach(System.out::println); \n```", "```java\npublic static <K, T> Collector<T, ?, Map<K, T>> \n  distinctByKey(Function<? super T, ? extends K> function) {\n  return Collectors.toMap(\n    function, Function.identity(), (t1, t2) -> t1);\n} \n```", "```java\ncars.stream()\n  .collect(Streams.distinctByKey(Car::getBrand))\n  .values()\n  .forEach(System.out::println); \n```", "```java\npublic static <T> Predicate<T> distinctByKey(\n    Function<? super T, ?> function) {\n  Map<Object, Boolean> seen = new ConcurrentHashMap<>();\n  return t -> seen.putIfAbsent(function.apply(t), \n    Boolean.TRUE) == null;\n} \n```", "```java\npublic static <T> Predicate<T> distinctByKey(\n    Function<? super T, ?> function) {\n  Set<Object> seen = ConcurrentHashMap.newKeySet();\n  return t -> seen.add(function.apply(t));\n} \n```", "```java\ncars.stream()\n    .filter(Streams.distinctByKey(Car::getBrand))\n    .forEach(System.out::println);\ncars.stream()\n    .filter(Streams.distinctByKey(Car::getFuel))\n    .forEach(System.out::println); \n```", "```java\npublic class Car {\n  private final String brand;\n  private final String fuel;\n  private final int horsepower;\n  ...\n}\nList<Car> cars = List.of(\n  new Car(\"Chevrolet\", \"diesel\", 350),\n  ... // 10 more\n  new Car(\"Lexus\", \"diesel\", 300)\n); \n```", "```java\nList<Car> first5CarsLimit = cars.stream()\n  .limit(5)\n  .collect(Collectors.toList()); \n```", "```java\nList<Car> last5CarsSkip = cars.stream()\n  .skip(5)\n  .collect(Collectors.toList()); \n```", "```java\npublic static <T> Collector<T, List<T>, List<T>>    \n    toUnmodifiableListKeep(int max) {\n  return Collector.of(ArrayList::new,\n    (list, value) -> {\n       if (list.size() < max) {\n         list.add(value);\n       }\n    },\n    (left, right) -> {\n       left.addAll(right);\n       return left;\n    },\n    Collections::unmodifiableList);\n} \n```", "```java\nList<Car> first5Cars = cars.stream()\n  .collect(MyCollectors.toUnmodifiableListKeep(5)); \n```", "```java\npublic static <T> Collector<T, List<T>, List<T>> \n    toUnmodifiableListSkip(int index) {\n  return Collector.of(ArrayList::new,\n    (list, value) -> {\n       if (list.size() >= index) {\n         list.add(value);\n       } else {\n         list.add(null);\n       }\n    },\n    (left, right) -> {\n       left.addAll(right);\n\n       return left;\n    },\n    list -> Collections.unmodifiableList(\n      list.subList(index, list.size())));\n} \n```", "```java\npublic static <T> Collector<T, ?, List<T>> \n    toUnmodifiableListSkip(int index) {\n  class Sublist {\n    int index;\n    List<T> list = new ArrayList<>(); \n  }\n  return Collector.of(Sublist::new,\n    (sublist, value) -> {\n       if (sublist.index >= index) {\n         sublist.list.add(value);\n       } else {\n         sublist.index++;\n       }\n     },\n     (left, right) -> {\n        left.list.addAll(right.list);\n        left.index = left.index + right.index;\n\n       return left;\n     },\n     sublist -> Collections.unmodifiableList(sublist.list));\n} \n```", "```java\nList<Car> last5Cars = cars.stream()\n  .collect(MyCollectors.toUnmodifiableListSkip(5)); \n```", "```java\n@FunctionalInterface\npublic interface FiveFunction <T1, T2, T3, T4, T5, R> {\n\n  R apply(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);\n} \n```", "```java\npublic class PL4 {\n\n  private final double a;\n  private final double b;\n  private final double c;\n  private final double d;\n  private final double x;\n  public PL4(double a, double b, \n             double c, double d, double x) { \n    this.a = a;\n    this.b = b;\n    this.c = c;\n    this.d = d;\n    this.x = x;\n  }\n  // getters\n  public double compute() {\n    return d + ((a - d) / (1 + (Math.pow(x / c, b))));\n  }\n\n  // equals(), hashCode(), toString()\n} \n```", "```java\npublic final class Logistics {\n  ...\n  public static <T1, T2, T3, T4, X, R> R create(\n      T1 t1, T2 t2, T3 t3, T4 t4, X x,\n      FiveFunction<T1, T2, T3, T4, X, R> f) {\n\n    return f.apply(t1, t2, t3, t4, x);\n  }\n  ...\n} \n```", "```java\nPL4 pl4_1 = Logistics.create(\n    4.19, -1.10, 12.65, 0.03, 40.3, PL4::new);\nPL4 pl4_2 = Logistics.create(\n    4.19, -1.10, 12.65, 0.03, 100.0, PL4::new);\n...\nPL4 pl4_8 = Logistics.create(\n    4.19, -1.10, 12.65, 0.03, 1400.6, PL4::new);\nSystem.out.println(pl4_1.compute());\nSystem.out.println(pl4_2.compute());\n...\nSystem.out.println(pl4_8.compute()); \n```", "```java\npublic final class Logistics {\n  ...\n  public static <T1, T2, T3, T4, X, R> List<R> compute(\n      T1 t1, T2 t2, T3 t3, T4 t4, List<X> allX,\n      FiveFunction<T1, T2, T3, T4, X, R> f) {\n    List<R> allY = new ArrayList<>();\n    for (X x : allX) {\n      allY.add(f.apply(t1, t2, t3, t4, x));\n    }\n    return allY;\n  }\n  ...\n} \n```", "```java\nFiveFunction<Double, Double, Double, Double, Double, Double> \n    pl4 = (a, b, c, d, x) -> d + ((a - d) / \n                            (1 + (Math.pow(x / c, b)))); \nList<Double> allX = List.of(40.3, 100.0, 250.2, 400.1, \n                            600.6, 800.4, 1150.4, 1400.6); \nList<Double> allY = Logistics.compute(4.19, -1.10, 12.65,\n                                      0.03, allX, pl4); \n```", "```java\n@FunctionalInterface\npublic interface FiveConsumer <T1, T2, T3, T4, T5> {\n\n  void accept (T1 t1, T2 t2, T3 t3, T4 t4, T5 t5);\n} \n```", "```java\nFiveConsumer<Double, Double, Double, Double, Double> \n  pl4c = (a, b, c, d, x) -> Logistics.pl4(a, b, c, d, x);\n\npl4c.accept(4.19, -1.10, 12.65, 0.03, 40.3); \n```", "```java\npublic static void pl4(Double a, Double b, \n                       Double c, Double d, Double x) {\n\n  System.out.println(d + ((a - d) / (1 \n                       + (Math.pow(x / c, b)))));\n} \n```", "```java\n@FunctionalInterface\npublic interface TriFunction <T1, T2, T3, R> {\n\n  R apply(T1 t1, T2 t2, T3 t3);\n\n  default BiFunction<T2, T3, R> applyOnly(T1 t1) {\n    return (t2, t3) -> apply(t1, t2, t3);\n  }\n\n  default Function<T3, R> applyOnly(T1 t1, T2 t2) {\n    return (t3) -> apply(t1, t2, t3);\n  }\n} \n```", "```java\nTriFunction<Double, Double, Double, Double> abc2 = (a, b, c)\n  -> Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) \n     + 2.0*a*b + 2*b*c + 2*c*a;        \nSystem.out.println(\"abc2 (1): \" + abc2.apply(1.0, 2.0, 1.0));\nSystem.out.println(\"abc2 (2): \" + abc2.apply(1.0, 2.0, 2.0));\nSystem.out.println(\"abc2 (3): \" + abc2.apply(1.0, 2.0, 3.0)); \n```", "```java\nFunction<Double, Double> abc2Only1 = abc2.applyOnly(1.0, 2.0);\n\nSystem.out.println(\"abc2Only1 (1): \" + abc2Only1.apply(1.0));\nSystem.out.println(\"abc2Only1 (2): \" + abc2Only1.apply(2.0));\nSystem.out.println(\"abc2Only1 (3): \" + abc2Only1.apply(3.0)); \n```", "```java\nBiFunction<Double, Double, Double> abc2Only2 \n  = abc2.applyOnly(1.0);\n\nSystem.out.println(\"abc2Only2 (1): \" \n  + abc2Only2.apply(2.0, 3.0));\nSystem.out.println(\"abc2Only2 (2): \" \n  + abc2Only2.apply(1.0, 2.0));\nSystem.out.println(\"abc2Only2 (3): \" \n  + abc2Only2.apply(3.0, 2.0)); \n```"]