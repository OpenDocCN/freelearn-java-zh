["```java\npackage packt.jee.eclipse.profile.dto; \n\npublic class CourseDTO { \n  private int id; \n  private String name; \n  private int credits; \n\n  //skipped Getters and Setters \n} \n```", "```java\n//skipped imports \npublic class CourseDAO { \n\n  public List<CourseDTO> getCourses() { \n    //No real database access takes place here \n    //We will just simulate a long-running database operation \n\n    try { \n      Thread.sleep(2000); //wait 2 seconds \n    } catch (InterruptedException e) { \n      e.printStackTrace(); \n    } \n\n    //return dummy/empty list \n    return new ArrayList<>(); \n  } \n} \n```", "```java\n//skipped imports \npublic class CourseService { \n\n  private CourseDAO courseDAO = new CourseDAO(); \n\n  public List<CourseDTO> getCourses() { \n    return courseDAO.getCourses(); \n  } \n} \n```", "```java\n//skipped imports \npublic class CourseBean { \n  private CourseService courseService = new CourseService(); \n\n  public List<CourseDTO> getCourses() { \n    return courseService.getCourses(); \n  } \n} \n```", "```java\n//skipped imports \npublic class CourseManagement { \n\n  public static void main(String[] args) throws IOException { \n\n    CourseBean courseBean = new CourseBean(); \n\n    System.out.println(\"Type any character to get courses. Type q \n     to quit.\"); \n\n    int ch; \n    while ((ch = System.in.read()) != -1) { \n      if (ch != 10 && ch != 13) { //ignore new lines \n        if (ch == 'q') //quit if user types q \n          break; \n\n        System.out.println(\"Getting courses\"); \n        List<CourseDTO> courses = courseBean.getCourses(); \n        System.out.println(\"Got courses\"); \n\n        System.out.println(\"Type any character to get courses. \n         Type q to quit.\"); \n      } \n    } \n\n    System.out.println(\"Quitting ...\"); \n  } \n} \n```", "```java\npublic class CourseManagement { \n\n  public static void main(String[] args) throws IOException { \n\n    final CourseBean courseBean = new CourseBean(); \n\n    System.out.println(\"Type any character to get courses. Type q \n     to quit.\"); \n\n    int ch, threadIndex = 0; \n    while ((ch = System.in.read()) != -1) { \n      if (ch != 10 && ch != 13) { //ignore new lines \n        if (ch == 'q') //quit if user types q \n          break; \n\n        threadIndex++; //used for naming the thread \n        Thread getCourseThread = new Thread(\"getCourseThread\" + \n         threadIndex) \n{ \n\n          @Override \n          public void run() { \n            System.out.println(\"Getting courses\"); \n            courseBean.getCourses(); \n            System.out.println(\"Got courses\"); \n          } \n        }; \n\n        //Set this thread as Daemon so that the application can exit \n        //immediately when user enters 'q' \n        getCourseThread.setDaemon(true); \n\n        getCourseThread.start();  \n\n        System.out.println(\"Type any character to get courses. \n         Type q to quit.\"); \n      } \n    } \n\n    System.out.println(\"Quitting ...\"); \n  } \n} \n```", "```java\npublic class CourseService { \n\n  private CourseDAO courseDAO = new CourseDAO(); \n\n  public synchronized List<CourseDTO> getCourses() { \n    return courseDAO.getCourses(); \n  } \n } \n```", "```java\npublic class CourseDAO { \n\n  public List<CourseDTO> getCourses() { \n    //No real database access takes place here. \n    //We will just simulate a long-running database operation \n\n    try { \n      Thread.sleep(30000); //wait 30 seconds \n    } catch (InterruptedException e) { \n      e.printStackTrace(); \n    } \n\n    //return dummy/empty list \n    return new ArrayList<>(); \n  } \n} \n```", "```java\n\"getCourseThread2\" daemon prio=6 tid=0x000000001085b800 nid=0x34f8 waiting for monitor entry [0x0000000013aef000] \n   java.lang.Thread.State: BLOCKED (on object monitor) \n  at \n packt.jee.eclipse.profile.service.CourseService.getCourses(CourseService.java:13)  - waiting to lock <0x00000007aaf57a80> (a \n packt.jee.eclipse.profile.service.CourseService) \n  at packt.jee.eclipse.profile.bean.CourseBean.getCourses(CourseBean.java:12) \n  at packt.jee.eclipse.profile.CourseManagement$1.run(CourseManagement.java:27) \n\n   Locked ownable synchronizers: \n  - None \n\n\"getCourseThread1\" daemon prio=6 tid=0x000000001085a800 nid=0x2738 waiting on condition [0x000000001398f000] \n   java.lang.Thread.State: TIMED_WAITING (sleeping) \n  at java.lang.Thread.sleep(Native Method) \n  at packt.jee.eclipse.profile.dao.CourseDAO.getCourses(CourseDAO.java:15) \n  at packt.jee.eclipse.profile.service.CourseService.getCourses(CourseService.java:13) \n  - locked <0x00000007aaf57a80> (a packt.jee.eclipse.profile.service.CourseService) \n  at packt.jee.eclipse.profile.bean.CourseBean.getCourses(CourseBean.java:12) \n  at packt.jee.eclipse.profile.CourseManagement$1.run(CourseManagement.java:27) \n\n   Locked ownable synchronizers: \n  - None \n```", "```java\n  public static void main(String[] args) throws IOException { \n\n    System.out.println(\"Type any character and Enter to cause \n     deadlock - \"); \n    System.in.read(); \n\n    final Object obj1 = new Object(), obj2 = new Object(); \n\n    Thread th1 = new Thread(\"MyThread1\") { \n      public void run() { \n        synchronized (obj1) { \n          try { \n            sleep(2000); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n\n          synchronized (obj2) { \n            //do nothing \n          } \n        } \n      } \n    }; \n\n    Thread th2 = new Thread(\"MyThread2\") { \n      public void run() { \n        synchronized (obj2) { \n          try { \n            sleep(2000); \n          } catch (InterruptedException e) { \n            e.printStackTrace(); \n          } \n\n          synchronized (obj1) { \n\n          } \n        } \n      } \n    }; \n\n    th1.start(); \n    th2.start(); \n```", "```java\nFound one Java-level deadlock: \n============================= \n\"MyThread2\": \n  waiting to lock monitor 0x000000000f6f71a8 (object \n 0x00000007aaf56538, a java.lang.Object), \n  which is held by \"MyThread1\" \n\"MyThread1\": \n  waiting to lock monitor 0x000000000f6f4a78 (object \n 0x00000007aaf56548, a java.lang.Object), \n  which is held by \"MyThread2\" \n```", "```java\npublic class CourseService { \n\n  private CourseDAO courseDAO = new CourseDAO(); \n\n  //Dummy cached data used only to simulate large \n  //memory allocation \n  private byte[] cachedData = null; \n\n  public synchronized List<CourseDTO> getCourses() { \n\n    //To simulate large memory allocation, \n    //let's assume we are reading serialized cached data \n    //and storing it in the cachedData member \n    try { \n      this.cachedData = generateDummyCachedData(); \n    } catch (IOException e) { \n      //ignore \n    } \n\n    return courseDAO.getCourses(); \n  } \n\n  private byte[] generateDummyCachedData() throws IOException { \n    ByteArrayOutputStream byteStream = new ByteArrayOutputStream(); \n    byte[] dummyData = \"Dummy cached data\".getBytes(); \n\n    //write 100000 times \n    for (int i = 0; i < 100000; i++) \n      byteStream.write(dummyData); \n\n    byte[] result = byteStream.toByteArray(); \n    byteStream.close(); \n    return result; \n  } \n } \n```"]