["```java\n@Stateless\npublic class ExampleOfSessionBean  {\n\n    @PersistenceContext EntityManager em;\n\n    public void persistEntity(Object entity){\n        em.persist(entity);\n    }\n}\n```", "```java\n@Stateful\npublic class StatefulBeanNewFeatures  {\n\n    @PersistenceContext(type= PersistenceContextType.EXTENDED)\n    EntityManager em;\n\n    @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED)\n    @PostConstruct\n    public void init(){\n         entity = em.find(...);\n    }\n\n    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)\n    @PreDestroy\n    public void destroy(){\n        em.flush();\n    }\n}\n```", "```java\n@Stateful(passivationCapable = false)\npublic class StatefulBeanNewFeatures  {\n   //...\n}\n```", "```java\n//In this example, yellow and green are local interfaces\npublic interface yellow { ... }\npublic interface green { ... }\n\n@Stateless\npublic class Color implements yellow, green { ... }\n\n//In this example, yellow and green are local interfaces\npublic interface yellow { ... }\npublic interface green { ... }\n\n@Local\n@Stateless\npublic class Color implements yellow, green { ... }\n\n//In this example, yellow and green are remote interfaces\npublic interface yellow { ... }\npublic interface green { ... }\n\n@Remote\n@Stateless\npublic class Color implements yellow, green { ... }\n\n//In this example, only the yellow interface is exposed as a remote interface\n@Remote\npublic interface yellow { ... }\npublic interface green { ... }\n\n@Stateless\npublic class Color implements yellow, green { ... }\n\n//In this example, only the yellow interface is exposed as a remote interface\npublic interface yellow { ... }\npublic interface green { ... }\n\n@Remote(yellow.class)\n@Stateless\npublic class Color implements yellow, green { ... }\n```", "```java\n@Stateless\npublic class EjbLiteSessionBean {\n\n    @Asynchronous\n    public void asynchronousMethod(){\n        try{\n          System.out.println(\"EjbLiteSessionBean - start : \"+new Date());\n          Thread.sleep(1000*10);\n          System.out.println(\"EjbLiteSessionBean - end : \"+new Date());        \n        }catch(Exception ex){\n            ex.printStackTrace();\n        }\n    }    \n\n    @Schedule(persistent = false, minute = \"*\", hour = \"1\")\n    public void nonPersistentEJBTimerService(){\n        System.out.println(\"nonPersistentEJBTimerService method executed\");\n    }\n}\n```", "```java\n@Stateless\npublic class ChangesInTimerAPI implements ChangesInTimerAPILocal {\n\n    @Resource\n    TimerService timerService;\n    public void createTimer(){\n        //create a programmatic timer\n        long initialDuration = 1000*5;\n        long intervalDuration = 1000*60;\n        String timerInfo = \"PROGRAMMATIC TIMER\";\n        timerService.createTimer(initialDuration, intervalDuration, timerInfo);\n    }\n\n    @Timeout\n    public void timerMethodForProgrammaticTimer(){\n        System.out.println(\"ChangesInTimerAPI - programmatic timer : \"+new Date());\n    }\n\n    @Schedule(info = \"AUTOMATIC TIMER\", hour = \"*\", minute = \"*\")\n    public void automaticTimer(){\n        System.out.println(\"ChangesInTimerAPI - automatic timer : \"+new Date());\n    }\n\n    public void getListOfAllTimers(){\n        Collection<Timer> alltimers = timerService.getAllTimers();\n\n        for(Timer timer : alltimers){            \n            System.out.println(\"The next time out : \"+timer.getNextTimeout()+\", \"\n                    + \" timer info : \"+timer.getInfo());\n            timer.cancel();            \n        }\n    }\n}\n```", "```java\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationType\", \n                               propertyValue = \"javax.jms.Queue\"),\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", \n                              propertyValue = \"jms/messageQueue\")\n})\npublic class MessageBeanExample implements MessageListener {\n\n    public MessageBeanExample() {\n    }\n\n    @Override\n    public void onMessage(Message message) {\n        try{\n          System.out.println(\"You have received a new message of type : \"+message.getJMSType());\n        }catch(Exception ex){\n            ex.printStackTrace();\n        }\n    }\n}\n```", "```java\n@Test\npublic void testAddition(){            \n    Map<String, Object> properties = new HashMap<String, Object>();  \n    properties.put(EJBContainer.APP_NAME, \"chapter05EmbeddableEJBContainer\");\n    properties.put(EJBContainer.MODULES, new File(\"target\\\\classes\"));   \n    EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer(properties);\n    try {\n        NewSessionBean bean = (NewSessionBean) container.getContext().lookup(\"java:global/chapter05EmbeddableEJBContainer/NewSessionBean\");\n        int restult = bean.addition(10, 10);\n        Assert.assertEquals(20, restult);\n    } catch (NamingException ex) {\n        Logger.getLogger(AppTest.class.getName()).log(Level.FINEST, null, ex);\n    } finally {\n       container.close();\n    }\n}\n```", "```java\n    <properties>\n       <glassfish.installed.embedded.container>glassfish_dir\\lib\\embedded\\glassfish-embedded-static-shell.jar</glassfish.installed.embedded.container>\n    </properties>\n    ```", "```java\n    <dependency>\n        <groupId>glassfish-embedded-static-shell</groupId>\n        <artifactId>glassfish-embedded-static-shell</artifactId>\n        <version>3.2</version>\n        <scope>system</scope>           \n        <systemPath>${glassfish.installed.embedded.container}</systemPath>\n    </dependency>\n    ```", "```java\n@Test\npublic void testAddition(){\n    //...           \n    try(EJBContainer container = javax.ejb.embeddable.EJBContainer.createEJBContainer(properties);) {\n         //...\n    } catch (NamingException ex) {\n       Logger.getLogger(AppTest.class.getName()).log(Level.FINEST, null, ex);\n    }\n}\n```"]