["```java\nlein new stock-market-monitor\ncd stock-market-monitor\n\n```", "```java\n[seesaw \"1.4.4\"]\n```", "```java\n(ns stock-market-monitor.core\n  (:require [seesaw.core :refer :all])\n  (:import (java.util.concurrent ScheduledThreadPoolExecutor\n                                 TimeUnit)))\n\n(native!)\n\n(def main-frame (frame :title \"Stock price monitor\"\n                       :width 200 :height 100\n                       :on-close :exit))\n\n(def price-label       (label \"Price: -\"))\n\n(config! main-frame :content price-label)\n```", "```java\n(def pool (atom nil))\n\n(defn init-scheduler [num-threads]\n  (reset! pool  (ScheduledThreadPoolExecutor. num-threads)))\n(defn run-every [pool millis f]\n  (.scheduleWithFixedDelay pool\n                           f\n                           0 millis TimeUnit/MILLISECONDS))\n\n(defn shutdown [pool]\n  (println \"Shutting down scheduler...\")\n  (.shutdown pool))\n```", "```java\n(defn share-price [company-code]\n  (Thread/sleep 200)\n  (rand-int 1000))\n\n(defn -main [& args]\n  (show! main-frame)\n  (.addShutdownHook (Runtime/getRuntime)\n                    (Thread. #(shutdown @pool)))\n  (init-scheduler 1)\n  (run-every @pool 500\n             #(->> (str \"Price: \" (share-price \"XYZ\"))\n                   (text! price-label)\n                   invoke-now)))\n```", "```java\nlein trampoline run -m stock-market-monitor.core\n\n```", "```java\n(ns stock-market-monitor.core\n  (:require [seesaw.core :refer :all])\n  (:import (java.util.concurrent ScheduledThreadPoolExecutor\n                                 TimeUnit)\n           (clojure.lang PersistentQueue)))\n```", "```java\n(def running-avg-label (label \"Running average: -\"))\n(config! main-frame :content\n         (border-panel\n          :north  price-label\n          :center running-avg-label\n          :border 5))\n```", "```java\n[1 2 3 4 5 6 7 8 9 10] => 2.0\n[1 2 3 4 5 6 7 8 9 10] => 3.0\n[1 2 3 4 5 6 7 8 9 10] => 4.0\n```", "```java\n(defn roll-buffer [buffer num buffer-size]\n  (let [buffer (conj buffer num)]\n    (if (> (count buffer) buffer-size)\n      (pop buffer)\n      buffer)))\n\n(defn avg [numbers]\n  (float (/ (reduce + numbers)\n            (count numbers))))\n\n(defn make-running-avg [buffer-size]\n  (let [buffer (atom clojure.lang.PersistentQueue/EMPTY)]\n    (fn [n]\n      (swap! buffer roll-buffer n buffer-size)\n      (avg @buffer))))\n\n(def running-avg (running-avg 5))\n```", "```java\n(defn worker []\n  (let [price (share-price \"XYZ\")]\n    (->> (str \"Price: \" price) (text! price-label))\n    (->> (str \"Running average: \" (running-avg price))\n         (text! running-avg-label))))\n\n(defn -main [& args]\n  (show! main-frame)\n  (.addShutdownHook (Runtime/getRuntime)\n                    (Thread. #(shutdown @pool)))\n  (init-scheduler 1)\n  (run-every @pool 500\n             #(invoke-now (worker))))\n```", "```java\nlein trampoline run -m stock-market-monitor.core\n\n```", "```java\n[io.reactivex/rxclojure \"1.0.0\"]\n```", "```java\n(ns stock-market-monitor.core\n  (:require [rx.lang.clojure.core :as rx]\n            [seesaw.core :refer :all])\n  (:import (java.util.concurrent TimeUnit)\n           (rx Observable)))\n```", "```java\n(defn make-price-obs [company-code]\n  (rx/return (share-price company-code)))\n```", "```java\n(rx/flatmap (fn [_] (make-price-obs \"XYZ\"))\n                    (Observable/interval 500 \n                                         TimeUnit/MILLISECONDS))\n```", "```java\n(defn -main [& args]\n  (show! main-frame)\n  (let [price-obs (rx/flatmap (fn [_] (make-price-obs \"XYZ\"))\n                              (Observable/interval 500 TimeUnit/MILLISECONDS))]\n    (rx/subscribe price-obs\n                  (fn [price]\n                    (text! price-label (str \"Price: \" price))))))\n```", "```java\n(def values (range 10))\n```", "```java\n(doseq [buffer (partition 5 1 values)]\n  (prn buffer))\n\n(0 1 2 3 4)\n(1 2 3 4 5)\n(2 3 4 5 6)\n(3 4 5 6 7)\n(4 5 6 7 8)\n...\n\n```", "```java\n(-> (rx/seq->o (vec (range 10)))\n    (.buffer 5 1)\n    (rx/subscribe\n     (fn [price]\n       (prn (str \"Value: \" price)))))\n```", "```java\n\"Value: [0, 1, 2, 3, 4]\"\n\"Value: [1, 2, 3, 4, 5]\"\n\"Value: [2, 3, 4, 5, 6]\"\n\"Value: [3, 4, 5, 6, 7]\"\n\"Value: [4, 5, 6, 7, 8]\"\n...\n\n```", "```java\n(defn -main [& args]\n  (show! main-frame)\n  (let [price-obs (-> (rx/flatmap make-price-obs\n                                  (Observable/interval 500 TimeUnit/MILLISECONDS))\n                      (.publish))\n        sliding-buffer-obs (.buffer price-obs 5 1)]\n    (rx/subscribe price-obs\n                  (fn [price]\n                    (text! price-label (str \"Price: \" price))))\n    (rx/subscribe sliding-buffer-obs\n                  (fn [buffer]\n                    (text! running-avg-label (str \"Running average: \" (avg buffer)))))\n    (.connect price-obs)))\n```", "```java\nprice-obs, we had created before. The new sliding buffer observable is created using the buffer transformer on price-obs.\n```", "```java\n(ns stock-market-monitor.05frp-price-monitor-rolling-avg\n  (:require [rx.lang.clojure.core :as rx]\n            [seesaw.core :refer :all])\n  (:import (java.util.concurrent TimeUnit)\n           (rx Observable)))\n\n(native!)\n\n(def main-frame (frame :title \"Stock price monitor\"\n                       :width 200 :height 100\n                       :on-close :exit))\n\n(def price-label       (label \"Price: -\"))\n(def running-avg-label (label \"Running average: -\"))\n\n(config! main-frame :content\n         (border-panel\n          :north  price-label\n          :center running-avg-label\n          :border 5))\n\n(defn share-price [company-code]\n  (Thread/sleep 200)\n  (rand-int 1000))\n\n(defn avg [numbers]\n  (float (/ (reduce + numbers)\n            (count numbers))))\n\n(defn make-price-obs [_]\n  (rx/return (share-price \"XYZ\")))\n\n(defn -main [& args]\n  (show! main-frame)\n  (let [price-obs (-> (rx/flatmap make-price-obs\n                                  (Observable/interval 500 TimeUnit/MILLISECONDS))\n                      (.publish))\n        sliding-buffer-obs (.buffer price-obs 5 1)]\n    (rx/subscribe price-obs\n                  (fn [price]\n                    (text! price-label (str \"Price: \" price))))\n    (rx/subscribe sliding-buffer-obs\n                  (fn [buffer]\n                    (text! running-avg-label (str \"Running average: \" (avg buffer)))))\n    (.connect price-obs)))\n```"]