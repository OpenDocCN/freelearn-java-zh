["```java\ncase class Country(name: String, code: String)\ncase class City(name: String, country: Country)\ncase class Address(number: Int, street: String, city: City)\ncase class Company(name: String, address: Address)\ncase class User(name: String, company: Company, address: Address)\n```", "```java\nobject UserVerboseExample {\n  def main(args: Array[String]): Unit = {\n    val uk = Country(\"United Kingdom\", \"uk\")\n    val london = City(\"London\", uk)\n    val buckinghamPalace = Address(1, \"Buckingham Palace Road\", london)\n    val castleBuilders = Company(\"Castle Builders\", buckinghamPalace)\n    val switzerland = Country(\"Switzerland\", \"CH\")\n    val geneva = City(\"geneva\", switzerland)\n    val genevaAddress = Address(1, \"Geneva Lake\", geneva)\n    val ivan = User(\"Ivan\", castleBuilders, genevaAddress)\n    System.out.println(ivan)\n    System.out.println(\"Capitalize UK code...\")\n    val ivanFixed = ivan.copy(\n company = ivan.company.copy(\n address = ivan.company.address.copy(\n city = ivan.company.address.city.copy(\n country = ivan.company.address.city.country.copy(\n code = ivan.company.address.city.country.code.toUpperCase\n )\n )\n )\n )\n )\n    System.out.println(ivanFixed)\n  }\n}\n```", "```java\ncase class Country(var name: String, var code: String)\ncase class City(var name: String, var country: Country)\ncase class Address(var number: Int, var street: String, var city: City)\ncase class Company(var name: String, var address: Address)\ncase class User(var name: String, var company: Company, var address: Address)\n```", "```java\nobject UserBadExample {\n  def main(args: Array[String]): Unit = {\n    val uk = Country(\"United Kingdom\", \"uk\")\n    val london = City(\"London\", uk)\n    val buckinghamPalace = Address(1, \"Buckingham Palace Road\", london)\n    val castleBuilders = Company(\"Castle Builders\", buckinghamPalace)\n    val switzerland = Country(\"Switzerland\", \"CH\")\n    val geneva = City(\"geneva\", switzerland)\n    val genevaAddress = Address(1, \"Geneva Lake\", geneva)\n    val ivan = User(\"Ivan\", castleBuilders, genevaAddress)\n    System.out.println(ivan)\n    System.out.println(\"Capitalize UK code...\")\n    ivan.company.address.city.country.code = ivan.company.address.city.country.code.toUpperCase\n    System.out.println(ivan)\n  }\n}\n```", "```java\ncase class Lens[X, Y](get: X => Y, set: (X, Y) => X)\n```", "```java\nimport scalaz.Lens\n\nobject User {\n  val userCompany = Lens.lensu[User, Company](\n    (u, company) => u.copy(company = company), _.company\n  )\n  val userAddress = Lens.lensu[User, Address](\n    (u, address) => u.copy(address = address), _.address\n  )\n  val companyAddress = Lens.lensu[Company, Address](\n    (c, address) => c.copy(address = address), _.address\n  )\n  val addressCity = Lens.lensu[Address, City](\n    (a, city) => a.copy(city = city), _.city\n  )\n\n  val cityCountry = Lens.lensu[City, Country](\n    (c, country) => c.copy(country = country), _.country\n  )\n  val countryCode = Lens.lensu[Country, String](\n    (c, code) => c.copy(code = code), _.code\n  )\n  val userCompanyCountryCode = userCompany >=> companyAddress >=> addressCity >=> cityCountry >=> countryCode\n}\n```", "```java\nval userCompanyCountryCodeCompose = countryCode <=< cityCountry <=< addressCity <=< companyAddress <=< userCompany\n```", "```java\nval ivanFixed = userCompanyCountryCode.mod(_.toUpperCase, ivan)\n```", "```java\ncase class Class(id: Int, name: String)\ncase class Person(id: Int, name: String, age: Int)\n```", "```java\ntrait DatabaseService {\n  val dbDriver: String\n  val connectionString: String\n  val username: String\n  val password: String\n  val ds = {\n    JdbcConnectionPool.create(connectionString, username, password)\n  }\n\n  def getConnection: Connection = ds.getConnection\n}\n```", "```java\ntrait DatabaseComponent {\n  val databaseService: DatabaseService\n\n  class H2DatabaseService(val connectionString: String, val username: String, val password: String) extends DatabaseService {\n    val dbDriver = \"org.h2.Driver\"\n  }\n}\n```", "```java\ntrait MigrationComponent {\n this: DatabaseComponent =>\n\n  val migrationService: MigrationService\n\n  class MigrationService() {\n    def runMigrations(): Unit = {\n      val connection = databaseService.getConnection\n      try {\n        // create the database\n        createPeopleTable(connection)\n        createClassesTable(connection)\n        createPeopleToClassesTable(connection)\n        // populate\n        insertPeople(\n          connection,\n          List(Person(1, \"Ivan\", 26), Person(2, \"Maria\", 25),\n           Person(3, \"John\", 27))\n        )\n        insertClasses(\n          connection,\n          List(Class(1, \"Scala Design Patterns\"), Class(2,\n           \"JavaProgramming\"), Class(3, \"Mountain Biking\"))\n        )\n        signPeopleToClasses(\n          connection,\n          List((1, 1), (1, 2), (1, 3), (2, 1), (3, 1), (3, 3))\n        )\n      } finally {\n        connection.close()\n      }\n    }\n\n    private def createPeopleTable(connection: Connection): Unit = {\n      // implementation\n    }\n\n    private def createClassesTable(connection: Connection): Unit = {\n      // implementation\n    }\n\n    private def createPeopleToClassesTable(connection: Connection):\n    Unit = {\n      // implementation\n    }\n\n    private def insertPeople(connection: Connection, people: List[Person]): Unit = {\n      // implementation\n    }\n\n    // Other methods\n  }\n\n}\n```", "```java\nprivate def createPeopleTable(connection: Connection): Unit = {\n  val statement = connection.prepareStatement(\n    \"\"\"\n      |CREATE TABLE people(\n      | id INT PRIMARY KEY,\n      | name VARCHAR(255) NOT NULL,\n      | age INT NOT NULL\n      |)\n    \"\"\".stripMargin\n  )\n  try {\n    statement.executeUpdate()\n  } finally {\n    statement.close()\n  }\n}\n\nprivate def insertPeople(connection: Connection, people: List[Person]): Unit = {\n  val statement = connection.prepareStatement(\n    \"INSERT INTO people(id, name, age) VALUES (?, ?, ?)\"\n  )\n  try {\n    people.foreach {\n      case person =>\n        statement.setInt(1, person.id)\n        statement.setString(2, person.name)\n        statement.setInt(3, person.age)\n        statement.addBatch()\n    }\n    statement.executeBatch()\n  } finally {\n    statement.close()\n  }\n}\n```", "```java\nCREATE TABLE people(\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n  age INT NOT NULL\n)\n\nCREATE TABLE classes(\n  id INT PRIMARY KEY,\n  name VARCHAR(255) NOT NULL,\n)\n\nCREATE TABLE people_classes(\n  person_id INT NOT NULL,\n  class_id INT NOT NULL,\n\n  PRIMARY KEY(person_id, class_id),\n  FOREIGN KEY(person_id) REFERENCES people(id) ON DELETE CASCADE ON UPDATE CASCADE,\n  FOREIGN KEY(class_id) REFERENCES classes(id) ON DELETE CASCADE ON UPDATE CASCADE\n)\n```", "```java\ntrait DaoComponent {\n  this: DatabaseComponent =>\n  val dao: Dao\n\n  class Dao() {\n    def getPeople: List[Person] = {\n      // skipped\n    }\n\n    def getClasses: List[Class] = {\n      // skipped\n    }\n\n    def getPeopleInClass(className: String): List[Person] = {\n      val connection = databaseService.getConnection\n      try {\n        val statement = connection.prepareStatement(\n          \"\"\"\n            |SELECT p.id, p.name, p.age\n            |FROM people p\n            | JOIN people_classes pc ON p.id = pc.person_id\n            | JOIN classes c ON c.id = pc.class_id\n            |WHERE c.name = ?\n          \"\"\".stripMargin\n        )\n        statement.setString(1, className)\n        executeSelect(statement) {\n          rs =>\n            readResultSet(rs) {\n              row =>\n                Person(row.getInt(1), row.getString(2), row.getInt(3))\n            }\n        }\n      } finally {\n        connection.close()\n      }\n    }\n\n    private def executeSelect[T](preparedStatement: PreparedStatement)(f: (ResultSet) => List[T]): List[T] =\n      try {\n        f(preparedStatement.executeQuery())\n      } finally {\n        preparedStatement.close()\n      }\n\n    private def readResultSet[T](rs: ResultSet)(f: ResultSet => T): List[T] =\n      Iterator.continually((rs.next(), rs)).takeWhile(_._1).map {\n        case (_, row) => f(rs)\n      }.toList\n  }\n}\n```", "```java\ntrait UserComponent {\n  this: DaoComponent =>\n  val userService: UserService\n\n  class UserService {\n    def getAverageAgeOfUsersInClass(className: String): Double = {\n      val (ageSum, peopleCount) = dao.getPeopleInClass(className).foldLeft((0, 0)) {\n          case ((sum, count), person) =>\n            (sum + person.age, count + 1)\n        }\n      if (peopleCount != 0) {\n        ageSum.toDouble / peopleCount.toDouble\n      } else {\n        0.0\n      }\n    }\n  }\n}\n```", "```java\nthis: Component1 with Component2 with Component3 â€¦ =>\n```", "```java\nobject ApplicationComponentRegistry\n  extends UserComponent\n    with DaoComponent\n    with DatabaseComponent\n    with MigrationComponent {\n  override val dao: ApplicationComponentRegistry.Dao = new Dao\n  override val databaseService: DatabaseService = new H2DatabaseService(\"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1\", \"\", \"\")\n  override val migrationService: ApplicationComponentRegistry.MigrationService = new MigrationService\n  override val userService: ApplicationComponentRegistry.UserService = new UserService\n}\n```", "```java\nobject Application {\n\n  import ApplicationComponentRegistry._\n\n  def main(args: Array[String]): Unit = {\n    migrationService.runMigrations()\n    System.out.println(dao.getPeople)\n    System.out.println(dao.getClasses)\n    System.out.println(dao.getPeopleInClass(\"Scala Design Patterns\"))\n    System.out.println(dao.getPeopleInClass(\"Mountain Biking\"))\n    System.out.println(s\"Average age of everyone in Scala Design Patterns: ${userService.getAverageAgeOfUsersInClass(\"Scala Design Patterns\")}\")\n  }\n}\n```", "```java\ntrait TestEnvironment\n  extends UserComponent\n    with DaoComponent\n    with DatabaseComponent\n    with MigrationComponent\n    with MockitoSugar {\n  override val dao: Dao = mock[Dao]\n  override val databaseService: DatabaseService = mock[DatabaseService]\n  override val migrationService: MigrationService = mock[MigrationService]\n  override val userService: UserService = mock[UserService]\n}\n```", "```java\nclass UserComponentTest extends FlatSpec with Matchers with MockitoSugar with TestEnvironment {\n  val className = \"A\"\n  val emptyClassName = \"B\"\n  val people = List(\n    Person(1, \"a\", 10),\n    Person(2, \"b\", 15),\n    Person(3, \"c\", 20)\n  )\n  override val userService = new UserService\n\n  when(dao.getPeopleInClass(className)).thenReturn(people)\n  when(dao.getPeopleInClass(emptyClassName)).thenReturn(List())\n\n  \"getAverageAgeOfUsersInClass\" should \"properly calculate the average of all ages.\" in {\n    userService.getAverageAgeOfUsersInClass(className) should equal(15.0)\n  }\n\n  it should \"properly handle an empty result.\" in {\n    userService.getAverageAgeOfUsersInClass(emptyClassName) should equal(0.0)\n  }\n}\n```", "```java\ndef getAverageAgeOfUsersInClass(className: String) =\n  Reader((userService: UserService) => userService.getAverageAgeOfUsersInClass(className))\n```", "```java\npackage object pimp {\n  implicit class StringExtensions(val s: String) extends AnyVal {\n    def isAllUpperCase: Boolean =\n      !(0 until s.length).exists {\n        case index =>\n          s.charAt(index).isLower\n      }\n  }\n}\n```", "```java\nobject PimpExample {\n  def main(args: Array[String]): Unit = {\n    System.out.println(s\"Is 'test' all upper case:\n     ${\"test\".isAllUpperCase}\")\n    System.out.println(s\"Is 'Tes' all upper case:\n     ${\"Test\".isAllUpperCase}\")\n    System.out.println(s\"Is 'TESt' all upper case:\n     ${\"TESt\".isAllUpperCase}\")\n    System.out.println(s\"Is 'TEST' all upper case:\n     ${\"TEST\".isAllUpperCase}\")\n  }\n}\n```", "```java\nimplicit class PersonSeqExtensions(val seq: Iterable[Person]) extends AnyVal {\n  def saveToDatabase(): Unit = {\n    seq.foreach {\n      case person =>\n        System.out.println(s\"Saved: ${person} to the database.\")\n    }\n  }\n}\n```", "```java\ncase class Person(name: String, age: Int)\n```", "```java\nobject PimpExample2 {\n  def main(args: Array[String]): Unit = {\n    val people = List(\n      Person(\"Ivan\", 26),\n      Person(\"Maria\", 26),\n      Person(\"John\", 25)\n    )\n    people.saveToDatabase()\n  }\n}\n```", "```java\nabstract class StringWriter {\n  def write(data: String): String\n}\n\nclass BasicStringWriter extends StringWriter {\n  override def write(data: String): String =\n    s\"Writing the following data: ${data}\"\n}\n```", "```java\ntrait CapitalizingStringWriter extends StringWriter {\n  abstract override def write(data: String): String = {\n    super.write(data.split(\"\\\\s+\").map(_.capitalize).mkString(\"\"))\n  }\n}\n\ntrait UppercasingStringWriter extends StringWriter {\n  abstract override def write(data: String): String = {\n    super.write(data.toUpperCase)\n  }\n}\n\ntrait LowercasingStringWriter extends StringWriter {\n  abstract override def write(data: String): String = {\n    super.write(data.toLowerCase)\n  }\n}\n```", "```java\nobject Example {\n  def main(args: Array[String]): Unit = {\n    val writer1 = new BasicStringWriter\n      with UppercasingStringWriter\n      with CapitalizingStringWriter\n    val writer2 = new BasicStringWriter\n      with CapitalizingStringWriter\n      with LowercasingStringWriter\n    val writer3 = new BasicStringWriter\n      with CapitalizingStringWriter\n      with UppercasingStringWriter\n      with LowercasingStringWriter\n    val writer4 = new BasicStringWriter\n      with CapitalizingStringWriter\n      with LowercasingStringWriter\n      with UppercasingStringWriter\n    System.out.println(s\"Writer 1: '${writer1.write(\"we like learning\n     scala!\")}'\")\n    System.out.println(s\"Writer 2: '${writer2.write(\"we like learning\n     scala!\")}'\")\n    System.out.println(s\"Writer 3: '${writer3.write(\"we like learning\n     scala!\")}'\")\n    System.out.println(s\"Writer 4: '${writer4.write(\"we like learning\n     scala!\")}'\")\n  }\n}\n```", "```java\ntrait Number[T] {\n  def plus(x: T, y: T): T\n  def minus(x: T, y: T): T\n  def divide(x: T, y: Int): T\n  def multiply(x: T, y: T): T\n  def sqrt(x: T): T\n}\n```", "```java\nobject Stats {\n  // same as\n  // def mean[T](xs: Vector[T])(implicit ev: Number[T]): T =\n  // ev.divide(xs.reduce(ev.plus(_, _)), xs.size)\n  def mean[T: Number](xs: Vector[T]): T =\n    implicitly[Number[T]].divide(\n      xs.reduce(implicitly[Number[T]].plus(_, _)),\n      xs.size\n    )\n\n  // assumes the vector is sorted\n  def median[T: Number](xs: Vector[T]): T =\n    xs(xs.size / 2)\n\n  def variance[T: Number](xs: Vector[T]): T = {\n    val simpleMean = mean(xs)\n    val sqDiff = xs.map {\n      case x =>\n        val diff = implicitly[Number[T]].minus(x, simpleMean)\n        implicitly[Number[T]].multiply(diff, diff)\n    }\n    mean(sqDiff)\n  }\n\n  def stddev[T: Number](xs: Vector[T]): T =\n    implicitly[Number[T]].sqrt(variance(xs))\n}\n```", "```java\nimport Stats._\n\nobject StatsExample {\n  def main(args: Array[String]): Unit = {\n    val intVector = Vector(1, 3, 5, 6, 10, 12, 17, 18, 19, 30, 36, 40, 42, 66)\n    val doubleVector = Vector(1.5, 3.6, 5.0, 6.6, 10.9, 12.1, 17.3, 18.4, 19.2, 30.9, 36.6, 40.2, 42.3, 66.0)\n    System.out.println(s\"Mean (int): ${mean(intVector)}\")\n    System.out.println(s\"Median (int): ${median(intVector)}\")\n    System.out.println(s\"Std dev (int): ${stddev(intVector)}\")\n    System.out.println(s\"Mean (double): ${mean(doubleVector)}\")\n    System.out.println(s\"Median (double): ${median(doubleVector)}\")\n    System.out.println(s\"Std dev (double): ${stddev(doubleVector)}\")\n  }\n}\n```", "```java\nError:(9, 44) could not find implicit value for evidence parameter of type com.ivan.nikolov.type_classes.Number[Int]\n    System.out.println(s\"Mean (int): ${mean(intVector)}\")\n                                            ^\n```", "```java\nimport Math.round\n\nobject Number {\n  implicit object DoubleNumber extends Number[Double] {\n    override def plus(x: Double, y: Double): Double = x + y\n    override def divide(x: Double, y: Int): Double = x / y\n    override def multiply(x: Double, y: Double): Double = x * y\n    override def minus(x: Double, y: Double): Double = x - y\n    override def sqrt(x: Double): Double = Math.sqrt(x)\n  }\n\n  implicit object IntNumber extends Number[Int] {\n    override def plus(x: Int, y: Int): Int = x + y\n    override def divide(x: Int, y: Int): Int = round(x.toDouble / y.toDouble).toInt\n    override def multiply(x: Int, y: Int): Int = x * y\n    override def minus(x: Int, y: Int): Int = x - y\n    override def sqrt(x: Int): Int = round(Math.sqrt(x)).toInt\n  }\n}\n```", "```java\ncase class Person(name: String, age: Int)\n```", "```java\nobject Person {\n  def getFromDatabase(): List[Person] = {\n    // simulate we're getting people from database by sleeping\n    System.out.println(\"Retrieving people...\")\n    Thread.sleep(3000)\n    List(\n      Person(\"Ivan\", 26),\n      Person(\"Maria\", 26),\n      Person(\"John\", 25)\n    )\n  }\n}\n```", "```java\ndef printPeopleBad(people: => List[Person]): Unit = {\n  System.out.println(s\"Print first time: ${people}\")\n  System.out.println(s\"Print second time: ${people}\")\n}\n```", "```java\ndef printPeopleGood(people: => List[Person]): Unit = {\n  lazy val peopleCopy = people\n  System.out.println(s\"Print first time: ${peopleCopy}\")\n  System.out.println(s\"Print second time: ${peopleCopy}\")\n}\n```", "```java\nobject Example {\n\n  import Person._\n\n  def main(args: Array[String]): Unit = {\n    System.out.println(\"Now printing bad.\")\n    printPeopleBad(getFromDatabase())\n    System.out.println(\"Now printing good.\")\n    printPeopleGood(getFromDatabase())\n  }\n}\n```", "```java\n/**\n  * Note that these are not partially defined functions!\n  */\nobject PartiallyAppliedFunctions {\n  val greaterOrEqual = (a: Int, b: Int) => a >= b\n  val lessOrEqual = (a: Int, b: Int) => a <= b\n\n  def greaterOrEqualCurried(b: Int)(a: Int) = a >= b\n\n  def lessOrEqualCurried(b: Int)(a: Int) = a <= b\n\n  val greaterOrEqualCurriedVal: (Int) => (Int) => Boolean = b => a => a >= b\n  val lessOrEqualCurriedVal: (Int) => (Int) => Boolean = b => a => a <= b\n}\n```", "```java\nobject PartiallyAppliedExample {\n\n  import PartiallyAppliedFunctions._\n\n  val MAX = 20\n  val MIN = 5\n\n  def main(args: Array[String]): Unit = {\n    val numbers = List(1, 5, 6, 11, 18, 19, 20, 21, 25, 30)\n    // partially applied\n    val ge = greaterOrEqual(_: Int, MIN)\n    val le = lessOrEqual(_: Int, MAX)\n    // curried\n    val geCurried = greaterOrEqualCurried(MIN) _\n    val leCurried = lessOrEqualCurried(MAX) _\n    // won't work because of the argument order\n    // val geCurried = greaterOrEqual.curried(MIN)\n    // val leCurried = lessOrEqual.curried(MAX)\n    // will work normally\n    // val geCurried = greaterOrEqualCurriedVal(MIN)\n    // val leCurried = lessOrEqualCurriedVal(MAX)\n    System.out.println(s\"Filtered list: ${numbers.filter(i => ge(i) && le(i))}\")\n    System.out.println(s\"Filtered list: ${numbers.filter(i => geCurried(i) && leCurried(i))}\")\n  }\n}\n```", "```java\ngreaterOrEqual(_: Int, MIN)\n```", "```java\nobject PartiallyDefinedFunctions {\n  val squareRoot: PartialFunction[Int, Double] = {\n    case a if a >= 0 => Math.sqrt(a)\n  }\n}\n```", "```java\nobject PartiallyDefinedExample {\n\n  import PartiallyDefinedFunctions._\n\n  def main(args: Array[String]): Unit = {\n    val items = List(-1, 10, 11, -36, 36, -49, 49, 81)\n    System.out.println(s\"Can we calculate a root for -10:\n     ${squareRoot.isDefinedAt(-10)}\")\n    System.out.println(s\"Square roots: ${items.collect(squareRoot)}\")\n  }\n}\n```", "```java\nval square: PartialFunction[Int, Double] = {\n  case a if a < 0 => Math.pow(a, 2)\n}\n```", "```java\nobject PartiallyDefinedExample {\n\n  import PartiallyDefinedFunctions._\n\n  def main(args: Array[String]): Unit = {\n    val items = List(-1, 10, 11, -36, 36, -49, 49, 81)\n    System.out.println(s\"Can we calculate a root for -10:\n     ${squareRoot.isDefinedAt(-10)}\")\n    System.out.println(s\"Square roots: ${items.collect(squareRoot)}\")\n    System.out.println(s\"Square roots or squares:\n     ${items.collect(squareRoot.orElse(square))}\")\n  }\n}\n```", "```java\npackage object implicits {\n  implicit def doubleToInt(a: Double): Int = Math.round(a).toInt\n}\n```", "```java\nobject ImplicitExamples {\n  def main(args: Array[String]): Unit = {\n    val number: Int = 7.6\n    System.out.println(s\"The integer value for 7.6 is ${number}\")\n  }\n}\n```", "```java\nimplicit def intsToString(ints: List[Int]): String = ints.map(_.toChar).mkString\n```", "```java\nobject ImplicitExamples {\n  def main(args: Array[String]): Unit = {\n    val number: Int = 7.6\n    System.out.println(s\"The integer value for 7.6 is ${number}\")\n    // prints HELLO!\n    printAsciiString(List(72, 69, 76, 76, 79, 33))\n  }\n\n  def printAsciiString(s: String): Unit = {\n    System.out.println(s)\n  }\n}\n```", "```java\ncase class Person(name: String, age: Int)\n```", "```java\ntrait DatabaseService {\n  def getPeople(): List[Person]\n}\n\nclass DatabaseServiceImpl extends DatabaseService {\n  override def getPeople(): List[Person] = List(\n    Person(\"Ivan\", 26),\n    Person(\"Maria\", 26),\n    Person(\"John\", 25)\n  )\n}\n```", "```java\ntrait UserService {\n  def getAverageAgeOfPeople()(implicit ds: DatabaseService): Double\n}\n\nclass UserServiceImpl extends UserService {\n  override def getAverageAgeOfPeople()(implicit ds: DatabaseService): Double = {\n    val (s, c) = ds.getPeople().foldLeft((0, 0)) {\n      case ((sum, count), person) =>\n        (sum + person.age, count + 1)\n    }\n    s.toDouble / c.toDouble\n  }\n}\n```", "```java\npackage object di {\n  implicit val databaseService = new DatabaseServiceImpl\n  implicit val userService = new UserServiceImpl\n}\n```", "```java\nobject ImplicitDIExample {\n  def main(args: Array[String]): Unit = {\n    System.out.println(s\"The average age of the people is:\n     ${userService.getAverageAgeOfPeople()}\")\n  }\n}\n```", "```java\ndef parse(sentence: String): Array[String]\n```", "```java\nimport java.util.StringTokenizer\n\nclass SentenceParserTokenize {\n  def parse(sentence: String): Array[String] = {\n    val tokenizer = new StringTokenizer(sentence)\n    Iterator.continually({\n      val hasMore = tokenizer.hasMoreTokens\n      if (hasMore) {\n        (hasMore, tokenizer.nextToken())\n      } else {\n        (hasMore, null)\n      }\n    }).takeWhile(_._1).map(_._2).toArray\n  }\n}\n```", "```java\nclass SentenceParserSplit {\n  def parse(sentence: String): Array[String] = sentence.split(\"\\\\s\")\n}\n```", "```java\nobject DuckTypingExample {\n  def printSentenceParts(sentence: String, parser: {\n def parse(sentence: String): Array[String]\n }) = parser.parse(sentence).foreach(println)\n\n  def main(args: Array[String]): Unit = {\n    val tokenizerParser = new SentenceParserTokenize\n    val splitParser = new SentenceParserSplit\n    val sentence = \"This is the sentence we will be splitting.\"\n    System.out.println(\"Using the tokenize parser: \")\n    printSentenceParts(sentence, tokenizerParser)\n    System.out.println(\"Using the split parser: \")\n    printSentenceParts(sentence, splitParser)\n  }\n}\n```", "```java\nimport org.apache.commons.codec.binary.Hex\n\nclass Hasher extends Memoizer {\n  def md5(input: String) = {\n    System.out.println(s\"Calling md5 for $input.\")\n    new String(Hex.encodeHex(MessageDigest.getInstance(\"MD5\").digest(input.getBytes)))\n  }\n}\n```", "```java\nimport scala.collection.mutable.Map\n\ntrait Memoizer {\n  def memo[X, Y](f: X => Y): (X => Y) = {\n    val cache = Map[X, Y]()\n    (x: X) => cache.getOrElseUpdate(x, f(x))\n  }\n}\n```", "```java\nval memoMd5 = memo(md5)\n```", "```java\nobject MemoizationExample {\n  def main(args: Array[String]): Unit = {\n    val hasher = new Hasher\n    System.out.println(s\"MD5 for 'hello' is '${hasher.memoMd5(\"hello\")}'.\")\n    System.out.println(s\"MD5 for 'bye' is '${hasher.memoMd5(\"bye\")}'.\")\n    System.out.println(s\"MD5 for 'hello' is '${hasher.memoMd5(\"hello\")}'.\")\n    System.out.println(s\"MD5 for 'bye1' is '${hasher.memoMd5(\"bye1\")}'.\")\n    System.out.println(s\"MD5 for 'bye' is '${hasher.memoMd5(\"bye\")}'.\")\n  }\n}\n```", "```java\nval memoMd5Scalaz: String => String = Memo.immutableHashMapMemo {\n  md5\n}\n```"]