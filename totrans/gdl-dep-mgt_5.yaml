- en: Chapter 5. Publishing to a Maven Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned how to use the `Upload` task to publish
    your project artifacts. In this chapter, you will learn more about the new and
    still-developing feature of publishing your artifacts to a Maven repository.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn about the new publishing mechanism in Gradle. This feature is
    currently still under development, and that means the implementation might change
    in the future. But for now, this way of publishing artifacts will be the default.
  prefs: []
  type: TYPE_NORMAL
- en: Defining publication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must add the `maven-publish` plugin to our project to add the new publication
    feature of Gradle. The plugin allows us to define and deploy our project artifacts
    in the Maven format. This means our deployed project can be used by other developers
    and projects that support the Maven format. For example, other projects could
    use Gradle or Maven and define a dependency to our published artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: The `maven-publish` plugin is based on a general `publishing` plugin. The `publishing`
    plugin adds a new `publishing` extension to our project. We can use a `publications`
    configuration block in our build script to configure the artifacts we want to
    publish and the repositories we want to deploy to. The `publications` extension
    has the `PublishingExtension` type in the `org.gradle.api.publish` package. The
    plugin also adds the general life cycle `publish` task to the project. Other tasks
    can be added as task dependencies to this task; thus, with a single `publish`
    task, all the publications in the project can be published.
  prefs: []
  type: TYPE_NORMAL
- en: The `maven-publish` plugins also add extra task rules to the project. There
    is a task to generate a Maven POM file for each publication in the project. The
    plugins also add a new task rule to publish each publication to the local Maven
    repository. Finally, a task rule is added based on a combination of the publication
    and the repository, to publish a publication to the specified repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an example build file and apply the `maven-publish` plugin to
    see the new task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will invoke the `tasks` task from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: We can see the `publish` and `publishToMavenLocal` tasks in the output. The
    dynamic task rules for publishing single publications to repositories are not
    shown.
  prefs: []
  type: TYPE_NORMAL
- en: To configure our publications, we must first add a `publishing` configuration
    block. Inside the block, we define the `publications` configuration block. In
    this block, we define a publication. A publication defines what needs to be published.
    The `maven-publish` plugin expects a publication to have the `MavenPublication`
    type found in the `org.gradle.api.publish.maven` package. Besides the artifacts
    that need to be published, we can also define details for the generated POM file.
  prefs: []
  type: TYPE_NORMAL
- en: Defining publication artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any publication we define must have a unique name in our project. We can add
    multiple publications with their own names inside a `publications` configuration
    block. To add an artifact, we can use the `artifact` method in the publication
    definition. We can also use the `artifacts` property to directly set all artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define artifacts with the `artifact` method in the following ways:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AbstractArchiveTask` | The information for the artifact is extracted from
    the archive task. The artifact is an instance of `PublishArtifact` in the `org.gradle.api.artifacts`
    package. |'
  prefs: []
  type: TYPE_TB
- en: '| `File` | The information for the artifact is extracted from the filename.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Map` | This is another way to define artifacts. The map must contain a `source`
    key referencing a file or archive task. The other properties we can use to further
    configure the artifact are `classifier` and `extension`. |'
  prefs: []
  type: TYPE_TB
- en: Using archive task artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example build file, we define a new publication with the name
    `publishJar`, and we define the output of the `jar` archive task as an artifact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will run the `tasks` task and, in the output, we will be able to see
    newly generated tasks for publishing this publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice the two extra tasks, `generatePomFileForPublishJarPublication` and `publishPublishJarPublicationToMavenLocal`.
    The name of the publication, `publishJar`, is used for the two tasks. Gradle uses
    the `generatePomFileFor<publicationName>Publication` pattern for a task to generate
    a POM for a publication. The task pattern to publish a publication to the local
    Maven repository is `publish<publicationName>PublicationToMavenLocal`. Later in
    this chapter, we will see how we can add other repositories. We cannot yet invoke
    the tasks because we also need to set the `group` and `version` project properties,
    but we will cover this in the section about generating a POM file. We can now
    focus on defining the artifacts for a publication in this section.
  prefs: []
  type: TYPE_NORMAL
- en: We are not restricted to one artifact for a publication; we can add more by
    invoking the `artifact` method multiple times. Or, we can use the `artifacts`
    property to assign multiple artifacts. It is important that each artifact should
    have unique `classifier` and `extension` property values for a single publication.
    Gradle will check this before we can invoke any tasks, so we immediately get an
    error message when the artifacts don't have a unique combination of `classifier`
    and `extensions` property values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we add two extra artifacts to our publication
    with the `artifact` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of using the `artifact` method, we can also use the `artifacts` property
    and assign multiple artifacts. Each of the artifacts we assign must have a unique
    combination of `classifier` and `extension` property values. In the next example
    build file, we will use the same artifacts as in the previous example but, this
    time, we will assign them to the `artifacts` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using file artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of an archive task, we can also use a file as an artifact. Gradle tries
    to extract the `extension` and `classifier` properties from the filename. We can
    also configure these properties ourselves when we add the file as a publication
    artifact.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use the `src/files/README` and `src/files/COPYRIGHT`
    files as publication artifacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using software components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Besides the `artifact` method and the `artifacts` property, we can also use
    the `from` method inside a `publications` configuration block. We specify `SoftwareComponent`
    for Gradle as an argument to the `from` method. The `java` plugin adds `SoftwareComponent`
    with the name `java`, and it includes the `jar` artifact and all runtime dependencies.
    The `war` plugin adds the `war` artifact as `SoftwareComponent`. `SoftwareComponent`
    is a part of the Gradle build model that defines a piece of code that depends
    on other code or is a dependency for other code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build file, we will apply the `war` plugin to our project,
    which will implicitly add the `java` plugin. We also define two publications,
    each using `SoftwareComponent` from both plugins. The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Generating POM files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of a Maven publication is the POM file. We already saw that
    Gradle added a `generatePom<publicationName>` task to our project. Furthermore,
    we can define some properties of the POM file inside a publication configuration.
    Gradle also offers a hook to customize the generated POM file even further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle uses the project''s `version`, `group`, and `name` properties in the
    generated POM file. We create a new example build file where we define the project
    properties so that they are included in the POM file. The following code shows
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we execute the `generatePomFileForSamplePublication` task. The `pom-default.xml`
    file is created in the `build/publications/sample` directory. If we open the file,
    we can see that the `groupId`, `artifactId`, and `version` elements are filled
    with the values from our Gradle build file. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can override the values for `groupId`, `artifactId`, and `version` inside
    a publication configuration. We use the `groupId`, `artifactId`, and `version`
    properties to set values other than the default values taken from the project
    properties. In the next example build file, we will use these methods to set the
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Upon executing the `generatePomFileForSamplePublication` task again, we can
    see the new values in the generated POM file. The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You may already have noticed that the `generatePomFile<publicationName>Publication`
    task also added a `dependencies` element in the generated POM file. The dependencies
    of our project are added as runtime dependencies in the POM file. This happens
    because we use the `from` method with the `components.java` value inside our publication
    configuration. The Java software component not only adds the `jar` archive tasks
    as an artifact, but also turns the project dependencies in to Maven runtime dependencies.
    If we use an archive task to define an artifact, the `dependencies` element is
    not added to the POM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use the `artifact` method to define
    the publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `generatePomFileForSamplePublication` task from the command
    line, the POM file is generated. The contents of the POM file are now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we will learn how we can customize the POM file using a
    hook. We can then, for example, also change the Maven dependency scope for our
    project dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the POM file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add some extra elements to the generated POM file, we must use the `pom`
    property that is a part of `MavenPublication`. This returns a `MavenPom` object,
    and we can invoke the `withXml` method from this object to add extra elements
    to the POM file. We will use a closure with the `withXml` method to access an
    `XmlProvider` object. With the `XmlProvider` object, we can get a reference to
    a DOM element with the `asElement` method, a Groovy node object with the `asNode`
    method, or the `StringBuilder` object with the `asString` method to extend the
    POM XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we add the `organization` and `issueMangement`
    elements to the generated POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we generate the POM file, we can see our newly created elements in the XML
    version. This is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the previous section, we already learned that, if we use the `from` method
    with the `components.java` value, all project dependencies are added as runtime
    dependencies in the generated POM file. This might always not be what we want.
    Using the `withXml` method, not only can we add new elements, we can also change
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a hook where we change the runtime scope for dependencies to compile
    the scope. In the next build file, we will implement this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated POM file now has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Another solution would be to configure the publication, not with the `from`
    method but with the `artifact` method. Then, `dependencies` is not added to the
    POM file because Gradle cannot determine the dependencies for an artifact. Using
    the `withXml` method, we can add it ourselves based on the project dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, this solution is implemented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When we invoke the `generatePomFileForSamplePublication` task, we get the following
    POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Defining repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must configure a Maven repository to publish our configured publication.
    We can choose a local directory or a repository manager, such as Artifactory or
    Nexus. Gradle also adds support installing the publication to our local Maven
    repository.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to the local Maven repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Gradle already adds our local Maven repository as a destination for our publications.
    For each named publication, there is a `publish<publicationName>ToMavenLocal`
    task. Gradle also creates the `publishToMavenLocal` task, which will publish all
    publications to the local Maven repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have the following example build file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'From the command line, we will run the `publishToMavenLocal` task and see which
    tasks are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: You may have noticed that first the publication artifact is created with the
    `jar` task and its task dependencies. Also, the POM file is generated, and our
    publication is copied to the local Maven repository via the `publishPublishJarPublicationToMavenLocal`
    task, which is a task dependency for `publishToMavenLocal`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we look at the local Maven repository directory, we see that our project
    artifact is published:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Publishing to the Maven repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have our own company's Maven repository or a directory where we want to
    publish our publications, then we must add it to the `publishing` configuration
    block. Inside the block, we can add the `repositories` configuration block containing
    one or more named repositories. For the combination of each publication and repository,
    Gradle creates a task with the `publish<publicationName>To<repositoryName>Repository`
    name pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will define a simple directory repository in the next example build
    file with the name `localRepo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we will run the `tasks` task to see which task is added to the `Publishing
    tasks` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To publish our project''s artifact, we can execute the `publishPublishJarPublicationToLocalRepoRepository`
    or `publish` task. The following output shows the tasks that are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the task is performed, we get the following files in the `build/localRepo`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Publishing to Artifactory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To publish our publications to an Artifactory repository with a Maven layout,
    we only have to configure the repository in the `publications.repositories` configuration
    block. We can set the `url` property, a `name`, and optional security credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build file, we use an Artifactory repository to which we
    publish the publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradle creates a new `publishPublishJarPublicationToArtifactoryRepository`
    task based on the publication name and the repository name. When we invoke the
    task, we can see that the publication is deployed to the Artifactory repository.
    The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'When we open the Artifactory web application in a web browser, we can see that
    our project is now part of the repository, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing to Artifactory](img/image00131.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Publishing to Nexus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another repository manager is Nexus. Publishing to a Nexus repository manager
    is not much different than publishing to Artifactory or a local directory. We
    only have to change the `url` property to reference the repository and set the
    optional security credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use a Nexus repository manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the `publishPublishJarPublicationToNexusRepository` task is created.
    The task is also added as a task dependency to the `publish` task. To accomplish
    this, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'When we take a look with the Nexus web application inside the repository, we
    can see that our project is added to the repository, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing to Nexus](img/image00132.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the new and developing `maven-publish`
    plugin. You saw how you can declare your publications with the `publications`
    configuration block. Gradle will automatically create new tasks based on what
    you declared as publications.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to customize the POM file that is generated by the Gradle
    publishing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you saw how you can configure Maven repositories so you can deploy
    your publications to them. We configured a local directory, which could also be
    a network share, and showed you how to configure an Artifactory or Nexus repository
    manager.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will see how you can upload to Bintray.
  prefs: []
  type: TYPE_NORMAL
