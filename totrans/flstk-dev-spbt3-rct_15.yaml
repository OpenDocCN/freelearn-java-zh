- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting Up the Frontend for Our Spring Boot RESTful Web Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explains the steps that are required to start the development of
    the frontend part of our car database application. We will first define the functionalities
    that we are developing. Then, we will do a mock-up of the UI. As a backend, we
    will use our Spring Boot application from *Chapter 5*, *Securing Your Backend*.
    We will begin development using the unsecured version of the backend. Finally,
    we will create the React app that we will use in our frontend development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Mocking up the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the Spring Boot backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the React project for the frontend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Boot application that we created in *Chapter 5*, *Securing Your Backend*,
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Node.js also has to be installed, and the code available at the following GitHub
    link will be required to follow along with the examples in this chapter: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12).'
  prefs: []
  type: TYPE_NORMAL
- en: Mocking up the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first few chapters of this book, we created a car database backend that
    provides the RESTful API. Now, it is time to start building the frontend for our
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a frontend with the following specifications:'
  prefs: []
  type: TYPE_NORMAL
- en: It lists cars from the database in a table and provides **paging**, **sorting**,
    and **filtering**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a button that opens a **modal form** to add new cars to the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In each row of the car table, there is a button to **edit** the car or **delete**
    it from the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a link or button to **export** data from the table to a **CSV** file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI mock-ups are often created at the beginning of frontend development to provide
    customers with a visual representation of what the user interface will look like.
    Mock-ups are quite often done by designers and then provided to developers. There
    are lots of different applications for creating mock-ups, such as Figma, Balsamiq,
    and Adobe XD, or you can even use a pencil and paper. You can also create interactive
    mock-ups to demonstrate a number of functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: If you have done a mock-up, it is much easier to discuss requirements with the
    client before you start to write any actual code. With the mock-up, it is also
    easier for the client to understand the idea of the frontend and suggest corrections
    for it. Changes to mock-ups are really easy and fast to implement, compared to
    modifications involving actual frontend source code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the example mock-up of our car list frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The frontend mock-up ](img/B19818_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: The frontend mock-up'
  prefs: []
  type: TYPE_NORMAL
- en: 'The modal form that is opened when the user presses the **+ CREATE** button
    looks like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The frontend mock-up ](img/B19818_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: The modal form mock-up'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a mock-up of our UI ready, let’s look at how we can prepare
    our Spring Boot backend.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the Spring Boot backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will begin frontend development in this chapter with the unsecured version
    of our backend. Then:'
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 13*, *Adding CRUD Functionalities*, we will implement all the CRUD
    functionalities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In *Chapter 14*, *Styling the Frontend with MUI*, we will continue to polish
    our UI using Material UI components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, in *Chapter 16*, *Securing Your Application*, we will enable security
    in our backend, make some modifications that are required, and implement authentication.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Eclipse, open the Spring Boot application that we created in *Chapter 5*,
    *Securing Your Backend*. Open the `SecurityConfig.java` file that defines the
    Spring Security configuration. Temporarily comment out the current configuration
    and give everyone access to all endpoints. Refer to the following modifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if you start the MariaDB database, run the backend, and send the `GET`
    request to the `http:/localhost:8080/api/cars` endpoint, you should get all the
    cars in the response, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: The GET request'
  prefs: []
  type: TYPE_NORMAL
- en: Now, we are ready to create our React project for the frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the React project for the frontend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start coding the frontend, we have to create a new React app. We
    will use TypeScript in our React frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open PowerShell, or any other suitable terminal. Create a new React app by
    typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this book, we are using Vite version 4.4\. You can also use the latest version,
    but then you have to check for changes in the Vite documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name your project `carfront`, and select the **React** framework and **TypeScript**
    variant:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19818_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Frontend project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Move to the project folder and install dependencies by typing the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the MUI component library by typing the following command, which installs
    the Material UI core library and two Emotion libraries. **Emotion** is a library
    designed for writing CSS with JavaScript ([https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, install React Query v4 and Axios, which we will use for networking in
    our frontend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the app by typing the following command in the project’s `root` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `src` folder with Visual Studio Code and remove any superfluous code
    from the `App.tsx` file. The file extension is now `.tsx` because we are using
    TypeScript. Also, remove the `App.css` style sheet file import. We will use the
    MUI `AppBar` component in the `App.tsx` file to create the toolbar for our app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have already looked at the MUI `AppBar` in *Chapter 11*, *Useful Third-Party
    Components for React*, if you would like a reminder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As shown in the code below, wrap the `AppBar` component inside the MUI `Container`
    component, which is a basic layout component that centers your app content horizontally.
    We can use the `position` prop to define the positioning behavior of the app bar.
    The value `static` means that the app bar is not fixed to the top when the user
    scrolls. If you use `position=` `"``fixed``"`, it will fix the app bar at the
    top of the page. You also have to import all the MUI components that we are using:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `maxWidth` prop defines the maximum width of our app, and we have used the
    largest value. We have also used the MUI `CssBaseline` component, which is used
    to fix inconsistencies across browsers, ensuring that the React app’s appearance
    is uniform across different browsers. It is typically included at the top level
    of your application to ensure that its styles are applied globally.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will remove all predefined styling. Therefore, remove the `index.css` style
    sheet import from the `main.tsx` file. The code should look like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, your frontend starting point should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Car Shop'
  prefs: []
  type: TYPE_NORMAL
- en: We have now created the React project for our frontend and can continue with
    further development.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started the development of our frontend using the backend
    that we created in *Chapter 5*, *Securing Your Backend*. We defined the functionalities
    of the frontend and created a mock-up of the UI. We started frontend development
    with an unsecured version of the backend and, therefore, made some modifications
    to our Spring Security configuration class. We also created the React app that
    we will use during development.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will add **create**, **read**, **update**, and **delete**
    (**CRUD**) functionalities to our frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should you do a mock-up of the UI?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you disable Spring Security from the backend?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many other good resources available for learning about UI design
    and MUI. A few are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Don’t Make Me Think, Revisited: A Common Sense Approach to Web Usability (3rd
    Edition)*, by Steve Krug ([https://sensible.com/dont-make-me-think/](https://sensible.com/dont-make-me-think/))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MUI blog – the latest about MUI ([https://mui.com/blog/](https://mui.com/blog/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Material UI GitHub repository ([https://github.com/mui/material-ui](https://github.com/mui/material-ui))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
