- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Setting Up the Frontend for Our Spring Boot RESTful Web Service
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的Spring Boot RESTful Web服务设置前端
- en: This chapter explains the steps that are required to start the development of
    the frontend part of our car database application. We will first define the functionalities
    that we are developing. Then, we will do a mock-up of the UI. As a backend, we
    will use our Spring Boot application from *Chapter 5*, *Securing Your Backend*.
    We will begin development using the unsecured version of the backend. Finally,
    we will create the React app that we will use in our frontend development.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章解释了开始开发我们的汽车数据库应用程序前端部分所需的步骤。我们首先将定义我们正在开发的函数。然后，我们将进行UI的模拟。作为后端，我们将使用第5章中提到的Spring
    Boot应用程序，即*第5章*，*保护后端*。我们将从后端的不安全版本开始开发。最后，我们将创建用于前端开发的React应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Mocking up the UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟UI
- en: Preparing the Spring Boot backend
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备Spring Boot后端
- en: Creating the React project for the frontend
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建前端React项目
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in *Chapter 5*, *Securing Your Backend*,
    is required.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第5章中创建的*第5章*，*保护后端*中的Spring Boot应用程序是必需的。
- en: 'Node.js also has to be installed, and the code available at the following GitHub
    link will be required to follow along with the examples in this chapter: [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12).'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要安装Node.js，并且需要以下GitHub链接中的代码来跟随本章的示例：[https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter12)。
- en: Mocking up the UI
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟UI
- en: In the first few chapters of this book, we created a car database backend that
    provides the RESTful API. Now, it is time to start building the frontend for our
    application.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们创建了一个提供RESTful API的汽车数据库后端。现在，是时候开始构建我们应用程序的前端了。
- en: 'We will create a frontend with the following specifications:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个具有以下规格的前端：
- en: It lists cars from the database in a table and provides **paging**, **sorting**,
    and **filtering**.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它以表格形式列出数据库中的汽车，并提供**分页**、**排序**和**筛选**功能。
- en: There is a button that opens a **modal form** to add new cars to the database.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有一个按钮可以打开一个用于向数据库添加新汽车的**模态表单**。
- en: In each row of the car table, there is a button to **edit** the car or **delete**
    it from the database.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在汽车表的每一行中，都有一个按钮可以**编辑**汽车或从数据库中**删除**它。
- en: There is a link or button to **export** data from the table to a **CSV** file.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格中有一个链接或按钮，可以**导出**数据到**CSV**文件。
- en: UI mock-ups are often created at the beginning of frontend development to provide
    customers with a visual representation of what the user interface will look like.
    Mock-ups are quite often done by designers and then provided to developers. There
    are lots of different applications for creating mock-ups, such as Figma, Balsamiq,
    and Adobe XD, or you can even use a pencil and paper. You can also create interactive
    mock-ups to demonstrate a number of functionalities.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: UI模拟通常在前端开发的早期创建，为用户提供用户界面的视觉表示。模拟通常由设计师完成，然后提供给开发者。有许多不同的应用程序可以创建模拟，例如Figma、Balsamiq和Adobe
    XD，或者您甚至可以使用铅笔和纸。您还可以创建交互式模拟来展示多个功能。
- en: If you have done a mock-up, it is much easier to discuss requirements with the
    client before you start to write any actual code. With the mock-up, it is also
    easier for the client to understand the idea of the frontend and suggest corrections
    for it. Changes to mock-ups are really easy and fast to implement, compared to
    modifications involving actual frontend source code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经完成了模拟，在开始编写任何实际代码之前与客户讨论需求会容易得多。有了模拟，客户也更容易理解前端的概念，并提出对其的修改建议。与实际前端源代码的修改相比，对模拟的修改真的非常容易和快速。
- en: 'The following screenshot shows the example mock-up of our car list frontend:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的汽车列表前端示例模拟：
- en: '![Figure 10.1 – The frontend mock-up ](img/B19818_12_01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 前端模拟](img/B19818_12_01.png)'
- en: 'Figure 12.1: The frontend mock-up'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1：前端模拟
- en: 'The modal form that is opened when the user presses the **+ CREATE** button
    looks like the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户按下**+ 创建**按钮时打开的模态表单看起来如下：
- en: '![Figure 10.2 – The frontend mock-up ](img/B19818_12_02.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 前端模拟](img/B19818_12_02.png)'
- en: 'Figure 12.2: The modal form mock-up'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：模态表单模拟
- en: Now that we have a mock-up of our UI ready, let’s look at how we can prepare
    our Spring Boot backend.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了我们的 UI 模拟，让我们看看如何准备我们的 Spring Boot 后端。
- en: Preparing the Spring Boot backend
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备 Spring Boot 后端
- en: 'We will begin frontend development in this chapter with the unsecured version
    of our backend. Then:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章开始前端开发，使用未加密的后端版本。然后：
- en: In *Chapter 13*, *Adding CRUD Functionalities*, we will implement all the CRUD
    functionalities.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *第 13 章*，*添加 CRUD 功能* 中，我们将实现所有 CRUD 功能。
- en: In *Chapter 14*, *Styling the Frontend with MUI*, we will continue to polish
    our UI using Material UI components.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 *第 14 章*，*使用 MUI 美化前端* 中，我们将继续使用 Material UI 组件来完善我们的 UI。
- en: Finally, in *Chapter 16*, *Securing Your Application*, we will enable security
    in our backend, make some modifications that are required, and implement authentication.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在 *第 16 章*，*保护您的应用程序* 中，我们将启用后端的安全性，进行必要的修改，并实现身份验证。
- en: 'In Eclipse, open the Spring Boot application that we created in *Chapter 5*,
    *Securing Your Backend*. Open the `SecurityConfig.java` file that defines the
    Spring Security configuration. Temporarily comment out the current configuration
    and give everyone access to all endpoints. Refer to the following modifications:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Eclipse 中打开我们在 *第 5 章*，*保护后端* 中创建的 Spring Boot 应用程序。打开定义 Spring Security 配置的
    `SecurityConfig.java` 文件。暂时注释掉当前配置，并允许所有人访问所有端点。参考以下修改：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, if you start the MariaDB database, run the backend, and send the `GET`
    request to the `http:/localhost:8080/api/cars` endpoint, you should get all the
    cars in the response, as shown in the following screenshot:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您启动 MariaDB 数据库，运行后端，并向 `http:/localhost:8080/api/cars` 端点发送 `GET` 请求，您应该会在响应中获取所有汽车，如下面的截图所示：
- en: '![](img/B19818_12_03.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B19818_12_03.png]'
- en: 'Figure 12.3: The GET request'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：GET 请求
- en: Now, we are ready to create our React project for the frontend.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已准备好创建前端 React 项目。
- en: Creating the React project for the frontend
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建前端 React 项目
- en: 'Before we start coding the frontend, we have to create a new React app. We
    will use TypeScript in our React frontend:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始编写前端代码之前，我们必须创建一个新的 React 应用程序。我们将在 React 前端使用 TypeScript：
- en: 'Open PowerShell, or any other suitable terminal. Create a new React app by
    typing the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 PowerShell 或任何其他合适的终端。通过输入以下命令创建一个新的 React 应用程序：
- en: '[PRE1]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this book, we are using Vite version 4.4\. You can also use the latest version,
    but then you have to check for changes in the Vite documentation.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在本书中，我们使用 Vite 版本 4.4。您也可以使用最新版本，但那时您需要检查 Vite 文档中的更改。
- en: 'Name your project `carfront`, and select the **React** framework and **TypeScript**
    variant:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的项目命名为 `carfront`，并选择 **React** 框架和 **TypeScript** 变体：
- en: '![](img/B19818_12_04.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片 B19818_12_04.png]'
- en: 'Figure 12.4: Frontend project'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 12.4：前端项目]'
- en: 'Move to the project folder and install dependencies by typing the following
    commands:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到项目文件夹，并输入以下命令安装依赖项：
- en: '[PRE2]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Install the MUI component library by typing the following command, which installs
    the Material UI core library and two Emotion libraries. **Emotion** is a library
    designed for writing CSS with JavaScript ([https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction)):'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令安装 MUI 组件库，该命令安装了 Material UI 核心库和两个 Emotion 库。**Emotion** 是一个用于使用 JavaScript
    编写 CSS 的库 ([https://emotion.sh/docs/introduction](https://emotion.sh/docs/introduction))：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also, install React Query v4 and Axios, which we will use for networking in
    our frontend:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，安装 React Query v4 和 Axios，我们将在前端使用它们进行网络操作：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the app by typing the following command in the project’s `root` folder:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的 `root` 文件夹中输入以下命令来运行应用程序：
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open the `src` folder with Visual Studio Code and remove any superfluous code
    from the `App.tsx` file. The file extension is now `.tsx` because we are using
    TypeScript. Also, remove the `App.css` style sheet file import. We will use the
    MUI `AppBar` component in the `App.tsx` file to create the toolbar for our app.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Code 打开 `src` 文件夹，并从 `App.tsx` 文件中删除任何多余的代码。由于我们正在使用 TypeScript，文件扩展名现在是
    `.tsx`。此外，删除 `App.css` 样式表文件导入。我们将在 `App.tsx` 文件中使用 MUI 的 `AppBar` 组件来创建应用程序的工具栏。
- en: We have already looked at the MUI `AppBar` in *Chapter 11*, *Useful Third-Party
    Components for React*, if you would like a reminder.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您想回顾，我们已经在 *第 11 章*，*React 的有用第三方组件* 中查看过 MUI 的 `AppBar`。
- en: 'As shown in the code below, wrap the `AppBar` component inside the MUI `Container`
    component, which is a basic layout component that centers your app content horizontally.
    We can use the `position` prop to define the positioning behavior of the app bar.
    The value `static` means that the app bar is not fixed to the top when the user
    scrolls. If you use `position=` `"``fixed``"`, it will fix the app bar at the
    top of the page. You also have to import all the MUI components that we are using:'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如下代码所示，将 `AppBar` 组件包裹在 MUI 的 `Container` 组件内部，这是一个基本的布局组件，它水平居中你的应用内容。我们可以使用
    `position` 属性来定义应用栏的定位行为。值 `static` 表示当用户滚动时，应用栏不会固定在顶部。如果你使用 `position="fixed"`，则将应用栏固定在页面顶部。你还需要导入我们使用的所有
    MUI 组件：
- en: '[PRE6]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `maxWidth` prop defines the maximum width of our app, and we have used the
    largest value. We have also used the MUI `CssBaseline` component, which is used
    to fix inconsistencies across browsers, ensuring that the React app’s appearance
    is uniform across different browsers. It is typically included at the top level
    of your application to ensure that its styles are applied globally.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`maxWidth` 属性定义了我们的应用的最大宽度，我们使用了最大值。我们还使用了 MUI 的 `CssBaseline` 组件，该组件用于解决跨浏览器的不一致性，确保
    React 应用的外观在不同浏览器中保持一致。通常，它被包含在应用的最顶层，以确保其样式全局应用。'
- en: 'We will remove all predefined styling. Therefore, remove the `index.css` style
    sheet import from the `main.tsx` file. The code should look like the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将移除所有预定义的样式。因此，从 `main.tsx` 文件中移除 `index.css` 样式表导入。代码应如下所示：
- en: '[PRE7]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, your frontend starting point should look like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的前端起点应如下所示：
- en: '![](img/B19818_12_05.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_12_05.png)'
- en: 'Figure 12.5: Car Shop'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5：汽车商店
- en: We have now created the React project for our frontend and can continue with
    further development.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为前端创建了 React 项目，可以继续进行进一步的开发。
- en: Summary
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started the development of our frontend using the backend
    that we created in *Chapter 5*, *Securing Your Backend*. We defined the functionalities
    of the frontend and created a mock-up of the UI. We started frontend development
    with an unsecured version of the backend and, therefore, made some modifications
    to our Spring Security configuration class. We also created the React app that
    we will use during development.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用在 *第 5 章*，*保护你的后端* 中创建的后端开始了我们的前端开发。我们定义了前端的功能，并创建了 UI 的原型。我们以后端的不安全版本开始前端开发，因此对我们的
    Spring Security 配置类进行了一些修改。我们还创建了我们在开发过程中将使用的 React 应用。
- en: In the next chapter, we will add **create**, **read**, **update**, and **delete**
    (**CRUD**) functionalities to our frontend.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向我们的前端添加 **创建**、**读取**、**更新** 和 **删除** （**CRUD**） 功能。
- en: Questions
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why should you do a mock-up of the UI?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么你应该对 UI 进行原型设计？
- en: How do you disable Spring Security from the backend?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何从后端禁用 Spring Security？
- en: Further reading
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'There are many other good resources available for learning about UI design
    and MUI. A few are listed here:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 对于学习 UI 设计和 MUI，有许多其他优秀的资源可用。这里列出了一些：
- en: '*Don’t Make Me Think, Revisited: A Common Sense Approach to Web Usability (3rd
    Edition)*, by Steve Krug ([https://sensible.com/dont-make-me-think/](https://sensible.com/dont-make-me-think/))'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《别让我思考（第三版）：网络可用性的常识方法》*，作者 Steve Krug ([https://sensible.com/dont-make-me-think/](https://sensible.com/dont-make-me-think/))'
- en: MUI blog – the latest about MUI ([https://mui.com/blog/](https://mui.com/blog/))
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MUI 博客——关于 MUI 的最新信息 ([https://mui.com/blog/](https://mui.com/blog/))
- en: Material UI GitHub repository ([https://github.com/mui/material-ui](https://github.com/mui/material-ui))
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Material UI GitHub 仓库 ([https://github.com/mui/material-ui](https://github.com/mui/material-ui))
- en: Learn more on Discord
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在那里你可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
