["```java\n$ export JAVA_HOME=/home/developer/jdk1.8.0_144\n$ export MAVEN_HOME=/home/developer/apache-maven-3.5.0\n```", "```java\n# On Linux\n$ export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH\n\n# On Windows\n$ set Path=%JAVA_HOME%\\bin;%MAVEN_HOME%\\bin;%Path%\n```", "```java\n$ mvn -version\nMaven home: /home/developer/apache-maven-3.5.0\nJava version: 1.8.0_144, vendor: Oracle Corporation\nJava home: /home/developer/jdk1.8.0_144/jre\nDefault locale: fr_FR, platform encoding: UTF-8\nOS name: \"linux\", version: \"4.10.0-32-generic\", arch: \"amd64\", family: \"unix\"\n```", "```java\nsudo apt install mysql-server\n```", "```java\n<dependency>\n  <groupId>javax</groupId>\n  <artifactId>javaee-api</artifactId>\n  <version>${javaee-api.version}</version> <!-- 8.0 -->\n  <scope>provided</scope>\n</dependency>\n```", "```java\n<packaging>war</packaging>\n```", "```java\n<plugin>\n  <groupId>org.apache.maven.plugins</groupId>\n  <artifactId>maven-compiler-plugin</artifactId>\n  <version>3.6.1</version>\n  <configuration>\n    <source>1.8</source>\n    <target>1.8</target>\n  </configuration>\n</plugin>\n\n```", "```java\n<persistence xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\"\n             xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n             xsi:schemaLocation=\"\n             http://xmlns.jcp.org/xml/ns/persistence\n              http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd\"\n             version=\"2.2\">\n  <persistence-unit name=\"quote\">\n    <class>com.github.rmannibucau.quote.manager.model.Customer</class>\n    <class>com.github.rmannibucau.quote.manager.model.Quote</class>\n    <exclude-unlisted-classes>true</exclude-unlisted-classes>\n    <properties>\n      <property name=\"avax.persistence.schema\n      -generation.database.action\" value=\"create\"/>\n    </properties>\n  </persistence-unit>\n</persistence>\n```", "```java\n@Entity\npublic class Quote {\n    @Id\n    @GeneratedValue\n    private long id;\n\n    private String name;\n\n    private double value;\n\n    @ManyToMany\n    private Set<Customer> customers;\n\n    // getters/setters\n}\n```", "```java\n@Entity\npublic class Customer {\n    @Id\n    @GeneratedValue\n    private long id;\n\n    private String name;\n\n    @ManyToMany(mappedBy = \"customers\")\n    private Set<Quote> quotes;\n\n    // getters/setters\n}\n```", "```java\n@Transactional\n@ApplicationScoped\npublic class QuoteService {\n    @PersistenceContext\n    private EntityManager entityManager;\n\n    public Optional<Quote> findByName(final String name) {\n        return entityManager.createQuery(\"select q from Quote q where\n        q.name = :name\", Quote.class)\n                .setParameter(\"name\", name)\n                .getResultStream()\n                .findFirst();\n    }\n\n    public Optional<Quote> findById(final long id) {\n        return Optional.ofNullable(entityManager.find(Quote.class, id));\n    }\n\n    public long countAll() {\n        return entityManager.createQuery(\"select count(q) from Quote\n        q\", Number.class)\n                .getSingleResult()\n                .longValue();\n    }\n\n    public Quote create(final Quote newQuote) {\n        entityManager.persist(newQuote);\n        entityManager.flush();\n        return newQuote;\n    }\n\n    // ... other methods based on the same model\n}\n```", "```java\nfinal int quoteCount = getCustomer().getCountFor(\"myquote\");\nfinal double quotesPrice = quoteService.findByName(\"myquote\")\n    .map(quote -> quote.getValue() * quoteCount)\n    .orElse(0);\n```", "```java\n@JsonbPropertyOrder({\"id\", \"name\", \"customerCount\"})\npublic class JsonQuote {\n    private long id;\n    private String name;\n    private double value;\n\n    @JsonbProperty(\"customer_count\")\n    private long customerCount;\n\n    // getters/setters\n}\n```", "```java\n@Path(\"quote\")\n@RequestScoped\npublic class QuoteResource {\n    @Inject\n    private QuoteService quoteService;\n\n    @GET\n    @Path(\"{id}\")\n    public JsonQuote findById(@PathParam(\"id\") final long id) {\n        return quoteService.findById(id) // delegation to the business\n        layer\n                .map(quote -> { // the model conversion\n                    final JsonQuote json = new JsonQuote();\n                    json.setId(quote.getId());\n                    json.setName(quote.getName());\n                    json.setValue(quote.getValue());\n\n        json.setCustomerCount(ofNullable(quote.getCustomers())\n        .map(Collection::size).orElse(0));\n                    return json;\n                })\n                .orElseThrow(() -> new\n                WebApplicationException(Response.Status.NO_CONTENT));\n    }\n\n    // other methods\n}\n```", "```java\npublic class ValueRequest {\n    private String name;\n\n    // getter/setter\n}\n```", "```java\npublic static class ValueResponse {\n    private double value;\n    private boolean found;\n\n    // getters/setters\n}\n```", "```java\n@Dependent\npublic class JsonEncoder implements Encoder.TextStream<Object> {\n    @Inject\n    private Jsonb jsonb;\n\n    @Override\n    public void encode(final Object o, final Writer writer) throws EncodeException, IOException {\n        jsonb.toJson(o, writer);\n    }\n\n    // other methods are no-op methods\n}\n```", "```java\n@Dependent\npublic class RequestDecoder implements Decoder.TextStream<ValueRequest> {\n    @Inject\n    private Jsonb jsonb;\n\n    @Override\n    public ValueRequest decode(final Reader reader) throws DecodeException, IOException {\n        return jsonb.fromJson(reader, ValueRequest.class);\n    }\n\n    // other methods are no-op methods\n}\n```", "```java\n@Dependent\n@ServerEndpoint(\n  value = \"/quote\",\n  decoders = RequestDecoder.class,\n  encoders = JsonEncoder.class)\n  public class DirectQuoteSocket {\n  @Inject\n  private QuoteService quoteService;\n\n  @OnMessage\n  public void onMessage(final Session session, final ValueRequest request) {\n    final Optional<Quote> quote = quoteService.findByName(request.getName());\n      final ValueResponse response = new ValueResponse();\n        if (quote.isPresent()) {\n            response.setFound(true);\n            response.setValue(quote.get().getValue()); // false\n        }\n\n        if (session.isOpen()) {\n            try {\n                session.getBasicRemote().sendObject(response);\n                } \n                catch (final EncodeException | IOException e) {\n                throw new IllegalArgumentException(e);\n            }\n        }\n    }\n}\n```", "```java\nprivate String[] getSymbols(final Client client) {\n    try (final BufferedReader stream = new BufferedReader(\n            new InputStreamReader(\n                    client.target(symbolIndex)\n                            .request(APPLICATION_OCTET_STREAM_TYPE)\n                            .get(InputStream.class),\n                    StandardCharsets.UTF_8))) {\n\n        return stream.lines().skip(2/*comment+header*/)\n                .map(line -> line.split(\",\"))\n                .filter(columns -> columns.length > 2 && !columns[1].isEmpty())\n                .map(columns -> columns[1])\n                .toArray(String[]::new);\n    } catch (final IOException e) {\n        throw new IllegalArgumentException(\"Can't connect to find symbols\", e);\n    }\n}\n```", "```java\ntry {\n    final Data data = client.target(financialData)\n            .resolveTemplate(\"symbol\", symbol)\n            .request(APPLICATION_JSON_TYPE)\n            .get(Data.class);\n\n    if (!data.hasPrice()) {\n        LOGGER.warning(\"Can't retrieve '\" + symbol + \"'\");\n        return;\n    }\n\n    final double value = data.getQuoteSummary().getResult().get(0)\n        .getFinancialData().getCurrentPrice().getRaw();\n\n    final Quote quote = quoteService.mutate(symbol, quoteOrEmpty ->\n            quoteOrEmpty.map(q -> {\n                q.setValue(value);\n                return q;\n            }).orElseGet(() -> {\n                final Quote newQuote = new Quote();\n                newQuote.setName(symbol);\n                newQuote.setValue(value);\n                quoteService.create(newQuote);\n                return newQuote;\n            }));\n\n    LOGGER.info(\"Updated quote '\" + quote.getName() + \"'\");\n} catch (final WebApplicationException error) {\n    LOGGER.info(\"Error getting '\" + symbol + \"': \" + error.getMessage()\n    + \" (HTTP \" + (error.getResponse() == null ? \"-\" :\n    error.getResponse().getStatus()) + \")\");\n}\n```", "```java\n@ApplicationScoped\npublic class InitialProvisioning {\n    @Inject\n    private ProvisioningService provisioningService;\n\n    public void onStart(@Observes @Initialized(ApplicationScoped.class) final ServletContext context) {\n        provisioningService.refresh();\n    }\n}\n```", "```java\n@Singleton\n@Lock(WRITE)\npublic class DataRefresher {\n    @Inject\n    private ProvisioningService provisioningService;\n\n    @Schedule(hour = \"*\", persistent = false, info = \"refresh-quotes\")\n    public void refresh() {\n        provisioningService.refresh();\n    }\n}\n```", "```java\n<pluginRepository>\n  <id>maven-java-net</id>\n  <url>https://maven.java.net/content/groups/promoted/</url>\n</pluginRepository>\n```", "```java\n<plugin> <!-- glassfish.version = 5.0 -->\n  <groupId>org.glassfish.embedded</groupId>\n  <artifactId>maven-embedded-glassfish-plugin</artifactId>\n  <version>3.1.2.2</version>\n  <configuration>\n    <app>target/${project.build.finalName}</app>\n    <port>9090</port>\n    <contextRoot>${project.artifactId}</contextRoot>\n  </configuration>\n  <dependencies>\n    <dependency>\n      <groupId>org.glassfish.main.common</groupId>\n      <artifactId>simple-glassfish-api</artifactId>\n      <version>${glassfish.version}</version>\n    </dependency>\n    <dependency>\n      <groupId>org.glassfish.main.extras</groupId>\n      <artifactId>glassfish-embedded-all</artifactId>\n      <version>${glassfish.version}</version>\n    </dependency>\n  </dependencies>\n</plugin>\n```", "```java\n$ mvn package embedded-glassfish:run\n```", "```java\n$ curl -v http://localhost:9090/quote-manager/api/quote/8\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9090 (#0)\n> GET /quote-manager/api/quote/8 HTTP/1.1\n> Host: localhost:9090\n> User-Agent: curl/7.52.1\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Server: Undefined Product Name - define product and version info in config/branding 0.0.0 \n< X-Powered-By: Servlet/3.1 JSP/2.3 (Undefined Product Name - define product and version info in config/branding 0.0.0 Java/Oracle Corporation/1.8)\n< Content-Type: application/json\n< Content-Length: 54\n< \n* Curl_http_done: called premature == 0\n* Connection #0 to host localhost left intact\n{\"id\":8,\"name\":\"JOBS\",\"customer_count\":0,\"value\":59.4}\n```", "```java\n$ curl -v http://localhost:9090/quote-manager/api/quote?from=0&to=5\n* Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 9090 (#0)\n> GET /quote-manager/api/quote?from=0 HTTP/1.1\n> Host: localhost:9090\n> User-Agent: curl/7.52.1\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Server: Undefined Product Name - define product and version info in config/branding 0.0.0 \n< X-Powered-By: Servlet/3.1 JSP/2.3 (Undefined Product Name - define product and version info in config/branding 0.0.0 Java/Oracle Corporation/1.8)\n< Content-Type: application/json\n< Content-Length: 575\n< \n{\"total\":10,\"items\":[{\"id\":1,\"name\":\"FLWS\",\"customer_count\":0,\"value\":9.0},{\"id\":2,\"name\":\"VNET\",\"customer_count\":0,\"value\":5.19},{\"id\":3,\"name\":\"XXII\",\"customer_count\":0,\"value\":2.2},{\"id\":4,\"name\":\"TWOU\",\"customer_count\":0,\"value\":50.1},{\"id\":5,\"name\":\"DDD\",\"customer_count\":0,\"value\":12.56},{\"id\":6,\"name\":\"MMM\",\"customer_count\":0,\"value\":204.32},{\"id\":7,\"name\":\"WBAI\",\"customer_count\":0,\"value\":10.34},{\"id\":8,\"name\":\"JOBS\",\"customer_count\":0,\"value\":59.4},{\"id\":9,\"name\":\"WUBA\",\"customer_count\":0,\"value\":62.63},{\"id\":10,\"name\":\"CAFD\",\"customer_count\":0,\"value\":14.42}]}\n```", "```java\nconnect> ws://localhost:9090/quote-manager/quote\nsend> {\"name\":\"VNET\"}\nreceived< {\"found\":true,\"value\":5.19}\nsend> {\"name\":\"DDD\"}\nreceived< {\"found\":true,\"value\":12.56}\ndisconnect>\nConnection closed: Close status 1000 (Normal Closure)\n```", "```java\n$ mysql -u root -p\nEnter password: ******\n...\nmysql> create database quote_manager;\nQuery OK, 1 row affected (0.00 sec)\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE resources PUBLIC \"-//GlassFish.org//DTD GlassFish Application Server 3.1 Resource Definitions//EN\"\n    \"http://glassfish.org/dtds/glassfish-resources_1_5.dtd\">\n<resources>\n  <jdbc-connection-pool allow-non-component-callers=\"false\"\n                        associate-with-thread=\"false\"\n                        connection-creation-retry-attempts=\"0\"\n                        connection-creation-retry-interval-in-seconds=\"10\"\n                        connection-leak-reclaim=\"false\"\n                        connection-leak-timeout-in-seconds=\"0\"\n                        connection-validation-method=\"auto-commit\"\n                        datasource-classname=\"com.mysql.jdbc.jdbc2.optional.MysqlDataSource\"\n                        fail-all-connections=\"false\"\n                        idle-timeout-in-seconds=\"300\"\n                        is-connection-validation-required=\"false\"\n                        is-isolation-level-guaranteed=\"true\"\n                        lazy-connection-association=\"false\"\n                        lazy-connection-enlistment=\"false\"\n                        match-connections=\"false\"\n                        max-connection-usage-count=\"0\"\n                        max-pool-size=\"10\"\n                        max-wait-time-in-millis=\"120000\"\n                        name=\"MySQLConnectinoPool\"\n                        non-transactional-connections=\"false\"\n                        pool-resize-quantity=\"2\"\n                        res-type=\"javax.sql.DataSource\"\n                        statement-timeout-in-seconds=\"-1\"\n                        steady-pool-size=\"8\"\n                        validate-atmost-once-period-in-seconds=\"0\"\n                        validation-table-name=\"DUAL\" wrap-jdbc-objects=\"false\">\n    <property name=\"URL\" value=\"jdbc:mysql://localhost:3306/quote_manager\"/>\n    <property name=\"User\" value=\"root\"/>\n    <property name=\"Password\" value=\"password\"/>\n  </jdbc-connection-pool>\n  <jdbc-resource jndi-name=\"java:app/jdbc/quote_manager\" pool-name=\"MySQLConnectinoPool\" enabled=\"true\"/>\n</resources>\n```", "```java\n@DataSourceDefinition(\n        name = \"java:app/jdbc/quote_manager\",\n        className = \"com.mysql.jdbc.Driver\",\n        url = \"jdbc:mysql://localhost:3306/quote_manager\",\n        user = \"root\",\n        password = \"password\"\n)\npublic class DataSourceConfiguration {\n}\n```", "```java\nmysql> show tables;\n+-------------------------+\n| Tables_in_quote_manager |\n+-------------------------+\n| CUSTOMER                |\n| QUOTE                   |\n| QUOTE_CUSTOMER          |\n| SEQUENCE                |\n+-------------------------+\n```", "```java\nmysql> select * from QUOTE limit 10;\n+----+-------+-------+\n| ID | NAME | VALUE  |\n+----+-------+-------+\n| 1  | FLWS  | 9     |\n| 2  | VNET  | 5.19  |\n| 3  | XXII  | 2.2   |\n| 4  | TWOU  | 50.1  |\n| 5  | DDD   | 12.56 |\n| 6  | MMM   | 204.32|\n| 7  | WBAI  | 10.34 |\n| 8  | JOBS  | 59.4  |\n| 9  | WUBA  | 62.63 |\n| 10 | CAFD  | 14.42 |\n+----+-------+-------+\n```"]