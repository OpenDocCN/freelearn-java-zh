["```java\ngu install espresso\n```", "```java\npublic class HelloEspresso {\n    public static void main(String[] args) {\n        System.out.println(\"Hello Welcome to Espresso!!!\");\n    }\n}\n```", "```java\njavac HelloEspresso.java\n```", "```java\njava -truffle HelloEspresso\nHello Welcome to Espresso!!!\n```", "```java\nsudo gu install -L espresso-installable-svm-svmee-java11-darwin-amd64-21.0.0.2.jar\n```", "```java\nsudo gu rebuild-images libpolyglot -cp ${GRAALVM_HOME}/lib/graalvm/lib-espresso.jar\n```", "```java\nimport com.oracle.truffle.espresso.polyglot.Polyglot;\npublic class EspressoPolyglot {\n    public static void main(String[] args) {\n        try {\n            Object hello = Polyglot.eval(\"js\",                \"print('Hello from JS on Espresso');\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\njavac -cp ${GRAALVM_HOME}/languages/java/lib/polyglot.jar  EspressoPolyglot.java\n```", "```java\njava -truffle --polyglot EspressoPolyglot\n[To redirect Truffle log output to a file use one of the following options:\n* '--log.file=<path>' if the option is passed using a guest language launcher.\n* '-Dpolyglot.log.file=<path>' if the option is passed using the host Java launcher.\n* Configure logging using the polyglot embedding API.]\nHello from JS on Espresso\n```", "```java\nimport com.oracle.truffle.espresso.polyglot.Polyglot;\nimport com.oracle.truffle.espresso.polyglot.Interop;\n```", "```java\npublic class EspressoPolyglotCast {\n    public static void main(String[] args) {\n        try {\n            Object stringObject = Polyglot.eval(\"js\",                \"'This is a JavaScript String'\");\n            Object integerObject = Polyglot.eval(\"js\",                \"1000\");\n            Object doubleObject = Polyglot.eval(\"js\",                \"10.12345\");\n            Object arrayObject = Polyglot.eval(\"js\",                \"[1234, 10.2233, 'String element',400,500,                    'Another Sttring element']\");\n            Object booleanObject = Polyglot.eval(\"js\",                 \"10 > 5\");\n```", "```java\n            String localStringObject =                Polyglot.cast(String.class, stringObject);\n            Integer localIntegerObject =                Polyglot.cast(Integer.class, integerObject);\n            Double localDoubleObject =                Polyglot.cast(Double.class, doubleObject);\n            Boolean localBooleanObject =                Polyglot.cast(Boolean.class, booleanObject);\n            System.out.println(\"\\nString Object : \"                + localStringObject                     + \", \\nInteger : \" + localIntegerObject                     + \", \\nDouble : \" + localDoubleObject                     + \", \\nBoolean : \" + localBooleanObject); \n```", "```java\n            long sizeOfArray =                Interop.getArraySize(arrayObject);\n            System.out.println(            \"\\n Array of objects with Size : \" + sizeOfArray );\n            for (int i=0; i<sizeOfArray; i++) {\n                Object currentElement =                    Interop.readArrayElement\n                    (arrayObject, i);\n                if (Interop.fitsInInt(currentElement)) {\n                    System.out.println(\"Integer Element: \"                       +Interop.asInt(currentElement));\n                }\n                if (Interop.fitsInDouble(currentElement)) {\n                    System.out.println(\"Double Element: \"                        + Interop.asDouble(currentElement));\n                }\n                if (Interop.isString(currentElement)) {\n                    System.out.println(\"String Element: \"                        + Interop.asString(currentElement));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```", "```java\njavac -cp ${GRAALVM_HOME}/languages/java/lib/polyglot.jar  EspressoPolyglotCast.java \nespresso git:(main) java -truffle --polyglot EspressoPolyglotCast                                        \nString Object : This is a JavaScript String, \nInteger : 1000, \nDouble : 10.12345, \nBoolean : true\nArray of objects with Size : 6\nInteger Element: 1234\nDouble Element: 1234.0\nDouble Element: 10.2233\nString Element: String element\nInteger Element: 400\nDouble Element: 400.0\nInteger Element: 500\nDouble Element: 500.0\nString Element: Another String element\n```", "```java\ngu install python\n```", "```java\nprint(\"Hello Graal Python\")\n```", "```java\ngraalpython HelloGraalPython.py\n```", "```java\ngraalpython HelloGraalPython.py \nHello Graal Python\n```", "```java\ngraalpython -m venv <name-of-virtual-env>\n```", "```java\ngraalpython -m ginstall install numpy\n```", "```java\npublic class FibonacciCalculator{\n    public int[] findFibonacci(int count) {\n        int fib1 = 0;\n        int fib2 = 1;\n        int currentFib, index;\n        int [] fibNumbersArray = new int[count];\n        for(index=2; index < count; ++index ) {\n            currentFib = fib1 + fib2;\n            fib1 = fib2;\n            fib2 = currentFib;\n            fibNumbersArray[index - 1] = currentFib;\n        }\n        return fibNumbersArray;\n    }\n    public static void main(String args[]) {    \n        FibonacciCalculator fibCal =             new FibonacciCalculator();\n        int[] fibs = fibCal.findFibonacci(10);\n    }\n}\n```", "```java\nimport java\nimport time\nfib = java.type(\"FibonacciCalculator\")()\nresult = fib.findFibonacci(10)\nprint(\"Fibonacci number \")\nfor num in result:\n    print(num)\n```", "```java\njavac FibonacciCalculator.java\ngraalpython --jvm --vm.cp=. FibCal.py\nFibonacci number \n0\n1\n2\n3\n5\n8\n13\n21\n34\n```", "```java\nimport site\nimport numpy as np\nimport polyglot as poly\ndef heartAnalysis():\n    heartData = np.genfromtxt('heart.csv', delimiter=',')\n    dataOfPeopleWith3ChestPain =         heartData[np.where(heartData[:,2]>2)]\n    averageAgeofPeopleWith3ChestPain =        np.average(dataOfPeopleWith3ChestPain[:,0])\n    # Average age of people who are getting level 3 and     greater chest pain\n    return averageAgeofPeopleWith3ChestPain\npoly.export_value(\"hearAnalysis\", heartAnalysis)\n```", "```java\npublic class NumPyJavaExample {\n    public void callPythonMethods() {\n        Context ctx =\n        Context.newBuilder().allowAllAccess(true).build();\n        try {\n            File fibCal = new File(\"./numpy-example.py\");\n            ctx.eval(Source.newBuilder(\"python\",                fibCal).build());\n            Value hearAnalysisFn =                ctx.getBindings(\"python\")                    .getMember(\"heartAnalysis\");\n            Value heartAnalysisReport =                hearAnalysisFn.execute();\n            System.out.println(                \"Average age of people who are getting level 3                     and greater chest pain :\" +                        heartAnalysisReport.toString());\n        }   catch (Exception e) {\n            System.out.println(\"Exception : \" );\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        NumPyJavaExample obj = new NumPyJavaExample();\n        obj.callPythonMethods();\n    }\n}\n```", "```java\n$ java NumPyJavaExample\nAverage age of people who are getting level 3 and greater chest pain :55.869565217391305\n```", "```java\nfunction callNumPyExmple() {\n    Polyglot.evalFile('python', './numpy-example.py');\n    heartAnalysis = Polyglot.import('heartAnalysis');\n    result = heartAnalysis();\n    return result;\n}\nresult = callNumPyExmple();\nprint ('Average age of people who are getting level 3 and     greater chest pain : '+  String(result));\n```", "```java\n$ js --polyglot numpy-caller.js\nAverage age of people who are getting level 3 and greater chest pain : 55.869565217391305\n```", "```java\nvar helloMathMessage = \" Hello Math.js\";\nfunction square(a) {\n    return a*a;\n}\nPolyglot.export('square', square);\nPolyglot.export('message', helloMathMessage)\n```", "```java\nimport polyglot\npolyglot.eval(path=\"./math.js\", language=\"js\")\nmessage = polyglot.import_value('message')\nsquare = polyglot.import_value('square')\nprint (\"Square numbers by calling JS->Python: \" +     str(square(10, 20)))\nprint (\"Hello message from JS: \" + message)\n```", "```java\n$ graalpython --jvm --polyglot mathUser.py\nSquare numbers by calling JS->Python: 100\nHello messagr from JS:  Hello Math.js  \n```", "```java\ngu install r\n```", "```java\nR\nR version 3.6.1 (FastR)\nCopyright (c) 2013-19, Oracle and/or its affiliates\nCopyright (c) 1995-2018, The R Core Team\nCopyright (c) 2018 The R Foundation for Statistical Computing\nCopyright (c) 2012-4 Purdue University\nCopyright (c) 1997-2002, Makoto Matsumoto and Takuji Nishimura\nAll rights reserved.\nFastR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\nR is a collaborative project with many contributors.\nType 'contributors()' for more information.\nType 'q()' to quit R.\n[Previously saved workspace restored]\n```", "```java\n> 1+1\n[1] 2\n> abs(-200)\n[1] 200\n```", "```java\n> example (plot)\nplot> require(stats) # for lowess, rpois, rnorm\nplot> plot(cars)\nplot> lines(lowess(cars))\nNULL\nplot> plot(sin, -pi, 2*pi) # see ?plot.function\nNULL\nplot> ## Discrete Distribution Plot:\nplot> plot(table(rpois(100, 5)), type = \"h\", col = \"red\", lwd = 10,\nplot+      main = \"rpois(100, lambda = 5)\")\nNULL\nplot> ## Simple quantiles/ECDF, see ecdf() {library(stats)} for a better one:\nplot> plot(x <- sort(rnorm(47)), type = \"s\", main = \"plot(x, type = \\\"s\\\")\")\nplot> points(x, cex = .5, col = \"dark red\")\n```", "```java\nNULL\nWarning messages:\n1: In lines.default(lowess(cars)) :\n  lines.default not supported. Note: FastR does not support graphics package and most of its functions. Please use grid package or grid based packages like lattice instead.\n2: In plot.function(sin, -pi, 2 * pi) :\n  plot.function not supported. Note: FastR does not support graphics package and most of its functions. Please use grid package or grid based packages like lattice instead.\n3: In axis(...) :\n  axis not supported. Note: FastR does not support graphics package and most of its functions. Please use grid package or grid based packages like lattice instead.\n4: In points.default(x, cex = 0.5, col = \"dark red\") :\n  points.default not supported. Note: FastR does not support graphics package and most of its functions. Please use grid package or grid based packages like lattice instead.\n>\n```", "```java\nR --polyglot\n```", "```java\nR version 3.6.1 (FastR)\nCopyright (c) 2013-19, Oracle and/or its affiliates\nCopyright (c) 1995-2018, The R Core Team\nCopyright (c) 2018 The R Foundation for Statistical Computing\nCopyright (c) 2012-4 Purdue University\nCopyright (c) 1997-2002, Makoto Matsumoto and Takuji Nishimura\nAll rights reserved.\nFastR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\nR is a collaborative project with many contributors.\nType 'contributors()' for more information.\nType 'q()' to quit R.\n[Previously saved workspace restored]\n> \n```", "```java\n> x <- eval.polyglot('js','[100,200,300,400]')\n> print(x)\n[polyglot value]\n[1] 100 200 300 400\n> print(x[3])\n[1] 300\n```", "```java\nvar helloMathMessage = \" Hello Math.js\";\nfunction add(a, b) {\n    print(\"message from js: add() called\");\n    return a+b;\n}\nfunction subtract(a, b) {\n    print(\"message from js: subtract() called\");\n    return a-b;\n}\nfunction multiply(a, b) {\n    print(\"message from js: multiply() called\");\n    return a*b;\n}\nPolyglot.export('add', add);\nPolyglot.export('subtract', subtract);\nPolyglot.export('multiply', multiply);\nPolyglot.export('message', helloMathMessage)\n```", "```java\n> mathjs <- eval.polyglot('js', path='/chapter8/r/math.js')\n```", "```java\n> message <- import('message')\n> add <- import('add')\n> subtract <- import('subtract')\n> multiply <- import('multiply')\n```", "```java\n> add(10,20)\nmessage from js: add() called\n[1] 30\n> subtract(30,20)\nmessage from js: subtract() called\n[1] 10\n> multiply(10,40)\nmessage from js: multiply() called\n[1] 400\n> print(message)\n[1] \" Hello Math.js\"\n>\n```", "```java\nimport org.graalvm.polyglot.Context;\nimport org.graalvm.polyglot.Value;\npublic class HelloRPolyglot {\n    public String hello(String name) {\n        System.out.println(\"Hello Welcome from hello\");\n        return \"Hello Welcome from hello \" + name;\n    }\n    public static void helloStatic() {\n        System.out.println(\"Hello from Static hello()\");\n        try {\n            Context polyglot = Context.create();\n            Value array = polyglot.eval(\"js\",                 \"print('Hello from JS inline in HelloRPolyglot                     class')\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n    public static void main(String[] args) {\n        HelloRPolyglot.helloStatic();\n    }\n}\n```", "```java\njavac HelloRPolyglot.java\njava HelloRPolyglot\nHello Welcome to R Polyglot!!!\nHello from JS inline in HelloRPolyglot class\n```", "```java\nR --jvm --vm.cp=.        \nR version 3.6.1 (FastR)\nCopyright (c) 2013-19, Oracle and/or its affiliates\nCopyright (c) 1995-2018, The R Core Team\nCopyright (c) 2018 The R Foundation for Statistical Computing\nCopyright (c) 2012-4 Purdue University\nCopyright (c) 1997-2002, Makoto Matsumoto and Takuji Nishimura\nAll rights reserved.\nFastR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\nR is a collaborative project with many contributors.\nType 'contributors()' for more information.\nType 'q()' to quit R.\n[Previously saved workspace restored]\n>\n```", "```java\n> class <- java.type('HelloRPolyglot')\n> print(class)\n[polyglot value]\n$main\n[polyglot value]\n$helloStatic\n[polyglot value]\n$class\n[polyglot value]\n```", "```java\n> object <- new(class)\n> print(object)\n[polyglot value]\n$main\n[polyglot value]\n$helloStatic\n[polyglot value]\n$class\n[polyglot value]\n$hello\n[polyglot value]\n```", "```java\n> class$helloStatic()\nHello from Static heloo()\nHello from JS inline in HelloRPolyglot class\nNULL\n> object$hello('FastR')\nHello Welcome from hello\n[1] \"Hello Welcome from hello FastR\"\n>\n```", "```java\n$ npm init\nThis utility will walk you through creating a package.json file.\nIt only covers the most common items, and tries to guess sensible defaults.\nSee `npm help init` for definitive documentation on these fields and exactly what they do.\nUse `npm install <pkg>` afterwards to install a package and save it as a dependency in the package.json file.\nPress ^C at any time to quit.\npackage name: (plotwithr-node)\nversion: (1.0.0)\ndescription:\nentry point: (plotWithR.js)\ntest command:\ngit repository:\nkeywords:\nauthor:\nlicense: (ISC)\nAbout to write to /Users/vijaykumarab/AB-Home/Developer/GraalVM-book/Code/chapter8/r/plotWithR-node/package.json:\n{\n  \"name\": \"plotwithr-node\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"plotWithR.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\nIs this OK? (yes)\n```", "```java\n$ npm install express --save\nadded 50 packages, and audited 51 packages in 2s\nfound 0 vulnerabilities\n```", "```java\nconst express = require('express')\nconst app = express()\napp.get('/plot', function (req, res) {\n  var text = \"\"\n  text += Polyglot.eval('R',\n    `svg();\n     require(lattice);\n     data <- read.csv(\"heart.csv\", header = TRUE)\n     print(barchart(data$age~data$chol,           main=\"Age vs Cholestral levels\"))\n     grDevices:::svg.off()\n    `);\n  res.send(text)\n})\napp.listen(3000, function () {\n  console.log('Plot with R -  listening on port 3000!')\n})\n```", "```java\nnode --jvm --polyglot plotWithR.js\nPlot with R - listening on port 3000!\nLoading required package: lattice\n```"]