- en: Debugging the JEE Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试 JEE 应用程序
- en: In the previous chapter, we learned how to write and run unit tests for Java
    applications using Eclipse and JUnit. In this chapter, we are going to learn how
    to use Eclipse to debug JEE applications. Debugging is an unavoidable part of
    application development. Unless the application is very simple, the chances are
    that it is not going to work as expected on the very first attempt and you will
    spend some time trying to find out the reasons why. In very complex applications,
    application developers may end up spending more time debugging than writing application
    code. Problems may not necessarily exist in your code, but may exist in the external
    system that your application depends on. Debugging a complex piece of software
    requires skill, which can be developed with experience. However, it also needs
    good support from the application runtime and IDE.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用 Eclipse 和 JUnit 为 Java 应用程序编写和运行单元测试。在本章中，我们将学习如何使用 Eclipse
    调试 JEE 应用程序。调试是应用程序开发中不可避免的一部分。除非应用程序非常简单，否则它可能不会在第一次尝试时就按预期工作，你将花费一些时间来找出原因。在非常复杂的应用程序中，应用程序开发者可能最终会花费比编写应用程序代码更多的时间来调试。问题可能不一定存在于你的代码中，但可能存在于你的应用程序所依赖的外部系统中。调试复杂软件需要技能，这些技能可以通过经验来培养。然而，这也需要应用程序运行时和
    IDE 的良好支持。
- en: There are different ways to debug an application. You may just put `System.out.println()`
    statements in your code and print values of the variables, or just a message stating
    that execution of the application has reached a certain point. If the application
    is small or simple, this may work, but this may not be a good idea when debugging
    large and complex applications. You also need to remember to remove such debug
    statements before moving the code to staging or production. If you have written
    unit tests and if some of the unit tests fail, then that may give you some idea
    about the problems in your code. However, in many cases, you may want to monitor
    the execution of code at line level or function level and check the values of
    the variables at that line or in that function. This requires support from the
    language runtime and a good IDE that helps you visualize and control the debugging
    process. Fortunately, Java has an excellent debugger, and Eclipse JEE provides
    great support for debugging Java code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 调试应用程序有不同的方法。你可以在代码中添加 `System.out.println()` 语句并打印变量的值，或者只是打印一条消息，说明应用程序的执行已达到某个点。如果应用程序很小或简单，这可能有效，但在调试大型和复杂的应用程序时，这可能不是一个好主意。你还需要记住在将代码移动到预发布或生产环境之前删除这些调试语句。如果你编写了单元测试，并且其中一些单元测试失败，那么这可能给你一些关于代码中问题的线索。然而，在许多情况下，你可能希望监控代码的行级或函数级执行，并检查该行或该函数中的变量值。这需要语言运行时的支持和一款能够帮助你可视化和控制调试过程的良好
    IDE。幸运的是，Java 拥有出色的调试器，Eclipse JEE 为调试 Java 代码提供了极大的支持。
- en: In this chapter, we are going to learn how to debug JEE applications using Eclipse
    JEE. We will use the same *Course Management* application that we built in [Chapter
    4](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Creating JEE Database
    Applications*, for debugging. The debugging technique described in this chapter
    can be applied to remotely debug any Java application, and is not necessarily
    restricted to the JEE applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将学习如何使用 Eclipse JEE 调试 JEE 应用程序。我们将使用我们在[第 4 章](part0073.html#25JP20-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，“创建
    JEE 数据库应用程序”中构建的相同的 *课程管理* 应用程序进行调试。本章中描述的调试技术可以应用于远程调试任何 Java 应用程序，并不一定仅限于 JEE
    应用程序。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up Eclipse to debug JEE applications remotely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Eclipse 配置为远程调试 JEE 应用程序
- en: Understanding how to perform different different debugging actions, such as
    setting breakpoints, inspecting variables and expressions, and stepping through
    the code
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何执行不同的调试操作，例如设置断点、检查变量和表达式，以及逐步执行代码
- en: Connecting the debugger from Eclipse to an externally running JEE application
    server
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Eclipse 的调试器连接到外部运行的 JEE 应用程序服务器
- en: Debugging a remote Java application
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试远程 Java 应用程序
- en: 'You may have debugged standalone Java applications from Eclipse. You set breakpoints
    in the code, run the application in the Debug mode from Eclipse, and then debug
    the application by stepping through the code. Debugging remote Java applications
    is a bit different, particularly when it comes to how you launch the debugger.
    In the case of local application, the debugger launches the application. In the
    case of remote application, it is already launched and you need to connect the
    debugger to it. In general, if you want to allow remote debugging for the application,
    you need to run the application using the following parameters:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经从 Eclipse 调试过独立的 Java 应用程序。你在代码中设置断点，从 Eclipse 以调试模式运行应用程序，然后通过单步执行代码来调试应用程序。调试远程
    Java 应用程序略有不同，尤其是在如何启动调试器方面。在本地应用程序的情况下，调试器启动应用程序。在远程应用程序的情况下，它已经启动，你需要将调试器连接到它。一般来说，如果你想允许应用程序进行远程调试，你需要使用以下参数运行应用程序：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`Xdebug` enables debugging'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xdebug` 启用调试'
- en: '`Xrunjdwp` runs the debugger implementation of the **Java Debug Wire Protocol**
    (**JDWP**)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Xrunjdwp` 运行 Java 调试线协议（JDWP）的调试实现'
- en: 'Instead of `-Xdebug -Xrunjdwp`, you can also use `-agentlib:jdwp` for JDK 1.5
    and above, for example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `-Xdebug -Xrunjdwp`，你也可以为 JDK 1.5 及以上版本使用 `-agentlib:jdwp`，例如：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s understand the parameters used here in detail:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下这里使用的参数：
- en: '`transport=dt_socket`: This starts a socket server at `address=9001` (this
    can be any free port) to receive debugger commands and send responses.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`transport=dt_socket`: 这将在`address=9001`（这可以是任何空闲端口）启动一个套接字服务器，以接收调试命令并发送响应。'
- en: '`server=y`: This tells the JVM if the application is a server or a client,
    in the context of debugger communication. Use the `y` value for remote applications.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server=y`: 这告诉 JVM 在调试通信的上下文中，应用程序是服务器还是客户端。对于远程应用程序，使用 `y` 值。'
- en: '`suspend=n`: This tells the JVM to not wait for the debugger client to attach
    to it. If the value is `y`, then the JVM will wait before executing the main class
    until a debugger client attaches to it. Setting the `y` value for this option
    may be useful in cases where you want to debug, for example, the initialization
    code of servlets that are loaded upon startup of the web container. In such cases,
    if you do not choose to suspend the application till the debugger connects to
    it, the code that you want to debug may get executed before the debugger client
    attaches to it.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`suspend=n`: 这告诉 JVM 不要等待调试客户端连接到它。如果值为 `y`，则 JVM 将在执行主类之前等待，直到调试客户端连接到它。为该选项设置
    `y` 值可能在你想调试，例如，在 Web 容器启动时加载的 servlet 的初始化代码的情况下很有用。在这种情况下，如果你不选择在调试器连接到它之前挂起应用程序，你想要调试的代码可能会在调试器客户端连接到它之前执行。'
- en: Debugging a web application using Tomcat in Eclipse EE
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Eclipse EE 中的 Tomcat 调试 Web 应用程序
- en: We have already learned how to configure Tomcat in Eclipse EE and deploy web
    applications in it from Eclipse (refer to the *Configuring Tomcat in Eclipse*
    and *Running JSP in Tomcat* sections in [Chapter 2](part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating a Simple JEE Web Application*). We will use the *Course Management*
    application that we created in [Chapter 4](part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55),
    *Creating JEE Database Applications* (JDBC version), for debugging.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了如何在 Eclipse EE 中配置 Tomcat 并从 Eclipse 中部署 Web 应用程序（请参阅第 2 章[part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55]中的“配置
    Tomcat 在 Eclipse”和“在 Tomcat 中运行 JSP”部分，以及第 4 章[part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55]中的“创建简单的
    JEE Web 应用程序”）。我们将使用我们在第 4 章[part0037.html#1394Q0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55]中创建的“课程管理”应用程序（JDBC
    版本）进行调试。
- en: Starting Tomcat in Debug mode
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以调试模式启动 Tomcat
- en: 'If you want to debug a remote Java process, you need to start the process using
    debug parameters. However, if you have configured Tomcat in Eclipse EE, you don''t
    need to do this manually. Eclipse takes care of launching Tomcat in Debug mode.
    To start Tomcat in Debug mode, select the server in the Servers view and click
    the Debug button. Alternatively, right-click on the server and select Debug from
    the menu. Make sure that the project you want to debug is already added to Tomcat;
    in this case, the project is `CourseManagementJDBC`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想调试远程 Java 进程，你需要使用调试参数启动该进程。然而，如果你已经在 Eclipse EE 中配置了 Tomcat，你不需要手动这样做。Eclipse
    会负责以调试模式启动 Tomcat。要启动 Tomcat 以调试模式，请在“服务器视图”中选择服务器并点击“调试”按钮。或者，右键单击服务器并从菜单中选择调试。确保你想要调试的项目已经添加到
    Tomcat 中；在这种情况下，项目是 `CourseManagementJDBC`：
- en: '![](img/00137.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00137.jpeg)'
- en: 'Figure 6.1: Starting Tomcat in Debug mode'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1：以调试模式启动 Tomcat
- en: 'Once Tomcat is started in Debug mode, its status changes to Debugging:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Tomcat以调试模式启动，其状态将变为调试模式：
- en: '![](img/00138.jpeg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00138.jpeg)'
- en: 'Figure 6.2: Tomcat running in Debug mode'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：Tomcat以调试模式运行
- en: Setting breakpoints
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置断点
- en: 'Now, let''s set breakpoints in the code before we launch the `CourseManagement`
    application. Open `CourseDAO` from the `CourseManagementJDBC` project and double-click
    in the left margin of the first line in the `getCourses` method:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在我们启动`CourseManagement`应用程序之前，让我们在代码中设置断点。从`CourseManagementJDBC`项目打开`CourseDAO`，并在`getCourses`方法的第一行左侧边缘双击：
- en: '![](img/00139.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00139.jpeg)'
- en: 'Figure 6.3: Setting a breakpoint'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：设置断点
- en: 'Another way to set a breakpoint at a line is to right-click in the left margin
    and select Toggle Breakpoint:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在行上设置断点的另一种方法是右键单击左侧边缘并选择切换断点：
- en: '![](img/00140.jpeg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00140.jpeg)'
- en: 'Figure 6.4: Toggling breakpoints using the menu'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：使用菜单切换断点
- en: You can also set breakpoints at the method level. Just place the caret inside
    any method, and select the Run | Toggle Method Breakpoint menu. This is equivalent
    to setting the breakpoint at the first line of the method. This is preferred over
    setting a breakpoint at the first line of the method when you always want to stop
    at the beginning of the method. The debugger will always stop at the first statement
    in the method, even if you later insert code at the beginning of the method.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在方法级别设置断点。只需将光标放在任何方法内部，然后选择运行 | 切换方法断点菜单。这相当于在方法的第一行设置断点。当你总是想在方法开始时停止时，这比在方法的第一行设置断点更受欢迎。即使你后来在方法开头插入代码，调试器也会始终在方法的第一条语句处停止。
- en: 'Another useful breakpoint option is to set it when any exception occurs during
    program execution. Often, you may not want to set a breakpoint at a specific location,
    but may want to investigate why an exception is happening. If you do not have
    access to the stack trace of the exception, you can just set a breakpoint for
    the exception and run the program again. Next time, the execution will stop at
    the code location where the exception occurred. This makes it easy to debug exceptions.
    To set a breakpoint for an exception, select Run | Add Java Exception Breakpoint... and
    select the `Exception` class from the list:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的断点选项是在程序执行期间发生任何异常时设置它。通常，你可能不想在特定位置设置断点，但可能想调查异常发生的原因。如果你无法访问异常的堆栈跟踪，你只需为异常设置断点并再次运行程序。下次，执行将在异常发生的代码位置停止。这使得调试异常变得容易。要为异常设置断点，请选择运行
    | 添加Java异常断点...并从列表中选择`Exception`类：
- en: '![](img/00141.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00141.jpeg)'
- en: 'Figure 6.5: Setting a breakpoint at an exception'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：在异常处设置断点
- en: Running the application in Debug mode
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以调试模式运行应用程序
- en: 'Now, let''s run the `listCourse.jsp` page in Debug mode:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以调试模式运行`listCourse.jsp`页面：
- en: 'In Project Navigator, go to `src/main/webapp/listCourse.jsp` and right-click
    on the file. Select Debug As | Debug on Server. Eclipse may prompt you to use
    the existing debug server:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目导航器中，转到`src/main/webapp/listCourse.jsp`，在文件上右键单击。选择调试为 | 服务器调试。Eclipse可能会提示你使用现有的调试服务器：
- en: '![](img/00142.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00142.jpeg)'
- en: 'Figure 6.6: Choosing an existing debug server'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：选择现有的调试服务器
- en: 'Click Finish. Eclipse will ask you if you want to switch to the Debug perspective
    (refer to [Chapter 1](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55), *Introducing
    JEE and Eclipse*, for a discussion on Eclipse perspectives):'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成。Eclipse会询问你是否想要切换到调试视角（有关Eclipse视角的讨论，请参阅[第1章](part0008.html#7K4G0-d43a3a5ee6dd4ebc9d7c7e1cc8d7df55)，*介绍JEE和Eclipse*）：
- en: '![](img/00143.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00143.jpeg)'
- en: 'Figure 6.7: Auto-switching to the Debug perspective'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：自动切换到调试视角
- en: 'Select the Remember my decision option and click the Yes button. Eclipse will
    switch to the Debug perspective. Eclipse will try to open the page in the internal
    Eclipse browser, but it won''t display the page immediately. Recall that `listCourse.jsp`
    calls `Course.getCourses()`, which in turn calls `CourseDAO.getCourses()`. We
    have set a breakpoint in the `CourseDAO.getCourses()` method, so the execution
    of the page stops there:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“记住我的决定”选项并点击“是”按钮。Eclipse将切换到调试视角。Eclipse会尝试在内部Eclipse浏览器中打开页面，但不会立即显示页面。回想一下`listCourse.jsp`调用`Course.getCourses()`，它反过来调用`CourseDAO.getCourses()`。我们在`CourseDAO.getCourses()`方法中设置了断点，因此页面的执行在此处停止：
- en: '![](img/00144.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00144.jpeg)'
- en: 'Figure 6.8: The debugger paused at a breakpoint'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：调试器在断点处暂停
- en: Performing step operations and inspecting variables
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行步骤操作和检查变量
- en: You can now perform different step operations (step over, step in, and step
    out) using the toolbar icons at the top, or using keyboard shortcuts. Open the
    drop-down on the Run menu to learn about the menu and toolbar shortcuts for debugging.
    Typically, you would inspect variables or perform step operations to verify whether
    the execution flow is correct and then continue the execution by clicking the Resume
    button or by using the menu/keyboard shortcut.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用顶部的工具栏图标或使用键盘快捷键执行不同的步骤操作（步骤跳过、步骤进入和步骤退出）。打开运行菜单的下拉菜单，了解调试的菜单和工具栏快捷键。通常，您会检查变量或执行步骤操作以验证执行流程是否正确，然后通过单击“继续”按钮或使用菜单/键盘快捷键继续执行。
- en: In the Debug tab (refer to *Figure 6.8*), you can see all the threads and inspect
    the stack frames of each thread when the debugger is suspended. Stack frames of
    a thread show you the path of a program execution in that thread until the point
    that the debugger was suspended after hitting a breakpoint or due to step operations.
    In a multithreaded application, such as a Tomcat web container, more than one
    thread might have been suspended at a time and each might have different stack
    frames. When debugging a multithreaded application, make sure that you have selected
    the required thread in the Debug tab before selecting options to step over/in/out
    or resume.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试选项卡中（参见图6.8），当调试器暂停时，您可以看到所有线程并检查每个线程的堆栈帧。线程的堆栈帧显示了程序在该线程中的执行路径，直到调试器在遇到断点或由于步骤操作而暂停的点。在多线程应用程序中，例如Tomcat
    Web容器，可能同时暂停多个线程，并且每个线程可能具有不同的堆栈帧。在调试多线程应用程序时，请确保在选择步骤操作/进入/退出或继续选项之前，您已经在调试选项卡中选择了所需的线程。
- en: Often, you step into a method and realize that the values are not what you expect
    and you want to rerun statements in the current method to investigate them. In
    such cases, you can drop to any previous stack frame and start over.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会进入一个方法，发现值不是您预期的，您想重新运行当前方法中的语句来调查它们。在这种情况下，您可以退回到任何之前的堆栈帧并重新开始。
- en: 'For example, let''s say that in the preceding example we step into the `DatabaseConnectionFactory.getConnectionFactory().getConnection`
    method. When we step in, the debugger first steps into the `getConnectionFactory`
    method, and in the next step-in operation, it steps into the `getConnection` method.
    Suppose, when we are in the `getConnection` method that we want to go back and
    check what happened in the `getConnectionFactory` method for something that we
    might have missed earlier (although in this simple example, not much happens in
    the `getConnectionFactory` method; it should just serve as an example). We can
    go back to the `getCourses` method and start over the execution of `getConnectionFactory`
    and `getConnection`. In the Debug tab, right-click on the `CourseDAO.getCourses()`
    stack frame and select Drop to Frame, as shown in the following screenshot:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设在前面的例子中我们进入`DatabaseConnectionFactory.getConnectionFactory().getConnection`方法。当我们进入时，调试器首先进入`getConnectionFactory`方法，然后在下一步进入操作中，它进入`getConnection`方法。假设当我们处于`getConnection`方法中时，我们想返回并检查`getConnectionFactory`方法中可能之前错过的事情（尽管在这个简单的例子中，`getConnectionFactory`方法中并没有发生太多；它应该只作为一个例子）。我们可以返回到`getCourses`方法，并重新开始`getConnectionFactory`和`getConnection`的执行。在调试选项卡中，右键单击`CourseDAO.getCourses()`堆栈帧，并选择“退到帧”，如图所示：
- en: '![](img/00145.jpeg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00145.jpeg)'
- en: Figure 6.9 Drop to Frame
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 退到帧
- en: The debugger discards all the stack frames above the selected frame, and the
    execution drops back to the selected frame; in this case, in the `getCourses`
    method of the `CourseDAO` class. You can then step over again into the `getConnection`
    method. Note that only stack variables and their values are discarded when you
    drop to frame. Any changes made to reference objects that are not on the stack
    are not rolled back.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器丢弃所选帧以上的所有堆栈帧，执行退回到所选帧；在这种情况下，在`CourseDAO`类的`getCourses`方法中。然后您可以再次进入`getConnection`方法。请注意，当您退到帧时，只会丢弃堆栈变量及其值。对不在堆栈上的引用对象所做的任何更改都不会回滚。
- en: Inspecting variable values
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查变量值
- en: 'Now let''s step over a few statements till we are in the `while` loop to create
    course objects from the data returned by the result set. In the top-right window,
    you will find the Variables view, which displays variables applicable at that
    point of execution:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们跳过几个语句，直到进入`while`循环，从结果集返回的数据中创建课程对象。在右上角的窗口中，您将找到变量视图，它显示在执行该点时适用的变量：
- en: '![](img/00146.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00146.jpeg)'
- en: 'Figure 6.10: The debugger paused at breakpoint'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：调试器在断点处暂停
- en: 'You can inspect variables in the previous method calls too by changing the
    selection in the Debug tab: click on any previous method call (stack frame) and
    the Variables view will display variables that are valid for the selected method.
    You can change the value of any variable, including values of the member variables
    of the objects. For example, in *Figure 6.8, *we can change the value of the course
    name from `"Machine Learning"` to `"Machine Learning - Part1"`. To change the
    variable value, right-click on the variable in the Variables view and select Change
    Value:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过更改调试选项卡中的选择来检查上一个方法调用中的变量：点击任何先前的方法调用（堆栈帧），变量视图将显示所选方法的变量。您可以更改任何变量的值，包括对象的成员变量的值。例如，在*图6.8*中，我们可以将课程名称从`"Machine
    Learning"`更改为`"Machine Learning - Part1"`。要更改变量值，请在变量视图中右键单击变量并选择更改值：
- en: '![](img/00147.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00147.jpeg)'
- en: 'Figure 6.11: Changing the variable''s value during debugging'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：在调试过程中更改变量的值
- en: 'You don''t have to go to the Variables view to check a variable''s value every
    time. There is a quick way: just hover the cursor over the variable in the editor
    and Eclipse will pop up a window showing the variable''s value:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您不必每次都去变量视图检查变量的值。有一个快速的方法：只需将光标悬停在编辑器中的变量上，Eclipse就会弹出一个显示变量值的窗口：
- en: '![](img/00148.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/00148.jpeg)'
- en: 'Figure 6.12: Inspecting the variable'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12：检查变量
- en: You can also right-click on a variable and select the Inspect option to see
    the variable's values. However, you cannot change the value when you select the Inspect
    option.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以右键单击变量并选择检查选项来查看变量的值。然而，当您选择检查选项时，无法更改值。
- en: 'If you want to see the value of a variable frequently (for example, a variable
    in a loop), you can add the variable to the watchlist. It is a more convenient
    option than trying to search for the variable in the Variables view. Right-click
    on a variable and select the Watch option from the menu. The Watch option adds
    the variable to the Expressions view (its default location is next to the Breakpoints
    view at the top right) and displays its value:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想经常查看变量的值（例如，循环中的变量），可以将变量添加到监视列表。这是一个比在变量视图中搜索变量更方便的选项。右键单击变量并从菜单中选择监视选项。监视选项将变量添加到表达式视图（其默认位置在右上角的断点视图旁边）并显示其值：
- en: '![](img/00149.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00149.jpeg)'
- en: 'Figure 6.13: Inspecting a variable'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13：检查变量
- en: The use of the Expressions view is not limited to watching variable values.
    You can watch any valid Java expression, such as arithmetic expressions, or even
    method calls. Click on the plus icon in the Expressions view and add an expression.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式视图的使用不仅限于监视变量值。您可以监视任何有效的Java表达式，例如算术表达式，甚至方法调用。在表达式视图中单击加号图标并添加一个表达式。
- en: Debugging an application in an externally configured Tomcat
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在外部配置的Tomcat中调试应用程序
- en: Thus far, we have debugged our application using Tomcat configured within Eclipse.
    When we launched Tomcat in Debug mode, Eclipse took care of adding the JVM parameters
    for debugging to the Tomcat launch script. In this section, we will see how to
    launch an external (to Eclipse) Tomcat instance and connect to it from Eclipse.
    Although we are going to debug a remote instance of Tomcat, information in this
    section can be used for connecting to any remotely running Java program that is
    launched in Debug mode. We have already seen the debug parameters to pass when
    launching a remote application in Debug mode.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用在Eclipse中配置的Tomcat调试我们的应用程序。当我们以调试模式启动Tomcat时，Eclipse负责将调试JVM参数添加到Tomcat启动脚本中。在本节中，我们将了解如何启动一个外部（相对于Eclipse）的Tomcat实例，并从Eclipse连接到它。尽管我们将调试远程Tomcat实例，但本节中的信息也可以用于连接到任何以调试模式启动的远程Java程序。我们已经看到了在调试模式下启动远程应用程序时传递的调试参数。
- en: 'Launching Tomcat externally in Debug mode is not too difficult. Tomcat startup
    scripts already have an option to start the server in Debug mode; you just need
    to pass the appropriate parameters. From the Command Prompt, select the `<TOMCAT_HOME>/bin` folder
    and type the following command in Windows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下外部启动Tomcat并不太难。Tomcat启动脚本已经有一个选项可以以调试模式启动服务器；您只需要传递适当的参数。从命令提示符中，选择`<TOMCAT_HOME>/bin`文件夹，在Windows中输入以下命令：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Launching Tomcat in Debug mode in Mac OSX and Linux:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac OSX和Linux中以调试模式启动Tomcat：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Passing the `jpda` argument sets the default values to all the required debug
    parameters. The default debug port is 8000\. If you want to change it, either
    modify `catalin.bat/catalin.sh` or set the environment variable `JPDA_ADDRESS` as
    follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过传递`jpda`参数，将所有所需的调试参数设置为默认值。默认调试端口是8000。如果您想更改它，可以修改`catalin.bat/catalin.sh`或按以下方式设置环境变量`JPDA_ADDRESS`：
- en: 'Setting `JPDA_ADDRESS` environment variable in Windows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中设置`JPDA_ADDRESS`环境变量：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Setting `JPDA_ADDRESS` environment variable in OSX and Linux:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在OSX和Linux中设置`JPDA_ADDRESS`环境变量：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Similarly, you can set `JPDA_SUSPEND` to `y` or `n` to control whether the debugger
    should wait for the client to connect before executing the `main` class.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以将`JPDA_SUSPEND`设置为`y`或`n`来控制调试器在执行`main`类之前是否应该等待客户端连接。
- en: 'To connect the debugger from Eclipse to a remote instance, select the Run |
    Debug Configurations... menu. Right-click on the Remote Java Application node
    in the list view on the left and select New:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要从Eclipse连接到远程实例，请选择“运行 | 调试配置...”菜单。在左侧的列表视图中右键单击“远程Java应用程序”节点，然后选择“新建”：
- en: '![](img/00150.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00150.jpeg)'
- en: 'Figure 6.14: Inspecting a variable'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：检查变量
- en: Set the appropriate Project and Port (the same as what you selected to start
    Tomcat in Debug mode, that is, the default: `8000`) and click Debug. If the debugger
    connection is successful, Eclipse will switch to the debug perspective. From here
    on out, the process of debugging is the same as that explained earlier.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设置适当的项目和端口（与您在调试模式下启动Tomcat时选择的相同，即默认：`8000`）并点击“调试”。如果调试器连接成功，Eclipse将切换到调试视角。从现在开始，调试的过程与之前解释的相同。
- en: Using the debugger to know the status of program execution
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用调试器了解程序执行状态
- en: 'We have seen how to use the debugger to verify the execution flow of a program
    (using the step operations) and to inspect variables. You can also use the debugger
    to know what the status of the running program is. For example, a web request
    is taking too long and you want to know where exactly the execution is stuck.
    You can use the debugger to find this. It is similar to taking the thread dump
    of a running program, but is much easier than the methods used to get the thread
    dump. Let''s assume that our `CourseDAO.getCourses` method is taking a long time
    to execute. Let''s simulate this by using a couple of `Thread.sleep` calls, as
    shown in the following code snippet:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何使用调试器来验证程序的执行流程（使用单步操作）以及检查变量。您还可以使用调试器来了解正在运行的程序的状态。例如，一个Web请求耗时过长，您想知道执行确实卡在了哪里。您可以使用调试器来找到这一点。这类似于获取正在运行的程序的线程转储，但比获取线程转储的方法要简单得多。让我们假设我们的`CourseDAO.getCourses`方法执行时间过长。我们可以通过使用几个`Thread.sleep`调用来模拟这种情况，如下面的代码片段所示：
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Start Tomcat in Debug mode, and run `listCourses.jsp` in Debug mode. Because
    we have inserted `Thread.sleep` statements, the request will take time. Go to
    the Debug view, which is where threads and stack frames are displayed. Click on
    the first node under the Tomcat debug configuration node and select the Suspend
    option, as shown in the following screenshot:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以调试模式启动Tomcat，并以调试模式运行`listCourses.jsp`。因为我们插入了`Thread.sleep`语句，所以请求将需要时间。转到“调试”视图，这是显示线程和调用栈的地方。在Tomcat调试配置节点下的第一个节点上单击，并选择“暂停”选项，如下面的屏幕截图所示：
- en: '![](img/00151.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00151.jpeg)'
- en: 'Figure 6.15: Suspending program execution'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15：暂停程序执行
- en: 'The debugger pauses execution of all threads in the program. You can then see
    the status of each thread by expanding the thread nodes. You will find one of
    the threads executing the `CourseDAO.getCourse` method and the statement that
    it was executing before being suspended:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 调试器暂停程序中所有线程的执行。然后您可以通过展开线程节点来查看每个线程的状态。您将找到一个线程正在执行`CourseDAO.getCourse`方法，以及它在暂停之前正在执行的语句：
- en: '![](img/00152.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00152.jpeg)'
- en: 'Figure 6.16: The status of suspended threads'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16：暂停线程的状态
- en: From the preceding screenshot, you can see that the execution of the thread
    is suspended in the `CourseDAO.getCourses` method of the `Thread.sleep` statement.
    You can even inspect variables at each stack frame when the program is suspended.
    By suspending the program and inspecting the state of threads and stack frames,
    you may be able to find bottlenecks in your application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的屏幕截图中，您可以看到线程的执行在`Thread.sleep`语句的`CourseDAO.getCourses`方法中被暂停。当程序暂停时，您甚至可以在每个调用栈帧中检查变量。通过暂停程序并检查线程和调用栈的状态，您可能能够找到应用程序中的瓶颈。
- en: Summary
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Good support for debugging from language runtime and IDE can considerably reduce
    the time spent in debugging. Java runtime and Eclipse provide excellent support
    for debugging local and remote applications. To debug a remote application, launch
    it with debug parameters for JVM and connect the Eclipse debugger to it. You can
    then debug the remote application just as you would debug the local one, that
    is, set breakpoints, perform step operations, and inspect variables. You can also
    change variable values in the application when its execution is suspended.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 语言运行时和 IDE 对调试的良好支持可以显著减少调试所花费的时间。Java 运行时和 Eclipse 为本地和远程应用程序的调试提供了出色的支持。要调试远程应用程序，请使用
    JVM 调试参数启动它，并将 Eclipse 调试器连接到它。然后，你可以像调试本地应用程序一样调试远程应用程序，即设置断点、执行步骤操作和检查变量。你还可以在应用程序执行暂停时更改变量值。
- en: In the next chapter, we will see how to develop JEE applications using EJBs
    and use the GlassFish server. Although this chapter explained the debugging of
    JEE applications deployed in Tomcat, you can use the same techniques in the GlassFish
    server.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解如何使用 EJBs 开发 JEE 应用程序并使用 GlassFish 服务器。尽管本章解释了在 Tomcat 部署的 JEE 应用程序的调试，但你也可以在
    GlassFish 服务器中使用相同的技巧。
