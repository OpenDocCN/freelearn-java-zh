["```java\n<dependency>\n    <groupId>com.h2database</groupId>\n    <artifactId>h2</artifactId>\n    <version>1.4.196</version>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>6.0.6</version>\n</dependency>\n\n<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>42.1.4</version>\n</dependency>\n```", "```java\n<dependency>\n    <groupId>com.jolbox</groupId>\n    <artifactId>bonecp</artifactId>\n    <version>0.8.0.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.slf4j</groupId>\n    <artifactId>slf4j-simple</artifactId>\n    <version>1.7.25</version>\n    <scope>test</scope>\n</dependency>\n\n```", "```java\n@WebListener\npublic static class JdbcExampleContextListener implements ServletContextListener {\n\n    @Override\n    public void contextInitialized(ServletContextEvent sce) {\n        try {\n            DatabaseService.init();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n    }\n}\n```", "```java\npublic class DatabaseService {\n\n    private static BoneCP pool;\n\n    public static void init() throws SQLException {\n        BoneCPConfig config = new BoneCPConfig();\n        config.setJdbcUrl(\"jdbc:h2:tcp://localhost/~/h2-databases/demo\");\n        config.setUsername(\"sa\");\n        config.setPassword(\"\");\n\n        pool = new BoneCP(config);\n    }\n}\n```", "```java\ndatasource.url=jdbc:h2:tcp://localhost/~/h2-databases/demo\ndatasource.username=sa\ndatasource.password=\n\n```", "```java\npublic class DatabaseService {\n\n    private static String url;\n    private static String password;\n    private static String username;\n    private static BoneCP pool;\n\n    public static void init() throws SQLException, IOException {\n        loadProperties();\n        createPool();\n    }\n\n    private static void loadProperties() throws IOException {\n        try (InputStream inputStream = DatabaseService.class.getClassLoader().getResourceAsStream(\"datasource.properties\")) {\n            Properties properties = new Properties();\n            properties.load(inputStream);\n\n url = properties.getProperty(\"datasource.url\");\n            username = properties.getProperty(\"datasource.username\");\n            password = properties.getProperty(\"datasource.password\");\n        }\n    }\n\n    private static void createPool() {\n        ...\n config.setJdbcUrl(url);\n        config.setUsername(username);\n        config.setPassword(password);        ...\n    }\n}\n```", "```java\nConnection connection = pool.getConnection();\n```", "```java\ntry (Connection connection = pool.getConnection()) {\n    Statement statement = connection.createStatement();\n ResultSet resultSet = statement.execute(\"SELECT content FROM messages\");\n}\n```", "```java\nwhile (resultSet.next()) {\n    String content = resultSet.getString(\"content\"));\n}\n```", "```java\n@WebListener\npublic static class JdbcExampleContextListener implements ServletContextListener {\n    ...\n\n    @Override\n    public void contextDestroyed(ServletContextEvent sce) {\n DatabaseService.shutdown();\n    }\n}\n```", "```java\npublic class DatabaseService {\n    ...\n    public static void shutdown() {\n        pool.shutdown();\n    }\n}\n```", "```java\npackage packt.vaadin.datacentric.chapter05.jdbc;\n\nimport com.jolbox.bonecp.BoneCP;\nimport com.jolbox.bonecp.BoneCPConfig;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.sql.Connection;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Properties;\n\n/**\n * @author Alejandro Duarte\n */\npublic class DatabaseService {\n\n    private static final String SELECT_SQL = \"SELECT content FROM messages\";\n    private static final String CONTENT_COLUMN = \"content\";\n    ...\n\n    public static List<String> findAllMessages() throws SQLException {\n        try (Connection connection = pool.getConnection()) {\n            Statement statement = connection.createStatement();\n            ResultSet resultSet = statement.executeQuery(SELECT_SQL);\n\n            List<String> messages = new ArrayList<>();\n            while (resultSet.next()) {\n                messages.add(resultSet.getString(CONTENT_COLUMN));\n            }\n\n            return messages;\n        }\n    }\n    ...\n\n}\n```", "```java\npublic class OrderRepository {\n\n    private TechnologyX persistence = ...\n\n    public List<Product> findAll() {\n        ... use Technology X through the persistence instance to fetch the data ...\n        ... convert the data to a List ...\n        return list;\n    }\n    ...\n}\n```"]