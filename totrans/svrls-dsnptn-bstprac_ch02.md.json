["```java\n├── Makefile \n├── README.md \n├── envs/\n│   ├── dev \n│   ├── qa \n│   └── production \n├── requirements.txt \n├── serverless/ \n│   ├── cupping/\n│   ├── handler.py \n│   ├── lib/\n│   └── serverless.yml \n└── tests/\n    ├── conftest.py \n    ├── factories.py \n    ├── helpers.py \n    ├── test_session_model.py \n    └── test_session_persistence.py \n```", "```java\nimport sys\n\nfrom pathlib import Path\n\n# Munge our sys path so libs can be found\nCWD = Path(__file__).resolve().cwd() / 'lib'\nsys.path.insert(0, str(CWD))\n\nimport simplejson as json\n\nfrom cupping.handlers.session import (\n        handle_session,\n        handle_session_detail,\n)\n\nfrom cupping.exceptions import Http404\n\nCORS_HEADERS = {\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Credentials': True\n}\n\ndef session(event, context):\n    \"\"\"/session endpoint for POST or GET\"\"\"\n    http_method = event['httpMethod']\n\n    status_code = 200\n    response = {}\n\n    try:\n        response = handle_session(http_method, event)\n    except Exception as e:\n        status_code = 500\n        # TODO - log error\n        response = {'errors': ['Unexpected server error']}\n\n    response = {\n        'statusCode': status_code,\n        'body': json.dumps(response),\n        'headers': CORS_HEADERS,\n    }\n\n    return response\n\ndef session_detail(event, context):\n    http_method = event['httpMethod']\n\n    status_code = 200\n    response = {}\n\n    try:\n        response = handle_session_detail(http_method, event)\n    except Http404 as e:\n        status_code = 404\n        response = {'errors': [str(e)]}\n    except Exception as e:\n        status_code = 500\n        # TODO - log error\n        response = {'errors': ['Unexpected server error']}\n\n    response = {\n        'statusCode': status_code,\n        'body': json.dumps(response),\n        'headers': CORS_HEADERS,\n    }\n\n    return response\n```", "```java\n    import sys\n\n    from pathlib import Path\n\n    # Munge our sys path so libs can be found\n    CWD = Path(__file__).resolve().cwd() / 'lib'\n    sys.path.insert(0, str(CWD))\n```", "```java\n    {\n     \"name\": \"Cupping session for Serverless Patterns\",\n     \"formName\": \"Modified SCAA\",\n     \"cuppings\": [\n     {\n       \"name\": \"Guatemala Huehuetenango\",\n       \"overallScore\": \"85.5\",\n       \"scores\": {\n         \"Aroma\": 8.6,\n         \"Body\": 8,\n         \"Flavor\": 10\n       },\n       \"notes\": \"This was pretty good\",\n       \"descriptors\": [\"woody\", \"berries\"]\n     },\n     {\n       \"name\": \"Ethiopia Yirgacheffe\",\n       \"overallScore\": \"90\",\n       \"scores\": {\n         \"Aroma\": 8.6,\n         \"Body\": 8,\n         \"Flavor\": 10\n       },\n       \"notes\": \"Nice\",\n       \"descriptors\": [\"blueberry\"]\n     }\n     ]\n    }\n```", "```java\nfrom schematics.exceptions import DataError\n\nfrom .decorators import decode_json\nfrom .helpers import (\n        create_session_from_json_payload,\n        prettify_schematics_errors,\n)\n\nfrom ..models import (\n        CuppingModel,\n        SessionModel,\n)\nfrom ..persistence import Session, queries\nfrom ..exceptions import Http404, InvalidInputData\n\ndef get_sessions(data):\n    sessions = queries.get_sessions()\n    models = [SessionModel.from_row(s) for s in queries.get_sessions()]\n    return {'sessions': [m.to_native() for m in models]}\n\n@decode_json\ndef create_session(json_payload):\n    if not json_payload or not hasattr(json_payload, 'get'):\n        return {'errors': ['Invalid input data']}\n\n    print('Creating session', json_payload)\n\n    try:\n        session = create_session_from_json_payload(json_payload)\n        print('Created session: %s' % (session.id, ))\n        response = {\n                'session': {\n                    'id': session.id,\n                    'name': session.name,\n                }\n        }\n    except InvalidInputData as e:\n        response = {'errors': e.errors}\n\n    return response\n\ndef _get_session_from_path_parameters(data):\n    try:\n        session_id = int(data.get('pathParameters', {}).get('id'))\n    except (AttributeError, TypeError, ValueError):\n        raise Http404('Invalid session id')\n\n    session = queries.get_session_by_id(session_id)\n    if session is None:\n        raise Http404('Invalid session id')\n\n    return session\n\ndef get_session(data):\n    print('Reading session', data)\n    session = _get_session_from_path_parameters(data)\n    model = SessionModel.from_row(session)\n    return {'session': model.to_native()}\n\ndef handle_session(http_method, payload):\n    method_map = {\n            'GET': get_sessions,\n            'POST': create_session,\n    }\n    method = http_method.upper()\n    return method_map[method](payload)\n\ndef handle_session_detail(http_method, payload):\n    method_map = {\n            'GET': get_session,\n            'DELETE': delete_session,\n    }\n    method = http_method.upper()\n    return method_map[method](payload)\n```", "```java\nfunctions:\n  HandleSession:\n    handler: handler.session\n    events:\n      - http:\n          path: session\n          method: get\n          cors: true\n      - http:\n          path: session\n          method: post\n          cors: true\n  HandleSessionDetail:\n    handler: handler.session_detail\n    events:\n      - http:\n          path: session/{id}\n          method: get\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n      - http:\n          path: session/{id}\n          method: delete\n          cors: true\n          request:\n            parameters:\n              paths:\n                id: true\n```", "```java\nbrianz@gold(master=)$ ENV=dev make shell\n```", "```java\ndocker run --rm -it \\\n -v `pwd`:/code \\\n --env ENV=$(ENV) \\\n --env-file envs/$2 \\\n --name=coffee-cupping-$(ENV) \\\n verypossible/serverless:1.20.0-python3 bash\n```", "```java\nroot@091655eda5d0:/code# make libs\n......\n# packages now installed in libs\n....\nroot@091655eda5d0:/code# make deploy \ncd serverless && sls deploy -s dev \nServerless: Packaging service... \nServerless: Excluding development dependencies... \nServerless: Uploading CloudFormation file to S3... \nServerless: Uploading artifacts... \nServerless: Uploading service .zip file to S3 (5.27 MB)... \nServerless: Validating template... \nServerless: Updating Stack... \nServerless: Checking Stack update progress... \n.............. \nServerless: Stack update finished... \nService Information \nservice: coffee-cupping \nstage: dev \nregion: us-west-2 \napi keys: \n None \nendpoints: \n GET - https://2treukfv8j.execute-api.us-west-2.amazonaws.com/dev/session \n POST - https://2treukfv8j.execute-api.us-west-2.amazonaws.com/dev/session \n GET - https://2treukfv8j.execute-api.us-west-2.amazonaws.com/dev/session/{id} \n DELETE - https://2treukfv8j.execute-api.us-west-2.amazonaws.com/dev/session/{id} \nfunctions: \n HandleSession: coffee-cupping-dev-HandleSession\n```", "```java\nresources:\n  Resources:\n    ServerlessSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: SecurityGroup for Serverless Functions\n        VpcId: ${env:VPC_ID}\n    RDSSecurityGroup:\n      Type: AWS::EC2::SecurityGroup\n      Properties:\n        GroupDescription: Ingress for RDS Instance\n        VpcId: ${env:VPC_ID}\n        SecurityGroupIngress:\n        - IpProtocol: tcp\n          FromPort: '5432'\n          ToPort: '5432'\n          SourceSecurityGroupId:\n            Ref: ServerlessSecurityGroup\n    RDSSubnetGroup:\n      Type: AWS::RDS::DBSubnetGroup\n      Properties:\n        DBSubnetGroupDescription: RDS Subnet Group\n        SubnetIds:\n          - ${env:SUBNET_ID_A}\n          - ${env:SUBNET_ID_B}\n          - ${env:SUBNET_ID_C}\n    RDSPostgresInstance:\n      Type: AWS::RDS::DBInstance\n      Properties:\n        AllocatedStorage: 100\n        AutoMinorVersionUpgrade: true\n        AvailabilityZone: ${self:provider.region}a\n        DBInstanceClass: db.t2.micro\n        DBName: ${env:CUPPING_DB_NAME}\n        DBSubnetGroupName:\n          Ref: RDSSubnetGroup\n        Engine: postgres\n        EngineVersion: 9.6.2\n        MasterUsername: ${env:CUPPING_DB_USERNAME}\n        MasterUserPassword: ${env:CUPPING_DB_PASSWORD}\n        PubliclyAccessible: false\n        VPCSecurityGroups:\n          - Fn::GetAtt: RDSSecurityGroup.GroupId\n```", "```java\nbrianz@gold(master=)$ AWS_DEFAULT_REGION=us-east-1 ./manage-stack.sh create --domain cupperslog.com --zone-id ZNGYF5FXIUL0Z --name cupperslog \n{ \n \"StackId\": \"arn:aws:cloudformation:us-east-1:875406499000:stack/cupperslog/e7f15a50-b03c-11e7-97b0-5001ff34b4a6\" \n} \n```", "```java\nbrianz@gold$ aws s3 cp \\\n   build/ \\\n   --acl public-read \\\n   --recurisve \\\n   s3://cupperslog-s3bucketforstaticcontent-nswgo5ega4r1\n```", "```java\nroot@d8dd5cc4bb86:/code# make tests\npy.test --cov=serverless/ --cov-report=html tests/\nConnected to: postgresql://postgres:@cupping-rltest-postgres:5432/test_cupping_log\n........\n==== test session starts ====\nplatform linux -- Python 3.6.2, pytest-3.2.1, py-1.4.34, pluggy-0.4.0\nrootdir: /code, inifile:\nplugins: mock-1.6.2, cov-2.5.1\ncollected 105 items\n\ntests/test_cupping_model.py .........\ntests/test_cupping_persistence.py ......................\ntests/test_handler.py ...\ntests/test_helpers.py .\ntests/test_session_handler.py ...........................\ntests/test_session_models.py ......\ntests/test_session_persistence.py .....................................\n\n--- coverage: platform linux, python 3.6.2-final-0 ---\nCoverage HTML written to dir htmlcov\n\n==== 105 passed in 2.04 seconds ===\n```", "```java\n----------- coverage: platform linux, python 3.6.2-final-0 -----------\nName Stmts Miss Branch BrPart Cover\n------------------------------------------------------------------------------\nserverless/cupping/__init__.py 0 0 0 0 100%\nserverless/cupping/constants.py 11 0 0 0 100%\nserverless/cupping/db/__init__.py 52 2 8 3 92%\nserverless/cupping/db/mixins.py 33 14 6 1 51%\nserverless/cupping/exceptions.py 5 0 0 0 100%\nserverless/cupping/handlers/__init__.py 0 0 0 0 100%\nserverless/cupping/handlers/decorators.py 9 0 0 0 100%\nserverless/cupping/handlers/helpers.py 34 0 16 1 98%\nserverless/cupping/handlers/session.py 43 4 4 0 91%\nserverless/cupping/helpers.py 3 0 0 0 100%\nserverless/cupping/models/__init__.py 2 0 0 0 100%\nserverless/cupping/models/cupping.py 20 0 4 0 100%\nserverless/cupping/models/session.py 14 0 4 0 100%\nserverless/cupping/persistence/__init__.py 2 0 0 0 100%\nserverless/cupping/persistence/base.py 7 0 0 0 100%\nserverless/cupping/persistence/cupping.py 48 0 14 0 100%\nserverless/cupping/persistence/queries.py 6 0 0 0 100%\nserverless/cupping/persistence/session.py 41 0 10 0 100%\nserverless/handler.py 32 3 2 1 88%\n------------------------------------------------------------------------------\nTOTAL 362 23 68 6 92%\n```", "```java\n# serverless deploy -s $ENV\n```", "```java\n# serverless deploy function -s $ENV -f $FUNCTION_NAME\n```"]