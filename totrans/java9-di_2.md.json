["```java\nmodule javaIntroduction {\n}\npackage com.packt.java9dependency.examples;\npublic class Main {\n   public static void main(String[] args) {\n    String s = \"hello java module system\".toUpperCase();\n      System.out.println(s);\n   }\n}                                                                 \n```", "```java\njlink --module-path <modulepath> --add-modules <modules> --limit-modules <modules> --output <path>\n\n--module-path - jLink use module path for finding modules such as modular jars, JMOD files\n--add-modules - Mention module which needs to include in default set of modules for run time image, by default set of modules in empty.\n--limit-modules - Use this option to limits modules, which is required for our application.\n--output - Final resulting run time image will be stored in output directory \n--help - list details about jLink options\n--version - show the version number\n```", "```java\ndefault Stream<T> takeWhile(Predicate<? super T> predicate)\n```", "```java\nList<StackFrame> stack =  StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).walk((s) -> s.collect(Collectors.toList()));\ncom.packt.java9dependency package:\n```", "```java\nList<StackFrame> frames = StackWalker.getInstance().walk(s -> s.dropWhile(f -> f.getClassName().startsWith(\"com.packt.java9dependency\")).limit(10).collect(Collectors.toList()));\n```", "```java\nBefore Java 9, \nList<String> asiaRegion = new ArrayList<String>();\nasiaRegion.add(\"India\");\nasiaRegion.add(\"China\");\nasiaRegion.add(\"SriLanka\");\nList<String> unmodifiableAsiaRegionList = Collections.unmodifiableList(asiaRegion);\n```", "```java\nAfter Java 9,\nList<String> asiaRegion = List.of(\"India\",\"China\",\"SriLanka\");\nSet<Integer> immutableSet = Set.of(10, 15, 20, 25);\n```", "```java\n//Get the HttpClient object\nHttpClient client = HttpClient.newHttpClient();\n\n// GET Method call\nHttpResponse<String> getResponse = client.send(\n    HttpRequest\n        .newBuilder(new URI(\"http://www.xyz.com/\")\n        .GET()\n        .build(),\n    BodyHandler.asString()\n);\n//Response of call\nint responseStatus = getResponse.statusCode();\nString body = responseStatus.body(); \n```", "```java\nmodule <module-name> {\n       requires <module-name-1>;\n       requires <module-name-2>;\n               .\n .\n       requires <module-name-n>;\n       exports <package-1>;\n               .\n .       exports <package-n>;\n}\n```", "```java\nmodule com.packt.java9dependency.chapter2 {\n exports com.packt.java9dependency.chapter2.services;\n requires com.packt.java9dependency.chapter1;\n requires java.sql;\n}\n```", "```java\nNotificationService.java\n\npackage com.packt.service.api;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.ServiceLoader;\n\npublic interface NotificationService {\n\n  /* Loads all the service providers */\n  public static List<NotificationService> getInstances() {\n    ServiceLoader<NotificationService> services = ServiceLoader.load(NotificationService.class);\n    List<NotificationService> list = new ArrayList<>();\n    services.iterator().forEachRemaining(list::add);\n    return list;\n  }\n\n  /* Send notification with provided message and recipient */\n  boolean sendNotification(String message, String recipient);\n\n}\n```", "```java\nmodule com.packt.service.api {\n  exports com.packt.service.api;\n  uses com.packt.service.api.NotificationService;\n}\n```", "```java\nprovides <service-interface> with <service-implementation>\n```", "```java\nSMSServiceImpl.java\n\npackage com.packt.service.impl;\n\nimport com.packt.service.api.NotificationService;\n\npublic class SMSServiceImpl implements NotificationService {\n\n  public boolean sendNotification(String message, String recipient) {\n    // Code to send SMS\n    System.out.println(\"SMS has been sent to Recipient :: \" + recipient + \" with Message :: \"+message);\n    return true;\n  }\n}\n```", "```java\nmodule-info.java\n\nmodule com.packt.service.impl {\n  requires com.packt.service.api;\n  provides com.packt.service.api.NotificationService with   com.packt.service.impl.SMSServiceImpl;\n\n}\n```", "```java\nClientApplication.java\n\npackage com.packt.client;\n\nimport java.util.List;\nimport com.packt.service.api.NotificationService;\n\npublic class ClientApplication {\n\n  public static void main(String[] args) {\n     List<NotificationService> notificationServices = NotificationService.getInstances();\n        for (NotificationService services : notificationServices) {\n          services.sendNotification(\"Hello\", \"1234567890\");\n        }\n  }\n}\n```", "```java\nmodule-info.java\n\nmodule com.packt.client {\n  requires com.packt.service.api;\n}\n```", "```java\nmkdir com.packt.helloapp\nmkdir com.packt.helloapp\\com\\packt\\helloapp\n\n```", "```java\nHelloApp.java\n\npackage com.packt.helloapp;\n\npublic class HelloApp {\n  public String sayHelloJava() {\n      return \"Hello Java 9 Module System\";\n  }\n}\n\nmodule-info.java\n\nmodule com.packt.helloapp {\n // define exports or requires.\n}\n```", "```java\nmkdir com.packt.hello.client\nmkdir com.packt.hello.client\\com\\packt\\hello\\client\n```", "```java\nhelloClient.java\npackage com.packt.hello.client;\n\npublic class HelloClient {\n  public static void main (String arg[]) {\n     //code \n  }\n}\n\nmodule-info.java\nmodule com.packt.hello.client {\n //define exports or requires\n}\n```", "```java\nmodule com.packt.helloapp {\n   exports com.packt.helloapp;\n}\n\nmodule com.packt.hello.client {\n   requires com.packt.helloapp;\n}\n```", "```java\nHelloClient.java\n\npackage com.packt.hello.client;\n\nimport com.packt.HelloApp;\n\npublic class HelloClient {\n\n  public static void main (String arg[]) {\n\n    HelloApp helloApp = new HelloApp();\n    System.out.println(helloApp.sayHelloJava());\n\n  }\n\n}\n```", "```java\njavac -d output com.packt.helloapp\\com\\packt\\helloapp\\HelloApp.java com.packt.helloapp\\module-info.java\n```", "```java\njar -c -f mlib\\com.packt.helloapp.jar -C output .\n```", "```java\nrmdir /s output\n```", "```java\njavac --module-path mlib -d output com.packt.hello.client\\module-info.java\njavac --module-path mlib -d output com.packt.hello.client\\com\\packt\\hello\\client\\HelloClient.java\n```", "```java\njava –-module-path “mlib;output” -m com.packt.hello.client/com.packt.hello.client.HelloClient\n```"]