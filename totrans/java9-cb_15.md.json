["```java\n<dependency>\n  <groupId>junit</groupId>\n  <artifactId>junit</artifactId>\n  <version>4.12</version>\n  <scope>test</scope>\n</dependency>\n```", "```java\npackage com.packt.cookbook.ch02_oop.a_classes;\npublic class Vehicle {\n  private int weightPounds;\n  private Engine engine;\n  public Vehicle(int weightPounds, Engine engine) {\n    this.weightPounds = weightPounds;\n    if(engine == null){\n      throw new RuntimeException(\"Engine value is not set.\");\n    }\n    this.engine = engine;\n  }\n  protected double getSpeedMph(double timeSec){\n    double v = 2.0*this.engine.getHorsePower()*746;\n    v = v*timeSec*32.174/this.weightPounds;\n    return Math.round(Math.sqrt(v)*0.68);\n  }\n}\n```", "```java\npackage com.packt.cookbook.ch02_oop.a_classes;\nimport org.junit.Test;\npublic class VehicleTest {\n  @Test\n  public void testGetSpeedMph(){\n    System.out.println(\"Hello!\" + \" I am your first test method!\");\n  }\n}\n```", "```java\npublic class Engine {\n  private int horsePower;\n  public int getHorsePower() {\n    return horsePower;\n  }\n  public void setHorsePower(int horsePower) {\n    this.horsePower = horsePower;\n  }\n}\n```", "```java\nimport static org.junit.Assert.assertEquals;\n```", "```java\nimport org.junit.Test;\nimport static org.junit.Assert.assertEquals;\npublic class VehicleTest {\n  @Test\n  public void testGetSpeedMph(){\n    System.out.println(\"Hello!\" + \" I am your first test method!\");\n    assertEquals(4, \"Hello\".length());\n  }\n}\n```", "```java\nassertEquals(\"Assert Hello length:\",\"Hello\".length(), 4);\n```", "```java\npublic class VehicleTest {\n  @Test\n  public void testGetSpeedMph(){\n    System.out.println(\"Hello!\" + \" I am your first test method!\");\n    assertEquals(\"Assert Hello length:\", 4, \"Hello\".length());\n  }\n}\n```", "```java\nassertEquals(\"Assert Hello length:\", 5, \"Hello\".length());\n```", "```java\nvoid assertEquals(String message, double expected, \n                       double actual, double delta)\n```", "```java\n@Test\npublic void testGetSpeedMph(){\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n\n  Engine engine = new Engine();\n  engine.setHorsePower(engineHorsePower);\n\n  Vehicle vehicle = new Vehicle(vehicleWeightPounds, engine);\n  double speed = vehicle.getSpeedMph(timeSec);\n  assertEquals(\"Assert vehicle (\" + engineHorsePower \n            + \" hp, \" + vehicleWeightPounds + \" lb) speed in \" \n            + timeSec + \" sec: \", 117, speed, 0.001 * speed);\n}\n```", "```java\nimport static org.junit.Assert.fail;\n\n```", "```java\n@Test\npublic void testGetSpeedMphException(){\n  int vehicleWeightPounds = 4000;\n  Engine engine = null;\n  try {\n    Vehicle vehicle = new Vehicle(vehicleWeightPounds, engine);\n    fail(\"Exception was not thrown\");\n  } catch (RuntimeException ex) {}\n}\n```", "```java\nEngine engine = new Engine();\n```", "```java\npublic class FactoryTraffic {\n  public static List<TrafficUnit> generateTraffic(int \n    trafficUnitsNumber, Month month, DayOfWeek dayOfWeek, \n    int hour, String country, String city, String trafficLight){\n    List<TrafficUnit> tms = new ArrayList();\n    for (int i = 0; i < trafficUnitsNumber; i++) {\n      TrafficUnit trafficUnit = \n        FactoryTraffic.getOneUnit(month, dayOfWeek,  hour, country, \n                                  city, trafficLight);\n        tms.add(trafficUnit);\n    }\n    return tms;\n  }\n}\n```", "```java\npublic static TrafficUnit getOneUnit(Month month, \n              DayOfWeek dayOfWeek, int hour, String country, \n              String city, String trafficLight) {\n  double r0 = Math.random(); \n  VehicleType vehicleType = r0 < 0.4 ? VehicleType.CAR :\n  (r0 > 0.6 ? VehicleType.TRUCK : VehicleType.CAB_CREW);\n  double r1 = Math.random();\n  double r2 = Math.random();\n  double r3 = Math.random();\n  return new TrafficModelImpl(vehicleType, gen(4,1),\n             gen(3300,1000), gen(246,100), gen(4000,2000),\n             (r1 > 0.5 ? RoadCondition.WET : RoadCondition.DRY),    \n             (r2 > 0.5 ? TireCondition.WORN : TireCondition.NEW),\n             r1 > 0.5 ? ( r3 > 0.5 ? 63 : 50 ) : 63 );\n}\n```", "```java\n<dependency>\n  <groupId>org.mockito</groupId>\n  <artifactId>mockito-core</artifactId>\n  <version>2.7.13</version>\n  <scope>test</scope>\n</dependency>\n\n```", "```java\n@Test\npublic void testGetSpeedMph(){\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n\n Engine engine = Mockito.mock(Engine.class);\n  Mockito.when(engine.getHorsePower()).thenReturn(engineHorsePower);\n\n  Vehicle vehicle =  new Vehicle(vehicleWeightPounds, engine);\n  double speed = vehicle.getSpeedMph(timeSec);\n  assertEquals(\"Assert vehicle (\" + engineHorsePower \n               + \" hp, \" + vehicleWeightPounds + \" lb) speed in \" \n               + timeSec + \" sec: \", 117, speed, 0.001 * speed);\n}\n```", "```java\nVehicle vehicleMock = Mockito.mock(Vehicle.class);\nMockito.when(vehicleMock.getSpeedMph(10)).thenReturn(30d);\n\ndouble speed = vehicleMock.getSpeedMph(10);\nSystem.out.println(speed);\n\n```", "```java\npublic class TrafficDensity1 {\n  public Integer[] trafficByLane(Stream<TrafficUnit> stream, \n  int trafficUnitsNumber, double timeSec,\n  SpeedModel speedModel, double[] speedLimitByLane) {\n\n    int lanesCount = speedLimitByLane.length;\n\n    Map<Integer, Integer> trafficByLane = stream\n      .limit(trafficUnitsNumber)\n      .map(TrafficUnitWrapper::new)\n      .map(tuw -> tuw.setSpeedModel(speedModel))\n      .map(tuw -> tuw.calcSpeed(timeSec))\n      .map(speed ->  countByLane(lanesCount, speedLimitByLane, speed))\n      .collect(Collectors.groupingBy(CountByLane::getLane, \n               Collectors.summingInt(CountByLane::getCount)));\n\n    for(int i = 1; i <= lanesCount; i++){\n      trafficByLane.putIfAbsent(i, 0);\n    }\n    return trafficByLane.values()\n      .toArray(new Integer[lanesCount]);\n  }\n\n  private CountByLane countByLane(int lanesCount, \n                 double[] speedLimit, double speed) {\n    for(int i = 1; i <= lanesCount; i++){\n      if(speed <= speedLimit[i - 1]){\n        return new CountByLane(1, i);\n      }\n    }\n    return new CountByLane(1, lanesCount);\n  }\n}\n```", "```java\nprivate class CountByLane{\n  int count, lane;\n  private CountByLane(int count, int lane){\n    this.count = count;\n    this.lane = lane;\n  }\n  public int getLane() { return lane; }\n  public int getCount() { return count; }\n}\n```", "```java\nprivate static class TrafficUnitWrapper {\n  private Vehicle vehicle;\n  private TrafficUnit trafficUnit;\n  public TrafficUnitWrapper(TrafficUnit trafficUnit){\n    this.vehicle = FactoryVehicle.build(trafficUnit);\n    this.trafficUnit = trafficUnit;\n  }\n  public TrafficUnitWrapper setSpeedModel(SpeedModel speedModel) {\n    this.vehicle.setSpeedModel(speedModel);\n    return this;\n  }\n  public double calcSpeed(double timeSec) {\n    double speed = this.vehicle.getSpeedMph(timeSec);\n    return Math.round(speed * this.trafficUnit.getTraction());\n  }\n}\n```", "```java\n@Test\npublic void testSpeedModel(){\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  double speed = getSpeedModel().getSpeedMph(timeSec,\n                 vehicleWeightPounds, engineHorsePower);\n  assertEquals(\"Assert vehicle (\" + engineHorsePower \n               + \" hp, \" + vehicleWeightPounds + \" lb) speed in \" \n               + timeSec + \" sec: \", 117, speed, 0.001 * speed);\n}\n\nprivate SpeedModel getSpeedModel(){\n  //FactorySpeedModel possibly\n}\n```", "```java\npublic class FactorySpeedModel {\n  public static SpeedModel generateSpeedModel(TrafficUnit trafficUnit){\n    return new SpeedModelImpl(trafficUnit);\n  }\n  private static class SpeedModelImpl implements SpeedModel{\n    private TrafficUnit trafficUnit;\n    private SpeedModelImpl(TrafficUnit trafficUnit){\n      this.trafficUnit = trafficUnit;\n    }\n    public double getSpeedMph(double timeSec, \n                              int weightPounds, int horsePower) {\n      double traction = trafficUnit.getTraction();\n      double v = 2.0 * horsePower * 746 \n                 * timeSec * 32.174 / weightPounds;\n      return Math.round(Math.sqrt(v) * 0.68 * traction);\n    }\n  }\n```", "```java\npublic class FactorySpeedModel {\n  public static SpeedModel generateSpeedModel(TrafficUnit trafficUnit) {\n    return new SpeedModelImpl(trafficUnit);\n  }\n public static SpeedModel getSpeedModel(){\n return SpeedModelImpl.getSpeedModel();\n }\n  private static class SpeedModelImpl implements SpeedModel{\n    private TrafficUnit trafficUnit;\n    private SpeedModelImpl(TrafficUnit trafficUnit){\n      this.trafficUnit = trafficUnit;\n    }\n    public double getSpeedMph(double timeSec, \n                     int weightPounds, int horsePower) {\n      double speed = getSpeedModel()\n             .getSpeedMph(timeSec, weightPounds, horsePower);\n      return Math.round(speed *trafficUnit.getTraction());\n    }\n    public static SpeedModel getSpeedModel(){\n      return  (t, wp, hp) -> {\n        double weightPower = 2.0 * hp * 746 * 32.174 / wp;\n        return Math.round(Math.sqrt(t * weightPower) * 0.68);\n      };\n    }\n  }\n}\n```", "```java\n@Test\npublic void testSpeedModel(){\n  double timeSec = 10.0;\n  int engineHorsePower = 246;\n  int vehicleWeightPounds = 4000;\n  double speed = FactorySpeedModel.generateSpeedModel()\n                 .getSpeedMph(timeSec, vehicleWeightPounds, \n                              engineHorsePower);\n  assertEquals(\"Assert vehicle (\" + engineHorsePower \n               + \" hp, \" + vehicleWeightPounds + \" lb) speed in \" \n               + timeSec + \" sec: \", 117, speed, 0.001 * speed);\n}\n```", "```java\n@Test\npublic void testTrafficByLane() {\n  TrafficDensity1 trafficDensity = new TrafficDensity1();\n  double timeSec = 10.0;\n  int trafficUnitsNumber = 120;\n  double[] speedLimitByLane = {30, 50, 65};\n  Integer[] expectedCountByLane = {30, 30, 60};\n  Integer[] trafficByLane = \n    trafficDensity.trafficByLane(getTrafficUnitStream2(\n      trafficUnitsNumber), trafficUnitsNumber, timeSec, \n      FactorySpeedModel.getSpeedModel(),speedLimitByLane);\n    assertArrayEquals(\"Assert count of \" \n              + trafficUnitsNumber + \" vehicles by \" \n              + speedLimitByLane.length +\" lanes with speed limit \" \n              + Arrays.stream(speedLimitByLane)\n                      .mapToObj(Double::toString)\n                      .collect(Collectors.joining(\", \")),\n                      expectedCountByLane, trafficByLane);\n}\n```", "```java\nTrafficUnit getTrafficUnit(int engineHorsePower, \n                           int vehicleWeightPounds) {\n  return new TrafficUnit() {\n    @Override\n    public Vehicle.VehicleType getVehicleType() {\n      return Vehicle.VehicleType.TRUCK;\n    }\n    @Override\n    public int getHorsePower() {return engineHorsePower;}\n    @Override\n    public int getWeightPounds() { return vehicleWeightPounds; }\n    @Override\n    public int getPayloadPounds() { return 0; }\n    @Override\n    public int getPassengersCount() { return 0; }\n    @Override\n    public double getSpeedLimitMph() { return 55; }\n    @Override\n    public double getTraction() { return 0.2; }\n    @Override\n    public SpeedModel.RoadCondition getRoadCondition() {return null; }\n    @Override\n    public SpeedModel.TireCondition getTireCondition() { return null; }\n    @Override\n    public int getTemperature() { return 0; }\n  };\n}\n```", "```java\ndouble calcSpeed(double timeSec) {\n  double speed = this.vehicle.getSpeedMph(timeSec);\n  return Math.round(speed * this.trafficUnit.getTraction());\n}\n```", "```java\ndouble calcSpeed(Vehicle vehicle, double traction, double timeSec) {\n  double speed = vehicle.getSpeedMph(timeSec);\n  return Math.round(speed * traction);\n}\n```", "```java\npublic Vehicle getVehicle() { return vehicle; }\npublic double getTraction() { return trafficUnit.getTraction(); }\n```", "```java\nMap<Integer, Integer> trafficByLane = stream\n  .limit(trafficUnitsNumber)\n  .map(TrafficUnitWrapper::new)\n  .map(tuw -> tuw.setSpeedModel(speedModel))\n  .map(tuw -> calcSpeed(tuw.getVehicle(), tuw.getTraction(), timeSec))\n  .map(speed -> countByLane(lanesCount, speedLimitByLane, speed))\n      .collect(Collectors.groupingBy(CountByLane::getLane, \n            Collectors.summingInt(CountByLane::getCount)));\n\n```", "```java\n@Test\npublic void testCalcSpeed(){\n  double timeSec = 10.0;\n  TrafficDensity2 trafficDensity = new TrafficDensity2();\n\n  Vehicle vehicle = Mockito.mock(Vehicle.class);\n  Mockito.when(vehicle.getSpeedMph(timeSec)).thenReturn(100d);\n  double traction = 0.2;\n  double speed = trafficDensity.calcSpeed(vehicle, traction, timeSec);\n  assertEquals(\"Assert speed (traction=\" + traction + \") in \" \n               + timeSec + \" sec: \",20,speed,0.001 *speed);\n}\n```", "```java\n@Test\npublic void testCountByLane() {\n  int[] count ={0};\n  double[] speeds = \n                  {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n  TrafficDensity2 trafficDensity = new TrafficDensity2() {\n    @Override\n    protected double calcSpeed(Vehicle vehicle, \n                     double traction, double timeSec) {\n      return speeds[count[0]++];\n    }\n  };\n  double timeSec = 10.0;\n  int trafficUnitsNumber = speeds.length;\n\n  double[] speedLimitByLane = {4.5, 8.5, 12.5};\n  Integer[] expectedCountByLane = {4, 4, 4};\n\n  Integer[] trafficByLane = trafficDensity.trafficByLane( \n    getTrafficUnitStream(trafficUnitsNumber), \n    trafficUnitsNumber, timeSec, FactorySpeedModel.getSpeedModel(),\n    speedLimitByLane );\n  assertArrayEquals(\"Assert count of \" + speeds.length \n          + \" vehicles by \" + speedLimitByLane.length \n          + \" lanes with speed limit \" \n          + Arrays.stream(speedLimitByLane)\n                  .mapToObj(Double::toString).collect(Collectors\n                  .joining(\", \")), expectedCountByLane, trafficByLane);\n}\n```", "```java\nInteger[] trafficByLane(Stream<TrafficUnit> stream, \nint trafficUnitsNumber, double timeSec,\nSpeedModel speedModel, double[] speedLimitByLane) {\n  int lanesCount = speedLimitByLane.length;\n  Map<Integer, Integer> trafficByLane = new HashMap<>();\n  for(int i = 1; i <= lanesCount; i++){\n    trafficByLane.put(i, 0);\n  }\n  stream.limit(trafficUnitsNumber)\n    .map(TrafficUnitWrapper::new)\n    .map(tuw -> tuw.setSpeedModel(speedModel))\n    .map(tuw -> calcSpeed(tuw.getVehicle(), \n                          tuw.getTraction(), timeSec))\n .forEach(speed -> trafficByLane.computeIfPresent(\n calcLaneNumber(lanesCount, \n                     speedLimitByLane, speed), (k, v) -> ++v));    return trafficByLane.values().toArray(new Integer[lanesCount]);}\nprotected int calcLaneNumber(int lanesCount, \n  double[] speedLimitByLane, double speed) {\n for(int i = 1; i <= lanesCount; i++){\n if(speed <= speedLimitByLane[i - 1]){\n return i;\n      }\n }\n return lanesCount;\n}\n```", "```java\nprivate class TrafficDensityTestCalcLaneNumber \nextends TrafficDensity3 {\n  protected int calcLaneNumber(int lanesCount, \n    double[] speedLimitByLane, double speed){\n    return super.calcLaneNumber(lanesCount, \n    speedLimitByLane, speed);\n  }\n}\n```", "```java\n@Test\npublic void testCalcLaneNumber() {\n  double[] speeds = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n  double[] speedLimitByLane = {4.5, 8.5, 12.5};\n  int[] expectedLaneNumber = {1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3};\n\n  TrafficDensityTestCalcLaneNumber trafficDensity = \n               new TrafficDensityTestCalcLaneNumber();\n  for(int i = 0; i < speeds.length; i++){\n    int ln = trafficDensity.calcLaneNumber(\n               speedLimitByLane.length, \n               speedLimitByLane, speeds[i]);\n    assertEquals(\"Assert lane number of speed \" \n                + speeds + \" with speed limit \" \n                + Arrays.stream(speedLimitByLane)\n                        .mapToObj(Double::toString).collect(\n                              Collectors.joining(\", \")), \n                expectedLaneNumber[i], ln);\n  }\n}\n```", "```java\npublic class DatabaseRelatedTest {\n  @BeforeClass\n  public static void setupForTheClass(){\n    System.out.println(\"setupForTheClass() is called\");\n  }\n  @AfterClass\n  public static void cleanUpAfterTheClass(){\n    System.out.println(\"cleanAfterClass() is called\");\n  }\n  @Before\n  public void setupForEachMethod(){\n    System.out.println(\"setupForEachMethod() is called\");\n  }\n  @After\n  public void cleanUpAfterEachMethod(){\n    System.out.println(\"cleanAfterEachMethod() is called\");\n  }\n  @Test\n  public void testMethodOne(){      \n    System.out.println(\"testMethodOne() is called\"); \n  }\n  @Test\n  public void testMethodTwo(){ \n    System.out.println(\"testMethodTwo() is called\"); \n  }\n}\n```", "```java\nclass DbRelatedMethods{\n  public void updateAllTextRecordsTo(String text){\n    executeUpdate(\"update text set text = ?\", text);\n  }\n  private void executeUpdate(String sql, String text){\n    try (Connection conn = getDbConnection();\n      PreparedStatement st = conn.prepareStatement(sql)){\n        st.setString(1, text);\n        st.executeUpdate();\n      } catch (Exception ex) {\n        ex.printStackTrace();\n      }\n    }\n    private Connection getDbConnection(){\n       ...    \n    }\n}\n```", "```java\n@Test\npublic void updateAllTextRecordsTo1(){\n  System.out.println(\"updateAllTextRecordsTo1() is called\");\n  String testString = \"Whatever\";\n  System.out.println(\"  Update all records to \" + testString);\n  dbRelatedMethods.updateAllTextRecordsTo(testString);\n  int count = countRecordsWithText(testString);\n  assertEquals(\"Assert number of records with \" \n                + testString + \": \", 1, count);\n  System.out.println(\"All records are updated to \" + testString);\n}\n```", "```java\n@Test\npublic void updateAllTextRecordsTo2(){\n  System.out.println(\"updateAllTextRecordsTo2() is called\");\n  String testString = \"Whatever\";\n  System.out.println(\"  Update all records to Unexpected\");\n  dbRelatedMethods.updateAllTextRecordsTo(\"Unexpected\");\n  executeUpdate(\"insert into text(id, text) values(2, ?)\",\n                                                \"Text 01\");\n  System.out.println(\"Update all records to \"  + testString);\n  dbRelatedMethods.updateAllTextRecordsTo(testString);\n  int count = countRecordsWithText(testString);\n  assertEquals(\"Assert number of records with \" \n               + testString + \": \", 2, count);\n  System.out.println(\"  \" + count + \" records are updated to \" +\n                     testString);\n}\n```", "```java\n@BeforeClass\npublic static void setupForTheClass(){\n  System.out.println(\"setupForTheClass() is called\");\n  execute(\"create table text (id integer not null, \n          text character varying not null)\");\n}\n@AfterClass\npublic static void cleanUpAfterTheClass(){\n  System.out.println(\"cleanAfterClass() is called\");\n  execute(\"drop table text\");\n}\n```", "```java\n@Before\npublic void setupForEachMethod(){\n  System.out.println(\"setupForEachMethod() is called\");\n  executeUpdate(\"insert into text(id, text) values(1,?)\", \"Text 01\");\n}\n@After\npublic void cleanUpAfterEachMethod(){\n  System.out.println(\"cleanAfterEachMethod() is called\");\n  execute(\"delete from text\");\n}\n```", "```java\nprivate DbRelatedMethods dbRelatedMethods = new DbRelatedMethods();\n\n```", "```java\nString result = IntStream.rangeClosed(1, \n  speedLimitByLane.length).mapToDouble(i -> {\n    AverageSpeed averageSpeed = \n      new AverageSpeed(trafficUnitsNumber, timeSec, \n                       dateLocation, speedLimitByLane, i,100);\n    ForkJoinPool commonPool = ForkJoinPool.commonPool();\n    return commonPool.invoke(averageSpeed);\n}).mapToObj(Double::toString).collect(Collectors.joining(\", \"));\nSystem.out.println(\"Average speed = \" + result);\n\nTrafficDensity trafficDensity = new TrafficDensity();\nInteger[] trafficByLane = \n     trafficDensity.trafficByLane(trafficUnitsNumber,\n                    timeSec, dateLocation, speedLimitByLane );\nSystem.out.println(\"Traffic density = \" + Arrays.stream(trafficByLane)\n                                  .map(Object::toString)\n                                  .collect(Collectors.joining(\", \")));\n\n```", "```java\nDbUtil.createResultTable();\nDispatcher.dispatch(trafficUnitsNumber, timeSec, dateLocation, \n                    speedLimitByLane);\ntry { Thread.sleep(2000L); } \ncatch (InterruptedException ex) {}\nArrays.stream(Process.values()).forEach(v -> {\n  System.out.println(\"Result \" + v.name() + \": \" \n                     + DbUtil.selectResult(v.name()));\n});\n\n```", "```java\nvoid dispatch(int trafficUnitsNumber, double timeSec, \n         DateLocation dateLocation, double[] speedLimitByLane) {\n  ExecutorService execService =  ForkJoinPool.commonPool();\n  try (SubmissionPublisher<Integer> publisher = \n                              new SubmissionPublisher<>()){\n    subscribe(publisher, execService,Process.AVERAGE_SPEED, \n              timeSec, dateLocation, speedLimitByLane);\n   subscribe(publisher,execService,Process.TRAFFIC_DENSITY, \n             timeSec, dateLocation, speedLimitByLane);\n    publisher.submit(trafficUnitsNumber);\n  } finally {\n    try {\n      execService.shutdown();\n      execService.awaitTermination(1, TimeUnit.SECONDS);\n    } catch (Exception ex) {\n      System.out.println(ex.getClass().getName());\n    } finally {\n      execService.shutdownNow();\n    }\n  }\n}\n```", "```java\nvoid subscribe(SubmissionPublisher<Integer> publisher, \n              ExecutorService execService, Process process, \n              double timeSec, DateLocation dateLocation, \n              double[] speedLimitByLane) {\n  Processor<Integer> subscriber =  new Processor<>(process, timeSec, \n                                 dateLocation, speedLimitByLane);\n  Subscription subscription = new Subscription(subscriber, execService);\n  subscriber.onSubscribe(subscription);\n  publisher.subscribe(subscriber);\n}\n```", "```java\npublic class FactoryTraffic {\n  private static boolean switchToRealData = true;\n  public static Stream<TrafficUnit> \n  getTrafficUnitStream(DateLocation dl, int trafficUnitsNumber){\n    if(switchToRealData){\n      return getRealData(dL,  trafficUnitsNumber);\n    } else {\n      return IntStream.range(0, trafficUnitsNumber)\n      .mapToObj(i -> generateOneUnit());\n    }\n  }\n\n  private static Stream<TrafficUnit> \n  getRealData(DateLocation dl, int trafficUnitsNumber) {\n    //connect to the source of the real data \n    // and request the flow or collection of data\n    return new ArrayList<TrafficUnit>().stream();\n  }\n}\n```", "```java\npublic class TrafficDensity {\n public static Connection conn;\n public static boolean recordData = false;\n  //... \n  private double calcSpeed(TrafficUnitWrapper tuw, double timeSec){\n    double speed = calcSpeed(tuw.getVehicle(),       \n    tuw.getTrafficUnit().getTraction(), timeSec);\n if(recordData) {\n DbUtil.recordData(conn, tuw.getTrafficUnit(), speed);\n }\n    return speed;\n  }\n  //...\n} \n```", "```java\nprivate static void demo3_prepare_for_integration_testing(){\n  DbUtil.createResultTable();\n  DbUtil.createDataTables();\n  TrafficDensity.recordData = true;\n  try(Connection conn = DbUtil.getDbConnection()){\n    TrafficDensity.conn = conn;\n    Dispatcher.dispatch(trafficUnitsNumber, timeSec, \n                        dateLocation, speedLimitByLane);\n  } catch (SQLException ex){\n    ex.printStackTrace();\n  }\n}\n```", "```java\npublic class FactoryTraffic {\n  public static boolean readDataFromDb = false;\n  private static boolean switchToRealData = false;\n  public static Stream<TrafficUnit> \n                 getTrafficUnitStream(DateLocation dl,\n                                     int trafficUnitsNumber){\n if(readDataFromDb){\n if(!DbUtil.isEnoughData(trafficUnitsNumber)){\n System.out.println(\"Not enough data\");\n        return new ArrayList<TrafficUnit>().stream();\n      }\n return readDataFromDb(trafficUnitsNumber);\n    }\n    //....\n}\n```", "```java\npublic static boolean isEnoughData(int trafficUnitsNumber){\n  try (Connection conn = getDbConnection();\n  PreparedStatement st = \n      conn.prepareStatement(\"select count(*) from data\")){\n    ResultSet rs = st.executeQuery();\n    if(rs.next()){\n      int count = rs.getInt(1);\n      return count >= trafficUnitsNumber;\n    }\n  } catch (Exception ex) {\n    ex.printStackTrace();\n  }\n  return false;\n}\n```", "```java\npublic interface TrafficUnit {\n  VehicleType getVehicleType();\n  int getHorsePower();\n  int getWeightPounds();\n  int getPayloadPounds();\n  int getPassengersCount();\n  double getSpeedLimitMph();\n  double getTraction();\n  RoadCondition getRoadCondition();\n  TireCondition getTireCondition();\n  int getTemperature();\n default double getSpeed(){ return 0.0; }\n}\n```", "```java\nList<TrafficUnit> selectData(int trafficUnitsNumber){...}\n```", "```java\nclass TrafficUnitImpl implements TrafficUnit{\n  private int horsePower, weightPounds, payloadPounds, \n              passengersCount, temperature;\n  private Vehicle.VehicleType vehicleType;\n  private double speedLimitMph, traction, speed;\n  private RoadCondition roadCondition;\n  private TireCondition tireCondition;\n  ...\n  public double getSpeed() { return speed; }\n}\n```", "```java\nvoid demo1_test_speed_model_with_real_data(){\n  double timeSec = DbUtil.getTimeSecFromDataCommon();\n  FactoryTraffic.readDataFromDb = true;\n  TrafficDensity trafficDensity = new TrafficDensity();\n  FactoryTraffic.getTrafficUnitStream(dateLocation, 1000).forEach(tu -> {\n    Vehicle vehicle = FactoryVehicle.build(tu);\n    vehicle.setSpeedModel(FactorySpeedModel.getSpeedModel());\n    double speed = trafficDensity.calcSpeed(vehicle, \n                               tu.getTraction(), timeSec);\n    assertEquals(\"Assert vehicle (\" + tu.getHorsePower() \n                 + \" hp, \" + tu.getWeightPounds() + \" lb) speed in \" \n                 + timeSec + \" sec: \", tu.getSpeed(), speed, \n                 speed * 0.001);\n  });\n}\n```", "```java\nprivate static void demo2_class_level_integration_test() {\n  FactoryTraffic.readDataFromDb = true;\n  String result = IntStream.rangeClosed(1, \n              speedLimitByLane.length).mapToDouble(i -> {\n    AverageSpeed averageSpeed = new AverageSpeed(trafficUnitsNumber, \n               timeSec, dateLocation, speedLimitByLane, i,100);\n    ForkJoinPool commonPool = ForkJoinPool.commonPool();\n    return commonPool.invoke(averageSpeed);\n  }).mapToObj(Double::toString).collect(Collectors.joining(\", \"));\n  String expectedResult = \"7.0, 23.0, 41.0\";\n  String limits = Arrays.stream(speedLimitByLane)\n                        .mapToObj(Double::toString)\n                        .collect(Collectors.joining(\", \"));\n  assertEquals(\"Assert average speeds by \" \n                + speedLimitByLane.length \n                + \" lanes with speed limit \" \n                + limits, expectedResult, result);\n\n```", "```java\nTrafficDensity trafficDensity = new TrafficDensity();\nString result = Arrays.stream(trafficDensity.\n       trafficByLane(trafficUnitsNumber, timeSec, \n                     dateLocation, speedLimitByLane))\n       .map(Object::toString)\n       .collect(Collectors.joining(\", \"));\nexpectedResult = \"354, 335, 311\";\nassertEquals(\"Assert vehicle count by \" + speedLimitByLane.length + \n         \" lanes with speed limit \" + limits, expectedResult, result);\n```", "```java\nvoid demo3_subsystem_level_integration_test() {\n  FactoryTraffic.readDataFromDb = true;\n  DbUtil.createResultTable();\n  Dispatcher.dispatch(trafficUnitsNumber, 10, dateLocation, \n                      speedLimitByLane);\n  try { Thread.sleep(3000l); } \n  catch (InterruptedException ex) {}\n  String result = DbUtil.selectResult(Process.AVERAGE_SPEED.name());\n  String expectedResult = \"7.0, 23.0, 41.0\";\n  String limits = Arrays.stream(speedLimitByLane)\n                        .mapToObj(Double::toString)\n                        .collect(Collectors.joining(\", \"));\n  assertEquals(\"Assert average speeds by \" + speedLimitByLane.length \n        + \" lanes with speed limit \" + limits, expectedResult, result);\n  result = DbUtil.selectResult(Process.TRAFFIC_DENSITY.name());\n  expectedResult = \"354, 335, 311\";\n  assertEquals(\"Assert vehicle count by \" + speedLimitByLane.length \n        + \" lanes with speed limit \" + limits, expectedResult, result);\n}\n```"]