["```java\nkeytool -genkeypair -alias jbcpclient -keyalg RSA -validity 365 -keystore jbcp_clientauth.p12 -storetype PKCS12\n```", "```java\nWhat is your first and last name? [Unknown]: admin1@example.com\n... etc\nIs CN=admin1@example.com, OU=JBCP Calendar, O=JBCP, L=Park City, ST=UT, C=US correct?\n[no]: yes\n```", "```java\n    keytool -exportcert -alias jbcpclient -keystore jbcp_clientauth.p12 -storetype PKCS12 -storepass changeit -file jbcp_clientauth.cer\n    ```", "```java\n    tomcat.truststore and prompt you for a password (we chose changeit as the password). You’ll also see some information about the certificate and will finally be asked to confirm that you do trust the certificate, as follows:\n\n    ```", "```java\n\n    ```", "```java\n    //sever.xml\n    <Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\"\n              scheme=\"https\" secure=\"true\" sslProtocol=\"TLS\" keystoreFile=\"<KEYSTORE_PATH>/tomcat.keystore\"\n              keystorePass=\"changeit\" truststoreFile=\"<CERT_PATH>/tomcat.truststore\"\n              truststorePass=\"changeit\"  clientAuth=\"true\" />\n    ```", "```java\n## Chapter 8 TLS over HTTP/1.1:\n## https://localhost:8443\nserver:\n  port: 8443\n  ssl:\n    key-store: classpath:keys/jbcp_clientauth.p12\n    key-store-password: changeit\n    keyStoreType: PKCS12\n    keyAlias: jbcpclient\n    protocol: TLS\n    client-auth: need\n    trust-store: classpath:keys/tomcat.truststore\n    trust-store-password: changeit\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n// SSL / TLS x509 support\nhttp.x509(httpSecurityX509Configurer -> httpSecurityX509Configurer\n              .userDetailsService(userDetailsService));\n```", "```java\nOwner: CN=admin@example.com, OU=JBCP Calendar, O=JBCP, L=Park City, ST=UT, C=US\n```", "```java\nhttp.x509(httpSecurityX509Configurer -> httpSecurityX509Configurer\n              .subjectPrincipalRegex(\"CN=(.*?)(?:,|$)\")\n              .userDetailsService(userDetailsService));\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http,\n        PersistentTokenRepository persistentTokenRepository,\n        Http403ForbiddenEntryPoint forbiddenEntryPoint) throws Exception {\n    http.authorizeRequests( authz -> authz\n                .requestMatchers(antMatcher(\"/webjars/**\")).permitAll()\n...\n          .exceptionHandling(exceptions -> exceptions\n                .authenticationEntryPoint(forbiddenEntryPoint)\n                .accessDeniedPage(\"/errors/403\"))\n...\n    return http.build();\n}\n@Bean\npublic Http403ForbiddenEntryPoint forbiddenEntryPoint(){\n    return new Http403ForbiddenEntryPoint();\n}\n```", "```java\n<Connector port=\"8443\" protocol=\"HTTP/1.1\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" sslProtocol=\"TLS\"\nkeystoreFile=\"conf/tomcat.keystore\" keystorePass=\"password\" truststoreFile=\"conf/tomcat.truststore\" truststorePass=\"password\" clientAuth=\"want\"\n/>\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic X509AuthenticationFilter x509Filter(){\n    return new X509AuthenticationFilter(){{\n        setAuthenticationManager(authenticationManager);\n    }};\n}\n@Bean\npublic PreAuthenticatedAuthenticationProvider preAuthAuthenticationProvider(final AuthenticationUserDetailsService authenticationUserDetailsService){\n    return new PreAuthenticatedAuthenticationProvider(){{\n        setPreAuthenticatedUserDetailsService (authenticationUserDetailsService);\n    }};\n}\n@Bean\npublic UserDetailsByNameServiceWrapper authenticationUserDetailsService(final UserDetailsService userDetailsService){\n    return new UserDetailsByNameServiceWrapper(){{\n        setUserDetailsService(userDetailsService);\n    }};\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Bean\npublic AuthenticationManager authManager(HttpSecurity http) throws Exception {\n    AuthenticationManagerBuilder authenticationManagerBuilder =\n          http.getSharedObject(AuthenticationManagerBuilder.class);\n    http.authenticationProvider(preAuthAuthenticationProvider);\n    return authenticationManagerBuilder.build();\n}\n```"]