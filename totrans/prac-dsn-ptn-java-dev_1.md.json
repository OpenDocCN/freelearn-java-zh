["```java\npublic class Vehicle {\n    private boolean moving;\n    public void move(){\n        this.moving = true;\n        System.out.println(\"moving...\");\n    }\n    public void stop(){\n        this.moving = false;\n        System.out.println(\"stopped...\");\n    }\n}\n```", "```java\npublic class Vehicle {\n    public void move(){\n        System.out.println(\"moving...\");\n    }\n}\npublic class Car extends Vehicle {\n    @Override\n    public void move(){\n        System.out.println(\"moving faster.\");\n    }\n}\nVehicle vehicle = new Car();\nvehicle.move();\noutput: moving faster...\n```", "```java\npublic abstract class AbstractVehicle {\n    abstract public void move();\n    public void stop(){\n        System.out.println(\"stopped...\");\n    }\n}\npublic class CommonCar extends AbstractVehicle{\n    @Override\n    public void move() {\n        System.out.println(\"move slow...\");\n    }\n}\npublic class SportCar extends AbstractVehicle{\n    @Override\n    public void move() {\n        System.out.println(\"move fast...\");\n    }\n}\n```", "```java\npublic interface VehicleInterface {\n    void move();\n}\npublic class Truck implements VehicleInterface{\n    @Override\n    public void move() {\n        System.out.println(\"truck moves...\");\n    }\n}\npublic class Bus implements VehicleInterface{\n    @Override\n    public void move() {\n        System.out.println(\"bus moves...\");\n    }\n}\n```", "```java\npublic interface Vehicle {}\npublic class Car implements Vehicle{\n    public void move(){}\n}\npublic class Truck implements Vehicle {\n    public void move(){}\n}\n-- usage --\nList<Vehicle> vehicles = Arrays.asList(new Truck(), new \n    Car());\nvehicles.get(0).move() // ERROR, NOT POSISBLE!\n```", "```java\npublic interface Vehicle {\n    void move();    // CORRECTION!\n}\n--- usage ---\nList<Vehicle> vehicles = Arrays.asList(new Truck(), new \n    Car());\nvehicles.get(0).move() // CONGRATULATION, ALL WORKS!\n```", "```java\npublic interface Vehicle {\n    void move();\n}\npublic class CarWash {\n    public void wash(Vehicle vehicle){}      \n}\npublic class Car implements Vehicle{\n    public void move(){}\n}\npublic class SportCar extends Car {}\n--- usage ---\nCarWash carWash = new CarWash();\ncarWash.wash(new Car());\ncarWash.wash(new SportCar());\n```", "```java\npublic interface Vehicle {\n    void setMove(boolean moving);\n    boolean engineOn();\n    boolean pedalsMove();\n}\npublic class Bike implements Vehicle{\n    ...\n    public boolean engineOn() {\n        throw new IllegalStateException(\"not supported\");\n    }\n    ...\n}\npublic class Car implements Vehicle {\n    ...\n    public boolean pedalsMove() {\n        throw new IllegalStateException(\"not supported\");\n    }\n}\n--- usage ---\nprivate static void printIsMoving(Vehicle v) {\n    if (v instanceof Car) { \n        System.out.println(v.engineOn());}\n    if(v instanceof Bike) \n        {System.out.println(v.pedalsMove());}\n}\n```", "```java\npublic interface Vehicle {\n    void setMove(boolean moving);\n}\npublic interface HasEngine {\n    boolean engineOn();\n}\npublic interface HasPedals {\n    boolean pedalsMove();\n}\npublic class Bike implements HasPedals, Vehicle {...}\npublic class Car implements HasEngine, Vehicle {...}\n--- usage --- \nprivate static void printIsMoving(Vehicle v){\n    // no access to internal state\n}\nprivate static void printIsMoving(Car c) {\n    System.out.println(c.engineOn());\n}\nprivate static void printIsMoving(Bike b) {\n    System.out.println(b.pedalsMove());\n}\n```", "```java\npublic interface Vehicle {}\npublic class Car implements Vehicle{}\npublic class SportCar extends Car {}\npublic class Truck implements Vehicle {}\npublic class Bus implements Vehicle {}\npublic class Garage {\n    private List<Vehicle> parkingSpots = new ArrayList<>();\n    public void park(Vehicle vehicle){\n        parkingSpots.add(vehicle);\n    }\n}\n```"]