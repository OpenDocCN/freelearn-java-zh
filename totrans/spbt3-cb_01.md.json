["```java\n    package com.packt.football;\n    import java.util.List;\n    import org.springframework.web.bind.annotation.*;\n    @RequestMapping(\"/players\") @RestController\n    public class PlayerController {\n       @GetMapping\n       public List<String> listPlayers() {\n          return List.of(\"Ivana ANDRES\", \"Alexia PUTELLAS\");\n       }\n    }\n    ```", "```java\n    ./mvnw spring-boot:run\n    ```", "```java\n    curl http://localhost:8080/players\n    ```", "```java\n        @PostMapping\n        public String createPlayer(@RequestBody String name) {\n             return \"Player \" + name + \" created\";\n        }\n        ```", "```java\n        @GetMapping(\"/{name}\")\n        public String readPlayer(@PathVariable String name) {\n             return name;\n        }\n        ```", "```java\n        @DeleteMapping(\"/{name}\")\n        public String deletePlayer(@PathVariable String name) {\n             return \"Player \" + name + \" deleted\";\n        }\n        ```", "```java\n        @PutMapping(\"/{name}\")\n        public String updatePlayer(@PathVariable String name, @RequestBody String newName) {\n             return \"Player \" + name + \" updated to \" + newName;\n        }\n        ```", "```java\n    curl http://localhost:8080/players/Ivana%20ANDRES\n    Ivana ANDRES\n    ```", "```java\n    curl --header \"Content-Type: application/text\" --request POST\n    --data 'Itana BONMATI' http://localhost:8080/players\n    Player Itana BONMATI created\n    Perform a DELETE request:\n\n    ```", "```java\n\n    And you will receive this output:\n\n    ```", "```java\n\n    ```", "```java\n    public record Player(String id, int jerseyNumber, String name, String position,     LocalDate dateOfBirth) {\n    }\n    ```", "```java\n        package com.packt.football.exceptions;\n        public class AlreadyExistsException extends RuntimeException {\n             public AlreadyExistsException(String message) {\n                  super(message);\n             }\n        }\n        ```", "```java\n        package com.packt.football.exceptions;\n        public class NotFoundException extends RuntimeException {\n            public NotFoundException(String message) {\n                  super(message);\n             }\n        }\n        ```", "```java\n        @Service\n        public class FootballService {\n        }\n        ```", "```java\n        private final Map<String, Player> players = Map.ofEntries(\n              Map.entry(\"1884823\", new Player(\"1884823\", 5, \"Ivana ANDRES\", \"Defender\", LocalDate.of(1994, 07, 13))),\n              Map.entry(\"325636\", new Player(\"325636\", 11, \"Alexia PUTELLAS\", \"Midfielder\", LocalDate.of(1994, 02, 04\n        ))));\n        ```", "```java\n        public List<Player> listPlayers() {\n             return players.values().stream()\n                    .collect(Collectors.toList());\n        }\n        ```", "```java\n        public Player getPlayer(String id) {\n             Player player = players.get(id);\n              if (player == null)\n                  throw new NotFoundException(\"Player not found\");\n           return player;\n        }\n        ```", "```java\n        public Player addPlayer(Player player) {\n             if (players.containsKey(player.id())) {\n                 throw new AlreadyExistsException(\"The player already exists\");\n             } else {\n                 players.put(player.id(), player);\n                 return player;\n             }\n        }\n        ```", "```java\n        public Player updatePlayer(Player player) {\n             if (!players.containsKey(player.id())) {\n                 throw new NotFoundException(\"The player does not\n        exist\");\n             } else {\n                 players.put(player.id(), player);\n                return player;\n             }\n        }\n        ```", "```java\n        public void deletePlayer(String id) {\n            if (players.containsKey(id)) {\n                 players.remove(id);\n            }\n        }\n        ```", "```java\n        @RequestMapping(\"/players\")\n        @RestController\n        public class PlayerController {\n            private FootballService footballService;\n            public PlayerController(FootballService footballService) {\n                this.footballService = footballService;\n            }\n        }\n        ```", "```java\n        @GetMapping\n        public List<Player> listPlayers() {\n             return footballService.listPlayers();\n        }\n        @GetMapping(\"/{id}\")\n        public Player readPlayer(@PathVariable String id) {\n             return footballService.getPlayer(id);\n        }\n        @PostMapping\n        public void createPlayer(@RequestBody Player player) {\n            footballService.addPlayer(player);\n        }\n        @PutMapping(\"/{id}\")\n        public void updatePlayer(@PathVariable String id,\n                                 @RequestBody Player player) {\n            footballService.updatePlayer(player);\n        }\n        @DeleteMapping(\"/{id}\")\n        public void deletePlayer(@PathVariable String id) {\n            footballService.deletePlayer(id);\n        }\n        ```", "```java\n    ./mvnw spring-boot:run\n    ```", "```java\n    curl http://localhost:8080/players\n    [{\"id\":\"325636\",\"jerseyNumber\":11,\"name\":\"Alexia PUTELLAS\",\"position\":\"Midfielder\",\"dateOfBirth\":\"1994-02- 04\"},{\"id\":\"1884823\",\"jerseyNumber\":5,\"name\":\"Ivana ANDRES\",\"position\":\"Defender\",\"dateOfBirth\":\"1994-07-13\"}]\n    ```", "```java\n    curl http://localhost:8080/players/99999\n    {\"timestamp\":\"2023-09- 16T23:18:41.906+00:00\",\"status\":500,\"error\":\"Internal Server Error\",\"path\":\"/players/99999\"}\n    ```", "```java\n    @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Not found\")\n    @ExceptionHandler(NotFoundException.class)\n    public void notFoundHandler() {\n    }\n    ```", "```java\n    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = \"Already exists\")\n    @ExceptionHandler(AlreadyExistsException.class) public void alreadyExistsHandler() {\n    }\n    ```", "```java\n    ./mvnw spring-boot:run\n    ```", "```java\n        curl http://localhost:8080/players/99999\n        {\"timestamp\":\"2023-09- 16T23:21:39.936+00:00\",\"status\":404,\"error\":\"Not\n        Found\",\"path\":\"/players/99999\"}\n        ```", "```java\n        data=\"{'id': '8888', 'jerseyNumber':6, 'name':'Cata COLL',\"\n        data=${data}\" 'position':'Goalkeeper', \"\n        data=${data}\" 'dateOfBirth': '2001-04-23'}\"\n        curl --header \"Content-Type: application/json\" --request POST \\\n         --data $data  http://localhost:8080/players\n        ```", "```java\n@GetMapping(\"/{id}\")\npublic ResponseEntity<Player> readPlayer(@PathVariable String id) \n{\n  try {\n          Player player = footballService.getPlayer(id);\n          return new ResponseEntity<>(player, HttpStatus.OK);\n     } catch (NotFoundException e) {\n          return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n      }\n}\n```", "```java\npackage com.packt.football;\n@ControllerAdvice\npublic class GlobalExceptionHandler {\n    @ExceptionHandler(NotFoundException.class)\n     public ResponseEntity<String>\nhandleGlobalException(NotFoundException ex) {\n        return new ResponseEntity<String>(ex.getMessage(), HttpStatus.NOT_FOUND);\n    }\n}\n```", "```java\n    @WebMvcTest(value = PlayerController.class)\n    public class PlayerControllerTest {\n    }\n    ```", "```java\n    @Autowired\n    private MockMvc mvc;\n    ```", "```java\n    @Test\n    public void testListPlayers() throws Exception {\n    }\n    ```", "```java\n    Player player1 = new Player(\"1884823\", 5, \"Ivana ANDRES\", \"Defender\", LocalDate.of(1994, 07, 13));\n    Player player2 = new Player(\"325636\", 11, \"Alexia PUTELLAS\", \"Midfielder\", LocalDate.of(1994, 02, 04));\n    List<Player> players = List.of(player1, player2);\n    mvc field created in *step 2* to emulate the HTTP calls and validate it’s behaving as expected:\n    ```", "```java\nMvcResult result = mvc.perform(MockMvcRequestBuilders                 .get(\"/players\")                .accept(MediaType.APPLICATION_JSON))\n                .andExpect(status().isOk())\n                .andExpect(MockMvcResultMatchers                     .jsonPath(\"$\", hasSize(2)))\n                .andReturn();\n```", "```java\nString json = result.getResponse().getContentAsString();\nObjectMapper mapper = new ObjectMapper();\nmapper.registerModule(new JavaTimeModule());\nList<Player> returnedPlayers = mapper.readValue(json,\n                mapper.getTypeFactory().constructCollectionType(List.class, Player.class));\ntestReadPlayer_doesnt_exist in the PlayerControllerTest class. Remember to annotate it with @Test:\n\n```", "```java\n\n1.  Let’s arrange the `getPlayer` method of the `FootballService` class to throw a `NotFoundException` when trying to get the player `1884823`. For that, use the following code:\n\n```", "```java\nmvc.perform(MockMvcRequestBuilders.get(\"/players/\" + id).accept(MediaType.APPLICATION_JSON))\n      .andExpect(status().isNotFound());\n```", "```java\nmvn test\n```", "```java\n    <dependencies>\n       <dependency>\n          <groupId>org.springdoc</groupId>\n          <artifactId>springdoc-openapi-starter-webmvc- ui</artifactId>\n          <version>2.2.0</version>\n       </dependency>\n    </dependencies>\n    ```", "```java\n    public record Player(String id, Integer jerseyNumber,\n                         String name, String position,\n                         LocalDate dateOfBirth) {\n    }\n    ```", "```java\n    @FeignClient(name = \"football\", url = \"http://localhost:8080\")\n    public interface FootballClient {\n        @RequestMapping(method = RequestMethod.GET,\n                        value = \"/players\")\n        List<Player> getPlayers();\n    }\n    ```", "```java\n    @RestController\n    @RequestMapping(\"/albums\")\n    public class AlbumsController {\n         private final FootballClient footballClient;\n         public AlbumsController(FootballClient footballClient) {\n              this.footballClient = footballClient;\n         }\n         @GetMapping(\"/players\")\n         public List<Player> getPlayers() {\n              return footballClient.getPlayers();\n         }\n    }\n    ```", "```java\n    @EnableFeignClients\n    @SpringBootApplication\n    public class AlbumsApplication {\n    }\n    ```", "```java\n    ./mvnw spring-boot:run \\\n    -Dspring-boot.run.arguments=-- server.port=8081\n    ```", "```java\n    curl http://localhost:8081/albums/players\n    ```", "```java\n    [{\"id\":\"1884823\",\"jerseyNumber\":5,\"name\":\"Ivana ANDRES\",\"position\":\"Defender\",\"dateOfBirth\":\"1994-07- 13\"},{\"id\":\"325636\",\"jerseyNumber\":11,\"name\":\"Alexia PUTELLAS\",\"position\":\"Midfielder\",\"dateOfBirth\":\"1994-02-04\"}]\n    ```", "```java\n    @Configuration\n    public class AlbumsConfiguration {\n        @Value(\"${football.api.url:http://localhost:8080}\")\n        String baseURI;\n        @Bean\n        RestClient restClient() {\n            return RestClient.create(baseURI);\n        }\n    }\n    ```", "```java\n    @Service\n    public class FootballClientService {\n        private RestClient restClient;\n        public FootballClientService(RestClient restClient) {\n            this.restClient = restClient;\n        }\n    }\n    ```", "```java\n    public List<Player> getPlayers() {\n        return restClient.get().uri(\"/players\").retrieve()\n           .body(new ParameterizedTypeReference<List<Player>>(){ });\n    }\n    ```", "```java\n    public Optional<Player> getPlayer(String id) {\n        return restClient.get().uri(\"/players/{id}\", id)\n           .exchange((request, response) -> {\n               if (response.getStatusCode().equals(HttpStatus.NOT_FOUND)) {\n                  return Optional.empty();\n               }\n               return Optional.of(response.bodyTo(Player.class));\n          });\n    }\n    ```", "```java\nfootball:\n  api:\n    url: http://locahost:8080\n```", "```java\n    <dependency>\n        <groupId>com.github.tomakehurst</groupId>\n        <artifactId>wiremock-standalone</artifactId>\n        <version>3.0.1</version>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @SpringBootTest(properties = { \"football.api.url=http://localhost:7979\" })\n    public class FootballClientServiceTests {\n    }\n    ```", "```java\n    private static WireMockServer wireMockServer;\n    @BeforeAll\n    static void init() {\n        wireMockServer = new WireMockServer(7979);\n        wireMockServer.start();\n        WireMock.configureFor(7979);\n    }\n    ```", "```java\n    @Autowired\n    FootballClientService footballClientService;\n    ```", "```java\n    @Test\n    public void getPlayerTest() {\n    ```", "```java\n    WireMock.stubFor(WireMock.get(WireMock.urlEqualTo(\"/players/325636\"))\n              .willReturn(WireMock.aResponse()\n              .withHeader(\"Content-Type\", \"application/json\")\n              .withBody(\"\"\"\n                      {\n                          \"id\": \"325636\",\n                          \"jerseyNumber\": 11,\n                          \"name\": \"Alexia PUTELLAS\",\n                          \"position\": \"Midfielder\",\n                          \"dateOfBirth\": \"1994-02-04\"\n                       }\n                       \"\"\")));\n    ```", "```java\n    Optional<Player> player = footballClientService.getPlayer(\"325636\");\n    ```", "```java\n    Player expectedPlayer =new Player(\"325636\", 11, \"Alexia PUTELLAS\", \"Midfielder\", LocalDate.of(1994, 2, 4));\n    assertEquals(expectedPlayer, player.get());\n    ```", "```java\n\n```"]