["```java\nctx.select().from(OFFICE, DEPARTMENT).fetch();\n```", "```java\nctx.select().from(OFFICE).crossJoin(DEPARTMENT).fetch();\n```", "```java\nSELECT `classicmodels`.`office`.`office_code`,\n```", "```java\n       `classicmodels`.`office`.`city`,\n```", "```java\n       ...\n```", "```java\n       `classicmodels`.`department`.`department_id`,\n```", "```java\n       `classicmodels`.`department`.`name`,\n```", "```java\n       ...\n```", "```java\nFROM `classicmodels`.`office`\n```", "```java\nCROSS JOIN `classicmodels`.`department`\n```", "```java\n ctx.select(concat(OFFICE.CITY, inline(\", \"), OFFICE.COUNTRY,\n```", "```java\n            inline(\": \"), DEPARTMENT.NAME).as(\"offices\"))\n```", "```java\n    .from(OFFICE).crossJoin(DEPARTMENT)\n```", "```java\n    .where(row(OFFICE.CITY, OFFICE.COUNTRY).isNotNull())\n```", "```java\n    .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, OFFICE.CITY)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(OFFICE)\n```", "```java\n   .on(EMPLOYEE.OFFICE_CODE.eq(OFFICE.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nSELECT `classicmodels`.`employee`.`first_name`,\n```", "```java\n       `classicmodels`.`employee`.`last_name`,\n```", "```java\n       `classicmodels`.`office`.`city`\n```", "```java\nFROM `classicmodels`.`employee`\n```", "```java\nJOIN `classicmodels`.`office` ON  \n```", "```java\n   `classicmodels`.`employee`.'office_code' \n```", "```java\n      = `classicmodels`.`office`.`office_code`\n```", "```java\nctx.select()\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .innerJoin(OFFICE_HAS_MANAGER)\n```", "```java\n      .on(MANAGER.MANAGER_ID\n```", "```java\n         .eq(OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID))\n```", "```java\n   .innerJoin(OFFICE)\n```", "```java\n      .on(OFFICE.OFFICE_CODE\n```", "```java\n         .eq(OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\n…\n```", "```java\nFROM \n```", "```java\n   \"public\".\"manager\" \n```", "```java\nJOIN \"public\".\"office_has_manager\" \n```", "```java\nON \"public\".\"manager\".\"manager_id\" = \n```", "```java\n   \"public\".\"office_has_manager\".\"managers_manager_id\" \n```", "```java\nJOIN \"public\".\"office\" \n```", "```java\nON \"public\".\"office\".\"office_code\" =  \n```", "```java\n   \"public\".\"office_has_manager\".\"offices_office_code\"\n```", "```java\nctx.select()\n```", "```java\n   .from(MANAGER\n```", "```java\n      .innerJoin(OFFICE_HAS_MANAGER\n```", "```java\n      .innerJoin(OFFICE)\n```", "```java\n         .on(OFFICE.OFFICE_CODE.eq(\n```", "```java\n             OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE)))\n```", "```java\n      .on(MANAGER.MANAGER_ID.eq(\n```", "```java\n          OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID)))\n```", "```java\n   .fetch();\n```", "```java\n…\n```", "```java\nFROM \n```", "```java\n   \"public\".\"manager\" \n```", "```java\nJOIN \n```", "```java\n(\n```", "```java\n   \"public\".\"office_has_manager\" \n```", "```java\n    JOIN \"public\".\"office\" \n```", "```java\n    ON \"public\".\"office\".\"office_code\" = \n```", "```java\n         \"public\".\"office_has_manager\".\"offices_office_code\"\n```", "```java\n) ON \"public\".\"manager\".\"manager_id\" = \n```", "```java\n     \"public\".\"office_has_manager\".\"managers_manager_id\"\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftOuterJoin(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftOuterJoin(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.isNull())\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  [classicmodels].[dbo].[employee].[first_name],\n```", "```java\n  [classicmodels].[dbo].[employee].[last_name],\n```", "```java\n  [classicmodels].[dbo].[sale].[sale] \n```", "```java\nFROM\n```", "```java\n  [classicmodels].[dbo].[employee] \n```", "```java\nLEFT OUTER JOIN\n```", "```java\n  [classicmodels].[dbo].[sale] \n```", "```java\nON [classicmodels].[dbo].[employee].[employee_number] =     \n```", "```java\n   [classicmodels].[dbo].[sale].[employee_number] \n```", "```java\nWHERE [classicmodels].[dbo].[sale].[employee_number] IS NULL\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE, SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.plus()\n```", "```java\n       .eq(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nSELECT \n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\".\"FIRST_NAME\", \n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\".\"LAST_NAME\", \n```", "```java\n  \"CLASSICMODELS\".\"SALE\".\"SALE\" \n```", "```java\nFROM \n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\", \n```", "```java\n  \"CLASSICMODELS\".\"SALE\" \n```", "```java\nWHERE \n```", "```java\n  \"CLASSICMODELS\".\"SALE\".\"EMPLOYEE_NUMBER\"(+) =  \n```", "```java\n     \"CLASSICMODELS\".\"EMPLOYEE\".\"EMPLOYEE_NUMBER\"\n```", "```java\nctx.select(SALE.FISCAL_YEAR, \n```", "```java\n           EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n           sum(nvl(SALE.SALE_, 0.0d)).as(\"SALES\")) \n```", "```java\n   .from(EMPLOYEE) \n```", "```java\n   .leftOuterJoin(SALE).partitionBy(SALE.FISCAL_YEAR) \n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER)) \n```", "```java\n   .where(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\")) \n```", "```java\n   .groupBy(SALE.FISCAL_YEAR, \n```", "```java\n            EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME) \n```", "```java\n   .orderBy(1, 2) \n```", "```java\n   .fetch(); \n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME,    \n```", "```java\n           SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(SALE)\n```", "```java\n   .using(EMPLOYEE.EMPLOYEE_NUMBER)\n```", "```java\n   .fetch();\n```", "```java\nSELECT `classicmodels`.`employee`.`first_name`,\n```", "```java\n       `classicmodels`.`employee`.`last_name`,\n```", "```java\n       `classicmodels`.`sale`.`sale`\n```", "```java\nFROM `classicmodels`.`employee`\n```", "```java\nJOIN `classicmodels`.`sale` USING (`employee_number`)\n```", "```java\n...using(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.CODE)\n```", "```java\n.using(OFFICE.CITY, OFFICE.COUNTRY)\n```", "```java\nctx.select(...)\n```", "```java\n   .from(PAYMENT)\n```", "```java\n   .innerJoin(BANK_TRANSACTION)\n```", "```java\n   .on(PAYMENT.CUSTOMER_NUMBER.eq(\n```", "```java\n       BANK_TRANSACTION.CUSTOMER_NUMBER)               \n```", "```java\n   .and(PAYMENT.CHECK_NUMBER.eq(\n```", "```java\n       BANK_TRANSACTION.CHECK_NUMBER)))\n```", "```java\nctx.select(...)\n```", "```java\n   .from(PAYMENT)\n```", "```java\n   .innerJoin(BANK_TRANSACTION)\n```", "```java\n   .onKey()\n```", "```java\n   .fetch();\n```", "```java\nSELECT ...\n```", "```java\nFROM `classicmodels`.`payment`\n```", "```java\nJOIN `classicmodels`.`bank_transaction` \n```", "```java\nON (`classicmodels`.`bank_transaction`.`customer_number` \n```", "```java\n  = `classicmodels`.`payment`.`customer_number`\n```", "```java\nAND `classicmodels`.`bank_transaction`.`check_number` \n```", "```java\n  = `classicmodels`.`payment`.`check_number`)\n```", "```java\nctx.select(…)\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .innerJoin(PRODUCTLINEDETAIL)\n```", "```java\n   .onKey(PRODUCTLINEDETAIL_PRODUCTLINE_FK)\n```", "```java\n   .fetch();\n```", "```java\nSELECT ... \n```", "```java\nFROM [classicmodels].[dbo].[productline] \n```", "```java\nJOIN \n```", "```java\n     [classicmodels].[dbo].[productlinedetail] \n```", "```java\n  ON \n```", "```java\n   ([classicmodels].[dbo].[productlinedetail].[product_line] = \n```", "```java\n    [classicmodels].[dbo].[productline].[product_line] \n```", "```java\n  AND \n```", "```java\n    [classicmodels].[dbo].[productlinedetail].[code] = \n```", "```java\n    [classicmodels].[dbo].[productline].[code]) \n```", "```java\nSELECT o.office_code, e.first_name, e.last_name\n```", "```java\nFROM employee AS e\n```", "```java\nJOIN office AS o ON e.office_code = o.office_code\n```", "```java\nSELECT e.office.office_code, e.first_name, e.last_name\n```", "```java\nFROM employee AS e\n```", "```java\nctx.select(EMPLOYEE.office().OFFICE_CODE, \n```", "```java\n           EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(                      \n```", "```java\n      ORDERDETAIL.order().customer().employee().OFFICE_CODE,\n```", "```java\n      ORDERDETAIL.order().customer().CUSTOMER_NAME,\n```", "```java\n      ORDERDETAIL.order().SHIPPED_DATE,       \n```", "```java\n      ORDERDETAIL.order().STATUS,\n```", "```java\n      ORDERDETAIL.QUANTITY_ORDERED, ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .orderBy(ORDERDETAIL.order().customer().CUSTOMER_NAME)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(OFFICE_HAS_MANAGER.manager().fields())\n```", "```java\n   .from(OFFICE_HAS_MANAGER)\n```", "```java\n   .where(OFFICE_HAS_MANAGER.office().OFFICE_CODE.eq(\"6\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, \n```", "```java\n           EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(OFFICE, EMPLOYEE)\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .orderBy(OFFICE.OFFICE_CODE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(concat(EMPLOYEE.FIRST_NAME, inline(\" \"), \n```", "```java\n           EMPLOYEE.LAST_NAME).as(\"employee\"),\n```", "```java\n           concat(EMPLOYEE.employee().FIRST_NAME, inline(\" \"), \n```", "```java\n           EMPLOYEE.employee().LAST_NAME).as(\"reports_to\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select().from(EMPLOYEE)\n```", "```java\n   .naturalJoin(SALE)\n```", "```java\n   .fetch();\n```", "```java\nSELECT \"public\".\"employee\".\"employee_number\", ...\n```", "```java\n       \"public\".\"sale\".\"sale_id\", ...\n```", "```java\nFROM \"public\".\"employee\"\n```", "```java\nNATURAL JOIN \"public\".\"sale\"\n```", "```java\nctx.select()\n```", "```java\n   .from(PAYMENT.innerJoin(BANK_TRANSACTION).onKey())\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(PAYMENT.innerJoin(BANK_TRANSACTION)\n```", "```java\n   .using(PAYMENT.CACHING_DATE))                       \n```", "```java\n   .fetch();\n```", "```java\nctx.select(asterisk())\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .naturalJoin(TOP3PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(table(\"EMPLOYEE\"))\n```", "```java\n   .naturalJoin(table(\"SALE\"))\n```", "```java\n   .fetch()\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, ORDER.ORDER_ID)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .innerJoin(ORDERDETAIL).on(\n```", "```java\n       ORDERDETAIL.PRODUCT_ID.eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .innerJoin(ORDER).on(\n```", "```java\n       ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, ORDER.ORDER_ID)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .straightJoin(ORDERDETAIL).on(\n```", "```java\n       ORDERDETAIL.PRODUCT_ID.eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .innerJoin(ORDER).on(\n```", "```java\n       ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, ORDER.ORDER_ID) \n```", "```java\n   .hint(\"/*+LEADING(CLASSICMODELS.ORDERDETAIL \n```", "```java\n                     CLASSICMODELS.PRODUCT)*/\") \n```", "```java\n   … // joins come here \n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, ORDER.ORDER_ID) \n```", "```java\n   … // joins come here \n```", "```java\n   .option(\"OPTION (FORCE ORDER)\") \n```", "```java\n   .fetch(); \n```", "```java\nSELECT employee.first_name, employee.last_name FROM employee\n```", "```java\nWHERE EXISTS\n```", "```java\n    (SELECT 1 FROM customer \n```", "```java\n     WHERE employee.employee_number \n```", "```java\n              = customer.sales_rep_employee_number);\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftSemiJoin(CUSTOMER)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(\n```", "```java\n       CUSTOMER.SALES_REP_EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nSELECT employee.first_name, employee.last_name FROM employee\n```", "```java\nWHERE NOT (EXISTS\n```", "```java\n       (SELECT 1\n```", "```java\n       FROM customer\n```", "```java\n       WHERE employee.employee_number \n```", "```java\n               = customer.sales_rep_employee_number))\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftAntiJoin(CUSTOMER)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(\n```", "```java\n       CUSTOMER.SALES_REP_EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(ctx.selectDistinct(ORDERDETAIL.ORDER_ID.as(\"OID\"))\n```", "```java\n   .from(ORDERDETAIL).asTable(\"T1\")\n```", "```java\n   .leftAntiJoin(TOP3PRODUCT    \n```", "```java\n     .leftAntiJoin(ORDERDETAIL)\n```", "```java\n     .on(field(\"T\", \"OID\")).eq(ORDERDETAIL.ORDER_ID)\n```", "```java\n       .and(TOP3PRODUCT.PRODUCT_ID\n```", "```java\n         .eq(ORDERDETAIL.PRODUCT_ID))))\n```", "```java\n   .on(trueCondition()))\n```", "```java\n  .fetch();\n```", "```java\nctx.select().from(ORDERDETAIL\n```", "```java\n   .divideBy(TOP3PRODUCT)\n```", "```java\n   .on(field(TOP3PRODUCT.PRODUCT_ID).eq(\n```", "```java\n             ORDERDETAIL.PRODUCT_ID))                      \n```", "```java\n   .returning(ORDERDETAIL.ORDER_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE, lateral(select().from(DEPARTMENT)\n```", "```java\n   .where(OFFICE.OFFICE_CODE.eq(\n```", "```java\n          DEPARTMENT.OFFICE_CODE))).as(\"t\"))\n```", "```java\n   .fetch()\n```", "```java\nSELECT `classicmodels`.`office`.`office_code`,...\n```", "```java\n       `t`.`department_id`,\n```", "```java\n       ...\n```", "```java\nFROM `classicmodels`.`office`,\n```", "```java\n  LATERAL\n```", "```java\n   (SELECT `classicmodels`.`department`.`department_id`,...\n```", "```java\n    FROM `classicmodels`.`department`\n```", "```java\n    WHERE `classicmodels`.`office`.`office_code` \n```", "```java\n        = `classicmodels`.`department`.`office_code`) AS `t`\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .leftOuterJoin(lateral(select().from(DEPARTMENT)\n```", "```java\n      .where(OFFICE.OFFICE_CODE\n```", "```java\n          .eq(DEPARTMENT.OFFICE_CODE))).as(\"t\"))\n```", "```java\n      .on(trueCondition())\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(DEPARTMENT, lateral(select(field(name(\"t\", \"topic\")))\n```", "```java\n      .from(unnest(DEPARTMENT.TOPIC).as(\"t\", \"topic\"))\n```", "```java\n      .where(field(name(\"t\", \"topic\"))\n```", "```java\n         .in(\"commerce\", \"business\"))).as(\"r\"))\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  \"public\".\"department\".\"department_id\",\n```", "```java\n  ...\n```", "```java\n  \"public\".\"department\".\"accrued_liabilities\",\n```", "```java\n  \"r\".\"topic\" \n```", "```java\nFROM\n```", "```java\n  \"public\".\"department\",\n```", "```java\n LATERAL (SELECT\n```", "```java\n            \"t\".\"topic\" \n```", "```java\n           FROM\n```", "```java\n            unnest(\"public\".\"department\".\"topic\") \n```", "```java\n               AS \"t\" (\"topic\") \n```", "```java\n           WHERE\n```", "```java\n            \"t\".\"topic\" IN (?, ?)) AS \"r\"\n```", "```java\nctx.select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.FIRST_NAME,\n```", "```java\n           EMPLOYEE.LAST_NAME, field(name(\"t\", \"sales\")))\n```", "```java\n   .from(EMPLOYEE, \n```", "```java\n         lateral(select(SALE.SALE_.as(\"sales\"))\n```", "```java\n                    .from(SALE)\n```", "```java\n                    .where(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n                       .eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n                    .orderBy(SALE.SALE_.desc())\n```", "```java\n                    .limit(3).asTable(\"t\")))\n```", "```java\n   .orderBy(EMPLOYEE.EMPLOYEE_NUMBER)\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  `classicmodels`.`employee`.`employee_number`,\n```", "```java\n  `classicmodels`.`employee`.`first_name`,\n```", "```java\n  `classicmodels`.`employee`.`last_name`,\n```", "```java\n  `t`.`sales` \n```", "```java\nFROM `classicmodels`.`employee`,\n```", "```java\nLATERAL (SELECT `classicmodels`.`sale`.`sale` as `sales` \n```", "```java\n         FROM `classicmodels`.`sale` \n```", "```java\n         WHERE `classicmodels`.`employee`.`employee_number` \n```", "```java\n             = `classicmodels`.`sale`.`employee_number` \n```", "```java\n        ORDER BY `classicmodels`.`sale`.`sale` desc limit ?) \n```", "```java\n   as `t` \n```", "```java\nORDER BY `classicmodels`.`employee`.`employee_number`\n```", "```java\nCREATE TYPE \"TABLE_RES_OBJ\" AS OBJECT (SALES FLOAT); \n```", "```java\nCREATE TYPE \"TABLE_RES\" AS TABLE OF TABLE_RES_OBJ;\n```", "```java\nCREATE OR REPLACE NONEDITIONABLE FUNCTION    \n```", "```java\n \"TOP_THREE_SALES_PER_EMPLOYEE\" (\"employee_nr\" IN NUMBER) \n```", "```java\n  RETURN TABLE_RES IS\n```", "```java\n    \"table_result\" TABLE_RES;\n```", "```java\n  BEGIN\n```", "```java\n    SELECT\n```", "```java\n        TABLE_RES_OBJ(\"SALE\".\"SALE\") \"sales\"\n```", "```java\n    BULK COLLECT\n```", "```java\n    INTO \"table_result\"\n```", "```java\n    FROM\n```", "```java\n        \"SALE\"\n```", "```java\n    WHERE\n```", "```java\n        \"employee_nr\" = \"SALE\".\"EMPLOYEE_NUMBER\"\n```", "```java\n    ORDER BY\n```", "```java\n        \"SALE\".\"SALE\" DESC\n```", "```java\n    FETCH NEXT 3 ROWS ONLY;\n```", "```java\n    RETURN \"table_result\";\n```", "```java\n  END;\n```", "```java\nctx.select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.FIRST_NAME,\n```", "```java\n           EMPLOYEE.LAST_NAME, field(name(\"T\", \"SALES\")))\n```", "```java\n   .from(EMPLOYEE, lateral(select().from(\n```", "```java\n         TOP_THREE_SALES_PER_EMPLOYEE\n```", "```java\n            .call(EMPLOYEE.EMPLOYEE_NUMBER)).asTable(\"T\")))\n```", "```java\n   .orderBy(EMPLOYEE.EMPLOYEE_NUMBER)\n```", "```java\n   .fetch();\n```", "```java\nSELECT\n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\".\"EMPLOYEE_NUMBER\",\n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\".\"FIRST_NAME\",\n```", "```java\n  \"CLASSICMODELS\".\"EMPLOYEE\".\"LAST_NAME\",\n```", "```java\n  \"T\".\"SALES\" \n```", "```java\nFROM \"CLASSICMODELS\".\"EMPLOYEE\",\n```", "```java\n     LATERAL (SELECT \n```", "```java\n       \"TOP_THREE_SALES_PER_EMPLOYEE\".\"SALES\" \n```", "```java\n     FROM\n```", "```java\n       table(\"CLASSICMODELS\".\"TOP_THREE_SALES_PER_EMPLOYEE\"\n```", "```java\n            (\"CLASSICMODELS\".\"EMPLOYEE\".\"EMPLOYEE_NUMBER\"))    \n```", "```java\n             \"TOP_THREE_SALES_PER_EMPLOYEE\") \"T\" \n```", "```java\nORDER BY \"CLASSICMODELS\".\"EMPLOYEE\".\"EMPLOYEE_NUMBER\"\n```", "```java\nMaven: <tableValuedFunctions>true</tableValuedFunctions>\n```", "```java\nGradle: database { tableValuedFunctions = true }\n```", "```java\n...withDatabase(new Database()\n```", "```java\n     .withTableValuedFunctions(true)\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE).crossApply(select()\n```", "```java\n                 .from(DEPARTMENT)\n```", "```java\n                 .where(OFFICE.OFFICE_CODE\n```", "```java\n                   .eq(DEPARTMENT.OFFICE_CODE)).asTable(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nSELECT [classicmodels].[dbo].[office].[office_code], ...     \n```", "```java\n       [t].[department_id], ...\n```", "```java\nFROM [classicmodels].[dbo].[office] CROSS APPLY\n```", "```java\n  (SELECT [classicmodels].[dbo].[department].[department_id],  \n```", "```java\n          ...\n```", "```java\n   FROM [classicmodels].[dbo].[department]\n```", "```java\n   WHERE [classicmodels].[dbo].[office].[office_code] \n```", "```java\n       = [classicmodels].[dbo].[department].[office_code] ) [t]\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .outerApply(select()\n```", "```java\n                 .from(DEPARTMENT)\n```", "```java\n                 .where(OFFICE.OFFICE_CODE\n```", "```java\n                    .eq(DEPARTMENT.OFFICE_CODE)).asTable(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nSELECT [classicmodels].[dbo].[office].[office_code], ...\n```", "```java\n       [t].[department_id], ...\n```", "```java\nFROM [classicmodels].[dbo].[office] OUTER APPLY\n```", "```java\n  (SELECT [classicmodels].[dbo].[department].[department_id], \n```", "```java\n   ...\n```", "```java\n   FROM [classicmodels].[dbo].[department]\n```", "```java\n   WHERE [classicmodels].[dbo].[office].[office_code] \n```", "```java\n     = [classicmodels].[dbo].[department].[office_code] ) [t]\n```"]