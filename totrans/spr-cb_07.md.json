["```java\npublic static int add(int a, int b) {\n  return a + b;\n}\n```", "```java\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.10</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @Test\n    public void testAdd() {\n      assertEquals(NumberUtil.add(5, 3), 8);\n      assertEquals(NumberUtil.add(1500, 32), 1532);\n    }\n    ```", "```java\n    mvn test\n    ```", "```java\npublic static int add(int a, int b) {\n  return a + b;\n}\n```", "```java\n    <dependency>\n      <groupId>org.testng</groupId>\n      <artifactId>testng</artifactId>\n      <version>6.1.1</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    import static org.testng.Assert.*;\n\n    public class NumberUtilTest {\n\n    }\n    ```", "```java\n    @DataProvider\n    public Object[][] values() {  \n    return new Object[][] {\n      new Object[] { 1, 2, 3 },\n      new Object[] { 4, 5, 9 },\n      new Object[] { 3000, 2000, 5000 },\n      new Object[] { 25, 50, 75 },\n     };\n    ```", "```java\n    @Test(dataProvider = \"values\")\n    public void testAdd(int a, int b, int c) {\n      assertEquals(NumberUtil.add(a, b), c);\n    }\n    ```", "```java\n    mvn test\n    ```", "```java\nPASSED: testAdd(1, 2, 3)\nPASSED: testAdd(4, 5, 9)\nPASSED: testAdd(3000, 2000, 5000)\n```", "```java\n@Test\npublic void connectToDatabase() {}\n\n@Test(dependsOnMethods = { \"connectToDatabase\" })\npublic void testMyFancySQLQuery() {\n  ...\n}\n```", "```java\npublic class StringUtil {\n  public String concat(String a, String b) {\n    return a + b;\n  }\n}\n```", "```java\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-core</artifactId>\n      <version>1.10.8</version>\n        <scope>test</scope>\n    </dependency>\n    ```", "```java\n    StringUtil stringUtilMock = Mockito.mock(StringUtil.class);\n    ```", "```java\n    Mockito.when(stringUtilMock.concat(\"a\", \"b\")).thenReturn(\"ab\");\n    Mockito.when(stringUtilMock.concat(\"aa\", \"bb\")).thenReturn(\"aabb\");\n    ```", "```java\n    assertEquals(stringUtilMock.concat(\"a\", \"b\"), \"ab\");    \n    assertEquals(stringUtilMock.concat(\"aa\", \"bb\"), \"aabb\");    \n    ```", "```java\nMockito.verify(stringUtilMock, VerificationModeFactory.times(2)).concat(Mockito.anyString(), Mockito.anyString());\n```", "```java\nVerificationModeFactory.atLeastOnce()\nVerificationModeFactory.atLeast(minNumberOfInvocations)\nVerificationModeFactory.atMost(maxNumberOfInvocations)\n\nMockito.anyObject()\nMockito.any(class)\nMockito.anyListOf(class)\n```", "```java\nMockito.reset(stringUtilMock);\n```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>4.1.1.RELEASE</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @RunWith(SpringJUnit4ClassRunner.class)\n    @ContextConfiguration(classes = {AppConfig.class})\n    @WebAppConfiguration\n    public class TestControllerTest {\n    …\n    ```", "```java\n    @Autowired\n    private UserDAO userDAO;\n\n    @Test\n    public void testListUsers() {\n      List<User> users = userDAO.findAll();\n      ...\n    }  \n    ```", "```java\n@ContextConfiguration(classes = {AppTestConfig.class})\n```", "```java\n@ContextConfiguration(classes = {AppConfig.class, AppTestConfig.class})\n```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>4.1.1.RELEASE</version>\n      <scope>test</scope>\n    </dependency>\n    ```", "```java\n    @ContextConfiguration(classes = {AppConfig.class})\n    @WebAppConfiguration\n    public class TestControllerTest extends AbstractTestNGSpringContextTests {\n    …\n    ```", "```java\n    @Autowired\n    private UserDAO userDAO;\n\n    @Test\n    public void testListUsers() {\n      List<User> users = userDAO.findAll();\n      ...\n    }  \n    ```", "```java\n@ContextConfiguration(classes = {AppTestConfig.class})\n```", "```java\n@ContextConfiguration(classes = {AppConfig.class, AppTestConfig.class})\n```", "```java\npublic class UserDAOTest extends AbstractTransactionalTestNGSpringContextTests  {\n...\n```", "```java\n@Transactional\npublic class UserDAOTest {\n...\n```", "```java\n@RequestMapping(\"concat\")\npublic String concat(@RequestParam String a, @RequestParam String b, Model model) {\n  String result = a + b;\n  model.addAttribute(\"result\", result);\n  return \"concat\";\n}\n```", "```java\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-test</artifactId>\n      <version>4.1.1.RELEASE</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n        <groupId>org.hamcrest</groupId>\n        <artifactId>hamcrest-all</artifactId>\n        <version>1.3</version>\n        <scope>test</scope>\n     </dependency>\n    ```", "```java\n    @ContextConfiguration(classes = {AppConfig.class})\n    @WebAppConfiguration\n    public class StringControllerTest {\n    ...\n    ```", "```java\n    @Autowired\n    private WebApplicationContext wac;\n    ```", "```java\n    private MockMvc mockMvc;\n\n    @BeforeMethod\n    public void setup() {\n        this.mockMvc = MockMvcBuilders.webAppContextSetup(this.wac).build();\n    }\n    ```", "```java\n    import static org.springframework.test.web.servlet.request. MockMvcRequestBuilders.*;\n    import static org.springframework.test.web.servlet.result. MockMvcResultMatchers.*;\n    ```", "```java\n    @Test\n    public void testTest1() throws Exception {\n        this.mockMvc.perform(post(\"/concat\").param(\"a\", \"red\").param(\"b\", \"apple\"))\n        .andExpect(status().isOk())\n        .andExpect(model().attribute(\"result\", \"redapple\"))\n        .andExpect(forwardedUrl(\"/WEB-INF/jsp/concat.jsp\"));\n    }\n    ```", "```java\nthis.mockMvc.perform(...)\n    ...\n        .andDo(MockMvcResultHandlers.print());\n```", "```java\nMockHttpServletRequest:\n         HTTP Method = POST\n         Request URI = /concat\n          Parameters = {a=[red], b=[apple]}\n             Headers = {}\n\n             Handler:\n                Type = com.spring_cookbook.controllers.StringController\n              Method = public java.lang.String com.spring_cookbook.controllers.StringController.concat (java.lang.String,java.lang.String,org.springframework.ui.Model)\n\n               Async:\n   Was async started = false\n        Async result = null\n\n  Resolved Exception:\n                Type = null\n\n        ModelAndView:\n           View name = concat\n                View = null\n           Attribute = result\n               value = redapple\n\n            FlashMap:\n\nMockHttpServletResponse:\n              Status = 200\n       Error message = null\n             Headers = {}\n        Content type = null\n                Body = \n       Forwarded URL = /WEB-INF/jsp/concat.jsp\n      Redirected URL = null\n             Cookies = []\n```", "```java\nthis.mockMvc.perform(get(\"/user/5\"))\n    .andExpect(content().contentType(\"application/json\"))\n    .andExpect(jsonPath(\"$.firstName\").value(\"Scott.\"));\n```"]