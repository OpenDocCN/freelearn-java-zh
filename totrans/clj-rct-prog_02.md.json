["```java\n(def numbers (atom []))\n\n(defn adder [key ref old-state new-state]\n  (print \"Current sum is \" (reduce + new-state)))\n\n(add-watch numbers :adder adder) \n```", "```java\n(->> [1 2 3 4 5 6]\n     (map inc)\n     (filter even?)\n     (reduce +))\n```", "```java\npublic interface Iterator<E> {\n    boolean hasNext();\n    E next();\n    void remove();\n}\n```", "```java\npublic interface Observer<T> {\n    void onCompleted();\n    void onError(Throwable e);\n    void onNext(T t);\n}\n```", "```java\nIterator<E> {                       Observer<T> {\n    boolean hasNext();                  void onCompleted();\n    E next();                           void onError(Throwable e);\n    void remove();                      void onNext(T t);\n}                                       }\n```", "```java\n$ lein new rx-playground\n\n```", "```java\n(defproject rx-playground \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.5.1\"]\n                 [io.reactivex/rxclojure \"1.0.0\"]])\"]])\n```", "```java\n$ lein repl\n\n```", "```java\n(require '[rx.lang.clojure.core :as rx])\n(import '(rx Observable))\n```", "```java\n(def obs (rx/return 10))\n```", "```java\n(rx/subscribe obs\n              (fn [value]\n                (prn (str \"Got value: \" value))))\n```", "```java\n(-> (rx/seq->o [1 2 3 4 5 6 7 8 9 10])\n    (rx/subscribe prn))\n```", "```java\nrange operator:\n```", "```java\n(-> (rx/range 1 10)\n    (rx/subscribe prn))\n```", "```java\n(import '(java.util.concurrent TimeUnit))\n(rx/subscribe (Observable/interval 100 TimeUnit/MILLISECONDS)\n              prn-to-repl)\n```", "```java\n(def  repl-out *out*)\n(defn prn-to-repl [& args]\n  (binding [*out* repl-out]\n    (apply prn args)))\n```", "```java\n (def subscription (rx/subscribe (Observable/interval 100 TimeUnit/MILLISECONDS)\n                                prn-to-repl))\n\n(Thread/sleep 1000)\n\n(rx/unsubscribe subscription)\n```", "```java\n(defn just-obs [v]\n  (rx/observable*\n   (fn [observer]\n     (rx/on-next observer v)\n     (rx/on-completed observer))))\n\n(rx/subscribe (just-obs 20) prn)\n```", "```java\n20 to the REPL.\n```", "```java\n(rx/subscribe (->> (Observable/interval 1 TimeUnit/MICROSECONDS)\n                   (rx/filter even?)\n                   (rx/take 5)\n                   (rx/reduce +))\n                   prn-to-repl)\n```", "```java\n(defn musicians []\n  (rx/seq->o [\"James Hetfield\" \"Dave Mustaine\" \"Kerry King\"]))\n\n(defn bands     []\n  (rx/seq->o [\"Metallica\" \"Megadeth\" \"Slayer\"]))\n```", "```java\n(defn uppercased-obs []\n  (rx/map (fn [s] (.toUpperCase s)) (bands)))\n```", "```java\n(-> (rx/map vector\n            (musicians)\n            (uppercased-obs))\n    (rx/subscribe (fn [[musician band]]\n                    (prn-to-repl (str musician \" - from: \" band)))))\n```", "```java\n\"James Hetfield - from: METALLICA\"\n\"Dave Mustaine - from: MEGADETH\"\n\"Kerry King - from: SLAYER\"\n\n```", "```java\n(defn factorial [n]\n  (reduce * (range 1 (inc n))))\n\n(defn all-positive-integers []\n  (Observable/interval 1 TimeUnit/MICROSECONDS))\n```", "```java\n(defn fact-obs [n]\n  (rx/observable*\n   (fn [observer]\n     (rx/on-next observer (factorial n))\n     (rx/on-completed observer))))\n```", "```java\n(rx/subscribe (fact-obs 5) prn-to-repl)\n\n;; 120\n\n```", "```java\n(rx/subscribe (->> (all-positive-integers)\n                   (rx/filter  even?)\n                   (rx/flatmap fact-obs)\n                   (rx/take 5))\n              prn-to-repl)\n```", "```java\n1\n2\n24\n720\n40320\n\n```", "```java\n filter all even numbers from all-positive-numbers. This leaves us with the following observable sequence:\n```", "```java\n(defn repeat-obs [n]\n  (rx/seq->o (repeat 2 n)))\n```", "```java\n(-> (repeat-obs 5)\n    (rx/subscribe prn-to-repl))\n\n;; 5\n;; 5\n\n```", "```java\n(rx/subscribe (->> (all-positive-integers)\n                   (rx/flatmap repeat-obs)\n                   (rx/take 6))\n              prn-to-repl)\n```", "```java\n0\n0\n1\n1\n2\n2\n\n```", "```java\n(defn exceptional-obs []\n  (rx/observable*\n   (fn [observer]\n     (rx/on-next observer (throw (Exception. \"Oops. Something went wrong\")))\n     (rx/on-completed observer))))\n```", "```java\n(rx/subscribe (->> (exceptional-obs)\n                   (rx/map inc))\n              (fn [v] (prn-to-repl \"result is \" v)))\n\n;; Exception Oops. Something went wrong  rx-playground.core/exceptional-obs/fn--1505\n```", "```java\n(rx/subscribe (->> (exceptional-obs)\n                   (rx/map inc))\n              (fn [v] (prn-to-repl \"result is \" v))\n              (fn [e] (prn-to-repl \"error is \" e)))\n\n;; \"error is \" #<Exception java.lang.Exception: Oops. Something went wrong>\n```", "```java\n(rx/subscribe (->> (exceptional-obs)\n                   (rx/catch Exception e\n                       (rx/return 10))\n                   (rx/map inc))\n              (fn [v] (prn-to-repl \"result is \" v)))\n\n;; \"result is \" 11\n```", "```java\n(rx/subscribe (->> (exceptional-obs)\n                   (rx/catch Exception e\n                     (rx/seq->o (range 5)))\n                   (rx/map inc))\n              (fn [v] (prn-to-repl \"result is \" v)))\n\n;; \"result is \" 1\n;; \"result is \" 2\n;; \"result is \" 3\n;; \"result is \" 4\n;; \"result is \" 5\n```", "```java\n(defn retry-obs []\n  (let [errored (atom false)]\n    (rx/observable*\n     (fn [observer]\n       (if @errored\n         (rx/on-next observer 20)\n         (do (reset! errored true)\n             (throw (Exception. \"Oops. Something went wrong\"))))))))\n```", "```java\n(rx/subscribe (retry-obs)\n              (fn [v] (prn-to-repl \"result is \" v)))\n\n;; Exception Oops. Something went wrong  rx-playground.core/retry-obs/fn--1476\n```", "```java\n(rx/subscribe (->> (retry-obs)\n                   (.retry))\n              (fn [v] (prn-to-repl \"result is \" v)))\n\n;; \"result is \" 20\n```", "```java\n(defn fast-producing-obs []\n  (rx/map inc (Observable/interval 1 TimeUnit/MILLISECONDS)))\n\n(defn slow-producing-obs []\n  (rx/map inc (Observable/interval 500 TimeUnit/MILLISECONDS)))\n\n(rx/subscribe (->> (rx/map vector\n                           (fast-producing-obs)\n                           (slow-producing-obs))\n                   (rx/map (fn [[x y]]\n                             (+ x y)))\n                   (rx/take 10))\n              prn-to-repl\n              (fn [e] (prn-to-repl \"error is \" e)))\n\n;; \"error is \" #<MissingBackpressureException rx.exceptions.MissingBackpressureException>\n```", "```java\n(rx/subscribe (->> (rx/map vector\n                           (.sample (fast-producing-obs) 200\n                                    TimeUnit/MILLISECONDS)\n                           (slow-producing-obs))\n                   (rx/map (fn [[x y]]\n                             (+ x y)))\n                   (rx/take 10))\n              prn-to-repl\n              (fn [e] (prn-to-repl \"error is \" e)))\n\n;; 204\n;; 404\n;; 604\n;; 807\n;; 1010\n;; 1206\n;; 1407\n;; 1613\n;; 1813\n;; 2012\n```", "```java\n(rx/subscribe (->> (rx/map vector\n                           (.onBackpressureBuffer (fast-producing-obs))\n                           (slow-producing-obs))\n                   (rx/map (fn [[x y]]\n                             (+ x y)))\n                   (rx/take 10))\n              prn-to-repl\n              (fn [e] (prn-to-repl \"error is \" e)))\n\n;; 2\n;; 4\n;; 6\n;; 8\n;; 10\n;; 12\n;; 14\n;; 16\n;; 18\n;; 20\n```"]