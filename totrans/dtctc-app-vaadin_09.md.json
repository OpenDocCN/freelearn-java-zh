["```java\n@Title(\"Call Browser\")\npublic class VaadinUI extends UI {\n\n    @Override\n    protected void init(VaadinRequest vaadinRequest) {\n        VerticalLayout mainLayout = new VerticalLayout();\n        mainLayout.addComponentsAndExpand(new CallsBrowser());\n        setContent(mainLayout);\n    }\n}\n```", "```java\npublic class CallsBrowser extends Composite {\n\n    public CallsBrowser() {\n        TextField filter = new TextField();\n        filter.setPlaceholder(\"Client / Phone / City\");\n        filter.focus();\n\n        Button search = new Button(VaadinIcons.SEARCH);\n        search.setClickShortcut(ShortcutAction.KeyCode.ENTER);\n\n        Button clear = new Button(VaadinIcons.CLOSE_SMALL);\n\n        CssLayout filterLayout = new CssLayout(filter, search, clear);\n        filterLayout.addStyleName(ValoTheme.LAYOUT_COMPONENT_GROUP);\n\n        Label countLabel = new Label();\n        countLabel.addStyleNames(\n                ValoTheme.LABEL_LIGHT, ValoTheme.LABEL_SMALL);\n\n        HorizontalLayout headerLayout = new HorizontalLayout(\n                filterLayout, countLabel);\n        headerLayout.setComponentAlignment(countLabel, Alignment.MIDDLE_LEFT);\n\n        Grid<Call> grid = new Grid<>(Call.class);\n        grid.setColumns(\"id\", \"client\", \"phoneNumber\", \"city\", \"startTime\",\n                \"duration\", \"status\");\n        grid.setSizeFull();\n\n        VerticalLayout mainLayout = new VerticalLayout(headerLayout);\n        mainLayout.setMargin(false);\n        mainLayout.addComponentsAndExpand(grid);\n        setCompositionRoot(mainLayout);\n    }\n}\n```", "```java\npublic class CallRepository {\n\n    public static List<Call> findAll(int offset, int limit) {\n        ...\n    }\n\n    public static int count() {\n        ...\n    }\n}\n```", "```java\npublic class CallRepository {\n    ...\n\n    public static List<Call> find(int offset, int limit) {\n        return JPAService.runInTransaction(em -> {\n            Query query = em.createQuery(\"select c from Call c\");\n            query.setFirstResult(offset);\n            query.setMaxResults(limit);\n\n            List<Call> resultList = query.getResultList();\n            return resultList;\n        });\n    }\n\n    public static int count() {\n        return JPAService.runInTransaction(em -> {\n            Query query = em.createQuery(\"select count(c.id) from Call c\");\n\n            Long count = (Long) query.getSingleResult();\n            return count.intValue();\n        });\n    }\n}\n```", "```java\ngrid.setDataProvider(\n    (sortOrders, offset, limit) ->\n            CallRepository.findAll(offset, limit).stream(),\n    () -> CallRepository.count()\n);\n```", "```java\n@FunctionalInterface\npublic interface FetchItemsCallback<T> extends Serializable {\n\n    public Stream<T> fetchItems(\n            List<QuerySortOrder> sortOrder, int offset, int limit);\n}\n```", "```java\nDataProvider<Call, Void> dataProvider = DataProvider.fromCallbacks(\n        query -> CallRepository.find(\n                query.getOffset(),\n                query.getLimit()).stream(),\n        query -> CallRepository.count()\n);\n\ngrid.setDataProvider(dataProvider);\n```", "```java\npublic static List<Call> find(int offset, int limit, String filter,\n        Map<String, Boolean> sort) {\n    return JPAService.runInTransaction(em -> {\n        Query query = em.createQuery(\"select c from Call c where lower(c.client) like :filter or c.phoneNumber like :filter or lower(c.city) like :filter\");\n        query.setParameter(\"filter\",\n \"%\" + filter.trim().toLowerCase() + \"%\");\n        query.setFirstResult(offset);\n        query.setMaxResults(limit);\n\n        List<Call> resultList = query.getResultList();\n        return resultList;\n    });\n}\n```", "```java\npublic static int count(String filter) {\n    return JPAService.runInTransaction(em -> {\n        Query query = em.createQuery(\"select count(c.id) from Call c where lower(c.client) like :filter or c.phoneNumber like :filter or lower(c.city) like :filter\");\n        query.setParameter(\"filter\", \"%\" + filter.trim().toLowerCase() + \"%\");\n\n        Long count = (Long) query.getSingleResult();\n        return count.intValue();\n    });\n}\n```", "```java\nDataProvider<Call, Void> dataProvider = DataProvider.fromFilteringCallbacks(\n        query -> CallRepository.find(query.getOffset(), query.getLimit(),\n filter.getValue()).stream(),\n        query -> CallRepository.count(filter.getValue())\n);\n\n```", "```java\nsearch.addClickListener(e -> dataProvider.refreshAll());\n```", "```java\nclear.addClickListener(e -> {\n    filter.clear();\n    dataProvider.refreshAll();\n});\n\n```", "```java\n@Entity\n@Table(indexes = {\n        @Index(name = \"client_index\", columnList = \"client\"),\n        @Index(name = \"phoneNumber_index\", columnList = \"phoneNumber\"),\n        @Index(name = \"city_index\", columnList = \"city\")\n})\n@Data\npublic class Call {\n    ...\n}\n```", "```java\npublic static List<Call> find(int offset, int limit,\n        String filter, Map<String, Boolean> order) {\n    return JPAService.runInTransaction(em -> {\n        String jpql = \"select c from Call c where lower(c.client) like :filter or c.phoneNumber like :filter or lower(c.city) like :filter\" + buildOrderByClause(sort);\n        Query query = em.createQuery(jpql);\n        query.setParameter(\"filter\", \"%\" + filter.trim().toLowerCase() + \"%\");\n        query.setFirstResult(offset);\n        query.setMaxResults(limit);\n\n        List<Call> resultList = query.getResultList();\n        return resultList;\n    });\n}\n```", "```java\nprivate static String buildOrderByClause(Map<String, Boolean> order) {\n    StringBuilder orderBy = new StringBuilder();\n    order.forEach((property, isAscending) -> orderBy.append(property + (isAscending ? \"\" : \" desc\") + \",\"));\n\n    if (orderBy.length() > 0) {\n        orderBy.delete(orderBy.length() - 1, orderBy.length());\n        return \" order by \" + orderBy.toString();\n    } else {\n        return \"\";\n    }\n}\n```", "```java\n\" order by client\"\n```", "```java\n\" order by client,city\"\n```", "```java\npublic class DataUtils {\n\n    public static <T, F> Map<String, Boolean> getOrderMap(\n            Query<T, F> query) {\n        Map<String, Boolean> map = new LinkedHashMap<>();\n\n        for (QuerySortOrder order : query.getSortOrders()) {\n            String property = order.getSorted();\n            boolean isAscending = SortDirection.ASCENDING.equals(\n                    order.getDirection());\n            map.put(property, isAscending);\n        }\n\n        return map;\n    }\n}\n```", "```java\nDataProvider<Call, Void> dataProvider = DataProvider.fromFilteringCallbacks(\n        query -> CallRepository.find(query.getOffset(), query.getLimit(), filter.getValue(), DataUtils.getOrderMap(query)).stream(),\n        query -> {\n            int count = CallRepository.count(filter.getValue());\n            countLabel.setValue(count + \" calls found\");\n            return count;\n        }\n);\n\n```", "```java\ngrid.setColumnReorderingAllowed(true);\n```", "```java\npublic class LazyLoadingVerticalLayout extends Composite {\n\n    private CssLayout content = new CssLayout();\n    private Button button = new Button(\"Load more...\");\n\n    private int offset;\n    private int pageSize;\n\n    public LazyLoadingVerticalLayout(int pageSize) {\n        this.pageSize = pageSize;\n\n        button.setStyleName(ValoTheme.BUTTON_BORDERLESS_COLORED);\n\n        VerticalLayout mainLayout = new VerticalLayout(content, button);\n        setCompositionRoot(mainLayout);\n\n        button.addClickListener(e -> loadMore());\n        loadMore();\n    }\n\n    public void loadMore() {\n        List<Call> calls = CallRepository.find(\n                offset, pageSize, \"\", new HashMap<>());\n\n        if (calls.size() < pageSize) {\n            button.setVisible(false);\n        }\n\n        calls.stream()\n                .map(call -> new Label(call.toString()))\n                .forEach(content::addComponent);\n\n        offset += pageSize;\n    }\n}\n```"]