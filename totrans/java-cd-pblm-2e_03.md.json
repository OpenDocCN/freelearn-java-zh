["```java\nLocalTime lt = date.toInstant().atZone(zoneId).toLocalTime(); \n```", "```java\nLocalTime lt = LocalTime.now(zoneId); \n```", "```java\npublic static String toDayPeriod(Date date, ZoneId zoneId) {\n LocalTime lt = date.toInstant().atZone(zoneId).toLocalTime();\n LocalTime night = LocalTime.of(21, 0, 0);\n LocalTime morning = LocalTime.of(6, 0, 0);\n LocalTime afternoon = LocalTime.of(12, 0, 0);\n LocalTime evening = LocalTime.of(18, 0, 0);\n LocalTime almostMidnight = LocalTime.of(23, 59, 59);\n LocalTime midnight = LocalTime.of(0, 0, 0);\n if((lt.isAfter(night) && lt.isBefore(almostMidnight)) \n  || lt.isAfter(midnight) && (lt.isBefore(morning))) {\n   return \"night\";\n  } else if(lt.isAfter(morning) && lt.isBefore(afternoon)) {\n   return \"morning\";\n  } else if(lt.isAfter(afternoon) && lt.isBefore(evening)) {\n   return \"afternoon\";\n  } else if(lt.isAfter(evening) && lt.isBefore(night)) {\n   return \"evening\";\n  }\n  return \"day\";\n} \n```", "```java\npublic static String toDayPeriod(Date date, ZoneId zoneId) {\n ZonedDateTime zdt = date.toInstant().atZone(zoneId);\n DateTimeFormatter formatter \n    = DateTimeFormatter.ofPattern(\"yyyy-MMM-dd [B]\");\n return zdt.withZoneSameInstant(zoneId).format(formatter);\n} \n```", "```java\n2023-Feb-04 at night \n```", "```java\npublic static YearMonth toYearMonth(Date date) {\n  return YearMonth.from(date.toInstant()\n                  .atZone(ZoneId.systemDefault())\n                  .toLocalDate());\n} \n```", "```java\npublic static Date toDate(YearMonth ym) {\n  return Date.from(ym.atDay(1).atStartOfDay(\n          ZoneId.systemDefault()).toInstant());\n} \n```", "```java\npublic static int to(YearMonth u) {\n  return (int) u.getLong(ChronoField.PROLEPTIC_MONTH);\n} \n```", "```java\npublic static YearMonth from(int t) {\n  return YearMonth.of(1970, 1)\n    .with(ChronoField.PROLEPTIC_MONTH, t);\n} \n```", "```java\npublic static Date from(int year, int week) {\n  Calendar calendar = Calendar.getInstance();\n  calendar.set(Calendar.YEAR, year);\n  calendar.set(Calendar.WEEK_OF_YEAR, week);\n  calendar.set(Calendar.DAY_OF_WEEK, 1);\n  return calendar.getTime();\n} \n```", "```java\npublic static LocalDate from(int year, int week) {\n  WeekFields weekFields = WeekFields.of(Locale.getDefault());\n  return LocalDate.now()\n                  .withYear(year)\n                  .with(weekFields.weekOfYear(), week)\n                  .with(weekFields.dayOfWeek(), 1);\n} \n```", "```java\npublic static int getYear(Date date) {\n  Calendar calendar = Calendar.getInstance();\n  calendar.setTime(date);\n  return calendar.get(Calendar.YEAR);\n} \n```", "```java\npublic static int getWeek(Date date) { \n  Calendar calendar = Calendar.getInstance();\n  calendar.setTime(date);\n  return calendar.get(Calendar.WEEK_OF_YEAR);\n} \n```", "```java\npublic static int getYear(LocalDate date) {\n  return date.get(ChronoField.YEAR);\n}\npublic static int getWeek(LocalDate date) {\n  return date.get(ChronoField.ALIGNED_WEEK_OF_YEAR);\n} \n```", "```java\nreturn date.get(WeekFields.of(\n  Locale.getDefault()).weekOfYear()); \n```", "```java\npublic static boolean isLeapYear(int year) {\n  if (year % 4 != 0) {\n    return false;\n  } else if (year % 400 == 0) {\n    return true;\n  } else if (year % 100 == 0) {\n    return false;\n  }\n  return true;\n} \n```", "```java\npublic static boolean isLeapYear(int year) {\n  return new GregorianCalendar(year, 1, 1).isLeapYear(year);\n} \n```", "```java\npublic static boolean isLeapYear(int year) {\n  return Year.of(year).isLeap(); \n} \n```", "```java\npublic static String quarter(Date date) {\n  String[] quarters = {\"Q1\", \"Q2\", \"Q3\", \"Q4\"};\n  Calendar calendar = Calendar.getInstance();\n  calendar.setTime(date);\n  int quarter = calendar.get(Calendar.MONTH) / 3;\n  return quarters[quarter];\n} \n```", "```java\npublic static int quarter(Date date) {\n  LocalDate localDate = date.toInstant()\n    .atZone(ZoneId.systemDefault()).toLocalDate();\n  return localDate.get(IsoFields.QUARTER_OF_YEAR);\n} \n```", "```java\npublic final class Quarter {\n  private final Date firstDay;\n  private final Date lastDay;\n  ...\n} \n```", "```java\nLocalDate localDate = date.toInstant()\n  .atZone(ZoneId.systemDefault()).toLocalDate(); \n```", "```java\npublic static Quarter quarterDays(Date date) {\n  LocalDate localDate = date.toInstant()\n    .atZone(ZoneId.systemDefault()).toLocalDate();\n  LocalDate firstDay\n    = localDate.with(IsoFields.DAY_OF_QUARTER, 1L);\n  LocalDate lastDay = firstDay.plusMonths(2)\n    .with(TemporalAdjusters.lastDayOfMonth());\n  return new Quarter(\n    Date.from(firstDay.atStartOfDay(\n      ZoneId.systemDefault()).toInstant()),\n    Date.from(lastDay.atStartOfDay(\n      ZoneId.systemDefault()).toInstant())\n  );\n} \n```", "```java\npublic static List<String> quarterMonths(LocalDate ld) {\n  List<String> qmonths = new ArrayList<>();\n  int qmonth = Month.from(ld)\n    .firstMonthOfQuarter().getValue();\n  qmonths.add(Month.of(qmonth).name());\n  qmonths.add(Month.of(++qmonth).name());\n  qmonths.add(Month.of(++qmonth).name());\n  return qmonths;\n} \n```", "```java\nint qmonth = quarter * 3 - 2;\nList<String> qmonths = IntStream.of(\n        qmonth, ++qmonth, ++qmonth)\n  .mapToObj(Month::of)\n  .map(Month::name)\n  .collect(Collectors.toList()); \n```", "```java\npublic static final int PREGNANCY_WEEKS = 40;\npublic static final int PREGNANCY_DAYS = PREGNANCY_WEEKS * 7; \n```", "```java\npublic static void pregnancyCalculator(LocalDate firstDay) {\n  firstDay = firstDay.plusDays(PREGNANCY_DAYS);\n  System.out.println(\"Due date: \" + firstDay);\n  LocalDate today = LocalDate.now();\n  long betweenDays =    \n    Math.abs(ChronoUnit.DAYS.between(firstDay, today));\n  long diffDays = PREGNANCY_DAYS - betweenDays;\n  long weekNr = diffDays / 7;\n  long weekPart = diffDays % 7;\n  String week = weekNr + \" | \" + weekPart;\n  System.out.println(\"Days remaining: \" + betweenDays);\n  System.out.println(\"Days in: \" + diffDays);\n  System.out.println(\"Week: \" + week);\n} \n```", "```java\npublic final class NanoStopwatch {\n  private long startTime;\n  private long stopTime;\n  private boolean running;\n  public void start() {\n    this.startTime = System.nanoTime();\n    this.running = true;\n   }\n   public void stop() {\n    this.stopTime = System.nanoTime();\n    this.running = false;\n   }\n  //elaspsed time in nanoseconds\n   public long getElapsedTime() {\n     if (running) {\n       return System.nanoTime() - startTime;\n     } else {\n       return stopTime - startTime;\n     } \n  }\n} \n```", "```java\n//elaspsed time in millisecods\npublic long elapsedTimeToMillis(long nanotime) {\n  return TimeUnit.MILLISECONDS.convert(\n    nanotime, TimeUnit.NANOSECONDS);\n}\n//elaspsed time in seconds\npublic long elapsedTimeToSeconds(long nanotime) {\n  return TimeUnit.SECONDS.convert(\n    nanotime, TimeUnit.NANOSECONDS);\n} \n```", "```java\nLocalDateTime now = LocalDateTime.now(); \n```", "```java\nLocalDateTime midnight = LocalDateTime.of(now.getYear(),\n  now.getMonth(), now.getDayOfMonth(), 0, 0, 0); \n```", "```java\nSystem.out.println(\"Millis: \" \n  + ChronoUnit.MILLIS.between(midnight, now)); \n```", "```java\nDuration range = Duration.between(start, end); \n```", "```java\nDuration interval = range.dividedBy(n - 1); \n```", "```java\npublic static List<LocalDateTime> splitInEqualIntervals(\n       LocalDateTime start, LocalDateTime end, int n) {\n  Duration range = Duration.between(start, end);\n  Duration interval = range.dividedBy(n - 1);\n  List<LocalDateTime> listOfDates = new ArrayList<>(); \n  LocalDateTime timeline = start;\n  for (int i = 0; i < n - 1; i++) {\n    listOfDates.add(timeline);\n    timeline = timeline.plus(interval);\n  }\n  listOfDates.add(end);\n  return listOfDates;\n} \n```", "```java\nSystem.out.println(Clock.systemDefaultZone());\nSystem.out.println(system(ZoneId.systemDefault()));\nSystem.out.println(Clock.systemUTC()); \n```", "```java\nSystemClock[Europe/Bucharest]\nSystemClock[Europe/Bucharest] \n```", "```java\nSystemClock[Z] \n```", "```java\nSystem.out.println(Clock.systemDefaultZone().instant());\nSystem.out.println(system(ZoneId.systemDefault()).instant());\nSystem.out.println(Clock.systemUTC().instant()); \n```", "```java\n2023-02-07T05:26:17.374159500Z\n2023-02-07T05:26:17.384811300Z\n2023-02-07T05:26:17.384811300Z \n```", "```java\n// 2023-02-07T05:26:17.384811300\nSystem.out.println(LocalDateTime.now(Clock.systemUTC())); \n```", "```java\n// 2023-02-07T07:26:17.384811300\nSystem.out.println(LocalDateTime.now(\n  Clock.systemDefaultZone())); \n```", "```java\nString[] weekdays = new DateFormatSymbols().getWeekdays();\nIntStream.range(1, weekdays.length)\n    .mapToObj(t -> String.format(\"Day: %d -> %s\",\n       t, weekdays[t]))\n    .forEach(System.out::println); \n```", "```java\nDay: 1 -> Sunday\n...\nDay: 7 -> Saturday \n```", "```java\npublic static String fetchFirstDayOfYear(int year, boolean name) {\n  LocalDate ld = LocalDate.ofYearDay(year, 1);\n  LocalDate firstDay = ld.with(firstDayOfYear());\n  if (!name) {\n    return firstDay.toString();\n  }\n  return DateTimeFormatter.ofPattern(\"EEEE\").format(firstDay);\n} \n```", "```java\npublic static String fetchLastDayOfYear(int year, boolean name) {\n  LocalDate ld = LocalDate.ofYearDay(year, 31);\n  LocalDate lastDay = ld.with(lastDayOfYear());\n  if (!name) {\n    return lastDay.toString();\n  }\n  return DateTimeFormatter.ofPattern(\"EEEE\").format(lastDay);\n} \n```", "```java\n[\nMon 06/02/2023,\nSun 12/02/2023,\nMon 13/02/2023,\nSun 19/02/2023,\nMon 20/02/2023,\nSun 26/02/2023\n] \n```", "```java\npublic static List<String> weekBoundaries(int nrOfWeeks) {\n  List<String> boundaries = new ArrayList<>();\n  LocalDate timeline = LocalDate.now();\n  DateTimeFormatter dtf = DateTimeFormatter\n    .ofPattern(\"EEE dd/MM/yyyy\");\n  for (int i = 0; i < nrOfWeeks; i++) {\n    boundaries.add(dtf.format(timeline.with(\n      previousOrSame(DayOfWeek.MONDAY))));\n    boundaries.add(dtf.format(timeline.with(\n      nextOrSame(DayOfWeek.SUNDAY))));\n    timeline = timeline.plusDays(7);\n  }\n  return boundaries;\n} \n```", "```java\npublic static LocalDate middleOfTheMonth(LocalDate date) {\n  return LocalDate.of(date.getYear(), date.getMonth(), \n    date.lengthOfMonth() / 2); \n} \n```", "```java\npublic static long nrOfQuarters(\n    LocalDate startDate, LocalDate endDate) {\n  return IsoFields.QUARTER_YEARS.between(startDate, endDate);\n} \n```", "```java\nLocalTime lt = date.toInstant().atZone(zoneId).toLocalTime(); \n```", "```java\nLocalDateTime ldt = date.toInstant().atZone(\n  ZoneId.systemDefault()).toLocalDateTime(); \n```", "```java\npublic static LocalDateTime\n       toLocalDateTime(Calendar calendar) {\n  Date date = calendar.getTime();\n  return date.toInstant().atZone(\n    ZoneId.systemDefault()).toLocalDateTime();\n} \n```", "```java\nreturn LocalDateTime.ofInstant(Instant.ofEpochMilli(\n  calendar.getTimeInMillis()), ZoneId.systemDefault()); \n```", "```java\nreturn LocalDateTime.ofInstant(\n  calendar.toInstant(), ZoneId.systemDefault()); \n```", "```java\npublic static ZonedDateTime\n       toZonedDateTime(Calendar calendar) {\n  Date date = calendar.getTime();\n  return date.toInstant().atZone(\n    calendar.getTimeZone().toZoneId());\n} \n```", "```java\nreturn ZonedDateTime.ofInstant(\n  Instant.ofEpochMilli(calendar.getTimeInMillis()),\n    calendar.getTimeZone().toZoneId());\nreturn ZonedDateTime.ofInstant(calendar.toInstant(),\n    calendar.getTimeZone().toZoneId()); \n```", "```java\npublic static long nrOfWeeks(\n    LocalDateTime startLdt, LocalDateTime endLdt) {\n  return Math.abs(ChronoUnit.WEEKS.between(\n    startLdt, endLdt));\n} \n```", "```java\npublic static long nrOfWeeks(Date startDate, Date endDate) {\n  Calendar calendar = Calendar.getInstance();\n  calendar.setTime(startDate);\n  int weeks = 0;\n  while (calendar.getTime().before(endDate)) {\n    calendar.add(Calendar.WEEK_OF_YEAR, 1);\n    weeks++;\n  }\n  return weeks;\n} \n```"]