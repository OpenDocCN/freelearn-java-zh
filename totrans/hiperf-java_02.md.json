["```java\nimport java.util.ArrayList;\nimport java.util.List;\n```", "```java\npublic class Example1 {\n  public static void main(String[] args) {\n    .add method to add elements to our ArrayList:\n\n```", "```java\n    int startYear = hr_numbers.get(0);\n    int endYear = hr_numbers.get(1);\n    hr_numbers.add(endYear-startYear);\n```", "```java\n    for (int number : hr_numbers) {\n      System.out.println(number);\n    }\n```", "```java\n1983\n2008\n25\n```", "```java\nImport java.util.LinkedList;\nimport java.util.List;\n```", "```java\npublic class Example2 {\n  public static void main(String[] args) {\n    .add method to add elements to our LinkedList:\n\n```", "```java\n    String firstPet = petNames.get(0);\n    String secondPet = petNames.get(1);\n```", "```java\n    for (String pet : petNames) {\n      System.out.println(pet);\n    }\n```", "```java\nBrandy\nMuzz\nJava\nBougie\n```", "```java\npetNames.remove(\"Brandy\");\n```", "```java\nboolean containsBrandy = petNames.contains(\"Brandy\");\nSystem.out.println(containsBrandy);\n```", "```java\nfalse\n```", "```java\nint size = petNames.size();\nSystem.out.println(\"You have \" + size + \" pets.\");\n```", "```java\nYou have 3 pets.\n```", "```java\nimport java.util.Vector;\nimport java.util.Enumeration;\n```", "```java\npublic class Example3 {\n  public static void main(String[] args) {\n    .add method to add elements to our Vector.\n\n```", "```java\n    int firstNumber = luckyNumbers.get(0);\n    int secondNumber = luckyNumbers.get(2);\n```", "```java\n    Enumeration<Integer> enumeration = luckyNumbers.elements();\n    while (enumeration.hasMoreElements()) {\n      int number = enumeration.nextElement();\n      System.out.println(number);\n    }\n```", "```java\n8\n19\n24\n```", "```java\nluckyNumbers.removeElement(19);\n```", "```java\nboolean containsNineteen= luckyNumbers.contains(19);\nSystem.out.println(containsNineteen);\n```", "```java\nfalse\n```", "```java\nint mySize = luckyNumbers.size();\nSystem.out.println(\"You have \" + mySize + \" lucky numbers.\");\n```", "```java\nYou have 2 lucky numbers.\n```", "```java\nimport java.util.LinkedList;\nimport java.util.List;\npublic class Example4 {\n  public static void main(String[] args) {\n    List<Integer> numbers = new LinkedList<>();\n    numbers.add(3);\n    numbers.add(1);\n    numbers.add(8);\n    numbers.add(9);\n    System.out.println(\"Initial LinkedList elements:\");\n    for (int number : numbers) {\n      System.out.println(number);\n    }\n  }\n}\n```", "```java\nInitial LinkedList elements:\n3\n1\n8\n9\n```", "```java\nnumbers.remove(Integer.valueOf(8));\n```", "```java\nboolean containsThree = numbers.contains(3);\nSystem.out.println(\"\\nThe question of 3: \" + containsThree);\nboolean containsEight = numbers.contains(8);\nSystem.out.println(\"The question of 8: \" + containsEight);\n```", "```java\nThe question of 3: true\nThe question of 8: false\n```", "```java\nSystem.out.println(\"\\nModified LinkedList elements:\");\nfor (int number : numbers) {\n  System.out.println(number);\n}\n```", "```java\nModified LinkedList elements:\n3\n1\n9\n```", "```java\n    LinkedList<Integer> numbers = new LinkedList<>();\n    ```", "```java\n    Iterator<Integer> iterator = numbers.iterator();\n    while (iterator.hasNext()) {\n      int number = iterator.next();\n      if (number == 8) {\n        iterator.remove();\n      }\n    }\n    ```", "```java\n    int[] myNumbers = new int[10];\n    ```", "```java\npublic class Example6 {\n  public static void main(String[] args) {\n    String[] planets = {\n      \"Mercury\",\n      \"Venus\",\n      \"Earth\",\n      \"Mars\",\n      \"Jupiter\",\n      \"Saturn\",\n      \"Uranus\",\n      \"Neptune\"\n    };\n  }\n}\n```", "```java\nSystem.out.println(\"Planets in our solar system:\");\nfor (int i = 0; i < planets.length; i++) {\n  System.out.println(planets[i]);\n}\n```", "```java\nPlanets in our solar system:\nMercury\nVenus\nEarth\nMars\nJupiter\nSaturn\nUranus\nNeptune\n```", "```java\nint numberOfPlanets = planets.length;\nSystem.out.println(\"Number of planets: \" + numberOfPlanets);\n```", "```java\nNumber of planets: 8\n```", "```java\nString thirdPlanet = planets[2];\nSystem.out.println(\"The third planet is: \" + thirdPlanet);\n```", "```java\nThe third planet is: Earth\n```", "```java\nplanets[1] = \"Shrouded Venus\";\nSystem.out.println(\"After renaming Venus:\");\nfor (String planet : planets) {\n  System.out.println(planet);\n}\n```", "```java\nAfter renaming Venus:\nMercury\nShrouded Venus\nEarth\nMars\nJupiter\nSaturn\nUranus\nNeptune\n```", "```java\nclass TreeNode {\n  int data;\n  TreeNode left;\n  TreeNode right;\n  public TreeNode(int data) {\n    this.data = data;\n    this.left = null;\n    this.right = null;\n  }\n}\n```", "```java\nExample7BinarySearchTree bst = new Example7BinarySearchTree();\n```", "```java\nbst.insert(50);\nbst.insert(30);\nbst.insert(70);\nbst.insert(20);\nbst.insert(40);\nbst.insert(60);\nbst.insert(80);\n```", "```java\nint searchElement = 70;\nif (bst.search(searchElement)) {\n  System.out.println(\"\\n\" + searchElement + \" was found in the tree.\");\n} else {\n  System.out.println(\"\\n\" + searchElement + \" was not found in the \n  tree.\");\n}\n```", "```java\nimport java.util.Stack;\npublic class Example8 {\n  public static void main(String[] args) {\n    Stack<Double> transactionStack = new Stack<>();\n    transactionStack.push(100.0);\n    transactionStack.push(-50.0);\n    transactionStack.push(200.0);\n    while (!transactionStack.isEmpty()) {\n      double transactionAmount = transactionStack.pop();\n      System.out.println(\"Transaction: \" + transactionAmount);\n    }\n  }\n}\n```", "```java\npublic class Example9 {\n  private double[] stack;\n  private int top;\n  public Example9(int capacity) {\n    stack = new double[capacity];\n    top = -1;\n  }\n```", "```java\npublic void push(double transactionAmount) {\n  if (top == stack.length - 1) {\n    throw new RuntimeException(\"Stack is full.\");\n  }\n  stack[++top] = transactionAmount;\n}\npublic double pop() {\n  if (isEmpty()) {\n    throw new EmptyStackException();\n  }\n  return stack[top--];\n}\npublic boolean isEmpty() {\n  return top == -1;\n}\n```", "```java\npublic static void main(String[] args) {\n  Example9 transactionStack = new Example9(10);\n  transactionStack.push(100.0);\n  transactionStack.push(-50.0);\n  transactionStack.push(200.0);\n  while (!transactionStack.isEmpty()) {\n    double transactionAmount = transactionStack.pop();\n    System.out.println(\"Transaction: \" + transactionAmount);\n  }\n}\n```", "```java\nTransaction: 200.0\nTransaction: -50.0\nTransaction: 100.0\n```", "```java\nimport java.util.LinkedList;\nimport java.util.Queue;\npublic class Example10 {\n  public static void main(String[] args) {\n    Queue<Double> transactionQueue = new LinkedList<>();\n    transactionQueue.offer(100.0);\n    transactionQueue.offer(-50.0);\n    transactionQueue.offer(200.0);\n    while (!transactionQueue.isEmpty()) {\n      double transactionAmount = transactionQueue.poll();\n      System.out.println(\"Transaction: \" + transactionAmount);\n    }\n  }\n}\n```", "```java\nimport java.util.NoSuchElementException;\npublic class Example11 {\n  private double[] queue;\n  private int front;\n  private int rear;\n  private int size;\n  private int capacity;\n  public Example11(int capacity) {\n    this.capacity = capacity;\n    queue = new double[capacity];\n    front = 0;\n    rear = -1;\n    size = 0;\n  }\n```", "```java\npublic void enqueue(double transactionAmount) {\n  if (size == capacity) {\n    throw new RuntimeException(\"Queue is full.\");\n  }\n  rear = (rear + 1) % capacity;\n  queue[rear] = transactionAmount;\n  size++;\n}\npublic double dequeue() {\n  if (isEmpty()) {\n    throw new NoSuchElementException(\"Queue is empty.\");\n  }\n  double transactionAmount = queue[front];\n  front = (front + 1) % capacity;\n  size--;\n  return transactionAmount;\n}\npublic boolean isEmpty() {\n  return size == 0;\n}\n```", "```java\npublic static void main(String[] args) {\n  Example11 transactionQueue = new Example11(10);\n  transactionQueue.enqueue(100.0);\n  transactionQueue.enqueue(-50.0);\n  transactionQueue.enqueue(200.0);\n  while (!transactionQueue.isEmpty()) {\n    double transactionAmount = transactionQueue.dequeue();\n    System.out.println(\"Transaction: \" + transactionAmount);\n  }\n}\n```", "```java\nTransaction: 100.0\nTransaction: -50.0\nTransaction: 200.0\n```", "```java\nimport java.util.HashMap;\nHashMap<String, Integer> hashMap = new HashMap<>();\nhashMap.put(\"Alice\", 25);\n```", "```java\nimport java.util.ArrayList;\nimport java.util.List;\nList<List<Integer>> graph = new ArrayList<>();\nint numNodes = 5;\nfor (int i = 0; i < numNodes; i++) {\n  graph.add(new ArrayList<>());\n}\ngraph.get(0).add(1);\n```", "```java\nclass TrieNode {\n  TrieNode[] children = new TrieNode[26];\n    boolean isEndOfWord;\n}\nTrieNode root = new TrieNode();\n```", "```java\nimport java.util.PriorityQueue;\nPriorityQueue<Integer> axheap = new PriorityQueue<>();\naxheap.offer(3);\nPriorityQueue<Integer> axheap = new PriorityQueue<>((a, b) -> b – a);\naxheap.offer(3);\n```", "```java\nclass QuadTreeNode {\n  int val;\n  boolean isLeaf;\n  QuadTreeNode topLeft;\n  QuadTreeNode topRight;\n  QuadTreeNode bottomLeft;\n  QuadTreeNode bottomRight;\n  public QuadTreeNode() {}\n  public QuadTreeNode(int val, boolean isLeaf) {\n      this.val = val;\n      this.isLeaf = isLeaf;\n  }\n}\nQuadTreeNode root = new QuadTreeNode(0, false);\n```", "```java\nimport java.util.BitSet;\nBitSet bitSet = new BitSet(10); // Creates a BitSet with 10 bits\nbitSet.set(2);\nboolean isSet = bitSet.get(2);\n```", "```java\n\n```", "```java\n\n```", "```java\n\n```"]