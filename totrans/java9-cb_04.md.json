["```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, \n  int weightPounds, int horsePower);\n  enum DrivingCondition {\n    ROAD_CONDITION,\n    TIRE_CONDITION\n  }\n  enum RoadCondition {\n    //...\n  }\n  enum TireCondition {\n    //...\n  }\n}\n```", "```java\npublic interface Vehicle {\n  void setSpeedModel(SpeedModel speedModel);\n  default double getSpeedMph(double timeSec){ return -1; };\n  default int getWeightPounds(){ return -1; }\n  default int getWeightKg(){ \n    return convertPoundsToKg(getWeightPounds());\n  }\n  private int convertPoundsToKg(int pounds){\n    return (int) Math.round(0.454 * pounds);\n  }\n  static int convertKgToPounds(int kilograms){\n    return (int) Math.round(2.205 * kilograms);\n  }\n}\n```", "```java\npublic interface SpeedModel {\n  double getSpeedMph(double timeSec, \n  int weightPounds, int horsePower);\n  boolean equals(Object obj);\n  String toString();\n}\n```", "```java\npublic interface Car extends Vehicle {\n  int getPassengersCount();\n}\n```", "```java\n@FunctionalInterface \npublic interface Car extends Vehicle {\n  int getPassengersCount();\n}\n```", "```java\n@FunctionalInterface\ninterface Runnable { void run(); }\n\n@FunctionalInterface\ninterface Callable<V> { V call() throws Exception; }\n```", "```java\n        @FunctionalInterface\n        public interface Function<T,R>\n```", "```java\n        Function<Integer, Double> ourFunc = new \n                          Function<Integer, Double>(){\n          public Double apply(Integer i){\n            return i * 10.0;\n          }\n        };\n```", "```java\n        System.out.println(ourFunc.apply(1));\n```", "```java\n        public interface Consumer<T>\n        Accepts a single input argument of type T and returns no result.\n        The functional method is accept(Object).\n```", "```java\n        Consumer<String> ourConsumer = new Consumer<String>() {\n          public void accept(String s) {\n            System.out.println(\"The \" + s + \" is consumed.\");\n          }\n        };\n```", "```java\n        ourConsumer.accept(\"Hello!\");\n```", "```java\n        public interface Supplier<T>\n        Represents a supplier of results of type T.\n        The functional method is get().\n```", "```java\n        Supplier<String> ourSupplier = new Supplier<String>() {\n          public String get() {\n            String res = \"Success\";\n            //Do something and return result â€“ Success or Error.\n            return res;\n          }\n        };\n```", "```java\n        System.out.println(ourSupplier.get());\n```", "```java\n       @FunctionalInterface\n       public interface Predicate<T>\n```", "```java\n        Predicate<Double> ourPredicate = new Predicate<Double>() {\n          public boolean test(Double num) {\n            System.out.println(\"Test if \" + num + \n                               \" is smaller than 20\");\n            return num < 20;\n          }\n        };\n```", "```java\n        System.out.println(ourPredicate.test(10.0) ? \n                           \"10 is smaller\" : \"10 is bigger\");\n```", "```java\n        IntFunction<String> function = new IntFunction<String>() {\n          public String apply(int i) {\n            return String.valueOf(i * 10);\n          }\n        };\n```", "```java\n         BiFunction<String, Integer, Double> function = \n               new BiFunction<String, Integer, Double >() {\n           public Double apply(String s, Integer i) {\n             return (s.length() * 10d)/i;\n           }\n         };\n```", "```java\n         BinaryOperator<Integer> function = \n                           new BinaryOperator<Integer>(){\n           public Integer apply(Integer i, Integer j) {\n             return i >= j ? i : j;\n           }\n         };\n```", "```java\n        IntBinaryOperator function = new IntBinaryOperator(){\n          public int apply(int i, int j) {\n            return i >= j ? i : j;\n          }\n        };\n```", "```java\nFunction<Integer, Double> createMultiplyBy10(){\n  Function<Integer, Double> ourFunc = new Function<Integer, Double>(){\n    public Double apply(Integer i){ return i * 10.0; }\n  };\n  return ourFunc;\n}\n```", "```java\nFunction<Integer, Double> createMultiplyBy(double num){\n  Function<Integer, Double> ourFunc = new Function<Integer, Double>(){\n    public Double apply(Integer i){ return i * num; }\n  };\n  return ourFunc;\n}\n```", "```java\nFunction<Integer, Double> multiplyBy10 = createMultiplyBy(10d);\nSystem.out.println(multiplyBy10.apply(1));\n\nFunction<Integer, Double> multiplyBy30 = createMultiplyBy(30d);\nSystem.out.println(multiplyBy30.apply(1));\n```", "```java\nFunction<Double, Double> createSubtract(double num){\n  Function<Double, Double> ourFunc = new Function<Double, Double>(){\n    public Double apply(Double dbl){ return dbl - num; }\n  };\n  return ourFunc;\n}\npublic static Consumer<String> createTalker(String value){\n  Consumer<String> consumer = new Consumer<String>() {\n    public void accept(String s) { \n      System.out.println(s + value); \n    }\n  };\n  return consumer;\n}\npublic static Supplier<String> createResultSupplier(){\n  Supplier<String> supplier = new Supplier<String>() {\n    public String get() {\n      String res = \"Success\";\n      //Do something and return Success or Error.\n      return res;\n    }\n  };\n  return supplier;\n}\n```", "```java\nFunction<Double,Double> subtract7 = createSubtract(7.0);\nSystem.out.println(subtract7.apply(10.0));\n\nConsumer<String> sayHappyToSee = createTalker(\"Happy to see\n                                              you again!\");\nsayHappyToSee.accept(\"Hello!\");\n\nSupplier<String> successOrFailure = createResultSupplier();\nSystem.out.println(successOrFailure.get());\n```", "```java\nPredicate<Double> createIsSmallerThan(double limit){\n  Predicate<Double> pred = new Predicate<Double>() {\n    public boolean test(Double num) {\n      System.out.println(\"Test if \" + num + \" is smaller than \" \n                         + limit);\n      return num < limit;\n    }\n  };\n  return pred;\n}\nPredicate<Double> createIsBiggerThan(double limit){\n  Predicate<Double> pred = new Predicate<Double>() {\n    public boolean test(Double num) {\n      System.out.println(\"Test if \" + num + \" is bigger than \" \n                         + limit);\n      return num > limit;\n    }\n  };\n  return pred;\n}\n```", "```java\nPredicate<Double> isSmallerThan20 = createIsSmallerThan(20d);\nSystem.out.println(isSmallerThan20.test(10d));\n\nPredicate<Double> isBiggerThan18 = createIsBiggerThan(18d);\nSystem.out.println(isBiggerThan18.test(10d));\n```", "```java\nSupplier<String> applyCompareAndSay(int i,\n                      Function<Integer, Double> func,\n                      Predicate<Double> isSmaller){\n  Supplier<String> supplier = new Supplier<String>() {\n    public String get() {\n      double v = func.apply(i);\n      return isSmaller.test(v)? v + \" is smaller\" : v + \" is bigger\";\n    }\n  };\n  return supplier;\n}\n```", "```java\nSupplier<String> compare1By10And20 = \n         applyCompareAndSay(1, multiplyBy10, isSmallerThan20);\nSystem.out.println(compare1By10And20.get());\nSupplier<String> compare1By30And20 = \n         applyCompareAndSay(1, multiplyBy30, isSmallerThan20);\nSystem.out.println(compare1By30And20.get());\n```", "```java\nSupplier<String> compare1By30Less7To20 = \n         applyCompareAndSay(1, multiplyBy30.andThen(subtract7), \n                            isSmallerThan20);\nSystem.out.println(compare1By30Less7To20.get());\nSupplier<String> compare1By30Less7TwiceTo20 = \n         applyCompareAndSay(1, multiplyBy30.andThen(subtract7)\n                               .andThen(subtract7),isSmallerThan20);\nSystem.out.println(compare1By30Less7TwiceTo20.get());\n```", "```java\nSupplier<String> compare1By30Less7To20 = \n         applyCompareAndSay(1, subtract7.compose(multiplyBy30),\n                            isSmallerThan20);\nSystem.out.println(compare1By30Less7To20.get());\nSupplier<String> compare1By30Less7TwiceTo20 = \n         applyCompareAndSay(1, subtract7.compose(multiplyBy30)\n                               .andThen(subtract7), isSmallerThan20);\n System.out.println(compare1By30Less7TwiceTo20.get());\n```", "```java\nConsumer<String> askHowAreYou = createTalker(\"How are you?\");\nsayHappyToSee.andThen(askHowAreYou).accept(\"Hello!\");\n```", "```java\nSupplier<String> applyCompareAndSay(int i, \n                   Function<Integer, Double> func, \n                   Predicate<Double> compare, String message) {\n  Supplier<String> supplier = new Supplier<String>() {\n    public String get() {\n      double v = func.apply(i);\n      return (compare.test(v)? v + \" is \" : v + \" is not \") + message;\n    }\n  };\n  return supplier;\n} \n```", "```java\nSupplier<String> compare1By30Less7TwiceTo18And20 = \n         applyCompareAndSay(1, multiplyBy30.andThen(subtract7)\n                               .andThen(subtract7),\n                            isSmallerThan20.and(isBiggerThan18), \n                            \"between 18 and 20\");\nSystem.out.println(compare1By30Less7TwiceTo18And20.get());\n```", "```java\nFunction<Integer, Integer> id = Function.identity();\nSystem.out.println(\"Function.identity.apply(4) => \" + id.apply(4));\n```", "```java\n        Function<Integer, Double> ourFunc = \n                          new Function<Integer, Double>(){\n          public Double apply(Integer i){ return i * 10.0; }\n        };\n        System.out.println(ourFunc.apply(1));\n\n        Consumer<String> consumer = new Consumer<String>() {\n          public void accept(String s) {\n            System.out.println(\"The \" + s + \" is consumed.\");\n          }\n        };\n        consumer.accept(\"Hello!\");\n\n        Supplier<String> supplier = new Supplier<String>() {\n          public String get() {\n            String res = \"Success\";\n            //Do something and return result â€“ Success or Error.\n            return res;\n          }\n        };\n        System.out.println(supplier.get());\n\n        Predicate<Double> pred = new Predicate<Double>() {\n          public boolean test(Double num) {\n            System.out.println(\"Test if \" + num + \n                               \" is smaller than 20\");\n            return num < 20;\n          }\n        };\n        System.out.println(pred.test(10.0) ? \n                           \"10 is smaller\" : \"10 is bigger\");\n```", "```java\n        Function<Integer, Double> ourFunc = i -> i * 10.0;\n        System.out.println(ourFunc.apply(1));\n\n        Consumer<String> consumer = \n           s -> System.out.println(\"The \" + s + \" is consumed.\");\n        consumer.accept(\"Hello!\");\n\n        Supplier<String> supplier = () -> {\n          String res = \"Success\";\n          //Do something and return result â€“ Success or Error.\n          return res;\n        };\n        System.out.println(supplier.get());\n\n        Predicate<Double> pred = num -> {\n          System.out.println(\"Test if \" + num + \" is smaller than 20\");\n          return num < 20;\n        };\n        System.out.println(pred.test(10.0) ? \n                           \"10 is smaller\" : \"10 is bigger\");\n```", "```java\nBiFunction<Integer, String, Double> demo = \n                  (x,y) -> x * 10d + Double.parseDouble(y);\nSystem.out.println(demo.apply(1, \"100\"));\n\n//The above is the equivalent to the statement block: \ndemo = (x,y) -> {\n  //You can add here any code you need\n  double v = 10d;\n  return x * v + Double.parseDouble(y); \n};\nSystem.out.println(demo.apply(1, \"100\"));\n```", "```java\nFunction<Integer, Double> multiplyBy10 = i -> i * 10.0;\nSystem.out.println(\"1 * 10.0 => \"+multiplyBy10.apply(1));\n\nFunction<Integer, Double> multiplyBy30 = i -> i * 30.0;\nSystem.out.println(\"1 * 30.0 => \"+multiplyBy30.apply(1));\n\nFunction<Double,Double> subtract7 = x -> x - 7.0;\nSystem.out.println(\"10.0 - 7.0 =>\"+subtract7.apply(10.0));\n\nConsumer<String> sayHappyToSee = \n   s -> System.out.println(s + \" Happy to see you again!\");\nsayHappyToSee.accept(\"Hello!\");\n\nPredicate<Double> isSmallerThan20 = x -> x < 20d;\nSystem.out.println(\"10.0 is smaller than 20.0 => \" + \n                   isSmallerThan20.test(10d));\n\nPredicate<Double> isBiggerThan18 = x -> x > 18d;\nSystem.out.println(\"10.0 is smaller than 18.0 => \" + \n                   isBiggerThan18.test(10d));\n```", "```java\nSupplier<String> applyCompareAndSay(int i, \n                      Function<Integer, Double> func, \n                      Predicate<Double> compare, String message){\n  return () -> {\n    double v = func.apply(i);\n    return (compare.test(v) ? v + \" is \" : v + \" is not \") + message;\n  };\n}\n```", "```java\ndouble v = 10d;\nmultiplyBy10 = i -> i * v;\n```", "```java\ndouble v = 10d;\nv = 30d; //Causes compiler error\nmultiplyBy10 = i -> i * v;\n```", "```java\ndouble v = 10d;\nmultiplyBy10 = i -> {\n  v = 30d; //Causes compiler error\n  return i * v;\n};\n\n```", "```java\npublic static void main(String arg[]) {\n  Demo d = new Demo();\n  d.method();\n}\n\npublic static class Demo{\n  private String prop = \"DemoProperty\";\n  public void method(){\n    Consumer<String> consumer = s -> {\n    System.out.println(\"Lambda accept(\" + s + \"): this.prop=\" \n                       + this.prop);\n  };\n  consumer.accept(this.prop);\n\n  consumer = new Consumer<String>() {\n    private String prop = \"ConsumerProperty\";\n    public void accept(String s) {\n      System.out.println(\"Anonymous accept(\" + s + \"): this.prop=\" \n                         + this.prop);\n    }\n  };\n  consumer.accept(this.prop);\n}\n```", "```java\nSupplier<String> compare1By30Less7TwiceTo18And20 = \n        applyCompareAndSay(1, x -> x * 30.0 - 7.0 - 7.0, \n                           x -> x < 20 && x > 18, \"betwen 18 and 20\");\nSystem.out.println(\"Compare (1 * 30 - 7 - 7) and the range\"\n                   + \" 18 to 20 => \" \n                   + compare1By30Less7TwiceTo18And20Lambda.get());\n```", "```java\n         Supplier<String> supplier = Food::getFavorite;\n```", "```java\n         Function<Integer, String> func = Food::getFavorite; \n```", "```java\n         public class Food{\n           public static String getFavorite(){ return \"Donut!\"; }\n           public static String getFavorite(int num){\n             return num > 1 ? String.valueOf(num) \n                              + \" donuts!\" : \"Donut!\";\n           }\n         }\n```", "```java\n         Supplier<String> supplier = Food::getFavorite;\n         System.out.println(\"supplier.get() => \" + supplier.get());\n\n         Function<Integer, String> func = Food::getFavorite;\n         System.out.println(\"func.getFavorite(1) => \"\n                            + func.apply(1));\n         System.out.println(\"func.getFavorite(2) => \" \n                            + func.apply(2));\n```", "```java\n         private String name;\n         public Food(){ this.name = \"Donut\"; };\n         public String sayFavorite(){\n           return this.name + (this.name.toLowerCase()\n                      .contains(\"donut\") ? \"? Yes!\" : \"? D'oh!\");\n         }\n```", "```java\n         Supplier<Food> constrFood = Food::new;\n         Food food = constrFood.get();\n         System.out.println(\"new Food().sayFavorite() => \" \n                            + food.sayFavorite());\n```", "```java\n         public Food(String name){ \n           this.name = name; \n         } \n```", "```java\n         Function<String, Food> constrFood1 = Food::new;\n         food = constrFood1.apply(\"Donuts\");\n         System.out.println(\"new Food(Donuts).sayFavorite() => \" \n                            + food.sayFavorite());\n         food = constrFood1.apply(\"Carrot\");\n         System.out.println(\"new Food(Carrot).sayFavorite() => \" \n                            + food.sayFavorite());\n```", "```java\n         public Food(String name, String anotherName) {\n           this.name = name + \" and \" + anotherName;\n         }\n```", "```java\n         BiFunction<String, String, Food> constrFood2 = Food::new;\n         food = constrFood2.apply(\"Donuts\", \"Carrots\");\n         System.out.println(\"new Food(Donuts,Carrot).sayFavorite() => \"\n                            + food.sayFavorite());\n         food = constrFood2.apply(\"Carrot\", \"Broccoli\");\n         System.out.println(\"new Food(Carrot,Broccoli)\n                            .sayFavorite() => \" + food.sayFavorite());\n```", "```java\n        @FunctionalInterface\n        interface Func<T1,T2,T3,R>{ R apply(T1 t1, T2 t2, T3 t3);}\n```", "```java\n         Func<Integer, Double, String, Food> constr3 = Food::new;\n         Food food = constr3.apply(1, 2d, \"Food\");\n```", "```java\n        @FunctionalInterface\n        interface FourParamFunction<T1,T2,T3,R>{\n          R construct(T1 t1, T2 t2, T3 t3);\n        }\n        Func<Integer, Double, String, Food> constr3 = Food::new;\n        Food food = constr3.construct(1, 2d, \"Food\");\n```", "```java\n         Food food1 = new Food();\n         Food food2 = new Food(\"Carrot\");\n         Food food3 = new Food(\"Carrot\", \"Broccoli\");\n         Supplier<String> supplier1 = food1::sayFavorite;\n         Supplier<String> supplier2 = food2::sayFavorite;\n         Supplier<String> supplier3 = food3::sayFavorite;\n         System.out.println(\"new Food()=>supplier1.get() => \" + \n                            supplier1.get());\n         System.out.println(\"new Food(Carrot)=>supplier2.get() => \" \n                            + supplier2.get());\n         System.out.println(\"new Food(Carrot,Broccoli)\" +\n                            \"=>supplier3.get() => \" + supplier3.get());\n```", "```java\n        Function<Food, String> func = Food::sayFavorite;\n```", "```java\n        System.out.println(\"new Food().sayFavorite() => \" \n                           + func.apply(food1));\n        System.out.println(\"new Food(Carrot).sayFavorite() => \" \n                           + func.apply(food2));\n        System.out.println(\"new Food(Carrot,Broccoli).sayFavorite()=> \" \n                           + func.apply(food3));\n```", "```java\n        public String sayFavorite(String name){\n          this.name = this.name + \" and \" + name;\n          return sayFavorite();\n        }\n```", "```java\n        Function<String, String> func1 = food1::sayFavorite;\n        Function<String, String> func2 = food2::sayFavorite;\n        Function<String, String> func3 = food3::sayFavorite;\n        System.out.println(\"new Food().sayFavorite(Carrot) => \" \n                           + func1.apply(\"Carrot\"));\n        System.out.println(\"new Food(Carrot).sayFavorite(Broccoli) => \"\n                           + func2.apply(\"Broccoli\"));\n        System.out.println(\"new Food(Carrot,Broccoli)\" +\n                           \".sayFavorite(Donuts) => \" + \n                           func3.apply(\"Donuts\"));\n```", "```java\nFunction<String, Integer> strLength = String::length;\nSystem.out.println(strLength.apply(\"3\"));\n\nFunction<String, Integer> parseInt = Integer::parseInt;\nSystem.out.println(parseInt.apply(\"3\"));\n\nConsumer<String> consumer = System.out::println;\nconsumer.accept(\"Hello!\");\n```", "```java\nFunction<Integer, String[]> createArray = String[]::new;\nString[] arr = createArray.apply(3);\nSystem.out.println(\"Array length=\" + arr.length);\nint i = 0;\nfor(String s: arr){ arr[i++] = String.valueOf(i); }\n\nFunction<String[], List<String>> toList = Arrays::<String>asList;\nList<String> l = toList.apply(arr);\nSystem.out.println(\"List size=\" + l.size());\nfor(String s: l){ System.out.println(s); }\n```", "```java\npublic interface Calculator {\n  double calculateSomething();\n}\npublic class CalcImpl implements Calculator{\n  private int par1;\n  private double par2;\n  public CalcImpl(int par1, double par2){\n    this.par1 = par1;\n    this.par2 = par2;\n  }\n  public double calculateSomething(){\n    return par1 * par2;\n  }\n}\n```", "```java\npublic interface GrandApi{\n  double doSomething(Calculator calc, String str, int i);\n}\n```", "```java\ndouble doSomething(Calculator calc, String str, int i){\n  return calc.calculateSomething() * i + str.length();\n}\n```", "```java\nGrandApi api = new GrandImpl();\nCalculator calc = new CalcImpl(20, 10d);\ndouble res = api.doSomething(calc, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\nGrandApi api = new GrandImpl();\ndouble res = api.doSomething(new Calculator() {\n  public double calculateSomething() {\n    return 20 * 10d;\n  }\n}, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\npublic static class AnyImpl{\n  public double doIt(){ return 1d; }\n  public double doSomethingElse(){ return 100d; }\n}\n```", "```java\nGrandApi api = new GrandImpl();\nAnyImpl anyImpl = new AnyImpl();\ndouble res = api.doSomething(anyImpl::doIt, \"abc\", 2); \nSystem.out.println(res);\n```", "```java\ndouble res = api.doSomething(() -> 20 * 10d, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\nint i = 20;\ndouble d = 10.0;\ndouble res = api.doSomething(() -> i * d, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\npublic interface GrandApi{\n  double doSomething(Supplier<Double> supp, String str, int i);\n}\n```", "```java\nGrandApi api = new GrandImpl();\nSupplier<Double> supp = () -> 20 * 10d;\ndouble res = api.doSomething(supp, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\nGrandApi api = new GrandImpl();\ndouble res = api.doSomething(() -> 20 * 10d, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\nGrandApi api = new GrandImpl();\nAnyImpl anyImpl = new AnyImpl();\ndouble res = api.doSomething(anyImpl::doIt, \"abc\", 2); \nSystem.out.println(res);\n```", "```java\ndouble doSomething2(Function<Integer,Integer> function, double num);\nvoid doSomething2(Consumer<String> consumer, double num);\n\n```", "```java\n GrandApi api = new GrandImpl();\n Consumer<String> consumer = System.out::println;\n api.doSomething2(consumer, 2d);\n```", "```java\nGrandApi api = new GrandImpl();\napi.doSomething2((Consumer<String>)System.out::println,2d);\n```", "```java\nGrandApi api = new GrandImpl();\napi.doSomething2(System.out::println, 2d);\n```", "```java\ndouble doSomethingWithFunction(Function<Integer, Integer> function,\n                               double num);\nvoid doSomethingWIthConsumer(Consumer<String> consumer, double num);\n```", "```java\nGrandApi api = new GrandImpl();\nint[] arr = new int[1];\narr[0] = 1;\ndouble res = api.doSomething(() -> 20 * 10d + arr[0]++, \"abc\", 2);\nSystem.out.println(res);\nres = api.doSomething(() -> 20 * 10d + arr[0]++, \"abc\", 2);\nSystem.out.println(res);\nres = api.doSomething(() -> 20 * 10d + arr[0]++, \"abc\", 2);\nSystem.out.println(res);\n```", "```java\ndouble res = api.doSomething2((Integer i) -> { return i * 10; }, 2d);\n```", "```java\ndouble res = api.doSomething2(i -> i * 10, 2d); \n```", "```java\npublic interface TrafficUnit {\n  VehicleType getVehicleType();\n  int getHorsePower();\n  int getWeightPounds();\n  int getPayloadPounds();\n  int getPassengersCount();\n  double getSpeedLimitMph();\n  double getTraction();\n  RoadCondition getRoadCondition();\n  TireCondition getTireCondition();\n  int getTemperature();\n} \n```", "```java\nenum VehicleType { \n  CAR(\"Car\"), TRUCK(\"Truck\"), CAB_CREW(\"CabCrew\");\n  private String type;\n  VehicleType(String type){ this.type = type; }\n  public String getType(){ return this.type;}\n}\nenum RoadCondition {\n  DRY(1.0), \n  WET(0.2) { public double getTraction() { \n    return temperature > 60 ? 0.4 : 0.2; } }, \n  SNOW(0.04);\n  public static int temperature;\n  private double traction;\n  RoadCondition(double traction){ this.traction = traction; }\n  public double getTraction(){return this.traction;}\n}\nenum TireCondition {\n  NEW(1.0), WORN(0.2);\n  private double traction;\n  TireCondition(double traction){ this.traction = traction; }\n  public double getTraction(){ return this.traction;}\n}\n\n```", "```java\nTrafficUnit getOneUnit(Month month, DayOfWeek dayOfWeek, \n                       int hour, String country, String city, \n                       String trafficLight);\nList<TrafficUnit> generateTraffic(int trafficUnitsNumber, \n                  Month month, DayOfWeek dayOfWeek, int hour,\n                  String country, String city, String trafficLight);\n```", "```java\nTrafficUnit trafficUnit = FactoryTraffic.getOneUnit(Month.APRIL, \n               DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\n```", "```java\nList<TrafficUnit> trafficUnits = \n    FactoryTrafficModel.generateTraffic(20, Month.APRIL, DayOfWeek.FRIDAY,\n                                        17, \"USA\", \"Denver\", \"Main103S\");\n```", "```java\ndouble timeSec = 10.0;\nTrafficUnit trafficUnit = FactoryTraffic.getOneUnit(Month.APRIL, \n            DayOfWeek.FRIDAY, 17, \"USA\", \"Denver\", \"Main103S\");\nVehicle vehicle = FactoryVehicle.build(trafficUnit);\nSpeedModel speedModel =  \n          FactorySpeedModel.generateSpeedModel(trafficUnit);\nvehicle.setSpeedModel(speedModel);\nprintResult(trafficUnit, timeSec, vehicle.getSpeedMph(timeSec));\n```", "```java\nvoid printResult(TrafficUnit tu, double timeSec, \n                                          double speedMph){\n   System.out.println(\"Road \" + tu.getRoadCondition() + \", tires \"\n                      + tu.getTireCondition() + \": \" \n                      + tu.getVehicleType().getType() \n                      + \" speedMph (\" + timeSec + \" sec)=\" \n                      + speedMph + \" mph\");\n}\n```", "```java\ndouble weightPower = 2.0 * horsePower * 746 * 32.174 / weightPounds;\ndouble speed = Math.round(Math.sqrt(timeSec * weightPower) \n                          * 0.68 * traction);\n```", "```java\npublic double getTraction() {\n  double rt = getRoadCondition().getTraction();\n  double tt = getTireCondition().getTraction();\n  return rt * tt;\n}\n```", "```java\n        public interface Traffic {\n          void speedAfterStart(double timeSec, int trafficUnitsNumber);\n        }  \n```", "```java\n        public class TrafficImpl implements Traffic {\n          private int hour;\n          private Month month;\n          private DayOfWeek dayOfWeek;\n          private String country, city, trafficLight;\n          public TrafficImpl(Month month, DayOfWeek dayOfWeek, \n                             int hour, String country, String city, \n                             String trafficLight){\n            this.month = month;\n            this.dayOfWeek = dayOfWeek;\n            this.hour = hour;\n            this.country = country;\n            this.city = city;\n            this.trafficLight = trafficLight;\n          }\n          public void speedAfterStart(double timeSec, \n                                      int trafficUnitsNumber) {\n            List<TrafficUnit> trafficUnits = \n                FactoryTraffic.generateTraffic(trafficUnitsNumber,\n                               month, dayOfWeek, hour, country,\n                               city, trafficLight);\n            for(TrafficUnit tu: trafficUnits){\n              Vehicle vehicle = FactoryVehicle.build(tu);\n              SpeedModel speedModel = \n                  FactorySpeedModel.generateSpeedModel(tu);\n              vehicle.setSpeedModel(speedModel);\n              double speed = vehicle.getSpeedMph(timeSec);\n              printResult(tu, timeSec, speed);\n            }\n          }\n        }\n```", "```java\n        Traffic api = new TrafficImpl(Month.APRIL, DayOfWeek.FRIDAY,\n                                      17, \"USA\", \"Denver\", \"Main103S\");\n        double timeSec = 10.0;\n        int trafficUnitsNumber = 10;\n        api.speedAfterStart(timeSec, trafficUnitsNumber); \n```", "```java\n        public interface SpeedModel {\n          double getSpeedMph(double timeSec, int weightPounds, \n                             int horsePower);\n        }\n```", "```java\n        public interface Traffic {\n          void speedAfterStart(double timeSec, int trafficUnitsNumber, \n                               SpeedModel speedModel);\n        }\n```", "```java\n        double weightPower = \n               2.0 * horsePower * 746 * 32.174/weightPounds;\n        double speed = Math.round(Math.sqrt(timeSec * weightPower) \n                                  * 0.68 * traction);\n```", "```java\n        public void speedAfterStart(double timeSec, \n               int trafficUnitsNumber, SpeedModel speedModel) {\n          List<TrafficUnit> trafficUnits = \n               FactoryTraffic.generateTraffic(trafficUnitsNumber,\n                                   month, dayOfWeek, hour, country,\n                                   city, trafficLight);\n          for(TrafficUnit tu: trafficUnits){\n            Vehicle vehicle = FactoryVehicle.build(tu);\n            vehicle.setSpeedModel(speedModel);\n            double speed = vehicle.getSpeedMph(timeSec);\n            speed = Math.round(speed * tu.getTraction());\n            printResult(tu, timeSec, speed);\n          }\n        }\n```", "```java\n        Traffic api = new TrafficImpl(Month.APRIL, DayOfWeek.FRIDAY, \n                                      17, \"USA\", \"Denver\", \"Main103S\");\n        double timeSec = 10.0;\n        int trafficUnitsNumber = 10;\n        SpeedModel speedModel = (t, wp, hp) -> {\n          double weightPower = 2.0 * hp * 746 * 32.174 / wp;\n          return Math.round(Math.sqrt(t * weightPower) * 0.68);\n        };\n        api.speedAfterStart(timeSec, trafficUnitsNumber, speedModel);\n```", "```java\n        Vehicle vehicle = FactoryVehicle.build(trafficUnit);\n        SpeedModel speedModel = (t, wp, hp) -> {\n return -1.0;\n        };\n        vehicle.setSpeedModel(speedModel);\n        printResult(trafficUnit, timeSec, vehicle.getSpeedMph(timeSec));\n```", "```java\n        void speedAfterStartCarEngine(double timeSec, \n                            int trafficUnitsNumber, int horsePower);\n        void speedAfterStartCarTruckOnly(double timeSec, \n                                 int trafficUnitsNumber);\n        void speedAfterStartCarTruckEngine(double timeSec, \n                            int trafficUnitsNumber, int carHorsePower, \n                            int truckHorsePower);\n```", "```java\n        void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                             SpeedModel speedModel, \n                             Predicate<TrafficUnit> limitTraffic);\n```", "```java\n        public void speedAfterStart(double timeSec, \n                    int trafficUnitsNumber, SpeedModel speedModel, \n                    Predicate<TrafficUnit> limitTraffic) {\n          List<TrafficUnit> trafficUnits = \n               FactoryTraffic.generateTraffic(trafficUnitsNumber,\n                                      month, dayOfWeek, hour, country,\n                                      city, trafficLight);\n          for(TrafficUnit tu: trafficUnits){\n            if(limitTraffic.test(tu){\n              Vehicle vehicle = FactoryVehicle.build(tu);\n              vehicle.setSpeedModel(speedModel);\n              double speed = vehicle.getSpeedMph(timeSec);\n              speed = Math.round(speed * tu.getTraction());\n              printResult(tu, timeSec, speed);\n            }\n          }\n        }\n```", "```java\n        Predicate<TrafficUnit> limitTraffic = tu ->\n                  (tu.getHorsePower() < 250 && tu.getVehicleType() \n                   == VehicleType.CAR) || (tu.getHorsePower() < 400 \n                   && tu.getVehicleType()==VehicleType.TRUCK);\n\n        api.speedAfterStart(timeSec, trafficUnitsNumber, \n                            speedModel, limitTraffic);\n```", "```java\n        Predicate<TrafficUnit> limitTraffic2 = \n            tu -> tu.getTemperature() > 65 \n            && tu.getTireCondition() == TireCondition.NEW \n            && tu.getRoadCondition() == RoadCondition.WET;\n```", "```java\n        api.speedAfterStart(timeSec, trafficUnitsNumber, \n                            speedModel, tu -> true);\n```", "```java\n        public void speedAfterStart(double timeSec,  \n                    int trafficUnitsNumber, SpeedModel speedModel,\n                    BiPredicate<TrafficUnit, Double> limitSpeed){\n          List<TrafficUnit> trafficUnits = \n               FactoryTraffic.generateTraffic(trafficUnitsNumber,\n                                      month, dayOfWeek, hour, country,\n                                      city, trafficLight);\n          for(TrafficUnit tu: trafficUnits){\n            Vehicle vehicle = FactoryVehicle.build(tu);\n            vehicle.setSpeedModel(speedModel);\n            double speed = vehicle.getSpeedMph(timeSec);\n            speed = Math.round(speed * tu.getTraction());\n            if(limitSpeed.test(tu, speed)){\n              printResult(tu, timeSec, speed);\n            }\n          }\n        }\n```", "```java\n        void speedAfterStart(double timeSec, int trafficUnitsNumber, \n                       SpeedModel speedModel,\n                       BiPredicate<TrafficUnit, Double> limitSpeed);\n```", "```java\n          BiPredicate<TrafficUnit, Double> limitSpeed = (tu, sp) ->\n            (sp > (tu.getSpeedLimitMph() + 8.0) \n             && tu.getRoadCondition() == RoadCondition.DRY) || \n            (sp > (tu.getSpeedLimitMph() + 5.0) \n             && tu.getRoadCondition() == RoadCondition.WET) || \n            (sp > (tu.getSpeedLimitMph() + 0.0) \n             && tu.getRoadCondition() == RoadCondition.SNOW);\n\n          api.speedAfterStart(timeSec, trafficUnitsNumber, \n                              speedModel, limitSpeed);\n```", "```java\n        public interface Traffic {\n          void speedAfterStart(double timeSec, int trafficUnitsNumber);\n          void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                               SpeedModel speedModel);\n          void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                         SpeedModel speedModel, \n                         Predicate<TrafficUnit> limitTraffic);\n          void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                         SpeedModel speedModel, \n                         BiPredicate<TrafficUnit,Double> limitTraffic);\n        }\n```", "```java\nvoid printResult(TrafficUnit tu, double timeSec, double speedMph) {\n  System.out.println(\"Road \" + tu.getRoadCondition() + \", tires \" \n                     + tu.getTireCondition() + \": \" \n                     + tu.getVehicleType().getType() + \" speedMph (\" \n                     + timeSec + \" sec)=\" + speedMph + \" mph\");\n}\n```", "```java\nTraffic api = new TrafficImpl(Month.APRIL, DayOfWeek.FRIDAY, 17,\n                              \"USA\", \"Denver\", \"Main103S\");\ndouble timeSec = 10.0;\nint trafficUnitsNumber = 10;\nBiConsumer<TrafficUnit, Double> output = (tm, sp) ->\n  System.out.println(\"Road \" + tm.getRoadCondition() + \", tires \" \n                     + tm.getTireCondition() + \": \" \n                     + tm.getVehicleType().getType() + \" speedMph (\" \n                     + timeSec + \" sec)=\" + sp + \" mph\");\napi.speedAfterStart(timeSec, trafficUnitsNumber, speedModel, output);\n```", "```java\npublic void speedAfterStart(double timeSec, int trafficUnitsNumber,\n                            SpeedModel speedModel) {\n  List<TrafficUnit> trafficUnits = FactoryTraffic\n              .generateTraffic(trafficUnitsNumber, month, \n                               dayOfWeek, hour, country, city,\n                               trafficLight);\n  for(TrafficUnit tu: trafficUnits){\n    Vehicle vehicle = FactoryVehicle.build(tu);\n    vehicle.setSpeedModel(speedModel);\n    double speed = vehicle.getSpeedMph(timeSec);\n    speed = Math.round(speed * tu.getTraction());\n    printResult.accept(tu, speed);\n  }\n}\n```"]