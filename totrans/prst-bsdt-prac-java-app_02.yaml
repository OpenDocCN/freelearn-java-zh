- en: '2'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: Exploring the Multiple Database Flavors
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索多种数据库风味
- en: As a system evolves, especially within a microservices architecture, it becomes
    necessary to implement a polyglot persistence strategy to accommodate the individual
    needs of decoupled and independent services. This involves examining various options
    for storing data, including **Database Management Systems** (**DBMSs**) such as
    relational, NoSQL, and NewSQL databases. It is important to consider the application’s
    use case scenarios for each type of database in order to avoid overengineering
    the architectural design.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 随着系统的演变，尤其是在微服务架构中，实施一种多语言持久化策略来满足解耦和独立服务的个别需求变得必要。这涉及到检查存储数据的各种选项，包括关系型、NoSQL和新SQL数据库在内的**数据库管理系统**（**DBMSs**）。为了防止过度设计架构设计，考虑每种数据库类型的应用用例场景是很重要的。
- en: In this chapter, we will delve into the characteristics and advantages of both
    traditional relational databases and newer non-relational databases. We will also
    take a closer look at NewSQL databases and their place in the market.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入研究传统关系型数据库和较新的非关系型数据库的特点和优势。我们还将更详细地探讨NewSQL数据库及其在市场中的位置。
- en: 'Before delving into the application details, we’ll start by familiarizing ourselves
    with the multiple storage solutions that we can adopt as the persistence strategy
    of our solutions. The following topics will be covered:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究应用程序细节之前，我们将首先熟悉我们可以采用作为解决方案持久化策略的多种存储解决方案。以下主题将涵盖：
- en: A look back at relational databases
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾关系型数据库
- en: A deep dive into non-relational databases
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深入了解非关系型数据库
- en: NewSQL databases – trying to get the best out of both worlds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NewSQL数据库 – 努力从两个世界中获取最佳
- en: A look back at relational databases
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回顾关系型数据库
- en: Relational databases have been a trusted solution for data storage for over
    50 years, with widespread adoption amongst worldwide corporations. One of the
    best advantages users gain from using relational databases is being able to use
    **Structured Query** **Language** (**SQL**).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库已经是一种超过50年的数据存储信任解决方案，在全球范围内被广泛采用。用户从使用关系型数据库中获得的最优点之一是能够使用**结构化查询语言**（**SQL**）。
- en: The fact that SQL is a standard query language supported by multiple vendors
    means SQL code is portable, and the same SQL code works with little or no modification
    on many database systems. This is a way of assuring vendor lock-in. Other than
    that, SQL also helps to reduce the cognitive load of having to learn a new language
    or API, such as Java’s JDBC or JPA.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: SQL是一种由多个供应商支持的标准化查询语言，这意味着SQL代码是可移植的，相同的SQL代码在许多数据库系统上只需稍作修改或无需修改即可工作。这是一种确保供应商锁定的方式。除此之外，SQL还有助于减少学习新语言或API（如Java的JDBC或JPA）的认知负担。
- en: Now, when referring to the DBMS, in addition to a large variety of tools and
    resources, relational databases also adhere to the **ACID** principles (**atomicity,
    consistency, isolation, and durability**), ensuring the reliability and integrity
    of data transactions. These features make relational databases a reliable choice
    for a large number of use cases. Relational databases have shown extreme maturity,
    bringing several success cases that cover, beyond the basics, other capabilities
    such as providing tools for backup, data visualization, and more. It is a fact
    that when someone who is used to working with SQL databases switches the focus
    and starts working with NoSQL storage solutions, they do miss all the side-tooling
    and thousands of instruments available to support them in their daily tasks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们提到DBMS时，除了大量工具和资源外，关系型数据库还遵循**ACID**原则（**原子性、一致性、隔离性和持久性**），确保数据事务的可靠性和完整性。这些特性使关系型数据库成为大量用例的可靠选择。关系型数据库已经显示出极高的成熟度，带来了几个成功案例，这些案例不仅涵盖了基础知识，还包括提供备份工具、数据可视化等其他功能。事实上，当习惯于使用SQL数据库的人转向关注NoSQL存储解决方案时，他们会错过所有支持他们日常任务的各种辅助工具和数千种工具。
- en: In Java, we have JDBC, and a language we can learn once and write/apply anywhere.
    The relational database engine is transparent; thus, JDBC and JPA will be the
    same.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，我们有JDBC，这是一种我们可以学习一次并在任何地方编写/应用的语言。关系型数据库引擎是透明的；因此，JDBC和JPA将是相同的。
- en: 'The essential characteristics of these persistence technologies are the properties
    associated with data transactions: **atomicity, consistency, isolation, and durability**
    (**ACID**). Transactions that comply with ACID properties have the following aspects:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些持久化技术的本质特征是与数据事务相关的属性：**原子性、一致性、隔离性和持久性**（**ACID**）。符合ACID属性的事务具有以下方面：
- en: '**Atomicity**: A transaction is an atomic unit. Either all database operations
    occur as a unit, or nothing occurs; it is an ‘all or nothing’ operation. This
    results in the prevention of partial data updates and potential data inconsistency.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子性**：事务是一个原子单元。要么所有数据库操作作为一个单元发生，要么不发生；这是一个“全有或全无”的操作。这导致防止了部分数据更新和潜在的数据不一致。'
- en: '**Consistency**: The database should be in a consistent state when a transaction
    *begins* and *ends*. The transaction should follow every database constraint and
    rule in order to be adequately consistent.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一致性**：当事务**开始**和**结束**时，数据库应处于一致状态。事务应遵循每个数据库约束和规则，以确保充分的一致性。'
- en: '**Isolation**: One transaction should not adversely or unexpectedly impact
    another operation. For example, one table insert will generate a table row ID
    that is used by the second operation. However, we don’t want two operations changing
    the same row simultaneously.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隔离性**：一个事务不应不利或意外地影响另一个操作。例如，一个表插入将生成一个表行ID，该ID被第二个操作使用。然而，我们不希望两个操作同时更改相同的行。'
- en: '**Durability**: Upon completion of a transaction, once committed, the changes
    will remain permanently. This ensures data consistency even in the case of unexpected
    failures.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持久性**：事务完成后，一旦提交，更改将永久保留。这确保了即使在意外故障的情况下，数据的一致性。'
- en: As we will learn in the upcoming chapters, Java applications have multiple different
    strategies to integrate with a database. There are several design patterns related
    to data integration that can be used to design the applications, ranging from
    a lower to higher decoupling from the underlying database. The reason we should
    worry about the capability of abstracting and having a lower effort when switching
    to another data storage solution is that even though relational databases are
    very mature, they are not suitable for every use case. Characteristics such as
    flexibility in data schema, scalability when handling large datasets in the face
    of a high number of read and write operations, performance of queries on large
    datasets, and handling hierarchical and other complex relationships during data
    modeling are examples of points that are usually stronger on NoSQL databases than
    on relational ones. Now, we should get a better understanding of the multiple
    types of NoSQL databases and their characteristics.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在接下来的章节中学习的，Java应用程序有多种不同的策略与数据库集成。存在几种与数据集成相关的设计模式，可用于设计应用程序，从底层数据库的低度解耦到高度解耦。我们应该担心抽象能力和在切换到另一个数据存储解决方案时的低努力程度的原因是，尽管关系数据库非常成熟，但它们并不适合每个用例。例如，数据模式灵活性、面对大量读写操作时的可扩展性、大型数据集上的查询性能，以及在数据建模期间处理层次结构和其他复杂关系等特点，通常在NoSQL数据库上比在关系数据库上更强。现在，我们应该更好地了解多种类型的NoSQL数据库及其特性。
- en: A deep dive into non-relational databases (NoSQL)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解非关系型数据库（NoSQL）
- en: '**NoSQL** databases provide mechanisms for storing and retrieving unstructured
    data (non-relational), in stark contrast to the tabular relations used in relational
    databases. Compared to relational databases, NoSQL databases have better performance
    and high scalability. They are becoming more popular in several industries, such
    as finance and streaming. As a result of this increased usage, the number of users
    and database vendors is growing.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**NoSQL**数据库提供了存储和检索非结构化数据（非关系型）的机制，与关系数据库中使用的表格关系形成鲜明对比。与关系数据库相比，NoSQL数据库具有更好的性能和高度的可扩展性。它们在金融和流媒体等几个行业中越来越受欢迎。由于这种使用量的增加，用户和数据库供应商的数量正在增长。'
- en: 'In contrast to the relational database ACID principles, in the NoSQL world,
    the key characteristics are **BASE** (**basic availability, soft-state, and eventual
    consistency**). The details of each are as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与关系数据库的ACID原则相对比，在NoSQL世界中，关键特性是**BASE**（**基本可用性、软状态和最终一致性**）。每个细节如下：
- en: '**Basic availability**: A high degree of replication ensures data availability
    even if multiple failures occur.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本可用性**：高程度的复制确保即使发生多次故障，数据仍然可用。'
- en: '**Soft-state**: There is no requirement to have write consistency and no guarantee
    that the replicated data will be consistent across nodes. Unlike in traditional
    relational databases, changes can occur without direct user input.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**软状态**：没有要求具有写入一致性，也没有保证复制的数据将在节点之间保持一致性。与传统的关系数据库不同，更改可以在没有直接用户输入的情况下发生。'
- en: '**Eventual consistency**: The consistency can be handled lazily when data is
    retrieved (read time). In other words, the data will be eventually consistent
    so that all nodes will have the same data but not necessarily at the same time.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最终一致性**：当检索数据（读取时间）时，一致性可以延迟处理。换句话说，数据最终将是一致的，这样所有节点都将具有相同的数据，但不必同时具有。'
- en: There are many NoSQL database types, each of which is designed to handle a specific
    set of workloads and data modeling needs. In order to best define which NoSQL
    storage type to use, we will now delve into it, getting a clearer view of key-value,
    document, column-family, and graph database types.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多NoSQL数据库类型，每种类型都是为处理特定的工作负载和数据建模需求而设计的。为了最好地定义要使用哪种NoSQL存储类型，我们现在将深入探讨，以获得对键值、文档、列族和图数据库类型的更清晰的认识。
- en: After getting a broad understanding of the multiple flavors of NoSQL, you can
    refer to *Figure 2**.5*, presented at the end of this section, to see how concepts
    can be compared between relational databases and some of the NoSQL storage flavors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在对多种NoSQL风味有了广泛了解之后，您可以参考本节末尾提供的**图2.5**，以了解如何在关系数据库和某些NoSQL存储风味之间比较概念。
- en: NoSQL database types – key-value
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库类型 – 键值
- en: These are the simplest storage types in the NoSQL world. The data is stored
    as a collection of key-value pairs in a way that is optimized for storing large
    amounts of data and efficiently handling data search by its key. This database
    type has a structure that resembles the `java.util.Map` API where values are mapped
    to keys.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是NoSQL世界中最简单的存储类型。数据以键值对集合的形式存储，这种方式优化了存储大量数据并有效地通过键进行数据搜索。这种数据库类型具有类似于`java.util.Map`
    API的结构，其中值映射到键。
- en: 'For example, if using such a paradigm to store information about Greek mythological
    figures and associate them with their characteristics, the data association would
    be represented as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果使用这种范例来存储关于希腊神话人物的信息并将它们与它们的特征关联起来，数据关联将表示如下：
- en: '![Figure 2.1 – Key-value store database representation](img/B19375_02_001.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – 键值存储数据库表示](img/B19375_02_001.jpg)'
- en: Figure 2.1 – Key-value store database representation
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – 键值存储数据库表示
- en: Three Greek mythological figures and the associations between them and their
    characteristics are represented in the preceding figure. In this example, the
    value **Sun** has a key **Apollo**, whereas the key **Aphrodite** can be used
    to refer to both **Love** and **Beauty**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，表示了三个希腊神话人物以及它们与特征的关联。在这个例子中，值**太阳**有一个键**阿波罗**，而键**阿芙罗狄蒂**可以用来指代**爱情**和**美丽**。
- en: Currently on the market, some popular implementations of this approach are **Amazon**
    **DynamoDB**, **Hazelcast**, and **Redis** databases, the latter two being open
    source technologies. Each vendor brings its own unique benefits; DynamoDB can
    be used as a fully managed service, meaning that Amazon takes care of all infrastructure
    and maintenance required to run the service. Redis is an in-memory database solution
    that supports pub/sub messaging and caching capabilities. Finally, Hazelcast has
    support for the MapReduce programming model to perform distributed data processing
    tasks, plus cross-language support including not only Java but also .NET and Python.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 目前市场上，这种方法的流行实现包括**Amazon** **DynamoDB**、**Hazelcast**和**Redis**数据库，后两者是开源技术。每个供应商都带来了自己独特的优势；DynamoDB可以作为一项完全托管的服务使用，这意味着亚马逊负责运行该服务所需的所有基础设施和维护。Redis是一种支持pub/sub消息和缓存功能的内存数据库解决方案。最后，Hazelcast支持MapReduce编程模型以执行分布式数据处理任务，以及跨语言支持，包括Java、.NET和Python。
- en: In this database type, there are new concepts to be aware of such as bucket
    and key-value pair. Although not possible for every single aspect, for those who
    are used to the traditional SQL world, there are correlations between both worlds’
    concepts that can facilitate their understanding.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种数据库类型中，有一些新的概念需要了解，例如桶和键值对。尽管不是每个方面都可行，但对于那些习惯于传统SQL世界的人来说，两个世界的概念之间有相关性，这有助于他们理解。
- en: To wrap up, a key-value NoSQL is a database that can store data as a collection
    of key-value pairs and is optimized for storing large amounts of data and efficiently
    retrieving it by key. It is known for being easy to use and understand, plus for
    its horizontal scalability, which makes it a good choice for applications that
    require high levels of read and write throughput.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，键值NoSQL是一种可以将数据作为键值对集合存储的数据库，并且优化了存储大量数据以及通过键高效检索数据。它以其易于使用和理解而闻名，以及其水平可扩展性，这使得它成为需要高读写吞吐量的应用程序的良好选择。
- en: Even though there are multiple benefits, key-value databases can be less flexible
    than other types of NoSQL databases when it comes to data modeling and querying.
    They do not support complex queries and do not have a rich data model, and can
    therefore be less suitable for applications that require sophisticated data manipulation.
    Additionally, key-value databases do not support transactions, which can be a
    limitation for some use cases.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 即使有多个好处，在数据建模和查询方面，键值数据库可能不如其他类型的NoSQL数据库灵活。它们不支持复杂查询，并且没有丰富的数据模型，因此可能不适合需要复杂数据操作的应用程序。此外，键值数据库不支持事务，这可能会限制某些用例。
- en: Now, let’s take a look at the document database type and its characteristics.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看文档数据库类型及其特征。
- en: NoSQL database types – document
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库类型 – 文档
- en: 'The NoSQL document storage type is designed to store, retrieve, and manage
    documents with a minimally defined structure, such as the XML and JSON formats.
    A document without a predefined structure, in other words, is a data model that
    may be composed of numerous fields with different kinds of data, including documents
    inside other documents. A data structure would look like JSON, as shown in the
    following code structure:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL文档存储类型旨在以最小定义的结构存储、检索和管理文档，例如XML和JSON格式。换句话说，没有预定义结构的文档是一种可能由多种不同类型的数据字段组成的模型，包括其他文档内的文档。数据结构看起来像以下代码结构中的JSON：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding JSON structure shows a document that stores data about a mythological
    persona named Diana. This same structure holds different data types such as strings,
    numbers, lists, and other complex objects. Like other types, this is a flexible
    option to store data in a hierarchical format, *with no need to specify a schema
    upfront*. Specifically, the document NoSQL database option can be easy to use
    and require minimal setup, which makes it a good choice for rapid prototyping
    of quickly developing applications. On the other hand, it generally lacks transaction
    support and doesn’t offer as complex querying capabilities as the complex multi-table
    join capabilities offered by traditional relational databases.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 上述JSON结构显示了一个存储有关名为Diana的神话人物数据的文档。这个相同的结构可以存储不同类型的数据，如字符串、数字、列表和其他复杂对象。与其他类型一样，这是一个灵活的选项，可以以分层格式存储数据，*无需事先指定模式*。具体来说，文档NoSQL数据库选项易于使用且需要最少的设置，这使得它成为快速原型设计和快速开发应用程序的良好选择。另一方面，它通常缺乏事务支持，并且不像传统关系数据库提供的复杂多表连接功能那样提供复杂的查询功能。
- en: '**Amazon SimpleDB**, **Apache CouchDB**, and **MongoDB** are all popular NoSQL
    document-type storage solutions. The former is a fully managed database service
    offered by Amazon Web Services, while the latter are both open source solutions.
    All three options offer APIs for interacting with the database using Java.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Amazon SimpleDB**、**Apache CouchDB**和**MongoDB**都是流行的NoSQL文档类型存储解决方案。前者是亚马逊网络服务提供的一项完全管理的数据库服务，而后者都是开源解决方案。所有三种选项都提供了使用Java与数据库交互的API。'
- en: 'Having learned more about key-value and document types, let’s move on to the
    next: the wide-column database.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解了更多关于键值和文档类型之后，让我们继续了解下一个：广度列数据库。
- en: NoSQL database types – wide-column/column-family
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL数据库类型 – 广度列/列族
- en: The wide-column (also known as column-family) model became popular with the
    BigTable paper by Google for being a distributed storage system for structured
    data, and for being projected with the ability to offer high scalability and large
    storage volume capacity. These databases are optimized for storing large amounts
    of structured, semi-structured, and unstructured data with a flexible schema,
    and for supporting high levels of concurrency.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 广度列（也称为列族）模型因Google的BigTable论文而流行，它是一种用于结构化数据的分布式存储系统，并且具有高可扩展性和大存储容量。这些数据库针对存储大量具有灵活模式的结构化、半结构化和非结构化数据进行了优化，并支持高并发级别。
- en: 'As opposed to other types, data in this type of database is stored in columns
    rather than in rows, allowing a more flexible and scalable data model. The data
    stored in a single column family can be of different types and structures, as
    represented in *Figure 2**.2*:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他类型不同，此类数据库中的数据是按列而不是按行存储的，这允许更灵活和可扩展的数据模型。单个列族中存储的数据可以是不同类型和结构，如图 *2.2* 所示：
- en: '![Figure 2.2 – NoSQL column-family type representation](img/B19375_02_002.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.2 – NoSQL 列族类型表示](img/B19375_02_002.jpg)'
- en: Figure 2.2 – NoSQL column-family type representation
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – NoSQL 列族类型表示
- en: When compared to other NoSQL types, these data can be more difficult to query
    as they’re not stored in the traditional row-based format. Also, the increased
    schema flexibility represents an increased complexity of tasks such as data model
    designing and data management.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 NoSQL 类型相比，这些数据由于不是存储在传统的基于行的格式中，因此查询可能更加困难。此外，增加的模式灵活性也代表了数据模型设计和数据管理等任务复杂性的增加。
- en: In regards to engine options, **HBase** and **Cassandra** are both open source,
    distributed, wide-column NoSQL databases, designed with a focus on handling large
    amounts of data. **Scylla** is also a distributed wide-column database but is
    designed as a drop-in replacement for Cassandra and optimized for performance.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在引擎选项方面，**HBase** 和 **Cassandra** 都是开源的、分布式、宽列 NoSQL 数据库，设计重点是处理大量数据。**Scylla**
    也是一个分布式宽列数据库，但设计为 Cassandra 的直接替代品，并针对性能进行了优化。
- en: In conclusion, wide-column NoSQL databases are powerful tools for storing and
    managing large amounts of data with a flexible schema, and are very well suited
    for distributed applications that demand high availability and horizontal scaling
    storage. However, they can be more difficult to query compared to other NoSQL
    databases.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，宽列 NoSQL 数据库是存储和管理大量数据、具有灵活模式的强大工具，非常适合需要高可用性和水平扩展存储的分布式应用程序。然而，与其他 NoSQL
    数据库相比，它们可能更难查询。
- en: 'Before we move forward to the next section, we will discuss the last type of
    NoSQL database, which can be particularly useful to complement wide-column databases
    in certain scenarios: the graph database.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入下一节之前，我们将讨论最后一种 NoSQL 数据库类型，这在某些场景下可以特别有用，以补充宽列数据库：图数据库。
- en: NoSQL database types – graph
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NoSQL 数据库类型 – 图
- en: 'The graph NoSQL database type is optimized for storing and querying data with
    complex relationships. In this approach, data is represented as a graph where
    the nodes represent entities and the edges represent the relationships between
    those entities. Observe in *Figure 2**.3* the graph structures being used for
    semantic queries, and the data representation through nodes, edges, and properties:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 NoSQL 数据库类型针对存储和查询具有复杂关系的数据进行了优化。在此方法中，数据表示为图，其中节点表示实体，边表示这些实体之间的关系。观察 *图
    2.3* 中的图结构，用于语义查询，以及通过节点、边和属性进行的数据表示：
- en: '![Figure 2.3 – NoSQL graph type representation](img/B19375_02_003.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – NoSQL 图类型表示](img/B19375_02_003.jpg)'
- en: Figure 2.3 – NoSQL graph type representation
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.3 – NoSQL 图类型表示
- en: 'The key concepts to be aware of when developing applications that will work
    with a graph database are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发将与图数据库一起工作的应用程序时，需要注意的关键概念如下：
- en: '**Vertex**/**Vertice**: Also known as a **node** in a graph. It stores the
    entity or object data like a table does in traditional relational databases, or
    like a document does in a document-type NoSQL database.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**顶点**/**Vertice**：也称为图中的**节点**。它存储实体或对象数据，就像传统的关系数据库中的表一样，或者像文档型 NoSQL 数据库中的文档一样。'
- en: '**Edge**: An element to establish the relationship between two vertices.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**边缘**：用于建立两个顶点之间关系的一个元素。'
- en: '**Property**: A key-value pair that holds metadata about an edge or vertex
    element of a graph.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**：一个键值对，用于存储关于图中的边或顶点元素的元数据。'
- en: '**Graph**: A collection of vertices and edges representing the relationships
    between entities.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图**：表示实体之间关系的顶点和边的集合。'
- en: 'In a graph, the edge can be either directed or undirected and a direction on
    the relationship between nodes can exist and, in fact, is an essential concept
    in a graph structure. If considering the real world, we could compare it to Hollywood
    stars, for example, where there are people who know an actor but the actor is
    not aware of all their fans. This association’s metadata is stored as part of
    the edge’s direction (relationship) in the graph. In *Figure 2**.4*, notice the
    association direction and type are clearly defined:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，边可以是定向的或非定向的，节点之间的关系可以存在方向，实际上，这是图结构中的一个基本概念。如果考虑现实世界，我们可以将其与好莱坞明星进行比较，例如，有些人认识一个演员，但演员并不了解所有他们的粉丝。这种关联的元数据作为图边方向（关系）的一部分存储。在*图2*.*4*中，请注意关联方向和类型被明确定义：
- en: '![Figure 2.4 – NoSQL graph type data model direction representation](img/B19375_02_004.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图2.4 – NoSQL图类型数据模型方向表示](img/B19375_02_004.jpg)'
- en: Figure 2.4 – NoSQL graph type data model direction representation
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.4 – NoSQL图类型数据模型方向表示
- en: '*Figure 2**.4* shows a directional association going from the vertex **Poliana**
    to the vertex **Hephaestus**. The association also has its own data, such as **when**
    and **where** in this case. The direction is especially relevant when querying
    the graph, as you can’t query from **Hephaestus** to **Poliana** – only the other
    way around.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '*图2*.*4*显示了从顶点**Poliana**到顶点**Hephaestus**的方向关联。关联还有自己的数据，例如在这种情况下的时间**when**和地点**where**。在查询图时，方向尤其相关，因为你不能从**Hephaestus**查询到**Poliana**
    – 只能是相反的方向。'
- en: Graph NoSQL database solutions can fit well in scenarios that require fast querying
    of highly interconnected data, such as social networks, recommendation engines,
    and fraud detection systems. Even though they can store and retrieve large amounts
    of data, that is not always true in the case of large amounts of structured and
    unstructured data with flexible schema, where the column-family type would be
    a better fit. Also, complex querying may require traversing the graph in order
    to find a requested piece of data.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图NoSQL数据库解决方案非常适合需要快速查询高度互联数据的场景，例如社交网络、推荐引擎和欺诈检测系统。尽管它们可以存储和检索大量数据，但在大量具有灵活模式的结构化和非结构化数据的情况下，列族类型可能更适合。此外，复杂的查询可能需要遍历图以找到所需的数据片段。
- en: There are several graph database engines to choose from, including **Neo4j**,
    **InfoGrid**, **Sones**, and **HyperGraphDB**. Each of these engines offers its
    own unique set of features and capabilities, and the right choice will depend
    on the specific needs of the application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个图数据库引擎可供选择，包括**Neo4j**、**InfoGrid**、**Sones**和**HyperGraphDB**。这些引擎各自提供自己独特的一套特性和功能，正确的选择将取决于应用程序的具体需求。
- en: We have explored relational databases and NoSQL databases, the two main database
    storage paradigms in use today for storing and querying structured data using
    a fixed schema, and for storing and querying large amounts of structured/semi-structured/unstructured
    data with flexible schema, respectively.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经探讨了关系数据库和NoSQL数据库，这是今天用于使用固定模式存储和查询结构化数据以及存储和查询大量结构化/半结构化/非结构化数据的两种主要数据库存储范式。
- en: 'Before moving to the next section, here’s a final tip to help you correlate
    concepts with which you are already familiar with the ones presented so far:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入下一节之前，这里有一个最后的提示，帮助你将你已熟悉的概念与你迄今为止所展示的概念联系起来：
- en: '![Figure 2.5 – How concepts can be related between different database flavors
    for learning purposes](img/B19375_02_005.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图2.5 – 如何在不同数据库风味之间建立概念关系以用于学习目的](img/B19375_02_005.jpg)'
- en: Figure 2.5 – How concepts can be related between different database flavors
    for learning purposes
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.5 – 如何在不同数据库风味之间建立概念关系以用于学习目的
- en: 'In the next and last section of this chapter, we’ll check through a newer category
    of databases: the NewSQL databases.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的下最后一个部分，我们将检查一类较新的数据库：NewSQL数据库。
- en: NewSQL databases – trying to get the best out of both worlds
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NewSQL数据库 – 努力从两个世界中获取最佳
- en: 'NewSQL databases are a hybrid database type that combines the best features
    of both relational and NoSQL worlds, offering the ability to store and query structured
    data with a fixed schema while also providing the scalability and flexibility
    characteristics of NoSQL databases. NewSQL is seen as a way to address the limitations
    of both relational and NoSQL paradigms and provide a more flexible and scalable
    solution for modern applications. NewSQL is a database category that aims to unite
    the best features of both SQL and NoSQL worlds. We have learned two models of
    consistency: ACID, provided by relational databases, and BASE, by NoSQL. NewSQL
    seeks to offer a combination of horizontal scalability while maintaining the guarantees
    of the ACID (atomicity, consistency, isolation, and durability) principles. In
    other words, it tries to deliver on the guarantees of SQL with the high scalability,
    flexibility, and performance of NoSQL. Another positive aspect is the ability
    to use SQL as the querying language.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: NewSQL数据库是一种混合数据库类型，结合了关系型和NoSQL世界的最佳特性，能够在具有固定模式的结构化数据存储和查询的同时，也提供NoSQL数据库的可扩展性和灵活性特性。NewSQL被视为解决关系型和NoSQL范式局限性的方法，为现代应用提供更灵活和可扩展的解决方案。NewSQL旨在统一SQL和NoSQL世界的最佳特性。我们已经学习了两种一致性模型：关系数据库提供的ACID（原子性、一致性、隔离性和持久性）和NoSQL的BASE。NewSQL试图在保持ACID原则保证的同时提供横向可扩展性。换句话说，它试图在SQL的保证下提供NoSQL的高可扩展性、灵活性和性能。另一个积极方面是能够使用SQL作为查询语言。
- en: NewSQL looks like a promising solution, and we can observe (at the time of writing)
    several relevant companies offering enterprise-grade solutions to the market.
    It’s worth mentioning the involvement of companies that hold immense know-how
    of both developer and operational needs.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: NewSQL看起来是一个有希望的解决方案，我们可以在撰写本文时观察到几家相关公司向市场提供企业级解决方案。值得一提的是，这些公司拥有大量关于开发和运营需求的专业知识。
- en: 'Some examples of NewSQL databases are as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些NewSQL数据库的例子：
- en: '**VoltDB**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VoltDB**'
- en: '**ClustrixDB**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ClustrixDB**'
- en: '**CockroachDB**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CockroachDB**'
- en: Notice that the NewSQL technology landscape is anything but homogenous, and
    each solution brings its own advantages and drawbacks.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到NewSQL技术领域并非同质化，每种解决方案都带来自己的优势和劣势。
- en: Important note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: NewSQL uses SQL but usually does not support 100% of it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: NewSQL使用SQL，但通常不支持100%的SQL。
- en: Even though this paradigm gives the impression that it may address and solve
    once and for all the problem presented by the CAP theorem, we should warn you,
    it does not. Also, generally, hybrid options bring the best and the *worst* of
    both worlds.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个范式给人一种印象，似乎可以一次性解决CAP定理提出的问题，但我们应该警告您，它并不能。此外，通常，混合选项会带来两者的最佳和最坏方面。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Database options come in several flavors, and it is crucial to understand the
    trade-offs with each type. Each data target has specific behaviors, such as SQL
    having a standard, maturity, several tools, and know-how in its favor. Still,
    it is pretty hard to work on horizontal scalability.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库选项有多种类型，理解每种类型的权衡至关重要。每个数据目标都有特定的行为，例如SQL拥有标准、成熟度、多种工具和专业知识等优势。然而，实现横向扩展相当困难。
- en: NoSQL was designed to improve horizontal scalability; however, this came at
    the cost of less consistency than relational databases are known for.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL旨在提高横向可扩展性；然而，这以牺牲比关系型数据库所知更少的致性为代价。
- en: Finally, NewSQL tries to merge both worlds and bring the benefits of both, but
    it lacks in both areas.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，NewSQL试图将两个世界融合在一起，带来两者的好处，但在两个领域都存在不足。
- en: In the next chapter, we’ll cover more about the architectures and strategies
    of technologies and how to handle them.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍更多关于技术和它们的架构以及策略，以及如何处理它们。
