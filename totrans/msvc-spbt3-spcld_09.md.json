["```java\n    cd $BOOK_HOME/Chapter07\n    ./test-em-all.bash start \n    ```", "```java\n    docker-compose up -d --scale review=2 \n    ```", "```java\n    docker-compose exec product-composite getent hosts review \n    ```", "```java\n    docker-compose exec --index=1 review cat /etc/hosts\n    docker-compose exec --index=2 review cat /etc/hosts \n    ```", "```java\n    curl localhost:8080/product-composite/1 -s | jq -r .serviceAddresses.rev \n    ```", "```java\ndocker-compose down \n```", "```java\n    eureka:\n      build: spring-cloud/eureka-server\n      mem_limit: 512m\n      ports:\n        - \"8761:8761\" \n    ```", "```java\n    Implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client' \n    ```", "```java\n    @SpringBootTest(webEnvironment=RANDOM_PORT, properties = {\"eureka.client.enabled=false\"}) \n    ```", "```java\n    @Bean\n    @LoadBalanced\n    public WebClient.Builder loadBalancedWebClientBuilder() {\n        return WebClient.builder();\n    } \n    ```", "```java\n    private WebClient webClient;\n    @Autowired\n    public ProductCompositeIntegration(\n      WebClient.Builder webClientBuilder, \n      ...\n    ) {\n      this.webClient = webClientBuilder.build();\n      ...\n    } \n    ```", "```java\n    app:\n      product-service:\n        host: localhost\n        port: 7001\n      recommendation-service:\n        host: localhost\n        port: 7002\n      review-service:\n        host: localhost\n        port: 7003 \n    ```", "```java\n    private static final String PRODUCT_SERVICE_URL = \"http://product\";\n    private static final String RECOMMENDATION_SERVICE_URL = \"http://recommendation\";\n    private static final String REVIEW_SERVICE_URL = \"http://review\"; \n    ```", "```java\nserver:\n  port: 8761\neureka:\n  instance:\n    hostname: localhost\n  client:\n    registerWithEureka: false\n    fetchRegistry: false\n    serviceUrl:\n      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/\n\n  server:\n    waitTimeInMsWhenSyncEmpty: 0\n    response-cache-update-interval-ms: 5000 \n```", "```java\neureka:\n  client:\n    serviceUrl:\n      defaultZone: http://localhost:8761/eureka/\n    initialInstanceInfoReplicationIntervalSeconds: 5\n    registryFetchIntervalSeconds: 5\n  instance:\n    leaseRenewalIntervalInSeconds: 5\n    leaseExpirationDurationInSeconds: 5\n---\nspring.config.activate.on-profile: docker\neureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka/ \n```", "```java\n    cd $BOOK_HOME/Chapter09\n    ./gradlew build && docker-compose build \n    ```", "```java\n    ./test-em-all.bash start \n    ```", "```java\n    docker-compose up -d --scale review=3 \n    ```", "```java\n    docker-compose logs review | grep Started \n    ```", "```java\n    curl -H \"accept:application/json\" localhost:8761/eureka/apps -s | jq -r .applications.application[].instance[].instanceId \n    ```", "```java\n    # Verify access to Eureka and that all four microservices are # registered in Eureka\n    assertCurl 200 \"curl -H \"accept:application/json\" $HOST:8761/eureka/apps -s\"\n    assertEqual 4 $(echo $RESPONSE | jq \".applications.application | length\") \n    ```", "```java\n    curl localhost:8080/product-composite/1 -s | jq -r .serviceAddresses.rev \n    ```", "```java\n    docker-compose logs review | grep \"Response size\" \n    ```", "```java\n    docker-compose up -d --scale review=2 \n    ```", "```java\n    curl localhost:8080/product-composite/1 -m 2 \n    ```", "```java\n    docker-compose up -d --scale review=2 --scale eureka=0 \n    ```", "```java\n    curl localhost:8080/product-composite/1 -s | jq -r .serviceAddresses.rev \n    ```", "```java\n    docker-compose up -d --scale review=2 --scale eureka=0 --scale product=2 \n    ```", "```java\n    curl localhost:8080/product-composite/1 -s | jq -r .serviceAddresses.pro \n    ```", "```java\n    docker-compose up -d --scale review=1 --scale eureka=1 --scale product=2 \n    ```", "```java\n    curl localhost:8080/product-composite/1 -s | jq -r .serviceAddresses \n    ```", "```java\n    docker-compose down \n    ```"]