- en: Chapter 1. Writing Feature Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章.编写特性文件
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Writing your first Feature file with one Scenario
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用一个场景编写你的第一个特性文件
- en: Creating Scenarios with different Steps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同步骤创建场景
- en: Creating a Scenario with the And and But keywords
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用And和But关键字创建场景
- en: Writing a Feature file with multiple Scenarios
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个场景编写特性文件
- en: Adding Background to Feature files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向特性文件添加背景
- en: Sending multiple arguments in Steps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在步骤中发送多个参数
- en: Using complex data types to store data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用复杂的数据类型来存储数据
- en: Implementing Scenario Outlines
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现场景概述
- en: Creating a Feature file in a language other than English
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用非英语语言创建特性文件
- en: Combining Scenarios, Background, and Scenario Outlines
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结合场景、背景和场景概述
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In Cucumber Framework, business requirements are specified in Feature files,
    which are written in the Gherkin Language. So it becomes very important for us
    to understand the power and usage of the Gherkin language to come up with efficient
    and optimized Feature files.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cucumber框架中，业务需求在特性文件中指定，这些文件是用Gherkin语言编写的。因此，了解Gherkin语言的力量和用法，以便创建高效和优化的特性文件对我们来说非常重要。
- en: This chapter will cover the usage of the Gherkin language to write meaningful
    and smart Feature files. We will start with some simple recipes to create a Feature
    file with one Scenario and will gradually move to recipes that are more complex
    where we create Feature files with multiple Scenarios, Backgrounds, and Scenario
    Outlines. We will also cover concepts and keywords, such as Feature, Scenario,
    Steps, Background, Scenario Outline and Data Tables.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖使用Gherkin语言编写有意义的和智能特性文件的使用方法。我们将从一些简单的菜谱开始，创建一个只有一个场景的特性文件，然后逐渐过渡到更复杂的菜谱，其中创建具有多个场景、背景和场景概述的特性文件。我们还将涵盖概念和关键字，如特性、场景、步骤、背景、场景概述和数据表。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In this chapter, we will only focus on Feature files. Step Definitions and automation
    libraries will be covered in later chapters. Initially, you may not understand
    everything about the concepts in this chapter, but things will become clearer
    as you read on.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们只关注特性文件。步骤定义和自动化库将在后面的章节中介绍。最初，你可能无法完全理解本章中的所有概念，但随着你的阅读，一切都会变得清晰起来。
- en: Writing your first Feature file with one Scenario
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用一个场景编写你的第一个特性文件
- en: Let's assume you are a **Product Owner** (**PO**) or a **Business Analyst**
    (**BA**). Your team is creating a web application and you need to write specifications
    for that application. A very simple and basic specification for that web application
    is when we enter the URL of that application in a browser, the application should
    load. So how do we write this specification in Cucumber? We will be covering this
    in this recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你是**产品所有者**（**PO**）或**业务分析师**（**BA**）。你的团队正在创建一个网络应用程序，你需要为该应用程序编写规范。该网络应用程序的一个非常简单和基本的规范是，当我们在一个浏览器中输入该应用程序的URL时，该应用程序应该加载。那么我们如何在Cucumber中编写这个规范？我们将在这个菜谱中介绍。
- en: How to do it…
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: In this recipe, we are going to create a simple Feature file with only one Scenario
    that tests whether the web page has loaded or not.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个简单的特性文件，其中只有一个场景来测试网页是否已加载。
- en: 'Let''s create a `page_load.feature` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`page_load.feature`文件：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works…
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In Cucumber we write our requirements in plain English like Language, **Gherkin**.
    Gherkin is a domain-specific language that has a very well-defined syntax. It
    works on the basis of some predefined **keywords**. In the preceding example,
    the highlighted portions of the text are Gherkin's keywords and the rest is dependent
    on the application under test.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cucumber中，我们用纯英文编写我们的需求，就像语言、**Gherkin**。Gherkin是一种具有非常明确语法的特定领域语言。它基于一些预定义的**关键字**。在先前的例子中，文本中突出显示的部分是Gherkin的关键字，其余部分则依赖于正在测试的应用程序。
- en: Let's understand each keyword in more detail.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地理解每个关键字。
- en: Feature
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 特性
- en: In Cucumber, Feature files contain business requirements. The text that immediately
    follows the Feature keyword, and is in the same line, is the Title of the Feature
    file. Three (optional) Text lines that follow the Feature keyword line are Intent
    of the Feature file and intent text is whatever we want to write, up until the
    first Scenario. Feature file should contain either Scenario or Scenario Outline.
    The naming conventions for Feature files should be lowercase with underscores,
    for example, `login.feature` and `home_page.feature`. The names of Scenarios and
    Feature files must be unique.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Cucumber 中，特性文件包含业务需求。特性关键词之后立即跟随的文本，并且位于同一行，是特性文件的标题。特性关键词行之后跟随的三个（可选）文本行是特性文件的意图。意图文本是我们想写的任何内容，直到第一个场景。特性文件应包含场景或场景轮廓。特性文件的命名约定应该是小写并带有下划线，例如，`login.feature`
    和 `home_page.feature`。场景和特性文件的名称必须是唯一的。
- en: Scenarios
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 场景
- en: 'Scenarios are like test cases and start with the Scenario keyword in a new
    line (different from the Feature intent). The text that immediately follows the
    Scenario keyword, and is on the same line, is the **Scenario Title**. Three (optional)
    Text lines that follow the Scenario keyword line are **Intent** of the Scenario.
    All Scenarios perform following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 场景类似于测试用例，并以新行中的场景关键词开始（不同于特性意图）。场景关键词之后立即跟随的文本，并且位于同一行，是**场景标题**。在场景关键词行之后跟随的三个（可选）文本行是场景的**意图**。所有场景都执行以下操作：
- en: Get the system into a particular state
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将系统置于特定状态
- en: Poke it (perform some action)
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摇晃它（执行某些操作）
- en: Examine the new state
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查新状态
- en: Steps
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 步骤
- en: 'Scenarios contain Steps which are equivalent to test Steps and use the following
    keywords to denote them: Given, When, Then, But, and And (case sensitive).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 场景包含步骤，这些步骤相当于测试步骤，并使用以下关键词来表示：Given、When、Then、But 和 And（区分大小写）。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When you save the Feature files mentioned in this chapter and run them, in the
    first run, Cucumber is going to give errors for the missing Step Definition files,
    along with suggestions for Step Definitions. To resolve these errors, copy the
    suggestions given by Cucumber and paste them into a default Step Definition file.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当你保存本章中提到的特性文件并运行它们时，在第一次运行中，Cucumber 将会因缺少步骤定义文件而给出错误，并附带步骤定义的建议。为了解决这些错误，复制
    Cucumber 提供的建议，并将它们粘贴到默认的步骤定义文件中。
- en: Creating Scenarios with different Steps
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同步骤创建场景
- en: 'When we specify a business requirement, we need to specify the pre-conditions,
    user actions, and expected output. Let''s first understand what each of these
    mean:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指定业务需求时，我们需要指定先决条件、用户操作和预期输出。让我们首先了解这些分别代表什么：
- en: '**Pre-condition**: This sets the **Application Under Test** (**AUT**) in a
    state where the test case can be executed, or establishing the application context.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先决条件**: 这将**应用程序**（**AUT**）置于测试用例可以执行的状态，或建立应用程序上下文。'
- en: '**User action**: This refers to the action that a user performs that is in
    line with the Scenario objective.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户操作**: 这指的是用户执行的动作，该动作与场景目标一致。'
- en: '**Expected output**: This refers to the application''s response after the user
    action.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预期输出**: 这指的是用户操作后应用程序的响应。'
- en: So let's have this specification written in Cucumber in this recipe.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们在这个菜谱中将这个规范写成 Cucumber 格式。
- en: How to do it…
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: In this recipe, we are going to update the Feature file we created in the previous
    recipe by using the keywords `Given`, `When` and `Then`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过使用关键词 `Given`、`When` 和 `Then` 更新我们在前一个菜谱中创建的特性文件。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works…
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'A Cucumber Scenario consists of Steps identified with keywords such as Given,
    When, Then, And, But, and so on. These have been defined as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Cucumber 场景由以下关键词（如 Given, When, Then, And, But 等）标识的步骤组成。这些步骤的定义如下：
- en: '**Given**: Preconditions are mentioned in the `Given` keyword. The Steps of
    the Given keyword put the system in to a known state, which is necessary for the
    user action. Avoid talking about user interaction in Given Steps.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Given**: 先决条件在 `Given` 关键词中提及。`Given` 关键词的步骤将系统置于已知状态，这对于用户操作是必要的。避免在 `Given`
    步骤中谈论用户交互。'
- en: '**When**: The purpose of the `When` Steps is to describe the user action.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**何时**: `When` 步骤的目的在于描述用户操作。'
- en: '**Then**: The purpose of `Then` Steps is to observe the expected output. The
    observations should be related to the business value/benefit of your Feature description.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Then**: `Then` 步骤的目的是观察预期输出。观察结果应与特性描述的业务价值/好处相关。'
- en: Creating a Scenario with the And and But keywords
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 And 和 But 关键词创建场景
- en: When we specify a business requirement, sometimes there are multiple pre-conditions,
    user actions, and expected outcomes. So how do we write these specifications in
    Cucumber?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们指定业务需求时，有时会有多个先决条件、用户操作和预期结果。那么我们如何在Cucumber中编写这些规范？
- en: Getting ready…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作…
- en: 'Based on what we have learned so far we know how to create Scenarios with one
    Given, When, and Then keyword. Now, if we need to add multiple **Steps**, then
    we can update our Feature file like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今为止所学的内容，我们知道如何使用一个Given、When和Then关键字来创建场景。现在，如果我们需要添加多个**步骤**，那么我们可以像这样更新我们的特性文件：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The problem here is that the keywords `Given`, `When`, and `Then` are repeated
    and the readability is thus affected. Having readable Feature files is one of
    biggest advantages of Cucumber. So how do we maintain the readability of Feature
    files? Let's figure this out in this recipe.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是关键字`Given`、`When`和`Then`被重复使用，因此可读性受到影响。保持特性文件的可读性是Cucumber最大的优势之一。那么我们如何保持特性文件的可读性？让我们在这个菜谱中找出答案。
- en: How to do it…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'In this recipe, we are going to add one more Scenario and will use the `And`
    and `But` keywords:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将添加一个额外的场景，并使用`And`和`But`关键字：
- en: '[PRE3]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `And` and `But` keywords will be useful here. These keywords help to increase
    the expressiveness and readability of the Feature file:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`And`和`But`关键字在这里很有用。这些关键字有助于提高特性文件的表达性和可读性：'
- en: '**And**: This is used for statements that are an addition to the previous Steps
    and represent positives statements.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并且**：这用于对先前步骤的补充性陈述，表示肯定陈述。'
- en: '**But**: This is used for statements that are an addition to previous Steps
    and represent negative statements.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**但是**：这用于对先前步骤的补充性陈述，表示否定陈述。'
- en: Note
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: In a Step Definitions file, `And` and `But` are listed as Given/When/Then, the
    keyword that they appear after. There are no `And` and `But` keywords in Step
    Definitions.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤定义文件中，`And`和`But`被列为Given/When/Then，即它们出现的关键字之后。步骤定义中没有`And`和`But`关键字。
- en: Writing a Feature file with multiple Scenarios
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写包含多个场景的特性文件
- en: Feature files contain possible Scenarios for a particular functionality. This
    is like writing all possible requirements that a Feature should meet when it is
    implemented. So let's write these specifications in Cucumber in the following
    section.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 特性文件包含特定功能可能的场景。这就像编写所有可能的需求，当特性实现时，它应该满足这些需求。所以让我们在以下部分用Cucumber编写这些规范。
- en: How to do it…
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will create a new Feature file called `home_page.feature`, which will cover
    the functionality of the default content of [https://github.com/](https://github.com/),
    the **Bootcamp** section, and the top banner content. We will create a different
    Scenario for each functionality. Take a look at the following screenshot for more
    clarity:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的特性文件，名为`home_page.feature`，它将涵盖[https://github.com/](https://github.com/)的默认内容、**训练营**部分和顶部横幅内容的功能。我们将为每个功能创建不同的场景。查看以下截图以获得更多清晰度：
- en: '![How to do it…](img/image00123.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点…](img/image00123.jpeg)'
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'A Cucumber Feature file can have any number of Scenarios as required. Some
    points to keep in mind are as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一个黄瓜特性文件可以根据需要包含任意数量的场景。以下是一些需要注意的点：
- en: One Feature file normally focuses on one functionality of the application, such
    as login page, home page, and so on.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个特性文件通常关注应用程序的一个功能，例如登录页面、主页等。
- en: One Scenario refers to one sub-Feature of that functionality, such as the new
    customer page, delete customer page, and so on.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个场景指的是该功能的一个子特性，例如新客户页面、删除客户页面等。
- en: When we have multiple Scenarios in a Feature file, we should always follow the
    Stateless Scenarios Guideline. Let's understand this guideline better—each Scenario
    must make sense and should be executed independently of any other Scenario. The
    result of one Scenario/Feature should not affect the other Scenario.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在特性文件中有多个场景时，我们应该始终遵循无状态场景指南。让我们更好地理解这个指南——每个场景都必须有意义，并且应该独立于任何其他场景执行。一个场景/特性的结果不应影响其他场景。
- en: 'These are the benefits of independent Scenarios:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是独立场景的好处：
- en: Feature files are easier and fun to understand
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特性文件更容易理解且有趣
- en: You can only run a subset of Scenarios, as all the required Steps of a Scenario
    are mentioned in the Scenario itself
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你只能运行场景的一个子集，因为场景本身提到了所有必需的步骤
- en: In comparison to dependent Scenarios, independent Scenarios will be more eligible
    candidates for *parallel execution*
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与依赖场景相比，独立场景将更有资格成为*并行执行*的候选人
- en: Tip
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载所有已购买Packt出版物的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: Adding Backgrounds to Feature files
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将背景添加到特性文件中
- en: When we write Feature files, we write multiple Scenarios. Now all of these Scenarios
    start from one particular point. If I'm writing home page Scenarios, then I need
    to start the flow from the login functionality. So it is better to write the repetitive
    Steps at one place rather than in all Scenarios. Let's understand how to do this
    in the next Section.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写特性文件时，我们会编写多个场景。现在所有这些场景都从一个特定的点开始。如果我正在编写主页场景，那么我需要从登录功能开始流程。因此，最好将重复的步骤放在一个地方，而不是在所有场景中。让我们在下一节中了解如何做到这一点。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Based on what we have learned so far, this is what our Feature file will look
    like:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今为止所学的内容，我们的特性文件将看起来像这样：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The problem here is that first five statements are repeated in all the Scenarios.
    This affects the readability of the Feature files, and there is a lot of duplicated
    effort.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是前五个语句在所有场景中都是重复的。这影响了特性文件的可读性，并且有很多重复的工作。
- en: 'The problems with this way of writing Feature files are:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编写特性文件的方式存在以下问题：
- en: '**Repetition**: Many statements are repeated in all the Scenarios'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复**：许多语句在所有场景中都是重复的'
- en: '**Readability**: The readability of the Feature files is affected.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可读性**：特性文件的可读性受到影响。'
- en: '**Duplication**: Copying these Steps to all the Scenarios is redundant.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重复**：将这些步骤复制到所有场景中是多余的。'
- en: '**Maintainability**: Even if a single Step changes, we have to change all occurrences.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可维护性**：即使单个步骤发生变化，我们也必须更改所有出现的地方。'
- en: How to do it…
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We are going to update the `home_page.feature` file and we are going to use
    the `Background` keyword to put the common Steps across all the Scenarios in one
    place:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`home_page.feature`文件，并使用`Background`关键字将所有场景中的公共步骤放在一个地方：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Here, we have used the Background keyword. All the Steps mentioned in the Background
    keyword will be executed before each Scenario or Scenario Outline in a Feature
    file. Let''s understand this keyword in greater detail:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了背景关键字。在特性文件中的每个场景或场景轮廓之前，都会执行背景关键字中提到的所有步骤。让我们更详细地了解这个关键字：
- en: There can be only one Background in one Feature file and it allows us to set
    a precondition for all Scenarios in a Feature file.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个特性文件中只能有一个背景，它允许我们为特性文件中的所有场景设置一个前提条件。
- en: A Background is like a Scenario, containing a number of Steps.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景就像一个场景，包含多个步骤。
- en: Background is run before each Scenario, but after the **BeforeScenario** Hooks.
    (We will read about Hooks in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Enabling
    Fixtures"), *Enabling Fixtures*).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景在每次场景之前运行，但在`BeforeScenario`钩子之后。（我们将在[第3章](part0036.xhtml#aid-12AK81 "第3章。启用固定装置")中阅读关于钩子的内容，*启用固定装置*）。
- en: The title and multiline description / intent of Background are optional.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景的标题和多行描述/意图是可选的。
- en: Since the Steps mentioned in Background will be run for all Scenarios in a Feature
    file, we need to be careful when adding the Steps to Background. For example,
    we should not add a Step that is not common to all Scenarios.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于背景中提到的步骤将在特性文件中的所有场景中运行，因此我们在将步骤添加到背景时需要小心。例如，我们不应该添加一个不是所有场景都共有的步骤。
- en: 'This is what the output of the preceding file looks like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是前面文件输出的样子：
- en: '![How it works…](img/image00124.jpeg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的…](img/image00124.jpeg)'
- en: Don't use `Background` to set up a complicated state unless that state is actually
    something the client needs to know.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 不要使用`Background`来设置复杂的状态，除非这个状态实际上是客户端需要知道的东西。
- en: Keep your `Background` section short because you expect a person to remember
    these Steps when you are adding a new Scenario
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请保持您的“背景”部分简短，因为当您添加新场景时，您希望人们能够记住这些步骤
- en: Make your `Background` section vivid, because that way it will be easier for
    a person to remember it
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让你的`背景`部分生动有趣，因为这样人们更容易记住它
- en: Sending multiple arguments in Steps
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在步骤中发送多个参数
- en: 'When we talk about testing, data-driven testing is a very famous approach.
    Until now, we have focused on what our Steps intend to do. The questions that
    now come to mind are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论测试时，数据驱动测试是一个非常著名的方法。到目前为止，我们一直专注于我们的步骤想要做什么。现在浮现出来的问题是以下这些：
- en: Can our Steps also send test data?
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的步骤也可以发送测试数据吗？
- en: What kind of test data can our Steps send?
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的步骤可以发送什么样的测试数据？
- en: Can we send mixed data types in one single Step?
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们能否在单个步骤中发送混合数据类型？
- en: Put on a BA's shoes and let's write some Scenarios for the GitHub user registration
    page and login functionality.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 穿上业务分析师的鞋子，让我们为GitHub用户注册页面和登录功能编写一些场景。
- en: How to do it…
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We are going to update the `login.feature` file and add two Scenarios, where
    we are going to pass arguments in Steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新`login.feature`文件，并添加两个场景，我们将通过步骤传递参数：
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works…
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the preceding Feature file, focus on the text written in `" "`. This is our
    test data. The text mentioned in between `" "` in Steps is associated to Capture
    groups in Step Definition files.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的特性文件中，关注用双引号`"`括起来的文本。这是我们测试数据。步骤中提到的双引号`"`之间的文本与步骤定义文件中的捕获组相关联。
- en: 'An example of Step Definition for one of the Steps is:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一个步骤定义的示例是：
- en: '[PRE8]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The output of the preceding `System.out.println` will be `ShankarGarg` (test
    data that we have passed in the Feature file).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的`System.out.println`的输出将是`ShankarGarg`（我们在特性文件中传递的测试数据）。
- en: Note
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Now, since you have learned how to pass test data in Steps, try your hand at
    the following:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然你已经学会了如何在步骤中传递测试数据，那么尝试以下操作：
- en: Send String and integer data in the same Step.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在同一个步骤中发送字符串和整数数据。
- en: 'Send a List in a Step; for example: "Monday, Tuesday, Wednesday".'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在步骤中发送一个列表；例如：“星期一，星期二，星期三”。
- en: Using complex data types to store data
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用复杂的数据类型来存储数据
- en: In the previous recipe, we learnt how we can send data in Steps, which can be
    used by the application for processing. The data that we have sent up to this
    point has been either Strings or integers. But what if we want to send data structures
    that are more complex and span across multiple lines?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的食谱中，我们学习了如何在步骤中发送数据，这些数据可以被应用程序用于处理。我们到目前为止发送的数据要么是字符串，要么是整数。但如果我们想发送更复杂的数据结构，并且跨越多行呢？
- en: Getting ready
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s write a Scenario for this functionality—we want to verify whether various
    users exist or not:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个功能编写一个场景——我们想要验证是否存在各种用户：
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The problem with this approach of writing Feature files is that Feature files
    are not expressive enough and there is a lot of repetition.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这种编写特性文件的方法的问题是特性文件不够表达，有很多重复。
- en: How to do it…
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We are going to add one more Scenario to the `login.feature` file, and we are
    going to use Data Table to send a large set of test data along a Step:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向`login.feature`文件添加一个额外的场景，并使用数据表通过步骤发送大量测试数据：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works…
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Here we have used Data Tables. Tables as arguments to Steps are handy for specifying
    larger datasets. Let''s understand Data Tables in more detail:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们使用了数据表。将表格作为步骤的参数对于指定较大的数据集来说非常方便。让我们更详细地了解数据表：
- en: Tables as arguments to Steps are handy to specify larger datasets.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将表格作为步骤的参数非常方便，可以指定更大的数据集。
- en: The first row of a Data Table is always the header row, where we specify the
    headers for each column. All the other rows in a Data Table are data rows, which
    contain the actual data that will be used by the application.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据表的第一行总是标题行，我们在这里指定每列的标题。数据表中的所有其他行都是数据行，它们包含应用程序将使用的实际数据。
- en: Data tables will be passed to the Step Definition as the last argument.
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据表将作为最后一个参数传递给步骤定义。
- en: Don't confuse Data Tables with Scenario Outline tables.
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要混淆数据表与场景概述表。
- en: 'Data tables are very easy to handle in Step Definition files as well. This
    is what a sample Step Definition code looks like:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在步骤定义文件中处理数据表也非常容易。这是一个示例步骤定义代码：
- en: '[PRE11]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the preceding code sample, the Data Table has been converted into a List
    of String and can be handled very easily thereafter.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码示例中，数据表已经被转换成字符串列表，并且之后可以很容易地处理。
- en: Note
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Data table transformation has been explained in detail in the Transforming Data
    Tables to parse test data recipe in [Chapter 2](part0026.xhtml#aid-OPEK1 "Chapter 2. Creating
    Step Definitions"), *Creating Step Definitions*.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 数据表转换已在[第2章](part0026.xhtml#aid-OPEK1 "第2章。创建步骤定义")中详细解释，即[转换数据表以解析测试数据](part0026.xhtml#aid-OPEK1
    "第2章。创建步骤定义")配方。
- en: Implementing Scenario Outlines
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现场景轮廓
- en: In the previous recipe, we learnt how we can send test data in Steps itself,
    which can be used by the application for processing. Until now, the data was associated
    with one particular Step (implemented by Data Tables); but what if I want to send
    data which is related to the whole Scenario, and what if I want to repeat all
    the Steps of a Scenario again and again for different sets of data? This is a
    classic case of data-driven testing. This will be implemented by using a Scenario
    Outline.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个配方中，我们学习了如何在步骤本身中发送测试数据，这些数据可以被应用程序用于处理。到目前为止，数据与一个特定的步骤相关联（由数据表实现）；但如果我们想发送与整个场景相关的数据，或者我们想为不同的数据集重复执行场景的所有步骤，这将是数据驱动测试的一个典型例子。这将通过使用场景轮廓来实现。
- en: Getting ready
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s create a Scenario for a login functionality where we want to test all
    the possible Scenarios where the login will fail. Based on what we have learned
    so far, this is how our Scenario will look:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个用于登录功能的场景，我们想要测试所有可能导致登录失败的场景。根据我们迄今为止所学的内容，我们的场景将看起来像这样：
- en: '[PRE12]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In terms of syntax, there is no problem in this code. Cucumber will treat it
    as well as any other, but the problem is for the person writing the Feature file.
    If you look closely, only the dataset is changing and all the other Steps are
    the same. These are the following problems with this approach to creating Feature
    files:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 从语法角度来看，这段代码没有问题。Cucumber会像对待任何其他代码一样处理它，但问题是对于编写特性文件的人来说。如果你仔细看，只有数据集在变化，所有其他步骤都是相同的。这是创建特性文件方法中存在以下问题的原因：
- en: Copying and pasting Scenarios to use different values can quickly become tedious
    and repetitive.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复制和粘贴场景以使用不同的值可能会很快变得繁琐和重复。
- en: If tomorrow only one Step changes, it has to be changed in all the Scenarios.
    So, maintainability and reusability are big issues.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果明天只有一个步骤发生变化，它必须在所有场景中更改。因此，可维护性和可重用性是重要的问题。
- en: To avoid these problems, let's look at the next section and understand how we
    can solve them.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免这些问题，让我们看看下一节，了解我们如何解决这些问题。
- en: How to do it…
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here, we are going to use the `Scenario Outline` keyword and add one Scenario
    Outline to test possible login Scenarios:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用`Scenario Outline`关键字并添加一个场景轮廓来测试可能的登录场景：
- en: '[PRE13]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works…
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Here we have used the `Scenario Outline` keyword and we have merged all three
    Scenarios in to one Scenario Outline. One advantage of the Scenario Outline is
    that our Feature file is now compact and expressive. Let''s understand Scenario
    Outline in more detail:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了`Scenario Outline`关键字，并将所有三个场景合并为一个场景轮廓。场景轮廓的一个优点是，我们的特性文件现在更加紧凑和表达性强。让我们更详细地了解场景轮廓：
- en: Scenario Outline allow us to send test data to Scenarios through the use of
    a template with placeholders.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景轮廓允许我们通过使用带有占位符的模板来向场景发送测试数据。
- en: A Scenario Outline is run once for each row in the Examples section beneath
    it (not counting the first row of column headers).
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于场景轮廓下面的示例部分中的每一行（不包括列标题的第一行），都会运行一次场景轮廓。
- en: A Scenario Outline is a template that is never directly run. It uses placeholders,
    which are contained within `< >` in the Scenario Outline's Steps.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景轮廓是一个模板，它永远不会直接运行。它使用占位符，这些占位符位于场景轮廓步骤中的`< >`内。
- en: Think of a placeholder like a variable. It is replaced with a real value from
    the `Examples` table row, where the text between the placeholder's angle brackets
    matches that of the table column header.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将占位符想象成一个变量。它会被`Examples`表行中的实际值所替换，其中占位符尖括号内的文本与表列标题相匹配。
- en: In the first execution, when Cucumber encounters the first Step with placeholders,
    which is `When user enters <UserName> in username field` in our case, Cucumber
    looks for a column with the header `UserName` in the `Examples` table.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第一次执行中，当Cucumber遇到第一个带有占位符的步骤时，在我们的例子中是`当用户在用户名字段中输入<UserName>`，Cucumber会在`Examples`表中寻找标题为`UserName`的列。
- en: If there is no column with `UserName` in the `Examples` table, then Cucumber
    does not give an error but instead considers `<UserName>` as a String and passes
    it to Step Definition as it is.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果在`Examples`表中没有带有`UserName`列，那么Cucumber不会报错，而是将`<UserName>`视为一个字符串，并原样将其传递给步骤定义。
- en: If Cucumber finds a column with the header `UserName`, then it picks the first
    row data from this column and replaces `UserName` with that value, which is `wrongusername`
    in our case, and sends this value to Step Definition.
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Cucumber找到一个带有`UserName`标题的列，那么它会从这个列中选取第一行数据，并用这个值替换`UserName`，在我们的例子中是`wrongusername`，然后将这个值发送到步骤定义。
- en: Cucumber repeats this process for all `< >` for one round of execution.
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber会为执行中的一轮中的所有`< >`重复此过程。
- en: 'So, for the first execution, this is how our Scenario Outline will look:'
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，对于第一次执行，我们的情景概述将看起来是这样的：
- en: '[PRE14]'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The value substituted for the placeholder changes with each subsequent run of
    the Scenario Outline. The values from the second row are taken for the second
    execution and so on, until the end of the `Examples` table is reached.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于占位符的值在每个情景概述的后续运行中都会改变。第二行的值用于第二次执行，依此类推，直到达到`Examples`表的末尾。
- en: The Scenario Outline itself is useless without an `Examples` table, which Lists
    the rows of values to be substituted for each placeholder.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 情景概述本身如果没有`Examples`表就毫无用处，该表列出了要替换每个占位符的值行。
- en: Note
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Now that you have leaned the concept of Scenario Outline, try implementing
    the following:'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在你已经了解了情景概述的概念，尝试实现以下内容：
- en: Write a Scenario Outline with multiple arguments in one Step.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个步骤中写一个带有多个参数的情景概述。
- en: Can you create a Scenario Outline with multiple examples? You can group examples
    of positive tests and negative tests in different tables.
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能创建一个带有多个示例的情景概述吗？你可以将正测试和负测试的示例分组在不同的表中。
- en: Creating a Feature file in a language other than English
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在非英语语言中创建特性文件
- en: Most of us have worked in teams spanning multiple geographies, and we would
    agree that some of us are more comfortable in native languages as compared to
    English. We are able to express ourselves better, and we are also able to express
    everything. So what if our BA or PO is more comfortable in Danish compared to
    English? Let's write the specification in a language other than English in Cucumber.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们中的大多数人都在跨地理的团队中工作过，我们都会同意，与我们相比，有些人更习惯于母语而不是英语。我们能够更好地表达自己，也能够表达一切。那么，如果我们的业务分析师或产品所有者比英语更习惯于丹麦语呢？让我们在Cucumber中以非英语语言编写规范。
- en: How to do it…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: This is a sample English Feature file, which we will convert into different
    languages.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例英文特性文件，我们将将其转换为不同的语言。
- en: '[PRE15]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To create the Feature file in Danish (`Danish.feature`):'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建丹麦语（`Danish.feature`）的特性文件：
- en: '[PRE16]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Cucumber allows us to write Feature files in around 40 spoken languages, thus
    empowering the teams whose first language is not English to write Feature files
    which are as robust as English language Feature files. The header `# language:
    da` in the first line of the Feature tells Cucumber what language will be used
    in the Feature file. By default, the language is English. If we want to write
    Feature files in another language, the Feature files must be saved with `"UTF-8"
    encoding`.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'Cucumber允许我们用大约40种口语化的语言编写特性文件，从而赋予那些母语不是英语的团队编写与英语特性文件一样健壮的特性文件的能力。特性文件第一行的`#
    language: da`标题告诉Cucumber特性文件中将使用哪种语言。默认情况下，语言是英语。如果我们想用其他语言编写特性文件，特性文件必须以`"UTF-8"编码`保存。'
- en: In a single project, we can have Feature files in multiple languages; but for
    one Feature file, only one language will work.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个项目中，我们可以有多个语言的特性文件；但对于一个特性文件，只能使用一种语言。
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For all languages, there is no difference in how Step definitions are generated.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有语言，步骤定义的生成没有区别。
- en: Combining Scenarios, Backgrounds, and Scenario Outlines
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结合情景、背景和情景概述
- en: Until now we have learned about Scenarios, Steps, Background, and Scenario Outline
    individually. But when a BA or a PO has to write the Feature file, they have to
    combine all these keywords to come up with a very efficient and expressive Feature
    file.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经单独学习了情景、步骤、背景和情景概述。但是当一个业务分析师或产品所有者必须编写特性文件时，他们必须结合所有这些关键字来编写一个非常高效和表达性的特性文件。
- en: 'Consider writing a Feature file for a login functionality where the latter
    meets the following criteria:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑编写一个登录功能的特性文件，其中后者满足以下标准：
- en: The user should get an option to log in from the application's home page
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应有一个选项从应用程序的主页登录
- en: To log in, a user should have a username and password
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要登录，用户应有一个用户名和密码
- en: After a successful login, the user should be redirected to the home page
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录成功后，用户应被重定向到主页
- en: In case of an unsuccessful login, the user should get the appropriate message
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果登录失败，用户应收到适当的消息
- en: The user should also get an option to register new users on the home page
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户还应该有一个选项在主页上注册新用户
- en: The user should also be able to verify which users exist in the application
    (this Feature is not present on the GitHub landing page but has been added for
    to clarify concepts)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户还应该能够验证应用程序中存在哪些用户（这个功能不在GitHub着陆页上，但已添加以阐明概念）
- en: Note
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All these requirements are specific to the behavior of the application, and
    none of them are concerned with how you implement these requirements.
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有这些要求都是针对应用程序的行为的，并且它们都不涉及您如何实现这些要求。
- en: How to do it…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Now we are going to use all the keywords we have explored until now, and we
    are going to create a `login.feature` file that specifies all the aforementioned
    requirements:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用我们迄今为止探索的所有关键词，并创建一个`login.feature`文件，该文件指定了上述所有要求：
- en: '[PRE17]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Here we have combined all the keywords and concepts discussed until now in
    this chapter. Let''s go through each requirement one by one and analyze how and
    with which keyword we specified these requirements:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已将本章中讨论的所有关键词和概念合并在一起。让我们逐个分析每个要求，并分析我们是如何以及使用哪个关键词来指定这些要求的：
- en: User should get an option to log in from the application home page—Scenario
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户应有一个选项从应用程序主页登录—场景
- en: For login, a user should have a username and password—Scenario
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于登录，用户应有一个用户名和密码—场景
- en: After successful login, the user should be redirected to the home page—Scenario
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录成功后，用户应被重定向到主页—场景
- en: In case of unsuccessful login, the user should get the appropriate message—Scenario
    Outline
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果登录失败，用户应收到适当的消息—场景概述
- en: The user should also get an option to register new users on the home page—Scenario
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户还应该有一个选项在主页上注册新用户—场景
- en: The user should also be able to verify which users exist in the application—Data
    Table
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户还应该能够验证应用程序中存在哪些用户—数据表
