- en: Chapter 1. Writing Feature Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first Feature file with one Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Scenarios with different Steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Scenario with the And and But keywords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a Feature file with multiple Scenarios
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Background to Feature files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending multiple arguments in Steps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using complex data types to store data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Scenario Outlines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Feature file in a language other than English
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combining Scenarios, Background, and Scenario Outlines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Cucumber Framework, business requirements are specified in Feature files,
    which are written in the Gherkin Language. So it becomes very important for us
    to understand the power and usage of the Gherkin language to come up with efficient
    and optimized Feature files.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the usage of the Gherkin language to write meaningful
    and smart Feature files. We will start with some simple recipes to create a Feature
    file with one Scenario and will gradually move to recipes that are more complex
    where we create Feature files with multiple Scenarios, Backgrounds, and Scenario
    Outlines. We will also cover concepts and keywords, such as Feature, Scenario,
    Steps, Background, Scenario Outline and Data Tables.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In this chapter, we will only focus on Feature files. Step Definitions and automation
    libraries will be covered in later chapters. Initially, you may not understand
    everything about the concepts in this chapter, but things will become clearer
    as you read on.
  prefs: []
  type: TYPE_NORMAL
- en: Writing your first Feature file with one Scenario
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's assume you are a **Product Owner** (**PO**) or a **Business Analyst**
    (**BA**). Your team is creating a web application and you need to write specifications
    for that application. A very simple and basic specification for that web application
    is when we enter the URL of that application in a browser, the application should
    load. So how do we write this specification in Cucumber? We will be covering this
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are going to create a simple Feature file with only one Scenario
    that tests whether the web page has loaded or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a `page_load.feature` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Cucumber we write our requirements in plain English like Language, **Gherkin**.
    Gherkin is a domain-specific language that has a very well-defined syntax. It
    works on the basis of some predefined **keywords**. In the preceding example,
    the highlighted portions of the text are Gherkin's keywords and the rest is dependent
    on the application under test.
  prefs: []
  type: TYPE_NORMAL
- en: Let's understand each keyword in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Feature
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Cucumber, Feature files contain business requirements. The text that immediately
    follows the Feature keyword, and is in the same line, is the Title of the Feature
    file. Three (optional) Text lines that follow the Feature keyword line are Intent
    of the Feature file and intent text is whatever we want to write, up until the
    first Scenario. Feature file should contain either Scenario or Scenario Outline.
    The naming conventions for Feature files should be lowercase with underscores,
    for example, `login.feature` and `home_page.feature`. The names of Scenarios and
    Feature files must be unique.
  prefs: []
  type: TYPE_NORMAL
- en: Scenarios
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Scenarios are like test cases and start with the Scenario keyword in a new
    line (different from the Feature intent). The text that immediately follows the
    Scenario keyword, and is on the same line, is the **Scenario Title**. Three (optional)
    Text lines that follow the Scenario keyword line are **Intent** of the Scenario.
    All Scenarios perform following:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the system into a particular state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Poke it (perform some action)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examine the new state
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Scenarios contain Steps which are equivalent to test Steps and use the following
    keywords to denote them: Given, When, Then, But, and And (case sensitive).'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you save the Feature files mentioned in this chapter and run them, in the
    first run, Cucumber is going to give errors for the missing Step Definition files,
    along with suggestions for Step Definitions. To resolve these errors, copy the
    suggestions given by Cucumber and paste them into a default Step Definition file.
  prefs: []
  type: TYPE_NORMAL
- en: Creating Scenarios with different Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we specify a business requirement, we need to specify the pre-conditions,
    user actions, and expected output. Let''s first understand what each of these
    mean:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pre-condition**: This sets the **Application Under Test** (**AUT**) in a
    state where the test case can be executed, or establishing the application context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User action**: This refers to the action that a user performs that is in
    line with the Scenario objective.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expected output**: This refers to the application''s response after the user
    action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's have this specification written in Cucumber in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we are going to update the Feature file we created in the previous
    recipe by using the keywords `Given`, `When` and `Then`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Cucumber Scenario consists of Steps identified with keywords such as Given,
    When, Then, And, But, and so on. These have been defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Given**: Preconditions are mentioned in the `Given` keyword. The Steps of
    the Given keyword put the system in to a known state, which is necessary for the
    user action. Avoid talking about user interaction in Given Steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**When**: The purpose of the `When` Steps is to describe the user action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Then**: The purpose of `Then` Steps is to observe the expected output. The
    observations should be related to the business value/benefit of your Feature description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Scenario with the And and But keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we specify a business requirement, sometimes there are multiple pre-conditions,
    user actions, and expected outcomes. So how do we write these specifications in
    Cucumber?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on what we have learned so far we know how to create Scenarios with one
    Given, When, and Then keyword. Now, if we need to add multiple **Steps**, then
    we can update our Feature file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The problem here is that the keywords `Given`, `When`, and `Then` are repeated
    and the readability is thus affected. Having readable Feature files is one of
    biggest advantages of Cucumber. So how do we maintain the readability of Feature
    files? Let's figure this out in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we are going to add one more Scenario and will use the `And`
    and `But` keywords:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `And` and `But` keywords will be useful here. These keywords help to increase
    the expressiveness and readability of the Feature file:'
  prefs: []
  type: TYPE_NORMAL
- en: '**And**: This is used for statements that are an addition to the previous Steps
    and represent positives statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**But**: This is used for statements that are an addition to previous Steps
    and represent negative statements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a Step Definitions file, `And` and `But` are listed as Given/When/Then, the
    keyword that they appear after. There are no `And` and `But` keywords in Step
    Definitions.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a Feature file with multiple Scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feature files contain possible Scenarios for a particular functionality. This
    is like writing all possible requirements that a Feature should meet when it is
    implemented. So let's write these specifications in Cucumber in the following
    section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a new Feature file called `home_page.feature`, which will cover
    the functionality of the default content of [https://github.com/](https://github.com/),
    the **Bootcamp** section, and the top banner content. We will create a different
    Scenario for each functionality. Take a look at the following screenshot for more
    clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00123.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A Cucumber Feature file can have any number of Scenarios as required. Some
    points to keep in mind are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One Feature file normally focuses on one functionality of the application, such
    as login page, home page, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One Scenario refers to one sub-Feature of that functionality, such as the new
    customer page, delete customer page, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we have multiple Scenarios in a Feature file, we should always follow the
    Stateless Scenarios Guideline. Let's understand this guideline better—each Scenario
    must make sense and should be executed independently of any other Scenario. The
    result of one Scenario/Feature should not affect the other Scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the benefits of independent Scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Feature files are easier and fun to understand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can only run a subset of Scenarios, as all the required Steps of a Scenario
    are mentioned in the Scenario itself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In comparison to dependent Scenarios, independent Scenarios will be more eligible
    candidates for *parallel execution*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Adding Backgrounds to Feature files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we write Feature files, we write multiple Scenarios. Now all of these Scenarios
    start from one particular point. If I'm writing home page Scenarios, then I need
    to start the flow from the login functionality. So it is better to write the repetitive
    Steps at one place rather than in all Scenarios. Let's understand how to do this
    in the next Section.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Based on what we have learned so far, this is what our Feature file will look
    like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The problem here is that first five statements are repeated in all the Scenarios.
    This affects the readability of the Feature files, and there is a lot of duplicated
    effort.
  prefs: []
  type: TYPE_NORMAL
- en: 'The problems with this way of writing Feature files are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Repetition**: Many statements are repeated in all the Scenarios'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Readability**: The readability of the Feature files is affected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Duplication**: Copying these Steps to all the Scenarios is redundant.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainability**: Even if a single Step changes, we have to change all occurrences.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to update the `home_page.feature` file and we are going to use
    the `Background` keyword to put the common Steps across all the Scenarios in one
    place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we have used the Background keyword. All the Steps mentioned in the Background
    keyword will be executed before each Scenario or Scenario Outline in a Feature
    file. Let''s understand this keyword in greater detail:'
  prefs: []
  type: TYPE_NORMAL
- en: There can be only one Background in one Feature file and it allows us to set
    a precondition for all Scenarios in a Feature file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Background is like a Scenario, containing a number of Steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background is run before each Scenario, but after the **BeforeScenario** Hooks.
    (We will read about Hooks in [Chapter 3](part0036.xhtml#aid-12AK81 "Chapter 3. Enabling
    Fixtures"), *Enabling Fixtures*).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The title and multiline description / intent of Background are optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since the Steps mentioned in Background will be run for all Scenarios in a Feature
    file, we need to be careful when adding the Steps to Background. For example,
    we should not add a Step that is not common to all Scenarios.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is what the output of the preceding file looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00124.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Don't use `Background` to set up a complicated state unless that state is actually
    something the client needs to know.
  prefs: []
  type: TYPE_NORMAL
- en: Keep your `Background` section short because you expect a person to remember
    these Steps when you are adding a new Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make your `Background` section vivid, because that way it will be easier for
    a person to remember it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending multiple arguments in Steps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we talk about testing, data-driven testing is a very famous approach.
    Until now, we have focused on what our Steps intend to do. The questions that
    now come to mind are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Can our Steps also send test data?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What kind of test data can our Steps send?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we send mixed data types in one single Step?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Put on a BA's shoes and let's write some Scenarios for the GitHub user registration
    page and login functionality.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to update the `login.feature` file and add two Scenarios, where
    we are going to pass arguments in Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the preceding Feature file, focus on the text written in `" "`. This is our
    test data. The text mentioned in between `" "` in Steps is associated to Capture
    groups in Step Definition files.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of Step Definition for one of the Steps is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The output of the preceding `System.out.println` will be `ShankarGarg` (test
    data that we have passed in the Feature file).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, since you have learned how to pass test data in Steps, try your hand at
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Send String and integer data in the same Step.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Send a List in a Step; for example: "Monday, Tuesday, Wednesday".'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using complex data types to store data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learnt how we can send data in Steps, which can be
    used by the application for processing. The data that we have sent up to this
    point has been either Strings or integers. But what if we want to send data structures
    that are more complex and span across multiple lines?
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s write a Scenario for this functionality—we want to verify whether various
    users exist or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The problem with this approach of writing Feature files is that Feature files
    are not expressive enough and there is a lot of repetition.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to add one more Scenario to the `login.feature` file, and we are
    going to use Data Table to send a large set of test data along a Step:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we have used Data Tables. Tables as arguments to Steps are handy for specifying
    larger datasets. Let''s understand Data Tables in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Tables as arguments to Steps are handy to specify larger datasets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first row of a Data Table is always the header row, where we specify the
    headers for each column. All the other rows in a Data Table are data rows, which
    contain the actual data that will be used by the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data tables will be passed to the Step Definition as the last argument.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't confuse Data Tables with Scenario Outline tables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Data tables are very easy to handle in Step Definition files as well. This
    is what a sample Step Definition code looks like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code sample, the Data Table has been converted into a List
    of String and can be handled very easily thereafter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Data table transformation has been explained in detail in the Transforming Data
    Tables to parse test data recipe in [Chapter 2](part0026.xhtml#aid-OPEK1 "Chapter 2. Creating
    Step Definitions"), *Creating Step Definitions*.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Scenario Outlines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learnt how we can send test data in Steps itself,
    which can be used by the application for processing. Until now, the data was associated
    with one particular Step (implemented by Data Tables); but what if I want to send
    data which is related to the whole Scenario, and what if I want to repeat all
    the Steps of a Scenario again and again for different sets of data? This is a
    classic case of data-driven testing. This will be implemented by using a Scenario
    Outline.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a Scenario for a login functionality where we want to test all
    the possible Scenarios where the login will fail. Based on what we have learned
    so far, this is how our Scenario will look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In terms of syntax, there is no problem in this code. Cucumber will treat it
    as well as any other, but the problem is for the person writing the Feature file.
    If you look closely, only the dataset is changing and all the other Steps are
    the same. These are the following problems with this approach to creating Feature
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: Copying and pasting Scenarios to use different values can quickly become tedious
    and repetitive.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If tomorrow only one Step changes, it has to be changed in all the Scenarios.
    So, maintainability and reusability are big issues.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To avoid these problems, let's look at the next section and understand how we
    can solve them.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we are going to use the `Scenario Outline` keyword and add one Scenario
    Outline to test possible login Scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we have used the `Scenario Outline` keyword and we have merged all three
    Scenarios in to one Scenario Outline. One advantage of the Scenario Outline is
    that our Feature file is now compact and expressive. Let''s understand Scenario
    Outline in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: Scenario Outline allow us to send test data to Scenarios through the use of
    a template with placeholders.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Scenario Outline is run once for each row in the Examples section beneath
    it (not counting the first row of column headers).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Scenario Outline is a template that is never directly run. It uses placeholders,
    which are contained within `< >` in the Scenario Outline's Steps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of a placeholder like a variable. It is replaced with a real value from
    the `Examples` table row, where the text between the placeholder's angle brackets
    matches that of the table column header.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the first execution, when Cucumber encounters the first Step with placeholders,
    which is `When user enters <UserName> in username field` in our case, Cucumber
    looks for a column with the header `UserName` in the `Examples` table.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If there is no column with `UserName` in the `Examples` table, then Cucumber
    does not give an error but instead considers `<UserName>` as a String and passes
    it to Step Definition as it is.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If Cucumber finds a column with the header `UserName`, then it picks the first
    row data from this column and replaces `UserName` with that value, which is `wrongusername`
    in our case, and sends this value to Step Definition.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber repeats this process for all `< >` for one round of execution.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, for the first execution, this is how our Scenario Outline will look:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The value substituted for the placeholder changes with each subsequent run of
    the Scenario Outline. The values from the second row are taken for the second
    execution and so on, until the end of the `Examples` table is reached.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Scenario Outline itself is useless without an `Examples` table, which Lists
    the rows of values to be substituted for each placeholder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you have leaned the concept of Scenario Outline, try implementing
    the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a Scenario Outline with multiple arguments in one Step.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can you create a Scenario Outline with multiple examples? You can group examples
    of positive tests and negative tests in different tables.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Feature file in a language other than English
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of us have worked in teams spanning multiple geographies, and we would
    agree that some of us are more comfortable in native languages as compared to
    English. We are able to express ourselves better, and we are also able to express
    everything. So what if our BA or PO is more comfortable in Danish compared to
    English? Let's write the specification in a language other than English in Cucumber.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a sample English Feature file, which we will convert into different
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To create the Feature file in Danish (`Danish.feature`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Cucumber allows us to write Feature files in around 40 spoken languages, thus
    empowering the teams whose first language is not English to write Feature files
    which are as robust as English language Feature files. The header `# language:
    da` in the first line of the Feature tells Cucumber what language will be used
    in the Feature file. By default, the language is English. If we want to write
    Feature files in another language, the Feature files must be saved with `"UTF-8"
    encoding`.'
  prefs: []
  type: TYPE_NORMAL
- en: In a single project, we can have Feature files in multiple languages; but for
    one Feature file, only one language will work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For all languages, there is no difference in how Step definitions are generated.
  prefs: []
  type: TYPE_NORMAL
- en: Combining Scenarios, Backgrounds, and Scenario Outlines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now we have learned about Scenarios, Steps, Background, and Scenario Outline
    individually. But when a BA or a PO has to write the Feature file, they have to
    combine all these keywords to come up with a very efficient and expressive Feature
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider writing a Feature file for a login functionality where the latter
    meets the following criteria:'
  prefs: []
  type: TYPE_NORMAL
- en: The user should get an option to log in from the application's home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To log in, a user should have a username and password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a successful login, the user should be redirected to the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of an unsuccessful login, the user should get the appropriate message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user should also get an option to register new users on the home page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user should also be able to verify which users exist in the application
    (this Feature is not present on the GitHub landing page but has been added for
    to clarify concepts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: All these requirements are specific to the behavior of the application, and
    none of them are concerned with how you implement these requirements.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are going to use all the keywords we have explored until now, and we
    are going to create a `login.feature` file that specifies all the aforementioned
    requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we have combined all the keywords and concepts discussed until now in
    this chapter. Let''s go through each requirement one by one and analyze how and
    with which keyword we specified these requirements:'
  prefs: []
  type: TYPE_NORMAL
- en: User should get an option to log in from the application home page—Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For login, a user should have a username and password—Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After successful login, the user should be redirected to the home page—Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In case of unsuccessful login, the user should get the appropriate message—Scenario
    Outline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user should also get an option to register new users on the home page—Scenario
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The user should also be able to verify which users exist in the application—Data
    Table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
