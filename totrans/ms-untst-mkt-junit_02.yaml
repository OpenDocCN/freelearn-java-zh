- en: Chapter 2. Automating JUnit Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to the concept of **Extreme Programming**
    (**XP**), **Continuous Integration** (**CI**), the benefits of CI, and JUnit test
    automation using various tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: CI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gradle automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven project management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ant
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuous Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In college, I was working on a critical steganography (image watermarking) project
    and simultaneously developing a module on my home computer, where I integrated
    my changes with other changes on the college server. Most of my time was wasted
    in integration. After manual integration, I would find everything broken; so,
    integration was terrifying.
  prefs: []
  type: TYPE_NORMAL
- en: When CI is not available, development teams or developers make changes to code
    and then all the code changes are brought together and merged. Sometimes, this
    merge is not very simple; it involves the integration of lots of conflicting changes.
    Often, after integration, weird bugs crop up and a working module may start to
    fail, as it involves a complete rework of numerous modules. Nothing goes as planned
    and the delivery is delayed. As a result, the predictability, cost, and customer
    service are affected.
  prefs: []
  type: TYPE_NORMAL
- en: CI is an XP concept. It was introduced to prevent integration issues. In CI,
    developers commit the code periodically, and every commit is built. Automated
    tests verify the system integrity. It helps in the incremental development and
    periodic delivery of the working software.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of CI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: CI is meant to make sure that we're not breaking something unconsciously in
    our hurry. We want to run the tests continuously, and we need to be warned if
    they fail.
  prefs: []
  type: TYPE_NORMAL
- en: In a good software development team, we'd find **test-driven development** (**TDD**)
    as well as CI.
  prefs: []
  type: TYPE_NORMAL
- en: CI requires a listener tool to keep an eye on the version control system for
    changes. Whenever a change is committed, this tool automatically compiles and
    tests the application (sometimes it creates a WAR file, deploys the WAR/EAR file,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: If compilation fails, or a test fails, or deployment fails, or something goes
    wrong, the CI tool immediately notifies the concerned team so that they can fix
    the issue.
  prefs: []
  type: TYPE_NORMAL
- en: CI is a concept; to adhere to CI, tools such as Sonar and FindBugs can be added
    to the build process to track the code quality, and they automatically monitor
    the code quality and code coverage metrics. Good quality code gives us confidence
    that a team is following the right path. Technical debts can be identified very
    quickly, and the team can start reducing the debts. Often, CI tools have the ability
    to present dashboards pertaining to quality metrics.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, CI tools enforce code quality, predictability, and provide quick
    feedback, which reduces the potential risk. CI helps to increase the confidence
    in the build. A team can still write very poor quality code, even test poor quality
    code, and the CI will not care.
  prefs: []
  type: TYPE_NORMAL
- en: Numerous CI tools are available on the market, such as Go, Bamboo, TeamCity,
    CruiseControl, and Jenkins. However, CruiseControl and Jenkins are the widely
    used ones.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins supports various build scripting tools. It integrates almost all sorts
    of projects and is easy to configure. In this chapter, we will work with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: CI is just a generic conduit to run the commands; often, build tools are used
    to execute the commands, and then the CI tool collects the metrics produced by
    the commands or build tools. Jenkins needs build scripts to execute tests, compile
    the source code, or even deploy deliverables. Jenkins supports different build
    tools to execute the commands—Gradle, Maven, and Ant are the widely used ones.
    We will explore the build tools and then work with Jenkins.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can download the code for this chapter. Extract the ZIP file. It contains
    a folder named `Packt`. This folder has two subfolders: `gradle` and `chapter02`.
    The `gradle` folder contains the basic Gradle examples and the `chapter02` folder
    contains the Java projects and Ant, Gradle, and Maven build scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: Gradle automation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Gradle** is a build automation tool. Gradle has many benefits such as loose
    structure, ability to write scripts to build, simple two-pass project resolution,
    dependency management, remote plugins, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The best feature of Gradle is the ability to create a **domain-specific language**
    (**DSL**) for the build. An example would be generate-web-service-stubs or run-all-tests-in-parallel.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A DSL is a programming language specialized for a domain and focuses on a particular
    aspect of a system. HTML is an example of DSL. We cannot build an entire system
    with a DSL, but DSLs are used to solve problems in a particular domain. The following
    are the examples of DSLs:'
  prefs: []
  type: TYPE_NORMAL
- en: A DSL for building Java projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A DSL for drawing graph
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's one of the **unique selling point** (**USP**) is an incremental build.
    It can be configured to build a project only if any resource has changed in the
    project. As a result, the overall build execution time decreases.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle comes up with numerous preloaded plugins for different projects types.
    We can either use them or override.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Maven or Ant, Gradle is not XML based; it is based on a dynamic language
    called **Groovy**. Groovy is a developer-friendly **Java Virtual Machine** (**JVM**)
    language. Its syntax makes it easier to express the code intent and provides ways
    to effectively use expressions, collections, closures, and so on. Groovy programs
    run on JVM; so, if we write Java code in a Groovy file, it will run. Groovy supports
    DSL to make your code readable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Groovy's home page is [http://groovy.codehaus.org/](http://groovy.codehaus.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can use Ant or Maven in a Gradle script. Gradle supports the Groovy syntax.
    Gradle provides support for Java, Web, Hibernate, GWT, Groovy, Scala, OSGi, and
    many other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Big companies such as LinkedIn and Siemens use Gradle. Many open source projects,
    such as Spring, Hibernate, and Grails use Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Java (jdk 1.5 +) needs to be installed before executing a Gradle script. The
    steps to do this are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the command prompt and run `java –version`; if Java is not installed or
    the version is older than 1.5, install the latest version from the Oracle site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Gradle is available at [http://www.gradle.org/downloads](http://www.gradle.org/downloads).
    Once the download is complete, extract the media. You will find that it includes
    a `bin` directory. Open the command prompt and go to the `bin` directory. You
    can extract the media to any directory you want. For example, if you extract the
    Gradle media under `D:\Software\gradle-1.10`, then open the command prompt and
    go to `D:\Software\gradle-1.10\bin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, check the Gradle version using the `gradle –v` command. It will show you
    the version and other configuration. To run the Gradle from anywhere in your computer,
    create a `GRADLE_HOME` environment variable and set the value to the location
    where you extracted the Gradle media.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `%GRADLE_HOME%\bin` (in Windows) to the `PATH` variable (export `GRADLE_HOME`
    and `PATH` to `bash_login` in Linux and `bashrc` in Mac).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new command prompt, go to any folder, and run the same command `gradle
    –v` again to check whether the `PATH` variable is set correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The other option is to use the Gradle wrapper (`gradlew`) and allow the batch
    file (or shell script) to download the version of Gradle specific to each project.
    This is an industry standard for working with Gradle, which ensures that there's
    consistency among Gradle versions. The Gradle wrapper is also checked into the
    source code control along with the build artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Gradling
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the programming world, "Hello World" is the starting point. In this section,
    we will write our first "Hello World" Gradle script. A Gradle script can build
    one or more projects. Each project can have one or more tasks. A task can be anything
    like compiling Java files or building a WAR file.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To execute a task, we will create a `build.gradle` file and execute the `gradle`
    command to run a build. Gradle will look for a file named `build.gradle` in the
    current directory. To execute a build file other than `build.gradle`, use the
    `–b <file name>` option.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a task to print "Hello World" on the console. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a text editor and enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file as `build.gradle`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the command prompt and browse to the folder where you saved the `build.gradle`
    file. Run the `gradle firstTask` command, or if you saved the file under `D:\Packt\gradle`,
    simply open the command prompt and run `gradle –b D:\Packt\gradle\build.gradle
    firstTask`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following information will be printed on the command prompt:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we defined a task named `aTask` using the Java method style. The task
    `aTask` contains two closure keywords: `doLast` and `doFirst`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `doFirst` closure is executed once the task is invoked, and the `doLast`
    closure is executed at the end.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run `gradle aTask`, it prints the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Default tasks
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In Ant, we can define a default target; similarly, Gradle provides options for
    default tasks using the keyword `defaultTasks 'taskName1', …'taskNameN'`.
  prefs: []
  type: TYPE_NORMAL
- en: The `defaultTasks` '`aTask`' keyword defines `aTask` as a default task. So now
    if we only execute `gradle` with no task name, then it will invoke the default
    task.
  prefs: []
  type: TYPE_NORMAL
- en: The task dependency
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In Ant, a target depends on another target, for example, a Java code compile
    task may depend on cleaning of the output folder; similarly, in Gradle, a task
    may depend on another task. The dependency is defined using the `dependsOn` keyword.
    The following syntax is used to define a task dependency:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, `secondTask` depends on `firstTask`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way of defining task dependency is passing the dependency in a method-like
    style. The following code snippet shows the method argument style:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute `gradle secondTask`; it will first execute the dependent task `firstTask`
    and then execute the task `secondTask` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Another way of defining intertask dependency is using `secondTask.dependsOn
    = ['firstTask']` or `secondTask.dependsOn 'firstTask'`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can abbreviate each word of a task name in a camel case to execute a task.
    For example, the task name `secondTask` can be abbreviated to `sT`.
  prefs: []
  type: TYPE_NORMAL
- en: Daemon
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each time the `gradle` command is invoked, a new process is started, the Gradle
    classes and libraries are loaded, and the build is executed. Loading classes and
    libraries take time. Execution time can be reduced if a JVM, Gradle classes, and
    libraries, are not loaded each time. The `--daemon` command-line option starts
    a new Java process and preloads the Gradle classes and libraries; so, the first
    execution takes time. The next execution with the `--daemon` option takes almost
    no time because only the build gets executed—the JVM, with the required Gradle
    classes and libraries is already loaded. The configuration for daemon is often
    put into a `GRADLE_OPTS` environment variable; so, the flag is not needed on all
    calls. The following screenshot shows the execution of daemon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Daemon](img/00018.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Note that the first build took 31 seconds, whereas the second build tool took
    only 2 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: To stop a daemon process, use `gradle –stop` the command-line option.
  prefs: []
  type: TYPE_NORMAL
- en: Gradle plugins
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Build scripts are monotonous, for example, in a Java build script, we define
    the source file location, third-party JAR location, clean output folder, compile
    Java files, run tests, create JAR file, and so on. Almost all Java project build
    scripts look similar.
  prefs: []
  type: TYPE_NORMAL
- en: This is something similar to duplicate codes. We resolve the duplicates by refactoring
    and moving duplicates to a common place and share the common code. Gradle plugins
    solve this repetitive build task problem by moving the duplicate tasks to a common
    place so that all projects share and inherit the common tasks instead of redefining
    them.
  prefs: []
  type: TYPE_NORMAL
- en: A plugin is a Gradle configuration extension. It comes with some preconfigured
    tasks that, together, do something useful. Gradle ships with a number of plugins
    and helps us write neat and clean scripts.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will explore the Java and Eclipse plugins.
  prefs: []
  type: TYPE_NORMAL
- en: The Eclipse plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Eclipse plugin generates the project files necessary to import a project
    in Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any Eclipse project has two important files: a `.project` file and a `.classpath`
    file. The `.project` file contains the project information such as the project
    name and project nature. The `.classpath` file contains the classpath entries
    for the project.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple Gradle build with the Eclipse plugin using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder named `eclipse`, then a file named `build.gradle`, and add
    the following script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To inherit a plugin nature, Gradle uses the `apply plugin: ''<plug-in name>''`
    syntax.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the command prompt and check all the available tasks using the `gradle
    tasks –-all` command. This will list the available Eclipse plugin tasks for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now run the `gradle eclipse` command. It will generate only the `.project`
    file, as the command doesn''t know what type of project needs to be built. You
    will see the following output on the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a Java project, add `apply plugin: ''java''` to the `build.gradle`
    file and rerun the command. This time it will execute four tasks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Eclipse` folder (the location where you put the `build.gradle` file).
    You will find the `.project` and `.classpath` files and a .`settings` folder.
    For a Java project, a **Java Development Tools** (**JDT**) configuration file
    is required. The `.settings` folder contains the `org.eclipse.jdt.core.prefs`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we can launch Eclipse and import the project. We can edit the `.project`
    file and change the project name.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, a Java project depends on third-party JARs, such as the JUnit JAR
    and Apache utility JARs. In the next section, we will learn how a classpath can
    be generated with JAR dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The Java plugin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The Java plugin provides some default tasks for your project that will compile
    and unit test your Java source code and bundle it into a JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: The Java plugin defines the default values for many aspects of the project,
    such as the source files' location and Maven repository. We can follow the conventions
    or customize them if necessary; generally, if we follow the conventional defaults,
    then we don't need to do much in our build script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple Gradle build script with the Java plugin and observe
    what the plugin offers. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `java.gradle` build file and add the `apply plugin: ''java''` line.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the command prompt and type in `gradle -b java.gradle tasks –-all`. This
    will list the Java plugin tasks for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To build a project, we can use the build task; the build depends on many tasks.
    Execute the `gradle -b java.gradle build` command. The following screenshot shows
    the output:![The Java plugin](img/00019.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since no source code was available, the build script didn't build anything.
    However, we can see the list of available tasks—build tasks are dependent on compile,
    JAR creation, test execution, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Java plugins come with a convention that the build source files will be under
    `src/main/java`, relative to the project directory. Non-Java resource files such
    as the XML and properties files will be under `src/main/resources`. Tests will
    be under `src/test/java`, and the test resources under the `src/test/resources`.
  prefs: []
  type: TYPE_NORMAL
- en: To change the default Gradle project source file directory settings, use the
    `sourceSets` keyword. The `sourceSets` keyword allows us to change the default
    source file's location.
  prefs: []
  type: TYPE_NORMAL
- en: A Gradle script must know the location of the `lib` directory to compile files.
    The Gradle convention for library locations is repositories. Gradle supports the
    local `lib` folder, external dependencies, and remote repositories.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle also supports the following repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Maven repository**: Maven can be configured on our local machine, on a network
    machine, or even the preconfigured central repository.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maven central repository**: Maven''s central repository is located at [http://repo1.maven.org/maven2](http://repo1.maven.org/maven2).
    The `mavenCentral()` groovy method can be used to load dependencies from the centralized
    Maven repository. The following is an example of accessing the central repository:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Maven local repository**: If we have a local Maven repository, we can use
    the `mavenLocal()`method to resolve dependencies as follows:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `maven()` method can be used to access repositories configured on the intranet.
    The following is an example of accessing an intranet URL:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'The `mavenRepo()` method can be used with the following code:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'A secured Maven repository needs user credentials. Gradle provides the `credentials`
    keyword to pass user credentials. The following is an example of accessing a secured
    Maven repository:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '**Ivy repository**: This is a remote or local ivy repository. Gradle supports
    the same Maven methods for ivy. The following is an example of accessing an ivy
    repository and a secured ivy repository:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Flat directory repository**: This is a local or network directory. The following
    is an example of accessing a local directory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Gradle uses `flatDir()` to locate a local or network-shared library folder.
    Here, `dir` is used to locate a single directory and `dirs` with directory locations
    separated by commas are used to locate distributed folders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this section, we will create a Java project, write a test, execute the test,
    compile source or test files, and finally build a JAR file. Perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `build.gradle` build script file under `packt\chapter02\java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add Eclipse and Java plugin support using the following lines of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will write a JUnit test, so our project will be dependent on JUnit JARs.
    Create a `lib` directory under `packt\chapter02` and copy the `hamcrest-core-1.3.jar`
    and `junit-4.11.jar` JARs (we downloaded these JARs in [Chapter 1](part0014_split_000.html#page
    "Chapter 1. JUnit 4 – a Total Recall"), *JUnit 4 – a Total Recall*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this example, we will use the flat directory repository. We created a `lib`
    directory for JUnit JARs. Add the following lines to the `build.gradle` file to
    configure our repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have a single `lib` folder; so, we will use `flatDir` and `dir` conventions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A repository can have numerous library files, but we may need only some of them.
    For example, source file compilation doesn't require the JUnit JARs but test files
    and test execution need them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Gradle comes with dependency management. The dependencies keyword is used to
    define dependencies.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The closure dependencies support the following default types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Compile**: These are the dependencies required to compile the source of the
    project.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: These dependencies are required by the production classes at runtime.
    By default, these also include the compile time dependencies.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**testCompile**: These dependencies are required to compile the test source
    of the project. By default, they also include the compiled production classes
    and the compile-time dependencies.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**testRuntime**: These dependencies are required to run the tests. By default,
    they also include the compile, runtime, and testCompile dependencies.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each dependency type needs a coordinate: a group, name, and version of a dependent
    JAR.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some websites, such as [mvnrepository.com](http://mvnrepository.com), can help
    us to come up with a ready-to-copy-paste dependency string, such as [http://mvnrepository.com/artifact/org.springframework/spring-aop/3.1.1.RELEASE](http://mvnrepository.com/artifact/org.springframework/spring-aop/3.1.1.RELEASE).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose we need to include the `org.springframework.aop-3.1.1.RELEASE.jar` file
    in our classpath (here `org.springframework` is the group, `aop` is the name,
    and `3.1.1.RELEASE` is the version). We can simply write `org.springframework:aop:3.1.1.RELEASE`
    to identify `aop.jar`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Tests need JUnit JAR support. Add the following lines to our `build.gradle`
    file to add the JUnit dependency:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or simply add the following lines to the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Generate an Eclipse project using the Eclipse plugin and issue the `gradle
    eclipse` command. The `eclipse` command will execute three tasks: `eclipseClasspath`,
    `eclipseJdt`, and `eclipseProject`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `\chapter02\java` folder, and you will find a `.classpath` and a `.project`
    file. Open the `.classpath` file and check whether `junit-4.11` and `hamcrest-core-1.3.jar`
    have been added as `classpathentry`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `gradle eclipse` command output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00020.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following screenshot shows the content of the generated `.classpath` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00021.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Launch Eclipse and import the project by navigating to **File** | **Import**
    | **Existing Projects into Workspace**. Now browse to the `D:\Packt\chapter02\java`
    folder and import the project. Eclipse will open the `java` project—the Java community's
    best practice is to keep the test and source code files under the same package
    but in a different source folder. Java code files are stored under `src/main/java`,
    and test files are stored under `src/test/java`. Source resources are stored under
    `src/main/resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to create the `src/main/java`, `src/main/resources`, and `src/test/java`
    folders directly under the Java project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot displays the folder structure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00022.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Right-click on the leaf folders (the `java` and `resources` folders under `src/main`
    and `src/test`, respectively); a pop-up menu will open. Now, go to **Build Path**
    | **Use as Source Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00023.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will create a Java class and unit test the behavior; the Java class will
    read from a properties file and return an `enum` type depending on the value provided
    in the properties file. Reading a file from the test is not recommended as I/O
    operations are unpredictable and slow; your test may fail to read the file and
    take time to slow down the test execution. We can use mock objects to stub the
    file read, but for simplicity, we will add two methods in the service class—one
    will take a `String` argument and return an `enum` type, and the other one will
    read from a properties file and call the first method with the value. From the
    test, we will call the first method with a string. The following are the steps
    to configure the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an `environment.properties` properties file under `/java/src/main/resources`
    and add `env = DEV` in that file.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an `enum` file in the `com.packt.gradle` package under the `/java/src/main/java`
    source package:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Java class to read the properties file as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `EnvironmentService` class to return an `enum` type depending on the
    environment setup as follows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The `getEnvironmentType()` method calls the `Environment` class to read the
    properties file value and then calls the `getEnvironmentType(String name)` method
    with the read value to return an `enum` type.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a test class under `/src/test/java` in the `com.packt.gradle` package.
    The following is the code:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `returns_NULL_when_environment_not_configured()` test passes `xyz`
    to the `getEnvironmentType` method and expects that the service will return `null`,
    assuming that there won't be any `xyz` environment. In another test, it passes
    the `prod` value to the `getEnvironmentType` method and expects that a type will
    be returned.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Now open the command prompt and run `gradle build`; it will compile the source
    and test files, execute the test, and finally create a JAR file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To execute only the tests, run `gradle test`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `\chapter02\java\build` folder, and you will find three important
    folders:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`libs`: This folder contains the build output JARs—`Java.jar`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`reports`: This folder contains the HTML test results'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test-results`: This folder contains the XML format test execution result and
    the time taken to execute each test'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the test execution result in the HTML format:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00024.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Gradle is an intelligent build tool, and it supports incremental build. Rerun
    the `gradle build` command. It will just skip the tasks and say `UP-TO-DATE`.
    The following is a screenshot of the incremental build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Java plugin](img/00025.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we make a change to the test class, only test tasks will be executed. The
    following are the test tasks: `compileTestJava`, `testClasses`, `test`, `check`,
    and `build`.'
  prefs: []
  type: TYPE_NORMAL
- en: In next chapters, we will explore more on Gradle. Do you want to dive deep now?
    If so, you can visit [http://www.gradle.org/docs/current/userguide/userguide.html](http://www.gradle.org/docs/current/userguide/userguide.html).
  prefs: []
  type: TYPE_NORMAL
- en: Maven project management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven is a project build tool. Using Maven, we can build a visible, reusable,
    and maintainable project infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven provides plugins for visibility: the code quality/best practices is visible
    through the PMD/checkstyle plugin, the XDOC plugin generates project content information,
    the JUnit report plugin makes the failure/success story visible to the team, the
    project activity tracking plugins make the daily activity visible, the change
    log plugin generates the list of changes, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: As a result, a developer knows what APIs or modules are available for use; so,
    he or she doesn't invent the wheel (rather, he or she reuses the existing APIs
    or modules). This reduces the duplication and allows a maintainable system to
    be created.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore the Maven architecture and rebuild our Gradle
    project using Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A prerequisite for Maven is the **Java Development Kit** (**JDK**). Make sure
    you have JDK installed on your computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps to set up Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Maven media. Go to [http://maven.apache.org/download.html](http://maven.apache.org/download.html)
    to get the latest version of Maven.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading Maven, extract the archive to a folder; for example, I extracted
    it to `D:\Software\apache-maven-3.1.1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Windows OS, create an environment variable named `M2_HOME` and point it
    to the Maven installation folder. Modify the `PATH` variable and append `%M2_HOME%\bin`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Linux, we need to export the `PATH` and `M2_HOME` environment variables
    to the `.bashrc` file. Open the `.bashrc` file and edit it with the following
    text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Mac, the `.bash_login` file needs to be modified with following text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check the installation and execute the `mvn –version` command. This should print
    the Maven version. The following is a screenshot of the output:![Installation](img/00026.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven is installed so we can start exploring Maven. Eclipse users with the `m2eclipse`
    plugin installed already have Maven, which they can directly use from Eclipse
    and they don't have to install Maven.
  prefs: []
  type: TYPE_NORMAL
- en: The Archetype plugin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Maven, Archetype is a project-template generation plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Maven allows us to create a project infrastructure from scratch from a list
    of predefined project types. The Maven command `mvn archetype:generate` generates
    a new project skeleton.
  prefs: []
  type: TYPE_NORMAL
- en: The `archetype:generate` command loads a catalog of available project types.
    It tries to connect to the central Maven repository at [http://repo1.maven.org/maven2](http://repo1.maven.org/maven2),
    and downloads the archetype catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the latest catalog, you should be connected to the Internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow the ensuing steps to generate a Java project skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder hierarchy `/Packt/chapter02/maven`, open the command prompt,
    and browse to the `/Packt/chapter02/maven` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Issue a `mvn archetype:generate` command; you will see a large list of archetypes
    being downloaded, each with a number, a name, and a short description.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It will prompt you to enter an archetype number. Type in the default `maven-archetype-quickstart`
    archetype. In my case, the number is 343.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows you that the number `343` is default:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Archetype plugin](img/00027.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the entire catalog on Windows OS, enter the `mvn archetype:generate >
    archetype.txt` command. This will populate the text file with the project type
    list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter `343` or just hit *Enter* to select the default. Next, it will prompt
    you to select a version. Hit *Enter* to select the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now it will ask you to provide a `groupId`. A `groupId` is the root package
    for multiple projects, and `org.springframework` is the `groupId` for all Spring
    projects. Enter `org.packt` as `groupId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, it will ask for `artifactId`. This is the project name and `aop` is the
    `artifactId` for `org.springframework.aop-3.1.1.RELEASE`. Enter `Demo` for the
    `artifactId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven will ask for the version and the default is `1.0-SNAPSHOT`. The version
    is your project's version, and here `3.1.1.RELEASE` is the version for the `org.springframework.aop-3.1.1.RELEASE`
    project. We will accept the default. Hit *Enter* to accept the default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you will be prompted to enter the package name. Enter `com.packt.edu` as
    package's name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, it will show you what you entered. Review it and accept it as shown
    in the following screenshot:![The Archetype plugin](img/00028.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `/Packt/chapter02/maven` folder; you will see the `Demo` project folder
    is created with the following file structure:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Archetype plugin](img/00029.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The Maven convention for the source Java file is `src/main/java` and the test
    source file is `src/test/java`.
  prefs: []
  type: TYPE_NORMAL
- en: Maven will automatically create a Java file `App.java` under `src/main/java/com/packt/edu`
    and a test file `AppTest` under `src/test/java/com/packt/edu`.
  prefs: []
  type: TYPE_NORMAL
- en: Also, it will create an XML file `pom.xml` directly under `Demo`. This file
    will be used for building the project. In the next section, we will read about
    the POM file.
  prefs: []
  type: TYPE_NORMAL
- en: The Project Object Model (POM) file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Every Maven project contains a `pom.xml` file, which is a project metadata file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A POM file can contain the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Project coordinates such as `<groupId/>`, `<artifactId/>`, `<version/>`, `<dependency>`,
    and inheritance through `<modules/>` and `<parent/>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open the `pom.xml` file in the `Demo` folder; it contains the following coordinate
    details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The build details in `<build>` and `<reporting>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project visibility details such as `<name>`, `<organization>`, `<developers>`,
    `<url>`, and `<contributors>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our generated `pom.xml` contains the following details:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Project environment details such as `<scm>`, `<repository>`, and `<mailingList>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project dependency
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a multimodule project, a project can depend on many other projects. For example,
    say we depend on JUnit. Maven automatically discovers the required artifact dependencies.
    This is very useful as we depend on many open source projects. It's always useful,
    be it an open source or a close source project.
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember the Gradle dependency closure? It has four default types for
    Compile, Runtime, testCompile, and testRuntime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, Maven has the following dependency scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Compile**: Code compile time classpath dependency; this is the default scope.
    If not, it is explicitly defined and then the compile time scope is set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: This is required at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test**: This dependency is required for test code compilation and test execution.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Provided**: The JDK or environment dependency at runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A parent project defines dependencies using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'All child projects inherit the dependency by just adding the `<dependency>`
    tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The build life cycle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The build life cycle clearly defines the process of building and distributing
    a particular project artifact.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven has the following three built-in build life cycles:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Default**: This life cycle handles the compile, test, packaging, deployment,
    and many more functions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Clean**: This life cycle generally cleans the build artifacts generated by
    the previous build(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Site**: This life cycle takes care of generation and deployment of the project''s
    site documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will compile and test our `Demo` project.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will work with compile, test, and package targets of the
    default life cycle.
  prefs: []
  type: TYPE_NORMAL
- en: Compiling the project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Perform the following steps to compile the project:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the command prompt and browse to `\Packt\chapter02\maven\Demo`. Maven needs
    a `pom.xml` file to compile a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `mvn compile`; it will compile the project and create class files under
    `\Demo\target\classes`. The following screenshot shows the output:![Compiling
    the project](img/00030.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing the project
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To execute the tests in Demo, open the command prompt and type in `mvn test`;
    it will download JUnit JARs and surefire JARs for test compilation and test report
    generation respectively and then execute the test. The following screenshot shows
    the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing the project](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Packaging the project
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: The `mvn package` command compiles source code, compiles tests, executes tests,
    and finally builds a JAR. It will generate `Demo-1.0-SNAPSHOT.jar` in `\Packt\chapter02\maven\Demo\target`.
  prefs: []
  type: TYPE_NORMAL
- en: The clean life cycle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mvn clean` command removes the `target` folder and deletes all the content.
    Run the command and check that the `target` folder has been deleted from `\Packt\chapter02\maven\Demo\`.
  prefs: []
  type: TYPE_NORMAL
- en: The site life cycle
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `mvn site` command generates a detailed project report in the HTML format
    under the target or site. It includes About, Plugin Management, Distribution Management,
    Dependency Information, Source Repository, Mailing Lists, Issue Tracking, Continuous
    Integration, Project Plugins, Project License, Project Team, Project Summary,
    and Dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to [http://maven.apache.org/guides/index.html](http://maven.apache.org/guides/index.html)
    to explore more on Maven.
  prefs: []
  type: TYPE_NORMAL
- en: The next section covers the Apache Ant.
  prefs: []
  type: TYPE_NORMAL
- en: Another neat tool (Ant)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ant is a Java-based build tool from the Apache Software Foundation. Ant's build
    files are written in XML. You need Java to execute an Ant task.
  prefs: []
  type: TYPE_NORMAL
- en: Download Apache Ant from [http://ant.apache.org/](http://ant.apache.org/), extract
    the media, and create an `ANT_HOME` variable and set the value to the extracted
    location. Edit `PATH` and append `%ANT_HOME%\bin` in Windows. For Mac or Linux
    OS, you need to export `ANT_HOME` and `PATH` as described in the *Installation*
    section of *Maven project management* earlier in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Ant needs a `build.xml` file to execute tasks. Ant supports the `–f` option
    to specify a build script; so the `ant –f myBuildFile.xml` command will work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a build script and execute the Maven project (`\Packt\chapter02\maven\Demo`)
    using Ant. Follow the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an XML file `build.xml` in `\Packt\chapter02\maven\Demo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following lines in the `build.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<project>` tag is a defined tag in Ant. You can name your project, and
    `Demo` is the name of the project. Next, we will set properties; a property can
    have a name and value or location. Here, `src.dir` is a property name, and this
    property can be accessed from any task using the `${src.dir}` syntax. The `location`
    attribute refers to a relative location from the `build.xml` file. Since `src/main/java`
    contains the source file, we set the location value to `src/main/java`. The other
    two properties, `build.dir` and `dist.dir`, will be used by the Java compiling
    task to compile class files and generate the JAR file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Do you remember the clean task in Maven? Ant doesn''t provide default targets.
    We have to define a `clean` target to remove old build outputs, and we will call
    Ant''s `<delete>` command to delete directories. Then, using the `<mkdir>` command,
    we will recreate the directories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note that we added two targets using the `<target>` tag. Each target is identified
    using a name. We will call the `clean` target to delete `build.dir` (generated
    `.class` files) and `dist.dir` (build output JARs).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Compile task is inbuilt in Gradle/Maven, but Ant doesn''t have any inbuilt
    compile targets; so, we will create a target to compile Java files as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use the `<javac>` command to compile Java files. The `<javac>` command accepts
    `srcdir` and `destdir`. Compiler reads Java files from `srcdir` and generates
    class files to `destdir`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A target may depend on another, and `depends` allows us to pass comma-separated
    target names. Here, compile target depends on `clean` and `makedir`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The compilation is done. Now, we will create `jar` from the class files using
    the `<jar>` command as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `jar` target needs to know the class file's location and destination. The
    `destfile` attribute refers to the destination JAR file name and location and
    `basedir` refers to the class file location. Check whether we used `${dist.dir}\${ant.project.name}.jar`
    to represent the destination JAR file name and folder. Here, `${dist.dir}` refers
    to the destination folder, and `${ant.project.name}.jar` represents the JAR name.
    `${ant.project.name}` is the name (`Demo`) we mentioned in the `<project>` tag.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Ant script is ready to compile and create a JAR. Open the command prompt,
    go to `\Packt\chapter02\maven\Demo` and issue an `ant jar` command. Here, `jar`
    depends on `compile` and `compile` depends on `clean` and `makedir`. So, the `jar`
    command will create two directories, `bin` and `ant_output`, compile the Java
    file and generate the`.class` file in the bin folder, and finally create a `Demo.jar`
    JAR in the `ant_output` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The compilation is done; now, it''s time to execute the tests. Tests need JUnit
    JARs and generated source class files to compile and execute. We have created
    the `lib` directory for Gradle in \`Packt\chapter02\lib` and kept the JUnit 4
    JARs in it. We will use this `lib`. Add three properties for the test source file
    directory, library directory, and test report as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check whether the `lib.dir` location is relative to the `build.xml` location.
    The `test.dir` attribute points to `src/test/main` and test reports will be generated
    inside `ant_output/report`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Path allows us to refer to a directory or to a file path. We will define a
    `jclass.path` path to refer to all JAR files under the `lib` directory and generated
    `.class` files as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `<fileset>` tag takes a directory location and `<include>` takes a file
    name or regular expression. The `**/*` value means all the directories and files
    are in `${lib.dir}`. The `pathelement` attribute refers to the `bin` directory
    where the compiled class files are put.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to compile test files. Add a `testcompile` target and use the
    `javac` command. Pass `test.dir` as `srcdir` for compilation. Add `<classpath>`
    to refer the `jclass.path` value. This will compile the test files. Consider the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add another target to execute the JUnit test. Ant has a `junit` command to
    run tests. Pass `jclass.path` to point the `lib` directory and generated files
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Issue the `ant test` command. This command compiles and executes the tests.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can set a default task in the `build.xml` file in the `<project>` tag. The
    syntax is `<project name="Demo" default="task name" basedir=".">`. Now, we don't
    have to specify a target name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Our Ant script is ready for compiling Java files, executing tests, and generating
    reports. In the next section, we will set up Jenkins and use the build scripts.
  prefs: []
  type: TYPE_NORMAL
- en: To explore more on how to compile web archives and learn advanced topics, go
    to [http://ant.apache.org/](http://ant.apache.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Jenkins is an open source CI tool written in Java. It runs on any web container
    compliant with Servlet Specification 2.4\. The new Apache Tomcat server is an
    example of a web container with which Jenkins can be integrated as a Windows service.
  prefs: []
  type: TYPE_NORMAL
- en: Jenkins supports various source control platforms, such as CVS, SVN, Git, Mercurial,
    and ClearCase through the use of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: It can execute automated builds on Ant and Maven projects. Jenkins is free (MIT
    license) and runs on many operating systems. Jenkins doesn't allow you to create
    a Gradle project, but you can create a free-style project and build Gradle projects.
  prefs: []
  type: TYPE_NORMAL
- en: To install Jenkins on your local machine, follow the instructions at [https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins](https://wiki.jenkins-ci.org/display/JENKINS/Installing+Jenkins).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once Jenkins is installed, we will perform the following steps to configure
    Jenkins:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Jenkins URL; from the home page go to **Manage Jenkins** | **Configure
    system**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you need to set up the JDK. Go to the **JDK** section, click on **JDK installations**
    and then click on **Add JDK**. Uncheck the **Install automatically** checkbox,
    and enter a **Name** and **JAVA_HOME** path. You can add as many JDKs as you want.
    **Name** and **JAVA_HOME** location uniquely identify the version of JDK. In your
    project, you can refer to the JDK you want to use. The following screenshot shows
    the installation of JDK:![Jenkins](img/00032.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, set up Maven. Go to the **Maven** section and click on **Maven installations**.
    Now, click on **Add Maven**, uncheck the **Install automatically** checkbox, enter
    a **Name**, and set it to **MAVEN_HOME**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In general, if the checkbox **Install automatically** is checked, then Jenkins
    will ask you to select a version of the tool and download the version. You can
    install or add multiple versions of the software and just give a unique name.
    For example, you can add a name, `Maven3,` to refer to Maven Version 3.1.1 and
    add `Maven2` to refer to Version 2.2.1\. In your build job, Jenkins will show
    you the list and select the appropriate version you need. The following screenshot
    shows the installation of Maven:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Jenkins](img/00033.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Go to the **Ant** section and click on **Ant installations**. Then, click on
    **Add Ant**, uncheck the **Install automatically** checkbox, enter a **Name**,
    and set it to **ANT_HOME**.![Jenkins](img/00034.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our basic configuration is complete. Next, we will start building a Java project
    using Gradle.
  prefs: []
  type: TYPE_NORMAL
- en: The Gradle project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Jenkins doesn''t come with Gradle. You need to install a plugin as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch the Jenkins URL; from the home page, go to **Manage Jenkins** | **Manage
    Plugins**. Go to the **Available** tab; in the **Filter** textbox (located at
    the right top corner of the page), enter `gradle`. It will bring you **Gradle
    Plugin**. Check the checkbox associated with **Gradle Plugin** and click on **Install
    without restart**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will install the **Gradle plugin**. Jenkins will show you the progress
    of installation. Once the installation is over, you need to configure Gradle,
    like we did for Ant and Maven. Refer to the following screenshot to install **Gradle
    plugin**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Gradle project](img/00035.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: From the home page, go to **Manage Jenkins** | **Configure System**. Scroll
    down to the **Gradle** section and click on Gradle installation. Then, click on
    **Add Gradle**, uncheck the **Install automatically** checkbox, enter a **Name**,
    and set **GRADLE_HOME**.![The Gradle project](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go back to the home page. The Jenkins convention for project building is **job**.
    A job runs continuously, invokes scripts, and gives feedback. To set up an automated
    build process, the user has to configure a job. Click on the **create new jobs**
    hyperlink to add a new project type. Jenkins supports several types of build jobs.
    Two most commonly used jobs are the free-style builds and the Maven 2/3 builds.
    The free-style projects allow you to configure any sort of build job; this job
    type is highly flexible and configurable. However, you can install plugins for
    other types.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot displays how to create a `gradleProject` free-style
    job:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Gradle project](img/00037.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The free-style project has several settings. In **Advance Project Options**,
    you can set **Quiet period** (time to wait after a build), **Retry Count** (number
    of attempts to checkout from the repository), and so on. In **Source Code Management**,
    you can choose a version control tool type. Version control is one of the most
    important things in CI. It keeps track of software versions, we can revert our
    changes at any point in time, look at file history, and much more. By default,
    Jenkins comes with the source code management tool plugins, CVS and SVN, but we
    can install plugins to support other types, such as Git and Rational ClearCase.
    We didn't configure any version control tool yet; so, choose **None,** as shown
    in the following screenshot:![The Gradle project](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next is the **Build Trigger** event, and the build trigger knows when to start
    a job. There are several types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Build after other projects are built**: This implies that the job will be
    invoked after another job'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build periodically**: This signifies the periodic schedule for cron expressions,
    that is, every 5 minutes or every 30 minutes and so on'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Poll SCM**: This implies polling the version control location after a specific
    time set in the **Schedule** option'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We don''t have other jobs or a version control tool, so choose **Build periodically**
    and set **Schedule** to **H/5****** to execute the build every 5 minutes, as shown
    in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Gradle project](img/00039.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The next section is **Build**. You can add several steps to a build. Click on
    **Add build step**. It will show you a step; choose **Invoke Gradle script** to
    call our Gradle project, as shown in the following screenshot:![The Gradle project](img/00040.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the **Invoke Gradle** radio button and choose the Gradle version
    we added. In the **Tasks** field, enter `build` to invoke the build task; you
    can add multiple tasks here. In the **Build File** field, enter the full path
    of your Gradle build file `\Packt\chapter02\java\build.gradle`, as shown in the
    following screenshot:![The Gradle project](img/00041.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on **Save**. Jenkins will take you to the project's home page. Click
    on the **Build Now** hyperlink. It will start building our first project. It will
    show you a build history table with a build number, such as **#1 Feb 4\. 2014
    09:18:45 PM**. Click on the **build#** hyperlink and then click on **Console Output**.
    It will show you the build log. The following screenshot shows our Gradle build
    log:![The Gradle project](img/00042.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now go back to the home page; it shows you the list of all builds and their
    status. It has a weather column—when all builds are failing, the weather shows
    a cloudy image, and when all builds are passing, the weather becomes sunny. You
    can invoke a build by clicking on the wheel symbol to the right of each build
    row. Refer to the following screenshot:![The Gradle project](img/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our Gradle build configuration is complete. Automatically, after every five
    minutes, the build will be kicked off. We can configure a post build action to
    send an e-mail after each build. That way, if a build fails, then immediately
    a mail will be sent, and the concerned person can take care of the issue. So,
    the feedback cycle is faster.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will configure a Maven job.
  prefs: []
  type: TYPE_NORMAL
- en: The Maven project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will configure Jenkins to execute a Maven build job. Please
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **New Job** hyperlink to add a new project type. Select **Build
    a maven2/3 project** and enter a job name, as shown in the following screenshot:![The
    Maven project](img/00044.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the details page, choose **Source Code Management** as **None**, **Build
    Triggers** as **Build periodically**, and set **H/5****** to execute the build
    in every 5 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, go to the **Build** section and set the **Root POM** value; set the full
    file path location of your `pom.xml` file in the `Demo` project. You can leave
    the **Goals and options** section blank. Gradle will issue the default `mvn install`
    command. Refer to the following screenshot:![The Maven project](img/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now click on **Save**. Jenkins will take you to the project''s home page. Click
    on the **Build Now** hyperlink and it will start building our first project. It
    will show you a build history table with a build number such as **#1 Feb 4\. 2014
    09:18:45 PM**. Click on the **build#** hyperlink and then click on **Console Output**.
    It will show you the following build log:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Check whether Jenkins issued the `mvn install` command, created the JAR, and
    installed the artifacts in the `.m2` repository.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building the Ant project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will set up a free-style software project to build using Ant. The following
    are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the Jenkins URL, click on **New Job,** and select **Build a free-style
    software project**. Enter the name, `ant,` and then click on **Ok**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't have source code management, so skip this section. Go to **Build Triggers**
    and set the **H/5 * * * *** value to kick off build automatically in every 5 minutes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Build** section and add a **Invoke Ant** build step, as shown in
    the following screenshot:![Building the Ant project](img/00046.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an Ant version from the dropdown, set `jar` as **Targets**; `jar` will
    invoke test and compile. In **Build File**, browse to our `build.xml` file location
    and set the value, as shown in the following screenshot:![Building the Ant project](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the setting and the new job will be saved. Click on **Build Now**. It will
    start building the `Demo` project we created earlier in this chapter. The following
    is a screenshot of **Console Output**:![Building the Ant project](img/00048.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can read about securing Jenkins, the post-build action, broken build claim
    plugins, and the CI game from the Jenkins wiki at [http://jenkins-ci.org/](http://jenkins-ci.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the concept of CI, explored the build automation tools,
    and configured Jenkins to accomplish the CI.
  prefs: []
  type: TYPE_NORMAL
- en: The Gradle section covered the environment setup, Gradle tasks, daemons, dependency
    management, repository setup, Eclipse/Java plugins, and gradually explored the
    Gradle features. The Maven part demonstrated how to set up Maven, described the
    POM file, project dependency, and explored the default, clean, and site life cycles.
    The Ant section described how to write the Ant script to compile and execute JUnit
    tests. Jenkins covered the build automation setup as well as automated build using
    Gradle, Maven, and Ant.
  prefs: []
  type: TYPE_NORMAL
- en: By now, the reader will be able to write build scripts using Gradle, Maven,
    and Ant and configure Jenkins to execute the build scripts.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter provides an overview of test doubles and different test double
    types with examples, and includes topics such as dummy, stub, mock, spy, and fake.
  prefs: []
  type: TYPE_NORMAL
