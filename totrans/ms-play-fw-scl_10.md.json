["```java\n    play debug\n\n    ```", "```java\n    activator -jvm-debug <port>\n\n    ```", "```java\n    sbt -jvm-debug <port>\n\n    ```", "```java\n-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=<port>\n\n```", "```java\n[app]$ console\n[info] Compiling 3 Scala sources to /home/app/target/scala-2.10/classes...\n[info] Starting scala interpreter...\n[info]\nWelcome to Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_60).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\n\n```", "```java\nscala> :pas\n// Entering paste mode (ctrl-D to finish)\n\nimport play.api.Play\n\nval application = new DefaultApplication(new java.io.File(\".\"), this.getClass.getClassLoader, None, Mode.Dev)\nPlay.start(application)\n\nimport play.api.Play.current\n\n```", "```java\n// Exiting paste mode, now interpreting.\n\nSLF4J: Class path contains multiple SLF4J bindings.\nSLF4J: Found binding in [jar:file:/home/.ivy2/cache/ch.qos.logback/logback-classic/jars/logback-classic-1.1.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: Found binding in [jar:file:/home/.ivy2/cache/org.slf4j/slf4j-log4j12/jars/slf4j-log4j12-1.7.2.jar!/org/slf4j/impl/StaticLoggerBinder.class]\nSLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.\nSLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]\n[info] play - Application started (Dev)\nimport play.api.Play\napplication: play.api.DefaultApplication = play.api.DefaultApplication@29600952\nimport play.api.Play.current\n\nscala>\n\n```", "```java\nscala> Play.application.configuration\nres7: play.api.Configuration = Configuration(Config(SimpleConfigObject({\"akka\":{\"actor\":{\"creation-timeout\":\"20s\",\"debug\":{\"autoreceive\":\"off\",\"event-stream\":\"off\",\"fsm\":\"off\",\"lifecycle\":\"off\",\"receive\":\"off\",\"router-misconfiguration\":\"off\",\"unhandled\":\"off\"},\"default-dispatcher\":{\"attempt-teamwork\":\"on\",\"default-executor\":{\"fallback\":\"fork-join-executor\"},\"executor\":\"default-executor\",\"fork-join-executor\":{\"parallelism-factor\":3,\"parallelism-max\":64,\"parallelism-min\":8},\"mailbox-requirement\":\"\",\"shutdown-timeout\":\"1s\",\"thread-pool-executor\":{\"allow-core-timeout\":\"on\",\"core-pool-size-factor\":3,\"core-pool-size-max\":64,\"core-pool-size-min\":8,\"keep-alive-time\":\"60s\",\"max-pool-size-factor\":3,\"max-pool-size-max\":64,\"max-pool-size-min\":8,\"task-queue-size\":-1,\"task-queue-type\":\"linked\"},\"thro...\n\n```", "```java\n[app] $ test:console\n[info] Starting scala interpreter...\n[info]\nWelcome to Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_60).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala> :pas\n// Entering paste mode (ctrl-D to finish)\n\nimport play.api.test.Helpers._\nimport play.api.test._\nimport play.api.Play\n\nval application = FakeApplication()\nPlay.start(application)\n\nimport play.api.Play.current\n// Exiting paste mode, now interpreting.\nâ€¦\n\n```", "```java\nscala> Play.application.configuration\nres0: play.api.Configuration = Configuration(Config(SimpleConfigObject({\"akka\":{\"actor\":{\"creation-timeout\":\"20s\",\"debug\":{\"autoreceive\":\"off\",\"event-stream\":\"off\",\"fsm\":\"off\",\"lifecycle\":\"off\",\"receive\":\"off\",\"router-misconfiguration\":\"off\",\"unhandled\":\"off\"},\"default-dispatcher\":{\"attempt-teamwork\":\"on\",\"default-executor\":{\"fallback\":\"fork-join-executor\"},\"executor\":\"default-executor\",\"fork-join-executor\":{\"parallelism-factor\":3,\"parallelism-max\":64,\"parallelism-min\":8},\"mailbox-requirement\":\"\",\"shutdown-timeout\":\"1s\",\"thread-pool-executor\":{\"allow-core-timeout\":\"on\",\"core-pool-size-factor\":3,\"core-pool-size-max\":64,\"core-pool-size-min\":8,\"keep-alive-time\":\"60s\",\"max-pool-size-factor\":3,\"max-pool-size-max\":64,\"max-pool-size-min\":8,\"task-queue-size\":-1,\"task-queue-type\":\"linked\"},\"thro...\n\nscala> controllers.Application.index(\"John\").apply(FakeRequest())\nres1: scala.concurrent.Future[play.api.mvc.Result] = scala.concurrent.impl.Promise$KeptPromise@6fbd57ac\n\nscala> contentAsString(res1)\nres2: String = Hello John\n\n```", "```java\nclass Logger(val logger: Slf4jLogger) extends LoggerLike\n\nobject Logger extends LoggerLike {\n\n  ...\n  val logger = LoggerFactory.getLogger(\"application\")\n\n  def apply(name: String): Logger = new Logger(LoggerFactory.getLogger(name))\n\n  def apply[T](clazz: Class[T]): Logger = new Logger(LoggerFactory.getLogger(clazz))\n\n  ...\n\n}\n```", "```java\n    import play.api.Logger\n    object Task{\n      def delete(id:Long) = {\n        logger.debug(s\"deleting task with id $id\")\n        ...\n      }\n    }\n    ```", "```java\n    import play.api.Logger\n    object Task{\n      private lazy val taskLogger = Logger(getClass)\n      def delete(id:Long) = {\n        taskLogger.debug(s\"deleting task with id $id\")\n        ...\n      }\n    }\n    ```", "```java\n    import play.api.Logger\n    object Task{\n      private lazy val taskLogger = Logger(\"application.model\")\n      def delete(id:Long) = {\n        taskLogger.debug(s\"deleting task with id $id\")\n        ...\n      }\n    }\n    ```", "```java\n<configuration>\n\n  <conversionRule conversionWord=\"coloredLevel\" converterClass=\"play.api.Logger$ColoredLevel\" />\n\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n     <file>${application.home}/logs/application.log</file>\n     <encoder>\n       <pattern>%date - [%level] - from %logger in %thread %n%message%n%xException%n</pattern>\n     </encoder>\n   </appender>\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%coloredLevel %logger{15} - %message%n%xException{5}</pattern>\n    </encoder>\n  </appender>\n\n  <logger name=\"play\" level=\"INFO\" />\n  <logger name=\"application\" level=\"DEBUG\" />\n\n  <!-- Off these ones as they are annoying, and anyway we manage configuration ourself -->\n  <logger name=\"com.avaje.ebean.config.PropertyMapLoader\" level=\"OFF\" />\n  <logger name=\"com.avaje.ebeaninternal.server.core.XmlConfigLoader\" level=\"OFF\" />\n  <logger name=\"com.avaje.ebeaninternal.server.lib.BackgroundThread\" level=\"OFF\" />\n  <logger name=\"com.gargoylesoftware.htmlunit.javascript\" level=\"OFF\" />\n\n  <root level=\"ERROR\">\n    <appender-ref ref=\"STDOUT\" />\n    <appender-ref ref=\"FILE\" />\n  </root>\n\n</configuration>\n```", "```java\n    [app]$ start -Dlogger.url=http://serverPath/conf/appName/logger.xml\n\n    ```", "```java\n# Root logger:\nlogger.root=ERROR\n\n# Logger used by the framework:\nlogger.play=INFO\n\n# Logger provided to your application:\nlogger.application=DEBUG\n```", "```java\nlogger.com.apache.cassandra = DEBUG\n```", "```java\n\"orgName\" % \"packageName\" % \"version\" excludeAll(\n ExclusionRule(organization = \"org.slf4j\"),\n ExclusionRule(organization = \"ch.qos.logback\"))\n\n```"]