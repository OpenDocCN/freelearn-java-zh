["```java\nrequestHandler.setCsrfRequestAttributeName(\"_csrf\");\n```", "```java\n@EnableWebSecurity\npublic class SecurityConfig {\n    // ...\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    // ...\n}\n```", "```java\n@Bean\npublic WebSecurityCustomizer webSecurityCustomizer() {\n    return web -> web.ignoring().antMatchers(\"/ignore1\", \"/ignore2\");\n}\n```", "```java\n@Bean\npublic WebSecurityCustomizer webSecurityCustomizer() {\n    return web -> web.ignoring().requestMatchers(\"/ignore1\", \"/ignore2\");\n}\n```", "```java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http\n          .securityMatchers(matchers -> matchers\n                .requestMatchers(antMatcher(\"/api/**\"), antMatcher(\"/app/**\"))\n          );\n    return http.build();\n}\n```", "```java\n@Configuration\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n       http\n             .authorizeHttpRequests(authorize -> authorize\n                   .anyRequest().authenticated()\n             )\n             .httpBasic(withDefaults());\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfiguration {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http\n             .authorizeHttpRequests((authorize) -> authorize\n                   .anyRequest().authenticated()\n             )\n             .httpBasic(withDefaults());\n       return http.build();\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n    @Override\n    public void configure(WebSecurity web) {\n       web.ignoring().antMatchers(\"/ignore1\", \"/ignore2\");\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfiguration {\n    @Bean\n    public WebSecurityCustomizer webSecurityCustomizer() {\n       return (web) -> web.ignoring().antMatchers(\"/ignore1\", \"/ignore2\");\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n       auth\n             .ldapAuthentication()\n             .userDetailsContextMapper(new PersonContextMapper())\n             .userDnPatterns(\"uid={0},ou=people\")\n             .contextSource()\n             .port(0);\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfiguration {\n    @Bean\n    public EmbeddedLdapServerContextSourceFactoryBean contextSourceFactoryBean() {\n       EmbeddedLdapServerContextSourceFactoryBean contextSourceFactoryBean =\n             EmbeddedLdapServerContextSourceFactoryBean.fromEmbeddedLdapServer();\n       contextSourceFactoryBean.setPort(0);\n       return contextSourceFactoryBean;\n    }\n    @Bean\n    AuthenticationManager ldapAuthenticationManager(BaseLdapPathContextSource contextSource) {\n       LdapBindAuthenticationManagerFactory factory =\n             new LdapBindAuthenticationManagerFactory(contextSource);\n       factory.setUserDnPatterns(\"uid={0},ou=people\");\n       factory.setUserDetailsContextMapper(new PersonContextMapper());\n       return factory.createAuthenticationManager();\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    private final DataSource dataSource;\n    public SecurityConfig(DataSource dataSource) {\n       this.dataSource = dataSource;\n    }\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n       UserDetails user = User.withDefaultPasswordEncoder()\n             .username(\"user\")\n             .password(\"password\")\n             .roles(\"USER\")\n             .build();\n       auth.jdbcAuthentication()\n             .withDefaultSchema()\n             .dataSource(this.dataSource)\n             .withUser(user);\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfig {\n    private final DataSource dataSource;\n    public SecurityConfig(DataSource dataSource) {\n       this.dataSource = dataSource;\n    }\n    @Bean\n    public UserDetailsManager users(DataSource dataSource) {\n       UserDetails user = User.withDefaultPasswordEncoder()\n             .username(\"user\")\n             .password(\"password\")\n             .roles(\"USER\")\n             .build();\n       JdbcUserDetailsManager users = new JdbcUserDetailsManager(dataSource);\n       users.createUser(user);\n       return users;\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Override\n    protected void configure(AuthenticationManagerBuilder auth) throws Exception {\n       UserDetails user = User.withDefaultPasswordEncoder()\n             .username(\"user\")\n             .password(\"password\")\n             .roles(\"USER\")\n             .build();\n       auth.inMemoryAuthentication()\n             .withUser(user);\n    }\n}\n```", "```java\n@Configuration\npublic class SecurityConfig {\n    @Bean\n    public InMemoryUserDetailsManager userDetailsService() {\n       UserDetails user = User.withDefaultPasswordEncoder()\n             .username(\"user\")\n             .password(\"password\")\n             .roles(\"USER\")\n             .build();\n       return new InMemoryUserDetailsManager(user);\n    }\n}\n```", "```java\n@Bean\nPasswordEncoder passwordEncoder2() {\n    return Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_5();\n}\n```", "```java\n@Bean\nPasswordEncoder passwordEncoder() {\n    return new Pbkdf2PasswordEncoder(\"secret\".getBytes(UTF_8), 16, 185000, 256);\n}\n```", "```java\n@Bean\nPasswordEncoder passwordEncoder() {\n    return SCryptPasswordEncoder.defaultsForSpringSecurity_v4_1();\n}\n```", "```java\n@Bean\nPasswordEncoder passwordEncoder() {\n    return Argon2PasswordEncoder.defaultsForSpringSecurity_v5_2();\n}\n```", "```java\n@Bean\nPasswordEncoder passwordEncoder() {\n    String prefix = \"pbkdf2@5.8\";\n    PasswordEncoder current = Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_5();\n    PasswordEncoder upgraded = Pbkdf2PasswordEncoder.defaultsForSpringSecurity_v5_8();\n    DelegatingPasswordEncoder delegating = new DelegatingPasswordEncoder(prefix, Map.of(prefix, upgraded));\n    delegating.setDefaultPasswordEncoderForMatches(current);\n    return delegating;\n}\n```", "```java\npublic SecurityFilterChain filterChain(HttpSecurity http) {\n    http\n          .securityContext((securityContext) -> securityContext\n                .requireExplicitSave(true)\n          );\n    return http.build();\n}\n```", "```java\nSecurityContextHolder.setContext(securityContext);\n```", "```java\nSecurityContextHolder.setContext(securityContext);\nsecurityContextRepository.saveContext(securityContext, httpServletRequest, httpServletResponse);\n```", "```java\n@Bean\npublic SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n    http\n          // ...\n          .securityContext((securityContext) -> securityContext\n                .securityContextRepository(new DelegatingSecurityContextRepository(\n                      new RequestAttributeSecurityContextRepository(),\n                      new HttpSessionSecurityContextRepository()\n                ))\n          );\n    return http.build();\n}\n```", "```java\nSupplier<SecurityContext> loadContext(HttpServletRequest request)\n```", "```java\nDeferredSecurityContext loadDeferredContext(HttpServletRequest request)\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http, RememberMeServices rememberMeServices) throws Exception {\n       http\n             // ...\n             .rememberMe(remember -> remember\n                   .rememberMeServices(rememberMeServices)\n             );\n       return http.build();\n    }\n    @Bean\n    RememberMeServices rememberMeServices(UserDetailsService userDetailsService) {\n       return new TokenBasedRememberMeServices(myKey, userDetailsService);\n    }\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    SecurityFilterChain securityFilterChain(HttpSecurity http, RememberMeServices rememberMeServices) throws Exception {\n       http\n             .rememberMe(remember -> remember\n                   .rememberMeServices(rememberMeServices)\n             );\n       return http.build();\n    }\n    @Bean\n    RememberMeServices rememberMeServices(UserDetailsService userDetailsService) {\n       RememberMeTokenAlgorithm encodingAlgorithm = RememberMeTokenAlgorithm.SHA256;\n       TokenBasedRememberMeServices rememberMe = new TokenBasedRememberMeServices(myKey, userDetailsService, encodingAlgorithm);\n       rememberMe.setMatchingAlgorithm(RememberMeTokenAlgorithm.MD5);\n       return rememberMe;\n    }\n}\n```", "```java\nAuthenticationFilter authenticationFilter = new AuthenticationFilter(...);\nAuthenticationEntryPointFailureHandler handler = new AuthenticationEntryPointFailureHandler(...);\nhandler.setRethrowAuthenticationServiceException(true);\nauthenticationFilter.setAuthenticationFailureHandler(handler);\n```", "```java\nAuthenticationFilter authenticationFilter = new AuthenticationFilter(...);\nAuthenticationEntryPointFailureHandler handler = new AuthenticationEntryPointFailureHandler(...);\nauthenticationFilter.setAuthenticationFailureHandler(handler);\n```", "```java\n@EnableTransactionManagement(order = 0)\n```", "```java\nclass MyAuthorizer {\n    boolean isAdmin(MethodSecurityExpressionOperations root) {\n       boolean decision = root.hasAuthority(\"ADMIN\");\n       // custom work ...\n       return decision;\n    }\n}\n```", "```java\n@PreAuthorize(\"@authz.isAdmin(#root)\")\n```", "```java\n@Bean\nstatic PermissionEvaluator permissionEvaluator() {\n    // ... your evaluator\n}\n```", "```java\n@Bean\nstatic MethodSecurityExpressionHandler expressionHandler() {\n    var expressionHandler = new DefaultMethodSecurityExpressionHandler();\n    expressionHandler.setPermissionEvaluator(myPermissionEvaluator);\n    return expressionHandler;\n}\n```", "```java\nAuthorizationManager<MethodInvocation> authorization = AuthorizationManagers.anyOf(\n       // ... your list of authorization managers\n)\n```", "```java\npublic final class PreAuthorizeAuthorizationManagerAdapter implements AuthorizationManager<MethodInvocation> {\n    private final SecurityMetadataSource metadata;\n    private final AccessDecisionVoter voter;\n    public PreAuthorizeAuthorizationManagerAdapter (MethodSecurityExpressionHandler expressionHandler) {\n       ExpressionBasedAnnotationAttributeFactory attributeFactory =\n             new ExpressionBasedAnnotationAttributeFactory(expressionHandler);\n       this.metadata = new PrePostAnnotationSecurityMetadataSource(attributeFactory);\n       ExpressionBasedPreInvocationAdvice expressionAdvice = new ExpressionBasedPreInvocationAdvice();\n       expressionAdvice.setExpressionHandler(expressionHandler);\n       this.voter = new PreInvocationAuthorizationAdviceVoter(expressionAdvice);\n    }\n    public AuthorizationDecision check(Supplier<Authentication> authentication, MethodInvocation invocation) {\n       List<ConfigAttribute> attributes = this.metadata.getAttributes(invocation, AopUtils.getTargetClass(invocation.getThis()));\n       int decision = this.voter.vote(authentication.get(), invocation, attributes);\n       if (decision == ACCESS_GRANTED) {\n          return new AuthorizationDecision(true);\n       }\n       if (decision == ACCESS_DENIED) {\n          return new AuthorizationDecision(false);\n       }\n       return null; // abstain\n    }\n}\n```", "```java\npublic final class RunAsAuthorizationManagerAdapter<T> implements AuthorizationManager<T> {\n    private final RunAsManager runAs = new RunAsManagerImpl();\n    private final SecurityMetadataSource metadata;\n    private final AuthorizationManager<T> authorization;\n    // ... constructor\n    public AuthorizationDecision check(Supplier<Authentication> authentication, T object) {\n       Supplier<Authentication> wrapped = (auth) -> {\n          List<ConfigAttribute> attributes = this.metadata.getAttributes(object);\n          return this.runAs.buildRunAs(auth, object, attributes);\n       };\n       return this.authorization.check(wrapped, object);\n    }\n}\n```", "```java\n    @Override\n    protected void configureInbound(MessageSecurityMetadataSourceRegistry messages) {\n        messages\n              .simpTypeMatchers(CONNECT, DISCONNECT, UNSUBSCRIBE).permitAll()\n              .simpDestMatchers(\"/user/queue/errors\").permitAll()\n              .simpDestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n              .anyMessage().denyAll();\n    }\n    ```", "```java\n    @Bean\n    AuthorizationManager<Message<?>> messageSecurity(MessageMatcherDelegatingAuthorizationManager.Builder messages) {\n        messages\n              .simpTypeMatchers(CONNECT, DISCONNECT, UNSUBSCRIBE).permitAll()\n              .simpDestMatchers(\"/user/queue/errors\").permitAll()\n              .simpDestMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n              .anyMessage().denyAll();\n        return messages.build();\n    }\n    ```", "```java\n@EnableWebSocketSecurity\n@Configuration\npublic class WebSocketSecurityConfig implements WebSocketMessageBrokerConfigurer {\n    // ...\n}\n```", "```java\nhttp\n       .authorizeRequests((authorize) -> authorize\n             .filterSecurityInterceptorOncePerRequest(true)\n             .mvcMatchers(\"/app/**\").hasRole(\"APP\")\n             // ...\n             .anyRequest().denyAll()\n       )\n```", "```java\nhttp\n       .authorizeHttpRequests((authorize) -> authorize\n             .shouldFilterAllDispatcherTypes(false)\n             .mvcMatchers(\"/app/**\").hasRole(\"APP\")\n             // ...\n             .anyRequest().denyAll()\n       )\n```", "```java\nIpAddressMatcher hasIpAddress = new IpAddressMatcher(\"127.0.0.1\");\nhttp\n       .authorizeHttpRequests((authorize) -> authorize\n                   .requestMatchers(\"/app/**\").access((authentication, context) ->\n                         new AuthorizationDecision(hasIpAddress.matches(context.getRequest()))\n                               // ...\n                               .anyRequest().denyAll()\n             ))\n```", "```java\nhttp\n       .authorizeHttpRequests((authorize) -> authorize\n             .shouldFilterAllDispatcherTypes(false)\n             .mvcMatchers(\"/app/**\").hasRole(\"APP\")\n             // ...\n             .anyRequest().denyAll()\n       )\n```", "```java\nhttp\n       .authorizeHttpRequests((authorize) -> authorize\n             .shouldFilterAllDispatcherTypes(true)\n             .mvcMatchers(\"/app/**\").hasRole(\"APP\")\n             // ...\n             .anyRequest().denyAll()\n       )\n```", "```java\nspring.security.filter.dispatcher-types=request,async,error,forward,include\n```", "```java\npublic class SecurityWebApplicationInitializer extends AbstractSecurityWebApplicationInitializer {\n    @Override\n    protected EnumSet<DispatcherType> getSecurityDispatcherTypes() {\n       return EnumSet.of(DispatcherType.REQUEST, DispatcherType.ERROR, DispatcherType.ASYNC,\n             DispatcherType.FORWARD, DispatcherType.INCLUDE);\n    }\n}\n```", "```java\n@Bean\nAuthorizationManager<RequestAuthorizationContext> requestAuthorization() {\n    PolicyAuthorizationManager policy = ...;\n    LocalAuthorizationManager local = ...;\n    return AuthorizationManagers.allOf(policy, local);\n}\n```", "```java\nhttp\n       .authorizeHttpRequests((authorize) -> authorize.anyRequest().access(requestAuthorization))\n// ...\n```", "```java\n@Bean\nAuthorizationManager<RequestAuthorizationContext> requestAuthorization() {\n    PolicyAuthorizationManager policy = ...;\n    LocalAuthorizationManager local = ...;\n    return AuthorizationManagers.anyOf(policy, local);\n}\n```", "```java\nhttp\n       .authorizeHttpRequests((authorize) -> authorize.anyRequest().access(requestAuthorization))\n// ...\n```", "```java\npublic final class AnyRequestAuthenticatedAuthorizationManagerAdapter implements AuthorizationManager<RequestAuthorizationContext> {\n    private final SecurityMetadataSource metadata;\n    private final AccessDecisionVoter voter;\n    public PreAuthorizeAuthorizationManagerAdapter(SecurityExpressionHandler expressionHandler) {\n       Map<RequestMatcher, List<ConfigAttribute>> requestMap = Collections.singletonMap(\n             AnyRequestMatcher.INSTANCE, Collections.singletonList(new SecurityConfig(\"authenticated\")));\n       this.metadata = new DefaultFilterInvocationSecurityMetadataSource(requestMap);\n       WebExpressionVoter voter = new WebExpressionVoter();\n       voter.setExpressionHandler(expressionHandler);\n       this.voter = voter;\n    }\n    public AuthorizationDecision check(Supplier<Authentication> authentication, RequestAuthorizationContext context) {\n       List<ConfigAttribute> attributes = this.metadata.getAttributes(context);\n       int decision = this.voter.vote(authentication.get(), invocation, attributes);\n       if (decision == ACCESS_GRANTED) {\n          return new AuthorizationDecision(true);\n       }\n       if (decision == ACCESS_DENIED) {\n          return new AuthorizationDecision(false);\n       }\n       return null; // abstain\n    }\n}\n```", "```java\n@Bean\npublic SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n    http\n          // ...\n          .oauth2Login(oauth2Login -> oauth2Login\n                .userInfoEndpoint(userInfo -> userInfo\n                      .userAuthoritiesMapper(grantedAuthoritiesMapper())\n                )\n          );\n    return http.build();\n}\nprivate GrantedAuthoritiesMapper grantedAuthoritiesMapper() {\n    return authorities -> {\n       Set<GrantedAuthority> mappedAuthorities = new HashSet<>();\n       authorities.forEach(authority -> {\n          GrantedAuthority mappedAuthority;\n          if (authority instanceof OidcUserAuthority) {\n             OidcUserAuthority userAuthority = (OidcUserAuthority) authority;\n             mappedAuthority = new OidcUserAuthority(\n                   \"OIDC_USER\", userAuthority.getIdToken(), userAuthority.getUserInfo());\n          } else if (authority instanceof OAuth2UserAuthority) {\n             OAuth2UserAuthority userAuthority = (OAuth2UserAuthority) authority;\n             mappedAuthority = new OAuth2UserAuthority(\n                   \"OAUTH2_USER\", userAuthority.getAttributes());\n          } else {\n             mappedAuthority = authority;\n          }\n          mappedAuthorities.add(mappedAuthority);\n       });\n       return mappedAuthorities;\n    };\n}\n```", "```java\n@Bean\nSaml2AuthenticationRequestFactory authenticationRequestFactory() {\n    OpenSaml4AuthenticationRequestFactory factory = new OpenSaml4AuthenticationRequestFactory();\n    factory.setProtocolBinding(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\")\n    return factory;\n}\n```", "```java\n@Bean\nSaml2AuthenticationRequestResolver authenticationRequestResolver() {\n    OpenSaml4AuthenticationRequestResolver reaolver = new OpenSaml4AuthenticationRequestResolver(registrations);\n    resolver.setAuthnRequestCustomizer((context) -> context.getAuthnRequest()\n          .setProtocolBinding(\"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"));\n    return resolver;\n}\n```", "```java\nnew Saml2AuthenticationToken(saml2Response, registration)\n```", "```java\n//build.gradle\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '2.7.18'\n    id 'io.spring.dependency-management' version '1.1.4'\n}\n...\ndependencies {\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\n    // JPA / ORM / Hibernate:\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-validation'\n    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'\n    // H2 db\n    implementation 'com.h2database:h2'\n    // webjars\n    implementation 'org.webjars:webjars-locator:0.50'\n    implementation 'org.webjars:bootstrap:5.3.2'\n    //Tests\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n```", "```java\n//build.gradle\nplugins {\n    id 'java'\n    id 'org.springframework.boot' version '3.2.1\n    id 'io.spring.dependency-management' version '1.1.4'\n}\n...\ndependencies {\n    developmentOnly 'org.springframework.boot:spring-boot-devtools'\n    // JPA / ORM / Hibernate:\n    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'\n    implementation 'org.springframework.boot:spring-boot-starter-security'\n    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'\n    implementation 'org.springframework.boot:spring-boot-starter-web'\n    implementation 'org.springframework.boot:spring-boot-starter-validation'\n    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'\n    // H2 db\n    implementation 'com.h2database:h2'\n    // webjars\n    implementation 'org.webjars:webjars-locator:0.50'\n    implementation 'org.webjars:bootstrap:5.3.2'\n    //Tests\n    testImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@EnableWebSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n    @Description(\"Configure HTTP Security\")\n    @Override\n    protected void configure(final HttpSecurity http) throws Exception {\n       http.authorizeRequests(authorizeRequests -> authorizeRequests\n             .antMatchers(\"/webjars/**\").permitAll()\n             .antMatchers(\"/css/**\").permitAll()\n             .antMatchers(\"/favicon.ico\").permitAll()\n             .antMatchers(\"/actuator/**\").permitAll()\n             .antMatchers(\"/signup/*\").permitAll()\n             .antMatchers(\"/\").permitAll()\n             .antMatchers(\"/login/*\").permitAll()\n             .antMatchers(\"/logout/*\").permitAll()\n             .antMatchers(\"/admin/h2/**\").access(\"isFullyAuthenticated() and hasRole('ADMIN')\")\n             .antMatchers(\"/admin/*\").hasRole(\"ADMIN\")\n             .antMatchers(\"/events/\").hasRole(\"ADMIN\")\n             .antMatchers(\"/**\").hasRole(\"USER\")\n       );\n       // The default AccessDeniedException\n       http.exceptionHandling(handler -> handler\n             .accessDeniedPage(\"/errors/403\")\n       );\n       // Login Configuration\n       http.formLogin(form -> form\n             .loginPage(\"/login/form\")\n             .loginProcessingUrl(\"/login\")\n             .failureUrl(\"/login/form?error\")\n             .usernameParameter(\"username\") // redundant\n             .passwordParameter(\"password\") // redundant\n             .defaultSuccessUrl(\"/default\", true)\n             .permitAll()\n       );\n       // Logout Configuration\n       http.logout(form -> form\n             .logoutUrl(\"/logout\")\n             .logoutSuccessUrl(\"/login/form?logout\")\n             .permitAll()\n       );\n       // Allow anonymous users\n       http.anonymous();\n       // CSRF is enabled by default, with Java Config\n       //NOSONAR\n       http.csrf().disable();\n       // Cross Origin Resource Sharing\n       http.cors().disable();\n       // HTTP Security Headers\n       http.headers().disable();\n       // Enable <frameset> in order to use H2 web console\n       http.headers().frameOptions().disable();\n    }\n...\n}\n```", "```java\n//src/main/java/com/packtpub/springsecurity/configuration/SecurityConfig.java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n    @Bean\n    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n       http.authorizeHttpRequests( authz -> authz\n                   .requestMatchers(\"/webjars/**\").permitAll()\n                   .requestMatchers(\"/css/**\").permitAll()\n                   .requestMatchers(\"/favicon.ico\").permitAll()\n                   .requestMatchers(\"/\").permitAll()\n                   .requestMatchers(\"/login/*\").permitAll()\n                   .requestMatchers(\"/logout\").permitAll()\n                   .requestMatchers(\"/signup/*\").permitAll()\n                   .requestMatchers(\"/errors/**\").permitAll()\n                   // H2 console\n                   .requestMatchers(\"/admin/h2/**\")\n                   .access(new WebExpressionAuthorizationManager(\"isFullyAuthenticated() and hasRole('ADMIN')\"))\n                   .requestMatchers(\"/events/\").hasRole(\"ADMIN\")\n                   .requestMatchers(\"/**\").hasRole(\"USER\"))\n             .exceptionHandling(exceptions -> exceptions\n                   .accessDeniedPage(\"/errors/403\"))\n             .formLogin(form -> form\n                   .loginPage(\"/login/form\")\n                   .loginProcessingUrl(\"/login\")\n                   .failureUrl(\"/login/form?error\")\n                   .usernameParameter(\"username\")\n                   .passwordParameter(\"password\")\n                   .defaultSuccessUrl(\"/default\", true)\n                   .permitAll())\n             .logout(form -> form\n                   .logoutUrl(\"/logout\")\n                   .logoutSuccessUrl(\"/login/form?logout\")\n                   .permitAll())\n             // CSRF is enabled by default, with Java Config\n             .csrf(AbstractHttpConfigurer::disable);\n       // For H2 Console\n       http.headers(headers -> headers.frameOptions(FrameOptionsConfig::disable));\n       return http.build();\n    }\n...\n}\n```"]