- en: Authentication Using SAML, LDAP, and OAuth/OIDC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the authentication mechanisms—namely SAML,
    LDAP, and OAuth/OIDC—supported by Spring Security. This will be a fully hands-on
    coding chapter. We will build small applications, most of them starting from the
    base application that we built in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep
    Diving into Spring Security*.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal of this chapter is to make you comfortable with implementing the
    authentication mechanisms most commonly used across your organization, and also
    to showcase Spring Security module capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the authentication mechanisms has a project that you can see in the
    book's GitHub page. However, in the book, we will only cover important aspects
    of the sample code, to reduce clutter within the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Security Assertion Markup Language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight Directory Access Protocol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OAuth2 and OpenID Connect
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security Assertion Markup Language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Security Assertion Markup Language** (**SAML**), developed by the *Security
    Services Technical Committee of OASIS*, is an XML-based framework for communicating
    user authentication, entitlement and attribute information. SAML allows business
    entities to make assertions regarding the identity, attributes, and entitlements
    of a subject (an entity that is often a human user) to other entities, such as
    a partner company or another enterprise.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The module `application.SAML` is also:'
  prefs: []
  type: TYPE_NORMAL
- en: A set of XML-based protocol messages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of protocol message bindings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A set of profiles (utilizing all of the above)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Identity Provider** (**IdP**) is a system that creates, maintains, and manages
    identity information for principals (users, services, or systems), and provides
    principal authentication to other service providers (applications) within a federation
    or distributed network.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Service Provider** (**SP**) is any system that provides services, typically
    the services for which users seek authentication, including web or enterprise
    applications. A special type of service provider, the identity provider, administers
    identity information.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information on SAML, IdP, and SP, you can also refer to the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://xml.coverpages.org/saml.html](http://xml.coverpages.org/saml.html)'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider)](http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider))'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://searchsecurity.techtarget.com/definition/SAML](https://searchsecurity.techtarget.com/definition/SAML)'
  prefs: []
  type: TYPE_NORMAL
- en: Spring Security has a top-level project named Spring Security SAML. It is considered
    an extension providing Spring applications to integrate with a variety of authentication
    and federation mechanisms that supports SAML 2.0\. This extension also supports
    multiple SAML 2.0, profiles as well as IdP and SP initiated SSO.
  prefs: []
  type: TYPE_NORMAL
- en: There are a number of SAML 2.0 compliant products (IdP mode), such as **Okta**,
    **Ping Federate**, and **ADFS**, that can be integrated into your application
    quite easily using this Spring Security extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Going into detail on SAML is out of the scope of this book. However, we will
    try to integrate a Spring Boot application that we built earlier, in [Chapter
    2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into Spring Security*,
    to tweak and convert it into authentication with an SAML 2.0 product: Okta. In
    the world of SSO, Okta is a well-known product, allowing applications to easily
    achieve SSO. In the following example, we will also be using the `spring-security-saml-dsl` project,
    a Spring Security extension project containing Okta DSL. The use of this eases
    Spring Security and Okta integration quite significantly. We will also run you
    through configurations that you will have to use in the Okta platform, to make
    sure that the example is self-contained and complete. This does not mean that
    you have to use Okta as the SSO platform for your application; instead, it showcases
    the Spring Security SAML module, using Okta as an example.'
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned previously, we will copy the Spring Boot project that we created
    in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into
    Spring Security,* as a head start for this example. Now, let's go ahead and look
    at how we can set up the SSO provider (Okta) first; in subsequent sections, we
    will look at how we can tweak our copied Spring Boot application to achieve SAML
    2.0 authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an SSO provider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As detailed, we will be using Okta as our SSO provider to build our sample application,
    which covers Spring Security using SAML 2.0 as the authentication mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up an Okta user, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://developer.okta.com](https://developer.okta.com) and click on
    SIGN UP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the relevant details and click on GET STARTED.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Okta will send you an email with your Org Subdomain and Temporary Password.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Sign In button in the email, enter your Username (email) and Temporary
    Password, and log in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be presented with some more account-related information. Fill in the
    details and complete your account setup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now have an Okta account set up with one user (you) and no applications
    configured to do SSO.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To set up the Okta application, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to your account and click on the Admin button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the screen, click on the Add Applications shortcut link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Create New App button. Select Web as the platform, select the SAML
    2.0 radio button, and click on the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the App name field, enter your app name, keep the rest of the fields as they
    are, and click on the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Single sign on URL field, enter the URL as `https://localhost:8443/saml/SSO`.
    In the Audience URI field, enter the URI as `https://localhost:8443/saml/metadata`.
    Keep the rest of the fields as they are, and click on the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the radio button that says I'm an Okta customer adding an internal
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the checkbox that says, This is an internal app that we have created,
    and click on the Finish button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To assign an Okta application to a user, you need to follow the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to the dashboard and click on the Assign Applications shortcut link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the created application (in the Applications section) on the left,
    click on your username (on the People section) on the right, and click on the
    Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next page, click on the Confirm Assignments button, and you will be done
    assigning the application to a user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have now created the Okta application, and your user assignment is complete.
    Now, let's try modifying the application created earlier, so as to authenticate
    users using SAML 2.0, against the Okta application we created.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be changing two files: namely, `SpringSecuirtyConfig` (the Spring Security
    configuration file) and the Spring application properties file (`application.yml`).
    In the earlier application, instead of a YML (YAML) file, we used a properties
    file (`application.properties`). In this example, we will discard the `application.properties`
    file and will use the `application.yml` file for all of the setup. Let''s begin
    now.'
  prefs: []
  type: TYPE_NORMAL
- en: The pom.xml file setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Copy your previous project. Open the `pom.xml` file and add the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The application.yml file setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `application.yml` file in the `src/main/resources` folder with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In lines 13-17  (in the `spring` section), we have migrated the configuration
    data that we had in the `application.properties` file into a YML format. You can
    keep all the preceding configuration same apart from the configurations of `metadata-url`
    file. For this, you have to go back to the Okta application that you created and
    navigate to the Sign On tab. Now, click on the Identity Provider metadata link
    and copy the link. It will look similar to the one shown previously, with `metadata`
    at the end of the URL.
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Security configuration files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will change (or rather, configure) our Spring Security configuration
    files, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The file does not have to be modified in any way. It's good to go, through the
    all-important `configure` method. In `spring-security-saml-dsl-core`*,* the introduction
    of the `saml()` method makes coding very concise and easy. With this, you are
    almost done, and the final step is to create the keystore.
  prefs: []
  type: TYPE_NORMAL
- en: The resources folder setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to your project (in the `src/main/resources` folder). Create a folder
    named `saml` and open the Command Prompt in that location. Execute the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When prompted, give the required details and create the `keystore.jks` file
    within the `src/main/resources/saml` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Running and testing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Navigate to your project folder and execute the `spring-boot` command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a browser and navigate to `https://localhost:8443`. Please note the `https`
    and the port `8443` (because we have SSL enabled). If you don''t put `https` in
    your URL, you will get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/32f0d565-8822-427e-aa59-94cfdb1a78e2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 1: Browser response when HTTP is used'
  prefs: []
  type: TYPE_NORMAL
- en: The browser will show a page stating that Your connection is not secure. The
    message may vary, depending on the browser that you choose to open this URL. Just
    make sure that you accept the risks and move forward.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be navigated to the Okta URL, asking you to log in using your username/password,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5cbcd28e-98e5-4493-b215-6b50f319b8be.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2: Okta login page shown to the user'
  prefs: []
  type: TYPE_NORMAL
- en: Once it's done, you will be navigated back to the home page, showing what you
    have put in your `home.jsp` file. The next time you open the URL, you will be
    taken directly to the home page, and Okta will automatically sign you in.
  prefs: []
  type: TYPE_NORMAL
- en: This completes SAML authentication using Spring Security. You can see the full
    project by accessing the GitHub page and navigating to the `spring-boot-in-memory-saml2-authentication` project.
  prefs: []
  type: TYPE_NORMAL
- en: Lightweight Directory Access Protocol
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Lightweight Directory Access Protocol** (**LDAP**) is a directory service
    protocol that allows for connecting, searching, and modifying internet directories.
    Unfortunately, LDAP doesn''t support reactive bindings; this means that reactive
    programming is not possible (similar to JDBC) with it. The function of LDAP authentication
    is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dec705b0-20da-458d-90c8-b03d1bfc945f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3: LDAP authentication'
  prefs: []
  type: TYPE_NORMAL
- en: Similar to the previous example, we will clone/copy the previous project (any
    Spring Boot project will do; I am cloning the `spring-boot-in-memory-saml2-authentication` project).
    Again, similar to the previous project, we will modify a couple of files and add
    a few more files to the project. We will use the built-in Java-based LDAP server
    to validate the user credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Set up dependencies in the pom.xml file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open `pom.xml` and add the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Spring Security configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modify the `SpringSecurityConfiguration.java` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The first `configure` method is very similar to what we saw in the previous
    SAML example. We have just added certain matches and separated the roles. With
    these changes, it will still perform basic authentication.
  prefs: []
  type: TYPE_NORMAL
- en: The second `configure` method is where we have set up authentication using the
    LDAP server. The LDAP server stores user information in a directory-like format.
    This method details how to find the user by navigating through the directory structure.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP server setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to use Spring''s default LDAP server to store our users, and then
    use this as a user store against which we can authenticate the users in our application.
    The LDAP configuration is done in our `application.yml` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `ldap` section is self-explanatory—we are setting up the embedded LDAP server
    with various parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up users in the LDAP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the **LDAP Data Interchange Format** (**LDIF**) to set up
    our users on our LDAP server. The LDIF is a standard text-based representation
    for LDAP data, and changes to that data ([https://ldap.com/ldif-the-ldap-data-interchange-format/](https://ldap.com/ldif-the-ldap-data-interchange-format/)).
  prefs: []
  type: TYPE_NORMAL
- en: 'In our `application.yml` file, we have shown Spring where to look for our LDIF
    file. The LDIF file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are not many changes in any of the other files within the project. Just
    like you run any other `spring-boot` project, go to the project folder and execute
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Seeing the application in action on a browser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open a browser and enter `http://localhost:8080`. Enter the username/password
    as `tjohn/tjohn@password` (look for user setup in the LDIF file). You will be
    taken to `home.jsp`, where you will see a friendly welcome message, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1a0891d5-48c9-4be9-a798-8d04bb64cd13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4: Message shown in home.jsp page after successful login using LDAP'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth2 and OpenID Connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**OAuth** is an open standard/specification for achieving authorization. It
    works over HTTPS, and anyone can implement the specification. The specification
    works by validating access tokens, and then authorizes devices, APIs, servers,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: Two versions—namely OAuth 1.0 ([https://tools.ietf.org/html/rfc5849](https://tools.ietf.org/html/rfc5849))
    and OAuth 2.0 ([https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749))—exist.
    These versions are not compatible with each other and cannot work together. We
    will use version 2.0 and it will be referred to as OAuth 2.0, throughout this
    book.
  prefs: []
  type: TYPE_NORMAL
- en: SAML, released in 2005, is a good fit for the web browser (still). But with
    modern web and native applications (mobile devices), SAML required a serious overhaul,
    and that's when OAuth came in. **Single Page Applications** (**SPAs**) and native
    applications are different from traditional server-side web applications. SPAs
    do AJAX/XHR calls to the APIs that are exposed on the server and does many other
    operations on the client (browser). API development has also changed, from heavy
    SOAP-based web services using XML to lightweight REST over HTTP using JSON.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth also enables you, as a developer, to gain access to minimal user data
    without having to give away a user's password. It is mainly for accessing the
    APIs (REST) exposed by an application, and is done by delegating the authorization
    function.
  prefs: []
  type: TYPE_NORMAL
- en: OAuth supports a variety of application types and decouples authentication from
    authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In simple terms, this is how OAuth works:'
  prefs: []
  type: TYPE_NORMAL
- en: The app that wants to access resources requests the user to grant authorization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the user authorizes it, the app is given proof for this agreement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using this proof, the app goes to the actual server with the APIs and gets a
    token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using this token, the app can now ask for resources (APIs) to which the user
    has given access, while giving the proof.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The preceding steps are depicted in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/03b56df2-a7e5-46f9-8dcb-5967110dc4f1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5: Functionality of OAuth'
  prefs: []
  type: TYPE_NORMAL
- en: OAuth was tweaked in such a way by using an access token, apps can get user
    information in the form of an API. Facebook Connect (an SSO application that allows
    users to interact with other web applications using Facebook credentials) used
    this as a mechanism to expose an endpoint (`http(s)://<domain>/me`) that would
    return minimal user information. This was never clearly there in OAuth specification,
    and this provoked **Open ID Connect** (**OIDC**), which combined the best parts
    of OAuth2, Facebook Connect, and SAML 2.0\. OIDC brought in a new ID token (`id_token`),
    and also a `UserInfo` endpoint that will provide minimal user attributes. Many
    of the complexities that SAML had, and many of the shortcomings of OAuth2 were
    addressed by OIDC.
  prefs: []
  type: TYPE_NORMAL
- en: Going deep, into OAuth and OIDC is not in the scope of this book. I am sure
    that I have given adequate information, using which you can navigate through the
    rest of this section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The example code that we are going to create here has a different approach from
    our earlier samples. Here, we will use *Spring Initializr* ([http://start.spring.io/](http://start.spring.io/))
    to create the base project, and then we will inject the appropriate changes to
    make it log in with a provider, namely, Google.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrap Spring project using Spring Initializr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visit [http://start.spring.io/](http://start.spring.io/) and enter the following
    details. Make sure that you select the right dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af792e37-c364-4482-aad1-c53e326d543a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 6: Spring Initializr setup'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Generate Project button and download the ZIP file to a folder
    of your choice. Execute the `unzip` command as follows. I am using Macintosh for
    running all of my sample applications, so I will be using commands, if any, suitable
    for this platform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Inclusion of OAuth libraries in pom.xml
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Modify your project''s `pom.xml` file by adding the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Setting up provider details in application.properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you run the application (`./mvnw spring-boot:run`) and then navigate your
    browser to `http://localhost:8080`, you will see a default login page, as follows.
    The entire magic behind this page is done for you by Spring Boot and Spring Security:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47a39749-7010-4d48-bb90-2f9134f9b210.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7: Default Spring Boot + Spring Security project created using Spring
    Initializr'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `application.properties` file (`src/main/resources`) and add the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we declare two properties for each provider. We will be implementing
    the Google provider, but you can add any number of providers. Just adding these
    properties will create more magic, and your login page will suddenly change to
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9c49c6-c86f-4620-8977-6a45458bdd47.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8: OAuth default login page when application.properties file is modified'
  prefs: []
  type: TYPE_NORMAL
- en: 'The providers (links) shown in the preceding screenshot are according to the
    configurations seen in the `application.properties` file. It just looks for two
    properties, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Provider setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will be using Google as our provider in this example. Navigate to [https://console.developers.google.com/](https://console.developers.google.com/)
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a project. Select an existing project or create a new project, as shown
    in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/05af3299-335b-4037-a1d3-ae4f1a39a803.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9: Project creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the credentials. Select the newly created project (in the following
    screenshot, it is shown next to the Google APIs logo) and click on the Credentials
    link in the side menu, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/437a6fcd-1fc2-4ab2-91db-a6ddc5407ed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10: Credential creation - step 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Create credentials drop-down menu, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5021c119-000c-4880-920e-5a9a60a9f0c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11: Credential creation - step 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the drop-down menu, click on OAuth client ID. This will navigate you to
    the page shown in the following screenshot. Please note that the Application type
    radio group will be disabled at this stage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd8267bf-d1d0-44c1-91ae-ea081c71d5d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12: Credential creation - step 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Configure consent screen. You will be navigated to the following page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4854c9b4-75a4-4ce3-82e7-c9240c51ecca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13: Credential creation - step 4'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the relevant details (leave the optional fields out while filling in the
    form), as shown in the preceding figure, and click on the Save button. You will
    be navigated back to the page shown in the following figure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, the Application type radio group will be enabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/40295f09-c3ac-4800-bb37-2d5e26176bed.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14: Credential Creation - step 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Application type as Web application, and enter the relevant details,
    as shown in the preceding figure. Click on the Create button, and you will be
    shown the following popup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/daaf459d-a618-4afa-a0d4-474041312c09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15: Credential creation - step 6'
  prefs: []
  type: TYPE_NORMAL
- en: You now have your client ID and client secret from Google. Copy and paste these
    values into the `application.properties` file in the correct place.
  prefs: []
  type: TYPE_NORMAL
- en: Default application change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To be in line with the previous example, we will make changes in the default
    application that was generated, bringing in the same components seen in the previous
    application. This will help you to understand the application in detail.
  prefs: []
  type: TYPE_NORMAL
- en: The HomeController class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy the home controller class (`HomeController.java`) that we created in our
    previous example to a new package. Change the welcome message to whatever you
    want.
  prefs: []
  type: TYPE_NORMAL
- en: The home.jsp file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Copy the whole `webapp` folder from the previous example, as is, into this project.
    Change the page heading to something different so that it is clear while running
    the application that it is indeed the sample application.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot main application class change
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Make your application class extend the `SpringBootServletInitializer` class.
    Add a new annotation, as follows, letting your Spring Boot application know that
    a new controller, `HomeController`, is a component that it has to scan:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run your application by executing the following default command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'If all is well, you should be able to click on the Google link, and it should
    navigate you to the Google''s login page. After successfully logging in, you will
    be redirected to the `home.jsp` file, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6236594f-359d-4c81-b716-7c6d1351b929.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16: Login using Google as OAuth provider'
  prefs: []
  type: TYPE_NORMAL
- en: The support for OAuth doesn't end here, but we have to stop, as the book cannot
    delve deeply into the many aspects that the framework provides.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw authentication mechanisms commonly used in the enterprises,
    namely SAML, LDAP, and OAuth/OIDC, supported by Spring Security through hands-on
    coding examples. We used the sample application built as part of [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml),
    *Deep Diving into Spring Security*, as a basis for explaining the functionality
    and implementation of other authentication mechanisms.
  prefs: []
  type: TYPE_NORMAL
- en: However, we intentionally didn't reactive programming in our coding examples.
    This chapter was aimed at making you understand the core concepts of each of the
    authentication mechanisms, by making use of the familiar Spring Web MVC application
    framework. We will cover reactive programming in more detail in [Chapter 5](df488f9c-24a7-4d0f-ac82-1d126a391fcc.xhtml), *Integrating
    with Spring WebFlux*.
  prefs: []
  type: TYPE_NORMAL
