- en: Authentication Using SAML, LDAP, and OAuth/OIDC
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SAML、LDAP 和 OAuth/OIDC 进行身份验证
- en: In this chapter, we will look at the authentication mechanisms—namely SAML,
    LDAP, and OAuth/OIDC—supported by Spring Security. This will be a fully hands-on
    coding chapter. We will build small applications, most of them starting from the
    base application that we built in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep
    Diving into Spring Security*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 Spring Security 支持的身份验证机制——即 SAML、LDAP 和 OAuth/OIDC。这将是一个完全实战的编码章节。我们将构建小型应用程序，其中大多数应用程序都是从我们在第
    2 章*深入 Spring Security*中构建的基本应用程序开始的。
- en: The main goal of this chapter is to make you comfortable with implementing the
    authentication mechanisms most commonly used across your organization, and also
    to showcase Spring Security module capabilities.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是让您熟悉在您的组织中实现最常用的身份验证机制，并展示 Spring Security 模块的功能。
- en: Each of the authentication mechanisms has a project that you can see in the
    book's GitHub page. However, in the book, we will only cover important aspects
    of the sample code, to reduce clutter within the chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每个身份验证机制都有一个您可以在本书的 GitHub 页面上看到的项目。然而，在本书中，我们只会涵盖示例代码的重要方面，以减少章节中的杂乱。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Security Assertion Markup Language
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全断言标记语言
- en: Lightweight Directory Access Protocol
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轻量级目录访问协议
- en: OAuth2 and OpenID Connect
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth2 和 OpenID Connect
- en: Security Assertion Markup Language
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全断言标记语言
- en: '**Security Assertion Markup Language** (**SAML**), developed by the *Security
    Services Technical Committee of OASIS*, is an XML-based framework for communicating
    user authentication, entitlement and attribute information. SAML allows business
    entities to make assertions regarding the identity, attributes, and entitlements
    of a subject (an entity that is often a human user) to other entities, such as
    a partner company or another enterprise.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全断言标记语言**（**SAML**），由 OASIS 的 *安全服务技术委员会* 开发，是一个基于 XML 的框架，用于通信用户身份验证、权限和属性信息。SAML
    允许商业实体对其主体的身份、属性和权限（通常是人类用户）对其他实体（如合作伙伴公司或另一家企业）做出断言。'
- en: 'The module `application.SAML` is also:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模块 `application.SAML` 同样支持：
- en: A set of XML-based protocol messages
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组基于 XML 的协议消息
- en: A set of protocol message bindings
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组协议消息绑定
- en: A set of profiles (utilizing all of the above)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组配置文件（利用上述所有内容）
- en: '**Identity Provider** (**IdP**) is a system that creates, maintains, and manages
    identity information for principals (users, services, or systems), and provides
    principal authentication to other service providers (applications) within a federation
    or distributed network.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**身份提供者**（**IdP**）是一个创建、维护和管理主体（用户、服务或系统）身份信息的系统，并为联合或分布式网络中的其他服务提供商（应用程序）提供主体身份验证。'
- en: '**Service Provider** (**SP**) is any system that provides services, typically
    the services for which users seek authentication, including web or enterprise
    applications. A special type of service provider, the identity provider, administers
    identity information.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务提供者**（**SP**）是任何提供服务的系统，通常是用户寻求身份验证的服务，包括网页或企业应用程序。一种特殊类型的服务提供者，即身份提供者，管理身份信息。'
- en: 'For more information on SAML, IdP, and SP, you can also refer to the following
    links:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如需了解更多关于 SAML、IdP 和 SP 的信息，您还可以参考以下链接：
- en: '[http://xml.coverpages.org/saml.html](http://xml.coverpages.org/saml.html)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://xml.coverpages.org/saml.html](http://xml.coverpages.org/saml.html)'
- en: '[http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider)](http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider))'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider)](http://kb.mit.edu/confluence/display/glossary/IdP+(Identity+Provider))'
- en: '[https://searchsecurity.techtarget.com/definition/SAML](https://searchsecurity.techtarget.com/definition/SAML)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://searchsecurity.techtarget.com/definition/SAML](https://searchsecurity.techtarget.com/definition/SAML)'
- en: Spring Security has a top-level project named Spring Security SAML. It is considered
    an extension providing Spring applications to integrate with a variety of authentication
    and federation mechanisms that supports SAML 2.0\. This extension also supports
    multiple SAML 2.0, profiles as well as IdP and SP initiated SSO.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Security 有一个名为 Spring Security SAML 的顶级项目。它被认为是一个扩展，为 Spring 应用程序提供与支持
    SAML 2.0 的各种身份验证和联合机制集成的功能。此扩展还支持多个 SAML 2.0 配置文件以及由 IdP 和 SP 启动的 SSO。
- en: There are a number of SAML 2.0 compliant products (IdP mode), such as **Okta**,
    **Ping Federate**, and **ADFS**, that can be integrated into your application
    quite easily using this Spring Security extension.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多符合SAML 2.0标准的产品（IdP模式），如**Okta**、**Ping Federate**和**ADFS**，可以很容易地通过这个Spring
    Security扩展集成到您的应用程序中。
- en: 'Going into detail on SAML is out of the scope of this book. However, we will
    try to integrate a Spring Boot application that we built earlier, in [Chapter
    2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into Spring Security*,
    to tweak and convert it into authentication with an SAML 2.0 product: Okta. In
    the world of SSO, Okta is a well-known product, allowing applications to easily
    achieve SSO. In the following example, we will also be using the `spring-security-saml-dsl` project,
    a Spring Security extension project containing Okta DSL. The use of this eases
    Spring Security and Okta integration quite significantly. We will also run you
    through configurations that you will have to use in the Okta platform, to make
    sure that the example is self-contained and complete. This does not mean that
    you have to use Okta as the SSO platform for your application; instead, it showcases
    the Spring Security SAML module, using Okta as an example.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中详细讲解SAML超出了范围。然而，我们将尝试将我们在[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)中构建的Spring
    Boot应用程序集成进来，*深入探索Spring Security*，对其进行调整并转换为使用SAML 2.0产品：Okta进行认证。在SSO的世界里，Okta是一个知名的产品，它允许应用程序轻松实现SSO。在下面的示例中，我们还将使用`spring-security-saml-dsl`项目，这是一个包含Okta
    DSL的Spring Security扩展项目。使用这个项目可以显著简化Spring Security和Okta的集成。我们还将向您展示您需要在Okta平台上使用的配置，以确保示例是自包含和完整的。这并不意味着您必须将Okta作为您应用程序的SSO平台；相反，它展示了使用Okta作为示例的Spring
    Security SAML模块。
- en: As mentioned previously, we will copy the Spring Boot project that we created
    in [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml), *Deep Diving into
    Spring Security,* as a head start for this example. Now, let's go ahead and look
    at how we can set up the SSO provider (Okta) first; in subsequent sections, we
    will look at how we can tweak our copied Spring Boot application to achieve SAML
    2.0 authentication.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将复制我们在[第2章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)中创建的Spring Boot项目，*深入探索Spring
    Security*，作为本示例的起点。现在，让我们先看看如何设置SSO提供商（Okta）；在随后的章节中，我们将探讨如何调整我们复制的Spring Boot应用程序以实现SAML
    2.0认证。
- en: Setting up an SSO provider
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置SSO提供商
- en: As detailed, we will be using Okta as our SSO provider to build our sample application,
    which covers Spring Security using SAML 2.0 as the authentication mechanism.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将使用Okta作为我们的SSO提供商来构建我们的示例应用程序，该应用程序使用SAML 2.0作为认证机制。
- en: 'To set up an Okta user, perform the following steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Okta用户，请执行以下步骤：
- en: Go to [https://developer.okta.com](https://developer.okta.com) and click on
    SIGN UP.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往[https://developer.okta.com](https://developer.okta.com)并点击“注册”。
- en: Enter the relevant details and click on GET STARTED.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入相关详细信息并点击“开始”。
- en: Okta will send you an email with your Org Subdomain and Temporary Password.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Okta会向您发送一封包含您的组织子域和临时密码的电子邮件。
- en: Click on the Sign In button in the email, enter your Username (email) and Temporary
    Password, and log in.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在电子邮件中点击“登录”按钮，输入您的用户名（电子邮件）和临时密码，然后登录。
- en: You will be presented with some more account-related information. Fill in the
    details and complete your account setup.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一些与账户相关的更多信息。填写详细信息并完成账户设置。
- en: You now have an Okta account set up with one user (you) and no applications
    configured to do SSO.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在已设置了一个Okta账户，包含一个用户（您自己）且没有配置任何应用程序进行SSO。
- en: 'To set up the Okta application, perform the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置Okta应用程序，请执行以下步骤：
- en: Log in to your account and click on the Admin button.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录您的账户并点击“管理员”按钮。
- en: On the screen, click on the Add Applications shortcut link.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上，点击“添加应用程序”快捷链接。
- en: Click on the Create New App button. Select Web as the platform, select the SAML
    2.0 radio button, and click on the Create button.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“创建新应用”按钮。选择Web作为平台，选择SAML 2.0单选按钮，然后点击“创建”按钮。
- en: In the App name field, enter your app name, keep the rest of the fields as they
    are, and click on the Next button.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“应用名称”字段中输入您的应用名称，保持其他字段不变，然后点击“下一步”按钮。
- en: In the Single sign on URL field, enter the URL as `https://localhost:8443/saml/SSO`.
    In the Audience URI field, enter the URI as `https://localhost:8443/saml/metadata`.
    Keep the rest of the fields as they are, and click on the Next button.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单点登录 URL 字段中，输入 URL 为 `https://localhost:8443/saml/SSO`。在受众 URI 字段中，输入 URI
    为 `https://localhost:8443/saml/metadata`。保持其他字段不变，然后点击下一步按钮。
- en: Click on the radio button that says I'm an Okta customer adding an internal
    app.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击单选按钮，表示“我是一个添加内部应用程序的 Okta 客户”。
- en: Select the checkbox that says, This is an internal app that we have created,
    and click on the Finish button.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择复选框，表示“这是一个我们创建的内部应用程序”，然后点击完成按钮。
- en: 'To assign an Okta application to a user, you need to follow the following steps:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Okta 应用程序分配给用户，您需要遵循以下步骤：
- en: Navigate to the dashboard and click on the Assign Applications shortcut link.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到仪表板并点击分配应用程序快捷链接。
- en: Click on the created application (in the Applications section) on the left,
    click on your username (on the People section) on the right, and click on the
    Next button.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧点击创建的应用程序（在应用程序部分），在右侧点击您的用户名（在人员部分），然后点击下一步按钮。
- en: On the next page, click on the Confirm Assignments button, and you will be done
    assigning the application to a user.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页，点击确认分配按钮，您就完成了应用程序的分配。
- en: You have now created the Okta application, and your user assignment is complete.
    Now, let's try modifying the application created earlier, so as to authenticate
    users using SAML 2.0, against the Okta application we created.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已创建了 Okta 应用程序，并且用户分配已完成。现在，让我们尝试修改之前创建的应用程序，以便使用 SAML 2.0 对 Okta 应用程序进行用户认证。
- en: Setting up the project
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: 'We will be changing two files: namely, `SpringSecuirtyConfig` (the Spring Security
    configuration file) and the Spring application properties file (`application.yml`).
    In the earlier application, instead of a YML (YAML) file, we used a properties
    file (`application.properties`). In this example, we will discard the `application.properties`
    file and will use the `application.yml` file for all of the setup. Let''s begin
    now.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更改两个文件：即 `SpringSecuirtyConfig`（Spring 安全配置文件）和 Spring 应用程序属性文件（`application.yml`）。在先前的应用程序中，我们使用的是
    YML（YAML）文件，而不是属性文件（`application.properties`）。在这个例子中，我们将丢弃 `application.properties`
    文件，并使用 `application.yml` 文件进行所有设置。现在让我们开始吧。
- en: The pom.xml file setup
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`pom.xml` 文件设置'
- en: 'Copy your previous project. Open the `pom.xml` file and add the following dependencies:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 复制您之前的工程。打开 `pom.xml` 文件并添加以下依赖项：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The application.yml file setup
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`application.yml` 文件设置'
- en: 'Create a new `application.yml` file in the `src/main/resources` folder with
    the following content:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `src/main/resources` 文件夹中创建一个新的 `application.yml` 文件，内容如下：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In lines 13-17  (in the `spring` section), we have migrated the configuration
    data that we had in the `application.properties` file into a YML format. You can
    keep all the preceding configuration same apart from the configurations of `metadata-url`
    file. For this, you have to go back to the Okta application that you created and
    navigate to the Sign On tab. Now, click on the Identity Provider metadata link
    and copy the link. It will look similar to the one shown previously, with `metadata`
    at the end of the URL.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 13-17 行（在 `spring` 部分），我们将之前在 `application.properties` 文件中的配置数据迁移到了 YML 格式。您可以保留所有之前的配置，除了
    `metadata-url` 文件的配置。为此，您需要回到您创建的 Okta 应用程序，导航到登录标签页。现在，点击身份提供者元数据链接并复制链接。它看起来与之前显示的类似，URL
    的末尾有 `metadata`。
- en: The Spring Security configuration files
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 安全配置文件
- en: 'Now, we will change (or rather, configure) our Spring Security configuration
    files, as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更改（或者说是配置）我们的 Spring Security 配置文件，如下所示：
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The file does not have to be modified in any way. It's good to go, through the
    all-important `configure` method. In `spring-security-saml-dsl-core`*,* the introduction
    of the `saml()` method makes coding very concise and easy. With this, you are
    almost done, and the final step is to create the keystore.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件无需进行任何修改。通过至关重要的 `configure` 方法即可。在 `spring-security-saml-dsl-core`* 中，引入
    `saml()` 方法使编码非常简洁且易于实现。有了这个，您几乎就完成了，最后一步是创建密钥库。
- en: The resources folder setup
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源文件夹设置
- en: 'Navigate to your project (in the `src/main/resources` folder). Create a folder
    named `saml` and open the Command Prompt in that location. Execute the following
    command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的项目（在 `src/main/resources` 文件夹中）。创建一个名为 `saml` 的文件夹，并在该位置打开命令提示符。执行以下命令：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When prompted, give the required details and create the `keystore.jks` file
    within the `src/main/resources/saml` folder.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当提示时，提供所需的详细信息，并在 `src/main/resources/saml` 文件夹内创建 `keystore.jks` 文件。
- en: Running and testing the application
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行和测试应用程序
- en: 'Navigate to your project folder and execute the `spring-boot` command, as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到您的项目文件夹并执行 `spring-boot` 命令，如下所示：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open a browser and navigate to `https://localhost:8443`. Please note the `https`
    and the port `8443` (because we have SSL enabled). If you don''t put `https` in
    your URL, you will get the following response:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并导航到 `https://localhost:8443`。请注意 `https` 和端口号 `8443`（因为我们已启用 SSL）。如果您在
    URL 中不包含 `https`，您将得到以下响应：
- en: '![](img/32f0d565-8822-427e-aa59-94cfdb1a78e2.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/32f0d565-8822-427e-aa59-94cfdb1a78e2.png)'
- en: 'Figure 1: Browser response when HTTP is used'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1：使用 HTTP 时的浏览器响应
- en: The browser will show a page stating that Your connection is not secure. The
    message may vary, depending on the browser that you choose to open this URL. Just
    make sure that you accept the risks and move forward.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将显示一个页面，说明您的连接不安全。消息可能因您选择的浏览器而异。只需确保您接受风险并继续即可。
- en: 'You will be navigated to the Okta URL, asking you to log in using your username/password,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被导航到 Okta 网址，要求您使用用户名/密码登录，如下截图所示：
- en: '![](img/5cbcd28e-98e5-4493-b215-6b50f319b8be.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5cbcd28e-98e5-4493-b215-6b50f319b8be.png)'
- en: 'Figure 2: Okta login page shown to the user'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2：用户看到的 Okta 登录页面
- en: Once it's done, you will be navigated back to the home page, showing what you
    have put in your `home.jsp` file. The next time you open the URL, you will be
    taken directly to the home page, and Okta will automatically sign you in.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您将被导航回主页，显示您在 `home.jsp` 文件中输入的内容。下次您打开 URL 时，您将被直接带到主页，Okta 将自动为您登录。
- en: This completes SAML authentication using Spring Security. You can see the full
    project by accessing the GitHub page and navigating to the `spring-boot-in-memory-saml2-authentication` project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了使用 Spring Security 的 SAML 认证。您可以通过访问 GitHub 页面并导航到 `spring-boot-in-memory-saml2-authentication`
    项目来查看完整项目。
- en: Lightweight Directory Access Protocol
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻量级目录访问协议
- en: '**Lightweight Directory Access Protocol** (**LDAP**) is a directory service
    protocol that allows for connecting, searching, and modifying internet directories.
    Unfortunately, LDAP doesn''t support reactive bindings; this means that reactive
    programming is not possible (similar to JDBC) with it. The function of LDAP authentication
    is shown in the following diagram:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**轻量级目录访问协议**（**LDAP**）是一种目录服务协议，允许连接、搜索和修改互联网目录。不幸的是，LDAP 不支持反应式绑定；这意味着无法使用它进行反应式编程（类似于
    JDBC）。LDAP 认证的功能如下图中所示：'
- en: '![](img/dec705b0-20da-458d-90c8-b03d1bfc945f.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dec705b0-20da-458d-90c8-b03d1bfc945f.png)'
- en: 'Figure 3: LDAP authentication'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3：LDAP 认证
- en: Similar to the previous example, we will clone/copy the previous project (any
    Spring Boot project will do; I am cloning the `spring-boot-in-memory-saml2-authentication` project).
    Again, similar to the previous project, we will modify a couple of files and add
    a few more files to the project. We will use the built-in Java-based LDAP server
    to validate the user credentials.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的示例类似，我们将克隆/复制前面的项目（任何 Spring Boot 项目都可以；我在克隆 `spring-boot-in-memory-saml2-authentication`
    项目）。同样，与前面的项目类似，我们将修改几个文件并向项目中添加更多文件。我们将使用内置的基于 Java 的 LDAP 服务器来验证用户凭据。
- en: Set up dependencies in the pom.xml file
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 pom.xml 文件中设置依赖项
- en: 'Open `pom.xml` and add the following dependencies:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `pom.xml` 并添加以下依赖项：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Spring Security configuration
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security 配置
- en: 'Modify the `SpringSecurityConfiguration.java` file, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `SpringSecurityConfiguration.java` 文件，如下所示：
- en: '[PRE6]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first `configure` method is very similar to what we saw in the previous
    SAML example. We have just added certain matches and separated the roles. With
    these changes, it will still perform basic authentication.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个 `configure` 方法与我们在前面的 SAML 示例中看到的方法非常相似。我们只是添加了一些匹配项并分离了角色。这些更改后，它仍将执行基本认证。
- en: The second `configure` method is where we have set up authentication using the
    LDAP server. The LDAP server stores user information in a directory-like format.
    This method details how to find the user by navigating through the directory structure.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个 `configure` 方法是我们使用 LDAP 服务器设置认证的地方。LDAP 服务器以类似目录的格式存储用户信息。此方法详细说明了如何通过遍历目录结构来查找用户。
- en: LDAP server setup
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LDAP 服务器设置
- en: 'We are going to use Spring''s default LDAP server to store our users, and then
    use this as a user store against which we can authenticate the users in our application.
    The LDAP configuration is done in our `application.yml` file, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Spring的默认LDAP服务器来存储我们的用户，然后将其用作应用程序中用户认证的用户存储。LDAP配置在 `application.yml`
    文件中完成，如下所示：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `ldap` section is self-explanatory—we are setting up the embedded LDAP server
    with various parameters.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`ldap`部分是自解释的——我们正在使用各种参数设置嵌入式LDAP服务器。'
- en: Setting up users in the LDAP server
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在LDAP服务器上设置用户
- en: We are going to use the **LDAP Data Interchange Format** (**LDIF**) to set up
    our users on our LDAP server. The LDIF is a standard text-based representation
    for LDAP data, and changes to that data ([https://ldap.com/ldif-the-ldap-data-interchange-format/](https://ldap.com/ldif-the-ldap-data-interchange-format/)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用**LDAP数据交换格式**（**LDIF**）在我们的LDAP服务器上设置用户。LDIF是LDAP数据的基于文本的标准表示形式，以及对该数据的更改（[https://ldap.com/ldif-the-ldap-data-interchange-format/](https://ldap.com/ldif-the-ldap-data-interchange-format/)）。
- en: 'In our `application.yml` file, we have shown Spring where to look for our LDIF
    file. The LDIF file is as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `application.yml` 文件中，我们已向Spring展示了LDIF文件的位置。LDIF文件如下所示：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Running the application
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'There are not many changes in any of the other files within the project. Just
    like you run any other `spring-boot` project, go to the project folder and execute
    the following command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的其他文件没有太多变化。就像运行任何其他 `spring-boot` 项目一样，进入项目文件夹并执行以下命令：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Seeing the application in action on a browser
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在浏览器中查看应用程序的实际运行情况
- en: 'Open a browser and enter `http://localhost:8080`. Enter the username/password
    as `tjohn/tjohn@password` (look for user setup in the LDIF file). You will be
    taken to `home.jsp`, where you will see a friendly welcome message, as shown in
    the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器并输入 `http://localhost:8080`。输入用户名/密码为 `tjohn/tjohn@password`（在LDIF文件中查找用户设置）。您将被带到
    `home.jsp` 页面，在那里您将看到一个友好的欢迎信息，如下面的截图所示：
- en: '![](img/1a0891d5-48c9-4be9-a798-8d04bb64cd13.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1a0891d5-48c9-4be9-a798-8d04bb64cd13.png)'
- en: 'Figure 4: Message shown in home.jsp page after successful login using LDAP'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图4：使用LDAP成功登录后home.jsp页面显示的消息
- en: OAuth2 and OpenID Connect
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OAuth2和OpenID Connect
- en: '**OAuth** is an open standard/specification for achieving authorization. It
    works over HTTPS, and anyone can implement the specification. The specification
    works by validating access tokens, and then authorizes devices, APIs, servers,
    and so on.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**OAuth**是一个用于实现授权的开放标准/规范。它通过HTTPS工作，任何人都可以实现该规范。该规范通过验证访问令牌，然后授权设备、API、服务器等。'
- en: Two versions—namely OAuth 1.0 ([https://tools.ietf.org/html/rfc5849](https://tools.ietf.org/html/rfc5849))
    and OAuth 2.0 ([https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749))—exist.
    These versions are not compatible with each other and cannot work together. We
    will use version 2.0 and it will be referred to as OAuth 2.0, throughout this
    book.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 存在两个版本——即OAuth 1.0（[https://tools.ietf.org/html/rfc5849](https://tools.ietf.org/html/rfc5849)）和OAuth
    2.0（[https://tools.ietf.org/html/rfc6749](https://tools.ietf.org/html/rfc6749)）——它们彼此不兼容，不能一起工作。我们将使用2.0版本，并在本书中将其称为OAuth
    2.0。
- en: SAML, released in 2005, is a good fit for the web browser (still). But with
    modern web and native applications (mobile devices), SAML required a serious overhaul,
    and that's when OAuth came in. **Single Page Applications** (**SPAs**) and native
    applications are different from traditional server-side web applications. SPAs
    do AJAX/XHR calls to the APIs that are exposed on the server and does many other
    operations on the client (browser). API development has also changed, from heavy
    SOAP-based web services using XML to lightweight REST over HTTP using JSON.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: SAML，于2005年发布，非常适合网页浏览器（仍然如此）。但随着现代网页和原生应用（移动设备）的出现，SAML需要进行重大改进，这时OAuth就出现了。**单页应用**（**SPAs**）和原生应用与传统服务器端网页应用不同。SPAs通过AJAX/XHR调用服务器上公开的API，并在客户端（浏览器）执行许多其他操作。API开发也发生了变化，从使用XML的重量级SOAP基于Web服务转变为使用JSON的轻量级REST。
- en: OAuth also enables you, as a developer, to gain access to minimal user data
    without having to give away a user's password. It is mainly for accessing the
    APIs (REST) exposed by an application, and is done by delegating the authorization
    function.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth还允许您作为开发者，在不泄露用户密码的情况下访问最小用户数据。它主要用于访问应用程序公开的API（REST），并通过委托授权功能来实现。
- en: OAuth supports a variety of application types and decouples authentication from
    authorization.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth支持多种应用程序类型，并将认证与授权解耦。
- en: 'In simple terms, this is how OAuth works:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，这就是OAuth的工作方式：
- en: The app that wants to access resources requests the user to grant authorization.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想要访问资源的应用请求用户授予授权。
- en: If the user authorizes it, the app is given proof for this agreement.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果用户授权，应用将获得此协议的证明。
- en: Using this proof, the app goes to the actual server with the APIs and gets a
    token.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个证明，应用将前往实际的服务器，使用API并获取一个令牌。
- en: Using this token, the app can now ask for resources (APIs) to which the user
    has given access, while giving the proof.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用这个令牌，应用现在可以请求用户已经授予访问权限的资源（API），同时提供证明。
- en: 'The preceding steps are depicted in the following diagram:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的步骤在以下图中有所描述：
- en: '![](img/03b56df2-a7e5-46f9-8dcb-5967110dc4f1.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03b56df2-a7e5-46f9-8dcb-5967110dc4f1.png)'
- en: 'Figure 5: Functionality of OAuth'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图5：OAuth的功能
- en: OAuth was tweaked in such a way by using an access token, apps can get user
    information in the form of an API. Facebook Connect (an SSO application that allows
    users to interact with other web applications using Facebook credentials) used
    this as a mechanism to expose an endpoint (`http(s)://<domain>/me`) that would
    return minimal user information. This was never clearly there in OAuth specification,
    and this provoked **Open ID Connect** (**OIDC**), which combined the best parts
    of OAuth2, Facebook Connect, and SAML 2.0\. OIDC brought in a new ID token (`id_token`),
    and also a `UserInfo` endpoint that will provide minimal user attributes. Many
    of the complexities that SAML had, and many of the shortcomings of OAuth2 were
    addressed by OIDC.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用访问令牌，OAuth被调整得如此之好，应用可以以API的形式获取用户信息。Facebook Connect（一个允许用户使用Facebook凭证与其他Web应用交互的单点登录应用）使用这种机制来公开一个端点（`http(s)://<domain>/me`），该端点将返回最基本用户信息。这从未在OAuth规范中明确指出，这引发了**Open
    ID Connect**（**OIDC**），它结合了OAuth2、Facebook Connect和SAML 2.0的最佳部分。OIDC引入了一个新的ID令牌（`id_token`），以及一个`UserInfo`端点，该端点将提供最基本用户属性。OIDC解决了SAML的一些复杂性和OAuth2的一些不足。
- en: Going deep, into OAuth and OIDC is not in the scope of this book. I am sure
    that I have given adequate information, using which you can navigate through the
    rest of this section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 深入了解OAuth和OIDC超出了本书的范围。我相信我已经提供了足够的信息，使用这些信息你可以浏览本节的其余部分。
- en: Setting up a project
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置项目
- en: The example code that we are going to create here has a different approach from
    our earlier samples. Here, we will use *Spring Initializr* ([http://start.spring.io/](http://start.spring.io/))
    to create the base project, and then we will inject the appropriate changes to
    make it log in with a provider, namely, Google.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里将要创建的示例代码与之前的示例有不同的方法。在这里，我们将使用*Spring Initializr*（[http://start.spring.io/](http://start.spring.io/））来创建基础项目，然后我们将注入适当的更改，使其能够通过提供者登录，即，Google。
- en: Bootstrap Spring project using Spring Initializr
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Initializr启动Spring项目
- en: 'Visit [http://start.spring.io/](http://start.spring.io/) and enter the following
    details. Make sure that you select the right dependencies:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 访问[http://start.spring.io/](http://start.spring.io/)并输入以下详细信息。确保你选择了正确的依赖项：
- en: '![](img/af792e37-c364-4482-aad1-c53e326d543a.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/af792e37-c364-4482-aad1-c53e326d543a.png)'
- en: 'Figure 6: Spring Initializr setup'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图6：Spring Initializr设置
- en: 'Click on the Generate Project button and download the ZIP file to a folder
    of your choice. Execute the `unzip` command as follows. I am using Macintosh for
    running all of my sample applications, so I will be using commands, if any, suitable
    for this platform:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 点击生成项目按钮，并将ZIP文件下载到你的选择文件夹中。按照以下方式执行`unzip`命令。我使用Macintosh运行所有示例应用，所以如果有的话，我会使用适合这个平台的命令：
- en: '[PRE10]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Inclusion of OAuth libraries in pom.xml
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`pom.xml`中包含OAuth库
- en: 'Modify your project''s `pom.xml` file by adding the following dependencies:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下依赖项来修改你的项目`pom.xml`文件：
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Setting up provider details in application.properties
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在`application.properties`中设置提供者详情
- en: 'If you run the application (`./mvnw spring-boot:run`) and then navigate your
    browser to `http://localhost:8080`, you will see a default login page, as follows.
    The entire magic behind this page is done for you by Spring Boot and Spring Security:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行应用（`./mvnw spring-boot:run`），然后导航到浏览器中的`http://localhost:8080`，你会看到一个默认的登录页面，如下所示。这个页面的全部魔法都是由Spring
    Boot和Spring Security为你完成的：
- en: '![](img/47a39749-7010-4d48-bb90-2f9134f9b210.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/47a39749-7010-4d48-bb90-2f9134f9b210.png)'
- en: 'Figure 7: Default Spring Boot + Spring Security project created using Spring
    Initializr'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图7：使用Spring Initializr创建的默认Spring Boot + Spring Security项目
- en: 'Open the `application.properties` file (`src/main/resources`) and add the following
    properties:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`application.properties`文件（`src/main/resources`）并添加以下属性：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Here, we declare two properties for each provider. We will be implementing
    the Google provider, but you can add any number of providers. Just adding these
    properties will create more magic, and your login page will suddenly change to
    the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们为每个提供者声明两个属性。我们将实现Google提供者，但你也可以添加任意数量的提供者。只需添加这些属性，就会创造更多的魔法，你的登录页面将突然变为以下：
- en: '![](img/4c9c49c6-c86f-4620-8977-6a45458bdd47.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/4c9c49c6-c86f-4620-8977-6a45458bdd47.png)'
- en: 'Figure 8: OAuth default login page when application.properties file is modified'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图8：当修改application.properties文件时OAuth默认登录页面
- en: 'The providers (links) shown in the preceding screenshot are according to the
    configurations seen in the `application.properties` file. It just looks for two
    properties, as follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个截图所示的提供者（链接）是根据`application.properties`文件中的配置显示的。它只查找两个属性，如下所示：
- en: '[PRE13]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Provider setup
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供者设置
- en: 'We will be using Google as our provider in this example. Navigate to [https://console.developers.google.com/](https://console.developers.google.com/)
    and perform the following steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们将使用Google作为我们的提供者。导航到[https://console.developers.google.com/](https://console.developers.google.com/)并执行以下步骤：
- en: 'Create a project. Select an existing project or create a new project, as shown
    in the following screenshot:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建项目。选择现有项目或创建新项目，如图所示以下截图：
- en: '![](img/05af3299-335b-4037-a1d3-ae4f1a39a803.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/05af3299-335b-4037-a1d3-ae4f1a39a803.png)'
- en: 'Figure 9: Project creation'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图9：项目创建
- en: 'Create the credentials. Select the newly created project (in the following
    screenshot, it is shown next to the Google APIs logo) and click on the Credentials
    link in the side menu, as shown in the following screenshot:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建凭证。选择新创建的项目（在以下截图，它显示在Google APIs标志旁边）并点击侧边菜单中的凭证链接，如图所示以下截图：
- en: '![](img/437a6fcd-1fc2-4ab2-91db-a6ddc5407ed9.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/437a6fcd-1fc2-4ab2-91db-a6ddc5407ed9.png)'
- en: 'Figure 10: Credential creation - step 1'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图10：凭证创建 - 第1步
- en: 'Now, click on the Create credentials drop-down menu, as shown in the following
    screenshot:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击创建凭证下拉菜单，如图所示以下截图：
- en: '![](img/5021c119-000c-4880-920e-5a9a60a9f0c2.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/5021c119-000c-4880-920e-5a9a60a9f0c2.png)'
- en: 'Figure 11: Credential creation - step 2'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图11：凭证创建 - 第2步
- en: 'From the drop-down menu, click on OAuth client ID. This will navigate you to
    the page shown in the following screenshot. Please note that the Application type
    radio group will be disabled at this stage:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中，点击OAuth客户端ID。这将导航您到以下截图所示的页面。请注意，在此阶段，应用程序类型单选按钮组将被禁用：
- en: '![](img/fd8267bf-d1d0-44c1-91ae-ea081c71d5d8.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/fd8267bf-d1d0-44c1-91ae-ea081c71d5d8.png)'
- en: 'Figure 12: Credential creation - step 3'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图12：凭证创建 - 第3步
- en: 'Click on Configure consent screen. You will be navigated to the following page:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击配置同意屏幕。您将被导航到以下页面：
- en: '![](img/4854c9b4-75a4-4ce3-82e7-c9240c51ecca.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/4854c9b4-75a4-4ce3-82e7-c9240c51ecca.png)'
- en: 'Figure 13: Credential creation - step 4'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图13：凭证创建 - 第4步
- en: Enter the relevant details (leave the optional fields out while filling in the
    form), as shown in the preceding figure, and click on the Save button. You will
    be navigated back to the page shown in the following figure.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入相关细节（在填写表格时省略可选字段），如图所示的前一个截图，并点击保存按钮。您将被导航回以下图所示的页面。
- en: 'This time, the Application type radio group will be enabled:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，应用程序类型单选按钮组将被启用：
- en: '![](img/40295f09-c3ac-4800-bb37-2d5e26176bed.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/40295f09-c3ac-4800-bb37-2d5e26176bed.png)'
- en: 'Figure 14: Credential Creation - step 5'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图14：凭证创建 - 第5步
- en: 'Select the Application type as Web application, and enter the relevant details,
    as shown in the preceding figure. Click on the Create button, and you will be
    shown the following popup:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择应用程序类型为Web应用程序，并输入相关细节，如图所示。点击创建按钮，将显示以下弹出窗口：
- en: '![](img/daaf459d-a618-4afa-a0d4-474041312c09.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/daaf459d-a618-4afa-a0d4-474041312c09.png)'
- en: 'Figure 15: Credential creation - step 6'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图15：凭证创建 - 第6步
- en: You now have your client ID and client secret from Google. Copy and paste these
    values into the `application.properties` file in the correct place.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在从Google获得了客户端ID和客户端密钥。将这些值复制并粘贴到`application.properties`文件的正确位置。
- en: Default application change
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 默认应用程序更改
- en: To be in line with the previous example, we will make changes in the default
    application that was generated, bringing in the same components seen in the previous
    application. This will help you to understand the application in detail.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与前面的示例保持一致，我们将在生成的默认应用程序中进行更改，引入前面应用程序中看到的相同组件。这将有助于您详细了解应用程序。
- en: The HomeController class
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HomeController类
- en: Copy the home controller class (`HomeController.java`) that we created in our
    previous example to a new package. Change the welcome message to whatever you
    want.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们在上一个示例中创建的 `home controller class (`HomeController.java`) 复制到一个新的包中。将欢迎信息更改为您想要的任何内容。
- en: The home.jsp file
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`home.jsp` 文件'
- en: Copy the whole `webapp` folder from the previous example, as is, into this project.
    Change the page heading to something different so that it is clear while running
    the application that it is indeed the sample application.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将整个 `webapp` 文件夹从上一个示例中完整地复制到这个项目中。将页面标题更改为不同的内容，以便在运行应用程序时可以清楚地知道它确实是示例应用程序。
- en: Spring Boot main application class change
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot 主应用程序类更改
- en: 'Make your application class extend the `SpringBootServletInitializer` class.
    Add a new annotation, as follows, letting your Spring Boot application know that
    a new controller, `HomeController`, is a component that it has to scan:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让您的应用程序类扩展 `SpringBootServletInitializer` 类。添加一个新的注解，如下所示，让 Spring Boot 应用程序知道一个新的控制器，`HomeController`，是一个它必须扫描的组件：
- en: '[PRE14]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Running the application
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行应用程序
- en: 'Run your application by executing the following default command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行以下默认命令来运行您的应用程序：
- en: '[PRE15]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'If all is well, you should be able to click on the Google link, and it should
    navigate you to the Google''s login page. After successfully logging in, you will
    be redirected to the `home.jsp` file, as shown in the following screenshot:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您应该能够点击 Google 链接，并且它应该将您导航到 Google 的登录页面。登录成功后，您将被重定向到 `home.jsp` 文件，如下面的截图所示：
- en: '![](img/6236594f-359d-4c81-b716-7c6d1351b929.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6236594f-359d-4c81-b716-7c6d1351b929.png)'
- en: 'Figure 16: Login using Google as OAuth provider'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 16：使用 Google 作为 OAuth 提供者进行登录
- en: The support for OAuth doesn't end here, but we have to stop, as the book cannot
    delve deeply into the many aspects that the framework provides.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 的支持并不止于此，但我们不得不停下来，因为这本书无法深入探讨框架提供的众多方面。
- en: Summary
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw authentication mechanisms commonly used in the enterprises,
    namely SAML, LDAP, and OAuth/OIDC, supported by Spring Security through hands-on
    coding examples. We used the sample application built as part of [Chapter 2](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml),
    *Deep Diving into Spring Security*, as a basis for explaining the functionality
    and implementation of other authentication mechanisms.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过动手编码示例了解了企业中常用的身份验证机制，即 SAML、LDAP 和 OAuth/OIDC，这些机制通过 Spring Security
    支持。我们使用 [第 2 章](e43a2e26-5b28-4d37-a7f8-d3c992a07bc2.xhtml)，*深入 Spring Security*
    中构建的示例应用程序作为基础，来解释其他身份验证机制的功能和实现。
- en: However, we intentionally didn't reactive programming in our coding examples.
    This chapter was aimed at making you understand the core concepts of each of the
    authentication mechanisms, by making use of the familiar Spring Web MVC application
    framework. We will cover reactive programming in more detail in [Chapter 5](df488f9c-24a7-4d0f-ac82-1d126a391fcc.xhtml), *Integrating
    with Spring WebFlux*.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们故意没有在我们的编码示例中包含反应式编程。本章的目标是通过使用熟悉的 Spring Web MVC 应用程序框架，让您理解每个身份验证机制的核心概念。我们将在
    [第 5 章](df488f9c-24a7-4d0f-ac82-1d126a391fcc.xhtml)，*与 Spring WebFlux 集成* 中更详细地介绍反应式编程。
