["```java\nQuote quote = database.find(symbol);\nif (quote == null) {\n    throw NotFoundException();\n}\nreturn convertToJson(quote);\n```", "```java\nQuote quote = cache.get(symbol);\nif (quote == null) {\n    quote = database.find(symbol);\n    if (quote != null) {\n        cache.put(symbol, quote);\n    }\n}\nif (quote == null) {\n    throw NotFoundException();\n}\nreturn convertToJson(quote);\n```", "```java\nprivate final ConcurrentMap<Long, Optional<Quote>> quoteCache = new ConcurrentHashMap<>();\n\n@GET\n@Path(\"{id}\")\npublic JsonQuote findById(@PathParam(\"id\") final long id) {\n    return quoteCache.computeIfAbsent(id, identifier -> \n    quoteService.findById(identifier))\n            .map(this::convertQuote)\n            .orElseThrow(() -> new WebApplicationException(Response.Status.NO_CONTENT));\n}\n```", "```java\n@Entity\npublic class Quote { // skipping getters/setters\n    @Id\n    @GeneratedValue\n    private long id;\n\n    @NotNull\n    @Column(unique = true)\n    private String name;\n\n    private double value;\n\n    @ManyToMany\n    private Set<Customer> customers;\n}\n```", "```java\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    Quote quote = (Quote) o;\n    return id == quote.id && Double.compare(quote.value, value) == 0 &&\n    Objects.equals(name,\n            quote.name) && Objects.equals(customers, quote.customers);\n}\n\n@Override\npublic int hashCode() {\n    return Objects.hash(id, name, value, customers);\n}\n```", "```java\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    Quote quote = (Quote) o;\n    return id == quote.id;\n}\n\n@Override\npublic int hashCode() {\n    return Long.hashCode(id);\n}\n```", "```java\nCache-Control: no-cache, no-store, must-revalidate\n\n```", "```java\nHTTP/1.1 200 OK\nApp-Target: desktop\n....\n```", "```java\nHTTP/1.1 200 OK\nApp-Target: mobile\n....\n```", "```java\nHTTP/1.1 200 OK\nApp-Target: desktop\nVary: App-Target\n....\n```", "```java\nHTTP/1.1 200 OK\nApp-Target: mobile\nVary: App-Target\n....\n```", "```java\npublic class NoStoreFilter implements Filter {\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse\n    response, FilterChain filterChain)\n            throws IOException, ServletException {\n        final HttpServletResponse httpResponse =\n        HttpServletResponse.class.cast(response);\n        httpResponse.setHeader(\"Cache-Control\", \"no-store\");\n        filterChain.doFilter(request, response);\n    }\n}\n```", "```java\n<web-app \n\n         xsi:schemaLocation=\"\n           http://xmlns.jcp.org/xml/ns/javaee\n           http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd\"\n         version=\"4.0\">\n\n    <filter>\n       <filter-name>NoCacheFilter</filter-name>\n       <filter-class>com.company.NoCacheFilter</filter-class>\n    </filter>\n\n    <filter-mapping>\n       <filter-name>NoCacheFilter</filter-name>\n       <url-pattern>/*</url-pattern>\n    </filter-mapping>\n\n</web-app>\n```", "```java\n@Provider\npublic class NoStoreFilter implements ContainerResponseFilter {\n    @Override\n    public void filter(ContainerRequestContext containerRequestContext,\n    ContainerResponseContext\n            containerResponseContext)\n            throws IOException {\n        containerResponseContext.getHeaders().putSingle(\"Cache\n        -Control\", \"no-store\");\n    }\n}\n```", "```java\n@GET\npublic Response get() {\n    CacheControl cacheControl = new CacheControl();\n    cacheControl.setNoCache(true);\n\n    return Response.ok(\"...\")\n                   .cacheControl(cacheControl)\n                   .build();\n}\n```", "```java\n@WebServlet(\"/packt\")\npublic class PacktServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n           throws ServletException, IOException {\n        PushBuilder pushBuilder = req.newPushBuilder();\n        pushBuilder\n                .path(\"images/packt.png\")\n                .addHeader(\"content-type\", \"image/png\")\n                .push();\n\n        // serve the response which can use images/packt.png\n\n    }\n}\n```", "```java\n<dependency>\n    <groupId>javax.cache</groupId>\n    <artifactId>cache-api</artifactId>\n    <version>1.0.0</version>\n</dependency>\n```", "```java\nCache<String, Quote> quotes = Caching.getCache(\"packt.quotes\", String.class, Quote.class);\nquotes.put(symbol, quote);\n```", "```java\nfinal ClassLoader loader = Thread.currentThread().getContextClassLoader(); // Caching.getDefaultClassLoader()\n\nfinal CachingProvider cachingProvider = Caching.getCachingProvider(loader);\n\nfinal CacheManager cacheManager = cachingProvider.getCacheManager(cachingProvider.getDefaultURI(), loader, new Properties());\n\nfinal Cache<String, Quote> cache = cacheManager.createCache(\"packt.quotes\", new MutableConfiguration<String, Quote>()\n    .setTypes(String.class, Quote.class)\n    .setStoreByValue(false));\n\ncachingProvider.close();\n```", "```java\n@CacheResult\npublic Quote findByName(final String name) {\n    return ...;\n}\n```", "```java\n@ApplicationScoped\npublic class QuoteCacheResolver implements CacheResolver {\n    @Inject\n    private CacheManager manager;\n\n    @Override\n    public <K, V> Cache<K, V> resolveCache(CacheInvocationContext<?\n    extends Annotation> cacheInvocationContext) {\n        try {\n            return \n    manager.getCache(cacheInvocationContext.getCacheName());\n        } catch (final CacheException ce) {\n            return manager.createCache(cacheInvocationContext.getCacheName(), new MutableConfiguration<>());\n        }\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class JCacheConfiguration {\n    @Produces\n    @ApplicationScoped\n    CacheManager createCacheManager() {\n        return ....;\n    }\n\n    void releaseCacheManager(@Disposes CacheManager manager) {\n        manager.close();\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class QuoteManagerCacheResolverFactory implements CacheResolverFactory {\n    private Map<String, String> configuration;\n\n    @Inject\n    private CacheManager manager;\n\n    @Inject\n    private Instance<Object> lookup;\n\n    @PostConstruct\n    private void loadConfiguration() {\n        configuration = ...;\n    }\n\n    @Override\n    public CacheResolver getCacheResolver(final CacheMethodDetails<? \n    extends Annotation> cacheMethodDetails) {\n        return doGetCache(cacheMethodDetails, \"default\");\n    }\n\n    @Override\n    public CacheResolver getExceptionCacheResolver(final\n    CacheMethodDetails<CacheResult> cacheMethodDetails) {\n        return doGetCache(cacheMethodDetails, \"exception\");\n    }\n\n    private CacheResolver doGetCache(final CacheMethodDetails<? extends\n    Annotation> cacheMethodDetails, final String qualifier) {\n        final MutableConfiguration cacheConfiguration =\n        createConfiguration(cacheMethodDetails, qualifier);\n\n        return new CacheResolver() {\n            @Override\n            public <K, V> Cache<K, V> resolveCache(final\n            CacheInvocationContext<? extends Annotation>\n            cacheInvocationContext) {\n                try {\n                    return manager.getCache(cache);\n                } catch (final CacheException ce) {\n                    return manager.createCache(cache,\n                    cacheConfiguration);\n                }\n            }\n        };\n    }\n}\n```", "```java\nfinal Properties cacheConfiguration = new Properties();\nfinal File configFile = new File(System.getProperty(\"app.home\", \".\"), \"conf/quote-manager-cache.properties\");\nif (configFile.exists()) {\n    try (final InputStream stream = new FileInputStream(configFile)) {\n        cacheConfiguration.load(stream);\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}\n// potentially create defined caches\nconfiguration = cacheConfiguration.stringPropertyNames().stream()\n                          .collect(toMap(identity(), cacheConfiguration::getProperty));\n```", "```java\nprivate MutableConfiguration createConfiguration(final String configurationPrefix) {\n    final MutableConfiguration cacheConfiguration = new\n    MutableConfiguration<>();\n    cacheConfiguration.setStoreByValue(Boolean.getBoolean(\n            configuration.getOrDefault(configurationPrefix +\n            \"storeByValue\", \"false\")));\n    cacheConfiguration.setStatisticsEnabled(Boolean.getBoolean(\n            configuration.getOrDefault(configurationPrefix +\n            \"statisticsEnabled\", \"false\")));\n    cacheConfiguration.setManagementEnabled(Boolean.getBoolean(\n            configuration.getOrDefault(configurationPrefix +\n            \"managementEnabled\", \"false\")));\n\n    final String loader = configuration.get(configurationPrefix +\n    \"loaderCdiName\");\n    if (loader != null) {\n        cacheConfiguration.setReadThrough(true);\n        CacheLoader<?, ?> instance = lookup.select(CacheLoader.class,\n        NamedLiteral.of(loader)).get();\n        cacheConfiguration.setCacheLoaderFactory(new\n        FactoryBuilder.SingletonFactory<>(instance));\n    }\n    final String writer = configuration.get(configurationPrefix +\n    \"writerCdiName\");\n    if (writer != null) {\n        cacheConfiguration.setWriteThrough(true);\n        CacheWriter<?, ?> instance = lookup.select(CacheWriter.class,\n        NamedLiteral.of(writer)).get();\n        cacheConfiguration.setCacheWriterFactory(new FactoryBuilder.SingletonFactory<>(instance));\n    }\n    return cacheConfiguration;\n}\n```", "```java\n@ApplicationScoped\n@CacheDefaults(\n    cacheName = \"packt.quotes\",\n    cacheResolverFactory = AppCacheResolverFactory.class,\n    cacheKeyGenerator = QuoteCacheGenerator.class\n)\npublic class CachedQuoteService {\n    @Inject\n    private QuoteService service;\n\n    @CachePut\n    public Quote create(final Quote newQuote) {\n        return service.create(newQuote);\n    }\n\n    @CacheRemove\n    public Quote delete(final Quote quote) {\n        return service.delete(quote);\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class CachedQuoteService {\n    @Inject\n    private QuoteService service;\n\n    @CachePut(\n        cacheName = \"packt.quotes\",\n        cacheResolverFactory = AppCacheResolverFactory.class,\n        cacheKeyGenerator = QuoteCacheGenerator.class\n    )\n    public Quote create(final Quote newQuote) {\n        return service.create(newQuote);\n    }\n\n    @CacheRemove(\n        cacheName = \"packt.quotes\",\n        cacheResolverFactory = AppCacheResolverFactory.class,\n        cacheKeyGenerator = QuoteCacheGenerator.class\n    )\n    public Quote delete(final Quote quote) {\n        return service.delete(quote);\n    }\n}\n```", "```java\n@CacheResult\npublic Quote findQuote(String symbol)\n```", "```java\n@CacheResult\npublic Quote create(String symbol, double price)\n```", "```java\n@CacheResult\npublic Quote create(@CacheKey String symbol, double price)\n```", "```java\npublic class StringGeneratedCacheKey implements GeneratedCacheKey {\n    private final String value;\n    private final int hash;\n\n    public StringGeneratedCacheKey(final String value) {\n        this.value = value;\n        this.hash = value.hashCode();\n    }\n\n    @Override\n    public boolean equals(final Object o) {\n        return this == o ||\n                o != null && getClass() == o.getClass() &&\n                Objects.equals(value, StringGeneratedCacheKey.class.cast(o).value);\n    }\n\n    @Override\n    public int hashCode() {\n        return hash;\n    }\n}\n```", "```java\n@ApplicationScoped\npublic class SingleStringCacheKeyGenerator implements CacheKeyGenerator {\n    @Override\n    public GeneratedCacheKey generateCacheKey(final\n    CacheKeyInvocationContext<? extends Annotation> context) {\n        return new StringGeneratedCacheKey(String.class.cast(\n            context.getKeyParameters()[0].getValue()));\n    }\n}\n```", "```java\n@CacheResult(cacheKeyGenerator = SingleStringCacheKeyGenerator.class)\npublic Quote findByName(final String name) {\n    return ...;\n}\n```"]