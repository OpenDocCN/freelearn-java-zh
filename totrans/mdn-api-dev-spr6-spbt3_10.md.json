["```java\nmessage Employee {  int64 id = 1;\n  string firstName = 2;\n}\n```", "```java\nsyntax = \"proto3\";package com.packtpub;\noption java_package = \"com.packt.modern.api.proto\";\noption java_multiple_files = true;\nmessage Employee {\n  int64 id = 1;\n  string firstName = 2;\n  string lastName = 3;\n  int64 deptId = 4;\n  double salary = 5;\n  message Address {\n    string houseNo = 1;\n    string street1 = 2;\n    string street2 = 3;\n    string city = 4;\n    string state = 5;\n    string country = 6;\n    string pincode = 7;\n  }\n}\nmessage EmployeeCreateResponse {\n  int64 id = 1;\n}\nservice EmployeeService {\n  rpc Create(Employee) returns (EmployeeCreateResponse);\n}\n```", "```java\n… omittedmessage Employee {\n  … omitted\n  enum Grade {\n    I_GRADE = 1;\n    II_GRADE = 2;\n    III_GRADE = 3;\n    IV_GRADE = 4;\n  }\n  map<string, int32> nominees = 1;\n  … omitted\n}\n```", "```java\nservice EmployeeService {  rpc Create(Employee) returns (EmployeeCreateResponse);\n}\n```", "```java\n    rpc LiveMatchScore(MatchId) returns (stream MatchScore);\n    ```", "```java\n    rpc AnalyzeData(stream DataInput) returns (Report);\n    ```", "```java\n    rpc BatchProcessing(stream InputRecords)    returns (stream Response);\n    ```", "```java\npublic class EmployeeService extends EmployeeServiceImplBase {  // some code\n  @Override\n  public void create(Employee request,\n     io.grpc.stub.StreamObserver<Response> responseObserver) {\n    // implementation\n  }\n}\n```", "```java\npublic class GrpcServer { public static void main(String[] arg) {\n  try {\n    Server server = ServerBuilder.forPort(8080)\n        .addService(new EmployeeService()).build();\n    System.out.println(\"Starting gRPC Server Service...\");\n    server.start();\n    System.out.println(\"Server has started at port: 8080\");\n    System.out.println(\"Following services are\n        available: \");\n    server.getServices().stream().forEach( s ->\n      System.out.println(\"Service Name: \" +\n      s.getServiceDescriptor().getName())\n    );\n    server.awaitTermination();\n  } catch (Exception e) {\n    // error handling\n  }\n }\n}\n```", "```java\npublic EmployeeServiceClient(ManagedChannelBuilder<?>  channelBuilder) {  channel = channelBuilder.build();\n  blockingStub = EmployeeServiceGrpc.\n      newBlockingStub(channel);\n  asyncStub = EmployeeServiceGrpc.newStub(channel);\n}\n```", "```java\npackage google.rpc;message Status {\n  // actual error code is defined by `google.rpc.Code`.\n  int32 code = 1;\n  // A developer-facing human-readable error message\n  string message = 2;\n  // Additional error information that the client\n     code can use\n  // to handle the error, such as retry info or a\n     help link.\n  repeated google.protobuf.Any details = 3;\n}\n```"]