["```java\na = f1(b,c) \nd = f2(e,f) \nk = f3(e,c) \ng = f4(b,f,k) \nh = f5(d,a,g)\n\n```", "```java\na = b + 3 \nb = 4 / a\n\n```", "```java\na = b + 3 \nq = b + a\n\n```", "```java\nvoid subscribe(Flow.Subscriber<? super T> subscriber)\n\n```", "```java\npackage packt.java9.by.example.mybusiness.inventory; \n\nimport ...; \n\n@Component \npublic class Inventory { \n    private final Map<Product, InventoryItem> inventory = \n            new ConcurrentHashMap<>(); \n\n    private InventoryItem getItem(Product product) { \n        inventory.putIfAbsent(product, new InventoryItem()); \n        return inventory.get(product); \n    } \n\n    public void store(Product product, long amount) { \n        getItem(product).store(amount); \n    } \n\n    public void remove(Product product, long amount) \n            throws ProductIsOutOfStock { \n        if (getItem(product).remove(amount) != amount) \n            throw new ProductIsOutOfStock(product); \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.inventory; \n\nimport java.util.concurrent.atomic.AtomicLong; \n\npublic class InventoryItem { \n    private final AtomicLong amountOnStock = \n            new AtomicLong(0); \n    void store(long n) { \n        amountOnStock.accumulateAndGet(n, \n                (stock, delta) -> stock + delta); \n    } \n    long remove(long delta) { \n        class ClosureData { \n            long actNr; \n        } \n        ClosureData d = new ClosureData(); \n        amountOnStock.accumulateAndGet(delta, \n                (stock, n) -> \n                        stock >= n ? \n                                stock - (d.actNr = n) \n                                : \n                                stock - (d.actNr = 0) \n        ); \n        return d.actNr; \n    } \n}\n\n```", "```java\npackage packt.java9.by.example.mybusiness.inventory; \n\nimport ... \n\npublic class InventoryKeeper implements Flow.Subscriber<Order> { \n    private static final Logger log = \n            LoggerFactory.getLogger(InventoryKeeper.class); \n    private final Inventory inventory; \n\n    public InventoryKeeper(@Autowired Inventory inventory) { \n        this.inventory = inventory; \n    } \n\n    private Flow.Subscription subscription = null; \n    private static final long WORKERS = 3; \n\n    @Override \n    public void onSubscribe(Flow.Subscription subscription) { \n        log.info(\"onSubscribe was called\"); \n        subscription.request(WORKERS); \n        this.subscription = subscription; \n    }\n\n```", "```java\n    private ExecutorService service =  \n                   Executors.newFixedThreadPool((int) WORKERS);\n\n```", "```java\n    @Override \n    public void onNext(Order order) { \n        service.submit(() -> { \n                    int c = counter.incrementAndGet(); \n                    for (OrderItem item : order.getItems()) { \n                        try { \n                            inventory.remove(item.getProduct(), \n                                               item.getAmount()); \n                        } catch (ProductIsOutOfStock exception) { \n                            log.error(\"Product out of stock\"); \n                        } \n                    } \n                    subscription.request(1); \n                    counter.decrementAndGet(); \n                } \n        ); \n    } \n\n    @Override \n    public void onError(Throwable throwable) { \n        log.info(\"onError was called for {}\", throwable); \n    } \n\n    @Override \n    public void onComplete() { \n        log.info(\"onComplete was called\"); \n    } \n}\n\n```", "```java\n    public void testInventoryRemoval() { \n        Inventory inventory = new Inventory(); \n        SubmissionPublisher<Order> p = \n                         new SubmissionPublisher<>();\n\n```", "```java\n        p.subscribe(new InventoryKeeper(inventory));\n\n```", "```java\n        Product product = new Product(); \n        inventory.store(product, 20); \n        OrderItem item = new OrderItem(); \n        item.setProduct(product); \n        item.setAmount(10); \n        Order order = new Order(); \n        List<OrderItem> items = new LinkedList<>(); \n        items.add(item); \n        order.setItems(items);\n\n```", "```java\n        for (int i = 0; i < 10; i++) \n            p.submit(order); \n        log.info(\"All orders were submitted\");\n\n```", "```java\n        for (int j = 0; j < 10; j++) { \n            log.info(\"Sleeping a bit...\"); \n            Thread.sleep(50); \n        } \n        p.close(); \n        log.info(\"Publisher was closed\"); \n    }\n\n```"]