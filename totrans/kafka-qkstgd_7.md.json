["```java\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"Lake Anyaport\",\"serialNumber\":\"EW05-HV36\",\"type\":\"WIND\",\"status\":\"STARTING\",\"lastStartedAt\":\"2018-09-17T11:05:26.094+0000\",\"temperature\":62.0,\"ipAddress\":\"15.185.195.90\"}\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"Candelariohaven\",\"serialNumber\":\"BO58-SB28\",\"type\":\"SOLAR\",\"status\":\"STARTING\",\"lastStartedAt\":\"2018-08-16T04:00:00.179+0000\",\"temperature\":75.0,\"ipAddress\":\"151.157.164.162\"}\n{\"event\":\"HEALTH_CHECK\",\"factory\":\"Ramonaview\",\"serialNumber\":\"DV03-ZT93\",\"type\":\"SOLAR\",\"status\":\"RUNNING\",\"lastStartedAt\":\"2018-07-12T10:16:39.091+0000\",\"temperature\":70.0,\"ipAddress\":\"173.141.90.85\"}\n...\n```", "```java\nksql>  CREATE STREAM healthchecks (event string, factory string, serialNumber string, type string, status string, lastStartedAt string, temperature double, ipAddress string) WITH (kafka_topic='healthchecks', value_format='json');\n```", "```java\nMessage\n----------------------------\nStream created and running\n----------------------------\n```", "```java\nksql> DESCRIBE healthchecks;\n```", "```java\nName          : HEALTHCHECKS\nField         | Type\n-------------------------------------------\nROWTIME       | BIGINT           (system)\nROWKEY        | VARCHAR(STRING)  (system)\nEVENT         | VARCHAR(STRING)\nFACTORY       | VARCHAR(STRING)\nSERIALNUMBER  | VARCHAR(STRING)\nTYPE          | VARCHAR(STRING)\nSTATUS        | VARCHAR(STRING)\nLASTSTARTEDAT | VARCHAR(STRING)\nTEMPERATURE   | DOUBLE\nIPADDRESS     | VARCHAR(STRING)\n```", "```java\nksql> select * from healthchecks;\n```", "```java\n1532598615943 | null | HEALTH_CHECK | Carliefort | FM41-RE80 | WIND | STARTING | 2017-08-13T09:37:21.681+0000 | 46.0 | 228.247.233.14\n1532598616454 | null | HEALTH_CHECK | East Waldo | HN72-EB29 | WIND | RUNNING | 2017-10-31T14:20:13.929+0000 | 3.0 | 223.5.127.146\n1532598616961 | null | HEALTH_CHECK | New Cooper | MM04-TZ21 | SOLAR | SHUTTING_DOWN | 2017-08-21T21:10:31.190+0000 | 23.0 | 233.143.140.46\n1532598617463 | null | HEALTH_CHECK | Mannmouth | XM02-PQ43 | GEOTHERMAL | RUNNING | 2017-09-08T10:44:56.005+0000 | 73.0 | 221.96.17.237\n1532598617968 | null | HEALTH_CHECK | Elvisfort | WP70-RY81 | NUCLEAR | RUNNING | 2017-09-07T02:40:18.917+0000 | 49.0 | 182.94.17.58\n1532598618475 | null | HEALTH_CHECK | Larkinstad | XD75-FY56 | GEOTHERMAL | STARTING | 2017-09-06T08:48:14.139+0000 | 35.0 | 105.236.9.137\n1532598618979 | null | HEALTH_CHECK | Nakiaton | BA85-FY32 | SOLAR | RUNNING | 2017-08-15T04:10:02.590+0000 | 32.0 | 185.210.26.215\n1532598619483 | null | HEALTH_CHECK | North Brady | NO31-LM78 | HYDROELECTRIC | RUNNING | 2017-10-05T12:12:52.940+0000 | 5.0 | 17.48.190.21\n1532598619989 | null | HEALTH_CHECK | North Josianemouth | GT17-TZ11 | SOLAR | SHUTTING_DOWN | 2017-08-29T16:57:23.000+0000 | 6.0 | 99.202.136.163\n```", "```java\nksql> SELECT event, factory, serialNumber, type, status, lastStartedAt, temperature, ipAddress, STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd''T''HH:mm:ss.SSSZ') FROM healthchecks;\n```", "```java\nHEALTH_CHECK | Ezekielfurt | AW90-DQ16 | HYDROELECTRIC | RUNNING | 2017-09-28T21:00:45.683+0000 | 7.0 | 89.87.184.250 | 1532168445683\nHEALTH_CHECK | Icieville | WB52-WC16 | WIND | SHUTTING_DOWN | 2017-10-31T22:38:26.783+0000 | 15.0 | 40.23.168.167 | 1532025506783\nHEALTH_CHECK | McClurehaven | QP68-WX17 | GEOTHERMAL | RUNNING | 2017-11-12T23:16:27.105+0000 | 76.0 | 252.213.150.75 | 1532064587105\nHEALTH_CHECK | East Maudshire | DO15-BB56 | NUCLEAR | STARTING | 2017-10-14T03:04:00.399+0000 | 51.0 | 93.202.28.134 | 1532486240399\nHEALTH_CHECK | South Johnhaven | EE06-EX06 | HYDROELECTRIC | RUNNING | 2017-09-06T20:14:27.438+0000 | 91.0 | 244.254.181.218 | 1532264867438\n```", "```java\nksql> SELECT serialNumber, STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd''T''HH:mm:ss.SSSZ'), STRINGTOTIMESTAMP('2017-11-18','yyyy-MM-dd') FROM healthchecks;\n```", "```java\nFE79-DN10 | 1532050647607 | 1510984800000\nXE79-WP47 | 1532971000830 | 1510984800000\nMP03-XC09 | 1532260107928 | 1510984800000\nSO48-QF28 | 1532223768121 | 1510984800000\nOC25-AB61 | 1532541923073 | 1510984800000\nAL60-XM70 | 1532932441768 | 1510984800000\n```", "```java\nksql> SELECT serialNumber, (STRINGTOTIMESTAMP('2017-11-18','yyyy-MM-dd''T''HH:mm:ss.SSSZ')-STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd'))/86400/1000 FROM healthchecks;\n```", "```java\nEH92-AQ09 | 39\nBB09-XG98 | 42\nLE94-BT50 | 21\nGO25-IE91 | 97\nWD93-HP20 | 22\nJX48-KN03 | 12\nEC84-DD11 | 73\nSF06-UB22 | 47\nIU77-VQ89 | 18\nNM80-ZY31 | 5\nTR64-TI21 | 51\nZQ13-GI11 | 80\nII04-MB66 | 48\n```", "```java\nksql> CREATE STREAM uptimes WITH (kafka_topic='uptimes', value_format='delimited') AS SELECT CAST((STRINGTOTIMESTAMP('2017-11-18','yyyy-MM-dd''T''HH:mm:ss.SSSZ')-STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd'))/86400/1000 AS string) AS uptime FROM healthchecks;\n```", "```java\nMessage\n----------------------------\nStream created and running\n----------------------------\n```", "```java\n$ ./kafka-console-consumer --bootstrap-server localhost:9092 --topic uptimes --property print.key=true\n```", "```java\nnull  39\nnull  42\nnull  21\n```", "```java\nksql> show queries;\n```", "```java\n Query ID       | Kafka Topic | Query String\n-------------------------------------------------------------------------------\nCSAS_UPTIMES_0 | UPTIMES     | CREATE STREAM uptimes WITH (kafka_topic='uptimes', value_format='delimited') AS SELECT CAST((STRINGTOTIMESTAMP('2017-11-18','yyyy-MM-dd''T''HH:mm:ss.SSSZ')-STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd'))/86400/1000 AS string) AS uptime FROM healthchecks;\n-------------------------------------------------------------------------------\nFor detailed information on a Query run: EXPLAIN <Query ID>;\n```", "```java\nksql> terminate CSAS_UPTIMES_0;\n```", "```java\nMessage\n-------------------\nQuery terminated.\n-------------------\n```", "```java\nksql> DROP STREAM uptimes;\n```", "```java\nMessage\n------------------------------\nSource UPTIMES was dropped.\n------------------------------\n```", "```java\nksql> CREATE STREAM healthchecks_processed AS SELECT serialNumber, CAST((STRINGTOTIMESTAMP('2017-11-18','yyyy-MM-dd''T''HH:mm:ss.SSSZ')-STRINGTOTIMESTAMP(lastStartedAt,'yyyy-MM-dd'))/86400/1000 AS string) AS uptime FROM healthchecks;\n```", "```java\nMessage\n----------------------------\nStream created and running\n----------------------------\n```", "```java\nksql> CREATE STREAM uptimes WITH (kafka_topic='uptimes', value_format='delimited') AS SELECT * FROM healthchecks_processed;\n```", "```java\nMessage\n----------------------------\nStream created and running\n----------------------------\n```", "```java\n$ ./bin/kafka-console-consumer --bootstrap-server localhost:9092 --topic uptimes --property print.key=true\n```", "```java\nEW05-HV36   33\nBO58-SB28   20\nDV03-ZT93   46\n...\n```"]