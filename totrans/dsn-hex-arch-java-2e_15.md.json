["```java\n    quarkus.datasource.db-kind=h2\n    quarkus.datasource.jdbc.url=jdbc:h2:mem:default;DB_CLO\n      SE_DELAY=-1.;NON_KEYWORDS=user\n    quarkus.hibernate-orm.database.generation=drop-and-\n      create\n    ```", "```java\n    package dev.davivieira.layered.data.entity;\n    import jakarta.persistence.Entity;\n    import jakarta.persistence.GeneratedValue;\n    import jakarta.persistence.GenerationType;\n    import jakarta.persistence.Id;\n    import lombok.*;\n    @Entity\n    @Getter\n    @Setter\n    @RequiredArgsConstructor\n    @NoArgsConstructor\n    public class User {\n        @Id\n        @GeneratedValue(strategy =\n        GenerationType.IDENTITY)\n        private Long id;\n        @NonNull\n        private String email;\n        @NonNull\n        private String password;\n    }\n    ```", "```java\n    package dev.davivieira.layered.data.repository;\n    import dev.davivieira.layered.data.entity.User;\n    import io.quarkus.hibernate.orm.\n      panache.PanacheRepository;\n    import jakarta.enterprise.context.ApplicationScoped;\n    import java.util.Optional;\n    @ApplicationScoped\n    public class UserRepository implements PanacheReposi\n      tory<User> {\n        public Optional<User> findByEmail(String email) {\n            return find(\"email\",\n            email).firstResultOptional();\n        }\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class UserService {\n        @Inject\n        UserRepository userRepository;\n        /** Code omitted **/\n    }\n    ```", "```java\n    public record UserDto (String email, String password)\n      {}\n    ```", "```java\n    @Transactional\n    public String createAccount(UserDto userDto) throws\n      Exception {\n        isEmailAlreadyUsed(userDto.email());\n        var user = new User(userDto.email(),\n        userDto.password());\n        userRepository.persist(user);\n        return \"User successfully created\";\n    }\n    private void isEmailAlreadyUsed(String email) throws\n      Exception {\n        if(userRepository.findByEmail(email).isPresent()){\n            throw new Exception(\"Email address already\n                                 exist\");\n        }\n    }\n    ```", "```java\n    public String login(UserDto userDto) {\n        var optionalUser =\n        userRepository.findByEmail(userDto.email());\n        if (optionalUser.isPresent()) {\n            var user = optionalUser.get();\n            var isThePasswordValid =\n            isThePasswordValid(user, userDto);\n            if (isThePasswordValid) {\n                return \"Authenticated with success\";\n            } else {\n                return \"Invalid credentials\";\n            }\n        } else {\n            return \"Invalid credentials\";\n        }\n    }\n    private boolean isThePasswordValid(User user, UserDto\n      userDto) {\n        return\n        user.getPassword().equals(userDto.password());\n    }\n    ```", "```java\n    @Path(\"/user\")\n    public class UserEndpoint {\n        @Inject\n        UserService userService;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @POST\n    @Produces(MediaType.TEXT_PLAIN)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Path(\"/register\")\n    public String register(UserDto userDto) throws Excep\n      tion {\n        return userService.createAccount(userDto);\n    }\n    ```", "```java\n    @POST\n    @Produces(MediaType.TEXT_PLAIN)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Path(\"/login\")\n    public String login(UserDto userDto) {\n        return userService.login(userDto);\n    }\n    ```", "```java\n@QuarkusTest\npublic class UserServiceTest {\n    @Inject\n    UserService userService;\n    @Test\n    public void\n     givenTheUserEmailAlreadyExistsAnExceptionIsThrown()\n     throws Exception {\n        var userDto = new UserDto(\"test@davivieira.dev\",\n        \"password\");\n        userService.createAccount(userDto);\n        Assertions.assertThrows(\n                Exception.class,\n                ()-> userService.createAccount(userDto)\n        );\n    }\n    /** Code omitted **/\n}\n```", "```java\n    @Getter\n    @Setter\n    @RequiredArgsConstructor\n    @NoArgsConstructor\n    public class User {\n        private Long id;\n        @NonNull\n        private String email;\n        @NonNull\n        private String password;\n        public User(Long id, String email, String\n        password) {\n            this.id = id;\n            this.email = email;\n            this.password = password;\n        }\n        /** Code omitted **/\n    }\n    ```", "```java\n    public void isEmailAlreadyUsed(Optional<User> op\n      tionalUser) throws Exception {\n        if(optionalUser.isPresent()) {\n            throw new Exception(\n            \"Email address already exist\");\n        }\n    }\n    ```", "```java\n    public String login(Optional<User> optionalUser) {\n        if (optionalUser.isPresent()) {\n            var user = optionalUser.get();\n            var isThePasswordValid =\n            isThePasswordValid(user);\n            if (isThePasswordValid) {\n                return \"Authenticated with success\";\n            } else {\n                return \"Invalid credentials\";\n            }\n        } else {\n            return \"Invalid credentials\";\n        }\n    }\n    private boolean isThePasswordValid(User user) {\n        return user.getPassword().equals(this.password);\n    }\n    ```", "```java\n    public interface UserAccessUseCase {\n        String createAccount(User user) throws Exception;\n        String login(User user);\n    }\n    ```", "```java\n    public interface UserAccessOutputPort {\n        Optional<User> findByEmail(String email);\n        void persist(User user);\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class UserAccessInputPort implements UserAcces\n      sUseCase {\n    @Inject\n    UserAccessOutputPort userAccessOutputPort;\n    @Override\n    public String createAccount(User user) throws\n    Exception {\n            user.isEmailAlreadyUsed\n              (userAccessOutputPort.findByEmail\n                (user.getEmail()));\n        userAccessOutputPort.persist(user);\n        return \"User successfully created\";\n    }\n    @Override\n    public String login(User user) {\n        return\n        user.login(\n        userAccessOutputPort\n        .findByEmail(user.getEmail()));\n       }\n    }\n    ```", "```java\n    @Path(\"/user\")\n    public class UserAccessInputAdapter {\n        @Inject\n        UserAccessUseCase userAccessUseCase;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @POST\n    @Produces(MediaType.TEXT_PLAIN)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Path(\"/register\")\n    public String register(UserDto userDto) throws Excep\n      tion {\n        return userAccessUseCase.createAccount(new\n        User(userDto.email(), userDto.password()));\n    }\n    ```", "```java\n    @POST\n    @Produces(MediaType.TEXT_PLAIN)\n    @Consumes(MediaType.APPLICATION_JSON)\n    @Path(\"/login\")\n    public String login(UserDto userDto) {\n        return userAccessUseCase.login(new\n        User(userDto.email(), userDto.password()));\n    }\n    ```", "```java\n    @ApplicationScoped\n    public class UserAccessOutputAdapter implements\n      UserAccessOutputPort {\n        @Inject\n        UserRepository userRepository;\n        /** Code omitted **/\n    }\n    ```", "```java\n    @Override\n    public Optional<User> findByEmail(String email) {\n        return UserMapper\n               .userDataToDomain(\n               userRepository.findByEmail(email));\n    }\n    ```", "```java\n    @Transactional\n    @Override\n    public void persist(User user) {\n        var userData = UserMapper.userDomainToData(user);\n        userRepository.persist(userData);\n    }\n    ```", "```java\n@QuarkusTest\npublic class UserServiceTest {\n@Test\npublic void givenTheUserEmailAlreadyExistsAnException\n  IsThrown() {\n    var user = new User(\"test@davivieira.dev\", \"password\");\n    var optionalUser = Optional.of(user);\n    Assertions.assertThrows(\n            Exception.class,\n            ()-> user.isEmailAlreadyUsed(optionalUser)\n    );\n}\n/** Code omitted **/\n}\n```"]