["```java\nlibraryDependencies += \"org.scalacheck\" %% \"scalacheck\" % \"1.14.0\" % Test\n```", "```java\nscala> import org.scalacheck.Prop.forAll\nimport org.scalacheck.Prop.forAll\n\nscala> val stringLengthProp = forAll { (_: String).length >= 0 }\nstringLength: org.scalacheck.Prop = Prop\n\nscala> stringLengthProp.check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: Int, b: Int) => a + b == b + a).check\n+ OK, passed 100 tests.\nscala> forAll((a: Int, b: Int) => a * b == b * a).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: String, b: String) => a + b == b + a).check\n! Falsified after 1 passed tests.\n> ARG_0: \"\\u0001\"\n> ARG_0_ORIGINAL \n> ARG_1: \"\\u0000\"\n> ARG_1_ORIGINAL: \n```", "```java\nscala> forAll((a: String) => a + \"\" == \"\" + a).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: Int, b: Int, c: Int) => (a + b) + c == a + (b + c)).check\n+ OK, passed 100 tests.\nscala> forAll((a: Int, b: Int, c: Int) => (a * b) * c == a * (b * c)).check\n+ OK, passed 100 tests.\nscala> forAll((a: String, b: String, c: String) => \n   (a + b) + c == a + (b + c)).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: Int) => a + 0 == a && 0 + a == a).check\n+ OK, passed 100 tests.\nscala> forAll((a: Int) => a * 1 == a && 1 * a == a).check\n+ OK, passed 100 tests.\nscala> forAll((a: String) => a + \"\" == a && \"\" + a == a).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: String) => a.sorted.length == a.length).check\n+ OK, passed 100 tests.\nscala> forAll((a: String) => a.toUpperCase().length == a.length).check\n! Falsified after 50 passed tests.\n> ARG_0: \n> ARG_0_ORIGINAL: \n```", "```java\nscala> forAll(Gen.asciiStr)((a: String) => a.toUpperCase().length == a.length).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: String) => \n  a.toUpperCase().toUpperCase() == a.toUpperCase()).check\n+ OK, passed 100 tests.\nscala> forAll((a: String) => a.sorted.sorted.sorted == a.sorted).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: Int) => a * 0 * 0 == a * 0) .check\n+ OK, passed 100 tests.\n```", "```java\nscala> def factorial(n: Long): Long = if (n < 2) n else n * factorial(n-1)\nfactorial: (n: Long)Long\n\nscala> forAll((a: Byte) => a > 2 ==> \n  (factorial(a) == a * factorial(a - 1))).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll((a: String) => a.reverse.reverse == a).check\n+ OK, passed 100 tests.\nscala> forAll((a: Int, b: Int) => a + b - b == a).check\n+ OK, passed 100 tests.\n```", "```java\nscala> forAll { a: String =>\n     | val chars = a.toCharArray\n     | java.util.Arrays.sort(chars)\n     | val b = String.valueOf(chars)\n     | a.sorted == b\n     | }.check\n+ OK, passed 100 tests.\n```", "```java\nscala> val prop = forAll { a: String => a.nonEmpty ==> (a.reverse.reverse == a) }\nprop: org.scalacheck.Prop = Prop\n\nscala> val timed = within(10000)(prop)\ntimed: org.scalacheck.Prop = Prop\n\nscala> Test.check(timed) {\n     | _.withMinSuccessfulTests(100000).withWorkers(4).withMaxDiscardRatio(3)\n     | }\nres47: org.scalacheck.Test.Result = Result(Failed(List(),Set(Timeout)),0,0,Map(),10011)\n```", "```java\nscala> forAll { a: String =>\n     |   classify(a.isEmpty, \"empty string\", \"non-empty string\") {\n     |     a.sorted.length ?= a.length\n     |   }\n     | }.check()\n+ OK, passed 100 tests.\n> Collected test data:\n96% non-empty string\n4% empty string\n```", "```java\nscala> val prop2 = \"Division by zero\" |: protect(forAll((a: Int) => a / a == 1))\nprop2: org.scalacheck.Prop = Prop\n\nscala> prop2.check()\n! Exception raised on property evaluation.\n> Labels of failing property:\nDivision by zero\n> ARG_0: 0\n> Exception: java.lang.ArithmeticException: / by zero\n$line74.$read$$iw$$iw$$iw$$iw$$iw$$iw$$iw$$iw$.$anonfun$prop2$2(<console>:2\n  3)\n...\n```", "```java\n    forAll { (a: Int, b: Int, c: Int, d: String) =>\n      val multiplicationLaws = all(\n        \"Commutativity\" |: (a * b ?= b * a),\n        \"Associativity\" |: ((a * b) * c ?= a * (b * c)),\n        \"Identity\" |: all(a * 1 ?= a, 1 * a ?= a)\n      ) :| \"Multiplication laws\"\n      val stringProps = atLeastOne(d.isEmpty, d.nonEmpty)\n      all(multiplicationLaws, stringProps)\n    }.check()\n\n+ OK, passed 100 tests.\n```", "```java\nsealed abstract class Gen[+T] extends Serializable { self =>\n  ...\n  def apply(p: Gen.Parameters, seed: Seed): Option[T]\n  def sample: Option[T]\n  ...\n}\n```", "```java\ndef literalGen[T <: Singleton](t: T): Gen[T] = Gen.const(t)\nimplicit val myGen: Arbitrary[42] = Arbitrary(literalGen(42))\nval literalProp = forAll((_: 42) == 42).check\n```", "```java\nsealed trait Rank\ncase class SymRank(s: Char) extends Rank {\n  override def toString: String = s.toString\n}\ncase class NumRank(n: Int) extends Rank {\n  override def toString: String = n.toString\n}\ncase class Card(suit: Char, rank: Rank) {\n  override def toString: String = s\"$suit $rank\"\n}\n```", "```java\nval suits = Gen.oneOf('♡', '♢', '♤', '♧')\nval numbers = Gen.choose(2, 10).map(NumRank)\nval symbols = Gen.oneOf('A', 'K', 'Q', 'J').map(SymRank)\n```", "```java\nval full: Gen[Card] = for {\n  suit <- suits\n  rank <- Gen.frequency((9, numbers), (4, symbols))\n} yield Card(suit, rank)\n```", "```java\nval piquet: Gen[Card] = full.suchThat {\n  case Card(_, _: SymRank) => true\n  case Card(_, NumRank(n)) => n > 5\n}\n```", "```java\nscala> forAll(piquet) { card =>\n     | Prop.collect(card)(true)\n     | }.check\n+ OK, passed 100 tests.\n> Collected test data:\n8% ♡ J\n6% ♢ 7\n6% ♡ 10\n... (couple of lines more)\nscala> forAll(full) { card =>\n     | Prop.collect(card)(true)\n     | }.check\n+ OK, passed 100 tests.\n> Collected test data:\n6% ♡ 3\n5% ♢ 3\n... (a lot more lines)\n```", "```java\nval handOfCards: Gen[List[Card]] = Gen.listOfN(6, piquet)\n```", "```java\nscala> forAll(handOfCards) { hand: Seq[Card] =>\n     | Prop.collect(hand.mkString(\",\"))(true)\n     | }.check\n! Gave up after only 58 passed tests. 501 tests were discarded.\n> Collected test data:\n2% ♤ 8,♤ 10,♤ 8,♤ 7,♡ Q,♢ 8\n```", "```java\nval handOfCards = Gen.containerOfN[Set, Card](6, piquet)\nscala> forAll(handOfCards) { hand =>\n     | Prop.collect(hand.mkString(\",\"))(true)\n     | }.check\n! Gave up after only 75 passed tests. 501 tests were discarded.\n> Collected test data:\n1% ♡ A,♤ J,♡ K,♢ 6,♧ K,♧ A\n1% ♤ 9,♧ A,♧ 8,♧ 9\n```", "```java\nval piquetNumbers = Gen.choose(6, 10).map(NumRank)\n\nval piquet: Gen[Card] = for {\n  suit <- suits\n  rank <- Gen.frequency((5, piquetNumbers), (4, symbols))\n} yield Card(suit, rank)\n```", "```java\nval handOfCards = Gen.containerOfN[Set, Card](6, piquet).retryUntil(_.size == 6)\n\nscala> forAll(handOfCards) { hand =>\n     | Prop.collect(hand.mkString(\",\"))(true)\n     | }.check\n+ OK, passed 100 tests.\n> Collected test data:\n1% ♤ 9,♢ 9,♧ 9,♢ Q,♧ J,♤ 10\n...\n```", "```java\nscala> forAllNoShrink { num: Int =>\n     | num < 42\n     | }.check\n! Falsified after 0 passed tests.\n> ARG_0: 2008612603\n```", "```java\nscala> forAllNoShrink(Gen.listOfN(1000, Arbitrary.arbString.arbitrary)) {\n     | _.forall(_.length < 10)\n     | }.check\n! Falsified after 10 passed tests.\n> ARG_0: List  \n\n  \",\n... // a lot of similar lines\n```", "```java\nscala> forAll(Gen.listOfN(1000, Arbitrary.arbString.arbitrary)) {\n     | _.forall(_.length < 10)\n     | }.check\n! Falsified after 10 passed tests.\n> ARG_0: List(\"\")\n> ARG_0_ORIGINAL: // a long list as before\n```", "```java\nval intShrink: Shrink[Int] = implicitly[Shrink[Int]]\nscala> intShrink.shrink(2008612603).toList\nres23: List[Int] = List(1004306301, -1004306301, 502153150, -502153150, 251076575, -251076575, 125538287, -125538287, 62769143, -62769143, 31384571, -31384571, 15692285, -15692285, 7846142, -7846142, 3923071, -3923071, 1961535, -1961535, 980767, -980767, 490383, -490383, 245191, -245191, 122595, -122595, 61297, -61297, 30648, -30648, 15324, -15324, 7662, -7662, 3831, -3831, 1915, -1915, 957, -957, 478, -478, 239, -239, 119, -119, 59, -59, 29, -29, 14, -14, 7, -7, 3, -3, 1, -1, 0)\n```", "```java\nscala> forAll { (_: Int) < 42 }.check\n! Falsified after 0 passed tests.\n> ARG_0: 47\n> ARG_0_ORIGINAL: 800692446\n\nscala> forAll { (_: Int) < 42 }.check\n! Falsified after 0 passed tests.\n> ARG_0: 54\n> ARG_0_ORIGINAL: 908148321\n\nscala> forAll { (_: Int) < 42 }.check\n! Falsified after 2 passed tests.\n> ARG_0: 57\n> ARG_0_ORIGINAL: 969910515\n\nscala> forAll { (_: Int) < 42 }.check\n! Falsified after 6 passed tests.\n> ARG_0: 44\n> ARG_0_ORIGINAL: 745869268\n```"]