["```java\n@FunctionalInterface\npublic static interface Publisher<T> {\n    public void subscribe(Subscriber<? super T> subscriber);\n}\n```", "```java\nSubmissionPublisher<?> publisher = new SubmissionPublisher<>();\nSubmissionPublisher<?> publisher = new SubmissionPublisher<>(ForkJoinPool.commonPool(), Flow.defaultBufferSize());\n```", "```java\nSubmissionPublisher<?> publisher = new SubmissionPublisher<>(Executors.newCachedThreadPool(), 512);\n```", "```java\npublic class MyPublisher extends SubmissionPublisher<String> {\n    public MyPublisher() {\n        super(Executors.newFixedThreadPool(1), Flow.defaultBufferSize());\n    }\n}\n```", "```java\npublic static interface Subscriber<T> {\n    public void onSubscribe(Subscription subscription);\n    public void onNext(T item);\n    public void onError(Throwable throwable);\n    public void onComplete();\n}\n```", "```java\npublic static interface Subscription {\n    public void request(long n);\n    public void cancel();\n}\n```", "```java\n    package com.packt.java.chapter17;\n    public class Exercise1 {\n        public static void main(String[] args) {\n        // write your code here\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.SubmissionPublisher;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n        }\n    }\n    ```", "```java\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n        }\n        @Override\n        public void onNext(String item) {\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n        private Flow.Subscription subscription;\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n        }\n        @Override\n        public void onNext(String item) {\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n        @Override\n        public void onNext(String item) {\n            System.out.println(item);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n        @Override\n        public void onNext(String item) {\n            System.out.println(item);\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n        @Override\n        public void onError(Throwable throwable) {\n            System.out.println(throwable.getMessage());\n        }\n        @Override\n        public void onComplete() {\n            System.out.println(\"completed\");\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.SubmissionPublisher;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n            LipsumSubscriber lipsumSubscriber = new LipsumSubscriber();\n            publisher.subscribe(lipsumSubscriber);\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.SubmissionPublisher;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n            LipsumSubscriber lipsumSubscriber = new LipsumSubscriber();\n            publisher.subscribe(lipsumSubscriber);\n            String filePath = \"res/lipsum.txt\";\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.stream.Stream;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n            LipsumSubscriber lipsumSubscriber = new LipsumSubscriber();\n            publisher.subscribe(lipsumSubscriber);\n            String filePath = \"res/lipsum.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                words.flatMap((l) -> Arrays.stream(l.split(\"[\\\\s.,\\\\n]+\")))              .forEach(publisher::submit);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.stream.Stream;\n    public class Exercise1 {\n        public static void main(String[] args) {\n            SubmissionPublisher<String> publisher = new SubmissionPublisher<>();\n            LipsumSubscriber lipsumSubscriber = new LipsumSubscriber();\n            publisher.subscribe(lipsumSubscriber);\n            String filePath = \"res/lipsum.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                words.flatMap((l) -> Arrays.stream(l.split(\"[\\\\s.,\\\\n]+\")))              .forEach(publisher::submit);\n                publisher.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    ```", "```java\n    Lorem\n    ipsum\n    dolor\n    sit\n    amet\n    consectetur\n    adipiscing\n    elit\n    Pellentesque\n    malesuada\n    ultricies\n    ultricies\n    Curabitur\n    ...\n    ```", "```java\n    package com.packt.java.chapter17;\n    public class Exercise2 {\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    public class Exercise2 {\n        public static void main (String[] args) {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberPublisher extends SubmissionPublisher<String> {\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.Timer;\n    import java.util.TimerTask;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberPublisher extends SubmissionPublisher<String> {\n        final Timer timer = new Timer();\n        final TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n            }\n        };\n        public NumberPublisher() {\n        }\n    }\n    ```", "```java\n        @Override\n        public void close() {\n            timer.cancel();\n            super.close();\n        }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.Timer;\n    import java.util.TimerTask;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.function.Supplier;\n    public class NumberPublisher extends SubmissionPublisher<String> {\n        final Timer timer = new Timer();\n        final TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n            }\n        };\n        final Supplier<String> supplier;\n        public NumberPublisher(Supplier<String> supplier) {\n            this.supplier = supplier;\n        }\n        @Override\n        public void close() {\n            timer.cancel();\n            super.close();\n        }\n    }\n    ```", "```java\n            @Override\n            public void run() {\n                submit(supplier.get());\n            }\n        };\n        final Supplier<String> supplier;\n        public NumberPublisher(Supplier<String> supplier) {\n            this.supplier = supplier;\n        }\n        @Override\n        public void close() {\n            timer.cancel();\n            super.close();\n        }\n    }\n    ```", "```java\n            @Override\n            public void run() {\n                try {\n                    submit(supplier.get());\n                } catch (Exception e) {\n                    closeExceptionally(e);\n                }\n            }\n        };\n        final Supplier<String> supplier;\n        public NumberPublisher(Supplier<String> supplier) {\n            this.supplier = supplier;\n        }\n        @Override\n        public void close() {\n            timer.cancel();\n            super.close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.Timer;\n    import java.util.TimerTask;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.function.Supplier;\n    public class NumberPublisher extends SubmissionPublisher<String> {\n        final Timer timer = new Timer();\n        final TimerTask timerTask = new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    submit(supplier.get());\n                } catch (Exception e) {\n                    closeExceptionally(e);\n                }\n            }\n        };\n        final Supplier<String> supplier;\n        public NumberPublisher(Supplier<String> supplier) {\n            this.supplier = supplier;\n            this.timer.schedule(timerTask, 1000, 1000);\n        }\n        @Override\n        public void close() {\n            timer.cancel();\n            super.close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    ```", "```java\n    6   2e   22    4   11   59   73   41   60    8\n    42   91   99   89   17   96   54   24   77   36\n    12    9   64   0a   31   75    1   14   34   56\n    67   78   37   87   93   92  100   28   47    5\n    52   85   29   38   21   88   65   81   25   70\n    95    3   74    2   35   84   32   66   86   69\n    58   45   48   10   26   53   40   13   49   94\n    98   71   39   68   76   43   63   7g   72   80\n    61   46   57   18   79   27   20   83   82   33\n    97   2h   50   44   15   16   55   30   19   51\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                return words.flatMap((line) ->               Arrays.stream(line.split(\"[\\\\s\\\\n]+\")))\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                return words.flatMap((line) -> Arrays.stream(line.split(\"[\\\\s\\\\n]+\")))\n                        .filter((word) -> word.length() > 0)\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                return words.flatMap((line) ->               Arrays.stream(line.split(\"[\\\\s\\\\n]+\")))\n                        .filter((word) -> word.length() > 0)\n                        .toArray(String[]::new);\n            } catch (IOException e) {\n                e.printStackTrace();\n            } \n            return null;\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.function.Supplier;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                @Override\n                public String get() {\n                    return null;\n                }\n            };\n        }\n    }\n    ```", "```java\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    return null;\n                }\n            };\n        }\n    }\n    ```", "```java\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    return data[index];\n                }\n            };\n        }\n    }\n    ```", "```java\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    return data[index++];\n                }\n            };\n        }\n    }\n    ```", "```java\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    if (index < data.length - 1) {\n                        return data[index++];\n                    } else {\n                        return null;\n                    }\n                }\n            };\n        }\n    }\n    ```", "```java\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    if (index < data.length - 1) {\n                        return data[index++];\n                    } else {\n                        return null;\n                    }\n                }\n            };\n            NumberPublisher publisher = new NumberPublisher(supplier);\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.concurrent.Flow;\n    import java.util.function.Supplier;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    if (index < data.length - 1) {\n                        return data[index++];\n                    } else {\n                        return null;\n                    }\n                }\n            };\n            NumberPublisher publisher = new NumberPublisher(supplier);\n            publisher.subscribe(new Flow.Subscriber<>() {\n                Flow.Subscription subscription;\n                @Override\n                public void onSubscribe(Flow.Subscription subscription) {\n                    this.subscription = subscription;\n                    subscription.request(1);\n                }\n                @Override\n                public void onNext(String item) {\n                    System.out.println(\"onNext: \" + item);\n                    subscription.request(1);\n                }\n                @Override\n                public void onError(Throwable throwable) {\n                    System.out.println(\"onError: \" + throwable.getMessage());\n                }\n                @Override\n                public void onComplete() {\n                    System.out.println(\"onComplete()\");\n                }\n            });\n        }\n    }\n    ```", "```java\n    onNext: 6\n    onNext: 2e\n    onNext: 22\n    onNext: 4\n    onNext: 11\n    onNext: 59\n    onNext: 73\n    ...\n    ```", "```java\n    publisher.subscribe(new Flow.Subscriber<>() {\n                Flow.Subscription subscription;\n                @Override\n                public void onSubscribe(Flow.Subscription subscription) {\n                    this.subscription = subscription;\n                    subscription.request(1);\n                }\n                @Override\n                public void onNext(String item) {\n                    System.out.println(\"onNext: \" + Integer.valueOf(item));\n                    subscription.request(1);\n                }\n                @Override\n                public void onError(Throwable throwable) {\n                    System.out.println(\"onError: \" + throwable.getMessage());\n                }\n                @Override\n                public void onComplete() {\n                    System.out.println(\"onComplete()\");\n                }\n    });\n    ```", "```java\n    onNext: 6\n    onError: For input string: \"2e\"\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberProcessor extends SubmissionPublisher<String> implements Flow.Processor<String, String> {\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n        }\n        @Override\n        public void onNext(String item) {\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberProcessor extends SubmissionPublisher<String> implements   Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberProcessor extends SubmissionPublisher<String> implements Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n        }\n        @Override\n        public void onComplete() {\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    public class NumberProcessor extends SubmissionPublisher<String> implements   Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n            closeExceptionally(throwable);\n        }\n        @Override\n        public void onComplete() {\n            close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.function.Predicate;\n    public class NumberProcessor extends SubmissionPublisher<String> implements   Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        private Predicate<String> predicate = new Predicate<String>() {\n            @Override\n            public boolean test(String s) {\n                return false;\n            }\n        };\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n            closeExceptionally(throwable);\n        }\n        @Override\n        public void onComplete() {\n            close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.function.Predicate;\n    public class NumberProcessor extends SubmissionPublisher<String> implements   Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        private Predicate<String> predicate = new Predicate<String>() {\n            @Override\n            public boolean test(String s) {\n                try {\n                    Integer.valueOf(s);\n                    return true;\n                } catch (NumberFormatException e) {\n                    return false;\n                }\n            }\n        };\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n            closeExceptionally(throwable);\n        }\n        @Override\n        public void onComplete() {\n            close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.util.concurrent.Flow;\n    import java.util.concurrent.SubmissionPublisher;\n    import java.util.function.Predicate;\n    public class NumberProcessor extends SubmissionPublisher<String> implements Flow.Processor<String, String> {\n        private Flow.Subscription subscription;\n        private Predicate<String> predicate = new Predicate<String>() {\n            @Override\n            public boolean test(String s) {\n                try {\n                    Integer.valueOf(s);\n                    return true;\n                } catch (NumberFormatException e) {\n                    return false;\n                }\n            }\n        };\n        @Override\n        public void onSubscribe(Flow.Subscription subscription) {\n            this.subscription = subscription;\n            this.subscription.request(1);\n        }\n        @Override\n        public void onNext(String item) {\n            if (predicate.test(item)) {\n                submit(item);\n            }\n            this.subscription.request(1);\n        }\n        @Override\n        public void onError(Throwable throwable) {\n            closeExceptionally(throwable);\n        }\n        @Override\n        public void onComplete() {\n            close();\n        }\n    }\n    ```", "```java\n    package com.packt.java.chapter17;\n    import java.io.IOException;\n    import java.nio.file.Files;\n    import java.nio.file.Paths;\n    import java.util.Arrays;\n    import java.util.concurrent.Flow;\n    import java.util.function.Supplier;\n    import java.util.stream.Stream;\n    public class Exercise2 {\n        public static void main(String[] args) {\n            Supplier<String> supplier = new Supplier<String>() {\n                int index;\n                @Override\n                public String get() {\n                    String[] data = getStrings();\n                    if (index < data.length - 1) {\n                        return data[index++];\n                    } else {\n                        return null;\n                    }\n                }\n            };\n            NumberPublisher publisher = new NumberPublisher(supplier);\n            NumberProcessor processor = new NumberProcessor();\n            publisher.subscribe(processor);\n            processor.subscribe(new Flow.Subscriber<>() {\n                Flow.Subscription subscription;\n                @Override\n                public void onSubscribe(Flow.Subscription subscription) {\n                    this.subscription = subscription;\n                    subscription.request(1);\n                }\n                @Override\n                public void onNext(String item) {\n                    System.out.println(\"onNext: \" + Integer.valueOf(item));\n                    subscription.request(1);\n                }\n                @Override\n                public void onError(Throwable throwable) {\n                    System.out.println(\"onError: \" + throwable.getMessage());\n                }\n                @Override\n                public void onComplete() {\n                    System.out.println(\"onComplete()\");\n                }\n            });\n        }\n        private static String[] getStrings() {\n            String filePath = \"res/numbers.txt\";\n            try (Stream<String> words = Files.lines(Paths.get(filePath))) {\n                return words.flatMap((line) -> Arrays.stream(line.split(\"[\\\\s\\\\n]+\")))\n                        .filter((word) -> word.length() > 0)\n                        .toArray(String[]::new);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n    }\n    ```", "```java\n    onNext: 6\n    onNext: 22\n    onNext: 4\n    onNext: 11\n    onNext: 59\n    onNext: 73\n    onNext: 41\n    onNext: 60\n    onNext: 8\n    ...\n    ```"]