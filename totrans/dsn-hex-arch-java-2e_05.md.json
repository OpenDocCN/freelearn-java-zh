["```java\npublic interface RouterNetworkUseCase {\n    Router addNetworkToRouter(RouterId,\n    Network network);\n    Router getRouter(RouterId routerId);\n}\n```", "```java\npublic class RouterNetworkInputPort implements RouterNet\n  workUseCase {\n/** code omitted **/\n    @Override\n    public Router getRouter(RouterId routerId) {\n        return fetchRouter(routerId);\n    }\n    private Router fetchRouter(RouterId routerId) {\n        return routerNetworkOutputPort.\n               fetchRouterById(routerId);\n    }\n/** code omitted **/\n}\n```", "```java\npublic Router getRouter(Map<String, String> params) {\n    var routerId = RouterId.\n    withId(params.get(\"routerId\"));\n    return routerNetworkUseCase.getRouter(routerId);\n}\n```", "```java\n@Override\npublic Router processRequest(Object requestParams){\n/** code omitted **/\n    if (exchange.\n      getRequestURI().getPath().equals(\"/network/add\")) {\n        try {\n            router = this.addNetworkToRouter(params);\n        } catch (Exception e) {\n            exchange.sendResponseHeaders(\n            400, e.getMessage().getBytes().length);\n            OutputStream output = exchange.\n            getResponseBody();\n            output.write(e.getMessage().getBytes());\n            output.flush();\n        }\n    }\n    if (exchange.\n      getRequestURI().getPath().contains(\"/network/get\")) {\n        router = this.getRouter(params);\n    }\n/** code omitted **/\n}\n```", "```java\n<html>\n  <head>\n    <title>Topology & Inventory | Add Network</title>\n    /** code omitted **/\n  </head>\n  <body>\n      /** code omitted **/\n      <form name=\"addNetwork\" onsubmit=\"return\n       false;\">\n      /** code omitted **/\n      </form>\n    <script src=\"img/networkTools.js\"></script>\n  </body>\n</html>\n```", "```java\nfunction addNetworkToRouter() {\n    const routerId = document.\n    getElementById(\"routerId\").value;\n    const address = document.\n    getElementById(\"address\").value;\n    const name = document.getElementById(\"name\").value;\n    const cidr = document.getElementById(\"cidr\").value;\n    const xhttp = new XMLHttpRequest();\n    xhttp.open(\"GET\",\n    \"http://localhost:8080/network/add?\n        routerId=\" + routerId + \"&\" +\n        \"address=\" + address + \"&\" +\n        \"name=\" + name + \"&\" +\n        \"cidr=\" + cidr, true);\n    xhttp.onload = function(\n        if (xhttp.status === 200) {\n            document.\n            getElementById(\"message\").\n            innerHTML = \"Network added with success!\"\n        } else {\n            document.\n            getElementById(\"message\").\n            innerHTML = \"An error occurred while\n            trying to add the network.\"\n        }\n    };\n    xhttp.send();\n}\n```", "```java\nfunction getRouter() {\n    const routerId = document.\n    getElementById(\"routerId\").value;\n    var xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n        console.log(this.responseText);\n        if (this.readyState == 4 && this.status == 200) {\n            const json = JSON.parse(this.responseText)\n            createTree(json)\n        }\n    };\n    xhttp.open(\n    \"GET\",\n    \"http://localhost:8080/network/get?routerId=\"+routerId,\n    true);\n    xhttp.send();\n}\nfunction createTree(json) {\n    const container = document.getElementById(\"container\");\n    const vt = new VTree(container);\n    const reader = new Vtree.reader.Object();\n    var data = reader.read(json);\n    vt.data(data).update();\n}\n```", "```java\n    getRouter request is to confirm whether the application returns an HTTP 200 response code when we try to retrieve a router by passing a router ID.\n    ```", "```java\n    pm.test(\"Status code is 200\", () => {\n      pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"The response has all properties\", () => {\n      const responseJson = pm.response.json();\n      pm.expect(\n          responseJson.switch.networks).\n          to.have.lengthOf(3);\n      pm.expect(\n          responseJson.switch.networks[0].networkName).\n          to.eql('HR');\n      pm.expect(\n          responseJson.switch.networks[1].networkName).\n          to.eql('Marketing');\n      pm.expect(\n          responseJson.switch.networks[2].networkName).\n          to.eql('Engineering');\n    });\n    ```", "```java\n    pm.test(\"Status code is 200\", () => {\n      pm.expect(pm.response.code).to.eql(200);\n    });\n    pm.test(\"The response has all properties\", () => {\n      const responseJson = pm.response.json();\n      pm.expect(\n          responseJson.switch.networks).\n          to.have.lengthOf(4);\n      pm.expect(\n          responseJson.switch.networks[3].networkName).\n          to.eql('Finance');\n    });\n    ```", "```java\n    newman run topology-inventory.postman_collection.json\n    ```", "```java\n    $ curl \"https://downloads.apache.org/kafka/3.4.0/kafka_2.12-3.4.0.tgz\" -o ./kafka_2.12-3.4.0.tgz\n    $ tar -xzf kafka_2.12-3.4.0.tgz\n    zookeeper service:\n\n    ```", "```java\n    $ bin/kafka-server-start.sh config/server.properties\n    ```", "```java\n\n    ```", "```java\n    NotifyEventOutputPort output port:\n\n    ```", "```java\n\n    ```", "```java\n    public class NotifyEventKafkaAdapter implements Noti\n      fyEventOutputPort {\n        private static String KAFKA_BROKERS =\n          \"localhost:9092\";\n        private static String\n          GROUP_ID_CONFIG=\"consumerGroup1\";\n        private static String CLIENT_ID=\"hexagonal-\n          client\";\n        private static String TOPIC_NAME=\n        \"topology-inventory-events\";\n        private static String\n          OFFSET_RESET_EARLIER=\"earliest\";\n        private static Integer\n          MAX_NO_MESSAGE_FOUND_COUNT=100;\n        /** code omitted **/\n    }\n    ```", "```java\n    private static Producer<Long, String> getProducer(){\n        Properties properties = new Properties();\n        properties.put(ProducerConfig.\n        BOOTSTRAP_SERVERS_CONFIG, KAFKA_BROKERS);\n        properties.put(ProducerConfig.\n        CLIENT_ID_CONFIG, CLIENT_ID);\n        properties.put(ProducerConfig.\n        KEY_SERIALIZER_CLASS_CONFIG,\n        LongSerializer.class.getName());\n        properties.put(ProducerConfig.\n        VALUE_SERIALIZER_CLASS_CONFIG,\n        StringSerializer.class.getName());\n        return new KafkaProducer<>(properties);\n    }\n    ```", "```java\n    public static Consumer<Long, String> getConsumer(){\n        Properties properties = new Properties();\n        properties.put(ConsumerConfig.\n        BOOTSTRAP_SERVERS_CONFIG,KAFKA_BROKERS);\n        properties.put(ConsumerConfig.\n        GROUP_ID_CONFIG, GROUP_ID_CONFIG);\n        properties.put(ConsumerConfig.\n        KEY_DESERIALIZER_CLASS_CONFIG,\n        LongDeserializer.class.getName());\n        properties.put(ConsumerConfig.\n        VALUE_DESERIALIZER_CLASS_CONFIG,\n        StringDeserializer.class.getName());\n        properties.put\n          (ConsumerConfig.MAX_POLL_RECORDS_CONFIG,\n                  1);\n        properties.put(ConsumerConfig.\n        ENABLE_AUTO_COMMIT_CONFIG,\"false\");\n        properties.put(ConsumerConfig.\n        AUTO_OFFSET_RESET_CONFIG, OFFSET_RESET_EARLIER);\n        Consumer<Long, String> consumer =\n        new KafkaConsumer<>(properties);\n        consumer.\n        subscribe(Collections.singletonList(TOPIC_NAME));\n        return consumer;\n    }\n    ```", "```java\n    @Override\n    public void sendEvent(String eventMessage){\n        var record = new ProducerRecord<Long, String>(\n                TOPIC_NAME, eventMessage);\n        try {\n            var metadata = producer.send(record).get();\n            System.out.println(\"Event message \" +\n                    \"sent to the topic \"+TOPIC_NAME+\": \"\n                    +eventMessage+\".\");\n            getEvent();\n        }catch (Exception e){\n            e.printStackTrace();\n        }\n    }\n    ```", "```java\n    @Override\n    public String getEvent(){\n        int noMessageToFetch = 0;\n        AtomicReference<String> event =\n        new AtomicReference<>(\"\");\n        while (true) {\n        /** code omitted **/\n            consumerRecords.forEach(record -> {\n                event.set(record.value());\n            });\n        }\n        var eventMessage = event.toString();\n        if(sendToWebsocket)\n        sendMessage(eventMessage);\n        return eventMessage;\n    }\n    ```", "```java\n    public void sendMessage(String message){\n        try {\n            var client = new WebSocketClientAdapter(\n            new URI(\"ws://localhost:8887\"));\n            client.connectBlocking();\n            client.send(message);\n            client.closeBlocking();\n        } catch (URISyntaxException |\n                 InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n    ```", "```java\npublic class NotifyEventWebSocketAdapter extends WebSock\n  etServer {\n/** code omitted **/\npublic static void startServer() throws IOException, Inter\n  ruptedException {\n    var ws = new NotifyEventWebSocketAdapter(\n    new InetSocketAddress(\"localhost\", 8887));\n    ws.setReuseAddr(true);\n    ws.start();\n    System.out.println(\"Topology & Inventory\" +\n    \" webSocket started on port: \" + ws.getPort());\n    BufferedReader sysin =\n    new BufferedReader(new InputStreamReader(System.in));\n    while (true) {\n        String in = sysin.readLine();\n        ws.broadcast(in);\n        if (in.equals(\"exit\")) {\n            ws.stop();\n            break;\n        }\n    }\n}\n/** code omitted **/\n}\n```", "```java\nvoid setAdapter(String adapter) throws IOException, Inter\n  ruptedException {\n    switch (adapter) {\n        case \"rest\" -> {\n            routerOutputPort =\n            RouterNetworkH2Adapter.getInstance();\n            notifyOutputPort =\n            NotifyEventKafkaAdapter.getInstance();\n            usecase =\n            new RouterNetworkInputPort(routerOutputPort,\n            notifyOutputPort);\n            inputAdapter =\n            new RouterNetworkRestAdapter(usecase);\n            rest();\n            NotifyEventWebSocketAdapter.startServer();\n        }\n        default -> {\n            routerOutputPort =\n            RouterNetworkFileAdapter.getInstance();\n            usecase =\n            new RouterNetworkInputPort(routerOutputPort);\n            inputAdapter =\n            new RouterNetworkCLIAdapter(usecase);\n            cli();\n        }\n    }\n}\n```", "```java\npublic class WebSocketClientAdapter extends\n  org.java_websocket.client.WebSocketClient {\n    public WebSocketClientAdapter(URI serverUri) {\n        super(serverUri);\n    }\n    @Override\n    public void onMessage(String message) {\n        String channel = message;\n    }\n    @Override\n    public void onOpen(ServerHandshake handshake) {\n        System.out.println(\"Connection has opened\");\n    }\n    @Override\n    public void onClose(int code, String reason,\n    boolean remote) {\n        System.out.println(\"Connection has closed\");\n    }\n    @Override\n    public void onError(Exception e) {\n        System.out.println(\n        \"An error occurred. Check the exception below:\");\n        e.printStackTrace();\n    }\n}\n```", "```java\npublic class RouterNetworkInputPort implements RouterNet\n  workUseCase {\n    /** Code omitted **/\n    @Override\n    public Router addNetworkToRouter(\n    RouterId routerId,  Network network) {\n        var router = fetchRouter(routerId);\n        notifyEventOutputPort.\n        sendEvent(\"Adding \"+network.getName()\n        +\" network to router \"+router.getId().getUUID());\n        return createNetwork(router, network);\n    }\n    @Override\n    public Router getRouter(RouterId routerId) {\n        notifyEventOutputPort.\n        sendEvent(\n        \"Retrieving router ID\"+routerId.getUUID());\n        return fetchRouter(routerId);\n    }\n    /** Code omitted **/\n}\n```", "```java\nvar wsocket;\nfunction connect() {\n    wsocket = new WebSocket(\"ws://localhost:8887\");\n    wsocket.onopen = onopen;\n    wsocket.onmessage = onmessage;\n    wsocket.onclose = onclose;\n}\n    function onopen() {\n    console.log(\"Connected!\");\n}\n    function onmessage(event) {\n    console.log(\"Data received: \" + event.data);\n    var tag = document.createElement(\"div\");\n    tag.id = \"message\";\n    var text = document.createTextNode(\">>\"+event.data);\n    tag.appendChild(text);\n    var element = document.getElementById(\"events\");\n    element.appendChild(tag);\n}\n    function onclose(e) {\n    console.log(\"Connection closed.\");\n}\nwindow.addEventListener(\"load\", connect, false);\n```", "```java\njava -jar target/topology-inventory-1.0-SNAPSHOT-jar-with-dependencies.jar rest\nREST endpoint listening on port 8080...\nTopology & Inventory WebSocket started on port 8887...\n```"]