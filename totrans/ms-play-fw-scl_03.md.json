["```java\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Home</title>\n        </head>\n        <body>\n            <h1>Hello, World!</h1>\n        </body>\n    </html>\n    ```", "```java\n    package controllers\n\n    import play.api.mvc._\n    object AppController extends Controller {\n\n      def index = Action {\n        Ok(views.html.index())\n      }\n\n    }\n    ```", "```java\n    # Home page\n    GET           /                    controllers.AppController.index\n    ```", "```java\n    import play.core._\n    import play.core.Router._\n    import play.core.j._\n\n    import play.api.mvc._\n\n    import Router.queryString\n\n    object Routes extends Router.Routes {\n\n    private var _prefix = \"/\"\n\n    def setPrefix(prefix: String) {\n      _prefix = prefix\n      List[(String,Routes)]().foreach {\n        case (p, router) => router.setPrefix(prefix + (if(prefix.endsWith(\"/\")) \"\" else \"/\") + p)\n      }\n    }\n\n    def prefix = _prefix\n\n    lazy val defaultPrefix = { if(Routes.prefix.endsWith(\"/\")) \"\" else \"/\" }\n\n    // @LINE:5\n    private[this] lazy val controllers_AppController_index0 = Route(\"GET\", PathPattern(List(StaticPart(Routes.prefix))))\n\n    def documentation = List((\"\"\"GET\"\"\", prefix,\"\"\"controllers.AppController.index\"\"\")).foldLeft(List.empty[(String,String,String)]) { (s,e) => e.asInstanceOf[Any] match {\n      case r @ (_,_,_) => s :+ r.asInstanceOf[(String,String,String)]\n      case l => s ++ l.asInstanceOf[List[(String,String,String)]]\n    }}\n\n    def routes:PartialFunction[RequestHeader,Handler] = {\n\n    // @LINE:5\n    case controllers_AppController_index0(params) => {\n       call {\n            invokeHandler(controllers.AppController.index, HandlerDef(this, \"controllers.AppController\", \"index\", Nil,\"GET\", \"\"\" Routes\n     This file defines all application routes (Higher priority routes first)\n     ~~~~\n     Home page\"\"\", Routes.prefix + \"\"\"\"\"\"))\n       }\n    }\n\n    }\n\n    }\n    ```", "```java\ndef invokeHandler[T](call: => T, handler: HandlerDef)(implicit d: HandlerInvoker[T]): Handler = {\n      d.call(call, handler) match {\n        case javaAction: play.core.j.JavaAction => new play.core.j.JavaAction with RequestTaggingHandler {\n          def invocation = javaAction.invocation\n          val annotations = javaAction.annotations\n          val parser = javaAction.annotations.parser\n          def tagRequest(rh: RequestHeader) = doTagRequest(rh, handler)\n        }\n        case action: EssentialAction => new EssentialAction with RequestTaggingHandler {\n          def apply(rh: RequestHeader) = action(rh)\n          def tagRequest(rh: RequestHeader) = doTagRequest(rh, handler)\n        }\n        case ws @ WebSocket(f) => {\n          WebSocket[ws.FRAMES_TYPE](rh => f(doTagRequest(rh, handler)))(ws.frameFormatter)\n        }\n        case handler => handler\n      }\n```", "```java\ncase class HandlerDef(ref: AnyRef, routerPackage: String, controller: String, method: String, parameterTypes: Seq[Class[_]], verb: String, comments: String, path: String)\n```", "```java\nsourceGenerators in Compile <+= (state, confDirectory, sourceManaged in Compile, routesImport, generateReverseRouter, generateRefReverseRouter, namespaceReverseRouter) map {     \n  (s, cd, sm, ri, grr, grrr, nrr) => RouteFiles(s, Seq(cd), sm, ri, grr, grrr, nrr)    \n},\n```", "```java\n @(tasks: List[Task], taskForm: Form[String])\n\n@import helper._\n\n@main(\"Task Tracker\") {\n\n    <h2>Task Tracker</h2>\n\n    <div>\n    @form(routes.TaskController.newTask) {\n\n        @taskForm.globalError.map { error =>\n            <p class=\"error\">\n                @error.message\n            </p>\n        }\n        <form>\n            <input type=\"text\" name=\"taskName\" placeholder=\"Add a new Task\" required>\n\n            <input type=\"submit\" value=\"Add\">\n        </form>\n    }\n    </div>\n    <div>\n        <ul>\n        @tasks.map { task =>\n            <li>\n                @form(routes.TaskController.deleteTask(task.id)) {\n                  @task.name <input type=\"submit\" value=\"Remove\">\n                }\n            </li>\n        }\n        </ul>\n    </div>\n\n}\n```", "```java\nimport Routes.{prefix => _prefix, defaultPrefix => _defaultPrefix}\nimport play.core._\nimport play.core.Router._\nimport play.core.j._\n\nimport play.api.mvc._\n\nimport Router.queryString\n\n// @LINE:5\npackage controllers {\n\n// @LINE:5\nclass ReverseAppController {\n\n// @LINE:5\ndef index(): Call = {\n   Call(\"GET\", _prefix)\n}\n\n}\n\n}\n\n// @LINE:5\npackage controllers.javascript {\n\n// @LINE:5\nclass ReverseAppController {\n\n// @LINE:5\ndef index : JavascriptReverseRoute = JavascriptReverseRoute(\n  \"controllers.AppController.index\",\n   \"\"\"\n      function() {\n      return _wA({method:\"GET\", url:\"\"\"\" + _prefix + \"\"\"\"})\n      }\n   \"\"\"\n)\n\n}\n\n}\n\n// @LINE:5\npackage controllers.ref {\n\n// @LINE:5\nclass ReverseAppController {\n\n// @LINE:5\ndef index(): play.api.mvc.HandlerRef[_] = new play.api.mvc.HandlerRef(\n    controllers.AppController.index(), HandlerDef(this, \"controllers.AppController\", \"index\", Seq(), \"GET\", \"\"\" Routes\n This file defines all application routes (Higher priority routes first)\n ~~~~\n Home page\"\"\", _prefix + \"\"\"\"\"\")\n)\n\n}\n\n}\n```", "```java\ncase class Call(method: String, url: String) extends play.mvc.Call {\n\n    //Transform this call to an absolute URL.\n    def absoluteURL(secure: Boolean = false)(implicit request: RequestHeader) = {\n      \"http\" + (if (secure) \"s\" else \"\") + \"://\" + request.host + this.url\n    }\n\n    // Transform this call to an WebSocket URL.\n    def webSocketURL(secure: Boolean = false)(implicit request: RequestHeader) = {\n      \"ws\" + (if (secure) \"s\" else \"\") + \"://\" + request.host + this.url\n    }\n\n    override def toString = url\n\n  }\n```", "```java\ndef javascriptRoutes = Action { implicit request =>\n    Ok(\n      Routes.javascriptRouter(\"jsRouter\")(\n        routes.javascript.index\n      )\n    ).as(\"text/javascript\")\n  }\n```", "```java\nGET /javascriptRoutes  controllers.AppController.javascriptRoutes\n```", "```java\n<script type=\"text/javascript\" src=\"img/@routes.AppController.javascriptRoutes\"></script>\n```", "```java\njsRouter.controllers.AppController.index.ajax({\n  success: function(data) {\n    console.log(\"redirect successful\");\n  } ,\n  error:function(e){\n    console.log(\"something terrible happened\" + e);\n  }\n});\n```", "```java\n<link rel=\"stylesheet\" href=\"styles/homePage.css\" />\n```", "```java\nGET           /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```", "```java\n<link rel=\"stylesheet\" href=\"@routes.Assets.at(\"stylesheets/homePage.css\")\" />\n```", "```java\n<script src=\"img/@routes.Assets.at(\"javascripts/slider.js\")\" type=\"text/javascript\"></script>\n```", "```java\nGET           /styles/*file        controllers.Assets.at(path=\"/public/styles\", file)\n\nGET           /images/*file        controllers.Assets.at(path=\"/public/images\", file)\n```", "```java\n  def at(path: String, file: String, aggressiveCaching: Boolean = false): Action[AnyContent] = Action.async {\n    implicit request =>\n\n      import Implicits.trampoline\n      val pendingResult: Future[Result] = for {\n        Some(name) <- Future.successful(resourceNameAt(path, file))\n        (assetInfo, gzipRequested) <- assetInfoForRequest(request, name)\n      } yield {\n        val stream = assetInfo.url(gzipRequested).openStream()\n        Try(stream.available -> Enumerator.fromStream(stream)(Implicits.defaultExecutionContext)).map {\n          case (length, resourceData) =>\n            maybeNotModified(request, assetInfo, aggressiveCaching).getOrElse {\n              cacheableResult(\n                assetInfo,\n                aggressiveCaching,\n                result(file, length, assetInfo.mimeType, resourceData, gzipRequested, assetInfo.gzipUrl.isDefined)\n              )\n            }\n        }.getOrElse(NotFound)\n      }\n\n      pendingResult.recover {\n        case e: InvalidUriEncodingException =>\n          Logger.debug(s\"Invalid URI encoding for $file at $path\", e)\n          BadRequest\n        case e: Throwable =>\n          Logger.debug(s\"Unforseen error for $file at $path\", e)\n          NotFound\n      }\n  }\n```", "```java\n<script src=\"img/@routes.Assets.at(\"lib/d3/d3.v3.min.js\")\" charset=\"utf-8\"></script>\n```", "```java\nlibraryDependencies+=\"org.webjars\" % \"d3js\" % \"3.4.6-1\"  \n```", "```java\n{\n  \"name\": \"myApp\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n  },\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-concat\": \"~0.1.3\",\n    \"grunt-contrib-cssmin\": \"~0.5.0\",\n    \"grunt-contrib-clean\": \"~0.4.0\",\n    \"grunt-contrib-less\": \"~0.7.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.8.0\"\n  }\n}\n```", "```java\nGET           /assets/*file        controllers.Assets.at(path=\"/public\", file)\n```", "```java\nGET           /api/user/:userId    controllers.UserController.getUser(userId)\n```", "```java\nGET           /api/user/:userId    controllers.UserController.getUser(userId:Long)\n```", "```java\nGET           /api/region/$regionId<[a-zA-Z]{2}>/user       controllers.UserController.getUserByRegion(regionId)\n```", "```java\nGET           /login               controllers.Application.login\n```", "```java\n    def singleComponentPathPart: Parser[DynamicPart] = (\":\" ~> identifier) ^^ {\n      case name => DynamicPart(name, \"\"\"[^/]+\"\"\", encode = true)\n    }\n\n    def multipleComponentsPathPart: Parser[DynamicPart] = (\"*\" ~> identifier) ^^ {\n      case name => DynamicPart(name, \"\"\".+\"\"\", encode = false)\n    }\n\n    def regexComponentPathPart: Parser[DynamicPart] = \"$\" ~> identifier ~ (\"<\" ~> (not(\">\") ~> \"\"\"[^\\s]\"\"\".r +) <~ \">\" ^^ { case c => c.mkString }) ^^ {\n      case name ~ regex => DynamicPart(name, regex, encode = false)\n    }\n\n    def staticPathPart: Parser[StaticPart] = (not(\":\") ~> not(\"*\") ~> not(\"$\") ~> \"\"\"[^\\s]\"\"\".r +) ^^ {\n      case chars => StaticPart(chars.mkString)\n    }\n```", "```java\ntrait PathPart\n\ncase class DynamicPart(name: String, constraint: String, encode: Boolean) extends PathPart with Positional {\n  override def toString = \"\"\"DynamicPart(\"\"\"\" + name + \"\\\", \\\"\\\"\\\"\" + constraint + \"\\\"\\\"\\\",\" + encode + \")\" //\"\n}\n\ncase class StaticPart(value: String) extends PathPart {\n  override def toString = \"\"\"StaticPart(\"\"\"\" + value + \"\"\"\")\"\"\"\n}\n\ncase class PathPattern(parts: Seq[PathPart]) {\n  def has(key: String): Boolean = parts.exists {\n    case DynamicPart(name, _, _) if name == key => true\n    case _ => false\n  }\n\n  override def toString = parts.map {\n    case DynamicPart(name, constraint, encode) => \"$\" + name + \"<\" + constraint + \">\"\n    case StaticPart(path) => path\n  }.mkString\n\n}\n```", "```java\nGET           /api/search/user    controllers.UserController.search(name)\n```", "```java\nGET           /api/search/user    controllers.UserController.search(firstName:String, lastName:Option[String])\n```", "```java\nGET           /api/search/user    controllers.UserController.search(firstName:String, lastName:Option[String], limit:Int ?= 10)\n```"]