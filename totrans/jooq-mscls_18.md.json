["```java\nselect(inline(1).as(\"one\"));\n```", "```java\nTable<?> t = select(inline(1).as(\"one\")).asTable();\n```", "```java\nTable<?> t = table(select(inline(1).as(\"one\")));\n```", "```java\nctx.selectFrom(t).fetch();\n```", "```java\nSELECT \"alias_30260683\".\"one\" \n```", "```java\n  FROM (SELECT 1 AS \"one\") AS \"alias_30260683\"\n```", "```java\nTable<?> t = select(inline(1).as(\"one\")).asTable(\"t\");\n```", "```java\nTable<?> t = table(select(inline(1).as(\"one\"))).as(\"t\");\n```", "```java\nSELECT \"t\".\"one\" FROM (SELECT 1 AS \"one\") AS \"t\"\n```", "```java\nTable<?> t = values(row(1, \"John\"), row(2, \"Mary\"), \n```", "```java\n                    row(3, \"Kelly\"))\n```", "```java\n  .as(\"t\", \"id\", \"name\"); // or, .asTable(\"t\", \"id\", \"name\");\n```", "```java\nctx.select()\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .crossApply(select(count().as(\"sales_count\")).from(SALE)\n```", "```java\n     .where(SALE.EMPLOYEE_NUMBER\n```", "```java\n        .eq(EMPLOYEE.EMPLOYEE_NUMBER)).asTable(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select().from(\n```", "```java\n    select(ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n     .from(ORDERDETAIL)\n```", "```java\n     .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50)))\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(field(name(\"price_each\")).eq(PRODUCT.BUY_PRICE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select().from(\n```", "```java\n    select(ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n     .from(ORDERDETAIL)\n```", "```java\n.where(ORDERDETAIL.QUANTITY_ORDERED.gt(50))\n```", "```java\n       .asTable(\"t\"))\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(field(name(\"t\", \"price_each\")).eq(PRODUCT.BUY_PRICE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, \n```", "```java\n           PRODUCT.PRODUCT_NAME, field(name(\"price_each\")))\n```", "```java\n   .from(select(ORDERDETAIL.PRODUCT_ID,  \n```", "```java\n           ORDERDETAIL.PRICE_EACH).from(ORDERDETAIL)\n```", "```java\n           .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50)))\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(field(name(\"product_id\")).eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, PRODUCT.PRODUCT_NAME, \n```", "```java\n           field(name(\"t\", \"price_each\")))\n```", "```java\n   .from(select(ORDERDETAIL.PRODUCT_ID, \n```", "```java\n          ORDERDETAIL.PRICE_EACH).from(ORDERDETAIL)\n```", "```java\n          .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50))\n```", "```java\n            .asTable(\"t\"))\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(field(name(\"t\", \"product_id\"))\n```", "```java\n     .eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .fetch();\n```", "```java\nTable<?> t = select(\n```", "```java\n     ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n  .from(ORDERDETAIL)\n```", "```java\n  .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50)).asTable(\"t\");\n```", "```java\nctx.select()\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(name(\"price_each\"), BigDecimal.class)\n```", "```java\n        .eq(PRODUCT.BUY_PRICE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, \n```", "```java\n           PRODUCT.PRODUCT_NAME, t.field(name(\"price_each\")))\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(name(\"product_id\"), Long.class)\n```", "```java\n        .eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, PRODUCT.PRODUCT_NAME, \n```", "```java\n           t.field(ORDERDETAIL.PRICE_EACH))\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(ORDERDETAIL.PRODUCT_ID)\n```", "```java\n     .eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(ORDERDETAIL.PRICE_EACH)\n```", "```java\n     .eq(PRODUCT.BUY_PRICE))\n```", "```java\n   .fetch();\n```", "```java\n// fields\n```", "```java\nField<BigDecimal> avg = avg(ORDERDETAIL.PRICE_EACH).as(\"avg\");\n```", "```java\nField<Long> ord = ORDERDETAIL.ORDER_ID.as(\"ord\");\n```", "```java\n// derived table\n```", "```java\nTable<?> t = select(avg, ord).from(ORDERDETAIL)\n```", "```java\n    .groupBy(ORDERDETAIL.ORDER_ID).asTable(\"t\");\n```", "```java\n// query\n```", "```java\nctx.select(ORDERDETAIL.ORDER_ID, ORDERDETAIL\n```", "```java\n          .ORDERDETAIL_ID,ORDERDETAIL.PRODUCT_ID,\n```", "```java\n           ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL, t)\n```", "```java\n   .where(ORDERDETAIL.ORDER_ID.eq(ord)\n```", "```java\n     .and(ORDERDETAIL.PRICE_EACH.lt(avg)))\n```", "```java\n   .orderBy(ORDERDETAIL.ORDER_ID)\n```", "```java\n   .fetch();\n```", "```java\n...where(ORDERDETAIL.ORDER_ID.eq(t.field(ord))        \n```", "```java\n   .and(ORDERDETAIL.PRICE_EACH.lt(t.field(avg))))  \n```", "```java\n...\n```", "```java\nTable<?> t = ctx.select(SALE.EMPLOYEE_NUMBER, \n```", "```java\n                 count(SALE.SALE_).as(\"sales_count\"))\n```", "```java\n   .from(SALE).groupBy(SALE.EMPLOYEE_NUMBER).asTable(\"t\");\n```", "```java\nctx.select(t.fields()).from(t)\n```", "```java\n   .orderBy(t.field(name(\"sales_count\"))).fetch();\n```", "```java\nctx.select(t.asterisk(), \n```", "```java\n           EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .from(EMPLOYEE, t)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(\n```", "```java\n          t.field(name(\"employee_number\"), Long.class)))\n```", "```java\n   .orderBy(t.field(name(\"sales_count\"))).fetch();\n```", "```java\nctx.selectFrom(PRODUCT)\n```", "```java\n   .where(row(PRODUCT.PRODUCT_ID, PRODUCT.BUY_PRICE).in(\n```", "```java\n     select(ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n       .from(ORDERDETAIL)\n```", "```java\n       .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50))))\n```", "```java\n   .fetch();\n```", "```java\n// SelectConditionStep<Record2<Long, BigDecimal>>\n```", "```java\nvar s = select(\n```", "```java\n      ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50));\n```", "```java\nctx.selectFrom(PRODUCT)\n```", "```java\n   .where(row(PRODUCT.PRODUCT_ID, PRODUCT.BUY_PRICE).in(s))\n```", "```java\n   .fetch();\n```", "```java\nvar t = select(ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50));\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, PRODUCT.PRODUCT_NAME,  \n```", "```java\n           t.field(ORDERDETAIL.PRICE_EACH))\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(ORDERDETAIL.PRODUCT_ID)\n```", "```java\n   .eq(PRODUCT.PRODUCT_ID))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(t)\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(t.field(ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .eq(PRODUCT.BUY_PRICE))\n```", "```java\n   .fetch();\n```", "```java\nTable<?> t = select(\n```", "```java\n       ORDERDETAIL.PRODUCT_ID, ORDERDETAIL.PRICE_EACH)\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .where(ORDERDETAIL.QUANTITY_ORDERED.gt(50)).asTable();\n```", "```java\nWITH CTE_name [(column_name [, ...])]\n```", "```java\nAS\n```", "```java\n (CTE_definition) [, ...]\n```", "```java\nSQL_statement_using_CTE;\n```", "```java\nCommonTableExpression<Record2<Long, BigDecimal>> t \n```", "```java\n   = name(\"cte_sales\").fields(\"employee_nr\", \"sales\")\n```", "```java\n       .as(select(SALE.EMPLOYEE_NUMBER, sum(SALE.SALE_))\n```", "```java\n       .from(SALE).groupBy(SALE.EMPLOYEE_NUMBER));\n```", "```java\nctx.with(t)\n```", "```java\n   .select() // or, .select(t.field(\"employee_nr\"),  \n```", "```java\n             //             t.field(\"sales\"))\n```", "```java\n   .from(t)\n```", "```java\n   .where(t.field(\"sales\", Double.class)\n```", "```java\n      .eq(select(max(t.field(\"sales\" ,Double.class)))\n```", "```java\n           .from(t))).fetch();\n```", "```java\nField<Long> e = SALE.EMPLOYEE_NUMBER;\n```", "```java\nField<BigDecimal> s = sum(SALE.SALE_);\n```", "```java\nCommonTableExpression<Record2<Long, BigDecimal>> t \n```", "```java\n = name(\"cte_sales\").fields(e.getName(), s.getName())\n```", "```java\n    .as(select(e, s).from(SALE).groupBy(e));\n```", "```java\nctx.with(t)\n```", "```java\n   .select() // or, .select(t.field(e.getName()), \n```", "```java\n             //             t.field(s.getName()))\n```", "```java\n   .from(t)\n```", "```java\n   .where(t.field(s.getName(), s.getType())\n```", "```java\n      .eq(select(max(t.field(s.getName(), s.getType())))\n```", "```java\n           .from(t))).fetch();\n```", "```java\nctx.with(t)\n```", "```java\n   .select() // or, .select(t.field(e), t.field(s))\n```", "```java\n   .from(t)\n```", "```java\n   .where(t.field(s)\n```", "```java\n           .eq(select(max(t.field(s))).from(t))).fetch();\n```", "```java\nctx.with(\"cte_sales\", \"employee_nr\", \"sales\")\n```", "```java\n   .as(select(SALE.EMPLOYEE_NUMBER, sum(SALE.SALE_))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .select() // or, field(name(\"employee_nr\")),  \n```", "```java\n             //     field(name(\"sales\"))\n```", "```java\n   .from(name(\"cte_sales\"))\n```", "```java\n   .where(field(name(\"sales\"))\n```", "```java\n      .eq(select(max(field(name(\"sales\"))))\n```", "```java\n   .from(name(\"cte_sales\")))).fetch();\n```", "```java\nWITH \"cte_sales\"(\"employee_nr\", \"sales\") AS\n```", "```java\n  (SELECT \"public\".\"sale\".\"employee_number\",\n```", "```java\n          sum(\"public\".\"sale\".\"sale\")\n```", "```java\n   FROM \"public\".\"sale\"\n```", "```java\n   GROUP BY \"public\".\"sale\".\"employee_number\")\n```", "```java\nSELECT * FROM \"cte_sales\"\n```", "```java\nWHERE \"sales\" = (SELECT max(\"sales\") FROM \"cte_sales\")\n```", "```java\nctx.createTableIfNotExists(\"sale_training\").as(\n```", "```java\n      selectFrom(SALE)).withNoData().execute();\n```", "```java\nctx.with(\"training_sale_ids\", \"sale_id\")\n```", "```java\n   .as(select(SALE.SALE_ID).from(SALE)\n```", "```java\n       .orderBy(rand()).limit(10))\n```", "```java\n   .insertInto(table(name(\"sale_training\")))\n```", "```java\n     .select(select().from(SALE).where(SALE.SALE_ID.notIn(\n```", "```java\n      select(field(name(\"sale_id\"), Long.class))\n```", "```java\n        .from(name(\"training_sale_ids\")))))\n```", "```java\n   .execute();\n```", "```java\nctx.with(\"product_cte\", \"product_id\", \"max_buy_price\")\n```", "```java\n   .as(select(ORDERDETAIL.PRODUCT_ID, \n```", "```java\n              max(ORDERDETAIL.PRICE_EACH))\n```", "```java\n         .from(ORDERDETAIL)\n```", "```java\n         .groupBy(ORDERDETAIL.PRODUCT_ID))\n```", "```java\n   .update(PRODUCT)\n```", "```java\n     .set(PRODUCT.BUY_PRICE, coalesce(field(\n```", "```java\n     select(field(name(\"max_buy_price\"), BigDecimal.class))\n```", "```java\n       .from(name(\"product_cte\"))\n```", "```java\n       .where(PRODUCT.PRODUCT_ID.eq(\n```", "```java\n          field(name(\"product_id\"), Long.class)))),  \n```", "```java\n          PRODUCT.BUY_PRICE)).execute();\n```", "```java\nctx.with(\"cte\", \"sale_id\")\n```", "```java\n   .as(insertInto(SALE, SALE.FISCAL_YEAR, SALE.SALE_, \n```", "```java\n                  SALE.EMPLOYEE_NUMBER, SALE.FISCAL_MONTH, \n```", "```java\n                  SALE.REVENUE_GROWTH)\n```", "```java\n   .values(2005, 1250.55, 1504L, 1, 0.0)\n```", "```java\n   .returningResult(SALE.SALE_ID))\n```", "```java\n   .selectFrom(name(\"cte\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"cte\", \"employee_number\")\n```", "```java\n .as(update(SALE).set(SALE.REVENUE_GROWTH, 0.0)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.in(\n```", "```java\n     select(EMPLOYEE.EMPLOYEE_NUMBER).from(EMPLOYEE)\n```", "```java\n      .where(EMPLOYEE.COMMISSION.isNull())))\n```", "```java\n   .returningResult(SALE.EMPLOYEE_NUMBER))\n```", "```java\n .insertInto(EMPLOYEE_STATUS, EMPLOYEE_STATUS\n```", "```java\n             .EMPLOYEE_NUMBER,EMPLOYEE_STATUS.STATUS, \n```", "```java\n              EMPLOYEE_STATUS.ACQUIRED_DATE)\n```", "```java\n .select(select(field(name(\"employee_number\"), Long.class), \n```", "```java\n    val(\"REGULAR\"), val(LocalDate.now())).from(name(\"cte\")))\n```", "```java\n .execute();\n```", "```java\nCommonTableExpression<Record2<Long, String>>cte = name(\"cte\")\n```", "```java\n .fields(\"pid\", \"ppl\").as(resultQuery(\n```", "```java\n    // Put any plain SQL statement here\n```", "```java\n    \"\"\"\n```", "```java\n    select \"public\".\"product\".\"product_id\", \n```", "```java\n           \"public\".\"product\".\"product_line\" \n```", "```java\n    from \"public\".\"product\" \n```", "```java\n    where \"public\".\"product\".\"quantity_in_stock\" > 0\n```", "```java\n    \"\"\"\n```", "```java\n  ).coerce(field(\"pid\", BIGINT), field(\"ppl\", VARCHAR)));\n```", "```java\nResult<Record2<Long, String>> result = \n```", "```java\n   ctx.with(cte).selectFrom(cte).fetch();\n```", "```java\nctx.with(\"cte_productline_counts\")\n```", "```java\n     .as(select(PRODUCT.PRODUCT_LINE, PRODUCT.CODE,\n```", "```java\n          count(PRODUCT.PRODUCT_ID).as(\"product_count\"),\n```", "```java\n          PRODUCTLINE.TEXT_DESCRIPTION.as(\"description\"))\n```", "```java\n         .from(PRODUCTLINE).join(PRODUCT).onKey()\n```", "```java\n         .groupBy(PRODUCT.PRODUCT_LINE, PRODUCT.CODE, \n```", "```java\n                  PRODUCTLINE.TEXT_DESCRIPTION))\n```", "```java\n     .with(\"cte_productline_sales\")\n```", "```java\n       .as(select(PRODUCT.PRODUCT_LINE,\n```", "```java\n             sum(ORDERDETAIL.QUANTITY_ORDERED\n```", "```java\n               .mul(ORDERDETAIL.PRICE_EACH)).as(\"sales\"))\n```", "```java\n             .from(PRODUCT).join(ORDERDETAIL).onKey()\n```", "```java\n       .groupBy(PRODUCT.PRODUCT_LINE))\n```", "```java\n     .select(field(name(\"cte_productline_counts\", \n```", "```java\n        \"product_line\")), field(name(\"code\")),\n```", "```java\n        field(name(\"product_count\")),\n```", "```java\n        field(name(\"description\")),\n```", "```java\n        field(name(\"sales\")))\n```", "```java\n     .from(name(\"cte_productline_counts\"))\n```", "```java\n     .join(name(\"cte_productline_sales\"))\n```", "```java\n     .on(field(name(\"cte_productline_counts\", \n```", "```java\n               \"product_line\"))\n```", "```java\n       .eq(field(name(\"cte_productline_sales\", \n```", "```java\n                      \"product_line\"))))\n```", "```java\n     .orderBy(field(name(\"cte_productline_counts\", \n```", "```java\n                         \"product_line\")))\n```", "```java\n     .fetch();\n```", "```java\nctx.with(\"avg_per_office\")\n```", "```java\n   .as(select(EMPLOYEE.OFFICE_CODE.as(\"office\"),\n```", "```java\n          avg(EMPLOYEE.SALARY).as(\"avg_salary_per_office\"))\n```", "```java\n        .from(EMPLOYEE)\n```", "```java\n        .groupBy(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .with(\"min_salary_office\")\n```", "```java\n   .as(select(min(field(name(\"avg_salary_per_office\")))\n```", "```java\n          .as(\"min_avg_salary_per_office\"))\n```", "```java\n        .from(name(\"avg_per_office\")))\n```", "```java\n   .with(\"max_salary_office\")\n```", "```java\n   .as(select(max(field(name(\"avg_salary_per_office\")))\n```", "```java\n          .as(\"max_avg_salary_per_office\"))\n```", "```java\n        .from(name(\"avg_per_office\")))\n```", "```java\n   .select()\n```", "```java\n        .from(name(\"avg_per_office\"))\n```", "```java\n        .crossJoin(name(\"min_salary_office\"))\n```", "```java\n        .crossJoin(name(\"max_salary_office\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"t2\")\n```", "```java\n   .as(select(avg(field(\"sum_min_sal\", Float.class))\n```", "```java\n           .as(\"avg_sum_min_sal\")).from(\n```", "```java\n        with(\"t1\")\n```", "```java\n           .as(select(min(EMPLOYEE.SALARY).as(\"min_sal\"))\n```", "```java\n                .from(EMPLOYEE)\n```", "```java\n                .groupBy(EMPLOYEE.OFFICE_CODE)).select(\n```", "```java\n                   sum(field(\"min_sal\", Float.class))\n```", "```java\n                       .as(\"sum_min_sal\"))\n```", "```java\n                     .from(name(\"t1\"))\n```", "```java\n                     .groupBy(field(\"min_sal\"))))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"t2\"))\n```", "```java\n   .fetch(); \n```", "```java\nctx.with(\"cte\", \"customer_number\", \n```", "```java\n         \"order_line_number\", \"sum_price\", \"sum_quantity\") \n```", "```java\n   .asMaterialized(\n```", "```java\n           select(ORDER.CUSTOMER_NUMBER, \n```", "```java\n                  ORDERDETAIL.ORDER_LINE_NUMBER,\n```", "```java\n                  sum(ORDERDETAIL.PRICE_EACH),\n```", "```java\n                  sum(ORDERDETAIL.QUANTITY_ORDERED))\n```", "```java\n               .from(ORDER)\n```", "```java\n               .join(ORDERDETAIL)\n```", "```java\n               .on(ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n               .groupBy(ORDERDETAIL.ORDER_LINE_NUMBER, \n```", "```java\n                        ORDER.CUSTOMER_NUMBER))\n```", "```java\n   .select(field(name(\"customer_number\")), \n```", "```java\n      inline(\"Order Line Number\").as(\"metric\"),\n```", "```java\n      field(name(\"order_line_number\"))).from(name(\"cte\")) // 1\n```", "```java\n   .unionAll(select(field(name(\"customer_number\")), \n```", "```java\n      inline(\"Sum Price\").as(\"metric\"),\n```", "```java\n      field(name(\"sum_price\"))).from(name(\"cte\")))        // 2 \n```", "```java\n   .unionAll(select(field(name(\"customer_number\")),  \n```", "```java\n      inline(\"Sum Quantity\").as(\"metric\"),\n```", "```java\n      field(name(\"sum_quantity\"))).from(name(\"cte\")))     // 3 \n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"cte\", \"customer_number\", \n```", "```java\n         \"order_line_number\", \"sum_price\", \"sum_quantity\") \n```", "```java\n   .asNotMaterialized(select(ORDER.CUSTOMER_NUMBER, \n```", "```java\n                      ORDERDETAIL.ORDER_LINE_NUMBER, ...\n```", "```java\nctx.with(\"cte\")\n```", "```java\n .as(\n```", "```java\n   select(ORDER.CUSTOMER_NUMBER, \n```", "```java\n          ORDERDETAIL.ORDER_LINE_NUMBER,\n```", "```java\n          sum(ORDERDETAIL.PRICE_EACH).as(\"sum_price\"),\n```", "```java\n          sum(ORDERDETAIL.QUANTITY_ORDERED)\n```", "```java\n              .as(\"sum_quantity\"))\n```", "```java\n    .from(ORDER)\n```", "```java\n    .join(ORDERDETAIL)\n```", "```java\n      .on(ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n    .groupBy(ORDERDETAIL.ORDER_LINE_NUMBER, \n```", "```java\n             ORDER.CUSTOMER_NUMBER))\n```", "```java\n .select(field(name(\"customer_number\")),\n```", "```java\n   field(name(\"t\", \"metric\")), field(name(\"t\", \"value\")))\n```", "```java\n    .from(table(name(\"cte\")), lateral(\n```", "```java\n      select(inline(\"Order Line Number\").as(\"metric\"),\n```", "```java\n       field(name(\"order_line_number\")).as(\"value\"))\n```", "```java\n      .unionAll(select(inline(\"Sum Price\").as(\"metric\"),\n```", "```java\n        field(name(\"sum_price\")).as(\"value\")))\n```", "```java\n      .unionAll(select(inline(\"Sum Quantity\").as(\"metric\"),\n```", "```java\n        field(name(\"sum_quantity\")).as(\"value\"))))\n```", "```java\n .as(\"t\")).fetch();\n```", "```java\nctx.with(\"cte\")\n```", "```java\n .as(select(ORDER.CUSTOMER_NUMBER, \n```", "```java\n            ORDERDETAIL.ORDER_LINE_NUMBER,\n```", "```java\n            sum(ORDERDETAIL.PRICE_EACH).as(\"sum_price\"),\n```", "```java\n            sum(ORDERDETAIL.QUANTITY_ORDERED)\n```", "```java\n                .as(\"sum_quantity\"))\n```", "```java\n .from(ORDER)\n```", "```java\n .join(ORDERDETAIL)\n```", "```java\n   .on(ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n .groupBy(ORDERDETAIL.ORDER_LINE_NUMBER, \n```", "```java\n          ORDER.CUSTOMER_NUMBER))\n```", "```java\n .select(field(name(\"customer_number\")),\n```", "```java\n    field(name(\"t\", \"metric\")), field(name(\"t\", \"value\")))\n```", "```java\n .from(name(\"cte\")).crossApply(\n```", "```java\n   values(row(\"Order Line Number\",\n```", "```java\n          field(name(\"cte\", \"order_line_number\"))),\n```", "```java\n     row(\"Sum Price\", field(name(\"cte\", \"sum_price\"))),\n```", "```java\n     row(\"Sum Quantity\", field(name(\"cte\", \"sum_quantity\"))))\n```", "```java\n      .as(\"t\", \"metric\", \"value\")).fetch();\n```", "```java\nctx.withRecursive(\"fibonacci\", \"n\", \"f\", \"f1\")\n```", "```java\n   .as(select(inline(1L), inline(0L), inline(1L))\n```", "```java\n   .unionAll(select(field(name(\"n\"), Long.class).plus(1),\n```", "```java\n     field(name(\"f\"), Long.class).plus(field(name(\"f1\"))),\n```", "```java\n     field(name(\"f\"), Long.class))\n```", "```java\n   .from(name(\"fibonacci\"))\n```", "```java\n   .where(field(name(\"n\")).lt(20))))\n```", "```java\n   .select(field(name(\"n\")), field(name(\"f\")).as(\"f_nbr\"))\n```", "```java\n   .from(name(\"fibonacci\"))\n```", "```java\n   .fetch();\n```", "```java\nString from = \"Los Angeles\";\n```", "```java\nString to = \"Tokyo\";\n```", "```java\nctx.withRecursive(\"flights\", \n```", "```java\n      \"arrival_town\", \"steps\", \"total_distance_km\", \"path\")\n```", "```java\n .as(selectDistinct(OFFICE_FLIGHTS.DEPART_TOWN\n```", "```java\n   .as(\"arrival_town\"), inline(0).as(\"steps\"), inline(0)\n```", "```java\n   .as(\"total_distance_km\"), cast(from, SQLDataType.VARCHAR)\n```", "```java\n   .as(\"path\"))\n```", "```java\n .from(OFFICE_FLIGHTS)\n```", "```java\n .where(OFFICE_FLIGHTS.DEPART_TOWN.eq(from))\n```", "```java\n .unionAll(select(field(name(\"arrivals\", \"arrival_town\"), \n```", "```java\n            String.class), field(name(\"flights\", \"steps\"), \n```", "```java\n            Integer.class).plus(1), field(name(\"flights\", \n```", "```java\n            \"total_distance_km\"), Integer.class).plus(\n```", "```java\n            field(name(\"arrivals\", \"distance_km\"))),\n```", "```java\n            concat(field(name(\"flights\", \"path\")),inline(\",\"), \n```", "```java\n            field(name(\"arrivals\", \"arrival_town\"))))\n```", "```java\n          .from(OFFICE_FLIGHTS.as(\"arrivals\"),  \n```", "```java\n            table(name(\"flights\")))\n```", "```java\n          .where(field(name(\"flights\", \"arrival_town\"))\n```", "```java\n           .eq(field(name(\"arrivals\", \"depart_town\")))\n```", "```java\n            .and(field(name(\"flights\", \"path\"))\n```", "```java\n             .notLike(concat(inline(\"%\"),\n```", "```java\n              field(name(\"arrivals\", \"arrival_town\")),\n```", "```java\n               inline(\"%\")))))))\n```", "```java\n          .select()\n```", "```java\n            .from(name(\"flights\"))\n```", "```java\n            .where(field(name(\"arrival_town\")).eq(to))\n```", "```java\n            .orderBy(field(name(\"total_distance_km\")))\n```", "```java\n .fetch();\n```", "```java\nctx.with(\"t\", \"data_val\", \"data_seq\", \"absent_data_grp\")\n```", "```java\n   .as(select(EMPLOYEE.EMPLOYEE_NUMBER,\n```", "```java\n       rowNumber().over()\n```", "```java\n         .orderBy(EMPLOYEE.EMPLOYEE_NUMBER)))\n```", "```java\n       EMPLOYEE.EMPLOYEE_NUMBER.minus(\n```", "```java\n       rowNumber().over()\n```", "```java\n          .orderBy(EMPLOYEE.EMPLOYEE_NUMBER)))\n```", "```java\n       .from(EMPLOYEE))\n```", "```java\n   .select(field(name(\"absent_data_grp\")), count(),\n```", "```java\n       min(field(name(\"data_val\"))).as(\"start_data_val\"))\n```", "```java\n   .from(name(\"t\"))\n```", "```java\n   .groupBy(field(name(\"absent_data_grp\")))\n```", "```java\n   .orderBy(field(name(\"absent_data_grp\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"t\", \"product_line\", \"sum_price_each\")\n```", "```java\n   .as(select(PRODUCT.PRODUCT_LINE, \n```", "```java\n          sum(ORDERDETAIL.PRICE_EACH))\n```", "```java\n        .from(PRODUCT)\n```", "```java\n        .join(ORDERDETAIL)\n```", "```java\n          .on(PRODUCT.PRODUCT_ID.eq(ORDERDETAIL.PRODUCT_ID))\n```", "```java\n        .groupBy(PRODUCT.PRODUCT_LINE))\n```", "```java\n   .select(field(name(\"product_line\")),  \n```", "```java\n           field(name(\"sum_price_each\")),\n```", "```java\n           round(percentRank().over()\n```", "```java\n           .orderBy(field(name(\"sum_price_each\"))).mul(100), 2)\n```", "```java\n           .concat(\"%\").as(\"percentile_rank\"))\n```", "```java\n   .from(name(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"dt\")\n```", "```java\n   .as(select()\n```", "```java\n   .from(values(row(1, \"John\"), row(2, \"Mary\"), row(3, \"Kelly\"))\n```", "```java\n            .as(\"t\", \"id\", \"name\")))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"dt\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"dt\")\n```", "```java\n   .as(select().from(unnest(new String[]\n```", "```java\n       {\"John\", \"Mary\", \"Kelly\"}).as(\"n\")))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"dt\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"dt\")\n```", "```java\n   .as(select().from(unnest(new String[]\n```", "```java\n        {\"John\", \"Mary\", \"Kelly\"}).as(\"n\")))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"dt\"))\n```", "```java\n   .orderBy(rand())\n```", "```java\n   .limit(1)\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"dt\")\n```", "```java\n   .as(selectFrom(PRODUCT).orderBy(rand()).limit(10))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"dt\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"dt\")\n```", "```java\n   .as(select().from(generateSeries(1, 10, 2).as(\"t\", \"s\")))\n```", "```java\n   .select()\n```", "```java\n   .from(name(\"dt\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"grades\")\n```", "```java\n   .as(select(round(inline(70).plus(sin(\n```", "```java\n         field(name(\"serie\", \"sample\"), Integer.class))\n```", "```java\n           .mul(30))).as(\"grade\"))\n```", "```java\n   .from(generateSeries(1, 100).as(\"serie\", \"sample\")))\n```", "```java\n   .select(\n```", "```java\n     case_().when(field(name(\"grade\")).lt(60), \"F\")\n```", "```java\n            .when(field(name(\"grade\")).lt(70), \"D\")\n```", "```java\n            .when(field(name(\"grade\")).lt(80), \"C\")\n```", "```java\n            .when(field(name(\"grade\")).lt(90), \"B\")\n```", "```java\n            .else_(\"A\").as(\"letter_grade\"),count())\n```", "```java\n   .from(name(\"grades\"))\n```", "```java\n   .groupBy(field(name(\"letter_grade\")))\n```", "```java\n   .orderBy(field(name(\"letter_grade\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.with(\"classes\")\n```", "```java\n .as(select()\n```", "```java\n .from(values(row(\"c1\", 80), row(\"c2\", 70), row(\"c3\", 65),\n```", "```java\n              row(\"c4\", 55), row(\"c5\", 50), row(\"c6\", 40))\n```", "```java\n              .as(\"t\", \"class_nbr\", \"class_size\")))\n```", "```java\n .with(\"rooms\")\n```", "```java\n .as(select()\n```", "```java\n .from(values(row(\"r1\", 70), row(\"r2\", 40), row(\"r3\", 50),\n```", "```java\n   row(\"r4\", 85), row(\"r5\", 30), row(\"r6\", 65), row(\"r7\", 55))\n```", "```java\n .as(\"t\", \"room_nbr\", \"room_size\")))\n```", "```java\n…\n```", "```java\npublic Result<Record> cte(String cteName, Select select, \n```", "```java\n          SelectField<?>[] fields, Condition condition, \n```", "```java\n          GroupField[] groupBy, SortField<?>[] orderBy) {\n```", "```java\n  var cte = ctx.with(cteName).as(select);\n```", "```java\n  var cteSelect = fields == null \n```", "```java\n    ? cte.select() : cte.select(fields)\n```", "```java\n        .from(table(name(cteName)));\n```", "```java\n  if (condition != null) {\n```", "```java\n     cteSelect.where(condition);\n```", "```java\n  }\n```", "```java\n  if (groupBy != null) {\n```", "```java\n     cteSelect.groupBy(groupBy);\n```", "```java\n  }\n```", "```java\n  if (orderBy != null) {\n```", "```java\n     cteSelect.orderBy(orderBy);\n```", "```java\n  }\n```", "```java\n  return cteSelect.fetch();\n```", "```java\n}\n```", "```java\nResult<Record> result = cte(\"t\",\n```", "```java\n select(EMPLOYEE.EMPLOYEE_NUMBER.as(\"data_val\"),\n```", "```java\n   rowNumber().over().orderBy(EMPLOYEE.EMPLOYEE_NUMBER)\n```", "```java\n   .as(\"data_seq\"), EMPLOYEE.EMPLOYEE_NUMBER.minus(\n```", "```java\n   rowNumber().over().orderBy(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .as(\"absent_data_grp\"))\n```", "```java\n   .from(EMPLOYEE),\n```", "```java\n   new Field[]{field(name(\"absent_data_grp\")), count(),\n```", "```java\n        min(field(name(\"data_val\"))).as(\"start_data_val\")},\n```", "```java\n   null, new GroupField[]{field(name(\"absent_data_grp\"))},\n```", "```java\n   null);\n```", "```java\npublic void CTE(List<CommonTableExpression<?>> CTE) {\n```", "```java\n  ctx.with(CTE)\n```", "```java\n     ...\n```", "```java\n}\n```", "```java\npublic void CTE(CommonTableExpression<?> cte1, \n```", "```java\n  CommonTableExpression<?>cte2, \n```", "```java\n  CommonTableExpression<?>cte3, ...) {\n```", "```java\n ctx.with(cte1, cte2, cte3)\n```", "```java\n    ...\n```", "```java\n}\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME,\n```", "```java\n   sum(SALE.SALE_), field(select(sum(SALE.SALE_)).from(SALE))\n```", "```java\n     .divide(field(select(countDistinct(SALE.EMPLOYEE_NUMBER))\n```", "```java\n    .from(SALE))).as(\"avg_sales\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .groupBy(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME)\n```", "```java\n   .having(sum(SALE.SALE_).gt(field(select(sum(SALE.SALE_))\n```", "```java\n    .from(SALE))\n```", "```java\n   .divide(field(select(countDistinct(SALE.EMPLOYEE_NUMBER))\n```", "```java\n    .from(SALE))))).fetch();\n```", "```java\nctx.createTemporaryTable(\"t1\").as(\n```", "```java\n  select(sum(SALE.SALE_).as(\"sum_all_sales\"))\n```", "```java\n   .from(SALE)).execute();\n```", "```java\nctx.createTemporaryTable(\"t2\").as(\n```", "```java\n  select(countDistinct(SALE.EMPLOYEE_NUMBER)\n```", "```java\n    .as(\"nbr_employee\")).from(SALE)).execute();\n```", "```java\nctx.createTemporaryTable(\"t3\").as(\n```", "```java\n  select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n       sum(SALE.SALE_).as(\"employee_sale\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .groupBy(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME))\n```", "```java\n   .execute();\n```", "```java\nctx.select(field(name(\"first_name\")),field(name(\"last_name\")),\n```", "```java\n    field(name(\"employee_sale\")), field(name(\"sum_all_sales\"))\n```", "```java\n .divide(field(name(\"nbr_employee\"), Integer.class))\n```", "```java\n   .as(\"avg_sales\"))\n```", "```java\n .from(table(name(\"t1\")),table(name(\"t2\")), table(name(\"t3\")))\n```", "```java\n .where(field(name(\"employee_sale\")).gt(\n```", "```java\n   field(name(\"sum_all_sales\")).divide(\n```", "```java\n     field(name(\"nbr_employee\"), Integer.class))))\n```", "```java\n .fetch();\n```", "```java\nctx.with(\"cte1\", \"sum_all_sales\")\n```", "```java\n .as(select(sum(SALE.SALE_)).from(SALE)) \n```", "```java\n .with(\"cte2\", \"nbr_employee\")\n```", "```java\n .as(select(countDistinct(SALE.EMPLOYEE_NUMBER)).from(SALE))\n```", "```java\n .with(\"cte3\", \"first_name\", \"last_name\", \"employee_sale\")\n```", "```java\n .as(select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n    sum(SALE.SALE_).as(\"employee_sale\"))\n```", "```java\n     .from(EMPLOYEE)\n```", "```java\n     .innerJoin(SALE)\n```", "```java\n     .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n     .groupBy(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME))\n```", "```java\n     .select(field(name(\"first_name\")), \n```", "```java\n      field(name(\"last_name\")), field(name(\"employee_sale\")),    \n```", "```java\n      field(name(\"sum_all_sales\"))\n```", "```java\n       .divide(field(name(\"nbr_employee\"), Integer.class))\n```", "```java\n         .as(\"avg_sales\"))\n```", "```java\n       .from(table(name(\"cte1\")), table(name(\"cte2\")), \n```", "```java\n             table(name(\"cte3\")))\n```", "```java\n       .where(field(name(\"employee_sale\")).gt(\n```", "```java\n         field(name(\"sum_all_sales\")).divide(\n```", "```java\n         field(name(\"nbr_employee\"), Integer.class))))\n```", "```java\n .fetch();\n```", "```java\nCREATE VIEW <table name> [(<view column list>)]\n```", "```java\n   AS <query expression>\n```", "```java\n    [WITH [<levels clause>] CHECK OPTION]\n```", "```java\n       <levels clause>::= CASCADED | LOCAL\n```", "```java\nctx.createView(\"sales_1504_1370\")\n```", "```java\n   .as(select().from(SALE).where(\n```", "```java\n       SALE.EMPLOYEE_NUMBER.eq(1504L))\n```", "```java\n   .unionAll(select().from(SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.eq(1370L))))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"sales_1504_1370_u\")\n```", "```java\n   .as(select().from(SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.in(1504L, 1370L)))\n```", "```java\n   .execute();  \n```", "```java\nctx.createView(\"employees_and_sales\", \"first_name\", \n```", "```java\n      \"last_name\", \"sale_id\", \"sale\")\n```", "```java\n   .as(select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n              SALE.SALE_ID, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .join(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER)))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"transactions\", \n```", "```java\n               \"customer_number\", \"check_number\",\n```", "```java\n               \"caching_date\", \"transfer_amount\", \"status\")\n```", "```java\n   .as(select(BANK_TRANSACTION.CUSTOMER_NUMBER, \n```", "```java\n              BANK_TRANSACTION.CHECK_NUMBER,\n```", "```java\n              BANK_TRANSACTION.CACHING_DATE, \n```", "```java\n              BANK_TRANSACTION.TRANSFER_AMOUNT,\n```", "```java\n              BANK_TRANSACTION.STATUS)\n```", "```java\n   .from(BANK_TRANSACTION))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"payroll\", \"employee_number\", \"paycheck_amt\")\n```", "```java\n   .as(select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.SALARY\n```", "```java\n     .plus(coalesce(EMPLOYEE.COMMISSION, 0.00)))\n```", "```java\n   .from(EMPLOYEE))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"customer_orders\")\n```", "```java\n   .as(select(CUSTOMER.CUSTOMER_NAME, \n```", "```java\n      CUSTOMER.CONTACT_FIRST_NAME, CUSTOMER.CONTACT_LAST_NAME,\n```", "```java\n      ORDER.SHIPPED_DATE, ORDERDETAIL.QUANTITY_ORDERED, \n```", "```java\n      ORDERDETAIL.PRICE_EACH, PRODUCT.PRODUCT_NAME, \n```", "```java\n      PRODUCT.PRODUCT_LINE)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .innerJoin(ORDER)\n```", "```java\n   .on(CUSTOMER.CUSTOMER_NUMBER.eq(ORDER.CUSTOMER_NUMBER))\n```", "```java\n   .innerJoin(ORDERDETAIL)\n```", "```java\n   .on(ORDER.ORDER_ID.eq(ORDERDETAIL.ORDER_ID))\n```", "```java\n   .innerJoin(PRODUCT)\n```", "```java\n   .on(ORDERDETAIL.PRODUCT_ID.eq(PRODUCT.PRODUCT_ID)))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"big_sales\", \"employee_number\", \"big_sale\")\n```", "```java\n   .as(select(SALE.EMPLOYEE_NUMBER, max(SALE.SALE_))\n```", "```java\n   .from(SALE)                        \n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER))                \n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"employee_sales\", \n```", "```java\n               \"employee_number\", \"sales_count\")\n```", "```java\n   .as(select(SALE.EMPLOYEE_NUMBER, count())\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .execute();\n```", "```java\nvar result = ctx.select(\n```", "```java\n        EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME,\n```", "```java\n        coalesce(field(name(\"sales_count\")), 0) \n```", "```java\n         .as(\"sales_count\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftOuterJoin(table(name(\"employee_sales\")))\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n    .eq(field(name(\"employee_sales\", \"employee_number\"),   \n```", "```java\n        Long.class))).fetch();\n```", "```java\nctx.createView(\"employee_sales_u\", \n```", "```java\n      \"employee_number\", \"sales_count\")\n```", "```java\n   .as(select(SALE.EMPLOYEE_NUMBER, count())\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .union(select(EMPLOYEE.EMPLOYEE_NUMBER, inline(0))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .whereNotExists(select().from(SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER\n```", "```java\n     .eq(EMPLOYEE.EMPLOYEE_NUMBER))))).execute();\n```", "```java\nvar result = ctx.select(EMPLOYEE.FIRST_NAME,  \n```", "```java\n            EMPLOYEE.LAST_NAME, field(name(\"sales_count\")))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(table(name(\"employee_sales_u\")))\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n    .eq(field(name(\"employee_sales_u\", \"employee_number\"), \n```", "```java\n        Long.class)))\n```", "```java\n   .fetch();\n```", "```java\nctx.createView(\"customer_orders_1\", \n```", "```java\n               \"customer_number\", \"orders_count\")\n```", "```java\n   .as(select(ORDER.CUSTOMER_NUMBER, count())\n```", "```java\n   .from(ORDER)\n```", "```java\n   .groupBy(ORDER.CUSTOMER_NUMBER)).execute();\n```", "```java\nctx.createView(\"customer_orders_2\", \"first_name\", \n```", "```java\n               \"last_name\", \"orders_count\")  \n```", "```java\n   .as(select(CUSTOMER.CONTACT_FIRST_NAME, \n```", "```java\n              CUSTOMER.CONTACT_LAST_NAME,\n```", "```java\n              coalesce(field(name(\"orders_count\")), 0))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .leftOuterJoin(table(name(\"customer_orders_1\")))\n```", "```java\n   .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n     .eq(field(name(\"customer_orders_1\", \n```", "```java\n         \"customer_number\"), Long.class)))).execute();\n```", "```java\nctx.createView(\"office_headcounts\", \n```", "```java\n               \"office_code\", \"headcount\")\n```", "```java\n   .as(select(OFFICE.OFFICE_CODE, \n```", "```java\n              count(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .groupBy(OFFICE.OFFICE_CODE))\n```", "```java\n   .execute();\n```", "```java\nctx.select(field(name(\"office_code\")),  \n```", "```java\n           field(name(\"headcount\")),\n```", "```java\n           round(cumeDist().over().orderBy(\n```", "```java\n              field(name(\"headcount\"))).mul(100), 2)\n```", "```java\n                 .concat(\"%\").as(\"cume_dist_val\"))\n```", "```java\n   .from(name(\"office_headcounts\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.createView(\"absent_values\",\n```", "```java\n          \"data_val\", \"data_seq\", \"absent_data_grp\")\n```", "```java\n   .as(with(\"t\", \"data_val\", \"data_seq\", \"absent_data_grp\")\n```", "```java\n     .as(select(EMPLOYEE.EMPLOYEE_NUMBER,\n```", "```java\n      rowNumber().over().orderBy(EMPLOYEE.EMPLOYEE_NUMBER),\n```", "```java\n      EMPLOYEE.EMPLOYEE_NUMBER.minus(rowNumber().over()\n```", "```java\n           .orderBy(EMPLOYEE.EMPLOYEE_NUMBER)))\n```", "```java\n           .from(EMPLOYEE))\n```", "```java\n     .select(field(name(\"absent_data_grp\")), count(),\n```", "```java\n        min(field(name(\"data_val\"))).as(\"start_data_val\"))\n```", "```java\n        .from(name(\"t\"))\n```", "```java\n        .groupBy(field(name(\"absent_data_grp\"))))\n```", "```java\n   .execute();\n```", "```java\nctx.select().from(name(\"absent_values\")).fetch();\n```", "```java\nctx.selectFrom(name(\"absent_values\")).fetch();\n```", "```java\nTable truck = select().from(values(\n```", "```java\n row(\"Truck1\",LocalDate.of(2003,1,1),LocalDate.of(2003,1,12)),\n```", "```java\n row(\"Truck2\",LocalDate.of(2003,1,8),LocalDate.of(2003,1,27)),\n```", "```java\n ...\n```", "```java\n)).asTable(\"truck\", \"truck_id\", \"free_from\", \"free_to\");\n```", "```java\nctx.createView(\"order_truck\", \"truck_id\", \"order_id\")\n```", "```java\n   .as(select(field(name(\"truck_id\")), ORDER.ORDER_ID)\n```", "```java\n   .from(truck, ORDER)\n```", "```java\n   .where(not(field(name(\"free_to\")).lt(ORDER.ORDER_DATE)\n```", "```java\n   .or(field(name(\"free_from\")).gt(ORDER.REQUIRED_DATE)))))\n```", "```java\n   .execute();\n```", "```java\nctx.select(field(name(\"truck_id\")), count().as(\"order_count\"))\n```", "```java\n   .from(name(\"order_truck\"))\n```", "```java\n   .groupBy(field(name(\"truck_id\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"order_id\")), count()\n```", "```java\n   .as(\"truck_count\"))\n```", "```java\n   .from(name(\"order_truck\"))\n```", "```java\n   .groupBy(field(name(\"order_id\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.createView(\"order_truck_all\", \"truck_id\", \n```", "```java\n               \"order_id\", \"entry_date\", \"exit_date\")\n```", "```java\n   .as(select(field(name(\"t\", \"truck_id\")), \n```", "```java\n              field(name(\"t\", \"order_id\")),\n```", "```java\n              ORDER.ORDER_DATE, ORDER.REQUIRED_DATE)\n```", "```java\n   .from(table(name(\"order_truck\")).as(\"t\"), ORDER)\n```", "```java\n   .where(ORDER.ORDER_ID.eq(field(name(\"t\", \"order_id\"), \n```", "```java\n     Long.class)))\n```", "```java\n   .union(select(field(name(\"t\", \"truck_id\")), \n```", "```java\n                 field(name(\"t\", \"order_id\")),\n```", "```java\n                 truck.field(name(\"free_from\")),  \n```", "```java\n                 truck.field(name(\"free_to\")))\n```", "```java\n           .from(table(name(\"order_truck\")).as(\"t\"), truck)\n```", "```java\n           .where(truck.field(name(\"truck_id\"))\n```", "```java\n             .eq(field(name(\"t\", \"truck_id\"))))))\n```", "```java\n   .execute();\n```", "```java\nctx.createView(\"order_truck_exact\", \"truck_id\", \n```", "```java\n               \"order_id\", \"entry_date\", \"exit_date\")\n```", "```java\n   .as(select(field(name(\"truck_id\")), \n```", "```java\n              field(name(\"order_id\")),\n```", "```java\n              max(field(name(\"entry_date\"))), \n```", "```java\n              min(field(name(\"exit_date\"))))\n```", "```java\n         .from(name(\"order_truck_all\"))\n```", "```java\n         .groupBy(field(name(\"truck_id\")), \n```", "```java\n                  field(name(\"order_id\"))))\n```", "```java\n   .execute();\n```"]