["```java\n    server:\n        port: 8080\n    spring:\n        datasource:\n            url: jdbc:postgresql://localhost:5432/mydatabase\n            username: myuser\n            password: mypassword\n    api:\n        timeout: 30 \n    ```", "```java\n    @Configuration\n    @ConfigurationProperties(prefix = \"api\")\n    public class ApiProperties {\n      @NotNull(message = \"Timeout value is required\")\n      @Min(value = 1, message = \"Timeout must be at least 1 second\")\n      private Integer timeout;\n      // Getter and Setter\n      public Integer getTimeout() {\n        return timeout;\n      }\n      public void setTimeout(Integer timeout) {\n        this.timeout = timeout;\n      }\n    } \n    ```", "```java\n    docker run -e \"SPRING_PROFILES_ACTIVE=production\" -e \"PRODUCT_API_URL=https://product-api.example.com/v1\"https://product-api.example.com/v1\" -e \"INVENTORY_CHECK_ENABLED=true\" order-api-image. \n    ```", "```java\n    # Developer's local machine\n    java -jar order-api.jar --spring.profiles.active=dev \n    ```", "```java\n    # In your CI/CD pipeline's test stage\n    export SPRING_PROFILES_ACTIVE=test\n    java -jar order-api.jar \n    ```", "```java\n    # In your production deployment script\n    docker run -e \"SPRING_PROFILES_ACTIVE=prod\" -p 8080:8080 order-api:latest \n    ```", "```java\n# application.yml\nspring:\n    datasource:\n        url:      ${DB_URL:jdbc:mysql://localhost:3306/orderdb}\n    username: ${DB_USERNAME:dev_user}\n    password: ${DB_PASSWORD:dev_password}\npayment:\n    gateway:\n        api-key: ${PAYMENT_API_KEY:sandbox_key}\n        timeout: ${PAYMENT_TIMEOUT:30}\nproduct-service:\n    url: ${PRODUCT_SERVICE_URL:http://localhost:8081/api/products}\n    cache-size: ${PRODUCT_CACHE_SIZE:100} \n```", "```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency> \n```", "```java\n@Component\npublic class OrderRepositoryHealthIndicator implements HealthIndicator {\n    private final OrderRepository orderRepository;\n    public OrderRepositoryHealthIndicator(OrderRepository orderRepository) {\n        this.orderRepository = orderRepository;\n    }\n    @Override\n    public Health health() {\n        try {\n            // Simple query to check database connectivity\n            orderRepository.count();\n            return Health.up().build();\n        } catch (Exception e) {\n            return Health.down()\n                    .withDetail(\"error\", e.getMessage())\n                    .build();\n        }\n    }\n} \n```", "```java\n@Component\npublic class ProductRepositoryHealthIndicator implements HealthIndicator {\n    private final ProductRepository productRepository;\n\n    // Similar implementation to check product repository connectivity\n} \n```", "```java\n@Component\npublic class LivenessHealthIndicator implements HealthIndicator {\n\n    @Override\n    public Health health () {\n        // Simple check to verify application is running\n        // Should always succeed unless the application is truly dead\n        return Health.up().build();\n    }\n} \n```", "```java\nmanagement:\n  endpoint:\n    health:\n      group:\n        liveness:\n          include: livenessState,diskSpace \n```", "```java\n@Component\npublic class ReadinessHealthIndicator implements ReadinessIndicator {\n    private final OrderRepositoryHealthIndicator orderRepoHealth;\n    private final ProductRepositoryHealthIndicator productRepoHealth;\n\n    public ReadinessHealthIndicator(\n            OrderRepositoryHealthIndicator orderRepoHealth,\n            ProductRepositoryHealthIndicator productRepoHealth) {\n        this.orderRepoHealth = orderRepoHealth;\n        this.productRepoHealth = productRepoHealth;\n    }\n\n    @Override\n    public Health health() {\n        Health orderHealth = orderRepoHealth.health();\n        Health productHealth = productRepoHealth.health();\n\n        if (Status.UP.equals(orderHealth.getStatus()) &&\n            Status.UP.equals(productHealth.getStatus())) {\n            return Health.up().build();\n        }\n\n        return Health.down()\n                .withDetail(\"orderRepository\", orderHealth.getStatus())\n                .withDetail(\"productRepository\",productHealth.getStatus())\n                .build();\n    }\n} \n```", "```java\nmanagement:\n  endpoint:\n    health:\n      group:\n        readiness:\n          include: readinessState,db,orderRepository,productRepository \n```", "```java\n@Component\npublic class InventoryHealthIndicator implements HealthIndicator {\n\n    private final ProductService productService;\n\n    public InventoryHealthIndicator(ProductService productService) {\n        this.productService = productService;\n    }\n\n    @Override\n    public Health health() {\n        try {\n            // Check if inventory system is functioning\n            boolean inventoryStatus = productService.\n                checkInventoryStatus();\n            if (inventoryStatus) {\n                return Health.up()\n                        .withDetail(\"inventorySystem\", \"operational\")\n                        .withDetail(\"lastSyncTime\", new Date())\n                        .build();\n            } else {\n                return Health.down()\n                        .withDetail(\"inventorySystem\", \"degraded\")\n                        .build();\n            }\n        } catch (Exception e) {\n            return Health.down()\n                    .withDetail(\"inventorySystem\", \"error\")\n                    .withDetail(\"message\", e.getMessage())\n                    .build();\n        }\n    }\n} \n```", "```java\nversion: ‘3’\nservices:\n  order-api:\n    build: .\n    ports:\n      - “8080:8080”\n    healthcheck:\n      test: [“CMD”, “curl”, “-f”, \n             “http://localhost:8080/actuator/health/liveness”]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 40s\n    depends_on:\n      database:\n        condition: service_healthy \n```", "```java\n# Enable health endpoint\nmanagement.endpoints.web.exposure.include=health,info\n# Show health details\nmanagement.endpoint.health.show-details=when_authorized\n# Enable health groups\nmanagement.endpoint.health.group.liveness.include=livenessState\nmanagement.endpoint.health.group.readiness.include=readinessState,db,orderRepository,productRepository \n```", "```java\n # Use an official OpenJDK runtime as a base image\nFROM openjdk:21-jdk-slim\n # Set the working directory inside the container\nWORKDIR /app\n # Copy the Maven build artifact into the container\nCOPY target/product-api-0.0.1-SNAPSHOT.jar app.jar\n # Expose the application port\nEXPOSE 8080\n # Define the command to run the application\nENTRYPOINT [\"java\", \"-jar\", \"app.jar\"] \n```", "```java\nmvn clean package \n```", "```java\ndocker build -t my-restful-api . \n```", "```java\ndocker run -d -p 8080:8080 --name restful-api-container my-restful-api \n```", "```java\ncurl http://localhost:8080/api/endpoint \n```", "```java\n# Build your application with Maven\nmvn clean package \n```", "```java\npip install awscli awsebcli \n```", "```java\neb init \n```", "```java\neb create my-api-environment \n```", "```java\noption_settings:\n    aws:elasticbeanstalk:application:environment:\n        SPRING_PROFILES_ACTIVE: production\n        API_TIMEOUT: 30\n        LOGGING_LEVEL_ROOT: INFO\n    aws:elasticbeanstalk:container:java:\n        JVM Options: -Xms256m -Xmx1024m\n    aws:autoscaling:asg:\n        MinSize: 2\n        MaxSize: 4\n    aws:elasticbeanstalk:environment:\n        ServiceRole: aws-elasticbeanstalk-service-role \n```", "```java\nmvn clean package\neb deploy \n```", "```java\neb health \n```"]