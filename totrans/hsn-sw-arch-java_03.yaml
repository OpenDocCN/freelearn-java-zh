- en: 'Chapter 2: Software Requirements – Collecting, Documenting, Managing'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collecting requirements is arguably one of the most frustrating activities in
    software production for several reasons. Difficulties often arise because it is
    never completely clear who the owner is, as well as because architects cannot
    do a good design without certain requisites, and developers, of course, can't
    do a proper job without the designs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: However, it is fairly common practice for a development team to start doing
    something without a complete requirements collection job because there is no time.
    Indeed, what often happens, especially in regards to large and complex projects,
    is that the milestones are put in place before the project scope is completely
    defined. In this industry, since software is an intangible product (not like a
    building or a bridge), budget approval is usually a more *fluid* process. Therefore,
    it's not unusual to have a project approved before all the details (including
    requirements, feasibility, and architectural design) are fully defined. Needless
    to say, this is an inherently bad practice.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at different techniques for requirements gathering
    and analysis in order to increase the quality of our software deliverables.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'You will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'The different types of requirements: **functional** and **non-functional**'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What characteristics a requisite must have
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to formalize requirements in standard formats
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to collect requirements by using agile and interactive techniques
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you have completed this chapter, you will be able to organize productive
    requirements gathering sessions and document them in a clear way. Being able to
    collect and properly document requisites can be a real gamechanger for your career
    in software development in several ways:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The quality of the software you produce will be better, as you will focus on
    what's really needed and be able to prioritize well.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have a better understanding of the language of business and the needs
    of your customers, and you will therefore implement features that better fit their
    needs.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have the possibility to run informal and interactive sessions on requirements
    gathering. (As an example, see the *Event Storming* section.)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You will have a primer about international standards in software requirements
    specifications, which may be a hard constraint in some environments (for example,
    when working for regulated industries such as government or healthcare).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since requirements collection and management is a practice mostly unrelated
    to a specific programming language, this chapter doesn't directly reference Java
    technology.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's start exploring the discipline of software requirements engineering.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: Introducing requirements engineering
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From a purely metaphorical perspective, if an algorithm is similar to a food
    recipe, a software requirement is the order we place at a restaurant. But the
    similarity probably ends here. When we order our food, we pick a specific dish
    from a discrete list of options, possibly with some small amount of *fine tuning*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, continuing with our example, the software requirement has a longer and
    more complex life cycle (think about the testing and evolution of the requirement
    itself), while the food order is very well timeboxed: the customer places the
    order and receives the food. In the worst case, the customer will dislike the
    food received (like a user acceptance test going wrong), but it''s unusual to
    evolve or change the order. Otherwise, everything is okay when the customer is
    happy and the cook has done a great job (at least for that particular customer).
    Once again, unlike the software requirement life cycle, you will likely end up
    with bug fixes, enhancements, and so forth.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for software projects are complex and can be difficult to identify
    and communicate. Software requirements engineering is an unusual job. It requires
    a concerted effort by the customer, the architect, the product manager, and sometimes
    other various professionals. *But what does a technical requirement actually look
    like?*
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Feature, Advantage, and Benefit
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we will see in a few sections, requirements collection involves many different
    professionals working together to shape what the finished product will look like.
    These professionals usually fall into two groups, business-aware and technology-aware.
    You should of course expect those two groups to have different visions and use
    different languages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: A good way to build common ground and facilitate understanding between these
    two groups is to use the **Feature, Advantage, and Benefit logical flow**.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: This popular framework, sometimes referred to as **FAB**, is a marketing and
    sales methodology used to build messaging around a product. While it may not seem
    immediately relevant in the requirements gathering phase, it is worth looking
    at.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'In the FAB framework, the following apply:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: A **Feature** is an inherent product characteristic, strictly related to what
    the product can do.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Advantage** can be defined as what you achieve when using a particular
    Feature. It is common to have more than one Advantage linked to the same technical
    feature.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Benefit** is the final reason why you would want to use the Feature. If
    you want, it's one further step of abstraction starting from advantages, and it
    is common to have more than one Benefit linked to the same feature.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s see an example of FAB, related to the mobile payment example that we
    are carrying over from the previous chapter:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: A **Feature** is the possibility of authorizing payments with biometric authentication
    (such as with your fingerprint or face ID). That's just the technical aspect,
    directly related to the way the application is implemented.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The related **Advantage** is that you don't need to insert a PIN or password
    (and overall, you will need a simpler interaction with your device – possibly
    just one touch). That's what the feature will enable, in terms of usage of the
    application.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The linked **Benefit** is that your payments will be faster and easier. But
    another benefit can be that your payments will also be safer (no one will steal
    your PIN or password). That's basically the reason why you may want to use this
    particular feature.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can imagine, a non-technical person (for example, a salesperson or the
    final customer) will probably think of each requirement in terms of benefits or
    advantages. And that's the right way to do it. However, having reasoning on the
    FAB flow could help in having a uniform point of view, and possibly *repositioning*
    desiderata into features and eventually requirements. We can look at a simple
    example regarding user experience.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Sticking with our mobile payments sample application, a requirement that business
    people may want to think about is the advantages that the usage of this solution
    will bring.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: One simple example of a requirement could be to have a list of payments easily
    accessible in the app. A feature linked to that example would allow the customers
    to see their transaction list immediately after logging into the system.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: In order to complete our flow, we should also think about the benefits, which
    in this case could be described as the ability to keep your expenses under control.
    However, this could also work the other way around. When reasoning with more tech-savvy
    stakeholders, it's easier to focus on product features.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: You may come up with a feature such as *a user currently not provisioned in
    the system should be presented with a demo version of the application*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: The advantage here is having an easy way to try the application's functionalities.
    The benefit of this for customers is that they can try the application before
    signing up for an account. The benefit for the business is that they have free
    advertising to potentially draw in more customers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: You might now ask, *so what am I looking for, when doing requirements gathering,
    that is, searching for features?* There are no simple answers here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: My personal experience says that a feature may be directly considered a requirement,
    or, more often, be composed of more than one requirement. However, your mileage
    may vary depending on the type of product and the kind of requirements expressed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: One final thing to note about the FAB reasoning is that it will help with clustering
    requirements (by affinity to similar requirements or benefits), and with prioritizing
    them (depending on which benefit is the most important).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Now we have a simple process to link the technical qualities of our product
    to business impacts. However, we haven't yet defined exactly what a requirement
    is and what its intrinsic characteristics are. Let's explore what a requirement
    looks like.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Features and technical requirements
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we saw in the previous section, requirements are usually strictly related
    to the **features** of the system. Depending on who is posing the request, requirements
    can be specified with varying amounts of technical detail. A requirement may be
    as low-level as the definition of an API or other software interfaces, including
    arguments and quantitative input validation/outcome. Here is an example of what
    a detailed, technically specified requirement may look like:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '*When entering the account number (string, six characters), the system must
    return the profile information. Result code as* `int` *(0 if operation is successful),
    name as* `string`*, and surname as* `string` *[...]. In the case of account in
    an invalid format, the system must return a result code identifying the reason
    of the fault, as per a mapping table to be defined.*'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Often requirements are less technical, identifying more behavioral aspects of
    the system. In this case, drawing on the model we discussed in the previous section
    (*Feature, Advantage, and Benefit*), we are talking about something such as a
    feature or the related advantage.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'An example here, for the same functionality as before, may look like this:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '*The user must have the possibility to access their profile, by entering the
    account number.*'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: It's easy to understand that a non-technical requirement must be detailed in
    a quantitative and objective way before being handed over to development teams.
    *But what makes a requirement quantitative and objective?*
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: Types and characteristics of requirements
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of characteristics that make a requirement effective, meaning
    easy to understand and respondent to the customer expectations in a non-ambiguous
    way.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'From my personal point of view, in order to be effective, a requirement must
    be the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '**Consistent**: The requirement must not conflict with other requirements or
    existing functionalities unless this is intentional. If it is intentional (for
    example, we are removing old functionalities or fixing wrong behaviors), the new
    requirement must explicitly override older requirements, and it''s probably an
    attention point since corner cases and conflicts are likely to happen.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Implementable**: This means, first of all, that the requirement should be
    feasible. If our system requires a direct brain interface to be implemented, this
    of course will not work (at least today). Implementable further means that the
    requirement must be achievable in the right amount of time and at the right cost.
    If it needs 100 years to be implemented, it''s in theory feasible but probably
    impractical.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, these points need to be considered within the context of the current
    project, since although it may be easy to implement something in one environment
    it may not be feasible in another. For example, if we were a start-up, we could
    probably launch a brand-new service on our app that would have little impact on
    the existing userbase. If we were a big enterprise, however, with a large customer
    base and consolidated access patterns, this may need to be evaluated more thoroughly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '**Explicit**: There should be no room for interpretation in a software requirement.
    Ambiguity is likely to happen when the requirement is defined in natural language,
    given that a lot of unspoken data is taken erroneously for granted. For this reason,
    it is advised to use tables, flowcharts, interface mockups, or whatever schema
    can help clarify the natural language and avoid ambiguity. Also, straightforward
    wording, using defined quantities, imperative verbs, and no metaphors, is strongly
    advised.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testable**: In the current development philosophies, heavily focused on experimentation
    and trial and error (we will see more on this in the upcoming chapters), a requirement
    must be translated in a software test case, even better if it can be fully automated.
    While it may be expected that the customer doesn''t have any knowledge of software
    testing techniques, it must be possible to put testing scenarios on paper, including
    things such as tables of the expected outputs over a significant range of inputs.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The QA department may, at a later stage, complement this specification with
    a wider range of cases, in order to test things such as input validation, expected
    failures (for example, in the case of inputs too large or malformed), and error
    handling. Security departments may dig into this too, by testing malicious inputs
    (for example, SQL injections).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: This very last point leads us to think about the technical consequences of a
    requirement. As we were saying at the beginning of this chapter, requirements
    are commonly exposed as business features of the system (with a technical standpoint
    that can vary in the level of detail).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: However, there are *implicit* requirements, which are not part of a specific
    business use case but are essential for the system to work properly.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'To dig deeper into this concept, we must categorize the requirements into three
    fundamental types:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '**Functional requirements**: Describing the business features of the system,
    in terms of expected behavior and use cases to be covered. These are the usual
    business requirements impacting the use cases provided by the system to be implemented.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Non-functional requirements**: Usually not linked to any specific use case,
    these requirements are necessary for the system to work properly. Non-functional
    requirements are not usually expressed by the same users defining functional requirements.
    Those are usually about implicit aspects of the application, necessary to make
    things work. Examples of non-functional requirements include performance, security,
    and portability.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非功能性需求**：通常不与任何特定用例相关联，这些需求对于系统正常运行是必要的。非功能性需求通常不是由定义功能性需求的同一用户表达的。它们通常关于应用的隐含方面，对于使事物正常工作是必要的。非功能性需求的例子包括性能、安全和可移植性。'
- en: '**Constraints**: Implicit requirements are usually considered a *must* and
    are mandatory. These include external factors and things that need to be taken
    for granted, such as obeying laws and regulations and complying with standards
    (both internal and external to the company).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**约束**：隐含需求通常被视为“必须”的，是强制性的。这包括外部因素和需要视为理所当然的事情，例如遵守法律和法规以及符合标准（公司内部和外部）。 '
- en: One example here could be the well-known **General Data Protection Regulation**
    (**GDPR**), the EU law about data protection and privacy, which you have to comply
    with if you operate in Europe. But you may also have to comply with the industry
    standards depending on the particular market in which you are operating (that's
    pretty common when working with banks and payments), or even standards enforced
    by the company you are working with. A common example here is the compatibility
    of the software (such as when it has to be compatible with a certain version of
    an operating system or a particular browser).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可以举一个例子，那就是广为人知的**通用数据保护条例**（**GDPR**），这是关于数据保护和隐私的欧盟法律，如果你在欧洲运营，就必须遵守。但根据你运营的特定市场，你可能还必须遵守行业标准（当与银行和支付公司合作时这种情况很常见），甚至是你所在公司强制执行的标准。一个常见的例子是软件的兼容性（例如，当它必须与某个操作系统的特定版本或特定浏览器兼容时）。
- en: Now that we've seen the different types of requirements and their characteristics,
    let's have a look at the life cycle of software requirements.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了不同类型的需求及其特征，让我们来看看软件需求的生命周期。
- en: The life cycle of a requirement
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 需求的生命周期
- en: 'The specification of a requirement is usually not immediate. It starts with
    an idea of how the system should work to satisfy a use case, but it needs reworking
    and detailing in order to be documented. It must be checked against (or mixed
    with) non-functional requirements, and of course, may change as the project goes
    on. In other words, the life cycle of requirements can be summarized as follows.
    Each phase has an output, which is the input for the following one (the path could
    be non linear, as we will see):'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 需求的规范通常不是立即的。它始于一个关于系统应该如何工作以满足用例的想法，但需要重新工作和详细说明才能被记录下来。它必须与非功能性需求（或与之混合）进行核对，当然，随着项目的进行可能会发生变化。换句话说，需求的生命周期可以总结如下。每个阶段都有一个输出，这是下一个阶段的输入（路径可能是非线性的，正如我们将看到的）：
- en: '**Gathering**: Collection of use cases and desired system features, in an unstructured
    and raw format. This is done in various ways, including interviews, collective
    sketches, and brainstorming meetings, including both the customer and the internal
    team. **Event Storming** (which we will see soon) is a common structured way to
    conduct brainstorming meetings, but less structured techniques are commonly used
    here, such as using sticky notes to post ideas coming from both customers and
    internal teams. In this phase, the collection of data usually flows freely without
    too much elaboration, and people focus more on the creative process and less on
    the details and impact of the new features. The output for this phase is an unstructured
    list of requirements, which may be collected in an electronic form (a spreadsheet
    or text document), or even just a photograph of a wall with sticky notes.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**收集**：以非结构化和原始格式收集用例和期望的系统功能。这可以通过多种方式完成，包括访谈、集体草图和头脑风暴会议，包括客户和内部团队。**事件风暴法**（我们很快就会看到）是进行头脑风暴会议的一种常见结构化方法，但在这里通常使用较少结构化的技术，例如使用便利贴来张贴来自客户和内部团队的创意。在这个阶段，数据的收集通常自由流动，不需要太多阐述，人们更关注创造性过程，而不是新功能的细节和影响。这个阶段的输出是一个非结构化的需求列表，可能以电子形式（电子表格或文本文档）收集，甚至只是一张贴有便利贴的墙的照片。'
- en: '**Vetting**: As a natural follow-up, in this phase the requirements output
    from the previous phase is roughly analyzed and categorized. Contradicting and
    unfeasible topics must be addressed. It''s not unusual to go back and forth between
    this phase and the previous one. The output here is still an unstructured list,
    similar to the one we got from the previous step. But we started to polish it,
    by removing duplicates, identifying the requirements that need more details, and
    so on.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**审查**：作为一个自然的后续步骤，在这个阶段，对前一阶段输出的需求进行大致分析和分类。必须解决矛盾和不可行的话题。在这个阶段来回走动并不罕见。这里的输出仍然是一个非结构化的列表，类似于我们从前一阶段得到的列表。但我们开始对其进行润色，通过删除重复项、识别需要更多细节的需求等。'
- en: '**Analysis**: In this phase, it''s time to conduct a deeper analysis of the
    output from the previous phase. This includes identifying the impact of the implementation
    of every new feature, analyzing the completeness of the requirement (desired behavior
    on a significant list of inputs, corner cases, and validation), and the prioritization
    of the requirement. While not necessary, it is not unusual in this case to have
    a rough idea of the implementation costs of each requirement. The output from
    this step is a far more stable and polished list, basically a subset of the input
    we got. But we are still talking about the unstructured data (not having an ID
    or missing some details, for example), which is what we are going to address in
    the next phase.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析**：在这个阶段，我们需要对前一阶段输出的内容进行更深入的分析。这包括识别每个新功能实施的影响、分析需求的完整性（对一系列重要输入、边缘情况和验证的期望行为）、以及需求的优先级。虽然不是必需的，但在这个阶段对每个需求的实施成本有一个大致的了解并不罕见。这一步骤的输出是一个更加稳定和完善的列表，基本上是输入的一个子集。但我们仍在讨论非结构化数据（例如，没有ID或缺少一些细节），这是我们将在下一阶段解决的问题。'
- en: '**Specification**: Given that we''ve completed the study of each requirement,
    it''s now time to document it properly, capturing all the aspects explored so
    far. We may already have drafts and other data collected during the previous phases
    (for example, schemas on paper, whiteboard pictures, and so on) that just need
    to be transcribed and polished. The documentation redacted in this phase has to
    be accessible and updatable throughout the project. This is essential for tracking
    purposes. As an output of this phase, you will have each requirement checked and
    registered in a proper way, in a document or by using a tool. There are more details
    on this in the *Collecting requirements – formats and tools* section of this chapter.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规范**：鉴于我们已经完成了每个需求的研究，现在是时候对其进行适当的记录，捕捉到目前为止探索的所有方面。我们可能已经在前一阶段收集了草案和其他数据（例如，纸上的模式、白板图片等），只需转录和润色即可。这一阶段编写的文档在整个项目期间必须可访问和可更新。这对于跟踪目的至关重要。这一阶段的输出将是每个需求都经过检查并以适当的方式记录，无论是通过文档还是使用工具。关于这一点，本章的“收集需求
    – 格式和工具”部分有更多细节。'
- en: '**Validation**: Since we got the formal documentation of each requirement as
    an output of the previous phase, it is a best practice to double-check with the
    customer whether the final rework covers their needs. It is not unusual for, after
    seeing the requirements on paper, a step back to the gathering phase to have to
    be made in order to refocus on some use cases or explore new scenarios that have
    been uncovered during the previous phases. The output of this phase has the same
    format as the output of the previous phase, but you can expect some changes in
    the content (such as priorities or adding/removing details and contents). Even
    if some rework is expected, this data can be considered as a good starting point
    for the development phase.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：由于我们已经从前一阶段得到了每个需求的正式文档作为输出，因此与客户进行双重检查，以确保最终的重工覆盖了他们的需求，是一种最佳实践。在看到需求在纸上后，为了重新关注某些用例或探索前一阶段中揭露的新场景，有时需要回到收集阶段，这是不常见的。这一阶段的输出格式与前一阶段的输出格式相同，但你可以期待内容（如优先级或添加/删除细节和内容）有所变化。即使预期会有一些重工作业，这些数据也可以被认为是开发阶段的一个良好起点。'
- en: 'So, the requirement life cycle can be seen as a simple workflow. Some steps
    directly lead to the next, while sometimes you can loop around phases and step
    backward. Graphically, it may look like the following diagram:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，需求生命周期可以看作是一个简单的流程。有些步骤直接导致下一步，而有时你可以循环回到阶段并后退一步。从图形上看，它可能看起来像以下图表：
- en: '![Figure 2.1 – Software requirements lifecycle'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – 软件需求生命周期]'
- en: '](img/Figure_2.01_B16354.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – Software requirements life cycle
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the previous diagram, software requirements specification
    is often more than a simple phase of the software life cycle. Indeed, since requirements
    shape the software itself, they may follow a workflow on their own, evolving and
    going through iterations.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: As per the first step of this flow, let's have a look at requirements gathering.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: Discovering and collecting requirements
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first step in the requirements life cycle is **gathering**. Elicitation
    is an implicit part of that. Before starting to vet, analyze, and ultimately document
    the requirements, you need to start the conversation and start ideas flowing.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: To achieve this, you need to have the right people in the room. It may seem
    trivial, but often it is not clear who the source of requirements should be (for
    example, the business, a vague set of people including sales, executive management,
    project sponsors, and so on). *Even if you manage to have those people onboard,
    who else is relevant for requirement collection?*
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no golden rule here, as it heavily depends on the project environment
    and team composition:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: You will need for sure some **senior technical resources**, usually lead architects.
    These people will help by giving initial high-level guidance on technical feasibility
    and ballpark effort estimations.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other useful participants are **enterprise architects** (or business architects),
    who could be able to evaluate the impact of the solution on the rest of the enterprise
    processes and technical architectures. These kinds of profiles are of course more
    useful in big and complex enterprises and can be less useful in other contexts
    (such as start-ups). As a further consideration, experienced people with this
    kind of background can suggest well-known solutions to problems, compared with
    similar applications already in use (or even reusing functionalities where possible).
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quality engineers** can be a good addition to the team. While they may be
    less experienced in technical solutions and existing applications, they can think
    about the suggested requirements in terms of test cases, narrowing them down and
    making them more specific, measurable, and testable.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Security specialists** can be very helpful. Thinking about security concerns
    early in the software life cycle can help to avoid surprises later on. While not
    exhaustive, a quick assessment of the security impacts of proposed requirements
    can be very useful, increasing the software quality and reducing the need to rework.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have all the required people in a room, let's look at a couple of
    exercises to break the ice and keep ideas flowing to nail down our requirements.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: The first practice we will look at is the **lean canvas**. This exercise is
    widely used in the start-up movement, and it focuses on bringing the team together
    to identify what's important in your idea, and how it will stand out from the
    competition.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: The lean canvas
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **lean canvas** is a kind of holistic approach to requirements, focusing
    on the product's key aspects, and the overall business context and sustainability.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Originating as a tool for start-ups, this methodology was developed by Ash Maurya
    (book author, entrepreneur, and CEO at LEANSTACK) as an evolution/simplification
    of the Business Model Canvas, which is a similar approach created by Alexander
    Osterwalder and more oriented to the business model behind the product. This method
    is based on a one-page template to gather solution requirements out of a business
    idea.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 'The template is made of nine segments, highlighting nine crucial aspects that
    the final product must have:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2  – The lean canvas scaffold'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.02_B16354.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – The lean canvas scaffold
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the numbering of each segment reflects the order in which the sections
    should be filled out. Here is what each segment means:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem**: *What issues will our customers solve by using our software product?*'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Customer Segments**: *Who is the ideal person to use our software product
    (that is, the person who has the problems that our product will solve)?*'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Unique Value Proposition**: *Why is our software product different from other
    potential alternatives solving similar problems?*'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Solution**: *How will our software product solve the problems in section
    1?*'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Channels**: *How will we reach our target customer?* (This is strictly related
    to how we will market our software solution.)'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Revenue Streams**: *How we will make money out of our software solution?*'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Cost Structure**: *How much will it cost to build, advertise, and maintain
    our software solution?*'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Key Metrics**: *What are the key numbers that need to be used to monitor
    the health of the project?*'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Unfair Advantage**: *What''s something that this project has that no one
    else can copy/buy?*'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The idea is to fill each of these areas with one or more propositions about
    the product's characteristics. This is usually done as a team effort in an informal
    setting. The canvas is pictured on a whiteboard, and each participant (usually
    product owners, founders, and tech leads) contributes ideas by sticking Post-it
    notes in the relevant segments. A *postprocess* collective phase usually follows,
    grouping similar ideas, ditching the less relevant ideas, and prioritizing what's
    left in each segment.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the focus here is shifted toward the feasibility of the overall
    project, instead of the detailed list of features and the specification. For this
    reason, this methodology is often used as a support for doing elevator pitches
    to potential investors. After this first phase, if the project looks promising
    and sustainable from the business model point of view, other techniques may be
    used to create more detailed requirement specifications, including the ones already
    discussed, and more that we will see in the next sections.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: While the lean canvas is more oriented to the business model and how this maps
    into software features, in the next section we will explore Event Storming, which
    is a discovery practice usually more focused on the technical modeling of the
    solution.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Event Storming
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Event Storming** is an agile and interactive way to discover and design business
    processes and domains. It was described by Alberto Brandolini (IT consultant and
    founder of the Italian Domain Driven Design community) in a now-famous blog post,
    and since then has been widely used and perfected.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: The nice thing about this practice is that it is very friendly and nicely supports
    brainstorming and cross-team collaboration.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: To run an Event Storming session, you have to collect the right people from
    across various departments. It usually takes at least business and IT, but you
    can give various different flavors to this kind of workshop, inviting different
    profiles (for example, security, UX, testers) to focus on different points of
    view.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: When you have the right mix of people in the room, you can use a tool to help
    them interact with each other. When using physical rooms (the workshop can also
    be run remotely), the best tool is a wall plus sticky notes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: The aim of the exercise is to design a business process from the user's point
    of view. *So how do you do that?*
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: You start describing **domain events** related to the user experience (for example,
    a recipient is selected). Those domain events are transcribed on a sticky note,
    traditionally orange, and posted to the wall respecting the temporal sequence.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You then focus on what has caused the domain event. If the cause is a user interaction
    (for example, the user picks a recipient from a list), it's known as a **command**
    and tracked as a blue sticky note, posted close to the related event.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may then draft the **user** behind the command (for example, a customer
    of the bank). This means drafting a persona description of the user carrying out
    the command, tracking it on a yellow sticky note posted close to the command.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If domain events are generated from other domain events (for example, the selected
    recipient is added to the recently used contacts), they are simply posted close
    to each other.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If there are interactions with **external systems** (for example, the recipient
    is sent to a CRM system for identification), they are tracked as pink sticky notes
    and posted near to the related domain event.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s have a look at a simple example of Event Storming. The following is
    just a piece of a bigger use case; this subset concisely represents the access
    of a user to its transactions list. The use case is not relevant here, it''s just
    an example to show the main components of this technique:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – The Event Storming components'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.03_B16354.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – The Event Storming components
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: In the diagram, you can see a small but complete subset of an Event Storming
    session, including stickies representing the different components (**User**, **Command**,
    and **Domain Events**) and the grouping representing the aggregates.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '*What do you achieve from this kind of representation?*'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: A shared understanding of the overall process.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A clustering of events and commands, identifying the so-called **aggregates**.
    This concept is very important for the modeling of the solution, and we will come
    back to this in [*Chapter 4*](B16354_04_Final_JM_ePUB.xhtml#_idTextAnchor089),
    *Best Practices for Design and Development*, when talking about Domain-Driven
    Design.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The visual identification of bottlenecks and unclear links between states of
    the system.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's important to note that this methodology is usually seen as a scaffold.
    You may want to customize it to fit your needs, tracking different entities, sketching
    simple user interfaces to define commands, and so on. Moreover, these kinds of
    sessions are usually iterative. Once you've reached a complete view, you can restart
    the session with a different audience to further enrich or polish this view, to
    focus on subdomains and so on.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we will explore some alternative discovery practices.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: More discovery practices
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Requirements gathering and documentation is somewhat of a composite practice.
    You may find that after brainstorming sessions (for example, a lean canvas, Event
    Storming, or other comparable practices), other requirement engineering techniques
    may be needed to complete the vision and explore some scenarios that surfaced
    during the other sessions. Let's quickly explore these other tools so you can
    add them to your toolbox.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Questionnaires
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Questions and answers are a very simple and concise way of capturing fixed points
    about a software project. If you are capable of compiling a comprehensive set
    of questions, you can present your questionnaire to the different stakeholders
    to collect answers and compare the different points of view.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: The hard part is building such a list of questions. You may have some ideas
    from previous projects, but given that questions and answers are quite a *closed-path*
    exercise, it isn't particularly helpful if you are at the very beginning of the
    project. Indeed, it is not the best method to use if you are starting from a blank
    page, as it's not targeted at nurturing creative solutions and ideas. For this
    reason, I would suggest proceeding with this approach mostly to detail ideas and
    use cases that surfaced in other ways (for example, after running brainstorming
    sessions).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Mockups and proofs of concepts
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An excellent way to clarify ideas is to directly test what the product will
    look like by playing with a subset of functionalities (even if fake or just stubbed).
    If you can start to build cheap prototypes, or even just mockups (fake interfaces
    with no real functionalities behind the scenes), you may be able to get non-technical
    stakeholders and final users on board sooner, as you give them the opportunity
    to interact with the product instead of having to imagine it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: This is particularly useful in UX design, and for showcasing different solutions.
    Moreover, in modern development, this technique can be evolved toward a shorter
    feedback loop (release early, release often), having the stakeholders test alpha
    releases of the product instead of mockups so they can gain an understanding of
    what the final product will look like and change the direction as soon as possible.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: A/B testing
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A further use for this concept is to have the final users test by themselves
    and drive the product evolution. This technique, known as **A/B testing**, is
    used in production by high-performing organizations and requires some technological
    support to be implemented. The principle is quite simple: you pick two (or more)
    alternative features, put them into production, and measure how they perform.
    In an evolutionary design, the best performing will survive, while the others
    will be discarded.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, the devil is in the details here. Implementing more alternatives
    and discarding some of them may be expensive, so often there are just minor differences
    between them (for example, the color or position of elements in the UI). Also,
    the performance must be measurable in an objective way, for example, in e-commerce
    you might measure the impact on purchases, or in advertising the conversions of
    banners and campaigns.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Business intelligence
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another tool to complete and flesh out the requirement list is **business intelligence**.
    This might mean sending surveys to potential customers, exploring competitor functionalities,
    and doing general market research. You should not expect to get a precise list
    of features and use cases by using only this technique, but it may be useful for
    completing your view about the project or coming up with some new ideas.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: You may want to check whether your idea for the finished system resonates with
    final customers, how your system compares with competitors, or whether there are
    areas in which you could do better/be different. This tool may be used to validate
    your idea or gather some last pieces to complete the picture. Looking at *Figure
    2.1*, this is something you may want to do during the validation phase.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have collected a wide set of requirements and points of view. Following
    the requirements life cycle that we saw at the beginning of this chapter, it is
    now time for requirements analysis.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Analyzing requirements
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The discovery practices that we've seen so far mostly cover the gathering and
    vetting of requirements. We've basically elicited from the stakeholders details
    of the desired software functionalities and possibly started organizing them by
    clustering, removing duplicates, and resolving macroscopic conflicts.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: In the analysis phase, we are going to further explore the implications of the
    requirements and complete our vision of what the finished product should look
    like. Take into account that product development is a fluid process, especially
    if you are using modern project management techniques (more on that in [*Chapter
    5*](B16354_05_Final_JM_ePUB.xhtml#_idTextAnchor109), *Exploring the Most Common
    Development Models*). For this reason, you should consider that most probably
    not every requirement defined will be implemented, and certainly not everything
    will be implemented in the same release – you could say we are shooting at a moving
    target. Moreover, it is highly likely that more requirements will be developed
    later on.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, requirements analysis will probably be performed each time,
    in an iterative approach. Let's start with the first aspect you should consider
    when analyzing the requirements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: Checking for coherence and feasibility
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first section, we clearly stated that a requirement must be consistent
    and implementable. That is what we should look for in the analysis phase.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: There is no specific approach for this. It's a kind of qualitative activity,
    going through requirements one by one and cross-checking them to ensure they are
    not conflicting with each other. With big and complex requirement sets, this activity
    may be seen as a *first pass*, as no explicit conflict may arise later during
    design and implementation. Similar considerations may be made with regard to feasibility.
    In this phase, it's important to catch the big issues and identify the requirements
    that seem to be unfeasible, however, more issues can arise during later phases.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: If incoherent or unfeasible requirements are spotted, it's crucial to review
    them with the relevant stakeholders (usually business), in order to reconsider
    the related features, and make changes. From time to time, small changes to the
    requirement can make it feasible. A classic scenario is related to picking a subset
    of the data or making similar compromises. In our mobile payments example, it
    may not be feasible to show instantaneously the whole list of transactions updated
    in real time, however, it could be a good compromise to show just a subset of
    them (for example, last year) or have a small visualization delay (for example,
    a few seconds) when new transactions occur.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: Checking for explicitness and testability
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Continuing with requirements characteristics, it is now time to check the explicitness
    and testability of each requirement. This may be a little more systematic and
    quantitative compared to the previous section. Essentially, you should run through
    the requirements one by one and check whether each requirement is expressed in
    a defined way, making it easy to understand whether the implementation has been
    completed correctly. In other words, the requirement must be testable and it is
    best if it is testable in an objective and automatable way.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Testing for explicitness brings with it the concept of completeness. Once a
    requirement (and the related feature) is accepted, all the different paths must
    be covered in order to provide the product with predictable behavior in most foreseeable
    situations. While this may seem hard and complex, in most situations it's enough
    to play with possible input ranges and conditional branches to make sure all the
    possible paths are covered. Default cases are another important aspect to consider;
    if the software doesn't know how to react to particular conditions it's a good
    idea to define reasonable, standard answers to fall into.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Checking non-functional requirements and constraints
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the last step, it's important to run through the requirements list, looking
    for non-functional requirements and constraints. The topic here is broad and subjective.
    It's likely not possible (nor useful) to explicate all the non-functional requirements
    and constraints and put them on our list. Most of them are shared with existing
    projects, regulated by external parties, or simply not known.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: However, there are areas that have an important impact on the project implementation,
    and for this reason, must be considered in the analysis phase.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: One usual suspect here is security. All the considerations about user sessions,
    what to do with unauthenticated users, and how to manage user logins and such
    have implications for the feasibility and complexity of the solution, other than
    having an impact on the user experience. Analog reasoning can be made for performance.
    As seen in the *Checking for coherence and feasibility* section, small changes
    in the amount of data and the expected performances of the system may make all
    the difference. It's not unusual to have non-technical staff neglecting these
    aspects or expecting unreasonable targets. Agreeing (and negotiating) on the expected
    result is a good way to prevent issues later in the project.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Other considerations of non-functional requirements and constraints may be particularly
    relevant in specific use cases. Take into account that this kind of reasoning
    may also be carried over into the project planning phase, in which constraints
    in budget or timeframe may drive the roadmap and release plan.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Now, we've gone through the analysis phase in the software requirements life
    cycle. As expected, we will now approach the specification phase. We will start
    with a very formal and structured approach and then look at a less structured
    alternative.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Specifying requirements according to the IEEE standard
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Institute of Electrical and Electronics Engineers** (**IEEE**) has driven
    various efforts in the field of software requirements standardization. As usual,
    in this kind of industry standard, the documents are pretty complete and extensive,
    covering a lot of aspects in a very verbose way.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The usage of those standards may be necessary for specific projects in particular
    environments (for example, the public sector, aviation, medicine). The most famous
    deliverable by IEEE in this sense is the 830-1998 standard. This standard has
    been superseded by the ISO/IEEE/IEC 29148 document family.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we are going to cover both standards, looking at what the documents
    describe in terms of content, templates, and best practices to define requirements
    adhering to the standard.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: The 830-1998 standard
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **IEEE 830-1998** standard focuses on the **Software Requirement Specification**
    document (also known as **SRS**), providing templates and suggestions on content
    to be covered.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'Some concepts are pretty similar to the ones discussed in the previous sections.
    The standard states all the characteristics that a requirement specification must
    have. Each requirement specification should be the following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: Correct
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unambiguous
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Consistent
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ranked for importance and/or stability
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Verifiable
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifiable
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traceable
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, this is similar to the characteristics of requirements. One
    interesting new concept added here is the ranking of requirements. In particular,
    the document suggests classifying the requirements by importance, assigning priorities
    to requirements, such as essential, conditional, optional, and/or stability (stability
    refers to the number of expected changes to the requirement due to the evolution
    of the surrounding organization).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting concept discussed in this standard is **prototyping**. I
    would say that this is positively futuristic, considering that this standard was
    defined in 1998\. Well before the possibility to cheaply create stubs and mocks,
    as is normal today, this standard suggests using prototypes to experiment with
    the possible outcome of the system and use it as a support for requirements gathering
    and definition.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'The last important point I want to highlight about IEEE 830-1998 is the template.
    The standard provides a couple of samples and a suggested index for software requirements
    specifications. The agenda includes the following:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '**Introduction**: Covering the overview of the system, and other concepts to
    set the field, such as the scope of the document, purpose of the project, list
    of acronyms, and so on.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Overall description**: Describing the background and the constructs supporting
    the requirements. Here, you may define the constraints (including technical constraints),
    the interfaces to external systems, the intended users of the system (for example,
    the skill level), and the product functions (intended to give an overview of the
    product scope, without the details that map to specific requirements).'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specific requirements**: This refers to the requirements themselves. Here,
    everything is expected to be specified with a high amount of detail, focusing
    on inputs (including validation), expected outputs, internal calculations, and
    algorithms. The standard offers a lot of suggestions for topics that need to be
    covered, including database design, object design (as in object-oriented programming),
    security, and so on.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Supporting information**: Containing accessory information such as a table
    of contents, index, and appendixes.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, this SRS document may appear a little verbose, but it's a comprehensive
    and detailed way to express software requirements. As we will see in the next
    section, IEEE and other organizations have superseded this standard, broadening
    the scope and including more topics to be covered.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: The 29148 standard
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed in the previous sections, the 830-1998 standard was superseded
    by a broader document. The 29148 family of standards represents a superset of
    830-1998\. The new standard is rich and articulated. It mentions the SRS document,
    following exactly the same agenda but adding a new section called **verification**.
    This section refers to specifying a testing strategy for each element of the software,
    suggesting that you should define a verification for each element specified in
    the other sections of the SRS.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Other than the SRS document, the 29148 standard suggests four more deliverables.
    Let''s have a quick look at them:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Stakeholder Requirements Specification**: This places the software project
    into the business perspective, analyzing the business environment around it and
    the impact it will have by focusing on the point of view of the business stakeholders.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **System Requirements Specification**: This focuses on the technical details
    of the interactions between the software being implemented and the other system
    composing the overall architecture. It specifies the domain of the application
    and the inputs/outputs.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**System Operational Concept**: This describes, from the user''s point of view,
    the system''s functionality. It takes a point of view on the operation of the
    system, policies, and constraints (including supported hardware, software, and
    performance), user classes (meaning the different kinds of users and how they
    interact with the system), and operational modes.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Concepts of Operations**: This is not a mandatory document. When provided,
    it addresses the system as a whole and how it fits the overall business strategy
    of the customer. It includes things such as the investment plan, business continuity,
    and compliance.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we have seen, the standards documents are a very polished and complete way
    to rationalize the requirements and document them in a comprehensive way. However,
    sometimes it may be unpractical to document the requirements in a such detailed
    and formalized way. Nevertheless, it's important to take these contents as a reference,
    and consider providing the same information, even if not using the very same template
    or level of details.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will have a look at alternative simplified formats for
    requirements collection and the tools for managing them.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Collecting requirements – formats and tools
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to manage and document requirements, you can use a tool of your choice.
    Indeed, many teams use electronic documents to detail requirements and track their
    progression, that is, in which stage of the requirement life cycle they are. However,
    when requirements grow in complexity, and the size of the team grows, you may
    want to start using more tailored tools.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by having a look at the required data, then we will focus on associated
    tooling.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Software requirements data to collect
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Regardless of the tool of your choice, there is a subset of information you
    may want to collect:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '**ID**: A unique identifier will be needed since the requirement will be cross-referenced
    in many different contexts, such as test cases, documentation, and code comments.
    It can follow a naming convention or simply be an incremental number.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: A verbal explanation of the use case to be implemented.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Precondition**: (If relevant) the situation that the use case originates
    from.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Essential**: How essential the requirement is, usually classified as *must
    have, should have, or nice to have*. This may be useful in order to filter requirements
    to be included in a release.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority**: A way to order/cluster requirements. Also, a useful way to filter
    requirements to be included in a release.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Source**: The author of the requirement. It may be a department, but it is
    better if there is also a named owner to contact in case of clarifications being
    needed.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Group**: A way to cluster requirements for functional areas. Also, can be
    a useful way to collect a set of requirements to implement in a release.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parent**: This is optional, in case you want to implement a hierarchy with
    a complex/high-level requirement made of a set of sub-requirements.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the basic attributes to collect for each software requirement, to
    enrich with any further column that may be relevant in your context.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'You may then want to track the implementation of each requirement. The attributes
    to do so usually include the following:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '**Status**: A synthetic description of the implementation status, including
    states such as UNASSIGNED, ASSIGNED, DEVELOPMENT, TESTING, and COMPLETE.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Owner**: The team member to whom this requirement is assigned. It may be
    a developer, a quality engineer, or someone else, depending on the status.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Target release**: The software release that is targeted to include this requirement.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blocker**: Whether this requirement is mandatory for this release or not.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Depends on**: Whether this requirement depends on other requirements to be
    completed (and what they are) before it can be worked on.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, in this case, this is a common subset of information useful for tracking
    the requirement status. It may be changed, depending on the tooling and the project
    management techniques used in your particular context. Let's now have a look at
    tools to collect and manage this information.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Collecting software requirements in spreadsheets
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Looking at the list of attributes described in the previous section, you can
    imagine that these requirements can be easily collected in spreadsheets. It's
    a tabular format, with one requirement per row, and columns corresponding to the
    information we've discussed. Also, you could have the status tracking in the same
    row or associated by ID in a different sheet. Moreover, you can filter the sheet
    by attribute (for example, priority, group, status), sort it, and limit/validate
    the inputs where relevant (for example, restricting values from a specified list).
    Accessory values may also be added (for example, last modified date).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what a requirements spreadsheet might look like:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A requirements spreadsheet'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.04_B16354.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – A requirements spreadsheet
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned, we can then have a sheet for tracking the progression of each
    requirement. It may look like the example that follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Status tracking sheet'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.05_B16354.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Status tracking sheet
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will have a look at tools that can be used to support
    requirements gathering and documentation.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: Specialized tools for software requirements management
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned in the previous section, with bigger teams and long-term projects,
    specialized tools for requirements management can be easier to use than a shared
    document/spreadsheet.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: The most useful feature is usually having a centralized repo, avoiding back
    and forth (and a lack of synchronization), which happens when using documents.
    Other interesting features to look for are auditing (tracking changes), notifications,
    reporting, and advanced validation/guided input. Also, integration with source
    code management (for example, associating features with commits and branches)
    is pretty common and useful.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'The software for requirements management is usually part of a bigger suite
    of utilities for project management. Here are some common products:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '**Jira** is a pretty widespread project management toolkit. It originated as
    an issue tracking tool to track defects in software products. It''s commonly used
    for tracking features too. It may also be extended with plugins enriching the
    functionalities of feature collection, organizing, and reporting.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Redmine** is an open source tool and includes many different project management
    capabilities. The most interesting thing about it is its customizability, enabling
    you to track features, associate custom fields, reference source code management
    tools (for example, Git), and define Gantt charts/calendars.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IBM Rational DOORS** is commercial software for requirements management,
    very complete and oriented to mid-large enterprises. It is part of the Rational
    suite, originally developed by Rational Software (now part of IBM), which is also
    famous for contributing to the creation of UML notation, which we will discuss
    in the next chapter.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The selection of a requirements management tool is a complex process, involving
    cost analysis, feature comparison, and more, which is way beyond the goal of this
    book.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Spreadsheets versus tools
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is a common debate whether to use specialized tools versus spreadsheets (or
    documents) for managing lists of requirements. It is a common path to start using
    a simpler approach (such as spreadsheets) and move to a tool once the project
    becomes too big or too complex to manage this way. Moreover, managers and non-technical
    users are more willing to use spreadsheets because they are more comfortable with
    such technology. Conversely, tech teams find it is often more effective to work
    with specialized tools. As usual, there is no one size that fits all, but honestly,
    the benefits of using a dedicated tool are many.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: The most immediate is having a centralized repository. Tools for requirement
    management are made to be used in real time, acting as a central, single source
    of truth. This allows us to avoid back and forth (and lack of synchronization),
    which happens when using documents (while you could object here that many Office
    suites offer real-time sharing and collaborative editing, nowadays).
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: Other interesting features included with a specialized tool are auditing (tracking
    changes), notifications, reporting, and advanced validation/guided input.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Also, the integration with the source code management (for example, associating
    features with commits and branches) is pretty common and appreciated by the development
    teams. Management can also benefit from planning and insight features, such as
    charts, aggregated views, and integration with other project management tools.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: So, at the end of the day, I strongly advise adopting a full-fledged requirements
    management tool instead of a simple spreadsheet if that is possible.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will explore requirements validation, as a final step
    in the software requirements life cycle.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Validating requirements
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we've seen, the final phase of the requirements life cycle involves validating
    the requirements. In this phase, all the produced documentation is expected to
    be reviewed and formally agreed by all the stakeholders.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: While sometimes neglected and considered optional, this phase is in fact very
    important. By having a formal agreement, you will ensure that all the iterations
    on the requirements list, including double-checking and extending partial requirements,
    still reflect the original intentions of the project.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: The business makes sure that all the advantages and benefits will be achieved,
    while the technical staff will check that the features are correctly mapped in
    a set of implementable requirements so that the development team will clearly
    understand what's expected.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: This *sign-off* phase could be considered the point at which the project first
    truly kicks off. At this point, we have a clearer idea of what is going to be
    implemented. This is not the final word, however; when designing the platform
    and starting the project plans, you can expect the product to be remodeled. Maybe
    just a set of features will be implemented, while other functionalities will be
    put on paper later.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we took a journey through the requirements life cycle. As
    already said, most of these phases can be considered iterative, and more than
    one loop will be needed before completing the process. Let''s have a quick recap
    of the requirements life cycle and the practices we have seen so far:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '**Gathering** **and** **vetting**: As we have seen, these two phases are strictly
    related and involve a cross-team effort to creatively express ideas and define
    how the final product should look. Here, we have seen techniques for brainstorming
    such as the lean canvas, Event Storming, and more.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analysis**: This phase includes checking the coherence, testability, and
    so on.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Specification**: This includes the IEEE standard and some less formalized
    standards and tools.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validation**: This is the formal sign-off and acceptance of a set of requirements.
    As said, it''s not unusual to see a further rework of such a set by going back
    to the previous phases, in an iterative way.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will continue to look at our mobile payments example,
    focusing on the requirements analysis phase.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: Case studies and examples
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuing with the case study about our mobile payments solution, we are going
    to look at the requirements gathering phase. For the sake of simplicity, we will
    focus only on a small specific scenario: a peer-to-peer payment between two users
    of the platform.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: The mobile payment application example
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we are doing in every chapter, let's have a look at some examples of the
    concepts discussed in this chapter applied to the mobile payment application that
    we are using as a case study.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Requirements life cycle
  id: totrans-257
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the real world, the life cycle of requirements will reasonably take weeks
    (or months), adding up to a lot of requirements and reworking of them, so it is
    impractical to build a complete example of the requirements life cycle for our
    mobile payment scenario. However, I think it will be interesting to have a look
    at how one particular requirement will evolve over the phases we have seen:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: In the **gathering** phase, it is likely we will end up with a lot of ideas
    around ease of use and security for each payment transaction. Most of the participants
    will start to think from an end user perspective, focusing on the user experience,
    and so it's likely we will have sketches and mockups of the application. Some
    more ideas will revolve around how to authorize the payment itself along with
    its options (*how about a secret swipe sequence, a PIN code, a face ID, a* **One-Time
    Password** (**OTP**)*, or a fingerprint?*).
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **vetting** phase (likely during, or shortly after, the previous phase),
    we will cluster and clean up what we have collected. The unpractical ideas will
    be dropped (such as the OTP, which may be cumbersome to implement), while others
    will be grouped (face ID and fingerprint) under biometric authorization. More
    concepts will be further explored and detailed: *What does it mean to be fast
    and easy to use? How many steps should be done to complete the payment?* *Is entering
    a PIN code easy enough (in cases where we cannot use biometric authorization)?*'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It''s now time to **analyze** each requirement collected so far. In our case,
    maybe the payment authorization. It is likely that the user will be presented
    with a screen asking for biometric authentication. *But what happens if the device
    doesn''t have a supported hardware?* *Should the customer be asked for other options,
    such as a PIN code?* *What should happen if the transaction is not authorized?*
    And of course, this kind of reasoning may go further and link more than one requirement:
    *What if a network is not available? What should happen after the transaction
    is completed successfully?* Maybe the information we have at that moment (where
    the customer is, what they have bought, the balance of their account) allows for
    some interesting use cases, such as contextual advertising, offering discounts,
    and so on.'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have clarified our requirements (and discovered new ones), it's
    time for **specification**. Once we pick a format (IEEE, or something simpler,
    such as a specialized tool or a spreadsheet), we start inserting our requirements
    one by one. Now, it's time to go for the maximum level of details. Let's think
    about bad paths (*what happens when things go wrong?*), corner cases, alternative
    solutions, and so on.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The last phase is the **validation** of what we have collected into our tool
    of choice. It is likely that only a subset of the team has done the analysis and
    specification, so it''s good to share the result of those phases with everyone
    (especially with non-technical staff and the project sponsors) to understand whether
    there is anything missing: maybe the assumptions we have made are not what they
    were expecting. It''s not uncommon that having a look at the full list will trigger
    discussions about prioritization or brand-new ideas (such as the one about contextual
    advertising that we mentioned in the analysis phase).'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next sections, we will see some more examples of the specific phases
    and techniques.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: Lean canvas for the mobile payment application
  id: totrans-265
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The lean canvas can be imagined as an elevator pitch for getting sponsorship
    for this application (such as for getting funds or approval for the development).
    In this regard, the lean canvas is a kind of conversation starter when it comes
    to requirements. It could be good to identify and detail the main, most important
    features, but you will probably need to use other techniques (such as the ones
    described so far) to identify and track all the requirements with a reasonable
    level of detail.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'With that said, here is how I imagine a lean canvas could look in this particular
    case. Of course, I am aware that other mobile and contactless solutions exist,
    so consider this just as an example. For readability purposes, I''m going to represent
    it as a bullet list. This is a transcribed version, as it happens after collecting
    all those aspects as sticky notes on a whiteboard:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '**Problem**: The payment procedure is cumbersome and requires cash or card.
    Payment with card requires a PIN code or a signature. The existing alternatives
    are credit or debit cards.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customer segment**: Everybody with a not-too-old mobile phone. The early
    adopters could be people that don''t own a credit card or don''t have one to hand
    (maybe runners, who don''t bring a wallet but only a mobile phone, or office workers
    during their lunch/coffee break).'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unique value proposition**: Pay with one touch, safely.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Solution**: A sleek, fast, and easy-to-use mobile application, allowing users
    to authorize payment transactions with biometric authentication.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unfair advantage**: Credit/debit cards that don''t need biometric authentication.
    (Of course I am aware, as I said, that contactless payments are available with
    credit cards, and other NFC options are bundled with mobile phones. So, in the
    real world, our application doesn''t really have an advantage over other existing
    options.)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Revenue streams**: Transaction fees and profiling data over customer spending
    habits.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost structure**: App development, hosting, advertising. (In the real world,
    you may want to have a ballpark figure for it and even have a hypothesis of how
    many customers/transactions you will need to break even. This will put you in
    a better position for pitching the project to investors and sponsors.)'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Key metrics**: Number of active users, transactions per day, average amount
    per transaction.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Channels**: Search engine optimization, affiliation programs, cashback programs.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we'll look at Event Storming for peer-to-peer payments.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: Event Storming for peer-to-peer payments
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we saw in the *Event Storming* section, in an Event Storming session it''s
    important to have a variety of representations from different departments in order
    to have meaningful discussions. In this case, let''s suppose we have business
    analysts, chief architects, site reliability engineers, and UX designers. This
    is what our wall may look like after our brainstorming session:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Event Storming for peer-to-peer payment'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.06_B16354.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Event Storming for peer-to-peer payment
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the preceding diagram, even in this simplified example we
    begin to develop a clear picture of the people involved in this use case and the
    external systems.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: We can see that two systems are identified, **Identity Management** (**IDM**)
    for dealing with customer profiles and **Backend** for dealing with balances and
    transactions.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: In terms of command and domain events, this is something you may want to reiterate
    in order to understand whether more interactions are needed, testing unhappy paths
    and defining aggregates (probably the hardest and most interesting step toward
    the translation of this model into software objects).
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see what a related spreadsheet of requirements
    might look like.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Requirements spreadsheet
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's imagine we successfully completed the Event Storming workshop (or
    even better, a couple of iterations of it). The collected inputs may be directly
    worked on and translated into software, especially if developers actively participated
    in the activity. However, for the sake of tracking, double-checking, and completing
    the requirements list, it's common to translate those views into a document with
    a different format. While you can complete a standard IEEE requirement document,
    especially if you can do some further reworking and have access to all the stakeholders,
    a leaner format is often more suitable.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, starting from the features we have identified before, let''s start to
    draft a spreadsheet for collecting and classifying the related requirements:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Requirement list of a peer-to-peer payment'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.07_B16354.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Requirements list of a peer-to-peer payment
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the list is not complete, however, it's already clear that from
    a concept nice and concisely expressed on a couple of sticky notes, you can potentially
    derive a lot of rows with requirements and relative preconditions.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, it is often debated whether you should include all potential paths
    (for example, including failed logins, error conditions, and other corner cases)
    in lists like these. The answer is usually common sense; the path is specified
    if special actions come from it (for example, retries, offering help, and so on).
    If it's just followed by an error message, this can be specified elsewhere (for
    example, in the test list and in user acceptance documents).
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: Another relevant discussion is about supporting information. From time to time,
    you may have important information to be conveyed in other formats. The most common
    example is the user interface, commonly specified with graphical mockups. It is
    up to you whether attaching the mockups somewhere else and referring to them in
    a field (for example, notes), or directly embedding everything (a list of requirements
    plus graphic mockups) into the same document is better. This is not very important,
    however, and it heavily depends on your specific context and what makes your team
    feel comfortable.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have covered a complete overview of software requirements.
    Knowing the characteristics of a well-defined software requirement, how to collect
    it, and how to document it is a very good foundation to build software architecture
    upon. Regardless of the technology and methodologies used in your projects, these
    ideas will help you to get your project up to speed and to build a collaborative,
    trusting relationship with your business counterparts.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: On the business side, the use of such tools and practices will allow for a structured
    way to provide input to the technical team and track the progression and coverage
    of the features implemented.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at software architecture modeling and what
    methodologies can be used for representing an architectural design.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ash Maurya, *The Lean Canvas* ([https://leanstack.com/leancanvas](https://leanstack.com/leancanvas))
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alberto Brandolini, *Introducing Event Storming* ([http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html](http://ziobrando.blogspot.com/2013/11/introducing-event-storming.html))
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Atlassian, *Jira Software* ([https://www.atlassian.com/software/jira](https://www.atlassian.com/software/jira))
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jean-Philippe Lang, *Redmine* ([https://www.redmine.org/](https://www.redmine.org/))
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IBM, *Rational Doors* ([https://www.ibm.com/it-it/products/requirements-management](https://www.ibm.com/it-it/products/requirements-management))
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
