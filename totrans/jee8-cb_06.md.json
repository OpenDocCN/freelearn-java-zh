["```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\npublic class ConnectionPool {\n\n    public static Connection getConnection() throws SQLException, \n    NamingException {\n        InitialContext ctx = new InitialContext();\n        DataSource ds = (DataSource) ctx.lookup(\"jdbc/MysqlPool\");\n\n        return ds.getConnection();\n    }\n}\n```", "```java\npublic class SysConfig {\n\n    private final String variable;\n    private final String value;\n\n    public SysConfig(String variable, String value) {\n        this.variable = variable;\n        this.value = value;\n    }\n\n    public String getVariable() {\n        return variable;\n    }\n\n    public String getValue() {\n        return value;\n    }\n}\n```", "```java\n@Stateless\npublic class SysConfigBean {\n\n    public String getSysConfig() throws SQLException, NamingException {\n        String sql = \"SELECT variable, value FROM sys_config\";\n\n        try (Connection conn = ConnectionPool.getConnection();\n                PreparedStatement ps = conn.prepareStatement(sql);\n                ResultSet rs = ps.executeQuery()\n                Jsonb jsonb = JsonbBuilder.create()) {\n\n            List<SysConfig> list = new ArrayList<>();\n            while (rs.next()) {\n                list.add(new SysConfig(rs.getString(\"variable\"), \n                rs.getString(\"value\")));\n            }\n\n            Jsonb jsonb = JsonbBuilder.create();\n            return jsonb.toJson(list);\n        }\n    }\n}\n```", "```java\n@WebServlet(name = \"PoolTestServlet\", urlPatterns = {\"/PoolTestServlet\"})\npublic class PoolTestServlet extends HttpServlet {\n\n    @EJB\n    private SysConfigBean config;\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n\n        try (PrintWriter writer = response.getWriter()) {\n            config = new SysConfigBean();\n            writer.write(config.getSysConfig());\n        } catch (SQLException | NamingException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n        try (Connection conn = ConnectionPool.getConnection();\n                PreparedStatement ps = conn.prepareStatement(sql);\n                ResultSet rs = ps.executeQuery()) {\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", \n    propertyValue = \"jms/JmsQueue\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", \n    propertyValue = \"javax.jms.Queue\")\n})\npublic class QueueListener implements MessageListener {\n\n    @Override\n    public void onMessage(Message message) {\n        TextMessage textMessage = (TextMessage) message;\n        try {\n            System.out.print(\"Got new message on queue: \");\n            System.out.println(textMessage.getText());\n            System.out.println();\n        } catch (JMSException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n}\n```", "```java\n@Stateless\npublic class QueueSender {\n\n    @Resource(mappedName = \"jms/JmsFactory\")\n    private ConnectionFactory jmsFactory;\n\n    @Resource(mappedName = \"jms/JmsQueue\")\n    private Queue jmsQueue;\n\n    public void send() throws JMSException {\n        MessageProducer producer;\n        TextMessage message;\n\n        try (Connection connection = jmsFactory.createConnection(); \n             Session session = connection.createSession(false, \n             Session.AUTO_ACKNOWLEDGE)) {\n\n            producer = session.createProducer(jmsQueue);\n            message = session.createTextMessage();\n\n            String msg = \"Now it is \" + new Date();\n            message.setText(msg);\n            System.out.println(\"Message sent to queue: \" + msg);\n            producer.send(message);\n\n            producer.close();\n        }\n    }\n}\n```", "```java\n@WebServlet(name = \"QueueSenderServlet\", urlPatterns = {\"/QueueSenderServlet\"})\npublic class QueueSenderServlet extends HttpServlet {\n\n    @Inject\n    private QueueSender sender;\n\n    @Override\n    protected void doGet(HttpServletRequest request, \n    HttpServletResponse response)\n            throws ServletException, IOException {\n        try(PrintWriter writer = response.getWriter()){\n            sender.send();\n            writer.write(\"Message sent to queue. \n            Check the log for details.\");\n        } catch (JMSException ex) {\n            System.err.println(ex.getMessage());\n        }\n    }\n}\n```", "```java\n<html>\n    <head>\n        <title>JMS recipe</title>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; \n         charset=UTF-8\">\n    </head>\n    <body>\n        <p>\n            <a href=\"QueueSenderServlet\">Send Message to Queue</a>\n        </p>\n    </body>\n</html>\n```", "```java\nInfo: Message sent to queue: Now it is Tue Dec 19 06:52:17 BRST 2017\nInfo: Got new message on queue: Now it is Tue Dec 19 06:52:17 BRST 2017\n```", "```java\n@MessageDriven(activationConfig = {\n    @ActivationConfigProperty(propertyName = \"destinationLookup\", \n    propertyValue = \"jms/JmsQueue\"),\n    @ActivationConfigProperty(propertyName = \"destinationType\", \n    propertyValue = \"javax.jms.Queue\")\n})\n```", "```java\n        try (Connection connection = jmsFactory.createConnection(); \n             Session session = connection.createSession(false, \n             Session.AUTO_ACKNOWLEDGE)) {\n\n            producer = session.createProducer(jmsQueue);\n            ...\n        }\n```", "```java\n            message = session.createTextMessage();\n\n            String msg = \"Now it is \" + new Date();\n            message.setText(msg);\n            System.out.println(\"Message sent to queue: \" + msg);\n            producer.send(message);\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@WebServlet(name = \"LifecycleServlet\", \nurlPatterns = {\"/LifecycleServlet\"})\npublic class LifecycleServlet extends HttpServlet {\n\n    @Override\n    protected void doGet(HttpServletRequest req, \n    HttpServletResponse resp) throws ServletException, IOException {\n        try(PrintWriter writer = resp.getWriter()){\n            writer.write(\"doGet\");\n            System.out.println(\"doGet\");\n        }\n    }\n\n    @Override\n    protected void doPost(HttpServletRequest req, \n    HttpServletResponse resp) throws ServletException, IOException {\n        try(PrintWriter writer = resp.getWriter()){\n            writer.write(\"doPost\");\n            System.out.println(\"doPost\");\n        }\n    } \n\n    @Override\n    protected void doDelete(HttpServletRequest req, \n    HttpServletResponse resp) throws ServletException, IOException {\n        try(PrintWriter writer = resp.getWriter()){\n            writer.write(\"doDelete\");\n            System.out.println(\"doDelete\");\n        }\n    }\n\n    @Override\n    protected void doPut(HttpServletRequest req, \n    HttpServletResponse resp) throws ServletException, IOException {\n        try(PrintWriter writer = resp.getWriter()){\n            writer.write(\"doPut\");\n            System.out.println(\"doPut\");\n        }\n    } \n\n    @Override\n    public void init() throws ServletException {\n        System.out.println(\"init()\");\n    }\n\n    @Override\n    public void destroy() {\n        System.out.println(\"destroy\");\n    } \n}\n```", "```java\nInfo: init(ServletConfig config)\n Info: doGet\n Info: doPost\n Info: doPut\n Info: doDelete\n```", "```java\nInfo:   destroy\n```", "```java\n        <dependency>\n            <groupId>javax</groupId>\n            <artifactId>javaee-api</artifactId>\n            <version>8.0</version>\n            <scope>provided</scope>\n        </dependency>\n```", "```java\n@Stateful\n@TransactionManagement\npublic class UserBean {\n\n    private ArrayList<Integer> actions;\n\n    @PostConstruct\n    public void init(){\n        actions = new ArrayList<>();\n        System.out.println(\"UserBean initialized\");\n    }\n\n    public void add(Integer action){\n        actions.add(action);\n        System.out.println(action + \" added\");\n    }\n\n    public void remove(Integer action){\n        actions.remove(action);\n        System.out.println(action + \" removed\");\n    }\n\n    public List getActions(){\n        return actions;\n    }\n\n    @PreDestroy\n    public void destroy(){\n        System.out.println(\"UserBean will be destroyed\");\n    }\n\n    @Remove\n    public void logout(){\n        System.out.println(\"User logout. Resources will be \n        released.\");\n    }\n\n    @AfterBegin\n    public void transactionStarted(){\n        System.out.println(\"Transaction started\");\n    }\n\n    @BeforeCompletion\n    public void willBeCommited(){\n        System.out.println(\"Transaction will be commited\");\n    }\n\n    @AfterCompletion\n    public void afterCommit(boolean commited){\n        System.out.println(\"Transaction commited? \" + commited);\n    }   \n}\n```", "```java\npublic class UserTest {\n\n    private EJBContainer ejbContainer;\n\n    @EJB\n    private UserBean userBean;\n\n    public UserTest() {\n    }\n\n    @Before\n    public void setUp() throws NamingException {\n        ejbContainer = EJBContainer.createEJBContainer();\n        ejbContainer.getContext().bind(\"inject\", this); \n    }\n\n    @After\n    public void tearDown() {\n        ejbContainer.close();\n    }\n\n    @Test\n    public void test(){\n        userBean.add(1);\n        userBean.add(2);\n        userBean.add(3);\n        userBean.remove(2);\n        int size = userBean.getActions().size();\n        userBean.logout();\n        Assert.assertEquals(2, size); \n    }   \n}\n```", "```java\n UserBean initialized\n Transaction started\n 1 added\n Transaction will be commited\n Transaction commited? true\n Transaction started\n 2 added\n Transaction will be commited\n Transaction commited? true\n Transaction started\n 3 added\n Transaction will be commited\n Transaction commited? true\n Transaction started\n 2 removed\n Transaction will be commited\n Transaction commited? true\n Transaction started\n Transaction will be commited\n Transaction commited? true\n Transaction started\n User logout. Resources will be released.\n UserBean will be destroyed\n Transaction will be commited\n Transaction commited? true\n```", "```java\n@Stateful\n@TransactionManagement\npublic class UserBean {\n    ...\n}\n```", "```java\n Transaction started\n 1 added\n Transaction will be commited\n Transaction commited? true\n```", "```java\n Transaction started\n User logout. Resources will be released.\n UserBean will be destroyed\n Transaction will be commited\n Transaction commited? true\n```"]