- en: Preface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前言
- en: '*Chapter 1,* *Type inference*, Java has long been criticized for being verbose,
    Java 10 introduces type inference with local variables, by using the keyword var.
    It shouldn’t be confused with dynamic binding. Java still has static binding.
    Type inference evolved from previous Java versions, from generics in Java 5 to
    try-with-resources in Java 7 and inferred lambda parameters types in Java 8\.
    Instead of making you type out variable type information, Java compiler infers
    it and adds it to the bytecode.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*第1章，* *类型推断*，Java长期以来一直因冗长而受到批评，Java 10通过使用关键字var引入了局部变量的类型推断。它不应与动态绑定混淆。Java仍然有静态绑定。类型推断是从之前的Java版本演变而来的，从Java
    5的泛型到Java 7的try-with-resources，再到Java 8中推断的lambda参数类型。Java编译器不是让您输入变量类型信息，而是推断它并将其添加到字节码中。'
- en: '*Chapter 2*, *Application class data sharing*, Application Class Data Sharing
    (ADS) extends Class-Data Sharing (CDS) which allows a JVM to record a set of classes
    and process them into a shared archive file. This archive can be memory mapped
    into the JVM process on the next run to reduce startup time. The file can be shared
    across JVMs and this can reduce overall memory footprint when multiple JVMs are
    running on the same host.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*第2章，* *应用程序类数据共享*，应用程序类数据共享（ADS）扩展了类数据共享（CDS），它允许JVM记录一组类并将它们处理成一个共享的归档文件。这个归档文件可以在下一次运行时映射到JVM进程以减少启动时间。文件可以在JVM之间共享，这可以在同一主机上运行多个JVM时减少整体内存占用。'
- en: '*Chapter 3,* *Garbage Collector optimizations*, the Java garbage collector
    has been both a boon and a pain point. Consistent efforts are being made to optimize
    the garbage collections. With Java 9, G1 became the default garbage collector.
    With Java 10, G1 becomes more efficient by allowing full GC parallel. With garbage
    collector interface, applications could be deployed with alternative garbage collectors.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*第3章，* *垃圾收集器优化*，Java垃圾收集器既是一大福音，也是一大痛点。一直在持续努力优化垃圾收集过程。随着Java 9的发布，G1成为默认的垃圾收集器。在Java
    10中，G1通过允许完全GC并行化而变得更加高效。通过垃圾收集器接口，应用程序可以部署使用替代的垃圾收集器。'
- en: '*Chapter 4,* *API Improvements and other changes*, this is not all, Java 10
    has more to offer - it includes improvements to the existing API, like adding
    API for creating unmodifiable collections, thread local handshakes to stop selected
    threads and consolidating JDK forest into a single repository.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*第4章，* *API改进及其他变更*，这还不是全部，Java 10还有更多要提供——它包括对现有API的改进，如添加创建不可修改集合的API，线程局部握手以停止选定的线程，以及将JDK森林合并到一个单一仓库中。'
- en: '*Chapter 5,* Local variable syntax for lambda parameters, one of the most eagerly
    awaited feature of Java 11, local variable syntax for lambda parameters introduces
    usage of var with lambda parameters. This chapter will cover its syntax and usage
    with the challenges.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*第5章，* lambda参数的局部变量语法，Java 11最受期待的特性之一，lambda参数的局部变量语法引入了与lambda参数一起使用var的用法。本章将涵盖其语法和用法，以及面临的挑战。'
- en: '*Chapter 6,* *Epsilon and its design considerations*, Java 11 introduces Epsilon;
    which reduces the latency in garbage collection. In this chapter, you’ll see why
    it is required and its design considerations.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*第6章，* *Epsilon及其设计考虑因素*，Java 11引入了Epsilon；它减少了垃圾收集的延迟。在本章中，您将了解为什么需要它以及其设计考虑因素。'
- en: '*Chapter 7,* *HTTP Client and other changes*, with Java 11, removal of deprecated
    Java EE and corba packages has started since Java EE has moved to Eclipse foundation,
    renamed as Jakrata EE. Java 11 rewrites the implementation of HTTP client, introduced
    in Java 9, making it completely asynchronous.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '*第7章，* *HTTP客户端及其他变更*，随着Java 11的发布，自从Java EE迁移到Eclipse基金会并更名为Jakarta EE以来，已开始移除弃用的Java
    EE和corba包。Java 11重写了Java 9中引入的HTTP客户端的实现，使其完全异步。'
- en: '*Chapter 8,* *Enhanced Enumism Project Amber*, existing enums provide limited
    functionality. Project Amber will enhance enums by allowing type-variables (generic
    enums), and performing sharper type-checking for enum constants.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*第8章，* *增强的枚举项目Amber*，现有的枚举提供了有限的功能。Amber项目将通过允许类型变量（泛型枚举）和执行对枚举常量的更精确的类型检查来增强枚举。'
- en: '*Chapter 9,* *Data classes and their usage*, data classes are wrappers to store
    object states. Even though an IDE can generate the accessors and mutation methods
    for such class, it still needs to be scanned by the developers to determine if
    it hides any business logic. Data classes make this language ceremony simpler
    by defining data classes, using the keyword data. This chapter cover the need
    of data class, their definition and usage.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*第9章，*数据类及其使用*，数据类是存储对象状态的包装器。尽管IDE可以生成此类访问器和突变方法，但开发者仍需要扫描以确定它是否隐藏任何业务逻辑。通过定义数据类并使用关键字data，数据类使这种语言仪式变得更加简单。本章涵盖了数据类的需求、定义和使用。'
- en: '*Chapter 10,* *Raw String literals*, string concatenation is a used quite often
    by programmers to return string representation of objects, JSON or XML request
    or responses, SQL queries, and many others. Until now Java’s String concatenation
    used clumsy combination of concatenation operators, quotes and special characters
    negations using backslashes, which is inconvenient to write and maintain. This
    chapter eases String concatenation by demonstrating creation and usage of raw
    string literals.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*第10章，*原始字符串字面量*，字符串连接是程序员经常使用的方法，用于返回对象的字符串表示形式、JSON或XML请求或响应、SQL查询等。到目前为止，Java的字符串连接使用了笨拙的连接运算符组合、引号和特殊字符的否定（使用反斜杠），这使得编写和维护变得不方便。本章通过演示原始字符串字面量的创建和使用，简化了字符串连接。'
- en: '*Chapter 11,* *Lambda leftovers*, lambda leftover includes usage of underscore
    (_) to denote an unnamed method, exception or lambda parameter. The chapter covers
    the challenges in implementing it, creation and usage.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*第11章，*Lambda剩余*，lambda剩余包括使用下划线（_）表示未命名的方法、异常或lambda参数。本章涵盖了实现它的挑战、创建和使用。'
- en: '*Chapter 12,* *Pattern matching and switch expressions*, to get started, pattern
    matching will cover type test and constant patterns to enhance the Java language
    constructs. The chapter will take you through the patterns and how it significantly
    affects the way switch expressions are used.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*第12章，*模式匹配和switch表达式*，为了入门，模式匹配将涵盖类型测试和常量模式，以增强Java语言结构。本章将向您介绍模式及其如何显著影响switch表达式的使用方式。'
- en: '*Chapter 13,* *Value based optimizations*, objects, when stored in arrays,
    have an overhead, their immediate values aren’t stored in the array. The array
    of objects store metadata about the array objects and multiple data references.
    This consumes much more memory than is required. Value types, a new language modification,
    enables creation of data types; which use just the memory required to store the
    actual value in an array.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*第13章，*基于值的优化*，当对象存储在数组中时，会有额外的开销，它们的直接值不会存储在数组中。对象数组存储有关数组对象的元数据和多个数据引用。这比所需的内存多得多。值类型，一种新的语言修改，允许创建数据类型；这些数据类型仅使用存储实际值所需的内存。'
- en: '*Chapter 14,* *Generics improvements*, with proposal of addition of value types
    to Java, limiting generic arguments to objects hurts. The chapter covers generics
    improvements to extend generic types to support the specialization of generic
    classes and interfaces over primitive types.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*第14章，*泛型改进*，随着向Java添加值类型的提议，限制泛型参数为对象是有害的。本章涵盖了泛型改进，以扩展泛型类型以支持泛型类和接口在原始类型上的特殊化。'
- en: '*Chapter 15,* *Filters and Continuations*, ever since its first release, Java
    became popular with its support for creation of threads. Fibers and continuations
    will move it way more steps forward; by creating ultra-light threads, called,
    fibers.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '*第15章，*过滤器与延续*，自从首次发布以来，Java因其对线程创建的支持而变得流行。纤程和延续将使它迈出更大的步伐；通过创建超轻量级的线程，称为纤程。'
- en: '*Chapter 16,* *JVM and native code*, Analogous to the Panama channel, which
    connects the Atlantic and Pacific ocean, Project Panama plans to bridge the gap
    between the JVM and the native code. This chapter will take you through the thought
    process of opening of native libraries, say, written in C, to Java developers.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*第16章，*JVM和本地代码*，类似于连接大西洋和太平洋的巴拿马运河，Project Panama计划弥合JVM和本地代码之间的差距。本章将向您介绍如何向Java开发者开放本地库的思考过程，例如用C编写的库。'
