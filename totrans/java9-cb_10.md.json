["```java\n        @Controller\n        public class SimpleViewController{\n          @GetMapping(\"/message\")\n          public String message(){\n            return \"message\";\n          }  \n        }\n```", "```java\n        <h1>Hello, this is a message from the Controller</h1>\n        <h2>The time now is [[${#dates.createNow()}]]</h2>\n```", "```java\n@Controller\npublic class SimpleViewController{\n  @GetMapping(\"/message\")\n  public String message(){\n    return \"message\";\n  }\n}\n```", "```java\n@Controller\n@RequestMapping(\"/message\")\npublic class SimpleViewController{\n  @GetMapping\n  public String message(){\n    return \"message\";\n  }\n}\n```", "```java\ncreate database sample;\n```", "```java\ncreate table person( \n  id int not null auto_increment,    \n  first_name varchar(255),    \n  last_name varchar(255),\n  place varchar(255),    \n  primary key(id)\n);\n```", "```java\ninsert into person(first_name, last_name, place) \nvalues('Raj', 'Singh', 'Bangalore');\n\ninsert into person(first_name, last_name, place) \nvalues('David', 'John', 'Delhi');\n```", "```java\n        @Data\n        public class Person{\n          private Integer id;\n          private String firstName;\n          private String lastName;\n          private String place;\n        }\n```", "```java\n        @Mapper\n        public interface PersonMapper {\n        }\n```", "```java\n        @Select(\"SELECT * FROM person\")\n        public List<Person> getPersons();\n```", "```java\n        @Select(\"SELECT * FROM person WHERE id = #{id}\")\n        public Person getPerson(Integer id);\n```", "```java\n        @Insert(\"INSERT INTO person(first_name, last_name, place) \" +\n                \" VALUES (#{firstName}, #{lastName}, #{place})\")\n        @Options(useGeneratedKeys = true)\n        public void insert(Person person);\n```", "```java\n        @Update(\"UPDATE person SET first_name = #{firstName}, last_name = \n                #{lastName}, \"+ \"place = #{place}  WHERE id = #{id} \")\n        public void save(Person person);\n```", "```java\n        @Delete(\"DELETE FROM person WHERE id = #{id}\")\n        public void delete(Integer id);\n```", "```java\n        @Controller\n        @RequestMapping(\"/persons\")\n        public class PersonContoller {\n          @Autowired PersonMapper personMapper;\n        }\n```", "```java\n        @GetMapping\n        public String list(ModelMap model){\n          List<Person> persons = personMapper.getPersons();\n          model.put(\"persons\", persons);\n          return \"list\";\n        }\n```", "```java\n        @GetMapping(\"/{id}\")\n        public String detail(ModelMap model, @PathVariable Integer id){\n          System.out.println(\"Detail id: \" + id);\n          Person person = personMapper.getPerson(id);\n          model.put(\"person\", person);\n          return \"detail\";\n        }\n```", "```java\n        @PostMapping(\"/form\")\n        public String submitForm(Person person){\n          System.out.println(\"Submiting form person id: \" + \n                             person.getId());\n          if ( person.getId() != null ){\n            personMapper.save(person);\n          }else{\n            personMapper.insert(person);\n          }\n          return \"redirect:/persons/\";\n        }  \n```", "```java\n        @GetMapping(\"/{id}/delete\")\n        public String deletePerson(@PathVariable Integer id){\n          personMapper.delete(id);\n          return \"redirect:/persons\";\n        }\n```", "```java\n        spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n        spring.datasource.url=jdbc:mysql://localhost/sample?useSSL=false\n        spring.datasource.username=root\n        spring.datasource.password=mohamed\n        mybatis.configuration.map-underscore-to-camel-case=true\n```", "```java\n        public class Person {\n          private Integer id;\n          private String firstName;\n          private String lastName;\n          private String place;\n          //required getters and setters\n        }\n```", "```java\n        @Mapper\n        public interface PersonMapper {\n          public List<Person> getPersons();\n          public Person getPerson(Integer id);\n          public void save(Person person);\n          public void insert(Person person);\n          public void delete(Integer id);\n        }\n```", "```java\n        <!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\n          \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n        <mapper namespace=\"com.packt.boot_rest_demo.PersonMapper\">\n          <select id=\"getPersons\"\n           resultType=\"com.packt.boot_rest_demo.Person\">\n            SELECT id, first_name firstname, last_name lastname, place\n            FROM person\n          </select>\n\n          <select id=\"getPerson\"\n           resultType=\"com.packt.boot_rest_demo.Person\"\n           parameterType=\"long\">\n            SELECT id, first_name firstname, last_name lastname, place\n            FROM person\n            WHERE id = #{id}\n          </select>\n\n          <update id=\"save\"\n           parameterType=\"com.packt.boot_rest_demo.Person\">\n            UPDATE person SET\n              first_name = #{firstName},\n              last_name = #{lastName},\n              place = #{place}\n            WHERE id = #{id}\n          </update>\n\n          <insert id=\"insert\" \n           parameterType=\"com.packt.boot_rest_demo.Person\"\n           useGeneratedKeys=\"true\" keyColumn=\"id\" keyProperty=\"id\">\n            INSERT INTO person(first_name, last_name, place)\n            VALUES (#{firstName}, #{lastName}, #{place})\n          </insert>\n\n          <delete id=\"delete\" parameterType=\"long\">\n            DELETE FROM person WHERE id = #{id}\n          </delete>\n        </mapper>\n```", "```java\n        spring.datasource.driver-class-name=com.mysql.jdbc.Driver\n        spring.datasource.url=jdbc:mysql://localhost/sample?useSSL=false\n        spring.datasource.username=root\n        spring.datasource.password=mohamed\n        mybatis.mapper-locations=classpath*:mappers/*.xml\n```", "```java\n        @RestController\n        @RequestMapping(\"/api/persons\")\n        public class PersonApiController {\n          @Autowired PersonMapper personMapper;\n        }\n```", "```java\n        @GetMapping\n        public ResponseEntity<List<Person>> getPersons(){\n          return new ResponseEntity<>(personMapper.getPersons(),\n                                      HttpStatus.OK);\n        }\n```", "```java\n        @GetMapping(\"/{id}\")\n        public ResponseEntity<Person> getPerson(@PathVariable Integer id){\n          return new ResponseEntity<>(personMapper.getPerson(id),\n                                      HttpStatus.OK);\n        }\n```", "```java\n        @PostMapping\n        public ResponseEntity<Person> newPerson\n                       (@RequestBody Person person){\n          personMapper.insert(person);\n          return new ResponseEntity<>(person, HttpStatus.OK);\n        }\n```", "```java\n        @PostMapping(\"/{id}\")\n        public ResponseEntity<Person> updatePerson\n                       (@RequestBody Person person,\n          @PathVariable Integer id){\n            person.setId(id);\n            personMapper.save(person);\n            return new ResponseEntity<>(person, HttpStatus.OK);\n          }\n```", "```java\n        @DeleteMapping(\"/{id}\")\n        public ResponseEntity<Void> deletePerson\n                       (@PathVariable Integer id){\n          personMapper.delete(id);\n          return new ResponseEntity<>(HttpStatus.OK);\n        }\n```", "```java\n $ mysql -uroot -p\n Enter password: \n mysql> create user 'springboot'@'%' identified by 'springboot';\n```", "```java\nmysql -uroot\nEnter password: \n\nmysql> create database sample;\n\nmysql> GRANT ALL ON sample.* TO 'springboot'@'%';\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> flush privileges;\n```", "```java\nmysql -uspringboot -pspringboot\n\nmysql> use sample\nDatabase changed\nmysql> create table person(\n-> id int not null auto_increment,\n-> first_name varchar(255),\n-> last_name varchar(255),\n-> place varchar(255),\n-> primary key(id)\n-> );\nQuery OK, 0 rows affected (0.02 sec)\n\nmysql> INSERT INTO person(first_name, last_name, place) VALUES('Mohamed', 'Sanaulla', 'Bangalore');\nmysql> INSERT INTO person(first_name, last_name, place) VALUES('Nick', 'Samoylov', 'USA');\n\nmysql> SELECT * FROM person;\n+----+------------+-----------+-----------+\n| id | first_name | last_name | place     |\n+----+------------+-----------+-----------+\n| 1  | Mohamed    | Sanaulla  | Bangalore |\n| 2  | Nick       | Samoylov  | USA       |\n+----+------------+-----------+-----------+\n2 rows in set (0.00 sec)\n```", "```java\n        spring.datasource.url=jdbc:mysql://localhost/sample?useSSL=false\n        spring.datasource.username=root\n        spring.datasource.password=mohamed\n```", "```java\n        spring.datasource.url=jdbc:mysql://<digital_ocean_ip>/sample?                                useSSL=false\n        spring.datasource.username=springboot\n        spring.datasource.password=springboot\n```", "```java\n[ \n  {\n    \"id\": 1,\n    \"firstName\": \"David \",\n    \"lastName\": \"John\",\n    \"place\": \"Delhi\"\n  },\n  {\n    \"id\": 2,\n    \"firstName\": \"Raj\",\n    \"lastName\": \"Singh\",\n    \"place\": \"Bangalore\"\n  }\n]\n```", "```java\n[\n  {\n    \"id\": 1,\n    \"firstName\": \"Mohamed\",\n    \"lastName\": \"Sanaulla\",\n    \"place\": \"Bangalore\"\n  },\n  {\n    \"id\": 2,\n    \"firstName\": \"Nick\",\n    \"lastName\": \"Samoylov\",\n    \"place\": \"USA\"\n  }\n]\n```", "```java\nspring.profiles.active=local\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n\nmybatis.mapper-locations=classpath*:mappers/*.xml\nmybatis.configuration.map-underscore-to-camel-case=true  \n```", "```java\n Creating app... done, glacial-beyond-27911\n https://glacial-beyond-27911.herokuapp.com/ |\n https://git.heroku.com/glacial-beyond-27911.git\n```", "```java\n $ heroku create test-app-9812 --region us\n Creating test-app-9812... done, region is us\n https://test-app-9812.herokuapp.com/ |\n      https://git.heroku.com/test-app-9812.git\n```", "```java\n $ heroku create <app_name> -region us\n```", "```java\n $ git init\n```", "```java\n $ heroku git:remote -a <app_name_you_chose>\n```", "```java\n $ git add .\n $ git commit -m \"deploying to heroku\"\n $ git push heroku master\n```", "```java\n ./mvnw -DskipTests clean dependency:list install\n```", "```java\n[\n  {\n    \"id\":1,\n    \"firstName\":\"Mohamed\",\n    \"lastName\":\"Sanaulla\",\n    \"place\":\"Bangalore\"\n  },\n  {\n    \"id\":2,\n    \"firstName\":\"Nick\",\n    \"lastName\":\"Samoylov\",\n    \"place\":\"USA\"\n  }\n]\n```", "```java\n $ heroku addons:create jawsdb:kitefin\n```", "```java\n $ heroku addons:open jawsdb\n```", "```java\n $ heroku config\n === rest-demo-on-cloud Config Vars\n JAWSDB_URL: <URL>\n```", "```java\n        use x81mhi5jwesjewjg;\n        create table person( \n          id int not null auto_increment, \n          first_name varchar(255), \n          last_name varchar(255), \n          place varchar(255), \n          primary key(id)\n        );\n\n        INSERT INTO person(first_name, last_name, place) \n        VALUES('Heroku First', 'Heroku Last', 'USA');\n\n        INSERT INTO person(first_name, last_name, place) \n        VALUES('Jaws First', 'Jaws Last', 'UK');\n```", "```java\n        spring.datasource.url=jdbc:mysql://\n        <URL DB>:3306/x81mhi5jwesjewjg?useSSL=false\n        spring.datasource.username=zzu08pc38j33h89q\n        spring.datasource.password=<DB password>\n\n```", "```java\n $ git commit -am\"using heroky mysql addon\"\n $ git push heroku master\n```", "```java\n        [\n          {\n            \"id\":1,\n            \"firstName\":\"Heroku First\",\n            \"lastName\":\"Heroku Last\",\n            \"place\":\"USA\"\n          },\n          {\n            \"id\":2,\n            \"firstName\":\"Jaws First\",\n            \"lastName\":\"Jaws Last\",\n            \"place\":\"UK\"\n          }\n        ]\n```", "```java\n $ wget https://download.docker.com/linux/ubuntu/dists/xenial\n        /pool/stable/amd64/docker-ce_17.03.2~ce-0~ubuntu-xenial_amd64.deb\n```", "```java\n $  sudo dpkg -i docker-ce_17.03.2~ce-0~ubuntu-xenial_amd64.deb\n```", "```java\n $ service docker status\n docker.service - Docker Application Container Engine\n Loaded: loaded (/lib/systemd/system/docker.service; enabled;\n        vendor preset: enabled)\n Active: active (running) since Fri 2017-07-28 13:46:50 UTC;\n              2min 3s ago\n Docs: https://docs.docker.com\n Main PID: 22427 (dockerd)\n```", "```java\n FROM ubuntu:17.10\n      FROM openjdk:9-b177-jdk\n VOLUME /tmp\n ADD target/boot_docker-1.0.jar restapp.jar\n ENV JAVA_OPTS=\"-Dspring.profiles.active=cloud\"\n      ENTRYPOINT [ \"sh\", \"-c\", \"java $JAVA_OPTS -jar /restapp.jar\" ]\n```", "```java\n $ docker build --tag restapp-image .\n\n Sending build context to Docker daemon 18.45 MB\n Step 1/6 : FROM ubuntu:17.10\n ---> c8cdcb3740f8\n Step 2/6 : FROM openjdk:9-b177-jdk\n ---> 38d822ff5025\n Step 3/6 : VOLUME /tmp\n ---> Using cache\n ---> 38367613d375\n Step 4/6 : ADD target/boot_docker-1.0.jar restapp.jar\n ---> Using cache\n ---> 54ad359f53f7\n Step 5/6 : ENV JAVA_OPTS \"-Dspring.profiles.active=cloud\"\n ---> Using cache\n ---> dfa324259fb1\n Step 6/6 : ENTRYPOINT sh -c java $JAVA_OPTS -jar /restapp.jar\n ---> Using cache\n ---> 6af62bd40afe\n Successfully built 6af62bd40afe\n```", "```java\n $ docker images\n\n      REPOSITORY     TAG        IMAGE ID     CREATED     SIZE\n restapp-image  latest     6af62bd40afe 4 hours ago 606 MB\n openjdk        9-b177-jdk 38d822ff5025 6 days ago  588 MB\n ubuntu         17.10      c8cdcb3740f8 8 days ago  93.9 MB\n```", "```java\n docker run -p 8090:8080 -d --name restapp restapp-image\n d521b9927cec105d8b69995ef6d917121931c1d1f0b1f4398594bd1f1fcbee55\n```", "```java\n docker logs restapp\n```", "```java\n docker ps\n```", "```java\n $ docker stop restapp\n $ docker start restapp\n```", "```java\nFROM ubuntu:17.10\nFROM openjdk:9-b177-jdk\nVOLUME /tmp\nADD target/boot_docker-1.0.jar restapp.jar\nENV JAVA_OPTS=\"-Dspring.profiles.active=cloud\"\nENTRYPOINT [ \"sh\", \"-c\", \"java $JAVA_OPTS -jar /restapp.jar\" ]\n```"]