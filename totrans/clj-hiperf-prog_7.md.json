["```java\n:global-vars {*unchecked-math* :warn-on-boxed ; in Clojure 1.7+\n              *warn-on-reflection* true}\n```", "```java\n:profiles {:perf {:test-paths ^:replace [\"perf-test\"]\n                  :jvm-opts ^:replace [\"-server\"\n                                       \"-Xms2048m\" \"-Xmx2048m\"]}}\n```", "```java\nlein with-profile perf test\n```", "```java\n(require '[plumbing.core :refer [fnk]])\n(require '[plumbing.graph :as g])\n\n(def layers\n  {:db      (fnk [config]    (let [pool (db-pool config)]\n                               (reify IDatabase ...)))\n   :cache   (fnk [config db] (let [cache-obj (mk-cache config)]\n                               (reify ICache    ...)))\n   :service (fnk [config db cache] (reify IService  ...))\n   :web     (fnk [config service]  (reify IWeb      ...))})\n\n(defn resolve-layers\n  \"Return a map of reified layers\"\n  [app-config]\n  (let [compiled (g/compile layers)]\n    (compiled {:config app-config})))\n```", "```java\n(require '[espejito.core :as e])\n\n;; in the top level handler (entry point to the use case)\n(e/report e/print-table\n  ...)\n\n;; in web.clj\n(e/measure \"web/add-cart-item\"\n  (biz/add-item-to-cart (resolve-cart request) item-code qty)\n  ...)\n\n;; in service.clj (biz)\n(defn add-item-to-cart\n  [cart item qty]\n  (e/measure \"biz/add-cart-item\"\n    (db/save-cart-item (:id cart) (:id item) qty)\n    ...))\n\n;; in db.clj (db)\n(defn save-cart-item\n  [cart-id item-id qty]\n  (e/measure \"db/save-cart-item\"\n    ...))\n```", "```java\n|                 :name|:cumulat|:cumul%|:indiv |:indiv%|:thrown?|\n|----------------------+--------+-------+-------+-------+--------|\n|    web/add-cart-item |11.175ms|100.00%|2.476ms|22.16% |        |\n| biz/add-item-to-cart | 8.699ms| 77.84%|1.705ms|15.26% |        |\n|    db/save-cart-item | 6.994ms| 62.59%|6.994ms|62.59% |        |\n```", "```java\n(defmacro report-when\n  [test & body]\n  `(if ~test\n    (e/report e/print-table\n      ~@body)\n    ~@body))\n```", "```java\n(report-when (= \"true\" (get-in request [:params \"report\"]))\n  ...)\n```", "```java\n:jvm-options ^:replace [..other options..\n \"-verbose:gc\" \"-XX:+PrintGCDetails\"\n \"-XX:+PrintGC\" \"-XX:+PrintGCTimeStamps\"\n                        ..other options..]\n```", "```java\n:jvm-options ^:replace [..other options..\n                        \"-verbose:gc\" \"-XX:+PrintGCDetails\"\n                        \"-XX:+PrintGC\" \"-XX:+PrintGCTimeStamps\"\n \"-Xloggc:./memory.log\"\n                        ..other options..]\n```", "```java\n:jvm-options ^:replace [..other options..\n                        \"-verbose:gc\" \"-XX:+PrintGCDetails\"\n                        \"-XX:+PrintGC\" \"-XX:+PrintGCTimeStamps\"\n \"-XX:+PrintGCApplicationStoppedTime\"\n \"-XX:+PrintGCApplicationConcurrentTime\"\n                        ..other options..]\n```", "```java\n:jvm-options ^:replace [..other options..\n                        \"-verbose:gc\" \"-XX:+PrintGCDetails\"\n                        \"-XX:+PrintGC\" \"-XX:+PrintGCTimeStamps\"\n \"-XX:+PrintSafepointStatistics\"\n                        ..other options..]\n```", "```java\njstat -gc -t <process-id> 10000\njstat -gccause -t <process-id> 10000\n```", "```java\n:plugins [[lein-nodisassemble \"0.1.3\"]]\n```", "```java\n(require '[no.disassemble :as n])\n(println (n/disassemble (map inc (range 10))))\n```", "```java\njvisualvm\n```", "```java\n(.setName ^Thread (Thread/currentThread) \"service-thread-12\")\n```", "```java\n(defmacro with-thread-name\n  \"Set current thread name; execute body of code in that context.\"\n  [new-name & body]\n  `(let [^Thread thread# (Thread/currentThread)\n         ^String t-name# thread#]\n     (.setName thread# ~new-name)\n     (try\n       ~@body\n       (finally\n         (.setName thread# t-name#)))\n```", "```java\n(with-thread-name (str \"process-order-\" order-id)\n  ;; business code\n  )\n```"]