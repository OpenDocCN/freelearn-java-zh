["```java\n    public class MainActivity extends AppCompatActivity { \n      @Override \n      protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_main); \n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n        setSupportActionBar(toolbar); \n\n        FloatingActionButton fab =\n            (FloatingActionButton) findViewById(R.id.fab); \n        fab.setOnClickListener(new View.OnClickListener() { \n            @Override \n            public void onClick(View view) { \n                Snackbar.make(view,\n                        \"Replace with your own action\",\n                        Snackbar.LENGTH_LONG) \n                    .setAction(\"Action\", null).show(); \n            } \n        }); \n      } \n\n     @Override \n     public boolean onCreateOptionsMenu(Menu menu) { \n        getMenuInflater().inflate(R.menu.menu_main, menu); \n        return true; \n     } \n\n     @Override \n     public boolean onOptionsItemSelected(MenuItem item) { \n        int id = item.getItemId(); \n\n        if (id == R.id.action_settings) { \n            return true; \n        } \n\n        return super.onOptionsItemSelected(item); \n      } \n    } \n```", "```java\n    fab.setOnClickListener(view -> Snackbar.make(view,\n        \"Replace with your own action\",\n            Snackbar.LENGTH_LONG) \n        .setAction(\"Action\", null).show()); \n```", "```java\n    <?xml version=\"1.0\" encoding=\"utf-8\"?> \n     <android.support.design.widget.CoordinatorLayout  \n\n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n      android:fitsSystemWindows=\"true\" \n      tools:context=\"com.steeplesoft.sunago.MainActivity\"> \n\n      <android.support.design.widget.AppBarLayout \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:theme=\"@style/AppTheme.AppBarOverlay\"> \n\n       <android.support.v7.widget.Toolbar \n            android:id=\"@+id/toolbar\" \n            android:layout_width=\"match_parent\" \n            android:layout_height=\"?attr/actionBarSize\" \n            android:background=\"?attr/colorPrimary\" \n            app:popupTheme=\"@style/AppTheme.PopupOverlay\" /> \n\n      </android.support.design.widget.AppBarLayout> \n\n      <include layout=\"@layout/content_main\" /> \n\n     <android.support.design.widget.FloatingActionButton \n        android:id=\"@+id/fab\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_gravity=\"bottom|end\" \n        android:layout_margin=\"@dimen/fab_margin\" \n        app:srcCompat=\"@android:drawable/ic_dialog_email\" /> \n\n     </android.support.design.widget.CoordinatorLayout> \n```", "```java\n        <RelativeLayout\n\n          android:id=\"@+id/content_main\" \n          android:layout_width=\"match_parent\" \n          android:layout_height=\"match_parent\" \n          android:paddingBottom=\"@dimen/activity_vertical_margin\" \n          android:paddingLeft=\"@dimen/activity_horizontal_margin\" \n          android:paddingRight=\"@dimen/activity_horizontal_margin\" \n          android:paddingTop=\"@dimen/activity_vertical_margin\" \n          app:layout_behavior=\"@string/appbar_scrolling_view_behavior\" \n          tools:context=\"com.steeplesoft.sunago.MainActivity\" \n          tools:showIn=\"@layout/activity_main\"> \n\n         <TextView \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:text=\"Hello World!\" /> \n        </RelativeLayout> \n```", "```java\n    <ListView \n      android:id=\"@+id/listView\" \n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n      android:layout_alignParentTop=\"true\" \n      android:layout_alignParentStart=\"true\"/> \n```", "```java\n    protected void onCreate(Bundle savedInstanceState) { \n       super.onCreate(savedInstanceState); \n       setContentView(R.layout.activity_main); \n\n      if (!isNetworkAvailable()) { \n         showErrorDialog( \n            \"A valid internet connection can't be established\"); \n      } else { \n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n        setSupportActionBar(toolbar); \n        findPlugins(); \n\n        adapter = new SunagoCursorAdapter(this, null, 0); \n        final ListView listView = (ListView)\n            findViewById(R.id.listView); \n        listView.setAdapter(adapter); \n        listView.setOnItemClickListener( \n                new AdapterView.OnItemClickListener() { \n            @Override \n            public void onItemClick(AdapterView<?> adapterView,\n                    View view, int position, long id) { \n                Cursor c = (Cursor)\n                    adapterView.getItemAtPosition(position); \n                String url = c.getString(c.getColumnIndex( \n                    SunagoContentProvider.URL)); \n                Intent intent = new Intent(Intent.ACTION_VIEW,\n                    Uri.parse(url)); \n                startActivity(intent); \n            } \n         }); \n\n         getLoaderManager().initLoader(0, null, this); \n       } \n    } \n```", "```java\n        public boolean isNetworkAvailable() { \n          boolean connected = false; \n          ConnectivityManager cm = (ConnectivityManager)  \n            getSystemService(Context.CONNECTIVITY_SERVICE); \n          for (Network network : cm.getAllNetworks()) { \n            NetworkInfo networkInfo = cm.getNetworkInfo(network); \n            if (networkInfo.isConnected() == true) { \n                connected = true; \n                break; \n            } \n          } \n         return connected; \n        } \n\n        private void showErrorDialog(String message) { \n          AlertDialog alertDialog = new AlertDialog.Builder(this) \n            .create(); \n          alertDialog.setTitle(\"Error!\"); \n          alertDialog.setMessage(message); \n          alertDialog.setIcon(android.R.drawable.alert_dark_frame); \n          alertDialog.setButton(DialogInterface.BUTTON_POSITIVE,\n          \"OK\", new DialogInterface.OnClickListener() { \n            @Override \n            public void onClick(DialogInterface dialog, int which) { \n              MainActivity.this.finish(); \n            } \n          }); \n\n          alertDialog.show(); \n       } \n```", "```java\n    public class SunagoContentProvider extends ContentProvider { \n```", "```java\n    <provider android:name=\".data.SunagoContentProvider \n      android:authorities=\"com.steeplesoft.sunago.SunagoProvider\" /> \n```", "```java\n    private static final String PROVIDER_NAME =  \n     \"com.steeplesoft.sunago.SunagoProvider\"; \n    private static final String CONTENT_URL =  \n     \"content://\" + PROVIDER_NAME + \"/items\"; \n    public static final Uri CONTENT_URI = Uri.parse(CONTENT_URL); \n```", "```java\n    private static final UriMatcher URI_MATCHER =  \n      new UriMatcher(UriMatcher.NO_MATCH); \n    private static final int ITEM = 1; \n    private static final int ITEM_ID = 2; \n    static { \n      URI_MATCHER.addURI(PROVIDER_NAME, \"items\", ITEM); \n      URI_MATCHER.addURI(PROVIDER_NAME, \"items/#\", ITEM_ID); \n     } \n```", "```java\n    public boolean onCreate() { \n      openHelper = new SunagoOpenHelper(getContext(), DBNAME,  \n        null, 1); \n      return true; \n    } \n```", "```java\n    public class SunagoOpenHelper extends SQLiteOpenHelper { \n      public SunagoOpenHelper(Context context, String name,  \n            SQLiteDatabase.CursorFactory factory, int version) { \n          super(context, name, factory, version); \n      } \n\n      @Override \n      public void onCreate(SQLiteDatabase db) { \n        db.execSQL(SQL_CREATE_MAIN); \n      } \n\n      @Override \n      public void onUpgrade(SQLiteDatabase db, int oldVersion,  \n        int newVersion) { \n      } \n    } \n```", "```java\n    public Cursor query(Uri uri, String[] projection,  \n      String selection, String[] selectionArgs,  \n      String sortOrder) { \n        switch (URI_MATCHER.match(uri)) { \n          case 2: \n            selection = selection + \"_ID = \" +  \n              uri.getLastPathSegment(); \n              break; \n        } \n        SQLiteDatabase db = openHelper.getReadableDatabase(); \n        Cursor cursor = db.query(\"items\", projection, selection,  \n          selectionArgs, null, null, sortOrder); \n        cursor.setNotificationUri( \n          getContext().getContentResolver(), uri); \n        return cursor; \n    } \n```", "```java\n    cursor.setNotificationUri(getContext().getContentResolver(), uri); \n```", "```java\n    public Uri insert(Uri uri, ContentValues values) { \n      SQLiteDatabase db = openHelper.getWritableDatabase(); \n      long rowID = db.insert(\"items\", \"\", values); \n\n      if (rowID > 0) { \n        Uri newUri = ContentUris.withAppendedId(CONTENT_URI,  \n            rowID); \n        getContext().getContentResolver().notifyChange(newUri,  \n            null); \n        return newUri; \n      } \n\n    throw new SQLException(\"Failed to add a record into \" + uri); \n    } \n```", "```java\n    getLoaderManager().initLoader(0, null, this); \n```", "```java\n    public Loader<Cursor> onCreateLoader(int i, Bundle bundle) { \n      CursorLoader cl = new CursorLoader(this,  \n        SunagoContentProvider.CONTENT_URI,  \n        ITEM_PROJECTION, null, null, \n           SunagoContentProvider.TIMESTAMP + \" DESC\"); \n      return cl; \n    } \n\n    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) { \n      adapter.swapCursor(cursor); \n    } \n\n    public void onLoaderReset(Loader<Cursor> loader) { \n      adapter.swapCursor(null); \n    } \n```", "```java\n    public class SunagoCursorAdapter extends CursorAdapter { \n      public SunagoCursorAdapter(Context context, Cursor c,  \n      int flags) { \n        super(context, c, flags); \n    } \n```", "```java\n    public View newView(Context context, Cursor cursor,  \n        ViewGroup viewGroup) { \n          View view = LayoutInflater.from(context).inflate( \n          R.layout.social_media_item, viewGroup, false); \n          ViewHolder viewHolder = new ViewHolder(); \n          viewHolder.text = (TextView)\n          view.findViewById(R.id.textView); \n          viewHolder.image = (ImageView) view.findViewById( \n          R.id.imageView); \n\n          WindowManager wm = (WindowManager) Sunago.getAppContext() \n            .getSystemService(Context.WINDOW_SERVICE); \n          Point size = new Point(); \n          wm.getDefaultDisplay().getSize(size); \n          viewHolder.image.getLayoutParams().width =  \n            (int) Math.round(size.x * 0.33); \n\n          view.setTag(viewHolder); \n          return view; \n     } \n```", "```java\n    private static class ViewHolder { \n      public TextView text; \n      public ImageView image; \n   } \n```", "```java\n    <LinearLayout  \n\n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n      android:orientation=\"horizontal\"> \n\n      <ImageView \n        android:id=\"@+id/imageView\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:layout_marginEnd=\"5dip\" \n        android:layout_gravity=\"top\" \n        android:adjustViewBounds=\"true\"/> \n\n      <TextView \n        android:layout_width=\"match_parent\" \n        android:layout_height=\"wrap_content\" \n        android:id=\"@+id/textView\" \n        android:scrollHorizontally=\"false\" \n        android:textSize=\"18sp\" /> \n     </LinearLayout> \n```", "```java\n    public void bindView(View view, Context context, Cursor cursor) { \n      final ViewHolder viewHolder = (ViewHolder) view.getTag(); \n      String image = cursor.getString(INDEX_IMAGE); \n      if (image != null) { \n        new DownloadImageTask(viewHolder.image).execute(image); \n      } else { \n        viewHolder.image.setImageBitmap(null); \n        viewHolder.image.setVisibility(View.GONE); \n      } \n      viewHolder.body.setText(cursor.getString(INDEX_BODY)); \n    } \n```", "```java\n    private static class DownloadImageTask extends  \n       AsyncTask<String, Void, Bitmap> { \n        private ImageView imageView; \n\n        public DownloadImageTask(ImageView imageView) { \n         this.imageView = imageView; \n        } \n```", "```java\n    protected Bitmap doInBackground(String... urls) { \n      Bitmap image = null; \n      try (InputStream in = new URL(urls[0]).openStream()) { \n        image = BitmapFactory.decodeStream(in); \n      } catch (java.io.IOException e) { \n         Log.e(\"Error\", e.getMessage()); \n         } \n        return image; \n    } \n```", "```java\n    protected void onPostExecute(Bitmap result) { \n      imageView.setImageBitmap(result); \n      imageView.setVisibility(View.VISIBLE); \n      imageView.getParent().requestLayout(); \n    } \n```", "```java\n    public class TwitterService extends IntentService { \n      public TwitterService() { \n        super(\"TwitterService\"); \n      } \n\n     @Override \n      protected void onHandleIntent(Intent intent) { \n    } \n```", "```java\n    <service android:name=\".twitter.TwitterService\"  \n     android:exported=\"false\"> \n      <intent-filter> \n        <action  \n          android:name=\"com.steeplesoft.sunago.intent.plugin\" /> \n        <category  \n          android:name=\"android.intent.category.DEFAULT\" /> \n       </intent-filter> \n    </service> \n```", "```java\n    public IBinder onBind(Intent intent) { \n      receiver = new TwitterServiceReceiver(); \n      registerReceiver(receiver,  \n        new IntentFilter(\"sunago.service\")); \n      return null; \n     } \n\n    public boolean onUnbind(Intent intent) { \n      unregisterReceiver(receiver); \n      return super.onUnbind(intent); \n    } \n```", "```java\n    private class TwitterServiceReceiver extends BroadcastReceiver { \n      @Override \n      public void onReceive(Context context, Intent intent) { \n        if (\"REFRESH\".equals(intent.getStringExtra(\"message\"))) { \n            if (SunagoUtil.getPreferences().getBoolean( \n                getString(R.string.twitter_authd), false)) { \n                new TwitterUpdatesAsyncTask().execute(); \n            } \n          } \n       } \n     } \n```", "```java\n    private class TwitterUpdatesAsyncTask extends  \n    AsyncTask<Void, Void, List<ContentValues>> { \n      @Override \n      protected List<ContentValues> doInBackground(Void... voids) { \n        List<ContentValues> values = new ArrayList<>(); \n        for (SocialMediaItem item :  \n                TwitterClient.instance().getItems()) { \n            ContentValues cv = new ContentValues(); \n            cv.put(SunagoContentProvider.BODY, item.getBody()); \n            cv.put(SunagoContentProvider.URL, item.getUrl()); \n            cv.put(SunagoContentProvider.IMAGE, item.getImage()); \n            cv.put(SunagoContentProvider.PROVIDER,  \n                item.getProvider()); \n            cv.put(SunagoContentProvider.TITLE, item.getTitle()); \n            cv.put(SunagoContentProvider.TIMESTAMP,  \n                item.getTimestamp().getTime()); \n            values.add(cv); \n        } \n        return values; \n      } \n\n    @Override \n    protected void onPostExecute(List<ContentValues> values) { \n      Log.i(MainActivity.LOG_TAG, \"Inserting \" + values.size() +  \n        \" tweets.\"); \n      getContentResolver() \n        .bulkInsert(SunagoContentProvider.CONTENT_URI, \n           values.toArray(new ContentValues[0])); \n      } \n    }  \n```", "```java\n    private void findPlugins() { \n     Intent baseIntent = new Intent(PLUGIN_ACTION); \n     baseIntent.setFlags(Intent.FLAG_DEBUG_LOG_RESOLUTION); \n     List<ResolveInfo> list = getPackageManager() \n            .queryIntentServices(baseIntent, \n            PackageManager.GET_RESOLVED_FILTER); \n     for (ResolveInfo rinfo : list) { \n        ServiceInfo sinfo = rinfo.serviceInfo; \n        if (sinfo != null) { \n            plugins.add(new  \n                ComponentName(sinfo.packageName, sinfo.name)); \n        } \n      } \n    } \n```", "```java\n    private void bindPluginServices() { \n      for (ComponentName plugin : plugins) { \n        Intent intent = new Intent(); \n        intent.setComponent(plugin); \n        PluginServiceConnection conn =  \n            new PluginServiceConnection(); \n        pluginServiceConnections.add(conn); \n        bindService(intent, conn, Context.BIND_AUTO_CREATE); \n      } \n    } \n```", "```java\n    private void releasePluginServices() { \n      for (PluginServiceConnection conn :  \n            pluginServiceConnections) { \n        unbindService(conn); \n      } \n      pluginServiceConnections.clear(); \n    } \n```", "```java\n    <menu  \n\n      > \n      <item android:id=\"@+id/action_settings\"  \n        android:orderInCategory=\"100\"  \n        android: \n        app:showAsAction=\"never\" /> \n     <item android:id=\"@+id/action_refresh\"  \n        android:orderInCategory=\"100\"  \n        android: \n        app:showAsAction=\"never\" /> \n    </menu> \n```", "```java\n    @Override \n    public boolean onOptionsItemSelected(MenuItem item) { \n      switch (item.getItemId()) { \n        case R.id.action_settings: \n            showPreferencesActivity(); \n            return true; \n        case R.id.action_refresh: \n            sendRefreshMessage(); \n            break; \n       } \n\n     return super.onOptionsItemSelected(item); \n    } \n```", "```java\n    private void sendRefreshMessage() { \n      sendMessage(\"REFRESH\"); \n    } \n\n    private void sendMessage(String message) { \n      Intent intent = new Intent(\"sunago.service\"); \n      intent.putExtra(\"message\", message); \n      sendBroadcast(intent); \n    } \n```", "```java\n    public class PreferencesActivity extends AppCompatActivity { \n      private SectionsPagerAdapter sectionsPagerAdapter; \n      private ViewPager viewPager; \n\n      @Override \n      protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_preferences); \n\n        setSupportActionBar((Toolbar) findViewById(R.id.toolbar)); \n        sectionsPagerAdapter =  \n        new SectionsPagerAdapter(getSupportFragmentManager()); \n\n        viewPager = (ViewPager) findViewById(R.id.container); \n        viewPager.setAdapter(sectionsPagerAdapter); \n\n        TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs); \n        tabLayout.setupWithViewPager(viewPager); \n    } \n```", "```java\n    public class SectionsPagerAdapter extends FragmentPagerAdapter { \n      public SectionsPagerAdapter(FragmentManager fm) { \n      super(fm); \n    } \n\n    @Override \n    public Fragment getItem(int position) { \n        switch (position) { \n            case 0 : \n                return new TwitterPreferencesFragment(); \n            case 1 : \n                return new InstagramPreferencesFragment(); \n            default: \n                throw new RuntimeException(\"Invalid position\"); \n        } \n     } \n\n     @Override \n     public int getCount() { \n        return 2; \n     } \n\n     @Override \n     public CharSequence getPageTitle(int position) { \n        switch (position) { \n            case 0: \n                return \"Twitter\"; \n            case 1: \n                return \"Instagram\"; \n       } \n        return null; \n     } \n    } \n```", "```java\n    public class TwitterPreferencesFragment extends Fragment { \n      @Override \n       public View onCreateView(LayoutInflater inflater,  \n       ViewGroup container, Bundle savedInstanceState) { \n       return inflater.inflate( \n        R.layout.fragment_twitter_preferences,  \n        container, false); \n     } \n\n      @Override \n      public void onStart() { \n        super.onStart(); \n        updateUI(); \n      } \n```", "```java\n    <LinearLayout  \n\n      android:layout_width=\"match_parent\" \n      android:layout_height=\"match_parent\" \n      android:paddingBottom=\"@dimen/activity_vertical_margin\" \n      android:paddingLeft=\"@dimen/activity_horizontal_margin\" \n      android:paddingRight=\"@dimen/activity_horizontal_margin\" \n      android:paddingTop=\"@dimen/activity_vertical_margin\" \n      android:orientation=\"vertical\"> \n\n     <Button \n       android:text=\"Login\" \n       android:layout_width=\"wrap_content\" \n       android:layout_height=\"wrap_content\" \n       android:id=\"@+id/connectButton\" /> \n\n     <LinearLayout \n       android:orientation=\"vertical\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       android:id=\"@+id/twitterPrefsLayout\"> \n\n     <CheckBox \n       android:text=\"Include the home timeline\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:id=\"@+id/showHomeTimeline\" /> \n\n     <TextView \n       android:text=\"User lists to include\" \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"wrap_content\" \n       android:id=\"@+id/textView2\" /> \n\n     <ListView \n       android:layout_width=\"match_parent\" \n       android:layout_height=\"match_parent\" \n       android:id=\"@+id/userListsListView\" /> \n     </LinearLayout> \n    </LinearLayout> \n```", "```java\n    private void updateUI() { \n      getActivity().runOnUiThread(new Runnable() { \n        @Override \n        public void run() { \n          final Button button = (Button)  \n          getView().findViewById(R.id.connectButton); \n          final View prefsLayout =  \n          getView().findViewById(R.id.twitterPrefsLayout); \n          if (!SunagoUtil.getPreferences().getBoolean( \n          getString(R.string.twitter_authd), false)) { \n            prefsLayout.setVisibility(View.GONE); \n            button.setOnClickListener( \n              new View.OnClickListener() { \n            @Override \n            public void onClick(View view) { \n             new TwitterAuthenticateTask().execute(); \n            } \n            }); \n            } else { \n              button.setText(getString(R.string.logout)); \n              button.setOnClickListener( \n              new View.OnClickListener() { \n                @Override \n                public void onClick(View view) { \n                 final SharedPreferences.Editor editor =  \n                 SunagoUtil.getPreferences().edit(); \n                 editor.remove(getString( \n                 R.string.twitter_oauth_token)); \n                 editor.remove(getString( \n                 R.string.twitter_oauth_secret)); \n                 editor.putBoolean(getString( \n                 R.string.twitter_authd), false); \n                 editor.commit(); \n                 button.setText(getString(R.string.login)); \n                 button.setOnClickListener( \n                 new LoginClickListener()); \n               } \n              }); \n\n               prefsLayout.setVisibility(View.VISIBLE); \n               populateUserList(); \n              } \n            } \n        });  \n      }\n```", "```java\n    private class TwitterAuthenticateTask extends  \n        AsyncTask<String, String, RequestToken> { \n      @Override \n      protected void onPostExecute(RequestToken requestToken) { \n        super.onPostExecute(requestToken); \n\n        Intent intent = new Intent(getContext(),  \n          WebLoginActivity.class); \n        intent.putExtra(\"url\",  \n          requestToken.getAuthenticationURL()); \n        intent.putExtra(\"queryParam\", \"oauth_verifier\"); \n        startActivityForResult(intent, LOGIN_REQUEST); \n      } \n\n      @Override \n      protected RequestToken doInBackground(String... strings) { \n        try { \n          return TwitterClient.instance().getRequestToken(); \n        } catch (TwitterException e) { \n          throw new RuntimeException(e); \n        } \n      } \n    } \n```", "```java\n    public void onActivityResult(int requestCode, int resultCode,  \n    Intent data) { \n      super.onActivityResult(requestCode, resultCode, data); \n      if (requestCode == LOGIN_REQUEST) { \n        if (resultCode == Activity.RESULT_OK) { \n            new TwitterLoginAsyncTask() \n                .execute(data.getStringExtra(\"oauth_verifier\")); \n        } \n      } \n    } \n```", "```java\n    private class TwitterLoginAsyncTask  \n    extends AsyncTask<String, String, AccessToken> { \n      @Override \n      protected AccessToken doInBackground(String... codes) { \n        AccessToken accessToken = null; \n        if (codes != null && codes.length > 0) { \n            String code = codes[0]; \n            TwitterClient twitterClient =  \n              TwitterClient.instance(); \n            try { \n              accessToken = twitterClient.getAcccessToken( \n                twitterClient.getRequestToken(), code); \n            } catch (TwitterException e) { \n              e.printStackTrace(); \n            } \n            twitterClient.authenticateUser(accessToken.getToken(),  \n              accessToken.getTokenSecret()); \n           } \n\n        return accessToken; \n       } \n\n      @Override \n      protected void onPostExecute(AccessToken accessToken) { \n        if (accessToken != null) { \n          SharedPreferences.Editor preferences =  \n            SunagoUtil.getPreferences().edit(); \n          preferences.putString(getString( \n              R.string.twitter_oauth_token),  \n            accessToken.getToken()); \n          preferences.putString(getString( \n              R.string.twitter_oauth_secret),  \n            accessToken.getTokenSecret()); \n          preferences.putBoolean(getString( \n             R.string.twitter_authd), true); \n            preferences.commit(); \n          updateUI(); \n        } \n      } \n    } \n```", "```java\n    public class WebLoginActivity extends AppCompatActivity { \n      @Override \n      protected void onCreate(Bundle savedInstanceState) { \n        super.onCreate(savedInstanceState); \n        setContentView(R.layout.activity_web_view); \n        setTitle(\"Login\"); \n        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar); \n        setSupportActionBar(toolbar); \n        Intent intent = getIntent(); \n        final String url = intent.getStringExtra(\"url\"); \n        final String queryParam =  \n            intent.getStringExtra(\"queryParam\"); \n        WebView webView = (WebView)findViewById(R.id.webView); \n        final WebViewClient client =  \n            new LoginWebViewClient(queryParam); \n        webView.setWebViewClient(client); \n        webView.loadUrl(url); \n      } \n```", "```java\n    private class LoginWebViewClient extends WebViewClient { \n      private String queryParam; \n\n      public LoginWebViewClient(String queryParam) { \n        this.queryParam = queryParam; \n      } \n\n     @Override \n     public void onPageStarted(WebView view, String url,  \n            Bitmap favicon) { \n        final Uri uri = Uri.parse(url); \n        final String value = uri.getQueryParameter(queryParam); \n        if (value != null) { \n            Intent resultIntent = new Intent(); \n            for (String name : uri.getQueryParameterNames()) { \n                resultIntent.putExtra(name,  \n                    uri.getQueryParameter(name)); \n            } \n            setResult(Activity.RESULT_OK, resultIntent); \n            finish(); \n        } \n        super.onPageStarted(view, url, favicon); \n       } \n   } \n```"]