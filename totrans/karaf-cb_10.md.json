["```java\n…\n<properties>\n  <version.pax-exam>3.4.0</version.pax-exam>\n  <junit.version>4.11</junit.version>\n</properties>\n…\n<dependency>\n  <groupId>org.ops4j.pax.exam</groupId>\n  <artifactId>pax-exam-junit4</artifactId>\n  <version>${version.pax-exam}</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.ops4j.pax.exam</groupId>\n  <artifactId>pax-exam-invoker-junit</artifactId>\n  <version>${version.pax-exam}</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.ops4j.pax.exam</groupId>\n  <artifactId>pax-exam-container-native</artifactId>\n  <version>${version.pax-exam}</version>\n  <scope>test</scope>\n</dependency>\n…\n```", "```java\n@ExamReactorStrategy(PerClass.class)\n@RunWith(PaxExam.class)\npublic class TestOsgiServices {\n\n  @Inject\n  protected BundleContext bundleContext;\n\n  @Configuration\n  public static Option[] configuration() throws Exception {\n    return options(\n      workingDirectory(\"target/paxexam/\"),\n      cleanCaches(true),\n      junitBundles(),\n      frameworkProperty(\"osgi.console\").value(\"6666\"),\n      frameworkProperty(\"osgi.console.enable.builtin\").value(\"true\"),\n      frameworkProperty(\"felix.bootdelegation.implicit\").value(\"false\"),\n      systemProperty(\"org.ops4j.pax.logging.DefaultServiceLog.level\").value(\"DEBUG\"));\n  }\n\n  @Test\n  public void test() {\n    assertNotNull(bundleContext);\n  }\n}\n```", "```java\nmavenBundle(\"org.testng\", \"testng\", \"6.3.1\")\n```", "```java\nstreamBundle(bundle().add(Calculator.class)\n  .add(CalculatorImpl.class)\n  .add(CalcActivator.class)\n  .set(Constants.BUNDLE_SYMBOLICNAME,\"com.packt.IntegrationTest\")\n  .set(Constants.DYNAMICIMPORT_PACKAGE, \"*\")\n  .set(Constants.BUNDLE_ACTIVATOR, CalcActivator.class.getName())\n  .set(Constants.EXPORT_PACKAGE, \"com.packt\")\n  .build()).start());\n```", "```java\n…\n<dependency>\n  <groupId>org.ops4j.pax.exam</groupId>\n <artifactId>pax-exam-container-karaf</artifactId>\n  <version>${version.pax-exam}</version>\n  <scope>test</scope>\n</dependency>\n…\n<!-- framework to test with -->\n<dependency>\n <groupId>org.apache.karaf.features</groupId>\n <artifactId>standard</artifactId>\n <version>${karaf.version}</version>\n <type>xml</type>\n <classifier>features</classifier>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.karaf.features</groupId>\n  <artifactId>org.apache.karaf.features.core</artifactId>\n  <version>${karaf.version}</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.karaf.system</groupId>\n  <artifactId>org.apache.karaf.system.core</artifactId>\n  <version>${karaf.version}</version>\n  <scope>test</scope>\n</dependency>\n\n<dependency>\n  <groupId>org.apache.karaf</groupId>\n <artifactId>apache-karaf</artifactId>\n  <version>${karaf.version}</version>\n  <type>zip</type>\n  <scope>test</scope>\n  <exclusions>\n    <exclusion>\n      <groupId>org.apache.karaf.shell</groupId>\n      <artifactId>org.apache.karaf.shell.dev</artifactId>\n    </exclusion>\n  </exclusions>\n</dependency>\n…\n```", "```java\n@ExamReactorStrategy(PerClass.class)\n@RunWith(PaxExam.class)\npublic class IntegrationTestKaraf {\n\n  @Inject\n  protected BundleContext bundleContext;\n\n  @Inject\n  protected FeaturesService featuresService;\n\n  @Configuration\n  public static Option[] configuration() throws Exception {\n    return new Option[] {\n      karafDistributionConfiguration().frameworkUrl(maven().groupId(\"org.apache.karaf\").artifactId(\"apache-karaf\").type(\"zip\").versionAsInProject()).unpackDirectory(new File(\"target/paxexam/unpack/\")).useDeployFolder(false),configureConsole().ignoreLocalConsole(),logLevel(LogLevel.INFO),keepRuntimeFolder(),features(maven().groupId(\"org.apache.karaf.features\").artifactId(\"standard\").type(\"xml\").classifier(\"features\").versionAsInProject(),\"eventadmin\")\n    };\n  }\n\n  @Test\n  public void test() {\n    assertNotNull(bundleContext);\n  }\n\n  @Test\n  public void featuresAvailable() throws Exception {\n    assertTrue(featuresService.isInstalled(featuresService.getFeature(\"eventadmin\")));\n  }\n\n}\n```", "```java\n<plugin>\n  <groupId>org.apache.servicemix.tooling</groupId>\n  <artifactId>depends-maven-plugin</artifactId>\n  <version>1.2</version>\n  <executions>\n    <execution>\n      <id>generate-depends-file</id>\n      <phase>generate-resources</phase>\n      <goals>\n        <goal>generate-depends-file</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n```", "```java\n@ProbeBuilder\npublic TestProbeBuilder probeConfiguration(TestProbeBuilder probe) {\n  //make sure the needed imports are there. \n  probe.setHeader(Constants.DYNAMICIMPORT_PACKAGE, \"*,org.apache.felix.service.*;status=provisional\");\n  return probe;\n}\n```", "```java\n@Inject\nprotected CommandProcessor commandProcessor;\n```", "```java\nprotected String executeCommand(final String command) {\n  String response;\n  final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n  final PrintStream printStream = new PrintStream(byteArrayOutputStream);\n  final CommandSession commandSession = commandProcessor.createSession(System.in, printStream, System.err);\n  FutureTask<String> commandFuture = new FutureTask<String>(\n    new Callable<String>() {\n      public String call() {\n        try {\n          System.err.println(command);\n          commandSession.execute(command);\n        } catch (Exception e) {\n          e.printStackTrace(System.err);\n        }\n        printStream.flush();\n        return byteArrayOutputStream.toString();\n      }\n    });\n\n  try {\n    executor.submit(commandFuture);\n    response = commandFuture.get(10000L, TimeUnit.MILLISECONDS);\n  } catch (Exception e) {\n    e.printStackTrace(System.err);\n    response = \"SHELL COMMAND TIMED OUT: \";\n  }\n\n  return response;\n}\n```", "```java\n<groupId>org.jacoco</groupId>\n<artifactId>jacoco-maven-plugin</artifactId>\n<version>0.7.0.201403182114</version>\n```", "```java\n<execution>\n  <id>prepare-agent-integration</id>\n  <goals>\n <goal>prepare-agent-integration</goal>\n  </goals>\n  <phase>pre-integration-test</phase>\n  <configuration>\n    <propertyName>jcoverage.command</propertyName>\n    <includes>\n      <include>com.packt.*</include>\n    </includes>\n    <append>true</append>\n  </configuration>\n</execution>\n```", "```java\n<execution>\n  <id>report</id>\n  <goals>\n    <goal>report-integration</goal>\n  </goals>\n</execution>\n```", "```java\nprivate static Option addCodeCoverageOption() {\n  String coverageCommand = System.getProperty(COVERAGE_COMMAND);\n  if (coverageCommand != null) {\n    return CoreOptions.vmOption(coverageCommand);\n  }\n  return null;\n}\n```", "```java\n    …\n    @RunWith(PaxExam.class)\n    public class TestCamelInKaraf extends CamelTestSupport {\n\n      @Inject\n      protected FeaturesService featuresService;\n\n      @Inject\n      protected BundleContext bundleContext;\n\n      @Inject\n      @Filter(value=\"(camel.context.name=blueprintContext)\", timeout=10000)\n      protected CamelContext testContext;\n    …\n    ```", "```java\n    @Configuration\n    public static Option[] configure() throws Exception {\n      return new Option[] {\n      karafDistributionConfiguration().frameworkUrl(\n      maven().groupId(\"org.apache.karaf\")\n    .artifactId(\"apache-karaf\")\n    .type(\"zip\").versionAsInProject()).useDeployFolder(false)\n    .karafVersion(\"3.0.1\")\n      .unpackDirectory(new File(\"target/paxexam/unpack/\")),\n      logLevel(LogLevel.WARN),\n      features(\n    maven().groupId(\"org.apache.camel.karaf\")\n    .artifactId(\"apache-camel\").type(\"xml\")\n    .classifier(\"features\")\n    .versionAsInProject(), \n    \"camel-blueprint\", \"camel-test\"),keepRuntimeFolder(),\n      streamBundle(\n        bundle().add(HelloBean.class)\n      .add(\"OSGI-INF/blueprint/blueprint.xml\",\n      new File(\"src/main/resources/OSGI-INF/blueprint/blueprint.xml\")\n      .toURL())\n    .set(Constants.BUNDLE_SYMBOLICNAME, \"com.packt.camel-test\")\n      .set(Constants.DYNAMICIMPORT_PACKAGE, \"*\").build())\n      .start() };\n    }\n    ```", "```java\n    @Override\n    public boolean isCreateCamelContextPerClass() {\n      return true;\n    }\n    ```", "```java\n    @Test\n    public void test() throws Exception {\n      assertTrue(featuresService.isInstalled(featuresService.getFeature(\"camel-core\")));\n      assertTrue(featuresService.isInstalled(featuresService.getFeature(\"camel-blueprint\")));\n\n      assertNotNull(testContext);\n\n      MockEndpoint mockEndpoint = (MockEndpoint) testContext.getEndpoint(\"mock:result\");\n      mockEndpoint.expectedMessageCount(1);\n\n      assertMockEndpointsSatisfied(10000l, TimeUnit.MILLISECONDS);\n\n    }\n    ```"]