- en: Chapter 4. The Undertow Web Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. Undertow Web服务器
- en: In this chapter, we are going to look at how to configure Undertow, the web
    server shipped with WildFly 8\. This will complete our overview of the standalone
    server configuration.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何配置Undertow，这是WildFly 8附带的服务器。这将完成我们对独立服务器配置的概述。
- en: We will then look at the structure of a typical enterprise application by creating,
    packaging, and deploying a sample Java EE 7 project. It will include JavaServer
    Faces components, Enterprise JavaBeans, and CDI, and will also use the **Java
    Persistence API** (**JPA**). This will give you a feel of working with a complete
    Java EE 7 application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将通过创建、打包和部署一个示例Java EE 7项目来查看典型企业应用程序的结构。它将包括JavaServer Faces组件、企业JavaBeans和CDI，并且还将使用**Java持久化API**（**JPA**）。这将让你感受到与完整的Java
    EE 7应用程序一起工作的感觉。
- en: 'By the end of this chapter, you will have learned about:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解到：
- en: The architecture of Undertow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Undertow的架构
- en: The Undertow host configuration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Undertow主机配置
- en: Serving static content
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器静态内容服务
- en: The servlet container configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Servlet容器配置
- en: The JSP configuration
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSP配置
- en: Configuration of session cookies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话cookie的配置
- en: How to create a simple web application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个简单的Web应用程序
- en: An overview of Undertow
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Undertow概述
- en: Those of you who have worked with previous versions of WildFly will know that
    historically, JBoss has always included Tomcat, or a fork of Tomcat (named JBoss
    Web), as the application server's web container.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那些使用过WildFly先前版本的人会知道，历史上，JBoss总是包括Tomcat，或者Tomcat的分支（称为JBoss Web），作为应用程序服务器的Web容器。
- en: The decision to replace JBoss Web came about as a new web container was required,
    one that supports new Java EE 7 requirements, such as web sockets and an HTTP
    upgrade. It was also decided that the new web server should be lightweight and
    flexible, and have better performance. The resulting server is super responsive,
    can scale to over a million connections, and has exceptional throughput.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 决定替换JBoss Web是因为需要一个新的Web容器，它支持新的Java EE 7要求，如WebSocket和HTTP升级。还决定新的Web服务器应该是轻量级和灵活的，并且具有更好的性能。结果服务器响应极快，可以扩展到超过一百万个连接，并且具有卓越的吞吐量。
- en: The Undertow architecture
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Undertow架构
- en: Undertow is written in Java and based on the **Non-blocking Input/Output** API
    (often referred to as **New Input/Output** or just **NIO**). With a composition-based
    architecture and built using a fluent builder API, Undertow can be easily configured,
    giving you as much or as little functionality as you need. By chaining handlers
    together, you can build anything from a simple HTTP handler to a full Java EE
    3.1 container.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Undertow是用Java编写的，基于**非阻塞输入/输出**API（通常称为**新输入/输出**或简称**NIO**）。通过基于组合的架构和使用流畅的构建器API构建，Undertow可以轻松配置，提供你所需的多或少的函数。通过将处理程序串联起来，你可以构建从简单的HTTP处理程序到完整的Java
    EE 3.1容器的任何东西。
- en: 'There are three core parts that make up the Undertow server:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 组成Undertow服务器有三个核心部分：
- en: '**XNIO worker instances**: These instances form a thin abstraction layer over
    Java NIO, providing a channel API, management of IO and worker threads, and SSL
    support.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XNIO工作实例**：这些实例在Java NIO之上形成了一个薄抽象层，提供通道API、IO和工作者线程的管理以及SSL支持。'
- en: '**Listeners**: These handle incoming connections and the underlying protocol.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监听器**：这些处理传入的连接和底层协议。'
- en: '**Handlers**: These are chained together to provide the main functionality
    for Undertow. They define how incoming requests are handled.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理程序**：这些处理程序串联在一起，为Undertow提供主要功能。它们定义了如何处理传入的请求。'
- en: 'The following diagram shows how these components fit together to create the
    web server, and demonstrates how the handlers are chained together:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图示展示了这些组件如何组合在一起以创建Web服务器，并演示了处理程序是如何串联在一起的：
- en: '![The Undertow architecture](img/6232OS_04_01.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![Undertow架构](img/6232OS_04_01.jpg)'
- en: Configuring Undertow
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Undertow
- en: 'In this section, we are going to look at how to configure the different components
    of Undertow. Undertow is configured within the Undertow subsystem found in the
    `standalone.xml` file. Here''s an extract from the Undertow subsystem:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何配置Undertow的不同组件。Undertow是在`standalone.xml`文件中找到的Undertow子系统内进行配置的。以下是Undertow子系统的摘录：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The majority of the Undertow web server is configured within the `server` and
    `servlet-container` elements, both of which we are going to look at next.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Undertow Web服务器的大部分配置都在`server`和`servlet-container`元素内进行，这两个元素我们将在下一节中查看。
- en: Configuring the server
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器配置
- en: 'Within the `server` element, you can configure hosts and listeners. The attributes
    to configure your main server instance are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`server`元素内，您可以配置主机和监听器。配置主服务器实例的属性如下：
- en: '| Name | Meaning |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | 含义 |'
- en: '| --- | --- |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `default-host` | This is the virtual host to be used if a request has a no
    host header |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `default-host` | 如果请求没有主机头，则使用此虚拟主机 |'
- en: '| `servlet-container` | This is the servlet container to be used, as configured
    in the `servlet-container` element |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `servlet-container` | 这是将要使用的servlet容器，如`servlet-container`元素中配置的 |'
- en: Configuring the listener
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置监听器
- en: 'As we stated earlier, Undertow is made up of listeners and handlers. The listeners
    are configured within the `server` element, as highlighted in the following code.
    The default configuration in the `standalone.xml` file has just a single connector
    defined, which is the HTTP connector:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所述，Undertow由监听器和处理器组成。监听器在`server`元素内进行配置，如下面的代码所示。`standalone.xml`文件中的默认配置只有一个定义的连接器，即HTTP连接器：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Notice that the `socket-binding` attribute points to a configuration defined
    in the `socket-binding-group` section:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`socket-binding`属性指向在`socket-binding-group`部分定义的配置：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: WildFly also supports AJP and HTTPS connection protocols; we will cover these
    in detail in [Chapter 9](ch09.html "Chapter 9. Load-balancing Web Applications"),
    *Load-balancing Web Applications* and [Chapter 10](ch10.html "Chapter 10. Securing
    WildFly"), *Securing WildFly*, respectively.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly还支持AJP和HTTPS连接协议；我们将在第9章[负载均衡Web应用](ch09.html "第9章。负载均衡Web应用")和第10章[保护WildFly](ch10.html
    "第10章。保护WildFly")中分别详细介绍。
- en: 'There are a lot of options when it comes to the configuration of the listener.
    The attributes for the HTTP listener element are outlined as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置监听器时有很多选项。HTTP监听器元素的属性概述如下：
- en: '| Property | Description | Default value |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `allow-encoded-slash` | When set to true, this property allows the server
    to decode percent-encoded slash characters (%2F). Only enable this option if you
    have a legacy application that requires it, as it can have security implications
    due to different servers interpreting the slash differently. | `false` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `allow-encoded-slash` | 当设置为true时，此属性允许服务器解码百分号编码的斜杠字符（%2F）。只有当您有一个需要此功能的遗留应用程序时，才启用此选项，因为它可能由于不同服务器对斜杠的不同解释而具有安全影响。
    | `false` |'
- en: '| `always-set-keep-alive` | This property determines whether the `Connection:
    keep-alive` header should be added to all responses, even if not required by spec.
    | `true` |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `always-set-keep-alive` | 此属性确定是否应将`Connection: keep-alive`头添加到所有响应中，即使规范不需要也是如此。
    | `true` |'
- en: '| `buffer-pipelined-data` | This property determines whether responses to HTTP
    pipelined requests should be buffered and sent out in a single write. This can
    improve performance if the HTTP pipelining is in use and responses are small.
    | `true` |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `buffer-pipelined-data` | 此属性确定对HTTP管道请求的响应是否应缓冲并一次性发送。如果HTTP管道正在使用且响应较小，这可以提高性能。
    | `true` |'
- en: '| `buffer-pool` | This property references a buffer pool as defined in the
    I/O subsystem, which is used internally to read and write requests. In general,
    these should be at least 8 KB, unless you are in a memory-constrained environment.
    | `default` |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `buffer-pool` | 此属性引用在I/O子系统定义的缓冲池，用于内部读取和写入请求。通常，这些缓冲池至少应为8 KB，除非您处于内存受限的环境中。
    | `default` |'
- en: '| `certificate-forwarding` | If this property is enabled, then the listener
    will take the certificate from the `SSL_CLIENT_CERT` attribute. This property
    should only be enabled if the client is behind a proxy and the proxy is configured
    to always set these headers. |   |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `certificate-forwarding` | 如果此属性启用，则监听器将从`SSL_CLIENT_CERT`属性中获取证书。此属性仅在客户端位于代理后面且代理配置为始终设置这些头时启用。
    |  |'
- en: '| `decode-url` | This property determines whether the URL should be decoded.
    If this property is set to `false`, the percent-encoded characters in the URL
    will be left as is. | `true` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `decode-url` | 此属性确定是否应对URL进行解码。如果此属性设置为`false`，则URL中的百分号编码字符将保持不变。 | `true`
    |'
- en: '| `enabled` | This property states whether this listener is enabled | `true`
    |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `enabled` | 此属性表示此监听器是否启用 | `true` |'
- en: '| `max-cookies` | This property defines the maximum number of cookies allowed.
    If a client sends more cookies than this value, the connection will be closed.
    This exists to prevent DOS attacks based on hash collision. | `200` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `max-cookies` | 此属性定义允许的最大cookie数量。如果客户端发送的cookie数量超过此值，则连接将被关闭。这存在是为了防止基于哈希碰撞的DOS攻击。
    | `200` |'
- en: '| `max-header-size` | This property defines the maximum allowed HTTP header
    block size in bytes. Any request header with a value greater than this will be
    closed. | `5120` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `max-header-size` | 此属性定义允许的最大HTTP头块大小（以字节为单位）。任何值大于此值的请求头将被关闭。 | `5120`
    |'
- en: '| `max-headers` | This property defines the maximum number of headers allowed.
    It exists to prevent DOS attacks based on hash collision. | `200` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `max-headers` | 此属性定义允许的最大头数。它存在是为了防止基于哈希碰撞的DOS攻击。 | `200` |'
- en: '| `max-parameters` | This property defines the maximum number of query or path
    parameters allowed. If more parameters are sent, the connection will be closed.
    It exists to prevent DOS attacks based on hash collision. | `1000` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `max-parameters` | 此属性定义允许的最大查询或路径参数数量。如果发送的参数更多，则连接将被关闭。它存在是为了防止基于哈希碰撞的DOS攻击。
    | `1000` |'
- en: '| `max-post-size` | This property defines the maximum size allowed for incoming
    post requests. | `0` (unlimited) |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `max-post-size` | 此属性定义允许的传入POST请求的最大大小。 | `0`（无限）|'
- en: '| `name` | This property defines the name given to the listener. |   |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 此属性定义分配给监听器的名称。 |   |'
- en: '| `proxy-address-forwarding` | This property enables `x-forwarded-host` and
    similar headers and sets a remote IP address and hostname. |   |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `proxy-address-forwarding` | 此属性启用`x-forwarded-host`和类似头，并设置远程IP地址和主机名。 |
      |'
- en: '| `redirect-socket` | This property, when enabled, automatically redirects
    a request to the specified socket binding port if the listener supports non-SSL
    requests and a request is received for which a matching security constraint requires
    SSL transport. |   |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| `redirect-socket` | 当此属性启用时，如果监听器支持非SSL请求并且收到需要SSL传输的匹配安全约束的请求，则会自动将请求重定向到指定的套接字绑定端口。
    |   |'
- en: '| `socket-binding` | This property determines the address and port the listener
    listens on. |   |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| `socket-binding` | 此属性确定监听器监听的地址和端口。 |   |'
- en: '| `url-charset` | This property defines the charset to decode the URL to. |
    `UTF-8` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| `url-charset` | 此属性定义解码URL的字符集。 | `UTF-8` |'
- en: '| `worker` | This property references an XNIO worker as defined in the IO subsystem.
    The worker that is in use controls the IO and blocking thread pool. | `default`
    |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| `worker` | 此属性引用在IO子系统定义的XNIO工作器。正在使用的工作器控制IO和阻塞线程池。 | `default` |'
- en: Configuring the host
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置主机
- en: The host configuration within the `server` element corresponds to a virtual
    host and is nested directly under the `server` element, as shown in the following
    code. Virtual hosts allow you to group web applications according to the DNS names
    by which a machine running WildFly is known.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`server`元素内的主机配置对应于虚拟主机，并直接嵌套在`server`元素下，如下面的代码所示。虚拟主机允许您根据运行WildFly的机器所知的DNS名称对Web应用程序进行分组。'
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The elements nested within the host are explained here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里解释了嵌套在主机内的元素：
- en: '`location`: This element defines the URL path to the content, such as `welcome-content`.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`location`: 此元素定义指向内容的URL路径，例如`welcome-content`。'
- en: '`access-log`: This element allows you to configure the location and format
    of the access log.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`access-log`: 此元素允许您配置访问日志的位置和格式。'
- en: '`filter-ref`: This element defines the filters that are applied to the current
    host.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filter-ref`: 此元素定义应用于当前主机的过滤器。'
- en: '`single-sign-on`: This element allows you to configure the cookies to use for
    authentication.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`single-sign-on`: 此元素允许您配置用于身份验证的cookie。'
- en: 'The access log can be fully configured by changing the default attributes,
    as shown in the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过更改默认属性来完全配置访问日志，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `filter-ref` element states the filters applied by referencing the name
    of the filters defined in the `filters` element, as shown in the following highlighted
    code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter-ref`元素通过引用在`filters`元素中定义的过滤器的名称来声明应用的过滤器，如下面的高亮代码所示：'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Serving static content
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 服务器静态内容
- en: 'You may not want to deploy all your static content with your application. These
    may be images, PDF documents, or other types of files. You can configure Undertow
    to look for these files on the local filesystem. This example shows you how to
    do this by adding a file handler and location to the Undertow subsystem:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能不想将所有静态内容与应用程序一起部署。这些可能是图像、PDF 文档或其他类型的文件。您可以配置 Undertow 在本地文件系统中查找这些文件。以下示例展示了如何通过向
    Undertow 子系统添加文件处理器和位置来完成此操作：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With this additional configuration, any request for resources to `www.yourdomain.com/contextroot/img`
    will be redirected to the filesystem on your hard disk.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过此附加配置，对 `www.yourdomain.com/contextroot/img` 资源的所有请求都将重定向到您的硬盘上的文件系统。
- en: Configuring the servlet container
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 servlet 容器
- en: 'An instance of a servlet container is defined within a single `servlet-container`
    element. You can have more than one `servlet-container` element if you wish to
    have multiple servlet containers; however, for most setups, a single instance
    will suffice. The default configuration in `standalone.xml` is shown as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 servlet 容器的实例定义在单个 `servlet-container` 元素内。如果您希望有多个 servlet 容器，则可以拥有多个 `servlet-container`
    元素；然而，对于大多数配置，一个实例就足够了。`standalone.xml` 中的默认配置如下所示：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'An explanation of the attributes available for the `servlet-container` are
    detailed in the following table:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格详细说明了 `servlet-container` 可用的属性：
- en: '| Property | Description | Default value |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `allow-non-standard-wrappers` | This property relaxes the servlet specification,
    which requires applications to only wrap the request/response with wrapper classes
    that extend the `ServletRequestWrapper` and `ServletResponseWrapper` classes.
    | `false` |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `allow-non-standard-wrappers` | 此属性放宽了 servlet 规范，该规范要求应用程序仅使用扩展 `ServletRequestWrapper`
    和 `ServletResponseWrapper` 类的包装类来包装请求/响应。 | `false` |'
- en: '| `default-buffer-cache` | This is the buffer cache used to cache static resources
    in the default servlet. |   |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `default-buffer-cache` | 这是默认 servlet 中用于缓存静态资源的缓冲区缓存。 |  |'
- en: '| `default-encoding` | This is the default encoding for the requests and responses.
    |   |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `default-encoding` | 这是请求和响应的默认编码。 |  |'
- en: '| `eager-filter-initialization` | By setting this property to `true`, the init
    method of filters defined in your `web.xml` file are called upon the first request,
    and not on server startup. | `false` |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `eager-filter-initialization` | 通过将此属性设置为 `true`，在第一次请求时调用 `web.xml` 文件中定义的过滤器的
    init 方法，而不是在服务器启动时调用。 | `false` |'
- en: '| `ignore-flush` | This ignores flushes on the servlet output stream. | `false`
    |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `ignore-flush` | 此选项忽略 servlet 输出流上的刷新操作。 | `false` |'
- en: '| `stack-trace-on-error` | The available options for this property are `all`,
    `none`, or `local-only`. The `all` value will display all traces (should not be
    used in a production environment), while `none` means stack traces are not shown,
    and `local-only` means only requests from local addresses are shown and there
    are no headers to indicate that the request has been proxied. This feature uses
    the Undertow error page rather than the default error page specified in `web.xml`.
    | `local-only` |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `stack-trace-on-error` | 此属性的可用选项为 `all`、`none` 或 `local-only`。`all` 值将显示所有跟踪信息（不应在生产环境中使用），而
    `none` 表示不显示堆栈跟踪，`local-only` 表示仅显示来自本地地址的请求，并且没有标题指示请求已被代理。此功能使用 Undertow 错误页面而不是
    `web.xml` 中指定的默认错误页面。 | `local-only` |'
- en: '| `use-listener-encoding` | This uses the default encoding used by the listener
    that received the request. | `false` |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `use-listener-encoding` | 此选项使用接收请求的监听器使用的默认编码。 | `false` |'
- en: Several child elements can be added to the `servlet-container` element, which
    will allow you to configure your JSPs, session cookies, and persistent sessions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 可以向 `servlet-container` 元素添加多个子元素，这将允许您配置您的 JSPs、会话 cookie 和持久会话。
- en: Configuring JSP
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置 JSP
- en: 'The JSP element is provided in the default configuration. As no additional
    attributes are added, the default configuration is applied, as shown in the following
    code:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: JSP 元素在默认配置中提供。由于没有添加其他属性，因此应用默认配置，如下所示：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Configuring the session cookie
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置会话 cookie
- en: 'You will probably be interested in configuring the Undertow session cookie.
    By default, there is no configuration text included in the `standalone.xml` file,
    so you will need to add it as a child element of the `servlet-container` configuration:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会对配置 Undertow 会话 cookie 感兴趣。默认情况下，`standalone.xml` 文件中不包含配置文本，因此您需要将其作为 `servlet-container`
    配置的子元素添加：
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The possible attributes for the `session-cookie` element are shown in the following
    table. If you do not set these values explicitly, no value will be set, as there
    are no defaults:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`session-cookie`元素的可能的属性在以下表中显示。如果您没有明确设置这些值，则不会设置任何值，因为没有默认值：'
- en: '| Property | Description | Default value |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 | 默认值 |'
- en: '| --- | --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `name` | This property defines the name of a cookie |   |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 该属性定义了cookie的名称 |   |'
- en: '| `domain` | This property defines the cookie domain |   |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `domain` | 该属性定义了cookie的域 |   |'
- en: '| `comment` | This property defines the cookie comment |   |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `comment` | 该属性定义了cookie的注释 |   |'
- en: '| `http-only` | This property determines whether the cookie is HTTP-only |
    `true` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `http-only` | 该属性确定cookie是否为HTTP-only | `true` |'
- en: '| `secure` | This property determines whether the cookie is marked as secure
    | `true` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `secure` | 该属性确定cookie是否被标记为安全 | `true` |'
- en: '| `max-age` | This property defines the maximum age of a cookie (in minutes)
    | `0` (infinite) |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `max-age` | 该属性定义了cookie的最大年龄（以分钟为单位） | `0`（无限）|'
- en: Saving the session state
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 保存会话状态
- en: Saving sessions allows session data to be stored when the server is restarted
    or the application is redeployed. To enable this, you need to add the `persistent-sessions`
    element to the configuration file, as shown in the following code. This property
    should be used in your development environment rather than in production.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 保存会话允许在服务器重启或应用程序重新部署时存储会话数据。为了启用此功能，您需要将`persistent-sessions`元素添加到配置文件中，如下面的代码所示。此属性应在您的开发环境中使用，而不是在生产环境中使用。
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you do not specify the `path` variable, then the session will only be persistent
    across redeploys and not across server restarts.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有指定`path`变量，则会话仅在重新部署之间持久，而不是在服务器重启之间持久。
- en: Configuring the buffer cache
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置缓冲区缓存
- en: 'The buffer cache is used to cache content, for example, static files. A buffer
    cache consists of one or more regions, and each region is split into smaller buffers.
    Here''s an example configuration of the `buffer-cache` element:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区缓存用于缓存内容，例如静态文件。缓冲区缓存由一个或多个区域组成，每个区域被分割成更小的缓冲区。以下是一个`buffer-cache`元素的配置示例：
- en: '[PRE11]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'The total cache size can be calculated by multiplying the buffer size by the
    buffers per region and the maximum number of regions. In our example, it would
    be:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 总缓存大小可以通过将缓冲区大小乘以每个区域的缓冲区数量和最大区域数量来计算。在我们的例子中，它将是：
- en: '*1024 bytes * 2048 * 10 = 20971520 bytes*'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '*1024字节 * 2048 * 10 = 20971520字节*'
- en: Creating and deploying a web application
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和部署Web应用程序
- en: As you can see, the application server provides a relatively straightforward
    way to configure the web container. In order to build and deploy a web application,
    it would be good for you to learn how to organize an application along with its
    specific configuration files.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，应用服务器提供了一个相对直接的方式来配置Web容器。为了构建和部署Web应用程序，了解如何组织应用程序及其特定的配置文件将是有益的。
- en: WildFly 8 is a Java EE 7 compliant application server and thus, can be used
    to deploy a wide range of web applications. One way of building a web application
    is to use the **JavaServer Faces** (**JSF**) technology, which is an evolution
    of the JSP technology. It is also part of Enterprise Java, meaning that WildFly
    supports it out of the box. WildFly 8 supports the JSF release 2.2 using the Mojarra
    implementation.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 8是一个符合Java EE 7的应用程序服务器，因此可以用于部署各种Web应用程序。构建Web应用程序的一种方式是使用**JavaServer
    Faces**（**JSF**）技术，这是JSP技术的演变。它也是企业Java的一部分，这意味着WildFly默认支持它。WildFly 8使用Mojarra实现支持JSF
    2.2版本。
- en: Note
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The purpose of this example is to show you how to create, configure, and deploy
    a Java EE 7 application on WildFly 8\. If you want to learn more about the various
    Java EE 7 technologies, you should check out the many Java EE 7 examples created
    by Arun Gupta, which have been configured specifically for WildFly. The GitHub
    URL is [https://github.com/javaee-samples/javaee7-samples](https://github.com/javaee-samples/javaee7-samples).
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本例的目的是向您展示如何在WildFly 8上创建、配置和部署一个Java EE 7应用程序。如果您想了解更多关于各种Java EE 7技术，您应该查看Arun
    Gupta创建的许多Java EE 7示例，这些示例已经针对WildFly进行了配置。GitHub URL是[https://github.com/javaee-samples/javaee7-samples](https://github.com/javaee-samples/javaee7-samples)。
- en: Next, we are going to create a simple application. The purpose of this is to
    demonstrate how to configure each of the various enterprise components found within
    a typical enterprise application.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个简单的应用程序。这个例子旨在演示如何配置典型企业应用程序中发现的各个企业组件。
- en: Creating a new Maven web project
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新的Maven Web项目
- en: There are several ways in which you can create a web application project using
    Eclipse. Since Maven is the de facto build tool, it makes sense to use the Maven
    project structure in this example.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用多种方式在Eclipse中创建Web应用程序项目。由于Maven是事实上的构建工具，因此在这个例子中使用Maven项目结构是有意义的。
- en: 'Let''s start by creating the project file structure. Go to **File** | **New**
    | **Maven Project**, select **skip archetype selection**, create a simple project,
    and proceed to the next page. Then, complete the artifact details as shown in
    the following screenshot, ensuring that you select **war** as the packaging:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建项目文件结构开始。转到 **文件** | **新建** | **Maven项目**，选择 **跳过原型选择**，创建一个简单项目，然后进入下一页。然后，根据以下截图完成工件详情，确保您选择
    **war** 作为打包方式：
- en: '![Creating a new Maven web project](img/6232OS_04_02.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Maven Web项目](img/6232OS_04_02.jpg)'
- en: 'After clicking on **Finish**, Eclipse will generate a default folder structure
    for your application:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **完成** 后，Eclipse将为您的应用程序生成默认的文件夹结构：
- en: '![Creating a new Maven web project](img/6232OS_04_03.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建新的Maven Web项目](img/6232OS_04_03.jpg)'
- en: 'We are going to use JSF to create the view. Configuring the JSF 2.2 web application
    requires very little effort. You can achieve this with the following steps:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用JSF来创建视图。配置JSF 2.2 Web应用程序需要非常少的努力。您可以通过以下步骤实现这一点：
- en: Create a file called `web.xml` and place it in the `WEB-INF` folder of your
    application.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `web.xml` 的文件，并将其放置在您应用程序的 `WEB-INF` 文件夹中。
- en: Add the `FacesServlet` to your `web.xml` file and specify what kind of URL patterns
    will be directed to it.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `FacesServlet` 添加到您的 `web.xml` 文件中，并指定将哪些URL模式定向到它。
- en: Create a `faces-config.xml` file and place it in the `WEB-INF` folder.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `faces-config.xml` 的文件，并将其放置在 `WEB-INF` 文件夹中。
- en: Note
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `FacesServlet` is a servlet that manages the request processing life cycle
    for web applications that are utilizing JavaServer Faces to construct the user
    interface.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`FacesServlet` 是一个管理使用JavaServer Faces构建用户界面的Web应用程序请求处理生命周期的servlet。'
- en: 'Here''s the complete `web.xml` file. You can see that we specified the URL
    patterns that the `FacesServlet` will process:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的 `web.xml` 文件。您可以看到我们指定了 `FacesServlet` 将处理的URL模式：
- en: '[PRE12]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, you see a minimal JSF configuration file named `faces-config.xml`, which
    will be placed in the `WEB-INF` folder of your application. This file declares
    the JSF release that we are going to use, which in our case, is 2.2:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到一个名为 `faces-config.xml` 的最小化JSF配置文件，该文件将被放置在您应用程序的 `WEB-INF` 文件夹中。此文件声明了我们将要使用的JSF版本，在我们的例子中是2.2：
- en: '[PRE13]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Eclipse can create these configuration files for you. To do this, you will need
    to activate the **JavaServer** **Faces** **Facets**. Right-click on your project
    and select **Project** **Properties**. Here, you will find a set of configuration
    options that can be automatically added to your project under the **Project**
    **Facets** option. You may need to modify the files to ensure that the correct
    namespaces are used, and update the content of the `web.xml` file.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse可以为您创建这些配置文件。为此，您需要激活 **JavaServer** **Faces** **Facets**。在您的项目上右键单击，选择
    **项目** **属性**。在这里，您将找到一组配置选项，可以在 **项目** **Facets** 选项下自动添加到您的项目中。您可能需要修改文件以确保使用正确的命名空间，并更新
    `web.xml` 文件的内容。
- en: 'Next, we will need to add the project dependencies to the Maven configuration
    file, the `pom.xml` file. Maven will then download and manage all your dependencies
    for you upon a project build. The complete content of `pom.xml` is shown in the
    following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将项目依赖项添加到Maven配置文件 `pom.xml` 中。在项目构建时，Maven将为您下载和管理所有依赖项。以下代码显示了 `pom.xml`
    的完整内容：
- en: '[PRE14]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Tip
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: You will notice that the JBoss Nexus repository is being used rather than Maven
    Central. This is because since Java EE 6, JBoss has hosted its own EE API. The
    motivation for this was the unimplemented methods in Java EE 6\. To understand
    the full motivation, navigate to [https://developer.jboss.org/blogs/donnamishelly/2011/04/29/jboss-java-ee-api-specs-project](https://developer.jboss.org/blogs/donnamishelly/2011/04/29/jboss-java-ee-api-specs-project).
    I would recommend that you use the version hosted by JBoss, as it is identical
    to the code shipped with WildFly.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到正在使用JBoss Nexus仓库而不是Maven Central。这是因为自从Java EE 6以来，JBoss已经托管了自己的EE API。这样做的原因是Java
    EE 6中未实现的方法。要了解完整的动机，请导航到[https://developer.jboss.org/blogs/donnamishelly/2011/04/29/jboss-java-ee-api-specs-project](https://developer.jboss.org/blogs/donnamishelly/2011/04/29/jboss-java-ee-api-specs-project)。我建议你使用由JBoss提供的版本，因为它与WildFly中提供的代码相同。
- en: Adding JSF components
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加JSF组件
- en: For the purpose of learning how to package a Java EE 7 application, we will
    show you how to combine JSF components, such as JSF views with Enterprise components
    like CDI and EJBs.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习如何打包Java EE 7应用程序，我们将向你展示如何结合JSF组件，例如JSF视图与CDI和EJB等企业组件。
- en: 'In this example, we will create a simple caching system that uses an EJB singleton
    to handle the cache in memory. Then, we show you how to persist data to a database.
    Let''s start by adding a page named `index.xhtml` to your dynamic web project:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个简单的缓存系统，该系统使用EJB单例在内存中处理缓存。然后，我们向你展示如何将数据持久化到数据库。让我们先向你的动态Web项目添加一个名为`index.xhtml`的页面：
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To learn about JSF, please refer to the online tutorial at [http://docs.oracle.com/javaee/7/tutorial/doc/jsf-intro.htm](http://docs.oracle.com/javaee/7/tutorial/doc/jsf-intro.htm).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解JSF，请参考在线教程[http://docs.oracle.com/javaee/7/tutorial/doc/jsf-intro.htm](http://docs.oracle.com/javaee/7/tutorial/doc/jsf-intro.htm)。
- en: The following code references a backing bean named `manager`, which is used
    to store and retrieve key/value pairs. Backing beans are simple Java classes which
    are used as models for UI components. You will also notice the `@RequestScoped`
    annotation in the `PropertyManager` class.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码引用了一个名为`manager`的后备Bean，用于存储和检索键/值对。后备Bean是简单的Java类，用作UI组件的模型。你也会注意到`PropertyManager`类中的`@RequestScoped`注解。
- en: Tip
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When defining the scope of a backing bean, you should only use the `javax.faces.bean.RequestScoped`
    annotation if you are not using CDI, which is highly unlikely. Instead, you should
    use the annotations found in the `javax.enterprise.context.*` package, which is
    part of the Context and Dependency Injection framework.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义后备Bean的作用域时，如果你不使用CDI（这几乎不可能），你应该只使用`javax.faces.bean.RequestScoped`注解。相反，你应该使用`javax.enterprise.context.*`包中的注解，它是上下文和依赖注入框架的一部分。
- en: 'Now, let''s see how to code the `PropertyManager` managed bean:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何编码`PropertyManager`托管Bean：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The most important part of this class is the `@Named` annotation. Annotating
    the class with `@Named` allows this class to be picked up as a CDI managed bean.
    The name passed into the annotation defines how this bean can be referenced via
    the Expression Language (EL). Next, the `@EJB` annotation is used to inject the
    `SingletonBean` into the class.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类最重要的部分是`@Named`注解。使用`@Named`注解这个类可以让它作为一个CDI托管Bean被识别。传递给注解的名称定义了如何通过表达式语言（EL）引用这个Bean。接下来，使用`@EJB`注解将`SingletonBean`注入到类中。
- en: Note
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can find out more about JSF managed beans at the Java EE tutorial here:
    [http://docs.oracle.com/javaee/7/tutorial/doc/jsf-develop.htm](http://docs.oracle.com/javaee/7/tutorial/doc/jsf-develop.htm).'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Java EE教程中了解更多关于JSF托管Bean的信息：[http://docs.oracle.com/javaee/7/tutorial/doc/jsf-develop.htm](http://docs.oracle.com/javaee/7/tutorial/doc/jsf-develop.htm)。
- en: Adding the EJB layer
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加EJB层
- en: 'The `SingletonBean` is an EJB, which is marked with the special `@javax.ejb.Singleton`
    annotation. A class with such an annotation is guaranteed to be instantiated only
    once per application, and exists for the life cycle of the application. In the
    Java EE context, singleton beans are primarily used to store application-wide
    shared data. Now, we need to create a new class named `SingletonBean`. The aim
    of this class will be to save and retrieve key/value pairs:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`SingletonBean`是一个EJB，它带有特殊的`@javax.ejb.Singleton`注解。带有此类注解的类保证每个应用程序只实例化一次，并且存在于应用程序的生命周期中。在Java
    EE上下文中，单例Bean主要用于存储应用程序范围内的共享数据。现在，我们需要创建一个名为`SingletonBean`的新类。这个类的目的是保存和检索键/值对：'
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The last class we need to add is `Property`, which is a plain `JavaBean` class:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加的最后一个类是`Property`，它是一个普通的`JavaBean`类：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Once you reach this point, you should have a project containing the items shown
    in the following screenshot:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦达到这一点，您应该有一个包含以下截图所示内容的项的项目：
- en: '![Adding the EJB layer](img/6232OS_04_05.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![添加 EJB 层](img/6232OS_04_05.jpg)'
- en: Choosing the web context of the application
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择应用程序的 Web 上下文
- en: 'By default, a web application inherits the web context name from the archive
    name, which is deployed on the application server. Maven uses the artifact ID,
    followed by the version to name the archive. So, in our example, if we deploy
    an archive named `chapter4-0.0.1-SNAPSHOT.war`, it will be accessible using the
    web context name `chapter4-0.0.1-SNAPSHOT`, as shown by the following image:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Web 应用程序从部署在应用程序服务器上的存档名称继承 Web 上下文名称。Maven 使用 artifact ID，后跟版本来命名存档。因此，在我们的示例中，如果我们部署一个名为
    `chapter4-0.0.1-SNAPSHOT.war` 的存档，它将可以通过 `chapter4-0.0.1-SNAPSHOT` 的 Web 上下文名称访问，如下面的图像所示：
- en: '![Choosing the web context of the application](img/6232OS_04_06.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![选择应用程序的 Web 上下文](img/6232OS_04_06.jpg)'
- en: 'The context name can be modified to something more meaningful. The simplest
    way to achieve this (without changing the archive name) is by adding a `jboss-web.xml`
    file to the `WEB-INF` folder of your project:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文名称可以修改为更有意义的内容。最简单的方法（不更改存档名称）是在项目的 `WEB-INF` 文件夹中添加一个 `jboss-web.xml` 文件：
- en: '![Choosing the web context of the application](img/6232OS_04_07.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![选择应用程序的 Web 上下文](img/6232OS_04_07.jpg)'
- en: 'The content of this file will include the custom web context, as specified
    by the `context-root` element:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的内容将包括由 `context-root` 元素指定的自定义 Web 上下文：
- en: '[PRE19]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Deploying the web application
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署 Web 应用程序
- en: Once you are happy with your settings, you can deploy and verify your application.
    If you are deploying your application from within Eclipse, just right-click on
    the WildFly Runtime Server and choose the **Add** **and** **Remove** option (assuming
    you installed the WildFly runtime as shown in [Chapter 1](ch01.html "Chapter 1. Installing
    WildFly"), *Installing WildFly*). Next, add the web project to the list of deployed
    projects.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对设置满意，您就可以部署并验证您的应用程序。如果您在 Eclipse 内部部署应用程序，只需右键单击 WildFly 运行时服务器并选择 **添加**
    **和** **移除** 选项（假设您已按照 [第 1 章](ch01.html "第 1 章。安装 WildFly") 中所示安装了 WildFly 运行时，*安装
    WildFly*）。接下来，将 Web 项目添加到已部署项目的列表中。
- en: 'You can then deploy the application by right-clicking on the project and choosing
    **Full** **Publish**:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过右键单击项目并选择 **完全** **发布** 来部署应用程序：
- en: '![Deploying the web application](img/6232OS_04_08.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![部署 Web 应用程序](img/6232OS_04_08.jpg)'
- en: After publishing your application, you will notice that Eclipse will copy your
    web application archive (`chapter4-0.0.1-SNAPSHOT.war`) to the server. It will
    also create a file named `chapter4-0.0.1-SNAPSHOT.war.dodeploy`. As you will learn
    in [Chapter 6](ch06.html "Chapter 6. Application Structure and Deployment"), *Application
    Structure and Deployment*, expanded archives, by default, require a marker file
    in WildFly to trigger the deployment. Eclipse is aware of this and creates the
    file for you.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 发布您的应用程序后，您会注意到 Eclipse 会将您的 Web 应用程序存档 (`chapter4-0.0.1-SNAPSHOT.war`) 复制到服务器。它还会创建一个名为
    `chapter4-0.0.1-SNAPSHOT.war.dodeploy` 的文件。正如您将在 [第 6 章](ch06.html "第 6 章。应用程序结构和部署")
    中学习到的，*应用程序结构和部署*，默认情况下，展开的存档需要 WildFly 中的一个标记文件来触发部署。Eclipse 知道这一点，并为您创建该文件。
- en: 'Upon successful deployment, the `chapter4-0.0.1-SNAPSHOT.war.dodeploy` file
    will be replaced by a `chapter4-0.0.1-SNAPSHOT.war.deployed` marker file, which
    indicates that you have successfully deployed the web application. You can verify
    that your application works correctly by pointing to the `index.xhtml` page at
    `http://localhost:8080/chapter4/index.xhtml`, as shown in the following screenshot:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 部署成功后，`chapter4-0.0.1-SNAPSHOT.war.dodeploy` 文件将被一个名为 `chapter4-0.0.1-SNAPSHOT.war.deployed`
    的标记文件替换，这表明您已成功部署了 Web 应用程序。您可以通过指向 `http://localhost:8080/chapter4/index.xhtml`
    上的 `index.xhtml` 页面来验证您的应用程序是否正常工作，如下面的截图所示：
- en: '![Deploying the web application](img/6232OS_04_09.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![部署 Web 应用程序](img/6232OS_04_09.jpg)'
- en: Deploying a web application to the root context
  id: totrans-178
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Web 应用程序部署到根上下文
- en: 'In our example, we have shown how to deploy the web application to a custom
    context using `jboss-web.xml`. One particular case of web context is the `root`
    context. This typically resolves to `http://localhost:8080` and is used to provide
    some welcome context by the web server. By default, WildFly has a root context
    that is mapped in the `JBOSS_HOME/welcome-content` folder. You can, however, override
    it by deploying one of your applications to the `root` context. This requires
    two simple steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们展示了如何使用 `jboss-web.xml` 将 Web 应用程序部署到自定义上下文。Web 上下文的一个特殊情况是 `root`
    上下文。这通常解析为 `http://localhost:8080`，并由 Web 服务器提供一些欢迎上下文。但是，您可以通过将您的应用程序之一部署到 `root`
    上下文来覆盖它。这需要两个简单的步骤：
- en: 'First, you need to remove the following line from your Undertow subsystem:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，您需要从您的 Undertow 子系统中删除以下行：
- en: '[PRE20]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, in your application, add a `jboss-web.xml` file that contains the `root`
    context for your application:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在您的应用程序中添加一个包含应用程序 `root` 上下文的 `jboss-web.xml` 文件：
- en: '[PRE21]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Adding a remote EJB client
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加远程 EJB 客户端
- en: 'Before adding any code for the remote EJB client, we need to add two dependencies
    to `pom.xml`. This ensures that our code will compile and run without errors:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在为远程 EJB 客户端添加任何代码之前，我们需要向 `pom.xml` 添加两个依赖项。这确保了我们的代码将编译并运行而不会出错：
- en: '[PRE22]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In order to test our application with a remote client, we need to create a
    remote interface to the EJB:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用远程客户端测试我们的应用程序，我们需要创建一个指向 EJB 的远程接口：
- en: '[PRE23]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The concrete implementation of this interface is the `SingletonBeanRemoteImpl`
    class, which has the same Java method implementations as the `SingletonBean` class
    that we showed in the earlier section:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 该接口的具体实现是 `SingletonBeanRemoteImpl` 类，它具有与我们在早期部分中展示的 `SingletonBean` 类相同的 Java
    方法实现：
- en: '[PRE24]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'EJB remote invocation happens through the **Remoting** framework, which uses
    **Simple** **Authentication** **and** **Security** **Layer** (**SASL**) for client-server
    authentication. You need to explicitly set the security provider by adding the
    following specification to the test client:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: EJB 远程调用通过 **Remoting** 框架进行，该框架使用 **简单** **认证** **和安全** **层**（**SASL**）进行客户端-服务器认证。您需要通过向测试客户端添加以下规范来显式设置安全提供程序：
- en: '[PRE25]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The next part is quite tricky. We need to determine the **Java Naming and Directory
    Interface** (**JNDI**) name of the EJB, for which we will need to look up the
    remote EJB. The JNDI name varies depending on whether the EJB is stateful or stateless.
    The following table outlines the syntax for both SLSBs and SFSBs:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分相当棘手。我们需要确定 EJB 的 **Java 命名和目录接口**（**JNDI**）名称，为此我们需要查找远程 EJB。JNDI 名称取决于
    EJB 是否有状态或无状态。以下表格概述了 SLSB 和 SFSB 的语法：
- en: '| EJB type | JNDI syntax |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| EJB 类型 | JNDI 语法 |'
- en: '| --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Stateless EJB | `ejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>`
    |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 无状态 EJB | `ejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>`
    |'
- en: '| Stateful EJB | `ejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>?stateful`
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 有状态 EJB | `ejb:<app-name>/<module-name>/<distinct-name>/<bean-name>!<fully-qualified-classname-of-the-remote-interface>?stateful`
    |'
- en: 'The following table bisects each of these properties:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格分别列出这些属性：
- en: '| Parameter | Description |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| 参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `app-name` | This is the application name and is used in the event that the
    application has been deployed as an Enterprise archive. It typically corresponds
    to the Enterprise archive name without `.ear`. Since we packed our application
    in a web archive, this parameter will not be used. |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `app-name` | 这是应用程序名称，在应用程序已作为企业存档部署的情况下使用。它通常对应于不带 `.ear` 的企业存档名称。由于我们将应用程序打包在
    Web 存档中，此参数将不会使用。|'
- en: '| `module-name` | This is the module within which the EJBs are contained. Since
    we deployed the application in a file named `chapter4-0.0.1-SNAPSHOT.war`, it
    corresponds to `chapter4-0.0.1-SNAPSHOT`. |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `module-name` | 这是包含 EJB 的模块。由于我们将应用程序部署在名为 `chapter4-0.0.1-SNAPSHOT.war`
    的文件中，它对应于 `chapter4-0.0.1-SNAPSHOT`。|'
- en: '| `distinct-name` | This is an optional name that can be assigned to distinguish
    between different EJB implementations. It''s not used in our example. |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `distinct-name` | 这是一个可选的名称，可以用来区分不同的 EJB 实现。在我们的例子中未使用。|'
- en: '| `bean-name` | This is the EJB name, which, by default, is the class name
    of the bean implementation class, in our case, `SingletonBeanRemoteImpl`. |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `bean-name` | 这是 EJB 名称，默认情况下，它是 EJB 实现类的类名，在我们的例子中，是 `SingletonBeanRemoteImpl`。|'
- en: '| `fully-qualified-classname-of-the-remote-interface` | This obviously corresponds
    to the fully qualified class name of the interface you are looking up, in our
    case, `com.packtpub.chapter4.ejb.SingletonBeanRemote`. |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `fully-qualified-classname-of-the-remote-interface` | 这显然对应于你正在查找的接口的完全限定类名，在我们的例子中，是`com.packtpub.chapter4.ejb.SingletonBeanRemote`。|'
- en: Note
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please notice that stateful EJBs require an additional `?stateful` parameter
    to be added to the JNDI lookup name.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，有状态的EJB需要在JNDI查找名称中添加一个额外的`?stateful`参数。
- en: 'With this information on the JNDI namespace, you will be ready to understand
    the client code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解JNDI命名空间的信息后，你将准备好理解客户端代码：
- en: '[PRE26]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: As you can see, the major complexity of the remote EJB client code is related
    to the JNDI lookup section. You might have noticed that in the highlighted section,
    we initialized the JNDI context with a property named `Context.URL_PKG_PREFIXES`
    to specify the list of package prefixes to be used when loading URL context factories.
    In our case, we set it to `org.jboss.ejb.client.naming` so that the JNDI API knows
    which classes are in charge of handling the `ejb:` namespace.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，远程EJB客户端代码的主要复杂性在于JNDI查找部分。你可能已经注意到，在突出显示的部分，我们使用名为`Context.URL_PKG_PREFIXES`的属性初始化了JNDI上下文，以指定在加载URL上下文工厂时要使用的包前缀列表。在我们的例子中，我们将其设置为`org.jboss.ejb.client.naming`，这样JNDI
    API就知道哪些类负责处理`ejb:`命名空间。
- en: Configuring the client using a properties file
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用属性文件配置客户端
- en: 'Finally, you might wonder how the client actually knows the server location
    where the remote EJBs are hosted. This can be solved by adding the following client-side
    property file named `jboss-ejb-client.properties` to the client classpath:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可能想知道客户端实际上是如何知道远程EJB托管的服务器位置的。这可以通过向客户端类路径中添加以下名为`jboss-ejb-client.properties`的客户端属性文件来解决：
- en: '[PRE27]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Within this file, you can specify a set of properties prefixed by `remote.connectionprovider.create.options`,
    which will be used during the remote connection. In our example, we just set the
    `org.xnio.Options.SSL_ENABLED` property to `false`, which means that a clear text
    transmission will be used to connect the client and server.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，你可以指定一组以`remote.connectionprovider.create.options`为前缀的属性，这些属性将在远程连接期间使用。在我们的例子中，我们只是将`org.xnio.Options.SSL_ENABLED`属性设置为`false`，这意味着将使用明文传输来连接客户端和服务器。
- en: The `remote.connections` property is used to specify a set of one or more connections
    that map to an EJB receiver. In our case, there is a single remote connection
    named `default`, which maps to the `localhost` and the remoting port `8080`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`remote.connections`属性用于指定一组一个或多个映射到EJB接收器的连接。在我们的例子中，有一个名为`default`的单个远程连接，它映射到`localhost`和远程端口`8080`。'
- en: Finally, we need to specify that an SASL anonymous connection will be used;
    otherwise, without an authentication, our connection will be refused.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要指定将使用SASL匿名连接；否则，如果没有认证，我们的连接将被拒绝。
- en: Configuring the client programmatically
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 程序化配置客户端
- en: 'Another way to configure the client''s connection properties is to configure
    them programmatically. Here, we create a `Properties` object and populate it with
    the same key/value pairs that are in the `jboss-ejb-client.properties` configuration
    file. The important parts of the code are highlighted in bold:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种配置客户端连接属性的方法是程序化配置。在这里，我们创建一个`Properties`对象，并用与`jboss-ejb-client.properties`配置文件中相同的键值对填充它。代码中的重要部分用粗体突出显示：
- en: '[PRE28]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Configuring data persistence
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置数据持久化
- en: We will now further enhance our application by storing the key/value pairs in
    a relational database instead of keeping them in memory. To do this, we will need
    to create a **persistence** **context**. Again, let me remind you that its purpose
    is not to teach the theory behind data persistence, but rather to show how to
    configure it within your applications.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将通过将键值对存储在关系数据库中而不是保留在内存中来进一步增强我们的应用程序。为此，我们需要创建一个**持久化** **上下文**。再次提醒你，它的目的不是教授数据持久化的理论，而是展示如何在应用程序中配置它。
- en: 'The persistence subsystem is included, by default, within all server configurations:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 持久化子系统默认包含在所有服务器配置中：
- en: '[PRE29]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The JPA module is not loaded by default in the application server. However,
    as soon as the application server detects that your application has `persistence.xml`
    or persistence annotations, the JPA module will be automatically started.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: JPA模块默认情况下不会在应用服务器中加载。然而，一旦应用服务器检测到你的应用程序包含`persistence.xml`或持久化注解，JPA模块将会自动启动。
- en: 'So, let''s add the JPA `persistence.xml` configuration file to our project,
    which will reference the data source used to map our entities to the database:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们将 JPA 的 `persistence.xml` 配置文件添加到我们的项目中，它将引用用于将我们的实体映射到数据库的数据源：
- en: '[PRE30]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The key attributes of this file are the persistence unit's `name`, which will
    identify its unique name, and the `jta-data-source`, which must match a valid
    datasource definition. In the earlier chapter, we defined this datasource bound
    to a MySQL database.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件的关键属性是持久化单元的 `name`，它将标识其唯一名称，以及 `jta-data-source`，它必须匹配有效的数据源定义。在早期章节中，我们定义了这个绑定到
    MySQL 数据库的数据源。
- en: Note
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `persistence.xml` file can specify either a JTA datasource or a non-JTA
    datasource. Within a Java EE environment, you have to use a JTA datasource (even
    when reading data without an active transaction).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`persistence.xml` 文件可以指定 JTA 数据源或非 JTA 数据源。在 Java EE 环境中，你必须使用 JTA 数据源（即使在没有活动事务的情况下读取数据）。'
- en: Finally, the `properties` element can contain any configuration property for
    the underlying persistence provider. Since WildFly uses Hibernate as the EJB persistence
    provider, you can pass any Hibernate options here.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`properties` 元素可以包含底层持久化提供者的任何配置属性。由于 WildFly 使用 Hibernate 作为 EJB 持久化提供者，你可以在其中传递任何
    Hibernate 选项。
- en: 'Once created, this file needs to be placed in the `META-INF` folder of your
    `source/main/resources` folder, as shown in the following screenshot:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，此文件需要放置在 `source/main/resources` 文件夹的 `META-INF` 文件夹中，如下面的截图所示：
- en: '![Configuring data persistence](img/6232OS_04_10.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![配置数据持久化](img/6232OS_04_10.jpg)'
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The real path of the persistence.xml file**'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '**持久化.xml 文件的实际路径**'
- en: Please note that the content of the `Eclipse src/main/resources` directory will
    be placed in the `WEB-INF/classes` directory of your web application when Maven
    builds it.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当 Maven 构建时，`Eclipse src/main/resources` 目录的内容将被放置在您的 Web 应用程序的 `WEB-INF/classes`
    目录中。
- en: Using a default datasource for the JPA subsystem
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为 JPA 子系统使用默认数据源
- en: In this example, we are referencing the datasource from within the `persistence.xml`
    file, thus following a canonical approach well-known to many developers.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们是从 `persistence.xml` 文件中引用数据源，因此遵循许多开发者都熟悉的规范方法。
- en: 'You can, however, choose a default datasource for all your JPA applications
    by adding the `default-datasource` element into the JPA subsystem:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可以通过在 JPA 子系统中添加 `default-datasource` 元素来为所有 JPA 应用程序选择默认数据源：
- en: '[PRE31]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This way, all JPA applications that haven't defined the `jta-data-source` element
    in `persistence.xml` will use the default datasource configured in the main server
    configuration file.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，所有尚未在 `persistence.xml` 文件中定义 `jta-data-source` 元素的 JPA 应用程序将使用主服务器配置文件中配置的默认数据源。
- en: Configuring entities
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置实体
- en: 'Once your persistence configuration is defined, the only change we need to
    make in our application is to add the `javax.persistence` annotations to our entity
    class. The `@Entity` annotation means that the class will be registered as a JPA
    entity:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦定义了持久化配置，我们只需要在我们的应用程序中添加 `javax.persistence` 注解到我们的实体类。`@Entity` 注解表示该类将被注册为
    JPA 实体：
- en: '[PRE32]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Our session bean needs to be changed, as well. Instead of reading and writing
    to the in-memory cache, we will write to both the cache and the database, and
    read only from the in-memory cache. When the application is restarted, the in-memory
    cache will be populated with data queried from the database. Although this is
    nothing fancy, for the sake of this demonstration, it is just fine:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的会话 Bean 也需要更改。我们将不再只向内存缓存读写，而是同时写入缓存和数据库，并且只从内存缓存中读取。当应用程序重新启动时，内存缓存将用从数据库查询的数据填充。尽管这并不复杂，但为了演示的目的，这完全是可以接受的：
- en: '[PRE33]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Sections of the preceding code have been highlighted to show you where the code
    has been modified to use data persistence. The most relevant section is the `@javax.persistence.PersistenceContext`
    annotation, which references a JPA context defined in the `persistence.xml` file.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码段已被突出显示，以显示代码是如何修改以使用数据持久化的。最相关的部分是 `@javax.persistence.PersistenceContext`
    注解，它引用了在 `persistence.xml` 文件中定义的 JPA 上下文。
- en: Once deployed, this application will persist data to your MySQL database.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署，此应用程序将数据持久化到您的 MySQL 数据库。
- en: Configuring persistence in other application archives
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在其他应用程序存档中配置持久化
- en: In our example, we created a Java EE 7 application that is made of web components
    and EJBs using a single web application archive. This is absolutely fine and expected,
    as Java EE allows the mixing and matching of frontend components and server-side
    components within a single web archive.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们创建了一个由 Web 组件和 EJB 组成的 Java EE 7 应用程序，使用单个 Web 应用程序存档。这是绝对正常且预期的，因为
    Java EE 允许在单个 Web 存档中混合和匹配前端组件和后端组件。
- en: You can, however, deploy an application where the web layer is separated from
    the business service layer. For example, suppose you were to deploy your entities
    in a separate JAR file; the correct place for the `persistence.xml` file would
    be beneath the `META-INF` folder of your JAR archive.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以部署一个应用程序，其中 Web 层与业务服务层分离。例如，假设您将实体部署在单独的 JAR 文件中；`persistence.xml` 文件的正确位置是在您的
    JAR 存档的 `META-INF` 文件夹下。
- en: Note
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To confirm, if you are placing your JPA entities inside a WAR file, the `persistence.xml`
    file should be placed in the `WEB-INF/classes/META-INF` folder. If you package
    your JPA entities within a JAR file inside a web application, you should place
    the `persistence.xml` file in the `META-INF` folder.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确认，如果您将您的 JPA 实体放置在 WAR 文件中，`persistence.xml` 文件应放置在 `WEB-INF/classes/META-INF`
    文件夹中。如果您在 Web 应用程序内部将 JPA 实体打包在一个 JAR 文件中，您应将 `persistence.xml` 文件放置在 `META-INF`
    文件夹中。
- en: 'Technically speaking, if you have multiple JAR files in your application, you
    can deploy the `persistence.xml` file in a single archive and refer to the persistence
    unit using the `jarName#unitName` notation. For example, this application''s persistence
    unit could be referenced from another JAR file using the following annotation:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术角度讲，如果您在应用程序中有多个 JAR 文件，您可以将 `persistence.xml` 文件部署在单个存档中，并使用 `jarName#unitName`
    语法引用持久化单元。例如，此应用程序的持久化单元可以通过以下注解从另一个 JAR 文件中引用：
- en: '[PRE34]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Switching to a different provider
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换到不同的提供商
- en: 'By default, WildFly 8.1 uses Hibernate 4.3.5 as a persistence provider. The
    Hibernate JARs are included under the `modules` folder in the `org.hibernate`
    path. If, however, your application requires a different version of Hibernate,
    such as 3.5, you can still bundle the JARs into your application by adding the
    dependency to your `pom.xml` file and setting the scope to `runtime`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，WildFly 8.1 使用 Hibernate 4.3.5 作为持久化提供者。Hibernate JAR 包含在 `org.hibernate`
    路径下的 `modules` 文件夹中。但是，如果您的应用程序需要 Hibernate 的不同版本，例如 3.5，您仍然可以通过在 `pom.xml` 文件中添加依赖项并将作用域设置为
    `runtime` 来将 JAR 包捆绑到您的应用程序中：
- en: '[PRE35]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Besides this, you need to set the `jboss.as.jpa.providerModule` property to
    `hibernate3-bundled` in your `persistence.xml` configuration file. The JPA deployer
    will detect the presence of a different version of the persistence provider and
    activate that version:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您需要在 `persistence.xml` 配置文件中将 `jboss.as.jpa.providerModule` 属性设置为 `hibernate3-bundled`。JPA
    部署程序将检测到持久化提供者的不同版本，并激活该版本：
- en: '[PRE36]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Using Jipijapa
  id: totrans-260
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 Jipijapa
- en: 'You can also use the Jipijapa project to simplify switching to a different
    JPA provider. If you use Jipijapa, you will need to ensure that your persistence
    provider is included as a runtime dependency in your `pom.xml` file, and you will
    also need to include the correct Jipijapa integration JAR file. To use Hibernate
    3, you will need to add the following dependency in `pom.xml`:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用 Jipijapa 项目简化切换到不同的 JPA 提供商。如果您使用 Jipijapa，您需要确保您的持久化提供者被包含在 `pom.xml`
    文件中的运行时依赖项中，并且您还需要包含正确的 Jipijapa 集成 JAR 文件。要使用 Hibernate 3，您需要在 `pom.xml` 中添加以下依赖项：
- en: '[PRE37]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: With Jipijapa, you can easily switch to a different version of Hibernate, or
    to a different ORM provider such as EclipseLink or OpenJPA. For more details on
    using the Jipijapa project, you can refer to the WildFly docs at [https://docs.jboss.org/author/display/WFLY8/JPA+Reference+Guide#JPAReferenceGuide-BackgroundontheJipijapaproject](https://docs.jboss.org/author/display/WFLY8/JPA+Reference+Guide#JPAReferenceGuide-BackgroundontheJipijapaproject).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Jipijapa，您可以轻松切换到 Hibernate 的不同版本，或者切换到不同的 ORM 提供商，例如 EclipseLink 或 OpenJPA。有关使用
    Jipijapa 项目的更多详细信息，您可以参考 WildFly 文档，网址为 [https://docs.jboss.org/author/display/WFLY8/JPA+Reference+Guide#JPAReferenceGuide-BackgroundontheJipijapaproject](https://docs.jboss.org/author/display/WFLY8/JPA+Reference+Guide#JPAReferenceGuide-BackgroundontheJipijapaproject)。
- en: Summary
  id: totrans-264
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the Undertow subsystem configuration, which is
    found within the main configuration file.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了 Undertow 子系统配置，该配置位于主配置文件中。
- en: 'The Undertow server configuration is broken into two main parts: server configuration,
    which is used to configure static resources, such as HTML pages, images, listeners,
    and hosts, and the servlet container configuration, which is used to configure
    dynamic resources such as JSPs.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: Undertow服务器配置分为两个主要部分：服务器配置，用于配置静态资源，例如HTML页面、图像、监听器和主机，以及Servlet容器配置，用于配置动态资源，例如JSP。
- en: We then went through an example application that demonstrated how to package
    and deploy a Java EE 7 web module on the application server.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们通过一个示例应用演示了如何在应用服务器上打包和部署Java EE 7 Web模块。
- en: Then, we discussed the JPA subsystem and showed you how to add data persistence
    to the initial example. We outlined the correct location of the `persistence.xml`
    file, which is required to be placed in the `WEB-INF/classes/META-INF` folder
    of your web application or in the `META-INF` folder of your JAR file.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们讨论了JPA子系统，并展示了如何将数据持久性添加到初始示例中。我们概述了`persistence.xml`文件的正确位置，该文件必须放置在您的Web应用的`WEB-INF/classes/META-INF`文件夹中，或者您的JAR文件的`META-INF`文件夹中。
- en: Having completed the application server standalone configuration, we will now
    move on to the next chapter and look at how to configure application server domains.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 完成应用服务器的独立配置后，我们现在将进入下一章，探讨如何配置应用服务器域。
