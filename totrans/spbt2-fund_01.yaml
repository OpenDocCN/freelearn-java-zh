- en: The Spring Project and Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 项目和框架
- en: The Spring Framework is a mature, enterprise-grade, and open source application
    development framework that provides a flexible and modern alternative to the official
    Java EE standard.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 框架是一个成熟、企业级和开源的应用程序开发框架，它提供了一个灵活且现代的替代方案，用于官方的 Java EE 标准。
- en: Spring Boot is a technology that allows developers to write Spring Framework-based
    applications while relying on best practices by providing convention over configuration
    and dependency management for Gradle and Maven to ensure that they have compatible
    versions of all libraries. This eliminates a lot of tasks that are required when
    writing enterprise applications or services. Spring Boot also addresses the issue
    of duplicating and plumbing code by offering a robust integration with other frameworks.
    Simultaneously, developers are able to diverge from its carefully crafted conventions
    when necessary.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 是一种技术，它允许开发者基于 Spring 框架编写应用程序，同时通过提供约定优于配置和 Gradle 及 Maven 的依赖管理来依靠最佳实践，确保它们拥有所有库的兼容版本。这消除了在编写企业应用程序或服务时所需的大量任务。Spring
    Boot 还通过提供与其他框架的强大集成来解决重复和管道代码的问题。同时，当需要时，开发者可以偏离其精心设计的约定。
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Describe the Spring Framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述 Spring 框架
- en: Construct and run a simple project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建并运行一个简单的项目
- en: Utilize the application context of Spring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用 Spring 的应用程序上下文
- en: Use the Project Lombok library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Project Lombok 库
- en: Introduction to the Spring Framework
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 框架简介
- en: The Spring Framework is an open source application framework that can be used
    by any Java application. It provides an Inversion of Control (IoC) container for
    the Java platform. In this section, we will look at an overview of the Spring
    project itself and will be introduced to the basic building blocks of a Spring
    application. You are going to learn about the history of the Spring Framework,
    the key principles that Spring focuses on, Dependency Injection and Inversion
    of Control. Lastly, we will examine the Spring ecosystem.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 框架是一个开源的应用程序框架，可以被任何 Java 应用程序使用。它为 Java 平台提供了一个控制反转（IoC）容器。在本节中，我们将查看
    Spring 项目的概述，并介绍 Spring 应用程序的基本构建块。你将了解 Spring 框架的历史、Spring 重点关注的关键原则、依赖注入和控制反转。最后，我们将探讨
    Spring 生态系统。
- en: A Short History
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简短的历史
- en: The **Spring Framework** was created by Rod Johnson in 2003 as an alternative
    to the heavyweight and slow J2EE 1.4 stack. The current steward of the project
    is Pivotal Software, which employs the core developers and steers the development
    of the project.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring 框架**是由 Rod Johnson 在 2003 年创建的，作为重型且缓慢的 J2EE 1.4 堆栈的替代品。该项目的当前负责人是
    Pivotal Software，该公司雇佣了核心开发者并指导项目的开发。'
- en: The framework itself is source and has a large number of contributors that help
    in the development of the various modules. But we will come to that shortly
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 框架本身是源代码，有大量的贡献者帮助开发各种模块。但我们会很快谈到这一点。
- en: Due to its focus on productivity, Spring gained a lot of market share. Zeroturnaround,
    a company that creates Java development tools, did a survey in 2016 and 36% of
    the participants wanted to convert their project to Spring, while only 14% wanted
    to convert to JEE. It is hard to find concrete market share data for JEE versus
    Spring, but in Java developer surveys, Spring is usually far beyond 50% while
    JEE is far below. This is also reflected in job listings, where Spring has trumped
    JEE for years.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其专注于生产力，Spring 获得了大量的市场份额。Zeroturnaround 公司，一家创建 Java 开发工具的公司，在 2016 年进行了一项调查，其中
    36% 的参与者希望将他们的项目转换为 Spring，而只有 14% 的人希望转换为 JEE。很难找到 JEE 与 Spring 的具体市场份额数据，但在
    Java 开发者调查中，Spring 通常远超过 50%，而 JEE 则远低于这个比例。这一点也反映在职位列表中，Spring 多年来一直胜过 JEE。
- en: Spring is used worldwide by companies of all sizes. Netflix is, for example,
    very public about their usage of Spring and they even provide a large part of
    the Spring Cloud stack.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 被全球所有规模的公司使用。例如，Netflix 对他们使用 Spring 非常公开，他们甚至提供了 Spring Cloud 栈的大部分内容。
- en: For a little more background on the Spring Framework versions, you can read
    the entry at [https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于 Spring 框架版本的背景信息，你可以阅读[https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions)上的条目。
- en: To get a feel for where Spring is used, you can also have a look at [https://stackshare.io/spring/in-stacks](https://stackshare.io/spring/in-stacks).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解 Spring 的使用情况，你还可以查看 [https://stackshare.io/spring/in-stacks](https://stackshare.io/spring/in-stacks)。
- en: Spring Key Principles
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 核心原则
- en: 'The development of the Spring Framework is based on a few principles, which
    have been consistent factors since its inception:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 框架的开发基于几个原则，这些原则自其诞生以来一直是一致的：
- en: '**Inversion of Control** and **Dependency Injection** builds the core of the
    whole framework.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制反转**和**依赖注入**构成了整个框架的核心。'
- en: '**Modularity** allows you to plug in different implementations such as logging
    framework templating engines and internal code, which creates proxies for aspect-oriented
    programming.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**允许你插入不同的实现，例如日志框架模板引擎和内部代码，这为面向方面的编程创建了代理。'
- en: '**Testability** enables the whole project and is geared toward the creation
    of testable application code.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可测试性**使整个项目成为可能，并旨在创建可测试的应用程序代码。'
- en: '**Convenience** is offered to developers in many aspects and makes developers
    productive without being too intrusive.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在许多方面为开发者提供了**便利**，使开发者无需过多干扰就能提高生产力。
- en: J2EE Pain Points
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: J2EE 痛点
- en: 'The official J2EE standard received a lot of criticism from the developer community
    within the last two years. The main problems were as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去两年中，官方 J2EE 标准受到了开发者社区的很多批评。主要问题如下：
- en: The standard was created by a committee, which led to a lot of features that
    were hard to use.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准是由一个委员会制定的，这导致了许多难以使用的功能。
- en: The committee was slow in adopting new technologies, which led to many projects
    that were developed outside of the J2EE scope to serve these needs.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 委员会缓慢地采用新技术，这导致许多项目在 J2EE 范围之外开发，以满足这些需求。
- en: The application servers were very expensive and relatively slow in adopting
    the new standards.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务器非常昂贵，并且相对较慢地采用新标准。
- en: The amount of code that had to be written was way too high in the J2EE 1.0 -
    1.4 days.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 J2EE 1.0 - 1.4 时代，需要编写的代码量非常高。
- en: A huge amount of XML documents were required to configure the application. This
    either led to errors or required an IDE, which helped to keep everything in sync.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置应用程序需要大量的 XML 文档。这要么导致错误，要么需要 IDE，以帮助保持一切同步。
- en: Due to the "specification first" approach, many features were very complicated
    to use, which led to mistakes or made people abandon certain features completely.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于“先规范”的方法，许多功能使用起来非常复杂，这导致了错误或让人们完全放弃某些功能。
- en: Spring as a Counterpart for J2EE
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring 作为 J2EE 的替代品
- en: 'Rod Johnson wanted to change the way that J2EE forced the people to take their
    coding approach, so he deliberately went the other way in many aspects:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Rod Johnson 想要改变 J2EE 强迫人们采取的编码方式，因此在许多方面故意采取了相反的做法：
- en: In contrast to the ivory tower approach, Spring uses "code first", which has
    later been adopted in the Java community and committees.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与象牙塔方法相反，Spring 采用“先编码”的方式，这一方法后来也被 Java 社区和委员会所采纳。
- en: Spring is very modular and extensible, so new technologies are usually added
    using modules, which are only additional JAR files.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 非常模块化和可扩展，因此通常使用模块添加新技术，这些模块只是额外的 JAR 文件。
- en: Spring didn't want to wait for the application servers to add features, so a
    Spring application included everything that was not provided by the application
    server or servlet container.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring 不想等待应用服务器添加功能，因此 Spring 应用包含了应用服务器或 servlet 容器未提供的一切。
- en: In contrast to J2EE, Spring always has less boilerplate code to achieve the
    same functionality. This advantage is now less relevant because the current versions
    of JavaEE are heavily inspired by Spring and copied many of its concepts.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 J2EE 相比，Spring 总是具有更少的样板代码来实现相同的功能。这种优势现在不再那么相关，因为当前版本的 JavaEE 受 Spring 启发很大，并复制了许多其概念。
- en: In the beginning, Spring also used XML for its configuration, because it was
    considered state of the art. However, they started moving to annotations and Java-based
    configuration when Java 1.5 became available.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在最初，Spring 也使用 XML 进行其配置，因为那时被认为是最高水平。然而，当 Java 1.5 可用时，他们开始转向注解和基于 Java 的配置。
- en: While it's still hard to get the source code of some JavaEE libraries, Spring
    always provided source JARs and allowed anyone to peek into the well-designed
    framework if necessary.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然获取一些 JavaEE 库的源代码仍然困难，但 Spring 总是提供了源 JAR 文件，并允许任何人在必要时查看精心设计的框架。
- en: Inversion of Control and Dependency Injection
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制反转和依赖注入
- en: '**Inversion of Control** (**IoC**) is a paradigm that defines how the application
    is written on a very low level. It basically flips the control flow, and your
    application code reacts to events triggered by the application framework.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制反转**（**IoC**）是一种定义应用程序在非常低级别上如何编写的范例。它基本上翻转了控制流，您的应用程序代码对由应用程序框架触发的事件做出反应。'
- en: This overlaps with the **Dependency Inversion** (**DI**) pattern, which is the
    broader version of Dependency Injection. When your application uses Dependency
    Injection, you don't create instances of important classes yourself; you let the
    container create the instances or provide you with existing ones. Especially when
    using interfaces, you are able to decouple components of your application. This
    means that you have parts that don't have direct dependencies on each other.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这与**依赖倒置**（**DI**）模式重叠，它是依赖注入的更广泛版本。当您的应用程序使用依赖注入时，您不会自己创建重要类的实例；您让容器创建实例或提供现有的实例。特别是当使用接口时，您能够解耦应用程序的组件。这意味着您有部分之间没有直接依赖关系。
- en: The fact that your application is reacting instead of controlling everything
    tightly helps to decouple parts of your application. Now, you have code that depends
    on the framework and much less on its other parts. This leads to less coupling
    and thus better maintainable and testable code. IoC is also called the Hollywood
    Principle with the slogan "Don't call us, we'll call you", which perfectly describes
    what it is.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '您的应用程序做出反应而不是严格控制一切的事实有助于解耦应用程序的各个部分。现在，您有依赖于框架而不是其其他部分的代码。这导致耦合度降低，因此代码更易于维护和测试。IoC也被称为好莱坞原则，口号是“别叫我们，我们会叫你”，这完美地描述了它是什么。 '
- en: For a little more background on the Spring Framework, you can read the article
    at "TheServerSide", which is a large site related to Java and software development,
    at [http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection](http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于Spring框架的背景信息，您可以阅读"TheServerSide"网站上的文章，这是一个与Java和软件开发相关的大型网站，链接为[http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection](http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection)。
- en: Inversion of Control and Dependency Injection Overview
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制反转和依赖注入概述
- en: 'Take a look at the following table that highlights the main concepts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下表格，它突出了主要概念：
- en: '![](img/fb3a289e-7ff0-44db-a444-6119634c183d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb3a289e-7ff0-44db-a444-6119634c183d.png)'
- en: For a little more background on the problems of a God object, you can read the
    entry at [https://www.c-sharpcorner.com/article/godobject-a-code-smell/](https://www.c-sharpcorner.com/article/godobject-a-code-smell/).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 想要了解更多关于上帝对象问题的背景信息，您可以阅读[https://www.c-sharpcorner.com/article/godobject-a-code-smell/](https://www.c-sharpcorner.com/article/godobject-a-code-smell/)上的条目。
- en: The Spring Framework
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring框架
- en: 'The building blocks of a typical Spring application look like this:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 典型Spring应用程序的构建块看起来像这样：
- en: The core container that controls the lifecycle of the application and contains
    the application context, which contains the instances of the classes that are
    managed by Spring.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心容器控制应用程序的生命周期，并包含应用程序上下文，其中包含由Spring管理的类的实例。
- en: Then, there are a number of modules that shape how the control flow in your
    application is triggered.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，有多个模块决定了您的应用程序中的控制流如何被触发。
- en: 'For example: Spring MVC, which is among other things responsible for dispatching
    requests to special classes that you usually write, which handle HTTP requests.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如：Spring MVC，它负责将请求分发到您通常编写的特殊类，这些类处理HTTP请求。
- en: Spring messaging is used to process and send messages between systems.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring消息传递用于在系统之间处理和发送消息。
- en: Scheduling is able to execute methods based on time-related events. For example;
    you have to execute a cleanup job every day at midnight.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 调度可以根据时间相关的事件执行方法。例如；您必须每天午夜执行清理任务。
- en: Spring Integration is able to query or fetch data from other systems using file
    transfers to process it.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring集成能够通过文件传输查询或获取其他系统的数据以进行处理。
- en: Your code is called from these modules to serve its purpose.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码将从这些模块中被调用以实现其功能。
- en: 'During or after your code execution, you often prepare data that needs to be
    stored in a database or is returned to the user or caller. So, other parts of
    a Spring application are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的代码执行期间或之后，您通常会准备需要存储在数据库中或返回给用户或调用者的数据。因此，Spring应用程序的其他部分如下：
- en: The view renderer, which takes prepared data and renders it as an HTML page,
    for example.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图渲染器，它将准备好的数据渲染为HTML页面，例如。
- en: '**Object** (**un-**)**marshaling** is the process of transforming incoming
    or outgoing data into another form. This is usually the transformation from and
    to XML or JSON, but other formats are possible as well.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象**（**非**）**序列化**是将传入或传出的数据转换为另一种形式的过程。这通常是转换为XML或JSON，但也可能转换为其他格式。'
- en: Depending on the type of application you write, there are also other modules
    that Spring offers to make software development easier.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据你编写的应用程序类型，Spring还提供了其他模块，以使软件开发更加容易。
- en: The Spring Ecosystem
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring生态系统
- en: The modularity of Spring led to the creation of many modules in the last 15+
    years. Some have been retired, but the official homepage lists 23 main projects,
    and some of them even have between five and 10 sub-projects.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Spring的模块化在过去15+年里导致了众多模块的创建。其中一些已经退役，但官方主页列出了23个主要项目，其中一些甚至有5到10个子项目。
- en: This means that, for everything you want to do, there is a good chance that
    there is a Spring module that can assist you. As a result, you can concentrate
    on the business objectives instead of writing the 100th message passing framework
    or other foundational aspects. Of course, this also means that it is very easy
    to get lost in the sea of projects and dependencies that have to be added and
    configured.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着，对于你想做的每一件事，有很大可能性存在一个Spring模块可以帮助你。因此，你可以专注于业务目标，而不是编写第100个消息传递框架或其他基础方面。当然，这也意味着很容易迷失在需要添加和配置的项目和依赖关系的海洋中。
- en: This was one of the big concerns when people spoke about Spring a few years
    ago. It required a lot of configuration and the setup of a new project took a
    long time until everything was working as expected.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在几年前人们谈论Spring时的一大担忧。它需要大量的配置，并且直到一切按预期工作，设置新项目需要很长时间。
- en: Spring Boot Features
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot特性
- en: 'This is where Spring Boot rushes in to save the day. Spring Boot is a regular
    Spring project that aims to make the development experience much more pleasant.
    This is achieved by relying heavily on the following:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Spring Boot冲进来拯救世界的时候。Spring Boot是一个常规的Spring项目，旨在使开发体验更加愉快。这是通过大量依赖以下内容来实现的：
- en: Convention over configuration
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 契约优于配置
- en: Auto-detection of features
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动检测功能
- en: Dependency management to minimize the pain to find compatible versions of all
    libraries
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖管理以最小化寻找所有库兼容版本时的痛苦
- en: The focus is on providing production-ready features without any code generation.
    This enables you to write simple applications that could be exposed to the internet
    within minutes.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 重点在于提供生产就绪功能，而不进行任何代码生成。这使得你能够在几分钟内编写可以暴露给互联网的简单应用程序。
- en: Bootstrapping
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引导启动
- en: We are going to create the first Spring Boot project in this section by using
    the Spring project generator called **Spring Initializr**. Then, we will have
    a look at the generated code and start the application for the first time.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过使用名为**Spring Initializr**的Spring项目生成器来创建第一个Spring Boot项目。然后，我们将查看生成的代码并首次启动应用程序。
- en: Spring Initializr
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Initializr
- en: The Spring Initializr project began in 2013\. Today, it supports Maven and Gradle
    projects, written in Java, Kotlin, or Groovy. The target platforms are JDK 7 up
    to 9 at the moment. The generator is capable of creating Spring Boot 1.x or 2.x
    projects.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Initializr项目始于2013年。如今，它支持Java、Kotlin或Groovy编写的Maven和Gradle项目。目前的目标平台是JDK
    7至9。生成器能够创建Spring Boot 1.x或2.x项目。
- en: When you use the project creation wizard in your IDE for a Spring Boot project,
    it is likely that it uses `start.spring.io`, which is the website of the Spring
    Initializr. IntelliJ and Eclipse both have built-in support for the generator.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在IDE中使用Spring Boot项目的项目创建向导时，它很可能会使用`start.spring.io`，这是Spring Initializr的网站。IntelliJ和Eclipse都内置了对生成器的支持。
- en: Creating the First Spring Initializr Project
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建第一个Spring Initializr项目
- en: 'The aim is to create a project using the Spring Initializr. After covering
    this, you will have generated a simple Spring Boot application that can be used
    as a starting point for further development. The steps for completion are as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是使用Spring Initializr创建一个项目。在完成这部分内容后，你将生成一个简单的Spring Boot应用程序，可以作为进一步开发的起点。完成步骤如下：
- en: Open `start.spring.io`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`start.spring.io`。
- en: Create a simple **Maven project** with **Java** and Spring Boot **2.0.5**.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的**Maven项目**，使用**Java**和Spring Boot **2.0.5**。
- en: 'Enter the following details:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下详细信息：
- en: 'Group: `com.packt.springboot`'
  id: totrans-81
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '组: `com.packt.springboot`'
- en: 'Artifact: `blogmania`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '艺术品: `blogmania`'
- en: 'Take a look at the following screenshot:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![](img/bcef0f46-1cb7-4972-95e6-1d9bd18faede.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/bcef0f46-1cb7-4972-95e6-1d9bd18faede.png)'
- en: Download and extract the project.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并解压项目。
- en: Don't add dependencies for now. However, you can click on the Switch to the
    full version link at the bottom of the page to display the number of available
    dependencies. You can fill out the name (**BlogMania**) and description (**Self-hosted
    blogging made easy**) in the full version, if you like.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不要添加依赖项。但是，您可以点击页面底部的“切换到完整版本”链接以显示可用的依赖项数量。如果您喜欢，可以在完整版本中填写名称（**BlogMania**）和描述（**Self-hosted
    blogging made easy**）。
- en: Examining the Project in the IDE
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 IDE 中检查项目
- en: 'The aim is to open the IDE in order and examine important parts of the generated
    project. With this sub-section, you will have imported and examined the newly
    created Spring Boot application. The steps for completion are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是按照顺序打开 IDE 并检查生成的项目的重要部分。通过本节，您将已导入并检查了新创建的 Spring Boot 应用程序。完成步骤如下：
- en: Open the project using IntelliJ IDE.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 IntelliJ IDE 打开项目。
- en: Open IntelliJ.
  id: totrans-90
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 IntelliJ。
- en: Use the Menu or Starter Screen to open `pom.xml` as a new project.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用菜单或启动屏幕以新项目的方式打开 `pom.xml`。
- en: 'Open `pom.xml` in the project pane on the left after the import. Have a look
    at these fragments in the file:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入后，在左侧的项目面板中打开 `pom.xml`。查看文件中的以下片段：
- en: '`<packaging>jar</packaging>`: The application will be built as a JAR file.
    The Spring Boot build plugin will create the remaining assets to make it executable.'
  id: totrans-93
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<packaging>jar</packaging>`: 应用程序将被构建为 JAR 文件。Spring Boot 构建插件将创建剩余的资产以使其可执行。'
- en: '`<parent> <groupId>org.springframework.boot</`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<parent> <groupId>org.springframework.boot</`'
- en: '`groupId> <artifactId>spring-boot-starter-parent</`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`groupId> <artifactId>spring-boot-starter-parent</`'
- en: '`artifactId> … </parent>`: Spring Boot applications usually have spring-boot-starter-parent
    configured as their parent POM, which provides a lot of preconfiguration of dependencies
    for the build process of the project.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`artifactId> … </parent>`: Spring Boot 应用程序通常将 spring-boot-starter-parent 配置为其父
    POM，它为项目的构建过程提供了大量的预配置依赖项。'
- en: '`<dependency> <groupId>org.springframework.boot</`'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<dependency> <groupId>org.springframework.boot</`'
- en: '`groupId> <artifactId>spring-boot-starter</artifactId></dependency>`: The only
    real dependency is this starter, which will import the Spring Framework and more
    Spring Boot-related dependencies (37 in total, which includes test dependencies
    as well).'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`groupId> <artifactId>spring-boot-starter</artifactId></dependency>`: 唯一的真正依赖项是这个启动器，它将导入
    Spring 框架和更多与 Spring Boot 相关的依赖项（总共 37 个，包括测试依赖项）。'
- en: '`<plugin> <groupId>org.springframework.boot</`'
  id: totrans-99
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<plugin> <groupId>org.springframework.boot</`'
- en: '`groupId> <artifactId>spring-boot-maven-plugin</`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`groupId> <artifactId>spring-boot-maven-plugin</`'
- en: '`artifactId> </plugin>`: This build plugin is responsible for creating the
    executable JAR file and to embed all the dependencies into this single file.'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`artifactId> </plugin>`: 此构建插件负责创建可执行的 JAR 文件并将所有依赖项嵌入到这个单一文件中。'
- en: 'Open `src/main/java/BlogManiaApplication.java`. Have a look at these fragments
    in the file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `src/main/java/BlogManiaApplication.java`。查看文件中的以下片段：
- en: '`@SpringBootApplication`: This annotation marks the project as a Spring Boot
    application and tells Spring that this is the main class of this application.
    Spring Boot scans the classpath for Beans and other classes of interest, and by
    default it scans every package below the main application class.'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@SpringBootApplication`: 这个注解将项目标记为 Spring Boot 应用程序，并告诉 Spring 这将是应用程序的主类。Spring
    Boot 会扫描类路径以查找 Beans 和其他感兴趣的类，默认情况下，它会扫描主应用程序类以下的每个包。'
- en: '`public static void main(String[] args)`'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args)`'
- en: '`{ SpringApplication.run(BlogManiaApplication.class, args); }`: This is the
    main method that is called from the JVM when the application starts. `SpringApplication.run(...)`
    initializes the application and the method call terminates once the Spring context
    is up. This means that you can have code after this call. The application itself
    terminates when the Spring context shuts down or the application is terminated
    from the outside by the operating system. Go to [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz)
    to access the code for the `BlogManiaApplication.java` file.'
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{ SpringApplication.run(BlogManiaApplication.class, args); }`：这是当应用程序启动时 JVM
    调用的主方法。`SpringApplication.run(...)` 初始化应用程序，并且一旦 Spring 上下文启动，方法调用就会终止。这意味着您可以在调用之后有代码。应用程序本身在
    Spring 上下文关闭或由操作系统从外部终止时终止。访问 [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz)
    以获取 `BlogManiaApplication.java` 文件的代码。'
- en: Running a Project with Different Options
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同选项运行项目
- en: 'The aim is to examine the various options to run the project. With this sub-section,
    you will have started the newly created Spring Boot application within IntelliJ
    or by using Maven. The steps for completion are as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是检查运行项目的各种选项。通过本小节，您将在 IntelliJ 或使用 Maven 中启动新创建的 Spring Boot 应用程序。完成步骤如下：
- en: 'To run the application, you have multiple options:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 运行应用程序有多种选择：
- en: 'In the Terminal:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中：
- en: Go to the project directory.
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到项目目录。
- en: 'Execute the following command:'
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: '[PRE0]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Take a look at the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![](img/b954e7e8-8a3b-4d93-8f47-761b25101c40.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b954e7e8-8a3b-4d93-8f47-761b25101c40.png)'
- en: 'Execute the following command:'
  id: totrans-115
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令：
- en: 'In the IDE with Maven support:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在支持 Maven 的 IDE 中：
- en: Go to the Maven Tool Window.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 Maven 工具窗口。
- en: Open `BlogMania/Plugins/spring-boot`.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `BlogMania/Plugins/spring-boot`。
- en: Click `spring-boot:run`.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `spring-boot:run`。
- en: 'Take a look at the following screenshot:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![](img/8104b205-7982-421e-888a-c3280da53015.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8104b205-7982-421e-888a-c3280da53015.png)'
- en: 'In the IDE using standard Java features:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用标准 Java 功能的 IDE 中：
- en: Open `BlogManiaApplication.java`.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `BlogManiaApplication.java`。
- en: Right-click the main method and select Run.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击主方法并选择运行。
- en: 'Take a look at the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![](img/032bcd4c-0754-4392-9f3b-8c4d2d5adfcd.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/032bcd4c-0754-4392-9f3b-8c4d2d5adfcd.png)'
- en: In the IntelliJ Ultimate version, you also have a Spring **Run-Dashboard**,
    which offers a lot of nice features to start and monitors Spring applications
    in your IDE.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ Ultimate 版本中，您还有一个 Spring **运行仪表板**，它提供了许多在 IDE 中启动和监控 Spring 应用程序的好功能。
- en: This will start the application and you'll see the Spring Boot banner and some
    additional output from the Framework before the application terminates.
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将启动应用程序，您将看到 Spring Boot 标签和一些在应用程序终止前的框架附加输出。
- en: The application terminates almost immediately since there is nothing to do.
    "Plain Spring" doesn't have a main loop that prevents the application from terminating.
    As soon as you add the Spring MVC dependencies, for example, the application will
    start up and wait for requests instead of stopping right away.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序几乎立即终止，因为没有要执行的操作。"纯 Spring" 没有防止应用程序终止的主循环。例如，一旦添加了 Spring MVC 依赖项，应用程序将启动并等待请求，而不是立即停止。
- en: Go to [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz) to access the code for
    the `BlogManiaApplication.java` file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz) 以获取 `BlogManiaApplication.java`
    文件的代码。
- en: The Application Context
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序上下文
- en: In this section, we are going to explore the building blocks of Spring, how
    they are discovered by Spring, and how we can define them by hand, if necessary.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨 Spring 的构建块，它们是如何被 Spring 发现的，以及如果需要，我们如何手动定义它们。
- en: Spring Bean
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Bean
- en: A Spring Bean is itself just a simple Java object, but it is the central building
    block in a Spring application. Its lifecycle is managed by the Spring IoC container.
    This means that it is created and controlled by the container during its lifetime.
    The main interface for the container is called `BeanFactory`, which is implemented
    by the `ApplicationContext`.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Bean 本身只是一个简单的 Java 对象，但它是 Spring 应用程序中的核心构建块。其生命周期由 Spring IoC 容器管理。这意味着在其生命周期内，它由容器创建和控制。容器的主体接口称为
    `BeanFactory`，它由 `ApplicationContext` 实现。
- en: You can make a class a Spring Bean by declaring it as such. This is usually
    done by adding an annotation such as `@Component` to the class. Spring will find
    the class, create instances, and configure it based on what you have configured.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过将类声明为Spring Bean来使其成为Spring Bean。这通常是通过向类中添加注解（如`@Component`）来完成的。Spring将找到该类，创建实例，并根据你的配置进行配置。
- en: Spring Bean Stereotypes
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Bean类型
- en: There are a number of annotations that you can use to mark a class a Spring
    Bean. They are used to convey a special meaning of the class. By default, some
    special types are available such as `@Component`, `@Service`, `@Repository`, and
    `@Controller`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多注解来标记一个类为Spring Bean。它们用于传达类的特殊含义。默认情况下，一些特殊类型可用，如`@Component`、`@Service`、`@Repository`和`@Controller`。
- en: When you put these on a class, it will be treated as a Spring Bean and one instance
    will be created when the application starts. Its dependencies are set according
    to your configuration.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将这些注解放在一个类上时，它将被视为Spring Bean，并在应用程序启动时创建一个实例。它的依赖关系将根据你的配置设置。
- en: 'In general, it doesn''t matter whether you are using `@Service` or `@Component`
    on a class. It''s purely cosmetic and helps you to better understand what a class
    is supposed to do, because there is a semantic difference between these. Let''s
    go over these annotations:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你使用`@Service`或`@Component`注解在类上没有关系。这纯粹是装饰性的，有助于你更好地理解类应该做什么，因为它们之间存在语义差异。让我们回顾一下这些注解：
- en: '`@Controller` marks classes in the context of web applications as something
    that handles requests. This will be covered in a later chapter.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Controller`标记在Web应用程序上下文中的类，表示处理请求。这将在后面的章节中介绍。'
- en: '`@Service` marks classes that are considered services, which means that they
    often provide business functionality for other services or controllers.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Service`标记被认为是服务的类，这意味着它们通常为其他服务或控制器提供业务功能。'
- en: '`@Repository` marks a class as a kind of data provider. A repository, for example,
    provides access to data by fetching data from a database, external web services,
    or something similar.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Repository`将一个类标记为一种数据提供者。例如，一个仓库通过从数据库、外部Web服务或类似的地方获取数据来提供数据访问。'
- en: '`@Component` usually marks helper classes that don''t fit into one of the other
    categories.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Component`通常标记那些不适合其他类别的辅助类。'
- en: These types are the default building blocks of many-layered architectures.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型是多层架构的默认构建块。
- en: Exploring Spring Beans
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Spring Beans
- en: 'The aim is to enhance your first Spring Boot application by adding a few Beans
    to it. With this sub-section, you have seen the Spring context in action and you
    have seen how you can access the Spring context from the main method. The steps
    for completion are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 目标是通过向其中添加一些Beans来增强你的第一个Spring Boot应用程序。通过本节，你已经看到了Spring上下文的作用，并看到了如何从主方法中访问Spring上下文。完成步骤如下：
- en: Display the existing Beans.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示现有的Beans。
- en: Open the IDE with the imported project from earlier sub-sections.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用前面小节中导入的项目打开IDE。
- en: Open the `BlogmaniaApplication.java` file.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`BlogmaniaApplication.java`文件。
- en: Assign the result of `SpringApplication.run` to a variable called context.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SpringApplication.run`的结果分配给一个名为context的变量。
- en: Iterate over all defined Bean names that you can access by the `getBeanDefinitionNames()`
    method of the context object in the next line.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行中，通过上下文对象的`getBeanDefinitionNames()`方法遍历所有定义的Bean名称，你可以访问这些Bean名称。
- en: Run the application by executing the main method.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行主方法来运行应用程序。
- en: Go to [https://bit.ly/2NaOkvJ](https://bit.ly/2NaOkvJ) to access the code for
    the `BlogManiaApplication.java` file.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 前往[https://bit.ly/2NaOkvJ](https://bit.ly/2NaOkvJ)访问`BlogManiaApplication.java`文件的代码。
- en: You can see a number of Beans that are created by default. One of them is the
    `blogmaniaApplication`. By default, Beans are named like the class, beginning
    with a lowercase character.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到默认创建的许多Beans。其中之一是`blogmaniaApplication`。默认情况下，Beans的命名与类名相同，以小写字母开头。
- en: 'This is how it could look:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的样子：
- en: '[PRE1]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Add new Beans to the context.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上下文中添加新的Beans。
- en: Create a class called `BlogService` as a public class in the same package as
    `BlogmaniaApplication.java`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`BlogmaniaApplication.java`相同的包中创建一个名为`BlogService`的公共类。
- en: Create a class called `BlogRepository` as a public class in the same package
    as `BlogmaniaApplication.java`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`BlogmaniaApplication.java`相同的包中创建一个名为`BlogRepository`的公共类。
- en: Add `@Repository` before the `public class …` on `BlogRepository.java`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BlogRepository.java`的`public class …`之前添加`@Repository`。
- en: Run the application again.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行应用程序。
- en: You will notice that there is a new Bean named `blogRepository`, but no Bean
    named `blogService`, because we have not marked the class as a Spring Bean yet.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到有一个名为 `blogRepository` 的新Bean，但没有名为 `blogService` 的Bean，因为我们还没有将类标记为Spring
    Bean。
- en: Configuration Classes
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置类
- en: Another way to declare Spring Beans is via **configuration classes**. These
    are used for more complicated Beans that require you to run code to initialize
    the Bean. Examples are reading configuration from somewhere or just a complicated
    setup to fulfill the dependencies. This is also used to create Beans from classes
    that are not under your control, so you can't add the annotations to them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 声明Spring Bean的另一种方式是通过**配置类**。这些用于更复杂的Bean，需要运行代码来初始化Bean。例如，从某处读取配置或进行复杂的设置以满足依赖项。这也用于从不在你控制之下的类创建Bean，因此你不能向它们添加注解。
- en: You can create a Bean by having a public method in a configuration class that
    is annotated with `@Bean` and returns an instance of your class.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在配置类中有一个被 `@Bean` 注解的公共方法并返回你的类的一个实例来创建一个Bean。
- en: 'The Bean will be named after the name of the method by default, while an annotated
    class will, by default, result in a Bean named like the class with the lowercase
    first character:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Bean的名称将与方法的名称相同，而注解的类将默认生成一个以类名开头字母小写的Bean名称：
- en: '[PRE2]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Spring will make sure that no matter how often you call a `@Bean`-annotated
    method of a configuration class, it will return the correct Bean instance (under
    the hood, the result is computed only once).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Spring 将确保无论你调用配置类中 `@Bean` 注解的方法多少次，它都会返回正确的Bean实例（在幕后，结果只计算一次）。
- en: You can also define something with `@Bean` in any Java class and it will be
    put in the context. Keep in mind that these are "Beans-lite", and many mechanisms
    won't work on these.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在任何Java类中使用 `@Bean` 定义一些内容，并将其放入上下文中。请注意，这些是“轻量级Bean”，许多机制在这些Bean上可能不会工作。
- en: Classpath Scanning
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类路径扫描
- en: When people say Spring does magic, they often mean this mechanism. By default,
    Spring Boot scans the classpath based on the package the application class is
    in, or to be exact, the class that is annotated by `@SpringBootApplication`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们说Spring做了魔法，他们通常指的是这个机制。默认情况下，Spring Boot根据应用程序类所在的包来扫描类路径，或者更确切地说，是带有 `@SpringBootApplication`
    注解的类。
- en: For example, it searches for known stereotypes (annotations) such as component,
    service, or repository or factory methods such as the `@Bean`-methods. The search
    covers the classpath, so dependencies that are added to the project are scanned
    as well!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，它会搜索已知的 stereotypes（注解）如 component、service 或 repository，或者搜索 factory 方法如
    `@Bean` 方法。搜索覆盖了类路径，因此也会扫描添加到项目中的依赖项！
- en: In this example, `BlogmaniaApplication` is in the package `com.packt.springboot.blogmania`
    folder, so the package itself and all packages below it are scanned. Everything
    that is in `com.packt.springboot.that` and below is not scanned. You can modify
    the default behavior by adding `@ComponentScan` with the correct parameters if
    required, but most of the time, this shouldn't be necessary.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`BlogmaniaApplication` 位于 `com.packt.springboot.blogmania` 包的文件夹中，因此会扫描该包及其所有子包。`com.packt.springboot.that`
    及其以下的所有内容都不会被扫描。如果需要，你可以通过添加带有正确参数的 `@ComponentScan` 来修改默认行为，但大多数情况下，这通常是不必要的。
- en: 'Take a look at the following screenshot:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![](img/5a599a83-2bc1-4c28-a018-f8da1e4d6861.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5a599a83-2bc1-4c28-a018-f8da1e4d6861.png)'
- en: If you like, you can create a configuration class that defines a Bean and play
    around with that. We will have more practical sections with configuration classes
    in *[Chapter 2](f4efef8a-3e71-483b-84be-a741a3f8ff0d.xhtml): Building a Spring
    Application*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你愿意，你可以创建一个配置类来定义一个Bean，并对其进行操作。我们将在*[第2章](f4efef8a-3e71-483b-84be-a741a3f8ff0d.xhtml)：构建Spring应用程序*中提供更多关于配置类的实际内容。
- en: Additional Tools – Project Lombok
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外工具 – Lombok项目
- en: In this section, you will recognize some of the boilerplate code in Java and
    define where **Project Lombok** helps you. This is a Java library that improves
    your Java by automatically plugging into your editor to build tools.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将认识到一些Java中的样板代码，并定义**Lombok项目**如何帮助你。这是一个Java库，通过自动集成到你的编辑器中，以构建工具来改进你的Java。
- en: Boilerplate code is code that you have to write in order to achieve a goal.
    This code is almost identical all the time or so similar that you wish you didn't
    have to write it, since it's obvious.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 样板代码是为了实现目标而必须编写的代码。这种代码几乎总是相同，或者非常相似，以至于你希望不必编写它，因为它很明显。
- en: Java Beans
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java Bean
- en: A Java Bean has to follow a certain pattern to be recognized as a Java Bean.
    For example, all properties should have **Getters** and **Setters** (which return
    the value of a private member variable), although you might omit the Setter, for
    example, when a property is read-only. This means that for a data class that just
    has 10 fields, you also have to write 20 methods that adhere to the correct naming
    scheme and just store or pass along the property value. This is a prime example
    for boilerplate code.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 Java Bean 必须遵循一定的模式才能被识别为 Java Bean。例如，所有属性都应该有 **Getters** 和 **Setters**（返回私有成员变量的值），尽管您可能省略
    Setter，例如，当属性为只读时。这意味着对于只有 10 个字段的 data 类，您还必须编写 20 个方法，这些方法遵循正确的命名约定，仅存储或传递属性值。这是一个典型的样板代码示例。
- en: Java Class
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 类
- en: We have seen that Java Beans have some kind of ceremony around their structure,
    but the same is true for plain Java classes. For example, the equals(), `hashCode()`,
    and `compareTo(...)` methods need to adhere to a set of rules as well.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到 Java Beans 在其结构周围有一些仪式，但普通 Java 类也是如此。例如，equals()、`hashCode()` 和 `compareTo(...)`
    方法需要遵循一组规则。
- en: When a class overrides one of them, it needs to make sure that the other two
    work as they should in regard to the Java Object contract.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个类覆盖其中之一时，它需要确保其他两个在 Java 对象契约方面按预期工作。
- en: When instance A and instance B are equal, their `hashCode` needs to be the same. When
    you break this contract, you will get weird errors during runtime when using Sets,
    `HashMaps`, and so on. Also, having a `toString()` method that really prints the
    content of your class helps a lot in debugging and logging.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当实例 A 和实例 B 相等时，它们的 `hashCode` 需要相同。当您违反此契约时，在使用 Sets、`HashMaps` 等时，在运行时会出现奇怪的错误。另外，有一个真正打印出您类内容的
    `toString()` 方法，在调试和日志记录中非常有帮助。
- en: Example Class
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例类
- en: 'An example class looks like this:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 一个示例类看起来像这样：
- en: '[PRE3]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You can see that this is a lot of code for five simple data fields. The whole
    class definition is approximately 44 lines of code. You can generate a lot of
    this code in your IDE if you like, but it would be a lot better to not have that
    code at all!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，对于五个简单的数据字段，这需要很多代码。整个类定义大约有 44 行代码。如果您喜欢，您可以在 IDE 中生成很多这样的代码，但最好根本不使用这些代码！
- en: Go to [https://bit.ly/2QrH8cT](https://bit.ly/2QrH8cT) to access the complete
    code for the example class file.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [https://bit.ly/2QrH8cT](https://bit.ly/2QrH8cT) 访问示例类文件的完整代码。
- en: Project Lombok to the Rescue
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Project Lombok 来拯救
- en: There is a library called **Project Lombok** that generates code based on annotations.
    This makes it much easier to develop Java software.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 **Project Lombok** 的库，它根据注解生成代码。这使得开发 Java 软件变得更加容易。
- en: 'Project Lombok helps by generating:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Project Lombok 通过以下方式提供帮助：
- en: Getters/Setters
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Getters/Setters
- en: '`equals()`/`hashCode()`'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`equals()`/`hashCode()`'
- en: Constructors
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造器
- en: Static loggers
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态日志记录器
- en: Builder classes
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构造器类
- en: 'To add Lombok to your project, you need to add the following dependency (the
    version is managed by Spring Boot):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Lombok 添加到您的项目中，您需要添加以下依赖项（版本由 Spring Boot 管理）：
- en: '[PRE4]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you add Project Lombok to your project, you might need to enable something
    that is called **annotation processing** in your IDE and install the Lombok plugin.
    This is available in the plugin catalog.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将 Project Lombok 添加到您的项目中，您可能需要在您的 IDE 中启用称为 **注解处理** 的功能，并安装 Lombok 插件。这在插件目录中可用。
- en: Project Lombok Enhanced Class
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Project Lombok 增强类
- en: 'Here is some code with the same functionality:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些具有相同功能的代码：
- en: '[PRE5]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `@Data` annotation combines the following annotations:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`@Data` 注解组合了以下注解：'
- en: '[PRE6]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: generates a `toString()` method that prints all fields
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个打印所有字段的 `toString()` 方法
- en: '[PRE7]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: generates `equals()` and `hashCode()` based on all fields
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所有字段生成 `equals()` 和 `hashCode()`
- en: '[PRE8]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: generates Getter methods for all fields
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有字段生成 Getter 方法
- en: '[PRE9]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: generates Setter methods for all non-final or non-transient fields
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为所有非 final 或非 transient 字段生成 Setter 方法
- en: '[PRE10]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: generates a constructor with all fields as a constructor that need a value (final
    fields without initialization, not-null fields, and so on)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 生成所有字段作为构造器的构造器，这些字段需要值（未初始化的 final 字段、非 null 字段等）
- en: 'Activity: Project Lombok in Action'
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 活动：Project Lombok 在行动
- en: '**Aim**'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '**目标**'
- en: To create a class that uses Lombok. You are going to store the class command
    the name of the Bean in your own data structure.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个使用 Lombok 的类。您将把类命令和 Bean 的名称存储在您自己的数据结构中。
- en: '**Scenario**'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**'
- en: You should reuse the Blogmania application with Beans project and open it in
    the IDE.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该使用 Beans 项目重用 Blogmania 应用程序，并在 IDE 中打开它。
- en: '**Steps for Completion**'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成步骤**'
- en: Create a `BeanData` class in the package that contains the `Application` class
    with the required private String fields and annotations.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含`Application`类的包中创建一个`BeanData`类，包含所需的私有String字段和注解。
- en: 'Take a look at the following screenshot:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的截图：
- en: '![](img/2a88c579-ec63-47b8-b698-77b3cd03fc98.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/2a88c579-ec63-47b8-b698-77b3cd03fc98.png)'
- en: Fill the data structure and list with the corresponding data for each Bean.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用每个Bean对应的相应数据填充数据结构和列表。
- en: You can fetch the Bean from the context using the Bean name with the `getBean`
    method, for example.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`getBean`方法通过Bean名称从上下文中获取Bean，例如。
- en: Print the `BeanData` list content to get the desired outcome.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打印`BeanData`列表内容以获得所需的结果。
- en: Based on the outcome, you have now created a class that just consists of fields
    plus two annotations on the class level and have used the constructor and getters
    that are generated by that. Now, you never have to generate boring getters, setters,
    and so on your own again.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 根据结果，你现在已经创建了一个只包含字段以及两个类级别注解的类，并且使用了由它生成的构造函数和获取器。现在，你再也不需要自己生成无聊的获取器、设置器等等了。
- en: 'Take a look at the following output screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下下面的输出截图：
- en: '![](img/e484a587-d596-435a-8939-1fc4f20a0dff.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![截图](img/e484a587-d596-435a-8939-1fc4f20a0dff.png)'
- en: To refer to the detailed steps, go to the *Solutions* section at the end of this
    book on page 249.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解详细步骤，请参阅本书末尾第249页的*解决方案*部分。
- en: Summary
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learnt about the history of Spring Project and why it was
    created. You now know how to create a Spring Boot project using `start.spring.io`
    and how to start it afterwards. The basic building blocks and the application
    context were also introduced. Last but not least, you saw how Lombok can make
    your life a lot easier by freeing you from creating or writing the same code over
    and over again.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了Spring项目的历史以及为什么它被创建。你现在知道如何使用`start.spring.io`创建Spring Boot项目，以及如何启动它。还介绍了基本构建块和应用程序上下文。最后但同样重要的是，你看到了Lombok如何通过让你摆脱重复创建或编写相同代码来使你的生活变得更加轻松。
- en: In the next chapter, you will finally see how Spring Beans can interact and
    how you can configure the application.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将最终看到Spring Beans如何交互以及如何配置应用程序。
