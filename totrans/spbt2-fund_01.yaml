- en: The Spring Project and Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Framework is a mature, enterprise-grade, and open source application
    development framework that provides a flexible and modern alternative to the official
    Java EE standard.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot is a technology that allows developers to write Spring Framework-based
    applications while relying on best practices by providing convention over configuration
    and dependency management for Gradle and Maven to ensure that they have compatible
    versions of all libraries. This eliminates a lot of tasks that are required when
    writing enterprise applications or services. Spring Boot also addresses the issue
    of duplicating and plumbing code by offering a robust integration with other frameworks.
    Simultaneously, developers are able to diverge from its carefully crafted conventions
    when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'By the end of this chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Describe the Spring Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct and run a simple project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilize the application context of Spring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Project Lombok library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Spring Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Framework is an open source application framework that can be used
    by any Java application. It provides an Inversion of Control (IoC) container for
    the Java platform. In this section, we will look at an overview of the Spring
    project itself and will be introduced to the basic building blocks of a Spring
    application. You are going to learn about the history of the Spring Framework,
    the key principles that Spring focuses on, Dependency Injection and Inversion
    of Control. Lastly, we will examine the Spring ecosystem.
  prefs: []
  type: TYPE_NORMAL
- en: A Short History
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Spring Framework** was created by Rod Johnson in 2003 as an alternative
    to the heavyweight and slow J2EE 1.4 stack. The current steward of the project
    is Pivotal Software, which employs the core developers and steers the development
    of the project.
  prefs: []
  type: TYPE_NORMAL
- en: The framework itself is source and has a large number of contributors that help
    in the development of the various modules. But we will come to that shortly
  prefs: []
  type: TYPE_NORMAL
- en: Due to its focus on productivity, Spring gained a lot of market share. Zeroturnaround,
    a company that creates Java development tools, did a survey in 2016 and 36% of
    the participants wanted to convert their project to Spring, while only 14% wanted
    to convert to JEE. It is hard to find concrete market share data for JEE versus
    Spring, but in Java developer surveys, Spring is usually far beyond 50% while
    JEE is far below. This is also reflected in job listings, where Spring has trumped
    JEE for years.
  prefs: []
  type: TYPE_NORMAL
- en: Spring is used worldwide by companies of all sizes. Netflix is, for example,
    very public about their usage of Spring and they even provide a large part of
    the Spring Cloud stack.
  prefs: []
  type: TYPE_NORMAL
- en: For a little more background on the Spring Framework versions, you can read
    the entry at [https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions](https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-Versions).
  prefs: []
  type: TYPE_NORMAL
- en: To get a feel for where Spring is used, you can also have a look at [https://stackshare.io/spring/in-stacks](https://stackshare.io/spring/in-stacks).
  prefs: []
  type: TYPE_NORMAL
- en: Spring Key Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The development of the Spring Framework is based on a few principles, which
    have been consistent factors since its inception:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Inversion of Control** and **Dependency Injection** builds the core of the
    whole framework.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modularity** allows you to plug in different implementations such as logging
    framework templating engines and internal code, which creates proxies for aspect-oriented
    programming.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testability** enables the whole project and is geared toward the creation
    of testable application code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Convenience** is offered to developers in many aspects and makes developers
    productive without being too intrusive.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: J2EE Pain Points
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The official J2EE standard received a lot of criticism from the developer community
    within the last two years. The main problems were as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The standard was created by a committee, which led to a lot of features that
    were hard to use.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The committee was slow in adopting new technologies, which led to many projects
    that were developed outside of the J2EE scope to serve these needs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The application servers were very expensive and relatively slow in adopting
    the new standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The amount of code that had to be written was way too high in the J2EE 1.0 -
    1.4 days.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A huge amount of XML documents were required to configure the application. This
    either led to errors or required an IDE, which helped to keep everything in sync.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to the "specification first" approach, many features were very complicated
    to use, which led to mistakes or made people abandon certain features completely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring as a Counterpart for J2EE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Rod Johnson wanted to change the way that J2EE forced the people to take their
    coding approach, so he deliberately went the other way in many aspects:'
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to the ivory tower approach, Spring uses "code first", which has
    later been adopted in the Java community and committees.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring is very modular and extensible, so new technologies are usually added
    using modules, which are only additional JAR files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring didn't want to wait for the application servers to add features, so a
    Spring application included everything that was not provided by the application
    server or servlet container.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In contrast to J2EE, Spring always has less boilerplate code to achieve the
    same functionality. This advantage is now less relevant because the current versions
    of JavaEE are heavily inspired by Spring and copied many of its concepts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the beginning, Spring also used XML for its configuration, because it was
    considered state of the art. However, they started moving to annotations and Java-based
    configuration when Java 1.5 became available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While it's still hard to get the source code of some JavaEE libraries, Spring
    always provided source JARs and allowed anyone to peek into the well-designed
    framework if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inversion of Control and Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Inversion of Control** (**IoC**) is a paradigm that defines how the application
    is written on a very low level. It basically flips the control flow, and your
    application code reacts to events triggered by the application framework.'
  prefs: []
  type: TYPE_NORMAL
- en: This overlaps with the **Dependency Inversion** (**DI**) pattern, which is the
    broader version of Dependency Injection. When your application uses Dependency
    Injection, you don't create instances of important classes yourself; you let the
    container create the instances or provide you with existing ones. Especially when
    using interfaces, you are able to decouple components of your application. This
    means that you have parts that don't have direct dependencies on each other.
  prefs: []
  type: TYPE_NORMAL
- en: The fact that your application is reacting instead of controlling everything
    tightly helps to decouple parts of your application. Now, you have code that depends
    on the framework and much less on its other parts. This leads to less coupling
    and thus better maintainable and testable code. IoC is also called the Hollywood
    Principle with the slogan "Don't call us, we'll call you", which perfectly describes
    what it is.
  prefs: []
  type: TYPE_NORMAL
- en: For a little more background on the Spring Framework, you can read the article
    at "TheServerSide", which is a large site related to Java and software development,
    at [http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection](http://www.theserverside.com/news/1321158/A-beginners-guide-to-Dependency-Injection).
  prefs: []
  type: TYPE_NORMAL
- en: Inversion of Control and Dependency Injection Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Take a look at the following table that highlights the main concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb3a289e-7ff0-44db-a444-6119634c183d.png)'
  prefs: []
  type: TYPE_IMG
- en: For a little more background on the problems of a God object, you can read the
    entry at [https://www.c-sharpcorner.com/article/godobject-a-code-smell/](https://www.c-sharpcorner.com/article/godobject-a-code-smell/).
  prefs: []
  type: TYPE_NORMAL
- en: The Spring Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The building blocks of a typical Spring application look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: The core container that controls the lifecycle of the application and contains
    the application context, which contains the instances of the classes that are
    managed by Spring.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Then, there are a number of modules that shape how the control flow in your
    application is triggered.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example: Spring MVC, which is among other things responsible for dispatching
    requests to special classes that you usually write, which handle HTTP requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spring messaging is used to process and send messages between systems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scheduling is able to execute methods based on time-related events. For example;
    you have to execute a cleanup job every day at midnight.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Integration is able to query or fetch data from other systems using file
    transfers to process it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Your code is called from these modules to serve its purpose.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'During or after your code execution, you often prepare data that needs to be
    stored in a database or is returned to the user or caller. So, other parts of
    a Spring application are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The view renderer, which takes prepared data and renders it as an HTML page,
    for example.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Object** (**un-**)**marshaling** is the process of transforming incoming
    or outgoing data into another form. This is usually the transformation from and
    to XML or JSON, but other formats are possible as well.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Depending on the type of application you write, there are also other modules
    that Spring offers to make software development easier.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Spring Ecosystem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The modularity of Spring led to the creation of many modules in the last 15+
    years. Some have been retired, but the official homepage lists 23 main projects,
    and some of them even have between five and 10 sub-projects.
  prefs: []
  type: TYPE_NORMAL
- en: This means that, for everything you want to do, there is a good chance that
    there is a Spring module that can assist you. As a result, you can concentrate
    on the business objectives instead of writing the 100th message passing framework
    or other foundational aspects. Of course, this also means that it is very easy
    to get lost in the sea of projects and dependencies that have to be added and
    configured.
  prefs: []
  type: TYPE_NORMAL
- en: This was one of the big concerns when people spoke about Spring a few years
    ago. It required a lot of configuration and the setup of a new project took a
    long time until everything was working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot Features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is where Spring Boot rushes in to save the day. Spring Boot is a regular
    Spring project that aims to make the development experience much more pleasant.
    This is achieved by relying heavily on the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Convention over configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Auto-detection of features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency management to minimize the pain to find compatible versions of all
    libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The focus is on providing production-ready features without any code generation.
    This enables you to write simple applications that could be exposed to the internet
    within minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create the first Spring Boot project in this section by using
    the Spring project generator called **Spring Initializr**. Then, we will have
    a look at the generated code and start the application for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Initializr
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Spring Initializr project began in 2013\. Today, it supports Maven and Gradle
    projects, written in Java, Kotlin, or Groovy. The target platforms are JDK 7 up
    to 9 at the moment. The generator is capable of creating Spring Boot 1.x or 2.x
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: When you use the project creation wizard in your IDE for a Spring Boot project,
    it is likely that it uses `start.spring.io`, which is the website of the Spring
    Initializr. IntelliJ and Eclipse both have built-in support for the generator.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the First Spring Initializr Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to create a project using the Spring Initializr. After covering
    this, you will have generated a simple Spring Boot application that can be used
    as a starting point for further development. The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `start.spring.io`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a simple **Maven project** with **Java** and Spring Boot **2.0.5**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Group: `com.packt.springboot`'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Artifact: `blogmania`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bcef0f46-1cb7-4972-95e6-1d9bd18faede.png)'
  prefs: []
  type: TYPE_IMG
- en: Download and extract the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't add dependencies for now. However, you can click on the Switch to the
    full version link at the bottom of the page to display the number of available
    dependencies. You can fill out the name (**BlogMania**) and description (**Self-hosted
    blogging made easy**) in the full version, if you like.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the Project in the IDE
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to open the IDE in order and examine important parts of the generated
    project. With this sub-section, you will have imported and examined the newly
    created Spring Boot application. The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project using IntelliJ IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open IntelliJ.
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Menu or Starter Screen to open `pom.xml` as a new project.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `pom.xml` in the project pane on the left after the import. Have a look
    at these fragments in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<packaging>jar</packaging>`: The application will be built as a JAR file.
    The Spring Boot build plugin will create the remaining assets to make it executable.'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`<parent> <groupId>org.springframework.boot</`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupId> <artifactId>spring-boot-starter-parent</`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`artifactId> … </parent>`: Spring Boot applications usually have spring-boot-starter-parent
    configured as their parent POM, which provides a lot of preconfiguration of dependencies
    for the build process of the project.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<dependency> <groupId>org.springframework.boot</`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupId> <artifactId>spring-boot-starter</artifactId></dependency>`: The only
    real dependency is this starter, which will import the Spring Framework and more
    Spring Boot-related dependencies (37 in total, which includes test dependencies
    as well).'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<plugin> <groupId>org.springframework.boot</`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`groupId> <artifactId>spring-boot-maven-plugin</`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`artifactId> </plugin>`: This build plugin is responsible for creating the
    executable JAR file and to embed all the dependencies into this single file.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `src/main/java/BlogManiaApplication.java`. Have a look at these fragments
    in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@SpringBootApplication`: This annotation marks the project as a Spring Boot
    application and tells Spring that this is the main class of this application.
    Spring Boot scans the classpath for Beans and other classes of interest, and by
    default it scans every package below the main application class.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static void main(String[] args)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{ SpringApplication.run(BlogManiaApplication.class, args); }`: This is the
    main method that is called from the JVM when the application starts. `SpringApplication.run(...)`
    initializes the application and the method call terminates once the Spring context
    is up. This means that you can have code after this call. The application itself
    terminates when the Spring context shuts down or the application is terminated
    from the outside by the operating system. Go to [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz)
    to access the code for the `BlogManiaApplication.java` file.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Running a Project with Different Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to examine the various options to run the project. With this sub-section,
    you will have started the newly created Spring Boot application within IntelliJ
    or by using Maven. The steps for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run the application, you have multiple options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the project directory.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following command:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b954e7e8-8a3b-4d93-8f47-761b25101c40.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute the following command:'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the IDE with Maven support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the Maven Tool Window.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `BlogMania/Plugins/spring-boot`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `spring-boot:run`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8104b205-7982-421e-888a-c3280da53015.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the IDE using standard Java features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `BlogManiaApplication.java`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the main method and select Run.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/032bcd4c-0754-4392-9f3b-8c4d2d5adfcd.png)'
  prefs: []
  type: TYPE_IMG
- en: In the IntelliJ Ultimate version, you also have a Spring **Run-Dashboard**,
    which offers a lot of nice features to start and monitors Spring applications
    in your IDE.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will start the application and you'll see the Spring Boot banner and some
    additional output from the Framework before the application terminates.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The application terminates almost immediately since there is nothing to do.
    "Plain Spring" doesn't have a main loop that prevents the application from terminating.
    As soon as you add the Spring MVC dependencies, for example, the application will
    start up and wait for requests instead of stopping right away.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2x9gEUz](https://bit.ly/2x9gEUz) to access the code for
    the `BlogManiaApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: The Application Context
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to explore the building blocks of Spring, how
    they are discovered by Spring, and how we can define them by hand, if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Bean
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Spring Bean is itself just a simple Java object, but it is the central building
    block in a Spring application. Its lifecycle is managed by the Spring IoC container.
    This means that it is created and controlled by the container during its lifetime.
    The main interface for the container is called `BeanFactory`, which is implemented
    by the `ApplicationContext`.
  prefs: []
  type: TYPE_NORMAL
- en: You can make a class a Spring Bean by declaring it as such. This is usually
    done by adding an annotation such as `@Component` to the class. Spring will find
    the class, create instances, and configure it based on what you have configured.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Bean Stereotypes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of annotations that you can use to mark a class a Spring
    Bean. They are used to convey a special meaning of the class. By default, some
    special types are available such as `@Component`, `@Service`, `@Repository`, and
    `@Controller`.
  prefs: []
  type: TYPE_NORMAL
- en: When you put these on a class, it will be treated as a Spring Bean and one instance
    will be created when the application starts. Its dependencies are set according
    to your configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, it doesn''t matter whether you are using `@Service` or `@Component`
    on a class. It''s purely cosmetic and helps you to better understand what a class
    is supposed to do, because there is a semantic difference between these. Let''s
    go over these annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Controller` marks classes in the context of web applications as something
    that handles requests. This will be covered in a later chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Service` marks classes that are considered services, which means that they
    often provide business functionality for other services or controllers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Repository` marks a class as a kind of data provider. A repository, for example,
    provides access to data by fetching data from a database, external web services,
    or something similar.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Component` usually marks helper classes that don''t fit into one of the other
    categories.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These types are the default building blocks of many-layered architectures.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Spring Beans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The aim is to enhance your first Spring Boot application by adding a few Beans
    to it. With this sub-section, you have seen the Spring context in action and you
    have seen how you can access the Spring context from the main method. The steps
    for completion are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Display the existing Beans.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the IDE with the imported project from earlier sub-sections.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `BlogmaniaApplication.java` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Assign the result of `SpringApplication.run` to a variable called context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate over all defined Bean names that you can access by the `getBeanDefinitionNames()`
    method of the context object in the next line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application by executing the main method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2NaOkvJ](https://bit.ly/2NaOkvJ) to access the code for
    the `BlogManiaApplication.java` file.
  prefs: []
  type: TYPE_NORMAL
- en: You can see a number of Beans that are created by default. One of them is the
    `blogmaniaApplication`. By default, Beans are named like the class, beginning
    with a lowercase character.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how it could look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Add new Beans to the context.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `BlogService` as a public class in the same package as
    `BlogmaniaApplication.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class called `BlogRepository` as a public class in the same package
    as `BlogmaniaApplication.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `@Repository` before the `public class …` on `BlogRepository.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the application again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice that there is a new Bean named `blogRepository`, but no Bean
    named `blogService`, because we have not marked the class as a Spring Bean yet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration Classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to declare Spring Beans is via **configuration classes**. These
    are used for more complicated Beans that require you to run code to initialize
    the Bean. Examples are reading configuration from somewhere or just a complicated
    setup to fulfill the dependencies. This is also used to create Beans from classes
    that are not under your control, so you can't add the annotations to them.
  prefs: []
  type: TYPE_NORMAL
- en: You can create a Bean by having a public method in a configuration class that
    is annotated with `@Bean` and returns an instance of your class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Bean will be named after the name of the method by default, while an annotated
    class will, by default, result in a Bean named like the class with the lowercase
    first character:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Spring will make sure that no matter how often you call a `@Bean`-annotated
    method of a configuration class, it will return the correct Bean instance (under
    the hood, the result is computed only once).
  prefs: []
  type: TYPE_NORMAL
- en: You can also define something with `@Bean` in any Java class and it will be
    put in the context. Keep in mind that these are "Beans-lite", and many mechanisms
    won't work on these.
  prefs: []
  type: TYPE_NORMAL
- en: Classpath Scanning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When people say Spring does magic, they often mean this mechanism. By default,
    Spring Boot scans the classpath based on the package the application class is
    in, or to be exact, the class that is annotated by `@SpringBootApplication`.
  prefs: []
  type: TYPE_NORMAL
- en: For example, it searches for known stereotypes (annotations) such as component,
    service, or repository or factory methods such as the `@Bean`-methods. The search
    covers the classpath, so dependencies that are added to the project are scanned
    as well!
  prefs: []
  type: TYPE_NORMAL
- en: In this example, `BlogmaniaApplication` is in the package `com.packt.springboot.blogmania`
    folder, so the package itself and all packages below it are scanned. Everything
    that is in `com.packt.springboot.that` and below is not scanned. You can modify
    the default behavior by adding `@ComponentScan` with the correct parameters if
    required, but most of the time, this shouldn't be necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5a599a83-2bc1-4c28-a018-f8da1e4d6861.png)'
  prefs: []
  type: TYPE_IMG
- en: If you like, you can create a configuration class that defines a Bean and play
    around with that. We will have more practical sections with configuration classes
    in *[Chapter 2](f4efef8a-3e71-483b-84be-a741a3f8ff0d.xhtml): Building a Spring
    Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Additional Tools – Project Lombok
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will recognize some of the boilerplate code in Java and
    define where **Project Lombok** helps you. This is a Java library that improves
    your Java by automatically plugging into your editor to build tools.
  prefs: []
  type: TYPE_NORMAL
- en: Boilerplate code is code that you have to write in order to achieve a goal.
    This code is almost identical all the time or so similar that you wish you didn't
    have to write it, since it's obvious.
  prefs: []
  type: TYPE_NORMAL
- en: Java Beans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Java Bean has to follow a certain pattern to be recognized as a Java Bean.
    For example, all properties should have **Getters** and **Setters** (which return
    the value of a private member variable), although you might omit the Setter, for
    example, when a property is read-only. This means that for a data class that just
    has 10 fields, you also have to write 20 methods that adhere to the correct naming
    scheme and just store or pass along the property value. This is a prime example
    for boilerplate code.
  prefs: []
  type: TYPE_NORMAL
- en: Java Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have seen that Java Beans have some kind of ceremony around their structure,
    but the same is true for plain Java classes. For example, the equals(), `hashCode()`,
    and `compareTo(...)` methods need to adhere to a set of rules as well.
  prefs: []
  type: TYPE_NORMAL
- en: When a class overrides one of them, it needs to make sure that the other two
    work as they should in regard to the Java Object contract.
  prefs: []
  type: TYPE_NORMAL
- en: When instance A and instance B are equal, their `hashCode` needs to be the same. When
    you break this contract, you will get weird errors during runtime when using Sets,
    `HashMaps`, and so on. Also, having a `toString()` method that really prints the
    content of your class helps a lot in debugging and logging.
  prefs: []
  type: TYPE_NORMAL
- en: Example Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An example class looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You can see that this is a lot of code for five simple data fields. The whole
    class definition is approximately 44 lines of code. You can generate a lot of
    this code in your IDE if you like, but it would be a lot better to not have that
    code at all!
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://bit.ly/2QrH8cT](https://bit.ly/2QrH8cT) to access the complete
    code for the example class file.
  prefs: []
  type: TYPE_NORMAL
- en: Project Lombok to the Rescue
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is a library called **Project Lombok** that generates code based on annotations.
    This makes it much easier to develop Java software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project Lombok helps by generating:'
  prefs: []
  type: TYPE_NORMAL
- en: Getters/Setters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`equals()`/`hashCode()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static loggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Builder classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To add Lombok to your project, you need to add the following dependency (the
    version is managed by Spring Boot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If you add Project Lombok to your project, you might need to enable something
    that is called **annotation processing** in your IDE and install the Lombok plugin.
    This is available in the plugin catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Project Lombok Enhanced Class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is some code with the same functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `@Data` annotation combines the following annotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: generates a `toString()` method that prints all fields
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: generates `equals()` and `hashCode()` based on all fields
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: generates Getter methods for all fields
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: generates Setter methods for all non-final or non-transient fields
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: generates a constructor with all fields as a constructor that need a value (final
    fields without initialization, not-null fields, and so on)
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity: Project Lombok in Action'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Aim**'
  prefs: []
  type: TYPE_NORMAL
- en: To create a class that uses Lombok. You are going to store the class command
    the name of the Bean in your own data structure.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scenario**'
  prefs: []
  type: TYPE_NORMAL
- en: You should reuse the Blogmania application with Beans project and open it in
    the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: '**Steps for Completion**'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `BeanData` class in the package that contains the `Application` class
    with the required private String fields and annotations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a88c579-ec63-47b8-b698-77b3cd03fc98.png)'
  prefs: []
  type: TYPE_IMG
- en: Fill the data structure and list with the corresponding data for each Bean.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can fetch the Bean from the context using the Bean name with the `getBean`
    method, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Print the `BeanData` list content to get the desired outcome.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Based on the outcome, you have now created a class that just consists of fields
    plus two annotations on the class level and have used the constructor and getters
    that are generated by that. Now, you never have to generate boring getters, setters,
    and so on your own again.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following output screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e484a587-d596-435a-8939-1fc4f20a0dff.png)'
  prefs: []
  type: TYPE_IMG
- en: To refer to the detailed steps, go to the *Solutions* section at the end of this
    book on page 249.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learnt about the history of Spring Project and why it was
    created. You now know how to create a Spring Boot project using `start.spring.io`
    and how to start it afterwards. The basic building blocks and the application
    context were also introduced. Last but not least, you saw how Lombok can make
    your life a lot easier by freeing you from creating or writing the same code over
    and over again.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will finally see how Spring Beans can interact and
    how you can configure the application.
  prefs: []
  type: TYPE_NORMAL
