["```java\nctx.select(DEPARTMENT.NAME, DEPARTMENT.OFFICE_CODE,\n```", "```java\n      DEPARTMENT.CASH, ..., \n```", "```java\n     round(coalesce(DEPARTMENT.CASH,   \n```", "```java\n      DEPARTMENT.ACCOUNTS_RECEIVABLE, \n```", "```java\n          DEPARTMENT.INVENTORIES,inline(0)).mul(0.25), \n```", "```java\n              2).as(\"income_deduction\"),\n```", "```java\n     round(coalesce(DEPARTMENT.ACCRUED_LIABILITIES, \n```", "```java\n      DEPARTMENT.ACCOUNTS_PAYABLE, DEPARTMENT.ST_BORROWING, \n```", "```java\n       inline(0)).mul(0.25), 2).as(\"expenses_deduction\"))\n```", "```java\n   .from(DEPARTMENT).fetch();\n```", "```java\nctx.select(DEPARTMENT.NAME, DEPARTMENT.OFFICE_CODE, …  \n```", "```java\n coalesce(DEPARTMENT.FORECAST_PROFIT,\n```", "```java\n     select(\n```", "```java\n       avg(field(name(\"t\", \"forecast_profit\"), Double.class)))\n```", "```java\n      .from(DEPARTMENT.as(\"t\"))\n```", "```java\n      .where(coalesce(field(name(\"t\", \"profit\")), 0)\n```", "```java\n      .gt(coalesce(DEPARTMENT.PROFIT, 0))\n```", "```java\n       .and(field(name(\"t\", \"forecast_profit\")).isNotNull())))\n```", "```java\n        .as(\"fill_forecast_profit\"))\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .orderBy(DEPARTMENT.DEPARTMENT_ID).fetch();\n```", "```java\nIF x = a THEN\n```", "```java\n    RETURN r1;\n```", "```java\nELSE\n```", "```java\n    RETURN r2;\n```", "```java\nEND IF;\n```", "```java\nctx.select(DEPARTMENT.NAME, DEPARTMENT.OFFICE_CODE, \n```", "```java\n   DEPARTMENT.LOCAL_BUDGET, decode(DEPARTMENT.LOCAL_BUDGET,\n```", "```java\n   castNull(Double.class), 0, DEPARTMENT.LOCAL_BUDGET.mul(0.25))\n```", "```java\n  .mul(2).divide(100).as(\"financial_index\"))\n```", "```java\n  .from(DEPARTMENT)\n```", "```java\n  .fetch();\n```", "```java\nIF DEPARTMENT.LOCAL_BUDGET = NULL THEN\n```", "```java\n    RETURN 0;\n```", "```java\nELSE\n```", "```java\n    RETURN DEPARTMENT.LOCAL_BUDGET * 0.25;\n```", "```java\nEND IF;\n```", "```java\nDECODE (x, a1, r1[, a2, r2], ...,[, an, rn] [, d]);\n```", "```java\nctx.select(DEPARTMENT.NAME, DEPARTMENT.OFFICE_CODE,…, \n```", "```java\n    decode(DEPARTMENT.NAME,\n```", "```java\n           \"Advertising\", \"Publicity and promotion\",\n```", "```java\n           \"Accounting\", \"Monetary and business\",\n```", "```java\n           \"Logistics\", \"Facilities and supplies\",\n```", "```java\n           DEPARTMENT.NAME).concat(\"department\")\n```", "```java\n              .as(\"description\"))\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t\", \"d\")), count())\n```", "```java\n   .from(select(decode(sign(\n```", "```java\n     PRODUCT.BUY_PRICE.minus(PRODUCT.MSRP.divide(2))),\n```", "```java\n       1, \"Buy price larger than half of MSRP\",\n```", "```java\n       0, \"Buy price equal to half of MSRP\",\n```", "```java\n      -1, \"Buy price smaller than half of MSRP\").as(\"d\"))\n```", "```java\n       .from(PRODUCT)\n```", "```java\n       .groupBy(PRODUCT.BUY_PRICE, PRODUCT.MSRP).asTable(\"t\"))\n```", "```java\n   .groupBy(field(name(\"t\", \"d\")))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(DEPARTMENT.NAME, DEPARTMENT.OFFICE_CODE,\n```", "```java\n     DEPARTMENT.LOCAL_BUDGET, DEPARTMENT.PROFIT,\n```", "```java\n     decode(DEPARTMENT.LOCAL_BUDGET, \n```", "```java\n     castNull(Double.class), DEPARTMENT.PROFIT,\n```", "```java\n      decode(sign(DEPARTMENT.PROFIT.minus(\n```", "```java\n       DEPARTMENT.LOCAL_BUDGET)), \n```", "```java\n        1, DEPARTMENT.PROFIT.minus(DEPARTMENT.LOCAL_BUDGET),\n```", "```java\n        0, DEPARTMENT.LOCAL_BUDGET.divide(2).mul(-1),\n```", "```java\n       -1, DEPARTMENT.LOCAL_BUDGET.mul(-1)))\n```", "```java\n           .as(\"profit_balance\"))\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch();\n```", "```java\nIIF(boolean_expr, value_for_true_case, value_for_false_case)\n```", "```java\nctx.select(DEPARTMENT.DEPARTMENT_ID, DEPARTMENT.NAME,\n```", "```java\n      iif(DEPARTMENT.LOCAL_BUDGET.isNull(), \n```", "```java\n        \"NO BUDGET\", \"HAS BUDGET\").as(\"budget\"))\n```", "```java\n   .from(DEPARTMENT).fetch();\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, nullif(OFFICE.COUNTRY, \"\"))\n```", "```java\n    .from(OFFICE).fetch();\n```", "```java\nctx.selectFrom(OFFICE)\n```", "```java\n    .where(nullif(OFFICE.COUNTRY, \"\").isNull()).fetch();\n```", "```java\nctx.select(DEPARTMENT.DEPARTMENT_ID, DEPARTMENT.NAME,\n```", "```java\n      ifnull(DEPARTMENT.LOCAL_BUDGET, 0).as(\"budget_if\"),\n```", "```java\n      isnull(DEPARTMENT.LOCAL_BUDGET, 0).as(\"budget_is\"))\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(\n```", "```java\n     ifnull(CUSTOMERDETAIL.POSTAL_CODE,  \n```", "```java\n       CUSTOMERDETAIL.ADDRESS_LINE_FIRST).as(\"address_if\"),\n```", "```java\n     isnull(CUSTOMERDETAIL.POSTAL_CODE, \n```", "```java\n       CUSTOMERDETAIL.ADDRESS_LINE_FIRST).as(\"address_is\"))\n```", "```java\n  .from(CUSTOMERDETAIL).fetch();\n```", "```java\nctx.select(DEPARTMENT.NAME, ...,                \n```", "```java\n       round((nvl(DEPARTMENT.PROFIT, 0d).divide(\n```", "```java\n       nvl(DEPARTMENT.FORECAST_PROFIT, 10000d)))\n```", "```java\n       .minus(1d).mul(100), 2).concat(\"%\").as(\"nvl\"))\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME,\n```", "```java\n iif(EMPLOYEE.COMMISSION.isNull(),EMPLOYEE.SALARY,  \n```", "```java\n  EMPLOYEE.SALARY.plus(EMPLOYEE.COMMISSION))\n```", "```java\n    .as(\"iif1\"),\n```", "```java\n iif(EMPLOYEE.COMMISSION.isNotNull(),\n```", "```java\n  EMPLOYEE.SALARY.plus(EMPLOYEE.COMMISSION), EMPLOYEE.SALARY)\n```", "```java\n   .as(\"iif2\"),\n```", "```java\n nvl2(EMPLOYEE.COMMISSION,\n```", "```java\n  EMPLOYEE.SALARY.plus(EMPLOYEE.COMMISSION), EMPLOYEE.SALARY)\n```", "```java\n   .as(\"nvl2\"))\n```", "```java\n .from(EMPLOYEE)\n```", "```java\n .fetch();\n```", "```java\nFib(n) = (1.6180339^n – (–0.6180339)^n) / 2.236067977\n```", "```java\nctx.fetchValue(round((power(1.6180339, n).minus(\n```", "```java\n      power(-0.6180339, n))).divide(2.236067977), 0));\n```", "```java\na = POWER(SIN((latitude2 − latitude1) / 2.0)), 2)\n```", "```java\n  + COS(latitude1) * COS(latitude2) \n```", "```java\n      * POWER (SIN((longitude2 − longitude1) / 2.0), 2);\n```", "```java\nresult = (6371.0 * (2.0 * ATN2(SQRT(a),SQRT(1.0 − a))));\n```", "```java\ndouble pi180 = Math.PI / 180;\n```", "```java\nField<BigDecimal> a = (power(sin(val((latitude2 - latitude1) \n```", "```java\n * pi180).divide(2d)), 2d).plus(cos(latitude1 * pi180)\n```", "```java\n   .mul(cos(latitude2 * pi180)).mul(power(sin(val((\n```", "```java\n     longitude2 - longitude1) * pi180).divide(2d)), 2d))));\n```", "```java\nctx.fetchValue(inline(6371d).mul(inline(2d)\n```", "```java\n   .mul(atan2(sqrt(a), sqrt(inline(1d).minus(a))))));\n```", "```java\nctx.select(concat(upper(EMPLOYEE.FIRST_NAME), space(1),\n```", "```java\n         substring(EMPLOYEE.LAST_NAME, 1, 1).concat(\". (\"),\n```", "```java\n           lower(EMPLOYEE.JOB_TITLE),\n```", "```java\n              rpad(val(\")\"), 4, '.')).as(\"employee\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .fetch();\n```", "```java\nDate r = ctx.fetchValue(currentDate());\n```", "```java\nLocalDate r = ctx.fetchValue(currentLocalDate());\n```", "```java\nDate r = ctx.fetchValue(date(\"2024-01-29\"));\n```", "```java\nvar r = ctx.fetchValue(\n```", "```java\n dateAdd(Date.valueOf(\"2022-02-03\"), 10).as(\"after_10_days\"));\n```", "```java\nvar r = ctx.fetchValue(localDateAdd(\n```", "```java\n LocalDate.parse(\"2022-02-03\"), 10).as(\"after_10_days\"));\n```", "```java\nvar r = ctx.fetchValue(dateAdd(Date.valueOf(\"2022-02-03\"), \n```", "```java\n  new YearToMonth(0, 3)).as(\"after_3_month\"));\n```", "```java\nint r = ctx.fetchValue(dayOfWeek(Date.valueOf(\"2021-05-06\")));\n```", "```java\nint r = ctx.fetchValue(extract(\n```", "```java\n  Date.valueOf(\"2021-05-06\"), DatePart.DAY_OF_WEEK));\n```", "```java\n// Harmonic mean: n / SUM(1/xi), i=1…n\n```", "```java\nctx.select(SALE.FISCAL_YEAR, count().divide(\n```", "```java\n     sum(inline(1d).divide(SALE.SALE_))).as(\"harmonic_mean\"))\n```", "```java\n   .from(SALE).groupBy(SALE.FISCAL_YEAR).fetch();\n```", "```java\n// Geometric mean: EXP(AVG(LN(n)))\n```", "```java\nctx.select(SALE.FISCAL_YEAR, exp(avg(ln(SALE.SALE_)))\n```", "```java\n            .as(\"geometric_mean\"))\n```", "```java\n   .from(SALE).groupBy(SALE.FISCAL_YEAR).fetch();\n```", "```java\nctx.select(SALE.FISCAL_YEAR,\n```", "```java\n    stddevSamp(SALE.SALE_).as(\"samp\"),   // SSD \n```", "```java\n    stddevPop(SALE.SALE_).as(\"pop1\"),    // PSD\n```", "```java\n    sqrt(varPop(SALE.SALE_)).as(\"pop2\")) // PSD emulation\n```", "```java\n .from(SALE).groupBy(SALE.FISCAL_YEAR).fetch();\n```", "```java\nctx.with(\"sales_stats\").as(\n```", "```java\n      select(avg(DAILY_ACTIVITY.SALES).as(\"mean\"),\n```", "```java\n        stddevSamp(DAILY_ACTIVITY.SALES).as(\"sd\"))\n```", "```java\n      .from(DAILY_ACTIVITY))\n```", "```java\n   .with(\"visitors_stats\").as(\n```", "```java\n      select(avg(DAILY_ACTIVITY.VISITORS).as(\"mean\"),\n```", "```java\n        stddevSamp(DAILY_ACTIVITY.VISITORS).as(\"sd\"))\n```", "```java\n      .from(DAILY_ACTIVITY))\n```", "```java\n   .select(DAILY_ACTIVITY.DAY_DATE,\n```", "```java\n     abs(DAILY_ACTIVITY.SALES\n```", "```java\n     .minus(field(name(\"sales_stats\", \"mean\"))))\n```", "```java\n     .divide(field(name(\"sales_stats\", \"sd\"), Float.class))\n```", "```java\n     .as(\"z_score_sales\"),\n```", "```java\n      abs(DAILY_ACTIVITY.VISITORS\n```", "```java\n     .minus(field(name(\"visitors_stats\", \"mean\"))))\n```", "```java\n     .divide(field(name(\"visitors_stats\", \"sd\"), Float.class))\n```", "```java\n        .as(\"z_score_visitors\"))\n```", "```java\n   .from(table(\"sales_stats\"), \n```", "```java\n     table(\"visitors_stats\"), DAILY_ACTIVITY).fetch();\n```", "```java\nField<BigDecimal> x = PRODUCT.BUY_PRICE;\n```", "```java\nctx.select(varSamp(x)) // Sample Variance\n```", "```java\n    .from(PRODUCT).fetch();\n```", "```java\nctx.select(varPop(x)) // Population Variance\n```", "```java\n    .from(PRODUCT).fetch();\n```", "```java\nctx.select((count().mul(sum(x.mul(x)))\n```", "```java\n      .minus(sum(x).mul(sum(x)))).divide(count()\n```", "```java\n      .mul(count().minus(1))).as(\"VAR_SAMP\"))\n```", "```java\n   .from(PRODUCT).fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE,\n```", "```java\n    (regrSXY(PRODUCT.BUY_PRICE, PRODUCT.MSRP)).as(\"regr_sxy\"))\n```", "```java\n    .from(PRODUCT).groupBy(PRODUCT.PRODUCT_LINE).fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE,\n```", "```java\n     sum(PRODUCT.BUY_PRICE.mul(PRODUCT.MSRP))\n```", "```java\n      .minus(sum(PRODUCT.BUY_PRICE).mul(sum(PRODUCT.MSRP)\n```", "```java\n      .divide(count()))).as(\"regr_sxy\"))\n```", "```java\n   .from(PRODUCT).groupBy(PRODUCT.PRODUCT_LINE).fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE,\n```", "```java\n  covarSamp(PRODUCT.BUY_PRICE, PRODUCT.MSRP).as(\"covar_samp\"),     \n```", "```java\n  covarPop(PRODUCT.BUY_PRICE, PRODUCT.MSRP).as(\"covar_pop\")) \n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .groupBy(PRODUCT.PRODUCT_LINE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(SALE.FISCAL_YEAR,\n```", "```java\n      round((product(one().plus(\n```", "```java\n         SALE.REVENUE_GROWTH.divide(100)))\n```", "```java\n            .power(one().divide(count()))).mul(100) ,2)\n```", "```java\n               .concat(\"%\").as(\"CMGR\"))\n```", "```java\n   .from(SALE).groupBy(SALE.FISCAL_YEAR).fetch();\n```", "```java\nctx.select(ORDERDETAIL.PRODUCT_ID, \n```", "```java\n     aggregate(\"approx_count_distinct\", Long.class,  \n```", "```java\n       ORDERDETAIL.ORDER_LINE_NUMBER).as(\"approx_count\"))  \n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .groupBy(ORDERDETAIL.PRODUCT_ID)\n```", "```java\n   .fetch();   \n```", "```java\nwindow_function_name (expression) OVER (\n```", "```java\n    Partition Order Frame\n```", "```java\n)\n```", "```java\nField<Integer> x = PRODUCT.QUANTITY_IN_STOCK.as(\"x\");\n```", "```java\nField<Double> y = inline(2.0d).mul(rowNumber().over()\n```", "```java\n   .orderBy(PRODUCT.QUANTITY_IN_STOCK))\n```", "```java\n   .minus(count().over()).as(\"y\");\n```", "```java\nctx.select(avg(x).as(\"median\")).from(select(x, y)\n```", "```java\n   .from(PRODUCT))\n```", "```java\n   .where(y.between(0d, 2d))\n```", "```java\n   .fetch();\n```", "```java\nTable<?> t = select(\n```", "```java\n  ORDER.REQUIRED_DATE.as(\"rdate\"), ORDER.STATUS.as(\"status\"),\n```", "```java\n  (rowNumber().over().orderBy(ORDER.REQUIRED_DATE)\n```", "```java\n    .minus(rowNumber().over().partitionBy(ORDER.STATUS)\n```", "```java\n  .orderBy(ORDER.REQUIRED_DATE))).as(\"cluster_nr\"))\n```", "```java\n  .from(ORDER).asTable(\"t\");\n```", "```java\nctx.select(min(t.field(\"rdate\")).as(\"cluster_start\"),\n```", "```java\n           max(t.field(\"rdate\")).as(\"cluster_end\"),\n```", "```java\n           min(t.field(\"status\")).as(\"cluster_score\"))\n```", "```java\n   .from(t)\n```", "```java\n   .groupBy(t.field(\"cluster_nr\"))\n```", "```java\n   .orderBy(1)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(ORDER.ORDER_ID, ORDER.CUSTOMER_NUMBER, \n```", "```java\n      ORDER.ORDER_DATE, rank().over().orderBy(\n```", "```java\n        year(ORDER.ORDER_DATE), month(ORDER.ORDER_DATE))) \n```", "```java\n   .from(ORDER).fetch();\n```", "```java\nctx.select(SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR,  \n```", "```java\n  sum(SALE.SALE_), rank().over().partitionBy(SALE.FISCAL_YEAR)\n```", "```java\n     .orderBy(sum(SALE.SALE_).desc()).as(\"sale_rank\"))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n    PRODUCT.PRODUCT_SCALE, rank().over().partitionBy(\n```", "```java\n      PRODUCT.PRODUCT_VENDOR, PRODUCT.PRODUCT_SCALE)\n```", "```java\n   .orderBy(PRODUCT.PRODUCT_NAME))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n  EMPLOYEE.SALARY, OFFICE.CITY, OFFICE.COUNTRY,       \n```", "```java\n  OFFICE.OFFICE_CODE, denseRank().over().partitionBy(\n```", "```java\n    OFFICE.OFFICE_CODE).orderBy(EMPLOYEE.SALARY.desc())\n```", "```java\n      .as(\"salary_rank\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(OFFICE)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE)).fetch();\n```", "```java\nselect(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n    EMPLOYEE.SALARY, OFFICE.CITY, OFFICE.COUNTRY,   \n```", "```java\n    OFFICE.OFFICE_CODE)\n```", "```java\n .from(EMPLOYEE)\n```", "```java\n .innerJoin(OFFICE)\n```", "```java\n  .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n .qualify(denseRank().over().partitionBy(OFFICE.OFFICE_CODE)\n```", "```java\n   .orderBy(EMPLOYEE.SALARY.desc()).eq(1))\n```", "```java\n .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n   EMPLOYEE.SALARY, OFFICE.OFFICE_CODE, OFFICE.CITY,    \n```", "```java\n   OFFICE.COUNTRY, round(percentRank().over()\n```", "```java\n      .partitionBy(OFFICE.OFFICE_CODE)\n```", "```java\n      .orderBy(EMPLOYEE.SALARY).mul(100), 2)\n```", "```java\n      .concat(\"%\").as(\"PERCENTILE_RANK\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .innerJoin(OFFICE)\n```", "```java\n   .on(EMPLOYEE.OFFICE_CODE.eq(OFFICE.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(count().filterWhere(field(\"p\").lt(0.2))\n```", "```java\n     .as(\"low_profit\"),\n```", "```java\n  count().filterWhere(field(\"p\").between(0.2, 0.8))\n```", "```java\n     .as(\"good_profit\"),\n```", "```java\n  count().filterWhere(field(\"p\").gt(0.8))\n```", "```java\n     .as(\"high_profit\"))\n```", "```java\n .from(select(percentRank().over()\n```", "```java\n        .orderBy(DEPARTMENT.PROFIT).as(\"p\"))\n```", "```java\n        .from(DEPARTMENT)\n```", "```java\n        .where(DEPARTMENT.PROFIT.isNotNull()))     \n```", "```java\n .fetch();\n```", "```java\nctx.select(concat(EMPLOYEE.FIRST_NAME, inline(\" \"), \n```", "```java\n EMPLOYEE.LAST_NAME).as(\"name\"), SALE.SALE_, SALE.FISCAL_YEAR)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .join(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER)\n```", "```java\n    .and(SALE.FISCAL_YEAR.in(2003, 2004)))\n```", "```java\n   .qualify(cumeDist().over().partitionBy(SALE.FISCAL_YEAR)\n```", "```java\n   .orderBy(SALE.SALE_.desc()).lt(BigDecimal.valueOf(0.25)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, OFFICE.CITY, OFFICE.COUNTRY,\n```", "```java\n EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, EMPLOYEE.SALARY,\n```", "```java\n lead(EMPLOYEE.SALARY, 1, 0).over()\n```", "```java\n    .partitionBy(OFFICE.OFFICE_CODE)\n```", "```java\n      .orderBy(EMPLOYEE.SALARY).as(\"next_salary\"))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(SALE.FISCAL_MONTH,\n```", "```java\n  inline(100).mul((SALE.SALE_.minus(lag(SALE.SALE_, 1)\n```", "```java\n    .over().orderBy(SALE.FISCAL_MONTH)))\n```", "```java\n    .divide(lag(SALE.SALE_, 1).over()\n```", "```java\n     .orderBy(SALE.FISCAL_MONTH))).concat(\"%\").as(\"MOM\"))\n```", "```java\n   .from(SALE)\n```", "```java\n   .where(SALE.FISCAL_YEAR.eq(2004))\n```", "```java\n   .orderBy(SALE.FISCAL_MONTH)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(\"customer_number\"),\n```", "```java\n    ntile(4).over().orderBy(field(\"last_order_date\"))\n```", "```java\n     .as(\"rfm_recency\"),\n```", "```java\n    ntile(4).over().orderBy(field(\"count_order\"))\n```", "```java\n     .as(\"rfm_frequency\"),\n```", "```java\n    ntile(4).over().orderBy(field(\"avg_amount\"))\n```", "```java\n     .as(\"rfm_monetary\")).from(\n```", "```java\n     select(ORDER.CUSTOMER_NUMBER.as(\"customer_number\"),\n```", "```java\n      max(ORDER.ORDER_DATE).as(\"last_order_date\"),\n```", "```java\n      count().as(\"count_order\"),\n```", "```java\n      avg(ORDER.AMOUNT).as(\"avg_amount\"))\n```", "```java\n        .from(ORDER)\n```", "```java\n        .groupBy(ORDER.CUSTOMER_NUMBER))\n```", "```java\n  .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, \n```", "```java\n  PRODUCT.PRODUCT_NAME, PRODUCT.BUY_PRICE,\n```", "```java\n  firstValue(PRODUCT.PRODUCT_NAME).over()\n```", "```java\n   .partitionBy(PRODUCT.PRODUCT_LINE)\n```", "```java\n     .orderBy(PRODUCT.BUY_PRICE).as(\"cheapest\"),\n```", "```java\n  lastValue(PRODUCT.PRODUCT_NAME).over()\n```", "```java\n   .partitionBy(PRODUCT.PRODUCT_LINE)\n```", "```java\n     .orderBy(PRODUCT.BUY_PRICE)\n```", "```java\n       .rangeBetweenUnboundedPreceding()\n```", "```java\n       .andUnboundedFollowing().as(\"most_expensive\"))\n```", "```java\n  .from(PRODUCT)\n```", "```java\n  .fetch(); \n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, \n```", "```java\n  PRODUCT.PRODUCT_NAME, PRODUCT.BUY_PRICE,\n```", "```java\n  nthValue(PRODUCT.PRODUCT_NAME, 2).over()\n```", "```java\n   .partitionBy(PRODUCT.PRODUCT_LINE)\n```", "```java\n    .orderBy(PRODUCT.BUY_PRICE.desc())\n```", "```java\n     .rangeBetweenUnboundedPreceding()\n```", "```java\n     .andUnboundedFollowing().as(\"second_most_expensive\"))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_LINE, \n```", "```java\n   PRODUCT.PRODUCT_NAME, PRODUCT.BUY_PRICE,\n```", "```java\n   nthValue(PRODUCT.PRODUCT_NAME, 2).fromLast().over()\n```", "```java\n   .partitionBy(PRODUCT.PRODUCT_LINE)\n```", "```java\n    .orderBy(PRODUCT.BUY_PRICE)\n```", "```java\n     .rangeBetweenUnboundedPreceding()\n```", "```java\n     .andUnboundedFollowing().as(\"second_most_expensive\"))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR, SALE.SALE_,\n```", "```java\n  round(ratioToReport(SALE.SALE_).over()\n```", "```java\n          .partitionBy(SALE.FISCAL_YEAR), 2)\n```", "```java\n          .as(\"ratio_to_report_sale\"))\n```", "```java\n  .from(SALE).fetch();\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, \n```", "```java\n     sum(EMPLOYEE.SALARY).as(\"salaries\"),\n```", "```java\n       ratioToReport(sum(EMPLOYEE.SALARY)).over()\n```", "```java\n        .mul(100).concat(\"%\").as(\"ratio_to_report\"))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .join(EMPLOYEE)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .groupBy(OFFICE.OFFICE_CODE)\n```", "```java\n   .orderBy(OFFICE.OFFICE_CODE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(BANK_TRANSACTION.CUSTOMER_NUMBER,   \n```", "```java\n  BANK_TRANSACTION.CACHING_DATE,\n```", "```java\n  BANK_TRANSACTION.TRANSFER_AMOUNT, BANK_TRANSACTION.STATUS,\n```", "```java\n  sum(BANK_TRANSACTION.TRANSFER_AMOUNT).over()\n```", "```java\n   .partitionBy(BANK_TRANSACTION.CUSTOMER_NUMBER)\n```", "```java\n   .orderBy(BANK_TRANSACTION.CACHING_DATE)\n```", "```java\n   .rowsBetweenUnboundedPreceding().andCurrentRow().as(\"result\"))\n```", "```java\n  .from(BANK_TRANSACTION)\n```", "```java\n  .where(BANK_TRANSACTION.STATUS.eq(\"SUCCESS\")).fetch();\n```", "```java\nctx.select(ORDERDETAIL.ORDER_ID, ORDERDETAIL.PRODUCT_ID, ...,\n```", "```java\n       avg(ORDERDETAIL.PRICE_EACH).over()\n```", "```java\n        .partitionBy(ORDERDETAIL.ORDER_ID)\n```", "```java\n        .orderBy(ORDERDETAIL.PRICE_EACH)\n```", "```java\n        .rowsPreceding(2).as(\"avg_prec_3_prices\"))\n```", "```java\n   .from(ORDERDETAIL).fetch();\n```", "```java\nctx.select(\n```", "```java\n  BANK_TRANSACTION.CACHING_DATE, BANK_TRANSACTION.CARD_TYPE,\n```", "```java\n  sum(BANK_TRANSACTION.TRANSFER_AMOUNT).as(\"daily_sum\"),\n```", "```java\n  avg(sum(BANK_TRANSACTION.TRANSFER_AMOUNT)).over()\n```", "```java\n    .orderBy(BANK_TRANSACTION.CACHING_DATE)\n```", "```java\n      .rowsBetweenPreceding(2).andCurrentRow()\n```", "```java\n         .as(\"transaction_running_average\"))\n```", "```java\n   .from(BANK_TRANSACTION)\n```", "```java\n   .where(BANK_TRANSACTION.CACHING_DATE\n```", "```java\n   .between(LocalDateTime.of(2005, 3, 1, 0, 0, 0),\n```", "```java\n            LocalDateTime.of(2005, 3, 31, 0, 0, 0))\n```", "```java\n   .and(BANK_TRANSACTION.CARD_TYPE.eq(\"VisaElectron\")))   \n```", "```java\n   .groupBy(BANK_TRANSACTION.CACHING_DATE, \n```", "```java\n            BANK_TRANSACTION.CARD_TYPE)\n```", "```java\n   .orderBy(BANK_TRANSACTION.CACHING_DATE).fetch();\n```", "```java\nctx.select(arrayAgg(EMPLOYEE.FIRST_NAME).orderBy(\n```", "```java\n      EMPLOYEE.FIRST_NAME.desc(),               EMPLOYEE.LAST_NAME.desc()))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nSELECT ARRAY_AGG(\n```", "```java\n    \"public\".\"employee\".\"first_name\" \n```", "```java\n    ORDER BY\n```", "```java\n      \"public\".\"employee\".\"first_name\" DESC, \n```", "```java\n      \"public\".\"employee\".\"last_name\" DESC\n```", "```java\n  ) FROM \"public\".\"employee\"\n```", "```java\nCREATE TYPE \"SALARY_ARR\" AS TABLE OF NUMBER(7); \n```", "```java\nvar result = ctx.select(\n```", "```java\n      collect(EMPLOYEE.SALARY, SalaryArrRecord.class)\n```", "```java\n  .orderBy(EMPLOYEE.SALARY.asc(),            EMPLOYEE.JOB_TITLE.desc()))\n```", "```java\n  .from(EMPLOYEE).fetch();\n```", "```java\nSELECT CAST(COLLECT(\n```", "```java\n    \"CLASSICMODELS\".\"EMPLOYEE\".\"SALARY\" \n```", "```java\nORDER BY \n```", "```java\n    \"CLASSICMODELS\".\"EMPLOYEE\".\"SALARY\" ASC, \n```", "```java\n    \"CLASSICMODELS\".\"EMPLOYEE\".\"JOB_TITLE\" DESC) \n```", "```java\n     AS \"CLASSICMODELS\".\"SALARY_ARR\") \n```", "```java\nFROM \"CLASSICMODELS\".\"EMPLOYEE\"\n```", "```java\nSalaryArrRecord result = ctx.select(\n```", "```java\n  collect(EMPLOYEE.SALARY, SalaryArrRecord.class)\n```", "```java\n  .orderBy(EMPLOYEE.SALARY.asc(), EMPLOYEE.JOB_TITLE.desc()))\n```", "```java\n  .from(EMPLOYEE)\n```", "```java\n  .fetchOneInto(SalaryArrRecord.class);\n```", "```java\nctx.select(groupConcat(concat(EMPLOYEE.FIRST_NAME, \n```", "```java\n      inline(\" \"), EMPLOYEE.LAST_NAME))\n```", "```java\n   .orderBy(EMPLOYEE.SALARY.desc()).separator(\";\")\n```", "```java\n     .as(\"names_of_employees\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(ORDER.CUSTOMER_NUMBER, max(ORDER.ORDER_DATE))\n```", "```java\n   .from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_DATE.lt(LocalDate.of(2004, 6, 6)))\n```", "```java\n   .groupBy(ORDER.CUSTOMER_NUMBER)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(ORDER.CUSTOMER_NUMBER, ORDER.ORDER_DATE, \n```", "```java\n      ORDER.SHIPPED_DATE, ORDER.STATUS)\n```", "```java\n   .from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_DATE.lt(LocalDate.of(2004, 6, 6)))\n```", "```java\n   .qualify(rowNumber().over()\n```", "```java\n     .partitionBy(ORDER.CUSTOMER_NUMBER)\n```", "```java\n       .orderBy(ORDER.ORDER_DATE.desc()).eq(1))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(ORDER.CUSTOMER_NUMBER,\n```", "```java\n           max(ORDER.ORDER_DATE).as(\"ORDER_DATE\"),\n```", "```java\n           max(ORDER.SHIPPED_DATE).keepDenseRankLastOrderBy(\n```", "```java\n               ORDER.SHIPPED_DATE).as(\"SHIPPED_DATE\"),\n```", "```java\n           max(ORDER.STATUS).keepDenseRankLastOrderBy(\n```", "```java\n               ORDER.SHIPPED_DATE).as(\"STATUS\"))\n```", "```java\n   .from(ORDER)\n```", "```java\n   .where(ORDER.ORDER_DATE.lt(LocalDate.of(2004, 6, 6)))\n```", "```java\n   .groupBy(ORDER.CUSTOMER_NUMBER).fetch();\n```", "```java\nctx.select(ORDER.CUSTOMER_NUMBER, ORDER.ORDER_DATE, \n```", "```java\n      ORDER.SHIPPED_DATE, ORDER.STATUS)\n```", "```java\n   .from(ORDER)\n```", "```java\n   .where((rowid().in(select(max((rowid()))\n```", "```java\n      .keepDenseRankLastOrderBy(ORDER.SHIPPED_DATE))\n```", "```java\n      .from(ORDER)\n```", "```java\n      .where(ORDER.ORDER_DATE.lt(LocalDate.of(2004, 6, 6)))\n```", "```java\n      .groupBy(ORDER.CUSTOMER_NUMBER)))).fetch();\n```", "```java\nctx.select(SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR, SALE.SALE_)\n```", "```java\n   .from(SALE)\n```", "```java\n   .qualify(denseRank().over()\n```", "```java\n    .orderBy(SALE.FISCAL_YEAR.desc(), SALE.SALE_)\n```", "```java\n    .le(select(denseRank(val(2004), val(10000))\n```", "```java\n     .withinGroupOrderBy(SALE.FISCAL_YEAR.desc(), SALE.SALE_))\n```", "```java\n    .from(SALE))).fetch();   \n```", "```java\nctx.select(count().as(\"nr_of_salaries\"),\n```", "```java\n   percentRank(val(61000d)).withinGroupOrderBy(\n```", "```java\n        EMPLOYEE.SALARY.desc()).mul(100).concat(\"%\")\n```", "```java\n           .as(\"salary_percentile_rank\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\")).fetch();\n```", "```java\nctx.select(count().as(\"nr_of_salaries\"),\n```", "```java\n    percentRank(val(61000d)).withinGroupOrderBy(\n```", "```java\n    field(name(\"t\", \"salary\")).desc()).mul(100).concat(\"%\")\n```", "```java\n          .as(\"salary_percentile_rank\"))\n```", "```java\n   .from(selectDistinct(EMPLOYEE.SALARY.as(\"salary\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\"))     \n```", "```java\n   .asTable(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(\n```", "```java\n    percentileDisc(0.25)\n```", "```java\n      .withinGroupOrderBy(SALE.SALE_).as(\"pd - 0.25\"),\n```", "```java\n    percentileCont(0.25)\n```", "```java\n      .withinGroupOrderBy(SALE.SALE_).as(\"pc - 0.25\"))\n```", "```java\n   .from(SALE)\n```", "```java\n   .fetch();\n```", "```java\nctx.select().from(\n```", "```java\n  select(OFFICE.OFFICE_CODE, OFFICE.CITY, OFFICE.COUNTRY,\n```", "```java\n    EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, EMPLOYEE.SALARY,\n```", "```java\n    percentileDisc(0.5).withinGroupOrderBy(EMPLOYEE.SALARY)\n```", "```java\n    .over().partitionBy(OFFICE.OFFICE_CODE)\n```", "```java\n    .as(\"percentile_disc\"))\n```", "```java\n  .from(OFFICE)\n```", "```java\n  .join(EMPLOYEE)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE)).asTable(\"t\"))\n```", "```java\n   .where(field(name(\"t\", \"percentile_disc\"))\n```", "```java\n     .le(select(percentileCont(0.5)\n```", "```java\n       .withinGroupOrderBy(EMPLOYEE.SALARY))\n```", "```java\n       .from(EMPLOYEE))).fetch();\n```", "```java\nctx.select(mode(SALE.FISCAL_MONTH).as(\"fiscal_month\"))\n```", "```java\n   .from(SALE).fetch();\n```", "```java\nSELECT MODE() WITHIN GROUP (ORDER BY \n```", "```java\n \"public\".\"sale\".\"fiscal_month\") AS \"fiscal_month\" \n```", "```java\nFROM \"public\".\"sale\"\n```", "```java\nSELECT \n```", "```java\n  STATS_MODE(\"CLASSICMODELS\".\"SALE\".\"FISCAL_MONTH\")   \n```", "```java\n        \"fiscal_month\" FROM \"CLASSICMODELS\".\"SALE\"\n```", "```java\nctx.select(mode().withinGroupOrderBy(\n```", "```java\n       SALE.FISCAL_MONTH.desc()).as(\"fiscal_month\"))\n```", "```java\n   .from(SALE).fetch();\n```", "```java\nctx.select(SALE.FISCAL_MONTH)\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.FISCAL_MONTH)\n```", "```java\n   .having(count().ge(all(select(count())\n```", "```java\n     .from(SALE)\n```", "```java\n     .groupBy(SALE.FISCAL_MONTH))))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(avg(ORDERDETAIL.QUANTITY_ORDERED))\n```", "```java\n   .from(ORDERDETAIL)\n```", "```java\n   .groupBy(ORDERDETAIL.QUANTITY_ORDERED)\n```", "```java\n   .having(count().ge(all(select(count().mul(0.75))\n```", "```java\n      .from(ORDERDETAIL)\n```", "```java\n      .groupBy(ORDERDETAIL.QUANTITY_ORDERED))))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(listAgg(EMPLOYEE.FIRST_NAME)\n```", "```java\n   .withinGroupOrderBy(EMPLOYEE.SALARY).as(\"listagg\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(listAgg(EMPLOYEE.FIRST_NAME, \";\")\n```", "```java\n   .withinGroupOrderBy(EMPLOYEE.SALARY).as(\"listagg\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(EMPLOYEE.JOB_TITLE, \n```", "```java\n      listAgg(EMPLOYEE.FIRST_NAME, \",\")\n```", "```java\n   .withinGroupOrderBy(EMPLOYEE.FIRST_NAME).as(\"employees\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .groupBy(EMPLOYEE.JOB_TITLE)\n```", "```java\n   .orderBy(EMPLOYEE.JOB_TITLE).fetch();\n```", "```java\nctx.select(EMPLOYEE.JOB_TITLE,       listAgg(EMPLOYEE.SALARY, \",\")\n```", "```java\n   .withinGroupOrderBy(EMPLOYEE.SALARY)\n```", "```java\n      .over().partitionBy(EMPLOYEE.JOB_TITLE))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(OFFICE.OFFICE_CODE, OFFICE.CITY, \n```", "```java\n      nvl(groupConcat(EMPLOYEE.FIRST_NAME), \"N/A\").as(\"name\"))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .leftJoin(EMPLOYEE)\n```", "```java\n      .on(OFFICE.OFFICE_CODE.eq(EMPLOYEE.OFFICE_CODE))\n```", "```java\n   .groupBy(OFFICE.OFFICE_CODE, OFFICE.CITY)\n```", "```java\n   .having(count().lt(3)).fetch();\n```", "```java\nctx.select(field(name(\"t\", \"en\")), \n```", "```java\n       avg(field(name(\"t\", \"ss\"), Double.class))\n```", "```java\n         .as(\"sale_avg\"))\n```", "```java\n   .from(ctx.select(SALE.EMPLOYEE_NUMBER, \n```", "```java\n      SALE.FISCAL_YEAR, sum(SALE.SALE_))\n```", "```java\n       .from(SALE)\n```", "```java\n       .groupBy(SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR)\n```", "```java\n       .asTable(\"t\", \"en\", \"fy\", \"ss\"))\n```", "```java\n    .groupBy(field(name(\"t\", \"en\"))).fetch();\n```", "```java\nctx.select(EMPLOYEE.SALARY,\n```", "```java\n (sum(case_().when(EMPLOYEE.JOB_TITLE.eq(\"Sales Rep\"), 1)\n```", "```java\n    .else_(0))).as(\"Sales Rep\"),\n```", "```java\n (sum(case_().when(EMPLOYEE.JOB_TITLE.ne(\"Sales Rep\"), 1)\n```", "```java\n    .else_(0))).as(\"Others\"))\n```", "```java\n   .from(EMPLOYEE).groupBy(EMPLOYEE.SALARY).fetch();\n```", "```java\nctx.select(EMPLOYEE.SALARY,\n```", "```java\n (count().filterWhere(EMPLOYEE.JOB_TITLE\n```", "```java\n     .eq(\"Sales Rep\"))).as(\"Sales Rep\"),\n```", "```java\n (count().filterWhere(EMPLOYEE.JOB_TITLE\n```", "```java\n     .ne(\"Sales Rep\"))).as(\"Others\"))\n```", "```java\n  .from(EMPLOYEE)\n```", "```java\n  .groupBy(EMPLOYEE.SALARY).fetch();\n```", "```java\nctx.select(arrayAgg(DEPARTMENT.ACCOUNTS_RECEIVABLE)\n```", "```java\n   .filterWhere(DEPARTMENT.ACCOUNTS_RECEIVABLE.isNotNull()))\n```", "```java\n   .from(DEPARTMENT).fetch();\n```", "```java\nctx.select(SALE.FISCAL_YEAR, SALE.FISCAL_MONTH,   \n```", "```java\n      sum(SALE.SALE_))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.FISCAL_YEAR, SALE.FISCAL_MONTH).fetch();\n```", "```java\nctx.select(SALE.FISCAL_YEAR,\n```", "```java\n     sum(SALE.SALE_).filterWhere(SALE.FISCAL_MONTH.eq(1))\n```", "```java\n          .as(\"Jan_sales\"),\n```", "```java\n     sum(SALE.SALE_).filterWhere(SALE.FISCAL_MONTH.eq(2))\n```", "```java\n          .as(\"Feb_sales\"),\n```", "```java\n     ...\n```", "```java\n     sum(SALE.SALE_).filterWhere(SALE.FISCAL_MONTH.eq(12))\n```", "```java\n          .as(\"Dec_sales\"))\n```", "```java\n   .from(SALE).groupBy(SALE.FISCAL_YEAR).fetch();        \n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n       EMPLOYEE.SALARY, OFFICE.OFFICE_CODE, OFFICE.CITY,   \n```", "```java\n       OFFICE.COUNTRY, sum(EMPLOYEE.SALARY)\n```", "```java\n   .filterWhere(EMPLOYEE.COMMISSION.isNull())\n```", "```java\n    .over().partitionBy(OFFICE.OFFICE_CODE))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .join(OFFICE)\n```", "```java\n    .on(EMPLOYEE.OFFICE_CODE.eq(OFFICE.OFFICE_CODE)).fetch();\n```", "```java\nctx.select(listAgg(EMPLOYEE.FIRST_NAME)\n```", "```java\n   .withinGroupOrderBy(EMPLOYEE.SALARY)\n```", "```java\n   .filterWhere(EMPLOYEE.SALARY.gt(80000)).as(\"listagg\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(SALE.EMPLOYEE_NUMBER)\n```", "```java\n   .having(countDistinct(SALE.FISCAL_YEAR).gt(3)).fetch();\n```", "```java\nctx.select(SALE.EMPLOYEE_NUMBER, \n```", "```java\n           SALE.FISCAL_YEAR, sum(SALE.SALE_))\n```", "```java\n   .from(SALE)\n```", "```java\n   .groupBy(groupingSets(\n```", "```java\n            SALE.EMPLOYEE_NUMBER, SALE.FISCAL_YEAR))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(\n```", "```java\n  case_().when(grouping(OFFICE.CITY).eq(1), \"{generated}\")\n```", "```java\n    .else_(OFFICE.CITY).as(\"city\"),\n```", "```java\n  case_().when(grouping(OFFICE.COUNTRY).eq(1), \"{generated}\")\n```", "```java\n    .else_(OFFICE.COUNTRY).as(\"country\"),\n```", "```java\n  sum(OFFICE.INTERNAL_BUDGET))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .groupBy(groupingSets(OFFICE.CITY, OFFICE.COUNTRY))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(case_().when(grouping(OFFICE.CITY).eq(1), \"-\")\n```", "```java\n  .else_(isnull(OFFICE.CITY, \"Unspecified\")).as(\"city\"),\n```", "```java\n case_().when(grouping(OFFICE.COUNTRY).eq(1), \"-\")\n```", "```java\n  .else_(isnull(OFFICE.COUNTRY, \"Unspecified\")).as(\"country\"),\n```", "```java\n  sum(OFFICE.INTERNAL_BUDGET))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .groupBy(groupingSets(OFFICE.CITY, OFFICE.COUNTRY))\n```", "```java\n  .fetch();\n```", "```java\nctx.select(\n```", "```java\n   case_().when(grouping(OFFICE.TERRITORY).eq(1), \"{generated}\")\n```", "```java\n     .else_(OFFICE.TERRITORY).as(\"territory\"),\n```", "```java\n   case_().when(grouping(OFFICE.STATE).eq(1), \"{generated}\")\n```", "```java\n     .else_(OFFICE.STATE).as(\"state\"),\n```", "```java\n   case_().when(grouping(OFFICE.COUNTRY).eq(1), \"{generated}\")\n```", "```java\n     .else_(OFFICE.COUNTRY).as(\"country\"),\n```", "```java\n   case_().when(grouping(OFFICE.CITY).eq(1), \"{generated}\")\n```", "```java\n     .else_(OFFICE.CITY).as(\"city\"),\n```", "```java\n   sum(OFFICE.INTERNAL_BUDGET))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .where(OFFICE.COUNTRY.eq(\"USA\"))\n```", "```java\n   .groupBy(rollup(OFFICE.TERRITORY, OFFICE.STATE, \n```", "```java\n                   OFFICE.COUNTRY, OFFICE.CITY)).fetch();\n```", "```java\nctx.select(\n```", "```java\n case_().when(grouping(OFFICE.STATE).eq(1), \"{generated}\")\n```", "```java\n  .else_(OFFICE.STATE).as(\"state\"),\n```", "```java\n case_().when(grouping(OFFICE.COUNTRY).eq(1), \"{generated}\")\n```", "```java\n  .else_(OFFICE.COUNTRY).as(\"country\"),\n```", "```java\n case_().when(grouping(OFFICE.CITY).eq(1), \"{generated}\")\n```", "```java\n  .else_(OFFICE.CITY).as(\"city\"),\n```", "```java\n sum(OFFICE.INTERNAL_BUDGET))\n```", "```java\n  .from(OFFICE)\n```", "```java\n  .where(OFFICE.COUNTRY.eq(\"USA\"))\n```", "```java\n  .groupBy(cube(OFFICE.STATE, OFFICE.COUNTRY, OFFICE.CITY))\n```", "```java\n  .fetch();\n```", "```java\nctx.select(\n```", "```java\n case_().when(grouping(OFFICE.TERRITORY).eq(1), \"{generated}\")\n```", "```java\n  .else_(OFFICE.TERRITORY).as(\"territory\"),\n```", "```java\n ...\n```", "```java\n case_().when(grouping(OFFICE.CITY).eq(1), \"{generated}\")\n```", "```java\n  .else_(OFFICE.CITY).as(\"city\"),\n```", "```java\n groupingId(OFFICE.TERRITORY, OFFICE.STATE, OFFICE.COUNTRY, \n```", "```java\n            OFFICE.CITY).as(\"grouping_id\"),\n```", "```java\n sum(OFFICE.INTERNAL_BUDGET))\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .where(OFFICE.COUNTRY.eq(\"USA\"))\n```", "```java\n   .groupBy(rollup(OFFICE.TERRITORY, OFFICE.STATE, \n```", "```java\n                   OFFICE.COUNTRY, OFFICE.CITY))\n```", "```java\n   .fetch();\n```", "```java\n… .having(groupingId(OFFICE.TERRITORY, \n```", "```java\n    OFFICE.STATE, OFFICE.COUNTRY, OFFICE.CITY).eq(3))…\n```"]