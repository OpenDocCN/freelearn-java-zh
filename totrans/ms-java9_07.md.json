["```java\n    CapuchinMonkey myObjectName;\n```", "```java\n    myObjectName = new CapuchinMonkey();\n```", "```java\n-XX:+UseConcMarkSweepGC \n```", "```java\n-XX:ParallelCMSThreads=8\n```", "```java\n-XX:+UseSerialGC\n```", "```java\n-XX:+UseG1GC\n```", "```java\n    System.gc();\n    System.out.println(\"Garbage collected and unused \n     memory has been deallocated.\");\n```", "```java\n    package MyGarbageCollectionSuite;\n\n    import java.util.ArrayList;\n    import java.util.concurrent.TimeUnit;\n\n    public class GCVerificationTest \n    {\n      public static void main(String[] args) throws \n       InterruptedException \n       {\n         // Obtain a Runtime instance (to communicate\n          with the JVM)\n         Runtime myRuntime = Runtime.getRuntime();\n\n         // Set header information and output initial \n          memory stats\n         System.out.println(\"Garbage Collection\n          Verification Test\");\n         System.out.println(\"-----------------------------\n          -----------------------------\");\n         System.out.println(\"Initial JVM Memory: \" + \n          myRuntime.totalMemory() + \n            \"\\tFree Memory: \" + myRuntime.freeMemory());\n\n         // Use a bunch of memory\n         ArrayList<Integer> AccountNumbers = new \n          ArrayList<>(300000);\n         for (int i = 0; i < 100000; i++)\n         {\n           AccountNumbers = new ArrayList<>(3000);\n           AccountNumbers = null;\n         }\n\n         // Provide update with with three passes\n         for (int i = 0; i < 3; i++)\n         {\n           System.out.println(\"---------------------------\n            -----------\");\n           System.out.println(\"Free Memory before\n            collection number \" + \n              (i+1) + \": \" + myRuntime.freeMemory());\n           System.gc();\n           System.out.println(\"Free Memory after\n            collection number \" + \n              (i+1) + \": \" + myRuntime.freeMemory());\n           TimeUnit.SECONDS.sleep(1); // delay thread \n            1 second\n         }\n\n       }\n\n    }\n```", "```java\n    public class Animal \n    {\n      private static String animalName;\n      private static String animalBreed;\n      private static int objectTally = 0;\n\n      // constructor\n      public Animal(String name, String type) \n      {\n        animalName = name;\n        animalBreed = type;\n\n       // increment count of object\n        ++objectTally;\n      }\n\n      protected void finalize()\n      {\n        // decrement object count each time this method\n        // is called by the garbage collector\n        --objectTally;\n\n        //Provide output to user\n        System.out.println(animalName + \" has been \n         removed from memory.\");\n\n        // condition for 1 animal (use singular form)\n        if (objectTally == 1) \n        {\n          System.out.println(\"You have \" + objectTally + \"\n           animal remaining.\");\n        }\n\n        // condition for 0 or greater than 1 \n         animals (use plural form)\n        else \n        {\n          System.out.println(\"You have \" + objectTally + \"\n           animals remaining.\");\n        }\n\n      }\n\n    }\n```", "```java\n    001 String var = new String(\"G\");\n    002 var += \"a\";\n    003 var += \"r\";\n    004 var += \"b\";\n    005 var += \"a\";\n    006 var += \"g\";\n    007 var += \"e\";\n    008 System.out.println(\"Your completed String\n     is: \" + var + \".\");\n```", "```java\n    Your completed String is Garbage.\n```", "```java\n-XX:+UseStringDeduplication\n```", "```java\njava -verbose:gc MyJavaGameClass\n```", "```java\n    [<TYPE> <MEMORY USED BEFORE> -> MEMORY USED AFTER\n     (TOTAL HEAP SIZE), <TIME>]\n```", "```java\n    [GC 31924K -> 29732K(42234K), 0.0019319 secs]\n```", "```java\n    [Full GC 29732K -> 10911K(42234K), 0.0319319 secs]\n```", "```java\njava -verbose:gc -XX:+PrintGCDetails MyJavaGameClass\n```", "```java\n-Xlog:gc+rt*=debug\n```", "```java\n    log_<level>(Tag1[,...])(fmtstr, ...)\n```", "```java\n    log_debug(gc, classloading)(\"Number of objects\n     loaded: %d.\", object_count)\n```", "```java\n    LogHandle(gc, rt, classunloading) log;\n    if (log.is_error())\n    {\n      // do something specific regarding the 'error' level\n    }\n\n    if (log.is_warning())\n    {\n      // do something specific regarding the 'warning'\n      level\n    }\n\n    if (log.is_info())\n    {\n      // do something specific regarding the 'info' level\n    }\n\n    if (log.is_debug())\n    {\n      // do something specific regarding the 'debug' level\n    }\n\n    if (log.is_trace())\n    {\n      // do something specific regarding the 'trace' level\n    }\n```", "```java\n    package MyGarbageCollectionSuite;\n\n    public class GarbageCollectionExperimentOne \n    {\n      public static void main(String[] args) \n      {\n\n        // Declare and create new object.\n        String junk = new String(\"Pile of Junk\");\n\n        // Output to demonstrate that the object\n        has an active reference\n        // and is not eligible for garbage collection.\n        System.out.println(junk);\n\n        // Set the reference variable to null.\n        junk = null;\n\n        // The String object junk is now eligible\n        for garbage collection.\n\n      }\n\n    }\n```", "```java\n    package MyGarbageCollectionSuite;\n\n    public class GarbageCollectionExperimentTwo\n    {\n      public static void main(String[] args)\n      {\n        // Declare and create the first object.\n        String junk1 = new String(\"The first pile of\n         Junk\");\n\n        // Declare and create the second object.\n        String junk2 = new String(\"The second pile of \n         Junk\");\n\n        // Output to demonstrate that both objects have\n        active references\n        // and are not eligible for garbage collection.\n        System.out.println(junk1);\n        System.out.println(junk2);\n\n        // Set the first object's reference to the\n         second object.\n        junk1 = junk2;\n\n        // The String \"The first pile of Junk\" is now\n         eligible for garbage collection.\n\n      }\n\n    }\n```", "```java\n    package MyGarbageCollectionSuite;\n    {\n\n      // instance variable\n      GarbageCollectionExperimentThree objectNbr;\n\n      public static void main(String[] args) \n      {\n        GarbageCollectionExperimentThree objectNbr2 = new\n         GarbageCollectionExperimentThree();\n        GarbageCollectionExperimentThree objectNbr3 = new\n         GarbageCollectionExperimentThree();\n        GarbageCollectionExperimentThree objectNbr4 = new\n         GarbageCollectionExperimentThree();\n        GarbageCollectionExperimentThree objectNbr5 = new\n         GarbageCollectionExperimentThree();\n        GarbageCollectionExperimentThree objectNbr6 = new\n         GarbageCollectionExperimentThree();\n        GarbageCollectionExperimentThree objectNbr7 = new\n         GarbageCollectionExperimentThree();\n\n        // set objectNbr2 to refer to objectNbr3\n        objectNbr2.objectNbr = objectNbr3;\n\n        // set objectNbr3 to refer to objectNbr4\n        objectNbr3.objectNbr = objectNbr4;\n\n        // set objectNbr4 to refer to objectNbr5\n        objectNbr4.objectNbr = objectNbr5;\n\n        // set objectNbr5 to refer to objectNbr2\n        objectNbr5.objectNbr = objectNbr2;\n\n        // set selected references to null\n        objectNbr2 = null;\n        objectNbr3 = null;\n        objectNbr4 = null;\n        objectNbr5 = null;\n\n      }\n\n    }\n```"]