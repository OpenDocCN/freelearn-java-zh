["```java\nA := 5 \nB := A \nC := A \nD := B + C \n```", "```java\nA := 6 \n```", "```java\n     libraryDependencies += \"io.reactivex\" %% \"rxscala\" % \"0.26.5\" \n```", "```java\npackage example \n\nimport rx.lang.scala.Observable \nimport scala.concurrent.Future \nimport scala.concurrent.ExecutionContext.Implicits.global \nimport scala.concurrent.duration._ \n\nobject FirstRxApp extends App { \n\n  //Creates an empty Observable. \n  val emptyObservable = Observable.empty \n\n  //Creates an Observable that only emits 1\\. \n  val numObservable = Observable.just(1) \n\n  val sequence = List(1, 3, 5, 7, 9) \n\n  //Creates an Observable, which emits values from the sequence mentioned. \n  val sequenceObservable = Observable.from(sequence) \n\n  val someAsyncComputation = Future { 1 } \n  //Creates an Observable, from an async computation \n  val fromAsyncObservable = Observable.from(someAsyncComputation) \n\n  //Creates an Observable, which emits items at a duration gap specified. \nval intervalObservables = Observable.interval(200 millis) \n\n  //Creates an Observable, which starts emitting, once some observer subscribe to it. \n  val deferObservable = Observable.defer(fromAsyncObservable) \n\n  //Creates an Observable, which never emits any value. \n  val neverObservable = Observable.never \n\n} \n```", "```java\n    def from[T](f: Future[T])(implicit execContext: ExecutionContext): Observable[T] \n```", "```java\n    def defer[T](observable: => Observable[T]): Observable[T] \n```", "```java\nimport rx.Subscription \nimport rx.observers.TestSubscriber \n```", "```java\n//Subscribing to Observables \nemptyObservable \n  .subscribe(value => println(s\"From emptyObservable: $value\")) \n\nnumObservable \n  .subscribe(value => println(s\"From numObservable: $value\")) \n\nsequenceObservable \n  .subscribe(value => println(s\"From sequenceObservable: $value\")) \n\nfromAsyncObservable \n  .subscribe(value => println(s\"From fromAsyncObservable: $value\")) \n\nintervalObservables \n  .subscribe(value => println(value)) \nThread.sleep(1000) \n\nnew TestSubscriber[Subscription].awaitTerminalEvent(1000, MILLISECONDS) \n\ndeferObservable \n  .subscribe(value => println(s\"From deferObservable: $value\")) \nsubscribe method by passing what to do with the value. Take a look at the subscribe method's signature:\n```", "```java\ndef subscribe(onNext: T => Unit): Subscription \n```", "```java\npackage example \n\nimport rx.lang.scala.Observable \n\nobject SmartApp extends App { \n\n  val src = \n   \"/Users/vika/Documents/LSProg/LSPWorkspace/First_Proj_Rx/src/main/scala/example/football_stats.csv\" \n\n  val playerObservable = \n    Observable.from(PlayerService.readPlayerDataFromSource(src)) \n\n  playerObservable \n    .map(playerString => \n    PlayerService.parseToPlayer(playerString)) \n    .subscribe(player => PlayerService.showPlayerInformation(player), \n    error => println(s\"Error Occurred: ${error.getMessage}\")) \n\n  Thread.sleep(10000) \n} \n```", "```java\npackage example \n\nimport scala.io.BufferedSource \nimport scala.util.{Failure, Success, Try} \n\nobject PlayerService { \n\n  def readPlayerDataFromSource(src: String): List[String] = { \n    val source: BufferedSource = io.Source.fromFile(src) \n    val list: List[String] = source.getLines().toList \n\n    source.close() \n    list \n  } \n\n  def parseToPlayer(string: String): Option[Player] = { \n    Try { \n      val columns = string.split((\",\")).map(_.trim) \n      Player(columns(5), columns(6), columns(9).toInt, columns(7)) \n    } match { \n      case Success(value) => Some(value) \n      case Failure(excep) => None \n    } \n  } \n\n  def showPlayerInformation(playerOp: Option[Player]): Unit = { \n    playerOp.map { player => \n      println(\"------------ Here's our Player Information ----------- \") \n      println(s\"Name: ${player.name}\") \n      println(s\"Age: ${player.age} | Nationality: ${player.nationality} | League: ${player.league}\") \n      println \n    } \n  } \n\n  case class Player(name: String, nationality: String, age: Int, league: String) \n\n} \n```", "```java\nplayerObservable \n    .map(playerString => \n      PlayerService.parseToPlayer(playerString)) \n```", "```java\n.subscribe(player => PlayerService.showPlayerInformation(player), \n    error => println(s\"Error Occurred: ${error.getMessage}\")) \n```", "```java\npackage example \n\nimport rx.lang.scala.Observable \n\nobject SmartApp extends App { \n\n  val src = \n    \"/Users/vika/Documents/LSProg/LSPWorkspace/First_Proj_Rx/src/main/scala/example/football_stats.csv\" \n\n  val playerObservable: Observable[String] = \n    Observable.from(PlayerService.readPlayerDataFromSource(src)) \n\n  val somePlayer = Some(PlayerService.Player(\"Random Player\", \"Random Nation\", 31, \"Random League\")) \n\n  playerObservable \n    .map(playerString => \n      PlayerService.parseToPlayer(playerString)) \n    .merge(Observable.just(somePlayer)) \n    .subscribe(player => PlayerService.showPlayerInformation(player), \n      error => println(s\"Error Occurred: ${error.getMessage}\")) \n\n  Thread.sleep(10000) \n} \n```"]