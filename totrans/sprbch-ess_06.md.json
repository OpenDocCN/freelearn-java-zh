["```java\n<beans \n\nxmlns:batch-integrate=\"http://www.springframework.org/schema/batch-integration\"\nxsi:schemaLocation=\"http://www.springframework.org/schema/batch-integration\nhttp://www.springframework.org/schema/batch-integration/spring-batch-integration.xsd\nhttp://www.springframework.org/schema/batch\nhttp://www.springframework.org/schema/batch/spring-batch.xsd\nhttp://www.springframework.org/schema/beans\nhttp://www.springframework.org/schema/beans/spring-beans.xsd\nhttp://www.springframework.org/schema/integration\nhttp://www.springframework.org/schema/integration/spring-integration.xsd\">\n...\n</beans>\n```", "```java\npackage com.java.batchJob;\nimport org.springframework.batch.core.Job;\nimport org.springframework.batch.core.JobParametersBuilder;\nimport org.springframework.batch.integration.launch.JobLaunchRequest;\nimport org.springframework.integration.annotation.Transformer;\nimport org.springframework.messaging.Message;\nimport java.io.File;\n\npublic class FileMessageToJobRequest {\nprivate Job job;\nprivate String fileParameterName;\npublic void setFileParameterName(String fileParameterName) {\nthis.fileParameterName = fileParameterName;\n}\npublic void setJob(Job job) {\nthis.job = job;\n}\n@Transformer\nPublic JobLaunchRequest toRequest(Message<File> message) {\nJobParametersBuilder jobParametersBuilder = \nnew JobParametersBuilder();\njobParametersBuilder.addString(fileParameterName, message.getPayload().getAbsolutePath());\nreturn new JobLaunchRequest(job, jobParametersBuilder.toJobParameters());\n}\n}\n```", "```java\n<integrate:channel id=\"inputFileRepository\"/>\n<integrate:channel id=\"jobRequestChannel\"/>\n<integrate:channel id=\"jobTriggeringStatusChannel\"/>\n<integrate-file:inbound-channel-adapter id=\"inputFile\"\nchannel=\"inputFileRepository\"\ndirectory=\"file:/tmp/batchfiles/\"\nfilename-pattern=\"*.csv\">\n<integrate:poller fixed-rate=\"1000\"/>\n</integrate-file:inbound-channel-adapter>\n<integrate:transformer input-channel=\"inputFileRepository\"\noutput-channel=\"jobRequestChannel\">\n<bean class=\"batchJob.FileMessageToJobRequest\">\n<property name=\"job\" ref=\"employeeJob\"/>\n<property name=\"fileParameterName\" value=\"input.file.name\"/>\n</bean>\n</integrate:transformer>\n<batch-integrate:job-launching-gateway request-channel=\"jobRequestChannel\"\nreply-channel=\"jobTriggeringStatusChannel\"/>\n<integrate:logging-channel-adapter channel=\"jobTriggeringStatusChannel\"/>\n```", "```java\n<bean id=\"itemReader\" class=\"org.springframework.batch.item.file.FlatFileItemReader\"\nscope=\"step\">\n<property name=\"resource\" value=\"file://#{jobParameters['input.file.name']}\"/>\n...\n</bean>\n```", "```java\nApplicationContext ctx = new ClassPathXmlApplicationContext(\"spring-integration-job.xml\");\nEmployeeJobLaunchRequest employeeJobLaunchRequest = new EmployeeJobLaunchRequest(\"employeeJob\", Collections.singletonMap(\"key\", \"value\"));\nMessage<EmployeeJobLaunchRequest> msg = MessageBuilder.withPayload( employeeJobLaunchRequest).build();\nMessageChannel jobRequestsChannel = ctx.getBean(\"inputFileRepository\", MessageChannel.class);\njobRequestsChannel.send(msg);\n```", "```java\n@Autowired\nprivate JobLauncher jobLauncher;\n\n@Autowired\nprivate Job job;\n\npublic boolean startJob() throws Exception {\ntry {\nfinal JobParameters jobParameters = new JobParametersBuilder(). addLong(\"time\", System.nanoTime()).toJobParameters();\nfinal JobExecution execution = jobLauncher.run(job, jobParameters);\nfinal ExitStatus status = execution.getExitStatus();\nif (ExitStatus.COMPLETED.getExitCode().equals(status.getExitCode())) \n  {\n    result = true;\n  }\n}\n} catch (JobExecutionAlreadyRunningException ex) {\n  System.out.println(\"Exception\" + ex);\n} catch (JobRestartException ex) {\n  System.out.println(\"Exception\" + ex);\n} catch (JobInstanceAlreadyCompleteException ex) {\n  System.out.println(\"Exception\" + ex);\n} catch (JobParametersInvalidException ex) {\n  System.out.println(\"Exception\" + ex);\n} catch (IOException ex) {\n  System.out.println(\"Exception\" + ex);\n}\n return false;\n}\n```"]