["```java\n    spring.config.activate.on-profile: docker\n    server.port: 80 \n    ```", "```java\nprivate final String productServiceUrl = \"http://product\";\nprivate final String recommendationServiceUrl = \"http://recommendation\";\nprivate final String reviewServiceUrl = \"http://review\"; \n```", "```java\nserver.shutdown: graceful\nspring.lifecycle.timeout-per-shutdown-phase: 10s \n```", "```java\nmanagement.endpoint.health.probes.enabled: true\nmanagement.endpoint.health.group.readiness.include: readinessState, \nrabbit, db, mongo \n```", "```java\n|-- common\n|   |-- Chart.yaml\n|   |-- templates\n|   |-- templates_org\n|   `-- values.yaml\n|-- components\n|   |-- auth-server\n|   |-- config-server\n|   |-- gateway\n|   |-- mongodb\n|   |-- mysql\n|   |-- product\n|   |-- product-composite\n|   |-- rabbitmq\n|   |-- recommendation\n|   |-- review\n|   `-- zipkin-server\n`-- environments\n    |-- dev-env\n    `-- prod-env \n```", "```java\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"common.fullname\" . }}\nspec:\n  replicas: {{ .Values.replicaCount }}\n  template:\n    spec:\n      containers:\n        - name: {{ .Chart.Name }} \n```", "```java\n$name := .Release.Name \n```", "```java\n{{- define \"common.configmap_from_file\" -}}\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: {{ include \"common.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"common.name\" . }}\n    helm.sh/chart: {{ include \"common.chart\" . }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\ndata:\n{{ (.Files.Glob \"config-repo/*\").AsConfig | indent 2 }}\n{{- end -}} \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm/components/config-server\nhelm dependency update .\nhelm template . -s templates/configmap_from_file.yaml \n```", "```java\n---\n# Source: config-server/templates/configmap_from_file.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: config-server\n  labels:\n    app.kubernetes.io/name: config-server\n    helm.sh/chart: config-server-1.0.0\n    app.kubernetes.io/managed-by: Helm\ndata:\n  application.yml: |-\n    app:\n      auth-server: localhost\n  ...\n  auth-server.yml: |-\n    server.port: 9999\n  ... \n```", "```java\n{{- define \"common.secrets\" -}}\n{{- range $secretName, $secretMap := .Values.secrets }}\napiVersion: v1\nkind: Secret\nmetadata:\n  name: {{ $secretName }}\n  labels:\n    app.kubernetes.io/name: {{ $secretName }}\n    helm.sh/chart: {{ include \"common.chart\" $ }}\n    app.kubernetes.io/managed-by: {{ $.Release.Service }}\ntype: Opaque\ndata:\n{{- range $key, $val := $secretMap }}\n  {{ $key }}: {{ $val | b64enc }}\n{{- end }}\n---\n{{- end -}}\n{{- end -}} \n```", "```java\n    secrets:\n      a-secret:\n        key-1: secret-value-1\n        key-2: secret-value-2\n      another-secret:\n        key-3: secret-value-3 \n    ```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm\nfor f in components/*; do helm dependency update $f; done\nhelm dependency update environments/dev-env\nhelm template environments/dev-env -s templates/secrets.yaml \n```", "```java\n---\n# Source: dev-env/templates/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: config-client-credentials\n  labels:\n    app.kubernetes.io/name: config-client-credentials\n    helm.sh/chart: dev-env-1.0.0\n    app.kubernetes.io/managed-by: Helm\ntype: Opaque\ndata:\n  CONFIG_SERVER_PWD: ZGV2LXB3ZA==\n  CONFIG_SERVER_USR: ZGV2LXVzcg==\n---\n# Source: dev-env/templates/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: config-server-secrets\n  labels:\n    app.kubernetes.io/name: config-server-secrets\n    helm.sh/chart: dev-env-1.0.0\n    app.kubernetes.io/managed-by: Helm\ntype: Opaque\ndata:\n  ENCRYPT_KEY: bXktdmVyeS1zZWN1cmUtZW5jcnlwdC1rZXk=\n  SPRING_SECURITY_USER_NAME: ZGV2LXVzcg==\n  SPRING_SECURITY_USER_PASSWORD: ZGV2LXB3ZA== \n```", "```java\n{{- define \"common.service\" -}}\n{{- $common := dict \"Values\" .Values.common -}} \n{{- $noCommon := omit .Values \"common\" -}} \n{{- $overrides := dict \"Values\" $noCommon -}} \n{{- $noValues := omit . \"Values\" -}} \n{{- with merge $noValues $overrides $common -}} \n```", "```java\n Service:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: http\n    protocol: TCP\n    name: http \n```", "```java\nservice:\n  type: NodePort\n  ports:\n  - port: 443\n    targetPort: 8443\n    nodePort: 30443 \n```", "```java\napiVersion: v1\nkind: Service\nmetadata:\n  name: {{ include \"common.fullname\" . }}\n  labels: \n    app.kubernetes.io/name: {{ include \"common.name\" . }}\n    helm.sh/chart: {{ include \"common.chart\" . }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }}\nspec:\n  type: {{ .Values.service.type }}\n  ports:\n{{ toYaml .Values.service.ports | indent 4 }}\n  selector:\n    app.kubernetes.io/name: {{ include \"common.name\" . }}\n{{- end -}}\n{{- end -}} \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm\nhelm dependency update components/product\nhelm template components/product -s templates/service.yaml \n```", "```java\n# Source: product/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: product\n  labels:\n    app.kubernetes.io/name: product\n    helm.sh/chart: product-1.0.0\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: ClusterIP\n  ports:\n    - name: http\n      port: 80\n      protocol: TCP\n      targetPort: http\n  selector:\n    app.kubernetes.io/name: product \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm\nhelm dependency update components/gateway\nhelm template components/gateway -s templates/service.yaml \n```", "```java\n---\n# Source: gateway/templates/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: gateway\n  labels:\n    app.kubernetes.io/name: gateway\n    helm.sh/chart: gateway-1.0.0\n    app.kubernetes.io/managed-by: Helm\nspec:\n  type: NodePort\n  ports:\n    - nodePort: 30443\n      port: 443\n      targetPort: 8443\n  selector:\n    app.kubernetes.io/name: gateway \n```", "```java\n{{- define \"common.deployment\" -}}\n{{- $common := dict \"Values\" .Values.common -}} \n{{- $noCommon := omit .Values \"common\" -}} \n{{- $overrides := dict \"Values\" $noCommon -}} \n{{- $noValues := omit . \"Values\" -}} \n{{- with merge $noValues $overrides $common -}}\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: {{ include \"common.fullname\" . }}\n  labels:\n    app.kubernetes.io/name: {{ include \"common.name\" . }}\n    helm.sh/chart: {{ include \"common.chart\" . }}\n    app.kubernetes.io/managed-by: {{ .Release.Service }} \n```", "```java\nspec:\n  replicas: {{ .Values.replicaCount }}\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: {{ include \"common.name\" . }}\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: {{ include \"common.name\" . }}\n    spec:\n      containers:\n        - name: {{ .Chart.Name }}\n          image: \"{{ .Values.image.repository }}/{{ .Values.image.name }}:{{ .Values.image.tag }}\"\n          imagePullPolicy: {{ .Values.image.pullPolicy }} \n```", "```java\n args:\n            {{- toYaml . | nindent 12 }}\n          {{- end }}\n          {{- if .Values.env }}\n          env:\n          {{- range $key, $val := .Values.env }}\n          - name: {{ $key }}\n            value: {{ $val }}\n          {{- end }}\n          {{- end }}\n          {{- if .Values.envFromSecretRefs }}\n          envFrom:\n          {{- range .Values.envFromSecretRefs }}\n          - secretRef:\n              name: {{ . }}\n          {{- end }}\n          {{- end }}\n          {{- if .Values.livenessProbe_enabled }}\n          livenessProbe:\n{{ toYaml .Values.livenessProbe | indent 12 }}\n          {{- end }}\n          {{- if .Values.readinessProbe_enabled }}\n          readinessProbe:\n{{ toYaml .Values.readinessProbe | indent 12 }}\n          {{- end }} \n```", "```java\n ports:\n{{ toYaml .Values.ports | indent 12 }}\n          resources:\n{{ toYaml .Values.resources | indent 12 }}\n      {{- if .Values.configmap.enabled }}\n          volumeMounts:\n          - name: {{ include \"common.fullname\" . }}\n            mountPath: {{ .Values.configmap.volumeMounts.mountPath }}\n      volumes:\n        - name: {{ include \"common.fullname\" . }}\n          configMap:\n            name: {{ include \"common.fullname\" . }}\n      {{- end }}\n{{- end -}}\n{{- end -}} \n```", "```java\nlivenessProbe_enabled: false\nlivenessProbe:\n  httpGet:\n    scheme: HTTP\n    path: /actuator/health/liveness\n    port: 80\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 2\n  failureThreshold: 20\n  successThreshold: 1\nreadinessProbe_enabled: false\nreadinessProbe:\n  httpGet:\n    scheme: HTTP\n    path: /actuator/health/readiness\n    port: 80\n  initialDelaySeconds: 10\n  periodSeconds: 10\n  timeoutSeconds: 2\n  failureThreshold: 3\n  successThreshold: 1 \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm\nhelm dependency update components/product\nhelm template components/product -s templates/deployment.yaml \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm\nhelm dependency update components/mongodb\nhelm template components/mongodb -s templates/deployment.yaml \n```", "```java\n---\n# Source: mongodb/templates/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mongodb\n  labels:\n    app.kubernetes.io/name: mongodb\n    helm.sh/chart: mongodb-1.0.0\n    app.kubernetes.io/managed-by: Helm\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: mongodb\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: mongodb\n    spec:\n      containers:\n        - name: mongodb\n          image: \"registry.hub.docker.com/library/mongo:6.0.4\"\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 27017\n          resources:\n            limits:\n              memory: 350Mi \n```", "```java\n    {{- template \"common.service\" . -}} \n    ```", "```java\n    fullnameOverride: auth-server\n    image:\n      name: auth-server\n    env:\n      SPRING_PROFILES_ACTIVE: \"docker\"\n    livenessProbe_enabled: true\n    readinessProbe_enabled: true \n    ```", "```java\n{{- template \"common.configmap_from_file\" . -}} \n```", "```java\ncd $BOOK_HOME/Chapter16/kubernetes/helm/components/config-server\nln -s ../../../../config-repo config-repo \n```", "```java\n{{- template \"common.secrets\" . -}} \n```", "```java\nsecrets:\n  config-server-secrets:\n    ENCRYPT_KEY: my-very-secure-encrypt-key\n    SPRING_SECURITY_USER_NAME: dev-usr\n    SPRING_SECURITY_USER_PASSWORD: dev-pwd \n```", "```java\napiVersion: v1\nkind: Secret\nmetadata:\n  name: config-server-secrets\n  labels:\n    ...\ntype: Opaque\ndata:\n  ENCRYPT_KEY: bXktdmVyeS1zZWN1cmUtZW5jcnlwdC1rZXk=\n  SPRING_SECURITY_USER_NAME: ZGV2LXVzcg==\n  SPRING_SECURITY_USER_PASSWORD: ZGV2LXB3ZA== \n```", "```java\nconfig-server:\n  envFromSecretRefs:\n    - config-server-secrets \n```", "```java\nproduct:\n  image:\n    tag: v1\n  env:\n    SPRING_PROFILES_ACTIVE: \"docker,prod\" \n```", "```java\ncd $BOOK_HOME/Chapter16\n./gradlew build\neval $(minikube docker-env)\ndocker-compose build \n```", "```java\n product:\n    build: microservices/product-service\n    image: hands-on/product-service \n```", "```java\nfor f in kubernetes/helm/components/*; do helm dep up $f; done \n```", "```java\nfor f in kubernetes/helm/environments/*; do helm dep up $f; done \n```", "```java\nhelm dep ls kubernetes/helm/environments/dev-env/ \n```", "```java\n    eval $(minikube docker-env)\n    docker pull mysql:8.0.32 \n    docker pull mongo:6.0.4\n    docker pull rabbitmq:3.11.8-management\n    docker pull openzipkin/zipkin:2.24.0 \n    ```", "```java\n    helm template kubernetes/helm/environments/dev-env \n    ```", "```java\n    helm install --dry-run --debug hands-on-dev-env \\\n     kubernetes/helm/environments/dev-env \n    ```", "```java\n    helm install hands-on-dev-env \\\n      kubernetes/helm/environments/dev-env \\\n      -n hands-on \\\n      --create-namespace \n    ```", "```java\n    kubectl config set-context $(kubectl config current-context) --namespace=hands-on \n    ```", "```java\n    kubectl get pods --watch \n    ```", "```java\n        kubectl wait --timeout=600s --for=condition=ready pod --all \n        ```", "```java\n    kubectl get pods -o json | jq .items[].spec.containers[].image \n    ```", "```java\nPORT=30443 USE_K8S=true ./test-em-all.bash \n```", "```java\n     env:\n        RESILIENCE4J_TIMELIMITER_INSTANCES_PRODUCT_TIMEOUTDURATION: 20s \n    ```", "```java\n    product-composite:\n      env:\n        RESILIENCE4J_TIMELIMITER_INSTANCES_PRODUCT_TIMEOUTDURATION: 20s\n      envFromSecretRefs:\n        - config-client-credentials \n    ```", "```java\n    helm upgrade hands-on-dev-env -n hands-on \\\n      kubernetes/helm/environments/dev-env --wait \n    ```", "```java\n    ACCESS_TOKEN=$(curl -d grant_type=client_credentials \\\n     -ks https://writer:secret-writer@localhost:30443/oauth2/token \\\n     -d scope=\"product:read product:write\" \\\n     | jq .access_token -r) \n    ```", "```java\n    time curl -kH \"Authorization: Bearer $ACCESS_TOKEN\" \\\n      https://localhost:30443/product-composite/1?delay=5 \n    ```", "```java\n    siege -c5 -d2 -v -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n      https://localhost:30443/product-composite/1?delay=5 \n    ```", "```java\n    HTTP/1.1 200 5.04 secs: 771 bytes ==> GET /product-composite/1?delay=5 \n    ```", "```java\n    kubectl logs -f --tail=0 -l app.kubernetes.io/name=product \n    ```", "```java\n    kubectl rollout restart deploy/product \n    ```", "```java\n    siege -c5 -d5 -v -H \"Authorization: Bearer $ACCESS_TOKEN\" \\\n      https://localhost:30443/product-composite/1?delay=15 \n    ```", "```java\n    kubectl logs -f --tail=0 -l app.kubernetes.io/name=product \n    ```", "```java\n    kubectl rollout restart deploy/product \n    ```", "```java\n    helm rollback hands-on-dev-env -n hands-on --wait \n    ```", "```java\n    PORT=30443 USE_K8S=true ./test-em-all.bash \n    ```", "```java\n    kubectl exec -it deploy/product -- \\\n      curl localhost/actuator/health/liveness -s | jq . \n    ```", "```java\n    kubectl exec -it deploy/product -- \\\n      curl localhost/actuator/health/readiness -s | jq . \n    ```", "```java\nkubectl delete namespace hands-on \n```", "```java\n    spring.config.activate.on-profile: prod \n    ```", "```java\n        spring.rabbitmq.host: 172.17.0.1\n        spring.data.mongodb.host: 172.17.0.1\n        spring.datasource.url: jdbc:mysql://172.17.0.1:3306/review-db \n        ```", "```java\n    logging.level.root: WARN \n    ```", "```java\n    management.endpoints.web.exposure.include: health,info,circuitbreakerevents \n    ```", "```java\neval $(minikube docker-env)\ndocker-compose up -d mongodb mysql rabbitmq \n```", "```java\ndocker tag hands-on/auth-server hands-on/auth-server:v1\ndocker tag hands-on/config-server hands-on/config-server:v1\ndocker tag hands-on/gateway hands-on/gateway:v1 \ndocker tag hands-on/product-composite-service hands-on/product-composite-service:v1 \ndocker tag hands-on/product-service hands-on/product-service:v1\ndocker tag hands-on/recommendation-service hands-on/recommendation-service:v1\ndocker tag hands-on/review-service hands-on/review-service:v1 \n```", "```java\n    helm install hands-on-prod-env \\ kubernetes/helm/environments/prod-env \\\n    -n hands-on --create-namespace \n    ```", "```java\n    kubectl wait --timeout=600s --for=condition=ready pod --all \n    ```", "```java\n    kubectl get pods -o json | jq .items[].spec.containers[].image \n    ```", "```java\n    CONFIG_SERVER_USR=prod-usr \\\n    CONFIG_SERVER_PWD=prod-pwd \\\n    PORT=30443 USE_K8S=true ./test-em-all.bash \n    ```", "```java\n    kubectl delete namespace hands-on \n    ```", "```java\n    eval $(minikube docker-env)\n    docker-compose down\n    eval $(minikube docker-env -u) \n    ```", "```java\n    {{- $common := dict \"Values\" .Values.common -}} \n    {{- $noCommon := omit .Values \"common\" -}} \n    {{- $overrides := dict \"Values\" $noCommon -}} \n    {{- $noValues := omit . \"Values\" -}} \n    {{- with merge $noValues $overrides $common -}} \n    ```", "```java\n    {{- define \"common.secrets\" -}}\n    {{- range $secretName, $secretMap := .Values.secrets }}\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: {{ $secretName }}\n      labels:\n        app.kubernetes.io/name: {{ $secretName }}\n    type: Opaque\n    data:\n    {{- range $key, $val := $secretMap }}\n      {{ $key }}: {{ $val | b64enc }}\n    {{- end }}\n    {{- end -}}\n    {{- end -}} \n    ```", "```java\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: review\n      labels:\n        app.kubernetes.io/name: review\n    spec:\n      type: ClusterIP\n      ports:\n        - name: http\n          port: 80\n          protocol: TCP\n          targetPort: http\n      selector:\n        app.kubernetes.io/pod-name: review\n    ---\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: review\n      labels:\n        app.kubernetes.io/name: review\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app.kubernetes.io/name: review\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: review\n        spec:\n          containers:\n            - name: review\n              image: \"hands-on/review-service:latest\"\n              ports:\n                - containerPort: 80\n                  name: http-port\n                  protocol: TCP \n    ```"]