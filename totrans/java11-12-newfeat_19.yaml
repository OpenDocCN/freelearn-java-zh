- en: Raw String Literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Have you ever felt the pain of using string types to store SQL queries in Java,
    with multiple opening and closing, single and double quotes? To add to the misery,
    perhaps you have used newline escape sequences and concatenation operators. Similar
    discomfort applies to using string types with HTML, XML, or JSON code. If you
    dread all of these combinations like I do, fear no more. Raw string literals are
    here to save you from the pain.
  prefs: []
  type: TYPE_NORMAL
- en: With raw string literals, you can easily work with readable, multiline string
    values, without including special newline indicators. Since raw string literals
    don't interpret escape sequences, it is simple to include escape sequences as
    part of the string values. The related classes also include management of margins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The advantages and difficulties of using escape sequences in string values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New methods added to the `String` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Margin management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delimiters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of using raw strings with varied multiline text data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code in this chapter will use raw string literals, which are meant for JDK
    12 (Mar 2019). You can clone the repository that includes raw string literals
    to experiment with it.
  prefs: []
  type: TYPE_NORMAL
- en: All of the code in this chapter can be accessed at [https://github.com/PacktPublishing/Java-11-and-12-New-Features](https://github.com/PacktPublishing/Java-11-and-12-New-Features).
  prefs: []
  type: TYPE_NORMAL
- en: A quick example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Are you excited to see raw strings in action? I am. Let's look at a quick example,
    before diving into the problems that led to the introduction of raw strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how you can write a multiline string value with raw
    string literals, using a backtick (`` ` ``) as the delimiter, without using a
    concatenation operator or special indicators for a newline or tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Issues with existing multiline string values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creation of multiline string values is common in most programming languages,
    including Java. You might use them to create HTML code, a JSON or XML value, or
    an SQL query. But this seemingly simple task becomes complicated with the use
    of escape sequences (of newline or tab indicators).
  prefs: []
  type: TYPE_NORMAL
- en: To make your multiline string values readable, you might define parts of your
    string values on separate lines, using the concatenation operator (`+`) to glue
    them together. However, with increasing string lengths, this can become difficult
    to write and comprehend.
  prefs: []
  type: TYPE_NORMAL
- en: Let's outline the simple task of creating a multiline string, and then use multiple
    approaches to store it as a string value.
  prefs: []
  type: TYPE_NORMAL
- en: A simple task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Suppose that you have to define the following multiline value using the string
    type, keeping its indentation in place:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Escape sequence hell with traditional string literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To add a newline or tab to a traditional string value, you can use the escape
    sequences `\n` and `\t`. Escape sequences are letters preceded with `\` (a backslash),
    and they have a special meaning in Java. For example in Java strings, `\n` is
    used as a newline, and `\t` is used as a tab.
  prefs: []
  type: TYPE_NORMAL
- en: An escape sequence is a letter combination used for values that can't be represented
    directly. For instance, to use the newline control character from ASCII, Java
    uses `\n`. Java defines multiple other escape sequences.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows how you can store the multiline string value with
    newline and tab escape sequences. The newline and tab escape sequences will include
    the indentation in the variable HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the preceding can be difficult to write. You'll have to figure
    out the newlines and count the tabs in the target string value, and insert them
    as `\n` or `\t`. Another challenge is reading this code. You'll have to try to
    figure out line by line what the code is intended to do.
  prefs: []
  type: TYPE_NORMAL
- en: Concatenation hell with traditional string literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following is an alternative that is meant to make the preceding code readable,
    by defining parts of the string value on multiple lines. However, when doing so,
    you should use multiple string concatenation operators (`+`) and string delimiters
    (`"`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'I would prefer to add whitespaces to the preceding code, to make it more readable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Although the preceding code looks better in terms of readability, it delegates
    a lot of responsibility to the programmer, to insert whitespaces in the correct
    places. As a quick note, the whitespaces (outside of the double quotes) aren't
    a part of the variable HTML; they just make it readable. As a developer, it's
    a pain to write such code.
  prefs: []
  type: TYPE_NORMAL
- en: The Java GUI library doesn't work with the control characters, such as the newline.
    So, this approach can be used with GUI classes.
  prefs: []
  type: TYPE_NORMAL
- en: Including escape sequences as part of string values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Imagine what happens when the letter combination represented by an escape sequence
    (let''s say, `\n`) must be included as a part of the string value. Let''s modify
    our example, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, you can escape the `\n` sequence by using another backslash,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: But, with the changes, it's getting difficult to read and understand the preceding
    code. Imagine a developer in your team writes such code. Let's see how you could
    make it more readable.
  prefs: []
  type: TYPE_NORMAL
- en: As a workaround, you can define `String` constants (say, `tab` or `newLine`),
    assigning the values of `\t` and `\n` to them. You can use these constants instead
    of the literal values of `\n` and `\t` in the preceding code. This replacement
    will make the code easier to read.
  prefs: []
  type: TYPE_NORMAL
- en: Strings and regex patterns, another hell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will provide another example of escaping sequence hell—defining
    regex patterns as Java strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'To remove whitespaces (spaces or tabs) between a word character and a period
    (`.`), you''ll need the following **regex** (**regular expression**) pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To store it using a Java string, you''ll need the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: I'll share a quick secret here—when I started working with Java, one of my biggest
    nightmares was defining patterns as string values. I admit it; I had a difficulty
    writing patterns, and using the `\` escape character with the sequences in my
    patterns made my life miserable.
  prefs: []
  type: TYPE_NORMAL
- en: This is also referred to as **leaning toothpick syndrome **(**LTS**)—making
    string values unreadable by using a lot of backslashes.
  prefs: []
  type: TYPE_NORMAL
- en: Let's put an end to this string misery by using raw string literals.
  prefs: []
  type: TYPE_NORMAL
- en: Welcoming raw string literals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The raw string literals are non-interpreted string literals. In real-world projects,
    you would need to work with literal string values as is, without any special handling
    of the Unicode values, backslashes, or newlines. Raw string literals set aside
    Java escapes and Java line terminator specifications, in order to make the code
    readable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: Rewriting using raw strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can define a multiline string value by using raw literals, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By using `` ` `` as the opening and closing delimiter, you can define multiline
    string literals with ease and elegance.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding code is free from Java indicators (concatenation operators or
    escape sequences).
  prefs: []
  type: TYPE_NORMAL
- en: The delimiter (backtick)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A raw string literal is defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: A backtick is used as the delimiter for raw string literals. I believe that
    using `` ` `` for raw string literals is a good decision. The `` ` `` backtick
    looks like `'` (a single quote) and `"` (a double quote), which have been used
    as delimiters for character and string literals. The `` ` `` backtick will help
    Java programmers to easily see it as a delimiter for raw strings.
  prefs: []
  type: TYPE_NORMAL
- en: A raw string literal uses `` ` `` as a delimiter. A traditional string literal
    uses `"` as a delimiter and a character uses `'` as a delimiter.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to include one backtick as a part of the string value, you can
    use two backticks ([PRE11]) to define your value. This works for *n* number of
    backticks; just make sure to match the count of opening and closing backticks.
    This sounds interesting. Let''s look at an example that includes `` ` `` as part
    of its value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is another example, which uses multiple backticks in the string
    value and as delimiters. Of course, the count of backticks included in the string
    value is not equal to the count of backticks used as delimiters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]`<HTML>'
  prefs: []
  type: TYPE_NORMAL
- en: <BODY>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <H1>I believe I would have liked [PRE14]`;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: public String unescape() {...}
  prefs: []
  type: TYPE_NORMAL
- en: public String escape() {...}
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: System.out.print("eJava");
  prefs: []
  type: TYPE_NORMAL
- en: System.out.print("\\n");
  prefs: []
  type: TYPE_NORMAL
- en: System.out.print("Guru");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: eJava\nGuru
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: System.out.print("eJava");
  prefs: []
  type: TYPE_NORMAL
- en: System.out.print(`\n`.unescape());      // Don't ignore the escape char
  prefs: []
  type: TYPE_NORMAL
- en: System.out.print("Guru");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: eJava
  prefs: []
  type: TYPE_NORMAL
- en: Guru
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: System.out.print(`\n`.unescape().length());
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: System.out.println("eJava" + "\n".escape() + "Guru");
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: eJava\nGuru
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: System.out.println("eJava" + `•`.escape());
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: eJava\u2022Guru
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: String comment =
  prefs: []
  type: TYPE_NORMAL
- en: '`one'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.align();'
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println(comment);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: one
  prefs: []
  type: TYPE_NORMAL
- en: of
  prefs: []
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: String comment =
  prefs: []
  type: TYPE_NORMAL
- en: '`one'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.align().indent(15);'
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println(comment);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: one
  prefs: []
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: String comment =
  prefs: []
  type: TYPE_NORMAL
- en: '`one'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.align(15);'
  prefs: []
  type: TYPE_NORMAL
- en: System.out.println(comment);
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: one
  prefs: []
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: public String detab(int)
  prefs: []
  type: TYPE_NORMAL
- en: public String entab(int)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: String comment =
  prefs: []
  type: TYPE_NORMAL
- en: '`one'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: of
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: my
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: favorite
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: lang
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: feature
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.detab(1);'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: one
  prefs: []
  type: TYPE_NORMAL
- en: of
  prefs: []
  type: TYPE_NORMAL
- en: my
  prefs: []
  type: TYPE_NORMAL
- en: favorite
  prefs: []
  type: TYPE_NORMAL
- en: lang
  prefs: []
  type: TYPE_NORMAL
- en: feature
  prefs: []
  type: TYPE_NORMAL
- en: from Amber(!)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[ Talks - Java11, Amber, CleanCode'
  prefs: []
  type: TYPE_NORMAL
- en: '[ Oceans - plastic pollution, human callousness'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: <R> R transform (Function<String, R> f)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: String stripped = `
  prefs: []
  type: TYPE_NORMAL
- en: '[ Talks - Java11, Amber, CleanCode'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[ Oceans - dying, human callousness, plastic'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: pollution
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`.transform({'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: multiLineText.stream()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map(e -> e.map(String::strip)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .map(s -> s.startsWith("[  ") ?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: s.substring("[  ".length())
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ': s)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: .collect(Collectors.joining("\n", "", "\n"));
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '});'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '{"plastic": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"id": "98751",'
  prefs: []
  type: TYPE_NORMAL
- en: '"singleuse": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"item": ['
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"value": "Water Bottle", "replaceWith": "Steel Bottle()"},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"value": "Straw", "replaceWith": "Ban Straws"},'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{"value": "Spoon", "replaceWith": "Steel Spoon"}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ']'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: String data =
  prefs: []
  type: TYPE_NORMAL
- en: '"{\"plastic\": { \n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"\"id\": \"98751\", \n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"\"singleuse\": { \n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"\"item\": [ \n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"{\"value\": \"Water Bottle\", \"replaceWith\": \"Steel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Bottle()\"}, \n" +
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"{\"value\": \"Straw\", \"replaceWith\": \"Ban Straws\"}, \n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"{\"value\": \"Spoon\", \"replaceWith\": \"Steel Spoon\"} \n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"] \n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"} \n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"}}";'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: String data =
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40];'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: <plastic id="98751">
  prefs: []
  type: TYPE_NORMAL
- en: <singleuse>
  prefs: []
  type: TYPE_NORMAL
- en: <item value="Water Bottle" replaceWith="Steel bottle" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <item value="Straw" replaceWith="Ban Straws" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <item value="spoon" replaceWith="Steel Spoon" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </singleuse>
  prefs: []
  type: TYPE_NORMAL
- en: </plastic>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: String data =
  prefs: []
  type: TYPE_NORMAL
- en: '"<plastic id=\"98751\">\n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"<singleuse>\n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"<item value=\"Water Bottle\" replaceWith=\"Steel bottle\" />\n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"<item value=\"Straw\" replaceWith=\"Ban Straws\" />\n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"<item value=\"spoon\" replaceWith=\"Steel Spoon\" />\n" +'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"</singleuse>\n" +'
  prefs: []
  type: TYPE_NORMAL
- en: '"</plastic>";'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: String dataUsingRawStrings =
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44];'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: String filePath = "C:\\Mala\\eJavaGuru\\ocp11.txt";
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: String rawFilePath = `C:\Mala\eJavaGuru\ocp11.txt`;
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: String query = "SELECT talk_title, speaker_name " +
  prefs: []
  type: TYPE_NORMAL
- en: '"FROM   talks, speakers " +'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"WHERE  talks.speaker_id = speakers.speaker_id " +'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"AND    talks.duration > 50 ";'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: String query = "SELECT 'talk_title', 'speaker_name' " +
  prefs: []
  type: TYPE_NORMAL
- en: '"FROM   ''talks'', ''speakers'' " +'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"WHERE  ''talks.speaker_id'' = ''speakers.speaker_id'' " +'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '"AND    ''talks.duration'' > 50 ";'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: String query =
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50];'
  prefs: []
  type: TYPE_NORMAL
- en: '```'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the challenges that developers face when storing
    various types of multiline text values as string values. Raw string literals address
    these concerns. They also significantly improve the writability and readability
    of multiline string values by disabling the lexical analysis of escape characters
    and escape sequences. Raw string literals will introduce multiple methods to the
    `String` class, such as `unescape()`, `escape()`, `align()`, `indent()`, and `transform()`.
    Together, these methods enable developers to specifically process the raw string
    literals.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll cover how the lambda leftovers project is improving
    the functional programming syntax and experience in Java.
  prefs: []
  type: TYPE_NORMAL
