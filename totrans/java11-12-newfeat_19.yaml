- en: Raw String Literals
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原始字符串字面量
- en: Have you ever felt the pain of using string types to store SQL queries in Java,
    with multiple opening and closing, single and double quotes? To add to the misery,
    perhaps you have used newline escape sequences and concatenation operators. Similar
    discomfort applies to using string types with HTML, XML, or JSON code. If you
    dread all of these combinations like I do, fear no more. Raw string literals are
    here to save you from the pain.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经因为使用字符串类型在 Java 中存储 SQL 查询而感到痛苦，因为需要多次使用开闭引号、单引号和双引号？更糟糕的是，你可能还使用了换行转义序列和连接运算符。类似的痛苦也适用于使用字符串类型与
    HTML、XML 或 JSON 代码。如果你像我一样害怕所有这些组合，那么不必再害怕。原始字符串字面量就在这里，帮助你摆脱痛苦。
- en: With raw string literals, you can easily work with readable, multiline string
    values, without including special newline indicators. Since raw string literals
    don't interpret escape sequences, it is simple to include escape sequences as
    part of the string values. The related classes also include management of margins.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 使用原始字符串字面量，你可以轻松地处理可读的多行字符串值，而不需要包含特殊的新行指示符。由于原始字符串字面量不解释转义序列，因此将转义序列作为字符串值的一部分包含变得非常简单。相关的类还包括对边距的管理。
- en: 'In this chapter, we''ll cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The advantages and difficulties of using escape sequences in string values
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用转义序列在字符串值中的优点和困难
- en: New methods added to the `String` class
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加到 `String` 类的新方法
- en: Margin management
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边距管理
- en: Delimiters
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分隔符
- en: Examples of using raw strings with varied multiline text data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用原始字符串与多行文本数据的示例
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code in this chapter will use raw string literals, which are meant for JDK
    12 (Mar 2019). You can clone the repository that includes raw string literals
    to experiment with it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码将使用原始字符串字面量，这些字面量是为 JDK 12（2019 年 3 月）设计的。您可以克隆包含原始字符串字面量的存储库来实验它。
- en: All of the code in this chapter can be accessed at [https://github.com/PacktPublishing/Java-11-and-12-New-Features](https://github.com/PacktPublishing/Java-11-and-12-New-Features).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有代码都可以在[https://github.com/PacktPublishing/Java-11-and-12-New-Features](https://github.com/PacktPublishing/Java-11-and-12-New-Features)找到。
- en: A quick example
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速示例
- en: Are you excited to see raw strings in action? I am. Let's look at a quick example,
    before diving into the problems that led to the introduction of raw strings.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否迫不及待地想看到原始字符串的实际应用？我也是。在深入探讨导致原始字符串引入的问题之前，让我们先快速看一下示例。
- en: 'The following code shows how you can write a multiline string value with raw
    string literals, using a backtick (`` ` ``) as the delimiter, without using a
    concatenation operator or special indicators for a newline or tab:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用原始字符串字面量编写多行字符串值，使用反引号（`` ` ``）作为分隔符，而不使用连接运算符或特殊的新行或制表符指示符：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Issues with existing multiline string values
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现有多行字符串值的问题
- en: The creation of multiline string values is common in most programming languages,
    including Java. You might use them to create HTML code, a JSON or XML value, or
    an SQL query. But this seemingly simple task becomes complicated with the use
    of escape sequences (of newline or tab indicators).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程语言中，包括 Java，创建多行字符串值是常见的。你可能使用它们来创建 HTML 代码、JSON 或 XML 值，或者 SQL 查询。但是，使用转义序列（新行或制表符指示符的转义序列）的这个看似简单的任务会变得复杂。
- en: To make your multiline string values readable, you might define parts of your
    string values on separate lines, using the concatenation operator (`+`) to glue
    them together. However, with increasing string lengths, this can become difficult
    to write and comprehend.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使你的多行字符串值可读，你可能会在单独的行上定义字符串值的一部分，使用连接运算符（`+`）将它们粘合在一起。然而，随着字符串长度的增加，这可能会变得难以编写和理解。
- en: Let's outline the simple task of creating a multiline string, and then use multiple
    approaches to store it as a string value.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们概述创建多行字符串的简单任务，然后使用多种方法将其存储为字符串值。
- en: A simple task
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个简单的任务
- en: 'Suppose that you have to define the following multiline value using the string
    type, keeping its indentation in place:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你必须使用字符串类型定义以下多行值，同时保持其缩进位置：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Escape sequence hell with traditional string literals
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统字符串字面量的转义序列地狱
- en: To add a newline or tab to a traditional string value, you can use the escape
    sequences `\n` and `\t`. Escape sequences are letters preceded with `\` (a backslash),
    and they have a special meaning in Java. For example in Java strings, `\n` is
    used as a newline, and `\t` is used as a tab.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要向传统字符串值中添加换行符或制表符，你可以使用转义序列 `\n` 和 `\t`。转义序列是前面带有 `\`（反斜杠）的字母，它们在 Java 中有特殊含义。例如，在
    Java 字符串中，`\n` 被用作换行符，而 `\t` 被用作制表符。
- en: An escape sequence is a letter combination used for values that can't be represented
    directly. For instance, to use the newline control character from ASCII, Java
    uses `\n`. Java defines multiple other escape sequences.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 转义序列是用于表示不能直接表示的值的字母组合。例如，为了使用 ASCII 中的换行控制字符，Java 使用 `\n`。Java 定义了多个其他转义序列。
- en: 'The following code shows how you can store the multiline string value with
    newline and tab escape sequences. The newline and tab escape sequences will include
    the indentation in the variable HTML:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用换行符和制表符转义序列存储多行字符串值。换行符和制表符转义序列将包含在变量 HTML 中的缩进：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you can see, the preceding can be difficult to write. You'll have to figure
    out the newlines and count the tabs in the target string value, and insert them
    as `\n` or `\t`. Another challenge is reading this code. You'll have to try to
    figure out line by line what the code is intended to do.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '如你所见，前面的代码可能难以编写。你必须弄清楚新行和计算目标字符串值中的制表符，并将它们作为 `\n` 或 `\t` 插入。另一个挑战是阅读此代码。你必须尝试逐行弄清楚代码的意图。 '
- en: Concatenation hell with traditional string literals
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用传统字符串字面量的连接地狱
- en: 'The following is an alternative that is meant to make the preceding code readable,
    by defining parts of the string value on multiple lines. However, when doing so,
    you should use multiple string concatenation operators (`+`) and string delimiters
    (`"`):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个旨在通过在多行上定义字符串值的部分来使前面的代码可读的替代方案。然而，在这样做的时候，你应该使用多个字符串连接运算符（`+`）和字符串分隔符（`"`）：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'I would prefer to add whitespaces to the preceding code, to make it more readable:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我更愿意在前面代码中添加空格，使其更易于阅读：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Although the preceding code looks better in terms of readability, it delegates
    a lot of responsibility to the programmer, to insert whitespaces in the correct
    places. As a quick note, the whitespaces (outside of the double quotes) aren't
    a part of the variable HTML; they just make it readable. As a developer, it's
    a pain to write such code.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管前面的代码在可读性方面看起来更好，但它将大量责任委托给了程序员，在正确的位置插入空格。作为快速提示，空格（双引号之外）不是变量 HTML 的一部分；它们只是使其易于阅读。作为一个开发者，编写这样的代码是一种痛苦。
- en: The Java GUI library doesn't work with the control characters, such as the newline.
    So, this approach can be used with GUI classes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Java GUI 库不与控制字符（如换行符）一起工作。因此，这种方法可以与 GUI 类一起使用。
- en: Including escape sequences as part of string values
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将转义序列作为字符串值的一部分包含
- en: 'Imagine what happens when the letter combination represented by an escape sequence
    (let''s say, `\n`) must be included as a part of the string value. Let''s modify
    our example, as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，当由转义序列（比如说，`\n`）表示的字母组合必须作为字符串值的一部分包含时会发生什么。让我们修改我们的示例，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In this case, you can escape the `\n` sequence by using another backslash,
    as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以通过使用另一个反斜杠来转义 `\n` 序列，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: But, with the changes, it's getting difficult to read and understand the preceding
    code. Imagine a developer in your team writes such code. Let's see how you could
    make it more readable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，随着更改，前面的代码变得难以阅读和理解。想象一下，你的团队中的开发者编写了这样的代码。让我们看看你如何可以使它更易于阅读。
- en: As a workaround, you can define `String` constants (say, `tab` or `newLine`),
    assigning the values of `\t` and `\n` to them. You can use these constants instead
    of the literal values of `\n` and `\t` in the preceding code. This replacement
    will make the code easier to read.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种权宜之计，你可以定义 `String` 常量（比如说，`tab` 或 `newLine`），将 `\t` 和 `\n` 的值分配给它们。你可以使用这些常量代替前面代码中
    `\n` 和 `\t` 的字面值。这种替换将使代码更容易阅读。
- en: Strings and regex patterns, another hell
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串和正则表达式模式，另一个地狱
- en: This section will provide another example of escaping sequence hell—defining
    regex patterns as Java strings.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将提供另一个转义序列地狱的例子——将正则表达式定义为 Java 字符串。
- en: 'To remove whitespaces (spaces or tabs) between a word character and a period
    (`.`), you''ll need the following **regex** (**regular expression**) pattern:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要移除单词字符和句点（`.`）之间的空白（空格或制表符），你需要以下 **regex**（正则表达式）模式：
- en: '[PRE7]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To store it using a Java string, you''ll need the following code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Java字符串存储它，你需要以下代码：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: I'll share a quick secret here—when I started working with Java, one of my biggest
    nightmares was defining patterns as string values. I admit it; I had a difficulty
    writing patterns, and using the `\` escape character with the sequences in my
    patterns made my life miserable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里分享一个快速的秘密——当我开始使用Java时，我最可怕的噩梦之一就是将模式定义为字符串值。我承认；我写模式有困难，使用模式中的转义字符`\`使我的生活变得痛苦。
- en: This is also referred to as **leaning toothpick syndrome **(**LTS**)—making
    string values unreadable by using a lot of backslashes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这也被称为**倾斜牙签综合症**（**LTS**）——通过使用大量的反斜杠使字符串值难以阅读。
- en: Let's put an end to this string misery by using raw string literals.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用原始字符串字面量来结束这种字符串的痛苦。
- en: Welcoming raw string literals
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 欢迎原始字符串字面量
- en: The raw string literals are non-interpreted string literals. In real-world projects,
    you would need to work with literal string values as is, without any special handling
    of the Unicode values, backslashes, or newlines. Raw string literals set aside
    Java escapes and Java line terminator specifications, in order to make the code
    readable and maintainable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 原始字符串字面量是非解释字符串字面量。在实际项目中，你需要以原始方式处理字面量字符串值，而不需要对Unicode值、反斜杠或换行符进行特殊处理。原始字符串字面量将Java转义和Java行终止符规范放在一边，以便使代码可读性和可维护性。
- en: Rewriting using raw strings
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用原始字符串重写
- en: 'You can define a multiline string value by using raw literals, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用原始字面量来定义多行字符串值，如下所示：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By using `` ` `` as the opening and closing delimiter, you can define multiline
    string literals with ease and elegance.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用 `` ` `` 作为开头和结尾分隔符，你可以轻松优雅地定义多行字符串字面量。
- en: The preceding code is free from Java indicators (concatenation operators or
    escape sequences).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码不包含Java指示符（连接运算符或转义序列）。
- en: The delimiter (backtick)
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分隔符（反引号）
- en: 'A raw string literal is defined as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原始字符串字面量定义为如下：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: A backtick is used as the delimiter for raw string literals. I believe that
    using `` ` `` for raw string literals is a good decision. The `` ` `` backtick
    looks like `'` (a single quote) and `"` (a double quote), which have been used
    as delimiters for character and string literals. The `` ` `` backtick will help
    Java programmers to easily see it as a delimiter for raw strings.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个反引号用作原始字符串字面量的分隔符。我相信使用 `` ` `` 作为原始字符串字面量的分隔符是一个好决定。`` ` `` 反引号看起来像 `'`（单引号）和
    `"`（双引号），它们已经被用作字符和字符串字面量的分隔符。`` ` `` 反引号将帮助Java程序员轻松将其视为原始字符串的分隔符。
- en: A raw string literal uses `` ` `` as a delimiter. A traditional string literal
    uses `"` as a delimiter and a character uses `'` as a delimiter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 原始字符串字面量使用 `` ` `` 作为分隔符。传统的字符串字面量使用 `"` 作为分隔符，字符使用 `'` 作为分隔符。
- en: 'If you wish to include one backtick as a part of the string value, you can
    use two backticks ([PRE11]) to define your value. This works for *n* number of
    backticks; just make sure to match the count of opening and closing backticks.
    This sounds interesting. Let''s look at an example that includes `` ` `` as part
    of its value:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望将一个反引号作为字符串值的一部分，你可以使用两个反引号 ([PRE11]) 来定义你的值。这适用于 *n* 个反引号；只需确保匹配开闭反引号的数量。这听起来很有趣。让我们看看一个包含
    `` ` `` 作为其值一部分的例子：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following is another example, which uses multiple backticks in the string
    value and as delimiters. Of course, the count of backticks included in the string
    value is not equal to the count of backticks used as delimiters:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是另一个例子，它使用字符串值中的多个反引号作为分隔符。当然，字符串值中包含的反引号数量不等于用作分隔符的反引号数量：
- en: '[PRE13]`<HTML>'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE13]`<HTML>'
- en: <BODY>
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <BODY>
- en: <H1>I believe I would have liked [PRE14]`;
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <H1>I believe I would have liked [PRE14]`;
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: public String unescape() {...}
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: public String unescape() {...}
- en: public String escape() {...}
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: public String escape() {...}
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: System.out.print("eJava");
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("eJava");
- en: System.out.print("\\n");
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("\\n");
- en: System.out.print("Guru");
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("Guru");
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: eJava\nGuru
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: eJava\nGuru
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: System.out.print("eJava");
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("eJava");
- en: System.out.print(`\n`.unescape());      // Don't ignore the escape char
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(`\n`.unescape());      // 不要忽略转义字符
- en: System.out.print("Guru");
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print("Guru");
- en: '[PRE19]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: eJava
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: eJava
- en: Guru
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Guru
- en: '[PRE20]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: System.out.print(`\n`.unescape().length());
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.print(`\n`.unescape().length());
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: System.out.println("eJava" + "\n".escape() + "Guru");
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("eJava" + "\n".escape() + "Guru");
- en: '[PRE22]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: eJava\nGuru
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: eJava\nGuru
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: System.out.println("eJava" + `•`.escape());
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println("eJava" + `•`.escape());
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: eJava\u2022Guru
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: eJava\u2022Guru
- en: '[PRE25]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: String comment =
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: String comment =
- en: '`one'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`one'
- en: of
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: my
- en: favorite
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: favorite
- en: lang
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: lang
- en: feature
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: feature
- en: from Amber(!)
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '`.align();'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`.align();'
- en: System.out.println(comment);
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(comment);
- en: '[PRE26]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: one
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: one
- en: of
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '[PRE27]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: String comment =
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: String comment =
- en: '`one'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`one'
- en: of
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '`.align().indent(15);'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`.align().indent(15);'
- en: System.out.println(comment);
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(comment);
- en: '[PRE28]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: one
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: one
- en: of
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: String comment =
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: String comment =
- en: '`one'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`one'
- en: of
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '`.align(15);'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`.align(15);'
- en: System.out.println(comment);
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: System.out.println(comment);
- en: '[PRE30]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: one
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: one
- en: of
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '[PRE31]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: public String detab(int)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: public String detab(int)
- en: public String entab(int)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: public String entab(int)
- en: '[PRE32]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: String comment =
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: String comment =
- en: '`one'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`one'
- en: of
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '`.detab(1);'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`.detab(1);'
- en: '[PRE33]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: one
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: one
- en: of
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: of
- en: my
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我的
- en: favorite
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最爱
- en: lang
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 语言
- en: feature
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 功能
- en: from Amber(!)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: from Amber(!)
- en: '[PRE34]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[ Talks - Java11, Amber, CleanCode'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 讲座 - Java11, Amber, CleanCode'
- en: '[ Oceans - plastic pollution, human callousness'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[ 海洋 - 塑料污染，人类冷漠'
- en: '[PRE35]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: <R> R transform (Function<String, R> f)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: <R> R transform (Function<String, R> f)
- en: '[PRE36]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: String stripped = `
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: String stripped = `
- en: '[ Talks - Java11, Amber, CleanCode'
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ 讲座 - Java11, Amber, CleanCode'
- en: '[ Oceans - dying, human callousness, plastic'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ 海洋 - 濒临灭绝，人类冷漠，塑料'
- en: pollution
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 污染
- en: '`.transform({'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.transform({'
- en: multiLineText.stream()
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: multiLineText.stream()
- en: .map(e -> e.map(String::strip)
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .map(e -> e.map(String::strip)
- en: .map(s -> s.startsWith("[  ") ?
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .map(s -> s.startsWith("[  ") ?
- en: s.substring("[  ".length())
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: s.substring("[  ".length())
- en: ': s)'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ': s)'
- en: .collect(Collectors.joining("\n", "", "\n"));
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: .collect(Collectors.joining("\n", "", "\n"));
- en: '});'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '});'
- en: '[PRE37]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '{"plastic": {'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '{"plastic": {'
- en: '"id": "98751",'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '"id": "98751",'
- en: '"singleuse": {'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '"singleuse": {'
- en: '"item": ['
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"item": ['
- en: '{"value": "Water Bottle", "replaceWith": "Steel Bottle()"},'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"value": "Water Bottle", "replaceWith": "Steel Bottle()"},'
- en: '{"value": "Straw", "replaceWith": "Ban Straws"},'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"value": "Straw", "replaceWith": "Ban Straws"},'
- en: '{"value": "Spoon", "replaceWith": "Steel Spoon"}'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{"value": "Spoon", "replaceWith": "Steel Spoon"}'
- en: ']'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}}'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '}}'
- en: '[PRE38]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: String data =
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: String data =
- en: '"{\"plastic\": { \n" +'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '"{\"plastic\": { \n" +'
- en: '"\"id\": \"98751\", \n" +'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '"\"id\": \"98751\", \n" +'
- en: '"\"singleuse\": { \n" +'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '"\"singleuse\": { \n" +'
- en: '"\"item\": [ \n" +'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"\"item\": [ \n" +'
- en: '"{\"value\": \"Water Bottle\", \"replaceWith\": \"Steel'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"{\"value\": \"Water Bottle\", \"replaceWith\": \"Steel'
- en: Bottle()\"}, \n" +
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Bottle()\"}, \n" +
- en: '"{\"value\": \"Straw\", \"replaceWith\": \"Ban Straws\"}, \n" +'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"{\"value\": \"Straw\", \"replaceWith\": \"Ban Straws\"}, \n" +'
- en: '"{\"value\": \"Spoon\", \"replaceWith\": \"Steel Spoon\"} \n" +'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"{\"value\": \"Spoon\", \"replaceWith\": \"Steel Spoon\"} \n" +'
- en: '"] \n" +'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"] \n" +'
- en: '"} \n" +'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '"} \n" +'
- en: '"}}";'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '"}}";'
- en: '[PRE39]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: String data =
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: String data =
- en: '[PRE40];'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE40];'
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: <plastic id="98751">
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: <plastic id="98751">
- en: <singleuse>
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: <singleuse>
- en: <item value="Water Bottle" replaceWith="Steel bottle" />
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <item value="Water Bottle" replaceWith="Steel bottle" />
- en: <item value="Straw" replaceWith="Ban Straws" />
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <item value="Straw" replaceWith="Ban Straws" />
- en: <item value="spoon" replaceWith="Steel Spoon" />
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <item value="spoon" replaceWith="Steel Spoon" />
- en: </singleuse>
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: </singleuse>
- en: </plastic>
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: </plastic>
- en: '[PRE42]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: String data =
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: String data =
- en: '"<plastic id=\"98751\">\n" +'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '"<plastic id=\"98751\">\n" +'
- en: '"<singleuse>\n" +'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '"<singleuse>\n" +'
- en: '"<item value=\"Water Bottle\" replaceWith=\"Steel bottle\" />\n" +'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"<item value=\"Water Bottle\" replaceWith=\"Steel bottle\" />\n" +'
- en: '"<item value=\"Straw\" replaceWith=\"Ban Straws\" />\n" +'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"<item value=\"Straw\" replaceWith=\"Ban Straws\" />\n" +'
- en: '"<item value=\"spoon\" replaceWith=\"Steel Spoon\" />\n" +'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"<item value=\"spoon\" replaceWith=\"Steel Spoon\" />\n" +'
- en: '"</singleuse>\n" +'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '"</singleuse>\n" +'
- en: '"</plastic>";'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '"</plastic>";'
- en: '[PRE43]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: String dataUsingRawStrings =
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: String dataUsingRawStrings =
- en: '[PRE44];'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE44];'
- en: '[PRE45]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: String filePath = "C:\\Mala\\eJavaGuru\\ocp11.txt";
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: String filePath = "C:\\Mala\\eJavaGuru\\ocp11.txt";
- en: '[PRE46]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: String rawFilePath = `C:\Mala\eJavaGuru\ocp11.txt`;
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: String rawFilePath = `C:\Mala\eJavaGuru\ocp11.txt`;
- en: '[PRE47]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: String query = "SELECT talk_title, speaker_name " +
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: String query = "SELECT talk_title, speaker_name " +
- en: '"FROM   talks, speakers " +'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"FROM   talks, speakers " +'
- en: '"WHERE  talks.speaker_id = speakers.speaker_id " +'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"WHERE  talks.speaker_id = speakers.speaker_id " +'
- en: '"AND    talks.duration > 50 ";'
  id: totrans-247
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"AND    talks.duration > 50 ";'
- en: '[PRE48]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: String query = "SELECT 'talk_title', 'speaker_name' " +
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: String query = "SELECT 'talk_title', 'speaker_name' " +
- en: '"FROM   ''talks'', ''speakers'' " +'
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"FROM   ''talks'', ''speakers'' " +'
- en: '"WHERE  ''talks.speaker_id'' = ''speakers.speaker_id'' " +'
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"WHERE  ''talks.speaker_id'' = ''speakers.speaker_id'' " +'
- en: '"AND    ''talks.duration'' > 50 ";'
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"AND    ''talks.duration'' > 50 ";'
- en: '[PRE49]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: String query =
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: String query =
- en: '[PRE50];'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[PRE50];'
- en: '```'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '```'
- en: Summary
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the challenges that developers face when storing
    various types of multiline text values as string values. Raw string literals address
    these concerns. They also significantly improve the writability and readability
    of multiline string values by disabling the lexical analysis of escape characters
    and escape sequences. Raw string literals will introduce multiple methods to the
    `String` class, such as `unescape()`, `escape()`, `align()`, `indent()`, and `transform()`.
    Together, these methods enable developers to specifically process the raw string
    literals.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了开发者在将各种类型的多行文本值作为字符串值存储时面临的挑战。原始字符串字面量解决了这些问题。通过禁用转义字符和转义序列的词法分析，原始字符串字面量显著提高了多行字符串的可写性和可读性。原始字符串字面量将为`String`类引入多个方法，例如`unescape()`、`escape()`、`align()`、`indent()`和`transform()`。这些方法共同使得开发者能够专门处理原始字符串字面量。
- en: In the next chapter, we'll cover how the lambda leftovers project is improving
    the functional programming syntax and experience in Java.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍lambda遗留项目如何改善Java中的函数式编程语法和体验。
