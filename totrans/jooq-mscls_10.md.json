["```java\nList<String> result = ctx.select(CUSTOMER.CUSTOMER_NAME)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .collect(intoList()); // or, Java's Collectors.toList()\n```", "```java\nMap<Long, String> result = ctx.select(\n```", "```java\n           CUSTOMER.CUSTOMER_NUMBER, CUSTOMER.PHONE)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .collect(intoMap());\n```", "```java\npublic record PhoneCreditLimit(\n```", "```java\n   String phone, BigDecimal creditLimit) {}\n```", "```java\nList<PhoneCreditLimit> result = ctx.select(\n```", "```java\n     CUSTOMER.PHONE, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetch(mapping(PhoneCreditLimit::new));\n```", "```java\nList<SalarySale> result = ctx.select(\n```", "```java\n       EMPLOYEE.SALARY, SALE.SALE_)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .leftJoin(SALE)\n```", "```java\n   .on(EMPLOYEE.EMPLOYEE_NUMBER.eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch(mapping(nullOnAnyNull(SalarySale::new)));\n```", "```java\nResult<Record> result = ctx.resultQuery(\n```", "```java\n   \"SELECT customer_name FROM customer\").fetch();\n```", "```java\nList<String> result = ctx.resultQuery(\n```", "```java\n   \"SELECT customer_name FROM customer\")\n```", "```java\n      .fetchInto(String.class);\n```", "```java\nList<String> result = ctx.resultQuery(\n```", "```java\n   \"SELECT customer_name FROM customer\")\n```", "```java\n      .collect(intoList(r -> r.get(0, String.class)));\n```", "```java\nResult<Record> result = ctx.fetch(\n```", "```java\n   \"SELECT customer_name FROM customer\");\n```", "```java\nList<String> result = ctx.fetch(\n```", "```java\n   \"SELECT customer_name FROM customer\").into(String.class);\n```", "```java\nList<String> result = ctx.fetch(\n```", "```java\n   \"SELECT customer_name FROM customer\")\n```", "```java\n      .collect(intoList(r -> r.get(0, String.class)));\n```", "```java\nList<String> result = ctx.fetchValues(CUSTOMER.CUSTOMER_NAME);\n```", "```java\nTimestamp ts = ctx.fetchValue(currentTimestamp());\n```", "```java\nList<String> result = ctx.select(CUSTOMER.CUSTOMER_NAME)\n```", "```java\n   .from(CUSTOMER).fetch(CUSTOMER.CUSTOMER_NAME);\n```", "```java\nList<String> result = ctx.select(CUSTOMER.CUSTOMER_NAME)\n```", "```java\n   .from(CUSTOMER).fetchInto(String.class)\n```", "```java\nList<String> result = ctx.select(CUSTOMER.CUSTOMER_NAME)\n```", "```java\n   .from(CUSTOMER).collect(intoList());\n```", "```java\n// or, mapping to Result<Record1<String>> \n```", "```java\nvar result = ctx.select(CUSTOMER.CUSTOMER_NAME)          \n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\nList<String> result = ctx.select().from(CUSTOMER)\n```", "```java\n   .fetch(CUSTOMER.CUSTOMER_NAME);\n```", "```java\nList<String> result = ctx.selectFrom(CUSTOMER)\n```", "```java\n   .fetch(CUSTOMER.CUSTOMER_NAME);\n```", "```java\nSELECT `classicmodels`.`customer`.`customer_name`\n```", "```java\nFROM `classicmodels`.`customer`\n```", "```java\nSELECT `classicmodels`.`customer`.`customer_number`,\n```", "```java\n       `classicmodels`.`customer`.`customer_name`,\n```", "```java\n       ...\n```", "```java\n       `classicmodels`.`customer`.`first_buy_date`\n```", "```java\nFROM `classicmodels`.`customer`\n```", "```java\n// Result<Record2<String, BigDecimal>>\n```", "```java\nvar result = ctx.select(\n```", "```java\n       CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\nExpectedType result = ctx.select(\n```", "```java\n       CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetchInto(…) // or, collect(), fetch(mapping(…)), ...\n```", "```java\nclass NamePhone {String customerName; String phone;}\n```", "```java\nclass PhoneCreditLimit {String phone; BigDecimal creditLimit;}\n```", "```java\nList<NamePhone> result1 = ctx.select(\n```", "```java\n      CUSTOMER.CUSTOMER_NAME, CUSTOMER.PHONE)\n```", "```java\n   .from(CUSTOMER).fetchInto(NamePhone.class);\n```", "```java\nList<PhoneCreditLimit> result2 = ctx.select(\n```", "```java\n      CUSTOMER.PHONE, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER).fetchInto(PhoneCreditLimit.class);\n```", "```java\n// Result<Record3<String, String, BigDecimal>>\n```", "```java\nvar result = ctx.select(CUSTOMER.CUSTOMER_NAME,    \n```", "```java\n                        CUSTOMER.PHONE, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\nList<NamePhone> r1=result.into(NamePhone.class);\n```", "```java\nList<PhoneCreditLimit> r2=result.into(PhoneCreditLimit.class);\n```", "```java\nEmployeeRecord result = ctx.selectFrom(EMPLOYEE) \n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L))\n```", "```java\n   .fetchOne();\n```", "```java\nEmployee result = ctx.selectFrom(EMPLOYEE) \n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L))                    \n```", "```java\n   .fetchOneInto(Employee.class);\n```", "```java\nEmployee result = ctx.selectFrom(EMPLOYEE) \n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L))                    \n```", "```java\n   .fetchOne().into(Employee.class);\n```", "```java\nString result = ctx.select(EMPLOYEE.EMAIL).from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L))\n```", "```java\n   .fetchOne().value1();\n```", "```java\nString result = ctx.select(EMPLOYEE.EMAIL).from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchOneInto(String.class);\n```", "```java\nString result = Objects.requireNonNullElseGet(\n```", "```java\n   ctx.select(EMPLOYEE.EMAIL).from(EMPLOYEE)\n```", "```java\n      .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n      .fetchOneInto(String.class), () -> \"\");\n```", "```java\nOptional<EmployeeRecord> result = ctx.selectFrom(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchOptional();\n```", "```java\nOptional<Employee> result = ctx.selectFrom(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L))\n```", "```java\n   .fetchOptionalInto(Employee.class);\n```", "```java\nEmployeeRecord result = ctx.fetchOne(EMPLOYEE,  \n```", "```java\n   EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L));\n```", "```java\nYearMonth result = ctx.select(CUSTOMER.FIRST_BUY_DATE)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .where(CUSTOMER.CUSTOMER_NUMBER.eq(112L))\n```", "```java\n   .fetchOne(CUSTOMER.FIRST_BUY_DATE, \n```", "```java\n             INTEGER_YEARMONTH_CONVERTER);\n```", "```java\nEmployee result = ctx.selectFrom(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchSingleInto(Employee.class);\n```", "```java\nString result = ctx.select(EMPLOYEE.EMAIL).from(EMPLOYEE)\n```", "```java\n   .where(EMPLOYEE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchSingle().value1(); // fetchSingleInto(String.class)\n```", "```java\nSaleRecord result = ctx.selectFrom(SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchAny();\n```", "```java\nString result = ctx.select(SALE.TREND).from(SALE)\n```", "```java\n   .where(SALE.EMPLOYEE_NUMBER.eq(1370L)) \n```", "```java\n   .fetchAnyInto(String.class);\n```", "```java\nRecord[] result = ctx.select().from(DEPARTMENT).fetchArray();\n```", "```java\nString[] result = ctx.select(DEPARTMENT.NAME).from(DEPARTMENT)\n```", "```java\n   .fetchArray(DEPARTMENT.NAME);\n```", "```java\nString[] result = ctx.select(DEPARTMENT.NAME).from(DEPARTMENT)\n```", "```java\n   .collect(intoArray(new String[0]));\n```", "```java\nYearMonth[] result = ctx.select(CUSTOMER.FIRST_BUY_DATE)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetchArray(CUSTOMER.FIRST_BUY_DATE, \n```", "```java\n               INTEGER_YEARMONTH_CONVERTER);\n```", "```java\nString[][] result = ctx.select(DEPARTMENT.TOPIC)\n```", "```java\n   .from(DEPARTMENT).fetchArray(DEPARTMENT.TOPIC);\n```", "```java\n[\n```", "```java\n  [\"publicity\", \"promotion\"],\n```", "```java\n  [\"commerce\",\"trade\",\"sellout\",\"transaction\"],\n```", "```java\n  ...\n```", "```java\n]\n```", "```java\n// Record2<String, EvaluationCriteriaRecord>[]\n```", "```java\nvar result = ctx.select(MANAGER.MANAGER_NAME, \n```", "```java\n                        MANAGER.MANAGER_EVALUATION)\n```", "```java\n   .from(MANAGER).fetchArray();\n```", "```java\nSystem.out.println(result[0].value1()+\"\\n\"\n```", "```java\n        + result[0].value2().format());\n```", "```java\nOfficeFullAddressRecord[] result = ctx.select(\n```", "```java\n      OFFICE.OFFICE_FULL_ADDRESS).from(OFFICE)\n```", "```java\n   .fetchArray(OFFICE.OFFICE_FULL_ADDRESS);\n```", "```java\nOfficeFullAddressRecord[] result = ctx.select(\n```", "```java\n      OFFICE.OFFICE_FULL_ADDRESS).from(OFFICE)\n```", "```java\n   .collect(intoArray(new OfficeFullAddressRecord[0]));\n```", "```java\nObject[][] result = ctx.select(DEPARTMENT.DEPARTMENT_ID, \n```", "```java\n         DEPARTMENT.OFFICE_CODE, DEPARTMENT.NAME)\n```", "```java\n   .from(DEPARTMENT).fetchArrays();\n```", "```java\n[\n```", "```java\n  [1, \"1\", \"Advertising\"],\n```", "```java\n  [2, \"1\", \"Sales\"],\n```", "```java\n  [3, \"2\", \"Accounting\"],\n```", "```java\n  [4, \"3\", \"Finance\"]\n```", "```java\n]\n```", "```java\nList<String> result = ctx.select(DEPARTMENT.NAME)\n```", "```java\n   .from(DEPARTMENT).fetch(DEPARTMENT.NAME);\n```", "```java\nList<String> result = ctx.select(DEPARTMENT.NAME)\n```", "```java\n   .from(DEPARTMENT).collect(intoList());\n```", "```java\nList<Department> result = ctx.select(DEPARTMENT.DEPARTMENT_ID,    \n```", "```java\n       DEPARTMENT.OFFICE_CODE, DEPARTMENT.NAME)\n```", "```java\n   .from(DEPARTMENT).fetchInto(Department.class);\n```", "```java\nList<String[]> result = ctx.select(DEPARTMENT.TOPIC)\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch(DEPARTMENT.TOPIC, String[].class);\n```", "```java\nSet<String[]> result = ctx.select(DEPARTMENT.TOPIC)\n```", "```java\n   .from(DEPARTMENT).fetchSet(DEPARTMENT.TOPIC);\n```", "```java\nMap<Integer, DepartmentRecord> \n```", "```java\n       result = ctx.selectFrom(DEPARTMENT)\n```", "```java\n   .fetchMap(DEPARTMENT.DEPARTMENT_ID);\n```", "```java\nMap<Integer, DepartmentRecord> \n```", "```java\n       result = ctx.selectFrom(DEPARTMENT)\n```", "```java\n   .collect(intoMap(r -> r.get(DEPARTMENT.DEPARTMENT_ID)));\n```", "```java\nMap<Integer, Department> result = ctx.selectFrom(DEPARTMENT)\n```", "```java\n   .fetchMap(DEPARTMENT.DEPARTMENT_ID, Department.class);\n```", "```java\nMap<Customer, Customerdetail> result = ctx.select()\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .join(CUSTOMERDETAIL)\n```", "```java\n   .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n       .eq(CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n   .fetchMap(Customer.class, Customerdetail.class);\n```", "```java\n{\n```", "```java\n   \"Customer (99, Australian Home, Paoule, Sart, \n```", "```java\n    40.11.2555, 1370, 21000.00, 20210)\":\n```", "```java\n      {\n```", "```java\n      \"customerNumber\": 99, \"addressLineFirst\": \"43 Rue 2\",\n```", "```java\n      \"addressLineSecond\": null, \"city\": \"Paris\", \"state\":    \n```", "```java\n       null, \"postalCode\": \"25017\", \"country\": \"France\"\n```", "```java\n      },\n```", "```java\n   ...\n```", "```java\nMap<Record, Record> result = ctx.select(\n```", "```java\n      CUSTOMER.CONTACT_FIRST_NAME, CUSTOMER.CONTACT_LAST_NAME,   \n```", "```java\n      CUSTOMERDETAIL.CITY, CUSTOMERDETAIL.COUNTRY)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .join(CUSTOMERDETAIL)\n```", "```java\n   .on(CUSTOMER.CUSTOMER_NUMBER\n```", "```java\n      .eq(CUSTOMERDETAIL.CUSTOMER_NUMBER))\n```", "```java\n   .fetchMap(new Field[]{CUSTOMER.CONTACT_FIRST_NAME,  \n```", "```java\n                         CUSTOMER.CONTACT_LAST_NAME},\n```", "```java\n             new Field[]{CUSTOMERDETAIL.CITY, \n```", "```java\n                         CUSTOMERDETAIL.COUNTRY});\n```", "```java\nMap<Long, Result<OrderRecord>> result = ctx.selectFrom(ORDER)\n```", "```java\n   .fetchGroups(ORDER.CUSTOMER_NUMBER);\n```", "```java\nMap<Long, List<OrderRecord>> result = ctx.selectFrom(ORDER)\n```", "```java\n   .collect(intoGroups(r -> r.get(ORDER.CUSTOMER_NUMBER)));\n```", "```java\nMap<Long, List<BigDecimal>> result = ctx.select(\n```", "```java\n      BANK_TRANSACTION.CUSTOMER_NUMBER,    \n```", "```java\n      BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n   .from(BANK_TRANSACTION)\n```", "```java\n   .fetchGroups(BANK_TRANSACTION.CUSTOMER_NUMBER, \n```", "```java\n                BANK_TRANSACTION.TRANSFER_AMOUNT);\n```", "```java\nMap<Long, List<BigDecimal>> result = ctx.select(\n```", "```java\n      BANK_TRANSACTION.CUSTOMER_NUMBER,   \n```", "```java\n      BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n    .from(BANK_TRANSACTION)\n```", "```java\n    .collect(intoGroups());\n```", "```java\n    // or, …\n```", "```java\n    .collect(intoGroups(\n```", "```java\n        r -> r.get(BANK_TRANSACTION.CUSTOMER_NUMBER),\n```", "```java\n        r -> r.get(BANK_TRANSACTION.TRANSFER_AMOUNT)));\n```", "```java\nMap<Long, List<Record2<Long, BigDecimal>>> result \n```", "```java\n   = ctx.select(BANK_TRANSACTION.CUSTOMER_NUMBER,    \n```", "```java\n                BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n        .from(BANK_TRANSACTION)\n```", "```java\n        .collect(intoGroups(r -> \n```", "```java\n            r.get(BANK_TRANSACTION.CUSTOMER_NUMBER)));\n```", "```java\nMap<Long, Result<Record2<Long, BigDecimal>>> result \n```", "```java\n   = ctx.select(BANK_TRANSACTION.CUSTOMER_NUMBER,    \n```", "```java\n                BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n        .from(BANK_TRANSACTION)\n```", "```java\n        .collect(intoResultGroups(r -> \n```", "```java\n            r.get(BANK_TRANSACTION.CUSTOMER_NUMBER)));\n```", "```java\nMap<Productline, List<Product>> result = ctx.select()\n```", "```java\n    .from(PRODUCTLINE)\n```", "```java\n    .innerJoin(PRODUCT)\n```", "```java\n    .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n    .fetchGroups(Productline.class, Product.class);\n```", "```java\n{\n```", "```java\n  \"Productline (Motorcycles, 599302, Our motorcycles ...)\": [\n```", "```java\n    {\n```", "```java\n      \"productId\": 1,\n```", "```java\n      \"productName\": \"1969 Harley Davidson Ultimate Chopper\",\n```", "```java\n      ...\n```", "```java\n    },\n```", "```java\n    {\n```", "```java\n      \"productId\": 3,\n```", "```java\n      \"productName\": \"1996 Moto Guzzi 1100i\",\n```", "```java\n      ...\n```", "```java\n    },\n```", "```java\n    ...\n```", "```java\n  ],\n```", "```java\n  \"Productline (Classic Cars, 599302 ... )\": [\n```", "```java\n  ...\n```", "```java\n  ]\n```", "```java\n}\n```", "```java\nMap<SimpleProductline, List<SimpleProduct>> result = \n```", "```java\n  ctx.select(PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.CODE,\n```", "```java\n             PRODUCT.PRODUCT_ID, PRODUCT.BUY_PRICE)\n```", "```java\n  .from(PRODUCTLINE)\n```", "```java\n  .innerJoin(PRODUCT)\n```", "```java\n  .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n  .fetchGroups(SimpleProductline.class, SimpleProduct.class);\n```", "```java\n<generate>   \n```", "```java\n   <pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>     \n```", "```java\n</generate>                                                   \n```", "```java\nMap<Productline, List<Product>> result = ctx.select()\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .leftOuterJoin(PRODUCT)\n```", "```java\n   .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n   .collect(groupingBy(\n```", "```java\n       r -> r.into(Productline.class),\n```", "```java\n          filtering(\n```", "```java\n             r -> r.get(PRODUCT.PRODUCT_ID) != null,\n```", "```java\n             mapping(\n```", "```java\n                 r -> r.into(Product.class),\n```", "```java\n                 toList()\n```", "```java\n             )\n```", "```java\n          )\n```", "```java\n   ));\n```", "```java\nMap<Manager, List<Office>> result = ctx.select().from(MANAGER)\n```", "```java\n    .crossApply(select().from(OFFICE).join(OFFICE_HAS_MANAGER)\n```", "```java\n      .on(OFFICE.OFFICE_CODE\n```", "```java\n         .eq(OFFICE_HAS_MANAGER.OFFICES_OFFICE_CODE))\n```", "```java\n   .where(MANAGER.MANAGER_ID\n```", "```java\n      .eq(OFFICE_HAS_MANAGER.MANAGERS_MANAGER_ID)))\n```", "```java\n   .fetchGroups(Manager.class, Office.class);\n```", "```java\n// Result<Record2<String, BigDecimal>>\n```", "```java\nvar result = ctx.select(CUSTOMER.CUSTOMER_NAME,  \n```", "```java\n   CUSTOMER.CREDIT_LIMIT).from(CUSTOMER).fetch();\n```", "```java\nResultSet rsInMem = result.intoResultSet();\n```", "```java\nwhile (rsInMem.next()) {\n```", "```java\n   ...\n```", "```java\n}\n```", "```java\nctx.resultQuery(\n```", "```java\n  \"SELECT * FROM employee LIMIT 10; \n```", "```java\n   SELECT * FROM sale LIMIT 5\");\n```", "```java\nResults results = ctx.resultQuery(\n```", "```java\n   \"SELECT * FROM employee LIMIT 10; \n```", "```java\n    SELECT * FROM sale LIMIT 5\")\n```", "```java\n .fetchMany();    \n```", "```java\nList<Employee> employees =results.get(0).into(Employee.class);\n```", "```java\nList<Sale> sales = results.get(1).into(Sale.class);\n```", "```java\npublic class SimpleProductLine implements Serializable {\n```", "```java\n   ... \n```", "```java\n   private List<SimpleProduct> products = new ArrayList<>();  \n```", "```java\n}\n```", "```java\npublic class SimpleProduct implements Serializable { ... }\n```", "```java\npublic class SimpleProduct implements Serializable {\n```", "```java\n   ...\n```", "```java\n   private SimpleProductLine productLine;\n```", "```java\n}\n```", "```java\n// Map<Record, Result<Record>>\n```", "```java\nvar map = ctx.select(PRODUCTLINE.PRODUCT_LINE, \n```", "```java\n     PRODUCTLINE.TEXT_DESCRIPTION,PRODUCT.PRODUCT_NAME,      \n```", "```java\n     PRODUCT.PRODUCT_VENDOR, PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .join(PRODUCT)\n```", "```java\n   .on(PRODUCTLINE.PRODUCT_LINE\n```", "```java\n      .eq(PRODUCT.PRODUCT_LINE))                \n```", "```java\n   .orderBy(PRODUCTLINE.PRODUCT_LINE).limit(3)\n```", "```java\n   .fetchGroups(new Field[]{PRODUCTLINE.PRODUCT_LINE,\n```", "```java\n          PRODUCTLINE.TEXT_DESCRIPTION},\n```", "```java\n                new Field[]{PRODUCT.PRODUCT_NAME,  \n```", "```java\n          PRODUCT.PRODUCT_VENDOR, PRODUCT.QUANTITY_IN_STOCK});\n```", "```java\nList<SimpleProductLine> result = map.entrySet()\n```", "```java\n   .stream()\n```", "```java\n   .map((e) -> {\n```", "```java\n      SimpleProductLine productLine \n```", "```java\n         = e.getKey().into(SimpleProductLine.class);\n```", "```java\n      List<SimpleProduct> products \n```", "```java\n         = e.getValue().into(SimpleProduct.class);\n```", "```java\n      productLine.setProducts(products);\n```", "```java\n      products.forEach(p -> \n```", "```java\n        ((SimpleProduct) p).setProductLine(productLine));\n```", "```java\n      return productLine;\n```", "```java\n   }).collect(Collectors.toList());\n```", "```java\npublic class SimplestCustomer { \n```", "```java\n   public String customerName; \n```", "```java\n   public String customerPhone; \n```", "```java\n}\n```", "```java\nList<SimplestCustomer> result = ctx.select(\n```", "```java\n   CUSTOMER.CUSTOMER_NAME, CUSTOMER.PHONE.as(\"customerPhone\"))\n```", "```java\n   .from(CUSTOMER).fetchInto(SimplestCustomer.class);\n```", "```java\npublic class SimpleDepartment {\n```", "```java\n   private String depName;\n```", "```java\n   private Short depCode;\n```", "```java\n   private String[] depTopic;\n```", "```java\n   public SimpleDepartment(String depName, \n```", "```java\n          Short depCode, String[] depTopic) {\n```", "```java\n      this.depName = depName;\n```", "```java\n      this.depCode = depCode;\n```", "```java\n      this.depTopic = depTopic;\n```", "```java\n   }\n```", "```java\n   ...\n```", "```java\n}\n```", "```java\nList<SimpleDepartment> result = ctx.select(\n```", "```java\n      DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)\n```", "```java\n   .from(DEPARTMENT).fetchInto(SimpleDepartment.class);\n```", "```java\nList<SimpleDepartment> result = ctx.select(\n```", "```java\n      DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)\n```", "```java\n   .from(DEPARTMENT)\n```", "```java\n   .fetch(mapping(SimpleDepartment::new));\n```", "```java\npublic class FlatProductline {\n```", "```java\n    private String productLine;\n```", "```java\n    private Long code;\n```", "```java\n    private String productName;    \n```", "```java\n    private String productVendor;    \n```", "```java\n    private Integer quantityInStock;\n```", "```java\n    // constructors, getters, setters, toString()\n```", "```java\n}\n```", "```java\nList<FlatProductline> result = ctx.select(\n```", "```java\n      PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.CODE,\n```", "```java\n      PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n      PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .join(PRODUCT)\n```", "```java\n   .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n   .fetchInto(FlatProductline.class);\n```", "```java\n// .fetch(mapping(FlatProductline::new));\n```", "```java\nimport jooq.generated.embeddables.pojos.ManagerStatus;\n```", "```java\npublic class SimpleManagerStatus {    \n```", "```java\n   private Long managerId;\n```", "```java\n   private ManagerStatus ms;\n```", "```java\n   // constructors, getters, setters, toString()\n```", "```java\n}\n```", "```java\nList<SimpleManagerStatus> result =   \n```", "```java\n       ctx.select(MANAGER.MANAGER_ID, MANAGER.MANAGER_STATUS)\n```", "```java\n   .from(MANAGER).fetchInto(SimpleManagerStatus.class);\n```", "```java\npublic final class ImmutableCustomer {\n```", "```java\n    private final String customerName;\n```", "```java\n    private final YearMonth ym;\n```", "```java\n    // constructor and only getters\n```", "```java\n}\n```", "```java\nList<ImmutableCustomer> result = ctx.select(\n```", "```java\n      CUSTOMER.CUSTOMER_NAME,   \n```", "```java\n      CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetchInto(ImmutableCustomer.class);\n```", "```java\n// .fetch(mapping(ImmutableCustomer::new));\n```", "```java\n<immutablePojos>true</immutablePojos>\n```", "```java\n<constructorPropertiesAnnotationOnPojos>\n```", "```java\n   true\n```", "```java\n</constructorPropertiesAnnotationOnPojos>\n```", "```java\npublic class JpaCustomer {\n```", "```java\n   @Column(name = \"customer_name\") \n```", "```java\n   public String cn;\n```", "```java\n   @Column(name = \"first_buy_date\") \n```", "```java\n   public YearMonth ym;      \n```", "```java\n}\n```", "```java\nList<JpaCustomer> result = ctx.select(CUSTOMER.CUSTOMER_NAME, \n```", "```java\n       CUSTOMER.FIRST_BUY_DATE.coerce(YEARMONTH))\n```", "```java\n   .from(CUSTOMER).fetchInto(JpaCustomer.class);\n```", "```java\n<jpaAnnotations>true</jpaAnnotations>\n```", "```java\npublic record RecordDepartment(\n```", "```java\n   String name, Integer code, String[] topic) {}\n```", "```java\nList<RecordDepartment> result = ctx.select(\n```", "```java\n        DEPARTMENT.NAME, DEPARTMENT.CODE, DEPARTMENT.TOPIC)\n```", "```java\n              .from(DEPARTMENT)\n```", "```java\n              .fetchInto(RecordDepartment.class);\n```", "```java\n           // .fetch(mapping(RecordDepartment::new));\n```", "```java\npublic record RecordEvaluationCriteria(\n```", "```java\n   Integer communicationAbility, Integer ethics, \n```", "```java\n   Integer performance, Integer employeeInput) {}\n```", "```java\npublic record RecordManager(\n```", "```java\n   String managerName, RecordEvaluationCriteria rec) {}\n```", "```java\nList<RecordManager> result = ctx.select(\n```", "```java\n       MANAGER.MANAGER_NAME, MANAGER.MANAGER_EVALUATION)\n```", "```java\n   .from(MANAGER).fetchInto(RecordManager.class);\n```", "```java\nimport jooq.generated.embeddables.pojos.OfficeFullAddress;\n```", "```java\npublic record RecordOffice(\n```", "```java\n   String officecode, OfficeFullAddress ofa) {}\n```", "```java\nList<RecordOffice> result = ctx.select(\n```", "```java\n         OFFICE.OFFICE_CODE, OFFICE.OFFICE_FULL_ADDRESS)\n```", "```java\n   .from(OFFICE).fetchInto(RecordOffice.class);\n```", "```java\n<pojosAsJavaRecordClasses>true</pojosAsJavaRecordClasses>\n```", "```java\n<interfaces>true</interfaces>\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, EMPLOYEE.EMAIL)\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .forEach((Record3<String, String, String> record) -> {\n```", "```java\n      System.out.println(\"\\n\\nTo: \" \n```", "```java\n       + record.getValue(EMPLOYEE.EMAIL));\n```", "```java\n      System.out.println(\"From: \" \n```", "```java\n       + \"hrdepartment@classicmodelcars.com\");\n```", "```java\n      System.out.println(\"Body: \\n   Dear, \"\n```", "```java\n       + record.getValue(EMPLOYEE.FIRST_NAME)\n```", "```java\n       + \" \" + record.getValue(EMPLOYEE.LAST_NAME) + \" ...\");\n```", "```java\n});\n```", "```java\npublic final class LegacyCustomer {\n```", "```java\n   private final String customerName;\n```", "```java\n   private final String customerPhone;\n```", "```java\n   private final BigDecimal creditLimit;\n```", "```java\n   …\n```", "```java\n   public static CustomerBuilder getBuilder(\n```", "```java\n                             String customerName) {\n```", "```java\n      return new LegacyCustomer.CustomerBuilder(customerName);\n```", "```java\n   }\n```", "```java\n   public static final class CustomerBuilder {\n```", "```java\n      …\n```", "```java\n      public LegacyCustomer build() {\n```", "```java\n         return new LegacyCustomer(this);\n```", "```java\n      }      \n```", "```java\n   }\n```", "```java\n   …\n```", "```java\n}\n```", "```java\nList<LegacyCustomer> result \n```", "```java\n        = ctx.select(CUSTOMER.CUSTOMER_NAME, CUSTOMER.PHONE,   \n```", "```java\n                     CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .fetch((Record3<String, String, BigDecimal> record) -> {\n```", "```java\n      LegacyCustomer customer = LegacyCustomer.getBuilder(\n```", "```java\n         record.getValue(CUSTOMER.CUSTOMER_NAME))\n```", "```java\n         .customerPhone(record.getValue(CUSTOMER.PHONE))\n```", "```java\n         .creditLimit(record.getValue(CUSTOMER.CREDIT_LIMIT))\n```", "```java\n         .build();\n```", "```java\n      return customer;\n```", "```java\n});\n```", "```java\npublic class SimpleProductLine {\n```", "```java\n   private String productLine;\n```", "```java\n   private String textDescription;   \n```", "```java\n   private List<SimpleProduct> products;\n```", "```java\n   …\n```", "```java\n}\n```", "```java\npublic class SimpleProduct {\n```", "```java\n   private String productName;\n```", "```java\n   private String productVendor;\n```", "```java\n   private Short quantityInStock;\n```", "```java\n   …\n```", "```java\n}\n```", "```java\nprivate final SelectQueryMapper<SimpleProductLine> sqMapper;\n```", "```java\nprivate final DSLContext ctx;\n```", "```java\npublic ClassicModelsRepository(DSLContext ctx) {\n```", "```java\n   this.ctx = ctx;\n```", "```java\n   this.sqMapper = SelectQueryMapperFactory\n```", "```java\n      .newInstance().newMapper(SimpleProductLine.class);\n```", "```java\n}\n```", "```java\npublic List<SimpleProductLine> findProductLineWithProducts() {\n```", "```java\n   List<SimpleProductLine> result = sqMapper.asList(\n```", "```java\n     ctx.select(PRODUCTLINE.PRODUCT_LINE,  \n```", "```java\n         PRODUCTLINE.TEXT_DESCRIPTION,\n```", "```java\n         PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n         PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n        .from(PRODUCTLINE)\n```", "```java\n        .innerJoin(PRODUCT)\n```", "```java\n        .on(PRODUCTLINE.PRODUCT_LINE\n```", "```java\n           .eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n        .orderBy(PRODUCTLINE.PRODUCT_LINE));\n```", "```java\n   return result;\n```", "```java\n}\n```", "```java\npublic class SimpleEmployee {\n```", "```java\n   private Long employeeNumber;\n```", "```java\n   private String firstName;\n```", "```java\n   private String lastName;\n```", "```java\n   private Set<SimpleCustomer> customers;\n```", "```java\n   private Set<SimpleSale> sales;\n```", "```java\n   ...\n```", "```java\n}\n```", "```java\npublic class SimpleCustomer { private String customerName; … }\n```", "```java\npublic class SimpleSale { private Float sale; … }\n```", "```java\nthis.sqMapper = …;\n```", "```java\nList<SimpleEmployee> result = sqMapper.asList(\n```", "```java\n   ctx.select(EMPLOYEE.EMPLOYEE_NUMBER, EMPLOYEE.FIRST_NAME,\n```", "```java\n       EMPLOYEE.LAST_NAME, CUSTOMER.CUSTOMER_NAME, SALE.SALE_)\n```", "```java\n      .from(EMPLOYEE)\n```", "```java\n      .leftOuterJoin(CUSTOMER)\n```", "```java\n      .on(CUSTOMER.SALES_REP_EMPLOYEE_NUMBER\n```", "```java\n        .eq(EMPLOYEE.EMPLOYEE_NUMBER))\n```", "```java\n      .leftOuterJoin(SALE)\n```", "```java\n      .on(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n        .eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n      .where(EMPLOYEE.OFFICE_CODE.eq(officeCode))\n```", "```java\n      .orderBy(EMPLOYEE.EMPLOYEE_NUMBER));\n```", "```java\nResult<Record1<JSON>> result = ctx.select(jsonObject(\n```", "```java\n   key(\"customerName\").value(CUSTOMER.CUSTOMER_NAME),\n```", "```java\n   key(\"creditLimit\").value(CUSTOMER.CREDIT_LIMIT))\n```", "```java\n      .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(jsonObject(\n```", "```java\n   jsonEntry(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n   jsonEntry(\"creditLimit\", CUSTOMER.CREDIT_LIMIT))\n```", "```java\n      .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\nSystem.out.println(result.formatJSON());\n```", "```java\n{\n```", "```java\n \"fields\": [{\"name\": \"json_result\", \"type\": \"JSON\"}],\n```", "```java\n \"records\": \n```", "```java\n [\n```", "```java\n  [{\"creditLimit\": 21000, \"customerName\": \"Australian Home\"}],\n```", "```java\n  [{\"creditLimit\": 21000, \"customerName\": \"Joliyon\"}],\n```", "```java\n  [{\"creditLimit\": 21000, \"customerName\": \"Marquez Xioa\"}]\n```", "```java\n  …\n```", "```java\n ]\n```", "```java\n}\n```", "```java\nSystem.out.println(          \n```", "```java\n   result.formatJSON(JSONFormat.DEFAULT_FOR_RECORDS));\n```", "```java\n[\n```", "```java\n [{\"creditLimit\": 50000.00, \"customerName\":\"GOLD\"}],\n```", "```java\n [{\"creditLimit\": null, \"customerName\": \"Australian Home\"}],\n```", "```java\n [{\"creditLimit\": null, \"customerName\": \"Joliyon\"}],\n```", "```java\n ...\n```", "```java\n]\n```", "```java\nresult.get(0) // 0-first JSON, 1-second JSON, 2-third JSON …\n```", "```java\n.value1()     // this is the value from Record1, a JSON\n```", "```java\n.data()       // this is the data of the first JSON as String\n```", "```java\n{\"creditLimit\": 21000.00, \"customerName\": \"Australian Home\"}\n```", "```java\nList<String> result = ctx.select(jsonObject(\n```", "```java\n      jsonEntry(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n      jsonEntry(\"creditLimit\", CUSTOMER.CREDIT_LIMIT))\n```", "```java\n         .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetchInto(String.class);\n```", "```java\nList<String> result = ctx.select(jsonArray(jsonObject(\n```", "```java\n   jsonEntry(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n   jsonEntry(\"creditLimit\", CUSTOMER.CREDIT_LIMIT)))\n```", "```java\n      .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetchInto(String.class);\n```", "```java\nString result = ctx.select(jsonArrayAgg(jsonObject(\n```", "```java\n      jsonEntry(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n      jsonEntry(\"creditLimit\", CUSTOMER.CREDIT_LIMIT)))\n```", "```java\n         .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetchSingleInto(String.class);\n```", "```java\n[\n```", "```java\n  {\"creditLimit\": 21000,\"customerName\": \"Australian Home\"},\n```", "```java\n  {\"creditLimit\": 21000,\"customerName\": \"Joliyon\"},\n```", "```java\n  ...\n```", "```java\n]\n```", "```java\nString result = ctx.select(jsonObjectAgg(\n```", "```java\n      CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n         .as(\"json_result\"))\n```", "```java\n   .from(CUSTOMER).fetchSingleInto(String.class);\n```", "```java\n{\n```", "```java\n  \"Joliyon\": 21000,\n```", "```java\n  \"Falafel 3\": 21000,\n```", "```java\n  \"Petit Auto\": 79900,\n```", "```java\n…\n```", "```java\n}\n```", "```java\nResult<Record1<JSON>> result = ctx.select(\n```", "```java\n      CUSTOMER.CONTACT_FIRST_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n      PAYMENT.INVOICE_AMOUNT.as(\"Payment.Amount\"),\n```", "```java\n      PAYMENT.CACHING_DATE.as(\"Payment.CachingDate\"))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .join(PAYMENT)\n```", "```java\n   .on(CUSTOMER.CUSTOMER_NUMBER.eq(PAYMENT.CUSTOMER_NUMBER))\n```", "```java\n   .orderBy(CUSTOMER.CREDIT_LIMIT).limit(5)\n```", "```java\n   .forJSON().path().root(\"customers\")\n```", "```java\n   .fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(\n```", "```java\n      CUSTOMER.CONTACT_FIRST_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n      PAYMENT.INVOICE_AMOUNT, PAYMENT.CACHING_DATE)\n```", "```java\n  .from(CUSTOMER)\n```", "```java\n  .join(PAYMENT)\n```", "```java\n  .on(CUSTOMER.CUSTOMER_NUMBER.eq(PAYMENT.CUSTOMER_NUMBER))\n```", "```java\n  .orderBy(CUSTOMER.CREDIT_LIMIT).limit(5)\n```", "```java\n  .forJSON().auto().withoutArrayWrapper().fetch();\n```", "```java\nList<String> result = ctx.select(jsonObject(\n```", "```java\n      key(\"customerName\").value(CUSTOMER.CUSTOMER_NAME),\n```", "```java\n      key(\"creditLimit\").value(CUSTOMER.CREDIT_LIMIT))\n```", "```java\n         .as(\"json_result\"))\n```", "```java\n         .from(CUSTOMER)\n```", "```java\n   .orderBy(CUSTOMER.CUSTOMER_NAME).limit(3)\n```", "```java\n   .fetchInto(String.class);\n```", "```java\nString result = ctx.select(jsonArrayAgg(jsonObject(\n```", "```java\n      jsonEntry(\"customerName\", field(\"customer_name\")),\n```", "```java\n      jsonEntry(\"creditLimit\", field(\"credit_limit\"))))\n```", "```java\n        .orderBy(field(\"credit_limit\")).as(\"json_result\"))\n```", "```java\n   .from(select(CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT)\n```", "```java\n     .from(CUSTOMER).orderBy(CUSTOMER.CUSTOMER_NAME).limit(3))\n```", "```java\n   .fetchSingleInto(String.class); \n```", "```java\n[\n```", "```java\n  {\"creditLimit\": 0,\"customerName\": \"American Souvenirs Inc\"},\n```", "```java\n  {\"creditLimit\": 61100,\"customerName\": \"Alpha Cognac\"},\n```", "```java\n  {\"creditLimit\": 113000,\"customerName\": \"Amica Models & Co.\"}\n```", "```java\n]\n```", "```java\nResult<Record2<Long, String>> result = ctx.select(\n```", "```java\n        MANAGER.MANAGER_ID, MANAGER.MANAGER_NAME)\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .where(jsonExists(MANAGER.MANAGER_DETAIL, \"$.shareholder\"))\n```", "```java\n   .fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(\n```", "```java\n     jsonValue(MANAGER.MANAGER_DETAIL, \"$.address.city\")\n```", "```java\n        .as(\"city\"))\n```", "```java\n  .from(MANAGER).fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(\n```", "```java\n     jsonValue(MANAGER.MANAGER_DETAIL, \"$.email\").as(\"email\"))\n```", "```java\n   .from(MANAGER)\n```", "```java\n   .where(jsonExists(MANAGER.MANAGER_DETAIL, \n```", "```java\n     \"$[*] ? (@.projects[*].role == \\\"Principal Manager\\\")\"))\n```", "```java\n   .fetch();\n```", "```java\nResult<Record> result = ctx.select(table(\"t\").asterisk())\n```", "```java\n   .from(MANAGER, jsonTable(MANAGER.MANAGER_DETAIL, \n```", "```java\n                            val(\"$.projects[*]\"))\n```", "```java\n   .column(\"id\").forOrdinality()\n```", "```java\n   .column(\"name\", VARCHAR).column(\"start\", DATE)\n```", "```java\n   .column(\"end\", DATE).column(\"type\", VARCHAR)\n```", "```java\n   .column(\"role\", VARCHAR).column(\"details\", VARCHAR).as(\"t\"))\n```", "```java\n   .where(field(\"type\").eq(\"development\")).fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(jsonObject(\n```", "```java\n  key(\"productLine\").value(PRODUCTLINE.PRODUCT_LINE),\n```", "```java\n  key(\"textDescription\").value(PRODUCTLINE.TEXT_DESCRIPTION),\n```", "```java\n  key(\"products\").value(select(jsonArrayAgg(\n```", "```java\n    jsonObject(key(\"productName\").value(PRODUCT.PRODUCT_NAME),\n```", "```java\n     key(\"productVendor\").value(PRODUCT.PRODUCT_VENDOR),\n```", "```java\n     key(\"quantityInStock\").value(PRODUCT.QUANTITY_IN_STOCK)))   \n```", "```java\n    .orderBy(PRODUCT.QUANTITY_IN_STOCK))\n```", "```java\n    .from(PRODUCT)\n```", "```java\n    .where(PRODUCTLINE.PRODUCT_LINE\n```", "```java\n      .eq(PRODUCT.PRODUCT_LINE)))))\n```", "```java\n      .from(PRODUCTLINE).orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n      .fetch();\n```", "```java\nString result = ctx.select(\n```", "```java\n   jsonArrayAgg(jsonObject(…))\n```", "```java\n   …  \n```", "```java\n   .orderBy(PRODUCTLINE.PRODUCT_LINE))\n```", "```java\n   .from(PRODUCTLINE).fetchSingleInto(String.class);\n```", "```java\nResult<Record1<JSON>> result = ctx.select( \n```", "```java\n PRODUCTLINE.PRODUCT_LINE.as(\"productLine\"),  \n```", "```java\n PRODUCTLINE.TEXT_DESCRIPTION.as(\"textDescription\"),\n```", "```java\n select(PRODUCT.PRODUCT_NAME.as(\"productName\"), \n```", "```java\n  PRODUCT.PRODUCT_VENDOR.as(\"productVendor\"), \n```", "```java\n  PRODUCT.QUANTITY_IN_STOCK.as(\"quantityInStock\"))\n```", "```java\n .from(PRODUCT)\n```", "```java\n .where(PRODUCT.PRODUCT_LINE.eq(PRODUCTLINE.PRODUCT_LINE))\n```", "```java\n .orderBy(PRODUCT.QUANTITY_IN_STOCK)                        \n```", "```java\n .forJSON().path().asField(\"products\"))\n```", "```java\n  .from(PRODUCTLINE)\n```", "```java\n  .orderBy(PRODUCTLINE.PRODUCT_LINE).forJSON().path().fetch();\n```", "```java\nString result = ctx.select(\n```", "```java\n  PRODUCTLINE.PRODUCT_LINE.as(\"productLine\"),\n```", "```java\n  ...\n```", "```java\n  .forJSON().path()\n```", "```java\n  .fetch()\n```", "```java\n  .formatJSON(JSONFormat.DEFAULT_FOR_RECORDS);    \n```", "```java\n[\n```", "```java\n  {\n```", "```java\n    \"productLine\": \"Classic Cars\",\n```", "```java\n    \"textDescription\": \"Attention car enthusiasts...\",\n```", "```java\n    \"products\": [\n```", "```java\n      {\n```", "```java\n        \"productName\": \"1968 Ford Mustang\",\n```", "```java\n        \"productVendor\": \"Autoart Studio Design\",\n```", "```java\n        \"quantityInStock\": 68\n```", "```java\n      },\n```", "```java\n      {\n```", "```java\n        \"productName\": \"1970 Chevy Chevelle SS 454\",\n```", "```java\n        \"productVendor\": \"Unimax Art Galleries\",\n```", "```java\n        \"quantityInStock\": 1005\n```", "```java\n      }\n```", "```java\n      ...\n```", "```java\n    ]\n```", "```java\n  },\n```", "```java\n  {\n```", "```java\n    \"productLine\": \"Motorcycles\", ...\n```", "```java\n  }\n```", "```java\n]\n```", "```java\npublic class SimpleProductLine {\n```", "```java\n    private String productLine;\n```", "```java\n    private String textDescription;   \n```", "```java\n    private List<SimpleProduct> products;    \n```", "```java\n}\n```", "```java\npublic class SimpleProduct {\n```", "```java\n    private String productName;\n```", "```java\n    private String productVendor;\n```", "```java\n    private Short quantityInStock;\n```", "```java\n}\n```", "```java\nList<SimpleProductLine> result = ctx.select(jsonObject(\n```", "```java\n   key(\"productLine\").value(PRODUCTLINE.PRODUCT_LINE),\n```", "```java\n   key(\"textDescription\").value(PRODUCTLINE.TEXT_DESCRIPTION),\n```", "```java\n   key(\"products\").value(select(jsonArrayAgg(jsonObject(\n```", "```java\n     key(\"productName\").value(PRODUCT.PRODUCT_NAME),        \n```", "```java\n     key(\"productVendor\").value(PRODUCT.PRODUCT_VENDOR),\n```", "```java\n     key(\"quantityInStock\").value(PRODUCT.QUANTITY_IN_STOCK)))\n```", "```java\n       .orderBy(PRODUCT.QUANTITY_IN_STOCK)).from(PRODUCT)\n```", "```java\n       .where(PRODUCTLINE.PRODUCT_LINE\n```", "```java\n          .eq(PRODUCT.PRODUCT_LINE)))))\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n   .fetchInto(SimpleProductLine.class);\n```", "```java\nResult<Record1<JSON>> result = ctx.select(jsonObject(\n```", "```java\n jsonEntry(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n jsonEntry(\"creditLimit\", CUSTOMER.CREDIT_LIMIT),\n```", "```java\n jsonEntry(\"payments\", select(jsonArrayAgg(jsonObject(\n```", "```java\n  jsonEntry(\"customerNumber\", PAYMENT.CUSTOMER_NUMBER),\n```", "```java\n  jsonEntry(\"invoiceAmount\", PAYMENT.INVOICE_AMOUNT),\n```", "```java\n  jsonEntry(\"cachingDate\", PAYMENT.CACHING_DATE),\n```", "```java\n  jsonEntry(\"transactions\", select(jsonArrayAgg(jsonObject(\n```", "```java\n    jsonEntry(\"bankName\", BANK_TRANSACTION.BANK_NAME),\n```", "```java\n    jsonEntry(\"transferAmount\", \n```", "```java\n              BANK_TRANSACTION.TRANSFER_AMOUNT)))\n```", "```java\n    .orderBy(BANK_TRANSACTION.TRANSFER_AMOUNT))\n```", "```java\n    .from(BANK_TRANSACTION)\n```", "```java\n    .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n      .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n       .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n         .eq(PAYMENT.CHECK_NUMBER))))))\n```", "```java\n    .orderBy(PAYMENT.CACHING_DATE))\n```", "```java\n    .from(PAYMENT)\n```", "```java\n    .where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n      .eq(CUSTOMER.CUSTOMER_NUMBER))),\n```", "```java\n  jsonEntry(\"details\", select(\n```", "```java\n   jsonObject(jsonEntry(\"city\", CUSTOMERDETAIL.CITY),\n```", "```java\n    jsonEntry(\"addressLineFirst\",\n```", "```java\n          CUSTOMERDETAIL.ADDRESS_LINE_FIRST),\n```", "```java\n    jsonEntry(\"state\", CUSTOMERDETAIL.STATE)))\n```", "```java\n   .from(CUSTOMERDETAIL)\n```", "```java\n   .where(CUSTOMERDETAIL.CUSTOMER_NUMBER\n```", "```java\n    .eq(CUSTOMER.CUSTOMER_NUMBER)))))\n```", "```java\n   .from(CUSTOMER).orderBy(CUSTOMER.CREDIT_LIMIT).fetch();\n```", "```java\nResult<Record1<JSON>> result = ctx.select(\n```", "```java\n CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n select(PAYMENT.CUSTOMER_NUMBER, PAYMENT.INVOICE_AMOUNT, \n```", "```java\n  PAYMENT.CACHING_DATE,\n```", "```java\n   select(BANK_TRANSACTION.BANK_NAME,   \n```", "```java\n          BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n   .from(BANK_TRANSACTION)\n```", "```java\n   .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n     .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n     .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n       .eq(PAYMENT.CHECK_NUMBER)))\n```", "```java\n   .orderBy(BANK_TRANSACTION.TRANSFER_AMOUNT)                 \n```", "```java\n   .forJSON().path().asField(\"transactions\")).from(PAYMENT)\n```", "```java\n .where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n   .eq(CUSTOMER.CUSTOMER_NUMBER))\n```", "```java\n .orderBy(PAYMENT.CACHING_DATE)                       \n```", "```java\n .forJSON().path().asField(\"payments\"),\n```", "```java\n select(CUSTOMERDETAIL.CITY,   \n```", "```java\n  CUSTOMERDETAIL.ADDRESS_LINE_FIRST,CUSTOMERDETAIL.STATE)\n```", "```java\n .from(CUSTOMERDETAIL)\n```", "```java\n  .where(CUSTOMERDETAIL.CUSTOMER_NUMBER\n```", "```java\n   .eq(CUSTOMER.CUSTOMER_NUMBER))\n```", "```java\n .forJSON().path().asField(\"details\")).from(CUSTOMER)\n```", "```java\n .orderBy(CUSTOMER.CREDIT_LIMIT).forJSON().path().fetch();\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n      xmlelement(\"name\", CUSTOMER.CUSTOMER_NAME))\n```", "```java\n   .from(CUSTOMER).fetch();\n```", "```java\n<result xmlns=\"http:…\">\n```", "```java\n<fields>\n```", "```java\n  <field name=\"xmlconcat\" type=\"XML\"/>\n```", "```java\n</fields>\n```", "```java\n<records>\n```", "```java\n  <record xmlns=\"http:…\">\n```", "```java\n    <value field=\"xmlconcat\">\n```", "```java\n      <name>Australian Home</name>\n```", "```java\n    </value>\n```", "```java\n  </record>\n```", "```java\n  <record xmlns=\"http:…\">\n```", "```java\n    <value field=\"xmlconcat\">\n```", "```java\n      <name>Joliyon</name>\n```", "```java\n    </value>\n```", "```java\n  </record>\n```", "```java\n…\n```", "```java\nresult.get(0) // 0-first <name/>, 1-second <name/> …\n```", "```java\n.value1()     // this is the value from Record1, a XML\n```", "```java\n.data()       // this is the data of the first XML as String\n```", "```java\n<name>Australian Home</name>\n```", "```java\nList<String> result = ctx.select(\n```", "```java\n    xmlelement(\"name\", CUSTOMER.CUSTOMER_NAME))\n```", "```java\n  .from(CUSTOMER).fetchInto(String.class);\n```", "```java\nString result = ctx.select(xmlelement(\"names\", xmlagg(\n```", "```java\n      xmlelement(\"name\", CUSTOMER.CUSTOMER_NAME))))\n```", "```java\n  .from(CUSTOMER).fetchSingleInto(String.class);     \n```", "```java\n<names>\n```", "```java\n  <name>Australian Home</name>\n```", "```java\n  <name>Joliyon</name>\n```", "```java\n  ...\n```", "```java\n</names>\n```", "```java\nResult<Record1<XML>> result = ctx.select(xmlelement(\"contact\",\n```", "```java\n   xmlattributes(CUSTOMER.CONTACT_FIRST_NAME.as(\"firstName\"),\n```", "```java\n   CUSTOMER.CONTACT_LAST_NAME.as(\"lastName\"), CUSTOMER.PHONE)))\n```", "```java\n .from(CUSTOMER).fetch();\n```", "```java\n<contact firstName=\"Sart\" \n```", "```java\n         lastName=\"Paoule\" phone=\"40.11.2555\"/>\n```", "```java\nResult<Record1<XML>> result = ctx.select( \n```", "```java\n  xmlelement(\"allContacts\", xmlagg(xmlelement(\"contact\",\n```", "```java\n   xmlforest(CUSTOMER.CONTACT_FIRST_NAME.as(\"firstName\"),\n```", "```java\n             CUSTOMER.CONTACT_LAST_NAME.as(\"lastName\"),\n```", "```java\n             CUSTOMER.PHONE)))))\n```", "```java\n .from(CUSTOMER).fetch();\n```", "```java\n<allContacts>\n```", "```java\n      <contact>\n```", "```java\n           <firstName>Sart</firstName>\n```", "```java\n           <lastName>Paoule</lastName>\n```", "```java\n           <phone>40.11.2555</phone>\n```", "```java\n      </contact>\n```", "```java\n…\n```", "```java\n</allContacts>\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n         OFFICE.OFFICE_CODE, OFFICE.CITY, OFFICE.COUNTRY)\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .forXML().path(\"office\").elements().root(\"offices\")\n```", "```java\n   .fetch();\n```", "```java\n<offices>\n```", "```java\n     <office>\n```", "```java\n           <office_code>1</office_code>\n```", "```java\n           <city>San Francisco</city>\n```", "```java\n           <country>USA</country>\n```", "```java\n     </office>\n```", "```java\n     <office>\n```", "```java\n           <office_code>10</office_code>\n```", "```java\n     </office>\n```", "```java\n     <office>\n```", "```java\n           <office_code>11</office_code>\n```", "```java\n           <city>Paris</city>\n```", "```java\n           <country>France</country>\n```", "```java\n     </office>\n```", "```java\n...\n```", "```java\n</offices>\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n    xmlelement(\"name\", CUSTOMER.CUSTOMER_NAME))\n```", "```java\n .from(CUSTOMER)\n```", "```java\n .orderBy(CUSTOMER.CUSTOMER_NAME).limit(3).fetch();\n```", "```java\nString result = ctx.select(xmlelement(\"allContacts\",  \n```", "```java\n xmlagg(xmlelement(\"contact\",\n```", "```java\n   xmlforest(field(\"contact_first_name\").as(\"firstName\"),\n```", "```java\n    field(\"contact_last_name\").as(\"lastName\"),field(\"phone\"))))\n```", "```java\n .orderBy(field(\"contact_first_name\"))))\n```", "```java\n .from(select(CUSTOMER.CONTACT_FIRST_NAME, \n```", "```java\n              CUSTOMER.CONTACT_LAST_NAME, CUSTOMER.PHONE)\n```", "```java\n .from(CUSTOMER).orderBy(CUSTOMER.CONTACT_LAST_NAME).limit(3))\n```", "```java\n .fetchSingleInto(String.class);\n```", "```java\n<allContacts>\n```", "```java\n     <contact>\n```", "```java\n           <firstName>Mel</firstName>\n```", "```java\n           <lastName>Andersen</lastName>\n```", "```java\n           <phone>030-0074555</phone>\n```", "```java\n     </contact>\n```", "```java\n     <contact>\n```", "```java\n           <firstName>Paolo</firstName>\n```", "```java\n           <lastName>Accorti</lastName>\n```", "```java\n           <phone>011-4988555</phone>\n```", "```java\n     </contact>\n```", "```java\n     <contact>\n```", "```java\n           <firstName>Raanan</firstName>\n```", "```java\n           <lastName>Altagar,G M</lastName>\n```", "```java\n           <phone>+ 972 9 959 8555</phone>\n```", "```java\n     </contact>\n```", "```java\n</allContacts>\n```", "```java\nResult<Record1<String>> result = \n```", "```java\n   ctx.select(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n      .from(PRODUCTLINE)\n```", "```java\n      .where(xmlexists(\"/productline\")\n```", "```java\n      .passing(PRODUCTLINE.HTML_DESCRIPTION)).fetch();\n```", "```java\nString result = ctx.select(xmlagg(\n```", "```java\n   xmlquery(\"productline/capacity/c[position()=last()]\")\n```", "```java\n     .passing(PRODUCTLINE.HTML_DESCRIPTION)))\n```", "```java\n     .from(PRODUCTLINE).fetchSingleInto(String.class);\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n    xmlquery(\"//contact/phone\").passing(\n```", "```java\n    xmlelement(\"allContacts\", xmlagg(xmlelement(\"contact\",\n```", "```java\n    xmlforest(CUSTOMER.CONTACT_FIRST_NAME.as(\"firstName\"),\n```", "```java\n              CUSTOMER.CONTACT_LAST_NAME.as(\"lastName\"),\n```", "```java\n              CUSTOMER.PHONE))))))\n```", "```java\n  .from(CUSTOMER).fetch();\n```", "```java\nResult<Record> result = ctx.select(table(\"t\").asterisk())\n```", "```java\n   .from(PRODUCTLINE, xmltable(\"//productline/details\")\n```", "```java\n     .passing(PRODUCTLINE.HTML_DESCRIPTION)\n```", "```java\n     .column(\"id\").forOrdinality()\n```", "```java\n     .column(\"power\", VARCHAR)\n```", "```java\n     .column(\"type\", VARCHAR)\n```", "```java\n     .column(\"nr_of_lines\", INTEGER).path(\"type/@nr_of_lines\")\n```", "```java\n     .column(\"command\", VARCHAR).path(\"type/@command\")\n```", "```java\n     .as(\"t\")).fetch();\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n  xmlelement(\"productLine\",\n```", "```java\n  xmlelement(\"productLine\", PRODUCTLINE.PRODUCT_LINE),\n```", "```java\n  xmlelement(\"textDescription\", PRODUCTLINE.TEXT_DESCRIPTION),\n```", "```java\n  xmlelement(\"products\", field(select(xmlagg(\n```", "```java\n  xmlelement(\"product\", xmlforest(\n```", "```java\n   PRODUCT.PRODUCT_NAME.as(\"productName\"),\n```", "```java\n   PRODUCT.PRODUCT_VENDOR.as(\"productVendor\"),\n```", "```java\n   PRODUCT.QUANTITY_IN_STOCK.as(\"quantityInStock\")))))\n```", "```java\n .from(PRODUCT)\n```", "```java\n .where(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))))))\n```", "```java\n .from(PRODUCTLINE)\n```", "```java\n .orderBy(PRODUCTLINE.PRODUCT_LINE).fetch();  \n```", "```java\nString result = ctx.select(\n```", "```java\n  xmlelement(\"productlines\", xmlagg(\n```", "```java\n  xmlelement(\"productLine\",\n```", "```java\n  ...\n```", "```java\n .from(PRODUCTLINE).fetchSingleInto(String.class);\n```", "```java\nResult<Record1<XML>> result = ctx.select( \n```", "```java\n  PRODUCTLINE.PRODUCT_LINE.as(\"productLine\"),\n```", "```java\n  PRODUCTLINE.TEXT_DESCRIPTION.as(\"textDescription\"),\n```", "```java\n  select(PRODUCT.PRODUCT_NAME.as(\"productName\"),\n```", "```java\n    PRODUCT.PRODUCT_VENDOR.as(\"productVendor\"),\n```", "```java\n    PRODUCT.QUANTITY_IN_STOCK.as(\"quantityInStock\"))     \n```", "```java\n     .from(PRODUCT)\n```", "```java\n     .where(PRODUCT.PRODUCT_LINE.eq(PRODUCTLINE.PRODUCT_LINE))\n```", "```java\n     .forXML().path().asField(\"products\"))\n```", "```java\n  .from(PRODUCTLINE)\n```", "```java\n  .forXML().path(\"productline\").root(\"productlines\")\n```", "```java\n  .fetch(); \n```", "```java\nString result = ctx.select(\n```", "```java\n       PRODUCTLINE.PRODUCT_LINE.as(\"productLine\"), \n```", "```java\n  ...\n```", "```java\n  .forXML().path(\"productline\").root(\"productlines\")\n```", "```java\n  .fetch()\n```", "```java\n  .formatXML(XMLFormat.DEFAULT_FOR_RECORDS);\n```", "```java\n<productlines>\n```", "```java\n  <productline>\n```", "```java\n    <productLine>Classic Cars</productLine>\n```", "```java\n    <textDescription>Attention ...</textDescription>\n```", "```java\n    <products>\n```", "```java\n      <product>\n```", "```java\n        <productName>1952 Alpine Renault 1300</productName>\n```", "```java\n        <productVendor>Classic Metal Creations</productVendor>\n```", "```java\n        <quantityInStock>7305</quantityInStock>\n```", "```java\n      </product>\n```", "```java\n      <product>\n```", "```java\n        <productName>1972 Alfa Romeo GTA</productName>\n```", "```java\n        <productVendor>Motor City Art Classics</productVendor>\n```", "```java\n        <quantityInStock>3252</quantityInStock>\n```", "```java\n      </product>\n```", "```java\n      ...\n```", "```java\n    </products>\n```", "```java\n  </productline>\n```", "```java\n  <productline>\n```", "```java\n    <productLine>Motorcycles</productLine>\n```", "```java\n    ...\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n xmlelement(\"customer\",\n```", "```java\n  xmlelement(\"customerName\", CUSTOMER.CUSTOMER_NAME),\n```", "```java\n  xmlelement(\"creditLimit\", CUSTOMER.CREDIT_LIMIT),\n```", "```java\n  xmlelement(\"payments\", field(select(xmlagg(\n```", "```java\n  xmlelement(\"payment\", // optional\n```", "```java\n   xmlforest(PAYMENT.CUSTOMER_NUMBER.as(\"customerNumber\"),\n```", "```java\n    PAYMENT.INVOICE_AMOUNT.as(\"invoiceAmount\"),\n```", "```java\n    PAYMENT.CACHING_DATE.as(\"cachingDate\"),\n```", "```java\n    field(select(xmlagg(xmlelement(\"transaction\", // optional\n```", "```java\n     xmlforest(BANK_TRANSACTION.BANK_NAME.as(\"bankName\"),\n```", "```java\n     BANK_TRANSACTION.TRANSFER_AMOUNT.as(\"transferAmount\")))))\n```", "```java\n .from(BANK_TRANSACTION)\n```", "```java\n .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n   .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n     .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n       .eq(PAYMENT.CHECK_NUMBER)))).as(\"transactions\")))))\n```", "```java\n .from(PAYMENT).where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n   .eq(CUSTOMER.CUSTOMER_NUMBER)))),\n```", "```java\n  xmlelement(\"details\", field(select(xmlagg(\n```", "```java\n   xmlforest(CUSTOMERDETAIL.ADDRESS_LINE_FIRST\n```", "```java\n    .as(\"addressLineFirst\"),\n```", "```java\n    CUSTOMERDETAIL.STATE.as(\"state\"))))\n```", "```java\n  .from(CUSTOMERDETAIL)\n```", "```java\n  .where(CUSTOMERDETAIL.CUSTOMER_NUMBER\n```", "```java\n    .eq(CUSTOMER.CUSTOMER_NUMBER))))))\n```", "```java\n  .from(CUSTOMER).orderBy(CUSTOMER.CREDIT_LIMIT).fetch();\n```", "```java\nResult<Record1<XML>> result = ctx.select(\n```", "```java\n CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n select(PAYMENT.CUSTOMER_NUMBER, PAYMENT.INVOICE_AMOUNT,  \n```", "```java\n  PAYMENT.CACHING_DATE, select(BANK_TRANSACTION.BANK_NAME,    \n```", "```java\n   BANK_TRANSACTION.TRANSFER_AMOUNT).from(BANK_TRANSACTION)\n```", "```java\n   .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n    .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n     .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n       .eq(PAYMENT.CHECK_NUMBER)))\n```", "```java\n   .orderBy(BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n   .forXML().path().asField(\"transactions\")).from(PAYMENT)\n```", "```java\n   .where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n     .eq(CUSTOMER.CUSTOMER_NUMBER))\n```", "```java\n   .orderBy(PAYMENT.CACHING_DATE)\n```", "```java\n   .forXML().path().asField(\"payments\"),\n```", "```java\n  select(CUSTOMERDETAIL.CITY,\n```", "```java\n   CUSTOMERDETAIL.ADDRESS_LINE_FIRST, CUSTOMERDETAIL.STATE)\n```", "```java\n   .from(CUSTOMERDETAIL)\n```", "```java\n   .where(CUSTOMERDETAIL.CUSTOMER_NUMBER\n```", "```java\n     .eq(CUSTOMER.CUSTOMER_NUMBER))\n```", "```java\n   .forXML().path().asField(\"details\"))\n```", "```java\n   .from(CUSTOMER).orderBy(CUSTOMER.CREDIT_LIMIT)\n```", "```java\n   .forXML().path().fetch();\n```", "```java\nvar result = ctx.select(\n```", "```java\n       PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.TEXT_DESCRIPTION,\n```", "```java\n    multiset(\n```", "```java\n       select(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n              PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n          .from(PRODUCT)\n```", "```java\n          .where(PRODUCTLINE.PRODUCT_LINE\n```", "```java\n             .eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n    ).as(\"products\")) // MULTISET ends here\n```", "```java\n   .from(PRODUCTLINE)\n```", "```java\n   .orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n   .fetch();\n```", "```java\nSET @t = @@group_concat_max_len;\n```", "```java\nSET @@group_concat_max_len = 4294967295;\n```", "```java\nSELECT `classicmodels`.`productline`.`product_line`,\n```", "```java\n       `classicmodels`.`productline`.`text_description`,\n```", "```java\n  (SELECT coalesce(json_merge_preserve('[]', concat('[', \n```", "```java\n          group_concat(json_array(`v0`, `v1`, `v2`) separator \n```", "```java\n          ','), ']')), json_array())\n```", "```java\n   FROM\n```", "```java\n     (SELECT `classicmodels`.`product`.`product_name` AS `v0`,\n```", "```java\n         `classicmodels`.`product`.`product_vendor` AS `v1`,\n```", "```java\n         `classicmodels`.`product`.`quantity_in_stock` AS `v2`\n```", "```java\n      FROM `classicmodels`.`product`\n```", "```java\n      WHERE `classicmodels`.`productline`.`product_line` =     \n```", "```java\n            `classicmodels`.`product`.`product_line`) \n```", "```java\n                AS `t`) AS `products`\n```", "```java\nFROM `classicmodels`.`productline`\n```", "```java\nORDER BY `classicmodels`.`productline`.`product_line`;\n```", "```java\nSET @@group_concat_max_len = @t;\n```", "```java\nvar result = ctx.select(\n```", "```java\n CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n multiset(select(PAYMENT.CUSTOMER_NUMBER,    \n```", "```java\n                 PAYMENT.INVOICE_AMOUNT, PAYMENT.CACHING_DATE,\n```", "```java\n         multiset(select(BANK_TRANSACTION.BANK_NAME, \n```", "```java\n                         BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n                 .from(BANK_TRANSACTION)\n```", "```java\n                 .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n                  .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n                  .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n                   .eq(PAYMENT.CHECK_NUMBER)))\n```", "```java\n                 .orderBy(BANK_TRANSACTION.TRANSFER_AMOUNT)))\n```", "```java\n         .from(PAYMENT)\n```", "```java\n         .where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n          .eq(CUSTOMER.CUSTOMER_NUMBER))).as(\"payments\"),\n```", "```java\n multiset(select(CUSTOMERDETAIL.CITY, \n```", "```java\n                 CUSTOMERDETAIL.ADDRESS_LINE_FIRST,  \n```", "```java\n                 CUSTOMERDETAIL.STATE)\n```", "```java\n         .from(CUSTOMERDETAIL)\n```", "```java\n         .where(CUSTOMERDETAIL.CUSTOMER_NUMBER\n```", "```java\n          .eq(CUSTOMER.CUSTOMER_NUMBER)))\n```", "```java\n           .as(\"customer_details\"))\n```", "```java\n .from(CUSTOMER)\n```", "```java\n .orderBy(CUSTOMER.CREDIT_LIMIT.desc())\n```", "```java\n .fetch();\n```", "```java\npublic record RecordProduct(String productName, \n```", "```java\n  String productVendor, Integer quantityInStock) {}\n```", "```java\npublic record RecordProductLine(String productLine, \n```", "```java\n  String textDescription, List<RecordProduct> products) {}\n```", "```java\nField<List<RecordProduct>> result = multiset(\n```", "```java\n  select(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n         PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n .from(PRODUCT)\n```", "```java\n .where(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE)))\n```", "```java\n  .as(\"products\").convertFrom(r -> \n```", "```java\n                    r.map(mapping(RecordProduct::new)));\n```", "```java\nList<RecordProductLine> resultRecord = ctx.select(\n```", "```java\n  PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.TEXT_DESCRIPTION,\n```", "```java\n  multiset(\n```", "```java\n    select(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR, \n```", "```java\n           PRODUCT.QUANTITY_IN_STOCK)\n```", "```java\n    .from(PRODUCT)\n```", "```java\n    .where(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE)))\n```", "```java\n      .as(\"products\").convertFrom(r ->    \n```", "```java\n         r.map(Records.mapping(RecordProduct::new))))\n```", "```java\n    .from(PRODUCTLINE)\n```", "```java\n    .orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n    .fetch(mapping(RecordProductLine::new));\n```", "```java\npublic record RecordBank (\n```", "```java\n String bankName, BigDecimal transferAmount) {}\n```", "```java\npublic record RecordCustomerDetail(\n```", "```java\n String city, String addressLineFirst, String state) {}\n```", "```java\npublic record RecordPayment(\n```", "```java\n Long customerNumber, BigDecimal invoiceAmount, \n```", "```java\n LocalDateTime cachingDate, List<RecordBank> transactions) {}\n```", "```java\npublic record RecordCustomer(String customerName, \n```", "```java\n BigDecimal creditLimit, List<RecordPayment> payments,  \n```", "```java\n List<RecordCustomerDetail> details) {}\n```", "```java\nList<RecordCustomer> resultRecord = ctx.select(\n```", "```java\n CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT,\n```", "```java\n multiset(select(PAYMENT.CUSTOMER_NUMBER, \n```", "```java\n                 PAYMENT.INVOICE_AMOUNT, PAYMENT.CACHING_DATE,\n```", "```java\n  multiset(select(BANK_TRANSACTION.BANK_NAME, \n```", "```java\n                  BANK_TRANSACTION.TRANSFER_AMOUNT)\n```", "```java\n           .from(BANK_TRANSACTION)\n```", "```java\n           .where(BANK_TRANSACTION.CUSTOMER_NUMBER\n```", "```java\n            .eq(PAYMENT.CUSTOMER_NUMBER)\n```", "```java\n             .and(BANK_TRANSACTION.CHECK_NUMBER\n```", "```java\n              .eq(PAYMENT.CHECK_NUMBER)))\n```", "```java\n           .orderBy(BANK_TRANSACTION.TRANSFER_AMOUNT))\n```", "```java\n           .convertFrom(r -> r.map(mapping(RecordBank::new))))\n```", "```java\n  .from(PAYMENT)           \n```", "```java\n  .where(PAYMENT.CUSTOMER_NUMBER\n```", "```java\n   .eq(CUSTOMER.CUSTOMER_NUMBER))).as(\"payments\")\n```", "```java\n  .convertFrom(r -> r.map(mapping(RecordPayment::new))),\n```", "```java\n multiset(select(CUSTOMERDETAIL.CITY, \n```", "```java\n                 CUSTOMERDETAIL.ADDRESS_LINE_FIRST, \n```", "```java\n                 CUSTOMERDETAIL.STATE)\n```", "```java\n         .from(CUSTOMERDETAIL)\n```", "```java\n         .where(CUSTOMERDETAIL.CUSTOMER_NUMBER          \n```", "```java\n          .eq(CUSTOMER.CUSTOMER_NUMBER)))\n```", "```java\n         .as(\"customer_details\")\n```", "```java\n         .convertFrom(r -> \n```", "```java\n           r.map(mapping(RecordCustomerDetail::new))))\n```", "```java\n .from(CUSTOMER)\n```", "```java\n .orderBy(CUSTOMER.CREDIT_LIMIT.desc())\n```", "```java\n .fetch(mapping(RecordCustomer::new));\n```", "```java\nvar result = ctx.select(\n```", "```java\n  PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.TEXT_DESCRIPTION,\n```", "```java\n  multisetAgg(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR,\n```", "```java\n              PRODUCT.QUANTITY_IN_STOCK).as(\"products\"))\n```", "```java\n  .from(PRODUCTLINE)\n```", "```java\n  .join(PRODUCT)\n```", "```java\n  .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n  .groupBy(PRODUCTLINE.PRODUCT_LINE, \n```", "```java\n           PRODUCTLINE.TEXT_DESCRIPTION)\n```", "```java\n  .orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n  .fetch();\n```", "```java\nList<RecordProductLine> resultRecord = ctx.select(\n```", "```java\n  PRODUCTLINE.PRODUCT_LINE, PRODUCTLINE.TEXT_DESCRIPTION,\n```", "```java\n  multisetAgg(PRODUCT.PRODUCT_NAME, PRODUCT.PRODUCT_VENDOR,\n```", "```java\n              PRODUCT.QUANTITY_IN_STOCK).as(\"products\")\n```", "```java\n    .convertFrom(r -> r.map(mapping(RecordProduct::new))))\n```", "```java\n  .from(PRODUCTLINE)\n```", "```java\n  .join(PRODUCT)\n```", "```java\n  .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n  .groupBy(PRODUCTLINE.PRODUCT_LINE,  \n```", "```java\n           PRODUCTLINE.TEXT_DESCRIPTION)\n```", "```java\n  .orderBy(PRODUCTLINE.PRODUCT_LINE)\n```", "```java\n  .fetch(mapping(RecordProductLine::new));\n```", "```java\nctx.select(count().as(\"equal_count\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .where(multiset(selectDistinct(SALE.FISCAL_YEAR)\n```", "```java\n                   .from(SALE)\n```", "```java\n                   .where(EMPLOYEE.EMPLOYEE_NUMBER\n```", "```java\n                      .eq(SALE.EMPLOYEE_NUMBER)))\n```", "```java\n         .eq(multiset(select(val(2003).union(select(val(2004))\n```", "```java\n                     .union(select(val(2007)))))))\n```", "```java\n   .fetch();\n```", "```java\n// A\n```", "```java\nctx.selectCount()\n```", "```java\n   .where(multiset(select(val(\"a\"), val(\"b\"), val(\"c\")))\n```", "```java\n   .eq(multiset(select(val(\"a\"), val(\"b\"), val(\"c\")))))\n```", "```java\n   .fetch();\n```", "```java\n// B\n```", "```java\nctx.selectCount()\n```", "```java\n   .where(multiset(select(val(\"a\"), val(\"b\"), val(\"c\")))\n```", "```java\n   .eq(multiset(select(val(\"a\"), val(\"c\"), val(\"b\")))))\n```", "```java\n   .fetch();\n```", "```java\n// C\n```", "```java\nctx.selectCount()\n```", "```java\n   .where(multiset(select(val(\"a\")).union(select(val(\"b\"))\n```", "```java\n                   .union(select(val(\"c\")))))\n```", "```java\n   .eq(multiset(select(val(\"a\")).union(select(val(\"b\"))\n```", "```java\n                   .union(select(val(\"c\")))))))\n```", "```java\n   .fetch();\n```", "```java\n// D\n```", "```java\nctx.selectCount()\n```", "```java\n   .where(multiset(select(val(\"a\")).union(select(val(\"b\"))\n```", "```java\n                   .union(select(val(\"c\")))))\n```", "```java\n   .eq(multiset(select(val(\"a\")).union(select(val(\"b\"))))))\n```", "```java\n   .fetch();\n```", "```java\ntry (Cursor<CustomerRecord> cursor \n```", "```java\n    = ctx.selectFrom(CUSTOMER).fetchLazy()) {\n```", "```java\n   while (cursor.hasNext()) {\n```", "```java\n      CustomerRecord customer = cursor.fetchNext();\n```", "```java\n      System.out.println(\"Customer:\\n\" + customer);\n```", "```java\n   }\n```", "```java\n}\n```", "```java\ntry (Cursor<CustomerRecord> cursor = ctx.selectFrom(CUSTOMER)\n```", "```java\n   .resultSetType(ResultSet.TYPE_FORWARD_ONLY)\n```", "```java\n   .resultSetConcurrency(ResultSet.CONCUR_READ_ONLY)\n```", "```java\n   .fetchSize(Integer.MIN_VALUE).fetchLazy()) {\n```", "```java\n   while (cursor.hasNext()) {\n```", "```java\n      CustomerRecord customer = cursor.fetchNext();\n```", "```java\n      System.out.println(\"Customer:\\n\" + customer);\n```", "```java\n  }\n```", "```java\n}\n```", "```java\ntry ( Cursor<CustomerRecord> cursor = ctx.selectFrom(CUSTOMER)\n```", "```java\n  .resultSetType(ResultSet.TYPE_FORWARD_ONLY) // default\n```", "```java\n  .fetchSize(1).fetchLazy()) {\n```", "```java\n  while (cursor.hasNext()) {\n```", "```java\n    CustomerRecord customer = cursor.fetchNext();\n```", "```java\n    System.out.println(\"Customer:\\n\" + customer);\n```", "```java\n  }\n```", "```java\n}\n```", "```java\nResultSet rs = ctx.selectFrom(CUSTOMER)\n```", "```java\n  .fetchLazy().resultSet();\n```", "```java\nCursor<Record> cursor = ctx.fetchLazy(rs);\n```", "```java\nCursor<Record> result = ctx.fetchLazy(\n```", "```java\n   rs, CUSTOMER.CUSTOMER_NAME, CUSTOMER.CREDIT_LIMIT);\n```", "```java\nCursor<Record> result = ctx.fetchLazy(\n```", "```java\n   rs, VARCHAR, DECIMAL);\n```", "```java\nCursor<Record> result = ctx.fetchLazy(\n```", "```java\n   rs, String.class, BigDecimal.class);\n```", "```java\ntry ( Stream<Record> stream \n```", "```java\n       = ctx.fetchStream(\"SELECT sale FROM sale\")) {\n```", "```java\n stream.filter(rs -> rs.getValue(\"sale\", Double.class) > 5000)\n```", "```java\n       .forEach(System.out::println);\n```", "```java\n}\n```", "```java\ntry ( Stream<SaleRecord> stream \n```", "```java\n       = ctx.selectFrom(SALE).fetchStream()) {\n```", "```java\n stream.filter(rs -> rs.getValue(SALE.SALE_) > 5000)\n```", "```java\n       .forEach(System.out::println);\n```", "```java\n}\n```", "```java\ntry ( Stream<SaleRecord> stream \n```", "```java\n       = ctx.selectFrom(SALE).stream()) {\n```", "```java\n stream.filter(rs -> rs.getValue(SALE.SALE_) > 5000)\n```", "```java\n       .forEach(System.out::println);\n```", "```java\n}\n```", "```java\nctx.selectFrom(SALE)\n```", "```java\n .fetch()  // jOOQ fetches the whole result set into memory \n```", "```java\n           // and closes the database connection\n```", "```java\n .stream() // stream over the in-memory result set \n```", "```java\n           // (no database connection is active)\n```", "```java\n .filter(rs -> rs.getValue(SALE.SALE_) > 5000)\n```", "```java\n .forEach(System.out::println);\n```", "```java\ntry ( Stream<Record1<Double>> stream = ctx.select(SALE.SALE_)\n```", "```java\n      .from(SALE).fetchStream()) {  // jOOQ API ends here    \n```", "```java\n SimpleSale result = stream.filter( // Stream API starts here\n```", "```java\n   rs -> rs.getValue(SALE.SALE_) > 5000)                    \n```", "```java\n      .collect(Collectors.teeing(\n```", "```java\n        summingDouble(rs -> rs.getValue(SALE.SALE_)),\n```", "```java\n        mapping(rs -> rs.getValue(SALE.SALE_), toList()),\n```", "```java\n        SimpleSale::new));\n```", "```java\n}\n```", "```java\nSimpleSale result = ctx.select(SALE.SALE_).from(SALE)\n```", "```java\n .collect(Collectors.teeing( // org.jooq.ResultQuery.collect()\n```", "```java\n   summingDouble(rs -> rs.getValue(SALE.SALE_)),\n```", "```java\n   mapping(rs -> rs.getValue(SALE.SALE_), toList()),\n```", "```java\n   SimpleSale::new));\n```", "```java\nMap<Productline, List<Product>> result = ctx.select()\n```", "```java\n .from(PRODUCTLINE).leftOuterJoin(PRODUCT)\n```", "```java\n .on(PRODUCTLINE.PRODUCT_LINE.eq(PRODUCT.PRODUCT_LINE))\n```", "```java\n .fetchSize(5) // Set the fetch size for JDBC driver           \n```", "```java\n .collect(Collectors.groupingBy(\n```", "```java\n    rs -> rs.into(Productline.class),\n```", "```java\n          Collectors.mapping(\n```", "```java\n    rs -> rs.into(Product.class), toList())));\n```", "```java\n@Async\n```", "```java\npublic CompletableFuture<Void> insertUpdateDeleteOrder() {\n```", "```java\n return CompletableFuture.supplyAsync(() -> {\n```", "```java\n  return ctx.insertInto(ORDER)\n```", "```java\n   .values(null, LocalDate.of(2003, 2, 12), \n```", "```java\n    LocalDate.of(2003, 3, 1), LocalDate.of(2003, 2, 27),    \n```", "```java\n    \"Shipped\", \"New order inserted...\", 363L, BigDecimal.ZERO)\n```", "```java\n   .returning().fetchOne();\n```", "```java\n  }).thenApply(order -> {\n```", "```java\n    order.setStatus(\"ON HOLD\");\n```", "```java\n    order.setComments(\"Reverted to on hold ...\");\n```", "```java\n    ctx.executeUpdate(order);\n```", "```java\n    return order.getOrderId();            \n```", "```java\n  }).thenAccept(id -> ctx.deleteFrom(ORDER)\n```", "```java\n    .where(ORDER.ORDER_ID.eq(id)).execute());\n```", "```java\n}\n```", "```java\n@Async\n```", "```java\npublic CompletableFuture<String> fetchManagersAsync() {   \n```", "```java\n   return ctx.select(MANAGER.MANAGER_ID, MANAGER.MANAGER_NAME)\n```", "```java\n   .from(MANAGER).fetchAsync()\n```", "```java\n   .thenApply(rs -> rs.formatHTML()).toCompletableFuture();\n```", "```java\n}\n```", "```java\n@Async\n```", "```java\npublic CompletableFuture<String> fetchOfficesAsync() {\n```", "```java\n return ctx.selectFrom(OFFICE).fetchAsync()\n```", "```java\n   .thenApply(rs -> rs.formatHTML()).toCompletableFuture();\n```", "```java\n}\n```", "```java\n@Async\n```", "```java\npublic CompletableFuture<String> fetchEmployeesAsync() {\n```", "```java\n  return ctx.select(EMPLOYEE.OFFICE_CODE, \n```", "```java\n                    EMPLOYEE.JOB_TITLE, EMPLOYEE.SALARY)  \n```", "```java\n .from(EMPLOYEE).fetchAsync()\n```", "```java\n .thenApply(rs -> rs.formatHTML()).toCompletableFuture();\n```", "```java\n}\n```", "```java\npublic String fetchCompanyAsync() {\n```", "```java\n CompletableFuture<String>[] fetchedCf \n```", "```java\n                         = new CompletableFuture[]{\n```", "```java\n  classicModelsRepository.fetchManagersAsync(),\n```", "```java\n  classicModelsRepository.fetchOfficesAsync(),\n```", "```java\n  classicModelsRepository.fetchEmployeesAsync()};\n```", "```java\n  // Wait until they are all done\n```", "```java\n  CompletableFuture<Void> allFetchedCf \n```", "```java\n                         = CompletableFuture.allOf(fetchedCf);\n```", "```java\n  allFetchedCf.join();\n```", "```java\n  // collect the final result\n```", "```java\n  return allFetchedCf.thenApply(r -> {\n```", "```java\n   StringBuilder result = new StringBuilder();\n```", "```java\n   for (CompletableFuture<String> cf : fetchedCf) {\n```", "```java\n    result.append(cf.join());\n```", "```java\n   }\n```", "```java\n   return result.toString();\n```", "```java\n   }).join();\n```", "```java\n}\n```", "```java\n@GetMapping(value = \"/employees\", \n```", "```java\n            produces = MediaType.TEXT_EVENT_STREAM_VALUE)\n```", "```java\npublic Flux<String> fetchEmployees() {\n```", "```java\n return Flux.from(\n```", "```java\n   ctx.select(EMPLOYEE.FIRST_NAME, EMPLOYEE.LAST_NAME, \n```", "```java\n              EMPLOYEE.JOB_TITLE, EMPLOYEE.SALARY)\n```", "```java\n      .from(EMPLOYEE))\n```", "```java\n      .map(e -> e.formatHTML())\n```", "```java\n        .delayElements(Duration.ofSeconds(2))\n```", "```java\n        .share();\n```", "```java\n}\n```", "```java\npublic void insertRsvps(String message) {\n```", "```java\n Flux<RsvpDocument> fluxInsertRsvp =    \n```", "```java\n  Flux.from(ctx.insertInto(RSVP_DOCUMENT)\n```", "```java\n   .columns(RSVP_DOCUMENT.ID, RSVP_DOCUMENT.RSVP, \n```", "```java\n                 RSVP_DOCUMENT.STATUS)\n```", "```java\n   .values((long) Instant.now().getNano(), message, \"PENDING\")\n```", "```java\n   .returningResult(RSVP_DOCUMENT.ID, RSVP_DOCUMENT.RSVP, \n```", "```java\n                    RSVP_DOCUMENT.STATUS))\n```", "```java\n   .map(rsvp -> new RsvpDocument(rsvp.value1(), rsvp.value2(), \n```", "```java\n              rsvp.value3()));\n```", "```java\n   processRsvp(fluxInsertRsvp);\n```", "```java\n}\n```", "```java\nprivate void recoverRsvps() {\n```", "```java\n Flux<RsvpDocument> fluxFindAllRsvps = Flux.from(\n```", "```java\n  ctx.select(RSVP_DOCUMENT.ID, RSVP_DOCUMENT.RSVP, \n```", "```java\n             RSVP_DOCUMENT.STATUS)\n```", "```java\n     .from(RSVP_DOCUMENT))\n```", "```java\n     .map(rsvp -> new RsvpDocument(rsvp.value1(), \n```", "```java\n            rsvp.value2(), rsvp.value3()));\n```", "```java\n processRsvp(fluxFindAllRsvps);\n```", "```java\n}\n```"]