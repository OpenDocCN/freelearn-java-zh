["```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <groupId>spring-five</groupId>\n  <artifactId>cms</artifactId>\n  <version>0.0.1-SNAPSHOT</version>\n  <packaging>jar</packaging>\n\n  <name>cms</name>\n  <description>Demo project for Spring Boot</description>\n\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.5.8.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n  </parent>\n\n  <properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n    <java.version>1.8</java.version>\n  </properties>\n\n  <dependencies>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-test</artifactId>\n      <scope>test</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>org.projectlombok</groupId>\n      <artifactId>lombok</artifactId>\n      <version>1.16.16</version>\n      <scope>provided</scope>\n    </dependency>\n\n    <dependency>\n      <groupId>io.springfox</groupId>\n      <artifactId>springfox-swagger2</artifactId>\n      <version>2.7.0</version>\n    </dependency>\n\n    <dependency>\n      <groupId>io.springfox</groupId>\n      <artifactId>springfox-swagger-ui</artifactId>\n      <version>2.7.0</version>\n    </dependency>\n\n  </dependencies>\n\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n\n</project>\n\n```", "```java\npackage springfive.cms;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class CmsApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(CmsApplication.class, args);\n  }\n\n}\n```", "```java\nmvn clean install spring-boot:run\n```", "```java\nmvn clean install\n```", "```java\njava -jar cms-0.0.1-SNAPSHOT.jar\n```", "```java\n<dependency>\n  <groupId>org.projectlombok</groupId>\n  <artifactId>lombok</artifactId>\n  <version>1.16.16</version>\n  <scope>provided</scope>\n</dependency>\n```", "```java\npackage springfive.cms.domain.models;\n\nimport lombok.Data;\n\n@Data\npublic class Tag {\n\n  String value;\n\n}\n```", "```java\npackage springfive.cms.domain.models;\n\nimport lombok.Data;\n\n@Data\npublic class Category {\n\n  String id;\n\n  String name;\n\n}\n```", "```java\npackage springfive.cms.domain.models;\n\nimport lombok.Data;\n\n@Data\npublic class User {\n\n  String id;\n\n  String identity;\n\n  String name;\n\n  Role role;\n\n}\n```", "```java\npackage springfive.cms.domain.models;\n\nimport java.util.Set;\nimport lombok.Data;\n\n@Data\npublic class News {\n\n  String id;\n\n  String title;\n\n  String content;\n\n  User author;\n\n  Set<User> mandatoryReviewers;\n\n  Set<Review> reviewers;\n\n  Set<Category> categories;\n\n  Set<Tag> tags;\n\n}\n```", "```java\npackage springfive.cms.domain.resources;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.vo.CategoryRequest;\n\n@RestController\n@RequestMapping(\"/api/category\")\npublic class CategoryResource {\n\n  @GetMapping(value = \"/{id}\")\n  public ResponseEntity<Category> findOne(@PathVariable(\"id\") String id){\n    return ResponseEntity.ok(new Category());\n  }\n\n  @GetMapping\n  public ResponseEntity<List<Category>> findAll(){\n    return ResponseEntity.ok(Arrays.asList(new Category(),new Category()));\n  }\n\n  @PostMapping\n  public ResponseEntity<Category> newCategory(CategoryRequest category){\n    return new ResponseEntity<>(new Category(), HttpStatus.CREATED);\n  }\n\n  @DeleteMapping(\"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void removeCategory(@PathVariable(\"id\") String id){\n  }\n\n  @PutMapping(\"/{id}\")\n  public ResponseEntity<Category> updateCategory(@PathVariable(\"id\") String id,CategoryRequest category){\n    return new ResponseEntity<>(new Category(), HttpStatus.OK);\n  }\n\n}\n```", "```java\npackage springfive.cms.domain.resources;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport springfive.cms.domain.models.News;\nimport springfive.cms.domain.models.Review;\nimport springfive.cms.domain.vo.NewsRequest;\n\n@RestController\n@RequestMapping(\"/api/news\")\npublic class NewsResource {\n\n  @GetMapping(value = \"/{id}\")\n  public ResponseEntity<News> findOne(@PathVariable(\"id\") String id){\n    return ResponseEntity.ok(new News());\n  }\n\n  @GetMapping\n  public ResponseEntity<List<News>> findAll(){\n    return ResponseEntity.ok(Arrays.asList(new News(),new News()));\n  }\n\n  @PostMapping\n  public ResponseEntity<News> newNews(NewsRequest news){\n    return new ResponseEntity<>(new News(), HttpStatus.CREATED);\n  }\n\n  @DeleteMapping(\"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  public void removeNews(@PathVariable(\"id\") String id){\n  }\n\n  @PutMapping(\"/{id}\")\n  public ResponseEntity<News> updateNews(@PathVariable(\"id\") String id,NewsRequest news){\n    return new ResponseEntity<>(new News(), HttpStatus.OK);\n  }\n\n  @GetMapping(value = \"/{id}/review/{userId}\")\n  public ResponseEntity<Review> review(@PathVariable(\"id\") String id,@PathVariable(\"userId\") String userId){\n    return ResponseEntity.ok(new Review());\n  }\n\n  @GetMapping(value = \"/revised\")\n  public ResponseEntity<List<News>> revisedNews(){\n    return ResponseEntity.ok(Arrays.asList(new News(),new News()));\n  }\n\n}\n```", "```java\npublic Review review(String userId,String status){\n  final Review review = new Review(userId, status);\n  this.reviewers.add(review);\n  return review;\n}\n```", "```java\npublic Boolean revised() {\n  return this.mandatoryReviewers.stream().allMatch(reviewer -> this.reviewers.stream()\n      .anyMatch(review -> reviewer.id.equals(review.userId) && \"approved\".equals(review.status)));\n}\n```", "```java\npackage springfive.cms.domain.service;\n\nimport java.util.List;\nimport org.springframework.stereotype.Service;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.repository.CategoryRepository;\n\n@Service\npublic class CategoryService {\n\n  private final CategoryRepository categoryRepository;\n\n  public CategoryService(CategoryRepository categoryRepository) {\n    this.categoryRepository = categoryRepository;\n  }\n\n  public Category update(Category category){\n    return this.categoryRepository.save(category);\n  }\n\n  public Category create(Category category){\n    return this.categoryRepository.save(category);\n  }\n\n  public void delete(String id){\n    final Category category = this.categoryRepository.findOne(id);\n    this.categoryRepository.delete(category);\n  }\n\n  public List<Category> findAll(){\n    return this.categoryRepository.findAll();\n  }\n\n  public Category findOne(String id){\n    return this.categoryRepository.findOne(id);\n  }\n\n}\n```", "```java\npackage springfive.cms.domain.service;\n\nimport java.util.List;\nimport java.util.UUID;\nimport org.springframework.stereotype.Service;\nimport springfive.cms.domain.models.User;\nimport springfive.cms.domain.repository.UserRepository;\nimport springfive.cms.domain.vo.UserRequest;\n\n@Service\npublic class UserService {\n\n  private final UserRepository userRepository;\n\n  public UserService(UserRepository userRepository) {\n    this.userRepository = userRepository;\n  }\n\n  public User update(String id,UserRequest userRequest){\n    final User user = this.userRepository.findOne(id);\n    user.setIdentity(userRequest.getIdentity());\n    user.setName(userRequest.getName());\n    user.setRole(userRequest.getRole());\n    return this.userRepository.save(user);\n  }\n\n  public User create(UserRequest userRequest){\n    User user = new User();\n    user.setId(UUID.randomUUID().toString());\n    user.setIdentity(userRequest.getIdentity());\n    user.setName(userRequest.getName());\n    user.setRole(userRequest.getRole());\n    return this.userRepository.save(user);\n  }\n\n  public void delete(String id){\n    final User user = this.userRepository.findOne(id);\n    this.userRepository.delete(user);\n  }\n\n  public List<User> findAll(){\n    return this.userRepository.findAll();\n  }\n\n  public User findOne(String id){\n    return this.userRepository.findOne(id);\n  }\n\n}\n```", "```java\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger2</artifactId>\n  <version>2.7.0</version>\n</dependency>\n\n<dependency>\n  <groupId>io.springfox</groupId>\n  <artifactId>springfox-swagger-ui</artifactId>\n  <version>2.7.0</version>\n</dependency>\n```", "```java\npackage springfive.cms.infra.swagger;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.bind.annotation.RestController;\nimport springfox.documentation.builders.ParameterBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2;\n\n@Configuration\n@EnableSwagger2\npublic class SwaggerConfiguration {\n\n  @Bean\n  public Docket documentation() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))\n        .paths(PathSelectors.any())\n        .build(); \n  }\n\n}\n```", "```java\npackage springfive.cms.domain.resources;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport io.swagger.annotations.ApiResponse;\nimport io.swagger.annotations.ApiResponses;\nimport java.util.List;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.PutMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.ResponseStatus;\nimport org.springframework.web.bind.annotation.RestController;\nimport springfive.cms.domain.models.Category;\nimport springfive.cms.domain.service.CategoryService;\nimport springfive.cms.domain.vo.CategoryRequest;\n\n@RestController\n@RequestMapping(\"/api/category\")\n@Api(tags = \"category\", description = \"Category API\")\npublic class CategoryResource {\n\n  private final CategoryService categoryService;\n\n  public CategoryResource(CategoryService categoryService) {\n    this.categoryService = categoryService;\n  }\n\n  @GetMapping(value = \"/{id}\")\n  @ApiOperation(value = \"Find category\",notes = \"Find the Category by ID\")\n @ApiResponses(value = {\n @ApiResponse(code = 200,message = \"Category found\"),\n @ApiResponse(code = 404,message = \"Category not found\"),\n })\n  public ResponseEntity<Category> findOne(@PathVariable(\"id\") String id){\n    return ResponseEntity.ok(new Category());\n  }\n\n  @GetMapping\n  @ApiOperation(value = \"List categories\",notes = \"List all categories\")\n @ApiResponses(value = {\n @ApiResponse(code = 200,message = \"Categories found\"),\n @ApiResponse(code = 404,message = \"Category not found\")\n })\n  public ResponseEntity<List<Category>> findAll(){\n    return ResponseEntity.ok(this.categoryService.findAll());\n  }\n\n  @PostMapping\n  @ApiOperation(value = \"Create category\",notes = \"It permits to create a new category\")\n @ApiResponses(value = {\n @ApiResponse(code = 201,message = \"Category created successfully\"),\n @ApiResponse(code = 400,message = \"Invalid request\")\n })\n  public ResponseEntity<Category> newCategory(@RequestBody CategoryRequest category){\n    return new ResponseEntity<>(this.categoryService.create(category), HttpStatus.CREATED);\n  }\n\n  @DeleteMapping(\"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  @ApiOperation(value = \"Remove category\",notes = \"It permits to remove a category\")\n  @ApiResponses(value = {\n @ApiResponse(code = 200,message = \"Category removed successfully\"),\n @ApiResponse(code = 404,message = \"Category not found\")\n })\n  public void removeCategory(@PathVariable(\"id\") String id){\n  }\n\n  @PutMapping(\"/{id}\")\n  @ResponseStatus(HttpStatus.NO_CONTENT)\n  @ApiOperation(value = \"Update category\",notes = \"It permits to update a category\")\n @ApiResponses(value = {\n @ApiResponse(code = 200,message = \"Category update successfully\"),\n @ApiResponse(code = 404,message = \"Category not found\"),\n @ApiResponse(code = 400,message = \"Invalid request\")\n })\n  public ResponseEntity<Category> updateCategory(@PathVariable(\"id\") String id,CategoryRequest category){\n    return new ResponseEntity<>(new Category(), HttpStatus.OK);\n  }\n\n}\n```", "```java\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title>Spring Boot Security</title>\n  <link rel=\"stylesheet\"  href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n</head>\n<body ng-app=\"cms\">\n\n<!-- Header -->\n<nav class=\"navbar navbar-default navbar-fixed-top\">\n  <div class=\"container\">\n    <div class=\"navbar-header\">\n      <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"#navbar\"\n              aria-expanded=\"false\" aria-controls=\"navbar\">\n        <span class=\"sr-only\">Toggle navigation</span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n        <span class=\"icon-bar\"></span>\n      </button>\n      <a class=\"navbar-brand\" href=\"#\">CMS</a>\n    </div>\n    <div id=\"navbar\" class=\"collapse navbar-collapse\">\n      <ul class=\"nav navbar-nav\">\n        <li class=\"active\"><a href=\"#\">Home</a></li>\n        <li><a href=\"#users\">Users</a></li>\n        <li><a href=\"#categories\">Categories</a></li>\n        <li><a href=\"#news\">News</a></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n<!-- Body -->\n<div class=\"container\">\n  <div ui-view></div>\n</div>\n\n<script src=\"img/angular.min.js\"></script>\n<script src=\"img/angular-ui-router.js\"></script>\n\n<script type=\"text/javascript\" src=\"img/app.js\"></script>\n\n<script type=\"text/javascript\" src=\"img/controllers.js\"></script>\n<script type=\"text/javascript\" src=\"img/services.js\"></script>\n\n<script type=\"text/javascript\" src=\"img/category-controller.js\"></script>\n<script type=\"text/javascript\" src=\"img/category-service.js\"></script>\n\n<script type=\"text/javascript\" src=\"img/news-controller.js\"></script>\n<script type=\"text/javascript\" src=\"img/news-service.js\"></script>\n\n<script type=\"text/javascript\" src=\"img/user-controller.js\"></script>\n<script type=\"text/javascript\" src=\"img/user-service.js\"></script>\n\n</body>\n</html>\n```", "```java\n<!-- Body -->\n<div class=\"container\">\n  <div ui-view></div>\n</div>\n```", "```java\n(function (angular) {\n  'use strict';\n\n  // Controllers\n  angular.module('cms.modules.category.controllers', []).\n\n  controller('CategoryCreateController',\n      ['$scope', 'CategoryService','$state',\n        function ($scope, CategoryService,$state) {\n\n          $scope.resetForm = function () {\n            $scope.category = null;\n          };\n\n          $scope.create = function (category) {\n            CategoryService.create(category).then(\n                function (data) {\n                  console.log(\"Success on create Category!!!\")\n                  $state.go('categories')\n                }, function (err) {\n                  console.log(\"Error on create Category!!!\")\n                });\n          };\n        }]).\n\n  controller('CategoryListController',\n      ['$scope', 'CategoryService',\n        function ($scope, CategoryService) {\n          CategoryService.find().then(function (data) {\n            $scope.categories = data.data;\n          }, function (err) {\n            console.log(err);\n          });\n        }]);\n})(angular);\n```", "```java\n(function (angular) {\n  'use strict';\n\n  /* Services */\n</span>  angular.module('cms.modules.category.services', []).\n  service('CategoryService', ['$http',\n    function ($http) {\n\n      var serviceAddress = 'http://localhost:8080';\n      var urlCollections = serviceAddress + '/api/category';\n      var urlBase = serviceAddress + '/api/category/';\n\n      this.find = function () {\n        return $http.get(urlCollections);\n      };\n\n      this.findOne = function (id) {\n        return $http.get(urlBase + id);\n      };\n\n      this.create = function (data) {\n        return $http.post(urlBase, data);\n      };\n\n      this.update = function (data) {\n        return $http.put(urlBase + '/id/' + data._id, data);\n      };\n\n      this.remove = function (data) {\n        return $http.delete(urlBase + '/id/' + data._id, data);\n      };\n    }\n  ]);\n})(angular);\n```"]