- en: Chapter 7. Validating Web Service Requests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章：验证Web服务请求
- en: Up to this point, we have a RESTful Web Service that produces JSON representations
    and is also capable of storing and updating contacts. Before we actually store
    or update a contact's information though, we need to ensure that the provided
    information is valid and consistent.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个生成JSON表示的RESTful Web服务，并且还能够存储和更新联系人信息。但在实际存储或更新联系人信息之前，我们需要确保提供的信息是有效且一致的。
- en: Adding validation constraints
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加验证约束
- en: The first thing we need to do in order to validate contacts is to define what
    is considered a valid contact. To do so, we will modify the representation class,
    adding constraints to its members in the form of Hibernate Validator annotations.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证联系人，我们首先需要定义什么是有效的联系人。为此，我们将修改表示类，通过Hibernate Validator注解的形式为其成员添加约束。
- en: How to do it…
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We have the `Contact` class, instances of which must have a first name, a last
    name, and a phone number in order to be considered valid. Moreover, the length
    of these values must be within specific limits. Let's go through the required
    steps in order to apply these constraints.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有`Contact`类，其实例必须有一个名字、一个姓氏和一个电话号码才能被认为是有效的。此外，这些值的长度必须在特定的限制范围内。让我们按顺序逐步了解应用这些约束的必要步骤。
- en: 'Modify the `Contact` representation class, adding the appropriate annotations
    to its members (import `org.hibernate.validator.constraints.*` first):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`Contact`表示类，为其成员添加适当的注解（首先导入`org.hibernate.validator.constraints.*`）：
- en: Update the declaration of the `firstName` variable, adding the necessary annotations
    in order to indicate that this is a required property (it should not be blank),
    and its length should be between 2 and 255 characters.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`firstName`变量的声明，添加必要的注解以指示这是一个必填属性（不应为空），其长度应在2到255个字符之间。
- en: '[PRE0]'
  id: totrans-8
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In a similar way, apply the same constraints on the `lastName` property.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式，对`lastName`属性应用相同的约束。
- en: '[PRE1]'
  id: totrans-10
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `phone` field should not be longer than 30 digits, so modify the values
    of the relevant annotation accordingly.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`phone`字段不应超过30位数字，因此相应地修改相关注解的值。'
- en: '[PRE2]'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The declaration of validation constraints is annotation-based. This gives us
    the flexibility of directly adding the validation rules we want to the members
    of our representation class.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 验证约束的声明是基于注解的。这使我们能够直接将我们想要的验证规则添加到表示类的成员中。
- en: Hibernate Validator is a part of the `dropwizard-core` module, so we do not
    need to declare any additional dependencies on our `pom.xml`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Hibernate Validator是`dropwizard-core`模块的一部分，因此我们不需要在`pom.xml`中声明任何额外的依赖。
- en: There's more…
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The recommended way of validating objects is using the standard **Bean Validation
    API** (**JSR 303**). For our validation needs, we use **Hibernate Validator**,
    which is a part of the `Dropwizard-core` module, and the reference implementation
    of JSR 303\. Using Hibernate Validator, we can declare field constraints such
    as `@NotBlank` and `@Length`, or even create and use our own custom constraints
    that fit our needs (you may refer to Hibernate Validator's documentation at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints)).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 验证对象的标准方法是使用标准的**Bean Validation API**（**JSR 303**）。对于我们的验证需求，我们使用**Hibernate
    Validator**，它是`Dropwizard-core`模块的一部分，也是JSR 303的参考实现。使用Hibernate Validator，我们可以声明字段约束，如`@NotBlank`和`@Length`，甚至创建和使用我们自己的自定义约束以满足我们的需求（您可以参考Hibernate
    Validator的文档，链接为[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints)）。
- en: List of constraint annotations
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 约束注解列表
- en: The complete list of field constraints is available on the Hibernate Validator
    package navigator at [http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 字段约束的完整列表可在Hibernate Validator包导航器中找到，链接为[http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints](http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints)。
- en: Performing validation
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行验证
- en: We've just defined what a valid annotation is. Now, we must modify the code
    of our resource class in order to verify that each POST and PUT request contains
    a valid `Contact` object, based on which a contact is created or updated.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚定义了什么是有效的注解。现在，我们必须修改我们的资源类的代码，以验证每个POST和PUT请求是否包含一个有效的`Contact`对象，基于此创建或更新联系信息。
- en: How to do it…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Let''s see what needs to be modified in our resource class by performing the
    following steps:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤查看我们的资源类需要修改什么：
- en: First, we need to import some classes that will help us with the validation.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要导入一些将帮助我们进行验证的类。
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add a final member, `validator`, and update the constructor method in order
    to initialize it.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个最终成员`validator`，并更新构造方法以初始化它。
- en: '[PRE4]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `App` class, modify the `#run()` method so as to pass the environment's
    `validator` as a parameter to `ContactResource` during its initialization, along
    with jDBI.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App`类中，修改`#run()`方法，以便在初始化`ContactResource`时将环境的`validator`作为参数传递，同时包含jDBI。
- en: '[PRE5]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Update the `ContactResource#createContact()` method and check that the contact
    information is valid prior to inserting it in the database.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`ContactResource#createContact()`方法，并在将其插入数据库之前检查联系信息是否有效。
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Similarly, update the `ContactResource#updateContact()` method.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，更新`ContactResource#updateContact()`方法。
- en: '[PRE7]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Build and run the application from the command line in order to do some tests
    with the validation mechanisms we just implemented.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从命令行构建并运行应用程序，以便对我们刚刚实现的验证机制进行一些测试。
- en: 'Using `curl`, perform an HTTP POST request to `http://localhost:8080/contact/`,
    sending contact information that is going to trigger validation errors, such as
    `firstName` and `lastName` with length less than 2 characters, and an empty value
    for the `phone` field in a JSON string such as the following:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`，向`http://localhost:8080/contact/`执行一个HTTP POST请求，发送将触发验证错误的联系信息，例如长度小于2个字符的`firstName`和`lastName`，以及一个空值的`phone`字段，如下面的JSON字符串所示：
- en: '[PRE8]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it…](img/9530OS_07_01.jpg)'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作…](img/9530OS_07_01.jpg)'
- en: 'You will see that the response is an **HTTP/1.1 400 Bad Request** error, and
    the response payload is a JSON array containing the following error messages:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到响应是一个**HTTP/1.1 400 错误请求**错误，响应负载是一个包含以下错误消息的JSON数组：
- en: '[PRE9]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the `ContactResource#createContact()` method, which is mapped to the POST
    requests to `/contact` URI, we used the environment's instance of `javax.validation.Validator`
    to validate the received `contact` object.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在映射到`/contact` URI的POST请求的`ContactResource#createContact()`方法中，我们使用了环境的`javax.validation.Validator`实例来验证接收到的`contact`对象。
- en: The validator's `#validate()` method returns a `Set<ConstraintViolation<Contact>>`
    instance, which contains the validation error that occurred, if any. We check
    the list's size to determine if there are any violations. If there are, we will
    iterate through them, extracting the validation message of each error and adding
    it to an `ArrayList` instance, which we then return as a response along with **HTTP
    Status Code 400 – Bad Request**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 验证器的`#validate()`方法返回一个`Set<ConstraintViolation<Contact>>`实例，其中包含发生的验证错误（如果有的话）。我们检查列表的大小以确定是否存在任何违规行为。如果有，我们将遍历它们，提取每个错误的验证消息，并将其添加到一个`ArrayList`实例中，然后我们将作为响应返回这个实例，并附带**HTTP状态码400
    – 错误请求**。
- en: Since our resource class produces a JSON output (already declared with the `@Produces`
    annotation at the class level), the `ArrayList` instance will be transformed to
    a JSON array thanks to Jackson.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的资源类生成JSON输出（已在类级别上通过`@Produces`注解声明），`ArrayList`实例将因Jackson而转换为JSON数组。
- en: There's more…
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: As you saw, in order to test and showcase the POST requests to the endpoint
    we created, we need an HTTP client. Apart from cURL, there are some really good
    and useful HTTP client tools available (such as Postman for Google Chrome, available
    at [https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm))
    that can help us with this, and we will also create our own in the next chapter.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，为了测试和展示我们创建的端点的POST请求，我们需要一个HTTP客户端。除了cURL之外，还有一些非常好的、有用的HTTP客户端工具可用（例如适用于Google
    Chrome的Postman，可在[https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm](https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm)），这些工具可以帮助我们，我们将在下一章中创建自己的工具。
- en: The @Valid annotation
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`@Valid`注解'
- en: 'Instead of using a `validator` object to validate the input object, we could
    have just annotated the `contact` object as `@Valid` on the `#createContact` method,
    as seen in the following line of code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用在 `#createContact` 方法上注解 `contact` 对象为 `@Valid` 来代替使用 `validator` 对象验证输入对象，如下代码所示：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: When an object is annotated with `@Valid`, the validation is recursively performed
    on it. This would have the validation triggered as soon as the method was called.
    In case the `contact` object was found invalid, then a default **HTTP 422 – Unprocessable
    entity** response will be generated automatically. While the `validator` object
    is more powerful and customizable, the usage of the `@Valid` annotation is an
    alternative, simple, and straightforward way to validate incoming requests. This
    prevents the need to return a custom, more descriptive validation error message
    to the caller, and sends a generic one instead.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象被注解为 `@Valid` 时，验证会递归地在该对象上执行。这将导致在方法被调用时立即触发验证。如果发现 `contact` 对象无效，则将自动生成默认的
    **HTTP 422 – Unprocessable entity** 响应。虽然 `validator` 对象更强大且可定制，但使用 `@Valid` 注解是一种替代的简单直接的方式来验证传入的请求。这避免了需要向调用者返回一个更详细的自定义验证错误信息，而是发送一个通用的错误信息。
- en: Cross-field validation
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨字段验证
- en: There are cases where validation should be performed on multiple fields (properties)
    of an object. We can achieve this by implementing custom validation annotations
    that also apply class-level constraints.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候需要在对象的多个字段（属性）上执行验证。我们可以通过实现自定义验证注解并应用类级别约束来实现这一点。
- en: Luckily enough, there's a much simpler way to achieve this. Dropwizard offers
    the `io.dropwizard.validation.ValidationMethod` annotation, which we can use in
    a `boolean` method of our representation class.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一个更简单的方法可以实现这一点。Dropwizard 提供了 `io.dropwizard.validation.ValidationMethod`
    注解，我们可以在表示类的 `boolean` 方法中使用它。
- en: How to do it…
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现…
- en: 'Here are the steps needed in order to add cross-field validation to a `contact`
    object. We will check that the contact''s full name is not John Doe:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是向 `contact` 对象添加跨字段验证所需的步骤。我们将检查联系人的全名不是 John Doe：
- en: Add a new method in the `Contact` class named `#isValidPerson()`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Contact` 类中添加一个名为 `#isValidPerson()` 的新方法。
- en: '[PRE11]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Then, we need to ensure that the output of this method will never be included
    in the output when it is serialized by Jackson. For this, annotate the `#isValidPerson()`
    method with the `@JsonIgnore` annotation (`com.fasterxml.jackson.annotation.JsonIgnore`).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要确保当这个方法被 Jackson 序列化时，其输出永远不会包含在输出中。为此，使用 `@JsonIgnore` 注解 (`com.fasterxml.jackson.annotation.JsonIgnore`)
    注解 `#isValidPerson()` 方法。
- en: Finally, annotate the same method with `@ValidationMethod` (`io.dropwizard.validation.ValidationMethod`),
    and also provide an error message in case of validation failure.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用 `@ValidationMethod` (`io.dropwizard.validation.ValidationMethod`) 注解相同的验证方法，并在验证失败的情况下提供错误信息。
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When the validation is triggered, the `#isValidPerson()` method is executed
    along with the custom validation code we've put there. If the method returns true,
    that means the constraint implied by it is satisfied. If the method returns false,
    that indicates a constraint violation, and the validation error message will be
    the one we specified along with the `ValidationMethod` annotation.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当触发验证时，`#isValidPerson()` 方法将与我们放置的自定义验证代码一起执行。如果方法返回 true，则表示隐含的约束得到满足。如果方法返回
    false，则表示违反了约束，验证错误信息将是与 `ValidationMethod` 注解一起指定的那个。
- en: You can create and have as many cross-field validation methods as you want in
    your classes. However, note that every custom validation method must be of the
    return type `boolean`, and its name must begin with `is`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在类中创建任意数量的跨字段验证方法。然而，请注意，每个自定义验证方法都必须返回 `boolean` 类型，并且其名称必须以 `is` 开头。
