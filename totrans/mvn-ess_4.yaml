- en: Chapter 4. Maven Plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The roots of Maven go back to the *Jakarta Turbine* project, which was started
    as an attempt to simplify the build process of Jakarta Turbine. The beauty of
    Maven is its design. It does not try to do everything by itself, but rather delegates
    to a plugin framework. When you download Maven from its website, it''s only the
    core framework, and the plugins are downloaded on demand. All the useful functionalities
    in the build process are developed as Maven plugins. You can also call Maven a
    plugin execution framework. The following figure shows the Maven plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Maven Plugins](img/B02157_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A Maven plugin can be executed on its own or can be executed as a part of a
    Maven lifecycle. We will discuss Maven lifecycles in [Chapter 5](ch05.html "Chapter 5. Build
    Lifecycles"), *Build Lifecycles*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A Maven build lifecycle consists of a set of well-defined phases. Each phase
    groups a set of goals defined by Maven plugins and the lifecycle defines the order
    of execution. Maven comes with three standard lifecycles: **default**, **clean**,
    and **site**. Each lifecycle defines its own set of phases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Each plugin has its own set of goals, and each goal is responsible for performing
    a specific action. Let''s see how to execute the `clean` goal of the Maven `clean`
    plugin. The `clean` goal will attempt to clean the working directory and the associated
    files created during the build:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maven plugins can be self-executed as `mvn plugin-prefix-name:goal-name`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The same `clean` plugin can be executed via the `clean` lifecycle, as shown
    in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The clean goal of the Maven `clean` plugin is associated with the `clean` phase
    of the clean lifecycle. The clean lifecycle defines three phases: `pre-clean`,
    `clean`, and `post-clean`. A phase in a lifecycle is just an ordered placeholder
    in the build execution path. For example, the `clean` phase in the `clean` lifecycle
    cannot do anything on its own. In the Maven architecture, it has two key elements:
    nouns and verbs. Both nouns and verbs, which are related to a given project, are
    defined in the POM file. The name of the project, the name of the parent project,
    the dependencies, and the type of packaging are nouns. Plugins bring verbs into
    the Maven build system, and they define what needs to be done during the build
    execution via its goals. A plugin is a group of goals. Each goal of a plugin can
    be executed on its own or can be registered as part of a phase in a Maven build
    lifecycle. One difference here is that when you execute a Maven plugin on its
    own, it only runs the goal specified in the command; however, when you run it
    as a part of a lifecycle, then Maven executes all the plugin goals associated
    with the corresponding lifecycle up until the specified phase (including that
    phase).'
  prefs: []
  type: TYPE_NORMAL
- en: When you type `mvn clean`, it executes all the phases defined in the `clean`
    lifecycle up to and including the `clean` phase. Don't be confused; in this command,
    `clean` is not the name of the lifecycle, it's the name of a phase. It's only
    a coincidence that the name of the phase happens to be the name of the lifecycle.
    In Maven, you cannot simply execute a lifecycle by its name—it has to be the name
    of a phase. Maven will find the corresponding lifecycle and will execute all phases
    in it up to the given phase (including that phase).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be talking about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Commonly used Maven plugins and their usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plugin discovery and execution process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common Maven plugins
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maven plugins are mostly developed under the Apache Maven project itself, as
    well as under the Codehaus and Google Code projects. The following sections list
    out a set of commonly used Maven plugins and their usages.
  prefs: []
  type: TYPE_NORMAL
- en: The clean plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As discussed earlier, the `clean` plugin executes the `clean` goal of the Maven
    `clean` plugin to remove any of the working directories and other resources created
    during the build, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The Maven `clean` plugin is also associated with the `clean` lifecycle. If you
    just execute `mvn clean`, the `clean` goal of the `clean` plugin will get executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You do not need to explicitly define the Maven `clean` plugin in your project
    POM file. Your project inherits it from the Maven super POM file. In [Chapter
    2](ch02.html "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding
    the Project Object Model (POM)*, we discussed the Maven super POM file in detail.
    The following configuration in the super POM file associates the Maven `clean`
    plugin with all the Maven projects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Maven `default` lifecycle includes the phases: validate, initialize, generate-sources,
    process-sources, generateresources, process-resources, compile, process-classes,
    generate-test-sources, process-test-sources, generate-testresources, process-test-resources,
    test-compile, process-testclasses, test, prepare-package, package, pre-integration-test,
    integration-test, post-integration-test, verify, install, deploy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `clean` goal of the `clean` plugin runs under the `clean` phase
    of the Maven `clean` lifecycle. If your project wants the `clean` plugin to run
    by default, then you can associate it with the `initialize` phase of the Maven
    `default` lifecycle. You can add the following configuration to your application
    POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, the `clean` goal of the `clean` plugin will get executed when you execute
    any of the phases in the Maven `default` lifecycle; there is no need to explicitly
    execute the `clean` phase of the `clean` lifecycle. For example, `mvn install`
    will run the `clean` goal in its `initialize` phase. This way, you can override
    the default behavior of the Maven `clean` plugin. A complete Maven sample project
    with the previous plugin configuration is available at [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose).
  prefs: []
  type: TYPE_NORMAL
- en: The compiler plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `compiler` plugin is used to compile the source code. This has two goals:
    `compile` and `testCompile`. The `compile` goal is bound to the `compile` phase
    of the Maven `default` lifecycle. When you type `mvn clean install`, Maven will
    execute all the phases in the `default` lifecycle up to the `install` phase, which
    also includes the `compile` phase. This, in turn, will run the `compile` goal
    of the `compiler` plugin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to execute the `compile` goal of the `compiler`
    plugin by itself. This will simply compile your source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'All the Maven projects inherit the `compiler` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `compiler`
    plugin. It associates the `testCompile` and `compile` goals with the `test-compile`
    and `compile` phases of the Maven `default` lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, the Maven `compiler` plugin assumes JDK 1.5 for both the `source`
    and `target` elements. JVM identifies the Java version of the source code via
    the `source` configuration parameter and the version of the compiled code via
    the `target` configuration parameter. If you want to break the assumption made
    by Maven and specify your own `source` and `target` versions, you need to override
    the `compiler` plugin configuration in your application POM file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You can pass any argument to the `compiler` plugin under the `compilerArgument`
    element, not just the source and target elements. This is more useful when the
    Maven `compiler` plugin does not have an element defined for the corresponding
    JVM argument. For example, the same `source` and `target` values can also be passed
    in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The install plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `install` plugin will deploy the final project artifacts into the `local`
    Maven repository defined under the `localRepository` element of `MAVEN_HOME/conf/settings.xml`,
    where the default location is `USER_HOME/.m2/repository`. The `install` goal of
    the `install` plugin is bound to the `install` phase of the Maven `default` lifecycle.
    When you type `mvn clean install`, Maven will execute all the phases in the `default`
    lifecycle up to and including the `install` phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to execute the `install` goal of the `install`
    plugin by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'All the Maven projects inherit the `install` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `install` plugin.
    It associates the `install` goal with the `install` phase of the Maven `default`
    lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `install` goal of the `install` plugin does not have any configurations
    to be overridden at the project level.
  prefs: []
  type: TYPE_NORMAL
- en: The deploy plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `deploy` plugin will deploy the final project artifacts into a remote Maven
    repository. The `deploy` goal of the `deploy` plugin is associated with the `deploy`
    phase of the `default` Maven lifecycle. To deploy an artifact via the `default`
    lifecycle, `mvn clean install` is not sufficient. It has to be `mvn clean deploy`.
    Any guesses why?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `deploy` phase of the `default` Maven lifecycle comes after the `install`
    phase. Executing `mvn clean deploy` will execute all the phases of the `default`
    Maven lifecycle up to and including the `deploy` phase, which also includes the
    `install` phase. The following command shows how to execute the `deploy` goal
    of the `deploy` plugin by itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All the Maven projects inherit the `deploy` plugin from the super POM file.
    As shown in the following configuration, super POM defines the `deploy` plugin.
    It associates the `deploy` goal with the `deploy` phase of the Maven `default`
    lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Before executing either `mvn deploy:deploy` or `mvn deploy`, you need to set
    up the remote Maven repository details in your project POM file, under the `distributionManagement`
    section, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, Maven connects to the remote repository via `scp`. **Secure
    Copy** (**scp**) defines a way of securely transferring files between two nodes
    in a computer network, which is built on top of popular SSH. To authenticate to
    the remote server, Maven provides two ways; one is based on a username and password,
    and the other one is based on SSH authentication keys. To configure username/password
    credentials against the Maven repository, we need to add the following `<server>`
    configuration element to `USER_HOME/.m2/settings.xml`. The value of the `id` element
    must carry the value of the remote repository hostname:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If the remote repository only supports SSH authentication keys, then we need
    to specify the location of the private key, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `deploy` goal of the `deploy` plugin does not have any configurations to
    be overridden at the project level.
  prefs: []
  type: TYPE_NORMAL
- en: The surefire plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `surefire` plugin will run the unit tests associated with the project. The
    `test` goal of the `surefire` plugin is bound to the `test` phase of the `default`
    Maven lifecycle. When you type `mvn clean install`, Maven will execute all the
    phases in the `default` lifecycle up to and including the `install` phase, which
    also includes the `test` phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to execute the `test` goal of the `surefire`
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'All the Maven projects inherit the `surefire` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `surefire`
    plugin. It associates the `test` goal with the `test` phase of the Maven `default`
    lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the `surefire` plugin is defined in the super POM file, you do not need
    to add it explicitly to your application POM file. However, you need to add a
    dependency to `junit`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `surefire` plugin is not just coupled to JUnit, it can be used with other
    testing frameworks as well. If you are using TestNG, then you need to add a dependency
    to `testng`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `surefire` plugin introduces a concept called test providers. You can specify
    a test provider within the plugin itself; if not, it will be derived from the
    dependency JAR file. For example, if you want to use the `junit47` provider, then
    within the plugin configuration, you can specify it as shown here. The `surefire`
    plugin supports, by default, four test providers: `surefire-junit3`, `surefire-junit4`,
    `surefire-junit47`, and `surefire-testng`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Since all the Maven projects inherit the `surefire` plugin from the super POM
    file, you do not need to override its configuration in the application POM file
    unless it's an absolute necessity. One of the reasons to override the parent configuration
    is to override the default test provider selection algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: The site plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `site` plugin generates static HTML web content for a Maven project, including
    the reports configured in the project. This defines eight goals, where each goal
    runs in one of the four phases defined in the Maven `site` lifecycle: `pre-site`,
    `site`, `post-site`, and `site-deploy`, which can be described as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`site:site`: This goal generates a site for a single Maven project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:deploy`: This goal deploys the generated site via a Wagon supported protocol
    to the site URL specified in the `<distributionManagement>` section of the POM
    file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:run`: This goal opens the site with the Jetty web server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:stage`: This goal generates a site in a local staging or mock directory
    based on the site URL specified in the `<distributionManagement>` section of the
    POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:stage-deploy`: This goal deploys the generated site to a staging or mock
    directory to the site URL specified in the `<distributionManagement>` section
    of the POM file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:attach-descriptor`: This goal adds the site descriptor (`site.xml`) to
    the list of files to be installed/deployed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:jar`: This goal bundles the site output into a JAR file so that it can
    be deployed to a repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`site:effective-site`: This goal calculates the effective site descriptor after
    inheritance and interpolation of `site.xml`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the Maven projects inherit the `site` plugin from the super POM file. As
    shown in the following configuration, the super POM defines the `site` plugin.
    It associates the `site` and `deploy` goals with the `site` and `site-deploy`
    phases of the Maven `default` lifecycle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'As defined in the previous configuration, when you run `mvn site` or `mvn site:site`,
    the resultant HTML web content will be created inside the `target/site` directory
    under the project home. The `site` goal of the `site` plugin only generates the
    HTML web content; to deploy it, you need to use the `deploy` goal. To deploy `site`
    to a remote application server, you need to specify the remote machine details
    under the `distributionManagement` section of your application POM file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To configure credentials to connect to the remote computer, you need to add
    the following `<server>` configuration element under the `<servers>` parent element
    of `USER_HOME/.m2/settings.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated site or the web content can be deployed to the remote location
    by executing the `deploy` goal of the Maven `site` plugin, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In most of the cases, you do not need to override the `site` plugin configuration.
  prefs: []
  type: TYPE_NORMAL
- en: The jar plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `jar` plugin creates a JAR file from your Maven project. The `jar` goal
    of the `jar` plugin is bound to the `package` phase of the Maven `default` lifecycle.
    When you type `mvn clean install`, Maven will execute all the phases in the `default`
    lifecycle up to and including the `install` phase, which also includes the `package`
    phase.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following command shows how to execute the `jar` goal of the `jar` plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: All the Maven projects inherit the `jar` plugin from the super POM file. As
    shown in the following configuration, the super POM defines the `jar` plugin.
    It associates the `jar` goal with the `package` phase of the Maven `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: In most of the cases, you do not need to override the `jar` plugin configuration,
    except in a case where you need to create a self-executable JAR file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Creating a self-executable JAR file with `maven-jar-plugin` can be found at
    [http://maven.apache.org/shared/maven-archiver/examples/classpath.html](http://maven.apache.org/shared/maven-archiver/examples/classpath.html).
  prefs: []
  type: TYPE_NORMAL
- en: The source plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `source` plugin creates a JAR file with the project source code. It defines
    five goals: `aggregate`, `jar`, `test-jar`, `jar-no-fork`, and `test-jar-no-fork`.
    All these five goals of the `source` plugin run under the `package` phase of the
    `default` lifecycle.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike any of the plugins we discussed earlier, if you want to execute the
    `source` plugin with the Maven `default` lifecycle, it has to be defined in the
    project POM file, as shown here. The super POM file does not define the `source`
    plugin; it has to be defined within your Maven project itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: What is the difference between the `jar` plugin and the `source` plugin? Both
    create JAR files; however, the `jar` plugin creates a JAR file from the binary
    artifact, while the `source` plugin creates a JAR file from the source code. Small-scale
    open source projects use this approach to distribute the corresponding source
    code along with the binary artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: The resources plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `resources` plugin copies the resources associated with the main project
    as well as the tests to the project output directory. The `resources` goal of
    the `resources` plugin copies the main resources into the main output directory,
    and it runs under the `process-resources` phase of the Maven `default` lifecycle.
    The `testResources` goal copies all the resources associated with the tests to
    the test output directory, and it runs under the `process-test-resources` phase
    of the Maven `default` lifecycle. The `copyResources` goal can be configured to
    copy any resource to the project output directory, and this is not bound to any
    of the phases in the Maven `default` lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: All the Maven projects inherit the `resources` plugin from the super POM file.
    As shown in the following configuration, super POM defines the `resources` plugin.
    It associates `resources` and `testResources` goals with the `process-resources`
    and `process-test-resources` phases of the Maven `default` lifecycle. When you
    type `mvn clean install`, Maven will execute all the phases in the `default` lifecycle
    up to and including the `install` phase, which also includes the `process-resources`
    and `process-test-resources` phases.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In most of the cases, you do not need to override the `resources` plugin configuration,
    unless you have a specific need to filter `resources`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about resource filtering with `maven-resources-plugin` can be found
    at [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html](http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html).
  prefs: []
  type: TYPE_NORMAL
- en: The release plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Releasing a project requires a lot of repetitive tasks. The objective of the
    Maven `release` plugin is to automate them. The `release` plugin defines the following
    eight goals, which are executed in two stages: preparing the release and performing
    the release:'
  prefs: []
  type: TYPE_NORMAL
- en: '`release:clean`: This goal cleans up after a release preparation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:prepare`: This goal prepares for a release in **Software Configuration
    Management** (**SCM**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:prepare-with-pom`: This goal prepares for a release in SCM, and it
    generates release POMs by fully resolving the dependencies'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:rollback`: This goal rolls back to a previous release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:perform`: This goal performs a release from SCM'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:stage`: This goal performs a release from SCM into a staging folder/repository'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:branch`: This goal creates a branch of the current project with all
    the versions updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`release:update-versions`: This goal updates the versions in POM(s)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The preparation stage will complete the following tasks with the `release:prepare`
    goal:'
  prefs: []
  type: TYPE_NORMAL
- en: It verifies that all the changes in the source code are committed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It ensures that there are no SNAPSHOT dependencies. During the project development
    phase, we use SNAPSHOT dependencies; however, at the time of the release, all
    the dependencies should be changed to the latest released version of each dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The version of the project POM file will be changed from SNAPSHOT to a concrete
    version number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SCM information in the project POM file will be changed to include the final
    destination of the tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It execute all the tests against the modified POM files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It commits the modified POM files to SCM and tag the code with the version name.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It changes the version in POM files in the trunk to a SNAPSHOT version and commits
    the modified POM files to the trunk.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, the release will be performed with the `release:perform` goal. This
    will check out the code from the `release` tag in the SCM, and run a set of predefined
    goals: `site` and `deploy-site`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `maven-release-plugin` is not defined in the super POM file; it should
    be explicitly defined in your application POM file. The `releaseProfiles` configuration
    element defines the profiles to be released, and the `goals` configuration element
    defines the plugin goals to be executed during `release:perform`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Plugin discovery and execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To associate a plugin with your Maven project, you have to either define it
    explicitly in your application POM file, or you should inherit it from a parent
    POM or the super POM file. Let''s take a look at the Maven `jar` plugin. The `jar`
    plugin is defined by the super POM file, and all the Maven projects inherit it.
    To define a plugin (which is not inherited from the POM hierarchy), or associate
    a plugin with your Maven project, you must add the plugin configuration under
    the `build/plugins/plugin` element of your application `pom.xml`. In this way,
    you can associate any number of plugins with your project, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In the Maven execution environment, what matters is not just your application
    POM file but the effective POM file. The effective POM file is constructed by
    the project POM file, any parent POM files, and the super POM file.
  prefs: []
  type: TYPE_NORMAL
- en: 'A Maven plugin can be executed in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using a lifecycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directly invoking a plugin goal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it is executed via a lifecycle, then there are plugin goals associated with
    different phases of the lifecycle. When each phase gets executed, all the plugin
    goals will also get executed only if the effective POM file of the project has
    defined the corresponding plugins under its plugins configuration. The same applies
    even when you try to invoke a plugin goal directly (for example, `mvn jar:jar`),
    the goal will be executed only if the corresponding plugin is associated with
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: In either way, how does Maven find the plugin corresponding to the provided
    plugin goal?
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to any other dependency in Maven, a plugin is also uniquely identified
    by three coordinates: `groupId`, `artifactId`, and `version`. For plugins, however,
    you do not need to explicitly specify `groupId`. Maven assumes two `groupId` elements
    by default: `org.apache.maven.plugins` and `org.codehaus.mojo`. First, it will
    try to locate the plugin from `USER_HOME/.m2/repository/org/apache/maven/plugins`,
    and if that fails, it will locate it from `USER_HOME/.m2/repository/org/codehaus/mojo`.'
  prefs: []
  type: TYPE_NORMAL
- en: In the previous sample plugin configuration, you may not find `groupId`. The
    `jar` plugin is available at `USER_HOME/.m2/repository/org/apache/maven/plugins/maven-jar-plugin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Maven also lets you add your own plugin groups, and they can be included in
    the plugin discovery. You can do it by updating `USER_HOME/.m2/settings.xml` or
    `MAVEN_HOME/conf/settings.xml`, as shown in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Maven will always give priority to the previous configuration and then start
    looking for the well-known `groupId` elements: `org.apache.maven.plugins` and
    `org.codehaus.mojo`.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at some of the sample plugin configurations used in some popular
    open source projects.
  prefs: []
  type: TYPE_NORMAL
- en: Apache Felix provides a `bundle` plugin for Maven, which creates an OSGi bundle
    out of a Maven project. Another open source project, WSO2 Carbon, uses this `bundle`
    plugin in its development. You can find a sample POM file, which consumes the
    plugin at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml).
    This is a custom plugin, which does not fall into any of the `groupId` elements
    known to Maven by default. In that case, anyone who uses the plugin must qualify
    the plugin with `groupId`, or they must add the corresponding `groupId` element
    to the `pluginGroups` configuration element, as discussed earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows the plugin configuration from the WSO2 Carbon project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Plugin management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you take a look at the previous configuration carefully, you do not see a
    version for the `bundle` plugin. This is where the `pluginManagement` element
    comes into play. With the `pluginManagement` configuration element, you can avoid
    repetitive usage of the plugin version. Once you define a plugin under `pluginManagement`,
    all the child POM files will inherit that configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'The WSO2 Carbon project defines all the plugins used by its child projects
    under the `pluginManagement` section of [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml),
    and all the projects inherit it. A truncated part of the configuration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We'll discuss plugin management in detail in [Chapter 7](ch07.html "Chapter 7. Best
    Practices"), *Best Practices*.
  prefs: []
  type: TYPE_NORMAL
- en: Plugin repositories
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven downloads plugins on demand when it cannot find a plugin in its local
    repository. By default, Maven looks for any plugin that is not available locally
    in the Maven plugin repository defined by the super POM file (this is the default
    behavior; you can also define plugin repositories in your application POM file).
    The following code snippets shows how to define plugin repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If you develop a custom plugin, just like the Apache Felix `bundle` plugin,
    you must make it available for the rest via a plugin repository, and any other
    consumer of that plugin, such as the WSO2 Carbon project, must define the corresponding
    plugin repository in its POM file or in a parent POM file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The WSO2 Carbon project defines two plugin repositories in its parent POM file
    at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml).
  prefs: []
  type: TYPE_NORMAL
- en: The Apache Felix `bundle` plugin is available at [http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/](http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/).
  prefs: []
  type: TYPE_NORMAL
- en: 'The following configuration is a part of the WSO2 Carbon project `parent/pom.xml`,
    which defines the two plugin repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: Plugin as an extension
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you look at the definition of the Apache Felix `bundle` plugin, you might
    have noticed the `extensions` configuration element, which is set to `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'As we discussed earlier, the goal of the `bundle` plugin is to build an OSGi
    bundle from a Maven project. In other words, the Apache Felix `bundle` plugin
    introduces a new packaging type with an existing file extension, `.jar`. If you
    look at the POM file of the WSO2 Carbon project, which consumes the `bundle` plugin,
    you can see the packaging of the project is set to `bundle` ([https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml)),
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If you are associating a plugin with your project, which introduces a new packaging
    type or a customized lifecycle, then you must set the value of the `extensions`
    configuration element to `true`. Once this is done, the Maven engine will go further
    and will look for the `components.xml` file inside `META-INF/plexus` of the corresponding
    `jar` plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on Maven plugins. Maven only provides a build framework
    while the Maven plugins perform the actual tasks. Maven has a large, rich set
    of plugins, and the chances that you have to write your own custom plugin are
    very slim. This chapter covered some of the most commonly used Maven plugins,
    and later explained how plugins are discovered and executed. If you would like
    to know about custom plugin development, refer to the book, *Mastering Apache
    Maven 3* by *Packt Publishing*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on Maven build lifecycle.
  prefs: []
  type: TYPE_NORMAL
