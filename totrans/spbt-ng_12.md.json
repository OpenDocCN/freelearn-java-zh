["```java\n{\ntype: '[Blog] Add Blog',\ntitle: string;\nauthor: string;\ncontent: string;\n}\n```", "```java\nexport const blogReducer = createReducer( initialState,\n  on(BlogActions.addBlog, (state, {blog})=> ({ ...state,\n    blogs: […state.blogs, blog]}))\n);\n```", "```java\n// selector for list of blogs\n// blog.selector.ts\nexport const selectBlogList = (state: AppState) => state.blogs;\n// blog component\n// blog.component.ts\nblogs$ = this.store.select<Array<Blog>(selectBlogList);\n   this.blogs$.subscribe(data => {\n      console.log(data) // list of blogs from the state;\n    });\n```", "```java\nexport class BlogPageComponent {\n  movies: Blog[];\n  constructor(private blogService: MoviService) {}\n  ngOnInit() {\n    this.blogService\n        .getAll()\n        .subscribe(blogs => this.blogs = blogs);\n  }\n}\n```", "```java\nexport class BlogsPageComponent {\n  blogs$: Observable<Blog[]> = this.store.select(state =>\n    state.blog);\n  constructor(private store: Store<{ blogs: Blog[] }>) {}\n  ngOnInit() {\n    this.store.dispatch({ type: '[Blog Page] Load Blog'});\n  }\n}\n```", "```java\n@Injectable()\nexport class BlogEffects {\n  loadBlogs$ = createEffect(() => this.actions$.pipe(\nofType('[Blog Page] Load Blog'),\n  mergeMap(() => this.blogService\n     .getAll().pipe(\n       map(blogs => ({ type: '[Blogs API] Blogs Loaded\n                      Success', payload: blogs })),\n       catchError(() => EMPTY)\n     ))\n   )\n);\n  constructor(private actions$: Actions,\n              private blogService: BlogService) {}\n}\n```", "```java\nng add @ngrx/store\n```", "```java\n// app.module.ts\n imports: [\n    … other modules\n    StoreModule.forRoot({}, {}),\n  ],\n// package.json\n\"dependencies\": {\n     … other dependencies\n    \"@ngrx/store\": \"^13.2.0\",\n  },\n```", "```java\nng add @ngrx/store-devtools\n```", "```java\n// app.module.ts\nimports: [\n… other modules\n// Instrumentation must be imported after importing\n// StoreModule (config is optional)\nStoreDevtoolsModule.instrument({\n  maxAge: 25, // Retains last 25 states\n  logOnly: environment.production, // Restrict extension to\n                                   // log-only mode\n  autoPause: true, // Pauses recording actions and state\n                   // changes when the extension window is\n                   //not open\n}),\n],\n```", "```java\nimport { createAction, props } from '@ngrx/store';\nexport const setBlogList = createAction(\n '[Blog] Set Blog List',\n  props<{ blogs: ReadonlyArray<Blog> }>(),\n);\n```", "```java\nngOnInit() {\n     store.dispatch(setBlogList ({ blogs: this.blogs}));\n}\n```", "```java\nimport { createAction, props } from '@ngrx/store';\nimport { AntiHero } from '../models/anti-hero.interface';\nexport enum AntiHeroActions {\n  GET_ANTI_HERO_LIST = '[Anti-Hero] Get Anti-Hero list',\n  SET_ANTI_HERO_LIST = '[Anti-Hero] Set Anti-Hero list',\n}\nexport const getAntiHeroList = createAction(\n    AntiHeroActions.GET_ANTI_HERO_LIST,\n);\nexport const setAntiHeroList = createAction(\n  AntiHeroActions.SET_ANTI_HERO_LIST,\n  props<{ antiHeroes: ReadonlyArray<AntiHero> }>(),\n);\n```", "```java\nng add @ngrx/effects\n```", "```java\n@Injectable()\nexport class AntiHeroEffects {\n  constructor(\n    private actions$: Actions,\n    private antiHeroService: AntiHeroService,\n    private router: Router\n  ) {}\n}\n```", "```java\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\ngetAntiHeroes$ = createEffect(() => {\n    return this.actions$.pipe(\n        ofType(AntiHeroActions.GET_ANTI_HERO_LIST),\n        mergeMap(() => this.antiHeroService.getAntiHeroes()\n        )\n    }, {dispatch: true}\n  );\n```", "```java\n  mergeMap(() => this.antiHeroService.getAntiHeroes()\n          .pipe(\n            map(antiHeroes => ({ type: AntiHeroActions.SET_ANTI_HERO_LIST, antiHeroes })),\n            catchError(() => EMPTY)\n          ));\n```", "```java\nexport interface AntiHeroState {\n    antiHeroes: ReadonlyArray<AntiHero>;\n}\n```", "```java\nexport const initialState: AntiHeroState = {\n    antiHeroes: []\n}\n```", "```java\nexport const antiHeroReducer = createReducer(\n  initialState,\n  on(setAntiHeroList, (state, { antiHeroes }) => { return {...state, antiHeroes}}),\n  );\n```", "```java\n// blogs.selectors.ts\nexport const selectBlogs = (state: AppState) => state.blogs\n```", "```java\n//blogs.page.ts\nblogs$ = this.store.select(selectBlogs())\nconstructor(private store: Store<AppState>,){\n   this.blogs$.subscribe((data) => {\n      this.blogs = data;\n    });\n}\n```", "```java\n// blogs.selectors.ts\nimport { createSelector, createFeatureSelector } from '@ngrx/store';\nexport const selectBlogsState = createFeatureSelector<BlogsState>('blogsState')\nexport const selectBlogs = () => createSelector\n    selectBlogsState,\n    (state: BlogsState) => state.blogs\n)\n```", "```java\n// select the AntiHeroState\nexport const selectAntiHeroState = createFeatureSelector<AntiHeroState>('antiHeroState')\n// selecting all antiheroes\nexport const selectAntiHeroes = () => createSelector(\n    selectAntiHeroState,\n    (state: AntiHeroState) => state.antiHeroes\n)\n// selecting an antihero base on id\nexport const selectAntiHero = (id: string) => createSelector(\n    selectAntiHeroState,\n    (state: AntiHeroState) => state.antiHeroes.find(d =>\n      d.id === id)\n)\n```", "```java\nantiHeroes$ = this.store.select(selectAntiHeroes());\nconstructor(\n    private router: Router,\n    private store: Store<AppState>,\n    ) { }\n  ngOnInit(): void {\n    this.assignAntiHeroes();\n  }\n  assignAntiHeroes() {\n    this.antiHeroes$.subscribe((data) => {\n      this.antiHeroes = data;\n    });\n  }\n```", "```java\n  ngOnInit(): void {\nthis. store.dispatch({type:   AntiHeroActions.GET_ANTI_HERO_LIST});\n    this.assignAntiHeroes();\n  }\n```", "```java\n@NgModule({\nimports: [\n  StoreModule.forRoot(reducers, {\n            runtimeChecks: {\n                  strictStateImmutability: true,\n                  strictActionImmutability: true,\n                  strictStateSerializability: true,\n                  strictActionSerializability: true,\n                  strictActionWithinNgZone: true,\n                  strictActionTypeUniqueness: true,\n                         },\n         }),\n       ],\n})\n```", "```java\nexport const reducer = createReducer(initialState, on(addBlog, (state, { blog }) => ({\n// Violation 1: we assign a new value to loading\nstate.loading = false,\n // Violation 2: `push` modifies the array\n // state.blogs.push(blog) })) );\n```", "```java\nexport const reducer = createReducer( initialState, on(addBlog, (state, { blog }) =>\n// Fix: We are returning the state as a whole object with\n// the new values\n  ({ ...state,\n   loading: false,\n   blogs: [...state.blogs, blog],\n})) );\n```", "```java\nexport const reducer = createReducer(initialState, on(addBlog, (state, { blog }) => ({\n// Violation: it's not allowed to modify an action\nblog.id = uniqueID();\nreturn { ...state, blogs: [...state.blogs, blog]\n} })) );\n```", "```java\n//blog.actions.ts\nexport const addBlog = createAction( '[Blog List] Add Blog',\n// Fix: we will return the object in the action with the\n// new value\n(description: string) =>\n({ id: uniqueID(), description }) );\n//blog.reducer.ts\nexport const reducer = createReducer(\ninitialState,\non(addBlog, (state, { blog }) => ({\n...state,\nblogs: [...state.blogs, blog],\n})) );\n```", "```java\nexport const reducer = createReducer(\ninitialState,\non(addBlog, (state, { blog }) => ({\n...state,\nblogs: [...state.blogs, blog],\n// Violation: a Date type is not a serializable value.\ncreatedOn: new Date()\n})) );\n```", "```java\nexport const reducer = createReducer(\ninitialState,\non(addBlog, (state, { blog }) => ({\n...state,\nblogs: [...state.blogs, blog],\n// Fix: We should convert the date into a JSON Object.\ncreatedOn: new Date().toJSON()\n})) );\n```", "```java\nconst createBlog = createAction(\n'[Blog List] Add Blog,\nblog => ({ blog,\n// Violation, a function is not serializable\nlogBlog: () => { console.log(blog); }, }));\n```", "```java\nconst createBlog = createAction(\n'[Blog List] Add Blog,\n// Fix: we should use props to receive parameters\n props<{blog: Blog}>()\n);\n```", "```java\n// Callback outside NgZone\n// Violation: the createBlog actions is invoked outside the\n// ngZone\ncallbackOutsideNgZone() {\n        this.store.dispatch(createBlog ());\n}\n```", "```java\nimport { NgZone } from '@angular/core';\nconstructor(private ngZone: NgZone){}\n // use run() function to call the dispatch inside the\n // NgZone\nfunction callbackOutsideNgZone(){\n  this.ngZone.run(\n    () => {  this.store.dispatch(createBlog());\n  }\n}\n```", "```java\n//Violation: two actions have the same type\nexport const addBlog = createAction('[Blog] Add Blog'); export const modifyBlog = createAction('[Blog] Add Blog');\n```", "```java\n//Violation: two actions have the same type\nexport const addBlog = createAction('[Blog] Add Blog'); export const modifyBlog = createAction('[Blog] Modify Blog');\n```"]