["```java\n(value1: Int, value2: Int) => Int \n```", "```java\ndef printPages(doc: Document, lastIndex: Int, print: (Int) => Unit) = if(lastIndex <= doc.numOfPages) for(i <- 1 to lastIndex) print(i) \n\nval colorPrint = (index: Int) => println(s\"Printing Color Page $index.\") \n\nval simplePrint = (index: Int) => println(s\"Printing Simple Page $index.\") \n\nprintln(\"---------Method V1-----------\") \nprintPages(Document(15, \"DOCX\"), 5, colorPrint) \n\nprintln(\"---------Method V2-----------\") \nprintPages(Document(15, \"DOCX\"), 2, simplePrint) \n```", "```java\n(index: Int) => Unit\n```", "```java\ndef printColorPages(doc: Document, lastIndex: Int, startIndex: Int) = if(lastIndex <= doc.numOfPages) for(i <- startIndex to lastIndex) colorPrint(i) \n\ndef printSimplePages(doc: Document, lastIndex: Int, startIndex: Int) = if(lastIndex <= doc.numOfPages) for(i <- startIndex to lastIndex) simplePrint(i) \n```", "```java\n(index: Int) => Unit \n```", "```java\ndef printPages(doc: Document, lastIndex: Int, print: (Int) => Unit) = if(lastIndex <= doc.numOfPages) for(i <- 1 to lastIndex) print(i) \n```", "```java\ntrait Function1[-T1, +R] extends AnyRef \n```", "```java\npublic static scala.Function1<java.lang.Object, scala.runtime.BoxedUnit> colorPrint() \n\npublic static void printPages(chapter4.Document, int, scala.Function1<java.lang.Object, scala.runtime.BoxedUnit>, scala.Function0<java.lang.Object>) \n```", "```java\ndef andThen[A](g: (R) ⇒ A): (T1) ⇒ A \n\ndef compose[A](g: (A) ⇒ T1): (A) ⇒ R \nincrementByOne and isEven*,* and we want to form another method that performs these two operations in sequence. We can use andThen for this. Check out our implementation of incrementAndCheckForEven. It looks like plain English, telling the Scala compiler, \"I'll provide you with an integer, please first execute the incrementByOne function and then check for even numbers.\":\n```", "```java\nval incrementByOne = (num: Int) => num + 1 \n\nval isEven = (num: Int) => num % 2 == 0 \n\nval incrementAndCheckForEven = incrementByOne andThen isEven \n\nprintln(s\"Representing andThen function ${incrementAndCheckForEven(1)}\") \n```", "```java\ndef andThen[A](g: (R) ⇒ A): (T1) ⇒ A \n```", "```java\nobject Methods { \n\n  def filePrinter() = { \n    println(\"Version 0\") \n    val filesHere = (new File(\".\")).listFiles() \n    for(file <- filesHere) \n      println(file) \n  } \n\n  def main(args: Array[String]): Unit = { \n    filePrinter() \n  } \n\n} \n```", "```java\nVersion 0 \n./.idea \n./FirstProject.iml \n./out \n./src \n```", "```java\ndef filePrinterV2() { \n  println(\"Version 2\") \n  val filesHere = (new File(\".\")).listFiles() \n  for(file <- filesHere) \n    println(file) \n} \n```", "```java\nimport java.io.File \n\nobject Methods { \n\n  def filePrinter() = { \n    println(\"Version 0\") \n    val filesHere = (new File(\".\")).listFiles() \n    for(file <- filesHere) \n      println(file) \n  } \n\n  def filePrinterV1() \n  { \n    println(\"Version 1\") \n    val filesHere = (new File(\".\")).listFiles() \n    for(file <- filesHere) \n      println(file) \n  } \n\n  def filePrinterV2() { \n    println(\"Version 2\") \n    val filesHere = (new File(\".\")).listFiles() \n    for(file <- filesHere) \n      println(file) \n  } \n\n  def filePrinterV3() = println(\"Version 3\") \n    val filesHere = (new File(\".\")).listFiles() \n    for(file <- filesHere) \n      println(file) \n\n  def main(args: Array[String]): Unit = { \n    filePrinter() \n    filePrinterV1() \n    filePrinterV2() \n    filePrinterV3() \n  } \n\n} \n```", "```java\n./.idea \n./FirstProject.iml \n./out \n./src \nVersion 0 \n./.idea \n./FirstProject.iml \n./out \n./src \nVersion 1 \n./.idea \n./FirstProject.iml \n./out \n./src \nVersion 2 \n./.idea \n./FirstProject.iml \n./out \n./src \nVersion 3 \n```", "```java\nval colorPrint = (index: Int) => println(s\"Printing Color Page $index.\") \n\nval colorPrintV2 = new Function1[Int, Unit]{ \n  override def apply(index: Int): Unit = \n    println(s\"Printing Color Page $index.\") \n} \n\ndef colorPrintV3(index: Int) = println(s\"Printing Color Page $index.\") \n```", "```java\nprintln(\"---------Function V1-----------\") \nprintPages(Document(15, \"DOCX\"), 2, colorPrint) \n\nprintln(\"---------Function V2-----------\") \nprintPages(Document(15, \"DOCX\"), 2, colorPrintV2) \n\nprintln(\"---------Method V3-----------\") \nprintPages(Document(15, \"DOCX\"), 2, colorPrintV3) \n```", "```java\n---------Function V1----------- \nPrinting Color Page 1\\. \nPrinting Color Page 2\\. \n---------Function V2----------- \nPrinting Color Page 1\\. \nPrinting Color Page 2\\. \n---------Method V3----------- \nPrinting Color Page 1\\. \nPrinting Color Page 2\\.  \n```", "```java\n:> javap ColorPrinter.class \nCompiled from \"FuncLiterals.scala\"\npublic final class chapter4.ColorPrinter { \n  public static void main(java.lang.String[]); \n  public static void delayedInit(scala.Function0<scala.runtime.BoxedUnit>); \n  public static void delayedEndpoint$chapter4$ColorPrinter$1(); \n  public static long executionStart(); \n\n  public static void colorPrintV3(int); \n\n  public static scala.Function1<java.lang.Object, scala.runtime.BoxedUnit> colorPrintV2(); \n\n  public static scala.Function1<java.lang.Object, scala.runtime.BoxedUnit> colorPrint(); \n\n  public static void printPages(chapter4.Document, int, scala.Function1<java.lang.Object, scala.runtime.BoxedUnit>, scala.Function0<java.lang.Object>); \n\n  public static boolean printerSwitch(); \n} \n```", "```java\ncolorPrintV2(3) \n```", "```java\nnew Function1[Int, Unit]().apply(3) \n```", "```java\ncolorPrint == colorPrintV2 //false \n```", "```java\ncolorPrint == colorPrintV3 //Compile Time Error \n```", "```java\nval colorPrintV4 = colorPrintV3 _ \n```", "```java\nobject ColorPrinter extends App { \n\n  val printerSwitch = false \n\n def printPages(doc: Document, lastIndex: Int, print: (Int) => Unit, isPrinterOn: => Boolean) = { \n\n    if(lastIndex <= doc.numOfPages && isPrinterOn) for(i <- 1 to lastIndex) print(i) \n\n  } \n\n  val colorPrint = (index: Int) => println(s\"Printing Color Page $index.\") \n\n  val colorPrintV2 = new Function1[Int, Unit]{ \n    override def apply(index: Int): Unit = \n      println(s\"Printing Color Page $index.\") \n  } \n\n  println(\"---------Function V1-----------\") \n  printPages(Document(15, \"DOCX\"), 2, colorPrint, !printerSwitch) \n\n  println(\"---------Function V2-----------\") \n  printPages(Document(15, \"DOCX\"), 2, colorPrintV2, !printerSwitch) \n\n} \n\ncase class Document(numOfPages: Int, typeOfDoc: String) \n```", "```java\nobject AClosure extends App { \n\n  var advertisement = \"Buy an IPhone7\" \n\n  val playingShow = (showName: String) => println(s\"Playing $showName. Here's the advertisement: $advertisement\") \n\n  playingShow(\"GOT\") \n  advertisement = \"Buy an IPhone8\" \n\n  playingShow(\"GOF\") \n\n} \n```", "```java\nPlaying GOT. Here's the advertisement: Buy an IPhone7\nPlaying GOF. Here's the advertisement: Buy an IPhone8\n```", "```java\n(showName: String) => println(s\"Playing $showName. No Advertisement\") \n```", "```java\n(showName: String) => println(s\"Playing $showName. Here's the advertisement: $advertisement\") \n```", "```java\nval printerSwitch = false \n\ndef printPages(doc: Document, lastIndex: Int, print: (Int) => Unit) = { \n\n  if(lastIndex <= doc.numOfPages) for(i <- 1 to lastIndex) print(i) \n\n} \n\nval colorPrint = (index: Int) => if(!printerSwitch) println(s\"Printing Color Page $index.\") \n\nval colorPrintV2 = new Function1[Int, Unit]{ \n  override def apply(index: Int): Unit = \n    if(!printerSwitch) println(s\"Printing Color Page $index.\") \n} \nisPrinterOn function literal and added the explicit printerSwitch check in two functions, colorPrint and colorPrintV2. This is possible because we were sure about the printer functionality driven by the switch. Also, we removed the extra burden of passing this function literal each time we call for a print. This is a fine and acceptable solution to our problem and the reason we're trying out this example is that it's using a closure in the solution. When we include printerSwitch, which is not in the local scope of our colorPrint function literal*,* we make it a closure. Then, as with our last example, the runtime representation of our colorPrint is going to keep the reference of our printerSwitch forming a closure*.* The refactor seems fine, but it can be enhanced, let's check out the second solution:\n```", "```java\nval printerSwitch = false \n\ndef printPages(doc: Document, lastIndex: Int, print: (Int) => Unit) = { \n\n  if(lastIndex <= doc.numOfPages && !printerSwitch) for(i <- 1 to lastIndex) print(i) \n\n} \n\nval colorPrint = (index: Int) => println(s\"Printing Color Page $index.\") \n\nval colorPrintV2 = new Function1[Int, Unit]{ \n  override def apply(index: Int): Unit = \n    println(s\"Printing Color Page $index.\") \n} \n```", "```java\ndef sum(a: Int, b: Int) = a + b \n```", "```java\nobject HOFs extends App { \n\n  def multiplier10(x : Int): Int => Int = x => x * 10   //functionAsOutput \n\n  def intOpPerformer(g: Int => Int) : Int = g(5)        //functionAsInput \n\n  def multiplicator(x: Int)(g: Int => Int): Int = g(x)  //functionAsParameter \n\n  println(s\"functionAsInput Result: ${intOpPerformer(multiplier10(5))}\") \n\n  println(s\"functionAsParameter Result: ${multiplicator(5)(multiplier10(5))}\") \n\n} \n```", "```java\nfunctionAsInput Result: 50 \nfunctionAsParameter Result: 50 \n```", "```java\nintOpPerformer(multiplier10(5)) \n```", "```java\nmultiplicator(5)(multiplier10(5)) \n```", "```java\ndef printPages(doc: Document, lastIndex: Int, print: (Int) => Unit, isPrinterOn: => Boolean) = { \n\n    if(lastIndex <= doc.numOfPages && isPrinterOn) for(i <- 1 to lastIndex) print(i) \n\n  }  \n```", "```java\nprintPages(Document(15, \"DOCX\"), 2, colorPrint, !printerSwitch) \n\nval colorPrint = (index: Int) => println(s\"Printing Color Page $index.\") \n```", "```java\ndef add(a: Int, b: Int) = a + b \n\ndef multiply(a: Int, b: Int) = a * b \n\ndef subtract(a: Int, b: Int) = a - b \n\ndef modulus(a: Int, b: Int) = a % b \n```", "```java\nadd(10, 5) \nsubtract(10, 5) \nmultiply(10, 5) \nmodulus(10, 5) \n```", "```java\nval add = (a: Int, b: Int) => a + b \nval multiply = (a: Int, b: Int) => a * b \nval subtract = (a: Int, b: Int) => a - b \nval modulus = (a: Int, b: Int) => a % b \n```", "```java\ndef operation(op: (Int, Int) => Int, a: Int, b: Int) : Int = op(a, b) \n```", "```java\noperation(add, 10, 5) \noperation(subtract, 10, 5) \noperation(multiply, 10, 5) \noperation(modulus, 10, 5) \n```", "```java\nobject HOFs extends App { \n\n  def operation(op: (Int, Int) => Int, a: Int, b: Int) : Int = op(a,b) \n\n  println(operation((a, b) => a + b, 10, 5)) \n  println(operation((a, b) => a * b, 10, 5)) \n  println(operation((a, b) => a - b, 10, 5)) \n  println(operation((a, b) => a % b, 10, 5)) \n\n} \n```", "```java\n15 \n50 \n5 \n0 \n```", "```java\nWebsitePlatform => DomainName => Host \n```", "```java\ndef makeWebsite(platform: WebsitePlatform, domainName: DomainName, host: Host) = println(s\"Making $domainName using $platform with hosting from $host \") \n```", "```java\ndef makeWebsite(platform: WebsitePlatform)(domainName: DomainName)(host: Host): Unit \n```", "```java\nWebsitePlatform => DomainName => Host => Unit \n```", "```java\nDomainName => Host => Unit \n```", "```java\nHost => Unit \n```", "```java\nobject Curried extends App { \n\n  type WebsitePlatform = String \n  type DomainName = String \n  type Host = String \n\n  def makeWebsite(platform: WebsitePlatform)(domainName: DomainName)(host: Host) = \n    println(s\"Making $domainName using $platform with hosting from $host \") \n\n  val wordPress: DomainName => Host => Unit = makeWebsite(\"WordPress\") \n\n  val wordPressDummyDotCom : Host => Unit = wordPress(\"dummy123.com\") \n\n  val blueHostedWordPressDummyDotCom : Unit = wordPressDummyDotCom(\"Bluehost.com\") \n\n  blueHostedWordPressDummyDotCom\n\n }\n```", "```java\nMaking dummy123.com using WordPress with hosting from Bluehost.com \n```", "```java\ndef add = (x: Int, y: Int) => x + y \n\nval addCurried = add.curried \n\nprintln(add(5,6)) \nprintln(addCurried(5)(6)) \n```", "```java\n11 \n11 \n```", "```java\nval addCurriedUncurried = Function.uncurried(addCurried) \n\nprintln(addCurriedUncurried(5,6)) \n```", "```java\n11 \n```", "```java\ndef makeWebsite(platform: WebsitePlatform, domainName: DomainName, host: Host) = \n  println(s\"Making $domainName using $platform with hosting from $host \") \n```", "```java\nobject PaF extends App { \n\n  type WebsitePlatform = String \n  type DomainName = String \n  type Host = String \n  type Protocol = String \n\n  def makeWebsite(platform: WebsitePlatform, domainName: DomainName, host: Host) = \n    println(s\"Making $domainName using $platform with hosting from $host \") \n\n  val wordPressSite: (DomainName, Host) => Unit = makeWebsite(\"WordPress\", _: DomainName, _: Host) \n\n  val makeExampleDotCom: (WebsitePlatform, Host) => Unit = makeWebsite(_: WebsitePlatform, \n      \"example.com\", \n      _: Host \n    ) \n\n  val makeBlueHostingExampleDotCom: (WebsitePlatform) => Unit = makeWebsite(_: WebsitePlatform, \n    \"example.com\", \n    \"bluehost.com\" \n    ) \n\n  makeWebsite(\"Wordpress\", \"anyDomain.com\", \"Godaddy.com\") \n  wordPressSite(\"example.com\", \"Godaddy.com\") \n  makeExampleDotCom(\"Wordpress\", \"bluehost.com\") \n  makeBlueHostingExampleDotCom(\"Blogger\") \n\n} \n```", "```java\nMaking anyDomain.com using Wordpress with hosting from Godaddy.com  \nMaking example.com using WordPress with hosting from Godaddy.com  \nMaking example.com using Wordpress with hosting from bluehost.com  \nMaking example.com using Blogger with hosting from bluehost.com \n```", "```java\nval wordPressSite: (DomainName, Host) => Unit = makeWebsite(\"WordPress\", _: DomainName, _: Host) \n```", "```java\n(DomainName, Host) => Unit \n```", "```java\n  wordPressSite(\"example.com\", \"Godaddy.com\") \n```", "```java\nval makeExampleDotCom: (WebsitePlatform, Host) => Unit = makeWebsite(_: WebsitePlatform, \n      \"example.com\", \n      _: Host \n    ) \n```", "```java\n(WebsitePlatform, Host) => Unit \n```"]