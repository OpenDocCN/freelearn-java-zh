- en: Chapter 4. Configuring Cucumber
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Cucumber with JUnit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overriding the Cucumber Options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running Strict and Running Dry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the Cucumber Console output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directing the Cucumber output to a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the naming conventions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we talk about using Cucumber for behavior-driven development, we often
    talk about Feature files, Scenarios, Background, and Glue Code (Step Definitions).
    There isn't an iota of doubt that you won't be able to implement Cucumber until
    you understand the concepts mentioned earlier, but an area that is really important
    and is very useful in day-to-day Cucumber life is configuring Cucumber.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will start with integrating Cucumber with JUnit and then
    start understanding the different configurations that we can do with `@CucumberOptions`
    annotation.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Cucumber with JUnit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, we have run Cucumber tests either from Eclipse or from a Terminal,
    but how can we use automation frameworks to work with Cucumber?
  prefs: []
  type: TYPE_NORMAL
- en: How do we integrate Cucumber with JUnit Framework? Let's take a look at this
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a Java class in the `CucumberOptions` package with an empty
    body and the `@RunWith` annotation. This is how the class should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cucumber ships with a JUnit runner, `Cucumber.api.junit.Cucumber`. This class
    tells JUnit to invoke `Cucumber JUnit runner`. It will search for Feature files
    and run them, providing the output back to JUnit in a format that it understands.
    Executing this class as any JUnit test class will run all the Features found on
    the classpath in the same package as this class.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The name of the `JUnit` class is irrelevant and the class should be empty.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the Cucumber Options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, depending on the requirements, we would like to override default
    Cucumber behavior, such as reporting or the project structure, and so on. We can
    configure Cucumber via the Terminal, but mostly we run Cucumber with JUnit. So
    how do we configure Cucumber with JUnit Runners, let's see this in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add `@CucumberOptions` to the `RunCuckeTest.java` class and import `Cucumber.api.CucumberOptions`.
    This is how the updated code for `RunCukeTest.java` should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s specify configurations where our Feature files and Step Definitions
    are located and which Tags are used. This is how the code for `RunCukeTest.java`
    should look like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Refer to the screenshot for more clarity:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/image00146.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `@CucumberOptions` annotation provides the same options as the Cucumber
    Terminal line. For example, we can specify the path to Feature files and to Step
    Definitions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The different options that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Element | Purpose | Default |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `dryRun` | true (skips the execution of Glue Code) | FALSE |'
  prefs: []
  type: TYPE_TB
- en: '| `strict` | true (will fail execution if there are undefined or pending steps)
    | FALSE |'
  prefs: []
  type: TYPE_TB
- en: '| `Features` | These are the paths to the Feature(s) | {} |'
  prefs: []
  type: TYPE_TB
- en: '| `glue` | This declares where to look for Glue Code (Stepdefs and hooks) |
    {} |'
  prefs: []
  type: TYPE_TB
- en: '| `Tags` | This is which Tags in the Features should be executed | {} |'
  prefs: []
  type: TYPE_TB
- en: '| `monochrome` | This is whether or not to use monochrome output | FALSE |'
  prefs: []
  type: TYPE_TB
- en: '| `plugin` | This declares what formatter(s) to use and also miscellaneous
    options | {} |'
  prefs: []
  type: TYPE_TB
- en: 'Let''s understand the options we have used in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Features**: This option is used to specify the path to the Feature files.
    When Cucumber starts execution, it looks for the `.Feature` files at the path/folder
    mentioned in the **FEATURE** option. Whichever files are with the `.Feature` extension
    at the path mentioned in the **FEATURE** option, are executed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Glue**: The **GLUE** option is to specify where the Step Definitions and
    Glue Code are present. Whenever Cucumber encounters a Step, the Cucumber looks
    for a Step Definition inside all the files present in the folder mentioned in
    the **GLUE** option. This also holds true for Hooks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tags**: This option helps you decide which Tags in the Features should be
    executed or, for that matter, which Tags should not be executed. For example,
    in our code, whichever Scenario will be Tagged with `@sanity` will be executed
    and whichever is Tagged with `@wip` will not be executed because of `~` mentioned
    before the `@wip` Tag. `~` in front of any Tag tells Cucumber to skip the Scenarios/Features
    tagged with that Tag.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Options that accept multiple values do so in the form of a list. In the preceding
    table, those Options have been `{}` marked in the Default column.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Running Strict and Running Dry
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a Cucumber project becomes big, it becomes very important that we keep
    the integrity of the system intact. It should not happen that the addition/modification
    of Scenarios is breaking the system. So, how to quickly check whether all the
    Steps have an associated Step Definition defined (without executing the code in
    those Step Definitions)? Let's understand that in our upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add the `dryRun` option to `@CucumberOptions` and set its value to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `strict` option to `@CucumberOptions` and set its value to `false`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `monochrome` option to `@CucumberOptions` and set its value to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is how our `RunCukeTest.Java` class should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s understand `dryRun`, and `chrome`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**dryRun**: If the `dryRun` option is set to `true`, Cucumber only checks if
    all the Steps have their corresponding Step Definitions defined and the code mentioned
    in the Step Definitions is not executed and vice versa.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is used to validate whether we have defined a Step Definition for each
    Step or not. Consider if someone has added new Scenarios to the project and wants
    to check whether he has missed any Step Definitions. He assigns `true` to the
    `dryRun` option and runs all Scenarios. Cucumber checks for matching Step Definitions
    for all Scenarios, without executing the code between Step Definitions, and returns
    the result. This technique saves a lot of time as compared to Cucumber executing
    the code in Step Definitions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**strict**: If the `strict` option is set to `false`, and at execution time
    if Cucumber encounters any undefined/pending Steps, then Cucumber does not fail
    the execution and undefined Steps are skipped, and the build is successful. This
    is what the Console output looks like:![How it works…](img/image00147.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If Option is set to `true`, and at execution time, if Cucumber encounters any
    Undefined/Pending Steps, then Cucumber fails the execution and undefined Steps
    are marked as failure. This is what the Console output looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works…](img/image00148.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Monochrome**: If the `monochrome` option is set to `false`, then the console
    output is not as readable as it should be. The output when the `monochrome` option
    is set to `false` is shown in the following screenshot:![How it works…](img/image00149.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The output when the `monochrome` option is set to `true` is shown in the following
    screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How it works…](img/image00150.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Configuring the Cucumber Console output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we execute Cucumber Scenarios, it generates an output to the terminal or
    the eclipse console. There is a default behavior associated with that output and
    we can also configure that output as per our needs also. So how do we modify the
    default behavior, let's see this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the `plugin` option to `@CucumberOptions` and set its value to `{"progress"}`.
    This is how the `@CucumberOptions` code looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If we run the Scenarios now via the Terminal, this is what our output looks
    like:![How to do it…](img/image00151.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instead of the `progress` plugin, we can also use the `pretty` plugin, which
    is more verbose as compared to the `progress` plugin. This is what the code looks
    like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is what the output looks like:![How to do it…](img/image00152.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we are more concerned about the time taken by each Step Definition, then
    we should use the `usage` plugin. This is what the `@CucumberOptions` code looks
    like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is what the output looks like:![How to do it…](img/image00153.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are expecting some Scenarios to fail, and want to re-run the failed
    Scenarios, only then use the `Rerun` plugin. This is what the code for `@CucumberOptions`
    looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is what the output looks like:![How to do it…](img/image00154.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s understand the different plugins used in the preceding Steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**progress**: This is Cucumber''s default plugin and produces one character
    per Step. Each character represents the status of each Step:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.` means passing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`U` means undefined'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-` means skipped (or a Scenario Outline Step)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`F` means failing'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**pretty**: This is a more verbose plugin with information such as which Step
    matched which Step Definition, arguments and the location of Steps, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**usage**: This sorts the Step Definitions by their average execution time.
    The output from the `usage` plugin is useful for quickly finding slow parts in
    your code but it is also a great way to get an overview of your Step Definitions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**rerun**: This plugin outputs the location of failing Scenarios so that these
    can be directly used in the next execution. If all the Scenarios are passing,
    then the `rerun` plugin does not produce anything.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Directing the Cucumber output to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cucumber integrates business logic with code, so our focus is on business rather
    than code. The same philosophy is also followed in the Cucumber reports. Cucumber
    reports are more about business utility rather than to do with more charts.
  prefs: []
  type: TYPE_NORMAL
- en: Robust automation frameworks generate very good and detailed reports, which
    can be shared with all stake holders. There are multiple options available for
    reports which can be used depending on the requirement. Let's check out how to
    use reports extensively in our next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For HTML reports, add `html:target/Cucumber` to the `@CucumberOptions` plugin
    option. This is what the code for `@CucumberOptions` looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For JSON reports, add `json:target_json/Cucumber.json` to the `@CucumberOptions`
    plugin option. This is what the code for `@CucumberOptions` looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For JUnit reports, add `junit:target_json/Cucumber_junit.xml` to the `@CucumberOptions`
    plugin option. This is what the code for `@CucumberOptions` looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the plugin''s output is redirected to `STDOUT` and if we want to
    store that output to a file format, we need to redirect the output to that file.
    The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand each output in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML**: This will generate an HTML report at the location mentioned in the
    formatter itself. This is what the HTML file looks like:![How it works…](img/image00155.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JSON**: This report contains all the information from the gherkin source
    in the JSON format. This report is meant to be postprocessed into another visual
    format by third-party tools, such as Cucumber Jenkins. This is what JSON reports
    look like:![How it works…](img/image00156.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JUnit**: This report generates XML files just like Apache Ant''s `junitreport`
    task. This XML format is understood by most continuous integration servers, who
    will use it to generate visual reports. This is what JUnit reports look like:![How
    it works…](img/image00157.jpeg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the naming conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Cucumber can be implemented in multiple languages, developers with multiple
    language knowledge and background can work on the same project. So, sometimes
    it might be difficult for teams to manage the naming conventions, such as underscore
    or camel case.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber lets the team choose the naming convention. Depending on the naming
    convention, Cucumber generates the method names for Step Definitions. Let's see
    how it can be done in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to use camel case, then add the following code to `@CucumberOptions`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you want to use underscore, then add the following code to `@CucumberOptions`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This is what the code for `RunCukeTest.Java` looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s understand the `Snippets` option in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Snippets**: This option is typed, so you''ll need to use one of the constants
    provided, that is, `SnippetType.CAMELCASE` or `SnippetType.UNDERSCORE`. Remember
    to import `Cucumber.api.SnippetType`. The default option is underscore. The Step
    Definition suggestion if we chose camel case is shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/image00158.jpeg)'
  prefs: []
  type: TYPE_IMG
