- en: 9\. Working with HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will examine the fundamentals of HTTP and create a program
    that connects to a specific web server and downloads data. We will begin with
    a study of HTTP request methods so that you can begin to practice making requests
    using Java's `HttpUrlConnection` class on your own. You will then learn to retrieve
    data using the GET and HEAD requests, and to send JSON-formatted data using the
    POST request. Towards the end of this chapter, you will learn to extract and parse
    HTML content using the open-source jsoup library, and explore the `java.net.http`
    module—a new HTTP class provided by Java 11—which supports both synchronous and
    asynchronous HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Hypertext Transfer Protocol** (**HTTP**) forms the base for the **World
    Wide Web** (**WWW**). Using HTTP's **request-response protocol**, a client, such
    as a web browser, can request data from a server. In the World Wide Web, a web
    browser requests content (HTML, JavaScript, images, and so on.), and then displays
    the results. In many cases, the content that is returned is fairly static.
  prefs: []
  type: TYPE_NORMAL
- en: Java applications typically differ. In most cases with Java, you will send requests
    to specialized backend web services for gathering data or updating systems. In
    both cases, though, the Java coding remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covers how to make HTTP requests from Java applications and parse
    the response data.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With HTTP, a client application sends a specially formatted request to a server
    and then awaits a response. Technically, HTTP is a stateless protocol. This means
    that the server is not required to maintain any state information related to the
    client. Each client request can be treated individually as a new operation. The
    server does not need to store client-specific information.
  prefs: []
  type: TYPE_NORMAL
- en: Many servers do maintain some sort of state across multiple requests, though,
    such as when you make a purchase online, and the server needs to store the products
    you have selected; however, the basic protocol does not require this.
  prefs: []
  type: TYPE_NORMAL
- en: 'HTTP is a textual protocol (with allowances for compression). An HTTP request
    includes the following parts:'
  prefs: []
  type: TYPE_NORMAL
- en: An operation (called a **request method**), a resource identifier for the operation,
    and optional parameters on a line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request headers; one per line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An empty line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message body, which is optional.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Each line ends with two characters: a carriage return and a line feed character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP uses the following two main concepts for identifying the resources that
    you are interested in:'
  prefs: []
  type: TYPE_NORMAL
- en: A resource identifier in the **Universal Resource Identifier** (**URI**) format
    identifies a resource on a server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A **Universal Resource Locator** (**URL**) includes a URI, along with the network
    protocol information, the server, and port number. URLs are what you type into
    the address bar of web browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Java includes classes for both concepts: `java.net.URI` and `java.net.URL`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following URL: `http://example.com:80/`.'
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the `http` identifies the protocol. The server is `example.com`,
    and the port number is `80` (the default HTTP port number). The trailing/character
    identifies the resource on the server, in this case, the top-level or root resource.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern websites use the HTTPS protocol. This is a more secure version of
    HTTP because the data that is sent to and from the server is encrypted.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following URL: [https://www.packtpub.com/](https://www.packtpub.com/).'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the protocol is `https` and the server is `www.packtpub.com`.
    The port defaults to `443` (the default port for HTTPS). As before, the trailing/character
    identifies the resource on the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'A URI can either have the full networking location or be relative to a server.
    The following are all valid URIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://www.packtpub.com/tech/java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://www.example.com/docs/java.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tech/java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/docs/java.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`file:///java.html`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: URL is an older term, and generally represents the full specification of a resource
    on the internet. That said, like URIs, you can have relative URLs as well, such
    as `java.html`. In most cases, people talk about URIs.
  prefs: []
  type: TYPE_NORMAL
- en: In general, though, your Java applications will use the `URL` class to establish
    HTTP connections.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about URIs at [https://packt.live/32ATULO](https://packt.live/32ATULO)
    and URLs at [https://packt.live/2JjIgNN](https://packt.live/2JjIgNN).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP Request Methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Each HTTP request starts with a request method, such as GET. The method names
    come from the early days of the World Wide Web. These methods include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`GET`: This retrieves data from the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HEAD`: This is like a GET request but just retrieves the header information
    and does not include the response body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`POST`: This sends data to the server. Most HTML forms on web pages send the
    form data you fill in as a POST request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT`: This also sends data to the server. A PUT request is often used to modify
    a resource, replacing the contents of the existing resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DELETE`: This requests the server to delete the given resource.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TRACE`: This echoes back the request data that is received by the server.
    This can be useful for debugging.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OPTIONS`: This lists the HTTP methods that the server supports for a given
    URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: There are other HTTP methods as well, notably `CONNECT` and `PATCH`. The `HttpUrlConnection`
    class, described in this chapter, only supports the ones listed here.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Representational State Transfer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Representational State Transfer** (**REST**) is a term that is used to describe
    web services that use HTTP as a transport protocol. You can think of this as HTTP
    with objects. With a RESTful web service, for example, a GET request normally
    returns an object, formatted in the **JavaScript Object Notation** (**JSON**).
    JSON provides a way to encode an object as text in a manner that is independent
    of the programming language used. JSON formats data as name-value pairs or arrays
    using JavaScript syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, the object has two properties: `animal` and `name`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Many RESTful web services send and receive data in JSON format. You can refer
    to *Chapter 19*, *Reflection*, for more information on JSON.
  prefs: []
  type: TYPE_NORMAL
- en: With web services, a `POST` request is typically used to create a new object,
    a `PUT` request is used to modify an existing object (by replacing it with the
    new data), and a `DELETE` request is used to delete an object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some frameworks use different meanings for `POST` and `PUT` operations. The
    approach here is the approach that is used by the Spring Boot framework.
  prefs: []
  type: TYPE_NORMAL
- en: You'll find that Java is used a lot to create RESTful web services as well as
    web service clients.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can read the HTTP specification at [https://packt.live/2MxDcHz](https://packt.live/2MxDcHz)
    or read an overview of HTTP at [https://packt.live/35MM1od](https://packt.live/35MM1od).
    You can refer to [https://packt.live/2MYvHbq](https://packt.live/2MYvHbq) for
    more information on REST web services. Additionally, you can refer to [https://packt.live/2P2Qz3W](https://packt.live/2P2Qz3W)
    for more information on JSON.
  prefs: []
  type: TYPE_NORMAL
- en: Request Headers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A request header is a name-value pair that provides some information to the
    server. For example, the `User-Agent` request header identifies the application
    running on behalf of the user, typically the web browser. Almost all `User-Agent`
    strings start with `Mozilla/5.0` for historical reasons and because some sites
    will not render properly without mentioning the now-ancient Mozilla web browser.
    Servers do use the `User-Agent` header to guide browser-specific rendering. For
    example, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This `User-Agent` setting identifies an iPhone browser. The `Referer` header
    (spelled incorrectly for historical reasons) identifies the web page you are coming
    from. The `Accept` header lists the format for the data you'd like, such as `text/html`.
    The `Accept-Language` header lists a language code, such as `de` for German (Deutsch)
    if you'd like the response to be in German.
  prefs: []
  type: TYPE_NORMAL
- en: One important point about request headers is that each header can contain multiple
    values (which are comma separated), even if in most cases you will provide a single
    value.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can see a list of commonly used request headers at [https://packt.live/2pFjIaH](https://packt.live/2pFjIaH).
  prefs: []
  type: TYPE_NORMAL
- en: HTTP response messages also contain headers. These response headers can tell
    your application information about the remote resources.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've mentioned the highlights of HTTP, the next step is to start making
    network requests.
  prefs: []
  type: TYPE_NORMAL
- en: Using HttpUrlConnection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `java.net.HttpUrlConnection` class provides the main way to access HTTP
    resources from Java. To establish an HTTP connection, you can use code like the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code sets up a URL initialized with a link to example.com. The `openConnection()`
    method on the URL then returns `HttpUrlConnection`. Once you have `HttpUrlConnection`,
    you can set the HTTP method (`HEAD`, in this case). You can get data from the
    server, upload data to the server, and specify request headers.
  prefs: []
  type: TYPE_NORMAL
- en: 'With `HttpUrlConnection`, you can call `setRequestProperty()` to specify a
    request header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Each request generates a response, which may be successful or not. To check
    the response, get the response code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: A code of 200 is a success. There are other codes in the 200 range that also
    indicate a success, but with conditions, such as 204, which indicates success
    but with no content. Codes in the 300s indicate redirects. Codes in the 400s point
    to client errors, such as the dreaded 404 Not Found error, and codes in the 500s
    point to server errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can see a list of HTTP response codes at [https://packt.live/2OP9Rtr](https://packt.live/2OP9Rtr).
    These are also defined as constants in the `HttpUrlConnection` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each response typically comes with a message, such as `OK`. You can retrieve
    this message by calling `getResponseMessage()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To see the headers in the response, call `getHeaderFields()`. This method returns
    a map of headers, where the value is a list of strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: With HTTP, each header can have multiple values, which is why the value in the
    map is a list.
  prefs: []
  type: TYPE_NORMAL
- en: You can also retrieve headers one at a time. The next exercise puts all this
    together to show you how to write a short Java program that creates an `HTTP`
    `HEAD` request.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 1: Creating a HEAD Request'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise will send a HEAD request to `example.com`, which is an official
    practice domain you can use for testing:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `New` and then `Project` from the `File` menu in IntelliJ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `Gradle` for the type of project. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Group Id, enter `com.packtpub.net`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Artifact Id, enter `chapter09`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the Version, enter `1.0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accept the default setting on the next pane. Click `Next`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the project name as `chapter09`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click `Finish`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call up `build.gradle` in the IntelliJ text editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change `sourceCompatibility` so that it is 12:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `src/main/java` folder, create a new Java package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `com.packtpub.http` as the package name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click this package in the `Project` pane and create a new Java class named
    `HeadRequest`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you run this program, you will see an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The code of `200` indicates our request was successful. You can then see the
    response headers. The square brackets in the output come from the default way
    that Java prints out lists.
  prefs: []
  type: TYPE_NORMAL
- en: You should feel free to change the initial URL to a site other than `example.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Reading the Response Data with a GET Request
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With a GET request, you will get `InputStream` from the connection to see the
    response. Call `getInputStream()` to get the data sent back by the server for
    the resource (URL) you requested. If the response code indicates an error, use
    `getErrorStream()` to retrieve information about the error, such as a Not Found
    page. If you expect textual data in the response, such as HTML, text, XML, etc.,
    you can wrap `InputStream` in `BufferedReader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Exercise 2: Creating a GET Request'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This exercise prints out the HTML content from example.com. You can change
    the URL if you wish to and experiment with other web sites:'
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java``Class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `GetRequest` as the name of the Java class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code for `GetRequest.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Run this program, and you will see the brief HTML content of `example.com`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using this technique, we can write a program to print out the content of a web
    page using a GET request.
  prefs: []
  type: TYPE_NORMAL
- en: Dealing with Slow Connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`HttpUrlConnection` offers two methods to help with slow connections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Call `setConnectTimeout()` to adjust the timeout when establishing the network
    connection to the remote site. The value you give as input should be in milliseconds.
    Call `setReadTimeout()` to adjust the timeout when reading data on the input stream.
    Again, provide the new timeout input in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting Parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With many web services, you''ll have to input parameters when making a request.
    HTTP parameters are encoded as name-value pairs. For example, consider the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this case, `name1` is the name of a parameter, and so is `name2`. The value
    of the `name1` parameter is `value1`, and the value of `name2` is `value2`. Parameters
    are separated by an ampersand character, `&`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If the parameter values are simple alphanumeric values, you can enter them as
    shown in the example. If not, you need to encode the parameter data using URL
    encoding. You can refer to the `java.net.URLEncoder` class for more details on
    this.
  prefs: []
  type: TYPE_NORMAL
- en: Handling Redirects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In many cases, when you make an HTTP request to a server, the server will respond
    with a status indicating a redirect. This tells your application that the resource
    has moved to a new location, in other words; you should use a new URL.
  prefs: []
  type: TYPE_NORMAL
- en: '`HttpUrlConnection` will automatically follow HTTP redirects. You can turn
    this off using the `setInstanceFollowRedirects()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Creating HTTP POST Requests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'POST (and PUT) requests send data to the server. For a POST request, you need
    to turn on the output mode of `HttpUrlConnection` and set the content type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, to upload the data, here assumed to be a String, use code like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: With web browsing, most POST requests send form data. From Java programs, however,
    you are more likely to upload JSON or XML data with POST and PUT requests. Once
    you upload the data, your program should read the response, especially to see
    whether the request was successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 3: Sending JSON Data with POST Requests'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll send a small JSON object to the [https://packt.live/2oyJqxB](https://packt.live/2oyJqxB)
    test site. The site won''t do anything with our data except echo it back, along
    with some **metadata** about the request:'
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java` Class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `PostJson` as the name of the Java class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code for `PostJson.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run this program, and you should see an output like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The Apache `HttpComponents` library can help simplify your work with HTTP. For
    more information, you can refer to [https://packt.live/2BqZbtq](https://packt.live/2BqZbtq).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Parsing HTML Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'An HTML document looks something like the following, but usually with a lot
    more content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: HTML structures a document into a tree-like format, as shown in this example
    by indentation. The `<head>` element appears inside the `<html>` element. The
    `<title>` element appears inside the `<head>` element. An HTML document can have
    many levels of hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Most web browsers provide an option to view a page's source. Select that and
    you'll see the HTML for the page.
  prefs: []
  type: TYPE_NORMAL
- en: When you run a GET request from a Java application, you need to parse the returned
    HTML data. Typically, you parse that data into a tree structure of objects. One
    of the handiest ways to do this is with the open-source jsoup library.
  prefs: []
  type: TYPE_NORMAL
- en: jsoup provides methods to connect using HTTP, download the data, and parse that
    data into elements that reflect the hierarchy of HTML on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using jsoup, the first step is to download a web page. To do so, you can use
    code like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This code downloads the official Java 12 documentation start page, which contains
    a lot of links to specific Java documentation. The parsed HTML data gets placed
    into the `Document` object, which contains `Element` objects for each HTML element.
    This is purposely similar to Java's XML parsing API, which similarly parses XML
    documents into a tree structure of objects. Each element in the tree may have
    child elements. jsoup provides an API to access these child elements in a similar
    way to the Java XML parsing API.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find a lot of useful documentation on the jsoup library at [https://packt.live/2nZbmua](https://packt.live/2nZbmua).
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Java 12 documentation page, you will see many links. In the underlying
    HTML, many of these links appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If we wanted to extract the URI link ([https://packt.live/2VWd1x7](https://packt.live/2VWd1x7),
    in this case) as well as the descriptive text (API Documentation), we would need
    to traverse the    to the `LI` list item tag, and then get the HTML link, which
    is held in an `A` tag, called an anchor.
  prefs: []
  type: TYPE_NORMAL
- en: One of the handy features of jsoup is that you can use select elements from
    the HTML using a selector syntax that is similar to the one that is offered by
    CSS and the jQuery JavaScript library.
  prefs: []
  type: TYPE_NORMAL
- en: 'To select all UL elements that have a CSS class of `topic`, you can use code
    like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have the selected elements, you can iterate over each one, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code starts at the `UL` level and goes down to the child elements under
    the `UL` tag, which would normally be `LI`, or list item, elements. Each `LI`
    element on the Java documentation page has one child—that is, an anchor tag with
    a link.
  prefs: []
  type: TYPE_NORMAL
- en: We can then pull out the link itself, which is held in the `href` attribute.
    We can also extract the English descriptive text used for the link.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can find a lot more information about HTML at [https://packt.live/2o54P1e](https://packt.live/2o54P1e)
    and [https://packt.live/33L4akK](https://packt.live/33L4akK).
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 4: Using jsoup to Extract Data from HTML'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This exercise demonstrates how to use the jsoup API to extract link URIs and
    descriptive text from an HTML document. Use this as an example of how to parse
    other HTML documents in your projects.
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://packt.live/2MO4UOU](https://packt.live/2MO4UOU) in a web browser.
    You can see the official Java documentation.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to extract the links in the main part of the page under section
    headings such as **Tools and Specifications**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you inspect the API Documentation link in the Specifications section, you
    will see the link to the documentation resides in a UL element with a CSS class
    name of `topics`. As shown previously, we can use the jsoup API to find all the
    UL elements with that CSS class name:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the `build.gradle` file in IntelliJ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to the dependencies block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Choose to Import Changes from the popup that appears after adding the new dependency.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java Class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `JavaDocLinks` as the name of the Java class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code for `JavaDocLinks.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this exercise, we used the `jsoup` API to download an HTML document. Once
    downloaded, we extracted the link URIs and descriptive text associated with each
    link. This provides a good overview of the `jsoup` API, so you can use it in your
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: Delving into the java.net.http Module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java 11 adds a brand new `HttpClient` class in the new `java.net.http` module.
    The `HttpClient` class uses a modern **builder pattern** (also called a fluent
    API) to set up HTTP connections. It then uses a Reactive Streams model to support
    both synchronous and asynchronous requests.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to *Chapter 16*, *Predicates and Other Functional Interfaces*,
    and *Chapter 17*, *Reactive Programming with Java Flow*, for more on Java's Stream
    API and Reactive Streams. See [https://packt.live/32sdPfO](https://packt.live/32sdPfO)
    for an overview of the `java.net.http` package in the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the builder model, you can configure things such as timeouts and then
    call the `build()` method. The `HttpClient` class you get is immutable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we specify the following:'
  prefs: []
  type: TYPE_NORMAL
- en: HTTP version 2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client should follow redirects normally, except if the redirect is from
    the more secure HTTPS to the less secure HTTP. This is the default behavior for
    `HttpClient.Redirect.NORMAL`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The connect timeout will be 30 seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `HttpClient` class can be used for multiple requests. The next step is
    to set up an HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'With this request:'
  prefs: []
  type: TYPE_NORMAL
- en: The URL is `http://example.com/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The timeout on reading is 30 seconds.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We set the `Accept` header to request the `text/html` content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once built, call `send()` on the client to send the request synchronously or
    call `sendAsync()` to send the request asynchronously. If you call `send()`, the
    call will block and your application will wait for the data to be returned. If
    you call `sendAsync()`, the call will return right away and your application can
    later check to see whether the data has arrived. Use `sendAsync()` if you want
    to process the data in a background thread. Refer to *Chapter 22*, *Concurrent
    Tasks* for more details on background threads and how to perform tasks concurrently:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the request body handler specifies that we want the contents
    back as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 5: Getting HTML Contents Using the java.net.http Module'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll recreate *Exercise 2, Creating a GET Request* to get
    the contents of a web page. While it may seem like there is more code involved,
    this isn''t necessarily the case. The `java.net.http` module can actually be quite
    flexible as you can introduce **lambda** expressions to handle the response. *Chapter
    13*, *Functional Programming with Lambda Expressions* covers lambda expressions:'
  prefs: []
  type: TYPE_NORMAL
- en: In IntelliJ's `Project` pane, right-click the `com.packtpub.http` package. Select
    `New` and then `Java Class`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `NetHttpClient` as the name of the Java class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following code for `NetHttpClient.java`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: When you run this program, you should see the same results as the `GetRequest`
    program created in *Exercise 2*, *Creating a GET Request*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1: Using the jsoup Library to Download Files from the Web'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With this activity, you will download the Java titles available through Packt.
    Go to [https://www.packtpub.com/tech/Java](https://www.packtpub.com/tech/Java)
    in a web browser. Notice all the Java titles that are available. The activity
    will be to write a program to print all those titles:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the `jsoup` library, access [https://packt.live/2J5dlEv](https://packt.live/2J5dlEv).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the HTML content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find all the `DIV` elements with a CSS class of `book-block-title` and print
    the text within `DIV`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run this, you should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The output is truncated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The solution for the activity can be found on page 557.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces HTTP networking, which is often used to connect to RESTful
    web services from within Java applications. HTTP is a textual request-response
    protocol. A client sends a request to a server and then gets a response. Each
    HTTP request has a method; for instance, you would use the GET request to retrieve
    data, POST to send data, and so on. In Java applications, you will often send
    and receive text in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: The `HttpUrlConnection` class provides the primary way to make HTTP requests.
    Your code writes to an output stream to send data, then reads the response from
    an input stream. The open-source jsoup library provides a convenient API to retrieve
    and parse HTML data. Starting with Java 11, you can use the `java.net.http` module
    for a more modern Reactive Streams approach to HTTP networking. In the next chapter,
    you'll learn about certificates and encryption—both commonly used with HTTP networking.
  prefs: []
  type: TYPE_NORMAL
