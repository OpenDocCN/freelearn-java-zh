- en: 9\. Working with HTTP
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9. 使用 HTTP
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we will examine the fundamentals of HTTP and create a program
    that connects to a specific web server and downloads data. We will begin with
    a study of HTTP request methods so that you can begin to practice making requests
    using Java's `HttpUrlConnection` class on your own. You will then learn to retrieve
    data using the GET and HEAD requests, and to send JSON-formatted data using the
    POST request. Towards the end of this chapter, you will learn to extract and parse
    HTML content using the open-source jsoup library, and explore the `java.net.http`
    module—a new HTTP class provided by Java 11—which supports both synchronous and
    asynchronous HTTP requests.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 HTTP 的基础知识，并创建一个程序来连接到特定的 Web 服务器并下载数据。我们将从研究 HTTP 请求方法开始，这样你就可以开始练习使用
    Java 的 `HttpUrlConnection` 类自行发送请求。然后，你将学习使用 GET 和 HEAD 请求检索数据，以及使用 POST 请求发送
    JSON 格式的数据。在本章的末尾，你将学习如何使用开源的 jsoup 库提取和解析 HTML 内容，并探索 Java 11 提供的 `java.net.http`
    模块——这是一个新的 HTTP 类，它支持同步和异步 HTTP 请求。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The **Hypertext Transfer Protocol** (**HTTP**) forms the base for the **World
    Wide Web** (**WWW**). Using HTTP's **request-response protocol**, a client, such
    as a web browser, can request data from a server. In the World Wide Web, a web
    browser requests content (HTML, JavaScript, images, and so on.), and then displays
    the results. In many cases, the content that is returned is fairly static.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**超文本传输协议**（**HTTP**）是 **万维网**（**WWW**）的基础。使用 HTTP 的 **请求-响应协议**，客户端（如网页浏览器）可以从服务器请求数据。在万维网中，网页浏览器请求内容（HTML、JavaScript、图像等），然后显示结果。在许多情况下，返回的内容相对静态。'
- en: Java applications typically differ. In most cases with Java, you will send requests
    to specialized backend web services for gathering data or updating systems. In
    both cases, though, the Java coding remains the same.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Java 应用程序通常有所不同。在大多数情况下，使用 Java，你将向专门的后端 Web 服务发送请求以收集数据或更新系统。然而，在这两种情况下，Java
    编码保持不变。
- en: This chapter covers how to make HTTP requests from Java applications and parse
    the response data.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何在 Java 应用程序中发送 HTTP 请求并解析响应数据。
- en: Exploring HTTP
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 HTTP
- en: With HTTP, a client application sends a specially formatted request to a server
    and then awaits a response. Technically, HTTP is a stateless protocol. This means
    that the server is not required to maintain any state information related to the
    client. Each client request can be treated individually as a new operation. The
    server does not need to store client-specific information.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 HTTP，客户端应用程序向服务器发送一个特殊格式的请求，然后等待响应。技术上讲，HTTP 是一种无状态协议。这意味着服务器不需要维护与客户端相关的任何状态信息。每个客户端请求都可以作为一个新的操作单独处理。服务器不需要存储特定于客户端的信息。
- en: Many servers do maintain some sort of state across multiple requests, though,
    such as when you make a purchase online, and the server needs to store the products
    you have selected; however, the basic protocol does not require this.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多服务器确实在多个请求之间维护某种状态，例如，当你在线购物时，服务器需要存储你选择的产品；然而，基本协议并不要求这样做。
- en: 'HTTP is a textual protocol (with allowances for compression). An HTTP request
    includes the following parts:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 是一种文本协议（允许压缩）。HTTP 请求包括以下部分：
- en: An operation (called a **request method**), a resource identifier for the operation,
    and optional parameters on a line.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个操作（称为 **请求方法**），操作的资源标识符，以及一行上的可选参数。
- en: Request headers; one per line.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求头；每行一个。
- en: An empty line.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一行空行。
- en: A message body, which is optional.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可选的消息主体。
- en: 'Each line ends with two characters: a carriage return and a line feed character.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每行以两个字符结束：一个回车符和一个换行符。
- en: 'HTTP uses the following two main concepts for identifying the resources that
    you are interested in:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 使用以下两个主要概念来识别你感兴趣的资源：
- en: A resource identifier in the **Universal Resource Identifier** (**URI**) format
    identifies a resource on a server.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源标识符**（**URI**）格式的资源标识符用于标识服务器上的资源。'
- en: A **Universal Resource Locator** (**URL**) includes a URI, along with the network
    protocol information, the server, and port number. URLs are what you type into
    the address bar of web browsers.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源定位符**（**URL**）包括一个 URI，以及网络协议信息、服务器和端口号。URL 是你在网页浏览器的地址栏中输入的内容。'
- en: 'Java includes classes for both concepts: `java.net.URI` and `java.net.URL`.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Java 包含了这两个概念的相关类：`java.net.URI` 和 `java.net.URL`。
- en: 'For example, consider the following URL: `http://example.com:80/`.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 URL：`http://example.com:80/`。
- en: In this example, the `http` identifies the protocol. The server is `example.com`,
    and the port number is `80` (the default HTTP port number). The trailing/character
    identifies the resource on the server, in this case, the top-level or root resource.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`http` 标识了协议。服务器是 `example.com`，端口号是 `80`（默认的 HTTP 端口号）。尾随的字符标识了服务器上的资源，在这种情况下，是顶级或根资源。
- en: Most modern websites use the HTTPS protocol. This is a more secure version of
    HTTP because the data that is sent to and from the server is encrypted.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代网站都使用 HTTPS 协议。这是一个更安全的 HTTP 版本，因为发送到和从服务器发送的数据都是加密的。
- en: 'For example, consider the following URL: [https://www.packtpub.com/](https://www.packtpub.com/).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下 URL：[https://www.packtpub.com/](https://www.packtpub.com/)。
- en: In this case, the protocol is `https` and the server is `www.packtpub.com`.
    The port defaults to `443` (the default port for HTTPS). As before, the trailing/character
    identifies the resource on the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个情况下，协议是 `https`，服务器是 `www.packtpub.com`。端口号默认为 `443`（HTTPS 的默认端口号）。和之前一样，尾随的字符标识了服务器上的资源。
- en: 'A URI can either have the full networking location or be relative to a server.
    The following are all valid URIs:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 URI 可以有完整的网络位置，也可以相对于服务器。以下都是有效的 URIs：
- en: '`https://www.packtpub.com/tech/java`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://www.packtpub.com/tech/java`'
- en: '`http://www.example.com/docs/java.html`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://www.example.com/docs/java.html`'
- en: '`/tech/java`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tech/java`'
- en: '`/docs/java.html`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/docs/java.html`'
- en: '`file:///java.html`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`file:///java.html`'
- en: URL is an older term, and generally represents the full specification of a resource
    on the internet. That said, like URIs, you can have relative URLs as well, such
    as `java.html`. In most cases, people talk about URIs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: URL 是一个较旧的术语，通常表示互联网上资源的完整规范。话虽如此，像 URIs 一样，你也可以有相对 URL，例如 `java.html`。在大多数情况下，人们谈论
    URIs。
- en: In general, though, your Java applications will use the `URL` class to establish
    HTTP connections.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，通常情况下，你的 Java 应用程序将使用 `URL` 类来建立 HTTP 连接。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can read more about URIs at [https://packt.live/32ATULO](https://packt.live/32ATULO)
    and URLs at [https://packt.live/2JjIgNN](https://packt.live/2JjIgNN).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://packt.live/32ATULO](https://packt.live/32ATULO) 上了解更多关于 URIs 的信息，以及
    [https://packt.live/2JjIgNN](https://packt.live/2JjIgNN) 上的 URLs。
- en: HTTP Request Methods
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP 请求方法
- en: 'Each HTTP request starts with a request method, such as GET. The method names
    come from the early days of the World Wide Web. These methods include the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 HTTP 请求都以一个请求方法开始，例如 GET。这些方法名称来自万维网的早期。以下是一些方法：
- en: '`GET`: This retrieves data from the server.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`：这从服务器检索数据。'
- en: '`HEAD`: This is like a GET request but just retrieves the header information
    and does not include the response body.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`：这类似于 GET 请求，但只检索头部信息，不包含响应体。'
- en: '`POST`: This sends data to the server. Most HTML forms on web pages send the
    form data you fill in as a POST request.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`：这向服务器发送数据。大多数网页上的 HTML 表单将你填写的数据作为 POST 请求发送。'
- en: '`PUT`: This also sends data to the server. A PUT request is often used to modify
    a resource, replacing the contents of the existing resource.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`：这也向服务器发送数据。PUT 请求通常用于修改资源，替换现有资源的内容。'
- en: '`DELETE`: This requests the server to delete the given resource.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`：这请求服务器删除指定的资源。'
- en: '`TRACE`: This echoes back the request data that is received by the server.
    This can be useful for debugging.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`：这个方法会回显服务器接收到的请求数据。这可以用于调试。'
- en: '`OPTIONS`: This lists the HTTP methods that the server supports for a given
    URL.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`：这列出了服务器为给定 URL 支持的 HTTP 方法。'
- en: Note
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: There are other HTTP methods as well, notably `CONNECT` and `PATCH`. The `HttpUrlConnection`
    class, described in this chapter, only supports the ones listed here.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还有其他 HTTP 方法，值得注意的是 `CONNECT` 和 `PATCH`。本章中描述的 `HttpUrlConnection` 类只支持这里列出的方法。
- en: Representational State Transfer
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表示状态传输
- en: '**Representational State Transfer** (**REST**) is a term that is used to describe
    web services that use HTTP as a transport protocol. You can think of this as HTTP
    with objects. With a RESTful web service, for example, a GET request normally
    returns an object, formatted in the **JavaScript Object Notation** (**JSON**).
    JSON provides a way to encode an object as text in a manner that is independent
    of the programming language used. JSON formats data as name-value pairs or arrays
    using JavaScript syntax:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示状态传输**（**REST**）是一个术语，用来描述使用 HTTP 作为传输协议的 Web 服务。你可以将其视为带有对象的 HTTP。例如，在
    RESTful Web 服务中，一个 GET 请求通常返回一个对象，格式化为 **JavaScript 对象表示法**（**JSON**）。JSON 提供了一种将对象编码为文本的方式，这种方式与使用的编程语言无关。JSON
    使用 JavaScript 语法以名称-值对或数组的形式格式化数据：'
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this example, the object has two properties: `animal` and `name`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，对象有两个属性：`animal`和`name`。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Many RESTful web services send and receive data in JSON format. You can refer
    to *Chapter 19*, *Reflection*, for more information on JSON.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 许多RESTful网络服务以JSON格式发送和接收数据。您可以参考*第19章*，*反射*，以获取有关JSON的更多信息。
- en: With web services, a `POST` request is typically used to create a new object,
    a `PUT` request is used to modify an existing object (by replacing it with the
    new data), and a `DELETE` request is used to delete an object.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络服务中，通常使用`POST`请求来创建一个新的对象，使用`PUT`请求来修改现有的对象（通过用新数据替换它），而使用`DELETE`请求来删除一个对象。
- en: Note
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Some frameworks use different meanings for `POST` and `PUT` operations. The
    approach here is the approach that is used by the Spring Boot framework.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一些框架对`POST`和`PUT`操作有不同的含义。这里采用的方法是Spring Boot框架所使用的方法。
- en: You'll find that Java is used a lot to create RESTful web services as well as
    web service clients.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您会发现Java被大量用于创建RESTful网络服务以及网络服务客户端。
- en: Note
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can read the HTTP specification at [https://packt.live/2MxDcHz](https://packt.live/2MxDcHz)
    or read an overview of HTTP at [https://packt.live/35MM1od](https://packt.live/35MM1od).
    You can refer to [https://packt.live/2MYvHbq](https://packt.live/2MYvHbq) for
    more information on REST web services. Additionally, you can refer to [https://packt.live/2P2Qz3W](https://packt.live/2P2Qz3W)
    for more information on JSON.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://packt.live/2MxDcHz](https://packt.live/2MxDcHz)上阅读HTTP规范或阅读HTTP的概述[https://packt.live/35MM1od](https://packt.live/35MM1od)。有关RESTful网络服务的更多信息，请参阅[https://packt.live/2MYvHbq](https://packt.live/2MYvHbq)。有关JSON的更多信息，请参阅[https://packt.live/2P2Qz3W](https://packt.live/2P2Qz3W)。
- en: Request Headers
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求头部
- en: 'A request header is a name-value pair that provides some information to the
    server. For example, the `User-Agent` request header identifies the application
    running on behalf of the user, typically the web browser. Almost all `User-Agent`
    strings start with `Mozilla/5.0` for historical reasons and because some sites
    will not render properly without mentioning the now-ancient Mozilla web browser.
    Servers do use the `User-Agent` header to guide browser-specific rendering. For
    example, consider the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请求头部是一个提供一些信息的名称-值对。例如，`User-Agent`请求头部标识代表用户运行的应用程序，通常是网络浏览器。几乎所有的`User-Agent`字符串都以`Mozilla/5.0`开头，这是由于历史原因，并且因为一些网站如果没有提到现在已经古老的Mozilla网络浏览器将无法正确渲染。服务器确实使用`User-Agent`头部来指导针对特定浏览器的渲染。例如，考虑以下内容：
- en: '[PRE1]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This `User-Agent` setting identifies an iPhone browser. The `Referer` header
    (spelled incorrectly for historical reasons) identifies the web page you are coming
    from. The `Accept` header lists the format for the data you'd like, such as `text/html`.
    The `Accept-Language` header lists a language code, such as `de` for German (Deutsch)
    if you'd like the response to be in German.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`User-Agent`设置标识了一个iPhone浏览器。`Referer`头部（由于历史原因拼写错误）标识了您来自的网页。`Accept`头部列出了您希望的数据格式，例如`text/html`。`Accept-Language`头部列出了一个语言代码，例如如果您希望响应为德语（Deutsch），则使用`de`。
- en: One important point about request headers is that each header can contain multiple
    values (which are comma separated), even if in most cases you will provide a single
    value.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 关于请求头部的一个重要观点是，每个头部可以包含多个值（以逗号分隔），尽管在大多数情况下您将提供一个单一的值。
- en: Note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can see a list of commonly used request headers at [https://packt.live/2pFjIaH](https://packt.live/2pFjIaH).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://packt.live/2pFjIaH](https://packt.live/2pFjIaH)上查看常用请求头部的列表。
- en: HTTP response messages also contain headers. These response headers can tell
    your application information about the remote resources.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应消息还包含头部信息。这些响应头部可以告诉您的应用程序有关远程资源的信息。
- en: Now that we've mentioned the highlights of HTTP, the next step is to start making
    network requests.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经提到了HTTP的要点，下一步就是开始进行网络请求。
- en: Using HttpUrlConnection
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HttpUrlConnection
- en: 'The `java.net.HttpUrlConnection` class provides the main way to access HTTP
    resources from Java. To establish an HTTP connection, you can use code like the
    following:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net.HttpUrlConnection`类提供了从Java访问HTTP资源的主要方式。要建立HTTP连接，您可以使用以下代码：'
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code sets up a URL initialized with a link to example.com. The `openConnection()`
    method on the URL then returns `HttpUrlConnection`. Once you have `HttpUrlConnection`,
    you can set the HTTP method (`HEAD`, in this case). You can get data from the
    server, upload data to the server, and specify request headers.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码设置了一个以链接到example.com初始化的URL。然后URL上的`openConnection()`方法返回`HttpUrlConnection`。一旦您有了`HttpUrlConnection`，您就可以设置HTTP方法（在这种情况下为`HEAD`）。您可以从服务器获取数据，上传数据到服务器，并指定请求标题。
- en: 'With `HttpUrlConnection`, you can call `setRequestProperty()` to specify a
    request header:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HttpUrlConnection`，您可以调用`setRequestProperty()`来指定请求标题：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Each request generates a response, which may be successful or not. To check
    the response, get the response code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个请求都会生成一个响应，这可能成功或不成功。要检查响应，请获取响应代码：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: A code of 200 is a success. There are other codes in the 200 range that also
    indicate a success, but with conditions, such as 204, which indicates success
    but with no content. Codes in the 300s indicate redirects. Codes in the 400s point
    to client errors, such as the dreaded 404 Not Found error, and codes in the 500s
    point to server errors.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 代码200表示成功。200范围内的其他代码也表示成功，但有条件，例如204，表示成功但没有内容。300范围内的代码表示重定向。400范围内的代码指向客户端错误，例如可怕的404未找到错误，500范围内的代码指向服务器错误。
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can see a list of HTTP response codes at [https://packt.live/2OP9Rtr](https://packt.live/2OP9Rtr).
    These are also defined as constants in the `HttpUrlConnection` class.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://packt.live/2OP9Rtr](https://packt.live/2OP9Rtr)查看HTTP响应代码列表。这些也在`HttpUrlConnection`类中定义为常量。
- en: 'Each response typically comes with a message, such as `OK`. You can retrieve
    this message by calling `getResponseMessage()`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 每个响应通常都附带一条消息，例如`OK`。您可以通过调用`getResponseMessage()`来检索此消息：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To see the headers in the response, call `getHeaderFields()`. This method returns
    a map of headers, where the value is a list of strings:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看响应中的标题，请调用`getHeaderFields()`。此方法返回一个标题映射，其中值是一个字符串列表：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: With HTTP, each header can have multiple values, which is why the value in the
    map is a list.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用HTTP，每个标题可以具有多个值，这就是为什么映射中的值是一个列表。
- en: You can also retrieve headers one at a time. The next exercise puts all this
    together to show you how to write a short Java program that creates an `HTTP`
    `HEAD` request.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以逐个检索标题。下一项练习将所有这些内容结合起来，向您展示如何编写一个简短的Java程序来创建一个`HTTP` `HEAD`请求。
- en: 'Exercise 1: Creating a HEAD Request'
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1：创建HEAD请求
- en: 'This exercise will send a HEAD request to `example.com`, which is an official
    practice domain you can use for testing:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习将向`example.com`发送HEAD请求，这是一个官方的练习域名，您可以用它来测试：
- en: Select `New` and then `Project` from the `File` menu in IntelliJ.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的`文件`菜单中选择`新建`然后选择`项目`。
- en: Select `Gradle` for the type of project. Click `Next`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择项目类型为`Gradle`。点击`下一步`。
- en: For the Group Id, enter `com.packtpub.net`.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于组ID，输入`com.packtpub.net`。
- en: For the Artifact Id, enter `chapter09`.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于工件ID，输入`chapter09`。
- en: For the Version, enter `1.0`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于版本，输入`1.0`。
- en: Accept the default setting on the next pane. Click `Next`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受下一页上的默认设置。点击`下一步`。
- en: Leave the project name as `chapter09`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将项目名称保留为`chapter09`。
- en: Click `Finish`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`完成`。
- en: Call up `build.gradle` in the IntelliJ text editor.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ文本编辑器中调用`build.gradle`。
- en: 'Change `sourceCompatibility` so that it is 12:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`sourceCompatibility`更改为12：
- en: '[PRE7]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the `src/main/java` folder, create a new Java package.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src/main/java`文件夹中，创建一个新的Java包。
- en: Enter `com.packtpub.http` as the package name.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包名输入为`com.packtpub.http`。
- en: Right-click this package in the `Project` pane and create a new Java class named
    `HeadRequest`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Project`窗格中右键单击此包，创建一个名为`HeadRequest`的新Java类。
- en: 'Enter the following code:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE8]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When you run this program, you will see an output like the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此程序时，您将看到以下输出：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The code of `200` indicates our request was successful. You can then see the
    response headers. The square brackets in the output come from the default way
    that Java prints out lists.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`200`代码表示我们的请求成功。然后您可以看到响应标题。输出中的方括号来自Java打印列表的默认方式。'
- en: You should feel free to change the initial URL to a site other than `example.com`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以自由地将初始URL更改为除`example.com`之外的网站。
- en: Reading the Response Data with a GET Request
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用GET请求读取响应数据
- en: 'With a GET request, you will get `InputStream` from the connection to see the
    response. Call `getInputStream()` to get the data sent back by the server for
    the resource (URL) you requested. If the response code indicates an error, use
    `getErrorStream()` to retrieve information about the error, such as a Not Found
    page. If you expect textual data in the response, such as HTML, text, XML, etc.,
    you can wrap `InputStream` in `BufferedReader`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 GET 请求，您将从连接中获取 `InputStream` 以查看响应。调用 `getInputStream()` 获取您请求的资源（URL）服务器发送回来的数据。如果响应代码指示错误，使用
    `getErrorStream()` 获取有关错误的信息，例如一个找不到页面。如果您期望响应中包含文本数据，例如 HTML、文本、XML 等，您可以将 `InputStream`
    包装在 `BufferedReader` 中：
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Exercise 2: Creating a GET Request'
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 2：创建 GET 请求
- en: 'This exercise prints out the HTML content from example.com. You can change
    the URL if you wish to and experiment with other web sites:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 此练习打印出 example.com 的 HTML 内容。如果您愿意，可以更改 URL 并与其他网站进行实验：
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java``Class`.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IntelliJ 的项目面板中，右键单击 `com.packtpub.http` 包。选择 `New`，然后 `Java Class`。
- en: Enter `GetRequest` as the name of the Java class.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `GetRequest` 作为 Java 类的名称。
- en: 'Enter the following code for `GetRequest.java`:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `GetRequest.java` 输入以下代码：
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run this program, and you will see the brief HTML content of `example.com`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此程序，您将看到 `example.com` 的简要 HTML 内容。
- en: Using this technique, we can write a program to print out the content of a web
    page using a GET request.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此技术，我们可以编写一个程序，使用 GET 请求打印网页内容。
- en: Dealing with Slow Connections
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理慢速连接
- en: '`HttpUrlConnection` offers two methods to help with slow connections:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpUrlConnection` 提供了两种方法来帮助处理慢速连接：'
- en: '[PRE12]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Call `setConnectTimeout()` to adjust the timeout when establishing the network
    connection to the remote site. The value you give as input should be in milliseconds.
    Call `setReadTimeout()` to adjust the timeout when reading data on the input stream.
    Again, provide the new timeout input in milliseconds.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 调用 `setConnectTimeout()` 来调整建立与远程站点的网络连接时的超时时间。您提供的输入值应为毫秒。调用 `setReadTimeout()`
    来调整读取输入流数据时的超时时间。同样，提供新的超时输入值（毫秒）。
- en: Requesting Parameters
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 请求参数
- en: 'With many web services, you''ll have to input parameters when making a request.
    HTTP parameters are encoded as name-value pairs. For example, consider the following:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多网络服务中，您在发出请求时必须输入参数。HTTP 参数编码为名称-值对。例如，考虑以下：
- en: '[PRE13]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, `name1` is the name of a parameter, and so is `name2`. The value
    of the `name1` parameter is `value1`, and the value of `name2` is `value2`. Parameters
    are separated by an ampersand character, `&`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`name1` 是参数的名称，同样 `name2` 也是。`name1` 参数的值是 `value1`，`name2` 的值是 `value2`。参数由一个与符号
    `&` 分隔。
- en: Note
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If the parameter values are simple alphanumeric values, you can enter them as
    shown in the example. If not, you need to encode the parameter data using URL
    encoding. You can refer to the `java.net.URLEncoder` class for more details on
    this.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果参数值是简单的字母数字值，您可以像示例中那样输入它们。如果不是，您需要使用 URL 编码对参数数据进行编码。您可以参考 `java.net.URLEncoder`
    类以获取更多详细信息。
- en: Handling Redirects
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理重定向
- en: In many cases, when you make an HTTP request to a server, the server will respond
    with a status indicating a redirect. This tells your application that the resource
    has moved to a new location, in other words; you should use a new URL.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，当您向服务器发出 HTTP 请求时，服务器会响应一个状态指示重定向。这告诉您的应用程序资源已移动到新位置，换句话说；您应该使用新的 URL。
- en: '`HttpUrlConnection` will automatically follow HTTP redirects. You can turn
    this off using the `setInstanceFollowRedirects()` method:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpUrlConnection` 会自动遵循 HTTP 重定向。您可以使用 `setInstanceFollowRedirects()` 方法将其关闭：'
- en: '[PRE14]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating HTTP POST Requests
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 HTTP POST 请求
- en: 'POST (and PUT) requests send data to the server. For a POST request, you need
    to turn on the output mode of `HttpUrlConnection` and set the content type:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: POST（和 PUT）请求将数据发送到服务器。对于 POST 请求，您需要打开 `HttpUrlConnection` 的输出模式并设置内容类型：
- en: '[PRE15]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, to upload the data, here assumed to be a String, use code like the following:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，为了上传数据，这里假设是一个字符串，可以使用以下代码：
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With web browsing, most POST requests send form data. From Java programs, however,
    you are more likely to upload JSON or XML data with POST and PUT requests. Once
    you upload the data, your program should read the response, especially to see
    whether the request was successful.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络浏览中，大多数 POST 请求发送表单数据。然而，从 Java 程序中，您更有可能使用 POST 和 PUT 请求上传 JSON 或 XML 数据。一旦上传数据，您的程序应该读取响应，特别是查看请求是否成功。
- en: 'Exercise 3: Sending JSON Data with POST Requests'
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习3：使用POST请求发送JSON数据
- en: 'In this exercise, we''ll send a small JSON object to the [https://packt.live/2oyJqxB](https://packt.live/2oyJqxB)
    test site. The site won''t do anything with our data except echo it back, along
    with some **metadata** about the request:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将向[https://packt.live/2oyJqxB](https://packt.live/2oyJqxB)测试站点发送一个小JSON对象。该站点不会对我们的数据进行任何操作，除了将其回显，以及一些关于请求的**元数据**：
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java` Class.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的项目视图中，右键单击`com.packtpub.http`包。选择`New`然后`Java Class`。
- en: Enter `PostJson` as the name of the Java class.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PostJson`作为Java类的名称。
- en: 'Enter the following code for `PostJson.java`:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`PostJson.java`输入以下代码：
- en: '[PRE17]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run this program, and you should see an output like the following:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行这个程序，你应该会看到以下类似的输出：
- en: '[PRE18]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The Apache `HttpComponents` library can help simplify your work with HTTP. For
    more information, you can refer to [https://packt.live/2BqZbtq](https://packt.live/2BqZbtq).
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Apache `HttpComponents`库可以帮助简化你使用HTTP的工作。更多信息，你可以参考[https://packt.live/2BqZbtq](https://packt.live/2BqZbtq)。
- en: Parsing HTML Data
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解析HTML数据
- en: 'An HTML document looks something like the following, but usually with a lot
    more content:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一个HTML文档看起来可能如下所示，但通常包含更多内容：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: HTML structures a document into a tree-like format, as shown in this example
    by indentation. The `<head>` element appears inside the `<html>` element. The
    `<title>` element appears inside the `<head>` element. An HTML document can have
    many levels of hierarchy.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: HTML将文档结构化为类似树的格式，如本例中通过缩进来显示。`<head>`元素位于`<html>`元素内部。`<title>`元素位于`<head>`元素内部。一个HTML文档可以有多个层次。
- en: Note
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Most web browsers provide an option to view a page's source. Select that and
    you'll see the HTML for the page.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网络浏览器都提供了一个查看页面源代码的选项。选择它，你就会看到页面的HTML。
- en: When you run a GET request from a Java application, you need to parse the returned
    HTML data. Typically, you parse that data into a tree structure of objects. One
    of the handiest ways to do this is with the open-source jsoup library.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从一个Java应用程序运行GET请求时，你需要解析返回的HTML数据。通常，你将那些数据解析成一个对象树结构。其中一种最方便的方法是使用开源的jsoup库。
- en: jsoup provides methods to connect using HTTP, download the data, and parse that
    data into elements that reflect the hierarchy of HTML on the page.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: jsoup提供了使用HTTP连接、下载数据并将这些数据解析成反映页面HTML层次结构的元素的方法。
- en: 'Using jsoup, the first step is to download a web page. To do so, you can use
    code like the following:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 使用jsoup，第一步是下载一个网页。为此，你可以使用以下代码：
- en: '[PRE20]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This code downloads the official Java 12 documentation start page, which contains
    a lot of links to specific Java documentation. The parsed HTML data gets placed
    into the `Document` object, which contains `Element` objects for each HTML element.
    This is purposely similar to Java's XML parsing API, which similarly parses XML
    documents into a tree structure of objects. Each element in the tree may have
    child elements. jsoup provides an API to access these child elements in a similar
    way to the Java XML parsing API.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码下载了官方Java 12文档起始页面，其中包含许多指向特定Java文档的链接。解析的HTML数据被放置到`Document`对象中，该对象包含每个HTML元素的`Element`对象。这故意与Java的XML解析API相似，它将XML文档解析成一个对象树结构。树中的每个元素可能有子元素。jsoup提供了一个API以类似Java
    XML解析API的方式访问这些子元素。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can find a lot of useful documentation on the jsoup library at [https://packt.live/2nZbmua](https://packt.live/2nZbmua).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://packt.live/2nZbmua](https://packt.live/2nZbmua)找到关于jsoup库的大量有用文档。
- en: 'On the Java 12 documentation page, you will see many links. In the underlying
    HTML, many of these links appear as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java 12文档页面上，你会看到很多链接。在底层的HTML中，许多这些链接如下所示：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If we wanted to extract the URI link ([https://packt.live/2VWd1x7](https://packt.live/2VWd1x7),
    in this case) as well as the descriptive text (API Documentation), we would need
    to traverse the    to the `LI` list item tag, and then get the HTML link, which
    is held in an `A` tag, called an anchor.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要提取URI链接（[https://packt.live/2VWd1x7](https://packt.live/2VWd1x7)，在这个例子中）以及描述性文本（API文档），我们需要遍历到`LI`列表项标签，然后获取HTML链接，它被包含在一个`A`标签中，称为锚点。
- en: One of the handy features of jsoup is that you can use select elements from
    the HTML using a selector syntax that is similar to the one that is offered by
    CSS and the jQuery JavaScript library.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: jsoup的一个方便功能是，你可以使用类似于CSS和jQuery JavaScript库提供的选择器语法从HTML中选择元素。
- en: 'To select all UL elements that have a CSS class of `topic`, you can use code
    like the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要选择所有具有 `topic` CSS类的 `UL` 元素，你可以使用以下代码：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Once you have the selected elements, you can iterate over each one, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦选择了所需的元素，你可以像下面这样遍历每一个：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code starts at the `UL` level and goes down to the child elements under
    the `UL` tag, which would normally be `LI`, or list item, elements. Each `LI`
    element on the Java documentation page has one child—that is, an anchor tag with
    a link.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码从 `UL` 级别开始，向下到 `UL` 标签下的子元素，通常是 `LI`，即列表项元素。Java文档页面上的每个 `LI` 元素都有一个子元素——即一个带有链接的锚标签。
- en: We can then pull out the link itself, which is held in the `href` attribute.
    We can also extract the English descriptive text used for the link.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以然后提取链接本身，它存储在 `href` 属性中。我们还可以提取用于链接的英文描述性文本。
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can find a lot more information about HTML at [https://packt.live/2o54P1e](https://packt.live/2o54P1e)
    and [https://packt.live/33L4akK](https://packt.live/33L4akK).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://packt.live/2o54P1e](https://packt.live/2o54P1e) 和 [https://packt.live/33L4akK](https://packt.live/33L4akK)
    找到更多关于HTML的信息。
- en: 'Exercise 4: Using jsoup to Extract Data from HTML'
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习4：使用jsoup从HTML中提取数据
- en: This exercise demonstrates how to use the jsoup API to extract link URIs and
    descriptive text from an HTML document. Use this as an example of how to parse
    other HTML documents in your projects.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习演示了如何使用jsoup API从HTML文档中提取链接URI和描述性文本。将其用作在项目中解析其他HTML文档的示例。
- en: Go to [https://packt.live/2MO4UOU](https://packt.live/2MO4UOU) in a web browser.
    You can see the official Java documentation.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络浏览器中转到 [https://packt.live/2MO4UOU](https://packt.live/2MO4UOU)。你可以看到官方的Java文档。
- en: We are going to extract the links in the main part of the page under section
    headings such as **Tools and Specifications**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提取页面主要内容下标题如 **工具和规范** 等部分的链接。
- en: 'If you inspect the API Documentation link in the Specifications section, you
    will see the link to the documentation resides in a UL element with a CSS class
    name of `topics`. As shown previously, we can use the jsoup API to find all the
    UL elements with that CSS class name:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查规范部分的API文档链接，你会看到文档链接位于一个具有 `topics` CSS类名的 `UL` 元素中。如前所述，我们可以使用jsoup API找到所有具有该CSS类名的
    `UL` 元素：
- en: Edit the `build.gradle` file in IntelliJ.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ中编辑 `build.gradle` 文件。
- en: 'Add the following to the dependencies block:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在依赖项块中添加以下内容：
- en: '[PRE24]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Choose to Import Changes from the popup that appears after adding the new dependency.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择在添加新依赖项后出现的弹出窗口中的“导入更改”。
- en: In IntelliJ's Project pane, right-click on the `com.packtpub.http` package.
    Select `New` and then `Java Class`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的项目面板中，右键单击 `com.packtpub.http` 包。选择“新建”然后“Java类”。
- en: Enter `JavaDocLinks` as the name of the Java class.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `JavaDocLinks` 作为Java类的名称。
- en: 'Enter the following code for `JavaDocLinks.java`:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 `JavaDocLinks.java` 输入以下代码：
- en: '[PRE25]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this exercise, we used the `jsoup` API to download an HTML document. Once
    downloaded, we extracted the link URIs and descriptive text associated with each
    link. This provides a good overview of the `jsoup` API, so you can use it in your
    projects.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用了 `jsoup` API下载一个HTML文档。下载后，我们提取了与每个链接相关的链接URI和描述性文本。这为 `jsoup` API提供了一个很好的概述，因此你可以在你的项目中使用它。
- en: Delving into the java.net.http Module
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 深入了解 java.net.http 模块
- en: Java 11 adds a brand new `HttpClient` class in the new `java.net.http` module.
    The `HttpClient` class uses a modern **builder pattern** (also called a fluent
    API) to set up HTTP connections. It then uses a Reactive Streams model to support
    both synchronous and asynchronous requests.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Java 11 在新的 `java.net.http` 模块中添加了一个全新的 `HttpClient` 类。`HttpClient` 类使用现代的 **建造者模式**（也称为流畅式API）来设置HTTP连接。然后它使用响应式流模型来支持同步和异步请求。
- en: Note
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You can refer to *Chapter 16*, *Predicates and Other Functional Interfaces*,
    and *Chapter 17*, *Reactive Programming with Java Flow*, for more on Java's Stream
    API and Reactive Streams. See [https://packt.live/32sdPfO](https://packt.live/32sdPfO)
    for an overview of the `java.net.http` package in the module.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以参考 *第16章*，*断言和其他功能接口*，以及 *第17章*，*使用Java Flow进行响应式编程*，了解更多关于Java的Stream API和响应式流的信息。查看
    [https://packt.live/32sdPfO](https://packt.live/32sdPfO) 了解模块中 `java.net.http`
    包的概述。
- en: 'With the builder model, you can configure things such as timeouts and then
    call the `build()` method. The `HttpClient` class you get is immutable:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用建造者模型，你可以配置诸如超时等设置，然后调用 `build()` 方法。你得到的 `HttpClient` 类是不可变的：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In this example, we specify the following:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们指定以下内容：
- en: HTTP version 2.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTTP版本2。
- en: The client should follow redirects normally, except if the redirect is from
    the more secure HTTPS to the less secure HTTP. This is the default behavior for
    `HttpClient.Redirect.NORMAL`.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应正常遵循重定向，除非重定向是从更安全的HTTPS到更不安全的HTTP。这是`HttpClient.Redirect.NORMAL`的默认行为。
- en: The connect timeout will be 30 seconds.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接超时为30秒。
- en: 'The `HttpClient` class can be used for multiple requests. The next step is
    to set up an HTTP request:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpClient`类可用于多个请求。下一步是设置HTTP请求：'
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'With this request:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此请求：
- en: The URL is `http://example.com/`.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL是`http://example.com/`。
- en: The timeout on reading is 30 seconds.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取超时为30秒。
- en: We set the `Accept` header to request the `text/html` content.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将`Accept`头设置为请求`text/html`内容。
- en: 'Once built, call `send()` on the client to send the request synchronously or
    call `sendAsync()` to send the request asynchronously. If you call `send()`, the
    call will block and your application will wait for the data to be returned. If
    you call `sendAsync()`, the call will return right away and your application can
    later check to see whether the data has arrived. Use `sendAsync()` if you want
    to process the data in a background thread. Refer to *Chapter 22*, *Concurrent
    Tasks* for more details on background threads and how to perform tasks concurrently:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建完成，在客户端上调用`send()`以同步发送请求或调用`sendAsync()`以异步发送请求。如果您调用`send()`，调用将阻塞，并且您的应用程序将等待数据返回。如果您调用`sendAsync()`，调用将立即返回，并且您的应用程序可以在稍后检查数据是否到达。如果您想在后台线程中处理数据，请使用`sendAsync()`。有关后台线程和如何并发执行任务的更多详细信息，请参阅*第22章*，*并发任务*：
- en: '[PRE28]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this example, the request body handler specifies that we want the contents
    back as a string.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，请求体处理程序指定我们希望以字符串形式返回内容。
- en: 'Exercise 5: Getting HTML Contents Using the java.net.http Module'
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习5：使用java.net.http模块获取HTML内容
- en: 'In this exercise, we''ll recreate *Exercise 2, Creating a GET Request* to get
    the contents of a web page. While it may seem like there is more code involved,
    this isn''t necessarily the case. The `java.net.http` module can actually be quite
    flexible as you can introduce **lambda** expressions to handle the response. *Chapter
    13*, *Functional Programming with Lambda Expressions* covers lambda expressions:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在此练习中，我们将重新创建*练习2，创建GET请求*以获取网页内容。虽然看起来代码更多，但这并不一定是这样。`java.net.http`模块实际上非常灵活，因为您可以使用**lambda**表达式来处理响应。*第13章*，*使用Lambda表达式的函数式编程*涵盖了lambda表达式：
- en: In IntelliJ's `Project` pane, right-click the `com.packtpub.http` package. Select
    `New` and then `Java Class`.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在IntelliJ的`项目`面板中，右键单击`com.packtpub.http`包。选择`新建`然后`Java类`。
- en: Enter `NetHttpClient` as the name of the Java class.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NetHttpClient`作为Java类的名称。
- en: 'Enter the following code for `NetHttpClient.java`:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`NetHttpClient.java`输入以下代码：
- en: '[PRE29]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: When you run this program, you should see the same results as the `GetRequest`
    program created in *Exercise 2*, *Creating a GET Request*.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行此程序时，您应该看到与在*练习2*，*创建GET请求*中创建的`GetRequest`程序相同的输出。
- en: 'Activity 1: Using the jsoup Library to Download Files from the Web'
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 活动一：使用jsoup库从网络下载文件
- en: 'With this activity, you will download the Java titles available through Packt.
    Go to [https://www.packtpub.com/tech/Java](https://www.packtpub.com/tech/Java)
    in a web browser. Notice all the Java titles that are available. The activity
    will be to write a program to print all those titles:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个活动，您将下载通过Packt提供的Java标题。在网页浏览器中访问[https://www.packtpub.com/tech/Java](https://www.packtpub.com/tech/Java)。注意所有可用的Java标题。活动内容是编写一个程序来打印所有这些标题：
- en: Using the `jsoup` library, access [https://packt.live/2J5dlEv](https://packt.live/2J5dlEv).
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`jsoup`库访问[https://packt.live/2J5dlEv](https://packt.live/2J5dlEv)。
- en: Download the HTML content.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载HTML内容。
- en: Find all the `DIV` elements with a CSS class of `book-block-title` and print
    the text within `DIV`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找所有具有CSS类`book-block-title`的`DIV`元素，并打印`DIV`内的文本。
- en: 'When you run this, you should see the following output:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您运行此程序时，您应该看到以下输出：
- en: '[PRE30]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: The output is truncated.
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 输出将被截断。
- en: The solution for the activity can be found on page 557.
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 活动解决方案可在第557页找到。
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter introduces HTTP networking, which is often used to connect to RESTful
    web services from within Java applications. HTTP is a textual request-response
    protocol. A client sends a request to a server and then gets a response. Each
    HTTP request has a method; for instance, you would use the GET request to retrieve
    data, POST to send data, and so on. In Java applications, you will often send
    and receive text in JSON format.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了HTTP网络，它通常用于在Java应用程序中连接到RESTful网络服务。HTTP是一种文本请求-响应协议。客户端向服务器发送请求，然后获取响应。每个HTTP请求都有一个方法；例如，您会使用GET请求来检索数据，POST来发送数据，等等。在Java应用程序中，您通常会以JSON格式发送和接收文本。
- en: The `HttpUrlConnection` class provides the primary way to make HTTP requests.
    Your code writes to an output stream to send data, then reads the response from
    an input stream. The open-source jsoup library provides a convenient API to retrieve
    and parse HTML data. Starting with Java 11, you can use the `java.net.http` module
    for a more modern Reactive Streams approach to HTTP networking. In the next chapter,
    you'll learn about certificates and encryption—both commonly used with HTTP networking.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpUrlConnection`类提供了发送HTTP请求的主要方式。您的代码将数据写入输出流以发送，然后从输入流中读取响应。开源的jsoup库提供了一个方便的API来检索和解析HTML数据。从Java
    11开始，您可以使用`java.net.http`模块来实现更现代的响应式流方法来处理HTTP网络。在下一章中，您将学习关于证书和加密的内容——这两者通常与HTTP网络一起使用。'
