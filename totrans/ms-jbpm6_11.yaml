- en: Appendix B. jBPM BPMN Constructs Reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Appendix is a quick reference for the BPMN constructs supported by jBPM.
    For a complete BPMN 2.0 guide, please refer to the Object Management Group specifications
    and guides available at [http://www.bpmn.org](http://www.bpmn.org). You can also
    refer to [Chapter 5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*,
    in this book for an in-depth, sample-driven discussion of jBPM constructs. For
    easy indexing and searching, this reference describes the constructs as displayed
    and grouped within the KIE process definition editor.
  prefs: []
  type: TYPE_NORMAL
- en: Tasks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A task represents an action that needs to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: User
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![User](img/9578OS_0B_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:userTask>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Task that requires a human interaction with a UI or a programmed
    API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use `Actors` or `Groups` for assigning the task to the users.
    Use the `Assignments`, `DataInputSet`, and `DataOutputSet` properties for task
    parameter mapping to the enclosing process instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Send](img/9578OS_0B_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:sendTask>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: General-purpose task for a *send* message action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: The `MessageRef` property is a key to the ID attribute of
    a `message` element (`bpmn2:message`), which must be defined in the process scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It needs a custom WorkItemHandler to be registered with the *send* key.
  prefs: []
  type: TYPE_NORMAL
- en: Receive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Receive](img/9578OS_0B_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:receiveTask>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: General-purpose task for a *receive* message action'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: The `MessageRef` property is a key to the ID attribute of
    a `message` element (`bpmn2:message`), which must be defined in the process scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It needs a custom WorkItemHandler to be registered with the *receive* key.
  prefs: []
  type: TYPE_NORMAL
- en: Manual
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Manual](img/9578OS_0B_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:manualTask>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Task whose purpose is oriented to documenting that an action
    must be performed manually and that it can be ignored by the engine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Service](img/9578OS_0B_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:serviceTask>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Service task that supports a Java or SOAP WebService call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use the `ServiceImplementation`, `ServiceInterface`, and
    `ServiceOperation` properties to configure the callable service/class. The WebService
    implementation requires the WSDL URL to be imported in the global scope (process
    imports).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Business rule
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Business rule](img/9578OS_0B_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:businessRuleTask>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Task that executes a Drool rule'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use the `Ruleflow Group` property to select the name of
    the Rule Group that defines the set of rules that you need to execute'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Script
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Script](img/9578OS_0B_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:scriptTask>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Task that executes Java or MVEL scripts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use the `On Entry Actions`, `On Exit Actions`, and `Script
    language` properties'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![None](img/9578OS_0B_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:task>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Ad hoc task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: You must register a WorkItemHandler with the *task* key'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Subprocesses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The subprocess represents a group of tasks which act together to perform a part
    of the process.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Reusable](img/9578OS_0B_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:callActivity>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Lets you call a process whose definition resides outside the
    current process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use `CalledElement`, `Independent`, and `WaitForCompletion`
    to configure which existing process definition to call and how to call it: as
    part of the calling process or as a new process instance (`Independent`), in a
    synchronous or asynchronous fashion (`WaitForCompletion`). Use `Assignments`,
    `DataInputSet`, and `DataOutputSet` to map variables from/to the calling process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple instances
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Multiple instances](img/9578OS_0B_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:subProcess>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Lets you loop (create multiple instances of a group of elements)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: Use `CollectionExpression`, `Variable Definitions`, and
    `Variable Name` to configure the loop and assign the variable to pass inside the
    loop'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ad hoc
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Ad hoc](img/9578OS_0B_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:adHocSubProcess>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Lets you define an unstructured subprocess definition'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: The `AdHoc ordering` attribute tells the engine to execute
    a multi-instance subprocess in parallel or sequentially'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Embedded](img/9578OS_0B_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:subProcess>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Lets you define an embedded process definition (not reusable
    from other process definitions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: `Variable definitions` lets you configure variables at the
    subprocess scope'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Events](img/9578OS_0B_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:subProcess>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Lets you define an embedded subprocess that can be triggered
    by a specific event (for example, `Signal`) and is executed in an asynchronous
    fashion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configuration**: No specific configuration required'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Start events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BPMN element**: `<bpmn2:startEvent>` and a child element that defines the
    event type as shown in the following image:![Start events](img/9578OS_0B_22.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Acts as a process trigger and can only be a catching event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported start events are as follows (see the preceding image, left to
    right):'
  prefs: []
  type: TYPE_NORMAL
- en: '**None**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message**: `<bpmn2:messageEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timer**: `<bpmn2:timerEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Escalation**: `<bpmn2:escalationEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conditional**: `<bpmn2:conditionalEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error**: `<bpmn2:errorEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compensation**: `<bpmn2:compensationEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signal**: `<bpmn2:signalEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: End events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BPMN element**: `<bpmn2:endEvent>` and a child element that defines the event
    type as shown in the following image:![End events](img/9578OS_0B_25.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Acts as a process trigger and can only be a throwing event.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported end events are as follows (see the preceding image, left to right):'
  prefs: []
  type: TYPE_NORMAL
- en: '**None**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Escalation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cancel**: `<bpmn2:cancelEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compensation**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signal**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Terminate**: `<bpmn2:terminateEventDefinition>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Catching intermediate events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BPMN element**: `<bpmn2:intermediateCatchEvent>` and a child element that
    defines the event type (see the previous events list)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Events that catch the triggering of a matching throwing event![Catching
    intermediate events](img/9578OS_0B_23.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported events are as follows (see the preceding image, left to right):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Message**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timer**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Escalation**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Conditional**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Compensation**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Signal**: Can be a boundary event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Throwing intermediate events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**BPMN element**: `<bpmn2:intermediateThrowEvent>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Events that throw event triggering![Throwing intermediate
    events](img/9578OS_0B_24.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The supported events are as follows (see the preceding image, left to right):'
  prefs: []
  type: TYPE_NORMAL
- en: Message
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gateways
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gateways control how the process flows.
  prefs: []
  type: TYPE_NORMAL
- en: Data-based exclusive (XOR)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Data-based exclusive (XOR)](img/9578OS_0B_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:exclusiveGateway>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Used to choose alternative sequence flows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event-based gateway
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Event-based gateway](img/9578OS_0B_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:eventBasedGateway>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Used to trigger sequence flows upon the occurrence of some
    event'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parallel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Parallel](img/9578OS_0B_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:parallelGateway>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Used to create parallel sequence flows where all paths are
    evaluated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inclusive
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Inclusive](img/9578OS_0B_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:inclusiveGateway>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Used for creating alternative flows where all paths are evaluated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Data objects](img/9578OS_0B_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:dataObject>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Data objects show the reader which data is required or produced
    in an activity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swimlanes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Swimlanes represent grouping of process actors or roles with respect to the
    process tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Lane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Lane](img/9578OS_0B_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:lane>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Used for organizing activities within a group according to
    a user or a user group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Artifacts are elements useful for documentation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Group](img/9578OS_0B_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:group>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: The group visually arranges different activities together;
    it does not affect the flow in the diagram'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Annotation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Annotation](img/9578OS_0B_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**BPMN element**: `<bpmn2:annotation>`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: The annotation is used for giving the reader of the diagram
    an understandable comment/description'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
