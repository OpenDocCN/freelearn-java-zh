["```java\njava -jar customerdb-jar-with-dependencies.jar\n```", "```java\npackage com.ensode.jakartaeebook.beanvalidation.init;\n//imports omitted for brevity\n@ApplicationScoped\n@DataSourceDefinition(name =\n  \"java:app/jdbc/customerdbDatasource\",\n  className = \"org.h2.jdbcx.JdbcDataSource\",\n  url = \"jdbc:h2:tcp://127.0.1.1:9092/mem:customerdb\",\n  user = \"sa\",\n  password = \"\")\npublic class DbInitializer {\n  private void init(@Observes @Initialized(ApplicationScoped.class) Object object) {\n    //This method will be invoked when the CDI application scope is initialized, during deployment\n    //No logic necessary, class level @DataSourceDefinition will create a data source to be used by the application.\n  }\n}\n```", "```java\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<persistence version=\"3.0\" \n\n         xsi:schemaLocation=\"https://jakarta.ee/xml/ns/persistence\n           https://jakarta.ee/xml/ns/persistence/persistence_3_0.xsd\">\n  <persistence-unit name=\"customerPersistenceUnit\">\n    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>\n    <jta-data-source>java:app/jdbc/customerdbDatasource</jta-data-source>\n    <exclude-unlisted-classes>false</exclude-unlisted-classes>\n  </persistence-unit>\n</persistence>\n```", "```java\npackage com.ensode.jakartaeebook.persistenceintro.entity\n//imports omitted for brevity\n@Entity\n@Table(name = \"CUSTOMERS\")\npublic class Customer implements Serializable {\n  @Id\n  @Column(name = \"CUSTOMER_ID\")\n  private Long customerId;\n  @Column(name = \"FIRST_NAME\")\n  private String firstName;\n  @Column(name = \"LAST_NAME\")\n  private String lastName;\n  private String email;\n  //getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.persistenceintro.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class JakartaPersistenceDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction;\n  public String updateDatabase() {\n    String retVal = \"confirmation\";\n    Customer customer = new Customer();\n    Customer customer2 = new Customer();\n    Customer customer3;\n    customer.setCustomerId(3L);\n    customer.setFirstName(\"James\");\n    customer.setLastName(\"McKenzie\");\n    customer.setEmail(\"jamesm@example.com\");\n    customer2.setCustomerId(4L);\n    customer2.setFirstName(\"Charles\");\n    customer2.setLastName(\"Jonson\");\n    customer2.setEmail(\"cjohnson@example.org\");\n    try {\n      userTransaction.begin();\n      entityManager.persist(customer);\n      entityManager.persist(customer2);\n      customer3 = entityManager.find(Customer.class, 4L);\n      customer3.setLastName(\"Johnson\");\n      entityManager.persist(customer3);\n      entityManager.remove(customer);\n      userTransaction.commit();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"LOGIN_INFO\")\npublic class LoginInfo {\n  @Id\n  @Column(name = \"LOGIN_INFO_ID\")\n  private Long loginInfoId;\n  @Column(name = \"LOGIN_NAME\")\n  private String loginName;\n  private String password;\n  @OneToOne\n  @JoinColumn(name = \"CUSTOMER_ID\")\n  private Customer customer;\n  //getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"CUSTOMERS\")\npublic class Customer implements Serializable {\n  @Id\n  @Column(name = \"CUSTOMER_ID\")\n  private Long customerId;\n  @Column(name = \"FIRST_NAME\")\n  private String firstName;\n  @Column(name = \"LAST_NAME\")\n  private String lastName;\n  private String email;\n  @OneToOne(mappedBy = \"customer\")\n  private LoginInfo loginInfo;\n  public LoginInfo getLoginInfo() {\n    return loginInfo;\n  }\n  public void setLoginInfo(LoginInfo loginInfo) {\n    this.loginInfo = loginInfo;\n  }\n  //additional setters and getters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class OneToOneRelationshipDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction;\n  public String updateDatabase() {\n    String retVal = \"confirmation\";\n    Customer customer;\n    LoginInfo loginInfo = new LoginInfo();\n    loginInfo.setLoginInfoId(1L);\n    loginInfo.setLoginName(\"charlesj\");\n    loginInfo.setPassword(\"iwonttellyou\");\n    try {\n      userTransaction.begin();\n      customer = entityManager.find(Customer.class, 4L);\n      loginInfo.setCustomer(customer);\n      entityManager.persist(loginInfo);\n      userTransaction.commit();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"ORDERS\")\npublic class Order {\n  @Id\n  @Column(name = \"ORDER_ID\")\n  private Long orderId;\n  @Column(name = \"ORDER_NUMBER\")\n  private String orderNumber;\n  @Column(name = \"ORDER_DESCRIPTION\")\n  private String orderDescription;\n  @ManyToOne\n  @JoinColumn(name = \"CUSTOMER_ID\")\n  private Customer customer;\n  //setters and getters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"CUSTOMERS\")\npublic class Customer implements Serializable {\n  @Id\n  @Column(name = \"CUSTOMER_ID\")\n  private Long customerId;\n  @Column(name = \"FIRST_NAME\")\n  private String firstName;\n  @Column(name = \"LAST_NAME\")\n  private String lastName;\n  private String email;\n  @OneToOne(mappedBy = \"customer\")\n  private LoginInfo loginInfo;\n  @OneToMany(mappedBy = \"customer\")\n  private Set<Order> orders;\n  public Set<Order> getOrders() {\n    return orders;\n  }\n  public void setOrders(Set<Order> orders) {\n    this.orders = orders;\n  }\n  //additional getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class OneToManyRelationshipDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction;\n  public String updateDatabase() {\n    String retVal = \"confirmation\";\n    Customer customer;\n    Order order1;\n    Order order2;\n    order1 = new Order();\n    order1.setOrderId(1L);\n    order1.setOrderNumber(\"SFX12345\");\n    order1.setOrderDescription(\"Dummy order.\");\n    order2 = new Order();\n    order2.setOrderId(2L);\n    order2.setOrderNumber(\"SFX23456\");\n    order2.setOrderDescription(\"Another dummy order.\");\n    try {\n      userTransaction.begin();\n      customer = entityManager.find(Customer.class, 4L);\n      order1.setCustomer(customer);\n      order2.setCustomer(customer);\n      entityManager.persist(order1);\n      entityManager.persist(order2);\n      userTransaction.commit();\n    }catch (NotSupportedException |\n      SystemException |\n      SecurityException |\n      IllegalStateException |\n      RollbackException |\n      HeuristicMixedException |\n      HeuristicRollbackException e) {\n      retVal = \"error\";\n      e.printStackTrace();\n     }\n      return retVal;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"ORDERS\")\npublic class Order {\n  @Id\n  @Column(name = \"ORDER_ID\")\n  private Long orderId;\n  @Column(name = \"ORDER_NUMBER\")\n  private String orderNumber;\n  @Column(name = \"ORDER_DESCRIPTION\")\n  private String orderDescription;\n  @ManyToOne\n  @JoinColumn(name = \"CUSTOMER_ID\")\n  private Customer customer;\n  @ManyToMany\n  @JoinTable(name = \"ORDER_ITEMS\",\n    joinColumns = @JoinColumn(name = \"ORDER_ID\",\n      referencedColumnName = \"ORDER_ID\"),\n    inverseJoinColumns = @JoinColumn(name = \"ITEM_ID\",\n      referencedColumnName = \"ITEM_ID\"))\n  private Collection<Item> items;\n  public Collection<Item> getItems() {\n    return items;\n  }\n  public void setItems(Collection<Item> items) {\n    this.items = items;\n  }\n  //additional getters and setters omitted\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"ITEMS\")\npublic class Item {\n  @Id\n  @Column(name = \"ITEM_ID\")\n  private Long itemId;\n  @Column(name = \"ITEM_NUMBER\")\n  private String itemNumber;\n  @Column(name = \"ITEM_SHORT_DESC\")\n  private String itemShortDesc;\n  @Column(name = \"ITEM_LONG_DESC\")\n  private String itemLongDesc;\n  @ManyToMany(mappedBy = \"items\")\n  private Collection<Order> orders;\n  public Collection<Order> getOrders() {\n    return orders;\n  }\n  public void setOrders(Collection<Order> orders) {\n    this.orders = orders;\n  }\n  //addtional getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.entityrelationship.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class ManyToManyRelationshipDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction;\n  public String updateDatabase() {\n    String retVal = \"confirmation\";\n    Order order;\n    Collection<Item> items = new ArrayList<Item>();\n    Item item1 = new Item();\n    Item item2 = new Item();\n    item1.setItemId(1L);\n    item1.setItemNumber(\"BCD1234\");\n    item1.setItemShortDesc(\"Notebook Computer\");\n    item2.setItemId(2L);\n    item2.setItemNumber(\"CDF2345\");\n    item2.setItemShortDesc(\"Cordless Mouse\");\n    items.add(item1);\n    items.add(item2);\n    try {\n      userTransaction.begin();\n      entityManager.persist(item1);\n      entityManager.persist(item2);\n      order = entityManager.find(Order.class, 1L);\n      order.setItems(items);\n      entityManager.persist(order);\n      userTransaction.commit();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.compositeprimarykeys.entity;\nimport java.io.Serializable;\npublic class OrderItemPK implements Serializable {\n  public Long orderId;\n  public Long itemId;\n  public OrderItemPK() {\n  }\n  public OrderItemPK(Long orderId, Long itemId) {\n    this.orderId = orderId;\n    this.itemId = itemId;\n  }\n  @Override\n  public boolean equals(Object obj) {\n    boolean returnVal = false;\n    if (obj == null) {\n      returnVal = false;\n    } else if (!obj.getClass().equals(this.getClass())) {\n      returnVal = false;\n    } else {\n      OrderItemPK other = (OrderItemPK) obj;\n      if (this == other) {\n        returnVal = true;\n      } else if (orderId != null && other.orderId != null\n          && this.orderId.equals(other.orderId)) {\n        if (itemId != null && other.itemId != null\n            && itemId.equals(other.itemId)) {\n          returnVal = true;\n        }\n      } else {\n        returnVal = false;\n      }\n    }\n    return returnVal;\n  }\n  @Override\n  public int hashCode() {\n    if (orderId == null || itemId == null) {\n      return 0;\n    } else {\n      return orderId.hashCode() ^ itemId.hashCode();\n    }\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.compositeprimarykeys.entity;\n//imports omitted\n@Entity\n@Table(name = \"ORDER_ITEMS\")\n@IdClass(value = OrderItemPK.class)\npublic class OrderItem {\n  @Id\n  @Column(name = \"ORDER_ID\")\n  private Long orderId;\n  @Id\n  @Column(name = \"ITEM_ID\")\n  private Long itemId;\n  @Column(name = \"ITEM_QTY\")\n  private Long itemQty;\n  //getters and setters omitted\n}\n```", "```java\npackage com.ensode.jakartaeebook.compositeprimarykeys.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class CompositePrimaryKeyDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  private OrderItem orderItem;\n  public String findOrderItem() {\n    String retVal = \"confirmation\";\n    try {\n      orderItem = entityManager.find(OrderItem.class,\n     new OrderItemPK(1L, 2L));\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n  //getters and setters omitted\n}\n```", "```java\npackage com.ensode.jakartaeebook.jpql.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class SelectQueryDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  private List<UsState> matchingStatesList;\n  public String findStates() {\n    String retVal = \"confirmation\";\n    try {\n      Query query = entityManager.createQuery(\n          \"SELECT s FROM UsState s WHERE s.usStateNm \"\n            + \"LIKE :name\");\n      query.setParameter(\"name\", \"New%\");\n      matchingStatesList = query.getResultList();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n  //getters and setters omitted for brevity\n}\n```", "```java\nSELECT * from US_STATES s where s.US_STATE_NM like 'New%'\n```", "```java\npackage com.ensode.jakartaeebook.criteriaapi.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class CriteriaApiDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  private List<UsState> matchingStatesList;\n  public String findStates() {\n    String retVal = \"confirmation\";\n    try {\n      CriteriaBuilder criteriaBuilder = entityManager.\n          getCriteriaBuilder();\n      CriteriaQuery<UsState> criteriaQuery =\n        criteriaBuilder.createQuery(UsState.class);\n      Root<UsState> root = criteriaQuery.from(\n          UsState.class);\n      Metamodel metamodel = entityManager.getMetamodel();\n      EntityType<UsState> usStateEntityType =\n        metamodel.entity(UsState.class);\n      SingularAttribute<UsState, String> usStateAttribute =\n       usStateEntityType.getDeclaredSingularAttribute(\n         \"usStateNm\",String.class);\n      Path<String> path = root.get(usStateAttribute);\n      Predicate predicate = criteriaBuilder.like(\n        path, \"New%\");\n      criteriaQuery = criteriaQuery.where(predicate);\n      TypedQuery typedQuery = entityManager.createQuery(\n              criteriaQuery);\n      matchingStatesList = typedQuery.getResultList();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n  //getters and setters omitted for brevity\n}\n```", "```java\npackage com.ensode.jakartaeebook.criteriaupdate.namedbean;\n//imports omitted for brevity\n@Named\n@RequestScoped\npublic class CriteriaUpdateDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction\n  private int updatedRows;\n  public String updateData() {\n    String retVal = \"confirmation\";\n    try {\n      userTransaction.begin();\n      insertTempData();\n      CriteriaBuilder criteriaBuilder =\n        entityManager.getCriteriaBuilder();\n      CriteriaUpdate<Address> criteriaUpdate =\n        criteriaBuilder.createCriteriaUpdate(Address.class);\n      Root<Address> root = criteriaUpdate.from(\n          Address.class);\n      criteriaUpdate.set(\"city\", \"New York\");\n      criteriaUpdate.where(criteriaBuilder.equal(\n          root.get(\"city\"), \"New Yorc\"));\n      Query query = entityManager.createQuery(\n          criteriaUpdate);\n      updatedRows = query.executeUpdate();\n      userTransaction.commit();\n    } catch (Exception e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n //getters and setters omitted\n  private void insertTempData() throws Exception {\n    //method body omitted\n  }\n}\n```", "```java\npackage com.ensode.jakartaeebook.criteriadelete.namedbean;\n//imports omitted\n@Named\n@RequestScoped\npublic class CriteriaDeleteDemoBean {\n  @PersistenceContext\n  private EntityManager entityManager;\n  @Resource\n  private UserTransaction userTransaction;\n  private int deletedRows;\n  public String deleteData() {\n    String retVal = \"confirmation\";\n    try {\n      userTransaction.begin();\n      CriteriaBuilder criteriaBuilder =\n        entityManager.getCriteriaBuilder();\n      CriteriaDelete<Address> criteriaDelete\n= criteriaBuilder.createCriteriaDelete(\n          Address.class);\n      Root<Address> root = criteriaDelete.from(\n        Address.class);\n      criteriaDelete.where(criteriaBuilder.or(\n        criteriaBuilder.equal(\n          root.get(\"city\"), \"New York\"),\n          criteriaBuilder.equal(root.get(\"city\"),\n              \"New York\")));\n      Query query = entityManager.createQuery(\ncriteriaDelete);\n      deletedRows = query.executeUpdate();\n      userTransaction.commit();\n    } catch (HeuristicMixedException\n            | HeuristicRollbackException\n            | NotSupportedException\n            | RollbackException\n            | SystemException\n            | IllegalStateException\n            | SecurityException e) {\n      retVal = \"error\";\n      e.printStackTrace();\n    }\n    return retVal;\n  }\n  //getters and setters omitted\n}\n```", "```java\npackage com.ensode.jakartaeebook.beanvalidation.entity;\n//imports omitted for brevity\n@Entity\n@Table(name = \"CUSTOMERS\")\npublic class Customer implements Serializable {\n  @Id\n  @Column(name = \"CUSTOMER_ID\")\n  private Long customerId;\n  @Column(name = \"FIRST_NAME\")\n  @NotNull\n  @Size(min = 2, max = 20)\n  private String firstName;\n  @Column(name = \"LAST_NAME\")\n  @NotNull\n  @Size(min = 2, max = 20)\n  private String lastName;\n  private String email;\n  // getters and setters omitted for brevity\n}\n```"]