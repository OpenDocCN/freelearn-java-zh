- en: Chapter 9. Conquering the CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Invoking server stop, start, and reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Invoking server group stop, start, restart, and reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a server group
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing an application – deploy, undeploy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to use the CLI to alter the system's state.
    That is, changing different settings such as deployments and creating new servers.
    In the previous chapter, we saw how to grab information out of the CLI. The CLI
    also provides a method to execute the commands outside it, by specifying the WildFly
    to connect to and the command to execute.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, WildFly provides you with an HTTP API, which can be used to perform
    actions and to retrieve information (most of these APIs are used to perform system
    monitoring analysis). In the previous chapter, we were using the CLI to grab information;
    thus via HTTP we have been using the GET verb of the HTTP protocol. In the following
    recipes, we will alter the state of the server by using the POST verb, along with
    the parameters that the WildFly HTTP API needs. The HTTP API only accepts JSON
    data, so we need to send the data that way.
  prefs: []
  type: TYPE_NORMAL
- en: We will use methods within both the operational modes— standalone and domain—whenever
    it makes sense, because with regard to the operational mode, you may have different
    entry points.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will simulate/use remote WildFly instances, just as in the
    real scenario where you can apply the following recipes to connect to remote servers.
    It does not make sense to try the recipes in `localhost`, without seeing any authentication
    and authorization issues.
  prefs: []
  type: TYPE_NORMAL
- en: To simulate a remote server, you can eventually use VirtualBox or Docker, and
    then install WildFly as described in the first chapter.
  prefs: []
  type: TYPE_NORMAL
- en: I'm going to use WildFly running on a Linux container using the Docker tool
    version 1.5\. You can obviously use a real remote server— it would be the same;
    what really counts is the WildFly platform being exposed.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, the last chapter of this book is all about running WildFly within
    a Linux container, using Docker. So if you are totally new to Docker (where have
    you been hiding?), have a look at the last chapter of this book, or grab the excellent
    Docker book, *The Docker Book*, *James Turnbull* at [http://www.dockerbook.com](http://www.dockerbook.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'My Docker configuration says the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Thus, my remote WildFly instance will be bound to that IP along with the usual
    WildFly ports, such as `8080`, `9990,` and `9999`. The management user is the
    same throughout the book with `wildfly` as the username and `cookbook.2015` as
    the password.
  prefs: []
  type: TYPE_NORMAL
- en: Invoking server stop, start, and reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop, start and reload a WildFly instance
    by invoking a command to the CLI. You may need to stop a server manually to correct
    a misconfiguration or to redeploy an application. Thus, knowing how to stop, start
    and reload a server is a must.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will walk through the `stop`, `start`, `restart`, and `reload` commands separately
    to better explain their invocation, and eventually, the differences. For example,
    the `start` command only makes sense when running in the domain mode, as starting
    WildFly in the standalone mode is a manual operation.
  prefs: []
  type: TYPE_NORMAL
- en: Stop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Obviously, after this command you need to start up WildFly manually. This is
    because the host-controller process went down along with the WildFly instance,
    and therefore, you cannot access the management interface to control your instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you are running WildFly in the domain mode, you first need to identify
    the host and the server that you want to stop, and then invoke the stop method,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Start
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This command only makes sense in the domain mode, where you connect to the domain
    controller. Then you can push commands to the various active host-controllers,
    which bring WildFly instances up or down, as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Restart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you were probably wondering in the preceding `stop` section, passing the
    `restart` argument set as `true` to the `shutdown` method would have probably
    restarted the WildFly instance and, in fact, it did.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, there is no counterpart to the domain mode. It would only be applicable
    for a server group, which is discussed later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Reload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `reload` method just shuts down all active WildFly services, unbinds resources,
    and then brings them all up back again, reloading the configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are running WildFly in the domain mode, the purpose of the invocation
    remains the same— to reload the server configuration; you can do as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are telling the `jboss-cli.sh` script to execute the command that we
    define in the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and give the following
    commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, `curl` complains about a digest authentication for `ManagementRealm`,
    which is the one used by the WildFly management interfaces.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let''s give the username and password to the command, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, it works; now remove the `--verbose` flag and execute the command again.
    You should get just the JSON output, after entering the password, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: I chose the `reload` method just to show you how to do it using the HTTP API.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Invoking server group stop, start, restart, and reload
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to stop, start, restart, and reload a WildFly
    server group, by invoking a command to the CLI. As you should know by now, you
    can stop, start, restart, and reload a single server belonging to a server group.
    We will see all these commands using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: As we are talking about a server group, this recipe only makes sense with WildFly
    running in the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will walk through the `stop`, `start`, `restart,` and `reload` commands separately
    to better explain their invocation and eventual differences.
  prefs: []
  type: TYPE_NORMAL
- en: Stop
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Start
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Restart
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Reload
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are telling the `jboss-cli.sh` script to execute the command that we
    define in the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The same applies for the other methods: `start-servers()`, `restart-servers()`,
    and `reload-servers()`.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and execute the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Creating a server group
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to create a server group, by invoking a command
    to the CLI. This applies only within the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The server group is ready to use without requiring any reload or restart. This
    means that it can be used to add servers to it. For the moment, it is just an
    empty server group. Later in this chapter, we will see how to add a server to
    a server group, using the CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you need to remove the server group, just use the `remove` method on
    it, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tool, such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and run the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Creating a server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create a server by invoking a command to
    the CLI. This applies only to the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the server is ready, you just need to start it manually. This can be achieved
    by starting the servers of the server group that your new server belongs to, in
    this case, `main-server-group`. Run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command just starts the servers in the `STOPPED` state.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the CLI, it would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools, such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Curl
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and execute the
    following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Managing an application – deploy, undeploy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to deploy and undeploy an application, and
    to check its status, on a running WildFly instance, by invoking a command to the
    CLI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Remember, I'm running WildFly remotely, bound to `192.168.59.103` as IP. WildFly
    is already up and running.
  prefs: []
  type: TYPE_NORMAL
- en: For this recipe, we will need the application named `example`, which you can
    find in my GitHub repository. If you skipped the *Managing applications using
    the deployments folder* recipe of [Chapter 2](ch02.html "Chapter 2. Running WildFly
    in Standalone Mode"), *Running WildFly in Standalone Mode*, please refer to it
    to download all the source code and projects that you will need.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build the application, give the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Once done, copy the artifact `example.war` into your local `$WILDFLY_HOME` folder.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will walk through the `deploy`, `status`, and `undeploy` commands separately
    to better explain their differences when dealing with the standalone and domain
    modes.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you need to check the deployment, you can execute the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running WildFly in the domain mode, we first need to know the server
    group that the application belongs to. We can do that by issuing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'If you already know the server group, you can check the deployment status directly
    to check the server it belongs to by invoking the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Undeploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In case you need to undeploy your application, just hit the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In case you are running WildFly in the domain mode, the invocation is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we are telling the `jboss-cli.sh` script to execute the command that we
    define within the `--command` parameter, and to return the result in the standard
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Deploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the CLI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the domain mode, you will have the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the CLI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Undeploy
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use the CLI as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Within the domain mode, give the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: By the way, you cannot manipulate the output.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: WildFly provides one more API, which is the HTTP API. Let's try it with some
    network command-line tools, such as `curl`.
  prefs: []
  type: TYPE_NORMAL
- en: Curl deployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s deploy using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With a running WildFly instance, open a new terminal window and execute the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The file `example.war` should be placed in the same folder from which you are
    invoking the command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Okay, it works. But we just uploaded our file, we haven''t deployed it yet.
    To deploy it, we need to grab the hash code that resulted from the `upload` command,
    and use it in the next one as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There you go! We have successfully deployed our interstellar web application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are running WildFly in the domain mode, the upload method is the same;
    thus, for effectively deploying the application, you can hit the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
- en: Status
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To check the status of your deployment, execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are running WildFly in the domain mode, you can run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: And that's all.
  prefs: []
  type: TYPE_NORMAL
- en: Curl undeployment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s undeploy using `curl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: That's it!
  prefs: []
  type: TYPE_NORMAL
