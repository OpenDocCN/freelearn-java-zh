- en: Chapter 6. Creating a Multimodule Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have already launched the rocket, let''s explore more of it. In
    this chapter, we will develop a `MyDistance` application from the previous chapter
    as a multimodule Maven project and learn how to create multimodule projects, build,
    and run them. The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a parent project—POM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a core module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a webapp module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a multimodule project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software architecture states modularity as the degree to which a system's components
    may be separated and recombined. In software engineering, modularity refers to
    the extent to which a software/application can be divided into multiple modules
    to achieve the business goal. Modularity enhances manageability and reusability.
    The growing days has seen software getting more complex, and modularity is the
    need of the hour.
  prefs: []
  type: TYPE_NORMAL
- en: Multimodule projects consist of many modules that adapt to modularity. A multimodule
    project is identified by a parent/master POM referencing one or more `.sub` modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'A multimodule project constitutes of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parent project POM**: This glues and references all the other modules of
    a project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Modules**: This includes submodules that serve different functions of the
    application and constitute the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parent POM is where you can put common dependencies in a single place and let
    other modules inherit it, that is, POM inheritance in modules. Usually, universal
    dependencies such as JUnit or log4j are the candidates of POM inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mechanism by which Maven handles multimodule projects is referred to as
    **reactor**. The reactor of Maven''s core has the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Collects all the modules to build
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sorts the projects (modules) into the current build order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Builds the sorted projects in order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The modules of the project are enclosed inside the `<modules> </modules>` tag
    by specifying each module with the `<module> </module>` tag. Similarly, the parents
    are enclosed inside the `<parent> </parent>` tag by specifying Maven coordinates.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for illustration, we will take the `MyDistance` application from [Chapter
    5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"), *Spicing
    Up a Maven Project*, and develop it as a multimodule project. The modules of the
    project would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Distance-main`: This is the parent project, also known as parent POM, that
    glues and references different modules of the project, that is, `distance-core`
    and `distance-webapp`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distance-core`: This module provides a simple distance conversion utility
    class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`distance-webapp`: This is a web interface in which you can input the units
    that depend on the `distance-core` module to perform a conversion and respond
    to the results'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the subsequent sections, we will get into the details of the preceding modules.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a parent project – POM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step towards building a multimodule project is setting up a parent
    POM. To do this, follow the ensuing steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** and click on **Maven Project**. Alternatively,
    navigate to **File** | **New** and click on **Other...**. In the **Select a wizard**
    screen, search for `maven` via the search box, select **Maven Project**, and click
    on the **Next** button, as shown in the following screenshot:![Creating a parent
    project – POM](img/00067.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New Maven Project** wizard appears; make sure that you tick the checkbox
    **Create a simple project (skip archetype selection)**, as shown in the following
    screenshot, and click on **Next**:![Creating a parent project – POM](img/00068.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New Maven project** configuration wizard appears; fill in the details
    as shown in the screenshot and click on **Finish**:![Creating a parent project
    – POM](img/00069.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure that you choose the packaging as POM from the dropdown:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| **Field** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Artifact Id** | `Distance-main` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Packaging** | `pom` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: The corresponding project will get created, and the resulting screen would look
    as follows:![Creating a parent project – POM](img/00070.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have the parent POM in place now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a core module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The core module of `MyDistance` will contain a class that can be converted
    across different units, that is, from km/meter to yard/miles. Let''s name this
    core module `distance-core`. To create a core module, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** and click on **Other…**. In the **Select a wizard**
    screen, search for `maven` via the search box, select **Maven Module**, and click
    on the **Next** button, as shown in the following screenshot:![Creating a core
    module](img/00071.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **New Maven Module** wizard appears; make sure to tick the checkbox **Create
    a simple project (skip archetype selection)**, provide the module name as `distance-core`,
    and browse to select the parent as `Distance-main`, as shown in the following
    screenshot:![Creating a core module](img/00072.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Configure project** Maven module wizard, fill in the details provided
    in the table after the following screenshot and click on **Finish**:![Creating
    a core module](img/00073.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Field** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Packaging** | `jar` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Since the core module just contains a Java class and is available to be used
    as a library for a web module of an application, the packaging type is `jar`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `distance-core` module gets created and the contents of the POM will look
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Please note that the parent of the module is enclosed in the `<parent></parent>`
    tag. Also, the `groupId` and `version` tags will not be present for a module since
    we specified the same `groupId` and `version` as the parent in the **Configure
    Maven Module** wizard. We did this in the preceding code while creating a module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: At any point, if we wish to change or add `groupId/version/artifactId`, we can
    always edit the `pom.xml` file since it's an XML file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The core module consists of a class file that performs the conversion across
    distance units. Now let's add a class; right-click on the project, navigate to
    **New**, select **Package**, and specify the package name as `com.packt.chpt6.mydistance.util`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a class named `ConversionUtil` in the preceding package. If you remember,
    we created this class in [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing
    Up a Maven Project"), *Spicing Up a Maven Project*. So, copy the contents of this
    class and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now let's put a unit test class in place. Create a package, `com.packt.chpt6.mydistance.util`,
    in `src/test/java`. Add the class `ConversionUtilTest` to the corresponding package.
    Refer to [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven
    Project"), *Spicing Up a Maven Project*, where we created this test class; copy
    the contents of this class and save it. The resulting `src` structure will look
    as follows:![Creating a core module](img/00074.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You might notice that we have some errors, and the errors are due to the `TestCase`
    class not being resolved. To solve this error, add `jUnit` as a dependency to
    the parent module, the `pom.xml` file, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Usually, JUnit and log4j dependencies, that is, common dependencies across modules,
    are put in one place in the parent POM and the modules inherit them.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a webapp module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The webapp module has a JSP file that has a form to accept the input. It also
    has a servlet that accepts the request parameters and performs the conversion
    using a core module and provides the response. Now let''s see how to get the webapp
    module in place by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** and click on **Other...**; in the **Select a
    wizard** screen, search for `maven` via the search box, select **Maven Module**,
    and click on the **Next** button as shown in the following screenshot:![Creating
    a webapp module](img/00071.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **New Maven Module** window that will follow, provide the module name
    as `distance-webapp` and browse to select the parent as `Distance-main`.![Creating
    a webapp module](img/00075.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Select an Archetype** window, search for `webapp` via the search box,
    select **maven-archetype-webapp**, and click on **Next** to proceed, as shown
    in the following screenshot:![Creating a webapp module](img/00076.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **New Maven module** window, fill in the details provided in the following
    table and click on **Finish** as shown in the screenshot that follows this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Field** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| --- | --- |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Group Id** | `com.packt.mvneclipse` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Version** | `0.0.1-SNAPSHOT` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| **Package** | `com.packt.chpt6.mydistance` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '![Creating a webapp module](img/00077.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The webapp module will be created, and the resulting structure will look like
    the following screenshot:![Creating a webapp module](img/00078.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if we look at the parent project's structure, we might notice that it has
    a reference to each of the modules, as shown in the following screenshot:![Creating
    a webapp module](img/00079.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also, if we take note of the `pom.xml` file of the parent project, we will
    see how modules are being added to the `<module>` tag as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the webapp module''s `pom.xml` file and add the dependencies for `log4j`,
    servlet, and Tomcat, as shown in the following code; this is also discussed in
    [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"),
    *Spicing Up a Maven Project*, in more detail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, add `distance-core` as a dependency since it is used by the webapp to
    perform the conversion, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the `log4j.properties` file to the `resources` folder. Refer to the *Adding
    Resources* section in [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing
    Up a Maven Project"), *Spicing Up a Maven Project*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the form to get input and add servlets (refer to sections *Adding a form
    for getting input* and *Adding Servlet* of [Chapter 5](part0037_split_000.html#page
    "Chapter 5. Spicing Up a Maven Project"), *Spicing Up a Maven Project*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a multimodule project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we are done with writing the code for modules, let''s build the project.
    Right-click on the parent project—in this case, `Distance-main`—select **Run As**,
    and click on **Maven test**. This should compile and run the unit tests. An excerpt
    of the output in the console is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The mechanism referred to as a reactor knows the order of building a project.
    Now again, right-click on **Distance-main**, select **Run As**, and click on **Maven
    install** to install the modules in a local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always make sure to clean the project by running Maven `clean` via the **Run
    As** option if any changes occur; alternatively, you can reinstall the project
    using **Maven install**.
  prefs: []
  type: TYPE_NORMAL
- en: Running the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the application, right-click on the webapp module of the parent project
    highlighted in the following screenshot, select **Run As**, and then click on
    **Run Configurations...**. In the **Run configuration** window, specify the goal
    as `tomcat7:run` and click on the **Run** button. The web application will run
    at `http://localhost:8080/distance-webapp/`; point the browser to this location
    and perform the conversion:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the application](img/00080.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a multimodule project and then build
    and run the application. In the next chapter, we will take a sneak peek into m2eclipse
    and learn how to customize it.
  prefs: []
  type: TYPE_NORMAL
