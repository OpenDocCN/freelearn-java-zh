["```java\n<project  \n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.packt.guice.di</groupId>\n  <artifactId>chapter4</artifactId>\n\n  <packaging>jar</packaging>\n  <version>0.0.1-SNAPSHOT</version>\n  <name>chapter4</name>\n\n  <dependencies>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <version>4.12</version>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>com.google.inject</groupId>\n      <artifactId>guice</artifactId>\n      <version>4.1.0</version>\n    </dependency>\n  </dependencies>\n  <build>\n    <finalName>chapter2</finalName>\n  </build>\n</project>\n```", "```java\npublic interface NotificationService {\n    boolean sendNotification(String message, String recipient);\n}\n```", "```java\npublic class SMSService implements NotificationService {\n\n  public boolean sendNotification(String message, String recipient) {\n    // Code for sending SMS\n    System.out.println(\"SMS message has been sent to \" + recipient);\n    return true;\n  }\n}\n```", "```java\npublic class NotificationClient {\n\n  public static void main(String[] args) {\n    NotificationService notificationService = new SMSService();\n    notificationService.sendNotification(\"Hello\", \"1234567890\");\n  }\n\n}\n```", "```java\npublic interface NotificationService {\n  boolean sendNotification(String message, String recipient);\n}\n```", "```java\nimport javax.inject.Singleton;\nimport com.packt.guice.di.service.NotificationService;\n\n@Singleton\npublic class SMSService implements NotificationService {\n\n  public boolean sendNotification(String message, String recipient) {\n    // Write code for sending SMS\n    System.out.println(\"SMS has been sent to \" + recipient);\n    return true;\n  }\n\n}\n```", "```java\nimport javax.inject.Inject;\n\nimport com.packt.guice.di.service.NotificationService;\n\npublic class AppConsumer {\n\n  private NotificationService notificationService;\n\n  //Setter based DI\n  @Inject\n  public void setService(NotificationService service) {\n    this.notificationService = service;\n  }\n\n  public boolean sendNotification(String message, String recipient){\n    //Business logic\n    return notificationService.sendNotification(message, recipient);\n  }\n}\n```", "```java\nimport com.google.inject.AbstractModule;\nimport com.packt.guice.di.impl.SMSService;\nimport com.packt.guice.di.service.NotificationService;\n\npublic class ApplicationModule extends AbstractModule{\n\n  @Override\n  protected void configure() {\n    //bind service to implementation class\n    bind(NotificationService.class).to(SMSService.class);\n  }\n\n}\n```", "```java\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.packt.guice.di.consumer.AppConsumer;\nimport com.packt.guice.di.injector.ApplicationModule;\n\npublic class NotificationClient {\n\n  public static void main(String[] args) {\n\n    Injector injector = Guice.createInjector(new ApplicationModule());\n\n    AppConsumer app = injector.getInstance(AppConsumer.class);\n\n    app.sendNotification(\"Hello\", \"9999999999\");\n  }\n}\n```", "```java\nSMS has been sent to Recipient :: 9999999999 with Message :: Hello\n```", "```java\nimport com.packt.guice.di.service.NotificationService;\n\npublic class MockSMSService implements NotificationService {\n\n  public boolean sendNotification(String message, String recipient) {\n    System.out.println(\"In Test Service :: \" + message + \"Recipient :: \" + recipient);\n    return true;\n  }\n\n}\n```", "```java\nimport org.junit.After;\nimport org.junit.Assert;\nimport org.junit.Before;\nimport org.junit.Test;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.packt.guice.di.consumer.AppConsumer;\nimport com.packt.guice.di.impl.MockSMSService;\nimport com.packt.guice.di.service.NotificationService;\n\npublic class NotificationClientTest {\n    private Injector injector;\n\n    @Before\n    public void setUp() throws Exception {\n      injector = Guice.createInjector(new AbstractModule() {\n\n        @Override\n        protected void configure() {\n          bind(NotificationService.class).to(MockSMSService.class);\n        }\n      });\n    }\n\n    @After\n    public void tearDown() throws Exception {\n      injector = null;\n    }\n\n    @Test\n    public void test() {\n      AppConsumer appTest = injector.getInstance(AppConsumer.class);\n      Assert.assertEquals(true, appTest.sendNotification(\"Hello There\", \"9898989898\"));;\n    }\n\n}\n```", "```java\nimport com.google.inject.Module;\nimport com.packt.guice.di.impl.SMSService;\nimport com.packt.guice.di.service.NotificationService;\n\npublic class ApplicationModule implements Module{\n\n  @Override\n  protected void configure(Binder binder) {\n    //bind NotificationService to SMSService implementation class\n    //Guice will create a single instance of SMSService for every Injection\n    binder.bind(NotificationService.class).to(SMSService.class);\n  }\n}\n```", "```java\nbinder.bind(NotificationService.class).to(SMSService.class);\n```", "```java\nbinder.bind(NotificationService.class).to(new SMSService());\n```", "```java\nAppConsumer app = injector.getInstance(AppConsumer.class);\n```", "```java\nMap<Key, Binding> bindings = injector.getBindings()\n```", "```java\n//From NotificationClient.java\nInjector injector = Guice.createInjector(new ApplicationModule());\n\n//Syntax from actual Guice Class  \nInjector injector = Guice.createInjector(\n                    new ModuleA(),\n                    new ModuleB(),\n                    . . .\n                    new ModuleN(args)\n);\ncreateInjector() method takes ApplicationModule() as an argument; the same method also takes a varargs, which means we can pass zero or more modules separated by a comma.\n```", "```java\nbinder.bind(NotificationService.class).to(new SMSProvider());\n```", "```java\npublic class ServiceConnection {\n\n    public void startService(){\n        System.out.println(\"Start SMS Notification Service\");\n    }\n\n    public void stopService(){\n        System.out.println(\"Stop SMS Notification Service\");\n    }\n\n}\n```", "```java\nimport com.google.inject.Provider;\n\npublic class SMSProvider implements Provider{\n\n    @Override\n    public ServiceConnection get() {\n\n        // Write some custom logic here.\n        ServiceConnection serviceConnection = new ServiceConnection();\n        // Write some custom logic here.\n        return serviceConnection;\n    }\n}\n```", "```java\nimport javax.inject.Provider;\n\nimport com.google.inject.Binder;\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.Module;\n\npublic class NotificationClientTest {\n\n    public static void main(String args[]){\n        Injector injector = Guice.createInjector(\n            new Module(){\n                @Override\n                public void configure(Binder binder) {\n                    binder.bind(ServiceConnection.class).toProvider((Class<? extends Provider<? extends ServiceConnection>>) SMSProvider.class);\n                }\n            }\n        );\n\n        ServiceConnection serviceConnection =\n        injector.getInstance(ServiceConnection.class);\n        serviceConnection.startService();\n        serviceConnection.stopService();\n    }\n}\n```", "```java\n//Field level injection\n@Inject\nprivate NotificationService notificationService;\n\n//Constructor level Injection\n@Inject\npublic AppConsumer(NotificationService service){\n     this.notificationService=service;\n}\n\n//Method  level injection\n@Inject\npublic void setService(NotificationService service) {\n    this.notificationService = service;\n}\n```", "```java\nNotificationService.java;\n```", "```java\n@ProvidedBy(SMSProvider.class)\npublic interface NotificationService{\n\n}\n//@ProvidedBy is equivalent to toProvider() binding like below,\nbind(NotificationService.class).toProvider(SMSProvider.class)\n\n```", "```java\n@ImplementedBy(SMSService.class)\npublic interface NotificationService{\n    boolean sendNotification(String message, String recipient);\n}\n```", "```java\nbind(NotificationService.class).annotatedWith(Names.named(\"SMS\"))\n          .to(SMSService.class);\n```", "```java\n   bind(NotificationService.class).to(SMSService.class);\n```", "```java\nbind(NotificationService.class).to(EmailService.class);\n```", "```java\nbind(SMSService.class).to(SMSDatabase.class);\n```", "```java\npublic class ApplicationModule implements AbstractModule{\n  @Override\n  protected void configure() {\n    //Linked binding as chain\n    bind(NotificationService.class).to(SMSService.class);\n    bind(SMSService.class).to(SMSDataBase.class);\n  }\n\n}\n```", "```java\nPublic class SearchModule extends AbstractModule{\n    @Override\n    protected void configure() {\n        bind(SearchParameters.class).toInstance(new SearchParameters());\n    }\n}\n```", "```java\nbind(SampleConcreteClass.class).in(Singleton.class);\n//Another way to define untargeted binding\nbind(String.class).toInstance(\"./alerts/\");\n```", "```java\npublic class SampleModule extends AbstractModule {\n  @Override \n  protected void configure() {\n    try {\n      bind(NotificationService.class).toConstructor(\n          SMSService.class.getConstructor(SMSDatabaseConnection.class));\n    } catch (NoSuchMethodException e) {\n      e.getPrintStackTrace();\n    }\n  }\n}\n```", "```java\n@Singleton\npublic class SMSDatabaseLog implements DatabaseLog {\n\n  private final Logger logger;\n\n  @Inject\n  public SMSDatabaseLog(Logger logger) {\n    this.logger = logger;\n  }\n\n  public void loggerException(UnreachableException e) {\n    //Below message will be logged to the SMSDatabaseLog by logger.\n    logger.warning(\"SMS Database connection exception, \" + e.getMessage());\n  }\n```", "```java\n//Constructor Based Injector\n@Inject\npublic AppConsumer(NotificationService notificationService){\n    this.service = notificationService;\n}\n```", "```java\nbind(NotificationService.class).annotatedWith(“sms”).to(SMSService.class);\nbind(NotificationService.class).annotatedWith(“email”).to(EmailService.class);\n```", "```java\nAppConsumer app = injector.getInstance(@Named(\"sms\") AppConsumer.class);\n```", "```java\nAppConsumer app = injector.getInstance(@Named(\"email\") AppConsumer.class);\n```", "```java\n@BindingAnnotation @Target({ FIELD, PARAMETER, METHOD }) @Retention(RUNTIME)\npublic @interface SMS{}\n```", "```java\npublic class AppConsumer {\n\n  private NotificationService notificationService;\n\n  //Constructor level Injection\n  @Inject\n  public AppConsumer(NotificationService service){\n       this.notificationService=service;\n  }\n\n  public boolean sendNotification(String message, String recipient){\n    //Business logic\n    return notificationService.sendNotification(message, recipient);\n  }\n}\n```", "```java\nprivate NotificationService notificationService;\n//Setter Injection\n@Inject\npublic void setService(NotificationService service) {\n   this.notificationService = service;\n}\n```", "```java\n@Inject private NotificationService notificationService;\n```", "```java\npublic class AppConsumer {\n  private static final String DEFAULT_MSG = \"Hello\";\n  private string message = DEFAULT_MSG;\n\n  @Inject(optional=true)\n  public void setDefaultMessage(@Named(\"SMS\") String message) {\n    this.message = message;\n  }\n}\n```", "```java\n@Inject static String timezonFmt = \"yyyy-MM-dd'T'HH:mm:ss\";\n\n@Inject\npublic static void setTimeZoneFmt(@Named(\"timeZoneFmt\")String timeZoneFmt){\n NotificationUtil.timeZoneFormat = timeZoneFmt;\n}\n```", "```java\nclass SMSUtilModule extends AbstractModule{\n    @Override\n    protected void configure() {\n       bindConstant().annotatedWith(Names.named(timeZoneFmt)).to(yyyy-MM-dd'T'HH:mm:ss);\n       requestStaticInjection(NotificationUtil.class);\n    }\n}\n```"]