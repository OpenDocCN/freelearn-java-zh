- en: Chapter 11. Hardening the WildFly Configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Delivering your configuration using property files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your configuration hashing passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing and protecting passwords using a vault
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to secure your WildFly system configuration
    using different methods. Securing the configuration means hiding sensitive data,
    such as passwords, from other people who might collaborate on your project or
    system in one way or another.
  prefs: []
  type: TYPE_NORMAL
- en: 'This goal can be achieved in different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Using property files to externalize the dynamic parameters, such as bindings,
    credentials, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hashing passwords—this is a quite common technique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storing passwords in a vault—this is the most secure method that you can use
    to protect your passwords
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first approach is not a totally secure one, thus it's a clean method to
    customize your settings. Still, it can give the freedom to distribute your configuration
    files without worrying about security concerns because there will just be default
    settings in it and nothing more. Furthermore, each of your WildFly infrastructure
    environments can rely on different property files. Configuration is the same;
    you just deliver a different property file.
  prefs: []
  type: TYPE_NORMAL
- en: The last two approaches are more focused on obfuscating passwords. Hashing uses
    a hash algorithm to encrypt the password. Thus, whoever sees the password in the
    XML configuration file will just see its hash value, not the real password.
  prefs: []
  type: TYPE_NORMAL
- en: Storing passwords in a vault is a little more complicated, but gives you better
    protection since a certificate is used to encrypt and decrypt the password.
  prefs: []
  type: TYPE_NORMAL
- en: Delivering your configuration using property files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to deliver you configuration using property
    files. This might be handy if you do not want to put all your settings' hardcode
    into the XML files, thus having to change them for each of your environments.
    This way, you can provide the general configuration via XML files and provide
    specific settings for your specific environment via property files.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to the property substitution feature provided by WildFly, you can use
    the `${your.property.goes.here}` syntax inside the XML files (that are `standalone.xml`
    or `domain.xml` and `host.xml`).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window run the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to create some property!
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, let''s create a property file named `wildflycookbook.properties`
    and add the following property and value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create the preceding virtual IP in your system. In Linux, you would do
    it by opening a terminal window and running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: where `eth0` is the name of your network interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in a terminal window, execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see from the log output, the emphasized characters, the property
    has been read from WildFly and placed into its configuration at runtime. So now
    our WildFly instance is bound to `http://10.0.0.1:8080`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This approach is pretty easy and straightforward; there is not much to talk
    about except its usage. The preceding example gives you just an idea of what you
    can do with it.
  prefs: []
  type: TYPE_NORMAL
- en: The `-P file.property` directive is a WildFly feature to load a bunch of system
    properties from a property file. WildFly takes advantage of this mechanism by
    providing property substitution for its configurations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine a datasource configuration as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, parameters to connect to the database, such as server name,
    server port, database name, and credentials are all hardcoded into the file.
  prefs: []
  type: TYPE_NORMAL
- en: Now suppose you need to replicate your WildFly configuration somewhere else,
    but the actual work will be done by a person outside your company. Would you give
    this person all this information? I guess not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having a property file can somehow protect you from giving such information,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Obviously, the preceding property needs to be found and matched into a property
    file, with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Much better!
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Keep in mind that passing property or property files in Java keeps precedence
    ordering. Thus, passing a property with `-D` notation after specifying a property
    file would take precedence over the same property. The last one wins!
  prefs: []
  type: TYPE_NORMAL
- en: Securing your configuration hashing passwords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to mask passwords as configuration files
    so that they are not visible, or better, are meaningless for people looking at
    them.
  prefs: []
  type: TYPE_NORMAL
- en: You may have heard about transforming a text that should be secret or private,
    such as a password. Often times, terms such as encoding, encryption, and hashing
    are used indiscriminately, but they are not the same. Let's clear these concepts
    before we go.
  prefs: []
  type: TYPE_NORMAL
- en: Encoding a text is about transforming it to make it readable and acceptable
    for a different format (like the `&` symbol in HTML should be converted to `&amp;`).
  prefs: []
  type: TYPE_NORMAL
- en: Encryption is about transforming a text to make it secret and meaningless. The
    transformation is based on a key and an algorithm (like AES, RSA, and Blowfish),
    such that the mix of the key and the algorithm makes the text completely different
    from its original content. Just the client who knows the key and the algorithm
    can revert the encrypted text to its original value.
  prefs: []
  type: TYPE_NORMAL
- en: Hashing is about integrity. This means that it is used to check whether a message
    (a text, a password, a file, and so on) which has arrived at its destination has
    been changed during its trip or not. A hash is not reversible. Given an input
    value, you will always get the same hash output. If you make a tiny change to
    your source, you will get a totally different hash output. There are several hash
    function algorithms, like MD5, SHA-3, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try the MD5 checksum on a small piece of text, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, by just changing the last character from `f` (lowercase) to
    `F` (uppercase), the MD5 checksum hash function gives a completely different output.
  prefs: []
  type: TYPE_NORMAL
- en: By the way, in this chapter, we will just use the term hash, either on transformed
    password by encoding, encrypting or hashing.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, I hope I've given you a little more information on such topics that really
    need a deeper explanation. Other than a load of technical books which you can
    find for yourself, there is a quite interesting one named *The Code Book*, *Simon
    Singh*.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go back to WildFly now.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now it's time to create the hash for our password.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a new terminal window and run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The output of the preceding script is your hashed password.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To accomplish this task, we rely on security domains. Create a security domain
    like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let''s go back to our datasource definition and reference the security
    domain as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now it works. Neat!
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you have to do is generate the hash using the Pickbox security framework
    provided by WildFly and use its `SecurityIdentityLoginModule`.
  prefs: []
  type: TYPE_NORMAL
- en: After that, you need to create a security domain within your WildFly configuration,
    which uses the same program (that is the `SecurityIdentityLoginModule` class)
    that generated your password.
  prefs: []
  type: TYPE_NORMAL
- en: Next, whenever you need to provide a hashed password, just reference that security
    domain and you are done. In doing so, the security domain first generates a hash
    for the password it is receiving and then matches the generated hash with the
    one that you stored in your configuration. The rest is just a match/no-match matter.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to use that password hash within our configuration file, we need
    to define a security domain which uses exactly the same functionality that generated
    the hash, otherwise it would be difficult to recognize a clear text password with
    an encrypted one.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in a datasource definition, you cannot have the following XML
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: That is, using the password hash in place does not work! Who can tell if that
    password is a clear text one or a hashed one?
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This kind of approach can be used not only for datasource, but even for `login-module`
    itself, JMS queues, and topics.
  prefs: []
  type: TYPE_NORMAL
- en: Securing and protecting passwords using a vault
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to secure and protect our password, still
    providing them to our WildFly configuration. The vault is a place where you store
    passwords, encrypted using a keystore. For our recipe, we will create a keystore
    and store a password used to connect to the MySQL database. MySQL installation
    is out of the scope of this book; if you need more information, refer to the MySQL
    documentation site at [https://dev.mysql.com/doc/refman/5.5/en/installing.html](https://dev.mysql.com/doc/refman/5.5/en/installing.html).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal window run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now it's time to create our keystore.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Within the same terminal window, execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Okay, now we have created the keystore to encrypt our passwords. Let''s check
    its integrity by executing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Okay, everything is fine! We are now ready to encrypt our passwords and store
    them into a vault.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To generate a vault, WildFly provides us with a script, `vault.sh`, inside the
    `bin` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, we will generate a vault that stores a password that will be
    used to connect to a database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window and execute the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding script is the `vault.sh` output and it depicts the following
    points:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How to reference the password stored in the vault
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A file named `VAULT.dat` inside a `vault` folder
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An XML code snippet to be placed into the `standalone.xml` or `host.xml` file
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can now use the vault in our datasource configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test our configuration, we need a running MySQL server. In my case, it is
    bound to a server running at `192.168.59.103:3306`. Furthermore, we need to configure
    the connection pool in order to instantly put valid connections into it that act
    as proof.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'So the datasource configuration is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s start our WildFly instance and take a look at the logs. Run the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the log, I''ve emphasized the statement pointing out the `VaultDS` datasource,
    which is successfully bounded. Now open a new terminal window and connect to the
    CLI to check our available connections, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! From the preceding output, we can say that the connection pool of our
    `VaultDS` datasource is filled with five available and active connections.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, just to prove that we are doing well, let''s try adding two more datasources
    connecting to the same database; one using a password in clear text, the other
    one using a wrong vault-block definition. Add the following datasource definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `UnsecureDS` datasource connects to the database using a clear text password,
    whilst the `WrongVaultDS` is using a wrong `vault-block`, that is `DB-TEST` which
    we didn''t create. Let''s start our WildFly once again and catch the logs for
    errors. Execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, the log is showing errors and complaining about a `SecurityException`
    regarding the `WrongVaultDS`. Thus, all the datasource subsystem is in error and
    not initialized.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try removing `WrongVaultDS` from the datasource definition, start WildFly once
    again and you should find the following log entries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, both `VaultDS` and `UnsecureDS` are properly bound.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `keytool` command is a tool provided by the Java SE platform, but understanding
    its usage and parameters is out of the scope of this book. However, a link to
    the official documentation provided by Oracle has been given in the *See also...*
    section of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s analyze the vault script used in this recipe and provided by WildFly
    for you. Let''s first see what option we have with the preceding script, by issuing
    the following command in a terminal window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now check how we invoked the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: So, we created an attribute named `PASSWORD` using the `-a` (minus `a`) notation,
    we then set its value as `cookbook.2015` using the `-x` (minus `x`) notation.
    Then, we created a vault-block to store the attribute and its value using the
    `-b` (minus `b`) notation. The rest of the parameters are used to bind the keystore
    which encrypts the attribute value, which is our password.
  prefs: []
  type: TYPE_NORMAL
- en: The `vault.sh` script generates for us a helpful output to invoke and reference
    the vault and the vault-block, which maps to our password. Using the information
    that it needs, WildFly is able to automatically extract the password and pass
    it to the component that is requesting it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The vault can store more passwords just by providing a different `vault-block`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, at the end of the *How to do it…* section of this recipe, we tried
    to bind a datasource (`WrongVaultDS`) using a different `vault-block`; we called
    it `DB-TEST`. As a result, we couldn''t bind that datasource and thus, the whole
    datasource subsystem was in error. Let''s now try to add the same datasource definition,
    but this time, we will also provide the `DB-TEST` vault-block to our vault file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a terminal window, and execute the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now edit the `standalone.xml` file and add the following XML code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, start WildFly as usual and look at the log. Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It worked! As you can see, you can define and store all passwords that you want
    in a vault as long as you declare a different vault-block.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For a deep understanding of the keytool command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
