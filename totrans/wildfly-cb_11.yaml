- en: Chapter 11. Hardening the WildFly Configuration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。强化WildFly配置
- en: 'In this chapter, you will learn the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下食谱：
- en: Delivering your configuration using property files
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性文件交付你的配置
- en: Securing your configuration hashing passwords
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护你的配置哈希密码
- en: Securing and protecting passwords using a vault
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用保险库来保护和加密密码
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, you will learn how to secure your WildFly system configuration
    using different methods. Securing the configuration means hiding sensitive data,
    such as passwords, from other people who might collaborate on your project or
    system in one way or another.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何使用不同的方法来保护你的WildFly系统配置。保护配置意味着隐藏敏感数据，如密码，以防止其他人以某种方式参与你的项目或系统。
- en: 'This goal can be achieved in different ways:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个目标可以通过不同的方式实现：
- en: Using property files to externalize the dynamic parameters, such as bindings,
    credentials, and so on
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性文件外部化动态参数，例如绑定、凭证等
- en: Hashing passwords—this is a quite common technique
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哈希密码——这是一种相当常见的技巧
- en: Storing passwords in a vault—this is the most secure method that you can use
    to protect your passwords
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将密码存储在保险库中——这是你可以用来保护密码的最安全的方法
- en: The first approach is not a totally secure one, thus it's a clean method to
    customize your settings. Still, it can give the freedom to distribute your configuration
    files without worrying about security concerns because there will just be default
    settings in it and nothing more. Furthermore, each of your WildFly infrastructure
    environments can rely on different property files. Configuration is the same;
    you just deliver a different property file.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法并不完全安全，因此它是一种自定义设置的清洁方法。尽管如此，它仍然可以给你分发配置文件的自由，无需担心安全问题，因为其中只会有默认设置，没有更多。此外，你的每个WildFly基础设施环境都可以依赖于不同的属性文件。配置是相同的；你只需交付不同的属性文件。
- en: The last two approaches are more focused on obfuscating passwords. Hashing uses
    a hash algorithm to encrypt the password. Thus, whoever sees the password in the
    XML configuration file will just see its hash value, not the real password.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两种方法更侧重于混淆密码。哈希使用哈希算法来加密密码。因此，无论谁在XML配置文件中看到密码，都只会看到其哈希值，而不是真正的密码。
- en: Storing passwords in a vault is a little more complicated, but gives you better
    protection since a certificate is used to encrypt and decrypt the password.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 将密码存储在保险库中要复杂一些，但提供了更好的保护，因为证书用于加密和解密密码。
- en: Delivering your configuration using property files
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用属性文件交付你的配置
- en: In this recipe, you will learn how to deliver you configuration using property
    files. This might be handy if you do not want to put all your settings' hardcode
    into the XML files, thus having to change them for each of your environments.
    This way, you can provide the general configuration via XML files and provide
    specific settings for your specific environment via property files.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，你将学习如何使用属性文件交付你的配置。如果你不想将所有设置硬编码到XML文件中，从而需要为每个环境更改它们，这可能会很有用。这样，你可以通过XML文件提供通用配置，并通过属性文件提供特定环境的特定设置。
- en: Thanks to the property substitution feature provided by WildFly, you can use
    the `${your.property.goes.here}` syntax inside the XML files (that are `standalone.xml`
    or `domain.xml` and `host.xml`).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了WildFly提供的属性替换功能，你可以在XML文件（`standalone.xml`、`domain.xml`和`host.xml`）中使用`${your.property.goes.here}`语法。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window run the following commands:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly。在终端窗口中运行以下命令：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now it's time to create some property!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候创建一些属性了！
- en: How to do it…
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'First of all, let''s create a property file named `wildflycookbook.properties`
    and add the following property and value:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个名为`wildflycookbook.properties`的属性文件，并添加以下属性和值：
- en: '[PRE1]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now create the preceding virtual IP in your system. In Linux, you would do
    it by opening a terminal window and running the following command:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在你的系统中创建前面的虚拟IP。在Linux中，你将打开一个终端窗口并运行以下命令：
- en: '[PRE2]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: where `eth0` is the name of your network interface.
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 其中`eth0`是你的网络接口名称。
- en: 'Now, in a terminal window, execute the following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端窗口中，执行以下命令：
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see from the log output, the emphasized characters, the property
    has been read from WildFly and placed into its configuration at runtime. So now
    our WildFly instance is bound to `http://10.0.0.1:8080`.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您从日志输出中看到的，强调的字符，属性已从WildFly读取并在运行时放置到其配置中。因此，现在我们的WildFly实例绑定到`http://10.0.0.1:8080`。
- en: How it works…
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This approach is pretty easy and straightforward; there is not much to talk
    about except its usage. The preceding example gives you just an idea of what you
    can do with it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法相当简单直接；除了它的用法之外，没有太多可说的。前面的例子只是给你一个关于你可以用它做什么的初步想法。
- en: The `-P file.property` directive is a WildFly feature to load a bunch of system
    properties from a property file. WildFly takes advantage of this mechanism by
    providing property substitution for its configurations.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`-P file.property`指令是WildFly的一个功能，可以从属性文件中加载大量系统属性。WildFly通过为其配置提供属性替换来利用这种机制。'
- en: 'Imagine a datasource configuration as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下以下的数据源配置：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, parameters to connect to the database, such as server name,
    server port, database name, and credentials are all hardcoded into the file.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，连接到数据库的参数，如服务器名称、服务器端口、数据库名称和凭证，都硬编码到文件中。
- en: Now suppose you need to replicate your WildFly configuration somewhere else,
    but the actual work will be done by a person outside your company. Would you give
    this person all this information? I guess not.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设你需要将WildFly配置复制到其他地方，但实际工作将由你公司外的人来完成。你会给这个人所有这些信息吗？我想不会。
- en: 'Having a property file can somehow protect you from giving such information,
    as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个属性文件可以在某种程度上保护你不泄露这样的信息，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Obviously, the preceding property needs to be found and matched into a property
    file, with the following content:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，需要找到前面的属性并将其匹配到属性文件中，内容如下：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Much better!
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更好！
- en: There's more…
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Keep in mind that passing property or property files in Java keeps precedence
    ordering. Thus, passing a property with `-D` notation after specifying a property
    file would take precedence over the same property. The last one wins!
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在Java中传递属性或属性文件时，属性文件具有优先级。因此，在指定属性文件后使用`-D`符号传递属性将优先于相同的属性。最后一个获胜！
- en: Securing your configuration hashing passwords
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护配置哈希密码
- en: In this recipe, you will learn how to mask passwords as configuration files
    so that they are not visible, or better, are meaningless for people looking at
    them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何将密码作为配置文件进行掩码处理，这样它们就不会被看到，或者更好，对查看它们的人来说没有意义。
- en: You may have heard about transforming a text that should be secret or private,
    such as a password. Often times, terms such as encoding, encryption, and hashing
    are used indiscriminately, but they are not the same. Let's clear these concepts
    before we go.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能听说过将应该保密或私密的文本（如密码）进行转换。很多时候，术语如编码、加密和哈希被不加区分地使用，但它们并不相同。在我们继续之前，让我们澄清这些概念。
- en: Encoding a text is about transforming it to make it readable and acceptable
    for a different format (like the `&` symbol in HTML should be converted to `&amp;`).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 编码文本是将它转换为可读的，并使其适用于不同的格式（如HTML中的`&`符号应转换为`&amp;`）。
- en: Encryption is about transforming a text to make it secret and meaningless. The
    transformation is based on a key and an algorithm (like AES, RSA, and Blowfish),
    such that the mix of the key and the algorithm makes the text completely different
    from its original content. Just the client who knows the key and the algorithm
    can revert the encrypted text to its original value.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是将文本转换为使其保密和没有意义的过程。这种转换基于一个密钥和一个算法（如AES、RSA和Blowfish），这样密钥和算法的组合使得文本与其原始内容完全不同。只有知道密钥和算法的客户才能将加密的文本恢复到原始值。
- en: Hashing is about integrity. This means that it is used to check whether a message
    (a text, a password, a file, and so on) which has arrived at its destination has
    been changed during its trip or not. A hash is not reversible. Given an input
    value, you will always get the same hash output. If you make a tiny change to
    your source, you will get a totally different hash output. There are several hash
    function algorithms, like MD5, SHA-3, and so on.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希是关于完整性的。这意味着它用于检查一个消息（文本、密码、文件等）在到达目的地期间是否被更改。哈希是不可逆的。给定一个输入值，你将始终得到相同的哈希输出。如果你对你的源进行微小的更改，你将得到一个完全不同的哈希输出。有几种哈希函数算法，如MD5、SHA-3等。
- en: 'Let''s try the MD5 checksum on a small piece of text, as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试对一个小的文本片段进行MD5校验和，如下所示：
- en: '[PRE7]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, by just changing the last character from `f` (lowercase) to
    `F` (uppercase), the MD5 checksum hash function gives a completely different output.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，只需将最后一个字符从`f`（小写）改为`F`（大写），MD5校验和散列函数就会给出完全不同的输出。
- en: By the way, in this chapter, we will just use the term hash, either on transformed
    password by encoding, encrypting or hashing.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，在本章中，我们将只使用术语散列，无论是通过编码、加密还是散列转换后的密码。
- en: Okay, I hope I've given you a little more information on such topics that really
    need a deeper explanation. Other than a load of technical books which you can
    find for yourself, there is a quite interesting one named *The Code Book*, *Simon
    Singh*.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我希望我已经给你提供了一些关于这类真正需要深入解释的话题的更多信息。除了你可以自己找到的大量技术书籍之外，还有一本相当有趣的书籍名为《密码之书》，作者是*西蒙·辛格*。
- en: Let's go back to WildFly now.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到WildFly。
- en: Getting ready
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly.
    In a terminal window execute the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly。在终端窗口中执行以下命令：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now it's time to create the hash for our password.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候为我们的密码创建散列了。
- en: How to do it…
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Open a new terminal window and run the following commands:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的终端窗口并运行以下命令：
- en: '[PRE9]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output of the preceding script is your hashed password.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前述脚本的输出就是你的散列密码。
- en: 'To accomplish this task, we rely on security domains. Create a security domain
    like the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了完成这个任务，我们依赖于安全域。创建一个如下所示的安全域：
- en: '[PRE10]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, let''s go back to our datasource definition and reference the security
    domain as follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们回到我们的数据源定义，并按照以下方式引用安全域：
- en: '[PRE11]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now it works. Neat!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它工作了。真不错！
- en: How it works…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: All you have to do is generate the hash using the Pickbox security framework
    provided by WildFly and use its `SecurityIdentityLoginModule`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你所要做的就是使用WildFly提供的Pickbox安全框架生成散列，并使用它的`SecurityIdentityLoginModule`。
- en: After that, you need to create a security domain within your WildFly configuration,
    which uses the same program (that is the `SecurityIdentityLoginModule` class)
    that generated your password.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，你需要在WildFly配置中创建一个安全域，该安全域使用与生成密码相同的程序（即`SecurityIdentityLoginModule`类）。
- en: Next, whenever you need to provide a hashed password, just reference that security
    domain and you are done. In doing so, the security domain first generates a hash
    for the password it is receiving and then matches the generated hash with the
    one that you stored in your configuration. The rest is just a match/no-match matter.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，每次你需要提供一个散列密码时，只需引用该安全域即可完成。在这个过程中，安全域首先为接收到的密码生成一个散列，然后将生成的散列与你在配置中存储的散列进行匹配。其余的只是一个匹配/不匹配的问题。
- en: To be able to use that password hash within our configuration file, we need
    to define a security domain which uses exactly the same functionality that generated
    the hash, otherwise it would be difficult to recognize a clear text password with
    an encrypted one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要能在配置文件中使用那个密码散列，我们需要定义一个使用与生成散列完全相同功能的安全域，否则将很难区分明文密码和加密密码。
- en: 'For example, in a datasource definition, you cannot have the following XML
    code snippet:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在数据源定义中，你不能有以下的XML代码片段：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: That is, using the password hash in place does not work! Who can tell if that
    password is a clear text one or a hashed one?
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，使用密码散列代替的方法是不可行的！谁能判断出这个密码是明文还是散列的？
- en: There's more...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多…
- en: This kind of approach can be used not only for datasource, but even for `login-module`
    itself, JMS queues, and topics.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不仅适用于数据源，甚至还可以用于`login-module`本身、JMS队列和主题。
- en: Securing and protecting passwords using a vault
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用保险库保护密码
- en: In this recipe, you will learn how to secure and protect our password, still
    providing them to our WildFly configuration. The vault is a place where you store
    passwords, encrypted using a keystore. For our recipe, we will create a keystore
    and store a password used to connect to the MySQL database. MySQL installation
    is out of the scope of this book; if you need more information, refer to the MySQL
    documentation site at [https://dev.mysql.com/doc/refman/5.5/en/installing.html](https://dev.mysql.com/doc/refman/5.5/en/installing.html).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何保护我们的密码，同时仍然将它们提供给我们的WildFly配置。保险库是一个存储密码的地方，使用密钥库进行加密。在我们的菜谱中，我们将创建一个密钥库并存储用于连接MySQL数据库的密码。MySQL安装不在此书的范围之内；如果你需要更多信息，请参阅MySQL文档网站[https://dev.mysql.com/doc/refman/5.5/en/installing.html](https://dev.mysql.com/doc/refman/5.5/en/installing.html)。
- en: Getting ready
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, let''s first create an `ad-hoc` folder to run our WildFly:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，让我们首先创建一个`ad-hoc`文件夹来运行我们的WildFly：
- en: 'In a terminal window run the following commands:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端窗口中运行以下命令：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now it's time to create our keystore.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在是时候创建我们的密钥库了。
- en: 'Within the same terminal window, execute the following:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个终端窗口中，执行以下操作：
- en: '[PRE14]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Okay, now we have created the keystore to encrypt our passwords. Let''s check
    its integrity by executing the following command:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，现在我们已经创建了密钥库来加密我们的密码。让我们通过执行以下命令来检查其完整性：
- en: '[PRE15]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Okay, everything is fine! We are now ready to encrypt our passwords and store
    them into a vault.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，一切正常！我们现在准备好加密我们的密码并将它们存储到保险库中。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: To generate a vault, WildFly provides us with a script, `vault.sh`, inside the
    `bin` folder.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成一个保险库，WildFly在`bin`文件夹内提供了一个脚本，名为`vault.sh`。
- en: 'As an example, we will generate a vault that stores a password that will be
    used to connect to a database:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 作为示例，我们将生成一个存储用于连接数据库的密码的保险库：
- en: 'Open a terminal window and execute the following:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口并执行以下操作：
- en: '[PRE16]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding script is the `vault.sh` output and it depicts the following
    points:'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述脚本是`vault.sh`的输出，它描述了以下要点：
- en: How to reference the password stored in the vault
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何引用保险库中存储的密码
- en: A file named `VAULT.dat` inside a `vault` folder
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`vault`文件夹内名为`VAULT.dat`的文件
- en: An XML code snippet to be placed into the `standalone.xml` or `host.xml` file
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个要放置到`standalone.xml`或`host.xml`文件中的XML代码片段
- en: 'We can now use the vault in our datasource configuration, as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以在数据源配置中使用保险库，如下所示：
- en: '[PRE17]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: To test our configuration, we need a running MySQL server. In my case, it is
    bound to a server running at `192.168.59.103:3306`. Furthermore, we need to configure
    the connection pool in order to instantly put valid connections into it that act
    as proof.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了测试我们的配置，我们需要一个正在运行的MySQL服务器。在我的情况下，它绑定到了运行在`192.168.59.103:3306`的服务器上。此外，我们需要配置连接池，以便立即将有效的连接放入其中，作为证明。
- en: 'So the datasource configuration is as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，数据源配置如下：
- en: '[PRE18]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s start our WildFly instance and take a look at the logs. Run the following
    command:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们启动我们的WildFly实例并查看日志。运行以下命令：
- en: '[PRE19]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the log, I''ve emphasized the statement pointing out the `VaultDS` datasource,
    which is successfully bounded. Now open a new terminal window and connect to the
    CLI to check our available connections, as follows:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在日志中，我已经强调了指出`VaultDS`数据源的声明，该数据源已成功绑定。现在打开一个新的终端窗口并连接到CLI以检查我们的可用连接，如下所示：
- en: '[PRE20]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Great! From the preceding output, we can say that the connection pool of our
    `VaultDS` datasource is filled with five available and active connections.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 太好了！从前面的输出中，我们可以得出结论，我们的`VaultDS`数据源连接池已填充了五个可用和活动的连接。
- en: 'Now, just to prove that we are doing well, let''s try adding two more datasources
    connecting to the same database; one using a password in clear text, the other
    one using a wrong vault-block definition. Add the following datasource definition:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在为了证明我们做得很好，让我们尝试添加两个更多连接到同一数据库的数据源；一个使用明文密码，另一个使用错误的保险库定义。添加以下数据源定义：
- en: '[PRE21]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `UnsecureDS` datasource connects to the database using a clear text password,
    whilst the `WrongVaultDS` is using a wrong `vault-block`, that is `DB-TEST` which
    we didn''t create. Let''s start our WildFly once again and catch the logs for
    errors. Execute the following command:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`UnsecureDS`数据源使用明文密码连接到数据库，而`WrongVaultDS`使用错误的`vault-block`，即我们未创建的`DB-TEST`。让我们再次启动WildFly并捕获错误日志。执行以下命令：'
- en: '[PRE22]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As you can see, the log is showing errors and complaining about a `SecurityException`
    regarding the `WrongVaultDS`. Thus, all the datasource subsystem is in error and
    not initialized.
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如您所见，日志显示错误并抱怨关于`WrongVaultDS`的`SecurityException`。因此，所有的数据源子系统都处于错误状态且未初始化。
- en: 'Try removing `WrongVaultDS` from the datasource definition, start WildFly once
    again and you should find the following log entries:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试从数据源定义中移除`WrongVaultDS`，再次启动WildFly，你应该会找到以下日志条目：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you can see, both `VaultDS` and `UnsecureDS` are properly bound.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`VaultDS`和`UnsecureDS`都正确地绑定了。
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `keytool` command is a tool provided by the Java SE platform, but understanding
    its usage and parameters is out of the scope of this book. However, a link to
    the official documentation provided by Oracle has been given in the *See also...*
    section of this recipe.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`keytool`命令是由Java SE平台提供的工具，但理解其用法和参数超出了本书的范围。然而，在食谱的*另请参阅...*部分提供了一个由Oracle提供的官方文档链接。'
- en: 'Let''s analyze the vault script used in this recipe and provided by WildFly
    for you. Let''s first see what option we have with the preceding script, by issuing
    the following command in a terminal window:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下 WildFly 为您提供的这个食谱中使用的 vault 脚本。让我们首先通过在终端窗口中执行以下命令来查看前一个脚本提供了哪些选项：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now check how we invoked the script:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在检查我们是如何调用脚本的：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: So, we created an attribute named `PASSWORD` using the `-a` (minus `a`) notation,
    we then set its value as `cookbook.2015` using the `-x` (minus `x`) notation.
    Then, we created a vault-block to store the attribute and its value using the
    `-b` (minus `b`) notation. The rest of the parameters are used to bind the keystore
    which encrypts the attribute value, which is our password.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们使用 `-a`（减号 `a`）标记创建了一个名为 `PASSWORD` 的属性，然后使用 `-x`（减号 `x`）标记将其值设置为 `cookbook.2015`。接着，我们使用
    `-b`（减号 `b`）标记创建了一个 vault-block 来存储该属性及其值。其余的参数用于绑定加密属性值的密钥库，这就是我们的密码。
- en: The `vault.sh` script generates for us a helpful output to invoke and reference
    the vault and the vault-block, which maps to our password. Using the information
    that it needs, WildFly is able to automatically extract the password and pass
    it to the component that is requesting it.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`vault.sh` 脚本为我们生成一个有用的输出，用于调用和引用 vault 和 vault-block，它们映射到我们的密码。使用它所需的信息，WildFly
    能够自动提取密码并将其传递给请求它的组件。'
- en: There's more…
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The vault can store more passwords just by providing a different `vault-block`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 只需提供不同的 `vault-block`，vault 就可以存储更多的密码。
- en: 'For example, at the end of the *How to do it…* section of this recipe, we tried
    to bind a datasource (`WrongVaultDS`) using a different `vault-block`; we called
    it `DB-TEST`. As a result, we couldn''t bind that datasource and thus, the whole
    datasource subsystem was in error. Let''s now try to add the same datasource definition,
    but this time, we will also provide the `DB-TEST` vault-block to our vault file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在这个食谱的 *如何做…* 部分的末尾，我们尝试使用不同的 `vault-block` 绑定一个数据源（`WrongVaultDS`）；我们称之为
    `DB-TEST`。结果，我们无法绑定该数据源，因此整个数据源子系统处于错误状态。现在让我们尝试添加相同的数据库定义，但这次，我们还将 `DB-TEST`
    vault-block 提供给我们的 vault 文件：
- en: 'Open a terminal window, and execute the following command:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端窗口，并执行以下命令：
- en: '[PRE26]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now edit the `standalone.xml` file and add the following XML code snippet:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在编辑 `standalone.xml` 文件并添加以下 XML 代码片段：
- en: '[PRE27]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now, start WildFly as usual and look at the log. Run the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，像往常一样启动 WildFly 并查看日志。运行以下命令：
- en: '[PRE28]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It worked! As you can see, you can define and store all passwords that you want
    in a vault as long as you declare a different vault-block.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 成功了！正如你所看到的，只要声明不同的 vault-block，你就可以在 vault 中定义和存储所有你想要的密码。
- en: See also
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a deep understanding of the keytool command, please refer to the Oracle
    official documentation at [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要深入了解 keytool 命令，请参阅 Oracle 官方文档，链接为 [https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html)
