["```java\ndocker run --name redis-instance -p 6379:6379 -d redis\n```", "```java\n<dependency>    <groupId>org.eclipse.jnosql.mapping</groupId>\n    <artifactId>jnosql-mapping-key-value</artifactId>\n    <version>${jnosql.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.eclipse.jnosql.communication</groupId>\n    <artifactId>jnosql-redis-driver</artifactId>\n    <version>${jnosql.version}</version>\n</dependency>\n```", "```java\n@Entitypublic class User {\n    @Id\n    private String userName;\n    private String name;\n    private Set<String> languages;\n    private Set<String> categories;\n  //...\n}\n```", "```java\npublic static void main(String[] args) {    User otavio = User.builder().userName(\"otaviojava\")\n            .name(\"Otavio Santana\")\n            .category(\"Technology\")\n            .category(\"Philosophy\")\n            .category(\"History\")\n            .language(\"English\")\n            .language(\"Portuguese\")\n            .language(\"French\").build();\n    try (SeContainer container =\n      SeContainerInitializer.newInstance().initialize()) {\n        KeyValueTemplate template =\n          container.select(KeyValueTemplate.class).get();\n        User userSaved = template.put(otavio);\n        System.out.println(\"User saved: \" + userSaved);\n        Optional<User> user = template.get(\"otaviojava\",\n          User.class);\n        System.out.println(\"Entity found: \" + user);\n        template.delete(\"otaviojava\");\n    }\n}\n```", "```java\npublic static void main(String[] args) throws  InterruptedException {\n    User poliana = User.builder()\n            .userName(\"poly\")\n            .name(\"Poliana Santana\")\n            .category(\"Philosophy\")\n            .category(\"History\")\n            .language(\"English\")\n            .language(\"Portuguese\")\n            .build();\n    try (SeContainer container = SeContainerInitializer\n      .newInstance().initialize()) {\n        KeyValueTemplate template = container\n          .select(KeyValueTemplate.class).get();\n        template.put(poliana, Duration.ofSeconds(1));\n        System.out.println(\"The key return: \" +\n          template.get(\"poly\", User.class));\n        TimeUnit.SECONDS.sleep(2L);\n        System.out.println(\"Entity after expired: \" +\n          template.get(\"poly\", User.class));\n        template.delete(\"poly\");\n    }\n}\n```", "```java\njnosql.keyvalue.database=developersjnosql.redis.port=6379\njnosql.redis.host=localhost\n```", "```java\ndocker run -d --name cassandra-instance -p 9042:9042 cassandra\n```", "```java\n<dependency>    <groupId>org.eclipse.jnosql.mapping</groupId>\n    <artifactId>jnosql-cassandra-extension</artifactId>\n    <version>${jnosql.version}</version>\n</dependency>\n```", "```java\n<dependency>    <groupId>org.eclipse.jnosql.communication</groupId>\n    <artifactId>jnosql-cassandra-driver</artifactId>\n    <version>${jnosql.version}</version>\n</dependency>\n<dependency>\n    <groupId>org.eclipse.jnosql.mapping</groupId>\n    <artifactId>jnosql-mapping-column</artifactId>\n    <version>${project.version}</version>\n</dependency>\n```", "```java\n@Entity(\"rental\")public class RentalBook {\n    @Id(\"id\")\n    private UUID id;\n    @Column\n    private LocalDate date;\n    @Column\n    @UDT(\"user\")\n    private User user;\n    @Column\n    @UDT(\"book\")\n    private Set<Book> books = new HashSet<>();\n}\n@Entity\npublic class User {\n    @Column\n    private String username;\n    @Column\n    private String name;\n}\n@Entity\npublic class Book {\n    @Column\n    private UUID id;\n    @Column\n    private String title;\n}\n```", "```java\ntry(SeContainer container =  SeContainerInitializer.newInstance().initialize()) {\n        RentalBook otavio = RentalBook.builder()\n                .id(UUID.randomUUID())\n                .date(LocalDate.now())\n                .user(User.of(\"otaviojava\", \"Otavio\n                   Santana\"))\n                .book(Book.of(UUID.randomUUID(), \"Clean\n                   Code\"))\n                .book(Book.of(UUID.randomUUID(), \"Effective\n                   Java\"))\n                .build();\n        RentalBook karina = RentalBook.builder()\n                .id(UUID.randomUUID())\n                .date(LocalDate.now())\n                .user(User.of(\"kvarel4\", \"Karina Varela\"))\n                .book(Book.of(UUID.randomUUID(), \"Clean\n                Arch\"))\n                .build();\n        ColumnTemplate template =  container\n          .select(CassandraTemplate.class).get();\n        template.insert(List.of(otavio, karina),\n          Duration.ofDays(600L));\n        ColumnQuery query = ColumnQuery.select(\"id\",\n          \"date\").from(\"rental\")\n                .where(\"id\").eq(karina.getId()).build();\n        System.out.println(\"Executing query using API: \");\n        template.select(query).forEach(System.out::println);\n        System.out.println(\"Executing query using text: \");\n        template.query(\"select * from rental\")\n          .forEach(System.out::println);\n    }\n```", "```java\njnosql.column.database=libraryjnosql.cassandra.query.1=CREATE KEYSPACE IF NOT EXISTS library WITH replication = {'class': 'SimpleStrategy', 'replication_factor' : 3};\njnosql.cassandra.query.2=CREATE TYPE IF NOT EXISTS library.user (username text, name text);\njnosql.cassandra.query.3=CREATE TYPE IF NOT EXISTS library.book (id uuid, title text );\njnosql.cassandra.query.4=CREATE COLUMNFAMILY IF NOT EXISTS library.rental (id uuid PRIMARY KEY, date text, user user, books frozen<set<book>>);\n```", "```java\ndocker run -d --name mongodb-instance -p 27017:27017 mongo\n```", "```java\n<dependency>    <groupId>org.eclipse.jnosql.mapping</groupId>\n    <artifactId>jnosql-mongodb-extension</artifactId>\n    <version>${jnosql.version}</version>\n</dependency>\n```", "```java\n@Entitypublic class Book {\n    @Id\n    private String id;\n    @Column\n    private String title;\n    @Column\n    private List<String> categories;\n    @Column\n    private Set<String> languages;\n    @Column\n    private Author author;\n }\n @Entity\npublic record Author(@Column(\"nickname\") String nickname,\n  @Column(\"name\") String name, @Column(\"profile\") String\n     profile) {\n    public static AuthorBuilder builder() {\n        return new AuthorBuilder();\n    }\n}\n```", "```java\ntry (SeContainer container =  SeContainerInitializer.newInstance().initialize()) {\n    Author otavio = Author.builder()\n      .nickname(\"otaviojava\").name(\"Otavio Santana\")\n        .profile(\"@otaviojava\").build();\n    Book cassandra = Book.builder()\n            .title(\"Apache Cassandra Horizontal scalability\n              for Java applications\")\n            .category(\"database\").category(\"technology\")\n            .language(\"Portuguese\").language(\"English\")\n            .author(otavio).build();\n    DocumentTemplate template = container\n      .select(DocumentTemplate.class).get();\n    template.insert(cassandra);\n    System.out.println(\"The database found: \" +\n      template.find(Book.class, cassandra.getId()));\n    template.delete(Book.class, cassandra.getId());\n}\n```", "```java\ntry (SeContainer container =  SeContainerInitializer.newInstance().initialize()) {\n    Author neal = Author.builder()\n      .nickname(\"neal\").name(\"Neal Ford\")\n         .profile(\"@neal4d\").build();\n    Book evolutionary = Book.builder()\n            .title(\"Building Evolutionary Architectures:\n              Support Constant Change\")\n            .category(\"architecture\")\n            .category(\"technology\")\n            .language(\"Portuguese\").language(\"English\")\n            .author(neal).build();\n//...\n    DocumentTemplate template = container\n      .select(DocumentTemplate.class).get();\n    template.insert(evolutionary);\n    DocumentQuery query = DocumentQuery\n       .select().from(\"Book\")\n                    .where(\"author.nickname\").eq(\"neal\")\n                    .orderBy(\"title\").asc().build();\n    System.out.println(\"The query by API\");\n    template.select(query).forEach(System.out::println);\n}\n```", "```java\njnosql.document.database=libraryjnosql.mongodb.host=localhost:27017\n```", "```java\ndocker run --publish=7474:7474 --publish=7687:7687 --env NEO4J_AUTH=neo4j/admin neo4j\n```", "```java\n@Entitypublic class Book {\n    @Id\n    private Long id;\n    @Column\n    private String name;\n}\n@Entity\npublic class Person {\n    @Id\n    private Long id;\n    @Column\n    private String name;\n    @Column\n    private String profile;\n}\n@Entity\npublic class Category {\n    @Id\n    private Long id;\n    @Column\n    private String name;\n}\n```", "```java\n@ApplicationScopedclass LibraryGraph {\n    @Inject\n    private GraphTemplate template;\n    public Book save(Book book) {\n        Objects.requireNonNull(book, \"book is required\");\n        return template.getTraversalVertex()\n          .hasLabel(Book.class)\n                .has(\"name\", book.getName())\n                .<Book>next()\n                .orElseGet(() -> template.insert(book));\n    }\n    public Category save(Category category) {\n        Objects.requireNonNull(category, \"category is\n          required\");\n        return template.getTraversalVertex()\n          .hasLabel(Category.class)\n                .has(\"name\", category.getName())\n                .<Category>next()\n                .orElseGet(() ->\n                   template.insert(category));\n    }\n//...\n}\n```", "```java\ntry (SeContainer container =  SeContainerInitializer.newInstance().initialize()) {\n    LibraryGraph graph = container\n      .select(LibraryGraph.class).get();\n    Category software = graph\n      .save(Category.of(\"Software\"));\n    Category java = graph.save(Category.of(\"Java\"));\n    Person joshua = graph.save(Person.of(\"Joshua Bloch\",\n      \"@joshbloch\"));\n    graph.is(java, software);\n    graph.write(joshua, effectiveJava);\n     List<String> softwareCategories =\n       graph.getSubCategories();\n    List<String> softwareBooks = graph.getSoftwareBooks();\n    List<String> softwareNoSQLBooks =\n      graph.getSoftwareNoSQL();\n    Set<Category> categories = graph.getCategories(otavio);\n    Set<String> suggestions = graph.getFollow(otavio);\n   }\n```"]