- en: Chapter 9. Deploying Your Web Application to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章。将您的 Web 应用程序部署到云端
- en: In this chapter, we'll take a tour of the different cloud providers, understand
    the challenges and benefits of a distributed architecture, and see how to deploy
    your web application to Pivotal Web Services and to Heroku.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将游览不同的云服务提供商，了解分布式架构的挑战和优势，并了解如何将您的 Web 应用程序部署到 Pivotal Web 服务和 Heroku。
- en: Choosing your host
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择您的托管服务
- en: There are many forms of cloud hosting. For developers, the choice will be mainly
    between a Platform as a Service (PaaS) and an Infrastructure as a Service (IaaS).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 云托管有多种形式。对于开发者来说，选择将主要在平台即服务（PaaS）和基础设施即服务（IaaS）之间。
- en: Using the latest, you will often have a bare metal machine that you can manage
    and on which you can install all the services required by your application.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最新版本，您通常会有一个裸机，您可以对其进行管理，并在其上安装应用程序所需的所有服务。
- en: If we leave aside technologies such as Docker (which is absolutely amazing,
    you should absolutely give it a try), this is really similar to traditional hosting
    where your operation team will have to set up and maintain an environment in which
    the application can run.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们排除 Docker 等技术（它绝对令人惊叹，您绝对应该尝试一下），这实际上与传统托管非常相似，您的运维团队将不得不设置和维护一个应用程序可以运行的环境。
- en: On the other hand, PaaS makes it easy to deploy your application as you develop
    it with a simple push-to-deploy workflow.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，PaaS 使得在开发过程中通过简单的推送部署工作流程轻松部署您的应用程序。
- en: 'The most well known providers are:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最知名的服务提供商是：
- en: Cloud Foundry backed by Pivotal
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 Pivotal 支持的 Cloud Foundry
- en: OpenShift by Red Hat
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Red Hat 的 OpenShift
- en: Heroku acquired by Salesforce in 2010
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salesforce 在 2010 年收购了 Heroku
- en: Each of these three providers come with different pros and cons. I will try
    to give you an overview of these.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个提供商中的每一个都有不同的优缺点。我将尝试为您概述这些。
- en: Cloud Foundry
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cloud Foundry
- en: Backed by Pivotal, the company behind Spring, Pivotal Web Service runs on Cloud
    Foundry, an open source PaaS maintained by a foundation, and comes with an interesting
    package.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 由 Spring 背后的 Pivotal 支持的 Pivotal Web 服务在 Cloud Foundry 上运行，这是一个由基金会维护的开源 PaaS，并附带一个有趣的套餐。
- en: They offer a 60 day free trial and their pricing is a function of the memory
    allocated for your instances and the number of instances you own.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 他们提供 60 天的免费试用，并且他们的定价是您实例分配的内存和您拥有的实例数量的函数。
- en: Their prices range from $2.70 per month for the smallest (128 Mb) instance to
    $43.20 per month for the 2 GB instance.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的价格从每月 2.70 美元的最小（128 Mb）实例到每月 43.20 美元的 2 GB 实例不等。
- en: If you want to give it a try, no credit card is required for the free trial.
    They have a market place to easily install services, such as Redis or Postgre
    SQL, with rather limited free options. They have a good command-line utility to
    manage your application from your console. You can either use buildpacks or push
    a JAR directly for deployment.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想尝试一下，免费试用不需要信用卡。他们有一个市场，可以轻松安装服务，如 Redis 或 PostgreSQL，但免费选项相当有限。他们有一个很好的命令行实用程序，可以从您的控制台管理应用程序。您可以使用构建包或直接推送
    JAR 进行部署。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Build packs will try to guess the stack that you are using and build your application
    in the most standard way (`mvn package` for Maven, `./gradlew stage` for Gradle,
    and so on).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 构建包将尝试猜测您正在使用的堆栈，并以最标准的方式构建您的应用程序（例如，对于 Maven 使用 `mvn package`，对于 Gradle 使用
    `./gradlew stage` 等）。
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Refer to the tutorial available at the following URL to deploy your application
    to Cloud Foundry:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下 URL 上的教程，以将您的应用程序部署到 Cloud Foundry：
- en: '[http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html](http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html](http://docs.cloudfoundry.org/buildpacks/java/gsg-spring.html)'
- en: OpenShift
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: OpenShift
- en: '**OpenShift** is maintained by Red Hat and powered by OpenShift Origin, an
    open source facility running Docker containers on top of Google''s Kubernetes.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenShift** 由 Red Hat 维护，并由 OpenShift Origin 驱动，这是一个开源设施，在 Google 的 Kubernetes
    上运行 Docker 容器。'
- en: It is priced well and offers a lot of freedom, as it is both a PaaS and an IaaS.
    Its pricing is based on gears, containers running an application, or a service
    such as Jenkins, or a database.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 它的价格合理，提供了很多自由度，因为它既是 PaaS 也是 IaaS。其定价基于齿轮，即运行应用程序的容器，或像 Jenkins 这样的服务，或数据库。
- en: OpenShift has a free plan offering three small gears. Your application must
    be idle for 24 hours per month unless you enter your billing information.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: OpenShift 提供一个免费计划，提供三个小型齿轮。除非您输入您的账单信息，否则您的应用程序每月必须空闲 24 小时。
- en: Additional or bigger gears are billed at approximately $15 a month for the smallest,
    and $72 for the biggest.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 额外或更大的齿轮按每月约 $15（最小）和 $72（最大）计费。
- en: To deploy a Spring Boot application on OpenShift, you will have to use the Do
    It Yourself cartridge. It is a bit more work than other buildpack-based PaaS but
    it is also easier to configure.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 OpenShift 上部署 Spring Boot 应用程序，你必须使用 DIY 卡带。它比其他基于构建包的 PaaS 工作量稍大，但配置起来也更简单。
- en: Take a look at the blog post for a Spring Boot tutorial with OpenShift, which
    is available at [http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html](http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html).
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看有关 OpenShift 上 Spring Boot 教程的博客文章，该文章可在 [http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html](http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html)
    找到。
- en: Heroku
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku
- en: Heroku is a well known PaaS with extensive documentation and a code-centric
    approach based on build packs. It can connect to a lot of services called add-ons,
    but using them requires your billing information.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 是一个广为人知的 PaaS，拥有丰富的文档和基于构建包的以代码为中心的方法。它可以连接到许多称为附加组件的服务，但使用它们需要你的账单信息。
- en: It is really interesting for a free project and is very fast to get started
    with. The downside is that it directly costs more than $25 per month if you want
    to scale up. Free instances will go into the sleep mode after 30 minutes of inactivity,
    which means free Heroku apps will always take as much as 30 seconds to load.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于免费项目来说，这真的很吸引人，并且启动非常快。缺点是，如果你想要扩展，直接成本将超过每月 $25。免费实例在 30 分钟无活动后将进入睡眠模式，这意味着免费的
    Heroku 应用程序始终需要 30 秒来加载。
- en: Heroku has a great administration dashboard and command-line tools. For this
    chapter, I chose Heroku because it is very straightforward. The concepts you will
    grasp here are applicable to most PaaS.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 拥有出色的管理仪表板和命令行工具。对于本章，我选择了 Heroku，因为它非常直观。在这里你将掌握的概念适用于大多数 PaaS。
- en: You can follow most of the chapter and deploy your application without providing
    your credit card information as long as you do not use the Redis add-on. You won't
    be charged if you select the free plan.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 只要你不使用 Redis 附加组件，你就可以遵循本章的大部分内容并部署你的应用程序，而无需提供信用卡信息。如果你选择免费计划，你将不会收费。
- en: Deploying your web application to Pivotal Web Services
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的 Web 应用程序部署到 Pivotal Web Services
- en: Follow this section if you want to deploy your application to Pivotal Web Services
    (PWS).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将你的应用程序部署到 Pivotal Web Services（PWS），请遵循本节。
- en: Installing the Cloud Foundry CLI tools
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Cloud Foundry CLI 工具
- en: The first thing we need to do to create a Cloud Foundry application is to set
    up an account on PWS. This is documented at [http://docs.run.pivotal.io/starting/](http://docs.run.pivotal.io/starting/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建 Cloud Foundry 应用程序的第一件事是在 PWS 上设置一个账户。这已在 [http://docs.run.pivotal.io/starting/](http://docs.run.pivotal.io/starting/)
    中记录。
- en: 'You will be asked to create an organization and each new organization will
    have a default space (development) created within the organization. As shown in
    the following screenshot:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你将被要求创建一个组织，并且每个新的组织将在组织内创建一个默认空间（开发）。如下截图所示：
- en: '![Installing the Cloud Foundry CLI tools](img/2117_09_04.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Cloud Foundry CLI 工具](img/2117_09_04.jpg)'
- en: 'On the left-hand side navigation bar, you will see a link to **Tools** from
    which you download the CLI. It is also available from the developer console. Select
    the appropriate package for your operating system:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧导航栏中，你会看到一个链接到 **工具**，你可以从这里下载 CLI。它也可以从开发者控制台获取。选择适合你操作系统的适当包：
- en: '![Installing the Cloud Foundry CLI tools](img/2117_09_05.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![安装 Cloud Foundry CLI 工具](img/2117_09_05.jpg)'
- en: Assembling the application
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组装应用程序
- en: Our application simply needs to be assembled for deployment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序只需组装即可部署。
- en: The good thing with PWS is that you don't have to push your sources to deploy.
    You can generate the JAR, push it, and everything will be autodetected.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: PWS 的好处是，你不需要推送你的源代码来部署。你可以生成 JAR，推送它，一切都会自动检测。
- en: 'We can package this for deployment with the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令对此进行打包以进行部署：
- en: '[PRE0]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will create a jar file in the `build/libs` directory. At this point, you
    can execute the following command. The following command targets your deployment
    to your space within PWS (`run.pivotal.io`):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 `build/libs` 目录中创建一个 jar 文件。此时，你可以执行以下命令。以下命令将你的部署目标指向 PWS（`run.pivotal.io`）内的空间：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once you have successfully logged in, you can push your jar with the following
    command. You will need to come up with an available name:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你成功登录，你可以使用以下命令推送你的jar文件。你需要想出一个可用的名字：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: There is a lot that the platform is performing on your behalf. It provisions
    a container and detects which buildpack is needed, in this case, Java.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 平台代表你做了很多事情。它为你配置一个容器并检测所需的构建包，在这种情况下，是Java。
- en: It then installs the required JDK and uploads the application we pointed it
    to. It creates a route to the application, which it reports to us, and then launches
    the application for us.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 它随后安装所需的JDK并上传我们指向的应用程序。它为应用程序创建一个路由，并向我们报告，然后为我们启动应用程序。
- en: 'Now you can view the application on the developer console:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在开发控制台中查看应用程序：
- en: '![Assembling the application](img/2117_09_06.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![组装应用程序](img/2117_09_06.jpg)'
- en: 'On selecting the highlighted route, the application will be available for use.
    Visit [http://msmvc4.cfapps.io](http://msmvc4.cfapps.io), then you will see the
    following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择高亮的路由后，应用程序将可供使用。访问[http://msmvc4.cfapps.io](http://msmvc4.cfapps.io)，然后你会看到以下截图：
- en: '![Assembling the application](img/2117_09_01.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![组装应用程序](img/2117_09_01.jpg)'
- en: Bravo!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！
- en: The only thing that will not work yet is the file upload. However, we will fix
    that in a minute.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一不能工作的是文件上传。然而，我们将在一分钟内解决这个问题。
- en: Activating Redis
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活Redis
- en: In your application services, you can choose between many services. One of them
    is Redis Cloud, which has a free plan with 30 MB of storage. Go ahead and select
    this plan.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的应用程序服务中，你可以选择许多服务之一。其中之一是Redis Cloud，它有一个包含30MB存储空间的免费计划。请选择这个计划。
- en: 'In the form, choose whatever name you fancy and bind the service to your application.
    By default, Cloud Foundry will inject some properties in relation to the service
    in your environment:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在表单中，选择你喜欢的任何名字并将服务绑定到你的应用程序上。默认情况下，Cloud Foundry将在你的环境中注入一些与该服务相关的属性：
- en: '`cloud.services.redis.connection.host`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.host`'
- en: '`cloud.services.redis.connection.port`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.port`'
- en: '`cloud.services.redis.connection.password`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.password`'
- en: '`cloud.services.redis.connection.uri`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cloud.services.redis.connection.uri`'
- en: These properties will always follow the same convention, so it will be easy
    to keep track of your services as you add more.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性将始终遵循相同的约定，因此当你添加更多服务时，跟踪你的服务将会很容易。
- en: By default, Cloud Foundry launches Spring applications and activates the Cloud
    profile.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Cloud Foundry启动Spring应用程序并激活Cloud配置文件。
- en: 'We can take advantage of this and create an `application-cloud.properties`
    file in `src/main/resources`, which will be used when our application is running
    on PWS:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以利用这一点，在`src/main/resources`中创建一个`application-cloud.properties`文件，当我们的应用程序在PWS上运行时将使用此文件：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This will bind our Redis instance to our application and activate two additional
    profiles: `prod` and `redis`.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把我们的Redis实例绑定到我们的应用程序上，并激活两个额外的配置文件：`prod`和`redis`。
- en: 'We also changed the path where the uploaded pictures will land. Note that using
    the file system on the cloud obeys different rules. Refer to the following link
    for more details:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更改了上传图片将到达的路径。请注意，在云上使用文件系统遵循不同的规则。有关更多详细信息，请参阅以下链接：
- en: '[http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem](http://docs.run.pivotal.io/devguide/deploy-apps/prepare-to-deploy.html#filesystem)'
- en: 'The last thing we need to do is deactivate one Spring Session feature that
    will not be available on our hosted instance:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后需要做的就是禁用Spring Session的一个功能，该功能在我们的托管实例上不可用：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请访问[http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent)。
- en: You will see that this configuration will also be applied on Heroku.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到这个配置也将应用于Heroku。
- en: That's it. You can reassemble your web application and push it again. Now, your
    sessions and application cache will be stored on Redis!
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你可以重新组装你的Web应用程序并再次推送。现在，你的会话和应用程序缓存将存储在Redis上！
- en: You may want to explore the marketplace for other available features such as
    binding to data or messaging services, scaling the application, and managing the
    health of the applications that are beyond the scope of this introduction.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能想探索市场中的其他可用功能，例如绑定到数据或消息服务、扩展应用程序以及管理超出本介绍范围的应用程序的健康状况。
- en: Have fun and enjoy the productivity the platform provides!
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 享受乐趣并享受平台提供的生产力！
- en: Deploying your web application on Heroku
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Heroku上部署您的Web应用程序
- en: In this section, we will deploy your application on Heroku for free. We will
    even use the free Redis instance available to store our session and cache.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将免费将您的应用程序部署到Heroku。我们甚至将使用免费的Redis实例来存储我们的会话和缓存。
- en: Installing the tools
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装工具
- en: The first thing we need to do to create a Heroku application is to download
    the command-line tools available at [https://toolbelt.heroku.com](https://toolbelt.heroku.com).
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建Heroku应用程序的第一步是下载位于[https://toolbelt.heroku.com](https://toolbelt.heroku.com)的命令行工具。
- en: 'On Mac, you can also install it with `brew` command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，您也可以使用`brew`命令安装它：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create an account on Heroku and use `heroku login` to link the toolbelt to
    your account:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Heroku上创建一个账户，并使用`heroku login`将工具包链接到您的账户：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, go to your application root and type `heroku create appName --region
    eu`. Replace `appName` with a name of your choice. If you don''t provide a name,
    it will be generated automatically:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，转到您的应用程序根目录，并输入`heroku create appName --region eu`。将`appName`替换为您选择的名称。如果您不提供名称，它将自动生成：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If you have already created an application with the UI, then go to your application
    root and simply add the remote `heroku git:remote -a yourapp`.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经创建了一个带有UI的应用程序，请转到您的应用程序根目录，并简单地添加远程`heroku git:remote -a yourapp`。
- en: What these commands do is add a Git remote called `heroku` to our Git repository.
    The process of deploying on Heroku is just pushing one of your branches to Heroku.
    The Git hooks installed on the remote will take care of the rest.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令的作用是为我们的Git仓库添加一个名为`heroku`的Git远程。在Heroku上部署的过程只是将您的其中一个分支推送到Heroku。远程安装的Git钩子将处理其余部分。
- en: 'If you type `git remote -v` command, you should see the `heroku` version:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您输入`git remote -v`命令，您应该看到`heroku`版本：
- en: '[PRE8]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Setting up the application
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置应用程序
- en: 'We need two ingredients to run a Gradle application with Heroku: a task in
    our build file called `stage` and a tiny file that contains the command used to
    run our application, called `ProcFile`.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Gradle应用程序与Heroku需要两个要素：一个名为`stage`的构建文件中的任务，以及一个包含运行我们应用程序的命令的微小文件，称为`ProcFile`。
- en: Gradle
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gradle
- en: The Gradle build pack will automatically try to run the `./gradlew stage` command
    on the root of your application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Gradle构建包将自动尝试在您的应用程序根目录运行`./gradlew stage`命令。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can get more information on the Gradle build pack at [https://github.com/heroku/heroku-buildpack-gradle](https://github.com/heroku/heroku-buildpack-gradle).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/heroku/heroku-buildpack-gradle](https://github.com/heroku/heroku-buildpack-gradle)上获取有关Gradle构建包的更多信息。
- en: 'We do not have a "stage" task yet. Add the following code to your `build.gradle`
    file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有“stage”任务。将以下代码添加到您的`build.gradle`文件中：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This will define a task called `stage`, which will copy the jar generated by
    Spring Boot at the root of the application and call it `app.jar`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定义一个名为`stage`的任务，该任务将复制Spring Boot在应用程序根目录生成的jar文件，并将其命名为`app.jar`。
- en: The jar be much easier to find this way. The `stage` task depends on the `clean`
    task and the `build` task, which means that both of them will be executed before
    the stage task starts.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这样找罐子会容易得多。`stage`任务依赖于`clean`任务和`build`任务，这意味着这两个任务都会在`stage`任务开始之前执行。
- en: By default, Gradle will try to optimize the task dependency graph. So, we must
    provide a hint and force the `clean` task to be run before `stage`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Gradle会尝试优化任务依赖图。因此，我们必须提供提示并强制`clean`任务在`stage`之前运行。
- en: Finally, we add a new instruction to the already existing `clean` task, which
    is to delete the generated `app.jar` file.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在已存在的`clean`任务中添加一个新的指令，即删除生成的`app.jar`文件。
- en: Now, if you run `./gradlew stage`, it should run the tests and put the packaged
    app at the root of the project.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您运行`./gradlew stage`，它应该会运行测试并将打包的应用程序放在项目的根目录下。
- en: Procfile
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Procfile
- en: When Heroku detects a Gradle application, it will automatically run a container
    with Java 8 installed. So, we have very little configuration to take care of.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当Heroku检测到Gradle应用程序时，它将自动运行一个安装了Java 8的容器。因此，我们几乎没有配置要处理。
- en: 'We will need a file containing the shell command used to run our application.
    Create a file named `Procfile` at the root of your application:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个包含运行我们应用程序所使用的 shell 命令的文件。在你的应用程序根目录下创建一个名为 `Procfile` 的文件：
- en: '[PRE10]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There are several things to note here. First, we declare our application as
    a web application. We also redefine the port on which our application will run
    using an environment variable. This is very important as your app will cohabit
    with many others and only one port will be allocated to each one.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个需要注意的事项。首先，我们将我们的应用程序声明为一个网络应用程序。我们还使用环境变量重新定义了应用程序将运行的端口。这非常重要，因为你的应用程序将与许多其他应用程序共存，并且每个应用程序只分配一个端口。
- en: Finally, you can see that our application will run using two profiles. The first
    is the `prod` profile, which we created in the previous chapter, to optimize the
    performance, and a new `heroku` profile that we will create in a moment.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以看到我们的应用程序将使用两个配置文件运行。第一个是我们在上一章中创建的 `prod` 配置文件，用于优化性能，以及我们即将创建的新 `heroku`
    配置文件。
- en: A Heroku profile
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个 Heroku 配置文件
- en: 'We do not want to put sensible information, such as our Twitter app keys, into
    source control. So, we have to create some properties that will read those from
    the application environment:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想将敏感信息，例如我们的 Twitter 应用密钥，放入源代码控制。因此，我们必须创建一些属性，这些属性将从应用程序环境中读取：
- en: '[PRE11]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'For this to work, you have to configure the two environment variables, which
    we discussed earlier, on Heroku. You can do this with the toolbelt:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这生效，你必须在 Heroku 上配置我们之前讨论的两个环境变量。你可以使用工具带完成此操作：
- en: '[PRE12]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Alternatively, you can go to your dashboard and configure the environment in
    the settings tab:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以转到你的仪表板，并在设置选项卡中配置环境：
- en: '![A Heroku profile](img/2117_09_02.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![一个 Heroku 配置文件](img/2117_09_02.jpg)'
- en: Note
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Visit [https://devcenter.heroku.com/articles/config-vars](https://devcenter.heroku.com/articles/config-vars)
    for more information.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://devcenter.heroku.com/articles/config-vars](https://devcenter.heroku.com/articles/config-vars)
    获取更多信息。
- en: Running your application
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的应用程序
- en: It is now time to run our application on Heroku!
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候在 Heroku 上运行我们的应用程序了！
- en: 'If you haven''t already done so, commit all your changes to your master branch.
    Now, simply push your master branch to the `heroku` remote with `git push heroku
    master`. This will download all the dependencies and build your application from
    scratch, so it can take a little time:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请将所有更改提交到你的 master 分支。现在，只需使用 `git push heroku master` 将你的 master
    分支推送到 `heroku` 远程。这将下载所有依赖项并从头开始构建你的应用程序，所以这可能需要一点时间：
- en: '[PRE13]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Once the application has been built, it will automatically run. Type `heroku
    logs` to see the latest logs or `heroku logs -t` to tail them.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序构建完成，它将自动运行。输入 `heroku logs` 查看最新日志或 `heroku logs -t` 来跟踪它们。
- en: 'You can see your application running in the console and if all goes as planned,
    you will be able to connect to [http://yourapp.herokuapp.com](http://yourapp.herokuapp.com).
    As shown in the following screenshot:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在控制台中看到你的应用程序正在运行，如果一切按计划进行，你将能够连接到 [http://yourapp.herokuapp.com](http://yourapp.herokuapp.com)。如下截图所示：
- en: '![Running your application](img/2117_09_03.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![运行你的应用程序](img/2117_09_03.jpg)'
- en: We are live! It's time to tell your friends!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经上线了！是时候告诉你的朋友了！
- en: Activating Redis
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活 Redis
- en: To activate Redis in our application, we can choose between a few alternatives.
    The Heroku Redis add-on is the beta version. It is entirely free with 20 MB of
    storage, analytics, and logs.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的应用程序中激活 Redis，我们可以选择几种替代方案。Heroku Redis 扩展是测试版。它完全免费，提供 20 MB 的存储、分析和日志。
- en: Note
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Visit [https://elements.heroku.com/addons/heroku-redis](https://elements.heroku.com/addons/heroku-redis)
    for more details.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 [https://elements.heroku.com/addons/heroku-redis](https://elements.heroku.com/addons/heroku-redis)
    获取更多详情。
- en: At this stage, you will have to provide your credit card details to proceed.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你必须提供你的信用卡详细信息才能继续。
- en: 'To install the Redis add-on for your application, type the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要为你的应用程序安装 Redis 扩展，请输入以下命令：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, that we have activated the add-on, an environment variable called `REDIS_URL`
    will be available when our application will be running on Heroku.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经激活了扩展，当我们的应用程序在 Heroku 上运行时，将有一个名为 `REDIS_URL` 的环境变量可用。
- en: 'You can check that the variable is defined with the `heroku config` command:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `heroku config` 命令检查变量是否已定义：
- en: '[PRE15]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Since the `RedisConnectionFactory` class does not understand URIs, we need
    to tweak it a little bit:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `RedisConnectionFactory` 类不理解 URI，我们需要对其进行一点调整：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We now have two Heroku-specific beans in the `RedisConfig` class. These beans
    will only be active if both the `redis` and `heroku` profiles are active.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在`RedisConfig`类中有两个针对Heroku特定的bean。这些bean只有在`redis`和`heroku`配置文件都激活的情况下才会生效。
- en: Note that we also deactivated some Spring Session configuration.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还禁用了某些Spring Session配置。
- en: Spring Session will normally listen to events associated to destroyed session
    keys via the Redis Pub/Sub interface.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Session通常会通过Redis Pub/Sub接口监听与销毁会话密钥相关的事件。
- en: It will automatically try to configure the Redis environment to activate listeners
    on startup. In a secured environment like ours, adding listeners is not permitted
    unless you have an admin access.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它将自动尝试在启动时配置Redis环境以激活监听器。在我们的这种安全环境中，除非你有管理员权限，否则不允许添加监听器。
- en: These redis listeners are not really important in our case, so we can safely
    disable this behavior. For more information, visit [http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，这些redis监听器并不重要，因此我们可以安全地禁用此行为。更多信息，请访问[http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent](http://docs.spring.io/spring-session/docs/current/reference/html5/#api-redisoperationssessionrepository-sessiondestroyedevent)。
- en: 'We need to modify our `Procfile` file so that Heroku runs our application with
    the `redis` profile:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改我们的`Procfile`文件，以便Heroku使用`redis`配置文件运行我们的应用程序：
- en: '[PRE17]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Commit your change and push the code to Heroku.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 提交你的更改并将代码推送到Heroku。
- en: Improving your application
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提高你的应用程序
- en: We have a pretty good application deployed online but it's not uber useful nor
    original until you make it so.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在线部署了一个相当不错的应用程序，但除非你让它变得如此，否则它既不实用也不原创。
- en: Try to make it better and more personal. Once you're proud of your achievement,
    tweet your application URL with the `#masterspringmvc` hashtag on Twitter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 努力让它变得更好、更个性化。一旦你为你的成就感到自豪，就在Twitter上使用`#masterspringmvc`标签分享你的应用程序URL。
- en: 'Try to push the best application possible. There is so much that we didn''t
    do. Here are some ideas:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 努力推送最好的应用程序。我们还有很多事情没有做。以下是一些想法：
- en: Delete users' old pictures to avoid keeping unused pictures
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除用户的旧照片以避免保留未使用的照片
- en: Use Twitter authentication information to fill the user profile
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Twitter认证信息填写用户资料
- en: Interact with the user's account
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与用户的账户互动
- en: See real-time searches happening on your app with a web socket channel
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过WebSocket通道查看你应用上的实时搜索
- en: Let your imagination fly!
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的想象力飞扬！
- en: My version of the application is deployed on [http://masterspringmvc.herokuapp.com](http://masterspringmvc.herokuapp.com).
    I will improve some details to make the application a little more reactive. Try
    to spot the differences!
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我的版本的应用程序部署在[http://masterspringmvc.herokuapp.com](http://masterspringmvc.herokuapp.com)。我将改进一些细节，使应用程序变得更加响应式。试着找出差异！
- en: Summary
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Deploying our application on a cloud provider is really straightforward as it
    is a runnable jar, thanks to Spring Boot. Cloud deployment is very affordable
    nowadays and deploying a Java application has become almost too easy.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Spring Boot，将我们的应用程序部署到云服务提供商上非常简单，因为它是一个可运行的jar文件。如今，云部署非常经济实惠，部署Java应用程序几乎变得太容易。
- en: With sessions backed by Redis, we laid the basics of a scalable application.
    Indeed, we can effortlessly add multiple servers behind a load balancer and absorb
    high traffic on demand.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Redis支持的会话，我们为可扩展的应用程序奠定了基础。确实，我们可以轻松地添加多个服务器在负载均衡器后面，并按需吸收高流量。
- en: The only thing that is not scalable is our WebSocket that will need additional
    work to run on top of a message broker, such as Rabbit MQ.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一不可扩展的是我们的WebSocket，它需要在消息代理（如Rabbit MQ）上运行，需要进行额外的工作。
- en: I can certainly remember a time where finding a host running a Tomcat was rare
    and pricey. Those days are long gone and the future belongs to web developers,
    so make it happen!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实记得一个时期，找到运行Tomcat的主机既罕见又昂贵。那些日子已经一去不复返了，未来属于网络开发者，所以让它发生吧！
- en: In the next chapter, we will see what we can do to make our application even
    better, discuss the technologies we haven't covered, talk about the Spring ecosystem
    in general, and the challenges of modern web applications.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到我们可以做什么来使我们的应用程序变得更好，讨论我们没有涉及的技术，一般性地讨论Spring生态系统，以及现代Web应用程序的挑战。
