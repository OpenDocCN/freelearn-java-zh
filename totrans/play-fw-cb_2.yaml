- en: Chapter 2. Using Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTP headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using HTTP cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the session
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using custom actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using path binders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Receiving JSON
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using futures and Akka actors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will dive in a little deeper into Play controllers and discuss
    some advanced topics regarding controllers in web applications. We will also learn
    how Play can handle and address more modern web app requirements besides the common
    use cases such as data manipulation and data retrieval. As we rely on controllers
    to route web requests and responses, we want to ensure that our controllers are
    as lightweight and as decoupled as possible, to ensure page responsiveness and
    predictable page load times. Providing a clean separation from the model and other
    data-related processing and services also provides developers a clearer understanding
    of what each layer's responsibilities are.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTP headers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications can manipulate HTTP headers.
    We will use the `curl` tool to validate if our changes to the HTTP response headers
    were applied correctly. For Windows users, it is recommended to install Cygwin
    in order to have a unix-like environment for Windows machines ([https://www.cygwin.com/](https://www.cygwin.com/)).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new `routes` entry for the newly-added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new `routes` entry for the newly-added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new `routes` and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new URL route and action. Within the action, we
    added a new HTTP header and assigned an arbitrary value to it. We then accessed
    this new action using the command-line tool, `curl` so that we can view the response
    HTTP headers in raw text. The output should contain our custom header key and
    its assigned arbitrary value.
  prefs: []
  type: TYPE_NORMAL
- en: Using HTTP cookies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications can manipulate HTTP cookies.
    We will use the `curl` tool to validate our changes to the HTTP response headers
    containing the new cookie we added to the response.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_java/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route entry for the newly-added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly-added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Request our new route and examine the response headers to confirm our modifications
    to the HTTP response header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created a new URL route and action. Within the action, we
    added a new cookie named `source` and assigned it an arbitrary value "`tw`" and
    an optional expiration time (in this recipe, an hour):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We then accessed this new action using the command-line tool `curl` so that
    we can view the response HTTP headers in raw text. The output should contain the
    `Set-Cookie` header with the cookie name and value we assigned in the action.
  prefs: []
  type: TYPE_NORMAL
- en: Using the session
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications handle a session state.
    This sounds counterintuitive, as Play claims to be a stateless and lightweight
    web framework. However, as sessions and session states have become major components
    for web applications, Play implements sessions as cookies and therefore, are actually
    stored on the client side or the user browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_java/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly-added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/RN4C8LXY.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Access this new URL route (`http://localhost:9000/session_example`) using a
    web browser. You should see the text **Setting session var: user_pref**:![](img/gYiaaaWd.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access this new URL route again using the same web browser and you see the
    text **Found userPref: tw**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our new session variable is assigned using `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly-added `Action` in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access this new URL route (`http://localhost:9000/session_example`) using a
    web browser and you should see the text **Setting session var: user_pref**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access this new URL route again using the same web browser and you see the
    text **Found userPref: tw**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can also see how our new session variable is assigned using `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new URL route and action. Within the action, we
    added some logic to understand whether the session var "`user_pref`" already existed
    in the session or not. If the session variable was indeed set, we print out the
    value of the session variable in the response body. If the session variable was
    not found in the current session, it would add the session variable to the session
    and display text, notifying the requestor that it did not find the session variable.
    We validated this by using a web browser and requesting the same URL route twice;
    first, to set the session variable and second, to print the value of the session
    variable. We also used `curl` to see how the session variable was set to the current
    session as an HTTP cookie header.
  prefs: []
  type: TYPE_NORMAL
- en: Using custom actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play Framework provides the building blocks
    for creating reusable, custom actions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add our new action class to `foo_java/app/controllers/AuthAction.java` as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the dashboard URL route using a web browser and notice that it redirects
    you to the login URL route. You will also notice a log entry in our console where
    the request is about to be redirected to the login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add our new action to `foo_scala/app/controllers/Application.scala` as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the dashboard URL route using a web browser and notice that it redirects
    you to the login URL route. You will also notice a log entry in our console where
    the request is about to be redirected to the login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we created two new URL routes and actions; one to display a
    user dashboard, and the other, to act as our login page. Within the dashboard
    action, we utilized our new action `AuthAction`. The `AuthAction` object checks
    for the existence of the `auth` cookie and if it does find the said cookie in
    the request, it calls the `ActionBuilder` in the chain:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'If the `auth` cookie is not found in the request, `AuthAction` redirects the
    current request to the `login` URL route, wrapping it around a completed `Future[Result]`
    object with `Future.successful()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Using filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play Framework provide APIs for HTTP request
    and response filters. HTTP filters provide a way to transparently decorate a HTTP
    request or response and is useful for lower-level services (such as response compression),
    gathering metrics, and more in-depth logging.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also worth noting that presently (as of Play 2.3.7), HTTP filters are
    best implemented using the Play Scala API with the *play.api.mvc.EssentialFilter*
    trait. So for this recipe, we will implement a Scala-based filter for our Java
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new filter object by creating the file `foo_java/app/ResponseTimeLogFilter.scala`,
    and adding the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Utilize this new filter by declaring it in the `app/Global.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access any previous URL routes we''ve defined (`http://localhost:9000/session_example`)
    using a web browser. You will be able to see a new log entry with our response
    stats printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new filter object by creating the file `foo_scala/app/controllers/ResponseTimeLogFilter.scala`
    and adding the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Utilize this new filter by declaring it in the `app/Global.scala` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access any previous URL routes we''ve defined (`http://localhost:9000/session_example`)
    using a web browser. You will be able to see a new log entry with our response
    stats printed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a new Scala-based filter. The filter simply calculates
    the total response time for request and prints it out in the log file. We then
    utilized the filter by referring to it in the global application configuration
    class `Global.java/Global.scala`. This will be applied to all requests of the
    Play application.
  prefs: []
  type: TYPE_NORMAL
- en: Using path binders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play applications allow us to use custom
    binders for path parameters. These come in handy when you want to simplify your
    declaration of routes and corresponding actions by dealing with model classes
    in the routes file and a method signature of actions instead of individual properties
    and fields declared as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new products controller as `foo_java/app/controllers/Products.scala`.
    Once created, add a product case class and companion object, the product form
    object, and two routes (the first to display our selected product in a form and
    the second as the PUT action for form update submission):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add our new product model in `foo_java/app/models/Product.java` as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the product form view template in `foo_java/app/views/products/form.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access our edited products URL route (`http://localhost:9000/products/ABC`).
    You should be able to view the edit form for our first product. Access our next
    edit products URL route (`http://localhost:9000/products/DEF`) and you should
    see the relevant product details loading in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the URL `http://localhost:9000/products/XYZ` and see how Play automatically
    generates the error message with the custom message we specified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new products controller as `foo_scala/app/controllers/Products.scala`.
    Once created, add a product case class and companion object, the product form
    object, and two routes (the first to display our selected product in a form and
    the second as the PUT action for the form update submission):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add new routes for the newly-added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the product form view template in `foo_scala/app/views/products/form.scala.html`
    with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access our edit product URL route (`http://localhost:9000/products/ABC`) and
    you should be able to view the edit form for our first product. Access our next
    edit product URL route (`http://localhost:9000/products/DEF`) and you should see
    the relevant product details loading in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Access the URL `http://localhost:9000/products/XYZ` and see how Play automatically
    generates the error message with the custom message we specified:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we utilized Play''s `PathBindable` interface to use custom
    path binders. We created a new route, controller, and model to represent a product.
    We implemented the `PathBindable` bind and unbind methods for the product:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Form binding is pretty straightforward for Java:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'As for Scala, we override two methods in the `PathBindable` class. During form
    binding, we first retrieve the product identifier `sku`, and then pass this same
    `sku` to retrieve the corresponding product in our product map:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'We defined a route that required the custom path binding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that in defining the earlier route, we mapped its product parameter
    to a product instance. The `PathBindable` class does all the work here in converting
    the passed `sku` to a product instance.
  prefs: []
  type: TYPE_NORMAL
- en: Serving JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play Framework allows us to easily convert
    our model objects to JSON. Being able to write web services that deliver data
    in the JSON data format has been a very common requirement for modern web applications.
    Play provides a JSON processing library that we will utilize in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the products controller in `foo_java/app/controllers/Products.java`
    by adding our product listing action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statement for Play''s JSON libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the product listing action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access our product listing URL route (`http://localhost:9000/products`) using
    `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we look at the output of our `curl` command, you will notice that our content
    type was automatically set accordingly (`application/json`) and that the response
    body contains an array of JSON products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the products controller in `foo_scala/app/controllers/Products.scala`
    by adding our product listing action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statement for Play''s JSON libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add our implementation of writes for our product model inside
    our products controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the product listing action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access our product listing URL route (`http://localhost:9000/products`) using
    `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we look at the output of our `curl` command, you will notice that our content
    type was automatically set accordingly (`application/json`) and that the response
    body contains an array of JSON products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we modified our products controller and added a new route that
    returns an array of products in the JSON format. We created the action in the
    controller and the new route entry in the `conf/routes` file. We then declared
    an implicit `writes` object which tells Play how to render our product model in
    the JSON format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, we explicitly declare the JSON key labels for
    the rendered JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'The action then converts the retrieved product to JSON as the response to the
    action request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Receiving JSON
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play Framework allow us to receive JSON
    objects easily and enable us to automatically convert them into model instances.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the products controller in `foo_java/app/controllers/Products.java`
    by adding our product creation action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statement for Play''s JSON libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the product listing action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access our product creation URL route (`http://localhost:9000/products`) using
    `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we look at the output of our `curl` command, you will notice that our response
    body now contains our newly added product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the products controller in `foo_scala/app/controllers/Products.scala`
    by adding our product creation action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statement for Play''s JSON libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also need to add our implementation of reads for our product model
    inside our products controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the product listing action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access our product creation URL route (`http://localhost:9000/products`) using
    `curl`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we look at the output of our `curl` command, you will notice that our response
    body now contains our newly added product.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we looked into how we can use Play to consume JSON objects
    by using the JSON `BodyParser` and be able to convert them to the appropriate
    model objects. For Java, we traversed the JSON tree, retrieved each property value,
    and assigned it to our local variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'For Scala, this was a little more straightforward, using the JSON `BodyParser`
    from Play:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will learn how to upload files in Play applications. The
    ability to upload files is one of the more important aspects of web applications,
    and we will see here how Play makes file uploads straightforward and easy to handle.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new view template in `foo_java/app/views/form.scala.html` for the file
    upload form with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    actions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly-added action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access the upload form URL route (`http://localhost:9000/upload_form`) using
    a web browser. You will now be able to select a file to upload in your filesystem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can verify that the file was indeed uploaded by taking a look at the `/tmp`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new view template in `foo_scala/app/views/form.scala.html` for the file
    upload form with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new routes entry for the newly added action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access the upload form URL route (`http://localhost:9000/upload_form`) using
    a web browser. You will now be able to select a file to upload in your filesystem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can verify that the file was indeed uploaded, by taking a look at the `/tmp`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created two new actions and URL routes; the first to display
    our upload form template and the second to handle the actual file upload action.
    We added our upload view form template `form.scala.html` in the `app/views` directory.
    We then handled the actual file upload submission by using Play's helper methods
    to retrieve the uploaded file, and then proceeded to store the file in a predefined
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Using futures with Akka actors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we will explore how Play Framework allows us to create asynchronous
    controllers using futures, in conjunction with Akka actors. The ability to create
    asynchronous controllers provides a way for developers to trigger background jobs
    and execute long-running operations asynchronously without sacrificing endpoint
    responsiveness. Adding Akka to the mix brings a new dimension to fault-tolerant,
    resilient data services, which become valuable tools in a developer's toolchain
    in the age of maturing and sophisticating web application requirements.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_java` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the application controller in `foo_java/app/controllers/Application.java`
    by adding the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statement to include the necessary libraries,
    specifically the `Akka` libraries that we will be utilizing for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add our Akka actor in `foo_java/app/actors/FileReaderActor.java`
    with the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to create our actor protocol class for the `FileReaderActor` in
    `foo_java/app/actors/FileReaderProtocol.java` with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the async example action in `foo_java/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the default `Akka` configs in `foo_java/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access the async example URL route (`http://localhost:9000/async_example`) using
    a web browser. You should see the contents of the local file `/usr/share/dict/words`
    displayed in the web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the `foo_scala` application with Hot-Reloading enabled.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the application controller in `foo_scala/app/controllers/Application.scala`
    by adding the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to add the following import statements to include the necessary libraries,
    specifically the `Akka` libraries we will be utilizing for this recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also need to add our Akka actor in the application controller for convenience:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new route for the async example action in `foo_scala/conf/routes`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the default `Akka` configs in `foo_scala/conf/application.conf`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Access the async example URL route (`http://localhost:9000/async_example`) using
    a web browser. You should see the contents of the local file `/usr/share/dict/words`
    displayed in the web browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we modified our application controller and added a new route
    that returns the contents of a local file `/usr/share/dict/words`. We created
    the action in the controller and the new route entry in the `conf/routes` file.
    We then created the Akka actor class and protocol class that will do the actual
    work of reading the file and returning its contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'For Java, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'For Scala, we need to take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: 'We then configured our new action to invoke the `Actor` and configured it in
    such a way that it returns the results asynchronously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'We also added default `Akka` configuration settings in `conf/application.conf`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: The preceding settings allow us to set the maximum size of our default dispatcher's
    thread pool. In this recipe, it is set to 64\. For more information about Akka
    dispatchers, please refer to [http://doc.akka.io/docs/akka/snapshot/java/dispatchers.html](http://doc.akka.io/docs/akka/snapshot/java/dispatchers.html).
  prefs: []
  type: TYPE_NORMAL
