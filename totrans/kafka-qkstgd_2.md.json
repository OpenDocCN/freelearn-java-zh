["```java\n{\n  \"event\": \"CUSTOMER_CONSULTS_ETHPRICE\",\n   \"customer\": {\n         \"id\": \"14862768\",\n         \"name\": \"Snowden, Edward\",\n         \"ipAddress\": \"95.31.18.111\"\n   },\n   \"currency\": {\n         \"name\": \"ethereum\",\n         \"price\": \"RUB\"\n   },\n   \"timestamp\": \"2018-09-28T09:09:09Z\"\n}\n```", "```java\n{ \"event\": \"CUSTOMER_CONSULTS_ETHPRICE\",\n   \"customer\": {\n         \"id\": \"13548310\",\n         \"name\": \"Assange, Julian\",\n         \"ipAddress\": \"185.86.151.11\"\n   },\n   \"currency\": {\n         \"name\": \"ethereum\",\n         \"price\": \"EUR\"\n   },\n   \"timestamp\": \"2018-09-28T08:08:14Z\"\n}\n```", "```java\n{ \"event\": \"CUSTOMER_CONSULTS_ETHPRICE\",\n   \"customer\": {\n         \"id\": \"15887564\",\n         \"name\": \"Mills, Lindsay\",\n         \"ipAddress\": \"186.46.129.15\"\n   },\n   \"currency\": {\n         \"name\": \"ethereum\",\n         \"price\": \"USD\"\n   },\n   \"timestamp\": \"2018-09-28T19:51:35Z\"\n}\n```", "```java\n{ \"name\": \"customer_consults_ethprice\",\n  \"namespace\": \"monedero.avro\",\n  \"type\": \"record\",\n  \"fields\": [\n    { \"name\": \"event\", \"type\": \"string\" },\n    { \"name\": \"customer\",\n      \"type\": {\n          \"name\": \"id\", \"type\": \"long\",\n          \"name\": \"name\", \"type\": \"string\",\n          \"name\": \"ipAddress\", \"type\": \"string\"\n      }\n    },\n    { \"name\": \"currency\",\n      \"type\": {\n          \"name\": \"name\", \"type\": \"string\",\n          \"name\": \"price\", \"type\": {\n          \"type\": \"enum\", \"namespace\": \"monedero.avro\",\n            \"name\": \"priceEnum\", \"symbols\": [\"USD\", \"EUR\", \"RUB\"]}\n      }\n    },\n    { \"name\": \"timestamp\", \"type\": \"long\",\n      \"logicalType\": \"timestamp-millis\"\n    }\n  ]\n}\n```", "```java\n$ brew update && brew install gradle\n```", "```java\n==> Downloading https://services.gradle.org/distributions/gradle-4.10.2-all.zip\n==> Downloading from https://downloads.gradle.org/distributions/gradle-4.10.2-al\n######################################################################## 100.0%\n /usr/local/Cellar/gradle/4.10.2: 203 files, 83.7MB, built in 59 seconds\n```", "```java\n$ apt-get install gradle\n```", "```java\n$ sdk install gradle 4.3\n```", "```java\n$ gradle -v\n```", "```java\n------------------------------------------------------------\nGradle 4.10.2\n------------------------------------------------------------\n```", "```java\n$ gradle init --type java-library\n```", "```java\n...\nBUILD SUCCESSFUL\n...\n```", "```java\napply plugin: 'java'\napply plugin: 'application'\nsourceCompatibility = '1.8'\nmainClassName = 'monedero.ProcessingEngine'\nrepositories {\n mavenCentral()\n}\nversion = '0.1.0'\ndependencies {\n compile group: 'org.apache.kafka', name: 'kafka_2.12', version: '2.0.0'\n compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.7'\n}\njar {\n manifest {\n attributes 'Main-Class': mainClassName\n } from {\n configurations.compile.collect {\n it.isDirectory() ? it : zipTree(it)\n }\n }\n exclude \"META-INF/*.SF\"\n exclude \"META-INF/*.DSA\"\n exclude \"META-INF/*.RSA\"\n}\n```", "```java\n$ gradle compileJava\n```", "```java\n...\nBUILD SUCCESSFUL\n...\n```", "```java\npackage monedero;\nimport java.util.Properties;\npublic interface Consumer {\n  static Properties createConfig(String servers, String groupId) {\n    Properties config = new Properties();\n    config.put(\"bootstrap.servers\", servers);\n    config.put(\"group.id\", groupId);\n    config.put(\"enable.auto.commit\", \"true\");\n    config.put(\"auto.commit.interval.ms\", \"1000\");\n    config.put(\"auto.offset.reset\", \"earliest\");\n    config.put(\"session.timeout.ms\", \"30000\");\n    config.put(\"key.deserializer\",\n        \"org.apache.kafka.common.serialization.StringDeserializer\");\n    config.put(\"value.deserializer\",\n        \"org.apache.kafka.common.serialization.StringDeserializer\");\n    return config;\n  }\n}\n```", "```java\npackage monedero;\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\nimport java.time.Duration;\nimport java.util.Collections;\nclass Reader implements Consumer {\n  private final KafkaConsumer<String, String> consumer;//1\n  private final String topic;\n  Reader(String servers, String groupId, String topic) {\n    this.consumer =\n        new KafkaConsumer<>(Consumer.createConfig(servers, groupId));\n    this.topic = topic;\n  }\n  void run(Producer producer) {\n    this.consumer.subscribe(Collections.singletonList(this.topic));//2\n while (true) {//3\n      ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));  //4\n      for (ConsumerRecord<String, String> record : records) {\nproducer.process(record.value());//5\n      }\n    }\n  }\n}\n```", "```java\npackage monedero;\nimport java.util.Properties;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\npublic interface Producer {\n  void process(String message);                                 //1\n  static void write(KafkaProducer<String, String> producer,\n                    String topic, String message) {             //2\n    ProducerRecord<String, String> pr = new ProducerRecord<>(topic, message);\n    producer.send(pr);\n  }\n  static Properties createConfig(String servers) {              //3\n    Properties config = new Properties();\n    config.put(\"bootstrap.servers\", servers);\n    config.put(\"acks\", \"all\");\n    config.put(\"retries\", 0);\n    config.put(\"batch.size\", 1000);\n    config.put(\"linger.ms\", 1);\n    config.put(\"key.serializer\",\n\"org.apache.kafka.common.serialization.StringSerializer\");\nconfig.put(\"value.serializer\",\n        \"org.apache.kafka.common.serialization.StringSerializer\"); \n         return config;\n}\n}\n```", "```java\npackage monedero;\nimport org.apache.kafka.clients.producer.KafkaProducer;\npublic class Writer implements Producer {\n  private final KafkaProducer<String, String> producer;\n  private final String topic;\n  Writer(String servers, String topic) {\n    this.producer = new KafkaProducer<>(\n        Producer.createConfig(servers));//1\n    this.topic = topic;\n  }\n  @Override\n  public void process(String message) {\n    Producer.write(this.producer, this.topic, message);//2\n  }\n}\n```", "```java\npackage monedero;\npublic class ProcessingEngine {\n  public static void main(String[] args) {\n    String servers = args[0];\n    String groupId = args[1];\n    String sourceTopic = args[2];\n    String targetTopic = args[3];\n    Reader reader = new Reader(servers, groupId, sourceTopic);\n    Writer writer = new Writer(servers, targetTopic);\n    reader.run(writer);\n  }\n}\n```", "```java\n$ gradle jar\n```", "```java\n...\nBUILD SUCCESSFUL\n...\n```", "```java\n$ bin/confluent start\n```", "```java\n$ bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic input-topic\n\n$ bin/kafka-topics --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic output-topic\n```", "```java\n$ bin/kafka-topics --list --zookeeper localhost:2181\n```", "```java\n$ bin/kafka-topics --delete --zookeeper localhost:2181 --topic \nunWantedTopic\n```", "```java\n$ bin/kafka-console-producer --broker-list localhost:9092 --topic \ninput-topic\n```", "```java\n$ bin/kafka-console-consumer --bootstrap-server localhost:9092 --\nfrom-beginning --topic output-topic\n```", "```java\n$ java -jar ./build/libs/monedero-0.1.0.jar localhost:9092 foo \ninput-topic output-topic\n```", "```java\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"14862768\", \"name\": \"Snowden, Edward\", \"ipAddress\": \"95.31.18.111\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"RUB\"}, \"timestamp\": \"2018-09-28T09:09:09Z\"}\n\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"13548310\", \"name\": \"Assange, Julian\", \"ipAddress\": \"185.86.151.11\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"EUR\"}, \"timestamp\": \"2018-09-28T08:08:14Z\"}\n\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"15887564\", \"name\": \"Mills, Lindsay\", \"ipAddress\": \"186.46.129.15\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\"}, \"timestamp\": \"2018-09-28T19:51:35Z\"}\n```", "```java\n{\"error\": \"Failure description\" }\n```", "```java\npackage monedero;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport java.io.IOException;\n\npublic class Validator implements Producer {\n  private final KafkaProducer<String, String> producer;\n  private final String validMessages;\n  private final String invalidMessages;\n  private static final ObjectMapper MAPPER = new ObjectMapper();\n\n  public Validator(String servers, String validMessages, String invalidMessages) { //1\n    this.producer = new KafkaProducer<>(Producer.createConfig(servers));\n    this.validMessages = validMessages;\n    this.invalidMessages = invalidMessages;\n  }\n\n  @Override\n  public void process(String message) {\n    try {\n      JsonNode root = MAPPER.readTree(message);\n      String error = \"\";\n      error = error.concat(validate(root, \"event\")); //2\n      error = error.concat(validate(root, \"customer\"));\n      error = error.concat(validate(root, \"currency\"));\n      error = error.concat(validate(root, \"timestamp\"));\n      if (error.length() > 0) {\n        Producer.write(this.producer, this.invalidMessages, //3\n        \"{\\\"error\\\": \\\" \" + error + \"\\\"}\");\n      } else {\n        Producer.write(this.producer, this.validMessages, //4\n        MAPPER.writeValueAsString(root));\n      }\n    } catch (IOException e) {\n      Producer.write(this.producer, this.invalidMessages, \"{\\\"error\\\": \\\"\"\n      + e.getClass().getSimpleName() + \": \" + e.getMessage() + \"\\\"}\");//5 \n    }\n  }\n  private String validate(JsonNode root, String path) {\n    if (!root.has(path)) {\n      return path.concat(\" is missing. \");\n    }\n    JsonNode node = root.path(path);\n    if (node.isMissingNode()) {\n      return path.concat(\" is missing. \");\n    }\n    return \"\";\n  }\n}\n```", "```java\npackage monedero;\npublic class ProcessingEngine {\n  public static void main(String[] args) {\n    String servers = args[0];\n    String groupId = args[1];\n    String inputTopic = args[2];\n    String validTopic = args[3];\n    String invalidTopic = args[4];\n    Reader reader = new Reader(servers, groupId, inputTopic);\n    Validator validator = new Validator(servers, validTopic, invalidTopic);\n    reader.run(validator);\n  }\n}\n```", "```java\n$ gradle jar\n```", "```java\n...\nBUILD SUCCESSFUL\n...\n```", "```java\n$ bin/kafka-topics --create --zookeeper localhost:2181 --\nreplication-factor 1 --partitions 1 --topic valid-messages\n\n$ bin/kafka-topics --create --zookeeper localhost:2181 --\nreplication-factor 1 --partitions 1 --topic invalid-messages\n```", "```java\n$ bin/kafka-console-producer --broker-list localhost:9092 --topic \ninput-topic\n```", "```java\n$ bin/kafka-console-consumer --bootstrap-server localhost:9092 --\nfrom-beginning --topic valid-messages\n```", "```java\n$ bin/kafka-console-consumer --bootstrap-server localhost:9092 --\nfrom-beginning --topic invalid-messages\n```", "```java\n$ java -jar ./build/libs/monedero-0.1.0.jar localhost:9092 foo \ninput-topic valid-messages invalid-messages\n```", "```java\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"14862768\", \"name\": \"Snowden, Edward\", \"ipAddress\": \"95.31.18.111\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"RUB\"}, \"timestamp\": \"2018-09-28T09:09:09Z\"}\n\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"13548310\", \"name\": \"Assange, Julian\", \"ipAddress\": \"185.86.151.11\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"EUR\"}, \"timestamp\": \"2018-09-28T08:08:14Z\"}\n\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"15887564\", \"name\": \"Mills, Lindsay\", \"ipAddress\": \"186.46.129.15\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"USD\"}, \"timestamp\": \"2018-09-28T19:51:35Z\"}\n```", "```java\nI am not JSON, I am Freedy. [enter]\nI am a Kafkeeter! [enter]\n```", "```java\n{\"error\": \"JsonParseException: Unrecognized token ' I am not JSON, I am Freedy.': was expecting 'null','true', 'false' or NaN\nat [Source: I am not JSON, I am Freedy.; line: 1, column: 4]\"}\n```", "```java\n{\"event\": \"CUSTOMER_CONSULTS_ETHPRICE\", \"customer\": {\"id\": \"14862768\", \"name\": \"Snowden, Edward\", \"ipAddress\": \"95.31.18.111\"}, \"currency\": {\"name\": \"ethereum\", \"price\": \"RUB\"}}\n```", "```java\n{\"error\": \"timestamp is missing.\"}\n```"]