["```java\n<script>alert('Hello World')</script>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\n<dependency>\n  <groupId>org.springframework.boot</groupId>\n  <artifactId>spring-boot-starter-security</artifactId>\n</dependency>\n```", "```java\nUsing generated security password: f76defbe-62d2-4711-9189-\naa8926ad03eb\n```", "```java\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfiguration\n            extends WebSecurityConfigurerAdapter {\n\n}\n```", "```java\npublic class SecurityConfiguration … {\n  @Override\n  public void configure(AuthenticationManagerBuilder auth)\n                        throws Exception {\n    auth.inMemoryAuthentication()\n        .withUser(User.withDefaultPasswordEncoder()\n                      .username(\"user\")\n                      .password(\"password\")\n                      .roles(\"USER\"));\n  }\n}\n```", "```java\npublic class SecurityConfiguration … {\n  @Override\n  protected void configure(HttpSecurity http)\n                           throws Exception {\n    http.authorizeRequests()\n        .antMatchers(\"/**\").hasRole(\"USER\")\n        .and()\n        .httpBasic().realmName(\"blogmania\");\n  }\n}\n```", "```java\n<form action=\"/login\" method=\"POST\">\n   <input name=\"username\" value=\"\" type=\"text\">\n   <input name=\"password\" type=\"password\">\n   <input name=\"submit\" value=\"Login\" type=\"submit\">\n   <input name=\"_csrf\" value=\"246a60ad-3059-4e4b-9409\n49eddd66efdb\" type=\"hidden\">\n</form>\n```", "```java\n<form th:action=\"@{/login}\" method=\"post\">\n   <label for=\"username\">Username</label>\n   <input type=\"text\" id=\"username\" name=\"username\">\n   <label for=\"password\">Password</label>\n    <input type=\"password\" id=\"password\" name=\"password\">\n    <button type=\"submit\">Log in</button>\n    <div th:if=\"${loginError}\" class=\"alert alert-primary\"\nrole=\"alert\">\n       <p class=\"error\">Wrong user or password</p>\n   </div>\n</form>\n```", "```java\n@GetMapping(\"/login\")\npublic String login(Model model,\n                    @RequestParam Optional<String> error) {\n   if (error.isPresent()) {\n       log.info(\"Incorrect login, warning the user\");\n       model.addAttribute(\"loginError\", \"true\");\n   }\n   return \"login\";\n}\n```", "```java\npublic class SecurityConfiguration … {\n  @Override\n  protected void configure(HttpSecurity http)\n                           throws Exception {\n    http.authorizeRequests()\n        .antMatchers(\"/css/**\", \"/webjars/**\", \"/login\").\npermitAll()\n        .antMatchers(\"/**\").hasRole(\"USER\")\n        .and()\n        .formLogin().loginPage(\"/login\")\n        .and()\n        .httpBasic().realmName(\"securityintro\");\n  }\n}\n```", "```java\n<form th:action=\"@{/logout}\" method=\"post\">\n   <button type=\"submit\">Log out</button>\n</form>\n```", "```java\nhttp.authorizeRequests()\n    .antMatchers(\"/**\").hasRole(\"USER\")\n    .and()\n    .formLogin().loginPage(\"/login\")\n    .and()\n    .httpBasic().realmName(\"blogmania\");\n```", "```java\nhttp.authorizeRequests()\n    .antMatchers(\"/css/**\", \"/webjars/**\", \"/login\").\npermitAll()\n    .antMatchers(\"/**\").permitAll()\n    .and()\n    .formLogin().loginPage(\"/login\")\n    .and()\n    .httpBasic().realmName(\"blogmania\");\n```", "```java\n@RolesAllowed(\"USER\")\npublic void performForRole() {\n   log.info(\"Only called when authorized as USER\");\n}\n```", "```java\n@Configuration\n@EnableWebSecurity\n@EnableGlobalMethodSecurity(jsr250Enabled = true)\npublic class SecurityConfiguration\n        extends WebSecurityConfigurerAdapter {\n    …\n}\n```", "```java\n@Secured(\"IS_AUTHENTICATED_ANONYMOUSLY\")\npublic void performSecureWithAny() {\n   log.info(\"Only called when anonymous\");\n}\n@Secured(\"ROLE_USER\")\npublic void performSecureWithRole() {\n   log.info(\"Only called when authorized as USER\");\n}\n```", "```java\n@RolesAllowed(\"USER\")\n@RolesAllowed(\"ROLE_USER\")\n@Secured(\"ROLE_USER\")\n@PreAuthorize(\"hasRole('USER')\")\n@PreAuthorize(\"hasRole('ROLE_USER')\")\n@PreAuthorize(\"hasAuthority('ROLE_USER')\")\n```", "```java\n@EnableGlobalMethodSecurity(prePostEnabled = true)\npublic class SecurityConfiguration … {\n    …\n}\n```", "```java\n@PreAuthorize\n@PostAuthorize\n@PreFilter\n@PostFilter\n```", "```java\n@PreAuthorize\n@PostAuthorize\n@PreFilter\n@PostFilter\n@PreAuthorize(\"hasRole('USER')\")\npublic void readMyArticles() {\n   log.info(\"Only called when authorized as USER\");\n}\n```", "```java\n@PreAuthorize(\"hasAnyRole('USER', 'GUEST')\")\npublic void readPublicArticles() {\n   log.info(\"Only called when authorized as USER or GUEST\");\n}\n```", "```java\n@PreAuthorize(\"#blogPost.author.name == authentication.name\")\npublic void deletePost(BlogPost blogPost) {\n   log.info(\"Only called when actually the author of the post\");\n}\n```", "```java\n@PreFilter(\"filterObject.content.length() < 240 or\nhasRole('ADMIN')\")\n@PostFilter(\"filterObject.author.name == authentication.name\")\npublic List<BlogPost> saveAndReturnAll(List<BlogPost> posts) {\n   …\n}\n```", "```java\n<dependency>\n   <groupId>org.springframework.security</groupId>\n   <artifactId>spring-security-test</artifactId>\n   <scope>test</scope>\n</dependency>\n```", "```java\n@RunWith(SpringRunner.class)\n@SpringBootTest\npublic class SecuredServiceTest {\n   @Autowired\n   private SecuredService securedService;\n\n   @Test\n   @WithMockUser\n   public void accessWithUserRole() {\n       securedService.performForRole();\n   }\n   @Test\n   @WithAnonymousUser\n   public void accessWithoutAnyRole() {\n       try {\n           securedService.performForRole();\n           fail();\n       } catch (AccessDeniedException e) {\n           // succeed\n       }\n   }\n}\n```", "```java\nObject principal = SecurityContextHolder.getContext()\n            .getAuthentication().getPrincipal();\nString username = principal instanceof UserDetails\n       ? ((UserDetails) principal).getUsername()\n       : principal.toString();\n```", "```java\n@Slf4j\n@RequiredArgsConstructor\npublic class LowercaseUserDetailsService\n        implements UserDetailsService {\n  private final PasswordEncoder passwordEncoder;\n\n  @Override\n  public UserDetails loadUserByUsername(String username) {\n    if (username == null || username.trim().isEmpty() ||\n            !username.toLowerCase().equals(username)) {\n      log.info(\"Reject {}, accept only lowercase\", username);\n      throw new UsernameNotFoundException(\"Accept only\nlowercase\");\n    }\n      String password = passwordEncoder.encode(\"password\");\n      log.info(\"Accepting {} / {}\", username, password);\n      return new User(username, password,\n              singleton(new SimpleGrantedAuthority(\"ROLE_USER\")));\n    }\n}\n```", "```java\nreturn new User(username, password,\n       singleton(new SimpleGrantedAuthority(\"ROLE_USER\")));\n```", "```java\n@Override\npublic void configure(AuthenticationManagerBuilder auth)\n        throws Exception {\n   auth.userDetailsService(userDetailsService())\n       .passwordEncoder(passwordEncoder());\n}\n\n@Bean\n@Override\npublic UserDetailsService userDetailsService() {\n   return new LowercaseUserDetailsService(passwordEncoder());\n}\n\n@Bean\npublic PasswordEncoder passwordEncoder() {\n   return PasswordEncoderFactories.\ncreateDelegatingPasswordEncoder();\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http\n    .csrf()\n      .csrfTokenRepository(\n              CookieCsrfTokenRepository.withHttpOnlyFalse());\n}\n```", "```java\n@Bean\npublic WebMvcConfigurer corsConfigurer() {\n  return new WebMvcConfigurer() {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n      registry.addMapping(\"/greeting-javaconfig\")\n      .allowedOrigins(\"http://localhost:9000\");\n    }\n  };\n}\n```", "```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http.cors() …\n}\n```", "```java\n@Bean\nCorsConfigurationSource corsConfigurationSource() {\n  CorsConfiguration configuration = new CorsConfiguration();\n  configuration.setAllowedOrigins(\n          Arrays.asList(\"http://localhost:9000\"));\n  configuration.setAllowedMethods(\n          Arrays.asList(\"GET\",\"POST\"));\n  UrlBasedCorsConfigurationSource source =\n          new UrlBasedCorsConfigurationSource();\n  source.registerCorsConfiguration(\"/**\", configuration);\n  return source;\n}\n```"]