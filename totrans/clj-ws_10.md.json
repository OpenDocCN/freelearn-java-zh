["```java\n    lein new app coffee-app\n    ```", "```java\n    (ns coffee-app.core\n        (:require [coffee-app.utils :as utils])\n        (:import [java.util Scanner])\n        (:gen-class))\n    ```", "```java\n    (def input (Scanner. System/in))\n    ```", "```java\n    (defn- start-app []\n           \"Displaying main menu and processing user choices.\"\n           (let [run-application (ref true)]\n                (while (deref run-application)\n                       (println \"\\n|     Coffee app |\")\n                       (println \"| 1-Menu 2-Orders 3-Exit |\\n\")\n                       (let [choice (.nextInt input)]\n                            (case choice\n                                  1 (show-menu)\n                                  2 (show-orders)\n                                  3 (dosync (ref-set run-application false)))))))\n    ```", "```java\n    run-application (ref true)\n    (while (deref run-application)\n    ```", "```java\n    (dosync (ref-set run-application false))\n    ```", "```java\n    (println \"| 1-Menu 2-Orders 3-Exit |\\n\")\n    ```", "```java\n    choice (.nextInt input)\n    ```", "```java\n    (case choice\n      1 (show-menu)\n        2 (show-orders))\n    ```", "```java\n    (defn- show-menu []\n           (println \"| Available coffees |\")\n           (println \"|1\\. Latte   2.Mocha |\")\n           (let [choice (.nextInt input)]\n                (case choice\n                      1 (buy-coffee :latte)\n                      2 (buy-coffee :mocha))))\n    ```", "```java\n    (println \"| Available coffees |\")\n    (println \"|1\\. Latte   2.Mocha |\")\n    ```", "```java\n    choice (.nextInt input)\n    ```", "```java\n    (case choice\n           1 (buy-coffee :latte)\n           2 (buy-coffee :mocha))\n    ```", "```java\n    (defn- buy-coffee [type]\n           (println \"How many coffees do you want to buy?\")\n           (let [choice (.nextInt input)\n                 price (utils/calculate-coffee-price price-menu type choice)]\n                (utils/display-bought-coffee-message type choice price)))\n    ```", "```java\n    (ns coffee-app.utils\n    ```", "```java\n    (defn calculate-coffee-price [coffees coffee-type number]\n          (->\n            (get coffees coffee-type)\n            (* number)\n            float))\n    ```", "```java\n    (ns coffee-app.core\n        (:require [coffee-app.utils :as utils])\n        (:import [java.util Scanner])\n        (:gen-class))\n    (def ^:const price-menu {:latte 0.5 :mocha 0.4})\n    ```", "```java\n    (ns coffee-app.utils)\n    (defn display-bought-coffee-message [type number total]\n          (println \"Buying\" number (name type) \"coffees for total:€\" total))\n    ```", "```java\n    (ns coffee-app.core)\n    (defn- show-orders []\n           (println \"\\n\")\n           (println \"Display orders here\"))\n    ```", "```java\n    Display orders here\n    ```", "```java\n    (defn -main\n          \"Main function calling app.\"\n          [& args]\n          (start-app))\n    ```", "```java\n    lein run\n    ```", "```java\n    tree test\n    ```", "```java\n    (ns coffee-app.core-test\n      (:require [clojure.test :refer :all]\n                    [coffee-app.core :refer :all]))\n    ```", "```java\n    (deftest a-test\n      (testing \"FIXME, I fail.\"\n        (is (= 0 1))))\n    ```", "```java\n    lein test\n    ```", "```java\n    (deftest a-test\n      (testing \"FIXME, I fail.\"\n        (is (= 1 1))))\n    ```", "```java\n    lein test\n    ```", "```java\n    touch test/coffee_app/utils_test.clj\n    ```", "```java\n    (ns coffee-app.utils-test\n        (:require [clojure.test :refer [are is deftest testing]]\n                       [coffee-app.core :refer [price-menu]]\n                       [coffee-app.utils :refer :all]))\n    ```", "```java\n    (deftest calculate-coffee-price-test-with-single-is\n      (testing \"Single test with is macro.\"\n        (is (= (calculate-coffee-price price-menu :latte 1)\n                 0.5))))\n    ```", "```java\n    lein test\n    ```", "```java\n    (deftest calculate-coffee-price-test-with-multiple-is\n      (testing \"Multiple tests with is macro.\"\n        (is (= (calculate-coffee-price price-menu :latte 1) 0.5))\n        (is (= (calculate-coffee-price price-menu :latte 2) 1.0))\n        (is (= (calculate-coffee-price price-menu :latte 3) 1.5))))\n    ```", "```java\n    lein test\n    ```", "```java\n    (deftest calculate-coffee-price-test-with-are\n      (testing \"Multiple tests with are macro\"\n        (are [coffees-hash coffee-type number-of-cups result]\n                (= (calculate-coffee-price coffees-hash coffee-type number-of-cups) result)\n                price-menu :latte 1 0.5\n                price-menu :latte 2 1.0\n                price-menu :latte 3 1.5)))\n    ```", "```java\n    (= (calculate-coffee-price coffees-hash coffee-type number-of-cups) result)\n    ```", "```java\n    price-menu :latte 1 0.5\n    ```", "```java\n    lein test\n    ```", "```java\n    (defproject coffee-app \"0.1.0-SNAPSHOT\"\n      ;;; code omitted\n      :dependencies [[org.clojure/clojure \"1.10.0\"]\n                               [expectations \"2.1.10\"]]\n      :plugins [[lein-expectations \"0.0.8\"]]\n      ;;; code omitted\n    )\n    ```", "```java\n    (ns coffee-app.utils-test\n        (:require [coffee-app.core :refer [price-menu]]\n                      [coffee-app.utils :refer :all]\n                      [expectations :refer [expect in]]))\n    ```", "```java\n    (expect 1.5 (calculate-coffee-price price-menu :latte 3))\n    ```", "```java\n    lein expectations\n    ```", "```java\n    (expect ClassCastException (calculate-coffee-price price-menu :latte \"1\"))\n    ```", "```java\n    (expect ClassCastException (calculate-coffee-price price-menu :latte 2))\n    ```", "```java\n    (expect Number (calculate-coffee-price price-menu :latte 2))\n    ```", "```java\n    (expect {:latte 0.5} (in price-menu))\n    ```", "```java\n(defn load-orders\n      \"Reads a sequence of orders in file at path.\"\n      [file]\n      (if (file-exists? file)\n        (with-open [r (PushbackReader. (io/reader file))]\n                   (binding [*read-eval* false]\n                            (doall (take-while #(not= ::EOF %) (repeatedly #(read-one-order r))))))\n        []))\n```", "```java\n(defn file-exists? [location]\n      (.exists (io/as-file location)))\n```", "```java\n    (ns coffee-app.utils-test\n        (:require [coffee-app.core :refer [price-menu]]\n                  [coffee-app.utils :refer :all]\n                  [midje.sweet :refer [=> fact provided unfinished]]))\n    ```", "```java\n    (fact (calculate-coffee-price price-menu :latte 3) => 3)\n    ```", "```java\n    lein repl\n    ```", "```java\n    user=> (use 'midje.repl)\n    user=> (autotest)\n    ```", "```java\n    (fact (calculate-coffee-price price-menu :latte 3) => 1.5)\n    ```", "```java\n    (defn display-bought-coffee-message [type number total]\n          (str \"Buying\" number (name type) \"coffees for total:€\" total))\n    ```", "```java\n    (def ^:const currencies {:euro {:countries #{\"France\" \"Spain\"} :symbol \"€\"}\n                                            :dollar {:countries #{\"USA\"} :symbol \"$\"}})\n    ```", "```java\n    (unfinished get-currency)\n    ```", "```java\n    (def test-currency :euro)\n    ```", "```java\n    (defn get-bought-coffee-message-with-currency [type number total currency]\n          (format \"Buying %d %s coffees for total: %s%s\" number (name type) \"€\" total))\n    ```", "```java\n    (fact \"Message about number of bought coffees should include currency symbol\"\n          (get-bought-coffee-message-with-currency :latte 3 1.5 :euro) => \"Buying 3 latte coffees for total: €1.5\"\n          (provided\n            (get-currency test-currency) => \"€\"))\n    ```", "```java\n    (defn get-bought-coffee-message-with-currency [type number total currency]\n          (format \"Buying %d %s coffees for total: %s%s\" number (name type) (get-currency test-currency) total))\n    ```", "```java\n    (ns coffee-app.utils-test\n        (:require     [clojure.test.check :as tc]\n                      [clojure.test.check.generators :as gen]\n                      [clojure.test.check.properties :as prop]\n                      [clojure.test.check.clojure-test :refer [defspec]]\n                      [coffee-app.core :refer [price-menu]]\n                      [coffee-app.utils :refer :all]))\n    ```", "```java\n    (require '[clojure.test.check :as tc]\n                  '[clojure.test.check.generators :as gen]\n                  '[clojure.test.check.properties :as prop])\n    ```", "```java\n    (gen/sample gen/small-integer)\n    ```", "```java\n    (gen/sample (gen/fmap inc gen/small-integer))\n    ```", "```java\n    (1 2 1 -1 -3 4 -5 -1 7 -6)\n    ```", "```java\n    (defspec coffee-price-test-check 1000\n             (prop/for-all [int gen/small-integer]\n                           (= (float (* int (:latte price-menu))) (calculate-coffee-price price-menu :latte int))))\n    ```", "```java\n    lein test\n    ```", "```java\n    {:num-tests 5,\n     :seed 1528580863556,\n     :fail [[-2]],\n     :failed-after-ms 1,\n     :result false,\n     :result-data nil,\n     :failing-size 4,\n     :pass? false,\n     :shrunk\n     {:total-nodes-visited 5,\n      :depth 1,\n      :pass? false,\n      :result false,\n      :result-data nil,\n      :time-shrinking-ms 1,\n      :smallest [[-1]]}}\n    ```", "```java\n    (defn calculate-coffee-price [coffees coffee-type number]\n          (->\n            (get coffees coffee-type)\n            (* number)\n            float\n            Math/abs))\n    ```", "```java\n    (defspec coffee-price-test-check 1000\n             (prop/for-all [int gen/nat]\n                           (= (float (* int (:latte price-menu))) (calculate-coffee-price price-menu :latte int))))\n    ```", "```java\n    lein test\n    ```", "```java\n    (defspec coffee-price-test-check-all-params 1000\n      (prop/for-all [int (gen/fmap inc gen/nat)\n                          price-hash (gen/map gen/keyword \n                                                    (gen/double* {:min 0.1 :max 999 :infinite? false :NaN? false}) \n                                           {:min-elements 2})]  \n                           (let [coffee-tuple (first price-hash)]\n                                (= (float (* int (second coffee-tuple)))\n                                     (calculate-coffee-price price-hash (first coffee-tuple) int)))))\n    ```", "```java\n    {:latte 0.5 :mocha 0.4}\n    ```", "```java\n    lein test\n    ```", "```java\n    mkdir hello-test\n    ```", "```java\n    tree\n    ```", "```java\n    mkdir -p src/hello_test\n    ```", "```java\n    touch src/hello_test/core.cljs\n    ```", "```java\n    (ns hello-test.core)\n    ```", "```java\n    (defn adder [x y ]\n          (+ x y))\n    ```", "```java\n    mkdir -p test/hello_test\n    ```", "```java\n    (defproject hello-test \"0.1.0-SNAPSHOT\"\n                :description \"Testing in ClojureScript\"\n                :dependencies [[org.clojure/clojure \"1.10.0\"]\n                               [org.clojure/clojurescript \"1.10.520\"]\n                               [cljs-http \"0.1.46\"]\n                               [org.clojure/test.check \"0.10.0\"]\n                               [funcool/cuerdas \"2.2.0\"]])\n    ```", "```java\n    :plugins [[lein-doo \"0.1.11\"]]\n    ```", "```java\n    npm install karma karma-cljs-test –save-dev\n    ```", "```java\n    npm install karma-chrome-launcher –save-dev\n    ```", "```java\n    npm install -g karma-cli\n    ```", "```java\n    :cljsbuild {:builds\n                        {:test {:source-paths [\"src\" \"test\"]\n                                                 :compiler {:output-to \"out/tests.js\"\n                                                                  :output-dir \"out\"\n                                                                  :main hello-test.runner\n                                                                  :optimizations :none}}}}\n    ```", "```java\n    touch test/hello_test/core_test.cljs\n    ```", "```java\n    (ns hello-test.core-test\n      (:require [cljs.test :refer-macros [are async deftest is testing]]\n                    [clojure.test.check.generators :as gen]\n                    [clojure.test.check.properties :refer-macros [for-all]]\n                    [clojure.test.check.clojure-test :refer-macros [defspec]]\n                    [cuerdas.core :as str]\n                    [hello-test.core :refer [adder]]))\n    ```", "```java\n    touch test/hello_test/runner.cljs\n    ```", "```java\n    (ns hello-test.runner\n      (:require [doo.runner :refer-macros [doo-tests]]\n                    [hello-test.core-test]))\n    (doo-tests 'hello-test.core-test)\n    ```", "```java\n    tree\n    ```", "```java\n    lein doo chrome test\n    ```", "```java\n    (ns hello-test.core\n      (:require [cuerdas.core :as str]))\n    ```", "```java\n    (defn profanity-filter [string]\n          (if (str/includes? string \"bad\")\n            (str/replace string \"bad\" \"great\")\n            string))\n    ```", "```java\n    (ns hello-test.core-test\n      (:require [cljs.test :refer-macros [are async deftest is testing]]\n                [cuerdas.core :as str]\n                [hello-test.core :refer [profanity-filter]]))\n    ```", "```java\n    (deftest profanity-filter-test\n             (testing \"Filter replaced bad word\"\n                      (is (= \"Clojure is great\" (profanity-filter \"Clojure is bad\"))))\n             (testing \"Filter does not replace good words\"\n                      (are [string result] (= result (profanity-filter string))\n                           \"Clojure is great\" \"Clojure is great\"\n                           \"Clojure is brilliant\" \"Clojure is brilliant\")))\n    ```", "```java\n    lein doo chrome test\n    ```", "```java\n    (deftest capitalize-test-is\n             (testing \"Test capitalize? function using is macro\"\n                      (is (= \"katy\" (str/capitalize \"katy\")))\n                      (is (= \"John\" (str/capital \"john\")))\n                      (is (= \"Mike\" (str/capitalize \"mike\")))))\n    ```", "```java\n    (is (= \"Katy\" (str/capitalize \"katy\")))\n    ```", "```java\n    (deftest error-thrown-test\n             (testing \"Catching errors in ClojureScript\"\n                      (is (thrown? js/Error (assoc [\"dog\" \"cat\" \"parrot\"] 4 \"apple\")))))\n    ```", "```java\n    (ns hello-test.core\n      (:require-macros [cljs.core.async.macros :refer [go]])\n      (:require [cljs.core.async :refer [<!]]\n                [cljs-http.client :as http]))\n    ```", "```java\n    (defn http-get [url params callback]\n          (go (let [response (<! (http/get url params))]\n                   (callback response))))\n    ```", "```java\n    (ns hello-test.core-test\n      (:require [hello-test.core :refer [http-get]))\n    ```", "```java\n    (deftest http-get-test\n             (async done\n                    (http-get \"https://api.github.com/users\" {:with-credentials? false\n                                                              :query-params      {\"since\" 135}}\n                              (fn [response]\n                                  (is (= 200 (:status response)))\n                                  (done)))))\n    ```", "```java\n    (ns hello-test.core-test\n      (:require [clojure.test.check.generators :as gen]\n                    [clojure.test.check.properties :refer-macros [for-all]]\n                    [clojure.test.check.clojure-test :refer-macros [defspec]]))\n    ```", "```java\n    (defspec simple-test-check 1000\n             (for-all [some-string gen/string-ascii]\n                       (= (str/replace some-string \"bad\" \"great\") (profanity-filter some-string))))\n    ```", "```java\n    lein new figwheel-main test-app -- --rum\n    ```", "```java\n    :aliases {\"fig:test\"  [\"run\" \"-m\" \"figwheel.main\" \"-co\" \"test.cljs.edn\" \"-m\" \"test-app.test-runner\"]}\n    ```", "```java\n    {\n      ;; use an alternative landing page for the tests so that we don't launch the application\n      :open-url \"http://[[server-hostname]]:[[server-port]]/test.html\"\n      }\n    {:main test-app.test-runner}\n    ```", "```java\n    (ns test-app.test-runner\n      (:require\n        ;; require all the namespaces that you want to test\n        [test-app.core-test]\n        [figwheel.main.testing :refer [run-tests-async]]))\n    (defn -main [& args]\n      (run-tests-async 5000))\n    ```", "```java\n    (ns test-app.core-test\n        (:require\n         [cljs.test :refer-macros [deftest is testing]]\n         [test-app.core :refer [multiply]]))\n    ```", "```java\n    (deftest multiply-test\n      (is (= (* 1 2) (multiply 1 2))))\n    (deftest multiply-test-2\n      (is (= (* 75 10) (multiply 10 75))))\n    ```", "```java\n    lein fig:test\n    ```", "```java\n    lein fig:build\n    ```", "```java\n    lein new figwheel-main test-app -- --rum\n    ```", "```java\n    lein fig:test\n    ```", "```java\n    (ns test-app.core)\n    (defn handle-click [state]\n          (swap! state update-in [:counter] inc))\n    ```", "```java\n    (ns test-app.core)\n    (defonce state (atom {:counter 0}))\n    ```", "```java\n    (rum/defc counter [number]\n              [:div {:on-click #(handle-click state)}\n               (str \"Click times: \" number)])\n    ```", "```java\n    (rum/defc page-content < rum/reactive []\n              [:div {}\n               (counter (:counter (rum/react state)))])\n    ```", "```java\n    (defn mount [el]\n      (rum/mount (page-content) el))\n    ```", "```java\n    lein fig:build\n    ```", "```java\n    (ns test-app.core-test\n        (:require\n         [cljs.test :refer-macros [are deftest is testing use-fixtures]]\n         [test-app.core :refer [handle-click multiply]]))\n    (use-fixtures :each {:before (fn [] (def app-state (atom {:counter 0})))\n                                     :after (fn [] (reset! app-state nil))})\n    ```", "```java\n    (deftest handle-click-test-multiple\n             (testing \"Handle multiple clicks\"\n                      (are [result] (= result (handle-click app-state))\n                           {:counter 1}\n                           {:counter 2}\n                           {:counter 3})))\n    ```", "```java\n     lein fig:test\n    ```", "```java\n    (deftest handle-click-test-one\n             (testing \"Handle one click\"\n                      (is (= {:counter 1} (handle-click app-state)))))\n    ```", "```java\n    lein fig:test\n    ```"]