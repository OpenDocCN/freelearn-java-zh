["```java\n    @ConvertAsProperties( \n      dtd = \"-//com.steeplesoft.photobeans.main//PhotoList//EN\", \n      autostore = false \n    ) \n    @TopComponent.Description( \n      preferredID = \"PhotoListTopComponent\", \n      //iconBase=\"SET/PATH/TO/ICON/HERE\", \n      persistenceType = TopComponent.PERSISTENCE_ALWAYS \n    ) \n    @TopComponent.Registration(mode = \"editor\",\n     openAtStartup = true) \n    @ActionID(category = \"Window\", id =  \n      \"com.steeplesoft.photobeans.main.PhotoListTopComponent\") \n    @ActionReference(path = \"Menu/Window\" /*, position = 333 */) \n    @TopComponent.OpenActionRegistration( \n      displayName = \"#CTL_PhotoListAction\", \n      preferredID = \"PhotoListTopComponent\" \n    ) \n    @Messages({ \n      \"CTL_PhotoListAction=PhotoList\", \n      \"CTL_PhotoListTopComponent=PhotoList Window\", \n      \"HINT_PhotoListTopComponent=This is a PhotoList window\" \n    }) \n    public final class PhotoListTopComponent \n     extends TopComponent { \n```", "```java\n    @TopComponent.Registration(mode = \"editor\",\n      openAtStartup = true) \n```", "```java\n    @ActionID(category = \"Window\", id =  \n      \"com.steeplesoft.photobeans.main.PhotoListTopComponent\") \n    @ActionReference(path = \"Menu/Window\" /*, position = 333 */) \n    @TopComponent.OpenActionRegistration( \n      displayName = \"#CTL_PhotoListAction\", \n      preferredID = \"PhotoListTopComponent\" \n    ) \n    @Messages({ \n      \"CTL_PhotoListAction=PhotoList\", \n      \"CTL_PhotoListTopComponent=PhotoList Window\", \n      \"HINT_PhotoListTopComponent=This is a PhotoList window\" \n    }) \n```", "```java\n    static String CTL_PhotoListAction() { \n      return org.openide.util.NbBundle.getMessage(Bundle.class,  \n        \"CTL_PhotoListAction\"); \n    } \n```", "```java\n    public PhotoListTopComponent() { \n      initComponents(); \n      setName(Bundle.CTL_PhotoListTopComponent()); \n      setToolTipText(Bundle.HINT_PhotoListTopComponent()); \n      putClientProperty(TopComponent.PROP_CLOSING_DISABLED,  \n       Boolean.TRUE); \n      putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED,  \n       Boolean.TRUE); \n    } \n```", "```java\n    CTL_MainWindow_Title=PhotoBeans {0} \n    CTL_MainWindow_Title_No_Project=PhotoBeans {0} \n```", "```java\n    public class RootNode extends AbstractNode \n```", "```java\n    public RootNode() { \n      this(new InstanceContent()); \n    } \n\n    protected RootNode(InstanceContent ic) { \n      super(Children.create(new YearChildFactory(), true), \n       new AbstractLookup(ic)); \n      setDisplayName(Bundle.LBL_RootNode()); \n      setShortDescription(Bundle.HINT_RootNode()); \n\n      instanceContent = ic; \n    } \n```", "```java\n    public class YearChildFactory extends ChildFactory<String> { \n      private final PhotoManager photoManager; \n      private static final Logger LOGGER =  \n        Logger.getLogger(YearChildFactory.class.getName()); \n      public YearChildFactory() { \n        this.photoManager =  \n          Lookup.getDefault().lookup(PhotoManager.class); \n        if (photoManager == null) { \n          LOGGER.log(Level.SEVERE,  \n          \"Cannot get PhotoManager object\"); \n          LifecycleManager.getDefault().exit(); \n        } \n      } \n\n      @Override \n      protected boolean createKeys(List<String> list) { \n        list.addAll(photoManager.getYears()); \n        return true; \n      } \n\n      @Override \n      protected Node createNodeForKey(String key) { \n        return new YearNode(Integer.parseInt(key)); \n      } \n    } \n```", "```java\n    this.photoManager=Lookup.getDefault().lookup(\n      PhotoManager.class); \n```", "```java\n    public class YearNode extends AbstractNode { \n      public YearNode(int year) { \n        super(Children.create(new MonthNodeFactory(year), true),  \n         Lookups.singleton(year)); \n        setName(\"\" + year); \n        setDisplayName(\"\" + year); \n      } \n    } \n```", "```java\n    public class MonthNode extends AbstractNode { \n      public MonthNode(int year, int month) { \n        super(Children.create( \n          new PhotoNodeFactory(year, month), true),  \n           Lookups.singleton(month)); \n          String display = month + \" - \" +  \n           Month.values()[month-1].getDisplayName( \n             TextStyle.FULL, Locale.getDefault()); \n          setName(display); \n          setDisplayName(display); \n      } \n    } \n```", "```java\n    public class PhotoNode extends AbstractNode { \n      public PhotoNode(String photo) { \n        this(photo, new InstanceContent()); \n    } \n\n    private PhotoNode(String photo, InstanceContent ic) { \n      super(Children.LEAF, new AbstractLookup(ic)); \n      final String name = new File(photo).getName(); \n      setName(name); \n      setDisplayName(name); \n\n      ic.add((OpenCookie) () -> { \n        TopComponent tc = findTopComponent(photo); \n        if (tc == null) { \n          tc = new PhotoViewerTopComponent(photo); \n          tc.open(); \n        } \n        tc.requestActive(); \n      }); \n    } \n```", "```java\n    ic.add(new OpenCookie() { \n      @Override \n      public void open() { \n      } \n    }); \n```", "```java\n    private TopComponent findTopComponent(String photo) { \n      Set<TopComponent> openTopComponents =  \n        WindowManager.getDefault().getRegistry().getOpened(); \n      for (TopComponent tc : openTopComponents) { \n        if (photo.equals(tc.getLookup().lookup(String.class))) { \n          return tc; \n        } \n      } \n      return null; \n    } \n```", "```java\n    @Override \n    public Action[] getActions(boolean context) { \n      return new Action[]{SystemAction.get(OpenAction.class)}; \n    } \n\n    @Override \n    public Action getPreferredAction() { \n      return SystemAction.get(OpenAction.class); \n    } \n```", "```java\n    public interface PhotoManager extends Lookup.Provider { \n      void scanSourceDirs(); \n      List<String> getYears(); \n      List<String> getMonths(int year); \n      List<String> getPhotos(int year, int month); \n    } \n```", "```java\n    @ServiceProvider(service = PhotoManager.class) \n    public class PhotoManagerImpl implements PhotoManager { \n```", "```java\n    public PhotoManagerImpl() throws ClassNotFoundException { \n      setupDatabase(); \n\n      Preferences prefs =  \n        NbPreferences.forModule(PhotoManager.class); \n      setSourceDirs(prefs.get(\"sourceDirs\", \"\")); \n      prefs.addPreferenceChangeListener(evt -> { \n        if (evt.getKey().equals(\"sourceDirs\")) { \n          setSourceDirs(evt.getNewValue()); \n          scanSourceDirs(); \n        } \n      }); \n\n      instanceContent = new InstanceContent(); \n      lookup = new AbstractLookup(instanceContent); \n      scanSourceDirs(); \n    } \n```", "```java\n    private void setupDatabase() { \n      try { \n       connection = DriverManager.getConnection(JDBC_URL); \n       if (!doesTableExist()) { \n         createTable(); \n       } \n      } catch (SQLException ex) { \n        Exceptions.printStackTrace(ex); \n      } \n    } \n\n    private boolean doesTableExist() { \n      try (Statement stmt = connection.createStatement()) { \n        ResultSet rs = stmt.executeQuery(\"select 1 from images\"); \n        rs.close(); \n        return true; \n      } catch (SQLException e) { \n        return false; \n      } \n    } \n\n    private void createTable() { \n      try (Statement stmt = connection.createStatement()) { \n        stmt.execute( \n          \"CREATE TABLE images (imageSource VARCHAR2(4096), \" \n          + \" year int, month int, image VARCHAR2(4096));\"); \n          stmt.execute( \n            \"CREATE UNIQUE INDEX uniq_img ON images(image);\"); \n      } catch (SQLException e) { \n        Exceptions.printStackTrace(e); \n      } \n    } \n```", "```java\n    @Override \n    public List<String> getYears() { \n      List<String> years = new ArrayList<>(); \n      try (Statement yearStmt = connection.createStatement(); \n      ResultSet rs = yearStmt.executeQuery( \n        \"SELECT DISTINCT year FROM images ORDER BY year\")) { \n          while (rs.next()) { \n            years.add(rs.getString(1)); \n          } \n        } catch (SQLException ex) { \n          Exceptions.printStackTrace(ex); \n        } \n      return years; \n    } \n```", "```java\n    private final ExecutorService executorService =  \n      Executors.newFixedThreadPool(5); \n    public final void scanSourceDirs() { \n      RequestProcessor.getDefault().execute(() -> { \n        List<Future<List<Photo>>> futures = new ArrayList<>(); \n        sourceDirs.stream() \n         .map(d -> new SourceDirScanner(d)) \n         .forEach(sds ->  \n          futures.add((Future<List<Photo>>)  \n          executorService.submit(sds))); \n        futures.forEach(f -> { \n          try { \n            final List<Photo> list = f.get(); \n            processPhotos(list); \n          } catch (InterruptedException|ExecutionException ex) { \n            Exceptions.printStackTrace(ex); \n          } \n        }); \n        instanceContent.add(new ReloadCookie()); \n      }); \n    } \n```", "```java\n    private void processPhotos(List<Photo> photos) { \n      photos.stream() \n       .filter(p -> !isImageRecorded(p)) \n       .forEach(p -> insertImage(p)); \n    } \n```", "```java\n    private boolean isImageRecorded(Photo photo) { \n      boolean there = false; \n      try (PreparedStatement imageExistStatement =  \n        connection.prepareStatement( \n          \"SELECT 1 FROM images WHERE image = ?\")) { \n            imageExistStatement.setString(1, photo.getImage()); \n            final ResultSet rs = imageExistStatement.executeQuery(); \n            there = rs.next(); \n            close(rs); \n          } catch (SQLException ex) { \n            Exceptions.printStackTrace(ex); \n          } \n      return there; \n    } \n\n    private void insertImage(Photo photo) { \n      try (PreparedStatement insertStatement =  \n       connection.prepareStatement( \n         \"INSERT INTO images (imageSource, year, month, image)\n          VALUES (?, ?, ?, ?);\")) { \n            insertStatement.setString(1, photo.getSourceDir()); \n            insertStatement.setInt(2, photo.getYear()); \n            insertStatement.setInt(3, photo.getMonth()); \n            insertStatement.setString(4, photo.getImage()); \n            insertStatement.executeUpdate(); \n       } catch (SQLException ex) { \n         Exceptions.printStackTrace(ex); \n       } \n    } \n```", "```java\n    public PhotoViewerTopComponent() { \n      this(\"\"); \n    } \n\n    public PhotoViewerTopComponent(String photo) { \n      initComponents(); \n      this.photo = photo; \n      File file = new File(photo); \n      setName(file.getName()); \n      setToolTipText(photo); \n      associateLookup(Lookups.singleton(photo)); \n      setLayout(new BorderLayout()); \n      init(); \n    } \n```", "```java\n    private JFXPanel fxPanel; \n    private void init() { \n      fxPanel = new JFXPanel(); \n      add(fxPanel, BorderLayout.CENTER); \n      Platform.setImplicitExit(false); \n      Platform.runLater(this::createScene); \n    } \n```", "```java\n    <BorderPane fx:id=\"borderPane\" prefHeight=\"480.0\"  \n      prefWidth=\"600.0\"  \n\n      fx:controller= \n        \"com.steeplesoft.photobeans.main.PhotoViewerController\"> \n      <center> \n        <ScrollPane fx:id=\"scrollPane\"> \n          <content> \n            <Group> \n              <children> \n                <ImageView fx:id=\"imageView\"  \n                  preserveRatio=\"true\" /> \n              </children> \n            </Group> \n          </content> \n        </ScrollPane> \n      </center> \n    </BorderPane> \n```", "```java\n    @FXML \n    private BorderPane borderPane; \n    @FXML \n    private ScrollPane scrollPane; \n    public void initialize(URL location,\n     ResourceBundle resources) { \n       imageView.fitWidthProperty() \n        .bind(borderPane.widthProperty()); \n       imageView.fitHeightProperty() \n        .bind(borderPane.heightProperty()); \n    } \n```", "```java\n    <top> \n      <ButtonBar prefHeight=\"40.0\" prefWidth=\"200.0\"  \n         BorderPane.alignment=\"CENTER\"> \n         <buttons> \n           <SplitMenuButton mnemonicParsing=\"false\" \n             text=\"Rotate\"> \n              <items> \n                <MenuItem onAction=\"#rotateLeft\"  \n                  text=\"Left 90°\" /> \n                <MenuItem onAction=\"#rotateRight\"  \n                  text=\"Right 90°\" /> \n              </items> \n            </SplitMenuButton> \n         </buttons> \n      </ButtonBar> \n    </top> \n```", "```java\n    @FXML \n    public void rotateLeft(ActionEvent event) { \n      imageView.setRotate(imageView.getRotate() - 90); \n    } \n    @FXML \n    public void rotateRight(ActionEvent event) { \n      imageView.setRotate(imageView.getRotate() + 90); \n    } \n```", "```java\n    @OptionsPanelController.ContainerRegistration(id = \"PhotoBeans\", \n      categoryName = \"#OptionsCategory_Name_PhotoBeans\",  \n      iconBase = \"com/steeplesoft/photobeans/main/options/\n       camera-icon-32x32.png\",  \n       keywords = \"#OptionsCategory_Keywords_PhotoBeans\",  \n       keywordsCategory = \"PhotoBeans\") \n    @NbBundle.Messages(value = { \n      \"OptionsCategory_Name_PhotoBeans=PhotoBeans\",  \n      \"OptionsCategory_Keywords_PhotoBeans=photo\"}) \n    package com.steeplesoft.photobeans.main.options; \n\n    import org.netbeans.spi.options.OptionsPanelController; \n    import org.openide.util.NbBundle; \n```", "```java\n    private void buttonAddActionPerformed(ActionEvent evt) {                                               \n      String lastDir = NbPreferences \n       .forModule(PhotoManager.class).get(\"lastDir\", null); \n      JFileChooser chooser = new JFileChooser(); \n      if (lastDir != null) { \n        chooser.setCurrentDirectory( \n          new java.io.File(lastDir)); \n      } \n      chooser.setDialogTitle(\"Add Source Directory\"); \n      chooser.setFileSelectionMode(\n        JFileChooser.DIRECTORIES_ONLY); \n      chooser.setAcceptAllFileFilterUsed(false); \n      if (chooser.showOpenDialog(null) ==  \n        JFileChooser.APPROVE_OPTION) { \n          try { \n            String dir = chooser.getSelectedFile() \n            .getCanonicalPath(); \n            ensureModel().addElement(dir); \n            NbPreferences.forModule(PhotoManager.class) \n            .put(\"lastDir\", dir); \n          } catch (IOException ex) { \n              Exceptions.printStackTrace(ex); \n            } \n        } else { \n            System.out.println(\"No Selection \"); \n          } \n    } \n```", "```java\n        private void buttonRemoveActionPerformed(ActionEvent evt) {                                              \n          List<Integer> indexes = IntStream.of( \n            sourceList.getSelectedIndices()) \n            .boxed().collect(Collectors.toList()); \n          Collections.sort(indexes); \n          Collections.reverse(indexes); \n          indexes.forEach(i -> ensureModel().remove(i)); \n        } \n```", "```java\n    private DefaultListModel<String> ensureModel() { \n      if (model == null) { \n        model = new DefaultListModel<>(); \n        sourceList.setModel(model); \n      } \n      return model; \n    } \n```", "```java\n    protected void load() { \n      String dirs = NbPreferences \n       .forModule(PhotoManager.class).get(\"sourceDirs\", \"\"); \n      if (dirs != null && !dirs.isEmpty()) { \n        ensureModel(); \n        model.clear(); \n        Set<String> set = new HashSet<>( \n          Arrays.asList(dirs.split(\";\"))); \n        set.forEach(i -> model.addElement(i)); \n      } \n    } \n```", "```java\n    protected void store() { \n      Set<String> dirs = new HashSet<>(); \n      ensureModel(); \n      for (int i = 0; i < model.getSize(); i++) { \n        final String dir = model.getElementAt(i); \n        if (dir != null && !dir.isEmpty()) { \n          dirs.add(dir); \n        } \n      } \n      if (!dirs.isEmpty()) { \n        NbPreferences.forModule(PhotoManager.class) \n        .put(\"sourceDirs\", String.join(\";\", dirs)); \n      } else { \n        NbPreferences.forModule(PhotoManager.class) \n          .remove(\"sourceDirs\"); \n      } \n    } \n```", "```java\n    prefs.addPreferenceChangeListener(evt -> { \n      if (evt.getKey().equals(\"sourceDirs\")) { \n        setSourceDirs(evt.getNewValue()); \n        scanSourceDirs(); \n      } \n    }); \n```", "```java\n    instanceContent.add(new ReloadCookie()); \n```", "```java\n    public class ReloadCookie { \n    } \n```", "```java\n    reloadResult = photoManager.getLookup().lookup( \n      new Lookup.Template(ReloadCookie.class)); \n    reloadResult.addLookupListener(event -> setChildren( \n      Children.create(new YearChildFactory(), true))); \n```"]