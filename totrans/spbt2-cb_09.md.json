["```java\n... \napply plugin: 'docker' \n\ndependencyManagement { \n    imports { \n        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Finchley.BUILD-SNAPSHOT' \n    } \n} \n\njar { \n    baseName = 'bookpub' \n    version = '0.0.1-SNAPSHOT' \n} \n\n... \n\ndependencies { \n    ... \n    compile(\"org.springframework.boot:spring-boot-devtools\") \n    compile(\"org.springframework.cloud:spring-cloud-context\") \n    compile(\"org.springframework.cloud:spring-cloud-commons\") \n    runtime(\"com.h2database:h2\") \n    ... \n}\n```", "```java\n{ \n  \"name\": \"springCloudClientHostInfo\", \n  \"properties\": { \n    \"spring.cloud.client.hostname\": { \n      \"value\": \"127.0.0.1\" \n    }, \n    \"spring.cloud.client.ip-address\": { \n      \"value\": \"127.0.0.1\" \n    } \n  } \n} \n```", "```java\nspring.application.name=BookPub-ch9 \n```", "```java\n{ \n  \"name\": \"applicationConfig: [classpath:/bootstrap.properties]\", \n  \"properties\": { \n    \"spring.application.name\": { \n      \"value\": \"BookPub-ch9\", \n      \"origin\": \"class path resource [bootstrap.properties]:1:25\" \n    } \n  } \n}\n```", "```java\n... \n\ndependencies { \n    ... \n    compile(\"io.dropwizard.metrics:metrics-graphite:3.1.0\") \n    compile(\"org.springframework.boot:spring-boot-devtools\") \n    //compile(\"org.springframework.cloud:spring-cloud-context\") \n    //compile(\"org.springframework.cloud:spring-cloud-commons\") \n    compile(\"org.springframework.cloud:spring-cloud-starter-consul-all\") \n    runtime(\"com.h2database:h2\") \n    ... \n} \n... \n```", "```java\n... \n@EnableScheduling \n@EnableDbCounting \n@EnableDiscoveryClient \npublic class BookPubApplication { \n    ... \n}\n```", "```java\n==> Starting Consul agent... \n==> Starting Consul agent RPC... \n==> Consul agent running! \n           Version: 'v1.0.2' \n... \n```", "```java\n... \n2017-12-26 --- b.c.PropertySourceBootstrapConfiguration : Located property source: CompositePropertySource [name='consul', propertySources=[ConsulPropertySource [name='config/BookPub-ch9/'], ConsulPropertySource [name='config/application/']]] \n... \n2017-12-26 --- o.s.c.consul.discovery.ConsulLifecycle   : Registering service with consul: NewService{id='BookPub-ch9-8080', name='BookPub-ch9', tags=[], address='<your_machine_name>', port=8080, check=Check{script='null', interval=10s, ttl=null, http=http://<your_machine_name>:8081/health, tcp=null, timeout=null}} \n2017-12-26 --- o.s.c.consul.discovery.ConsulLifecycle   : Registering service with consul: NewService{id='BookPub-ch9-8080-management', name='BookPub-ch9-management', tags=[management], address='://<your_machine_name>', port=8081, check=Check{script='null', interval=10s, ttl=null, http=http://chic02qv045g8wn:8081/health, tcp=null, timeout=null}} \n...\n```", "```java\n# Discovery Client Configuration \norg.springframework.cloud.client.discovery.EnableDiscoveryClient=\\ \norg.springframework.cloud.consul.discovery.ConsulDiscoveryClientConfiguration\n```", "```java\ndependencies { \n    ... \n    compile(\"org.springframework.cloud:spring-\n    cloud-starter-consul-all\") \n    compile(\"org.springframework.cloud:spring-\n    cloud-starter-openfeign\") \n    runtime(\"com.h2database:h2\") \n    ... \n} \n```", "```java\npackage com.example.bookpub.api; \n\nimport com.example.bookpub.entity.Book; \nimport org.springframework.cloud.netflix.feign.FeignClient; \nimport org.springframework.web.bind.annotation.PathVariable; \nimport org.springframework.web.bind.annotation.RequestMapping; \nimport org.springframework.web.bind.annotation.RequestMethod; \n\n@FeignClient(\"http://BookPub-ch9\") \npublic interface BookPubClient { \n    @RequestMapping(value = \"/books/{isbn}\",  \n                    method = RequestMethod.GET) \n    public Book findBookByIsbn(@PathVariable(\"isbn\") String isbn); \n}\n```", "```java\n... \n@EnableDiscoveryClient \n@EnableFeignClients \npublic class BookPubApplication {...} \n```", "```java\n... \n@RestController \n@RequestMapping(\"/client\") \npublic class ClientController { \n\n    @Autowired \n    private BookPubClient client; \n\n    @RequestMapping(value = \"/book/{isbn}\",  \n                    method = RequestMethod.GET) \n    public Book getBook(@PathVariable String isbn) { \n        return client.findBookByIsbn(isbn); \n    } \n} \n```", "```java\n2017-12-26 --- c.n.u.concurrent.ShutdownEnabledTimer : Shutdown hook installed for: NFLoadBalancer-PingTimer-BookPub-ch9\n2017-12-26 --- c.netflix.loadbalancer.BaseLoadBalancer : Client:BookPub-ch9 instantiated a LoadBalancer:DynamicServerListLoadBalancer:{NFLoadBalancer:name=BookPub-ch9,current list of Servers=[],Load balancer stats=Zone stats: {},Server stats: []}ServerList:null\n2017-12-26 --- c.n.l.DynamicServerListLoadBalancer : Using serverListUpdater PollingServerListUpdater\n 2017-12-26 --- c.netflix.config.ChainedDynamicProperty : Flipping property: BookPub-ch9.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647\n 2017-12-26 --- c.n.l.DynamicServerListLoadBalancer : DynamicServerListLoadBalancer for client BookPub-ch9 initialized: DynamicServerListLoadBalancer:{NFLoadBalancer:name=BookPub-ch9,current list of Servers=[192.168.1.194:8080],Load balancer stats=Zone stats: {unknown=[Zone:unknown; Instance count:1; Active connections count: 0; Circuit breaker tripped count: 0; Active connections per server: 0.0;]\n },Server stats: [[Server:192.168.1.194:8080; Zone:UNKNOWN; Total Requests:0; Successive connection failure:0; Total blackout seconds:0; Last connection made:Wed Dec 31 18:00:00 CST 1969; First connection made: Wed Dec 31 18:00:00 CST 1969; Active Connections:0; total failure count in last (1000) msecs:0; average resp time:0.0; 90 percentile resp time:0.0; 95 percentile resp time:0.0; min resp time:0.0; max resp time:0.0; stddev resp time:0.0]\n ]}ServerList:ConsulServerList{serviceId='BookPub-ch9', tag=null}\n```", "```java\nspring.cloud.bus.enabled=false \nspring.cloud.consul.enabled=false \nspring.cloud.consul.discovery.enabled=false \neureka.client.enabled=false \nautoconfigure.exclude=com.example.bookpub.\nMonitoringConfiguration.class \n```", "```java\n@MockBean \nprivate BookPubClient client; \n```", "```java\n//compile(\"org.springframework.cloud:spring-cloud-starter-consul-all\") \ncompile(\"org.springframework.cloud:spring-cloud-starter-feign\") \ncompile(\"org.springframework.cloud:spring-cloud-starter-eureka-client\") \n```", "```java\nWARN 5592 --- [  restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jmxMBeanExporter' defined in class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/jmx/JmxEndpointAutoConfiguration.class]: Invocation of init method failed; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.springframework.cloud.client.serviceregistry.ServiceRegistryAutoConfiguration$ServiceRegistryEndpointConfiguration': Unsatisfied dependency expressed through field 'registration'; nested exception is org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'org.springframework.cloud.client.serviceregistry.Registration' available: expected single matching bean but found 2: eurekaRegistration,consulRegistration  \n```", "```java\ndependencies { \n    ... \n    compile(\"org.springframework.cloud:\n     spring-cloud-starter-consul-all\") \n    compile(\"org.springframework.cloud:\n     spring-cloud-starter-openfeign\") \n    compile(\"org.springframework.cloud:\n     spring-cloud-starter-eureka-client\") \n    compile(\"org.springframework.cloud:\n     spring-cloud-starter-netflix-hystrix\") \n    runtime(\"com.h2database:h2\") \n    runtime(\"mysql:mysql-connector-java\") \n    ... \n} \n```", "```java\n... \n@EnableDiscoveryClient \n@EnableFeignClients \n@EnableCircuitBreaker \npublic class BookPubApplication {...}\n```", "```java\n@RequestMapping(value = \"\", method = RequestMethod.GET) \n@HystrixCommand(fallbackMethod = \"getEmptyBooksList\") \npublic Iterable<Book> getAllBooks() { \n    //return bookRepository.findAll(); \n    throw new RuntimeException(\"Books Service Not Available\"); \n} \n\npublic Iterable<Book> getEmptyBooksList() { \n    return Collections.emptyList(); \n} \n... \n```", "```java\n@OneToMany(mappedBy = \"author\", fetch = FetchType.EAGER) \nprivate List<Book> books; \n```", "```java\n@ManyToOne(fetch = FetchType.EAGER) \nprivate Author author; \n\n@ManyToOne(fetch = FetchType.EAGER) \nprivate Publisher publisher; \n\n@ManyToMany(fetch = FetchType.EAGER) \nprivate List<Reviewer> reviewers; \n```", "```java\n@OneToMany(mappedBy = \"publisher\", fetch = FetchType.EAGER) \nprivate List<Book> books; \n```", "```java\nfailed to lazily initialize a collection of role: com.example.bookpub.entity.Book.reviewers, could not initialize proxy - no Session (through reference chain: com.example.bookpub.entity.Publisher[\"books\"]->org.hibernate.collection.internal.PersistentBag[0]->com.example.bookpub.entity.Book[\"reviewers\"])\n```", "```java\ncommandProperties = { \n  @HystrixProperty(name=\"execution.isolation.strategy\", \n                   value=\"SEMAPHORE\") \n} \n```"]