["```java\nctx.select(field(name(\"t\", \"first_name\")), \n```", "```java\n           field(name(\"t\", \"last_name\")))\n```", "```java\n   .from(EMPLOYEE.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t\", \"product_id\")), \n```", "```java\n           field(name(\"t\", \"product_name\")),\n```", "```java\n           field(selectCount()\n```", "```java\n                  .from(PRODUCT)\n```", "```java\n                  .where(PRODUCT.PRODUCT_ID.eq(\n```", "```java\n                     field(name(\"t\", \"product_id\"), \n```", "```java\n                       Long.class)))).as(\"count\"))\n```", "```java\n   .from(PRODUCT.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME.as(\"fn\"), \n```", "```java\n           EMPLOYEE.LAST_NAME.as(\"ln\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(concat(EMPLOYEE.FIRST_NAME, \n```", "```java\n           inline(\" \"), EMPLOYEE.LAST_NAME).as(\"name\"),\n```", "```java\n           EMPLOYEE.EMAIL.as(\"contact\"), \n```", "```java\n           EMPLOYEE.REPORTS_TO.as(\"boss_id\"))\n```", "```java\n   .from(EMPLOYEE).fetch();\n```", "```java\nctx.select(OFFICE.CITY, DEPARTMENT.NAME, DEPARTMENT.PROFIT)\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .join(DEPARTMENT)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(DEPARTMENT.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(\"t1.city\"), \n```", "```java\n           field(\"t2.name\"), field(\"t2.profit\"))\n```", "```java\n   .from(OFFICE.as(\"t1\"))\n```", "```java\n   .join(DEPARTMENT.as(\"t2\"))\n```", "```java\n   .on(field(\"t1.office_code\").eq(field(\"t2.office_code\")))\n```", "```java\n   .fetch();\n```", "```java\nName orderId = name(\"ORDER\", \"ORDER_ID\");\n```", "```java\nField orderId = field(name(\"ORDER\", \"ORDER_ID\"));\n```", "```java\nTable t = table(name(\"ORDER\"));\n```", "```java\n// `ORDER`.ORDER_ID\n```", "```java\nName orderId = name(quotedName(\"ORDER\"), \n```", "```java\n                    unquotedName(\"ORDER_ID\"));\n```", "```java\nFor MySQL, jOOQ render this SQL:\n```", "```java\nselect `T`.`FIRST_NAME` as `FN`, `T`.`LAST_NAME` as `LN` \n```", "```java\nfrom `CLASSICMODELS`.`EMPLOYEE` as `T`\n```", "```java\nctx.configuration().derive(new Settings()\n```", "```java\n   .withRenderQuotedNames(RenderQuotedNames.ALWAYS)\n```", "```java\n   .withRenderNameCase(RenderNameCase.UPPER))\n```", "```java\n   .dsl()\n```", "```java\n   .select(field(name(\"t\", \"first_name\")).as(\"fn\"), \n```", "```java\n           field(name(\"t\", \"last_name\")).as(\"ln\"))\n```", "```java\n   .from(EMPLOYEE.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t1\", \"city\")), \n```", "```java\n      field(name(\"t2\", \"name\")), field(name(\"t2\", \"profit\")))\n```", "```java\n   .from(OFFICE.as(name(\"t1\")))\n```", "```java\n   .join(DEPARTMENT.as(name(\"t2\")))\n```", "```java\n   .on(field(name(\"t1\", \"office_code\"))\n```", "```java\n        .eq(field(name(\"t2\", \"office_code\"))))\n```", "```java\n   .fetch();\n```", "```java\nOffice t1 = OFFICE.as(\"t1\");\n```", "```java\nDepartment t2 = DEPARTMENT.as(\"t2\");\n```", "```java\nctx.select(t1.CITY, t2.NAME, t2.PROFIT)\n```", "```java\n   .from(t1)\n```", "```java\n   .join(t2)\n```", "```java\n   .on(t1.OFFICE_CODE.eq(t2.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nDepartment t = DEPARTMENT.as(\"t\"); \n```", "```java\n// or, Department t = DEPARTMENT;\n```", "```java\nctx.select(OFFICE.CITY, t.NAME, t.PROFIT)\n```", "```java\n   .from(OFFICE)\n```", "```java\n   .join(t)\n```", "```java\n   .on(OFFICE.OFFICE_CODE.eq(t.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nTable<Record1<String>> t3 = \n```", "```java\n  ctx.select(t1.CITY).from(t1).asTable(\"t3\");\n```", "```java\nctx.select(t3.field(name(\"city\")), \n```", "```java\n      CUSTOMERDETAIL.CUSTOMER_NUMBER)\n```", "```java\n   .from(t3)\n```", "```java\n   .join(CUSTOMERDETAIL)\n```", "```java\n   .on(t3.field(name(\"city\"), String.class)\n```", "```java\n     .eq(CUSTOMERDETAIL.CITY))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(t3.field(t1.CITY), CUSTOMERDETAIL.CUSTOMER_NUMBER)\n```", "```java\n   .from(t3)\n```", "```java\n   .join(CUSTOMERDETAIL)\n```", "```java\n   .on(t3.field(t1.CITY).eq(CUSTOMERDETAIL.CITY))\n```", "```java\n   .fetch();\n```", "```java\nSELECT [classicmodels].[dbo].[product].[product_line] [pl]\n```", "```java\nFROM [classicmodels].[dbo].[product]\n```", "```java\nGROUP BY [classicmodels].[dbo].[product].[product_line]\n```", "```java\nORDER BY [pl]\n```", "```java\nField<String> pl = PRODUCT.PRODUCT_LINE.as(\"pl\");     \n```", "```java\nctx.select(pl)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .groupBy(pl)\n```", "```java\n   .orderBy(pl)\n```", "```java\n   .fetch();\n```", "```java\nField<String> pl1 = PRODUCT.PRODUCT_LINE.as(\"pl\");     \n```", "```java\nField<String> pl2 = PRODUCT.PRODUCT_LINE;   \n```", "```java\nctx.select(pl1)\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .groupBy(pl2)\n```", "```java\n   .orderBy(pl1)\n```", "```java\n   .fetch();\n```", "```java\nSELECT [classicmodels].[dbo].[office].[city]\n```", "```java\nFROM [classicmodels].[dbo].[office] [t]\n```", "```java\n// SELECT t FROM [classicmodels].[dbo].[office] [t]        \n```", "```java\nctx.select(field(\"t\", \"city\"))\n```", "```java\n   .from(OFFICE.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\n// SELECT [t].[office_code], [t].[city], ..., [t].[location] \n```", "```java\n// FROM [classicmodels].[dbo].[office] [t]\n```", "```java\nctx.select(table(\"t\").field(\"city\"))\n```", "```java\n   .from(OFFICE.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\n// SELECT [city] FROM [classicmodels].[dbo].[office] [t]\n```", "```java\nctx.select(field(name(\"city\")))\n```", "```java\n   .from(OFFICE.as(\"t\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"city\")))                   \n```", "```java\n   .from(OFFICE.as(\"t1\"), CUSTOMERDETAIL.as(\"t2\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(name(\"t1\", \"city\")).as(\"city_office\"),     \n```", "```java\n           field(name(\"t2\", \"city\")).as(\"city_customer\"))\n```", "```java\n   .from(OFFICE.as(\"t1\"), CUSTOMERDETAIL.as(\"t2\"))\n```", "```java\n   .fetch();\n```", "```java\nOffice t1 = OFFICE.as(\"t1\");\n```", "```java\nCustomerdetail t2 = CUSTOMERDETAIL.as(\"t2\");\n```", "```java\nctx.select(t1.CITY, t2.CITY)\n```", "```java\n   .from(t1, t2)\n```", "```java\n   .fetch();\n```", "```java\nField<String> c1 = t1.CITY.as(\"city_office\");\n```", "```java\nField<String> c2 = t2.CITY.as(\"city_customer\");\n```", "```java\nctx.select(c1, c2)\n```", "```java\n   .from(t1, t2)\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE\n```", "```java\n   .leftOuterJoin(DEPARTMENT)\n```", "```java\n     .on(OFFICE.OFFICE_CODE.eq(DEPARTMENT.OFFICE_CODE)))\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n     .on(EMPLOYEE.OFFICE_CODE.eq(\n```", "```java\n        field(name(\"office_code\"), String.class)))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE.as(\"o\")\n```", "```java\n   .leftOuterJoin(DEPARTMENT.as(\"d\"))\n```", "```java\n     .on(field(name(\"o\",\"office_code\"))\n```", "```java\n       .eq(field(name(\"d\",\"office_code\")))))\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n     .on(EMPLOYEE.OFFICE_CODE.eq(OFFICE.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select()\n```", "```java\n   .from(OFFICE.as(\"o\")\n```", "```java\n   .leftOuterJoin(DEPARTMENT.as(\"d\"))\n```", "```java\n     .on(field(name(\"o\",\"office_code\"))\n```", "```java\n       .eq(field(name(\"d\",\"office_code\")))))\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n     .on(EMPLOYEE.OFFICE_CODE\n```", "```java\n       .eq(field(name(\"o\",\"office_code\"), String.class)))\n```", "```java\n   .fetch();\n```", "```java\nOffice o = OFFICE.as(\"o\");\n```", "```java\nDepartment d = DEPARTMENT.as(\"d\");\n```", "```java\nctx.select()\n```", "```java\n   .from(o.leftOuterJoin(d)\n```", "```java\n   .on(o.OFFICE_CODE.eq(d.OFFICE_CODE)))\n```", "```java\n   .innerJoin(EMPLOYEE)\n```", "```java\n     .on(EMPLOYEE.OFFICE_CODE.eq(o.OFFICE_CODE))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(\"s1.msrp\"), field(\"s2.msrp\"))\n```", "```java\n   .from(PRODUCT.as(\"s1\"), PRODUCT.as(\"s2\"))\n```", "```java\n   .where(field(\"s1.msrp\").lt(field(\"s2.msrp\"))\n```", "```java\n      .and(field(\"s1.product_line\").eq(\"s2.product_line\")))\n```", "```java\n   .groupBy(field(\"s1.msrp\"), field(\"s2.msrp\"))\n```", "```java\n   .having(count().eq(selectCount().from(PRODUCT.as(\"s3\"))\n```", "```java\n   .where(field(\"s3.msrp\").eq(field(\"s1.msrp\"))))\n```", "```java\n      .and(count().eq(selectCount().from(PRODUCT.as(\"s4\"))\n```", "```java\n      .where(field(\"s4.msrp\").eq(field(\"s2.msrp\"))))))\n```", "```java\n   .fetch();\n```", "```java\nProduct s1 = PRODUCT.as(\"s1\");\n```", "```java\nProduct s2 = PRODUCT.as(\"s2\");\n```", "```java\nProduct s3 = PRODUCT.as(\"s3\");\n```", "```java\nProduct s4 = PRODUCT.as(\"s4\");\n```", "```java\nctx.select(s1.MSRP, s2.MSRP)\n```", "```java\n   .from(s1, s2)\n```", "```java\n   .where(s1.MSRP.lt(s2.MSRP)\n```", "```java\n   .and(s1.PRODUCT_LINE.eq(s2.PRODUCT_LINE)))\n```", "```java\n   .groupBy(s1.MSRP, s2.MSRP)\n```", "```java\n   .having(count().eq(selectCount().from(s3)\n```", "```java\n     .where(s3.MSRP.eq(s1.MSRP)))\n```", "```java\n     .and(count().eq(selectCount().from(s4)\n```", "```java\n     .where(s4.MSRP.eq(s2.MSRP)))))\n```", "```java\n   .fetch();\n```", "```java\nctx.select().from(\n```", "```java\n select(CUSTOMER.CUSTOMER_NUMBER, \n```", "```java\n        CUSTOMER.CUSTOMER_NAME, field(\"t.invoice_amount\"))\n```", "```java\n .from(CUSTOMER)\n```", "```java\n .join(select(PAYMENT.CUSTOMER_NUMBER, \n```", "```java\n              PAYMENT.INVOICE_AMOUNT)\n```", "```java\n        .from(PAYMENT).asTable(\"t\"))\n```", "```java\n  .on(field(\"t.customer_number\")\n```", "```java\n    .eq(CUSTOMER.CUSTOMER_NUMBER))) \n```", "```java\n .fetch();\n```", "```java\nSELECT `alias_84938429`.`customer_number`,\n```", "```java\n       `alias_84938429`.`customer_name`,\n```", "```java\n       `alias_84938429`.t.invoice_amount\n```", "```java\nFROM\n```", "```java\n  (SELECT `classicmodels`.`customer`.`customer_number`,\n```", "```java\n          `classicmodels`.`customer`.`customer_name`,\n```", "```java\n          t.invoice_amount\n```", "```java\n   FROM `classicmodels`.`customer`\n```", "```java\n   JOIN\n```", "```java\n     (SELECT `classicmodels`.`payment`.`customer_number`,\n```", "```java\n             `classicmodels`.`payment`.`invoice_amount`\n```", "```java\n      FROM `classicmodels`.`payment`) AS `t` ON \n```", "```java\n       t.customer_number = \n```", "```java\n        `classicmodels`.`customer`.`customer_number`) \n```", "```java\n      AS `alias_84938429\n```", "```java\nctx.select().from(select(CUSTOMER.CUSTOMER_NUMBER,   \n```", "```java\nCUSTOMER.CUSTOMER_NAME, field(name(\"t\", \"invoice_amount\")))\n```", "```java\n   .from(CUSTOMER)\n```", "```java\n   .join(\n```", "```java\n     select(PAYMENT.CUSTOMER_NUMBER, \n```", "```java\n            PAYMENT.INVOICE_AMOUNT)\n```", "```java\n      .from(PAYMENT).asTable(\"t\"))\n```", "```java\n   .on(field(name(\"t\", \"customer_number\"))\n```", "```java\n     .eq(CUSTOMER.CUSTOMER_NUMBER)))\n```", "```java\n   .fetch();    \n```", "```java\nctx.select()\n```", "```java\n   .from(select(EMPLOYEE.EMPLOYEE_NUMBER.as(\"en\"), \n```", "```java\n                EMPLOYEE.SALARY.as(\"sal\"))\n```", "```java\n             .from(EMPLOYEE)\n```", "```java\n             .where(EMPLOYEE.MONTHLY_BONUS.isNull()))\n```", "```java\n             .innerJoin(SALE)\n```", "```java\n             .on(field(name(\"en\"))\n```", "```java\n             .eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nSELECT `alias_41049514`.`en`,\n```", "```java\n       `alias_41049514`.`sal`,\n```", "```java\n       `classicmodels`.`sale`.`sale_id`,\n```", "```java\n       ...\n```", "```java\nFROM\n```", "```java\n  (SELECT `classicmodels`.`employee`.`employee_number` \n```", "```java\n       AS `en`, `classicmodels`.`employee`.`salary` AS `sal`\n```", "```java\n   FROM `classicmodels`.`employee`\n```", "```java\n   WHERE `classicmodels`.`employee`.`monthly_bonus` IS NULL \n```", "```java\n         ) AS `alias_41049514`\n```", "```java\nJOIN `classicmodels`.`sale` ON `en` = \n```", "```java\n     `classicmodels`.`sale`.`employee_number`\n```", "```java\nctx.select(SALE.SALE_, SALE.FISCAL_YEAR, \n```", "```java\n           field(name(\"t\", \"sal\")))\n```", "```java\n   .from(select(EMPLOYEE.EMPLOYEE_NUMBER.as(\"en\"), \n```", "```java\n                EMPLOYEE.SALARY.as(\"sal\"))\n```", "```java\n         .from(EMPLOYEE)\n```", "```java\n         .where(EMPLOYEE.MONTHLY_BONUS.isNull())\n```", "```java\n                .asTable(\"t\"))\n```", "```java\n         .innerJoin(SALE)\n```", "```java\n          .on(field(name(\"t\", \"en\"))\n```", "```java\n          .eq(SALE.EMPLOYEE_NUMBER))\n```", "```java\n   .fetch();\n```", "```java\nSELECT `classicmodels`.`sale`.`sale`,\n```", "```java\n       `classicmodels`.`sale`.`fiscal_year`,\n```", "```java\n       `t`.`sal`\n```", "```java\nFROM\n```", "```java\n  (SELECT `classicmodels`.`employee`.`employee_number` \n```", "```java\n    AS `en`, `classicmodels`.`employee`.`salary` AS `sal`\n```", "```java\n   FROM `classicmodels`.`employee`\n```", "```java\n   WHERE `classicmodels`.`employee`.`monthly_bonus`  \n```", "```java\n      IS NULL) AS `t`\n```", "```java\nJOIN `classicmodels`.`sale` ON `t`.`en` = \n```", "```java\n     `classicmodels`.`sale`.`employee_number`\n```", "```java\nctx.select(field(name(\"t2\", \"s\")).as(\"c1\"), \n```", "```java\n           field(name(\"t2\", \"y\")).as(\"c2\"), \n```", "```java\n           field(name(\"t2\", \"i\")).as(\"c3\"))\n```", "```java\n   .from(select(SALE.SALE_.as(\"s\"), SALE.FISCAL_YEAR.as(\"y\"), \n```", "```java\n                field(name(\"t1\", \"emp_sal\")).as(\"i\"))\n```", "```java\n          .from(select(EMPLOYEE.EMPLOYEE_NUMBER.as(\"emp_nr\"), \n```", "```java\n               EMPLOYEE.SALARY.as(\"emp_sal\"))\n```", "```java\n                 .from(EMPLOYEE)\n```", "```java\n                 .where(EMPLOYEE.MONTHLY_BONUS.isNull())\n```", "```java\n                 .asTable(\"t1\"))\n```", "```java\n   .innerJoin(SALE)\n```", "```java\n   .on(field(name(\"t1\",\"emp_nr\"))\n```", "```java\n     .eq(SALE.EMPLOYEE_NUMBER)).asTable(\"t2\"))\n```", "```java\n   .fetch();\n```", "```java\nSELECT `t2`.`s` AS `c1`,\n```", "```java\n       `t2`.`y` AS `c2`,\n```", "```java\n       `t2`.`i` AS `c3`\n```", "```java\nFROM\n```", "```java\n  (SELECT `classicmodels`.`sale`.`sale` AS `s`,\n```", "```java\n          `classicmodels`.`sale`.`fiscal_year` AS `y`,\n```", "```java\n          `t1`.`emp_sal` AS `i`\n```", "```java\n   FROM\n```", "```java\n     (SELECT `classicmodels`.`employee`.`employee_number` \n```", "```java\n                 AS `emp_nr`, \n```", "```java\n             `classicmodels`.`employee`.`salary`  \n```", "```java\n                 AS `emp_sal`\n```", "```java\n      FROM `classicmodels`.`employee`\n```", "```java\n      WHERE `classicmodels`.`employee`.`monthly_bonus` \n```", "```java\n        IS NULL) AS `t1`\n```", "```java\n   JOIN `classicmodels`.`sale` ON `t1`.`emp_nr` = \n```", "```java\n        `classicmodels`.`sale`.`employee_number`) AS `t2`\n```", "```java\nctx.select().from(values(row(\"A\", \"John\", 4333, false))\n```", "```java\n  .as(\"T\", \"A\", \"B\", \"C\", \"D\")).fetch();\n```", "```java\nctx.select(min(field(name(\"t\", \"rdate\"))).as(\"cluster_start\"),\n```", "```java\n         max(field(name(\"t\", \"rdate\"))).as(\"cluster_end\"),\n```", "```java\n         min(field(name(\"t\", \"status\"))).as(\"cluster_status\"))\n```", "```java\n    .from(select(ORDER.REQUIRED_DATE, ORDER.STATUS,\n```", "```java\n           rowNumber().over().orderBy(ORDER.REQUIRED_DATE)\n```", "```java\n           .minus(rowNumber().over().partitionBy(ORDER.STATUS)\n```", "```java\n            .orderBy(ORDER.REQUIRED_DATE)))\n```", "```java\n            .from(ORDER)\n```", "```java\n            .asTable(\"t\", \"rdate\", \"status\", \"cluster\"))\n```", "```java\n    .groupBy(field(name(\"t\", \"cluster\")))\n```", "```java\n    .orderBy(1)\n```", "```java\n    .fetch(); \n```", "```java\nctx.select(EMPLOYEE.SALARY,\n```", "```java\n  count(case_().when(EMPLOYEE.SALARY\n```", "```java\n   .gt(0).and(EMPLOYEE.SALARY.lt(50000)), 1)).as(\"< 50000\"),\n```", "```java\n  count(case_().when(EMPLOYEE.SALARY.gt(50000)\n```", "```java\n   .and(EMPLOYEE.SALARY.lt(100000)), 1)).as(\"50000 - 100000\"),\n```", "```java\n  count(case_().when(EMPLOYEE.SALARY\n```", "```java\n   .gt(100000), 1)).as(\"> 100000\"))\n```", "```java\n .from(EMPLOYEE)\n```", "```java\n .groupBy(EMPLOYEE.SALARY)\n```", "```java\n .fetch();\n```", "```java\nctx.select(EMPLOYEE.SALARY,\n```", "```java\n  count().filterWhere(EMPLOYEE.SALARY\n```", "```java\n   .gt(0).and(EMPLOYEE.SALARY.lt(50000))).as(\"< 50000\"),\n```", "```java\n  count().filterWhere(EMPLOYEE.SALARY.gt(50000)\n```", "```java\n   .and(EMPLOYEE.SALARY.lt(100000))).as(\"50000 - 100000\"),\n```", "```java\n  count().filterWhere(EMPLOYEE.SALARY\n```", "```java\n   .gt(100000)).as(\"> 100000\"))               \n```", "```java\n .from(EMPLOYEE)\n```", "```java\n .groupBy(EMPLOYEE.SALARY)\n```", "```java\n .fetch();\n```", "```java\nctx.select(EMPLOYEE.FIRST_NAME, \n```", "```java\n           EMPLOYEE.LAST_NAME, EMPLOYEE.COMMISSION,\n```", "```java\n           field(EMPLOYEE.COMMISSION.isNotNull()).as(\"C\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .fetch();\n```", "```java\nfield/table(String sql)\n```", "```java\nfield(String sql, Class<T> type)\n```", "```java\nfield(String sql, Class<T> type, Object... bindings)\n```", "```java\nfield(String sql, Class<T> type, QueryPart... parts)\n```", "```java\nfield/table(String sql, Object... bindings)\n```", "```java\nfield(String sql, DataType<T> type)\n```", "```java\nfield(String sql, DataType<T> type, Object... bindings)\n```", "```java\nfield(String sql, DataType<T> type, QueryPart... parts)\n```", "```java\nfield/table(String sql, QueryPart... parts)\n```", "```java\nfrom/where/join …(String string)\n```", "```java\nfrom/where/join …(String string, Object... os)\n```", "```java\nfrom/where/join …(String string, QueryPart... qps)\n```", "```java\nctx.fetch(\"\"\"\n```", "```java\n          SELECT first_name, last_name\n```", "```java\n          FROM employee WHERE salary > ? AND job_title = ?\n```", "```java\n          \"\"\", 5000, \"Sales Rep\");\n```", "```java\nctx.resultQuery(\"\"\"\n```", "```java\n           SELECT first_name, last_name\n```", "```java\n           FROM employee WHERE salary > ? AND job_title = ?\n```", "```java\n           \"\"\", 5000, \"Sales Rep\")\n```", "```java\n   .fetch();\n```", "```java\nctx.query(\"\"\"\n```", "```java\n          UPDATE product SET product.quantity_in_stock = ? \n```", "```java\n          WHERE product.product_id = ?\n```", "```java\n          \"\"\", 0, 2)\n```", "```java\n   .execute();\n```", "```java\nctx.queries(query(\"\"), query(\"\"), query(\"\"))\n```", "```java\n           .executeBatch();\n```", "```java\nSELECT `classicmodels`.`office`.`office_code`,\n```", "```java\n       ...\n```", "```java\n       `classicmodels`.`customerdetail`.`customer_number`,\n```", "```java\n       ...\n```", "```java\nFROM `classicmodels`.`office`\n```", "```java\nJOIN `classicmodels`.`customerdetail` \n```", "```java\nON `classicmodels`.`office`.`postal_code` =   \n```", "```java\n   `classicmodels`.`customerdetail`.`postal_code`\n```", "```java\nWHERE not((\n```", "```java\n  `classicmodels`.`office`.`city`,   \n```", "```java\n`classicmodels`.`office`.`country`) \n```", "```java\n   <=> (`classicmodels`.`customerdetail`.`city`,   \n```", "```java\n        `classicmodels`.`customerdetail`.`country`))\n```", "```java\nctx.select() \n```", "```java\n   .from(OFFICE) \n```", "```java\n   .innerJoin(CUSTOMERDETAIL) \n```", "```java\n   .on(OFFICE.POSTAL_CODE.eq(CUSTOMERDETAIL.POSTAL_CODE)) \n```", "```java\n   .where(\"\"\"\n```", "```java\n            not(\n```", "```java\n                 (\n```", "```java\n                   `classicmodels`.`office`.`city`, \n```", "```java\n                   `classicmodels`.`office`.`country`\n```", "```java\n                 ) <=> (\n```", "```java\n                   `classicmodels`.`customerdetail`.`city`, \n```", "```java\n                   `classicmodels`.`customerdetail`.`country`\n```", "```java\n                 )\n```", "```java\n               )\n```", "```java\n          \"\"\") \n```", "```java\n   .fetch();\n```", "```java\nctx.select() \n```", "```java\n   .from(OFFICE) \n```", "```java\n   .innerJoin(CUSTOMERDETAIL) \n```", "```java\n   .on(OFFICE.POSTAL_CODE.eq(CUSTOMERDETAIL.POSTAL_CODE)) \n```", "```java\n   .where(row(OFFICE.CITY, OFFICE.COUNTRY)\n```", "```java\n   .isDistinctFrom(row(\n```", "```java\n      CUSTOMERDETAIL.CITY, CUSTOMERDETAIL.COUNTRY))) \n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_NAME,\n```", "```java\n           field(\"CONCAT_WS({0}, {1}, {2})\", \n```", "```java\n                 String.class, val(\"-\"), \n```", "```java\n                 PRODUCT.BUY_PRICE, PRODUCT.MSRP))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nctx.select(PRODUCT.PRODUCT_NAME,\n```", "```java\n           field(\"CONCAT_WS({0}, {1})\", \n```", "```java\n                 String.class, val(\"-\"), \n```", "```java\n                 list(PRODUCT.BUY_PRICE, PRODUCT.MSRP)))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\nSELECT `classicmodels`.`employee`.`job_title`,\n```", "```java\n   `classicmodels`.`employee`.`salary`, \n```", "```java\n   @num := if(@type = `classicmodels`.`employee`.\n```", "```java\n              `job_title`, @num + 1, 1) AS `rn`, \n```", "```java\n   @type := `classicmodels`.`employee`.`job_title` AS `dummy`\n```", "```java\nFROM `classicmodels`.`employee`\n```", "```java\nORDER BY `classicmodels`.`employee`.`job_title`,\n```", "```java\n         `classicmodels`.`employee`.`salary`   \n```", "```java\nctx.select(EMPLOYEE.JOB_TITLE, EMPLOYEE.SALARY,\n```", "```java\n        field(\"@num := if(@type = {0}, @num + 1, 1)\", \n```", "```java\n        EMPLOYEE.JOB_TITLE).as(\"rn\"),\n```", "```java\n        field(\"@type := {0}\", EMPLOYEE.JOB_TITLE).as(\"dummy\"))\n```", "```java\n   .from(EMPLOYEE)\n```", "```java\n   .orderBy(EMPLOYEE.JOB_TITLE, EMPLOYEE.SALARY)\n```", "```java\n   .fetch();\n```", "```java\nctx.insertInto(PRODUCT, PRODUCT.PRODUCT_NAME,   \n```", "```java\n         PRODUCT.PRODUCT_LINE, PRODUCT.CODE, PRODUCT.SPECS)\n```", "```java\n   .values(\"2002 Masserati Levante\", \"Classic Cars\", \n```", "```java\n           599302L, field(\"?::hstore\", String.class,\n```", "```java\n           HStoreConverter.toString(Map.of(\"Length (in)\",\n```", "```java\n            \"197\", \"Width (in)\", \"77.5\", \"Height (in)\",\n```", "```java\n            \"66.1\", \"Engine\", \"Twin Turbo Premium Unleaded \n```", "```java\n             V-6\"))))\n```", "```java\n   .execute();\n```", "```java\nList<Map<String, String>> specs = \n```", "```java\n ctx.select(PRODUCT.SPECS.coerce(String.class))\n```", "```java\n    .from(PRODUCT)\n```", "```java\n    .where(PRODUCT.PRODUCT_NAME.eq(\"2002 Masserati Levante\"))\n```", "```java\n    .fetch(rs -> {\n```", "```java\n      return HStoreConverter.fromString(\n```", "```java\n        rs.getValue(PRODUCT.SPECS).toString());\n```", "```java\n    });\n```", "```java\nctx.select(PRODUCT.PRODUCT_ID, PRODUCT.PRODUCT_NAME,\n```", "```java\n           field(\"{0} -> {1}\", String.class, PRODUCT.SPECS, \n```", "```java\n           val(\"Engine\")).as(\"engine\"))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .where(field(\"{0} -> {1}\", String.class, PRODUCT.SPECS, \n```", "```java\n           val(\"Length (in)\")).eq(\"197\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.update(PRODUCT)\n```", "```java\n   .set(PRODUCT.SPECS, (field(\"delete({0}, {1})\",\n```", "```java\n     Record.class, PRODUCT.SPECS, val(\"Engine\"))))\n```", "```java\n   .execute();\n```", "```java\nctx.select(PRODUCT.PRODUCT_NAME,\n```", "```java\n         field(\"hstore_to_json ({0}) json\", PRODUCT.SPECS))\n```", "```java\n   .from(PRODUCT)\n```", "```java\n   .fetch();\n```", "```java\npublic static Field<String> getByKey(\n```", "```java\n         Field<Map<String, String>> hstore, String key) {\n```", "```java\n  return field(\"{0} -> {1}\", String.class, hstore, val(key));\n```", "```java\n}\n```", "```java\nResult<Record1<BigDecimal>> msrps = ctx.resultQuery(\n```", "```java\n  \"with \\\"updatedMsrp\\\" as ({0}) {1}\",\n```", "```java\n    update(PRODUCT).set(PRODUCT.MSRP,     \n```", "```java\n      PRODUCT.MSRP.plus(PRODUCT.MSRP.mul(0.25)))\n```", "```java\n      .returning(PRODUCT.MSRP),\n```", "```java\n    select().from(name(\"updatedMsrp\")))\n```", "```java\n   .coerce(PRODUCT.MSRP)\n```", "```java\n   .fetch();\n```", "```java\nResult<Record1<BigDecimal>> msrps = ctx.resultQuery(\n```", "```java\n    \"with \\\"updatedMsrp\\\" as ({0}) {1}\",\n```", "```java\n     resultQuery(\"\"\"\n```", "```java\n                 update \n```", "```java\n                     \"public\".\"product\" \n```", "```java\n                 set \n```", "```java\n                     \"msrp\" = (\n```", "```java\n                       \"public\".\"product\".\"msrp\" + (\n```", "```java\n                       \"public\".\"product\".\"msrp\" * 0.25\n```", "```java\n                      )\n```", "```java\n                 ) returning \"public\".\"product\".\"msrp\"\n```", "```java\n                 \"\"\"),\n```", "```java\n     resultQuery(\"\"\"\n```", "```java\n                 select * \n```", "```java\n                 from \"updatedMsrp\"\n```", "```java\n                 \"\"\"))\n```", "```java\n    .coerce(PRODUCT.MSRP)\n```", "```java\n    .fetch();\n```", "```java\nctx.select(field(\"DIFFERENCE({0}, {1})\", \n```", "```java\n           SQLDataType.INTEGER, \"Juice\", \"Jucy\"))\n```", "```java\n   .fetch();\n```", "```java\nctx.select(field(\"FORMAT({0}, {1})\", \n```", "```java\n      123456789, \"##-##-#####\"))\n```", "```java\n   .fetch();\n```", "```java\nDECLARE @var1 VARCHAR(70)\n```", "```java\nselect @var1=(select   \n```", "```java\n  [classicmodels].[dbo].[product].[product_name] \n```", "```java\nfrom [classicmodels].[dbo].[product] \n```", "```java\nwhere [classicmodels].[dbo].[product].[product_id] = 1)\n```", "```java\nupdate [classicmodels].[dbo].[product] \n```", "```java\nset [classicmodels].[dbo].[product].[quantity_in_stock] = 0 \n```", "```java\nwhere [classicmodels].[dbo].[product].[product_name] = @var1\n```", "```java\nctx.batch(\n```", "```java\n  query(\"DECLARE @var1 VARCHAR(70)\"),\n```", "```java\n  select(field(\"@var1=({0})\", select(PRODUCT.PRODUCT_NAME)\n```", "```java\n   .from(PRODUCT).where(PRODUCT.PRODUCT_ID.eq(1L)))),\n```", "```java\n  update(PRODUCT).set(PRODUCT.QUANTITY_IN_STOCK, 0)\n```", "```java\n   .where(PRODUCT.PRODUCT_NAME\n```", "```java\n      .eq(field(\"@var1\", String.class)))\n```", "```java\n).execute();\n```", "```java\nString sql = ctx.resultQuery(\"{0} WHERE CURRENT OF cur\", \n```", "```java\n   deleteFrom(PRODUCT)).getSQL();\n```", "```java\ndelete from \"CLASSICMODELS\".\"PRODUCT\" WHERE CURRENT OF cur\n```"]