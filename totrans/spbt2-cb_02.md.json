["```java\ndependencies { \n  compile(\"org.springframework.boot:spring-boot-starter-data-jpa\") \n  compile(\"org.springframework.boot:spring-boot-starter-jdbc\") \n  compile(\"org.springframework.boot:spring-boot-starter-web\") \n  runtime(\"com.h2database:h2\") \n  runtime(\"mysql:mysql-connector-java\")\n  testCompile(\"org.springframework.boot:spring-boot-starter-test\") \n} \n```", "```java\n@RestController \n@RequestMapping(\"/books\") \npublic class BookController { \n  @Autowired \n  private BookRepository bookRepository; \n\n  @RequestMapping(value = \"\", method = RequestMethod.GET) \n  public Iterable<Book> getAllBooks() { \n    return bookRepository.findAll(); \n  } \n\n  @RequestMapping(value = \"/{isbn}\", method =  \n    RequestMethod.GET) \n  public Book getBook(@PathVariable String isbn) { \n    return bookRepository.findBookByIsbn(isbn); \n  } \n} \n```", "```java\n@Controller \n@ResponseBody \n@RequestMapping(\"/books\") \npublic class BookController {...} \n```", "```java\ndependencies { \n  ... \n  compile(\"org.springframework.boot:spring-boot-starter-data-rest\") \n  ... \n} \n```", "```java\n@RepositoryRestResource \npublic interface AuthorRepository extends  \n  PagingAndSortingRepository<Author, Long> { \n}\n```", "```java\n@RepositoryRestResource \npublic interface PublisherRepository extends  \n  PagingAndSortingRepository<Publisher, Long> { \n} \n```", "```java\n@RepositoryRestResource \npublic interface ReviewerRepository extends  \n  PagingAndSortingRepository<Reviewer, Long> { \n} \n```", "```java\n@RepositoryRestResource(collectionResourceRel = \"writers\", path = \"writers\") \n```", "```java\n@Configuration \npublic class WebConfiguration { \n    @Bean \n    public RemoteIpFilter remoteIpFilter() { \n        return new RemoteIpFilter(); \n    } \n} \n```", "```java\n...FilterRegistrationBean : Mapping filter: 'remoteIpFilter' to: [/*]\n```", "```java\npublic class WebConfiguration implements WebMvcConfigurer {...} \n```", "```java\n@Bean \npublic LocaleChangeInterceptor localeChangeInterceptor() { \n  return new LocaleChangeInterceptor(); \n} \n```", "```java\n@Override \npublic void addInterceptors(InterceptorRegistry registry) { \n  registry.addInterceptor(localeChangeInterceptor()); \n} \n```", "```java\nCaused by: java.lang.UnsupportedOperationException: Cannot change HTTP accept header - use a different locale resolution strategy\n```", "```java\n@Bean \npublic  \n  ByteArrayHttpMessageConverter  \n    byteArrayHttpMessageConverter() { \n  return new ByteArrayHttpMessageConverter(); \n} \n```", "```java\n@Override \npublic void configureMessageConverters\n            (List<HttpMessageConverter<?>> converters) { \n  converters.add(new ByteArrayHttpMessageConverter()); \n}\n```", "```java\n@Override \npublic void extendMessageConverters\n            (List<HttpMessageConverter<?>> converters) { \n  converters.clear(); \n  converters.add(new ByteArrayHttpMessageConverter()); \n} \n```", "```java\npackage com.example.bookpub.model; \n\nimport org.springframework.util.Assert; \n\npublic class Isbn { \n    private String eanPrefix; \n    private String registrationGroup; \n    private String registrant; \n    private String publication; \n    private String checkDigit; \n\n    public Isbn(String eanPrefix, String registrationGroup, \n                String registrant, String publication,  \n                String checkDigit) { \n\n        this.eanPrefix = eanPrefix; \n        this.registrationGroup = registrationGroup; \n        this.registrant = registrant; \n        this.publication = publication; \n        this.checkDigit = checkDigit; \n    } \n\n    public String getEanPrefix() { \n        return eanPrefix; \n    } \n\n    public void setEanPrefix(String eanPrefix) { \n        this.eanPrefix = eanPrefix; \n    } \n\n    public String getRegistrationGroup() { \n        return registrationGroup; \n    } \n\n    public void setRegistrationGroup\n                (String registrationGroup)  { \n        this.registrationGroup = registrationGroup; \n    } \n\n    public String getRegistrant() { \n        return registrant; \n    } \n\n    public void setRegistrant(String registrant) { \n        this.registrant = registrant; \n    } \n\n    public String getPublication() { \n        return publication; \n    } \n\n    public void setPublication(String publication) { \n        this.publication = publication; \n    } \n\n    public String getCheckDigit() { \n        return checkDigit; \n    } \n\n    public void setCheckDigit(String checkDigit) { \n        this.checkDigit = checkDigit; \n    } \n\n    public static Isbn parseFrom(String isbn) { \n        Assert.notNull(isbn); \n        String[] parts = isbn.split(\"-\"); \n        Assert.state(parts.length == 5); \n        Assert.noNullElements(parts); \n        return new Isbn(parts[0], parts[1], parts[2],  \n            parts[3], parts[4]); \n    } \n\n    @Override\n    public String toString() {\n        return eanPrefix + '-'\n            + registrationGroup + '-'\n            + registrant + '-'\n            + publication + '-'\n            + checkDigit;\n     } \n} \n```", "```java\npackage com.example.bookpub.editors;\n\nimport org.springframework.util.StringUtils;\nimport com.example.bookpub.model.Isbn;\n\nimport java.beans.PropertyEditorSupport;\n\npublic class IsbnEditor extends PropertyEditorSupport {\n    @Override\n    public void setAsText(String text) {\n        if (text == null) {\n            setValue(null);\n        }\n        else {\n            String value = text.trim();\n            if (!StringUtils.isEmpty(value)) {\n                setValue(Isbn.parseFrom(value));\n            } else {\n                setValue(null);\n            }\n        }\n    }\n\n    @Override\n    public String getAsText() {\n        Object value = getValue();\n        return (value != null ? value.toString() : \"\");\n    }\n}\n```", "```java\n@InitBinder \npublic void initBinder(WebDataBinder binder) { \n  binder.registerCustomEditor(Isbn.class, new  \n    IsbnEditor()); \n} \n```", "```java\n@RequestMapping(value = \"/{isbn}\", method =  \n  RequestMethod.GET) \npublic Book getBook(@PathVariable Isbn isbn) {  \n    return bookRepository.findBookByIsbn(isbn.toString()); \n} \n```", "```java\npublic class BookFormatter implements Formatter<Book> { \n  private BookRepository repository; \n  public BookFormatter(BookRepository repository) { \n    this.repository= repository; \n  } \n  @Override \n  public Book parse(String bookIdentifier, Locale locale) \n       throws ParseException {      \n    Book book = repository.findBookByIsbn(bookIdentifier);      \n    return book != null ? book : \n         repository.findById(Long.valueOf(bookIdentifier))\n           .get(); \n    } \n  @Override \n  public String print(Book book, Locale locale) { \n    return book.getIsbn(); \n  } \n} \n```", "```java\n@Autowired  \nprivate BookRepository bookRepository; \n@Override \npublic void addFormatters(FormatterRegistry registry) { \n  registry.addFormatter(new BookFormatter(bookRepository)); \n} \n```", "```java\n@RequestMapping(value = \"/{isbn}/reviewers\", method = \n    RequestMethod.GET)\npublic List<Reviewer> getReviewers(@PathVariable(\"isbn\") \n    Book book) { \n  return book.getReviewers(); \n}\n```", "```java\n@Autowired \nprivate AuthorRepository authorRepository; \n@Autowired \nprivate PublisherRepository publisherRepository; \n```", "```java\nAuthor author = new Author(\"Alex\", \"Antonov\"); \nauthor = authorRepository.save(author); \nPublisher publisher = new Publisher(\"Packt\"); \npublisher = publisherRepository.save(publisher); \nBook book = new Book(\"978-1-78528-415-1\",  \n    \"Spring Boot Recipes\", author, publisher); \nbookRepository.save(book); \n```"]