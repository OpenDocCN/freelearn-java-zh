["```java\n      .   ____          _            __ _ _\n    /\\ / ___'_ __ _ _(_)_ __  __ _ \n    ( ( )___ | '_ | '_| | '_ / _` | \n     \\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n      '  |____| .__|_| |_|_| |___, | / / / /\n     =========|_|==============|___/=/_/_/_/\n     :: Spring Boot ::  (v2.0.0.BUILD-SNAPSHOT)\n    ...\n    (The rest is omitted for conciseness)\n    ...\n    2017-12-17 INFO: Registering beans for JMX exposure on startup\n    2017-12-17 INFO: Tomcat started on port(s): 8080 (http) 8443  \n    (https)\n    2017-12-17 INFO: Welcome to the Book Catalog System!\n    2017-12-17 INFO: BookRepository has 1 entries\n    2017-12-17 INFO: ReviewerRepository has 0 entries\n    2017-12-17 INFO: PublisherRepository has 1 entries\n    2017-12-17 INFO: AuthorRepository has 1 entries\n    2017-12-17 INFO: Started BookPubApplication in 12.156 seconds (JVM \n    running for 12.877)\n    2017-12-17 INFO: Number of books: 1\n\n```", "```java\n    ------------------------------------------------------------\n    All tasks runnable from root project\n    ------------------------------------------------------------\n\n    Application tasks\n    -----------------\n    bootRun - Run the project with support for auto-detecting main \n    class and reloading static resources\n    run - Runs this project as a JVM application\n\n    Build tasks\n    -----------\n    assemble - Assembles the outputs of this project.\n    bootJar - Assembles an executable jar archive containing the main \n    classes and their dependencies.\n    build - Assembles and tests this project.\n    buildDependents - Assembles and tests this project and all projects \n    that depend on it.\n    buildNeeded - Assembles and tests this project and all projects it \n    depends on.\n    classes - Assembles classes 'main'.\n    clean - Deletes the build directory.\n    jar - Assembles a jar archive containing the main classes.\n    testClasses - Assembles classes 'test'.\n\n    Build Setup tasks\n    -----------------\n    init - Initializes a new Gradle build. [incubating]\n\n    Distribution tasks\n    ------------------\n    assembleBootDist - Assembles the boot distributions\n    assembleDist - Assembles the main distributions\n    bootDistTar - Bundles the project as a distribution.\n    bootDistZip - Bundles the project as a distribution.\n    distTar - Bundles the project as a distribution.\n    distZip - Bundles the project as a distribution.\n    installBootDist - Installs the project as a distribution as-is.\n    installDist - Installs the project as a distribution as-is.      \n```", "```java\n    build - Assembles and tests this project. [assemble, check]\n    assemble - Assembles the outputs of this project. [bootJar, \n    distTar, distZip, jar]\n\n```", "```java\nbootJar { \n  classifier = 'exec' \n  baseName = 'bookpub' \n} \n```", "```java\nbootJar { \n  requiresUnpack = '**/some-jar-name-*.jar' \n} \n```", "```java\nbuildscript { \n  dependencies { \n    classpath(\"org.springframework.boot:spring-boot-gradle- \n      plugin:${springBootVersion}\") \n    classpath(\"se.transmode.gradle:gradle-docker:1.2\") \n  } \n} \n```", "```java\ntask distDocker(type: Docker,  \n                overwrite: true,  \n                dependsOn: bootDistTar) { \n    group = 'docker' \n    description = \"Packs the project's JVM application\n    as a Docker image.\" \n\n    inputs.files project.bootDistTar \n    def installDir = \"/\" + project.bootDistTar.archiveName  \n                         - \".${project.bootDistTar.extension}\" \n\n    doFirst { \n        tag \"ch6\" \n        push false \n        exposePort 8080 \n        exposePort 8443 \n        addFile file(\"${System.properties['user.home']}\n        /.keystore\"), \"/root/\" \n        applicationName = project.applicationName \n        addFile project.bootDistTar.outputs.files.singleFile \n\n        entryPoint = [\"$installDir/bin/${project.applicationName}\"] \n    } \n} \n```", "```java\n> Task :distDocker\nSending build context to Docker daemon  68.22MB\n  Step 1/6 : FROM aglover/java8-pier\n   ---> 3f3822d3ece5\n  Step 2/6 : EXPOSE 8080\n   ---> Using cache\n   ---> 73717aaca6f3\n  Step 3/6 : EXPOSE 8443\n   ---> Using cache\n   ---> 6ef3c0fc3d2a\n  Step 4/6 : ADD .keystore /root/\n   ---> Using cache\n   ---> 6efebb5a868b\n  Step 5/6 : ADD ch6-boot-0.0.1-SNAPSHOT.tar /\n   ---> Using cache\n   ---> 0634eace4952\n  Step 6/6 : ENTRYPOINT /ch6-boot-0.0.1-SNAPSHOT/bin/ch6\n   ---> Using cache\n   ---> 39a853b7ddbb\n  Successfully built 39a853b7ddbb\n  Successfully tagged ch6:0.0.1-SNAPSHOT\n\n  BUILD SUCCESSFUL\n  Total time: 1 mins 0.009 secs. \n```", "```java\n$ docker images\nREPOSITORY           TAG                IMAGE ID         CREATED             VIRTUAL  SIZE\nch6                  0.0.1-SNAPSHOT     39a853b7ddbb     17 minutes ago      1.04 GB\naglover/java8-pier   latest             69f4574a230e     11 months ago       1.01 GB\n```", "```java\ndocker run -d -P ch6:0.0.1-SNAPSHOT.  \n```", "```java\n    CONTAINER ID        IMAGE               COMMAND               \n    CREATED             STATUS              PORTS                                                  \n    NAMES\n    37b37e411b9e        ch6:latest         \"/ch6-boot-0.0.1-S...\" \n    10 minutes ago      Up 10 minutes       0.0.0.0:32778-\n    >8080/tcp,      0.0.0.0:32779->8443/tcp   drunk_carson\n\n```", "```java\nADD ch6-boot-0.0.1-SNAPSHOT.tar / \nENTRYPOINT [\"/ch6-boot-0.0.1-SNAPSHOT/bin/ch6\"] \n```", "```java\ntask distDocker(type: Docker,  \n                overwrite: true,  \n                dependsOn: bootDistTar) { \n    ... \n    doFirst { \n        tag \"<docker hub username>/<docker hub repository name>\" \n        push true \n        ... \n    } \n} \n```", "```java\next { \n  springBootVersion = '2.0.0.BUILD-SNAPSHOT' \n} \n```", "```java\n...\n# Find Java\nif [[ -n \"$JAVA_HOME\" ]] &amp;&amp; [[ -x \"$JAVA_HOME/bin/java\" ]]; then\njavaexe=\"$JAVA_HOME/bin/java\"\nelif type -p java 2>&amp;1> /dev/null; then\njavaexe=java\nelif [[ -x \"/usr/bin/java\" ]]; then\njavaexe=\"/usr/bin/java\"\nelse\necho \"Unable to find Java\"\nexit 1\nfi\n# Configure JVM Options\njvmopts=\"{{jvm_options:}}\"\narguments=(-Dsun.misc.URLClassPath.disableJarChecking=true $jvmopts $JAVA_OPTS -jar $jarfile $RUN_ARGS \"$@\")\n# Action functions\nstart() {\n...\n```", "```java\napplicationDefaultJvmArgs = [ \n    \"-Xms128m\", \n    \"-Xmx256m\" \n] \n\nbootJar { \n    classifier = 'exec' \n    baseName = 'bookpub' \n    launchScript { \n        script = file('launch.script') \n        properties 'jvm_options' : applicationDefaultJvmArgs.join(' ') \n    } \n} \n```", "```java\ntask distDocker(type: Docker, overwrite: true, \n                dependsOn: bootJar) { \n  ... \n  inputs.files project.bootJar \n  doFirst { \n    ... \n    addFile file(\"${System.properties['user.home']}/.keystore\"), \n       \"/root/\" \n    applicationName = project.applicationName \n    addFile project.bootJar.outputs.files.singleFile \n\n    def executableName = \"/\" + \n       project.bootJar.outputs.files.singleFile.name \n    entryPoint = [\"$executableName\"] \n  } \n} \n```", "```java\n@Bean \n@Profile(\"logger\") \npublic StartupRunner schedulerRunner() { \n    return new StartupRunner(); \n} \n```", "```java\n2017-12-17 --- org.test.bookpub.StartupRunner : Number of books: 1\n```", "```java\nspring.datasource.url = jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE \n```", "```java\ndependencies { \n  ... \n  compile project(':db-count-starter') \n  compile(\"commons-configuration:commons-\n     configuration:1.10\") \n  compile(\"commons-codec:commons-codec:1.6\") \n  compile(\"commons-jxpath:commons-jxpath:1.3\") \n  compile(\"commons-collections:commons-collections:3.2.1\") \n  runtime(\"com.h2database:h2\") \n  ... \n} \n```", "```java\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?> \n<config> \n  <book> \n    <counter> \n      <delay>1000</delay> \n      <rate>${book.counter.delay}0</rate> \n    </counter> \n  </book> \n</config> \n```", "```java\npublic class ApacheCommonsConfigurationPropertySource \n   extends EnumerablePropertySource<XMLConfiguration> { \n  private static final Log logger = LogFactory.getLog(\n   ApacheCommonsConfigurationPropertySource.class); \n\n  public static final String \n     COMMONS_CONFIG_PROPERTY_SOURCE_NAME = \"commonsConfig\"; \n\n  public ApacheCommonsConfigurationPropertySource(\n     String name, XMLConfiguration source) { \n    super(name, source); \n  } \n\n  @Override \n  public String[] getPropertyNames() { \n    ArrayList<String> keys = \n       Lists.newArrayList(this.source.getKeys()); \n    return keys.toArray(new String[keys.size()]); \n  } \n\n  @Override \n  public Object getProperty(String name) { \n    return this.source.getString(name); \n  } \n\n  public static void addToEnvironment(\n     ConfigurableEnvironment environment, XMLConfiguration \n       xmlConfiguration) { \n    environment.getPropertySources().addAfter(\n      StandardEnvironment.\n        SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME, new \n          ApacheCommonsConfigurationPropertySource( \n           COMMONS_CONFIG_PROPERTY_SOURCE_NAME, \n             xmlConfiguration)); \n    logger.trace(\"ApacheCommonsConfigurationPropertySource \n      add to Environment\"); \n  } \n} \n```", "```java\npackage com.example.bookpub;\n\nimport org.apache.commons.configuration.ConfigurationException;\nimport org.apache.commons.configuration.XMLConfiguration;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.env.EnvironmentPostProcessor;\nimport org.springframework.core.env.ConfigurableEnvironment;\n\npublic class ApacheCommonsConfigurationEnvironmentPostProcessor  \n       implements EnvironmentPostProcessor {\n\n    @Override\n    public void postProcessEnvironment( \n                   ConfigurableEnvironment environment,  \n                   SpringApplication application) {\n        try {\n            ApacheCommonsConfigurationPropertySource \n               .addToEnvironment(environment,\n                    new XMLConfiguration(\"commons- \n                                         config.xml\"));\n        } catch (ConfigurationException e) {\n            throw new RuntimeException(\"Unable to load commons-config.xml\", e);\n        }\n    }\n} \n```", "```java\n# Environment Post Processors\norg.springframework.boot.env.EnvironmentPostProcessor=\\\ncom.example.bookpub.ApacheCommonsConfigurationEnvironmentPostProcessor \n```", "```java\n@Scheduled(initialDelayString = \"${book.counter.delay}\", \n   fixedRateString = \"${book.counter.rate}\") \n```", "```java\n@Bean \npublic CommandLineRunner configValuePrinter(\n   @Value(\"${my.config.value:}\") String configValue) { \n  return args -> LogFactory.getLog(getClass()).\n     info(\"Value of my.config.value property is: \" + \n       configValue); \n} \n```", "```java\n    2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of \n    my.config.value property is:\n\n```", "```java\nmy.config.value=From Home Directory Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From Home Directory Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From HTTP Config\n\n```", "```java\n    2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of \n    my.config.value property is: From ENV Config\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of \nmy.config.value property is: From Home Directory Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From System Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: Gradle\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From external JSON\n\n```", "```java\nSPRING_APPLICATION_JSON={\"my\":{\"config\":{\"value\":\"From external JSON\"}}} java -jar ./build/libs/bookpub-0.0.1-SNAPSHOT-exec.jar --spring.profiles.active=logger \n```", "```java\nConsul v1.0.1\nProtocol 2 spoken by default, understands 2 to 3 (agent will automatically use protocol >2 when speaking to compatible agents) \n```", "```java\n==> WARNING: BootstrapExpect Mode is specified as 1; this is the same as Bootstrap mode.\n==> WARNING: Bootstrap mode enabled! Do not enable unless necessary\n==> WARNING: It is highly recommended to set GOMAXPROCS higher than 1\n==> Starting Consul agent...\n==> Starting Consul agent RPC...\n==> Consul agent running!\n Node name: <your machine name>'\n Datacenter: 'dc1'\n Server: true (bootstrap: true)\n       Client Addr: 127.0.0.1 (HTTP: 8500, HTTPS: -1, DNS: 8600, RPC: 8400)\n      Cluster Addr: 192.168.1.227 (LAN: 8301, WAN: 8302)\n    Gossip encrypt: false, RPC-TLS: false, TLS-Incoming: false\n             Atlas: <disabled>\n\n==> Log data will now stream in as it occurs:\n\n 2017/12/17 20:34:43 [INFO] serf: EventMemberJoin: <your machine name> 192.168.1.227\n    2017/12/17 20:34:43 [INFO] serf: EventMemberJoin: <your machine name>.dc1 192.168.1.227\n 2017/12/17 20:34:43 [INFO] raft: Node at 192.168.1.227:8300 [Follower] entering Follower state\n 2017/12/17 20:34:43 [INFO] consul: adding server <your machine name> (Addr: 192.168.1.227:8300) (DC: dc1)\n 2017/12/17 20:34:43 [INFO] consul: adding server <your machine name>.dc1 (Addr: 192.168.1.227:8300) (DC: dc1)\n 2017/12/17 20:34:43 [ERR] agent: failed to sync remote state: No cluster leader\n 2017/12/17 20:34:45 [WARN] raft: Heartbeat timeout reached, starting election\n 2017/12/17 20:34:45 [INFO] raft: Node at 192.168.1.227:8300 [Candidate] entering Candidate state\n 2017/12/17 20:34:45 [INFO] raft: Election won. Tally: 1\n 2017/12/17 20:34:45 [INFO] raft: Node at 192.168.1.227:8300 [Leader] entering Leader state\n 2017/12/17 20:34:45 [INFO] consul: cluster leadership acquired\n 2017/12/17 20:34:45 [INFO] consul: New leader elected: <your machine name>\n 2017/12/17 20:34:45 [INFO] raft: Disabling EnableSingleNode (bootstrap)\n 2017/12/17 20:34:45 [INFO] consul: member '<your machine name>' joined, marking health alive\n 2017/12/17 20:34:47 [INFO] agent: Synced service 'consul'\n\n```", "```java\nNode                 Address        Status  Type    Build  Protocol  DC\n<your_machine_name> 2.168.1.227:8301 alive  server   0.5.2     2    dc1\n\n```", "```java\n        [{\"CreateIndex\":20,\"ModifyIndex\":20,\"LockIndex\":0,\"Key\":\"bookpub/my/config/value\",\"Flags\":0,\"Value\":\"RnJvbSBDb25zdWwgQ29uZmln\"}]\n\n```", "```java\n    ...\n    TERM=xterm-256color\n    SHELL=/bin/bash\n    LANG=en_US.UTF-8\n    HOME=/Users/<your_user_name>\n    ...\n    MY_CONFIG_VALUE=From Consul Config\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From Consul Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From Consul Config\n\n```", "```java\n2017-12-17 --- ication$$EnhancerBySpringCGLIB$$b123df6a : Value of my.config.value property is: From UpdatedConsul Config\n\n```"]