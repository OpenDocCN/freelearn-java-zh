- en: Chapter 2. Using JBoss EAP6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we have learned how to download and install JBoss
    EAP6\. We also looked at the standalone mode and the domain mode of EAP6; in this
    chapter we''ll start learning its basic usages. We will learn how to manage and
    configure the EAP6 server. The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the JBoss EAP6 management console to deploy a web application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basic usages of the Command Line Interface management console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design of the JBoss EAP6 management model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we need to understand some basic configurations of the EAP6 management
    console. After configuring it properly, we can start the EAP6 server and use its
    management console.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the JBoss EAP6 management console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JBoss EAP6 has provided two management consoles—one is based on the web and
    another based on the **Command Line Interface** (**CLI**).Before using them, we
    need to configure the management modules properly.
  prefs: []
  type: TYPE_NORMAL
- en: Security realms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To use the management console, we must understand its authentication scheme.
    The authentication module used by JBoss EAP6 is called **security realms**.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: EAP6 uses security realms to gain secure access to the management interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `standalone.xml` in the standalone configuration. The relative settings
    are given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As shown in the preceding configuration, the realm that is used by the management
    module is called `ManagementRealm`. It''s using a property file called `mgmt-users.properties`
    to store the user''s password information. The `management-interfaces` defines
    the network socket that is bound to the management console. By default, the web
    management console is bound to the address `127.0.0.1:9990`, and the CLI is bound
    to the address `127.0.0.1:9999`. The following diagram gives a summary of the
    management console configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Security realms](img/2432OS_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we have understood the authentication scheme used by JBoss EAP6, we now
    need to create a user account to access the management console.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an admin account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JBoss EAP6 has provided a command-line tool to generate user accounts for us.
    You will find it with the name `add-user.sh` in the `bin` folder. Let''s use it
    to generate an administrator account. This process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up an admin account](img/2432OS_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the process shown in the preceding screenshot, we create a user named `jbossadmin`
    of the type **Management User**. This user belongs to the `ManagementRealm`, so
    we can use it to access the management console. Please note that the password
    must be more than eight characters long, and it should contain at least one alphabet,
    one number, and a symbol. So, I use the password `@packt000` for `jbossadmin`.
  prefs: []
  type: TYPE_NORMAL
- en: For the last option **Is this new user going to be used for one AS process to
    connect to another AS process?**, we choose **no**. In the later chapters, we'll
    create a user account for the remote server connection in the domain mode.
  prefs: []
  type: TYPE_NORMAL
- en: Using the web-based management console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s try to use the EAP6 web management console in the standalone mode.
    Run `standalone.sh` in the `bin` folder of EAP6 to start up the server. Then,
    we access the web management console by its default address, `http://127.0.0.1:9990`.
    The management console will pop up a login window; enter the user account we''ve
    just created. The process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the web-based management console](img/2432OS_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After login, we can see the main window of the management console, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the web-based management console](img/2432OS_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the next section, we'll use the web-based management console to deploy a
    web application.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a project in the standalone mode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now we can try to deploy a very simple web project named `cluster-demo1` into
    EAP6\. It's a plain hello world project that contains a simple hello page, which
    shows the current time on the browser. To deploy this project into EAP6, we can
    click on the **Manage Deployments** tab in the management console and then click
    on **Add**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, we choose `cluster-demo1.war` and click on **Next>>**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'EAP6 will then ask us to verify the deployment names. We should accept the
    default name and click on **Save**. This process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As the project has been deployed, the console will be redirected to the **Available
    Deployments** page. To start the deployed project, we need to select it and click
    on **En/Disable**. This process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And we need to confirm to enable this project. This is done by clicking on
    **Confirm**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, we can see that the project has started, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the standalone mode](img/2432OS_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, if we check the server output from the console, we can see that `cluster-demo1.war`
    is deployed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s have a look at `standalone.xml`. We can see that the description
    of this deployment has been added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code snippet, we can see that the content of the configuration
    file has been updated by the management console. Finally, let''s check `standalone/data/content`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding code snippet, we can see that the contents of the deployed
    project is hashed and stored in the `standalone/data/content` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now we can try to access the deployed project to see if it''s running correctly.
    In the following code snippet, I used the `curl` command to test the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As shown in the preceding process, we can see the hello page from the console
    output.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment scanner
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The standalone mode supports the traditional hot deployment used in the previous
    versions of JBoss AS. This method lets you put your copied project into a directory,
    and then JBoss EAP6 will scan the directory periodically to deploy the project
    copied into it. This function is supported by the deployment-scanner subsystem,
    which is defined in `standalone.xml` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The default setting for the subsystem in `standalone.xml` is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It will scan the standalone deployments directory every 5 seconds and deploy
    the newly added projects. We can try to use the deployment scanner to deploy `cluster-demo1.war`.
    Before that, we need to undeploy this project from the web management console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deployment scanner](img/2432OS_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To undeploy the project, click on **En/Disable** and then click on **Remove**.
    After the project is undeployed, we can put `cluster-demo1.war` into `standalone/deployments`
    by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Because the deployment scanner is set to scan this directory every 5 seconds,
    we will wait for a while and we''ll see that the project is deployed from the
    server output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s have a look at the `deployments` directory as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that there is a new file named `cluster-demo1.war.deployed` that
    was created automatically. This is the marker file that is created by the deployment
    scanner to mark the status of our project. Now, let''s delete this file by using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait a while and you can see the server output as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Because we have deleted the `cluster-demo1.war.deployed` marker file, the scanner
    comes to know that we want to undeploy the project. So, it takes the action. Now
    let''s check the `deployments` directory again by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the scanner created another marker file called `cluster-demo1.war.undeployed`,
    which marks the `cluster-demo1.war` file as undeployed. If we delete the `cluster-demo1.war.undeployed`
    file by using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Then the scanner will redeploy this project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s have a look at the `deployments` directory. We can see that the
    `cluster-demo1.war.deployed` marker file appeared again, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The deployment scanner can be used only in the standalone mode.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing JBoss DMR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'JBoss DMR is the cornerstone of the JBoss management module. All the management
    actions will be translated into the management commands that are encapsulated
    in the DMR format. The deployment actions used by the deployment scanner or the
    management console are all translated into the DMR commands at last. For example,
    when the deployment scanner wants to deploy a project into EAP6, it will send
    the following JSON-like DMR commands to the deployment module. The following is
    the trimmed text of the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that the deployment scanner has sent a composition operation that
    contains two operations: `add` and `deploy`. This means that EAP6 will first add
    this project into its scope and then start it. In the web management console,
    we see that these two actions are separated—we first add a project into EAP6 and
    then we click on **En/Disable** to start it. Both the web management console and
    the command line interface send such kind of DMR commands to the deployment console.'
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a project in the domain mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now let''s learn how to deploy a project in the domain mode. When JBoss EAP6
    is running under the domain mode, multiple servers can form a server group. When
    we deploy a project into a server group, all the servers in this group will get
    the project deployed. First, let''s start JBoss EAP6 in the domain mode by `domain.sh`.
    Then, we will access the management console address, `http://127.0.0.1:9990`.
    The management console under the domain mode is different from the standalone
    mode. It''s shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying a project in the domain mode](img/2432OS_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following are some notes about the management console is shown in the preceding
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a **Server:** section in the sidebar where we can check all the servers
    in different server groups.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The marker indicates the running status of each server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ports:** shows the port offsets of each server. Because these servers are
    running on the same machine, their ports must be offset to avoid confliction.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Profile:** shows the profiles that the server group is bound to.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The servers that belong to the same group have the same colors on the management
    console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can start or stop a server in the management console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are two server groups by default. Let's check the main-server-group in
    the following section.
  prefs: []
  type: TYPE_NORMAL
- en: The main-server-group
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can see that the **main-server-group** includes two servers by default. Let's
    deploy `cluster-demo1.war` into these groups. Please make sure that these two
    servers are started. If they are not, we can use the **Start Server** function
    that is provided by the management console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s deploy `cluster-demo1.war` . First, we need to click on the **Management
    Deployments** tab that appears on the side bar. Then click on the **Content Repository**
    tab, and click on **Add**. This process is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will choose `cluster-demo1.war`, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we click on **Next>>** and then click on **Save**. Then, we can see that
    the project is deployed into **Content Repository**. The result is shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can see that the deployment process in the domain mode is different from
    the standalone mode. We don't directly deploy a project into servers. Instead,
    we add it into **Content Repository** first and then deploy it to a server group.
    EAP6 will help us to deploy the project to all the servers in the group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s deploy `cluster-demo1.war` to main-server-group. First click on
    the **Server Groups** tab, and then click on **View>** of main-server-group, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After clicking on **View>**, we enter the web page for **main-server-group**.
    Then, we click on **Assign Name** and select `cluster-demo1.war` to save it. This
    is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, let''s enable the project. Click on **En/Disable** and then click
    on **Confirm**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The main-server-group](img/2432OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After confirming the deployment, the project should be deployed to **server-one**
    and **server-two**. Let's verify this.
  prefs: []
  type: TYPE_NORMAL
- en: Testing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now let''s try to access the two servers. Please note that the master-server
    is located at port 8080 and slave-server has a port offset of 150, so the web
    port is 8080+150 = 8230\. The results are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing](img/2432OS_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the preceding screenshot, we can see that `cluster-demo1.war` is deployed
    in both the servers.
  prefs: []
  type: TYPE_NORMAL
- en: CLI Usages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The CLI provides a pure text environment for us to manage the EAP6 server, and
    it shares the same DMR model with the web management console. In this section,
    let's have a brief discussion about CLI usages.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to CLI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The command to start the CLI is `jboss-cli.sh`, which is located in the `bin`
    folder. Make sure that you have started EAP6 in the standalone mode. Let''s run
    the CLI command now. This process is shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have entered the CLI console, the next step is to use the `connect`
    command to enter the management console as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have used the `connect` command to connect to the management console.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have noticed that the CLI doesn't ask us to use the administrator account
    to log in. In the CLI, when we are connecting to the local EAP server, the authentication
    is bypassed.
  prefs: []
  type: TYPE_NORMAL
- en: As we have connected to the text management console, now let's learn some basic
    commands.
  prefs: []
  type: TYPE_NORMAL
- en: ls
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first command we''ll learn is `ls` . It''s similar to the `ls` command
    used in the shell environment. This command lists the resources in JBoss EAP6,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ls](img/2432OS_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can see that the resources are organized in a tree structure. This is similar
    to a file system and we can use the `ls` command to check the contents of the
    resources as if it''s a directory. For example, we can check the resources in
    a subsystem, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![ls](img/2432OS_02_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: cd
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can use the `cd` command to view resources as if they were directories.
    The usage is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![cd](img/2432OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, we can use the `cd` command to traverse
    the resources.
  prefs: []
  type: TYPE_NORMAL
- en: Basic commands
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The CLI provides a set of basic commands for us to use. We can press the *Tab*
    key twice to see a list of these commands, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic commands](img/2432OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To understand the meaning of these commands, we can use the **--help** option
    after a command name. For example, if we want to understand the usage of connect,
    we can use the **--help** option as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic commands](img/2432OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Among the basic commands, I want to specifically introduce `echo-dmr` and `read-operation`
    because they are the most frequently used ones.
  prefs: []
  type: TYPE_NORMAL
- en: echo-dmr
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`echo-dmr` is used to build a DMR request for a command or operation. It is
    like a translator that translates the action into a DMR request. For example,
    if we want to understand how the `deploy` command constructs a DMR request, we
    can use `echo-dmr` to translate it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It's very clear to see the underlying details of the `deploy` command from the
    preceding DMR request.
  prefs: []
  type: TYPE_NORMAL
- en: read-operation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the CLI console, each resource has a set of operations that we can use on
    the resources. We can use `read-operation` to help us know the operations that
    could be operated on a resource. For example, if we want to find out what operations
    a web subsystem support, we can use `read-operation` as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![read-operation](img/2432OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, in the list shown in the preceding screenshot, we see an operation
    named **read-operation-names**. Let''s try to use it as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![read-operation](img/2432OS_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We see that the `read-operation-names` operation is very similar to the `read-operation`
    command; so what are their differences? Let''s use `echo-dmr` to check it, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![read-operation](img/2432OS_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: From the DMR level, we can see that their translated DMR request is exactly
    the same.
  prefs: []
  type: TYPE_NORMAL
- en: The GUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'EAP CLI also supports a GUI interface, which is actually a swing application.
    We can start it by using the `--gui` option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'And the interface is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The GUI](img/2432OS_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The GUI interface can also be used remotely. For example, if our management
    console is bound to a public IP address, we can access it from another machine
    with the GUI enabled by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: And the GUI will be started from the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now let''s use the CLI to deploy the project. The following command is used
    to do the deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'After the project is deployed, we can see it under `deployment` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s use the `undeploy` command to remove it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Checking the contents in `deployment`, we can see that it''s removed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to add the administrator account into JBoss
    EAP6\. We have also learned to use the management model to deploy the projects
    into EAP6 when it's running in the standalone mode or the domain mode. Then, we
    had a closer look at the design of the EAP6 management model and the DMR layer.
    With this knowledge, I hope you have a good understanding of JBoss EAP6's structure
    and grasp its basic usages. From the next chapter, we'll start to set an EAP6
    cluster.
  prefs: []
  type: TYPE_NORMAL
