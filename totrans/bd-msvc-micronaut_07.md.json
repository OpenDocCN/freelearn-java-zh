["```java\n    winpty docker exec -it kafka bash\n    ```", "```java\n    command ./kafka-topics.sh --bootstrap-server kafka:9092 --create --partitions 3 --replication-factor 1 --topic foo-stream\n    ```", "```java\n    command ./kafka-console-producer.sh --broker-list kafka:9092 --topic foo-stream\n    ```", "```java\n    <!-- Kafka -->\n        <dependency>\n          <groupId>io.micronaut.kafka</groupId>\n          <artifactId>micronaut-kafka</artifactId>\n        </dependency>\n    …\n    ```", "```java\n    micronaut:\n      application:\n        name: PetClinicReviews\n      server:\n        port: 8083\n    kafka:\n      bootstrap:\n        servers: localhost:9094\n    ```", "```java\n    @KafkaClient\n    public interface VetReviewClient {\n        @Topic(\"vet-reviews\")\n        void send(@Body VetReviewDTO vetReview);\n    }\n    ```", "```java\n@Post(\"/vet-reviews\")\n@ExecuteOn(TaskExecutors.IO)\npublic HttpResponse<VetReviewDTO> createVetReview(@Body VetReviewDTO vetReviewDTO) throws URISyntaxException {\n    log.debug(\"REST request to save VetReview : {}\", vetReviewDTO);\n    if (vetReviewDTO.getReviewId() != null) {\n        throw new BadRequestAlertException(\"A new vetReview cannot already have an ID\", ENTITY_NAME, \"idexists\");\n    }\n    VetReviewDTO result = vetReviewService.save(vetReviewDTO);\n    /** Stream to other services */\n    vetReviewClient.send(result);\n    URI location = new URI(\"/api/vet-reviews/\" + result.getReviewId());\n    return HttpResponse.created(result).headers(headers -> {\n        headers.location(location);\n        HeaderUtil.createEntityCreationAlert(headers, applicationName, true, ENTITY_NAME, result.getReviewId());\n    });\n}\n```", "```java\n<!-- Kafka -->\n    <dependency>\n      <groupId>io.micronaut.kafka</groupId>\n      <artifactId>micronaut-kafka</artifactId>\n    </dependency>\n…\n```", "```java\nmicronaut:\n  application:\n    name: Pet-Clinic\n  server:\n    port: 8082\nkafka:\n  bootstrap:\n    servers: localhost:9094\n```", "```java\n@KafkaListener(groupId = \"pet-clinic\")\npublic class VetReviewListener {\n    private static final Logger log =  LoggerFactory.getLogger(VetReviewListener.class);\n    private final VetService vetService;\n    public VetReviewListener(VetService vetService) {\n        this.vetService = vetService;\n    }\n    @Topic(\"vet-reviews\")\n    public void receive(@Body VetReviewDTO vetReview) {\n        log.info(\"Received: vetReview -> {}\", vetReview);\n        try {\n            vetService.updateVetAverageRating(vetReview.getVetId(), vetReview.getRating());\n        } catch (Exception e) {\n            log.error(\"Exception occurred: {}\", e.toString());\n        }\n    }\n}\n```", "```java\npublic void updateVetAverageRating(Long id, Double rating) throws Exception {\n    log.debug(\"Request to update vet rating, id: {}, rating: {}\", id, rating);\n    Optional<VetDTO> oVetDTO = findOne(id);\n    if (oVetDTO.isPresent()) {\n        VetDTO vetDTO = oVetDTO.get();\n        Double averageRating = vetDTO.getAverageRating() != null ? vetDTO.getAverageRating() : 0D;\n        Long ratingCount = vetDTO.getRatingCount() != null ? vetDTO.getRatingCount() : 0L;\n        Double newAvgRating = ((averageRating * ratingCount) + rating) / (ratingCount + 1);\n        Long newRatingCount = ratingCount + 1;\n        vetRepository.updateVetAverageRating(id, newAvgRating, newRatingCount);\n    }\n}\n```"]