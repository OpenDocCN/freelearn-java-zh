["```java\n        ProcessBuilder pBuilder = new ProcessBuilder(\"free\", \"-m\");\n```", "```java\n        pBuilder.command(\"free\", \"-m\");\n```", "```java\n        Process p = pBuilder.inheritIO().start();\n```", "```java\n        if(p.waitFor(1, TimeUnit.SECONDS)){\n          System.out.println(\"process completed successfully\");\n        }else{\n          System.out.println(\"waiting time elapsed, process did \n                              not complete\");   \n          System.out.println(\"destroying process forcibly\");\n          p.destroyForcibly();\n        }\n```", "```java\n $ javac -d mods --module-source-path src $(find src -name *.java)\n      $ java -p mods -m process/com.packt.process.NewProcessDemo\n```", "```java\n$ iostat\n```", "```java\n        ProcessBuilder pb = new ProcessBuilder(\"iostat\");\n```", "```java\n        pb.redirectError(new File(\"error\"))\n          .redirectOutput(new File(\"output\"));\n```", "```java\n        Process p = pb.start();\n        int exitValue = p.waitFor();\n```", "```java\n        Files.lines(Paths.get(\"output\"))\n                         .forEach(l -> System.out.println(l));\n```", "```java\n        Files.lines(Paths.get(\"error\"))\n                         .forEach(l -> System.out.println(l));\n```", "```java\n $ javac -d mods --module-source-path src $(find src -name *.java)\n```", "```java\n $ java -p mods -m process/com.packt.process.RedirectFileDemo\n```", "```java\nProcessBuilder pb = new ProcessBuilder(\"iostat\", \"-Z\");\n```", "```java\nsudo apt-get install tree\n```", "```java\nyum install tree\n```", "```java\n        ProcessBuilder pb = new ProcessBuilder();\n```", "```java\n        pb.command(\"tree\").inheritIO();\n```", "```java\n        pb.directory(new File(\"/root\"));\n```", "```java\n        Process p = pb.start();\n        int exitValue = p.waitFor();\n```", "```java\n $ javac -d mods --module-source-path src $(find src -name *.java)\n      $ java -p mods -m process/com.packt.process.ChangeWorkDirectoryDemo\n```", "```java\n        ProcessBuilder pb = new ProcessBuilder();\n```", "```java\n        pb.command(\"printenv\").inheritIO();\n```", "```java\n        Map<String, String> environment = pb.environment();\n        environment.put(\"COOKBOOK_VAR1\", \"First variable\");\n        environment.put(\"COOKBOOK_VAR2\", \"Second variable\");\n        environment.put(\"COOKBOOK_VAR3\", \"Third variable\");\n\n```", "```java\n        Process p = pb.start();\n        int exitValue = p.waitFor();\n```", "```java\n $ javac -d mods --module-source-path src $(find src -name *.java)\n      $ java -p mods -m process/com.packt.process.EnvironmentVariableDemo\n```", "```java\necho $MY_VARIABLE;\necho \"Running tree command\";\ntree;\necho \"Running iostat command\"\niostat;\n```", "```java\n        ProcessBuilder pb = new ProcessBuilder();\n```", "```java\n         pb.directory(new File(\"/root\"));\n```", "```java\n        Map<String, String> environment = pb.environment();\n        environment.put(\"MY_VARIABLE\", \"From your parent Java process\");\n```", "```java\n         pb.command(\"/bin/bash\", \"script.sh\").inheritIO();\n```", "```java\n         Process p = pb.start();\n         int exitValue = p.waitFor();\n```", "```java\n$ javac -d mods --module-source-path src $(find src -name *.java)\n$ java -p mods -m process/com.packt.process.RunningShellScriptDemo\n```", "```java\npb.command(\"/bin/bash\", \"script.sh\")\n```", "```java\n        ProcessHandle handle = ProcessHandle.current();\n```", "```java\n        for ( int i = 0 ; i < 100; i++){\n          Thread.sleep(1000);\n        }\n```", "```java\n        ProcessHandle.Info info = handle.info();\n```", "```java\n        System.out.println(\"Command line: \" + info.commandLine().get());\n        System.out.println(\"Command: \" + info.command().get());\n        System.out.println(\"Arguments: \" + \n                     String.join(\" \", info.arguments().get()));\n        System.out.println(\"User: \" + info.user().get());\n        System.out.println(\"Start: \" + info.startInstant().get());\n        System.out.println(\"Total CPU Duration: \" + \n                     info.totalCpuDuration().get().toMillis() +\"ms\");\n```", "```java\n        System.out.println(\"PID: \" + handle.pid());\n```", "```java\n        Instant end = Instant.now();\n        System.out.println(\"End: \" + end);\n```", "```java\n$ javac -d mods --module-source-path src $(find src -name *.java) \n$ java -p mods -m process/com.packt.process.CurrentProcessInfoDemo\n```", "```java\n        ProcessBuilder pBuilder = new ProcessBuilder(\"sleep\", \"20\");\n        Process p = pBuilder.inheritIO().start();\n```", "```java\n        ProcessHandle handle = p.toHandle();\n```", "```java\n        int exitValue = p.waitFor();\n```", "```java\n        ProcessHandle.Info info = handle.info();\n\n        System.out.println(\"Command line: \" + info.commandLine().get());\n        System.out.println(\"Command: \" + info.command().get());\n        System.out.println(\"Arguments: \" + String.join(\" \", \n                           info.arguments().get()));\n        System.out.println(\"User: \" + info.user().get());\n        System.out.println(\"Start: \" + info.startInstant().get());\n        System.out.println(\"Total CPU time(ms): \" + \n                           info.totalCpuDuration().get().toMillis());\n        System.out.println(\"PID: \" + handle.pid());\n```", "```java\n$ javac -d mods --module-source-path src $(find src -name *.java)\n$ java -p mods -m process/com.packt.process.SpawnedProcessInfoDemo\n```", "```java\n        ProcessBuilder pBuilder = new ProcessBuilder(\"sleep\", \"60\");\n        Process p = pBuilder.inheritIO().start();\n\n```", "```java\n        p.waitFor(10, TimeUnit.SECONDS);\n```", "```java\n        boolean isAlive = p.isAlive();\n        System.out.println(\"Process alive? \" + isAlive);\n```", "```java\n        boolean normalTermination = p.supportsNormalTermination();\n        System.out.println(\"Normal Termination? \" + normalTermination);\n```", "```java\n        p.destroy();\n        isAlive = p.isAlive();\n        System.out.println(\"Process alive? \" + isAlive);\n```", "```java\n         Stream<ProcessHandle> liveProcesses = \n                       ProcessHandle.allProcesses();\n```", "```java\n         liveProcesses.forEach(ph -> {\n           ProcessHandle.Info phInfo = ph.info();\n           System.out.println(phInfo.command().orElse(\"\") +\" \" + \n                              phInfo.user().orElse(\"\"));\n         });\n```", "```java\n4.7,3.2,1.3,0.2,Iris-setosa\n```", "```java\n$ cat iris.data.txt | cut -d',' -f5 | uniq -c\n```", "```java\n50 Iris-setosa\n50 Iris-versicolor\n50 Iris-virginica\n1\n```", "```java\n         List<ProcessBuilder> pipeline = List.of(\n           new ProcessBuilder(\"cat\", \"iris.data.txt\"),\n           new ProcessBuilder(\"cut\", \"-d\", \",\", \"-f\", \"5\"),\n           new ProcessBuilder(\"uniq\", \"-c\")\n               .redirectOutput(ProcessBuilder.Redirect.INHERIT)\n         );\n```", "```java\n         List<Process> processes = ProcessBuilder.startPipeline(pipeline);\n```", "```java\n         int exitValue = processes.get(processes.size() - 1).waitFor();\n```", "```java\nException in thread \"main\" java.lang.IllegalArgumentException: builder redirectOutput() must be PIPE except for the last builder: INHERIT. \n```", "```java\necho \"Running tree command\";\ntree;\nsleep 60;\necho \"Running iostat command\";\niostat;\n```", "```java\n        for ( int i = 0; i < 10; i++){\n          new ProcessBuilder(\"/bin/bash\", \"script.sh\")\n              .redirectOutput(ProcessBuilder.Redirect.DISCARD)\n              .start();\n        }\n```", "```java\n        ProcessHandle currentProcess = ProcessHandle.current();\n```", "```java\n        System.out.println(\"Obtaining children\");\n        currentProcess.children().forEach(pHandle -> {\n          System.out.println(pHandle.info());\n        });\n```", "```java\n        currentProcess.descendants().forEach(pHandle -> {\n          System.out.println(pHandle.info());\n        });\n```"]