["```java\ncreate user student SUPERUSER;\ncreate database learnjava owner student;\n```", "```java\nCREATE TABLE tablename ( column1 type1, column2 type2, ... ); \n```", "```java\nCREATE table person ( \n```", "```java\n   id SERIAL PRIMARY KEY, \n```", "```java\n   first_name VARCHAR NOT NULL, \n```", "```java\n   last_name VARCHAR NOT NULL, \n```", "```java\n   dob DATE NOT NULL );\n```", "```java\nSMALLSERIAL: 2 bytes, range from 1 to 32,767\n```", "```java\nSERIAL: 4 bytes, range from 1 to 2,147,483,647\n```", "```java\nBIGSERIAL: 8 bytes, range from 1 to 922,337,2036,854,775,807\n```", "```java\nCREATE table person ( \n```", "```java\n   first_name VARCHAR NOT NULL, \n```", "```java\n   last_name VARCHAR NOT NULL, \n```", "```java\n   dob DATE NOT NULL,\n```", "```java\n   PRIMARY KEY (first_name, last_name, dob) ); \n```", "```java\npublic class Person {\n```", "```java\n  private int id;\n```", "```java\n  private LocalDate dob;\n```", "```java\n  private String firstName, lastName;\n```", "```java\n  public Person(String firstName, String lastName, \n```", "```java\n                                                LocalDate dob){\n```", "```java\n    if (dob == null) {\n```", "```java\n      throw new RuntimeException\n```", "```java\n                              (\"Date of birth cannot be null\");\n```", "```java\n    }\n```", "```java\n    this.dob = dob;\n```", "```java\n    this.firstName = firstName == null ? \"\" : firstName;\n```", "```java\n    this.lastName = lastName == null ? \"\" : lastName;\n```", "```java\n  }\n```", "```java\n  public Person(int id, String firstName,\n```", "```java\n                  String lastName, LocalDate dob) {\n```", "```java\n    this(firstName, lastName, dob);\n```", "```java\n    this.id = id;\n```", "```java\n  }\n```", "```java\n  public int getId() { return id; }\n```", "```java\n  public LocalDate getDob() { return dob; }\n```", "```java\n  public String getFirstName() { return firstName;}\n```", "```java\n  public String getLastName() { return lastName; }\n```", "```java\n}\n```", "```java\nDROP table person;\n```", "```java\nALTER table person add column address VARCHAR;\n```", "```java\nALTER table person add column IF NOT EXISTS address VARCHAR;\n```", "```java\nCREATE index idx_names on person ((lower(first_name), lower(last_name));\n```", "```java\n DROP index idx_names;\n```", "```java\nALTER table person DROP column address;\n```", "```java\n<dependency> \n```", "```java\n    <groupId>org.postgresql</groupId> \n```", "```java\n    <artifactId>postgresql</artifactId> \n```", "```java\n    <version>42.3.2</version> \n```", "```java\n</dependency>\n```", "```java\n<dependency> \n```", "```java\n    <groupId>com.packt.learnjava</groupId>\n```", "```java\n    <artifactId>database</artifactId>\n```", "```java\n    <version>1.0-SNAPSHOT</version> \n```", "```java\n</dependency>\n```", "```java\nString URL = \"jdbc:postgresql://localhost/learnjava\";\n```", "```java\nProperties prop = new Properties();\n```", "```java\nprop.put( \"user\", \"student\" );\n```", "```java\n// prop.put( \"password\", \"secretPass123\" );\n```", "```java\ntry {\n```", "```java\n Connection conn = DriverManager.getConnection(URL, prop);\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nPGSimpleDataSource source = new PGSimpleDataSource();\n```", "```java\nsource.setServerName(\"localhost\");\n```", "```java\nsource.setDatabaseName(\"learnjava\");\n```", "```java\nsource.setUser(\"student\");\n```", "```java\n//source.setPassword(\"password\");\n```", "```java\nsource.setLoginTimeout(10);\n```", "```java\ntry {\n```", "```java\n    Connection conn = source.getConnection();\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nPGConnectionPoolDataSource source = new PGConnectionPoolDataSource();\n```", "```java\nsource.setServerName(\"localhost\");\n```", "```java\nsource.setDatabaseName(\"learnjava\");\n```", "```java\nsource.setUser(\"student\");\n```", "```java\n//source.setPassword(\"password\");\n```", "```java\nsource.setLoginTimeout(10);\n```", "```java\ntry {\n```", "```java\n    PooledConnection conn = source.getPooledConnection();\n```", "```java\n    Set<Connection> pool = new HashSet<>();\n```", "```java\n    for(int i = 0; i < 10; i++){\n```", "```java\n        pool.add(conn.getConnection())\n```", "```java\n    }\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\ntry {\n```", "```java\n    Connection conn = getConnection();\n```", "```java\n    //use object conn here\n```", "```java\n} finally { \n```", "```java\n    if(conn != null){\n```", "```java\n        try {\n```", "```java\n            conn.close();\n```", "```java\n        } catch (SQLException e) {\n```", "```java\n            e.printStackTrace();\n```", "```java\n        }\n```", "```java\n    } \n```", "```java\n}\n```", "```java\ntry (Connection conn = getConnection()) {\n```", "```java\n    //use object conn here\n```", "```java\n} catch(SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}    \n```", "```java\nINSERT into table_name (column1, column2, column3,...) \n```", "```java\n                values (value1, value2, value3,...); \n```", "```java\nINSERT into table_name (column1, column2, column3,...) \n```", "```java\n                values (value1, value2, value3,... ), \n```", "```java\n                       (value21, value22, value23,...),\n```", "```java\n                       ...; \n```", "```java\nSELECT column_name, column_name FROM table_name \n```", "```java\n                        WHERE some_column = some_value;\n```", "```java\nSELECT * from table_name WHERE some_column=some_value; \n```", "```java\nWHERE column_name operator value \n```", "```java\nOperator: \n```", "```java\n= Equal \n```", "```java\n<> Not equal. In some versions of SQL, != \n```", "```java\n> Greater than \n```", "```java\n< Less than \n```", "```java\n>= Greater than or equal \n```", "```java\n<= Less than or equal IN Specifies multiple possible values for a column \n```", "```java\nLIKE Specifies the search pattern \n```", "```java\nBETWEEN Specifies the inclusive range of values in a column \n```", "```java\nString selectAllFirstNames() {\n```", "```java\n    String result = \"\";\n```", "```java\n    Connection conn = getConnection();\n```", "```java\n    try (conn; Statement st = conn.createStatement()) {\n```", "```java\n      ResultSet rs = \n```", "```java\n        st.executeQuery(\"select first_name from person\");\n```", "```java\n      while (rs.next()) {\n```", "```java\n          result += rs.getString(1) + \" \";\n```", "```java\n      }\n```", "```java\n    } catch (SQLException ex) {\n```", "```java\n        ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n    return result;\n```", "```java\n}\n```", "```java\nselect * from person;\n```", "```java\nUPDATE table_name SET column1=value1,column2=value2,... WHERE clause;\n```", "```java\nupdate person set first_name = 'Jim' where last_name = 'Adams';\n```", "```java\nDELETE FROM table_name WHERE clause;\n```", "```java\ndelete from person;\n```", "```java\ndelete from person where first_name = 'Jim';\n```", "```java\nString sql = \n```", "```java\n   \"insert into person (first_name, last_name, dob) \" +\n```", "```java\n                \"values ('Bill', 'Grey', '1980-01-27')\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    System.out.println(st.execute(sql)); //prints: false\n```", "```java\n    System.out.println(st.getResultSet() == null); \n```", "```java\n                                                 //prints: true\n```", "```java\n    System.out.println(st.getUpdateCount()); //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: Bill\n```", "```java\nString sql = \"select first_name from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    System.out.println(st.execute(sql));    //prints: true\n```", "```java\n    ResultSet rs = st.getResultSet();\n```", "```java\n    System.out.println(rs == null);             //prints: false\n```", "```java\n    System.out.println(st.getUpdateCount());    //prints: -1\n```", "```java\n    while (rs.next()) {\n```", "```java\n        System.out.println(rs.getString(1) + \" \"); \n```", "```java\n                                                 //prints: Bill\n```", "```java\n    }\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nString sql = \"update person set first_name = 'Adam'\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    System.out.println(st.execute(sql));  //prints: false\n```", "```java\n    System.out.println(st.getResultSet() == null); \n```", "```java\n                                           //prints: true\n```", "```java\n    System.out.println(st.getUpdateCount());  //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: Adam\n```", "```java\nString sql = \"delete from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    System.out.println(st.execute(sql));  //prints: false\n```", "```java\n    System.out.println(st.getResultSet() == null); \n```", "```java\n                                           //prints: true\n```", "```java\n    System.out.println(st.getUpdateCount());  //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames());  //prints: \n```", "```java\nString sql = \n```", "```java\n\"insert into person (first_name, last_name, dob) \" +\n```", "```java\n              \"values ('Bill', 'Grey', '1980-01-27')\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    st.executeQuery(sql);         //PSQLException\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();         //prints: stack trace \n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: Bill\n```", "```java\nString sql = \"select first_name from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    ResultSet rs1 = st.executeQuery(sql);\n```", "```java\n    System.out.println(rs1 == null);     //prints: false\n```", "```java\n    ResultSet rs2 = st.getResultSet();\n```", "```java\n    System.out.println(rs2 == null);     //prints: false\n```", "```java\n    System.out.println(st.getUpdateCount()); //prints: -1\n```", "```java\n    while (rs1.next()) {\n```", "```java\n        System.out.println(rs1.getString(1)); //prints: Bill\n```", "```java\n    }\n```", "```java\n    while (rs2.next()) {\n```", "```java\n        System.out.println(rs2.getString(1)); //prints:\n```", "```java\n    }\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nString sql = \"update person set first_name = 'Adam'\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    st.executeQuery(sql);           //PSQLException\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();           //prints: stack trace\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: Adam\n```", "```java\nString sql = \"delete from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    st.executeQuery(sql);           //PSQLException\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();           //prints: stack trace\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: \n```", "```java\nString sql = \n```", "```java\n\"insert into person (first_name, last_name, dob) \" +\n```", "```java\n               \"values ('Bill', 'Grey', '1980-01-27')\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n   System.out.println(st.executeUpdate(sql)); //prints: 1\n```", "```java\n   System.out.println(st.getResultSet());  //prints: null\n```", "```java\n   System.out.println(st.getUpdateCount());  //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames()); //prints: Bill\n```", "```java\nString sql = \"select first_name from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    st.executeUpdate(sql);    //PSQLException\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();     //prints: stack trace\n```", "```java\n}\n```", "```java\nString sql = \"update person set first_name = 'Adam'\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n  System.out.println(st.executeUpdate(sql));  //prints: 1\n```", "```java\n  System.out.println(st.getResultSet());   //prints: null\n```", "```java\n    System.out.println(st.getUpdateCount());    //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames());    //prints: Adam\n```", "```java\nString sql = \"delete from person\";\n```", "```java\nConnection conn = getConnection();\n```", "```java\ntry (conn; Statement st = conn.createStatement()) {\n```", "```java\n    System.out.println(st.executeUpdate(sql));  //prints: 1\n```", "```java\n    System.out.println(st.getResultSet());      //prints: null\n```", "```java\n    System.out.println(st.getUpdateCount());    //prints: 1\n```", "```java\n} catch (SQLException ex) {\n```", "```java\n    ex.printStackTrace();\n```", "```java\n}\n```", "```java\nSystem.out.println(selectAllFirstNames());      //prints:\n```", "```java\ntry (conn; Statement st = conn.createStatement()) { \n```", "```java\n     ResultSet rs = st.executeQuery(sql);\n```", "```java\ntry (conn; PreparedStatement st = conn.prepareStatement(sql)) { \n```", "```java\n     ResultSet rs = st.executeQuery();\n```", "```java\nprivate static final String SELECT_BY_FIRST_NAME = \n```", "```java\n            \"select * from person where first_name = ?\";\n```", "```java\nstatic List<Person> selectByFirstName(Connection conn, \n```", "```java\n                                     String searchName) {\n```", "```java\n    List<Person> list = new ArrayList<>();\n```", "```java\n    try (PreparedStatement st = \n```", "```java\n         conn.prepareStatement(SELECT_BY_FIRST_NAME)) {\n```", "```java\n       st.setString(1, searchName);\n```", "```java\n       ResultSet rs = st.executeQuery();\n```", "```java\n       while (rs.next()) {\n```", "```java\n           list.add(new Person(rs.getInt(\"id\"),\n```", "```java\n                    rs.getString(\"first_name\"),\n```", "```java\n                    rs.getString(\"last_name\"),\n```", "```java\n                    rs.getDate(\"dob\").toLocalDate()));\n```", "```java\n       }\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n        ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n   return list;\n```", "```java\n}\n```", "```java\nString replace(String origText, String substr1, String substr2) {\n```", "```java\n    String result = \"\";\n```", "```java\n    String sql = \"{ ? = call replace(?, ?, ? ) }\";\n```", "```java\n    Connection conn = getConnection();\n```", "```java\n    try (conn; CallableStatement st = conn.prepareCall(sql)) {\n```", "```java\n        st.registerOutParameter(1, Types.VARCHAR);\n```", "```java\n        st.setString(2, origText);\n```", "```java\n        st.setString(3, substr1);\n```", "```java\n        st.setString(4, substr2);\n```", "```java\n        st.execute();\n```", "```java\n        result = st.getString(1);\n```", "```java\n    } catch (Exception ex){\n```", "```java\n        ex.printStackTrace();\n```", "```java\n    }\n```", "```java\n    return result;\n```", "```java\n}\n```", "```java\nString result = replace(\"That is original text\",\n```", "```java\n                         \"original text\", \"the result\");\n```", "```java\nSystem.out.println(result);  //prints: That is the result\n```", "```java\nstatic final String INSERT = \"insert into person \" +\n```", "```java\n  \"(first_name, last_name, dob) values (?, ?, ?::date)\";\n```", "```java\nstatic void insert(Connection conn, Person person) {\n```", "```java\n   try (PreparedStatement st = \n```", "```java\n                       conn.prepareStatement(INSERT)) {\n```", "```java\n            st.setString(1, person.getFirstName());\n```", "```java\n            st.setString(2, person.getLastName());\n```", "```java\n            st.setString(3, person.getDob().toString());\n```", "```java\n            st.execute();\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n            ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nprivate static final String SELECT = \n```", "```java\n          \"select * from person where first_name = ?\";\n```", "```java\nstatic List<Person> selectByFirstName(Connection conn, \n```", "```java\n                                    String firstName) {\n```", "```java\n   List<Person> list = new ArrayList<>();\n```", "```java\n   try (PreparedStatement st = conn.prepareStatement(SELECT)) {\n```", "```java\n        st.setString(1, firstName);\n```", "```java\n        ResultSet rs = st.executeQuery();\n```", "```java\n        while (rs.next()) {\n```", "```java\n            list.add(new Person(rs.getInt(\"id\"),\n```", "```java\n                    rs.getString(\"first_name\"),\n```", "```java\n                    rs.getString(\"last_name\"),\n```", "```java\n                    rs.getDate(\"dob\").toLocalDate()));\n```", "```java\n        }\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n            ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n   return list;\n```", "```java\n}\n```", "```java\nprivate static final String UPDATE = \n```", "```java\n      \"update person set first_name = ? where id = ?\";\n```", "```java\npublic static void updateFirstNameById(Connection conn, \n```", "```java\n                           int id, String newFirstName) {\n```", "```java\n   try (PreparedStatement st = conn.prepareStatement(UPDATE)) {\n```", "```java\n            st.setString(1, newFirstName);\n```", "```java\n            st.setInt(2, id);\n```", "```java\n            st.execute();\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n            ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n}\n```", "```java\nprivate static final String DELETE = \n```", "```java\n                       \"delete from person where id = ?\";\n```", "```java\npublic static void deleteById(Connection conn, int id) {\n```", "```java\n   try (PreparedStatement st = conn.prepareStatement(DELETE)) {\n```", "```java\n            st.setInt(1, id);\n```", "```java\n            st.execute();\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n            ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n}\n```", "```java\n1 try(Connection conn = getConnection()){\n```", "```java\n2    cleanTablePerson(conn);\n```", "```java\n3    Person mike = new Person(\"Mike\", \"Brown\", \n```", "```java\n                             LocalDate.of(2002, 8, 14));\n```", "```java\n4    Person jane = new Person(\"Jane\", \"McDonald\", \n```", "```java\n                             LocalDate.of(2000, 3, 21));\n```", "```java\n5    Person jill = new Person(\"Jill\", \"Grey\", \n```", "```java\n                             LocalDate.of(2001, 4, 1));\n```", "```java\n6    Person.insert(conn, mike);\n```", "```java\n7    Person.insert(conn, jane);\n```", "```java\n8    Person.insert(conn, jane);\n```", "```java\n9    List<Person> persons = \n```", "```java\n           Person.selectByFirstName(conn, jill.getFirstName());\n```", "```java\n10   System.out.println(persons.size());      //prints: 0\n```", "```java\n11   persons = Person.selectByFirstName(conn, \n```", "```java\n                                          jane.getFirstName());\n```", "```java\n12   System.out.println(persons.size());      //prints: 2\n```", "```java\n13   Person person = persons.get(0);\n```", "```java\n14   Person.updateFirstNameById(conn, person.getId(),\n```", "```java\n                                          jill.getFirstName());\n```", "```java\n15   persons = Person.selectByFirstName(conn, \n```", "```java\n                                          jane.getFirstName());\n```", "```java\n16   System.out.println(persons.size());      //prints: 1 \n```", "```java\n17   persons = Person.selectByFirstName(conn, \n```", "```java\n                                          jill.getFirstName());\n```", "```java\n18   System.out.println(persons.size());      //prints: 1\n```", "```java\n19   persons = Person.selectByFirstName(conn, \n```", "```java\n                                          mike.getFirstName());\n```", "```java\n20   System.out.println(persons.size());      //prints: 1\n```", "```java\n21   for(Person p: persons){\n```", "```java\n22      Person.deleteById(conn, p.getId());\n```", "```java\n23   }\n```", "```java\n24   persons = Person.selectByFirstName(conn, \n```", "```java\n                                          mike.getFirstName());\n```", "```java\n25   System.out.println(persons.size());      //prints: 0\n```", "```java\n26 } catch (SQLException ex){\n```", "```java\n27       ex.printStackTrace();\n```", "```java\n28 }\n```", "```java\nvoid cleanTablePerson(Connection conn) {\n```", "```java\n   try (Statement st = conn.createStatement()) {\n```", "```java\n       st.execute(\"delete from person\");\n```", "```java\n   } catch (SQLException ex) {\n```", "```java\n       ex.printStackTrace();\n```", "```java\n   }\n```", "```java\n}\n```"]