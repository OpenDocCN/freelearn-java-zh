["```java\n    // Copyright (c) 2012 IETF Trust and the persons identified as\n       authors of the code. All rights reserved.\n\n    struct \n    {\n      HandshakeType msg_type;\n      uint24 length;\n      uint16 message_seq;                           // New field\n      uint24 fragment_offset;                       // New field\n      uint24 fragment_length;                       // New field\n      select (HandshakeType) \n      {\n        case hello_request: HelloRequest;\n        case client_hello:  ClientHello;\n        case hello_verify_request: HelloVerifyRequest;  // New type\n        case server_hello:  ServerHello;\n        case certificate:Certificate;\n        case server_key_exchange: ServerKeyExchange;\n        case certificate_request: CertificateRequest;\n        case server_hello_done:ServerHelloDone;\n        case certificate_verify:  CertificateVerify;\n        case client_key_exchange: ClientKeyExchange;\n        case finished: Finished;\n      } body;\n    } Handshake;\n```", "```java\n    // Copyright (c) 2012 IETF Trust and the persons identified\n       as authors of the code. All rights reserved.\n\n    struct \n    {\n      ContentType type;\n      ProtocolVersion version;\n      uint16 epoch;                                 // New field\n      uint48 sequence_number;                       // New field\n      uint16 length;\n      opaque fragment[DTLSPlaintext.length];\n    } DTLSPlaintext;\n\n    struct \n    {\n       ContentType type;\n       ProtocolVersion version;\n       uint16 epoch;                                 // New field\n       uint48 sequence_number;                       // New field\n       uint16 length;\n       opaque fragment[DTLSCompressed.length];\n    } DTLSCompressed;\n\n    struct \n    {\n       ContentType type;\n       ProtocolVersion version;\n       uint16 epoch;                                 // New field\n       uint48 sequence_number;                       // New field\n       uint16 length;\n       select (CipherSpec.cipher_type) \n       {\n          case block:  GenericBlockCipher;\n          case aead:   GenericAEADCipher;             // New field\n       } fragment;\n    } DTLSCiphertext;\n```", "```java\n    // Copyright (c) 2012 IETF Trust and the persons identified\n       as authors of the code. All rights reserved.\n\n    enum {\n      hello_request(0), client_hello(1),\n       server_hello(2),\n      hello_verify_request(3),                       // New field\n      certificate(11), server_key_exchange (12),\n      certificate_request(13), server_hello_done(14),\n      certificate_verify(15), client_key_exchange(16),\n      finished(20), (255) } HandshakeType;\n\n      struct {\n        HandshakeType msg_type;\n        uint24 length;\n        uint16 message_seq;                            // New field\n        uint24 fragment_offset;                        // New field\n        uint24 fragment_length;                        // New field\n        select (HandshakeType) {\n          case hello_request: HelloRequest;\n          case client_hello:  ClientHello;\n          case server_hello:  ServerHello;\n          case hello_verify_request: HelloVerifyRequest;  // New field\n          case certificate:Certificate;\n          case server_key_exchange: ServerKeyExchange;\n          case certificate_request: CertificateRequest;\n          case server_hello_done:ServerHelloDone;\n          case certificate_verify:  CertificateVerify;\n          case client_key_exchange: ClientKeyExchange;\n          case finished: Finished;\n        } body; } Handshake;\n\n      struct {\n        ProtocolVersion client_version;\n        Random random;\n        SessionID session_id;\n        opaque cookie<0..2^8-1>;                          // New field\n        CipherSuite cipher_suites<2..2^16-1>;\n        CompressionMethod compression_methods<1..2^8-1>; } ClientHello;\n\n      struct {\n        ProtocolVersion server_version;\n        opaque cookie<0..2^8-1>; } HelloVerifyRequest;\n```", "```java\n    public class KeyStore extends Object\n```", "```java\n    protected KeyStore(KeyStoreSpi keyStoresSpi,\n     Provider provider, String type)\n```", "```java\n    public abstract static class KeyStore.Builder extends Object\n```", "```java\n    public static class KeyStore.CallbackHandlerProtection extends\n     Object implements KeyStore.ProtectionParameter\n```", "```java\n    public CallbackHandler getCallbackHandler()\n```", "```java\n    public static class KeyStore.PasswordProtection extends Object \n     implements KeyStore.ProtectionParameter, Destroyable\n```", "```java\n    public static final class KeyStore.PrivateKeyEntry extends\n     Object implements KeyStore.Entry\n```", "```java\n    public static final class KeyStore.SecretKeyEntry extends\n     Object implements KeyStore.Entry\n```", "```java\n    public static final class KeyStore.TrustedCertificateEntry extends\n     Object implements KeyStore.Entry\n```", "```java\n    . . . \n\n    try {\n      // KeyStore implementation will be returned for the default type\n      KeyStore myKS = KeyStore.getInstance(KeyStore.getDefaultType());\n\n      // Load\n      myKS.load(null, null);\n\n      // Instantiate a KeyStore that holds a trusted certificate\n      TrustedCertificateEntry myCertEntry =\n        new TrustedCertificateEntry(generateCertificate());\n\n      // Assigns the trusted certificate to the \"pack.pub\" alias\n      myKS.setCertificateEntry(\"packt.pub\",\n       myCertEntry.getTrustedCertificate());\n\n      return myKS;\n    } \n    catch (Exception e) {\n      throw new AssertionError(e);\n    }\n  }\n  . . .\n```", "```java\n    public class ConcurrentHashMap<K, V> extends AbstractMap<K, V> \n     implements ConcurrentMap<K, V>, Serializable\n```", "```java\n    public class CodeSource extends Object implements Serializable\n```", "```java\n    struct {\n      ProtocolVersion client_version;\n      Random random;\n      SessionID session_id;\n      CipherSuite cipher_suites<2..2^16-1>;\n      CompressionMethod compression_methods<1..2^8-1>;\n      Extension extensions<0..2^16-1>;\n    } ClientHello;\n```"]