- en: Chapter 3. Test Doubles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covers the concept of test doubles and explains various test double
    types, such as mock, fake, dummy, stub, and spy. Sometimes, it is not possible
    to unit test a piece of code because of unavailability of collaborator objects
    or the cost of instantiation for the collaborator. Test doubles alleviate the
    need for a collaborator.
  prefs: []
  type: TYPE_NORMAL
- en: We know about stunt doubles—a trained replacement used for dangerous action
    sequences in movies, such as jumping out of the Empire State building, a fight
    sequence on top of a burning train, jumping from an airplane, or similar actions.
    Stunt doubles are used to protect the real actors or chip in when the actor is
    not available.
  prefs: []
  type: TYPE_NORMAL
- en: While testing a class that communicates with an API, you don't want to hit the
    API for every single test; for example, when a piece of code is dependent on database
    access, it is not possible to unit test the code unless the database is accessible.
    Similarly, while testing a class that communicates with a payment gateway, you
    can't submit payments to a real payment gateway to run tests.
  prefs: []
  type: TYPE_NORMAL
- en: Test doubles act as stunt doubles. They are skilled replacements for collaborator
    objects. Gerard Meszaros coined the term test doubles and explained test doubles
    in his book *xUnit Test Patterns*, *Pearson Education*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Test doubles are categorized into five types. The following diagram shows these
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test Doubles](img/00049.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Dummy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An example of a dummy would be a movie scene where the double doesn't perform
    anything but is only present on the screen. They are used when the actual actor
    is not present, but their presence is needed for a scene, such as watching the
    tennis finale of a US Open match.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, dummy objects are passed to avoid `NullPointerException` for mandatory
    parameter objects as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, a dummy member was created and passed to a book
    object to test whether a book can report the number of times it was issued. Here,
    a member object is not used anywhere but it's needed to issue a book.
  prefs: []
  type: TYPE_NORMAL
- en: Stub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A stub delivers indirect inputs to the caller when the stub's methods are called.
    Stubs are programmed only for the test scope. Stubs may record other information
    such as the number of times the methods were invoked and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Account transactions should be rolled back if the ATM''s money dispenser fails
    to dispense money. How can we test this when we don''t have the ATM machine, or
    how can we simulate a scenario where the dispenser fails? We can do this using
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `AlwaysFailingDispenserStub` raises an error whenever
    the `dispense()` method is invoked. It allows us to test the transactional behavior
    when the hardware is not present.
  prefs: []
  type: TYPE_NORMAL
- en: Mockito allows us to mock interfaces and concrete classes. Using Mockito, you
    can stub the `dispense()` method to throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Fake
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Fake objects are working implementations; mostly, the fake class extends the
    original class, but it usually hacks the performance, which makes it unsuitable
    for production. The following example demonstrates the fake object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`AddressDAO` extends from a Spring framework class and provides an API for
    mass update. The same method is used to create a new address and update an existing
    one; if the count doesn''t match, then an error is raised. This class cannot be
    tested directly, and it needs `getSimpleJdbcTemplate()`. So, to test this class,
    we need to bypass the JDBC collaborator; we can do this by extending the original
    DAO class but by overriding the collaborator method. The following `FakeAddressDao`
    class is a fake implementation of `AddressDao`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`FakeAddressDao` extends `AddressDao` but only overrides `getSimpleJdbcTemplate()`
    and returns a JDBC template stub. We can use Mockito to create a mock version
    of the `JdbcTemplate` and return it from the fake implementation. This class cannot
    be used in production as it uses a mock `JdbcTemplate`; however, the fake class
    inherits all functionalities of the DAO, so this can be used for testing. The
    fake classes are very useful for legacy code.'
  prefs: []
  type: TYPE_NORMAL
- en: Mock
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Mock objects have expectations; a test expects a value from a mock object, and
    during execution, a mock object returns the expected result. Also, mock objects
    can keep track of the invocation count, that is, the number of times a method
    on a mock object is invoked.
  prefs: []
  type: TYPE_NORMAL
- en: The following example is a continuation of the ATM example with a mock version.
    In the previous example, we stubbed the dispense method of the `Dispenser` interface
    to throw an exception; here, we'll use a mock object to replicate the same behavior.
    We'll explain the syntax in [Chapter 4](part0027_split_000.html#page "Chapter 4. Progressive
    Mockito"), *Progressive Mockito*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code is the mock (Mockito) version of the ATM test. The same object
    can be used in different tests; just the expectation needs to be set. Here, `doThrow()`
    raises an error whenever the mock object is called with any `BigDecimal` value.
  prefs: []
  type: TYPE_NORMAL
- en: Spy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spy is a variation of a mock/stub, but instead of only setting expectations,
    spy records the calls made to the collaborator. The following example explains
    this concept:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To test the `print` behavior of the `ResourceAdapter` class, we need to know
    whether the `printer.print()` method gets invoked when a user has permissions.
    Here, the `printer` collaborator doesn't do anything; it is just used to verify
    the `ResourceAdapter` behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`SpyPrinter` implements the `Printer.print()` call, increments a `noOfTimescalled`
    counter, and `getInvocationCount` returns the count. Create a fake implementation
    of the `SecurityService` class to return `true` from the `canAccess(String printerName,
    String userId)` method. The following is the fake implementation of the `SecurityService`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Fake `SecurityService` and a `SpyPrinter` objects are created and passed to
    the `ResourceAdapter` class and then `adapter.print` is called. In turn, it is
    expected that the `securityService` object will return `true` and the printer
    will be accessed, and `spyPrinter.print(…)` will increment the `noOfTimescalled`
    counter. Finally, in the preceding code, we verified that the count is 1.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter provided an overview of test doubles with examples. The following
    topics covered dummy, stub, mock, fake, and spy. This chapter is a prerequisite
    for Mockito.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will cover the Mockito framework and its advanced uses. Mockito
    is a mocking framework for Java. It provides the API for mock, spy, and stub creation.
  prefs: []
  type: TYPE_NORMAL
