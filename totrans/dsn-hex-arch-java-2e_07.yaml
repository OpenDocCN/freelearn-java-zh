- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building the Application Hexagon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once we have a foundation provided by the Domain hexagon, we can build the remaining
    part of the system on top of this. It’s time to think about how the system will
    coordinate the handling of different data and behaviors to fulfill the needs of
    different actors, and we will explore this through a discussion of use case examples.
    To accomplish this, we need to create the Application hexagon on top of the foundation
    defined by the Domain hexagon.
  prefs: []
  type: TYPE_NORMAL
- en: To continue building the modular structure initiated in the previous chapter,
    where we configured the Domain hexagon as a **Java** module, we will continue
    to use the modular approach by defining the Application hexagon as the second
    Java module of our hexagonal system.
  prefs: []
  type: TYPE_NORMAL
- en: In order to provide a better view of the system’s capabilities, one recommended
    approach is to use **Cucumber**, which is a well-known behavior-driven development
    technology that uses concepts such as features and scenarios to describe the system’s
    behavior. So, for the Application hexagon, we’ll use Cucumber to help us shape
    the hexagonal system’s use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber enables us to test the Application hexagon and explain the structure
    of use cases in a non-technical way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the Application hexagon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining use cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing use cases with input ports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the Application hexagon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll know how to utilize use cases as a blueprint
    to drive the development of the entire Application hexagon. By expressing the
    user intent through use cases and deriving objects from them to implement ports,
    you’ll be able to develop the code to accomplish use case goals in a structured
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To compile and run the code examples presented in this chapter, you need the
    latest **Java SE Development Kit** (**JDK**) and **Maven 3.8** installed on your
    computer. They are all available for the **Linux**, **Mac**, and **Windows** operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code files for this chapter on GitHub at [https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/-Designing-Hexagonal-Architecture-with-Java---Second-Edition/tree/main/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Bootstrapping the Application hexagon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Application hexagon orchestrates internal requests through the Domain hexagon
    and external requests through the Framework hexagon. We construct the system’s
    features based on the domain model provided by the Domain hexagon, with ports
    and use cases. In the Application hexagon, we don’t specify any constraint or
    business rule. Instead, our aim for the Application hexagon is to define and control
    the data flow in the hexagonal system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To continue developing the topology and inventory system, we have to bootstrap
    the Application hexagon as a Maven and Java module. Let’s start with the Maven
    configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding command creates the basic Maven project’s structure for the Application
    hexagon. Here, we set the module’s `groupId` coordinate as `dev.davivieira` and
    `version` as `1.0-SNAPSHOT`, the same ones used for the parent project. We set
    `artifactId` as `application` to uniquely identify this module in the Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to run the preceding `mvn` command in the Maven project root directory
    by using the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This creates the skeleton project structure for the Application hexagon. The
    directory structure will be like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The directory structure of the Application hexagon](img/B19777_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The directory structure of the Application hexagon
  prefs: []
  type: TYPE_NORMAL
- en: 'The root `pom.xml` file should contain the `application` and `domain` Maven
    modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Following the Maven module project creation, we need to configure the Application
    hexagon as a Java module by creating the `module` descriptor file in `application/src/java/module-info.java`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the first `requires` entry – it states that the `application` module depends
    on the `domain` module. We need to add the Domain hexagon dependency at `application/pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The Maven coordinates `groupId`, `artifactId`, and `version` specify the correct
    parameters to fetch the Domain hexagon’s Maven module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we’ll utilize Cucumber to provide a written description and also test
    our use cases, we need to add its dependencies to `application/pom.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: As stated in this chapter’s introduction, we’ll use Cucumber to structure and
    test use cases. The Maven dependencies declared in the previous code examples
    are required to enable Cucumber in the Application hexagon.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Application hexagon’s Maven module and Java module are properly configured
    for the topology and inventory system, we can move on and start defining use cases
    for the system.
  prefs: []
  type: TYPE_NORMAL
- en: Defining use cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The topology and inventory system allows users to manage network resources such
    as routers, switches, and networks. To enable this management, we created a domain
    model in the previous chapter that represents the relationship between those resources.
    What we have to do now is construct the system’s features in terms of the domain
    model. These features represent user intent when interacting with the system.
  prefs: []
  type: TYPE_NORMAL
- en: To make it possible to express use cases in both written and code form, we use
    Cucumber, a valuable tool to enable non-technical people to grasp the use cases
    that exist in the code.
  prefs: []
  type: TYPE_NORMAL
- en: By relying on Cucumber concepts such as features and scenarios, we can create
    use case descriptions that are easy to follow. The use case descriptions that
    are shaped using Cucumber can serve as references to develop use case interfaces.
  prefs: []
  type: TYPE_NORMAL
- en: Before creating the use case interfaces for the topology and inventory system,
    we first need to structure the use cases in feature files consumed by Cucumber.
    Feature files are where we’ll describe a sequence of written statements that define
    the use case. This same written description is then used while implementing the
    classes to test the use case.
  prefs: []
  type: TYPE_NORMAL
- en: Creating written descriptions for router management use cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, let’s create the `RouterAdd.feature` file, which describes
    the use case related to adding routers to the system:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This feature file describes two scenarios – the first is when a user wants to
    add an edge router to a core router; the second is when the user wants to add
    a core router to another core router.
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we have the `RouterCreate.feature` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Here, we have two scenarios describing the creation of both core and edge routers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, there is the `RouterRemove.feature` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For each of the two scenarios described, we define a specific set of constraints
    to allow the removal of the router. Once we have Cucumber scenarios describing
    the supported behaviors regarding router management, we can define the use case
    interface that will allow the implementation of the operations. These operations
    will enable such behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Defining the use case interface for router management
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A good use case interface for router management should contain the operations
    that allow the system to fulfill the scenarios described by the `RouterAdd.feature`,
    `RouterCreate.feature`, and `RouterRemove.feature` files. The following use case
    interface is defined in reference to the scenarios we described in the Cucumber
    feature files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The `createRouter` method is based on the `RouterCreate.feature` Cucumber file.
    The `addRouterToCoreRouter` and `removeRouterFromCoreRouter` methods are for the
    `RouterAdd.feature` and `RouterRemove.feature` files, respectively. Now, let’s
    move on to creating the written descriptions for the switch management use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Creating written descriptions for switch management use cases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start by creating the `SwitchAdd.feature` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This is a very straightforward use case scenario. Given that we provide a valid
    switch, we can add it to an edge router. There is no mention of the core routers
    because they are not supposed to receive switch connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we create the `SwitchCreate.feature` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '@SwitchRemove'
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature: Can I remove a switch from an edge router?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Removing a switch from an edge router'
  prefs: []
  type: TYPE_NORMAL
- en: Given I know the switch I want to remove
  prefs: []
  type: TYPE_NORMAL
- en: And The switch has no networks
  prefs: []
  type: TYPE_NORMAL
- en: Then I remove the switch from the edge router
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.
  prefs: []
  type: TYPE_NORMAL
- en: application.usecases;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs: []
  type: TYPE_NORMAL
- en: entity.EdgeRouter;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs: []
  type: TYPE_NORMAL
- en: entity.Switch;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.IP;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Location;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Model;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs: []
  type: TYPE_NORMAL
- en: vo.SwitchType;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Vendor;
  prefs: []
  type: TYPE_NORMAL
- en: public interface SwitchManagementUseCase {
  prefs: []
  type: TYPE_NORMAL
- en: Switch createSwitch(
  prefs: []
  type: TYPE_NORMAL
- en: Vendor vendor,
  prefs: []
  type: TYPE_NORMAL
- en: Model model,
  prefs: []
  type: TYPE_NORMAL
- en: IP ip,
  prefs: []
  type: TYPE_NORMAL
- en: Location location,
  prefs: []
  type: TYPE_NORMAL
- en: SwitchType switchType
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: EdgeRouter addSwitchToEdgeRouter(Switch networkSwitch,
  prefs: []
  type: TYPE_NORMAL
- en: EdgeRouter edgeRouter);
  prefs: []
  type: TYPE_NORMAL
- en: EdgeRouter removeSwitchFromEdgeRouter(Switch
  prefs: []
  type: TYPE_NORMAL
- en: networkSwitch,
  prefs: []
  type: TYPE_NORMAL
- en: EdgeRouter edgeRouter);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '@NetworkAdd'
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature: Can I add a network to a switch?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Adding a network to a switch'
  prefs: []
  type: TYPE_NORMAL
- en: Given I have a network
  prefs: []
  type: TYPE_NORMAL
- en: And I have a switch to add a network
  prefs: []
  type: TYPE_NORMAL
- en: Then I add the network to the switch
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '@NetworkCreate'
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature: Can I create new networks?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Creating a new network'
  prefs: []
  type: TYPE_NORMAL
- en: Given I provide all required data to create a network
  prefs: []
  type: TYPE_NORMAL
- en: Then A new network is created
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '@NetworkRemove'
  prefs: []
  type: TYPE_NORMAL
- en: 'Feature: Can I remove a network from a switch?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Removing a network from a switch'
  prefs: []
  type: TYPE_NORMAL
- en: Given I know the network I want to remove
  prefs: []
  type: TYPE_NORMAL
- en: And I have a switch to remove a network
  prefs: []
  type: TYPE_NORMAL
- en: Then I remove the network from the switch
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.
  prefs: []
  type: TYPE_NORMAL
- en: application.usecases;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs: []
  type: TYPE_NORMAL
- en: entity.Switch;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.IP;
  prefs: []
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Network;
  prefs: []
  type: TYPE_NORMAL
- en: public interface NetworkManagementUseCase {
  prefs: []
  type: TYPE_NORMAL
- en: Network createNetwork(
  prefs: []
  type: TYPE_NORMAL
- en: IP networkAddress,
  prefs: []
  type: TYPE_NORMAL
- en: String networkName,
  prefs: []
  type: TYPE_NORMAL
- en: int networkCidr);
  prefs: []
  type: TYPE_NORMAL
- en: Switch addNetworkToSwitch(Network network,
  prefs: []
  type: TYPE_NORMAL
- en: Switch networkSwitch);
  prefs: []
  type: TYPE_NORMAL
- en: Switch removeNetworkFromSwitch(Network network,
  prefs: []
  type: TYPE_NORMAL
- en: Switch networkSwitch);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ports.input;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ports.output.RouterManagementOutputPort;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: usecases.RouterManagementUseCase;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.entity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CoreRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entity.Router;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.entity.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: factory.RouterFactory;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.IP;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Id;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Location;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Model;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.RouterType;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Vendor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import lombok.NoArgsConstructor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@NoArgsConstructor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public class RouterManagementInputPort implements
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: RouterManagementUseCase {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: RouterManagementOutputPort
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: routerManagementOutputPort;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /** Code omitted
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Router createRouter(Vendor vendor,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model model,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP ip,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Location location,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: RouterType routerType) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return RouterFactory.getRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vendor,model,ip,location,routerType);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Router retrieveRouter(Id id) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: routerManagementOutputPort.retrieveRouter(id);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Router persistRouter(Router router) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: routerManagementOutputPort.persistRouter(router);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public CoreRouter addRouterToCoreRouter(Router router,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CoreRouter coreRouter) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var addedRouter = coreRouter.addRouter(router);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //persistRouter(addedRouter);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return addedRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Router removeRouterFromCoreRouter(Router rout
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: er,CoreRouter coreRouter) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var removedRouter =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: coreRouter.removeRouter(router);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: //persistRouter(removedRouter);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return removedRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public static Router getRouter(Vendor vendor,
  prefs: []
  type: TYPE_NORMAL
- en: Model model,
  prefs: []
  type: TYPE_NORMAL
- en: IP ip,
  prefs: []
  type: TYPE_NORMAL
- en: Location location,
  prefs: []
  type: TYPE_NORMAL
- en: RouterType routerType){
  prefs: []
  type: TYPE_NORMAL
- en: switch (routerType){
  prefs: []
  type: TYPE_NORMAL
- en: case CORE → { return CoreRouter.builder().
  prefs: []
  type: TYPE_NORMAL
- en: id(Id.withoutId()).
  prefs: []
  type: TYPE_NORMAL
- en: vendor(vendor).
  prefs: []
  type: TYPE_NORMAL
- en: model(model).
  prefs: []
  type: TYPE_NORMAL
- en: ip(ip).
  prefs: []
  type: TYPE_NORMAL
- en: location(location).
  prefs: []
  type: TYPE_NORMAL
- en: routerType(routerType).
  prefs: []
  type: TYPE_NORMAL
- en: build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: /** Code omitted **/
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: case EDGE → {  return EdgeRouter.builder().
  prefs: []
  type: TYPE_NORMAL
- en: id(Id.withoutId()).
  prefs: []
  type: TYPE_NORMAL
- en: vendor(vendor).
  prefs: []
  type: TYPE_NORMAL
- en: model(model).
  prefs: []
  type: TYPE_NORMAL
- en: ip(ip).
  prefs: []
  type: TYPE_NORMAL
- en: location(location).
  prefs: []
  type: TYPE_NORMAL
- en: routerType(routerType).
  prefs: []
  type: TYPE_NORMAL
- en: build();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: default → throw new UnsupportedOperationException(
  prefs: []
  type: TYPE_NORMAL
- en: '"No valid router type informed");'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ports.input;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: usecases.SwitchManagementUseCase;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entity.EdgeRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entity.Switch;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.IP;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.Id;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Location;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Model;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.SwitchType;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Vendor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public class SwitchManagementInputPort implements
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SwitchManagementUseCase {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Switch createSwitch(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vendor vendor,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model model,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP ip,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Location location,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SwitchType switchType) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return Switch.builder()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .id(Id.withoutId())
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .vendor(vendor)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .model(model)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .ip(ip)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .location(location).switchType
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (switchType).build();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /** Code omitted **/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public EdgeRouter addSwitchToEdgeRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch networkSwitch, EdgeRouter edgeRouter) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter.addSwitch(networkSwitch);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return edgeRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public EdgeRouter removeSwitchFromEdgeRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Switch networkSwitch,EdgeRouter edgeRouter) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter.removeSwitch(networkSwitch);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return edgeRouter;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: application.ports.input;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: usecases.NetworkManagementUseCase;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entity.Switch;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.vo.IP;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import dev.davivieira.topologyinventory.domain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: vo.Network;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: import lombok.NoArgsConstructor;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@NoArgsConstructor'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public class NetworkManagementInputPort implements
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: NetworkManagementUseCase {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Network createNetwork(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP networkAddress, String networkName,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: int networkCidr) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return  Network
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .builder()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .networkAddress(networkAddress)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .networkName(networkName)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: .networkCidr(networkCidr).build();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: /** Code omitted **/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Switch addNetworkToSwitch(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Network network, Switch networkSwitch) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networkSwitch.addNetworkToSwitch(network);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return networkSwitch;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Override'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public Switch removeNetworkFromSwitch(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Network network, Switch networkSwitch) {
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networkSwitch.removeNetworkFromSwitch(network);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return networkSwitch;
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: package dev.davivieira.topologyinventory.application;
  prefs: []
  type: TYPE_NORMAL
- en: import io.cucumber.junit.Cucumber;
  prefs: []
  type: TYPE_NORMAL
- en: import io.cucumber.junit.CucumberOptions;
  prefs: []
  type: TYPE_NORMAL
- en: import org.junit.runner.RunWith;
  prefs: []
  type: TYPE_NORMAL
- en: '@RunWith(Cucumber.class)'
  prefs: []
  type: TYPE_NORMAL
- en: '@CucumberOptions('
  prefs: []
  type: TYPE_NORMAL
- en: plugin = {"pretty", "html:target/cucumber-result"}
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: public class ApplicationTest {
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '@Given("I have an edge router")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void assert_edge_router_exists(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter = (EdgeRouter)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.routerManagementUseCase.createRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vendor.HP,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model.XYZ0004,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP.fromAddress("20.0.0.1"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: locationA,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: EDGE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertNotNull(edgeRouter);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@And("I have a core router")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void assert_core_router_exists(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: coreRouter = (CoreRouter)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.routerManagementUseCase.createRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vendor.CISCO,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model.XYZ0001,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP.fromAddress("30.0.0.1"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: locationA,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CORE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertNotNull(coreRouter);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Then("I add an edge router to a core router")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void add_edge_to_core_router(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var actualEdgeId = edgeRouter.getId();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var routerWithEdge =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (CoreRouter)  this.routerManagementUseCase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: addRouterToCoreRouter(edgeRouter, coreRouter);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var expectedEdgeId =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: routerWithEdge.getRouters().get(actualEdgeId).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: getId();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(actualEdgeId, expectedEdgeId);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: mvn test
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '@RouterAdd'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Adding an edge router to a core router # dev/davivieira/topologyinventory/application/routers/RouterAdd.feature:4'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given I have an edge router # dev.davivieira.topologyinventory.application.RouterAdd.assert_edge_router_exists()'
  prefs: []
  type: TYPE_NORMAL
- en: 'And I have a core router # dev.davivieira.topologyinventory.application.RouterAdd.assert_core_router_exists()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then I add an edge router to a core router # dev.davivieira.topologyinventory.application.RouterAdd.add_edge_to_core_router()'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '@Given("I provide all required data to create a core'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: router")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void create_core_router(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: router =  this.routerManagementUseCase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: createRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vendor.CISCO,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model.XYZ0001,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP.fromAddress("20.0.0.1"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: locationA,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: CORE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Then("A new core router is created")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void a_new_core_router_is_created(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertNotNull(router);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(CORE, router.getRouterType());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Given("I provide all required data to create an edge'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: router")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void create_edge_router(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: router =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.routerManagementUseCase.createRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Vendor.HP,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Model.XYZ0004,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: IP.fromAddress("30.0.0.1"),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: locationA,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: EDGE
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: );
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Then("A new edge router is created")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void a_new_edge_router_is_created(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertNotNull(router);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(EDGE, router.getRouterType());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: mvn test
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '@RouterCreate'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Creating a new edge router # dev/davivieira/topologyinventory/application/routers/RouterCreate.feature:8'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given I provide all required data to create an edge router # dev.davivieira.topologyinventory.application.RouterCreate.create_edge_router()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then A new edge router is created # dev.davivieira.topologyinventory.application.RouterCreate.a_new_edge_router_is_created()'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '@Given("The core router has at least one edge router'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: connected to it")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void the_core_router_has_at_least_one_edge_
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: router_connected_to_it(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var predicate =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Router.getRouterTypePredicate(EDGE);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter = (EdgeRouter)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: this.coreRouter.getRouters().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: entrySet().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: stream().
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: map(routerMap -> routerMap.getValue()).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: filter(predicate).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: findFirst().get();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(EDGE, edgeRouter.getRouterType());
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@And("The switch has no networks attached to it")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void the_switch_has_no_networks_
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: attached_to_it(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var networksSize =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networkSwitch.getSwitchNetworks().size();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(1, networksSize);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networkSwitch.removeNetworkFromSwitch(network);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networksSize =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: networkSwitch.getSwitchNetworks().size();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(0, networksSize);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@And("The edge router has no switches attached to it")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void the_edge_router_has_no_switches_
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: attached_to_it(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var switchesSize =
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter.getSwitches().size();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(1, switchesSize);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter.removeSwitch(networkSwitch);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: switchesSize = edgeRouter.getSwitches().size();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(0, switchesSize);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@Then("I remove the edge router from the core router")'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: public void edge_router_is_removed_from_core_router(){
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var actualID = edgeRouter.getId();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: var expectedID = this.routerManagementUseCase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: removeRouterFromCoreRouter(
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: edgeRouter, coreRouter).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: getId();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: assertEquals(expectedID, actualID);
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: mvn test
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '@RouterRemove'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scenario: Removing an edge router from a core router # dev/davivieira/topologyinventory/application/routers/RouterRemove.feature:4'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given The core router has at least one edge router connected to it # dev.davivieira.topologyinventory.application.RouterRemove.the_core_router_has_at_least_one_edge_router_connected_to_it()'
  prefs: []
  type: TYPE_NORMAL
- en: 'And The switch has no networks attached to it # dev.davivieira.topologyinventory.application.RouterRemove.the_switch_has_no_networks_attached_to_it()'
  prefs: []
  type: TYPE_NORMAL
- en: 'And The edge router has no switches attached to it # dev.davivieira.topologyinventory.application.RouterRemove.the_edge_router_has_no_switches_attached_to_it()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then I remove the edge router from the core router # dev.davivieira.topologyinventory.application.RouterRemove.edge_router_is_removed_from_core_router()'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
