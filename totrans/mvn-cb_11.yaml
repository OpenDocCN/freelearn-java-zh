- en: Chapter 11. Advanced Maven Usage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let us look at the following recipes in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating an assembly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a custom executable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an ANT task
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining updates to Maven plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Determining updates to Maven dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the constraints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating unique builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Releasing a Maven project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we look at using features of Maven that may not be required
    on a regular basis or for projects. These range from assembling your project for
    distribution to releasing your project. These are not typical build tasks, but
    essential elements of a project lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an assembly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A typical project requirement is to aggregate the project output along with
    its dependencies, modules, and other files into a single distributable archive.
    An assembly is a group of files, directories, and dependencies that are assembled
    into an archive format and distributed. Maven provides prefabricated assembly
    descriptors to build these assemblies. The descriptors handle common operations,
    such as packaging a project's artifact, along with the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Maven should be set up on your system and verified to work. To do this, refer
    to [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a Maven project for which you want to generate the assembly; in our case,
    `project-with-assembly`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin and configuration to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the created distribution JAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We made the following changes to the pom file:'
  prefs: []
  type: TYPE_NORMAL
- en: We chose `jar-with-dependencies`, one of the prefabricated assembly descriptors
    provided by the Maven Assembly plugin. This creates a single JAR with all the
    dependencies of the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We also used the `archive` configuration to specify the main class of the project.
    This is to make the JAR file executable.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then specified when the single goal of assembly should be run, namely, the
    `package` phase.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When Maven ran, it used the preceding configurations to assemble a JAR with
    dependencies in the package phase. We could run this as a normal executable JAR.
  prefs: []
  type: TYPE_NORMAL
- en: Besides predefined descriptors, the Maven Assembly plugin also allows us to
    create custom descriptors that can have fine-grained control over the contents
    of the assembly.
  prefs: []
  type: TYPE_NORMAL
- en: The Assembly plugin can also build an assembly from a multi-module project,
    where the modules can be part of the final assembly.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While opening the JAR file, you would have observed that all the dependant JARs
    have been unpacked as well.
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is due to the default configuration for the predefined descriptor. Let
    us see how to create the same distribution but retain dependant JARs as they are.
    To do this, we will now use one Maven JAR plugin, which uses a custom class loader
    to load dependant JARs within the parent JAR:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project for which you want to create an executable with unpackaged
    dependant jars (`project-with-one-jar`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin in the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the JAR plugin to specify the main class for the executable JAR:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code as the plugin binaries are not in the central Maven
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the generated executable and observe the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the created JAR file:![There's more...](img/6124OS_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can see that in contrast to the assembly JAR, the executable JAR is created
    without unpacking the libraries (dependencies) involved.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the `lib` folder in the JAR:![There's more...](img/6124OS_11_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dependant JARs are stored in the `lib` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Generating an executable JAR* recipe in [Chapter 10](ch10.html "Chapter 10. Java
    Development with Maven"), *Java Development with Maven*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a custom executable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many situations when you want Maven to run a specific executable on
    your computer. A simple use case would be to run the JAR that you created. Another
    case would be to have Maven run commands that are not provided as plugins (for
    instance, create a native Windows installer).
  prefs: []
  type: TYPE_NORMAL
- en: Maven provides support to run any executable system in a separate process along
    with Java programs in the same virtual machine on which Maven runs. The Maven
    Exec plugin provides this support using the `exec` goal (to run in a separate
    process) and the `java` goal (to run Java programs in the same process).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple Maven project (`simple-project`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the results:![How to do it...](img/6124OS_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We wanted to run the JAR file that we had created in the project. To do this,
    we called the `java` goal of the Maven Exec plugin. We provided the plugin with
    the required parameter (`mainClass`) so that it knew which main class needed to
    be run.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You could integrate the running of the executable as part of the project lifecycle.
    Let us do this for our example:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the project (let's call it `project-with-exec`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The project is run during the package phase based on the configuration that
    we specified in the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: The same can be done for non-Java executables; we need to invoke the `exec`
    goal instead of the `java` goal.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Running system executables makes the build nonportable, so use it with care.
  prefs: []
  type: TYPE_NORMAL
- en: Running an ANT task
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ANT is a popular build automation tool that provides a great degree of flexibility.
    It also provides tasks, such as `echo` and `touch`, that are not available in
    Maven. There might be advantages in combining ANT tasks with Maven to achieve
    certain goals, though it is best to avoid it until it's inevitable.
  prefs: []
  type: TYPE_NORMAL
- en: Maven provides a mechanism to run arbitrary ANT tasks by way of the Maven AntRun
    plugin. Let us see how to use this to run an ANT task in our project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project for which you want to run ANT tasks (`project-with-ant`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We configured the Maven AntRun plugin to run an ANT target during the `package`
    phase. In the ANT target, we specified a simple `echo` task, which outputted a
    string we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of the `echo` task, we could write more complex tasks. The Maven AntRun
    plugin also provides a means for ANT tasks to refer to Maven properties, class
    paths, and others.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is good practice to separate ANT tasks to a separate ANT build script (`build.xml`)
    and invoke the same from Maven. Let us see how to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a simple ANT build script, `build.xml`, and add the following contents:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `target` configuration in the pom file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![There's more...](img/6124OS_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The result is the same, but now the ANT scripts are separated from Maven.
  prefs: []
  type: TYPE_NORMAL
- en: Determining updates to Maven plugin AntRun
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In our build scripts, we explicitly specify the version of the Maven plugins
    that we use. This is required in order to create reproducible builds. In the absence
    of the version, Maven gives a warning such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Over a period of time, there could be updates to these plugins. It would be
    good to know if there are any so that we can suitably update the plugin versions.
    Let us see how we can do this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a project for which you want to check the plugin update (`project-with-exec`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the version of the plugin to an older one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `display-plugin-updates` goal of the Maven Versions plugin downloads the
    metadata for all the plugins specified in the pom file and then produces a report.
    The report reveals a number of things that are of interest.
  prefs: []
  type: TYPE_NORMAL
- en: A `prerequisites` tag is absent. The `prerequisites` tag in the pom file specifies
    the minimum version of Maven that is required to build the project. In the absence
    of this, Maven takes the minimum version as `2.0`. There is a risk of nonreproducible
    builds if different developers use different versions of Maven. Hence, it is a
    good practice to specify a minimum version by using this tag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a warning about plugin versions not being defined. As we have seen,
    plugins in the pom file don't need to be specified explicitly unless they need
    to be configured. Now, Maven still uses various plugins for execution (such as
    clean, resources, compile, test, and so on) and it needs to determine the version
    to be used. It uses the version specified by the super pom, which is fine in most
    cases. However, the Versions plugin alerts us that this is the case, so we can
    take action as appropriate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a difference in plugin versions based on the Maven version. The report
    specifies different versions of various plugins based on the Maven version used.
    This is all the more reason why it is important to specify a prerequisite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the output indicates, if we specify that we need at least the `2.2.1` version
    of Maven, then we can see that there is a newer version of the Maven Exec plugin,
    which is `1.3.2`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us now specify the `prerequisites` element in the pom file and see how
    it affects the output of the goal:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We now see that the plugin reports a plugin update based on the prerequisite
    that we specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is difficult to determine if there are updates to plugins that we do not
    explicitly define in the pom file. For instance, as per the output from the preceding
    command, which is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: However, as of writing this book, the latest version of the Maven Clean plugin
    is 2.6.1, that of the Maven Compiler plugin is 3.2, and so on. The version that
    the super pom has is the version that must have been the latest when it was created.
    The versions of these dependencies become important when bugs or newer features
    are present in the newer versions. In this case, we do want to get the newer version
    of these plugins. It is easy to get these by explicitly specifying the version
    of the plugins in the pom file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the pom file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, re-run the previous command and note the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Determining updates to Maven dependencies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use a number of third-party libraries to build our projects. As you recall,
    we specify the `groupId`, `artifactId`, and `version` elements of each of these
    dependant libraries in our pom file. There may be many occasions when there are
    updates to these libraries and new versions are released. It will be good to have
    a mechanism to get notified about these releases and update the project build
    file suitably.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Take a project for which you want to check for a dependency update, `simple-project`,
    which we had created using the quick-start archetype.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `display-dependency-updates` goal of the Maven Versions plugin uses the
    metadata of each of the maven dependencies to determine the latest version of
    each dependency. If it does not match the current version, it displays a report
    about the difference.
  prefs: []
  type: TYPE_NORMAL
- en: We have already seen earlier that `SNAPSHOT` versions are handled differently
    by Maven, and it automatically checks and updates these dependencies for each
    build as per the configuration. If the version number of the `SNAPSHOT` changes
    (`1.0-SNAPSHOT` to `1.1-SNAPSHOT`), then the Versions plugin indicates that.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Versions plugin provides several other goals to manage updates to
    dependency and plugin versions. This includes automatically changing the versions
    to the latest release versions, replacing `SNAPSHOT` with release versions, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the constraints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the requirements for a build tool is to be able to generate repeatable
    builds. In a project, the build tool should behave identically for all team members.
    While a project guideline can be made on the version of Java or Maven to be used,
    it would be easier if it could be enforced automatically.
  prefs: []
  type: TYPE_NORMAL
- en: This is where the Maven Enforcer plugin comes in.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a simple project (`project-with-enforcer`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the project using Java 7 and Maven 3.2.3:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Observe the output:![How to do it...](img/6124OS_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Enforcer plugin uses the rules configuration and validates the project against
    the rules. If it finds violations, it reports the error(s) and does not proceed
    with the build.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, our project had two issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The Maven version**: We were using version 3.2.3 but we had specified 3.2.5
    in the rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The Java version**: We were using Java 7 but we had specified Java 8 in the
    rules'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Maven Enforcer plugin has several other rules to enforce various constraints.
    A couple of them are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`requireOS`: This ensures the project can be built only on specific operating
    systems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requireFilesExist`: This ensures specific files exist for the project to build'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is also possible to implement custom enforcer rules. One such is available
    at [https://github.com/ferstl/pedantic-pom-enforcers](https://github.com/ferstl/pedantic-pom-enforcers).
  prefs: []
  type: TYPE_NORMAL
- en: Generating unique builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen, we use a `SNAPSHOT` version to specify that the project is
    under development. In the course of development, we will create several builds
    for the project. In many situations, it will be useful to distinguish one such
    build from another. One could be when we use continuous integration. Another would
    be when a tester needs to log defects against a build.
  prefs: []
  type: TYPE_NORMAL
- en: It would be nice if there was a way to generate a unique build number to identify
    a build in the case of `SNAPSHOT` versions.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the project for which you want to have a build number (`project-with-build-number`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following plugin configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following to use the unique build number created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the SCM configuration for the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Observe the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Maven Build Number plugin provides three ways to generate a unique number,
    namely by using SCM, a sequential build number, or a timestamp.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we used SCM as it is easy to map the build against
    the corresponding SCM version. We used `git` and specified the SCM details in
    the SCM tag of the pom file.
  prefs: []
  type: TYPE_NORMAL
- en: We also specified to the Maven Build Number plugin to use five characters and
    create the short revision, as a typical git revision is a long hash value. We
    also configured the plugin to run during the validation phase of the lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: We used the generated Build Number in the name of the generated artifact, by
    appending it along with the version number.
  prefs: []
  type: TYPE_NORMAL
- en: Now, each time a new check-in is done and the build is completed, an artifact
    with a unique name is generated. Based on the requirement, each such artifact
    can be archived or traced to a corresponding source.
  prefs: []
  type: TYPE_NORMAL
- en: Releasing a Maven project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ultimate goal of any project is the release. After development is complete
    and bugs are fixed, it is time to release the project. Different projects are
    released in different ways. Web projects are released by deploying them to the
    web server. Other projects may be packaged into executable JARs. Still others
    may be packaged as executables or installers. If the project is a library or a
    dependency used in other projects, then it needs to be made available suitably.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen before, we use the `SNAPSHOT` version during development. When
    the project has to be released, this version now needs to be replaced with a concrete
    version.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most advanced features of Maven is its support to do a project release.
    Let us explore this.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open a project for which you want to do a release (`project-with-release`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify if the SCM details are present in the pom file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the plugin definition in order to specify the latest version of the plugin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Maven command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By default, changes made by the plugin are pushed to the repository. If you
    do not want that, set the `pushChanges` configuration option to `false`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose the default values when prompted.![How to do it...](img/6124OS_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You could choose the default values for the release version, the SCM tag and
    new development version, or provide your values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Observe the output:![How to do it...](img/6124OS_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Maven runs a number of commands that modify the pom file. Then, it checks in
    the changes into the repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By default, the `perform` goal of the Maven Release plugin runs the `deploy`
    goal to deploy the project to the specified repository. If you do not have a remote
    repository to deploy to, or want to run a different goal as part of the release,
    you can specify it using the `goals` configuration. In the preceding case, we
    have set it to run the `package` goal.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, to do the release, Maven checks out the tag created by the `prepare` goal
    from the repository. If you want Maven to check out the local copy instead, you
    could do so by setting the `localCheckout` configuration to `true`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Observe the output:![How to do it...](img/6124OS_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure that the release binaries are created in the `target/checkout/project-with-release/target`
    folder:![How to do it...](img/6124OS_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two steps to making a release—prepare and perform.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the prepare goal of the Maven Release plugin is run, it does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Checks there are no uncommitted changes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks that the project does not have any `SNAPSHOT` dependencies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes the version of the `SNAPSHOT` project; you will be prompted to confirm
    or override the default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adds a `tag` element to the `scm` element and computes the value (by default,
    `HEAD`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Runs the `verify` goal to ensure that the changes do not break anything
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commits the modified pom to the SCM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tags the code in SCM with a version name (you will be prompted to confirm or
    override the default):![How it works...](img/6124OS_11_10.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bumps the version in the pom to the new `SNAPSHOT` value (from `1.0-SNAPSHOT`;
    this would be `1.1-SNAPSHOT`); you will be prompted to confirm or override this
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Commits the modified pom to SCM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, once the goal is met, you will have an updated SCM with a tag
    with the release version and the `HEAD` with the next `SNAPSHOT` version. A `release.properties`
    file is also created. It contains information that is needed for the `perform`
    goal.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The second platform does as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The perform goal uses the information in `release.properties` to check out from
    the SCM tag that was created earlier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It then runs the specified goal on the checked-out project (by default, `deploy`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This generates the release binaries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once the build is successful, `release.properties` and other backup files created
    by the Release plugin are removed.
  prefs: []
  type: TYPE_NORMAL
