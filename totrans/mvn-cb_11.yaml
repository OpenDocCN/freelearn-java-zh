- en: Chapter 11. Advanced Maven Usage
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章. 高级 Maven 使用
- en: 'Let us look at the following recipes in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看本章中的以下食谱：
- en: Creating an assembly
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建汇编
- en: Running a custom executable
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行自定义的可执行文件
- en: Running an ANT task
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行 ANT 任务
- en: Determining updates to Maven plugins
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定 Maven 插件的更新
- en: Determining updates to Maven dependencies
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定 Maven 依赖的更新
- en: Controlling the constraints
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制约束
- en: Generating unique builds
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成唯一的构建
- en: Releasing a Maven project
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布 Maven 项目
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we look at using features of Maven that may not be required
    on a regular basis or for projects. These range from assembling your project for
    distribution to releasing your project. These are not typical build tasks, but
    essential elements of a project lifecycle.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨使用 Maven 的功能，这些功能可能不是在常规基础上或项目中必需的。这些功能包括为分发组装项目以及发布项目。这些不是典型的构建任务，但却是项目生命周期中的基本要素。
- en: Creating an assembly
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建汇编
- en: A typical project requirement is to aggregate the project output along with
    its dependencies, modules, and other files into a single distributable archive.
    An assembly is a group of files, directories, and dependencies that are assembled
    into an archive format and distributed. Maven provides prefabricated assembly
    descriptors to build these assemblies. The descriptors handle common operations,
    such as packaging a project's artifact, along with the dependencies.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的项目需求是将项目输出及其依赖项、模块和其他文件聚合到一个可分发的存档中。汇编是一组文件、目录和依赖项，它们被组装成存档格式并分发。Maven
    提供了预制汇编描述符来构建这些汇编。描述符处理常见的操作，例如打包项目的工件及其依赖项。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Maven should be set up on your system and verified to work. To do this, refer
    to [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 应该已经设置在你的系统上，并且经过验证可以工作。为此，请参考 [第 1 章](ch01.html "第 1 章. 入门"), *入门*。
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a Maven project for which you want to generate the assembly; in our case,
    `project-with-assembly`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要生成汇编的 Maven 项目；在我们的例子中，是 `project-with-assembly`。
- en: 'Add the following plugin and configuration to the pom file:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件和配置添加到 pom 文件中：
- en: '[PRE0]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following Maven command:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE1]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Observe the output:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run the created distribution JAR:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行创建的分布 JAR：
- en: '[PRE3]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We made the following changes to the pom file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对 pom 文件做了以下更改：
- en: We chose `jar-with-dependencies`, one of the prefabricated assembly descriptors
    provided by the Maven Assembly plugin. This creates a single JAR with all the
    dependencies of the project.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们选择了 `jar-with-dependencies`，这是 Maven 汇编插件提供的预制汇编描述符之一。这创建了一个包含项目所有依赖的单个 JAR
    文件。
- en: We also used the `archive` configuration to specify the main class of the project.
    This is to make the JAR file executable.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还使用了 `archive` 配置来指定项目的主类。这是为了使 JAR 文件可执行。
- en: We then specified when the single goal of assembly should be run, namely, the
    `package` phase.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定了汇编的单个目标应该在哪个阶段运行，即 `package` 阶段。
- en: When Maven ran, it used the preceding configurations to assemble a JAR with
    dependencies in the package phase. We could run this as a normal executable JAR.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Maven 运行时，它使用了前面的配置，在 `package` 阶段组装了一个包含依赖的 JAR 文件。我们可以将其作为一个正常的可执行 JAR 运行。
- en: Besides predefined descriptors, the Maven Assembly plugin also allows us to
    create custom descriptors that can have fine-grained control over the contents
    of the assembly.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 除了预定义的描述符之外，Maven 汇编插件还允许我们创建自定义描述符，可以精细控制汇编的内容。
- en: The Assembly plugin can also build an assembly from a multi-module project,
    where the modules can be part of the final assembly.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 汇编插件还可以从多模块项目构建汇编，其中模块可以是最终汇编的一部分。
- en: There's more...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: While opening the JAR file, you would have observed that all the dependant JARs
    have been unpacked as well.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开 JAR 文件时，你会观察到所有依赖的 JAR 文件也被解包了。
- en: '![There''s more...](img/6124OS_11_12.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![更多内容...](img/6124OS_11_12.jpg)'
- en: 'This is due to the default configuration for the predefined descriptor. Let
    us see how to create the same distribution but retain dependant JARs as they are.
    To do this, we will now use one Maven JAR plugin, which uses a custom class loader
    to load dependant JARs within the parent JAR:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为预定义描述符的默认配置。让我们看看如何创建相同的分发，但保留依赖的 JAR 文件不变。为此，我们现在将使用一个 Maven JAR 插件，该插件使用自定义类加载器在父
    JAR 中加载依赖 JAR：
- en: Open the project for which you want to create an executable with unpackaged
    dependant jars (`project-with-one-jar`).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要创建具有未打包依赖JAR文件的可执行文件的项目（`project-with-one-jar`）。
- en: 'Add the following plugin in the pom file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在pom文件中添加以下插件：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the JAR plugin to specify the main class for the executable JAR:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加JAR插件以指定可执行JAR的主类：
- en: '[PRE5]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following code as the plugin binaries are not in the central Maven
    repository:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码，因为插件二进制文件不在中央Maven仓库中：
- en: '[PRE6]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Run the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE7]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the generated executable and observe the result:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行生成的可执行文件并观察结果：
- en: '[PRE8]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Open the created JAR file:![There's more...](img/6124OS_11_01.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开创建的JAR文件：![更多内容...](img/6124OS_11_01.jpg)
- en: We can see that in contrast to the assembly JAR, the executable JAR is created
    without unpacking the libraries (dependencies) involved.
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以看到，与assembly JAR相比，可执行JAR是在不解包涉及的库（依赖项）的情况下创建的。
- en: Navigate to the `lib` folder in the JAR:![There's more...](img/6124OS_11_13.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到JAR中的`lib`文件夹：![更多内容...](img/6124OS_11_13.jpg)
- en: The dependant JARs are stored in the `lib` folder.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 依赖的JAR文件存储在`lib`文件夹中。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: The *Generating an executable JAR* recipe in [Chapter 10](ch10.html "Chapter 10. Java
    Development with Maven"), *Java Development with Maven*
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第10章“使用Maven进行Java开发”中的*生成可执行JAR*配方，*使用Maven进行Java开发*
- en: Running a custom executable
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行自定义的可执行文件
- en: There are many situations when you want Maven to run a specific executable on
    your computer. A simple use case would be to run the JAR that you created. Another
    case would be to have Maven run commands that are not provided as plugins (for
    instance, create a native Windows installer).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多情况下，你希望Maven在你的计算机上运行特定的可执行文件。一个简单的用例就是运行你创建的JAR文件。另一个情况是让Maven运行不是作为插件提供的命令（例如，创建一个本地的Windows安装程序）。
- en: Maven provides support to run any executable system in a separate process along
    with Java programs in the same virtual machine on which Maven runs. The Maven
    Exec plugin provides this support using the `exec` goal (to run in a separate
    process) and the `java` goal (to run Java programs in the same process).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Maven提供了一种机制，可以在Maven运行的同一虚拟机上以单独的进程运行任何可执行的系统，同时与Java程序一起运行。Maven Exec插件使用`exec`目标（在单独的进程中运行）和`java`目标（在同一进程中运行Java程序）提供这种支持。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a simple Maven project (`simple-project`).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的Maven项目（`simple-project`）。
- en: 'Run the command:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE9]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Observe the results:![How to do it...](img/6124OS_11_02.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：![如何操作...](img/6124OS_11_02.jpg)
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We wanted to run the JAR file that we had created in the project. To do this,
    we called the `java` goal of the Maven Exec plugin. We provided the plugin with
    the required parameter (`mainClass`) so that it knew which main class needed to
    be run.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在项目中运行我们创建的JAR文件。为此，我们调用了Maven Exec插件的`java`目标。我们向插件提供了所需的参数（`mainClass`），以便它知道需要运行哪个主类。
- en: There's more...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'You could integrate the running of the executable as part of the project lifecycle.
    Let us do this for our example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将可执行文件的运行集成到项目生命周期中。让我们为我们的示例做这个：
- en: Open the project (let's call it `project-with-exec`).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目（让我们称它为`project-with-exec`）。
- en: 'Add the following code to the pom file:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到pom文件中：
- en: '[PRE10]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE11]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Observe the result:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察结果：
- en: '[PRE12]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The project is run during the package phase based on the configuration that
    we specified in the plugin.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 项目在包阶段根据我们在插件中指定的配置运行。
- en: The same can be done for non-Java executables; we need to invoke the `exec`
    goal instead of the `java` goal.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非Java可执行文件也可以这样做；我们需要调用`exec`目标而不是`java`目标。
- en: Tip
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Running system executables makes the build nonportable, so use it with care.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 运行系统可执行文件会使构建不可移植，所以请谨慎使用。
- en: Running an ANT task
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行一个ANT任务
- en: ANT is a popular build automation tool that provides a great degree of flexibility.
    It also provides tasks, such as `echo` and `touch`, that are not available in
    Maven. There might be advantages in combining ANT tasks with Maven to achieve
    certain goals, though it is best to avoid it until it's inevitable.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: ANT是一个流行的构建自动化工具，它提供了很高的灵活性。它还提供了诸如`echo`和`touch`之类的任务，这些任务在Maven中不可用。尽管如此，将ANT任务与Maven结合以实现某些目标可能是有利的，尽管最好在不可避免的情况下才这样做。
- en: Maven provides a mechanism to run arbitrary ANT tasks by way of the Maven AntRun
    plugin. Let us see how to use this to run an ANT task in our project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Maven通过Maven AntRun插件提供了一种机制来运行任意的ANT任务。让我们看看如何使用它来在我们的项目中运行一个ANT任务。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a project for which you want to run ANT tasks (`project-with-ant`).
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要运行 ANT 任务的工程（`project-with-ant`）。
- en: 'Add the following plugin configuration to the pom file:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下插件配置添加到 pom 文件中：
- en: '[PRE13]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the following Maven command:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE14]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Observe the output:![How to do it...](img/6124OS_11_03.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何做到这一点...](img/6124OS_11_03.jpg)
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We configured the Maven AntRun plugin to run an ANT target during the `package`
    phase. In the ANT target, we specified a simple `echo` task, which outputted a
    string we wanted.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们配置了 Maven AntRun 插件在 `package` 阶段运行一个 ANT 目标。在 ANT 目标中，我们指定了一个简单的 `echo` 任务，它输出了我们想要的一个字符串。
- en: Instead of the `echo` task, we could write more complex tasks. The Maven AntRun
    plugin also provides a means for ANT tasks to refer to Maven properties, class
    paths, and others.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以写更复杂的任务，而不是 `echo` 任务。Maven AntRun 插件还提供了让 ANT 任务引用 Maven 属性、类路径等的方法。
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'It is good practice to separate ANT tasks to a separate ANT build script (`build.xml`)
    and invoke the same from Maven. Let us see how to do this:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将 ANT 任务分离到单独的 ANT 构建脚本（`build.xml`）中，并从 Maven 中调用它是一个好的做法。让我们看看如何做到这一点：
- en: 'Create a simple ANT build script, `build.xml`, and add the following contents:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个简单的 ANT 构建脚本，`build.xml`，并添加以下内容：
- en: '[PRE15]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Replace the `target` configuration in the pom file as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 pom 文件中的 `target` 配置替换如下：
- en: '[PRE16]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the Maven command:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下 Maven 命令：
- en: '[PRE17]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Observe the output:![There's more...](img/6124OS_11_04.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![还有更多...](img/6124OS_11_04.jpg)
- en: The result is the same, but now the ANT scripts are separated from Maven.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 结果相同，但现在 ANT 脚本已经与 Maven 分离。
- en: Determining updates to Maven plugin AntRun
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定 Maven 插件 AntRun 的更新
- en: 'In our build scripts, we explicitly specify the version of the Maven plugins
    that we use. This is required in order to create reproducible builds. In the absence
    of the version, Maven gives a warning such as the following:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的构建脚本中，我们明确指定了我们使用的 Maven 插件的版本。这是创建可重复构建所必需的。如果没有指定版本，Maven 会给出如下警告：
- en: '[PRE18]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Over a period of time, there could be updates to these plugins. It would be
    good to know if there are any so that we can suitably update the plugin versions.
    Let us see how we can do this.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在一段时间内，这些插件可能会有更新。了解是否有任何更新以便我们可以相应地更新插件版本会很好。让我们看看如何做到这一点。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Take a project for which you want to check the plugin update (`project-with-exec`).
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你想要检查插件更新的工程（`project-with-exec`）。
- en: 'Change the version of the plugin to an older one:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将插件的版本更改为较旧的一个：
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Run the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Observe the output:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `display-plugin-updates` goal of the Maven Versions plugin downloads the
    metadata for all the plugins specified in the pom file and then produces a report.
    The report reveals a number of things that are of interest.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Versions 插件的 `display-plugin-updates` 目标会下载 pom 文件中指定的所有插件的元数据，然后生成一个报告。报告揭示了若干有趣的事情。
- en: A `prerequisites` tag is absent. The `prerequisites` tag in the pom file specifies
    the minimum version of Maven that is required to build the project. In the absence
    of this, Maven takes the minimum version as `2.0`. There is a risk of nonreproducible
    builds if different developers use different versions of Maven. Hence, it is a
    good practice to specify a minimum version by using this tag.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prerequisites` 标签缺失。在 pom 文件中的 `prerequisites` 标签指定了构建项目所需的 Maven 的最低版本。如果没有这个标签，Maven
    会将最低版本视为 `2.0`。如果不同的开发者使用不同的 Maven 版本，则存在无法重复构建的风险。因此，使用此标签指定最低版本是一个好的做法。'
- en: There is a warning about plugin versions not being defined. As we have seen,
    plugins in the pom file don't need to be specified explicitly unless they need
    to be configured. Now, Maven still uses various plugins for execution (such as
    clean, resources, compile, test, and so on) and it needs to determine the version
    to be used. It uses the version specified by the super pom, which is fine in most
    cases. However, the Versions plugin alerts us that this is the case, so we can
    take action as appropriate.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关于插件版本未定义的警告。正如我们所见，pom 文件中的插件不需要明确指定，除非它们需要配置。现在，Maven 仍然使用各种插件来执行（如 clean、resources、compile、test
    等），并且它需要确定要使用的版本。它使用 super pom 中指定的版本，这在大多数情况下是可行的。然而，Versions 插件提醒我们这种情况，因此我们可以采取适当的行动。
- en: There is a difference in plugin versions based on the Maven version. The report
    specifies different versions of various plugins based on the Maven version used.
    This is all the more reason why it is important to specify a prerequisite.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据Maven版本，插件版本存在差异。报告根据使用的Maven版本指定了各种插件的版本。这就是为什么指定先决条件的重要性更加凸显。
- en: As the output indicates, if we specify that we need at least the `2.2.1` version
    of Maven, then we can see that there is a newer version of the Maven Exec plugin,
    which is `1.3.2`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如输出所示，如果我们指定需要至少`2.2.1`版本的Maven，那么我们可以看到Maven Exec插件的更新版本是`1.3.2`。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Let us now specify the `prerequisites` element in the pom file and see how
    it affects the output of the goal:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在在pom文件中指定`prerequisites`元素，看看它如何影响目标输出：
- en: 'Add the following to the pom file:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到pom文件中：
- en: '[PRE22]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the following command:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE23]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Observe the output:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE24]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We now see that the plugin reports a plugin update based on the prerequisite
    that we specified.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以看到，插件根据我们指定的先决条件报告插件更新。
- en: 'It is difficult to determine if there are updates to plugins that we do not
    explicitly define in the pom file. For instance, as per the output from the preceding
    command, which is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 确定我们未在pom文件中明确定义的插件是否有更新是困难的。例如，根据前面命令的输出，如下所示：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: However, as of writing this book, the latest version of the Maven Clean plugin
    is 2.6.1, that of the Maven Compiler plugin is 3.2, and so on. The version that
    the super pom has is the version that must have been the latest when it was created.
    The versions of these dependencies become important when bugs or newer features
    are present in the newer versions. In this case, we do want to get the newer version
    of these plugins. It is easy to get these by explicitly specifying the version
    of the plugins in the pom file.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，截至撰写本书时，Maven Clean插件的最新版本是2.6.1，Maven Compiler插件的版本是3.2，等等。super pom中有的版本是在创建时必须是最新版本。当新版本中存在错误或新功能时，这些依赖项的版本变得很重要。在这种情况下，我们确实想要获取这些插件的最新版本。通过在pom文件中明确指定插件的版本，很容易获取这些版本。
- en: 'Add the following to the pom file:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下内容添加到pom文件中：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Now, re-run the previous command and note the output:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，重新运行前面的命令并注意输出：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Determining updates to Maven dependencies
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 确定Maven依赖项的更新
- en: We use a number of third-party libraries to build our projects. As you recall,
    we specify the `groupId`, `artifactId`, and `version` elements of each of these
    dependant libraries in our pom file. There may be many occasions when there are
    updates to these libraries and new versions are released. It will be good to have
    a mechanism to get notified about these releases and update the project build
    file suitably.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用许多第三方库来构建我们的项目。如您所忆，我们在pom文件中指定了这些依赖库的`groupId`、`artifactId`和`version`元素。在这些依赖库中，可能会有许多更新和版本发布的情况。有一个机制来通知这些发布并相应地更新项目构建文件将是很好的。
- en: How to do it...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Take a project for which you want to check for a dependency update, `simple-project`,
    which we had created using the quick-start archetype.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个你想要检查依赖项更新的项目，例如`simple-project`，这是我们使用quick-start存档创建的。
- en: 'Run the following command:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE28]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Observe the output:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE29]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `display-dependency-updates` goal of the Maven Versions plugin uses the
    metadata of each of the maven dependencies to determine the latest version of
    each dependency. If it does not match the current version, it displays a report
    about the difference.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Versions插件的`display-dependency-updates`目标使用每个maven依赖项的元数据来确定每个依赖项的最新版本。如果不匹配当前版本，它将显示差异报告。
- en: We have already seen earlier that `SNAPSHOT` versions are handled differently
    by Maven, and it automatically checks and updates these dependencies for each
    build as per the configuration. If the version number of the `SNAPSHOT` changes
    (`1.0-SNAPSHOT` to `1.1-SNAPSHOT`), then the Versions plugin indicates that.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前已经看到，`SNAPSHOT`版本由Maven以不同的方式处理，并且它会根据配置自动检查和更新这些依赖项。如果`SNAPSHOT`的版本号发生变化（从`1.0-SNAPSHOT`到`1.1-SNAPSHOT`），那么Versions插件会指出这一点。
- en: There's more...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The Maven Versions plugin provides several other goals to manage updates to
    dependency and plugin versions. This includes automatically changing the versions
    to the latest release versions, replacing `SNAPSHOT` with release versions, and
    so on.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Versions 插件提供了其他一些目标来管理依赖和插件版本的更新。这包括自动将版本更改为最新发布版本，将 `SNAPSHOT` 替换为发布版本等。
- en: Controlling the constraints
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制约束
- en: One of the requirements for a build tool is to be able to generate repeatable
    builds. In a project, the build tool should behave identically for all team members.
    While a project guideline can be made on the version of Java or Maven to be used,
    it would be easier if it could be enforced automatically.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 构建工具的一个要求是能够生成可重复的构建。在一个项目中，构建工具应该对所有团队成员的行为保持一致。虽然可以制定关于要使用的 Java 或 Maven 版本的项目指南，但如果可以自动强制执行，那就更容易了。
- en: This is where the Maven Enforcer plugin comes in.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 正是 Maven Enforcer 插件发挥作用的地方。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Open a simple project (`project-with-enforcer`).
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个简单的项目（`project-with-enforcer`）。
- en: 'Add the following plugin configuration:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下插件配置：
- en: '[PRE30]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Build the project using Java 7 and Maven 3.2.3:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Java 7 和 Maven 3.2.3 构建项目：
- en: '[PRE31]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Observe the output:![How to do it...](img/6124OS_11_05.jpg)
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何实现...](img/6124OS_11_05.jpg)
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Enforcer plugin uses the rules configuration and validates the project against
    the rules. If it finds violations, it reports the error(s) and does not proceed
    with the build.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Enforcer 插件使用规则配置并验证项目是否符合规则。如果发现违规，它会报告错误并停止构建。
- en: 'In the preceding example, our project had two issues:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们的项目有两个问题：
- en: '**The Maven version**: We were using version 3.2.3 but we had specified 3.2.5
    in the rules'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven 版本**：我们使用的是 3.2.3 版本，但在规则中指定了 3.2.5 版本。'
- en: '**The Java version**: We were using Java 7 but we had specified Java 8 in the
    rules'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 版本**：我们使用的是 Java 7，但在规则中指定了 Java 8。'
- en: There's more...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The Maven Enforcer plugin has several other rules to enforce various constraints.
    A couple of them are as follows:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Enforcer 插件有其他一些规则来强制执行各种约束。以下是一些例子：
- en: '`requireOS`: This ensures the project can be built only on specific operating
    systems'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requireOS`：这确保项目只能在特定的操作系统上构建。'
- en: '`requireFilesExist`: This ensures specific files exist for the project to build'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`requireFilesExist`：这确保了项目构建需要特定的文件存在。'
- en: It is also possible to implement custom enforcer rules. One such is available
    at [https://github.com/ferstl/pedantic-pom-enforcers](https://github.com/ferstl/pedantic-pom-enforcers).
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以实现自定义执行规则。其中之一可在[https://github.com/ferstl/pedantic-pom-enforcers](https://github.com/ferstl/pedantic-pom-enforcers)找到。
- en: Generating unique builds
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成唯一构建
- en: As we have seen, we use a `SNAPSHOT` version to specify that the project is
    under development. In the course of development, we will create several builds
    for the project. In many situations, it will be useful to distinguish one such
    build from another. One could be when we use continuous integration. Another would
    be when a tester needs to log defects against a build.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们使用 `SNAPSHOT` 版本来指定项目处于开发状态。在开发过程中，我们将为项目创建几个构建。在许多情况下，区分这些构建是有用的。例如，当我们使用持续集成时，或者当测试人员需要对构建记录缺陷时。
- en: It would be nice if there was a way to generate a unique build number to identify
    a build in the case of `SNAPSHOT` versions.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一种方法可以生成唯一的构建数字来识别 `SNAPSHOT` 版本中的构建，那就太好了。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Open the project for which you want to have a build number (`project-with-build-number`).
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你想要有构建数字的项目（`project-with-build-number`）。
- en: 'Add the following plugin configuration:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下插件配置：
- en: '[PRE32]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following to use the unique build number created:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下内容以使用创建的唯一构建数字：
- en: '[PRE33]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the SCM configuration for the project:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为项目添加版本控制系统（SCM）配置：
- en: '[PRE34]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Build the project:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目：
- en: '[PRE35]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Observe the output:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：
- en: '[PRE36]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-183
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Maven Build Number plugin provides three ways to generate a unique number,
    namely by using SCM, a sequential build number, or a timestamp.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Maven Build Number 插件提供了三种生成唯一数字的方法，即通过使用版本控制系统（SCM）、顺序构建数字或时间戳。
- en: In the preceding example, we used SCM as it is easy to map the build against
    the corresponding SCM version. We used `git` and specified the SCM details in
    the SCM tag of the pom file.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们使用了版本控制系统，因为它很容易将构建映射到相应的版本控制系统版本。我们使用了 `git` 并在 pom 文件的 SCM 标签中指定了
    SCM 详细信息。
- en: We also specified to the Maven Build Number plugin to use five characters and
    create the short revision, as a typical git revision is a long hash value. We
    also configured the plugin to run during the validation phase of the lifecycle.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还指定了Maven Build Number插件使用五个字符并创建短修订号，因为典型的git修订号是一个长的哈希值。我们还配置了插件在生命周期的验证阶段运行。
- en: We used the generated Build Number in the name of the generated artifact, by
    appending it along with the version number.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在生成的工件名称中使用了生成的构建号，通过附加它以及版本号。
- en: Now, each time a new check-in is done and the build is completed, an artifact
    with a unique name is generated. Based on the requirement, each such artifact
    can be archived or traced to a corresponding source.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次进行新的提交并且构建完成后，都会生成一个具有唯一名称的工件。根据需求，每个这样的工件都可以存档或追溯到相应的源。
- en: Releasing a Maven project
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布Maven项目
- en: The ultimate goal of any project is the release. After development is complete
    and bugs are fixed, it is time to release the project. Different projects are
    released in different ways. Web projects are released by deploying them to the
    web server. Other projects may be packaged into executable JARs. Still others
    may be packaged as executables or installers. If the project is a library or a
    dependency used in other projects, then it needs to be made available suitably.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目的最终目标都是发布。在开发完成并修复了错误之后，就是发布项目的时候了。不同的项目以不同的方式发布。Web项目通过部署到Web服务器来发布。其他项目可能被打包成可执行的JAR文件。还有一些可能被打包成可执行文件或安装程序。如果项目是一个库或被其他项目使用的依赖项，那么它需要以适当的方式提供。
- en: As we have seen before, we use the `SNAPSHOT` version during development. When
    the project has to be released, this version now needs to be replaced with a concrete
    version.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，我们在开发期间使用`SNAPSHOT`版本。当项目需要发布时，现在需要将这个版本替换为一个具体的版本。
- en: One of the most advanced features of Maven is its support to do a project release.
    Let us explore this.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Maven最先进的功能之一是支持项目发布。让我们来探索这一点。
- en: How to do it...
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a project for which you want to do a release (`project-with-release`).
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您想要发布的项目（`project-with-release`）。
- en: 'Verify if the SCM details are present in the pom file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证SCM详细信息是否存在于pom文件中：
- en: '[PRE37]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add the plugin definition in order to specify the latest version of the plugin:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加插件定义以指定插件的最新版本：
- en: '[PRE38]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the following Maven command:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下Maven命令：
- en: '[PRE39]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: By default, changes made by the plugin are pushed to the repository. If you
    do not want that, set the `pushChanges` configuration option to `false`.
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，插件所做的更改会被推送到仓库。如果您不希望这样做，可以将`pushChanges`配置选项设置为`false`。
- en: Choose the default values when prompted.![How to do it...](img/6124OS_11_06.jpg)
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时选择默认值。![如何操作...](img/6124OS_11_06.jpg)
- en: You could choose the default values for the release version, the SCM tag and
    new development version, or provide your values.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以选择发布版本、SCM标签和新开发版本的默认值，或者提供您的值。
- en: Observe the output:![How to do it...](img/6124OS_11_07.jpg)
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_11_07.jpg)
- en: Maven runs a number of commands that modify the pom file. Then, it checks in
    the changes into the repository.
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Maven运行了多个命令来修改pom文件。然后，它将这些更改检查到仓库中。
- en: 'Now run the following command:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在运行以下命令：
- en: '[PRE40]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: By default, the `perform` goal of the Maven Release plugin runs the `deploy`
    goal to deploy the project to the specified repository. If you do not have a remote
    repository to deploy to, or want to run a different goal as part of the release,
    you can specify it using the `goals` configuration. In the preceding case, we
    have set it to run the `package` goal.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，Maven Release插件的`perform`目标会运行`deploy`目标，将项目部署到指定的仓库。如果您没有远程仓库可以部署，或者想在发布过程中运行不同的目标，您可以使用`goals`配置来指定它。在前面的例子中，我们将其设置为运行`package`目标。
- en: Also, to do the release, Maven checks out the tag created by the `prepare` goal
    from the repository. If you want Maven to check out the local copy instead, you
    could do so by setting the `localCheckout` configuration to `true`.
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，为了进行发布，Maven会从仓库检出`prepare`目标创建的标签。如果您想让Maven检出本地副本，可以通过将`localCheckout`配置设置为`true`来实现。
- en: Observe the output:![How to do it...](img/6124OS_11_08.jpg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察输出：![如何操作...](img/6124OS_11_08.jpg)
- en: Ensure that the release binaries are created in the `target/checkout/project-with-release/target`
    folder:![How to do it...](img/6124OS_11_09.jpg)
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保发布二进制文件在`target/checkout/project-with-release/target`文件夹中创建：![如何操作...](img/6124OS_11_09.jpg)
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: There are two steps to making a release—prepare and perform.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 制作发布有两个步骤——准备和执行。
- en: 'When the prepare goal of the Maven Release plugin is run, it does the following:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行Maven Release插件的`prepare`目标时，它执行以下操作：
- en: Checks there are no uncommitted changes
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查没有未提交的更改
- en: Checks that the project does not have any `SNAPSHOT` dependencies
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查项目没有任何`SNAPSHOT`依赖项
- en: Changes the version of the `SNAPSHOT` project; you will be prompted to confirm
    or override the default
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改`SNAPSHOT`项目的版本；您将被提示确认或覆盖默认设置
- en: Adds a `tag` element to the `scm` element and computes the value (by default,
    `HEAD`)
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`scm`元素中添加一个`tag`元素并计算其值（默认为`HEAD`）
- en: Runs the `verify` goal to ensure that the changes do not break anything
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行`verify`目标以确保更改不会破坏任何内容
- en: Commits the modified pom to the SCM
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将修改后的pom提交到SCM
- en: Tags the code in SCM with a version name (you will be prompted to confirm or
    override the default):![How it works...](img/6124OS_11_10.jpg)
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在SCM中用版本名称标记代码（您将被提示确认或覆盖默认设置）：![如何工作...](img/6124OS_11_10.jpg)
- en: Bumps the version in the pom to the new `SNAPSHOT` value (from `1.0-SNAPSHOT`;
    this would be `1.1-SNAPSHOT`); you will be prompted to confirm or override this
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将pom中的版本提升到新的`SNAPSHOT`值（从`1.0-SNAPSHOT`变为`1.1-SNAPSHOT`）；您将被提示确认或覆盖此设置
- en: Commits the modified pom to SCM
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将修改后的pom提交到SCM
- en: As you can see, once the goal is met, you will have an updated SCM with a tag
    with the release version and the `HEAD` with the next `SNAPSHOT` version. A `release.properties`
    file is also created. It contains information that is needed for the `perform`
    goal.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，一旦目标达成，您将有一个带有发布版本标签的更新后的SCM，以及带有下一个`SNAPSHOT`版本的`HEAD`。还会创建一个`release.properties`文件。它包含执行`perform`目标所需的信息。
- en: '![How it works...](img/6124OS_11_11.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/6124OS_11_11.jpg)'
- en: 'The second platform does as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个平台执行如下：
- en: The perform goal uses the information in `release.properties` to check out from
    the SCM tag that was created earlier
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perform`目标使用`release.properties`中的信息从之前创建的SCM标签检出'
- en: It then runs the specified goal on the checked-out project (by default, `deploy`)
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后在检出的项目上运行指定的目标（默认为`deploy`）
- en: This generates the release binaries
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将生成发布二进制文件
- en: Once the build is successful, `release.properties` and other backup files created
    by the Release plugin are removed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦构建成功，Release插件创建的`release.properties`和其他备份文件将被删除。
