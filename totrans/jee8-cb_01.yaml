- en: New Features and Improvements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Java EE 8 is a big release, desired and anticipated by the global community
    for about four years. More than ever before, the whole platform is now even more
    robust, mature, and stable.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will cover the main APIs that we can highlight for Java EE 8\.
    Not that they are the only topics covered by this release—far from it—but they
    have a big role in the enterprise context and are worthy of a careful look inside.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running your first Bean Validation 2.0 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first CDI 2.0 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JAX-RS 2.1 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSF 2.3 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSON-P 1.1 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSON-B 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Servlet 4.0 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Security API 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first MVC 1.0 code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Bean Validation 2.0 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bean Validation is a Java specification that basically helps you to protect
    your data. Through its API, you can validate fields and parameters, express constraints
    using annotations, and extend your customs' validation rules.
  prefs: []
  type: TYPE_NORMAL
- en: It can be used both with Java SE and Java EE.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will have a glimpse of Bean Validation 2.0\. It doesn't
    matter whether you are new to it or already using version 1.1; this content will
    help you get familiar with some of its new features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to add the right Bean Validation dependency to your project,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to create an object with some fields to be validated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we create a `test` class to validate those constraints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our `User` class uses three of the new constraints introduced by Bean Validation
    2.0:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@NotBlank`: Assures that the value is not null, empty, or an empty string
    (it trims the value before evaluation, to make sure there aren''t spaces).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Email`: Allows only a valid email format. Forget those crazy JavaScript functions!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@NotEmpty`: Ensures that a list has at least one item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@PositiveOrZero`: Guarantees that a number is equal or greater than zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then we create a `test` class (using JUnit) to test our validations. It first
    instantiates `Validator`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`Validator` is an API that validates beans according to the constraints defined
    for them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Our first `test` method tests a valid user, which is a `User` object that has:'
  prefs: []
  type: TYPE_NORMAL
- en: Name not empty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Valid email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profileId` list only with integers greater than zero:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `validate()` method from `Validator` returns a set of constraint violations
    found, if any, or an empty set if there are no violations at all.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, for a valid user it should return an empty set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And the other methods work with variations around this model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`invalidName()`: Uses an empty name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invalidEmail()`: Uses a malformed email'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invalidId()`: Adds some negative numbers to the list'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the `invalidId()` method adds two negative numbers to the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we expect two constraint violations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In other words, `Validator` checks not only the constraints violated, but how
    many times they are violated.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can check the Bean Validation 2.0 specification at [http://beanvalidation.org/2.0/spec/](http://beanvalidation.org/2.0/spec/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The full source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-beanvalidation/](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-beanvalidation/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first CDI 2.0 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Context and Dependency Injection** (**CDI**) is certainly one of the most
    important APIs for the Java EE platform. In version 2.0, it also works with Java
    SE.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Nowadays, CDI has an impact on many other APIs in the Java EE platform. As
    said in an interview for *Java EE 8 – The Next Frontier* project:'
  prefs: []
  type: TYPE_NORMAL
- en: '"If there was CDI by the time we created JSF, it would be made completely different."'
  prefs: []
  type: TYPE_NORMAL
- en: – Ed Burns, JSF Spec Lead
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of new features in CDI 2.0\. This recipe will cover Observer
    Ordering to give you a quick start.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, you need to add the right CDI 2.0 dependency to your project. To make
    things easier at this point, we are going to use CDI SE, the dependency that allows
    you to use CDI without a Java EE server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe will show you one of the main features introduced by CDI 2.0: Ordered
    Observers. Now, you can turn the observers job into something predictable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s make an event to be observed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we build our observers and the server that will fire them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, don''t forget to add the `beans.xml` file into the `META-INF` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you run it, you should see a result like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we are building a server to manage our event and observers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will give us all the resources needed to run the recipe as if it was a
    Java EE server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then we build an observer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'So, we have three important topics:'
  prefs: []
  type: TYPE_NORMAL
- en: '`@Observes`: This annotation is used to tell the server that it needs to watch
    the events fired with `MyEvent`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`@Priority`: This annotation informs in which priority order this observer
    needs to run; it receives an `int` parameter, and the execution order is ascendant'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MyEvent event`: The event being observed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On the `thisEventBefore` method and `thisEventAfter`, we only changed the `@Priority`
    value and the server took care of running it in the right order.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The behavior would be exactly the same in a Java EE 8 server. You just wouldn''t
    need `SeContainerInitializer` and would need to change the dependencies to the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to the CDI Specification at [http://www.cdi-spec.org/](http://www.cdi-spec.org/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-cdi](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-cdi)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JAX-RS 2.1 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JAX-RS is an API designed to give a portable and standard way for building RESTful
    web services in Java. This is one of the most used technologies for data transporting
    between different applications that uses some network (internet included) for
    communication.
  prefs: []
  type: TYPE_NORMAL
- en: One of the coolest features introduced by the 2.1 release is **Server-Sent Events**
    (**SSE**), which will be covered in this recipe. SSE is a specification created
    by HTML5 where it has established a channel between server and client, one way
    only from server to client. It is a protocol that transports a message containing
    some data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start by adding the right dependency to our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You surely noticed that we are using Jersey here. Why? Because Jersey is the
    reference implementation for JAX-RS, which means that all JAX-RS specifications
    are first implemented through Jersey.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, with Jersey we can use Grizzly to start a small local server, which
    will be useful for this recipe, as we need just a few server features to show
    the SSE behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Further on in this book, we will use a full GlassFish to build more JAX-RS recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we create a class that will be our server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a JAX-RS endpoint to send the events to the clients:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a client class to consume the events generated from the server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'To try it out, you have to first run the `ServerMock` class and then the `ClientConsumer`
    class. If everything worked well, you should see something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: These are the messages sent from the server to the client.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This recipe is made up of three parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The server, represented by the `ServerMock` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The SSE engine, represented by the `SseResource` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client, represented by the `ClientConsumer` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So once `ServerMock` is instantiated, it registers the `SseResource` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Then two key methods from `SseResource` take place. The first one adds messages
    to the server queue:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The second one consumes this queue and sends the messages to the clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that this one has a media type `SERVER_SENT_EVENTS`, introduced in this
    version for this very purpose. And finally, we have our client. In this recipe,
    it is both posting and consuming messages.
  prefs: []
  type: TYPE_NORMAL
- en: 'It consumes here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'It posts here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to JAX-RS at [https://github.com/jax-rs](https://github.com/jax-rs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jaxrs](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jaxrs)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSF 2.3 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**JavaServer Faces** (**JSF**) is the Java technology made to simplify the
    process of building a UIs, despite how it''s made for the frontend and the UI
    is built in the backend.'
  prefs: []
  type: TYPE_NORMAL
- en: With JSF, you can build components and use (or reuse) them in the UI in an extensible
    way. You can also use other powerful APIs, such as CDI and Bean Validation, to
    improve your application and its architecture.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will use the `Validator` and `Converter` interfaces with
    the new feature introduced by version 2.3, which is the possibility of using them
    with generic parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we need to add the dependencies needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a `User` class as the main object of our recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a `UserBean` class to manage our UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we implement the `Converter` interface with a `User` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we implement the `Validator` interface with a `User` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'And then we create our UI using all of them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to run it in a Java EE 8 server.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `UserBean` class manages the communication between the UI and the server.
    Once you instantiate the `user` object, it is available for both of them.
  prefs: []
  type: TYPE_NORMAL
- en: That's why when you run it, the `Name | E-mail` is already filled (the `user` object
    is instantiated when the `UserBean` class is created by the server).
  prefs: []
  type: TYPE_NORMAL
- en: 'We associated the `userAction()` method from the `UserBean` class to the `Validate` button
    of the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: You can create other methods in `UserBean` and do the same to empower your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The whole core of our recipe is represented by just a single line in the UI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: So, our two implemented interfaces used here are `userConverter` and `userValidator`.
  prefs: []
  type: TYPE_NORMAL
- en: Basically, the `UserConverter` class (with `getAsString` and `getAsObject` methods)
    converts an object to/from a string and vice versa, according to the logic defined
    by you.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have just mentioned it in the preceding code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The server uses the `userConverter` object, calls the `getAsString` method,
    and prints the result using the preceding expression language.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the `UserValidator` class is automatically called when you submit the
    form, by calling its `validate` method, and applying the rules defined by you.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You could increase the validators by adding a Bean Validation on it and, for
    example, defining the `email` property from `User` with an `@Email` constraint.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to JSF at [https://javaserverfaces.github.io/](https://javaserverfaces.github.io/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsf](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSON-P 1.1 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON-Pointer is the Java API for JSON processing. By processing,  we mean generating,
    transforming, parsing, and querying JSON strings and/or objects.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to use JSON Pointer to get a specific value
    from a JSON message in a very easy way.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get our `dependency`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we define a JSON message to represent a `User` object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we create a method to read it and print the values we want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The execution of this code prints the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The JSON Pointer is a standard defined by the **Internet Engineering Task Force** (**IETF**)
    under **Request for Comments** (**RFC**) 6901\. The standard basically says that
    a JSON Pointer is a string that identifies a specific value in a JSON document.
  prefs: []
  type: TYPE_NORMAL
- en: Without a JSON Pointer, you would need to parse the whole message and iterate
    through it until you find the desired value; probably lots of ifs, elses, and
    things like that.
  prefs: []
  type: TYPE_NORMAL
- en: So, JSON Pointer helps you to decrease the written code dramatically by doing
    this kind of operation in a very elegant way.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to JSON-P at [https://javaee.github.io/jsonp/](https://javaee.github.io/jsonp/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsonp](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsonp)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first JSON-B code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JSON-B is an API for converting Java objects to/from JSON messages in a standardized
    way. It defines a default mapping algorithm to convert Java classes to JSON and
    still lets you customize your own algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: With JSON-B, Java EE now has a complete set of tools to work with JSON, such
    as JSON API, and JSON-P. No third-party frameworks are needed anymore (although
    you are still free to use them).
  prefs: []
  type: TYPE_NORMAL
- en: This quick recipe will show you how to use JSON-B to convert a Java object to
    and from a JSON message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add our dependencies to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create a `User` class as a model for our JSON message:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, let''s create a class to use JSON-B to transform an object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The result printed is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The first line is the object transformed into a JSON string. The second is the
    same string converted into an object.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It uses the getters and setters defined in the `User` class to transform both
    ways and that's why they are so important.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to JSON-B at [http://json-b.net/](http://json-b.net/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsonb](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-jsonb)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Servlet 4.0 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Servlet 4.0 is one the of biggest APIs of Java EE 8\. Since the very beginning
    of the Java EE platform (the old J2EE), the Servlet specification has always played
    a key role.
  prefs: []
  type: TYPE_NORMAL
- en: The coolest additions of this version are surely HTTP/2.0 and Server Push. Both
    of them bring performance improvements to your application.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will use Server Push to do one of the most basic tasks in a web
    page—loading an image.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add the dependencies that we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will create a servlet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'To try it, run the project in a Java EE 8 server and open this URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We use the `PushBuilder` object to send an image to the client before it is
    requested by the `img src` tag. In other words, the browser doesn't need to do
    another request (what it usually does with `img src`) to have an image available
    for rendering.
  prefs: []
  type: TYPE_NORMAL
- en: It might seem as if it doesn't make too much difference for a single image,
    but it would with dozens, hundreds, or thousands of images. Less traffic for your
    client and from your server. Better performance for all!
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are using JSF, you can get the benefits from Server Push for free! You
    don't even need to rewrite a single line of your code, as JSF relies on the Server
    Push specification.
  prefs: []
  type: TYPE_NORMAL
- en: Just make sure that you run it under the HTTPS protocol, as HTTP/2.0 only works
    under it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to the Servlet specification at [https://github.com/javaee/servlet-spec](https://github.com/javaee/servlet-spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-servlet](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-servlet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first Security API code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is one of the top concerns when you build an enterprise application.
    Luckily, the Java EE platform now has this API that handles many of the enterprise
    requirements in a standardized way.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to define roles and give them the right authorization
    based on rules defined in the methods that manage sensitive data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We start by adding our dependencies to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We first create a `User` entity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we create a class to store our security roles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we create a stateful bean to manage our user operations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we need to create an executor for each role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: And finally, we create a test class to try our security rules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our code uses three test methods: `asAdmin()`, `asOperator()`, and `asAnonymous()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, it tests `asAdmin()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Then it tests `asOperator()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'And, finally it tests `asAnonymous()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This class is huge! For the full source code, check the link at the end of the
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The whole point in this recipe is to do with the `@RolesAllowed`, `@RunsAs`,
    and `@PermitAll` annotations. They define what operations each role can do and
    what happens when a user tries an operation using the wrong role.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What we did here is called **programmatic security;** that is, we defined the
    security rules and roles through our code (the program). There's another approach
    called **declarative security**, where you declare the rules and roles through
    application and server configurations.
  prefs: []
  type: TYPE_NORMAL
- en: One good step up for this recipe is if you evolve the roles management to a
    source outside the application, such as a database or a service.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to Security API at [https://github.com/javaee-security-spec](https://github.com/javaee-security-spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-security](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-security)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first MVC 1.0 code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are following the news about Java EE 8, you may now be wondering: *why
    is MVC 1.0 here if it was dropped from the Java EE 8 umbrella?*'
  prefs: []
  type: TYPE_NORMAL
- en: Yes, it is true. MVC 1.0 doesn't belong (anymore) to the Java EE 8 release.
    But it didn't reduce the importance of this great API and I'm sure it will change
    the way some other APIs work in future releases (for example, JSF).
  prefs: []
  type: TYPE_NORMAL
- en: So why not cover it here? You will use it anyway.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show you how to use a Controller (the C) to inject a Model
    (the M) into the View (the V). It also brings some CDI and JAX-RS to the party.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Add the proper dependencies to your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start by creating a root for your JAX-RS endpoints:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `User` class (this will be your MODEL):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create a Session Bean, which will be injected later in your Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create the Controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'And finally, the web page (the View):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Run it on a Java EE 8 server and access this URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8080/ch01-mvc/webresources/userController`'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The main actor in this whole scenario is the `Models` class injected into the
    Controller:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'It''s a class from MVC 1.0 API that owns the responsibility, in this recipe,
    of letting the `User` object be available for the View layer. It''s injected (using
    CDI) and uses another injected bean, `userBean`, to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'So, the View can easily access the values from the `User` object using expression
    language:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can stay tuned with everything related to MVC specification at [https://github.com/mvc-spec](https://github.com/mvc-spec)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source code of this recipe is at [https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-mvc](https://github.com/eldermoraes/javaee8-cookbook/tree/master/chapter01/ch01-mvc)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
