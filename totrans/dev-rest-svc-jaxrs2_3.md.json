["```java\n@ServerEndpoint(value=\"/book\", encoders={MyEncoder.class}, decoders = {MyDecoder.class} )\npublic class BookCollection {\n    @OnMessage\n    public void onMessage(Book book,Session session) {\n\n        try {\nsession.getBasicRemote().sendObject(book);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n\n    @OnOpen\n       public void onOpen(Session session) {\n           System.out.println(\"Opening socket\" +session.getBasicRemote() );\n       }\n\n       @OnClose\n       public void onClose(Session session) {\n           System.out.println(\"Closing socket\" + session.getBasicRemote());\n       }\n} \n```", "```java\npublic class MyEncoder implements Encoder.Text<Book> {\n    @Override\n public String encode(Book book) throws EncodeException {\n            return book.getJson().toString();\n        }\n}\n```", "```java\npublic class MyDecoder implements Decoder.Text<Book> {\n    @Override\n   public Book decode(String string) throws DecodeException {\n           javax.json.JsonObject jsonObject = javax.json.Json.createReader(new StringReader(string)).readObject();\n        return new Book(jsonObject);\n    }\n    @Override\n    public boolean willDecode(String string) {\n        try {\n            javax.json.Json.createReader(new StringReader(string)).readObject();\n            return true;\n        } catch (Exception ex) { }\n        return false;\n        }\n```", "```java\npublic class Book {\n    public Book() {}\n    JsonObject jsonObject;\n    public Book(JsonObject json) {\n        this.jsonObject = json;\n    }\n    public JsonObject getJson() {\n        return jsonObject;\n    }\n    public void setJson(JsonObject json) {\n        this.jsonObject = json;\n    }\n\n    public Book(String message) {\n        jsonObject = Json.createReader(new StringReader(message)).readObject();\n    }\n    public String toString () {\n        StringWriter writer = new StringWriter();\n        Json.createWriter(writer).write(jsonObject);\n        return writer.toString();\n    }\n}\n```", "```java\nvar json = JSON.stringify({\n                    \"name\": \"Java 7 JAX-WS Web Services\",\n                \"author\":\"Deepak Vohra\",\n                \"isbn\": \"123456789\"\n                });\nfunction addBook() {\n                websocket.send(json);\n            }\n```", "```java\nwebsocket.binaryType = \"blob\";\n// receive some blob data\n\nwebsocket.binaryType = \"arraybuffer\";\n// now receive ArrayBuffer data\n```", "```java\nwebsocket.binaryType = 'arraybuffer';\n```", "```java\nwebsocket.onmessage = function(msg) {\n        var arrayBuffer = msg.data;\n        var bytes = new Uint8Array(arrayBuffer);\n\n        var image = document.getElementById('image');\n        image.src = 'data:image/png;base64,'+encode(bytes);\n    }\n```", "```java\n<web-app version=\"3.0\"  \n         xsi:schemaLocation=\"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd\">\n\n    <security-constraint>\n        <web-resource-collection>\n            <web-resource-name>BookCollection</web-resource-name>\n            <url-pattern>/index.jsp</url-pattern>\n            <http-method>PUT</http-method>\n            <http-method>POST</http-method>\n            <http-method>DELETE</http-method>\n            <http-method>GET</http-method>\n        </web-resource-collection>\n            <user-data-constraint>\n            <description>SSL</description>\n            <transport-guarantee>CONFIDENTIAL</transport-guarantee>\n        </user-data-constraint>\n    </security-constraint>\n</web-app>\n```", "```java\n    keytool -genkey -alias server-alias -keyalg RSA -keypass changeit --storepass changeit -keystore keystore.jks\n    ```", "```java\n    keytool -export -alias server-alias -storepass changeit -file server.cer -keystore keystore.jks\n    ```", "```java\n    keytool -import -v -trustcacerts -alias server-alias -file server.cer  -keystore cacerts.jks -keypass changeit -storepass changeit\n    ```", "```java\n    <jvm-options>-Djavax.net.ssl.keyStore=${com.sun.aas.instanceRoot}/config/keystore.jks</jvm-options>\n            <jvm-options>-Djavax.net.ssl.trustStore=${com.sun.aas.instanceRoot}/config/cacerts.jks</jvm-options>\n    ```", "```java\n// This snippet checks for amount of data buffered but not sent yet \n// in case it is less than a predefined THRESHOLD the webSocket \n// can send the data\n\nif (webSocket.bufferedAmount < THRESHOLD)\n     webSocket.send(someData);\n};\n```", "```java\nCONNECT: foo.com:443\nHost: foo.com\n```", "```java\n   WebTarget webTarget = client.target(new URI(TARGET_URI));\nEventSource eventSource = new EventSource(webTarget) {\n@Override\npublic void onEvent(InboundEvent inboundEvent) {\n    System.out.println(\"Data \" + inboundEvent.getData(String.class);\n\n}\n```", "```java\nif (e.origin != 'http://foo.com') {\nalert('Origin was not http://foo.com');\nreturn;\n```", "```java\n: this is a comment\n\nOutboundEvent event =  new OutboundEvent.Builder().comment(\"this is a comment\").build();\n```", "```java\n   id: 123\\n\n   data : This is an event stream \\n\\n\n```"]