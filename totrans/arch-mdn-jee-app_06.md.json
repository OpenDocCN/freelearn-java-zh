["```java\n# deployment definition similar to previous chapter\n# ...\n    spec:\n      containers:\n      - name: hello-cloud\n        image: docker.example.com/hello-cloud:1\n        imagePullPolicy: IfNotPresent\n        livenessProbe:\n# ...\n```", "```java\n---\nkind: ConfigMap\napiVersion: v1\nmetadata:\n  name: hello-cloud-config\n  namespace: production\ndata:\n  application.properties: |\n    hello.greeting=Hello production\n    hello.name=Java EE\n---\n```", "```java\n# ...\n    spec:\n      containers:\n      - name: hello-cloud\n        image: .../hello-cloud:1\n      initContainers:\n      - name: migrate-vehicle-db\n        image: postgres\n        command: ['/migrate.sh', '$VERSION']\n# ...\n```", "```java\ncurrent_version = select the current schema version stored in the database\n\nif current_version == desired_version\n    exit, nothing to do\n\nif current_version < desired_version\n    folder = /rollouts/\n    script_sequence = range from current_version + 1 to desired_version\n\nif current_version > desired_version\n    folder = /rollbacks/\n    script_sequence = range from current_version - 1 to desired_version\n\nfor i in script_sequence\n    execute script in folder/i_*.sql\n    update schema version to i\n```", "```java\nnode {\n    prepare()\n\n    stage('build') {\n        build()\n    }\n\n    parallel failFast: false,\n            'integration-test': {\n                stage('integration-test') {\n                    integrationTest()\n                }\n            },\n            'analysis': {\n                stage('analysis') {\n                    analysis()\n                }\n            }\n\n    stage('system-test') {\n        systemTest()\n    }\n\n    stage('performance-test') {\n        performanceTest()\n    }\n\n    stage('deploy') {\n        deployProduction()\n    }\n}\n\n// method definitions\n```", "```java\ndef prepare() {\n    deleteCachedDirs()\n    checkoutGitRepos()\n    prepareMetaInfo()\n}\n```", "```java\ndef build() {\n    buildMaven()\n    testReports()\n    publishArtifact()\n    addBuildMetaInfo()\n\n    buildPushDocker(dockerImage, 'cars')\n    buildPushDocker(databaseMigrationDockerImage, 'cars/deployment/database-migration')\n    addDockerMetaInfo()\n}\n```", "```java\ndef deploy(String namespace, String dockerImage, String databaseVersion) {\n    echo \"deploying $dockerImage to Kubernetes $namespace\"\n\n    updateDeploymentImages(dockerImage, namespace, databaseVersion)\n    applyDeployment(namespace)\n    watchRollout(namespace)\n}\n\ndef updateDeploymentImages(String dockerImage, String namespace, String databaseVersion) {\n    updateImage(dockerImage, 'cars/deployment/$namespace/*.yaml')\n    updateDatabaseVersion(databaseVersion 'cars/deployment/$namespace/*.yaml')\n\n    dir('cars') {\n        commitPush(\"[jenkins] updated $namespace image to $dockerImage\" +\n            \" and database version $databaseVersion\")\n    }\n}\n\ndef applyDeployment(namespace) {\n    sh \"kubectl apply --namespace=$namespace -f car-manufacture/deployment/$namespace/\"\n}\n\ndef watchRollout(namespace) {\n    sh \"kubectl rollout status --namespace=$namespace deployments car-manufacture\"\n}\n```"]