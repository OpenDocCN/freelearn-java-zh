["```java\n product-composite:\n    build: microservices/product-composite-service\n    ports:\n      - \"8080:8080\"\n  eureka:\n    build: spring-cloud/eureka-server\n    ports:\n      - \"8761:8761\" \n```", "```java\n    include ':spring-cloud:gateway' \n    ```", "```java\n    gateway:\n      environment:\n        - SPRING_PROFILES_ACTIVE=docker\n      build: spring-cloud/gateway\n      mem_limit: 512m\n      ports:\n        - \"8080:8080\" \n    ```", "```java\n     @Bean\n      ReactiveHealthContributor healthcheckMicroservices() {\n        final Map<String, ReactiveHealthIndicator> registry = \n          new LinkedHashMap<>();\n        registry.put(\"product\",           () -> \n          getHealth(\"http://product\"));\n        registry.put(\"recommendation\",    () -> \n          getHealth(\"http://recommendation\"));\n        registry.put(\"review\",            () -> \n          getHealth(\"http://review\"));\n        registry.put(\"product-composite\", () -> \n          getHealth(\"http://product-composite\"));\n        return CompositeReactiveHealthContributor.fromMap(registry);\n      }\n      private Mono<Health> getHealth(String baseUrl) {\n        String url = baseUrl + \"/actuator/health\";\n        LOG.debug(\"Setting up a call to the Health API on URL: {}\", \n          url);\n        return webClient.get().uri(url).retrieve()\n          .bodyToMono(String.class)\n          .map(s -> new Health.Builder().up().build())\n          .onErrorResume(ex -> \n          Mono.just(new Health.Builder().down(ex).build()))\n          .log(LOG.getName(), FINE);\n      } \n    ```", "```java\n     @Bean\n      @LoadBalanced\n      public WebClient.Builder loadBalancedWebClientBuilder() {\n        return WebClient.builder();\n      } \n    ```", "```java\n    management.endpoint.health.show-details: \"ALWAYS\"\n    management.endpoints.web.exposure.include: \"*\" \n    ```", "```java\n    logging:\n      level:\n        root: INFO\n        org.springframework.cloud.gateway.route.\n            RouteDefinitionRouteLocator: INFO\n        org.springframework.cloud.gateway: TRACE \n    ```", "```java\nspring.cloud.gateway.routes:\n- id: product-composite\n  uri: lb://product-composite\n  predicates:\n  - Path=/product-composite/** \n```", "```java\n- id: product-composite-swagger-ui\n  uri: lb://product-composite\n  predicates:\n  - Path=/openapi/** \n```", "```java\nserver.forward-headers-strategy: framework \n```", "```java\n assertCurl 200 \"curl -s  http://$HOST:$PORT/\n    openapi/v3/api-docs\"\n  assertEqual \"http://$HOST:$PORT\" \"$(echo $RESPONSE \n    | jq -r .servers[].url)\" \n```", "```java\n- id: eureka-api\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/api/{segment}\n  filters:\n  - SetPath=/eureka/{segment} \n```", "```java\n- id: eureka-web-start\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/web\n  filters:\n  - SetPath=/\n- id: eureka-web-other\n  uri: http://${app.eureka-server}:8761\n  predicates:\n  - Path=/eureka/** \n```", "```java\napp.eureka-server: localhost\n---\nspring.config.activate.on-profile: docker\napp.eureka-server: eureka \n```", "```java\ncurl http://httpstat.us/200 -i \n```", "```java\n    - id: host_route_200\n      uri: http://httpstat.us\n      predicates:\n      - Host=i.feel.lucky:8080\n      - Path=/headerrouting/**\n      filters:\n      - SetPath=/200 \n    ```", "```java\n    - id: host_route_418\n      uri: http://httpstat.us\n      predicates:\n      - Host=im.a.teapot:8080\n      - Path=/headerrouting/**\n      filters:\n      - SetPath=/418 \n    ```", "```java\n    - id: host_route_501\n      uri: http://httpstat.us\n      predicates:\n      - Path=/headerrouting/**\n      filters:\n      - SetPath=/501 \n    ```", "```java\n    cd $BOOK_HOME/Chapter10\n    ./gradlew clean build && docker-compose build \n    ```", "```java\n    ./test-em-all.bash start \n    ```", "```java\n    docker-compose ps gateway eureka product-composite product recommendation review \n    ```", "```java\n    curl localhost:8080/actuator/gateway/routes -s | jq '.[] | {\"\\(.route_id)\": \"\\(.uri)\"}' | grep -v '{\\|}' \n    ```", "```java\n    docker-compose logs -f --tail=0 gateway \n    ```", "```java\n    curl http://localhost:8080/product-composite/1 \n    ```", "```java\n    curl -H \"accept:application/json\" \\\n    localhost:8080/eureka/api/apps -s | \\\n    jq -r .applications.application[].instance[].instanceId \n    ```", "```java\n    curl http://localhost:8080/headerrouting -H \"Host: i.feel.lucky:8080\" \n    ```", "```java\n    curl http://localhost:8080/headerrouting -H \"Host: im.a.teapot:8080\" \n    ```", "```java\n    curl http://localhost:8080/headerrouting \n    ```", "```java\n    sudo bash -c \"echo '127.0.0.1 i.feel.lucky im.a.teapot' >> /etc/hosts\" \n    ```", "```java\n    curl http://i.feel.lucky:8080/headerrouting\n    curl http://im.a.teapot:8080/headerrouting \n    ```", "```java\n    docker-compose down \n    ```", "```java\n    127.0.0.1 i.feel.lucky im.a.teapot \n    ```"]