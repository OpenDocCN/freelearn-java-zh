["```java\n./standalone.sh -c standalone-ha.xml -b 192.168.1.10\n./standalone.sh -c standalone-ha.xml -b 192.168.1.11\n\n```", "```java\n./standalone.sh -c standalone-ha.xml -Djboss.node.name=node1 \n./standalone.sh -c standalone-ha.xml -Djboss.node.name=node2 -Djboss.socket.binding.port-offset=200\n\n```", "```java\n<server-groups>\n <server-group name=\"main-server-group\" profile=\"full-ha\">\n<jvm name=\"default\">\n<heap size=\"64m\" max-size=\"512m\"/>\n</jvm>\n<socket-binding-group ref=\"full-ha-sockets\"/>\n</server-group>\n<server-group name=\"other-server-group\" profile=\"full-ha\">\n<jvm name=\"default\">\n<heap size=\"64m\" max-size=\"512m\"/>\n</jvm>\n<socket-binding-group ref=\"full-sockets\"/>\n</server-group>\n</server-groups>\n```", "```java\n<subsystem >\n    <hornetq-server>\n <cluster-user>randomUser</cluster-user>\n <cluster-password>randomPassword</cluster-password>\n           . . . \n    </hornetq-server>\n</subsystem>\n```", "```java\n<host name=\"master\" >\n    ...\n    <domain-controller>\n <local/>\n    </domain-controller>\n    ...\n</host>\n```", "```java\nWhat type of user do you wish to add?\n a) Management User (mgmt-users.properties)\n b) Application User (application-users.properties)\n(a): a\n\nEnter the details of the new user to add.\nUsing realm 'ManagementRealm' as discovered from the existing property files.\nUsername : admin1234\nPassword recommendations are listed below. To modify these restrictions edit the add-user.properties configuration file.\n - The password should not be one of the following restricted values {root, admin, administrator}\n - The password should contain at least 8 characters, 1 alphabetic character(s), 1 digit(s), 1 non-alphanumeric symbol(s)\n - The password should be different from the username\nPassword :\nRe-enter Password :\nWhat groups do you want this user to belong to? (Please enter a comma separated list, or leave blank for none)[  ]:\nAbout to add user 'admin1234' for realm 'ManagementRealm'\nIs this correct yes/no? yes\nAdded user 'admin1234' to file 'D:\\Dev\\Servers\\wildfly-8.1.0.Final\\standalone\\configuration\\mgmt-users.properties'\nAdded user 'admin1234' to file 'D:\\Dev\\Servers\\wildfly-8.1.0.Final\\domain\\configuration\\mgmt-users.properties'\nAdded user 'admin1234' with groups  to file 'D:\\Dev\\Servers\\wildfly-8.1.0.Final\\standalone\\configuration\\mgmt-groups.properties'\nAdded user 'admin1234' with groups  to file 'D:\\Dev\\Servers\\wildfly-8.1.0.Final\\domain\\configuration\\mgmt-groups.properties'\nIs this new user going to be used for one AS process to connect to another AS process?\ne.g. for a slave host controller connecting to the master or for a Remoting connection for server to server EJB calls.\nyes/no? yes\nTo represent the user add the following to the server-identities definition <secret value=\"c2xvZHppYWsxMjM0\" />\nPress any key to continue . . .\n\n```", "```java\ndomain.sh –host-config=host-master.xml -b 192.168.1.10 -Djboss.bind.address.management=192.168.1.10\n\n```", "```java\n<host name=\"server1\" >\n    ...\n</host>\n```", "```java\n<host name=\"server2\" >\n    ...\n</host>\n```", "```java\n<domain-controller>\n       <remote host=\"${jboss.domain.master.address}\"      port=\"${jboss.domain.master.port:9999}\"\n username=\"admin1234\" \n       security-realm=\"ManagementRealm\"/>\n</domain-controller>\n```", "```java\n<management>\n   <security-realms>\n      <security-realm name=\"ManagementRealm\">\n         <server-identities>\n            <secret value=\"QWxlc3NhbmRybzIh\" />\n         </server-identities>\n         <authentication>\n            <properties path=\"mgmt-users.properties\" relative-to=\"jboss.domain.config.dir\" />\n         </authentication>\n      </security-realm>\n      <security-realm name=\"ApplicationRealm\">\n         <authentication>\n            <properties path=\"application-users.properties\" relative-to=\"jboss.domain.config.dir\" />\n         </authentication>\n      </security-realm>\n   </security-realms>\n   <management-interfaces>\n      <native-interface security-realm=\"ManagementRealm\">\n         <socket interface=\"management\" port=\"${jboss.management.native.port:9999}\" />\n      </native-interface>\n   </management-interfaces>\n</management>\n```", "```java\n<servers>\n        <server name=\"server-one\" group=\"main-server-group\"/>\n        <server name=\"server-two\" group=\"main-server-group\" auto-start=\"false\"> \n            <socket-bindings port-offset=\"150\"/>\n        </server>\n</servers>\n```", "```java\n<servers>\n     <server name=\"server-three\" group=\"other-server-group\"/>\n     <server name=\"server-four\" group=\"other-server-group\"> auto-start=\"false\">\n            <socket-bindings port-offset=\"150\"/>\n     </server>\n</servers>\n```", "```java\ndomain.sh \\\n-host-conifg=host.xml\n-b 192.168.1.10  \\\n-Djboss.domain.master.address=192.168.1.1 \\\n-Djboss.bind.address.management=192.168.1.10\n```", "```java\ndomain.sh \\\n-host-conifg=host.xml\n-b 192.168.1.11 \\\n-Djboss.domain.master.address=192.168.1.1 \\\n-Djboss.bind.address.management=192.168.1.11 \n```", "```java\n@Singleton\n@Startup\n@AccessTimeout(value = 5, unit = TimeUnit.MINUTES)\npublic class TheatreBox {\n\n    private static final Logger logger =\n            Logger.getLogger(TheatreBox.class);\nprivate Map<Integer, Seat> seats;\n\n @Resource(lookup = \"java:jboss/infinispan/tickets\")\n private EmbeddedCacheManager container;\n\n    @PostConstruct\n    public void setupTheatre() {\n        try {\n            this.cache = container.getCache();\n            logger.info(\"Got Infinispan cache\");\n\n            int id = 0;\n            for (int i = 0; i < 5; i++) {\n                addSeat(new Seat(++id, \"Stalls\", 40));\n                addSeat(new Seat(++id, \"Circle\", 20));\n                addSeat(new Seat(++id, \"Balcony\", 10));\n            }\n            logger.info(\"Seat Map constructed.\");\n        } catch (Exception e) {\n            logger.info(\"Error! \" + e.getMessage());\n        }\n    }\n\n    private void addSeat(Seat seat) {\n        seats.put(seat.getId(), seat);\n    }\n\n    @Lock(READ)\n    public Collection<Seat> getSeats() {\n        return Collections.unmodifiableCollection(seats.values());\n    }\n\n    @Lock(READ)\n    public int getSeatPrice(int seatId) throws NoSuchSeatException {\n        return getSeat(seatId).getPrice();\n    }\n\n    @Lock(WRITE)\n    public void buyTicket(int seatId) throws SeatBookedException, NoSuchSeatException {\n        final Seat seat = getSeat(seatId);\n        if (seat.isBooked()) {\n            throw new SeatBookedException(\"Seat \" + seatId + \" already booked!\");\n        }\n        addSeat(seat.getBookedSeat());\n    }\n\n    @Lock(READ)\n    private Seat getSeat(int seatId) throws NoSuchSeatException {\n        final Seat seat = cache.get(seatId);\n        if (seat == null) {\n            throw new NoSuchSeatException(\"Seat \" + seatId + \" does not exist!\");\n        }\n        return seat;\n    }\n}\n```", "```java\nDependencies: org.infinispan export \n```", "```java\n<cache-container name=\"tickets\" default-cache=\"default\" jndi-name=\"java:jboss/infinispan/tickets\" module=\"deployment.ticket-agency-cluster.jar\">\n<transport lock-timeout=\"60000\"/>\n<replicated-cache name=\"default\" batching=\"true\" mode=\"SYNC\">\n<locking isolation=\"REPEATABLE_READ\"/>\n</replicated-cache>\n</cache-container>\n```", "```java\nremote.connectionprovider.create.options.org.xnio.Options.SSL_ENABLED=false\nremote.connections=node1,node2\nremote.connection.node1.host=localhost\nremote.connection.node1.port = 8080\nremote.connection.node1.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS=false\nremote.connection.node2.host=localhost\nremote.connection.node2.port = 8280\nremote.connection.node2.connect.options.org.xnio.Options.SASL_POLICY_NOANONYMOUS=false\n```", "```java\n<plugin>\n      <groupId>org.wildfly.plugins</groupId>\n      <artifactId>wildfly-maven-plugin</artifactId>\n      <version>1.0.2.Final</version>\n      <configuration>\n          <filename>${project.build.finalName}.jar</filename>\n <hostname>${hostname}</hostname>\n <port>${port}</port> \n      </configuration>\n</plugin>\n```", "```java\nmvn install wildfly:deploy –Dhostname=localhost –Dport=9999\n\n```", "```java\nmvn install wildfly:deploy –Dhostname=localhost –Dport=10194\n\n```", "```java\n<plugin>\n   <groupId>org.codehaus.mojo</groupId>\n   <artifactId>exec-maven-plugin</artifactId>\n   <version>${version.exec.plugin}</version>\n   <executions>\n     <execution>\n         <goals>\n            <goal>exec</goal>\n         </goals>\n     </execution>\n   </executions>\n   <configuration>\n     <executable>java</executable>\n     <workingDirectory>${project.build.directory}/exec-working-directory</workingDirectory>\n     <arguments>\n       <argument>-classpath</argument>\n       <classpath>\n       </classpath>\n <argument>com.packtpub.wflydevelopment.chapter11.client.TicketAgencyClient</argument>\n     </arguments>\n   </configuration>\n</plugin>\n```", "```java\nmvn exec:exec\n\n```", "```java\n<subsystem >\n  <mod-cluster-config advertise-socket=\"modcluster\" connector=\"ajp\">\n   <dynamic-load-provider>\n       <load-metric type=\"cpu\"/>\n   </dynamic-load-provider>\n  </mod-cluster-config>\n</subsystem>\n```", "```java\n<socket-binding name=\"modcluster\" port=\"0\" multicast-address=\"224.0.1.105\" multicast-port=\"23364\"/>\n```", "```java\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_ajp_module modules/mod_proxy_ajp.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_cluster_module modules/mod_proxy_cluster.so\nLoadModule manager_module modules/mod_manager.so\nLoadModule slotmem_module modules/mod_slotmem.so\nLoadModule advertise_module modules/mod_advertise.so\n```", "```java\nListen 192.168.10.1:8888\n\n<VirtualHost 192.168.10.1:8888>\n<Location />\n    Order deny,allow\n    Deny from all\n    Allow from 192.168.10.\n</Location>\n  KeepAliveTimeout 60\n  MaxKeepAliveRequests 0\n  ManagerBalancerName mycluster\n  ServerAdvertise On\n</VirtualHost>\n```", "```java\nmod_cluster/1.2.6.Final\nAuto Refresh show DUMP output show INFO output \nNode michal-pc (ajp://localhost:8009): \nEnable Contexts Disable ContextsBalancer: mycluster,LBGroup: ,Flushpackets: Off,Flushwait: 10000,Ping: 10000000,Smax: 65,Ttl: 60000000,Status: OK,Elected: 0,Read: 0,Transferred: 0,Connected: 0,Load: 100\n\n```", "```java\n<web-app>\n <distributable/>\n</web-app>\n```", "```java\n<web-app>\n    <distributable/>\n</web-app>\n```", "```java\n@Singleton\n@Startup\npublic class TheatreBox {\n\n @Resource(lookup=\"java:jboss/infinispan/container/cluster\")\n private CacheContainer container;\n\n    // Apply the same changes described in\n    // \"Turning your Cache into a distributed cache section\n}\n```", "```java\n@Named\n@SessionScoped\npublic class TheatreBooker implements Serializable {\n}\n```", "```java\nDependencies: org.infinispan export\n```"]