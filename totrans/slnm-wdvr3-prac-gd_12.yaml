- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: Selenium is a browser automation library.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs: []
  type: TYPE_NORMAL
- en: What are the different types of locator mechanisms provided by Selenium?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The different types of locator mechanisms are ID, Name, ClassName, TagName,
    Link, LinkText, CSS Selector, and XPATH.
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: With the `getAttribute()` method, we can read CSS attributes
    as well?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. The `getCssValue()` method is used to read CSS attributes.
  prefs: []
  type: TYPE_NORMAL
- en: What actions can be performed on a WebElement?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The actions performed are click, type (sendKeys), and submit.
  prefs: []
  type: TYPE_NORMAL
- en: How can we determine whether the checkbox is checked or unchecked?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the `isSelected()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the significance of WebDriver becoming a W3C specification?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: WebDriver is now a W3C specification. This means browsers have to be fully compliant with
    WebDriver spec set by the World Wide Web Consortium (W3C for short) and will be
    supported natively by the browser vendor the HTML5 and CSS are other prominent
    W3C specifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: WebDriver is an interface.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs: []
  type: TYPE_NORMAL
- en: Which browsers support headless testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Google Chrome and Mozilla Firefox.
  prefs: []
  type: TYPE_NORMAL
- en: How can we test mobile websites with Chrome?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the Mobile Emulation feature.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which version of Java Streams API is introduced?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java 8.
  prefs: []
  type: TYPE_NORMAL
- en: Explain the filter function of Streams API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Java Stream API provides a `filter()` method to filter stream elements on the
    basis of the given predicate. Suppose we want to get all the link elements that
    are visible on the page, we can use the `filter()` method to return the list in
    the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Which method of Streams API will return the number of matching elements from
    the `filter()` function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`count()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `map()` function to filter a list of WebElements by attribute
    values: True or false?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which are the different formats we can use to output a screenshot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `OutputType` interface support screenshot types in `BASE64`, `BYTES`, and
    `FILE` formats.
  prefs: []
  type: TYPE_NORMAL
- en: How can we switch to another browser tab with Selenium?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can switch to another browser tab using the `driver.switchTo().window()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'True or false: The `defaultContent()` method will switch to the previously
    selected frame.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. The `defaultContent()` method will switch to the page.
  prefs: []
  type: TYPE_NORMAL
- en: What navigation methods are available with Selenium?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Navigate` interface provides `to()` , `back()` , `forward()` , and `refresh()`
    methods.
  prefs: []
  type: TYPE_NORMAL
- en: How can we add a cookie using Selenium?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can add a cookie using the `driver.manage().addCookie(Cookie cookie)` method.
  prefs: []
  type: TYPE_NORMAL
- en: Explain the difference between an implicit wait and an explicit wait.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An implicit wait once set will be available for the entire life of the WebDriver
    instance. It will wait for the element when `findElement` is called for the set
    duration. If the element doesn't appear in DOM in a set time, it will throw the `NoSuchElementFound`
    exception.
  prefs: []
  type: TYPE_NORMAL
- en: An explicit wait, on the other hand, is used to wait for the specific condition
    to happen (for example, the visibility or invisibility of the element, a change
    in title, a change in attribute of the element, thee element becoming editable
    or for a custom condition). Unlike an implicit wait, the explicit wait will poll
    the DOM for the condition to fulfill instead of waiting for a fixed amount of
    time. It will come out if the condition is fulfilled before the defined timeout,
    else it will throw an exception. We can use various predefined conditions from
    the   `ExpectedConditions` class with the explicit wait.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: True or false – the drag and drop action requires the source element and the
    target element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs: []
  type: TYPE_NORMAL
- en: List the keyboard methods that we can perform using the actions API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sendKeys()`, `keyUp()`, and `keyDown()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which method of the actions API will help in performing a double-click operation?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`doubleClick(WebElement target)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the actions API, how can we perform a save option (that is to say, *Ctrl* + *S*)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`new Actions(driver) .sendKeys(Keys.chord(Keys.CONTROL, "s")) .perform();`.'
  prefs: []
  type: TYPE_NORMAL
- en: How can we open a context menu using the actions API?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By calling the `contextClick()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can listen to WebDriver events using WebDriverEventListener interface:
    True or False?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs: []
  type: TYPE_NORMAL
- en: How you can automatically clear an input field before calling the `sendKeys`
    method using WebDriverEventListener?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can call the `WebElement.clear()` method in the `beforeChangeValueOf()` event
    handler.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium supports Accessibility Testing: True or false?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. Selenium does not support Accessibility testing
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'True or false: with Selenium, we can execute tests on the remote machine(s)-'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs: []
  type: TYPE_NORMAL
- en: Which driver class is used to run tests on a remote machine?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `RemoteWebDriver` class.
  prefs: []
  type: TYPE_NORMAL
- en: Explain the `DesiredCapabilities` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `DesiredCapabilities` class is used to specify browser capabilities needed
    by the test script from the RemoteWebDriver. For example, we can specify the name
    of the browser, operating system, and version in `DesiredCapabilities` and pass
    it to `RemoteWebDriver`. The Selenium Standalone Server will match the configured
    capabilities with the available nodes and run the test on the matching node.
  prefs: []
  type: TYPE_NORMAL
- en: What protocol is used between the Selenium test and Selenium Standalone Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: JSON-Wire.
  prefs: []
  type: TYPE_NORMAL
- en: What is the default port used by the Selenium Standalone Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `4444`.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Which argument can be used to specify how many browser instances can be supported
    by the node?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`maxInstances`.'
  prefs: []
  type: TYPE_NORMAL
- en: Explain how Selenium Grid can be used to support Cross Browser Testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Selenium Grid, we can set up nodes for various Browser and Operating System
    combinations and run tests in a distributed architecture. Based on capabilities
    provided by the test, Selenium Grid selects the appropriate node and executes
    the test on the selected node. We can add as many nodes as required based on combinations
    we want to test as per the cross-browser testing matrix required for testing.
  prefs: []
  type: TYPE_NORMAL
- en: What is the URL you need to specify with `RemoteWebDriver` to run tests on Selenium
    Grid?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http://gridHostnameOrIp:4444/wd/hub`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium Grid Hub acts as a load balancer: True or False?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True. Selenium Grid Hub distributes tests on multiple nodes based on the availability
    of the node
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How do you initialize a PageObject implemented with PageFactory?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PageFactory.initElements(driver, pageObjectClass)`.'
  prefs: []
  type: TYPE_NORMAL
- en: Using which class can we implement methods to validate whether the page is loaded?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LoadableComponent`.'
  prefs: []
  type: TYPE_NORMAL
- en: Which `By class` methods are supported by @FindBy?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ID, Name, ClassName, TagName, Link, PartialLinkText, CSS Selector, and XPATH.
  prefs: []
  type: TYPE_NORMAL
- en: 'While using PageFactory, if you name the WebElement variable name by the same
    ID or name attribute, then you don''t need to use the `@FindBy` annotation: True
    or false?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True. You can declare the WebElement variable with the same name as the value
    of id or name attribute, PageFactory will resolve it without using the `@FindBy`
    annotation
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the different types of Mobile Apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Native, Hybrid, and Mobile Web Applications.
  prefs: []
  type: TYPE_NORMAL
- en: Which classes does Appium Java Client library provide for testing iOS and Android
    applications?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AndroidDriver` and `IOSDriver`.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the command to list the Android devices connected to a computer via
    USB ports?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`adb devices`.'
  prefs: []
  type: TYPE_NORMAL
- en: What is the default port used by Appium Server?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Port `4723`.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Explain Data-driven Testing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Data-driven is a test automation framework approach, where input test data is
    stored in tabular format or in a spreadsheet format and a single test script reads
    each row of the data, which can be a unique test case, and executes the steps.
    This enables reuse of test scripts and increases test coverage with varied test
    data combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'True or False: Selenium supports data-driven testing.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False.
  prefs: []
  type: TYPE_NORMAL
- en: What are two methods in TestNG to create data-driven tests?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'TestNG provides two methods for data-driven testing: Suite Parameters and Data
    Providers.'
  prefs: []
  type: TYPE_NORMAL
- en: Explain the DataProvider method in TestNG.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The DataProvider method in TestNG is a special method annotated with the `@DataProvider`
    annotation. It returns an array of objects. We can return tabular data reading
    from any format such as CSV or Excel to test the test case using the data provider.
  prefs: []
  type: TYPE_NORMAL
