["```java\nFROM eclipse-temurin:17.0.8_7-jdk-alpine\nENV APP_FILE_RUNNER bootstrap-1.0-SNAPSHOT-runner.jar\nENV APP_HOME /usr/apps\nEXPOSE 8080\nCOPY bootstrap/target/$APP_FILE_RUNNER $APP_HOME/\nWORKDIR $APP_HOME\nENTRYPOINT [\"sh\", \"-c\"]\nCMD [\"exec java -jar $APP_FILE_RUNNER\"]\n```", "```java\n    $ mvn clean package\n    ```", "```java\n    $ docker build . -t topology-inventory\n    Sending build context to Docker daemon  38.68MB\n    Step 1/8 : FROM eclipse-temurin:17.0.8_7-jdk-alpine\n     ---> 9b2a4d2e14f6\n    Step 2/8 : ENV APP_FILE_RUNNER bootstrap-1.0-SNAPSHOT-runner.jar\n     ---> Using cache\n     ---> 753b39c99e78\n    Step 3/8 : ENV APP_HOME /usr/apps\n     ---> Using cache\n     ---> 652c7ce2bd47\n    Step 4/8 : EXPOSE 8080\n     ---> Using cache\n     ---> 37c6928bcae4\n    Step 5/8 : COPY bootstrap/target/$APP_FILE_RUNNER $APP_HOME/\n     ---> Using cache\n     ---> 389c28dc9fa7\n    Step 6/8 : WORKDIR $APP_HOME\n     ---> Using cache\n     ---> 4ac09c0fe8cc\n    Step 7/8 : ENTRYPOINT [\"sh\", \"-c\"]\n     ---> Using cache\n     ---> 737bbcf2402b\n    Step 8/8 : CMD [\"exec java -jar $APP_FILE_RUNNER\"]\n     ---> Using cache\n     ---> 3b17c3fa0662\n    Successfully built 3b17c3fa0662\n    eclipse-temurin:17.0.8_7-jdk-alpine image. Then, it proceeds by defining the environment variables and handling the application artifact by preparing it to be executed every time a new container from that image is created.\n    ```", "```java\n    -p parameter, we’re mapping the 5555 host port to the 8080 container port. So, we’ll need to use the 5555 port to access the system.\n    ```", "```java\n    <profiles>\n      <profile>\n        <id>native</id>\n        <properties>\n          <quarkus.package.type>native\n            </quarkus.package.type>\n        </properties>\n      </profile>\n    </profiles>\n    ```", "```java\n    @RegisterForReflection(targets = {\n            CoreRouter.class,\n            EdgeRouter.class,\n            Switch.class,\n            Id.class,\n            IP.class,\n            Location.class,\n            Model.class,\n            Network.class,\n            Protocol.class,\n            RouterType.class,\n            SwitchType.class,\n            Vendor.class,\n    })\n    public class ReflectionConfiguration {}\n    ```", "```java\n    6g is not enough for you, feel free to increase it to prevent errors.\n    ```", "```java\n    FROM registry.access.redhat.com/ubi8/ubi-minimal\n    ENV APP_FILE_RUNNER bootstrap-1.0-SNAPSHOT-runner\n    ENV APP_HOME /work\n    EXPOSE 8080\n    COPY bootstrap/target/$APP_FILE_RUNNER $APP_HOME/\n    WORKDIR $APP_HOME\n    RUN echo $APP_FILE_RUNNER\n    CMD [\"./bootstrap-1.0-SNAPSHOT-runner\", \"-\n      Dquarkus.http.host=0.0.0.0\"]\n    ```", "```java\n    -t topology-inventory-native:latest and -f Dockerfile-native to create a different Docker image based on the native executable rather than the uber .jar file. The output of this docker build command will be similar to the one we generated when we created the Docker image for the uber .jar file. The only difference will be the entries related to the native executable artifact.\n    ```", "```java\n    $ docker tag topology-inventory-native:latest s4intlaurent/topology-inventory-native:latest\n    $ docker push s4intlaurent/topology-inventory-native:latest\n    The push refers to repository [docker.io/s4intlaurent/topology-inventory-native]\n    f3216c6ba268: Pushed\n    0b911edbb97f: Layer already exists\n    54e42005468d: Layer already exists\n    latest: digest: sha256:4037e5d9c2cef01bda9c4bb5722bccbe0d003336534c28f8245076223ce77273 size: 949\n    ```", "```java\n    http://localhost:5555/q/swagger-ui.\n    ```", "```java\n<dependencies>\n  <dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-config-yaml</artifactId>\n  </dependency>\n  <dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-smallrye-health</artifactId>\n  </dependency>\n</dependencies>\n```", "```java\nquarkus:\n  datasource:\n    username: ${QUARKUS_DATASOURCE_USERNAME:root}\n    password: ${QUARKUS_DATASOURCE_PASSWORD:password}\n    reactive:\n      url: ${QUARKUS_DATASOURCE_REACTIVE_URL:\n        mysql://localhost:3306/inventory}\n```", "```java\n${QUARKUS_DATASOURCE_USERNAME:root}\n```", "```java\n    apiVersion: v1\n    kind: ConfigMap\n    metadata:\n      name: topology-inventory\n    data:\n      QUARKUS_DATASOURCE_REACTIVE_URL:\n        «mysql://topology-inventory-mysql:3306/inventory»\n    ```", "```java\n    apiVersion: v1\n    kind: Secret\n    metadata:\n      name: topology-inventory\n    type: Opaque\n    data:\n      QUARKUS_DATASOURCE_USERNAME: cm9vdAo=\n      QUARKUS_DATASOUCE_PASSWORD: cGFzc3dvcmQK\n    ```", "```java\n    $ echo root | base64 && echo password | base64\n    cm9vdAo=\n    root and password values as the credentials to authenticate on the MySQL database.\n    ```", "```java\n    apiVersion: apps/v1\n    kind: Deployment\n    metadata:\n      name: topology-inventory\n      labels:\n        app: topology-inventory\n    spec:\n      replicas: 1\n      selector:\n        matchLabels:\n          app: topology-inventory\n      template:\n        metadata:\n          labels:\n            app: topology-inventory\n    /** Code omitted **/\n    ```", "```java\n        spec:\n          initContainers:\n            - name: topology-inventory-mysql-init\n              image: busybox\n              command: [ ‹sh›, ‹-c›, ‹until nc -zv\n                topology-inventory-mysql.default.svc.clus\n                  ter.local 3306; do echo waiting\n                for topology-inventory-mysql.de\n                  fault.svc.cluster.local; sleep 5;\n                done;› ]\n          containers:\n            - name: topology-inventory\n              image: s4intlaurent/topology-\n                inventory:latest\n              envFrom:\n              - configMapRef:\n                  name: topology-inventory\n              livenessProbe:\n                httpGet:\n                  path: /q/health/ready\n                  port: 8080\n                initialDelaySeconds: 30\n                timeoutSeconds: 5\n                periodSeconds: 3\n              ports:\n    - containerPort: 8080\n    ```", "```java\n    apiVersion: v1\n    kind: Service\n    metadata:\n      name: topology-inventory\n      labels:\n        app: topology-inventory\n    spec:\n      type: NodePort\n      ports:\n        - port: 8080\n          targetPort: 8080\n          nodePort: 30080\n          protocol: TCP\n      selector:\n        app: topology-inventory\n    ```", "```java\n    $ minikube start\n    :) minikube v1.4.0 on Fedora 30\n       Creating virtualbox VM (CPUs=2, Memory=2000MB, Disk=20000MB) ...\n       Preparing Kubernetes v1.16.0 on Docker 18.09.9 ...\n       Pulling images ...\n       Launching Kubernetes ...\n       Waiting for: apiserver proxy etcd scheduler controller dns\n       Done! kubectl is now configured to use \"minikube\"\n    ```", "```java\n    $ kubectl get nodes\n    NAME       STATUS   ROLES    AGE   VERSION\n    minikube   Ready    master   5m    v1.16.0\n    ```", "```java\n    $ kubectl apply -f k8s/\n    configmap/topology-inventory created\n    deployment.apps/topology-inventory-mysql created\n    service/topology-inventory-mysql created\n    deployment.apps/topology-inventory created\n    secret/topology-inventory created\n    service/topology-inventory created\n    ```", "```java\n    $ kubectl get pods\n    NAME                                       READY   STATUS    RESTARTS   AGE\n    topology-inventory-76f4986846-zq5t8        1/1     Running   0          73s\n    topology-inventory-mysql-dc9dbfc4b-7sct6   1/1     Running   0          73s\n    ```", "```java\n    $ minikube ssh \"ip addr show eth0\" | grep \"inet\\b\" | awk '{print $2}' | cut -d/ -f1\n    192.168.49.2\n    ```", "```java\n    $ curl -s http://192.168.49.2:30080/q/health/ready | jq\n    {\n      \"status\": \"UP\",\n      \"checks\": [\n        {\n          \"name\": \"Reactive MySQL connections health\n             check\",\n          \"status\": \"UP\",\n          \"data\": {\n            \"<default>\": \"UP\"\n          }\n        }\n      ]\n    http://192.168.49.2:30080/q/swagger-ui, as shown in the following screenshot:\n    ```"]