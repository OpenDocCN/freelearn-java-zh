["```java\n> play new ch9samples (then choose Scala as language)\n> cd ch9samples\n> play console\n\n```", "```java\nscala> val numbers = List(1,4,7,8,10,20)\nnumbers: List[Int] = List(1, 4, 7, 8, 10, 20)\nscala> var total = 0\ntotal: Int = 0\nscala> var iterator = numbers.iterator\niterator: Iterator[Int] = non-empty iterator\nscala> while (iterator.hasNext) {\n total += iterator.next\n }\nscala> total\nres2: Int = 50\n\n```", "```java\nscala> List(1,4,7,8,10,20).foldLeft(0){ (total,elem) =>\n total + elem } \nres3: Int = 50\n\n```", "```java\nscala> import play.api.libs.iteratee._\nimport play.api.libs.iteratee._\nscala> import play.api.libs.concurrent.Execution.Implicits._\nimport play.api.libs.concurrent.Execution.Implicits._\n\n```", "```java\nscala> val enumerator = Enumerator(1,4,7,8,10,20)\nenumerator: play.api.libs.iteratee.Enumerator[Int] = play.api.libs.iteratee.Enumerator$$anon$19@27a21c85...\n\n```", "```java\nscala> val iteratee = Iteratee.fold(0){ (total, elem:Int) => total + elem }\niteratee: play.api.libs.iteratee.Iteratee[Int,Int] = play.api.libs.iteratee.ContIteratee@e07a406\n\n```", "```java\nscala> val result = enumerator.run(iteratee)\nresult: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@78b5282b\n\n```", "```java\nscala> result onComplete println\nscala> Success(50)\n\n```", "```java\nscala> val stringEnumerator = Enumerator(\"one\",\"two\",\"four\")\nstringEnumerator: play.api.libs.iteratee.Enumerator[String] = play.api.libs.iteratee.Enumerator$$anon$19@1ca7d367\nscala> val doubleEnumerator = Enumerator(1.03,2.34,4)\ndoubleEnumerator: play.api.libs.iteratee.Enumerator[Double] = play.api.libs.iteratee.Enumerator$$anon$19@a8e29a5\n\n```", "```java\nAlice\nBob\nCharlie\n```", "```java\nscala> import java.io.File\nimport java.io.File\nscala> val fileEnumerator: Enumerator[Array[Byte]] = Enumerator.fromFile(new File(\"./samplefile.txt\"))\nfileEnumerator: play.api.libs.iteratee.Enumerator[Array[Byte]] = play.api.libs.iteratee.Enumerator$$anon$4@33500f2\n\n```", "```java\nscala> val dateGenerator: Enumerator[String] = Enumerator.generateM(\n play.api.libs.concurrent.Promise.timeout(\n Some(\"current time %s\".format((new java.util.Date()))),\n 500\n )) \n\n```", "```java\nscala> val result = enumerator.run(iteratee)\nresult: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@1837220f\nscala> val result2=enumerator(iteratee)\nresult2: scala.concurrent.Future[play.api.libs.iteratee.Iteratee[Int,Int]] = scala.concurrent.impl.Promise$DefaultPromise@5261b67f\n\n```", "```java\nscala> val enumerator = Enumerator(1,4,7,8,10,20)\nenumerator: play.api.libs.iteratee.Enumerator[Int] = play.api.libs.iteratee.Enumerator$$anon$19@7e666ce4\n\n```", "```java\nscala> val chunksIteratee = Iteratee.getChunks[Int]\nchunksIteratee: play.api.libs.iteratee.Iteratee[Int,List[Int]] = play.api.libs.iteratee.ContIteratee@53af8d86\nscala> val list = enumerator.run(chunksIteratee)\nlist: scala.concurrent.Future[List[Int]] = scala.concurrent.impl.Promise$DefaultPromise@66e1b41c\nscala> list onComplete println\nscala> Success(List(1, 4, 7, 8, 10, 20))\n\n```", "```java\nscala> def wordsWithE: Iteratee[String,List[String]] = {\n def step(total:List[String])(input:Input[String]): Iteratee[String,List[String]] = input match {\n case Input.EOF | Input.Empty => Done(total,Input.EOF)\n case Input.El(elem) =>\n if(elem.contains(\"E\")) Cont[String,List[String]](i=> step(elem::total)(i))\n else Cont[String,List[String]](i=> step(total)(i))\n }\n Cont[String,List[String]](i=> step(List[String]())(i))\n}\nwordsWithE: play.api.libs.iteratee.Iteratee[String,List[String]]\n\n```", "```java\nscala> val output = Enumerator(\"ONE\",\"TWO\",\"THREE\") run wordsWithE\noutput: scala.concurrent.Future[List[String]] = scala.concurrent.impl.Promise$DefaultPromise@50e0cc83\nscala> output onComplete println\nscala> Success(List(THREE, ONE))\n\n```", "```java\nscala> val summingIteratee = Iteratee.fold(0){ (total, elem:Int) => total + elem }\nsummingIteratee: play.api.libs.iteratee.Iteratee[Int,Int] = play.api.libs.iteratee.ContIteratee@196fad1a\nscala> Enumerator(\"2\",\"5\",\"7\") through Enumeratee.map(x => x.toInt) run summingIteratee\nres5: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@5ec418a8\nscala> res5 onComplete println\nscala> Success(14)\n\n```", "```java\nscala> val enumerator = Enumerator(\"ONE\",\"Two\",\"Three\")\nscala> enumerator run wordsWithE onComplete println\nscala> Success(List(ONE))\nscala> enumerator through Enumeratee.map(x=>x.toUpperCase) run wordsWithE onComplete println\nscala> Success(List(THREE, ONE))\n\n```", "```java\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\nimport play.api.libs.iteratee._\nimport scala.concurrent.ExecutionContext.Implicits.global\n\nobject Application extends Controller {\n\n  def index = Action {\n    Ok(views.html.index(\"Your new application is ready.\"))\n  }\n\n  def connect =  WebSocket.using[String] { request =>\n\n // Concurrent.broadcast returns (Enumerator, Concurrent.Channel)\n val (out,channel) = Concurrent.broadcast[String]\n\n // log message to stdout and send response back to client\n val in = Iteratee.foreach[String] { msg =>\n println(msg)\n //the channel will push to the Enumerator\n channel push(\"RESPONSE: \" + msg)\n }\n (in,out)\n }\n}\n```", "```java\n@(title: String)(content: Html)\n\n<!DOCTYPE html>\n\n<html>\n    <head>\n        <title>@title</title>\n        <link rel=\"stylesheet\" media=\"screen\" href=\"@routes.Assets.at(\"stylesheets/main.css\")\">\n        <link rel=\"shortcut icon\" type=\"image/png\" href=\"@routes.Assets.at(\"images/favicon.png\")\">\n        <script src=\"img/@routes.Assets.at(\"javascripts/jquery-1.9.0.min.js\")\" type=\"text/javascript\"></script>\n\n        <script type=\"text/javascript\">\n    function WebSocketTest() {\n      if (\"WebSocket\" in window) {\n         alert(\"WebSocket is supported by your Browser!\");\n         // Let us open a web socket\n         var ws = new WebSocket(\"ws://localhost:9000/connect\");\n         ws.onopen = function() {\n            // Web Socket is connected, send data\n                 var msg = \"Hello Websocket!\"\n            ws.send(msg);\n            alert(\"Message is sent...\"+msg);\n         };\n         ws.onmessage = function (evt) { \n            var received_msg = evt.data;\n            alert(\"Message is received...\"+received_msg);\n         };\n         ws.onclose = function() { \n            // websocket is closed.\n            alert(\"Connection is closed...\"); \n         };\n      }\n      else {\n         // The browser doesn't support WebSocket\n         alert(\"WebSocket NOT supported by your Browser!\");\n      }\n    }\n    </script>\n  </head>\n    <body>\n        <div id=\"sse\">\n            <a href=\"javascript:WebSocketTest()\">Run WebSocket</a>\n           </div>\n    </body>\n</html>\n```", "```java\n# Routes\n# This file defines all application routes (Higher priority routes first)\n# ~~~~\n\n# Home page\nGET  /      controllers.Application.index\nGET  /connect    controllers.Application.connect\n\n# Map static resources from the /public folder to the /assets URL path\nGET  /assets/*file  controllers.Assets.at(path=\"/public\", file)\n```", "```java\n> play run\n\n```", "```java\n> git clone https://github.com/mandubian/play-actor-room\n\n```", "```java\n> cd play-actor-room/samples/simplest\n> play run\n\n```", "```java\n[info] play - Application started (Dev)\n[info] play - Starting application default Akka system.\n[debug] application - Connected Member with ID:Thomas\n[info] application - received Play Actor Room rocks\n\n```", "```java\nclass Receiver extends Actor {\n  def receive = {\n    case Received(from, js: JsValue) =>\n      (js \\ \"msg\").asOpt[String] match {\n        case None => play.Logger.error(\"couldn't msg in websocket event\")\n        case Some(s) =>\n          play.Logger.info(s\"received $s\")\n          context.parent ! Broadcast(from, Json.obj(\"msg\" -> s))\n      }\n  }\n}\n```", "```java\nval appDependencies = Seq(\n    \"org.mandubian\" %% \"play-actor-room\" % \"0.1\",\n    \"play-json-zipper\" %% \"play-json-zipper\" % \"1.0\",\n    \"com.typesafe.play\" %% \"play-json\"           % \"2.2.0\"\n  )\n```", "```java\ncase Received(from, js: JsValue) =>\n      js match {\n        case json\"\"\"{\n          \"booking\":\"flight\",\n          \"numberOfPersons\":$v1\n        }\"\"\" =>  play.Logger.info(s\"received $v1\")\n        â€¦\n```", "```java\npackage actors\n\nimport akka.actor.Actor\nimport akka.event.LoggingReceive\n\nobject Flight {\n  case class BookSeat(number:Int) {\n    require(number > 0)\n  }\n  case object GetSeatsLeft\n  case object Done\n  case object Failed\n}\nclass Flight extends Actor {\n  import Flight._\n\n  def book(seats:Int):Receive = LoggingReceive {\n    case BookSeat(nb) if nb <= seats =>\n      context.become(book(seats-nb))\n      sender ! Done\n    case GetSeatsLeft => sender ! seats\n    case _ => sender ! Failed\n  }\n\n  def receive = book(50) // Initial number of available seats\n}\n```", "```java\n@(connected: Option[String] = None)\n\n@main(connected) {\n\n  @connected.map { id =>\n    <p class=\"pull-right\">\n     Logged in as @id\n       <a href=\"@routes.Application.index()\">Disconnect</a>\n    </p>\n    <div>Places left in flight: <input size=\"10\" id=\"placesLeft\"></input></div>\n\n    <div>\n      <select id =\"booking\">\n        <option value=\"flight\">Flight</option>\n        <option value=\"hotel\">Hotel</option>\n      </select>\n      Number of persons to book:\n      <textarea id =\"numberOfPersons\" ></textarea>\n    </div>\n\n    <script type=\"text/javascript\" charset=\"utf-8\" src=\"img/@routes.Application.websocketJs(id)\"></script>\n  }.getOrElse {\n    <form action=\"@routes.Application.connect(None)\" class=\"pull-right\">\n      <input id=\"username\" name=\"id\" class=\"input-small\" type=\"text\" placeholder=\"Username\">\n        <button class=\"btn\" type=\"submit\">Sign in</button>\n    </form>\n  }\n}\n```", "```java\n@(id: String)(implicit r: RequestHeader)\n\n$(function() {\n\n  var WS = window['MozWebSocket'] ? MozWebSocket : WebSocket;\n  var wsSocket = new WS(\"@routes.Application.websocket(id).webSocketURL()\");\n  var sendMessage = function() {\n    wsSocket.send(JSON.stringify(\n       {\n         \"booking\":$(\"#booking\").val(),\n         \"numberOfPersons\":$(\"#numberOfPersons\").val()\n       }\n    ))\n    $(\"#numberOfPersons\").val('');\n  }\n\n  var receiveEvent = function(event) {\n    console.log(event);\n    var data = JSON.parse(event.data);\n    // Handle errors\n    if(data.error) {\n      console.log(\"WS Error \", data.error);\n      wsSocket.close();\n      // TODO manage error\n      return;\n    } else {\n      console.log(\"WS received \", data);\n      // TODO manage display\n      $(\"#placesLeft\").val(data.placesLeft);\n    }\n  }\n\n  var handleReturnKey = function(e) {\n    if(e.charCode == 13 || e.keyCode == 13) {\n      e.preventDefault();\n      sendMessage();\n    }\n  }\n\n  $(\"#numberOfPersons\").keypress(handleReturnKey);\n\n  wsSocket.onmessage = receiveEvent;\n\n})\n```", "```java\n[â€¦imports from the original actor room sampleâ€¦]\nimport play.api.libs.json._\nimport play.api.libs.functional.syntax._\nimport play.api.libs.json.extensions._\n\nimport actors._\n\nobject Receiver {\n  val flightBookingActor = Akka.system.actorOf(Props[Flight],\"flight\")\n}\nclass Receiver extends Actor {\n  import Receiver.flightBookingActor\n\n  def receive = LoggingReceive {\n    case x:Int => \n      play.Logger.info(s\"Received number of seats left: $x\")\n      val placesLeft:String = if (x<0) \"Fully Booked\" else x.toString\n      context.parent ! Broadcast(\"flight\", Json.obj(\"placesLeft\" -> placesLeft))  \n    case Received(from, js: JsValue) =>\n      js match {\n        case json\"\"\"{\n          \"booking\":\"flight\",\n          \"numberOfPersons\":$v1\n        }\"\"\" => \n          play.Logger.info(s\"received $v1\")\n          val nbOfPersons = v1.as[String]\n          flightBookingActor ! Flight.BookSeat(nbOfPersons.toInt)\n          val placesCount = flightBookingActor ! Flight.GetSeatsLeft           \n        case _ => play.Logger.info(s\"no match found\")\n      }\n  }\n}\n```", "```java\n> play\n> run -Dakka.loglevel=DEBUG -Dakka.actor.debug.receive=true\n\n```", "```java\n[info] play - Starting application default Akka system.\n[debug] application - Connected Member with ID:Alice\n[debug] application - Connected Member with ID:Bob\nâ€¦ \nReceived(Bob,{\"booking\":\"flight\",\"numberOfPersons\":\"5\"})\nâ€¦ \nReceived(Alice,{\"booking\":\"flight\",\"numberOfPersons\":\"3\"})\nâ€¦\n[info] application - Received number of seats left: 42\n[DEBUG] [02/15/2014 22:51:01.226] [application-akka.actor.default-dispatcher-7] [akka://application/user/flight] received handled message GetSeatsLeft\n[DEBUG] [02/15/2014 22:51:01.226] [application-akka.actor.default-dispatcher-6] [akka://application/user/$a/Alice-receiver] received handled message 42\n\n```"]