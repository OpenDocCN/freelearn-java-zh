- en: Chapter 4. Building and Running a Project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations! You are halfway through the book. As discussed in earlier
    chapters, Maven follows convention over configuration; this implies there is a
    default build mechanism in place. The build mechanism, often termed as the **build
    lifecycle**, forms a sequence of steps grouped together in phases (also known
    as **stages)**. Each **phase** is accompanied with a set of goals that define
    the unit of task. In this chapter, we will look at three standard lifecycles—clean,
    default, and site—and get acquainted with other common lifecycles. You will also
    get to know about building and running the `hello-project`, which was created
    in [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating and Importing
    Projects"), *Creating and Importing Projects*. This chapter covers the following
    sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Build lifecycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Default lifecycle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean lifecycle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Site lifecycle
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Package-specific lifecycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Maven console
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building and packaging projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running hello-project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The build lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building a Maven project results in the execution of set goals grouped in phases.
    Though there is a default build cycle of Maven, it can be customized to suit our
    needs; that''s the beauty Maven inherits. To ascertain, it is essential to have
    knowledge of the build''s lifecycle. Essentially, the following are the three
    standard lifecycles in Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: Default
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Clean
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The default lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The default lifecycle handles the build of the project and its deployment. It
    is the primary lifecycle of Maven and is also known as the build lifecycle. In
    general, it provides the build process model for Java applications. There are
    23 phases for the default lifecycle that starts with validation and ends with
    deploy. For details on all 23 phases, please refer to [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference).
  prefs: []
  type: TYPE_NORMAL
- en: 'However, here we will see some of the phases and the default associated goals
    that need attention for common application development, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Lifecycle phases | Description | Plugin:goals |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| validate | This validates that the project is correct and contains all the
    necessary information to perform the build operation | - |'
  prefs: []
  type: TYPE_TB
- en: '| compile | This compiles the source code | `compiler:compile` |'
  prefs: []
  type: TYPE_TB
- en: '| test-compile | This compiles the test source code in the test destination
    directory | `compiler:testCompile` |'
  prefs: []
  type: TYPE_TB
- en: '| test | This runs the test using suitable unit testing framework as configured
    in the `pom` file | `surefire:test` |'
  prefs: []
  type: TYPE_TB
- en: '| package | This packages the compiled source code in the corresponding distributable
    format such as JAR, WAR, EAR, and so on | `jar:jar` (for JAR packaging) |'
  prefs: []
  type: TYPE_TB
- en: '| install | This installs the package in the local repository, which can act
    as a dependency for other projects | `install:install` |'
  prefs: []
  type: TYPE_TB
- en: '| deploy | This copies the final package to a remote repository to share with
    other developers and projects | `deploy:deploy` |'
  prefs: []
  type: TYPE_TB
- en: The clean lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The clean lifecycle is the simplest lifecycle in Maven, and it consists of
    the following phases:'
  prefs: []
  type: TYPE_NORMAL
- en: '**pre-clean**: This phase executes the process needed before a project''s clean
    up'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**clean**: This phase removes all files built by an earlier `build` (the `target`
    directory)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**post-clean**: This phase executes the process required after a project''s
    cleanup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Out of these phases, the one that gathers our interest is the **clean** phase.
    The Maven "`clean:clean`" goal is bound to the clean phase. It cleans the project''s
    `build` (usually `target`) directory. Executing any one phase result in execution
    of all phases up to it and the phase itself, for example, a call of a clean phase
    would execute the first pre-clean phase and then the clean phase; similarly, a
    call of post-clean results in the calling of pre-clean, clean, and post-clean
    phases. The following diagram illustrates the execution of the clean lifecycle
    phases (reference: the Apache Maven site):'
  prefs: []
  type: TYPE_NORMAL
- en: '![The clean lifecycle](img/00040.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can bind other goals to the phases of the clean lifecycle. Suppose we want
    to echo some message on the pre-clean phase; we can achieve this by binding the
    `maven-antrun-plugin:run` goal to this phase, which can be done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The site lifecycle
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The site lifecycle handles the creation of the project site documentation.
    The phases of a site lifecycle are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The site lifecycle](img/00041.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following table describes the site lifecycle phases in the order of execution.
    (reference: Apache Maven website)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Phases | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| pre-site | This phase executes processes needed before the generation of
    a project site. |'
  prefs: []
  type: TYPE_TB
- en: '| site | This phase generates documentation of a project site |'
  prefs: []
  type: TYPE_TB
- en: '| post-site | This phase executes a process required after a site''s generation
    and to prepare for site deployment |'
  prefs: []
  type: TYPE_TB
- en: '| site-deploy | This phase deploys the generated site documentation to the
    specified web server |'
  prefs: []
  type: TYPE_TB
- en: Executing any one phase results in the execution of all phases up to it and
    the phase itself. For example, calling post-site results in the execution of pre-site,
    site, and post-site phases. Similar to the clean lifecycle, we can bind other
    goals to the site's lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: The package-specific lifecycle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each type of packaging has its own set of default goals. The default goals
    for JAR packaging is different from WAR packaging. Maven provides a lifecycle
    for the following built-in packaging types:'
  prefs: []
  type: TYPE_NORMAL
- en: JAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: POM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EJB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lifecycle and goal binding for WAR packaging is described here. For other
    packaging lifecycle and goal binding, please refer to [http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings](http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings).
  prefs: []
  type: TYPE_NORMAL
- en: '| Phases | plugin:goals |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| process-resources | `resources:resources` |'
  prefs: []
  type: TYPE_TB
- en: '| compile | `compiler:compile` |'
  prefs: []
  type: TYPE_TB
- en: '| process-test-resources | `resources:testResources` |'
  prefs: []
  type: TYPE_TB
- en: '| test-compile | `compiler:testCompile` |'
  prefs: []
  type: TYPE_TB
- en: '| test | `surefire:test` |'
  prefs: []
  type: TYPE_TB
- en: '| package | `war:war` |'
  prefs: []
  type: TYPE_TB
- en: '| install | `install:install` |'
  prefs: []
  type: TYPE_TB
- en: '| deploy | `deploy:deploy` |'
  prefs: []
  type: TYPE_TB
- en: The Maven console
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get our hands dirty with building and executing Maven projects, we
    need to enable the Maven console. The Maven console can be enabled with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Window** | **Show View** | **Console**. This shows the console
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on the little arrow of **Open Console** as shown in the following
    screen and click on **Maven Console**:![The Maven console](img/00042.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Maven console shows all the output of the Maven build process. It shows
    all the details that Maven processes and is really helpful in getting to know
    what is happening underneath and you can also see the debug messages.
  prefs: []
  type: TYPE_NORMAL
- en: Building and packaging projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Building and packaging Maven projects needs execution of required phases, which
    we discussed in the preceding sections. Let''s build and package `hello-project`
    from [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating and Importing
    Projects"), *Creating and Importing Projects*, which we generated using archetypes.
    In the *Default Lifecycle* section, the phase package executes the following phases
    in order: compile, test, and package phases. Now, we will see how to invoke the
    package phase from m2eclipse. The following steps will ascertain this:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on `hello-project` and select **Run As**. Click on **Run Configurations**
    and the **Run Configurations** window will appear.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on **Maven Build** and choose **New** as shown in the following
    screenshot:![Building and packaging projects](img/00043.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the launch configurations window appears, fill in the details as shown
    in the following screenshot. For **Base Directory**, click on **Browse Workspace...**
    and choose `hello-project` from the pop-up list:![Building and packaging projects](img/00044.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, click on **Apply** and close it using the **Close** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again right-click on the project and select **Run As**, and click on **Maven
    build** as shown in the following screenshot:![Building and packaging projects](img/00045.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A window, as shown in the following screenshot, will appear with all the run
    configurations available:![Building and packaging projects](img/00046.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the **hello-package** launch configuration and click on **OK**. It should
    compile, run tests, generate site documentation, and package in the `target` directory,
    as shown in following screenshot:![Building and packaging projects](img/00047.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Running hello-project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since `hello-project` from the previous chapter is a Java application, running
    it is similar to any other Java application. Right-click on the project, select
    **Run As**, and click on **Java Application**, select the main JAVA class, and
    click on **OK**. It will print `Hello World!` in the console.
  prefs: []
  type: TYPE_NORMAL
- en: Running a web application requires some extra steps, which we will discuss in
    [Chapter 5](part0037_split_000.html#page "Chapter 5. Spicing Up a Maven Project"),
    *Spicing Up a Maven Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the clean, site, and default build lifecycles
    of the Maven project, and later used this knowledge to get the application to
    package and run.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a web application and you will learn to customize
    the `pom` file to suit our needs.
  prefs: []
  type: TYPE_NORMAL
