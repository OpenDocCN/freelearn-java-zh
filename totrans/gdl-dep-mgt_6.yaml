- en: Chapter 6. Publishing to Bintray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned how to deploy our artifacts to a Maven repository.
    In this chapter, you will learn how we can deploy our artifacts to Bintray as
    a Maven repository. We will see what Bintray is and how it helps to publish our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: We will see how we can configure the Gradle Bintray plugin to deploy our artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: What is Bintray?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Bintray advertises itself as a Distribution as a Service. This means that when
    we have something we want to distribute, for example our project artifacts, we
    can use Bintray. Bintray offers a platform to store the software we want to share
    and makes it accessible for others to download. Around this, there is a lot of
    tooling to provide insights into how the packages are distributed and used. Bintray
    also offers a REST API to make it easy to work with the platform. The company
    running Bintray is JFrog, which is very well known for its repository product,
    Artifactory.
  prefs: []
  type: TYPE_NORMAL
- en: A part of Bintray is called JCenter. JCenter hosts Java dependencies within
    the Bintray platform. We already learned about JCenter as a repository host for
    dependencies. However, we can also use JCenter as a distribution repository for
    our own dependencies. In this chapter, we are going to use JCenter to deploy our
    artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a new repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we can use Bintray's JCenter, we must create an account with Bintray
    at [https://bintray.com](https://bintray.com). One of the easiest ways is to use
    your existing GitHub account to sign in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will create a new repository in which we will store our artifacts.
    So, first we log in to Bintray. From our user page, we will select the **New repository**
    option. In our browser window, we can see some fields we need to fill in, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining a new repository](img/image00133.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to give our repository a name and an optional description. We choose
    **Maven** as the type of repository. Bintray can also be used for other types
    of dependencies, but for our Java code we want to use Maven. After we have filled
    in all the fields, we click on the **Create** button, and Bintray creates a new
    and empty repository. In the next screenshot, we will see our newly created repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Defining a new repository](img/image00134.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Defining the Bintray plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to deploy our artifacts to JCenter, we use the Bintray Gradle plugin.
    This plugin adds extra functionality to our project to publish our artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s continue with our example build file from the previous project. The
    build file is for a Java project with some code. We will use the publishing plugin
    to define our publications or artifacts for the project. We will now add the Gradle
    plugin to the project by using the `buildscript` configuration block. In the next
    example build file, we will apply the Bintray plugin to our project. The following
    code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the release of Gradle 2.1, we use an alternative syntax to include an
    external plugin in our build script. The new syntax works for plugins that are
    deployed to the Gradle plugin portal. The feature is incubating, which means it
    can change in the future. Also, an important restriction is that the new syntax
    is not supported in the `subprojects` and `allprojects` configuration blocks.
    In the following example build file, the new syntax to add a plugin is used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With the new plugin in our project, we can run the `tasks` command to see which
    tasks have been added by the plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We notice the `bintrayUpload` task that has been added by the plugin to our
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying publications to Bintray
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can run the `bintrayUpload` task, we must add some configuration to
    our Gradle build file. The Bintray plugin can be configured with the `bintray`
    configuration block. Inside this configuration block, we see all the properties
    needed to deploy our project's publications to Bintray.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to set the username and the API key for the Bintray account we
    are using to deploy with. To get the API key, we must first log in to Bintray
    in our web browser. From our account page, we click on the **Edit** button. Next,
    we will select the **API** menu option to get to our API key. The key can then
    be copied to the clipboard so that we can use it in our build script. The `user`
    and `key` properties from the `bintray` configuration block contain information
    that we don't want to share. It is best to keep the values of these properties
    externalized from our Gradle build file. We can add a `gradle.properties` file
    to our project directory with the values for the properties. The `gradle.properties`
    file can also be added to our Gradle user home directory, which, by default, is
    `<user_home>/.gradle`. Alternatively, we can use the command-line options `-P`
    and `--project-prop` to set the values.
  prefs: []
  type: TYPE_NORMAL
- en: The `user` and `key` properties are required. Also, we must set the `pkg.repo`
    properties with the repository name we have in Bintray and `pkg.name` as the group
    name of our deployment. Finally, we need to define what we need to publish. Fortunately,
    the Bintray plugin supports the Gradle publishing plugin, so we can reuse the
    publication we have configured in the build file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we configure the Bintray plugin in the
    `bintray` configuration block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Before we can upload our artifact, we must first create a `book-sample` repository
    with the `sample` package by using the web browser interface of Bintray. We need
    to log in using our account and then select the **New repository** link. In the
    following screenshot, we see the fields that need to be filled in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying publications to Bintray](img/image00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'After we have created a new repository, we get an overview of the repository,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying publications to Bintray](img/image00136.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: From this screen, we click on the **New package** button. A repository can contain
    multiple packages. The next screenshot shows the fields that we need to fill to
    create a new package. We must set the **Name**, the **Licenses** field, and a
    **Version control** link.
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying publications to Bintray](img/image00135.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have created the package in our repository, we can invoke the `bintrayUpload`
    task for our project. Let''s see the output when we invoke the task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We notice that the `bintrayUpload` task is dependent on the tasks necessary
    to first compile and build our artifact before it is uploaded. We do not have
    to define this task dependency ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Everything was built successfully, so we can now open our web browser and go
    to the repository and package page. In the following screenshot, we see our updated
    package web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying publications to Bintray](img/image00137.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Bintray first puts the uploaded files into an unpublished state. This way,
    we have time to decide whether we really want to publish this version or not.
    We can see the message on our screen. We are sure that we want to publish this
    version, so we will click on the **Publish** link. Now, the files are published
    so that others can also see the files. If we click on the release version, we
    can even see the actual files in our web browser. The following screenshot shows
    our published artifact JAR file and the corresponding POM file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying publications to Bintray](img/image00138.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Configuring the Bintray plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have configured the required configuration properties to get our project
    published to Bintray. However, the plugin allows for more configuration. We can
    see the configuration properties in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `user` | This sets the Bintray username. |'
  prefs: []
  type: TYPE_TB
- en: '| `key` | This sets the API key. |'
  prefs: []
  type: TYPE_TB
- en: '| `configurations` | This defines the configuration list with deployable files.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `publications` | This defines the list of publications to be deployed. |'
  prefs: []
  type: TYPE_TB
- en: '| `filesSpec` | Use `CopySpec` to define the arbitrary files to be published,
    which are not part of a publication or configuration. |'
  prefs: []
  type: TYPE_TB
- en: '| `dryRun` | This allows you to execute all tasks without deploying them. |'
  prefs: []
  type: TYPE_TB
- en: '| `publish` | Should version be published after upload, instead of publishing
    it via the web browser. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.repo` | This is the name of the repository. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.name` | This is the name of the package. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.userOrg` | This is the optional organization name when the repository
    belongs to an organization. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.desc` | This is the description of the package. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.websiteUrl` | This is the URL of the website belonging to the project.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.issueTrackerUrl` | This is the URL of the issue-tracking system used
    for the project. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.vcsUrl` | This is the URL of the version control system used. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.licenses` | This is the list of licenses valid for this project. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.labels` | This is the list of labels describing what the project is
    about. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.publicDownloadNumbers` | This shows how many times published files are
    downloaded. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.attributes` | This is the map of custom attributes for package. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.name` | This is the custom Bintray version. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.desc` | This is the description specific to this version. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.released` | This is the date of release. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.vcsTag` | This is the tag for this version in the version control
    system. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.attributes` | These are the custom attributes for this version
    package. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.gpg.sign` | This is set to `true` to use GPG signing. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.gpg.passphrase` | This is the passphrase for GPG signing. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.mavenCentralSync.sync` | This is set to `true` to sync with
    Maven Central. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.mavenCentralSync.user` | This is the user token to sync with
    Maven Central. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.mavenCentralSync.password` | This is the password for the user
    syncing with Maven Central. |'
  prefs: []
  type: TYPE_TB
- en: '| `pkg.version.mavenCentralSync.close` | By default, the staging repository
    is closed and artifacts are released to Maven Central. You can optionally turn
    this behavior off (by putting `0` as value) and release the version manually.
    |'
  prefs: []
  type: TYPE_TB
- en: 'In the following example build file, we will use some of these configuration
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It is good to see that if we define the `vcsUrl` and `licenses` configuration
    properties, the plugin will automatically create the package in our repository.
    So, we don't have to use the web browser to create a new package. Instead, we
    can use the configuration in our build script to automatically create a package.
    Also, notice that the package is automatically published, unlike in the first
    example in which it was in an unpublished state.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the third-party Bintray plugin. We learned
    about Bintray and JCenter. We saw how we can create a repository on Bintray and
    use it to deploy our project as a package to this repository.
  prefs: []
  type: TYPE_NORMAL
- en: You learned about the different configuration properties that can be set for
    the deployment to Bintray.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how we can upload to an Ivy repository.
  prefs: []
  type: TYPE_NORMAL
