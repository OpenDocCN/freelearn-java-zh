- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Understanding Dependency Injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn what **dependency injection** (**DI**) is and
    how we can use it with the Spring Boot framework. The Spring Boot framework provides
    DI; therefore, it is good to understand the basics. DI allows for loose coupling
    between components, making your code more flexible, maintainable, and testable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will look into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using dependency injection in Spring Boot
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All of the code for this chapter can be found at the following GitHub link:
    [https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter02).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing dependency injection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dependency injection is a software development technique whereby we can create
    objects that depend on other objects. DI helps with interaction between classes,
    but at the same time keeps the classes independent.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three types of classes in DI:'
  prefs: []
  type: TYPE_NORMAL
- en: A **service** is a class that can be used (this is the dependency).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **client** is a class that uses the dependency.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **injector** passes the dependency (the service) to the dependent class
    (the client).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The three types of classes in DI are shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19818_02_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: DI classes'
  prefs: []
  type: TYPE_NORMAL
- en: DI makes classes loosely coupled. This means that the creation of client dependencies
    is separated from the client’s behavior, which makes unit testing easier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at a simplified example of DI using Java code. In the following
    code, we don’t have DI, because the `Car` client class is creating an object of
    the service class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following code, the service object is not directly created in the client
    class. It is passed as a parameter in the class constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The service class can also be an abstract class; we can then use any implementation
    of that in our client class and use mocks when testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are different types of dependency injection; let’s take a look at two
    of them here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Constructor injection**: Dependencies are passed to a client class constructor.
    An example of constructor injection was already shown in the preceding `Car` code.
    Constructor injection is recommended to use for mandatory dependencies. All dependencies
    are provided using the class constructor and an object cannot be created without
    its required dependencies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Setter injection**: Dependencies are provided through setters. The following
    code shows an example of setter injection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the dependency is now passed in the setter as an argument. Setter injection
    is more flexible because objects can be created without all their dependencies.
    This approach allows for optional dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: The DI reduces dependencies in your code and makes your code more reusable.
    It also improves the testability of your code. We have now learned the basics
    of DI. Next, we will look at how DI is used in Spring Boot.
  prefs: []
  type: TYPE_NORMAL
- en: Using dependency injection in Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Spring Framework, dependency injection is achieved through the Spring
    `ApplicationContext`. `ApplicationContext` is responsible for creating and managing
    objects – **beans** – and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot scans your application classes and registers classes with certain
    annotations (`@Service`, `@Repository`, `@Controller`, and so on) as Spring beans.
    These beans can then be injected using dependency injection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Spring Boot supports several dependency injection mechanisms, and the most
    common ones are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Constructor injection**: Dependencies are injected through a constructor.
    This is the most recommended way because it ensures that all required dependencies
    are available when the object is created. A fairly common situation is when we
    need database access for some operations. In Spring Boot, we use repository classes
    for that. In this situation, we can inject the repository class using constructor
    injection and start using its methods, as shown in the code example below:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have multiple constructors in your class, you have to use the `@Autowired`
    annotation to define which constructor is used for dependency injection:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Setter injection**: Dependencies are injected through setter methods. Setter
    injection is useful if you have optional dependencies or if you want to modify
    dependencies at runtime. Below is an example of setter injection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Field injection**: Dependencies are injected directly into fields. The benefit
    of field injection is its simplicity, but it has some drawbacks. It can cause
    runtime errors if the dependency is not available. It is also harder to test your
    class because you can’t mock the dependencies for testing. Here is an example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can read more about Spring Boot injection in the Spring documentation:
    https://spring.io/guides.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned what dependency injection is and how to use it in
    the Spring Boot framework, which we are using in our backend.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how we can use the **Java Persistent API**
    (**JPA**) with Spring Boot and how to set up a MariaDB database. We will also
    learn about the creation of CRUD repositories and the one-to-many connection between
    database tables.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is dependency injection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How does the `@Autowired` annotation work in Spring Boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you inject resources in Spring Boot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Packt has some video resources for learning about Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Learn Spring Core Framework the Easy Way*, by Karthikeya T. ([https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680](https://www.packtpub.com/product/learn-spring-core-framework-the-easy-way-video/9781801071680))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mastering Spring Framework Fundamentals*, by Matthew Speake ([https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525](https://www.packtpub.com/product/mastering-spring-framework-fundamentals-video/9781801079525))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code10796108009382640.png)'
  prefs: []
  type: TYPE_IMG
