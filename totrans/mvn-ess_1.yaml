- en: Chapter 1. Apache Maven Quick Start
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：Apache Maven 快速入门
- en: Apache Maven is popular as a build tool. However, in reality, it goes beyond
    being just a build tool. It provides a comprehensive build management platform.
    Prior to Maven, developers had to spend a lot of time in building a build system.
    There was no common interface. It differed from project to project, and each time
    a developer moved from one project to another, there was a learning curve. Maven
    filled this gap by introducing a common interface. It merely ended the era of
    the build engineer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Maven 作为构建工具非常受欢迎。然而，实际上，它不仅仅是一个构建工具。它提供了一个全面的构建管理平台。在 Maven 之前，开发者必须花费大量时间来构建构建系统。没有统一的接口。它因项目而异，每次开发者从一个项目转移到另一个项目时，都需要一个学习曲线。Maven
    通过引入一个统一的接口来填补这一空白。它仅仅结束了构建工程师的时代。
- en: 'In this chapter, we will talk about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Installing and configuring Maven on Ubuntu, Mac OS X, and Microsoft Windows
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Ubuntu、Mac OS X 和 Microsoft Windows 上安装和配置 Maven
- en: IDE integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 集成
- en: Tips and tricks for using Maven effectively
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Maven 的高效技巧和窍门
- en: Installing Apache Maven
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Apache Maven
- en: Installing Maven on any platform is more than a straightforward task. At the
    time of writing this book, the latest version was 3.3.3, which is available for
    download at [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    This version requires JDK 1.7.0 or above.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何平台上安装 Maven 不仅仅是一个简单的任务。在撰写本书时，最新版本是 3.3.3，可在 [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi)
    下载。此版本需要 JDK 1.7.0 或更高版本。
- en: Tip
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You should keep a note on the Java requirement for version 3.3.3, if you are
    planning to upgrade from versions 3.0.*, 3.1.*, or 3.2.*. Prior to Maven 3.3.x,
    the only requirement was JDK 1.5.0\. or JDK 1.6.0 (for 3.2.*).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划从 3.0.*、3.1.* 或 3.2.* 版本升级，你应该注意版本 3.3.3 的 Java 要求。在 Maven 3.3.x 之前，唯一的要求是
    JDK 1.5.0 或 JDK 1.6.0（对于 3.2.*）。
- en: Apache Maven is an extremely lightweight distribution. It does not have any
    hard requirements on memory, disk space, or CPU. Maven itself is built on top
    of Java, and it would work on any operating system that runs **Java virtual machine**
    (**JVM**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Maven 是一个非常轻量级的发行版。它对内存、磁盘空间或 CPU 没有任何硬性要求。Maven 本身是基于 Java 构建的，并且可以在任何运行
    **Java 虚拟机**（**JVM**）的操作系统上运行。
- en: Installing Apache Maven on Ubuntu
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Apache Maven
- en: 'Installing Maven on Ubuntu is a single line command. Proceed with the following
    steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Ubuntu 上安装 Maven 只需一条命令。按照以下步骤进行操作：
- en: 'Run the following `apt-get` command in the command prompt. You need to have
    the `sudo` privileges to execute this:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符中运行以下 `apt-get` 命令。你需要有 `sudo` 权限来执行此操作：
- en: '[PRE0]'
  id: totrans-14
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This takes a few minutes to complete. Upon the completion of the installation,
    you can run the following command to verify the installation:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这需要几分钟才能完成。安装完成后，你可以运行以下命令来验证安装：
- en: '[PRE1]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You should get an output similar to the following, if Apache Maven has been
    installed successfully:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Apache Maven 安装成功，你应该会得到以下类似的输出：
- en: '[PRE2]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Maven is installed under the `/usr/share/maven` directory. To check the directory
    structure behind the Maven installation directory, use the following command:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maven 安装在 `/usr/share/maven` 目录下。要检查 Maven 安装目录背后的目录结构，请使用以下命令：
- en: '[PRE3]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Maven configuration files can be found at `/etc/maven`, which can be listed
    using the following command:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maven 配置文件位于 `/etc/maven`，可以使用以下命令列出：
- en: '[PRE4]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If you don't want to work with the `apt-get` command, there is another way of
    installing Maven under any Unix-based operating system. We will discuss this in
    the next section. Since Mac OS X has a kernel built at the top of the Unix kernel,
    installing Maven on Mac OS X would be the same as installing it on any Unix-based
    operating system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想使用 `apt-get` 命令，在基于 Unix 的任何操作系统下安装 Maven 有另一种方法。我们将在下一节讨论这个问题。由于 Mac OS
    X 是基于 Unix 内核构建的内核，因此，在 Mac OS X 上安装 Maven 与在基于 Unix 的任何操作系统上安装它相同。
- en: Installing Apache Maven on Mac OS X
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装 Apache Maven
- en: 'Most of the OS X distributions prior to OS X Mavericks had Apache Maven preinstalled.
    To verify that you''ve got Maven installed in your system, try out the following
    command. If it does not result in a version, then it means you do not have it
    installed:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X Mavericks 之前的许多 OS X 发行版中预装了 Apache Maven。为了验证你的系统中是否已安装 Maven，尝试以下命令。如果没有版本输出，则意味着你没有安装它：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following steps will guide you through the Maven installation process on
    Max OS X Yosemite:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导你在 Max OS X Yosemite 上进行 Maven 安装过程：
- en: First, we need to download the latest version of Maven. Throughout this book,
    we will use Maven 3.3.3, which was the latest version at the time of writing this
    book. Maven 3.3.3 ZIP distribution can be downloaded from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要下载 Maven 的最新版本。在本书中，我们将使用 Maven 3.3.3，这是撰写本书时的最新版本。Maven 3.3.3 ZIP 分发版可以从
    [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi) 下载。
- en: 'Unzip the downloaded ZIP file into `/usr/share/java`. You need to have the
    `sudo` privileges to execute this:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的 ZIP 文件解压到 `/usr/share/java` 目录中。你需要有 `sudo` 权限来执行此操作：
- en: '[PRE6]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In case you already have Maven installed in your system, use the following
    command to unlink. `/usr/share/maven` is only a symlink to the directory where
    Maven is installed:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的系统中已经安装了 Maven，请使用以下命令进行解除链接。`/usr/share/maven` 仅是 Maven 安装目录的符号链接：
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the following command to create a symlink to the latest Maven distribution
    that you just unzipped. You need to have the `sudo` privileges to execute this:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建指向你刚刚解压的最新 Maven 分发的符号链接。你需要有 `sudo` 权限来执行此操作：
- en: '[PRE8]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following command to update the value of the `PATH` environment variable:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更新 `PATH` 环境变量的值：
- en: '[PRE9]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Use the following command to update (or set) the value of the `M2_HOME` environment
    variable:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令更新（或设置）`M2_HOME` 环境变量的值：
- en: '[PRE10]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify the Maven installation with the following command:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令验证 Maven 的安装：
- en: '[PRE11]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you get the following error while running the preceding command, it means
    you have another version of Maven running in your system, and the `PATH` system
    variable includes the path to its `bin` directory. If that is the case, you need
    to clean out the value of the `PATH` system variable by removing the path to the
    old Maven installation:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在运行前面的命令时出现以下错误，这意味着你的系统中正在运行另一个版本的 Maven，并且 `PATH` 系统变量包含了其 `bin` 目录的路径。如果是这种情况，你需要通过删除旧
    Maven 安装路径来清理 `PATH` 系统变量的值：
- en: '[PRE12]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maven can also be installed on Mac OS X with Homebrew. This video explains the
    installation process in detail—
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 也可以使用 Homebrew 在 Mac OS X 上安装。此视频详细解释了安装过程——
- en: '[https://www.youtube.com/watch?v=xTzLGcqUf8k](https://www.youtube.com/watch?v=xTzLGcqUf8k)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/watch?v=xTzLGcqUf8k](https://www.youtube.com/watch?v=xTzLGcqUf8k)'
- en: Installing Apache Maven on Microsoft Windows
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上安装 Apache Maven
- en: 'First, we need to download the latest version of Maven. Apache Maven 3.3.3
    ZIP distribution can be downloaded from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Then, we need to perform the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要下载 Maven 的最新版本。Apache Maven 3.3.3 ZIP 分发版可以从 [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi)
    下载。然后，我们需要执行以下步骤：
- en: Unzip the downloaded ZIP file into the `C:\Program Files\ASF` directory.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将下载的 ZIP 文件解压到 `C:\Program Files\ASF` 目录中。
- en: Set the `M2_HOME` environment variable and point it to `C:\Program Files\ASF\apache-maven-3.3.3`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 `M2_HOME` 环境变量并将其指向 `C:\Program Files\ASF\apache-maven-3.3.3`。
- en: 'Verify the Maven installation with the following command on the command prompt:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符下使用以下命令验证 Maven 的安装：
- en: '[PRE13]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To know more about how to set the environment variables on Microsoft Windows,
    refer to [http://www.computerhope.com/issues/ch000549.htm](http://www.computerhope.com/issues/ch000549.htm).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于如何在 Microsoft Windows 上设置环境变量的信息，请参阅 [http://www.computerhope.com/issues/ch000549.htm](http://www.computerhope.com/issues/ch000549.htm)。
- en: Configuring the heap size
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置堆大小
- en: Once you have Maven installed in your system, the very next step is to fine-tune
    it for an optimal performance. By default, the maximum heap allocation is 512
    MB, which starts from 256 MB (`-Xms256m` to `-Xmx512m`). This default limit is
    not good enough to build a large, complex Java project, and it is recommended
    that you have at least 1024 MB of the maximum heap.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在系统中安装了 Maven，下一步就是对其进行微调以实现最佳性能。默认情况下，最大堆分配为 512 MB，从 256 MB (`-Xms256m`
    到 `-Xmx512m`) 开始。默认限制对于构建大型、复杂的 Java 项目来说不够好，建议你至少有 1024 MB 的最大堆。
- en: 'If you encounter `java.lang.OutOfMemoryError` at any point during a Maven build,
    then it is mostly due to a lack of memory. You can use the `MAVEN_OPTS` environment
    variable to set the maximum allowed heap size for Maven at a global level. The
    following command will set the heap size in any Unix-based operating system, including
    Linux and Mac OS X. Make sure that the value set as the maximum heap size does
    not exceed your system memory of the machine, which runs Maven:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 Maven 构建过程中任何时刻遇到 `java.lang.OutOfMemoryError`，那么这通常是由于内存不足造成的。你可以使用 `MAVEN_OPTS`
    环境变量在全局级别设置 Maven 的最大允许堆大小。以下命令将在任何基于 Unix 的操作系统（包括 Linux 和 Mac OS X）中设置堆大小。确保设置的堆大小不超过运行
    Maven 的机器的系统内存：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you are on Microsoft Windows, use the following command:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Microsoft Windows，请使用以下命令：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, `-Xmx` takes the maximum heap size and `-XX:MaxPermSize` takes the maximum
    **Permanent Generation** (**PermGen**) size.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-Xmx` 用于指定最大堆大小，而 `-XX:MaxPermSize` 用于指定最大 **永久代**（**PermGen**）大小。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maven runs as a Java process on JVM. As it proceeds with a build, it keeps on
    creating Java objects. These objects are stored in the memory allocated to Maven.
    This area of memory where Java objects are stored is known as heap. Heap is created
    at the JVM start and it increases as more and more objects are created up to the
    defined maximum limit. The `-Xms` JVM flag is used to instruct JVM about the minimum
    value that it should set at the time of creating the heap. The `-Xmx` JVM flag
    sets the maximum heap size.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 在 JVM 上作为 Java 进程运行。随着构建的进行，它不断创建 Java 对象。这些对象存储在分配给 Maven 的内存中。存储 Java
    对象的内存区域被称为堆。堆在 JVM 启动时创建，随着创建的对象越来越多，它将增加到定义的最大限制。`-Xms` JVM 标志用于指示 JVM 在创建堆时应设置的最低值。`-Xmx`
    JVM 标志设置最大堆大小。
- en: PermGen is an area of memory managed by JVM, which stores the internal representations
    of Java classes. The maximum size of PermGen can be set by the `-XX:MaxPermSize`
    JVM flag.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: PermGen 是 JVM 管理的内存区域，用于存储 Java 类的内部表示。可以通过 `-XX:MaxPermSize` JVM 标志设置 PermGen
    的最大大小。
- en: When the Java virtual machine cannot allocate enough memory to Maven, it could
    result in an `OutOfMemoryError`. To know more about the Maven `OutOfMemoryError`,
    refer to [https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError](https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError).
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Java 虚拟机无法为 Maven 分配足够的内存时，可能会导致 `OutOfMemoryError`。要了解更多关于 Maven `OutOfMemoryError`
    的信息，请参阅 [https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError](https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError)。
- en: Hello Maven!
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗨，Maven！
- en: The easiest way to get started with a Maven project is to use the `generate`
    goal of the `archetype` plugin to generate a simple Maven project. Maven archetypes
    are discussed in detail in [Chapter 3](ch03.html "Chapter 3. Maven Archetypes"),
    *Maven Archetypes,* and plugins are covered in [Chapter 4](ch04.html "Chapter 4. Maven
    Plugins"), *Maven Plugins*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用 Maven 项目的最简单方法是使用 `archetype` 插件的 `generate` 目标来生成一个简单的 Maven 项目。Maven
    架构在 [第 3 章](ch03.html "第 3 章。Maven 架构")、*Maven 架构* 中详细讨论，插件在 [第 4 章](ch04.html
    "第 4 章。Maven 插件")、*Maven 插件* 中介绍。
- en: 'Let''s start with a simple example:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从简单的例子开始：
- en: '[PRE16]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This command will invoke the `generate` goal of the Maven `archetype` plugin
    to create a simple Java project. You will see that the following project structure
    is created with a sample `POM` file. The name of the root or the base directory
    is derived from the value of the `artifactId` parameter:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将调用 Maven `archetype` 插件的 `generate` 目标来创建一个简单的 Java 项目。你会看到以下项目结构被创建，其中包含一个示例
    `POM` 文件。根目录或基本目录的名称是从 `artifactId` 参数的值派生出来的：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The sample `POM` file will only have a dependency to the `junit` JAR file with
    `test` as the scope:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 `POM` 文件将只包含对 `junit` JAR 文件的依赖，作用域为 `test`：
- en: '[PRE18]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The generated `App.java` class will have the following template code. The name
    of the package is derived from the provided `groupId` parameter. If you want to
    have a different value as the package name, then you need to pass this value in
    the command itself as `-Dpackage=com.packt.samples.application`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 `App.java` 类将包含以下模板代码。包的名称是从提供的 `groupId` 参数派生出来的。如果你想将不同的值用作包名，那么你需要将此值作为命令本身的一部分传递，例如
    `-Dpackage=com.packt.samples.application`：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To build the sample project, run the following command from the `com.packt.samples.archetype`
    directory, where the `pom.xml` file exists:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建示例项目，请从存在 `pom.xml` 文件的 `com.packt.samples.archetype` 目录中运行以下命令：
- en: '[PRE20]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Convention over configuration
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 契约优于配置
- en: Convention over configuration is one of the main design philosophies behind
    Apache Maven. Let's go through a few examples.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 约定优于配置是 Apache Maven 背后的主要设计哲学之一。让我们通过几个例子来了解一下。
- en: 'A complete Maven project can be created using the following configuration file
    (`pom.xml`):'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下配置文件（`pom.xml`）创建一个完整的 Maven 项目：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Maven `POM` file starts with the <`project>` element. Always define the
    `<project>` element with the schema. Some tools can''t validate the file without
    it:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的 `POM` 文件以 `<project>` 元素开始。始终使用模式定义 `<project>` 元素。一些工具没有它无法验证文件：
- en: '[PRE22]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `pom.xml` file is the heart of any Maven project and is discussed in detail
    in [Chapter 2](ch02.html "Chapter 2. Understanding the Project Object Model (POM)"),
    *Understanding the Project Object Model (POM)*. Copy the previous configuration
    element and create a `pom.xml` file out of it. Then, place it in a directory called
    `chapter-01`, and then create the following child directories under it:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`pom.xml` 文件是任何 Maven 项目的核心，并在 [第 2 章](ch02.html "第 2 章。理解项目对象模型 (POM)") *理解项目对象模型
    (POM)* 中详细讨论。复制前面的配置元素，并从中创建一个 `pom.xml` 文件。然后，将其放置在名为 `chapter-01` 的目录中，然后在其中创建以下子目录：'
- en: '`chapter-01/src/main/java`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapter-01/src/main/java`'
- en: '`chapter-01/src/test/java`'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`chapter-01/src/test/java`'
- en: 'Now, you can place your Java code under `chapter-01/src/main/java` and test
    cases under `chapter-01/src/test/java`. Use the following command to run the Maven
    build from where the `pom.xml` is:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在 `chapter-01/src/main/java` 下放置你的 Java 代码，并在 `chapter-01/src/test/java`
    下放置测试用例。使用以下命令从 `pom.xml` 所在的位置运行 Maven 构建：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This little configuration that you found in the sample `pom.xml` file is tied
    up with many conventions:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你在示例 `pom.xml` 文件中找到的这个小配置与许多约定相关联：
- en: Java source code is available at `{base-dir}/src/main/java`
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 源代码位于 `{base-dir}/src/main/java`
- en: Test cases are available at `{base-dir}/src/test/java`
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试用例位于 `{base-dir}/src/test/java`
- en: The type of the artifact produced is a JAR file
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成的构件类型是 JAR 文件
- en: Compiled class files are copied to `{base-dir}/target/classes`
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译后的类文件被复制到 `{base-dir}/target/classes`
- en: The final artifact is copied to `{base-dir}/target`
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最终的构件被复制到 `{base-dir}/target`
- en: '[http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2),
    is used as the repository URL.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)，被用作仓库
    URL。'
- en: 'If someone needs to override the default, conventional behavior of Maven, then
    it is possible too. The following sample `pom.xml` file shows how to override
    some of the preceding default values:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人需要覆盖 Maven 的默认、传统行为，这也是可能的。以下示例 `pom.xml` 文件展示了如何覆盖一些前面的默认值：
- en: '[PRE24]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Maven repositories
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 仓库
- en: The magic behind how Maven finds and loads dependent jars for a given Maven
    project is Maven repositories. In the corresponding `pom.xml` file of your Maven
    project, under the `<dependencies>` element, you can define references to all
    the dependent jar files required to build your project successfully. Each dependency
    defined in the `pom.xml` file is identified uniquely using Maven coordinates.
    Maven coordinates uniquely identify a project, a dependency, or a plugin defined
    in a POM. Each entity is uniquely identified by the combination of a group identifier,
    an artifact identifier, and version (and, of course, with the packaging and the
    classifier). Maven coordinates are discussed in detail in [Chapter 2](ch02.html
    "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding the
    Project Object Model (POM)*. Once Maven finds out all the required dependencies
    for a given project, it loads them to the local file system of Maven repositories,
    and adds them to the project classpath.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 如何找到并加载给定 Maven 项目的依赖项背后的魔法是 Maven 仓库。在你的 Maven 项目的相应 `pom.xml` 文件中，在
    `<dependencies>` 元素下，你可以定义所有构建项目所需的依赖项的引用。`pom.xml` 文件中定义的每个依赖项都使用 Maven 坐标唯一标识。Maven
    坐标唯一标识一个项目、依赖项或 POM 中定义的插件。每个实体都由组合的组标识符、构件标识符和版本（当然，还有打包和分类器）唯一标识。Maven 坐标在 [第
    2 章](ch02.html "第 2 章。理解项目对象模型 (POM)") *理解项目对象模型 (POM)* 中详细讨论。一旦 Maven 找出给定项目的所有必需依赖项，它将它们加载到
    Maven 仓库的本地文件系统中，并将它们添加到项目的类路径中。
- en: By convention, Maven uses [http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)
    as the repository. If all the artifacts required to build the project are present
    in this repository, then those will be loaded into the local file system or the
    local Maven repository, which is, by default, at `USER_HOME/.m2/repository`. You
    can add custom repositories at the project level under the `<repositories>` element
    of the `pom.xml` file or at the global level under the `MAVEN_HOME/conf/settings.xml`
    file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，Maven 使用 [http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)
    作为仓库。如果构建项目所需的所有工件都存在于这个仓库中，那么它们将被加载到本地文件系统或本地 Maven 仓库中，默认情况下，位于 `USER_HOME/.m2/repository`。您可以在
    `pom.xml` 文件的 `<repositories>` 元素下在项目级别添加自定义仓库，或者在 `MAVEN_HOME/conf/settings.xml`
    文件下在全局级别添加。
- en: IDE integration
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IDE 集成
- en: Most of the hardcore developers never want to leave their IDE. Not just for
    coding, but for building, deploying, testing, and for everything if possible -
    they would happily do these from the IDE itself. Most of the popular IDEs support
    Maven integration, and they have developed their own plugins to support Maven.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数硬核开发者都不想离开他们的 IDE。不仅是为了编码，还包括构建、部署、测试，如果可能的话，他们愿意从 IDE 本身完成所有这些。大多数流行的 IDE
    都支持 Maven 集成，并且它们已经开发了各自的插件来支持 Maven。
- en: NetBeans integration
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NetBeans 集成
- en: NetBeans 6.7 or newer ships with in-built Maven integration, while NetBeans
    7.0 has newer versions that bundle a complete copy of Maven 3 and runs it for
    builds just like you would from the command line. For version 6.9 or older, you
    have to download a Maven build and configure the IDE to run this. More information
    corresponding to Maven and NetBeans integration is available at [http://wiki.netbeans.org/MavenBestPractices](http://wiki.netbeans.org/MavenBestPractices).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 6.7 或更高版本自带内置的 Maven 集成，而 NetBeans 7.0 则包含 Maven 3 的完整副本，并在构建时运行，就像您从命令行运行一样。对于
    6.9 或更早版本，您必须下载 Maven 构建，并配置 IDE 以运行此构建。有关 Maven 和 NetBeans 集成的更多信息，请参阅 [http://wiki.netbeans.org/MavenBestPractices](http://wiki.netbeans.org/MavenBestPractices)。
- en: IntelliJ IDEA integration
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: IntelliJ IDEA 集成
- en: IntelliJ IDEA has inbuilt support for Maven; hence, you don't need to perform
    any additional steps to install it. More information corresponding to Maven and
    IntelliJ IDEA integration is available at [http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects](http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects).
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA 内置了对 Maven 的支持；因此，您不需要执行任何额外的步骤来安装它。有关 Maven 和 IntelliJ IDEA 集成的更多信息，请参阅
    [http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects](http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects)。
- en: Eclipse integration
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Eclipse 集成
- en: The M2Eclipse project provides first class Maven support through the Eclipse
    IDE. More information corresponding to Maven and the Eclipse integration is available
    at [https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/).
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: M2Eclipse 项目通过 Eclipse IDE 提供了一流的 Maven 支持。有关 Maven 和 Eclipse 集成的更多信息，请参阅 [https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/)。
- en: Note
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The book *Maven for Eclipse*, published by *Packt Publishing*, discusses in
    detail Maven and Eclipse integration at [https://www.packtpub.com/application-development/maven-eclipse](https://www.packtpub.com/application-development/maven-eclipse).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由 *Packt Publishing* 出版的书籍 *Maven for Eclipse* 详细讨论了 Maven 和 Eclipse 集成，请参阅
    [https://www.packtpub.com/application-development/maven-eclipse](https://www.packtpub.com/application-development/maven-eclipse)。
- en: Troubleshooting
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: If everything works fine, we should never have to worry about troubleshooting.
    However, most of the time this is not the case. A Maven build can fail for many
    reasons, some of which are under your control and also out of your control. Knowing
    proper troubleshooting tips helps you to pinpoint the exact problem. The following
    section lists some of the most used troubleshooting tips. We will expand the list
    as we proceed in this book.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们就不必担心故障排除。然而，大多数情况下并非如此。Maven 构建可能会因许多原因而失败，其中一些在您的控制范围内，也有一些不在您的控制范围内。了解适当的故障排除技巧有助于您确定确切的问题。以下部分列出了一些最常用的故障排除技巧。随着本书的进行，我们将扩展这个列表。
- en: Enabling Maven debug level logs
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Maven 调试级别日志
- en: 'Once the Maven debug level logging is enabled, it will print all the actions
    that it takes during the build process. To enable debug level logging, use the
    following command:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启用 Maven 调试级别日志记录，它将在构建过程中打印出它所采取的所有操作。要启用调试级别日志记录，请使用以下命令：
- en: '[PRE25]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Building a dependency tree
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建依赖树
- en: 'If you find any issue with any dependency in your Maven project, the first
    step is to build a dependency tree. This shows where each dependency comes from.
    To build the dependency tree, run the following command against your project `POM`
    file:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现在你的 Maven 项目中任何依赖项存在问题，第一步是构建一个依赖树。这显示了每个依赖项的来源。要构建依赖树，请在你的项目 `POM` 文件上运行以下命令：
- en: '[PRE26]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The following shows the truncated output of the previous command executed against
    the Apache Rampart project:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了针对 Apache Rampart 项目执行的前一个命令的截断输出：
- en: '[PRE27]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Viewing all the environment variables and system properties
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看所有环境变量和系统属性
- en: 'If you have multiple JDKs installed in your system, you may wonder what is
    being used by Maven. The following command will display all the environment variables
    and system properties set for a given Maven project:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你系统中有多个 JDK 安装，你可能想知道 Maven 使用的是哪个。以下命令将显示为给定 Maven 项目设置的 所有环境变量和系统属性：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The following is the truncated output of the previous command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令的截断输出如下：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Viewing the effective POM file
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看有效的 POM 文件
- en: 'Maven uses default values for configuration parameters when they are not overridden
    in the configuration. This is exactly what we discussed under the *Convention
    over configuration* section. If we take the same sample `POM` file that we used
    before in this chapter, we can see how the effective `POM` file would look using
    the following command. This is also the best way to see what default values are
    being used by Maven:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置中没有覆盖配置参数时，Maven 使用默认值。这正是我们在 *约定优于配置* 部分讨论的内容。如果我们使用本章之前使用的相同样本 `POM` 文件，我们可以看到使用以下命令的有效
    `POM` 文件将如何显示。这也是查看 Maven 使用默认值的最有效方式：
- en: '[PRE30]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about the `effective-pom` command are discussed in [Chapter 2](ch02.html
    "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding the
    Project Object Model (POM)*.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `effective-pom` 命令的更多细节在[第二章](ch02.html "第二章. 理解项目对象模型 (POM)")中讨论，*理解项目对象模型
    (POM)*。
- en: Viewing the dependency classpath
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看依赖类路径
- en: 'The following command will list all the JAR files and directories in the build
    `classpath`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将列出构建 `classpath` 中的所有 JAR 文件和目录：
- en: '[PRE31]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following shows the truncated output of the previous command executed against
    the Apache Rampart project:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 以下显示了针对 Apache Rampart 项目执行的前一个命令的截断输出：
- en: '[PRE32]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Summary
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter focused on building a basic foundation around Maven to bring all
    the readers into a common ground. It started with explaining the basic steps to
    install and configure Maven under Ubuntu, Mac OS X, and Microsoft Windows operating
    systems. The latter part of the chapter covered some of the common useful Maven
    tips and tricks. As we proceed with the book, some of the concepts touched in
    this chapter will be discussed in detail.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍了围绕 Maven 建立基本知识体系，以便将所有读者带入一个共同的基础。它从解释在 Ubuntu、Mac OS X 和 Microsoft
    Windows 操作系统下安装和配置 Maven 的基本步骤开始。本章的后半部分涵盖了 Maven 的一些常用技巧和窍门。随着本书的进行，本章中提到的某些概念将得到详细讨论。
- en: In the next chapter, we will discuss **Maven Project Object Model** (**POM**)
    in detail.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细讨论**Maven 项目对象模型**（**POM**）。
