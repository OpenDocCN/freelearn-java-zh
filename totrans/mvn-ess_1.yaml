- en: Chapter 1. Apache Maven Quick Start
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apache Maven is popular as a build tool. However, in reality, it goes beyond
    being just a build tool. It provides a comprehensive build management platform.
    Prior to Maven, developers had to spend a lot of time in building a build system.
    There was no common interface. It differed from project to project, and each time
    a developer moved from one project to another, there was a learning curve. Maven
    filled this gap by introducing a common interface. It merely ended the era of
    the build engineer.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will talk about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Maven on Ubuntu, Mac OS X, and Microsoft Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: IDE integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tips and tricks for using Maven effectively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Apache Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing Maven on any platform is more than a straightforward task. At the
    time of writing this book, the latest version was 3.3.3, which is available for
    download at [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    This version requires JDK 1.7.0 or above.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should keep a note on the Java requirement for version 3.3.3, if you are
    planning to upgrade from versions 3.0.*, 3.1.*, or 3.2.*. Prior to Maven 3.3.x,
    the only requirement was JDK 1.5.0\. or JDK 1.6.0 (for 3.2.*).
  prefs: []
  type: TYPE_NORMAL
- en: Apache Maven is an extremely lightweight distribution. It does not have any
    hard requirements on memory, disk space, or CPU. Maven itself is built on top
    of Java, and it would work on any operating system that runs **Java virtual machine**
    (**JVM**).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Maven on Ubuntu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Installing Maven on Ubuntu is a single line command. Proceed with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following `apt-get` command in the command prompt. You need to have
    the `sudo` privileges to execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This takes a few minutes to complete. Upon the completion of the installation,
    you can run the following command to verify the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You should get an output similar to the following, if Apache Maven has been
    installed successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Maven is installed under the `/usr/share/maven` directory. To check the directory
    structure behind the Maven installation directory, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Maven configuration files can be found at `/etc/maven`, which can be listed
    using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you don't want to work with the `apt-get` command, there is another way of
    installing Maven under any Unix-based operating system. We will discuss this in
    the next section. Since Mac OS X has a kernel built at the top of the Unix kernel,
    installing Maven on Mac OS X would be the same as installing it on any Unix-based
    operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Maven on Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most of the OS X distributions prior to OS X Mavericks had Apache Maven preinstalled.
    To verify that you''ve got Maven installed in your system, try out the following
    command. If it does not result in a version, then it means you do not have it
    installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following steps will guide you through the Maven installation process on
    Max OS X Yosemite:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to download the latest version of Maven. Throughout this book,
    we will use Maven 3.3.3, which was the latest version at the time of writing this
    book. Maven 3.3.3 ZIP distribution can be downloaded from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Unzip the downloaded ZIP file into `/usr/share/java`. You need to have the
    `sudo` privileges to execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In case you already have Maven installed in your system, use the following
    command to unlink. `/usr/share/maven` is only a symlink to the directory where
    Maven is installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to create a symlink to the latest Maven distribution
    that you just unzipped. You need to have the `sudo` privileges to execute this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to update the value of the `PATH` environment variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the following command to update (or set) the value of the `M2_HOME` environment
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Verify the Maven installation with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you get the following error while running the preceding command, it means
    you have another version of Maven running in your system, and the `PATH` system
    variable includes the path to its `bin` directory. If that is the case, you need
    to clean out the value of the `PATH` system variable by removing the path to the
    old Maven installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maven can also be installed on Mac OS X with Homebrew. This video explains the
    installation process in detail—
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=xTzLGcqUf8k](https://www.youtube.com/watch?v=xTzLGcqUf8k)'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Apache Maven on Microsoft Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to download the latest version of Maven. Apache Maven 3.3.3
    ZIP distribution can be downloaded from [http://maven.apache.org/download.cgi](http://maven.apache.org/download.cgi).
    Then, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Unzip the downloaded ZIP file into the `C:\Program Files\ASF` directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `M2_HOME` environment variable and point it to `C:\Program Files\ASF\apache-maven-3.3.3`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the Maven installation with the following command on the command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To know more about how to set the environment variables on Microsoft Windows,
    refer to [http://www.computerhope.com/issues/ch000549.htm](http://www.computerhope.com/issues/ch000549.htm).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the heap size
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have Maven installed in your system, the very next step is to fine-tune
    it for an optimal performance. By default, the maximum heap allocation is 512
    MB, which starts from 256 MB (`-Xms256m` to `-Xmx512m`). This default limit is
    not good enough to build a large, complex Java project, and it is recommended
    that you have at least 1024 MB of the maximum heap.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you encounter `java.lang.OutOfMemoryError` at any point during a Maven build,
    then it is mostly due to a lack of memory. You can use the `MAVEN_OPTS` environment
    variable to set the maximum allowed heap size for Maven at a global level. The
    following command will set the heap size in any Unix-based operating system, including
    Linux and Mac OS X. Make sure that the value set as the maximum heap size does
    not exceed your system memory of the machine, which runs Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are on Microsoft Windows, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Here, `-Xmx` takes the maximum heap size and `-XX:MaxPermSize` takes the maximum
    **Permanent Generation** (**PermGen**) size.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Maven runs as a Java process on JVM. As it proceeds with a build, it keeps on
    creating Java objects. These objects are stored in the memory allocated to Maven.
    This area of memory where Java objects are stored is known as heap. Heap is created
    at the JVM start and it increases as more and more objects are created up to the
    defined maximum limit. The `-Xms` JVM flag is used to instruct JVM about the minimum
    value that it should set at the time of creating the heap. The `-Xmx` JVM flag
    sets the maximum heap size.
  prefs: []
  type: TYPE_NORMAL
- en: PermGen is an area of memory managed by JVM, which stores the internal representations
    of Java classes. The maximum size of PermGen can be set by the `-XX:MaxPermSize`
    JVM flag.
  prefs: []
  type: TYPE_NORMAL
- en: When the Java virtual machine cannot allocate enough memory to Maven, it could
    result in an `OutOfMemoryError`. To know more about the Maven `OutOfMemoryError`,
    refer to [https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError](https://cwiki.apache.org/confluence/display/MAVEN/OutOfMemoryError).
  prefs: []
  type: TYPE_NORMAL
- en: Hello Maven!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The easiest way to get started with a Maven project is to use the `generate`
    goal of the `archetype` plugin to generate a simple Maven project. Maven archetypes
    are discussed in detail in [Chapter 3](ch03.html "Chapter 3. Maven Archetypes"),
    *Maven Archetypes,* and plugins are covered in [Chapter 4](ch04.html "Chapter 4. Maven
    Plugins"), *Maven Plugins*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start with a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will invoke the `generate` goal of the Maven `archetype` plugin
    to create a simple Java project. You will see that the following project structure
    is created with a sample `POM` file. The name of the root or the base directory
    is derived from the value of the `artifactId` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The sample `POM` file will only have a dependency to the `junit` JAR file with
    `test` as the scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated `App.java` class will have the following template code. The name
    of the package is derived from the provided `groupId` parameter. If you want to
    have a different value as the package name, then you need to pass this value in
    the command itself as `-Dpackage=com.packt.samples.application`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To build the sample project, run the following command from the `com.packt.samples.archetype`
    directory, where the `pom.xml` file exists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Convention over configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Convention over configuration is one of the main design philosophies behind
    Apache Maven. Let's go through a few examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'A complete Maven project can be created using the following configuration file
    (`pom.xml`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Maven `POM` file starts with the <`project>` element. Always define the
    `<project>` element with the schema. Some tools can''t validate the file without
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `pom.xml` file is the heart of any Maven project and is discussed in detail
    in [Chapter 2](ch02.html "Chapter 2. Understanding the Project Object Model (POM)"),
    *Understanding the Project Object Model (POM)*. Copy the previous configuration
    element and create a `pom.xml` file out of it. Then, place it in a directory called
    `chapter-01`, and then create the following child directories under it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chapter-01/src/main/java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chapter-01/src/test/java`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, you can place your Java code under `chapter-01/src/main/java` and test
    cases under `chapter-01/src/test/java`. Use the following command to run the Maven
    build from where the `pom.xml` is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This little configuration that you found in the sample `pom.xml` file is tied
    up with many conventions:'
  prefs: []
  type: TYPE_NORMAL
- en: Java source code is available at `{base-dir}/src/main/java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test cases are available at `{base-dir}/src/test/java`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The type of the artifact produced is a JAR file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compiled class files are copied to `{base-dir}/target/classes`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final artifact is copied to `{base-dir}/target`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2),
    is used as the repository URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If someone needs to override the default, conventional behavior of Maven, then
    it is possible too. The following sample `pom.xml` file shows how to override
    some of the preceding default values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Maven repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The magic behind how Maven finds and loads dependent jars for a given Maven
    project is Maven repositories. In the corresponding `pom.xml` file of your Maven
    project, under the `<dependencies>` element, you can define references to all
    the dependent jar files required to build your project successfully. Each dependency
    defined in the `pom.xml` file is identified uniquely using Maven coordinates.
    Maven coordinates uniquely identify a project, a dependency, or a plugin defined
    in a POM. Each entity is uniquely identified by the combination of a group identifier,
    an artifact identifier, and version (and, of course, with the packaging and the
    classifier). Maven coordinates are discussed in detail in [Chapter 2](ch02.html
    "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding the
    Project Object Model (POM)*. Once Maven finds out all the required dependencies
    for a given project, it loads them to the local file system of Maven repositories,
    and adds them to the project classpath.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, Maven uses [http://repo.maven.apache.org/maven2](http://repo.maven.apache.org/maven2)
    as the repository. If all the artifacts required to build the project are present
    in this repository, then those will be loaded into the local file system or the
    local Maven repository, which is, by default, at `USER_HOME/.m2/repository`. You
    can add custom repositories at the project level under the `<repositories>` element
    of the `pom.xml` file or at the global level under the `MAVEN_HOME/conf/settings.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: IDE integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Most of the hardcore developers never want to leave their IDE. Not just for
    coding, but for building, deploying, testing, and for everything if possible -
    they would happily do these from the IDE itself. Most of the popular IDEs support
    Maven integration, and they have developed their own plugins to support Maven.
  prefs: []
  type: TYPE_NORMAL
- en: NetBeans integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: NetBeans 6.7 or newer ships with in-built Maven integration, while NetBeans
    7.0 has newer versions that bundle a complete copy of Maven 3 and runs it for
    builds just like you would from the command line. For version 6.9 or older, you
    have to download a Maven build and configure the IDE to run this. More information
    corresponding to Maven and NetBeans integration is available at [http://wiki.netbeans.org/MavenBestPractices](http://wiki.netbeans.org/MavenBestPractices).
  prefs: []
  type: TYPE_NORMAL
- en: IntelliJ IDEA integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IntelliJ IDEA has inbuilt support for Maven; hence, you don't need to perform
    any additional steps to install it. More information corresponding to Maven and
    IntelliJ IDEA integration is available at [http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects](http://wiki.jetbrains.net/intellij/Creating_and_importing_Maven_projects).
  prefs: []
  type: TYPE_NORMAL
- en: Eclipse integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The M2Eclipse project provides first class Maven support through the Eclipse
    IDE. More information corresponding to Maven and the Eclipse integration is available
    at [https://www.eclipse.org/m2e/](https://www.eclipse.org/m2e/).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The book *Maven for Eclipse*, published by *Packt Publishing*, discusses in
    detail Maven and Eclipse integration at [https://www.packtpub.com/application-development/maven-eclipse](https://www.packtpub.com/application-development/maven-eclipse).
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If everything works fine, we should never have to worry about troubleshooting.
    However, most of the time this is not the case. A Maven build can fail for many
    reasons, some of which are under your control and also out of your control. Knowing
    proper troubleshooting tips helps you to pinpoint the exact problem. The following
    section lists some of the most used troubleshooting tips. We will expand the list
    as we proceed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Maven debug level logs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Once the Maven debug level logging is enabled, it will print all the actions
    that it takes during the build process. To enable debug level logging, use the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Building a dependency tree
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you find any issue with any dependency in your Maven project, the first
    step is to build a dependency tree. This shows where each dependency comes from.
    To build the dependency tree, run the following command against your project `POM`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the truncated output of the previous command executed against
    the Apache Rampart project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Viewing all the environment variables and system properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have multiple JDKs installed in your system, you may wonder what is
    being used by Maven. The following command will display all the environment variables
    and system properties set for a given Maven project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the truncated output of the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Viewing the effective POM file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maven uses default values for configuration parameters when they are not overridden
    in the configuration. This is exactly what we discussed under the *Convention
    over configuration* section. If we take the same sample `POM` file that we used
    before in this chapter, we can see how the effective `POM` file would look using
    the following command. This is also the best way to see what default values are
    being used by Maven:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More details about the `effective-pom` command are discussed in [Chapter 2](ch02.html
    "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding the
    Project Object Model (POM)*.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing the dependency classpath
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following command will list all the JAR files and directories in the build
    `classpath`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following shows the truncated output of the previous command executed against
    the Apache Rampart project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter focused on building a basic foundation around Maven to bring all
    the readers into a common ground. It started with explaining the basic steps to
    install and configure Maven under Ubuntu, Mac OS X, and Microsoft Windows operating
    systems. The latter part of the chapter covered some of the common useful Maven
    tips and tricks. As we proceed with the book, some of the concepts touched in
    this chapter will be discussed in detail.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss **Maven Project Object Model** (**POM**)
    in detail.
  prefs: []
  type: TYPE_NORMAL
