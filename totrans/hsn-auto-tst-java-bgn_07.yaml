- en: Understanding Date Class and Constructors in Java 11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Date` class and constructors are an important part of Java. In this chapter,
    we will talk about each of these in detail with the help of some examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The Date class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Calendar class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parameterized constructors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Date class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand the concept of the `Date` class, we will begin by creating source
    code for our `dateDemo` class. Let's say we want to print the current date or
    current time. How do we print that?
  prefs: []
  type: TYPE_NORMAL
- en: 'At times, we are asked to enter the date into the current date field and we
    need to get it from Java. In such cases, we will use the `Date` class, which will
    give us the current date and current time, in seconds as well. So every detail
    about the day, week, month, year, or hour can be read through from Java classes.
    Java has developed a class called `Date`, from which we can get all these details.
    The following screenshot displays the source code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2127fc87-0ea8-4136-89ad-c91a2b6ad5d1.png)'
  prefs: []
  type: TYPE_IMG
- en: Source code displaying use of date class
  prefs: []
  type: TYPE_NORMAL
- en: 'Basically, we need to use the methods present in that particular class. To
    use the methods present in that class, we need to create an object of that particular
    class. For this, let''s consider the following code syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This `Date` class comes from the `util` package, and `d` is the object of the
    `Date` class where date and time are present. In the previous chapter, we saw
    that Java has some packages, such as the `java.lang` package which traps all fundamental
    Java stuff, and `java.util`, which is where we have collection framework and the
    `Date` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code syntax says that we do not know where the `Date` class is.
    To make this class available to our Java file, we need to import the `util` Java
    package because this `Date` class is packed into that particular package. If we use
    it to import the package into the preceding class, you can use that date successfully.
    Move your mouse here and it says `import ''Date'' (java.util)`, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6315b3ed-ec0c-4ee5-8394-852d79fbf046.png)'
  prefs: []
  type: TYPE_IMG
- en: Quick fixes drop down with suggestions to correct the code error
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on that, you will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Where `util` is the package, and `Date` is a class.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen, `d` is the object that contains the date and time, but how
    do we print it? Because it is an object format, we cannot simply use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'To convert it into readable text, refer to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/abcf8219-d429-4217-9600-392a79c407a1.png)'
  prefs: []
  type: TYPE_IMG
- en: Converting the code into readable text format
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we are converting `Date` into a string so that we can visually see it
    in our output. On running the preceding code as shown in the screenshot, it prints
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how we can print the entire date, time, and month from our current
    system''s Java date. The format in the preceding output is not what we generally
    get, but it might be in a specific format, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If we want to extract our date in the preceding format, how do we do that?
  prefs: []
  type: TYPE_NORMAL
- en: 'The `d` object gives us all the details. But how can we convert all these details
    into the preceding format? For this we will use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code syntax will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/464c47f3-8bda-4d73-8a42-83e235e38004.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying date and time as per the code
  prefs: []
  type: TYPE_NORMAL
- en: 'Refer the following URL for the `SimpleDateFormat` format code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.tutorialspoint.com/java/java_date_time.htm](http://www.tutorialspoint.com/java/java_date_time.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, on altering the object and the `SimpleDateFormat` code, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eed47275-9213-438e-8db8-6ee259e99d2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying the date and time in a new format
  prefs: []
  type: TYPE_NORMAL
- en: Thus, we can actually format our date as per our requirements and pass that
    into the `SimpleDateFormat` method. We can bring the `d` object and place it into
    an argument so that it will be formatted in a particular manner. This is how dates
    are retrieved using Java.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how to use the `Calendar` class.
  prefs: []
  type: TYPE_NORMAL
- en: The Calendar class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we explored the `Date` class, where we learned about `Date`
    methods and how to operate on them using simple date format standards. In this
    section, we will learn about the `Calendar` class, which is similar to the `Date`
    class, but with some extra features. Let's see what they are and how we can use
    them to extract our date formats using the `Calendar` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will create a class with a different name to avoid conflict. To create
    a `Calendar` instance, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The steps are similar to those for the `Date` class. However, the `Calendar`
    object has some unique features that date doesn't support. Let's explore them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5f8f48c1-689c-4c56-b27a-debebf8a514f.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying date and time using calendar class
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, suppose we want to print the day of the month and week too. We will add
    the following line of code to the preceding snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e36a6cb9-d914-4aab-9863-b121a07af33a.png)'
  prefs: []
  type: TYPE_IMG
- en: Output displaying date, time, day of the month and day of week in month using
    calendar class
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can see from the following screenshot that there are multiple
    properties to choose from:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/675cc76c-07cd-4a88-b00f-c26c75ed89e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Drop down displaying multiple properties for the calendar class
  prefs: []
  type: TYPE_NORMAL
- en: Thus, here we have used the `Calendar` instance to actually get the system date
    and time, but in the previous class we used `Date` instance; that's the only difference.
    A lot of methods are present in this `Calendar` instance that you will not find
    in the `Date` class.
  prefs: []
  type: TYPE_NORMAL
- en: This is how the system date can be retrieved as per our requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Constructors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The constructor is one of the most important concepts in the Java programming
    language. Thus, before we see an example, let's understand what a constructor
    is.
  prefs: []
  type: TYPE_NORMAL
- en: A constructor executes a block of code whenever an object is created. That means
    that, whenever we create an object for the class, automatically a block of code
    will get executed. In other words, a constructor is invoked whenever an object
    is created.
  prefs: []
  type: TYPE_NORMAL
- en: So where is a constructor used and how do we define it? A constructor should
    be written, it's just like a method, but the only difference between a method
    and a constructor is that a constructor will not return any values, and the name
    of the constructor should always be a class name.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a constructor for this class, we will write the following code syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code syntax, it is evident that whatever is written in this
    constructor will be executed whoever creates an object and calls the constructor.
    If we create an object for the preceding class called `constructorDemo`, automatically
    the set of lines present in this block will get executed. That''s the main aim
    of the constructor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Whenever the preceding line is executed, the control will automatically check
    whether there is an explicitly-defined constructor. If it is defined, it will
    execute the particular block. Whenever one creates an object, a constructor is
    called in Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output of the preceding code will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We are not actually creating a constructor for every class but we are specifically
    bringing in the constructor concept now as, earlier, we did not use any concept
    when we defined the constructor. Now if we use this command, the program will
    still run, but this time it will not execute that block. If we do not define any
    constructor, the compiler will call the default constructor. We might call it
    an implicit constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We mostly depend on constructors in real-time to initiate objects, or define
    variables for our program. The constructor and normal methods look similar as
    they define the access modifier in brackets, but will not accept any return type,
    but in this case it accepts. Thus, if we write:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the preceding code will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Therefore, in general, people use the preceding code block to define variables
    or initiate properties in real-time, and they go ahead with using the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at another constructor that we have in Java.
  prefs: []
  type: TYPE_NORMAL
- en: Parameterized constructors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The constructor we learned about in the previous section is the default constructor
    because it does not accept any values. In a parametric constructor with the same
    syntax, we actually come up with some parameters, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c78cb8ee-e3e5-48fb-a444-d6050418e31a.png)'
  prefs: []
  type: TYPE_IMG
- en: Output for the parameterized constructor using the given code
  prefs: []
  type: TYPE_NORMAL
- en: 'The only difference between the previous constructor and this one is that here
    we are passing the parameters, and in the default one pass it without any parameters.
    When we run our code, whenever we create an object, if we don''t pass any parameters,
    the compiler automatically picks the default constructor, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/29799d03-478d-4528-a35b-42f7eeac0ea7.png)'
  prefs: []
  type: TYPE_IMG
- en: Output when the default parameter is passed
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s create one more object for the same class with parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'When we define parameters as mentioned in the preceding syntax, the compiler
    checks whether there is any constructor with the two arguments of the integer
    type while executing the runtime. If it finds a constructor, it executes the following
    code syntax instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In cases where a parameter is not defined, the compiler executes the default
    constructor. The output for the preceding code will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'At runtime, when creating an object, we have to give the parameters, so during
    execution, it will compare the parameters with the constructors defined. Similarly,
    we can create multiple objects for the same class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'When both the constructors are run together, the output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will create one more constructor of a similar type, but this time with
    only one parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Thus, the Java compiler gives preference to the explicit constructor if we define
    something explicitly, otherwise it prints the implicit constructor. The key points
    to be noted here are that it  will not return any value and the constructor has
    to be defined with the class name only.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we ran a few examples of code to understand how the `Date`
    class, the `Calendar` class, and the constructors work.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will take a look at three keywords: `super` , `this` and
    discuss the `finally` block.
  prefs: []
  type: TYPE_NORMAL
