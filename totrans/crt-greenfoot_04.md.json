["```java\nimport greenfoot.*;\nimport java.util.List;\n\npublic class CupcakeWorld extends World {\n  private Counter score;\n  private Turret turret;\n  public int BCOUNT = 200;\n  private int ballCounter = BCOUNT;\n  public int FCOUNT = 400;\n  private int fountainCounter = FCOUNT;\n  private int level = 0;\n\n  public CupcakeWorld() {\n    super(600, 400, 1, false);\n    setPaintOrder(Counter.class, Turret.class, Fountain.class,\n    Jumper.class, Enemy.class, Reward.class, Platform.class);\n    prepare();\n  }\n\n  public void act() {\n    checkLevel();\n  }\n\n  private void checkLevel() {\n    if( level > 1 ) generateBalls();\n    if( level > 4 ) generateFountains();\n    if( level % 3 == 0 ) {\n      FCOUNT--;\n      BCOUNT--;\n      level++;\n    }\n  }\n\n  private void generateFountains() {\n    fountainCounter--;\n    if( fountainCounter < 0 ) {\n      List<Brick> bricks = getObjects(Brick.class);\n      int idx = Greenfoot.getRandomNumber(bricks.size());\n      Fountain f = new Fountain();\n      int top = f.getImage().getHeight()/2 + bricks.get(idx).getImage().getHeight()/2;\n      addObject(f, bricks.get(idx).getX(),\n      bricks.get(idx).getY()-top);\n      fountainCounter = FCOUNT;\n    }\n  }\n\n  private void generateBalls() {\n    ballCounter--;\n    if( ballCounter < 0 ) {\n      Ball b = new Ball();\n      turret.setRotation(15 * -b.getXVelocity());\n      addObject(b, getWidth()/2, 0);\n      ballCounter = BCOUNT;\n    }\n  }\n\n  public void addCupcakeCount(int num) {\n    score.setValue(score.getValue() + num);\n    generateNewCupcake();\n  }\n\n  private void generateNewCupcake() {\n    List<Brick> bricks = getObjects(Brick.class);\n    int idx = Greenfoot.getRandomNumber(bricks.size());\n    Cupcake cake = new Cupcake();\n    int top = cake.getImage().getHeight()/2 +\n    bricks.get(idx).getImage().getHeight()/2;\n    addObject(cake, bricks.get(idx).getX(),\n    bricks.get(idx).getY()-top);\n  }\n\n  public void addObjectNudge(Actor a, int x, int y) {\n    int nudge = Greenfoot.getRandomNumber(8) - 4;\n    super.addObject(a, x + nudge, y + nudge);\n  }\n\n  private void prepare(){\n    // Add Bob\n    Bob bob = new Bob();\n    addObject(bob, 43, 340);\n    // Add floor\n    BrickWall brickwall = new BrickWall();\n    addObject(brickwall, 184, 400);\n    BrickWall brickwall2 = new BrickWall();\n    addObject(brickwall2, 567, 400);\n    // Add Score\n    score = new Counter();\n    addObject(score, 62, 27);\n    // Add turret\n    turret = new Turret();\n    addObject(turret, getWidth()/2, 0);\n    // Add cupcake\n    Cupcake cupcake = new Cupcake();\n    addObject(cupcake, 450, 30);\n    // Add platforms\n    for(int i=0; i<5; i++) {\n      for(int j=0; j<6; j++) {\n        int stagger = (i % 2 == 0 ) ? 24 : -24;\n        Brick brick = new Brick();\n        addObjectNudge(brick, stagger + (j+1)*85, (i+1)*62);\n      }\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic abstract class Enemy extends Actor {\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Ball extends Enemy {\n  protected int actorHeight;\n  private int speedX = 0;\n\n  public Ball() {\n    actorHeight = getImage().getHeight();\n    speedX = Greenfoot.getRandomNumber(8) - 4;\n    if( speedX == 0 ) {\n      speedX = Greenfoot.getRandomNumber(100) < 50 ? -1 : 1;\n    }\n  }\n\n  public void act() {\n    checkOffScreen();\n  }\n\n  public int getXVelocity() {\n    return speedX;\n  }\n\n  private void checkOffScreen() {\n    if( getX() < -20 || getX() > getWorld().getWidth() + 20 ) {\n      getWorld().removeObject(this);\n    } else if( getY() > getWorld().getHeight() + 20 ) {\n      getWorld().removeObject(this);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Particles extends Enemy {\n  private int turnRate = 2;\n  private int speed = 5;\n  private int lifeSpan = 50;\n\n  public Particles(int tr, int s, int l) {\n    turnRate = tr;\n    speed = s;\n    lifeSpan = l;\n    setRotation(-90);\n  }\n\n  public void act() {\n    move();\n    remove();\n  }\n\n  private void move() {\n    move(speed);\n    turn(turnRate);\n  }\n\n  private void remove() {\n    lifeSpan--;\n    if( lifeSpan < 0 ) {\n      getWorld().removeObject(this);\n    }\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class RedBall extends Particles {\n  public RedBall(int tr, int s, int l, int scaleX, int scaleY) {\n    super(tr, s, l);\n    getImage().scale(scaleX, scaleY);\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class Fountain extends Actor {\n  private int lifespan = 75;\n  private int startDelay = 100;\n  private GreenfootImage img;\n\n  public Fountain() {\n    img = new GreenfootImage(20,20);\n    img.setColor(Color.blue);\n    img.setTransparency(100);\n    img.fill();\n    setImage(img);\n  }\n\n  public void act() {\n    if( --startDelay == 0 ) wipeView();\n    if( startDelay < 0 ) createRedBallShower();\n  }\n\n  private void wipeView() {\n    img.clear();\n  }\n\n  private void createRedBallShower() {\n  }\n}\n```", "```java\nimport greenfoot.*;\nimport java.awt.Color;\n\npublic class Turret extends Actor {\n  private GreenfootImage turret;\n  private GreenfootImage gun;\n  private GreenfootImage img;\n\n  public Turret() {\n    turret = new GreenfootImage(30,30);\n    turret.setColor(Color.black);\n    turret.fillOval(0,0,30,30);\n\n    gun = new GreenfootImage(40,40);\n    gun.setColor(Color.black);\n    gun.fillRect(0,0,10,35);\n\n    img = new GreenfootImage(60,60);\n    img.drawImage(turret, 15, 15);\n    img.drawImage(gun, 25, 30);\n    img.rotate(0);\n\n    setImage(img);\n  }\n}\n```", "```java\nimport greenfoot.*; \n\npublic abstract class Reward extends Actor {\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Cupcake extends Reward {\n}\n```", "```java\nimport greenfoot.*;\n\npublic abstract class Jumper extends Actor\n{\n  protected int actorHeight;\n\n  public Jumper() {\n    actorHeight = getImage().getHeight();\n  }\n\n  public void act() {\n    handleKeyPresses();\n  }\n\n  protected void handleKeyPresses() {\n  }\n}\n```", "```java\nimport greenfoot.*;\n\npublic class Bob extends Jumper {\n  private int speed = 3;\n  private int animationDelay = 0;\n  private int frame = 0;\n  private GreenfootImage[] leftImages;\n  private GreenfootImage[] rightImages;\n  private int actorWidth;\n\n  private static final int DELAY = 3;\n\n  public Bob() {\n    super();\n\n    rightImages = new GreenfootImage[5];\n    leftImages = new GreenfootImage[5];\n\n    for( int i=0; i<5; i++ ) {\n      rightImages[i] = new GreenfootImage(\"images/Dawson_Sprite_Sheet_0\" + Integer.toString(3+i) + \".png\");\n      leftImages[i] = new GreenfootImage(rightImages[i]);\n      leftImages[i].mirrorHorizontally();\n    }\n\n    actorWidth = getImage().getWidth();\n  }\n\n  public void act() {\n    super.act();\n    checkDead();\n    eatReward();\n  }\n\n  private void checkDead() {\n    Actor enemy = getOneIntersectingObject(Enemy.class);\n    if( enemy != null ) {\n      endGame();\n    }\n  }\n\n  private void endGame() {\n    Greenfoot.stop();\n  }\n\n  private void eatReward() {\n    Cupcake c = (Cupcake) getOneIntersectingObject(Cupcake.class);\n    if( c != null ) {\n      CupcakeWorld rw = (CupcakeWorld) getWorld();\n      rw.removeObject(c);\n      rw.addCupcakeCount(1);\n    }\n  }\n\n  // Called by superclass\n  protected void handleKeyPresses() {\n    super.handleKeyPresses();\n\n    if( Greenfoot.isKeyDown(\"left\") ) {\n      if( canMoveLeft() ) {moveLeft();}\n    }\n    if( Greenfoot.isKeyDown(\"right\") ) {\n      if( canMoveRight() ) {moveRight();}\n    }\n  }\n\n  private boolean canMoveLeft() {\n    if( getX() < 5 ) return false;\n    return true;\n  }\n\n  private void moveLeft() {\n    setLocation(getX() - speed, getY());\n    if( animationDelay % DELAY == 0 ) {\n      animateLeft();\n      animationDelay = 0;\n    }\n    animationDelay++;\n  }\n\n  private void animateLeft() {\n    setImage( leftImages[frame++]);\n    frame = frame % 5;\n    actorWidth = getImage().getWidth();\n  }\n\n  private boolean canMoveRight() {\n    if( getX() > getWorld().getWidth() - 5) return false;\n    return true;\n  }\n\n  private void moveRight() {\n    setLocation(getX() + speed, getY());\n    if( animationDelay % DELAY == 0 ) {\n      animateRight();\n      animationDelay = 0;\n    }\n    animationDelay++;\n  }\n\n  private void animateRight() {\n    setImage( rightImages[frame++]);\n    frame = frame % 5;\n    actorWidth = getImage().getWidth();\n  }\n}\n```", "```java\npublic static boolean isKeyDown(java.lang.String keyName)\nCheck whether a given key is currently pressed down.\n\nParameters:\nkeyName:This is the name of the key to check.\n\nThis returns : true if the key is down.\n\nUsing isKeyDown() is easy. The ease of capturing and using input is one of the major strengths of Greenfoot. Here is example code that will pause the execution of the game if the \"p\" key is pressed:\n\nif( Greenfoot.isKeyDown(\"p\") {\n  Greenfoot.stop();\n}\n```", "```java\nimport greenfoot.*; \n\npublic class Platform extends Actor {\n}\n```", "```java\nimport greenfoot.*; \n\npublic class BrickWall extends Platform {\n}\n```", "```java\nimport greenfoot.*; \n\npublic class Brick extends Platform {\n}\n```", "```java\nimport greenfoot.*;\n\npublic abstract class Jumper extends Actor\n{\n  protected int actorHeight;\n  private int fallSpeed = 0;\n  private boolean jumping = false;\n\n  // Class Constants\n  protected static final int GRAVITY = 1;\n  protected static final int JUMPSTRENGTH = 12;\n\n  public Jumper() {\n    actorHeight = getImage().getHeight();\n  }\n\n  public void act() {\n    handleKeyPresses();\n    standOrFall();\n  }\n\n  protected void handleKeyPresses() {\n    if( (Greenfoot.isKeyDown(\"space\") ||\n    Greenfoot.isKeyDown(\"up\")) && !jumping) {\n      jump();\n    }\n  }\n\n  private void jump() {\n    fallSpeed = -JUMPSTRENGTH;\n    jumping = true;\n    fall();\n  }\n\n  private void standOrFall() {\n    if( inAir() ) {\n      checkHead();\n      fall();\n      checkLanding();\n    } else {\n      fallSpeed = 0;\n      jumping = false;\n    }\n  }\n\n  private void checkHead() {\n    int actorHead = -actorHeight/2;\n    int step = 0;\n    while( fallSpeed < 0 && step > fallSpeed\n    && getOneObjectAtOffset(0, actorHead + step,\n    Platform.class) == null ) {\n      step--;\n    }\n    if( fallSpeed < 0 ) {\n      fallSpeed = step;\n    }\n  }\n\n  private void checkLanding() {\n    int actorFeet = actorHeight/2;\n    int step = 0;\n    while( fallSpeed > 0 && step < fallSpeed\n    && getOneObjectAtOffset(0, actorFeet + step,\n    Platform.class) == null ) {\n      step++;\n    }\n    if( fallSpeed > 0 ) {\n      fallSpeed = step;\n    }\n  }\n\n  private boolean inAir() {\n    Actor platform = getOneObjectAtOffset(0,\n    getImage().getHeight()/2, Platform.class);\n    return platform == null;\n  }\n\n  private void fall() {\n    setLocation(getX(), getY() + fallSpeed);\n    fallSpeed = fallSpeed + GRAVITY;\n  }\n}\n```", "```java\nprivate int fallSpeed = 0;\nprotected static final int GRAVITY = 1; \n```", "```java\npublic void act() {\n  fallOrBounce();\n  checkOffScreen();\n}\n```", "```java\nprivate void fallOrBounce() {\n  if( fallSpeed <= 0) {\n    checkHead();\n  } else {\n    checkLanding();\n  }\n}\n```", "```java\nprivate void fallOrBounce() {\n  if( fallSpeed <= 0) {\n    checkHead();\n  } else {\n    checkLanding();\n  }\n}\nprivate void checkHead() {\n  int actorHead = -actorHeight/2;\n  int step = 0;\n  int oldFallSpeed;\n  while( fallSpeed < 0 && step > fallSpeed &&\n  getOneObjectAtOffset( 0, actorHead + step,\n  Platform.class) == null ) {\n    step--;\n  }\n  if( step > fallSpeed ) {\n    if( fallSpeed < 0 ) {\n      handleBounce(step);\n    }\n  } else {\n    fall(speedX);\n  }\n}\n```", "```java\nprivate void handleBounce(int step) {\n  int oldFallSpeed = fallSpeed;\n  fallSpeed = step; \n  fall(0);\n  oldFallSpeed = (int)(oldFallSpeed * 0.7);\n  fallSpeed = step - oldFallSpeed;\n  fall(0);\n  fallSpeed = -oldFallSpeed;\n}\n```", "```java\nprivate void fall(int dx) {\n  setLocation(getX() + dx, getY() + fallSpeed);\n  fallSpeed = fallSpeed + GRAVITY;\n}\n```", "```java\nprivate void checkLanding() {\n  int actorFeet = actorHeight/2;\n  int step = 0;\n  int oldFallSpeed;\n  while( fallSpeed > 0 && step < fallSpeed &&\n  getOneObjectAtOffset(0, actorFeet + step,\n  Platform.class) == null ) {\n    step++;\n  }\n  if( step < fallSpeed ) {\n    if( fallSpeed > 0 ) {\n      handleBounce(step);\n    }\n  } else {\n    fall(speedX);\n  }\n}\n```", "```java\nprivate void createRedBallShower() {\n  lifespan--;\n  if( lifespan < 0) {\n    getWorld().removeObject(this);\n  } else {\n    int tr = Greenfoot.getRandomNumber(30) - 15;\n    int s = Greenfoot.getRandomNumber(4) + 6;\n    int l = Greenfoot.getRandomNumber(15) + 5;\n    getWorld().addObject(new RedBall(tr, s, l, 10, 10), getX(), getY());\n  }\n}\n```"]