["```java\n{\n \"_links\" : {\n \"people\" : {\n \"href\" : \"http://localhost:8080/users{?page,size,sort}\",\n \"templated\" : true\n }\n }\n}\n\n```", "```java\n{\n \"_links\" : {\n \"self\" : {\n \"href\" : \"http://localhost:8080/users{?page,size,sort}\",\n \"templated\" : true\n },\n \"search\" : {\n \"href\" : \"http://localhost:8080/users/search\"\n }\n },\n \"page\" : {\n \"size\" : 20,\n \"totalElements\" : 0,\n \"totalPages\" : 0,\n \"number\" : 0\n }\n}\n\n```", "```java\npackage masterSpringMvc.search.api;\n\nimport masterSpringMvc.search.SearchService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/search\")\npublic class SearchApiController {\n    private SearchService searchService;\n\n    @Autowired\n    public SearchApiController(SearchService searchService) {\n        this.searchService = searchService;\n    }\n\n    @RequestMapping(value = \"/{searchType}\", method = RequestMethod.GET)\n    public List<Tweet> search(@PathVariable String searchType, @MatrixVariable List<String> keywords) {\n        return searchService.search(searchType, keywords);\n    }\n}\n```", "```java\nhttp PUT httpbin.org/put hello=world\n\n```", "```java\ncurl -i -X PUT httpbin.org/put -H Content-Type:application/json -d '{\"hello\": \"world\"}'\n\n```", "```java\n{\n \"text\": \"original text\",\n \"user\": \"some_dude\",\n \"profileImageUrl\": \"url\",\n \"lang\": \"en\",\n \"date\": 2015-04-15T20:18:55,\n \"retweetCount\": 42\n}\n\n```", "```java\npackage masterSpringMvc.search;\n\nimport org.springframework.social.twitter.api.Tweet;\nimport org.springframework.social.twitter.api.TwitterProfile;\n\nimport java.time.LocalDateTime;\nimport java.time.ZoneId;\nimport java.util.Date;\n\npublic class LightTweet {\n    private String profileImageUrl;\n    private String user;\n    private String text;\n    private LocalDateTime date;\n    private String lang;\n    private Integer retweetCount;\n\n    public LightTweet(String text) {\n        this.text = text;\n    }\n\n    public static LightTweet ofTweet(Tweet tweet) {\n        LightTweet lightTweet = new LightTweet(tweet.getText());\n        Date createdAt = tweet.getCreatedAt();\n        if (createdAt != null) {\n            lightTweet.date = LocalDateTime.ofInstant(createdAt.toInstant(), ZoneId.systemDefault());\n        }\n        TwitterProfile tweetUser = tweet.getUser();\n        if (tweetUser != null) {\n            lightTweet.user = tweetUser.getName();\n            lightTweet.profileImageUrl = tweetUser.getProfileImageUrl();\n        }\n        lightTweet.lang = tweet.getLanguageCode();\n        lightTweet.retweetCount = tweet.getRetweetCount();\n        return lightTweet;\n    }\n\n  // don't forget to generate getters\n  // They are used by Jackson to serialize objects\n}\n```", "```java\n    public List<LightTweet> search(String searchType, List<String> keywords) {\n        List<SearchParameters> searches = keywords.stream()\n                .map(taste -> createSearchParam(searchType, taste))\n                .collect(Collectors.toList());\n\n        List<LightTweet> results = searches.stream()\n                .map(params -> twitter.searchOperations().search(params))\n                .flatMap(searchResults -> searchResults.getTweets().stream())\n                .map(LightTweet::ofTweet)\n                .collect(Collectors.toList());\n\n        return results;\n    }\n```", "```java\n<ul class=\"collection\">\n    <li class=\"collection-item avatar\" th:each=\"tweet : ${tweets}\">\n        <img th:src=\"img/strong>}\" alt=\"\" class=\"circle\"/>\n        <span class=\"title\" th:text=\"${tweet.user}\">Username</span>\n\n        <p th:text=\"${tweet.text}\">Tweet message</p>\n    </li>\n</ul>\n```", "```java\ncompile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'\n```", "```java\n@Bean\n@Primary\npublic ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n   ObjectMapper objectMapper = builder.createXmlMapper(false).build();\n   objectMapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);\n   return objectMapper;\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport java.time.LocalDate;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class User {\n    private String twitterHandle;\n    private String email;\n    private LocalDate birthDate;\n    private List<String> tastes = new ArrayList<>();\n\n    // Getters and setters for all fields\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Repository\npublic class UserRepository {\n    private final Map<String, User> userMap = new ConcurrentHashMap<>();\n\n    public User save(String email, User user) {\n        user.setEmail(email);\n        return userMap.put(email, user);\n    }\n\n    public User save(User user) {\n        return save(user.getEmail(), user);\n    }\n\n    public User findOne(String email) {\n        return userMap.get(email);\n    }\n\n    public List<User> findAll() {\n        return new ArrayList<>(userMap.values());\n    }\n\n    public void delete(String email) {\n        userMap.remove(email);\n    }\n\n    public boolean exists(String email) {\n        return userMap.containsKey(email);\n    }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public User createUser(@RequestBody User user) {\n        return userRepository.save(user);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public User updateUser(@PathVariable String email, @RequestBody User user) {\n        return userRepository.save(email, user);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public void deleteUser(@PathVariable String email) {\n        userRepository.delete(email);\n    }\n}\n```", "```java\n@Override\npublic void configurePathMatch(PathMatchConfigurer configurer) {\n    UrlPathHelper urlPathHelper = new UrlPathHelper();\n    urlPathHelper.setRemoveSemicolonContent(false);\n    configurer.setUrlPathHelper(urlPathHelper);\n    configurer.setUseRegisteredSuffixPatternMatch(true);\n}\n```", "```java\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:01:08 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[]\n\n~ $ http post http://localhost:8080/api/users email=geo@springmvc.com birthDate=2011-12-12 tastes:='[\"spring\"]'\nHTTP/1.1 200 OK\nContent-Length: 0\nDate: Mon, 20 Apr 2015 00:02:07 GMT\nServer: Apache-Coyote/1.1\n\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:02:13 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[\n {\n \"birthDate\": \"2011-12-12\",\n \"email\": \"geo@springmvc.com\",\n \"tastes\": [\n \"spring\"\n ],\n \"twitterHandle\": null\n }\n]\n\n~ $ http delete http://localhost:8080/api/user/geo@springmvc.com\nHTTP/1.1 200 OK\nContent-Length: 0\nDate: Mon, 20 Apr 2015 00:02:42 GMT\nServer: Apache-Coyote/1.1\n\n~ $ http get http://localhost:8080/api/users\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nDate: Mon, 20 Apr 2015 00:02:46 GMT\nServer: Apache-Coyote/1.1\nTransfer-Encoding: chunked\n\n[]\n\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public ResponseEntity<User> createUser(@RequestBody User user) {\n        HttpStatus status = HttpStatus.OK;\n        if (!userRepository.exists(user.getEmail())) {\n            status = HttpStatus.CREATED;\n        }\n        User saved = userRepository.save(user);\n        return new ResponseEntity<>(saved, status);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) {\n        if (!userRepository.exists(user.getEmail())) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        User saved = userRepository.save(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public ResponseEntity<User> deleteUser(@PathVariable String email) {\n        if (!userRepository.exists(email)) {\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\n        }\n        userRepository.delete(email);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}\n```", "```java\npackage masterSpringMvc.error;\n\npublic class EntityNotFoundException extends Exception {\n    public EntityNotFoundException(String message) {\n        super(message);\n    }\n\n    public EntityNotFoundException(String message, Throwable cause) {\n        super(message, cause);\n    }\n}\n```", "```java\npackage masterSpringMvc.user;\n\nimport masterSpringMvc.error.EntityNotFoundException;\nimport org.springframework.stereotype.Repository;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\n\n@Repository\npublic class UserRepository {\n    private final Map<String, User> userMap = new ConcurrentHashMap<>();\n\n    public User update(String email, User user) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        user.setEmail(email);\n        return userMap.put(email, user);\n    }\n\n    public User save(User user) {\n        return userMap.put(user.getEmail(), user);\n    }\n\n    public User findOne(String email) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        return userMap.get(email);\n    }\n\n    public List<User> findAll() {\n        return new ArrayList<>(userMap.values());\n    }\n\n    public void delete(String email) throws EntityNotFoundException {\n        if (!exists(email)) {\n            throw new EntityNotFoundException(\"User \" + email + \" cannot be found\");\n        }\n        userMap.remove(email);\n    }\n\n    public boolean exists(String email) {\n        return userMap.containsKey(email);\n    }\n}\n```", "```java\npackage masterSpringMvc.user.api;\n\nimport masterSpringMvc.error.EntityNotFoundException;\nimport masterSpringMvc.user.User;\nimport masterSpringMvc.user.UserRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class UserApiController {\n\n    private UserRepository userRepository;\n\n    @Autowired\n    public UserApiController(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.GET)\n    public List<User> findAll() {\n        return userRepository.findAll();\n    }\n\n    @RequestMapping(value = \"/users\", method = RequestMethod.POST)\n    public ResponseEntity<User> createUser(@RequestBody User user) {\n        HttpStatus status = HttpStatus.OK;\n        if (!userRepository.exists(user.getEmail())) {\n            status = HttpStatus.CREATED;\n        }\n        User saved = userRepository.save(user);\n        return new ResponseEntity<>(saved, status);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.PUT)\n    public ResponseEntity<User> updateUser(@PathVariable String email, @RequestBody User user) throws EntityNotFoundException {\n        User saved = userRepository.update(email, user);\n        return new ResponseEntity<>(saved, HttpStatus.CREATED);\n    }\n\n    @RequestMapping(value = \"/user/{email}\", method = RequestMethod.DELETE)\n    public ResponseEntity<User> deleteUser(@PathVariable String email) throws EntityNotFoundException {\n        userRepository.delete(email);\n        return new ResponseEntity<>(HttpStatus.OK);\n    }\n}\n```", "```java\npackage masterSpringMvc.error;\n\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.ControllerAdvice;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.ResponseStatus;\n\n@ControllerAdvice\npublic class EntityNotFoundMapper {\n\n    @ExceptionHandler(EntityNotFoundException.class)\n    @ResponseStatus(value = HttpStatus.NOT_FOUND, reason = \"Entity could not be found\")\n    public void handleNotFound() {\n    }\n}\n```", "```java\ncompile 'io.springfox:springfox-swagger2:2.1.2'\ncompile 'io.springfox:springfox-swagger-ui:2.1.2'\n```", "```java\n@Configuration\n@EnableSwagger2\npublic class WebConfiguration extends WebMvcConfigurerAdapter {\n }\n```", "```java\n@Bean\npublic Docket userApi() {\n    return new Docket(DocumentationType.SWAGGER_2)\n        .select()\n        .paths(path -> path.startsWith(\"/api/\"))\n        .build();\n}\n```", "```java\ncompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml'\n```"]