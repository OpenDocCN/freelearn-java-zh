["```java\n$ mysql -u root -p\n\n```", "```java\n    > CREATE DATABASE `phonebook`;\n\n    ```", "```java\n    > CREATE USER 'phonebookuser'@'localhost' IDENTIFIED BY'phonebookpassword';\n    > GRANT ALL ON phonebook.* TO 'phonebookuser'@'localhost';\n\n    ```", "```java\n    > USE `phonebook`;\n\n    ```", "```java\n    > CREATE TABLE IF NOT EXISTS `contact` (\n     `id` int(11) NOT NULL AUTO_INCREMENT,\n     `firstName` varchar(255) NOT NULL,\n     `lastName` varchar(255) NOT NULL,\n     `phone` varchar(30) NOT NULL,\n     PRIMARY KEY (`id`)\n     ) \n     ENGINE=InnoDB \n     DEFAULT CHARSET=utf8 \n     AUTO_INCREMENT=1 ;\n\n    ```", "```java\n    > INSERT INTO `contact` VALUES (NUL L, 'John', 'Doe', '+123456789'), (NULL, 'Jane', 'Doe', '+987654321');\n\n    ```", "```java\n<dependency><groupId>mysql</groupId><artifactId>mysql-connector-java</artifactId><version>5.1.6</version></dependency><dependency><groupId>io.dropwizard</groupId><artifactId>dropwizard-jdbi</artifactId><version>0.7.0-SNAPSHOT</version></dependency>\n```", "```java\n    package com.dwbook.phonebook.dao;public interface ContactDAO { }\n    ```", "```java\n    @SqlQuery(\"select * from contact where id = :id\")Contact getContactById(@Bind(\"id\") int id);\n    ```", "```java\n    public class ContactMapper implements ResultSetMapper<Contact> {public Contact map(int index, ResultSet r,StatementContext ctx)throws SQLException {return new Contact(r.getInt(\"id\"), r.getString(\"firstName\"),r.getString(\"lastName\"),r.getString(\"phone\"));}}\n    ```", "```java\n    @Mapper(ContactMapper.class)@SqlQuery(\"select * from contact where id = :id\")Contact getContactById(@Bind(\"id\") int id);\n    ```", "```java\n    database:driverClass: com.mysql.jdbc.Driveruser: phonebookuserpassword: phonebookpasswordurl: jdbc:mysql://localhost/phonebook\n    ```", "```java\n         @JsonProperty\n         private DataSourceFactory database = new DataSourceFactory();\n\n          public DataSourceFactory getDataSourceFactory() {\n              return database;\n        }\n    ```", "```java\n      @Override\n      public void run(PhonebookConfiguration c, Environment e)throws Exception {\n        LOGGER.info(\"Method App#run() called\");\n        for (int i=0; i < c.getMessageRepetitions(); i++) {\n          System.out.println(c.getMessage());\n        }\n        System.out.println(c.getAdditionalMessage());\n\n        // Create a DBI factory and build a JDBI instance\n        final DBIFactory factory = new DBIFactory();\n        final DBI jdbi = factory\n          .build(e, c.getDataSourceFactory(), \"mysql\");\n        // Add the resource to the environment\n        e.jersey().register(new ContactResource(jdbi));\n      }\n    ```", "```java\n    private final ContactDAO contactDao;public ContactResource(DBI jdbi) {contactDao = jdbi.onDemand(ContactDAO.class);}\n    ```", "```java\n      @GET\n      @Path(\"/{id}\")\n      public Response getContact(@PathParam(\"id\") int id) {\n        // retrieve information about the contact with theprovided id\n        Contact contact = contactDao.getContactById(id);\n        return Response\n          .ok(contact)\n          .build();\n      }\n    ```", "```java\n      @GetGeneratedKeys\n      @SqlUpdate(\"insert into contact (id, firstName, lastName, phone) values (NULL, :firstName, :lastName, :phone)\")\n      int createContact(@Bind(\"firstName\") String firstName, @Bind(\"lastName\") String lastName, @Bind(\"phone\") String phone);\n    ```", "```java\n    @SqlUpdate(\"update contact set firstName = :firstName, lastName = :lastName, phone = :phone where id = :id\")\n    void updateContact(@Bind(\"id\") int id, @Bind(\"firstName\") String firstName, @Bind(\"lastName\") String lastName,@Bind(\"phone\") String phone);\n    ```", "```java\n    @SqlUpdate(\"delete from contact where id = :id\")\n    void deleteContact(@Bind(\"id\") int id);\n    ```", "```java\n      @POST\n      public Response createContact(Contact contact) throws URISyntaxException {\n        // store the new contact\n        int newContactId = contactDao.createContact(contact.getFirstName(), contact.getLastName(), contact.getPhone());\n        return Response.created(new URI(String.valueOf(newContactId))).build();\n      }\n    ```", "```java\n      @DELETE\n      @Path(\"/{id}\")\n      public Response deleteContact(@PathParam(\"id\") int id) {\n        // delete the contact with the provided id\n        contactDao.deleteContact(id);\n        return Response.noContent().build();\n      }\n    ```", "```java\n      @PUT\n      @Path(\"/{id}\")\n      public Response updateContact(@PathParam(\"id\") int id, Contact contact) {\n        // update the contact with the provided ID\n        contactDao.updateContact(id, contact.getFirstName(),\n          contact.getLastName(), contact.getPhone());\n        return Response.ok(\n          new Contact(id, contact.getFirstName(), contact.getLastName(),\n              contact.getPhone())).build();\n      }\n    ```", "```java\n$ curl --verbose --header \"Content-Type: application/json\" -X POST -d '{\"firstName\": \"FOO\", \"lastName\":\"BAR\n\", \"phone\":\"987654321\"}' \nhttp://localhost:8080/contact/\n\n```", "```java\n@MapResultAsBean\n@SqlQuery(\"select * from contact where id = :id\")\nContact getContactById(@Bind(\"id\") int id);\n```"]