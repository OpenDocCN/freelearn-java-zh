- en: Chapter 2. IDE Integration with Maven
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will see how to set up and use Maven with three popular
    Java **Integrated Development Environments** (**IDE**). We will cover the following
    recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing Maven project in Eclipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Maven project in NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing Maven project in NetBeans
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new Maven project in IntelliJ IDEA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing an existing Maven project in IntelliJ IDEA
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IDE improves developer productivity by performing the following functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating boilerplate code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Carrying out code completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying syntax issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Performing tasks such as compilation, unit testing, and deploying to web/app
    servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While Maven is primarily intended to be a command-line tool, IDEs help developers
    enjoy as well as exploit Maven features in better ways. The integration of Maven
    with IDE helps us to automatically download dependencies and quickly search for
    dependencies through the UI, among other benefits.
  prefs: []
  type: TYPE_NORMAL
- en: The IDE integration of Maven has improved over the years and most Maven features
    can be set through IDE now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Eclipse is one of the most popular open source IDEs. It originated primarily
    from IBM's VisualAge for Java. It is a platform that allows extensibility by means
    of plugins (something that Maven does as well). Eclipse can be used to develop
    not only Java projects, but also a host of other languages by means of plugins.
  prefs: []
  type: TYPE_NORMAL
- en: As of writing this book, Eclipse 4.4.1 (Luna SR1) is the most recent edition.
    The screenshots in this book are for this version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse needs a Java environment to run and hence needs Java to be installed
    on the system. To do this, refer to the *Getting ready* sections of the first
    three recipes of [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting
    Started*.
  prefs: []
  type: TYPE_NORMAL
- en: Download Eclipse from [https://www.eclipse.org/downloads/](https://www.eclipse.org/downloads/).
    Eclipse binaries are available for all popular operating systems. There are also
    different package solutions of Eclipse targeted at different types of developers
    (C/C++, Java EE, PHP, and so on). You should choose one of the Eclipse IDEs for
    Java developers, or the Eclipse IDE for Java EE developers.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For Maven to work, it is important to start Eclipse using JDK and not JRE.
    This can be done by passing the following argument to the start up script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The recent versions of Eclipse come preinstalled with Maven support. Let us
    confirm this by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch Eclipse and click on the **About Eclipse** button in the **Help** menu,
    as shown in the following screenshot:![Getting ready](img/6124OS_2_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **m2** icon from the list of icons that you see:![Getting ready](img/6124OS_2_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On clicking the **m2** icon, you should see something similar to the following
    screenshot:![Getting ready](img/6124OS_2_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Maven** link by navigating to **Window** | **Preferences** from
    the Eclipse menu bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Installations**. You will see the existing installations available
    to Eclipse. It uses an **EMBEDDED** installation of Maven that comes with Eclipse,
    as shown in the following screenshot:![Getting ready](img/6124OS_2_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the Maven installation that you set up by clicking on the **Add…** button.![Getting
    ready](img/6124OS_2_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can check this installation so that it is chosen instead of the **EMBEDDED**
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a new Maven project, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **New** | **Maven Project**. You will see the following
    screen:![How to do it...](img/6124OS_2_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Create a simple project (skip archetype selection)** option to avoid
    choosing what to create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill the same values that we specified as parameters in the *Creating a simple
    project with Maven* recipe in [Chapter 1](ch01.html "Chapter 1. Getting Started"),
    *Getting Started* (**Group Id:** `com.packt.cookbook`, **Artifact Id:** `simple-project`)
    to create a simple Maven project.![How to do it...](img/6124OS_2_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Finish**. Your project is now set up. Click on the `pom.xml` file.
    You will see the following screenshot:![How to do it...](img/6124OS_2_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse has built-in support (using the `m2e` plugin) for Maven projects. In
    this recipe, we used Eclipse to create a simple Maven project, skipping the artifact
    selection. We also specified the `groupId`, `artifactId`, and `version` for the
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Using this information, Eclipse invokes the Maven archetype plugin to create
    a quick start project. The Eclipse console shows the steps performed, and the
    project is created.
  prefs: []
  type: TYPE_NORMAL
- en: The folder structure and contents are identical to the project created from
    the command-line.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing Maven project in Eclipse
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have already set up a Maven project from the command-line, then it can
    easily be imported to Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: If you have not yet set up Eclipse and verified that Maven exists, please follow
    the *Getting ready* section of the preceding recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import an existing Maven project in Eclipse, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **Import…** and click on **Maven**:![How to do it...](img/6124OS_2_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the project we created in the previous chapter:![How to do it...](img/6124OS_2_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the project. You will see contents identical to what we saw when creating
    a new Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Eclipse has built-in support for Maven projects. When a Maven project is imported,
    it parses the pom file, `pom.xml`, for the specified project. Based on the project's
    pom configuration file, it creates relevant Eclipse configurations to recognize
    source files, tests, and artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: It also identifies all the dependencies of the project, downloads these using
    Maven (if they haven't been downloaded already), and adds them to the project
    dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Maven project in NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NetBeans is another popular IDE. This is backed by Oracle, is equally feature-rich
    and extensible, and supports multiple languages, such as Eclipse.
  prefs: []
  type: TYPE_NORMAL
- en: As of writing this, NetBeans 8.0.2 is the most recent edition. The screenshots
    in this book reflect this version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NetBeans can be downloaded in two different ways (if not downloaded already):'
  prefs: []
  type: TYPE_NORMAL
- en: Oracle provides a download of the latest JDK along with the latest version of
    NetBeans. This is a good option, especially if you have not installed JDK yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If JDK is already installed, then NetBeans can be downloaded separately from
    [https://netbeans.org/](https://netbeans.org/). There are different bundles of
    NetBeans (similar to Eclipse). You can choose one from Java SE or Java EE, or
    all of them, based on your preference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that NetBeans is installed, let us create a new Maven project, by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **Tools** | **Options**. Choose **Java** and click on the **Maven**
    tab. You will notice **Maven Home** showing up as **Bundled** with **(Version:
    3.0.5)**:![How to do it...](img/6124OS_2_09.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can leave it as is or change it to your Maven installation by choosing the
    dropdown.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now navigate to **File** | **New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Maven** from **Categories:** and **Java Application** from **Projects:**,
    as shown in the following screenshot:![How to do it...](img/6124OS_2_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the details of the project:![How to do it...](img/6124OS_2_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are done! A new project is now created in NetBeans.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like Eclipse, NetBeans has built-in support for Maven. Unlike Eclipse, NetBeans
    did not use the Maven archetype for a quick start. Instead, it created a new project
    using its template. In this case, you will notice that it did not create the dummy
    source and test class that the quick archetype creates.
  prefs: []
  type: TYPE_NORMAL
- en: Importing an existing Maven project in NetBeans
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of creating a new Maven project, as we did in the preceding recipe,
    you may want to open an existing Maven project in NetBeans. Let us now see how
    we can import an existing Maven project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'NetBeans can be downloaded in two different ways (if not downloaded already):'
  prefs: []
  type: TYPE_NORMAL
- en: Oracle provides a download of the latest JDK along with the latest version of
    NetBeans. This is a good option, especially if you haven't installed JDK yet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If JDK is already installed, then NetBeans can be downloaded separately at [https://netbeans.org/](https://netbeans.org/).
    There are different bundles of NetBeans (similar to Eclipse). You can choose one
    from Java SE or Java EE, or all of them, based on your preference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import an existing Maven project in NetBeans, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **File** | **Open Project...**:![How to do it...](img/6124OS_2_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the project we created earlier from the command-line. Notice how NetBeans
    recognizes it (with the **ma** icon) as a Maven project:![How to do it...](img/6124OS_2_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NetBeans now opens the Maven project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like Eclipse, NetBeans has built-in support for Maven. It identifies a folder
    as a Maven project due to the presence of `pom.xml`. It parses this file and opens
    the project associating the files and folders to **Source Packages**, **Dependencies**,
    and **Project Files**, as shown in following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_2_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new Maven project in IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IntelliJ IDEA is an IDE from JetBrains. It has both Community and commercial
    editions. IntelliJ IDEA is enormously popular among developers and is regularly
    updated with the latest language and platform features.
  prefs: []
  type: TYPE_NORMAL
- en: For the purpose of this cookbook, we will use the Community Edition. The steps
    are the same for the commercial edition as well.
  prefs: []
  type: TYPE_NORMAL
- en: As of writing this book, IntelliJ IDEA 14.0.3 is the most recent edition. The
    screenshots in this book reflect this version.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As IntelliJ IDEA needs a Java environment to run, let us first ensure that
    the Java environment is set up on our system:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that JDK is installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download IntelliJ IDEA by visiting [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)
    and clicking on the **Download** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the project SDK is set to your Java installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the following steps to create a new Maven project in IntelliJ IDEA:'
  prefs: []
  type: TYPE_NORMAL
- en: Open IntelliJ IDEA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Maven**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Create from archetype** option and choose **maven-archetype-quickstart:1.1**:![How
    to do it...](img/6124OS_2_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Specify the values required to create the project:![How to do it...](img/6124OS_2_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the values for the project:![How to do it...](img/6124OS_2_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are done! A new Maven project is created in IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IntelliJ IDEA has first-class support for Maven. It can create a new Maven project
    as per archetype by downloading the required plugins and dependencies from the
    repository. It uses the configured Maven settings, which can be customized as
    specified in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can customize Maven in IntelliJ IDEA by opening the Maven settings as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Navigate to **Configure** | **Settings**:![There's more...](img/6124OS_2_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Maven** on the left panel:![There's more...](img/6124OS_2_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Override** to change the values as you desire.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change a few of the default options such as **Work offline** or **Output level:**,
    as shown in the preceding screenshot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing an existing Maven project in IntelliJ IDEA
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While we can use IntelliJ IDEA to create a new project, in most cases you will
    already have an existing project in your filesystem. In the latter scenario, you
    will want to import this project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As IntelliJ IDEA needs a Java environment to run, let us first ensure that
    the Java environment is set up on our system:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure that JDK is installed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download IntelliJ IDEA by visiting [https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)
    and clicking on the **Download** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the project SDK is set to your Java installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import an existing Maven project in IntelliJ IDEA, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Start IntelliJ IDEA.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Import Project**. Browse for the simple project that we created earlier:![How
    to do it...](img/6124OS_2_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make changes if required. The changes can be made as shown in the following
    screenshot:![How to do it...](img/6124OS_2_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the project to be imported:![How to do it...](img/6124OS_2_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are done! The existing Maven project is now imported to IntelliJ IDEA.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IntelliJ IDEA has first-class support for Maven. It can parse pom files to determine
    the project structure and dependencies, and lay them out in the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the project is opened in IntelliJ IDEA, the following folders and files
    get created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/6124OS_2_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All Maven-related operations can be conducted from the IDE by opening the **Maven
    Projects** tab in IntelliJ IDEA:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/6124OS_2_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can choose **Lifecycle** and click on the phase to be run. For instance,
    in the preceding screenshot, we run the **package** phase of the **Lifecycle**.
  prefs: []
  type: TYPE_NORMAL
