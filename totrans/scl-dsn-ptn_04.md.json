["```java\ncase class Person(name: String)\n```", "```java\ntrait Adder {\n  def sum[T](a: T, b: T)(implicit numeric: Numeric[T]): T = \n   numeric.plus(a, b)\n}\n```", "```java\nclass Container[T](data: T) {\n  def compare(other: T) = data.equals(other)\n}\n```", "```java\nobject GenericsExamples extends Adder {\n  def main(args: Array[String]): Unit = {\n    System.out.println(s\"1 + 3 = ${sum(1, 3)}\")\n    System.out.println(s\"1.2 + 6.7 = ${sum(1.2, 6.7)}\")\n    // System.out.println(s\"abc + cde = ${sum(\"abc\", \"cde\")}\") // compilation fails\n\n    val intContainer = new Container(10)\n    System.out.println(s\"Comparing with int: ${intContainer.compare(11)}\")\n\n    val stringContainer = new Container(\"some text\")\n    System.out.println(s\"Comparing with string:\n     ${stringContainer.compare(\"some text\")}\")\n  }\n}\n```", "```java\n1 + 3 = 4\n1.2 + 6.7 = 7.9\nComparing with int: false\nComparing with string: true\n```", "```java\ntrait ContainerAT {\n  type T\n  val data: T\n\n  def compare(other: T) = data.equals(other)\n}\n```", "```java\nclass StringContainer(val data: String) extends ContainerAT {\n  override type T = String\n}\n```", "```java\nobject AbstractTypesExamples {\n  def main(args: Array[String]): Unit = {\n    val stringContainer = new StringContainer(\"some text\")\n    System.out.println(s\"Comparing with string:\n     ${stringContainer.compare(\"some text\")}\")\n  }\n}\n```", "```java\nComparing with string: true\n```", "```java\nabstract class PrintData\nabstract class PrintMaterial\nabstract class PrintMedia\ntrait Printer {\n  type Data <: PrintData\n  type Material <: PrintMaterial\n  type Media <: PrintMedia\n  def print(data: Data, material: Material, media: Media) =\n   s\"Printing $data with $material material on $media media.\"\n}\n```", "```java\ncase class Paper() extends PrintMedia\ncase class Air() extends PrintMedia\ncase class Text() extends PrintData\ncase class Model() extends PrintData\ncase class Toner() extends PrintMaterial\ncase class Plastic() extends PrintMaterial\n```", "```java\nclass LaserPrinter extends Printer {\n  type Media = Paper\n  type Data = Text\n  type Material = Toner\n}\n\nclass ThreeDPrinter extends Printer {\n  type Media = Air\n  type Data = Model\n  type Material = Plastic\n}\n```", "```java\nobject PrinterExample {\n  def main(args: Array[String]): Unit = {\n    val laser = new LaserPrinter\n    val threeD = new ThreeDPrinter\n\n    System.out.println(laser.print(Text(), Toner(), Paper()))\n    System.out.println(threeD.print(Model(), Plastic(), Air()))\n  }\n}\n```", "```java\ntrait GenericPrinter[Data <: PrintData, Material <: PrintMaterial, Media <: PrintMedia] {\n  def print(data: Data, material: Material, media: Media) =\n    s\"Printing $data with $material material on $media media.\"\n}\n```", "```java\nclass GenericLaserPrinter[Data <: Text, Material <: Toner, Media <: Paper] extends GenericPrinter[Data, Material, Media]\nclass GenericThreeDPrinter[Data <: Model, Material <: Plastic, Media <: Air] extends GenericPrinter[Data, Material, Media]\n```", "```java\nval genericLaser = new GenericLaserPrinter[Text, Toner, Paper]\nval genericThreeD = new GenericThreeDPrinter[Model, Plastic, Air]\nSystem.out.println(genericLaser.print(Text(), Toner(), Paper()))\nSystem.out.println(genericThreeD.print(Model(), Plastic(), Air()))\n```", "```java\nclass GenericPrinterImpl[Data <: PrintData, Material <: PrintMaterial, Media <: PrintMedia] extends GenericPrinter[Data, Material, Media]\n```", "```java\nval wrongPrinter = new GenericPrinterImpl[Model, Toner, Air]\nSystem.out.println(wrongPrinter.print(Model(), Toner(), Air()))\n```", "```java\nabstract class Item {\n  def pack: String\n}\n\nclass Fruit extends Item {\n  override def pack: String = \"I'm a fruit and I'm packed in a bag.\"\n}\n\nclass Drink extends Item {\n  override def pack: String = \"I'm a drink and I'm packed in a bottle.\"\n}\n```", "```java\nobject SubtypePolymorphismExample {\n  def main(args: Array[String]): Unit = {\n    val shoppingBasket: List[Item] = List(\n      new Fruit,\n      new Drink\n    )\n    shoppingBasket.foreach(i => System.out.println(i.pack))\n  }\n}\n```", "```java\nI'm a fruit and I'm packed in a bag.\nI'm a drink and I'm packed in a bottle.\n```", "```java\ntrait Adder[T] {\n  def sum(a: T, b: T): T\n}\n```", "```java\nobject Adder {\n  def sum[T: Adder](a: T, b: T): T = implicitly[Adder[T]].sum(a, b)\n}\n```", "```java\nobject AdhocPolymorphismExample {\n  import Adder._\n  def main(args: Array[String]): Unit = {\n    System.out.println(s\"The sum of 1 + 2 is ${sum(1, 2)}\")\n    System.out.println(s\"The sum of abc + def is ${sum(\"abc\", \"def\")}\")\n  }\n}\n```", "```java\nError:(15, 51) could not find implicit value for evidence parameter of type com.ivan.nikolov.polymorphism.Adder[Int]\n  System.out.println(s\"The sum of 1 + 2 is ${sum(1, 2)}\")\n                                                 ^\n\nError:(16, 55) could not find implicit value for evidence parameter of type com.ivan.nikolov.polymorphism.Adder[String]\n  System.out.println(s\"The sum of abc + def is ${sum(\"abc\", \"def\")}\")\n                                                      ^\n```", "```java\nobject Adder {\n  def sum[T: Adder](a: T, b: T): T = implicitly[Adder[T]].sum(a, b)\n\n  implicit val int2Adder: Adder[Int] = new Adder[Int] {\n    override def sum(a: Int, b: Int): Int = a + b\n  }\n\n  // same implementation as above, but allowed when the trait has a single method\n  implicit val string2Adder: Adder[String] =\n    (a: String, b: String) => s\"$a concatenated with $b\"\n}\n```", "```java\nThe sum of 1 + 2 is 3\nThe sum of abc + def is abc concatenated with def\n```", "```java\nimplicit def numeric2Adder[T : Numeric]: Adder[T] = new Adder[T] {\n  override def sum(a: T, b: T): T = implicitly[Numeric[T]].plus(a, b)\n}\n```", "```java\nSystem.out.println(s\"The sum of 1.2 + 6.5 is ${sum(1.2, 6.5)}\")\n```", "```java\ntrait Persister[T] {\n  def persist(data: T)\n}\n```", "```java\nimport scala.collection.mutable\n\ntrait Database[T] {\n  def save(data: T)\n}\n\ntrait MemoryDatabase[T] extends Database[T] {\n  val db: mutable.MutableList[T] = mutable.MutableList.empty\n\n  override def save(data: T): Unit = {\n    System.out.println(\"Saving to in memory database.\")\n    db.+=:(data)\n  }\n}\n\ntrait FileDatabase[T] extends Database[T] {\n  override def save(data: T): Unit = {\n    System.out.println(\"Saving to file.\")\n  }\n}\n```", "```java\ntrait Persister[T] {\n  this: Database[T] =>\n  def persist(data: T): Unit = {\n    System.out.println(\"Calling persist.\")\n    save(data)\n  }\n}\n```", "```java\nclass FilePersister[T] extends Persister[T] with FileDatabase[T]\nclass MemoryPersister[T] extends Persister[T] with MemoryDatabase[T]\n```", "```java\nobject PersisterExample {\n  def main(args: Array[String]): Unit = {\n    val fileStringPersister = new FilePersister[String]\n    val memoryIntPersister = new MemoryPersister[Int]\n\n    fileStringPersister.persist(\"Something\")\n    fileStringPersister.persist(\"Something else\")\n\n    memoryIntPersister.persist(100)\n    memoryIntPersister.persist(123)\n  }\n}\n```", "```java\nCalling persist.\nSaving to file.\nCalling persist.\nSaving to file.\nCalling persist.\nSaving to in memory database.\nCalling persist.\nSaving to in memory database.\n```", "```java\ntrait History {\n  def add(): Unit = {\n    System.out.println(\"Action added to history.\")\n  }\n}\n```", "```java\ntrait Persister[T] {\n  this: Database[T] with History =>\n  def persist(data: T): Unit = {\n    System.out.println(\"Calling persist.\")\n    save(data)\n    add()\n  }\n}\n```", "```java\nclass FilePersister[T] extends Persister[T] with FileDatabase[T] with History\nclass MemoryPersister[T] extends Persister[T] with MemoryDatabase[T] with History\n```", "```java\nCalling persist.\nSaving to file.\nAction added to history.\nCalling persist.\nSaving to file.\nAction added to history.\nCalling persist.\nSaving to in memory database.\nAction added to history.\nCalling persist.\nSaving to in memory database.\nAction added to history.\n```", "```java\ntrait Mystery {\n  def add(): Unit = {\n    System.out.println(\"Mystery added!\")\n  }\n}\n```", "```java\ntrait Persister[T] {\n  this: Database[T] with History with Mystery =>\n  def persist(data: T): Unit = {\n    System.out.println(\"Calling persist.\")\n    save(data)\n    add()\n  }\n}\n```", "```java\nclass FilePersister[T] extends Persister[T] with FileDatabase[T] with History with Mystery\nclass MemoryPersister[T] extends Persister[T] with MemoryDatabase[T] with History with Mystery\n```", "```java\nError:(47, 7) class FilePersister inherits conflicting members:\n  method add in trait History of type ()Unit and\n  method add in trait Mystery of type ()Unit\n(Note: this can be resolved by declaring an override in class FilePersister.)\nclass FilePersister[T] extends Persister[T] with FileDatabase[T] with History with Mystery\n      ^\n\nError:(48, 7) class MemoryPersister inherits conflicting members:\n  method add in trait History of type ()Unit and\n  method add in trait Mystery of type ()Unit\n(Note: this can be resolved by declaring an override in class MemoryPersister.)\nclass MemoryPersister[T] extends Persister[T] with MemoryDatabase[T] with History with Mystery\n      ^\n```", "```java\nclass FilePersister[T] extends Persister[T] with FileDatabase[T] with History with Mystery {\n  override def add(): Unit ={\n    super[History].add()\n  }\n}\n\nclass MemoryPersister[T] extends Persister[T] with MemoryDatabase[T] with History with Mystery {\n  override def add(): Unit ={\n    super[Mystery].add()\n  }\n}\n```", "```java\nCalling persist.\nSaving to file.\nAction added to history.\nCalling persist.\nSaving to file.\nAction added to history.\nCalling persist.\nSaving to in memory database.\nMystery added!\nCalling persist.\nSaving to in memory database.\nMystery added!\n```", "```java\ntrait DB {\n  def connect(): Unit = {\n    System.out.println(\"Connected.\")\n  }\n\n  def dropDatabase(): Unit = {\n    System.out.println(\"Dropping!\")\n  }\n\n  def close(): Unit = {\n    System.out.println(\"Closed.\")\n  }\n}\n\ntrait UserDB extends DB {\n  def createUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Creating a user: $username\")\n    } finally {\n      close()\n    }\n  }\n\n  def getUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Getting a user: $username\")\n    } finally {\n      close()\n    }\n  }\n}\n\ntrait UserService extends UserDB {\n  def bad(): Unit = {\n    dropDatabase()\n  }\n}\n```", "```java\ntrait UserDB {\n  this: DB =>\n\n  def createUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Creating a user: $username\")\n    } finally {\n      close()\n    }\n  }\n\n  def getUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Getting a user: $username\")\n    } finally {\n      close()\n    }\n  }\n}\n\ntrait UserService {\n  this: UserDB =>\n\n  // does not compile\n  // def bad(): Unit = {\n  // dropDatabase()\n  //}\n}\n```"]