["```java\nabstract class Node {\n    // Executes the operation encoded by this\n    // node and returns the result.\n    public abstract Object execute(Frame f);\n    // Link to the parent node and utility to\n    // replace a node in the AST.\n    private Node parent;\n    protected void replace(Node newNode);\n}\n```", "```java\nc = a + b\n```", "```java\n@Specialization protected long executeAddInt (int left, int right) {\n    return left + right;\n}\n@Specialization String executeAddFloat (Float left, Float right) {\n    return left + right;\n}\n@Specialization String executeAddString (String left, String right) {\n    return left + right;\n}\n```", "```java\n@Fallback protected void typeError (Object left, Object right) {\n    throw new TypeException(\"type error: args must be two     integers or floats or two\", this);\n}\n```", "```java\n    @Specialization(guards = {\"!isInteger(operand)\",    \"!isFloat(operand)\"})\n    protected final int executeTheMethod(final Object operand) {\n      //....code to execute if the expression is true\n    }\n    ```", "```java\n    @Specialization(rewriteOn = ArithmeticException.class)\n     int executeNoOverflow(int a, int b) {\n        return Math.addExact(a, b);\n     }\n     @Specialization\n     long executeWithOverflow(int a, int b) {\n        return a + b;\n     }\n    ```", "```java\npublic interface Frame {\n    FrameDescriptor getFrameDescriptor();\n    Object[] getArguments();\n    boolean isType(FrameSlot slot);\n    Type getType(FrameSlot slot) throws             FrameSlotTypeException;\n    void setType(FrameSlot slot, Type value);\n    Object getValue(FrameSlot slot);\n    MaterializedFrame materialize();\n}\n```"]