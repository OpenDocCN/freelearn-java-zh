["```java\n{\n  \"timestamp\": \"2024-10-23T10:20:30Z\",\n  \"level\": \"ERROR\",\n  \"service\": \"user-service\",\n  \"correlationId\": \"abc123\",\n  \"message\": \"Database connection timed out\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T11:15:30Z\",\n  \"level\": \"WARN\",\n  \"service\": \"auth-service\",\n  \"message\": \"Failed login attempt for user john.doe@example.com\",\n  \"error\": \"AuthenticationException\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T11:20:30Z\",\n  \"level\": \"ERROR\",\n  \"service\": \"user-service\",\n  \"message\": \"Failed to connect to database\",\n  \"error\": \"TimeoutException\" } \n```", "```java\nUser john.doe@example.com failed to log in \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T12:00:00Z\",\n  \"level\": \"WARN\",\n  \"service\": \"auth-service\",\n  \"user\": \"john.doe@example.com\",\n  \"event\": \"login-failure\",\n  \"reason\": \"incorrect-password\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T12:05:00Z\",\n  \"level\": \"ERROR\",\n  \"message\": \"Login failed for user john.doe@example.com with password 'secretpassword'\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T12:05:00Z\",\n  \"level\": \"ERROR\",\n  \"message\": \"Login failed for user john.doe@example.com\"\n} \n```", "```java\nimport com.fasterxml.jackson.annotation.JsonIgnore;\npublic class User {\n         private String username;\n    private String email;\n         @JsonIgnore  // This will prevent the password from being\n                     //serialized or deserialized into JSON\n    private String password;\n    // Constructors, getters, setters omitted for brevity\n} \n```", "```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\npublic class UserService {\n    private static final Logger logger = LoggerFactory.getLogger(\n        UserService.class);\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n    public void logUserDetails(User user) {\n        try {\n            String userJson = objectMapper.writeValueAsString(user);\n            logger.info(\"User details: {}\", userJson);\n        } catch (Exception e) {\n            logger.error(\"Error serializing user details\", e);\n        }\n    }\n} \n```", "```java\n{  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\" } \n```", "```java\nimport com.fasterxml.jackson.annotation.JsonProperty;\nimport com.fasterxml.jackson.annotation.JsonProperty.Access;\npublic class User {\n    private String username;\n    private String email;\n         @JsonProperty(access = Access.WRITE_ONLY)  // Allows input but   \n                                       //prevents serialization into JSON\n    private String password;\n    // Constructors, getters, setters omitted for brevity\n} \n```", "```java\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n@RestController\n@RequestMapping(\"/users\")\npublic class UserController {\n    private static final Logger logger = LoggerFactory.getLogger(\n        UserController.class);\n    private static final ObjectMapper objectMapper = new ObjectMapper();\n    @PostMapping(\"/register\")\n    public String registerUser(@RequestBody User user) {\n        // Log user details without exposing password\n        try {\n            String userJson = objectMapper.writeValueAsString(user);\n            logger.info(\"Received user registration request: {}\",\n                         userJson);\n        } catch (Exception e) {\n            logger.error(\"Error serializing user details\", e);\n        }\n                 // Proceed with user registration logic\n        return \"User registered successfully!\";\n    }\n} \n```", "```java\n{\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\",\n  \"password\": \"mysecretpassword\"\n} \n```", "```java\n{\n  \"username\": \"john.doe\",\n  \"email\": \"john.doe@example.com\"\n} \n```", "```java\n{   \"timestamp\": \"2024-10-23T12:10:00Z\",\n  \"level\": \"INFO\",   \"service\": \"user-service\",\n  \"method\": \"GET\",\n  \"endpoint\": \"/api/v1/users/123\",\n  \"status\": 200 } \n```", "```java\n@Service\npublic class UserService {\n    // Initialize the logger\n    private static final Logger logger = LoggerFactory.getLogger(\n        UserService.class);\n    public void createUser(String username) {\n        logger.info(\"Creating a new user with username: {}\", username);\n        try {\n            // Simulate some business logic\n            if (username == null) {\n                throw new IllegalArgumentException(\n                    \"Username cannot be null\");\n            }\n            // Simulate a successful operation\n            logger.info(\"User {} created successfully\", username);\n        } catch (Exception e) {\n            // Log the exception as an error\n            logger.error(\"Error creating user: {}\", e.getMessage(), e);\n        }\n    }\n} \n```", "```java\n2024-10-23T12:00:00.123 INFO  [UserService] Creating a new user with username: john_doe\n2024-10-23T12:00:00.456 INFO  [UserService] User john_doe created successfully \n```", "```java\n2024-10-23T12:01:00.123 INFO  [UserService] Creating a new user with username: null\n2024-10-23T12:01:00.125 ERROR [UserService] Error creating user: Username cannot be null\njava.lang.IllegalArgumentException: Username cannot be null\n    at com.example.service.UserService.createUser(UserService.java:12)... \n```", "```java\n@Component\npublic class RequestLoggingFilter extends OncePerRequestFilter {\n    private static final Logger logger = LoggerFactory.getLogger(\n        RequestLoggingFilter.class);\n    public static final String X_CORRELATION_ID_HEADER =\n        \"X-Correlation-Id\";\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n        HttpServletResponse response, FilterChain filterChain)\n            throws ServletException, IOException {\n        // Generate or retrieve a unique correlation ID\n        String correlationId = request.getHeader(X_CORRELATION_ID_HEADER);\n        if (correlationId == null) {\n            correlationId = UUID.randomUUID().toString();\n        }\n        MDC.put(\"correlationId\", correlationId);\n        // Capture the request start time\n        long startTime = System.currentTimeMillis();\n        try {\n            // Proceed with the request\n            filterChain.doFilter(request, response);\n        } finally {\n            // Capture the request end time\n            long duration = System.currentTimeMillis() - startTime;\n            // Log the structured request information\n            logRequestDetails(request, response, duration);\n            // Clean up MDC after the request\n            MDC.clear();\n        }\n    }\n    private void logRequestDetails(HttpServletRequest request,\n        HttpServletResponse response, long duration) {\n        // Extracting useful metadata for structured logging\n        String httpMethod = request.getMethod();\n        String requestUri = request.getRequestURI();\n        String queryString = request.getQueryString() !=\n            null ? \"?\" + request.getQueryString() : \"\";\n        String correlationId = MDC.get(\"correlationId\");\n        int statusCode = response.getStatus();\n        // Structured JSON log example\n        try {\n            String logEntryJson = new ObjectMapper().writeValueAsString(\n                    createLogEntry(correlationId, httpMethod,\n                    requestUri + queryString, statusCode, duration)\n            );\n            logger.info(logEntryJson);\n        } catch (JsonProcessingException e) {\n            logger.error(\"Failed to convert log entry to JSON\", e);\n        }\n    }\n    private Map<String, Object> createLogEntry(\n        String correlationId, String method, String url, int status,\n        long duration) {\n        Map<String, Object> logEntry = new HashMap<>();\n        logEntry.put(\"timestamp\", Instant.now().toString());\n        logEntry.put(\"level\", \"INFO\");\n        logEntry.put(\"correlationId\", correlationId);\n        logEntry.put(\"method\", method);\n        logEntry.put(\"url\", url);\n        logEntry.put(\"status\", status);\n        logEntry.put(\"duration\", duration + \"ms\");\n        return logEntry;\n    }\n} \n```", "```java\n{\n    \"duration\": \"157ms\",\n    \"method\": \"POST\",\n    \"level\": \"INFO\",\n    \"correlationId\": \"71ef4140-f3a6-488f-ba30-b2a31ac507df\",\n    \"url\": \"/orders\",\n    \"timestamp\": \"2024-12-09T18:08:00.719019511Z\",\n    \"status\": 201\n} \n```", "```java\n@Component\npublic class ProductsApiBeanPostProcessor implements BeanPostProcessor {\n    @Override\n    public Object postProcessBeforeInitialization(Object bean,\n        String beanName) throws BeansException {\n        if (bean instanceof ProductsApi) {\n            ProductsApi productsApi = (ProductsApi) bean;\n            ApiClient apiClient = productsApi.getApiClient();\n            String correlationId = MDC.get(\"correlationId\");\n            if (correlationId != null) {\n                apiClient.addDefaultHeader(\"X-Correlation-Id\",\n                    correlationId);\n            }\n            productsApi.setApiClient(apiClient);\n        }\n        return bean;\n    }\n} \n```", "```java\n@Service\npublic class ProductsQueryUseCaseImpl implements ProductsQueryUseCase {\n    Logger logger = LoggerFactory.getLogger(\n        ProductsQueryUseCaseImpl.class);\n    private final ProductsApi productsApi;\n    private final ProductsApiBeanPostProcessor beanPostProcessor;\n    public ProductsQueryUseCaseImpl(ProductsApi productsApi,\n        ProductsApiBeanPostProcessor beanPostProcessor) {\n        this.productsApi = productsApi;\n        this.beanPostProcessor = beanPostProcessor;\n    }\n    @Override\n    public ProductDetails getProductById(String productId) {\n        try {\n            beanPostProcessor.postProcessBeforeInitialization(productsApi,\n                \"productsApi\");\n            ProductOutputDto product = productsApi.getProductById(\n                productId);\n            return new ProductDetails(product.getSku(),\n                product.getPrice());\n        } catch (Exception ex) {\n            logger.error(\"Error getting product with id {}\", productId,\n                          ex);\n            throw new EntityNotFoundException(\n                \"Product not found with id \" + productId);\n        }\n    }\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T13:00:00Z\",\n  \"traceId\": \"b8e3fbe5cd34fbe5\",\n  \"spanId\": \"af18fbe5cd34ab23\",\n  \"level\": \"INFO\",\n  \"service\": \"user-service\",\n  \"message\": \"Created new user with ID 123\"\n} \n```", "```java\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-observation</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-tracing-bridge-brave</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency> \n```", "```java\nmanagement:\n  tracing:\n    enabled: true\n    sampling:\n      probability: 1.0 # Enables 100% sampling of traces\n    zipkin:\n      enabled: true\n      endpoint: http://localhost:9411/api/v2/spans\nlogging:\n  pattern:\n    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]' \n```", "```java\n@Configuration\npublic class ProductsApiConfiguration {\n    @Bean\n    public ProductsApi getProductsApi(ApiClient apiClient) {\n        return new ProductsApi(apiClient);\n    }\n    @Bean\n    public ApiClient getApiClient(RestClient restClient) {\n        return new ApiClient(restClient);\n    }\n    @Bean\n    public RestClient getRestClient(\n        ObservationRegistry observationRegistry,   \n        RestClientBuilderConfigurer configurer) {\n        return configurer.configure(RestClient.builder())\n                .requestFactory(customClientHttpRequestFactory())\n                .observationRegistry(observationRegistry)\n                .build();\n    }\n    private ClientHttpRequestFactory customClientHttpRequestFactory() {\n        Duration duration = Duration.ofSeconds(6);\n        ClientHttpRequestFactorySettings settings = ClientHttpRequestFactorySettings.DEFAULTS\n                .withConnectTimeout(duration)\n                .withReadTimeout(duration);\n        return ClientHttpRequestFactories.get(settings);\n    }\n    @Bean\n    public SpanHandler logSpanHandler(){\n        return new LogSpanHandler();\n    }\n    static final class LogSpanHandler extends SpanHandler {\n        final Logger logger = Logger.getLogger(\n            ProductsApiConfiguration.class.getName());\n        LogSpanHandler() {\n        }\n        public boolean end(TraceContext context, MutableSpan span,\n            SpanHandler.Cause cause) {\n            if (!this.logger.isLoggable(Level.INFO)) {\n                return false;\n            } else {\n                this.logger.info(span.toString());\n                return true;\n            }\n        }\n        public String toString() {\n            return \"LogSpanHandler{name=\" + this.logger.getName() + \"}\";\n        }\n    }\n} \n```", "```java\n2025-03-19T16:45:39.207-03:00  INFO [order-management-api,67db1edfd85f42d21368a69936519fd1,1368a69936519fd1] 24477 --- [order-management-api] [nio-8090-exec-1] [67db1edfd85f42d21368a69936519fd1-1368a69936519fd1] c.p.o.a.o.rest.ProductsQueryUseCaseImpl  : Getting product with id AA00001 \n```", "```java\n2025-03-19T16:33:01.897-03:00  INFO [order-management-api,67db1beb2f77ede88c04d7187d10b32c,8c04d7187d10b32c] 22620 --- [order-management-api] [nio-8090-exec-1] [67db1beb2f77ede88c04d7187d10b32c-8c04d7187d10b32c] c.p.o.a.o.rest.ProductsApiConfiguration  :\n{\n    \"traceId\": \"67db1beb2f77ede88c04d7187d10b32c\",\n    \"parentId\": \"8c04d7187d10b32c\",\n    \"id\": \"b362a6315dcb8bd9\",\n    \"kind\": \"CLIENT\",\n    \"name\": \"http get\",\n    \"timestamp\": 1742412781886860,\n    \"duration\": 9204,\n    \"localEndpoint\": {\n        \"serviceName\": \"order-management-api\",\n        \"ipv4\": \"192.168.96.1\"\n    },\n    \"tags\": {\n        \"application\": \"order-management-api\",\n        \"client.name\": \"localhost\",\n        \"exception\": \"none\",\n        \"http.url\": \"http://localhost:8080/api/products/AA00001\",\n        \"method\": \"GET\",\n        \"outcome\": \"SUCCESS\",\n        \"status\": \"200\",\n        \"uri\": \"/api/products/{productId}\"\n    }\n} \n```", "```java\n0ms        15ms         40ms           70ms\n|-----------|------------|--------------|\n| API       | User       | Notification |\n| Gateway   | Service    | Service      |\n| register_ | create_    | send_        |\n| user      | user       | email        | \n```", "```java\n +------------------------+\n           |     API Gateway        |\n           | traceId: A, spanId: 1  |\n           +------------------------+\n                      |\n                      | parentSpanId: -\n                      |\n           +----------v-------------+\n           |      User Service      |\n           | traceId: A, spanId: 2  |\n           | parentSpanId: 1        |\n           +------------------------+\n                      |\n                      | parentSpanId: 2\n                      |\n           +----------v-------------+\n           | Notification Service   |\n           | traceId: A, spanId: 3  |\n           | parentSpanId: 2        |\n           +------------------------+ \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T10:00:00Z\",\n  \"level\": \"INFO\",\n  \"service\": \"API Gateway\",\n  \"traceId\": \"A\",\n  \"spanId\": \"1\",\n  \"parentSpanId\": null,\n  \"message\": \"Received request for user registration\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T10:00:05Z\",\n  \"level\": \"INFO\",\n  \"service\": \"User Service\",\n  \"traceId\": \"A\",\n  \"spanId\": \"2\",\n  \"parentSpanId\": \"1\",\n  \"message\": \"Processing user registration\"\n} \n```", "```java\n{\n  \"timestamp\": \"2024-10-23T10:00:10Z\",\n  \"level\": \"INFO\",\n  \"service\": \"Notification Service\",\n  \"traceId\": \"A\",\n  \"spanId\": \"3\",\n  \"parentSpanId\": \"2\",\n  \"message\": \"Sending welcome email\"\n} \n```", "```java\nservices:\n  zipkin:\n    image: ghcr.io/openzipkin/zipkin-slim:${TAG:-latest}\n    container_name: zipkin\n    environment:\n      - STORAGE_TYPE=mem\n      - MYSQL_HOST=mysql\n    ports:\n      - 9411:9411 \n```", "```java\ndocker compose up \n```", "```java\nimport io.micrometer.tracing.Tracer;\nimport io.micrometer.tracing.Span;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class UserService {\n    @Autowired\n    private Tracer tracer;\n    public void createUser(String userId) {\n        Span newUserSpan = tracer.nextSpan().name(\"createUser\").start();\n        try (Tracer.SpanInScope ws = tracer.withSpan(newUserSpan.start())) {\n            // Business logic for creating a user\n            // Simulate a process that takes time, e.g., a database call\n            Thread.sleep(1000);\n            System.out.println(\"User created with ID: \" + userId);\n        } catch (Exception e) {\n            newUserSpan.error(e);\n        } finally {\n            newUserSpan.end();\n        }\n    }\n} \n```", "```java\nmanagement.metrics.web.server.request.autotime.enabled=true \n```", "```java\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.opentelemetry.instrumentation</groupId>\n            <artifactId>opentelemetry-instrumentation-bom</artifactId>\n            <version>2.14.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement> \n```", "```java\n<dependency>\n    <groupId>io.micrometer</groupId>\n    <artifactId>micrometer-tracing-bridge-otel</artifactId>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-actuator</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-boot-starter</artifactId>\n</dependency>\n<dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-otlp</artifactId>\n</dependency> \n```", "```java\n        tracing:\n          url: http://localhost:4318/v1/traces \n        ```", "```java\n        otel:\n          logs:\n            exporter: none\n          metrics:\n            exporter: none \n        ```", "```java\n        management:\n          endpoints:\n            web:\n              exposure:\n                exclude: \"*\"\n          tracing:\n            enabled: true\n            sampling:\n              probability: 1.0 \n        ```", "```java\n        logging:\n          pattern:\n            level: '%5p [${spring.application.name:},%X{trace_id:-},%X{span_id:-}]' \n        ```", "```java\nimport io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\npublic class OtlpConfiguration {\n    @Bean\n    OtlpHttpSpanExporter otlpHttpSpanExporter(@Value(\n        \"${tracing.url}\") String url) {\n        return OtlpHttpSpanExporter.builder()\n            .setEndpoint(url)\n            .build();\n    }\n} \n```", "```java\n2025-04-01T19:10:56.485-03:00  INFO [order-management-api,e809af87a330f1ab03ccfa395e5d5864,d01a9ecf8f4e570b] 10441 --- [order-management-api] [io-8090-exec-10] [                                                 ] c.p.o.a.o.rest.ProductsQueryUseCaseImpl  : Getting product with id AA00001 \n```", "```java\n2025-04-01T19:10:56.488-03:00  INFO [product-api,e809af87a330f1ab03ccfa395e5d5864,38cb8ed93e944e69] 10609 --- [product-api] [io-8080-exec-10] [                                                 ] c.p.p.a.o.d.ProductsQueryUseCaseImpl     : Getting product by id: AA00001 \n```", "```java\nservices:\n  jaeger:\n    image: jaegertracing/jaeger:${JAEGER_VERSION:-latest}\n    container_name: jaeger\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    ports:\n      - 4318:4318\n      - 16686:16686 \n```", "```java\ndocker compose up \n```", "```java\nimport io.opentelemetry.api.trace.Span;\nimport io.opentelemetry.api.trace.Tracer;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n@Service\npublic class UserService {\n    @Autowired\n    private Tracer tracer;\n    public void registerUser(String username) {\n        Span span = tracer.spanBuilder(\"UserService.registerUser\")\n                .setAttribute(\"username\", username)\n                .startSpan();\n        try {\n            // Simulate registration logic\n            Thread.sleep(100);\n            System.out.println(\"User registered: \" + username);\n        } catch (InterruptedException e) {\n            span.recordException(e);\n        } finally {\n            span.end();\n        }\n    }\n} \n```"]