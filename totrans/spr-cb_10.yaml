- en: Chapter 10. Connecting to Facebook and Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Facebook app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a test Facebook app and test users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a Facebook user's profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the list of friends of a Facebook user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a Facebook status update
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a link to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a custom object to Facebook
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Twitter application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving a user's Twitter profile
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving the tweets of a Twitter user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Posting a tweet to Twitter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending a private message to another Twitter user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will make a Spring web application access Facebook and
    Twitter accounts in order to:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieve user data, such as name, e-mail, tweets, posts, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create user data, such as a tweet, Facebook post, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For that, we will use Spring Social, which simplifies interacting with social
    networks from a Spring web application; it helps with the OAuth workflows and
    executes the proper REST requests behind the scenes for us.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Facebook app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web application can access a Facebook account only through a Facebook app.
    In this recipe, we will open a Facebook developer account and create a Facebook
    app. We will obtain an **App ID** and **App secret**, which are the two strings
    that our web application will use to connect to Facebook in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to your Facebook account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to open a Facebook developer account and create a Facebook
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://developers.facebook.com/](https://developers.facebook.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the top navigation, in **My Apps**, select **Register as a Developer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you're registered, in the top menu, under **Apps**, select **Add a New
    App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Website**.![How to do it…](img/5807OS_10_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Skip and Create App ID** in the top-right corner of the window:![How
    to do it…](img/5807OS_10_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form and click on **Create App ID**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the **App ID** and **App Secret** displayed on the app page.![How to do
    it…](img/5807OS_10_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a test Facebook app and test users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work with actual Facebook users, a Facebook app needs to go through an approval
    process; you have to submit some screenshots, a logo, description, and privacy
    policy. To just test your web application, skip the approval process by using
    a **Test App** with **Test Users**. Facebook provides a convenient interface to
    create them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an existing Facebook app. Refer to the previous *Creating a Facebook
    app* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to create a test app and test users:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://developers.facebook.com/apps](https://developers.facebook.com/apps).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your existing app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left side of the navigation menu, select **Test Apps**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Create a Test App** green button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a name for your test app and create the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The test app's **App ID** and **App Secret** are displayed. They are different
    from the original app. Use them in your Spring web application to use the test
    app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the left side of the navigation menu, select **Roles**. Choose the **Test
    Users** tab and click on the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **4 users**. Leave the other options to their default value and click
    on **Create Test Users**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose one of the created users, click on the **Edit** button, and choose **Change
    the name or password for this user**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose a password for the user and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click again on the **Edit** button of the same test user and select **Manage
    this test user's friends**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the names of a few other test users and click on **Save**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We defined a password for one user, so we'll be able to log in as this user
    and authorize our web application in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: We also added friends to that user, so we'll be able to test the *Retrieving
    the list of friends of a Facebook user* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Facebook allows access to a user account through an **OAuth workflow**; from
    our web application, the user is redirected to a Facebook page to authorize our
    Facebook app to access his/her account. The user is then redirected back to our
    web application. In this recipe, we'll implement this OAuth workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an existing Facebook app. Refer to the *Creating a Facebook app* and
    *Creating a test Facebook app and test users* recipes.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a JSP so make sure that the Maven dependency for JSTL is declared
    in your `pom.xml` file and the corresponding `ViewResolver` bean is declared in
    your Spring configuration class. For more details, refer to the *Using a JSP view*
    recipe in the [Chapter 3](ch03.html "Chapter 3. Using Controllers and Views"),
    *Using Controllers and Views*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to implement the Facebook OAuth workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies for Spring Social and Spring Social Facebook in
    `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Facebook login method containing the **App ID** and **App Secret**,
    which will redirect the user to a Facebook authorization page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `callback` method for the callback URL, where the user will be redirected
    after logging in to Facebook. Using the authorization code parameter received
    from Facebook, get an access token and save it in the session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method to display a JSP if the connection to Facebook using the access
    token in the session is successful. Otherwise, it will redirect the user to the
    login URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JSP for the previous method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To test whether it's working, log out of your Facebook account and go to `/fb`.
    You will be redirected to Facebook. Log in, authorize the app, and you will be
    redirected back to the web application. Remember to use the login credentials
    of a test user if you are using a test app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `login()` method builds a Facebook authorization URL with the **App ID**
    (`https://www.facebook.com/login.php?api_key=759801647423672&redirect_uri=...`)
    and redirects the user to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the user has authorized the app, he/she is redirected back to our web
    application to a callback URL, `/fb/callback`, which we provided in the `login()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The callback URL contains a `code` parameter provided by Facebook.
  prefs: []
  type: TYPE_NORMAL
- en: In the `callback()` method, we will use that authorization code to get an OAuth
    access token that we will store in the session. This is part of the standard OAuth
    workflow; the access token is not provided directly in the callback URL, so it's
    never shown to the user. On our server, the **App Secret** (also never shown to
    the user) is required to obtain the token from the authorization code.
  prefs: []
  type: TYPE_NORMAL
- en: We then redirect the user to `/fb`. In the `fb()` method, we retrieve the token
    from the session and use it to connect to the Facebook user's account.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a Facebook user's profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to retrieve a Facebook user's profile data,
    which automatically becomes available to the app once the user has authorized
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to retrieve the profile of a Facebook user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `FacebookController` class, add a Model argument to the `fb()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `if(facebook.isAuthorized())` block, use the Facebook object to retrieve
    the user''s profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the user profile to the JSP view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, display data from the user''s profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Behind the scenes, Spring Social sends a REST HTTP request to [www.facebook.com](http://www.facebook.com)
    and builds a `FacebookProfile` object from the response.
  prefs: []
  type: TYPE_NORMAL
- en: There's more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the full list of available fields, look directly in the `FacebookProfile`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some fields of the user profile require additional permissions to be accessible:
    for example, the e-mail, which requires the `email` permission. Refer to the next
    recipe where we will extend the scope parameter of the authorization request.
    The full list of the available permissions can be found at [https://developers.facebook.com/docs/facebook-login/permissions/v2.2](https://developers.facebook.com/docs/facebook-login/permissions/v2.2).'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving the list of friends of a Facebook user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to retrieve the friends list of a Facebook
    user from a Spring web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to retrieve the list of friends of a Facebook user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `FacebookController` class, in the `login()` method, add `user_friends`
    to the `scope` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Model` argument to the `fb()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `if(facebook.isAuthorized())` block, use the Facebook object to get
    the list of friends:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Retrieve the profile of each friend:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the list of profiles to the JSP view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, display the profiles of the friends:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We retrieved the user's friends using `getFriends()`. This gave us only their
    names, so we used `getUserProfile()` to fetch their public profile.
  prefs: []
  type: TYPE_NORMAL
- en: We added `user_friends` to the `scope` parameter, but the user can choose to
    prevent our Facebook app from accessing his/her friends list. For more information
    about permissions, go to [https://developers.facebook.com/docs/facebook-login/permissions/v2.3](https://developers.facebook.com/docs/facebook-login/permissions/v2.3).
  prefs: []
  type: TYPE_NORMAL
- en: Posting a Facebook status update
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to post a status update on a Facebook user's
    Timeline from a Spring web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to post a status update on a Facebook Timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized())` block, use the Facebook
    object to post the status update:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Posting a link to Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to post a link on a Facebook user's Timeline
    from a Spring web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to post a link on a Facebook user''s Timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized())` block, create a
    `FacebookLink` object with the link URL, title, caption, and description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the Facebook object to post the link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your browser, go to `/fb`. Then, go to the user's Facebook account and verify
    that the link has been posted.![How to do it…](img/5807OS_10_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Posting a custom object to Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, you''ll learn how to post a custom object to a Facebook user''s
    Timeline from a Spring web application. A custom object is a link with more customizable
    options: picture, privacy, and location. In this recipe, we will add a picture
    to a link.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Facebook* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to post a custom object:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `FacebookController` class, in the `login()` method, add `publish_actions`
    to the `scope` parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `fb()` method, in the `if(facebook.isAuthorized()`**)** block, create
    a `PostData` object using the Facebook object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Initialize the different fields of the custom object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the Facebook object to post the custom object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In your browser, go to `/fb`. Then, go to the user's Facebook account and verify
    that the custom object has been posted.![How to do it…](img/5807OS_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a Twitter application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A web application can access a Twitter account only through a Twitter application.
    In this recipe, we will create a Twitter application. We will obtain an **API
    key** and an **API secret**, which are two strings that our web application will
    use to connect to Twitter in the following recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Log in to your Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Go to [https://apps.twitter.com/](https://apps.twitter.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create New App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill in the form and create your application. Note that `localhost` is not a
    valid domain name for the **Callback URL** field, but an IP address works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your application page, under **Settings**, check **Allow this application
    to be used to Sign in with Twitter**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Under **Keys and Access Tokens**, copy the **API key** and **API secret** values.
    You will use them in your web application to identify your Twitter application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Connecting to Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Twitter allows access to a user account through an OAuth workflow; from our
    web application, the user is redirected to a Twitter page to authorize the Twitter
    application in order to access his/her account. The user is then redirected back
    to our web application. In this recipe, we'll implement this OAuth workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need an existing Twitter application. Refer to the *Creating a Twitter application
    recipe*.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a JSP, so make sure that the Maven dependency for JSTL is declared
    in your `pom.xml` file and the corresponding `ViewResolver` bean is declared in
    your Spring configuration class. For more details, refer to the *Using a JSP view*
    recipe in [Chapter 3](ch03.html "Chapter 3. Using Controllers and Views"), *Using
    Controllers and Views*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to implement the Twitter OAuth workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the Maven dependencies for Spring Social and Spring Social Twitter in `pom.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a controller class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a Twitter login method containing your API key and API secret, which
    will redirect to Twitter''s authorization page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `callback` method, where the user will be redirected after logging
    in to Twitter. Use the `oauth_verifier` parameter received from Twitter as well
    as the request token from `login()` to get an access token and save it in the
    session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method that will display a JSP if it manages to connect to Twitter.
    Otherwise, it will redirect to the login URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a JSP for the previous method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `login()` method builds a Twitter authorization URL using the API key and
    redirects the user to it.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works…](img/5807OS_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the user has authorized our Twitter application, he/she is redirected
    back to our web application to a *callback URL*, `/tw/callback`, that we provided
    with this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The callback URL contains a `oauth_verifier` parameter provided by Twitter.
  prefs: []
  type: TYPE_NORMAL
- en: In the `callback()` method, we use this authorization code to get an OAuth access
    token that we store in the session. This is part of the standard OAuth workflow;
    the token is not provided directly, so it's not shown to the user. On our server,
    the application secret (also never shown to the user) is required to obtain the
    token from the authorization code.
  prefs: []
  type: TYPE_NORMAL
- en: We then redirect the user to `/tw`. In the `tw()` method, we retrieve the token
    from the session and use it to connect to the user's Twitter account.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving a user's Twitter profile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to retrieve a user's Twitter profile data,
    which automatically becomes available to the Twitter application once the user
    has authorized the Twitter application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to retrieve data from the profile of a Twitter user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `TwitterController` class, add a `Model` argument to the `tw()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that method, use the Twitter object to retrieve the user profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the user profile to the JSP view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, display data from the user profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Retrieving the tweets of a Twitter user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to retrieve the last tweets of a Twitter user
    from a Spring web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are the steps to retrieve the last tweets of a Twitter user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `TwitterController` class, add a `Model` argument to the `tw()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In that method, use the Twitter object to retrieve the user''s tweets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the list of tweets to the JSP view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the JSP, display the list of tweets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Posting a tweet to Twitter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to post a tweet on behalf of a user from a
    Spring web application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the `TwitterController` class, in the `tw()` method, use the Twitter object
    to post a tweet.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Sending a private message to another Twitter user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you'll learn how to send a private message to another Twitter
    user from a Spring web application. Note that the user who is the recipient has
    to be a follower of the user who is the sender.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses the code from the *Connecting to Twitter* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the **TwitterController** class, in the **tw()** method, use the Twitter
    object to send a private message to another Twitter user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
