- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Spring Boot and the Angular App
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what `frontend-maven-plugin` does and what
    we use it for. Then, we learned what configuration to write to run the Angular
    application within the Spring Boot application. After that, we learned how to
    package the two applications as one file. Lastly, we learned how to run the Spring
    Boot application with Angular.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you the basics of GitHub Actions, the basics of Heroku,
    and how to deploy the app using Heroku.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub Actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components of GitHub Actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Heroku
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CI workflow or pipeline
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub Actions
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by defining **GitHub Actions**. This platform provides workflow
    automation for developers and operations for **continuous integration and continuous
    delivery** (**CI/CD**). It can run a series of actions using scripts whenever
    someone creates a pull request, creates an issue, joins as a contributor, merges
    a pull request, and so on. In short, there are several events in your GitHub workflow
    that you can use to run a set of specific actions or scripts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review some of the components of GitHub Actions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Components of GitHub Actions
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve learned what GitHub Actions is, let’s see the components of GitHub
    Actions that help us do DevOps and run workflows when events get triggered.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the components of GitHub Actions:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '`.github/workflows`, that runs jobs manually, automatically triggers an event,
    or does so by setting a schedule.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull_request`, `push`, and `schedule`. However, other events can be useful,
    depending on your needs.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jobs**: A job is a set or group of steps (script or action) in a workflow.
    A particular job executes in the same runner throughout the steps.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: An action performs the task at hand or anything you need, such
    as checking out your repository, building your application, testing your application,
    scanning your code for any vulnerabilities, or deploying your application.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runners**: Runners are just servers. You can choose Ubuntu Linux, Microsoft
    Windows, or macOS runners in GitHub Actions. However, you are not limited to these
    three operating systems. You can also have self-hosted runners.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the components of GitHub Actions that we will use later in the *Creating
    a CI workflow or pipeline* section. But before that, we will set up Heroku, where
    we will deploy our full-stack application.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Heroku
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Heroku. It is a **Platform-as-a-Service** (**PaaS**)
    offering that lets us build and run applications in the cloud. Let’s learn how
    to set up Heroku and our applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Creating GitHub and Heroku accounts
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create an account for GitHub and then Heroku.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: First, we must create a GitHub account by going to [https://github.com/](https://github.com/).
    We will use this as the repository for our project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: Then, we must create a Heroku account by going to [https://www.heroku.com/](https://www.heroku.com/).
    This is where we will deploy our application and create an instance of our database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new app in Heroku
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After signing in to Heroku, click the **New** button at the top-right corner
    of the page and click the **Create new app** button to create an app without a
    pipeline:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.1 – Create new app](img/B18159_17_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
- en: Figure 17.1 – Create new app
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.1* is where you create a new app for the full-stack application.
    Name the app anything you wish and choose a region, but don’t add a pipeline.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add a database for our full-stack application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Postgres database
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s add a Postgres database:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Resources** tab and click the **Find more** **add-ons** button:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.2 – Find more add-ons](img/B18159_17_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
- en: Figure 17.2 – Find more add-ons
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.2* shows where you can find the **Find more add-ons** button.
    This is where you can find Heroku add-ons and various tools and services for developing,
    extending, and operating your application. An example of this can be seen in *Figure
    17**.3*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.3 – Heroku Postgres](img/B18159_17_03.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
- en: Figure 17.3 – Heroku Postgres
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.3* shows the Heroku Postgres add-on, which is a **Database-as-a-Service**
    (**DaaS**) offering based on PostgreSQL. Click it, install it, and then choose
    the free plan and provision the Heroku Postgres add-on to the full-stack application
    you created earlier. Then, click the **Submit Order** **Form** button.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Resources** tab of your app. You should see the Heroku Postgres
    add-on. Click the Heroku part of **Heroku Postgres**; a new tab will open.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have almost finished adding a database. We just need to add a Dataclip, which
    will let us create SQL queries for our database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and click the **Create Dataclip** button. Then, add the following
    SQL queries:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Once you’ve added these SQL queries to the editor, click **Save &** **Run**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, the database has been created. Now, let’s create a `system.properties`
    file where we can declare the Java runtime version and Maven version.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Adding system properties
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create a file that will specify a Java version and
    a Maven version using `system.properties`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the root directory of the Spring Boot application and create a file called
    `system.properties`. Then, add the following configurations:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding two configurations will be used in the deployment part of the
    full-stack application in Heroku.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will get the domain URL of our app and add it to the
    config variables.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: Adding config variables
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to add config variables in Heroku. In our repository,
    we will add `CLIENT_URL` to Heroku’s `config vars` section and the `environment.prod.ts`
    file for the frontend application. Follow these steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to get the application’s domain name, which can be found
    by going to the **Settings** tab:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.4 – Application URL](img/B18159_17_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: Figure 17.4 – Application URL
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.4* shows the application URL where the application will render.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the URL of your full-stack application and go to the **Config Vars** area
    of the **Settings** tab. Click on the **Reveal Config** **Vars** button:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.5 – Reveal Config Vars](img/B18159_17_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Figure 17.5 – Reveal Config Vars
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `CLIENT_URL` as a **Key** and add the URL of the application as a **Value**:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.6 – Edit config variable](img/B18159_17_06.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: Figure 17.6 – Edit config variable
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.6* shows the form after adding environment variables or configuration
    variables.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to add a value to your JWT secret. However, note that your development
    and production environments should differ.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `environment.prod.ts` file and add the following code:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code will replace the previous `localhost:8080` address of `apiURL`
    and `authURL` in the Angular application in production.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to publish the full-stack application repository to GitHub since
    we will deploy the application through GitHub source control.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: Manual deployment in Heroku
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to check if the application will run without
    any problems after we deploy it. Follow these steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, go to the **Deploy** tab of your application in the Heroku dashboard:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.7 – Deploying the application](img/B18159_17_07.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
- en: Figure 17.7 – Deploying the application
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.7* shows where to deploy an application via the Heroku dashboard
    manually. Use GitHub as the deployment method, then search your repository.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the repository of your full-stack application, go to the bottom
    of the page, where you will find the **Manual deploy** section. Then, press the
    **Deploy Branch** button to start deploying and running the application in Heroku:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.8 – Manual deploy](img/B18159_17_08.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
- en: Figure 17.8 – Manual deploy
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.8* shows the **Manual deploy** section of Heroku.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: To check if everything is working, wait for the deployment to finish and then
    go to the URL of the application.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register a new user and try to sign in. Make sure you open the **Network**
    tab of your browser; you will see that the requests are being sent via the application’s
    URL. Note that the responses from the server have a **Status Code** of **200**
    or **201**:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.9 – The Network tab of Google Chrome](img/B18159_17_09.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
- en: Figure 17.9 – The Network tab of Google Chrome
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.9* shows Google Chrome’s **Network** tab in developer tools. Here,
    you can see that the **register** request returns **Status Code 201**. The Angular,
    Spring Boot, and Heroku Postgres database works perfectly.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve finished manually deploying our full-stack application, let’s
    create an automated deployment using workflow in GitHub Actions.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CI workflow or pipeline
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will automate the deployment of our full-stack application
    by using a workflow in GitHub Actions. Follow these steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the GitHub repository of your project, then click on the `Publish Java
    Package` and pick the Maven workflow:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.10 – Selecting a workflow](img/B18159_17_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: Figure 17.10 – Selecting a workflow
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.10* shows the basic and ready-made Maven workflow for building
    Maven projects.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the content of the YAML file in the editor by replacing it with the
    following YAML configuration:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: The preceding code is the workflow for our full-stack application’s CI/CD. It’s
    called `CICD` because that’s what this workflow is for.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: The workflow has one event, `push`, which will cause the workflow to run if
    there’s a push in the master branch.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow also has two jobs: `test` and `deploy`. The `test` job’s steps
    are to check out the code, build the application using Java 17, and run the test.
    On the other hand, the `deploy` job’s steps are to check out the code and use
    the Heroku deploy action, which requires a Heroku API key, the application’s name,
    and the Heroku account’s email.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Heroku API key, you need to go to the **Account settings** menu of
    your profile on your Heroku dashboard:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.11 – Account settings](img/B18159_17_11.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: Figure 17.11 – Account settings
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.11* shows the **Account settings** menu under my profile on the
    Heroku dashboard.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Account settings**, then go to **API Key** and generate an API key:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.12 – API Key](img/B18159_17_12.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
- en: Figure 17.12 – API Key
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.12* shows where you can generate a Heroku API key.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Copy the Heroku API key since you will need to create a new Actions secret for
    GitHub Actions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: To do so, go to the GitHub repository of your application and open a new browser
    tab for the **Settings** tab so that you don’t lose your workflow configuration.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the API key in the text area and name it `HEROKU_API_KEY`. This is
    the key you will be using in the `deploy` job of your workflow:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.13 – The Actions secrets form](img/B18159_17_13.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
- en: Figure 17.13 – The Actions secrets form
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.13* shows where you can add a new Actions secret to keep your
    sensitive values from being copied or read by anyone.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve added a new secret, go back to your browser tab, where you start
    editing your workflow. Then, commit the file that you are editing:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.14 – Committing a workflow](img/B18159_17_14.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 17.14 – Committing a workflow
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.14* shows the `git pull` it later so that it will be on your local
    machine.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`CICD` will kick in after you commit to your workflow. You can look at the
    progress of your CI/CD workflow by going to the **Actions** tab:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.15 – Workflow status](img/B18159_17_15.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
- en: Figure 17.15 – Workflow status
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.15* shows the current status of the CI/CD workflow. You can see
    that it is running the **Build and** **Test** job.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see what’s happening in a particular job by clicking the name
    of the job via the left sidebar menu:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.16 – Steps and Actions status](img/B18159_17_16.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
- en: Figure 17.16 – Steps and Actions status
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.16* shows the output logs from each step in the **Build and Test**
    job. You can also use this part of GitHub Actions to debug errors that lead to
    the jobs and actions failing.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: 'After running all the jobs in the CI/CD workflow you have created, you will
    see that the workflow has a green check icon next to it, meaning that the workflow
    has passed and everything is working:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.17 – Steps and Actions status](img/B18159_17_17.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: Figure 17.17 – Steps and Actions status
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.17* shows a passing GitHub workflow on the **Actions** tab of
    your repository.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, to check if the deployment automation has deployed our application
    in the Heroku cloud, we have to go back to the overview dashboard of Heroku and
    look for the latest activity:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.18 – Build succeeded in the Latest activity area of an account
    in Heroku](img/B18159_17_18.jpg)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
- en: Figure 17.18 – Build succeeded in the Latest activity area of an account in
    Heroku
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.18* shows that the build triggered by GitHub Actions succeeded.
    You can see that the application is running correctly.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have managed to automate our CI/CD workflow using GitHub Actions.
    Now, let’s summarize what we have learned in this chapter.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that, we have reached the last chapter of this book; let’s recap the valuable
    things you have learned in this chapter.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned that GitHub Actions makes it easy to automate all your software
    workflows and perform CI/CD. You can build, test, and deploy your code right from
    GitHub. You also learned that Heroku is a PaaS that lets you build, run, and operate
    applications entirely in the cloud. Heroku Postgres is a managed SQL database
    service provided directly by Heroku that you can use for your applications.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: So, you’ve made it this far. Thank you for finishing the book; I am proud of
    you and your enthusiasm for learning new tools and things. You can apply what
    you have learned here to a project, given that the requirements of your project
    match the problems and solutions you have learned about in this book.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: This course has taught you how to build a Spring Boot 2 application and an Angular
    13 application as a senior developer, bringing value to your companies, customers,
    and clients.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: As a next step, my recommendation is that you get a new Packt book about standalone
    Spring Boot 2 or Spring Boot 3, or an Angular book to solidify what you have learned
    from this book.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步的建议，我推荐你购买一本关于独立Spring Boot 2或Spring Boot 3的新Packt书籍，或者一本Angular书籍，以巩固从这本书中学到的知识。
- en: On behalf of the Packt team and editors, we wish you all the best in all stages
    of your career and life.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 代表Packt团队和编辑们，我们祝愿你在职业生涯和生活的各个阶段都一切顺利。
