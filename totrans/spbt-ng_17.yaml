- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying Spring Boot and the Angular App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we learned what `frontend-maven-plugin` does and what
    we use it for. Then, we learned what configuration to write to run the Angular
    application within the Spring Boot application. After that, we learned how to
    package the two applications as one file. Lastly, we learned how to run the Spring
    Boot application with Angular.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you the basics of GitHub Actions, the basics of Heroku,
    and how to deploy the app using Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Components of GitHub Actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Heroku
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a CI workflow or pipeline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following link will take you to the finished version of this chapter: [https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes](https://github.com/PacktPublishing/Spring-Boot-and-Angular/tree/main/Chapter-17/superheroes).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start by defining **GitHub Actions**. This platform provides workflow
    automation for developers and operations for **continuous integration and continuous
    delivery** (**CI/CD**). It can run a series of actions using scripts whenever
    someone creates a pull request, creates an issue, joins as a contributor, merges
    a pull request, and so on. In short, there are several events in your GitHub workflow
    that you can use to run a set of specific actions or scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s review some of the components of GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Components of GitHub Actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve learned what GitHub Actions is, let’s see the components of GitHub
    Actions that help us do DevOps and run workflows when events get triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the components of GitHub Actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.github/workflows`, that runs jobs manually, automatically triggers an event,
    or does so by setting a schedule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pull_request`, `push`, and `schedule`. However, other events can be useful,
    depending on your needs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jobs**: A job is a set or group of steps (script or action) in a workflow.
    A particular job executes in the same runner throughout the steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Actions**: An action performs the task at hand or anything you need, such
    as checking out your repository, building your application, testing your application,
    scanning your code for any vulnerabilities, or deploying your application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runners**: Runners are just servers. You can choose Ubuntu Linux, Microsoft
    Windows, or macOS runners in GitHub Actions. However, you are not limited to these
    three operating systems. You can also have self-hosted runners.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the components of GitHub Actions that we will use later in the *Creating
    a CI workflow or pipeline* section. But before that, we will set up Heroku, where
    we will deploy our full-stack application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Heroku
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will use Heroku. It is a **Platform-as-a-Service** (**PaaS**)
    offering that lets us build and run applications in the cloud. Let’s learn how
    to set up Heroku and our applications.
  prefs: []
  type: TYPE_NORMAL
- en: Creating GitHub and Heroku accounts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create an account for GitHub and then Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: First, we must create a GitHub account by going to [https://github.com/](https://github.com/).
    We will use this as the repository for our project.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we must create a Heroku account by going to [https://www.heroku.com/](https://www.heroku.com/).
    This is where we will deploy our application and create an instance of our database.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new app in Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After signing in to Heroku, click the **New** button at the top-right corner
    of the page and click the **Create new app** button to create an app without a
    pipeline:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.1 – Create new app](img/B18159_17_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.1 – Create new app
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.1* is where you create a new app for the full-stack application.
    Name the app anything you wish and choose a region, but don’t add a pipeline.'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add a database for our full-stack application.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Postgres database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s add a Postgres database:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the **Resources** tab and click the **Find more** **add-ons** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.2 – Find more add-ons](img/B18159_17_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.2 – Find more add-ons
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.2* shows where you can find the **Find more add-ons** button.
    This is where you can find Heroku add-ons and various tools and services for developing,
    extending, and operating your application. An example of this can be seen in *Figure
    17**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 17.3 – Heroku Postgres](img/B18159_17_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.3 – Heroku Postgres
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.3* shows the Heroku Postgres add-on, which is a **Database-as-a-Service**
    (**DaaS**) offering based on PostgreSQL. Click it, install it, and then choose
    the free plan and provision the Heroku Postgres add-on to the full-stack application
    you created earlier. Then, click the **Submit Order** **Form** button.'
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the **Resources** tab of your app. You should see the Heroku Postgres
    add-on. Click the Heroku part of **Heroku Postgres**; a new tab will open.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have almost finished adding a database. We just need to add a Dataclip, which
    will let us create SQL queries for our database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and click the **Create Dataclip** button. Then, add the following
    SQL queries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you’ve added these SQL queries to the editor, click **Save &** **Run**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With that, the database has been created. Now, let’s create a `system.properties`
    file where we can declare the Java runtime version and Maven version.
  prefs: []
  type: TYPE_NORMAL
- en: Adding system properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create a file that will specify a Java version and
    a Maven version using `system.properties`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the root directory of the Spring Boot application and create a file called
    `system.properties`. Then, add the following configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The preceding two configurations will be used in the deployment part of the
    full-stack application in Heroku.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will get the domain URL of our app and add it to the
    config variables.
  prefs: []
  type: TYPE_NORMAL
- en: Adding config variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to add config variables in Heroku. In our repository,
    we will add `CLIENT_URL` to Heroku’s `config vars` section and the `environment.prod.ts`
    file for the frontend application. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to get the application’s domain name, which can be found
    by going to the **Settings** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.4 – Application URL](img/B18159_17_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.4 – Application URL
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.4* shows the application URL where the application will render.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the URL of your full-stack application and go to the **Config Vars** area
    of the **Settings** tab. Click on the **Reveal Config** **Vars** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.5 – Reveal Config Vars](img/B18159_17_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.5 – Reveal Config Vars
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `CLIENT_URL` as a **Key** and add the URL of the application as a **Value**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.6 – Edit config variable](img/B18159_17_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.6 – Edit config variable
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.6* shows the form after adding environment variables or configuration
    variables.'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t forget to add a value to your JWT secret. However, note that your development
    and production environments should differ.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, open the `environment.prod.ts` file and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will replace the previous `localhost:8080` address of `apiURL`
    and `authURL` in the Angular application in production.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to publish the full-stack application repository to GitHub since
    we will deploy the application through GitHub source control.
  prefs: []
  type: TYPE_NORMAL
- en: Manual deployment in Heroku
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we are going to check if the application will run without
    any problems after we deploy it. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To do that, go to the **Deploy** tab of your application in the Heroku dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.7 – Deploying the application](img/B18159_17_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.7 – Deploying the application
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.7* shows where to deploy an application via the Heroku dashboard
    manually. Use GitHub as the deployment method, then search your repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After choosing the repository of your full-stack application, go to the bottom
    of the page, where you will find the **Manual deploy** section. Then, press the
    **Deploy Branch** button to start deploying and running the application in Heroku:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.8 – Manual deploy](img/B18159_17_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.8 – Manual deploy
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.8* shows the **Manual deploy** section of Heroku.'
  prefs: []
  type: TYPE_NORMAL
- en: To check if everything is working, wait for the deployment to finish and then
    go to the URL of the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Register a new user and try to sign in. Make sure you open the **Network**
    tab of your browser; you will see that the requests are being sent via the application’s
    URL. Note that the responses from the server have a **Status Code** of **200**
    or **201**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.9 – The Network tab of Google Chrome](img/B18159_17_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.9 – The Network tab of Google Chrome
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.9* shows Google Chrome’s **Network** tab in developer tools. Here,
    you can see that the **register** request returns **Status Code 201**. The Angular,
    Spring Boot, and Heroku Postgres database works perfectly.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve finished manually deploying our full-stack application, let’s
    create an automated deployment using workflow in GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CI workflow or pipeline
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will automate the deployment of our full-stack application
    by using a workflow in GitHub Actions. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the GitHub repository of your project, then click on the `Publish Java
    Package` and pick the Maven workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.10 – Selecting a workflow](img/B18159_17_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.10 – Selecting a workflow
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.10* shows the basic and ready-made Maven workflow for building
    Maven projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the content of the YAML file in the editor by replacing it with the
    following YAML configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code is the workflow for our full-stack application’s CI/CD. It’s
    called `CICD` because that’s what this workflow is for.
  prefs: []
  type: TYPE_NORMAL
- en: The workflow has one event, `push`, which will cause the workflow to run if
    there’s a push in the master branch.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workflow also has two jobs: `test` and `deploy`. The `test` job’s steps
    are to check out the code, build the application using Java 17, and run the test.
    On the other hand, the `deploy` job’s steps are to check out the code and use
    the Heroku deploy action, which requires a Heroku API key, the application’s name,
    and the Heroku account’s email.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the Heroku API key, you need to go to the **Account settings** menu of
    your profile on your Heroku dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.11 – Account settings](img/B18159_17_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.11 – Account settings
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.11* shows the **Account settings** menu under my profile on the
    Heroku dashboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Account settings**, then go to **API Key** and generate an API key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.12 – API Key](img/B18159_17_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.12 – API Key
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.12* shows where you can generate a Heroku API key.'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the Heroku API key since you will need to create a new Actions secret for
    GitHub Actions.
  prefs: []
  type: TYPE_NORMAL
- en: To do so, go to the GitHub repository of your application and open a new browser
    tab for the **Settings** tab so that you don’t lose your workflow configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add the API key in the text area and name it `HEROKU_API_KEY`. This is
    the key you will be using in the `deploy` job of your workflow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.13 – The Actions secrets form](img/B18159_17_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.13 – The Actions secrets form
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.13* shows where you can add a new Actions secret to keep your
    sensitive values from being copied or read by anyone.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve added a new secret, go back to your browser tab, where you start
    editing your workflow. Then, commit the file that you are editing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.14 – Committing a workflow](img/B18159_17_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.14 – Committing a workflow
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.14* shows the `git pull` it later so that it will be on your local
    machine.'
  prefs: []
  type: TYPE_NORMAL
- en: '`CICD` will kick in after you commit to your workflow. You can look at the
    progress of your CI/CD workflow by going to the **Actions** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.15 – Workflow status](img/B18159_17_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.15 – Workflow status
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.15* shows the current status of the CI/CD workflow. You can see
    that it is running the **Build and** **Test** job.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see what’s happening in a particular job by clicking the name
    of the job via the left sidebar menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.16 – Steps and Actions status](img/B18159_17_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.16 – Steps and Actions status
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.16* shows the output logs from each step in the **Build and Test**
    job. You can also use this part of GitHub Actions to debug errors that lead to
    the jobs and actions failing.'
  prefs: []
  type: TYPE_NORMAL
- en: 'After running all the jobs in the CI/CD workflow you have created, you will
    see that the workflow has a green check icon next to it, meaning that the workflow
    has passed and everything is working:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.17 – Steps and Actions status](img/B18159_17_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.17 – Steps and Actions status
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.17* shows a passing GitHub workflow on the **Actions** tab of
    your repository.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Lastly, to check if the deployment automation has deployed our application
    in the Heroku cloud, we have to go back to the overview dashboard of Heroku and
    look for the latest activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 17.18 – Build succeeded in the Latest activity area of an account
    in Heroku](img/B18159_17_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 17.18 – Build succeeded in the Latest activity area of an account in
    Heroku
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17**.18* shows that the build triggered by GitHub Actions succeeded.
    You can see that the application is running correctly.'
  prefs: []
  type: TYPE_NORMAL
- en: With that, we have managed to automate our CI/CD workflow using GitHub Actions.
    Now, let’s summarize what we have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With that, we have reached the last chapter of this book; let’s recap the valuable
    things you have learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: First, you learned that GitHub Actions makes it easy to automate all your software
    workflows and perform CI/CD. You can build, test, and deploy your code right from
    GitHub. You also learned that Heroku is a PaaS that lets you build, run, and operate
    applications entirely in the cloud. Heroku Postgres is a managed SQL database
    service provided directly by Heroku that you can use for your applications.
  prefs: []
  type: TYPE_NORMAL
- en: So, you’ve made it this far. Thank you for finishing the book; I am proud of
    you and your enthusiasm for learning new tools and things. You can apply what
    you have learned here to a project, given that the requirements of your project
    match the problems and solutions you have learned about in this book.
  prefs: []
  type: TYPE_NORMAL
- en: This course has taught you how to build a Spring Boot 2 application and an Angular
    13 application as a senior developer, bringing value to your companies, customers,
    and clients.
  prefs: []
  type: TYPE_NORMAL
- en: As a next step, my recommendation is that you get a new Packt book about standalone
    Spring Boot 2 or Spring Boot 3, or an Angular book to solidify what you have learned
    from this book.
  prefs: []
  type: TYPE_NORMAL
- en: On behalf of the Packt team and editors, we wish you all the best in all stages
    of your career and life.
  prefs: []
  type: TYPE_NORMAL
