- en: Setting up Selenium Grid
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Selenium Grid
- en: 'Now that we know what RemoteWebDriver is and how it works, we are ready to
    learn about Selenium Grid. In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了RemoteWebDriver是什么以及它是如何工作的，我们准备学习Selenium Grid。在本章中，我们将涵盖以下主题：
- en: Why we need Selenium Grid
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为什么我们需要Selenium Grid
- en: What Selenium Grid is
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是Selenium Grid
- en: How we can use Selenium Grid
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们如何使用Selenium Grid
- en: Test cases using Selenium Grid
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium Grid的测试用例
- en: Configuring Selenium Grid
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Selenium Grid
- en: Exploring Selenium Grid
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Selenium Grid
- en: 'Let''s try to understand why we need Selenium Grid by analyzing a scenario. You
    have a web application that needs to be tested on the following browser-machine
    combinations:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过分析一个场景来尝试理解为什么我们需要Selenium Grid。您有一个需要在以下浏览器-机器组合上测试的Web应用程序：
- en: Google Chrome on Windows 10
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10上的Google Chrome
- en: Google Chrome on macOS
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS上的Google Chrome
- en: Internet Explorer 11 on Windows 10
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10上的Internet Explorer 11
- en: Firefox on Linux
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux上的Firefox
- en: We can simply alter the test script we created in the previous chapter and point
    to the Selenium Standalone Server running on each of these combinations (that
    is, Windows 10, macOS, or Linux), as shown in the following code.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地修改上一章中创建的测试脚本，并指向在每个这些组合（即Windows 10、macOS或Linux）上运行的Selenium Standalone
    Server，如下面的代码所示。
- en: 'Windows 10:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'Windows 10:'
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'macOS:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'macOS:'
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Linux:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'Linux:'
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding code, your test scripts are tightly coupled to the machines
    that host the target platform and the target browsers. If the Windows 10 host
    changes, you should refactor your test script to handle that. This is not an ideal
    way to design your tests. The focus of your test scripts should be on the functionality
    of your web application and not on the infrastructure that is used to execute
    these test scripts. There should be a central point to manage all the different
    environments. To solve this, we make use of **Selenium Grid**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，您的测试脚本与托管目标平台和目标浏览器的机器紧密耦合。如果Windows 10主机发生变化，您应该重构您的测试脚本以处理这种情况。这不是设计测试的理想方式。您的测试脚本应该关注Web应用程序的功能，而不是执行这些测试脚本所使用的底层基础设施。应该有一个中心点来管理所有不同的环境。为了解决这个问题，我们使用了**Selenium
    Grid**。
- en: 'The **Selenium Grid** offers a cross-browser testing environment with several
    different platforms (such as Windows, Mac, and Linux) to execute tests. The Selenium
    Grid is managed from a central point, called the **hub.** The hub has the information
    of all the different testing platforms, known as **nodes** (the machines that
    have the desired operating systems and browser versions and connected to the hub).
    The hubassigns these nodes to execute tests whenever the test scripts request
    them, based on the capabilities requested by the test. The following diagram shows
    what a Selenium Grid looks like:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**Selenium Grid**提供了一个跨浏览器测试环境，具有多个不同的平台（如Windows、Mac和Linux）来执行测试。Selenium
    Grid从中心点管理，称为**中心节点**。中心节点拥有所有不同测试平台的信息，称为**节点**（具有所需操作系统和浏览器版本并连接到中心节点的机器）。中心节点根据测试请求的能力将节点分配给执行测试，如下面的图所示：'
- en: '![](img/fbc7b253-0888-47d2-a7e7-4279585bd71d.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbc7b253-0888-47d2-a7e7-4279585bd71d.png)'
- en: In the preceding diagram, there is one hub, four *nodes* of different platforms,
    and the machine where the test scripts are located. The test script will communicate
    with the hub and request a target platform to be executed. The hub assigns a node
    with the target platform to the test script. The node executes the test script
    and sends the result back to the hub, which in turn forwards the results to the
    test script. This is what Selenium Grid looks like and how it works at a high
    level.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，有一个中心节点，四个不同平台的*节点*，以及存放测试脚本的机器。测试脚本将与中心节点通信，并请求执行的目标平台。中心节点将具有目标平台的节点分配给测试脚本。节点执行测试脚本并将结果发送回中心节点，中心节点再将结果转发给测试脚本。这就是Selenium
    Grid的外观以及它在高层次上的工作方式。
- en: 'Now that we have seen how Selenium Grid works theoretically, let''s see what
    works as hubs and nodes in it. Fortunately, as we are dealing with Selenium Grid,
    we can use the same Remote WebDriver server that we used in the previous chapter
    to work as Selenium Grid as well. If you remember, we used `seleniumserver-standalone-3.12.0.jar`
    to start as a Selenium Standalone Server. We can use the same JAR file to be started
    in the hub mode on the hub machine, and a copy of the JAR file can be started
    in the node mode on the node machine. Try executing the following command on your
    JAR file:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经从理论上了解了Selenium Grid的工作方式，让我们看看在其中作为中心节点和节点工作的内容。幸运的是，因为我们正在处理Selenium
    Grid，我们可以使用我们在上一章中使用的相同的远程WebDriver服务器，同时作为Selenium Grid使用。如果您还记得，我们使用`seleniumserver-standalone-3.12.0.jar`作为Selenium
    Standalone服务器启动。我们可以使用相同的JAR文件在中心节点机器上以中心节点模式启动，并在节点机器上启动JAR文件的副本以节点模式运行。尝试在您的JAR文件上执行以下命令：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following output shows how to use the server in a grid environment:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下输出显示了如何在网格环境中使用服务器：
- en: '![](img/8247e16b-eaa5-4054-979b-90ffc3ad7c72.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8247e16b-eaa5-4054-979b-90ffc3ad7c72.png)'
- en: 'You will see two options: to use it as a Standalone Server, which acts as a
    Remote WebDriver, and to use it in a grid environment, which describes Selenium
    Grid. In this chapter, we will use this JAR file as a Selenium Grid.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到两个选项：将其用作独立服务器，它充当远程WebDriver，以及将其用于网格环境，这描述了Selenium Grid。在本章中，我们将使用此JAR文件作为Selenium
    Grid。
- en: Understanding the hub
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解中心节点
- en: 'The hub is the central point of a Selenium Grid. It has a registry of all the
    available nodes that are connected and part of a particular grid. The hub is a
    Selenium Standalone server running in the hub mode, listening on port `4444` of
    a machine by default. The test scripts will try to connect to the hub on this
    port, just as any Remote WebDriver. The hub will take care of rerouting the test-script
    traffic to the appropriate test-platform node. Let''s see how we can start a hub
    node. Navigate to the location where you have your Selenium server JAR file and
    execute the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 中心节点是Selenium Grid的中心点。它记录了所有已连接并属于特定网格的可用节点。中心节点是一个以中心节点模式运行的Selenium Standalone服务器，默认情况下监听机器的`4444`端口。测试脚本将尝试连接到这个端口的中心节点，就像任何远程WebDriver一样。中心节点将负责重新路由测试脚本流量到适当的测试平台节点。让我们看看如何启动一个中心节点。导航到您Selenium服务器JAR文件的位置，并执行以下命令：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Doing this will start your server in the hub mode. By default, the server starts
    listening on port `4444`; however, you can start your server on the port of your
    choice. Suppose you want to start the server on port `1111`; it can be done as
    follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此操作将在中心节点模式下启动您的服务器。默认情况下，服务器开始监听`4444`端口；然而，您可以将服务器启动在您选择的端口上。假设您想将服务器启动在端口`1111`上；可以按照以下方式完成：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following screenshot shows the console output of the Grid Hub being started
    on port `1111`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在端口`1111`上启动的网格中心节点的控制台输出：
- en: '![](img/6459fe27-fa58-4c64-b753-8cccc6bc503b.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6459fe27-fa58-4c64-b753-8cccc6bc503b.png)'
- en: All the test scripts should connect to the hub on this port. Now launch your
    browser and connect to the machine that is hosting your hub on port `1111`. Here,
    the machine that is hosting my hub has the IP address 192.168.0.101.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所有测试脚本都应该连接到这个端口上的中心节点。现在启动您的浏览器，连接到在端口`1111`上托管您的中心节点的机器。在这里，托管我的中心节点的机器的IP地址是192.168.0.101。
- en: 'What you should see on your browser is shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 您在浏览器上应该看到的是以下截图所示：
- en: '![](img/f77746ed-d5f5-4e91-9b25-a59b4462e838.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f77746ed-d5f5-4e91-9b25-a59b4462e838.png)'
- en: 'It shows the version of the server that is being used as the Grid Hub. Now
    click the Console link to navigate to the Grid Console:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了正在用作网格中心节点的服务器的版本。现在点击控制台链接以导航到网格控制台：
- en: '![](img/1af75304-9500-4607-a906-510654f2310b.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1af75304-9500-4607-a906-510654f2310b.png)'
- en: As you can see, the page talks about many configuration parameters. We will
    discuss these configuration parameters in the *Configuring Selenium Grid* section.
    So, you've now learned how to start a grid on a port and listen for connections.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，页面讨论了许多配置参数。我们将在*配置Selenium Grid*部分讨论这些配置参数。所以，您现在已经学会了如何在端口上启动网格并监听连接。
- en: Understanding the node
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解节点
- en: 'As our hub is up and running, it''s now time to start a node and connect it
    to the hub. In this example, we will configure a macOS machine that has Chrome
    installed on it. So, if any test script requests the hub for a macOS platform
    and Chrome browser, the hub will choose this node. Let''s see how we can start
    the node. The command to start the node and register with the hub is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的中心正在运行，现在是时候启动一个节点并将其连接到中心了。在这个例子中，我们将配置一台安装了Chrome的macOS机器。因此，如果任何测试脚本请求中心macOS平台和Chrome浏览器，中心将选择这个节点。让我们看看我们如何启动节点。启动节点并注册到中心的命令如下：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will start the Selenium server in the node mode and register this node
    with the already-started hub:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在节点模式下启动Selenium服务器，并将此节点注册到已启动的中心：
- en: '![](img/91992fe4-f543-45ad-abe3-006e42cbc925.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91992fe4-f543-45ad-abe3-006e42cbc925.png)'
- en: 'If you go back to the Grid Console on the browser, you will see the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回到浏览器上的Grid控制台，你会看到以下内容：
- en: '![](img/77dc8da7-4873-4de6-9730-50f8447e3f8e.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77dc8da7-4873-4de6-9730-50f8447e3f8e.png)'
- en: 'The preceding screenshot shows the http://192.168.0.101:16784 node URL, which,
    in this case, is running on the Mac platform. By default, the number of browsers
    listed for every node is 11: 5 for Firefox, five for Chrome, and one for IE. This
    can be overridden by specifying the `browser` option, which we will see in the
    *Configuring Selenium Grid* section.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了http://192.168.0.101:16784的节点URL，在这种情况下，它运行在Mac平台上。默认情况下，每个节点列出的浏览器数量为11：Firefox有5个，Chrome有5个，IE有1个。这可以通过指定`browser`选项来覆盖，我们将在*配置Selenium
    Grid*部分看到。
- en: Similarly, start another node on Windows and register to the hub using the same
    command used to start the node on macOS.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在Windows上启动另一个节点，并使用启动macOS节点相同的命令将其注册到中心。
- en: Modifying the existing test script to use Selenium Grid
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改现有的测试脚本以使用Selenium Grid
- en: So far, we have seen test scripts that run on our local machines or on Selenium
    Standalone servers. Executing test scripts on Selenium Grid is very similar to
    executing tests on Remote WebDriver, except that you will also mention the platform
    details for Grid.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了在本地机器或Selenium Standalone服务器上运行的测试脚本。在Selenium Grid上执行测试脚本与在Remote
    WebDriver上执行测试非常相似，只是你还需要提及Grid的平台详细信息。
- en: 'Let''s look at a test script that uses the Remote WebDriver server:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个使用Remote WebDriver服务器的测试脚本：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now try executing the preceding test script and observe the log output of the
    hub and the node. The output log of the hub is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尝试执行前面的测试脚本，并观察中心节点和节点的日志输出。中心的输出日志如下：
- en: '![](img/f1aa8480-8f1b-499d-bf4f-f24a999d0261.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f1aa8480-8f1b-499d-bf4f-f24a999d0261.png)'
- en: 'The sequence of steps that happens at the hub end is as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在中心端发生的步骤顺序如下：
- en: The hub gets a request to create a new session for `platform=MAC, browserName=chrome`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 中心收到创建新会话的请求，`platform=MAC, browserName=chrome`。
- en: It verifies the available nodes that match the `capabilities` request.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它验证可用的节点，以匹配`capabilities`请求。
- en: If available, it creates a new session with the node host; if not, it rejects
    the request from the test script, saying that the desired capabilities don't match
    any of the registered nodes.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果可用，它将与节点主机创建一个新的会话；如果不可以，它将拒绝测试脚本中的请求，表示所需的特性与任何已注册的节点都不匹配。
- en: 'If a session is created with the node host in the preceding step, create a
    new test-slot session and hand over the test script to the node. Similarly, the
    output you should see in the console log of the hub is as follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在前一步中与节点主机创建了一个会话，则创建一个新的测试槽会话并将测试脚本交给节点。同样，你应在中心的控制台日志中看到的输出如下：
- en: '![](img/4c9ca183-59a5-45a3-a5f0-b81d29f053cd.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c9ca183-59a5-45a3-a5f0-b81d29f053cd.png)'
- en: 'The sequence of steps performed on the node is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在节点上执行的步骤顺序如下：
- en: The node host creates a new session with the requested desired capabilities.
    This will launch the browser.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 节点主机使用请求的期望特性创建一个新的会话。这将启动浏览器。
- en: It executes the test script's steps on the launched browser.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它在启动的浏览器上执行测试脚本的步骤。
- en: It ends the session and forwards the result to the hub, which in turn sends
    it to the test script.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它结束会话并将结果转发到中心，中心再将结果发送到测试脚本。
- en: Requesting for non-registered capabilities
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 请求非注册特性
- en: 'The hub will reject the request from the test script when the test script asks
    for a capability that is not registered with the hub. Let''s modify the preceding
    test script to request the Opera browser instead of Chrome. The test script should
    look as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当测试脚本请求一个未在中心节点注册的能力时，中心节点将拒绝测试脚本的请求。让我们修改前面的测试脚本，请求使用Opera浏览器而不是Chrome。测试脚本应如下所示：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The hub checks whether there is any node that matches the desired capabilities.
    If it doesn''t find one (as in this case), it will reject the request from the
    test script by throwing a `CapabilityNotPresentOnTheGridException` exception,
    as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 中心节点检查是否有任何节点与所需的特性匹配。如果没有找到（如本例所示），它将通过抛出`CapabilityNotPresentOnTheGridException`异常来拒绝测试脚本的请求，如下面的截图所示：
- en: '![](img/c0e6b5a2-26eb-47c3-b637-65aa72d3d77e.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c0e6b5a2-26eb-47c3-b637-65aa72d3d77e.png)'
- en: Queuing up the request if the node is busy
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如果节点忙碌，排队请求
- en: By default, you can send five test-script requests to any node. Although it
    is possible to change that configuration, let's see what happens when a node is
    already serving five requests, and you fire up another request for that node via
    the hub. The hub will keep polling the node until it gets a free test slot from
    the node. The test scripts are made to wait during this time. The hub says there
    are no free slots for the sixth session to be established with the same node. Meanwhile,
    on the node host, the node tries to create sessions for the five requests and
    starts executing the test scripts.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您可以向任何节点发送五个测试脚本请求。尽管可以更改此配置，但让我们看看当节点已经处理了五个请求，并且您通过中心节点对该节点发起另一个请求时会发生什么。中心节点将一直轮询该节点，直到从节点获得一个空闲的测试槽位。测试脚本在这段时间内将被等待。中心节点表示没有空闲槽位来建立与同一节点的第六个会话。同时，在节点主机上，节点试图为五个请求创建会话，并开始执行测试脚本。
- en: Upon creating the sessions, five Chrome windows are launched and the test scripts
    are executed on them. After serving the first five test-script requests, the hub
    will establish the waiting sixth session with the node, and the sixth request
    will be served.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建会话后，将启动五个Chrome窗口，并在其上执行测试脚本。在处理前五个测试脚本请求后，中心节点将与节点建立等待的第六个会话，并将第六个请求提供服务。
- en: Dealing with two nodes with matching capabilities
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理具有匹配能力的两个节点
- en: There are many configuration options that Selenium Grid provides to control
    the behavior of a node and a hub while you execute your test scripts. We will
    discuss them here.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Grid提供了许多配置选项来控制在执行测试脚本时节点和中心节点的行为。我们将在下面讨论它们。
- en: Configuring Selenium Grid
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Selenium Grid
- en: There are many configuration options that Selenium Grid provides to control
    the behavior of a node and a hub while you execute your test scripts. We will
    discuss them here.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Grid提供了许多配置选项来控制在执行测试脚本时节点和中心节点的行为。我们将在下面讨论它们。
- en: Specifying node-configuration parameters
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定节点配置参数
- en: In this section, we will go through the configuration parameters for a node.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论节点的配置参数。
- en: Setting supported browsers by a node
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置节点支持的浏览器
- en: 'As we saw earlier, when we register a node with a hub, by default, the node
    is shown as supporting five instances of the Firefox browser, five instances of
    the Chrome browser, and one instance of Internet Explorer, irrespective of whether
    the node actually supports them. But to register your node with the browsers of
    your choice, Selenium Grid provides a browser option, using which we can achieve
    this. Let''s say we want our node to be registered to support Firefox, Chrome,
    and Safari; we can do that using the following command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，当我们使用一个中心节点注册一个节点时，默认情况下，该节点会显示支持五个Firefox浏览器的实例、五个Chrome浏览器的实例和一个Internet
    Explorer的实例，无论该节点实际上是否支持它们。但为了使用您选择的浏览器注册您的节点，Selenium Grid提供了一个浏览器选项，我们可以通过它来实现这一点。假设我们希望我们的节点注册支持Firefox、Chrome和Safari；我们可以使用以下命令来完成：
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The Grid Console looks like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 网格控制台看起来如下所示：
- en: '![](img/bf5f2d66-9ec1-4d46-9a7b-83d57842e2b6.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bf5f2d66-9ec1-4d46-9a7b-83d57842e2b6.png)'
- en: Setting node timeouts
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置节点超时
- en: This parameter is set when registering a node with a hub. The value provided
    to these parameters is the time in seconds that a hub can actually wait before
    it terminates a test script execution on a node if the test script doesn't perform
    any kind of activity on the node.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此参数是在将节点注册到中心节点时设置的。提供给这些参数的值是中心节点在终止节点上的测试脚本执行之前可以等待的时间（以秒为单位），如果测试脚本在节点上不执行任何类型的活动。
- en: 'The command to configure your node with a node timeout is as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 配置节点超时的命令如下：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we have registered a node with a node timeout value of 300 seconds. So,
    the hub will terminate the test script if it doesn't perform any activity on the
    node for more than 300 seconds.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们已注册了一个节点，其节点超时值为300秒。因此，如果节点在300秒内没有任何活动，中心节点将终止测试脚本。
- en: Setting the limit on browser instances
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置浏览器实例的限制
- en: 'We have seen that, by default, there are 11 instances of browsers getting registered
    to a node. We have seen how to register our own browser. In this section, we will
    see how many instances of those browsers we can allow in our node. For this to
    be controlled, Selenium Grid comes out with a configuration parameter, called
    `maxInstances`, using which we can specify how many instances of a particular
    browser we want our node to provide. The command to do that is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到，默认情况下，有11个浏览器实例被注册到节点上。我们已经看到了如何注册我们自己的浏览器。在本节中，我们将看到我们可以在节点上允许多少个这样的浏览器实例。为了进行控制，Selenium
    Grid提供了一个配置参数，称为`maxInstances`，通过它可以指定我们希望节点提供的特定浏览器实例的数量。执行此操作的命令如下：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we are registering a node that provides three instances of Firefox, three
    instances of Chrome, and one instance of Safari.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们正在注册一个提供三个Firefox实例、三个Chrome实例和一个Safari实例的节点。
- en: Reregistering the node automatically
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动重新注册节点
- en: If the hub crashes or restarts after a node registers to it, all the information
    of the nodes that are already registered is lost. Going back to each of the nodes
    and reregistering them manually would prove to be tedious. The impact will be
    even worse if we haven't realized that the hub has restarted, because all the
    test scripts would fail as a result. So, to handle this kind of situation, Selenium
    Grid provides a configuration parameter to a node, through which we can specify
    the node to reregister itself automatically to the hub after a specified amount
    of time. If not specified, the default time of reregistration is five seconds.
    This way, we really don't have to worry; even if the hub crashes or restarts,
    our node will try to reregister every five seconds.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果节点注册到中心节点后，中心节点崩溃或重启，所有已注册节点的信息都将丢失。手动回到每个节点并重新注册它们将变得繁琐。如果我们还没有意识到中心节点已重启，影响将更加严重，因为所有测试脚本都会因此失败。因此，为了处理这种情况，Selenium
    Grid提供了一个配置参数给节点，通过它可以指定节点在指定时间后自动重新注册到中心节点。如果没有指定，重新注册的默认时间为五秒。这样，我们真的不必担心；即使中心节点崩溃或重启，我们的节点也会每五秒尝试重新注册。
- en: 'If you want to modify this time interval, the configuration parameter to deal
    with is `registerCycle`. The command to specify is as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想修改这个时间间隔，要处理的配置参数是`registerCycle`。指定命令如下：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output you will see on the node log console during startup is as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 启动时在节点日志控制台看到的输出如下：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The node will try to register to the hub every 1,000 milliseconds.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 节点将尝试每1,000毫秒注册到中心节点。
- en: Setting node health-check times
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置节点健康检查时间
- en: 'Using this configuration parameter, we can specify how frequently the hub can
    poll a node for its availability. The parameter that is used to achieve this is
    `nodePolling`. By specifying this to the hub at the node level, each node can
    specify its own frequency at which it can be health-checked. The command to configure
    your node is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个配置参数，我们可以指定中心节点可以多频繁地轮询节点以检查其可用性。用于实现此目的的参数是`nodePolling`。通过在节点级别指定此参数到中心节点，每个节点可以指定自己的健康检查频率。配置节点的命令如下：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now the hub will poll this node every 10 seconds, to check its availability.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，中心节点将每10秒轮询此节点一次，以检查其可用性。
- en: Unregistering an unavailable node
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注销不可用的节点
- en: Although the `nodePolling` configuration will make the hub poll the node often,
    the `unregisterIfStillDownAfter` configuration will let the hub unregister the
    node if the poll doesn't produce an expected result. Let's say a node is down,
    and the hub tries to poll the node and is unable to connect to it. At this point,
    how long the hub is going to poll for the availability of the node is determined
    by the `unregisterIfStillDownAfter` parameter. Beyond this time, the hub will
    unregister the node.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`nodePolling`配置会使中心节点频繁轮询节点，但`unregisterIfStillDownAfter`配置将允许中心节点在轮询没有产生预期结果时注销节点。假设一个节点已关闭，中心节点尝试轮询该节点并无法连接到它。在这种情况下，中心节点将轮询多长时间以确定节点的可用性由`unregisterIfStillDownAfter`参数决定。超过这个时间，中心节点将注销节点。
- en: 'The command to do that is as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 执行该操作的命令如下：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, the hub will poll the node every five seconds; if the node is down, the
    polling will continue for 20 seconds, that is, the hub will poll four times and
    then unregister the node from the grid.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，中心节点将每五秒轮询一次节点；如果节点宕机，轮询将持续20秒，即中心节点将轮询四次，然后从网格中注销该节点。
- en: Setting the browser timeout
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置浏览器超时
- en: 'This configuration is to let the node know how long it should wait before it
    ends a test script session when the browser seems to hang. After this time, the
    node will abort the browser session and start with the next waiting test script.
    The configuration parameter for this is `browserTimeout`. The command to specify
    that is as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置是为了让节点知道在浏览器似乎挂起之前它应该等待多长时间来结束测试脚本会话。在此时间之后，节点将终止浏览器会话并开始下一个等待的测试脚本。此配置参数为`browserTimeout`。指定该参数的命令如下：
- en: '[PRE16]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: So, these are the some of the configuration parameters that you can specify
    at the node's end to have better control over the Selenium Grid environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这些是一些你可以在节点端指定以更好地控制Selenium Grid环境的配置参数。
- en: Hub-configuration parameters
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 中心节点配置参数
- en: This section talks about some of the configuration parameters on the hub side.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了在中心节点上的一些配置参数。
- en: Waiting for a match of the desired capability
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 等待匹配所需能力
- en: As we saw earlier, when the test script asks for a test platform with a desired
    capability, the hub will reject the request if it doesn't find a suitable node
    with the desired capability.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，当测试脚本请求具有所需能力的测试平台时，如果中心节点找不到具有所需能力的合适节点，它将拒绝请求。
- en: 'Altering the value for the `throwOnCapabilityNotPresent` parameter can alter
    this behavior. By default, it is set to `true`, which means the hub will reject
    the request if it doesn''t find a suitable node with that capability. But setting
    this parameter to `false` will queue the request, and the hub will wait until
    a node with that capability is added to the grid. The command that has to be invoked
    is as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`throwOnCapabilityNotPresent`参数的值可以改变这种行为。默认情况下，它设置为`true`，这意味着如果中心节点找不到具有该能力的合适节点，它将拒绝请求。但将此参数设置为`false`将排队请求，中心节点将等待直到网格中添加了具有该能力的节点。必须调用的命令如下：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Now the hub will not reject the request, but will place the request in a queue
    and wait until the requested platform is available.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，中心节点不会拒绝请求，而是将请求放入队列中，等待直到请求的平台可用。
- en: Customized CapabilityMatcher
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定制的能力匹配器
- en: By default, the hub will use the `org.openqa.grid.internal.utils. DefaultCapabilityMatcher`
    class to match the requested node. If you do not like the implementation logic
    of the `DefaultCapabilityMatcher` class, you can extend the class, implement your
    own `CapabilityMatcher` class, and provide your own logic in it.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，中心节点将使用`org.openqa.grid.internal.utils.DefaultCapabilityMatcher`类来匹配请求的节点。如果你不喜欢`DefaultCapabilityMatcher`类的实现逻辑，你可以扩展该类，实现自己的`CapabilityMatcher`类，并在其中提供自己的逻辑。
- en: 'Once developed, you can ask the hub to use that class to match the capabilities
    with the nodes, using a configuration parameter named `capabilityMatcher`. The
    command to achieve this is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦开发完成，你可以要求中心节点使用该类来匹配节点与能力，使用一个名为`capabilityMatcher`的配置参数。实现此功能的命令如下：
- en: '[PRE18]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The hub will use the logic defined in your `CustomCapabilityMatcher` class to
    identify the nodes to be assigned to the test-script requests.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 中心节点将使用你在`CustomCapabilityMatcher`类中定义的逻辑来识别要分配给测试脚本请求的节点。
- en: WaitTimeout for a new session
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 新会话的等待超时
- en: 'When a capability-matched node is busy executing other test scripts, the latest
    test script will wait for the node to be available. By default, there is no wait
    timeout; that is, the test script will wait for the node to be available indefinitely.
    To alter that behavior and to let the test script throw an exception if it doesn''t
    get the node within a limited time, Selenium Grid opens a configuration that enables
    the test script to do so. The configuration parameter controlling that behavior
    is `newSessionWaitTimeout`. The command for that is as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个能力匹配的节点正忙于执行其他测试脚本时，最新的测试脚本将等待节点可用。默认情况下，没有等待超时；也就是说，测试脚本将无限期地等待节点可用。为了改变这种行为，并让测试脚本在有限时间内未获得节点时抛出异常，Selenium
    Grid打开一个配置，使测试脚本能够这样做。控制该行为的配置参数是`newSessionWaitTimeout`。该命令如下：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Here, the test script will wait for two minutes before it throws an exception
    saying it couldn't obtain a node to execute itself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，测试脚本将在抛出异常说它无法获取执行自身的节点之前等待两分钟。
- en: Different ways to specify the configuration
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定配置的不同方式
- en: There are two ways to specify the configuration parameter to the Selenium Grid's
    hub and node. The first one is what we have seen all this time; that is, specifying
    the configuration parameters over the command line. The second way of doing it
    is by providing a JSON file that contains all these configuration parameters.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方式可以将配置参数指定给 Selenium Grid 的中心节点和节点。第一种是我们一直看到的方式；即通过命令行指定配置参数。第二种方式是通过提供一个包含所有这些配置参数的
    JSON 文件来实现。
- en: 'A node configuration file (say, `nodeConfig.json`) — a typical JSON file having
    all the configuration parameters — looks similar to the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 节点配置文件（例如，`nodeConfig.json`）——一个典型的包含所有配置参数的 JSON 文件——看起来类似于以下内容：
- en: '[PRE20]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Once these files are configured, they can be provided to the node and the hub,
    using the following command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些文件配置完成，可以使用以下命令将它们提供给节点和中心节点：
- en: '[PRE21]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This way, you can specify the configuration of your hub and node using JSON
    files.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以使用 JSON 文件指定你的中心节点和节点的配置。
- en: Using cloud-based grids for cross-browser testing
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基于云的网格进行跨浏览器测试
- en: To set up a Selenium Grid for cross-browser testing, you need to set up physical
    or virtual machines with different browsers and operating systems. This requires
    an investment in the required hardware, software, and support to run the test
    lab. You also need to put in effort to keep this infrastructure updated with the
    latest versions and patches. Not everybody can afford these costs and the effort.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置用于跨浏览器测试的 Selenium Grid，你需要设置具有不同浏览器和操作系统的物理或虚拟机。这需要投资必要的硬件、软件和支持来运行测试实验室。你还需要投入努力，确保该基础设施使用最新版本和补丁更新。并非每个人都能承担这些成本和努力。
- en: Instead of investing and setting up a cross-browser test lab, you can easily
    outsource a virtual test lab to a third-party cloud provider for cross-browser
    testing. The Sauce Labs and BrowserStack are leading cloud-based cross-browser
    testing cloud providers. Both of these have support for over 400 different browser
    and operating system configurations, including mobile and tablet devices, and
    support running Selenium WebDriver tests in their cloud.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是投资和建立跨浏览器的测试实验室，你可以轻松地将虚拟测试实验室外包给第三方云服务提供商进行跨浏览器测试。Sauce Labs 和 BrowserStack
    是领先的基于云的跨浏览器测试云服务提供商。这两者都支持超过400种不同的浏览器和操作系统配置，包括移动和平板设备，并支持在它们的云中运行 Selenium
    WebDriver 测试。
- en: Here, we will set up and run a test in the Sauce Labs cloud. The steps are similar
    if you want to run tests with BrowserStack.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将设置并运行 Sauce Labs 云中的测试。如果你想要使用 BrowserStack 运行测试，步骤是类似的。
- en: 'Let''s set up and run a test with Sauce Labs. You need a free Sauce Labs account,
    to begin with. Register for a free account on Sauce Labs at [https://saucelabs.com/,](https://saucelabs.com/)
    and get the username and access key. Sauce Labs provides all the needed hardware
    and software infrastructure to run your tests in the cloud. You can get the access
    key from the Sauce Labs dashboard after you log in from the My Account page:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Sauce Labs 设置和运行一个测试。你需要一个免费的 Sauce Labs 账户才能开始。在 Sauce Labs 上注册一个免费账户[https://saucelabs.com/](https://saucelabs.com/)，并获取用户名和访问密钥。Sauce
    Labs 提供所有必要的硬件和软件基础设施，以便你在云中运行测试。你可以在登录后从“我的账户”页面获取访问密钥：
- en: '![](img/d93aacf3-b822-4864-80df-e010bfede7a3.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d93aacf3-b822-4864-80df-e010bfede7a3.png)'
- en: 'Let''s create a new test to execute on the Sauce Labs cloud. We need to add
    the Sauce username and access key to the test, and change the Grid address to
    the Sauce Labs Grid address instead of the local Selenium Grid, as shown in the
    following code example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 Sauce Labs 云上创建一个新的测试来执行。我们需要将 Sauce 用户名和访问密钥添加到测试中，并将网格地址更改为 Sauce Labs
    网格地址，而不是本地 Selenium 网格，如下面的代码示例所示：
- en: '[PRE22]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'When you execute the test, it will connect to Sauce Lab''s hub and request
    the desired operating system and browser configuration. The sauce Labs cloud-management
    software automatically assigns a virtual machine for our test to run on a given
    configuration. We can monitor this run on a dashboard, as shown in the following
    screenshot:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行测试时，它将连接到 Sauce Lab 的中心节点并请求所需的操作系统和浏览器配置。Sauce Labs 的云管理软件会自动分配一个虚拟机，以便在我们的测试中运行在给定的配置上。我们可以在以下截图所示的仪表板上监控此运行：
- en: '![](img/dc6ef1a3-3007-4769-8682-456574cbfa93.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dc6ef1a3-3007-4769-8682-456574cbfa93.png)'
- en: 'We can further drill down into the session and see exactly what happened during
    the run. It provides details of the Selenium commands, screenshots, logs, and
    a video of the execution on multiple tabs, as shown in the following screenshot:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步深入会话，查看运行期间确切发生了什么。它提供了 Selenium 命令、截图、日志以及多个标签页上的执行视频的详细信息，如下面的截图所示：
- en: '![](img/fae2e51c-21b7-4d7b-9b47-2f29c7a10bd8.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fae2e51c-21b7-4d7b-9b47-2f29c7a10bd8.png)'
- en: Selenium details window
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 详细信息窗口
- en: You can also test applications that are securely hosted on internal servers,
    by using the Sauce Connect utility. sauce connect creates a secure tunnel between
    your machine and the Sauce cloud.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用 Sauce Connect 工具测试安全托管在内部服务器上的应用程序。Sauce Connect 在您的机器和 Sauce 云之间创建一个安全隧道。
- en: Summary
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about Selenium Grid, how a hub and node will work,
    and, more importantly, how to configure your Selenium Grid to have better control
    over the environment and infrastructure. The Selenium Grid will enable cross-browser
    testing for the application by covering combinations of operating systems and
    browsers. We also saw how to use cloud services, such as Sauce Labs, to execute
    tests in a remote cloud environment.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 Selenium Grid 的相关知识，包括如何使 hub 和 node 工作，更重要的是，如何配置您的 Selenium Grid
    以更好地控制环境和基础设施。Selenium Grid 通过覆盖操作系统和浏览器的组合，将使应用程序能够进行跨浏览器测试。我们还看到了如何使用云服务，如 Sauce
    Labs，在远程云环境中执行测试。
- en: In the next [chapter](608e2a19-b767-45e2-97e9-446eb16b35b6.xhtml), we will learn
    how to create reusable and modular tests using the Page Object pattern.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用页面对象模式创建可重用和模块化的测试。
- en: Questions
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Which argument can be used to specify how many browser instances can be supported
    by the node?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个参数可以用来指定节点可以支持多少浏览器实例？
- en: Explain how Selenium Grid can be used to support Cross Browser Testing.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释如何使用 Selenium Grid 来支持跨浏览器测试。
- en: What is the URL you need to specify with RemoteWebDriver to run tests on Selenium
    Grid?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 RemoteWebDriver 运行 Selenium Grid 上的测试时，您需要指定哪个 URL？
- en: Selenium Grid Hub acts as a load balancer— true or false?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium Grid Hub 是否充当负载均衡器？—— 对或错？
- en: Further information
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'You can check out the following link for more information about the topics
    covered in this chapter:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过以下链接获取有关本章涵盖主题的更多信息：
- en: Read more about Selenium Grid at [https://www.seleniumhq.org/docs/07_selenium_grid.jsp](https://www.seleniumhq.org/docs/07_selenium_grid.jsp)
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://www.seleniumhq.org/docs/07_selenium_grid.jsp](https://www.seleniumhq.org/docs/07_selenium_grid.jsp)上了解更多关于
    Selenium Grid 的信息
