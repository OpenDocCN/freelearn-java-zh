["```java\nString name = \"Java Everywhere\"; \nLocalDateTime dateTime = new LocalDateTime.now();\n```", "```java\nvar name = \"Java Everywhere\";            // variable 'name' inferred as \n                                         // String \nvar dateTime = new LocalDateTime.now();  // var 'dateTime' inferred as \n                                         // LocalDateTime \n```", "```java\nHashMap<Integer, String> map = new HashMap<Integer, String>(); \n```", "```java\nvar map = new HashMap<Integer, String>();  \n```", "```java\nvar minAge;                   // uninitialized variable \nvar age = null;               // variable assigned a null value  \n```", "```java\npublic class Person { \n    { \n        var name = \"Aqua Blue\";         // instance initializer block \n    } \n\n    static { \n        var anotherLocalVar = 19876;    // static initializer block \n    } \n\n    Person() { \n        var ctr = 10;                   // constructor \n        for (var loopCtr = 0; loopCtr < 10; ++loopCtr) {   // loop -                                                            \n                                                           // for\n            switch(loopCtr) { \n                case 7 :{ \n                    var probability = ctr / loopCtr;       // switch \n                    System.out.println(probability); \n                    break; \n                } \n            } \n        } \n    } \n\n    public String readFile() throws IOException { \n        var filePath = \"data.txt\"; \n        // try with resources\n        try (var reader = new BufferedReader(new FileReader(filePath))) {    \n            return reader.readLine(); \n        } \n    } \n}  \n```", "```java\nclass Foo {   \n    public static void main(String args[]) {   \n        try {   \n           char[] name = new char[]{'S','t','r','i','n','g'};   \n           for (var c : name) {   \n               System.out.println(c + \":\"   + (c + 1 - 1));   \n           }   \n        }   \n        catch (var e) {   \n            //code   \n        }   \n    }   \n}   \n```", "```java\nvar counter = 9_009_998_992_887;       // code doesn't compile \n```", "```java\nvar counter = 9_009_998_992_887L;       // code compiles \n```", "```java\nvar aChar = (char)91; \n```", "```java\n// type of result inferred as int; 'result' stores 2 \nvar divResult = 5/2; \n\n// result of (5/2), that is 2 casted to a double; divResult stores 2.0 \nvar divResult = (double)(5/ 2); \n\n// operation of a double and int results in a double; divResult stores \n// 2.5 \nvar divResult = (double)5/ 2;\n```", "```java\nbyte b1 = 10; \nchar c1 = 9; \nvar sum = b1 + c1;        // inferred type of sum is int  \n```", "```java\nbyte cupsOfCoffee = 10; \nlong population = 10L; \nfloat weight = 79.8f; \ndouble distance = 198654.77; \n\nvar total1 = cupsOfCoffee + population;     // inferred type of total1 \n                                           // is long \nvar total2 = distance + population;        // inferred type of total2 \n                                           // is double \nvar total3 = weight + population;    // inferred type of total3 is \n                                          // float  \n```", "```java\nclass Parent { \n    void whistle() { \n        System.out.println(\"Parent-Whistle\"); \n    } \n} \nclass Child extends Parent { \n    void whistle() { \n        System.out.println(\"Child-Whistle\"); \n    } \n    void stand() { \n        System.out.println(\"Child-stand\"); \n    } \n} \nclass Test{ \n    public static void main(String[] args) { \n        var obj = new Child();                             \n        obj.whistle(); \n        obj.stand();     // type of obj inferred as Child \n    } \n}\n```", "```java\nclass Parent { \n    void whistle() { \n        System.out.println(\"Parent-Whistle\"); \n    } \n} \n\nclass Child extends Parent { \n    void whistle() { \n        System.out.println(\"Child-Whistle\"); \n    } \n    void stand() { \n        System.out.println(\"Child-stand\"); \n    } \n} \n\nclass Test{ \n    public static Parent getObject(String type) { \n        if (type.equals(\"Parent\")) \n            return new Parent(); \n        else \n            return new Child(); \n    } \n\n    public static void main(String[] args) { \n        var obj = getObject(\"Child\"); \n        obj.whistle(); \n        obj.stand();              // This line doesn't compile \n    } \n} \n```", "```java\ninterface MarathonRunner{ \n    default void run() { \n        System.out.println(\"I'm a marathon runner\"); \n    } \n} \n\nclass Child implements MarathonRunner { \n    void whistle() { \n        System.out.println(\"Child-Whistle\"); \n    } \n    void stand() { \n        System.out.println(\"Child-stand\"); \n    } \n}  \n```", "```java\nclass Test{ \n    public static void main(String[] args) { \n        var obj = new Child();              // inferred type of var obj \n                                            // is Child \n        obj.whistle(); \n        obj.stand();                     \n        obj.run(); \n    } \n}  \n```", "```java\nclass Test{ \n    public static MarathonRunner getObject() { \n        return new Child(); \n    } \n    public static void main(String[] args) { \n        var obj = getObject();     // inferred type of var obj is \n                                   // MarathonRunner \n        obj.whistle(); \n        obj.stand(); \n        obj.run(); \n    } \n}\n```", "```java\nchar name[] = {'S','t','r','i','n','g'};\n```", "```java\nvar name[] = {'S','t','r','i','n','g'};\nvar[] name = {'S','t','r','i','n','g'};\nvar name = {'S','t','r','i','n','g'};\n```", "```java\nvar name = new char[]{'S','t','r','i','n','g'};\n```", "```java\nList<String> names = new ArrayList<>();  \n```", "```java\nvar names = new ArrayList<>(); \nnames.add(1); \nnames.add(\"Mala\"); \nnames.add(10.9); \nnames.add(true); \n```", "```java\nvar names = new ArrayList<String>(); \n```", "```java\nclass Pen implements Comparable<Pen> {   \n    String name;   \n    double price;   \n    public Pen(String name, double price) {   \n        this.name = name;   \n        this.price = price;   \n    }   \n    public int compareTo(Pen pen) {   \n        return ((int)(this.price - pen.price));   \n    }   \n    public String toString() {   \n        return name;   \n    }   \n\n    public static void main(String   args[]) {   \n        var pen1 = new Pen(\"Lateral\",   219.9);   \n        var pen2 = new Pen(\"Pinker\",   19.9);   \n        var pen3 = new Pen(\"Simplie\",   159.9);   \n\n        var penList = List.of(pen1, pen2,   pen3);   \n\n        Collections.sort(penList);   \n        for (var a : penList)    \n            System.out.println(a);   \n    }   \n}   \n```", "```java\ninterface MarathonRunner { \n    default void run() { \n        System.out.println(\"I'm a marathon runner\"); \n    } \n} \nclass Child implements MarathonRunner { \n    void whistle() { \n        System.out.println(\"Child-Whistle\"); \n    } \n    void stand() { \n        System.out.println(\"Child-stand\"); \n    } \n} \nclass Marathon { \n    public static void main(String[] args) { \n        var aRunner = new Child();         // Inferred type is Child \n        start(aRunner);                    // ok to pass it to method start \n                                           // (param - MarathonRunner) \n    } \n    public static void start(MarathonRunner runner) { \n        runner.run(); \n    } \n}  \n```", "```java\nvar age = 9;     // type of variable age inferred as int \nage = 10.9;      // can't assign 10.9 to variable of type int \n\nvar query = new StringBuilder(\"SELECT\");         // Type of variable \n                                              // query is StringBuilder \nquery = query.toString() + \"FROM\" + \"TABLE\";     // won't compile;  \n                                                 // can't assign String                                                                                                 \n                                                // to variable query\n```", "```java\nvar age = 29;           // inferred type of age is int \n```", "```java\nbyte age = 29;                // Option 1 - no type inference \nvar age = (byte)29;           // Option 2 - explicit casting \n```", "```java\nvar letter = (char)97;        // inferred type of letter is char \nvar debit = (float)17.9;      // inferred type of debit is float  \n```", "```java\nclass Automobile {} \nclass Car extends Automobile { \n    void check() {} \n} \nclass Test{ \n    public static void main(String[] args) { \n        var obj = (Automobile)new Car();                             \n        obj.check();     // Won't compile; type of obj is Automobile \n    } \n} \n```", "```java\nvar name = (String)null;             // Code compiles \n```", "```java\nList<Integer> myListOfIntegers = Collections.<Integer>emptyList(); // 1\n```", "```java\n List<Integer> myListOfIntegers = Collections.emptyList(); // 1 \n```", "```java\nList<String> myThings = new ArrayList<String>(); \n```", "```java\nList<String> myThings = new ArrayList<>();  \n```", "```java\nList<String> myThings = new ArrayList();  \n```", "```java\nclass MyClass<T> { \n   public <X> void print(X x) { \n         System.out.println(x.getClass()); \n   } \n}  \n```", "```java\nMyClass<String> myClass = new MyClass<>(); \nmyClass.<Boolean>deliver(new Boolean(\"true\"));     \nmyClass.deliver(new Boolean(\"true\")); \n```", "```java\nConsumer<String> consumer = (String s) -> System.out.println(s);\n```", "```java\nConsumer<String> consumer = s -> System.out.print(s);\n```", "```java\nclass var {}          // can't use var as class name\ninterface var {}      // can't use var as interface name\nclass Demo {\n    int var = 100;               // can't use var as instance variable \n                                 // name\n    static long var = 121;       // can't use var as static variable \n                                 // name\n\n    void var() {                 // can't use var as method name\n        int var = 10;            // cant use var as the name of a local \n                                 // variable\n    }\n    void aMethod(String var) {}  // can't use var as the name of method parameter\n}\n```", "```java\n// inferred type java.util.ImmutableCollections$ListN \nvar a = List.of(1, \"2\", new StringBuilder());\nvar b = List.of(new ArrayList<String>(), LocalTime.now());\n```", "```java\nvar i = getData();             // what does getData() return? Is 'i' a \n                              // good name? \n```", "```java\nvar database = new URL(\"http://www.eJavaGuru.com/malagupta.html\"); \nvar query = con.getConnection(); \n```"]