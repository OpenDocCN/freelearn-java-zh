- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Highly concurrent applications such as user interfaces have traditionally managed
    state through the mutation of global variables. Various actions are coordinated
    via event handlers, which are procedural in nature.
  prefs: []
  type: TYPE_NORMAL
- en: Over time, the complexity of a system increases. New feature requests come in,
    and it becomes harder and harder to reason about the application.
  prefs: []
  type: TYPE_NORMAL
- en: Functional programming presents itself as an extremely powerful ally in building
    reliable systems by eliminating mutable states and allowing applications to be
    written in a declarative and composable way.
  prefs: []
  type: TYPE_NORMAL
- en: Such principles gave rise to Functional Reactive Programming and Compositional
    Event Systems (CES), programming paradigms that are exceptionally useful in building
    asynchronous and concurrent applications. They allow you to model mutable states
    in a functional style.
  prefs: []
  type: TYPE_NORMAL
- en: This book is devoted to these ideas and presents a number of different tools
    and techniques to help manage the increasing complexity of modern systems.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](part0015_split_000.html#page "Chapter 1. What is Reactive Programming?"),
    *What is Reactive Programming?*, starts by guiding you through a compelling example
    of a reactive application written in ClojureScript. It then takes you on a journey
    through the history of Reactive Programming, during which some important terminology
    is introduced, setting the tone for the following chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](part0021_split_000.html#page "Chapter 2. A Look at Reactive Extensions"),
    *A Look at Reactive Extensions*, explores the basics of this Reactive Programming
    framework. Its abstractions are introduced and important subjects such as error
    handling and back pressure are discussed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](part0028_split_000.html#page "Chapter 3. Asynchronous Programming
    and Networking"), *Asynchronous Programming and Networking*, walks you through
    building a stock market application. It starts by using a more traditional approach
    and then switches to an implementation based on Reactive Extensions, examining
    the trade-offs between the two.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](part0033_split_000.html#page "Chapter 4. Introduction to core.async"),
    *Introduction to core.async*, describes core.async, a library for asynchronous
    programming in Clojure. Here, you learn about the building blocks of Communicating
    Sequential Processes and how Reactive Applications are built with core.async.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](part0040_split_000.html#page "Chapter 5. Creating Your Own CES
    Framework with core.async"), *Creating Your Own CES Framework with core.async*,
    embarks on the ambitious endeavor of building a CES framework. It leverages knowledge
    gained in the previous chapter and uses core.async as the foundation for the framework.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](part0045_split_000.html#page "Chapter 6. Building a Simple ClojureScript
    Game with Reagi"), *Building a Simple ClojureScript Game with Reagi*, showcases
    a domain where Reactive frameworks have been used for great effects in games development.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](part0048_split_000.html#page "Chapter 7. The UI as a Function"),
    *The UI as a Function*, shifts gears and shows how the principles of functional
    programming can be applied to web UI development through the lens of Om, a ClojureScript
    binding for Facebook''s React.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](part0055_split_000.html#page "Chapter 8. Futures"), *Futures*,
    presents futures as a viable alternative to some classes'' reactive applications.
    It examines the limitations of Clojure futures and presents an alternative: imminent,
    a library of composable futures for Clojure.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](part0061_split_000.html#page "Chapter 9. A Reactive API to Amazon
    Web Services"), *A Reactive API to Amazon Web Services*, describes a case study
    taken from a real project, where a lot of the concepts introduced throughout this
    book have been put together to interact with a third-party service.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A](part0070_split_000.html#page "Appendix A. The Algebra of Library
    Design"), *The Algebra of Library Design*, introduces concepts from Category Theory
    that are helpful in building reusable abstractions. The appendix is optional and
    won''t hinder learning in the previous chapters. It presents the principles used
    in designing the futures library seen in [Chapter 8](part0055_split_000.html#page
    "Chapter 8. Futures"), *Futures*.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix B](part0076.html#page "Appendix B. Bibliography"), *Bibliography*,
    provides all the references used throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book assumes that you have a reasonably modern desktop or laptop computer
    as well as a working Clojure environment with leiningen (see [http://leiningen.org/](http://leiningen.org/))
    properly configured.
  prefs: []
  type: TYPE_NORMAL
- en: Installation instructions depend on your platform and can be found on the leiningen
    website (see [http://leiningen.org/#install](http://leiningen.org/#install)).
  prefs: []
  type: TYPE_NORMAL
- en: You are free to use any text editor of your choice, but popular choices include
    Eclipse (see [https://eclipse.org/downloads/](https://eclipse.org/downloads/))
    with the Counterclockwise plugin (see [https://github.com/laurentpetit/ccw](https://github.com/laurentpetit/ccw)),
    IntelliJ ([https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/))
    with the Cursive plugin (see [https://cursiveclojure.com/](https://cursiveclojure.com/)),
    Light Table (see [http://lighttable.com/](http://lighttable.com/)), Emacs, and
    Vim.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for Clojure developers who are currently building or planning to
    build asynchronous and concurrent applications and who are interested in how they
    can apply the principles and tools of Reactive Programming to their daily jobs.
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge of Clojure and leiningen—a popular Clojure build tool—is required.
  prefs: []
  type: TYPE_NORMAL
- en: The book also features several ClojureScript examples, and as such, familiarity
    with ClojureScript and web development in general will be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Notwithstanding, the chapters have been carefully written in such a way that
    as long as you possess knowledge of Clojure, following these examples should only
    require a little extra effort.
  prefs: []
  type: TYPE_NORMAL
- en: As this book progresses, it lays out the building blocks required by later chapters,
    and as such my recommendation is that you start with [Chapter 1](part0015_split_000.html#page
    "Chapter 1. What is Reactive Programming?"), *What is Reactive Programming?*,
    and work your way through subsequent chapters in order.
  prefs: []
  type: TYPE_NORMAL
- en: A clear exception to this is [Appendix A](part0070_split_000.html#page "Appendix A. The
    Algebra of Library Design"), *The Algebra of Library Design*, which is optional
    and can be read independent of the others—although reading [Chapter 8](part0055_split_000.html#page
    "Chapter 8. Futures"), *Futures,* might provide a useful background.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "We
    can include other contexts through the use of the `include` directive."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus, or dialog boxes, for example, appear in the text like
    this: "If this was a web application our users would be presented with a web server
    error such as the **HTTP code 500 – Internal Server Error**."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **errata** **submission** **form** link,
    and entering the details of your errata. Once your errata are verified, your submission
    will be accepted and the errata will be uploaded on our website, or added to any
    list of existing errata, under the Errata section of that title. Any existing
    errata can be viewed by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of this book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
