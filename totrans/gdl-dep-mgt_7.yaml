- en: Chapter 7. Publishing to an Ivy Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You learned in a previous chapter how we can publish our project artifacts to
    a Maven repository. In this chapter, we are going to use an Ivy repository to
    which we can publish.
  prefs: []
  type: TYPE_NORMAL
- en: Just as with publishing to a Maven repository, we are going to use the new and
    incubating publishing feature in Gradle to publish to an Ivy repository.
  prefs: []
  type: TYPE_NORMAL
- en: Defining publications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must add the `ivy-publish` plugin to our project to be able to publish our
    artifacts to an Ivy repository. The plugin allows us to use the Ivy format to
    describe our artifacts that need to be published.
  prefs: []
  type: TYPE_NORMAL
- en: The `ivy-publish` plugin is based on the general `publishing` plugin. The `publishing`
    plugin adds a new `publishing` extension to our project. We can use a `publications`
    configuration block in our build script to configure the artifacts we want to
    publish and the repositories we want to deploy to. The `publications` extension
    has the `PublishingExtension` type in the `org.gradle.api.publish` package. The
    plugin also adds a general life cycle `publish` task to the project. Other tasks
    can be added as task dependencies to this task, so with a single `publish` task,
    all the project's publications can be published.
  prefs: []
  type: TYPE_NORMAL
- en: The `ivy-publish` plugins also adds some extra task rules to the project. There
    is a task to generate an Ivy descriptor file to each publication in the project.
    The plugins also add a task rule based on a combination of the publication and
    the repository to publish a publication to the specified repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an example build file and apply the `ivy-publish` plugin to see
    the new task:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will invoke the `tasks` task from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the output, we see the `publish` task. The dynamic task rules to publish
    single publications to repositories are not shown.
  prefs: []
  type: TYPE_NORMAL
- en: To configure our publications, we must first add a `publishing` configuration
    block. Inside the block, we will define the `publications` configuration block.
    In this block, we define a publication. A publication defines what needs to be
    published. The `ivy-publish` plugin expects that a publication of the `IvyPublication`
    type is found in the `org.gradle.api.publish.ivy` package. Besides the artifacts
    that need to be published, we can also define details for the generated Ivy descriptor
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Defining publication artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A publication we define must have a unique name in our project. We can add multiple
    publications with their own name inside a `publications` configuration block.
    To add an artifact, we can use the `artifact` method in the publication definition.
    We can also use the `artifacts` property to directly set all artifacts.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define the artifact with the `artifact` method in the ways described
    in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Type | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `AbstractArchiveTask` | The information for the artifact is extracted from
    the archive task. The artifact is an instance of `PublishArtifact` in the `org.gradle.api.artifacts`
    package. |'
  prefs: []
  type: TYPE_TB
- en: '| `File` | The information for the artifact is extracted from the filename.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `Map` | This is another way to define artifacts. The map must contain a `source`
    key referencing a file or archive task and other properties we can use, such as
    `classifier` and `extension`, to further configure the artifact. |'
  prefs: []
  type: TYPE_TB
- en: Using archive task artifacts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the following example build file, we define a new publication with the `publishJar`
    name and we define the output of the `jar` archive task as an artifact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we run the `tasks` task, and in the output, we see new generated tasks
    to publish this publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Notice the extra task, `generateDescriptorFileForPublishJarPublication`. The
    name of the `publishJar` publication is used for this task. Gradle uses the following
    pattern for a task to generate an Ivy descriptor XML file for a `generateDescriptorFileFor<publicationName>Publication`
    publication. We cannot yet invoke the task because we also need to set the `group`
    and `version` project properties, but we will see this in the section about generating
    an Ivy descriptor file. We will now focus on defining the artifacts for a publication
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: We are not restricted to one artifact for a publication; we can add more by
    invoking the `artifact` method multiple times. We can even use the `artifacts`
    property to assign multiple artifacts. It is important that each artifact has
    unique `classifier` and `extension` property values for a single publication.
    Gradle will check this before we can invoke any tasks, so we immediately get an
    error message when the artifacts don't have a unique combination of `classifier`
    and `extensions` property values.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we add two extra artifacts to our publication
    with the `artifact` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of using the `artifact` method, we can also use the `artifacts` property
    and assign multiple artifacts. Each of the artifacts we assign must have a unique
    combination of `classifier` and `extension` property values. In the next example
    build file, we will use the same artifacts as in the previous example, but this
    time, we will assign them to the `artifacts` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Using file artifacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of an archive task, we can also use a file as an artifact. Gradle tries
    to extract the `extension` and `classifier` properties from the filename. We can
    also configure these properties ourselves when we add the file as a publication
    artifact.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use the `src/files/README` and `src/files/COPYRIGHT`
    files as a publication artifact:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Using software components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides the `artifact` method and the `artifacts` property, we can also use
    the `from` method inside a `publications` configuration block. We specify a Gradle
    `SoftwareComponent` object as an argument to the `from` method. The `java` plugin
    adds a `SoftwareComponent` object with the name `java`, and it includes the `jar`
    artifact and all runtime dependencies. The `war` plugin adds the `war` artifact
    as a `SoftwareComponent` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build file, we will apply the `war` plugin to our project.
    The `war` plugin extends the `java` plugin, so we will also implicitly apply the
    `java` plugin to our project. We will also define two publications, with each
    using the `SoftwareComponent` object from both plugins:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Generating Ivy descriptor files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important part of an Ivy publication is the descriptor file. We already saw
    that Gradle added a `generateDescriptorFile<publicationName>` task to our project.
    Furthermore, we can define some properties of the descriptor file inside a publication
    configuration. Gradle also offers a hook to customize the generated descriptor
    file even further.
  prefs: []
  type: TYPE_NORMAL
- en: 'Gradle uses the project''s `version`, `group`, `name`, and `status` properties
    for the `info` element in the Ivy descriptor file generated. We will create a
    new example build file where we define the project properties, so they will be
    included in the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we execute the `generateDescriptorFileForSamplePublication` task. An `ivy.xml`
    file is created in the `build/publications/sample` directory. If we open the file,
    we can see that the `info` element attributes are filled with the values from
    our Gradle build file. The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can override the values for `organisation`, `module`, `revision`, `status`,
    and `branch` inside a publication configuration. We need to set the properties
    in the configuration block of `IvyPublication`. The `status` and `branch` properties
    need to be set via the `descriptor` property. Via the `descriptor` property, we
    can also add new child elements to the `info` element in the Ivy descriptor file.
    In the next example build file, we will use these methods to set the values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We execute the `generateDescriptorFileForSamplePublication` task again, as
    shown in the following code, and we see the new values in the generated Ivy descriptor
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The dependencies of our project are added as dependencies in the generated descriptor
    file. This happens because we use the `from` method with the `components.java`
    value inside our publication configuration. The Java software component not only
    adds the `jar` archive tasks as an artifact, but also turns the project dependencies
    into dependencies in the descriptor file. If we use an archive task to define
    an artifact, the `dependencies` element is not added to the file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use the `artifact` method to define
    the publication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the `generateDescriptorFileForSamplePublication` task from the
    command line, the Ivy descriptor file is generated. The contents of the file are
    now as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, you will learn how we can customize the descriptor using
    the `withXml` method of the `descriptor` property. We can then, for example, also
    change the dependency scope of our project dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the descriptor file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add extra elements to the generated file, we must use the `descriptor` property
    that is part of `IvyPublication`. This returns an `IvyModuleDescriptorSpec` object,
    and we will invoke the `withXml` method from this object to add extra elements
    to the descriptor file. We use a closure with the `withXml` method to access an
    `XmlProvider` object. With the `XmlProvider` object, we can get a reference to
    a DOM element with the `asElement` method, a Groovy node object with the `asNode`
    method, or a `StringBuilder` object with the `asString` method to extend the descriptor
    XML.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we add the `description` and `issueMangement`
    elements to the generated descriptor file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'If we generate the Ivy descriptor file, we can see our newly created elements
    in the XML version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the previous section, you already learned that if we use the `from` method
    with the `components.java` value, all project dependencies are added as runtime
    dependencies in the generated descriptor file. This might not be what we always
    want. Using the `withXml` method, we can not only add new elements, but also change
    values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a hook where we change the module attribute of the info element.
    In the next build file, we will implement this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated descriptor file now has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Defining repositories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must configure an Ivy repository to publish our configured publication. We
    can choose a local directory or a repository manager, such as Artifactory or Nexus.
  prefs: []
  type: TYPE_NORMAL
- en: Publishing to a local directory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If we have a directory where we want to publish our publications, we must add
    it to the `publishing` configuration block. Inside the block, we add a `repositories`
    configuration block containing one or more named repositories. For the combination
    of each publication and repository, Gradle creates a task with the `publish<publicationName>To<repositoryName>Repository`
    name pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'We define a simple directory repository in the next example build file with
    the name `localRepo`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'First, we run the `tasks` task to see which task is added to the `Publishing
    tasks` group:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'To publish our project''s artifact, we can execute the `publishPublishJarPublicationToLocalRepoRepository`
    or `publish` tasks. The following output shows the tasks that are executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the task has been run, we get the following files in the `build/localRepo`
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Publishing to Artifactory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To publish our publications to an Artifactory repository, we only have to configure
    the repository in the `publications.repositories` configuration block. We can
    set the `url` property, a `name`, and optional security credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next example build file, we will use an Artifactory repository to publish
    the publication to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Gradle creates a new task, `publishPublishJarPublicationToArtifactoryRepository`,
    based on the publication name and the repository name. When we invoke the task,
    we can see that the publication is deployed to the Artifactory repository, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'When we open the Artifactory web application in a web browser, we can see that
    our project is now part of the repository, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing to Artifactory](img/image00139.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Publishing to Nexus
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another repository manager is Nexus. To publish to a Nexus repository manager
    is not much different from publishing to Artifactory or the local directory. We
    only have to change the `url` property to reference the repository and set the
    correct optional security credentials.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example build file, we use a Nexus repository manager:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'This time, the `publishPublishJarPublicationToNexusRepository` task is created.
    The task is also added as a task dependency to the `publish` task. The following
    code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'When we take a look at the Nexus web application inside the repository, we
    can see that our project is added to the repository, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Publishing to Nexus](img/image00140.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use the new and incubating `ivy-publish`
    plugin. You saw how we can declare our publications with the `publications` configuration
    block. Gradle will automatically create new tasks based on what we have declared
    as publications.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned how to customize the Ivy descriptor file that is generated
    by Gradle publishing tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you saw how we can configure repositories to deploy our publications
    to. We used a local directory using the `file` protocol, and we used the Artifactory
    and Nexus repository managers.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we saw how we can define the dependencies we need in our project.
    You learned how to customize the dependency resolution and how to define the repositories
    that store the dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Then, you learned how we can deploy our project as dependencies for others.
    We saw how we can publish to a Maven repository, including Bintray, and an Ivy
    repository. You now have the knowledge to manage dependencies in your Java projects
    with Gradle.
  prefs: []
  type: TYPE_NORMAL
