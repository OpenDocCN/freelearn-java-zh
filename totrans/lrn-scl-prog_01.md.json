["```java\nscala> \"10\".toIntOption\nres3: Option[Int] = Some(10)\nscala> \"TrUe\".toBooleanOption\nres4: Option[Boolean] = Some(true)\nscala> val bool = \"Not True\"\nbool: String = Not True\nscala> bool.toBooleanOption\nres5: Option[Boolean] = None\n```", "```java\ncase class User(name: String, surname: String, email: String)\n\ndef naiveToJsonString(p: Product): String =\n  (for { i <- 0 until p.productArity } yield\n    s\"\"\"\"${p.productElementName(i)}\": \"${p.productElement(i)}\"\"\"\")\n    .mkString(\"{ \", \", \", \" }\")\n```", "```java\nscala> val user = User(\"John\", \"Doe\", \"jd@mail.me\")\nuser: User = User(John,Doe,jd@mail.me)\nscala> naiveToJsonString(user)\nres1: String = { \"name\": \"John\", \"surname\": \"Doe\", \"email\": \"jd@mail.me\" }\n```", "```java\nscala> user.productElementName(3)\njava.lang.IndexOutOfBoundsException: 3\n at User.productElementName(<console>:1)\n ... 38 elided\n```", "```java\nobject UserDb {\n  def getById(id: Long): User = ???\n  def update(u: User): User = ???\n  def save(u: User): Boolean = ???\n}\n```", "```java\nimport UserDb._\nval userId = 1L\nsave(update(getById(userId)))\n```", "```java\ngetById(userId).pipe(update).pipe(save)\n```", "```java\nval doEverything = (getById _).andThen(update).andThen(save)\ndoEverything(userId)\n```", "```java\nscala> import scala.util.chaining._\nimport scala.util.chaining._\nscala> val lastTick = new java.util.concurrent.atomic.AtomicLong(0)\nlastTick: java.util.concurrent.atomic.AtomicLong = 0\nscala> def measure[A](a: A): Unit = {\n     | val now = System.currentTimeMillis()\n     | val before = lastTick.getAndSet(now)\n     | println(s\"$a: ${now-before} ms elapsed\")\n     | }\nmeasure: [A](a: A)Unit\nscala> def start(): Unit = lastTick.set(System.currentTimeMillis())\nstart: ()Unit\nscala> start()\nscala> val result = scala.io.StdIn.readLine().pipe(_.toIntOption).tap(measure)\nNone: 291 ms elapsed\nresult: Option[Int] = None\nscala> val anotherResult = scala.io.StdIn.readLine().pipe(_.toIntOption).tap(measure)\nSome(3456): 11356 ms elapsed\nanotherResult: Option[Int] = Some(3456)\n```", "```java\nscala> import scala.util.{Try, Using}\nimport scala.util.{Try, Using}\nscala> final case class Resource(name: String) extends AutoCloseable {\n | override def close(): Unit = println(s\"Closing $name\")\n | def lines = List(s\"$name line 1\", s\"$name line 2\")\n | }\ndefined class Resource\nscala> val List(r1, r2, r3) = List(\"first\", \"2\", \"3\").map(Resource)\nr1: Resource = Resource(first)\nr2: Resource = Resource(2)\nr3: Resource = Resource(3)\n\nscala> val lines: Try[Seq[String]] = for {\n     | u1 <- Using(r1)\n     | u2 <- Using(r2)\n     | u3 <- Using(r3)\n     | } yield {\n     | u1.lines ++ u2.lines ++ u3.lines\n     | }\nClosing 3\nClosing 2\nClosing first\nlines: scala.util.Try[Seq[String]] = Success(List(first line 1, first line 2, 2 line 1, 2 line 2, 3 line 1, 3 line 2))\n```", "```java\nscala> Set(1,2,3) == Seq(1,2,3)\nres4: Boolean = false\n```", "```java\ndef transform[C <: Iterable[Char]](i: C): Iterable[Char] = i \nmap { c => print(s\"-$c-\"); c.toUpper } \ntake { println(\"\\ntake\");  6 }\n```", "```java\nval str = \"Scala 2.13\"\nval view: StringView = StringView(str)\nval transformed = transform(view)    // A\nval strict = transform(str.toList)   // B\nprint(\"Lazy view constructed: \") \ntransformed.foreach(print) // C\nprint(\"\\nLazy view forced: \")\nprintln(transformed.to(List)) // D\nprintln(s\"Strict: $strict\") // E\n```", "```java\ntake\n-S--c--a--l--a-- --2--.--1--3-\ntake\nLazy view constructed: -S-S-c-C-a-A-l-L-a-A- - \nLazy view forced: -S--c--a--l--a-- -List(S, C, A, L, A, )\nStrict: List(S, C, A, L, A, )\n```", "```java\nscala> import scala.collection.SortedSet\nimport scala.collection.SortedSet\nscala> val set = SortedSet(1,2,3)\nset: scala.collection.SortedSet[Int] = TreeSet(1, 2, 3)\nscala> val ordered = set.map(math.abs)\nordered: scala.collection.SortedSet[Int] = TreeSet(1, 2, 3)\nscala> val unordered = set.to(Set).map(math.abs)\nunordered: scala.collection.immutable.Set[Int] = Set(1, 2, 3)\n```", "```java\nscala> val set1: Set[Int] = SortedSet(1,2,3)\n                                     ^\n       error: type mismatch;\n        found : scala.collection.SortedSet[Int]\n        required: Set[Int]\n```", "```java\nscala> ordered.forall(set)\nres3: Boolean = true\n```", "```java\nscala> IndexedSeq.fill(2)(\"A\")\nres6: IndexedSeq[String] = Vector(A, A)\n```", "```java\nimport scala.collection.decorators._\n```"]