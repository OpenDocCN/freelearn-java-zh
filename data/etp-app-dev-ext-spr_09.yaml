- en: Chapter 9. Getting Started with Ext JS 4
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。开始使用Ext JS 4
- en: '**Ext JS 4** is, by far, the most sophisticated JavaScript library available
    and provides an amazing set of widgets for almost all practical design concerns.
    It does everything we could possibly want in order to develop complex, cross-browser
    compatible applications that require a high degree of user interaction. In this
    chapter, we will:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ext JS 4**是迄今为止最复杂的JavaScript库，并为几乎所有实际设计问题提供了惊人的小部件集。它可以满足我们开发需要的一切，以开发需要高度用户交互的复杂、跨浏览器兼容的应用程序。在本章中，我们将：'
- en: Learn about core Ext JS 4 MVC concepts
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解核心的Ext JS 4 MVC概念
- en: Explore practical project design and development conventions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索实际项目设计和开发惯例
- en: Install the Ext JS 4 development framework and introduce Sencha Cmd
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Ext JS 4开发框架并引入Sencha Cmd
- en: Generate an Ext JS 4 application skeleton for the 3T application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为3T应用程序生成一个Ext JS 4应用程序骨架
- en: Ext JS has come a long way since starting out as an extension to the **Yahoo
    User Interface** (**YUI**) library. Each new version has been a significant improvement
    on the previous one and Ext JS 4 is no exception. Those new to Ext JS will appreciate
    the elegant framework design and consistent API, while those transitioning from
    Ext JS 3 will appreciate the improvements in many areas, including the introduction
    of the MVC design pattern. Regardless of your background, this chapter will help
    you be productive with Ext JS 4.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS自从作为**Yahoo用户界面**（**YUI**）库的扩展开始以来已经走过了很长的路。每个新版本都是对上一个版本的重大改进，Ext JS
    4也不例外。对于Ext JS的新手来说，他们会欣赏到优雅的框架设计和一致的API，而那些从Ext JS 3过渡过来的人则会欣赏到许多方面的改进，包括MVC设计模式的引入。无论你的背景如何，本章都将帮助你在Ext
    JS 4上提高工作效率。
- en: It should be noted that Ext JS 4 is not the only JavaScript MVC framework available
    today. `Angular.js` and `Backbone.js`, for example, are both very capable development
    frameworks, with MVC features similar to Ext JS 4\. They do not, however, have
    the extensive documentation, build tools, and commercial support that make Ext
    JS 4 so appropriate for enterprise application development.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Ext JS 4并不是当今唯一可用的JavaScript MVC框架。例如，`Angular.js`和`Backbone.js`都是非常有能力的开发框架，具有类似于Ext
    JS 4的MVC功能。然而，它们没有Ext JS 4那样广泛的文档、构建工具和商业支持，这使得Ext JS 4非常适合企业应用程序开发。
- en: The importance of application design
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序设计的重要性
- en: 'Technology aside, a thoughtful and consistent application design is critical
    when developing enterprise applications. The quality of the application''s architecture
    will determine the maintainability, scalability, and overall cost of the application
    during the project lifecycle. The benefits of a well-designed application include
    the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发企业应用程序时，除了技术之外，深思熟虑和一致的应用程序设计对于应用程序的可维护性、可扩展性和整体成本至关重要。良好设计的应用程序的好处包括以下几点：
- en: The application will be easier to understand. New team members will quickly
    come up to speed if there is a consistent way of doing things.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将更容易理解。如果有一致的做事方式，新团队成员将很快上手。
- en: The application will be easier to maintain. Enhancements and new functionalities
    will be far simpler to implement if you have consistent application design guidelines.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将更容易维护。如果你有一致的应用程序设计准则，增强和新功能的实现将会更简单。
- en: Code consistency. A well-designed application will have well-documented naming
    conventions, directory structures, and coding standards.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码一致性。一个设计良好的应用程序将有良好的命名约定、目录结构和编码标准。
- en: The application will be multideveloper friendly. On large projects, many people
    will be involved and a consistent design strategy will ensure that everyone is
    on the same page.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将更适合多开发人员。在大型项目中，许多人将参与其中，一致的设计策略将确保每个人都在同一页面上。
- en: Less-tangible benefits are often overlooked when you start a new project and
    excitedly work on the first prototype for the proof-of-concept presentation. The
    ability to refactor and scale a project from simple beginnings is often a key
    factor in enterprise application development. Regardless of how small the project
    may seem in the initial phases, you can be certain that business users will want
    to change workflows and layouts as soon as they become familiar with the application.
    New functionality will be requested and old functionality will be deprecated.
    Components will be moved and redesigned as the application evolves over time.
    A consistent and well-thought-out application design will make these project lifecycle
    processes less daunting. Thankfully, the Ext JS 4 application architecture itself
    encourages a formal and well-structured application design.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始一个新项目并兴奋地为概念验证演示制作第一个原型时，往往会忽视一些无形的好处。能够从简单的开始重构和扩展项目往往是企业应用开发的关键因素。无论项目在最初阶段看起来多么小，你可以肯定，一旦业务用户熟悉应用程序，他们就会想要改变工作流程和布局。新功能将被请求，旧功能将被弃用。组件将随着应用程序的演变而移动和重新设计。一个一致和深思熟虑的应用程序设计将使这些项目生命周期过程变得不那么可怕。值得庆幸的是，Ext
    JS 4应用程序架构本身鼓励正式和结构良好的应用程序设计。
- en: Ext JS 4 MVC concepts
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ext JS 4 MVC概念
- en: 'When the MVC design pattern was introduced for the first time in Ext JS 4,
    it completely revolutionized the Ext JS framework. Although MVC was well known
    as a design pattern, this was the first time a sophisticated JavaScript framework
    had implemented the strategy. There are several key benefits as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当MVC设计模式首次在Ext JS 4中引入时，它彻底改变了Ext JS框架。虽然MVC作为一种设计模式是众所周知的，但这是第一次一个复杂的JavaScript框架实现了这种策略。以下是一些关键的好处：
- en: The MVC design pattern organizes code into logical realms or component types,
    which makes the code easier to understand
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC设计模式将代码组织成逻辑领域或组件类型，使代码更易于理解
- en: MVC modularity can simplify component testing and refactoring as each object
    has a well-defined purpose
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC模块化可以简化组件测试和重构，因为每个对象都有明确定义的目的
- en: The MVC design pattern architecture encourages cleaner code, clearly separating
    data access, presentation, and business logic
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC设计模式架构鼓励更清晰的代码，明确分离数据访问、呈现和业务逻辑。
- en: These were a huge advantage over the previous Ext JS 3 where the only true MVC
    component was the **V** (**View**). It was left to the Ext JS 3 developer to architect
    the **M** (**Model**) and **C** (**Controller**) as best they could, which often
    led to confusing and inconsistent code. Let's now look at how Ext JS 4 defines
    the MVC design pattern.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是前一版Ext JS 3的巨大优势，那里唯一真正的MVC组件是**V**（**视图**）。留给Ext JS 3开发人员去构建**M**（**模型**）和**C**（**控制器**）的工作，通常导致混乱和不一致的代码。现在让我们看看Ext
    JS 4如何定义MVC设计模式。
- en: Model
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模型
- en: An Ext JS 4 model is a collection of properties that represent a domain entity.
    It may not come as a surprise that our 3T application will require a `Company`,
    `Project`, `Task`, `User`, and `TaskLog` model definition, just like they are
    represented in our Java domain layer. The main difference with our Java domain
    objects is that the Ext JS 4 model equivalent will be persistence aware. Thanks
    to the Ext JS 4 `data` package, each model instance will know how to persist and
    manage its state.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4模型是表示领域实体的属性集合。也许不足为奇的是，我们的3T应用程序将需要一个`Company`、`Project`、`Task`、`User`和`TaskLog`模型定义，就像它们在我们的Java领域层中所表示的那样。与我们的Java领域对象的主要区别是，Ext
    JS 4模型等效物将具有持久性意识。由于Ext JS 4的`data`包，每个模型实例将知道如何持久化和管理其状态。
- en: View
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图
- en: The Ext JS 4 view represents a logical visual component block and may itself
    include panels, toolbars, grids, forms, trees, and charts. An Ext JS 4 view always
    resides in its own file and should be as *dumb* as possible. This means that there
    should be no JavaScript business logic in the view; its purpose is to present
    data and provide interactive ability for the user.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4视图代表一个逻辑视觉组件块，可能包括面板、工具栏、网格、表单、树和图表。Ext JS 4视图始终驻留在自己的文件中，并且应尽可能“愚蠢”。这意味着视图中不应该有JavaScript业务逻辑；它的目的是呈现数据并为用户提供交互能力。
- en: Controller
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制器
- en: The Ext JS 4 controller can be loosely described as the glue that binds together
    your application logic. Controllers are central in handling event processing and
    cross-view interactions and define the application workflows. The vast majority
    of JavaScript business logic code will reside in controllers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4控制器可以被宽泛地描述为将应用程序逻辑粘合在一起的粘合剂。控制器在处理事件处理和跨视图交互方面起着核心作用，并定义应用程序工作流程。绝大多数JavaScript业务逻辑代码将驻留在控制器中。
- en: Ext JS 4 flexibility
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ext JS 4的灵活性
- en: Although we have a clear definition of the different MVC components, there is
    considerable implementation flexibility in the Ext JS 4 framework itself. We do
    not need to use controllers or models; in fact, we could easily build a fully
    working Ext JS 4 application using the same strategies followed in Ext JS 3\.
    This would be a mistake, however, and should be avoided at all costs. The benefits
    of leveraging the MVC architecture for enterprise application development are
    significant, including, but not limited to, a simpler and more robust code base.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们对不同的MVC组件有清晰的定义，但在Ext JS 4框架本身中有相当大的实现灵活性。我们不需要使用控制器或模型；事实上，我们可以轻松地使用在Ext
    JS 3中遵循的相同策略构建一个完全可用的Ext JS 4应用程序。然而，这将是一个错误，应该尽量避免。利用MVC架构进行企业应用程序开发的好处是显著的，包括但不限于更简单和更健壮的代码库。
- en: Ext JS 4 design conventions and concepts
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ext JS 4设计约定和概念
- en: The Sencha Ext JS 4 team has done an enormous amount of work in defining conventions,
    which you should consider following, for building enterprise applications. These
    include a standard directory structure, naming conventions, and detailed design
    best practices. We strongly urge you to browse the many tutorials and guides on
    the *Sencha Ext JS 4 Docs* website at [http://docs.sencha.com/extjs/4.2.2](http://docs.sencha.com/extjs/4.2.2)
    to become familiar with their application design recommendations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Ext JS 4团队在定义约定方面做了大量工作，您应该考虑遵循这些约定来构建企业应用程序。这些包括标准的目录结构、命名约定和详细的设计最佳实践。我们强烈建议您浏览*Sencha
    Ext JS 4文档*网站上的许多教程和指南，以熟悉他们的应用程序设计建议。
- en: This book will adhere to the common design strategies outlined by the Ext JS
    4 team, with minor differences noted and explained upon being introduced in their
    relevant sections. It is beyond the scope of the book to cover basic Ext JS 4
    concepts and you may need to refer to the *Sencha Ext JS 4 Docs* to fine-tune
    your understanding.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将遵循Ext JS 4团队概述的常见设计策略，对于其相关部分中引入的细微差异进行注释和解释。本书的范围不包括基本的Ext JS 4概念，您可能需要参考*Sencha
    Ext JS 4文档*来进一步理解。
- en: Practical conventions
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实用约定
- en: A well-structured Ext JS 4 project with consistent naming conventions will be
    a joy to work with. Enterprise applications with hundreds of files should be structured
    in a way that is easy to learn and maintain. It should be a rare occurrence when
    you ask a colleague, "Where is the file that displays the editing toolbar for
    the xyz widget?".
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构良好的Ext JS 4项目，具有一致的命名约定，将是一个令人愉快的工作。拥有数百个文件的企业应用程序应该以易于学习和维护的方式进行结构化。当你问同事，“显示xyz小部件的编辑工具栏的文件在哪里？”时，这应该是一个罕见的情况。
- en: Project structure
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目结构
- en: The Ext JS 4 directory structure, comprising a top-level app and subdirectories
    named `controller`, `model`, `store`, and `view`, should always be used. This
    is the default directory structure for any Ext JS 4 application and allows out-of-the-box
    integration with the Sencha Cmd build tools.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4的目录结构，包括顶级应用程序和名为`controller`、`model`、`store`和`view`的子目录，应始终使用。这是任何Ext
    JS 4应用程序的默认目录结构，并允许与Sencha Cmd构建工具的即插即用集成。
- en: 'Large projects have many hundreds of JavaScript files, so it is important to
    have a consistent project structure. Practical namespacing, especially in the
    `view` directory, can simplify a project structure and make it easier to find
    components. In [Chapter 10](ch10.html "Chapter 10. Logging On and Maintaining
    Users"), *Logging On and Maintaining Users*, [Chapter 11](ch11.html "Chapter 11. Building
    the Task Log User Interface"), *Building the Task Log User Interface*, and [Chapter
    12](ch12.html "Chapter 12. 3T Administration Made Easy"), *3T Administration Made
    Easy*, for example, we will be creating a `view` structure containing the files
    displayed in the following screenshot (on the left-hand side):'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 大型项目有数百个JavaScript文件，因此拥有一致的项目结构非常重要。实际的命名空间，特别是在`view`目录中，可以简化项目结构，使其更容易找到组件。例如，在[第10章](ch10.html
    "第10章。登录和维护用户") *登录和维护用户*，[第11章](ch11.html "第11章。构建任务日志用户界面") *构建任务日志用户界面*和[第12章](ch12.html
    "第12章。3T管理简单") *3T管理简单*中，我们将创建一个包含以下屏幕截图中显示的文件的`view`结构（在左侧）：
- en: '![Project structure](img/5457_09_16.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![项目结构](img/5457_09_16.jpg)'
- en: The preceding screenshot displays all views (on its right-hand side) in the
    same directory. Which is the better way? That depends on the nature of the project
    and the number of files. Enterprise projects are usually namespaced at a modular
    level with many subdirectories logically grouping related components. Smaller
    projects can just as easily have a flat structure where all files are found in
    the same directory. Whichever structure you choose, be consistent! It should be
    easy for any new developer to find a component without searching through a large
    number of files and directories.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的屏幕截图显示了同一目录中的所有视图（在其右侧）。哪种方式更好？这取决于项目的性质和文件数量。企业项目通常在模块级别进行命名空间划分，有许多子目录逻辑地分组相关组件。较小的项目也可以很容易地具有所有文件都在同一目录中的平面结构。无论选择哪种结构，都要保持一致！任何新开发人员都应该很容易找到组件，而不必搜索大量文件和目录。
- en: Naming conventions
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名约定
- en: We recommend defining a consistent naming convention that is easy to understand
    and follow. It should be easy to locate files, both on the filesystem and in the
    IDE you are using.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议定义一个易于理解和遵循的一致的命名约定。应该很容易在文件系统和您正在使用的IDE中找到文件。
- en: Naming stores and models
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名存储和模型
- en: Each model should be named as the singular of the entity it represents (for
    example, `Company`, `Project`, `Task`, `TaskLog`, and `User`). Each store should
    be named in a similar singular manner. We have seen `Store` added as a postfix
    to store names in Ext JS 3 (for example, `ProjectStore`), but this is not recommended
    for Ext JS 4\. Controllers automatically create a `get` function for each store
    by adding `Store` to the store name. Naming a store `ProjectStore` will result
    in a function named `getProjectStoreStore` in each controller that the store is
    referenced. For this reason, we recommend that you use store names without the
    `Store` postfix.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每个模型应该以它所代表的实体的单数形式命名（例如，`Company`、`Project`、`Task`、`TaskLog`和`User`）。每个存储应该以类似的单数方式命名。我们曾在Ext
    JS 3中看到存储名称后缀为`Store`（例如，`ProjectStore`），但这在Ext JS 4中不推荐。控制器会自动为每个存储创建一个`get`函数，通过在存储名称后添加`Store`。将存储命名为`ProjectStore`将导致在引用存储的每个控制器中生成一个名为`getProjectStoreStore`的函数。因此，我们建议您在不使用`Store`后缀的情况下使用存储名称。
- en: The store name in its singular form is often replaced with the plural version.
    For example, a Project store is often named `Projects`. Once again, consistency
    is the key. If you decide to use the plural form, use it for each store name.
    In our application, this would result in `Companies`, `Projects`, `Tasks`, `TaskLogs`,
    and `Users` stores. This tends to sometimes cause confusion in spelling; we have
    seen both Companies and Companys used for the plural version of Company. When
    English is not your first language, it may be difficult to know the correct plural
    name for entities, such as territories, countries, companies, currencies, and
    statuses. For this reason, we prefer using the singular version when naming stores.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 存储名称通常以其单数形式替换为复数形式。例如，项目存储通常被命名为`Projects`。一致性再次是关键。如果决定使用复数形式，那么每个存储名称都应该使用复数形式。在我们的应用程序中，这将导致`Companies`、`Projects`、`Tasks`、`TaskLogs`和`Users`存储。这有时会导致拼写混淆；我们曾看到`Companies`和`Companys`都用于复数形式的`Company`。当英语不是您的第一语言时，可能很难知道实体的正确复数名称，例如领土、国家、公司、货币和状态。因此，我们更喜欢在命名存储时使用单数形式。
- en: Naming views
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名视图
- en: 'Consider the following situation, in which we have been researching panels
    on the Sencha Docs website:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下情况，我们一直在研究Sencha Docs网站上的面板：
- en: '![Naming views](img/5457_10_10.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![命名视图](img/5457_10_10.jpg)'
- en: There are four different **Panel** files open (`Ext.grid.Panel`, `Ext.tab.Panel`,
    `Ext.form.Panel`, and `Ext.panel.Panel`). It is frustrating to try and locate
    the `Ext.grid.Panel` file in this situation; in the worst case, you will need
    to click on four different tab items. In a large project, there may be many panel
    containers worthy of the name `Panel`. We recommend giving each file a unique
    name, regardless of how it is namespaced. Unlike models and stores, where the
    same filename is used for the model and store namespaces, we do not recommend
    using the same filename between view classes. For example, the files `app.view.user.List`
    and `app.view.tasklog.List` cannot be easily differentiated in an IDE tab bar
    without examining the file content. It is far easier to make these filenames unique,
    even though they may exist in different namespaces.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 有四个不同的**Panel**文件打开（`Ext.grid.Panel`、`Ext.tab.Panel`、`Ext.form.Panel`和`Ext.panel.Panel`）。在这种情况下，尝试定位`Ext.grid.Panel`文件是令人沮丧的；在最坏的情况下，您将需要点击四个不同的选项卡项。在大型项目中，可能会有许多值得称为`Panel`的面板容器。我们建议为每个文件赋予一个唯一的名称，无论其命名空间如何。与模型和存储不同，模型和存储命名空间使用相同的文件名，我们不建议在视图类之间使用相同的文件名。例如，文件`app.view.user.List`和`app.view.tasklog.List`在IDE选项卡栏中很难区分。使这些文件名唯一要容易得多，即使它们可能存在于不同的命名空间中。
- en: The use of postfixing class types is another issue worthy of discussion. Ext
    JS 3 used typed postfixing on class names. This resulted in `GridPanel`, `FormPanel`,
    `TabPanel`, and `Panel` filenames. They were all panels. It was easy to identify
    what the class was by examining the filename. Ext JS 4 took a namespaced approach
    and dropped the descriptive name. The preceding examples became `Ext.grid.Panel`,
    `Ext.tab.Panel`, `Ext.form.Panel`, and `Ext.panel.Panel`. Each file is named `Panel`,
    which is not very helpful without knowledge of the directory it resides in.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀类类型的使用是另一个值得讨论的问题。Ext JS 3在类名后使用了类型后缀。这导致了`GridPanel`、`FormPanel`、`TabPanel`和`Panel`文件名。它们都是面板。通过检查文件名很容易确定类是什么。Ext
    JS 4采用了命名空间方法，并放弃了描述性名称。前面的例子变成了`Ext.grid.Panel`、`Ext.tab.Panel`、`Ext.form.Panel`和`Ext.panel.Panel`。每个文件都被命名为`Panel`，如果不知道它所在的目录，这并不是很有帮助。
- en: 'Whatever naming convention you implement, it is important to be consistent.
    We will use the following naming conventions:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您实施何种命名约定，保持一致是很重要的。我们将使用以下命名约定：
- en: All namespacing folder names will be lowercase.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有命名空间文件夹名称都将是小写。
- en: Any class that is used to represent a list of items will have the class name
    postfixed with `List`. The implementation of `List` is not important; we do not
    care if the listing is created using a grid, simple template, or data view.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于表示项目列表的任何类都将以“List”结尾。`List`的实现并不重要；我们不在乎列表是使用网格、简单模板还是数据视图创建的。
- en: Any class that is a form will be postfixed with `Form`.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何表单类都将以“Form”结尾。
- en: Any class that is a tree will be postfixed with `Tree`.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何树类都将以“Tree”结尾。
- en: Any class that is a window will be postfixed with `Window`.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何窗口类都将以“Window”结尾。
- en: Any component that manages the positioning and layout of a set of related components
    will be prefixed with `Manage`. Such a class will usually contain toolbars, lists,
    forms, and tab panels arranged in an appropriate layout.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何管理一组相关组件的定位和布局的组件都将以“Manage”为前缀。这样的类通常包含适当布局的工具栏、列表、表单和选项卡面板。
- en: You may wish to introduce other conventions appropriate for your development
    environment. This is fine; the important point is to be consistent and ensure
    that everyone understands and adheres to your conventions.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能希望引入适合您的开发环境的其他约定。这很好；重要的是要保持一致，并确保每个人都理解并遵守您的约定。
- en: Naming controllers
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名控制器
- en: We recommend that all controller class names be postfixed with `Controller`.
    This makes them easy to identify in any IDE. The controller responsible for user
    maintenance, for example, would hence be named `UserController`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议所有控制器类的名称都以“Controller”结尾。这样它们在任何IDE中都很容易识别。例如，负责用户维护的控制器将被命名为“UserController”。
- en: Naming xtypes
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命名xtype
- en: We recommend using the lowercase class name as `xtype` for each class. This
    is another very good reason to ensure that the filename for each view class is
    unique. The `UserList` `xtype` is `userlist`, the `UserForm` xtype is `userform`,
    and the `ManageUsers` xtype is `manageusers`. There can be no confusion.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议对每个类使用小写类名作为`xtype`。这是确保每个视图类的文件名唯一的另一个很好的理由。`UserList`的`xtype`是`userlist`，`UserForm`的`xtype`是`userform`，`ManageUsers`的`xtype`是`manageusers`。不会有混淆。
- en: The Ext JS 4 development environment
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Ext JS 4开发环境
- en: 'There are two core components required for Ext JS 4 development as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4开发所需的两个核心组件如下：
- en: '**The Sencha Cmd Tool**: This is a cross-platform, Java-based, command-line
    tool that provides many options to help manage the lifecycle of your applications'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sencha Cmd工具**：这是一个跨平台的基于Java的命令行工具，提供许多选项来帮助管理应用程序的生命周期'
- en: '**Ext JS 4 SDK (Software Development Kit)**: This contains all source files,
    examples, resources, and minified scripts required for application development'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Ext JS 4 SDK（软件开发工具包）**：包含所有应用程序开发所需的源文件、示例、资源和压缩脚本'
- en: We will now examine and install each of these components.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将检查并安装这些组件。
- en: Installing Sencha Cmd
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Sencha Cmd
- en: The Sencha Cmd Tool can be downloaded from [http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download).
    The file is approximately 46 MB and needs to be unzipped before running the setup
    process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Sencha Cmd工具可从[http://www.sencha.com/products/sencha-cmd/download](http://www.sencha.com/products/sencha-cmd/download)下载。该文件大小约为46MB，需要在运行安装过程之前解压缩。
- en: '![Installing Sencha Cmd](img/5457_09_02.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_02.jpg)'
- en: 'Click on **Next** to view the **License Agreement** section. You will need
    to accept the agreement before clicking on the **Next** button:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”查看“许可协议”部分。您需要接受协议后才能点击“下一步”按钮：
- en: '![Installing Sencha Cmd](img/5457_09_03.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_03.jpg)'
- en: 'The screen shown in the following screenshot prompts for an **Installation
    Directory**. We recommend that you install the Sencha Cmd Tool on a directory
    that is easily accessible (`/Users/Shared/` for Mac users and `C:\` for Windows
    users):'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中显示的屏幕提示输入“安装目录”。我们建议您将Sencha Cmd工具安装在易于访问的目录中（Mac用户为`/Users/Shared/`，Windows用户为`C:\`）：
- en: '![Installing Sencha Cmd](img/5457_09_04.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_04.jpg)'
- en: 'Click on **Next** to continue. This will show a prompt indicating that setup
    is now ready to begin installing Sencha Cmd on your computer. Click on **Next**
    again to continue the installation. The final prompt will confirm the installation
    of Sencha Cmd:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“下一步”继续。这将显示一个提示，指示安装程序现在准备开始在您的计算机上安装Sencha Cmd。再次点击“下一步”继续安装。最后的提示将确认安装Sencha
    Cmd：
- en: '![Installing Sencha Cmd](img/5457_09_05.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_05.jpg)'
- en: 'You can now view the installed files as shown in the following screenshot:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以查看已安装的文件，如下面的截图所示：
- en: '![Installing Sencha Cmd](img/5457_09_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_06.jpg)'
- en: 'To confirm the installation, open a command prompt (Windows) or terminal (Mac),
    type `sencha`, and press the *Enter* key. This will confirm that Sencha Cmd has
    been added to your system path and should result in output similar to that shown
    in the following screenshot:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认安装，打开命令提示符（Windows）或终端（Mac），输入`sencha`，然后按*Enter*键。这将确认Sencha Cmd已添加到系统路径，并应产生类似于以下截图所示的输出：
- en: '![Installing Sencha Cmd](img/5457_09_07.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_07.jpg)'
- en: 'Note that any currently open console/terminal windows will need to be closed
    and reopened to ensure that the installation path changes are reloaded. The final
    step is to check whether or not there are any upgrades available by typing:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，任何当前打开的控制台/终端窗口都需要关闭并重新打开，以确保重新加载安装路径更改。最后一步是通过输入来检查是否有可用的升级：
- en: '[PRE0]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command should display an appropriate message as shown in the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命令应该显示一个适当的消息，如下截图所示：
- en: '![Installing Sencha Cmd](img/5457_09_08.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_08.jpg)'
- en: 'It is possible to upgrade versions of Sencha Cmd by omitting the `––check`
    argument. For a full list of Sencha command-line options, refer to [http://docs.sencha.com/extjs/4.2.2/#!/guide/command](http://docs.sencha.com/extjs/4.2.2/#!/guide/command).
    This page also contains many helpful troubleshooting tips and explanations. In
    addition, you may also use the command-line help by executing `sencha help`. Executing
    the `sencha help` command will display detailed help options:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过省略`––check`参数来升级Sencha Cmd的版本。有关Sencha命令行选项的完整列表，请参阅[http://docs.sencha.com/extjs/4.2.2/#!/guide/command](http://docs.sencha.com/extjs/4.2.2/#!/guide/command)。此页面还包含许多有用的故障排除提示和解释。此外，您还可以通过执行`sencha
    help`来使用命令行帮助。执行`sencha help`命令将显示详细的帮助选项：
- en: '![Installing Sencha Cmd](img/5457_09_09.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![安装Sencha Cmd](img/5457_09_09.jpg)'
- en: Installing Ext JS 4 SDK
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Ext JS 4 SDK
- en: 'The SDK can be downloaded from [http://www.sencha.com/products/extjs](http://www.sencha.com/products/extjs).
    The previous step will have created a Sencha directory in the following location:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: SDK可以从[http://www.sencha.com/products/extjs](http://www.sencha.com/products/extjs)下载。上一步将在以下位置创建一个Sencha目录：
- en: '`C:\Sencha` for Windows users'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Windows用户，`C:\Sencha`
- en: '`/Users/Shared/Sencha` for Mac users'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Mac用户，`/Users/Shared/Sencha`
- en: 'After downloading the SDK, you should create an `ext-xxx` directory within
    this Sencha directory where `xxx` represents the version of the Ext JS 4 framework.
    You can then unzip the SDK into this directory resulting in the structure shown
    in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 下载SDK后，您应该在这个Sencha目录中创建一个`ext-xxx`目录，其中`xxx`代表Ext JS 4框架的版本。然后，您可以将SDK解压缩到此目录中，从而得到以下截图中显示的结构：
- en: '![Installing Ext JS 4 SDK](img/5457_09_10.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![安装Ext JS 4 SDK](img/5457_09_10.jpg)'
- en: You are now ready to initialize the Ext JS 4 3T application skeleton.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以初始化Ext JS 4 3T应用程序骨架。
- en: Generating the 3T Ext JS 4 application skeleton
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成3T Ext JS 4应用程序骨架
- en: 'The format of the skeleton generation command is:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 骨架生成命令的格式是：
- en: '[PRE1]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Running this command will copy all required SDK files to the `/path/to/MyApp`
    directory and create a skeleton of the resources ready for development. You must
    use full paths for both the `SDK` and `MyApp` directories.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此命令将所有必需的SDK文件复制到`/path/to/MyApp`目录，并创建资源的骨架，准备进行开发。您必须为`SDK`和`MyApp`目录使用完整路径。
- en: It is important to remember that the 3T application is a Maven project and that
    the web content root is the `webapp` directory located within the Maven directory
    structure. The project folder that was created in [Chapter 1](ch01.html "Chapter 1. Preparing
    Your Development Environment"), *Preparing Your Development Environment*, and
    the `webapp` directory (on Windows) can be found at `C:\projects\task-time-tracker\src\main\webapp`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住3T应用程序是一个Maven项目，Web内容根目录是Maven目录结构中的`webapp`目录。在[第1章](ch01.html "第1章。准备开发环境")中创建的项目文件夹*准备开发环境*和`webapp`目录（在Windows上）可以在`C:\projects\task-time-tracker\src\main\webapp`找到。
- en: On Mac, it can be found at `/Users/{username}/projects/task-time-tracker/src/main/webapp`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在Mac上，它可以在`/Users/{username}/projects/task-time-tracker/src/main/webapp`找到。
- en: 'The 3T application skeleton can now be generated by executing the following
    command (for Windows platforms):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过执行以下命令（适用于Windows平台）生成3T应用程序骨架：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Note that this command must be on a single line. The `TTT` argument represents
    the application name and will be used to generate the application namespace. We
    could have used `TaskTimeTracker`, but the abbreviated form is easier to write!
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此命令必须在一行上。`TTT`参数代表应用程序名称，并将用于生成应用程序命名空间。我们可以使用`TaskTimeTracker`，但缩写形式更容易书写！
- en: 'Executing the command from the terminal should produce considerable output,
    ending with some red errors:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端执行该命令应该会产生大量输出，最后显示一些红色错误：
- en: '![Generating the 3T Ext JS 4 application skeleton](img/5457_09_11.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![生成3T Ext JS 4应用程序骨架](img/5457_09_11.jpg)'
- en: Don't be too concerned with the **[ERR]** warnings; Sencha Cmd has identified
    the presence of the `index.html` file and replaced it with the Sencha Cmd version.
    The original file was copied to `index.html.$old`. We don't need the backup file
    (it was created during the NetBeans project creation process); it can safely be
    deleted.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 不要太担心**[ERR]**警告；Sencha Cmd已经识别出`index.html`文件的存在，并用Sencha Cmd版本替换了它。原始文件被复制到`index.html.$old`。我们不需要备份文件（它是在NetBeans项目创建过程中创建的）；可以安全地删除它。
- en: 'Opening the NetBeans IDE will now display many new files and directories within
    the `webapp` directory of the 3T project:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 打开NetBeans IDE现在将在3T项目的`webapp`目录中显示许多新文件和目录：
- en: '![Generating the 3T Ext JS 4 application skeleton](img/5457_09_12.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![生成3T Ext JS 4应用程序骨架](img/5457_09_12.jpg)'
- en: 'You can now run the project to view the output in the browser:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以运行项目以在浏览器中查看输出：
- en: '![Generating the 3T Ext JS 4 application skeleton](img/5457_09_13.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![生成3T Ext JS 4应用程序骨架](img/5457_09_13.jpg)'
- en: This output is the default Ext JS 4 application content in the `index.html`
    page, created by the `generate app` command when building the project skeleton.
    Let's now look at the key files that have been generated.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这是由`generate app`命令在构建项目骨架时在`index.html`页面中创建的默认Ext JS 4应用程序内容。现在让我们看看已生成的关键文件。
- en: The index.html file
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: index.html文件
- en: 'The `index.html` file consists of the following listings:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`文件包括以下列表：'
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note the `x-compile` and `x-bootstrap` tags within the page content. These are
    used by the Sencha Cmd Tool and allow the compiler to identify the scripts at
    the root of your application (the default file is always `app.js`). The compiler
    also ignores the bootstrap part of the framework that is used only during development.
    When generating a production application, all of the required files are pulled
    in during the build process. This will be covered in detail in [Chapter 13](ch13.html
    "Chapter 13. Moving Your Application to Production"), *Moving Your Application
    to Production*.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意页面内容中的`x-compile`和`x-bootstrap`标记。这些标记由Sencha Cmd工具使用，并允许编译器识别应用程序根目录中的脚本（默认文件始终为`app.js`）。编译器还会忽略仅在开发过程中使用的框架的引导部分。在生成生产应用程序时，所有所需的文件都将在构建过程中被拉取。这将在[第13章](ch13.html
    "第13章。将您的应用程序移至生产环境")中详细介绍，*将您的应用程序移至生产环境*。
- en: You should note that the `ext-dev.js` file is the only Ext JS 4 framework resource
    required. This file is used for dynamic JavaScript class loading during the development
    phase. The framework will then dynamically retrieve any JavaScript resources required
    by the application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意，`ext-dev.js`文件是唯一需要的Ext JS 4框架资源。该文件用于在开发阶段进行动态JavaScript类加载。然后框架将动态检索应用程序所需的任何JavaScript资源。
- en: The app.js and Application.js files
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app.js和Application.js文件
- en: 'The `app.js` file is the entry point of the application. The contents of the
    file, including generated comments, looks as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js`文件是应用程序的入口点。文件的内容，包括生成的注释，如下所示：'
- en: '[PRE4]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `Ext.application` extends the `TTT.Application` class, which is defined
    in the `app/Application.js` file as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Ext.application`扩展了`TTT.Application`类，该类在`app/Application.js`文件中定义如下：'
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: It is the `Application.js` file that will contain our 3T application-specific
    code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Application.js`文件将包含我们3T应用程序特定的代码。'
- en: Note
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should note that this is a different setup to that described in earlier
    Ext JS 4 tutorials where the `app.js` file contains application-specific properties
    (views, controllers, stores, and application functions). The approach outlined
    previously keeps all application-specific code within the `app` directory.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意，这与之前的Ext JS 4教程中描述的设置不同，其中`app.js`文件包含特定于应用程序的属性（视图、控制器、存储和应用程序函数）。之前概述的方法将所有特定于应用程序的代码保留在`app`目录中。
- en: 'Our first change to the autogenerated `Application.js` file is to add the `launch`
    function:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对自动生成的`Application.js`文件的第一个更改是添加`launch`函数：
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now remove `autoCreateViewport:true` from the `app.js` file as the logic
    for creating the viewport is now in the `launch` function. The `launch` function
    itself will be enhanced in the next chapter to implement the user logon, so there
    is plenty of code to come! The updated `app.js` file is as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以从`app.js`文件中删除`autoCreateViewport:true`，因为创建视图的逻辑现在在`launch`函数中。`launch`函数本身将在下一章中进行增强，以实现用户登录，所以还有很多代码要写！更新后的`app.js`文件如下：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The bootstrap.js and bootstrap.css files
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: bootstrap.js和bootstrap.css文件
- en: The `bootstrap.js` and `bootstrap.css` files were generated by Sencha Cmd and
    should not be edited. They are used internally to initialize and configure the
    development environment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`bootstrap.js`和`bootstrap.css`文件是由Sencha Cmd生成的，不应该被编辑。它们在内部用于初始化和配置开发环境。'
- en: The app/Viewport.js and app/view/Main.js files
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app/Viewport.js和app/view/Main.js文件
- en: 'An Ext JS 4 viewport is a container that resizes itself to use the entire browser
    window. The `Viewport.js` definition is as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Ext JS 4视图端口是一个容器，它会调整自身大小以使用整个浏览器窗口。`Viewport.js`的定义如下：
- en: '[PRE8]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There is only one view added to the `items` array; the `TTT.view.Main`, function,
    which has an `xtype` function called `app-main`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`items`数组中只添加了一个视图；`TTT.view.Main`函数，其中有一个名为`app-main`的`xtype`函数：'
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding file defines the border layout and textual content of the two
    regions that are displayed in the browser.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的文件定义了在浏览器中显示的两个区域的边框布局和文本内容。
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Not confident with Ext JS views, xtypes, viewports, border layouts, or panels?
    We recommend browsing and reviewing the basic Ext JS 4 component concepts at [http://docs.sencha.com/extjs/4.2.2/#!/guide/components](http://docs.sencha.com/extjs/4.2.2/#!/guide/components).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Ext JS视图、xtypes、视图端口、边框布局或面板不太自信？我们建议浏览和审查[http://docs.sencha.com/extjs/4.2.2/#!/guide/components](http://docs.sencha.com/extjs/4.2.2/#!/guide/components)中的基本Ext
    JS 4组件概念。
- en: The app/controller/Main.js file
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: app/controller/Main.js文件
- en: 'The final generated file we will examine is the `Main.js` controller:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要检查的最终生成的文件是`Main.js`控制器：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: There is no functionality in this class as there is nothing yet to control.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类中没有功能，因为还没有要控制的东西。
- en: Creating components using Sencha Cmd
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd创建组件
- en: It is possible to use Sencha Cmd to generate skeleton components. The most useful
    of these commands are those used to generate basic models.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用Sencha Cmd生成骨架组件。其中最有用的命令是用于生成基本模型的命令。
- en: Generating model skeletons
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成模型骨架
- en: 'A model skeleton can be generated very easily using the Sencha Cmd Tool. The
    syntax is as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd工具可以非常容易地生成模型骨架。语法如下：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This command must be executed in the application root (the directory in which
    the `app.js` file is found). Note that there must not be any spaces in the comma-separated
    field listing. The company model skeleton can be generated by executing the following
    command:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令必须在应用程序根目录（即`app.js`文件所在的目录）中执行。请注意，逗号分隔的字段列表中不得有任何空格。可以通过执行以下命令生成公司模型骨架：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The final `string` for the `companyName` field is not strictly required as
    the default property type is `string`, if not specified. The output from this
    command looks as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`companyName`字段，最终的`string`并不是严格要求的，因为默认属性类型是`string`，如果未指定。此命令的输出如下截图所示：
- en: '![Generating model skeletons](img/5457_09_14.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![生成模型骨架](img/5457_09_14.jpg)'
- en: 'The generated `Company.js` file is written into the `app/model` directory and
    has the following content:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的`Company.js`文件写入`app/model`目录，并具有以下内容：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This is a very simple model and has two fields as expected. We can also generate
    more complex models using different data types:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常简单的模型，符合预期的有两个字段。我们也可以使用不同的数据类型生成更复杂的模型：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding command will generate the `TaskLog` model with fields of types
    `int`, `string`, `date`, and `float`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令将生成带有`int`、`string`、`date`和`float`类型字段的`TaskLog`模型。
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The model skeletons for the three remaining entities can be created by executing
    the following commands:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的三个实体的模型骨架可以通过执行以下命令创建：
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note that each of these models matches the JSON structure generated by the
    `addJson` (`JsonObjectBuilder`) method in the equivalent Java domain classes.
    You should now have the files shown in the following screenshot in the `app/model`
    directory:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，每个模型都与相应的Java域类中`addJson`（`JsonObjectBuilder`）方法生成的JSON结构匹配。现在，您应该在`app/model`目录中看到以下截图中显示的文件：
- en: '![Generating model skeletons](img/5457_09_15.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![生成模型骨架](img/5457_09_15.jpg)'
- en: Although we have used the Sencha Cmd Tool to generate these model skeletons,
    it would have been just as easy to create the appropriate files and definitions
    in the NetBeans IDE.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们使用Sencha Cmd工具生成了这些模型骨架，但在NetBeans IDE中创建适当的文件和定义同样容易。
- en: Generating views and controllers using Sencha Cmd
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Sencha Cmd生成视图和控制器
- en: 'It is also possible to generate basic view and controller skeletons, but the
    contents of these files are very limited. The following command will create a
    view named `ManageUsers`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以生成基本的视图和控制器骨架，但这些文件的内容非常有限。以下命令将创建名为`ManageUsers`的视图：
- en: '[PRE17]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `ManageUsers.js` file will be written to the `app/view` directory and have
    the following contents:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`ManageUsers.js`文件将写入`app/view`目录，并具有以下内容：'
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In a similar manner, you could create a controller skeleton for `UserController`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，您可以为`UserController`创建一个控制器骨架：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `UserController.js` file would be written to the `app/controller` directory
    and have the following contents:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserController.js`文件将写入`app/controller`目录，并具有以下内容：'
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We believe it is simpler to create views and controllers in the NetBeans IDE
    and will not be using Sencha Cmd for this purpose.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们相信在NetBeans IDE中创建视图和控制器更简单，因此不会使用Sencha Cmd来实现这一目的。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has configured the Ext JS 4 development environment and introduced
    practical design conventions and concepts. We have installed Sencha Cmd and generated
    the 3T application skeleton, examining the core generated files to understand
    the recommended application structure. Our model entities have been generated
    using Sencha Cmd and are ready for enhancement in the following chapters. The
    scene has been set for building our 3T application frontend.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已配置了Ext JS 4开发环境，并介绍了实用的设计约定和概念。我们已安装了Sencha Cmd并生成了3T应用程序骨架，检查核心生成的文件以了解推荐的应用程序结构。我们的模型实体已使用Sencha
    Cmd生成，并准备在接下来的章节中进行增强。我们已经为构建3T应用程序的前端做好了准备。
- en: In [Chapter 10](ch10.html "Chapter 10. Logging On and Maintaining Users"), *Logging
    On and Maintaining Users*, we will develop the Ext JS 4 components required to
    log on to the 3T application and maintain users. Our creative journey through
    **User Interface** (**UI**) design is just starting!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](ch10.html "第10章。登录和维护用户")*登录和维护用户*中，我们将开发Ext JS 4组件，用于登录3T应用程序并维护用户。我们在**用户界面**（**UI**）设计方面的创意之旅刚刚开始！
