- en: Chapter 7. Inspecting Spring Batch Jobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 检查Spring Batch作业
- en: In the previous chapter, we learned about enterprise integration, varieties
    of enterprise application integration, and the Spring Integration project to integrate
    Spring Batch applications with its message-driven approach. We also learned about
    launching batch jobs with Spring Integration and RESTful job processing techniques.
    Spring Batch job execution deals with huge data that changes time to time. This
    changing data might get corrupted at times and lead to failed job executions.
    It is important to keep a close eye on such failures, and failure reasons should
    be saved in a constructive manner for future tracking and fixing.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了企业集成、各种企业应用程序集成以及Spring Integration项目，该项目通过消息驱动方法将Spring Batch应用程序与企业集成。我们还学习了使用Spring
    Integration和RESTful作业处理技术启动批量作业。Spring Batch作业执行涉及大量数据，这些数据会随时间变化。有时这些变化的数据可能会损坏，导致作业执行失败。密切关注此类失败非常重要，并且应将失败原因以建设性的方式保存，以便未来的跟踪和修复。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Batch job monitoring
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 批量作业监控
- en: Accessing execution data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问执行数据
- en: Listeners
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听器
- en: Web monitoring
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络监控
- en: Batch job monitoring
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批量作业监控
- en: So far we have seen varieties of batch job configurations and executions handling
    data from diverse sources, processing it, and pushing the outcomes into another
    data store. Everything looks good as long as the jobs keep executing the way we
    make the configurations. The stability of an application can be figured by how
    strong and detailed the response of the application is to any problems with its
    surroundings, that is, the environment in which the application is running, the
    availability and accessibility of external systems, and the correctness of the
    data supplied to the application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了各种批量作业配置和执行情况，它们处理来自不同来源的数据，对其进行处理，并将结果推送到另一个数据存储。只要作业按照我们的配置执行，一切看起来都很顺利。一个应用程序的稳定性可以通过其对外部环境问题的响应强度和详细程度来衡量，即应用程序运行的环境，外部系统的可用性和可访问性，以及提供给应用程序的数据的正确性。
- en: Applications should be able to generate clear tracking information on what is
    happening in and out of the application in terms of functionality, who is using
    it, how the performance is, and a detailed stack of issues/errors the application
    faces. Spring Batch addresses these parameters and generates a greater infrastructure
    to monitor the batch job processing and store this monitored information.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序应该能够生成关于功能、谁在使用它、性能如何以及应用程序面临的详细问题/错误跟踪信息的清晰信息。Spring Batch 解决了这些参数，并生成一个更大的基础设施来监控批量作业处理并存储这些监控信息。
- en: The application infrastructure should take care of identifying any such problems
    and also reporting to the respective departments through the preconfigured channels
    of communication. Spring Batch has a strong infrastructure to maintain the monitored
    job information in a database. Let us understand the database infrastructure and
    how each entity is related to each other.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序基础设施应负责识别任何此类问题，并通过预先配置的通信渠道向相关部门报告。Spring Batch 具有强大的基础设施，可以在数据库中维护监控的作业信息。让我们了解数据库基础设施以及每个实体是如何相互关联的。
- en: 'The following is the schema diagram defined by Spring Batch:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由Spring Batch定义的架构图：
- en: '![Batch job monitoring](img/3372OS_07_01.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![批量作业监控](img/3372OS_07_01.jpg)'
- en: 'The preceding figure depicts the schema of the batch job that takes care of
    the job execution information. The significance of each of these entities is as
    follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图示展示了负责作业执行信息的批量作业架构。以下是对这些实体的意义说明：
- en: '`BATCH_JOB_INSTANCE`: This maintains high-level information on the batch jobs,
    along with the instance of each job. It contains a unique identifier for different
    job instances created for the same job, with a different set of job parameters
    (`JOB_KEY`), along with the job name and version of each record.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_JOB_INSTANCE`：此实体维护了批量作业的高级信息以及每个作业的实例。它包含不同作业实例的唯一标识符，这些实例是为同一作业创建的，具有不同的作业参数（`JOB_KEY`），以及每个记录的作业名称和版本。'
- en: '`BATCH_JOB_PARAMS`: This maintains information related to each set of job parameters
    instance. It maintains the key/value pairs of job parameters to be passed to a
    job.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_JOB_PARAMS`：此实体维护与每套作业参数实例相关的信息。它维护要传递给作业的作业参数的键/值对。'
- en: '`BATCH_JOB_EXECUTION`: This maintains the job execution information for each
    instance of the job. It maintains individual records for each execution of the
    batch job by connecting with `BATCH_JOB_INSTANCE`.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_JOB_EXECUTION`: 这维护作业每个实例的作业执行信息。它通过连接 `BATCH_JOB_INSTANCE` 为批处理作业的每次执行维护单独的记录。'
- en: '`BATCH_STEP_EXECUTION`: This maintains the step execution information for each
    step of a job instance. It connects with `BATCH_JOB_EXECUTION` to maintain the
    step execution information for each job execution instance.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_STEP_EXECUTION`: 这维护作业实例每个步骤的步骤执行信息。它通过连接 `BATCH_JOB_EXECUTION` 来维护每个作业执行实例的步骤执行信息。'
- en: '`BATCH_JOB_EXECUTION_CONTEXT`: This is the information needed for each job
    execution instance. This is unique for each execution, so the same information
    as that of the previous run is considered for retry jobs. Hence, it connects with
    `BATCH_JOB_EXECUTION` to maintain an instance per execution.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_JOB_EXECUTION_CONTEXT`: 这是每个作业执行实例所需的信息。对于每个执行，这是唯一的，因此对于重试作业，会考虑与上次运行相同的信息。因此，它与
    `BATCH_JOB_EXECUTION` 相连接，以维护每个执行的实例。'
- en: '`BATCH_STEP_EXECUTION_CONTEXT`: This is similar to `BATCH_JOB_EXECUTION_CONTEXT`,
    except that it maintains the context information for each of the step execution.
    Hence, it connects with `BATCH_STEP_EXECUTION` to maintain the unique instance
    with each step execution instance.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BATCH_STEP_EXECUTION_CONTEXT`: 这与 `BATCH_JOB_EXECUTION_CONTEXT` 类似，但它维护每个步骤执行的上下文信息。因此，它与
    `BATCH_STEP_EXECUTION` 相连接，以维护每个步骤执行实例的唯一实例。'
- en: Accessing execution data
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问执行数据
- en: While Spring Batch saves all the monitoring and job information to the database,
    let's understand each of the administration components of Spring Batch, how they
    interact with each other, and their configurations.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Spring Batch 将所有监控和作业信息保存到数据库中，但让我们了解 Spring Batch 的每个管理组件，它们如何相互交互以及它们的配置。
- en: '![Accessing execution data](img/3372OS_07_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![访问执行数据](img/3372OS_07_02.jpg)'
- en: Database
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Database
- en: The database saves job-related information and acts as a source to monitor the
    job execution information.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库保存作业相关信息，并作为监控作业执行信息的来源。
- en: 'A database can be configured using the following syntax:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下语法配置数据库：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The values of `driverClassName`, `url`, `username`, and `password` can be specific
    to the database and a particular user connection to that database. `DataSourceTransactionManager`
    is the transaction manager here and it refers to the database with the `datasource`
    property.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`driverClassName`、`url`、`username` 和 `password` 的值可以针对数据库和特定用户与该数据库的连接而特定。`DataSourceTransactionManager`
    是这里的交易管理器，它通过 `datasource` 属性引用数据库。'
- en: JobRepository
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JobRepository
- en: The `org.springframework.batch.core.repository.JobRepository` interface is the
    central point of access for job-related information. It accesses the state and
    metadata of batch jobs from the database and supplies it to other resources.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.batch.core.repository.JobRepository` 接口是访问作业相关信息的中心点。它从数据库访问批处理作业的状态和元数据，并将其提供给其他资源。'
- en: 'The configuration for the `JobRepository` follows the ensuing syntax:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobRepository` 的配置遵循以下语法：'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: JobLauncher
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JobLauncher
- en: The `org.springframework.batch.core.launch.JobLauncher` interface is responsible
    for job execution and also updates the changing job status in `JobRepository`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.batch.core.launch.JobLauncher` 接口负责作业执行，并更新 `JobRepository`
    中的作业状态。'
- en: 'The configuration for `JobLauncher` follows the following syntax:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobLauncher` 的配置遵循以下语法：'
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: JobOperator
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JobOperator
- en: The `org.springframework.batch.core.launch.JobOperator` interface acts as a
    controlling point for batch job processing. It sends start, stop, and restart
    signals to another administrator, namely, `JobLauncher` by accessing the job information
    from `JobExplorer`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.batch.core.launch.JobOperator` 接口作为批处理作业处理的控制点。它通过从 `JobExplorer`
    访问作业信息，向另一位管理员，即 `JobLauncher` 发送启动、停止和重启信号。'
- en: 'The configuration for `JobOperator` follows the following syntax:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobOperator` 的配置遵循以下语法：'
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: JobExplorer
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JobExplorer
- en: The `org.springframework.batch.core.explore.JobExplorer` interface reads the
    job-related information from the database and provides the information to other
    administrators, such as `JobOperator` in job execution, with read-only access.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.springframework.batch.core.explore.JobExplorer` 接口从数据库读取与作业相关的信息，并将信息提供给其他管理员，例如在作业执行中的
    `JobOperator`，它们具有只读访问权限。'
- en: 'The configuration for `JobExplorer` follows the ensuing syntax:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`JobExplorer` 的配置遵循以下语法：'
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Listeners
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Listeners
- en: In the previous chapters, we discussed that listeners are the components that
    get triggered by the preconfigured events in an execution. We can use such listeners
    to trigger a particular event on the batch job and act as a monitoring tool for
    the corresponding problems. A listener can also be configured to report the corresponding
    department for a particular problem in execution.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们讨论了监听器是执行中由预配置事件触发的组件。我们可以使用此类监听器在批量作业上触发特定事件，并作为相应问题的监控工具。监听器还可以配置为报告执行中特定问题的相应部门。
- en: '![Listeners](img/3372OS_07_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![监听器](img/3372OS_07_03.jpg)'
- en: The following is a sample listener definition and configuration to monitor a
    batch job problem.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个用于监控批量作业问题的示例监听器定义和配置。
- en: 'A listener class can be defined to execute before and after the execution of
    a job, as shown in the following code:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义一个监听器类，在作业执行前后执行，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The configuration of a batch job with the monitoring listener can be as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 配置带有监控监听器的批量作业可以如下所示：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Web monitoring
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络监控
- en: The Spring Batch job execution can be monitored and examined with the web interface
    provided by the open-source project of Spring, that is, **Spring Batch Admin**.
    This is a simple web application built with the Spring MVC user interface to act
    as an admin console for the Spring Batch applications and systems. The main use
    cases developed in this project are inspecting jobs, launching jobs, inspecting
    the executions, and stopping the executions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch作业执行可以通过Spring开源项目提供的网络界面进行监控和检查，即**Spring Batch Admin**。这是一个使用Spring
    MVC用户界面构建的简单网络应用程序，作为Spring Batch应用程序和系统的管理控制台。在此项目中开发的主要用例包括检查作业、启动作业、检查执行情况和停止执行情况。
- en: Note
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to the Spring Batch Admin reference guide at [http://docs.spring.io/spring-batch-admin/reference.html](http://docs.spring.io/spring-batch-admin/reference.html)
    for detailed information on installation and usage.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 有关安装和使用的详细信息，请参阅Spring Batch Admin参考指南[http://docs.spring.io/spring-batch-admin/reference.html](http://docs.spring.io/spring-batch-admin/reference.html)。
- en: Summary
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Through this chapter, we learned the importance of job execution monitoring
    and Spring Batch job monitoring infrastructure. We also learned how to access
    job execution information with the help of the administrators' configurations.
    In addition, we learned about monitoring and reporting batch job problems with
    the help of listeners. We finished this chapter with an understanding of the Spring
    Batch Administration project features and how it can help with batch job monitoring.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章，我们学习了作业执行监控和Spring Batch作业监控基础设施的重要性。我们还学习了如何在管理员配置的帮助下访问作业执行信息。此外，我们还学习了在监听器的帮助下监控和报告批量作业问题。我们通过了解Spring
    Batch Administration项目功能和它如何帮助监控批量作业来结束本章。
- en: In the next chapter, we will learn in detail about the batch scaling model,
    parallel processing, and partitioning concepts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将详细了解批量扩展模型、并行处理和分区概念。
