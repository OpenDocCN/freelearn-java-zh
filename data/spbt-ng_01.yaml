- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Spring Boot and Angular – The Big Picture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot和Angular – 整体图景
- en: First of all, we would like to thank you for getting a copy of this book, which
    was created for developers to learn how to build a full-stack web application
    using the standards that are being used in the development industry. This book
    is tailored based on the applications we have developed from our training and
    workshops. So, let’s begin our adventure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们想感谢您购买这本书的副本，这本书是为开发者编写的，旨在学习如何使用行业开发标准构建全栈Web应用程序。这本书是根据我们从培训和研讨会中开发的应用程序定制的。那么，让我们开始我们的冒险之旅吧。
- en: This chapter will serve as a short recap regarding the Java Spring Boot and
    Angular foundations to give you an idea of what lies ahead in terms of conducting
    web development for them. You will also learn how large the community is and that
    the support that’s available for Angular makes it reliable for developing applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将作为一个简短的回顾，涉及Java Spring Boot和Angular的基础知识，以便您对如何进行这些框架的Web开发有一个大致的了解。您还将了解到社区的大小以及Angular所提供的支持使其在开发应用程序时变得可靠。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing Spring Boot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Spring Boot
- en: The advantages of using Spring Boot
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Boot的优势
- en: What’s new in Java 17
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17的新特性
- en: Introducing Angular
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Angular
- en: The advantages of using Angular
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Angular的优势
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The GitHub repository for the application we will be building can be found at
    [https://github.com/PacktPublishing/Spring-Boot-and-Angular](https://github.com/PacktPublishing/Spring-Boot-and-Angular).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要构建的应用程序的GitHub仓库可以在[https://github.com/PacktPublishing/Spring-Boot-and-Angular](https://github.com/PacktPublishing/Spring-Boot-and-Angular)找到。
- en: Every chapter has a directory where the completed portion of the project is
    located.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都有一个目录，其中包含项目的完成部分。
- en: Note
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: No directories will be available for [*Chapter 1*](B18159_01.xhtml#_idTextAnchor015),
    *Spring Boot and Angular – The Big Picture*, to [*Chapter 4*](B18159_04.xhtml#_idTextAnchor079),
    *Setting Up the Database and Spring Data JPA* because most of the topics we will
    be covering will consist of theories and some sample code. The actual project
    will begin in [*Chapter 5*](B18159_05.xhtml#_idTextAnchor097), *Building APIs*
    *with Spring*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第1章](B18159_01.xhtml#_idTextAnchor015)“Spring Boot和Angular – 整体图景”到[第4章](B18159_04.xhtml#_idTextAnchor079)“设置数据库和Spring
    Data JPA”，将不会有目录可用，因为我们将要涵盖的大部分主题将包括理论和一些示例代码。实际项目将在[第5章](B18159_05.xhtml#_idTextAnchor097)“使用Spring构建API”开始。
- en: Introducing Spring Boot
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Spring Boot
- en: '**Spring Boot** is an open source micro framework from Pivotal. It is an enterprise-level
    framework for developers to create standalone applications on **Java Virtual Machines**
    (**JVMs**). Its primary focus is to shorten your code so that it’s easier for
    you to run your application.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**Spring Boot** 是来自Pivotal的开源微框架。它是一个面向开发者的企业级框架，用于在**Java虚拟机**（**JVMs**）上创建独立应用程序。其主要重点是缩短您的代码，以便您更容易运行应用程序。'
- en: The framework extends the Spring Framework, which provides you with a more opinionated
    way of configuring your applications. In addition, it comes with built-in autoconfiguration
    capabilities that configure both the Spring Framework and third-party packages
    based on your settings. Spring Boot uses this knowledge to avoid code errors at
    configuration time as it reduces boilerplate code when you’re setting up our application.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架扩展了Spring框架，为您提供了配置应用程序的更具意见性的方式。此外，它还内置了自动配置功能，根据您的设置配置Spring框架和第三方包。Spring
    Boot利用这些知识来避免配置时的代码错误，因为它在设置我们的应用程序时减少了样板代码。
- en: Now, let’s discuss the main advantages of using Spring Boot.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论使用Spring Boot的主要优势。
- en: The advantages of using Spring Boot
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Boot的优势
- en: 'The following are the four main advantages of using Spring Boot to develop
    applications:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是用Spring Boot开发应用程序的四个主要优势：
- en: '**Autoconfiguration**: When you’re configuring your Spring Boot application,
    it downloads all the dependencies that will be needed to run your application.
    It will also configure your Spring Framework with the relevant third-party packages,
    depending on the settings you have applied. Thus, Spring Boot avoids boilerplate
    code and configuration errors, and you can directly start developing your Spring
    application.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动配置**：当您配置Spring Boot应用程序时，它会下载运行应用程序所需的所有依赖项。它还会根据您应用的设置配置Spring框架，包括相关的第三方包。因此，Spring
    Boot避免了样板代码和配置错误，您可以直接开始开发Spring应用程序。'
- en: '**Opinionated approach**: Spring Boot uses a narrow approach to installing
    dependencies based on your application needs. It will install all the required
    packages of your application and removes the idea of configuring it manually.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有观点的方法**：Spring Boot采用一种基于应用程序需求来安装依赖项的窄方法。它将为您的应用程序安装所有必需的包，并摒弃了手动配置的想法。'
- en: '**Spring starters**: You can choose a list of starter dependencies to define
    your application’s expected needs during the initialization process. One example
    of a Spring Starter is Spring Web, which allows you to initialize a Spring-based
    web application without configuring the dependencies that are required to run
    the application. Instead, it will automatically install the Apache Tomcat Web
    Server and Spring Security for authentication features.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Spring starters**：您可以在初始化过程中选择一系列的启动依赖项来定义应用程序预期的需求。Spring Starter的一个例子是Spring
    Web，它允许您在不配置运行应用程序所需的依赖项的情况下初始化基于Spring的Web应用程序。相反，它将自动安装Apache Tomcat Web服务器和Spring
    Security以提供认证功能。'
- en: '**Create standalone applications**: Spring Boot can run standalone applications
    that have no dependencies on external web servers. For example, we can embed servers
    such as Tomcat and run the application.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建独立应用程序**：Spring Boot可以运行没有外部Web服务器依赖项的独立应用程序。例如，我们可以嵌入服务器，如Tomcat，并运行应用程序。'
- en: Differences between Spring and Spring Boot
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring和Spring Boot之间的区别
- en: So, what is the difference between Spring and Spring Boot? And do you need to
    learn about the Spring Framework before working with Spring Boot? Let’s start
    with the first question.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，Spring和Spring Boot之间的区别是什么？在开始使用Spring Boot之前，您需要了解Spring框架吗？让我们从第一个问题开始。
- en: 'The following table shows the difference between the two frameworks:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了两个框架之间的区别：
- en: '| ![C:\Users\Seiji Villafranca\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\943B62F6.tmp](img/Table1.png)
    | ![spring-boot-logo - THE CURIOUS DEVELOPER](img/Table2.png) |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| ![C:\Users\Seiji Villafranca\AppData\Local\Microsoft\Windows\INetCache\Content.MSO\943B62F6.tmp](img/Table1.png)
    | ![spring-boot-logo - THE CURIOUS DEVELOPER](img/Table2.png) |'
- en: '| The developers configure the dependencies for the project. | Using Spring
    Starters, Spring Boot will configure all the dependencies that will be needed
    to run the application. |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 开发者配置项目的依赖项。 | 使用Spring Starters，Spring Boot将配置运行应用程序所需的所有依赖项。 |'
- en: '| Spring is a **Java EE framework** for building applications. | Spring Boot
    is commonly used to build **REST APIs**. |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| Spring是构建应用程序的**Java EE框架**。 | Spring Boot通常用于构建**REST API**。 |'
- en: '| Spring simplifies the development of Java EE applications since modules such
    as Spring JDBC, Spring MVC, and Spring Security are already provided. | Spring
    Boot provides the configuration for the dependencies, reducing the boilerplate
    code for the layouts of modules. This makes it easier to run the application.
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| Spring通过提供如Spring JDBC、Spring MVC和Spring Security等模块简化了Java EE应用程序的开发。 |
    Spring Boot提供了依赖项的配置，减少了模块布局的样板代码，这使得运行应用程序更加容易。 |'
- en: '| **Dependency injection** (**DI**) and **inversion of control** (**IOC**)
    are the main features of Spring for building applications. | **Spring Boot Actuator**
    is a feature that exposes operational information about your apps, such as metrics
    and traffic. |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| **依赖注入（DI**）和**控制反转（IOC**）是Spring构建应用程序的主要特性。 | **Spring Boot Actuator**是一个功能，可以公开有关您的应用程序的操作信息，例如指标和流量。
    |'
- en: We can identify that Spring Boot is built on top of Spring and that the main
    difference is that Spring Boot automatically configures the dependencies we need
    to run a Spring application. So, to answer the question about needing to learn
    about the Spring Framework before working with Spring Boot, the answer is **no**
    – Spring Boot is just an extension of Spring, which makes configuring it faster
    because of its opinionated approach.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以确定Spring Boot是建立在Spring之上的，主要区别在于Spring Boot会自动配置我们运行Spring应用所需的依赖项。所以，要回答关于在开始使用Spring
    Boot之前是否需要学习Spring框架的问题，答案是**不**——Spring Boot只是Spring的一个扩展，由于其有见地的方法，它使得配置更快。
- en: Now, let’s look at the dependencies we need in Spring and Spring Boot to configure
    a web application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看在Spring和Spring Boot中配置一个Web应用所需的依赖关系。
- en: Dependency examples for Spring and Spring Boot
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Spring和Spring Boot的依赖项示例
- en: 'In Spring, the minimum dependencies that we need for our application to run
    are **Spring Web** and **Spring** **Web MVC**:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring中，我们应用运行所需的最低依赖项是**Spring Web**和**Spring Web MVC**：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Spring Boot only requires `spring-boot-starter-web`, which is a Spring Starter
    for our application to run. The necessary dependencies are added automatically
    at build time as the starter will be responsible for the configuration:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot只需要`spring-boot-starter-web`，这是我们应用运行所需的Spring Starter。必要的依赖项在构建时自动添加，因为Starter将负责配置：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another thing to consider in Spring is that we need to define some configurations,
    such as dispatcher servlets and mappings, for our application to run on the server:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring中，我们需要考虑的另一件事是为我们的应用在服务器上运行定义一些配置，例如分发器servlet和映射：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After initializing the dispatcher servlets, we also need to use `@EnableWebMvc`
    and have a `Configuration` class with a `@Configuration` annotation where we will
    instantiate a view resolver for the applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化分发器servlet之后，我们还需要使用`@EnableWebMvc`，并有一个带有`@Configuration`注解的`Configuration`类，我们将为应用实例化一个视图解析器。
- en: 'A new `InternalResourceViewResolver()` instance will be created in the configuration
    class. This will be a bean for Spring. Here, all the files that are under the
    `/WEB-INF/view` path with a `.jsp` file extension will be resolved:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置类中将创建一个新的`InternalResourceViewResolver()`实例。这将是一个Spring的bean。在这里，所有位于`/WEB-INF/view`路径下且具有`.jsp`文件扩展名的文件都将被解析：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In Spring Boot, all these configurations will be omitted because this code
    is already included in the Spring Starters. We only need to define some properties
    for our application to run using the web starter:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在Spring Boot中，所有这些配置都将被省略，因为这段代码已经包含在Spring Starter中。我们只需要定义一些属性，以便使用Web Starter使我们的应用运行：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After defining these properties, our application will run since all the necessary
    configurations, such as the **Web Initializer** and **MVC Configuration**, have
    been included.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了这些属性后，我们的应用将运行，因为所有必要的配置，如**Web初始化器**和**MVC配置**，都已包含在内。
- en: With that, we have discussed the advantages of Spring Boot and, at the same
    time, the main differences between Spring Boot and the Spring Framework and how
    it reduces boilerplate code at configuration time.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经讨论了Spring Boot的优势，同时，也讨论了Spring Boot与Spring框架之间的主要区别以及它是如何减少配置时的样板代码的。
- en: As you may already know, the primary language of Spring is Java, and Java 17
    has now been released. In the next section, we’ll learn about the new features
    in Java 17.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，Spring的主要语言是Java，Java 17现在已经发布。在下一节中，我们将了解Java 17的新特性。
- en: What’s new in Java 17?
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 17的新特性是什么？
- en: We have decided to discuss Java 17 in this book as this is the next **long-term
    support** (**LTS**) version of Java, meaning that this version will be maintained
    for a more extended period. It was released on September 14, 2021, and includes
    several new security and development features.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经决定在这本书中讨论Java 17，因为这是Java的下一个**长期支持**（**LTS**）版本，这意味着这个版本将得到更长时间的维护。它于2021年9月14日发布，并包含了一些新的安全和开发特性。
- en: Let’s look at some of the new features that have been included, as well as some
    modifications that have been applied to Java 17.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看已经包含的一些新特性，以及应用于Java 17的一些修改。
- en: Sealed classes
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 密封类
- en: '`permits` keyword to identify the specific classes we want to grant permission
    to, as shown in the following example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`permits`关键字用于标识我们想要授予权限的特定类，如下面的示例所示：'
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The foreign function and memory API
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部函数和内存API
- en: A new API was introduced for accessing and using code outside the Java runtime,
    which it did by applying foreign functions (code outside the JVM) and safely accessing
    foreign memory (memory not handled by the JVM). The API allows a Java application
    to call native libraries without the **Java Native** **Interface** (**JNI**).
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 引入了一个新的API，用于访问和使用Java运行时之外代码，它通过应用外部函数（JVM之外代码）和安全的访问外部内存（JVM不处理内存）来实现。该API允许Java应用程序在不使用**Java本地**
    **接口**（**JNI**）的情况下调用本地库。
- en: The API aims to replace the JNI with a pure Java development model and better
    performance while accessing off-heap data and omitting insecure operations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 该API旨在用纯Java开发模型替换JNI，并在访问堆外数据时提供更好的性能，同时省略不安全操作。
- en: Foreign memory
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 外部内存
- en: 'One common problem in Java today is accessing off-heap data. **Off-heap data**
    is data that’s stored in memory outside the Java runtime. We can say that this
    is a third-party library. Accessing this data is very critical to performance
    in that Java garbage collectors work only on on-heap data, which lets them avoid
    the unpredictability of garbage collections. The following APIs are used to handle
    off-heap data:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Java当前的一个常见问题是访问堆外数据。**堆外数据**是指存储在Java运行时之外内存中的数据。我们可以将其称为第三方库。访问这些数据对于性能至关重要，因为Java垃圾收集器只处理堆内数据，这使得它们可以避免垃圾收集的不确定性。以下API用于处理堆外数据：
- en: '**The ByteBuffer API**: This API allows you to create direct ByteBuffers in
    off-heap data so that data can be managed outside the Java runtime. However, the
    major drawback of ByteBuffer is that its maximum size is 2 GB and that it is not
    deallocated promptly, causing the application’s runtime performance to slow down.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ByteBuffer API**：此API允许你在堆外数据中创建直接ByteBuffer，以便数据可以在Java运行时之外进行管理。然而，ByteBuffer的主要缺点是其最大大小为2
    GB，并且它不会及时释放，导致应用程序的运行时性能变慢。'
- en: '**The Sun.misc.Unsafe API**: The Unsafe API exposes access operations that
    work on off-heap data. This API makes this process efficient since the **Just-in-Time**
    (**JIT**) compiler optimizes access operations. However, using the Unsafe API
    is discouraged as we are allowing access to any memory location.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sun.misc.Unsafe API**：Unsafe API公开了对堆外数据进行操作的操作。由于**即时编译器**（**JIT**）优化了访问操作，因此此API使此过程效率更高。然而，不建议使用Unsafe
    API，因为我们正在允许访问任何内存位置。'
- en: '**The Foreign Function and Memory API**: This API solves the dilemma of accessing
    the memory’s location and sacrificing runtime performance as it provides classes
    and interfaces where applications can do the following:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外部函数和内存API**：此API解决了访问内存位置和牺牲运行时性能的困境，因为它提供了应用程序可以执行以下操作的类和接口：'
- en: Allocate Foreign Memory
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配外部内存
- en: Manipulate and access foreign memory
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作和访问外部内存
- en: Call Foreign Functions
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用外部函数
- en: Pattern matching with switch statements
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用switch语句进行模式匹配
- en: Pattern matching is the idea of testing patterns and complicated expressions
    in switch statements. This new feature allows for more extensible and flexible
    usage of switch statements to accept complex expressions.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 模式匹配是测试switch语句中的模式和复杂表达式的想法。这个新特性允许switch语句以更可扩展和灵活的方式使用，以接受复杂表达式。
- en: The Applet API
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Applet API
- en: '**The Applet API** is rarely used in Java as all browsers have removed support
    for Java browser plugins.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**Applet API**在Java中很少使用，因为所有浏览器都已移除对Java浏览器插件的支持。'
- en: The experimental AOT and JIT compilers
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实验性的AOT和JIT编译器
- en: The experimental Java-based **ahead-of-time** (**AOT**) and **JIT** compilers
    have been removed since their features have limited usage.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其功能使用有限，实验性的基于Java的**即时编译器**（**AOT**）和**即时编译器**（**JIT**）已被移除。
- en: These are just some of the changes that have been applied to Java 17\. Now,
    let’s learn about Angular, one of the top JavaScript frameworks today, and the
    advantages of using the Angular framework to develop your frontend.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是Java 17中应用的一些更改。现在，让我们了解Angular，这是当今最顶尖的JavaScript框架之一，以及使用Angular框架开发前端的优势。
- en: Introducing Angular
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Angular
- en: '**Angular** is a free and open source JavaScript framework that’s maintained
    by Google. It was built mainly for developing web applications and has expanded
    its capabilities to being used to create mobile and desktop applications using
    plugins. Angular uses component-based code, is progressive, and offers many libraries
    and extensions that shorten the time of developing large-scale applications.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**Angular** 是一个由 Google 维护的免费开源 JavaScript 框架。它主要用于开发 Web 应用程序，并通过插件扩展了其功能，使其能够创建移动和桌面应用程序。Angular
    使用基于组件的代码，是渐进式的，并提供了许多库和扩展，这些库和扩展可以缩短开发大型应用程序的时间。'
- en: At the time of writing, Angular is very popular for building frontend applications.
    It is the primary framework for developing applications for large and well-known
    companies such as Samsung, Upwork, PayPal, and Google. It also has a very active
    community and has 76,000 stars on GitHub, with around 1,500 people contributing
    to the framework. In addition, it has thousands of functional NPM libraries that
    you can use to speed up your development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Angular 构建前端应用非常流行。它是三星、Upwork、PayPal 和 Google 等大型知名公司开发应用程序的主要框架。它还拥有一个非常活跃的社区，在
    GitHub 上有 76,000 个星标，大约有 1,500 人为该框架做出贡献。此外，它拥有数千个功能齐全的 NPM 库，您可以使用这些库来加速您的开发。
- en: History of Angular
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular 的历史
- en: Before it became Angular, the first developed framework by Google was **AngularJS**
    or Angular Version 1\. Although developers are typically confused by this, due
    to thinking that AngularJS and Angular are similar, AngularJS was released as
    an open source framework by *Miško Hevery*, a Google employee, who was developing
    AngularJS to develop web applications faster.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在成为 Angular 之前，Google 开发的第一个框架是 **AngularJS** 或 Angular 版本 1。尽管开发者通常对此感到困惑，因为他们认为
    AngularJS 和 Angular 很相似，但 AngularJS 是由 Google 员工 *Miško Hevery* 以开源框架的形式发布的，他正在开发
    AngularJS 以加快 Web 应用程序的开发。
- en: AngularJS, where you use JavaScript or Dart, became popular as its community
    became more extensive. At the same time, the Ionic framework was released, which
    allowed developers to use AngularJS to build native mobile applications.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 JavaScript 或 Dart 的 AngularJS 由于其社区变得更加广泛而变得流行。同时，发布了 Ionic 框架，允许开发者使用 AngularJS
    构建原生移动应用程序。
- en: The Great Rewrite
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 伟大的重写
- en: The fast and rapid development of JavaScript technology has affected the popularity
    of AngularJS, and the team came to the end of the road regarding the framework
    – no improvements were to be made. From 2014 to 2015, the Google team and the
    community decided to support mobile and large enterprise applications with the
    framework. Their first port of call was **The Great Rewrite** and not incrementing
    the design of AngularJS. The Great Rewrite is where **Angular 2.0**, or simply
    Angular, was released.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 技术的快速和快速发展影响了 AngularJS 的流行度，团队在框架方面走到了尽头——没有进一步改进的空间。从 2014 年到 2015
    年，Google 团队和社区决定使用该框架支持移动和大型企业应用程序。他们的第一步是 **伟大的重写**，而不是增加 AngularJS 的设计。伟大的重写是
    **Angular 2.0** 或简称为 Angular 的发布。
- en: The problem with action
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 行动的难题
- en: Many applications were already running on AngularJS, which meant that if a completely
    new version of Angular was released, support would come to an end for AngularJS
    users. So, another main question here was, "*How would those applications be supported
    after* *several years?*"
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 许多应用程序已经在 AngularJS 上运行，这意味着如果发布了一个全新的 Angular 版本，AngularJS 用户的支持将结束。因此，这里的主要问题之一是，“*这些应用程序在几年后会如何得到支持？*”
- en: The other issue that emerged is that there was no direct way to migrate from
    AngularJS to Angular 2.0, which was difficult for developers. This was a massive
    step for teams – so much so that new concepts and breaking changes were introduced
    on every release.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个出现的问题是，没有直接从 AngularJS 迁移到 Angular 2.0 的方法，这对开发者来说很困难。这对团队来说是一个巨大的步骤——以至于在每次发布中都引入了新的概念和重大更改。
- en: The framework’s comeback
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 框架的回归
- en: Even though migrating Angular was painful, the enterprise applications that
    had been created by Google were supported. Around 2018, this became more stabilized
    as the framework had a large set of features that were ready to be used to build
    large applications. In addition, it didn’t depend on third-party libraries to
    create forms and call HTTP requests because all the dependencies were already
    included. Google also released some documentation to help developers migrate AngularJS
    to the latest version of Angular.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管迁移 Angular 很痛苦，但 Google 创建的企业应用程序得到了支持。到 2018 年左右，随着框架拥有大量可用于构建大型应用程序的功能，这变得更加稳定。此外，它不依赖于第三方库来创建表单和调用
    HTTP 请求，因为所有依赖项都已包含在内。Google 还发布了一些文档，以帮助开发者将 AngularJS 迁移到 Angular 的最新版本。
- en: Angular is very popular and is very effective at developing enterprise applications.
    Now, let’s look at the advantages of Angular and why it is effective for development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 非常受欢迎，在开发企业应用程序方面非常有效。现在，让我们看看 Angular 的优势以及为什么它对开发有效。
- en: The advantages of using Angular
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Angular 的优势
- en: Angular is a component-based framework, which means that we develop parts of
    our applications into smaller pieces, and we can reuse these pieces throughout
    the application. This feature reduces boilerplate code and code errors by ensuring
    there’s not as much repetitive code. One of the main advantages of Angular is
    its language. Let’s take a closer look.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是一个基于组件的框架，这意味着我们将应用程序的部分开发成更小的块，我们可以在整个应用程序中重用这些块。这个特性通过确保没有太多重复代码来减少样板代码和代码错误。Angular
    的一个主要优势是其语言。让我们更深入地了解一下。
- en: TypeScript-based framework
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于 TypeScript 的框架
- en: 'Angular is a **TypeScript language-based framework**. This language is a significant
    advantage since TypeScript offers features that are beneficial to development.
    In addition, it is a superset of JavaScript, which added new concepts that make
    code maintainable and effective:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是一个基于 **TypeScript 语言**的框架。这种语言是一个显著的优势，因为 TypeScript 提供了对开发有益的功能。此外，它还是
    JavaScript 的超集，它添加了新的概念，使代码可维护和有效：
- en: '![Figure 1.1 – TypeScript – a superset language](img/B18159_01_01.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – TypeScript – 一种超集语言](img/B18159_01_01.jpg)'
- en: Figure 1.1 – TypeScript – a superset language
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – TypeScript – 一种超集语言
- en: As we can see, TypeScript is built on top of ES6 and JavaScript, which is intended
    to add more features for development. Some of TypeScript’s components include
    Generics, Types, and Interfaces, which we know are directly related to **object-oriented
    programming** (**OOP**). Now, let’s look at another advantage.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，TypeScript 是建立在 ES6 和 JavaScript 之上的，旨在为开发添加更多功能。TypeScript 的某些组件包括泛型、类型和接口，这些我们都知道与**面向对象编程**（**OOP**）直接相关。现在，让我们看看另一个优势。
- en: Static type data
  id: totrans-95
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 静态类型数据
- en: TypeScript can define static type data, which allows variables to be strictly
    typed. Compared to plain JavaScript, the compiler alerts you if there are any
    type-related mistakes – that is, which errors were caught at runtime. Thus, TypeScript
    can avoid mistakes in production by prompting you with these issues at compile
    time.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 可以定义静态类型数据，这使得变量可以严格类型化。与纯 JavaScript 相比，编译器会在编译时提醒你任何类型相关的错误——也就是说，哪些错误是在运行时捕获的。因此，TypeScript
    可以通过在编译时提示这些问题来避免生产中的错误。
- en: Predictability and maintainability
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 可预测性和可维护性
- en: Since TypeScript is strictly typed, this contributes to the concept of predictability.
    For example, a variable is declared as a number. Therefore, it will always stay
    a number throughout the application, and functions will specify how to implement
    them as all parameters are also strictly typed. Furthermore, TypeScript is also
    maintainable as it gives developers the power to debug applications at compilation
    time.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 TypeScript 是强类型的，这有助于可预测性的概念。例如，一个变量被声明为数字类型。因此，在整个应用程序中它始终保持数字类型，函数将指定如何实现它们，因为所有参数也都是严格类型。此外，TypeScript
    也是可维护的，因为它让开发者能够在编译时调试应用程序。
- en: IDE support
  id: totrans-99
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IDE 支持
- en: Since TypeScript is becoming a more widely used language, more IDEs are supporting
    it. IDEs offer several features such as code navigation, autocompletion, and plugins.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 TypeScript 正在变得越来越广泛地使用，越来越多的 IDE 支持它。IDE 提供了诸如代码导航、自动完成和插件等几个功能。
- en: 'Microsoft Visual Studio is the primary IDE that’s used for TypeScript. However,
    some IDEs and editors are also available for running TypeScript:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 是用于 TypeScript 的主要 IDE。然而，一些 IDE 和编辑器也支持运行 TypeScript：
- en: '**Atom**: A cross-platform editor'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom**：一个跨平台编辑器'
- en: '**Eclipse**: An IDE that has a plugin for TypeScript'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Eclipse**：一个具有 TypeScript 插件的 IDE'
- en: '**Visual Studio Code**: A lightweight cross-platform editor by Microsoft'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Visual Studio Code**：微软的一个轻量级跨平台编辑器'
- en: OOP
  id: totrans-105
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）
- en: TypeScript is an **object-oriented language**, which means it supports concepts
    such as classes, interfaces, and inheritance. OOP is very scalable as we develop
    our applications into objects, which can be an advantage if we’re developing growing
    applications.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: TypeScript 是一种**面向对象的语言**，这意味着它支持诸如类、接口和继承等概念。面向对象编程（OOP）在将我们的应用程序开发成对象时非常可扩展，如果我们正在开发不断增长的应用程序，这可以是一个优势。
- en: Early spotted bugs
  id: totrans-107
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 早期发现的错误
- en: Browsers do not understand TypeScript directly. Instead, they use **transpilers**,
    which compile the code into plain JavaScript. Here, all errors related to syntax
    and types are caught, allowing developers to worry about the code logic instead.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器不能直接理解 TypeScript。相反，它们使用**转换器**，将这些代码编译成纯 JavaScript。在这里，所有与语法和类型相关的错误都会被捕获，使得开发者可以专注于代码逻辑。
- en: These are just the advantages of the TypeScript language. Now, let’s look at
    the benefits of Angular itself.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是 TypeScript 语言的优点。现在，让我们看看 Angular 自身的优势。
- en: Support for large enterprise applications
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持大型企业级应用
- en: Angular is considered an all-in-one package framework in that most of the standard
    features that are needed to build an application are already included. This includes
    modules. For example, to use forms in an Angular application, we must import `FormsModule`
    and `ReactiveormsModule`. Other examples are navigation and routes. Angular provides
    `RouterModule` so that you can create routes within the application.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 被视为一个一站式包框架，因为构建应用程序所需的大部分标准功能已经包含在内。这包括模块。例如，要在 Angular 应用程序中使用表单，我们必须导入
    `FormsModule` 和 `ReactiveormsModule`。其他例子包括导航和路由。Angular 提供了 `RouterModule`，这样您就可以在应用程序内创建路由。
- en: Single-page application
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单页应用程序
- en: Angular is a **single-page application** (**SPA**), which means that when a
    user navigates from one page to another, the page doesn’t reload as it’s the data
    that’s being fetched by the server. In addition, the client’s resources are independent
    and are already loaded in the browser, which contributes to the loading performance
    of the application.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Angular 是一个**单页应用程序**（**SPA**），这意味着当用户从一个页面导航到另一个页面时，页面不会重新加载，因为数据是由服务器获取的。此外，客户端的资源是独立的，并且已经在浏览器中加载，这有助于提高应用程序的加载性能。
- en: Progressive web apps (PWAs)
  id: totrans-114
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 渐进式网页应用（PWAs）
- en: '**Progressive web apps** (**PWAs**) are becoming a trend nowadays. They are
    a solution that allows web applications to run on mobile apps, as well as different
    platforms, both online and offline. It is straightforward to configure Angular
    as a PWA thanks to its schematics – with just a single line of code, your Angular
    app is configured. PWAs can also be uploaded into the Android Play Store and Microsoft
    Store using PWA Builder.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**渐进式网页应用**（**PWAs**）如今正成为一种趋势。它们是一种允许网页应用在移动应用以及不同平台（包括在线和离线）上运行解决方案。由于 Angular
    的脚图，配置 Angular 为 PWA 非常简单——只需一行代码，您的 Angular 应用程序就配置好了。使用 PWA Builder，PWAs 还可以上传到
    Android Play 商店和 Microsoft Store。'
- en: 'The following command uses the Angular CLI to convert our application into
    a PWA:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令使用 Angular CLI 将我们的应用程序转换为 PWA：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Angular CLI
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Angular CLI
- en: We don’t need to create or configure Angular from scratch. Instead, we can use
    the Angular CLI, which helps install the necessary dependencies to run our Angular
    application successfully. Although the schematics features are responsible for
    creating the required files, installing the packages, and configuring the values
    that we need for our application, the Angular CLI generates boilerplate code for
    **modules**, **components**, **services**, and **directives** for faster development.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要从头创建或配置 Angular。相反，我们可以使用 Angular CLI，它有助于安装运行我们的 Angular 应用程序所需的依赖项。尽管脚图功能负责创建所需的文件、安装包以及配置我们应用程序所需的值，但
    Angular CLI 为**模块**、**组件**、**服务**和**指令**生成样板代码，以加快开发速度。
- en: 'In the following code, we’re using `npm` to install the Angular CLI and generate
    our code using the `ng` command:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们使用 `npm` 安装 Angular CLI 并使用 `ng` 命令生成我们的代码：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Module and component-based framework
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于模块和组件的框架
- en: Angular is grouped into **modules**, which makes it easier to maintain the code’s
    structure. In addition, each part of the application can be grouped by its function
    and placed in a single module, making it easier to navigate the application’s
    features. It is also beneficial in unit testing as the code is tested separately,
    allowing for complete quality control.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Angular被分组到**模块**中，这使得代码结构更容易维护。此外，应用程序的每个部分都可以按其功能分组，并放置在单个模块中，这使得导航应用程序的功能更容易。它还有利于单元测试，因为代码是单独测试的，从而允许进行完全的质量控制。
- en: 'Creating code as components promotes reusability and boilerplate reduction.
    Let’s look at an example of a navigation menu:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码作为组件创建可以促进代码的可重用性和减少模板代码。让我们看看一个导航菜单的例子：
- en: '[PRE8]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The navigation bar must be present on every page of our application. This process
    will cause redundant code, which means we will have to repeat this code over and
    over again. However, in Angular, it has been developed into a component, allowing
    us to reuse the code in different parts of the application. A specific selector
    is assigned to the navigation bar code and used as the HTML tag for the component,
    as shown in the following code:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 导航栏必须出现在我们应用程序的每一页上。这个过程将导致代码冗余，这意味着我们不得不反复重复这段代码。然而，在Angular中，它已经被开发成一个组件，允许我们在应用程序的不同部分重用代码。为导航栏代码分配了一个特定的选择器，并用作组件的HTML标签，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Cross-platform-enabled
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持跨平台
- en: Angular is used to build applications for the web, as well as native mobile
    and desktop applications. This is now possible through frameworks, such as Ionic,
    NativeScript, and Electron. Aside from PWAs, Ionic and NativeScript are also used
    to create mobile apps using Angular. On the other hand, Electron is a framework
    that transforms your Angular app into a desktop application using a similar code
    base. This feature makes Angular very flexible as a single framework can cover
    all the platforms for your application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Angular用于构建网页、原生移动和桌面应用程序的应用程序。现在，通过像Ionic、NativeScript和Electron这样的框架，这是可能的。除了PWA之外，Ionic和NativeScript还用于使用Angular创建移动应用程序。另一方面，Electron是一个框架，它使用类似的代码库将您的Angular应用程序转换为桌面应用程序。这个特性使得Angular作为一个单一框架非常灵活，因为它可以覆盖您应用程序的所有平台。
- en: Web components
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 网页组件
- en: Angular supports **web components**, which are also known as **Angular elements**.
    Here, the idea is to break an application into smaller pieces and distribute it
    into an independent application or package that can be distributed and used on
    other applications. Angular elements cover the concepts of micro frontends. Every
    element has a pipeline for deployment. This component can also be used in different
    JavaScript frameworks, such as React and Vue.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Angular支持**网页组件**，也称为**Angular元素**。在这里，想法是将应用程序分解成更小的部分，并将其分发到独立的应用程序或包中，这些应用程序或包可以在其他应用程序中分发和使用。Angular元素涵盖了微前端的概念。每个元素都有一个部署管道。这个组件也可以用于不同的JavaScript框架，如React和Vue。
- en: Supports lazy loading
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 支持懒加载
- en: Loading all the JavaScript code in the client browser could introduce some issues.
    If the applications get more extensive, more code would be packed into one chunk.
    We don’t want to bootstrap all of our code as this would cause our application
    to load slowly when it’s started for the first time. We only want to load what
    is needed on demand. The lazy loading feature by Angular solves this. It only
    loads the modules, components, services, directives, and other elements of the
    application that are needed for a specific route. This feature reduces the loading
    time as the user initially opens the application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端浏览器中加载所有JavaScript代码可能会引入一些问题。如果应用程序变得更加庞大，更多的代码会被打包到一个块中。我们不希望将所有代码都初始化，因为这会导致我们的应用程序在首次启动时加载缓慢。我们只想按需加载所需的内容。Angular的懒加载功能解决了这个问题。它只加载特定路由所需的应用程序模块、组件、服务、指令和其他元素。这个功能减少了用户首次打开应用程序时的加载时间。
- en: 'In the following code, we’ve defined some routes as an array where we add new
    routes as an object. To enable lazy loading, we must use the `loadChildren` properties
    to load the modules on demand:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们定义了一些路由作为一个数组，我们将新的路由作为对象添加。为了启用懒加载，我们必须使用`loadChildren`属性按需加载模块：
- en: '[PRE10]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, as the user navigates to the `about` path, it will only
    load `AboutModule`, which contains the resources for that specific route. It will
    not load the resources under `ContactModule` unless the user navigates to the
    `contact` path.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，当用户导航到`about`路径时，它只会加载包含该特定路由资源的`AboutModule`。除非用户导航到`contact`路径，否则它不会加载`ContactModule`下的资源。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned that Spring Boot is an open source framework extension
    for Spring and that it mainly solves the boilerplate code when you’re configuring
    the Spring Framework. In addition, it provides **Spring Starters**, which developers
    can use to allow Spring Boot to configure the required dependencies automatically.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解到Spring Boot是Spring框架的一个开源框架扩展，它主要解决了在配置Spring框架时产生的样板代码问题。此外，它还提供了**Spring
    Starters**，开发者可以使用这些Starters让Spring Boot自动配置所需的依赖。
- en: On the other hand, Angular is a component-based framework that’s built with
    the TypeScript language to give it OOP powers. Moreover, it has cross-platform
    support, which allows developers to create applications on the web, mobile, and
    desktop. Angular is one of the top JavaScript frameworks as it is used by several
    large companies and is supported by Google and a large community.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Angular是一个基于组件的框架，它使用TypeScript语言构建，以赋予它面向对象的能力。此外，它具有跨平台支持，允许开发者创建可在网页、移动设备和桌面应用程序上运行的应用程序。由于Angular被多家大型公司使用，并得到Google和庞大社区的支持，因此它是JavaScript框架中的佼佼者。
- en: In the next chapter, you will learn about the software that you must install
    on your computer and set up the development environment for full stack development.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习必须安装到你的计算机上的软件，并设置全栈开发的环境。
