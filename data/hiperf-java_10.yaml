- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Connection Pooling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接池
- en: '**Connection pooling** is a technique used in software development to manage
    database connections. These connections can be reused during program execution
    and conventional wisdom dictates that anything that can be reused should be created
    once and reused as needed. That has been the premise throughout this book as we
    strive to achieve higher-performing Java applications. This chapter covers the
    concept of connection pooling, providing fundamental principles, implementation
    approaches, and examples. Our coverage includes establishing connections, managing
    them, and terminating them when no longer needed. Best practices related to connection
    pooling will also be covered.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接池** 是软件开发中用于管理数据库连接的技术。这些连接可以在程序执行期间重复使用，传统智慧认为任何可以重复使用的东西都应该一次性创建，并在需要时重复使用。这一直是本书的宗旨，我们努力实现高性能的
    Java 应用程序。本章涵盖了连接池的概念，提供了基本原理、实现方法和示例。我们的覆盖范围包括建立连接、管理它们以及在不再需要时终止它们。还将涵盖与连接池相关的最佳实践。'
- en: 'The following main topics are covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主要主题：
- en: Connection pooling concepts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接池概念
- en: Implementing connection pools
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现连接池
- en: Best practices with connection pools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接池最佳实践
- en: By the end of the chapter, you should have a thorough understanding of connection
    pooling, be able to implement a connection pool, and strategically design an approach
    to leverage connection pools for performance enhancement.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该对连接池有深入的了解，能够实现连接池，并战略性地设计一种利用连接池来提高性能的方法。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the examples and instructions in this chapter, you will need the ability
    to load, edit, and run Java code. If you have not set up your development environment,
    refer to [*Chapter 1*](B21942_01.xhtml#_idTextAnchor014).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的示例和说明，你需要具备加载、编辑和运行 Java 代码的能力。如果你还没有设置你的开发环境，请参阅 [*第 1 章*](B21942_01.xhtml#_idTextAnchor014)。
- en: 'The finished code for this chapter can be found here: [https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter10](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter10).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可以在以下位置找到：[https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter10](https://github.com/PacktPublishing/High-Performance-with-Java/tree/main/Chapter10)。
- en: Connection pooling concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接池概念
- en: Most modern systems include multiple databases, especially when **microservices
    architectures** are implemented. This makes the concept of connection pooling
    a critical component of efficient Java applications.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代系统都包含多个数据库，尤其是在实施 **微服务架构** 时。这使得连接池的概念成为高效 Java 应用程序的关键组件。
- en: Microservices architecture
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构
- en: Microservices are independent components of a software system tied to a specific
    business function. They often have their own database so they can be decoupled
    from the main application and updated independently of other microservices.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是软件系统中与特定业务功能相关的独立组件。它们通常拥有自己的数据库，因此可以与主应用程序解耦，并独立于其他微服务进行更新。
- en: The key issue is that software applications need to connect to databases and
    those connections draw on system resources. The concept of connection pooling
    is to establish a connection to the required databases and when they are no longer
    in use, return them to a pool. Obtaining a connection from a pool is quicker and
    less resource intensive than creating new connections every time a database operation
    is required.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 关键问题是软件应用程序需要连接到数据库，而这些连接会消耗系统资源。连接池的概念是建立到所需数据库的连接，当它们不再使用时，将它们返回到池中。从池中获取连接比每次数据库操作都需要创建新连接更快，资源消耗也更少。
- en: The following illustration shows the process of connection pooling, which is
    also considered the **connection pool** **life cycle**.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的插图显示了连接池的过程，这也被认为是 **连接池** **生命周期**。
- en: '![Figure 10.1 – Connection pool life cycle'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 连接池生命周期'
- en: '](img/B21942_10_1.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B21942_10_1.jpg)'
- en: Figure 10.1 – Connection pool life cycle
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 连接池生命周期
- en: Connection pools are initialized when the application initially loads. Part
    of the initialization involves establishing the number of connections. We will
    walk through an example later in this chapter. For now, you should understand
    that we will use a **connection pool library** for our implementation.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池在应用程序最初加载时初始化。初始化的一部分涉及建立连接数量。我们将在本章后面的示例中详细介绍。现在，你应该理解我们将使用**连接池库**来实现。
- en: The second component is **connection borrowing**. Whenever a database operation
    is necessary, a connection is obtained from the pool. The term “borrowing” suggests
    that once a connection is no longer required by a service, it is returned to the
    pool. That is the connection return component’s segment of the life cycle. Unused
    connections are returned to the pool so they can be used again.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个组件是**连接借用**。每当需要进行数据库操作时，就会从池中获取一个连接。术语“借用”意味着一旦服务不再需要连接，它就会被返回到池中。这就是连接返回组件的生命周期的一部分。未使用的连接被返回到池中，以便再次使用。
- en: Advantages of connection pooling
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池的优点
- en: There are three primary advantages of connection pooling. First, the use of
    connection pooling can result in higher performance. This improvement is possible
    because connects are reused, resulting in faster database operations.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池有三个主要优点。首先，使用连接池可以提高性能。这种改进是可能的，因为连接被重用，从而加快数据库操作。
- en: Another advantage of implementing connection pooling in our applications is
    that we are better equipped to optimize resource utilization. The number of database
    connections open at any given time is reduced because the unused connections are
    in a pool. This results in lower application and database server overhead.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中实现连接池的另一个优点是我们能更好地优化资源利用。在任何给定时间打开的数据库连接数量减少了，因为未使用的连接在池中。这导致应用程序和数据库服务器开销降低。
- en: An additional advantage of connection pooling is that it supports scalability.
    This is possible because when our applications use connection pooling, they can
    handle many simultaneous database operations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池的另一个优点是它支持可伸缩性。这是可能的，因为当我们的应用程序使用连接池时，它们可以处理许多同时进行的数据库操作。
- en: Challenges of connection pooling
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池的挑战
- en: There are challenges and concerns with virtually every high-performance approach
    we implement in our Java applications and connection pooling is no exception.
    There are three primary areas of concern.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Java应用程序中实施的高性能方法几乎都会带来挑战和关注点。连接池也不例外。有三个主要关注领域。
- en: First, it is critical that we establish an optimal **size** for our connection
    pool. If we do not permit enough connections, our applications can become sluggish
    or unresponsive. Bottlenecks can also occur when our connection pools are too
    small. On the other hand, if our connection pool is too large, we could possibly
    overtask database servers, leading to overall system performance degradation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，确定我们连接池的最佳**大小**至关重要。如果我们不允许足够的连接，我们的应用程序可能会变得缓慢或无响应。当我们的连接池过小时，也可能出现瓶颈。另一方面，如果我们的连接池过大，我们可能会过度使用数据库服务器，导致整体系统性能下降。
- en: '**Connection leaks** are another area of concern. It is important that we manage
    the connection pool life cycle, with a focus on connection borrowing and returning
    operations. When we fail to manage these operations properly, connection leaks
    are possible.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接泄漏**是另一个关注领域。管理连接池的生命周期，重点关注连接借用和返回操作，这一点很重要。当我们未能正确管理这些操作时，可能会发生连接泄漏。'
- en: Connection leaks
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 连接泄漏
- en: Connection leaks occur when we fail to properly return connections to the pool.
    This can lead to the connection pool’s resources being depleted.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们未能正确地将连接返回到池中时，会发生连接泄漏。这可能导致连接池的资源耗尽。
- en: You should now have a foundational understanding of connection pooling and its
    advantages and challenges. The next section walks through implementation examples.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该对连接池及其优点和挑战有一个基础的了解。下一节将介绍实现示例。
- en: Implementing connection pools
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现连接池
- en: We should now understand what connection pools are and the associated advantages
    and challenges. Let’s extend our knowledge by implementing connection pools using
    Java. In this section, we will look at connection pool libraries, set up a connection
    pool, integrate our connection pool with application logic, and explore how to
    monitor our connection pools.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该理解连接池是什么以及相关的优势和挑战。让我们通过使用Java实现连接池来扩展我们的知识。在本节中，我们将查看连接池库，设置连接池，将连接池与应用程序逻辑集成，并探讨如何监控我们的连接池。
- en: Connection pool libraries
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池库
- en: Once we decide to use connection pools in an application, we need to select
    an appropriate connection pool library. There are several connection pool libraries
    available to us for Java, and which one we select is based on our application’s
    requirements. Let’s look at three popular connection pool libraries.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们决定在一个应用程序中使用连接池，我们需要选择一个合适的连接池库。目前有多个连接池库可供我们使用Java，我们选择哪一个取决于我们的应用程序需求。让我们来看看三个流行的连接池库。
- en: '**Apache Commons Database Connection Pooling** (**DBCP**) is a mature library
    that is considered stable and has wide applicability. As the name suggests, this
    is an open-source library from Apache. While this is a proven library, it is less
    efficient than more modern libraries.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Apache Commons数据库连接池**（**DBCP**）是一个成熟的库，被认为是稳定的，并且具有广泛的应用性。正如其名所示，这是一个来自Apache的开源库。虽然这是一个经过验证的库，但它的效率不如更现代的库。'
- en: The **C3PO** (**Cloud-Based Confidentiality-Preserving Continuous Query Processing**)
    connection pool library is another viable option. It includes a robust set of
    features to include automatic connection retries when connections cannot be established.
    This library is a bit more versatile than the Apache Commons DBCP library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**C3PO**（**基于云的保密性保持连续查询处理**）连接池库是另一个可行的选择。它包括一组强大的功能，包括在无法建立连接时自动重试连接。这个库比Apache
    Commons DBCP库更灵活。'
- en: A third connection pool library option is the **Hikari Connection Pool** (**HikariCP**).
    This is a newer library than the previous two and is lauded for its simplicity
    and its performance. With the goal of improving the performance of our Java applications,
    HikariCP is a great choice for connection pooling and is the library featured
    in the remainder of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个连接池库选项是**Hikari连接池**（**HikariCP**）。这是一个比前两个更新的库，因其简洁性和性能而受到赞誉。为了提高我们的Java应用程序的性能，HikariCP是连接池的一个很好的选择，也是本章剩余部分所介绍的库。
- en: 'There are six primary factors you should consider when selecting a connection
    pool library:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 选择连接池库时应考虑的六个主要因素：
- en: '**Compatibility**: You should check to ensure the library is compatible with
    your version of Java as well as any database drivers or tools you plan to use.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**兼容性**：你应该检查库是否与你的Java版本以及你计划使用的任何数据库驱动程序或工具兼容。'
- en: '**Familiarity**: If you and your development team are already familiar with
    a specific connection pool library, you can introduce faster development and fewer
    bugs if you continue to use a library you are familiar with. The downside to this
    is that you might be sacrificing features and runtime performance for development
    efficiencies.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**熟悉度**：如果你和你的开发团队已经熟悉某个特定的连接池库，如果你继续使用你熟悉的库，你可以引入更快的开发和更少的错误。这种做法的缺点可能是你可能会为了开发效率而牺牲功能和运行时性能。'
- en: '**Features**: The full list of features should be reviewed to ensure the library
    you choose can do what you expect it to.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：应审查功能列表，以确保你选择的库可以完成你期望它做的事情。'
- en: '**Maintenance**: We should always gravitate toward libraries that are maintainable.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：我们应该始终倾向于选择可维护的库。'
- en: '**Performance**: This is a paramount factor. You want to ensure that your chosen
    library does not underperform when under stress (high and persistent workloads).
    This is something you should test before formally adopting a connection pool library.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：这是一个至关重要的因素。你希望确保在你选择的库在压力下（高且持续的工作负载）不会表现不佳。这是在正式采用连接池库之前你应该测试的事情。'
- en: '**Support**: Check the official website to ensure there is ample documentation.
    Additionally, you want to select a library that has robust community support.
    This can help you when you experience development challenges and when troubleshooting.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**支持**：检查官方网站以确保有足够的文档。此外，你希望选择一个有强大社区支持的库。这可以在你遇到开发挑战和故障排除时帮助你。'
- en: When selecting a connection pool library, overall application performance should
    be heavily considered. This may require trial and error with multiple libraries.
    Reviewing the features of each library can help you make an informed decision.
    The following table can help with your review.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择连接池库时，应高度重视整体应用程序的性能。这可能需要尝试多个库并反复试验。审查每个库的功能可以帮助你做出明智的决定。以下表格可以帮助你进行审查。
- en: '| **Feature** | **Apache DBCP** | **C3P0** | **HikariCP** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **特性** | **Apache DBCP** | **C3P0** | **HikariCP** |'
- en: '| --- | --- | --- | --- |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| Performance | Good | Good | Great |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 性能 | 良好 | 良好 | 极佳 |'
- en: '| Connection timeout | Yes | Yes | Yes |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 连接超时 | 是 | 是 | 是 |'
- en: '| Statement caching | Yes | Yes | Yes |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 语句缓存 | 是 | 是 | 是 |'
- en: '| Idle connection test/validation | Yes | Yes | Yes |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 空闲连接测试/验证 | 是 | 是 | 是 |'
- en: '| Connection validation | Yes | Yes | Yes |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 连接验证 | 是 | 是 | 是 |'
- en: '| Pool sizing flexibility | Good | Good | Great |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 池大小灵活性 | 良好 | 良好 | 极佳 |'
- en: '| Documentation | Good | Good | Great |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 文档 | 良好 | 良好 | 极佳 |'
- en: '| Community support | Good | Good | Great |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 社区支持 | 良好 | 良好 | 极佳 |'
- en: '| Configuration ease | Moderately Complex | Moderately Complex | Simple |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 配置简便性 | 中等复杂 | 中等复杂 | 简单 |'
- en: '| Modern framework integration | Poor | Good | Great |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 现代框架集成 | 差 | 良好 | 极佳 |'
- en: Table 10.1 – Library features
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表10.1 – 库特性
- en: As you can see in the preceding table, many of the features are rated the same
    across all three connection libraries. This suggests that a deeper dive might
    be required. The comparison is only provided as a high-level overview and provides
    insights into areas you might consider researching further.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如前表所示，许多特性在所有三个连接库中都有相同的评级。这表明可能需要更深入的研究。此比较仅提供了一个高级概述，并提供了你可能需要进一步研究的领域的见解。
- en: Setting up a connection pool
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置连接池
- en: 'Now that a connection pool library has been selected, HikariCP in our case,
    we need to follow a few specific steps. Let’s walk through an example using Maven
    for our build tool:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了连接池库，在我们的例子中是HikariCP，我们需要遵循几个特定的步骤。让我们通过使用Maven作为构建工具的示例来逐步说明：
- en: '**Add the library to** **your project**:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将库添加到** **你的项目**：'
- en: 'We need to edit our pom.xml file to add HikariCP to our dependencies. This
    is how we would do that:'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们需要编辑我们的pom.xml文件以将HikariCP添加到我们的依赖项中。以下是这样做的方法：
- en: '[PRE0]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`dataSource` and set several parameters to configure our connection pool:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`dataSource`中设置几个参数以配置我们的连接池：
- en: '[PRE1]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`static` connection pool in the `DatabaseConfig` class. We implement this approach
    so our connection pool is initialized and ready when the class loads. The global
    access point to our connection is established with the `getDataSource()` method.
    This facilitates connections to be borrowed from the pool by our application’s
    methods.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DatabaseConfig`类中的`static`连接池。我们采用这种方法，以便在类加载时初始化并准备好我们的连接池。我们通过`getDataSource()`方法建立了对连接的全局访问点。这便于我们的应用程序方法从池中借用连接。
- en: '`getDataSource()` method, we can access the pool and obtain connections. Here
    is a method of accomplishing that task. As previously stated, this is not a complete
    application; rather, it is a representative code snippet to demonstrate how to
    use a connection pool:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`getDataSource()`方法，我们可以访问连接池并获取连接。以下是一个完成此任务的示例方法。如前所述，这并不是一个完整的应用程序；而是一个代表代码片段，用于展示如何使用连接池：
- en: '[PRE2]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As shown previously, we implemented the `try-with-resources` statement to automatically
    close our database connection, which returns the connection to the pool so it
    can be used again.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们实现了`try-with-resources`语句来自动关闭我们的数据库连接，并将连接返回到池中以便再次使用。
- en: Integrating connection pools
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成连接池
- en: Integrating connection pools into our Java applications requires us to create
    code (as demonstrated in the previous section) that creates, uses, and closes
    database connections. We highlighted that we no longer need to open a new database
    connection every time a database connection is required. Instead, we borrow from
    the pool and return our connections when we are done with them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将连接池集成到我们的Java应用程序中需要我们创建代码（如前节所示），以创建、使用和关闭数据库连接。我们强调，我们不再需要在需要数据库连接时每次都打开一个新的数据库连接。相反，我们从池中借用连接，并在使用完毕后归还。
- en: 'The primary integration points are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主要集成点如下：
- en: Managing connections
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理连接
- en: Obtaining connections
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取连接
- en: Handling errors
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误
- en: Once we have our connection pool in place, we need to monitor them during runtime
    and perform tuning as needed. Let’s look at those tasks in the next section.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了连接池，我们需要在运行时对其进行监控，并根据需要调整。让我们在下一节中查看这些任务。
- en: Monitoring connection pools
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监控连接池
- en: Connection pools are an important component of modern software systems, and
    they can represent a tremendous boon to overall system performance. This underscores
    the importance of monitoring their performance during runtime. We can accomplish
    this by reviewing logs and using monitoring tools. Most connection pool libraries
    come with tools sufficient for the task.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池是现代软件系统的重要组件，它们可以极大地提高整体系统性能。这强调了在运行时监控它们性能的重要性。我们可以通过审查日志和使用监控工具来完成这项任务。大多数连接池库都附带足够用于此任务的工具。
- en: 'In addition to errors, we should look for the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 除了错误之外，我们还应寻找以下情况：
- en: Connection leaks
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接泄漏
- en: Long wait times
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 长等待时间
- en: Improper pool sizes
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不适当的池大小
- en: Part of monitoring connection pools includes the need to establish key metrics.
    Simply watching system logs is not enough; we need a set of metrics or benchmarks
    to properly measure the success and performance of our connection pools.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 监控连接池的一部分包括建立关键指标的需求。仅仅查看系统日志是不够的；我们需要一套指标或基准来正确衡量我们连接池的成功和性能。
- en: As we continue to monitor our connection pool performance, we can make configuration
    changes that are applied when the application starts up. For always-on systems,
    you may need to restart a service or server. A mindset of continual performance
    improvement can help ensure we get the best possible performance from our connection
    pools and positively impact our system’s overall performance.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续监控连接池性能的同时，我们可以做出在应用程序启动时应用的配置更改。对于始终开启的系统，您可能需要重新启动服务或服务器。持续改进性能的心态可以帮助确保我们从连接池中获得最佳性能，并积极影响系统的整体性能。
- en: Best practices with connection pools
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接池的最佳实践
- en: Connection pool implementation is relatively straightforward and, like most
    programming tasks, you will quickly have your own code base that you can refactor
    for follow-up programming projects. This is often a critical component to your
    system’s success as it provides the mechanism for your application to access data.
    Some factors should be considered as part of your connection pool strategy. Let’s
    look at the primary factors.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池实现相对简单，就像大多数编程任务一样，您将很快拥有自己的代码库，您可以为后续编程项目重构它。这通常是系统成功的关键组成部分，因为它为您的应用程序访问数据提供了机制。在您的连接池策略中应考虑以下因素。让我们看看主要因素。
- en: Connection pool sizing
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池大小
- en: Ensuring your connection pool is properly sized is the first factor you should
    consider. We should strive to find the ideal balance between performance and resource
    usage. If our pool is too small, the access wait times can increase, which will
    negatively impact performance. Oversized connection pools can result in wasted
    resources such as idle connections requiring system resources.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的连接池大小适当是您应考虑的第一个因素。我们应该努力在性能和资源使用之间找到理想的平衡。如果我们的池太小，访问等待时间可能会增加，这将对性能产生负面影响。过大的连接池可能导致浪费资源，如空闲连接需要系统资源。
- en: 'The challenge is knowing what the ideal connection pool size is. This can take
    some trial and error. Initially, we can estimate the number of database connections
    our application might need at one time. There is no magic formula for this, so
    consider the following when making your initial estimates:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战在于知道理想的连接池大小。这可能需要一些尝试和错误。最初，我们可以估计我们的应用程序可能一次需要的数据库连接数。对此没有魔法公式，因此在做出初始估计时请考虑以下因素：
- en: The number of services that your application has that need a database connection
    to fully function
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的应用程序需要数据库连接以完全功能的服务数量
- en: The number of concurrent connections you will need
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要的并发连接数
- en: Review the usage patterns
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审查使用模式
- en: The peak load conditions
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 峰值负载条件
- en: 'Using our `HikariCP` example from earlier, we can set the size of our connection
    pool with a single line of code in our `DataSourceConfig` class:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们之前提到的`HikariCP`为例，我们可以在`DataSourceConfig`类中使用一行代码来设置连接池的大小：
- en: '[PRE3]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we set the maximum number of connections to `10` and the minimum
    number of idle connections that the pool maintains to `5`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们将最大连接数设置为`10`，并将池维护的最小空闲连接数设置为`5`。
- en: Once you make your initial connection pool size decision, continue monitoring
    the performance and adjusting your configuration as needed. You can use tools
    that come with your connection pool library as well as external tools such as
    **application performance monitoring** (**APM**) tools.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您做出初始连接池大小的决定，继续监控性能并根据需要调整您的配置。您可以使用连接池库附带的工具，以及外部工具，如**应用性能监控**（**APM**）工具。
- en: Handling connection leaks
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理连接泄漏
- en: Once your application is running, you should commit yourself to continually
    monitoring your connection pool performance. While you hope not to experience
    connection leaks, the best practice is to be prepared for them. As a reminder,
    a connection leak occurs when a connection is not returned to the pool after it
    is no longer in use. This can lead to depleting the available connections in the
    pool. Ultimately, this can lead to your application failing.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用程序开始运行，您应该致力于持续监控您的连接池性能。虽然您希望不会遇到连接泄漏，但最佳实践是为此做好准备。提醒一下，当连接不再使用时未将其返回到池中时，就会发生连接泄漏。这可能导致池中可用连接耗尽。最终，这可能导致您的应用程序失败。
- en: There are two primary approaches to handling connection leaks, and they can
    be used in concert with one another.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 处理连接泄漏有两种主要方法，并且可以相互配合使用。
- en: Timeout settings
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超时设置
- en: We can set a timeout period for connections that are borrowed. If a connection
    has been borrowed from the pool for what you consider to be too long, then we
    can have it reclaimed or at least a log entry made to help with your monitoring
    efforts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为借用连接设置超时时间。如果连接从池中被借用的时间过长，那么我们可以将其回收，或者至少记录一条日志条目以帮助您的监控工作。
- en: 'Let’s review the pool configuration part of the code snippet from earlier in
    this chapter:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下本章前面代码片段中的池配置部分：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As seen in the preceding code snippet, we set the maximum amount of time a connection
    can be in the pool, in an idle state to 60,000 milliseconds (about 1 minute).
    The second line of code sets the maximum lifetime of a connection in the pool
    to approximately 30 minutes, and the third line sets the amount of time to wait
    for a connection from the pool.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如前述代码片段所示，我们将连接在池中处于空闲状态的最大时间设置为60,000毫秒（约1分钟）。第二行代码将连接在池中的最大生命周期设置为大约30分钟，第三行设置等待从池中获取连接的时间。
- en: Connection handling patterns
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接处理模式
- en: We should review our code to ensure connections are always closed. This can
    be done in a `finally` block or in the `try-with-resource` statement we used earlier
    in this chapter. Let’s look at an example of each.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该审查我们的代码，以确保连接始终被关闭。这可以在`finally`块中完成，或者在本章前面使用过的`try-with-resource`语句中完成。让我们看看每个示例。
- en: 'The first code snippet is in an abbreviated format for illustration purposes
    only. It demonstrates how we can ensure the connections are closed. In the following
    example, we assume that all appropriate import statements will be included and
    that `dataSource` has been initialized elsewhere in the application. In the `finally`
    block, we ensure that resources are closed to help avoid connection leaks:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码片段仅为了说明目的而采用简化的格式。它演示了我们可以如何确保连接被关闭。在以下示例中，我们假设所有适当的导入语句都将被包含，并且`dataSource`已在应用程序的其他地方初始化。在`finally`块中，我们确保资源被关闭以帮助避免连接泄漏：
- en: '[PRE5]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'While implementing the `finally` block can help ensure that resources are closed
    to help avoid connection leaks, another approach is to use the `try-with-resources`
    statement. Here is an example of that statement:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现`finally`块以帮助确保资源关闭以避免连接泄漏的同时，另一种方法是使用`try-with-resources`语句。以下是该语句的示例：
- en: '[PRE6]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This approach results in the resources automatically being closed once the try-catch
    block is exited. This exit can occur based on normal program flow or when an exception
    is caught. In both cases, the resource will be automatically closed. As you saw,
    there was no need for a `finally` block with this approach and it is therefore
    the recommended approach.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法导致资源在退出try-catch块后自动关闭。退出可以基于正常的程序流程或当捕获到异常时发生。在这两种情况下，资源都将自动关闭。如您所见，这种方法不需要`finally`块，因此是推荐的方法。
- en: Connection pool security
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接池安全性
- en: Connection pools facilitate access to our databases, and we must always protect
    them. Maintaining a pool of database connections could represent a tremendous
    security risk. There are two types of protection we can implement.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 连接池使我们能够访问数据库，我们必须始终保护它们。维护数据库连接池可能代表巨大的安全风险。我们可以实施两种保护措施。
- en: First, we can encrypt our configuration files. These files contain our database
    connection information and should be considered sensitive information. Encryption
    and decryption can take processing time resulting in a small downtick in performance,
    but this is a necessary component of your application.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们可以加密我们的配置文件。这些文件包含我们的数据库连接信息，应被视为敏感信息。加密和解密可能会消耗处理时间，从而导致性能略有下降，但这是你应用程序的一个必要组件。
- en: Another type of protection is to use the concept of **least privilege**, only
    granting the minimum privileges necessary for the application to run. For example,
    if you have a service that merely needs to search a customer database to display
    key information such as names, emails, and account numbers, do not give that service
    create, update, or delete access to the database. In this scenario, you only need
    to grant the service read access.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种保护措施是使用**最小权限**的概念，只授予应用程序运行所需的最小权限。例如，如果你有一个仅需要搜索客户数据库以显示诸如姓名、电子邮件和账户号码等关键信息的服务，不要授予该服务创建、更新或删除数据库的访问权限。在这种情况下，你只需要授予该服务读取访问权限。
- en: Advanced topics
  id: totrans-120
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 高级主题
- en: 'There are a few connection pool topics that go beyond the basics and are worth
    considering as we aim to optimize the performance of our connection pools. Let’s
    look at four of those topics here:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个连接池主题超出了基础知识，在我们旨在优化连接池性能的过程中值得考虑。以下是我们将探讨的四个主题：
- en: '**Cloud native**: When we are working with cloud-based applications, we can
    leverage features native to the cloud environment. This can include features aimed
    at improving resiliency, reliability, and scalability. Ideally, our database selection
    will be based on cloud-native database services to further optimize connection
    pooling.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云原生**：当我们与基于云的应用程序一起工作时，我们可以利用云环境本地的功能。这可以包括旨在提高弹性、可靠性和可伸缩性的功能。理想情况下，我们的数据库选择将基于云原生数据库服务，以进一步优化连接池。'
- en: '**Connection validation**: It is a good idea to periodically execute a function
    to validate the connections in the pool. This can ensure they remain valid and
    can prevent costly problems.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接验证**：定期执行一个函数来验证池中的连接是一个好主意。这可以确保它们保持有效，并可以防止代价高昂的问题。'
- en: '**Failover**: Database redundancy is a key feature of cloud computing environments.
    Specific to connection pools, we can implement a failover schema that shifts to
    a backup database if the first one fails.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**故障转移**：数据库冗余是云计算环境的关键特性。具体到连接池，我们可以实现一个故障转移方案，在第一个数据库失败时切换到备份数据库。'
- en: '**Redundancy**: To support failover, and as part of normal practice, we should
    implement database redundancy. Taking advantage of cloud computing database services
    can make this relatively easy to configure.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冗余**：为了支持故障转移，作为正常实践的一部分，我们应该实现数据库冗余。利用云计算数据库服务可以使这相对容易配置。'
- en: Following the best practices presented in this section can help you implement
    connection pools in a manner that contributes to the high performance of your
    Java applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循本节中提出的最佳实践可以帮助你以有助于提高Java应用程序性能的方式实现连接池。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter took a deep look at the foundational concepts and components of
    connection pools with a focus on increasing the performance, resilience, reliability,
    and scalability of our Java applications. We also explored implementation strategies
    and best practices for optimizing our use of connection pools. Specifically, we
    highlighted how connection pools work, their advantages, and related challenges
    for developers. We reviewed the features of multiple connection pool libraries
    and selected the HikariCP library for our code examples. You should have a firm
    understanding of connection pools, why we should use them, and how to create,
    monitor, and fine-tune them.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 本章深入探讨了连接池的基础概念和组件，重点关注提高我们Java应用程序的性能、弹性、可靠性和可伸缩性。我们还探讨了优化我们连接池使用的实现策略和最佳实践。具体来说，我们强调了连接池的工作原理、它们的优点以及开发人员面临的挑战。我们回顾了多个连接池库的功能，并选择了HikariCP库作为我们的代码示例。你应该对连接池有一个牢固的理解，包括为什么我们应该使用它们，以及如何创建、监控和微调它们。
- en: In the next chapter, we will look at the **Hypertext Transfer Protocol** (**HTTP**).
    This protocol is used to transmit data and is the backbone of data communication
    over the web. Our focus will be on how to leverage HTTP for our Java applications
    to communicate with web browsers and web servers. The chapter aims to help you
    learn how to use HTTP in Java web applications while maintaining high performance,
    how to implement strategies for effectively using HTTP with Java, and how to use
    HTTP to communicate between Java applications and APIs.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨**超文本传输协议**（**HTTP**）。该协议用于传输数据，是网络数据通信的骨干。我们的重点是探讨如何利用HTTP让Java应用程序与网络浏览器和网络服务器进行通信。本章旨在帮助您学习如何在Java网络应用程序中使用HTTP，同时保持高性能，如何实施有效的HTTP使用策略，以及如何使用HTTP在Java应用程序和API之间进行通信。
