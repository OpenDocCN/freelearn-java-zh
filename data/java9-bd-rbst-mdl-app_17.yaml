- en: Future Directions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 未来方向
- en: In the last chapter, we focused on best practices with some exciting utilities
    provided by the Java 9 platform. Specifically, we covered UTF-8 Property Files,
    Unicode 7.0.0, Linux/AArch64 port, multi-resolution images, and common locale
    data repository.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们关注了 Java 9 平台提供的某些激动人心的实用工具的最佳实践。具体来说，我们涵盖了 UTF-8 属性文件、Unicode 7.0.0、Linux/AArch64
    端口、多分辨率图像和常见区域数据仓库。
- en: This chapter provides an overview of the future development of the Java platform,
    beyond Java 9\. We will look at what is planned for Java 10 and what further changes
    we are likely to see in the future. Each potential change to the Java platform
    will be characterized as targeted, submitted, or drafted. Targeted refers to changes
    that have been earmarked for Java 10\. Submitted refers to a change that has been
    submitted but does not target a specific version of the Java platform. Changes
    that are drafted are still on the drawing board and are not ready to be submitted
    or designated as targeted.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章概述了 Java 平台在 Java 9 之后的未来开发。我们将探讨 Java 10 的计划以及我们未来可能看到的进一步变化。每个对 Java 平台的可能变更将被描述为针对的、提交的或草拟的。针对的指的是已标记为
    Java 10 的变更。提交的指的是已提交但未针对 Java 平台特定版本的变更。草拟的变更仍在规划中，尚未准备好提交或指定为针对的。
- en: 'Specifically, this chapter covers future changes to the Java platform grouped
    in the following categories:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章具体介绍了按以下类别分组的 Java 平台的未来变更：
- en: JDK changes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK 变更
- en: Java Compiler
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 编译器
- en: Java Virtual Machine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 虚拟机
- en: JavaX
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaX
- en: Special projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特殊项目
- en: Future Changes to the JDK
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDK 的未来变更
- en: The Java Development Kit is at core of the Java platform and is continually
    being updated with new capabilities and efficiencies realized with each release.
    Looking beyond Java 9, we see a multitude of possible changes to the JDK. Many
    of these changes will be implemented in Java 10 and others might be saved for
    later releases.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Java 开发工具包是 Java 平台的核心，并且随着每个版本的发布，都在不断地更新，以实现新的功能和效率。展望 Java 9 之后的版本，我们可以看到
    JDK 将会有许多可能的改变。其中许多改变将在 Java 10 中实现，而其他一些可能被保留到以后的版本中。
- en: 'The changes to the JDK in Java 10 and beyond are presented in the following
    proposal categories:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Java 10 及以后的 JDK 变更将在以下提案类别中呈现：
- en: Targeted for Java 10
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 面向 Java 10
- en: Submitted Proposals
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交的提案
- en: Drafted Proposals
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 草拟提案
- en: JDK changes targeted for Java 10
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向 Java 10 的 JDK 变更
- en: 'At the time of this book''s publication, the following listed **Java Development
    Kit** (**JDK**)-related changes were slated for inclusion in the Java 10 platform:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书出版时，以下列出的与 **Java 开发工具包**（**JDK**）相关的改变被计划包含在 Java 10 平台中：
- en: Repository consolidation
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仓库整合
- en: Native-Header Tool Removal
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生头文件工具移除
- en: Repository consolidation
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 仓库整合
- en: 'The Java 9 platform consists of eight distinct repositories as depicted in
    the following diagram. In Java 10, we should see all of these repositories combined
    into a single repository:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Java 9 平台由以下图中所示的八个不同的仓库组成。在 Java 10 中，我们应该看到所有这些仓库合并为一个单一仓库：
- en: '![](img/3c694ace-8226-444c-9b43-eacaa4f87bf6.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c694ace-8226-444c-9b43-eacaa4f87bf6.png)'
- en: Repository consolidation should help streamline development. Moreover, it should
    increase the ease of maintaining and updating the Java platform.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库整合应该有助于简化开发。此外，它应该增加维护和更新 Java 平台的便利性。
- en: You can get an early look at this repository at [http://hg.openjdk.java.net/jdk10/consol-proto/](http://hg.openjdk.java.net/jdk10/consol-proto/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提前查看这个仓库：[http://hg.openjdk.java.net/jdk10/consol-proto/](http://hg.openjdk.java.net/jdk10/consol-proto/)。
- en: Native-header tool removal
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 原生头文件工具移除
- en: The javah tool is used to generate C header files and C source files from Java
    classes. C programs can reference the generated header files and source files.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: javah 工具用于从 Java 类生成 C 头文件和 C 源文件。C 程序可以引用这些生成的头文件和源文件。
- en: 'Here is a look at the life and death of the javah tool:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们来了解一下 javah 工具的诞生与消亡：
- en: '![](img/5be7c7bf-069b-4886-93b6-d6a957d43195.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5be7c7bf-069b-4886-93b6-d6a957d43195.png)'
- en: As illustrated earlier, the javah tool was introduced with Java 7 and its functionality
    was included in the javac that came with JDK8\. This functionality was reportedly
    superior compared to that of the original tool. In JDK 9, developers received
    warnings each time the javah tool was used, informing them of its pending removal
    from the JDK. The tool is slated for removal in JDK 10.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，javah工具是在Java 7中引入的，其功能包含在随JDK8提供的javac中。据报道，与原始工具相比，该功能更优越。在JDK 9中，每次使用javah工具时，开发者都会收到警告，告知他们该工具将从JDK中移除。该工具计划在JDK
    10中移除。
- en: JDK-related submitted proposals
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDK相关的提交提案
- en: 'The following Java Enhancement Proposals have been submitted, but have not
    yet been committed for delivery as part of the Java 10 platform. Oracle has set
    a two-year release plan, so it is safe to assume that, many if not all, of the
    proposals listed in this section and beyond have a chance of being part of the
    Java 10 platform:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Java增强提案已经提交，但尚未被纳入Java 10平台的部分。Oracle设定了两年发布计划，因此可以合理假设，本节及以后列出的许多（如果不是全部）提案都有可能成为Java
    10平台的一部分：
- en: Parallelize the Full GC Phase in CMS
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在CMS中并行化完全GC阶段
- en: REST APIs for JMX
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMX的REST API
- en: Support Heap Allocation
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持堆分配
- en: Parallelize the Full GC Phase in CMS
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在CMS中并行化完全GC阶段
- en: In Chapter 7, *Leveraging the New Default G1 Garbage Collector*, we reviewed
    the changes to the **Concurrent Mark Sweep** (**CMS**) garbage collector. CMS
    garbage collection involves scanning heap memory, marking objects for removal
    and then making a sweep to actually remove those objects. The CMS method of garbage
    collection is essentially an upgraded "Mark and Sweep" method; which you can refer
    to Chapter 7, *Leveraging the New Default G1 Garbage Collector*, for additional
    information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章，*利用新的默认G1垃圾收集器*中，我们回顾了**并发标记清除**（**CMS**）垃圾收集器的变化。CMS垃圾收集涉及扫描堆内存，标记要删除的对象，然后进行清除以实际删除这些对象。CMS的垃圾收集方法本质上是一种升级的“标记和清除”方法；您可以参考第7章，*利用新的默认G1垃圾收集器*，以获取更多信息。
- en: 'The current downside to CMS garbage collection is that the serial mark and
    sweep is implemented using a single thread. This results in unwanted pause times.
    Currently, full garbage collection takes place in four phases:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: CMS垃圾收集的当前缺点是，串行标记和清除使用单个线程实现。这导致了不希望的暂停时间。目前，完全垃圾收集发生在四个阶段：
- en: '**Marking phase**: Mark objects for collection'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记阶段**：标记要收集的对象'
- en: '**Forwarding phase**: Determine where live objects will be relocated'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**转发阶段**：确定活动对象将被迁移的位置'
- en: '**Adjust pointer phase**: Updates points based on new locations of live objects'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整指针阶段**：根据活动对象的新位置更新指针'
- en: '**Compaction phase**: Moves objects to designated locations'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**压缩阶段**：将对象移动到指定的位置'
- en: The future plan for CMS is to implement the mark and sweep so they can be performed
    in parallel. The change is not to the garbage collection algorithm. Instead, each
    of the above listed phases will be parallelized. This will result in greater efficiencies
    for CMS garbage collection and hopefully eliminate, or significantly reduce, pause
    times.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: CMS的未来计划是实现标记和清除，以便它们可以并行执行。这种变化不是针对垃圾收集算法。相反，上述列出的每个阶段都将被并行化。这将使CMS垃圾收集更加高效，并有望消除或显著减少暂停时间。
- en: REST APIs for JMX
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JMX的REST API
- en: '**Representational State Transfer** (**REST**), RESTful programming, and RESTful
    API use a client/server cacheable communications protocol, usually HTTP. REST
    is a common software architecture for developing networked applications.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**表示状态转移**（**REST**），RESTful编程和RESTful API使用客户端/服务器缓存通信协议，通常是HTTP。REST是开发网络应用的常见软件架构。'
- en: One of the future changes to the Java platform is to provide RESTful web interfaces
    to MBeans.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台未来的一个变化是提供RESTful网络接口给MBeans。
- en: '**Managed Bean** (**MBean**) is an object in Java that represents a resource
    to be managed. These resources could include a specific hardware device, an application,
    a service, or other component.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**托管Bean**（**MBean**）是Java中表示要管理的资源的对象。这些资源可能包括特定的硬件设备、应用程序、服务或其他组件。'
- en: 'The interfaces will permit MBeans to use the following HTTP methods:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口将允许MBeans使用以下HTTP方法：
- en: '`CONNECT`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONNECT`'
- en: '`DELETE`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DELETE`'
- en: '`GET`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GET`'
- en: '`HEAD`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HEAD`'
- en: '`OPTIONS`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OPTIONS`'
- en: '`POST`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`POST`'
- en: '`PUT`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PUT`'
- en: '`TRACE`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TRACE`'
- en: 'MBeans are managed using **Java Management Extensions** (**JMX**). The JMX
    architecture has three levels, as depicted in the following diagram:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MBeans使用**Java管理扩展**（**JMX**）进行管理。JMX架构有三个级别，如下面的图所示：
- en: '![](img/217c6d35-3906-4960-8d05-9975e27ce9d1.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/217c6d35-3906-4960-8d05-9975e27ce9d1.png)'
- en: As you can see, the REST adapter is part of the **Distributed Services** level.
    That level contains both connectors and adapters. The connectors provide mirroring
    of agent level interfaces to remote clients. The adapters, on the other hand,
    convert the interfaces using a different protocol. The future change will be to
    transform the services at the **Agent** level to REST APIs.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，REST适配器是**分布式服务**级别的一部分。该级别包含连接器和适配器。连接器提供代理级别接口到远程客户端的镜像。另一方面，适配器使用不同的协议转换接口。未来的更改将是将**代理**级别的服务转换为REST
    API。
- en: Support heap allocation
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持堆分配
- en: A proposed future change is to allow developers to designate alternate memory
    devices for the Java heap. Specifically, the proposal is to permit developers
    to designate non-DRAM memory for the Java heap. This change takes advantage of
    the decreasing cost of memory and memory devices.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的未来更改是允许开发者为Java堆指定替代内存设备。具体来说，建议允许开发者为Java堆指定非DRAM内存。这一变化利用了内存和内存设备的成本下降。
- en: Implementation is likely to use an `AllocateHeapAt` flag.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 实施可能使用`AllocateHeapAt`标志。
- en: JDK-related drafted proposals
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JDK相关的草案提案
- en: This section covers several JDK-related proposals that, at the time of this
    book's publication, were in the draft phase. That suggests they might not be fully
    analyzed or might even be cancelled. That being said, it is likely that each of
    these will move from drafted, to submitted, and then to targeted for the Java
    10 platform.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖了几个在本书出版时处于草案阶段的与JDK相关的提案。这表明它们可能还没有被完全分析，甚至可能被取消。尽管如此，这些提案中的每一个很可能将从草案阶段提交，然后针对Java
    10平台进行目标定位。
- en: 'Draft proposals covered in this section are as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涵盖的草案提案如下：
- en: Finalization promptness
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 终结化及时性
- en: Java memory model
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java内存模型
- en: Foreign function interface
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部函数接口
- en: Isolated methods
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隔离方法
- en: Reduce metaspace waste
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少元空间浪费
- en: Improve IPv6 support
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改善IPv6支持
- en: Unboxed argument lists for method handles
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法句柄的无包装参数列表
- en: Enhanced MandelblotSet Demo Using Value Types
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用值类型增强的MandelblotSet演示
- en: Efficient Array Comparison Intrinsics
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高效的数组比较内建函数
- en: Finalization promptness
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 终结化及时性
- en: 'The Java language includes finalization to clean up objects that were unreachable
    by garbage collection. The proposed change is to make this process quicker and
    will require modifications to the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Java语言包括终结化（finalization）来清理垃圾回收无法触及的对象。建议的更改是使此过程更快，并将需要修改以下内容：
- en: '`ReferenceHandleThread`'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ReferenceHandleThread`'
- en: '`FinalizerThread`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FinalizerThread`'
- en: '`java.lang.ref.Reference`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang.ref.Reference`'
- en: 'Additional changes related to increasing the promptness of finalization includes
    the creation of a new API. The following graphic details how the API will be able
    to implement GC and runtime actions, and then inform that finalization needs to
    take place. This certainly should result in faster processing:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与提高终结化及时性相关的其他更改包括创建一个新的API。以下图形详细说明了API将如何实现GC和运行时操作，然后通知需要进行终结化。这肯定会导致处理速度更快：
- en: '![](img/5117550c-69cb-4f63-bdd4-d4b186274a98.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5117550c-69cb-4f63-bdd4-d4b186274a98.png)'
- en: Java memory model
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java内存模型
- en: 'There is a continuing effort to keep **Java''s memory model** (**JMM**) updated.
    Current efforts are focused on several areas to include:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一直有努力保持**Java的内存模型**（**JMM**）更新。当前的工作重点包括几个领域，包括：
- en: Shared memory concurrency
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享内存并发
- en: JVM concurrency support
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM并发支持
- en: JDK components
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JDK组件
- en: Tools
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具
- en: 'Expected results of JMM-related engineering efforts are as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 与JMM（Java内存模型）相关的工程努力的预期结果如下：
- en: Improved formalization
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进的形式化
- en: JVM voverage
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM覆盖
- en: Extended scope
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展范围
- en: C11/C++11 compatibility
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C11/C++11兼容性
- en: Implementation guidance
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施指南
- en: Testing support
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试支持
- en: Tool support
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具支持
- en: Foreign Function Interfaces
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部函数接口
- en: '**Foreign Function Interfaces** (**FFI**) are software APIs that permits programs
    to call methods/functions from a program written in a different language. In an
    upcoming version of the JDK, we are apt to see an FFI that allows developers to
    call upon shared libraries and operating-system kernels directly from java methods.
    The proposed FFI will reportedly also enable developers to manage native memory
    blocks.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**外部函数接口**（**FFI**）是软件API，允许程序从用不同语言编写的程序中调用方法/函数。在即将发布的JDK版本中，我们可能会看到一种FFI，允许开发者在Java方法中直接调用共享库和操作系统内核。据称，提议的FFI还将使开发者能够管理本地内存块。'
- en: The new FFI will be similar to **Java Native Access** (**JNA**) and **Java Native
    Runtime** (**JNR**). JNA is a library that permits access to native shared libraries
    without having to use the **Java Native Interface** (**JNI**). JNR is a Java API
    that is used for calling native code. The proposed FFI will permit and optimize
    native method calls as well as optimized native memory management.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 FFI 将类似于 **Java Native Access** (**JNA**) 和 **Java Native Runtime** (**JNR**)。JNA
    是一个库，允许在不使用 **Java Native Interface** (**JNI**) 的情况下访问本地共享库。JNR 是一个用于调用本地代码的 Java
    API。提议的 FFI 将允许并优化本地方法调用以及优化的本地内存管理。
- en: Isolated methods
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立的方法
- en: 'The `MethodHandles.Lookup` class is part of the `java.lang.invoke` package.
    We use lookup objects to create method handles and a lookup class to access them.
    Here is the header for the lookup class:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`MethodHandles.Lookup` 类是 `java.lang.invoke` 包的一部分。我们使用查找对象来创建方法句柄，并使用查找类来访问它们。以下是查找类的头文件：'
- en: '[PRE0]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Future changes to the `MethodHandles.Lookup` class will support the loading
    of method byte codes without the need for an attached class. Furthermore, these
    methods will be referenced using method handles. The class will have a new `loadCode`
    method.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`MethodHandles.Lookup` 类的未来更改将支持无需附加类即可加载方法字节码。此外，这些方法将使用方法句柄进行引用。该类将有一个新的
    `loadCode` 方法。'
- en: Reducing metaspace waste
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 减少元空间浪费
- en: Currently, when metaspace chunks are freed, they cannot be used as different
    sized chunks. So, if metaspace chunk A was freed and was of size X, that space
    cannot be reused for a metaspace chunk greater than or less than size X. This
    results in a tremendous amount of unusable metaspace waste. This can also lead
    to out-of-memory errors.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当元空间块被释放时，它们不能用作不同大小的块。因此，如果元空间块 A 被释放且大小为 X，那么该空间不能被重用于大于或小于大小 X 的元空间块。这导致大量不可用的元空间浪费。这也可能导致内存不足错误。
- en: 'A future change to the JDK will resolve this issue by increasing the reuse
    of metaspace chunks. The change will support the following cases:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 的未来更改将通过增加元空间块的重用来解决这个问题。该更改将支持以下情况：
- en: Allow neighboring chunks to form a larger chunk
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许相邻块形成一个更大的块
- en: Allow larger chunks to be divided into smaller chunks
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许较大的块被分割成较小的块
- en: This proposed change resolves the issue by ensuring smaller chunks can be reused
    and that larger chunks are not wasted as they can be split to support the reuse
    of smaller chunks.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 此提议的更改通过确保较小的块可以被重用，以及较大的块不会被浪费（因为它们可以被分割以支持较小块的重用）来解决这个问题。
- en: Improving IPv6 support
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进 IPv6 支持
- en: '**Internet Protocol version 6** (**IPv6**) is the current version of the Internet
    Protocol. The Internet Protocol provides the identification and location schema
    that enables Internet traffic routing. IPv6 is considered an Internet layer protocol
    that is sued by packet-switched networking.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**互联网协议版本 6** (**IPv6**) 是当前版本的互联网协议。互联网协议提供了识别和位置模式，使得互联网流量路由成为可能。IPv6 被视为一个用于分组交换网络的互联网层协议。'
- en: 'The following diagram shows the history of the Internet Protocol:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了互联网协议的历史：
- en: '![](img/6692a822-c0aa-4b91-8ca9-d73e492166dc.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6692a822-c0aa-4b91-8ca9-d73e492166dc.png)'
- en: 'IPv6 is the replacement for IPv4 and has several changes that the Java platform
    should support. Key IPv6 changes from IPv4 are categorized as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: IPv6 是 IPv4 的替代品，并且有几个变化，Java 平台应该支持。从 IPv4 到 IPv6 的关键变化如下分类：
- en: Jumbograms
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jumbograms
- en: Larger address space
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更大的地址空间
- en: Mobility
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动性
- en: Multicasting
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多播
- en: Network-layer security
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络层安全
- en: Options extensibility
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选项可扩展性
- en: Privacy
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐私
- en: Simplified router processing
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简化的路由器处理
- en: Stateless address auto-configuration
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无状态地址自动配置
- en: 'As the Internet continues to transition from IPv4 to IPv6, the following cases
    are possible and should all be supported in the Java 10 platform:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 随着互联网继续从 IPv4 过渡到 IPv6，以下情况是可能的，并且应该在 Java 10 平台上得到支持：
- en: Multiple versions of IPv4 exist
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在多个版本的 IPv4
- en: One version of IPv6 exists
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一个版本的 IPv6
- en: Multiple versions of IPv6 exist
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在多个版本的 IPv6
- en: Multiple versions of IPv4 and one version of IPv6 exist
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在多个版本的 IPv4 和一个版本的 IPv6
- en: Multiple versions of IPv4 and IPv6 exist
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在多个版本的 IPv4 和 IPv6
- en: Unboxed argument lists for method handles
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法句柄的无包装参数列表
- en: 'The way in which unboxed argument lists are currently handled can lead to processing
    inefficiencies. This is especially true when we use `Object[]` or `List<object>`
    as variable-length argument lists. Java uses `java.lang.invoke` to transform the
    method calls using boxing. In Java, autoboxing is when the compiler automatically
    converts primitive types and their corresponding object wrapper classes. Here
    is the list of wrapper classes along with the corresponding primitive type:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当前处理无包装参数列表的方式可能导致处理效率低下。这在我们使用`Object[]`或`List<object>`作为可变长度参数列表时尤其如此。Java使用`java.lang.invoke`来转换使用装箱的方法调用。在Java中，自动装箱是编译器自动将原始类型及其相应的对象包装类进行转换。以下是包装类及其对应的原始类型的列表：
- en: '| **Wrapper class** | **Primitive type** |'
  id: totrans-129
  prefs: []
  type: TYPE_TB
  zh: '| **包装类** | **原始类型** |'
- en: '| Boolean | boolean |'
  id: totrans-130
  prefs: []
  type: TYPE_TB
  zh: '| 布尔 | boolean |'
- en: '| Byte | byte |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 字节 | byte |'
- en: '| Character | char |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| 字符 | char |'
- en: '| Double | double |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| 双精度浮点 | double |'
- en: '| Float | float |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| 浮点 | float |'
- en: '| Integer | int |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 整数 | int |'
- en: '| Long | long |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 长整型 | long |'
- en: '| Short | short |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 短 | short |'
- en: 'As you can see from the following illustration autoboxing occurs when we go
    from primitive values to an object of the associated wrapper class and, when we
    go from an object of a wrapper class to primitive values it is called unboxing:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下插图所示，当从原始值到相关包装类的对象转换时发生自动装箱，当从包装类的对象到原始值转换时称为拆箱：
- en: '![](img/03f1f047-e14b-4bc4-bd1c-e6d75f2530ab.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/03f1f047-e14b-4bc4-bd1c-e6d75f2530ab.png)'
- en: The inefficiencies are due to mismatches between the argument's list actual
    types and the array or list encasing them. In a future Java release, these inefficiencies
    will be removed. A new `ArgumentList` class will be added to the Java platform
    that polymorphically boxes valid arguments lists into a heap node.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 不效率是由于参数列表的实际类型与封装它们的数组或列表之间的不匹配。在未来的Java版本中，这些不效率将被消除。Java平台将添加一个新的`ArgumentList`类，该类将多态地将有效的参数列表装箱到堆节点中。
- en: Enhanced MandelblotSet demo using value types
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用值类型增强的MandelblotSet演示
- en: This low priority Java Enhancement Proposal is likely to be implemented in Java
    10 as its scope is limited. The plan is to develop a sample Java application that
    demonstrates improvements in memory and performance specific to using Valhalla
    project components, value types, and generics instead of primitive types.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这个低优先级的Java增强提案可能将在Java 10中实现，因为其范围有限。计划是开发一个示例Java应用程序，展示使用Valhalla项目组件、值类型和泛型而不是原始类型在内存和性能方面的改进。
- en: Valhalla project components refer to user-defined custom immutable primitive
    types as value types.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Valhalla项目组件指的是用户定义的自定义不可变原始类型为值类型。
- en: You can read more about value types in the Java Virtual Machine section of this
    chapter.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本章的Java虚拟机部分中了解更多关于值类型的信息。
- en: A Mandelbrot set is a specific example of fractal mathematics used in chaos
    theory. The sample MandelbrotSet that accompanied JDK 8 provides a comparison
    of parallel and sequential data streams. In Java 10 or beyond, the sample MandelbrotSet
    will be updated to show performance and memory efficiencies between using Valhalla
    project components, value types and generics as opposed to primitive types.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Mandelbrot集是混沌理论中使用的分形数学的一个特定例子。随JDK 8附带的示例MandelbrotSet提供了并行和顺序数据流的比较。在Java
    10或更高版本中，示例MandelbrotSet将被更新以展示使用Valhalla项目组件、值类型和泛型与使用原始类型之间的性能和内存效率。
- en: Efficient array comparison intrinsics
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高效的数组比较内建函数
- en: A future change to the Java platform will be to include a method for comparing
    arrays. Currently, this is something developers have to code on their own. The
    change will be incorporated by adding something similar to the `compareTo` method
    in `java.util.Arrays`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台未来的一个变化是包括一个比较数组的函数。目前，这是开发者必须自己编写的。这个变化将通过添加类似于`java.util.Arrays`中的`compareTo`方法来实现。
- en: Although specifics are not available, the prospect of being able to compare
    arrays using native functionality is exciting. This is a component that will save
    many developers time. This is likely to be realized in the Java 10 platform release.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然具体细节尚不可用，但能够使用原生功能比较数组的前景是令人兴奋的。这是一个将节省许多开发者时间的组件。这可能在Java 10平台版本中实现。
- en: Future changes to the Java Compiler
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java编译器的未来变更
- en: 'There are two notable draft changes to the Java platform, specifically the
    Java Compiler. These Java Enhancement Proposals are listed as follows and detailed
    in this section:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Java平台有两个值得注意的草案变更，特别是Java编译器。这些Java增强提案如下所示，并在本节中详细说明：
- en: Policy for retiring javac `-source` and `-target` options
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退役javac `-source` 和 `-target` 选项的政策
- en: Pluggable static analyzers
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可插拔静态分析器
- en: Policy for retiring javac -source and -target options
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 退役javac -source 和 -target 选项的政策
- en: A formal draft proposal has been submitted to define a policy for retiring `-source`
    and `-target` options. This effort is to help reduce maintenance costs of the
    compiler. The `-source` and `-target` options were provided to ease development
    efforts, but not formally required by any standards. Starting with the Java 9
    platform, these target options are not recognized.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 已提交一个正式的草案提案，以定义退役 `-source` 和 `-target` 选项的政策。这项工作旨在帮助降低编译器的维护成本。`-source`
    和 `-target` 选项是为了简化开发工作而提供的，但并非任何标准所正式要求。从Java 9平台开始，这些目标选项不再被识别。
- en: The new policy is called "one plus three back" which means that the current
    version will be supported as well as the three previous releases. This policy
    will persist with JDK 10.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 新政策被称为“一加三回”，这意味着当前版本将得到支持，以及之前的三个版本。此政策将延续至JDK 10。
- en: Pluggable static analyzers
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可插拔静态分析器
- en: An ongoing research Java Enhancement Proposal was initiated in the summer of
    2013 as an exploratory measure and future support for a full Java Enhancement
    Proposal to empower developers to define extensions that can, at compile time,
    conduct the arbitrary static analysis. The research is to see how a pluggable
    static type analyzer framework can be implemented for the Java Compiler.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 2013年夏天启动了一个持续的研究Java增强提案（Java Enhancement Proposal），作为探索性措施，并为未来的完整Java增强提案提供支持，以使开发者能够定义在编译时可以执行任意静态分析的扩展。这项研究旨在了解如何为Java编译器实现一个可插拔的静态类型分析器框架。
- en: 'The goals of the research are as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 研究的目标如下：
- en: Collect static analyzer requirements
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集静态分析器需求
- en: Analyze static analyzers
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析静态分析器
- en: Determine the requirements for a framework that supports static analyzers
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定支持静态分析器的框架需求
- en: Implement and test
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施和测试
- en: The final outcome of the ongoing research will be either to submit a feature
    Java Enhancement Proposal or to make the recommendation that pursuit of the feature
    cease.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 持续研究的最终结果将是提交一个功能Java增强提案，或者建议停止追求该功能。
- en: Future Changes to the Java Virtual Machine
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java虚拟机的未来更改
- en: Several new features and enhancements to the Java Virtual Machine (JVM) and
    core libraries have been submitted and drafted. It is likely that at least some
    of these features and enhancements will be realized in the Java 10 platform, and
    others will be saved for later releases.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 已提交和草拟了几个针对Java虚拟机（JVM）和核心库的新功能和增强。很可能至少这些功能和增强将在Java 10平台上实现，其他则将保留在后续版本中。
- en: JVM-related submitted proposals
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM相关提交的提案
- en: 'There are three Java Enhancement Proposals that have been submitted. While,
    not currently earmarked for Java 10, it is likely that we will see the changes
    when Java 10 is released. The three proposals are listed as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 已提交了三个Java增强提案。虽然目前没有指定为Java 10，但在Java 10发布时我们可能会看到这些变化。以下列出了这三个提案：
- en: Container aware Java
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器感知Java
- en: Enable execution of Java methods on GPU
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GPU上启用Java方法的执行
- en: 'Epsilon GC: The arbitrarily low overhead gGarbage (non-) collector'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Epsilon GC：任意低开销的垃圾（非）收集器
- en: Container aware Java
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器感知Java
- en: An effort is being made so the JVM and core libraries are aware when they are
    running in a container. Moreover, to be adaptive in the use of available system
    resources. This feature is especially relevant with the ubiquitous nature of cloud
    computing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 正在努力使JVM和核心库在运行在容器内时能够感知。此外，为了能够适应使用可用系统资源。这个特性与云计算的普遍性特别相关。
- en: 'There are two major components of the proposed feature:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的功能有两个主要组成部分：
- en: 'Detection:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检测：
- en: Determine if Java is running inside a container
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定Java是否在容器内运行
- en: 'Container resource exposure:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器资源暴露：
- en: Expose container resources limits
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露容器资源限制
- en: Expose container resource configuration
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暴露容器资源配置
- en: 'Several configuration status points have been initially identified:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 已初步确定了几个配置状态点：
- en: '| **General** | **CPU-related** | **Memory-related** |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| **通用** | **CPU相关** | **内存相关** |'
- en: '| `isContainerized` | CPU Period | Block I/O Device Weight |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `isContainerized` | CPU周期 | 块I/O设备权重 |'
- en: '|  | CPU Quota | Block I/O Weight |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '|  | CPU配额 | 块I/O权重 |'
- en: '|  | CPU Set Memory Nodes | Current Memory Usage |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '|  | CPU集内存节点 | 当前内存使用 |'
- en: '|  | CPU Sets | Device I/O Read Rate |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '|  | CPU集 | 设备I/O读取速率 |'
- en: '|  | CPU Usage | Device I/O Write Rate |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '|  | CPU使用率 | 设备I/O写入速率 |'
- en: '|  | CPU Usage Per CPU | Max Memory Usage |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '|  | 每个CPU的CPU使用率 | 最大内存使用量 |'
- en: '|  | Number of CPUs | Maximum Kernal Memory |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '|  | CPU数量 | 最大内核内存 |'
- en: '|  |  | Memory Swappiness |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 内存偏好 |'
- en: '|  |  | OOM Kill Enabled |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '|  |  | OOM杀戮启用 |'
- en: '|  |  | OOM Score Adjustment |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '|  |  | OOM分数调整 |'
- en: '|  |  | Shared Memory Size |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 共享内存大小 |'
- en: '|  |  | Soft Memory Limit |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 软件内存限制 |'
- en: '|  |  | Total Memory Limit |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '|  |  | 总内存限制 |'
- en: Initially, this feature is scheduled to support Docker on Linux-64\. A likely
    scenario is that this feature be released with Java 10 with sole support for Docker
    on Linux-64\. Then, feature support will be expanded in subsequent releases of
    the Java platform.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，这个特性计划支持Linux-64上的Docker。一个可能的场景是，这个特性将与Java 10一起发布，仅支持Linux-64上的Docker。然后，在Java平台后续版本中，将扩展对特性的支持。
- en: Enable execution of Java methods on GPU
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在GPU上启用Java方法的执行
- en: Enabling the seamless ability for Java applications to take advantage of GPUs
    is the subject of project Sumatra. The goal is to use Java's Stream API in parallel
    and the lambda programming model. It makes great sense for us to exploit the processing
    power and efficiency of GPUs.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 使Java应用程序能够无缝地利用GPU是Sumatra项目的研究主题。目标是使用Java的Stream API并行和lambda编程模型。利用GPU的处理能力和效率对我们来说是非常有意义的。
- en: 'The overarching goal is to make this feature easy to use for developers. The
    feature will be implemented with the following characteristics:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 总体目标是使这个特性对开发者来说易于使用。这个特性将以以下特性实现：
- en: Do not change the syntax of the Java parallel stream API
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要更改Java并行流API的语法
- en: Hardware and software stacks should be automatically detected
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件和软件堆栈应自动检测
- en: Automatic detection and analysis to determine if using the GPU makes sense from
    a performance standard
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动检测和分析，以确定从性能标准来看使用GPU是否合理
- en: Provide CPU execution when offloading processing to a GPU fails
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将处理卸载到GPU失败时提供CPU执行
- en: There will be no performance degradation
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将不会出现性能下降
- en: There will be no new security risks introduced by this feature
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个特性不会引入新的安全风险
- en: There will be memory persistence between the CPU and GPU
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CPU和GPU之间将存在内存持久性
- en: The key benefit of this Java Enhancement Proposal will be performance improvements
    for our Java applications.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Java增强提案的主要好处将是提高我们的Java应用程序的性能。
- en: Epsilon GC - The arbitrarily low overhead garbage (non-) collector
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Epsilon GC - 随意低开销的垃圾（非）收集器
- en: In Chapter 7, *Leveraging the New Default G1 Garbage Collector*, we detailed
    the enhancements to Java's Garbage Collection with the release of the Java 9 platform.
    In the spirit of continuous improvement, a Java Enhancement Proposal has been
    submitted to develop a garbage collection to specifically handle memory allocation.
    This garbage collector will signal the JVM to shutdown when no more memory is
    available on the Java heap.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在第7章“利用新的默认G1垃圾回收器”中，我们详细介绍了Java垃圾回收器在Java 9平台发布时的增强功能。为了持续改进，已经提交了一个Java增强提案，以开发一个专门处理内存分配的垃圾回收器。当Java堆上没有更多可用内存时，这个垃圾回收器将向JVM发送关闭信号。
- en: The goal is for this garbage collector to be passive and use very limited overhead.
    The introduction of this garbage collection is not intended to degrade performance.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这个垃圾回收器的目标是被动且使用非常有限的额外开销。引入这种垃圾回收的目的是不降低性能。
- en: This change will not impact current garbage collectors.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个更改不会影响当前的垃圾回收器。
- en: JVM-related drafted proposals
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JVM相关提案
- en: 'The following Java Enhancement Proposals have been drafted for a future version
    of the Java platform and are detailed in this section:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Java增强提案已为Java平台的未来版本制定，并在本节中详细说明：
- en: Provide stable USDT probe points on JVM compiled methods
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在JVM编译方法上提供稳定的USDT探针点
- en: Concurrent Monitor Deflation
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并发监视器膨胀
- en: Low-overhead way of sampling Java heap allocations
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以低开销的方式采样Java堆分配
- en: Diagnostic Command Framework
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诊断命令框架
- en: Enhanced Class Redefinition
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增强类重定义
- en: Enable NUMA mode by default when appropriate
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在适当的情况下默认启用NUMA模式
- en: Value objects
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值对象
- en: Align JVM Access Checks
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐JVM访问检查
- en: Provide stable USDT probe points on JVM compiled methods
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在JVM编译方法上提供稳定的USDT探针点
- en: '**User-level Statistically Defined Tracing** (**USDT**) is used to insert probe
    points to mark the entry and exit of methods. Compilers then permit a handshake
    with tracing tools so that those tools can discover the probe points and manipulate
    them.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户级统计定义跟踪**（**USDT**）用于插入探针点以标记方法的进入和退出。编译器然后允许与跟踪工具进行握手，以便这些工具可以发现探针点并对其进行操作。'
- en: Common tracing tools are Dtrace and **Berkeley Packet Filters** (**BPF**).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 常见的跟踪工具有Dtrace和**伯克利数据包过滤器**（**BPF**）。
- en: The Java Virtual Machine, even with JVM 9, does not support this technology
    set. The current lack of support stems from how the JVM generates compiled code;
    it does this dynamically without any static **Executable Linkable Files** (**ELFs**).
    Tracing tools need the ELFs to work. An additional mitigating factor is that the
    JVM dynamically patches its own generated code which does not support external
    patching.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是JVM 9，Java虚拟机也不支持此技术集。当前缺乏支持源于JVM生成编译代码的方式；它以动态方式生成，没有任何静态**可执行链接文件**（**ELFs**）。跟踪工具需要ELFs才能工作。另一个缓解因素是JVM动态地修补其生成的代码，这些代码不支持外部修补。
- en: 'In a future Java release, likely Java 10, the **JVMTI** (**JVM Tools Interface**)
    will be modified to support probe tools to perform their standard operations on
    the JVM''s dynamically compiled code. Provisionally identified changes to JVMTI
    APIs include:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来的Java版本中，可能是Java 10，**JVMTI**（**JVM工具接口**）将被修改以支持探针工具在JVM的动态编译代码上执行其标准操作。暂时确定的JVMTI
    API更改包括：
- en: Adding patch points or method entry and exit
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加补丁点或方法进入和退出
- en: The enumeration of the compiled methods
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译方法的枚举
- en: State change notifications on compiled method load
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译方法加载时的状态变化通知
- en: Query support
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查询支持
- en: Toggle trace points on/off
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换跟踪点的开关
- en: Making chunks of compiled methods inspectable
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使编译方法的块可检查
- en: The good news is that there will not need to be any changes to how Java code
    is compiled. It can already be patched, so the required functionality will be
    created by modifying the USDT API as well as a few changes to the JVM.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，不需要对Java代码的编译方式进行任何更改。它已经可以打补丁，因此所需的功能将通过修改USDT API以及JVM的一些更改来创建。
- en: Concurrent monitor deflation
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 并发监视器膨胀
- en: 'A monitor, in our context, is a synchronized mechanism that controls concurrent
    access to an object. Monitors help prevent multiple threads from accessing a monitored
    object at the same time. The JVM automatically switches between three monitor
    implementation methods. The three implementation methods are illustrated as follows:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的上下文中，监视器是一种同步机制，用于控制对对象的并发访问。监视器有助于防止多个线程同时访问被监视的对象。JVM自动在三种监视器实现方法之间切换。三种实现方法如下所示：
- en: '![](img/6b8f06da-86a0-4a04-95c8-fbb2a419f68c.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6b8f06da-86a0-4a04-95c8-fbb2a419f68c.png)'
- en: The initial lock of a Java object uses biased locking. That method ensures only
    the locking thread can lock the object. With this approach, the JVM installs a
    thread pointer in the Java object. When a second thread attempts to lock the Java
    object, the JVM switches to the basic locking monitor implementation method. This
    second method uses **compare-and-swap** (**CAS**) operations. When a CAS operation
    fails, such as when a second thread attempt to lock the Java object, the JVM switches
    to the third monitor implementation method. That method is a full-blown monitor.
    This method requires native heap storage which is referred to as the monitor being
    inflated.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Java对象的初始锁定使用偏向锁定。该方法确保只有锁定线程可以锁定对象。采用这种方法，JVM在Java对象中安装一个线程指针。当第二个线程尝试锁定Java对象时，JVM切换到基本的锁定监视器实现方法。第二种方法使用**比较和交换**（**CAS**）操作。当CAS操作失败时，例如当第二个线程尝试锁定Java对象时，JVM切换到第三种监视器实现方法。该方法是一个完整的监视器。该方法需要本地堆存储，被称为监视器膨胀。
- en: The purpose of the Concurrent Monitor Deflation Java Enhancement Proposal is
    to perform monitor deflation while the threads are running. This will decrease
    the JVM-induced pause times.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 并发监视器膨胀Java增强提案的目的是在线程运行时执行监视器膨胀。这将减少JVM引起的暂停时间。
- en: Provide a low-overhead way of sampling Java heap allocations
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供一种低开销的方式来采样Java堆分配
- en: Mismanagement of Java heaps can result in heap exhaustion, and insufficient
    memory due to memory fragmentation (GC thrashing). In a future release of Java,
    most likely Java 10, we will have a means of sampling Java heap allocations. This
    will be implemented by enhancing the **Java Virtual Machine Tools Interface**
    (**JVMTI**). The resulting functionality will provide an extremely low-overhead
    solution.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 管理不当的Java堆可能导致堆耗尽，以及由于内存碎片化（GC抖动）导致的内存不足。在Java的未来版本中，很可能是Java 10，我们将有一种方法来采样Java堆分配。这将通过增强**Java虚拟机工具接口**（**JVMTI**）来实现。结果功能将提供一个极低开销的解决方案。
- en: Diagnostic Command Framework
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 诊断命令框架
- en: Java Enhancement Proposal 137, Diagnostic Command Framework, proposes a framework
    be created for sending diagnostic commands to the Java Virtual Machine.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案137，诊断命令框架，提议创建一个框架，用于向Java虚拟机发送诊断命令。
- en: The framework will include a **Java Management Extension** (JMX) interface,
    which will permit remote issuing of diagnostic commands via a JMX connection.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架将包括一个**Java管理扩展**（JMX）接口，它将允许通过JMX连接远程发出诊断命令。
- en: The JRocket Mission Control tools already have this feature successfully implemented.
    This served as proof of concept and it is therefore extremely likely that this
    enhancement will be part of the Java 10 platform.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: JRocket任务控制工具已经成功实现了这一功能。这证明了概念的正确性，因此这一增强功能很可能将成为Java 10平台的一部分。
- en: Enhanced Class Redefinition
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 增强类重新定义
- en: 'Java Enhancement Proposal 159, Enhanced Class Redefinition, calls for enhanced
    JVM capabilities in regards to class redefinition at runtime. Specifically the
    proposal includes the following class redefinition operations:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案159，增强类重新定义，呼吁在运行时进行类重新定义时增强JVM的能力。具体来说，该提案包括以下类重新定义操作：
- en: Adding super types
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加超类型
- en: Adding methods
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加方法
- en: Adding static fields
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加静态字段
- en: Adding instance fields
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加实例字段
- en: Removing methods
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除方法
- en: Removing static fields
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除静态字段
- en: Removing instance fields
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除实例字段
- en: Current JVM class redefinition capabilities are limited to method swapping.
    This is viewed as extremely restrictive. With the new proposed enhancement, developers
    will not have to restart their applications after changes. This is especially
    beneficial when dealing with large and distributed systems.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 当前JVM类重新定义功能仅限于方法交换。这被视为非常限制性。在新的提议增强功能中，开发者无需在更改后重新启动他们的应用程序。这对于处理大型和分布式系统特别有益。
- en: Enable NUMA mode by default when appropriate
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在适当的情况下默认启用NUMA模式
- en: 'Java Enhancement Proposal 163, enable NUMA mode by default when appropriate.
    This proposal is only applicable to NUMA hardware. The intent is to have the JVM
    enable the following flag when it detects NUMA hardware:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案163，在适当的情况下默认启用NUMA模式。此提案仅适用于NUMA硬件。目的是当JVM检测到NUMA硬件时，启用以下标志：
- en: '[PRE1]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This flag can currently be evoked manually. With the proposed enhancement, it
    will be evoked automatically by the JVM when it has detected that it is running
    on a NUMA piece of hardware.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 此标志目前可以通过手动调用。在提议的增强功能中，当JVM检测到它正在NUMA硬件上运行时，将自动调用此标志。
- en: '**Non-Uniform Memory Access** (**NUMA**) is a memory model used in computer
    multiprocessing. With this memory model, access time is dependent on the memory
    location relative to that of the processor.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**非一致性内存访问**（**NUMA**）是计算机多处理中使用的内存模型。在这个内存模型中，访问时间取决于内存位置相对于处理器的位置。'
- en: This will be an easy enhancement to implement and is likely to be part of the
    Java 10 platform release.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个易于实现的增强功能，并可能成为Java 10平台发布的一部分。
- en: Value objects
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 值对象
- en: Java Enhancement Proposal 169, value objects, intended to provide the necessary
    JVM infrastructure to permit working with objects that are immutable as well as
    objects that are without reference. This new infrastructure will allow for the
    efficient by-value computation with non-primitive data types.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案169，值对象，旨在提供必要的JVM基础设施，以允许处理不可变对象以及无引用对象。这个新基础设施将允许使用非原始数据类型进行高效的按值计算。
- en: 'The set of goals for this proposal include the following:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 此提案的目标包括以下内容：
- en: More closely align `java.lang.Integer` and `int` semantics.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更好地与`java.lang.Integer`和`int`语义对齐。
- en: Make Java data structures more portable
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使Java数据结构更具可移植性
- en: 'Support abstract data types with a performance similar to that of Java primitive
    data types:'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持与Java原始数据类型性能相似的高级数据类型：
- en: User-defined
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户定义的
- en: Library-defined
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库定义的
- en: Optimize parallel computations by enabling function-style computation with pure
    data
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过启用纯数据函数式计算来优化并行计算
- en: 'Improve support for:'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改进支持：
- en: Complex numbers
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复数
- en: Vector values
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向量值
- en: Tuples
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元组
- en: Increase safety and security
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高安全性和安全性
- en: Decrease "defensive copying"
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少“防御性复制”
- en: 'One of the stated implementation strategies is to add a `lockPermanently` operation.
    It will get passed an Object and then mark that Object as both immutable and unaliasable.
    The concept of a permanently locked object stipulates that:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的实现策略之一是添加一个`lockPermanently`操作。它将传递一个对象，然后将其标记为不可变且不可别名化。永久锁定对象的观念规定：
- en: Fields cannot be changed
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字段无法更改
- en: Elements of an array cannot be changed
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组的元素无法更改
- en: No synchronization is possible
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法进行同步
- en: '''Waiting'' methods cannot be evoked'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “等待”方法不能被调用
- en: '''Notifying'' methods cannot be evoked'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: “通知”方法不能被调用
- en: Identity hash codes inquiries are not permitted
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不允许查询身份哈希码
- en: Pointer equality checks cannot be performed
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无法执行指针相等性检查
- en: This is likely to be one of the more popular additions to the Java 10 platform.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是Java 10平台最受欢迎的添加之一。
- en: Align JVM Access Checks
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对齐JVM访问检查
- en: Java Enhancement Proposal 181, Align JVM Checks with Java Language Rules for
    Nested Classes, focuses on the need to align JVM access checking rules with Java
    language rules, specifically for constructors, fields, and methods in nested classes.
    This will be accomplished by partitioning related classes in nests. Class files
    will be able to access private names of other class files in the same nest.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Java增强提案181，将嵌套类的JVM检查与Java语言规则对齐，重点关注将JVM访问检查规则与Java语言规则对齐的需要，特别是对于嵌套类中的构造函数、字段和方法。这将通过在嵌套中分区相关类来实现。类文件将能够访问同一嵌套中其他类文件的私有名称。
- en: Nests will share an access control context. With the advent of nests, access
    bridges will not be required. The bulk of the change will be to the JVM's access
    rules.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套将共享一个访问控制上下文。随着嵌套的出现，将不再需要访问桥。大部分的更改将针对JVM的访问规则。
- en: Future Changes to JavaX
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaX未来的更改
- en: 'The `Javax.*` packages are the subject of two specific Java Enhancement Proposals
    that have been submitted for a future Java platform release. Those proposals are
    as follows:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`Javax.*`包是两个特定于Java增强提案的主题，这些提案已提交给未来的Java平台发布。以下为这些提案：'
- en: JMX specific annotations for registration of managed resources
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于注册管理资源的JMX特定注解
- en: Modernize the GTK3 Look and Feel implementation
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代化GTK3的外观和感觉实现
- en: JMX specific annotations for registration of managed resources
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JMX特定注解用于注册管理资源
- en: The draft Java Enhancement Proposal titled, JMX specific annotations for registration
    of managed resources, will provide a set of annotations for registration and configuration
    of **MBeans** (**Managed Bean**).
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 标题为“JMX特定注解用于注册管理资源”的Java增强提案草案将为注册和配置**MBeans**（**管理Bean**）提供一组注解。
- en: An MBean is a Java Object representing a manageable resource (app, service,
    component, or device).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: MBean是一个表示可管理资源的Java对象（应用程序、服务、组件或设备）。
- en: The goal of this proposal is to lessen the burden on developers in the registration
    and configuring of MBeans. In addition, the source code readability will increase
    by ensuring all MBean declaration components are co-located.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 本提案的目标是减轻开发者在注册和配置MBeans时的负担。此外，通过确保所有MBean声明组件都位于同一位置，将提高源代码的可读性。
- en: The JMX specific annotations will be located in the `javax.management.annotations`
    package.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: JMX特定注解将位于`javax.management.annotations`包中。
- en: This Java Enhancement Proposal has been specifically planned for Java 11\. Although,
    there is a possibility that it could be redesigned for Java 10.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 本Java增强提案已特别规划用于Java 11。尽管如此，它有可能被重新设计用于Java 10。
- en: Modernize the GTK3 Look and Feel Implementation
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代化GTK3外观和感觉实现
- en: GTK3 is a widget toolkit used for creating graphical user interfaces, formally
    known as the GIMP toolkit. The draft Java Enhancement Proposal titled, Modernize
    the GTK3 Look and Feel implementation, calls for the rewriting of the current
    GTK2 Look and Feel so that it uses GTK3 instead.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: GTK3是一个用于创建图形用户界面的小部件工具包，正式名称为GIMP工具包。名为“现代化GTK3外观和感觉实现”的Java增强提案草案呼吁重写当前的GTK2外观和感觉，以便使用GTK3。
- en: GTK3 implementation will not replace GTK2\. It is important to note that one
    or the other, not both of these can be used at runtime.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: GTK3实现将不会取代GTK2。需要注意的是，运行时只能使用其中一个，而不能同时使用这两个。
- en: You can access the GTK3 reference manual at [https://developer.gnome.org/gtk3/stable/](https://developer.gnome.org/gtk3/stable/).
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.gnome.org/gtk3/stable/](https://developer.gnome.org/gtk3/stable/)
    访问 GTK3 参考手册。
- en: Ongoing Special Projects
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行中的特别项目
- en: 'Java Enhancement Proposals present design and implementation changes to the
    Java platform. The criteria for a JEP being drafted is that the work must meet
    at least one of the following:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: Java 增强提案（JEP）提出了对 Java 平台的设计和实现更改。一个 JEP 被起草的标准是工作必须至少满足以下条件之一：
- en: At least two weeks of engineering work
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少需要两周的工程工作
- en: Signifies a significant change to the JDK
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这标志着 JDK 的重要变化
- en: Represents a high demand issue for developers or customers
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代表开发人员或客户的高需求问题
- en: 'Projects, on the other hand, represent collaborative efforts that are sponsored
    by one of the following groups:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 项目，另一方面，代表由以下某个小组资助的协作努力：
- en: 2D Graphics
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 图形
- en: Adoption
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用
- en: AWT
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWT
- en: Build
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建
- en: Compatibility and specification review
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 兼容性和规范审查
- en: Compiler
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器
- en: Conformance
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 符合性
- en: Core Libraries
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 核心库
- en: Governing Board
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理委员会
- en: HotSpot
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HotSpot
- en: Internationalization
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化
- en: JMX
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JMX
- en: Members
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成员
- en: Networking
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: NetBeans Projects
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: NetBeans 项目
- en: Porters
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移植者
- en: Quality
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量
- en: Security
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全性
- en: Serviceability
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可服务性
- en: Sound
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频
- en: Swing
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Swing
- en: Web
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: Groups are formal and new ones can be proposed.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 小组是正式的，新的小组可以被提议。
- en: 'The following listed active projects represent possible future enhancement
    areas to the Java platform. Brief information about each project is provided later
    in this section and provides insight into general areas of future changes:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列出的活跃项目代表了 Java 平台可能的未来增强领域。本节后面将提供每个项目的简要信息，并提供了对未来变化的一般领域洞察：
- en: Annotations pipeline 2.0
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注解管道 2.0
- en: Audio Synthesis Engine
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频合成引擎
- en: Caciocavallo
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 卡西奥卡瓦洛
- en: Common VM Interface
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见 VM 接口
- en: Compiler Grammar
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器语法
- en: Da Vinci Machine
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 达芬奇机器
- en: Device I/O
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设备 I/O
- en: Graal
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Graal
- en: HarfBuzz Integration
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HarfBuzz 集成
- en: Kona
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科纳
- en: OpenJFX
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenJFX
- en: Panama
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 巴拿马
- en: Shenandoah
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沙南多亚
- en: Annotations pipeline 2.0
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注解管道 2.0
- en: This project explores improvements to how annotations are handled within the
    Java compiler pipeline. There is no intention to propose changing specifications;
    rather, the focus is on performance enhancements.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目探讨了如何改进 Java 编译器管道中注解的处理方式。没有意图提出更改规范；相反，重点是性能提升。
- en: Audio Synthesis Engine
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 音频合成引擎
- en: This project is looking at the creation of a new midi synthesizer for the JDK.
    The current midi synthesizer belongs to a licensed library. The working group
    would like to see the new midi synthesizer as an open source JDK asset.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目正在研究为 JDK 创建一个新的 midi 合成器。当前的 midi 合成器属于一个授权库。工作组希望新的 midi 合成器作为一个开源 JDK
    资产。
- en: Caciocavallo
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 卡西奥卡瓦洛
- en: The Caciocavallo project aims to improve the OpenJDK **Abstract Windows Toolkit**
    (**AWT**) internal interfaces. This extends to 2D subsystems. The proposed improvement
    stands to ease the way AWT is ported to new platforms.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 卡西奥卡瓦洛项目旨在改进 OpenJDK 的 **抽象窗口工具包**（**AWT**）内部接口。这扩展到 2D 子系统。拟议的改进旨在简化 AWT 迁移到新平台的方式。
- en: Common VM Interface
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见 VM 接口
- en: The Common VM Interface project has the goal of documenting the VM interface
    for OpenJDK. This should make it easier for Classpath VMs and other VMs to use
    OpenJDK.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 常见 VM 接口项目旨在记录 OpenJDK 的 VM 接口。这应该会使 Classpath VM 和其他 VM 使用 OpenJDK 更容易。
- en: Compiler Grammar
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编译器语法
- en: The Compiler Grammar project is working on an experimental Java Compiler that
    is based on ANTLR grammar. **ANTLR**, **Another Tool for Language Recognition**,
    is a parser that reads, processes, and executes structured text or binary files.
    The project team hopes this Java Compiler will replace the current one as it uses
    a hand-written parser, **LALR** (**Look-Ahead Left to Right**). The LALR parser
    has been identified by the project group as fragile and difficult to extend.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器语法项目正在开发一个基于 ANTLR 语法的实验性 Java 编译器。**ANTLR**（**Another Tool for Language
    Recognition**）是一个解析器，它读取、处理和执行结构化文本或二进制文件。项目团队希望这个 Java 编译器能够取代当前的编译器，因为它使用的是手写的解析器，**LALR**（**Look-Ahead
    Left to Right**）。项目组已将 LALR 解析器识别为脆弱且难以扩展。
- en: Da Vinci Machine
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 达芬奇机器
- en: The Da Vinci Machine Project, represents the effort to extend the JVM with support
    for non-Java languages. Current efforts are focused on allowing the new languages
    to exist alongside Java in the JVM. Performance and efficiency are key characteristics
    of the effort.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 达芬奇机器项目代表了将 JVM 扩展到支持非 Java 语言的努力。当前的工作重点在于允许新的语言与 Java 一起存在于 JVM 中。性能和效率是该努力的关键特性。
- en: Device I/O
  id: totrans-355
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设备I/O
- en: 'This project intends to provide access to generic peripheral devices via a
    Java-level API. The initial list of peripheral devices the project team wants
    to support include:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目旨在通过Java级别的API提供对通用外围设备的访问。项目团队希望支持的初始外围设备列表包括：
- en: '**GPIO** (**General Purpose Input/Output**)'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPIO**（**通用输入/输出**）'
- en: '**I2C** (**Inter-Integrated Circuit Bus**)'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**I2C**（**集成电路总线**）'
- en: '**SPI** (**Serial Peripheral Interface**)'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SPI**（**串行外围接口**）'
- en: '**UART** (**Universal Asynchronous Receiver/Transmitter**)'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UART**（**通用异步收发传输器**）'
- en: Graal
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Graal
- en: The Graal project has the goal of exposing VM functionality via Java APIs. This
    exposure will permit developers to write, in Java, dynamic compilers for a given
    language runtime. This effort includes the development of a multi-language interpreter
    framework.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Graal项目的目标是通过Java API暴露VM功能。这种暴露将允许开发者在Java中为特定的语言运行时编写动态编译器。这项工作包括开发一个多语言解释器框架。
- en: HarfBuzz Integration
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HarfBuzz集成
- en: The HarfBuzz Integration project hopes to integrate the HarfBuzz layout engine
    into the Java Development Kit. This is intended to replace the ICU layout engine
    with the HarfBuzz layout engine. The ICU layout engine has been deprecated, solidifying
    the importance of this project's future success.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: HarfBuzz集成项目希望将HarfBuzz布局引擎集成到Java开发工具包中。这是为了用HarfBuzz布局引擎替换ICU布局引擎。ICU布局引擎已被弃用，这巩固了该项目未来成功的重要性。
- en: Kona
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Kona
- en: The Kona project, is working to define and implement Java APIs to support the
    **Internet of Things** (**IoT**) domain. This includes networking technologies
    and protocols. Although not stated, safety and security will be paramount to this
    effort's implementation success.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: Kona项目正在努力定义和实现Java API以支持**物联网**（**IoT**）领域。这包括网络技术和协议。尽管没有明确说明，但安全和安全性将是该努力实施成功的关键。
- en: OpenJFX
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenJFX
- en: There are not many details available regarding the OpenJFX project. The stated
    goal of this project is to create the next-generation Java client toolkit. Based
    on the project title, it can be assumed that the group wants to create an OpenJFX
    version of JavaFX, which is a set of packages used to create rich internet applications.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 关于OpenJFX项目的细节不多。该项目声明的目标是创建下一代Java客户端工具包。根据项目标题，可以假设该小组希望创建一个OpenJFX版本的JavaFX，JavaFX是一组用于创建富互联网应用的包。
- en: Panama
  id: totrans-369
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Panama
- en: 'Project panama is focused on enhancing the connections between JVM and non-Java
    APIs. The project includes the following selected components:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: Panama项目专注于增强JVM和非Java API之间的连接。该项目包括以下选定的组件：
- en: Native function calls
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原生函数调用
- en: Native data access from JVM
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从JVM原生数据访问
- en: Native data access inside JVM heap
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM堆内的原生数据访问
- en: New data layouts in JVM heap
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JVM堆中的新数据布局
- en: API extraction tools for header files
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头文件API提取工具
- en: The project team has generated a repository tree that matches JDK 9's structure.
    This significantly increases the likelihood of the project's success.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 项目团队已生成一个与JDK 9结构相匹配的仓库树。这显著增加了项目成功的可能性。
- en: Shenandoah
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Shenandoah
- en: Project Shenandoah has the goal of significantly reducing the pause times with
    garbage collection operations. The approach is to have more garbage collection
    operations run concurrently with the Java application. In Chapter 7, *Leveraging
    the New Default G1 Garbage Collector* you read about CMS and G1\. The Shenandoah
    project intends to add concurrent compaction to the possible garbage collection
    approaches.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: Project Shenandoah的目标是通过垃圾收集操作显著减少暂停时间。方法是让更多的垃圾收集操作与Java应用程序并发运行。在第7章《利用新的默认G1垃圾收集器》中，你了解了CMS和G1。Shenandoah项目打算将并发压缩添加到可能的垃圾收集方法中。
- en: Summary
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter we provided an overview of the future developments of the Java
    platform, beyond Java 9\. We looked at what is planned for Java 10 and what further
    changes we are likely to see beyond Java 10\. Each potential change to the Java
    platform was characterized as targeted, submitted, or drafted. Specifically, we
    covered future changes to the Java platform grouped in the following categories:
    JDK Changes, Java Compiler, Java Virtual Machine, JavaX, and special projects.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了Java平台未来的发展，超出了Java 9的范围。我们探讨了Java 10的计划以及我们可能看到的Java 10以上的进一步变化。每个可能的Java平台变化都被描述为有针对性的、已提交的或草案。具体来说，我们涵盖了以下类别中Java平台未来的变化：JDK更改、Java编译器、Java虚拟机、JavaX和特殊项目。
