- en: Chapter 7. Peeking into m2eclipse
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章.一瞥m2eclipse
- en: We are toward the end of the journey; now in this chapter, we will look into
    other additional features in m2eclipse, getting familiar with the form-based POM
    editor, and learn about repositories.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将结束这次旅程；现在在这一章中，我们将探讨m2eclipse中的其他附加功能，熟悉基于表单的POM编辑器，并了解存储库。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Other features in m2eclipse
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: m2eclipse中的其他功能
- en: A form-based POM editor
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于表单的POM编辑器
- en: Analyzing project dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析项目依赖项
- en: Working with repositories
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与存储库一起工作
- en: m2eclipse preferences
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: m2eclipse首选项
- en: Other features in m2eclipse
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: m2eclipse中的其他功能
- en: 'The following steps have to be performed in order to understand the other features
    of m2eclipse. Right-click on the Maven project and navigate to the **Maven** menu
    item. Then, you can see the available features as shown in the following screenshot:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解m2eclipse的其他功能，必须按照以下步骤操作。在Maven项目上右键单击，然后导航到**Maven**菜单项。然后，你可以看到以下截图所示的可用功能：
- en: '![Other features in m2eclipse](img/00081.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![m2eclipse中的其他功能](img/00081.jpeg)'
- en: 'If you see the screenshot, the available features are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到截图，可用的功能如下：
- en: '**Add Dependency**'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加依赖**'
- en: '**Add Plugin**'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**添加插件**'
- en: '**New Maven Module Project**'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**新Maven模块项目**'
- en: '**Download JavaDoc**'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载JavaDoc**'
- en: '**Download Sources**'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载源代码**'
- en: '**Update Project**'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更新项目**'
- en: '**Disable Workspace Resolution**'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用工作空间解析**'
- en: '**Disable Maven Nature**'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用Maven属性**'
- en: 'Similarly, right-click on **Maven Dependencies** and navigate to the **Maven**
    menu item. The available features seen are shown in the following screenshot:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在**Maven依赖项**上右键单击，然后导航到**Maven**菜单项。以下截图显示了可见的功能：
- en: '![Other features in m2eclipse](img/00082.jpeg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![m2eclipse中的其他功能](img/00082.jpeg)'
- en: 'The available features are as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的功能如下：
- en: '**Download JavaDoc**'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载JavaDoc**'
- en: '**Download Sources**'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载源代码**'
- en: '**Exclude Maven Artifact**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排除Maven工件**'
- en: '**Open POM**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开POM**'
- en: '**Open JavaDoc**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开JavaDoc**'
- en: '**Import Project(s) from SCM**'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从SCM导入项目**'
- en: In the sections to follow, we will collectively discuss these features.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将共同讨论这些功能。
- en: Add Dependency
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加依赖
- en: 'It allows us to add dependencies to the Maven project. The screenshot for this
    is shown as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许我们向Maven项目添加依赖项。以下是这个功能的截图：
- en: '![Add Dependency](img/00083.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![添加依赖](img/00083.jpeg)'
- en: Up until now, we have been editing the `pom.xml` file and adding dependencies
    to it. Adding dependencies is another way to achieve the same objective using
    the graphical interface. When you use this option, the information you need to
    know is less, that is, knowing `artifactId`/`groupId` is enough to search across
    repositories and select the appropriate one. In the previous method, you need
    to know complete Maven coordinates to add the dependencies; hence, the latter
    is a time saver.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在编辑`pom.xml`文件并向其中添加依赖项。添加依赖项是使用图形界面实现相同目标的另一种方法。当你使用此选项时，你需要知道的信息更少，也就是说，知道`artifactId`/`groupId`就足以在存储库中搜索并选择合适的项。在先前的方法中，你需要知道完整的Maven坐标才能添加依赖项；因此，后者是节省时间的方法。
- en: Add Plugin
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加插件
- en: 'Similar to **Add Dependency**, **Add Plugin** allows you to add plugins via
    the graphical interface. This requires us to have minimal information to search
    through the repository and add plugins. The screenshot for this is as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 与**添加依赖**类似，**添加插件**允许你通过图形界面添加插件。这需要我们拥有最少的信息来搜索存储库并添加插件。以下是这个功能的截图：
- en: '![Add Plugin](img/00084.jpeg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![添加插件](img/00084.jpeg)'
- en: New Maven Module Project
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新Maven模块项目
- en: 'In [Chapter 6](part0049_split_000.html#page "Chapter 6. Creating a Multimodule
    Project"), *Creating a Multimodule Project*, we created a multimodule project
    and learned about creating module projects. This is another way to invoke the
    same **Add module** wizard to create modules. The screenshot of the window is
    shown as follows, which is the same as the screenshot obtained when you navigate
    to **New** | **Other** | **Maven Module** and right-click on the project (as we
    saw in the previous chapter):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第6章](part0049_split_000.html#page "第6章. 创建多模块项目")中，*创建多模块项目*，我们创建了一个多模块项目并学习了如何创建模块项目。这是调用相同的**添加模块**向导创建模块的另一种方法。以下是这个窗口的截图，它与导航到**新建**
    | **其他** | **Maven模块**并右键单击项目时获得的截图相同（如我们在上一章中看到的）：
- en: '![New Maven Module Project](img/00085.jpeg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![新Maven模块项目](img/00085.jpeg)'
- en: Download JavaDoc
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载JavaDoc
- en: '**Download JavaDoc** is used to download the javadoc of the project if present
    in the central repository to the local repository. For example, right-click on
    the `log4j-1.2.17.jar` file under **Maven Dependencies** and click on **Download
    JavaDoc**, as shown in the following screenshot. The javadoc will be downloaded
    to the local repository along with other artifacts at the `$HOME/.m2/repository/log4j/log4j/1.2.17/
    as log4j-1.2.17-javadoc.jar` location:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载JavaDoc**用于将项目（如果存在于中央仓库）的javadoc下载到本地仓库。例如，在**Maven依赖项**下右键单击`log4j-1.2.17.jar`文件并单击**下载JavaDoc**，如下截图所示。javadoc将与其他构件一起下载到本地仓库，位于`$HOME/.m2/repository/log4j/log4j/1.2.17/`作为`log4j-1.2.17-javadoc.jar`位置：'
- en: '![Download JavaDoc](img/00086.jpeg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![下载JavaDoc](img/00086.jpeg)'
- en: Download Source
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载源代码
- en: 'If the central repository has a source artifact for the corresponding project,
    we can use this option to download it to the local repository and use it with
    the Eclipse environment. This is a life saver, particularly when we are debugging
    a complex issue and there is need to drill down the code of dependencies. For
    example, the source code of `log4j` will be downloaded at the `$HOME/.m2/repository/log4j/log4j/1.2.17/`
    as `log4j-1.2.17-javadoc.jar` location. After downloading the source code, right-click
    on the `log4j-1.2.17.jar` file and click on **Properties**, as shown in the following
    screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果中央仓库有对应项目的源代码构件，我们可以使用此选项将其下载到本地仓库，并在Eclipse环境中使用它。这在调试复杂问题时非常有用，尤其是当我们需要深入依赖项的代码时。例如，`log4j`的源代码将被下载到`$HOME/.m2/repository/log4j/log4j/1.2.17/`作为`log4j-1.2.17-javadoc.jar`位置。下载源代码后，右键单击`log4j-1.2.17.jar`文件并单击**属性**，如下截图所示：
- en: '![Download Source](img/00087.jpeg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![下载源代码](img/00087.jpeg)'
- en: 'The **Properties** window appears; the **Java Source Attachment** navigation
    button shows the attached source code location, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性**窗口出现；**Java源代码附件**导航按钮显示附加源代码位置，如下截图所示：'
- en: '![Download Source](img/00088.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![下载源代码](img/00088.jpeg)'
- en: Note that we can also find the javadoc location by clicking on the **Javadoc
    Location** navigation button on the left pane.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们还可以通过在左侧面板上单击**Javadoc位置**导航按钮来找到javadoc位置。
- en: Open Javadoc
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开Javadoc
- en: 'When we want to browse through the javadoc of the corresponding project, we
    use this option. The javadoc opens in the editor area as a separate tab as shown
    in the following screenshot for `log4j` docs:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要浏览相应项目的javadoc时，我们使用此选项。javadoc作为单独的标签在编辑区域打开，如下截图所示为`log4j`文档：
- en: '![Open Javadoc](img/00089.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![打开Javadoc](img/00089.jpeg)'
- en: Open POM
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打开POM
- en: 'At any point, if there is a need to look at the POM file of the dependencies,
    we can use this option. The respective POM file of the dependency opens in the
    editor area of the workspace. The following screenshot depicts the POM file in
    the editor area for `log4j`, which has been the dependency in the `MyDistance`
    application we built in [Chapter 4](part0031_split_000.html#page "Chapter 4. Building
    and Running a Project"), *Building and Running a Project*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何时刻，如果需要查看依赖项的POM文件，我们可以使用此选项。依赖项的相应POM文件在工作区的编辑区域打开。以下截图显示了编辑区域中的`log4j`
    POM文件，这是我们[第4章](part0031_split_000.html#page "第4章. 构建和运行项目")中构建的`MyDistance`应用程序的依赖项，*构建和运行项目*：
- en: '![Open POM](img/00090.jpeg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![打开POM](img/00090.jpeg)'
- en: Update Project
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新项目
- en: 'There are instances where we have a Java project and we want to convert it
    to a Maven project. We can do this by right-clicking on the project, navigating
    to **Configure** | **Convert to Maven Project**, and adding a POM file. Now, **Update
    Project** is used to update the project from its dependencies and resources. **Update
    Project** is also handy if you have multiple Maven projects in your workspace,
    and the projects depend on each other. Then, after you build (`mvn install`) one
    project, you can perform **Update Project** on other projects to pick up the new
    artifact. The update option is shown in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们有一个Java项目，我们希望将其转换为Maven项目。我们可以通过在项目上右键单击，导航到**配置**|**转换为Maven项目**，并添加POM文件来完成此操作。现在，**更新项目**用于从其依赖项和资源更新项目。如果你在工作区中有多个Maven项目，并且项目相互依赖，那么**更新项目**也非常方便。然后，在你构建（`mvn
    install`）一个项目后，你可以在其他项目上执行**更新项目**以获取新的构件。更新选项如下截图所示：
- en: '![Update Project](img/00091.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![更新项目](img/00091.jpeg)'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Choosing **Offline** will not check the central repository for updates.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**离线**将不会检查中央仓库以获取更新。
- en: Disable Workspace Resolution
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用工作区解析
- en: Imagine a case where a project A depends on project B and they reside in the
    same workspace, mostly in multimodule projects. Now, if workspace resolution is
    disabled, to have project A, a successful build and a project B artifact are needed
    in the local repository. However, if the workspace resolution is enabled, the
    dependencies are resolved using an Eclipse workspace, and there is no need for
    an artifact in the local repository.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个场景，项目 A 依赖于项目 B，并且它们位于同一个工作区中，通常在多模块项目中。现在，如果禁用了工作区解析，为了使项目 A 成功构建并且项目 B
    的工件在本地仓库中，则需要项目 B。然而，如果启用了工作区解析，依赖项将使用 Eclipse 工作区进行解析，并且不需要本地仓库中的工件。
- en: Disable Maven Nature
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 禁用 Maven 依赖项
- en: It disables the Maven aspect of the project, that is, the Maven dependencies
    are removed from the build path. In that case, we may need to include the JARs
    manually in the classpath from the build window.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 它禁用了项目的 Maven 方面，即 Maven 依赖项从构建路径中移除。在这种情况下，我们可能需要从构建窗口手动将 JAR 包包含到类路径中。
- en: Import Project(s) from SCM
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 SCM 导入项目（s）
- en: It allows you to pull the source code to your Eclipse workspace for the dependency.
    In other words, it enables you to create a new Maven project for a dependency
    based on the sources for that dependency. The sources are pulled from the **Source
    Code Management** (**SCM**) system as defined in the POM for the dependency. If
    the dependency POM fails to mention the SCM, then this option does nothing. Make
    sure you have a proper m2e connector installed for the corresponding SCMs. We
    discussed importing and installing Subversion m2e connector in [Chapter 3](part0024_split_000.html#page
    "Chapter 3. Creating and Importing Projects"), *Creating and Importing Projects*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许您将依赖项的源代码拉取到您的 Eclipse 工作区中。换句话说，它允许您基于该依赖项的源代码创建一个新的 Maven 项目。源代码将从定义在依赖项
    POM 中的 **源代码管理（SCM**）系统中拉取。如果依赖项 POM 没有提及 SCM，则此选项不起作用。请确保您已为相应的 SCMs 安装了适当的 m2e
    连接器。我们已在 [第 3 章](part0024_split_000.html#page "第 3 章。创建和导入项目") 中讨论了导入和安装 Subversion
    m2e 连接器，*创建和导入项目*。
- en: A form-based POM editor
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于表单的 POM 编辑器
- en: 'm2eclipse provides the option of editing the `pom` file using a form-based
    POM editor. In earlier chapters, we played with XML tags and edited the `pom`
    file. While directly editing an XML file, the knowledge of tags is required, and
    there is a high chance that the user will make some errors. However, a form-based
    editor reduces the chance of a simple error and eases the editing of a `pom` file
    without or very minimal XML knowledge behind the scene. I would prefer playing
    around with XML tags and use that option, but you are open to choose your option.
    The form-based editor is shown in the following screenshot and has five tabs:
    **Overview**, **Dependencies**, **Dependency Hierarchy**, **Effective POM**, and
    **pom.xml**:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: m2eclipse 提供了使用基于表单的 POM 编辑器编辑 `pom` 文件的功能。在早期章节中，我们玩转了 XML 标签并编辑了 `pom` 文件。在直接编辑
    XML 文件时，需要了解标签知识，并且用户很可能犯一些错误。然而，基于表单的编辑器减少了简单错误的可能性，并简化了 `pom` 文件的编辑，即使没有或只有很少的
    XML 知识。我更喜欢玩转 XML 标签并使用该选项，但你可以自由选择你的选项。基于表单的编辑器在以下屏幕截图中显示，并具有五个选项卡：**概览**、**依赖项**、**依赖项层次结构**、**有效
    POM** 和 **pom.xml**：
- en: '![A form-based POM editor](img/00092.jpeg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![基于表单的 POM 编辑器](img/00092.jpeg)'
- en: An overview
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概览
- en: 'Overview provides general information of the project. It consists of the following
    sections and provides information about them as shown in the preceding screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 概览提供了项目的一般信息。它包括以下部分，并提供了如下所示的信息：
- en: '**Artifact**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工件**'
- en: '**Parent**'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**父级**'
- en: '**Project**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目**'
- en: '**Modules**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**'
- en: '**Properties**'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**属性**'
- en: '**Organization**'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织**'
- en: '**SCM**'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**源代码管理（SCM**）'
- en: '**Issue Management**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题管理**'
- en: '**Continuous Integration**'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**'
- en: You can change any information in this form, and this will be reflected in the
    XML file. We will discuss the **Dependencies** and the **Dependencies Hierarchy**
    tab in the next section.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以更改此表单中的任何信息，这将反映在 XML 文件中。我们将在下一节讨论 **依赖项** 和 **依赖项层次结构** 选项卡。
- en: Analyzing project dependencies
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分析项目依赖
- en: 'A POM editor has a **Dependencies** tab that provides a glance of dependencies
    and an option to manage dependencies of the project. The **Dependencies** tab
    has two sections as shown in the following screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: POM 编辑器有一个 **依赖项** 选项卡，它提供了依赖项的概览以及管理项目依赖项的选项。**依赖项** 选项卡有两个部分，如下面的屏幕截图所示：
- en: '![Analyzing project dependencies](img/00093.jpeg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![分析项目依赖](img/00093.jpeg)'
- en: 'It shows all the dependencies of the project on the left side. We can also
    add dependencies to the project using the **Add** button of the **Dependencies**
    section. The **Manage** button allows you to choose the POM that will manage the
    corresponding dependencies, and the screenshot for this is shown as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了项目左侧的所有依赖项。我们还可以使用 **依赖项** 部分的 **添加** 按钮将依赖项添加到项目中。**管理** 按钮允许您选择将管理相应依赖项的
    POM，以下截图显示了此操作：
- en: '![Analyzing project dependencies](img/00094.jpeg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![分析项目依赖关系](img/00094.jpeg)'
- en: 'As stated very clearly on the top of the window, the managed dependencies version
    information will move to the POM that manages it. For example, let''s choose to
    manage the `log4j` dependency of `distance-webapp` by the `Distance-main` POM.
    Select `log4j` on the list to the and select `Distance-main` in the list to the
    right, and click on **OK** as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如窗口顶部非常清楚地所述，管理的依赖项版本信息将移动到管理它的 POM 中。例如，让我们选择通过 `Distance-main` POM 来管理 `distance-webapp`
    的 `log4j` 依赖项。在列表中选择 `log4j`，然后在右侧列表中选择 `Distance-main`，并点击以下截图所示的 **确定**：
- en: '![Analyzing project dependencies](img/00095.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![分析项目依赖关系](img/00095.jpeg)'
- en: 'After the `log4j` file is managed, the word "managed" appears to its right,
    as shown in the following screenshot:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `log4j` 文件被管理后，其右侧出现“管理”一词，如下面的截图所示：
- en: '![Analyzing project dependencies](img/00096.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![分析项目依赖关系](img/00096.jpeg)'
- en: 'If we happen to see its effect in the XML file, we can see that the version
    information from the `distance-webapp` POM is moved and is added as a dependency
    in the `Distance-main` POM, as shown in the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在 XML 文件中看到其效果，我们可以看到来自 `distance-webapp` POM 的版本信息被移动，并作为依赖项添加到 `Distance-main`
    POM 中，如下面的代码所示：
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Another way to achieve the same functionality is via the **Dependency Management**
    section to the right across the parent-child POM. The **Dependency Hierarchy**
    tab contains two sections: **Dependency Hierarchy** and **Resolved Dependencies**
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实现相同功能的另一种方法是使用右侧的 **依赖管理** 部分。**依赖层次**选项卡包含两个部分：**依赖层次**和**已解析依赖项**，如下所示：
- en: '![Analyzing project dependencies](img/00097.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![分析项目依赖关系](img/00097.jpeg)'
- en: The **Dependency Hierarchy** section on the left provides the tree view of the
    dependencies. The first level of the tree is direct dependency of the project
    and then each subsequent level shows the dependencies of each dependency. The
    preceding screenshot is for the `distance-webapp` module, where we have four direct
    dependencies, and these dependencies have no further dependency, so the tree structure
    is not visible. However, for large projects and large direct dependencies, we
    can easily visualize it. The jar icon indicates that it is referenced from the
    Maven repository and the open folder icon indicates its presence in the Eclipse
    workspace.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 左侧的 **依赖层次** 部分提供了依赖项的树视图。树的第一个级别是项目的直接依赖项，然后每个后续级别显示每个依赖项的依赖项。前面的截图是 `distance-webapp`
    模块，其中我们有两个直接依赖项，这些依赖项没有进一步的依赖项，因此树结构不可见。然而，对于大型项目和大型直接依赖项，我们可以轻松地可视化它。jar 图标表示它来自
    Maven 仓库，而打开文件夹图标表示它在 Eclipse 工作空间中存在。
- en: The **Resolved Dependencies** section on the right shows the list of all resolved
    dependencies, that is, resulting dependencies after all conflicts and scopes applied.
    It gives a general idea of resolution chain propagation and route to **Resolved
    Dependencies**. Click on any resolved dependency and its shows the dependency
    chain in the **Dependency Hierarchy** section.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的 **已解析依赖项** 部分显示了所有已解析依赖项的列表，即应用所有冲突和作用域后的结果依赖项。它给出了解析链传播和到达 **已解析依赖项** 的路线的一般概念。点击任何已解析依赖项，它将在
    **依赖层次** 部分显示依赖链。
- en: For more information on dependencies, refer to [http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html](http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 关于依赖项的更多信息，请参阅[http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html](http://books.sonatype.com/m2eclipse-book/reference/dependencies-sect-analyze-depend.html)。
- en: Working with repositories
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与仓库一起工作
- en: 'To browse through the repository, navigate to **Window** | **Show View** and
    click on **Other...** as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要浏览仓库，请转到 **窗口** | **显示视图** 并点击以下所示的 **其他...**：
- en: '![Working with repositories](img/00098.jpeg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![与仓库一起工作](img/00098.jpeg)'
- en: 'Next, the **Show View** window appears. Search for `maven repository`, as shown
    in the following screenshot, and click on **Maven Repositories**:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，出现**显示视图**窗口。搜索`maven repository`，如下面的截图所示，然后点击**Maven仓库**：
- en: '![Working with repositories](img/00099.jpeg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![与仓库一起工作](img/00099.jpeg)'
- en: 'The **Maven Repositories** view constitutes of the following types:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '**Maven仓库**视图由以下类型组成：'
- en: '**Local Repositories**'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地仓库**'
- en: '**Global Repositories**'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局仓库**'
- en: '**Project Repositories**'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目仓库**'
- en: '**Custom Repositories**'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义仓库**'
- en: The repositories that are of interest are local, global, and project repositories.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有兴趣的仓库是本地、全局和项目仓库。
- en: Local Repositories
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地仓库
- en: 'It shows the artifacts of the local repository, and we can drill down to see
    its POM contents. It also consists of Eclipse workspace projects. The following
    is the screenshot of the local repository:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示了本地仓库的工件，我们可以深入查看其POM内容。它还包括Eclipse工作空间项目。以下是本地仓库的截图：
- en: '![Local Repositories](img/00100.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![本地仓库](img/00100.jpeg)'
- en: Global Repositories
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 全局仓库
- en: 'It references the artifacts of the central repository. We can browse through
    the artifacts of the central repository and view its POM. Right-click on **Global
    repositories**, which provides the ability to re-index, build full index, minimum
    index, and update index from the central repository. The following screenshot
    illustrates the global repository:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它引用中央仓库的工件。我们可以浏览中央仓库的工件并查看其POM。右键单击**全局仓库**，它提供了从中央仓库重新索引、构建完整索引、最小索引和更新索引的能力。以下截图显示了全局仓库：
- en: '![Global Repositories](img/00101.jpeg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![全局仓库](img/00101.jpeg)'
- en: Project Repositories
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目仓库
- en: '[PRE1]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Refresh the **Maven Repositories** window by clicking on the two cyclic arrows
    on the top-right side of the window. We can see the corresponding reference in
    **Project Repositories** as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 通过单击窗口右上角的两个循环箭头刷新**Maven仓库**窗口。我们可以在以下方式中看到**项目仓库**中的相应引用：
- en: '![Project Repositories](img/00102.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![项目仓库](img/00102.jpeg)'
- en: m2eclipse preferences
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: m2eclipse首选项
- en: 'To open m2eclipse preferences, navigate to **Window** | **Preferences**. In
    the **Preferences** window and search for `maven` in the filter textbox as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要打开m2eclipse首选项，导航到**窗口** | **首选项**。在**首选项**窗口中，在过滤器文本框中搜索`maven`，如下所示：
- en: '![m2eclipse preferences](img/00103.jpeg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![m2eclipse首选项](img/00103.jpeg)'
- en: Maven
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven
- en: 'Click on **Maven** as shown in the screenshot that follows later; it allows
    us to set the following options for Maven:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 点击下面的截图所示的**Maven**；它允许我们为Maven设置以下选项：
- en: '**Offline**: This option will not check the central repository for updates'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线**：此选项不会检查中央仓库的更新'
- en: '**Debug Output**: This option sets Maven in the debug mode'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试输出**：此选项将Maven设置为调试模式'
- en: '**Download Artifact Sources**: This option downloads sources to local repositories
    such as JAR'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载工件源**：此选项将源代码下载到本地仓库，如JAR'
- en: '**Download Artifact Javadoc**: This option downloads the javadoc to the local
    repository'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**下载工件Javadoc**：此选项将javadoc下载到本地仓库'
- en: '**Update Maven projects on startup**: This option updates the dependencies
    of the Maven project'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动时更新Maven项目**：此选项更新Maven项目的依赖项'
- en: '**Hide folders of physically nested modules (experimental)**: This option is
    in the experimental mode, which hides the nested folders of a multimodule project'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隐藏物理嵌套模块的文件夹（实验性）**：此选项处于实验模式，隐藏多模块项目的嵌套文件夹'
- en: '![Maven](img/00104.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![Maven](img/00104.jpeg)'
- en: Discovery
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发现
- en: Discovery is used to discover the m2e connectors available for use. Please refer
    to the *Checking out a Maven project* section in [Chapter 3](part0024_split_000.html#page
    "Chapter 3. Creating and Importing Projects"), *Creating and Importing Projects*,
    on how we used this feature.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 发现用于发现可用的m2e连接器。请参阅[第3章](part0024_split_000.html#page "第3章。创建和导入项目")中的*检出Maven项目*部分，*创建和导入项目*，了解我们如何使用此功能。
- en: Archetypes
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原型
- en: 'Archetypes allows us to add, remove, and edit the Maven archetype catalog,
    as shown in the following screenshot:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 原型允许我们添加、删除和编辑Maven原型目录，如下面的截图所示：
- en: For more information on archetypes, please refer to [http://maven.apache.org/archetype/index.html](http://maven.apache.org/archetype/index.html).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 有关原型的更多信息，请参阅[http://maven.apache.org/archetype/index.html](http://maven.apache.org/archetype/index.html)。
- en: '![Archetypes](img/00105.jpeg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![原型](img/00105.jpeg)'
- en: User Interface and User Settings
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面和用户设置
- en: '**User Interface** allows us to set XML file options, as shown in the following
    screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户界面** 允许我们设置 XML 文件选项，如下面的截图所示：'
- en: '![User Interface and User Settings](img/00106.jpeg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面和用户设置](img/00106.jpeg)'
- en: The `settings.xml` file contains elements used to define values that configure
    Maven execution in various ways, such as the `pom.xml` file. The `settings` file
    is at `$ {M2_HOME}/settings.xml`, where `M2_HOME` is `{USER_HOME}/.m2`. In the
    *Local Repository* section of [Chapter 3](part0024_split_000.html#page "Chapter 3. Creating
    and Importing Projects"), *Creating and Importing Projects*, we use this file
    to set the alternate local repository other than the default one.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings.xml` 文件包含用于定义配置 Maven 执行的值的元素，例如 `pom.xml` 文件。`settings` 文件位于 `$
    {M2_HOME}/settings.xml`，其中 `M2_HOME` 是 `{USER_HOME}/.m2`。在 [第 3 章](part0024_split_000.html#page
    "第 3 章. 创建和导入项目") 的 *本地仓库* 部分中，*创建和导入项目*，我们使用此文件设置除默认仓库之外的备用本地仓库。'
- en: '**User Settings** allows us to use the custom settings file and re-index the
    local repository, as shown in the following screenshot:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户设置** 允许我们使用自定义设置文件并重新索引本地仓库，如下面的截图所示：'
- en: '![User Interface and User Settings](img/00107.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面和用户设置](img/00107.jpeg)'
- en: For more information on settings, please refer to [http://maven.apache.org/settings.html#Servers](http://maven.apache.org/settings.html#Servers).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于设置的信息请参阅 [http://maven.apache.org/settings.html#Servers](http://maven.apache.org/settings.html#Servers)。
- en: Installations
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装
- en: '**Installations** shows Maven installations and allows us to choose the Maven
    to use. We used it to set the external Maven installation in the *Setting Maven
    to Use* section of [Chapter 2](part0019_split_000.html#page "Chapter 2. Installing
    m2eclipse"), *Installing m2Eclipse*; please refer to it for more details.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装** 显示 Maven 安装并允许我们选择要使用的 Maven。我们使用它来设置 *设置 Maven 以使用* 部分的 [第 2 章](part0019_split_000.html#page
    "第 2 章. 安装 m2eclipse") 中的外部 Maven 安装；请参阅它以获取更多详细信息。'
- en: Warnings
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 警告
- en: Warnings allows us to enable/disable the warning for a duplicate group ID and
    version across the parent-child POM. At the time of writing this, though this
    option is enabled, m2eclipse still complains about duplicates; hopefully, this
    feature will work in days to come with other new releases.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 警告允许我们启用/禁用跨父-子 POM 的重复组 ID 和版本的警告。在撰写本文时，尽管此选项已启用，但 m2eclipse 仍然会抱怨重复；希望这个功能将在未来的新版本中正常工作。
- en: Templates
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板
- en: 'Templates shows the list of all the templates used by Maven. It also provides
    an option to add new templates, edit, remove, import, and export the templates,
    as shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 模板显示了 Maven 所使用的所有模板的列表。它还提供了一个选项来添加新模板、编辑、删除、导入和导出模板，如下面的截图所示：
- en: '![Templates](img/00108.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![模板](img/00108.jpeg)'
- en: Lifecycle Mappings
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生命周期映射
- en: '**Lifecycle Mappings** allows us to customize the project build lifecycle for
    Maven projects used by m2eclipse. This feature is still experimental at the time
    of writing this book; hence, we will limit its discussion.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**生命周期映射** 允许我们自定义 m2eclipse 使用的 Maven 项目的项目构建生命周期。在撰写本书时，此功能仍然是实验性的；因此，我们将限制对其的讨论。'
- en: For more information, please refer to [http://wiki.eclipse.org/M2E_plugin_execution_not_covered](http://wiki.eclipse.org/M2E_plugin_execution_not_covered).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅 [http://wiki.eclipse.org/M2E_plugin_execution_not_covered](http://wiki.eclipse.org/M2E_plugin_execution_not_covered)。
- en: Summary
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about other additional features available in m2eclipse,
    and got familiar with the repositories, form-based POM editor, and m2eclipse preferences.
    So, in this book, you learned Maven concepts; m2eclipse and features; and its
    ease in creating, building, and running Maven projects.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了 m2eclipse 中可用的其他附加功能，并熟悉了仓库、基于表单的 POM 编辑器和 m2eclipse 首选项。因此，在这本书中，你学习了
    Maven 概念；m2eclipse 和功能；以及创建、构建和运行 Maven 项目的便捷性。
