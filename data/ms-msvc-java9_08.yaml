- en: Consuming Services Using a Microservice Web Application
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用微服务网络应用程序消费服务
- en: Now, after developing the microservices, it would be interesting to see how
    the services offered by the **online table reservation system** (**OTRS**) could
    be consumed by web or mobile applications. We will develop the web application
    (UI) using AngularJS/Bootstrap to build the prototype of the web application.
    This sample application will display the data and flow of this sample project—a
    small utility project. This web application will also be a sample project and
    will run independently. Earlier, web applications were being developed in single
    web archives (files with `.war` extensions) that contained both UI and server-side
    code. The reason for doing so was pretty simple, as UI was also developed using
    Java with JSPs, servlets, JSF, and so on. Nowadays, UIs are being developed independently
    using JavaScript. Therefore, these UI apps also deploy as a single microservice.
    In this chapter, we'll explore how these independent UI applications are being
    developed. We will develop and implement the OTRS sample app without login and
    authorization flow. We'll deploy a very limited functionality implementation and
    cover the high-level AngularJS concepts. For more information on AngularJS, you
    can refer to *AngularJS by Example*, *Chandermani*, *Packt Publishing*.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在开发了微服务之后，将很有趣地看看在线表格预订系统（OTRS）提供的服务如何被网络或移动应用程序消费。我们将使用 AngularJS/Bootstrap
    开发网络应用程序（UI）的原型。这个示例应用程序将显示这个示例项目的数据和流程——一个小型实用程序项目。这个网络应用程序也将是一个示例项目，并可以独立运行。以前，网络应用程序是在单个网络归档（具有
    `.war` 扩展名的文件）中开发的，其中包含 UI 和服务器端代码。这样做的原因相当简单，因为 UI 也是使用 Java、JSP、servlet、JSF
    等开发的。现在，UI 是独立使用 JavaScript 开发的。因此，这些 UI 应用程序也作为单个微服务部署。在本章中，我们将探讨这些独立 UI 应用程序是如何开发的。我们将开发并实现没有登录和授权流的
    OTRS 示例应用程序。我们将部署一个功能非常有限的应用程序，并涵盖高级 AngularJS 概念。有关 AngularJS 的更多信息，请参考《AngularJS
    示例》、《Chandermani》、《Packt Publishing》。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: AngularJS framework overview
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AngularJS 框架概述
- en: Development of OTRS features
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OTRS 功能的开发
- en: Setting up a web application (UI)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置网络应用程序（UI）
- en: AngularJS framework overview
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AngularJS 框架概述
- en: Now, since we are ready with our HTML5 web application setup, we can go through
    the basics of AngularJS. This will help us to understand the AngularJS code. This
    section depicts the high level of understanding that you can utilize to understand
    the sample application and explore further using AngularJS documentation or by
    referring to other Packt Publishing resources.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，既然我们已经完成了 HTML5 网络应用程序的设置，我们可以了解 AngularJS 的基础知识。这将帮助我们理解 AngularJS 代码。本节描述了你可以利用的高级理解水平，以理解示例应用程序并进一步使用
    AngularJS 文档或参考其他 Packt Publishing 资源。
- en: AngularJS is a client-side JavaScript framework. It is flexible enough to be
    used as a **model-view-controller** (**MVC**) or a **model-view-viewmodel** (**MVVM)**.
    It also provides built-in services such as `$http` or `$log` using a dependency
    injection pattern.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS 是一个客户端 JavaScript 框架。它足够灵活，可以作为**模型-视图-控制器**（**MVC**）或**模型-视图-视图模型**（**MVVM**）使用。它还提供内置服务，如使用依赖注入模式的
    `$http` 或 `$log`。
- en: MVC
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVC
- en: 'MVC is a well-known design pattern. Struts and Spring MVC are popular examples.
    Let''s see how they fit in the JavaScript world:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 模型-视图-控制器（MVC）是一种众所周知的设计模式。Struts 和 Spring MVC 是流行的例子。让我们看看它们如何适用于 JavaScript
    世界：
- en: '**Model**: Models are JavaScript objects that contain the application data.
    They also represent the state of the application.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：模型是包含应用程序数据的 JavaScript 对象。它们还表示应用程序的状态。'
- en: '**View**: View is a presentation layer that consists of HTML files. Here, you
    can show the data from models and provide the interactive interface to the user.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：视图是由 HTML 文件组成的表示层。在这里，你可以显示来自模型的数据并提供用户交互界面。'
- en: '**Controller**: You can define the controller in JavaScript and it contains
    the application logic.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：你可以在 JavaScript 中定义控制器，其中包含应用程序逻辑。'
- en: MVVM
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MVVM
- en: 'MVVM is an architecture design pattern that specifically targets the UI development.
    MVVM is designed to make two-way data binding easier. Two-way data binding provides
    the synchronization between the model and the view. When the model (data) changes,
    it reflects immediately on the view. Similarly, when the user changes the data
    on the view, it reflects on the model:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: MVVM是一种针对UI开发的设计模式。MVVM旨在使双向数据绑定变得更容易。双向数据绑定提供了模型和视图之间的同步。当模型（数据）发生变化时，它立即反映在视图上。类似地，当用户在视图上更改数据时，它也会反映在模型上：
- en: '**Model**: This is very similar to MVC and contains the business logic and
    data.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这与MVC非常相似，包含业务逻辑和数据。'
- en: '**View**: Like MVC, it contains the presentation logic or user interface.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：与MVC类似，它包含呈现逻辑或用户界面。'
- en: '**View model**: A view model contains the data binding between the view and
    the model. Therefore, it is an interface between the view and the model.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图模型**：视图模型包含视图和模型之间的数据绑定。因此，它是视图和模型之间的接口。'
- en: Modules
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块
- en: A module is the first thing we define for any AngularJS application. A module
    is a container that contains the different parts of the application, such as controllers,
    services, filters, and so on. An AngularJS application can be written in a single
    module or multiple modules. An AngularJS module can also contain other modules.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是我们为任何AngularJS应用程序定义的第一个东西。模块是一个包含应用程序不同部分的容器，如控制器、服务、过滤器等。AngularJS应用程序可以写在一个单一的模块中，也可以写在多个模块中。AngularJS模块也可以包含其他模块。
- en: 'Many other JavaScript frameworks use the `main` method for instantiating and
    wiring the different parts of the application. AngularJS does not have the `main`
    method. It uses the module as an entry point due to the following reasons:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他JavaScript框架使用`main`方法来实例化和连接应用程序的不同部分。AngularJS没有`main`方法。它由于以下原因使用模块作为入口点：
- en: '**Modularity**: You can divide and create your application feature-wise or
    with reusable components.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块化**：你可以根据应用程序功能或可重用组件来划分和创建应用程序。'
- en: '**Simplicity**: You might have come across complex and large application code,
    which makes maintenance and enhancement a headache. No more: AngularJS makes code
    simple, readable, and easy to understand.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简洁性**：你可能遇到过复杂且庞大的应用程序代码，这使得维护和升级成为头疼的事。不再如此：AngularJS使代码变得简单、可读且易于理解。'
- en: '**Testing**: It makes unit testing and end-to-end testing easier as you can
    override configuration and load only the modules that are required.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：它使单元测试和端到端测试变得容易，因为你可以覆盖配置并只加载所需的模块。'
- en: 'Each AngularJS application needs to have a single module for bootstrapping
    the AngularJS application. Bootstrapping our application requires the following
    three parts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 每个AngularJS应用程序需要有一个单一的模块来启动AngularJS应用程序。启动我们的应用程序需要以下三个部分：
- en: '**Application module**: A JavaScript file (`app.js`) that contains the AngularJS
    module, as shown:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序模块**：一个包含AngularJS模块的JavaScript文件（`app.js`），如下所示：'
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Loading Angular library and application module**: An `index.html` file containing
    the reference to the JavaScript file with other AngularJS libraries:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加载Angular库和应用程序模块**：一个包含对其他AngularJS库的JavaScript文件的引用和一个`index.html`文件：'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Application DOM configuration**: This tells the AngularJS location of the
    DOM element where bootstrapping should take place. It can be done in one of two
    ways:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序DOM配置**：这告诉AngularJS应用程序的DOM元素的启动位置。它可以以两种方式之一完成：'
- en: 'An `index.html` file that also contains a HTML element (typically `<html>`)
    with the `ng-app` (AngularJS directive) attribute having the value given in `app.js`.
    AngularJS directives are prefixed with `ng` (AngularJS): `<html lang="en" ng-app="otrsApp"
    class="no-js">`.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个`index.html`文件，其中还包含一个HTML元素（通常是`<html>`）和一个具有在`app.js`中给出的值的`ng-app`（AngularJS指令）属性：`<html
    lang="zh" ng-app="otrsApp" class="no-js">`。AngularJS指令前缀为`ng`（AngularJS）：`<html
    lang="en" ng-app="otrsApp" class="no-js">`。
- en: 'Or, use this command if you are loading the JavaScript files asynchronously:
    `AngularJS.bootstrap(document.documentElement, [''otrsApp'']);`.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 或者，如果你是以异步方式加载JavaScript文件的话，请使用这个命令：`AngularJS.bootstrap(document.documentElement,
    ['otrsApp']);`。
- en: 'An AngularJS module has two important parts, `config()` and `run()`, apart
    from other components such as controllers, services, filters, and so on:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个AngularJS模块有两个重要的部分，`config()`和`run()`，除了控制器、服务、过滤器等其他组件：
- en: '`config()` is used for registering and configuring the modules and it only
    entertains the providers and constants using `$injector`. `$injector` is an AngularJS
    service. We''ll cover providers and `$injector` in the next section. You cannot
    use instances here. It prevents the use of services before it is fully configured.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config()`用于注册和配置模块，并只处理使用`$injector`的提供者和常量。`$injector`是AngularJS服务。我们在下一节介绍提供者和`$injector`。在这里不能使用实例。它防止在完全配置之前使用服务。'
- en: '`run()` is used for executing the code after `$injector` is created using the
    preceding `config()` method. This only entertains the instances and constants.
    You cannot use providers here to avoid configuration at runtime.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`run()`方法用于在通过前面的`config()`方法创建`$injector`之后执行代码。它只处理实例和常量。在这里不能使用提供商，以避免在运行时进行配置。'
- en: Providers and services
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供商和服务
- en: 'Let''s have a look at the following code:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下的代码：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`$log` is a built-in AngularJS service that provides the logging API. Here,
    we are using another built-in service, `$injector`, that allows us to use the
    `$log` service. `$injector` is an argument in the controller. AngularJS uses function
    definitions and regex to provide the `$injector` service to a caller, also known
    as the controller. These are examples of how AngularJS effectively uses the dependency
    injection pattern.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`$log`是一个内置的AngularJS服务，提供了日志API。在这里，我们使用了另一个内置服务——`$injector`，它允许我们使用`$log`服务。`$injector`是控制器的一个参数。AngularJS使用函数定义和正则表达式为调用者（即控制器）提供`$injector`服务，这正是AngularJS有效使用依赖注入模式的示例。'
- en: AngularJS heavily uses the dependency injection pattern, using the injector
    service (`$injector`) to instantiate and wire most of the objects we use in our
    AngularJS applications. This injector creates two types of objects—services and
    specialized objects.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS大量使用依赖注入模式，使用注入器服务（`$injector`）来实例化和连接我们用在AngularJS应用程序中的大多数对象。这个注入器创建了两种类型的对象——服务和特殊对象。
- en: For simplification, you can say that we (developers) define services. On the
    contrary, specialized objects are AngularJS items such as controllers, filters,
    directives, and so on.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化，你可以认为我们（开发者）定义服务。相反，特殊对象是AngularJS项目，如控制器、过滤器、指令等。
- en: AngularJS provides five recipe types that tell the injector how to create service
    objects—**provider**, **value**, **factory**, **service**, and **constant**.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS提供了五种告诉注入器如何创建服务对象的食谱类型——**提供商**、**值**、**工厂**、**服务**和**常量**。
- en: The provider is the core and most complex recipe type. Other recipes are synthetic
    sugar on it. We generally avoid using the provider except when we need to create
    reusable code that requires global configuration.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供商是核心且最复杂的食谱类型。其他的食谱都是建立在其上的合成糖。我们通常避免使用提供商，除非我们需要创建需要全局配置的可重用代码。
- en: The value and constant recipe types work as their names suggest. Neither of
    them can have dependencies. Moreover, the difference between them lies with their
    usage. You cannot use value service objects in the configuration phase.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值和常量食谱类型正如其名称所暗示的那样工作。它们都不能有依赖关系。此外，它们之间的区别在于它们的用法。在配置阶段你不能使用值服务对象。
- en: Factory and service are the most used service types. They are of a similar type.
    We use the factory recipe when we want to produce JavaScript primitives and functions.
    On the other hand, the service is used when we want to produce custom-defined
    types.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工厂和服务是最常用的服务类型。它们属于相似的类型。当我们想要生产JavaScript原始值和函数时，我们使用工厂食谱。另一方面，当我们要生产自定义定义的类型时，我们使用服务。
- en: As we now have some understanding of services, we can say that there are two
    common uses of services—organizing code and sharing code across applications.
    Services are singleton objects, which are lazily instantiated by the AngularJS
    service factory. We have already seen a few of the built-in AngularJS services
    such as `$injector`, `$log`, and so on. AngularJS services are prefixed with the
    `$` symbol.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们现在对服务有一定的了解，我们可以认为服务有两个常见的用途——组织代码和跨应用程序共享代码。服务是单例对象，由AngularJS服务工厂延迟实例化。我们已经看到了一些内置的AngularJS服务，比如`$injector`、`$log`等。AngularJS服务前缀为`$`符号。
- en: Scopes
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作用域
- en: 'In AngularJS applications, two types of scopes are widely used—`$rootScope`
    and `$scope`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在AngularJS应用程序中，广泛使用了两种作用域——`$rootScope`和`$scope`：
- en: '`$rootScope` is the topmost object in the scope hierarchy and has the global
    scope associated with it. That means that any variable you attach to it will be
    available everywhere, and therefore, the use of `$rootScope` should be a carefully
    considered decision.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$rootScope` 是作用域层次结构中最顶层的对象，与全局作用域相关联。这意味着您附加上它的任何变量都将无处不在可用，因此，使用 `$rootScope`
    应该是一个经过深思熟虑的决定。'
- en: Controllers have `$scope` as an argument in the callback function. It is used
    for binding data from the controller to the view. Its scope is limited to the
    use of the controller it is associated with.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器在回调函数中有一个 `$scope` 作为参数。它用于将控制器中的数据绑定到视图。其作用域仅限于与它关联的控制器使用。
- en: Controllers
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器
- en: 'The controller is defined by the JavaScript `constructor` function as having `$scope`
    as an argument. The controller''s main purpose is to tie the data to the view.
    The controller function is also used for writing business logic—setting up the
    initial state of the `$scope` object and adding the behavior to `$scope`. The
    controller signature looks like the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器通过 JavaScript 的 `constructor` 函数定义，拥有 `$scope` 作为参数。控制器的主要目的是将数据绑定到视图。控制器函数也用于编写业务逻辑——设置
    `$scope` 对象的初始状态和向 `$scope` 添加行为。控制器签名如下：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, the controller is a part of the `RestModule`, the name of the controller
    is `RestaurantCtrl`, and `$scope` and `restaurantService` are passed as arguments.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，控制器是 `RestModule` 的一部分，控制器的名称是 `RestaurantCtrl`，`$scope` 和 `restaurantService`
    被作为参数传递。
- en: Filters
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤器
- en: 'The purpose of filters is to format the value of a given expression. In the
    following code, we have defined the `datetime1` filter that takes the date as
    an argument and changes the value to the `dd MMM yyyy HH:mm` format, such as 04
    Apr 2016 04:13 PM:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器的目的是格式化给定表达式的值。在以下代码中，我们定义了 `datetime1` 过滤器，它接受日期作为参数并将其值更改为 `dd MMM yyyy
    HH:mm` 格式，例如 `04 Apr 2016 04:13 PM`：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Directives
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指令
- en: 'As we saw in the *Modules* section, AngularJS directives are HTML attributes
    with an `ng` prefix. Some of the popular directives are:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*模块*部分所看到的，AngularJS 指令是带有 `ng` 前缀的 HTML 属性。一些常用的指令包括：
- en: '`ng-app`: This directive defines the AngularJS application'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-app`：这个指令定义了 AngularJS 应用程序'
- en: '`ng-model`: This directive binds the HTML form input to data'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-model`：这个指令将 HTML 表单输入绑定到数据'
- en: '`ng-bind`: This directive binds the data to the HTML view'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-bind`：这个指令将数据绑定到 HTML 视图'
- en: '`ng-submit`: This directive submits the HTML form'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-submit`：这个指令提交 HTML 表单'
- en: '`ng-repeat`: This directive iterates the collection:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ng-repeat`：这个指令遍历集合：'
- en: '[PRE5]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: UI-Router
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI-Router
- en: In **single-page applications** (**SPAs**), the page only loads once and the
    user navigates through different links without a page refresh. It is all possible
    because of routing. Routing is a way to make SPA navigation feel like a normal
    site. Therefore, routing is very important for SPA.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在**单页应用程序**（**SPA**）中，页面只加载一次，用户通过不同的链接进行导航，而无需刷新页面。这都是因为路由。路由是一种使 SPA 导航感觉像正常网站的方法。因此，路由对
    SPA 非常重要。
- en: The AngularUI team built UI-Router, an AngularJS routing framework. UI-Router
    is not a part of core AngularJS. UI-Router not only changes the route URL, but
    it also changes the state of the application when the user clicks on any link
    in the SPA. Because UI-Router can also make state changes, you can change the
    view of the page without changing the URL. This is possible because of the application
    state management by the UI-Router.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: AngularUI 团队开发了 UI-Router，这是一个 AngularJS 的路由框架。UI-Router 并不是 AngularJS 核心的一部分。当用户在
    SPA 中点击任何链接时，UI-Router 不仅会改变路由 URL，还会改变应用程序的状态。由于 UI-Router 也可以进行状态更改，因此您可以在不改变
    URL 的情况下更改页面的视图。这是因为在 UI-Router 的管理下实现了应用程序状态管理。
- en: If we consider the SPA as a state machine, then the state is a current state
    of the application. We will use the `ui-sref` attribute in a HTML link tag when
    we create the route link. The `href` attribute in the link will be generated from
    this and point to certain states of the application that are created in `app.js`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们把 SPA 看作是一个状态机，那么状态就是应用程序的当前状态。当我们创建路由链接时，我们会在 HTML 链接标签中使用 `ui-sref` 属性。链接中的
    `href` 属性由此生成，并指向在 `app.js` 中创建的应用程序的某些状态。
- en: We use the `ui-view` attribute in the HTML `div` to use the UI-Router. For example,
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 HTML `div` 中的 `ui-view` 属性来使用 UI-Router。例如，
- en: '`<div ui-view></div>`.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div ui-view></div>`。'
- en: Development of OTRS features
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发 OTRS 功能
- en: 'As you know, we are developing the SPA. Therefore, once the application loads,
    you can perform all of the operations without a page refresh. All interactions
    with the server are performed using AJAX calls. Now, we''ll make use of the AngularJS
    concepts that we covered in the first section. We''ll cover the following scenarios:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所知，我们正在开发SPA。因此，一旦应用程序加载，您可以在不刷新页面的情况下执行所有操作。所有与服务器的交互都是通过AJAX调用完成的。现在，我们将利用我们在第一部分中介绍的AngularJS概念。我们将涵盖以下场景：
- en: A page that will display a list of restaurants. This will also be our home page.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个将显示餐厅列表的页面。这也将是我们的主页。
- en: Search restaurants.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索餐厅。
- en: Restaurant details with reservation options.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有预订选项的餐厅详情。
- en: Login (not from the server, but used for displaying the flow).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录（不是从服务器上，而是用于显示流程）。
- en: Reservation confirmation.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预订确认。
- en: For the home page, we will create an `index.html` file and a template that will
    contain the restaurant listings in the middle section, or the content area.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 对于主页，我们将创建一个`index.html`文件和一个模板，该模板将包含中间部分（或内容区域）的餐厅列表。
- en: Home page/restaurant list page
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 主页/餐厅列表页
- en: 'The home page is the main page of any web application. To design the home page,
    we are going to use the Angular-UI Bootstrap rather than the actual Bootstrap.
    Angular-UI is an Angular version of Bootstrap. The home page will be divided into
    three sections:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 主页是任何网络应用程序的主要页面。为了设计主页，我们将使用Angular-UI Bootstrap，而不是实际的Bootstrap。Angular-UI是Bootstrap的Angular版本。主页将分为三个部分：
- en: The header section will contain the application name, the search restaurants
    form, and the user name at the top-right corner.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 头部部分将包含应用程序名称、搜索餐厅表单以及顶部右角的用户名。
- en: The content or middle section will contain the restaurant listings, which will
    have the restaurant name as the link. This link will point to the restaurant details
    and reservation page.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容或中间部分将包含餐厅列表，这些列表将使用餐厅名称作为链接。此链接将指向餐厅详情和预订页面。
- en: The footer section will contain the application name with the copyright mark.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页脚部分将包含带有版权标志的应用程序名称。
- en: 'You must be interested in viewing the home page before designing or implementing
    it. Therefore, let us first see how it will look once we have our content ready:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能对在设计或实现之前查看主页感兴趣。因此，让我们首先看看一旦我们的内容准备就绪，它将看起来如何：
- en: '![](img/43192e48-94ba-4302-b413-5182d9d1da4f.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43192e48-94ba-4302-b413-5182d9d1da4f.png)'
- en: OTRS home page with restaurants listing
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: OTRS主页带有餐厅列表
- en: 'Now, to design our home page, we need to add the following four files:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了设计我们的主页，我们需要添加以下四个文件：
- en: '`index.html`: Our main HTML file'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`index.html`：我们的主HTML文件'
- en: '`app.js`: Our main AngularJS module'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`app.js`：我们的主AngularJS模块'
- en: '`restaurants.js`: The restaurants module that also contains the restaurant
    Angular service'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restaurants.js`：包含餐厅Angular服务的餐厅模块'
- en: '`restaurants.html`: The HTML template that will display the list'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restaurants.html`：将显示列表的HTML模板'
- en: of restaurants
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 餐厅
- en: index.html
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`index.html`'
- en: First, we'll add `./app/index.html` to our project workspace. The contents of
    the `index.html` file will be as explained here onwards.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将`./app/index.html`添加到我们的项目工作区。`index.html`文件的内容将从这里开始解释。
- en: I have added comments in between the code to make the code more readable and
    easier to understand.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我在代码之间添加了注释，以使代码更具可读性，更容易理解。
- en: 'The `index.html` file is divided into many parts. We''ll discuss a few of the
    key parts here. First, we will see how to address old versions of Internet Explorer.
    If you want to target the Internet Explorer browser versions greater than eight
    or IE version nine onwards, then we need to add the following block of code that
    will prevent JavaScript from rendering and give the `no-js` output to the end
    user:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`文件分为许多部分。在这里我们将讨论一些关键部分。首先，我们将了解如何解决旧版本的Internet Explorer。如果您想针对大于八版的Internet
    Explorer浏览器或IE九版及以后的版本，那么我们需要添加以下代码块，这将阻止JavaScript渲染并给最终用户输出`no-js`：'
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, after adding a few `meta` tags and the title of the application, we'll
    also define the important `meta` tag `viewport`. The `viewport` is used for responsive
    UI designs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在添加几个`meta`标签和应用程序的标题之后，我们还将定义重要的`meta`标签`viewport`。`viewport`用于响应式UI设计。
- en: The `width` property defined in the content attribute controls the size of the
    `viewport`. It can be set to a specific number of pixels, such as `width = 600`,
    or to the special `device-width` value that is the width of the screen in CSS
    pixels at a scale of 100%.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在内容属性中定义的`width`属性控制`viewport`的大小。它可以设置为特定的像素值，例如`width = 600`，或者设置为特殊的`device-width`值，该值在100%的缩放比例下是屏幕的宽度。
- en: 'The `initial-scale` property controls the zoom level when the page is first
    loaded. The maximum-scale, minimum-scale, and user-scalable properties control
    how users are allowed to zoom the page in or out:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`initial-scale`属性控制页面首次加载时的缩放级别。`max-scale`、`min-scale`和`user-scalable`属性控制用户如何允许缩放页面：'
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the next few lines, we''ll define the style sheets of our application. We
    are adding `normalize.css` and `main.css` from HTML5 boilerplate code. We are
    also adding our application''s customer CSS `app.css`. Finally, we are adding
    the Bootstrap 3 CSS. Apart from the customer `app.css`, other CSS is referenced
    in it. There is no change in these CSS files:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几行中，我们将定义我们应用程序的样式表。我们从HTML5模板代码中添加了`normalize.css`和`main.css`。我们还添加了我们应用程序的自定义CSS`app.css`。最后，我们添加了Bootstrap
    3的CSS。除了自定义的`app.css`之外，其他CSS都在其中引用。这些CSS文件没有变化：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Then, we'll define the scripts using the `script` tag. We are adding the modernizer,
    Angular, Angular-route, and `app.js`, our own developed custom JavaScript file.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将使用`script`标签定义脚本。我们添加了现代izer、Angular、Angular-route和`app.js`，我们自己的开发的定制JavaScript文件。
- en: We have already discussed Angular and Angular-UI. `app.js` will be discussed
    in
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了Angular和Angular-UI。`app.js`将在
- en: the next section.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节。
- en: The modernizer allows web developers to use new CSS3 and HTML5 features while
    maintaining a fine level of control over browsers that don't support them. Basically,
    the modernizer performs the next generation feature detection (checking the availability
    of those features) while the page loads in the browser and reports the results.
    Based on these results, you can detect what the latest features available in the
    browser are, and based on that, you can provide an interface to the end user.
    If the browser does not support a few of the features, then an alternate flow
    or UI is provided to the end user.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现代izer允许网络开发者在维持对不支持它们的浏览器的精细控制的同时使用新的CSS3和HTML5功能。基本上，现代izer在页面在浏览器中加载时执行下一代特性检测（检查这些特性的可用性）并报告结果。根据这些结果，您可以检测到浏览器中最新可用的特性，根据这些特性，您可以为最终用户提供一个界面。如果浏览器不支持一些特性，那么将向最终用户提供替代流程或UI。
- en: 'We are also adding the Bootstrap templates, which are written in JavaScript,
    using the `ui-bootstrap-tpls javascript` file:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加Bootstrap模板，这些模板是用JavaScript编写的，使用`ui-bootstrap-tpls javascript`文件：
- en: '[PRE9]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can also add style to the `head` tag, as shown in the following code. This
    style allows drop-down menus to work:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以向`head`标签添加样式，如下面的代码所示。这些样式允许下拉菜单正常工作：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the `body` tag, we are defining the controller of the application using the
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`body`标签中，我们使用
- en: '`ng-controller` attribute. While the page loads, it tells the controller the
    name of the application to Angular, shown as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`ng-controller`属性。在页面加载时，它告诉控制器将应用程序名称告诉Angular，如下所示：'
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, we define the `header` section of the home page. In the `header` section,
    we''ll define the application title, `Online Table Reservation System`. Also,
    we''ll define the search form that will search the restaurants:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们定义主页的`header`部分。在`header`部分，我们将定义应用程序标题`在线餐桌预订系统`。此外，我们还将定义搜索餐厅的搜索表单：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, the next section, the middle section, includes where we actually bind
    the different views, marked with actual content comments. The `ui-view` attribute
    in `div` gets its content dynamically from Angular, such as restaurant details,
    restaurant lists, and so on. We have also added a warning dialog and spinner to
    the middle section that will be visible as and when required:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，下一节，中间部分，包括我们实际绑定了不同的视图，用实际的内容注释标记。`div`中的`ui-view`属性动态地从Angular获取其内容，例如餐厅详情、餐厅列表等。我们还为中间部分添加了警告对话框和加载动画，根据需要显示：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The final section of the `index.html` is the footer. Here, we are just adding
    the static content and copyright text. You can add whatever content you want here:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`index.html`的最后一部分是页脚。在这里，我们只是添加了静态内容和版权文本。您可以在這裡添加任何您想要的内容：'
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: app.js
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: app.js
- en: '`app.js` is our main application file. Because we have defined it in `index.html`,'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`app.js`是我们的主应用程序文件。因为我们已经在`index.html`中定义了它，'
- en: it gets loaded as soon as our `index.html` is called.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它在我们的`index.html`被调用时就已经加载。
- en: We need to take care that we do not mix route (URI) with REST endpoints. Routes
    represent the state/view of the SPA.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要注意不要将路由（URI）与REST端点混合。路由代表了SPA的状态/视图。
- en: 'As we are using the edge server (proxy server), everything will be accessible
    from it including our REST endpoints. External applications including the UI will
    use the edge server host to access the application. You can configure it in a
    global constants file and then use it wherever it is required. This will allow
    you to configure the REST host at a single place and use it at other places:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用边缘服务器（代理服务器），一切都可以通过它访问，包括我们的REST端点。外部应用程序（包括UI）将使用边缘服务器的宿主来访问应用程序。您可以在全局常量文件中配置它，然后在需要的地方使用它。这将允许您在单一位置配置REST主机并在其他地方使用它：
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: restaurants.js
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: restaurants.js
- en: '`restaurants.js` represents an Angular service for our application that we''ll
    use for the restaurants. We know that there are two common uses of services—organizing
    code and sharing code across applications. Therefore, we have created a restaurants
    service that will be used among different modules such as search, list, details,
    and so on.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`restaurants.js`代表了我们应用程序中一个用于餐厅的Angular服务，我们将在搜索、列表、详情等不同模块间使用它。我们知道服务的两个常见用途是组织代码和跨应用程序共享代码。因此，我们创建了一个餐厅服务，它将在不同的模块（如搜索、列表、详情等）间使用。'
- en: Services are singleton objects, which are lazily instantiated by the AngularJS
    service factory.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 服务是单例对象，由AngularJS服务工厂延迟实例化。
- en: 'The following section initializes the restaurants service module and loads
    the required dependencies:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下部分初始化了餐厅服务模块并加载了所需的依赖项：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the configuration, we are defining the routes and state of the `otrsApp.restaurants`
    module using UI-Router.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置中，我们使用UI-Router定义了`otrsApp.restaurants`模块的路线和状态：
- en: First, we define the `restaurants` state by passing the JSON object containing
    the URL that points to the router URI, the template URL that points to the HTML
    template that displays the `restaurants` state, and the controller that will handle
    the events on the `restaurants` view.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过传递包含指向路由URI的URL、指向显示`restaurants`状态的HTML模板的URL以及将处理`restaurants`视图上事件的路由器来定义`restaurants`状态。
- en: 'On top of the `restaurants` view (`route - /restaurants`), a nested `restaurants.profile`
    state is also defined that will represent the specific restaurant. For example,
    `/restaurant/1` would open and display the restaurant profile (details) page of
    a restaurant that is represented by `Id 1`. This state is called when a link is
    clicked in the `restaurants` template. In this `ui-sref="restaurants.profile({id:
    rest.id})"`, `rest` represents the `restaurant` object retrieved from the `restaurants`
    view.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '在`restaurants`视图（`route - /restaurants`）之上，还定义了一个嵌套的`restaurants.profile`状态，它将代表特定的餐厅。例如，`/restaurant/1`会打开并显示代表`Id
    1`的餐厅的概要（详情）页面。当在`restaurants`模板中点击链接时，这个状态会被调用。在这个`ui-sref="restaurants.profile({id:
    rest.id})"`中，`rest`代表了从`restaurants`视图中检索到的`restaurant`对象。'
- en: 'Notice that the state name is `''restaurants.profile''`, which tells the AngularJS
    UI-Router that the profile is a nested state of the `restaurants` state:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，状态名是`'restaurants.profile'`，这告诉AngularJS UI-Router `restaurants`状态的概要是一个嵌套状态：
- en: '[PRE17]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the next code section, we are defining the restaurant service using the
    Angular factory service type. This restaurant service on load fetches the list
    of restaurants from the server using a REST call. It provides a list and searches
    restaurant operations and restaurant data:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个代码部分，我们使用Angular工厂服务类型定义了餐厅服务。这个餐厅服务在加载时通过REST调用从服务器获取餐厅列表。它提供了餐厅操作的列表和搜索餐厅数据：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the next section of the `restaurants.js` module, we'll add two controllers
    that we defined for the `restaurants` and `restaurants.profile` states in the
    routing configuration. These two controllers are `RestaurantsCtrl` and `RestaurantCtrl`,
    and they handle the `restaurants` state and the `restaurants.profiles` state respectively.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在`restaurants.js`模块的下一部分，我们将添加两个控制器，我们在路由配置中为`restaurants`和`restaurants.profile`状态定义了这两个控制器。这两个控制器分别是`RestaurantsCtrl`和`RestaurantCtrl`，它们分别处理`restaurants`状态和`restaurants.profiles`状态。
- en: 'The `RestaurantsCtrl` controller is pretty simple, in that it loads the restaurants
    data using the restaurants service list method:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantsCtrl`控制器相当简单，它使用餐厅服务列表方法加载餐厅数据：'
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `RestaurantCtrl` controller is responsible for showing the restaurant details
    of a given ID. This is also responsible for performing the reservation operations
    on the displayed restaurant. This control will be used when we design the restaurant
    details page with reservation options:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`RestaurantCtrl`控制器负责显示给定ID的餐厅详情。这也负责对显示的餐厅执行预订操作。当设计带有预订选项的餐厅详情页面时，将使用这个控制器：'
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We have also added a few of the filters in the `restaurants.js` module to format
    the date and time. These filters perform the following formatting on the input
    data:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还在`restaurants.js`模块中添加了几个筛选器来格式化日期和时间。这些筛选器对输入数据执行以下格式化：
- en: '`date1`: Returns the input date in `dd MMM yyyy` format, for example, 13-Apr-2016'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date1`：返回输入日期，格式为`dd MMM yyyy`，例如，`13-Apr-2016`'
- en: '`time1`: Returns the input time in HH:mm:ss format, for example, 11:55:04'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`time1`：返回输入时间，格式为HH:mm:ss，例如，`11:55:04`'
- en: '`dateTime1`: Returns the input date and time in `dd MMM yyyy HH:mm:ss` format,
    for example, 13-Apr-2016 11:55:04'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dateTime1`：返回输入日期和时间，格式为`dd MMM yyyy HH:mm:ss`，例如，`13-Apr-2016 11:55:04`'
- en: 'In the following code snippet, we''ve applied these three filters:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码片段中，我们应用了这三个筛选器：
- en: '[PRE21]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: restaurants.html
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: restaurants.html
- en: 'We need to add the templates that we have defined for the `restaurants.profile`
    state. As you can see, in the template, we are using the `ng-repeat` directive
    to iterate the list of objects returned by `restaurantService.restaurants`. The
    `restaurantService` scope variable is defined in the controller. `''RestaurantsCtrl''`
    is associated with this template in the `restaurants` state:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加为`restaurants.profile`状态定义的模板。正如你所见，在模板中，我们使用`ng-repeat`指令来遍历由`restaurantService.restaurants`返回的对象列表。`restaurantService`作用域变量在控制器中定义。`'RestaurantsCtrl'`与这个模板在`restaurants`状态中相关联：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Search restaurants
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索餐厅
- en: 'In the home page `index.html`, we have added the search form in the `header`
    section that allows us to search restaurants. The search restaurants functionality
    will use the same files as described earlier. It makes use of `app.js` (search
    form handler), `restaurants.js` (restaurant service), and `restaurants.html` to
    display the searched records:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在主页`index.html`中，我们在`header`部分添加了搜索表单，用于搜索餐厅。搜索餐厅功能将使用前面描述的相同文件。它使用`app.js`（搜索表单处理程序）、`restaurants.js`（餐厅服务）和`restaurants.html`来显示搜索到的记录：
- en: '![](img/b40a4348-76e8-435b-a8cb-384039b8b5a8.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b40a4348-76e8-435b-a8cb-384039b8b5a8.png)'
- en: OTRS home page with restaurants listing
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: OTRS主页带餐厅列表
- en: Restaurant details with reservation option
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有预订选项的餐厅详情
- en: Restaurant details with reservation option will be part of the content area
    (middle section of the page). This will contain a breadcrumb at the top with restaurants
    as a link to the restaurant listing page, followed by the name and address of
    the restaurant. The last section will contain the reservation section containing
    date and time selection boxes and a reserve button.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 带有预订选项的餐厅详情将作为内容区域（页面中间部分）的一部分。这部分将包含一个顶部面包屑，带有餐厅链接至餐厅列表页面，随后是餐厅的名称和地址。最后部分将包含预订部分，包含日期和时间选择框和一个预订按钮。
- en: 'This page will look like the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面将如下所示：
- en: '![](img/efbae38e-baf9-455f-8379-4b5cdd67bf1b.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efbae38e-baf9-455f-8379-4b5cdd67bf1b.png)'
- en: Restaurants Detail Page with Reservation Option
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 餐厅详情页面带预订选项
- en: Here, we will make use of the same restaurant service declared in `restaurants.js`.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用在`restaurants.js`中声明的相同的餐厅服务。
- en: The only change will be the template as described for the `restaurants.profile`
    state. This template will be defined using `restaurant.html`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的变化将是模板，正如为`restaurants.profile`状态描述的那样。这个模板将使用`restaurant.html`定义。
- en: restaurant.html
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: restaurant.html
- en: 'As you can see, the breadcrumb is using the `restaurants` route, which is defined
    using the `ui-sref` attribute. The reservation form designed in this template
    calls the `book()` function defined in the controller `RestaurantCtrl` using the
    directive `ng-submit` on the form submit:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，面包屑正在使用`restaurants`路由，这是使用`ui-sref`属性定义的。在这个模板中设计的预订表单在表单提交时使用`ng-submit`指令调用控制器`RestaurantCtrl`中的`book()`函数：
- en: '[PRE23]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Login page
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录页面
- en: 'When a user clicks on the Reserve button on the Restaurant Detail page after
    selecting the date and time of the reservation, the Restaurant Detail page checks
    whether the user is already logged in or not. If the user is not logged in, then
    the Login page displays. It looks like the following screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户在选择预订日期和时间后点击餐厅详情页面上的“预订”按钮时，餐厅详情页面会检查用户是否已经登录。如果用户没有登录，那么将显示登录页面。它的样子如下截图所示：
- en: '![](img/829ecbf3-dbee-4ed3-80f4-653c622b1671.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/829ecbf3-dbee-4ed3-80f4-653c622b1671.png)'
- en: Login page
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面
- en: We are not authenticating the user from the server. Instead, we are just populating
    the user name in the session storage and root scope for implementing the flow.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不是从服务器上验证用户。相反，我们只是将用户名填充到会话存储和根作用域中，以实现流程。
- en: 'Once the user logs in, they are redirected back to the same booking page with
    the persisted state. Then, the user can proceed with the reservation. The Login
    page uses basically two files: `login.html` and `login.js`.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户登录，他们将被重定向回带有持久状态的同一预订页面。然后，用户可以继续预订。登录页面基本上使用两个文件：`login.html`和`login.js`。
- en: login.html
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录.html
- en: The `login.html` template consists of only two input fields, username and password,
    with the Login button and Cancel link. The Cancel link resets the form and the
    Login button submits the login form.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.html`模板只包含两个输入字段，分别是用户名和密码，以及登录按钮和取消链接。取消链接重置表单，登录按钮提交登录表单。'
- en: 'Here, we are using `LoginCtrl` with the `ng-controller` directive. The Login
    form is submitted using the `ng-submit` directive that calls the `submit` function
    of `LoginCtrl`. Input values are first collected using the `ng-model` directive
    and then submitted using their respective properties - `_email` and `_password`:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`LoginCtrl`与`ng-controller`指令。登录表单使用`ng-submit`指令提交，该指令调用`LoginCtrl`的`submit`函数。首先使用`ng-model`指令收集输入值，然后使用它们的相应属性
    - `_email`和`_password`提交：
- en: '[PRE24]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: login.js
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录.js
- en: The login module is defined in the `login.js` file that contains and loads the
    dependencies using the `module` function. The login state is defined with the
    help of the `config` function that takes the JSON object containing the `url`,
    `controller`, and `templateUrl` properties.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 登录模块定义在`login.js`文件中，该文件使用`module`函数包含和加载依赖项。使用`config`函数定义登录状态，该函数接收包含`url`、`控制器`和`templateUrl`属性的JSON对象。
- en: 'Inside the `controller`, we define the `cancel` and `submit` operations, which
    are called from the `login.html` template:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在`controller`内部，我们定义了`取消`和`提交`操作，这些操作是从`login.html`模板中调用的：
- en: '[PRE25]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Reservation confirmation
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预订确认
- en: 'Once the user is logged in and has clicked on the Reservation button, the restaurant
    controller shows the alert box with confirmation, as shown in the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户登录并点击了预订按钮，餐厅控制器将显示带有确认信息的弹窗，如下面的截图所示：
- en: '![](img/dfa8dc28-1080-49fa-aa56-86c3ca29acb2.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dfa8dc28-1080-49fa-aa56-86c3ca29acb2.png)'
- en: Restaurants detail page with reservation confirmation
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 餐厅详情页面带预订确认
- en: Setting up the web application
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置网络应用程序
- en: As we are planning to use the latest technology stack for our UI application
    development, we will use Node.js and **npm** (**Node.js package manager**) that
    provide the open-source runtime environment for developing the server-side JavaScript
    web application.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们计划使用最新的技术堆栈来开发我们的UI应用程序，我们将使用Node.js和**npm**（**Node.js包管理器**），它们为开发服务器端JavaScript网络应用程序提供了开源运行环境。
- en: I would recommend to go through this section once. It will introduce you to
    JavaScript build tooling and stacks. However, you can skip it if you know the
    JavaScript build tools or do not want to explore them.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您浏览这一部分。它将向您介绍JavaScript构建工具和堆栈。然而，如果您已经了解JavaScript构建工具，或者不想探索它们，您可以跳过这一部分。
- en: 'Node.js is built on Chrome''s V8 JavaScript engine and uses an event-driven,
    non-blocking I/O, which makes it lightweight and efficient. The default package
    manager of Node.js, npm, is the largest ecosystem of open-source libraries. It
    allows the installation of Node.js programs and makes it easier to specify and
    link dependencies:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: Node.js基于Chrome的V8 JavaScript引擎，并使用事件驱动、非阻塞I/O，使其轻量级且高效。Node.js的默认包管理器npm是最大的开源库生态系统。它允许安装Node.js程序，并使指定和链接依赖项变得更容易：
- en: First, we need to install npm if it's not already installed. It is a prerequisite.
    You can check the link at: [https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node)
    to install npm.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，如果尚未安装，我们需要安装npm。这是一个先决条件。你可以通过访问链接来安装npm：[https://docs.npmjs.com/getting-started/installing-node](https://docs.npmjs.com/getting-started/installing-node)。
- en: To check if npm is set up correctly execute the `npm -v` command on the CLI.
    It should return the installed npm version in the output. We can switch to NetBeans
    for creating a new AngularJS JS HTML5 project in NetBeans. At the time of writing
    this chapter, I have used NetBeans 8.1.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查npm是否正确设置，请在命令行界面（CLI）上执行`npm -v`命令。它应该在输出中返回已安装的npm版本。我们可以切换到NetBeans来创建一个新的AngularJS
    JS HTML5项目。在本章撰写之时，我使用的是NetBeans 8.1。
- en: 'Navigate to File | New Project. A new project dialog should appear. Select HTML5/JavaScript
    under the Categories list and HTML5/JS Application under the Projects option,
    as shown in the following screenshot:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到文件|新建项目。一个新项目对话框应该会出现。选择“HTML5/JavaScript”在类别列表中，以及“HTML5/JS应用程序”在项目选项中，如下图所示：
- en: '![](img/c5bce51d-efdb-40ce-b615-50fe03a9b569.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5bce51d-efdb-40ce-b615-50fe03a9b569.png)'
- en: NetBeans - New HTML5/JavaScript project
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans - 新HTML5/JavaScript项目
- en: Click on the Next button. Then, feed the Project Name, Project Location,
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“下一步”按钮。然后，在“名称和位置”对话框中输入项目名称、项目位置、
- en: and Project Folder in the Name and Location dialog and click on the
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 和在项目文件夹中点击
- en: 'Next button:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一步按钮：
- en: '![](img/3c602ecc-b62d-4a0a-95a6-da19f131c495.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c602ecc-b62d-4a0a-95a6-da19f131c495.png)'
- en: NetBeans New Project - Name and Location
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 新项目 - 名称和位置
- en: 'On the Site Template dialog, select the AngularJS Seed item under the Download
    Online Template: option and click on the Next button. The AngularJS Seed project
    is available at: [https://github.com/angular/angular-seed](https://github.com/angular/angular-seed):'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“网站模板”对话框中，选择“下载在线模板”选项下的AngularJS Seed项目，然后点击“下一步”按钮。AngularJS Seed项目可在以下网址找到：[https://github.com/angular/angular-seed](https://github.com/angular/angular-seed)：
- en: '![](img/4a404d56-6b00-4c9e-89cf-b2b2b2297910.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4a404d56-6b00-4c9e-89cf-b2b2b2297910.png)'
- en: NetBeans new project - site Ttemplate
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: NetBeans 新项目 - 网站模板
- en: 'On the Tools dialog, select Create package.json, Create bower.json, and Create
    gulpfile.js. We''ll use gulp as our build tool. Gulp and Grunt are two of the
    most popular build frameworks for JS. As a Java programmer, you can correlate
    these tools to Ant. Both are awesome in their own way. If you want, you can also
    use `Gruntfile.js` as a build tool:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“工具”对话框中，选择创建`package.json`、创建`bower.json`和创建`gulpfile.js`。我们将使用gulp作为我们的构建工具。Gulp和Grunt是JS最流行的构建框架之二。作为一个Java程序员，你可以将这些工具与Ant相关联。两者都有自己的优点。如果你愿意，你也可以使用`Gruntfile.js`作为构建工具：
- en: '![](img/976ef34a-cba5-492c-8002-d218f577e5d6.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/976ef34a-cba5-492c-8002-d218f577e5d6.png)'
- en: Netbeans New Project - Tools
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Netbeans 新项目 - 工具
- en: 'Now, once you click on Finish, you can see the HTML5/JS application directories
    and files. The directory structure will look like the following screenshot:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦你点击完成，你就可以看到HTML5/JS应用程序目录和文件。目录结构将如下所示：
- en: '![](img/d648df11-ae57-4cdb-9c23-1df565f87006.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d648df11-ae57-4cdb-9c23-1df565f87006.png)'
- en: AngularJS seed directory structure
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS 种子目录结构
- en: 'You will also see an exclamation mark in your project if all of the required
    dependencies are not configured properly. You can resolve project problems by
    right-clicking on the project and then selecting the Resolve Project Problems
    option:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的项目中所有必需的依赖项都没有正确配置，你还会看到一个感叹号。你可以通过右键点击项目，然后选择“解决项目问题”选项来解决项目问题：
- en: '![](img/8f574c16-80be-4778-be6f-f3c5173b582a.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f574c16-80be-4778-be6f-f3c5173b582a.png)'
- en: Resolve Project Problems dialog
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 解决项目问题对话框
- en: Ideally, NetBeans resolves project problems if you click on the Resolve... button.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 理想情况下，NetBeans会在你点击“解决...”按钮时解决项目问题。
- en: 'You can also resolve a few of the problems by giving the correct path for some
    of the JS modules such as Bower, gulp, and Node:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以通过为一些JS模块（如Bower、gulp和Node）提供正确的路径来解决几个问题：
- en: '**Bower**: Required to manage the JavaScript libraries for the OTRS application'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bower**：用于管理OTRS应用程序的JavaScript库'
- en: '**Gulp**: A task runner, required for building our projects like ANT'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Gulp**：任务运行器，用于构建我们的项目，如ANT'
- en: '**Node**: For executing our server-side OTRS application'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Node**：用于执行我们的服务器端OTRS应用程序'
- en: Bower is a dependencies management tool that works like npm. Npm is used for
    installing the Node.js modules, whereas Bower is used for managing your web application's
    libraries/components.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Bower是一个依赖管理工具，它像npm一样工作。npm用于安装Node.js模块，而Bower用于管理您的网络应用程序的库/组件。
- en: 'Click on the Tools menu and select Options. Now, set the path of Bower, gulp,
    and Node.js, as shown in the HTML/JS tools (top bar icon) in the following screenshot.
    For setting up the Bower path, click on the Bower tab, as shown in the following
    screenshot, and update the path:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具菜单并选择选项。现在，设置Bower、gulp和Node.js的路径，如以下屏幕截图所示。要设置Bower路径，请点击Bower标签，如下面的屏幕截图所示，并更新路径：
- en: '![](img/d5186eb3-34cf-4f81-9a39-88fcba50a37f.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5186eb3-34cf-4f81-9a39-88fcba50a37f.png)'
- en: Setting Bower path
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Bower路径
- en: 'For setting up the Gulp Path, click on the Gulp tab, as shown in the following
    screenshot, and update the path:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要设置Gulp路径，请点击Gulp标签，如下面的屏幕截图所示，并更新路径：
- en: '![](img/6319ca05-d1a5-4538-927e-44b41c22b949.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6319ca05-d1a5-4538-927e-44b41c22b949.png)'
- en: Setting Gulp path
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Gulp路径
- en: 'For setting up the Node Path, click on the Node.js tab, as shown in the following
    screenshot, and update the path:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Node路径，请点击Node.js标签，如以下屏幕截图所示，并更新路径：
- en: '![](img/7cc72097-0710-483a-9b83-d04b9a095ff8.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7cc72097-0710-483a-9b83-d04b9a095ff8.png)'
- en: Setting Node path
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Node路径
- en: 'Once this is done, package.json will look like the following. We have modified
    the values for a few of the entries such as name, descriptions, dependencies,
    and so on:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，package.json将如下所示。我们对一些条目的值进行了修改，如名称、描述、依赖项等：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, we''ll update `bower.json`, as shown in the following snippet:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将更新`bower.json`，如下面的代码片段所示：
- en: '[PRE27]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we''ll modify the `.bowerrc` file, as shown in the following code, to
    specify the directory where Bower will store the components defined in `bower.json`.
    We''ll store the Bower component under the application directory:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将修改`.bowerrc`文件，如下面的代码所示，以指定Bower将在其中存储`bower.json`中定义的组件的目录。我们将Bower组件存储在应用程序目录下：
- en: '[PRE28]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, we''ll set up the `gulpfile.js`. We''ll use `CoffeeScript` to define
    the `gulp` tasks. Therefore, we will just define the `CoffeeScript` in `gulpfile.js`
    and the actual task will be defined in the `gulpfile.coffee` file. Let''s see
    the content of the `gulpfile.js` file:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置`gulpfile.js`。我们将使用`CoffeeScript`定义`gulp`任务。因此，我们只需在`gulpfile.js`中定义`CoffeeScript`，实际的任务将在`gulpfile.coffee`文件中定义。让我们看看`gulpfile.js`文件的内容：
- en: '[PRE29]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In this step, we''ll define the `gulp` configuration. We are using `CoffeeScript`
    to define the `gulp` file. The name of the `gulp` file written in `CoffeeScript`
    is `gulpfile.coffee`. The default task is defined as `default_sequence`:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此步骤中，我们将定义`gulp`配置。我们使用`CoffeeScript`定义`gulp`文件。用`CoffeeScript`编写的`gulp`文件的名称是`gulpfile.coffee`。默认任务定义为`default_sequence`：
- en: '[PRE30]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Let''s understand what `default_sequence` task performs:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解`default_sequence`任务执行的内容：
- en: As per the defined `default_sequence` task, first it will connect to the server,
    then build the web application, and keep a watch on the changes. The watch will
    help to render changes we make in the code and will be displayed immediately on
    the UI.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据定义的`default_sequence`任务，首先它会连接到服务器，然后构建网络应用程序，并监视更改。监视将帮助我们在代码中做出更改并在UI上立即显示。
- en: The most important tasks in this script are `connect` and `watch`. Others are
    self-explanatory. So, lets dig in them.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此脚本中最重要的任务是`connect`和`watch`。其他任务不言自明。所以，让我们深入了解一下它们。
- en: '`gulp-connect`: This is a `gulp` plugin to run the web server. It also allows
    for live reload.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp-connect`：这是一个`gulp`插件，用于运行网络服务器。它还支持实时重新加载。'
- en: '`gulp-watch`: This is a file watcher that uses chokidar and emits vinyl objects
    (objects describe the file—its path and content). In simple words, we can say
    that `gulp-watch` watches files for changes and triggers tasks.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gulp-watch`：这是一个文件监视器，使用chokidar，并发出vinyl对象（描述文件的路径和内容的对象）。简而言之，我们可以说`gulp-watch`监视文件更改并触发任务。'
- en: 'The `gulpfile.coffee` will look something like this:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`gulpfile.coffee`可能看起来像这样：'
- en: '[PRE31]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Once we are ready with the preceding changes, we will install `gulp` using
    the following command:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们准备好前面的更改，我们将使用以下命令安装`gulp`：
- en: '[PRE32]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To install windows build tools, run the following command in Windows environment:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows环境中安装Windows构建工具，请运行以下命令：
- en: '[PRE33]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Also, we''ll install the other `gulp` libraries such as `gulp-clean`, `gulp-connect`,
    and so on, using the following command:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们将使用以下命令安装其他`gulp`库，如`gulp-clean`、`gulp-connect`等：
- en: '[PRE34]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now, we can install the Bower dependencies defined in the `bower.json` file
    using the following command:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '- 现在，我们可以使用以下命令安装`bower.json`文件中定义的Bower依赖项：'
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If Bower is not installed, please install it with following command:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '- 如果尚未安装Bower，请使用以下命令安装：'
- en: '[PRE36]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output for the preceding command will be as shown in the following screenshot:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '- 前一条命令的输出将如下所示：'
- en: '![](img/c00982cc-fe4d-4411-bcf5-a890c3a7ceeb.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c00982cc-fe4d-4411-bcf5-a890c3a7ceeb.jpg)'
- en: Sample output - bower install --s
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '- 示例输出 - bower install --s'
- en: 'This is the last step in the setup. Here, we will confirm that the directory
    structure should look like the following. We''ll keep the `src` and `published`
    artifacts (in the `./public` directory) as separate directories. Therefore, the
    following directory structure is different from the default AngularJS seed project:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '- 这里是设置的最后一步。在这里，我们将确认目录结构应如下所示。我们将把`src`和`published`构件（在`./public`目录中）作为独立的目录保存。因此，下面的目录结构与默认的AngularJS种子项目不同：'
- en: '[PRE37]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: References
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '- 参考资料'
- en: 'The following are references to some good reads:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '- 以下是一些推荐阅读的参考资料：'
- en: '*AngularJS by Example*, *Packt Publishing:* ([https://www.packtpub.com/web-development/angularjs-example](https://www.packtpub.com/web-development/angularjs-example))'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- 《AngularJS by Example》，Packt Publishing: [https://www.packtpub.com/web-development/angularjs-example](https://www.packtpub.com/web-development/angularjs-example)'
- en: 'Angular Seed Project: ([https://github.com/angular/angular-seed](https://github.com/angular/angular-seed))'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- Angular Seed Project: [https://github.com/angular/angular-seed](https://github.com/angular/angular-seed)'
- en: 'Angular UI: ([https://angular-ui.github.io/bootstrap/](https://angular-ui.github.io/bootstrap/))'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- Angular UI: [https://angular-ui.github.io/bootstrap/](https://angular-ui.github.io/bootstrap/)'
- en: 'Gulp: ([http://gulpjs.com/](http://gulpjs.com/))'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '- Gulp: [http://gulpjs.com/](http://gulpjs.com/)'
- en: Summary
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '- 摘要'
- en: In this chapter, we have learned about the new dynamic web application development.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '- 在本章中，我们了解到了新的动态网络应用开发。'
- en: It has changed completely over the years. The web application frontend is completely
    developed in pure HTML and JavaScript instead of using any server-side technologies
    such as JSP, servlets, ASP, and so on. UI application development with JavaScript
    now has its own development environments such as npm, Bower, and so on. We have
    explored the AngularJS framework to develop our web application. It made things
    easier by providing built-in features and support for Bootstrap and the `$http`
    service that deals with the AJAX calls.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '- 多年来，它已经发生了彻底的变化。网络应用的前端完全使用纯HTML和JavaScript开发，而不是使用任何服务器端技术，如JSP、servlets、ASP等。使用JavaScript开发的UI应用程序现在有其自己的开发环境，如npm、Bower等。我们探讨了AngularJS框架来开发我们的网络应用程序。它通过提供内置特性和对Bootstrap以及处理AJAX调用的`$http`服务的支持，使事情变得更容易。'
- en: I hope you have grasped the UI development overview and the way modern applications
    are developed and integrated with server-side microservices. In the next chapter,
    we will learn the best practices and common principals of microservice design.
    The chapter will provide details about microservices development using industry
    practices and examples. It will also contain examples of where microservices implementation
    goes wrong and how you can avoid such problems.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '- 我希望您已经掌握了UI开发的概述以及现代应用程序是如何与服务器端微服务集成开发的。在下一章中，我们将学习微服务设计的最优实践和常见原则。本章将提供有关使用行业实践和示例进行微服务开发的详细信息。它还将包含微服务实施出错的示例以及如何避免这些问题。'
