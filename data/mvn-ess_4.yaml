- en: Chapter 4. Maven Plugins
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 4 章。Maven 插件
- en: 'The roots of Maven go back to the *Jakarta Turbine* project, which was started
    as an attempt to simplify the build process of Jakarta Turbine. The beauty of
    Maven is its design. It does not try to do everything by itself, but rather delegates
    to a plugin framework. When you download Maven from its website, it''s only the
    core framework, and the plugins are downloaded on demand. All the useful functionalities
    in the build process are developed as Maven plugins. You can also call Maven a
    plugin execution framework. The following figure shows the Maven plugins:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 的根源可以追溯到 *Jakarta Turbine* 项目，该项目最初是为了简化 Jakarta Turbine 的构建过程。Maven 的美妙之处在于其设计。它并不试图自己完成所有事情，而是委托给一个插件框架。当你从其网站下载
    Maven 时，它只有核心框架，插件是按需下载的。构建过程中的所有有用功能都是作为 Maven 插件开发的。你还可以将 Maven 称为一个插件执行框架。以下图显示了
    Maven 插件：
- en: '![Maven Plugins](img/B02157_04_01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![Maven 插件](img/B02157_04_01.jpg)'
- en: A Maven plugin can be executed on its own or can be executed as a part of a
    Maven lifecycle. We will discuss Maven lifecycles in [Chapter 5](ch05.html "Chapter 5. Build
    Lifecycles"), *Build Lifecycles*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 插件可以独立执行，也可以作为 Maven 生命周期的一部分执行。我们将在[第 5 章](ch05.html "第 5 章。构建生命周期")*构建生命周期*中讨论
    Maven 生命周期。
- en: Note
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'A Maven build lifecycle consists of a set of well-defined phases. Each phase
    groups a set of goals defined by Maven plugins and the lifecycle defines the order
    of execution. Maven comes with three standard lifecycles: **default**, **clean**,
    and **site**. Each lifecycle defines its own set of phases.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 构建生命周期由一系列定义良好的阶段组成。每个阶段都包含由 Maven 插件定义的一组目标，生命周期定义了执行顺序。Maven 提供了三个标准生命周期：**default**、**clean**和**site**。每个生命周期定义了自己的阶段集。
- en: 'Each plugin has its own set of goals, and each goal is responsible for performing
    a specific action. Let''s see how to execute the `clean` goal of the Maven `clean`
    plugin. The `clean` goal will attempt to clean the working directory and the associated
    files created during the build:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个插件都有自己的目标集，每个目标都负责执行特定的操作。让我们看看如何执行 Maven `clean`插件的`clean`目标。`clean`目标将尝试清理工作目录和构建过程中创建的相关文件：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Maven plugins can be self-executed as `mvn plugin-prefix-name:goal-name`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 插件可以作为`mvn plugin-prefix-name:goal-name`执行。
- en: 'The same `clean` plugin can be executed via the `clean` lifecycle, as shown
    in the following command:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的`clean`插件可以通过`clean`生命周期执行，如下命令所示：
- en: '[PRE1]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The clean goal of the Maven `clean` plugin is associated with the `clean` phase
    of the clean lifecycle. The clean lifecycle defines three phases: `pre-clean`,
    `clean`, and `post-clean`. A phase in a lifecycle is just an ordered placeholder
    in the build execution path. For example, the `clean` phase in the `clean` lifecycle
    cannot do anything on its own. In the Maven architecture, it has two key elements:
    nouns and verbs. Both nouns and verbs, which are related to a given project, are
    defined in the POM file. The name of the project, the name of the parent project,
    the dependencies, and the type of packaging are nouns. Plugins bring verbs into
    the Maven build system, and they define what needs to be done during the build
    execution via its goals. A plugin is a group of goals. Each goal of a plugin can
    be executed on its own or can be registered as part of a phase in a Maven build
    lifecycle. One difference here is that when you execute a Maven plugin on its
    own, it only runs the goal specified in the command; however, when you run it
    as a part of a lifecycle, then Maven executes all the plugin goals associated
    with the corresponding lifecycle up until the specified phase (including that
    phase).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `clean`插件的`clean`目标与`clean`生命周期的`clean`阶段相关联。`clean`生命周期定义了三个阶段：`pre-clean`、`clean`和`post-clean`。生命周期中的一个阶段只是构建执行路径中的一个有序占位符。例如，`clean`生命周期中的`clean`阶段本身不能做任何事情。在
    Maven 架构中，它有两个关键元素：名词和动词。与特定项目相关的名词和动词都在 POM 文件中定义。项目的名称、父项目的名称、依赖项和打包类型都是名词。插件将动词引入
    Maven 构建系统，并通过其目标定义构建执行期间需要执行的操作。插件是一组目标。每个插件的目标都可以独立执行，也可以注册为 Maven 构建生命周期中某个阶段的一部分。这里的一个区别是，当你独立执行
    Maven 插件时，它只运行命令中指定的目标；然而，当你将其作为生命周期的一部分运行时，Maven 将执行与相应生命周期关联的所有插件目标，直到指定的阶段（包括该阶段）。
- en: When you type `mvn clean`, it executes all the phases defined in the `clean`
    lifecycle up to and including the `clean` phase. Don't be confused; in this command,
    `clean` is not the name of the lifecycle, it's the name of a phase. It's only
    a coincidence that the name of the phase happens to be the name of the lifecycle.
    In Maven, you cannot simply execute a lifecycle by its name—it has to be the name
    of a phase. Maven will find the corresponding lifecycle and will execute all phases
    in it up to the given phase (including that phase).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你输入 `mvn clean` 时，它将执行 `clean` 生命周期中定义的所有阶段，包括并限于 `clean` 阶段。不要混淆；在这个命令中，`clean`
    不是生命周期的名称，而是阶段的名称。阶段名称恰好与生命周期名称相同只是一个巧合。在 Maven 中，你不能简单地通过名称执行生命周期——它必须是阶段名称。Maven
    将找到相应的生命周期，并将执行其中直到给定阶段的所有阶段（包括该阶段）。
- en: 'In this chapter, we will be talking about the following topics:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Commonly used Maven plugins and their usage
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常用 Maven 插件及其用法
- en: Plugin discovery and execution process
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 插件发现和执行过程
- en: Common Maven plugins
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常用 Maven 插件
- en: Maven plugins are mostly developed under the Apache Maven project itself, as
    well as under the Codehaus and Google Code projects. The following sections list
    out a set of commonly used Maven plugins and their usages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 插件主要在 Apache Maven 项目本身以及 Codehaus 和 Google Code 项目下开发。以下几节列出了常用 Maven
    插件及其用法。
- en: The clean plugin
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理插件
- en: 'As discussed earlier, the `clean` plugin executes the `clean` goal of the Maven
    `clean` plugin to remove any of the working directories and other resources created
    during the build, as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`clean` 插件执行 Maven `clean` 插件的 `clean` 目标，以删除在构建过程中创建的任何工作目录和其他资源，如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Maven `clean` plugin is also associated with the `clean` lifecycle. If you
    just execute `mvn clean`, the `clean` goal of the `clean` plugin will get executed.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `clean` 插件也与 `clean` 生命周期相关联。如果你只是执行 `mvn clean`，`clean` 插件的 `clean` 目标将被执行。
- en: 'You do not need to explicitly define the Maven `clean` plugin in your project
    POM file. Your project inherits it from the Maven super POM file. In [Chapter
    2](ch02.html "Chapter 2. Understanding the Project Object Model (POM)"), *Understanding
    the Project Object Model (POM)*, we discussed the Maven super POM file in detail.
    The following configuration in the super POM file associates the Maven `clean`
    plugin with all the Maven projects:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要在项目的 POM 文件中显式定义 Maven `clean` 插件。你的项目从 Maven 超级 POM 文件中继承它。在 [第 2 章](ch02.html
    "第 2 章。理解项目对象模型 (POM)") *理解项目对象模型 (POM)* 中，我们详细讨论了 Maven 超级 POM 文件。以下超级 POM 文件中的配置将
    Maven `clean` 插件与所有 Maven 项目关联起来：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The Maven `default` lifecycle includes the phases: validate, initialize, generate-sources,
    process-sources, generateresources, process-resources, compile, process-classes,
    generate-test-sources, process-test-sources, generate-testresources, process-test-resources,
    test-compile, process-testclasses, test, prepare-package, package, pre-integration-test,
    integration-test, post-integration-test, verify, install, deploy.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Maven `default` 生命周期包括以下阶段：validate、initialize、generate-sources、process-sources、generate-resources、process-resources、compile、process-classes、generate-test-sources、process-test-sources、generate-test-resources、process-test-resources、test-compile、process-testclasses、test、prepare-package、package、pre-integration-test、integration-test、post-integration-test、verify、install、deploy。
- en: 'By default, the `clean` goal of the `clean` plugin runs under the `clean` phase
    of the Maven `clean` lifecycle. If your project wants the `clean` plugin to run
    by default, then you can associate it with the `initialize` phase of the Maven
    `default` lifecycle. You can add the following configuration to your application
    POM file:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`clean` 插件的 `clean` 目标在 Maven `clean` 生命周期的 `clean` 阶段下运行。如果你的项目想要默认运行
    `clean` 插件，那么你可以将其与 Maven `default` 生命周期的 `initialize` 阶段关联起来。你可以在应用程序 POM 文件中添加以下配置：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, the `clean` goal of the `clean` plugin will get executed when you execute
    any of the phases in the Maven `default` lifecycle; there is no need to explicitly
    execute the `clean` phase of the `clean` lifecycle. For example, `mvn install`
    will run the `clean` goal in its `initialize` phase. This way, you can override
    the default behavior of the Maven `clean` plugin. A complete Maven sample project
    with the previous plugin configuration is available at [https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当你执行Maven `default`生命周期的任何阶段时，`clean`插件的`clean`目标将被执行；没有必要显式执行`clean`生命周期的`clean`阶段。例如，`mvn
    install`将在其`initialize`阶段运行`clean`目标。这样，你可以覆盖Maven `clean`插件的默认行为。一个包含先前插件配置的完整Maven示例项目可在[https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose](https://svn.wso2.org/repos/wso2/people/prabath/maven-mini/chapter04/jose)找到。
- en: The compiler plugin
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器插件
- en: 'The `compiler` plugin is used to compile the source code. This has two goals:
    `compile` and `testCompile`. The `compile` goal is bound to the `compile` phase
    of the Maven `default` lifecycle. When you type `mvn clean install`, Maven will
    execute all the phases in the `default` lifecycle up to the `install` phase, which
    also includes the `compile` phase. This, in turn, will run the `compile` goal
    of the `compiler` plugin.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`compiler`插件用于编译源代码。它有两个目标：`compile`和`testCompile`。`compile`目标绑定到Maven `default`生命周期的`compile`阶段。当你输入`mvn
    clean install`时，Maven将执行`default`生命周期中的所有阶段，直到`install`阶段，这包括`compile`阶段。这反过来将运行`compiler`插件的`compile`目标。'
- en: 'The following command shows how to execute the `compile` goal of the `compiler`
    plugin by itself. This will simply compile your source code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何单独执行`compiler`插件的`compile`目标。这将简单地编译你的源代码：
- en: '[PRE5]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'All the Maven projects inherit the `compiler` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `compiler`
    plugin. It associates the `testCompile` and `compile` goals with the `test-compile`
    and `compile` phases of the Maven `default` lifecycle:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Maven项目都从父POM文件继承了`compiler`插件。如下配置所示，父POM定义了`compiler`插件。它将`testCompile`和`compile`目标与Maven的`default`生命周期的`test-compile`和`compile`阶段关联起来：
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'By default, the Maven `compiler` plugin assumes JDK 1.5 for both the `source`
    and `target` elements. JVM identifies the Java version of the source code via
    the `source` configuration parameter and the version of the compiled code via
    the `target` configuration parameter. If you want to break the assumption made
    by Maven and specify your own `source` and `target` versions, you need to override
    the `compiler` plugin configuration in your application POM file, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Maven的`compiler`插件假定`source`和`target`元素都使用JDK 1.5。JVM通过`source`配置参数识别源代码的Java版本，通过`target`配置参数识别编译代码的版本。如果你想打破Maven的假设并指定自己的`source`和`target`版本，你需要在你的应用程序POM文件中覆盖`compiler`插件配置，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You can pass any argument to the `compiler` plugin under the `compilerArgument`
    element, not just the source and target elements. This is more useful when the
    Maven `compiler` plugin does not have an element defined for the corresponding
    JVM argument. For example, the same `source` and `target` values can also be passed
    in the following manner:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`compiler`插件下的`compilerArgument`元素中传递任何参数，而不仅仅是源和目标元素。当Maven的`compiler`插件没有为相应的JVM参数定义元素时，这更有用。例如，相同的`source`和`target`值也可以以下方式传递：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The install plugin
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装插件
- en: The `install` plugin will deploy the final project artifacts into the `local`
    Maven repository defined under the `localRepository` element of `MAVEN_HOME/conf/settings.xml`,
    where the default location is `USER_HOME/.m2/repository`. The `install` goal of
    the `install` plugin is bound to the `install` phase of the Maven `default` lifecycle.
    When you type `mvn clean install`, Maven will execute all the phases in the `default`
    lifecycle up to and including the `install` phase.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`插件将最终项目工件部署到在`MAVEN_HOME/conf/settings.xml`下定义的`local` Maven仓库中，默认位置是`USER_HOME/.m2/repository`。`install`插件的`install`目标绑定到Maven
    `default`生命周期的`install`阶段。当你输入`mvn clean install`时，Maven将执行`default`生命周期中的所有阶段，包括`install`阶段。'
- en: 'The following command shows how to execute the `install` goal of the `install`
    plugin by itself:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何单独执行`install`插件的`install`目标：
- en: '[PRE9]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'All the Maven projects inherit the `install` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `install` plugin.
    It associates the `install` goal with the `install` phase of the Maven `default`
    lifecycle:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Maven项目都从超级POM文件继承了`install`插件。如下配置所示，超级POM定义了`install`插件。它将`install`目标与Maven
    `default`生命周期的`install`阶段关联起来：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `install` goal of the `install` plugin does not have any configurations
    to be overridden at the project level.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`install`插件的`install`目标在项目级别没有需要覆盖的配置。'
- en: The deploy plugin
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`deploy`插件'
- en: The `deploy` plugin will deploy the final project artifacts into a remote Maven
    repository. The `deploy` goal of the `deploy` plugin is associated with the `deploy`
    phase of the `default` Maven lifecycle. To deploy an artifact via the `default`
    lifecycle, `mvn clean install` is not sufficient. It has to be `mvn clean deploy`.
    Any guesses why?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy`插件将最终项目工件部署到远程Maven仓库。`deploy`插件的`deploy`目标与`default` Maven生命周期的`deploy`阶段相关联。要通过`default`生命周期部署工件，仅执行`mvn
    clean install`是不够的。必须执行`mvn clean deploy`。有什么猜测吗？'
- en: 'The `deploy` phase of the `default` Maven lifecycle comes after the `install`
    phase. Executing `mvn clean deploy` will execute all the phases of the `default`
    Maven lifecycle up to and including the `deploy` phase, which also includes the
    `install` phase. The following command shows how to execute the `deploy` goal
    of the `deploy` plugin by itself:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`default` Maven生命周期的`deploy`阶段在`install`阶段之后。执行`mvn clean deploy`将执行`default`生命周期的所有阶段，包括`deploy`阶段，这也包括`install`阶段。以下命令展示了如何单独执行`deploy`插件的`deploy`目标：'
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'All the Maven projects inherit the `deploy` plugin from the super POM file.
    As shown in the following configuration, super POM defines the `deploy` plugin.
    It associates the `deploy` goal with the `deploy` phase of the Maven `default`
    lifecycle:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Maven项目都从超级POM文件继承了`deploy`插件。如下配置所示，超级POM定义了`deploy`插件。它将`deploy`目标与Maven
    `default`生命周期的`deploy`阶段关联起来：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Before executing either `mvn deploy:deploy` or `mvn deploy`, you need to set
    up the remote Maven repository details in your project POM file, under the `distributionManagement`
    section, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行`mvn deploy:deploy`或`mvn deploy`之前，你需要在项目POM文件中的`distributionManagement`部分设置远程Maven仓库的详细信息，如下所示：
- en: '[PRE13]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In this example, Maven connects to the remote repository via `scp`. **Secure
    Copy** (**scp**) defines a way of securely transferring files between two nodes
    in a computer network, which is built on top of popular SSH. To authenticate to
    the remote server, Maven provides two ways; one is based on a username and password,
    and the other one is based on SSH authentication keys. To configure username/password
    credentials against the Maven repository, we need to add the following `<server>`
    configuration element to `USER_HOME/.m2/settings.xml`. The value of the `id` element
    must carry the value of the remote repository hostname:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，Maven通过`scp`连接到远程仓库。**安全复制**（**scp**）定义了在计算机网络中两个节点之间安全传输文件的方式，它建立在流行的SSH之上。为了验证远程服务器，Maven提供了两种方式；一种基于用户名和密码，另一种基于SSH认证密钥。为了配置Maven仓库的用户名/密码凭据，我们需要在`USER_HOME/.m2/settings.xml`中添加以下`<server>`配置元素。`id`元素的值必须包含远程仓库主机名的值：
- en: '[PRE14]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the remote repository only supports SSH authentication keys, then we need
    to specify the location of the private key, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果远程仓库只支持SSH认证密钥，那么我们需要指定私钥的位置，如下所示：
- en: '[PRE15]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `deploy` goal of the `deploy` plugin does not have any configurations to
    be overridden at the project level.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`deploy`插件的`deploy`目标在项目级别没有需要覆盖的配置。'
- en: The surefire plugin
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`surefire`插件'
- en: The `surefire` plugin will run the unit tests associated with the project. The
    `test` goal of the `surefire` plugin is bound to the `test` phase of the `default`
    Maven lifecycle. When you type `mvn clean install`, Maven will execute all the
    phases in the `default` lifecycle up to and including the `install` phase, which
    also includes the `test` phase.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`surefire`插件将运行与项目关联的单元测试。`surefire`插件的`test`目标绑定到`default` Maven生命周期的`test`阶段。当你输入`mvn
    clean install`时，Maven将执行`default`生命周期中的所有阶段，包括`install`阶段，这也包括`test`阶段。'
- en: 'The following command shows how to execute the `test` goal of the `surefire`
    plugin:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令展示了如何执行`surefire`插件的`test`目标：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'All the Maven projects inherit the `surefire` plugin from the super POM file.
    As shown in the following configuration, the super POM defines the `surefire`
    plugin. It associates the `test` goal with the `test` phase of the Maven `default`
    lifecycle:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Maven 项目都从父 POM 文件继承 `surefire` 插件。如下所示配置，父 POM 定义了 `surefire` 插件。它将 `test`
    目标与 Maven `default` 生命周期的 `test` 阶段相关联：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Since the `surefire` plugin is defined in the super POM file, you do not need
    to add it explicitly to your application POM file. However, you need to add a
    dependency to `junit`, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `surefire` 插件定义在父 POM 文件中，因此您不需要显式将其添加到您的应用程序 POM 文件中。但是，您需要添加对 `junit` 的依赖，如下所示：
- en: '[PRE18]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `surefire` plugin is not just coupled to JUnit, it can be used with other
    testing frameworks as well. If you are using TestNG, then you need to add a dependency
    to `testng`, as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`surefire` 插件不仅与 JUnit 相关联，还可以与其他测试框架一起使用。如果您使用 TestNG，则需要添加对 `testng` 的依赖，如下所示：'
- en: '[PRE19]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `surefire` plugin introduces a concept called test providers. You can specify
    a test provider within the plugin itself; if not, it will be derived from the
    dependency JAR file. For example, if you want to use the `junit47` provider, then
    within the plugin configuration, you can specify it as shown here. The `surefire`
    plugin supports, by default, four test providers: `surefire-junit3`, `surefire-junit4`,
    `surefire-junit47`, and `surefire-testng`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`surefire` 插件引入了一个称为测试提供者的概念。您可以在插件内部指定一个测试提供者；如果没有指定，它将来自依赖 JAR 文件。例如，如果您想使用
    `junit47` 提供者，那么在插件配置中，您可以指定如下。`surefire` 插件默认支持四个测试提供者：`surefire-junit3`、`surefire-junit4`、`surefire-junit47`
    和 `surefire-testng`：'
- en: '[PRE20]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Since all the Maven projects inherit the `surefire` plugin from the super POM
    file, you do not need to override its configuration in the application POM file
    unless it's an absolute necessity. One of the reasons to override the parent configuration
    is to override the default test provider selection algorithm.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有 Maven 项目都从父 POM 文件继承 `surefire` 插件，因此除非绝对必要，否则您不需要在应用程序 POM 文件中覆盖其配置。覆盖父配置的原因之一是覆盖默认测试提供者选择算法。
- en: The site plugin
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 站点插件
- en: 'The `site` plugin generates static HTML web content for a Maven project, including
    the reports configured in the project. This defines eight goals, where each goal
    runs in one of the four phases defined in the Maven `site` lifecycle: `pre-site`,
    `site`, `post-site`, and `site-deploy`, which can be described as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`site` 插件为 Maven 项目生成静态 HTML 网页内容，包括在项目中配置的报告。这定义了八个目标，其中每个目标在 Maven `site`
    生命周期的四个阶段之一中运行：`pre-site`、`site`、`post-site` 和 `site-deploy`，可以描述如下：'
- en: '`site:site`: This goal generates a site for a single Maven project'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:site`: 此目标为单个 Maven 项目生成站点'
- en: '`site:deploy`: This goal deploys the generated site via a Wagon supported protocol
    to the site URL specified in the `<distributionManagement>` section of the POM
    file'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:deploy`: 此目标通过 Wagon 支持的协议将生成的站点部署到 POM 文件 `<distributionManagement>`
    部分中指定的站点 URL'
- en: '`site:run`: This goal opens the site with the Jetty web server'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:run`: 此目标使用 Jetty 网络服务器打开站点'
- en: '`site:stage`: This goal generates a site in a local staging or mock directory
    based on the site URL specified in the `<distributionManagement>` section of the
    POM file'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:stage`: 此目标根据 POM 文件 `<distributionManagement>` 部分中指定的站点 URL 在本地预发布或模拟目录中生成站点'
- en: '`site:stage-deploy`: This goal deploys the generated site to a staging or mock
    directory to the site URL specified in the `<distributionManagement>` section
    of the POM file'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:stage-deploy`: 此目标将生成的站点部署到 POM 文件 `<distributionManagement>` 部分中指定的站点
    URL 的预发布或模拟目录'
- en: '`site:attach-descriptor`: This goal adds the site descriptor (`site.xml`) to
    the list of files to be installed/deployed'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:attach-descriptor`: 此目标将站点描述符（`site.xml`）添加到要安装/部署的文件列表中'
- en: '`site:jar`: This goal bundles the site output into a JAR file so that it can
    be deployed to a repository'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:jar`: 此目标将站点输出捆绑到一个 JAR 文件中，以便可以部署到仓库'
- en: '`site:effective-site`: This goal calculates the effective site descriptor after
    inheritance and interpolation of `site.xml`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`site:effective-site`: 此目标在继承和插值 `site.xml` 之后计算有效站点描述符'
- en: 'All the Maven projects inherit the `site` plugin from the super POM file. As
    shown in the following configuration, the super POM defines the `site` plugin.
    It associates the `site` and `deploy` goals with the `site` and `site-deploy`
    phases of the Maven `default` lifecycle:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Maven 项目都从父 POM 文件继承 `site` 插件。如下所示配置，父 POM 定义了 `site` 插件。它将 `site` 和 `deploy`
    目标与 Maven `default` 生命周期的 `site` 和 `site-deploy` 阶段相关联：
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As defined in the previous configuration, when you run `mvn site` or `mvn site:site`,
    the resultant HTML web content will be created inside the `target/site` directory
    under the project home. The `site` goal of the `site` plugin only generates the
    HTML web content; to deploy it, you need to use the `deploy` goal. To deploy `site`
    to a remote application server, you need to specify the remote machine details
    under the `distributionManagement` section of your application POM file, as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如前配置所述，当你运行 `mvn site` 或 `mvn site:site` 时，生成的 HTML 网页内容将被创建在项目主目录下的 `target/site`
    目录中。`site` 插件的 `site` 目标仅生成 HTML 网页内容；要部署它，你需要使用 `deploy` 目标。要将 `site` 部署到远程应用程序服务器，你需要在应用程序
    POM 文件的 `distributionManagement` 部分下指定远程机器的详细信息，如下所示：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To configure credentials to connect to the remote computer, you need to add
    the following `<server>` configuration element under the `<servers>` parent element
    of `USER_HOME/.m2/settings.xml`:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置凭证以连接到远程计算机，你需要在 `USER_HOME/.m2/settings.xml` 的 `<servers>` 父元素下添加以下 `<server>`
    配置元素：
- en: '[PRE23]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The generated site or the web content can be deployed to the remote location
    by executing the `deploy` goal of the Maven `site` plugin, as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行 Maven `site` 插件的 `deploy` 目标，可以将生成的站点或网页内容部署到远程位置，如下所示：
- en: '[PRE24]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In most of the cases, you do not need to override the `site` plugin configuration.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你不需要覆盖 `site` 插件配置。
- en: The jar plugin
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`jar` 插件'
- en: The `jar` plugin creates a JAR file from your Maven project. The `jar` goal
    of the `jar` plugin is bound to the `package` phase of the Maven `default` lifecycle.
    When you type `mvn clean install`, Maven will execute all the phases in the `default`
    lifecycle up to and including the `install` phase, which also includes the `package`
    phase.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar` 插件可以从你的 Maven 项目中创建一个 JAR 文件。`jar` 插件的 `jar` 目标绑定到 Maven `default` 生命周期的
    `package` 阶段。当你输入 `mvn clean install` 时，Maven 将执行 `default` 生命周期中的所有阶段，包括 `install`
    阶段，这也包括 `package` 阶段。'
- en: 'The following command shows how to execute the `jar` goal of the `jar` plugin:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令显示了如何执行 `jar` 插件的 `jar` 目标：
- en: '[PRE25]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: All the Maven projects inherit the `jar` plugin from the super POM file. As
    shown in the following configuration, the super POM defines the `jar` plugin.
    It associates the `jar` goal with the `package` phase of the Maven `default` lifecycle.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 Maven 项目都从超级 POM 文件继承了 `jar` 插件。如下所示配置，超级 POM 定义了 `jar` 插件。它将 `jar` 目标与 Maven
    `default` 生命周期的 `package` 阶段关联起来。
- en: '[PRE26]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In most of the cases, you do not need to override the `jar` plugin configuration,
    except in a case where you need to create a self-executable JAR file.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你不需要覆盖 `jar` 插件配置，除非你需要创建一个可执行的 JAR 文件。
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Creating a self-executable JAR file with `maven-jar-plugin` can be found at
    [http://maven.apache.org/shared/maven-archiver/examples/classpath.html](http://maven.apache.org/shared/maven-archiver/examples/classpath.html).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `maven-jar-plugin` 创建一个可执行的 JAR 文件，可以在 [http://maven.apache.org/shared/maven-archiver/examples/classpath.html](http://maven.apache.org/shared/maven-archiver/examples/classpath.html)
    找到。
- en: The source plugin
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`source` 插件'
- en: 'The `source` plugin creates a JAR file with the project source code. It defines
    five goals: `aggregate`, `jar`, `test-jar`, `jar-no-fork`, and `test-jar-no-fork`.
    All these five goals of the `source` plugin run under the `package` phase of the
    `default` lifecycle.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`source` 插件创建一个包含项目源代码的 JAR 文件。它定义了五个目标：`aggregate`、`jar`、`test-jar`、`jar-no-fork`
    和 `test-jar-no-fork`。这五个 `source` 插件的目标都在 `default` 生命周期的 `package` 阶段下运行。'
- en: 'Unlike any of the plugins we discussed earlier, if you want to execute the
    `source` plugin with the Maven `default` lifecycle, it has to be defined in the
    project POM file, as shown here. The super POM file does not define the `source`
    plugin; it has to be defined within your Maven project itself:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们之前讨论的任何插件不同，如果你想使用 Maven `default` 生命周期执行 `source` 插件，它必须在项目 POM 文件中定义，如下所示。超级
    POM 文件没有定义 `source` 插件；它必须定义在你的 Maven 项目内部：
- en: '[PRE27]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: What is the difference between the `jar` plugin and the `source` plugin? Both
    create JAR files; however, the `jar` plugin creates a JAR file from the binary
    artifact, while the `source` plugin creates a JAR file from the source code. Small-scale
    open source projects use this approach to distribute the corresponding source
    code along with the binary artifacts.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`jar` 插件和 `source` 插件之间的区别是什么？两者都创建 JAR 文件；然而，`jar` 插件从二进制工件创建 JAR 文件，而 `source`
    插件从源代码创建 JAR 文件。小型开源项目使用这种方法来分发相应的源代码和二进制工件。'
- en: The resources plugin
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`resources` 插件'
- en: The `resources` plugin copies the resources associated with the main project
    as well as the tests to the project output directory. The `resources` goal of
    the `resources` plugin copies the main resources into the main output directory,
    and it runs under the `process-resources` phase of the Maven `default` lifecycle.
    The `testResources` goal copies all the resources associated with the tests to
    the test output directory, and it runs under the `process-test-resources` phase
    of the Maven `default` lifecycle. The `copyResources` goal can be configured to
    copy any resource to the project output directory, and this is not bound to any
    of the phases in the Maven `default` lifecycle.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`resources`插件将主项目关联的资源以及测试资源复制到项目输出目录。`resources`插件的`resources`目标将主资源复制到主输出目录，并在Maven
    `default`生命周期的`process-resources`阶段运行。`testResources`目标将所有与测试关联的资源复制到测试输出目录，并在Maven
    `default`生命周期的`process-test-resources`阶段运行。`copyResources`目标可以被配置为将任何资源复制到项目输出目录，并且这不受Maven
    `default`生命周期中任何阶段的限制。'
- en: All the Maven projects inherit the `resources` plugin from the super POM file.
    As shown in the following configuration, super POM defines the `resources` plugin.
    It associates `resources` and `testResources` goals with the `process-resources`
    and `process-test-resources` phases of the Maven `default` lifecycle. When you
    type `mvn clean install`, Maven will execute all the phases in the `default` lifecycle
    up to and including the `install` phase, which also includes the `process-resources`
    and `process-test-resources` phases.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 所有Maven项目都从父POM文件继承了`resources`插件。如下配置所示，父POM定义了`resources`插件。它将`resources`和`testResources`目标与Maven
    `default`生命周期的`process-resources`和`process-test-resources`阶段关联。当你输入`mvn clean
    install`时，Maven将执行`default`生命周期中的所有阶段，包括`install`阶段，这也包括`process-resources`和`process-test-resources`阶段。
- en: '[PRE28]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In most of the cases, you do not need to override the `resources` plugin configuration,
    unless you have a specific need to filter `resources`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，你不需要覆盖`resources`插件配置，除非你有特定的需求来过滤`resources`。
- en: Note
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: More details about resource filtering with `maven-resources-plugin` can be found
    at [http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html](http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用`maven-resources-plugin`进行资源过滤的更多详细信息，可以在[http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html](http://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html)找到。
- en: The release plugin
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布插件
- en: 'Releasing a project requires a lot of repetitive tasks. The objective of the
    Maven `release` plugin is to automate them. The `release` plugin defines the following
    eight goals, which are executed in two stages: preparing the release and performing
    the release:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 发布一个项目需要执行许多重复的任务。Maven `release`插件的目标是自动化这些任务。`release`插件定义了以下八个目标，这些目标在两个阶段执行：准备发布和执行发布：
- en: '`release:clean`: This goal cleans up after a release preparation'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:clean`：此目标在发布准备后进行清理'
- en: '`release:prepare`: This goal prepares for a release in **Software Configuration
    Management** (**SCM**)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:prepare`：此目标在**软件配置管理**（**SCM**）中准备发布'
- en: '`release:prepare-with-pom`: This goal prepares for a release in SCM, and it
    generates release POMs by fully resolving the dependencies'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:prepare-with-pom`：此目标在SCM中准备发布，并通过完全解析依赖关系生成发布POM'
- en: '`release:rollback`: This goal rolls back to a previous release'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:rollback`：此目标回滚到之前的发布'
- en: '`release:perform`: This goal performs a release from SCM'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:perform`：此目标执行SCM中的发布'
- en: '`release:stage`: This goal performs a release from SCM into a staging folder/repository'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:stage`：此目标将SCM中的发布执行到一个暂存文件夹/仓库中'
- en: '`release:branch`: This goal creates a branch of the current project with all
    the versions updated'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:branch`：此目标创建一个包含所有更新版本的当前项目分支'
- en: '`release:update-versions`: This goal updates the versions in POM(s)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`release:update-versions`：此目标更新POM中的版本'
- en: 'The preparation stage will complete the following tasks with the `release:prepare`
    goal:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 准备阶段将使用`release:prepare`目标完成以下任务：
- en: It verifies that all the changes in the source code are committed.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它验证源代码中的所有更改都已提交。
- en: It ensures that there are no SNAPSHOT dependencies. During the project development
    phase, we use SNAPSHOT dependencies; however, at the time of the release, all
    the dependencies should be changed to the latest released version of each dependency.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它确保没有SNAPSHOT依赖项。在项目开发阶段，我们使用SNAPSHOT依赖项；然而，在发布时，所有依赖项都应该更改为每个依赖项的最新发布版本。
- en: The version of the project POM file will be changed from SNAPSHOT to a concrete
    version number.
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 POM 文件版本将从快照版本更改为具体的版本号。
- en: The SCM information in the project POM file will be changed to include the final
    destination of the tag.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目 POM 文件中的 SCM 信息将更新，以包含标签的最终目的地。
- en: It execute all the tests against the modified POM files.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它对修改后的 POM 文件执行所有测试。
- en: It commits the modified POM files to SCM and tag the code with the version name.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将修改后的 POM 文件提交到源代码管理（SCM）并使用版本名称标记代码。
- en: It changes the version in POM files in the trunk to a SNAPSHOT version and commits
    the modified POM files to the trunk.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将主分支（trunk）中的 POM 文件版本更改为快照版本，并将修改后的 POM 文件提交到主分支。
- en: 'Finally, the release will be performed with the `release:perform` goal. This
    will check out the code from the `release` tag in the SCM, and run a set of predefined
    goals: `site` and `deploy-site`.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，将使用 `release:perform` 目标执行发布。这将从源代码管理（SCM）中的 `release` 标签检出代码，并运行一系列预定义的目标：`site`
    和 `deploy-site`。
- en: 'The `maven-release-plugin` is not defined in the super POM file; it should
    be explicitly defined in your application POM file. The `releaseProfiles` configuration
    element defines the profiles to be released, and the `goals` configuration element
    defines the plugin goals to be executed during `release:perform`, as follows:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`maven-release-plugin` 在父 POM 文件中未定义；它应该在您的应用程序 POM 文件中显式定义。`releaseProfiles`
    配置元素定义了要发布的配置文件，而 `goals` 配置元素定义了在 `release:perform` 期间要执行的插件目标，如下所示：'
- en: '[PRE29]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Plugin discovery and execution
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件发现和执行
- en: 'To associate a plugin with your Maven project, you have to either define it
    explicitly in your application POM file, or you should inherit it from a parent
    POM or the super POM file. Let''s take a look at the Maven `jar` plugin. The `jar`
    plugin is defined by the super POM file, and all the Maven projects inherit it.
    To define a plugin (which is not inherited from the POM hierarchy), or associate
    a plugin with your Maven project, you must add the plugin configuration under
    the `build/plugins/plugin` element of your application `pom.xml`. In this way,
    you can associate any number of plugins with your project, as shown here:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要将插件与您的 Maven 项目关联，您必须在您的应用程序 POM 文件中显式定义它，或者应该从父 POM 或超级 POM 文件中继承它。让我们看看 Maven
    的 `jar` 插件。`jar` 插件由超级 POM 文件定义，所有 Maven 项目都继承它。要定义一个插件（不是从 POM 层次继承的），或将插件与您的
    Maven 项目关联，您必须在应用程序 `pom.xml` 的 `build/plugins/plugin` 元素下添加插件配置。这样，您可以将任意数量的插件与项目关联，如下所示：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In the Maven execution environment, what matters is not just your application
    POM file but the effective POM file. The effective POM file is constructed by
    the project POM file, any parent POM files, and the super POM file.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Maven 执行环境中，重要的是不仅您的应用程序 POM 文件，还有有效 POM 文件。有效 POM 文件是由项目 POM 文件、任何父 POM 文件和超级
    POM 文件构建的。
- en: 'A Maven plugin can be executed in two ways:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 插件可以通过两种方式执行：
- en: Using a lifecycle
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用生命周期
- en: Directly invoking a plugin goal
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接调用插件目标
- en: If it is executed via a lifecycle, then there are plugin goals associated with
    different phases of the lifecycle. When each phase gets executed, all the plugin
    goals will also get executed only if the effective POM file of the project has
    defined the corresponding plugins under its plugins configuration. The same applies
    even when you try to invoke a plugin goal directly (for example, `mvn jar:jar`),
    the goal will be executed only if the corresponding plugin is associated with
    the project.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果通过生命周期执行，则与生命周期的不同阶段相关联的插件目标。当每个阶段执行时，所有插件目标也将执行，前提是项目的有效 POM 文件在其插件配置下定义了相应的插件。即使您尝试直接调用插件目标（例如，`mvn
    jar:jar`），目标也只有在相应的插件与项目相关联时才会执行。
- en: In either way, how does Maven find the plugin corresponding to the provided
    plugin goal?
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，Maven 如何找到与提供的插件目标对应的插件？
- en: 'Similar to any other dependency in Maven, a plugin is also uniquely identified
    by three coordinates: `groupId`, `artifactId`, and `version`. For plugins, however,
    you do not need to explicitly specify `groupId`. Maven assumes two `groupId` elements
    by default: `org.apache.maven.plugins` and `org.codehaus.mojo`. First, it will
    try to locate the plugin from `USER_HOME/.m2/repository/org/apache/maven/plugins`,
    and if that fails, it will locate it from `USER_HOME/.m2/repository/org/codehaus/mojo`.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Maven 中的任何其他依赖项一样，插件也通过三个坐标唯一标识：`groupId`、`artifactId` 和 `version`。然而，对于插件，你不需要显式指定
    `groupId`。Maven 默认假设两个 `groupId` 元素：`org.apache.maven.plugins` 和 `org.codehaus.mojo`。首先，它会尝试从
    `USER_HOME/.m2/repository/org/apache/maven/plugins` 中定位插件，如果失败，则从 `USER_HOME/.m2/repository/org/codehaus/mojo`
    中定位。
- en: In the previous sample plugin configuration, you may not find `groupId`. The
    `jar` plugin is available at `USER_HOME/.m2/repository/org/apache/maven/plugins/maven-jar-plugin`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的示例插件配置中，你可能找不到 `groupId`。`jar` 插件位于 `USER_HOME/.m2/repository/org/apache/maven/plugins/maven-jar-plugin`。
- en: 'Maven also lets you add your own plugin groups, and they can be included in
    the plugin discovery. You can do it by updating `USER_HOME/.m2/settings.xml` or
    `MAVEN_HOME/conf/settings.xml`, as shown in the following manner:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 还允许你添加自己的插件组，并且它们可以被包含在插件发现中。你可以通过更新 `USER_HOME/.m2/settings.xml` 或 `MAVEN_HOME/conf/settings.xml`
    来实现，如下所示：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Maven will always give priority to the previous configuration and then start
    looking for the well-known `groupId` elements: `org.apache.maven.plugins` and
    `org.codehaus.mojo`.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 将始终优先考虑之前的配置，然后开始寻找已知的 `groupId` 元素：`org.apache.maven.plugins` 和 `org.codehaus.mojo`。
- en: Let's take a look at some of the sample plugin configurations used in some popular
    open source projects.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些在流行的开源项目中使用的示例插件配置。
- en: Apache Felix provides a `bundle` plugin for Maven, which creates an OSGi bundle
    out of a Maven project. Another open source project, WSO2 Carbon, uses this `bundle`
    plugin in its development. You can find a sample POM file, which consumes the
    plugin at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml).
    This is a custom plugin, which does not fall into any of the `groupId` elements
    known to Maven by default. In that case, anyone who uses the plugin must qualify
    the plugin with `groupId`, or they must add the corresponding `groupId` element
    to the `pluginGroups` configuration element, as discussed earlier.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Felix 为 Maven 提供了一个 `bundle` 插件，该插件可以将 Maven 项目转换成 OSGi 打包。另一个开源项目 WSO2
    Carbon 在其开发中使用了这个 `bundle` 插件。你可以在 [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml)
    找到示例 POM 文件，该文件使用了插件。这是一个自定义插件，不属于 Maven 默认已知的任何 `groupId` 元素。在这种情况下，任何使用该插件的人都必须使用
    `groupId` 进行限定，或者他们必须添加前面讨论过的相应 `groupId` 元素到 `pluginGroups` 配置元素中。
- en: 'The following code shows the plugin configuration from the WSO2 Carbon project:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了 WSO2 Carbon 项目的插件配置：
- en: '[PRE32]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Plugin management
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件管理
- en: If you take a look at the previous configuration carefully, you do not see a
    version for the `bundle` plugin. This is where the `pluginManagement` element
    comes into play. With the `pluginManagement` configuration element, you can avoid
    repetitive usage of the plugin version. Once you define a plugin under `pluginManagement`,
    all the child POM files will inherit that configuration.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看之前的配置，你不会看到 `bundle` 插件的版本。这就是 `pluginManagement` 元素发挥作用的地方。通过 `pluginManagement`
    配置元素，你可以避免重复使用插件版本。一旦在 `pluginManagement` 下定义了一个插件，所有子 POM 文件都将继承该配置。
- en: 'The WSO2 Carbon project defines all the plugins used by its child projects
    under the `pluginManagement` section of [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml),
    and all the projects inherit it. A truncated part of the configuration is as follows:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: WSO2 Carbon 项目在其子项目的 `pluginManagement` 部分 [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml)
    中定义了所有使用的插件，所有项目都继承它。配置的一部分如下：
- en: '[PRE33]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Note
  id: totrans-156
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll discuss plugin management in detail in [Chapter 7](ch07.html "Chapter 7. Best
    Practices"), *Best Practices*.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [第 7 章](ch07.html "第 7 章。最佳实践") *最佳实践* 中详细讨论插件管理。
- en: Plugin repositories
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件仓库
- en: 'Maven downloads plugins on demand when it cannot find a plugin in its local
    repository. By default, Maven looks for any plugin that is not available locally
    in the Maven plugin repository defined by the super POM file (this is the default
    behavior; you can also define plugin repositories in your application POM file).
    The following code snippets shows how to define plugin repositories:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当Maven在其本地仓库中找不到插件时，会按需下载插件。默认情况下，Maven会在由超级POM文件定义的Maven插件仓库中查找任何本地不可用的插件（这是默认行为；你也可以在你的应用程序POM文件中定义插件仓库）。以下代码片段展示了如何定义插件仓库：
- en: '[PRE34]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: If you develop a custom plugin, just like the Apache Felix `bundle` plugin,
    you must make it available for the rest via a plugin repository, and any other
    consumer of that plugin, such as the WSO2 Carbon project, must define the corresponding
    plugin repository in its POM file or in a parent POM file.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你开发了一个自定义插件，就像Apache Felix的`bundle`插件一样，你必须通过插件仓库使其对其他人可用，并且任何其他该插件的消费者，例如WSO2
    Carbon项目，必须在它的POM文件或父POM文件中定义相应的插件仓库。
- en: Note
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The WSO2 Carbon project defines two plugin repositories in its parent POM file
    at [https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: WSO2 Carbon项目在其父POM文件中定义了两个插件仓库，位于[https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/parent/pom.xml)。
- en: The Apache Felix `bundle` plugin is available at [http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/](http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Felix `bundle`插件可在[http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/](http://dist.wso2.org/maven2/org/apache/felix/maven-bundle-plugin/)找到。
- en: 'The following configuration is a part of the WSO2 Carbon project `parent/pom.xml`,
    which defines the two plugin repositories:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 以下配置是WSO2 Carbon项目`parent/pom.xml`的一部分，它定义了两个插件仓库：
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Plugin as an extension
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件作为扩展
- en: 'If you look at the definition of the Apache Felix `bundle` plugin, you might
    have noticed the `extensions` configuration element, which is set to `true`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看Apache Felix `bundle`插件的定义，你可能已经注意到了`extensions`配置元素，它被设置为`true`：
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As we discussed earlier, the goal of the `bundle` plugin is to build an OSGi
    bundle from a Maven project. In other words, the Apache Felix `bundle` plugin
    introduces a new packaging type with an existing file extension, `.jar`. If you
    look at the POM file of the WSO2 Carbon project, which consumes the `bundle` plugin,
    you can see the packaging of the project is set to `bundle` ([https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml)),
    as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，`bundle`插件的目标是从Maven项目构建一个OSGi包。换句话说，Apache Felix `bundle`插件引入了一个新的打包类型，具有现有的文件扩展名`.jar`。如果你查看消费`bundle`插件的WSO2
    Carbon项目的POM文件，你可以看到项目的打包被设置为`bundle`（[https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml](https://svn.wso2.org/repos/wso2/carbon/platform/branches/turing/service-stubs/org.wso2.carbon.qpid.stub/4.2.0/pom.xml)），如下所示：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If you are associating a plugin with your project, which introduces a new packaging
    type or a customized lifecycle, then you must set the value of the `extensions`
    configuration element to `true`. Once this is done, the Maven engine will go further
    and will look for the `components.xml` file inside `META-INF/plexus` of the corresponding
    `jar` plugin.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将一个插件与你的项目关联，该插件引入了新的打包类型或自定义的生命周期，那么你必须将`extensions`配置元素的值设置为`true`。一旦这样做，Maven引擎将进一步查找对应`jar`插件的`META-INF/plexus`目录中的`components.xml`文件。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on Maven plugins. Maven only provides a build framework
    while the Maven plugins perform the actual tasks. Maven has a large, rich set
    of plugins, and the chances that you have to write your own custom plugin are
    very slim. This chapter covered some of the most commonly used Maven plugins,
    and later explained how plugins are discovered and executed. If you would like
    to know about custom plugin development, refer to the book, *Mastering Apache
    Maven 3* by *Packt Publishing*.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于Maven插件。Maven只提供了一个构建框架，而Maven插件执行实际的任务。Maven有一套庞大且丰富的插件，你需要编写自己的自定义插件的可能性非常小。本章涵盖了最常用的Maven插件，并稍后解释了插件是如何被发现和执行的。如果你想了解自定义插件开发，请参阅由Packt
    Publishing出版的《Mastering Apache Maven 3》一书。
- en: In the next chapter, we will focus on Maven build lifecycle.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将重点关注Maven构建生命周期。
