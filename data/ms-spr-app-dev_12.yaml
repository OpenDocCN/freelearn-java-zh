- en: Chapter 12. Spring with Web Service Integration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。Spring与Web服务集成
- en: In this chapter, we will see how Spring provides support to the `JAX_WS` web
    service and also see how to create a web service in **Spring Web Service** (**Spring-WS**)
    framework. We shall also see how the Spring Web Service can be consumed by demonstrating
    a client application, along with the annotations supported by Spring for Web services.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到Spring如何支持`JAX_WS`网络服务，以及如何在**Spring Web Service** (**Spring-WS**)框架中创建网络服务。我们还将看到Spring
    Web Service如何被消费，演示一个客户端应用程序，以及Spring支持的Web服务的注解。
- en: Spring with JAX-WS
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring与JAX-WS
- en: In this section, let's create a simple JAX-WS web service. We shall also see
    how we can integrate the JAX-WS Web Service with Spring. JAX-WS is the latest
    version of JAX-RPC, which used remote method invocation protocol to access Web
    services.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们创建一个简单的JAX-WS网络服务。我们还将看到如何将JAX-WS网络服务与Spring集成。JAX-WS是JAX-RPC的最新版本，它使用远程方法调用协议来访问Web服务。
- en: All we need to do here is to expose Spring's service layer as `JAX_WS` service
    provider layer. This can be done using the `@webservice` annotation and involves
    just a few steps. Let us jot down the steps involved in it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里需要做的就是将Spring的服务层公开为`JAX_WS`服务提供程序层。这可以使用`@webservice`注解来完成，只需要几个步骤。让我们记下其中涉及的步骤。
- en: Create a `PACKTJAXWS-Spring` simple Maven web project or a Dynamic web project
    in Eclipse.
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Eclipse中创建一个`PACKTJAXWS-Spring`简单的Maven web项目或动态web项目。
- en: 'Now, we need to configure JAX-WS servlet in a `web.xml` file:'
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要在`web.xml`文件中配置JAX-WS servlet：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Create a `Context.xml` application file and add the web service information
    to it. We will be providing the web service name and the service provider class
    information here.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个`Context.xml`应用文件，并在其中添加网络服务信息。我们将在这里提供网络服务名称和服务提供者类信息。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Next, we need to make all the jars available in a classpath. Since it is a maven
    project, we only need to update the `pom.xml` file.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要使所有的jar文件在类路径中可用。由于这是一个Maven项目，我们只需要更新`pom.xml`文件。
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We shall now create a web service class with the `@WebService` annotation. We
    have also defined the kind of binding we might need, such as `SOAPBinding` and
    `Style`. The `@Webmethod` annotation specifies the method which provides the service.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个带有`@WebService`注解的网络服务类。我们还定义了可能需要的绑定类型，比如`SOAPBinding`和`Style`。`@Webmethod`注解指定了提供服务的方法。
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We should add the Maven JAR files to the build path of our eclipse project.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该将Maven JAR文件添加到Eclipse项目的构建路径中。
- en: 'Run the application: `http://localhost:8080/PACKTJAXWS-Spring/jaxws-spring`.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用程序：`http://localhost:8080/PACKTJAXWS-Spring/jaxws-spring`。
- en: You should be able to see the WSDL URL and on clicking on link, the WSDL file
    should open up.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够看到WSDL URL，并在单击链接时，WSDL文件应该打开。
- en: Spring Web Services with JAXB marshalling for request
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JAXB编组的Spring Web服务请求
- en: In this section, let's look at developing a simple web service using the Spring
    Web Service framework. We need JAXB for marshalling and unmarshalling the XML
    request. The Spring Web Service supports contract first web service. We need to
    design a XSD/WSDL first and then launch the web service.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看如何使用Spring Web Service框架开发一个简单的网络服务。我们需要JAXB来对XML请求进行编组和解组。Spring
    Web Service支持契约优先的网络服务。我们需要首先设计XSD/WSDL，然后启动网络服务。
- en: We are creating an author web service which will give us a list of authors.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个作者网络服务，它将给我们提供作者列表。
- en: '**Configuring the web.xml file**: Let us first do a web service configuration
    in a `web.xml` file. We need to configure the Spring Web Service servlet. The
    Message Dispatcher servlet needs to be defined and the URL patterns it will handle.
    The `contextConfigLocation` is specified instead of allowing the default (`/WEB-INF/spring-ws-servlet.xml`)
    because this location makes the configuration easier to share with the unit test.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置web.xml文件**：让我们首先在`web.xml`文件中进行网络服务配置。我们需要配置Spring Web Service servlet。需要定义消息分发servlet和它将处理的URL模式。指定`contextConfigLocation`而不是允许默认值(`/WEB-INF/spring-ws-servlet.xml`)，因为这个位置使得配置更容易与单元测试共享。'
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Configuring the Spring Context file** (`/src/main/resources/spring-ws-context.xml`):
    The `EndPoint` class needs to be configured in the `spring-ws-context.xml`. The
    class is annotated with `@EndPointAnnotation`. The `AuthorEndpoint` is defined
    as a bean and will automatically be registered with Spring Web Services, since
    the class is identified as an endpoint by the `@Endpoint` annotation. This configuration
    uses the `author.xsd`, which is a xml schema descriptor file that was used to
    generate the JAXB beans to generate the WSDL. The location URI matches the URL
    pattern specified in the `web.xml`.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置Spring上下文文件**(`/src/main/resources/spring-ws-context.xml`)：`EndPoint`类需要在`spring-ws-context.xml`中进行配置。该类带有`@EndPointAnnotation`注解。`AuthorEndpoint`被定义为一个bean，并且将自动注册到Spring
    Web Services中，因为该类被`@Endpoint`注解标识为端点。此配置使用了`author.xsd`，这是一个用于生成JAXB bean以生成WSDL的xml模式描述符文件。位置URI与`web.xml`中指定的URL模式匹配。'
- en: The JAXB marshaller/unmarshaller is configured using Spring OXM and also set
    on the `MarshallingMethodEndpointAdapter` bean.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring OXM配置JAXB编组器/解组器，并设置在`MarshallingMethodEndpointAdapter` bean上。
- en: '[PRE5]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Defining the XSD Author.xsd**: A very simple XSD defines an element to indicate
    an incoming request to get all authors (name element isn''t used) and an author
    response element that contains a list of author elements.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义XSD Author.xsd**：一个非常简单的XSD定义了一个元素，用于指示获取所有作者的传入请求（name元素未使用），以及包含作者元素列表的作者响应元素。'
- en: '**author.xsd**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**author.xsd**'
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**Marshalling the AuthorService**: Let us create an Interface `MarshallingAuthorService`
    for getting authors using the following JAXB generated beans:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**编组AuthorService**：让我们创建一个接口`MarshallingAuthorService`，用于使用以下JAXB生成的bean获取作者：'
- en: 'For the `get-authors-request` element: `GetAuthorsRequst`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`get-authors-request`元素：`GetAuthorsRequst`
- en: 'For the `author-response` element: `AuthorResponse`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`author-response`元素：`AuthorResponse`
- en: 'It also has constants for the namespace (matches XSD) and a request constant:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有与命名空间（与XSD匹配）和请求常量相匹配的常量：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**Creating an Endpoint class**: Let us create an endpoint class marked with
    the `@Endpoint` annotation. This class will implement the method of `MarshallingAuthorService`.
    The `getAuthors` method is indicated to handle a specific namespace and an incoming
    request element. The endpoint just prepares a static response, but this could
    very easily have a DAO injected into it and have the information retrieved from
    a database, which is then mapped into the JAXB beans. The AuthorResponse is created
    using the JAXB Fluent API which is less verbose than the standard JAXB API.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建端点类**：让我们创建一个标有`@Endpoint`注解的端点类。这个类将实现`MarshallingAuthorService`的方法。`getAuthors`方法被指示处理特定的命名空间和传入的请求元素。端点只是准备一个静态响应，但这很容易可以注入一个DAO，并从数据库中检索信息，然后映射到JAXB
    beans中。AuthorResponse是使用JAXB Fluent API创建的，比标准的JAXB API更简洁。'
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Adding dependency information**: Also ensure that you add the following dependency
    in your maven `pom.xml` file:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**添加依赖信息**：还要确保在maven的`pom.xml`文件中添加以下依赖项：'
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Build and deploy the application**: We need to do this on the tomcat to see
    the WSDL URL. Thus, we have completed all the steps for providing a web service.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构建和部署应用程序**：我们需要在tomcat上进行这个操作以查看WSDL URL。因此，我们已经完成了提供web服务的所有步骤。'
- en: Writing a client application for Spring Web Services using JAXB unmarshalling
    for request
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JAXB unmarshalling为Spring Web Services编写客户端应用程序
- en: Let us write a simple client application for the author service. The `org.springbyexample.ws.service`
    package is scanned for beans and will find the `AuthorServiceClient`, and inject
    the web service template into it. The JAXB marshaller/umarshaller is defined and
    set on this template.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为作者服务编写一个简单的客户端应用程序。`org.springbyexample.ws.service`包被扫描以查找`AuthorServiceClient`，并将web服务模板注入其中。JAXB
    marshaller/umarshaller被定义并设置在这个模板上。
- en: The import of the `jetty-context.xml` isn't relevant to creating a client, but
    it creates an embedded Jetty instance that loads the `spring-ws-context.xml` and
    its services. The client in the unit test is then able to run in isolation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`jetty-context.xml`的导入对于创建客户端并不重要，但它创建了一个嵌入式的Jetty实例，加载了`spring-ws-context.xml`和它的服务。单元测试中的客户端能够独立运行。'
- en: '**AuthorServiceClientTest.xml**:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**AuthorServiceClientTest.xml**：'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**AuthorServiceClient**:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**AuthorServiceClient**：'
- en: 'At this point, Spring Web Services can handle almost everything. The template
    just needs to be called and it will return the `AuthorResponse` from the service
    endpoint. The client can be used like this: `AuthorResponse response = client.getAuthors(new
    GetAuthorsRequest());`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，Spring Web Services几乎可以处理所有事情。只需要调用模板，它将从服务端点返回`AuthorResponse`。客户端可以像这样使用：`AuthorResponse
    response = client.getAuthors(new GetAuthorsRequest());`
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Summary
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have seen how we can integrate `JAX_WS` with Spring Web
    Service. We have also demonstrated how to create Spring Web Services and an endpoint
    class, as well as how to access the web service by accessing the WSDL URL.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了如何将`JAX_WS`与Spring Web Service集成。我们还演示了如何创建Spring Web Services和端点类，以及如何通过访问WSDL
    URL来访问web服务。
