- en: Chapter 9. Spring Security with Spring Social
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。Spring Security与Spring Social
- en: 'In this chapter we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Spring Security with Spring Social to access Facebook
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Spring Social访问Facebook
- en: Spring Security with Spring Social to access Twitter
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与Spring Social访问Twitter
- en: Spring Security with multiple authentication providers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security与多个身份验证提供程序
- en: Spring Security with OAuth
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth的Spring Security
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Spring Social is a famous API. Most web applications want to give users an option
    to post to social networking sites such as Facebook and Twitter from their application.
    Spring Social is built to meet this requirement.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social是一个著名的API。大多数Web应用程序希望为用户提供从其应用程序到社交网络站点（如Facebook和Twitter）的发布选项。Spring
    Social是为满足此要求而构建的。
- en: In this chapter, we shall integrate Spring Security with Spring Social to connect
    to Facebook and Twitter accounts.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将集成Spring Security与Spring Social以连接到Facebook和Twitter帐户。
- en: Spring Security with Spring Social to access Facebook
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security与Spring Social访问Facebook
- en: For authentication, Spring Social uses the `spring-security` API. We need to
    add the spring-social dependency in the `pom.xml` along with with the `spring-core`
    and `spring-security` packages. In this section we shall demonstrate how Spring
    Social can bridge our java application to Facebook. We can log in to the Facebook
    application in our java application.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social在身份验证方面使用`spring-security` API。我们需要在`pom.xml`中添加spring-social依赖项，以及`spring-core`和`spring-security`包。在本节中，我们将演示Spring
    Social如何将我们的Java应用程序与Facebook连接起来。我们可以在我们的Java应用程序中登录到Facebook应用程序。
- en: Once the connection is established to the social networking site, the user can
    post and retrieve messages from it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦与社交网络站点建立连接，用户就可以在其中发布和检索消息。
- en: We have used the same hibernate horror movie application. I have used derby
    database and have deployed the application on the glassfish server. Spring Social
    internally uses Spring's `jdbctemplate` class to retrieve database information.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了相同的hibernate恐怖电影应用程序。我使用了derby数据库，并在glassfish服务器上部署了应用程序。Spring Social内部使用Spring的`jdbctemplate`类来检索数据库信息。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need to perform the following tasks to access Facebook using Spring
    Security with Spring Social:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Spring Security与Spring Social访问Facebook，您需要执行以下任务：
- en: Register as a Facebook developer and create an app. You will get an appID and
    secret key which can be used for integration
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册为Facebook开发人员并创建应用程序。您将获得可用于集成的appID和秘钥
- en: Add request mapping to the controller to handle the Facebook created `jsp` pages
    to post messages onto Facebook
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将请求映射添加到控制器以处理Facebook创建的`jsp`页面以将消息发布到Facebook
- en: Create the `UserConnection` table
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建`UserConnection`表
- en: Add Jackson dependency into your `pom.xml` file. The demo project will be available
    for download with this book
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Jackson依赖项添加到您的`pom.xml`文件中。演示项目将随本书提供下载
- en: 'Add the Spring Social dependencies such as:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Spring Social依赖项，如：
- en: '`Spring-social-core`'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-core`'
- en: '`Spring-social-web`'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-web`'
- en: '`Spring-social-facebook`'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-facebook`'
- en: '`Spring-social-twitter`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-twitter`'
- en: '`Spring-social-linkedin`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-linkedin`'
- en: '`Spring-social-github`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Spring-social-github`'
- en: Create the `.jsp` pages for the user to sign in and sign out
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为用户登录和注销创建`.jsp`页面
- en: Provide the database connection properties in the `spring.properties` file
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`spring.properties`文件中提供数据库连接属性
- en: Provide Facebook's apps- secret key and appID in the `jdbc.properties` file
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`jdbc.properties`文件中提供Facebook的应用程序秘钥和appID
- en: How to do it...
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps for implementing an application that allow users
    to sign in to the Facebook app with Spring Social and Spring Security:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实现允许用户使用Spring Social和Spring Security登录到Facebook应用程序的应用程序的步骤：
- en: Create a controller named `MyController` to handle the Facebook pages.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建名为`MyController`的控制器来处理Facebook页面。
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Provide the connection factories in the `Spring-social.xml` file:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Spring-social.xml`文件中提供连接工厂：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `ConnectionFactory` locator creates the Facebook bean. Here you can add
    other social networking providers such as Digg and Flickr. `UsersConnectionRepository`
    uses the JDBC template to execute queries for connecting with various social networking
    providers.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConnectionFactory`定位器创建了Facebook bean。在这里，您可以添加其他社交网络提供商，如Digg和Flickr。`UsersConnectionRepository`使用JDBC模板执行与各种社交网络提供商的连接查询。'
- en: 'Use the connection factory in the `spring-social.xml` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`spring-social.xml`文件中使用连接工厂：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Configure the `ConnectController` class in the `spring-social` file. The `ConnectController`
    class plays an important role in connecting to the provider. It is mapped with
    the (`/connect`) URL. To make best use of the `ConnectController` class, create
    separate folders for Facebook and Twitter.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`spring-social`文件中配置`ConnectController`类。`ConnectController`类在连接到提供程序时起着重要作用。它与(`/connect`)
    URL映射。为了充分利用`ConnectController`类，为Facebook和Twitter创建单独的文件夹。
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Run a SQL command in your derby database.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的derby数据库中运行SQL命令。
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Spring Social uses the `UserConnection` table to store the networking site provider
    information along with the user information. Spring Social uses Spring Security
    along with the appID and secret key to authenticate the user.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social使用`UserConnection`表存储网络站点提供程序信息以及用户信息。Spring Social使用Spring Security以及appID和秘钥对用户进行身份验证。
- en: Access the URL:`http://localhost:8080/horrormovie/list`
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/horrormovie/list`
- en: You will be redirected to `http://localhost:8080/horrormovie/login;jsessionid=581813e14c1752d2260521830d3d`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被重定向到`http://localhost:8080/horrormovie/login;jsessionid=581813e14c1752d2260521830d3d`。
- en: 'Log in with the username and password. You will be connected to the `horromovie`
    database, as shown in the following screenshot:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 使用用户名和密码登录。您将连接到`horromovie`数据库，如下截图所示：
- en: '![How it works...](img/7525OS_09_01.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_01.jpg)'
- en: 'Click on the **Connect to Facebook profile** link, and the user will be redirected
    to the following web page:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 单击**连接到Facebook个人资料**链接，用户将被重定向到以下网页：
- en: '![How it works...](img/7525OS_09_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_02.jpg)'
- en: 'The page displays the following fields:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 该页面显示以下字段：
- en: Profile link
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料链接
- en: Gender
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 性别
- en: Profile info
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人资料信息
- en: Textbox to post messages to Facebook
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布消息到Facebook的文本框
- en: You can post messages from this application and then open the Facebook profile
    to see the posted messages. The message will be posted in the name of the Facebook
    app that you have created.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从此应用程序发布消息，然后打开Facebook个人资料以查看已发布的消息。该消息将以您创建的Facebook应用程序的名称发布。
- en: See also
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Spring Social to access Twitter* recipe
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Social访问Twitter的Spring安全*示例'
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用多个身份验证提供程序的Spring安全*示例'
- en: The *Spring Security with OAuth* recipe
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用OAuth进行Spring安全*示例'
- en: Spring Security with Spring Social to access Twitter
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Spring Social访问Twitter的Spring安全
- en: We just now connected with Facebook and were able to post messages. In this
    section, we will see how to connect to Twitter. Let's use the same application
    that we used for Facebook with derby database and hibernate the authentication
    service.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚连接了Facebook并能够发布消息。在本节中，我们将看到如何连接Twitter。让我们使用与Facebook相同的应用程序，该应用程序使用derby数据库和hibernate身份验证服务。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need to perform the following tasks to access Twitter with Spring
    Social using Spring Security:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行以下任务，以使用Spring Social和Spring Security访问Twitter：
- en: 'Create a Twitter app: [https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个Twitter应用程序：[https://dev.twitter.com/apps/new](https://dev.twitter.com/apps/new)
- en: Add the consumer ID and key to the `.properties` file.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将消费者ID和密钥添加到`.properties`文件中。
- en: Update the controller to handle Twitter requests
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新控制器以处理Twitter请求
- en: Create JSP files to access and display Twitter objects
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建JSP文件以访问和显示Twitter对象
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following is the step for implementing Twitter sign-in options in the application
    demonstrated in the previous section:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在上一节演示的应用程序中实现Twitter登录选项的步骤：
- en: Update the controller named `HorrorMovie Controller` to handle Twitter requests.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新名为`HorrorMovie Controller`的控制器以处理Twitter请求。
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'Access the URL: `http://localhost:8080/horrormovie/list.`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/horrormovie/list.`
- en: Spring Social will check if the user is already connected to Twitter. If the
    user is already connected, the user is redirected to Twitter page and will be
    asked to log in. Spring Social uses the Twitter consumer ID and key with Spring
    Security to log in to Twitter account from the application. This is the basis
    on which most of the mobile phone applications allow us to log in to Twitter and
    Facebook.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Social将检查用户是否已连接到Twitter。如果用户已经连接，用户将被重定向到Twitter页面并被要求登录。Spring Social使用Twitter消费者ID和密钥与Spring
    Security一起从应用程序登录到Twitter帐户。这是大多数手机应用程序允许我们登录到Twitter和Facebook的基础。
- en: See also
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Spring Social to access Facebook* recipe
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Social访问Facebook的Spring安全*示例'
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用多个身份验证提供程序的Spring安全*示例'
- en: The *Spring Security with OAuth* recipe
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用OAuth进行Spring安全*示例'
- en: Spring Security with multiple authentication providers
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 具有多个身份验证提供程序的Spring安全
- en: In this section, we will demonstrate multiple authentications with Spring Social
    and database. In our previous recipe, we used the `ConnectController` class which
    handled the Facebook and Twitter connections. Access to Facebook and Twitter was
    restricted to the Spring Security URL, that is, only `ROLE_EDITOR` had access
    to Facebook and Twitter. The user had to be authenticated and authorized to use
    Facebook and Twitter. In this example, we shall allow the users to log in to the
    application with Facebook and Twitter or normal user ID.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示使用Spring Social和数据库进行多重身份验证。在我们之前的示例中，我们使用了`ConnectController`类来处理Facebook和Twitter的连接。对Facebook和Twitter的访问受限于Spring
    Security URL，即只有`ROLE_EDITOR`可以访问Facebook和Twitter。用户必须经过身份验证和授权才能使用Facebook和Twitter。在本例中，我们将允许用户使用Facebook和Twitter或普通用户ID登录应用程序。
- en: '*Craig Walls* is a lead on Spring Social API and has provided various samples
    on gitHub, which uses Spring Social with Spring Security. This is one of the samples
    provided by *Craig Walls*.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '*Craig Walls*是Spring Social API的负责人，并在gitHub上提供了各种示例，其中使用了Spring Social和Spring
    Security。这是*Craig Walls*提供的示例之一。'
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will need to perform the following tasks:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要执行以下任务：
- en: Create a common page to sign in as a user or sign up using Twitter, Facebook,
    or linked-in profiles.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个通用页面，以用户身份登录或使用Twitter、Facebook或linked-in配置文件进行注册。
- en: Spring Social API has a `ConnectController` class, which automatically looks
    out for a connect folder. Create a connect folder, add `${provider}Connect.jsp`
    and `${provider} Connected.jsp. $provider{twitter,facebook,linked-in,github}`
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Social API具有`ConnectController`类，该类会自动查找连接文件夹。创建一个连接文件夹，添加`${provider}Connect.jsp`和`${provider}
    Connected.jsp。$provider{twitter,facebook,linked-in,github}`
- en: Spring Social internally uses `spring-security`. It has its own user details
    class – `SocialUserDetailsService`. Create a class that implements `SocialUserDetailsService`
    and override the method.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Spring Social在内部使用`spring-security`。它有自己的用户详细信息类——`SocialUserDetailsService`。创建一个实现`SocialUserDetailsService`并覆盖该方法的类。
- en: 'Configure the social authentication provider in the `social-security.xml` file.
    The `SocialAuthenticationProvider` class accepts two inputs such as:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`social-security.xml`文件中配置社交认证提供程序。`SocialAuthenticationProvider`类接受两个输入，例如：
- en: '`usersConnectionRepository`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`usersConnectionRepository`'
- en: '`socialuserDetailsService` – the class that implements `SocialUserDetailsService`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`socialuserDetailsService`——实现`SocialUserDetailsService`的类'
- en: 'Configure the multiple authentication providers in `security-xml`:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`security-xml`中配置多个身份验证提供程序：
- en: '`SocialAuthenticationProvider`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SocialAuthenticationProvider`'
- en: '`UserDetailsService`, the jdbc interface giving user details service'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserDetailsService`，提供用户详细信息服务的jdbc接口'
- en: Configuring the filter, `SocialAuthenticationFilter`, for handling the provider
    sign-in flow within the Spring Security filter chain. It should be added into
    the chain at or before the `PRE_AUTH_FILTER` location.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置`SocialAuthenticationFilter`过滤器，以处理Spring Security过滤器链中的提供程序登录流程。它应该被添加到`PRE_AUTH_FILTER`位置或之前的位置。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to implement authentication with multiple providers
    using Spring Security:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用Spring Security实现多个提供程序进行身份验证的步骤：
- en: 'Use the `SocialUsersDetailServiceImpl` class to implement the `SocialUserDetailsService`
    class:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`SocialUsersDetailServiceImpl`类来实现`SocialUserDetailsService`类：
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Configure the class, `SocialAuthenticationProvider` in the `Security.xml` file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Security.xml`文件中配置`SocialAuthenticationProvider`类：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Configure multiple authentication providers in the `Security.xml` file:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Security.xml`文件中配置多个身份验证提供程序：
- en: '[PRE8]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Configure the `SocialAuthenticationFilter` class in the `Social-security.xml`
    file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Social-security.xml`文件中配置`SocialAuthenticationFilter`类：
- en: '[PRE9]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Configure the `SocialAuthenticationFilter` class with Security in the `security.xml`
    file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`security.xml`文件中配置`SocialAuthenticationFilter`类与安全：
- en: '[PRE10]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this implementation, the user can log in to the application either by using
    some credentials in the database or by using the social networking site ID and
    password. The `SocialAuthenticationProvider` class along with `SocialAuthenticationFilter`
    handles the authentication to social networking sites and `UserDetailsService`
    manages the database authentication. These two classes are configured in the `security.xml`
    file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个实现中，用户可以通过数据库中的一些凭据或使用社交网络站点的ID和密码登录应用程序。`SocialAuthenticationProvider`类与`SocialAuthenticationFilter`处理对社交网络站点的身份验证，`UserDetailsService`管理数据库身份验证。这两个类在`security.xml`文件中配置。
- en: 'The following is the workflow of the implementation. Access the URL: `http://localhost:8080/spring-social-showcase-sec-xml/signin`.
    You will be directed to the following web page:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是实施的工作流程。访问URL：`http://localhost:8080/spring-social-showcase-sec-xml/signin`。您将被引导到以下网页：
- en: '![How it works...](img/7525OS_09_03.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_03.jpg)'
- en: See also
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Spring Social to access Facebook* recipe
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security与Spring Social访问Facebook*配方'
- en: The *Spring Security with Spring Social to access Twitter* recipe
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security与Spring Social访问Twitter*配方'
- en: The *Spring Security with OAuth* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Security与OAuth*配方'
- en: Spring Security with OAuth
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Security与OAuth
- en: OAuth authentication has been used widely by many applications. OAuth is a protocol
    through which applications can share the data in a secured manner. For example,
    consider a simple scenario in which one photo-sharing application allows the user
    to upload photos and the second application integrates with all photo-storing
    applications such as Flickr, Dropbox, and similar sites. When a second application
    wants to access the first application to print the photos that are uploaded, it
    uses the OAuth authentication to get confirmation from the user to access the
    photos. Ideally, it does exchange some security tokens between the applications,
    that is, the private key of the consumer and the public key of the server should
    match for the authorization to be successful.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth身份验证已被许多应用程序广泛使用。OAuth是一种协议，通过该协议，应用程序可以以安全的方式共享数据。例如，考虑一个简单的场景，其中一个照片分享应用程序允许用户上传照片，第二个应用程序集成了所有照片存储应用程序，如Flickr、Dropbox和类似的网站。当第二个应用程序想要访问第一个应用程序以打印已上传的照片时，它使用OAuth身份验证来从用户那里获得确认以访问照片。理想情况下，它在应用程序之间交换一些安全令牌，即，消费者的私钥和服务器的公钥应匹配以使授权成功。
- en: The first application acts likes a server and the second application acts like
    a consumer who wants to access certain authenticated data.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个应用程序充当服务器，第二个应用程序充当想要访问某些经过身份验证的数据的消费者。
- en: 'Some of the parameters that are exchanged between the client and server applications
    are as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端和服务器应用程序之间交换的一些参数如下：
- en: '`Oauth_consumerKey`: We can generate an OAuth request using the application'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_consumerKey`：我们可以使用应用程序生成OAuth请求'
- en: '`Oauth_token`: This token gets encoded and is passed to the URL'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_token`：此令牌被编码并传递到URL'
- en: '`Oauth_timestamp`: This parameter is added to each request with nonce to prevent
    the serviced request being used again called as replay attacks'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_timestamp`：此参数与nonce一起添加到每个请求中，以防止服务请求被再次使用，称为重放攻击'
- en: '`Oauth_version`: This defines the version of OAuth protocol being used'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_version`：这定义了正在使用的OAuth协议的版本'
- en: '`Oauth_signaturemethod`: This parameter is used to sign and verify the request'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_signaturemethod`：此参数用于签名和验证请求'
- en: '`Oauth_nonce`: This parameter is used with timestamp'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Oauth_nonce`：此参数与时间戳一起使用'
- en: '`Size`: This parameter defines the size of the file'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Size`：此参数定义文件的大小'
- en: '`File`: This parameter defines the name of the file'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`File`：此参数定义文件的名称'
- en: 'Let''s develop a sample client-server application to demonstrate OAuth with
    Spring Security:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发一个样本客户端-服务器应用程序来演示Spring Security的OAuth：
- en: 'The server application: Let''s think of a movie story application. The application
    accepts stories from the users. The users can upload their stories to the application.
    This application behaves like a service provider. A user writes some horror stories
    and submits them to movie making companies.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器应用程序：让我们想象一个电影故事应用程序。该应用程序接受用户的故事。用户可以将他们的故事上传到应用程序。这个应用程序的行为类似于服务提供商。用户写一些恐怖故事并将它们提交给电影制作公司。
- en: 'The client application: Think of another movie making company application that
    accepts stories to be uploaded from the server application. The movie making company
    has to get authorization from the movie story application to download the stories.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端应用程序：想象另一个电影制作公司的应用程序，该应用程序接受从服务器应用程序上传的故事。电影制作公司必须从电影故事应用程序获取授权以下载故事。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Perform the following tasks to integrate Spring Security with OAuth:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下任务，将Spring Security与OAuth集成：
- en: Create a server application with the `ConfirmAccessController` and `StoryController`
    classes
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个带有`ConfirmAccessController`和`StoryController`类的服务器应用程序
- en: Create a client-side application to access server data
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个客户端应用程序以访问服务器数据
- en: Add `spring-security-oauth` dependency to the `pom.xml` file
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`spring-security-oauth`依赖项添加到`pom.xml`文件
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following are the steps to integrate `spring-security` with `spring-oauth`:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将`spring-security`与`spring-oauth`集成的步骤：
- en: Create the `CreateStoryController` class for stories.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为故事创建`CreateStoryController`类。
- en: '[PRE11]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Create the `ConfirmAccessController` class.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ConfirmAccessController`类。
- en: '[PRE12]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Configure Spring Security with OAuth.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置Spring安全与OAuth。
- en: '[PRE13]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You have to first access the `movieCompanyapp` site. The `movieCompanyapp` in
    turn gets stories from the `storyapp` site. So we have to deploy both the applications
    in the same port.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须首先访问`movieCompanyapp`站点。`movieCompanyapp`反过来从`storyapp`站点获取故事。因此，我们必须在相同的端口上部署这两个应用程序。
- en: We created two users (`raghu`/`raghu123` for `movieCompanyapp` and `anju`/`anju123`
    for `storyapp`). When the user clicks on the **Get stories from storyapp** link,
    the user will be asked to log in again. This time the user has to enter their
    credentials, and then they will get to read the story.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了两个用户（`raghu`/`raghu123`用于`movieCompanyapp`和`anju`/`anju123`用于`storyapp`）。当用户单击**从storyapp获取故事**链接时，用户将被要求再次登录。这次用户必须输入他们的凭据，然后他们将能够阅读故事。
- en: 'Access the URL: `http://localhost:8080/movieCompanyapp/spring_security_login;jsessionid=3b654cf3917d105caa7c273283b5`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 访问URL：`http://localhost:8080/movieCompanyapp/spring_security_login;jsessionid=3b654cf3917d105caa7c273283b5`
- en: '![How it works...](img/7525OS_09_04.jpg)![How it works...](img/7525OS_09_05.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_04.jpg)![它是如何工作的...](img/7525OS_09_05.jpg)'
- en: You will be asked to authorize in order to show the story to the company. This
    happens in the `storyapp` application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您将被要求授权以向公司展示故事。这发生在`storyapp`应用程序中。
- en: '![How it works...](img/7525OS_09_06.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_06.jpg)'
- en: After authorizing, the story will be available in `movieCompanyapp`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 授权后，故事将在`movieCompanyapp`中可用。
- en: '![How it works...](img/7525OS_09_07.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/7525OS_09_07.jpg)'
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Spring Security with Spring Social to access Facebook* recipe
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Social访问Facebook的Spring安全*配方'
- en: The *Spring Security with Spring Social to access Twitter* recipe
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Spring Social访问Twitter的Spring安全*配方'
- en: The *Spring Security with multiple authentication providers* recipe
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*具有多个身份验证提供程序的Spring安全*配方'
