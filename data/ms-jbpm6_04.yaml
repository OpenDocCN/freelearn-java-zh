- en: Chapter 4. Operation Management
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章 操作管理
- en: 'This chapter will illustrate all the tasks that are required to perform jBPM
    operations by walking you through the following topics (focusing on the jBPM KIE
    workbench and related tools):'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将通过以下主题（重点关注 jBPM KIE 工作台和相关工具）向您展示执行 jBPM 操作所需的所有任务：
- en: 'jBPM environment configuration: Git and Maven repositories, organizational
    units, and user management with basic administration and permissions by **role-based
    access control** (**RBAC**)'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: jBPM 环境配置：Git 和 Maven 仓库、组织单元以及通过基于角色的访问控制（**RBAC**）进行的基本管理和权限管理
- en: New jBPM asset management feature and module deployment
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的 jBPM 资产管理功能和模块部署
- en: Process and task management
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程和任务管理
- en: jBPM auditing and history log analysis with a working example of BAM
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 BAM 的工作示例进行 jBPM 审计和历史日志分析
- en: Job and command scheduling with jBPM Executor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 jBPM Executor 进行作业和命令调度
- en: This chapter requires a working knowledge of both Git and Maven, which play
    a central role in the KIE workbench architecture. You will be asked to work with
    Git and to deploy artifacts to Maven. Let us start by reviewing the typical software
    architecture of a jBPM 6.2 development system with the aim to shed some light
    on the new system components and the way they interact.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您对 Git 和 Maven 都有实际了解，它们在 KIE 工作台架构中扮演着核心角色。您将被要求使用 Git 并将工件部署到 Maven。让我们首先回顾
    jBPM 6.2 开发系统的典型软件架构，目的是阐明新系统组件及其交互方式。
- en: An overview of the KIE workbench, Git, and Maven
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KIE 工作台、Git 和 Maven 的概述
- en: At first, the jBPM 6.2 architecture may seem a bit hard to grasp, since several
    new components have been integrated to provide the developers with industry standard
    tools for making it easier to support source code management and building/deployment.
    The jBPM platform integrates with the Git and Maven repositories so that you can
    share Kie business assets and publish Kie modules to remote teams. Let us see
    how Git and Maven fit into the Kie platform (shown in the following image).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，jBPM 6.2 架构可能看起来有点难以理解，因为已经集成了几个新组件，为开发者提供了行业标准工具，以简化源代码管理、构建/部署。jBPM 平台与
    Git 和 Maven 仓库集成，以便您可以共享 Kie 业务资产并将 Kie 模块发布到远程团队。让我们看看 Git 和 Maven 如何融入 Kie 平台（如下所示图像）。
- en: '![An overview of the KIE workbench, Git, and Maven](img/9578OS_04_14.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![KIE 工作台、Git 和 Maven 的概述](img/9578OS_04_14.jpg)'
- en: The KIE workbench manages assets from its Kie Git repositories (either brand
    new or cloned from remote repositories). All Kie Git repositories can be found
    in the `.niogit` folder. The Kie deployment process installs the modules into
    the Kie Maven repository (located in the `repositories/kie` folder). This repository
    is publicly accessible via either the Git or the SSH protocol.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: KIE 工作台管理来自其 Kie Git 仓库（无论是全新的还是从远程仓库克隆而来）的资产。所有 Kie Git 仓库都可以在 `.niogit` 文件夹中找到。Kie
    部署过程将模块安装到 Kie Maven 仓库中（位于 `repositories/kie` 文件夹）。此仓库可以通过 Git 或 SSH 协议公开访问。
- en: Working with Git
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Git
- en: The KIE workbench enables us to create a new empty Git bare repository or to
    clone a remote Git repository into a brand new Kie bare repository. However, the
    workbench does not allow us to import assets into an existing branch of a Kie
    repository.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: KIE 工作台使我们能够创建一个新的空 Git 裸仓库，或者将远程 Git 仓库克隆到一个全新的 Kie 裸仓库中。然而，工作台不允许我们将资产导入到
    Kie 仓库的现有分支中。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '"Bare" repositories exist in Git as a way of having a central (mainly remote)
    repository that a number of people can push to. For details on the bare Git repository,
    please see the official Git documentation.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: “裸”仓库在 Git 中作为拥有一个中心（主要是远程）仓库的方式存在，许多人可以向其推送内容。有关裸 Git 仓库的详细信息，请参阅官方 Git 文档。
- en: We can manage repositories from the **Authoring** | **Administration** menu
    (**Repository** item). Let us now put Kie repositories to work.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 **创作** | **管理** 菜单（**仓库** 项）管理仓库。现在让我们让 Kie 仓库发挥作用。
- en: Cloning a remote repository
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 克隆远程仓库
- en: 'We are going to clone the `chapter 4-pizza` example repository from GitHub.
    It hosts two projects that we will use later in the chapter to experiment with
    the deployment process. To clone a remote repository, open the **Repositories**
    | **Clone Repository** dialog (see the following screenshot) and configure the
    parameters as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将克隆来自 GitHub 的 `chapter 4-pizza` 示例仓库。它托管了两个项目，我们将在本章后面使用这些项目来实验部署过程。要克隆远程仓库，请打开
    **仓库** | **克隆仓库** 对话框（参见以下截图）并按以下配置参数进行设置：
- en: '**Repository Name**: `chapter4-pizza`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库名称**：`chapter4-pizza`'
- en: '**Organizational Unit**: Use the default provided by jBPM or create a new one
    (This is not relevant at this stage; let us set its value to `demo`)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织单位**：使用 jBPM 提供的默认设置或创建一个新的（在此阶段这不相关；让我们将其值设置为 `demo`）'
- en: '**Git URL**: `https://github.com/masteringjbpm6/chapter4-pizza.git`![Cloning
    a remote repository](img/9578OS_04_12.jpg)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git URL**：`https://github.com/masteringjbpm6/chapter4-pizza.git`![克隆远程仓库](img/9578OS_04_12.jpg)'
- en: 'We have already said that both cloned and new repositories are placed in the
    `.niogit` folder that you can find in the KIE installation folder. In addition,
    all KIE repositories are shared by default at the following URL:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经说过，克隆的和新的仓库都放在你可以在 KIE 安装文件夹中找到的 `.niogit` 文件夹中。此外，所有 KIE 仓库默认共享以下 URL：
- en: '`git://localhost:9418/{reposname}` or `ssh://localhost:8001/{reposname}`'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`git://localhost:9418/{reposname}` 或 `ssh://localhost:8001/{reposname}`'
- en: where `{reposname}` is the **Repository Name** that you provided in the dialog
    window (for example, `chapter4-pizza`).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 `{reposname}` 是你在对话框窗口中提供的**存储库名称**（例如，`chapter4-pizza`）。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Never clone repositories from the KIE `.niogit` folder directly; always use
    the repository URL.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从不直接从 KIE `.niogit` 文件夹克隆仓库；始终使用仓库 URL。
- en: The `.niogit` folder also contains the `system.git` Kie repository, which is
    used as a store for metadata and settings; we will look at it in an upcoming section.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`.niogit` 文件夹还包含用于存储元数据和设置的 `system.git` Kie 仓库；我们将在下一节中查看它。'
- en: Making changes and committing
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改并提交
- en: Modifying the project assets from the KIE workbench means that your changes
    are going to be committed into the KIE Git repository. Let us edit the jBPM process
    definition and see what happens upon saving the asset. Open the **Authoring**
    | **Project Authoring** menu (**Project Explorer**) and change the path to `demo/chapter4-pizza/pizzadelivery`;
    you should have the **pizzadelivery** process listed under the **Business Processes**
    group (see the following screenshot).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从 KIE 工作台修改项目资产意味着你的更改将被提交到 KIE Git 仓库。让我们编辑 jBPM 流程定义，看看保存资产时会发生什么。打开**作者**
    | **项目作者**菜单（**项目资源管理器**），将路径更改为 `demo/chapter4-pizza/pizzadelivery`；你应该在**业务流程**组下看到**pizzadelivery**流程（见以下截图）。
- en: '![Making changes and committing](img/9578OS_04_13.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![修改并提交](img/9578OS_04_13.jpg)'
- en: 'Just drag and move, for instance, the process start node, and then, select
    the **Save** menu item. The system prompts you with a **Commit** comment; enter
    `workbench editing` and press **OK**. Now, if we go and check the `.niogit/chapter4-pizza.git`
    repository and issue the following command:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只需拖动并移动，例如，流程开始节点，然后选择**保存**菜单项。系统会提示你输入**提交**注释；输入 `workbench editing` 并按**确定**。现在，如果我们去检查
    `.niogit/chapter4-pizza.git` 仓库并执行以下命令：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We can see the following two commits (the older commit was the one performed
    during the GitHub repository initial creation, and the other is your last commit):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到以下两个提交（较旧的提交是在 GitHub 仓库初始创建时执行的，另一个是你的最后一个提交）：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We can get the first commit files by specifying the commit ID:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过指定提交 ID 来获取第一个提交文件：
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Pushing to the remote repository
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推送到远程仓库
- en: 'Let us now check the remote origin setting for our `chapter4` repository first
    by using the following command:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们首先使用以下命令检查 `chapter4` 仓库的远程源设置：
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The following information is printed:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信息将被打印：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In order to update the remote origin GitHub branch (master), we issue the following
    push:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新远程源 GitHub 分支（master），我们执行以下推送：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Since the repository is protected, you will be prompted for the repository
    username and password (we are using our account here):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 由于仓库受保护，你将需要输入仓库用户名和密码（我们在这里使用我们的账户）：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Removed for clarity…
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，已移除...
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The remote branch is finally updated.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最终更新了远程分支。
- en: Note
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: For fixes and enhancements, we encourage you to contribute to our example GitHub
    repository; in case you want to experiment with the example projects on your own,
    please follow the next section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对于修复和增强，我们鼓励你为我们示例 GitHub 仓库做出贡献；如果你想在本地实验示例项目，请遵循下一节。
- en: New repository
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 新建仓库
- en: 'By cloning our GitHub repository into a KIE repository, you cannot (as you
    are not a contributor) send changes upstream. Apart from forking on GitHub, creating
    a new empty Kie repository is the right choice if you want KIE to centrally manage
    your projects. To do so, follow these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将我们的 GitHub 仓库克隆到 KIE 仓库中，你无法（因为你不是贡献者）将更改推送到上游。除了在 GitHub 上进行分支操作外，如果你想让
    KIE 集中管理你的项目，创建一个新的空 Kie 仓库是正确的选择。为此，请按照以下步骤操作：
- en: Create a new KIE Git repository; remember to leave the **Managed Repository**
    option unchecked for the moment, since this turns your repository into a Maven
    aware repository making it hard to adjust it when projects are added from an external
    source (we are going to address it in the *Asset management example* paragraph).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的KIE Git仓库；请记住，目前不要勾选**管理仓库**选项，因为这会将您的仓库变成一个Maven感知的仓库，使得从外部源添加项目时难以调整（我们将在*资产管理示例*段落中解决它）。
- en: Clone the remote GitHub repository from the command line, using your preferred
    Git client.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的Git客户端从命令行克隆远程GitHub仓库。
- en: Change your Git working copy remote origin to the new Kie repository.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的Git工作副本远程origin更改为新的Kie仓库。
- en: Commit and push to the Kie repository `master` branch.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交并推送到Kie仓库的`master`分支。
- en: Note
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: Please see the *Git cloning and managed repository* section for a complete example
    of repository creation and project setup from GitHub.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅*Git克隆和管理仓库*部分，以获取从GitHub创建仓库和项目设置的完整示例。
- en: jBPM 6.2 introduces a distinction between the plain Git repository (unmanaged)
    and a new kind of "smart" repository (managed) that we can create by setting the
    **Managed Repository** option in the **New Repository** dialog window.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 6.2引入了普通Git仓库（未管理）和一种新的“智能”仓库（管理）之间的区别，我们可以通过在**新建仓库**对话框窗口中设置**管理仓库**选项来创建这种类型的仓库。
- en: Managing assets – managed repositories
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理资产 - 管理仓库
- en: 'As we have seen, managing Git project sources and Maven with KIE might be challenging:
    cloning, committing, setting repository remotes, pushing upstream, and so on,
    and we did not even consider Git branching in our example. jBPM 6.2 simplifies
    the way repositories and project source code are managed by introducing a new
    feature (asset management) designed to drive the development, build, and release
    processes thanks to a set of jBPM workflow processes, which kick in at various
    stages. Managed repositories, in short, provide project Maven version control
    and Git branch management.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，使用KIE管理Git项目源和Maven可能具有挑战性：克隆、提交、设置仓库远程、推送到上游等等，我们甚至没有在我们的示例中考虑Git分支。jBPM
    6.2通过引入一个新功能（资产管理）简化了仓库和项目源代码的管理，该功能旨在通过一系列jBPM工作流程在各个阶段推动开发、构建和发布过程。简而言之，管理仓库提供项目Maven版本控制和Git分支管理。
- en: Governance workflow
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理工作流程
- en: 'The asset management workflows are not fully automatic; they also require a
    managing actor (who must be in the `kiemgmt` role; see the KIE workbench `roles.properties`
    file) to complete specific tasks in order to make the workflow progress (selecting
    assets to release and/or review) or present the user with informative data (such
    as error data). The workflows trigger only when the following pre-defined operations
    take place (remember, this only applies to managed repositories):'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 资产管理工作流程不是完全自动的；它们还需要一个管理演员（必须是`kiemgmt`角色；参见KIE工作台`roles.properties`文件）来完成特定任务，以便使工作流程进展（选择要发布和/或审查的资产）或向用户提供信息数据（例如错误数据）。工作流程仅在以下预定义操作发生时触发（请记住，这仅适用于管理仓库）：
- en: '**Repository creation or configuration**: After the Git repository is created
    or when the repository **Configure** button is selected, the workflow can automatically
    add a `dev` branch and a `release` branch for you (the `master` branch is always
    the default one).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建或配置仓库**：在创建Git仓库或选择仓库**配置**按钮后，工作流程可以自动为您添加一个`dev`分支和一个`release`分支（`master`分支始终是默认分支）。'
- en: '**Asset promotion**: When a user thinks that his/her assets are ready to be
    released, he/she can submit them for a so-called **promotion** by selecting the
    **Promote** button. The promotion requires the managing user to select (Git cherry
    picking) and approve the submitted changes by promoting them to the Git release
    branch, or to delay the process for a later review.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资产提升**：当用户认为他的/她的资产准备好发布时，他/她可以通过选择**提升**按钮提交它们进行所谓的**提升**。提升需要管理用户选择（Git
    cherry picking）并批准提交的更改，通过将它们提升到Git发布分支，或者延迟过程以供稍后审查。'
- en: '**Project build**: The user performs **Build**, selecting a specific repository
    branch. The build involves the compiling and installing of the project as a Maven
    module into the internal Kie repository.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目构建**：用户执行**构建**，选择特定的仓库分支。构建涉及将项目作为一个Maven模块编译并安装到内部Kie仓库中。'
- en: '**Release**: The user performs **Release**. The release feature involves the
    building and deploying processes at the repository level. All of your repository
    projects are built and then, published to the Kie runtime (the **Deploy To Runtime**
    option) so that business assets can be used. We can only release from branches
    starting with the **release** label (for example, release-1.0.1).'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发布**：用户执行 **发布**。发布功能涉及在仓库级别的构建和部署过程。所有仓库项目都会构建，然后发布到 Kie 运行时（**部署到运行时**选项），以便可以使用业务资产。我们只能从以
    **release** 标签开头的分支发布（例如，release-1.0.1）。'
- en: Note
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please check Chapter 9 of the jBPM 6.2 User Guide for additional details on
    asset management workflows.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅 jBPM 6.2 用户指南的第 9 章，以获取有关资产管理工作流的更多详细信息。
- en: Git cloning and managed repository
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Git 克隆和管理仓库
- en: 'jBPM 6.2 does not support importing into a managed repository; the naïve solution
    mimics what we have seen in the (unmanaged) *New repository* paragraph with slight
    variations; let us see how to import our GitHub `chapter4-managed` repository
    projects:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 6.2 不支持导入到管理仓库；简单的解决方案模仿了我们在（未管理的）*新建仓库* 段落中看到的方法，略有不同；让我们看看如何导入我们的 GitHub
    `chapter4-managed` 仓库项目：
- en: 'Let us create a multi-module repository; the settings for each step are as
    follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个多模块仓库；每一步的设置如下：
- en: '**Repository Name**: `ManagedVesuvio`, and **Organizational Unit**: `demo`
    (not relevant now).'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**仓库名称**: `ManagedVesuvio`，和 **组织单元**: `demo`（目前不相关）。'
- en: '**Multi-project Repository** (checked), **Automatically Configure Branches**
    (checked), and **Project Settings** (leave defaults).'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**多项目仓库**（勾选），**自动配置分支**（勾选），和 **项目设置**（保留默认设置）。'
- en: Note
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'In Step 2, the specified Maven GAV will be the Maven parent module GAV `(demo:ManagedVesuvio:1.0.0-SNAPSHOT)`.
    Two additional branches are created: `dev-1.0.0` and `release-1.0.0`. If we were
    not selecting automatic branch management, only the default `master` branch would
    be available and the repository could not be released as a whole (see the *Releasing*
    section for additional hints).'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在步骤 2 中，指定的 Maven GAV 将是 Maven 父模块 GAV `(demo:ManagedVesuvio:1.0.0-SNAPSHOT)`。创建了两个额外的分支：`dev-1.0.0`
    和 `release-1.0.0`。如果我们没有选择自动分支管理，则只有默认的 `master` 分支可用，整个仓库无法发布（有关更多信息，请参阅 *发布*
    部分）。
- en: 'Clone the `chapter4-managed` example projects:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆 `chapter4-managed` 示例项目：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a new remote named `kievesuvio` (or if you prefer, replace the origin):'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `kievesuvio` 的新远程仓库（或者如果您愿意，替换 origin）：
- en: '[PRE9]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change into the `chapter4-managed` folder, and add the files and commit:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 `chapter4-managed` 文件夹，并添加文件和提交：
- en: '[PRE10]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Get updates from the `master` branch and push to the KIE `ManagedVesuvio` `dev-1.0.0`
    branch:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `master` 分支获取更新并推送到 KIE `ManagedVesuvio` `dev-1.0.0` 分支：
- en: '[PRE11]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: At this stage, the `dev-1.0.0` branch is updated, but our `ManagedVesuvio` repository
    structure is not aware of the branch changes while the KIE Project **Explorer**
    is. This is due to the fact that the repository structure shows the Maven multi-module
    configuration (more details in the *Managed repository and Maven* section) and
    that its `pom.xml` file is stale. We have to add the `napoli` and `vesuvio` projects
    manually to it.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此阶段，`dev-1.0.0` 分支已更新，但 KIE 项目 **资源管理器** 并未意识到仓库结构中的分支变化。这是由于仓库结构显示了 Maven
    多模块配置（更多详情请见 *管理仓库和 Maven* 部分），并且其 `pom.xml` 文件已过时。我们必须手动将 `napoli` 和 `vesuvio`
    项目添加到其中。
- en: 'In File Explorer (**Authoring** | **Administration**), click on `pom.xml` and
    add the `<modules>` element as follows:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件资源管理器（**创建** | **管理**）中，点击 `pom.xml` 并添加以下 `<modules>` 元素：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After saving the file, KIE should pick up the projects and the repository structure
    should display our modules.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件后，KIE 应该会识别项目，并且仓库结构应该显示我们的模块。
- en: '![Git cloning and managed repository](img/9578OS_04_20.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![Git 克隆和管理仓库](img/9578OS_04_20.jpg)'
- en: The repository is now properly configured, and we are ready to tackle the asset
    management features.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 仓库现在已正确配置，我们准备处理资产管理功能。
- en: Asset management example
  id: totrans-91
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 资产管理示例
- en: The `napoli` and `vesuvio` projects each contain a basic process definition.
    The `napoli` process (`napoli.bpmn2`) includes the `vesuvio` process (`vesuvio.bpmn2`)
    as a reusable sub-process (more on BPMN2 elements in [Chapter 5](ch05.html "Chapter 5. BPMN
    Constructs"), *BPMN Constructs*). The users perform asset management tasks by
    selecting the appropriate button in the **Repository** | **Repository Structure**
    view (see the following screenshot) and by completing human tasks in the **Task**
    | **Task List** window.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`napoli`和`vesuvio`项目各包含一个基本流程定义。`napoli`流程（`napoli.bpmn2`）包括`vesuvio`流程（`vesuvio.bpmn2`）作为一个可重用的子流程（更多关于BPMN2元素的内容请见[第5章](ch05.html
    "第5章。BPMN结构")，*BPMN结构*）。用户通过在**仓库** | **仓库结构**视图中选择适当的按钮（见以下截图）以及在**任务** | **任务列表**窗口中完成人工任务来执行资产管理任务。'
- en: '![Asset management example](img/9578OS_04_17.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![资产管理示例](img/9578OS_04_17.jpg)'
- en: The asset management tasks are assigned to users owning the `kiemgmt` role only;
    therefore, ensure that you log into the KIE workbench with the `admin` user since
    this is the only preset user owning this role.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 资产管理任务仅分配给拥有`kiemgmt`角色的用户；因此，请确保您使用`admin`用户登录到KIE工作台，因为这是唯一预设的拥有此角色的用户。
- en: Promoting assets
  id: totrans-95
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 提升资产
- en: 'We submit the assets (the napoli and vesuvio modules) for promotion to the
    release branch:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将资产（napoli和vesuvio模块）提交到发布分支进行提升：
- en: 'Select **Project** | **Authoring and Repository** | **Repository Structure**;
    select the **Promote** button and enter the target branch: `release-1.0.0`.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**项目** | **编写和仓库** | **仓库结构**；选择**提升**按钮，并输入目标分支：`release-1.0.0`。
- en: In the **Tasks** | **Task List** window, you should now be assigned a **Select
    Assets to Promote** task; click on it, **Claim** the task, **Promote All** assets,
    and **Complete** the task as shown in the following screenshot:![Promoting assets](img/9578OS_04_21.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**任务** | **任务列表**窗口中，你现在应该被分配了一个**选择资产提升**的任务；点击它，**认领**任务，**提升所有**资产，并**完成**任务，如图所示：![提升资产](img/9578OS_04_21.jpg)
- en: Head back to **Repository Structure**, and by selecting the `release-1.0.0`
    branch, you should see the two promoted projects.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到**仓库结构**，通过选择`release-1.0.0`分支，你应该能看到两个提升的项目。
- en: Note
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Assets are now merged into the Git repository `release-1.0.0` branch.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 资产现在已合并到Git仓库`release-1.0.0`分支。
- en: Releasing
  id: totrans-102
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 发布
- en: 'In **Repository Structure**, select the `release-1.0.0` branch and press the
    **Release** button. Optionally, bump the Release Version for the module, toggle
    **Deploy to Runtime** (user: `admin`, password: `admin`, Server URL: `default`),
    and then proceed.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在**仓库结构**中，选择`release-1.0.0`分支并按下**发布**按钮。可选地，提高模块的发布版本，切换**部署到运行时**（用户：`admin`，密码：`admin`，服务器URL：`default`），然后继续。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`napoli` and `vesuvio` are now installed into the KIE Maven repository, and
    you can find them among your **Authoring** | **Artifact Repository** artifacts.
    In case you selected **Deploy to Runtime**, the contained process definitions
    would be made available in **Process Management** | **Process Definitions**.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`napoli`和`vesuvio`现在已安装到KIE Maven仓库，你可以在**编写** | **工件仓库**工件中找到它们。如果你选择了**部署到运行时**，包含的流程定义将在**流程管理**
    | **流程定义**中可用。'
- en: Building (single project)
  id: totrans-106
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 构建（单个项目）
- en: 'The release process always runs through a build process for all the managed
    repository projects; the build/release process can also be performed, for all
    kind of repositories (managed/unmanaged), on the single project by the **Build**
    menu:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 发布流程始终通过构建过程运行所有管理的仓库项目；构建/发布过程也可以通过**构建**菜单在单个项目上对所有类型的仓库（管理/非管理）执行：
- en: '**Build & Install**: Deploy the artifact to the Kie repository and the system
    Maven repository (if any)'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建与安装**：将工件部署到Kie仓库和系统Maven仓库（如果有）'
- en: '**Build & Deploy**: Perform the install step (see previously), and then, deploy
    the module to the Kie runtime: business artifacts are available for runtime usage'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**构建与部署**：执行安装步骤（见前文），然后，将模块部署到Kie运行时：业务工件可用于运行时使用'
- en: We will discuss more on deployments in the *KIE deployments* section
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将在*KIE部署*部分讨论更多关于部署的内容
- en: Asset versioning history
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 资产版本历史
- en: All Git versioning information for the assets is available in the **Overview**
    tab. For instance, by clicking on the **napoli** process, we can see all the commit
    logs and we can load the previous Git versions for the assets with the **Select**
    and **Current** buttons (see the following screenshot; the comments may vary).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 所有资产的Git版本信息都可在**概览**选项卡中找到。例如，通过点击**napoli**流程，我们可以看到所有的提交日志，并且可以使用**选择**和**当前**按钮加载资产的先前Git版本（见以下截图；注释可能有所不同）。
- en: '![Asset versioning history](img/9578OS_04_18.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![资产版本历史](img/9578OS_04_18.jpg)'
- en: Managed repository and Maven
  id: totrans-114
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理仓库和Maven
- en: The managed Git repositories are themselves stored as Maven modules in the `repositories/kie`
    repository. They can be Single Project or Multi-Project repositories; this affects
    the way that the Mavenized Kie projects are configured.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 管理的Git仓库本身存储在`repositories/kie`仓库中的Maven模块中。它们可以是单一项目或多个项目的仓库；这会影响Maven化Kie项目的配置方式。
- en: The Single Project repository contains a single Kie Maven project
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单一项目仓库包含一个Kie Maven项目
- en: The Multi-Project repository contains a Maven multi-module project
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多项目仓库包含一个Maven多模块项目
- en: 'The parent module `pom.xml` file shows that it is a `pom` (multi) module containing
    the `napoli` and `vesuvio` modules:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 父模块`pom.xml`文件显示它是一个`pom`（多）模块，包含`napoli`和`vesuvio`模块：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `napoli` module `pom.xml` file shows that it depends on the `vesuvio` module:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`napoli`模块的`pom.xml`文件显示它依赖于`vesuvio`模块：'
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to [http://maven.apache.org/guides/mini/guide-multiple-modules.html](http://maven.apache.org/guides/mini/guide-multiple-modules.html)
    for an introduction to Maven multi-module management.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[http://maven.apache.org/guides/mini/guide-multiple-modules.html](http://maven.apache.org/guides/mini/guide-multiple-modules.html)以了解Maven多模块管理的介绍。
- en: Governance process definitions
  id: totrans-124
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 管理流程定义
- en: The jBPM asset management process definitions and their related business logic
    can be found in the Drools project called `guvnor-asset-mgmt`. This module is
    pre-deployed and is loaded by the KIE workbench; it is regularly listed in **Artifact
    Repository**, and you can find its process definitions in the **Deployments**
    | **Process Deployments** window and their running instances in the **Process
    Instances** window.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM资产管理流程定义及其相关业务逻辑可以在名为`guvnor-asset-mgmt`的Drools项目中找到。此模块是预部署的，并由KIE工作台加载；它通常列在**工件仓库**中，您可以在**部署**
    | **流程部署**窗口中找到其流程定义，并在**流程实例**窗口中找到其运行实例。
- en: A final note
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最后的注意事项
- en: The KIE workbench project editor only lets you edit, build, and release the
    proper Kie modules and not plain Maven modules (which lack the `kmodule.xml` file).
    So, if you only have a single Kie module, it does not make much sense to clone
    a bunch of modules into a Kie multi-project managed repository; try to design
    your repository content with a grain of salt so that your Kie runtime and development
    environment is always clean and healthy. Now, instead of using the KIE workbench
    to complete the configuration for our next example (left for an exercise to the
    reader), we switch to an alternative tool, the KIE CLI (which stands for command
    line interface), and see different ways to perform the common operation tasks.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: KIE工作台项目编辑器只允许您编辑、构建和发布适当的Kie模块，而不是普通的Maven模块（这些模块缺少`kmodule.xml`文件）。因此，如果您只有一个Kie模块，将大量模块克隆到Kie多项目管理的仓库中并没有太多意义；请尝试用一点盐来设计您的仓库内容，以确保您的Kie运行时和开发环境始终保持清洁和健康。现在，我们不再使用KIE工作台来完成下一个示例（留给读者作为练习），而是切换到另一个工具，即KIE
    CLI（代表命令行界面），并查看执行常见操作任务的不同方法。
- en: An overview of the kie-config-cli tool
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: kie-config-cli工具概述
- en: '[Chapter 2](ch02.html "Chapter 2. Building Your First BPM Application"), *Building
    Your First BPM Application* (see the *Creating your first jBPM project* section)
    introduced several KIE console features (repositories and organizations management,
    module deployment, and so on). The KIE CLI utility provides the administrator/user
    with the tools to perform common tasks related to organizational units, repository,
    user permissions, and deployment management at the console/shell level.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[第2章](ch02.html "第2章。构建您的第一个BPM应用程序")，*构建您的第一个BPM应用程序*（见*创建您的第一个jBPM项目*部分）介绍了几个KIE控制台功能（仓库和组织管理、模块部署等）。KIE
    CLI实用程序为管理员/用户提供在控制台/shell级别执行与组织单元、仓库、用户权限和部署管理相关的常见任务的工具。'
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The tool project is hosted at GitHub: [https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli](https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 工具项目托管在 GitHub 上：[https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli](https://github.com/droolsjbpm/kie-wb-distributions/tree/master/kie-config-cli)。
- en: 'You can download the tool distributions from the JBoss snapshot Maven repository:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从 JBoss 快照 Maven 仓库下载工具发行版：
- en: '[http://snapshots.jboss.org/maven2/org/kie/kie-config-cli](http://snapshots.jboss.org/maven2/org/kie/kie-config-cli).'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://snapshots.jboss.org/maven2/org/kie/kie-config-cli](http://snapshots.jboss.org/maven2/org/kie/kie-config-cli).'
- en: 'The previous section explained in detail how KIE handles Git repositories for
    source projects, and we previewed the existence of a KIE system Git repository;
    the KIE CLI tool interfaces with it and operates in two modes:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节详细解释了 KIE 如何处理源项目的 Git 仓库，并预览了 KIE 系统Git仓库的存在；KIE CLI 工具与之接口，并在两种模式下操作：
- en: '**online (default and recommended)**: Upon startup, it connects to the system
    repository by using the Git service embedded in `kie-wb`. All changes are local
    and published to the upstream only when the `push-changes` CLI command is explicitly
    executed. The `exit` command will publish all local changes; to discard local
    changes upon exiting the CLI, the `discard` command shall be used'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在线（默认和推荐）**：启动时，它通过 `kie-wb` 中嵌入的 Git 服务连接到系统仓库。所有更改都是本地的，并且仅在显式执行 `push-changes`
    CLI 命令时才发布到上游。`exit` 命令将发布所有本地更改；要在退出 CLI 时丢弃本地更改，应使用 `discard` 命令'
- en: '**offline**: Creates and manipulates the Kie system repository directly on
    the server (no discard option is available)'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**离线**：直接在服务器上创建和操作 Kie 系统仓库（不可用 discard 选项）'
- en: 'The system repository stores the private configuration/settings data for the
    KIE workbench: how editors behave, organizational groups, security, and so on.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 系统仓库存储 KIE 工作台的私有配置/设置数据：编辑器的行为、组织组、安全等。
- en: The system repository is located in the KIE `.niogit` folder (`.niogit/system.git`).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 系统仓库位于 KIE `.niogit` 文件夹中（`.niogit/system.git`）。
- en: Note
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The core Git backend features are provided by the Red Hat Uberfire framework.
    [http://www.uberfireframework.org](http://www.uberfireframework.org).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 核心Git后端功能由 Red Hat Uberfire 框架提供。[http://www.uberfireframework.org](http://www.uberfireframework.org)。
- en: By default, the KIE workbench monitors the `system.git` repository changes,
    thanks to its backend services, and updates its UI accordingly. We will continue
    our system repository description in the next section after our next example environment
    has been set up. We could have accomplished the job through the KIE workbench
    features, but we want you to go hands on and put the KIE console at work, getting
    acquainted in what is going on behind the curtains.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，KIE 工作台通过其后端服务监控 `system.git` 仓库的更改，并相应地更新其用户界面。在设置完下一个示例环境之后，我们将继续在下一节中描述系统仓库。我们本可以通过
    KIE 工作台的功能来完成这项工作，但我们希望您亲自动手，让 KIE 控制台发挥作用，熟悉幕后发生的事情。
- en: Connecting (online mode)
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 连接（在线模式）
- en: After launching the tool (by the `kie-config-cli` script in the installation
    folder), let us start by connecting to the KIE system repository on the localhost.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 启动工具（通过安装文件夹中的 `kie-config-cli` 脚本）后，让我们首先连接到本地主机上的 KIE 系统仓库。
- en: Tip
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: SSH is to be preferred over the Git protocol for security reasons.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，应优先考虑 SSH 协议而不是 Git 协议。
- en: '[PRE15]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Creating an organizational unit
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建组织单元
- en: The organizational unit is required by the KIE workbench in order to create
    repositories and users and have RBAC rule control that is entitled to perform
    certain tasks.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: KIE 工作台需要组织单元来创建仓库和用户，并实施 RBAC 规则控制，以执行某些任务。
- en: '[PRE16]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Creating a repository
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建仓库
- en: We have already seen how to clone a Git repository from the KIE workbench. Let
    us now create a new Git repository (local, bare, and unmanaged; no username/password
    required) in which we can store our new projects.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何从 KIE 工作台克隆 Git 仓库。现在让我们创建一个新的 Git 仓库（本地、裸、未管理；无需用户名/密码），我们可以在此存储我们的新项目。
- en: '[PRE17]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Defining role-based access control rules
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义基于角色的访问控制规则
- en: 'To complete the setup procedure for our example, we set some RBAC rules to
    our masterjbm6 repository; the organization has no roles set, so in order to constrain
    the access to the repository, we add roles to the repository object:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成示例设置过程，我们在 masterjbm6 仓库中设置了一些 RBAC 规则；该组织未设置任何角色，因此为了限制对仓库的访问，我们向仓库对象添加角色：
- en: '[PRE18]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Adding jBPM console users
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 jBPM 控制台用户
- en: '`users.properties` and `roles.properties` define the users (with their roles)
    that are enabled to log into the jBPM console.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`users.properties` 和 `roles.properties` 定义了可以登录 jBPM 控制台的用户（及其角色）。'
- en: 'Let us edit `users.properties` and add two new users:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编辑 `users.properties` 并添加两个新用户：
- en: '[PRE19]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Edit `roles.properties` and associate the users with the roles that we have
    created in the previous step:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `roles.properties` 并将用户与我们之前创建的角色关联起来：
- en: '[PRE20]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Adding the repository to an organization
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将仓库添加到组织中
- en: Each KIE Git repository must be bound to an organization; the organization is
    in charge of controlling accesses to it and giving organization users operation
    permissions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 每个KIE Git仓库都必须绑定到一个组织；组织负责控制对其的访问并给予组织用户操作权限。
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Pushing changes to system.git
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 推送到 system.git
- en: 'The `push-changes` command sends changes to the KIE `system.git` repository:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`push-changes` 命令将更改发送到KIE `system.git` 仓库：'
- en: '[PRE22]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: As a consequence, your KIE workbench gets a refresh, displaying the updated
    settings on your UI.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你的 KIE 工作台会得到更新，显示你 UI 上的更新设置。
- en: More on the system.git repository
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多关于系统.git仓库的信息
- en: 'At this point, you should have an idea of what the `system.git` repository
    is for; as a final exercise, let us clone it and have a look inside it:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该对 `system.git` 仓库的作用有所了解；作为一个最后的练习，让我们克隆它并查看其内部结构：
- en: '[PRE23]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Note
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember to never push changes to system repository from outside the KIE CLI
    tool; it would likely mess up the entire KIE workbench installation!
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，永远不要从 KIE CLI 工具外部向系统仓库推送更改；这可能会搞乱整个 KIE 工作台安装！
- en: 'The system repository contains some entities (organizational units and repositories)
    and internal configuration files; here, we can find our brand new organization
    and repository description files:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 系统仓库包含一些实体（组织单元和仓库）以及内部配置文件；在这里，我们可以找到我们全新的组织和仓库描述文件：
- en: '`masteringjbpm6.repository`'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`masteringjbpm6.repository`'
- en: '`packt.organizationalunit`'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`packt.organizationalunit`'
- en: 'The `masteringjbpm6.repository` file content is as follows (please note the
    `security:role` settings):'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`masteringjbpm6.repository` 文件内容如下（请注意 `security:role` 设置）：'
- en: '[PRE24]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now that we are done with our new KIE Git repositories and environment configuration,
    we are ready to tackle the new deployment feature and the Kie-Maven integration,
    the subject of our next example.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了我们的新 KIE Git 仓库和环境配置，我们准备好处理新的部署功能和 Kie-Maven 集成，这是我们下一个示例的主题。
- en: KIE deployments
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: KIE部署
- en: The jBPM 6 platform introduced a brand new deployment process; the previous
    proprietary mechanism that leveraged the Guvnor packages (backed by a **Java Content
    Repository** (**JCR**) and the Drools `KnowledgeAgent` (`changeset.xml`) was replaced
    with the widely adopted Apache Maven tool. This greatly improved the development
    process both in terms of tool configuration (more convention/configuration oriented)
    and support, standardization, and deployment flexibility.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 6平台引入了一个全新的部署流程；之前利用 Guvnor 包（由**Java内容仓库**（**JCR**）和 Drools `KnowledgeAgent`
    (`changeset.xml`) 支持的专有机制）被广泛采用的Apache Maven工具所取代。这在工具配置（更倾向于约定/配置）以及支持、标准化和部署灵活性方面都大大提高了开发过程。
- en: When you deploy your project, you physically create a KIE deployment unit (KJAR);
    this module is a Maven-enabled project and is a compressed standard Java archive
    that contains all the project's business assets (processes, workitem handlers,
    business rules, forms, and so on) as well as its knowledge session and runtime
    declarative metadata descriptor (`META-INF/kmodule.xml`).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 当你部署你的项目时，你实际上创建了一个 KIE 部署单元（KJAR）；这个模块是一个 Maven 启用的项目，是一个包含所有项目业务资产（流程、工作项处理器、业务规则、表单等）以及其知识会话和运行时声明性元数据描述符（`META-INF/kmodule.xml`）的压缩标准
    Java 归档。
- en: Note
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `kmodule.xml` file is extensively covered in the official jBPM and Drools
    documentation.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`kmodule.xml` 文件在官方 jBPM 和 Drools 文档中有详细说明。'
- en: 'The unique ID of a KIE module is built starting from its Maven GAV (GroupId,
    ArtifactId, Version) with the addition of the knowledge base name (the default
    knowledge base name is empty; we will return to this in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*), for example:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: KIE模块的唯一ID是从其Maven GAV（分组ID，工件ID，版本）开始构建的，并添加了知识库名称（默认知识库名称是空的；我们将在[第6章](ch06.html
    "第6章。核心架构")，*核心架构*中回到这一点），例如：
- en: '[PRE25]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The jBPM runtime resolves KJAR dependencies while automatically searching for
    other Maven modules in the configured Maven repositories (either by the project
    `pom.xml` file embedded in the KIE JAR or through the Maven `settings.xml` file)
    using the Drools KIE-CI components. You can alternatively use the `kie.maven.settings.custom`
    system property and point to any Maven `settings.xml` file.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 运行时使用 Drools KIE-CI 组件在配置的 Maven 仓库中自动搜索其他 Maven 模块（通过嵌入在 KIE JAR 中的项目
    `pom.xml` 文件或通过 Maven `settings.xml` 文件）来解决 KJAR 依赖项。您还可以使用 `kie.maven.settings.custom`
    系统属性并指向任何 Maven `settings.xml` 文件。
- en: Note
  id: totrans-188
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture*,
    particularly to the *Repositories and scanner* section, for detailed information
    on class loading and resolving module dependencies at runtime.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第 6 章](ch06.html "第 6 章。核心架构")，*核心架构*，特别是关于*仓库和扫描器*部分，以获取有关运行时类加载和解决模块依赖项的详细信息。
- en: 'The default KIE Maven repository artifacts (the `repositories/kie` folder)
    are remotely accessible at the following URL: `http://{jbpmconsole-host}:{port}/jbpm-console/maven2wb/`.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 KIE Maven 仓库工件（`repositories/kie` 文件夹）可通过以下 URL 远程访问：`http://{jbpmconsole-host}:{port}/jbpm-console/maven2wb/`。
- en: 'Let us now summarize the core actions that are performed during the deployment
    process:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来总结在部署过程中执行的核心操作：
- en: Maven install of the module into the KIE Maven repository
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模块安装到 KIE Maven 仓库的 Maven 安装
- en: Maven deploy of the module into your system Maven repository (the Maven `settings.xml`
    file from the Maven home is used, or the `kie.maven.settings.custom` system property
    is checked).
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将模块部署到您的系统 Maven 仓库（使用 Maven 主目录中的 Maven `settings.xml` 文件，或者检查 `kie.maven.settings.custom`
    系统属性）。
- en: The jBPM database table called `DeploymentStore` is updated with the deployment
    descriptor (in the XML format). This change has been introduced with the jBPM
    6.2 release; prior to this, the deployment information was stored inside the `system.git`
    repository.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被称为 `DeploymentStore` 的 jBPM 数据库表通过部署描述符（XML 格式）进行更新。此更改是在 jBPM 6.2 版本中引入的；在此之前，部署信息存储在
    `system.git` 仓库内。
- en: Tip
  id: totrans-195
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: The release/deployment action never deploys the Kie module's dependencies; to
    avoid missing dependencies runtime errors, you have to provide the correct dependency
    artifacts by installing them into the Maven repository before you put your Kie
    module assets to work.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 发布/部署操作永远不会部署 Kie 模块的依赖项；为了避免运行时错误中缺少依赖项，您必须在将 Kie 模块资产投入使用之前，通过将它们安装到 Maven
    仓库中提供正确的依赖项工件。
- en: The following figure captures the standard Maven repository configuration when
    working with the KIE console; the KIE project is deployed into the internal KIE
    Maven repository first, which synchronizes with the remote **Maven Repository**,
    and then, it provides remote public access (HTTP) to any application in order
    to resolve its dependencies.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了与 KIE 控制台一起工作时标准的 Maven 仓库配置；KIE 项目首先部署到内部 KIE Maven 仓库，然后与远程**Maven 仓库**同步，然后为任何应用程序提供远程公共访问（HTTP），以便解决其依赖项。
- en: '![KIE deployments](img/9578OS_04_01.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![KIE 部署](img/9578OS_04_01.jpg)'
- en: Artifacts and KIE modules
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工件和 KIE 模块
- en: 'A KIE module may depend on a number of additional Maven artifacts. The KIE
    workbench provides you with a view of your KIE Maven repository by selecting the
    **Authoring** | **Artifact Repository** menu item. The **Path** column displays
    the Maven repository URL for the artifact; just to clarify, let us have a look
    at the `napoli` Kie module that we released from our `ManagedVesuvio` repository:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 KIE 模块可能依赖于多个额外的 Maven 工件。KIE 工作台通过选择**创作** | **工件仓库**菜单项为您提供对您的 KIE Maven
    仓库的视图。**路径**列显示工件的 Maven 仓库 URL；为了澄清，让我们看一下我们从 `ManagedVesuvio` 仓库发布的 `napoli`
    Kie 模块：
- en: '**Artifact Name**: `napoli-1.0.0.jar`'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '**工件名称**：`napoli-1.0.0.jar`'
- en: '**Path**: `packt/napoli/1.0.0-SNAPSHOT/napoli-1.0.0.jar`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '**路径**：`packt/napoli/1.0.0-SNAPSHOT/napoli-1.0.0.jar`'
- en: 'This artifact is available at the following Maven artifact URL:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此工件可在以下 Maven 工件 URL 获取：
- en: '[PRE26]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Remember that while **Artifact Repository** is a snapshot of the KIE Maven repository
    content, the KIE **Deploy** | **Deployments** menu item exclusively displays the
    valid KIE modules (KJARs), which are loaded and validated from the KIE console
    runtime.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，虽然**工件仓库**是 KIE Maven 仓库内容的快照，但 KIE **部署** | **部署**菜单项仅显示有效的 KIE 模块（KJARs），这些模块是从
    KIE 控制台运行时加载和验证的。
- en: Tip
  id: totrans-206
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '`org.guvnor.m2repo.dir`: System properties set the path where the Maven repository
    folder will be stored; the default is `${jBPM-install-directory}/repositories/kie`.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.guvnor.m2repo.dir`：系统属性设置 Maven 仓库文件夹的路径；默认是 `${jBPM-install-directory}/repositories/kie`。'
- en: Deployment options
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署选项
- en: The KJAR artifacts must always be deployed to the KIE console's Maven repository
    so that we can centrally manage them and have the console behave consistently.
    Given this, thanks to both the introduction of the Maven repository style and
    the new breed of tools (the KIE console and the Eclipse BPMN tools), you can tailor
    the deployment process to your development environment with a nice degree of flexibility.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: KJAR 艺术品必须始终部署到 KIE 控制台的 Maven 仓库，以便我们可以集中管理它们，并使控制台的行为保持一致。鉴于这一点，多亏了 Maven
    仓库风格的引入和新一代工具（KIE 控制台和 Eclipse BPMN 工具），你可以以相当灵活的程度定制部署过程以适应你的开发环境。
- en: 'Here you have some viable deployment options:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可行的部署选项：
- en: Create a project (Mavenized by default) from the KIE console into a configured
    KIE Git repository; Git clone and pull from Eclipse, continue the development
    from Eclipse (add business models and so on), push changes to KIE (the KIE console
    automatically refreshes its repository view); build and deploy from KIE.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 KIE 控制台创建一个项目（默认为 Maven 化），到一个配置好的 KIE Git 仓库；从 Eclipse 克隆并拉取，从 Eclipse 继续开发（添加业务模型等），推送到
    KIE（KIE 控制台自动刷新其仓库视图）；从 KIE 构建和部署。
- en: Create a Maven project from Eclipse (remember to add the `kmodule.xml` file
    and the jBPM dependencies in `pom.xml`); create all your business artifacts, and
    develop a unit test from Eclipse; push to KIE; maybe make some fixes from KIE
    and then build and deploy.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Eclipse 创建一个 Maven 项目（请记住添加 `kmodule.xml` 文件和 `pom.xml` 中的 jBPM 依赖项）；创建所有你的业务资产，并从
    Eclipse 开发一个单元测试；推送到 KIE；也许在 KIE 中做一些修复，然后构建和部署。
- en: Create a Maven project from Eclipse as in the previous solution; install with
    Maven (either from Eclipse or from the command line); have the KIE console advertise
    the new KIE deployment module uploading the new artifact from the console (**Deploy**
    | **Deployments**).
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，从 Eclipse 创建一个 Maven 项目；使用 Maven 安装（无论是从 Eclipse 还是命令行）；让 KIE 控制台通过上传控制台中的新工件来宣传新的
    KIE 部署模块（**部署** | **部署**）。
- en: From the Kie console, create a repository clone from a remote Git repository;
    create a project, add assets, and then, save and commit. Deploy to Maven and push
    changes to the remote Git repository.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 Kie 控制台，从远程 Git 仓库创建一个仓库克隆；创建一个项目，添加资产，然后保存和提交。部署到 Maven 并将更改推送到远程 Git 仓库。
- en: Thanks to its Maven and Git integration, the KIE platform can fit very flexibly
    into a complex development environment.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多亏了其 Maven 和 Git 集成，KIE 平台可以非常灵活地适应复杂开发环境。
- en: Deployment by example – the Pizza projects
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以示例方式部署 – 披萨项目
- en: 'We had a preview of installing and deploying with the `ManagedVesuvio` repository
    release process where two KIE modules (one is dependent on the other) were released.
    Let us go hands on with a different module example: a KIE module (main project)
    and a plain module (dependency). These pizza example projects are as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们预览了使用 `ManagedVesuvio` 仓库发布流程安装和部署的过程，其中两个 KIE 模块（一个依赖于另一个）被发布。让我们通过一个不同的模块示例来亲自动手：一个
    KIE 模块（主项目）和一个普通模块（依赖项）。以下是一些披萨示例项目：
- en: '`Pizzadelivery`: The KJAR module (it contains the process definition)'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pizzadelivery`：KJAR 模块（它包含流程定义）'
- en: '`Pizzamodel`: A utility project with Java classes that model our business objects
    (Order, Pizza, and so on)'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Pizzamodel`：一个实用项目，包含用 Java 类建模我们的业务对象（订单、披萨等）的类。'
- en: The `Pizzadelivery` project depends upon the `Pizzamodel` project. Let us start
    by reviewing the example process definition (we will use the same process for
    our BAM example solution later, in the closing paragraph).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pizzadelivery` 项目依赖于 `Pizzamodel` 项目。让我们首先回顾一下示例流程定义（我们将在后面的段落中使用相同的流程作为我们的
    BAM 示例解决方案）。'
- en: The process definition – pizzadelivery
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 流程定义 – pizzadelivery
- en: 'The example process definition captures a typical takeaway pizza process:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 示例流程定义捕捉了一个典型的外卖披萨流程：
- en: An order is placed and Nino manages the incoming order by phone (the **Handle
    Incoming Order** task).
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下单后，Nino 通过电话管理收到的订单（**处理收到的订单**任务）。
- en: Maria gets the order details from Nino and hands off a sticky note to the pizza
    makers (the **Order Assignment** task).
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maria 从 Nino 那里获取订单详情，并将一个粘性便条交给披萨制作人员（**订单分配**任务）。
- en: A pizza maker (either Mario or Luigi) starts preparing the pizza (the **Make
    the Pizza** task), while, at the same time, Maria assigns the order delivery to
    a pizza boy (the **Assign the Delivery** task). The completion of both the delivery
    assignment task and the making pizza task (parallel tasks, more on this in [Chapter
    5](ch05.html "Chapter 5. BPMN Constructs"), *BPMN Constructs*) means that the
    pizza is ready to be delivered.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个披萨制作师（马里奥或路易吉）开始准备披萨（**制作披萨**任务），同时，玛丽亚将订单配送分配给一个披萨男孩（**分配配送**任务）。交付分配任务和制作披萨任务的完成（并行任务，更多内容请参阅
    [第 5 章](ch05.html "第 5 章。BPMN 构造")，*BPMN 构造*)意味着披萨已经准备好交付。
- en: Salvatore delivers the pizza (the **Pizza Delivery** task).![The process definition
    – pizzadelivery](img/9578OS_04_16.jpg)
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 萨尔瓦托雷交付披萨（**披萨配送**任务）。![流程定义 – pizzadelivery](img/9578OS_04_16.jpg)
- en: Deploying pizzas
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署披萨
- en: First, we make the dependency available through Maven, and then, we deploy the
    module through the KIE workbench. Let us import the sources into our new KIE repository
    (the one we set up in the *Creating a repository* section).
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过 Maven 使依赖项可用，然后，通过 KIE 工作台部署模块。让我们将源代码导入到我们的新 KIE 仓库（在 *创建仓库* 部分中设置的仓库）。
- en: Git and project configuration
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git 和项目配置
- en: 'At this stage, you should be quite familiar with importing a source project
    into the KIE repository:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经非常熟悉将源项目导入到 KIE 仓库中：
- en: 'Clone the examples repository from our example GitHub repository:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从我们的示例 GitHub 仓库克隆示例仓库：
- en: '[PRE27]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the cloned repository projects to the local (unmanaged) `masteringjbpm6`
    repository section:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将克隆的仓库项目添加到本地（未管理）的 `masteringjbpm6` 仓库部分：
- en: '[PRE28]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'By issuing a `git remote` command, we see the following:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 `git remote` 命令，我们可以看到以下内容：
- en: '[PRE29]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Let''s now push only the sample KIE module project to the new remote (origin):'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们只将样本 KIE 模块项目推送到新的远程仓库（origin）：
- en: '[PRE30]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The aim here is to send the KIE console (through Git) only the KIE project,
    and not to create additional sources of issues. We are now going to provide the
    KIE `pizzadelivery` project Maven dependencies (`pizzamodel.jar`) through our
    Maven repository.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 此处的目的是通过 Git 只发送 KIE 控制台（KIE 项目），而不是创建额外的问题来源。我们现在将通过我们的 Maven 仓库提供 KIE `pizzadelivery`
    项目的 Maven 依赖项（`pizzamodel.jar`）。
- en: Deploying the dependency
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署依赖项
- en: By switching to **Project Authoring** | **Project Explorer**, we can find the
    PizzaDelivery project (navigate through the **packt/masteringjbpm6** repository
    breadcrumb). Press the **Open Project Editor** button, and by selecting the **Project
    Settings** | **Dependencies** item from the dropdown list, we see that the `pizzadelivery`
    module depends on the `pizzamodel` artifact (see the picture below), which is
    not present in the Maven repository yet.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 通过切换到 **项目创作** | **项目资源管理器**，我们可以找到 PizzaDelivery 项目（通过 **packt/masteringjbpm6**
    仓库面包屑导航）。按下 **打开项目编辑器** 按钮，从下拉列表中选择 **项目设置** | **依赖项** 项，我们可以看到 `pizzadelivery`
    模块依赖于 `pizzamodel` 工件（见下图），而这个工件尚未存在于 Maven 仓库中。
- en: '![Deploying the dependency](img/9578OS_04_15.jpg)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![部署依赖项](img/9578OS_04_15.jpg)'
- en: 'The **Messages** tab reports this issue, accordingly:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**消息**选项卡报告了这个问题，相应地：'
- en: '**Unresolved dependency com.packt.masterjbpm6:pizzamodel:1.0.0-SNAPSHOT**'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '**未解决的依赖项 com.packt.masterjbpm6:pizzamodel:1.0.0-SNAPSHOT**'
- en: Providing artifacts
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提供工件
- en: 'What is going on now should be clear: the KIE dependency mechanism (the "scanner"
    we will talk about it in [Chapter 6](ch06.html "Chapter 6. Core Architecture"),
    *Core Architecture*) cannot resolve the `pizzadelivery` project''s dependencies
    (loaded from its `pom.xml` file) while scanning through the available Maven repositories;
    to address the issue, we are going to supply the missing artifact with two steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在发生的事情应该是清晰的：KIE 依赖项机制（我们将在 [第 6 章](ch06.html "第 6 章。核心架构")中讨论的“扫描器”，*核心架构*）在扫描可用的
    Maven 仓库时无法解决 `pizzadelivery` 项目的依赖项（从其 `pom.xml` 文件加载）；为了解决这个问题，我们将通过以下两个步骤提供缺失的工件：
- en: 'Maven install: Executing an `mvn clean install` at the `pizzamodel` project
    root (or using the Eclipse **Run As Maven Build** integrated feature) performs
    the build and install of the artifact in our Maven repository so that the dependency
    can be resolved at runtime.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maven 安装：在 `pizzamodel` 项目根目录下执行 `mvn clean install`（或使用 Eclipse **运行 Maven
    构建** 集成功能）将构建和安装的工件放入我们的 Maven 仓库，以便在运行时解决依赖项。
- en: 'Artifact repository upload: Go to the Kie console **Authoring** | **Artifact
    Repository** page and click the **Upload** button; select the `pizzamodel` JAR
    file from your Maven repository folder (`com/packt/masterjbpm6`). The KIE console
    will copy the artifact to its internal Maven repository.![Providing artifacts](img/9578OS_04_02.jpg)'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 艺术品仓库上传：转到 Kie 控制台 **创作** | **艺术品仓库** 页面，并点击 **上传** 按钮；从你的 Maven 仓库文件夹（`com/packt/masterjbpm6`）中选择
    `pizzamodel` JAR 文件。KIE 控制台将把工件复制到其内部 Maven 仓库。![提供工件](img/9578OS_04_02.jpg)
- en: The artifact is now available, and if you hit the **Refresh** button in the
    **Messages** panel, the issue should be fixed.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 现在工件已经可用，如果你在 **消息** 面板的 **刷新** 按钮上点击，问题应该会得到解决。
- en: Deploying
  id: totrans-250
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 部署
- en: We are now ready to deploy. In the **Projects Explorer** tab, select the **Tools**
    | **Project Editor** menu item. Check whether the `PizzaDelivery` module Maven
    GAV properties are correct and click the **Build & Deploy** button.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好部署。在 **项目资源管理器** 选项卡中，选择 **工具** | **项目编辑器** 菜单项。检查 `PizzaDelivery`
    模块的 Maven GAV 属性是否正确，然后点击 **构建 & 部署** 按钮。
- en: '![Deploying](img/9578OS_04_03.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![部署中](img/9578OS_04_03.jpg)'
- en: Please note that during deployment, the KIE console will try to resolve and
    verify all of your project dependencies, potentially hitting a number of remote
    Maven repositories (depending on your configuration) and taking some time to finish.
    Ensure that your Internet connection is active or set up a Maven proxy repository
    (highly recommended).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在部署过程中，KIE 控制台将尝试解决和验证你的所有项目依赖项，可能会访问多个远程 Maven 仓库（取决于你的配置），并花费一些时间来完成。确保你的互联网连接是活跃的，或者设置一个
    Maven 代理仓库（强烈推荐）。
- en: 'The application server console traces the following information:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 应用服务器控制台跟踪以下信息：
- en: '[PRE31]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Tip
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remember that you cannot deploy a deployment unit having the same ID (overwriting
    it), irrespective of whether it has active (running) process instances or not;
    an undeploy action is required (see the next section).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，无论是否有活动（运行）的流程实例，你都不能部署具有相同 ID 的部署单元（覆盖它）；需要执行卸载操作（参见下一节）。
- en: 'The logs confirm that the deployment was successfully completed; we can see
    our KJAR module listed in the **Deploy** | **Deployments** tab. Remember that
    for the deployment process to succeed (at least with jBPM releases up to 6.2),
    your `kmodule.xml` must either:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 日志确认部署已成功完成；我们可以在 **部署** | **部署** 选项卡中看到我们的 KJAR 模块。记住，为了部署过程成功（至少对于 6.2 版本的
    jBPM 来说），你的 `kmodule.xml` 必须要么：
- en: Declare an empty `<kmodule>` element
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个空的 `<kmodule>` 元素
- en: 'Declare a `<ksession>` element with the following attributes: `type="stateful"
    default="true"`'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明一个具有以下属性的 `<ksession>` 元素：`type="stateful" default="true"`
- en: '![Deploying](img/9578OS_04_04.jpg)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![部署中](img/9578OS_04_04.jpg)'
- en: For the sake of thoroughness, check your jBPM data store for the deployment
    entry in the `DEPLOYMENTSTORE` table; we should see that a new row has been added.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 为了彻底起见，检查 jBPM 数据存储中的 `DEPLOYMENTSTORE` 表中的部署条目；我们应该看到已经添加了一个新行。
- en: 'The table row has a DEPLOYMENTID column: `com.packt.masterjbpm6:pizzadelivery:1.0.0`
    and a DEPLOYMENTUNIT column, which contains the actual deployment descriptor:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 表行有一个 DEPLOYMENTID 列：`com.packt.masterjbpm6:pizzadelivery:1.0.0` 和一个 DEPLOYMENTUNIT
    列，其中包含实际的部署描述符：
- en: '[PRE32]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This is, actually, the third step of the deployment process (see the *KIE deployments*
    section).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是部署过程的第三步（参见 *KIE 部署* 部分）。
- en: Adding a KIE module manually
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 手动添加 KIE 模块
- en: Even though you have built and installed your KIE module from outside the KIE
    workbench (to your system Maven repository only, maybe using Eclipse IDE and a
    Maven install goal), you can always deploy it to KIE later. Manually adding a
    deployment unit means that you are making this (Maven installed) module available
    to the KIE runtime. From the **Deploy** | **Deployments** perspective, you can
    add new deployment units (the **New Deployment** button); just provide the Maven
    GAV for the project you want to deploy and, optionally, the knowledge base and
    the knowledge session name.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你已经在 KIE 工作台外部（仅在你的系统 Maven 仓库中，可能使用 Eclipse IDE 和 Maven 安装目标）构建和安装了你的 KIE
    模块，你仍然可以在以后将其部署到 KIE。手动添加部署单元意味着你正在使这个（Maven 安装的）模块对 KIE 运行时可用。从 **部署** | **部署**
    视图，你可以添加新的部署单元（**新建部署** 按钮）；只需提供你想要部署的项目 Maven GAV 即可，可选地提供知识库和知识会话名称。
- en: Tip
  id: totrans-268
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'In addition to this, you can select the `ksession` runtime strategy that fits
    your requirements: a Singleton, Per Request, or Per Process instance (See [Chapter
    6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture* for runtime
    strategies).'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以选择符合您要求的`ksession`运行时策略：单例、按请求或按流程实例（有关运行时策略，请参阅[第6章](ch06.html "第6章。核心架构")，*核心架构*）。
- en: The KIE workbench will provide a new `kmodule.xml` file and meta information,
    converting your plain JAR module to a new KIE module. You cannot create a new
    deployment unit if the matching Maven artifact is not available in the KIE Maven
    repository.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: KIE工作台将提供一个新的`kmodule.xml`文件和元信息，将您的普通JAR模块转换为新的KIE模块。如果匹配的Maven工件不在KIE Maven存储库中，则无法创建新的部署单元。
- en: Process and task management applied – the PizzaDelivery process
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用了流程和任务管理 - 披萨配送流程
- en: 'The KIE workbench allows you to manage process instances and interact with
    process tasks. You can do the following:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: KIE工作台允许您管理流程实例并与流程任务交互。您可以执行以下操作：
- en: Send a signal to a specific process instance or a bulk signal (broadcast to
    all process instances).
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向特定流程实例或批量信号（广播到所有流程实例）发送信号。
- en: Abort a specific process instance or perform a bulk abort—the abort terminates
    the instance(s) and all the pending tasks. All data pertaining to the process
    and its tasks are removed from the jBPM database tables.
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中断特定流程实例或执行批量中断 - 中断将终止实例（们）和所有挂起的任务。与流程及其任务相关的所有数据都将从jBPM数据库表中删除。
- en: Get the process details— the details page includes the auditing log taken from
    the default jBPM database auditing tables (we will talk about auditing in the
    last section and in [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*).
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取流程详细信息 - 详细信息页面包括从默认jBPM数据库审计表中获取的审计日志（我们将在最后一节和[第6章](ch06.html "第6章。核心架构")，*核心架构*）中讨论审计）。
- en: Start, release, and complete a task.
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始、释放和完成任务。
- en: Starting the Process
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启动流程
- en: Open the **Process Management** | **Process Definitions** tab and click the
    **Start** icon button next to our brand new deployed PizzaDelivery process definition;
    a new process instance starts.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 打开**流程管理** | **流程定义**选项卡，并单击我们新部署的PizzaDelivery流程定义旁边的**启动**图标按钮；一个新的流程实例开始。
- en: Undeployment
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 取消部署
- en: The undeployment action removes the deployment unit's configuration file only
    from the jBPM database table, leaving the Maven artifact in place.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 取消部署操作仅从jBPM数据库表中删除部署单元的配置文件，而将Maven工件保留在原位。
- en: User management
  id: totrans-281
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户管理
- en: 'We introduced the PizzaDelivery process in the example setup section; the process
    requires five different human actors:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在示例设置部分介绍了PizzaDelivery流程；该流程需要五个不同的真人演员：
- en: '**Incoming orders management**: Nino'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单管理**：Nino'
- en: '**Order assignments**: Maria'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单分配**：Maria'
- en: '**Pizza cooking**: Either Mario or Luigi'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**披萨烹饪**：马里奥或路易吉'
- en: '**Delivery assignments**: Maria'
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配送分配**：Maria'
- en: '**Pizza deliveries**: Salvatore'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**披萨配送**：Salvatore'
- en: In order to use the KIE console to exercise our first process instance, we need
    to add these process participants (the actors) to the KIE runtime. Edit the `user.properties`
    and the `roles.properties` files in the `$JBOSS_HOME\standalone\configuration`
    folder; these users will be automatically added by the KIE workbench to the task
    service database table (`ORGANIZATIONALENTITY`, more on this in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用KIE控制台来练习我们的第一个流程实例，我们需要将这些流程参与者（演员）添加到KIE运行时。编辑`$JBOSS_HOME\standalone\configuration`文件夹中的`user.properties`和`roles.properties`文件；这些用户将由KIE工作台自动添加到任务服务数据库表（`ORGANIZATIONALENTITY`，更多内容请参阅[第6章](ch06.html
    "第6章。核心架构")，*核心架构*）。
- en: 'Add the actors (specify the authentication password) to the `user.properties`
    file:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 将演员（指定认证密码）添加到`user.properties`文件中：
- en: '[PRE33]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Specify a role for the users in the `roles.properties` file (the default role
    `user` is enough to perform tasks):'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在`roles.properties`文件中指定用户的角色（默认角色`user`足以执行任务）：
- en: '[PRE34]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tip
  id: totrans-293
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: There is no need to restart the application server to make it pick up the new
    settings.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 无需重新启动应用程序服务器即可使其获取新设置。
- en: Task management
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务管理
- en: 'To complete the process instance, perform the steps in the following order:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成流程实例，请按照以下顺序执行步骤：
- en: '**Log in as Nino**: **start** and **complete** the **Handle Incoming Order**
    task'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以Nino身份登录**：**启动**和**完成****处理 incoming订单**任务'
- en: '**Log in as Maria**: **claim** and **complete** the **Assign Order** task'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以Maria身份登录**：**认领**和**完成****分配订单**任务'
- en: '**Log in as Mario (or Luigi)**: **claim** and **complete** the **Make Pizza**
    task'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以马里奥（或路易吉）身份登录**：**认领**并**完成**制作披萨的任务'
- en: '**Log in as Maria**: **claim** and **complete** the **Assign Delivery** task'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以玛丽亚身份登录**：**认领**并**完成**分配递送的任务'
- en: '**Log in as Salvatore**: **claim** and **complete** the **Deliver the pizza**
    task'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**以萨尔瓦托雷身份登录**：**认领**并**完成**递送披萨的任务'
- en: 'All tasks are completed. The process instance ends and looking at the process
    instance detail tab, we can see the instance log traces (events are displayed
    in the reverse chronological order):'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务已完成。流程实例结束，查看流程实例详情标签页，我们可以看到实例日志跟踪（事件按逆时间顺序显示）：
- en: 'Instance log:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 实例日志：
- en: '[PRE35]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `Split` log traces the activation of the parallel diverging gateway. The
    `Join` logs trace the activation of the parallel converging gateway's incoming
    connections. The trace logs are loaded from the `NODEINSTANCELOG` table.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`Split` 日志记录并行分叉网关的激活。`Join` 日志记录并行汇聚网关的传入连接的激活。跟踪日志是从 `NODEINSTANCELOG` 表中加载的。'
- en: As you may have realized, it is not that easy to perform a full test of a process
    definition from within the KIE workbench; switching from actors back and forth
    is a cumbersome and time-consuming task…just think about a complex process with
    a lot of human tasks and actors or groups. We will see how to overcome these issues
    by using test automation with the BAM example and in the next chapter.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你可能意识到的，从 KIE 工作台中完全测试流程定义并不容易；在演员之间切换是一个繁琐且耗时的任务……想想一个包含大量人工任务和演员或群体的复杂流程。我们将通过使用
    BAM 示例和下一章中的测试自动化来了解如何克服这些问题。
- en: Managing jobs and asynchronous commands' execution
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理作业和异步命令执行
- en: 'Starting from jBPM 6, the platform features a new scheduler service (called
    `Executor`), which lets you schedule, execute, and manage asynchronous jobs tasks.
    Executor can be used either as a general-purpose Java batch scheduling facility
    or as a service able to execute asynchronous process tasks (see [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN constructs*, the *Async task* section for
    more details). The asset management feature, for instance, internally schedules
    different types of commands (to get an idea, open the **Deploy** | **Jobs** window,
    as shown in the following screenshot): `CreateBranchCommand`, `ListCommitsCommand`,
    `BuildProjectCommand`, `MavenDeployProjectCommand`, and so on.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 从 jBPM 6 开始，平台提供了一种新的调度服务（称为 `Executor`），它允许你安排、执行和管理异步作业任务。Executor 可以用作通用
    Java 批处理调度设施，也可以用作能够执行异步流程任务的服务（有关更多详细信息，请参阅[第 5 章](ch05.html "第 5 章。BPMN 构造")，*BPMN
    构造*，*异步任务*部分）。例如，资产管理功能内部安排不同类型的命令（为了获得一些想法，请打开**部署**|**作业**窗口，如图所示）：`CreateBranchCommand`、`ListCommitsCommand`、`BuildProjectCommand`、`MavenDeployProjectCommand`
    等。
- en: '![Managing jobs and asynchronous commands'' execution](img/9578OS_04_19.jpg)'
  id: totrans-309
  prefs: []
  type: TYPE_IMG
  zh: '![管理作业和异步命令执行](img/9578OS_04_19.jpg)'
- en: The Executor service executes preconfigured `Command` classes; a `Command` is
    a Java class that executes a set of business statements running outside the jBPM
    process context and communicating with Executor through a set of interfaces (`CommandContext`
    and `ExecutionResults`), which enforce parameter passing.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: Executor 服务执行预先配置的 `Command` 类；`Command` 是一个 Java 类，它执行一组在 jBPM 流程上下文之外运行的业务语句，并通过一系列接口（`CommandContext`
    和 `ExecutionResults`）与 Executor 通信，这些接口强制执行参数传递。
- en: The `Job` classes are persisted in the `REQUESTINFO` jBPM database table, while
    the resulting errors problems are persisted in the `ERRORINFO` table.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`Job` 类持久化存储在 `REQUESTINFO` jBPM 数据库表中，而结果错误问题则持久化存储在 `ERRORINFO` 表中。'
- en: Creating, scheduling, and launching a new Job
  id: totrans-312
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建、安排和启动新的作业
- en: The plain and simple, general-purpose `Job` definition (no jBPM context available)
    requires you to provide at least the class name for the class to schedule (see
    the following screenshot).
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 简单明了的通用 `Job` 定义（没有 jBPM 上下文可用）需要你提供要安排的类的类名（请参阅以下截图）。
- en: Type the class name `com.packt.masterjbpm6.command.SimpleCommand` into the **Type**
    field and `SimpleCommand` in the **Name** field. The `Job` class must be in the
    classpath for the KIE workbench application (`jbpm-console.war`), so either copy
    the `pizzamodel.jar` file in `WEB-INF/lib` for the exploded WAR or copy it in
    the `dependencies` folder of the jBPM setup folder and rebuild the console app
    by using the Ant target `install.jBPM-console.into.jboss` you can find in the
    jBPM `build.xml` file.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**类型**字段中输入类名`com.packt.masterjbpm6.command.SimpleCommand`，在**名称**字段中输入`SimpleCommand`。`Job`类必须包含在KIE工作台应用程序（`jbpm-console.war`）的类路径中，因此可以将`pizzamodel.jar`文件复制到`WEB-INF/lib`中的
    exploded WAR，或者将其复制到jBPM设置文件夹的`dependencies`文件夹中，并使用在jBPM `build.xml`文件中可找到的Ant目标`install.jBPM-console.into.jboss`重新构建控制台应用程序。
- en: Set the **Due On** (schedule) time and, optionally, the number of **Retries**
    (the number of times the `Job` class can be restarted after failure), and the
    parameters.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置**到期时间**（调度）和可选的**重试次数**（`Job`类在失败后可以重新启动的次数），以及参数。
- en: The parameters (the contextual data) are passed upon execution to the `Job`
    instance through the `CommandContext` class. Parameters must be serializable.![Creating,
    scheduling, and launching a new Job](img/9578OS_04_05.jpg)
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 参数（上下文数据）通过`CommandContext`类在执行时传递给`Job`实例。参数必须是可序列化的。![创建、调度和启动新的Job](img/9578OS_04_05.jpg)
- en: 'After being created, the task turns into the **QUEUED** state (as shown in
    the following screenshot) and will be executed at the scheduled time. The different
    Job statuses are as follows: **QUEUED**, **DONE**, **CANCELLED**, **ERROR**, **RETRYING**,
    and **RUNNING**.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，任务变为**队列**状态（如下面的截图所示），将在预定时间执行。不同的Job状态如下：**队列**、**完成**、**取消**、**错误**、**重试**和**运行**。
- en: '![Creating, scheduling, and launching a new Job](img/9578OS_04_06.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![创建、调度和启动新的Job](img/9578OS_04_06.jpg)'
- en: Process definition conversion
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 流程定义转换
- en: 'Conversion deals with moving a process definition from an old version format
    to a new version format. jBPM 6 gives us some (pretty much experimental) options
    when upgrading older process definitions to a new jBPM release format:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 转换涉及将流程定义从旧版本格式移动到新版本格式。当将较旧的流程定义升级到新的jBPM发布格式时，jBPM 6为我们提供了一些（相当实验性的）选项：
- en: Importing from the old proprietary jBPM JPDL 3/4 to BPMN2 with the jBPM web
    process designer menu function
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用jBPM Web流程设计器的菜单功能从旧的专有jBPM JPDL 3/4导入到BPMN2
- en: Ad hoc migration with `jBPM5migrationtoolproject` and `jbpmmigration-0.13.jar`
    or a newer release (API mapping is also supported)
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`jBPM5migrationtoolproject`和`jbpmmigration-0.13.jar`或更新的版本进行即席迁移（也支持API映射）
- en: The goal of the `jBPM5migrationtoolproject` project is to provide some migration
    tooling to the existing users of jBPM for moving from jBPM5.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`jBPM5migrationtoolproject`项目的目标是向现有的jBPM用户提供一些迁移工具，以便从jBPM5迁移。'
- en: Note
  id: totrans-324
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'The project home and Wiki pages are available here: [https://developer.jboss.org/wiki/jBPM5migrationtoolproject](https://developer.jboss.org/wiki/jBPM5migrationtoolproject).
    The project is hosted on GitHub: [https://github.com/droolsjbpm/jbpmmigration](https://github.com/droolsjbpm/jbpmmigration).'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 项目主页和Wiki页面在此处可用：[https://developer.jboss.org/wiki/jBPM5migrationtoolproject](https://developer.jboss.org/wiki/jBPM5migrationtoolproject)。该项目托管在GitHub上：[https://github.com/droolsjbpm/jbpmmigration](https://github.com/droolsjbpm/jbpmmigration)。
- en: Process definition versioning and instance upgrading
  id: totrans-326
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程定义版本控制和实例升级
- en: 'Depending on enterprise business requirements and business organizations, the
    processes may change at a very variable rate over time; several business migration
    cases need to be addressed:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 根据企业业务需求和业务组织，流程可能会随着时间的推移以非常不同的速度发生变化；需要解决几个业务迁移案例：
- en: A complex critical business process may take months to complete (maybe due to
    manual tasks), yet the business staff needs to make an updated process definition
    available as soon as possible because some old legacy systems must be integrated
    into the flow
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个复杂的业务流程可能需要数月才能完成（可能由于手动任务），然而，业务人员需要尽快提供更新的流程定义，因为一些旧的遗留系统必须集成到流程中。
- en: The process definition needs a fix but a number of instances of that very same
    process definition are active and we do not want to abort them and have the user
    restart the workflow from the beginning
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 流程定义需要修复，但该流程定义的多个实例正在运行，我们不希望终止它们并让用户从工作流开始处重新启动。
- en: 'Apart from bumping the process definition version property (numeric), which
    is just a mnemonic and does not affect the process instance behavior, it''s good
    practice to name your process ID (string) in order to reflect the version number,
    since the engine itself does not provide any version tracking mechanism, for example:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 除了增加过程定义版本属性（数字）之外，这只是一个助记符，不会影响流程实例的行为，因此，为了反映版本号，命名您的流程ID（字符串）是一个好的做法，因为引擎本身不提供任何版本跟踪机制，例如：
- en: '[PRE36]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This way you can have a flexible method of switching instantiations across different
    versions of the process definition while preserving auditing data and maintaining
    separation. Each instance is, in fact, bound to its process definition (by the
    ID), and this must not be overwritten until the instance is completed.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就可以在保留审计数据并保持分离的同时，灵活地在不同版本的过程定义之间切换实例化。实际上，每个实例都与其过程定义（通过ID）绑定，并且在实例完成之前不得覆盖。
- en: To support users in migrating a process instance across different process definitions,
    jBPM 6 features the `WorkflowProcessInstanceUpgrader` class.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持用户在不同过程定义之间迁移流程实例，jBPM 6引入了`WorkflowProcessInstanceUpgrader`类。
- en: The `WorkflowProcessInstanceUpgrader`.`upgradeProcessInstance` method first
    disconnects the process instance from the signals, and event handler management
    then traverses the process instance node-by-node trying to map the nodes to the
    target process definition nodes by getting `uniqueID` from the mapping data that
    you provide.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`WorkflowProcessInstanceUpgrader`.`upgradeProcessInstance` 方法首先将流程实例从信号中断开连接，然后事件处理管理器逐个遍历流程实例节点，尝试通过从您提供的映射数据中获取
    `uniqueID` 来将节点映射到目标流程定义节点。'
- en: '`uniqueID` is an internal identifier generated by the engine by concatenating
    the IDs of the parent (container) elements of the node, for example:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`uniqueID` 是由引擎通过连接节点父（容器）元素的ID生成的内部标识符，例如：'
- en: '[PRE37]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This solution is, all in all, far from complete for complex process definitions;
    you are suggested to implement your own process migration whenever possible.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂的过程定义，这种解决方案总体上还远未完善；建议在可能的情况下实施自己的过程迁移。
- en: BAM
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BAM
- en: The business activity monitor (BAM) provides the tools to build out of the system,
    customizable KPI, which are useful for the management staff in taking proactive
    decisions. The term was defined by Gartner Inc. ([http://www.gartner.com/it-glossary/bam-business-activity-monitoring](http://www.gartner.com/it-glossary/bam-business-activity-monitoring))
    and refers to the real-time aggregation, analysis, and representations of the
    enterprise data (possibly relating it to the system stakeholders and the customers).
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 业务活动监控器（BAM）提供了构建系统外可定制的KPI的工具，这对于管理层在采取主动决策时非常有用。该术语由Gartner Inc. 定义（[http://www.gartner.com/it-glossary/bam-business-activity-monitoring](http://www.gartner.com/it-glossary/bam-business-activity-monitoring)），指的是企业数据的实时聚合、分析和表示（可能将其与系统利益相关者和客户相关联）。
- en: The BAM's target is to produce (near) real-time information about the status
    and the outcome of the operations, processes, and transactions of a jBPM business
    system; this supports the corporate management staff in taking reactive decisions
    (**Decision Support System** (**DSS**)), and it helps staff to identify critical
    areas (possible sources of problems).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: BAM的目标是产生（近）实时信息，关于jBPM业务系统的操作、流程和交易的状态和结果；这支持企业管理层采取反应性决策（**决策支持系统**（**DSS**）），并帮助员工识别关键区域（可能的问题来源）。
- en: 'Examples include the following:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例：
- en: Enterprises with a JIT production business model must constantly monitor their
    manufacturing and procurement processes and relate them to incoming orders and
    business providers
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 采用JIT生产业务模式的企业必须持续监控其生产和采购流程，并将它们与 incoming orders 和 business providers 相关联
- en: Telco companies need to overview their services, providing operations in order
    to have an up-to-the-minute view of their customers
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电信公司需要概述其服务，提供操作以便能够及时了解其客户
- en: BAM typically needs to be integrated with BI/data warehouse tools; the first
    breed of tools is real time (data-oriented heterogeneous sources), while the second
    is historical business data. With the advent of NoSQL database engines, big data,
    and cloud-based platforms, this trend is today rapidly shifting away and turning
    to a new breed of tools handling streaming processing (real time) as well as batch
    processing (**Complex Event Processing** (**CEP**)).
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: BAM通常需要与BI/数据仓库工具集成；第一类工具是实时（面向数据的多源异构），而第二类是历史业务数据。随着NoSQL数据库引擎、大数据和基于云的平台的出现，这一趋势今天正在迅速转变，转向处理流处理（实时）以及批量处理（**复杂事件处理**（**CEP**））的新一代工具。
- en: BPM and BAM
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BPM和 BAM
- en: The primary jBPM source for BAM data is the engine audit service and the jBPM
    database tables.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: BAM的主要jBPM数据来源是引擎审计服务和jBPM数据库表。
- en: Audit data may be relevant for some business systems and useless for others.
    The auditing and logging history data could be a demanding task for your system/platform
    software and be very expensive in terms of I/O and/or allocated resources (disk
    space, DB resources, and so on). The jBPM audit logging service database schema
    is just a default implementation; the type and amount of the default audit data
    may not meet your needs, and your business application might require a finer (or
    just different) level of information to be captured.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 审计数据可能对某些业务系统很重要，而对其他系统则无足轻重。审计和日志历史数据可能对您的系统/平台软件是一项繁重的任务，并且在I/O和/或分配的资源（磁盘空间、数据库资源等）方面可能非常昂贵。jBPM审计日志服务数据库模式只是一个默认实现；默认审计数据的类型和数量可能不符合您的需求，您的业务应用程序可能需要捕获更精细（或只是不同）的信息级别。
- en: 'The jBPM audit service module (`jbpm-audit-6.2.0.jar`) provides the implementers
    with two ways to produce audit data by collecting the engine events:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM审计服务模块（`jbpm-audit-6.2.0.jar`）为实施者提供了两种通过收集引擎事件来生成审计数据的方法：
- en: '**JPA**: Synchronous logger that is bound to the engine transaction and persists
    audit events as part of a runtime engine transaction'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JPA**：同步记录器，绑定到引擎事务，并将审计事件作为运行时引擎事务的一部分进行持久化'
- en: '**JMS**: Asynchronous logger that can be configured to place messages on the
    queue either with respect to active transaction (only after the transaction is
    committed) or directly as they are generated'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JMS**：异步记录器，可以配置为将消息放置在队列中，要么与活动事务相关（仅在事务提交后），要么直接生成'
- en: Note
  id: totrans-351
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please refer to [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core
    Architecture*, for a thorough explanation of the jBPM auditing and logging services.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[第6章](ch06.html "第6章。核心架构")，*核心架构*，以获得对jBPM审计和日志服务的全面解释。
- en: 'Carefully evaluate the impact of the required audit service granularity on
    the engine performance and plan your implementation accordingly; for production
    environments, consider the following:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细评估所需审计服务粒度对引擎性能的影响，并据此规划您的实施；对于生产环境，请考虑以下方面：
- en: Use a different database from the engine DB for your auditing data; this facilitates
    the DB management tasks (for example, no Foreign Key issues)
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用与引擎数据库不同的数据库来存储您的审计数据；这有助于简化数据库管理任务（例如，没有外键问题）
- en: Use asynchronous event processing for better throughput
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用异步事件处理以获得更好的吞吐量
- en: 'Where audit data really matters, some systems typically require the process
    history log to be maintained for a considerable amount of time (years); planning
    a reliable database strategy (backup/recovery) is a must. The following list provides
    you with some first-hand tips:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在审计数据真正重要的地方，一些系统通常需要保留流程历史日志相当长的时间（数年）；规划一个可靠的数据库策略（备份/恢复）是必须的。以下列表为您提供了一些实用的建议：
- en: '**No audit data required**: Turnoff JPA audit persistency options (configure
    the jBPM `persistence.xml` file)'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无需审计数据**：关闭JPA审计持久化选项（配置jBPM的`persistence.xml`文件）'
- en: '**Default audit data**: Enable JPA audit persistence'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认审计数据**：启用JPA审计持久化'
- en: '**Custom/finer level but no extra processing required**: Turnoff JPA audit
    options, and follow the custom audit implementation notes in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义/更精细的级别但无需额外处理**：关闭JPA审计选项，并遵循[第6章](ch06.html "第6章。核心架构")中的自定义审计实现说明，*核心架构*'
- en: '**Custom/finer level and extra processing required (BI)**: Turnoff JPA audit
    options, and follow the custom audit implementation notes in [Chapter 6](ch06.html
    "Chapter 6. Core Architecture"), *Core Architecture*; writing to a different database
    is suggested'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制/更细粒度级别和额外处理需要（BI）**：关闭JPA审计选项，并遵循[第6章](ch06.html "第6章。核心架构")中的自定义审计实现说明，*核心架构*；建议写入不同的数据库'
- en: Please check [Chapter 6](ch06.html "Chapter 6. Core Architecture"), *Core Architecture*,
    for implementation details and samples.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅[第6章](ch06.html "第6章。核心架构")，*核心架构*，以获取实现细节和示例。
- en: Default history logs
  id: totrans-362
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认历史日志
- en: The engine audit log/history information is stored in the `PROCESSINSTANCELOG`,
    `NODEINSTANCELOG`, and `VARIABLEINSTANCELOG` tables.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎审计日志/历史信息存储在`PROCESSINSTANCELOG`、`NODEINSTANCELOG`和`VARIABLEINSTANCELOG`表中。
- en: Note
  id: totrans-364
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please check [Chapter 8](ch08.html "Chapter 8. Integrating jBPM with Enterprise
    Architecture"), *Integrating jBPM with Enterprise Architecture*, of the jBPM 6.1
    user guide for details regarding the jBPM database schema.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅jBPM 6.1用户指南的[第8章](ch08.html "第8章。将jBPM与企业架构集成")，以获取有关jBPM数据库模式的详细信息。
- en: Lesser-known yet very handy tables for our BAM purposes are the `TASKEVENT`
    and `AUDITTAASKIMPL` tables.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的BAM目的而言，一些不太为人所知但非常实用的表是`TASKEVENT`和`AUDITTAASKIMPL`表。
- en: The `TASKEVENT` and `AUDITTAASKIMPL` tables are managed by `org.jbpm.services.task.audit.JPATaskLifeCycleEventListener`,
    a task life cycle listener created and attached to the `TaskService` instance
    during runtime when JPA `EntityManager` is set.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`TASKEVENT`和`AUDITTAASKIMPL`表由`org.jbpm.services.task.audit.JPATaskLifeCycleEventListener`管理，这是一个在运行时创建并附加到`TaskService`实例的任务生命周期监听器，当时设置了JPA
    `EntityManager`。'
- en: 'The `TASKEVENT` table logs the task event transitions:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`TASKEVENT`表记录任务事件转换：'
- en: '[PRE38]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Each row contains the key to the parent task (the **TASKID** column); you can
    take a look at an example full table dump file (`taskevent_dump.txt`) placed in
    the `pizzadelivery` Eclipse project. In the following paragraph, we will cover
    the BAM dashboard and build a customization example by using our PizzaDelivery
    business process audit data.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 每一行都包含父任务的键（**TASKID**列）；您可以查看放置在`pizzadelivery` Eclipse项目中的示例完整表转储文件（`taskevent_dump.txt`）。在以下段落中，我们将介绍BAM仪表板，并通过使用我们的PizzaDelivery业务流程审计数据构建一个定制示例。
- en: BAM and Dashbuilder – the pizza maker's performance index
  id: totrans-371
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: BAM和Dashbuilder – 比萨饼制作者的性能指标
- en: jBPM 6 is shipped with a jBPM pre-configured web application built with Dashbuilder.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: jBPM 6附带一个使用Dashbuilder构建的预配置Web应用程序。
- en: Tip
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Dashbuilder is the Red Hat open source platform for building business dashboards
    and reports; at the time of writing this book, the latest dashboard release is
    6.2.0; please refer to the following product home site:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: Dashbuilder是Red Hat开源平台，用于构建业务仪表板和报告；在撰写本书时，最新的仪表板版本是6.2.0；请参阅以下产品主页：
- en: '[http://www.dashbuilder.org](http://www.dashbuilder.org).'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.dashbuilder.org](http://www.dashbuilder.org).'
- en: The process and task dashboard is in no way a production-ready BAM platform
    but helps the jBPM system stakeholders (as well as the jBPM administrators) to
    get a consistent preview of the underlying auditing default data at nearly no
    cost.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 流程和任务仪表板绝不是生产就绪的BAM平台，但它有助于jBPM系统利益相关者（以及jBPM管理员）几乎无需成本地获得底层审计默认数据的持续预览。
- en: Tip
  id: totrans-377
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Please check Chapter 16 of the jBPM 6.2 user guide for an introduction to the
    jBPM dashboard.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅jBPM 6.2用户指南的第16章，了解jBPM仪表板的介绍。
- en: To illustrate a hands-on sample case, we will now generate some audit data and
    add a new chart (backed by a new data provider) on our jBPM dashboard; the chart
    will display the performance index of all the process actors with respect to the
    assigned tasks.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明一个实际案例，我们现在将生成一些审计数据，并在我们的jBPM仪表板上添加一个新的图表（由新的数据提供者支持）；该图表将显示所有流程参与者相对于分配任务的性能指标。
- en: Example projects
  id: totrans-380
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 示例项目
- en: The book ships with several example Java projects; starting from this paragraph,
    we will use Maven projects that you can load and run into Eclipse without deploying
    them through the KIE workbench. The examples are jUnit-based test classes with
    single or multiple test methods each. To resolve all the required jBPM library
    dependencies, you can add the `org.jbpm:jbpm-test:6.2.0.Final` dependency to the
    `pom.xml` file generated by your Eclipse project.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 该书附带几个示例 Java 项目；从本段开始，我们将使用 Maven 项目，您可以在 Eclipse 中加载和运行这些项目，而无需通过 KIE 工作台部署。示例是
    jUnit 基础的测试类，每个类包含单个或多个测试方法。要解决所有必需的 jBPM 库依赖项，您可以将 `org.jbpm:jbpm-test:6.2.0.Final`
    依赖项添加到由您的 Eclipse 项目生成的 `pom.xml` 文件中。
- en: Configuring persistence
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 配置持久化
- en: 'The examples use Bitronix and the H2 database for persistence; the database
    connection settings can be configured for all the projects in the `localJBPM.properties`
    file. This file is found in the `test-common` project of the [Chapter 5](ch05.html
    "Chapter 5. BPMN Constructs"), *BPMN Constructs* examples onward and in the `Pizza`
    project for this chapter, in the `examples` folder. The main settings are as follows:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 示例使用 Bitronix 和 H2 数据库进行持久化；数据库连接设置可以在 `localJBPM.properties` 文件中为所有项目进行配置。此文件位于
    [第 5 章](ch05.html "第 5 章。BPMN 构造") 的 `test-common` 项目中，从 *BPMN 构造* 示例开始，以及本章的
    `Pizza` 项目中的 `examples` 文件夹。主要设置如下：
- en: '[PRE39]'
  id: totrans-384
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Please note that `persistence.datasource.name` must be equal to the persistence
    unit `jta-data-source` element in the project `persistence.xml` file:'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`persistence.datasource.name` 必须等于项目 `persistence.xml` 文件中的持久化单元 `jta-data-source`
    元素：
- en: '[PRE40]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Generating audit data – ProcessBAM unit test
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 生成审计数据 – ProcessBAM 单元测试
- en: We leverage the default jBPM JPA audit listener and generate some audit data
    by using our `PizzaDelivery` process. Import the Maven `Pizza` project into Eclipse
    and run the `ProcessBAM` unit test; this class manages five threads simulating
    the operations of the five process actors. It introduces some delay in the task
    completion just to get realistic audit data (the time is expressed in milliseconds;
    the test takes a couple of minutes to run).
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们利用默认的 jBPM JPA 审计监听器，通过我们的 `PizzaDelivery` 流程生成一些审计数据。将 Maven `Pizza` 项目导入
    Eclipse 并运行 `ProcessBAM` 单元测试；此类管理五个线程，模拟五个流程角色的操作。它引入了一些任务完成的延迟，以便获得真实的审计数据（时间以毫秒表示；测试运行需要几分钟）。
- en: The test also makes Luigi slightly slower than Mario in making pizzas, so we
    can bring this difference to notice when evaluating the KPI.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 测试还使路易吉在制作披萨时比马里奥略慢，因此在评估 KPI 时我们可以注意到这种差异。
- en: '[PRE41]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'A number of 10 `pizzadelivery` processes shall be created and all related tasks
    completed:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 应创建 10 个 `pizzadelivery` 流程，并完成所有相关任务：
- en: 10 incoming orders managed by Nino
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Nino 管理的 10 个订单
- en: 10 order assignments performed by Maria
  id: totrans-393
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maria 执行的 10 个订单分配
- en: 10-pizza cooking shared (randomly) by Mario or Luigi
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mario 或路易吉共享的 10 个披萨烹饪（随机）
- en: 10 delivery assignments performed by Maria
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maria 执行的 10 个配送分配
- en: 10 pizza deliveries performed by Salvatore
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salvatore 完成的 10 个披萨配送
- en: Let us see the steps required to configure and create the dashboard chart starting
    from the auditing data.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看从审计数据开始配置和创建仪表板图表所需的步骤。
- en: Writing the business query
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写业务查询
- en: The query (H2 SQL syntax and functions) calculates the duration (from the STARTED
    to the COMPLETED task event transition, in milliseconds) for each task of the
    10 completed processes.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 查询（H2 SQL 语法和函数）计算每个任务从 STARTED 到 COMPLETED 任务事件转换的持续时间（以毫秒为单位）。
- en: '[PRE42]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Starting from this data provider query, we are going to define two KPIs:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 从此数据提供者查询开始，我们将定义两个 KPI：
- en: Total time spent on tasks by the user
  id: totrans-402
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户在任务上花费的总时间
- en: Total number of tasks performed by the user
  id: totrans-403
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户执行的任务总数
- en: Adding the data provider
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加数据提供者
- en: 'Log into the KIE workbench (admin/admin) and head to **Business Dashboard**
    (in the **Dashboards** menu):'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 登录到 KIE 工作台（用户名：admin，密码：admin）并前往 **业务仪表板**（在 **仪表板** 菜单中）：
- en: Select the **Administration** | **Data Providers** link from the left navigation
    menu pane.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧导航菜单面板中选择 **管理** | **数据提供者** 链接。
- en: 'Create a new data provider: **name**=`pizzerianapoli`, **type**=`SQL query`,
    and as the **Query** field, paste the preceding SQL query; on pressing the **Attempt
    data load** button, the following message should appear:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的数据提供者：**名称**=`pizzerianapoli`，**类型**=`SQL 查询`，并在 **查询** 字段中粘贴前面的 SQL 查询；按下
    **尝试数据加载** 按钮，应出现以下消息：
- en: '[PRE43]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The **Number of entries:50** message confirms that the query result is correct:
    10 processes with five tasks each gives 50 tasks. Click **Save** to confirm the
    data provider setting. Clicking on the **Edit data providers** button will open
    the data provider list of the defined columns:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: “**条目数：50**”的消息确认了查询结果是正确的：10个进程，每个进程有5个任务，总共50个任务。点击**保存**以确认数据提供者设置。点击**编辑数据提供者**按钮将打开定义的列的数据提供者列表：
- en: '![Adding the data provider](img/9578OS_04_07.jpg)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![添加数据提供者](img/9578OS_04_07.jpg)'
- en: We are now ready to define the KPIs, but before that, we need a new blank page
    on the dashboard on which we are going to place the charts.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备定义KPI，但在那之前，我们需要在仪表板上创建一个新的空白页面，我们将在这个页面上放置图表。
- en: Creating a new dashboard page and the KPI panels
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建新的仪表板页面和KPI面板
- en: Let us create a dashboard page that is going to host the charts.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个将要托管图表的仪表板页面。
- en: Create a new page by clicking the **blank page** icon next to the **Page** list
    in the dashboard top toolbar (see the following screenshot):![Creating a new dashboard
    page and the KPI panels](img/9578OS_04_08.jpg)
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击仪表板顶部工具栏中**页面**列表旁边的**空白页面**图标来创建新页面（参见以下截图）：![创建新的仪表板页面和KPI面板](img/9578OS_04_08.jpg)
- en: Set the page settings (check the following screenshot), and click the **Create
    new page** button:![Creating a new dashboard page and the KPI panels](img/9578OS_04_09.jpg)
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置页面设置（查看以下截图），然后点击**创建新页面**按钮：![创建新的仪表板页面和KPI面板](img/9578OS_04_09.jpg)
- en: Click on the new page in the left navigation menu, insert the page URL in **Page
    properties**, and save changes.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧导航菜单中点击新页面，将页面URL插入**页面属性**中，并保存更改。
- en: Go back to the workspace and select the new page from the top page dropdown
    list; then, select the **Create a new panel in** **current page** item; a list
    with all of the available panels will pop up.![Creating a new dashboard page and
    the KPI panels](img/9578OS_04_10.jpg)
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回工作区，从顶部页面下拉列表中选择新页面；然后，选择**在当前页面创建新面板**项；将弹出一个包含所有可用面板的列表。![创建新的仪表板页面和KPI面板](img/9578OS_04_10.jpg)
- en: Drag the **Create Panel** item (on top of the **Components** list) and drop
    it on the highlighted target page panel that you wish your KPI to display; the
    dropped item prompts you for the source data provider. Selecting our `pizzerianapoli`
    data provider brings the KPI configuration panel to the front.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**创建面板**项（位于**组件**列表顶部）拖放到你希望KPI显示的突出显示的目标页面面板上；放置的项会提示你选择数据源提供者。选择我们的`pizzerianapoli`数据提供者会将KPI配置面板带到前台。
- en: 'The relevant settings details for the KPIs are as follows:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: KPI的相关设置细节如下：
- en: '**Total time spent on** **tasks by the user** KPI configuration:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户在任务上花费的总时间** KPI配置：'
- en: '**Data provider**: pizzerianapoli'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据提供者**：pizzerianapoli'
- en: '**KPI name**: Total Time spent on Tasks by User (ms)'
  id: totrans-422
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KPI名称**：用户在任务上花费的总时间（毫秒）'
- en: '**Bar Chart**'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**柱状图**'
- en: '**Domain (X Axis)**: userid'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围（X轴）**：userid'
- en: '**Range (Y Axis)**: elapsed; Edit Range (Scalar function: sum)'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围（Y轴）**：经过时间；编辑范围（标量函数：求和）'
- en: '**Renderer**: Open Flash'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染器**：打开Flash'
- en: '**Chart type**: Box with perimeters'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图表类型**：带边界的箱形图'
- en: '**Number of tasks performed by the user** KPI configuration:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '**用户执行的任务数** KPI配置：'
- en: '**Data provider**: pizzerianapoli'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据提供者**：pizzerianapoli'
- en: '**KPI name**: Tasks By User'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**KPI名称**：按用户划分的任务'
- en: '**Bar Chart**'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**柱状图**'
- en: '**Domain (X Axis)**: userid'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围（X轴）**：userid'
- en: '**Range (Y Axis)**: taskname; Edit Range (Scalar function: count)'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围（Y轴）**：taskname；编辑范围（标量函数：计数）'
- en: '**Renderer**: NVD3![Creating a new dashboard page and the KPI panels](img/9578OS_04_11.jpg)'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**渲染器**：NVD3![创建新的仪表板页面和KPI面板](img/9578OS_04_11.jpg)'
- en: Notes
  id: totrans-435
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 备注
- en: As we previously highlighted, the audit data elapsed times are denoted in milliseconds;
    this makes it possible to simulate random delays and avoids taking ages to run
    the test.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前强调的，审计数据的经过时间以毫秒为单位表示；这使得模拟随机延迟成为可能，并避免了测试运行时间过长。
- en: Given the randomness of the delays and the "make pizza" task assignments (both
    Mario and Luigi are potential owners of the same tasks), you might have different
    audit data; elapsed times and total tasks for Mario and Luigi will change for
    each test execution.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 由于延迟的随机性和“制作披萨”任务分配（马里奥和路易吉都可能成为相同任务的拥有者），你可能会有不同的审计数据；马里奥和路易吉的经过时间和总任务数在每个测试执行中都会变化。
- en: The unit test, however, always makes Luigi slower than Mario, so the overall
    KPI value never changes.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，单元测试总是使路易吉比马里奥慢，因此整体KPI值从未改变。
- en: 'Of particular note in the two KPIs is the following:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个KPI中特别值得注意的是以下内容：
- en: Mario is the fastest pizza maker
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马里奥是制作披萨最快的人
- en: 'Maria is the busiest employee (20 tasks: 10 order assignments + 10 delivery
    assignments); she must definitely improve her efficiency in order to not slow
    down the two pizza makers (waiting for her order assignments) and the pizzaboy
    (waiting for the delivery orders)'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玛丽亚是员工中最忙碌的（20项任务：10项订单分配 + 10项配送分配）；她必须肯定提高她的效率，以免拖慢两位披萨制作师（等待她的订单分配）和送披萨的男孩（等待配送订单）
- en: Summary
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the jBPM management features, discussing the new
    Git and Maven integration for project development and Kie module deployment, respectively.
    You should have a better understanding of the jBPM module management, and you
    should be able to create and configure BAM charts starting from the jBPM auditing
    data thanks to the off-the-shelf Red Hat Dashboard tool. The next chapter will
    dive into BPMN constructs and will provide you with practical process definition
    examples.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了jBPM管理功能，分别讨论了项目开发和Kie模块部署的新Git和Maven集成。你应该对jBPM模块管理有更好的理解，并且应该能够利用现成的Red
    Hat仪表板工具从jBPM审计数据开始创建和配置BAM图表。下一章将深入探讨BPMN结构，并提供实际的过程定义示例。
