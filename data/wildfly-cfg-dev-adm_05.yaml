- en: Chapter 5. Configuring a WildFly Domain
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 配置WildFly域
- en: Now that we have looked at the core configuration of the server, we can move
    on to the domain configuration. Shaping a server domain is a key task for administrators
    who want to efficiently coordinate a set of application servers. In this chapter,
    we will describe all the steps necessary to create and configure a domain of WildFly
    instances.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了服务器的核心配置，我们可以继续到域配置。塑造服务器域是管理员想要高效协调一组应用服务器时的关键任务。在本章中，我们将描述创建和配置WildFly实例域所需的所有步骤。
- en: As we will see shortly, the configuration of subsystems does not vary between
    standalone and domain configuration. To work with domains, we also need to learn
    about the domain controller and host controller configurations. These are responsible
    for handling and coordinating the lifecycle of applications across several servers.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们很快就会看到的，子系统配置在独立和域配置之间没有变化。要处理域，我们还需要了解域控制器和主机控制器配置。这些负责处理和协调多个服务器上应用程序的生命周期。
- en: 'So, in this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在本章中，我们将涵盖以下主题：
- en: Introduction to the WildFly domain
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WildFly域简介
- en: How to configure the domain components
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何配置域组件
- en: The criteria to choose between a domain and a standalone server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择域和独立服务器之间的标准
- en: Introducing WildFly domain mode
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍WildFly域模式
- en: Introducing the WildFly domain
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍WildFly域
- en: The concept of a domain mode might be perceived as a little difficult to understand.
    The reason for this is that in the Java EE paradigm, one is used to dealing with
    servers rather than domains.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 域模式的概念可能觉得有点难以理解。这是因为，在Java EE范式下，人们习惯于处理服务器而不是域。
- en: Basically, a domain is a group of WildFly servers managed by one of the servers.
    The server managing the domain is called the domain controller. This group is
    under one administration—it is the administrative unit. It's important to understand
    that the concept of a domain does not interfere with the capabilities delivered
    by the managed servers. For example, you might set up a domain of application
    server nodes running in a cluster, providing load balancing and high availability.
    However, you can also achieve the same outcome with a set of standalone application
    servers.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，域是由一个服务器管理的WildFly服务器集合。管理域的服务器被称为域控制器。这个组属于一个管理单元——它是管理单元。重要的是要理解，域的概念不会干扰由管理服务器提供的功能。例如，您可能设置了一个运行在集群中的应用服务器节点域，提供负载均衡和高可用性。然而，您也可以通过一组独立的应用服务器实现相同的结果。
- en: What differentiates these two scenarios is that when running in a domain, you
    can efficiently manage your set of servers from a single, centralized unit. On
    the other hand, managing a set of standalone instances often requires sophisticated
    multiserver management capabilities that are significantly more complex, error-prone,
    and time-consuming.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种场景的不同之处在于，在域模式下运行时，您可以从单个集中单元中高效地管理您的服务器集合。另一方面，管理一组独立实例通常需要复杂的多服务器管理能力，这些能力复杂得多，容易出错，且耗时更长。
- en: 'From the process point of view, a domain is made up of four elements:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从进程的角度来看，域由四个元素组成：
- en: '**Domain** **controller**: The domain controller is the management control
    point of your domain. An AS instance running in the domain mode has, at the most,
    one process instance acting as a domain controller. The domain controller holds
    a centralized configuration that is shared by the node instances belonging to
    the domain.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**域控制器**：域控制器是您域的管理控制点。在域模式下运行的AS实例最多有一个进程实例作为域控制器。域控制器持有中央配置，该配置由属于域的节点实例共享。'
- en: '**Host** **controller**: This is a process responsible for coordinating the
    life cycle of server processes and the distribution of deployments, from the domain
    controller to the server instances, with the domain controller.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机控制器**：这是一个负责协调服务器进程的生命周期以及部署的分配（从域控制器到服务器实例），与域控制器一起。'
- en: '**Process** **controller**: This is a very lightweight process whose primary
    function is to spawn server and host controller processes, and manage their input/output
    streams. This also allows the host controller to be patched and restarted without
    impacting the associated servers.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程控制器**：这是一个非常轻量级的进程，其主要功能是生成服务器和主机控制器进程，并管理它们的输入/输出流。这也允许主机控制器在不影响相关服务器的情况下进行修补和重启。'
- en: '**Application** **server** **nodes**: These are regular Java processes that
    map to instances of the application server. Each server node, in turn, belongs
    to a domain group. Domain groups will be explained in detail when we discuss the
    domain configuration file.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序** **服务器** **节点**：这些是映射到应用程序服务器实例的常规Java进程。每个服务器节点反过来属于一个域组。当讨论域配置文件时，将详细解释域组。'
- en: In order to understand how to configure these components, we will first look
    at the basic domain configuration. This configuration is provided with the application
    server default distribution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解如何配置这些组件，我们首先将查看基本域配置。此配置与应用程序服务器默认分发一起提供。
- en: Understanding the default domain configuration
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解默认域配置
- en: 'Out of the box, the default domain configuration (`domain.xml`) includes a
    basic configuration made up of the following elements:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，域配置（`domain.xml`）包括以下元素的基本配置：
- en: One process controller that starts the other JVM processes
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个启动其他JVM进程的进程控制器
- en: One host controller that acts as the domain controller
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个充当域控制器的主机控制器
- en: Three server nodes, with the first two being part of the main server group and
    the third one (inactive) as part of the other server group
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个服务器节点，前两个属于主服务器组，第三个（不活跃）属于其他服务器组
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A server group is a group of servers that have the same configuration and are
    managed as one.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器组是一组配置相同且作为一个整体管理的服务器。
- en: 'The following image reinforces these concepts:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图像加强了这些概念：
- en: '![Understanding the default domain configuration](img/6232OS_05_01.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![理解默认域配置](img/6232OS_05_01.jpg)'
- en: You can use the `VisualVM` utility to have a look at the low-level details of
    your domain from the point of view of the JVM. You can see from the following
    screenshot that four JVM processes are spawned. The process controller is started
    first, which, in turn, launches the host controller process and the two server
    nodes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`VisualVM`实用程序从JVM的角度查看您域的低级细节。您可以从以下截图看到生成了四个JVM进程。首先启动的是进程控制器，然后它依次启动主机控制器进程和两个服务器节点。
- en: '![Understanding the default domain configuration](img/6232OS_05_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![理解默认域配置](img/6232OS_05_02.jpg)'
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**VisualVM** is a Java Virtual Machine monitoring tool that is included in
    the default Java SE distribution. You can find it in your `JAVA_HOME/bin` folder.
    Simply launch `jvisualvm.exe` if you are on Windows, or `jvisualvm` if you are
    on Linux.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**VisualVM**是一个包含在默认Java SE分发的Java虚拟机监控工具。您可以在`JAVA_HOME/bin`文件夹中找到它。在Windows上，只需启动`jvisualvm.exe`，在Linux上则启动`jvisualvm`。'
- en: The important thing to note from the preceding screenshot is that with the basic
    domain setup, the host controller also acts as the domain controller, that is,
    the host controller holds the centralized configuration of the domain. This means
    that the host controller and the domain controller share the same JVM process.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的截图可以注意到的重点是，在基本域设置中，主机控制器也充当域控制器，也就是说，主机控制器持有域的集中配置。这意味着主机控制器和域控制器共享同一个JVM进程。
- en: Having completed a basic introduction to the application server domain, we will
    now cover all the details concerning its configuration.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成对应用程序服务器域的基本介绍后，我们将现在涵盖有关其配置的所有细节。
- en: Starting up and stopping a domain
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动和停止域
- en: 'Starting up a WildFly domain is simply a matter of running the `JBOSS_HOME\bin\domain.sh`
    script (`JBOSS_HOME\bin\domain.bat` on Windows). In a matter of seconds, your
    domain will be up and running. Have a look at the following screenshot:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 启动WildFly域只需运行`JBOSS_HOME\bin\domain.sh`脚本（在Windows上为`JBOSS_HOME\bin\domain.bat`）。几秒钟内，您的域将启动并运行。请查看以下截图：
- en: '![Starting up and stopping a domain](img/6232OS_05_03.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![启动和停止域](img/6232OS_05_03.jpg)'
- en: In order to stop the application server domain, you can either use the *Ctrl*
    + *C* shortcut in the same window in which you started the domain, or you can
    use the command-line client and issue the `shutdown` command to the host controller.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了停止应用程序服务器域，您可以在启动域的同一窗口中使用*Ctrl* + *C*快捷键，或者您可以使用命令行客户端并向主机控制器发出`shutdown`命令。
- en: 'Unix/Linux users can issue the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Unix/Linux用户可以执行以下命令：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Windows users can issue the following command:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可以执行以下命令：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The default host name is `master`, and it is defined in the `host.xml`, file
    which is located in the `JBOSS_HOME\domain\configuration` folder. We will learn
    more about it in the next section.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认主机名是`master`，它在`host.xml`文件中定义，该文件位于`JBOSS_HOME\domain\configuration`文件夹中。我们将在下一节中了解更多关于它的信息。
- en: Once the domain starts, several log files are created within the `JBOSS_HOME\domain\log`
    directory. The host controller activity is written to the `host-controller.log`
    file, while the process controller logs are written to the `process-controller.log`
    file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦域启动，`JBOSS_HOME\domain\log`目录内将创建几个日志文件。主机控制器活动被写入`host-controller.log`文件，而进程控制器日志被写入`process-controller.log`文件。
- en: Configuring the domain
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置域
- en: 'One of the main advantages of setting up a WildFly domain is the control over,
    and management of, the server configurations and deployments from a single centralized
    point. The main domain configuration consists of the following two files found
    in the `JBOSS_HOME\domain\configuration` folder, which are as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 设置WildFly域的主要优势之一是能够从单个集中点控制和管理服务器配置和部署。主要域配置由以下两个文件组成，这些文件位于`JBOSS_HOME\domain\configuration`文件夹中，如下所示：
- en: '`domain.xml`: This file describes the capabilities of your domain servers and
    defines the server groups that are part of the domain. While this file can be
    found on each host, only the `domain.xml` file found on the domain controller
    is used.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain.xml`：此文件描述了你的域服务器的功能，并定义了域中的服务器组。虽然此文件可以在每个主机上找到，但只有位于域控制器上的`domain.xml`文件被使用。'
- en: '`host.xml`: This file is present on each host where the domain is installed
    and specifies the elements specific to the servers running on the host.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`host.xml`：此文件存在于安装域的每个主机上，并指定了特定于在主机上运行的服务器的元素。'
- en: Overriding the default configuration files
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖默认配置文件
- en: 'It is possible to use configuration files other than the default files that
    are provided in a vanilla install. You can use your own custom configuration files
    by adding the following parameter to your shell command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用除了在标准安装中提供的默认文件之外的配置文件。你可以通过在shell命令中添加以下参数来使用自己的自定义配置文件：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Windows users use the same parameter, but obviously use the `domain.bat` file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户使用相同的参数，但显然使用`domain.bat`文件。
- en: Note also that if you don't provide any path to your custom configuration file,
    it's assumed to be relative to the `jboss.server.config.dir` directory. Otherwise,
    you need to provide an absolute path to your file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果你没有提供任何自定义配置文件的路径，它将被假定为相对于`jboss.server.config.dir`目录的相对路径。否则，你需要提供文件的绝对路径。
- en: Configuring the domain.xml file
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置domain.xml文件
- en: 'The `domain.xml` file contains the domain subsystems'' configuration that is
    shared by all the servers in the domain. The content of the file follows the structure
    of the standalone file, with an obvious and important difference—a domain can
    have several profiles defined in it. By default, four profiles are defined: a
    default profile, a full profile, a ha profile, and lastly, a full-ha profile,
    with the last two being used for clustered domains. You could also, however, define
    your own custom profile, such as a messaging profile, as shown in the following
    image:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`domain.xml`文件包含了域中所有服务器共享的域子系统配置。文件内容遵循独立文件的结构，但有一个明显且重要的区别——域中可以定义多个配置文件。默认情况下，定义了四个配置文件：一个默认配置文件、一个完整配置文件、一个ha配置文件，最后是一个全ha配置文件，后两个用于集群域。然而，你也可以定义自己的自定义配置文件，例如消息配置文件，如下面的图像所示：'
- en: '![Configuring the domain.xml file](img/6232OS_05_04.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![配置domain.xml文件](img/6232OS_05_04.jpg)'
- en: Tip
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Changing from one profile to another is the recommended way to expand or narrow
    the capabilities of the servers running in your domain.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个配置文件切换到另一个配置文件是推荐的方式来扩展或缩小你域中运行的服务器的功能。
- en: 'Each WildFly domain can be further split into server groups, with each one
    bound to a different profile. The concept of server groups can be seen as a set
    of servers managed as a single unit by the domain. You can actually use server
    groups for fine-grained configuration of nodes; for example, each server group
    is able to define its own settings, such as customized JVM settings, socket bindings
    interfaces, and deployed applications. The following figure illustrates some common
    attributes that can be applied to servers within a server group:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个WildFly域可以进一步拆分为服务器组，每个组绑定到不同的配置文件。服务器组的概念可以看作是域管理作为一个单一单元的一组服务器。实际上，您可以使用服务器组进行节点细粒度配置；例如，每个服务器组能够定义自己的设置，如定制的JVM设置、套接字绑定接口和部署的应用程序。以下图解说明了可以应用于服务器组内服务器的一些常见属性：
- en: '![Configuring the domain.xml file](img/6232OS_05_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![配置domain.xml文件](img/6232OS_05_05.jpg)'
- en: 'For example, here is a more complete server group definition that is bound
    to the `default` profile. This server group defines a web application named `sample.war`,
    which is made available to all servers within the group. It also defines a customized
    JVM configuration and some system properties (loaded at boot time), and binds
    its services to the `standard-sockets` definition, as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是一个更完整的与`default`配置文件绑定的服务器组定义。此服务器组定义了一个名为`sample.war`的Web应用程序，该应用程序可供组内的所有服务器使用。它还定义了一个定制的JVM配置和一些系统属性（在启动时加载），并将其服务绑定到`standard-sockets`定义，如下所示：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Configuring the host.xml file
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置host.xml文件
- en: 'The other domain configuration file is named `host.xml`, which is found in
    the `JBOSS_HOME\domain\configuration` folder. This file basically defines and
    configures the server nodes that are running on a host as part of a domain. The
    term "host" used here denotes a physical or virtual host. Within each host is
    a portion of the servers from the domain. Each host can have zero or more server
    instances. The following figure clarifies these details:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个域配置文件名为`host.xml`，位于`JBOSS_HOME\domain\configuration`文件夹中。此文件基本上定义并配置了作为域一部分运行在主机上的服务器节点。这里使用的“主机”一词表示物理或虚拟主机。在每一个主机中，都包含域中服务器的一部分。每个主机可以有零个或多个服务器实例。以下图解说明了这些细节：
- en: '![Configuring the host.xml file](img/6232OS_05_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![配置host.xml文件](img/6232OS_05_06.jpg)'
- en: 'As you can see, a domain can contain several hosts (**host1**, **host2**) and
    also several groups (**main server group**, **other server group**). However,
    while a **server group** is a logical association of server nodes (which can be
    located anywhere), a **host** refers to a set of nodes that are located on the
    same physical or virtual machine. Having provided our definition of hosts, we
    now look into the host configuration file, which allows you to shape the following
    set of core domain elements:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，一个域可以包含多个主机（**host1**、**host2**）以及多个组（**主服务器组**、**其他服务器组**）。然而，虽然**服务器组**是服务器节点（可以位于任何位置）的逻辑关联，但**主机**指的是位于同一物理或虚拟机器上的节点集合。在提供了我们对主机的定义之后，我们现在来看看主机配置文件，它允许您配置以下一组核心域元素：
- en: The management interfaces used to control the domain
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于控制域的管理接口
- en: The domain controller definition
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域控制器定义
- en: The network interfaces where services are bound
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绑定服务的网络接口
- en: The defined JVM's configurations
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义好的JVM的配置
- en: The servers that are part of the domain
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 域的一部分服务器
- en: In the next section, we will see each element of the `host.xml` file in detail
    and learn how to configure it appropriately.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将详细查看`host.xml`文件的每个元素，并学习如何适当地配置它。
- en: Configuring the management interfaces
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置管理接口
- en: 'The management interface includes the definition of the native **command-line**
    **interface** (**CLI**) and `http` interface that are used to manage the domain.
    The following example has been taken from the `host.xml` file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口包括用于管理域的本地**命令行****接口**（**CLI**）和`http`接口的定义。以下示例取自`host.xml`文件：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: With the default configuration, both services are bound to the `management`
    network interfaces. The CLI and administrative interface listen on port `9990`.
    The `native` interface configuration remains should you, for some reason, want
    to revert back to JBoss AS 7 settings and run on port number `9999`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认配置，两个服务都绑定到`management`网络接口。CLI和管理接口监听端口`9990`。如果您出于某种原因想要恢复到JBoss AS 7设置并在端口`9999`上运行，则`native`接口配置应保持不变。
- en: Configuring the network interfaces
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置网络接口
- en: We have just mentioned `network` interfaces. As you can guess from its name,
    a **network interface** refers to one network address or a set of network addresses.
    By default, the server contains three network interface definitions, namely, **management**,
    **public**, and **unsecure**, all of which are bound to the loopback address (`127.0.0.1`).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚提到了`网络接口`。正如其名称所暗示的，一个**网络接口**指的是一个网络地址或一组网络地址。默认情况下，服务器包含三个网络接口定义，即**管理**、**公共**和**不安全**，所有这些都被绑定到回环地址（`127.0.0.1`）。
- en: 'By changing the `inet-address` value of your network interface, you can configure
    the listening addresses of your application server. For example, if we want to
    bind the `management` interfaces to the loopback address (`127.0.0.1`), and the
    `public` interface to the address `192.168.1.1`, you can simply use the following
    configuration:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改网络接口的`inet-address`值，您可以配置应用程序服务器的监听地址。例如，如果我们想将`管理`接口绑定到回环地址（`127.0.0.1`），并将`公共`接口绑定到地址`192.168.1.1`，您可以使用以下配置：
- en: '[PRE5]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also update these properties via the command line by running the following
    commands:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过运行以下命令通过命令行更新这些属性：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In practice, this means that the `management` interfaces (the `http` admin
    console and the CLI) will be bound to the loopback address, while application-related
    services (bound to the `public` interface) will be bound to the IP address `192.168.1.1`.
    The following configuration is taken from the `domain.xml` file. Here, you can
    see how it uses the `public` interface defined previously:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这意味着`管理`接口（`http`管理控制台和CLI）将被绑定到回环地址，而与应用程序相关的服务（绑定到`公共`接口）将被绑定到IP地址`192.168.1.1`。以下配置来自`domain.xml`文件。在这里，您可以看到它是如何使用之前定义的`公共`接口的：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Configuring the domain controller
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置域控制器
- en: 'By default, the domain controller is located on the same machine where you
    started your domain. Have a look at the following commands:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，域控制器位于您启动域的同一台机器上。请看以下命令：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You can, however, configure your host to use a domain controller located on
    a remote host in the following way:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下方式配置您的宿主以使用位于远程宿主上的域控制器：
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This doesn't work if the management interface is bound to `localhost`. Ensure
    that you update the management interface correctly.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理接口绑定到`localhost`，则此操作不会生效。请确保您正确更新了管理接口。
- en: Configuring the domain controller on a remote host means that the local configuration
    (`domain.xml`) will not be used, and that all server nodes on that host will use
    the centralized remote configuration. You need authorization to access the domain
    controller. We will cover the details of this in the domain example toward the
    end of the chapter.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在远程宿主机上配置域控制器意味着将不会使用本地配置（`domain.xml`），并且该宿主机上的所有服务器节点都将使用集中化的远程配置。您需要授权才能访问域控制器。我们将在本章末尾的域示例中详细介绍这一点。
- en: Configuring the JVM
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置JVM
- en: 'One of the key aspects of the domain configuration is the definition of JVM
    arguments for a given host. The JVM''s elements are defined in the `host.xml`
    file. Here, you can define JVM settings and associate them with a name:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 域配置的一个关键方面是为给定主机定义JVM参数。JVM的元素在`host.xml`文件中定义。在这里，您可以定义JVM设置并将它们与一个名称关联：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Tip
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Currently, there is no element available to configure Java 8 Metaspace properties.
    To configure these, you need to add them as `option` elements. To set the initial
    size, use `-XX:MetaspaceSize=256m`, and to set the maximum size, use `-XX:MaxMetaspaceSize=256m`.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，没有可用的元素来配置Java 8 Metaspace属性。要配置这些属性，您需要将它们作为`option`元素添加。要设置初始大小，使用`-XX:MetaspaceSize=256m`，要设置最大大小，使用`-XX:MaxMetaspaceSize=256m`。
- en: 'This JVM definition can then be used as part of your server group configuration
    by referencing the `jvm` name property in your `server-group` configuration. Also
    note that any JVM definitions within the `server-group` overrides those in the
    `jvms` definition. For example, the `main-server-group` (`domain.xml`) server
    group uses the `default` JVM for all server nodes, but redefines the `heap max-size`
    and `size` values. Have a look at the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过在`server-group`配置中引用`jvm`名称属性，将此JVM定义用作服务器组配置的一部分。请注意，`server-group`中的任何JVM定义都会覆盖`jvms`定义中的定义。例如，`main-server-group`（`domain.xml`）服务器组使用所有服务器节点的`default`
    JVM，但重新定义了`heap max-size`和`size`值。请看以下代码：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The defined JVMs can be also be associated with a single server, thus overriding
    the server group definition. For example, here, `server-one` (defined in `host.xml`)
    inherits the `default` JVM configuration but then overrides the minimum (512 MB)
    and maximum heap size (1 GB):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 定义好的 JVM 也可以关联到单个服务器，从而覆盖服务器组定义。例如，在这里，`server-one`（在 `host.xml` 中定义）继承了 `default`
    JVM 配置，但随后覆盖了最小（512 MB）和最大堆大小（1 GB）：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Adding JVM options to a server definition
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向服务器定义添加 JVM 选项
- en: 'If you want to further specialize your JVM configuration, for example, by adding
    nonstandard options to the virtual machine, you can use the `jvm-options` element
    (`host.xml`). In this example, we add the concurrent, low-pause garbage collector
    to the `default` JVM options:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想进一步专业化你的 JVM 配置，例如，通过向虚拟机添加非标准选项，你可以使用 `jvm-options` 元素（`host.xml`）。在这个例子中，我们将并发、低延迟垃圾收集器添加到
    `default` JVM 选项中：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Order of precedence between elements
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 元素之间的优先级顺序
- en: 'In the previous section, we showed you how to use the `default` JVM definition
    in the different configuration files (`host.xml` and `domain.xml`). As a matter
    of fact, the JVM definition is a typical example of a configuration that overlaps
    between files, which means that the JVM can be configured at any one of the following
    levels:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们向您展示了如何在不同的配置文件（`host.xml` 和 `domain.xml`）中使用 `default` JVM 定义。事实上，JVM
    定义是配置在文件之间重叠的典型例子，这意味着 JVM 可以在任何以下级别进行配置：
- en: '**Host level**: This configuration will apply to all servers that are defined
    in `host.xml`'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主机级别**：此配置将应用于 `host.xml` 中定义的所有服务器'
- en: '**Server-group level**: This configuration applies to all servers that are
    part of the group'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器组级别**：此配置适用于组中所有服务器'
- en: '**Server level**: This configuration is used just for a single host'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器级别**：此配置仅用于单个主机'
- en: 'So far, so good. However, what happens if we define an element with the same
    name at multiple levels? The application server resolves this by letting most
    specific elements override their parent configuration. In other words, if you
    define a generic JVM at the host level, it is overridden by the same JVM at the
    server-group level. Have a look at the following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切顺利。然而，如果我们定义了多个级别具有相同名称的元素，会发生什么？应用程序服务器通过允许最具体的元素覆盖其父配置来解决此问题。换句话说，如果你在主机级别定义了一个通用的
    JVM，它将被服务器组级别的相同 JVM 覆盖。看看以下代码：
- en: '[PRE14]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you also define it at the server level, then that is the final choice for
    that server. Have a look at the following code:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你也在服务器级别定义它，那么这就是该服务器的最终选择。看看以下代码：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following figure describes the elements that can be defined (and possibly
    overridden) at different configuration levels:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了可以在不同配置级别定义（和可能覆盖）的元素：
- en: '![Order of precedence between elements](img/6232OS_05_07.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![元素优先级顺序](img/6232OS_05_07.jpg)'
- en: As you can see, this list also includes some elements, such as the `<path>`
    element, the `<interface>` element, and the `<system-properties>` element, which
    we have discussed in [Chapter 2](ch02.html "Chapter 2. Configuring the Core WildFly
    Subsystems"), *Configuring the Core WildFly Subsystems*.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此列表还包括一些元素，如 `<path>` 元素、`<interface>` 元素和 `<system-properties>` 元素，我们已在
    [第 2 章](ch02.html "第 2 章。配置 WildFly 核心子系统") 中讨论过，*配置 WildFly 核心子系统*。
- en: Configuring server nodes
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置服务器节点
- en: 'The last element of the host configuration includes the list of server nodes
    that are part of the domain. Configuring a server requires, at minimum, the name
    of the server and the group to which the server belongs. Have a look at the following
    code:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 主机配置的最后元素包括构成域的服务器节点列表。配置服务器至少需要服务器的名称和服务器所属的组。看看以下代码：
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This server definition relies largely on default attributes for the application
    server nodes. You can, however, highly customize your servers by adding specific
    paths, socket-binding interfaces, system properties, and JVMs. Have a look at
    the following code:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这个服务器定义在很大程度上依赖于应用程序服务器节点的默认属性。然而，你可以通过添加特定的路径、套接字绑定接口、系统属性和 JVM 来高度自定义你的服务器。看看以下代码：
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If you want to know all the applicable attributes of the server nodes' configuration,
    we suggest that you have a look at the `jboss-as-config_2_1.xsd` schema, which
    is located in the `JBOSS_HOME/docs/schema` folder of your server distribution.
    In Eclipse, you can right-click on the schema file and then click on **Generate**
    | **XML File**.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解服务器节点配置的所有适用属性，我们建议你查看位于服务器发行版`JBOSS_HOME/docs/schema`文件夹中的`jboss-as-config_2_1.xsd`模式，在Eclipse中，你可以右键单击模式文件，然后点击**生成**
    | **XML文件**。
- en: Applying domain configuration
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用域配置
- en: A common misconception among users who are new to the concept of a domain is
    that a domain is pretty much the equivalent of a cluster of nodes, so it can be
    used to achieve important features, such as load balancing and high availability.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于刚开始接触域概念的新用户来说，一个常见的误解是认为域几乎等同于节点集群，因此它可以用来实现重要功能，如负载均衡和高可用性。
- en: It's important to understand that a domain is not pertinent to the functionalities
    that your application delivers—a domain is designed around the concept of server
    management. Thus, you can use it to manage both clustered applications and applications
    that are not intended to run in a cluster.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解，域与你的应用程序提供的功能无关——域的设计是基于服务器管理的概念。因此，你可以用它来管理集群应用程序和非集群应用程序。
- en: 'To understand it better, let''s give an example. Let''s consider that your
    server topology consists of multiple servers, and that you have defined a datasource
    that will be used by your application. So, whether or not you use a cluster, you
    need to configure your datasource across all your standalone servers'' configurations
    (this means adding the definition of the datasource in every `standalone.xml`)
    file. In this case, the advantage of using a domain is evident: the datasource
    definition is contained just in the domain controller that provides a central
    point through which users can keep configurations consistent. It also has the
    benefit of being able to roll out configuration changes to the servers in a coordinated
    fashion. One other important aspect of a domain is the ability to provide a more
    fine-grained configuration than clustering is able to. For example, you can define
    server groups, each one with its own custom configuration. In order to achieve
    the same thing with a clustered configuration, you have to manage each machine''s
    standalone configuration and adapt it to your needs.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这一点，让我们举一个例子。假设你的服务器拓扑由多个服务器组成，并且你已经定义了一个将被应用程序使用的数据源。因此，无论你是否使用集群，你都需要在你的所有独立服务器配置中配置你的数据源（这意味着在每个`standalone.xml`文件中添加数据源的定义）。在这种情况下，使用域的优势是显而易见的：数据源定义仅包含在域控制器中，它提供了一个中心点，用户可以通过它保持配置的一致性。它还有将配置更改协调一致地部署到服务器的优势。域的另一个重要方面是能够提供比集群更细粒度的配置。例如，你可以定义服务器组，每个组都有自己的自定义配置。为了使用集群配置实现相同的功能，你必须管理每台机器的独立配置，并适应你的需求。
- en: However, domain and clustering are not mutually exclusive scenarios, but are
    often part of a larger picture. For example, using a domain can further enhance
    the efficiency of a cluster in advanced configurations where you need to manage
    starting and stopping multiple AS instances. At the same time, clustering provides
    typical load balancing and high-availability features, which are not integrated
    into domain management.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，域和集群并不是相互排斥的场景，它们通常是更大图景的一部分。例如，使用域可以在需要管理多个AS实例的启动和停止的高级配置中进一步提高集群的效率。同时，集群提供了典型的负载均衡和高可用性功能，这些功能并未集成到域管理中。
- en: On the other hand, there are situations where using a domain may not prove to
    be that useful. For example, it's possible that your system administrators have
    bought or developed their own sophisticated multiserver management tools that
    can do more or less the same things that a domain configuration is able to do.
    In this situation, it may not be desirable to switch out what is already configured
    ad hoc.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，也存在一些情况，使用域可能并不那么有用。例如，可能你的系统管理员已经购买或开发了他们自己的复杂的多服务器管理工具，这些工具可以做到与域配置所能做到的大同小异。在这种情况下，可能并不希望替换已经配置好的内容。
- en: Another classic example where a domain is not needed is the development phase,
    where you don't gain anything from a domain installation. Rather, it may add an
    unneeded additional complexity to your architecture.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个不需要域的经典例子是开发阶段，在这个阶段，你从域名安装中得不到任何好处。相反，它可能给你的架构增加不必要的额外复杂性。
- en: Furthermore, the standalone mode is the only choice available in some scenarios.
    For example, if you are running the application server in the embedded mode, then
    the choice of a domain is incompatible. For example, when using an Arquillian
    project, you can test your Enterprise projects using an embedded container, which
    is managed by Arquillian using a standalone configuration.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些情况下，独立模式是唯一可用的选择。例如，如果你在嵌入式模式下运行应用程序服务器，那么选择域名是不兼容的。例如，在使用 Arquillian
    项目时，你可以使用嵌入式容器测试你的企业项目，该容器由 Arquillian 使用独立配置管理。
- en: Summing it up, since the individual server configuration does not vary when
    running the domain mode or the standalone mode, you can easily develop your application
    in the standalone mode and then switch to the domain mode when you are about to
    roll out the production application.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，由于在运行域名模式或独立模式时，单个服务器配置不会发生变化，因此你可以在独立模式下轻松开发你的应用程序，然后在准备部署生产应用程序时切换到域名模式。
- en: Creating our very own domain configuration
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们自己的域名配置
- en: We will now provide a detailed example of a domain configuration. In this example,
    we include two separate host controller configurations, each one with a list of
    three nodes. You need two separate installations of WildFly 8, which can be executed
    on either two different machines or on the same machine. When running on the same
    machine, it's practical to assign a virtual IP address to your machines so that
    you don't have any port conflict in your domain.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将提供一个详细的域名配置示例。在这个例子中，我们包括两个独立的主机控制器配置，每个配置都有一个包含三个节点的列表。你需要两个独立的 WildFly
    8 安装，这些安装可以在两台不同的机器上执行，也可以在同一台机器上执行。当在同一台机器上运行时，为你的机器分配一个虚拟 IP 地址是实用的，这样你就不需要在域名中遇到任何端口冲突。
- en: 'The following figure shows our domain project:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了我们的域名项目：
- en: '![Creating our very own domain configuration](img/6232OS_05_08.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域名配置](img/6232OS_05_08.jpg)'
- en: 'The first thing we need to do is bind the network interfaces to a valid `inet`
    address, both for the public and management interfaces. So, assuming that the
    first domain installation (master) will be bound to the `inet` address `192.168.1.1`,
    open the `host.xml` file and change it accordingly, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是将网络接口绑定到一个有效的 `inet` 地址，无论是公共接口还是管理接口。因此，假设第一个域名安装（master）将绑定到 `inet`
    地址 `192.168.1.1`，打开 `host.xml` 文件并相应地更改它，如下所示：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the second domain installation (slave), change the `inet` address to `192.168.1.2`
    in `host.xml`, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个域名安装（slave）中，将 `host.xml` 中的 `inet` 地址更改为 `192.168.1.2`，如下所示：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The next thing to do is define a unique host name for each installation. So,
    for the first `host.xml` file, use the following code:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是为每个安装定义一个独特的主机名。因此，对于第一个 `host.xml` 文件，使用以下代码：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'For the second file, simply use:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个文件，只需使用以下方法：
- en: '[PRE21]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, the most important step is to choose where the domain controller is located.
    As we have shown earlier in the image, the domain controller will be located in
    the first installation (master), so in the `host.xml` file, you should contain
    the default content:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，最重要的步骤是选择域控制器所在的位置。正如我们之前在图像中所示，域控制器将位于第一个安装（master）中，因此，在 `host.xml` 文件中，你应该包含以下默认内容：
- en: '[PRE22]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, looking at the other installation (slave), point to the domain controller
    that is running on host `192.168.1.1` (master), as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，看看另一个安装（slave），指向运行在主机 `192.168.1.1`（master）上的域控制器，如下所示：
- en: '[PRE23]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Authentication is required for the slave to connect to the domain controller,
    so next we will add a user to the installation housing the master domain. To do
    this, you need to run the `add-user` script in the `bin` directory of your WildFly
    installation, as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 从属服务器连接到域控制器需要认证，因此接下来我们将向包含主域的安装中添加一个用户。为此，你需要在你的 WildFly 安装 `bin` 目录中运行 `add-user`
    脚本，如下所示：
- en: '[PRE24]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Perform the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: When asked **What type of user do you wish to add?**, enter `a` (management
    user).
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及 **你希望添加哪种类型的用户？** 时，输入 `a`（管理用户）。
- en: When asked for a username, enter `slave`.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被要求输入用户名时，输入 `slave`。
- en: When asked for a password, enter `password`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被要求输入密码时，输入 `password`。
- en: When asked **What groups do you want this user to belong to?**, leave it blank.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被问及**您希望此用户属于哪些组？**时，请留空。
- en: Next, you will be asked if this is correct. Type `yes`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将被询问这是否正确。键入`yes`。
- en: 'Lastly, and most importantly, you will be asked if you want this new user to
    be used for one AS process to connect to another AS process. You need to type
    `yes` again. This will cause XML to be printed out, which we will use in the slave
    configuration:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，也是最重要的，您将被询问是否希望此新用户用于一个AS进程连接到另一个AS进程。您需要再次键入`yes`。这将导致打印出XML，我们将将其用于从属配置：
- en: '![Creating our very own domain configuration](img/6232OS_05_09.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域配置](img/6232OS_05_09.jpg)'
- en: 'Lastly, on the slave server, we need to add the `secret value` (printed out
    to the console) within the `server-identities` element in the `host.xml` file,
    as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在从属服务器上，我们需要在`host.xml`文件中的`server-identities`元素内添加`secret value`（打印到控制台），如下所示：
- en: '[PRE25]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The domain configuration is now complete. Let's start up the installation containing
    the domain controller (master) and then the second installation (slave) using
    the `domain.bat/domain.sh` scripts.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 域配置现在已完成。让我们使用`domain.bat/domain.sh`脚本启动包含域控制器（主控制器）的安装，然后启动第二个安装（从属）。
- en: 'If everything is correctly configured, you will see the slave host registered
    on the domain controller (master), as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切配置正确，你将看到从属主机已注册在域控制器（主控制器）上，如下所示：
- en: '![Creating our very own domain configuration](img/6232OS_05_10.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域配置](img/6232OS_05_10.jpg)'
- en: Now, let's have a look at the domain from the management console. The management
    interfaces are discussed in detail in the next chapter, but we need to briefly
    look at them for the purpose of showing our domain example.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从管理控制台查看域。管理接口将在下一章详细讨论，但我们需要简要地看看它们，以便展示我们的域示例。
- en: Tip
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: By default, you need to create one management user to be able to log in to the
    management console. For now, you can just use the username and password you created
    for the slave server, but in production, you would most likely create a different
    management user.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您需要创建一个管理用户才能登录到管理控制台。目前，您可以使用为从属服务器创建的用户名和密码，但在生产环境中，您很可能会创建不同的管理用户。
- en: If you point the browser to the management interface of your master server (`http://192.168.1.1:9990`),
    you will not be able to access the management interface of your slave servers.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将浏览器指向主服务器的管理界面（`http://192.168.1.1:9990`），您将无法访问从属服务器的管理界面。
- en: From the main page of the management console, there are a couple of options
    in which to look at your domain configuration. At this point, we are interested
    in looking at the host controllers that make up the domain. So, in the top menu
    bar, select the **Domain** menu. From here, you can select the host you are interested
    in from the combobox located on the left-hand side.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 从管理控制台的主页，有几个选项可以查看您的域配置。目前，我们感兴趣的是查看构成域的主机控制器。因此，在上面的菜单栏中，选择**域**菜单。从这里，您可以从左侧的组合框中选择您感兴趣的主机。
- en: 'As you can see, you can find all servers grouped by the host, as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，您可以根据主机分组找到所有服务器，如下所示：
- en: '![Creating our very own domain configuration](img/6232OS_05_11.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域配置](img/6232OS_05_11.jpg)'
- en: 'Now, select **Runtime** from the menu. From here, you can view the status of
    each server, group them by server-group, and start/stop each node. For example,
    as per the default configuration, each distribution contains three nodes: two
    are activated at startup, while the third one is started on demand. Hover your
    mouse over each node, and options will appear allowing you to start/stop the single
    node. You can also start/stop an entire server-group. Also, note that there is
    an option to change the host currently being viewed, as shown in the following
    screenshot:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从菜单中选择**运行时**。从这里，您可以查看每个服务器的状态，按服务器组分组，并启动/停止每个节点。例如，根据默认配置，每个分布包含三个节点：启动时激活两个，第三个按需启动。将鼠标悬停在每个节点上，将出现选项，允许您启动/停止单个节点。您还可以启动/停止整个服务器组。此外，请注意，有一个选项可以更改当前正在查看的主机，如下面的屏幕截图所示：
- en: '![Creating our very own domain configuration](img/6232OS_05_12.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域配置](img/6232OS_05_12.jpg)'
- en: It should be clear now that each host has its own list of nodes, all of which
    are part of the domain. Also, remember that each host depends on the configuration
    defined in the `profiles` section of `domain.xml` that contains the domain profile
    used by your domain. As mentioned earlier, one of the most evident advantages
    of a domain over individual installation is the ability to centralize the services'
    configuration as well as the deployed resources.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 现在应该很清楚，每个主机都有自己的节点列表，所有这些节点都是域的一部分。同时，请记住，每个主机都依赖于`domain.xml`文件中`profiles`部分定义的配置，该配置包含您域使用的域配置文件。如前所述，域相对于单个安装的一个最明显的优势是能够集中管理服务的配置以及部署的资源。
- en: From within the web console, you can also deploy applications or install modules
    such as JDBC drivers. In the next chapter, we will discuss in depth how to deploy
    and install a module to a domain. The main difference between the domain mode
    and the standalone mode is that once the datasource is added to the domain controller
    (`master`), its definition becomes part of the default profile, and every host
    that connects to the domain inherits its configuration.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web控制台中，您还可以部署应用程序或安装模块，如JDBC驱动程序。在下一章中，我们将深入讨论如何将模块部署和安装到域中。域模式与独立模式的主要区别在于，一旦数据源被添加到域控制器（`master`），其定义就成为默认配置文件的一部分，并且连接到域的每个主机都会继承其配置。
- en: 'Have a look at the following screenshot:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 看看下面的截图：
- en: '![Creating our very own domain configuration](img/6232OS_05_13.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们自己的域配置](img/6232OS_05_13.jpg)'
- en: Changing the domain configuration at runtime
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在运行时更改域配置
- en: So far, we have modified the configuration files before starting the domain,
    but it is also possible to change the configuration on the fly while the domain
    is running. These changes will be made active without the need to restart the
    server, as they are done via the management console. For example, you may need
    to create, on the fly, a new server group and associate some servers and applications
    with it. It could be that one of your production applications has an issue that
    needs to be fixed. You could try to reproduce the issue on a development environment,
    but your results may not always be accurate since development and production often
    use different database and class versions.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在启动域之前修改了配置文件，但在域运行时也可以动态更改配置。由于这些更改是通过管理控制台完成的，因此无需重新启动服务器即可生效。例如，您可能需要动态创建一个新的服务器组，并将其与一些服务器和应用程序关联。可能您的某个生产应用程序存在需要修复的问题。您可以在开发环境中尝试重现该问题，但结果可能并不总是准确，因为开发和生产通常使用不同的数据库和类版本。
- en: So, one way you can quickly resolve the issue is by creating a new server group,
    associating one or more servers with it, and then deploying and testing the application
    on it.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以快速解决问题的方法之一是创建一个新的服务器组，将其与一个或多个服务器关联，然后在上面部署和测试应用程序。
- en: 'This can be done using the admin console (or the CLI) in a matter of minutes.
    Perform the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过管理员控制台（或CLI）在几分钟内完成。执行以下步骤：
- en: Open your browser, and navigate to the admin console. Then, select the **Domain**
    menu option at the top. From there, choose the **Server Groups** tab in the left-hand
    side column. This interface lets you add server groups by clicking on the **Add**
    button, as shown in the following screenshot:![Changing the domain configuration
    at runtime](img/6232OS_05_14.jpg)
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，导航到管理员控制台。然后，在顶部选择**域**菜单选项。从那里，在左侧列中选择**服务器组**选项卡。此界面允许您通过点击**添加**按钮来添加服务器组，如下面的截图所示：![在运行时更改域配置](img/6232OS_05_14.jpg)
- en: Then, choose a meaningful name for your group, for example, `staging-server-group`,
    and select a **Profile** and **Socket Binding** configuration on which the new
    group will be based, as follows:![Changing the domain configuration at runtime](img/6232OS_05_15.jpg)
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为您的组选择一个有意义的名称，例如`staging-server-group`，并选择一个**配置文件**和**套接字绑定**配置，新的组将基于此配置，如下面的截图所示：![在运行时更改域配置](img/6232OS_05_15.jpg)
- en: Now, it's time to associate one or more servers with the new group. Click on
    the **Server Configuration** menu on the left-hand side, and then click the **Add**
    button. Have a look at the following screenshot:![Changing the domain configuration
    at runtime](img/6232OS_05_16.jpg)
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，是时候将一个或多个服务器与新的组关联起来。在左侧点击**服务器配置**菜单，然后点击**添加**按钮。看看下面的截图：![在运行时更改域配置](img/6232OS_05_16.jpg)
- en: This pops up a dialog box that asks you for the new server name and the associated
    server group. In this example, we are going to call it `testServer`. Then, associate
    it with the `staging-server-group` with a port offset of `750` (in practice, every
    service is bound to a port of default port address (+ `750`)). Have a look at
    the following screenshot:![Changing the domain configuration at runtime](img/6232OS_05_17.jpg)
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将弹出一个对话框，要求您输入新的服务器名称和相关的服务器组。在这个例子中，我们将称之为`testServer`。然后，将其与具有`750`（在实际中，每个服务都绑定到默认端口号（+
    `750`））端口号偏移的`staging-server-group`关联。请查看以下屏幕截图：![在运行时更改域配置](img/6232OS_05_17.jpg)
- en: 'Once you have set up a new server group and assigned one or more servers to
    it, you can deploy your applications to the server group. Deployment of applications
    can be done from the **Runtime** page. Click on **Manage Deployments** on the
    left-hand side, which shows you what applications, if any, are deployed. Have
    a look at the following screenshot:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您已设置一个新的服务器组并将一个或多个服务器分配给它，您就可以将应用程序部署到服务器组。应用程序的部署可以从**运行时**页面进行。在左侧单击**管理部署**，它会显示是否已部署了应用程序。请查看以下屏幕截图：
- en: '![Changing the domain configuration at runtime](img/6232OS_05_18.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![在运行时更改域配置](img/6232OS_05_18.jpg)'
- en: From here, you can add and remove deployments to your groups, which we will
    cover in the next chapter.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，您可以向您的组添加和删除部署，我们将在下一章介绍。
- en: Summary
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went through the WildFly domain setup and configuration.
    By configuring a server domain, you can manage your servers from a single centralized
    point, which is desirable when you have to administer a large set of server nodes.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了WildFly域的设置和配置。通过配置服务器域，您可以从单个集中点管理您的服务器，这在您需要管理大量服务器节点时是非常理想的。
- en: 'Every domain is composed of four main elements: the domain controller, the
    host controller, the process controller, and the server.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 每个域由四个主要元素组成：域控制器、主机控制器、进程控制器和服务器。
- en: The domain controller handles the domain configuration, while the host controller
    coordinates the life cycle of server processes and the distribution of deployments.
    The process controller handles the domain server processes and manages their I/O
    streams.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 域控制器负责处理域配置，而主机控制器协调服务器进程的生命周期和部署的分配。进程控制器处理域服务器进程并管理它们的I/O流。
- en: Every domain is made up of one or more server groups, which allows fine-grained
    configuration of the domain. Each server group can define its own JVM attributes,
    socket binding interfaces, and system properties, which are loaded at startup.
    You can also deploy applications to each of the nodes within the domain.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 每个域由一个或多个服务器组组成，这允许对域进行精细配置。每个服务器组可以定义自己的JVM属性、套接字绑定接口和系统属性，这些属性在启动时加载。您还可以将应用程序部署到域内的每个节点。
- en: Server groups are defined in the `domain.xml` configuration file, along with
    the enterprise services enabled for the domain.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器组在`domain.xml`配置文件中定义，包括为域启用的企业服务。
- en: The composition of server groups is contained in the `host.xml` file. This file
    also contains the location of the domain controller, the default JVMs, and `network`
    and `management` interfaces.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器组的组成包含在`host.xml`文件中。此文件还包含域控制器的位置、默认JVMs以及`network`和`management`接口。
- en: We are going to cover application deployment in detail in the next chapter,
    *Application Structure and Deployment*.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章详细介绍应用程序部署，即*应用程序结构和部署*。
