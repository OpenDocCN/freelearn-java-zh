- en: Microservice Basics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务基础知识
- en: Though monolithic architecture has its own benefits, when an application is
    getting bigger to support various types of business logic, it gives a tough time
    to the developers and deployment engineers. Even a single bug fix in the backend
    will force the developer to redeploy the whole application in the server, causing
    unnecessary maintenance. On the other hand, microservices come with an option
    to keep business logic separated into services. So applications can be pushed
    to the server without interrupting the flow, and the end user especially should
    not notice any interruption. In this chapter, we will delve into some basics about
    microservices and related topics.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单体架构有其自身的好处，但当应用程序变得越来越大以支持各种类型的业务逻辑时，它给开发人员和部署工程师带来了很大的困难。即使是后端的一个小bug修复也会迫使开发人员在服务器上重新部署整个应用程序，导致不必要的维护。另一方面，微服务提供了将业务逻辑分离成服务的选项。因此，应用程序可以在不中断流程的情况下推送到服务器，尤其是最终用户不应该注意到任何中断。在本章中，我们将深入探讨一些关于微服务和相关主题的基础知识。
- en: 'In this chapter, we will discuss:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论：
- en: Monolithic architecture and its drawbacks
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体架构及其缺点
- en: Microservices and their benefits
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务及其优势
- en: Basic characteristics of microservices
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务的基本特征
- en: Microservice components
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务组件
- en: Microservice tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务工具
- en: Monolithic architecture and its drawbacks
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单体架构及其缺点
- en: Even though microservice architecture is growing in popularity nowadays, the
    majority of companies still use the monolithic architecture. As a monolithic application,
    you can bundle all business modules into one single unit and deploy them in all
    desired servers. If any changes are needed in the application, developers have
    to provide them and redeploy the updated version of the application. In monolithic,
    we follow tight coupling between service modules.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管微服务架构如今越来越受欢迎，但大多数公司仍然使用单体架构。作为单体应用程序，您可以将所有业务模块捆绑成一个单一单元，并将它们部署在所有需要的服务器上。如果应用程序需要进行任何更改，开发人员必须提供这些更改并重新部署应用程序的更新版本。在单体架构中，我们遵循服务模块之间的紧密耦合。
- en: 'Though monolithic architecture has some benefits, its drawbacks paved the way
    for an alternate architectural design—microservices. Here we will talk a little
    about the drawbacks of monolithic architecture:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管单体架构有一些好处，但其缺点为另一种架构设计——微服务铺平了道路。在这里，我们将简要讨论单体架构的缺点：
- en: For each bug fix or code change, we have to redeploy the entire application
    on all servers
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于每个bug修复或代码更改，我们必须在所有服务器上重新部署整个应用程序
- en: If any common issue persists in the monolithic application, such as performance
    issues, it will impact the entire application, which might be hard to find out
    and fix quickly
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果单体应用程序存在任何常见问题，比如性能问题，它将影响整个应用程序，这可能很难找出并快速修复
- en: Bigger applications might take longer to start during deployment
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更大的应用程序在部署期间可能需要更长的启动时间
- en: Library requirements and conflicts might affect the entire application. We will
    have a hard time fixing libraries to support all modules
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库需求和冲突可能影响整个应用程序。我们将很难修复库以支持所有模块
- en: Scaling might be hard for monoliths, as all modules come under one umbrella
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单体架构的扩展可能很困难，因为所有模块都在一个统一的范围内
- en: When the application grows, the complexity of business logic and implementation
    will grow as well, which might need more time to develop and maintain
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序增长时，业务逻辑和实现的复杂性也会增加，这可能需要更多的时间来开发和维护
- en: 'Infrequent, expensive, and mass deployment option: if we have multiple types
    of business logic and layers and want to upgrade one business logic, we will need
    to deploy all other layers/services, as well'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不经常、昂贵和大规模的部署选项：如果我们有多种类型的业务逻辑和层，并且想要升级一个业务逻辑，我们将需要部署所有其他层/服务
- en: Tightly coupled services cause difficulty when one service/layer needs an upgrade
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 紧密耦合的服务在一个服务/层需要升级时会带来困难
- en: Service discovery
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务发现
- en: In a microservice architecture, based on the business requirements and service
    load, we might have to increase the service instances. In such cases, keeping
    track of all available service instances and their information, such as port numbers,
    would be hard to manage. Service discovery will help us manage such tasks by automatically
    configuring service instances and looking them up when in need.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，根据业务需求和服务负载，我们可能需要增加服务实例。在这种情况下，跟踪所有可用的服务实例及其信息，如端口号，可能很难管理。服务发现将帮助我们通过自动配置服务实例并在需要时查找它们来管理这些任务。
- en: Introduction to microservices
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务简介
- en: Changing a few things in a big application is a constant pain for developers.
    Every time we make a small change in the code, we might have to deploy the whole
    application into servers, which is a time-consuming and tiring process, especially
    when we have multiple services, like accounting, reporting, user management, and
    so on. Microservices help us get rid of this pain. The main goal of microservices
    is to split up the application into services and deploy each service to our servers
    independently. By doing this, we provide loosely coupled processes in our application.
    Also, microservices can be deployed in the cloud to avoid service outage issues
    and provide nonstop services to consumers.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大型应用程序中做一些改变对开发人员来说是一个不断的痛苦。每次我们在代码中做一个小改变，我们可能需要将整个应用程序部署到服务器上，这是一个耗时且繁琐的过程，特别是当我们有多个服务，比如会计、报告、用户管理等。微服务帮助我们摆脱这种痛苦。微服务的主要目标是将应用程序拆分为服务，并独立部署每个服务到我们的服务器上。通过这样做，我们在应用程序中提供了松散耦合的进程。此外，微服务可以部署在云中，以避免服务中断问题，并为消费者提供不间断的服务。
- en: In microservices, each module or business section can be written as a separate
    service to provide continuous delivery and integration. These services are built
    to fulfill specific business requirements, and they are independently deployable
    by automating deployment infrastructure. Managing these services can be decentralized
    and can be programmable in different languages, as well.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务中，每个模块或业务部分都可以编写为一个单独的服务，以提供持续交付和集成。这些服务旨在满足特定的业务需求，并且可以通过自动化部署基础设施独立部署。管理这些服务可以是分散的，并且可以以不同的语言进行编程。
- en: Before moving on to components, we will briefly discuss the basic characteristics
    of microservices.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向组件之前，我们将简要讨论微服务的基本特征。
- en: Independence and autonomy
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立性和自治性
- en: Microservices play as a better alternative for monolithic environments. In microservices,
    each service can be started, stopped, upgraded, or replaced at any time, without
    interrupting other services. All services are independent and can be registered
    automatically into our central registry.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务作为单片环境的更好替代品。在微服务中，每个服务都可以在任何时候启动、停止、升级或替换，而不会中断其他服务。所有服务都是独立的，并且可以自动注册到我们的中央注册表中。
- en: Resilience and fault tolerance
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性和容错性
- en: In a complex application design, creating a resilient system is vital for every
    service. Most cloud environments require an architectural design where all services
    respond to unexpected situations, like outages, and so on. These scenarios can
    be receiving bad data (broken data), may not be able to reach the required service,
    or may request conflicts in concurrent systems. Microservices need to be resilient
    to failures, and they should be able to restart themselves quickly.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的应用程序设计中，创建一个具有弹性的系统对每个服务都至关重要。大多数云环境都需要一种架构设计，其中所有服务都能应对意外情况，比如停机等。这些情况可能包括接收到坏数据（损坏的数据），可能无法到达所需的服务，或者可能在并发系统中请求冲突。微服务需要对故障具有弹性，并且应该能够快速重启自己。
- en: Microservices should prevent failures from cascading through other dependent
    services in the system.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务应该防止故障通过系统中的其他依赖服务进行级联。
- en: Automated environment
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化环境
- en: Automation should be an important factor in microservice architectural design,
    as many services will be involved in the application, and thus the interaction
    between services will be very complex. Automated monitoring and an alert management
    system have to be implemented to augment microservice design. All services should
    log their data and metrics, and these metrics should be monitored properly, as
    it will improve service management.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化应该是微服务架构设计中的一个重要因素，因为应用程序中将涉及许多服务，因此服务之间的交互将非常复杂。必须实施自动化监控和警报管理系统来增强微服务设计。所有服务都应记录其数据和指标，并且这些指标应得到适当监控，因为这将改善服务管理。
- en: Stateless
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无状态
- en: Microservices are stateless, which means they don't keep data from one session
    to another session. Also, microservice instances will not interact with each other.
    When we have more microservice instances available in the application, each instance
    will not have any idea about other instances, whether the next instance is alive
    or not. This characteristic is very helpful when we scale our applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是无状态的，这意味着它们不会在一个会话中保留数据到另一个会话。此外，微服务实例不会相互交互。当应用程序中有更多的微服务实例可用时，每个实例都不会知道其他实例，无论下一个实例是否存活。当我们扩展我们的应用程序时，这一特征非常有帮助。
- en: Benefits of microservices
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的好处
- en: 'In this section, we will discuss the benefits of developing microservices in
    our applications:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论在我们的应用程序中开发微服务的好处：
- en: Business logic can be grouped and developed into services that are easy to develop
    and deploy, with multiple service instances
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务逻辑可以分组并开发成易于开发和部署的服务，具有多个服务实例
- en: Microservices can avoid having a complex application by splitting the application
    into multiple services, providing easy to develop and maintain business logic,
    especially when we upgrade specific sections
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务可以通过将应用程序拆分为多个服务来避免复杂的应用程序，提供易于开发和维护业务逻辑，特别是在升级特定部分时
- en: Services can be deployed independently, without interrupting the application;
    hence, the end user will never feel any service interruption
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务可以独立部署，而不会中断应用程序；因此，最终用户永远不会感受到任何服务中断
- en: Loosely coupled services will give more flexibility in terms of scaling the
    application
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 松散耦合的服务将在扩展应用程序方面提供更多的灵活性
- en: Upgrading services separately to meet trendy business requirements is handy,
    and developers can bring in new technologies to develop the service
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独升级服务以满足时尚的业务需求是方便的，开发人员可以引入新技术来开发服务
- en: Continuous deployment is easier to implement with the help of microservices;
    hence, a quick upgrade can be made on desired modules
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 借助微服务，可以更容易地实现持续部署；因此，可以对所需的模块进行快速升级
- en: Scaling these services will be very flexible, especially when specific business
    requirements need more instances to provide uninterrupted service to end users
    in the case of high traffic
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展这些服务将非常灵活，特别是当特定的业务需求需要更多实例以为最终用户提供不间断的服务时
- en: Organizations can focus on small batches of work that they can move to production
    very quickly, especially when testing out new features for specific clients
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织可以专注于可以快速移至生产环境的小批量工作，特别是在为特定客户测试新功能时
- en: Microservice components
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务组件
- en: 'In order to have fully functional microservice applications, the following
    components have to be used properly. These components help us to solve complex
    business logic distribution among services:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了拥有完全功能的微服务应用程序，必须正确使用以下组件。这些组件帮助我们在服务之间解决复杂的业务逻辑分配：
- en: Configuration server
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置服务器
- en: Load balancer
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: Service discovery
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现
- en: Circuit breaker
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 断路器
- en: Edge server
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 边缘服务器
- en: We will briefly discuss these components in this section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本节中简要讨论这些组件。
- en: Configuration server
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置服务器
- en: A configuration server will help us store all configurable parameters for each
    service that will be deployed. These properties can be saved in a repository if
    needed. Also, the configuration server will give the option to change the configuration
    of our application without having to deploy the code. Once the configuration is
    changed, it will be automatically reflected on the fly, so we can avoid redeploying
    our services.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 配置服务器将帮助我们存储将要部署的每个服务的所有可配置参数。如果需要，这些属性可以保存在存储库中。此外，配置服务器将提供更改应用程序配置的选项，而无需部署代码。一旦配置更改，它将自动反映在应用程序中，因此我们可以避免重新部署我们的服务。
- en: 'As we will have many services in our microservice application, having a configuration
    server will help us to avoid service redeployment, and the service can get the
    corresponding configuration from the server. It is also one of the principles
    of continuous delivery: decoupling source code from the configuration.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的微服务应用中将有许多服务，拥有配置服务器将帮助我们避免服务重新部署，并且服务可以从服务器获取相应的配置。这也是持续交付的原则之一：将源代码与配置解耦。
- en: Load balancer
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡器
- en: A load balancer acts as the backbone for scaling applications by allocating
    the load to specific services. The load balancer is considered a major player
    in microservice architecture. Unlike regular load balancers distributed among
    servers, these manage service instances and distribute the load among those instances.
    With the help of a service discovery component, they will get information about
    available service instances and distribute the loads.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 负载均衡器通过将负载分配给特定服务来作为扩展应用程序的支柱。负载均衡器被认为是微服务架构中的重要组成部分。与分布在服务器之间的常规负载均衡器不同，这些负载均衡器管理服务实例并在这些实例之间分配负载。借助服务发现组件的帮助，它们将获取有关可用服务实例的信息并分配负载。
- en: Netflix Ribbon is used as a load balancer; we will explore this in the *Microservice
    tools* section of this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix Ribbon被用作负载均衡器；我们将在本章的*微服务工具*部分探讨这一点。
- en: Circuit breaker
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断路器
- en: As there are many services working together in our architecture, each service
    might be inter-dependent. There are some situations that cause some services to
    fail and might be causing other services to fall down with them. To avoid such
    situations, our architecture should be fault-tolerant. Using patterns like circuit
    breaker can reduce failures in microservice architectures.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的架构中有许多服务共同工作，每个服务可能相互依赖。有些情况会导致一些服务失败，并可能导致其他服务随之失败。为了避免这种情况，我们的架构应该具有容错性。使用断路器等模式可以减少微服务架构中的故障。
- en: Edge server
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 边缘服务器
- en: The edge server implements the API Gateway pattern, and behaves like a wall
    for the APIs to the outside world. With the help of an edge server, all public
    traffic will be forwarded to our internal services. By doing this, end users will
    not be affected in the case of any changes in our services and internal structures
    in the future. Netflix Zuul is used as an edge server, and we will share a little
    bit about Zuul in the following section.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 边缘服务器实现了API网关模式，并且对外部世界的API行为像一堵墙。借助边缘服务器，所有公共流量将被转发到我们的内部服务。通过这样做，最终用户在未来我们的服务和内部结构发生任何变化时不会受到影响。Netflix
    Zuul被用作边缘服务器，我们将在下一节中分享一些关于Zuul的内容。
- en: Microservice tools
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务工具
- en: 'Netflix engineers contributed much to microservice development and introduced
    various components for microservice ecosystems. Here, we will discuss more components
    that might be involved with microservices:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix工程师为微服务开发做出了很大贡献，并为微服务生态系统引入了各种组件。在这里，我们将讨论可能涉及微服务的更多组件：
- en: Netflix Eureka
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix Eureka
- en: Netflix Zuul
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix Zuul
- en: Spring Cloud Config Server
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Config服务器
- en: Netflix Ribbon
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix Ribbon
- en: Spring Cloud Netflix
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Cloud Netflix
- en: Spring Security OAuth2
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Spring Security OAuth2
- en: Netflix Hystrix and Turbine
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Netflix Hystrix和Turbine
- en: Eclipse Microprofile
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Eclipse Microprofile
- en: We will talk more about them in the coming sections.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的部分中更多地讨论它们。
- en: Netflix Eureka
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Netflix Eureka
- en: Eureka plays the role of service discovery service in microservices. It allows
    microservices to register themselves at runtime and helps us locate services when
    needed. It is used for the load balancing and fail-over of middle-tier servers.
    Also, Eureka comes with a Java client (Eureka Client) to make service interaction
    easier. The Eureka server acts as a middle-tier (services level) load balancing
    tool by locating services in middle-tier servers. These middle-tier (services
    level) load balancing tool might not have been available for AWS-like clouds.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Eureka在微服务中扮演着服务发现服务的角色。它允许微服务在运行时注册自己，并在需要时帮助我们定位服务。它用于中间层服务器的负载平衡和故障转移。此外，Eureka还配备了一个Java客户端（Eureka客户端）以使服务交互更加容易。Eureka服务器通过定位中间层服务器中的服务来充当中间层（服务级别）负载平衡工具。这些中间层（服务级别）负载平衡工具可能在类似AWS的云中不可用。
- en: Though AWS **Elastic Load Balancer** (**ELB**) is available for load balancing
    services, it supports only end user web services such as traditional load balancers,
    not middle-tier load balancing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管AWS的弹性负载均衡器（ELB）可用于负载均衡服务，但它仅支持传统负载均衡器等端用户Web服务，而不支持中间层负载均衡。
- en: In the Eureka server, the instances of the client know which services they have
    to talk to, as the Eureka load balancer focuses on instance levels as well. Eureka
    services are stateless, and hence they support scalability. As the server information
    is cached on the client side, load balancing is very helpful in the case of outages
    of load balancers.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在Eureka服务器中，客户端的实例知道他们需要与哪些服务通信，因为Eureka负载均衡器也专注于实例级别。Eureka服务是无状态的，因此它们支持可伸缩性。由于服务器信息被缓存在客户端，负载均衡在负载均衡器宕机的情况下非常有帮助。
- en: Eureka is used in Netflix for memcached services, cassandra deployments, and
    other operations. The Eureka server is highly recommended for middle-tier services
    where local services should be disabled for the public.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Eureka在Netflix中用于memcached服务、cassandra部署和其他操作。强烈建议在本地服务应该对公共服务禁用的中间层服务中使用Eureka服务器。
- en: Netflix developers initiated the Eureka server and made it open source. Later,
    Spring incorporated it into the Spring Cloud. In a microservice architecture,
    services should be fine-grained to improve the modularity of the application for
    development, testing, and maintenance.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix开发人员启动了Eureka服务器并将其开源。后来，Spring将其纳入了Spring Cloud。在微服务架构中，服务应该是细粒度的，以提高应用程序的模块化，便于开发、测试和维护。
- en: Netflix Zuul
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Netflix Zuul
- en: Zuul acts as a front door gatekeeper to the public, and does not allow unauthorized
    external requests to pass through. It also provides the entry point to microservices
    in our server. Zuul uses Netflix Ribbon to lookup available services and routes
    external requests to the right service instances. Zuul supports dynamic routing,
    monitoring, and security.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Zuul充当公共前门的门卫，并且不允许未经授权的外部请求通过。它还提供了我们服务器中微服务的入口点。Zuul使用Netflix Ribbon来查找可用的服务并将外部请求路由到正确的服务实例。Zuul支持动态路由、监控和安全性。
- en: 'Zuul''s different types of filter, like `PRE`, `ROUTING`, `POST`, and `ERROR`,
    help to achieve the following actions:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Zuul的不同类型的过滤器，如`PRE`、`ROUTING`、`POST`和`ERROR`，有助于实现以下操作：
- en: Dynamic routing
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态路由
- en: Insights and monitoring
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 洞察和监控
- en: Authentication and security
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证和安全
- en: Stress testing
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压力测试
- en: Multiregion resiliency
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多区域弹性
- en: Static response handling
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态响应处理
- en: 'Zuul has multiple components:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Zuul有多个组件：
- en: '`zuul-core`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zuul-core`'
- en: '`zuul-simple-webapp`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zuul-simple-webapp`'
- en: '`zuul-netflix`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zuul-netflix`'
- en: '`zuul-netflix-webapp`'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zuul-netflix-webapp`'
- en: Spring Cloud Netflix
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Cloud Netflix
- en: Spring Cloud provides interaction between third-party cloud technologies and
    the Spring programming model. Spring Cloud Netflix provides Netflix **Open Source
    Software** (**OSS**) integration support to work with Spring Boot through auto-configuration
    and binding to the Spring environment. By adding a few annotations in Spring Boot,
    we can build a large, distributed application, including Netflix components, as
    well.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud提供了第三方云技术与Spring编程模型之间的交互。Spring Cloud Netflix为Spring Boot提供了Netflix
    **开源软件** (**OSS**)集成支持，通过自动配置和绑定到Spring环境来使用。通过在Spring Boot中添加一些注解，我们可以构建一个包括Netflix组件在内的大型分布式应用程序。
- en: Features such as service discovery, service creation, external configuration,
    router, and filter can be implemented in Spring Cloud Netfix with microservices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Cloud Netfix可以实现诸如服务发现、服务创建、外部配置、路由器和过滤器等功能。
- en: Netflix Ribbon
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Netflix Ribbon
- en: Netflix is used by service consumers to find services at runtime. Ribbon gets
    the information from the Eureka server to locate the appropriate service instances.
    In the case of multiple instances available for Ribbon, it will apply load balancing
    mechanisms to spread requests over the available instances. Ribbon does not run
    as a separate service, but rather as an embedded component in each service consumer.
    Having client-side load balancing is a big benefit from using the service registry
    as the balancer lets the client pick the registered instance of a service.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix被服务消费者用于在运行时查找服务。Ribbon从Eureka服务器获取信息以定位适当的服务实例。在Ribbon有多个实例可用的情况下，它将应用负载均衡机制来将请求分布到可用的实例上。Ribbon不作为一个独立的服务运行，而是作为每个服务消费者中的一个嵌入式组件。具有客户端负载均衡是使用服务注册表的一个重大好处，因为负载均衡器让客户端选择服务的注册实例。
- en: 'Ribbon provides the following features:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Ribbon提供以下功能：
- en: Load balancing rules (multiple and pluggable)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载均衡规则（多个和可插拔的）
- en: Service discovery integration
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务发现集成
- en: Resilient over failures
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对故障的弹性
- en: Support for cloud
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云支持
- en: Ribbon has sub-components, such as `ribbon-core`, `ribbon-eureka`, and `ribbon-httpclient`.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: Ribbon有子组件，如`ribbon-core`、`ribbon-eureka`和`ribbon-httpclient`。
- en: Netflix Ribbon acts as a client-side load balancer, and it can be integrated
    with Spring Cloud.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix Ribbon充当客户端负载均衡器，并且可以与Spring Cloud集成。
- en: Netflix Hystrix
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Netflix Hystrix
- en: Every distributed environment is prone to service failures, which might happen
    often. In order to fix this issue, our architecture should be fault- and latency-tolerant.
    Hystrix is a circuit breaker that can help us avoid such situations, like service
    dependency failures. Hystrix prevents a service from being overloaded and isolates
    failures when they happen.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 每个分布式环境都容易发生服务故障，这种情况可能经常发生。为了解决这个问题，我们的架构应该具有容错和延迟容忍性。Hystrix是一个断路器，可以帮助我们避免这种情况，如服务依赖失败。Hystrix可以防止服务过载，并在发生故障时隔离故障。
- en: With Hystrix support, we can control the interactions between our microservices
    by adding latency tolerance and fault tolerance logic in them. Hystrix provides
    strong fallback options in the case of service failure and thus improves our system's
    overall resiliency. Without Hystrix, if an internal service fails, it might interrupt
    the API and break the user experience.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Hystrix支持，我们可以通过在微服务中添加延迟容忍和容错逻辑来控制它们之间的交互。在服务失败的情况下，Hystrix提供了强大的回退选项，从而提高了系统的整体弹性。如果没有Hystrix，如果内部服务失败，可能会中断API并破坏用户体验。
- en: 'Hystrix follows a few basic principles of resiliency, as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Hystrix遵循一些基本的弹性原则，如下：
- en: Failure in service dependency should not cause any interruption for the end
    user
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务依赖的失败不应该对最终用户造成任何中断
- en: The API should react in the case of service dependency failure to take correct
    action
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在服务依赖失败的情况下，API应该做出正确的反应
- en: 'Hystrix also has a circuit breaker fallback mechanism using these approaches:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Hystrix还有一个断路器回退机制，使用以下方法：
- en: '**Custom fallback**: Where the client library provides fallback, or local data
    instead to generate responses'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义回退**：当客户端库提供回退或本地数据以生成响应时'
- en: '**Fail silent**: Fallback returns null, which is helpful in some cases'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**失败静默**：回退返回null，在某些情况下很有帮助'
- en: '**Fail fast**: Used in specific cases, such as HTTP 5XX responses'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速失败**：在特定情况下使用，如HTTP 5XX响应'
- en: Netflix Turbine
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Netflix Turbine
- en: Turbine is used for aggregating all streams of **server-sent-event** (**SSE**)
    JSON data into one stream, which can be used for dashboard purposes. The Turbine
    tool is used in the Hystrix application, which has a real-time dashboard to aggregate
    data from multiple machines. Turbine can be used with any data source that supports
    the JSON format. Turbine is data-agnostic and able to view the JSON blob as a
    map of key and value pairs.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: Turbine用于将所有**服务器发送事件**（SSE）JSON数据流聚合成一个流，可用于仪表板目的。Turbine工具用于Hystrix应用程序，该应用程序具有实时仪表板，可从多台机器中聚合数据。Turbine可以与支持JSON格式的任何数据源一起使用。Turbine是数据不可知的，并且能够将JSON块视为键值对的映射。
- en: Netflix uses Turbine with a Eureka server plugin to handle instances that are
    joining and leaving clusters for various reasons, like autoscaling, being unhealthy,
    and so on.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: Netflix使用Turbine与Eureka服务器插件来处理因各种原因加入和离开集群的实例，例如自动缩放、不健康等。
- en: HashiCorp Consul
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HashiCorp Consul
- en: Consul is a service discovery and configuration tool to support microservices.
    Consul was initiated by Hashi Corp in 2014, mainly focusing on distributed services
    across multiple data centers. Also, Consul keeps data safe and works with big
    infrastructures. By configuring services with keys and values, and finding the
    services it needs, Consul solves the core problem of microservices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Consul是一个服务发现和配置工具，用于支持微服务。Consul是由Hashi Corp于2014年发起的，主要专注于跨多个数据中心的分布式服务。此外，Consul可以保护数据并与大型基础设施配合工作。通过使用键和值配置服务，并找到所需的服务，Consul解决了微服务的核心问题。
- en: Consul has servers and clients that form a single Consul cluster. In the Consul
    cluster, nodes will be able to store and replicate data. Discovering other members
    in the cluster happens automatically, with the help of at least one member's address.
    Also, Consul provides a dynamic infrastructure, so there is no extra coding/development
    needed for the auto-discovery of services.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Consul有服务器和客户端，形成一个单一的Consul集群。在Consul集群中，节点将能够存储和复制数据。通过至少一个成员的地址的帮助，自动发现集群中的其他成员。此外，Consul提供了动态基础设施，因此不需要额外的编码/开发来自动发现服务。
- en: Consul is made for both the DevOps community and application developers to support
    modern and elastic infrastructures.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Consul旨在为DevOps社区和应用程序开发人员提供支持现代和弹性基础设施的工具。
- en: Eclipse MicroProfile
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile
- en: Eclipse MicroProfile was initiated by companies such as RedHat, IBM, and other
    groups, to provide a specification for building microservices. This project was
    started in 2016, and recently they have released the 1.2 version of MicroProfile.
    It mainly focuses on optimizing enterprise Java for microservice architectures.
    Both Payara Micro and Payara Servers are compatible with Eclipse MicroProfile.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile是由RedHat、IBM等公司和其他团体发起的，旨在为构建微服务提供规范。该项目始于2016年，最近发布了MicroProfile的1.2版本。它主要专注于优化企业Java以适应微服务架构。Payara
    Micro和Payara Servers都与Eclipse MicroProfile兼容。
- en: Eclipse MicroProfile version 1.2 comes with a config API, health checks, fault
    tolerance, metrics, and other necessary tools to support microservices.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse MicroProfile 1.2版本配备了配置API、健康检查、容错、度量和其他支持微服务的必要工具。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have briefly discussed monoliths and their drawbacks. We
    then talked about microservices and their benefits, and related topics. Also,
    we talked about the basic principles of microservices, including resilience and
    fault tolerance.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要讨论了单体应用及其缺点。然后我们谈到了微服务及其优点以及相关主题。此外，我们还讨论了微服务的基本原则，包括弹性和容错。
- en: In the later section of this chapter, we talked about microservice components
    and covered tools involved with microservices, such as Netflix Eureka, Zuul, and
    so on. In the next and final chapter, we will work on a Ticket management real-time
    scenario, with advanced CRUD operations, including authentication and authorization.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们讨论了微服务组件，并涵盖了与微服务相关的工具，如Netflix Eureka、Zuul等。在下一章和最后一章中，我们将处理一个包括身份验证和授权在内的高级CRUD操作的实时票务管理场景。
