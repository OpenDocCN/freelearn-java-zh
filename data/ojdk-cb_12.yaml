- en: Chapter 12. Working with Future Technologies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。与未来技术合作
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Building OpenJDK 9 on Mac OS X using Clang
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mac OS X上使用Clang构建OpenJDK 9
- en: Building OpenJDK 9 on Windows using MSYS
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows上使用MSYS构建OpenJDK 9
- en: Running and testing the early access preview of OpenJDK 9
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行和测试OpenJDK 9的早期访问预览
- en: Using Jigsaw
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Jigsaw
- en: Building OpenJDK 9 with Graal
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Graal构建OpenJDK 9
- en: Building OpenJDK 9 with Sumatra
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sumatra构建OpenJDK 9
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Java is often criticized because of some degree of conservatism, where major
    language changes are concerned. However, the recent Java 8 release has done a
    lot to relieve the worry that Java will remain conservative and frozen in time.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Java经常因为某些程度的保守性而受到批评，尤其是在涉及主要语言变化时。然而，最近的Java 8版本已经做了很多工作来缓解人们对Java将保持保守和停滞不前的担忧。
- en: However, there are more changes coming. Java 9 is believed to support some long-awaited
    features that will possibly take it to a completely new market and level of programming.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有更多的变化即将到来。Java 9被认为将支持一些长期期待的功能，这可能会将其带入一个全新的市场和编程水平。
- en: In the past, annotations support and generics have caused a revolution in Java
    programming. The way of thinking was changed, and, while nothing completely new
    was added to the way Java operates in the low-level design, the high-level design
    and programming techniques were undoubtedly changed. The result was, for example,
    a rise in annotation-based frameworks and simpler programming as a whole.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，注解支持和泛型在Java编程中引起了一场革命。思维方式发生了改变，尽管在低级设计中没有添加任何全新的内容，但高级设计和编程技术无疑发生了变化。结果是，例如，基于注解的框架数量增加，整体编程变得更加简单。
- en: Java 8 has been released with lambda expressions support, type annotations,
    and parameter reflection for public use. But it was possible to use it since late
    2012, at least. It was possible to have all this functionality, to write programs
    with all these features, to have fun with testing new technologies, well before
    the official release date. Some enterprise developers consider modern Java as
    unstable and slightly unpredictable even after the release. However, each programmer,
    who was interested in the new technologies' testing and support and who contributes
    to it, was able to test and try OpenJDK 8 when it was at development stage.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Java 8已经发布了支持lambda表达式、类型注解和公共用途的参数反射。但至少从2012年底开始就可以使用它。在官方发布日期之前，就可以拥有所有这些功能，编写具有所有这些特性的程序，享受测试新技术带来的乐趣。一些企业开发者认为，即使在发布后，现代Java仍然是不稳定的，并且有些不可预测。然而，任何对新技术测试和支持感兴趣并为之做出贡献的程序员，都能在开发阶段测试和尝试OpenJDK
    8。
- en: What is the situation with OpenJDK 9 early access previews were released immediately
    after the Java 8 release. So we can now try OpenJDK 9\. Of course, it is still
    unstable and doesn't even pass some regression tests, but it is going to change.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 9早期访问预览在Java 8发布后立即发布。因此，我们现在可以尝试OpenJDK 9。当然，它仍然不稳定，甚至没有通过一些回归测试，但它将会改变。
- en: What are the main differences between OpenJDK 8 and 9?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: OpenJDK 8和9之间有哪些主要区别？
- en: 'There are three main features:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个主要特性：
- en: The First is the long awaited elimination of type erasure. With new refined
    generics, it will be possible to determine which type is used in a collection
    or map, or a tuple—on every generic reference. For all Java programmers this is
    going to be a major relief.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一项是长期期待的类型擦除的消除。通过新的精细泛型，将能够在每个泛型引用上确定在集合、映射或元组中使用的是哪种类型。对于所有Java程序员来说，这将是一个巨大的缓解。
- en: The second feature is intended to bring the Java platform a new ally—the whole
    might of a GPU will now be in the hands of a programmer, using only standard features
    without a scrap of native code. It will be explained further in this chapter.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个特性旨在为Java平台带来一个新的盟友——GPU的全部力量现在将掌握在程序员手中，只需使用标准特性，无需任何原生代码。这一点将在本章中进一步解释。
- en: And a third one is Graal, the project that exposes Java VM APIs to the end user.
    It is a great breakthrough since it is possible to change the way Java operates
    on the fly.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三项是Graal项目，它将Java VM API暴露给最终用户。这是一个巨大的突破，因为现在可以即时更改Java的操作方式。
- en: There is more to be done; Java 9 will also contain less GC types without a drop
    in performance.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的工作要做；Java 9也将包含更少的GC类型，而不会降低性能。
- en: Tip
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Be aware, underscore (_) will not be a legal identifier name in Java 9, so prepare
    your code in time. Find more details at [http://openjdk.java.net/jeps/213](http://openjdk.java.net/jeps/213).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，下划线 (_) 在 Java 9 中将不会是一个合法的标识符名称，所以请及时准备你的代码。更多详细信息请查看 [http://openjdk.java.net/jeps/213](http://openjdk.java.net/jeps/213)。
- en: Also, for those who work with money transactions and financial analytics, there
    is another Java 9 feature—JSR 354, the Money API. It will implement the ISO-4217
    standard currencies along with some additional ones. Currency arithmetics will
    also be introduced.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，对于那些处理货币交易和金融分析的人来说，Java 9 还有一个特性——JSR 354，货币 API。它将实现 ISO-4217 标准货币和一些额外的货币。还将引入货币算术。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: To test the Java Money API, build the source code from [https://github.com/JavaMoney/jsr354-api](https://github.com/JavaMoney/jsr354-api).
    However, this is a Maven project that meets the JSR requirements, and is not a
    part of the OpenJDK project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试 Java Money API，从 [https://github.com/JavaMoney/jsr354-api](https://github.com/JavaMoney/jsr354-api)
    构建源代码。然而，这是一个满足 JSR 要求的 Maven 项目，不是 OpenJDK 项目的组成部分。
- en: Building OpenJDK 9 on Mac OS X using Clang
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上使用 Clang 构建 OpenJDK 9
- en: At the time of writing, the OpenJDK 9 project was still quite similar to OpenJDK
    8\. So most of the information about building OpenJDK 9 can be found in [Chapter
    4](ch04.html "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，OpenJDK 9 项目仍然与 OpenJDK 8 非常相似。因此，关于构建 OpenJDK 9 的大部分信息都可以在 [第 4 章](ch04.html
    "第 4 章。构建 OpenJDK 8")，*构建 OpenJDK 8* 中找到。
- en: One point that differentiates OpenJDK 9 from OpenJDK 8 is the usage of the Clang
    compiler on Mac OS X. Starting with Xcode Version 5, Clang became the official
    compiler on Mac OS X instead of GCC. There were plans to use it as an official
    compiler for OpenJDK 8 on Mac OS X but that switch was postponed to OpenJDK 9.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 区分 OpenJDK 9 和 OpenJDK 8 的一个点是 Mac OS X 上使用 Clang 编译器。从 Xcode 版本 5 开始，Clang
    成为了 Mac OS X 的官方编译器，而不是 GCC。原本计划将其用作 Mac OS X 上 OpenJDK 8 的官方编译器，但这个切换被推迟到了 OpenJDK
    9。
- en: In this recipe, we will build the current codebase of OpenJDK 9 using Xcode
    5 and the Clang compiler.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用 Xcode 5 和 Clang 编译器构建 OpenJDK 9 的当前代码库。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need a clean Mac OS X 10.8 Mountain Lion or 10.9 Mavericks
    running with Mercurial source control tools installed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们需要一个干净安装了 Mercurial 源控制工具的 Mac OS X 10.8 Mountain Lion 或 10.9 Mavericks
    系统。
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The following procedure will help us to build OpenJDK 9:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建 OpenJDK 9：
- en: Download Xcode 5 from [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)
    (an Apple developer's account is required, registration is free) and install it.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/) 下载
    Xcode 5（需要 Apple 开发者账户，注册免费）并安装它。
- en: Download the Command Line Tools for the corresponding minor version of Xcode
    using the same download link mentioned previously, and install it.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用之前提到的相同下载链接下载对应 Xcode 小版本的命令行工具，并安装它。
- en: 'Run the following command from the terminal to set up the Command Line Tools:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从终端运行以下命令以设置命令行工具：
- en: '[PRE0]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Install JDK 8—Oracle distribution, or prebuilt OpenJDK binaries may be used.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 JDK 8—Oracle 发行版，或者可以使用预构建的 OpenJDK 二进制文件。
- en: 'Obtain the source code from the Mercurial repository:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Mercurial 仓库获取源代码：
- en: '[PRE1]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Run the autotools configuration script:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 autotools 配置脚本：
- en: '[PRE2]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Start the build:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始构建：
- en: '[PRE3]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The built binaries will be put into the following directory:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建的二进制文件将被放入以下目录：
- en: '[PRE4]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Xcode 5 uses the Clang compiler by default and OpenJDK 9 already has all the
    adjustments required for switching compiler from GCC to Clang.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Xcode 5 默认使用 Clang 编译器，OpenJDK 9 已经对所有从 GCC 切换到 Clang 所需的调整。
- en: There's more...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With the older versions of OpenJDK 9, the installation of the X11 server may
    be required. The X11 server can be installer from the *XQuartz* project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OpenJDK 9 的早期版本中，可能需要安装 X11 服务器。X11 服务器可以从 *XQuartz* 项目中进行安装。
- en: See also
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Building OpenJDK 8 on Mac OS X recipe from [Chapter 4](ch04.html "Chapter 4. Building
    OpenJDK 8"), *Building OpenJDK 8*
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 [第 4 章](ch04.html "第 4 章。构建 OpenJDK 8")，*构建 OpenJDK 8* 中获取构建 OpenJDK 8 在 Mac
    OS X 上的配方
- en: Building OpenJDK 9 on Windows using MSYS
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 上使用 MSYS 构建 OpenJDK 9
- en: The Windows operating system has a long history of different tools providing
    a Unix-like environment. Tools such as Microsoft POSIX subsystem, Interix, Windows
    Services for UNIX, MKS Toolkit, Cygwin, MinGW/MSYS, and so on, existed during
    the various periods of Windows history and provided different levels of Unix compliance.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Windows操作系统有着悠久的提供类似Unix环境的不同工具的历史。在Windows历史的各个时期，存在过诸如Microsoft POSIX子系统、Interix、Windows
    Services for UNIX、MKS Toolkit、Cygwin、MinGW/MSYS等工具，它们提供了不同级别的Unix兼容性。
- en: The three latter tools are most relevant to OpenJDK builds. MKS Toolkit was
    used for internal builds in Sun Microsystems because it provided better speed
    than Cygwin. Support for MKS Toolkit was discontinued with OpenJDK 7\. Cygwin,
    that we described in detail in [Chapter 2](ch02.html "Chapter 2. Building OpenJDK
    6"), *Building OpenJDK 6*, was used as the main and only tool to build OpenJDK
    7 and 8.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个后者的工具与OpenJDK构建最为相关。MKS Toolkit曾用于Sun Microsystems的内部构建，因为它提供了比Cygwin更好的速度。OpenJDK
    7不再支持MKS Toolkit。我们在[第2章](ch02.html "第2章。构建OpenJDK 6" "Building OpenJDK 6"）中详细描述的Cygwin被用作构建OpenJDK
    7和8的主要和唯一工具。
- en: MSYS (short form for minimal system) is a part of the MinGW (Minimalist GNU
    for Windows) project. The MinGW project was started as a fork of Cygwin with the
    goal to provide closer integration with Windows API for the cost of lower level
    Unix support. MinGW-based applications are standalone native Windows applications
    and do not require the `cygwin.dll` library. Among other things, this can bring
    better speed for some applications using Windows API through MinGW instead of
    emulated Unix calls (like fork) through Cygwin. Applications should be changed
    accordingly, though.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: MSYS（最小化系统的简称）是MinGW（Minimalist GNU for Windows）项目的一部分。MinGW项目最初作为Cygwin的一个分支启动，目的是为了以较低级别的Unix支持为代价，提供与Windows
    API的更紧密集成。基于MinGW的应用程序是独立的本地Windows应用程序，不需要`cygwin.dll`库。在这方面，这可以带来一些使用MinGW而不是通过Cygwin的模拟Unix调用（如fork）的一些应用程序更好的速度。尽管如此，应用程序应该相应地进行更改。
- en: The MSYS project provides a minimalistic shell environment and also provides
    first-class support for running GNU Autoconf based builds. Actually running Autoconf's
    configure scripts efficiently was one of the goals of MSYS. In some cases, the
    configure scripts can be extremely slow in Cygwin because of extensive use of
    new processes spawning.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: MSYS项目提供了一个简约的shell环境，同时也提供了对基于GNU Autoconf的构建的第一级支持。实际上，有效地运行Autoconf的configure脚本之一是MSYS的目标。在某些情况下，由于大量使用新进程的创建，Cygwin中的configure脚本可能会非常慢。
- en: Due to better speed in OpenJDK builds, MSYS support was restored in OpenJDK
    9 as a second supported environment along with Cygwin.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在OpenJDK构建中速度更快，MSYS支持在OpenJDK 9中被恢复，作为第二个支持的环境，与Cygwin并列。
- en: In this recipe, we will build OpenJDK 9 on Windows 7 using MSYS instead of Cygwin.
    At the time of writing, OpenJDK 9 was still in development and we have used the
    latest available source code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用MSYS而不是Cygwin在Windows 7上构建OpenJDK 9。在撰写本文时，OpenJDK 9仍在开发中，我们使用了可用的最新源代码。
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will need Windows 7 (32- or 64-bit) running.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们需要Windows 7（32位或64位）运行。
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'The following procedure will help us to build OpenJDK 9:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将帮助我们构建OpenJDK 9：
- en: Download Microsoft .NET Framework 4 from the Microsoft website and install it.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft网站下载Microsoft .NET Framework 4并安装它。
- en: Download Microsoft Windows SDK for Windows 7 (the `GRMSDKX_EN_DVD.iso` file)
    from the Microsoft website and install it to the default location. The .NET Development
    and Common Utilities components are not required.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Microsoft网站下载Microsoft Windows SDK for Windows 7（`GRMSDKX_EN_DVD.iso`文件）并将其安装到默认位置。.NET开发工具和通用工具组件不是必需的。
- en: Download Visual Studio 2010 Express and install it (C++ variant) to the default
    location.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载Visual Studio 2010 Express并安装它（C++版本）到默认位置。
- en: 'Download and install Microsoft DirectX 9.0 SDK (Summer 2004) to the default
    installation path. Note that this distribution is not available on the Microsoft
    website anymore. It may be downloaded elsewhere online, the file details are as
    follows:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Microsoft DirectX 9.0 SDK（2004年夏季版）下载并安装到默认安装路径。请注意，这个版本在Microsoft网站上已经不再提供。它可能可以在其他在线位置下载，文件详情如下：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Download the prebuilt FreeType libraries from the `openjdk-unofficial-builds`
    GitHub project (directory `7_64`) and put the binaries into the `c:\freetype\lib`
    directory and the header files into the `c:\freetype\include` directory.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`openjdk-unofficial-builds` GitHub项目（目录`7_64`）下载预构建的FreeType库，并将二进制文件放入`c:\freetype\lib`目录，将头文件放入`c:\freetype\include`目录。
- en: Install the OpenJDK 8 binaries or Oracle Java 8 into `c:\jdk8`.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将OpenJDK 8的二进制文件或Oracle Java 8安装到`c:\jdk8`。
- en: Download and install the Mercurial SCM tool from the [mercurial.selenic.com](http://mercurial.selenic.com)
    website.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[mercurial.selenic.com](http://mercurial.selenic.com)网站下载并安装Mercurial SCM工具。
- en: 'Clone the current development forest of OpenJDK 9 to the `C:\openjdk` directory:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将OpenJDK 9当前的开发森林克隆到`C:\openjdk`目录：
- en: '[PRE6]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Download the `mingw-get` utility (`mingw-get-setup.exe`) from [http://mingw.org/](http://mingw.org/)
    and install it to the `C:\MinGW` path.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://mingw.org/](http://mingw.org/)下载`mingw-get`实用程序（`mingw-get-setup.exe`）并将其安装到`C:\MinGW`路径。
- en: Run the `cmd.exe` shell and navigate to the directory.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行`cmd.exe`外壳程序并导航到目录。
- en: 'Run the following command to revert the installed version of MSYS from the
    latest one to 1.0.17:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令将已安装的MSYS版本从最新版本回退到1.0.17：
- en: '[PRE7]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Run the following commands to install all required MSYS packages:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令安装所有必需的MSYS软件包：
- en: '[PRE8]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Run the MSYS shell using the `C:\MinGW\msys\1.0\msys.bat` file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`C:\MinGW\msys\1.0\msys.bat`文件运行MSYS外壳程序。
- en: 'Navigate to the `c/openjdk` directory and download the source code for all
    OpenJDK subrepositories with the following command:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`c/openjdk`目录，并使用以下命令下载所有OpenJDK子存储库的源代码：
- en: '[PRE9]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a path for the JDK 8 binaries in the `PATH` variable:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PATH`变量中添加JDK 8二进制文件的路径：
- en: '[PRE10]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Change the filesystem permissions for all source files:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改所有源文件的文件系统权限：
- en: '[PRE11]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the configure script specifying path to the FreeType binaries:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 指定FreeType二进制文件的路径运行配置脚本：
- en: '[PRE12]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Start the build process writing the output to the screen and logfile simultaneously:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时将输出写入屏幕和日志文件以启动构建过程：
- en: '[PRE13]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Wait for the build to finish.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待构建完成。
- en: How it works...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At the time of writing, OpenJDK 9 code uses the same toolchain as OpenJDK 8,
    so the environment setup is similar.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，OpenJDK 9代码使用与OpenJDK 8相同的工具链，因此环境设置类似。
- en: We use Version 1.0.17 of MSYS because the regression related to multicores support
    appeared in the 1.0.18 Version. This regression is not fixed at the time of writing
    but will most likely be fixed in the following versions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用MSYS的1.0.17版本，因为1.0.18版本中出现了与多核支持相关的回归问题。这个回归问题在撰写本文时尚未修复，但很可能将在后续版本中得到修复。
- en: The `mingw-get` utility is a package manager that allows us to install or update
    the required MSYS packages.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`mingw-get`实用程序是一个软件包管理器，允许我们安装或更新所需的MSYS软件包。'
- en: See also
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Installing Cygwin for Windows builds* recipe from [Chapter 2](ch02.html
    "Chapter 2. Building OpenJDK 6"), *Building OpenJDK 6*
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第2章](ch02.html "第2章。构建OpenJDK 6")的*为Windows构建安装Cygwin*配方，*构建OpenJDK 6*
- en: The *Building OpenJDK 8 on Windows 7 SP1* recipe from [Chapter 4](ch04.html
    "Chapter 4. Building OpenJDK 8"), *Building OpenJDK 8*
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自[第4章](ch04.html "第4章。在Windows 7 SP1上构建OpenJDK 8")的*在Windows 7 SP1上构建OpenJDK
    8*配方，*构建OpenJDK 8*
- en: The OpenJDK bug related to the restoration of MSYS support in OpenJDK 9 at [https://bugs.openjdk.java.net/browse/JDK-8022177](https://bugs.openjdk.java.net/browse/JDK-8022177)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与OpenJDK 9中MSYS支持的恢复相关的OpenJDK错误[https://bugs.openjdk.java.net/browse/JDK-8022177](https://bugs.openjdk.java.net/browse/JDK-8022177)
- en: The OpenJDK mailing list thread about the regression in MSYS 1.0.18 at [http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html](http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于MSYS 1.0.18中回归的OpenJDK邮件列表线程[http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html](http://mail.openjdk.java.net/pipermail/build-dev/2014-August/012917.html)
- en: The MSYS website at [http://www.mingw.org/wiki/msys](http://www.mingw.org/wiki/msys)
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MSYS网站[http://www.mingw.org/wiki/msys](http://www.mingw.org/wiki/msys)
- en: Information about Windows service for Unix at [http://technet.microsoft.com/en-us/library/bb496506.aspx](http://technet.microsoft.com/en-us/library/bb496506.aspx)
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Windows服务Unix的信息[http://technet.microsoft.com/en-us/library/bb496506.aspx](http://technet.microsoft.com/en-us/library/bb496506.aspx)
- en: The MKS Toolkit website at [http://mkssoftware.com/](http://mkssoftware.com/)
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MKS Toolkit网站[http://mkssoftware.com/](http://mkssoftware.com/)
- en: The Cygwin website at [http://cygwin.com/](http://cygwin.com/)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cygwin网站[http://cygwin.com/](http://cygwin.com/)
- en: Running and testing the early access preview of OpenJDK 9
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行并测试OpenJDK 9的早期访问预览
- en: We will get the newest OpenJDK code available and will test for feature availability.
    Don't hesitate to try new features, they may be available in the newer releases.
    Since the OpenJDK 9 release, it will remain the fastest way to give OpenJDK 9
    a test. Hopefully, upon the release, the same thing will work for OpenJDK 10.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将获取最新的OpenJDK代码，并测试功能可用性。不要犹豫去尝试新功能，它们可能在更新的版本中可用。自从OpenJDK 9发布以来，这将是测试OpenJDK
    9最快的方式。希望发布时，同样的事情也会适用于OpenJDK 10。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need an Internet connection. Aside from that, nothing is needed.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个互联网连接。除此之外，不需要任何东西。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will download, unpack, and run the latest publicly available full OpenJDK
    build:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将下载、解包并运行最新的公开可用完整OpenJDK构建：
- en: Open the page [https://jdk9.java.net/](https://jdk9.java.net/).
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开[https://jdk9.java.net/](https://jdk9.java.net/)页面。
- en: Download the early access preview, as shown:![How to do it...](img/8405OT_12_01.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载早期访问预览，如图所示：![如何操作...](img/8405OT_12_01.jpg)
- en: Run an installer.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序。
- en: You can find out how to install OpenJDK from an archive in [Chapter 1](ch01.html
    "Chapter 1. Getting Started with OpenJDK"), *Getting Started with OpenJDK* of
    this book.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在本书的[第1章](ch01.html "第1章. OpenJDK入门") *OpenJDK入门*中找到如何从存档中安装OpenJDK的方法。
- en: 'Test some interesting features that are already included in the early access
    JDK. Look at the following code:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 测试早期访问JDK中已经包含的一些有趣的功能。查看以下代码：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When executed, you may expect it to return the following string, or something
    similar:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行时，您可能期望它返回以下字符串或类似的内容：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Although there are some minor improvements and a lot of bug fixes, there are
    not yet any major changes in the early access preview.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有一些小的改进和大量的错误修复，但在早期访问预览中还没有任何重大变化。
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the source repository on [http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9),
    there are tags, such as `jdk9-b<build number>`, which are automatically built
    into the early access releases. Although there are no nightly builds, you can
    always build them from source, if you have lots of time and a machine that's powerful
    enough to start with.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9)的源代码仓库中，有一些标签，例如`jdk9-b<build
    number>`，它们会自动构建成早期访问版本。尽管没有夜间构建，但如果您有很多时间和一台足够强大的机器，您始终可以从源代码构建它们。
- en: Don't forget to update your once installed releases—there will be really major
    and exciting changes, including those explained next. Sooner or later, developers
    will come out with Java 9 full, and then there will be time to test it before
    it becomes production ready.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记更新您已安装的版本——将会有真正重大和令人兴奋的变化，包括下面解释的。迟早，开发者会推出完整的Java 9版本，那时将有机会在它成为生产就绪之前对其进行测试。
- en: There's more...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also build OpenJDK 9 from source:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从源代码构建OpenJDK 9：
- en: Clone the source code repository `hg` clone at [http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆源代码仓库`hg` [http://hg.openjdk.java.net/jdk9/jdk9](http://hg.openjdk.java.net/jdk9/jdk9)
- en: 'Get the source code of the OpenJDK subprojects:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取OpenJDK子项目的源代码：
- en: '[PRE16]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then configure the OpenJDK instance to be built:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后配置要构建的OpenJDK实例：
- en: '[PRE17]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'And, finally, do the build itself:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，进行构建本身：
- en: '[PRE18]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The final strings of your output will look like this:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您输出的最终字符串将看起来像这样：
- en: '[PRE19]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Using Jigsaw
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Jigsaw
- en: Jigsaw is the brand-new modular system for Java. It brings to mind some existing
    products, such as Maven or Gradle, but its most interesting feature is the possibility
    of the modularization of the JDK itself. Jigsaw will allow, upon its full completion,
    to modularize even some features that was thought as unseparable, such as HotSpot
    binaries.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw是Java全新的模块化系统。它让人联想到一些现有的产品，如Maven或Gradle，但它的最有趣的特点是JDK本身的模块化可能性。Jigsaw将允许在其完全完成后，甚至对一些被认为不可分割的功能进行模块化，例如HotSpot二进制文件。
- en: Jigsaw incorporates proposals about the Java modular system. Modularity means
    scalability—from small, embedded devices that need only basic functionality and
    have poor performance, to full-scale data centers with dozens of machines. Some
    of these goals have already been reached—but Jigsaw presents a universal way to
    resolve dependencies on all platforms, starting from Java itself.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw包含了关于Java模块系统的提案。模块化意味着可扩展性——从小型、嵌入式设备，它们只需要基本功能且性能较差，到拥有数十台机器的全规模数据中心。其中一些目标已经实现——但Jigsaw提供了一个在所有平台上解决依赖关系的通用方式，从Java本身开始。
- en: 'Several JEPs are part of Jigsaw:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 几个JEP是Jigsaw的一部分：
- en: '**JEP 200**: This makes the JDK itself modular'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JEP 200**：这使得JDK本身模块化'
- en: '**JEP 201**: This makes the source code modular'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JEP 201**：这使得源代码模块化'
- en: '**JEP 220**: This makes the runtime Java images modular, so they can be loaded
    in parts'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JEP 220**：这使得运行时Java镜像模块化，因此它们可以部分加载'
- en: 'Some information about the progress of the JEPs are found at the following
    JIRA links:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 关于JEPs进度的某些信息可以在以下JIRA链接中找到：
- en: '[https://bugs.openjdk.java.net/browse/JDK-8051619](https://bugs.openjdk.java.net/browse/JDK-8051619)'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://bugs.openjdk.java.net/browse/JDK-8051619](https://bugs.openjdk.java.net/browse/JDK-8051619)'
- en: '[https://bugs.openjdk.java.net/browse/JDK-8051618](https://bugs.openjdk.java.net/browse/JDK-8051618)'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://bugs.openjdk.java.net/browse/JDK-8051618](https://bugs.openjdk.java.net/browse/JDK-8051618)'
- en: '[https://bugs.openjdk.java.net/browse/JDK-8061971](https://bugs.openjdk.java.net/browse/JDK-8061971)'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://bugs.openjdk.java.net/browse/JDK-8061971](https://bugs.openjdk.java.net/browse/JDK-8061971)'
- en: Also, the core of Jigsaw is JSR 376—the Java platform Module System.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Jigsaw的核心是JSR 376——Java平台模块系统。
- en: Getting ready
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: You will need Internet access. Also, some experience with Maven, or similar
    software is desired. Any knowledge about how the build systems work from the inside
    will be appreciated.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你将需要互联网访问。此外，希望有一些使用Maven或类似软件的经验。任何关于构建系统内部工作原理的知识都将受到欢迎。
- en: How to do it...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following procedure will teach you how to build Jigsaw-enabled Java:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将教你如何构建启用Jigsaw的Java：
- en: First, let's clone a source repo `hg` clone from [http://hg.openjdk.java.net/jigsaw/jigsaw](http://hg.openjdk.java.net/jigsaw/jigsaw).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们从[http://hg.openjdk.java.net/jigsaw/jigsaw](http://hg.openjdk.java.net/jigsaw/jigsaw)克隆一个源代码仓库`hg`。
- en: 'Then, let''s get the source code of the OpenJDK subprojects:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们获取OpenJDK子项目的源代码：
- en: '[PRE20]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then configure the OpenJDK instance to be built:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后配置要构建的OpenJDK实例：
- en: '[PRE21]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'And, finally, do the build itself:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，进行构建本身：
- en: '[PRE22]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Congratulations, you've built Jigsaw-enabled Java.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，你已经构建了启用Jigsaw的Java。
- en: 'Now, we will do some tests:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将进行一些测试：
- en: 'Let''s consider the simple *helloworld1* program:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们考虑简单的*helloworld1*程序：
- en: '[PRE23]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: It has one class, which is imported from a yet nonexistent package.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它有一个类，这个类是从一个尚不存在的包中导入的。
- en: Let's create it.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建它。
- en: '[PRE24]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, we will try to link it using Jigsaw.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将尝试使用Jigsaw链接它。
- en: Jigsaw stores the module declaration in the file named `module-info.java`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw将模块声明存储在名为`module-info.java`的文件中。
- en: 'Let''s create it for those two packages as follows:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为这两个包创建如下：
- en: '[PRE25]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These files are to be placed in the root directory of a package.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些文件应放置在包的根目录中。
- en: 'Let''s consider a situation when all those modules are placed in the same directory
    named `src`:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们考虑这样一个情况，即所有这些模块都放置在同一个名为`src`的目录中：
- en: '[PRE26]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, let''s compile them with `javac` from your jigsaw build:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们使用`javac`从你的jigsaw构建中编译它们：
- en: '[PRE27]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works...
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Jigsaw is a modular system that gives Java its very own build system. Similar
    systems were spawned in the Java world long ago, but they lacked the core support.
    They were never able to bring the modular support advantages to Java's own features.
    Of course, there are some downsides as well. The *Write once, run everywhere*
    slogan is not so applicable as it was before.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Jigsaw是一个模块化系统，为Java提供了它自己的构建系统。在Java世界中，很久以前就出现了类似的系统，但它们缺乏核心支持。它们从未能够将模块化支持的优点带给Java本身的功能。当然，也有一些缺点。*一次编写，到处运行*的口号不像以前那样适用了。
- en: We use the newly built OpenJDK commands to create, install, and export modules.
    Those commands are still under heavy development, but the specification is already
    written so, hopefully, nothing will significantly change before the production-access
    release.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用新构建的OpenJDK命令来创建、安装和导出模块。这些命令仍在积极开发中，但规范已经写出，所以，希望在生产访问发布之前不会有显著的变化。
- en: There's more...
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You also can install a module as a library. To do so, run the following command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以将模块作为库安装。为此，运行以下命令：
- en: 'To create a module library:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要创建一个模块库：
- en: '[PRE28]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This creates a module library `lib1`.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将创建一个模块库`lib1`。
- en: 'To install some modules to the library:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将一些模块安装到库中：
- en: '[PRE29]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This will install your modules under the system parent in the library `lib1`.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将在库`lib1`下将你的模块安装到系统父目录下。
- en: 'Currently, there is no way to remove the module from the library. Maybe, there
    will not be any in the release either. For now, the simplest way to remove a module
    from the library is to delete it physically from the repository:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，没有方法可以从库中删除模块。也许，在发布时也不会有。目前，从库中删除模块的最简单方法是物理地从存储库中删除它：
- en: '[PRE30]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Also, you can run a module, if it contains a standard entry point:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您要运行一个模块，如果它包含标准入口点：
- en: '[PRE31]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Tip
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: The new `-m` option is also contained only in the Jigsaw-enabled Java command.
    As of now (June 2014) it is not contained in any public early access preview.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`-m`选项也仅包含在Jigsaw启用的Java命令中。截至现在（2014年6月），它不包含在任何公共早期访问预览中。
- en: 'As a next feature, you can export a module as a file by performing the following
    command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一个特性，您可以通过执行以下命令将模块导出为文件：
- en: '[PRE32]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `module1@<module version>.jmod` file will be created. It will contain the
    exported, ready-to-use module.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 将创建`module1@<module version>.jmod`文件。它将包含已导出、准备使用的模块。
- en: Building OpenJDK 9 with Graal
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Graal构建OpenJDK 9
- en: 'As described in the project page, Graal is:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如项目页面所述，Graal是：
- en: '*A quest for the JVM to leverage its own J.*'
  id: totrans-194
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*JVM对自身J的探索*'
- en: Upon completion of this project, JVM functions will be exposed via Java APIs,
    so the end user will be able to have access to the most low-level manipulation.
    It will be possible to write a Java compiler in Java, for example. Now, we will
    try to give it a test.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成此项目后，JVM功能将通过Java API公开，因此最终用户将能够访问最底层的操作。例如，将能够用Java编写Java编译器。现在，我们将尝试对其进行测试。
- en: 'There is also **Truffle**, a framework that allows you to build your own language
    using Graal VM. It builds upon a notion of an **abstract syntax tree** (**AST**),
    and the process, in fact, is really simple. To have a better look, see the following
    link:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有**Truffle**，这是一个框架，允许您使用Graal VM构建自己的语言。它基于**抽象语法树**（**AST**）的概念，实际上这个过程非常简单。为了更好地了解，请查看以下链接：
- en: '[https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/](https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/](https://cesquivias.github.io/blog/2014/10/13/writing-a-language-in-truffle-part-1-a-simple-slow-interpreter/)'
- en: Getting ready
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need an Internet connection. Also, it's recommended to read the chapters
    about building OpenJDK.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要互联网连接。此外，建议阅读有关构建OpenJDK的章节。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Have a look at the following procedure to build OpenJDK with Graal:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下步骤以使用Graal构建OpenJDK：
- en: 'First, clone a source repository:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，克隆一个源代码库：
- en: '[PRE33]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Enter a selection value, upon which `vm graal` will be built. Unfortunately,
    it will not be built without modification against the OpenJDK 9-ea preview:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个选择值，`vm graal`将基于此构建。不幸的是，它不会在未经修改的情况下针对OpenJDK 9-ea预览版构建：
- en: '[PRE34]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then choose which VM will be executed. There are two types of VM. In a nutshell,
    `server vm` will use the default hotspot compilation, using Graal itself only
    for explicit Graal API calls, while `graal VM` will compile everything through
    Graal. The first option is much more suitable for production VMs, while the second
    is favorable for testing purposes.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择要执行的VM类型。有两种类型的VM。简而言之，`server vm`将使用默认的hotspot编译，仅使用Graal本身进行显式Graal API调用，而`graal
    VM`将通过Graal编译一切。第一个选项更适合生产VM，而第二个选项更适合测试目的。
- en: '[PRE35]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Then, make a cup of tea, the process may take several dozen minutes.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，泡一杯茶，这个过程可能需要几十分钟。
- en: Then, if you want to initialize your IDE project , run `./mx.sh ideinit`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，如果您想初始化您的IDE项目，请运行`./mx.sh ideinit`。
- en: Then, open your favorite IDE and open a resulting project. It will be shown
    here with IntelliJ Idea:![How to do it...](img/8405OT_12_02.jpg)
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，打开您喜欢的IDE并打开生成的项目。这里以IntelliJ Idea为例：![如何做...](img/8405OT_12_02.jpg)
- en: Explore various tests.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 探索各种测试。
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Graal enabled VM will expose Java APIs to the end user.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Graal启用的虚拟机将向最终用户公开Java API。
- en: There's more...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In [Chapter 8](ch08.html "Chapter 8. Hacking OpenJDK"), *Hacking OpenJDK*, we
    added new intrinsics to the HotSpot, using the crc32 calculation as an example.
    In the Graal project, there is a similar test, which tests the compiled substitution
    of the `CRC32#updateByteBuffer` method. It is contained in the `com.oracle.graal.hotspot.jdk8.test`
    package. Run it, and enjoy the performance change.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](ch08.html "第8章。Hacking OpenJDK") *Hacking OpenJDK* 中，我们向HotSpot添加了新的内建函数，以crc32计算为例。在Graal项目中，有一个类似的测试，它测试了`CRC32#updateByteBuffer`方法的编译替换。它包含在`com.oracle.graal.hotspot.jdk8.test`包中。运行它，并享受性能变化。
- en: Building OpenJDK 9 with Sumatra
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sumatra构建OpenJDK 9
- en: For a long time, Java was considered as a primarily backend tool, due to its
    cross-platform vectoring. Only J2ME was capable of achieving long-term superiority
    in the mobile segment. But now it's going to change. Project Sumatra has the aim
    of delivering GPU-calculation standards to the Java guys.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 很长时间以来，Java被认为是一个主要的后端工具，因为它具有跨平台的向量功能。只有J2ME能够在移动领域实现长期的优势。但现在它将改变。Sumatra项目的目标是向Java开发者提供GPU计算标准。
- en: Getting ready
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will probably need a GPU that supports CUDA and OpenGL, or a HSAIL simulator
    running (because on-board GPUs do not support native GPU languages).
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要一个支持CUDA和OpenGL的GPU，或者一个正在运行的HSAIL模拟器（因为板载GPU不支持本地GPU语言）。
- en: How to do it...
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Sumatra developers are making wide use of the Graal project, described earlier.
    The build consists of two stages. Firstly, the Sumatra JDK is built, like a normal
    OpenJDK build, as shown:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Sumatra开发者广泛使用前面提到的Graal项目。构建分为两个阶段。首先，Sumatra JDK像正常的OpenJDK构建一样构建，如下所示：
- en: '[PRE36]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The second stage consists of building a Graal JDK on top of the Sumatra JDK.
    It may be tricky, but hopefully it will work:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段是在Sumatra JDK之上构建一个Graal JDK。这可能有点棘手，但希望它能成功：
- en: 'Clone a repository `hg` clone [http://hg.openjdk.java.net/sumatra/sumatra-dev/](http://hg.openjdk.java.net/sumatra/sumatra-dev/):'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 克隆一个`hg`仓库`hg clone [http://hg.openjdk.java.net/sumatra/sumatra-dev/](http://hg.openjdk.java.net/sumatra/sumatra-dev/)`：
- en: '[PRE37]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Get the source code:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取源代码：
- en: '[PRE38]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then make the source code:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后制作源代码：
- en: '[PRE39]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Export `JAVA_HOME` to the newly built OpenJDK instance:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`JAVA_HOME`导出到新构建的OpenJDK实例：
- en: '[PRE40]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Build the HSAIL-enabled grail:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建启用了HSAIL的grail：
- en: '[PRE41]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Congratulations! You have a Sumatra-enabled VM.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您有一个启用了Sumatra的虚拟机。
- en: 'Let''s do a little test. Consider a code from an official sample:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做一个简单的测试。考虑一个来自官方样本的代码：
- en: '[PRE42]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: It contains two off-loadable lambdas. We will try to make them run in parallel,
    using the `HSA` API.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含两个可卸载的lambda函数。我们将尝试使用`HSA` API使它们并行运行。
- en: 'First, set `JAVA_HOME` to the Graal JDK:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将`JAVA_HOME`设置为Graal JDK：
- en: '[PRE43]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then clone the `OKRA HSA` interface:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后克隆`OKRA HSA`接口：
- en: '[PRE44]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Make it runnable:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使其可运行：
- en: '[PRE45]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Run the example with and without offloading.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行带有和不带有卸载的示例。
- en: 'You will get the following code in your terminal:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在终端中获得以下代码：
- en: '[PRE46]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Sumatra runs on top of the Graal project. Since all operations with GPU are
    implemented on the VM level, Sumatra uses Graal to gain access to them. Sumatra
    features are at the heavy development stage, and they are subject to various unpredictable
    changes.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: Sumatra运行在Graal项目之上。由于所有与GPU的操作都是在虚拟机级别实现的，Sumatra使用Graal来访问它们。Sumatra的功能处于高度发展阶段，并且可能面临各种不可预测的变化。
- en: But the end user can use some of them, even now, to gain a new level of Java
    productivity at the expense of some compatibility and standardization.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终用户现在就可以使用其中的一些，以牺牲一些兼容性和标准化为代价，获得新的Java生产力水平。
- en: There's more...
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In the Graal suite, there is a possibility to test the Sumatra HSAIL feature.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在Graal套件中，可以测试Sumatra HSAIL功能。
- en: 'To do so, run the following code:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，运行以下代码：
- en: '[PRE47]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The output should look like the following (for Linux Mint 15, or for other
    distributions\OS, results may slightly differ):'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应该看起来像以下这样（对于Linux Mint 15，或其他发行版/操作系统，结果可能略有不同）：
- en: '[PRE48]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The completion of this test will mean that the HSAIL functions are working OK,
    so the cutting-edge Java already benefits from your GPU.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此测试意味着HSAIL函数正在正常工作，因此最前沿的Java已经从您的GPU中受益。
