- en: Chapter 8. The Web Service Client
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 网络服务客户端
- en: We have our service ready and functional, but we need an interface to actually
    use it. Of course, by using a web browser, we are able to perform HTTP GET requests,
    but not more complex requests such as POST. We need to create an HTTP Client for
    that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的服务已经准备好了并且功能正常，但我们需要一个接口来实际使用它。当然，通过使用网络浏览器，我们能够执行HTTP GET请求，但不能执行更复杂的请求，如POST。我们需要创建一个HTTP客户端来处理这些请求。
- en: Also, in many cases, you may need to have your web services call other web services
    and then perform additional processing before returning information to the caller.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在许多情况下，你可能需要让你的网络服务调用其他网络服务，然后在将信息返回给调用者之前执行额外的处理。
- en: Building a client for our application
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的应用程序构建客户端
- en: Dropwizard includes both Jersey and Apache HTTP clients. We will use the Jersey
    client to create a client for our web service.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Dropwizard包含了Jersey和Apache HTTP客户端。我们将使用Jersey客户端来创建我们的网络服务客户端。
- en: Getting ready
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Add the `dropwizard-client` module to the dependencies section of your `pom.xml`
    in order to add web service client support to our project:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将`dropwizard-client`模块添加到你的`pom.xml`文件的依赖项部分，以便为我们的项目添加网络服务客户端支持：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it…
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will create a new resource class that will listen for and accept HTTP GET
    requests from our web browser and then call the appropriate method of the `Contact`
    resource and render the response in a human-friendly format. Let''s have a look
    at the steps required in order to achieve this:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的资源类，它将监听并接受来自我们的网络浏览器的HTTP GET请求，然后调用`Contact`资源的适当方法并以人类友好的格式呈现响应。让我们看看实现这一目标所需的步骤：
- en: 'Create the `ClientResource` class in the `com.dwbook.phonebook.resources` package.
    Similar to the `ContactResource` class, we should first import the required `javax.ws.rs`
    annotations, the representation classes we are going to use, as well as the required
    Jersey client classes as shown in the following code snippet:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`com.dwbook.phonebook.resources`包中创建`ClientResource`类。类似于`ContactResource`类，我们首先应该导入所需的`javax.ws.rs`注解、我们将要使用的表示类，以及如以下代码片段所示所需的Jersey客户端类。
- en: '[PRE1]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Set the context path of the client resource class to `/client/` to logically
    separate the URIs of client and service by adding the appropriate annotation to
    the newly created class:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将客户端资源类的上下文路径设置为`/client/`，通过在新建的类中添加适当的注解来逻辑上分离客户端和服务的URI。
- en: '[PRE2]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Since our client is going to be used by humans, we need a human-friendly response
    type such as `text/plain`, so we will use `MediaType.TEXT_PLAIN`. Define it by
    adding the `@Produces` annotation to our class.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们的客户端将被人类使用，我们需要一个对人类友好的响应类型，例如`text/plain`，因此我们将使用`MediaType.TEXT_PLAIN`。通过在我们的类中添加`@Produces`注解来定义它。
- en: '[PRE3]'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In order to perform calls to other web services (in this case, our service,
    the `ContactResource` class), we need to have a `Client` instance as a member
    of our resource class. This will be provided during initialization, so we need
    to have an appropriate constructor.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了对其他网络服务（在这种情况下，我们的服务，`ContactResource`类）进行调用，我们需要在我们的资源类中有一个`Client`实例作为成员。这将在初始化期间提供，因此我们需要一个适当的构造函数。
- en: '[PRE4]'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Instantiate the client in our application's entry class, and also add the new
    resource to the environment by adding a couple of lines of code to the `App#run()`
    method. Of course, we first need to import `com.sun.jersey.api.client.Client`,
    `io.dropwizard.client.JerseyClientBuilder`, and the `com.dwbook.phonebook.resources.ClientResource`
    class we've just created.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的应用程序的入口类中实例化客户端，并通过在`App#run()`方法中添加几行代码将新的资源添加到环境中。当然，我们首先需要导入`com.sun.jersey.api.client.Client`、`io.dropwizard.client.JerseyClientBuilder`以及我们刚刚创建的`com.dwbook.phonebook.resources.ClientResource`类。
- en: '[PRE5]'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works…
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We now have the client resource ready. This resource has a Jersey `Client` object
    as a member, which we can use to perform HTTP requests on specific URLs by building
    `WebResource` objects (using the `Client#resource()` method) and interacting with
    them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了准备好的客户端资源。这个资源包含一个Jersey `Client`对象作为成员，我们可以使用它通过构建`WebResource`对象（使用`Client#resource()`方法）并在它们之间进行交互来对特定的URL执行HTTP请求。
- en: There's more…
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Most of the time, and generally in large-scale applications, the client is decoupled
    from the backend services, forming a separate application. Backend services usually
    perform more intensive and complex tasks, and it is generally a good practice
    to treat and scale them independently from the client.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数时候，尤其是在大型应用中，客户端与后端服务是解耦的，形成一个独立的应用。后端服务通常执行更复杂和密集的任务，通常将它们独立于客户端进行管理和扩展是好的实践。
- en: Interacting with our services
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与我们的服务交互
- en: We will proceed by adding the necessary methods to the `ClientResource` class,
    bound to the GET requests so they can be easily triggered with a browser. We need
    to add methods for creating, updating, deleting, and retrieving contacts, which
    we will trigger by performing appropriate HTTP requests.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续添加必要的 `ClientResource` 类方法，绑定到 GET 请求，以便它们可以很容易地通过浏览器触发。我们需要添加创建、更新、删除和检索联系人的方法，我们将通过执行适当的
    HTTP 请求来触发它们。
- en: How to do it…
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Add the `#showContact()` method to the `ClientResource` class, binding the query
    `String` parameter `id` as the input using the `@QueryParam` annotation.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `#showContact()` 方法添加到 `ClientResource` 类中，使用 `@QueryParam` 注解将查询 `String`
    参数 `id` 绑定为输入。
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Create the `#newContact()` method. This method is going to accept the properties
    of a `Contact` object as parameters and will create a new contact by performing
    the appropriate HTTP request to the `ContactResource` service.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 `#newContact()` 方法。此方法将接受 `Contact` 对象的属性作为参数，并通过对 `ContactResource` 服务执行适当的
    HTTP 请求来创建一个新的联系人。
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `#updateContact()` method for updating contacts will be quite similar to
    the previous one.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新联系人的 `#updateContact()` 方法将与之前的类似。
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In a similar way, let's add the method for deleting contacts, `#deleteContact()`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以类似的方式，让我们添加删除联系人的方法，`#deleteContact()`。
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now you may build and run the application in order to see what we've done up
    to this point.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以构建并运行应用程序，以查看我们到目前为止所做的工作。
- en: How it works…
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作…
- en: Point your browser at `http://localhost:8080/client/showContact?id=1`. The client
    will perform an HTTP GET request to `http://localhost:8080/contact/1`, parse the
    JSON representation of the contact, and produce a plain text summary of it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的浏览器指向 `http://localhost:8080/client/showContact?id=1`。客户端将对 `http://localhost:8080/contact/1`
    执行 HTTP GET 请求，解析联系人的 JSON 表示，并生成其纯文本摘要。
- en: '![How it works…](img/9530OS_08_01.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/9530OS_08_01.jpg)'
- en: In order to perform an HTTP request, we must first create a `WebResource` instance
    (since RESTful Web Services are all about resources and HTTP verbs) using the
    `#resource(String)` method of our client. Think of `WebResource` as a proxy for
    a specific web service endpoint.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行 HTTP 请求，我们必须首先使用客户端的 `#resource(String)` 方法创建一个 `WebResource` 实例（因为 RESTful
    Web 服务都是关于资源和 HTTP 动词）。将 `WebResource` 视为特定 Web 服务端点的代理。
- en: The `#get()` method of the `WebResource` class takes the class that we will
    use to parse and map the response as a parameter, which will also be its return
    type.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebResource` 类的 `#get()` 方法接受我们将用于解析和映射响应的类作为参数，这也会是其返回类型。'
- en: For the HTTP POST request though, we use the generic HTTP response class, `ClientResponse`,
    which we can use to extract the status code of the response using the `#getStatus()`
    method. Also, we can extract its headers using the `#getHeaders()` method.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 HTTP POST 请求，我们使用通用的 HTTP 响应类 `ClientResponse`，我们可以使用 `#getStatus()` 方法提取响应的状态码。此外，我们还可以使用
    `#getHeaders()` 方法提取其头信息。
- en: Note that for POST and PUT requests, we are also setting up the media type of
    the request data (`WebResource#type()`).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，对于 POST 和 PUT 请求，我们也在设置请求数据的媒体类型（`WebResource#type()`）。
- en: 'If you point your web browser at `http://localhost:8080/client/newContact?firstName=Jane&lastName=Doe&phone=98765432`,
    our client will post that data to `ClientResource`, which will create a new contact
    and return its location back to the client. The client will then show us the new
    contact''s URL as seen in the following screenshot:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将你的网络浏览器指向 `http://localhost:8080/client/newContact?firstName=Jane&lastName=Doe&phone=98765432`，我们的客户端会将这些数据发送到
    `ClientResource`，这将创建一个新的联系人并返回其位置给客户端。然后客户端会显示如下截图中的新联系人的 URL：
- en: '![How it works…](img/9530OS_08_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作…](img/9530OS_08_02.jpg)'
- en: Similarly, we can update a contact using the client by requesting the appropriate
    URL. The URL `http://localhost:8080/client/updateContact?id=1&firstName=Alex&lastName=Updated&phone=3210465`
    will trigger a PUT request to the contact service, which will eventually update
    the contact with `id` equal to 1.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以通过客户端请求适当的 URL 来更新联系。URL `http://localhost:8080/client/updateContact?id=1&firstName=Alex&lastName=Updated&phone=3210465`
    将触发对联系服务的 PUT 请求，最终更新 `id` 等于 1 的联系。
- en: As you may already be guessing, the URL `http://localhost:8080/client/deleteContact?id=1`
    will send the relevant HTTP DELETE request to contact service, deleting the contact
    identified by the given `id`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经猜到的，URL `http://localhost:8080/client/deleteContact?id=1` 将发送相关的 HTTP
    DELETE 请求到联系服务，删除由给定 `id` 标识的联系。
- en: There's more…
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Note that in the case of validation errors during the creation of a new contact,
    these errors are communicated to the client. Our client checks the status code
    of the POST request, and if it is not equal to `201` (which indicates that the
    entity has been created), then it parses the response as a string and presents
    it to the user.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在创建新联系时出现验证错误的情况下，这些错误会通知客户端。我们的客户端检查 POST 请求的状态码，如果它不等于 `201`（表示实体已被创建），则将响应解析为字符串并展示给用户。
- en: 'For example, navigate to `http://localhost:8080/client/newContact?firstName=J&lastName=D&phone=9`.
    Since we have set constraints indicating that the length of `firstName`, `lastName`,
    and `phone` shall be greater than 2, we will get validation errors as you can
    see in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，导航到 `http://localhost:8080/client/newContact?firstName=J&lastName=D&phone=9`。由于我们已经设置了约束，指出
    `firstName`、`lastName` 和 `phone` 的长度应大于 2，因此您将看到以下截图中的验证错误：
- en: '![There''s more…](img/9530OS_08_03.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![还有更多…](img/9530OS_08_03.jpg)'
