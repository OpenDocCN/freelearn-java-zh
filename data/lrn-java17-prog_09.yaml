- en: '*Chapter 7*: Java Standard and External Libraries'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第七章*：Java 标准库和外部库'
- en: It is not possible to write a Java program without using the standard libraries,
    also called the **Java Class Library** (**JCL**). That is why a solid familiarity
    with such libraries is as vital for successful programming as knowing the language
    itself.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 没有使用标准库（也称为 **Java 类库**（**JCL**））就无法编写 Java 程序。这就是为什么对这类库的熟悉程度对于成功的编程来说与了解语言本身一样重要。
- en: There are also the non-standard libraries, which are called external libraries
    or third-party libraries because they are not included in the **Java Development
    Kit** (**JDK**) distribution. Some of them have long become a permanent fixture
    of any programmer’s toolkit.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有非标准库，也称为外部库或第三方库，因为它们不包括在 **Java 开发工具包**（**JDK**）的发行版中。其中一些已经成为任何程序员工具箱中的永久性固定装置。
- en: Keeping track of all the functionality that’s available in these libraries is
    not easy. This is because an `java.lang`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 跟踪这些库中所有可用的功能并不容易。这是因为一个 `java.lang`。
- en: The purpose of this chapter is to provide you with an overview of the functionality
    of the most popular packages of JCL, as well as external libraries.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是为您提供一个关于 JCL 最受欢迎的包以及外部库的功能概述。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: '**Java Class Library** (**JCL**)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java 类库**（**JCL**）'
- en: External libraries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部库
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To be able to execute the code examples in this chapter, you will need the
    following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够执行本章中的代码示例，您需要以下内容：
- en: A computer with Microsoft Windows, Apple macOS, or the Linux operating system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭载 Microsoft Windows、Apple macOS 或 Linux 操作系统的计算机
- en: Java SE version 17 or later
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java SE 版本 17 或更高版本
- en: An IDE or code editor of your choice
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您选择的 IDE 或代码编辑器
- en: The instructions on how to set up a Java SE and IntelliJ IDEA editor were provided
    in [*Chapter 1*](B18388_01_ePub.xhtml#_idTextAnchor015), *Getting Started with
    Java 17*. The files that contain the code examples for this chapter are available
    on GitHub in the [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    repository, in the `examples/src/main/java/com/packt/learnjava/ch07_libraries`
    folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第一章*](B18388_01_ePub.xhtml#_idTextAnchor015)“Java 17 入门”中提供了如何设置 Java SE
    和 IntelliJ IDEA 编辑器的说明。包含本章代码示例的文件可在 GitHub 的 [https://github.com/PacktPublishing/Learn-Java-17-Programming.git](https://github.com/PacktPublishing/Learn-Java-17-Programming.git)
    仓库中的 `examples/src/main/java/com/packt/learnjava/ch07_libraries` 文件夹中找到。
- en: Java Class Library (JCL)
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java 类库（JCL）
- en: JCL is a collection of packages that implement the language. In simpler terms,
    it is a collection of the `.class` files that are included in the JDK and ready
    to be used. Once you have installed Java, you get them as part of the installation
    and can start building your application code up using the JCL classes as building
    blocks, which take care of a lot of the low-level plumbing. The richness and ease
    of use of JCL have substantially contributed to Java’s popularity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: JCL 是一组实现语言的包。用更简单的话说，它是一组包含在 JDK 中的 `.class` 文件集合，可供使用。一旦您安装了 Java，您就会作为安装的一部分获得它们，并可以使用
    JCL 类作为构建块开始构建您的应用程序代码，这些构建块负责处理大量的底层管道。JCL 的丰富性和易用性在很大程度上促进了 Java 的普及。
- en: To use a JCL package, you can import it without adding a new dependency to the
    `pom.xml` file. Maven adds JCL to the classpath automatically. And that is what
    separates the standard library and external libraries; if you need to add a library
    (typically, a `.jar` file) as a dependency in the Maven `pom.xml` configuration
    file, this library is an external one. Otherwise, it is a standard library or
    JCL.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 JCL 包，您可以在不向 `pom.xml` 文件添加新依赖项的情况下导入它。Maven 会自动将 JCL 添加到类路径中。这就是标准库和外部库的区别；如果您需要将库（通常是
    `.jar` 文件）作为依赖项添加到 Maven `pom.xml` 配置文件中，则该库是外部库。否则，它是一个标准库或 JCL。
- en: Some JCL package names start with `java`. Traditionally, they are called *core
    Java packages*, while those that start with `javax` used to be called *extensions*.
    This was done because the extensions were thought to be optional and maybe even
    released independently of JDK. There was also an attempt to promote the former
    extension library to become a core package. But that would require changing the
    package name from `java` to `javax`, which would break the already existing applications
    that used the `javax` package. Therefore, the idea was abandoned, so the distinction
    between the core package and extensions gradually disappeared.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 JCL 包名以 `java` 开头。传统上，它们被称为 *核心 Java 包*，而以 `javax` 开头的那些曾经被称为 *扩展包*。这样做是因为扩展被认为是可选的，甚至可能独立于
    JDK 发布。也曾尝试将前一个扩展库提升为核心包。但这将需要将包名从 `java` 更改为 `javax`，这将破坏已经使用 `javax` 包的应用程序。因此，这个想法被放弃了，所以核心包和扩展包之间的区别逐渐消失了。
- en: That is why, if you look at the official Java API on the Oracle website, you
    will see listed as standard not only the `java` and `javax` packages, but also
    `jdk`, `com.sun`, `org.xml`, and some other packages too. These extra packages
    are primarily used by the tools of other specialized applications. In this book,
    we will concentrate mostly on mainstream Java programming and talk only about
    the `java` and `javax` packages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你查看 Oracle 网站上的官方 Java API，你将看到不仅列出了 `java` 和 `javax` 包，还包括 `jdk`、`com.sun`、`org.xml`
    以及其他一些包。这些额外的包主要用于其他专用应用程序的工具。在这本书中，我们将主要关注主流 Java 编程，并只讨论 `java` 和 `javax` 包。
- en: java.lang
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.lang
- en: 'This package is so fundamental that it doesn’t need to be imported for you
    to use it. The JVM authors decided to import it automatically. It contains the
    most often used classes of JCL:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包非常基础，因此在使用它时不需要导入。JVM 作者决定自动导入它。它包含了 JCL 中最常用的类：
- en: '`Object`: The base class of any other Java class.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Object`：任何其他 Java 类的基类。'
- en: '`Class`: Carries metadata of every loaded class at runtime.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Class`：在运行时携带每个加载类的元数据。'
- en: '`String`, `StringBuffer`, and `StringBuilder`: Supports operations of the `String`
    type.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`String`、`StringBuffer` 和 `StringBuilder`：支持 `String` 类型的操作。'
- en: 'The wrapper classes of all primitive types: `Byte`, `Boolean`, `Short`, `Character`,
    `Integer`, `Long`, `Float`, and `Double`.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有原始类型的包装类：`Byte`、`Boolean`、`Short`、`Character`、`Integer`、`Long`、`Float` 和 `Double`。
- en: '`Number`: The base class for the wrapper classes of the numeric primitive types
    – all the previously listed classes, except `Boolean`.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Number`：数值原始类型包装类的基类——所有之前列出的类，除了 `Boolean`。'
- en: '`System`: Provides access to important system operations and the standard input
    and output (we have used the `System.out` object in every code example in this
    book).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`System`：提供对重要系统操作以及标准输入和输出的访问（我们在本书的每个代码示例中都使用了 `System.out` 对象）。'
- en: '`Runtime`: Provides access to the execution environment.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Runtime`：提供对执行环境的访问。'
- en: 'The `Thread` and `Runnable` interfaces: Fundamental for creating Java threads.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Thread` 和 `Runnable` 接口：对于创建 Java 线程是基本的。'
- en: 'The `Iterable` interface: Used by the iteration statements.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Iterable` 接口：用于迭代语句。'
- en: '`Math`: Provides methods for basic numeric operations.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Math`：提供基本数值操作的方法。'
- en: '`Throwable`: The base class for all exceptions.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Throwable`：所有异常的基类。'
- en: '`Error`: This is an `exception` class since all its children are used to communicate
    system errors that can’t be caught by an application.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Error`：这是一个 `exception` 类，因为所有它的子类都用于传达系统错误，这些错误不能被应用程序捕获。'
- en: '`Exception`: This class and its direct children represent checked exceptions.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Exception`：这个类及其直接子类代表受检异常。'
- en: '`RuntimeException`: This class and its children represent unchecked exceptions,
    also called runtime exceptions.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RuntimeException`：这个类及其子类代表非受检异常，也称为运行时异常。'
- en: '`ClassLoader`: This class reads the `.class` files and puts (loads) them into
    memory; it also can be used to build a customized class loader.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassLoader`：这个类读取 `.class` 文件并将它们（加载）放入内存；它也可以用来构建定制的类加载器。'
- en: '`Process` and `ProcessBuilder`: These classes allow you to create other JVM
    processes.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Process` 和 `ProcessBuilder`：这些类允许你创建其他 JVM 进程。'
- en: Many other useful classes and interfaces are available as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 还有很多其他有用的类和接口也都可以使用。
- en: java.util
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.util
- en: 'Most of the content of the `java.util` package is dedicated to supporting Java
    collections:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util` 包的大部分内容都是用来支持 Java 集合的：'
- en: 'The `Collection` interface: The base interface of many other interfaces of
    collections, it declares all the basic methods that are necessary to manage collection
    elements; for example, `size()`, `add()`, `remove()`, `contains()`, `stream()`,
    and others. It also extends the `java.lang.Iterable` interface and inherits its
    methods, including `iterator()` and `forEach()`, which means that any implementation
    of the `Collection` interface or any of its children – `List`, `Set`, `Queue`,
    `Deque`, and others – can be used in iteration statements too, such as `ArrayList`,
    `LinkedList`, `HashSet`, `AbstractQueue`, `ArrayDeque`, and others.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collection` 接口：许多其他集合接口的基接口，它声明了管理集合元素所需的所有基本方法；例如，`size()`、`add()`、`remove()`、`contains()`、`stream()`等。它还扩展了`java.lang.Iterable`接口并继承了其方法，包括`iterator()`和`forEach()`，这意味着`Collection`接口的任何实现或其子接口（`List`、`Set`、`Queue`、`Deque`等）也可以用于迭代语句，例如`ArrayList`、`LinkedList`、`HashSet`、`AbstractQueue`、`ArrayDeque`等。'
- en: 'The `Map` interface and the classes that implement it: `HashMap`, `TreeMap`,
    and others.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Map` 接口及其实现类：`HashMap`、`TreeMap`等。'
- en: 'The `Collections` class: This class provides many static methods that are used
    to analyze, manipulate, and convert collections.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collections` 类：此类提供了许多静态方法，用于分析、操作和转换集合。'
- en: Many other collection interfaces, classes, and related utilities are also available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他集合接口、类和相关实用工具也可用。
- en: We talked about Java collections and saw examples of their usage in [*Chapter
    6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures, Generics, and Popular
    Utilities*.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第6章中讨论了Java集合，并展示了它们的使用示例[*第6章*](B18388_06_ePub.xhtml#_idTextAnchor141)，*数据结构、泛型和常用工具*。
- en: 'The `java.util` package also includes several other useful classes:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.util` 包还包括几个其他有用的类：'
- en: '`Objects`: Provides various object-related utility methods, some of which we
    looked at in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures,
    Generics, and Popular Utilities*.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Objects`：提供各种与对象相关的实用方法，其中一些我们在[*第6章*](B18388_06_ePub.xhtml#_idTextAnchor141)中讨论过，*数据结构、泛型和常用工具*。'
- en: '`Arrays`: Contains 160 static methods to manipulate arrays, some of which we
    looked at in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141), *Data Structures,
    Generics, and Popular Utilities*.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Arrays`：包含160个静态方法来操作数组，其中一些我们在[*第6章*](B18388_06_ePub.xhtml#_idTextAnchor141)中讨论过，*数据结构、泛型和常用工具*。'
- en: '`Formatter`: This allows you to format any primitive type, including `String`,
    `Date`, and other types; we learned how to use it in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Formatter`：这允许你格式化任何原始类型，包括`String`、`Date`和其他类型；我们曾在[*第6章*](B18388_06_ePub.xhtml#_idTextAnchor141)中学习过如何使用它，*数据结构、泛型和常用工具*。'
- en: '`Optional`, `OptionalInt`, `OptionalLong`, and `OptionalDouble`: These classes
    help avoid `NullPointerException` by wrapping the actual value that can be null
    or not.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Optional`、`OptionalInt`、`OptionalLong`和`OptionalDouble`：这些类通过包装可能为null或非null的实际值来帮助避免`NullPointerException`。'
- en: '`Properties`: Helps read and create key-value pairs that are used for application
    configuration and similar purposes.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties`：帮助读取和创建用于应用程序配置和类似目的的键值对。'
- en: '`Random`: Complements the `java.lang.Math.random()` method by generating streams
    of pseudo-random numbers.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Random`：通过生成伪随机数流来补充`java.lang.Math.random()`方法。'
- en: '`StringTokeneizer`: Breaks the `String` object into tokens that are separated
    by the specified delimiter.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringTokenizer`：将`String`对象分割成由指定分隔符分隔的标记。'
- en: '`StringJoiner`: Constructs a sequence of characters that are separated by the
    specified delimiter. Optionally, it is surrounded by the specified prefix and
    suffix.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringJoiner`: 构建一个由指定分隔符分隔的字符序列。可选地，它被指定的前缀和后缀包围。'
- en: Many other useful utility classes are available, including the classes that
    support internationalization and Base64-encoding and decoding.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他有用的实用类也可用，包括支持国际化、Base64 编码和解码的类。
- en: java.time
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.time
- en: 'The `java.time` package contains classes for managing dates, times, periods,
    and durations. The package includes the following:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.time` 包包含用于管理日期、时间、期间和持续时间的类。该包包括以下内容：'
- en: The `Month` enum.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Month` 枚举。'
- en: The `DayOfWeek` enum.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DayOfWeek` 枚举。'
- en: The `Clock` class, which returns the current instant, date, and time using a
    time zone.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Clock` 类，它使用时区返回当前的瞬间、日期和时间。'
- en: The `Duration` and `Period` classes represent and compare amounts of time in
    different time units.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Duration` 和 `Period` 类表示和比较不同时间单位的时间量。'
- en: The `LocalDate`, `LocalTime`, and `LocalDateTime` classes represent dates and
    times without a time zone.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalDate`、`LocalTime` 和 `LocalDateTime` 类表示不带时区的日期和时间。'
- en: The `ZonedDateTime` class represents the date and time with a time zone.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZonedDateTime` 类表示带时区的日期和时间。'
- en: The `ZoneId` class identifies a time zone such as America/Chicago.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ZoneId` 类识别一个时区，例如 America/Chicago。'
- en: The `java.time.format.DateTimeFormatter` class allows you to present the date
    and time as per the **International Standards Organization** (**ISO**) formats,
    such as the *YYYY-MM-DD* pattern.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.time.format.DateTimeFormatter` 类允许您按照 **国际标准化组织** (**ISO**) 格式呈现日期和时间，例如
    *YYYY-MM-DD* 模式。'
- en: Some other classes that support date and time manipulation.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些支持日期和时间操作的其它类。
- en: We discussed most of these classes in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [*第6章*](B18388_06_ePub.xhtml#_idTextAnchor141)，*数据结构、泛型和常用工具* 中讨论了这些类中的大多数。
- en: java.io and java.nio
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.io 和 java.nio
- en: 'The `java.io` and `java.nio` packages contain classes and interfaces that support
    reading and writing data using streams, serialization, and filesystems. The difference
    between these two packages is as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.io` 和 `java.nio` 包包含支持使用流、序列化和文件系统读取和写入数据的类和接口。这两个包之间的区别如下：'
- en: The `java.io` package classes allow you to read/write data as it comes without
    caching it (as we discussed in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *Strings, Input/Output, and Files*), while classes of the `java.nio` package create
    buffers that allow you to move back and forth along the populated buffer.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.io` 包的类允许您在不缓存数据的情况下读取/写入数据（正如我们在 [*第5章*](B18388_05_ePub.xhtml#_idTextAnchor121)，*字符串、输入/输出和文件*）中讨论的那样），而
    `java.nio` 包的类创建缓冲区，允许您在填充的缓冲区中来回移动。'
- en: The `java.io` package classes block the stream until all the data is read or
    written, while classes of the `java.nio` package are implemented in a non-blocking
    style (we will talk about the non-blocking style in [*Chapter 15*](B18388_15_ePub.xhtml#_idTextAnchor315),
    *Reactive Programming*).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.io` 包的类在读取或写入所有数据之前会阻塞流，而 `java.nio` 包的类以非阻塞方式实现（我们将在 [*第15章*](B18388_15_ePub.xhtml#_idTextAnchor315)，*响应式编程*）中讨论非阻塞方式）。'
- en: java.sql and javax.sql
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.sql 和 javax.sql
- en: 'These two packages compose the `javax.sql` package complements the `java.sql`
    package by providing support for the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个包构成了 `javax.sql` 包，它通过提供以下支持来补充 `java.sql` 包：
- en: The `DataSource` interface as an alternative to the `DriverManager` class
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DataSource` 接口作为 `DriverManager` 类的替代方案'
- en: Connections and statements pooling
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接和语句池
- en: Distributed transactions
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分布式事务
- en: Rowsets
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 行集
- en: We will talk about these packages and see code examples in [*Chapter 10*](B18388_10_ePub.xhtml#_idTextAnchor230),
    *Managing Data in a Database*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第10章*](B18388_10_ePub.xhtml#_idTextAnchor230)，*数据库中的数据管理* 中讨论这些包并展示代码示例。
- en: java.net
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.net
- en: 'The `java.net` package contains classes that support application networking
    at the following two levels:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.net` 包包含支持以下两个级别的应用程序网络功能的类：'
- en: '**Low-level networking**, based on the following:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**低级网络**，基于以下：'
- en: IP addresses
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IP 地址
- en: Sockets, which are basic bidirectional data communication mechanisms
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 套接字，作为基本的双向数据通信机制
- en: Various network interfaces
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种网络接口
- en: '**High-level networking**, based on the following:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级网络**，基于以下：'
- en: '**Universal Resource Identifier** (**URI**)'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用资源标识符** (**URI**)'
- en: '**Universal Resource Locator** (**URL**)'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通用资源定位符** (**URL**)'
- en: Connections to the resource being pointed to by URLs
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接到由 URL 指向的资源
- en: We will talk about this package and see code examples of it in [*Chapter 12*](B18388_12_ePub.xhtml#_idTextAnchor266),
    *Network Programming*.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第12章*](B18388_12_ePub.xhtml#_idTextAnchor266)，*网络编程* 中讨论这个包并展示其代码示例。
- en: java.lang.math and java.math
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.lang.math 和 java.math
- en: The `java.lang.math` package contains methods for performing basic numeric operations,
    such as calculating the minimum and maximum of two numeric values, the absolute
    value, the elementary exponential, logarithms, square roots, trigonometric functions,
    and many other mathematical operations.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.lang.math` 包包含执行基本数值操作的方法，例如计算两个数值的最小值和最大值、绝对值、基本指数、对数、平方根、三角函数以及许多其他数学运算。'
- en: The `java.math` package complements Java primitive types and wrapper classes
    of the `java.lang` package as you can work with much bigger numbers using the
    `BigDecimal` and `BigInteger` classes.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`java.math` 包补充了 `java.lang` 包的原生类型和包装类，因为你可以使用 `BigDecimal` 和 `BigInteger`
    类处理更大的数字。'
- en: java.awt, javax.swing, and javafx
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.awt, javax.swing, 和 javafx
- en: The first Java library that supported building a `java.awt` package. It provided
    an interface to the native system of the executing platform that allowed you to
    create and manage windows, layouts, and events. It also had the basic GUI widgets
    (such as text fields, buttons, and menus), provided access to the system tray,
    and allowed you to launch a web browser and email a client from the Java code.
    Its heavy dependence on the native code made the AWT-based GUI look different
    on different platforms.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个支持构建 `java.awt` 包的 Java 库。它提供了一个接口，允许你访问执行平台的本地系统，从而创建和管理窗口、布局和事件。它还提供了基本的
    GUI 小部件（如文本字段、按钮和菜单），提供了对系统托盘的访问，并允许你从 Java 代码中启动网页浏览器和发送电子邮件。它对本地代码的依赖性使得基于 AWT
    的 GUI 在不同的平台上看起来不同。
- en: In 1997, Sun Microsystems and Netscape Communications Corporation introduced
    Java Foundation Classes, later called Swing, and placed them in the `javax.swing`
    package. The GUI components that were built with Swing were able to emulate the
    look and feel of some native platforms but also allowed you to plug in a look
    and feel that did not depend on the platform it was running on. It expanded the
    list of widgets the GUI could have by adding tabbed panels, scroll panes, tables,
    and lists. Swing components are lightweight because they do not depend on the
    native code and are fully implemented in Java.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 1997 年，Sun Microsystems 和 Netscape Communications Corporation 引入了 Java 基础类库，后来称为
    Swing，并将它们放在了 `javax.swing` 包中。使用 Swing 构建的 GUI 组件能够模拟某些本地平台的样式和感觉，同时也允许你插入一个不依赖于其运行平台的样式和感觉。它通过添加选项卡面板、滚动面板、表格和列表来扩展了
    GUI 可以拥有的小部件列表。Swing 组件是轻量级的，因为它们不依赖于本地代码，并且完全用 Java 实现。
- en: In 2007, Sun Microsystems announced the creation of JavaFX, which eventually
    became a software platform for creating and delivering desktop applications across
    many different devices. It was intended to replace Swing as the standard GUI library
    for Java SE. The JavaFX framework is located in the packages that start with `javafx`
    and supports all major desktop **operating systems** (**OSs**) and multiple mobile
    OSs, including Symbian OS, Windows Mobile, and some proprietary real-time OSs.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 2007 年，Sun Microsystems 宣布创建了 JavaFX，它最终成为了一个跨多种不同设备创建和交付桌面应用程序的软件平台。它旨在取代 Swing
    成为 Java SE 的标准 GUI 库。JavaFX 框架位于以 `javafx` 开头的包中，支持所有主要的桌面 **操作系统**（**OSs**）和多个移动操作系统，包括
    Symbian OS、Windows Mobile 和一些专有实时操作系统。
- en: JavaFX has added support for smooth animation, web views, audio and video playback,
    and styles to the arsenal of a GUI developer, based on **Cascading Style Sheets**
    (**CSS**). However, Swing has more components and third-party libraries, so using
    JavaFX may require creating custom components and plumbing that was implemented
    in Swing a long time ago. That’s why, although JavaFX is recommended as the first
    choice for desktop GUI implementation, Swing will remain part of Java for the
    foreseeable future, according to the official response on the Oracle website ([http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)).
    So, it is possible to continue using Swing, but, if possible, it’s better to switch
    to JavaFX.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: JavaFX 为 GUI 开发者的工具箱增加了对平滑动画、网页视图、音频和视频播放以及样式的支持，这些都是基于 **层叠样式表**（**CSS**）。然而，Swing
    有更多的组件和第三方库，因此使用 JavaFX 可能需要创建在 Swing 中早已实现的定制组件和管道。这就是为什么，尽管 JavaFX 被推荐为桌面 GUI
    实现的首选，但 Swing 仍将在可预见的未来成为 Java 的一部分，根据 Oracle 网站的官方回应（[http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6](http://www.oracle.com/technetwork/java/javafx/overview/faq-1446554.html#6)）。因此，继续使用
    Swing 是可能的，但如果可能的话，最好切换到 JavaFX。
- en: We will talk about JavaFX and see code examples of it in [*Chapter 12*](B18388_12_ePub.xhtml#_idTextAnchor266),
    *Java GUI Programming*.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 [*第 12 章*](B18388_12_ePub.xhtml#_idTextAnchor266) *Java GUI 编程* 中讨论 JavaFX
    并展示其代码示例。
- en: External libraries
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部库
- en: Different lists of the most used third-party non-JCL libraries include between
    20 and 100 libraries. In this section, we are going to discuss those libraries
    that are included in the majority of such lists. All of them are open source projects.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的第三方非 JCL 库列表之间包括 20 到 100 个库。在本节中，我们将讨论那些包含在大多数此类列表中的库。所有这些都是开源项目。
- en: org.junit
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: org.junit
- en: 'The `org.junit` package is the root package of an open source testing framework’s
    JUnit. It can be added to the project as the following `pom.xml` dependency:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.junit` 包是开源测试框架 JUnit 的根包。它可以作为以下 `pom.xml` 依赖项添加到项目中：'
- en: '[PRE0]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `scope` value in the preceding dependency tag tells Maven to include the
    library `.jar` file, but only when the test code is going to be run, not in the
    production `.jar` file of the application. With the dependency in place, you can
    create a test. You can write the code yourself or let the IDE do it for you by
    doing the following:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个依赖项标签中的 `scope` 值告诉 Maven 在测试代码将要运行时包含库 `.jar` 文件，但不在应用程序的生产 `.jar` 文件中。有了这个依赖项，您可以创建一个测试。您可以自己编写代码，或者通过以下操作让
    IDE 帮您完成：
- en: '*Right-click* on the class name you would like to test.'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击您想要测试的类名。
- en: Select **Go To**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **转到**。
- en: Select **Test**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **测试**。
- en: Click **Create New Test**.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建新测试**。
- en: Click the checkbox for the methods of the class you would like to test.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您想要测试的类的相关方法复选框。
- en: Write code for the generated test methods with the `@Test` annotation.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `@Test` 注解编写生成的测试方法的代码。
- en: Add methods with the `@Before` and `@After` annotations if necessary.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果需要，添加带有 `@Before` 和 `@After` 注解的方法。
- en: 'Let’s assume we have the following class:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个以下类：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you follow the preceding steps, the following test class will be created
    under the test source tree:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遵循前面的步骤，以下测试类将在测试源树下创建：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, you can implement the `void` `multiplyByTwo()` method, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以按照以下方式实现 `void` `multiplyByTwo()` 方法：
- en: '[PRE17]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: A unit is a minimal piece of code that can be tested, thus the name. The best
    testing practices consider a method as a minimal testable unit. That’s why a unit
    test usually tests a method.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 单元是一个最小的可测试的代码片段，因此得名。最佳测试实践将方法视为最小的可测试单元。这就是为什么单元测试通常测试一个方法。
- en: org.mockito
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: org.mockito
- en: One of the problems a unit test often faces is the need to test a method that
    uses a third-party library, a data source, or a method of another class. While
    testing, you want to control all the inputs so that you can predict the expected
    result of the tested code. That is where the technique of simulating or mocking
    the behavior of the objects the tested code interacts with comes in handy.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试经常遇到的一个问题是需要测试一个使用第三方库、数据源或另一个类的方法。在测试时，您想要控制所有输入，以便您可以预测测试代码的预期结果。这就是模拟或模拟测试代码交互的对象的行为技术派上用场的时候。
- en: 'The open source Mockito framework (the `org.mockito` root package name) allows
    you to do just that – create mock objects. Using it is quite easy. Here is one
    simple case. Let’s assume we need to test another `Class1` method:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 开源 Mockito 框架（`org.mockito` 根包名）允许您做到这一点——创建模拟对象。使用它相当简单。这里有一个简单的例子。假设我们需要测试另一个
    `Class1` 方法：
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'To test this method, we need to make sure that the `getValue()` method returns
    a certain value, so we are going to mock this method. To do so, follow these steps:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此方法，我们需要确保 `getValue()` 方法返回某个特定的值，因此我们将模拟此方法。为此，请按照以下步骤操作：
- en: 'Add a dependency to the Maven `pom.xml` configuration file:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Maven 的 `pom.xml` 配置文件中添加一个依赖项：
- en: '[PRE28]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Call the `Mockito.mock()` method for the class you need to simulate:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您需要模拟的类调用 `Mockito.mock()` 方法：
- en: '[PRE29]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Set the value you need to be returned from a method:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您需要从方法返回的值：
- en: '[PRE30]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now, you can pass the mocked object as a parameter into the method you are
    testing that calls the mocked method:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以将模拟对象作为参数传递到调用模拟方法的测试方法中：
- en: '[PRE31]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The mocked method returns the result you have predefined:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟的方法返回您预定义的结果：
- en: '[PRE32]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `@Test` method should look as follows:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`@Test` 方法应如下所示：'
- en: '[PRE33]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Mockito has certain limitations. For example, you cannot mock static methods
    and private methods. Otherwise, it is a great way to isolate the code you are
    testing by reliably predicting the results of the used third-party classes.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Mockito 有一些限制。例如，您不能模拟静态方法和私有方法。否则，这是一个通过可靠地预测使用第三方类的结果来隔离您正在测试的代码的绝佳方式。
- en: org.apache.log4j and org.slf4j
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: org.apache.log4j 和 org.slf4j
- en: 'Throughout this book, we have used `System.out` to display the results. In
    a real-life application, you can do this and redirect the output to a file, for
    example, for later analysis. Once you’ve been doing this a while, you will notice
    that you need more details about each output: the date and time of each statement,
    and the class name where the logging statement was generated, for example. As
    the code base grows, you will find that it would be nice to send output from different
    subsystems or packages to different files or turn off some messages, when everything
    works as expected, and turn them back on when an issue has been detected and more
    detailed information about code behavior is needed. And you don’t want the size
    of the log file to grow uncontrollably.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们使用`System.out`来显示结果。在实际应用中，你可以这样做并将输出重定向到文件，例如，用于后续分析。一旦你这样做了一段时间，你会注意到你需要更多关于每个输出的详细信息：每个语句的日期和时间，以及生成日志语句的类名，例如。随着代码库的增长，你会发现将来自不同子系统或包的输出发送到不同的文件或关闭一些消息会很不错，当一切按预期工作的时候，当检测到问题并需要更多关于代码行为的信息时再打开它们。而且你不想日志文件的大小无限制地增长。
- en: It is possible to write code that accomplishes all this. But several frameworks
    do this based on the settings in a configuration file, which you can change every
    time you need to change the logging behavior. The two most popular frameworks
    that are used for this are called log4j (pronounced as LOG-FOUR-JAY) and slf4j
    (pronounced as S-L-F-FOUR-JAY).
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 可以编写代码来完成所有这些。但有几个框架基于配置文件中的设置来完成这些，你可以每次需要更改日志行为时更改该配置文件。用于此目的的最流行的两个框架被称为log4j（发音为LOG-FOUR-JAY）和slf4j（发音为S-L-F-FOUR-JAY）。
- en: These two frameworks are not rivals. The slf4j framework is a facade that provides
    unified access to an underlying actual logging framework; one of them can be log4j
    too. Such a facade is especially helpful during library development when programmers
    do not know what kind of logging framework will be used by the application that
    uses the library in advance. By writing code using slf4j, the programmers allow
    you to configure it later so that you can use any logging system.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个框架不是竞争对手。slf4j框架是一个门面，它提供了一个对底层实际日志框架的统一访问；其中之一也可以是log4j。这样的门面在库开发期间特别有用，当程序员不知道应用程序将使用哪种日志框架时。通过使用slf4j编写代码，程序员允许你在以后配置它，以便可以使用任何日志系统。
- en: So, if your code is going to be used only by the application your team develops,
    using just log4j is enough. Otherwise, consider using slf4j.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你的代码只将被你团队开发的应用程序使用，仅使用log4j就足够了。否则，考虑使用slf4j。
- en: 'As in the case of any third-party library, before you can use the log4j framework,
    you must add a corresponding dependency to the Maven `pom.xml` configuration file:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何第三方库一样，在使用log4j框架之前，你必须将相应的依赖项添加到Maven的`pom.xml`配置文件中：
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'For example, here’s how the framework can be used:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下是框架的使用方法：
- en: '[PRE44]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'If we run the preceding `main()` method, we will get the following output:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行前面的`main()`方法，我们将得到以下输出：
- en: '[PRE60]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'As you can see, if no log4j-specific configuration file is added to the project,
    log4j will provide a default configuration in the `DefaultConfiguration` class.
    The default configuration is as follows:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，如果没有将log4j特定的配置文件添加到项目中，log4j将在`DefaultConfiguration`类中提供默认配置。默认配置如下：
- en: The log message will go to a console.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志消息将输出到控制台。
- en: The pattern of the message is going to be `%d{HH:mm:ss.SSS} [%t] %-5level %logger{36}
    - %msg%n`.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息的格式将是`%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n`。
- en: The level of logging will be `Level.ERROR` (other levels include `OFF`, `FATAL`,
    `WARN`, `INFO`, `DEBUG`, `TRACE`, and `ALL`).
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志级别将是`Level.ERROR`（其他级别包括`OFF`、`FATAL`、`WARN`、`INFO`、`DEBUG`、`TRACE`和`ALL`）。
- en: 'The same result can be achieved by adding the `log4j2.xml` file to the `resources`
    folder (which Maven places on the classpath) with the following content:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`log4j2.xml`文件添加到`resources`文件夹（Maven将其放在类路径上）并包含以下内容，可以达到相同的结果：
- en: '[PRE62]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'If that is not good enough for you, it is possible to change the configuration
    so that it logs messages of different levels, to different files, and so on. Read
    the log4j documentation to learn more: [https://logging.apache.org](https://logging.apache.org).'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这对你来说还不够好，你可以更改配置，以便将不同级别的消息记录到不同的文件中，等等。阅读log4j文档以了解更多信息：[https://logging.apache.org](https://logging.apache.org)。
- en: org.apache.commons
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: org.apache.commons
- en: The `org.apache.commons` package is another popular library that’s been developed
    as a project called **Apache Commons**. It is maintained by an open source community
    of programmers called **Apache Software Foundation**. This organization was formed
    by the Apache Group in 1999\. The Apache Group has grown around the development
    of the Apache HTTP Server since 1993\. The Apache HTTP Server is an open source
    cross-platform web server that has remained the most popular web server since
    April 1996.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons` 包是另一个由名为 **Apache Commons** 的项目开发的流行库。它由一个名为 **Apache
    软件基金会** 的开源程序员社区维护。该组织由 Apache Group 于 1999 年成立。Apache Group 自 1993 年以来一直围绕 Apache
    HTTP Server 的发展壮大。Apache HTTP Server 是一个开源的跨平台 Web 服务器，自 1996 年 4 月以来一直是最受欢迎的
    Web 服务器。'
- en: 'The Apache Commons project has the following three components:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Apache Commons 项目有以下三个组件：
- en: '**Commons Sandbox**: A workspace for Java component development; you can contribute
    to the open source work there.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Commons Sandbox**：一个用于 Java 组件开发的工位；你可以在那里为开源工作做出贡献。'
- en: '**Commons Dormant**: A repository of components that are currently inactive;
    you can use the code there, but you must build the components yourself since these
    components will probably not be released soon.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Commons Dormant**：一个存放当前不活跃组件的仓库；你可以使用那里的代码，但由于这些组件可能不会很快发布，你必须自己构建这些组件。'
- en: '`org.apache.commons` library.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons` 库。'
- en: We discussed the `org.apache.commons.io` package in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *String, Input/Output, and Files*.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在第 [*第 5 章*](B18388_05_ePub.xhtml#_idTextAnchor121)，*字符串、输入/输出和文件* 中讨论了 `org.apache.commons.io`
    包。
- en: 'In the following subsections, we will discuss three of Commons Proper’s most
    popular packages:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下小节中，我们将讨论 Commons Proper 的三个最受欢迎的包：
- en: '`org.apache.commons.lang3`'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3`'
- en: '`org.apache.commons.collections4`'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.collections4`'
- en: '`org.apache.commons.codec.binary`'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.codec.binary`'
- en: However, there are many more packages under `org.apache.commons` that contain
    thousands of classes that can easily be used to make your code more elegant and
    efficient.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在 `org.apache.commons` 下还有许多其他包，包含数千个类，可以轻松地用于使你的代码更加优雅和高效。
- en: lang and lang3
  id: totrans-227
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: lang 和 lang3
- en: The `org.apache.commons.lang3` package is version 3 of the `org.apache.commons.lang`
    package. The decision to create a new package was forced by the fact that changes
    that were introduced in version 3 were backward-incompatible, which means that
    the existing applications that use the previous version of the `org.apache.commons.lang`
    package may stop working after the upgrade to version 3\. But in the majority
    of mainstream programming, adding `3` to an `import` statement (as a way to migrate
    to the new version) typically does not break anything.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3` 包是 `org.apache.commons.lang` 包的第三个版本。创建新包的决定是由引入的版本
    3 的更改导致的向后不兼容，这意味着使用 `org.apache.commons.lang` 包的先前版本的现有应用程序在升级到版本 3 后可能会停止工作。但在主流编程的大多数情况下，将
    `3` 添加到 `import` 语句中（作为迁移到新版本的方式）通常不会破坏任何东西。'
- en: 'According to the documentation, the `org.apache.commons.lang3` package provides
    highly reusable static utility methods that are chiefly concerned with adding
    value to the `java.lang` classes. Here are a few notable examples:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 根据文档，`org.apache.commons.lang3` 包提供了高度可重用的静态实用方法，主要关注为 `java.lang` 类增加价值。以下是一些显著的例子：
- en: 'The `ArrayUtils` class: Allows you to search and manipulate arrays; we discussed
    and demonstrated this in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ArrayUtils` 类：允许你搜索和操作数组；我们在 [*第 6 章*](B18388_06_ePub.xhtml#_idTextAnchor141)，*数据结构、泛型和常用工具*
    中讨论并演示了这一点。'
- en: 'The `ClassUtils` class: Provides some metadata about a class.'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ClassUtils` 类：提供有关类的某些元数据。'
- en: 'The `ObjectUtils` class: Checks an array of objects for null, compares objects,
    and calculates the median and minimum/maximum of an array of objects in a null-safe
    manner; we discussed and demonstrated this in [*Chapter 6*](B18388_06_ePub.xhtml#_idTextAnchor141),
    *Data Structures, Generics, and Popular Utilities*.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ObjectUtils` 类：检查对象数组是否为 null，比较对象，并以安全的方式计算对象数组的平均值和最小/最大值；我们在 [*第 6 章*](B18388_06_ePub.xhtml#_idTextAnchor141)，*数据结构、泛型和常用工具*
    中讨论并演示了这一点。'
- en: 'The `SystemUtils` class: Provides information about the execution environment.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SystemUtils` 类：提供有关执行环境的信息。'
- en: 'The `ThreadUtils` class: Finds information about currently running threads.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ThreadUtils` 类：查找有关当前正在运行的线程的信息。'
- en: 'The `Validate` class: Validates individual values and collections, compares
    them, checks for nulls and matches, and performs many other validations.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Validate` 类：验证单个值和集合，比较它们，检查空值和匹配，并执行许多其他验证。'
- en: 'The `RandomStringUtils` class: Generates `String` objects from the characters
    of various character sets.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RandomStringUtils` 类：从各种字符集的字符生成 `String` 对象。'
- en: 'The `StringUtils` class: We discussed this class in [*Chapter 5*](B18388_05_ePub.xhtml#_idTextAnchor121),
    *String, Input/Output, and Files*.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`StringUtils` 类：我们在[*第 5 章*](B18388_05_ePub.xhtml#_idTextAnchor121)，*字符串、输入/输出和文件*中讨论了这个类。'
- en: collections4
  id: totrans-238
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: collections4
- en: Although the content of the `org.apache.commons.collections4` package looks
    quite similar to the content of the `org.apache.commons.collections` package on
    the surface (which is version 3 of the package), the migration to version 4 may
    not be as smooth as just adding `4` to the `import` statement. Version 4 removed
    deprecated classes and added generics and other features that are incompatible
    with the previous versions.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管从表面上看，`org.apache.commons.collections4` 包的内容与 `org.apache.commons.collections`
    包的内容（该包的版本 3）非常相似，但迁移到版本 4 可能不会像仅仅在 `import` 语句中添加 `4` 那样顺利。版本 4 删除了已弃用的类，并添加了与先前版本不兼容的泛型和其它特性。
- en: 'You must be hard-pressed to come up with a collection type or a collection
    utility that is not present in this package or one of its sub-packages. The following
    is just a high-level list of features and utilities that are included:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 您很难想出一个在这个包或其子包中不存在的集合类型或集合实用工具。以下只是包含的功能和实用工具的高级列表：
- en: The `Bag` interface for collections that have several copies of each object.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Bag` 接口用于具有每个对象多个副本的集合。'
- en: 'A dozen classes that implement the `Bag` interface. For example, here is how
    the `HashBag` class can be used:'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 `Bag` 接口的十几个类。例如，以下是如何使用 `HashBag` 类的示例：
- en: '[PRE76]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The `BagUtils` class, which transforms `Bag`-based collections.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BagUtils` 类，用于转换基于 `Bag` 的集合。'
- en: 'The `BidiMap` interface for bidirectional maps, which allow you to retrieve
    not only a value by its key but also a key by its value. It has several implementations,
    an example of which is as follows:'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BidiMap` 接口用于双向映射，允许您不仅可以通过键获取值，还可以通过值获取键。它有几个实现，以下是一个示例：'
- en: '[PRE77]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'The `MapIterator` interface to provide simple and quick iteration over maps,
    like so:'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MapIterator` 接口提供对映射的简单快速迭代，如下所示：'
- en: '[PRE78]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Ordered maps and sets that keep the elements in a certain order, like `List`
    does; for example:'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有序映射和集合，它们保持元素在特定顺序，就像 `List` 一样；例如：
- en: '[PRE79]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Reference maps, their keys, and/or values can be removed by the garbage collector.
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用映射、其键和/或值可以被垃圾收集器移除。
- en: Various implementations of the `Comparator` interface.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Comparator` 接口的多种实现。'
- en: Various implementations of the `Iterator` interface.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Iterator` 接口的多种实现。'
- en: Classes that convert arrays and enumerations into collections.
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数组枚举转换为集合的类。
- en: Utilities that allow you to test or create a union, intersection, or closure
    of collections.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许您测试或创建集合的并集、交集或闭包的实用工具。
- en: The `CollectionUtils`, `ListUtils`, `MapUtils`, and `MultiMapUtils` classes,
    as well as many other interface-specific utility classes.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CollectionUtils`、`ListUtils`、`MapUtils` 和 `MultiMapUtils` 类，以及许多其他特定接口的实用类。'
- en: Read the package’s documentation ([https://commons.apache.org/proper/commons-collections](https://commons.apache.org/proper/commons-collections))
    for more details.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 读取该包的文档([https://commons.apache.org/proper/commons-collections](https://commons.apache.org/proper/commons-collections))以获取更多详细信息。
- en: codec.binary
  id: totrans-258
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: codec.binary
- en: The `org.apache.commons.codec.binary` package provides support for Base64, Base32,
    binary, and hexadecimal string encoding and decoding. This encoding is necessary
    to make sure that the data you sent across different systems will not be changed
    on the way because of the restrictions on the range of characters in different
    protocols. Besides, some systems interpret the sent data as control characters
    (a modem, for example).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`org.apache.commons.codec.binary` 包提供了对 Base64、Base32、二进制和十六进制字符串编码和解码的支持。这种编码是必要的，以确保您发送到不同系统的数据在传输过程中不会因为不同协议对字符范围的限制而改变。此外，一些系统将发送的数据解释为控制字符（例如，调制解调器）。'
- en: 'The following code snippet demonstrates the basic encoding and decoding capabilities
    of the `Base64` class of this package:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了该包中 `Base64` 类的基本编码和解码功能：
- en: '[PRE80]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: You can read more about this package on the Apache Commons project site at [https://commons.apache.org/proper/commons-codec](https://commons.apache.org/proper/commons-codec).
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Apache Commons 项目网站上了解更多关于此包的信息：[https://commons.apache.org/proper/commons-codec](https://commons.apache.org/proper/commons-codec)。
- en: Summary
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we provided an overview of the functionality of the most popular
    packages of JCL – that is, `java.lang`, `java.util`, `java.time`, `java.io`, `java.nio`,
    `java.sql`, `javax.sql`, `java.net`, `java.lang.math`, `java.math`, `java.awt`,
    `javax.swing`, and `javafx`.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们概述了 JCL（Java 类库）中最受欢迎的包的功能——即 `java.lang`、`java.util`、`java.time`、`java.io`、`java.nio`、`java.sql`、`javax.sql`、`java.net`、`java.lang.math`、`java.math`、`java.awt`、`javax.swing`
    和 `javafx`。
- en: The most popular external libraries were represented by the `org.junit`, `org.mockito`,
    `org.apache.log4j`, `org.slf4j`, and `org.apache.commons` packages. These help
    you avoid writing custom code in cases when such functionality already exists
    and can just be imported and used out of the box.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 最受欢迎的外部库由 `org.junit`、`org.mockito`、`org.apache.log4j`、`org.slf4j` 和 `org.apache.commons`
    包表示。这些库可以帮助你在功能已经存在且可以直接导入和使用的情况下避免编写自定义代码。
- en: In the next chapter, we will talk about Java threads and demonstrate their usage.
    We will also explain the difference between parallel and concurrent processing.
    Then, we will show you how to create a thread and how to execute, monitor, and
    stop it. This will be useful not only for those who are going to write code for
    multi-threaded processing but also for those who would like to improve their understanding
    of how JVM works, which will be the topic of the following chapter.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论 Java 线程并演示其用法。我们还将解释并行处理和并发处理之间的区别。然后，我们将向您展示如何创建线程以及如何执行、监控和停止它。这对那些将要编写多线程处理代码的人来说将很有用，同时也对那些希望提高对
    JVM 工作原理理解的人来说很有用，这将是下一章的主题。
- en: Quiz
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测验
- en: 'Answer the following questions to test your knowledge of this chapter:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题以测试你对本章知识的掌握：
- en: 'What is the Java Class Library? Select all that apply:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java 类库是什么？选择所有适用的选项：
- en: A collection of compiled classes
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译类的集合
- en: Packages that come with the Java installation
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随 Java 安装一起提供的包
- en: A `.jar` file that Maven adds to the classpath automatically
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Maven 自动添加到类路径中的 `.jar` 文件
- en: Any library that’s written in Java
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任何用 Java 编写的库
- en: 'What is the Java external library? Select all that apply:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java 外部库是什么？选择所有适用的选项：
- en: A `.jar` file that is not included with the Java installation
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不包含在 Java 安装中的 `.jar` 文件
- en: A `.jar` file that must be added as a dependency in `pom.xml` before it can
    be used
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须在 `pom.xml` 中添加为依赖项的 `.jar` 文件，才能使用它
- en: Classes not written by the authors of JVM
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不是 JVM 作者编写的类
- en: Classes that do not belong to JCL
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不属于 JCL 的类
- en: 'What functionality is included in the `java.lang` package? Select all that
    apply:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.lang` 包中包含哪些功能？选择所有适用的选项：'
- en: It is the only package that contains Java language implementation.
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是唯一包含 Java 语言实现的包。
- en: It contains the most often used classes of JCL.
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它包含 JCL 中最常用的类。
- en: It contains the `Object` class, which is the base class for any Java class.
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它包含 `Object` 类，这是任何 Java 类的基类。
- en: It contains all the types listed in the Java Language Specification.
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它包含 Java 语言规范中列出的所有类型。
- en: 'What functionality is included in the `java.util` package? Select all that
    apply:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.util` 包中包含哪些功能？选择所有适用的选项：'
- en: All the implementations of Java collection interfaces
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java 集合接口的所有实现
- en: All the interfaces of the Java collections framework
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java 集合框架的所有接口
- en: All the utilities of JCL
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: JCL 的所有实用工具
- en: Classes, arrays, objects, and properties
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类、数组、对象和属性
- en: 'What functionality is included in the `java.time` package? Select all that
    apply:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.time` 包中包含哪些功能？选择所有适用的选项：'
- en: Classes that manage dates.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理日期的类。
- en: It is the only package that manages time.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是唯一管理时间的包。
- en: Classes that represent date and time.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 表示日期和时间的类。
- en: It is the only package that manages dates.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是唯一管理日期的包。
- en: 'What functionality is included in the `java.io` package? Select all that apply:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.io` 包中包含哪些功能？选择所有适用的选项：'
- en: Processing streams of binary data
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理二进制数据流
- en: Processing streams of characters
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理字符流
- en: Processing streams of bytes
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理字节流
- en: Processing streams of numbers
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理数字流
- en: 'What functionality is included in the `java.sql` package? Select all that apply:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.sql` 包中包含哪些功能？选择所有适用的选项：'
- en: Supports database connection pooling
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持数据库连接池
- en: Supports database statement execution
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持执行数据库语句
- en: Provides the capability to read/write data from/to a database
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供从数据库读取/写入数据的能力
- en: Supports database transactions
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持数据库事务
- en: 'What functionality is included in the `java.net` package? Select all that apply:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.net`包中包含哪些功能？选择所有适用的：'
- en: Supports .NET programming
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持.NET编程
- en: Supports sockets communication
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持套接字通信
- en: Supports URL-based communication
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持基于URL的通信
- en: Supports RMI-based communication
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持基于RMI的通信
- en: 'What functionality is included in the `java.math` package? Select all that
    apply:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`java.math`包中包含哪些功能？选择所有适用的：'
- en: Supports minimum and maximum calculations
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持最小和最大计算
- en: Supports big numbers
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持大数
- en: Supports logarithms
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持对数
- en: Supports square root calculations
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持开方计算
- en: 'What functionality is included in the `javafx` package? Select all that apply:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`javafx`包中包含哪些功能？选择所有适用的：'
- en: Supports fax-message sending
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持发送传真消息
- en: Supports fax-message receiving
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持接收传真消息
- en: Supports GUI programming
  id: totrans-323
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持GUI编程
- en: Supports animation
  id: totrans-324
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持动画
- en: 'What functionality is included in the `org.junit` package? Select all that
    apply:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.junit`包中包含哪些功能？选择所有适用的：'
- en: Supports testing Java classes
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持测试Java类
- en: Supports Java units of measure
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持Java度量单位
- en: Supports unit testing
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持单元测试
- en: Supports organizational unity
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持组织统一
- en: 'What functionality is included in the `org.mockito` package? Select all that
    apply:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.mockito`包中包含哪些功能？选择所有适用的：'
- en: Supports the Mockito protocol
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持Mockito协议
- en: Allows you to simulate a method’s behavior
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许你模拟方法的行为
- en: Supports static method simulation
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持静态方法模拟
- en: Generates objects that behave like third-party classes
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成类似第三方类的对象
- en: 'What functionality is included in the `org.apache.log4j` package? Select all
    that apply:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.apache.log4j`包中包含哪些功能？选择所有适用的：'
- en: Supports writing messages to a file
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持将消息写入文件
- en: Supports reading messages from a file
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持从文件中读取消息
- en: Supports the log4j protocol for Java
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持Java的log4j协议
- en: Supports controlling the number and size of log files
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持控制日志文件的数量和大小
- en: 'What functionality is included in the `org.apache.commons.lang3` package? Select
    all that apply:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.lang3`包中包含哪些功能？选择所有适用的：'
- en: Supports Java language version 3
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持Java语言版本3
- en: Complements the `java.lang` classes
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 补充`java.lang`类
- en: Contains the `ArrayUtils`, `ObjectUtils`, and `StringUtils` classes
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`ArrayUtils`、`ObjectUtils`和`StringUtils`类
- en: Contains the `SystemUtils` class
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`SystemUtils`类
- en: 'What functionality is included in the `org.apache.commons.collections4` package?
    Select all that apply:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.collections4`包中包含哪些功能？选择所有适用的：'
- en: Various implementations of Java collections framework interfaces
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java集合框架接口的各种实现
- en: Various utilities for Java collections framework implementations
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java集合框架实现的多种实用工具
- en: The Vault interface and its implementations
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Vault接口及其实现
- en: Contains the `CollectionUtils` class
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`CollectionUtils`类
- en: 'What functionality is included in the `org.apache.commons.codec.binary` package?
    Select all that apply:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`org.apache.commons.codec.binary`包中包含哪些功能？选择所有适用的：'
- en: Supports sending binary data across the network
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持在网络中发送二进制数据
- en: Allows you to encode and decode data
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许你编码和解码数据
- en: Supports data encryption
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支持数据加密
- en: Contains the `StringUtils` class
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包含`StringUtils`类
