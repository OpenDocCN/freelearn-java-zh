- en: Chapter 11. Building the Task Log User Interface
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。构建任务日志用户界面
- en: 'The task log user interface allows users to keep track of the time spent on
    different tasks. This interface allows task log searching and data entry. A user
    will be able to:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 任务日志用户界面允许用户跟踪不同任务所花费的时间。该界面允许任务日志搜索和数据输入。用户将能够：
- en: Search for task logs within a specified time period
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在指定的时间段内搜索任务日志
- en: Sort the list of task log entries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对任务日志条目列表进行排序
- en: Edit existing task logs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编辑现有的任务日志
- en: Add new task log entries
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加新的任务日志条目
- en: View the total time spent on tasks within a time period
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看在一段时间内花费在任务上的总时间
- en: 'The interface we will be building looks like the following screenshot:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建的界面如下截图所示：
- en: '![Building the Task Log User Interface](img/5457OS_11_12.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![构建任务日志用户界面](img/5457OS_11_12.jpg)'
- en: The **Start Date** and **End Date** fields are prefilled with the current month's
    start and end dates. Clicking on the **Search** button will trigger a search and
    fill the **Task Logs** grid with matching records. Clicking on a record from the
    list will open the item in the **Edit Task Log For {task name}** form. Clicking
    on the **Add New** button in the toolbar will clear the task log form fields and
    set the title to **Add Task Log**. Let's now look at these actions in detail.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**开始日期**和**结束日期**字段将使用当前月份的开始和结束日期进行预填。单击**搜索**按钮将触发搜索，并用匹配的记录填充**任务日志**网格。从列表中单击记录将在**编辑{任务名称}任务日志**表单中打开该项目。在工具栏中单击**添加新**按钮将清除任务日志表单字段并将标题设置为**添加任务日志**。现在让我们详细看看这些操作。'
- en: Task log workflows and layouts
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 任务日志工作流程和布局
- en: 'Searching for task logs will require a valid start and end date. An appropriate
    message will be displayed if either field is missing after clicking on the **Search**
    button:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索任务日志将需要有效的开始和结束日期。如果单击**搜索**按钮后任一字段缺失，将显示适当的消息：
- en: '![Task log workflows and layouts](img/5457OS_11_05.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_05.jpg)'
- en: 'Selecting a task log item from the list will open the record in the **Edit
    Task Log For Testing** form. The **Project** dropdown in the task log form will
    display the company name in addition to the project name when the list is shown:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择一个任务日志条目将在**编辑测试任务日志**表单中打开记录。在任务日志表单中，当显示列表时，**项目**下拉菜单将显示公司名称以及项目名称：
- en: '![Task log workflows and layouts](img/5457OS_11_02.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_02.jpg)'
- en: 'The selection of a **Project** from this list will filter the tasks displayed
    in the **Task** combobox:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中选择一个**项目**将过滤在**任务**组合框中显示的任务：
- en: '![Task log workflows and layouts](img/5457OS_11_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_03.jpg)'
- en: 'If a **Project** that has no assigned tasks is selected, the following message
    is displayed:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果选择了一个没有分配任务的**项目**，将显示以下消息：
- en: '![Task log workflows and layouts](img/5457OS_11_04.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_04.jpg)'
- en: 'Adding a new task log will preserve the currently selected **Date** and **Project**,
    if present:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的任务日志将保留当前选择的**日期**和**项目**（如果有的话）：
- en: '![Task log workflows and layouts](img/5457OS_11_06.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_06.jpg)'
- en: 'Deleting a task log will ask the user to confirm their action:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 删除任务日志将要求用户确认其操作：
- en: '![Task log workflows and layouts](img/5457OS_11_07.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![任务日志工作流程和布局](img/5457OS_11_07.jpg)'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This should be the standard practice for all deletions when developing enterprise
    projects; never delete a record without first confirming the action with the user!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该是开发企业项目时所有删除操作的标准做法；在未经用户确认的情况下，永远不要删除记录！
- en: Selecting **Yes** will delete the task log record and remove the record from
    the search results.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**是**将删除任务日志记录并从搜索结果中删除该记录。
- en: Building our task log views
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建我们的任务日志视图
- en: 'The task log user interface contains a variety of different components including
    date pickers and combo boxes. We will implement the UI by dividing the screen
    into three views. The outermost `ManageTaskLogs` view will contain a toolbar and
    define a border layout to hold the `TaskLogList` and `TaskLogForm` views:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 任务日志用户界面包含各种不同的组件，包括日期选择器和组合框。我们将通过将屏幕分为三个视图来实现UI。最外层的`ManageTaskLogs`视图将包含一个工具栏，并定义一个边框布局来容纳`TaskLogList`和`TaskLogForm`视图：
- en: '![Building our task log views](img/5457OS_11_08.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![构建我们的任务日志视图](img/5457OS_11_08.jpg)'
- en: The ManageTaskLogs.js file
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ManageTaskLogs.js文件
- en: 'We have chosen the `border` layout for this view to allow resizing of the `TaskLogForm`
    view that is initially fixed to a width of 400px in the `east` region. The `ManageTaskLogs`
    definition is as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择了`border`布局来允许`TaskLogForm`视图的调整大小，该视图最初固定为`east`区域的宽度为400px。`ManageTaskLogs`的定义如下：
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This class is defined in the `view.tasklog` namespace. You will need to create
    the `view/tasklog` sub directory before adding the `ManageTaskLogs.js` file.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类定义在`view.tasklog`命名空间中。在添加`ManageTaskLogs.js`文件之前，您需要创建`view/tasklog`子目录。
- en: The `date` fields are initialized with the start and end dates of the current
    month using the `Ext.Date.getFirstDateOfMonth()` and `Ext.Date.getLastDateOfMonth()`
    functions. Manipulating the dates is a common task in Ext JS 4 development, and
    there are many helpful functions in the `Ext.Date` class that make such tasks
    easy.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`date`字段使用`Ext.Date.getFirstDateOfMonth()`和`Ext.Date.getLastDateOfMonth()`函数初始化为当前月份的开始和结束日期。在Ext
    JS 4开发中操作日期是一个常见的任务，`Ext.Date`类中有许多有用的函数可以使这些任务变得容易。'
- en: 'The `TaskLogList` view has been placed in the `center` region of the `border`
    layout, while the `TaskLogForm` view has been given an initial fixed width of
    `400` in the `east` region. This will ensure that larger screen resolutions scale
    the task log list to give a balanced view. A screen width of 1200px would hence
    show the following layout:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogList`视图已放置在`border`布局的`center`区域，而`TaskLogForm`视图在`east`区域被赋予了初始固定宽度为`400`。这将确保更大的屏幕分辨率会缩放任务日志列表以获得平衡的视图。因此，1200px的屏幕宽度将显示以下布局：'
- en: '![The ManageTaskLogs.js file](img/5457OS_11_09.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![ManageTaskLogs.js文件](img/5457OS_11_09.jpg)'
- en: The `border` layout also allows resizing of the `TaskLogForm` view should the
    user wish to increase the width of the data entry fields.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`border`布局还允许调整`TaskLogForm`视图的大小，以便用户希望增加数据输入字段的宽度时进行调整。'
- en: The TaskLogForm.js file
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskLogForm.js文件
- en: 'The `TaskLogForm` view is used to display a task log record:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogForm`视图用于显示任务日志记录：'
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The **Project** combobox defines two different templates: one for rendering
    the list and one for rendering the selected item text. The `tpl` property combines
    the company name and project name for display in the dropdown:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**下拉框定义了两种不同的模板：一种用于渲染列表，一种用于渲染所选项目的文本。`tpl`属性将公司名称和项目名称组合在一起，以在下拉框中显示：'
- en: '![The TaskLogForm.js file](img/5457OS_11_10.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![TaskLogForm.js文件](img/5457OS_11_10.jpg)'
- en: When an item is selected, only the project name is shown as rendered by the
    `displayTpl` template.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择项目时，只显示项目名称，由`displayTpl`模板呈现。
- en: The TaskLogList.js file
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskLogList.js文件
- en: 'The `TaskLogList` view is defined as:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogList`视图定义如下：'
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `viewConfig` properties are used to create an instance of the `Ext.grid.View`
    class, which provides a grid-specific view functionality. We will be performing
    updates on a per record basis, not by using batch updates via the store. The `markDirty:false`
    property will ensure that the records saved successfully are not rendered with
    the dirty flag in the grid. If a task log search returns no records, the `emptyText`
    value will be displayed in the grid to give the user immediate feedback.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewConfig`属性用于创建`Ext.grid.View`类的实例，该类提供了特定于网格的视图功能。我们将按记录基础进行更新，而不是通过存储进行批量更新。`markDirty:false`属性将确保成功保存的记录在网格中不显示脏标志。如果任务日志搜索没有返回记录，则将在网格中显示`emptyText`值，以便向用户提供即时反馈。'
- en: 'The `TaskLogList` view uses the `summary` feature to display a total row containing
    the **Records** count and **Total Hours** displayed in the search listing. The
    `summaryType` and `summaryRender` definitions are used to configure the `feature`
    displayed in the footer of the `taskDescription` and `taskMinutes` columns. The
    `summary` value may be one of `count`, `sum`, `min`, `max`, or `average`, of which
    we are using the `count` and `sum` values. More information about the `summary`
    feature can be found at [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary).
    The following screenshot displays the `summary` feature in use:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogList`视图使用`summary`功能显示包含**记录**计数和在搜索列表中显示的**总工时**的总行。`summaryType`和`summaryRender`定义用于配置在`taskDescription`和`taskMinutes`列的页脚中显示的`feature`。`summary`值可以是`count`、`sum`、`min`、`max`或`average`中的一个，我们使用`count`和`sum`值。有关`summary`功能的更多信息，请访问[http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.grid.feature.Summary)。以下截图显示了`summary`功能的使用：'
- en: '![The TaskLogList.js file](img/5457OS_11_11.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![TaskLogList.js文件](img/5457OS_11_11.jpg)'
- en: 'There is also some code to note in the column representing the hours of work
    assigned to the task:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一些代码需要注意，表示分配给任务的工作小时数的列：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The time worked per task log is stored in the database in minutes but displayed
    on the frontend as hours. The column is bound to the `taskMinutes` field in the
    model. The renderer displays the (calculated) `hours` field of the `TaskLog` model
    (this will be defined in the section that follows). The `summary` feature uses
    the `taskMinutes` field to calculate the total time as the feature requires a
    real (not converted) model field to act on. This total time in minutes is then
    converted in the `summaryRenderer` function to hours for display.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 每个任务日志的工作时间以分钟为单位存储在数据库中，但在前端显示为小时。该列绑定到模型中的`taskMinutes`字段。渲染器显示`TaskLog`模型的（计算得出的）`hours`字段（这将在接下来的部分中定义）。`summary`功能使用`taskMinutes`字段来计算总时间，因为该功能需要一个真实（未转换的）模型字段来操作。然后，将这些总时间（以分钟为单位）转换为小时以进行显示。
- en: Defining our models
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义我们的模型
- en: Our `Project`, `Task`, and `TaskLog` models were created with basic fields using
    Sencha Cmd in [Chapter 9](ch09.html "Chapter 9. Getting Started with Ext JS 4"),
    *Getting Started with Ext JS 4*, but they lacked in persistence or validation
    logic. It is now time to add the required code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`Project`、`Task`和`TaskLog`模型是使用Sencha Cmd在[第9章](ch09.html "第9章。开始使用Ext JS
    4")中创建的，但它们缺乏持久性或验证逻辑。现在是添加所需代码的时候了。
- en: The TaskLog Model
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskLog模型
- en: 'The `TaskLog` model is the most complicated model in our application. The complete
    `TaskLog` model with all required logic is as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLog`模型是我们应用程序中最复杂的模型。完整的`TaskLog`模型及所有必需的逻辑如下：'
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is the first time we have used the `useNull` property on a field. The
    `useNull` property is important when converting JSON data into an `int`, `float`,
    `Boolean`, or `String` type. When a value cannot be parsed by the reader, the
    following default values are set for the model field:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们第一次在字段上使用`useNull`属性。当将JSON数据转换为`int`、`float`、`Boolean`或`String`类型时，`useNull`属性非常重要。当读取器无法解析值时，将为模型字段设置以下默认值：
- en: '| Field type | Default value with `useNull:true` | Default value with `useNull:false`
    |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '|字段类型|默认值为`useNull:true`|默认值为`useNull:false`|'
- en: '| --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '|---|---|---|'
- en: '| `int` | `null` | `0` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '|`int`|`null`|`0`|'
- en: '| `float` | `null` | `0` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '|`float`|`null`|`0`|'
- en: '| `boolean` | `null` | `false` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '|`boolean`|`null`|`false`|'
- en: '| `String` | `null` | `""` (empty string) |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '|`String`|`null`|`""`（空字符串）|'
- en: '| `Date` | `null` | `null` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '|`日期`|`null`|`null`|'
- en: If the value cannot be parsed by the reader, `null` will be assigned to the
    field value if the field is configured with `useNull:true`. Otherwise, a default
    value for that type will be used as displayed in the third column in the preceding
    table. Note that the `Date` fields are always set to `null` if the value cannot
    be parsed. In most circumstances, it is important to be able to discern whether
    a field is null after reading the record, and hence, we recommend setting the
    `useNull:true` property for all primary key fields.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果读取器无法解析值，则如果字段配置为`useNull:true`，则将`null`分配给字段值。否则，将使用该类型的默认值，如前表中第三列中所示。请注意，如果无法解析值，则`Date`字段始终设置为`null`。在大多数情况下，重要的是在读取记录后能够确定字段是否为空，因此我们建议为所有主键字段设置`useNull:true`属性。
- en: This is also the first time that we have used the `dateFormat` property. This
    property defines the format of the date while encoding or decoding JSON `date`
    fields via the configured `writer` and `reader` classes. The `YYYYMMDD` format
    string represents an 8-digit number. For example, the date 18th August, 2013,
    is equivalent to 20130818\. The other format strings are documented in the `Ext.Date`
    API at [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date).
    It is strongly recommended that you always specify an explicit date format for
    any `date` field.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是我们第一次使用`dateFormat`属性。该属性定义了在通过配置的`writer`和`reader`类编码或解码JSON `date`字段时的日期格式。`YYYYMMDD`格式字符串表示一个8位数。例如，2013年8月18日的日期等同于20130818。其他格式字符串在[http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.Date)的`Ext.Date`
    API中有文档记录。强烈建议您始终为任何`date`字段指定显式日期格式。
- en: The use of the `convert` function for the `hours` field is also new. It converts
    a value provided by the `reader` class and stores it in the configured `name`
    field of the model. In our `TaskLog` model, the number of minutes is converted
    into a decimal value and stored in the `hours` field. It will be far more convenient
    for the 3T user to enter a value of 2.5 hours rather than 150 minutes.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`hours`字段使用`convert`函数也是新的。它将`reader`类提供的值转换并存储在模型的配置的`name`字段中。在我们的`TaskLog`模型中，分钟数被转换为十进制值并存储在`hours`字段中。对于3T用户来说，输入2.5小时的值要比150分钟方便得多。
- en: Note that we have once again used the `persist:false` property to restrict the
    fields that are not required for persistence in our `TaskLogHandler` methods.
    Our validations for the `TaskLog` model should also be self-explanatory!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们再次使用`persist:false`属性来限制在我们的`TaskLogHandler`方法中不需要持久化的字段。我们对`TaskLog`模型的验证也应该是不言自明的！
- en: The Project model
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目模型
- en: 'The `Project` model defines our usual proxy and validation properties:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Project`模型定义了我们通常的代理和验证属性：'
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is no need to include the `companyName` field while persisting a record
    and hence the field includes the `persist:false` property.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在持久化记录时不需要包括`companyName`字段，因此该字段包含`persist:false`属性。
- en: The Task Model
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务模型
- en: 'The `Task` model also has a simple structure:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`Task`模型也具有简单的结构：'
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once again we have several fields that do not need to be persisted and are hence
    configured with the `persist:false` property. It is now time to define the stores
    required to build our task log user interface.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次有几个字段不需要持久化，并因此配置了`persist:false`属性。现在是时候定义构建我们的任务日志用户界面所需的存储了。
- en: Defining our stores
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义我们的存储
- en: The `TaskLogList` and `TaskLogForm` views require stores to function. The `TaskLogList`
    view requires a `TaskLog` store, while the `TaskLogForm` view requires a `Project`
    and a `Task` store. Let's define them now.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogList`和`TaskLogForm`视图需要存储才能运行。`TaskLogList`视图需要一个`TaskLog`存储，而`TaskLogForm`视图需要一个`Project`和一个`Task`存储。现在让我们来定义它们。'
- en: The TaskLog store
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TaskLog存储
- en: 'We define this store with a helper method to allow easy loading for the task
    log searches. The definition is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个辅助方法定义此存储，以便轻松加载任务日志搜索。定义如下：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that we are formatting the start and end dates in the `doFindByUser` method
    using the `Ext.Date.format` function. This is to ensure that the dates sent to
    the server are in the expected 8-digit `yyyymmdd` format.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`doFindByUser`方法中使用`Ext.Date.format`函数格式化开始和结束日期。这是为了确保发送到服务器的日期是预期的8位`yyyymmdd`格式。
- en: The Project store
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目存储
- en: 'The `Project` store will be sorted to achieve the required company name grouping
    that is displayed in the **Project** combobox:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Project`存储将被排序，以实现在**Project**组合框中显示的所需公司名称分组：'
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note that all the project records will be loaded by the `project/findAll.json`
    URL that is mapped to the `findAll` method in the `ProjectHandler` Java class.
    The `sorters` property configures the sorting routine that will be applied to
    the results after loading the store. The records will first be sorted by the `companyName`
    field in the ascending order after which the `projectName` field will be used
    to apply a secondary sort.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有项目记录将通过映射到`ProjectHandler` Java类中的`findAll`方法的`project/findAll.json` URL加载。`sorters`属性配置了加载存储后将应用于结果的排序例程。记录将首先按`companyName`字段按升序排序，然后使用`projectName`字段进行二次排序。
- en: The Task store
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 任务存储
- en: 'The Task store has a very simple structure. The following definition should
    hold no surprises for you:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 任务存储具有非常简单的结构。以下定义对您来说应该没有什么意外：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: All the task records will be loaded by the `task/findAll.json` URL that is mapped
    to the `findAll` method in the `TaskHandler` Java class.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务记录将通过映射到`TaskHandler` Java类中的`findAll`方法的`task/findAll.json` URL加载。
- en: Controlling the TaskLog actions
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制TaskLog操作
- en: 'The `TaskLogController` definition is the most complex controller definition
    we have yet developed. The definition that follows excludes the `refs` and `init`
    configuration. You can download the full source code from this book''s website:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogController`定义是我们迄今为止开发的最复杂的控制器定义。以下定义不包括`refs`和`init`配置。您可以从本书的网站下载完整的源代码：'
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `TaskLogController` section defines the three stores that are used by the
    views. The `Project` and `Task` stores are loaded in the `doAfterActivate` function
    that is triggered when the `ManageTaskLogs` panel is activated. This ensures that
    the **Task** and **Project** comboboxes have valid data to operate on.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`TaskLogController`部分定义了视图使用的三个存储库。`Project`和`Task`存储库在`ManageTaskLogs`面板激活时触发的`doAfterActivate`函数中加载。这确保了**任务**和**项目**下拉框有有效的数据可操作。'
- en: Each `ref` item defined in the controller is used in one or more functions to
    access the underlying component and perform an appropriate action. The autogenerated
    set method for each `ref` item makes referencing the components in our code easy.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器中定义的每个`ref`项都用于一个或多个函数，以访问底层组件并执行适当的操作。每个`ref`项的自动生成的设置方法使得在我们的代码中引用组件变得容易。
- en: Note
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that the `ref` item will always return a single object,
    so it cannot be used like the `Ext.ComponentQuery.query` function to retrieve
    a collection of components. To retrieve objects dynamically (without using refs)
    or to retrieve a collection of objects, the `ComponentQuery.query` function should
    be used. For more information, see [http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，`ref`项始终返回一个单一对象，因此不能像`Ext.ComponentQuery.query`函数一样用于检索组件集合。要动态检索对象（而不使用refs）或检索对象集合，应使用`ComponentQuery.query`函数。有关更多信息，请参见[http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery](http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.ComponentQuery)。
- en: Each possible user action is handled by an appropriately named function. The
    function arguments will depend on the event source. The `click` event handler
    function for a `button` object will always pass a reference to the button itself
    as the first argument of the event handler. The grid `itemclick` event handling
    function will always receive a reference to the grid itself as the first argument
    followed by the record that was clicked on. You should examine the Sencha Ext
    JS 4 docs to become familiar with the event handling function arguments of common
    components.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 每个可能的用户操作都由一个适当命名的函数处理。函数参数将取决于事件源。`button`对象的`click`事件处理程序函数将始终将对按钮本身的引用作为事件处理程序的第一个参数传递。网格`itemclick`事件处理函数将始终接收对网格本身的引用作为第一个参数，然后是被单击的记录。您应该查看Sencha
    Ext JS 4文档，以熟悉常见组件的事件处理函数参数。
- en: Performing a search requires a valid start and end date. The `doSearch` function
    will validate the two `date` fields before allowing a search. Note the use of
    the `TTT.getApplication().getUser()` function to access the user who is currently
    logged in.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 执行搜索需要有效的开始和结束日期。在允许搜索之前，`doSearch`函数将验证两个`date`字段。请注意使用`TTT.getApplication().getUser()`函数来访问当前登录的用户。
- en: A successful search will list the task log records that match the search criteria.
    A user can then click on an item in the list to load the task log form. This is
    done in the `doSelectTaskLog` function.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 成功的搜索将列出与搜索条件匹配的任务日志记录。然后用户可以点击列表中的项目以加载任务日志表单。这是在`doSelectTaskLog`函数中完成的。
- en: Adding a new task log will create a new `TaskLog` model record and load the
    form. The record will have the currently logged in `username` property set. The
    currently selected **Project** in the project combo is retained if available;
    otherwise, the first item in the combo is selected.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 添加新的任务日志将创建一个新的`TaskLog`模型记录并加载表单。记录将设置当前登录的`username`属性。如果可用，项目下拉框中当前选择的**项目**将被保留；否则，将选择下拉框中的第一项。
- en: 'Selecting a project will filter the task store to only display the tasks assigned
    to the project. This is achieved in the `doSelectProject` function:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 选择项目将会将任务存储库过滤为仅显示分配给项目的任务。这是在`doSelectProject`函数中实现的：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that we are defining an `exactMatch` on the `idProject` field. Without
    this property, partial matches would be returned (for example, filtering with
    an `idProject` value of `2` would match a task with an `idProject` value of `20`;
    a trap for unwary developers!).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在`idProject`字段上定义了`exactMatch`。如果没有此属性，将返回部分匹配（例如，使用`idProject`值为`2`进行过滤将匹配具有`idProject`值为`20`的任务；对开发人员来说是一个陷阱！）。
- en: The `doSaveTaskLog` and `doDeleteTaskLog` functions perform the appropriate
    actions on the record that was loaded into the task log form. Just like in the
    previous chapter, the form is used to display and enter data but the data is never
    submitted. All the save data actions are triggered via the `model` instance.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`doSaveTaskLog`和`doDeleteTaskLog`函数对加载到任务日志表单中的记录执行适当的操作。就像在上一章中一样，表单用于显示和输入数据，但数据从未被提交。所有保存数据操作都是通过`model`实例触发的。'
- en: Testing the task log interface
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试任务日志界面
- en: 'Before running the application and testing your new files, you need to add
    the `TaskLogController` as well as the new stores and models to your `Application.js`
    file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行应用程序并测试新文件之前，您需要将`TaskLogController`以及新的存储库和模型添加到您的`Application.js`文件中：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You also need to add the `ManageTaskLogs` view to the `MainCards` view''s `items`
    array as shown:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要将`ManageTaskLogs`视图添加到`MainCards`视图的`items`数组中，如下所示：
- en: '[PRE13]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You can now run the application in the GlassFish server and test the **Task
    Logs** interface. Start by logging in as the `jsmith` user with the password `admin`
    and perform searches with different date ranges. The data should be displayed
    for when you loaded the 3T tables in MySQL:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以在GlassFish服务器中运行应用程序并测试**任务日志**界面。首先以`jsmith`用户登录，密码为`admin`，并使用不同的日期范围执行搜索。数据应该显示为您在MySQL中加载3T表时的数据：
- en: '![Testing the task log interface](img/5457OS_11_12.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![测试任务日志界面](img/5457OS_11_12.jpg)'
- en: 'Try performing searches that do not return any records. You should see the
    `emptyText` value defined in the `viewConfig` property of the `TaskLogList` view:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试执行不返回任何记录的搜索。您应该看到在`TaskLogList`视图的`viewConfig`属性中定义的`emptyText`值：
- en: '![Testing the task log interface](img/5457OS_11_13.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![测试任务日志界面](img/5457OS_11_13.jpg)'
- en: You can now try to add new records and edit the existing task logs to test the
    full range of the functionality. Can you make the following message pop up?
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以尝试添加新记录和编辑现有的任务日志，以测试功能的全部范围。您能让以下消息弹出吗？
- en: '![Testing the task log interface](img/5457OS_11_14.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![测试任务日志界面](img/5457OS_11_14.jpg)'
- en: We will build the 3T administration interface in the next chapter to stop this
    from happening!
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建3T管理界面，以阻止这种情况发生！
- en: Summary
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The task log user interface brought together multiple component interactions
    between the views, models, and stores. We introduced the `summary` feature for
    grids and filtered records in both the `Project` and `Task` stores. Searching
    for the `TaskLog` records required us to parse the dates into an appropriate format
    for backend processing, while our basic model skeletons were enhanced with persistence
    and validation properties. We have once again explored interesting Ext JS 4 territory
    and worked with a variety of components.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 任务日志用户界面汇集了视图、模型和存储之间的多个组件交互。我们为网格引入了`summary`功能，并在`Project`和`Task`存储中过滤记录。搜索`TaskLog`记录需要我们将日期解析为适合后端处理的格式，而我们的基本模型骨架则增加了持久性和验证属性。我们再次探索了有趣的Ext
    JS 4领域，并与各种组件一起工作。
- en: In [Chapter 12](ch12.html "Chapter 12. 3T Administration Made Easy"), *3T Administration
    Made Easy*, we will develop the 3T Administration interface and introduce the
    Ext JS 4 tree component. The `Ext.tree.Panel` is a very versatile component that
    is perfectly suited to displaying the Company-Project-Task relationship.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第12章](ch12.html "第12章 3T管理简化")，“3T管理简化”中，我们将开发3T管理界面并引入Ext JS 4树组件。`Ext.tree.Panel`是一个非常多才多艺的组件，非常适合显示公司-项目-任务的关系。
