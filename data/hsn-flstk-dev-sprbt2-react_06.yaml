- en: Getting Started with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用React
- en: This chapter describes the basics of React programming. We will cover the skills
    that are needed to create basic functionalities for the React frontend. In JavaScript,
    we use the ES6 syntax because it provides many features that make coding cleaner.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章描述了React编程的基础知识。我们将介绍创建React前端基本功能所需的技能。在JavaScript中，我们使用ES6语法，因为它提供了许多使编码更清晰的功能。
- en: 'In this chapter, we will look at the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到以下内容：
- en: How to create React components
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建React组件
- en: How to use state and props in components
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在组件中使用状态和属性
- en: Useful ES6 features
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的ES6功能
- en: What JSX is
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JSX是什么
- en: How to handle events and forms in React
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在React中处理事件和表单
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this book, we are using the Windows operating system, but all tools are available
    for Linux and macOS as well.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们使用的是Windows操作系统，但所有工具也适用于Linux和macOS。
- en: Basic React components
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本的React组件
- en: According to Facebook, React is a JavaScript library for user interfaces. Since
    version 15, React has been developed under the MIT license. React is component-based
    and the components are independent and reusable. The components are basic building
    blocks of React. When you start to develop a user interface with React, it is
    good to start by creating  a mock interfaces. That way, it is easy to identify
    what kind of components you have to create and how they interact.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Facebook的说法，React是一个用于用户界面的JavaScript库。自版本15以来，React已经在MIT许可证下开发。React是基于组件的，组件是独立和可重用的。组件是React的基本构建块。当您开始使用React开发用户界面时，最好从创建模拟界面开始。这样，可以轻松地确定需要创建哪种组件以及它们如何交互。
- en: 'From the following diagram of the mock, we can see how the user interface can
    be split into components. In this case, there will be an application root component,
    a search bar component, a table component, and a table row component:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从模拟的下图中，我们可以看到用户界面如何分割成组件。在这种情况下，将有一个应用根组件，一个搜索栏组件，一个表格组件和一个表格行组件：
- en: '![](img/ea445c35-4e5f-4944-8d8c-fc3baaf3eb57.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ea445c35-4e5f-4944-8d8c-fc3baaf3eb57.png)'
- en: 'The components can then be arranged in the following tree hierarchy. The important
    thing to understand with React is that the dataflow is going from the parent component
    to the child:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这些组件可以按以下树形层次结构排列。理解React的重要一点是，数据流是从父组件到子组件的：
- en: '![](img/97b274c3-687d-47fa-ade1-1949c057daf1.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97b274c3-687d-47fa-ade1-1949c057daf1.png)'
- en: React uses the Virtual DOM for selective re-rendering of the user interface,
    which makes it more cost effective. The Virtual DOM is a lightweight copy of the
    DOM and manipulation of the virtual DOM is much faster than the real DOM. After
    the virtual DOM is updated, React compares it to a snapshot that has been taken
    from the virtual DOM before updates have been run. After the comparison, React
    knows which parts have been changed and only these parts are updated to the real
    DOM.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: React使用虚拟DOM来选择性地重新渲染用户界面，这使得它更具成本效益。虚拟DOM是DOM的轻量级副本，对虚拟DOM的操作比真实DOM快得多。虚拟DOM更新后，React将其与在更新运行之前从虚拟DOM中获取的快照进行比较。比较后，React知道哪些部分已更改，只有这些部分才会更新到真实DOM中。
- en: 'The React component can be defined by using a JavaScript function or the ES6
    JavaScript class. We will go more deeply into ES6 in the next section. The following
    is a simple component source code that renders the `Hello World` text. The first
    code block uses the JavaScript function:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: React组件可以通过使用JavaScript函数或ES6 JavaScript类来定义。我们将在下一节更深入地了解ES6。以下是一个简单的组件源代码，用于呈现`Hello
    World`文本。第一个代码块使用了JavaScript函数：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'And this one is uses the class to create a component:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子使用类来创建一个组件：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The component that was implemented using the class, contains the required `render()`
    method. This method shows and updates the rendered output of the component. The
    name of the user-defined component should start with a capital letter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类实现的组件包含所需的`render()`方法。这个方法显示和更新组件的呈现输出。用户定义的组件名称应以大写字母开头。
- en: 'Let''s make changes to our component''s `render` method and a add new header
    element into it:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对组件的`render`方法进行更改，并添加一个新的标题元素进去：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'When you run the app, you get the Adjacent JSX elements must be wrapped in
    an enclosing tag error. To fix this error, we have to wrap the headers in one
    element, such as `div`; since React version 16.2, we can also use `Fragments`,
    which look like empty JSX tags:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行应用程序时，会出现“相邻的JSX元素必须包装在一个封闭标记中”的错误。要解决这个错误，我们必须将标题包装在一个元素中，比如`div`；自React版本16.2以来，我们还可以使用`Fragments`，它看起来像空的JSX标签：
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s look more carefully at the first React app that we created in the previous
    chapter using `create-react-app`. The source code of the `Index.js` file in the
    root folder looks as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看一下我们在上一章中使用`create-react-app`创建的第一个React应用程序。根文件夹中`Index.js`文件的源代码如下：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At the beginning of the file, there are `import` statements that load components
    or assets to our file. For example, the second line imports the `react-dom` package
    from the `node_modules` folder, and the fourth line imports the `App` (the `App.js`
    file in the root folder) component. The `react-dom` package provides DOM-specific
    methods for us. To render the React component to the DOM, we can use the `render` method
    from the `react-dom` package. The first argument is the component that will be
    rendered and the second argument is the element or container where the component
    will be rendered. In this case, the `root` element is `<div id="root"></div>`,
    which can be found in the `index.html` file inside the `public` folder. See the
    following `index.html` file:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件的开头，有一些`import`语句，用于加载组件或资源到我们的文件中。例如，第二行从`node_modules`文件夹中导入了`react-dom`包，第四行导入了`App`（根文件夹中的`App.js`文件）组件。`react-dom`包为我们提供了特定于DOM的方法。要将React组件呈现到DOM中，我们可以使用`react-dom`包中的`render`方法。第一个参数是将要呈现的组件，第二个参数是组件将要呈现的元素或容器。在这种情况下，`root`元素是`<div
    id="root"></div>`，可以在`public`文件夹中的`index.html`文件中找到。请参阅以下`index.html`文件：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following source code shows the `App.js` component from our first React
    app. You can see that `import` applies also to assets, such as images and style
    sheets. At the end of the source code, there is an `export` statement that exports
    the component and it is available to other components by using import. There can
    be only one default export per file, but there can be multiple named exports:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下源代码显示了我们第一个React应用程序的`App.js`组件。您可以看到`import`也适用于图像和样式表等资产。在源代码的末尾，有一个`export`语句，导出组件，并且可以通过导入在其他组件中使用。每个文件只能有一个默认导出，但可以有多个命名导出：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following example shows how to import default and named exports:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了如何导入默认和命名导出：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'And the exports looks like the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 导出如下：
- en: '[PRE8]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Basics of ES6
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ES6基础
- en: '**ES6** (**ECMAScript 2015**) was released in 2015 and it introduced a lot
    of new features. ECMAScript is a standardized scripting language and JavaScript
    is one implementation of it. Here, we will go through the most important features
    released in ES6 that we are going to use in the next sections.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: ES6（ECMAScript 2015）于2015年发布，引入了许多新功能。ECMAScript是一种标准化的脚本语言，而JavaScript是其一种实现。在这里，我们将介绍ES6中发布的最重要的功能，这些功能将在接下来的部分中使用。
- en: Understanding constants
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解常量
- en: 'Constants, or immutable variables, can be defined by using a `const` keyword.
    When using the `const` keyword, the variable content cannot be reassigned:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 常量或不可变变量可以通过使用`const`关键字来定义。使用`const`关键字时，变量内容不能被重新分配：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The scope of `const` is block-scoped, which is the same as `let` have. It means
    that the `const` variable can be used only inside the block where it is defined.
    In practice, the block is the area between curly brackets `{ }`. The following
    sample code shows how the scope works. The second `console.log` statement gives
    an error because we are trying to use the `total` variable outside the scope:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`const`的作用域是块作用域，与`let`相同。这意味着`const`变量只能在定义它的块内使用。在实践中，块是花括号`{ }`之间的区域。以下示例代码显示了作用域的工作原理。第二个`console.log`语句会报错，因为我们试图在作用域之外使用`total`变量：'
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'It is good to know that if the `const` is an object or array, the content can
    be changed. The following example demonstrates that:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 值得知道的是，如果`const`是对象或数组，则内容可以更改。以下示例演示了这一点：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Arrow functions
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 箭头函数
- en: 'Arrow functions make function declaration much more compact. The traditional
    way of defining a function in JavaScript is using a `function` keyword. The following
    function gets one argument and just returns the argument value:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 箭头函数使函数声明更加紧凑。在JavaScript中定义函数的传统方式是使用`function`关键字。以下函数获取一个参数，然后返回参数值：
- en: '[PRE12]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'By using the ES6 arrow function, the function looks as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用ES6箭头函数，函数如下所示：
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If you have more than one argument, you have to wrap the arguments in parentheses
    and separate arguments with a comma. The following function gets two parameters
    and returns the sum of the parameters. If the function body is an expression,
    you don''t need to use the `return` keyword. The expression is always implicitly
    returned from the function:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有多个参数，必须使用括号将参数括起来，并用逗号分隔参数。以下函数获取两个参数并返回参数的总和。如果函数体是一个表达式，则不需要使用`return`关键字。该表达式总是从函数中隐式返回的：
- en: '[PRE14]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If the function doesn''t have any arguments, the syntax is the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果函数没有任何参数，则语法如下：
- en: '[PRE15]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Template literals
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模板文字
- en: 'Template literals can be used to concatenate strings. The traditional way to
    concatenate strings is to use the plus operator:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文字可用于连接字符串。连接字符串的传统方式是使用加号运算符：
- en: '[PRE16]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With the template literals, the syntax is the following. You have to use backticks
    (`` ``) instead of single or double quotes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用模板文字，语法如下。您必须使用反引号（`` ``）而不是单引号或双引号：
- en: '[PRE17]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Classes and inheritance
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类和继承
- en: 'Class definition in ES6 is similar to other object oriented languages like
    Java or C#. The keyword for defining the classes is `class`. The class can have
    fields, constructors, and class methods. The following sample code shows the ES6
    class:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: ES6中的类定义类似于Java或C#等面向对象语言。定义类的关键字是`class`。类可以有字段、构造函数和类方法。以下示例代码显示了ES6类：
- en: '[PRE18]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inheritance is done with an `extends` keyword. The following sample code shows
    an `Employee` class that inherits a `Person` class. Therefore, it inherits all
    fields from the parent class and can have its own fields that are specific to
    the employee. In the constructor, we first call the parent class constructor by
    using the `super` keyword. That call is required and you will get an error if
    it is missing:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 继承是使用`extends`关键字完成的。以下示例代码显示了一个继承`Person`类的`Employee`类。因此，它继承了父类的所有字段，并且可以具有特定于员工的自己的字段。在构造函数中，我们首先使用`super`关键字调用父类构造函数。这个调用是必需的，如果缺少它，您将会收到一个错误：
- en: '[PRE19]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Although ES6 is already quite old but it is still only partially supported
    by modern web browsers. Babel is a JavaScript compiler that is used to compile
    ES6 to an older version that is compatible with all browsers. You can test the
    compiler on the Babel website ([https://babeljs.io](https://babeljs.io)). The
    following screenshot shows the arrow function compilating back to the older JavaScript
    syntax:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管ES6已经相当古老，但现代Web浏览器仍然只支持部分。Babel是一个JavaScript编译器，用于将ES6编译为与所有浏览器兼容的旧版本。您可以在Babel网站上测试编译器（[https://babeljs.io](https://babeljs.io)）。以下屏幕截图显示了箭头函数编译回旧的JavaScript语法：
- en: '![](img/6181624b-547b-4a21-9e8f-a50fc4306e18.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6181624b-547b-4a21-9e8f-a50fc4306e18.png)'
- en: JSX and styling
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JSX和样式
- en: 'JSX is the syntax extension for JavaScript. It is not mandatory to use JSX
    with React but there are some benefits that make development easier. JSX, for
    example, prevents injection attacks because all values are escaped in the JSX
    before they are rendered. The most useful feature is that you can embed JavaScript
    expressions in the JSX by wrapping it with curly brackets and that will be used
    a lot in the following chapters. In this example, we can access the component
    props when using JSX. The component props are covered in the next section:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: JSX是JavaScript的语法扩展。在React中使用JSX不是强制的，但有一些好处可以使开发更容易。例如，JSX可以防止注入攻击，因为在渲染之前JSX中的所有值都会被转义。最有用的功能是可以通过花括号包裹JavaScript表达式在JSX中嵌入JavaScript表达式，这在接下来的章节中会经常使用。在这个例子中，我们可以在使用JSX时访问组件的props。组件的props将在下一节中介绍：
- en: '[PRE20]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You can also pass a JavaScript expression as props:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将JavaScript表达式作为props传递：
- en: '[PRE21]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'JSX is compiled to the `React.createElement()` calls by Babel. You can use
    both internal or external styling with the React JSX elements. The following are
    two examples of inline styling. The first one defines the style straight inside
    the `div` element:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: JSX通过Babel编译为`React.createElement()`调用。你可以在React JSX元素中使用内部或外部样式。以下是两个内联样式的例子。第一个直接在`div`元素内定义样式：
- en: '[PRE22]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And the second example creates the style object first, which is then used in
    the `div` element. The object name should use the camelCase naming convention:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个例子首先创建样式对象，然后在`div`元素中使用。对象名称应该使用驼峰命名约定：
- en: '[PRE23]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'As shown in the previous section, you can import a style sheet to the React
    component. To reference classes from the external CSS file, you should use a `className`
    attribute:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一节所示，你可以向React组件导入样式表。要引用外部CSS文件中的类，应该使用`className`属性：
- en: '[PRE24]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Props and state
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Props和state
- en: Props and state are the input data for rendering the component. Both props and
    state are actually JavaScript objects, and the component is re-rendered when props
    or state are changing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Props和state是渲染组件的输入数据。props和state都是JavaScript对象，当props或state发生变化时，组件会重新渲染。
- en: 'The props are immutable, so the component cannot change its props. The props
    are received from the parent component. The component can access the props through
    the `this.props` object. For example, take a look at the following component:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: props是不可变的，所以组件不能改变它的props。props是从父组件接收的。组件可以通过`this.props`对象访问props。例如，看下面的组件：
- en: '[PRE25]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The parent component can send props to the `Hello` component in the following
    way:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 父组件可以通过以下方式向`Hello`组件发送props：
- en: '[PRE26]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When the `Hello` component is rendered, it shows the `Hello World John` text.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当`Hello`组件被渲染时，它会显示`Hello World John`文本。
- en: 'The state can be changed inside the component. The initial value of the state
    is given in the component''s constructor. The state can be accessed by using the `this.state`
    object. The scope of the state is the component, so it cannot be used outside
    the component where it is defined. As you can see in the following example, the
    props are passed to the constructor as an argument and the state is initialized
    in the constructor. The value of the state can then be rendered in JSX using curly
    brackets, `{this.state.user}`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 状态可以在组件内部改变。状态的初始值在组件的构造函数中给出。可以通过`this.state`对象访问状态。状态的作用域是组件，因此不能在定义它的组件外部使用。如下例所示，props作为参数传递给构造函数，状态在构造函数中初始化。然后可以使用花括号`{this.state.user}`在JSX中渲染状态的值：
- en: '[PRE27]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The state can contain multiple values of different types because it is a JavaScript
    object, as in the following example:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 状态可以包含不同类型的多个值，因为它是一个JavaScript对象，如下例所示：
- en: '[PRE28]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The value of the state is changed using the `setState` method:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`setState`方法改变状态的值：
- en: '[PRE29]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You should never update the state by using the equals operator because then
    the React doesn''t re-render the component. The only way to change state is to
    use the `setState` method, which triggers re-rendering:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 不应该使用等号操作符来更新状态，因为这样React不会重新渲染组件。改变状态的唯一方法是使用`setState`方法，这会触发重新渲染：
- en: '[PRE30]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `setState` method is asynchronous and therefore you cannot be sure when
    the state will be updated. The `setState` method has a callback function that
    is executed when the state has been updated.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`setState`方法是异步的，因此你不能确定状态何时会更新。`setState`方法有一个回调函数，在状态更新后执行。'
- en: 'The usage of the state is always optional and it increases the complexity of
    the component. The components that have only the props are called **stateless**
    components. It will always render the same output when having the same input,
    which means they are really easy to test. The components that have both state
    and props are called **stateful** components. The following is an example of the
    simple stateless component and it is defined using the class. You can also define
    it by using the function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 状态的使用是可选的，它增加了组件的复杂性。只有props的组件称为**无状态**组件。当具有相同输入时，它们总是呈现相同的输出，这意味着它们非常容易测试。同时具有状态和props的组件称为**有状态**组件。以下是一个简单无状态组件的示例，它是使用类定义的。也可以使用函数定义它：
- en: '[PRE31]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you are updating the state values that depend on the current state, you
    should pass an update function to the `setState()` method instead of the object.
    A common case to demonstrate this situation is the counter example shown here:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果要更新依赖当前状态的状态值，应该向`setState()`方法传递更新函数而不是对象。一个常见的情况是计数器示例：
- en: '[PRE32]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Component life cycle methods
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件生命周期方法
- en: The React component has many life cycle methods that you can override. These
    methods are executed at certain phases of the component's life cycle.  The names
    of the life cycle methods are logical and you can almost guess when they are going
    to be executed. The life cycle methods that have a prefix are executed before
    anything happens and the methods with a prefix are executed after something happens.
    Mounting is one phase of the component life cycle and it is the moment when the
    component is created and inserted into the DOM. Two life cycle methods that we
    have already covered are executed when the component mounts: `constructor()` and
    `render()`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: React组件有许多生命周期方法可以重写。这些方法在组件生命周期的某些阶段执行。生命周期方法的名称是合乎逻辑的，你几乎可以猜到它们何时会被执行。具有前缀的生命周期方法在发生任何事情之前执行，而具有前缀的方法在发生某事之后执行。挂载是组件生命周期的一个阶段，也是组件创建并插入DOM的时刻。我们已经介绍的两个生命周期方法在组件挂载时执行：`constructor()`和`render()`。
- en: A useful method in the mounting phase is `componentDidMount()`, which is called
    after the component has been mounted. This method is suitable for calling some
    REST APIs to get data, for example. The following sample code gives an example
    of using the `componentDidMount()` method.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在挂载阶段中一个有用的方法是`componentDidMount()`，它在组件挂载后调用。这个方法适合调用一些REST API来获取数据，例如。以下示例代码演示了如何使用`componentDidMount()`方法。
- en: 'In the following example code, we first set the initial value of `this.state.user`
    to `John`. Then, when the component is mounted, we change the value to `Jim`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例代码中，我们首先将`this.state.user`的初始值设置为`John`。然后，当组件挂载时，我们将值更改为`Jim`：
- en: '[PRE33]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: There is also a `componentWillMount()` life cycle method that is called before
    the component is mounted, but Facebook recommends not to use that because it might
    be used for internal development purposes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个`componentWillMount()`生命周期方法，在组件挂载之前调用，但Facebook建议不要使用它，因为它可能用于内部开发目的。
- en: 'A `shouldComponentUpdate()` method is called when the state or props have been
    updated and before the component is rendered. The method gets new props as the
    first argument and a new state as the second argument, and it returns the Boolean
    value. If the returned value is `true`, the component will be re-rendered; otherwise,
    it won''t be re-rendered. This method allows you to avoid useless renders and
    improves performance:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当状态或属性已更新并且组件将被渲染之前，会调用`shouldComponentUpdate()`方法。该方法将新属性作为第一个参数，新状态作为第二个参数，并返回布尔值。如果返回的值为`true`，则组件将重新渲染；否则，它将不会重新渲染。这个方法允许你避免无用的渲染并提高性能：
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: A `componentWillUnmount()` life cycle method is called before the component
    is removed from the DOM. This is a good point to clean resources, clear timers,
    or cancel requests.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件从DOM中移除之前，会调用`componentWillUnmount()`生命周期方法。这是一个清理资源、清除定时器或取消请求的好时机。
- en: Error boundaries are the components that catch JavaScript errors in their child
    component tree. They should also log these errors and show fallback in the user
    interface. For that, there is a life cycle method called `componentDidCatch()`.
    It works with the React components like the standard JavaScript `catch` block.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 错误边界是捕获其子组件树中JavaScript错误的组件。它们还应记录这些错误并在用户界面中显示备用内容。为此，有一个名为`componentDidCatch()`的生命周期方法。它与React组件一起工作，就像标准JavaScript`catch`块一样。
- en: Handling lists with React
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React处理列表
- en: 'For list-handling, we introduce a new JavaScript method, `map()`, which is
    handy when you have to manipulate a list. The `map()` method creates a new array
    with the results of calling a function to each element in the original array.
    In the following example, each array element is multiplied by two:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 对于列表处理，我们引入了一个新的JavaScript方法`map()`，当你需要操作列表时很方便。`map()`方法创建一个新数组，其中包含调用原始数组中每个元素的函数的结果。在下面的示例中，每个数组元素都乘以2：
- en: '[PRE35]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `map()` method also has the `index` second argument, which is useful when
    handling lists in React. The list items in React need a unique key that is used
    to detect rows that have been changed, added, or deleted.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`map()`方法还有第二个参数`index`，在处理React中的列表时非常有用。React中的列表项需要一个唯一的键，用于检测已更改、添加或删除的行。'
- en: 'The following example shows components that transform the array of integers
    to the array of list items and render these in the `ul` element:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了将整数数组转换为列表项数组并在`ul`元素中呈现这些列表项的组件：
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The following screenshot shows what the component looks like when it is rendered:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了组件在呈现时的外观：
- en: '![](img/c743b210-5e4e-44f1-a93e-36a62b76ffa7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c743b210-5e4e-44f1-a93e-36a62b76ffa7.png)'
- en: 'If the data is an array of objects, it would be nicer to present the data in
    table format. The idea is the same as with the list, but now we just map the array
    to table rows and render these in the table element, as shown in the following
    code:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据是对象数组，最好以表格格式呈现数据。思路与列表相同，但现在我们只需将数组映射到表格行并在表格元素中呈现这些行，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The following screenshot shows what the component looks like when it is rendered:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了组件在呈现时的外观：
- en: '![](img/b7cd5a40-a4be-40c7-9976-ec5828bf2dc8.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b7cd5a40-a4be-40c7-9976-ec5828bf2dc8.png)'
- en: Handling events with React
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React处理事件
- en: 'Event handling in React is similar to handling DOM element events. The difference,
    compared to HTML event handling, is that event naming uses camelCase in React.
    The following sample code adds an event listener to the button and shows an alert
    message when the button is pressed:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: React中的事件处理与处理DOM元素事件类似。与HTML事件处理相比，不同之处在于React中事件命名使用驼峰命名法。以下示例代码向按钮添加了一个事件监听器，并在按下按钮时显示警报消息：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In React, you cannot return `false` from the event handler to prevent default
    behavior. Instead, you should call the `preventDefault()` method. In the following
    example, we are using a form and we want to prevent form submission:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在React中，你不能从事件处理程序中返回`false`来阻止默认行为。相反，你应该调用`preventDefault()`方法。在下面的示例中，我们使用一个表单，并希望阻止表单提交：
- en: '[PRE39]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Handling forms with React
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React处理表单
- en: Form handling is a little bit different with React. An HTML form will navigate
    to the next page when it is submitted. A common case is that we want to invoke
    a JavaScript function that has access to form data after submission and avoid
    navigating to the next page. We already covered how to avoid submit in the previous
    section using `preventDefault()`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React处理表单有点不同。当提交HTML表单时，它将导航到下一个页面。一个常见情况是，我们希望在提交后调用一个JavaScript函数，该函数可以访问表单数据并避免导航到下一个页面。我们已经在前一节中介绍了如何使用`preventDefault()`来避免提交。
- en: 'Let''s first create a minimalistic form with one input field and the submit
    button. To be able to get the value of the input field, we are using the `onChange`
    event handler. When the value of the input field is changed, the new value will
    be saved to state. The `this.setState({text: event.target.value});` statement
    gets the value from the input field and saves it to the state called `text`. Finally,
    we will show the typed value when a user presses the submit button. The following
    is the source code for our first form:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '让我们首先创建一个最简单的表单，其中包含一个输入字段和提交按钮。为了能够获取输入字段的值，我们使用`onChange`事件处理程序。当输入字段的值更改时，新值将保存到状态中。`this.setState({text:
    event.target.value});`语句从输入字段获取值并将其保存到名为`text`的状态中。最后，当用户按下提交按钮时，我们将显示输入的值。以下是我们第一个表单的源代码：'
- en: '[PRE40]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The following is a screenshot of our form component after the Submit button
    has been pressed:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的表单组件在按下提交按钮后的屏幕截图：
- en: '![](img/e9abef54-c2c6-4991-b125-2b7b1b4117b4.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9abef54-c2c6-4991-b125-2b7b1b4117b4.png)'
- en: 'Now is a good time to look at the React Developer Tools, which are handy tools
    for debugging React apps. If we open the React Developer Tools with our React
    form app and type something into the input field, we can see how the value of
    the state changes. We can inspect the current value of  both props and state.
    The following screenshot shows how the state changes when we type something into
    the input field:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一下React Developer Tools了，这是用于调试React应用程序的方便工具。如果我们打开React Developer Tools并在React表单应用程序中输入内容，我们可以看到状态值的变化。我们可以检查当前的props和state值。以下屏幕截图显示了当我们在输入字段中输入内容时状态的变化：
- en: '![](img/1d572fac-91b1-4dd8-9b37-fe65bac3f6a5.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d572fac-91b1-4dd8-9b37-fe65bac3f6a5.png)'
- en: Typically, we have more than one input field in the form. One way to handle
    multiple input fields is to add as many change handlers as we have input fields.
    But this creates a lot of boilerplate code, which we want to avoid. Therefore,
    we add the name attributes to our input fields and we can utilize that in the
    change handler to identify which input field triggers the change handler. The
    name attribute value of the input field must be the same as the name of the state
    where we want to save the value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，表单中会有多个输入字段。处理多个输入字段的一种方法是添加与输入字段数量相同的更改处理程序。但这会创建大量样板代码，我们要避免这种情况。因此，我们向输入字段添加名称属性，并且可以在更改处理程序中利用它来识别触发更改处理程序的输入字段。输入字段的名称属性值必须与我们想要保存值的状态的名称相同。
- en: 'The handler now looks like the following. If the input field that triggers
    the handler is the first name field, then `event.target.name` is `firstName` and
    the typed value will be saved to a state called `firstName`. In this way, we can
    handle all input fields with the one change handler:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在处理程序看起来像下面这样。如果触发处理程序的输入字段是名字字段，则`event.target.name`是`firstName`，并且输入的值将保存到名为`firstName`的状态中。通过这种方式，我们可以使用一个更改处理程序处理所有输入字段：
- en: '[PRE41]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The following is the full source code of the component:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是组件的完整源代码：
- en: '[PRE42]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following is a screenshot of our form component after the Submit button
    has been pressed:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们的表单组件在按下提交按钮后的屏幕截图：
- en: '![](img/dc15c8f6-50a4-429d-931b-a6f58d46450b.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc15c8f6-50a4-429d-931b-a6f58d46450b.png)'
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we started to discover React, which we are going to use to
    build our frontend. Before starting to develop with React, we covered the basics,
    such as the React component, JSX, props, and state. In our frontend development,
    we are using ES6, which makes our code cleaner. We went through the features that
    we need for further development. We also learned how to handle forms and events
    with React.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了解React，我们将使用它来构建我们的前端。在开始使用React进行开发之前，我们涵盖了React组件、JSX、props和state等基础知识。在我们的前端开发中，我们使用ES6，这使我们的代码更清晰。我们了解了我们需要进一步开发的功能。我们还学会了如何处理React中的表单和事件。
- en: Questions
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the React component?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是React组件？
- en: What are state and props?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 状态和props是什么？
- en: How does data flow in the React app?
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据在React应用程序中如何流动？
- en: What is the difference between stateless and stateful components?
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无状态组件和有状态组件有什么区别？
- en: What is JSX?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JSX是什么？
- en: What are component life cycle methods?
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 组件生命周期方法是什么？
- en: How should we handle events in React?
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该如何处理React中的事件？
- en: How should we handle forms in React?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该如何处理React中的表单？
- en: Further reading
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt has other great resources for learning about React:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Packt还有其他很好的资源可供学习React：
- en: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/getting-started-react](https://www.packtpub.com/web-development/getting-started-react)'
- en: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/react-16-essentials-second-edition](https://www.packtpub.com/web-development/react-16-essentials-second-edition)'
