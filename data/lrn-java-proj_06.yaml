- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Working with Arrays
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与数组一起工作
- en: Arrays are an essential data structure that you can use to store multiple values
    in one variable. Mastering arrays will not only make your code more organized
    and efficient but also open the door to more advanced programming techniques.
    Once you add arrays to the mix, you can level up the data structures of your applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数组是一种基本的数据结构，你可以用它在一个变量中存储多个值。掌握数组不仅会使你的代码更加有序和高效，而且会打开通往更高级编程技术的大门。一旦你加入了数组，你就可以提升你应用程序的数据结构。
- en: In this chapter, we’ll explore arrays and equip you with the skills needed to
    effectively work with this fundamental data structure. You’ll learn how to create,
    manipulate, and iterate over arrays to solve a wide range of programming challenges.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨数组，并为你提供有效使用这种基本数据结构所需的技术。你将学习如何创建、操作和遍历数组，以解决各种编程挑战。
- en: 'Here’s an overview of what we’ll cover in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本章我们将涵盖的内容概述：
- en: What arrays are and how to use them
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数组是什么以及如何使用它们
- en: Declaring and initializing arrays
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明和初始化数组
- en: Accessing array elements
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问数组元素
- en: Getting the length of an array and understanding the bounds
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取数组的长度并理解边界
- en: Different ways to loop through arrays and process their elements
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历数组及其元素的不同方式
- en: Working with multidimensional arrays
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与多维数组一起工作
- en: Performing common operations with arrays using the `Arrays` class
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`Arrays`类执行数组的常见操作
- en: By the end of this chapter, you’ll have a solid foundation in working with arrays,
    enabling you to tackle more complex programming tasks with confidence. So, let’s
    dive in!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将拥有处理数组的坚实基础，这将使你能够自信地应对更复杂的编程任务。所以，让我们深入探讨吧！
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6](https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在GitHub上找到：[https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6](https://github.com/PacktPublishing/Learn-Java-with-Projects/tree/main/ch6)。
- en: Arrays – what, when, and why?
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组——是什么，何时，为什么？
- en: 'So far, we’ve only seen single values, such as `int`, `double`, and `String`.
    Imagine we want to calculate an average result. That would look something like
    this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了单个值，比如`int`、`double`和`String`。想象一下，我们想要计算一个平均值。那看起来可能像这样：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code isn’t very scalable. If we were to add a fourth result, we would
    need to do three things in order to make this work:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的可扩展性不高。如果我们想添加第四个结果，我们需要做三件事才能让它工作：
- en: Declare and initialize a fourth variable
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明并初始化第四个变量
- en: Add this fourth variable to the total
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将这个第四个变量加到总数中
- en: Divide by `4` instead of `3`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用`4`除而不是用`3`
- en: This is a hassle, and it is error-prone. If we knew arrays, we could alter this
    by only changing one element of our code. Let’s see what arrays are. Then, we
    will rewrite this example once we get to iterate over arrays.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这很麻烦，而且容易出错。如果我们了解数组，我们只需更改代码中的一个元素就能改变这一点。让我们看看数组是什么。然后，当我们能够遍历数组时，我们将重新编写这个示例。
- en: Java can’t do basic math?!
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Java不能做基本的数学运算吗？!
- en: If you were to run the previous code snippet, you’d see something interesting.
    If I asked you to calculate the average, you’d say 8.2, and you would be right.
    If we ask Java to do it, it says 8.200000000000001.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行前面的代码片段，你会看到一些有趣的东西。如果我问你计算平均值，你会说8.2，而且你会是对的。如果我们让Java来做，它会说8.200000000000001。
- en: You may wonder whether there is any use in learning Java at all if it can’t
    do basic calculations. This is not just a Java problem; this is a general computer
    problem. It has to translate decimal numbers into binary numbers – much like you
    can’t express 1/3 in decimal numbers exactly (0.33333).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，如果Java不能进行基本的计算，那么学习Java还有什么用呢？这不仅仅是一个Java问题；这是一个普遍的计算机问题。它必须将十进制数字转换为二进制数字——就像你不能精确地用十进制数表示1/3（0.33333）一样。
- en: Arrays explained
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组解释
- en: Alright, so **arrays** can be a solution to structure our code better in specific
    situations. But what are they? An array is a data structure that can store a fixed-size,
    ordered collection of elements of the same data type. The elements in an array
    are stored in contiguous memory locations, making it easier for the computer to
    access and manipulate the data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以**数组**可以在某些特定情况下更好地结构化我们的代码。但它们是什么？数组是一种数据结构，可以存储固定大小的、有序的相同数据类型的元素集合。数组中的元素存储在连续的内存位置中，这使得计算机更容易访问和操作数据。
- en: So far, we haven’t seen a lot of situations yet where we would need them. We
    are really going to level up the complexity of our logic now as we learn how to
    work with arrays.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有看到很多需要它们的情况。现在，我们将真正提高我们逻辑的复杂性，因为我们学习如何处理数组。
- en: When to use arrays
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用数组
- en: So, let’s talk about when to use arrays. In our example earlier, where we calculated
    the average, an array would mean we wouldn’t need three separate variables to
    store our three results. We would store them in one variable of the double array
    type instead. This makes it easier to handle the data.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们谈谈何时使用数组。在我们之前的示例中，当我们计算平均值时，使用数组意味着我们不需要三个单独的变量来存储我们的三个结果。我们可以将它们存储在一个双精度数组类型的单个变量中。这使得处理数据更加容易。
- en: 'Arrays (as well as other types of ways to store multiple values in one variable,
    which we’ll see later) are used for various reasons:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 数组（以及我们稍后将看到的存储多个值的其他类型方式）用于各种原因：
- en: '**Organizing data**: Arrays can help organize and manage large amounts of data
    in a structured way'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组织数据**：数组可以帮助以结构化的方式组织和管理工作量大的数据'
- en: '**Simplifying code**: Using arrays can simplify your code by reducing the number
    of variables needed to store and manipulate data'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化代码**：使用数组可以通过减少存储和操作数据所需的变量数量来简化代码'
- en: '**Improving performance**: Accessing and modifying elements in an array is
    faster than using other data structures because elements are stored in contiguous
    memory locations'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高性能**：访问和修改数组中的元素比使用其他数据结构更快，因为元素存储在连续的内存位置'
- en: Being able to work with arrays is going to be a great tool in your Java toolbox!
    Let’s see how we can declare and initialize them.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 能够处理数组将成为你的Java工具箱中的强大工具！让我们看看我们如何声明和初始化它们。
- en: Declaring and initializing arrays
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 声明和初始化数组
- en: There are different ways to declare and initialize arrays in Java. What you’ll
    need will depend a lot on the specific situation. So, let’s just start with the
    basics of declaring arrays.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中声明和初始化数组有不同的方法。你需要什么将很大程度上取决于具体情况。所以，让我们先从声明数组的基础知识开始。
- en: Declaring arrays
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明数组
- en: 'To declare an array in Java, you need to specify the data type of the elements,
    followed by square brackets (`[]`) and the array’s name. Take the following example:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中声明数组时，你需要指定元素的数据类型，然后是方括号(`[]`)和数组的名称。以下是一个示例：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, `int[]` is the data type of the array, and `ages` is the name of the array.
    Right now, we can’t add any values to the array, because it hasn’t been initialized
    yet. This is different from initializing variables, which we have seen so far.
    Let’s see how to initialize arrays next.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`int[]`是数组的数据类型，而`ages`是数组的名称。目前，我们无法向数组添加任何值，因为它尚未初始化。这与我们迄今为止所看到的初始化变量不同。让我们看看如何初始化数组。
- en: Initializing arrays
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化数组
- en: 'After declaring an array, it needs to be initialized. We do this by specifying
    its size and allocating memory for the elements. We can use the `new` keyword
    to do this, followed by the data type, and then specify the size of the array
    inside the square brackets. Take the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明数组之后，需要对其进行初始化。我们通过指定其大小并为元素分配内存来完成此操作。我们可以使用`new`关键字来完成此操作，然后指定数据类型，并在方括号内指定数组的大小。以下是一个示例：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This code initializes the `ages` variable to hold an array of integers with
    a size of `5`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将`ages`变量初始化为包含大小为`5`的整数数组的数组。
- en: 'We can also declare and initialize an array in a single line of code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在一行代码中声明和初始化数组：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we first declare the array on the left-hand side and initialize it on
    the right-hand side. We can also assign its values directly with a special short
    syntax, which we will explore next.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先在左侧声明数组，然后在右侧初始化它。我们还可以使用特殊的简短语法直接分配其值，我们将在下面探讨。
- en: Short syntax for array initialization
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数组初始化的简短语法
- en: 'We can use Java’s shortcut syntax for declaring and initializing arrays with
    specific values. Instead of declaring and initializing the array separately, we
    can use curly braces (`{}`) to specify the elements directly. Take a look at the
    following example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Java的快捷语法来声明和初始化具有特定值的数组。我们不需要分别声明和初始化数组，而是可以使用花括号(`{}`)直接指定元素。请看以下示例：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This code creates an array of integers and initializes it with the specified
    values. The size of the array is determined by the number of elements inside the
    curly braces.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码创建了一个整数数组，并使用指定的值对其进行初始化。数组的大小由花括号内的元素数量确定。
- en: 'Actually, our previous arrays had values already as well, because when you
    create an array using the `new` keyword, Java automatically initializes the elements
    with default values based on their data type. The default values are as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，我们之前的数组也有值，因为当你使用`new`关键字创建数组时，Java会自动根据其数据类型使用默认值初始化元素。默认值如下：
- en: 'Numeric types (`byte`, `short`, `int`, `long`, `float`, `double`): `0` or `0.0`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值类型（`byte`、`short`、`int`、`long`、`float`、`double`）：`0`或`0.0`
- en: '`char`: ‘`\u0000`’ (the Unicode `null` character)'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`char`: ‘`\u0000`’（Unicode中的`null`字符）'
- en: '`boolean`: `false`'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean`：`false`'
- en: 'Reference types (objects and arrays): `null`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用类型（对象和数组）：`null`
- en: 'For example, say you create an array of integers with a size of `3`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你创建了一个大小为`3`的整数数组：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Java initializes the elements with the default value of `0`, because `int` is
    numeric. So far, we have seen how to declare and initialize arrays. It’s now time
    to learn how to access the elements in an array and update the values.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用默认值`0`初始化元素，因为`int`是数值类型。到目前为止，我们已经看到了如何声明和初始化数组。现在是时候学习如何访问数组中的元素并更新值了。
- en: Accessing elements in an array
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问数组中的元素
- en: In order to access elements in an array, we need to use their **index**. The
    index represents the position in the array. This allows us to retrieve the value
    at a certain position and assign it a new value. Let’s first talk about indexing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问数组中的元素，我们需要使用它们的**索引**。索引表示数组中的位置。这使我们能够检索特定位置的值并将其赋予新的值。让我们首先谈谈索引。
- en: Understanding indexing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解索引
- en: 'In Java, arrays use zero-based indexing, which means the first element has
    an index of `0`, the second element has an index of `1`, and so on. Take a look
    at our example of the `ages` array:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，数组使用基于0的索引，这意味着第一个元素的索引是`0`，第二个元素的索引是`1`，依此类推。看看我们的`ages`数组示例：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This means that the first element (`31`) has an index of `0` and the last element
    has an index of `4`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着第一个元素（`31`）的索引是`0`，最后一个元素的索引是`4`。
- en: '![Figure 6.1 – Indexing explained with the ages array](img/B19793_06_1.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 使用年龄数组解释索引](img/B19793_06_1.jpg)'
- en: Figure 6.1 – Indexing explained with the ages array
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 使用年龄数组解释索引
- en: We count the length of an array like we normally do, starting with `1`. So,
    the length of this array would be `5`. The last element in the array has an index
    equal to the array’s length minus `1`. For an array with a length of N, the valid
    indexes are in the range of 0 to N-1.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们像通常那样计算数组的长度，从`1`开始。因此，这个数组的长度将是`5`。数组中的最后一个元素的索引等于数组的长度减去`1`。对于一个长度为N的数组，有效的索引范围是0到N-1。
- en: It is important to know how to use the index because that way we can access
    the elements in the array.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 了解如何使用索引很重要，因为这样我们可以访问数组中的元素。
- en: Accessing array elements
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问数组元素
- en: 'To access an element in an array, you can use the array’s name, followed by
    the index of the desired element inside square brackets. For example, to access
    the first element of our array named `ages`, you can use the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问数组中的元素，你可以使用数组名称，后跟方括号内所需元素的索引。例如，要访问名为`ages`的数组的第一个元素，你可以使用以下代码：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will store the value `31` in the `age` variable. In order to access the
    second element, you’d have to do the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在`age`变量中存储值`31`。为了访问第二个元素，你必须这样做：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can also access the element and store another value in the element using
    the index.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用索引访问元素，并在该元素中存储另一个值。
- en: Printing arrays
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 打印数组
- en: 'If we print the variable holding the array, we can get something like this:
    `[I@28a418fc`'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印包含数组的变量，我们可以得到类似以下的内容：`[I@28a418fc`
- en: This is not going to be very helpful. So, mind that you’re printing what the
    `toString()` method is returning. This is not customized for the array and is
    not very useful. What we most likely want to see is the elements inside the array.
    There is a way to print the content of arrays. We’ll see this when we cover the
    built-in methods for dealing with arrays.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会很有帮助。所以请注意，你正在打印`toString()`方法返回的内容。这不是针对数组定制的，也不是很有用。我们最可能想看到的是数组中的元素。有一种打印数组内容的方法。我们将在介绍处理数组的内置方法时看到这一点。
- en: Modifying array elements
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改数组元素
- en: 'Modifying the elements is also done with the index. It looks a lot like assigning
    a variable as we did before. For example, to change the value of the last element
    in our array, named `ages`, we can use the following code:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 修改元素也是通过索引完成的。这看起来很像我们之前所做的变量赋值。例如，要更改我们数组中名为`ages`的最后一个元素的值，我们可以使用以下代码：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We can only access elements that are there. If we try to get an element that
    is not there, we get an exception (error) message.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能访问存在的元素。如果我们尝试获取不存在的元素，我们会得到一个异常（错误）消息。
- en: Working with length and bounds
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理长度和边界
- en: To avoid getting exceptions, we need to stay within the bounds of the array.
    Indexes always start at `0`, and they end at the length of the array minus `1`.
    If you try to access an element outside this range, you’ll get `ArrayIndexOutOfBoundsException`.
    The key to avoiding this is working with the length of the array.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免得到异常，我们需要保持在数组的边界内。索引始终从`0`开始，结束于数组长度减1。如果你尝试访问这个范围之外的元素，你会得到`ArrayIndexOutOfBoundsException`。避免这种情况的关键是处理数组的长度。
- en: Determining the length of an array
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 确定数组长度
- en: 'We can determine the length of an array using the `length` property. The `length`
    property returns the number of elements in the array. For example, to get the
    length of our `ages` array, we can use the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`length`属性来确定数组的长度。`length`属性返回数组中的元素数量。例如，要获取`ages`数组的长度，我们可以使用以下代码：
- en: '[PRE10]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The length of the array starts counting at `1`. Therefore, the length of our
    `ages` array is `5`. The maximum index is `4`.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的长度从`1`开始计数。因此，我们的`ages`数组长度为`5`。最大索引是`4`。
- en: Dealing with the bounds of an array
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理数组的边界
- en: If you try to access or modify an array element using an invalid index (an index
    that is less than 0 or greater than or equal to the array’s length), Java throws
    `ArrayIndexOutOfBoundsException`. This exception is a runtime error, which means
    it occurs when the program is running, not when we compile it. We’ll learn more
    about exceptions in [*Chapter 11*](B19793_11.xhtml#_idTextAnchor266).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试使用无效索引（小于0或大于或等于数组长度的索引）访问或修改数组元素，Java将抛出`ArrayIndexOutOfBoundsException`异常。这个异常是一个运行时错误，这意味着它在程序运行时发生，而不是在编译时。我们将在[*第11章*](B19793_11.xhtml#_idTextAnchor266)中了解更多关于异常的内容。
- en: 'To prevent `ArrayIndexOutOfBoundsExceptions`, we should always validate array
    indexes before using them to access or modify array elements. We can do this by
    checking whether the index is within the valid range (`0` to array length - 1).
    Here’s an example that demonstrates how to validate an array index:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止`ArrayIndexOutOfBoundsExceptions`，我们应该在使用数组索引访问或修改数组元素之前始终验证索引。我们可以通过检查索引是否在有效范围内（`0`到数组长度减1）来完成此操作。以下是一个演示如何验证数组索引的示例：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The output will be as follows:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE12]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This code snippet checks whether the index is within the valid range before
    accessing the array element. If the index is invalid, the program prints an error
    message instead of throwing an exception.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段在访问数组元素之前检查索引是否在有效范围内。如果索引无效，程序将打印错误消息而不是抛出异常。
- en: We can also use the loops we learned about in the previous chapter to iterate
    over the elements in an array and access or modify their values.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用我们在上一章中学到的循环来遍历数组中的元素，访问或修改它们的值。
- en: Iterating over arrays
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历数组
- en: There are different methods to iterate over arrays. We will have a look at the
    use of the traditional `for` loop and the enhanced `for` loop (also known as the
    `for-each` loop).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历数组有不同的方法。我们将查看传统`for`循环和增强型`for`循环（也称为`for-each`循环）的使用。
- en: Using the for loop
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用for循环
- en: 'We can use the traditional `for` loop to iterate over an array by using an
    index variable. The loop starts at index `0` and continues until the index reaches
    the length of the array. Here’s an example that demonstrates how to use a `for`
    loop to iterate over an array and print its elements:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用传统的`for`循环通过索引变量遍历数组。循环从索引`0`开始，直到索引达到数组的长度。以下是一个演示如何使用`for`循环遍历数组并打印其元素的示例：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The output will be as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At this point, we know enough to revisit the example that we saw at the beginning
    of the chapter, calculating the average of several results. Instead of having
    separate primitives, we’re now going to have an array. Here is what it will look
    like:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经足够了解如何回顾本章开头看到的示例，计算几个结果的平均值。现在，我们不再有单独的原始数据类型，而是将有一个数组。它看起来是这样的：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If we now want to add a result, we only need to alter it in one place. We just
    add the result to the `results` array. Since we loop over all the elements, we
    don’t need to add an extra variable to calculate the total result. Also, since
    we use the length, we don’t need to change `3` to `4`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想要添加一个结果，我们只需要在一个地方修改它。我们只需将结果添加到 `results` 数组中。由于我们遍历了所有元素，我们不需要添加一个额外的变量来计算总结果。此外，由于我们使用了长度，我们不需要将
    `3` 改为 `4`。
- en: 'We can also use loops to modify the values of the array. Here’s an example
    that demonstrates how to double the value of each element in an array using a
    `for` loop:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用循环来修改数组的值。以下是一个示例，演示了如何使用 `for` 循环将数组中每个元素的值加倍：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output will be as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE17]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As you can see, the elements in the array are doubled in the first `for` loop.
    In the second `for` loop, they are printed. As you can tell by the output, the
    values did double!
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在第一个 `for` 循环中，数组元素被加倍。在第二个 `for` 循环中，它们被打印出来。正如输出所示，值确实加倍了！
- en: Let’s have a look at the enhanced `for` loop and how we can use that to iterate
    over arrays.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看增强型 `for` 循环以及我们如何使用它来遍历数组。
- en: Using the for each loop
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `for-each` 循环
- en: 'We can also the `for-each` loop, also known as the enhanced for loop, to iterate
    over arrays. This special `for` loop simplifies the process of iterating over
    arrays (and other iterable objects). The `for-each` loop automatically iterates
    over the elements in the array and does not require an index variable. Here’s
    an example that demonstrates how to use the `for-each` loop to iterate over an
    array and print its elements:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以使用 `for-each` 循环，也称为增强型循环，来遍历数组。这个特殊的 `for` 循环简化了遍历数组（以及其他可迭代对象）的过程。`for-each`
    循环会自动遍历数组中的元素，并且不需要索引变量。以下是一个示例，演示了如何使用 `for-each` 循环遍历数组并打印其元素：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The output will be as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE19]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `for-each` loop requires a temporary variable that is used to store the
    current element during each iteration. In our example, this is `int result`. It
    is logical to call it `result`, since it is one element in the `results` array.
    But this is not necessary for the functionality; I could have also called it `x`,
    as follows:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-each` 循环需要一个临时变量，用于在每次迭代中存储当前元素。在我们的例子中，这是 `int result`。将其称为 `result`
    是有逻辑的，因为它是在 `results` 数组中的一个元素。但这不是功能所必需的；我也可以将其称为 `x`，如下所示：'
- en: '[PRE20]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output would have been exactly the same. I like to read the line of code
    that says `for (int x : results)` in my head like this: for every element `x`
    in `results`, do whatever is in the code block.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '输出将完全相同。我喜欢在心中这样阅读代码行 `for (int x : results)`：对于 `results` 中的每个元素 `x`，执行代码块中的任何操作。'
- en: So there are two ways to loop over arrays, let’s talk about which one to choose
    when.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，有两种遍历数组的方法，让我们谈谈何时选择哪一种。
- en: Choosing between the regular loop and the enhanced for loop
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在常规循环和增强型循环之间进行选择
- en: We can use the regular `for` loop and the (enhanced) `for-each` loop to iterate
    over an array. These two approaches have some differences and there’s a reason
    for choosing one or the other.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用常规 `for` 循环和（增强型）`for-each` 循环来遍历数组。这两种方法有一些区别，选择其中一种的原因。
- en: When you need to have the index available, you should use the traditional `for`
    loop since this uses an index variable to access the elements in the array, while
    the `for-each` loop directly accesses the elements without using an index variable.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要索引可用时，你应该使用传统的 `for` 循环，因为这个循环使用索引变量来访问数组中的元素，而 `for-each` 循环直接访问元素而不使用索引变量。
- en: The `for-each` loop does not allow you to modify the array elements during iteration,
    as it does not provide access to the index variable. If you need to modify the
    array elements during iteration, you should use the traditional `for` loop.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`for-each` 循环不允许你在迭代过程中修改数组元素，因为它不提供访问索引变量的权限。如果你需要在迭代过程中修改数组元素，你应该使用传统的 `for`
    循环。'
- en: If you only want to read the variables and you don’t need the index, you typically
    want to go for the `for-each` loop because the syntax is easier.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想读取变量而不需要索引，通常你想要选择 `for-each` 循环，因为其语法更简单。
- en: Alright, so now we know how to iterate over arrays. Let’s make the data structure
    slightly more complicated and learn about multidimensional arrays.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们知道了如何遍历数组。让我们使数据结构稍微复杂一些，并学习关于多维数组的内容。
- en: Handling multidimensional arrays
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理多维数组
- en: A **multidimensional array** is an array of arrays. In Java, you can create
    arrays with two or more dimensions. The most common type of multidimensional array
    is the two-dimensional array, also known as a matrix or a table, where the elements
    are arranged in rows and columns.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**多维数组**是数组的数组。在Java中，你可以创建具有两个或更多维度的数组。最常见类型的多维数组是二维数组，也称为矩阵或表格，其中元素按行和列排列。'
- en: Let’s see how to create multidimensional arrays.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建多维数组。
- en: Declaring and initializing multidimensional arrays
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明和初始化多维数组
- en: 'To declare a two-dimensional array, you need to specify the data type of the
    elements, followed by two sets of square brackets (`[][]`) and the name of the
    array. Take the following example:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明二维数组，您需要指定元素的数据类型，然后是两对方括号(`[][]`)和数组名。以下是一个示例：
- en: '[PRE21]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Just like the one-dimensional array, we initialize a two-dimensional array
    with the use of the `new` keyword, followed by the data type and the size of each
    dimension inside the square brackets, like this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一维数组一样，我们使用`new`关键字初始化二维数组，后面跟着方括号内每个维度的数据类型和大小，如下所示：
- en: '[PRE22]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This code initializes a matrix of `3` rows and `4` columns. The type is `int`,
    so we know that the values of the matrix are integers.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码初始化了一个3行4列的矩阵。类型是`int`，因此我们知道矩阵的值是整数。
- en: 'We can also declare and initialize a multidimensional array in a single line:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以在一行中声明和初始化多维数组：
- en: '[PRE23]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can use the short syntax as well. To initialize a multidimensional array
    with specific values, we use the nested curly braces (`{}`):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用简短语法。要使用特定值初始化多维数组，我们使用嵌套花括号(`{}`)：
- en: '[PRE24]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Just like the one-dimensional arrays, Java determines the length by the provided
    values. This matrix has three inner arrays (three rows) each with four elements
    (four columns). Accessing and modifying the elements in a multidimensional array
    is similar, but we now need to provide two indices.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一维数组一样，Java通过提供的值来确定长度。这个矩阵有三个内部数组（三行），每个数组包含四个元素（四列）。访问和修改多维数组中的元素与之前类似，但现在我们需要提供两个索引。
- en: Accessing and modifying elements of multidimensional arrays
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问和修改多维数组的元素
- en: 'To access or modify the elements of a multidimensional array, you need to specify
    the indexes of each dimension inside square brackets. For example, to access the
    element in the first row and second column of a two-dimensional array named `matrix`,
    you can use the following code:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问或修改多维数组的元素，您需要在方括号内指定每个维度的索引。例如，要访问名为`matrix`的二维数组的第一行第二列的元素，可以使用以下代码：
- en: '[PRE25]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To modify the same element, you can use the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改相同的元素，可以使用以下代码：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '*Figure 6**.2* shows how the indexing works for our two-dimensional array,
    `matrix`.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6**.2*展示了我们的二维数组`matrix`的索引工作方式。'
- en: '![Figure 6.2 – The index of the rows and columns for array matrix](img/B19793_06_2.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 数组矩阵的行和列索引](img/B19793_06_2.jpg)'
- en: Figure 6.2 – The index of the rows and columns for array matrix
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 数组矩阵的行和列索引
- en: 'So, if we want to get to the element with value `12` and store it in a `last`
    variable, our code will be as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们想获取值为`12`的元素并将其存储在`last`变量中，我们的代码如下所示：
- en: '[PRE27]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We can also iterate over all the variables in a multidimensional array. Let’s
    see how that is done.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以遍历多维数组中的所有变量。让我们看看这是如何实现的。
- en: Iterating over multidimensional arrays
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 遍历多维数组
- en: 'Since a multidimensional array is just an array in an array, we can use nested
    loops to iterate over multidimensional arrays. Here’s an example that demonstrates
    how we can use a nested `for` loop to iterate over a two-dimensional array:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于多维数组只是数组中的数组，我们可以使用嵌套循环来遍历多维数组。以下是一个示例，展示了我们如何使用嵌套`for`循环遍历二维数组：
- en: '[PRE28]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The output will be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE29]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'All we do at this point is just print the element. This is something we can
    also do with the enhanced `for` loop to iterate over multidimensional arrays.
    Here’s an example that demonstrates how to do that:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们做的只是打印这个元素。这也是我们可以使用增强的`for`循环遍历多维数组时可以做到的。以下是一个示例，展示了如何做到这一点：
- en: '[PRE30]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The output will be the same as in the previous example:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将与上一个示例相同：
- en: '[PRE31]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: As you can see, the outer `for-each` loop iterates over the rows of the two-dimensional
    array. The row is an array itself as well, which is why the type is `int[]`. The
    inner `for-each` loop iterates over the elements within each row. These are integers.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，外部的 `for-each` 循环遍历二维数组的行。行本身也是一个数组，这就是为什么类型是 `int[]`。内部的 `for-each` 循环遍历每一行中的元素。这些是整数。
- en: Both traditional nested `for` loops and nested `for-each` loops can be used
    to iterate over multidimensional arrays. It’s a matter of preference and whether
    you need to access the index of the elements.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 传统的嵌套 `for` 循环和嵌套 `for-each` 循环都可以用来遍历多维数组。这取决于个人喜好以及你是否需要访问元素的索引。
- en: Arrays can go very many levels deep, but that doesn’t really change the basic
    principles. For example, for a four-dimensional array, you’ll have `[][][][]`
    behind the type and you need a nested loop of four levels to iterate over all
    the elements.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 数组可以有很多层级，但这并不真正改变基本原理。例如，对于四维数组，类型后面会有 `[][][][]`，你需要四个级别的嵌套循环来遍历所有元素。
- en: Java helps us deal with arrays in different ways. Let’s look at some built-in
    methods for arrays that we can use.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: Java以不同的方式帮助我们处理数组。让我们看看我们可以使用的数组的一些内置方法。
- en: Using Java’s built-in methods for arrays
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Java 的内置数组方法
- en: Working with arrays is very common. Usually, for very common things, Java has
    built-in functionality. We can do many common things we’d like to do with arrays
    with the use of the methods on the built-in `Arrays` class.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 处理数组非常常见。通常，对于非常常见的事情，Java 有内置的功能。我们可以使用内置 `Arrays` 类的方法来做许多我们想对数组做的事情。
- en: Built-in Arrays class for working with arrays
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用于处理数组的内置 `Arrays` 类
- en: The built-in `Arrays` class is a helper class in the `java.util` package. It
    offers many utility methods to help us efficiently work with arrays. We’ll explore
    some common array manipulation tasks using the `Arrays` class.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 内置的 `Arrays` 类是 `java.util` 包中的一个辅助类。它提供了许多实用方法，帮助我们高效地处理数组。我们将使用 `Arrays` 类来探索一些常见的数组操作任务。
- en: The toString() method
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`toString()` 方法'
- en: A highly useful operation you may want to perform on an array is to convert
    it into a `String`, which can be invaluable for debugging and logging purposes.
    To achieve this, the `Arrays` class offers a dedicated method called `toString()`.
    It’s important to note that this method is static, allowing us to call it directly
    on the `Arrays` class.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想在数组上执行的一个非常有用的操作是将它转换成一个 `String`，这对于调试和日志记录非常有价值。为了实现这一点，`Arrays` 类提供了一个专门的方法，称为
    `toString()`。需要注意的是，这个方法是静态的，允许我们直接在 `Arrays` 类上调用它。
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The output will be as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE33]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: As you can see, the `results` array is converted to a string that represents
    the array’s elements, enclosed by square brackets and separated by commas. There
    are many such methods on the `Arrays` class! Let’s explore the `sort` method next.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`results` 数组被转换成一个表示数组元素的字符串，这些元素被方括号包围并由逗号分隔。`Arrays` 类上有许多这样的方法！接下来，让我们探索
    `sort` 方法。
- en: The sort() method
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`sort()` 方法'
- en: 'A common operation you want to do on an array is to sort the array. Here’s
    an example that shows how to sort the values of an array with the `sort` method
    from the `Arrays` class:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在数组上执行的一个常见操作是对数组进行排序。以下是一个示例，展示了如何使用 `Arrays` 类的 `sort` 方法对数组的值进行排序：
- en: '[PRE34]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The output will be as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: As you can see, the `results` array is unsorted at first. We can call the methods
    on the `Arrays` class directly on the `Arrays` class because they’re static. For
    integer values, it sorts them from low to high by default. We can alter this behavior,
    but we don’t have the knowledge we need to do that just yet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`results` 数组最初是无序的。我们可以直接在 `Arrays` 类上调用 `Arrays` 类的方法，因为它们是静态的。对于整数值，默认情况下按从低到高的顺序排序。我们可以改变这种行为，但我们还没有掌握所需的知识。
- en: We print the array with another built-in method, namely `toString`. This translates
    the array into something that we can understand.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用另一个内置方法 `toString` 来打印数组。这会将数组转换成我们可以理解的形式。
- en: When the array is sorted, we can use the `binarySearch` method to find a value.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当数组排序后，我们可以使用 `binarySearch` 方法来查找一个值。
- en: The binarySearch() method
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`binarySearch()` 方法'
- en: 'We can also search for a value in an array. We are going to use the built-in
    `binarySearch` method to do this. Very importantly, this can only be done with
    sorted arrays because of how the search algorithm works. Here’s an example of
    how to do this:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在数组中搜索一个值。我们将使用内置的 `binarySearch` 方法来完成此操作。非常重要的一点是，由于搜索算法的工作方式，这只能在排序数组中完成。以下是如何做到这一点的示例：
- en: '[PRE36]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The output will be as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE37]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'The `binarySearch` method requires the input array to be sorted beforehand.
    The `binarySearch` algorithm is meant for finding a target value within a sorted
    array. Instead of searching the array element by element, it divides the array
    into halves repeatedly until it finds the target or the remaining portion to search
    becomes empty. When the value at the half is bigger, it knows it needs to move
    towards the left side of the array, when it’s smaller it knows it needs to move
    towards the right. That’s why it’s a must that the array is sorted. The `binarySearch`
    method returns the index of the target value if found. If the target wasn’t found,
    it returns a negative value, which represents the insertion point. So, say we
    updated our code to this:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`binarySearch` 方法要求输入数组在之前已经排序。`binarySearch` 算法旨在在排序数组中查找目标值。它不是逐个搜索数组元素，而是将数组分成两半，直到找到目标或剩余要搜索的部分变为空。当中间的值更大时，它知道需要向数组的左侧移动，当它更小时，它知道需要向右侧移动。这就是为什么数组必须排序。如果找到了目标值，`binarySearch`
    方法返回目标值的索引。如果目标值未找到，它返回一个负值，这表示插入点。所以，假设我们更新了我们的代码如下：'
- en: '[PRE38]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This would result in the following:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致以下结果：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This is because it would have been at the fourth position in the array (not
    the fourth index!).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为它原本将在数组的第四个位置（而不是第四个索引！）。
- en: Let’s see how we can give all the elements in the array a specific value with
    the `fill` method.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 `fill` 方法给数组中的所有元素赋予一个特定的值。
- en: The fill() method
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`fill()` 方法'
- en: 'Sometimes, you want to create an array of the same values programmatically.
    Here’s an example of how this can be done. We use the `fill` method from the `Arrays`
    class. Here’s how to do it:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您可能需要以编程方式创建具有相同值的数组。以下是如何做到这一点的示例。我们使用 `Arrays` 类中的 `fill` 方法。以下是操作方法：
- en: '[PRE40]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The output will be as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE41]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The `fill` method sets all elements in the array to the specified value. Sometimes
    we need to create a copy of our array or resize it. In that case, we can use the
    `copyOf` method.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`fill` 方法将数组中的所有元素设置为指定的值。有时我们需要创建数组的副本或调整它的大小。在这种情况下，我们可以使用 `copyOf` 方法。'
- en: The copyOf() method
  id: totrans-202
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`copyOf()` 方法'
- en: Sometimes you need to create a copy of an array, for example, when you want
    to end it to another location in the application, but you don’t want this to affect
    your original array.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时您需要创建数组的副本，例如，当您想在应用程序的另一个位置结束它时，但不想影响您的原始数组。
- en: 'This is an example of how we can create a copy of an array:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例，说明我们如何创建数组的副本：
- en: '[PRE42]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The output will be as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE43]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We can prove we copied the array with the following code:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用以下代码证明我们已经复制了数组：
- en: '[PRE44]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'If we didn’t create a copy but just stored it in another variable instead,
    it would alter both arrays. The preceding code snippet will give the following
    output:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有创建副本，而是将其存储在另一个变量中，它将同时改变两个数组。前面的代码片段将给出以下输出：
- en: '[PRE45]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'But say we have this code:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 但假设我们有以下代码：
- en: '[PRE46]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It will give us this output:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 它将给出以下输出：
- en: '[PRE47]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: As you can see, this alters both the variables holding the array. This is because
    both variables, `copiedResults` and `results`, have the same array object that
    they’re pointing to. So, if you change it in one place, it changes for both. That’s
    why you sometimes need to create copies of arrays.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这改变了持有数组的两个变量。这是因为这两个变量，`copiedResults` 和 `results`，都指向相同的数组对象。所以，如果您在一个地方更改它，它就会对两个都进行更改。这就是为什么有时您需要创建数组的副本。
- en: So, the `copyOf` method creates a new array with the same elements as the original
    array, whereas this second method just creates a new variable that points to the
    same array object. We can also use it to resize the array by passing in a second
    argument.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`copyOf` 方法创建了一个与原始数组具有相同元素的新数组，而第二种方法只是创建了一个指向相同数组对象的新变量。我们还可以通过传递第二个参数来调整数组的大小。
- en: Resizing arrays with copyOf()
  id: totrans-218
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 `copyOf()` 方法调整数组大小
- en: Arrays have a fixed size, but sometimes you need to alter the size nonetheless.
    The `Arrays.copyOf()` method that we just saw is also useful for resizing arrays.
    To resize an array, you can create a new array with the desired size and copy
    the elements from the original array to the new array. All you need to do is give
    it a second argument.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 数组的大小是固定的，但有时你仍然需要更改大小。我们刚刚看到的 `Arrays.copyOf()` 方法也适用于调整数组大小。要调整数组大小，你可以创建一个具有所需大小的新数组，并将原始数组中的元素复制到新数组中。你只需要提供一个第二个参数。
- en: 'Here’s an example that demonstrates how to resize:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例，演示了如何调整大小：
- en: '[PRE48]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'The output will be as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE49]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: In this example, we resized `originalArray`, which had a length of `5`, to a
    new length of `7`. The new array contains the elements of the original array,
    followed by default values (`0` for `int`) to fill the remaining positions.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将长度为 `5` 的 `originalArray` 调整大小到新的长度 `7`。新数组包含原始数组中的元素，后面跟着默认值（对于 `int`
    是 `0`）来填充剩余的位置。
- en: This is not something you should be doing constantly. It can be inefficient
    in terms of performance. If you would need to resize your array a lot, it’s worth
    having a look at [*Chapter 13*](B19793_13.xhtml#_idTextAnchor317) where we learn
    about **collections**.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是你应该经常做的事情。在性能方面可能效率低下。如果您需要经常调整数组大小，那么查看 [*第13章*](B19793_13.xhtml#_idTextAnchor317)，在那里我们学习了**集合**，是值得的。
- en: The equals() method
  id: totrans-226
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: equals() 方法
- en: 'The last built-in method we’re going to discuss is the `equals()` method. This
    method can determine whether two arrays have the same values. With this built-in
    method, you can compare two arrays for equality. Here’s how to go about it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的最后一个内置方法是 `equals()` 方法。此方法可以确定两个数组是否具有相同的值。使用此内置方法，您可以比较两个数组是否相等。以下是操作方法：
- en: '[PRE50]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The output will be as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE51]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The `equals()` method compares two arrays element by element to check whether
    they have the same values in the same order. It returns `true` if the arrays are
    equal; otherwise, it returns `false`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: equals() 方法逐个元素比较两个数组，以检查它们是否具有相同顺序的相同值。如果数组相等，则返回 `true`；否则返回 `false`。
- en: Well done!
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！
- en: 'You’ve done a great job learning arrays! At this point, you’re ready to understand
    this programming joke:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你在数组学习方面做得很好！在这个阶段，你准备好理解这个编程笑话了：
- en: Why did the Java developer quit their job?
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么Java开发者辞职了？
- en: Because they couldn’t get “arrays!”
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 因为他们无法得到“数组！”
- en: Exercises
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'Arrays are incredibly useful for storing and managing similar types of data,
    such as a list of dinosaur names, dinosaur weights, and visitors’ favorite snacks.
    Arrays are helpful and they enable us to manage more complex data in Mesozoic
    Eden. Try out the following:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 数组对于存储和管理类似类型的数据非常有用，例如恐龙名称列表、恐龙重量和游客最喜欢的零食。数组很有用，并且使我们能够管理Mesozoic Eden中的更复杂数据。尝试以下操作：
- en: The unique appeal of our park lies in the diversity of our dinosaur species.
    (And also in that we have dinosaurs at all.) Create an array that holds the names
    of all the dinosaur species in the park. This list will help us in inventory management.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们公园的独特吸引力在于我们恐龙种类的多样性。（而且我们确实有恐龙。）创建一个数组来存储公园中所有恐龙种类的名称。这份清单将帮助我们进行库存管理。
- en: Every visitor has their favorite dinosaur, and for many, it’s the heaviest one.
    Write a program that finds this star’s weight in an array of dinosaur weights.
    This information can then be highlighted in our park tours and educational programs.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每位游客都有自己的最爱恐龙，对许多人来说，那就是最重的那个。编写一个程序来找出这个明星在恐龙重量数组中的重量。然后，我们可以将此信息突出显示在我们的公园游览和教育项目中。
- en: Dinosaurs come in all sizes, and the smallest ones hold a special place in the
    hearts of children. Write a program that finds this smallest dinosaur in an array
    of dinosaur weights.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恐龙有各种大小，最小的那些在孩子们的心中占有特殊的位置。编写一个程序来找出这个最小的恐龙在恐龙重量数组中的位置。
- en: Running a dinosaur park is not a one-man show and requires a dedicated team
    of employees. Create an array of park employee names and print out the names using
    an enhanced `for` loop. This will help us to appreciate and manage our staff more
    effectively.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经营一个恐龙公园不是一个人的表演，需要一支专门的员工团队。创建一个公园员工名称数组，并使用增强型 `for` 循环打印出这些名称。这将帮助我们更有效地欣赏和管理我们的员工。
- en: To ensure the well-being of our dinosaur inhabitants, it’s essential to monitor
    their average age. This data can help inform our care and feeding programs to
    better suit the age profile of our dinosaurs. Write a program that calculates
    this using an array of dinosaur ages.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了确保我们恐龙居民的福祉，监测它们的平均年龄是至关重要的。这些数据可以帮助我们更好地调整我们的护理和喂养计划，以适应我们恐龙的年龄特征。编写一个程序，使用恐龙年龄数组来计算这个值。
- en: Our park is meticulously divided into various sections to facilitate visitor
    navigation and dinosaur housing. Create a two-dimensional array representing the
    park map, with each cell containing an array of Strings indicating an enclosure
    or facility for a certain section.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的公园被细致地划分为各个区域，以方便游客导航和恐龙的饲养。创建一个表示公园地图的二维数组，每个单元格包含一个字符串数组，表示某个区域的围栏或设施。
- en: The enjoyment of a park tour depends significantly on comfortable seating arrangements.
    Use nested loops to print out a seating chart for a park tour bus from a two-dimensional
    array. This will help us ensure that every guest has a pleasant journey throughout
    the park.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 公园之旅的乐趣在很大程度上取决于舒适的座位安排。使用嵌套循环从二维数组中打印出公园游览巴士的座位图。这将帮助我们确保每位游客在整个公园的旅程中都有愉快的体验。
- en: Project – Dino tracker
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目 – 恐龙追踪器
- en: Safety always comes first. That’s why keeping track of all our dinosaur residents
    is of utmost importance. The park managers need to have an easy-to-use system
    for managing information about their slightly exotic pets.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 安全总是第一位的。这就是为什么跟踪我们所有的恐龙居民至关重要。公园管理者需要有一个易于使用的系统来管理他们这些略带异国情调的宠物的信息。
- en: For this project, you’ll be creating a Dino tracker. This is a simple tracking
    system that maintains records of each dinosaur’s name, age, species, and enclosure
    number. This will be done using fixed arrays – four arrays in total, one for each
    attribute.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，你将创建一个恐龙追踪器。这是一个简单的追踪系统，用于记录每只恐龙的名称、年龄、物种和围栏编号。这将通过固定数组来完成——总共四个数组，每个属性一个。
- en: Assume you have room for 10 dinosaurs in your park for now, so each array should
    have a length of 10\. Each dinosaur will correspond to an index in the array.
    For example, if the dinosaur “Rex” is in the first position of the name array,
    his age, species, and enclosure number will also be in the first position of their
    respective arrays.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你公园里现在有10个恐龙的空间，所以每个数组应该有10个长度。每个恐龙将对应数组中的一个索引。例如，如果恐龙“Rex”在名称数组的第一个位置，它的年龄、物种和围栏编号也将分别位于它们各自数组的第一个位置。
- en: You’re going to print information about all the dinosaurs and print their average
    age and weight after that.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 你将打印有关所有恐龙的信息，并在之后打印它们的平均年龄和体重。
- en: 'I realize this might be a lot. If you need some extra guidance, here are some
    steps to guide you through the process:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到这可能会很多。如果你需要一些额外的指导，以下是一些指导你通过这个过程的步骤：
- en: '`dinoNames`, `dinoAges`, `dinoSpecies`, and `dinoEnclosures`. Each should have
    a size of 10.'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dinoNames`、`dinoAges`、`dinoSpecies`和`dinoEnclosures`。每个数组的大小应为10。'
- en: '`Dinosaur1`, `Dinosaur2`, and so on as names.'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名称使用`Dinosaur1`、`Dinosaur2`等。
- en: '**Displaying details**: Write a loop that goes through the arrays and prints
    out the details of each dinosaur in a readable format.'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**显示详情**：编写一个循环遍历数组，并以可读的格式打印出每只恐龙的详细信息。'
- en: '`dinoAges` array and divide by the number of dinosaurs. And, of course, this
    process is similar for weight, but using the weight array.'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`dinoAges`数组除以恐龙的数量。当然，这个过程对于体重也是类似的，但使用体重数组。
- en: Summary
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we have explored arrays in Java. Arrays are data structures
    that allow us to store multiple values of the same data type in a contiguous block
    of memory. They provide an efficient way to organize lists of data.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Java中的数组。数组是数据结构，允许我们在连续的内存块中存储相同数据类型的多个值。它们提供了一种有效的方式来组织数据列表。
- en: We began by discussing the declaration and initialization of arrays. We learned
    about different ways to declare and initialize arrays, including using the shortcut
    syntax for array initialization. We also covered how to initialize arrays with
    default values.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论了数组的声明和初始化。我们学习了不同的声明和初始化数组的方法，包括使用数组初始化的快捷语法。我们还介绍了如何使用默认值初始化数组。
- en: After that, we discussed how to access and modify array elements using indexes.
    We learned about the importance of the array length and that we can find out the
    length by using the `length` property. We also talked about avoiding `ArrayIndexOutOfBoundsExceptions`
    by validating array indexes.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '之后，我们讨论了如何使用索引访问和修改数组元素。我们了解了数组长度的重要性，以及我们可以通过使用`length`属性来找出长度。我们还讨论了通过验证数组索引来避免`ArrayIndexOutOfBoundsExceptions`。 '
- en: We then looked at iterating over arrays using both the traditional `for` loop
    and the enhanced `for` loop (the `for-each` loop).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了使用传统的`for`循环和增强的`for`循环（即`for-each`循环）遍历数组的方法。
- en: After this, we explored multidimensional arrays, which are arrays of arrays,
    and learned how to declare, initialize, and access their elements. We also discussed
    how to iterate over multidimensional arrays.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们探讨了多维数组，即数组的数组，并学习了如何声明、初始化和访问它们的元素。我们还讨论了如何遍历多维数组。
- en: Finally, we covered common array operations with the use of the `Arrays` class
    and its built-in methods. We saw how to sort arrays, search for elements in a
    sorted array, fill an array with a specific value, copy and resize an array, and
    compare arrays.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`Arrays`类及其内置方法介绍了常见的数组操作。我们看到了如何排序数组，在排序数组中搜索元素，用特定值填充数组，复制和调整数组大小，以及比较数组。
- en: By mastering these concepts, you now have a solid foundation for working with
    arrays in Java. This understanding will help you store and manipulate data more
    efficiently in your Java programs. We ended by looking at some built-in methods.
    In the next chapter, you’re going to learn how to write your own methods.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握这些概念，你现在有了在Java中使用数组的坚实基础。这种理解将帮助你更有效地在Java程序中存储和处理数据。我们最后查看了一些内置方法。在下一章中，你将学习如何编写自己的方法。
