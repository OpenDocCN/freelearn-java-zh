- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Documentation and Logging
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档和日志记录
- en: In this chapter, we will look at two aspects of software development that do
    not directly influence the operation of the code. The first is documentation,
    more commonly called comments. The second is logging, a tool used to record events
    during the run of a program for the purpose of monitoring what the program is
    doing. We will begin with documenting code inline. You likely noticed that none
    of the code shown so far in this book has any comments. This has been done on
    purpose, as each chapter describes what the code is doing. If you look at the
    book’s code in the GitHub repository, you will find comments in every file.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨软件开发中的两个方面，它们不会直接影响代码的运行。第一个是文档，通常称为注释。第二个是日志记录，这是一种在程序运行期间记录事件以用于监控程序所做之事的工具。我们将从代码内联注释开始。你可能已经注意到，本书迄今为止展示的所有代码都没有任何注释。这是故意为之的，因为每一章都描述了代码正在做什么。如果你查看GitHub仓库中的本书代码，你将在每个文件中找到注释。
- en: You have probably seen a message telling you to look at the log file when something
    goes wrong in a program. Where do these log files come from? We will examine how
    we can either display messages on the console or write to a file that certain
    events occurred or exceptions were thrown.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能看到过一条消息，告诉你当程序出现问题时查看日志文件。这些日志文件从哪里来？我们将探讨我们如何显示控制台上的消息或将某些事件发生或异常抛出写入文件。
- en: 'Here is the rundown for this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本章的概述：
- en: Creating documentation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建文档
- en: Using logging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日志记录
- en: By the end of this chapter, you will understand the various ways in which comments
    are added to source code. You will also learn to use logging to record events
    in your code.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解在源代码中添加注释的各种方法。你还将学习如何使用日志记录代码中的事件。
- en: We will begin with documentation, but before that, let’s have a quick look at
    the prerequisites for this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从文档开始，但在那之前，让我们快速看一下本章的先决条件。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here are the tools required to run the examples in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是运行本章示例所需的工具：
- en: Java 17
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17
- en: A text editor
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Maven 3.8.6 or a newer version installed
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Maven 3.8.6 或更高版本
- en: The sample code for this chapter is available at [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例代码可在[https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter11)找到。
- en: Creating documentation
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文档
- en: Having been a computer science instructor for 31 years, I can tell you that
    the one task most students put off for as long as possible is documenting their
    code. I have learned of companies that forbid their developers to comment in their
    code. These companies believe that code should be self-documenting. If you cannot
    understand the purpose of the code from how it is written, then it has been written
    poorly. This is a big mistake. Students doing internships at such companies report
    spending an inordinate amount of time trying to understand the company’s code
    base.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名31年的计算机科学讲师，我可以告诉你，大多数学生最晚推迟的任务之一就是注释他们的代码。我了解到有些公司禁止他们的开发者对代码进行注释。这些公司认为代码应该是自文档化的。如果你不能从代码的编写方式中理解代码的目的，那么代码就是写得不好的。这是一个大错误。在这些公司实习的学生报告说，他们花费了大量的时间试图理解公司的代码库。
- en: Documenting or commenting in code is not about explaining or apologizing for
    writing bad code. Code carries out tasks and the task should be obvious from the
    code itself. What is never obvious is why the code has been constructed in a certain
    way and how it may fit in with the rest of the program. One question to ask yourself
    is whether the programmer who takes over this code base when you get promoted
    or you move to another company understands what you coded and why.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码中注释或评论并不是为了解释或道歉写出的糟糕代码。代码执行任务，任务应该从代码本身中显而易见。永远不明显的是代码为何以某种方式构建，以及它如何与程序的其他部分相匹配。你可以问自己一个问题：当你晋升或跳槽到另一家公司时，接手这个代码库的程序员是否理解你所编写的代码以及为什么这样做。
- en: Now let us look at how we add comments to our code and the unique commenting
    technique available in Java, called Javadocs.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看我们如何添加注释到我们的代码，以及Java中独特的注释技术，称为Javadoc。
- en: Comments
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注释
- en: 'In Java, there are three ways to indicate a comment in your code. The first
    is the original C style comment designation, which uses an opening forward slash,
    then an asterisk, a closing asterisk, then a closing forward slash as a set of
    characters:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Java 中，有三种方式可以在代码中指示注释。第一种是原始的 C 风格注释标识，它使用一个开头的正斜杠，然后是一个星号，一个闭合的星号，然后是一个闭合的正斜杠作为一组字符：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Finally, there is the inline comment form:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，还有内联注释形式：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, you can use the `/*` . . . `*/` characters to comment out a section of
    code.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以使用 `/*` ... `*/` 字符来注释掉代码的一部分。
- en: 'One important proviso is that you cannot nest these comments inside each other
    as shown:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的前提是，你不能像下面这样将这些注释嵌套在彼此内部：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The Java compiler will see the first `/*` notation as ending at the first `*/`
    notation; leaving the end of the comment will likely be a syntax error.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Java 编译器会将第一个 `/*` 符号视为在第一个 `*/` 符号处结束；注释的结尾很可能是语法错误。
- en: 'The second set of characters you can use for comments is the double forward
    slash. These are single-line comments that end when the line ends. They can be
    placed anywhere and everything that follows becomes a comment:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用第二种字符集进行注释的是双正斜杠。这些是单行注释，它们在行结束时结束。它们可以放在任何地方，行后面的所有内容都将成为注释：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These are also useful for commenting lines of code. Whenever I am making a change
    to an existing line of code, I first comment out the line I am replacing before
    I write the new line. I rarely delete code until I am certain that the new code
    is working.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些注释对于注释代码行也很有用。每次我修改现有的代码行时，我都会先注释掉要替换的行，然后再写新行。除非我确定新代码能正常工作，否则很少删除代码。
- en: There is one more way we can add comments to code and that is by creating Javadocs.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过创建 Javadocs 来添加代码注释的另一种方式。
- en: Javadocs
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Javadocs
- en: Javadocs are HTML pages created by the `Javadoc` tool, which is included in
    the Java installation. It examines every Java file and constructs an HTML page
    for each public class. These pages include all public fields and methods. While
    we will only look at this default behavior, you can adjust it. Although private
    elements are ignored by Javadocs, it is considered best practice to comment everything
    as if it were public.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Javadocs 是由 `Javadoc` 工具创建的 HTML 页面，该工具包含在 Java 安装中。它检查每个 Java 文件，并为每个公共类构建一个
    HTML 页面。这些页面包括所有公共字段和方法。虽然我们只会查看这种默认行为，但你也可以调整它。尽管 Javadocs 会忽略私有元素，但将所有内容都注释为公共元素被认为是最佳实践。
- en: Here is a sample program to which we will apply the Javadocs tool. The comments
    continue the discussion on Javadocs, so please do not skim over this but rather
    read it like every page in this chapter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个我们将应用 Javadocs 工具的示例程序。这些注释继续讨论 Javadocs，所以请不要快速浏览，而应该像阅读本章的每一页一样阅读它。
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To run the `javadoc` tool, use the following command line with switches:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 `javadoc` 工具，请使用以下带有开关的命令行：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `-d` switch is the location to which the HTML files will be written. In
    this case, it is assumed that there is a folder named `docs` in whatever folder
    you are currently in. The folder must exist, as `javadoc` will not create it.
    If the folder does not exist, then the HTML files will be written into the current
    folder:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`-d` 开关是 HTML 文件将被写入的位置。在这种情况下，假设你当前所在的文件夹中有一个名为 `docs` 的文件夹。该文件夹必须存在，因为 `javadoc`
    不会创建它。如果文件夹不存在，则 HTML 文件将写入当前文件夹：'
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `-sourcepath` switch is the path to the folder that contains either Java
    files or packages. As this is a Maven-based project, the packages and source files
    are always found in `\src\main\java` in whatever folder the Maven project is in:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`-sourcepath` 开关是包含 Java 文件或包的文件夹的路径。由于这是一个基于 Maven 的项目，包和源文件始终位于 Maven 项目的
    `\src\main\java` 文件夹中：'
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The last switch, `-subpackages`, is a colon-separated list of packages in the
    project. `javadoc` will recursively go through every folder and subfolder, starting
    with the names in the list, to find Java files to be processed. I created a second
    package that began with `org`. `-subpackages` are searched recursively and all
    public or package classes found in any folder starting with the listed names will
    be documented.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个开关 `-subpackages` 是项目中的包的冒号分隔列表。`javadoc` 将递归地遍历每个文件夹和子文件夹，从列表中的名称开始，以找到要处理的
    Java 文件。我创建了一个以 `org` 开头的第二个包。`-subpackages` 将递归搜索，并在任何以列表中名称开头的文件夹中找到的所有公共或包类都将被文档化。
- en: When the `javadoc` tool is run on the project, it will create HTML web pages.
    What follows is the Javadocs web page created for the `JavaDocsExample` class.
    It can be quite long. Take note that only public methods appear. Private methods,
    though commented like a public method, do not appear in the HTML output. Here
    is what the Javadocs will look like.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当在项目上运行 `javadoc` 工具时，它将创建 HTML 网页。以下是为 `JavaDocsExample` 类创建的 Javadocs 网页。它可能相当长。请注意，只有公共方法会出现。尽管像公共方法一样注释，但私有方法不会出现在
    HTML 输出中。以下是 Javadocs 的样子。
- en: "![Figu\uFEFFre 11.1 – The first half of the generated Javadocs](img/B19088_11_01.jpg)"
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – 生成的 Javadocs 的前半部分](img/B19088_11_01.jpg)'
- en: Figure 11.1 – The first half of the generated Javadocs
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – 生成的 Javadocs 的前半部分
- en: '![Figure 11.2 – The second half of the generated Javadocs](img/B19088_11_02.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.2 – 生成的 Javadocs 的后半部分](img/B19088_11_02.jpg)'
- en: Figure 11.2 – The second half of the generated Javadocs
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.2 – 生成的 Javadocs 的后半部分
- en: The entire Java library is described in Javadocs and is searchable in your browser.
    See *Further reading* for the URL to these docs. The best practice for the code
    that you write is to write Javadocs comments. This also means that you must describe
    what every part of your program does and, more importantly, why it does what it
    should. Use the `/* . . . */` and `//` notations to include additional comments
    in methods or temporarily remove code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 整个 Java 库都在 Javadocs 中进行了描述，并且可以在浏览器中搜索。参见 *进一步阅读* 获取这些文档的 URL。编写代码的最佳实践是编写
    Javadocs 注释。这也意味着你必须描述程序的每个部分做什么，更重要的是，为什么它应该这样做。使用 `/* ... */` 和 `//` 注释来在方法中包含额外的注释或临时移除代码。
- en: Now, let us look at how we can record specific events that occur in our code
    using logging.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看我们如何使用日志记录来记录代码中发生的特定事件。
- en: Using logging
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用日志记录
- en: In your own code, you may want to display messages in the console while the
    program runs. These messages may be to inform you that an exception has been caught
    or record any other event that happens during the program’s execution. While you
    can write to the console using `System.out.print`, `println`, or my favorite,
    `printf`, do not. If the application is console-based, then these statements will
    appear with the console user interface. For GUI or web applications, the console
    may or may not be visible. Once the program goes into production, the end user
    may be confused or overwhelmed by the messages you display in the console.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在你自己的代码中，你可能希望在程序运行时在控制台中显示消息。这些消息可能是通知你捕获到异常，或者记录程序执行期间发生的任何其他事件。虽然你可以使用 `System.out.print`、`println`
    或我最喜欢的 `printf` 将消息写入控制台，但不要这样做。如果应用程序是基于控制台的，那么这些语句将出现在控制台用户界面中。对于 GUI 或 Web
    应用程序，控制台可能可见或不可见。一旦程序进入生产阶段，最终用户可能会被你在控制台显示的消息所困惑或压倒。
- en: The solution is logging. This allows you to write log messages to the console,
    a file, or a database, or even send them to yourself in an email. We will only
    look at the console or a file. Java has a logging framework, found in `java.util.logging`.
    We will also look at one of the external logging frameworks from the Apache Foundation,
    called **Log4j2**.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用日志记录。这允许你将日志消息写入控制台、文件或数据库，甚至可以通过电子邮件发送给自己。我们只关注控制台或文件。Java 有一个日志框架，位于
    `java.util.logging` 中。我们还将查看 Apache 基金会的一个外部日志框架，称为 **Log4j2**。
- en: java.util.logging
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: java.util.logging
- en: There are two parts to a logging framework. There is the framework of Java classes
    and the configuration file. For JUL, the common name for `java.util.logging`,
    there is a configuration file named `logging.properties` in the `conf` folder
    of the Java installation. We will see how to use a custom config file rather than
    use the config shared by all applications. The default location for the JUL config
    is in the Java `conf` folder. We can place our JUL custom properties file anywhere
    on our system, as we must provide the path to the file when we instantiate the
    logger.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 日志框架有两个部分。有一个 Java 类的框架和配置文件。对于 `java.util.logging` 的常见名称，有一个名为 `logging.properties`
    的配置文件位于 Java 安装目录下的 `conf` 文件夹中。我们将看到如何使用自定义配置文件而不是使用所有应用程序共享的配置。JUL 的默认配置位置在
    Java 的 `conf` 文件夹中。我们可以将我们的 JUL 自定义属性文件放在系统上的任何位置，因为我们必须在实例化记录器时提供文件的路径。
- en: 'Here is a simple program that uses the logger:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个使用记录器的简单程序：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We instantiate `Logger` using the Factory Software pattern as implemented in
    the `Logger` class. We pass the name of this class so that it can appear in the
    logger output and we can support different `Logger` items for different classes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用在`Logger`类中实现的工厂软件模式来实例化`Logger`。我们传递这个类的名称，以便它可以在日志输出中显示，并且我们可以为不同的类支持不同的`Logger`项：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Log messages must be associated with a level, which is the first parameter when
    we use the `log` method. There are six levels, and all have an optional third
    parameter of an `Exception` object. Typically, the `Level.INFO` parameter is used
    for recording information that you wish to record about what the program is doing
    or who is doing it. `Level.SEVERE` is used for recording exceptions. The `FINEST`,
    `FINER`, and `FINE` parameters are used while debugging an application. You can
    decide the minimum level in the config file. During development, you will use
    `ALL`, while once put into production you will, raise the level to `INFO`. This
    means that you do not need to delete or comment out log messages below `INFO`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 日志消息必须与一个级别相关联，这是我们使用`log`方法时的第一个参数。有六个级别，所有级别都有一个可选的第三个参数`Exception`对象。通常，`Level.INFO`参数用于记录您希望记录的程序正在做什么或谁正在做的信息。`Level.SEVERE`用于记录异常。`FINEST`、`FINER`和`FINE`参数用于调试应用程序。您可以在配置文件中决定最小级别。在开发期间，您将使用`ALL`，一旦投入生产，您将级别提升到`INFO`。这意味着您不需要删除或注释掉低于`INFO`级别的日志消息。
- en: 'In this method, we just create log messages:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个方法中，我们只是创建日志消息：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: For the `SEVERE` level, I have forced an exception in the `try` block and when
    it is caught, I log it by including the `Exception` object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`SEVERE`级别，我在`try`块中强制抛出异常，并在捕获它时，通过包含`Exception`对象来记录它。
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can add a custom message to an exception by passing a `String` object to
    the constructor:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`String`对象传递给构造函数来向异常添加自定义消息：
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: If you have a custom config file, you must explicitly load the file; otherwise,
    the default config, `logging.properties`, in the Java `conf` folder will be used.
    It is not a good idea to change the default configuration, as it will affect every
    program that you run that uses JUL.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个自定义配置文件，您必须显式加载该文件；否则，将使用Java `conf`文件夹中的默认配置`logging.properties`。更改默认配置不是一个好主意，因为它将影响您运行的每个使用JUL的程序。
- en: 'To load a custom config file, you need to find this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载自定义配置文件，您需要找到这个：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Replace it with the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用以下内容替换它：
- en: '[PRE14]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When your code is packaged into a JAR file, the location of resource files
    that existed in `src/main/resources` is the root of the project. The `retrieveURLOfJarResource`
    method knows this, so it can load the config file placed in this folder. This
    is in a `static` initialization block, which will ensure that this `Logger` class
    will only be instantiated once should there be more than one instance of this
    class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的代码被打包成JAR文件时，`src/main/resources`中存在的资源文件的位置是项目的根目录。`retrieveURLOfJarResource`方法知道这一点，因此它可以加载放置在此文件夹中的配置文件。这在一个`static`初始化块中，这将确保如果存在此类的多个实例，则此`Logger`类只会被实例化一次：
- en: '[PRE15]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The default `logging.properties` file is very well commented. Here are the contents
    of the file with the comments removed. I encourage you to examine the version
    of this file on your machine.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的`logging.properties`文件注释非常详细。以下是移除注释后的文件内容。我鼓励您检查您机器上此文件的版本。
- en: 'Here’s the display output to the console:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是控制台显示的输出：
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Unless it''s overridden, this will only show logs of this level or greater:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 除非被覆盖，否则它只会显示此级别或更高级别的日志：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you are writing logs to a file, then the `pattern` property is the folder
    and filename. In this case, `%h` means to write the file to your home directory.
    This is the best practice for JUL. If you prefer to store the log files in a specific
    folder name, then it must already exist:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在将日志写入文件，那么`pattern`属性是文件夹和文件名。在这种情况下，`%h`表示将文件写入您的家目录。这是JUL的最佳实践。如果您希望将日志文件存储在特定的文件夹名称中，那么该文件夹必须已经存在：
- en: '[PRE18]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Every time the program runs, it overwrites the previous log file, as only one
    log file is permitted:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 每次程序运行时，它都会覆盖之前的日志文件，因为只允许一个日志文件：
- en: '[PRE19]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Logging is thread-safe. This tells us that up to 100 concurrent log file locks
    can be used. If you get `IOException` errors when writing to a log, you may solve
    this issue by increasing the number of locks:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录是线程安全的。这告诉我们，可以同时使用多达100个日志文件锁。如果您在写入日志时遇到`IOException`错误，您可以通过增加锁的数量来解决这个问题：
- en: '[PRE20]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Write to the log file in the XML format:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以XML格式写入日志文件：
- en: '[PRE21]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Overriding a handler’s level supersedes the global level:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖处理器级别将取代全局级别：
- en: '[PRE22]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This is the format of the log when displayed on the screen. You can configure
    `SimpleFormatter`, and this is explained in the comments for the default config
    file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是日志在屏幕上显示的格式。你可以配置 `SimpleFormatter`，这已在默认配置文件的注释中解释：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The custom properties file has the following changes:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义属性文件有以下更改：
- en: 'The `FileHandler` class has been added so that logs will be written to a file
    and the console:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileHandler` 类已被添加，以便日志将被写入文件和控制台：'
- en: '[PRE24]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Both handlers will now display log messages of every level:'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个处理器现在将显示每个级别的日志消息：
- en: '[PRE25]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We use `%h` to indicate that we want the logs written to our home directory.
    If you wish to write them to a specific folder, then the folder must already exist.
    If the folder does not exist, then the file will not be created:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `%h` 来表示我们希望将日志写入我们的主目录。如果你希望将它们写入特定文件夹，则该文件夹必须已经存在。如果文件夹不存在，则不会创建文件：
- en: '[PRE26]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'There can be three log files, one for each run of the program. After writing
    to the third log file, should there need to be another log file, then it wraps
    around and overwrites the existing files in the order they were created:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 可以有三个日志文件，每个程序运行一个。在写入第三个日志文件后，如果需要另一个日志文件，则它将回绕并按创建顺序覆盖现有文件：
- en: '[PRE27]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The Java logger is always available and does not have any dependencies that
    you must add to the Maven POM file. Logging can have an impact on the performance
    of your code. For this reason, there are alternatives to JUL that execute in less
    time or provide features not present in JUL. Let's look at one of the most widely
    used external loggers, Log4j2.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: Java 记录器始终可用，并且不需要添加到 Maven POM 文件中的任何依赖项。记录可能会影响你的代码性能。因此，有一些替代 JUL 的方案，它们执行时间更短或提供
    JUL 中没有的功能。让我们看看最广泛使用的第三方日志记录器之一，Log4j2。
- en: Log4j2
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Log4j2
- en: 'Log4j2 works very much like JUL. Before we can use it, we need to add new dependencies
    to our POM file:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j2 与 JUL 非常相似。在我们能够使用它之前，我们需要向我们的 POM 文件中添加新的依赖项：
- en: '[PRE28]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In any file in which you plan to use Log4j2, you begin with this `class` field:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在你计划使用 Log4j2 的任何文件中，你从以下 `class` 字段开始：
- en: '[PRE29]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now to be able to log, you just need the following. Take note that the levels
    are now methods of the `LOG` object. An optional second parameter can take an
    `Exception` reference for all levels, as shown in `Level 5`:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了能够记录日志，你只需要以下内容。请注意，级别现在是 `LOG` 对象的方法。可选的第二个参数可以接受所有级别的 `Exception` 引用，如
    `Level 5` 所示：
- en: '[PRE30]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: When using Log4j2, you should create a config file, as its default behavior
    is limited. In the absence of this file, the logger will do nothing. Like JUL’s
    config, the `log4j2.xml` config file is expected to be found in `src/main/resources`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 Log4j2 时，你应该创建一个配置文件，因为其默认行为有限。如果没有此文件，记录器将不执行任何操作。与 JUL 的配置一样，期望 `log4j2.xml`
    配置文件位于 `src/main/resources`。
- en: Rather than review this file, I ask you to clone the repo from GitHub for this
    chapter and look at the `log4j2.xml` file in the `LoggingExample` project. Its
    comments explain what can be configured. One improvement over JUL is that should
    you wish to store the logs in an arbitrary folder, Log4j2’s file handler will
    create the folder.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是审查此文件，我要求你从 GitHub 克隆此章节的仓库，并查看 `LoggingExample` 项目中的 `log4j2.xml` 文件。其注释解释了可以配置的内容。与
    JUL 相比的一个改进是，如果你希望将日志存储在任意文件夹中，Log4j2 的文件处理器将创建该文件夹。
- en: I add a logger to almost every file I write. This allows me to write logs as
    needed. Declaring a `Logger` object that you do not use will have no effect on
    the performance of your program.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎在写的每个文件中都添加了一个记录器。这允许我按需编写日志。声明一个未使用的 `Logger` 对象不会对你的程序性能产生影响。
- en: Summary
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered two important tasks that every programmer should
    include in their code, regardless of the language used. The first was documentation.
    Comments and Javadocs can be critical in the maintenance of existing code or in
    adding new features. You may think you will never forget why you coded in a certain
    way, but 6 months from now, that memory may not be as accurate as it needs to
    be.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了每个程序员都应该包括在他们的代码中的两个重要任务，无论使用哪种语言。第一个是文档。注释和 Javadoc 对于现有代码的维护或添加新功能可能是关键的。你可能认为你永远不会忘记为什么以某种方式编写代码，但
    6 个月后，这种记忆可能不如所需的准确。
- en: During the development of software, and once it goes into production, having
    the program write what it is doing to the console, or more commonly, to a file,
    can go a long way in tracking down bugs. Auditing software that is subject to
    regulations is another task logging can carry out. Never use `System.out.print`
    or its cousins to display information about the operation of a program – use a
    logger. Either the Java logger or an external logger such as Log4j2 should be,
    must be deployed in your code.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发过程中，一旦程序投入生产，让程序将其正在执行的操作写入控制台，或者更常见的是写入文件，可以在追踪错误方面起到很大的作用。对受监管的软件进行审计是日志可以执行的其他任务之一。永远不要使用`System.out.print`或其类似方法来显示有关程序操作的信息——使用日志记录器。无论是Java日志记录器还是像Log4j2这样的外部日志记录器，都必须部署到您的代码中。
- en: Documenting your code is mandatory. Using logging to record events in a program
    is mandatory. Remember that programming is an engineering discipline and not an
    art form. Engineering requires the type of documentation described here and requires
    the use of logging to monitor a program’s performance.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对代码进行文档化是强制性的。使用日志记录程序中的事件也是强制性的。请记住，编程是一门工程学科，而不是一种艺术形式。工程需要这里描述的那种文档，并且需要使用日志来监控程序的性能。
- en: Coming up, we will look at how to work with floating-point numbers when absolute
    accuracy is required. Testing our code to ensure it performs as designed is also
    covered in the next chapter.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在需要绝对精度时如何处理浮点数。在下一章中，我们还将涵盖测试我们的代码以确保其按设计运行。
- en: Further reading
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*How to Write Doc Comments for the Javadoc* *Tool*: [https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide](https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*如何为Javadoc工具编写文档注释*：[https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide](https://www.oracle.com/technical-resources/articles/java/Javadoc-tool.html#styleguide)'
- en: 'The Java 17 Javadocs: [https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17 Javadocs：[https://docs.oracle.com/en/java/javase/17/docs/api/index.html](https://docs.oracle.com/en/java/javase/17/docs/api/index.html)
- en: '*Java Logging Tools and* *Frameworks*: [http://www.java-logging.com/](http://www.java-logging.com/)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Java日志工具和框架*：[http://www.java-logging.com/](http://www.java-logging.com/)'
