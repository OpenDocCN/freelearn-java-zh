- en: Chapter 2. Configuring the Core WildFly Subsystems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 配置 WildFly 核心子系统
- en: The first chapter gave us the basis to get started with WildFly 8\. It is time
    for us to dive right into the configuration of WildFly and see how to manage a
    standalone instance of the application server. You will see that the entire server
    is configured within a single file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 第一章为我们提供了开始使用 WildFly 8 的基础。现在是时候深入 WildFly 的配置，看看如何管理应用服务器的独立实例了。你会发现整个服务器都在一个文件中进行配置。
- en: 'The configuration file is made up of a list of subsystems, including the application
    server core services and standard Java EE services. It is not possible to discuss
    all the subsystems within a single chapter, so they have been divided over a couple
    of chapters. By the end of this chapter, you should understand and be able to
    configure:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件由一系列子系统组成，包括应用服务器核心服务和标准 Java EE 服务。由于一个章节中不可能讨论所有子系统，因此它们被分散在几个章节中。到本章结束时，你应该能够理解和配置以下内容：
- en: The server configuration file `standalone.xml`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器配置文件 `standalone.xml`
- en: The application server's thread pool
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务器的线程池
- en: The application server's logging subsystem
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用服务器的日志子系统
- en: Configuring our application server
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置我们的应用服务器
- en: The default configuration files are named `standalone.xml`, for standalone servers,
    and `domain.xml` for an application server domain. An application server domain
    can be seen as a specialized server configuration, which also includes the domain
    and host controller setup. We will discuss the application server domain in [Chapter
    5](ch05.html "Chapter 5. Configuring a WildFly Domain"), *Configuring a WildFly
    Domain*. However, as far as the core services configuration is concerned, what
    we cover here will be suitable for the domain configuration as well. The configuration
    files (`standalone.xml` and `domain.xml`) are non-static files, which means that
    runtime changes are persisted to them, for example, adding a new component, such
    as a JMS destination, or deploying an application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置文件命名为 `standalone.xml`，用于独立服务器，以及 `domain.xml` 用于应用服务器域。应用服务器域可以被视为一种专门的服务器配置，它还包括域和主机控制器设置。我们将在
    [第五章](ch05.html "第五章 配置 WildFly 域") 中讨论应用服务器域，*配置 WildFly 域*。然而，就核心服务配置而言，这里所涵盖的内容也适用于域配置。配置文件（`standalone.xml`
    和 `domain.xml`）是非静态文件，这意味着运行时更改会被持久化到它们中，例如，添加一个新的组件，如 JMS 目标，或部署应用程序。
- en: 'You can define as many configuration files as you need. The WildFly 8.1.0 release
    provides a few variants of `standalone.xml` (web profile), such as `standalone-full.xml`
    (full profile), and the `standalone-ha.xml` (web profile with high availability).
    You can also find some example configuration files in `JBOSS_HOME/docs/examples/configs`.
    If you want to start the server with a different configuration file, you can start
    the server with the following parameters:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义你需要的任意数量的配置文件。WildFly 8.1.0 版本提供了 `standalone.xml`（Web 配置文件）的一些变体，例如 `standalone-full.xml`（完整配置文件）和
    `standalone-ha.xml`（具有高可用性的 Web 配置文件）。你还可以在 `JBOSS_HOME/docs/examples/configs`
    中找到一些示例配置文件。如果你想使用不同的配置文件启动服务器，可以使用以下参数启动服务器：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `standalone.xml` file is located in the `JBOSS_HOME/standalone/configuration`
    folder. This configuration file is in XML format and is validated by a set of
    `.xsd` files found in the `JBOSS_HOME/docs/schema` folder.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`standalone.xml` 文件位于 `JBOSS_HOME/standalone/configuration` 文件夹中。此配置文件为 XML
    格式，并由 `JBOSS_HOME/docs/schema` 文件夹中找到的一组 `.xsd` 文件进行验证。'
- en: If you want to check the single `.xsd` files, you can find them in the `JBOSS_HOME/docs/schema`
    folder of your server distribution. You can get to know all the available server
    parameters with a simple inspection of these files or by importing them into your
    Eclipse environment. Once they are located in your project, right-click on your
    file, and navigate to **Generate** | **XML File**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想检查单个 `.xsd` 文件，可以在你的服务器发行版的 `JBOSS_HOME/docs/schema` 文件夹中找到它们。你可以通过简单地检查这些文件或将它们导入到你的
    Eclipse 环境中来了解所有可用的服务器参数。一旦它们位于你的项目中，右键单击你的文件，然后导航到 **生成** | **XML 文件**。
- en: 'The application server configuration follows a tree-like structure that contains,
    at the root element, the server definition, as shown in the following diagram:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用服务器的配置遵循一个树状结构，其中根元素包含服务器定义，如下面的图所示：
- en: '![Configuring our application server](img/6232OS_02_01.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![配置我们的应用服务器](img/6232OS_02_01.jpg)'
- en: In the following sections, we will show in detail the important parts of the
    server configuration. This will be helpful to understand the role of each single
    component in the application server, although you are advised not to manually
    change the configuration file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我们将详细展示服务器配置的重要部分。这将有助于理解应用程序服务器中每个单个组件的作用，尽管建议您不要手动更改配置文件。
- en: Manually changing the configuration file can lead to unchecked data modifications.
    This can corrupt the format of the file, preventing WildFly from starting up.
    If you do need to update the file manually, you should consider making a backup
    copy first.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 手动更改配置文件可能导致未经检查的数据修改。这可能会破坏文件的格式，防止WildFly启动。如果您确实需要手动更新文件，您应该考虑首先创建备份副本。
- en: Note
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The best practice for changing the server configuration is to use the **command-line
    interface** (**CLI**) or the web admin console, which are described in [Chapter
    7](ch07.html "Chapter 7. Using the Management Interfaces"), *Using the Management
    Interfaces*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 更改服务器配置的最佳实践是使用**命令行界面**（**CLI**）或Web管理控制台，这些在[第7章](ch07.html "第7章。使用管理接口")
    *使用管理接口* 中进行了描述。
- en: Extensions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展
- en: 'The application server contains a list of modules that are used to extend the
    core of the application server. The core of WildFly is very light, and these extensions
    provide much of the functionality you expect from an application server. Just
    like regular static modules, they are stored in the `JBOSS_HOME/modules` folder.
    Each extension defined in the `standalone.xml` or `domain.xml` file is picked
    up by the WildFly class loader when you start the server, before any applications
    are deployed. The following code shows an extract from the server configuration:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序服务器包含一系列用于扩展应用程序服务器核心的模块。WildFly的核心非常轻量级，这些扩展提供了您期望从应用程序服务器中获得的大部分功能。就像常规静态模块一样，它们存储在`JBOSS_HOME/modules`文件夹中。在部署任何应用程序之前，`standalone.xml`或`domain.xml`文件中定义的每个扩展都会被WildFly类加载器拾取。以下代码显示了服务器配置的摘录：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Paths
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路径
- en: 'Logical names for a filesystem path can be defined using the `paths` element.
    These paths can then be referenced by their logical name, rather than having to
    type the full path each time within the configuration file. By default, the `path`
    entry is excluded from the configuration. If you want to include it, you will
    have to manually add the full configuration. The following example defines a path
    relative to the WildFly server log with the logical name of `log.dir`. For a standalone
    server, this directory translates into `JBOSS_HOME/standalone/log/mylogdir`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`paths`元素定义文件系统路径的逻辑名称。然后可以通过其逻辑名称引用这些路径，而无需在配置文件中每次都输入完整路径。默认情况下，`path`条目不包括在配置中。如果您想包括它，您将必须手动添加完整的配置。以下示例定义了一个相对于WildFly服务器日志的路径，逻辑名称为`log.dir`。对于独立服务器，此目录转换为`JBOSS_HOME/standalone/log/mylogdir`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To reference this path in other sections of the configuration file, simply
    use the logical name as the path. The following example shows the path being used
    to store the logging, rotating file handler:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要在其他配置文件部分引用此路径，只需使用逻辑名称作为路径即可。以下示例显示了用于存储日志、旋转文件处理器的路径：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note that the property `relative-to` is not mandatory. If you don't include
    it in your path configuration, the path is assumed to be an absolute path.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，属性`relative-to`不是必需的。如果您在路径配置中不包括它，则假定路径是绝对路径。
- en: WildFly provides a set of system paths that are available for you to use without
    the need to configure them manually. The pre-configured paths are outlined in
    the following table. The first five paths cannot be overridden, but the rest can
    be overridden using the path element as shown in the preceding code snippet.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly提供了一套系统路径，您可以在不手动配置的情况下使用。以下表格概述了预配置的路径。前五个路径不能被覆盖，但其余路径可以使用前面代码片段中显示的路径元素进行覆盖。
- en: '| Path | Meaning |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 路径 | 含义 |'
- en: '| --- | --- |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `jboss.home` | The root directory of the WildFly distribution |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.home` | WildFly分发的根目录 |'
- en: '| `user.home` | The user''s home directory |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `user.home` | 用户的家目录 |'
- en: '| `user.dir` | The user''s current working directory |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `user.dir` | 用户当前的工作目录 |'
- en: '| `java.home` | The Java installation directory |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `java.home` | Java安装目录 |'
- en: '| `jboss.server.base.dir` | The root directory for an individual server instance
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.base.dir` | 单个服务器实例的根目录 |'
- en: '| `jboss.server.data.dir` | The directory the server will use for persistent
    data file storage |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.data.dir` | 服务器将用于持久数据文件存储的目录 |'
- en: '| `jboss.server.log.dir` | The directory the server will use for logfile storage
    |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.log.dir` | 服务器将用于日志文件存储的目录 |'
- en: '| `jboss.server.tmp.dir` | The directory the server will use for temporary
    file storage |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.server.tmp.dir` | 服务器将用于临时文件存储的目录 |'
- en: '| `jboss.domain.servers.dir` | The directory under which a host controller
    will create the working area for individual server instances |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| `jboss.domain.servers.dir` | 主控制器将在其中为单个服务器实例创建工作区的目录 |'
- en: Management interfaces
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理接口
- en: 'The management interfaces are configured within the `management` element. This
    configuration is used by the CLI, the administration console, and by JMX. Both
    the native CLI interface and the web console run on admin port number 9990\. The
    following example is taken from the default server configuration and highlights
    the ports used for the management interfaces:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口在`management`元素内进行配置。此配置由CLI、管理控制台和JMX使用。本机CLI接口和Web控制台都在管理端口9990上运行。以下示例取自默认服务器配置，并突出了用于管理接口的端口号：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the following code snippet, we show the preceding `socket-binding` configuration
    being referenced by the `management-interfaces` section of the `standalone.xml`
    file:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们展示了前面的`socket-binding`配置被`standalone.xml`文件的`management-interfaces`部分引用：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Management interfaces are discussed in detail in [Chapter 7](ch07.html "Chapter 7. Using
    the Management Interfaces"), *Using the Management Interfaces*, which provides
    detailed coverage of the application server management tools.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 管理接口在[第7章](ch07.html "第7章。使用管理接口")*使用管理接口*中进行了详细讨论，该章节提供了对应用服务器管理工具的详细覆盖。
- en: Profiles and subsystems
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件和子系统
- en: A profile can be seen as a collection of subsystems, and each subsystem in turn
    contains a subset of functionalities added to the application server by means
    of extensions (see the *Extensions* section). For example, the web subsystem contains
    the definition of a set of connectors used by the container, the messaging subsystem
    defines the JMS configuration and modules used by the AS's messaging provider,
    and so on.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件可以被视为子系统集合，而每个子系统又包含通过扩展添加到应用服务器的功能子集（请参阅*扩展*部分）。例如，Web子系统包含容器使用的连接器集合的定义，消息子系统定义了AS消息提供者使用的JMS配置和模块等。
- en: One important difference between a standalone file and a domain configuration
    file is the number of profiles contained in it. When using a standalone configuration,
    there's a single profile that contains the set of subsystem configurations. Domain
    configuration can, on the other hand, provide multiple profiles.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 独立文件和域配置文件之间的重要区别在于其中包含的配置文件数量。当使用独立配置时，有一个包含一组子系统配置的单个配置文件。另一方面，域配置可以提供多个配置文件。
- en: Interfaces
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接口
- en: Interfaces define a logical name for where network interfaces/IP address or
    host names can be bound.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接口定义了网络接口/IP地址或主机名可以绑定的逻辑名称。
- en: 'By default, the standalone application server defines two available network
    interfaces, the `management` interface and the `public` interface:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，独立应用服务器定义了两个可用的网络接口，即`management`接口和`public`接口：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `public` network interface is intended to be used for the application server
    core services:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`public`网络接口旨在用于应用服务器核心服务：'
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `management` network interface is referenced by the AS management interfaces,
    as shown in the *Management interfaces* section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`管理`网络接口由AS管理接口引用，如*管理接口*部分所示。'
- en: 'By default, both network interfaces resolve to the loop back address `127.0.0.1`.
    This means that the application server public services and the management services
    are accessible only from the local machine. By changing the `inet-address` value,
    you can bind the network interface to another IP address. The following example
    shows the server listening on IP `192.168.1.1`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，两个网络接口都解析到回环地址`127.0.0.1`。这意味着应用服务器公共服务和管理工作站只能从本地机器访问。通过更改`inet-address`值，可以将网络接口绑定到另一个IP地址。以下示例显示了服务器正在监听IP地址`192.168.1.1`：
- en: '[PRE8]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If, on the other hand, you want to bind the network interface to all available
    sets of IP addresses, you can use the `<any-address />` element, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想将网络接口绑定到所有可用的IP地址集，可以使用`<any-address />`元素，如下所示：
- en: '[PRE9]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Another useful variation of network interface is the **Network** **Interface**
    **Card** (**nic**) element, which gathers the address information from the network
    card name:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 网络接口的另一个有用变体是**网络接口卡**（**nic**）元素，它从网络卡名称收集地址信息：
- en: '[PRE10]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Note
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Binding management interfaces via CLI**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**通过CLI绑定管理接口**'
- en: You can also bind your public interface using the `-b` switch, followed by a
    valid host/IP address. This will cause the server to listen on the host/IP address
    provided. For example, to bind all public interfaces to all IPv4 addresses, you
    will use `$JBOSS_HOME/bin/standalone.sh -b=0.0.0.0`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用`-b`开关绑定你的公共接口，后跟一个有效的主机/IP地址。这将导致服务器监听提供的主机/IP地址。例如，要将所有公共接口绑定到所有IPv4地址，你将使用`$JBOSS_HOME/bin/standalone.sh
    -b=0.0.0.0`。
- en: The socket-binding groups
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: socket-binding组
- en: 'A socket-binding group defines a logical name for a socket. Each socket-binding
    name can be referenced in other parts of the configuration file. In this section,
    you are able to configure the network port that will be listening for incoming
    connections. Every socket-binding group references a network interface through
    the `default-interface` attribute. Have a look at the following code snippet:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一个socket-binding组定义了一个套接字的逻辑名称。每个socket-binding名称可以在配置文件的其它部分被引用。在本节中，你可以配置将监听传入连接的网络端口。每个socket-binding组通过`default-interface`属性引用一个网络接口。看看以下代码片段：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In order to change the port where a service is bound, you can change the `port`
    attribute of its service, but a better approach is to use one of the management
    interfaces. This will provide an immediate outcome of the affected change. In
    the following example, we are going to change the default port for the `http`
    connector using the CLI:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更改绑定服务的端口号，你可以更改其服务的`port`属性，但更好的方法是使用管理接口之一。这将提供受影响更改的即时结果。在以下示例中，我们将使用CLI更改`http`连接器的默认端口号：
- en: '[PRE12]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You may have noticed in the response shown above that a reload is required.
    This can be achieved by executing the following command:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到在上面的响应中需要重新加载。这可以通过执行以下命令来实现：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: System properties
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统属性
- en: 'This section contains a set of system-wide properties, which can be added to
    the application server as part of the booting process. By default, the `system-properties`
    entry is excluded from the configuration. If you want to use this feature, you
    will need to add the full configuration. The following configuration snippet sets
    the property named example to `true`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本节包含一组系统级属性，可以作为启动过程的一部分添加到应用服务器中。默认情况下，`system-properties`条目被排除在配置之外。如果你想使用此功能，你需要添加完整的配置。以下配置片段将名为example的属性设置为`true`：
- en: '[PRE14]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The property can be later retrieved on the application server using the following
    code:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 该属性可以在应用服务器上使用以下代码检索：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Deployments
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: The last section of the configuration file contains all the deployed applications
    that have been registered on the application server. Each time a new application
    is deployed or undeployed, this section is updated to reflect the new application
    stack.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 配置文件的最后一部分包含所有已在应用服务器上注册的已部署应用程序。每次部署或卸载新应用程序时，本节都会更新以反映新的应用程序堆栈。
- en: Configuring core subsystems
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置核心子系统
- en: Now that you have grasped the basic concepts of the WildFly configuration file,
    we will look in more detail at single services.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经掌握了WildFly配置文件的基本概念，我们将更详细地探讨单个服务。
- en: 'In the following diagram, you can find a rough representation of core WildFly
    8 subsystems (for the sake of simplicity, we are including just the subsystems
    that are covered throughout this book):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，你可以找到一个粗略的WildFly 8核心子系统表示（为了简单起见，我们只包括本书涵盖的子系统）：
- en: '![Configuring core subsystems](img/6232OS_02_02.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![配置核心子系统](img/6232OS_02_02.jpg)'
- en: 'As a first taste of configuring the application server, we will explore the
    areas that are highlighted in bold in the preceding diagram. These include the
    following core application server subsystems:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为配置应用服务器的一个初步体验，我们将探索前图中加粗显示的区域。这些包括以下核心应用服务器子系统：
- en: The thread pool subsystem
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程池子系统
- en: The JBoss logging subsystem
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JBoss日志子系统
- en: Let's move straight to the first subsystem, the thread pool.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们直接进入第一个子系统，线程池。
- en: Configuring the thread pool subsystem
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置线程池子系统
- en: Thread pools address two different problems. Firstly, they usually deliver improved
    performance when executing large numbers of asynchronous tasks due to reduced
    per-task invocation overhead. Secondly, they provide a means of bounding and managing
    resources, including threads, consumed when executing a collection of tasks.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池解决两个不同的问题。首先，由于减少了每个任务的调用开销，它们通常在执行大量异步任务时提供改进的性能。其次，它们提供了一种限制和管理资源（包括线程）的方法，这些资源在执行一系列任务时被消耗。
- en: In releases of JBoss server prior to JBoss AS 7, the thread pool configuration
    was centralized in a single file or deployment descriptor. In WildFly, any subsystem
    that uses thread pools manages its own thread configuration.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在JBoss服务器在JBoss AS 7之前的版本中，线程池配置集中在一个文件或部署描述符中。在WildFly中，任何使用线程池的子系统都管理自己的线程配置。
- en: 'By appropriately configuring the thread pool section, you can tune the specific
    areas that use that kind of pool to deliver new tasks. The application server
    thread pool configuration can include the following elements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过适当配置线程池部分，您可以调整使用该类型池以交付新任务的具体区域。应用程序服务器线程池配置可以包括以下元素：
- en: Thread factory configuration
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 线程工厂配置
- en: Bounded-queue thread configuration
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制队列线程配置
- en: Blocking bounded-queue thread configuration
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻塞限制队列线程配置
- en: Unbounded-queue thread configuration
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无界队列线程配置
- en: Queueless thread pool configuration
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无阻塞队列线程池配置
- en: Blocking queueless thread pool configuration
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无阻塞队列线程池配置
- en: Scheduled thread configuration
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度线程配置
- en: Note
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is important to note that the thread subsystem will probably be marked for
    deprecation in WildFly 9, but in WildFly 8 this configuration is completely valid.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：在WildFly 9中，线程子系统可能会被标记为弃用，但在WildFly 8中，此配置完全有效。
- en: Let's look at each single element in detail.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看每个单独的元素。
- en: Configuring the thread factory
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置线程工厂
- en: A **thread** **factory** (implementing `java.util.concurrent.ThreadFactory`)
    is an object that creates new threads on demand. Using thread factories removes
    the hardwiring of calls to a new thread, enabling applications to use special
    thread subclasses, priorities, and so on.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程** **工厂**（实现`java.util.concurrent.ThreadFactory`）是一个按需创建新线程的对象。使用线程工厂可以消除对新线程调用的硬编码，使应用程序能够使用特殊的线程子类、优先级等。'
- en: The thread factory is not included in the server configuration by default, as
    it relies on default values that you will rarely need to modify. Nevertheless,
    we will provide a simple configuration example for the experienced user who may
    require complete control of the thread configuration.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，线程工厂不包括在服务器配置中，因为它依赖于您很少需要修改的默认值。尽管如此，我们将为可能需要完全控制线程配置的资深用户提供一个简单的配置示例。
- en: 'The following is an example of a custom thread factory configuration:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个自定义线程工厂配置的示例：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The following are the possible attributes that you can use when defining a
    thread factory:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在定义线程工厂时可以使用的可能属性：
- en: The `name` attribute is the name of the created thread factory
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`属性是创建的线程工厂的名称'
- en: The optional `priority` attribute may be used to specify the thread priority
    of created threads
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的`priority`属性可以用来指定创建的线程的优先级
- en: The optional `group-name` attribute specifies the name of the thread group to
    create for this thread factory
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的`group-name`属性指定为该线程工厂创建的线程组的名称
- en: 'The `thread-name-pattern` is the template used to create names for threads.
    The following patterns can be used:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thread-name-pattern`是用于创建线程名称的模板。以下模式可以使用：'
- en: '| Pattern | Output |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 模式 | 输出 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `%%` | Emits a percentage sign |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `%%` | 输出百分号 |'
- en: '| `%g` | Emits the per-factory thread sequence number |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `%g` | 输出每个工厂的线程序列号 |'
- en: '| `%f` | Emits the global thread sequence number |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `%f` | 输出全局线程序列号 |'
- en: '| `%i` | Emits the thread ID |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `%i` | 输出线程ID |'
- en: '| `%G` | Emits the thread group name |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `%G` | 输出线程组名称 |'
- en: The bounded-queue thread pool
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制队列线程池
- en: 'A bounded-queue thread pool is the most common kind of pool used by the application
    server. It helps prevent resource exhaustion by defining a constraint on the thread
    pool''s size. It is also the most complex to use. Its inherent complexity derives
    from the fact that it maintains both a fixed-length queue and two pool sizes:
    a **core** **size** and a **maximum** **size**.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 有限队列线程池是应用服务器中最常用的池类型。它通过定义线程池大小的约束来帮助防止资源耗尽。它也是最难使用的。其固有的复杂性源于它维护一个固定长度的队列和两个池大小：一个**核心**大小和一个**最大**大小。
- en: If, each time a new task is submitted, the number of running threads is less
    than the core size, a new thread is created. Otherwise, if there is room in the
    queue, the task is queued.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每次提交新任务时，正在运行的线程数少于核心大小，则创建一个新线程。否则，如果有空间在队列中，任务将被排队。
- en: If none of these options are viable, the executor needs to evaluate if it can
    still create a new thread. If the number of running threads is less than the maximum
    size, a new thread is created. Otherwise, the task is assigned to the designated
    `hand-off` executor, if one is specified. In the absence of a designated `hand-off`
    executor, the task will be discarded.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这些选项都不可行，执行器需要评估它是否还可以创建一个新线程。如果正在运行的线程数少于最大大小，则创建一个新线程。否则，如果指定了指定的`hand-off`执行器，则任务将被分配给该执行器。如果没有指定`hand-off`执行器，则任务将被丢弃。
- en: 'The following diagram summarizes the whole process, showing how all the pieces
    fit together:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表总结了整个过程，展示了所有部件是如何结合在一起的：
- en: '![The bounded-queue thread pool](img/6232OS_02_03.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![有限队列线程池](img/6232OS_02_03.jpg)'
- en: 'The following is a sample configuration of a bounded-queue thread pool taken
    from the configuration file:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是从配置文件中摘取的有限队列线程池的示例配置：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Tip
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Downloading the example code**'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的账户下载您购买的所有Packt书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接通过电子邮件发送给您。
- en: 'The following table gives a short description of each attribute/element:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格简要描述了每个属性/元素：
- en: '| Attribute/element | Description |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 属性/元素 | 描述 |'
- en: '| --- | --- |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | Specifies the bean name of the created executor |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 指定创建的执行器的bean名称 |'
- en: '| `allow-core-timeout` | Specifies whether core threads time out or not; if
    `false`, only threads above the core size will time out |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| `allow-core-timeout` | 指定核心线程是否超时；如果为`false`，则只有超过核心大小的线程会超时 |'
- en: '| `core-threads` | Specifies the core thread pool size, which is smaller than
    the maximum pool size |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| `core-threads` | 指定核心线程池大小，它小于最大池大小 |'
- en: '| `max-threads` | Specifies the maximum thread pool size |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| `max-threads` | 指定最大线程池大小 |'
- en: '| `queue-length` | Specifies the executor queue length |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `queue-length` | 指定执行器队列长度 |'
- en: '| `keepalive-time` | Specifies the amount of time that threads beyond the core
    pool size should be kept running when idle |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `keepalive-time` | 指定超出核心池大小的线程在空闲时应该保持运行的时间 |'
- en: '| `thread-factory` | Specifies the bean name of a specific thread factory to
    use to create worker threads |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `thread-factory` | 指定用于创建工作线程的特定线程工厂的bean名称 |'
- en: '| `handoff-executor` | Specifies an executor to delegate tasks to in the event
    that a task cannot be accepted |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `handoff-executor` | 指定在任务无法接受时委托任务给执行器的执行器 |'
- en: Note
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Performance focus**'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能重点**'
- en: '**Queue size** and **pool size** values are a performance tradeoff, and the
    right balance needs to be found between the two. When using a small pool with
    a large queue, you minimize CPU usage, OS resources, and context-switching overhead.
    It can, however, produce an artificially low throughput. If tasks are strongly
    I/O bound (and thus frequently blocked), a system may be able to schedule time
    for more threads than you otherwise allow. The use of small queues generally requires
    larger pool sizes, which keep the CPUs busier but may encounter unacceptable scheduling
    overhead, which also decreases throughput.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**队列大小**和**池大小**值是性能权衡的结果，需要在两者之间找到合适的平衡。当使用小池子和大队列时，可以最小化CPU使用率、操作系统资源和上下文切换开销。然而，它可能会产生人为的低吞吐量。如果任务强烈依赖于I/O（因此经常阻塞），系统可能能够为比您允许的更多线程分配时间。使用小队列通常需要更大的池大小，这会使CPU更忙碌，但可能会遇到不可接受的调度开销，这也会降低吞吐量。'
- en: The blocking bounded-queue thread pool
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阻塞有界队列线程池
- en: The blocking bounded-queue thread pool has a very similar configuration to the
    bounded-queue thread pool; it has a slightly different workflow. The difference
    being, rather than attempting to hand off to the designated hand-off executor,
    the caller blocks until room becomes available in the queue.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 阻塞有界队列线程池的配置与有界队列线程池非常相似；它的工作流程略有不同。区别在于，而不是尝试将任务转交给指定的转交执行器，调用者会阻塞，直到队列中有空间可用。
- en: 'The flowchart for this thread pool is shown as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 该线程池的流程图如下所示：
- en: '![The blocking bounded-queue thread pool](img/6232OS_02_04.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![阻塞有界队列线程池](img/6232OS_02_04.jpg)'
- en: 'The following is an example configuration for a blocking bounded-queue thread
    pool:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个阻塞有界队列线程池的示例配置：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Please see the following table for the bounded-queue thread pool for a description
    of each attribute/element. The attributes/elements available for the blocking
    bounded-queue thread pool are shown in the following table:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅以下表格，了解有界队列线程池的每个属性/元素的描述。以下表格显示了阻塞有界队列线程池可用的属性/元素：
- en: '| Attribute/element | Description |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| 属性/元素 | 描述 |'
- en: '| --- | --- |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | Specifies the bean name of the created executor |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 指定创建的执行器的bean名称 |'
- en: '| `allow-core-timeout` | Specifies whether core threads may time out or not;
    if `false`, only threads above the core size will time out |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| `allow-core-timeout` | 指定核心线程是否可能超时；如果为`false`，则只有超过核心大小的线程会超时 |'
- en: '| `core-threads` | Specifies the core thread pool size, which is smaller than
    the maximum pool size |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| `core-threads` | 指定核心线程池的大小，它小于最大池大小 |'
- en: '| `max-threads` | Specifies the maximum thread pool size |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| `max-threads` | 指定最大线程池大小 |'
- en: '| `queue-length` | Specifies the executor queue length |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| `queue-length` | 指定执行器队列长度 |'
- en: '| `keepalive-time` | Specifies the amount of time that threads beyond the core
    pool size should be kept running when idle |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| `keepalive-time` | 指定超出核心池大小的线程在空闲时应保持运行的时间 |'
- en: '| `thread-factory` | Specifies the bean name of a specific thread factory to
    use to create worker threads |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| `thread-factory` | 指定用于创建工作线程的特定线程工厂的bean名称 |'
- en: The unbounded-queue thread pool
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无界队列线程池
- en: The unbounded-queue thread pool executor follows a simpler but more risky approach
    than the bounded thread pool; that is, it always accepts new tasks.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 无界队列线程池执行器比有界线程池采用更简单但更冒险的方法；也就是说，它总是接受新的任务。
- en: 'In practice, the unbounded thread pool has a core size and a queue with no
    upper limit. When a task is submitted, if the number of running threads is less
    than the core size, a new thread is created. Otherwise, the task is placed in
    a queue. If too many tasks are allowed to be submitted to this type of executor,
    an out-of-memory condition may occur. Have a look at the following flowchart:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，无界线程池有一个核心大小和一个无上限的队列。当提交任务时，如果正在运行的线程数小于核心大小，则创建一个新线程。否则，任务将被放置在队列中。如果允许提交太多任务给这种类型的执行器，可能会发生内存不足的情况。请查看以下流程图：
- en: '![The unbounded-queue thread pool](img/6232OS_02_05.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![无界队列线程池](img/6232OS_02_05.jpg)'
- en: 'Due to its inherent risk, unbounded thread pools are not included by default
    in the server configuration. We will provide a sample here, with only one recommendation:
    don''t try this at home, kids!'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于其固有的风险，无界线程池默认情况下不包括在服务器配置中。这里我们提供一个示例，只有一个建议：孩子们，在家不要尝试这个！
- en: '[PRE19]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you want to know more about the meaning of each thread pool element/attribute,
    you can refer to the bounded thread pool table.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于每个线程池元素/属性的含义，可以参考有界线程池表格。
- en: 'The attributes/elements available for the unbounded-queue thread pool are shown
    in the following table:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 无界队列线程池可用的属性/元素如下表所示：
- en: '| Attribute/element | Description |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 属性/元素 | 描述 |'
- en: '| --- | --- |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `name` | Specifies the bean name of the created executor |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `name` | 指定创建的执行器的bean名称 |'
- en: '| `max-threads` | Specifies the maximum thread pool size |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `max-threads` | 指定线程池的最大大小 |'
- en: '| `keepalive-time` | Specifies the amount of time that threads beyond the core
    pool size should be kept running when idle |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `keepalive-time` | 指定超出核心池大小的线程在空闲时应该保持运行的时间 |'
- en: '| `thread-factory` | Specifies the bean name of a specific thread factory to
    use to create worker threads |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `thread-factory` | 指定用于创建工作线程的特定线程工厂的bean名称 |'
- en: The queueless thread pool
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无界队列线程池
- en: As its name implies, the queueless thread pool is a thread pool executor with
    no queue. Basically, this executor short-circuits the logic of the bounded thread
    executor, as it does not attempt to store the task in a queue.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如其名所示，无队列线程池是一个没有队列的线程池执行器。基本上，这个执行器绕过了有界线程执行器的逻辑，因为它不尝试将任务存储在队列中。
- en: 'So, when a task is submitted, if the number of running threads is less than
    the maximum size, a new thread is created. Otherwise, the task is assigned to
    the designated `hand-off` executor if one is specified. Without any designated
    `hand-off`, the task will be discarded. Have a look at the following flowchart:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当提交任务时，如果正在运行的线程数少于最大大小，则创建一个新线程。否则，如果指定了指定的`hand-off`执行器，则任务将被分配给该执行器。如果没有指定任何指定的`hand-off`，则任务将被丢弃。请看以下流程图：
- en: '![The queueless thread pool](img/6232OS_02_06.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![无界队列线程池](img/6232OS_02_06.jpg)'
- en: 'Queueless executors are also not included by default in the configuration file.
    However, we will provide a sample configuration here:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 无队列执行器默认情况下也不包含在配置文件中。然而，我们在这里提供一个示例配置：
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The blocking queueless thread pool
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无阻塞无队列线程池
- en: The blocking queueless thread pool has a similar configuration to the queueless
    thread pool. Similar to the blocking queue thread pool, the difference is that
    rather than attempting to hand off to the designated hand-off executor, the caller
    blocks until room becomes available in the queue.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 无阻塞无队列线程池的配置与无队列线程池类似。与无阻塞队列线程池类似，区别在于它不是尝试将任务传递给指定的hand-off执行器，而是调用者会阻塞，直到队列中有空间可用。
- en: 'Have a look at the following diagram:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 请看以下图示：
- en: '![The blocking queueless thread pool](img/6232OS_02_07.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![无阻塞无队列线程池](img/6232OS_02_07.jpg)'
- en: 'Although not included in the default configuration file, here is an example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然它不包括在默认配置文件中，但这里有一个示例：
- en: '[PRE21]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The attributes/elements available for the unbounded-queue thread pool are `name`,
    `max-threads`, `keepalive-time`, and `thread-factory`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 无界队列线程池可用的属性/元素有`name`、`max-threads`、`keepalive-time`和`thread-factory`。
- en: The scheduled thread pool
  id: totrans-187
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调度线程池
- en: 'The server-scheduled thread pool is used for activities on the server side
    that require running periodically or with delays. It maps internally to a `java.util.concurrent.ScheduledThreadPoolExecutor`
    instance. Have a look at the following diagram:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端调度线程池用于需要定期运行或延迟执行的活动。它内部映射到`java.util.concurrent.ScheduledThreadPoolExecutor`实例。请看以下图示：
- en: '![The scheduled thread pool](img/6232OS_02_08.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![调度线程池](img/6232OS_02_08.jpg)'
- en: 'This type of executor is configured with the `scheduled-thread-pool` executor
    element, as follows:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的执行器使用`scheduled-thread-pool`执行器元素进行配置，如下所示：
- en: '[PRE22]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The scheduled thread pool is used by the `remoting` framework and by the HornetQ
    subsystem, which uses both a bounded JCA thread executor and a scheduled pool
    for delayed delivery.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 调度线程池被`remoting`框架和HornetQ子系统使用，后者使用有界JCA线程执行器和调度池进行延迟交付。
- en: Configuring application server logging
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置应用程序服务器日志
- en: 'Every application needs to trace logging statements. At the moment, there are
    several implementations of logging libraries for Java applications, the most popular
    ones are:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序都需要跟踪日志语句。目前，Java应用程序有几种日志库的实现，其中最流行的是：
- en: '**Log4j**: It is a flexible open source logging library from Apache. Log4j
    is widely used in the open source community, and it was the default logging implementation
    on earlier releases of JBoss AS.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Log4j**：它是一个来自 Apache 的灵活的开源日志库。Log4j 在开源社区中广泛使用，并且在 JBoss AS 的早期版本中是默认的日志实现。'
- en: '**Java SE logging libraries (JUL)**: It provides the logging classes and interfaces
    as part of the Java SE platform''s standard libraries.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Java SE 日志库（JUL）**：它作为 Java SE 平台标准库的一部分提供了日志类和接口。'
- en: Log4j and JUL have very similar APIs. They differ conceptually only in small
    details, but do more or less the same thing, with the exception of log4j, which
    has more features. You may or may not need these features.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Log4j 和 JUL 有非常相似的 API。它们在概念上只有细微的差别，但基本上做的是同样的事情，除了 Log4j，它有更多的功能。你可能需要也可能不需要这些功能。
- en: 'The JBoss logging framework is based on JUL, which is built around three main
    concepts: **loggers**, **handlers**, and **formatters**. These concepts allow
    developers to log messages according to their type and priority and to control
    where messages end up and how they look when they get there.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: JBoss 日志框架基于 JUL，围绕三个主要概念构建：**记录器**、**处理器**和**格式化器**。这些概念允许开发者根据消息的类型和优先级进行日志记录，并控制消息最终到达的位置以及它们的显示方式。
- en: The following diagram shows the logging cycle using the JUL framework. The application
    makes logging calls on the logger objects. These logger objects allocate the `LogRecord`
    objects, which are passed to the handler objects for publication. Both logger
    and handler may use the formatter to arrange the layout of logs and filter to
    decide whether they are interested in a particular log record.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了使用 JUL 框架的日志周期。应用程序在日志对象上执行日志调用。这些日志对象分配 `LogRecord` 对象，并将它们传递给处理对象以进行发布。日志和处理对象都可能使用格式化器来安排日志布局，并使用过滤器来决定它们是否对特定的日志记录感兴趣。
- en: 'Have a look at the following diagram:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下以下图表：
- en: '![Configuring application server logging](img/6232OS_02_09.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![配置应用程序服务器日志](img/6232OS_02_09.jpg)'
- en: Choosing your logging implementation
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择你的日志实现
- en: The WildFly/JBoss application server, through its releases, has used different
    frameworks to handle application server logs. In JBoss AS 5 and earlier, log4j
    was the default logging API used by the application server.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly/JBoss 应用程序服务器通过其版本，使用了不同的框架来处理应用程序服务器日志。在 JBoss AS 5 及更早版本中，log4j 是应用程序服务器使用的默认日志
    API。
- en: Since JBoss AS 6, the logging provider switched to JBoss's own implementation,
    which is based on the JDK 1.4 logging system. However, it provides several fixes
    and workarounds for many shortcomings in the default JDK implementation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 JBoss AS 6 开始，日志提供程序切换到了 JBoss 自有的实现，该实现基于 JDK 1.4 日志系统。然而，它为默认 JDK 实现中的许多缺陷提供了几个修复和解决方案。
- en: For example, the default implementation of `java.util.logging` provided in the
    JDK does not have per-web application logging, as the configuration is per-VM.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，JDK 中提供的 `java.util.logging` 默认实现没有按 Web 应用程序进行日志记录，因为配置是按虚拟机进行的。
- en: 'As a result, WildFly replaces the default JUL log manager implementation with
    its own implementation, which addresses these issues. The following diagram illustrates
    the modules that make up the WildFly 8 logging subsystem:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，WildFly 用自己的实现替换了默认的 JUL 日志管理器实现，以解决这些问题。以下图表说明了构成 WildFly 8 日志子系统的模块：
- en: '![Choosing your logging implementation](img/6232OS_02_10.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![选择你的日志实现](img/6232OS_02_10.jpg)'
- en: At the top of the hierarchy, there's the `org.jboss.logmanager` module, which
    is the top-level library that manages logs for the JBoss logging subsystem. Under
    `jboss` `logmanager`, you can find concrete implementations, such as the `org.jboss.logging`
    and `org.jboss.log4j.logmanager` modules. By default, the application server uses
    the former module (`org.jboss.logging`), which is implemented in turn by `org.jboss.as.logging`
    to manage your logs inside the application server. However, if you want to switch
    to the `log4j` implementation, the `org.jboss.log4j.logmanager` module is what
    you need (in the last section of this chapter, we will include an example of how
    to use `log4j` in your application).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构的顶部，有 `org.jboss.logmanager` 模块，这是管理 JBoss 日志子系统的顶级库。在 `jboss` `logmanager`
    之下，你可以找到具体的实现，例如 `org.jboss.logging` 和 `org.jboss.log4j.logmanager` 模块。默认情况下，应用程序服务器使用前者模块（`org.jboss.logging`），该模块通过
    `org.jboss.as.logging` 实现，以管理应用程序服务器内的日志。但是，如果你想切换到 `log4j` 实现，你需要 `org.jboss.log4j.logmanager`
    模块（在本章的最后部分，我们将包括如何在应用程序中使用 `log4j` 的示例）。
- en: Note
  id: totrans-209
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: WildFly is not limited to JBoss logging or log4j. You can use any logging library,
    including slf4j or commons logging.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly 不限于 JBoss 日志或 log4j。你可以使用任何日志库，包括 slf4j 或 commons logging。
- en: Configuring the logging subsystem
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置日志子系统
- en: 'The logging subsystem contains a set of log handlers out of the box. A handler
    object takes log messages from a logger and exports them. For example, it might
    write them to a console or a file, send them to a network logging service, or
    forward them to an OS log. By default, the following handlers are defined:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 日志子系统自带一组日志处理器。处理器对象从记录器接收日志消息并将其导出。例如，它可能将它们写入控制台或文件，发送到网络日志服务，或将它们转发到操作系统日志。默认情况下，定义了以下处理器：
- en: '`console-handler`'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`console-handler`'
- en: '`periodic-rotating-file-handler`'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`periodic-rotating-file-handler`'
- en: '`size-rotating-file-handler`'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size-rotating-file-handler`'
- en: '`async-handler`'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`async-handler`'
- en: '`syslog-handler`'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syslog-handler`'
- en: '`custom-handler`'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`custom-handler`'
- en: The console-handler
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`console-handler`'
- en: 'The `console-handler` defines a handler that simply writes log messages to
    the console, as follows:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`console-handler` 定义了一个处理器，它简单地将日志消息写入控制台，如下所示：'
- en: '[PRE23]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The optional `autoflush` attribute determines if buffered logs are flushed automatically.
    The default value for this option is `true`.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的 `autoflush` 属性确定是否自动刷新缓冲日志。此选项的默认值为 `true`。
- en: 'The `level` element defines the lowest log level associated with the handler,
    which means that anything with this log level and a higher value will be logged.
    The full range of log levels, from lowest to highest, are: `OFF`, `FINEST`, `FINER`,
    `FINE`, `CONFIG`, `INFO`, `WARNING`, `SEVERE`, and `ALL`.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`level` 元素定义了与处理器关联的最低日志级别，这意味着任何具有此日志级别和更高值的都将被记录。日志级别的完整范围，从最低到最高，为：`OFF`、`FINEST`、`FINER`、`FINE`、`CONFIG`、`INFO`、`WARNING`、`SEVERE`
    和 `ALL`。'
- en: The `formatter` element provides support to format `LogRecords`. The log formatting
    inherits the same pattern strings as that of the layout pattern of `log4j`, which
    was in turn inspired by dear old C's `printf` function. Check the log4j documentation
    at [http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`formatter` 元素为格式化 `LogRecords` 提供支持。日志格式化继承了 `log4j` 布局模式的相同模式字符串，而 `log4j`
    又受到了亲爱的旧C语言 `printf` 函数的启发。请参阅 [http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html](http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html)
    的 log4j 文档。'
- en: Here, we will just mention that `%d{HH:mm:ss,SSS}` outputs the date of the logging
    event using the conversion included in brackets.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们只是提到 `%d{HH:mm:ss,SSS}` 使用括号中包含的转换输出日志事件的日期
- en: The string `%-5p` outputs the priority of the logging event
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 `%-5p` 输出日志事件的优先级
- en: The string `[%c]` is used to output the category of the logging event
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 `[%c]` 用于输出日志事件的类别
- en: The string `(%t)` outputs the thread that generated the logging event
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 `(%t)` 输出生成日志事件的线程
- en: The string `%s` outputs the log message
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串 `%s` 输出日志消息
- en: Finally, the `%n` string outputs the platform-dependent line separator character
    or characters
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，字符串 `%n` 输出平台相关的行分隔符字符或字符
- en: The periodic-rotating-file-handler
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`periodic-rotating-file-handler`'
- en: The `periodic-rotating-file-handler` defines a handler that writes to a file
    and rotates the log after a time period derived from the given suffix string,
    which should be in a format understood by `java.text.SimpleDateFormat`.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`periodic-rotating-file-handler` 定义了一个处理器，该处理器将写入文件，并在从给定后缀字符串派生的周期后旋转日志，该后缀字符串应格式为
    `java.text.SimpleDateFormat` 所理解。'
- en: 'Here''s the definition of it:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是它的定义：
- en: '[PRE24]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This handler introduces the file element containing the path, which is the actual
    filename and its `relative-to` position. In our case, the relative position corresponds
    to the `jboss.server.log.dir` application server parameter.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此处理器引入了包含路径的文件元素，这是实际的文件名及其 `relative-to` 位置。在我们的例子中，相对位置对应于 `jboss.server.log.dir`
    应用服务器参数。
- en: Note
  id: totrans-236
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: With the default suffix configuration, logs are rolled at 12 PM. By changing
    the value of `SimpleDateFormat`, you can also change the period when logs are
    rotated, for example, the suffix `yyyy-MM-dd-HH` will rotate the logs every hour.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用默认的后缀配置，日志在中午12点滚动。通过更改 `SimpleDateFormat` 的值，你还可以更改日志滚动的周期，例如，后缀 `yyyy-MM-dd-HH`
    将每小时滚动日志。
- en: The size-rotating-file-handler
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`size-rotating-file-handler`'
- en: The `size-rotating-file-handler` defines a handler that writes to a file, rotating
    the log after the size of the file grows beyond a certain point. It also keeps
    a fixed number of backups.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`size-rotating-file-handler` 定义了一个处理器，该处理器将日志写入文件，当文件大小超过某个点时进行日志轮转。它还保留一定数量的备份。'
- en: 'There''s no size handler defined in the standard configuration. However, we
    can find out its basic configuration from the `JBOSS_HOME/docs/schema/jboss-as-logging_2_0.xsd`
    file. Have a look at the following code:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 标准配置中没有定义大小处理器。然而，我们可以从 `JBOSS_HOME/docs/schema/jboss-as-logging_2_0.xsd` 文件中找到其基本配置。请查看以下代码：
- en: '[PRE25]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The async-handler
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 异步处理器
- en: 'The `async-handler` is a composite handler that attaches to other handlers
    to produce asynchronous logging events. Behind the scenes, this handler uses a
    bounded queue to store events. Every time a log is emitted, the asynchronous handler
    appends the log into the queue and returns immediately. Here''s an example of
    asynchronous logging for the `FILE` appender:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`async-handler` 是一个复合处理器，它附加到其他处理器上以产生异步日志事件。在幕后，此处理器使用一个有界队列来存储事件。每次发出日志时，异步处理器将日志追加到队列中并立即返回。以下是对
    `FILE` 追加器的异步日志示例：'
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In this handler, we also specify the size of the queue, where events are sent,
    and the action to take when the `async` queue overflows. You can opt between `block`,
    causing the calling thread to be blocked, and `discard`, causing the message to
    be discarded.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在此处理器中，我们还指定了事件发送到的队列大小，以及当 `async` 队列溢出时要采取的操作。您可以选择 `block`，这将导致调用线程被阻塞，或者选择
    `discard`，这将导致消息被丢弃。
- en: Note
  id: totrans-246
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**When should I use the asynchronous handler?**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**我应该何时使用异步处理器？**'
- en: The asynchronous handler produces a substantial performance benefit to applications
    that are heavily I/O bound. Conversely, CPU-bound applications may not benefit
    from asynchronous logging, as it will put additional stress on the CPU.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 异步处理器为大量 I/O 绑定的应用程序提供了显著的性能优势。相反，CPU 绑定应用程序可能不会从异步日志中受益，因为它会给 CPU 带来额外的压力。
- en: The syslog-handler
  id: totrans-249
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: syslog处理器
- en: 'A `syslog-handler` can be used to write logs to a remote logging server. This
    allows multiple applications to send their log messages to the same server, where
    they can all be parsed together. Both RFC3164 and RFC5424 formats are supported.
    Here is an example of a `syslog-handler`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `syslog-handler` 将日志写入远程日志服务器。这允许多个应用程序将它们的日志消息发送到同一个服务器，在那里它们可以一起解析。支持
    RFC3164 和 RFC5424 格式。以下是一个 `syslog-handler` 的示例：
- en: '[PRE27]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Custom handlers
  id: totrans-252
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义处理器
- en: So far, we have seen just a few basic log handlers, which are usually included
    in your server configuration. If you need a more advanced approach to managing
    your logs, you can define a custom logging handler. In order to add a custom handler,
    you need to define a class that extends the `java.util.logging.Handler` interface
    and then override its abstract methods. For example, the following class, named
    `JdbcLogger`, is used to write the logs to a database (full code is available
    at [http://community.jboss.org/wiki/CustomLogHandlersOn701](http://community.jboss.org/wiki/CustomLogHandlersOn701)).
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看到了一些基本的日志处理器，这些处理器通常包含在您的服务器配置中。如果您需要更高级的日志管理方法，您可以定义一个自定义日志处理器。为了添加自定义处理器，您需要定义一个扩展
    `java.util.logging.Handler` 接口的类，并重写其抽象方法。例如，以下名为 `JdbcLogger` 的类用于将日志写入数据库（完整代码可在
    [http://community.jboss.org/wiki/CustomLogHandlersOn701](http://community.jboss.org/wiki/CustomLogHandlersOn701)
    找到）。
- en: Note
  id: totrans-254
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that, although this article was written for JBoss AS 7, it remains valid
    for WildFly 8.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管这篇文章是为 JBoss AS 7 编写的，但它对 WildFly 8 仍然有效。
- en: 'Have a look at the following code snippet:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看以下代码片段：
- en: '[PRE28]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Once compiled, this class needs to be packaged in an archive (for example,
    `logger.jar`) and installed as a module in the application server. We will name
    the module `com.JDBCLogger`, which requires the following structure under the
    `modules` folder:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编译，此类需要打包到一个存档（例如，`logger.jar`）中，并在应用程序服务器中作为模块安装。我们将模块命名为 `com.JDBCLogger`，它需要在
    `modules` 文件夹下具有以下结构：
- en: '![Custom handlers](img/6232OS_02_11.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![自定义处理器](img/6232OS_02_11.jpg)'
- en: 'The label **Path to be created** shows the directory structure under which
    we will place the `logger.jar` archive and its configuration file (`module.xml`),
    which follows here:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 标签 **Path to be created** 显示了我们将在其中放置 `logger.jar` 存档及其配置文件（`module.xml`）的目录结构，如下所示：
- en: '[PRE29]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that this module has a dependency on another module, `com.mysql`. In the
    next chapter, we will show how to connect to a database after installing the appropriate
    module.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，此模块依赖于另一个模块`com.mysql`。在下一章中，我们将展示如何在安装适当的模块后连接到数据库。
- en: 'We are almost done. Now, insert the handler in the logging subsystem, which
    contains within its properties the database connection strings and the statement
    that will be used to insert logs into the database:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们几乎完成了。现在，将处理程序插入到包含其属性（包括数据库连接字符串和用于将日志插入数据库的语句）的日志子系统：
- en: '[PRE30]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The new `handler`, named `DB`, is enlisted in the `root-logger` to collect
    all logging statements that have a priority of `INFO` or higher. Before testing
    the logger, don''t forget to create the required tables on your MySQL database,
    as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 新的`handler`，命名为`DB`，被添加到`root-logger`中，以收集所有优先级为`INFO`或更高的日志语句。在测试日志记录器之前，不要忘记在您的MySQL数据库上创建所需的表，如下所示：
- en: '[PRE31]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If you have carefully followed all the required steps, you will notice that
    `log_table` contains the logging events that have been triggered since server
    startup. Have a look at the following screenshot:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已仔细遵循所有必需的步骤，您将注意到`log_table`包含自服务器启动以来触发的日志事件。查看以下屏幕截图：
- en: '![Custom handlers](img/6232OS_02_12.jpg)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![自定义处理器](img/6232OS_02_12.jpg)'
- en: Configuring loggers
  id: totrans-269
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置日志记录器
- en: 'A logger object is used to log messages for a specific system or application
    components. Loggers are normally named using a hierarchical dot-separated namespace.
    Logger names can be arbitrary strings, but they should normally be based on the
    package name or class name of the logged component. For example, the logger instructs
    the logging system to emit logging statements for the package `com.sample` if
    they have the log level `WARN` or higher:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 日志记录器对象用于记录特定系统或应用程序组件的消息。日志记录器通常使用分层点分隔的命名空间命名。日志记录器名称可以是任意字符串，但通常应基于记录组件的包名或类名。例如，日志记录器指示日志系统为`com.sample`包生成日志语句，如果它们的日志级别为`WARN`或更高：
- en: '[PRE32]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'At the top of the hierarchy, there''s the `root-logger`. There are two important
    things to note about `root-logger`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在层次结构的顶部，有`root-logger`。关于`root-logger`有两个重要事项需要注意：
- en: It always exists
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它始终存在
- en: It cannot be retrieved by name
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不能通过名称检索
- en: 'In the default server configuration, the root-logger defines two handlers that
    are connected to `CONSOLE` and to the `FILE` handler:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在默认服务器配置中，`root-logger`定义了两个与`CONSOLE`和`FILE`处理器连接的处理程序：
- en: '[PRE33]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Per-deployment logging
  id: totrans-277
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 每个部署的日志记录
- en: 'WildFly has the ability to configure per-deployment logging. This is enabled
    by default. This means that if you add a logging configuration file to your deployment,
    its configuration will be used to log for that deployment. The valid logging configuration
    files are as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: WildFly具有配置每个部署日志记录的能力。默认情况下，这是启用的。这意味着如果您将日志配置文件添加到您的部署中，其配置将用于该部署的日志记录。有效的日志配置文件如下：
- en: '`logging.properties`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logging.properties`'
- en: '`jboss-logging.properties`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss-logging.properties`'
- en: '`log4j.properties`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.properties`'
- en: '`log4j.xml`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`log4j.xml`'
- en: '`jboss-log4j.xml`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`jboss-log4j.xml`'
- en: If you package your application into an EAR, your logging configuration file
    should go into the `META-INF` directory. If you are packaging your application
    into a JAR or WAR, then it can be placed into either the `META-INF` directory
    or the `WEB-INF` directory.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将应用程序打包到EAR中，您的日志配置文件应放入`META-INF`目录。如果您将应用程序打包到JAR或WAR中，则可以将其放置在`META-INF`目录或`WEB-INF`目录中。
- en: 'Should you want to disable per-deployment logging, you will need to set the
    `use-deployment-logging-config` value to `false`. Have a look at the following
    code snippet:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想禁用每个部署的日志记录，您需要将`use-deployment-logging-config`的值设置为`false`。查看以下代码片段：
- en: '[PRE34]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Note
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The system property `org.jboss.as.logging.per-deployment` has been deprecated
    in WildFly 8\. You should use `use-deployment-logging-config` instead.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在WildFly 8中，系统属性`org.jboss.as.logging.per-deployment`已被弃用。您应使用`use-deployment-logging-config`代替。
- en: Bypassing container logging
  id: totrans-289
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 绕过容器日志
- en: 'You may, for some reason, wish to bypass container logging altogether. To do
    this, add the `add-logging-api-dependencies` property to your logging configuration
    and set its value to `false`. This will disable the adding of the implicit server
    logging dependencies, as shown in the following code:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 由于某些原因，您可能希望完全绕过容器日志记录。为此，将`add-logging-api-dependencies`属性添加到您的日志配置中，并将其值设置为`false`。这将禁用隐式服务器日志依赖项的添加，如下面的代码所示：
- en: '[PRE35]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: To bypass logging on per-application basis only, you will need to use the `jboss-deployment-structure.xml`
    file to exclude the logging subsystem. We will cover the `jboss-deployment-structure.xml`
    file in detail in [Chapter 6](ch06.html "Chapter 6. Application Structure and
    Deployment"), *Application Structure and Deployment*.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 要仅针对每个应用程序绕过日志记录，您需要使用 `jboss-deployment-structure.xml` 文件来排除日志子系统。我们将在第 6 章[“应用程序结构和部署”](ch06.html
    "Chapter 6. Application Structure and Deployment")中详细介绍 `jboss-deployment-structure.xml`
    文件。
- en: Summary
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we've gone through the basics of the application server configuration,
    which is now composed of a single monolithic file that contains the configuration
    for all the installed services.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了应用程序服务器配置的基础知识，现在它由一个包含所有已安装服务配置的单个单体文件组成。
- en: Although this main configuration file will be your main point of reference to
    get a full understanding of the WildFly infrastructure, we must stress the importance
    of modifying it via one of the management interfaces.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个主要配置文件将是您了解 WildFly 基础设施的主要参考点，但我们必须强调通过其中一个管理接口修改它的重要性。
- en: We have examined each of the sections within the thread pool configuration in
    detail. We have also seen that the thread pool relies on the Java Standard Edition
    Thread Executor API to define a set of pools, and that these pools are used by
    the application servers' core services.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经详细检查了线程池配置中的每个部分。我们还看到线程池依赖于 Java 标准版线程执行器 API 来定义一系列池，并且这些池被应用程序服务器的核心服务所使用。
- en: Next, we discussed the JBoss logging framework, which is built on top of the
    Java Util Logging framework and addresses some known shortcomings of JUL. We described
    how to configure per-application logging in your applications.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们讨论了建立在 Java Util Logging 框架之上的 JBoss 日志框架，它解决了 JUL 的某些已知缺点。我们描述了如何在您的应用程序中配置每个应用程序的日志记录。
- en: In the next chapter, we will take a look at some core enterprise service configurations,
    such as the datasource and messaging subsystems. These services are the backbone
    of many enterprise applications.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看一些核心企业服务配置，例如数据源和消息子系统。这些服务是许多企业应用程序的骨架。
