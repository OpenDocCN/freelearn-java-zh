- en: Chapter 8. Running Batch Jobs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。运行批处理作业
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下菜谱：
- en: Installing and configuring Spring Batch
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Spring Batch
- en: Creating a job
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建作业
- en: Executing a job from the command line
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从命令行执行作业
- en: Executing a job from a controller method
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从控制器方法中执行作业
- en: Using job parameters
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用作业参数
- en: Executing a system command
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行系统命令
- en: Scheduling a job
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调度作业
- en: Creating a read/process/write step
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建读取/处理/写入步骤
- en: Reading an XML file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 读取XML文件
- en: Generating a CSV file
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成CSV文件
- en: Reading from a database
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从数据库读取
- en: Unit testing batch jobs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试批处理作业
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: A **batch job** is a task executed outside the normal web application workflow
    (receiving an HTTP request and sending back an HTTP response). It can be executed
    by the web server as a separate process. It can also be launched directly from
    the command line.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**批处理作业**是在正常Web应用工作流程之外执行的任务（接收HTTP请求并返回HTTP响应）。它可以由Web服务器作为单独的进程执行。也可以直接从命令行启动。'
- en: 'Typically, a batch job either:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，批处理作业要么：
- en: Imports or exports data at a scheduled time. For example, importing a CSV file
    in the database every night.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在预定时间导入或导出数据。例如，每晚在数据库中导入CSV文件。
- en: Executes some code asynchronously to avoid long page loads. For example, processing
    a video uploaded by the user or generating a big file that will be downloaded
    by the user.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 异步执行一些代码以避免长时间页面加载。例如，处理用户上传的视频或生成用户将要下载的大文件。
- en: 'Spring Batch provides a structure to define, run, and monitor batch jobs. A
    **Job** is defined as a sequence of steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch提供了一个结构来定义、运行和监控批处理作业。一个**作业**被定义为一系列步骤：
- en: '![Introduction](img/5807OS_08_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/5807OS_08_01.jpg)'
- en: A **Job Instance** is the combination of a **job** and some **parameters**.
    For example, the day's date and the name of the file to process. A **Job Execution**
    is created for a job instance. If the job execution fails, another job execution
    can be created for the same job instance.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业实例**是**作业**和某些**参数**的组合。例如，日期和要处理的文件名。为作业实例创建一个**作业执行**。如果作业执行失败，可以为同一个作业实例创建另一个作业执行。'
- en: '![Introduction](img/5807OS_08_02.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/5807OS_08_02.jpg)'
- en: 'A **Job Execution** generates a **Step Execution** for each step of the job.
    If a step execution fails, another step execution can be created for that same
    step:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**作业执行**为作业的每个步骤生成一个**步骤执行**。如果步骤执行失败，可以为同一个步骤创建另一个步骤执行：'
- en: '![Introduction](img/5807OS_08_03.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![简介](img/5807OS_08_03.jpg)'
- en: Installing and configuring Spring Batch
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Spring Batch
- en: Spring automatically saves some metadata (start time, end time, and status)
    about jobs and their steps in a job repository, which consists of several database
    tables. In this recipe, we'll create these tables. We will also create a Spring
    configuration class dedicated to batch jobs.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Spring会自动将有关作业及其步骤的元数据（开始时间、结束时间和状态）保存到一个作业仓库中，该仓库由几个数据库表组成。在这个菜谱中，我们将创建这些表。我们还将创建一个专门用于批处理作业的Spring配置类。
- en: How to do it…
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here are the steps to install and configure Spring Batch:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是安装和配置Spring Batch的步骤：
- en: 'Add the Maven dependencies for Spring Batch in `pom.xml`:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Spring Batch的Maven依赖项：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the Maven dependencies for Spring JDBC and Spring Transaction in `pom.xml`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加Spring JDBC和Spring Transaction的Maven依赖项：
- en: '[PRE1]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the Maven dependency for your database in `pom.xml`:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`中添加你的数据库的Maven依赖项：
- en: '[PRE2]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the database, create the tables for Spring Batch's job repository. The SQL
    code can be found inside the spring-batch-core dependency in the `org.springframework.batch.core`
    package. It's also available online at [https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core](https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中，创建Spring Batch作业仓库的表。SQL代码可以在`org.springframework.batch.core`包中的spring-batch-core依赖项内部找到。它也可以在[https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core](https://github.com/spring-projects/spring-batch/tree/master/spring-batch-core/src/main/resources/org/springframework/batch/core)在线找到。
- en: Create a Java package for your Spring Batch classes. For example, `com.spring_cookbook.batch`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的Spring Batch类创建一个Java包。例如，`com.spring_cookbook.batch`。
- en: 'Create a Spring configuration class for Spring Batch with the `@EnableBatchProcessing`
    annotation:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`@EnableBatchProcessing`注解为Spring Batch创建一个Spring配置类：
- en: '[PRE3]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a `DataSource` bean with the database connection details to the configuration
    class:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含数据库连接详情的`DataSource` bean添加到配置类中：
- en: '[PRE4]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works…
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the configuration class, the `@EnableBatchProcessing` annotation enables
    Spring Batch and provides reasonable defaults for batch jobs, which can be overridden
    if necessary (the default `JobLauncher` object, the default `TransactionManager`
    object, and so on).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置类中，`@EnableBatchProcessing`注解启用Spring Batch并为批处理作业提供合理的默认值，如果需要可以覆盖（默认的`JobLauncher`对象、默认的`TransactionManager`对象等）。
- en: Creating a job
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建作业
- en: We'll create a job that will simply execute some Java code. It will be a job
    with only one step. The step will be a `Tasklet` object (a single task, as opposed
    to a read-process-write step, which we'll cover later). We will execute this job
    in two different ways in the next two recipes.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个仅包含一个步骤的作业。该步骤将是一个`Tasklet`对象（与稍后将要介绍的读取-处理-写入步骤相对，它是一个单独的任务）。我们将在接下来的两个菜谱中以两种不同的方式执行此作业。
- en: How to do it…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Create a `Tasklet` class, which you will use to define a step and the job:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`Tasklet`类，您将使用它来定义步骤和作业：
- en: 'Create the `Task1` class implementing `Tasklet`:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建实现`Tasklet`的`Task1`类：
- en: '[PRE5]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the `Task1` class, add an `execute()` method with the code to be executed
    for the job:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Task1`类中，添加一个包含作业要执行的代码的`execute()`方法：
- en: '[PRE6]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the configuration class, add an autowired `JobBuilderFactory` attribute
    and an autowired `StepBuilderFactory` attribute:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置类中，添加一个自动装配的`JobBuilderFactory`属性和一个自动装配的`StepBuilderFactory`属性：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Define the `step1` bean, which will execute our code, from the `Task1` class:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义将执行我们的代码的`step1` bean，来自`Task1`类：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Define the `job1` bean that will execute `step1`:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义将执行`step1`的`job1` bean：
- en: '[PRE9]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理…
- en: We defined a `job1` job executing the `step1` step, which will call the `execute()`
    method in the `Task1` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个名为`job1`的作业，它将执行`step1`步骤，这将调用`Task1`类中的`execute()`方法。
- en: There's more…
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'To execute more than one step, use the `next()` method in the job definition:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行多个步骤，请在作业定义中使用`next()`方法：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Executing a job from the command line
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从命令行执行作业
- en: A simple and robust way to execute a job is to use the command-line interface.
    This allows you to use a standard `cron` job (use the `AT` command on Windows)
    to schedule it, so that the job will be executed even if the web application is
    down. It's also convenient for testing and debugging a job.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 使用命令行界面执行作业是一种简单且健壮的方法。这允许您使用标准的`cron`作业（在Windows上使用`AT`命令）来安排它，这样即使Web应用程序关闭，作业也会被执行。它也方便用于测试和调试作业。
- en: Getting Ready
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the job defined in the *Creating a job* recipe.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*创建作业*菜谱中定义的作业。
- en: How to do it…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to execute the job from the command line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤从命令行执行作业：
- en: 'Declare the `maven-assembly-plugin` in `pom.xml` (under `build`/`plugins`):'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pom.xml`（在`build/plugins`下）中声明`maven-assembly-plugin`：
- en: '[PRE11]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Generate a JAR file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成JAR文件：
- en: '[PRE12]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Execute the job by running the JAR file generated in the `target` folder, with
    the class where the job is defined (`BatchConfig`) and the job name (`job1`) as
    arguments:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过运行在`target`文件夹中生成的JAR文件来执行作业，其中包含定义作业的类（`BatchConfig`）和作业名称（`job1`）作为参数：
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The console output should look like this:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台输出应如下所示：
- en: '[PRE14]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: There's more…
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'A job can be executed only once for a given set of parameters. To be able to
    execute the job again, just add a parameter using the `parameterName=parameterValue`
    syntax:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 对于给定的参数集，作业只能执行一次。要再次执行作业，只需使用`parameterName=parameterValue`语法添加一个参数：
- en: '[PRE15]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In this case, the console output will look like this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，控制台输出将如下所示：
- en: '[PRE16]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When testing and debugging the job, you can use a Unix timestamp to automatically
    get a different parameter value each time:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试和调试作业时，您可以使用Unix时间戳自动获取每次不同的参数值：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A job can be also be executed directly without having to generate a JAR file
    first:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作业也可以直接执行，而无需首先生成JAR文件：
- en: '[PRE18]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Executing a job from a controller method
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从控制器方法中执行作业
- en: It's convenient to launch a job from a controller method when that job is triggered
    by a user action. For example, launching a job to process a video just uploaded
    by the user.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当作业由用户操作触发时，从控制器方法启动作业很方便。例如，启动一个处理用户刚刚上传的视频的作业。
- en: Getting ready
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the job defined in the *Creating a job* recipe.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在*创建作业*菜谱中定义的作业。
- en: How to do it…
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to execute the job from a controller method:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按以下步骤从控制器方法中执行作业：
- en: 'Add the Spring Batch configuration class to the `getServletConfigClasses()`method
    in your class extending `AbstractAnnotationConfigDispatcherServletInitializer`:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Spring Batch 配置类添加到扩展 `AbstractAnnotationConfigDispatcherServletInitializer`
    的类中的 `getServletConfigClasses()` 方法：
- en: '[PRE19]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In your controller class, add a `JobLauncher` attribute and `Job` attribute
    both autowired:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的控制器类中，添加一个自动装配的 `JobLauncher` 属性和 `Job` 属性：
- en: '[PRE20]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In the controller method, define the job parameters and launch the job:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制器方法中，定义作业参数并启动作业：
- en: '[PRE21]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works…
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: We declared `BatchConfig` in the `ServletInitializer` class to make our Spring
    Batch configuration available to the controller methods.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `ServletInitializer` 类中声明了 `BatchConfig`，以便将我们的 Spring Batch 配置提供给控制器方法。
- en: In the controller method, the job parameters are the same as those in the command
    line.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器方法中，作业参数与命令行中的参数相同。
- en: Using job parameters
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用作业参数
- en: In this recipe, you'll learn how to retrieve and use a job parameter value in
    `Tasklet`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何在 `Tasklet` 中检索和使用作业参数值。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the job defined in the *Creating a job* recipe.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在 *创建作业* 菜谱中定义的作业。
- en: How to do it…
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to use the job parameters:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用作业参数：
- en: 'In the `Task1` class, add `@StepScope` to the `execute()` method:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Task1` 类中，将 `@StepScope` 添加到 `execute()` 方法：
- en: '[PRE22]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the `execute()` method, retrieve a job parameter value by using the job
    parameter name:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `execute()` 方法中，通过使用作业参数名称来检索作业参数值：
- en: '[PRE23]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the job with a parameter named `test`:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用名为 `test` 的参数运行作业：
- en: '[PRE24]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `String` test will contain the `hello` parameter value passed on the command
    line. This recipe will also work if the job is launched from a controller method.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`String` 测试将包含通过命令行传递的 `hello` 参数值。如果作业是从控制器方法启动的，这个菜谱也将工作。'
- en: Executing a system command
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行系统命令
- en: A step can consist of just an execution of a system command. Spring Batch provides
    a convenient class for this, `SystemCommandTasklet`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一个步骤可以仅由一个系统命令的执行组成。Spring Batch 提供了一个方便的类来完成这个任务，`SystemCommandTasklet`。
- en: Getting ready
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We'll use the job defined in the *Creating a job* recipe.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在 *创建作业* 菜谱中定义的作业。
- en: How to do it…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'In Spring Batch''s configuration file, add a `SystemCommandTasklet` bean. Declare
    the system command to be executed (here, we used the touch Unix command to create
    an empty file), the directory to execute it from, and the maximum time allowed
    for its execution:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Spring Batch 的配置文件中，添加一个 `SystemCommandTasklet` 实例。声明要执行的系统命令（在这里，我们使用了 touch
    Unix 命令来创建一个空文件），执行它的目录以及允许其执行的最大时间：
- en: '[PRE25]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works…
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `SystemCommandTasklet` class will execute a command from the working directory
    and kill the process if it exceeds the timeout value.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`SystemCommandTasklet` 类将在工作目录中执行一个命令，如果它超过了超时值，则会终止进程。'
- en: There's more…
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: For a more advanced use of system commands (for example, to get the output of
    the system command) extend `SystemCommandTasklet` and override its `execute()`
    method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更高级地使用系统命令（例如，获取系统命令的输出），扩展 `SystemCommandTasklet` 并重写其 `execute()` 方法。
- en: Scheduling a job
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安排作业
- en: Some jobs need to be executed regularly-every night, every hour, and so on.
    Spring makes this easy with the `@Scheduled` annotation.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 一些作业需要定期执行——每晚、每小时等。Spring 通过 `@Scheduled` 注解使这变得简单。
- en: Getting ready
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the job defined in the *Creating a job* recipe.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用在 *创建作业* 菜谱中定义的作业。
- en: How to do it…
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to schedule the job:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤安排作业：
- en: 'If it''s not done already, add the Spring Batch configuration class to the
    `getServletConfigClasses()`method in your class extending `AbstractAnnotationConfigDispatcherServletInitializer`:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未完成，请将 Spring Batch 配置类添加到扩展 `AbstractAnnotationConfigDispatcherServletInitializer`
    的类中的 `getServletConfigClasses()` 方法：
- en: '[PRE26]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add the `@EnableScheduling` annotation to the Spring Batch configuration class:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `@EnableScheduling` 注解添加到 Spring Batch 配置类：
- en: '[PRE27]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add an autowired `JobLauncher` field:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个自动装配的 `JobLauncher` 字段：
- en: '[PRE28]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add a method annotated with `@Scheduled` with a `fixedDelay` attribute in ms:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个带有 `fixedDelay` 属性（以毫秒为单位）的 `@Scheduled` 注解的方法：
- en: '[PRE29]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In that method, run the job:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那个方法中，运行作业：
- en: '[PRE30]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works…
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The job will start getting executed again and again with a 10-second (10000
    ms) interval as soon as the web application is deployed. The `job` parameter with
    the `new Date()`value is used to set a different parameter value for each launch.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦部署了 Web 应用程序，作业将立即以 10 秒（10000 毫秒）的间隔重复执行。使用带有 `new Date()` 值的 `job` 参数为每次启动设置不同的参数值。
- en: There's more…
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'The `fixedDelay` attribute sets a delay of 10 seconds after a job has finished
    its execution before launching the next one. To actually run a job every 10 seconds,
    use `fixedRate`:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`fixedDelay`属性在作业执行完成后设置了一个10秒的延迟，然后启动下一个作业。要实际每10秒运行一个作业，请使用`fixedRate`：'
- en: '[PRE31]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'It''s also possible to use a regular `cron` expression:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以使用一个常规的`cron`表达式：
- en: '[PRE32]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Creating a read/process/write step
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个读取/处理/写入步骤
- en: 'A read/process/write step is a common type of step where some data is read
    somewhere, processed in some way, and finally, saved somewhere else. In this recipe,
    we''ll read a CSV file of users, increment their age, and save the modified users
    in a database as shown in the following image:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 读取/处理/写入步骤是一种常见的步骤类型，其中某些数据在某处读取，以某种方式处理，最后保存在某处。在这个菜谱中，我们将读取用户的CSV文件，增加他们的年龄，并将修改后的用户保存到数据库中，如下面的图像所示：
- en: '![Creating a read/process/write step](img/5807OS_08_04.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个读取/处理/写入步骤](img/5807OS_08_04.jpg)'
- en: Getting ready
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This is our CSV file of users, `input_data.txt`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们的用户CSV文件，`input_data.txt`：
- en: '[PRE33]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'For each line of the CSV file, we''ll create a `User` object. So, make sure
    that the `User` class exists:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CSV文件的每一行，我们将创建一个`User`对象。所以，请确保`User`类存在：
- en: '[PRE34]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Each `User` object will be saved in the database. Make sure that the `user`
    table exists:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`User`对象都将保存在数据库中。请确保`user`表存在：
- en: '[PRE35]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How to do it…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to process the CSV file:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤处理CSV文件：
- en: 'In the Spring Batch configuration class, add a method returning a `LineMapper`
    object, which generates an `User` object from a line in the CSV file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Spring Batch配置类中，添加一个返回`LineMapper`对象的方法，该对象从CSV文件中的一行生成`User`对象：
- en: '[PRE36]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add a `reader()` method returning a `FlatFileItemReader` object, which will
    read a CSV file (whose path is the file path of the CSV file), and use the previously
    defined `LineMapper` object to generate users:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个返回`FlatFileItemReader`对象的`reader()`方法，该对象将读取CSV文件（其路径是CSV文件的文件路径），并使用之前定义的`LineMapper`对象生成用户：
- en: '[PRE37]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Define a class implementing `ItemProcessor` with a `process()` method that
    takes a `User` object, increments its `age`, and returns the modified `User` object:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个实现`ItemProcessor`的类，其中包含一个`process()`方法，该方法接收一个`User`对象，增加其`age`，并返回修改后的`User`对象：
- en: '[PRE38]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Back in the Batch configuration class, define a `UserProcessorIncrementAge`
    bean:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Batch配置类中，定义一个`UserProcessorIncrementAge`豆：
- en: '[PRE39]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Define a `Datasource` bean with the database connection details:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个包含数据库连接详细信息的`Datasource`豆：
- en: '[PRE40]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Add a `writer()` bean that will take a `User` object and save it in the database:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`writer()`豆，它将接收一个`User`对象并将其保存到数据库中：
- en: '[PRE41]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add a `JobBuilderFactory` field and a `StepBuilderFactory` field, both autowired:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`JobBuilderFactory`字段和一个`StepBuilderFactory`字段，都是自动注入的：
- en: '[PRE42]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Define a step calling our `reader()`, `processor()`, and `writer()` methods:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个调用我们的`reader()`、`processor()`和`writer()`方法的步骤：
- en: '[PRE43]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Define a job with the previous defined step:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个具有先前定义步骤的作业：
- en: '[PRE44]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Execute the job with the path to the CSV file as parameter:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用CSV文件的路径作为参数执行作业：
- en: '[PRE45]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How it works…
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In the `reader()` method, we used `FlatFileItemReader`, which is a class provided
    by Spring Batch for reading CSV files. Each line is processed by `LineMapper`,
    which takes a line and returns an object. In this recipe, we used `DefaultLineMapper`,
    which converts a line to `Fieldset` (using `DelimitedLineTokenizer`) and then
    saves each field in an object (all of this is done behind the scenes by `BeanWrapperFieldSetMapper`).
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在`reader()`方法中，我们使用了`FlatFileItemReader`，这是Spring Batch提供的一个用于读取CSV文件的类。每一行都通过`LineMapper`进行处理，它接收一行并返回一个对象。在这个菜谱中，我们使用了`DefaultLineMapper`，它将一行转换为`Fieldset`（使用`DelimitedLineTokenizer`），然后将每个字段保存到对象中（所有这些都是在`BeanWrapperFieldSetMapper`的幕后完成的）。
- en: In the `writer()` method, we supplied the SQL query, which will create the user
    in the database. The values come automatically from the `User` object, thanks
    to the `BeanPropertyItemSqlParameterSourceProvider` class. For example, `:firstName`
    will get its value from the `User` object's `firstName` field.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在`writer()`方法中，我们提供了SQL查询，该查询将在数据库中创建用户。值自动来自`User`对象，归功于`BeanPropertyItemSqlParameterSourceProvider`类。例如，`:firstName`将从`User`对象的`firstName`字段获取其值。
- en: In the `step1()` method, we declared the reader, processor, and writer methods.
    The `chunk()` method allows the data to be processed and saved by groups (in chunks).
    This is more efficient for large sets of data.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在`step1()`方法中，我们声明了reader、processor和writer方法。`chunk()`方法允许数据以组（块）的形式进行处理和保存。这对于大量数据集来说更有效。
- en: The `@StepScope` annotation is necessary for the `reader()` and `writer()` methods,
    to allow them to access the job parameters. Otherwise, they are executed too early
    in the job initialization process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`@StepScope` 注解对于 `reader()` 和 `writer()` 方法是必要的，以便它们可以访问作业参数。否则，它们会在作业初始化过程中太早执行。'
- en: There's more…
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: The reader-processor-writer separation makes it easy to swap one component with
    another. For example, if our CSV file becomes an XML file one day, we will only
    have to update the `reader()` method. In the next recipes, we will cover other
    types of readers and writers.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 读取器-处理器-写入器分离使得替换一个组件为另一个组件变得容易。例如，如果有一天我们的 CSV 文件变成了 XML 文件，我们只需更新 `reader()`
    方法。在接下来的菜谱中，我们将介绍其他类型的读取器和写入器。
- en: A processor is not required in a read/process/write job, so skip it if you don't
    need it. It also doesn't need to return an object from the same class. For example,
    it could take a `UserCSV` object, which would be a direct mapping of a line of
    the CSV file and return an actual `User` object. This would allow you to keep
    the CSV reader straightforward and separate the code converting its data to an
    actual `User` object, your real domain object, making that code easier to understand
    and maintain.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在读取/处理/写入作业中不需要处理器，所以如果你不需要它，就跳过它。它也不需要从同一类返回对象。例如，它可以接受一个 `UserCSV` 对象，这将直接映射
    CSV 文件的一行，并返回实际的 `User` 对象。这将允许你保持 CSV 读取器简单，并将将数据转换为实际 `User` 对象的代码与你的真实领域对象分离，使该代码更容易理解和维护。
- en: Our reader and writer code is short enough, so we will put it directly in the
    Spring Batch configuration. However, it could be moved to separate classes.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的读取器和写入器代码足够短，所以我们将直接将其放在 Spring Batch 配置中。然而，它也可以移动到单独的类中。
- en: Reading an XML file
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 读取 XML 文件
- en: In this recipe, you'll learn to read an XML file as part of a read/process/write
    step.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将学习如何将读取 XML 文件作为读取/处理/写入步骤的一部分。
- en: Getting ready
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We''ll read this XML file:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将读取此 XML 文件：
- en: '[PRE46]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'For each person''s record in the XML file, a `User` object will be created.
    Make sure that the `User` class exists:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 XML 文件中每个人的记录，将创建一个 `User` 对象。确保 `User` 类存在：
- en: '[PRE47]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How to do it…
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To parse the XML file, use `StaxEventItemReader`, which is provided by Spring
    Batch. To generate `User` objects, use `XStreamMarshaller`, a class from the Spring
    Object/XML Mapping project. Follow these steps:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要解析 XML 文件，请使用 Spring Batch 提供的 `StaxEventItemReader`。要生成 `User` 对象，请使用来自 Spring
    对象/XML 映射项目的 `XStreamMarshaller` 类。按照以下步骤操作：
- en: 'Add the Maven dependency for Spring Object/XML Mapping in `pom.xml`:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 Spring 对象/XML 映射的 Maven 依赖项：
- en: '[PRE48]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Add a `reader()` method returning a `StaxEventItemReader` object to read the
    XML file and generate `User` objects from its contents:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个返回 `StaxEventItemReader` 对象的 `reader()` 方法，以读取 XML 文件并从其内容生成 `User` 对象：
- en: '[PRE49]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Execute the job with the path to the XML file as a parameter. For example:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 XML 文件的路径作为参数执行作业。例如：
- en: '[PRE50]'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: How it works…
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`XStreamMarshaller` generates a `User` automatically for each person''s record.
    This is configured with the following line:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`XStreamMarshaller` 为每个人的记录自动生成一个 `User`。这是通过以下行配置的：'
- en: '[PRE51]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note that the `User` fields have to match the XML fields (`firstName` and `age`).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`User` 字段必须与 XML 字段（`firstName` 和 `age`）匹配。
- en: Generating a CSV file
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成 CSV 文件
- en: Write a CSV file as part of a read/process/write step.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 将 CSV 文件作为读取/处理/写入步骤的一部分写入。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will generate a CSV file from `User` objects. Make sure that the `User`
    class exists:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 `User` 对象生成 CSV 文件。确保 `User` 类存在：
- en: '[PRE52]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How to do it…
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Use `FlatFileItemWriter` provided by Spring Batch:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Spring Batch 提供的 `FlatFileItemWriter`：
- en: 'Add a `writer()` method that will get the fields of a `User` object, build
    a comma-separated line with them, and write the line to a CSV file:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `writer()` 方法，该方法将获取 `User` 对象的字段，使用它们构建一个以逗号分隔的行，并将该行写入 CSV 文件：
- en: '[PRE53]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Execute the job with the path to the output CSV file as a parameter:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用输出 CSV 文件的路径作为参数执行作业：
- en: '[PRE54]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The resulting CSV file will look like this:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的 CSV 文件将看起来像这样：
- en: '[PRE55]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works…
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`BeanWrapperFieldExtractor` extracts the declared fields (`firstName` and `age`)
    from the `User` object. `DelimitedLineAggregator` builds a comma-separated line
    with them. `FlatFileItemWriter` writes the line to the file.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`BeanWrapperFieldExtractor` 从 `User` 对象中提取声明的字段（`firstName` 和 `age`）。`DelimitedLineAggregator`
    使用它们构建一个以逗号分隔的行。`FlatFileItemWriter` 将该行写入文件。'
- en: Reading from a database
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从数据库读取
- en: This recipe shows you how to read data from a database as part of a read/process/write
    step.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 本菜谱展示了如何将读取数据库作为读取/处理/写入步骤的一部分。
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Each user will be read from the database. Make sure that the `user` database
    table exists with some data in it:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 每个用户都将从数据库中读取。确保 `user` 数据库表存在并且包含一些数据：
- en: '[PRE56]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'For each user row in the database, we''ll create a `User` object. Make sure
    that the `User` class exists:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 对于数据库中的每一行用户，我们将创建一个 `User` 对象。确保 `User` 类存在：
- en: '[PRE57]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Make sure that the `Datasource` bean is defined with the database connection
    information.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 确保使用数据库连接信息定义了 `Datasource` bean。
- en: How to do it…
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add a `reader()` method returning `JdbcCursorItemReader`-a class provided by
    Spring Batch:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个返回 `JdbcCursorItemReader` 的 `reader()` 方法——这是一个由 Spring Batch 提供的类：
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: How it works…
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'A SQL query is executed to get users from the database. `BeanPropertyRowMapper`
    generates `User` objects from the result. Note that the SQL result''s columns
    (`first_name`, `age`) have to match the User fields (`firstName` and `age`). If
    the database table has different column names, use SQL aliases to ensure that:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 执行一个 SQL 查询从数据库中获取用户。`BeanPropertyRowMapper` 从结果生成 `User` 对象。注意，SQL 结果的列（`first_name`，`age`）必须与
    `User` 字段（`firstName` 和 `age`）匹配。如果数据库表有不同的列名，请使用 SQL 别名来确保：
- en: '[PRE59]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Unit testing batch jobs
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 批处理作业的单元测试
- en: Spring Batch provides different ways to test a batch job; the whole job, only
    one step, or just a `Tasklet` class can be tested.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 提供了不同的方式来测试批处理作业；可以测试整个作业、仅一个步骤，或者只是一个 `Tasklet` 类。
- en: How to do it…
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to unit test batch jobs:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤对批处理作业进行单元测试：
- en: 'Add the Maven dependency for `spring-batch-test` in `pom.xml`:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `pom.xml` 中添加 `spring-batch-test` 的 Maven 依赖项：
- en: '[PRE60]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'In the unit test class, if using JUnit, load the Spring Batch configuration
    class like this:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单元测试类中，如果使用 JUnit，按照以下方式加载 Spring Batch 配置类：
- en: '[PRE61]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'If using TestNG, load the Spring Batch configuration class as follows:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果使用 TestNG，按照以下方式加载 Spring Batch 配置类：
- en: '[PRE62]'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Add an autowired `JobLauncherTestUtils` field:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个自动装配的 `JobLauncherTestUtils` 字段：
- en: '[PRE63]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This is how you can test an entire job, check its exit status, and the number
    of steps that were executed:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是如何测试整个作业，检查其退出状态以及已执行的步骤数量：
- en: '[PRE64]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This is how you can test a specific step:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是如何测试特定步骤的方法：
- en: '[PRE65]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This is how you can test Tasklet:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是如何测试 Tasklet：
- en: '[PRE66]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: How it works…
  id: totrans-255
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Spring Batch configuration class has to be loaded, so that the test methods
    can access the job and its steps. `JobLauncherTestUtils` is a helper class that
    is used to easily execute a job or one of its steps.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Batch 配置类必须被加载，这样测试方法才能访问作业及其步骤。`JobLauncherTestUtils` 是一个辅助类，用于轻松执行作业或其步骤之一。
