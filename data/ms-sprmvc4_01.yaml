- en: Chapter 1. Setting Up a Spring Web Application in No Time
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 快速设置Spring Web应用程序
- en: In this chapter, we will get straight to the code and set up a web application,
    which we will be working on for the rest of this book.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将直接进入代码并设置一个Web应用程序，我们将在这本书的剩余部分继续工作。
- en: We will leverage Spring Boot's autoconfiguration capabilities to build an application
    with zero boilerplate or configuration files.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将利用Spring Boot的自动配置功能来构建一个无需样板代码或配置文件的程序。
- en: 'I will lay out the big picture regarding how Spring Boot works and how to configure
    it. There are four ways to get started with Spring:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我将概述Spring Boot的工作原理以及如何配置它。有四种方式开始使用Spring：
- en: Using Spring Tool Suite to generate the starter code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring Tool Suite生成启动代码
- en: Using IntelliJ IDEA 14.1, which now has good support for Spring Boot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IntelliJ IDEA 14.1，它现在对Spring Boot有很好的支持
- en: Using Spring's website, [http://start.Spring.io](http://start.Spring.io), to
    download a configurable zip file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Spring的网站[http://start.Spring.io](http://start.Spring.io)下载一个可配置的zip文件
- en: Using the curl command line to [http://start.Spring.io](http://start.Spring.io)
    and achieving the same result
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用curl命令行访问[http://start.Spring.io](http://start.Spring.io)并实现相同的结果
- en: We will use Gradle and Java 8 throughout this book, but don't be scared. Even
    if you are still working with Maven and a previous version of Java, I bet you
    will find these technologies easy to work with.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用Gradle和Java 8，但不要害怕。即使您仍在使用Maven和Java的早期版本，我相信您会发现这些技术很容易使用。
- en: Many official Spring tutorials have both a Gradle build and a Maven build, so
    you will find examples easily if you decide to stick with Maven. Spring 4 is fully
    compatible with Java 8, so it would be a shame not to take advantage of lambdas
    to simplify our code base.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 许多官方Spring教程都有Gradle构建和Maven构建，所以如果您决定坚持使用Maven，您将很容易找到示例。Spring 4完全兼容Java 8，所以不利用lambda来简化我们的代码库将是一件遗憾的事情。
- en: I will also show you some Git commands. I think it's a good idea to keep track
    of your progress and commit when you are in a stable state. It will also make
    it easier to compare your work with the source code provided with this book.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我还将向您展示一些Git命令。我认为在您处于稳定状态时跟踪进度并提交是一个好主意。这也会使您更容易将您的工作与本书提供的源代码进行比较。
- en: As we will deploy our application with Heroku in [Chapter 9](ch09.html "Chapter 9. Deploying
    Your Web Application to the Cloud"), *Deploying Your Web Application to the Cloud*,
    I recommend that you start versioning your code with Git from the very beginning.
    I will give you some advice on how to get started with Git later in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将在第9章[Chapter 9](ch09.html "Chapter 9. Deploying Your Web Application to
    the Cloud")中部署我们的应用程序到Heroku，我建议您从一开始就使用Git进行版本控制。我将在本章后面为您提供一些关于如何开始使用Git的建议。
- en: Getting started with Spring Tool Suite
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Spring Tool Suite
- en: One of the best ways to get started with Spring and discover the numerous tutorials
    and starter projects that the Spring community offers is to download **Spring
    Tool Suite** (**STS**). STS is a custom version of eclipse designed to work with
    various Spring projects, as well as Groovy and Gradle. Even if, like me, you have
    another IDE that you would rather work with, I strongly recommend that you give
    STS a shot because it gives you the opportunity to explore Spring's vast ecosystem
    in a matter of minutes with the "Getting Started" projects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开始使用Spring并发现Spring社区提供的众多教程和启动项目之一是下载**Spring Tool Suite**（**STS**）。STS是为与各种Spring项目、Groovy和Gradle一起工作而设计的eclipse的定制版本。即使像我一样，您有另一个您更愿意使用的IDE，我也强烈建议您尝试一下STS，因为它让您有机会通过“入门”项目在几分钟内探索Spring的庞大生态系统。
- en: So, let's visit [https://Spring.io/tools/sts/all](https://Spring.io/tools/sts/all)
    and download the latest release of STS. Before we generate our first Spring Boot
    project we will need to install the Gradle support for STS. You can find a **Manage
    IDE Extensions** button on the dashboard. You will then need to download the **Gradle
    Support** software in the **Language and framework tooling** section.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们访问[https://Spring.io/tools/sts/all](https://Spring.io/tools/sts/all)并下载STS的最新版本。在我们生成第一个Spring
    Boot项目之前，我们需要为STS安装Gradle支持。您可以在仪表板上找到一个**管理IDE扩展**按钮。然后您需要在**语言和框架工具**部分下载**Gradle支持**软件。
- en: 'I also recommend installing the **Groovy Eclipse** plugin along with the **Groovy
    2.4 compiler**, as shown in the following screenshot. These will be needed later
    in this book when we set up acceptance tests with geb:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我还建议安装**Groovy Eclipse**插件以及**Groovy 2.4 编译器**，如图所示。这些将在本书后面的内容中设置 geb 接受测试时需要。
- en: '![Getting started with Spring Tool Suite](img/2117_01_01.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Tool Suite 入门](img/2117_01_01.jpg)'
- en: We now have two main options to get started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有两个主要选项开始使用。
- en: Tip
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在 [http://www.packtpub.com](http://www.packtpub.com) 的账户中下载您购买的所有 Packt
    书籍的示例代码文件。如果您在其他地方购买了这本书，您可以访问 [http://www.packtpub.com/support](http://www.packtpub.com/support)
    并注册以直接将文件通过电子邮件发送给您。
- en: You can also download the example code for this book at [https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4](https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从 [https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4](https://github.com/Mastering-Spring-MVC-4/mastering-spring-mvc4)
    下载本书的示例代码。
- en: 'The first option is to navigate to **File** | **New** | **Spring Starter Project**,
    as shown in the following screenshot. This will give you the same options as [http://start.Spring.io](http://start.Spring.io),
    embedded in your IDE:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个选项是导航到**文件** | **新建** | **Spring Starter 项目**，如图所示。这将为您提供与 [http://start.Spring.io](http://start.Spring.io)
    相同的选项，嵌入到您的 IDE 中：
- en: '![Getting started with Spring Tool Suite](img/2117_01_02.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Tool Suite 入门](img/2117_01_02.jpg)'
- en: 'You also have access to all the tutorials available on [http://spring.io](http://spring.io),
    selecting in **File** | **New** | **Import Getting Started Content** in the top
    bar. You will have the choice of working with either Gradle or Maven, as shown
    in the following screenshot:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以访问 [http://spring.io](http://spring.io) 上提供的所有教程，在顶部栏中选择**文件** | **新建**
    | **导入入门内容**。您可以选择使用 Gradle 或 Maven，如图所示：
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can also check out the starter code to follow along with the tutorial, or
    get the complete code directly.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以查看入门代码以跟随教程，或直接获取完整代码。
- en: '![Getting started with Spring Tool Suite](img/2117_01_03.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Tool Suite 入门](img/2117_01_03.jpg)'
- en: There is a lot of very interesting content available in the **Getting Started
    Content** and I encourage you to explore it on your own. It will demonstrate the
    integration of Spring with various technologies that you might be interested in.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在**入门内容**中有许多非常有趣的内容可供探索，我鼓励您自己探索。它将展示 Spring 与您可能感兴趣的各种技术的集成。
- en: For the moment, we will generate a web project as shown in the preceding image.
    It will be a Gradle application, producing a JAR file and using Java 8.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将生成一个如图所示的网络项目。它将是一个 Gradle 应用程序，生成一个 JAR 文件并使用 Java 8。
- en: 'Here is the configuration we want to use:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们想要使用的配置：
- en: '| Property | Value |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 值 |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Name | masterSpringMvc |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 名称 | masterSpringMvc |'
- en: '| Type | Gradle project |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | Gradle 项目 |'
- en: '| Packaging | Jar |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 打包 | Jar |'
- en: '| Java version | 1.8 |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| Java 版本 | 1.8 |'
- en: '| Language | Java |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 语言 | Java |'
- en: '| Group | masterSpringMvc |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 组 | masterSpringMvc |'
- en: '| Artifact | masterSpringMvc |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 生成物 | masterSpringMvc |'
- en: '| Version | 0.0.1-SNAPSHOT |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 版本 | 0.0.1-SNAPSHOT |'
- en: '| Description | Be creative! |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 发挥创意！ |'
- en: '| Package | masterSpringMvc |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 包 | masterSpringMvc |'
- en: On the second screen you will be asked for the Spring Boot version you want
    to use and the the dependencies that should be added to the project.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二屏，您将需要选择您想要使用的 Spring Boot 版本以及应该添加到项目中的依赖项。
- en: At the time of writing this, the latest version of Spring boot was 1.2.5\. Ensure
    that you always check out the latest release.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Spring Boot 的最新版本是 1.2.5。请确保您始终检查最新版本。
- en: The latest snapshot version of Spring boot will also be available by the time
    you read this. If Spring boot 1.3 isn't released by then, you can probably give
    it a shot. One of its big features is the awesome devs tools. Refer to [https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3](https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3)
    for more details.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 到你阅读这篇文档的时候，Spring Boot的最新快照版本也将可用。如果那时Spring Boot 1.3还没有发布，你可能可以试一试。它的一大特点是出色的开发者工具。有关更多详细信息，请参阅[https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3](https://spring.io/blog/2015/06/17/devtools-in-spring-boot-1-3)。
- en: At the bottom the configuration window you will see a number of checkboxes representing
    the various boot starter libraries. These are dependencies that can be appended
    to your build file. They provide autoconfigurations for various Spring projects.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置窗口的底部，你会看到代表各种boot启动库的多个复选框。这些是可以附加到你的构建文件中的依赖项。它们为各种Spring项目提供自动配置。
- en: We are only interested in Spring MVC for the moment, so we will check only the
    Web checkbox.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们只对Spring MVC感兴趣，所以我们将只勾选Web复选框。
- en: Tip
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: A JAR for a web application? Some of you might find it odd to package your web
    application as a JAR file. While it is still possible to use WAR files for packaging,
    it is not always the recommended practice. By default, Spring boot will create
    a fat JAR, which will include all the application's dependencies and provide a
    convenient way to start a web server using Java -jar.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Web应用程序的JAR文件？有些人可能觉得将Web应用程序打包成JAR文件很奇怪。虽然仍然可以使用WAR文件进行打包，但这并不是推荐的做法。默认情况下，Spring
    Boot将创建一个胖JAR，它将包含所有应用程序的依赖项，并提供使用Java -jar启动Web服务器的一种方便方式。
- en: Our application will be packaged as a JAR file. If you want to create a war
    file, refer to [http://spring.io/guides/gs/convert-jar-to-war/](http://spring.io/guides/gs/convert-jar-to-war/).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将被打包成一个JAR文件。如果你想创建WAR文件，请参阅[http://spring.io/guides/gs/convert-jar-to-war/](http://spring.io/guides/gs/convert-jar-to-war/)。
- en: 'Have you clicked on **Finish** yet? If you have, you should get the following
    project structure:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经点击了**完成**了吗？如果你已经点击了，你应该会得到以下项目结构：
- en: '![Getting started with Spring Tool Suite](img/2117_01_04.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![Spring Tool Suite入门](img/2117_01_04.jpg)'
- en: We can see our main class **MasterSpringMvcApplication** and its test suite
    **MasterSpringMvcApplicationTests**. There are also two empty folders, **static**
    and **templates**, where we will put our static web assets (images, styles, and
    so on) and obviously our templates (jsp, freemarker, Thymeleaf). The last file
    is an empty **application.properties** file, which is the default Spring boot
    configuration file. It's a very handy file and we'll see how Spring boot uses
    it throughout this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的主类**MasterSpringMvcApplication**及其测试套件**MasterSpringMvcApplicationTests**。还有两个空文件夹，**static**和**templates**，我们将在这里放置我们的静态Web资源（图像、样式等）和显然是我们的模板（jsp、freemarker、Thymeleaf）。最后一个文件是一个空的**application.properties**文件，这是Spring
    Boot的默认配置文件。这是一个非常方便的文件，我们将在本章中看到Spring Boot如何使用它。
- en: The `build.gradle` file, the build file that we will detail in a moment.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`build.gradle`文件，我们将在稍后详细说明的构建文件。'
- en: If you feel ready to go, run the main method of the application. This will launch
    a web server for us.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你准备好了，运行应用程序的主方法。这将为我们启动一个Web服务器。
- en: To do this, go to the main method of the application and navigate to **Run as**
    | **Spring Application** in the toolbar either by right-clicking on the class
    or clicking on the green play button in the toolbar.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请转到应用程序的主方法，并在工具栏中通过右键单击类或单击工具栏中的绿色播放按钮导航到**运行方式**|**Spring应用程序**。
- en: Doing so and navigating to `http://localhost:8080` will produce an error. Don't
    worry, and read on.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做并导航到`http://localhost:8080`将产生一个错误。别担心，继续阅读。
- en: I will show you how to generate the same project without STS, and we will come
    back to all these files.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我将向你展示如何在不使用STS的情况下生成相同的项目，然后我们将回到所有这些文件。
- en: Getting started with IntelliJ
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IntelliJ入门
- en: IntelliJ IDEA is a very popular tool among Java developers. For the past few
    years I've been very pleased to pay Jetbrains a yearly fee for this awesome editor.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ IDEA是Java开发者中非常受欢迎的工具。在过去几年里，我很高兴为这个出色的编辑器支付Jetbrains的年度费用。
- en: IntelliJ also has a way of creating Spring boot projects very quickly.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliJ还有快速创建Spring Boot项目的方法。
- en: 'Go to the new project menu and select the **Spring Initializr** project type:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前往新项目菜单，并选择**Spring Initializr**项目类型：
- en: '![Getting started with IntelliJ](img/2117_01_05.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![IntelliJ入门](img/2117_01_05.jpg)'
- en: This will give us exactly the same options as STS, so refer to the previous
    chapter for the detailed configuration.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们提供与 STS 相同的选项，因此请参考上一章的详细配置。
- en: Tip
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You will need to import the Gradle project into IntelliJ. I recommend generating
    the Gradle wrapper first (refer to the following **Gradle build** section).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将 Gradle 项目导入 IntelliJ。我建议首先生成 Gradle 包装器（参考以下 **Gradle 构建** 部分）。
- en: If needed, you can reimport the project by opening its `build.gradle` file again.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以通过再次打开其 `build.gradle` 文件来重新导入项目。
- en: Getting started with start.Spring.io
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 start.Spring.io 入门
- en: 'Go to [http://start.Spring.io](http://start.Spring.io) to get started with
    start.Spring.io. The system behind this remarkable Bootstrap-like website should
    be familiar to you! You will see the following screenshot when you go to the previously
    mentioned link:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前往 [http://start.Spring.io](http://start.Spring.io) 开始使用 start.Spring.io。这个令人瞩目的类似
    Bootstrap 的网站背后的系统你应该很熟悉！当你点击之前提到的链接时，你会看到以下截图：
- en: '![Getting started with start.Spring.io](img/2117_01_06.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![使用 start.Spring.io 入门](img/2117_01_06.jpg)'
- en: Indeed, the same options available with STS can be found here. Clicking on **Generate
    Project** will download a ZIP file containing our starter project.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，这里可以找到与 STS 相同的选项。点击 **生成项目** 将下载一个包含我们的入门项目的 ZIP 文件。
- en: Getting started with the command line
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行入门
- en: For those of you who are addicted to the console, it is possible to curl [http://start.Spring.io](http://start.Spring.io).
    Doing so will display instructions on how to structure your curl request.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些沉迷于控制台的人来说，你可以使用 curl [http://start.Spring.io](http://start.Spring.io)。这样做将显示如何构建你的
    curl 请求的说明。
- en: 'For instance, to generate the same project as earlier, you can issue the following
    command:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要生成之前相同的项目，你可以执行以下命令：
- en: '[PRE0]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: And viola! You are now ready to get started with Spring without leaving the
    console, a dream come true.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！你现在可以不离开控制台就开始使用 Spring 了，这是一个梦想成真。
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You might consider creating an alias with the previous command, it will help
    you prototype the Spring application very quickly.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以考虑使用之前的命令创建一个别名，这将帮助你非常快速地原型化 Spring 应用程序。
- en: Let's get started
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们开始吧
- en: Now that our web application is ready, let's take a look at how it is written.
    Before going further, we can save our work with Git.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的 Web 应用程序已经准备好了，让我们看看它是如何编写的。在继续之前，我们可以使用 Git 保存我们的工作。
- en: 'If you don''t know anything about Git, I recommend the two following tutorials:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 Git 一无所知，我推荐以下两个教程：
- en: '[https://try.github.io](https://try.github.io), which is a good step-by-step
    interactive tutorial to learn the basic Git commands'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://try.github.io](https://try.github.io)，这是一个很好的逐步交互式教程，用于学习基本的 Git 命令'
- en: '[http://pcottle.github.io/learnGitBranching](http://pcottle.github.io/learnGitBranching),
    which is an excellent interactive visualization of the Git tree-like structure
    that will show you basic, as well as very advanced, Git capabilities'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://pcottle.github.io/learnGitBranching](http://pcottle.github.io/learnGitBranching)，这是一个出色的
    Git 树状结构的交互式可视化，它将向你展示基本的以及非常高级的 Git 功能'
- en: Tip
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Installing Git**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 Git**'
- en: On windows, install Git bash, which can be found at [https://msysgit.github.io](https://msysgit.github.io).
    On Mac, if you use homebrew you should already have Git. Otherwise, use the command
    `brew install git`. When in doubt, check out the documentation at [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git).
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，安装 Git bash，它可以在 [https://msysgit.github.io](https://msysgit.github.io)
    找到。在 Mac 上，如果你使用 homebrew，你应该已经安装了 Git。否则，使用命令 `brew install git`。如果有疑问，请查看 [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git)
    的文档。
- en: 'To version our work with Git, type the following commands in a console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Git 对我们的工作进行版本控制，请在控制台中输入以下命令：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'With IntelliJ, ignore the generated files: `.idea` and `*.iml`. With eclipse
    you should commit the `.classpath` and `.settings` folder. In any case you should
    ignore the `.gradle` folder and the `build` folder.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 IntelliJ 时，忽略生成的文件：`.idea` 和 `*.iml`。使用 eclipse 时，你应该提交 `.classpath` 和 `.settings`
    文件夹。在任何情况下，你应该忽略 `.gradle` 文件夹和 `build` 文件夹。
- en: 'Create a `.gitignore` file containing the following text:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个包含以下文本的 `.gitignore` 文件：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, we can add all the other files to Git:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将所有其他文件添加到 Git 中：
- en: '[PRE3]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The Gradle build
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gradle 构建
- en: If you are unfamiliar with Gradle, think of it as Maven's successor, a modern
    build tool. Like Maven, it uses conventions such as how to structure a Java application.
    Our sources will still be found in `src/main/java`, our webapp in `src/main/webapp`,
    and so on. Not unlike Maven, you can use Gradle plugins to deal with various build
    tasks. However, Gradle really shines because it allows you to write your own build
    tasks using the Groovy DSL. The default library makes it easy to manipulate files,
    declare dependencies between tasks, and execute jobs incrementally.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不熟悉 Gradle，可以将其视为 Maven 的继任者，一个现代的构建工具。像 Maven 一样，它使用诸如如何结构化 Java 应用程序之类的约定。我们的源代码仍然位于
    `src/main/java`，我们的 webapp 位于 `src/main/webapp`，等等。与 Maven 类似，您可以使用 Gradle 插件来处理各种构建任务。然而，Gradle
    真正的亮点在于它允许您使用 Groovy DSL 编写自己的构建任务。默认库使得操作文件、声明任务之间的依赖关系以及增量执行作业变得容易。
- en: Tip
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Installing Gradle**'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装 Gradle**'
- en: If you're on OS X, you can install Gradle with brew by using `brew install gradle`
    command. On any *NIX system (Mac included), you can install it with gvm ([http://gvmtool.net/](http://gvmtool.net/)).
    Alternatively, you can grab the binary distribution at [https://Gradle.org/downloads](https://Gradle.org/downloads).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 OS X，您可以使用 `brew install gradle` 命令通过 brew 安装 Gradle。在任何 *NIX 系统（包括
    Mac）上，您可以使用 gvm ([http://gvmtool.net/](http://gvmtool.net/)) 安装它。或者，您可以从 [https://Gradle.org/downloads](https://Gradle.org/downloads)
    下载二进制发行版。
- en: The first good practice when creating an application with Gradle is to generate
    a Gradle wrapper. The Gradle wrapper is a small script that you will share along
    with your code to ensure that the build will use the same version of Gradle that
    you used to build the application.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Gradle 创建应用程序时，第一个好的实践是生成一个 Gradle 包装器。Gradle 包装器是一个小的脚本，您将和代码一起分享以确保构建将使用您用于构建应用程序的相同版本的
    Gradle。
- en: 'The command to generate the wrapper is `Gradle wrapper`:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 生成包装器的命令是 `Gradle wrapper`：
- en: '[PRE4]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If we look at the new files created, we can see two scripts and two directories:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们查看创建的新文件，我们可以看到两个脚本和两个目录：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `.gradle` directory contains the Gradle binaries; you wouldn't want to commit
    those to your version control.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gradle` 目录包含 Gradle 二进制文件；您不希望将这些提交到版本控制中。'
- en: 'We previously ignored this file along with the build directory so that you
    could safely `git add` everything else:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前忽略了此文件以及构建目录，这样您就可以安全地 `git add` 其他所有内容：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `Gradle` directory contains information on how to get the binaries. The
    two other files are scripts: a batch script for windows (`Gradlew.bat`) and a
    shell script for other systems.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`Gradle` 目录包含有关如何获取二进制文件的信息。另外两个文件是脚本：Windows 的批处理脚本（`Gradlew.bat`）和其他系统的 shell
    脚本。'
- en: 'We can also run our application with Gradle instead of executing the application
    from the IDE:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以使用 Gradle 运行我们的应用程序，而不是从 IDE 中执行应用程序：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Issuing this command will run an embedded tomcat server with our application
    in it!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此命令将在其中包含我们的应用程序的嵌入式 tomcat 服务器上运行！
- en: 'The log tells us that the server is running on port 8080\. Let''s check it
    out:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 日志告诉我们服务器正在 8080 端口上运行。让我们检查一下：
- en: '![The Gradle build](img/2117_01_07.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![Gradle 构建](img/2117_01_07.jpg)'
- en: I can imagine your disappointment. Our application is not ready for the grand
    public just yet.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以想象您的失望。我们的应用程序还没有准备好面向公众。
- en: That being said, the work accomplished by the two files our project is made
    of is rather impressive. Let's review them.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们项目由两个文件完成的工作相当令人印象深刻。让我们回顾一下。
- en: 'The first one is the Gradle build file, `build.Gradle`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个是 Gradle 构建文件，`build.Gradle`：
- en: '[PRE8]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: What do we see here?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到了什么？
- en: A dependency on the Spring Boot plugin distributed on Maven central.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖于在 Maven 中央仓库上分发的 Spring Boot 插件。
- en: Our project is a Java project. IDE project files can be generated by Gradle
    for IntelliJ or Eclipse.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的项目是一个 Java 项目。Gradle 可以为 IntelliJ 或 Eclipse 生成 IDE 项目文件。
- en: The application will generate a JAR file.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序将生成一个 JAR 文件。
- en: Our project dependencies are hosted on maven central.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的项目依赖托管在 Maven 中央仓库。
- en: Our classpath includes `spring-boot-starter-web` in production and `spring-boot-starter-test`
    for testing.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的项目类路径在生产中包含 `spring-boot-starter-web`，在测试中包含 `spring-boot-starter-test`。
- en: Some additional configuration for eclipse.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 eclipse 配置的一些附加设置。
- en: The version of the Gradle wrapper is 2.3.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gradle 包装器的版本是 2.3。
- en: 'The Spring Boot Plugin will generate a fat jar that contains all the dependencies
    of the project. To build it, type:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot 插件将生成一个包含项目所有依赖项的胖 JAR 文件。要构建它，请输入：
- en: '[PRE9]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You will find the JAR in the directory `build/libs`. This directory will contain
    two files, the fat jar called `masterSpringMvc-0.0.1-SNAPSHOT.jar` and the classic
    JAR file that does not include any dependencies, `masterSpringMvc-0.0.1-SNAPSHOT.jar.original`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在`build/libs`目录中找到JAR文件。这个目录将包含两个文件，一个称为`masterSpringMvc-0.0.1-SNAPSHOT.jar`的胖JAR文件，以及一个不包含任何依赖的经典JAR文件，`masterSpringMvc-0.0.1-SNAPSHOT.jar.original`。
- en: Tip
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Runnable jar**'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '**可运行JAR**'
- en: One of the main advantages of Spring Boot is embedding everything the application
    needs in one easily redistributable JAR file, including the web server. If you
    run `java jar masterSpringMvc-0.0.1-SNAPSHOT.jar`, tomcat will start on port 8080,
    just like it did when you developed it. This is extremely handy for deploying
    in production or in the cloud.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的一个主要优点是将应用程序需要的所有内容嵌入到一个易于分发的JAR文件中，包括Web服务器。如果你运行`java jar masterSpringMvc-0.0.1-SNAPSHOT.jar`，tomcat将在8080端口启动，就像你在开发时做的那样。这对于在生产环境或云中部署来说非常方便。
- en: Our main dependency here is `spring-boot-starter-web`. Spring Boot provides
    a good number of starters that will automatically configure some aspects of the
    application for us by providing typical dependencies and Spring configuration.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里的主要依赖是`spring-boot-starter-web`。Spring Boot提供了一系列的starters，它们会自动配置应用程序的一些方面，通过提供典型的依赖和Spring配置。
- en: For instance, `spring-starter-web` will include dependencies of `tomcat-embedded`
    and Spring MVC. It will also run the most commonly used Spring MVC configuration
    and provide a dispatcher listening on the "`/`" root path, error handling such
    as the 404 page we saw earlier, and a classical view resolver configuration.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`spring-starter-web`将包含`tomcat-embedded`和Spring MVC的依赖。它还将运行最常用的Spring MVC配置，提供一个监听`"/"`根路径的调度器，错误处理，例如我们之前看到的404页面，以及一个经典的视图解析器配置。
- en: We'll see more on this later. First, let's take a look at the next section.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到更多关于这个的内容。首先，让我们看看下一节。
- en: Let me see the code!
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我看看代码！
- en: Here is all the code that is needed to run the application. Everything is in
    a classic main function, which is a huge advantage because you can run your application
    in your IDE like you would for any other program. You can debug it and also benefit
    from some class reloading out of the box without a plugin.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是需要运行应用程序的所有代码。所有内容都在一个经典的主函数中，这是一个巨大的优势，因为你可以像运行其他任何程序一样在你的IDE中运行你的应用程序。你可以调试它，并且还可以无需插件就获得一些类重新加载的功能。
- en: This reloading will be available in the debug mode when saving your file in
    eclipse, or clicking on **Make Project** in IntelliJ. This will be possible only
    if the JVM is able to switch the new compile version of the class file with the
    new one; modifying the static variable or touching configuration files will force
    you to reload the application.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在Eclipse中保存文件或在IntelliJ中点击**Make Project**时，这种重新加载将在调试模式下可用。这只有在JVM能够切换新的编译版本和类文件的新版本时才可能；修改静态变量或触摸配置文件将迫使你重新加载应用程序。
- en: 'Our main class looks as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的主要类看起来如下：
- en: '[PRE10]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Note the `@SpringBootApplication` annotation. If you look at the code of this
    annotation you will see that it actually combines three other annotations: `@Configuration`,
    `@EnableAutoConfiguration`, and `@ComponentScan`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`@SpringBootApplication`注解。如果你查看这个注解的代码，你会看到它实际上结合了三个其他的注解：`@Configuration`、`@EnableAutoConfiguration`和`@ComponentScan`：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `@Configuration` class should be familiar to you if you''ve already configured
    a Spring application with Java code earlier. It indicates that our class will
    handle classical aspects of a Spring configuration: declaring beans, for instance.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前已经使用Java代码配置过Spring应用，那么`@Configuration`类应该对你来说很熟悉。它表示我们的类将处理Spring配置的经典方面：例如声明bean。
- en: The `@ComponentScan` class is also a classic. It will tell Spring where to look
    to find our Spring components (services, controllers, and so on). By default,
    this annotation will scan every current package and everything under it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`@ComponentScan`类也是一个经典。它将告诉Spring在哪里查找我们的Spring组件（服务、控制器等）。默认情况下，这个注解将扫描当前包及其所有子包。'
- en: The novelty here is `@EnableAutoConfiguration`, which will instruct Spring Boot
    to do its magic. If you remove it, you will no longer benefit from Spring Boot's
    autoconfiguration.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的新特性是`@EnableAutoConfiguration`，它将指导Spring Boot执行其魔法。如果你移除它，你将不再从Spring Boot的自动配置中受益。
- en: 'The first step when writing an MVC application with Spring Boot is usually
    to add a controller to our code. Add the controller in the controller subpackage
    so that it is picked up by the `@ComponentScan` annotation:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Spring Boot编写MVC应用程序的第一步通常是向我们的代码中添加一个控制器。将控制器添加到控制器子包中，以便它被`@ComponentScan`注解拾取：
- en: '[PRE12]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This time, if you open your browser and visit `http://localhost:8080` you will
    see this lovely **Hello, world!** output:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，如果你打开你的浏览器并访问`http://localhost:8080`，你将看到这个可爱的**Hello, world!**输出：
- en: '![Let me see the code!](img/2117_01_08.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![让我看看代码！](img/2117_01_08.jpg)'
- en: Spring Boot behind the curtains
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Spring Boot幕后
- en: If you already set up a Spring MVC application earlier, you may be used to writing
    at least a small portion of XML or a handful of Java annotation configuration
    classes.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前已经设置了一个Spring MVC应用程序，你可能已经习惯了至少编写一小部分XML或一些Java注解配置类。
- en: 'Initialization steps are typically as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 初始化步骤通常是以下这样：
- en: Initializing the DispatcherServlet of Spring MVC.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始化Spring MVC的DispatcherServlet。
- en: Setting up an encoding filter to ensure that client requests are encoded correctly.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置一个编码过滤器以确保客户端请求被正确编码。
- en: Setting up a view resolver to tell Spring where to find our views and in which
    dialect they are written (jsp, Thymeleaf templates, and so on).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置视图解析器，告诉Spring在哪里可以找到我们的视图以及它们是用哪种方言编写的（jsp、Thymeleaf模板等）。
- en: Configuring static resources locations (css, js).
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置静态资源位置（css、js）。
- en: Configuring supported locales and resource bundles.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置支持的地区和资源包。
- en: Configuring a multipart resolver for file uploads to work.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置一个多部分解析器，以便文件上传可以工作。
- en: Including tomcat or jetty to run our application on a web server.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 包括tomcat或jetty，以便在我们的Web服务器上运行应用程序。
- en: Setting up the error pages (For example 404).
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置错误页面（例如404）。
- en: However, Spring Boot handles all that work for us. Because this configuration
    is typically up to your application, you can come up with an unlimited amount
    of combinations.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Spring Boot为我们处理所有这些工作。因为这种配置通常取决于你的应用程序，你可以提出无限多的组合。
- en: Spring boot, in a way, is an opinionated Spring project configurator. It is
    based on conventions and will enforce them on your project by default.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 从某种意义上说，Spring Boot是一个有偏见的Spring项目配置器。它基于约定，并将默认强制执行这些约定到你的项目中。
- en: The dispatcher and multipart configuration
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分发器和多部分配置
- en: Let's see what happens behind the curtains.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看幕后发生了什么。
- en: 'We will use the default Spring Boot configuration file that was created for
    us and put it in the debug mode. Add the following line to `src/main/resources/application.properties`:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用为我们创建的默认Spring Boot配置文件，并将其置于调试模式。将以下行添加到`src/main/resources/application.properties`：
- en: '[PRE13]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, if we launch our application again we''ll see Spring Boot''s autoconfiguration
    report. It is divided into two parts: **positive matches,** which list all autoconfigurations
    that are used by our application; and **negative matches**, which are Spring Boot
    autoconfigurations whose requirements weren''t met when the application started:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次启动我们的应用程序，我们将看到Spring Boot的自动配置报告。它分为两部分：**positive matches**（正匹配），列出了我们应用程序使用的所有自动配置；以及**negative
    matches**（负匹配），这些是当应用程序启动时未满足要求的Spring Boot自动配置：
- en: '[PRE14]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s take a closer look at `DispatcherServletAutoConfiguration`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看`DispatcherServletAutoConfiguration`：
- en: '[PRE15]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'This is a typical Spring Boot configuration class:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个典型的Spring Boot配置类：
- en: It is annotated with `@Configuration` like any other Spring configuration class.
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它像任何其他Spring配置类一样被`@Configuration`注解。
- en: It typically declares its priority level with the `@Order` annotation. You can
    see that `DispatcherServletAutoConfiguration` needs to be configured first.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通常使用`@Order`注解声明其优先级级别。你可以看到`DispatcherServletAutoConfiguration`需要首先配置。
- en: It can also contain hints such as `@AutoConfigureAfter` or `@AutoConfigureBefore`
    to further refine the order in which configurations are processed.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还可以包含如`@AutoConfigureAfter`或`@AutoConfigureBefore`之类的提示，以进一步细化配置处理的顺序。
- en: It is enabled under certain conditions. With `@ConditionalOnClass(DispatcherServlet.class)`,
    this particular configuration ensures that our classpath contains `DispatcherServlet`,
    which is a good indication that Spring MVC is in the classpath and the user certainly
    wants to bootstrap it.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它在特定条件下被启用。通过`@ConditionalOnClass(DispatcherServlet.class)`，这个特定的配置确保我们的类路径中包含`DispatcherServlet`，这是一个很好的迹象表明Spring
    MVC在类路径中，并且用户肯定希望启动它。
- en: This file also contains classic bean declarations for the Spring MVC dispatcher
    servlet and a multipart resolver. The whole Spring MVC configuration is broken
    into multiple files.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件还包含用于 Spring MVC 分发器 servlet 和多部分解析器的经典 bean 声明。整个 Spring MVC 配置被拆分为多个文件。
- en: It is also worth noting that these beans obey certain rules to check whether
    are active. The `ServletRegistrationBean` function will be enabled under the `@Conditional(DefaultDispatcherServletCondition.class)`
    condition, which is a bit complex but checks whether you already have a dispatcher
    servlet registered in your own configuration.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得注意的是，这些 bean 遵循某些规则来检查它们是否处于活动状态。在 `@Conditional(DefaultDispatcherServletCondition.class)`
    条件下，`ServletRegistrationBean` 函数将被启用，这有点复杂，但会检查您是否已经在自己的配置中注册了分发器 servlet。
- en: The `MultipartResolver` function will become active only if the condition `@ConditionalOnMissingBean(name
    = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)` is met, for example, if we
    didn't declare it ourselves.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当条件 `@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)`
    满足时，`MultipartResolver` 功能才会生效，例如，如果我们没有自己声明它。
- en: This means Spring boot only gives you a hand in configuring your application
    according to common use cases. However, at any point, you can override these defaults
    and declare your own configuration.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着 Spring Boot 只在根据常见用例配置应用程序时提供帮助。然而，在任何时候，您都可以覆盖这些默认设置并声明自己的配置。
- en: So, the `DispatcherServletAutoConfiguration` class explains why we have a dispatcher
    servlet and a multipart resolver.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`DispatcherServletAutoConfiguration` 类解释了为什么我们有分发器 servlet 和多部分解析器。
- en: The view resolver, static resources, and locale configuration
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图解析器、静态资源和区域设置配置
- en: 'Another very relevant piece of configuration is `WebMvcAutoConfiguration`.
    It declares the view resolver, the locale resolver, and the location of our static
    resources. The view resolver is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常相关的配置是 `WebMvcAutoConfiguration`。它声明了视图解析器、区域解析器和我们的静态资源位置。视图解析器如下：
- en: '[PRE16]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The view resolver configuration is really typical. What's really interesting
    here is the use of configuration properties to allow users to customize it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 视图解析器配置非常典型。真正有趣的是这里使用配置属性来允许用户自定义它。
- en: What it says is "I will look for two variables in the user's `application.properties`
    called `spring.view.prefix` and `spring.view.suffix`". This is a very handy way
    to set up the view resolver with only two lines in our configuration.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 它所说的内容是“我将在用户的 `application.properties` 中寻找两个变量，分别称为 `spring.view.prefix` 和
    `spring.view.suffix`”。这是一种非常方便的方法，只需在我们的配置中两行代码即可设置视图解析器。
- en: Keep this in mind for the next chapter. For now, we will just stroll through
    Spring Boot's code.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住这一点，为下一章做准备。现在，我们只是浏览 Spring Boot 的代码。
- en: 'Regarding static resources, this configuration includes the following lines:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 关于静态资源，此配置包括以下行：
- en: '[PRE17]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The declaration of resource locations is a bit convoluted but we can still
    understand two things:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 资源位置的声明有点复杂，但我们仍然可以理解两件事：
- en: Any resource accessed with the "webjar" prefix will be resolved inside the classpath
    inside the classpath. This will allow us to use prepackaged JavaScript dependencies
    from Maven central.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 "webjar" 前缀访问的任何资源都将解析在类路径内的类路径中。这将允许我们使用 Maven central 中的预包装 JavaScript
    依赖项。
- en: Our static resources can reside in any of the locations after our classpath
    `/META-INF/resources/`, `/resources/`, `/static/`, or `/public/`.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们静态资源可以位于类路径 `/META-INF/resources/`、`/resources/`、`/static/` 或 `/public/` 之后的任何位置。
- en: Tip
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: WebJars are JAR packages of client JavaScript libraries available on Maven central.
    They include a Maven project file, which allows for transitive dependencies and
    works in all JVM-based applications. WebJars are an alternative to JavaScript
    package managers such as bower or npm. They are great for applications that require
    just a few JavaScript libraries. Find the list of available WebJars on [www.webjars.org](http://www.webjars.org).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: WebJars 是 Maven central 上可用的客户端 JavaScript 库的 JAR 包。它们包含一个 Maven 项目文件，允许传递依赖关系，并在所有基于
    JVM 的应用程序中工作。WebJars 是 JavaScript 包管理器（如 bower 或 npm）的替代品。对于只需要少量 JavaScript 库的应用程序来说，它们非常出色。在
    [www.webjars.org](http://www.webjars.org) 上可以找到可用的 WebJars 列表。
- en: 'There is also a part of this file that is dedicated to locale management:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件还有一部分是专门用于区域管理的：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This default locale resolver handles only one locale and allows us to define
    it via the `spring.mvc.locale` configuration property.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此默认区域解析器只处理一个区域，并允许我们通过 `spring.mvc.locale` 配置属性来定义它。
- en: Error and encoding configuration
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误和编码配置
- en: Remember when we first launched our application without adding a controller?
    We got a funny **Whitelabel Error Page** output.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们第一次启动应用程序而没有添加控制器时吗？我们得到了一个有趣的**Whitelabel错误页面**输出。
- en: 'Error handling is a lot trickier than it looks, especially when you don''t
    have a `web.xml` configuration file and want your application to be portable across
    web servers. The good news is that Spring Boot takes care of that for us! Let''s
    look at `ErrorMvcAutoConfiguration`:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理比看起来要复杂得多，尤其是在您没有`web.xml`配置文件并希望应用程序能够在不同的Web服务器之间移植时。好消息是Spring Boot为我们处理了这一点！让我们看看`ErrorMvcAutoConfiguration`：
- en: '[PRE19]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: What does this piece of configuration do?
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这段配置做了什么？
- en: It defines a bean, `DefaultErrorAttributes`, which exposes helpful error information
    via special attributes such as the status, error code, and associated stack trace.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义了一个bean，`DefaultErrorAttributes`，通过特殊属性（如状态、错误代码和关联的堆栈跟踪）公开有用的错误信息。
- en: It defines a `BasicErrorController` bean, which is an MVC controller in charge
    of displaying the error page we've seen.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它定义了一个`BasicErrorController` bean，这是一个负责显示我们看到的错误页面的MVC控制器。
- en: It allows us to deactivate Spring Boot whitelabel error page by setting `error.whitelable.enabled`
    to false in our configuration file, `application.properties`.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们通过在配置文件`application.properties`中将`error.whitelable.enabled`设置为false来停用Spring
    Boot的whitelabel错误页面。
- en: We can also leverage our templating engine to provide our own error page. It
    will be named `error.html`, for example. This is what the condition `ErrorTemplateMissingCondition`
    checks.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还可以利用我们的模板引擎来提供我们自己的错误页面。例如，它将被命名为`error.html`。这就是`ErrorTemplateMissingCondition`条件检查的内容。
- en: We'll see how to properly handle errors later in this book.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分看到如何正确处理错误。
- en: As far as encoding is concerned, the very simple `HttpEncodingAutoConfiguration`
    function will handle it by providing Spring's `CharacterEncodingFilter` class.
    It is possible to override the default encoding ("UTF-8") with `spring.http.encoding.charset`
    and disable this configuration with `spring.http.encoding.enabled`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在编码方面，非常简单的`HttpEncodingAutoConfiguration`函数将通过提供Spring的`CharacterEncodingFilter`类来处理它。您可以使用`spring.http.encoding.charset`覆盖默认编码（"UTF-8"），并通过`spring.http.encoding.enabled`禁用此配置。
- en: Embedded Servlet container (Tomcat) configuration
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内嵌Servlet容器（Tomcat）配置
- en: By default, Spring Boot runs and packages our application using the Tomcat embedded
    API.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot使用Tomcat内嵌API运行和打包我们的应用程序。
- en: 'Let''s look at `EmbeddedServletContainerAutoConfiguration`:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`EmbeddedServletContainerAutoConfiguration`：
- en: '[PRE20]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code is pretty straight forward. This code includes three different
    configurations, which will be activated depending on what's available on your
    classpath.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码非常直接。此代码包括三个不同的配置，具体将根据您的类路径上可用的内容来激活。
- en: You can use Tomcat, tc-server, Jetty, or Undertow with Spring Boot. Your server
    can be easily replaced by excluding the `spring-boot-starter-tomcat` JAR dependency
    and replacing it with its Jetty or Undertow equivalent. Please refer to the documentation
    if you wish to do so.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用Tomcat、tc-server、Jetty或Undertow与Spring Boot一起使用。您可以通过排除`spring-boot-starter-tomcat`
    JAR依赖项并用其Jetty或Undertow等价物替换它来轻松替换服务器。如果您想这样做，请参阅文档。
- en: All the configuration of our Servlet container (Tomcat) will happen in `TomcatEmbeddedServletContainerFactory`.
    While you should definitely read it because it provides a very advanced configuration
    of tomcat embedded (for which finding documentation can be hard), we will not
    look at this class directly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Servlet容器（Tomcat）的所有配置都将发生在`TomcatEmbeddedServletContainerFactory`中。虽然您应该确实阅读它，因为它提供了非常高级的Tomcat内嵌配置（对于找到文档来说可能很困难），但我们不会直接查看这个类。
- en: Instead, I will walk you through the different options available to configure
    your Servlet Container.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我将向您介绍配置Servlet容器可用的不同选项。
- en: The HTTP port
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTTP端口
- en: You can change the default HTTP port by defining a `server.port` property in
    your `application.properties` file or by defining an environment variable called
    `SERVER_PORT`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在`application.properties`文件中定义`server.port`属性或定义一个名为`SERVER_PORT`的环境变量来更改默认的HTTP端口。
- en: You can disable HTTP by setting this variable to `-1` or launch it on a random
    port by setting it to `0`. This is very handy for testing.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将此变量设置为`-1`来禁用HTTP，或者通过将其设置为`0`在随机端口上启动它。这对于测试来说非常方便。
- en: The SSL configuration
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SSL配置
- en: 'Configuring SSL is such a chore, but spring boot has a simple solution. You
    need only a handful of properties to secure your server:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 配置SSL是一项繁琐的工作，但Spring Boot提供了一个简单的解决方案。您只需要几个属性来保护您的服务器：
- en: '[PRE21]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You will have to generate a keystore file for the above example to work, thought.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，您将需要为上述示例生成一个密钥库文件。
- en: We'll have a deeper look at our security options in [Chapter 6](ch06.html "Chapter 6. Securing
    Your Application"), *Securing Your Application*. Of course, you can customize
    the `TomcatEmbeddedServletContainerFactory` function further by adding your own
    `EmbeddedServletContainerFactory`. This can come in handy if you wish to add multiple
    connectors, for instance. Refer to the documentation at [http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl)
    for more information.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第6章](ch06.html "第6章。保护您的应用程序")中更深入地了解我们的安全选项，*保护您的应用程序*。当然，您可以通过添加自己的`EmbeddedServletContainerFactory`来进一步自定义`TomcatEmbeddedServletContainerFactory`功能。如果您希望添加多个连接器，这可能很有用。有关更多信息，请参阅[http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl](http://docs.spring.io/spring-boot/docs/current/reference/html/howto-embedded-servlet-containers.html#howto-configure-ssl)的文档。
- en: Other configurations
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他配置
- en: You can add classic Java web elements such as `Servlet`, `Filter`, and `ServletContextListener`
    by simply declaring them as the `@Bean` elements in your configuration.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过简单地将它们声明为配置中的`@Bean`元素来添加经典的Java Web元素，如`Servlet`、`Filter`和`ServletContextListener`。
- en: 'Out of the box, spring boot also added three other things for us:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Spring Boot还为我们添加了三样东西：
- en: JSON serialization with Jackson in `JacksonAutoConfiguration`
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`JacksonAutoConfiguration`中使用Jackson进行JSON序列化
- en: Default `HttpMessageConverters` in `` `HttpMessageConvertersAutoConfiguration
    ``
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpMessageConvertersAutoConfiguration`中的默认`HttpMessageConverters`'
- en: JMX capabilities in `JmxAutoConfiguration`
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`JmxAutoConfiguration`中的JMX功能
- en: 'We will see a bit more about the jackson configuration in [Chapter 5](ch05.html
    "Chapter 5. Crafting a RESTful Application"), *Crafting a RESTful Application*.
    About JMX configuration, you can try it out by connecting to your application
    with `jconsole` locally:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第5章](ch05.html "第5章。构建RESTful应用程序")中看到更多关于Jackson配置的内容，*构建RESTful应用程序*。关于JMX配置，您可以通过在本地使用`jconsole`连接到应用程序来尝试它：
- en: '![Other configurations](img/2117_01_09.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![其他配置](img/2117_01_09.jpg)'
- en: You can add more interesting MBeans by adding `org.springframework.boot:spring-boot-starter-actuator`
    to your classpath. You can even define your own MBeans and expose them on HTTP
    using Jolokia. On the other hand, you can also disable those endpoints by adding
    `spring.jmx.enabled=false` to your configuration.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过将`org.springframework.boot:spring-boot-starter-actuator`添加到类路径中来添加更多有趣的MBeans。您甚至可以定义自己的MBeans，并通过Jolokia在HTTP上公开它们。另一方面，您也可以通过在配置中添加`spring.jmx.enabled=false`来禁用这些端点。
- en: Note
  id: totrans-231
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Refer to [http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html](http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html)
    for more details.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 更多详细信息，请参阅[http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html](http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-jmx.html)。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We now have a very humble spring web application with a RESTful JSON "Hello
    world" despite having configured nothing ourselves. We have seen what spring boot
    does for us, how it does it, and hopefully we've got a good idea of how to override
    the default autoconfiguration.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个非常谦逊的Spring Web应用程序，尽管我们没有自己配置任何东西，但它已经有一个RESTful JSON的“Hello world”。我们已经看到了Spring
    Boot为我们做了什么，它是如何做到的，并且希望我们已经对如何覆盖默认的自动配置有了很好的理解。
- en: Detailing how spring boot works is the topic of a book all by itself. If you
    want to dig deeper, I recommend that you read the excellent book *Learning Spring
    Boot* by Greg Turnquist in the same collection.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Spring Boot的工作原理是一个单独的书籍主题。如果您想深入了解，我推荐您阅读同一系列中Greg Turnquist编写的优秀书籍《Learning
    Spring Boot》。
- en: We are now ready for the next chapter where our application will reach a new
    stage by actually serving web pages, and you will learn more about spring MVC's
    philosophy.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好进入下一章，我们的应用程序将通过实际提供网页服务而达到一个新的阶段，您将更多地了解Spring MVC的哲学。
