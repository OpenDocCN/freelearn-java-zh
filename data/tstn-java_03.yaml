- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: The Maven Build Tool
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven构建工具
- en: Java programs are seldom just a single file. They can consist of just a few
    files or thousands of files. We have seen that you must compile Java source code
    files into bytecode. Having to do this for so many files makes the work quite
    tedious. This is where a build tool is invaluable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Java程序很少只有一个文件。它们可以只包含几个文件，或者成千上万个文件。我们已经看到，你必须将Java源代码文件编译成字节码。对于这么多文件来说，这样做的工作相当繁琐。这就是构建工具非常有价值的地方。
- en: In the previous chapter, the programs were all run from the folder we stored
    them in. As programs grow into multiple files, you manage them by categorizing
    them. The basic categories that date back to the early days of programming are
    input, process, and output. You can break down these categories into specific
    tasks that your program must perform. In Java, we call a category a **package**.
    A package, in turn, is a folder into which you store all the Java files that are
    part of the category. A complex program may consist of hundreds of files organized
    into packages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，程序都是在我们存储它们的文件夹中运行的。随着程序发展成为多个文件，你通过分类来管理它们。这些基本分类可以追溯到编程的早期，包括输入、处理和输出。你可以将这些分类分解成程序必须执行的具体任务。在Java中，我们称这类别为**包**。一个包反过来是一个文件夹，你将属于该类别的所有Java文件存储在其中。一个复杂的程序可能包含成百上千个组织成包的文件。
- en: In this environment, you must compile every single file. As you can imagine,
    this can be very tedious if you must compile them one at a time. One of the purposes
    of a build system is to simplify this task, and at the very minimum, all you must
    enter at the command line is `mvn`, the Maven executable program. In this chapter,
    we will see how we can use **Maven**. As Maven is a feature of every IDE, you
    can load any program organized as a Maven-managed project into any IDE.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个环境中，你必须编译每一个文件。正如你可以想象的那样，如果你必须逐个编译它们，这可能会非常繁琐。构建系统的一个目的就是简化这项任务，并且至少，你必须在命令行中输入的是`mvn`，这是Maven的可执行程序。在本章中，我们将看到如何使用**Maven**。由于Maven是每个IDE的一个特性，你可以将任何组织为Maven管理的项目的程序加载到任何IDE中。
- en: Important note
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: While Maven is the most widely used build system, it is not the only one. Another
    popular build system is called **Gradle**. What sets it apart from Maven is that
    it uses an imperative rather than a declarative configuration file. Gradle uses
    a **Domain-Specific Language** (**DSL**) based on the **Groovy** language. As
    such, it could be used for general programming, although its vocabulary and syntax
    are designed for building software projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Maven是最广泛使用的构建系统，但它并非唯一。另一个流行的构建系统被称为**Gradle**。它区别于Maven的地方在于它使用的是命令式配置文件而不是声明式配置文件。Gradle使用基于**Groovy**语言的**领域特定语言**（**DSL**）。因此，它可以用于通用编程，尽管它的词汇和语法是为构建软件项目而设计的。
- en: 'In this chapter, we will cover the following:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Installing Maven
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Maven
- en: Overview of Maven functionality
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven功能概述
- en: The `pom.xml` configuration file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pom.xml`配置文件'
- en: Running Maven
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行Maven
- en: By the end of this chapter, you will gain a sufficient understanding of the
    Maven build process to be able to use it right away. Later in the book, we will
    see how we can use Maven to manage testing. See the *Further reading* section
    for links to articles and free books that cover Maven in far more detail.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将足够了解Maven构建过程，以便能够立即使用它。本书后面的部分，我们将看到如何使用Maven来管理测试。请参阅*进一步阅读*部分，以获取有关Maven的详细文章和免费书籍的链接。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Here are the tools required to run the examples in this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是运行本章示例所需的工具：
- en: Java 17 installed
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java 17已安装
- en: A text editor
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: Maven 3.8.6 or a newer version installed
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven 3.8.6或更高版本已安装
- en: I suggest downloading the source code that goes with this book from [https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03)
    before you proceed so that you try out what is shown in this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议在继续之前从[https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03](https://github.com/PacktPublishing/Transitioning-to-Java/tree/chapter03)下载与本书相关的源代码，这样你就可以尝试本章中展示的内容。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Ubuntu and other Linux distributions may have a version of Maven already installed.
    If it is not version 3.8.6 or greater, you must replace it with the newest version.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu和其他Linux发行版可能已经安装了Maven的一个版本。如果它不是3.8.6或更高版本，你必须用最新版本替换它。
- en: Installing Maven
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Maven
- en: Visit the Maven download page at [https://maven.apache.org/download.html](https://maven.apache.org/download.html).
    Here, you will find the program in two different compressed formats, one for Windows
    (`.zip`) and one for Linux/macOS (`tar.gz`).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 访问 Maven 下载页面 [https://maven.apache.org/download.html](https://maven.apache.org/download.html)。在这里，您将找到两种不同的压缩格式，一个是
    Windows（`.zip`），另一个是 Linux/macOS (`tar.gz`)。
- en: '![Figure 3.1 – Maven compressed files](img/B19088_03_01.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – Maven 压缩文件](img/B19088_03_01.jpg)'
- en: Figure 3.1 – Maven compressed files
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – Maven 压缩文件
- en: The versions shown here represent the current ones at the time of this writing.
    When starting out, it is best to install the most recent version. Now, let us
    review how we install Maven for each OS.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的版本代表的是撰写本文时的当前版本。在开始时，安装最新版本是最好的选择。现在，让我们回顾一下如何为每个操作系统安装 Maven。
- en: Windows
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows
- en: There is no installer for Maven. Unzip the ZIP archive into a folder. As we
    saw when we installed Java without an installer, I use a folder called `devapp`
    for all my development tools. Once unzipped, you need to add the location of the
    `bin` folder to your path. You may come across references to two environment variables,
    `M2_HOME` and `MAVEN_HOME`. While they don’t do any harm, both are obsolete as
    of Maven 3.5.x.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 没有安装程序。将 ZIP 归档解压到一个文件夹中。正如我们在没有安装程序的情况下安装 Java 时所看到的，我使用名为 `devapp` 的文件夹来存放所有我的开发工具。一旦解压，您需要将
    `bin` 文件夹的位置添加到您的路径中。您可能会遇到对两个环境变量 `M2_HOME` 和 `MAVEN_HOME` 的引用。虽然它们不会造成任何伤害，但自
    Maven 3.5.x 版本以来，这两个变量都已过时。
- en: If you are an admin on your computer, then just add the path to the `bin` folder
    to your path. If you are not, then use the `set` command to add it to your path.
    Here is my `setjava.bat` file for non-admins. Change your batch file to match
    your folder structure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是计算机管理员，只需将 `bin` 文件夹的路径添加到您的路径中。如果不是，则使用 `set` 命令将其添加到路径中。以下是我的 `setjava.bat`
    文件，适用于非管理员用户。根据您的文件夹结构修改您的批处理文件。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can verify that Maven is working with `mvn --version`:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `mvn --version` 验证 Maven 是否正在运行：
- en: '![Figure 3.2 – The output of mvn --version on Windows](img/B19088_03_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.2 – Windows 上 mvn --version 的输出](img/B19088_03_02.jpg)'
- en: Figure 3.2 – The output of mvn --version on Windows
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.2 – Windows 上 mvn --version 的输出
- en: Linux
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Linux
- en: 'If you have superuser status, you can use this command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您具有超级用户权限，可以使用此命令：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Verify it with `mvn --version`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mvn --version` 验证。
- en: 'If you are not a superuser, unzip the `tar.gz` file downloaded from the Maven
    website into the folder of your choice:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不是超级用户，将从 Maven 网站下载的 `tar.gz` 文件解压到您选择的文件夹中：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, add the location for Maven to your path:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将 Maven 的位置添加到您的路径中：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Add this line to your `.profile` or `.bash_profile` file according to your Linux
    distribution.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的 Linux 发行版，将此行添加到 `.profile` 或 `.bash_profile` 文件中。
- en: macOS
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: macOS
- en: 'Assuming that you are using Homebrew on your Mac, you can install Maven with
    the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在 Mac 上使用 Homebrew，您可以使用以下命令安装 Maven：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Verify the installation with `mvn --version`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `mvn --version` 验证安装。
- en: If you do not have Homebrew or are not the superuser, then you can install Maven
    the same way as you installed it for Linux for non-superusers. Newer versions
    of macOS use `.zshenv` rather than `.profile` for your user script.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有 Homebrew 或不是超级用户，则可以像为 Linux 非超级用户安装 Maven 一样安装 Maven。较新的 macOS 版本使用 `.zshenv`
    而不是 `.profile` 作为用户脚本。
- en: '![Figure 3.3 – Verifying the installation in Linux or macOS](img/B19088_03_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – Linux 或 macOS 上的安装验证](img/B19088_03_03.jpg)'
- en: Figure 3.3 – Verifying the installation in Linux or macOS
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – Linux 或 macOS 上的安装验证
- en: With Maven installed, let us look at what it offers us.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Maven 后，让我们看看它为我们提供了什么。
- en: Overview of Maven functionality
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Maven 功能概述
- en: The standard Java libraries that are part of the JDK is quite extensive. However,
    there are added libraries that supply functionality, such as connecting to a relational
    database, which you must download and then add to the project before running it.
    You can configure Maven to do this for you. No need to visit a library’s web page
    – download the file, place it in the proper folder, and let the Java compiler
    know it is available.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: JDK 部分的标准 Java 库非常广泛。然而，还有一些提供功能的附加库，例如连接到关系型数据库，您必须下载并将它们添加到项目运行之前。您可以使用 Maven
    来配置它为您完成这项工作。无需访问库的网页 - 下载文件，将其放置在正确的文件夹中，并让 Java 编译器知道它可用。
- en: As with most build tools, Maven is more than just a tool for compiling programs.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数构建工具一样，Maven 不仅仅是一个编译程序的工具。
- en: In today’s development environment, code does not go from the developer right
    into production if it compiles successfully. There has to be unit testing of methods
    and integration testing of the interactions between the various modules or classes
    in a program. You will use specialized servers for this work, and you can configure
    Maven to carry this out.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在今天的开发环境中，如果代码编译成功，代码不会直接从开发者那里进入生产。必须对方法进行单元测试，对程序中各个模块或类之间的交互进行集成测试。你将使用专门的服务器来完成这项工作，并且你可以配置Maven来执行这项工作。
- en: Let us review what else it can do.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下它还能做什么。
- en: Dependency management
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 依赖管理
- en: While the Java language and its standard libraries can cover multiple use cases,
    they only cover a small subset of what programmers want to do. Frequently, added
    Java libraries that provide support for tasks, such as GUI programming with JavaFX;
    certain drivers, such as one for working with a range of databases, for sophisticated
    logging, or for enhanced data collections; and more, need to be part of your program.
    The problem is that these libraries must be in the **Java classpath**. A classpath
    is the list of files and folders holding Java libraries that must be accessible
    in your filesystem. Without a tool such as Maven, you must download every library
    you wish to use and update the Java classpath manually.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Java语言及其标准库可以覆盖多个用例，但它们只能覆盖程序员想要做的很小一部分。经常，添加的Java库提供对任务的支持，例如使用JavaFX进行GUI编程；某些驱动程序，例如用于与一系列数据库工作的驱动程序，用于复杂的日志记录或增强数据收集等，需要成为你程序的一部分。问题是这些库必须位于**Java类路径**上。类路径是包含Java库的文件和文件夹列表，这些库必须在你的文件系统中可访问。如果没有像Maven这样的工具，你必须手动下载你希望使用的每个库并更新Java类路径。
- en: However, Maven allows you to list all the libraries you plan to use in a project’s
    configuration file called the `pom.xml`. Maven keeps a folder on your filesystem
    where it stores the required dependency library files. This folder is called a
    repository. By default, this folder is placed inside another folder called `.m2`,
    which, in turn, is stored in your home directory. You can change this to use any
    folder from your computer, although most programmers leave the default folder
    location as is.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Maven允许你在项目的配置文件`pom.xml`中列出你计划在项目中使用的所有库。Maven在你的文件系统中保留一个文件夹，用于存储所需的依赖库文件。这个文件夹被称为仓库。默认情况下，这个文件夹位于另一个名为`.m2`的文件夹中，而这个文件夹又存储在你的主目录中。你可以将其更改为使用电脑上的任何文件夹，尽管大多数程序员都保留默认文件夹位置不变。
- en: If a required dependency is not already in your local repository, then Maven
    will download it. A default central repository called Maven Central exists and
    can be found at [https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2/).
    You can search for libraries and retrieve the entry necessary to add to your `pom.xml`
    file at [https://search.maven.org/](https://search.maven.org/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所需的依赖项尚未存在于你的本地仓库中，那么Maven将下载它。存在一个默认的中心仓库，称为Maven Central，可以在[https://repo1.maven.org/maven2/](https://repo1.maven.org/maven2/)找到。你可以在[https://search.maven.org/](https://search.maven.org/)搜索库并检索添加到你的`pom.xml`文件中的条目。
- en: Maven plugins
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven插件
- en: The Maven program is not large; it relies on Java programs called plugins to
    conduct its tasks. For example, there are plugins to compile and package code,
    run tests, execute and deploy the code to a server, and more. The `pom.xml` file
    is where we list the plugins along with the dependencies. You can search for plugins
    as you did for dependencies at MVNRepository.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Maven程序并不大；它依赖于称为插件的Java程序来执行其任务。例如，有用于编译和打包代码、运行测试、执行并将代码部署到服务器的插件，等等。《pom.xml》文件是我们列出插件及其依赖的地方。你可以在MVNRepository中像查找依赖项一样查找插件。
- en: The Maven program uses a range of default plugins available to you without including
    them in the `pom.xml` file. Major builds of Maven use versions of the default
    plugins at the time the build was released. To ensure that you are using the most
    recent version of the plugins, I recommend listing every plugin that you will
    use in the `pom.xml` file. In general, always explicitly list the plugins you
    will use rather than allow Maven to use its built-in or implicit plugins.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Maven程序使用一系列默认插件，这些插件可以在不包含在`pom.xml`文件中的情况下使用。Maven的主要构建使用在构建发布时默认插件的版本。为了确保你使用的是插件的最新版本，我建议在`pom.xml`文件中列出你将使用的每个插件。一般来说，始终明确列出你将使用的插件，而不是让Maven使用其内置或隐式插件。
- en: Maven project layout
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Maven项目布局
- en: 'To use Maven, it is necessary to organize the program’s folder into a specific
    layout. You can configure Maven to use a layout of your choice. What follows is
    the default layout. This will allow Maven to discover all the files and resources
    that are part of your project. Let us look at the folder structure for a desktop
    application:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Maven，有必要将程序的文件夹组织成特定的布局。您可以配置 Maven 使用您选择的布局。以下是将要使用的默认布局。这将允许 Maven 发现您项目中的所有文件和资源。让我们看看桌面应用程序的文件夹结构：
- en: '[PRE5]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: You must create these folders and the `pom.xml` file before you start coding
    from the command line with an editor. Your IDE will create this structure if you
    indicate it is a Maven project when you create it. All IDEs will open a Maven
    project if it follows this folder layout.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用编辑器从命令行开始编码之前，您必须创建这些文件夹和 `pom.xml` 文件。如果您在创建时指定它是一个 Maven 项目，您的 IDE 将创建此结构。所有
    IDE 都会在遵循此文件夹布局的项目中打开 Maven 项目。
- en: 'After you have successfully built the program, you will find a new folder called
    `target`. This is where Maven stores the compiled source code files and the final
    packaged file called the `jar` file. Here is the folder structure of `target`:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在您成功构建程序后，您将找到一个名为 `target` 的新文件夹。这是 Maven 存储编译的源代码文件和最终打包文件（称为 `jar` 文件）的地方。以下是
    `target` 的文件夹结构：
- en: '[PRE6]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Maven creates this folder when you build a project for the first time. Each
    build will replace any file in `target` with a newer version when you change the
    matching source code file. Never edit or change any files found in `target` because
    the next time you create a build, it will replace the files in `target` and any
    edits you made will be lost.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 在您第一次为项目构建时创建此文件夹。每次构建时，如果您更改了匹配的源代码文件，Maven 将用新版本替换 `target` 中的任何文件。请勿编辑或更改
    `target` 中找到的任何文件，因为下次您创建构建时，它将替换 `target` 中的文件，并且您所做的任何编辑都将丢失。
- en: You can also instruct Maven to clean a project, and this results in contents
    of `target` being deleted. If the `pom.xml` file is instructing Maven to package
    your program as an archive, such as a JAR file, then you find the JAR or whichever
    archive you are creating in the `target` folder.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指示 Maven 清理项目，这将导致 `target` 中的内容被删除。如果 `pom.xml` 文件指示 Maven 将您的程序打包为存档，例如
    JAR 文件，那么您将在 `target` 文件夹中找到 JAR 或您正在创建的任何存档。
- en: If you do not work with an IDE, you may consider writing a batch file or shell
    script to create this folder structure.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不使用 IDE，您可以考虑编写一个批处理文件或 shell 脚本来创建此文件夹结构。
- en: The next task is to create the `pom.xml` file with the required plugins listed
    – but before we do that, let us look at how we organize multiple source code files
    using packages.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是创建包含所需插件的 `pom.xml` 文件——但在我们这样做之前，让我们看看我们如何使用包组织多个源代码文件。
- en: Java source code packages
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 源代码包
- en: The Java languages encourages developers to organize their code based on functionality.
    This could be code to interact with a user, access records from a database, or
    perform business calculations. In this section, we will learn about packages and
    how to use them in a Maven project. We already know that you do not need a package.
    The first program, `CompoundInterest`, that we ran in the previous chapter, did
    not have any packages. This was handy when a project just consisted of a single
    file. Once a project encompasses multiple files, you will use packages.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Java 语言鼓励开发者根据功能组织他们的代码。这可能包括与用户交互的代码、从数据库访问记录或执行业务计算。在本节中，我们将了解包以及如何在 Maven
    项目中使用它们。我们已经知道您不需要包。我们在上一章中运行的第一个程序 `CompoundInterest` 没有任何包。当项目仅由一个文件组成时，这很有用。一旦项目包含多个文件，您将使用包。
- en: 'As we are using Maven, the location of our packages must be `src/main/java`:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用 Maven，我们的包的位置必须是 `src/main/java`：
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The rules for naming packages are similar to the rules for identifiers, as
    well as any rules for naming folders in your OS:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 包命名的规则与标识符的规则相似，以及您操作系统中文件夹命名的任何规则：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The periods stand for a slash, either a forward or back slash depending on
    your operating system. This means that `business` is a folder in `kenfogel` and
    `kenfogel` is a folder in `com`. Using our Maven layout, it will look as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 点号代表斜杠，具体是正斜杠还是反斜杠取决于您的操作系统。这意味着 `business` 是 `kenfogel` 中的一个文件夹，而 `kenfogel`
    是 `com` 中的一个文件夹。使用我们的 Maven 布局，它将如下所示：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: When we use packages, each file belonging to the package must have a statement
    as the first line of code that declares the name of the package.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用包时，属于该包的每个文件都必须有一个声明包名称的语句作为代码的第一行。
- en: In the previous chapter, we used a version of the `CompoundInterest` program
    with two classes in one file because the **Single-File-Source-Code** feature cannot
    have more than one file, as its name implies. Unless you need to use the Single-File-Source-Code
    feature, you should create a file for each class in your program. The file name
    must be the same as the public class name in the file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用了一个包含两个类在一个文件中的 `CompoundInterest` 程序版本，因为 **Single-File-Source-Code**
    功能不能有超过一个文件，正如其名称所暗示的。除非您需要使用 Single-File-Source-Code 功能，否则您应该为程序中的每个类创建一个文件。文件名必须与文件中公共类的名称相同。
- en: 'Here is the class that holds the business process; notice that it begins with
    the package statement. In this first part, we are declaring what external library
    we will need and then declaring the class and the class variables:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是包含业务流程的类；请注意，它以包声明开始。在这个第一部分，我们声明了我们需要的外部库，然后声明了类和类变量：
- en: '[PRE10]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Next up are the methods that contain executable code:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是包含可执行代码的方法：
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Every Java program must have at least one class that has one method named `main`.
    Here is the class in which the `main` method exists:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Java程序都必须至少有一个名为 `main` 的方法。以下是包含 `main` 方法的类：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In both files, you will see an `import` statement. To access a class that is
    not in the same package, you must import it. This statement informs the compiler
    that code coming from a class in another package will be used. Let’s discuss both
    the `import` statements:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个文件中，您都会看到一个 `import` 语句。要访问不在同一包中的类，您必须导入它。这个语句通知编译器将使用来自另一个包中的类的代码。让我们讨论一下这两个
    `import` 语句：
- en: 'The first import statement makes the `NumberFormat` class—that is part of the
    `java.text` package—available to the compiler. Note that packages that begin with
    `java` or `javax` are usually part of the Java installation:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个 `import` 语句使 `NumberFormat` 类（它是 `java.text` 包的一部分）对编译器可用。请注意，以 `java` 或
    `javax` 开头的包通常是 Java 安装的一部分：
- en: '[PRE13]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the second import statement, by using `CompoundInterest04.java`, we are
    instantiating the `CompoundInterestCalculator04` class in the `main` method. This
    class file is not in the same package, so you must import it to reference it:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第二个 `import` 语句中，通过使用 `CompoundInterest04.java`，我们在 `main` 方法中实例化了 `CompoundInterestCalculator04`
    类。这个类文件不在同一个包中，因此您必须导入它以引用它：
- en: '[PRE14]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here is the folder structure of the `CompoundInterest` program that Maven expects
    to find on your storage device:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是 Maven 期望在您的存储设备上找到的 `CompoundInterest` 程序的文件夹结构：
- en: '![Figure 3.4 – Basic Maven file structure](img/B19088_03_04.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – 基本Maven文件结构](img/B19088_03_04.jpg)'
- en: Figure 3.4 – Basic Maven file structure
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – 基本Maven文件结构
- en: Here, we are looking at the directory structure for the Maven-managed `CompoundInterest`
    program. The project is organized into packages that match `import` statements
    in your code. Here, you can see how the package names, such as `com.kenfogel.compoundinterest`,
    exist in your filesystem. We have one last part of a Maven project we must learn
    about and that is the `pom.xml` file.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在查看 Maven 管理的 `CompoundInterest` 程序的目录结构。项目被组织成与您的代码中的 `import` 语句匹配的包。在这里，您可以看到包名，例如
    `com.kenfogel.compoundinterest`，如何在您的文件系统中存在。我们还有 Maven 项目的最后一部分需要了解，那就是 `pom.xml`
    文件。
- en: The pom.xml configuration file
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`pom.xml` 配置文件'
- en: You must configure Maven with a declarative XML file. This file declares, in
    XML format, all the information necessary to build a project. It lists the required
    libraries here, along with the plugins needed to support Maven tasks. In this
    section, we will examine the `pom.xml` file that holds the Maven configuration
    to build the `CompoundInterest` program.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须使用一个声明性的 XML 文件来配置 Maven。这个文件以 XML 格式声明了构建项目所需的所有信息。它列出了所需的库以及支持 Maven 任务的插件。在本节中，我们将检查包含
    Maven 构建配置的 `pom.xml` 文件。
- en: 'Here are the first three tags that are used in every `pom.xml` file by everyone:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是每个人在每一个 `pom.xml` 文件中使用的第一个三个标签：
- en: '[PRE15]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let’s describe the parts of the code we just wrote:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述一下我们刚刚编写的代码部分：
- en: The first line that begins with `<?xml` is the XML prolog. These are the default
    values and could be left out, as it is optional.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以 `<?xml` 开头的第一行是 XML 前言。这些是默认值，可以省略，因为它是可选的。
- en: The root `project` tag defines the XML namespaces. It includes the location
    of the schema file that validates the `pom.xml` file.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根 `project` 标签定义了 XML 命名空间。它包括验证 `pom.xml` 文件的模式文件的存储位置。
- en: '`modelVersion` refers to the version that the `pom.xml` file conforms to. Since
    Maven 2, it has been `4.0.0`, and any other value will result in an error.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`modelVersion` 指的是 `pom.xml` 文件遵守的版本。自从 Maven 2 以来，它一直是 `4.0.0`，任何其他值都会导致错误。'
- en: 'Next up is how we identify a project; consider the following code block:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是关于我们如何识别一个项目；考虑以下代码块：
- en: '[PRE16]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: These three tags are commonly referred to as the project’s GAV, using the first
    letter of each tag – `groupId`, `artifactId`, and `version`. Taken together, these
    should be unique for every project you create.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个标签通常被称为项目的 GAV，使用每个标签的首字母 – `groupId`、`artifactId` 和 `version`。结合起来，这些应该对您创建的每个项目都是唯一的。
- en: '`groupId` and `artifactId` also define a default package in your code. You
    do not need to have this package, but can have any package structure you think
    is appropriate. When a project, either your own or one downloaded for your project,
    is stored in your local repository, `version` becomes another folder. This allows
    you to have multiple versions of a project that differ by version number. Should
    you be developing a library for download by Maven, then the contents of the three
    tags become the identification for users to download your work.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`groupId` 和 `artifactId` 也在您的代码中定义了一个默认包。您不需要有这个包，但可以有任何您认为合适的包结构。当一个项目（无论是您自己的还是为您的项目下载的）存储在您的本地仓库中时，`version`
    变成了另一个文件夹。这允许您拥有具有不同版本号的多个项目版本。如果您正在开发一个供 Maven 下载的库，那么这三个标签的内容就成为了用户下载您的工作的标识。'
- en: You are free to use any names you want in `groupId` and `artifactId`. It must
    conform to the XML rules for a string. There is a convention that says that the
    combination of `groupId` and `artifactId` should conform to Java’s rules for naming
    packages. The name should be unique, especially if you plan to make it available
    through Maven Central. Therefore, programmers use their company or personal domain
    name in reverse. If you do not have a domain, then simply use your name as I have.
    I do own [kenfogel.com](http://kenfogel.com) and I recommend that all developers
    get a domain name for their work.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 `groupId` 和 `artifactId` 中使用任何您想要的名称。它必须符合字符串的 XML 规则。有一个约定说 `groupId`
    和 `artifactId` 的组合应该符合 Java 的命名包规则。名称应该是唯一的，尤其是如果您计划通过 Maven Central 提供它。因此，程序员使用他们公司或个人的域名（反向）。如果您没有域名，那么简单地使用您的名字，就像我一样。我确实拥有
    [kenfogel.com](http://kenfogel.com)，并且我建议所有开发者都为他们的工作获取一个域名。
- en: For `version`,  we are also free to use anything – numbers or strings. If you
    have previously downloaded a specific version of a library, then Maven will use
    the local copy. One special word, `SNAPSHOT`, when added to the end of the version
    designation, implies that this project is still in development. This means that
    Maven will download this library even if it exists in the local repository. Unless
    you reconfigure Maven, `SNAPSHOT` versions are only updated once a day.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `version`，我们也可以自由使用任何内容 – 数字或字符串。如果您之前下载了特定版本的库，那么 Maven 将使用本地副本。有一个特殊的词，`SNAPSHOT`，当添加到版本标识的末尾时，意味着该项目仍在开发中。这意味着即使它在本地仓库中存在，Maven
    也会下载这个库。除非您重新配置 Maven，否则 `SNAPSHOT` 版本每天只会更新一次。
- en: 'Here is what Maven stores in your local repository after using Maven to run
    the project. You can see how it is stored using the complete GAV:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用 Maven 运行项目后 Maven 在您的本地仓库中存储的内容。您可以看到它是如何存储的，使用完整的 GAV：
- en: '![Figure 3.5 – The .m2/repository ](img/B19088_03_05.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.5 – .m2/repository](img/B19088_03_05.jpg)'
- en: Figure 3.5 – The .m2/repository
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.5 – .m2/repository
- en: The folders other than `compoundinterest` have dependencies and plugins that
    the Maven program and your project require.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `compoundinterest` 之外的其他文件夹包含 Maven 程序和您的项目所需的依赖项和插件。
- en: Coming up, we will see a section of the `pom.xml` file called `defaultGoals`
    – a part of the `build` section of the `pom.xml` file. This is where you provide
    Maven with the tasks it must carry out. Maven does not place your project in your
    local repository unless you use `install` as one of your goals, and that is how
    this directory structure was created. The `groupId` element in the `pom.xml` file
    is broken down into folders based on the periods you placed in the tag. While
    `artifactId` and `version` in the `pom.xml` file may have periods in their text,
    they are not broken down into folders like `groupId`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到`pom.xml`文件中的一个名为`defaultGoals`的部分——这是`pom.xml`文件`build`部分的组成部分。这是您提供Maven必须执行的任务的地方。除非您将`install`作为您的目标之一，否则Maven不会将您的项目放置在本地仓库中，这就是这个目录结构是如何创建的。`pom.xml`文件中的`groupId`元素根据您在标签中放置的点分解为文件夹。虽然`pom.xml`文件中的`artifactId`和`version`可能在其文本中有点，但它们不会像`groupId`那样分解为文件夹。
- en: 'Next up is how we describe the final file that will contain everything necessary
    for your code to run. This is called `package` and refers to the various archive
    formats that Java programs can be stored in:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将描述包含运行代码所需所有内容的最终文件。这被称为`package`，指的是Java程序可以存储的各种归档格式：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If you do not have a `<packaging>` tag, then Maven will default to `jar`. These
    packages are compressed ZIP files with a folder structure and files required for
    the project. You can inspect any of these packaging formats by using any `.zip`
    utility. The choices for packaging are as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有`<packaging>`标签，则Maven将默认为`jar`。这些包是包含文件夹结构和项目所需文件的压缩ZIP文件。您可以使用任何`.zip`实用程序检查这些打包格式。打包的选择如下：
- en: jar – Java archive
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jar – Java归档
- en: '`META-INF` folder that has a file named `MANIFEST.MF`. If Maven has configured
    `MANIFEST.MF` to include the package and file name of the class that holds the
    `main` method, then you can run this file by double-clicking on it or entering
    the file name at the command prompt.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`META-INF`文件夹中有一个名为`MANIFEST.MF`的文件。如果Maven已配置`MANIFEST.MF`以包含包含`main`方法的类的包和文件名，则可以通过双击它或在命令提示符中输入文件名来运行此文件。'
- en: war – web archive
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: war – Web归档
- en: This ZIP archive is for use on a web server such as `.war` file differs from
    a `.jar` file to meet the requirements of a web server, such as folders for HTML
    and JavaScript files.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个ZIP归档文件用于在Web服务器上使用，例如`.war`文件与`.jar`文件不同，以满足Web服务器的要求，如HTML和JavaScript文件的文件夹。
- en: ear – enterprise archive
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ear – 企业归档
- en: This ZIP archive is for use on a Java enterprise profile servers such as Glassfish
    or WildFly. These are also called application servers that provide the functionality
    for running complex web applications. Modern web programming in Java recommends
    using `.war` files even for complex systems. I will discuss these in more detail
    when we look at web programming in [*Chapter 14*](B19088_14.xhtml#_idTextAnchor281),
    *Server-Side Coding* *with Jakarta*.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这个ZIP归档文件用于在Java企业配置服务器上使用，如Glassfish或WildFly。这些也被称为提供运行复杂Web应用程序功能的应用服务器。现代Java
    Web编程建议即使对于复杂系统也使用`.war`文件。当我们在[*第14章*](B19088_14.xhtml#_idTextAnchor281)“使用Jakarta的*服务器端编码*”中查看Web编程时，我将更详细地讨论这些内容。
- en: pom – POM
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pom – POM
- en: Maven supports using multiple POM files. One way to do this is to have a parent
    POM file included as part of the project’s POM file. I have hundreds of projects
    that I have created for my students. Early on, I found myself editing each POM
    file in each project to update versions or add new dependencies and plugins that
    every project will share. Using a parent POM file, I can place all the common
    components in this file and then include them in the individual POM files of each
    project. If the project and parent POM files each have the same tag, then the
    project POM overrides the parent POM.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Maven支持使用多个POM文件。一种方法是，将父POM文件包含在项目的POM文件中作为一部分。我为我的学生创建了数百个项目。一开始，我发现自己在每个项目的每个POM文件中编辑，以更新版本或添加每个项目都会共享的新依赖项和插件。使用父POM文件，我可以将所有通用组件放在这个文件中，然后将其包含在每个项目的单个POM文件中。如果项目和父POM文件都有相同的标签，则项目POM会覆盖父POM。
- en: 'Let us continue going through the `pom.xml` file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续查看`pom.xml`文件：
- en: '[PRE18]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'These are three optional sections that provide additional information that
    can help manage the project:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是三个可选部分，提供额外的信息，有助于管理项目：
- en: '`<description>`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<描述>`'
- en: Brief description of the project in sentences
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用句子简要描述项目
- en: <`developers>`
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <`开发者>`
- en: Here you can list the team members. I have used it to identify my students.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，您可以列出团队成员。我已用它来识别我的学生。
- en: '`<``organization>`'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<``organization>`'
- en: Name of the company you work for or the name of the client
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你所在公司的名称或客户的名称
- en: The `archive` file, the packaging that is created, holds all the compiled bytecode
    and any required libraries. It also includes the `pom.xml` file. This makes it
    possible for web and enterprise servers to display this information in the web
    console or dashboard.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`archive`文件，创建的打包文件，包含所有编译的字节码和所需的库。它还包括`pom.xml`文件。这使得Web和企业服务器能够在Web控制台或仪表板上显示这些信息。'
- en: 'Next up is the properties section of the file; consider the following code
    block:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是文件的属性部分；考虑以下代码块：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding code block, think of `properties` as variables that you can
    use elsewhere in the POM file, such as defining the Java version the compiler
    will come from or the name of the class containing the `main` method when creating
    a `MANIFEST.MF` file. You can see that `java.version` becomes `${java.version}`.
    You can now use this value elsewhere in the POM file. The Maven plugin that manages
    compilation will use the compiler source and target source. `exec.mainClass` denotes
    the class that holds the main method.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，将`properties`视为可以在POM文件的其他地方使用的变量，例如定义编译器将从中来的Java版本或创建`MANIFEST.MF`文件时包含`main`方法的类的名称。你可以看到`java.version`变成了`${java.version}`。你现在可以在POM文件的其他地方使用这个值。管理编译的Maven插件将使用编译器源和目标源。`exec.mainClass`表示包含`main`方法的类。
- en: 'Next up are dependencies; these are external libraries that your program requires.
    Consider the following code block:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是依赖项；这些是程序所需的外部库。考虑以下代码块：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: A dependency is a library that must be available for the program to compile
    and execute. If a dependency is not found in your local repository, then Maven
    will download it.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项是一个必须可用于程序编译和执行的库。如果依赖项在你的本地仓库中找不到，那么Maven将下载它。
- en: Just as you named your project, the first three tags, `groupId`, `artifactId`,
    and `version`, name the library you wish to use. Maven uses this information to
    identify what it must look for in your local repository or a remote repository
    so it can be downloaded.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你命名你的项目一样，前三个标签`groupId`、`artifactId`和`version`命名了你希望使用的库。Maven使用这些信息来识别它必须在本地仓库或远程仓库中查找什么，以便下载。
- en: 'A new tag appears here called `<scope>`. Here are the four most used scopes:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这里出现了一个新的标签，称为`<scope>`。以下是四个最常用的作用域：
- en: '**Compile scope**: This is the default scope. It means that this library is
    required to compile the program. It will also be added to the package.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编译作用域**：这是默认的作用域。这意味着这个库是编译程序所必需的。它也将被添加到包中。'
- en: '**Runtime scope**: This library must be available at runtime, but it is not
    used for compiling. **Java Database Connectivity** drivers fall into this category,
    as Java only uses them when the program runs.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行时作用域**：这个库必须在运行时可用，但不用于编译。**Java数据库连接**驱动程序属于这一类别，因为Java仅在程序运行时使用它们。'
- en: '**Provided scope**: When you run a program in a framework such as Spring or
    an application server such as WildFly, many of the project’s dependency libraries
    are included in the server. This means you do not need to add them to the archive.
    You will need these files to compile the code, and Maven will download them into
    your repository so that the compiler can verify that you are using them correctly.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供作用域**：当你在一个框架如Spring或一个应用服务器如WildFly中运行程序时，项目的大多数依赖库都包含在服务器中。这意味着你不需要将它们添加到存档中。你需要这些文件来编译代码，Maven将它们下载到你的仓库中，以便编译器可以验证你是否正确使用它们。'
- en: '`test` branch of the Maven project and not the `java` branch.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Maven项目的`test`分支而不是`java`分支。
- en: The build section
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建部分
- en: Next up is the `build` section, where we define what tasks we want Maven to
    carry out and what we will need to accomplish. In Maven, you can express the tasks
    you want to carry out as either a lifecycle, a phase, or a goal. A lifecycle consists
    of multiple phases, a phase can consist of multiple goals, and a goal is a specific
    task.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是`build`部分，其中我们定义了Maven要执行的任务以及我们需要完成的事情。在Maven中，你可以将你想要执行的任务表达为生命周期、阶段或目标。一个生命周期由多个阶段组成，一个阶段可以由多个目标组成，一个目标是一个特定的任务。
- en: 'In Maven, there are just three lifecycles, whereas there are numerous phases
    and goals:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在Maven中，只有三个生命周期，而有许多阶段和目标：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Here we have the `defaultGoal` tag of the `build` section of a POM file. If
    you do not use this tag, then Maven will use the `Default` lifecycle, which, in
    turn, invokes 21 phases. In this example, we are explicitly invoking two phases
    and one goal.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们有 POM 文件 `build` 部分的 `defaultGoal` 标签。如果你不使用此标签，那么 Maven 将使用 `Default` 生命周期，它反过来会调用
    21 个阶段。在这个例子中，我们明确调用两个阶段和一个目标。
- en: As the name of this tag implies, this is the set of phases and goals that will
    be performed in case no goals or phases were otherwise defined (via the command
    line). The `clean` belongs to the `Clean` lifecycle, which, in turn, consists
    of three phases. When we list a phase such as `clean`, Maven will also carry out
    every phase that precedes it. In the case of the `Clean` lifecycle, if you show
    the `clean` phase, then it also carries out the `pre-clean` phase but not the
    `post-clean` phase. To carry out all the operations of a lifecycle, you simply
    use the last phase of the lifecycle.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如此标签的名称所暗示的，这是在未定义任何目标或阶段（通过命令行）的情况下将要执行的一组阶段和目标。`clean` 属于 `Clean` 生命周期，它反过来由三个阶段组成。当我们列出如
    `clean` 这样的阶段时，Maven 也会执行其前面的每个阶段。在 `Clean` 生命周期的案例中，如果你显示 `clean` 阶段，它也会执行 `pre-clean`
    阶段，但不会执行 `post-clean` 阶段。要执行生命周期的所有操作，你只需使用生命周期的最后一个阶段。
- en: In this example, we see two phases and one goal. We just saw that the `clean`
    phase invokes its preceding phase first. The package phase is preceded by 16 phases,
    each of which will be carried out. A goal is a single task and does not invoke
    anything else. The `exec:java` goal is used to execute your code explicitly after
    all previous phases and goals complete successfully.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们看到两个阶段和一个目标。我们刚刚看到 `clean` 阶段首先调用其前面的阶段。包阶段之前有 16 个阶段，每个阶段都将被执行。目标是一个单一的任务，不会调用其他任何东西。`exec:java`
    目标用于在所有前面的阶段和目标成功完成后显式执行你的代码。
- en: Here are a handful of the phases and goals we will be using.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这里列举了我们将会使用的一些阶段和目标。
- en: Phases
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 阶段
- en: '`clean`: Deletes the target folder. This will force Maven to compile all the
    source files. If not used, only source code files with a date and time later than
    the corresponding `.class` file are compiled. This goal is a member of the `Clean`
    lifecycle and does not invoke any other goals in other lifecycles.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clean`: 删除目标文件夹。这将强制 Maven 编译所有源文件。如果不使用，则只有日期和时间晚于相应 `.class` 文件的源代码文件被编译。此目标属于
    `Clean` 生命周期，并且不会调用其他生命周期的任何目标。'
- en: '`compile`: `compile` will go through the source code tree, compile every source
    code file, and write the bytecode to the target folder. As a member of the `Default`
    lifecycle, and before Maven runs `compile`, it will first perform all the goals
    that precede it.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`compile`: `compile` 将遍历源代码树，编译每个源代码文件，并将字节码写入目标文件夹。作为 `Default` 生命周期的成员，在
    Maven 运行 `compile` 之前，它将首先执行其前面的所有目标。'
- en: '`test`: This goal will invoke the unit tests. As the subsequent goals will
    run tests, we do not have to list them explicitly. However, if you just want to
    compile and test your code, then you can use `test` as the final goal.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test`: 此目标将调用单元测试。由于后续的目标将运行测试，我们不必明确列出它们。但是，如果你只想编译和测试你的代码，那么你可以使用 `test`
    作为最终目标。'
- en: '`package`: This combines all the files into a `jar` package assuming that the
    `<packaging>` tag in the POM file is `jar`. The test goal precedes the package
    in the `Default` lifecycle. Therefore, Maven will run the unit tests, if there
    are any, first.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package`: 如果 POM 文件中的 `<packaging>` 标签是 `jar`，则此目标会将所有文件组合成一个 `jar` 包。测试目标在
    `Default` 生命周期中先于包执行。因此，如果存在单元测试，Maven 将首先运行它们。'
- en: '`install`: This adds this project to your local repository if all previous
    goals have been completed successfully.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`install`: 如果所有前面的目标都成功完成，则此目标会将此项目添加到你的本地仓库中。'
- en: Goals
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 目标
- en: '`exec:java` and `exec:exec`: These two are not part of the standard lifecycles.
    They require a special plugin and do not execute any other goals. `exec:java`
    will use the same JVM that Maven is running in. `exec:exec` will spawn or start
    up a new JVM. This can be useful if you need to configure the JVM.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exec:java` 和 `exec:exec`: 这两个不属于标准生命周期。它们需要一个特殊的插件，并且不会执行任何其他目标。`exec:java`
    将使用 Maven 运行的相同 JVM。`exec:exec` 将启动或创建一个新的 JVM。如果你需要配置 JVM，这可能会很有用。'
- en: 'You can override the `defaultGoal` tag by placing a phase name on the command
    line as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在命令行上放置阶段名称来覆盖 `defaultGoal` 标签，如下所示：
- en: '[PRE22]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this example, as the package belongs to the `Default` lifecycle, all phases
    that precede it will be carried out first. All the phases and goals in `defaultGoal`
    are ignored.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于包属于`Default`生命周期，所有在其之前的阶段都将首先执行。`defaultGoal`中的所有阶段和目标都将被忽略。
- en: Plugins
  id: totrans-168
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 插件
- en: Here is the concluding section of the build, where we will define the plugins.
    Except for `maven-clean-plugin` and `exec-maven-plugin`, all of these plugins
    exist in Maven as defaults. The versions of the plugins are decided when a major
    revision occurs, such as going from Maven 2 to Maven 3\. This list is not updated
    with point releases.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是构建的结论部分，我们将定义插件。除了`maven-clean-plugin`和`exec-maven-plugin`之外，所有这些插件在Maven中作为默认插件存在。插件版本在主要修订发生时决定，例如从Maven
    2到Maven 3。此列表不会随着点版本更新。
- en: Maven 3, introduced in 2010, has an internal list of default plugins that is
    quite old. For that reason, you should declare every plugin you will use, even
    if there is a default; that is what you see here.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Maven 3，于2010年推出，有一个相当旧的默认插件列表。因此，你应该声明你将使用的每个插件，即使有默认的；这就是你在这里看到的内容。
- en: 'Some plugins have tags that allow you to configure how they carry out their
    task. `maven-jar-plugin` allows you to show the class that holds the main method
    in its `<mainClass>` tag. We will configure the `surefire` plugin when we examine
    unit testing to turn unit tests on or off. As we look at different programs, we
    will be enhancing this and other POM files we will use:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一些插件有标签，允许你配置它们如何执行任务。`maven-jar-plugin`允许你在`<mainClass>`标签中显示包含main方法的类。当我们检查单元测试时，我们将配置`surefire`插件来打开或关闭单元测试。当我们查看不同的程序时，我们将增强这个以及其他我们将使用的POM文件：
- en: 'This plugin is responsible for deleting any output from a previous run of Maven:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此插件负责删除Maven之前运行产生的任何输出：
- en: '[PRE23]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This plugin includes any files in the resource folder of a project into the
    final packaging; a resource can be an image or a properties file:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此插件将项目资源文件夹中的任何文件包含到最终打包中；资源可以是图像或属性文件：
- en: '[PRE24]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This is the plugin that invokes the Java compiler:'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是调用Java编译器的插件：
- en: '[PRE25]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If you are performing unit tests, this plugin is used to configure the tests,
    such as to write the test results to a file:'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在执行单元测试，此插件用于配置测试，例如将测试结果写入文件：
- en: '[PRE26]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This is the plugin responsible for packaging your program into a `jar` file.
    It includes the configuration to make the `jar` file executable by just double-clicking
    on it:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是负责将你的程序打包成`jar`文件的插件。它包括配置，使得只需双击即可使`jar`文件可执行：
- en: '[PRE27]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This plugin allows Maven to execute your program:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此插件允许Maven执行你的程序：
- en: '[PRE28]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We close the root tag:'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们关闭根标签：
- en: '[PRE29]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: With our POM file ready, we are now ready to use Maven.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的POM文件已经准备好了，我们现在可以使用Maven了。
- en: Running Maven
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行Maven
- en: Once you have set up the Maven file structure, written your `pom.xml` file,
    coded your sources, and added any resources, such as images, then all you need
    to do is use Maven, which is quite straightforward.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置了Maven文件结构，编写了`pom.xml`文件，编写了源代码，并添加了任何资源，如图片，那么你所需要做的就是使用Maven，这相当直接。
- en: Let us begin by running Maven on the command line.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先在命令行上运行Maven。
- en: Command-line Maven
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令行Maven
- en: 'Here are the steps to follow to use Maven on the command line:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是使用命令行上Maven的步骤：
- en: Open a terminal or console in the folder that holds the project’s folders, such
    as `src`.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在包含项目文件夹的文件夹中打开终端或控制台，例如`src`。
- en: Configure your setup if needed, should you not be an admin or superuser.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不是管理员或超级用户，需要配置你的设置。
- en: Enter the `mvn` command at the prompt. If there are no errors in your code,
    it should conduct all the goals you asked for. If there are errors, then you need
    to review the output of Maven, correct the errors, and use `mvn` again.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示符下输入`mvn`命令。如果你的代码没有错误，它应该执行你请求的所有目标。如果有错误，那么你需要检查Maven的输出，纠正错误，然后再次使用`mvn`。
- en: 'Here is my output from a successful build:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我的成功构建的输出：
- en: '[PRE30]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'First up is to clean, meaning delete, any code generated the last time we built
    this program:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是清理，意味着删除我们上次构建此程序时生成的任何代码：
- en: '[PRE31]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If there were resources, then we would be able see that they were added to
    the program. We do not have resources, so this plugin will do nothing:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有资源，我们就能看到它们被添加到程序中。我们没有资源，所以此插件将不会做任何事情：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, the compiler is invoked. As we first cleaned the project, the plugin detected
    that all source code files must be compiled. If we did not use the clear goal,
    it would only compile source code files whose date is more recent than the bytecode
    file:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编译器被调用了。由于我们首先清理了项目，插件检测到所有源代码文件都必须被编译。如果我们没有使用清理目标，它只会编译日期比字节码文件更近的源代码文件：
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You can have resources that are only used for unit testing. If there are any,
    they will be added to the test build of the project:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以有仅用于单元测试的资源。如果有，它们将被添加到项目的测试构建中：
- en: '[PRE34]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The compiler is now invoked a second time to compile any unit test classes
    you have written:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 编译器现在将第二次被调用以编译你编写的任何单元测试类：
- en: '[PRE35]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This plugin is responsible for running the unit tests that were just compiled:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此插件负责运行刚刚编译的单元测试：
- en: '[PRE36]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As the packaging was defined as `.jar`, this plugin will now create the `.``jar`
    file:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于打包被定义为`.jar`，此插件现在将创建`.jar`文件：
- en: '[PRE37]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This last plugin will execute your code:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个插件将执行你的代码：
- en: '[PRE38]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Here is the program output:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是程序输出：
- en: '[PRE39]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'All has gone well, and you receive the following report on how long the whole
    process took:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一切顺利，你将收到以下报告，说明整个过程花费了多长时间：
- en: '[PRE40]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Java requires that every statement or expression must end with a semicolon.
    I purposely removed a semicolon from one of the files so that we can see how coding
    errors are expressed. The following appears after a build failure is declared:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Java要求每个语句或表达式都必须以分号结束。我故意从一个文件中移除了一个分号，以便我们可以看到编码错误是如何表达的。在声明构建失败之后，会出现以下内容：
- en: '[PRE41]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: You can also request more information on failures by running Maven as `mvn -X`.
    This will provide more information should the error be due to a problem with the
    `pom.xml` file.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过以`mvn -X`运行Maven来请求更多关于失败的信息。如果错误是由于`pom.xml`文件的问题，这将提供更多信息。
- en: Running Maven in an IDE
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在IDE中运行Maven
- en: Maven is normally included in IDE distributions. If you do not plan to work
    from the command line, you do not need to download and install Maven unless your
    IDE requests.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Maven通常包含在IDE发行版中。如果你不打算从命令行工作，除非你的IDE要求，否则你不需要下载和安装Maven。
- en: All IDEs have a `run` command and/or a `run maven` command. If both exist, use
    `run maven`. If there is no `run maven` command, expect the `run` command to recognize
    that this is a Maven project and use Maven rather than its internal build system
    to process your program.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 所有IDE都有一个`run`命令和/或一个`run maven`命令。如果两者都存在，请使用`run maven`。如果没有`run maven`命令，请预期`run`命令会识别这是一个Maven项目，并使用Maven而不是其内部构建系统来处理你的程序。
- en: An IDE will highlight errors in your source code and `pom.xml` file before you
    run the project. When the IDE recognizes errors, it will not compile your code
    until the issues are resolved.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行项目之前，IDE会突出显示你的源代码和`pom.xml`文件中的错误。当IDE识别到错误时，它将不会编译你的代码，直到问题得到解决。
- en: Summary
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned how to use Maven, the most widely used Java
    build tool. The heart of Maven is the `pom.xml` file; we have seen the most significant
    sections of this file and what they are used for. Going forward, all the examples
    will be Maven-based.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Maven，这是最广泛使用的Java构建工具。Maven的核心是`pom.xml`文件；我们已经看到了这个文件最重要的部分以及它们的作用。从现在开始，所有示例都将基于Maven。
- en: By now, you know how to organize the directories for a Maven project, the components
    of a basic `pom.xml` file, and how to invoke Maven to build and execute your program.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你知道如何组织Maven项目的目录，基本`pom.xml`文件的组件，以及如何调用Maven来构建和执行你的程序。
- en: Next, we will examine the object-oriented structure of a Java program, what
    an object is, and the coding syntax for loops and decisions.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查Java程序的对象结构，什么是对象，以及循环和决策的编码语法。
- en: Further reading
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '*Maven: The Complete* *Reference*: [https://books.sonatype.com/mvnref-book/reference/index.html](https://books.sonatype.com/mvnref-book/reference/index.html)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven：完整** **参考**：[https://books.sonatype.com/mvnref-book/reference/index.html](https://books.sonatype.com/mvnref-book/reference/index.html)'
- en: '*Maven by* *Example*: [https://books.sonatype.com/mvnex-book/reference/index.html](https://books.sonatype.com/mvnex-book/reference/index.html)'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通过示例** **了解 Maven**：[https://books.sonatype.com/mvnex-book/reference/index.html](https://books.sonatype.com/mvnex-book/reference/index.html)'
- en: '*The Maven* *Cookbook*: [https://books.sonatype.com/mcookbook/reference/index.html](https://books.sonatype.com/mcookbook/reference/index.html)'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Maven** **食谱**：[https://books.sonatype.com/mcookbook/reference/index.html](https://books.sonatype.com/mcookbook/reference/index.html)'
- en: Part 2:Language Fundamentals
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二部分：语言基础
- en: You are an experienced coder who needs to learn the syntax of the Java language
    as quickly as possible. This part of the book covers the details you need to know
    to construct and code a solution in Java.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你是一位经验丰富的程序员，需要尽可能快地学习 Java 语言的语法。本书的这一部分涵盖了您构建和编写 Java 解决方案所需了解的详细信息。
- en: 'This part contains the following chapters:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 4*](B19088_04.xhtml#_idTextAnchor086), *Language Fundamentals – Data
    Types and Variables*'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第4章*](B19088_04.xhtml#_idTextAnchor086), *语言基础 – 数据类型和变量*'
- en: '[*Chapter 5*](B19088_05.xhtml#_idTextAnchor106), *Language Fundamentals – Classes*'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B19088_05.xhtml#_idTextAnchor106), *语言基础 – 类*'
- en: '[*Chapter 6*](B19088_06.xhtml#_idTextAnchor128), *Methods, Interfaces, Records,
    and Their Relationships*'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B19088_06.xhtml#_idTextAnchor128), *方法、接口、记录及其关系*'
- en: '[*Chapter 7*](B19088_07.xhtml#_idTextAnchor154), *Java Syntax and Exceptions*'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B19088_07.xhtml#_idTextAnchor154), *Java 语法和异常*'
- en: '[*Chapter 8*](B19088_08.xhtml#_idTextAnchor172), *Arrays, Collections, Generics,
    Functions, and Streams*'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B19088_08.xhtml#_idTextAnchor172), *数组、集合、泛型、函数和流*'
- en: '[*Chapter 9*](B19088_09.xhtml#_idTextAnchor195), *Using Threads in Java*'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第9章*](B19088_09.xhtml#_idTextAnchor195), *在 Java 中使用线程*'
- en: '[*Chapter 10*](B19088_10.xhtml#_idTextAnchor214), *Implementing Software Design
    Principles and Patterns in Java*'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B19088_10.xhtml#_idTextAnchor214), *在 Java 中实现软件设计原则和模式*'
- en: '[*Chapter 11*](B19088_11.xhtml#_idTextAnchor232), *Documentation and Logging*'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第11章*](B19088_11.xhtml#_idTextAnchor232), *文档和日志*'
- en: '[*Chapter 12*](B19088_12.xhtml#_idTextAnchor244), *BigDecimal and Unit Testing*'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第12章*](B19088_12.xhtml#_idTextAnchor244), *BigDecimal 和单元测试*'
