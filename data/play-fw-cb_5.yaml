- en: Chapter 5. Creating Plugins and Modules
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 5 章。创建插件和模块：
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Creating and using your own plugin
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并使用您自己的插件：
- en: Building a flexible registration module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建灵活的注册模块
- en: Using the same model for different applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用相同的模型为不同的应用程序服务
- en: Managing module dependencies
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理模块依赖关系：
- en: Adding private module repositories using Amazon S3
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Amazon S3 添加私有模块仓库：
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will look at how we can break down our Play 2.0 web applications
    into modular, reusable components. We will look at how we can create plugins and
    modules as a Play 2.0 subproject and as an independent module published in an
    internal module repository.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何将我们的 Play 2.0 网络应用程序分解为模块化、可重用的组件。我们将探讨如何将插件和模块作为 Play 2.0 子项目以及作为独立模块发布到内部模块仓库：
- en: A Play 2.0 plugin can be useful when creating independent services and initializing
    shared resources such as database connections and Akka actor references. Other
    examples of useful Play plugins include the **play.i18n.MessagesPlugin**, which
    manages internationalization of text, and the **play.api.db.DBPlugin,** which
    abstracts how a Play web application connects and interfaces with databases.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建独立服务并初始化共享资源（如数据库连接和 Akka actor 引用）时，Play 2.0 插件非常有用。其他有用的 Play 插件示例包括 **play.i18n.MessagesPlugin**，它管理文本的国际化和
    **play.api.db.DBPlugin**，它抽象了 Play 网络应用程序如何连接和与数据库接口：
- en: A Play 2.0 module is useful to create smaller, logical subcomponents of a larger
    application; this promotes better code maintenance and isolation of tests.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Play 2.0 模块对于创建较大应用程序的较小、逻辑子组件非常有用；这促进了更好的代码维护和测试的隔离：
- en: Creating and using your own plugin
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建并使用您自己的插件：
- en: In this recipe, we will explore how to use the Play 2.0 plugin that will monitor
    the filesystem for a specified file. We will initialize our plugin as part of
    the Play web application lifecycle, and the main plugin logic will be triggered
    on application startup.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨如何使用用于监视指定文件的 Play 2.0 插件。我们将初始化我们的插件作为 Play 网络应用程序生命周期的一部分，并且主要的插件逻辑将在应用程序启动时触发。
- en: How to do it…
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点……
- en: 'For Java, we need to perform the following steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Java，我们需要执行以下步骤：
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Hot-Reloading 功能运行 `foo_java` 应用程序：
- en: '[PRE0]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the modules directory inside `foo_java`:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `foo_java` 内创建 modules 目录：
- en: '[PRE1]'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Generate the project directory for our first plugin inside `foo_java/modules`:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `foo_java/modules` 内为我们的第一个插件生成项目目录：
- en: '[PRE2]'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Remove the contents of the `modules/filemon/conf/application.conf` file, as
    these settings will conflict with the main configuration file that we have defined
    in the project root:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `modules/filemon/conf/application.conf` 文件的内容，因为这些设置将与我们在项目根目录中定义的主要配置文件冲突：
- en: '[PRE3]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Remove the contents of the `modules/filemon/conf/routes` file and rename it
    to `filemon.routes`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `modules/filemon/conf/routes` 文件的内容，并将其重命名为 `filemon.routes`：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Remove the views directory from `modules/filemon/app`:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `modules/filemon/app` 中移除 views 目录：
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Remove the file `modules/filemon/app/controller/Application.java`using the
    following command:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令移除 `modules/filemon/app/controller/Application.java` 文件：
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Create a new package inside `modules/filemon/app`/:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `modules/filemon/app`/ 内创建一个新的包：
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Create the `FileMonitor` plugin inside `modules/filemon/app/FileMonitor.java`
    with the following content:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `modules/filemon/app/FileMonitor.java` 中创建 `FileMonitor` 插件，内容如下：
- en: '[PRE8]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Enable the plugin from the `foo_java` application by creating the plugin''s
    configuration file, `foo_java/conf/play.plugins`, and declaring our plugin there:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建插件配置文件 `foo_java/conf/play.plugins` 并在其中声明我们的插件来启用 `foo_java` 应用程序中的插件：
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the dependency between the root project (`foo_java`) and the module (`filemon`)
    in `build.sbt`, and add the `aggregate()` setting to ensure that activator tasks
    called from the project root, `foo_java`, are also invoked on the child module,
    `filemon`:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `build.sbt` 中添加根项目 (`foo_java`) 和模块 (`filemon`) 之间的依赖关系，并添加 `aggregate()`
    设置以确保从项目根目录 `foo_java` 调用的 activator 任务也会在子模块 `filemon` 上执行：
- en: '[PRE10]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Start the `foo_java` application:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 `foo_java` 应用程序：
- en: '[PRE11]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Request the default route and initialize our app:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求默认路由并初始化我们的应用程序：
- en: '[PRE12]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Confirm that the file monitor is running by looking at the console log of the
    `foo_java` application:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看 `foo_java` 应用程序的控制台日志来确认文件监视器正在运行：
- en: '[PRE13]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For Scala, we need to perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Scala，我们需要执行以下步骤：
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 Hot-Reloading 功能运行 `foo_scala` 应用程序：
- en: '[PRE14]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create the modules directory inside `foo_scala`:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala`内部创建模块目录：
- en: '[PRE15]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Generate the project directory for our first plugin inside `foo_scala/modules`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/modules`内部为我们的第一个插件生成项目目录：
- en: '[PRE16]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Remove the contents of the `modules/filemon/conf/application.conf` file:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`modules/filemon/conf/application.conf`文件的内容：
- en: '[PRE17]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Remove the contents of the `modules/filemon/conf/routes` file and rename it
    to `filemon.routes`:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`modules/filemon/conf/routes`文件的内容，并将其重命名为`filemon.routes`：
- en: '[PRE18]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Remove the views directory from `modules/filemon/app`:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`modules/filemon/app`中删除视图目录：
- en: '[PRE19]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Remove the file `modules/filemon/app/controller/Application.scala` using the
    following command:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令删除文件`modules/filemon/app/controller/Application.scala`：
- en: '[PRE20]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Create a new package inside `modules/filemon/app/`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/filemon/app/`内部创建一个新的包：
- en: '[PRE21]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Create the `FileMonitor` plugin inside `modules/filemon/app/FileMonitor.scala`
    with the following contents:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/filemon/app/FileMonitor.scala`内部创建`FileMonitor`插件，内容如下：
- en: '[PRE22]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Enable the plugin from the `foo_scala` application by creating the plugin''s
    configuration file, `foo_scala/conf/play.plugins`, and declaring our plugin there:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建插件配置文件`foo_scala/conf/play.plugins`并在其中声明我们的插件来从`foo_scala`应用程序中启用插件：
- en: '[PRE23]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the dependency between the root project (`foo_scala`) and the module (`filemon`)
    in `build.sbt`, and add the `aggregate()` setting to ensure that activator tasks
    called from the project root, `foo_java`, are also invoked on the child module,
    `filemon`:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`中添加根项目（`foo_scala`）和模块（`filemon`）之间的依赖关系，并添加`aggregate()`设置以确保从项目根`foo_java`调用的activator任务也会在子模块`filemon`上执行：
- en: '[PRE24]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Start the `foo_scala` application:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`foo_scala`应用程序：
- en: '[PRE25]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Request our default route and initialize our app:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求我们的默认路由并初始化我们的应用程序：
- en: '[PRE26]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Confirm that the file monitor is running by looking at the console log of the
    `foo_scala` application:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过查看`foo_scala`应用程序的控制台日志来确认文件监控器正在运行：
- en: '[PRE27]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we set up our first Play 2.0 plugin. The plugin simply checks
    for a file or directory in the local filesystem and logs in the console whether
    the file is found or not. We set up our plugin by creating the plugin project
    inside the newly created directory in the project root modules in `foo_java/modules`
    and `foo_scala/modules`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们设置了我们的第一个Play 2.0插件。该插件简单地检查本地文件系统中是否存在文件或目录，并在控制台日志中记录文件是否被找到。我们通过在项目根模块`foo_java/modules`和`foo_scala/modules`中创建插件项目来设置我们的插件：
- en: '[PRE28]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Once the plugin project is created, we need to remove some boilerplate files
    and configurations to ensure that the plugin does not conflict with the root projects,
    `foo_java` and `foo_scala`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了插件项目，我们需要删除一些样板文件和配置，以确保插件不会与根项目`foo_java`和`foo_scala`冲突：
- en: 'We then created the `FileMonitor` plugin in `modules/filemon/app/filemon/FileMonitor.scala`,
    extending the `play.api.Plugin` trait, which upon startup, creates a scheduled
    job which in turn checks for the existence of a local file every second:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`modules/filemon/app/filemon/FileMonitor.scala`中创建了`FileMonitor`插件，它扩展了`play.api.Plugin`特质，在启动时创建一个计划任务，该任务每隔一秒检查本地文件是否存在：
- en: '[PRE29]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once we had our plugin in place, we activated it by declaring it in the `conf/play.plugins`
    file in the root projects, `foo_java` and `foo_scala`, which follow the notation
    `&lt;Priority Level&gt;:&lt;Plugin&gt;`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了插件，我们通过在根项目`foo_java`和`foo_scala`的`conf/play.plugins`文件中声明它来激活它，该文件遵循`<优先级级别>:<插件>`的表示法：
- en: '[PRE30]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In our case, we used `1001` as the priority level to ensure that the Akka Play
    2.0 plugin loads first. Refer to the official Play documentation for additional
    guidelines for declaring your plugins in the `play.plugins` configuration file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们使用了`1001`作为优先级级别，以确保Akka Play 2.0插件首先加载。请参考官方Play文档以获取在`play.plugins`配置文件中声明您的插件的额外指南：
- en: '[https://www.playframework.com/documentation/2.3.x/JavaPlugins](https://www.playframework.com/documentation/2.3.x/JavaPlugins)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.playframework.com/documentation/2.3.x/JavaPlugins](https://www.playframework.com/documentation/2.3.x/JavaPlugins)'
- en: '[https://www.playframework.com/documentation/2.3.x/ScalaPlugins](https://www.playframework.com/documentation/2.3.x/ScalaPlugins)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.playframework.com/documentation/2.3.x/ScalaPlugins](https://www.playframework.com/documentation/2.3.x/ScalaPlugins)'
- en: 'Finally, we ran the web application and confirmed our plugin to be running
    by watching the console log:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们运行了Web应用程序，并通过查看控制台日志来确认我们的插件正在运行：
- en: '[PRE31]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'You can confirm the behavior of your plugin by creating or deleting the monitor
    file, in this example, `/var/tmp/foo`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建或删除监控文件来确认您插件的运行行为，在这个例子中，是`/var/tmp/foo`：
- en: '[PRE32]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'You will see the output in the logs change accordingly:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到日志输出相应地改变：
- en: '[PRE33]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Building a flexible registration module
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个灵活的注册模块
- en: In this recipe, we will create a new registration module that will manage user
    registration and authentication requests. Creating a module for this allows us
    to reuse a very common workflow in the modern web application.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个新的注册模块，该模块将管理用户注册和身份验证请求。创建这样一个模块允许我们在现代Web应用程序中重用一个非常常见的流程。
- en: How to do it…
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'For Java, we need to perform the following steps:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要执行以下步骤：
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Hot-Reloading启用运行`foo_java`应用程序：
- en: '[PRE34]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Inside the modules directory, `foo_java/modules`, generate the registration
    module project using the `activator`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块目录内，`foo_java/modules`中，使用`activator`生成注册模块项目：
- en: '[PRE35]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the dependency between the root project, `foo_java`, and the module, `registration`,
    in `foo_java/build.sbt`:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/build.sbt`中添加根项目`foo_java`和模块`registration`之间的依赖关系：
- en: '[PRE36]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Remove all the unnecessary boilerplate files and configurations from the registration
    module:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从注册模块中移除所有不必要的样板文件和配置：
- en: '[PRE37]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the registration plugin in `module/registration/app/registration/RegistrationPlugin.java`
    with the following content:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`module/registration/app/registration/RegistrationPlugin.java`中创建以下内容的注册插件：
- en: '[PRE38]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, create the `RegistrationService` interface and implementation class referred
    to by the `Registration` plugin:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建由`Registration`插件引用的`RegistrationService`接口和实现类：
- en: '[PRE39]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Create the `User` model entity in `modules/registration/app/registration/User.java`:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/registration/app/registration/User.java`中创建`User`模型实体：
- en: '[PRE40]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Create the `Registration` controller and routes that will handle registration
    and login requests in the project root, `foo/java/app/controllers/Registrations.java`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录，`foo/java/app/controllers/Registrations.java`中创建处理注册和登录请求的`Registration`控制器和路由：
- en: '[PRE41]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Add the routes for the newly added `Registration` actions in the project root,
    `foo_java/conf/routes`:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录，`foo_java/conf/routes`中添加新添加的`Registration`动作的路由：
- en: '[PRE42]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Finally, declare the registration plugin in the project root `foo_java/conf/play.plugins`
    file:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在项目根目录下的`foo_java/conf/play.plugins`文件中声明注册插件：
- en: '[PRE43]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Using `curl`, submit a new registration and log in with the specified registration
    details; verify that our endpoint responds with an HTTP status 200 for successful
    operations by inspecting the response headers:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`，提交新的注册和登录请求，并使用指定的注册详情；通过检查响应头来验证我们的端点对于成功操作返回HTTP状态码200：
- en: '[PRE44]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'For Scala, we need to perform the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要执行以下步骤：
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Hot-Reloading启用运行`foo_scala`应用程序：
- en: '[PRE45]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Inside the modules directory (`foo_scala/modules`), generate our registration
    module project using the `activator`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块目录（`foo_scala/modules`）内，使用`activator`生成我们的注册模块项目：
- en: '[PRE46]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Add the dependency between the root project, `foo_scala`, and the module, `registration`,
    in `build.sbt`:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`中添加根项目`foo_scala`和模块`registration`之间的依赖关系：
- en: '[PRE47]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Remove all the unnecessary boilerplate files and configurations from the registration
    module:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从注册模块中移除所有不必要的样板文件和配置：
- en: '[PRE48]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Create the registration plugin in `module/registration/app/registration/RegistrationPlugin.scala`
    with the following content:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`module/registration/app/registration/RegistrationPlugin.scala`中创建以下内容的注册插件：
- en: '[PRE49]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Next, create the `RegistrationService` class referred to by the `Registration`
    plugin:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建由`Registration`插件引用的`RegistrationService`类：
- en: '[PRE50]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Create the `User` model entity in `modules/registration/app/registration/User.scala`:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`modules/registration/app/registration/User.scala`中创建`User`模型实体：
- en: '[PRE51]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Create the `Registration` controller and routes that will handle registration
    and login requests in the project root, `foo_scala/app/controllers/Registrations.scala`:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录，`foo_scala/app/controllers/Registrations.scala`中创建处理注册和登录请求的`Registration`控制器和路由：
- en: '[PRE52]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Add the routes for the newly added `Registration` actions:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加新添加的`Registration`动作的路由：
- en: '[PRE53]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Finally, declare the registration plugin in the project root, `foo_scala/conf/play.plugins`
    file:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在项目根目录中，`foo_scala/conf/play.plugins`文件中声明注册插件：
- en: '[PRE54]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Using `curl`, submit a new registration and login with the specified registration
    details; verify that our endpoint responds with an HTTP status 200 for successful
    operations by inspecting the response headers:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`，提交新的注册和登录请求，并使用指定的注册详情；通过检查响应头来验证我们的端点对于成功操作返回HTTP状态码200：
- en: '[PRE55]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: How it works…
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In this recipe, we created a module that will handle registration functions,
    such as signup and login. We created it as a Play plugin so that it can not only
    be maintainable but also reusable in other applications. Another advantage of
    using modules is that when writing unit tests, we can isolate its execution in
    its enclosed subproject only and not the entire project.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们创建了一个模块来处理注册函数，例如注册和登录。我们将其创建为一个Play插件，以便它不仅易于维护，而且可以在其他应用程序中重用。使用模块的另一个优点是，在编写单元测试时，我们可以在其封闭的子项目中隔离其执行，而不是整个项目。
- en: 'We created the `registration` plugin inside the modules directory in our project
    root directory. We declared the dependency between the module and the main project
    in `build.sbt`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在项目根目录的模块目录内创建了`registration`插件。我们在`build.sbt`中声明了模块与主项目之间的依赖关系：
- en: '[PRE56]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'We then enabled the plugin in `conf/play.plugins` using the priority level
    `599`, within the 500-600 range for data-related plugins:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在`conf/play.plugins`中使用优先级`599`（在500-600范围内用于数据相关插件）启用了插件：
- en: '[PRE57]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We then grabbed a reference to the `RegistrationService` interface from the
    `Registration` plugin inside the controller:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们从控制器中的`Registration`插件中获取了`RegistrationService`接口的引用：
- en: '[PRE58]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Once we established the reference, all registration functions were simply delegated
    to the `RegistrationService` interface from the controller:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦建立了引用，所有注册函数都简单地从控制器委托给了`RegistrationService`接口：
- en: '[PRE59]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Using `curl`, we can also validate that our registration controller responds
    correctly to bad authentication:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`curl`，我们还可以验证我们的注册控制器是否正确响应了错误的认证：
- en: '[PRE60]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Using the same model for different applications
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用相同的模型为不同的应用程序
- en: 'For this recipe, we will create a new standalone module that will contain product-related
    functions and data model classes, and we will publish it on a local repository:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将创建一个新的独立模块，该模块将包含与产品相关的函数和数据模型类，并且我们将它发布到本地仓库中：
- en: How to do it…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'For Java, we need to perform the following steps:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要执行以下步骤：
- en: 'Create a new Play 2 project in the same directory level as `foo_java`:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`foo_java`相同的目录级别中创建一个新的Play 2项目：
- en: '[PRE61]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Create our default module package inside the app directory, `product-contrib/app`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/product-contrib/app`目录中创建我们的默认模块包：
- en: '[PRE62]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Create the models package, which will contain all the data model classes:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含所有数据模型类的模型包：
- en: '[PRE63]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Remove the contents of the `conf/application.conf` file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`conf/application.conf`文件的内容：
- en: '[PRE64]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Remove the contents of the `conf/routes` file and rename it to `productcontrib.routes`:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`conf/routes`文件的内容，并将其重命名为`productcontrib.routes`：
- en: '[PRE65]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Remove the views directory from `modules/filemon/app`:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`modules/filemon/app`中删除视图目录：
- en: '[PRE66]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Remove the file `app/controller/Application.java`:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`app/controller/Application.java`文件：
- en: '[PRE67]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Create the product model in `app/productcontrib/models/Product.java` with the
    following contents:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/productcontrib/models/Product.java`中创建产品模型，内容如下：
- en: '[PRE68]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Create the `ProductService` interface (`ProductService.java`) and In implementation
    class (`ProductServiceImpl.java`) in the package `app/productcontrib/services`:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/productcontrib/services`包中创建`ProductService`接口（`ProductService.java`）和实现类（`ProductServiceImpl.java`）：
- en: '[PRE69]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Insert additional module package settings in the `build.sbt` file:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`文件中插入额外的模块包设置：
- en: '[PRE70]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Using the activator, build the `contrib.jar` and publish it to the remote internal
    repository:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用activator构建`contrib.jar`并将其发布到远程内部仓库：
- en: '[PRE71]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You should be able to confirm in the console logs whether the upload was successful
    or not:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该在控制台日志中能够确认上传是否成功：
- en: '[PRE72]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'For Scala, we need to perform the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要执行以下步骤：
- en: 'Create a new Play 2 project in the same directory level as `foo_scala`:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与`foo_scala`相同的目录级别中创建一个新的Play 2项目：
- en: '[PRE73]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Create the default module package inside the app directory, `user-contrib/app`:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/user-contrib/app`目录中创建默认模块包：
- en: '[PRE74]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Create the models package that will contain all the data model classes:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个包含所有数据模型类的模型包：
- en: '[PRE75]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Remove the contents of the `conf/application.conf` file:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`conf/application.conf`文件的内容：
- en: '[PRE76]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'Remove the contents of the `conf/routes` file and rename it to `usercontrib.routes`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`conf/routes`文件的内容，并将其重命名为`usercontrib.routes`：
- en: '[PRE77]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Remove the views directory from `modules/filemon/app`:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`modules/filemon/app`中删除视图目录：
- en: '[PRE78]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Remove the file `app/controller/Application.scala`:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`app/controller/Application.scala`文件：
- en: '[PRE79]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'Create the `User` model in `app/usercontrib/models/User.scala` with the following
    content:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app/usercontrib/models/User.scala`中创建`User`模型，内容如下：
- en: '[PRE80]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Insert additional module package settings in the `build.sbt` file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`文件中插入额外的模块包设置：
- en: '[PRE81]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Using the activator, build the `contrib.jar` and publish it to the remote internal
    repository:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用activator构建`contrib.jar`并将其发布到远程内部仓库：
- en: '[PRE82]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'You should be able to confirm in the console logs whether the upload was successful
    or not:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该能够在控制台日志中确认上传是否成功：
- en: '[PRE83]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this recipe, we created a new Play 2.0 module with the intention of packaging
    and publishing the module in our local repository. This makes the Play module
    available to the other Play web applications we will be working on. We created
    our model and service classes for a product that will be part of our module:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了一个新的Play 2.0模块，目的是将模块打包并发布到我们的本地仓库。这使得Play模块可供我们正在工作的其他Play web应用程序使用。我们为将成为我们模块一部分的产品创建了模型和服务类：
- en: '[PRE84]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'We built and published both modules into an internal repository using the `activator`
    publish command:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`activator`的发布命令构建并发布了这两个模块到内部仓库：
- en: '[PRE85]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'Once these modules were published in the internal repository, we then declared
    them as dependencies to Maven-based Java projects, not limited to Play 2.0 applications,
    in our case, `build.sbt`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些模块在内部仓库中发布，我们就将它们声明为基于Maven的Java项目的依赖项，不仅限于Play 2.0应用程序，在我们的例子中是`build.sbt`：
- en: '[PRE86]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Managing module dependencies
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理模块依赖项
- en: In this recipe, we will tackle the topic of adding Play modules to your Play
    2.0 application, which further demonstrates how powerful the Play 2.0 ecosystem
    is. This recipe requires the previous recipe to be run and assumes that you have
    followed on.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将解决将Play模块添加到您的Play 2.0应用程序中的问题，这进一步展示了Play 2.0生态系统的强大。这个菜谱需要运行之前的菜谱，并假设您已经继续执行。
- en: How to do it…
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'For Java, we need to perform the following steps:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Java，我们需要执行以下步骤：
- en: 'Run the `foo_java` application with Hot-Reloading enabled:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_java`应用程序：
- en: '[PRE87]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Add the `fooscala user-contrib` module as a project dependency in `build.sbt`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`中将`fooscala user-contrib`模块添加为项目依赖：
- en: '[PRE88]'
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Modify `foo_java/app/controllers/Application.java` by adding the following
    action:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作修改`foo_java/app/controllers/Application.java`：
- en: '[PRE89]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Add a new route for the newly added action in `foo_java/conf/routes`:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_java/conf/routes`中为新增的操作添加一个新的路由：
- en: '[PRE90]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'Using `curl`, we will be able to display the product and user Ids generated
    from the product and `user contrib` modules:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`，我们将能够显示由产品和用户贡献模块生成的产品和用户Ids：
- en: '[PRE91]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'For Scala, we need to perform the following steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Scala，我们需要执行以下步骤：
- en: 'Run the `foo_scala` application with Hot-Reloading enabled:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用热重载功能运行`foo_scala`应用程序：
- en: '[PRE92]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'Add the `foojava productcontrib` module as a project dependency in `build.sbt`:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`中将`foojava productcontrib`模块添加为项目依赖：
- en: '[PRE93]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'Modify `foo_scala/app/controllers/Application.scala` by adding the following
    action:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加以下操作修改`foo_scala/app/controllers/Application.scala`：
- en: '[PRE94]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Add a new route for the newly added action in `foo_scala/conf/routes`:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`foo_scala/conf/routes`中为新增的操作添加一个新的路由：
- en: '[PRE95]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'Using `curl`, we will be able to display the product and user Ids generated
    from the product and user contrib modules:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`curl`，我们将能够显示由产品和用户贡献模块生成的产品和用户Ids：
- en: '[PRE96]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: How it works…
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we explored how to include other modules into our Play 2.0 web
    application. With this recipe, we also displayed how Play Scala apps can work
    side by side with Play Java modules and vice versa.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们探讨了如何将其他模块包含到我们的Play 2.0 web应用程序中。通过这个菜谱，我们还展示了Play Scala应用程序如何与Play
    Java模块协同工作，反之亦然。
- en: 'We first declared that our root project will use both user and product contrib
    modules in `build.sbt`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先在`build.sbt`中声明我们的根项目将使用用户和产品贡献模块：
- en: '[PRE97]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'We then added the import statements to our controller so we could invoke their
    ID generation functions:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们在控制器中添加了导入语句，以便我们可以调用它们的ID生成函数：
- en: '[PRE98]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: Finally, we used `curl` to request our new routes to see the generated Ids in
    action.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用`curl`请求我们的新路由，以查看生成的Ids在实际中的应用。
- en: Adding private module repositories using Amazon S3
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Amazon S3添加私有模块仓库
- en: In this recipe, we will explore how we can use an external module repository
    to publish and resolve internal modules in the interest of distributing our modules.
    In this recipe, we will use Amazon S3, a popular cloud storage service, to store
    our ivy-style repository assets. You will need a valid AWS account to follow this
    recipe, ensure that you sign up for one at [http://aws.amazon.com/](http://aws.amazon.com/).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨如何使用外部模块存储库来发布和解析内部模块，以利于我们模块的分布。在这个菜谱中，我们将使用Amazon S3，这是一个流行的云存储服务，来存储我们的ivy风格存储库资产。您需要有效的AWS账户来遵循这个菜谱，确保您在[http://aws.amazon.com/](http://aws.amazon.com/)上注册了一个账户。
- en: 'Please refer to S3''s online documentation for more information:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅S3的在线文档以获取更多信息：
- en: '[http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://aws.amazon.com/s3/](http://aws.amazon.com/s3/)'
- en: How to do it…
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'We need to perform the following steps:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行以下步骤：
- en: 'Open the `product-contrib` project and run the application with Hot-Reloading
    enabled:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`product-contrib`项目，并启用热重载功能运行应用程序：
- en: '[PRE99]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'Edit the plugins config file in `project/plugins.sbt` and add the following
    plugin and resolver:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`project/plugins.sbt`文件中编辑插件配置文件，并添加以下插件和解析器：
- en: '[PRE100]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Edit the build config file in `build.sbt` to specify the settings we''ll use
    for the S3 resolver plugin:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`文件中编辑构建配置文件，以指定我们将用于S3解析器插件的设置：
- en: '[PRE101]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Specify your Amazon S3 API keys in the file `~/.sbt/.s3credentials`:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件`~/.sbt/.s3credentials`中指定您的Amazon S3 API密钥：
- en: '[PRE102]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'Next, publish the `product-contrib` snapshot using the activator:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用activator发布`product-contrib`快照：
- en: '[PRE103]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'You will see the success status message of the upload in the console logs:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将在控制台日志中看到上传的成功状态消息：
- en: '[PRE104]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: 'We will now use this repository in a new Play 2.0 application:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将在新的Play 2.0应用程序中使用此存储库：
- en: '[PRE105]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'Edit the plugins config file in `s3deps/project/plugins.sbt` and add the following
    plugin and resolver:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`s3deps/project/plugins.sbt`文件中编辑插件配置文件，并添加以下插件和解析器：
- en: '[PRE106]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Edit the build config file in `build.sbt` to specify the settings we''ll use
    for the S3 resolver plugin:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`build.sbt`文件中编辑构建配置文件，以指定我们将用于S3解析器插件的设置：
- en: '[PRE107]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Retrieve the product-contrib module using the activator:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用activator检索product-contrib模块：
- en: '[PRE108]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: How it works…
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'In this recipe, we used the sbt-s3-resolver plugin to publish and resolve dependencies
    using Amazon S3\. We included the `sbt` plugin in the file `project/plugins.sbt`:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了sbt-s3-resolver插件，通过Amazon S3发布和解析依赖项。我们在`project/plugins.sbt`文件中包含了`sbt`插件：
- en: '[PRE109]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'We specify our Amazon S3 API keys in the `.s3credentials` files in `~/.sbt
    directory`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`~/.sbt目录`中的`.s3credentials`文件中指定我们的Amazon S3 API密钥：
- en: '[PRE110]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'For publishing, we specify the resolver repository in `build.sbt` of the publishing
    project (product-contrib):'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 对于发布，我们在发布项目的`build.sbt`中指定解析器存储库：
- en: '[PRE111]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'To resolve dependencies, we specify the following in `build.sbt` of the consuming
    project (s3deps):'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 要解析依赖项，我们在消费项目的`build.sbt`中指定以下内容（s3deps）：
- en: '[PRE112]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
