- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Deploying Your Application
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署您的应用程序
- en: This chapter will explain how to deploy your backend and frontend to a server.
    Successful deployment is a key part of the software development process, and it
    is important to learn how a modern deployment process works. There are a variety
    of cloud servers or **PaaS** (short for **Platform-as-a-Service**) providers available,
    such as **Amazon Web Services** (**AWS**), DigitalOcean, Microsoft Azure, Railway,
    and Heroku.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何将您的后端和前端部署到服务器上。成功的部署是软件开发过程中的关键部分，了解现代部署过程的工作方式非常重要。有多种云服务器或 **PaaS**（代表
    **平台即服务**）提供商可供选择，例如 **Amazon Web Services**（**AWS**）、DigitalOcean、Microsoft Azure、Railway
    和 Heroku。
- en: In this book, we are using AWS and Netlify, which support multiple programming
    languages that are used in web development. We will also show you how to use Docker
    containers in deployments.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用 AWS 和 Netlify，它们支持在 Web 开发中使用的多种编程语言。我们还将向您展示如何在部署中使用 Docker 容器。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Deploying the backend with AWS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS 部署后端
- en: Deploying the frontend with Netlify
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Netlify 部署前端
- en: Using Docker containers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Docker 容器
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The Spring Boot application that we created in *Chapter 5*, *Securing Your Backend*,
    is required ([https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter05)),
    as is the React app that we used in *Chapter 16*, *Securing Your Application*
    ([https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter16](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter16)).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 *第5章*，*保护您的后端* 中创建的 Spring Boot 应用程序是必需的 ([https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter05))，同样，我们在
    *第16章*，*保护您的应用程序* 中使用的 React 应用程序也是必需的 ([https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter16](https://github.com/PacktPublishing/Full-Stack-Development-with-Spring-Boot-3-and-React-Fourth-Edition/tree/main/Chapter16))。
- en: A Docker installation is necessary for the final section of the chapter.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的最后部分需要安装 Docker。
- en: Deploying the backend with AWS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS 部署后端
- en: 'If you are going to use your own server, the easiest way to deploy a Spring
    Boot application is to use an executable **Java ARchive** (**JAR**) file. With
    Gradle, an executable JAR file can be created using the Spring Boot Gradle wrapper.
    You can build your project using the following Gradle wrapper command in your
    project folder:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您打算使用自己的服务器，部署 Spring Boot 应用程序最简单的方法是使用可执行的 **Java ARchive**（**JAR**）文件。使用
    Gradle，可以使用 Spring Boot Gradle 包装器创建可执行 JAR 文件。您可以使用以下 Gradle 包装器命令在项目文件夹中构建项目：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Alternatively, you can run a Gradle task in Eclipse by right-clicking **Project**
    in the Project Explorer, navigating to **Window | Show View | Other**, and selecting
    **Gradle | Gradle Tasks** from the list. This opens a list of Gradle tasks, and
    you can start the build process by double clicking the **build** task, as illustrated
    in the following screenshot. If the Gradle tasks window is empty, click the root
    folder of the project in Eclipse:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以通过在项目资源管理器中右键单击 **项目**，导航到 **窗口 | 显示视图 | 其他**，然后从列表中选择 **Gradle | Gradle
    任务**，在 Eclipse 中运行一个 Gradle 任务。这会打开一个 Gradle 任务的列表，您可以通过双击 **build** 任务来启动构建过程，如下面的截图所示。如果
    Gradle 任务窗口为空，请点击 Eclipse 中的项目根目录：
- en: '![](img/B19818_17_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_01.png)'
- en: 'Figure 17.1: Gradle tasks'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1：Gradle 任务
- en: 'This creates a new `build/libs` folder to your project, where you will find
    JAR files. By default, two JAR files are created:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的项目中创建一个新的 `build/libs` 文件夹，其中将包含 JAR 文件。默认情况下，创建了两个 JAR 文件：
- en: The file with extension `.plain.jar` contains Java bytecode and other resources,
    but it doesn’t contain any application framework or dependencies.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展名为 `.plain.jar` 的文件包含 Java 字节码和其他资源，但它不包含任何应用程序框架或依赖项。
- en: 'The other `.jar` file is a fully executable archive that you can run using
    the `java -jar your_appfile.jar` Java command, as illustrated in the following
    screenshot:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个 `.jar` 文件是一个完全可执行的存档，您可以使用 `java -jar your_appfile.jar` Java 命令来运行它，如下面的截图所示：
- en: '![](img/B19818_17_02.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_02.png)'
- en: 'Figure 17.2: Running the executable JAR file'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：运行可执行 JAR 文件
- en: Nowadays, cloud servers are the principal means of providing your application
    to end users. We are going to deploy our backend to **Amazon Web Services** (**AWS**)
    ([https://aws.amazon.com/](https://aws.amazon.com/)). The AWS Free Tier offers
    users an opportunity to explore products for free.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，云服务器是向最终用户提供应用程序的主要手段。我们将把我们的后端部署到 **Amazon Web Services**（**AWS**）（[https://aws.amazon.com/](https://aws.amazon.com/)）。AWS
    免费层为用户提供免费探索产品的机会。
- en: Create a Free Tier account and log in to AWS. You have to enter your contact
    information, including a functioning mobile phone number. AWS will send you an
    SMS confirmation message to verify your account. You must add a valid credit card,
    debit card, or another payment method for your accounts covered under the AWS
    Free Tier.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建免费层账户并登录 AWS。您必须输入您的联系信息，包括一个有效的手机号码。AWS 将发送一条短信确认消息以验证您的账户。您必须为 AWS 免费层下的账户添加有效的信用卡、借记卡或其他支付方式。
- en: You can read about the reasons why a payment method is needed at [https://repost.aws/knowledge-center/free-tier-payment-method](https://repost.aws/knowledge-center/free-tier-payment-method).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://repost.aws/knowledge-center/free-tier-payment-method](https://repost.aws/knowledge-center/free-tier-payment-method)
    阅读关于为什么需要支付方式的原因。
- en: Deploying our MariaDB database
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署我们的 MariaDB 数据库
- en: 'In this first section, we will deploy our MariaDB database to AWS. **Amazon
    Relational Database Service** (**RDS**) can be used to set up and operate relational
    databases. Amazon RDS supports several popular databases, including MariaDB. The
    following steps will take you through the process that creates a database in RDS:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将把我们的 MariaDB 数据库部署到 AWS。**Amazon 关系数据库服务**（**RDS**）可用于设置和运行关系数据库。Amazon
    RDS 支持包括 MariaDB 在内的几个流行的数据库。以下步骤将指导您完成在 RDS 中创建数据库的过程：
- en: 'After you have created a Free Tier account with AWS, log in to the AWS website.
    The AWS dashboard contains a search bar that you can use to find different services.
    Type `RDS` into the search bar and find RDS, as illustrated in the following screenshot.
    Click on **RDS** in the **Services** list:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您使用 AWS 创建了免费层账户后，登录 AWS 网站。AWS 仪表板包含一个搜索栏，您可以使用它来查找不同的服务。在搜索栏中输入 `RDS` 并找到
    RDS，如图下所示。在 **服务** 列表中点击 **RDS**：
- en: '![](img/B19818_17_03.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_03.png)'
- en: 'Figure 17.3: RDS'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.3：RDS
- en: 'Click the **Create database** button to begin the database creation process:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建数据库** 按钮开始数据库创建过程：
- en: '![](img/B19818_17_04.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_04.png)'
- en: 'Figure 17.4: Create database'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.4：创建数据库
- en: 'Select **MariaDB** from the database engine options:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从数据库引擎选项中选择 **MariaDB**：
- en: '![](img/B19818_17_05.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_05.png)'
- en: 'Figure 17.5: Engine options'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.5：引擎选项
- en: Select **Free tier** from the templates.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从模板中选择 **免费层**。
- en: 'Type a name for your database instance and the password for the database master
    user. You can use the default username (*admin*):'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的数据库实例输入名称和数据库主用户的密码。您可以使用默认用户名（*admin*）：
- en: '![](img/B19818_17_06.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_06.png)'
- en: 'Figure 17.6: Database instance name'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.6：数据库实例名称
- en: 'Select **Yes** under the **Public access** section to allow public access to
    your database:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **公共访问** 部分下选择 **是** 以允许公共访问您的数据库：
- en: '![](img/B19818_17_07.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_07.png)'
- en: 'Figure 17.7: Public access'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.7：公共访问
- en: In the **Additional configuration** section at the bottom of the page, name
    your database `cardb:`![](img/B19818_17_08.png)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面底部的 **附加配置** 部分中，为您的数据库命名 `cardb:`![图片](img/B19818_17_08.png)
- en: 'Figure 17.8: Additional configuration'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.8：附加配置
- en: Note! The database will not be created if the name is left empty.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意！如果名称留空，则不会创建数据库。
- en: Finally, click the **Create database** button. RDS will start to create your
    database instance, which might take a few minutes.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **创建数据库** 按钮。RDS 将开始创建您的数据库实例，这可能需要几分钟。
- en: 'After your database is successfully created, you can press the **View connection
    details** button to open a window that shows the connection details to your database.
    The **Endpoint** is the address of your database. Copy the connection details
    for later use:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的数据库成功创建后，您可以点击 **查看连接详情** 按钮打开一个窗口，显示您的数据库连接详情。**端点** 是您数据库的地址。复制连接详情以备后用：
- en: '![](img/B19818_17_09.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_09.png)'
- en: 'Figure 17.9: Connection details'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.9：连接详情
- en: 'Now, we are ready to test our database. In this phase, we will use our local
    Spring Boot application. For this, we have to allow access to our database from
    outside. To change this, click on your database in the RDS database list. Then,
    click **VPC security groups**, as shown in the next screenshot:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好测试我们的数据库。在这个阶段，我们将使用我们的本地Spring Boot应用程序。为此，我们必须允许从外部访问我们的数据库。要更改此设置，请在RDS数据库列表中点击您的数据库。然后，点击**VPC安全组**，如下截图所示：
- en: '![](img/B19818_17_10.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_10.png)'
- en: 'Figure 17.10: Connectivity & security'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.10：连接性与安全性
- en: 'On the opening page, click the **Edit inbound rules** button from the **Inbound
    rules** tab. Click the **Add rule** button to add a new rule. For the new rule,
    select the **MySQL/Aurora** type and the **My IP** destination under the **Source**
    column. The **My IP** destination automatically adds the current IP address of
    your local computer as an allowed destination:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在首页上，从**入站规则**选项卡中点击**编辑入站规则**按钮。点击**添加规则**按钮添加新规则。对于新规则，在**源**列下选择**MySQL/Aurora**类型和**我的IP**目标。**我的IP**目标会自动将您本地计算机的当前IP地址添加为允许的目标：
- en: '![](img/B19818_17_11.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_11.png)'
- en: 'Figure 17.11: Inbound rules'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.11：入站规则
- en: After you have added a new rule, press the **Save rules** button.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您添加了新规则后，按**保存规则**按钮。
- en: 'Open the Spring Boot application that we created in *Chapter 5*, *Securing
    Your Backend*. Change the `url`, `username`, and `password` database settings
    in the `application.properties` file to match your Amazon RDS database. The format
    of the `spring.datasource.url` property value is `jdbc:mariadb://your_rds_db_domain:3306/your_db_name`,
    as shown in the following screenshot:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在*第五章*，*保护后端*中创建的Spring Boot应用程序。将`application.properties`文件中的`url`、`username`和`password`数据库设置更改为与您的Amazon
    RDS数据库匹配。`spring.datasource.url`属性值的格式为`jdbc:mariadb://your_rds_db_domain:3306/your_db_name`，如下截图所示：
- en: '![](img/B19818_17_12.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_12.png)'
- en: 'Figure 17.12: The application.properties file'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.12：application.properties文件
- en: 'Now, if you run your application, you can see from the console that database
    tables are created and demo data is inserted into our Amazon RDS database:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果您运行应用程序，您可以从控制台看到数据库表已创建，并且示例数据已插入到我们的Amazon RDS数据库中：
- en: '![](img/B19818_17_13.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_13.png)'
- en: 'Figure 17.13: Console'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.13：控制台
- en: In this phase, you should build your Spring Boot application. Run a Gradle build
    task in Eclipse by right-clicking **Project** in the Project Explorer, navigating
    to **Window | Show View | Other**, and selecting **Gradle | Gradle Tasks** from
    the list. This opens a list of Gradle tasks, and you can start the build process
    by double-clicking the **build** task. It will create a new JAR file in the `build/libs`
    folder.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，您应该构建您的Spring Boot应用程序。在Eclipse中通过在项目资源管理器中右键单击**项目**，导航到**窗口 | 显示视图 |
    其他**，并从列表中选择**Gradle | Gradle任务**来运行Gradle构建任务。这将打开一个Gradle任务列表，您可以通过双击**build**任务来开始构建过程。它将在`build/libs`文件夹中创建一个新的JAR文件。
- en: We now have proper database settings, and we can use our newly built application
    when we deploy our application to AWS.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了适当的数据库设置，并且在我们将应用程序部署到AWS时可以使用我们新构建的应用程序。
- en: Deploying our Spring Boot application
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署我们的Spring Boot应用程序
- en: After we have deployed our database to Amazon RDS, we can start to deploy our
    Spring Boot application. The Amazon service that we are using is **Elastic Beanstalk**,
    whichcan be used to run and manage web apps in AWS. There are other alternatives,
    such as AWS Amplify, that can be used as well. Elastic Beanstalk is available
    for the Free Tier, and it also supports a wide range of programming languages
    (for example, Java, Python, Node.js, and PHP).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将数据库部署到Amazon RDS之后，我们可以开始部署我们的Spring Boot应用程序。我们正在使用的Amazon服务是**Elastic
    Beanstalk**，它可以用于在AWS中运行和管理Web应用程序。还有其他替代方案，例如AWS Amplify，也可以使用。Elastic Beanstalk适用于免费层，并且它还支持广泛的编程语言（例如Java、Python、Node.js和PHP）。
- en: 'The following steps will take you through the process of deploying our Spring
    Boot application to Elastic Beanstalk:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将指导您将我们的Spring Boot应用程序部署到Elastic Beanstalk的过程：
- en: 'First, we have to create a new **role** for our application deployment. The
    role is needed to allow Elastic Beanstalk to create and manage your environment.
    You can create a role using the Amazon **IAM** (**Identity and Access Management**)
    service. Use the AWS search bar to navigate to the IAM service. In the IAM service,
    select **Roles** and press the **Create role** button. Select **AWS Service**
    and **EC2**, as shown in the following screenshot, and press the **Next** button:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须为我们的应用程序部署创建一个新的 **角色**。该角色是允许 Elastic Beanstalk 创建和管理您的环境所必需的。您可以使用
    Amazon **IAM**（**身份和访问管理**）服务创建角色。使用 AWS 搜索栏导航到 IAM 服务。在 IAM 服务中，选择 **角色** 并点击
    **创建角色** 按钮。选择 **AWS 服务** 和 **EC2**，如图所示，然后点击 **下一步** 按钮：
- en: '![](img/B19818_17_14.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_14.png)'
- en: 'Figure 17.14: Create role'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.14：创建角色
- en: 'In the **Add Permissions** step, select the following permission policies:
    **AWSElasticBeanstalkWorkerTier**, **AWSElasticBeanstalkWebTier**, and **AWSElasticBeanstalkMulticontainerDocker**,
    then press the **Next** button. You can use the search bar to find the correct
    policies:![](img/B19818_17_15.png)'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加权限** 步骤中，选择以下权限策略：**AWSElasticBeanstalkWorkerTier**、**AWSElasticBeanstalkWebTier**
    和 **AWSElasticBeanstalkMulticontainerDocker**，然后点击 **下一步** 按钮。您可以使用搜索栏查找正确的策略：![](img/B19818_17_15.png)
- en: 'Figure 17.15: Add permissions'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.15：添加权限
- en: You can read more about managing Elastic Beanstalk instance profiles and policies
    at [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-instanceprofile.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-instanceprofile.html).
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-instanceprofile.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/iam-instanceprofile.html)
    阅读更多关于管理 Elastic Beanstalk 实例配置文件和策略的信息。
- en: Type a name for your role, as illustrated in the next screenshot, and finally
    press the **Create role** button:![](img/B19818_17_16.png)
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照下一张截图所示，为您的角色输入名称，并最终点击 **创建角色** 按钮：![](img/B19818_17_16.png)
- en: 'Figure 17.16: Role name'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 17.16：角色名称
- en: The new role that we just created allows Elastic Beanstalk to create and manage
    our environment. Now, we can start to deploy our Spring Boot application.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们刚刚创建的新角色允许 Elastic Beanstalk 创建和管理我们的环境。现在，我们可以开始部署我们的 Spring Boot 应用程序。
- en: 'Use the AWS dashboard search bar to find the **Elastic Beanstalk** service.
    Click the service to navigate to the Elastic Beanstalk page:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 AWS 仪表板搜索栏查找 **Elastic Beanstalk** 服务。点击服务以导航到 Elastic Beanstalk 页面：
- en: '![](img/B19818_17_17.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_17.png)'
- en: 'Figure 17.17: Elastic Beanstalk service'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.17：Elastic Beanstalk 服务
- en: 'Click **Applications** in the left side menu, and press the **Create application**
    button to create a new application. Type a name for your application, as shown
    in the following screenshot, and press the **Create** button:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧菜单中点击 **应用程序**，然后点击 **创建应用程序** 按钮以创建一个新的应用程序。按照以下截图所示，为您的应用程序输入名称，然后点击 **创建**
    按钮：
- en: '![](img/B19818_17_18.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_18.png)'
- en: 'Figure 17.18: Create application'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.18：创建应用程序
- en: 'Next, we have to create an **environment** for our application. An environment
    is a collection of AWS resources running an application version. You can have
    multiple environments for one application: for example, development, production,
    and testing environments. Click the **Create new environment** button to configure
    a new environment:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们必须为我们的应用程序创建一个 **环境**。环境是运行应用程序版本的 AWS 资源集合。您可以为一个应用程序拥有多个环境：例如，开发、生产和测试环境。点击
    **创建新环境** 按钮以配置新环境：
- en: '![](img/B19818_17_19.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_19.png)'
- en: 'Figure 17.19: Create new environment'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.19：创建新环境
- en: 'In the environment configuration, you first have to set the platform. In the
    **Platform type** section, select **Java** and the first version **17** for the
    branch, as shown in the following screenshot. The **Platform version** is a combination
    of specific versions of an operating system, runtime, web server, application
    server, and Elastic Beanstalk components. You can use the recommended **Platform**
    **version**:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在环境配置中，您首先必须设置平台。在 **平台类型** 部分，选择 **Java** 和分支的第一个版本 **17**，如图所示。**平台版本** 是操作系统、运行时、Web
    服务器、应用程序服务器和 Elastic Beanstalk 组件的特定版本的组合。您可以使用推荐的 **平台** **版本**：
- en: '![](img/B19818_17_20.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_20.png)'
- en: 'Figure 17.20: Platform type'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.20：平台类型
- en: 'Next, go to the **Application code** section in the configuration page. Select
    **Upload your code** and **Local file**. Click the **Choose file** button and
    select the Spring Boot `.jar` file that we built earlier. You also have to type
    in a unique **Version label**. Finally, press the **Next** button:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到配置页面中的**应用程序代码**部分。选择**上传你的代码**和**本地文件**。点击**选择文件**按钮并选择我们之前构建的Spring
    Boot `.jar`文件。你还需要输入一个唯一的**版本标签**。最后，点击**下一步**按钮：
- en: '![](img/B19818_17_21.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_21.png)'
- en: 'Figure 17.21: Create new environment'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.21：创建新环境
- en: 'In the **Configuration service access** step, select the role that you created
    earlier from the **EC2 instance profile** dropdown list, as shown in the following
    screenshot. Then, press the **Next** button:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置服务访问**步骤中，从**EC2实例配置文件**下拉列表中选择你之前创建的角色，如图所示。然后，点击**下一步**按钮：
- en: '![](img/B19818_17_22.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_22.png)'
- en: 'Figure 17.22: Service access'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.22：服务访问
- en: You can skip the optional **Set up networking, database, and tags** and **Configure
    instance traffic and scaling** steps.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以跳过可选的**设置网络、数据库和标签**和**配置实例流量和扩展**步骤。
- en: 'Next, move to the **Configure updates, monitoring, and logging** step. In the
    **Environment properties** section, we have to add the following environment properties.
    You can add new properties by pressing the **Add environment property** button
    at the bottom of the page. There are already some predefined properties that you
    don’t have to modify (`GRADLE_HOME`, `M2` and `M2_HOME`):'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，转到**配置更新、监控和日志**步骤。在**环境属性**部分，我们必须添加以下环境属性。你可以在页面底部点击**添加环境属性**按钮来添加新属性。已经有了一些预定义的属性，你不需要修改它们（`GRADLE_HOME`、`M2`和`M2_HOME`）：
- en: '`SERVER_PORT`: `5000` (Elastic beans have a Nginx reverse proxy that will forward
    incoming requests to internal port `5000`).'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERVER_PORT`: `5000`（弹性豆有Nginx反向代理，它将把传入的请求转发到内部端口`5000`）。'
- en: '`SPRING_DATASOURCE_URL`: The database URL you need to use here is identical
    to the database URL value we previously configured in the `''application.properties''`
    file when we initially tested the AWS database integration.'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPRING_DATASOURCE_URL`: 这里需要使用的数据库URL与我们之前在测试AWS数据库集成时在`''application.properties''`文件中配置的数据库URL值相同。'
- en: '`SPRING_DATASOURCE_USERNAME`: The username of your database.'
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPRING_DATASOURCE_USERNAME`: 你的数据库用户名。'
- en: '`SPRING_DATASOURCE_PASSWORD`: The password of your database.'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SPRING_DATASOURCE_PASSWORD`: 你的数据库密码。'
- en: 'The following screenshot shows the new properties:'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个屏幕截图显示了新的属性：
- en: '![](img/B19818_17_23.png)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_23.png)'
- en: 'Figure 17.23: Environment properties'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图17.23：环境属性
- en: 'Finally, in the **Review** step, press the **Submit** button, and your deployment
    will start. You have to wait until your environment is successfully launched,
    as illustrated in the next screenshot. The **Domain** in the **Environment overview**
    is the URL of your deployed REST API:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在**审查**步骤中，点击**提交**按钮，你的部署将开始。你必须等待直到你的环境成功启动，如图所示的下个屏幕截图。**环境概述**中的**域名**是你部署的REST
    API的URL：
- en: '![A screenshot of a computer  Description automatically generated](img/B19818_17_24.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图，自动生成描述](img/B19818_17_24.png)'
- en: 'Figure 17.24: Environment successfully launched'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.24：环境成功启动
- en: Now, we have deployed our Spring Boot application, but the application can’t
    access the AWS database yet. For this, we have to allow access from the deployed
    application to our database. To do this, navigate to Amazon RDS and select your
    database from the RDS database list. Then, click **VPC security groups** and click
    the **Edit inbound rules** button, like we did earlier. Delete the rule that allows
    access from your local IP address.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经部署了我们的Spring Boot应用程序，但应用程序还不能访问AWS数据库。为此，我们必须允许从部署的应用程序访问我们的数据库。要做到这一点，导航到Amazon
    RDS并从RDS数据库列表中选择你的数据库。然后，点击**VPC安全组**并点击**编辑入站规则**按钮，就像我们之前做的那样。删除允许从你的本地IP地址访问的规则。
- en: 'Add a new rule whose **Type** is **MySQL/Aurora**. In the **Destination** field,
    type in `sg`. This will open a list of environments, as shown in the following
    screenshot. Select the environment where your Spring Boot application is running
    (it begins with the “awseb” text and has a subtitle that shows the name of your
    environment) and press the **Save rules** button:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个**类型**为**MySQL/Aurora**的新规则。在**目标**字段中，输入`sg`。这将打开一个环境列表，如图所示。选择你的Spring
    Boot应用程序运行的环境（以“awseb”文本开头，副标题显示你的环境名称）并点击**保存规则**按钮：
- en: '![](img/B19818_17_25.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_25.png)'
- en: 'Figure 17.25: Inbound rules'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.25：入站规则
- en: 'Now, your application is properly deployed, and you can log in to your deployed
    REST API using Postman and the URL that you got from the domain in *step 12*.
    The following screenshot shows the POST request that is sent to the `aws_domain_url/login`
    endpoint:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的应用程序已正确部署，您可以使用从域名中获得的 URL 使用 Postman 登录到您的已部署 REST API。以下截图显示了发送到 `aws_domain_url/login`
    端点的 POST 请求：
- en: '![](img/B19818_17_26.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_26.png)'
- en: 'Figure 17.26: Postman authentication'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.26：邮递员身份验证
- en: 'You can also configure a custom domain name for your Elastic Beanstalk environment,
    and then you can use HTTPS to allow users to connect to your website securely.
    If you don’t own a domain name, you can still use HTTPS with a self-signed certificate
    for development and testing purposes. You can find the configuration instructions
    in the AWS documentation: [https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以为您的 Elastic Beanstalk 环境配置一个自定义域名，然后您可以使用 HTTPS 允许用户安全地连接到您的网站。如果您没有域名，您仍然可以使用自签名证书进行开发和测试。您可以在
    AWS 文档中找到配置说明：[https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html](https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/configuring-https.html)。
- en: Note! You should delete AWS resources that you have created to avoid being charged
    unexpectedly. You will get a reminder email from AWS to delete resources before
    the end of your Free Tier period.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！您应该删除您创建的 AWS 资源，以避免意外收费。在您的免费试用期结束时，AWS 会提醒您删除资源。
- en: Now, we are ready to deploy our frontend.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好部署我们的前端。
- en: Deploying the frontend with Netlify
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Netlify 部署前端
- en: 'Before we deploy with Netlify, we will learn how you can build your React project
    locally. Move to your frontend project folder and execute the following `npm`
    command:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用 Netlify 部署之前，我们将学习如何在本地构建您的 React 项目。移动到您的前端项目文件夹并执行以下 `npm` 命令：
- en: '[PRE1]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: By default, your project is built in the `/dist` folder. You can change the
    folder by using the `build.outDir` property in your Vite configuration file.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，您的项目在 `/dist` 文件夹中构建。您可以通过在 Vite 配置文件中使用 `build.outDir` 属性来更改文件夹。
- en: 'First, the build process compiles your TypeScript code; therefore, you have
    to fix all TypeScript errors or warnings, if there are any. A commonly encountered
    error occurs when you forget to remove unused imports, as illustrated in the example
    error below:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，构建过程会编译您的 TypeScript 代码；因此，如果您有任何 TypeScript 错误或警告，您必须修复它们。一个常见的错误是忘记删除未使用的导入，如下面的示例错误所示：
- en: '[PRE2]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This indicates that the `AddCar.tsx` file imports the `Snackbar` component,
    but the component isn’t actually utilized. Therefore, you should remove this unused
    import. Once all errors have been resolved, you can proceed to rebuilding your
    project.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示 `AddCar.tsx` 文件导入了 `Snackbar` 组件，但实际上并没有使用该组件。因此，您应该删除这个未使用的导入。一旦所有错误都已被解决，您就可以继续重新构建您的项目。
- en: 'Vite uses **Rollup** ([https://rollupjs.org/](https://rollupjs.org/)) to bundle
    your code. Test files and development tools are *not* included in the production
    build. After you have built your app, you can test your local build using the
    following `npm` command:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: Vite 使用 **Rollup** ([https://rollupjs.org/](https://rollupjs.org/)) 来打包您的代码。测试文件和开发工具不包括在生产构建中。构建完您的应用程序后，您可以使用以下
    `npm` 命令测试您的本地构建：
- en: '[PRE3]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The command starts a local static web server that serves your built app. You
    can test your app in a browser by using the URL that is shown in the terminal.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令启动一个本地静态 Web 服务器，用于提供您的构建应用程序。您可以通过在终端中显示的 URL 使用浏览器测试您的应用程序。
- en: 'You could deploy your frontend to AWS as well, but we will use **Netlify**
    ([https://www.netlify.com/](https://www.netlify.com/)) for our frontend deployment.
    Netlify is a modern web development platform that is easy to use. You can use
    the Netlify **command-line interface** (**CLI**) or GitHub to deploy your project.
    In this section, we will use Netlify’s GitHub integration to deploy our frontend:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以将前端部署到 AWS，但我们将使用 **Netlify** ([https://www.netlify.com/](https://www.netlify.com/))
    进行前端部署。Netlify 是一个易于使用的现代网络开发平台。您可以使用 Netlify 的 **命令行界面**（**CLI**）或 GitHub 部署您的项目。在本节中，我们将使用
    Netlify 的 GitHub 集成来部署我们的前端：
- en: 'First, we have to change our REST API URL. Open your frontend project with
    VS Code and open the `.env` file in the editor. Change the `VITE_API_URL` variable
    to match your backend’s URL, as follows, and save the changes:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们必须更改我们的 REST API URL。使用 VS Code 打开你的前端项目，并在编辑器中打开 `.env` 文件。将 `VITE_API_URL`
    变量更改为匹配你的后端 URL，如下所示，并保存更改：
- en: '[PRE4]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create a GitHub repository for your frontend project. Execute the following
    Git commands in your project folder using the command line. These Git commands
    create a new Git repository, make an initial commit, set up a remote repository
    on GitHub, and push the code to your remote repository:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的前端项目创建一个 GitHub 代码库。在你的项目文件夹中使用命令行执行以下 Git 命令。这些 Git 命令创建一个新的 Git 代码库，进行初始提交，在
    GitHub 上设置远程代码库，并将代码推送到你的远程代码库：
- en: '[PRE5]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Sign up and log in to Netlify. We will use a free **Starter** account that has
    limited features. With this account, you can build one concurrent build for free,
    and there is some limitation in bandwidth.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Netlify 上注册并登录。我们将使用具有有限功能的免费 **Starter** 账户。使用此账户，你可以免费构建一个并发构建，并且在带宽方面有一些限制。
- en: You can read more about the Netlify free account features at [https://www.netlify.com/pricing/](https://www.netlify.com/pricing/).
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在 [https://www.netlify.com/pricing/](https://www.netlify.com/pricing/) 上了解更多关于
    Netlify 免费账户功能的信息。
- en: 'Open the **Sites** from the left side menu and you should see the **Import
    an existing project** panel, as shown in the following screenshot:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧菜单打开 **站点**，你应该会看到 **导入现有项目** 面板，如下截图所示：
- en: '![](img/B19818_17_27.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_27.png)'
- en: 'Figure 17.27: Import an existing project'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.27：导入现有项目
- en: 'Click the **Import from Git** button and select **Deploy with GitHub**. In
    this phase, you have to authorize your GitHub to get access to your repositories.
    After you have authorized successfully, you should see your GitHub username and
    repository search field, as shown in the following screenshot:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **从 Git 导入** 按钮，并选择 **使用 GitHub 部署**。在这个阶段，你必须授权 GitHub 以访问你的代码库。成功授权后，你应该会看到你的
    GitHub 用户名和代码库搜索字段，如下截图所示：
- en: '![](img/B19818_17_28.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_28.png)'
- en: 'Figure 17.28: GitHub repository'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.28：GitHub 代码库
- en: Search for your frontend repository and click it.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 搜索你的前端代码库并点击它。
- en: 'Next, you will see the deployment settings. Continue with the default settings
    by pressing the **Deploy <your_repository_name>** button:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，你将看到部署设置。通过按下 **部署 <你的代码库名称>** 按钮继续使用默认设置：
- en: '![](img/B19818_17_29.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_29.png)'
- en: 'Figure 17.29: Deployment settings'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.29：部署设置
- en: 'After the deployment has finished, you will see the following dialog. Press
    the **View site deploy** button, as shown in the following figure, and you will
    be redirected to the **Deploys** page. Netlify generates a random site name for
    you, but you can use your own domain as well:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署完成后，你会看到以下对话框。按下如下图中所示的 **查看站点部署** 按钮，你将被重定向到 **部署** 页面。Netlify 为你生成一个随机的站点名称，但你也可以使用自己的域名：
- en: '![](img/B19818_17_30.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_30.png)'
- en: 'Figure 17.30: Deploy success'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.30：部署成功
- en: 'On the **Deploys** page, you will see your deployed site, and you can access
    your frontend by clicking the **Open production deploy** button:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **部署** 页面上，你会看到你的部署网站，你可以通过点击 **打开生产部署** 按钮访问你的前端：
- en: '![](img/B19818_17_31.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_31.png)'
- en: 'Figure 17.31: Deploys'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.31：部署
- en: 'Now, you should see the login form, as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该会看到登录表单，如下所示：
- en: '![](img/B19818_17_32.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_32.png)'
- en: 'Figure 17.32: Login screen'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.32：登录屏幕
- en: You can delete your Netlify deployment from the **Site configuration** in the
    left side menu.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从左侧菜单的 **站点配置** 中删除你的 Netlify 部署。
- en: We have now deployed our frontend, and we can move on to learning about containers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已部署了我们的前端，接下来我们可以继续学习容器。
- en: Using Docker containers
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 容器
- en: '**Docker** ([https://www.docker.com/](https://www.docker.com/)) is a container
    platform that makes software development, deployment, and shipping easier. Containers
    are lightweight and executable software packages that include everything that
    is needed to run software. Containers can be deployed to cloud services, such
    as AWS, Azure, and Netlify, and they offer many benefits for deploying applications:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker** ([https://www.docker.com/](https://www.docker.com/)) 是一个容器平台，它使软件开发、部署和分发变得更加容易。容器是轻量级的可执行软件包，包含运行软件所需的一切。容器可以部署到云服务，如
    AWS、Azure 和 Netlify，并且为部署应用程序提供了许多好处：'
- en: Containers are isolated, which means each container runs independently of the
    host system and other containers.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器是隔离的，这意味着每个容器都独立于主机系统和其它容器运行。
- en: Containers are portable because they contain everything an application needs
    to run.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器之所以可移植，是因为它们包含了应用程序运行所需的一切。
- en: Containers can also be used to ensure consistency between development and production
    environments.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器还可以用来确保开发和生产环境之间的一致性。
- en: 'Note! To run Docker containers on Windows, you need the Windows 10 or 11 Professional
    or Enterprise versions. You read more about this in the Docker installation documentation:
    [https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意！要在Windows上运行Docker容器，你需要Windows 10或11的专业版或企业版。你可以在Docker安装文档中了解更多信息：[https://docs.docker.com/desktop/install/windows-install/](https://docs.docker.com/desktop/install/windows-install/)。
- en: 'In this section, we will create a container for our MariaDB database and Spring
    Boot application, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个用于我们的MariaDB数据库和Spring Boot应用程序的容器，如下所示：
- en: Install Docker on your workstation. You can find installation packages for multiple
    platforms at [https://www.docker.com/get-docker](https://www.docker.com/get-docker).
    If you have a Windows operating system, you can go through the installation wizard
    using the default settings.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的工作站上安装Docker。你可以在[https://www.docker.com/get-docker](https://www.docker.com/get-docker)找到多个平台的安装包。如果你使用的是Windows操作系统，你可以使用默认设置通过安装向导进行安装。
- en: If you are having problems with the installation, you can read the Docker troubleshooting
    documentation at [https://docs.docker.com/desktop/troubleshoot/topics](https://docs.docker.com/desktop/troubleshoot/topics).
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你遇到安装问题，你可以阅读Docker故障排除文档，网址为[https://docs.docker.com/desktop/troubleshoot/topics](https://docs.docker.com/desktop/troubleshoot/topics)。
- en: 'After the installation, you can check the current version by typing the following
    command in the terminal. Note! When you run Docker commands, you should start
    Docker Engine if it is not running (on Windows and macOS, you start Docker Desktop):'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装完成后，你可以在终端中输入以下命令来检查当前版本。注意！当你运行Docker命令时，如果Docker Engine没有运行（在Windows和macOS上，你启动Docker
    Desktop）：
- en: '[PRE6]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'First, we create a container for our MariaDB database. You can pull the latest
    MariaDB database image version from Docker Hub using the following command:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们为我们的MariaDB数据库创建一个容器。你可以使用以下命令从Docker Hub拉取最新的MariaDB数据库镜像版本：
- en: '[PRE7]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After the `pull` command has finished, you can check that a new `mariadb` image
    exists by typing the `docker image ls` command, and the output should look as
    follows. A **Docker image** is a template that contains instructions for creating
    a container:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pull`命令完成后，你可以通过输入`docker image ls`命令来检查是否已存在一个新的`mariadb`镜像，输出应该如下所示。**Docker镜像**是一个包含创建容器指令的模板：
- en: '![](img/B19818_17_33.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19818_17_33.png)'
- en: 'Figure 17.33: Docker images'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.33：Docker镜像
- en: 'Next, we will run the `mariadb` container. The `docker run` command creates
    and runs a container based on the given image. The following command sets the
    root user password and creates a new database, called `cardb`, that we need for
    our Spring Boot application (Note! Use your own MariaDB root user password that
    you are using in your Spring Boot application):'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将运行`mariadb`容器。`docker run`命令基于给定的镜像创建并运行一个容器。以下命令设置了root用户的密码并创建了一个名为`cardb`的新数据库，这是我们Spring
    Boot应用程序所需的（注意！请使用你在Spring Boot应用程序中使用的自己的MariaDB root用户密码）：
- en: '[PRE8]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, we have created our database container, and we can start to create a container
    for the Spring Boot application. First, we have to change the data source URL
    of our Spring Boot application. Open the `application.properties` file of your
    application and change the `spring.datasource.url` value to the following:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经创建了我们的数据库容器，我们可以开始创建Spring Boot应用程序的容器。首先，我们必须更改Spring Boot应用程序的数据源URL。打开应用程序的`application.properties`文件，将`spring.datasource.url`的值更改为以下内容：
- en: '[PRE9]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is because our database is now running in the `cardb` container and the
    port is `3306`.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是因为我们的数据库现在正在`cardb`容器中运行，端口为`3306`。
- en: Then, we have to create an executable JAR file from our Spring Boot application,
    just as we did at the beginning of this chapter. You can also run a Gradle task
    in the Eclipse by right-clicking **Project** in the Project Explorer, selecting
    **Window | Show View | Gradle** and then **Gradle Tasks** from the list. This
    opens a list of Gradle tasks, and you can start the build process by double clicking
    the **build** task. Once the build is finished, you can find the executable JAR
    file from the `build/libs` folder inside your project folder.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们必须从我们的 Spring Boot 应用程序创建一个可执行的 JAR 文件，就像我们在本章开头所做的那样。你还可以通过在项目资源管理器中右键单击
    **Project**，选择 **Window | Show View | Gradle**，然后从列表中选择 **Gradle Tasks**，在 Eclipse
    中运行一个 Gradle 任务。这会打开一个 Gradle 任务列表，你可以通过双击 **build** 任务来启动构建过程。一旦构建完成，你可以在项目文件夹内的
    `build/libs` 文件夹中找到可执行的 JAR 文件。
- en: 'Containers are defined by using **Dockerfiles**. Create a new Dockerfile using
    Eclipse in the `root` folder of your project (`cardatabase`) and name it `Dockerfile`.
    The following lines of code show the contents of the Dockerfile:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 容器是通过使用 **Dockerfile** 定义的。在项目的 `root` 文件夹（`cardatabase`）中使用 Eclipse 创建一个新的
    Dockerfile，并将其命名为 `Dockerfile`。以下代码行显示了 Dockerfile 的内容：
- en: '[PRE10]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let’s examine each line:'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们逐行检查：
- en: '`FROM` defines the **Java Development Kit** (**JDK**) version, and you should
    use the same version that you used to build your JAR file. We are using Eclipse
    Temurin, which is an open-source JDK, and version 17, which we used when we developed
    our Spring Boot application.'
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FROM` 定义了 **Java 开发工具包**（**JDK**）版本，你应该使用与构建你的 JAR 文件相同的版本。我们使用 Eclipse Temurin，这是一个开源
    JDK，版本为 17，这是我们开发 Spring Boot 应用程序时使用的版本。'
- en: Volumes are used for persistent data generated by and used by Docker containers.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 体积用于存储 Docker 容器生成和使用的持久数据。
- en: '`EXPOSE` defines the port that should be published outside of the container.'
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPOSE` 定义了应该发布到容器外部的端口。'
- en: '`COPY` copies the JAR file to the container’s filesystem and renames it `app.jar`.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`COPY` 将 JAR 文件复制到容器的文件系统，并将其重命名为 `app.jar`。'
- en: Lastly, `ENTRYPOINT` defines the command-line arguments that the Docker container
    runs.
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`ENTRYPOINT` 定义了 Docker 容器运行的命令行参数。
- en: You can read more about the Dockerfile syntax at [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/).
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以在 [https://docs.docker.com/engine/reference/builder/](https://docs.docker.com/engine/reference/builder/)
    上阅读更多关于 Dockerfile 语法的信息。
- en: 'Build an image with the following command in the folder where your Dockerfile
    is located. With the `-t` argument, we can give a friendly name to our container:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Dockerfile 所在的文件夹中，使用以下命令构建一个镜像。使用 `-t` 参数，我们可以为我们的容器提供一个友好的名称：
- en: '[PRE11]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'At the end of the build, you should see a **Building** [...] **FINISHED** message,
    as illustrated in the following screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构建结束时，你应该会看到一条 **Building** [...] **FINISHED** 消息，如下面的截图所示：
- en: '![Figure 15.25 – Docker build ](img/B19818_17_34.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.25 – Docker 构建](img/B19818_17_34.png)'
- en: 'Figure 17.34: Docker build'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.34：Docker 构建
- en: 'Check the list of images using the `docker image ls` command. You should see
    two images now, as shown in the following screenshot:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `docker image ls` 命令检查镜像列表。现在你应该看到两个镜像，如下面的截图所示：
- en: '![](img/B19818_17_35.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_35.png)'
- en: 'Figure 17.35: Docker images'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.35：Docker 镜像
- en: 'Now, we can run our Spring Boot container and link the MariaDB container to
    it using the following command. This command specifies that our Spring Boot container
    can access the MariaDB container using the `mariadb` name:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以运行我们的 Spring Boot 容器，并使用以下命令将其与 MariaDB 容器链接起来。此命令指定我们的 Spring Boot 容器可以使用
    `mariadb` 名称访问 MariaDB 容器：
- en: '[PRE12]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'When our application and database are running, we can access the Spring Boot
    application logs using the following command:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的应用程序和数据库正在运行时，我们可以使用以下命令访问 Spring Boot 应用程序日志：
- en: '[PRE13]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can see here that our application is up and running:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到，我们的应用程序正在运行：
- en: '![](img/B19818_17_36.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_36.png)'
- en: 'Figure 17.36: Application log'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.36：应用程序日志
- en: 'Our application has started successfully, and the demonstration data has been
    inserted into the database that exists in the MariaDB container. Now, you can
    use your backend, as seen in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序已成功启动，演示数据已插入到 MariaDB 容器中存在的数据库中。现在，你可以使用你的后端，如下面的截图所示：
- en: '![](img/B19818_17_37.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19818_17_37.png)'
- en: 'Figure 17.37: Application login'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.37：应用程序登录
- en: 'We have learned a few different ways to deploy your full-stack application
    and how to containerize your Spring Boot application. As a next step, you could
    study how to deploy Docker containers. For example, AWS has a guide to deploying
    containers on Amazon ECS: [https://aws.amazon.com/getting-started/hands-on/deploy-docker-containers/](https://aws.amazon.com/getting-started/hands-on/deploy-docker-containers/).'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了多种部署全栈应用程序的方法以及如何容器化 Spring Boot 应用程序。作为下一步，你可以研究如何部署 Docker 容器。例如，AWS
    提供了在 Amazon ECS 上部署容器的指南：[https://aws.amazon.com/getting-started/hands-on/deploy-docker-containers/](https://aws.amazon.com/getting-started/hands-on/deploy-docker-containers/)。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to deploy our application. We deployed the
    Spring Boot application to AWS Elastic Beanstalk. Next, we deployed our React
    frontend using Netlify. Finally, we used Docker to create containers for our Spring
    Boot application and the MariaDB database.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何部署我们的应用程序。我们将 Spring Boot 应用程序部署到了 AWS Elastic Beanstalk。接下来，我们使用
    Netlify 部署了我们的 React 前端。最后，我们使用 Docker 为 Spring Boot 应用程序和 MariaDB 数据库创建了容器。
- en: As we reach the final pages of this book, I hope you’ve had an exciting journey
    through the world of full-stack development with Spring Boot and React. As you
    continue your full-stack development journey, remember that technologies are evolving
    all the time. For a developer, life is constant learning and innovation – so stay
    curious and keep building.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们翻到这本书的最后一页时，我希望你在使用 Spring Boot 和 React 进行全栈开发的世界之旅中度过了一段激动人心的旅程。在你继续全栈开发之旅的过程中，请记住，技术总是在不断演变。对于开发者来说，生活就是持续的学习和创新——所以保持好奇心并继续构建。
- en: Questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How should you create a Spring Boot executable JAR file?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建一个 Spring Boot 可执行 JAR 文件？
- en: What AWS services you can use to deploy a database and Spring Boot application
    to AWS?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用哪些 AWS 服务将数据库和 Spring Boot 应用程序部署到 AWS？
- en: What command can you use to build your Vite React project?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用什么命令来构建你的 Vite React 项目？
- en: What is Docker?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker 是什么？
- en: How should you create a Spring Boot application container?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建一个 Spring Boot 应用程序容器？
- en: How should you create a MariaDB container?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该如何创建一个 MariaDB 容器？
- en: Further reading
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Packt Publishing has other resources available for learning about React, Spring
    Boot, and Docker. A few of them are listed here:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Packt Publishing 提供其他资源，用于学习 React、Spring Boot 和 Docker。其中一些列在这里：
- en: '*Docker Fundamentals for Beginners [Video]*, by Coding Gears | Train Your Brain
    ([https://www.packtpub.com/product/docker-fundamentals-for-beginners-video/9781803237428](https://www.packtpub.com/product/docker-fundamentals-for-beginners-video/9781803237428))'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 基础知识入门 [视频]*，由 Coding Gears | Train Your Brain 提供 ([https://www.packtpub.com/product/docker-fundamentals-for-beginners-video/9781803237428](https://www.packtpub.com/product/docker-fundamentals-for-beginners-video/9781803237428))'
- en: '*Docker* *for* *Developers*, by Richard Bullington-McGuire, Andrew K. Dennis,
    andMichael Schwartz ([https://www.packtpub.com/product/docker-for-developers/9781789536058](https://www.packtpub.com/product/docker-for-developers/9781789536058))'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker 开发者指南*，由 Richard Bullington-McGuire、Andrew K. Dennis 和 Michael Schwartz
    著 ([https://www.packtpub.com/product/docker-for-developers/9781789536058](https://www.packtpub.com/product/docker-for-developers/9781789536058))'
- en: '*AWS, JavaScript, React - Deploy Web Apps on the Cloud [Video]*, by YouAccel
    Training ([https://www.packtpub.com/product/aws-javascript-react-deploy-web-apps-on-the-cloud-video/9781837635801](https://www.packtpub.com/product/aws-javascript-react-deploy-web-apps-on-the-cloud-video/9781837635801))'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AWS、JavaScript、React - 在云端部署 Web 应用 [视频]*，由 YouAccel Training 提供 ([https://www.packtpub.com/product/aws-javascript-react-deploy-web-apps-on-the-cloud-video/9781837635801](https://www.packtpub.com/product/aws-javascript-react-deploy-web-apps-on-the-cloud-video/9781837635801))'
- en: Learn more on Discord
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask the author questions, and learn about new releases – follow the QR code below:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里你可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/FullStackSpringBootReact4e](https://packt.link/FullStackSpringBootReact4e)'
- en: '![](img/QR_Code10796108009382640.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code10796108009382640.png)'
